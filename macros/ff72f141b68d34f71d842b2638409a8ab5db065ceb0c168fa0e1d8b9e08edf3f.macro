Attribute VB_Name = "Module1"
'========================================================================================================================='
'========================================================================================================================='
' This subroutine clears temporary tables of the previous simulation results, static and dynamic
Sub TableClear(MySheet As String)
    ActiveWorkbook.Sheets(MySheet).Select
    Range("A3", Range("A3").End(xlDown).End(xlToRight)).Select
    Selection.ClearContents
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine returns results to Excel
Sub TablePaste(MySheet As String, FileName As String)
    ActiveWorkbook.Sheets(MySheet).Select

    Dim fName As String
    Dim FilePath As String
    FilePath = Application.ActiveWorkbook.Path & "\"
    fName = FilePath & FileName
    
    If fName = "False" Then Exit Sub
        With ActiveWorkbook.Sheets(MySheet).QueryTables.Add(Connection:="TEXT;" & fName, _
            Destination:=Range("$A$3"))
                .FieldNames = True
                .RowNumbers = False
                .FillAdjacentFormulas = False
                .PreserveFormatting = True
                .RefreshOnFileOpen = False
                .RefreshStyle = xlInsertDeleteCells
                .SavePassword = False
                .SaveData = True
                .AdjustColumnWidth = False
                .RefreshPeriod = 0
                .TextFilePromptOnRefresh = False
                .TextFilePlatform = 437
                .TextFileStartRow = 1
                .TextFileParseType = xlDelimited
                .TextFileTextQualifier = xlTextQualifierNone
                .TextFileConsecutiveDelimiter = True
                .TextFileTabDelimiter = False
                .TextFileSemicolonDelimiter = False
                .TextFileCommaDelimiter = False
                .TextFileSpaceDelimiter = True
                .TextFileOtherDelimiter = False
                .TextFileTrailingMinusNumbers = True
                .Refresh BackgroundQuery:=False
        End With
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine clears current charts
Sub PlotClear(MyChart As String)
    Dim ChrtObj As ChartObject
    Dim Chrt As Chart
    ' Clears stress chart
    Set ChrtObj = ActiveWorkbook.Sheets("Results").ChartObjects(MyChart)
    Set Chrt = ChrtObj.Chart
    With Chrt
        .ChartArea.ClearContents
        '.SeriesCollection().Delete
    End With
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine plots static results
Sub PlotStatic(Col0 As Long, Col As Long, TmpSheet As String)
    ' Making the temporary sheet visible
    ActiveWorkbook.Sheets(TmpSheet).Visible = True
    ActiveWorkbook.Sheets(TmpSheet).Select
    '---------------------------------------------------------------------------------------------------------------------'
    'Finding the last non-blank cell in the columns of data
    Dim LastRow As Long
    LastRow = ActiveWorkbook.Sheets(TmpSheet).Cells(Rows.Count, 1).End(xlUp).Row
    '---------------------------------------------------------------------------------------------------------------------'
    ' Defining the chart variables
    Dim MyChartObject As ChartObject
    Dim MyChart As Chart
    Dim xRange As Range
    Dim yRange As Range
    Dim GraphRange As Range
    Dim CapX As String
    Dim CapY As String
    Dim Lim As Double
    '---------------------------------------------------------------------------------------------------------------------'
    ' Stress chart
    Set MyChartObject = ActiveWorkbook.Sheets("Results").ChartObjects("Chart 1")
    Set MyChart = MyChartObject.Chart
    Set xRange = ActiveWorkbook.Sheets(TmpSheet).Range("A3" & ":" & "A" & LastRow)
    Set yRange = ActiveWorkbook.Sheets(TmpSheet).Range("B3" & ":" & "B" & LastRow)
    Set GraphRange = Union(xRange, yRange)
    MyChart.ChartType = xlXYScatterLines
    ' Figure Captions
    CapX = "Pipe length (m)"
    CapY = "V.M. Stress (MPa)"
    ' Figure limits
    Lim = 10
    ' Calling a subroutine to set plot specifications
    Call PlotSpecs(MyChart, Col0, Col, xRange, yRange, GraphRange, CapX, CapY, Lim)
    '---------------------------------------------------------------------------------------------------------------------'
    ' Strain chart
    Set MyChartObject = ActiveWorkbook.Sheets("Results").ChartObjects("Chart 7")
    Set MyChart = MyChartObject.Chart
    Set xRange = ActiveWorkbook.Sheets(TmpSheet).Range("A3" & ":" & "A" & LastRow)
    Set yRange = ActiveWorkbook.Sheets(TmpSheet).Range("C3" & ":" & "C" & LastRow)
    Set GraphRange = Union(xRange, yRange)
    MyChart.ChartType = xlXYScatterLines
    ' Figure Captions
    CapX = "Pipe length (m)"
    CapY = "Max Strain (1E-4)"
    ' Figure limits
    Lim = 0.5
    ' Calling a subroutine to set plot specifications
    Call PlotSpecs(MyChart, Col0, Col, xRange, yRange, GraphRange, CapX, CapY, Lim)
    '---------------------------------------------------------------------------------------------------------------------'
    ' Axial displacement chart
    Set MyChartObject = ActiveWorkbook.Sheets("Results").ChartObjects("Chart 8")
    Set MyChart = MyChartObject.Chart
    Set xRange = ActiveWorkbook.Sheets(TmpSheet).Range("A3" & ":" & "A" & LastRow)
    Set yRange = ActiveWorkbook.Sheets(TmpSheet).Range("D3" & ":" & "D" & LastRow)
    Set GraphRange = Union(xRange, yRange)
    MyChart.ChartType = xlXYScatterLines
    ' Figure Captions
    CapX = "Pipe length (m)"
    CapY = "Axial Disp. (mm)"
    ' Figure limits
    Lim = 0.001
    ' Calling a subroutine to set plot specifications
    Call PlotSpecs(MyChart, Col0, Col, xRange, yRange, GraphRange, CapX, CapY, Lim)
    '---------------------------------------------------------------------------------------------------------------------'
    ' Deflection chart
    Set MyChartObject = ActiveWorkbook.Sheets("Results").ChartObjects("Chart 9")
    Set MyChart = MyChartObject.Chart
    Set xRange = ActiveWorkbook.Sheets(TmpSheet).Range("A3" & ":" & "A" & LastRow)
    Set yRange = ActiveWorkbook.Sheets(TmpSheet).Range("E3" & ":" & "E" & LastRow)
    Set GraphRange = Union(xRange, yRange)
    MyChart.ChartType = xlXYScatterLines
    ' Figure Captions
    CapX = "Pipe length (m)"
    CapY = "Deflection (mm)"
    ' Figure limits
    Lim = 3
    ' Calling a subroutine to set plot specifications
    Call PlotSpecs(MyChart, Col0, Col, xRange, yRange, GraphRange, CapX, CapY, Lim)
    '---------------------------------------------------------------------------------------------------------------------'
    ' Making the temporary sheet invisible
    ActiveWorkbook.Sheets(TmpSheet).Visible = False
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine plots dynamic stress, strain, axial displacement and deflection
Sub PlotTimeResponse(Col0 As Long, Col As Long, TmpSheet As String, TimeLoc As Double, ChartName As String, CapX As String, CapY As String, Lim As Double)
    ' Making the temporary sheet visible
    ActiveWorkbook.Sheets(TmpSheet).Visible = True
    ActiveWorkbook.Sheets(TmpSheet).Select
    '---------------------------------------------------------------------------------------------------------------------'
    ' Last row and column of the data from Matlab dynamic simulations
    Dim LastRow As Double
    Dim LastCol As Double
    LastRow = ActiveWorkbook.Sheets(TmpSheet).Cells(Rows.Count, 1).End(xlUp).Row
    LastCol = ActiveWorkbook.Sheets(TmpSheet).Cells(3, Columns.Count).End(xlToLeft).Column
    ' Defining a new array of the simulation time vector, top row of the table (B3 To the end)
    Dim MyArray As Variant
    MyArray = Application.ActiveWorkbook.Sheets(TmpSheet).Range("B3", Range("B3").End(xlToRight))
    MyArray = WorksheetFunction.Transpose(MyArray)
    ' Defining a new array to find simulation instant (the closest) in accordance with the location of the ILI tool entered by the user
    Dim DiffArray() As Double
    ReDim DiffArray(LBound(MyArray) To UBound(MyArray))
    Dim I As Integer
    For I = LBound(MyArray) To UBound(MyArray)
        DiffArray(I) = Abs(MyArray(I, 1) - TimeLoc)
    Next I
    ' Finding index of the column which contains desired simulation isntant (location)
    Dim iMin As Double
    Dim iCount As Long
    iMin = WorksheetFunction.Min(DiffArray)
    iCount = WorksheetFunction.Match(iMin, DiffArray, 0)
    '---------------------------------------------------------------------------------------------------------------------'
    ' Defining the chart variables
    Dim MyChartObject As ChartObject
    Dim MyChart As Chart
    Dim xRange As Range
    Dim yRange As Range
    Dim GraphRange As Range
    '---------------------------------------------------------------------------------------------------------------------'
    ' Stress chart
    Set MyChartObject = ActiveWorkbook.Sheets("Results").ChartObjects(ChartName)
    Set MyChart = MyChartObject.Chart
    Set xRange = ActiveWorkbook.Sheets(TmpSheet).Range("A4" & ":" & "A" & LastRow)
    Set yRange = Application.ActiveWorkbook.Sheets(TmpSheet).Range(Rows(4), Rows(LastRow)).Columns(iCount + 1)
    Set GraphRange = Union(xRange, yRange)
    MyChart.ChartType = xlXYScatterLines
    ' Calling a subroutine to set plot specifications
    Call PlotSpecs(MyChart, Col0, Col, xRange, yRange, GraphRange, CapX, CapY, Lim)
    ' Making the temporary sheet invisible
    ActiveWorkbook.Sheets(TmpSheet).Visible = False
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine plots dynamic FRF (magnitude)
Sub PlotDynamicFRF(Col0 As Long, Col As Long, TmpSheet As String)
    ' Making the temporary sheet visible
    ActiveWorkbook.Sheets(TmpSheet).Visible = True
    ActiveWorkbook.Sheets(TmpSheet).Select
    '---------------------------------------------------------------------------------------------------------------------'
    'Finding the last non-blank cell in the columns of data
    Dim LastRow As Long
    LastRow = ActiveWorkbook.Sheets(TmpSheet).Cells(Rows.Count, 1).End(xlUp).Row
    '---------------------------------------------------------------------------------------------------------------------'
    ' Defining the chart variables
    Dim MyChartObject As ChartObject
    Dim MyChart As Chart
    Dim xRange As Range
    Dim yRange As Range
    Dim GraphRange As Range
    Dim CapX As String
    Dim CapY As String
    Dim Lim As Double
    '---------------------------------------------------------------------------------------------------------------------'
    ' FRFs magnitude chart
    Set MyChartObject = ActiveWorkbook.Sheets("Results").ChartObjects("Chart 10")
    Set MyChart = MyChartObject.Chart
    Set xRange = ActiveWorkbook.Sheets(TmpSheet).Range("A3" & ":" & "A" & LastRow)
    Set yRange = ActiveWorkbook.Sheets(TmpSheet).Range("B3" & ":" & "B" & LastRow)
    Set GraphRange = Union(xRange, yRange)
    MyChart.ChartType = xlXYScatterLines
    ' Figure Captions
    CapX = "Frequency (Hz)"
    CapY = "Magnitude (m/N)"
    ' Figure limits
    Lim = 0.0000001
    ' Calling a subroutine to set plot specifications
    Call PlotSpecs(MyChart, Col0, Col, xRange, yRange, GraphRange, CapX, CapY, Lim)
    '---------------------------------------------------------------------------------------------------------------------'
    ' Making the temporary sheet invisible
    ActiveWorkbook.Sheets(TmpSheet).Visible = False
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine plots phase angle of the FRF
Sub PlotDynamicPhase(Col0 As Long, Col As Long, TmpSheet As String)
    ' Making the temporary sheet visible
    ActiveWorkbook.Sheets(TmpSheet).Visible = True
    ActiveWorkbook.Sheets(TmpSheet).Select
    '---------------------------------------------------------------------------------------------------------------------'
    'Finding the last non-blank cell in the columns of data
    Dim LastRow As Long
    LastRow = ActiveWorkbook.Sheets(TmpSheet).Cells(Rows.Count, 1).End(xlUp).Row
    '---------------------------------------------------------------------------------------------------------------------'
    ' Defining the chart variables
    Dim MyChartObject As ChartObject
    Dim MyChart As Chart
    Dim xRange As Range
    Dim yRange As Range
    Dim GraphRange As Range
    Dim CapX As String
    Dim CapY As String
    Dim Lim As Double
    '---------------------------------------------------------------------------------------------------------------------'
    ' FRFs pahse chart
    Set MyChartObject = ActiveWorkbook.Sheets("Results").ChartObjects("Chart 11")
    Set MyChart = MyChartObject.Chart
    Set xRange = ActiveWorkbook.Sheets(TmpSheet).Range("A3" & ":" & "A" & LastRow)
    Set yRange = ActiveWorkbook.Sheets(TmpSheet).Range("C3" & ":" & "C" & LastRow)
    Set GraphRange = Union(xRange, yRange)
    MyChart.ChartType = xlXYScatterLines
    ' Figure Captions
    CapX = "Frequency (Hz)"
    CapY = "Phase (deg)"
    ' Figure limits
    Lim = 5
    ' Calling a subroutine to set plot specifications
    Call PlotSpecs(MyChart, Col0, Col, xRange, yRange, GraphRange, CapX, CapY, Lim)
    '---------------------------------------------------------------------------------------------------------------------'
    ' Making the temporary sheet invisible
    ActiveWorkbook.Sheets(TmpSheet).Visible = False
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine plots dynamic mode shapes
Sub PlotDynamicModes(Col0 As Long, Col1 As Long, Col2 As Long, Col3 As Long, Col4 As Long, TmpSheet As String)
    ' Making the temporary sheet visible
    ActiveWorkbook.Sheets(TmpSheet).Visible = True
    ActiveWorkbook.Sheets(TmpSheet).Select
    '---------------------------------------------------------------------------------------------------------------------'
    'Finding the last non-blank cell in the columns of data
    Dim LastRow As Long
    LastRow = ActiveWorkbook.Sheets(TmpSheet).Cells(Rows.Count, 1).End(xlUp).Row
    '---------------------------------------------------------------------------------------------------------------------'
    ' Defining the chart variables
    Dim MyChartObject As ChartObject
    Dim MyChart As Chart
    Dim xRange As Range
    Dim yRange As Range
    Dim GraphRange As Range
    Dim LimRange As Range
    Dim CapX As String
    Dim CapY As String
    Dim Lim As Double
    '---------------------------------------------------------------------------------------------------------------------'
    ' Modes chart
    Set MyChartObject = ActiveWorkbook.Sheets("Results").ChartObjects("Chart 12")
    Set MyChart = MyChartObject.Chart
    Set xRange = ActiveWorkbook.Sheets(TmpSheet).Range("A4" & ":" & "A" & LastRow)
    Set yRange1 = ActiveWorkbook.Sheets(TmpSheet).Range("B4" & ":" & "B" & LastRow)
    Set yRange2 = ActiveWorkbook.Sheets(TmpSheet).Range("C4" & ":" & "C" & LastRow)
    Set yRange3 = ActiveWorkbook.Sheets(TmpSheet).Range("D4" & ":" & "D" & LastRow)
    Set yRange4 = ActiveWorkbook.Sheets(TmpSheet).Range("E4" & ":" & "E" & LastRow)
    Set yRange5 = ActiveWorkbook.Sheets(TmpSheet).Range("F4" & ":" & "F" & LastRow)
    ' Unifying the range for all the modeshapes with location
    Set GraphRange = Union(xRange, yRange1, yRange2, yRange3, yRange4, yRange5)
    ' Unifying the range for all the modeshapes without location
    Set LimRange = Union(yRange1, yRange2, yRange3, yRange4, yRange5)
    '---------------------------------------------------------------------------------------------------------------------'
    ' Defining chart properties
    MyChart.ChartType = xlXYScatterLines
    ' Figure Captions
    CapX = "Pipe Length (m)"
    CapY = "Mode shapes"
    ' Figure limits
    Lim = 0.1
    ' Plot specifications
     With MyChart
        .HasTitle = False
        ' X data
        .SetSourceData Source:=GraphRange
        .SeriesCollection(5).XValues = xRange
        ' Y data and line properties for the first mode
        .SeriesCollection(1).Values = yRange1
        .SeriesCollection(1).Name = "1st mode"
        .SeriesCollection(1).MarkerStyle = False
        .SeriesCollection(1).Format.Line.Weight = 1.5
        .SeriesCollection(1).Format.Line.Visible = msoTrue
        .SeriesCollection(1).Format.Line.ForeColor.RGB = Col0
        ' Y data and line properties for the second mode
        .SeriesCollection(2).Values = yRange2
        .SeriesCollection(2).Name = "2nd mode"
        .SeriesCollection(2).MarkerStyle = False
        .SeriesCollection(2).Format.Line.Weight = 1.5
        .SeriesCollection(2).Format.Line.Visible = msoTrue
        .SeriesCollection(2).Format.Line.ForeColor.RGB = Col1
        ' Y data and line properties for the third mode
        .SeriesCollection(3).Values = yRange3
        .SeriesCollection(3).Name = "3rd mode"
        .SeriesCollection(3).MarkerStyle = False
        .SeriesCollection(3).Format.Line.Weight = 1.5
        .SeriesCollection(3).Format.Line.Visible = msoTrue
        .SeriesCollection(3).Format.Line.ForeColor.RGB = Col2
        ' Y data and line properties for the fourth mode
        .SeriesCollection(4).Values = yRange4
        .SeriesCollection(4).Name = "4th mode"
        .SeriesCollection(4).MarkerStyle = False
        .SeriesCollection(4).Format.Line.Weight = 1.5
        .SeriesCollection(4).Format.Line.Visible = msoTrue
        .SeriesCollection(4).Format.Line.ForeColor.RGB = Col3
        ' Y data and line properties for the fifth mode
        .SeriesCollection(5).Values = yRange5
        .SeriesCollection(5).Name = "5th mode"
        .SeriesCollection(5).MarkerStyle = False
        .SeriesCollection(5).Format.Line.Weight = 1.5
        .SeriesCollection(5).Format.Line.Visible = msoTrue
        .SeriesCollection(5).Format.Line.ForeColor.RGB = Col4
        ' X axis properties
        .Axes(xlCategory).MinimumScale = 0
        .Axes(xlCategory).MaximumScale = Application.WorksheetFunction.Max(xRange)
        .Axes(xlCategory).HasTitle = True
        .Axes(xlCategory).HasMajorGridlines = True
        .Axes(xlCategory).HasMinorGridlines = True
        .Axes(xlCategory).AxisTitle.Caption = CapX
        .Axes(xlCategory).AxisTitle.Font.Name = "Calibri"
        .Axes(xlCategory).AxisTitle.Font.Size = 10
        .Axes(xlCategory).AxisTitle.Font.Bold = True
        .Axes(xlCategory).AxisTitle.Font.Color = Col0
        ' Y axis properties
        .Axes(xlValue).HasTitle = True
        .Axes(xlValue).HasMajorGridlines = True
        .Axes(xlValue).HasMinorGridlines = True
        .Axes(xlValue).AxisTitle.Caption = CapY
        .Axes(xlValue).AxisTitle.Font.Name = "Calibri"
        .Axes(xlValue).AxisTitle.Font.Size = 10
        .Axes(xlValue).AxisTitle.Font.Bold = True
        .Axes(xlValue).AxisTitle.Font.Color = Col0
        .Axes(xlValue).MinimumScale = Application.WorksheetFunction.Min(LimRange) - Lim
        .Axes(xlValue).MaximumScale = Application.WorksheetFunction.Max(LimRange) + Lim
        ' Chart area properties
        .ChartArea.Interior.ColorIndex = 2
        .ChartArea.Format.Line.Visible = msoCTrue
        .ChartArea.Format.Line.Style = msoLineSingle
        .ChartArea.Format.Line.Weight = 0.5
        .ChartArea.Format.Line.ForeColor.RGB = Col0
        ' Plot area properties
        .PlotArea.Interior.ColorIndex = 2
        .PlotArea.Format.Line.Visible = msoCTrue
        .PlotArea.Format.Line.Style = msoLineSingle
        .PlotArea.Format.Line.Weight = 0.5
        .PlotArea.Format.Line.ForeColor.RGB = Col0
    End With
    '---------------------------------------------------------------------------------------------------------------------'
    ' Making the temporary sheet invisible
    ActiveWorkbook.Sheets(TmpSheet).Visible = False
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine specifies plot specs
Sub PlotSpecs(MyChart As Chart, Col0 As Long, Col As Long, xRange As Range, yRange As Range, GraphRange As Range, CapX As String, CapY As String, Lim As Double)
    With MyChart
        .HasTitle = False
        ' X and Y data and line properties
        .SetSourceData Source:=GraphRange
        .SeriesCollection(1).XValues = xRange
        .SeriesCollection(1).Values = yRange
        .SeriesCollection(1).MarkerStyle = False
        .SeriesCollection(1).Format.Line.Weight = 1.5
        .SeriesCollection(1).Format.Line.Visible = msoTrue
        .SeriesCollection(1).Format.Line.ForeColor.RGB = Col
        ' X axis properties
        .Axes(xlCategory).MinimumScale = 0
        .Axes(xlCategory).MaximumScale = Application.WorksheetFunction.Max(xRange)
        .Axes(xlCategory).HasTitle = True
        .Axes(xlCategory).HasMajorGridlines = True
        .Axes(xlCategory).HasMinorGridlines = True
        .Axes(xlCategory).AxisTitle.Caption = CapX
        .Axes(xlCategory).AxisTitle.Font.Name = "Calibri"
        .Axes(xlCategory).AxisTitle.Font.Size = 10
        .Axes(xlCategory).AxisTitle.Font.Bold = True
        .Axes(xlCategory).AxisTitle.Font.Color = Col0
        ' Y axis properties
        .Axes(xlValue).HasTitle = True
        .Axes(xlValue).HasMajorGridlines = True
        .Axes(xlValue).HasMinorGridlines = True
        .Axes(xlValue).AxisTitle.Caption = CapY
        .Axes(xlValue).AxisTitle.Font.Name = "Calibri"
        .Axes(xlValue).AxisTitle.Font.Size = 10
        .Axes(xlValue).AxisTitle.Font.Bold = True
        .Axes(xlValue).AxisTitle.Font.Color = Col0
        .Axes(xlValue).MinimumScale = Application.WorksheetFunction.Min(yRange) - Lim
        .Axes(xlValue).MaximumScale = Application.WorksheetFunction.Max(yRange) + Lim
        ' Chart area properties
        .ChartArea.Interior.ColorIndex = 2
        .ChartArea.Format.Line.Visible = msoCTrue
        .ChartArea.Format.Line.Style = msoLineSingle
        .ChartArea.Format.Line.Weight = 0.5
        .ChartArea.Format.Line.ForeColor.RGB = Col0
        ' Plot area properties
        .PlotArea.Interior.ColorIndex = 2
        .PlotArea.Format.Line.Visible = msoCTrue
        .PlotArea.Format.Line.Style = msoLineSingle
        .PlotArea.Format.Line.Weight = 0.5
        .PlotArea.Format.Line.ForeColor.RGB = Col0
    End With
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine finds the maximum value and index of a column range
Sub FindMax(rng As Variant, TmpSheet As String, PasteRange1 As String, PasteRange2 As String)
    Dim MaxVal As Variant
    Dim MaxRow As Long
    'Determines maximum value in range
    MaxVal = Application.WorksheetFunction.Max(rng)
    MaxRow = Application.WorksheetFunction.Match(MaxVal, rng, 0) + 2
    ' Replacing data
    ActiveWorkbook.Sheets("Results").Range(PasteRange1) = MaxVal
    ActiveWorkbook.Sheets("Results").Range(PasteRange2) = ActiveWorkbook.Sheets("TmpMatStatic").Range("A" & MaxRow)
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine finds the minimum value and index of a column range
Sub FindMin(rng As Variant, TmpSheet As String, PasteRange1 As String, PasteRange2 As String)
    Dim MinVal As Variant
    Dim MinRow As Long
    'Determines maximum value in range
    MinVal = Application.WorksheetFunction.Min(rng)
    MinRow = Application.WorksheetFunction.Match(MinVal, rng, 0) + 2
    ' Replacing data
    ActiveWorkbook.Sheets("Results").Range(PasteRange1) = Abs(MinVal)
    ActiveWorkbook.Sheets("Results").Range(PasteRange2) = ActiveWorkbook.Sheets("TmpMatStatic").Range("A" & MinRow)
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine finds the maximum value and index of a table
Sub FindMaxTable(rng As Variant, TmpSheet As String, PasteRange1 As String, PasteRange2 As String)
    ' Finding last row and column of the data in the selected range
    Dim LastRow As Double
    Dim LastCol As Double
    LastRow = ActiveWorkbook.Sheets(TmpSheet).Cells(Rows.Count, 1).End(xlUp).Row
    LastCol = ActiveWorkbook.Sheets(TmpSheet).Cells(3, Columns.Count).End(xlToLeft).Column
    ' Defining an array to store maximum values of each row
    Dim MyArray() As Variant
    ReDim MyArray(1 To LastRow - 3) ' Upper limit is subtracted by 3 because the data start from the forth row
    Dim MyRange As Variant
    Dim I As Integer
    For I = 1 To LastRow - 3
        MyRange = ActiveWorkbook.Sheets(TmpSheet).Range(Columns(2), Columns(LastCol)).Rows(I + 3)
        MyArray(I) = Application.WorksheetFunction.Max(MyRange)
    Next I
    MyArray = Application.WorksheetFunction.Transpose(MyArray) ' Make the array a column one
    ' Finding the index of the maximum value in the array
    Dim iMax As Double
    Dim iCount As Long
    iMax = WorksheetFunction.Max(MyArray)
    iCount = WorksheetFunction.Match(iMax, MyArray, 0)
    ' Replacing data
    ActiveWorkbook.Sheets("Results").Range(PasteRange1) = iMax
    ActiveWorkbook.Sheets("Results").Range(PasteRange2) = Application.ActiveWorkbook.Sheets(TmpSheet).Range("A" & iCount + 3)
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine finds the minimum value and index of a table
Sub FindMinTable(rng As Variant, TmpSheet As String, PasteRange1 As String, PasteRange2 As String)
    ' Finding last row and column of the data in the selected range
    Dim LastRow As Double
    Dim LastCol As Double
    LastRow = ActiveWorkbook.Sheets(TmpSheet).Cells(Rows.Count, 1).End(xlUp).Row
    LastCol = ActiveWorkbook.Sheets(TmpSheet).Cells(3, Columns.Count).End(xlToLeft).Column
    ' Defining an array to store minimum values of each row
    Dim MyArray() As Variant
    ReDim MyArray(1 To LastRow - 3) ' Upper limit is subtracted by 3 because the data start from the forth row
    Dim MyRange As Variant
    Dim I As Integer
    For I = 1 To LastRow - 3
        MyRange = ActiveWorkbook.Sheets(TmpSheet).Range(Columns(2), Columns(LastCol)).Rows(I + 3)
        MyArray(I) = Application.WorksheetFunction.Min(MyRange)
    Next I
    MyArray = Application.WorksheetFunction.Transpose(MyArray) ' Make the array a column one
    ' Finding the index of the minimum value in the array
    Dim iMin As Double
    Dim iCount As Long
    iMin = WorksheetFunction.Min(MyArray)
    iCount = WorksheetFunction.Match(iMin, MyArray, 0)
    ' Replacing data
    ActiveWorkbook.Sheets("Results").Range(PasteRange1) = Abs(iMin)
    ActiveWorkbook.Sheets("Results").Range(PasteRange2) = Application.ActiveWorkbook.Sheets(TmpSheet).Range("A" & iCount + 3)
End Sub

Attribute VB_Name = "Module2"
'========================================================================================================================='
'========================================================================================================================='
' This subroutine check the inputs for improper values
Sub InputCheck()
    Dim MyRange As Range
    Dim FontColor1 As Long
    Dim FontColor2 As Long
    FontColor1 = RGB(0, 0, 0) ' Black
    FontColor2 = RGB(255, 0, 0) ' Red
    Dim Le As Double
    Dim Ls As Double
    Dim L As Double
    Le = ActiveWorkbook.Sheets("Input").Range("E30").Value
    Ls = ActiveWorkbook.Sheets("Input").Range("E82").Value
    L = Le + 2 * Ls
    Dim lc As Double
    lc = 0.001 * (ActiveWorkbook.Sheets("Input").Range("E64").Value)
    
    Dim SimStatus As String
    SimStatus = ActiveWorkbook.Sheets("Input").Button_DynamicCase.Value
    '---------------------------------------------------------------------------------------------------------------------'
    ' Pipe outside diameter [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E28")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the pipe outside diameter. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Pipe thickness [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E29")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the pipe thickness. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Exposed length of the pipe [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E30")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the exposed length of the pipe. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Pipe modulus of elasticity [Pa]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E38")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the pipe modulus of elasticity. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Pipe Poisson's ratio
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E39")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the pipe Poisson's ratio. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Pipe density [kg/m^3]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E40")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the pipe density. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Yield stress [Pa]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E41")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the pipe yield stress. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Pipe thermal expansion coefficient [1/C]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E42")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the pipe thermal expansion coefficient. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Structural damping ratio of the pipe (0<zeta<1)
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E43")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or (MyRange.Value > 1) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the structural damping ratio of the pipe. The number must be a value between 0 and 1 and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Johnson-Cook Yield stress [Pa]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E49")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the yield stress in Johnson-Cook model. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Johnson-Cook Hardening modulus [Pa]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E50")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the hardening modulus in Johnson-Cook model. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Johnson-Cook Strain rate sensitivity
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E51")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the strain rate sensitivity in Johnson-Cook model. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Johnson-Cook Hardening coefficient
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E52")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the hardening coefficient in Johnson-Cook model. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Johnson-Cook Thermal softening coefficient
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E53")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the thermal softening coefficient in Johnson-Cook model. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Johnson-Cook Melting temperature [C]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E54")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the melting temperature in Johnson-Cook model. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Johnson-Cook Transition temperature [C]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E55")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the transition temperature in Johnson-Cook model. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Location of material loss [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E63")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value > L) Or (MyRange.Value < lc) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the location of material loss. The lost area must be located within the range of pipe's length. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Length of material loss [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E64")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the length of material loss. The number must not be a negative value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Lost thickness percentage
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E65")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or (MyRange.Value >= 100) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the lost thickness percentage. The number must not be negative and not greater than 100%. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Soil support length [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E82")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Or (MyRange.Value > 300) Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the soil support length. The number must be a non-zero value less than 300 m and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Overburden soil heigth [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E88")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the overburden soil height. The number must not be a negative value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Soil Young's modulus [Pa]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E100")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the soil Young modulus. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Soil Poisson's ratio
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E101")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the soil Poisson's ratio. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Soil density [kg/m^3]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E102")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the soil density. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Soil cohesion factor [kPa]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E103")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the soil cohesion factor. The number must not be a negative value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Internal friction angle of soil [rad]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E104")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the internal friction angle of soil. The number must not be a negative value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Soil coefficient of pressure at rest
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E105")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the soil coefficient of pressure at rest. The number must not be a negative value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Soil adhesion factor
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E106")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the soil adhesion factor. The number must not be a negative value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Soil axial friction coefficient
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E107")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the soil axial friction coefficient. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Soil lateral friction coefficient
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E108")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the soil lateral friction coefficient. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Axial displacement at maximum load [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E109")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the soil axial displacement at maximum load. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Vertical displacement at maximum load [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E110")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the soil vertical displacement at maximum load. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Pipeline coating factor
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E120")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the pipeline coating factor. The number must be a non-zero value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Inertial fluid density [kg/m^3]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E134")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the internal fluid density. The number must not be a negative value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Inertial fluid pressure [Pa]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E135")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the inertial fluid pressure. The number must not be a negative value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Buoyant fluid density [kg/m^3]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E149")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the buoyant fluid density. The number must not be a negative value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Buoyant fluid viscosity [Pa.s]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E150")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the buoyant fluid viscosity. The number must not be a negative value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Pipe installation temperature [C]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E162")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the pipe installation temperature. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Pipe temperature at soil embedded regions [C]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E163")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the pipe temperature at soil embedded regions. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Pipe temperature at exposed region [C]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E164")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the pipe temperature at exposed region. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Internal operating temperature [C]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E165")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the internal operating temperature. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Max ovalized diameter [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E176")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the max ovalized diameter. The number must not be a negative value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Min ovalized diameter [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E177")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the min ovalized diameter. The number must not be a negative value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Axial spring stiffness at left end [N/m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E194")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or (MyRange.Value > 1000000000000#) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the axial spring stiffness at the left end. The number must not be negative and not above 1E12. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Lateral spring stiffness at left end [N/m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E195")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or (MyRange.Value > 1000000000000#) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the lateral spring stiffness at the left end. The number must not be negative and not above 1E12. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Rotational spring stiffness at left end [Nm/rad]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E196")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or (MyRange.Value > 1000000000000#) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the rotational spring stiffness at the left end. The number must not be negative and not above 1E12. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Axial spring stiffness at right end [N/m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E200")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or (MyRange.Value > 1000000000000#) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the axial spring stiffness at the right end. The number must not be negative and not above 1E12. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Lateral spring stiffness at right end [N/m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E201")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or (MyRange.Value > 1000000000000#) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the lateral spring stiffness at the right end. The number must not be negative and not above 1E12. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Rotational spring stiffness at right end [Nm/rad]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E202")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or (MyRange.Value > 1000000000000#) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the rotational spring stiffness at the right end. The number must not be negative and not above 1E12. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Axial boundary displacement at left end [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E212")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the axial exposed-boundary displacement at the left end. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Axial boundary force at left end [N]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E213")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the axial exposed-boundary force at the left end. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Lateral boundary force at left end [N]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E214")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the lateral exposed-boundary force at the left end. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Boundary moment at left end [Nm]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E215")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the exposed-boundary moment at the left end. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Axial boundary displacement at right end [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E219")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the axial exposed-boundary displacement at the right end. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Axial boundary force at right end [N]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E220")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the axial exposed-boundary force at the right end. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Lateral boundary force at right end [N]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E221")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the lateral exposed-boundary force at the right end. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Boundary moment at right end [Nm]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E222")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the exposed-boundary moment at the right end. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Number of middle supports (distributed equally)
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E232")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or (Int(MyRange.Value) <> MyRange.Value) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a positive integer number as the number of middle supports. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Vertical stiffness of middle supports [N/m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E238")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or (MyRange.Value > 1000000000000#) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the vertical stiffness of the middle supports. The number must not be negative and not above 1E12. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Location of ILI tool (center point) [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E254")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or (MyRange.Value > L) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the location of ILI tool. The number must be within the overall length of the pipe."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Length of ILI tool [m]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E255")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the length of ILI tool. The number must not be a negative value and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Mass of ILI tool [kg]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E256")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or (MyRange.Value = 0 And SimStatus = True) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the mass of ILI tool. The number must not be a negative value and not zero for dynamic simulations. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Tool-pipe friction coefficient
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E263")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or (MyRange.Value > 1) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the tool-pipe friction coefficient. The number must not be negative and not greaer than 1. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Forward speed of ILI tool [m/sec]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E264")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value < 0) Or (MyRange.Value = 0 And SimStatus = True) Or (MyRange.Value > 50 And SimStatus = True) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the ILI tool speed. The number must be a non-zero value less than 50 m/sec. The cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Sampling frequency [Hz]
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E265")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (SimStatus = True And MyRange.Value < 10) Or (SimStatus = True And MyRange.Value > 200) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the sampling frequency. The number must not be a value between 10 Hz and 200 Hz and the cell cannot be left empty."
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Abaqus: (Mesh length/Exposed length)
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E280")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or (MyRange.Value > 100) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the ABAQUS mesh percent in axial direction. It must be a non-zero value and less than 100%"
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Abaqus: (Mesh length/Pipe circumference)
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E281")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or (MyRange.Value > 100) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the ABAQUS mesh percent in circumferential direction. It must be a non-zero value and less than 100%"
        ' End debugging of the program
        End
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Matlab: (Mesh length/Exposed length)
    Set MyRange = ActiveWorkbook.Sheets("Input").Range("E282")
    ' Resetting the color
    With MyRange
        .Font.Color = FontColor1
    End With
    ' Check for improper values
    If (IsNumeric(MyRange) = False) Or (MyRange.Value <= 0) Or (MyRange.Value > 100) Or IsEmpty(MyRange.Value) = True Then
        With MyRange
            .Select
            .Font.Color = FontColor2
        End With
        MsgBox "Please input a valid number for the Matlab mesh percent in axial direction. It must be a non-zero value and less than 100%"
        ' End debugging of the program
        End
    End If
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Button_MaximumValues, 7, 1, MSForms, CommandButton"
Attribute VB_Control = "Button_PlotResults, 6, 2, MSForms, CommandButton"
Attribute VB_Control = "Button_SaveAsPDFResults, 5, 3, MSForms, CommandButton"
Attribute VB_Control = "Button_ExcitationSpeed, 8, 4, MSForms, CommandButton"
' Title: Static and dynamic analysis of unsupported pipes
' Authors: Hamid Mostaghimi, Di Zhu
' Email: hamid.mostaghimi1@ucalgary.ca
' Company: University of Calgary
' Started: February 02, 2018
' Last Modified: September 05, 2019 by Hamid Mostaghimi
'========================================================================================================================='
'========================================================================================================================='
' This subroutine plots the results in the form of Excel charts
Private Sub Button_PlotResults_Click()
    ActiveWorkbook.Sheets("Results").Select
    Application.ScreenUpdating = False
    '---------------------------------------------------------------------------------------------------------------------'
    ' Color properties
    Dim ChartColor0 As Long
    Dim ChartColor1 As Long
    Dim ChartColor2 As Long
    Dim ChartColor3 As Long
    Dim ChartColor4 As Long
    Dim ChartColor5 As Long
    ChartColor0 = RGB(0, 0, 0) ' Black
    ChartColor1 = RGB(0, 100, 0) ' Green
    ChartColor2 = RGB(0, 130, 0) ' Green
    ChartColor3 = RGB(0, 160, 0) ' Green
    ChartColor4 = RGB(0, 190, 0) ' Green
    ChartColor5 = RGB(32, 96, 192) ' Blue
    Dim SimStatus As String
    SimStatus = ActiveWorkbook.Sheets("Input").Button_StaticCase.Value
    '---------------------------------------------------------------------------------------------------------------------'
    If SimStatus = "True" Then
        '-----------------------------------------------------------------------------------------------------------------'
        ' Plot static results from Matlab simulations
        Call PlotStatic(ChartColor0, ChartColor4, "TmpMatStatic")
        '-----------------------------------------------------------------------------------------------------------------'
        ' Plot static results from Abaqus simulations
        'Call PlotStatic(ChartColor0, ChartColor2, "TmpAbqStatic")
    Else
        Dim MyLoc As Double
        Dim Vel As Double
        Dim TimeLoc As Double
        MyLoc = Application.ActiveWorkbook.Sheets("Results").Range("E20")
        Vel = Application.ActiveWorkbook.Sheets("Input").Range("E264")
        TimeLoc = MyLoc / Vel
        '-----------------------------------------------------------------------------------------------------------------'
        ' Initialization
        Dim CapX As String
        CapX = "Pipe length (m)" ' X axis caption
        Dim CapY As String
        Dim Lim As Double
        '-----------------------------------------------------------------------------------------------------------------'
        ' Stress plot
        CapY = "V.M. Stress (MPa)" ' Y axis caption
        Lim = 10 ' Figure limits
        Call PlotTimeResponse(ChartColor0, ChartColor4, "TmpMatStress", TimeLoc, "Chart 1", CapX, CapY, Lim)
        '-----------------------------------------------------------------------------------------------------------------'
        ' Strain plot
        CapY = "Max Strain (1E-4)" ' Y axis caption
        Lim = 0.5 ' Figure limits
        Call PlotTimeResponse(ChartColor0, ChartColor4, "TmpMatStrain", TimeLoc, "Chart 7", CapX, CapY, Lim)
        '-----------------------------------------------------------------------------------------------------------------'
        ' Axial displacement plot
        CapY = "Axial Disp. (mm)" ' Y axis caption
        Lim = 0.001 ' Figure limits
        Call PlotTimeResponse(ChartColor0, ChartColor4, "TmpMatAxial", TimeLoc, "Chart 8", CapX, CapY, Lim)
        '-----------------------------------------------------------------------------------------------------------------'
        ' Deflection plot
        CapY = "Deflection (mm)" ' Y axis caption
        Lim = 3 ' Figure limits
        Call PlotTimeResponse(ChartColor0, ChartColor4, "TmpMatDeflection", TimeLoc, "Chart 9", CapX, CapY, Lim)
        '-----------------------------------------------------------------------------------------------------------------'
        ' Magnitude of FRF
        Call PlotDynamicFRF(ChartColor0, ChartColor4, "TmpMatFRFs")
        '-----------------------------------------------------------------------------------------------------------------'
        ' Phase of FRF
        Call PlotDynamicPhase(ChartColor0, ChartColor4, "TmpMatFRFs")
        '-----------------------------------------------------------------------------------------------------------------'
        ' The first 5 modeshapes
        Call PlotDynamicModes(ChartColor0, ChartColor1, ChartColor2, ChartColor3, ChartColor4, "TmpMatModes")
    End If
    ' Selecting the Results Sheet
    ActiveWorkbook.Sheets("Results").Select
    Application.ScreenUpdating = True
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine finds maximum values among simulation results
Private Sub Button_MaximumValues_Click()

    Application.ScreenUpdating = False
    
    Dim rng As Variant
    Dim LastRow As Long

    Dim SimStatus As String
    SimStatus = ActiveWorkbook.Sheets("Input").Button_StaticCase.Value
    
    If SimStatus = "True" Then
        ' Make the TmpMatStatic sheet invisible
        ActiveWorkbook.Sheets("TmpMatStatic").Visible = True
        ActiveWorkbook.Sheets("TmpMatStatic").Select
        ' Finding the last row for all the static results
        LastRow = ActiveWorkbook.Sheets("TmpMatStatic").Cells(Rows.Count, 1).End(xlUp).Row
        '-----------------------------------------------------------------------------------------------------------------'
        ' Stress (MPa)
        rng = ActiveWorkbook.Sheets("TmpMatStatic").Range("B3" & ":" & "B" & LastRow)
        Call FindMax(rng, "TmpMatStatic", "G24", "G25")
        '-----------------------------------------------------------------------------------------------------------------'
        ' Strain (1E-4)
        rng = ActiveWorkbook.Sheets("TmpMatStatic").Range("C3" & ":" & "C" & LastRow)
        Call FindMax(rng, "TmpMatStatic", "G26", "G27")
        '-----------------------------------------------------------------------------------------------------------------'
        ' Axial displacement (mm)
        rng = ActiveWorkbook.Sheets("TmpMatStatic").Range("D3" & ":" & "D" & LastRow)
        Call FindMax(rng, "TmpMatStatic", "G28", "G29")
        '-----------------------------------------------------------------------------------------------------------------'
        ' Deflection (mm)
        rng = ActiveWorkbook.Sheets("TmpMatStatic").Range("E3" & ":" & "E" & LastRow)
        Call FindMin(rng, "TmpMatStatic", "G30", "G31")
    Else
        '-----------------------------------------------------------------------------------------------------------------'
        ' Stress (MPa)
        ActiveWorkbook.Sheets("TmpMatStress").Visible = True
        ActiveWorkbook.Sheets("TmpMatStress").Select
        rng = Range("B4", Range("B4").End(xlDown).End(xlToRight))
        Call FindMaxTable(rng, "TmpMatStress", "G24", "G25")
        '-----------------------------------------------------------------------------------------------------------------'
        ' Strain (1E-4)
        ActiveWorkbook.Sheets("TmpMatStrain").Visible = True
        ActiveWorkbook.Sheets("TmpMatStrain").Select
        rng = Range("B4", Range("B4").End(xlDown).End(xlToRight))
        Call FindMaxTable(rng, "TmpMatStrain", "G26", "G27")
        '-----------------------------------------------------------------------------------------------------------------'
        ' Axial displacement (mm)
        ActiveWorkbook.Sheets("TmpMatAxial").Visible = True
        ActiveWorkbook.Sheets("TmpMatAxial").Select
        rng = Range("B4", Range("B4").End(xlDown).End(xlToRight))
        Call FindMaxTable(rng, "TmpMatAxial", "G28", "G29")
        '-----------------------------------------------------------------------------------------------------------------'
        ' Deflection (mm)
        ActiveWorkbook.Sheets("TmpMatDeflection").Visible = True
        ActiveWorkbook.Sheets("TmpMatDeflection").Select
        rng = Range("B4", Range("B4").End(xlDown).End(xlToRight))
        Call FindMinTable(rng, "TmpMatDeflection", "G30", "G31")
    End If
    ' Make the TmpMatStatic sheet invisible
    ActiveWorkbook.Sheets("TmpMatStatic").Visible = False
    ' Selecting the Results Sheet
    Application.ScreenUpdating = True
    ActiveWorkbook.Sheets("Results").Select
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to save the input sheet
Private Sub Button_SaveAsPDFResults_Click()
    Dim SavePath As String
    Dim SaveFile As Variant
    Dim SaveWS As Worksheet
    On Error GoTo ErrHandle
    SavePath = ThisWorkbook.Path & "\" & "PISAResults"
    SaveFile = Application.GetSaveAsFilename _
        (InitialFileName:=SavePath, _
        FileFilter:="PDF Files (*.pdf), *.pdf", _
        Title:="Save as PDF")
    If SaveFile = "False" Then
        MsgBox ("Please Enter File Name")
        Exit Sub
    End If
    Me.ExportAsFixedFormat _
        Type:=xlTypePDF, _
        FileName:=SaveFile, _
        Quality:=xlQualityStandard, _
        IncludeDocProperties:=True, _
        IgnorePrintAreas:=False, _
        OpenAfterPublish:=False
    Exit Sub
ErrHandle:
    MsgBox ("Document Not Saved")
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to calculate excitation speed based on the frequency response function and boundary condition
Private Sub Button_ExcitationSpeed_Click()
    ' Check if dynamic simulation has already selected
    Dim SimStatus As String
    SimStatus = ActiveWorkbook.Sheets("Input").Button_DynamicCase.Value
    If SimStatus = "True" Then
        ' Pasting the first five frequencies in the table
        ActiveWorkbook.Sheets("Results").Range("E36").Value = ActiveWorkbook.Sheets("TmpMatModes").Range("B3").Value
        ActiveWorkbook.Sheets("Results").Range("E37").Value = ActiveWorkbook.Sheets("TmpMatModes").Range("C3").Value
        ActiveWorkbook.Sheets("Results").Range("E38").Value = ActiveWorkbook.Sheets("TmpMatModes").Range("D3").Value
        ActiveWorkbook.Sheets("Results").Range("E39").Value = ActiveWorkbook.Sheets("TmpMatModes").Range("E3").Value
        ActiveWorkbook.Sheets("Results").Range("E40").Value = ActiveWorkbook.Sheets("TmpMatModes").Range("F3").Value
    Else
        MsgBox "This option works only for dynamic simulations"
    End If
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine checks if the location of ILI tool is required or not
Private Sub Worksheet_SelectionChange(ByVal target As Range)
    ' Prevent user to make any change to the protected cells
    If Not Intersect(target, ActiveWorkbook.Sheets("Results").Range("B1:N9")) Is Nothing Then
        Range("N13").Select
    End If
    If Not Intersect(target, ActiveWorkbook.Sheets("Results").Range("B13:M15")) Is Nothing Then
        Range("N13").Select
    End If
    If Not Intersect(target, ActiveWorkbook.Sheets("Results").Range("B20:D20,F20:H20")) Is Nothing Then
        Range("I20").Select
    End If
    If Not Intersect(target, ActiveWorkbook.Sheets("Results").Range("B23:H31")) Is Nothing Then
        Range("I23").Select
    End If
    If Not Intersect(target, ActiveWorkbook.Sheets("Results").Range("B35:H40")) Is Nothing Then
        Range("I35").Select
    End If
    If Not Intersect(target, ActiveWorkbook.Sheets("Results").Range("B45")) Is Nothing Then
        Range("C45").Select
    End If
    If Not Intersect(target, ActiveWorkbook.Sheets("Results").Range("F47:H47")) Is Nothing Then
        Range("I47").Select
    End If
    
    If Not Intersect(target, ActiveWorkbook.Sheets("Results").Range("F59:H59")) Is Nothing Then
        Range("I59").Select
    End If
    
    If Not Intersect(target, ActiveWorkbook.Sheets("Results").Range("F71:H71")) Is Nothing Then
        Range("I71").Select
    End If
    
    If Not Intersect(target, ActiveWorkbook.Sheets("Results").Range("F85:H85")) Is Nothing Then
        Range("I85").Select
    End If
    
    If Not Intersect(target, ActiveWorkbook.Sheets("Results").Range("F97:I97")) Is Nothing Then
        Range("J97").Select
    End If
    
    If Not Intersect(target, ActiveWorkbook.Sheets("Results").Range("F109:H109")) Is Nothing Then
        Range("I109").Select
    End If
    
    If Not Intersect(target, ActiveWorkbook.Sheets("Results").Range("F124:H124")) Is Nothing Then
        Range("I124").Select
    End If
    
    ' Prevent user to input location of ILI tool for static plots,works only with dynamic option
    Dim SimStatus As String
    SimStatus = ActiveWorkbook.Sheets("Input").Button_StaticCase.Value
    If Not Intersect(target, ActiveWorkbook.Sheets("Results").Range("E20")) Is Nothing And SimStatus = "True" Then
        MsgBox "This input is required only for dynamic simulations"
        ActiveCell.Offset(0, 1).Select
    End If
End Sub
'========================================================================================================================='
'========================================================================================================================='
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
'========================================================================================================================='
'========================================================================================================================='
Private Sub Workbook_Open()

End Sub
'========================================================================================================================='
'========================================================================================================================='
' This Event macro fires before you close a workbook and before the user is prompted to save changes.
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    ' Save the workbook before closing
    If Me.Saved = False Then Me.Save
    ' Declare variables and data types
    Dim sht As Worksheet, csheet As Worksheet
    ' Don't show any changes the macro does on the screen, this will also make the macro faster.
    Application.ScreenUpdating = False
    ' Assigns object active sheet to variable csheet so we can go back to this sheet when the macro is finished.
    Set csheet = ActiveSheet
    ' Iterate through each worksheet in active workbook
    For Each sht In ActiveWorkbook.Worksheets
        ' Check if worksheet is not hidden
        If sht.Visible = True Then
            ' Activate sheet
            sht.Select
            ' Select cell A1 in active worksheet
            Selection.Range("A1").Select
            'Zoom to first cell
            ActiveWindow.ScrollRow = 1
            ActiveWindow.ScrollColumn = 1
        End If
        ' Continue with remaining worksheets
    Next sht
    ' Go back to the worksheet when this event started
    csheet.Activate
    ' Show all changes made to the workbook
    Application.ScreenUpdating = True
End Sub

Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{A4E05FD0-7005-4C80-B87E-0BC2383D8CB7}{0BF6ABFD-1D8E-4A5B-A147-02E7546AA240}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ComboBox1_Change()

End Sub
Attribute VB_Name = "effectiveSoilLength"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBox_CoatingFactor, 129, 10, MSForms, ComboBox"
Attribute VB_Control = "Button_FlexibleMiddleSupport, 127, 11, MSForms, OptionButton"
Attribute VB_Control = "Button_RigidMiddleSupport, 126, 12, MSForms, OptionButton"
Attribute VB_Control = "ComboBox_InternalFluid, 112, 13, MSForms, ComboBox"
Attribute VB_Control = "ComboBox_ILIType, 99, 14, MSForms, ComboBox"
Attribute VB_Control = "Button_VirtualAnchor, 86, 15, MSForms, OptionButton"
Attribute VB_Control = "Button_SoilLengthManual, 82, 16, MSForms, OptionButton"
Attribute VB_Control = "Button_MeshAuto, 81, 17, MSForms, OptionButton"
Attribute VB_Control = "Button_MeshManual, 80, 18, MSForms, OptionButton"
Attribute VB_Control = "Button_Run, 67, 19, MSForms, CommandButton"
Attribute VB_Control = "ComboBox_ClayType, 56, 20, MSForms, ComboBox"
Attribute VB_Control = "Button_SoilMaterialManual, 54, 21, MSForms, OptionButton"
Attribute VB_Control = "Button_SoilMaterialSelect, 53, 22, MSForms, OptionButton"
Attribute VB_Control = "Button_Sand, 4, 23, MSForms, OptionButton"
Attribute VB_Control = "Button_Clay, 6, 24, MSForms, OptionButton"
Attribute VB_Control = "Button_StaticCase, 37, 25, MSForms, OptionButton"
Attribute VB_Control = "Button_DynamicCase, 38, 26, MSForms, OptionButton"
Attribute VB_Control = "Button_SaveAsPDF, 43, 27, MSForms, CommandButton"
Attribute VB_Control = "ComboBox_SandType, 74, 28, MSForms, ComboBox"
Attribute VB_Control = "ComboBox_PipeMaterialProperties, 79, 29, MSForms, ComboBox"
Attribute VB_Control = "ComboBox_BuoyantFluid, 108, 30, MSForms, ComboBox"
Attribute VB_Control = "Button_AbaqusPipe, 115, 31, MSForms, OptionButton"
Attribute VB_Control = "Button_AbaqusElbow, 116, 32, MSForms, OptionButton"
Attribute VB_Control = "Button_AbaqusShell, 117, 33, MSForms, OptionButton"
Attribute VB_Control = "Button_AbaqusNA, 119, 34, MSForms, OptionButton"
Attribute VB_Control = "Button_MatlabBeam, 124, 35, MSForms, OptionButton"
Attribute VB_Control = "Button_MatlabNA, 125, 36, MSForms, OptionButton"
Attribute VB_Control = "Button_Freed, 130, 37, MSForms, OptionButton"
Attribute VB_Control = "Button_Pinned, 131, 38, MSForms, OptionButton"
Attribute VB_Control = "Button_Fixed, 132, 39, MSForms, OptionButton"
Attribute VB_Control = "Button_UserDefined, 133, 40, MSForms, OptionButton"
' Title: Static and dynamic analysis of unsupported pipes
' Authors: Hamid Mostaghimi, Di Zhu
' Email: hamid.mostaghimi1@ucalgary.ca
' Company: University of Calgary
' Started: February 02, 2018
' Last Modified: September 04, 2019 by Hamid Mostaghimi
Option Explicit ' Force explicit variable declaration
'========================================================================================================================='
'========================================================================================================================='
' This subroutine activates static simulations
Private Sub Button_StaticCase_Click()
    ActiveWorkbook.Sheets("Results").Range("M8").Value = "Static"
    Button_AbaqusShell.Enabled = True
    Button_AbaqusPipe.Enabled = True
    Button_AbaqusElbow.Enabled = True
End Sub
' This subroutine activates dynamic simulations
Private Sub Button_DynamicCase_Click()
    ActiveWorkbook.Sheets("Results").Range("M8").Value = "Dynamic"
        Button_AbaqusShell.Enabled = False
    Button_AbaqusPipe.Enabled = False
    Button_AbaqusElbow.Enabled = False
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine provides a lookup table including different grades of steel
Private Sub ComboBox_PipeMaterialProperties_Change()
    Dim indx As Integer
    indx = ComboBox_PipeMaterialProperties.ListIndex
    Select Case indx
        Case Is = 0
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("E5:E10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("E16:E22").Value
        Case Is = 1
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("F5:F10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("F16:F22").Value
        Case Is = 2
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("G5:G10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("G16:G22").Value
        Case Is = 3
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("H5:H10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("H16:H22").Value
        Case Is = 4
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("I5:I10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("I16:I22").Value
        Case Is = 5
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("J5:J10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("J16:J22").Value
        Case Is = 6
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("K5:K10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("K16:K22").Value
        Case Is = 7
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("L5:L10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("L16:L22").Value
        Case Is = 8
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("M5:M10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("M16:M22").Value
        Case Is = 9
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("N5:N10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("N16:N22").Value
        Case Is = 10
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("O5:O10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("O16:O22").Value
        Case Is = 11
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("P5:P10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("P16:P22").Value
        Case Is = 12
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("Q5:Q10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("Q16:Q22").Value
        Case Is = 13
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("R5:R10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("R16:R22").Value
        Case Is = 14
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("S5:S10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("S16:S22").Value
        Case Is = 15
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("T5:T10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("T16:T22").Value
        Case Is = 16
            ActiveWorkbook.Sheets("Input").Range("E38:E43").Value = ActiveWorkbook.Sheets("Steel").Range("U5:U10").Value
            ActiveWorkbook.Sheets("Input").Range("E49:E55").Value = ActiveWorkbook.Sheets("Steel").Range("U16:U22").Value
    End Select
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine calls another subroutine to calculate virtual anchor length
Private Sub Button_VirtualAnchor_Click()
    Call VirtualAnchorCalc
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine activates a cell to enter soil length manually
Private Sub Button_SoilLengthManual_Click()

End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine activates selection of soil properties from lookup tables
Private Sub Button_SoilMaterialSelect_Click()
    If Button_SoilMaterialSelect.Value = True Then
        Button_Sand.Value = True
        Button_Sand.Enabled = True
        ComboBox_SandType.Enabled = True
        Button_Clay.Enabled = True
    End If
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to select sand as clay type
Private Sub Button_Sand_Click()
    If Button_Sand.Value = True Then
        ComboBox_SandType.Enabled = True
        ComboBox_ClayType.Enabled = False
    End If
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to choose type of sand
Private Sub ComboBox_SandType_Change()
    Dim indx As Integer
    indx = ComboBox_SandType.ListIndex
    Select Case indx
        Case Is = 0
            ActiveWorkbook.Sheets("Input").Range("E100:E110").Value = ActiveWorkbook.Sheets("Soil").Range("D5:D15").Value
        Case Is = 1
            ActiveWorkbook.Sheets("Input").Range("E100:E110").Value = ActiveWorkbook.Sheets("Soil").Range("E5:E15").Value
        Case Is = 2
            ActiveWorkbook.Sheets("Input").Range("E100:E110").Value = ActiveWorkbook.Sheets("Soil").Range("F5:F15").Value
        Case Is = 3
            ActiveWorkbook.Sheets("Input").Range("E100:E110").Value = ActiveWorkbook.Sheets("Soil").Range("G5:G15").Value
        Case Is = 4
            ActiveWorkbook.Sheets("Input").Range("E100:E110").Value = ActiveWorkbook.Sheets("Soil").Range("H5:H15").Value
    End Select
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to select clay as soil type
Private Sub Button_Clay_Click()
    If Button_Clay.Value = True Then
        ComboBox_SandType.Enabled = False
        ComboBox_ClayType.Enabled = True
    End If
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to select type of clay
Private Sub ComboBox_ClayType_Change()
    Dim indx As Integer
    indx = ComboBox_ClayType.ListIndex
    Select Case indx
        Case Is = 0
            ActiveWorkbook.Sheets("Input").Range("E100:E110").Value = ActiveWorkbook.Sheets("Soil").Range("N5:N15").Value
        Case Is = 1
            ActiveWorkbook.Sheets("Input").Range("E100:E110").Value = ActiveWorkbook.Sheets("Soil").Range("O5:O15").Value
        Case Is = 2
            ActiveWorkbook.Sheets("Input").Range("E100:E110").Value = ActiveWorkbook.Sheets("Soil").Range("P5:P15").Value
        Case Is = 3
            ActiveWorkbook.Sheets("Input").Range("E100:E110").Value = ActiveWorkbook.Sheets("Soil").Range("Q5:Q15").Value
        Case Is = 4
            ActiveWorkbook.Sheets("Input").Range("E100:E110").Value = ActiveWorkbook.Sheets("Soil").Range("R5:R15").Value
        Case Is = 5
            ActiveWorkbook.Sheets("Input").Range("E100:E110").Value = ActiveWorkbook.Sheets("Soil").Range("S5:S15").Value
        Case Is = 6
            ActiveWorkbook.Sheets("Input").Range("E100:E110").Value = ActiveWorkbook.Sheets("Soil").Range("T5:T15").Value
    End Select
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine activates a range of cells to enter soil properties manually
Private Sub Button_SoilMaterialManual_Click()
    Button_Sand.Enabled = False
    Button_Clay.Enabled = False
    ComboBox_SandType.Enabled = False
    ComboBox_ClayType.Enabled = False
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to choose coating factor
Private Sub ComboBox_CoatingFactor_Change()
    Dim indx As Integer
    indx = ComboBox_CoatingFactor.ListIndex
    Select Case indx
        Case Is = 0
            ActiveWorkbook.Sheets("Input").Range("E120").Value = ActiveWorkbook.Sheets("Soil").Range("X5").Value
        Case Is = 1
            ActiveWorkbook.Sheets("Input").Range("E120").Value = ActiveWorkbook.Sheets("Soil").Range("X6").Value
        Case Is = 2
            ActiveWorkbook.Sheets("Input").Range("E120").Value = ActiveWorkbook.Sheets("Soil").Range("X7").Value
        Case Is = 3
            ActiveWorkbook.Sheets("Input").Range("E120").Value = ActiveWorkbook.Sheets("Soil").Range("X8").Value
        Case Is = 4
            ActiveWorkbook.Sheets("Input").Range("E120").Value = ActiveWorkbook.Sheets("Soil").Range("X9").Value
        Case Is = 5
            ActiveWorkbook.Sheets("Input").Range("E120").Value = ActiveWorkbook.Sheets("Soil").Range("X10").Value
        Case Is = 6
            ActiveWorkbook.Sheets("Input").Range("E120").Value = ActiveWorkbook.Sheets("Soil").Range("X11").Value
    End Select
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to choose type of inertial fluid inside the pipe
Private Sub ComboBox_InternalFluid_Change()
    Dim indx As Integer
    indx = ComboBox_InternalFluid.ListIndex
    Select Case indx
        Case Is = 0
            ActiveWorkbook.Sheets("Input").Range("E134:E135").Value = ActiveWorkbook.Sheets("Fluid").Range("D4:D5").Value
        Case Is = 1
            ActiveWorkbook.Sheets("Input").Range("E134:E135").Value = ActiveWorkbook.Sheets("Fluid").Range("E4:E5").Value
        Case Is = 2
            ActiveWorkbook.Sheets("Input").Range("E134:E135").Value = ActiveWorkbook.Sheets("Fluid").Range("F4:F5").Value
        Case Is = 3
            ActiveWorkbook.Sheets("Input").Range("E134:E135").Value = ActiveWorkbook.Sheets("Fluid").Range("G4:G5").Value
    End Select
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to choose type of buoyant fluid surrounding the pipe
Private Sub ComboBox_BuoyantFluid_Change()
    Dim indx As Integer
    indx = ComboBox_BuoyantFluid.ListIndex
    Select Case indx
        Case Is = 0
            ActiveWorkbook.Sheets("Input").Range("E149:E150").Value = ActiveWorkbook.Sheets("Fluid").Range("D20:D21").Value
        Case Is = 1
            ActiveWorkbook.Sheets("Input").Range("E149:E150").Value = ActiveWorkbook.Sheets("Fluid").Range("E20:E21").Value
        Case Is = 2
            ActiveWorkbook.Sheets("Input").Range("E149:E150").Value = ActiveWorkbook.Sheets("Fluid").Range("F20:F21").Value
        Case Is = 3
            ActiveWorkbook.Sheets("Input").Range("E149:E150").Value = ActiveWorkbook.Sheets("Fluid").Range("G20:G21").Value
    End Select
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to define nodal boundary condition, Freed
Private Sub Button_Freed_Click()
    ActiveWorkbook.Sheets("Results").Range("M9").Value = "Freed"
    ' Replacing boundary stiffnesses with zero
    ActiveWorkbook.Sheets("Input").Range("E194").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E195").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E196").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E200").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E201").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E202").Value = 0
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to define nodal boundary condition, Pinned
Private Sub Button_Pinned_Click()
    ActiveWorkbook.Sheets("Results").Range("M9").Value = "Pinned"
    ' Replacing boundary stiffnesses with zero
    ActiveWorkbook.Sheets("Input").Range("E194").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E195").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E196").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E200").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E201").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E202").Value = 0
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to define nodal boundary condition, Fixed
Private Sub Button_Fixed_Click()
    ActiveWorkbook.Sheets("Results").Range("M9").Value = "Fixed"
    ' Replacing boundary stiffnesses with zero
    ActiveWorkbook.Sheets("Input").Range("E194").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E195").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E196").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E200").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E201").Value = 0
    ActiveWorkbook.Sheets("Input").Range("E202").Value = 0
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to define nodal boundary condition, User defined
Private Sub Button_UserDefined_Click()
    ActiveWorkbook.Sheets("Results").Range("M9").Value = "User-defined"
    ' Replacing boundary stiffnesses with zero
    ActiveWorkbook.Sheets("Input").Range("E194").Value = 3000
    ActiveWorkbook.Sheets("Input").Range("E195").Value = 4000
    ActiveWorkbook.Sheets("Input").Range("E196").Value = 3800
    ActiveWorkbook.Sheets("Input").Range("E200").Value = 3000
    ActiveWorkbook.Sheets("Input").Range("E201").Value = 4000
    ActiveWorkbook.Sheets("Input").Range("E202").Value = 3800
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to define rigid middle support
Private Sub Button_RigidMiddleSupport_Click()

End Sub
'========================================================================================================================='
'========================================================================================================================='
' This function is used to define flexible middle support
Private Sub Button_FlexibleMiddleSupport_Click()

End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to select type of ILI tool
Private Sub ComboBox_ILIType_Change()
    Dim ILIindx As Integer
    ILIindx = ComboBox_ILIType.ListIndex
    ILIMatch ILIindx ' Send ILIindex to ILIMatch subroutine
End Sub
'========================================================================================================================='
'========================================================================================================================='
' Subroutine to choose proper ILI tool based on pipe outside diameter
Private Sub ILIMatch(ILIindx As Integer)
    ' See if the manual option is selected or not
    If Not ILIindx = 0 Then ' If manual option is not selected
        Dim D As Integer
        Dim ILI_length As Double
        Dim ILI_mass As Double
        Dim ILIName As String
        D = ActiveWorkbook.Sheets("Input").Range("E28").Value ' Pipe outside diameter [in]
        ' Check if it is possible to use lookup tables for ILI tool mass and length
        If D = 10 Or D = 12 Or D = 14 Or D = 16 Or D = 18 Or D = 20 Or D = 22 Or D = 24 Or D = 26 Or D = 28 Or D = 30 Or D = 34 Or D = 36 Or D = 42 Or D = 48 Then
            Dim pos, arr
            arr = Array(10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 42, 48) ' Array of diameters
            pos = Application.Match(D, arr, False) ' Find the index of Pipe_OD in the array
            pos = pos + 1
            ' Look for the current selection of ILI tool
            If ILIindx = 1 Then
                ILIName = "GE MFL"
            ElseIf ILIindx = 2 Then
                ILIName = "GE EMAT"
            ElseIf ILIindx = 3 Then
                ILIName = "GE Geopig Caliper"
            ElseIf ILIindx = 4 Then
                ILIName = "BHI MFL"
            ElseIf ILIindx = 5 Then
                ILIName = "BHI Geopig"
            ElseIf ILIindx = 6 Then
                ILIName = "Rosen MFL"
            ElseIf ILIindx = 7 Then
                ILIName = "Rosen EMAT"
            ElseIf ILIindx = 8 Then
                ILIName = "Weatherford MFL"
            ElseIf ILIindx = 9 Then
                ILIName = "Weatherford Caliper"
            End If
            ' Finding the right match with the selection
            ILI_length = Application.VLookup(ILIName, ActiveWorkbook.Sheets("ILI").Range("C6:S14"), pos, False)
            ILI_mass = Application.VLookup(ILIName, ActiveWorkbook.Sheets("ILI").Range("C25:S33"), pos, False)
            ' Return proper values to the input sheet
            ActiveWorkbook.Sheets("Input").Range("E255") = ILI_length
            ActiveWorkbook.Sheets("Input").Range("E256") = ILI_mass
        Else
            MsgBox "There is no data avaiable for the specified pipe diameter."
            Exit Sub
        End If
    End If
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to select mesh size based on mesh-convergence simulations
Private Sub Button_MeshAuto_Click()

End Sub
' This subroutine is used to enter mesh size manually
Private Sub Button_MeshManual_Click()

End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to select Matlab simulation based on Timoshenko beam theory
Private Sub Button_MatlabBeam_Click()
    ActiveWorkbook.Sheets("Results").Range("E7").Value = "1D Beam"
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to deactivate Matlab simulation
Private Sub Button_MatlabNA_Click()
    ActiveWorkbook.Sheets("Results").Range("E7").Value = "N/A"
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to select Abaqus simulation based on shell element
Private Sub Button_AbaqusShell_Click()
    ActiveWorkbook.Sheets("Results").Range("E8").Value = "3D Shell"
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to select Abaqus simulation based on pipe element
Private Sub Button_AbaqusPipe_Click()
    ActiveWorkbook.Sheets("Results").Range("E8").Value = "1D Pipe"
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to select Abaqus simulation based on elbow element
Private Sub Button_AbaqusElbow_Click()
    ActiveWorkbook.Sheets("Results").Range("E8").Value = "1D Elbow"
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to deactivate Abaqus simulations
Private Sub Button_AbaqusNA_Click()
    ActiveWorkbook.Sheets("Results").Range("E8").Value = "N/A"
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to run simulations
Private Sub Button_Run_Click()
    '---------------------------------------------------------------------------------------------------------------------'
    ' Saving the workbook
    ActiveWorkbook.Save
    ' Calling the function to search for improper inputs
    Call InputCheck
    ' Calling the function to generate an input text file to be used for Matlab and Abaqus simulations
    Call InputTextGenerator
    ' Directing to the current path
    Dim CurrentFilePath As String
    CurrentFilePath = Application.ActiveWorkbook.Path
    ' Hiding status bar and prevent screen updating
    Application.StatusBar = False
    Application.ScreenUpdating = False
    '---------------------------------------------------------------------------------------------------------------------'
    ' Running Simulations in Matlab
    If Button_MatlabBeam.Value = "True" Then
        ' Calling Matlab Solver
        Dim strRunMatlab As String
        strRunMatlab = Chr(34) & CurrentFilePath & "\application\PISA.exe" & Chr(34)
        ChDir CurrentFilePath
        VBA.CreateObject("wscript.shell").Run strRunMatlab, 0, True
        ' Message box to show that simulation was completed successfully
        MsgBox "Simulation completed. Please select the RESULTS sheet to see the results"
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Running Simulations in Abaqus with shell element
    If Button_AbaqusShell.Value = "True" Then
        
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Running Simulations in Abaqus with pipe element
    If Button_AbaqusPipe.Value = "True" Then
        
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Running Simulations in Abaqus with elbow element
    If Button_AbaqusElbow.Value = "True" Then
        
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Wait for 1 seconds to make sure that all the new text files are updated for data processing
    Application.Wait (Now + TimeValue("0:00:1"))
    '---------------------------------------------------------------------------------------------------------------------'
    ' Clearing previous data and reading new data from the text files
    If Button_StaticCase.Value = "True" Then
        If Button_MatlabBeam.Value = "True" Then
            ' Clearing the temporary sheet and pasting the simulation results from static Matlab
            ActiveWorkbook.Sheets("TmpMatStatic").Visible = True
            Call TableClear("TmpMatStatic")
            Call TablePaste("TmpMatStatic", "OutputMatlabStatic.txt")
            ActiveWorkbook.Sheets("TmpMatStatic").Visible = False
        ElseIf Button_AbaqusShell.Value = "True" Or Button_AbaqusPipe.Value = "True" Or Button_AbaqusElbow.Value = "True" Then
            ' Clearing the temporary sheet and pasting the simulation results from static Matlab
            'ActiveWorkbook.Sheets("TmpAbqStatic").Visible = True
            'Call TableClear("TmpAbqStatic")
            'Call TablePaste("TmpAbqStatic", "OutputAbaqusStatic.txt")
            'ActiveWorkbook.Sheets("TmpAbqStatic").Visible = False
        End If
        '-----------------------------------------------------------------------------------------------------------------'
        ' Select the Input sheet again
        ActiveWorkbook.Sheets("Input").Select
        ' Clearing max value table in the Results sheet
        ActiveWorkbook.Sheets("Results").Range("G24:G31").ClearContents
        ActiveWorkbook.Sheets("Results").Range("E36:F40").ClearContents
        '-----------------------------------------------------------------------------------------------------------------'
        ' Clearing all the figures in the Results sheet
        Call PlotClear("Chart 1") ' Stress
        Call PlotClear("Chart 7") ' Strain
        Call PlotClear("Chart 8") ' Axial displacement
        Call PlotClear("Chart 9") ' Deflection
        Call PlotClear("Chart 10") ' FRF magnitude
        Call PlotClear("Chart 11") ' FRF phase
        Call PlotClear("Chart 12") ' Mode shapes
    ElseIf Button_DynamicCase.Value = "True" And Button_MatlabBeam.Value = "True" Then
        ' Clearing the temporary sheet and pasting strain results from dynamic Matlab
        ActiveWorkbook.Sheets("TmpMatStrain").Visible = True
        Call TableClear("TmpMatStrain")
        Call TablePaste("TmpMatStrain", "OutputMatlabDynamicStrain.txt")
        ActiveWorkbook.Sheets("TmpMatStrain").Visible = False
        ' Clearing the temporary sheet and pasting stress results from dynamic Matlab
        ActiveWorkbook.Sheets("TmpMatStress").Visible = True
        Call TableClear("TmpMatStress")
        Call TablePaste("TmpMatStress", "OutputMatlabDynamicStress.txt")
        ActiveWorkbook.Sheets("TmpMatStress").Visible = False
        ' Clearing the temporary sheet and pasting axial displacement results from dynamic Matlab
        ActiveWorkbook.Sheets("TmpMatAxial").Visible = True
        Call TableClear("TmpMatAxial")
        Call TablePaste("TmpMatAxial", "OutputMatlabDynamicUx.txt")
        ActiveWorkbook.Sheets("TmpMatAxial").Visible = False
        ' Clearing the temporary sheet and pasting deflection results from dynamic Matlab
        ActiveWorkbook.Sheets("TmpMatDeflection").Visible = True
        Call TableClear("TmpMatDeflection")
        Call TablePaste("TmpMatDeflection", "OutputMatlabDynamicUy.txt")
        ActiveWorkbook.Sheets("TmpMatDeflection").Visible = False
        ' Clearing the temporary sheet and pasting FRF results from dynamic Matlab
        ActiveWorkbook.Sheets("TmpMatFRFs").Visible = True
        Call TableClear("TmpMatFRFs")
        Call TablePaste("TmpMatFRFs", "OutputMatlabDynamicFRF.txt")
        ActiveWorkbook.Sheets("TmpMatFRFs").Visible = False
        ' Clearing the temporary sheet and pasting mode-shape results from dynamic Matlab
        ActiveWorkbook.Sheets("TmpMatModes").Visible = True
        Call TableClear("TmpMatModes")
        Call TablePaste("TmpMatModes", "OutputMatlabDynamicModes.txt")
        ActiveWorkbook.Sheets("TmpMatModes").Visible = False
        '-----------------------------------------------------------------------------------------------------------------'
        ' Select the Input sheet again
        ActiveWorkbook.Sheets("Input").Select
        ' Clearing max value table in the Results sheet
        ActiveWorkbook.Sheets("Results").Range("G24:G31").ClearContents
        ActiveWorkbook.Sheets("Results").Range("E36:F40").ClearContents
        '-----------------------------------------------------------------------------------------------------------------'
        ' Clearing all plots in the Results sheet
        Call PlotClear("Chart 1") ' Stress
        Call PlotClear("Chart 7") ' Strain
        Call PlotClear("Chart 8") ' Axial displacement
        Call PlotClear("Chart 9") ' Deflection
        Call PlotClear("Chart 10") ' FRF magnitude
        Call PlotClear("Chart 11") ' FRF phase
        Call PlotClear("Chart 12") ' Modeshapes
        '-----------------------------------------------------------------------------------------------------------------'
        ' Select the top cell ot the results sheet
        ActiveWorkbook.Sheets("Results").Select
        Selection.Range("A1").Select
        'Zoom to first cell
        ActiveWindow.ScrollRow = 1
        ActiveWindow.ScrollColumn = 1
        ActiveWorkbook.Sheets("Input").Select
        Application.ScreenUpdating = True
    End If
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to generate a text file to be used as MATLAB input file
Private Sub InputTextGenerator()
    '---------------------------------------------------------------------------------------------------------------------'
    ' Calling necessary functions
    Call VirtualAnchorCalc
    Dim ILIindx As Integer
    ILIindx = ComboBox_ILIType.ListIndex
    ILIMatch ILIindx ' Send ILIindex to ILIMatch subroutine
    '---------------------------------------------------------------------------------------------------------------------'
    ' Pipe geometry and material properties (9)
    Dim D As Double
    Dim tp As Double
    Dim Le As Double
    Dim Ep As Double
    Dim nup As Double
    Dim rhop As Double
    Dim Sigmay As Double
    Dim alphap As Double
    Dim zeta As Double
    D = (ActiveWorkbook.Sheets("Input").Range("E28").Value) * 25.4 * 10 ^ -3 ' Pipe outside diameter [m]
    tp = (ActiveWorkbook.Sheets("Input").Range("E29").Value) * 10 ^ -3 ' Pipe thickness [m]
    Le = ActiveWorkbook.Sheets("Input").Range("E30").Value ' Exposed length of the pipe [m]
    Ep = (ActiveWorkbook.Sheets("Input").Range("E38").Value) * 10 ^ 9 ' Pipe modulus of elasticity [Pa]
    nup = ActiveWorkbook.Sheets("Input").Range("E39").Value ' Pipe Poisson's ratio
    rhop = ActiveWorkbook.Sheets("Input").Range("E40").Value ' Pipe density [kg/m^3]
    Sigmay = (ActiveWorkbook.Sheets("Input").Range("E41").Value) * 10 ^ 6 ' Yield stress [Pa]
    alphap = ActiveWorkbook.Sheets("Input").Range("E42").Value ' Pipe thermal expansion coefficient [1/C]
    zeta = ActiveWorkbook.Sheets("Input").Range("E43").Value ' Structural damping ratio of the pipe (0<zeta<1)
    '---------------------------------------------------------------------------------------------------------------------'
    ' Johnson-Cook model inputs (7)
    Dim JCA As Double
    Dim JCB As Double
    Dim JCc As Double
    Dim JCn As Double
    Dim JCm As Double
    Dim Tme As Double
    Dim Ttr As Double
    JCA = ActiveWorkbook.Sheets("Input").Range("E49").Value * 10 ^ 6 ' Yield stress [Pa]
    JCB = ActiveWorkbook.Sheets("Input").Range("E50").Value * 10 ^ 6 ' Hardening modulus [Pa]
    JCc = ActiveWorkbook.Sheets("Input").Range("E51").Value ' Strain rate sensitivity
    JCn = ActiveWorkbook.Sheets("Input").Range("E52").Value ' Hardening coefficient
    JCm = ActiveWorkbook.Sheets("Input").Range("E53").Value ' Thermal softening coefficient
    Tme = ActiveWorkbook.Sheets("Input").Range("E54").Value ' Melting temperature [C]
    Ttr = ActiveWorkbook.Sheets("Input").Range("E55").Value ' Transition temperature [C]
    '---------------------------------------------------------------------------------------------------------------------'
    ' Loss of material inputs (3)
    Dim lc As Double
    Dim Loss As Double
    Dim tc As Double
    lc = ActiveWorkbook.Sheets("Input").Range("E63").Value ' Location of material loss [m]
    Loss = (ActiveWorkbook.Sheets("Input").Range("E64").Value) * 10 ^ -3 ' Length of material loss [m]
    tc = ActiveWorkbook.Sheets("Input").Range("E65").Value ' Lost thickness percentage
    '---------------------------------------------------------------------------------------------------------------------'
    ' Soil dimensions and geometry inputs (15)
    Dim La As Double ' (-1)
    Dim Ls As Double ' (-1)
    Dim Hob As Double
    Dim Es As Double
    Dim nus As Double
    Dim gammas As Double
    Dim c As Double
    Dim Phis As Double
    Dim Ko As Double
    Dim alphas As Double
    Dim fSA As Double
    Dim fSL As Double
    Dim fc As Double
    Dim Dt As Double
    Dim Dqd As Double
    La = ActiveWorkbook.Sheets("Input").Range("E79").Value ' Calculated virtual anchor length [m]
    Ls = ActiveWorkbook.Sheets("Input").Range("E82").Value ' Soil support length [m]
    Hob = ActiveWorkbook.Sheets("Input").Range("E88").Value ' Overburden soil heigth [m]
    Es = (ActiveWorkbook.Sheets("Input").Range("E100").Value) * 10 ^ 6 ' Soil Young's modulus [Pa]
    nus = ActiveWorkbook.Sheets("Input").Range("E101").Value ' Soil Poisson's ratio
    gammas = ActiveWorkbook.Sheets("Input").Range("E102").Value ' Soil density [kg/m^3]
    c = ActiveWorkbook.Sheets("Input").Range("E103").Value ' Soil cohesion factor [kPa]
    Phis = (ActiveWorkbook.Sheets("Input").Range("E104").Value) * 3.14 / 180 ' Internal friction angle of soil [rad]
    Ko = ActiveWorkbook.Sheets("Input").Range("E105").Value ' Soil coefficient of pressure at rest
    alphas = ActiveWorkbook.Sheets("Input").Range("E106").Value ' Soil adhesion factor
    fSA = ActiveWorkbook.Sheets("Input").Range("E107").Value ' Soil axial friction coefficient
    fSL = ActiveWorkbook.Sheets("Input").Range("E108").Value ' Soil lateral friction coefficient
    Dt = (ActiveWorkbook.Sheets("Input").Range("E109").Value) * 10 ^ -3 ' Axial displacement at maximum load [m]
    Dqd = (ActiveWorkbook.Sheets("Input").Range("E110").Value) * 10 ^ -3 ' Vertical displacement at maximum load [m]
    fc = ActiveWorkbook.Sheets("Input").Range("E120").Value ' Pipeline coating factor
    '---------------------------------------------------------------------------------------------------------------------'
    ' Inertial fluid inputs (2)
    Dim rhom As Double
    Dim Pm As Double
    rhom = ActiveWorkbook.Sheets("Input").Range("E134").Value ' Inertial fluid density [kg/m^3]
    Pm = (ActiveWorkbook.Sheets("Input").Range("E135").Value) * 10 ^ 6 ' Inertial fluid pressure [Pa]
    '---------------------------------------------------------------------------------------------------------------------'
    ' Buoyant fluid inputs (2)
    Dim rhob As Double
    Dim mub As Double
    rhob = ActiveWorkbook.Sheets("Input").Range("E149").Value ' Buoyant fluid density [kg/m^3]
    mub = ActiveWorkbook.Sheets("Input").Range("E150").Value ' Buoyant fluid viscosity [Pa.s]
    '---------------------------------------------------------------------------------------------------------------------'
    ' Temperature inputs (4)
    Dim TI As Double
    Dim Ts As Double
    Dim Te As Double
    Dim Tm As Double
    TI = ActiveWorkbook.Sheets("Input").Range("E162").Value ' Pipe installation temperature [C]
    Ts = ActiveWorkbook.Sheets("Input").Range("E163").Value ' Pipe temperature at soil embedded regions [C]
    Te = ActiveWorkbook.Sheets("Input").Range("E164").Value ' Pipe temperature at exposed region [C]
    Tm = ActiveWorkbook.Sheets("Input").Range("E165").Value ' Internal operating temperature [C]
    '---------------------------------------------------------------------------------------------------------------------'
    ' Ovality inputs (2)
    Dim Dmax As Double
    Dim Dmin As Double
    Dmax = (ActiveWorkbook.Sheets("Input").Range("E176").Value) * 10 ^ -3 ' Max ovalized diameter [m]
    Dmin = (ActiveWorkbook.Sheets("Input").Range("E177").Value) * 10 ^ -3 ' Min ovalized diameter [m]
    '---------------------------------------------------------------------------------------------------------------------'
    ' End-boundary inputs (14)
    Dim KxL As Double
    Dim KyL As Double
    Dim KrL As Double
    Dim KxR As Double
    Dim KyR As Double
    Dim KrR As Double
    Dim UxL As Double
    Dim FxL As Double
    Dim FyL As Double
    Dim MrL As Double
    Dim UxR As Double
    Dim FxR As Double
    Dim FyR As Double
    Dim MrR As Double
    KxL = (ActiveWorkbook.Sheets("Input").Range("E194").Value) * 10 ^ 3 ' Axial spring stiffness at left end [N/m]
    KyL = (ActiveWorkbook.Sheets("Input").Range("E195").Value) * 10 ^ 3 ' Lateral spring stiffness at left end [N/m]
    KrL = (ActiveWorkbook.Sheets("Input").Range("E196").Value) * 10 ^ 3 ' Rotational spring stiffness at left end [Nm/rad]
    KxR = (ActiveWorkbook.Sheets("Input").Range("E200").Value) * 10 ^ 3 ' Axial spring stiffness at right end [N/m]
    KyR = (ActiveWorkbook.Sheets("Input").Range("E201").Value) * 10 ^ 3 ' Lateral spring stiffness at right end [N/m]
    KrR = (ActiveWorkbook.Sheets("Input").Range("E202").Value) * 10 ^ 3 ' Rotational spring stiffness at right end [Nm/rad]
    UxL = (ActiveWorkbook.Sheets("Input").Range("E212").Value) * 10 ^ -3 ' Axial boundary displacement at left end [m]
    FxL = (ActiveWorkbook.Sheets("Input").Range("E213").Value) * 10 ^ 3 ' Axial boundary force at left end [N]
    FyL = (ActiveWorkbook.Sheets("Input").Range("E214").Value) * 10 ^ 3 ' Lateral boundary force at left end [N]
    MrL = -(ActiveWorkbook.Sheets("Input").Range("E215").Value) * 10 ^ 3 ' Boundary moment at left end [Nm]
    UxR = -(ActiveWorkbook.Sheets("Input").Range("E219").Value) * 10 ^ -3 ' Axial boundary displacement at right end [m]
    FxR = -(ActiveWorkbook.Sheets("Input").Range("E220").Value) * 10 ^ 3 ' Axial boundary force at right end [N]
    FyR = (ActiveWorkbook.Sheets("Input").Range("E221").Value) * 10 ^ 3 ' Lateral boundary force at right end [N]
    MrR = (ActiveWorkbook.Sheets("Input").Range("E222").Value) * 10 ^ 3 ' Boundary moment at right end [Nm]
    '---------------------------------------------------------------------------------------------------------------------'
    ' Middle support inputs (2)
    Dim ns As Double
    Dim Kms As Double
    ns = ActiveWorkbook.Sheets("Input").Range("E232").Value ' Number of middle supports (distributed equally)
    Kms = (ActiveWorkbook.Sheets("Input").Range("E238").Value) * 10 ^ 3 ' Vertical stiffness of middle supports [N/m]
    '---------------------------------------------------------------------------------------------------------------------'
    ' ILI tool inputs (6)
    Dim Li As Double
    Dim Lili As Double
    Dim mi As Double
    Dim mui As Double
    Dim vi As Double
    Dim fs As Double
    Li = ActiveWorkbook.Sheets("Input").Range("E254").Value ' Location of ILI tool (center point) [m]
    Lili = (ActiveWorkbook.Sheets("Input").Range("E255").Value) * 10 ^ -3 ' Length of ILI tool [m]
    mi = ActiveWorkbook.Sheets("Input").Range("E256").Value ' Mass of ILI tool [kg]
    mui = ActiveWorkbook.Sheets("Input").Range("E263").Value ' Tool-pipe friction coefficient
    vi = ActiveWorkbook.Sheets("Input").Range("E264").Value ' Forward speed of ILI tool [m/sec]
    fs = ActiveWorkbook.Sheets("Input").Range("E265").Value ' Sampling frequency [Hz]
    '---------------------------------------------------------------------------------------------------------------------'
    ' Mesh control inputs (3)
    Dim AbqMPX As Double ' (-1)
    Dim AbqMPH As Double ' (-1)
    Dim MatMP As Double ' (-1)
    AbqMPX = (ActiveWorkbook.Sheets("Input").Range("E280").Value) / 100 ' Abaqus: (Mesh length/Exposed length)
    AbqMPH = (ActiveWorkbook.Sheets("Input").Range("E281").Value) / 100 ' Abaqus: (Mesh length/Pipe circumference)
    MatMP = (ActiveWorkbook.Sheets("Input").Range("E282").Value) / 100 ' Matlab: (Mesh length/Exposed length)
    '---------------------------------------------------------------------------------------------------------------------'
    ' Check loss of material inputs
    If Loss <= 0 Then
        lc = 0 ' Location of material loss [m]
        Loss = 0 ' Length of material loss [m]
        tc = 0 ' Lost thickness percentage
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Checking if the virtual anchor option is selected or not (1)
    Dim Lsoil As Double
    If Button_VirtualAnchor.Value = "True" Then
        Lsoil = La
    Else
        Lsoil = Ls
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Axial soil stiffness calculations (1)
    Dim Tu As Double
    Dim Kfx As Double
    Dim H As Double
    H = Hob + D / 2
    Tu = 3.14 * D * alphas * c + 3.14 * D * H * gammas * ((1 + Ko) / 2) * Tan(fc * Phis)
    Kfx = Tu / Dt ' Axial soil stiffness per unit of length [(N/m)/m]
    '---------------------------------------------------------------------------------------------------------------------'
    ' Vertical bearing soil stiffness calculations (1)
    Dim Qd As Double
    Dim Kfy As Double
    Dim Nc As Double
    Dim Nq As Double
    Dim Ny As Double
    Dim PhisDeg As Double
    PhisDeg = Phis * 180 / 3.14
    Nc = (1 / Tan(Phis + 0.001)) * (Exp(3.14 * Tan(Phis + 0.001)) * Tan(3.14 / 4 + (Phis + 0.001) / 2) ^ 2 - 1)
    Nq = Exp(3.14 * Tan(Phis)) * Tan(3.14 / 4 + Phis / 2) ^ 2
    Ny = Exp(0.18 * PhisDeg - 2.5)
    Qd = Nc * c * D + Nq * gammas * H * D + Ny * gammas * D ^ 2 / 2
    Kfy = Qd / Dqd ' Vertical soil stiffness per unit of length [(N/m)/m]
    '---------------------------------------------------------------------------------------------------------------------'
    ' Checking type of the end boundary condition and reassign inputs (1)
    Dim BC As Double
    If Button_Freed.Value = "True" Then
        BC = 1
        KxL = 0
        KyL = 0
        KrL = 0
        KxR = 0
        KyR = 0
        KrR = 0
    ElseIf Button_Pinned.Value = "True" Then
        BC = 2
        KxL = 1E+15
        KyL = 1E+15
        KrL = 0
        KxR = 1E+15
        KyR = 1E+15
        KrR = 0
    ElseIf Button_Fixed.Value = "True" Then
        BC = 3
        KxL = 1E+15
        KyL = 1E+15
        KrL = 1E+15
        KxR = 1E+15
        KyR = 1E+15
        KrR = 1E+15
    Else
        BC = 4
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Assigning vertical stiffness of the middle supports
    If Button_RigidMiddleSupport.Value = "True" Then
        Kms = 1E+15
    End If
    If ns <= 0 Then
        Kms = 0
        ns = 0
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Mesh control option
    Dim AR As Double
    Dim leAbq As Double
    Dim lhAbq As Double
    Dim leMat As Double
    If Button_MeshAuto.Value = "True" Then
        AR = Le / D
        If AR >= 10 And AR <= 100 Then
            MatMP = 0.0000012 * AR ^ 4 - 0.00035 * AR ^ 3 + 0.039 * AR ^ 2 - 1.9 * AR + 35
            AbqMPX = 0.00000056 * AR ^ 4 - 0.00019 * AR ^ 3 + 0.023 * AR ^ 2 - 1.2 * AR + 25
        ElseIf AR < 10 Then
            MatMP = 20
            AbqMPX = 15
        ElseIf AR > 100 Then
            MatMP = 0.2
            AbqMPX = 0.2
        End If
        ' Using finer mesh as a conservative assumption for static simulations
        If Button_StaticCase.Value = "True" Then
            MatMP = MatMP * 0.2
            AbqMPX = AbqMPX * 0.5
        Else
            MatMP = MatMP * 0.75
            AbqMPX = AbqMPX * 0.75
        End If
        ' Element length
        leAbq = AbqMPX * Le / 100 ' Abaqus major element length, lengthwise [m]
        lhAbq = leAbq ' Abaqus major element length, roundwise [m]
        leMat = MatMP * Le / 100 ' Matlab major element length, lengthwise [m]
        ' Check for the maximum allowable element size only for static simulations
        If Button_StaticCase.Value = "True" Then
            If leAbq > 0.1 Or lhAbq > 0.1 Then
                leAbq = 0.1
                lhAbq = 0.1
            End If
            If leMat > 0.1 Then
                leMat = 0.1
            End If
        End If
        ' Check for the maximum allowable element size only for dynamic simulations
        If Button_DynamicCase.Value = "True" Then
            If leAbq > 0.2 Or lhAbq > 0.2 Then
                leAbq = 0.2
                lhAbq = 0.2
            End If
            If leMat > 0.2 Then
                leMat = 0.2
            End If
        End If
    ' User-defined mesh control
    Else
        leAbq = AbqMPX * Le ' Abaqus major element length, lengthwise [m]
        lhAbq = AbqMPH * (3.14 * D) ' Abaqus major element length, roundwise [m]
        leMat = MatMP * Le ' Matlab major element length, lengthwise [m]
    End If
    ' Check for the Abaqus minimum element length, lengthwise [m]
    If leAbq < 0.02 Then
        leAbq = 0.02
    End If
    ' Check for the Abaqus minimum element length, roundwise [m]
    If lhAbq < 0.02 Then
        lhAbq = 0.02
    End If
    ' Check for the Matlab minimum element length, lengthwise [m]
    If leMat < 0.02 Then
        leMat = 0.02
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Simulation index, 1: static simulation and 2: dynamic simulation
    Dim SimIndex As Integer
    Dim SimStatus As String
    SimStatus = ActiveWorkbook.Sheets("Input").Button_StaticCase.Value
    If SimStatus = "True" Then
        SimIndex = 1
    Else
        SimIndex = 2
    End If
    '---------------------------------------------------------------------------------------------------------------------'
    ' Save all inputs in a vector
    Dim SimInputs(71) As Double ' 71 is the number of input variables required for simulations
    SimInputs(0) = D
    SimInputs(1) = tp
    SimInputs(2) = Le
    SimInputs(3) = Ep
    SimInputs(4) = nup
    SimInputs(5) = rhop
    SimInputs(6) = Sigmay
    SimInputs(7) = alphap
    SimInputs(8) = zeta
    SimInputs(9) = JCA
    SimInputs(10) = JCB
    SimInputs(11) = JCc
    SimInputs(12) = JCn
    SimInputs(13) = JCm
    SimInputs(14) = Tme
    SimInputs(15) = Ttr
    
    SimInputs(16) = lc
    SimInputs(17) = Loss
    SimInputs(18) = tc
    
    SimInputs(19) = Lsoil
    SimInputs(20) = Hob
    SimInputs(21) = Es
    SimInputs(22) = nus
    SimInputs(23) = gammas
    SimInputs(24) = c
    SimInputs(25) = Phis
    SimInputs(26) = Ko
    SimInputs(27) = alphas
    SimInputs(28) = fSA
    SimInputs(29) = fSL
    SimInputs(30) = Dt
    SimInputs(31) = Dqd
    SimInputs(32) = Kfx
    SimInputs(33) = Kfy
    SimInputs(34) = fc
    
    SimInputs(35) = rhom
    SimInputs(36) = Pm
    
    SimInputs(37) = rhob
    SimInputs(38) = mub
    
    SimInputs(39) = TI
    SimInputs(40) = Ts
    SimInputs(41) = Te
    SimInputs(42) = Tm
    
    SimInputs(43) = Dmax
    SimInputs(44) = Dmin
    
    SimInputs(45) = KxL
    SimInputs(46) = KyL
    SimInputs(47) = KrL
    SimInputs(48) = UxL
    SimInputs(49) = FxL
    SimInputs(50) = FyL
    SimInputs(51) = MrL
    
    SimInputs(52) = KxR
    SimInputs(53) = KyR
    SimInputs(54) = KrR
    SimInputs(55) = UxR
    SimInputs(56) = FxR
    SimInputs(57) = FyR
    SimInputs(58) = MrR
    
    SimInputs(59) = BC
    
    SimInputs(60) = ns
    SimInputs(61) = Kms
    
    SimInputs(62) = Li
    SimInputs(63) = Lili
    SimInputs(64) = mi
    SimInputs(65) = mui
    SimInputs(66) = vi
    SimInputs(67) = fs
    
    SimInputs(68) = leAbq
    SimInputs(69) = lhAbq
    SimInputs(70) = leMat
    
    SimInputs(71) = SimIndex
    ' Saving all inputs as a column text file
    Dim I As Integer
    Dim MyFile As String
    MyFile = Application.ActiveWorkbook.Path & "\Inputs.txt"
    Open MyFile For Output As #1
    For I = LBound(SimInputs) To UBound(SimInputs)
        Write #1, SimInputs(I)
    Next I
    Close #1
    ' Wait for 2 seconds to make sure that the new input text file is ready
    Application.Wait (Now + TimeValue("0:00:2"))
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine calculates virtual anchor length
Private Sub VirtualAnchorCalc()
        ' Input variables
        Dim Ep As Double
        Dim D As Double
        Dim tp As Double
        Dim alphap As Double
        Dim nup As Double
        Dim gammas As Double
        Dim rhop As Double
        Dim rhom As Double
        Dim Pm As Double
        Dim Hob As Double
        Dim fSA As Double
        Dim TI As Double
        Dim Tm As Double
        Ep = (ActiveWorkbook.Sheets("Input").Range("E38").Value) * 10 ^ 9 ' Pipe modulus of elasticity [Pa]
        D = (ActiveWorkbook.Sheets("Input").Range("E28").Value) * 25.4 * 10 ^ -3 ' Pipe outside diameter [m]
        tp = (ActiveWorkbook.Sheets("Input").Range("E29").Value) * 10 ^ -3 ' Pipe thickness [m]
        alphap = ActiveWorkbook.Sheets("Input").Range("E42").Value ' Pipe thermal expansion coefficient [1/C]
        nup = ActiveWorkbook.Sheets("Input").Range("E39").Value ' Pipe Poisson's ratio
        gammas = ActiveWorkbook.Sheets("Input").Range("E102").Value ' Soil density [kg/m^3]
        rhop = ActiveWorkbook.Sheets("Input").Range("E40").Value ' Pipe density [kg/m^3]
        rhom = ActiveWorkbook.Sheets("Input").Range("E134").Value ' Inertial fluid density [kg/m^3]
        Pm = (ActiveWorkbook.Sheets("Input").Range("E135").Value) * 10 ^ 6 ' Inertial fluid pressure [Pa]
        Hob = ActiveWorkbook.Sheets("Input").Range("E88").Value ' Overburden soil heigth [m]
        fSA = ActiveWorkbook.Sheets("Input").Range("E107").Value ' Soil axial friction coefficient
        TI = ActiveWorkbook.Sheets("Input").Range("E162").Value ' Pipe installation temperature [C]
        Tm = ActiveWorkbook.Sheets("Input").Range("E165").Value ' Fluid temperature [C]
        ' Calculated variables
        Dim Di As Double
        Dim Dmean As Double
        Dim A As Double
        Dim Sigmah As Double
        Dim DeltaT As Double
        Dim LaNumerator As Double
        Dim LaDenominator As Double
        Dim La As Double
        Di = (D - 2 * tp)
        Dmean = (D + Di) / 2
        A = 3.141592 * (D ^ 2 - Di ^ 2) / 4
        Sigmah = Pm * Di / (2 * tp)
        DeltaT = Tm - TI
        LaNumerator = Ep * A * alphap * DeltaT + A * Sigmah * (0.5 - nup)
        LaDenominator = fSA * 9.806 * (2 * gammas * Dmean * Hob + A * rhop + rhom * (3.141592 * Di ^ 2) / 4)
        La = LaNumerator / LaDenominator
        ActiveWorkbook.Sheets("Input").Range("E79").Value = La
End Sub
'========================================================================================================================='
'========================================================================================================================='
' This subroutine is used to save the input sheet
Private Sub Button_SaveAsPDF_Click()
    Dim SavePath As String
    Dim SaveFile As Variant
    Dim SaveWS As Worksheet
    On Error GoTo ErrHandle
    SavePath = ThisWorkbook.Path & "\" & "PISAInputs"
    SaveFile = Application.GetSaveAsFilename _
        (InitialFileName:=SavePath, _
        FileFilter:="PDF Files (*.pdf), *.pdf", _
        Title:="Save as PDF")
    
    If SaveFile = "False" Then
        MsgBox ("Please Enter File Name")
        Exit Sub
    End If
    Me.ExportAsFixedFormat _
        Type:=xlTypePDF, _
        FileName:=SaveFile, _
        Quality:=xlQualityStandard, _
        IncludeDocProperties:=True, _
        IgnorePrintAreas:=False, _
        OpenAfterPublish:=False
    Exit Sub
ErrHandle:
    MsgBox ("Document Not Saved")
End Sub
'========================================================================================================================='
'========================================================================================================================='
'This subroutine returns a massege when a specific cell is selected
Private Sub Worksheet_SelectionChange(ByVal target As Range)
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check for the manual option among pipe material properties
    Dim PipeGrade As String
    PipeGrade = ComboBox_PipeMaterialProperties.Value
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E38:E43,E49:E55")) Is Nothing And PipeGrade <> "Manual" Then
        MsgBox "Please select MANUAL option from the drop-down list and try again"
        ActiveCell.Offset(0, 1).Select
    End If
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check for selection of virtual anchor length
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E79")) Is Nothing Then
        MsgBox "This value is calculated automatically upon selection of VIRTUAL ANCHOR option"
        ActiveCell.Offset(0, 1).Select
    End If
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check for selection of manual option for soil length
    Dim SoilLengthState As String
    SoilLengthState = Button_SoilLengthManual.Value
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E82")) Is Nothing And SoilLengthState <> "True" Then
        MsgBox "Please check MANUAL option and try again"
        ActiveCell.Offset(0, 1).Select
    End If
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check for selection of manual option for soil material properties
    Dim SoilMaterialState As String
    SoilMaterialState = Button_SoilMaterialManual.Value
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E100:E110")) Is Nothing And SoilMaterialState <> "True" Then
        MsgBox "Please check MANUAL option and try again"
        ActiveCell.Offset(0, 1).Select
    End If
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check for selection of manual option for coating factor
    Dim CoatingFactorState As String
    CoatingFactorState = ComboBox_CoatingFactor.Value
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E120")) Is Nothing And CoatingFactorState <> "Manual" Then
        MsgBox "Please select MANUAL option from the drop-down list and try again"
        ActiveCell.Offset(0, 1).Select
    End If
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check for selection of manual option for inertial fluid
    Dim InertialFluidState As String
    InertialFluidState = ComboBox_InternalFluid.Value
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E134:E135")) Is Nothing And InertialFluidState <> "Manual" Then
        MsgBox "Please select MANUAL option from the drop-down list and try again"
        ActiveCell.Offset(0, 1).Select
    End If
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check for selection of manual option for buoyant fluid
    Dim BuoyantFluidState As String
    BuoyantFluidState = ComboBox_BuoyantFluid.Value
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E149:E150")) Is Nothing And BuoyantFluidState <> "Manual" Then
        MsgBox "Please select MANUAL option from the drop-down list and try again"
        ActiveCell.Offset(0, 1).Select
    End If
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check for selection of user-defined option for end boundary condition
    Dim EndBoundaryState As String
    EndBoundaryState = Button_UserDefined.Value
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E195:E197,E200:E202")) Is Nothing And EndBoundaryState <> "True" Then
        MsgBox "Please check User-Defined option and try again"
        ActiveCell.Offset(0, 1).Select
    End If
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check for selection of flexible support option for middle supports
    Dim MiddleSupportState As String
    MiddleSupportState = Button_FlexibleMiddleSupport.Value
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E238")) Is Nothing And MiddleSupportState <> "True" Then
        MsgBox "Please check FLEXIBLE SUPPORT option and try again"
        ActiveCell.Offset(0, 1).Select
    End If
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check for selection of manual option for ILI tool dimension
    Dim ILIState As String
    ILIState = ComboBox_ILIType.Value
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E255:E256")) Is Nothing And ILIState <> "Manual" Then
        MsgBox "Please select MANUAL option from the drop-down list and try again"
        ActiveCell.Offset(0, 1).Select
    End If
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check for selection of manual mesh control option
    Dim MeshControlState As String
    MeshControlState = Button_MeshManual.Value
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E280:E282")) Is Nothing And MeshControlState <> "True" Then
        MsgBox "Please check MANUAL option and try again"
        ActiveCell.Offset(0, 1).Select
    End If
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check that only Ux or Fx is entered for the left exposed boundary condition, UxL is selected
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E212")) Is Nothing And ActiveWorkbook.Sheets("Input").Range("E213").Value <> 0 Then
        MsgBox "You can apply exposed boundary displacement (Ux) when the exposed boundary force (Fx) is zero in axial direction"
        ActiveCell.Offset(1, 0).Select
    End If
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check that only Ux or Fx is entered for the left exposed boundary condition, FxL is selected
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E213")) Is Nothing And ActiveWorkbook.Sheets("Input").Range("E212").Value <> 0 Then
        MsgBox "You can apply exposed boundary force (Fx) when the exposed boundary displacement (Ux) is zero in axial direction"
        ActiveCell.Offset(-1, 0).Select
    End If
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check that only Ux or Fx is entered for the right exposed boundary condition, UxR is selected
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E219")) Is Nothing And ActiveWorkbook.Sheets("Input").Range("E220").Value <> 0 Then
        MsgBox "You can apply exposed boundary displacement (Ux) when the exposed boundary force (Fx) is zero in axial direction"
        ActiveCell.Offset(1, 0).Select
    End If
    '-----------------------------------------------------------------------------------------------------------------'
    ' Check that only Ux or Fx is entered for the right exposed boundary condition, FxR is selected
    If Not Intersect(target, ActiveWorkbook.Sheets("Input").Range("E220")) Is Nothing And ActiveWorkbook.Sheets("Input").Range("E219").Value <> 0 Then
        MsgBox "You can apply exposed boundary force (Fx) when the exposed boundary displacement (Ux) is zero in axial direction"
        ActiveCell.Offset(-1, 0).Select
    End If
End Sub

' InQuest injected base64 decoded content
' >*^1

INQUEST-PP=macro
