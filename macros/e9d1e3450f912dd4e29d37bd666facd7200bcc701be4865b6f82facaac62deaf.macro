Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "rep_IRModelViewer"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1



Private Sub Worksheet_Activate()
    Dim outRngName$: outRngName = "NX_" & ActiveSheet.Name & "_R_Output"
    Dim inRngName$:  inRngName = "NX_" & ActiveSheet.Name & "_R_Input"
    Dim inRngModelID$: inRngModelID = "NX_" & ActiveSheet.Name & "_R_ModelID"
    
    Dim rngMethod As Range: Set rngMethod = Range("NX_" & ActiveSheet.Name & "_R_Method")
    Dim rngQuality As Range: Set rngQuality = Range("NX_" & ActiveSheet.Name & "_R_Quality")
    Dim outRng As Range: Set outRng = Range(outRngName)
    outRng.Clear
    
        
    On Error GoTo errorHandler
    Application.ScreenUpdating = False
    ActiveSheet.Calculate
    
    Dim temp_view As Variant: temp_view = Application.Run("NXLibView", Range(inRngModelID))
    
    If UBound(temp_view) = 0 Then GoTo errorHandler
    
    Dim i%
    Dim j%
    Dim modelType$
    For j = UBound(temp_view, 2) To LBound(temp_view, 2) Step -1
        If temp_view(1, j) = "CALL HEADERS" Then
            For i = LBound(temp_view, 1) To UBound(temp_view, 1)
                If temp_view(i, j) = "MODEL" Then
                    modelType = temp_view(i, j + 1)
                    Exit For
                End If
            Next i
            Exit For
        End If
    Next j
    
    If modelType = "Dupire" Then
        rngMethod.Offset(0, -1) = "METHOD"
        rngMethod = "backwardPDE"
        rngQuality.Offset(0, -1) = "QUALITY"
        rngQuality = 0
    Else
        
        rngMethod.Offset(0, -1) = ""
        rngMethod = ""
        rngQuality.Offset(0, -1) = ""
        rngQuality = ""

    End If
    
    ActiveSheet.Calculate
    
    
    
    
    ' resize the range
    Dim temp As Variant: temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1))
    Dim rsize As Integer: rsize = UBound(temp) - 1
    outRng.Clear
    If rsize = 0 Then GoTo errorHandler
    outRng.Select
    Dim headRange As Range
    outRng.Cells(1, 1).Offset(-1, 0).Select
    Set headRange = Range(Selection, Selection.End(xlToRight))
    Dim cSize As Integer: cSize = headRange.Columns.Count
    Range(outRng.Cells(1, 1), outRng.Cells(rsize, cSize)).Select
    
    Selection.FormulaArray = "=NxLibView(" & Range(inRngName).Cells(1, 1).Address & "," & headRange.Address & ")"
    ActiveWorkbook.Names.Add Name:=outRngName, RefersTo:=Selection
    
    'format
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    doBorders xlInsideVertical
    doBorders xlInsideHorizontal
    With Selection.Interior
        .ColorIndex = 2: .Pattern = xlSolid
    End With
    Selection.NumberFormat = "#,##0.00_ ;[Red]-#,##0.00 "
    ActiveSheet.Calculate
errorHandler:
    Range("A1").Select
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub



INQUEST-PP=macro
