Attribute VB_Name = "AboutISGTools"
Attribute VB_Base = "0{21BAA6C7-9144-489E-94BF-9D8313085F77}{7B7FBE6E-B146-4A99-946B-160669A8D01E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "ISGMacros"
Public copyPosL As Double
Public copyPosT As Double
Public copySizeH As Double
Public copySizeW As Double
Public selSimShape As Boolean
Public selSimFillColor As Boolean
Public selSimLineColor As Boolean
Public selSimLineStyle As Boolean
Public selSimHeight As Boolean
Public selSimWidth As Boolean

Public Sub AttachSelectionAsPPT()
    Dim OutlookApp As Object
    Dim OutlookMessage As Object
    Dim otemp As Presentation
    Dim opres As Presentation
    Dim strName As String
    Dim l As Long
    Dim raySlides() As Long
    
    Set opres = ActivePresentation
    strName = InputBox("File name for attached slides:")
    ReDim raySlides(1 To ActiveWindow.Selection.SlideRange.Count)
    For l = 1 To ActiveWindow.Selection.SlideRange.Count
    ActiveWindow.Selection.SlideRange(l).Tags.Add "SELECTED", "YES"
   'If L <> ActiveWindow.Selection.SlideRange.Count Then
   'strName = strName & ActiveWindow.Selection.SlideRange(L).SlideIndex & "_"
   'Else
   'strName = strName & ActiveWindow.Selection.SlideRange(L).SlideIndex
   'End If
    Next l
    
     ' make a copy
    opres.SaveCopyAs Environ("TEMP") & "\" & strName & ".pptx"
     'open the copy
    Set otemp = Presentations.Open(Environ("TEMP") & "\" & strName & ".pptx")
     'delete unwanted slides
    For l = otemp.Slides.Count To 1 Step -1
        Debug.Print otemp.Slides(l).Tags("SELECTED")
        If otemp.Slides(l).Tags("SELECTED") <> "YES" Then otemp.Slides(l).Delete
    Next l
    otemp.Save
    otemp.Close
     
     
    On Error Resume Next
    Set OutlookApp = GetObject(class:="Outlook.Application")
    Err.Clear
    If OutlookApp Is Nothing Then Set OutlookApp = CreateObject(class:="Outlook.Application")
    On Error GoTo 0
    Set OutlookMessage = OutlookApp.CreateItem(0)
     
     
    On Error Resume Next
    With OutlookMessage
        .To = ""
        .CC = ""
        .Subject = ""
        .Body = ""
        .Attachments.Add Environ("TEMP") & "\" & strName & ".pptx"
        .Display
    End With
End Sub
Public Sub AttachSelectionAsPDF()
    Dim OutlookApp As Object
    Dim OutlookMessage As Object
    Dim otemp As Presentation
    Dim opres As Presentation
    Dim strName As String
    Dim l As Long
    Dim raySlides() As Long
    
    Set opres = ActivePresentation
    strName = InputBox("File name for attached slides:")
    ReDim raySlides(1 To ActiveWindow.Selection.SlideRange.Count)
    For l = 1 To ActiveWindow.Selection.SlideRange.Count
    ActiveWindow.Selection.SlideRange(l).Tags.Add "SELECTED", "YES"
   'If L <> ActiveWindow.Selection.SlideRange.Count Then
   'strName = strName & ActiveWindow.Selection.SlideRange(L).SlideIndex & "_"
   'Else
   'strName = strName & ActiveWindow.Selection.SlideRange(L).SlideIndex
   'End If
    Next l
    
     ' make a copy
    opres.SaveCopyAs Environ("TEMP") & "\" & strName & ".pptx"
     'open the copy
    Set otemp = Presentations.Open(Environ("TEMP") & "\" & strName & ".pptx")
     'delete unwanted slides
    For l = otemp.Slides.Count To 1 Step -1
        Debug.Print otemp.Slides(l).Tags("SELECTED")
        If otemp.Slides(l).Tags("SELECTED") <> "YES" Then otemp.Slides(l).Delete
    Next l
    otemp.SaveAs fileName:=(Environ("TEMP") & "\" & strName & ".pdf"), fileFormat:=ppSaveAsPDF
    otemp.Close
     
     
    On Error Resume Next
    Set OutlookApp = GetObject(class:="Outlook.Application")
    Err.Clear
    If OutlookApp Is Nothing Then Set OutlookApp = CreateObject(class:="Outlook.Application")
    On Error GoTo 0
    Set OutlookMessage = OutlookApp.CreateItem(0)
     
     
    On Error Resume Next
    With OutlookMessage
        .To = ""
        .CC = ""
        .Subject = ""
        .Body = ""
        .Attachments.Add Environ("TEMP") & "\" & strName & ".pdf"
        .Display
    End With
End Sub

Public Sub SaveSelectionAsPPT()
    Dim dlgSaveAs As FileDialog
    Dim otemp As Presentation
    Dim opres As Presentation
    Dim strName As String
    Dim l As Long
    Dim raySlides() As Long
    Set opres = ActivePresentation
    
    Set dlgSaveAs = Application.FileDialog(Type:=msoFileDialogSaveAs)
    With dlgSaveAs
        .InitialFileName = ActivePresentation.Path & "\"
        .AllowMultiSelect = False
        .FilterIndex = 1
    End With
    intChoice = dlgSaveAs.Show
    If intChoice <> 0 Then
        strName = Application.FileDialog(msoFileDialogSaveAs).SelectedItems(1)
    End If
    
    ReDim raySlides(1 To ActiveWindow.Selection.SlideRange.Count)
    For l = 1 To ActiveWindow.Selection.SlideRange.Count
    ActiveWindow.Selection.SlideRange(l).Tags.Add "SELECTED", "YES"
   'If L <> ActiveWindow.Selection.SlideRange.Count Then
   'strName = strName & ActiveWindow.Selection.SlideRange(L).SlideIndex & "_"
   'Else
   'strName = strName & ActiveWindow.Selection.SlideRange(L).SlideIndex
   'End If
    Next l
    
     ' make a copy
    
     'open the copy
    Set otemp = Presentations.Open(opres.FullName, msoFalse)
     'delete unwanted slides
    For l = otemp.Slides.Count To 1 Step -1
        Debug.Print otemp.Slides(l).Tags("SELECTED")
        If otemp.Slides(l).Tags("SELECTED") <> "YES" Then otemp.Slides(l).Delete
    Next l
    otemp.SaveAs fileName:=strName, fileFormat:=ppSaveAsOpenXMLPresentation
    otemp.Close
     
End Sub

Public Sub SaveSelectionAsPDF()
    Dim dlgSaveAs As FileDialog
    Dim otemp As Presentation
    Dim opres As Presentation
    Dim strName As String
    Dim l As Long
    Dim raySlides() As Long
    Set opres = ActivePresentation
    
    Set dlgSaveAs = Application.FileDialog(Type:=msoFileDialogSaveAs)
    With dlgSaveAs
        .InitialFileName = ActivePresentation.Path & "\"
        .AllowMultiSelect = False
        .FilterIndex = 4
    End With
    intChoice = dlgSaveAs.Show
    If intChoice <> 0 Then
        strName = Application.FileDialog(msoFileDialogSaveAs).SelectedItems(1)
    End If
    
    ReDim raySlides(1 To ActiveWindow.Selection.SlideRange.Count)
    For l = 1 To ActiveWindow.Selection.SlideRange.Count
    ActiveWindow.Selection.SlideRange(l).Tags.Add "SELECTED", "YES"
   'If L <> ActiveWindow.Selection.SlideRange.Count Then
   'strName = strName & ActiveWindow.Selection.SlideRange(L).SlideIndex & "_"
   'Else
   'strName = strName & ActiveWindow.Selection.SlideRange(L).SlideIndex
   'End If
    Next l
    
     ' make a copy
    
     'open the copy
    Set otemp = Presentations.Open(opres.FullName, msoFalse)
     'delete unwanted slides
    For l = otemp.Slides.Count To 1 Step -1
        Debug.Print otemp.Slides(l).Tags("SELECTED")
        If otemp.Slides(l).Tags("SELECTED") <> "YES" Then otemp.Slides(l).Delete
    Next l
    otemp.SaveAs fileName:=strName, fileFormat:=ppSaveAsPDF
    otemp.Close
     
End Sub
Public Sub SwapPositions()
' Swaps the positions of two (and only two) selected shapes

Dim lLeft1 As Long
Dim lTop1 As Long
Dim lLeft2 As Long
Dim lTop2 As Long

' test for correct number of selected shapes
With ActiveWindow.Selection.ShapeRange
If .Count <> 2 Then
MsgBox "Please select two and ONLY two shapes"
Exit Sub
Else
' get position of first shape
lLeft1 = .Item(1).Left
lTop1 = .Item(1).Top
' get position of second shape
lLeft2 = .Item(2).Left
lTop2 = .Item(2).Top
' now swap them
.Item(1).Left = lLeft2
.Item(1).Top = lTop2
.Item(2).Left = lLeft1
.Item(2).Top = lTop1
End If
End With

End Sub
Public Sub CopyPosition()

    With ActiveWindow.Selection.ShapeRange(1)
        copyPosL = .Left
        copyPosT = .Top
    End With
    
End Sub
Public Sub PastePosition()
    With ActiveWindow.Selection.ShapeRange
        .Left = copyPosL
        .Top = copyPosT
    End With
End Sub
Public Sub CopyHeight()

    With ActiveWindow.Selection.ShapeRange(1)
        copySizeH = .Height
    End With
    
End Sub
Public Sub PasteHeight()
    With ActiveWindow.Selection.ShapeRange
        .Height = copySizeH
    End With
End Sub
Public Sub CopyWidth()

    With ActiveWindow.Selection.ShapeRange(1)
        copySizeW = .Width
    End With
    
End Sub
Public Sub PasteWidth()
    With ActiveWindow.Selection.ShapeRange
        .Width = copySizeW
        .Top = copyPosT
    End With
End Sub
Public Sub CopySize()

    With ActiveWindow.Selection.ShapeRange(1)
        copySizeH = .Height
        copySizeW = .Width
    End With
    
End Sub
Public Sub PasteSize()
    With ActiveWindow.Selection.ShapeRange
        .Height = copySizeH
        .Width = copySizeW
    End With
End Sub
Public Sub CallSelectSimilar()
    SelectSimilarForm.Show
End Sub

Public Sub SelectSimilar()
  Dim sh As Shape
  Dim shapeCollection() As String
  Set sh = ActiveWindow.Selection.ShapeRange(1)
  ReDim Preserve shapeCollection(0)
  shapeCollection(0) = sh.Name
  Dim otherShape As Shape
  Dim includeShape As Boolean
  Dim iShape As Integer
    
  If sh Is Nothing Then
    MsgBox ("No shapes selected")
    Exit Sub
  End If
  
  iShape = 1
  For Each otherShape In ActiveWindow.View.Slide.Shapes
    If otherShape.Name <> sh.Name Then
        includeShape = True
    Else
        includeShape = False
    End If
    If selSimShape = True Then
        If otherShape.AutoShapeType <> sh.AutoShapeType Then
            includeShape = False
        End If
    End If
    If selSimFillColor = True Then
        If otherShape.Fill.ForeColor <> sh.Fill.ForeColor Then
            includeShape = False
        End If
    End If
    If selSimLineColor = True Then
        If otherShape.Line.ForeColor <> sh.Line.ForeColor Then
            includeShape = False
        End If
    End If
    If selSimLineStyle = True Then
        If otherShape.Line.Weight <> sh.Line.Weight Or otherShape.Line.DashStyle <> sh.Line.DashStyle Then
            includeShape = False
        End If
    End If
    If selSimHeight = True Then
        If otherShape.Height <> sh.Height Then
            includeShape = False
        End If
    End If
    If selSimWidth = True Then
        If otherShape.Width <> sh.Width Then
            includeShape = False
        End If
    End If
    
    If includeShape = True Then
      ReDim Preserve shapeCollection(1 + iShape)
      shapeCollection(iShape) = otherShape.Name
      iShape = iShape + 1
    End If
  Next otherShape
  ActiveWindow.View.Slide.Shapes.Range(shapeCollection).Select
  
End Sub
Public Sub SendToolsFeedback()
    Dim OutlookApp As Object
    Dim OutlookMessage As Object
    
    On Error Resume Next
    Set OutlookApp = GetObject(class:="Outlook.Application")
    Err.Clear
    If OutlookApp Is Nothing Then Set OutlookApp = CreateObject(class:="Outlook.Application")
    On Error GoTo 0
    Set OutlookMessage = OutlookApp.CreateItem(0)
     
     
    On Error Resume Next
    With OutlookMessage
        .To = "cluders@insightsourcing.com"
        .CC = ""
        .Subject = "ISG Tools Feedback"
        .Body = ""
        .Display
    End With
End Sub
Public Sub CallAbout()
    AboutISGTools.Show
End Sub
Attribute VB_Name = "SelectSimilarForm"
Attribute VB_Base = "0{23407A0D-5BFE-4183-AEA8-EAFB4C009952}{19DAFA6D-64AF-49AB-BF86-B8238728F0E5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Initialize()
    Load SelectSimilarForm
    ShapeButton.Value = selSimShape
    FillColorButton.Value = selSimFillColor
    LineColorButton.Value = selSimLineColor
    LineStyleButton.Value = selSimLineStyle
    HeightButton.Value = selSimHeight
    WidthButton.Value = selSimWidth
    SelectSimilarForm.Show
End Sub

Private Sub CancelButton_Click()
    SelectSimilarForm.Hide
End Sub

Private Sub OKButton_Click()
    selSimShape = ShapeButton.Value
    selSimFillColor = FillColorButton.Value
    selSimLineColor = LineColorButton.Value
    selSimLineStyle = LineStyleButton.Value
    selSimHeight = HeightButton.Value
    selSimWidth = WidthButton.Value
    SelectSimilarForm.Hide
    If selSimShape Or selSimFillColor Or selSimLineColor Or selSimLineStyle Or selSimHeight Or selSimWidth Then
        Call SelectSimilar
    End If
End Sub



INQUEST-PP=macro
