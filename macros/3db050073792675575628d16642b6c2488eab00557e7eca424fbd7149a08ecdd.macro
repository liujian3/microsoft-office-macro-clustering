Attribute VB_Name = "Module1"
Option Explicit


Sub myProtectSheet()
    Dim strPW As String
    strPW = "xxxx"
    'ActiveSheet.Protect

    With ActiveSheet
      .EnableSelection = xlUnlockedCells
       .Protect Password:=strPW, Contents:=True
    End With
End Sub


Function FeasibiltyAlert(zPrt As String, zGood As String, zCng As String, zReq As String)
Dim iFlg1 As Boolean, iFlg2 As Boolean, iFlg3 As Boolean, iFlg4 As Boolean, iFlg5 As Boolean
Dim zRespond As String, iCnt As Integer
Const zMsg1 As String = "ERROR: Do Not Add Conclusion unless Part Number available"
Const zMsg2 As String = "ERROR: Slect One Conclusion Only"
Const zMsg3 As String = "ERROR: Must Slect One Conclusion!"
    iFlg1 = True: iFlg2 = False: iFlg3 = False: iFlg4 = False: iCnt = 0
    zRespond = ""
    If zPrt = "" Then iFlg1 = False
    If UCase(zGood) = "X" Then
        iFlg2 = True
        iCnt = iCnt + 1
    End If
    If UCase(zCng) = "X" Then
        iFlg3 = True
        iCnt = iCnt + 1
    End If
    If UCase(zReq) = "X" Then
        iFlg4 = True
        iCnt = iCnt + 1
    End If
    iFlg5 = iFlg2 Or iFlg3 Or iFlg4
    If iFlg1 = False And iFlg5 = True Then
        zRespond = zMsg1
        GoTo Line10
    End If
    If iFlg1 = True And iCnt > 1 Then
        zRespond = zMsg2
        GoTo Line10
    End If
    If iFlg1 = True And iFlg5 = False Then
        zRespond = zMsg3
        GoTo Line10
    End If
Line10:
    FeasibiltyAlert = zRespond
End Function






Attribute VB_Name = "Module10"
Sub BlockSAPckg()
Attribute BlockSAPckg.VB_ProcData.VB_Invoke_Func = " \n14"
'
' BlockSAPckg Macro
'

'
    Application.ScreenUpdating = False
    Application.Run "Recommended_Packaging"
    Sheets("Supplier Alternate Packaging").Select
    ActiveSheet.Unprotect "xxxx"
    Range("E25:M98").Select
    Selection.Locked = True
    Selection.FormulaHidden = False
    Range("E25").Select
    ActiveSheet.Protect "xxxx"
    Sheets("MAHLE Provided Packaging Data").Select
    Application.ScreenUpdating = True
End Sub
Sub UnblockSAPckg()
'
' UnblockSAPckg Macro
'

'
    Application.ScreenUpdating = False
    Application.Run "Alternate_Packaging"
    Sheets("Supplier Alternate Packaging").Select
    ActiveSheet.Unprotect "xxxx"
    Range("E25:M98").Select
    Selection.Locked = False
    Selection.FormulaHidden = False
    Range("E25").Select
    ActiveSheet.Protect "xxxx"
    Sheets("MAHLE Provided Packaging Data").Select
    Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "Module11"
Attribute VB_Name = "Module2"
'Sub Button83_Click()        'RFQ COVERSHT - SPI MACRO BUTTON
''
'' Button83_Click Macro
'' Macro recorded 5/3/2007 by Rhonda Sutton
'' Macro revised 6/1/2009 to add workbook level protection, changed macro password, and
''   password protected macros
'
'    Dim TargetWkBook As Workbook
'
'    Set TargetWkBook = ThisWorkbook
'
'    Application.EnableEvents = False
'
'    If wkBookProtected(TargetWkBook) Then
'        TargetWkBook.Unprotect "xxxx"
'    End If
'
'    'Initialize & populate SPI for first part
'    Worksheets("RFQ Coversheet").Activate
'    'Range("B19:B28").Select
'    'iPartCount = Selection.Range("B19:B28").Count
'
'    findLast = 19
'    iPartCount = 0
'
'    Do
'        lastVal = Sheet2.Cells(findLast, 3).Value
'        If lastVal <> "EndRow" Then
'            findLast = findLast + 1
'            iPartCount = iPartCount + 1
'        End If
'    Loop Until lastVal = "EndRow"
'
'    Dim fPart As String
'    Dim fPartDesc As String
'    Dim fProgam As String
'    Dim fRfqNum As String
'    Dim fDCntNm As String
'    Dim fDCntPh As String
'    Dim fDCntEm As String
'    Dim fSubmDt As String
'
'    fPart = Worksheets("RFQ Coversheet").Cells(19, 3).Value
'    fPartDesc = Worksheets("RFQ Coversheet").Cells(19, 4).Value
'    fProgram = Worksheets("DO NOT DELETE").Cells(3, 10).Value
'    fRfqNum = Worksheets("RFQ Coversheet").Cells(10, 4).Value
'    fDCntNm = Worksheets("RFQ Coversheet").Cells(13, 4).Value
'    fDCntPh = Worksheets("RFQ Coversheet").Cells(14, 4).Value
'    fDCntEm = Worksheets("RFQ Coversheet").Cells(15, 4).Value
'    fSubmDt = Worksheets("RFQ Coversheet").Cells(12, 4).Value
'
'    If SheetProtected(" SPI") Then
'        Worksheets(" SPI").Unprotect "xxxx"
'    End If
'    Worksheets(" SPI").Cells(30, 1).Value = fPart
'    Worksheets(" SPI").Cells(28, 6).Value = fPartDesc
'    Worksheets(" SPI").Cells(28, 1).Value = fProgram
'    Worksheets(" SPI").Cells(12, 1).Value = fRfqNum
'    Worksheets(" SPI").Cells(10, 1).Value = fDCntNm
'    Worksheets(" SPI").Cells(10, 4).Value = fDCntPh
'    Worksheets(" SPI").Cells(10, 8).Value = fDCntEm
'    Worksheets(" SPI").Cells(10, 12).Value = fSubmDt
'
'    'Find max Volume for first part
'    Dim col As Integer
'    Dim checkRow As Long
'    Dim Max As Long
'    Max = 0
'    For col = 8 To 14
'        checkRow = CLng(Worksheets("RFQ Coversheet").Cells(19, col).Value)
'        If Max < checkRow Then
'            Max = checkRow
'        End If
'    Next col
'
'    If SheetProtected(" SPI") Then
'        Worksheets(" SPI").Unprotect "xxxx"
'    End If
'    Worksheets(" SPI").Cells(30, 9).Value = Max
'
'    'Initialize & populate SPI for next part
'    Dim nPart As String
'    Dim nPartDesc As String
'    Dim nProgram As String
'    Dim nRfqNum As String
'    Dim nDCntNm As String
'    Dim nDCntPh As String
'    Dim nDCntEm As String
'    Dim nSubmDt As String
'    Dim sortsheetname As String
'
'    For tForms = 1 To iPartCount - 1
'
'        nPart = Worksheets("RFQ Coversheet").Cells(19 + tForms, 3).Value
'        nPartDesc = Worksheets("RFQ Coversheet").Cells(19 + tForms, 4).Value
'        nProgram = Worksheets("DO NOT DELETE").Cells(3, 10).Value
'        nRfqNum = Worksheets("RFQ Coversheet").Cells(10, 4).Value
'        nDCntNm = Worksheets("RFQ Coversheet").Cells(13, 4).Value
'        nDCntPh = Worksheets("RFQ Coversheet").Cells(14, 4).Value
'        nDCntEm = Worksheets("RFQ Coversheet").Cells(15, 4).Value
'        nSubmDt = Worksheets("RFQ Coversheet").Cells(12, 4).Value
'
'        'Copy first occurrence and generate new SPI tabs in sequencial order
'        If Trim(nPart) <> "" Then
'            Sheets(" SPI").Select
'
'            If tForms = 1 Then
'                Sheets(" SPI").Copy After:=Sheet15
'            End If
'
'            If tForms <> 1 Then
'                Sheets(" SPI").Copy After:=Sheets(sortsheetname)
'            End If
'
'            Dim Count As Integer
'            Count = tForms + 1
'            Dim sheetName As String
'
'            sheetName = " SPI (" & Count & ")"
'            sortsheetname = sheetName
'
'            If SheetProtected(" SPI") Then
'                Worksheets(" SPI").Unprotect "xxxx"
'            End If
'            If SheetProtected(sheetName) Then
'                Worksheets(sheetName).Unprotect "xxxx"
'            End If
'
'            Worksheets(sheetName).Cells(30, 1).Value = nPart
'            Worksheets(sheetName).Cells(28, 6).Value = nPartDesc
'            Worksheets(sheetName).Cells(28, 1).Value = nProgram
'            Worksheets(sheetName).Cells(12, 1).Value = nRfqNum
'            Worksheets(sheetName).Cells(10, 1).Value = nDCntNm
'            Worksheets(sheetName).Cells(10, 4).Value = nDCntPh
'            Worksheets(sheetName).Cells(10, 8).Value = nDCntEm
'            Worksheets(" SPI").Cells(10, 12).Value = nSubmDt
'
'            If tForms <> iPartCount Then
'                'Dim col As Integer
'                'Dim checkRow As Integer
'                'Dim Max As Integer
'                Max = 0
'                For col = 8 To 14
'                    checkRow = Val(Worksheets("RFQ Coversheet").Cells(19 + tForms, col).Value)
'                    If Max < checkRow Then
'                        Max = checkRow
'                    End If
'                Next col
'
'                Worksheets(sheetName).Cells(30, 9).Value = Max
'            End If
'
'            If Not SheetProtected(" SPI") Then
'                Worksheets(" SPI").Protect "xxxx"
'            End If
'            If Not SheetProtected(sheetName) Then
'                Worksheets(sheetName).Protect "xxxx"
'            End If
'
'        End If
'    Next tForms
'
'    If Not SheetProtected(" SPI") Then
'        Worksheets(" SPI").Protect "xxxx"
'    End If
'
'    Application.Goto Reference:=Worksheets("RFQ Coversheet").Range("C19")
'
'    If wkBookProtected(TargetWkBook) = False Then
'        TargetWkBook.Protect "xxxx"
'    End If
'
'    Application.EnableEvents = True
'
'    MsgBox ("Complete: SPI Form(s) added for each Part")
'
'End Sub

Private Function SheetProtected(sheetName As String) As Boolean
    'Function purpose:  To evaluate if a worksheet is protected
    
    Dim TargetSheet As Worksheet
    
    Set TargetSheet = ActiveWorkbook.Worksheets(sheetName)
    If TargetSheet.ProtectContents = True Then
        SheetProtected = True
    Else
        SheetProtected = False
    End If
     
End Function
Private Function wkBookProtected(TargetWkBook) As Boolean
    'Function purpose:  To evaluate if a worksheet is protected
    
    If TargetWkBook.ProtectStructure = True Then
        wkBookProtected = True
    Else
        wkBookProtected = False
    End If
     
End Function

Attribute VB_Name = "Module3"
Sub Button69_Click()        'RFQ COVERSHT - COST BREAKDOWN MACRO BUTTON
Attribute Button69_Click.VB_Description = "Macro recorded 4/13/2007 by Rhonda Sutton"
Attribute Button69_Click.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Button69_Click Macro
' Macro recorded 4/13/2007 by Rhonda Sutton
' Macro revised 6/1/2009 to add workbook level protection, changed macro password, and
'   password protected macros

    Dim TargetWkBook As Workbook
    
    Set TargetWkBook = ThisWorkbook
    
    If wkBookProtected(TargetWkBook) Then
        TargetWkBook.Unprotect "xxxx"
    End If

    Application.EnableEvents = False
    
    'Initialize Cost Breakdown
    Worksheets("RFQ Coversheet").Activate
    
    findlast = 19
    iPartCount = 0
    
    Do
        lastval = Sheet2.Cells(findlast, 3).Value
        If lastval <> "EndRow" Then
            findlast = findlast + 1
            iPartCount = iPartCount + 1
        End If
    Loop Until lastval = "EndRow"
    
    Dim fPart As String
    Dim fPartDesc As String
    Dim fPartRev As String
    Dim fRfqNum As String
    Dim fPrepBy As String
    
    fPart = Worksheets("RFQ Coversheet").Cells(19, 3).Value
    fPartDesc = Worksheets("RFQ Coversheet").Cells(19, 4).Value
    fPartRev = Worksheets("RFQ Coversheet").Cells(19, 5).Value
    fRfqNum = Worksheets("RFQ Coversheet").Cells(10, 4).Value
    fPrepBy = Worksheets("DO NOT DELETE").Cells(23, 10).Value
    
    Worksheets("Cost Breakdown Form").Cells(2, 5).Value = fPart
    Worksheets("Cost Breakdown Form").Cells(3, 5).Value = fPartDesc
    Worksheets("Cost Breakdown Form").Cells(4, 5).Value = fPartRev
    Worksheets("Cost Breakdown Form").Cells(5, 5).Value = fRfqNum
    Worksheets("Cost Breakdown Form").Cells(5, 26).Value = fPrepBy
    
    Dim col As Integer
    Dim checkRow As Long
    Dim Max As Long
    Max = 0
    For col = 9 To 15
        checkRow = CLng(Worksheets("RFQ Coversheet").Cells(19, col).Value)
        If Max < checkRow Then
            Max = checkRow
        End If
    Next col
    Worksheets("Cost Breakdown Form").Cells(1, 26).Value = Max
     
    Dim nPart As String
    Dim nPartDesc As String
    Dim nPartRev As String
    Dim rfqNum As String
    Dim PrepBy As String
    Dim sortsheetname As String
    
    For tForms = 1 To iPartCount - 1
        nPart = Worksheets("RFQ Coversheet").Cells(19 + tForms, 3).Value
        nPartDesc = Worksheets("RFQ Coversheet").Cells(19 + tForms, 4).Value
        nPartRev = Worksheets("RFQ Coversheet").Cells(19 + tForms, 5).Value
        rfqNum = Worksheets("RFQ Coversheet").Cells(10, 4).Value
        PrepBy = Worksheets("DO NOT DELETE").Cells(23, 10).Value
    
        If Trim(nPart) <> "" Then
            Sheets("Cost Breakdown Form").Select
        
            If tForms = 1 Then
                Sheets("Cost Breakdown Form").Copy After:=Sheet6
            End If
        
            If tForms <> 1 Then
                Sheets("Cost Breakdown Form").Copy After:=Sheets(sortsheetname)
            End If
        
            Dim Count As Integer
            Count = tForms + 1
            Dim sheetName As String
            
            sheetName = "Cost Breakdown Form (" & Count & ")"
            sortsheetname = sheetName
            Worksheets(sheetName).Cells(2, 5).Value = nPart
            Worksheets(sheetName).Cells(3, 5).Value = nPartDesc
            Worksheets(sheetName).Cells(4, 5).Value = nPartRev
            Worksheets(sheetName).Cells(5, 5).Value = rfqNum
            Worksheets(sheetName).Cells(5, 26).Value = PrepBy
            
            If tForms <> iPartCount Then
                'Dim col As Integer
                'Dim checkRow As Integer
                'Dim Max As Integer
                Max = 0
                For col = 9 To 15
                    checkRow = Val(Worksheets("RFQ Coversheet").Cells(19 + tForms, col).Value)
                    If Max < checkRow Then
                        Max = checkRow
                    End If
                Next col
                Worksheets(sheetName).Cells(1, 26).Value = Max
            End If
            'Worksheets(sheetName).Protect "xxxx"
        End If
    Next tForms
    
    Application.GoTo Reference:=Worksheets("RFQ Coversheet").Range("C19")
       
    If wkBookProtected(TargetWkBook) = False Then
        TargetWkBook.Protect "xxxx"
    End If

 Application.EnableEvents = True
 
 MsgBox "Complete: Cost Breakdown Sheet(s) added for each Part", vbInformation
 
End Sub
Private Function wkBookProtected(TargetWkBook) As Boolean
    'Function purpose:  To evaluate if a worksheet is protected
    
    If TargetWkBook.ProtectStructure = True Then
        wkBookProtected = True
    Else
        wkBookProtected = False
    End If
     
End Function

Attribute VB_Name = "Module4"
Sub Button16_Click()        'COST BREAKDOWN SHT - ADD LINE ITEM BUTTON
Attribute Button16_Click.VB_Description = "Macro recorded 8/1/2007 by Rhonda Sutton"
Attribute Button16_Click.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Button16_Click Macro
' Macro recorded 8/1/2007 by Rhonda Sutton
'
Application.EnableEvents = False
ActiveSheet.Activate

'Add new line items to Cost Breakdown - Purchased Components
Dim lastRow As Integer
lastRow = 12
lastval = Cells(lastRow, 2).Value

'Check pre-defined last row
If Trim(lastval) <> "" Then

    'Find last row with input
    Do
        lastRow = lastRow + 1
        lastval = Cells(lastRow, 2).Value
    Loop Until lastval = "End1"

    'Insert new row and then copy/paste formats, formulas, validations
    ActiveSheet.Unprotect ("xxxx")    'Logic to unprotect sheet
    Rows(lastRow).Select
    Selection.Insert Shift:=xlDown
    lastRow = lastRow + 1
    
    ActiveSheet.Unprotect ("xxxx")    'Logic to unprotect sheet
    Rows(lastRow - 2).Copy
    Rows(lastRow - 1).PasteSpecial _
           Paste:=xlPasteFormats
    
    ActiveSheet.Unprotect ("xxxx")    'Logic to unprotect sheet
    Rows(lastRow - 2).Copy
    Rows(lastRow - 1).PasteSpecial _
           Paste:=xlPasteValidation
    
    ActiveSheet.Unprotect ("xxxx")    'Logic to unprotect sheet
    With ActiveSheet
    .Cells(lastRow - 2, 19).Copy
    .Cells(lastRow - 1, 19).PasteSpecial _
           Paste:=xlPasteFormulas
    End With
    
    ActiveSheet.Unprotect ("xxxx")    'Logic to unprotect sheet
    With ActiveSheet
    .Range(.Cells(lastRow - 2, 28), _
        .Cells(lastRow - 2, 30)).Copy
    .Range(.Cells(lastRow - 1, 28), _
        .Cells(lastRow - 1, 30)).PasteSpecial _
           Paste:=xlPasteFormulas
    End With
    
   'Clear copied ITEM DESCRIPTION in new row
    'With Worksheets(5)
    '.Range(.Cells(lastRow, 2), _
    '    .Cells(lastRow, 7)).ClearContents
    'End With

    'lastVal = Cells(lastRow, 2).Value


'Update formulas in Totals (summary) row
    fStart = 12
    fEnd = lastRow - 1
    Formula1 = "=SUM(AB" & fStart & ":AD" & fEnd & ")"
    '=SUM(AB12:AD21)
    ActiveSheet.Unprotect ("xxxx")    'Logic to unprotect sheet
    ActiveSheet.Cells(lastRow + 1, 28).Formula = Formula1
End If

Call myProtectSheet            'Call to routine for turning protect back on

'Establish mouse position
With ActiveSheet
.Range(.Cells(lastRow - 1, 2), _
    .Cells(lastRow - 1, 7)).Select
End With

Application.EnableEvents = True

End Sub

Sub myProtectSheet()
    Dim strPW As String
    strPW = "xxxx"
    'ActiveSheet.Protect

    With ActiveSheet
      .EnableSelection = xlUnlockedCells
       .Protect Password:=strPW, Contents:=True
    End With
    
End Sub

Attribute VB_Name = "Module5"
Sub Button112_Click()   'RFQ COVERSHT - REFRESH BUTTON
'
'Refresh button on RFQ Cover - Autofits part line item data in comment fields

Dim lastValue As String
Dim lastRow As Integer

Application.ScreenUpdating = False

Worksheets("").Unprotect ("xxxx")    'Call to unprotect sheet

'Find last row
lastRow = 19
'MsgBox (lastRow)
Do
    lastValue = Cells(lastRow, 3).Value
    
    'MsgBox (lastValue)
    If lastValue <> "EndRow" Then
        lastRow = lastRow + 1
       
    End If
Loop Until lastValue = "EndRow"

'Dim Counter As Integer
'For Counter = 19 To lastRow
'    Worksheets("RFQ Coversheet").Cells(Counter, 4).Rows.AutoFit
'    Worksheets("RFQ Coversheet").Cells(Counter, 7).Rows.AutoFit
'Next Counter

Rows(lastRow & ":" & lastRow).Select
    Selection.Insert Shift:=xlDown
    Cells(lastRow - 1, 3).Select
    Range(Selection, Selection.End(xlToRight)).Select
    Selection.Copy
    Cells(lastRow, 3).Select
    Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
    Cells(lastRow, 3).Select
    Application.CutCopyMode = False




Application.ScreenUpdating = True


Call myProtectSheet
End Sub

Sub myProtectSheet()
    Dim strPW As String
    strPW = "xxxx"
    'ActiveSheet.Protect AllowInsertingRows:=True, AllowDeletingRows:=True

    With Worksheets("RFQ Coversheet")
      .EnableSelection = xlNoRestrictions
       .Protect Password:=strPW, Contents:=True
    End With
    
End Sub
Attribute VB_Name = "Module6"
Option Base 1    ' Set default array subscripts to 1

Sub Button158_Click()       'DELETE ROWS IN MULTIPLE SHEETS

'Macro created 6/1/2009 by Rhonda Sutton
'Macro changes WIP 7/22/09.  Latest changes fagged by **

'--------------------------------------
'Macro to delete rows in RFQ Coversheet
'--------------------------------------
'declare variables
    Dim findLastRow As Integer
    Dim lastRow As Integer
    Dim flagOnTailEnd As String
    Dim flagCol As Integer
    Dim Msg, Style, Title, Response, MyString
    Dim UserSelectedRange As Range
    Dim UpperBound As Integer
    Dim partArray() As String
    Dim tCols As Integer
    Dim tRow As Integer
    Dim Alert As String

'Select which rows to delete
    Set UserSelectedRange = ActiveWindow.RangeSelection
    tCols = CountCols
    tRows = UserSelectedRange.Rows.Count
    UpperBound = tRows
    
    If tCols <> 256 Then
        Alert = MsgBox("To delete line item(s), you must select the entire row(s).", vbExclamation, "Warning!")
        Exit Sub
    End If
    
    If tCols = 256 Then
        For x = 1 To tRows
            'perform check for Part Number value, if null disallow deletion
            If UserSelectedRange.Cells(x, 3).Value <> "" Then
                ReDim Preserve partArray(UpperBound)
                partArray(x) = UserSelectedRange.Cells(x, 3).Value      'store Part Number in array for each row selected
                'MsgBox y(x)
            Else
                MsgBox "You can only delete rows with Part Numbers assigned. " & _
                    vbCrLf & "Select different row(s).", vbCritical
                Exit Sub
            End If
        Next x
    End If

'Define delete confirmation message
    Msg = "Are you sure you want to delete row(s) " & ActiveWindow.RangeSelection.EntireRow.Address & "?"
    Style = vbOKCancel + vbQuestion + vbDefaultButton2    ' Define buttons
    Title = "Confirm Deletion"      ' Define title.

'initialize variables relative to RFQ Coversheet
    findLastRow = 19
    flagOnTailEnd = "EndRow"
    flagCol = 3

'declare & initialize objects **
    Application.EnableEvents = False
    Set RFQSheet = ActiveWorkbook.Worksheets("RFQ Coversheet")
    RFQSheet.Activate
    RFQSheet.Unprotect ("xxxx")    'Call to unprotect sheet
    
'call procedure to identify the last part line item **
    Call VerifyLastRow(lastRow, flagOnTailEnd, flagCol, findLastRow)

'Display confirmation message
    Response = MsgBox(Msg, Style, Title)
    If Response = vbOK Then         ' User chose OK
        MyString = "Yes"            ' assign value to variable
    Else                            ' User chose No
        MyString = "No"             ' assign value to variable
        MsgBox "Delete function cancelled.", vbInformation
        Exit Sub
    End If

    If ActiveCell.Row > findLastRow And ActiveCell.Row < lastRow Then
        If MyString = "Yes" Then
            Call DeleteRowsOnSQF(partArray, UpperBound, MyString)
            Call DeleteRowsOnTFC(partArray, UpperBound, MyString)
            Call DeleteRowsOnQA(partArray, UpperBound, MyString)
            Call DeleteRowsOnDQA_TR(partArray, UpperBound, MyString)
            Call DeleteRowsOnDQA(partArray, UpperBound, MyString)
            'final step: delete rows on RFQ Cover
            UserSelectedRange.EntireRow.Delete Shift:=xlUp
            'MsgBox "delete RFQ rows"
        End If
    Else
        'display warning if attempt to delete outside of permitted range
        WarningMsg = MsgBox("You are not permitted to delete one or more selected row(s).", vbExclamation, "Warning!")
        Exit Sub
    End If

' call routine to protect sheet and workbook
    Module7.myProtectSheet

Application.GoTo Reference:=Worksheets("RFQ Coversheet").Range("C19")
Application.EnableEvents = True

MsgBox "Complete: Line Item(s) Deleted", vbInformation

End Sub
Sub VerifyLastRow(lastRow, ByVal flagOnTailEnd, ByVal flagCol, ByVal findLastRow)
'subroutine to verify the last row of part information in active sheet

Dim lastRowVal As String

    Do Until lastRowVal = flagOnTailEnd
        lastRowVal = ActiveSheet.Cells(findLastRow, flagCol).Value
        If lastRowVal = flagOnTailEnd Then GoTo EndMyLoop
        findLastRow = findLastRow + 1
    Loop
EndMyLoop:
    lastRow = findLastRow
End Sub

Function CountCols()
    CountCols = Selection.Columns.Count
End Function

Sub DeleteRowsOnSQF(partArray() As String, ByVal UpperBound, ByVal MyString)

'-----------------------------------------------------
'Macro to delete rows in Supplier Quotation Form (SQF)
'-----------------------------------------------------

'declare variables relative to SQF
    Dim MultiRangeObject As Range
    Dim deleteLnItemArray() As Variant
    Dim foundMatch As Integer
    Dim findLastRow As Integer
    Dim flagOnTailEnd As String
    Dim flagCol As Integer
    Dim UpBound As Integer
    Dim MaxLoops As Integer
    Dim arrayIndexCounter As Integer
    Dim iterationCount As Integer
    Dim x As Integer
    Dim i As Integer
    Dim SQFSheet As Worksheet
    
'initialize variables relative to SQF
    findLastRow = 22
    flagOnTailEnd = "EndRow2"
    flagCol = 2
    UpBound = 0
    i = 1
    foundMatch = 0
    MaxLoops = 2
    
'declare & initialize objects **
    Set SQFSheet = Worksheets("Supplier Quotation Form")
    SQFSheet.Activate
    SQFSheet.Unprotect ("xxxx")
 
'call procedure to identify the last part line item **
    Call VerifyLastRow(lastRow, flagOnTailEnd, flagCol, findLastRow)
 
'identify rows to automatically delete in SQF
    For arrayIndexCounter = 1 To UpperBound
        For x = findLastRow To lastRow
        'MsgBox Cells(x, flagCol).Value
            If Cells(x, flagCol).Value = partArray(arrayIndexCounter) Then
                foundRow = Cells(x, flagCol).Row
                Exit For
            End If
        Next x
        
        If foundRow <> Empty Then       '**
            For iterationCount = 0 To MaxLoops - 1
                UpBound = UpBound + 1
                ReDim Preserve deleteLnItemArray(UpBound)
                deleteLnItemArray(i) = Cells(foundRow + iterationCount, flagCol).Address
                i = i + 1
                foundMatch = foundMatch + 1
            Next iterationCount
        Else
            GoTo NoMatchFound
        End If
    Next arrayIndexCounter
    
'Checked for part matches **
NoMatchFound:
    If foundMatch = 0 Then
        MsgBox "Multi-Sheet Delete Failed: matching part(s) not found", vbInformation
        Exit Sub
    End If

'Select and delete appropriate rows
    Set MultiRangeObject = Range(deleteLnItemArray(1) & ":" & deleteLnItemArray(UpBound))
    MultiRangeObject.EntireRow.Select
                    
    If ActiveCell.Row > findLastRow And ActiveCell.Row < lastRow Then
        If MyString = "Yes" Then
            'ActiveWindow.RangeSelection.EntireRow.Delete shift:=xlUp
            MsgBox "delete SQF rows"
        End If
    Else
        'display warning if attempt to delete outside of permitted range
        WarningMsg = MsgBox("You are not permitted to delete one or more selected row(s).", vbExclamation, "Warning!")
        Exit Sub
    End If

Application.GoTo Reference:=ActiveSheet.Range("A1")
'call routine to protect sheet & workbook
    Module7.mySQFProtectSheet

'Application.Goto Reference:=Worksheets("Supplier Quotation Form").Range("A1")

End Sub

Sub DeleteRowsOnTFC(partArray() As String, ByVal UpperBound, ByVal MyString)

'-----------------------------------------------------
'Macro to delete rows in Team Feasibility Commitment(TFC)
'-----------------------------------------------------

'declare variables relative to TFC
    Dim MultiRangeObject As Range
    Dim deleteLnItemArray() As Variant
    Dim foundMatch As Integer
    Dim findLastRow As Integer
    Dim flagOnTailEnd As String
    Dim flagCol As Integer
    Dim UpBound As Integer
    Dim MaxLoops As Integer
    Dim arrayIndexCounter As Integer
    Dim iterationCount As Integer
    Dim x As Integer
    Dim i As Integer

'initialize variables relative to TFC
    findLastRow = 16
    flagOnTailEnd = "endTFC"
    flagCol = 1
    UpBound = 0
    i = 1
    foundMatch = 0
    MaxLoops = 1

    Worksheets("Team Feasibility").Activate
    Call VerifyLastRow(lastRow, flagOnTailEnd, flagCol, findLastRow)
    ActiveSheet.Unprotect ("xxxx")
 
'identify rows to automatically delete in TFC
    For arrayIndexCounter = 1 To UpperBound
        For x = findLastRow To lastRow
            If Cells(x, flagCol).Value = partArray(arrayIndexCounter) Then
                foundRow = Cells(x, flagCol).Row
                Exit For
            End If
        Next x
        
        If foundRow <> Empty Then       '**
            For iterationCount = 0 To MaxLoops - 1
                UpBound = UpBound + 1
                ReDim Preserve deleteLnItemArray(UpBound)
                deleteLnItemArray(i) = Cells(foundRow + iterationCount, flagCol).Address
                i = i + 1
                foundMatch = foundMatch + 1
            Next iterationCount
        Else
            GoTo NoMatchFound
        End If
    Next arrayIndexCounter
    
'Checked for part matches **
NoMatchFound:
    If foundMatch = 0 Then
        MsgBox "Multi-Sheet Delete Failed: matching part(s) not found", vbInformation
        Exit Sub
    End If
    
'select and delete appropriate TFC rows
    Set MultiRangeObject = Range(deleteLnItemArray(1) & ":" & deleteLnItemArray(UpBound))
    MultiRangeObject.EntireRow.Select
                    
    If ActiveCell.Row > findLastRow And ActiveCell.Row < lastRow Then
        If MyString = "Yes" Then
            ActiveWindow.RangeSelection.EntireRow.Delete Shift:=xlUp
            'MsgBox "delete TFC rows"
        End If
    Else
        'display warning if attempt to delete outside of permitted range
        WarningMsg = MsgBox("You are not permitted to delete one or more selected row(s).", vbExclamation, "Warning!")
        Exit Sub
    End If

Application.GoTo Reference:=ActiveSheet.Range("A1")

' call routine to protect sheet & workbook
    Module7.myTFC_Protect

End Sub

Sub DeleteRowsOnQA(partArray() As String, ByVal UpperBound, ByVal MyString)

'-----------------------------------------------------
'Macro to delete rows in Team Feasibility Remarks(QA)
'-----------------------------------------------------

'declare variables relative to QA
    Dim MultiRangeObject As Range
    Dim deleteLnItemArray() As Variant
    Dim foundMatch As Integer
    Dim findLastRow As Integer
    Dim flagOnTailEnd As String
    Dim flagCol As Integer
    Dim UpBound As Integer
    Dim MaxLoops As Integer
    Dim arrayIndexCounter As Integer
    Dim iterationCount As Integer
    Dim x As Integer
    Dim i As Integer

'initialize variables relative to QA
    findLastRow = 9
    flagOnTailEnd = "endQA"
    flagCol = 2
    UpBound = 0
    i = 1
    foundMatch = 0
    MaxLoops = 1
    
    Worksheets("Team Feasibility Remarks").Activate
    Call VerifyLastRow(lastRow, flagOnTailEnd, flagCol, findLastRow)
    ActiveSheet.Unprotect ("xxxx")
 
'identify rows to automatically delete in QA
    For arrayIndexCounter = 1 To UpperBound
        For x = findLastRow To lastRow
            If Cells(x, flagCol).Value = partArray(arrayIndexCounter) Then
                foundRow = Cells(x, flagCol).Row
                Exit For
            End If
        Next x
        
        If foundRow <> Empty Then       '**
            For iterationCount = 0 To MaxLoops - 1
                UpBound = UpBound + 1
                ReDim Preserve deleteLnItemArray(UpBound)
                deleteLnItemArray(i) = Cells(foundRow + iterationCount, flagCol).Address
                i = i + 1
                foundMatch = foundMatch + 1
            Next iterationCount
        Else
            GoTo NoMatchFound
        End If
    Next arrayIndexCounter
    
'Checked for part matches **
NoMatchFound:
    If foundMatch = 0 Then
        MsgBox "Multi-Sheet Delete Failed: matching part(s) not found", vbInformation
        Exit Sub
    End If

'select and delete appropriate QA rows
    Set MultiRangeObject = Range(deleteLnItemArray(1) & ":" & deleteLnItemArray(UpBound))
    MultiRangeObject.EntireRow.Select
                    
    If ActiveCell.Row > findLastRow And ActiveCell.Row < lastRow Then
        If MyString = "Yes" Then
            ActiveWindow.RangeSelection.EntireRow.Delete Shift:=xlUp
            'MsgBox "delete QA rows"
        End If
    Else
        'display warning if attempt to delete outside of permitted range
        WarningMsg = MsgBox("You are not permitted to delete one or more selected row(s).", vbExclamation, "Warning!")
        Exit Sub
    End If
    
Application.GoTo Reference:=ActiveSheet.Range("A1")

'call routine to protect sheet & workbook
    Module7.myQA_Protect

End Sub

Sub DeleteRowsOnDQA(partArray() As String, ByVal UpperBound, ByVal MyString)

'-----------------------------------------------------
'Macro to delete rows in Delphi Quote Analysis(DQA)
'-----------------------------------------------------

'declare variables relative to DQA
    Dim MultiRangeObject As Range
    Dim deleteLnItemArray() As Variant
    Dim foundMatch As Integer
    Dim findLastRow As Integer
    Dim flagOnTailEnd As String
    Dim flagCol As Integer
    Dim UpBound As Integer
    Dim MaxLoops As Integer
    Dim arrayIndexCounter As Integer
    Dim iterationCount As Integer
    Dim x As Integer
    Dim i As Integer

'initialize variables relative to DQA
    findLastRow = 21
    flagOnTailEnd = "EndRow3"
    flagCol = 4
    UpBound = 0
    i = 1
    foundMatch = 0
    MaxLoops = 1
    
    Worksheets("Delphi Quote Analysis").Activate
    Call VerifyLastRow(lastRow, flagOnTailEnd, flagCol, findLastRow)
    ActiveSheet.Unprotect ("xxxx")
 
'identify rows to automatically delete in DQA
    For arrayIndexCounter = 1 To UpperBound
        For x = findLastRow To lastRow
            If Cells(x, flagCol).Value = partArray(arrayIndexCounter) Then
                foundRow = Cells(x, flagCol).Row
                Exit For
            End If
        Next x
        
        If foundRow <> Empty Then       '**
            For iterationCount = 0 To MaxLoops - 1
                UpBound = UpBound + 1
                ReDim Preserve deleteLnItemArray(UpBound)
                deleteLnItemArray(i) = Cells(foundRow + iterationCount, flagCol).Address
                i = i + 1
                foundMatch = foundMatch + 1
            Next iterationCount
        Else
            GoTo NoMatchFound
        End If
    Next arrayIndexCounter
    
'Checked for part matches **
NoMatchFound:
    If foundMatch = 0 Then
        MsgBox "Multi-Sheet Delete Failed: matching part(s) not found", vbInformation
        Exit Sub
    End If

'select and delete appropriate DQA rows
    Set MultiRangeObject = Range(deleteLnItemArray(1) & ":" & deleteLnItemArray(UpBound))
    MultiRangeObject.EntireRow.Select
                    
    If ActiveCell.Row > findLastRow And ActiveCell.Row < lastRow Then
        If MyString = "Yes" Then
            ActiveWindow.RangeSelection.EntireRow.Delete Shift:=xlUp
            'MsgBox "delete DQA rows"
        End If
    Else
        'display warning if attempt to delete outside of permitted range
        WarningMsg = MsgBox("You are not permitted to delete one or more selected row(s).", vbExclamation, "Warning!")
        Exit Sub
    End If

Application.GoTo Reference:=ActiveSheet.Range("A1")

' call routine to protect sheet & workbook
    'Module7.myQuoteAnalysisProtectSheet

End Sub

Sub DeleteRowsOnDQA_TR(partArray() As String, ByVal UpperBound, ByVal MyString)

'------------------------------------------------------------------
'Macro to delete rows in Delphi Quote Analysis(DQA)Technical Review
'------------------------------------------------------------------

'declare variables relative to DQA_TR
    Dim MultiRangeObject As Range
    Dim deleteLnItemArray() As Variant
    Dim foundMatch As Integer
    Dim findLastRow As Integer
    Dim flagOnTailEnd As String
    Dim flagCol As Integer
    Dim UpBound As Integer
    Dim MaxLoops As Integer
    Dim arrayIndexCounter As Integer
    Dim iterationCount As Integer
    Dim x As Integer
    Dim i As Integer

'initialize variables relative to DQA_TR
    findLastRow = 38
    flagOnTailEnd = "last_tr"
    flagCol = 4
    UpBound = 0
    i = 1
    foundMatch = 0
    MaxLoops = 1
    
    Worksheets("Delphi Quote Analysis").Activate
    Call VerifyLastRow(lastRow, flagOnTailEnd, flagCol, findLastRow)
    ActiveSheet.Unprotect ("xxxx")
 
'identify rows to automatically delete in DQA_TR
    For arrayIndexCounter = 1 To UpperBound
        For x = findLastRow To lastRow
            If Cells(x, flagCol).Value = partArray(arrayIndexCounter) Then
                foundRow = Cells(x, flagCol).Row
                Exit For
            End If
        Next x
        
        If foundRow <> Empty Then       '**
            For iterationCount = 0 To MaxLoops - 1
                UpBound = UpBound + 1
                ReDim Preserve deleteLnItemArray(UpBound)
                deleteLnItemArray(i) = Cells(foundRow + iterationCount, flagCol).Address
                i = i + 1
                foundMatch = foundMatch + 1
            Next iterationCount
        Else
            GoTo NoMatchFound
        End If
    Next arrayIndexCounter
    
'Checked for part matches **
NoMatchFound:
    If foundMatch = 0 Then
        MsgBox "Multi-Sheet Delete Failed: matching part(s) not found", vbInformation
        Exit Sub
    End If

'select and delete appropriate DQA_TR rows
    Set MultiRangeObject = Range(deleteLnItemArray(1) & ":" & deleteLnItemArray(UpBound))
    MultiRangeObject.EntireRow.Select
                    
    If ActiveCell.Row > findLastRow And ActiveCell.Row < lastRow Then
        If MyString = "Yes" Then
            ActiveWindow.RangeSelection.EntireRow.Delete Shift:=xlUp
            'MsgBox "delete DQA_TR rows"
        End If
    Else
        'display warning if attempt to delete outside of permitted range
        WarningMsg = MsgBox("You are not permitted to delete one or more selected row(s).", vbExclamation, "Warning!")
        Exit Sub
    End If

Application.GoTo Reference:=ActiveSheet.Range("A1")

' call routine to protect sheet & workbook
    'Module7.myQuoteAnalysisProtectSheet

End Sub


Attribute VB_Name = "Module7"
Option Base 1
Public NumRows As Integer
Public AddNewRowArray(), TrackSQFRowsArray() As Integer
'Public DQARoutineFlag As String
Public TFCRoutineFlag As String

Sub Button165_Click()   'RFQ COVERSHT - ADD LINE ITEM BUTTON (ADDS NEW ROWS TO MULTIPLE WORKBOOK SHEETS)
'
' Button16_Click Macro
' Macro created 8/1/2007 by Rhonda Sutton
' Macro revised 6/1/2009 by Rhonda Sutton.  Revised Team Feasibility and Team Feasibility Remarks sections
'      to include part REV column
' Macro revised 6/19/2009 by Rhonda Sutton.  Relocated code from RFQ Coversheet to standard module,
'    added procedure to centralize code for finding last row, and modified code to allow part rows to be deleted

CalledFromSub = False
Call AddLineItemsToRFQ(CalledFromSub, pNumRows)

End Sub

Sub AddLineItemsToRFQ(CalledFromSub, pNumRows)      'SUPPLIER QUOTATION FORM

'------------------------------------------------------------------
'Macro to insert new rows into the RFQ Sheet
'------------------------------------------------------------------

'declare RFQ variables
    Dim findLastRow As Integer
    Dim lastRow As Integer
    Dim newRow As Integer
    Dim flagOnTailEnd As String
    Dim flagCol
    Dim RFQSheet As Worksheet
    Dim UpperBound As Integer
    Dim Counter As Integer

'initialize variables to find last part line item (row)
    findLastRow = 19
    flagOnTailEnd = "EndRow"
    flagCol = 3
'    DQARoutineFlag = "Off"

'declare & initialize objects
    Application.EnableEvents = False
    Set RFQSheet = ActiveWorkbook.Worksheets("RFQ Coversheet")
    RFQSheet.Activate
    RFQSheet.Unprotect ("xxxx")    'Call to unprotect sheet

'call procedure to identify the last part line item
    Call VerifyLastRow(lastRow, flagOnTailEnd, flagCol, findLastRow)

'Prompt for number of rows to add
    If CalledFromSub = False Then
        NumRows = Application.InputBox("How many rows do you wish to add?", Type:=1)
        'NumRows = Application.InputBox("How many rows do you wish to add?", Type:=1)
        UpperBound = NumRows
    Else
        NumRows = pNumRows
        UpperBound = NumRows
    End If

'display if user chooses Cancel button
    If NumRows = False Then
        MsgBox "Add function cancelled", vbInformation
        Exit Sub
    End If

'Add number of rows specified
    For Counter = 1 To NumRows
        Rows(lastRow).Select
        Selection.Insert Shift:=xlUp
        lastRow = lastRow + 1
        
        newRow = Rows(lastRow - 1).Row
        ReDim Preserve AddNewRowArray(UpperBound)
        AddNewRowArray(Counter) = newRow

        Rows(lastRow - 2).Copy
        Rows(newRow).PasteSpecial _
           Paste:=xlPasteFormats
        
        'lastRow = lastRow + 1
    Next Counter
    Application.SendKeys ("{ESC}")

'call routine for turning protect back on
    Call myProtectSheet
    
'call to add rows to other sheets in workbook
    Call AddLineItemsToSQF
    Call AddLineItemsToTFC
    Call AddLineItemsToQA
    'Call AddLineItemsToDQA
    'Call AddRowsAndFormulasToDQA_TR

Application.GoTo Reference:=Worksheets("RFQ Coversheet").Range("C19")

Application.EnableEvents = True

MsgBox "Complete: New Line Item(s) Added", vbInformation

End Sub

Public Sub myProtectSheet()
    Dim strPW As String
    strPW = "xxxx"
    'RFQSheet.Protect AllowInsertingRows:=True, AllowDeletingRows:=True

    With ActiveSheet
        .EnableSelection = xlNoRestrictions
        .Protect Password:=strPW, Contents:=True
    End With
    
End Sub

Sub AddLineItemsToSQF()      'SUPPLIER QUOTATION FORM
'------------------------------------------------------------------
'Macro to insert new rows into the SQF Sheet
'------------------------------------------------------------------

'declare SQF variables
    Dim findLastRow As Integer
    Dim flagOnTailEnd As String
    Dim flagCol As Integer
    Dim Counter As Integer
    Dim m As Integer
    Dim n As Integer
    Dim SQFSheet As Worksheet
    Dim lowerSQFRow As Integer

'declare & initialize objects
    Set SQFSheet = ActiveWorkbook.Worksheets("Supplier Quotation Form")
    SQFSheet.Activate
    SQFSheet.Unprotect ("xxxx")    'Call to unprotect sheet

'initialize variables to find last part line item (row)
    findLastRow = 22
    flagOnTailEnd = "EndRow2"
    flagCol = 2

'call procedure to identify the last part line item
    Call VerifyLastRow(lastRow, flagOnTailEnd, flagCol, findLastRow)

'Add number of rows specified
    For Counter = 1 To NumRows
    
        '1.) Add new Lower Row
        With SQFSheet
            .Rows(lastRow).Select
            Selection.Insert Shift:=xlDown
            lastRow = lastRow + 1
            m = lastRow - 1
            n = lastRow - 2
            Call AddFormulasToLower(m, n, Counter, SQFSheet) 'add bottom row formulas
            .Rows(n).Copy
            .Rows(m).PasteSpecial _
            Paste:=xlPasteFormats
          End With
        
'        '2.) Add new Upper Row
'          With SQFSheet
'              .Rows(n).Select
'              Selection.Insert shift:=xlDown
'              Call AddFormulasToUpper(m, n, Counter, SQFSheet) 'add top row formulas
'              .Rows(n - 1).Copy
'              .Rows(n).PasteSpecial _
'                  Paste:=xlPasteFormats
'          End With
'
'        'Reposition copied header row
'        Sheet3.Rows(n).Cut
'        Sheet3.Rows(lastRow).Insert shift:=xlDown
    
        'load SQF Array with row number where values will be entered by users
        lowerSQFRow = Rows(m + 1).Row
        ReDim Preserve TrackSQFRowsArray(NumRows)
        TrackSQFRowsArray(Counter) = lowerSQFRow
        
        'call procedure again to RESET the VALUE of lastRow
        Call VerifyLastRow(lastRow, flagOnTailEnd, flagCol, findLastRow)
    
    Next Counter

    SQFSheet.Cells(lastRow, 2).Select

'call routine for turning protect back on
    Call mySQFProtectSheet

End Sub
Sub AddFormulasToLower(ByVal m, ByVal n, ByVal Counter, ByVal SQFSheet)
'*******************************************
'****Add formulas to each LOWER ROW in SQF****
'*******************************************

nullChar = """"""

'declare & assign formulas to variables
    '1. Column B
        Formula1 = "=IF(ISBLANK('RFQ Coversheet'!C" & AddNewRowArray(Counter) & ")," & nullChar & ",'RFQ Coversheet'!C" & AddNewRowArray(Counter) & ")"
        SQFSheet.Cells(m, 2).NumberFormat = "General"
        SQFSheet.Cells(m, 2).Formula = Formula1
    
    '2. Columns C-D
        Formula2 = "='RFQ Coversheet'!D" & AddNewRowArray(Counter) & ""
        SQFSheet.Cells(m, 3).Formula = Formula2
        SQFSheet.Cells(m, 3).Copy
        
        For col = 4 To 4
        SQFSheet.Paste Destination:=SQFSheet.Cells(m, col)
            If col = 4 Then
                Exit For
            End If
        SQFSheet.Cells(m, col).Copy
        Next col
    
    '3. Columns E
        Formula2 = "=IF(ISBLANK('RFQ Coversheet'!H" & AddNewRowArray(Counter) & ")," & nullChar & ",'RFQ Coversheet'!H" & AddNewRowArray(Counter) & ")"
        '='RFQ Coversheet'!G28
        SQFSheet.Cells(m, 5).NumberFormat = "Date"
        SQFSheet.Cells(m, 5).Formula = Formula2
        
End Sub

'Sub AddFormulasToUpper(ByVal m, ByVal n, ByVal Counter, ByVal SQFSheet)
''*******************************************
''****Add formulas to each UPPER ROW in SQF****
''*******************************************
'
'nullChar = """"""
'
''declare & assign formulas to variables
'    '1. Column B
'        Formula1 = "=IF(ISBLANK('RFQ Coversheet'!C" & AddNewRowArray(Counter) & ")," & nullChar & ",'RFQ Coversheet'!C" & AddNewRowArray(Counter) & ")"
'        SQFSheet.Cells(n, 2).NumberFormat = "General"
'        SQFSheet.Cells(n, 2).formula = Formula1
'
'    '2. Columns C
'        Formula2 = "=IF(ISBLANK('RFQ Coversheet'!D" & AddNewRowArray(Counter) & ")," & nullChar & "," & """Estm Vol: """ & "&" & "'RFQ Coversheet'!D" & AddNewRowArray(Counter) & ")"
'        SQFSheet.Cells(n, 3).formula = Formula2
'
'    '3. Columns G - M
'        Formula3 = "='RFQ Coversheet'!H" & AddNewRowArray(Counter) & ""
'        SQFSheet.Cells(n, 7).formula = Formula3
'        SQFSheet.Cells(n, 7).Copy
'
'        For col = 8 To 13
'        SQFSheet.Paste Destination:=SQFSheet.Cells(n, col)
'            If col = 13 Then
'                Exit For
'            End If
'        SQFSheet.Cells(n, col).Copy
'        Next col
'
'    '4. Columns N
'        CheckValueRange = SQFSheet.Cells(n + 2, 14).Row
'        Formula4 = "=IF(ISBLANK('RFQ Coversheet'!C" & AddNewRowArray(Counter) & ")," & nullChar & ",(IF(ISBLANK(N" & CheckValueRange & ")," & """<advise>""" & "," & """""" & ")))"
'        SQFSheet.Cells(n, 14).formula = Formula4
'
'    '5. Column O
'        Formula5 = "=IF(ISBLANK('RFQ Coversheet'!P" & AddNewRowArray(Counter) & ")," & nullChar & ",'RFQ Coversheet'!P" & AddNewRowArray(Counter) & ")"
'        SQFSheet.Cells(n, 15).formula = Formula5
'
'    '6. Column P
'        Formula6 = "=IF(ISBLANK('RFQ Coversheet'!O" & AddNewRowArray(Counter) & ")," & nullChar & ",'RFQ Coversheet'!O" & AddNewRowArray(Counter) & ")"
'        SQFSheet.Cells(n, 16).formula = Formula6
'
'    '7. Columns Q - T
'        CheckValueRange = SQFSheet.Cells(n + 2, 17).Row
'        Formula7 = "=IF(ISBLANK('RFQ Coversheet'!$C$" & AddNewRowArray(Counter) & ")," & nullChar & ",(IF(ISBLANK(Q" & CheckValueRange & ")," & """<advise>""" & "," & """""" & ")))"
'        SQFSheet.Cells(n, 17).formula = Formula7
'        SQFSheet.Cells(n, 17).Copy
'
'        For col = 18 To 20
'        SQFSheet.Paste Destination:=SQFSheet.Cells(n, col)
'            If col = 20 Then
'                Exit For
'            End If
'        SQFSheet.Cells(n, col).Copy
'        Next col
'
'    '8. Column U
'        Formula8 = "=IF(ISBLANK('RFQ Coversheet'!Q" & AddNewRowArray(Counter) & ")," & nullChar & ",'RFQ Coversheet'!Q" & AddNewRowArray(Counter) & ")"
'        SQFSheet.Cells(n, 21).formula = Formula8
'
'    '9. Column V
'        Formula9 = "=IF(OR(ISBLANK('RFQ Coversheet'!$C" & AddNewRowArray(Counter) & "),ISBLANK('DO NOT DELETE'!J$6))," & nullChar & ",'DO NOT DELETE'!J$6)"
'        SQFSheet.Cells(n, 22).NumberFormat = "General"
'        SQFSheet.Cells(n, 22).formula = Formula9
'
'    '10. Column W
'        Formula10 = "=IF(OR(ISBLANK('RFQ Coversheet'!$C" & AddNewRowArray(Counter) & "),ISBLANK('DO NOT DELETE'!J$10))," & nullChar & ",'DO NOT DELETE'!J$10)"
'        SQFSheet.Cells(n, 23).NumberFormat = "General"
'        SQFSheet.Cells(n, 23).formula = Formula10
'
'    '11. Columns Y - AE
'        CheckValueRange = SQFSheet.Cells(n + 2, 25).Row
'        Formula11 = "=PRODUCT(F$" & n & ",IF(ISBLANK($F$" & CheckValueRange & "),0,$f" & CheckValueRange & "))"
'        '=F22*IF(ISBLANK($F23),0,$F23)
'        SQFSheet.Cells(n, 25).formula = Formula11
'        SQFSheet.Cells(n, 25).Copy
'
'        For col = 26 To 31
'        SQFSheet.Paste Destination:=SQFSheet.Cells(n, col)
'            If col = 31 Then
'                Exit For
'            End If
'        SQFSheet.Cells(n, col).Copy
'        Next col
'
'End Sub

Sub mySQFProtectSheet()
    Dim strPW As String
    
    strPW = "xxxx"
    'SQFSheet.Protect AllowInsertingRows:=True, AllowDeletingRows:=True

    With ActiveSheet
        .EnableSelection = xlUnlockedCells
        .Protect Password:=strPW, Contents:=True
    End With
    
End Sub

'Sub AddLineItemsToDQA()     'DELPHI QUOTE ANALYSIS FORM
''------------------------------------------------------------------
''Macro to insert new rows into the DQA Sheet
''------------------------------------------------------------------
'
''declare DQA variables
'    Dim findLastRow As Integer
'    Dim flagOnTailEnd As String
'    Dim flagCol As Integer
'    Dim Counter As Integer
'    Dim m As Integer
'    Dim n As Integer
'    Dim PasteSpecialMethod As Variant
'    Dim DQASheet As Worksheet
'
''initialize variables to find last part line item (row)
'    findLastRow = 21
'    flagOnTailEnd = "EndRow3"
'    flagCol = 4
'    PasteSpecialMethod = xlPasteFormats
'    DQARoutineFlag = "On"
'
''declare & initialize objects
'    Set DQASheet = ActiveWorkbook.Worksheets("Delphi Quote Analysis")
'    DQASheet.Activate
'    DQASheet.Unprotect ("xxxx")    'Call to unprotect sheet
'
''call procedure to identify the last part line item
'    Call VerifyLastRow(lastRow, flagOnTailEnd, flagCol, findLastRow)
'
''Add number of rows specified
'    Call InsertSpecifiedRows(lastRow, m, n, PasteSpecialMethod, DQASheet, TFCSheet)
'
'Application.SendKeys ("{ESC}")
'
''reset DQARoutineFlag
'    DQARoutineFlag = "Off"
'
'End Sub
'
'Sub AddFormulasToDQA(m, n, Counter, lastRow, ByVal DQASheet)
''*******************************************
''****Add formulas to each new row in DQA****
''*******************************************
'
''declare & assign formulas to variables
'    '1. Column D
'    DQASheet.Cells(n, 4).Copy
'    DQASheet.Paste Destination:=DQASheet.Cells(m, 4)
'
'    '2. Column E - K
'    Formula2 = "='RFQ Coversheet'!H" & AddNewRowArray(Counter) & "*" & "'Supplier Quotation Form'!G" & TrackSQFRowsArray(Counter) & ""
'    DQASheet.Cells(m, 5).formula = Formula2
'    DQASheet.Cells(m, 5).Copy
'
'    For col = 6 To 11
'        DQASheet.Paste Destination:=DQASheet.Cells(m, col)
'        If col = 11 Then
'            Exit For
'        End If
'        DQASheet.Cells(m, col).Copy
'    Next col
'
'    '3. Column L
'    Formula3 = "='Supplier Quotation Form'!Q" & TrackSQFRowsArray(Counter) & ""
'    DQASheet.Cells(m, 12).formula = Formula3
'
'    '4. Column M
'    DQASheet.Cells(n, 13).Copy
'    DQASheet.Paste Destination:=DQASheet.Cells(m, 13)
'
'    '5. Column N
'    nullChar = """"""
'    Formula4 = "=IF(ISERROR('Supplier Quotation Form'!R" & TrackSQFRowsArray(Counter) & "/MAX('RFQ Coversheet'!H" & AddNewRowArray(Counter) & ":N" & AddNewRowArray(Counter) & "))," & nullChar & ",IF(AND(ISNUMBER('Supplier Quotation Form'!R" & TrackSQFRowsArray(Counter) & "),MAX('RFQ Coversheet'!H" & AddNewRowArray(Counter) & ":N" & AddNewRowArray(Counter) & ")>0),'Supplier Quotation Form'!R" & TrackSQFRowsArray(Counter) & "/MAX('RFQ Coversheet'!H" & AddNewRowArray(Counter) & ":N" & AddNewRowArray(Counter) & ")," & nullChar & "))"
'    DQASheet.Cells(m, 14).formula = Formula4
'
'    '6. Column P
'    nullChar = """"""
'    Formula5 = "=IF(OR(ISBLANK('RFQ Coversheet'!C" & AddNewRowArray(Counter) & "),ISBLANK('RFQ Coversheet'!O" & AddNewRowArray(Counter) & "))," & nullChar & ",('RFQ Coversheet'!O" & AddNewRowArray(Counter) & "-IF(O" & m & "=" & nullChar & ",TODAY()+7*'Supplier Quotation Form'!$P" & TrackSQFRowsArray(Counter) & ",O" & m & "+7*'Supplier Quotation Form'!$P" & TrackSQFRowsArray(Counter) & ")))"
'    DQASheet.Cells(m, 16).formula = Formula5
'
'    '7. Column R
'    nullChar = """"""
'    Formula6 = "=IF(OR(ISBLANK('RFQ Coversheet'!C" & AddNewRowArray(Counter) & "),ISBLANK('RFQ Coversheet'!Q" & AddNewRowArray(Counter) & "))," & nullChar & ",('RFQ Coversheet'!Q" & AddNewRowArray(Counter) & "-IF(Q" & m & "=" & nullChar & ",TODAY()+7*'Supplier Quotation Form'!$U" & TrackSQFRowsArray(Counter) & ",Q" & m & "+7*'Supplier Quotation Form'!$U" & TrackSQFRowsArray(Counter) & ")))"
'    DQASheet.Cells(m, 18).formula = Formula6
'
'    '8. Column S
'    Formula7 = "=IF(OR(ISBLANK('RFQ Coversheet'!C" & AddNewRowArray(Counter) & "), ('DO NOT DELETE'!J$6 = " & nullChar & "))," & nullChar & ",('DO NOT DELETE'!J$6-IF(Q" & m & "=" & nullChar & ",TODAY()+7*('Supplier Quotation Form'!$U" & TrackSQFRowsArray(Counter) & "+'Supplier Quotation Form'!V" & TrackSQFRowsArray(Counter) & "),Q" & m & "+7*('Supplier Quotation Form'!$U" & TrackSQFRowsArray(Counter) & "+'Supplier Quotation Form'!V" & TrackSQFRowsArray(Counter) & "))))"
'    DQASheet.Cells(m, 19).formula = Formula7
'
'    '9. Column T
'    Formula8 = "=IF(OR(ISBLANK('RFQ Coversheet'!C" & AddNewRowArray(Counter) & "), ('DO NOT DELETE'!J$10 = " & nullChar & "))," & nullChar & ",('DO NOT DELETE'!J$10-IF(Q" & m & "=" & nullChar & ",TODAY()+7*('Supplier Quotation Form'!$U" & TrackSQFRowsArray(Counter) & "+'Supplier Quotation Form'!V" & TrackSQFRowsArray(Counter) & "+ 'Supplier Quotation Form'!W" & TrackSQFRowsArray(Counter) & "),Q" & m & "+7*(('Supplier Quotation Form'!$U" & TrackSQFRowsArray(Counter) & "+'Supplier Quotation Form'!V" & TrackSQFRowsArray(Counter) & "+ 'Supplier Quotation Form'!W" & TrackSQFRowsArray(Counter) & ")))))"
'    DQASheet.Cells(m, 20).formula = Formula8
'
'    '10. Column W
'    y = AddNewRowArray(Counter) - 1
'    Formula9 = "=NPV(11.4%,'Supplier Quotation Form'!Y" & y & ":" & "AD" & y & ")+L" & m & ""
'    DQASheet.Cells(m, 23).formula = Formula9
'
'
''**********************************************************
''****** Update formulas in DQA Totals (summary) row *******
''**********************************************************
'
''declare DQA summary variables
'    Dim tStart As Integer
'    Dim tEnd As Integer
'    Dim tRow As Integer
'
''initialize DQA summary variables
'    tStart = 21
'    tEnd = lastRow - 1
'    tRow = lastRow + 1
'
''add formulas to DQA summary row
'    Formula10 = "=SUM(E" & tStart & ":E" & tEnd & ")"
'    DQASheet.Cells(tRow, 5).formula = Formula10
'    DQASheet.Cells(tRow, 5).Copy
'
'    For col = 6 To 14
'    DQASheet.Paste Destination:=DQASheet.Cells(tRow, col)
'        If col = 14 Then
'            Exit For
'        End If
'    DQASheet.Cells(tRow, col).Copy
'    Next col
'
'    DQASheet.Cells(tRow, 12).Font.Bold = True
'    DQASheet.Cells(tRow, 13).Font.Bold = True
'    DQASheet.Cells(tRow, 14).Font.Bold = True
'
'    Formula11 = "=SUM(W" & tStart & ":W" & tEnd & ")-M" & tRow & ""
'    DQASheet.Cells(tRow + 2, 13).formula = Formula11
'
'End Sub
'
'Sub AddRowsAndFormulasToDQA_TR()
''********************************************************************
''****Add formulas to each new row in DQA Technical Review section****
''********************************************************************
'
''declare DQA_TR variables
'    Dim lastRow As Integer
'    Dim findLastRow As Integer
'    Dim m As Integer
'    Dim n As Integer
'    Dim flagOnTailEnd As String
'    Dim flagCol As Integer
'    Dim PasteSpecialMethod As Variant
'
''initialize variables to find last part line item (row)
'    findLastRow = 40
'    flagOnTailEnd = "last_tr"
'    flagCol = 4
'    PasteSpecialMethod = xlPasteAll
'    'DQARoutineFlag = "Off"
'
''declare & initialize objects
'    Set DQASheet = ActiveWorkbook.Worksheets("Delphi Quote Analysis")
'    DQASheet.Activate
'   ' DQASheet.Unprotect ("xxxx")    'Call to unprotect sheet, handled in main DQA Sub
'
''call procedure to identify the last part line item
'    Call VerifyLastRow(lastRow, flagOnTailEnd, flagCol, findLastRow)
'
''Add number of rows specified
'    Call InsertSpecifiedRows(lastRow, m, n, PasteSpecialMethod, DQASheet, TFCSheet)
'
''reset DQARoutineFlag
'   ' DQARoutineFlag = "On"
'
'DQASheet.Cells(findLastRow, 3).Select
'
''call routine for turning protect back on
'    Call myQuoteAnalysisProtectSheet            'Call to routine for turning protect back on
'
'End Sub
'
'Sub myQuoteAnalysisProtectSheet()
'    Dim strPW As String
'    strPW = "xxxx"
'    'DQASheet.Protect AllowInsertingRows:=True
'
'    With ActiveSheet
'        .EnableSelection = xlNoRestrictions
'        .Protect Password:=strPW, Contents:=True
'    End With
'End Sub
'----------------------------------------------------------------------------------------------------

Sub AddLineItemsToTFC()          'Team Feasibility COMMITMENT FORM
'------------------------------------------------------------------
'Macro to insert new rows into the TFC Sheet
'------------------------------------------------------------------

'declare TFC variables
    Dim lastRow As Integer
    Dim findLastRow As Integer
    Dim m As Integer
    Dim n As Integer
    Dim flagOnTailEnd As String
    Dim flagCol As Integer
    Dim PasteSpecialMethod As Variant
    Dim TFCSheet As Worksheet

'initialize variables to find last part line item (row)
    findLastRow = 16
    flagOnTailEnd = "endTFC"
    flagCol = 1
    PasteSpecialMethod = xlPasteFormats
    TFCRoutineFlag = "On"
    
'declare & initialize object
    Set TFCSheet = ActiveWorkbook.Worksheets("Team Feasibility")
    TFCSheet.Activate
    TFCSheet.Unprotect ("xxxx")    'Call to unprotect sheet

'call procedure to identify the last part line item
    Call VerifyLastRow(lastRow, flagOnTailEnd, flagCol, findLastRow)

'Add number of rows specified
    Call InsertSpecifiedRows(lastRow, m, n, PasteSpecialMethod, TFCSheet)

'Add summary totals to summary row
    Call AddSummaryRowTotalsToTFC(lastRow, ByVal TFCSheet)

Application.SendKeys ("{ESC}")
    
'reset DQARoutineFlag
    TFCRoutineFlag = "Off"
      
End Sub
Sub AddFormulasToTFC(m, n, Counter, lastRow, ByVal TFCSheet)
'*******************************************
'****Add formulas to each new row in TFC****
'*******************************************

'Add formulas to each row added by user
     '1. Columns B
         TFCSheet.Cells(n, 2).Copy
         TFCSheet.Paste Destination:=TFCSheet.Cells(m, 2)      'paste formula from above to new row
    
     '2. Columns C
         TFCSheet.Cells(n, 3).Copy
         TFCSheet.Paste Destination:=TFCSheet.Cells(m, 3)      'paste formula from above to new row
         
     '3  Column D
         TFCSheet.Cells(n, 4).Copy
         TFCSheet.Paste Destination:=TFCSheet.Cells(m, 4)      'paste formula from above to new row
         
     '4  Column E
         TFCSheet.Cells(n, 5).Copy
         TFCSheet.Paste Destination:=TFCSheet.Cells(m, 5)      'paste formula from above to new row
     
     
     '4. Column T
         TFCSheet.Cells(n, 20).Copy
         TFCSheet.Paste Destination:=TFCSheet.Cells(m, 20)     'paste formula from above to new row
         
     '5. Column X
         TFCSheet.Cells(n, 24).Copy
         TFCSheet.Paste Destination:=TFCSheet.Cells(m, 24)     'paste formula from above to new row
         
     '6. Column AA
         TFCSheet.Cells(n, 27).Copy
         TFCSheet.Paste Destination:=TFCSheet.Cells(m, 27)     'paste formula from above to new row
End Sub
Sub AddSummaryRowTotalsToTFC(lastRow, ByVal TFCSheet)
'***************************************************
'***** Update formulas in TFC Totals (summary) row *****
'***************************************************
    
    'declare TFC summary row variables
    Dim col As Integer
    Dim fStart As Integer
    Dim fEnd As Integer
    Dim fChar As String
    Dim lChar As String
    Dim xChar As String
    
    'initialize summary row variables
    fStart = 16
    fEnd = lastRow - 1
    fChar = """=N"""
    lChar = """>0"""
    xChar = """=X"""
    
    'assign formulas in TFC summary row
    Formula10 = "=COUNTIF(F" & fStart & ":F" & fEnd & ", " & fChar & ")"
    TFCSheet.Cells(lastRow, 6).Formula = Formula10
    TFCSheet.Cells(lastRow, 6).Copy
    
    For col = 7 To 19
        TFCSheet.Paste Destination:=TFCSheet.Cells(lastRow, col)
        If col = 19 Then
            Exit For
        End If
        TFCSheet.Cells(lastRow, col).Copy
        'MsgBox TFCSheet.Cells(tRow, col).Formula10
    Next col

    Formula11 = "=SUMIF(T" & fStart & ":T" & fEnd & ", " & lChar & ")"
    TFCSheet.Cells(lastRow, 20).Formula = Formula11
    
    Formula12 = "=COUNTIF(U" & fStart & ":U" & fEnd & ", " & xChar & ")"
    TFCSheet.Cells(lastRow, 21).Formula = Formula12
    TFCSheet.Cells(lastRow, 21).Copy
    
    For col = 22 To 23
        TFCSheet.Paste Destination:=TFCSheet.Cells(lastRow, col)
        If col = 23 Then
            Exit For
        End If
        TFCSheet.Cells(lastRow, col).Copy
    Next col

TFCSheet.Cells(lastRow, 2).Select

'call routine for turning protect back on
    Call myTFC_Protect             'Call to routine for turning protect back on

End Sub
Sub myTFC_Protect()
    Dim strPW As String
    
    strPW = "xxxx"
    'TFCSheet.Protect AllowInsertingRows:=True, AllowDeletingRows:=True

    With ActiveSheet
        .EnableSelection = xlNoRestrictions
        .Protect Password:=strPW, Contents:=True
    End With
    
End Sub

Sub AddLineItemsToQA()          'Team Feasibility Remarks FORM
'------------------------------------------------------------------
'Macro to insert new rows into the QA Sheet
'------------------------------------------------------------------

'declare QA variables
    Dim lastRow As Integer
    Dim findLastRow As Integer
    Dim m As Integer
    Dim n As Integer
    Dim flagOnTailEnd As String
    Dim flagCol As Integer
    Dim PasteSpecialMethod As Variant
    Dim QASheet As Worksheet

'initialize variables to find last part line item (row)
    findLastRow = 9
    flagOnTailEnd = "endQA"
    flagCol = 2
    PasteSpecialMethod = xlPasteAll
    
'declare and initialize object
    Set QASheet = ActiveWorkbook.Worksheets("Team Feasibility Remarks")
    QASheet.Activate
    QASheet.Unprotect ("xxxx")    'Call to unprotect sheet

'call procedure to identify the last part line item
    Call VerifyLastRow(lastRow, flagOnTailEnd, flagCol, findLastRow)

'Add number of rows specified
    Call InsertSpecifiedRows(lastRow, m, n, PasteSpecialMethod, TFCSheet)

Application.GoTo Reference:=Worksheets("Team Feasibility Remarks").Range("b9")
QASheet.Cells(findLastRow, 2).Select

'call routine for turning protect back on
    Call myQA_Protect           'Call to routine for turning protect back on

End Sub

Sub myQA_Protect()
    Dim strPW As String
    
    strPW = "xxxx"
    'QASheet.Protect AllowInsertingRows:=True, AllowDeletingRows:=True

    With ActiveSheet
        .EnableSelection = xlUnlockedCells
        .Protect Password:=strPW, Contents:=True
    End With
    
End Sub

Sub VerifyLastRow(lastRow, ByVal flagOnTailEnd, ByVal flagCol, ByVal findLastRow)
'subroutine to verify the last row of part information in active sheet

Dim lastRowVal As String
Dim rowCount As Integer

rowCount = 0
    Do Until lastRowVal = flagOnTailEnd
        lastRowVal = ActiveSheet.Cells(findLastRow, flagCol).Value
        If lastRowVal = flagOnTailEnd Then GoTo EndMyLoop
        findLastRow = findLastRow + 1
        rowCount = rowCount + 1
    Loop
EndMyLoop:
    lastRow = findLastRow
End Sub

Sub InsertSpecifiedRows(lastRow, m, n, PasteSpecialMethod, TFCSheet)
'subroutine to insert the specific number of rows indicated by user into the active sheet

Dim Counter As Integer

For Counter = 1 To NumRows
    Rows(lastRow).Select
    Selection.Insert Shift:=xlUp
    lastRow = lastRow + 1
    m = lastRow - 1
    n = lastRow - 2
    Rows(n).Copy
    Rows(m).PasteSpecial _
      Paste:=PasteSpecialMethod
      
'    If DQARoutineFlag = "On" Then
'        Call AddFormulasToDQA(m, n, Counter, lastRow, DQASheet)
'    End If
    
    If TFCRoutineFlag = "On" Then
        Call AddFormulasToTFC(m, n, Counter, lastRow, TFCSheet)
    End If
Next Counter

End Sub

Attribute VB_Name = "Module8"
Sub Recommended_Packaging()
Attribute Recommended_Packaging.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Recommended_Packaging Macro
'

'
    Range("B14").Value = False
    Range("C12").Select
End Sub
Sub Alternate_Packaging()
'
' Recommended_Packaging Macro
'

'
    Range("B12").Value = False
    Range("C14").Select
End Sub

Attribute VB_Name = "Module9"
Sub Unprotect()
Attribute Unprotect.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Unprotect Macro
'
ActiveSheet.Unprotect "xxxx"
'
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Activate()
Dim xWB As Workbook, xWS1 As Worksheet
    Set xWB = ThisWorkbook
    Set xWS1 = xWB.Sheets("Team Feasibility")
    Application.ScreenUpdating = False
    xWS1.Unprotect Password:="xxxx"
    xWS1.Protect Password:="xxxx", Contents:=True
    Application.ScreenUpdating = True
    Range("J4").Select
End Sub

Private Sub myNewLogic(ByVal Target As Range)
' new logic -- Range

Dim checkValue1 As Integer
Dim checkValue2 As Integer
Dim msg1 As String
Dim msg2 As String
Dim displayText1 As String
Dim displayText2 As String

msg1 = "- If sub-tier suppliers contribute more the 50% of manufacturing or control a key process, list them including their duns code and/or address within the Comments of the Team Feasibility Remarks Form"
msg2 = "- Go to Team Feasibility Remarks tab and clearly note reason(s) for all exceptions"
msg3 = ""

'--------------------
findlast = 16
rowCount = 0
Do
    lastval = ActiveSheet.Cells(findlast, 1).Value
    If lastval <> "endTFC" Then
    findlast = findlast + 1
    rowCount = rowCount + 1
    End If
Loop Until lastval = "endTFC"
'--------------------
myLast = findlast - 1
'MsgBox (myLast)

'Turn off calculation and screenupdating to speed up the macro
    With Application
        .Calculation = xlCalculationManual
        .ScreenUpdating = False
        .EnableEvents = False
    End With
      
If ((Target.Row >= 16) And (Target.Row <= myLast) And ((Target.Column = 6) Or (Target.Column = 7) Or (Target.Column = 8) Or (Target.Column = 9) Or (Target.Column = 10) Or (Target.Column = 11) Or (Target.Column = 12) Or (Target.Column = 13) Or (Target.Column = 14) Or (Target.Column = 15) Or (Target.Column = 16) Or (Target.Column = 17) Or (Target.Column = 18) Or (Target.Column = 19))) Then

    checkValue1 = Sheet1.Range("SubTierIssues").Value
    checkValue2 = Sheet1.Range("Exceptions").Value
     
  'MsgBox (checkValue1)
  'MsgBox (checkValue2)
       
   Worksheets("Team Feasibility").Unprotect ("xxxx")    'Call to unprotect sheet
   
    If checkValue1 > 0 Then
        Sheet1.Range("msg1_placement").Value = msg1
                
    ElseIf checkValue1 = 0 Then
        Sheet1.Range("msg1_placement").Value = msg3
    End If
    
    If checkValue2 > 0 Then
        Sheet1.Range("msg2_placement").Value = msg2
        
    ElseIf checkValue2 = 0 Then
        Sheet1.Range("msg2_placement").Value = msg3
    End If

End If

'Turn on calculation and screenupdating to speed up the macro
    With Application
        .Calculation = xlCalculationAutomatic
        .ScreenUpdating = True
        .EnableEvents = True
    End With

End Sub

'Code to update Feasiblity Conclusion real-time
Private Sub Worksheet_Change(ByVal Target As Range)

Call myNewLogic(Target)
Call verifyTotalLnItems(rowCount)

Dim tRow As Integer
Dim checkPart As String

 If ((Target.Row = 9) And (Target.Column = 21)) Then
   Dim Op As String
    Op = Range("Feasibility_Statement").Value
       
    If Op = "YES: FEASIBLE" Then
     
        tRow = 0
        For tRow = 1 To rowCount
            checkPart = Sheet2.Cells(18 + tRow, 3).Value
            If Trim(checkPart) <> "" Then
                Sheet1.Cells(15 + tRow, 21).Value = "X"
            Else
            Worksheets("Team Feasibility").Unprotect ("xxxx")    'Call to unprotect sheet
                With Sheet1
                 .Cells(15 + tRow, 21).ClearContents
                End With
            Call myTFC_Protect
            End If
        Next tRow
    Else
        tRow = 0
        For tRow = 1 To rowCount
            checkPart = Sheet2.Cells(18 + tRow, 3).Value
            If Trim(checkPart) <> "" Then
            Worksheets("Team Feasibility").Unprotect ("xxxx")    'Call to unprotect sheet
                With Sheet1
                    .Cells(15 + tRow, 21).ClearContents
                End With
            Call myTFC_Protect
            End If
        Next tRow
    
    End If
    
 End If
  Call myTFC_Protect
End Sub

Sub verifyTotalLnItems(rowCount)
cntRows = 16
rowCount = 0
'Worksheets("RFQ Coversheet").Activate
Do
    rowVal = Sheet1.Cells(cntRows, 1).Value
    If rowVal <> "endTFC" Then
    cntRows = cntRows + 1
    rowCount = rowCount + 1
    End If
Loop Until rowVal = "endTFC"

'MsgBox (rowCount)
End Sub

Sub myTFC_Protect()
    With Worksheets("Team Feasibility")
      .EnableSelection = xlNoRestrictions
       .Protect Password:="xxxx", Contents:=True
    End With
End Sub
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim xWB As Workbook, xWS1 As Worksheet
    Set xWB = ThisWorkbook
    Set xWS1 = xWB.Sheets("Supplier Alternate Packaging")
    Application.ScreenUpdating = False
    xWS1.Unprotect Password:="xxxx"
    xWS1.Protect Password:="xxxx", Contents:=True
    Application.ScreenUpdating = True
    Range("C15").Select
End Sub


Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
'Logic to display Alert re: forms to be completed
Dim xWB As Workbook, xWS1 As Worksheet, xWS2 As Worksheet, displayText As String
Const beginText As String = "Valid quotations must include: "
Const listItemA As String = "Supplier Quotation Form"
Const listItemB As String = "Cost Breakdown Form"
Const listItemC As String = "Team Feasibility"
Const listItemD As String = "Either Delphi Provided or Supplier Alternate Packaging"
    Set xWB = ThisWorkbook
    Set xWS1 = xWB.Sheets("RFQ Coversheet")
    Set xWS2 = xWB.Sheets("Instructions")
    Application.ScreenUpdating = False
    xWS1.Unprotect Password:="xxxx"
    displayText = ""
    If xWS2.Range("G16").Value = True Then displayText = displayText & " * " & listItemA
    If xWS2.Range("G18").Value = True Then displayText = displayText & " * " & listItemB
    If xWS2.Range("G20").Value = True Then displayText = displayText & " * " & listItemC
    If xWS2.Range("G22").Value = True Then displayText = displayText & " * " & listItemD
    If Len(displayText) > 1 Then displayText = beginText & displayText
    xWS1.Range("G13").Value = displayText
    xWS1.Protect Password:="xxxx", Contents:=True
    Application.ScreenUpdating = True
    Range("H19").Select
End Sub





Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Activate()
Dim xWB As Workbook, xWS1 As Worksheet, xWS2 As Worksheet, displayText As String
Const beginText As String = "Valid quotations must include: "
Const listItemA As String = "Supplier Quotation Form"
Const listItemB As String = "Cost Breakdown Form"
Const listItemC As String = "Team Feasibility"
Const listItemD As String = "Either Delphi Provided or Supplier Alternate Packaging"
    Set xWB = ThisWorkbook
    Set xWS1 = xWB.Sheets("Supplier Quotation Form")
    Set xWS2 = xWB.Sheets("Instructions")
    Application.ScreenUpdating = False
    xWS1.Unprotect Password:="xxxx"
    displayText = ""
    If xWS2.Range("G16").Value = True Then displayText = displayText & " * " & listItemA
    If xWS2.Range("G18").Value = True Then displayText = displayText & " * " & listItemB
    If xWS2.Range("G20").Value = True Then displayText = displayText & " * " & listItemC
    If xWS2.Range("G22").Value = True Then displayText = displayText & " * " & listItemD
    If Len(displayText) > 10 Then displayText = beginText & displayText
    xWS1.Range("D10").Value = displayText
    xWS1.Protect Password:="xxxx", Contents:=True
    Application.ScreenUpdating = True
    Range("D12").Select
End Sub

Sub mySQFAutoFit()
'Sub routine to automatically adjust text to fit rows

'turn off SQF sheet protection
Worksheets("Supplier Quotation Form").Unprotect ("xxxx")    'Call to unprotect sheet

'declare variables
    Dim lastRow As Integer
    Dim findLastRow As Integer
    Dim flagOnTailEnd As String
    Dim flagCol As Integer
    Dim Counter As Integer

'initialize variables to find last part line item (row)
    findLastRow = 22
    flagOnTailEnd = "EndRow2"
    flagCol = 2

'call procedure to identify the last part line item
    Call Module7.VerifyLastRow(lastRow, flagOnTailEnd, flagCol, findLastRow)

'Turn off calculation and screenupdating to speed up the macro
    With Application
      .Calculation = xlCalculationManual
      .ScreenUpdating = False
    
    'Autofit SQF rows
    For Counter = findLastRow To lastRow
        Worksheets("Supplier Quotation Form").Cells(Counter, 3).Rows.AutoFit
        Worksheets("Supplier Quotation Form").Cells(Counter, 5).Rows.AutoFit
    Next Counter
    
    'Turn back on - calculation and screenupdating
      .Calculation = xlCalculationAutomatic
      .ScreenUpdating = True
End With

'Call routine for turning SQF protection back on
    Call mySQFProtectSheet

End Sub

Sub mySQFProtectSheet()
    Dim strPW As String
    strPW = "xxxx"
    'ActiveSheet.Protect AllowInsertingRows:=True, AllowFormattingRows:=True

    With Worksheets("Supplier Quotation Form")
      .EnableSelection = xlUnlockedCells
       .Protect Password:=strPW, Contents:=True
    End With
    
End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim xWB As Workbook, xWS1 As Worksheet
    Set xWB = ThisWorkbook
    Set xWS1 = xWB.Sheets("Team Feasibility Remarks")
    Application.ScreenUpdating = False
    xWS1.Unprotect Password:="xxxx"
    xWS1.Protect Password:="xxxx", Contents:=True
    Application.ScreenUpdating = True
    Range("D9").Select
End Sub

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()    'COST BREAKDOWN SHT - INITIALIZE FIELDS
'
' Modified macro 6/1/2009 to replace all references to 'Worksheets("Cost Breakdown Form")'
'   with 'ActiveSheet' in order to accommodate new CBF sheets generated with unique suffixes (counter)
'   Also modified fields (order and formatting) in Pre-Production Piece Cost section

On Error GoTo ErrHandler:

    ActiveSheet.Unprotect ("xxxx")    'Call to unprotect sheet
    
    '---------------------------------------------
    'Initialize Cost Breakdown sheet supplier info
    '---------------------------------------------
    Dim SupplierNm As String
    Dim Mduns As String
    Dim SFduns As String
    Dim fDate As String
    Dim SupplierCur As String
    
    SupplierNm = Worksheets("Supplier Quotation Form").Cells(12, 4).Value
    Mduns = Worksheets("Supplier Quotation Form").Cells(13, 4).Value
    SFduns = Worksheets("Supplier Quotation Form").Cells(13, 13).Value
    fDate = Worksheets("DO NOT DELETE").Cells(22, 10).Value
    SupplierCur = Worksheets("DO NOT DELETE").Cells(19, 10).Value
    
    'Copy info from Supplier Quote form to each CBF header
    Cells(1, 13).Value = SupplierNm
    Cells(1, 5).Value = fDate
    Cells(4, 13).Value = SupplierCur
        
    If Trim(Mduns) <> "" Then
        Cells(3, 13).Value = Mduns
    Else
        Cells(3, 13).Value = SFduns
    End If
    
    '------------------------------------------------
    'Declare Cost Breakdown sheet part information
    '------------------------------------------------
    Dim fPart As String
    Dim fPartDesc As String
    Dim fPartRev As String
    Dim fRfqNum As String
    Dim fPrepBy As String
    'declare & initialize variables to find MQV
    Dim col As Integer
    Dim checkRow As Long
    Dim Max As Long
    Max = 0
    'declare & initialize variables to verify CBF sheet name
    Dim SplitCatcher As Variant
    Dim myInt As Integer
    hRow = 18
    thisSheetName = ActiveSheet.Name
    
    'Determine CBF sheet name and initialize RFQ Coversheet variables
    If thisSheetName = "Cost Breakdown Form" Then
        fPart = Worksheets("RFQ Coversheet").Cells(19, 3).Value
        fPartDesc = Worksheets("RFQ Coversheet").Cells(19, 4).Value
        fPartRev = Worksheets("RFQ Coversheet").Cells(19, 5).Value
        '---------------------------------------
        'Find Max Quoted Volume
        '---------------------------------------
        For col = 8 To 14
            checkRow = CLng(Worksheets("RFQ Coversheet").Cells(19, col).Value)
          
            If Max < checkRow Then
            Max = checkRow
            End If
        Next col
        Cells(1, 26).Value = Max
    Else
        SplitCatcher = Split(thisSheetName, " ")
        myInt = CInt(Mid(SplitCatcher(3), 2, 1)) 'convert to integer data type
        fPart = Worksheets("RFQ Coversheet").Cells(hRow + myInt, 3).Value
        fPartDesc = Worksheets("RFQ Coversheet").Cells(hRow + myInt, 4).Value
        fPartRev = Worksheets("RFQ Coversheet").Cells(hRow + myInt, 5).Value
        '---------------------------------------
        'Find Max Quoted Volume
        '---------------------------------------
        For col = 8 To 14
            checkRow = CLng(Worksheets("RFQ Coversheet").Cells(hRow + myInt, col).Value)
          
            If Max < checkRow Then
            Max = checkRow
            End If
        Next col
        Cells(1, 26).Value = Max
    End If
    
    'initialize remaining header-level variables
    fRfqNum = Worksheets("RFQ Coversheet").Cells(10, 4).Value
    fPrepBy = Worksheets("DO NOT DELETE").Cells(23, 10).Value
    
    '-----------------------------------------
    'Copy part info from RFQ Coversheet to CBF
    '-----------------------------------------
'    Cells(2, 5).Value = fPart
'    Cells(3, 5).Value = fPartDesc
'    Cells(4, 5).Value = fPartRev
'    Cells(5, 5).Value = fRfqNum
'    Cells(5, 26).Value = fPrepBy

'************************************************
'Refresh currency symbols throughout worksheet
'************************************************
Dim SCur As String
Dim tRows As Integer
Dim checkval As String

'If ((Target.Row = 4) And (Target.Column = 13)) Then
'   SCur = Cells(4, 13).Value

checkval = Cells(4, 13).Value

Select Case checkval
    Case "USD"
        SCur = "$ Dollar"
    Case "EUR"
        SCur = "|fffd| Euro"
    Case "GBP"
        SCur = "|fffd| Pound"
    Case "EGP"
        SCur = "|fffd| Pound"
    Case "JPY"
        SCur = "|fffd| Yen"
    Case "CNY"
        SCur = "|fffd| Renminbi"
    Case Else
        SCur = "null"
End Select


If Trim(SCur) <> "" Then
  
    'Find last row - RAW MATERIAL AND PURCHASED COMPONENTS
    findlast = 12
    Do
        lastval = ActiveSheet.Cells(findlast, 2).Value
        If lastval <> "End1" Then
        findlast = findlast + 1
        End If
    Loop Until lastval = "End1"
    'MsgBox (findLast)
    
    '----------------------------------------------
    'Format - RAW MATERIAL AND PURCHASED COMPONENTS
    '----------------------------------------------
    For tRows = 12 To findlast - 1
    'MsgBox (SCur)
        Select Case SCur
            Case "$ Dollar"
                ActiveSheet.Cells(tRows, 21).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Cells(tRows, 25).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Cells(tRows, 28).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
            Case "|fffd| Euro"
                ActiveSheet.Cells(tRows, 21).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(tRows, 25).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(tRows, 28).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
            Case "|fffd| Pound"
                ActiveSheet.Cells(tRows, 21).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(tRows, 25).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(tRows, 28).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
            Case "|fffd| Yen"
                ActiveSheet.Cells(tRows, 21).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(tRows, 25).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(tRows, 28).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
            Case "|fffd| Renminbi"
                ActiveSheet.Cells(tRows, 21).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(tRows, 25).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(tRows, 28).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
            Case Else
                ActiveSheet.Cells(tRows, 21).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
                ActiveSheet.Cells(tRows, 25).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
                ActiveSheet.Cells(tRows, 28).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
        End Select
    Next tRows
         
    'Format - Footer for RAW MATERIAL AND PURCHASED COMPONENTS
         Select Case SCur
            Case "$ Dollar"
                ActiveSheet.Range("TtlMatl").NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
            Case "|fffd| Euro"
                ActiveSheet.Range("TtlMatl").NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
            Case "|fffd| Pound"
                ActiveSheet.Range("TtlMatl").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
            Case "|fffd| Yen"
                ActiveSheet.Range("TtlMatl").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
            Case "|fffd| Renminbi"
                ActiveSheet.Range("TtlMatl").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
            Case Else
                ActiveSheet.Range("TtlMatl").NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
        End Select
    
   'Format - LABOR & BURDEN
    findFirst = 32
    Do
        firstVal = ActiveSheet.Cells(findFirst, 2).Value
        If firstVal <> "startLB" Then
        findFirst = findFirst + 1
        End If
    Loop Until firstVal = "startLB"
    'MsgBox (findFirst)
    
    findlast = findFirst + 10
     Do
        lastval = ActiveSheet.Cells(findlast, 2).Value
        If lastval <> "endLB" Then
        findlast = findlast + 1
        End If
    Loop Until lastval = "endLB"
    'MsgBox (findLast)
    
    startLB = findFirst + 1
    endLB = findlast - 1
    
    For nRows = startLB To endLB
        Select Case SCur
            Case "$ Dollar"
                ActiveSheet.Cells(nRows, 7).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Cells(nRows, 15).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Cells(nRows, 24).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Cells(nRows, 27).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Cells(nRows, 30).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Cells(nRows, 32).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Cells(nRows, 34).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
            Case "|fffd| Euro"
                ActiveSheet.Cells(nRows, 7).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(nRows, 15).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(nRows, 24).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(nRows, 27).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(nRows, 30).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(nRows, 32).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(nRows, 34).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
            Case "|fffd| Pound"
                ActiveSheet.Cells(nRows, 7).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(nRows, 15).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Cells(nRows, 24).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Cells(nRows, 27).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Cells(nRows, 30).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Cells(nRows, 32).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Cells(nRows, 34).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case "|fffd| Yen"
                ActiveSheet.Cells(nRows, 7).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(nRows, 15).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Cells(nRows, 24).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Cells(nRows, 27).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Cells(nRows, 30).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Cells(nRows, 32).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Cells(nRows, 34).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case "|fffd| Renminbi"
               ActiveSheet.Cells(nRows, 7).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
               ActiveSheet.Cells(nRows, 15).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
               ActiveSheet.Cells(nRows, 24).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
               ActiveSheet.Cells(nRows, 27).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
               ActiveSheet.Cells(nRows, 30).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
               ActiveSheet.Cells(nRows, 32).NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
               ActiveSheet.Cells(nRows, 34).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case Else
               ActiveSheet.Cells(nRows, 7).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
               ActiveSheet.Cells(nRows, 15).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
               ActiveSheet.Cells(nRows, 24).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
               ActiveSheet.Cells(nRows, 27).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
               ActiveSheet.Cells(nRows, 30).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
               ActiveSheet.Cells(nRows, 32).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
               ActiveSheet.Cells(nRows, 34).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
            End Select
        Next nRows
        
    'Format - footer for LABOR & BURDEN
        Select Case SCur
            Case "$ Dollar"
                ActiveSheet.Range("TtlLabor").NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Range("TtlVar").NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Range("TtlFixed").NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Range("TtlBurden").NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
            Case "|fffd| Euro"
                ActiveSheet.Range("TtlLabor").NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlVar").NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlFixed").NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlBurden").NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
            Case "|fffd| Pound"
                ActiveSheet.Range("TtlLabor").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Range("TtlVar").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Range("TtlFixed").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Range("TtlBurden").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
            Case "|fffd| Yen"
                ActiveSheet.Range("TtlLabor").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Range("TtlVar").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Range("TtlFixed").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Range("TtlBurden").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
            Case "|fffd| Renminbi"
                ActiveSheet.Range("TtlLabor").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Range("TtlVar").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Range("TtlFixed").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                ActiveSheet.Range("TtlBurden").NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
            Case Else
                ActiveSheet.Range("TtlLabor").NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
                ActiveSheet.Range("TtlVar").NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
                ActiveSheet.Range("TtlFixed").NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
                ActiveSheet.Range("TtlBurden").NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
        End Select
              
    'Format - summary totals for LABOR & BURDEN
        Select Case SCur
            Case "$ Dollar"
                For Each c In Range("SumTtlLB")
                    c.NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                Next c
                
                For Each c In Range("TtlYrCstLB")
                    c.NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                Next c
            Case "|fffd| Euro"
                For Each c In Range("SumTtlLB")
                    c.NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                Next c
                
                For Each c In Range("TtlYrCstLB")
                    c.NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                Next c
            Case "|fffd| Pound"
                For Each c In Range("SumTtlLB")
                    c.NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                Next c
                
                For Each c In Range("TtlYrCstLB")
                    c.NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                Next c
            Case "|fffd| Yen"
                 For Each c In Range("SumTtlLB")
                    c.NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                Next c
                
                For Each c In Range("TtlYrCstLB")
                    c.NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                Next c
            Case "|fffd| Renminbi"
                 For Each c In Range("SumTtlLB")
                    c.NumberFormat = "_(|fffd|* ###0.0000_);_(|fffd|* (###0.0000);_(|fffd|* 0.0000_;"
                Next c
                
                For Each c In Range("TtlYrCstLB")
                    c.NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                Next c
            Case Else
                 For Each c In Range("SumTtlLB")
                    c.NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
                Next c
                
                For Each c In Range("TtlYrCstLB")
                    c.NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
                Next c
        End Select
 
 'Format - PRODUCTION TOOLING COSTS DETAIL
    findFirst = 79
    Do
        firstVal = ActiveSheet.Cells(findFirst, 2).Value
        If firstVal <> "startPT" Then
        findFirst = findFirst + 1
        End If
    Loop Until firstVal = "startPT"
    'MsgBox (findFirst)
    
    findlast = findFirst + 10
     Do
        lastval = ActiveSheet.Cells(findlast, 2).Value
        If lastval <> "endPT" Then
        findlast = findlast + 1
        End If
    Loop Until lastval = "endPT"
    'MsgBox (findLast)
    
    startPT = findFirst + 1
    endPT = findlast - 1
    
  For dRows = startPT To endPT
        Select Case SCur
            Case "$ Dollar"
                ActiveSheet.Cells(dRows, 5).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* 0.00_;"
                ActiveSheet.Cells(dRows, 7).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* 0.00_;"
                ActiveSheet.Cells(dRows, 11).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* 0.00_;"
                ActiveSheet.Cells(dRows, 14).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* 0.00_;"
                ActiveSheet.Cells(dRows, 19).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* 0.00_;"
                ActiveSheet.Cells(dRows, 25).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* 0.00_;"
            Case "|fffd| Euro"
                ActiveSheet.Cells(dRows, 5).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 7).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 11).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 14).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 19).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 25).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
            Case "|fffd| Pound"
                ActiveSheet.Cells(dRows, 5).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 7).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 11).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 14).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 19).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 25).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case "|fffd| Yen"
                ActiveSheet.Cells(dRows, 5).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 7).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 11).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 14).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 19).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(dRows, 25).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case "|fffd| Renminbi"
               ActiveSheet.Cells(dRows, 5).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
               ActiveSheet.Cells(dRows, 7).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
               ActiveSheet.Cells(dRows, 11).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
               ActiveSheet.Cells(dRows, 14).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
               ActiveSheet.Cells(dRows, 19).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
               ActiveSheet.Cells(dRows, 25).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case Else
               ActiveSheet.Cells(dRows, 5).NumberFormat = "_(* #,##0.00_);_(* (#,##0.00);_(* 0.00_;"
               ActiveSheet.Cells(dRows, 7).NumberFormat = "_(* #,##0.00_);_(* (#,##0.00);_(* 0.00_;"
               ActiveSheet.Cells(dRows, 11).NumberFormat = "_(* #,##0.00_);_(* (#,##0.00);_(* 0.00_;"
               ActiveSheet.Cells(dRows, 14).NumberFormat = "_(* #,##0.00_);_(* (#,##0.00);_(* 0.00_;"
               ActiveSheet.Cells(dRows, 19).NumberFormat = "_(* #,##0.00_);_(* (#,##0.00);_(* 0.00_;"
               ActiveSheet.Cells(dRows, 25).NumberFormat = "_(* #,##0.00_);_(* (#,##0.00);_(* 0.00_;"
            End Select
        Next dRows
 
 'Format - footer for PRODUCTION TOOLING COSTS DETAIL
         Select Case SCur
            Case "$ Dollar"
                ActiveSheet.Range("TtlDesignCst").NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* 0.00_;"
                ActiveSheet.Range("TtlLaborCst").NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* 0.00_;"
                ActiveSheet.Range("TtlProdMatCst").NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* 0.00_;"
                ActiveSheet.Range("TtlProdOHCst").NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* 0.00_;"
                ActiveSheet.Range("TtlPurServCst").NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* 0.00_;"
                ActiveSheet.Range("TtlPTCst").NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* 0.00_;"
            Case "|fffd| Euro"
                ActiveSheet.Range("TtlDesignCst").NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlLaborCst").NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlProdMatCst").NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlProdOHCst").NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlPurServCst").NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlPTCst").NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
            Case "|fffd| Pound"
                ActiveSheet.Range("TtlDesignCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlLaborCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlProdMatCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlProdOHCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlPurServCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlPTCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case "|fffd| Yen"
                ActiveSheet.Range("TtlDesignCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlLaborCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlProdMatCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlProdOHCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlPurServCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlPTCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case "|fffd| Renminbi"
                ActiveSheet.Range("TtlDesignCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlLaborCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlProdMatCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlProdOHCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlPurServCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Range("TtlPTCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case Else
                ActiveSheet.Range("TtlDesignCst").NumberFormat = "_(* #,##0.00_);_(* (#,##0.00);_(* 0.00_;"
                ActiveSheet.Range("TtlLaborCst").NumberFormat = "_(* #,##0.00_);_(* (#,##0.00);_(* 0.00_;"
                ActiveSheet.Range("TtlProdMatCst").NumberFormat = "_(* #,##0.00_);_(* (#,##0.00);_(* 0.00_;"
                ActiveSheet.Range("TtlProdOHCst").NumberFormat = "_(* #,##0.00_);_(* (#,##0.00);_(* 0.00_;"
                ActiveSheet.Range("TtlPurServCst").NumberFormat = "_(* #,##0.00_);_(* (#,##0.00);_(* 0.00_;"
                ActiveSheet.Range("TtlPTCst").NumberFormat = "_(* #,##0.00_);_(* (#,##0.00);_(* 0.00_;"
        End Select
        
 'Format - PRE-PRODUCTION PROTO INVEST COSTS
  findFirst = 110
    Do
        firstVal = ActiveSheet.Cells(findFirst, 2).Value
        If firstVal <> "startPP" Then
        findFirst = findFirst + 1
        End If
    Loop Until firstVal = "startPP"
    'MsgBox (findFirst)
    
    findlast = findFirst + 4
     Do
        lastval = ActiveSheet.Cells(findlast, 2).Value
        If lastval <> "endPP" Then
        findlast = findlast + 1
        End If
    Loop Until lastval = "endPP"
    'MsgBox (findLast)
    
    startPP = findFirst + 1
    endPP = findlast - 1
    
    For fRows = startPP To endPP
        Select Case SCur
            Case "$ Dollar"
                ActiveSheet.Cells(fRows, 7).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Cells(fRows, 11).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Cells(fRows, 14).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Cells(fRows, 18).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
                ActiveSheet.Cells(fRows, 21).NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
            Case "|fffd| Euro"
                ActiveSheet.Cells(fRows, 7).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 11).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 14).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 18).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 21).NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
            Case "|fffd| Pound"
                ActiveSheet.Cells(fRows, 7).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 11).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 14).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 18).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 21).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case "|fffd| Yen"
                ActiveSheet.Cells(fRows, 7).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 11).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 14).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 18).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 21).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case "|fffd| Renminbi"
                ActiveSheet.Cells(fRows, 7).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 11).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 14).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 18).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
                ActiveSheet.Cells(fRows, 21).NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case Else
                ActiveSheet.Cells(fRows, 7).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
                ActiveSheet.Cells(fRows, 11).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
                ActiveSheet.Cells(fRows, 14).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
                ActiveSheet.Cells(fRows, 18).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
                ActiveSheet.Cells(fRows, 21).NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
        End Select
        Next fRows
        Select Case SCur
            Case "$ Dollar"
                ActiveSheet.Range("TtlPPTCst").NumberFormat = "_($* #,##0.00000_);_($* (#,##0.00000);_($* 0.00000_;"
            Case "|fffd| Euro"
                ActiveSheet.Range("TtlPPTCst").NumberFormat = "_(|fffd|* #.##0,00_);_(|fffd|* (#.##0,00);_(|fffd|* 0.00_;"
            Case "|fffd| Pound"
                ActiveSheet.Range("TtlPPTCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case "|fffd| Yen"
                ActiveSheet.Range("TtlPPTCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case "|fffd| Renminbi"
                ActiveSheet.Range("TtlPPTCst").NumberFormat = "_(|fffd|* ###0.00_);_(|fffd|* (###0.00);_(|fffd|* 0.00_;"
            Case Else
                ActiveSheet.Range("TtlPPTCst").NumberFormat = "_(* #,##0.00000_);_(* (#,##0.00000);_(* 0.00000_;"
        End Select
 End If
 'End If
Call myProtectSheet            'Call to routine for turning protect back on

ErrHandler:
' error handling code
    If Err.Number = 1004 Then
        ' workbook protected, cannot perform this action
        MsgBox "This workbook is protected.  You cannot perform this task"
        ' go back to the line of code that caused the problem
        Exit Sub
    End If

End Sub
Sub myProtectSheet()
    Dim strPW As String
    strPW = "xxxx"
    'ActiveSheet.Protect

    With ActiveSheet
      .EnableSelection = xlUnlockedCells
       .Protect Password:=strPW, Contents:=True
    End With
    
End Sub
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim xWB As Workbook, xWS1 As Worksheet
    Set xWB = ThisWorkbook
    Set xWS1 = xWB.Sheets("Team Feasibility Remarks")
    Application.ScreenUpdating = False
    xWS1.Unprotect Password:="xxxx"
    xWS1.Protect Password:="xxxx", Contents:=True
    Application.ScreenUpdating = True
    Range("D9").Select
End Sub

Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Open()
Dim xWB As Workbook, xWSc As Worksheet, xWSq As Worksheet, xWSf As Worksheet
Dim xWSr As Worksheet, xWSi As Worksheet, xWSd As Worksheet, xWSp As Worksheet
Dim dRgn As Excel.Range, zAnchor As Range, ii As Integer, jj As Integer, kk As Integer, iFlag As Boolean
'    'Keep for International capability
'    Dim DayStr As String, MonthStr As String, YearStr As String, DateSepStr As String, DecimalStr As String, zListSep As String
'    Dim YYYYstr As String, FyearStr As String, TyearStr As String
'    Dim DMYstr As String, FdateStr As String, TdateStr As String, DcmlStr As String, PrcntStr As String
'    With Application
'        DayStr = .International(xlDayCode)
'        MonthStr = .International(xlMonthCode)
'        YearStr = .International(xlYearCode)
'        DateSepStr = .International(xlDateSeparator)
'        DecimalStr = .International(xlDecimalSeparator)
'        zListSep = .International(xlListSeparator)
'    End With
'    YYYYstr = YearStr & YearStr & YearStr & YearStr
'    FyearStr = "From Year (" & YYYYstr & "): "
'    TyearStr = "To Year (" & YYYYstr & "): "
'    DMYstr = DayStr & DayStr & DateSepStr & MonthStr & MonthStr & MonthStr & DateSepStr & YearStr & YearStr & YearStr & YearStr
'    FdateStr = "From Date (" & DMYstr & "): "
'    TdateStr = "To Date (" & DMYstr & "): "
'    DcmlStr = "0" & DecimalStr & "00000"
'    PrcntStr = "0%"
    Set xWB = ThisWorkbook
    Set xWSi = xWB.Sheets("Instructions")
    Set xWSc = xWB.Sheets("RFQ Coversheet")
    Set xWSq = xWB.Sheets("Supplier Quotation Form")
    Set xWSf = xWB.Sheets("Team Feasibility")
    Set xWSr = xWB.Sheets("Team Feasibility Remarks")
    Set xWSp = xWB.Sheets("Supplier Alternate Packaging")
    xWSi.Activate
    Application.ScreenUpdating = False
    'If 'DSPAdata' does not exists then exit sub
    For Each xWSd In xWB.Sheets
        If xWSd.Name = "DSPAdata" Then GoTo Line10
    Next xWSd
    xWSi.Activate
    Application.ScreenUpdating = True
    Exit Sub
Line10:
    'if'DSPAdata' is empty then exit sub
    If xWSd.Range("B1").Text = "" Then
        xWSd.Visible = xlSheetVisible
        GoTo Line30
    End If
    'Transfer Data from DSPAdata to other workbook sheets
    
'Initiate RFQ Coversheet ***********************************************************************
        xWSc.Activate
        xWSc.Range("D10").Value = xWSd.Range("B1").Text 'requestID
        xWSc.Range("D11").Value = xWSd.Range("B2").Text 'Description
        xWSc.Range("D12").Value = xWSd.Range("B3").Value 'RFQ Issue Date
        xWSc.Range("M10").Value = xWSd.Range("B4").Value 'Quotation Due Date
        xWSc.Range("D13").Value = xWSd.Range("B5").Text 'Buyer Name
        xWSc.Range("D14").Value = xWSd.Range("B6").Text 'Buyer Phone No
        xWSc.Range("D15").Value = xWSd.Range("B7").Text 'Buyer Email
        xWSc.Range("F34").Value = xWSd.Range("B8").Text 'customer
        xWSc.Range("F35").Value = xWSd.Range("B9").Text 'application
        xWSc.Range("F40").Value = xWSd.Range("B10").Value 'Delphi's Start of Production Date
        xWSc.Range("F41").Value = xWSd.Range("B11").Text 'Delphi's Mfg/Receiving Location
        xWSc.Range("L34").Value = xWSd.Range("B12").Text 'Payment Terms
        xWSc.Range("L35").Value = xWSd.Range("B13").Text 'Delivery (Inco) Terms
        
        iFlag = True ' version 6.9 change

        xWSc.Range("L36").Value = xWSd.Range("B14").Text 'Title Transfer
        xWSc.Range("L37").Value = xWSd.Range("B15").Text 'Buyer's Requested Currency
        xWSc.Range("F43").Value = xWSd.Range("B16").Text 'Buyer's Comments
        If xWSd.Range("B17") = "" Then GoTo Line11
        xWSc.Range("H17").Value = xWSd.Range("B17").Text 'Alternative Text
Line11:
        
        xWSc.Range("I18").Value = xWSd.Range("B18").Value 'CalendarYear
        'Check for DSPA table data
        xWSd.Activate
        Set dRgn = xWSd.Range("A21").CurrentRegion
        ii = dRgn.Rows.Count - 1
        If ii = 0 Then GoTo Line20
'complete RFQ Coversheet ******************************************************************************************
        xWSc.Activate
        xWSc.Unprotect Password:="xxxx"
        Application.EnableEvents = False
        Set zAnchor = xWSc.Range("C19")
        If ii > 10 Then 'insert rows to fit DSPA Table data
            For kk = 1 To ii - 10
                xWSc.Range("A27").EntireRow.Insert Shift:=xlShiftDown
            Next kk
        End If
        For kk = 1 To ii
            zAnchor.Offset(kk - 1, 0).Value = dRgn.Resize(1, 1).Offset(kk, 0).Text 'DElphi PART NO.
            zAnchor.Offset(kk - 1, 1).Value = dRgn.Resize(1, 1).Offset(kk, 1).Text  'Description
            zAnchor.Offset(kk - 1, 2).Value = dRgn.Resize(1, 1).Offset(kk, 2).Text  'REV
            zAnchor.Offset(kk - 1, 3).Value = dRgn.Resize(1, 1).Offset(kk, 3).Text  'DG Class
            zAnchor.Offset(kk - 1, 4).Value = dRgn.Resize(1, 1).Offset(kk, 4).Text 'Rec Location
            zAnchor.Offset(kk - 1, 5).Value = dRgn.Resize(1, 1).Offset(kk, 5).Text 'Alternative Header(dynamic)
            zAnchor.Offset(kk - 1, 6).Value = dRgn.Resize(1, 1).Offset(kk, 6).Value  '0
            zAnchor.Offset(kk - 1, 7).Value = dRgn.Resize(1, 1).Offset(kk, 7).Value  '1
            zAnchor.Offset(kk - 1, 8).Value = dRgn.Resize(1, 1).Offset(kk, 8).Value '2
            zAnchor.Offset(kk - 1, 9).Value = dRgn.Resize(1, 1).Offset(kk, 9).Value  '3
            zAnchor.Offset(kk - 1, 10).Value = dRgn.Resize(1, 1).Offset(kk, 10).Value '4
            zAnchor.Offset(kk - 1, 11).Value = dRgn.Resize(1, 1).Offset(kk, 11).Value  '5
            zAnchor.Offset(kk - 1, 12).Value = dRgn.Resize(1, 1).Offset(kk, 12).Value  '6
            zAnchor.Offset(kk - 1, 13).Value = dRgn.Resize(1, 1).Offset(kk, 20).Text  'Part Order Unit of Measure
            zAnchor.Offset(kk - 1, 14).Value = dRgn.Resize(1, 1).Offset(kk, 13).Value  'Prototype Required Date
            zAnchor.Offset(kk - 1, 15).Value = dRgn.Resize(1, 1).Offset(kk, 14).Value  'Prototype Quantity
            zAnchor.Offset(kk - 1, 16).Value = dRgn.Resize(1, 1).Offset(kk, 17).Value 'PPAP Required Date
            zAnchor.Offset(kk - 1, 17).Value = dRgn.Resize(1, 1).Offset(kk, 18).Value  'PPAP Quantity
            zAnchor.Offset(kk - 1, 18).Value = dRgn.Resize(1, 1).Offset(kk, 15).Value  'Run at Rate Date
            zAnchor.Offset(kk - 1, 19).Value = dRgn.Resize(1, 1).Offset(kk, 16).Value  'Pilot Date
            zAnchor.Offset(kk - 1, 20).Value = dRgn.Resize(1, 1).Offset(kk, 19).Value  'Pilot Quantity
            zAnchor.Offset(kk - 1, 21).Value = dRgn.Resize(1, 1).Offset(kk, 21).Value  'Engineering Contact Name - version 6.91 change
            zAnchor.Offset(kk - 1, 22).Value = dRgn.Resize(1, 1).Offset(kk, 22).Value  'Engineering Contact Phone - version 6.91 change
            zAnchor.Offset(kk - 1, 23).Value = dRgn.Resize(1, 1).Offset(kk, 23).Value  'Engineering Contact eMail - version 6.91 change
            zAnchor.Offset(kk - 1, 24).Value = dRgn.Resize(1, 1).Offset(kk, 24).Text 'UNSPSC
        Next kk
        
'complete Supplier Quotation Form ****************************************************************************************
        xWSq.Activate
        xWSq.Unprotect Password:="xxxx"
        Application.EnableEvents = False
        Set zAnchor = xWSq.Range("B22")
        If ii > 10 Then 'insert rows to fit DSPA Table data
            For kk = 1 To ii - 10
                xWSq.Range("A30").EntireRow.Insert Shift:=xlShiftDown
            Next kk
            zAnchor.Offset(0, 5).Resize(ii, 1).Value = "Select One"
        End If
        For kk = 1 To ii
            zAnchor.Offset(kk - 1, 0).Value = dRgn.Resize(1, 1).Offset(kk, 0).Text 'DElphi PART NO.
            zAnchor.Offset(kk - 1, 1).Value = dRgn.Resize(1, 1).Offset(kk, 1).Text  'Description
            zAnchor.Offset(kk - 1, 2).Value = dRgn.Resize(1, 1).Offset(kk, 2).Text  'REV
            zAnchor.Offset(kk - 1, 4).Value = dRgn.Resize(1, 1).Offset(kk, 5).Text  'Alternative Header(dynamic)
            zAnchor.Offset(kk - 1, 6).Value = dRgn.Resize(1, 1).Offset(kk, 4).Text  'Rec Location
        Next kk

'complete Team Feasibility Form *****************************************************************************************
        xWSf.Activate
        xWSf.Unprotect Password:="xxxx"
        Application.EnableEvents = False
        Set zAnchor = xWSf.Range("C16")
        If ii > 10 Then 'insert rows to fit DSPA Table data
            For kk = 1 To ii - 10
                xWSf.Range("A24").EntireRow.Insert Shift:=xlShiftDown
            Next kk
            zAnchor.Offset(0, -1).Value = 1
            zAnchor.Offset(1, -1).Resize(ii - 1, 1).FormulaR1C1 = "=R[-1]C+1"
            zAnchor.Offset(0, 21).Resize(ii, 1).FormulaR1C1 = "=FeasibiltyAlert(RC[-21],RC[-3],RC[-2],RC[-1])"
        End If
        zAnchor.Offset(0, 18).Resize(ii, 1).Formula = "X"
        For kk = 1 To ii
            zAnchor.Offset(kk - 1, 0).Value = dRgn.Resize(1, 1).Offset(kk, 0).Text 'DElphi PART NO.
            zAnchor.Offset(kk - 1, 1).Value = dRgn.Resize(1, 1).Offset(kk, 1).Text  'Description
            zAnchor.Offset(kk - 1, 2).Value = dRgn.Resize(1, 1).Offset(kk, 2).Text  'REV
       Next kk
        
'complete Team Feasibility Remarks Form ********************************************************************************
        xWSr.Activate
        xWSr.Unprotect Password:="xxxx"
        Application.EnableEvents = False
        Set zAnchor = xWSr.Range("B9")
        If ii > 10 Then 'insert rows to fit DSPA Table data
            For kk = 1 To ii - 10
                xWSr.Range("A17").EntireRow.Insert Shift:=xlShiftDown
                xWSr.Range("D17:I17").Merge
            Next kk
            zAnchor.Offset(0, -1).Value = 1
            zAnchor.Offset(1, -1).Resize(ii - 1, 1).FormulaR1C1 = "=R[-1]C+1"
            zAnchor.Offset(0, 9).Resize(ii, 1).Formula = "Select One"
            zAnchor.Offset(0, 2).Resize(ii, 1).Formula = "SPECIFY REMARKS (IF ANY) OR RESPOND WITH 'NONE'"
        End If
        For kk = 1 To ii
            zAnchor.Offset(kk - 1, 0).Value = dRgn.Resize(1, 1).Offset(kk, 0).Text 'DElphi PART NO.
            zAnchor.Offset(kk - 1, 1).Value = dRgn.Resize(1, 1).Offset(kk, 2).Text 'REV
       Next kk
       
       'complete Supplier Alternate Packaging
        xWSp.Activate
        xWSp.Unprotect Password:="xxxx"
        Application.EnableEvents = False
        Set zAnchor = xWSp.Range("B25")
        If ii > 10 Then 'insert rows to fit DSPA Table data
            For kk = 1 To ii - 10
                xWSp.Range("A34").EntireRow.Insert Shift:=xlShiftDown
            Next kk
        End If
        For kk = 1 To ii
            zAnchor.Offset(kk - 1, 0).Value = dRgn.Resize(1, 1).Offset(kk, 0).Text 'DElphi PART NO.
            zAnchor.Offset(kk - 1, 1).Value = dRgn.Resize(1, 1).Offset(kk, 1).Text 'Delphi Part Description
            zAnchor.Offset(kk - 1, 2).Value = dRgn.Resize(1, 1).Offset(kk, 4).Text 'Rec Location
       Next kk
Line20:
    Application.EnableEvents = True
    xWSd.Name = "xDSPAdata"
    xWSd.Visible = xlSheetHidden
    Application.DisplayAlerts = False
    xWB.Save
    Application.DisplayAlerts = True
Line30:
    xWSi.Activate
    Application.ScreenUpdating = True
    xWSi.Range("A1").Select
End Sub


' InQuest injected base64 decoded content
' :-j[

INQUEST-PP=macro
