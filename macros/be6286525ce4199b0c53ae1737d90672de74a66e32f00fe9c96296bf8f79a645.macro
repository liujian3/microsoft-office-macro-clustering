Attribute VB_Name = "Foglio1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)

  Dim sht2print_1 As Worksheet
  Dim sht2print_2 As Worksheet
  Dim sht2check As Worksheet

On Error GoTo gestErrori

  pwd = "CNHi_Elements_!001"

  Set sht2check = ThisWorkbook.Worksheets("Garantieverl|fffd|ngerungsvertrag")
  
'disabilitare gli eventi qui a l'inizio della macro
  Application.EnableEvents = False
  Application.ScreenUpdating = False

  targetAddress = Target.Address(False, False)
  Select Case targetAddress
  Case Is = "C17"
      Set sht2print_1 = ActiveSheet
      Set sht2print_2 = ThisWorkbook.Worksheets("Fahrzeugdaten")
      


      
     sht2print_1.Unprotect pwd
     sht2print_2.Unprotect pwd
        Call comboElements_change(Target)
      sht2print_1.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True, Password:=pwd
      sht2print_2.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True, Password:=pwd

'  Case Is = "D9:D25", "D9"
'    If Len(Target.Cells(1, 1).Value) <> 17 Then
'      MsgBox "Die Fahrgestellnummer muss 17stellig sein.", vbOKOnly, "Achtung !!!"
'    End If
  Case Else
    res = checkCompiledCells(sht2check.Name, "parameters", "A26")
  End Select
  
'riabilito gli eventi
  Application.EnableEvents = True
  Application.ScreenUpdating = True

gestErrori:
  Debug.Print Err.Number & " - " & Err.Description
  Application.EnableEvents = True
  Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "Foglio2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Modulo1"


Public Sub delImagesInRange(shtDest As Worksheet, rngDest As Range)

  'Dim shtDest As Worksheet
  'Set shtDest = ThisWorkbook.Worksheets(shtDest_txt)

  Dim shp As Shape
  
  On Error GoTo gest_errori
  
  With shtDest
    For Each shp In .Shapes
      If shp.Type = msoPicture Then
        Debug.Print rngDest.Address
        Debug.Print shp.TopLeftCell.Address
        Debug.Print shtDest.Name
        If Not Application.Intersect(shp.TopLeftCell, rngDest) Is Nothing Then
          shp.Delete
        End If
      End If
    Next shp
  End With
  
  Exit Sub
  
gest_errori:
  Resume Next

End Sub

Public Sub inserisciImgDaSht(nomeImgDaCombobox As String, shtImages As Worksheet, shtDest As Worksheet, rngDest As Range, Optional altezzaImg As Double, Optional blnAdatta As Boolean = False)

  Dim myShp As Shape
    
  shtImages.Shapes(nomeImgDaCombobox).Copy
  shtDest.Select
  rngDest.PasteSpecial (xlPasteValues)
  
  Set myShp = getFirstImageInRange(rngDest)
  
  If altezzaImg > 0 Then
    myShp.Height = altezzaImg
  End If
  
  If blnAdatta Then
    myShp.Height = myShp.Height - 2
    myShp.Left = myShp.Left + 1
    myShp.Top = myShp.Top + 1
  End If

End Sub

Public Function getFirstImageInRange(rng2search As Range) As Variant

  Dim oSht As Worksheet
  
  getFirstImageInRange = Null
  
  Set oSht = rng2search.Parent
  For Each shp In oSht.Shapes
    If shp.Type = msoPicture Then
      If Not Application.Intersect(shp.TopLeftCell, rng2search) Is Nothing Then
        Set getFirstImageInRange = shp
        Exit Function
      End If
    End If
  Next shp

End Function

Public Sub inserisciServizi(elencoServizi As String, rngDestInizio As Range, rngCodifica As Range)

  arrServizi = Split(elencoServizi, "+")
  'Debug.Print "-" & Join(arrServizi, ";") & "-"
  For idx = 0 To UBound(arrServizi)
    servizio = arrServizi(idx)
    nomeServizioCompleto = Application.WorksheetFunction.VLookup(servizio, rngCodifica, 2, False)
    rngDestInizio.Offset(idx, 0).Value = nomeServizioCompleto
  Next idx

End Sub

Sub comboElements_change(Target As Range)
  
  Dim rngDestImg_txt As String
  Dim nomeImg As String
  Dim rngInizioDestServizi_txt As String
  Dim elencoServizi As String
  Dim rngCodificaServizi As Range
  Dim rngInizioDestServizi As Range
  Dim rngRifCombo As Range
  Dim rngDestImg_1a As Range
  Dim rngDestImg_1b As Range
  Dim rngDestImg_1c As Range
  Dim rngDestImg_2a As Range
  Dim rngDestImg_2b As Range
  Dim rngServiziElemList As Range
  Dim rngInizioDest_ServiziElem As Range
  Dim shtImages As Worksheet
  Dim tbl_nroRighe As Integer
  Dim tbl_nroColonne As Integer
  Dim tbl_spaceBetwRows As Integer
  Dim tbl_spaceBetwCols As Integer
  Dim indiceCombo As Integer
  Dim rngDest As Range
  Dim rngValori As Range
  Dim rng2clear As Range
  Dim sht2print_1_txt As String
  Dim sht2print_2_txt As String
  Dim sht2print_1 As Worksheet
  Dim sht2print_2 As Worksheet
  Dim rngDestCopAdd_desc As String
  Dim rngDestCopAdd_vals As String
  Dim rngTooltipText As Range
  Dim rngTooltipTitleText As Range
  
'IMPOSTAZIONI ----------------------------------------
  sht2print_1_txt = "Garantieverl|fffd|ngerungsvertrag"
    rngDestImg_1a_txt = "A18"
  ''  rngDestImg_1b_txt = "G5"
    ''rngDestImg_1c_txt = "G95"
    rngInizioDestServizi_txt = "G19"
    'rngInizioDest_ServiziElem_txt = "A22"
    'tbl_nroRighe = 4
    'tbl_nroColonne = 2
    'tbl_spaceBetwRows = 1
    'tbl_spaceBetwCols = 2
    rng2clear_txt = "A33:I45"
    rngDestCopAdd_desc = "A33;A35;A37;A39;A41;A43;A45;F33;F35;F37;F39;F41;F43;F45"
    rngDestCopAdd_vals = "D33;D35;D37;D39;D41;D43;D45;I33;I35;I37;I39;I41;I43;I45"
  
  sht2print_2_txt = "Fahrzeugdaten"
    rngDestImg_2a_txt = "G1"
    rngDestImg_2b_txt = "G34"
  
  foglioImmagini = "images"
  
  foglioValori = "parameters"
    rngTranscodifica = "D2:E3"
    rngServiziElemList_txt = "G3"
    rngCopAddTooltip_txt = "A22"
    rngCopAddTooltipTitle_txt = "A24"
'fine IMPOSTAZIONI -----------------------------------
  

  
'se la cella NON contiene la convalida dati allora esco
  If Not Target.Validation.Value Then Exit Sub

  'recuperare il riferimento da cui prende i dati il target (dai parametri di convalida)
    rngRifCombo_txt = Mid(Target.Validation.Formula1, 2)
    Set rngRifCombo = Range(rngRifCombo_txt)
    'Debug.Print rngRifCombo_txt
    'Debug.Print rngRifCombo.Address
    'Set rngRifCombo = ThisWorkbook.Worksheets(foglioValori).Range(rngRifCombo_txt)
    
  'imposto le var in base ai parametri
    Set sht2print_1 = ThisWorkbook.Worksheets(sht2print_1_txt)
    'Set rngInizioDest_ServiziElem = sht2print_1.Range(rngInizioDest_ServiziElem_txt)
    Set rngInizioDestServizi = sht2print_1.Range(rngInizioDestServizi_txt)
    Set rngDestImg_1a = sht2print_1.Range(rngDestImg_1a_txt)
   '' Set rngDestImg_1b = sht2print_1.Range(rngDestImg_1b_txt)
  ''  Set rngDestImg_1c = sht2print_1.Range(rngDestImg_1c_txt)
    
    Set sht2print_2 = ThisWorkbook.Worksheets(sht2print_2_txt)
    Set rngDestImg_2a = sht2print_2.Range(rngDestImg_2a_txt)
    Set rngDestImg_2b = sht2print_2.Range(rngDestImg_2b_txt)
    
    Set rngCodificaServizi = ThisWorkbook.Worksheets(foglioValori).Range(rngTranscodifica)
    Set rngServiziElemList = ThisWorkbook.Worksheets(foglioValori).Range(rngServiziElemList_txt)
    Set rngTooltipText = ThisWorkbook.Worksheets(foglioValori).Range(rngCopAddTooltip_txt)
    tooltip_text = rngTooltipText.Value
    Set rngTooltipTitleText = ThisWorkbook.Worksheets(foglioValori).Range(rngCopAddTooltipTitle_txt)
    tooltipTitle_text = rngTooltipTitleText.Value
    
    Set shtImages = ThisWorkbook.Worksheets(foglioImmagini)
    
  valCombo = Target.Value
  indiceCombo = Application.WorksheetFunction.Match(valCombo, rngRifCombo, 0)
  nomeImg = "img_" & indiceCombo
  Set rngCodifica = rngRifCombo.Offset(0, 1)         'Extend(rngRifCombo.Row, 2)
  elencoServizi = Application.WorksheetFunction.Index(rngCodifica, indiceCombo)
  'elencoServizi = Application.WorksheetFunction.VLookup(servizio, rngCodifica, 2, False)
  
  'delImagesInRange(shtDest_txt As String, rngDest_txt As String)
    Call delImagesInRange(sht2print_1, rngDestImg_1a)
 ''   Call delImagesInRange(sht2print_1, rngDestImg_1b)
 ''   Call delImagesInRange(sht2print_1, rngDestImg_1c)
    Call delImagesInRange(sht2print_2, rngDestImg_2a)
    Call delImagesInRange(sht2print_2, rngDestImg_2b)
    
  'ripulisco la zona in cui dovr|fffd| scrivere i servizi
    sht2print_1.Range(rngInizioDestServizi_txt).Resize(6).ClearContents
    
  'se la combo |fffd| vuota esco dalla sub
    If valCombo = "" Then Exit Sub
  
  'inserisciImgDaSht(nomeImgDaCombobox As String, shtDest_txt As String, rngDest_txt As String)
    Call inserisciImgDaSht(nomeImg, shtImages, sht2print_1, rngDestImg_1a, , True)
  ''  Call inserisciImgDaSht(nomeImg, shtImages, sht2print_1, rngDestImg_1b, 34.5, True) '34.5 |fffd| uguale alla sommma delle altezze delle righe che devono contenere l'immagine (2 righe da 17.25)
  ''  Call inserisciImgDaSht(nomeImg, shtImages, sht2print_1, rngDestImg_1c, 34.5, True) '34.5 |fffd| uguale alla sommma delle altezze delle righe che devono contenere l'immagine (3 righe da 17.25)
    Call inserisciImgDaSht(nomeImg, shtImages, sht2print_2, rngDestImg_2a, 51.75, True) '51.75 |fffd| uguale alla sommma delle altezze delle righe che devono contenere l'immagine (3 righe da 17.25)
    Call inserisciImgDaSht(nomeImg, shtImages, sht2print_2, rngDestImg_2b, 51.75, True) '51.75 |fffd| uguale alla sommma delle altezze delle righe che devono contenere l'immagine (3 righe da 17.25)
    
  'inserisciServizi(shtDest_txt As String, rngDest_txt As String)
    Call inserisciServizi(elencoServizi, rngInizioDestServizi, rngCodificaServizi)
    
  sht2print_1.Select
  'compila la tabella    'OLD Call compilaTabella(tbl_nroRighe, tbl_nroColonne, rngInizioDest_ServiziElem, rngServiziElemList, indiceCombo, True)
    'pulisci range
      'Set rng2clear = rngInizioDest_ServiziElem.Resize(tbl_nroRighe * (1 + tbl_spaceBetwRows) - 1, tbl_nroColonne * (1 + tbl_spaceBetwCols) + 3)
      Set rng2clear = sht2print_1.Range(rng2clear_txt)
      'Debug.Print rng2clear.Address
      rng2clear.Select
      rng2clear.ClearContents
    'scrivi le opzioni
      'Set rngDest = rngInizioDest_ServiziElem
      Set rngValori = rngServiziElemList
      'Call compilaTabella_2(tbl_nroRighe, tbl_nroColonne, tbl_spaceBetwRows, tbl_spaceBetwCols, rngDest, rngValori, True)
      Call compilaTabella_3(sht2print_1, rngDestCopAdd_desc, rngValori, True, False)
    'scrivi i valori
      'Set rngDest = rngInizioDest_ServiziElem.Offset(0, 1)
      Set rngValori = rngServiziElemList.Offset(0, indiceCombo)
      Call compilaTabella_3(sht2print_1, rngDestCopAdd_vals, rngValori, False, True, CStr(tooltip_text), CStr(tooltipTitle_text))
      'Call compilaTabella_2(tbl_nroRighe, tbl_nroColonne, tbl_spaceBetwRows, tbl_spaceBetwCols, rngDest, rngValori, True)
      
  'ritorno al primo foglio da stampare
    sht2print_1.Select
    sht2print_1.Range("A1").Select
    
     Call Pprotect

End Sub

Public Sub compilaTabella_3(shDest As Worksheet, rngDest_txt As String, rng_ValoriDaScrivere, Optional bln_label = True, Optional bln_svuotaValues As Boolean = False, Optional tooltip_text As String = "", Optional tooltipTitle_text As String = "")

  Dim rng_Elemservice_Values As Range
  Dim idx As Integer
  Dim cel2write As Range
  Dim arr_rngDest As Variant
  
  On Error GoTo gestErrori
  
  arr_rngDest = Split(rngDest_txt, ";")
  'Debug.Print rng_ValoriDaScrivere.Cells.Count
  'Debug.Print UBound(arr_rngDest)
  If rng_ValoriDaScrivere.Cells.Count > UBound(arr_rngDest) + 1 Then
    rng_DestStart.Value = "The number of elements to write in the table is too big"
    Exit Sub
  End If
  
  For Each c In rng_ValoriDaScrivere
    valore = c.Value
    
    rng2Write_txt = arr_rngDest(idx)
    Set cel2write = shDest.Range(rng2Write_txt)
    Set cel2write = cel2write.MergeArea
    'If cel2write.MergeArea Then
    '  cel2write
    'End If
    
    Debug.Print (idx + 1) & " --> " & nomeServizio & "=" & valore & " --> " & cel2write.Address(False, False)
    cel2write.Value = valore
    
    'codice per bloccare la cella a seconda del valore ("-" --> BLOCCATO  "OPT" --> "X" o "")
      cel2write.Select
      cel2write.Validation.Delete
    
      If valore = "-" Or valore = "STD" Then 'blocco la cella
        cel2write.Locked = True
      ElseIf valore = "OPT" Then 'permetto di scegliere fra "X" e ""
        cel2write.Locked = False
        'Sheets("Garantieverl|fffd|ngerungsvertrag").Select
        With cel2write.Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:="='parameters'!$D$13:$D$14"
            .IgnoreBlank = False
            .InCellDropdown = True
            '.InputTitle = "Optional"
            .InputTitle = tooltipTitle_text
            .ErrorTitle = ""
            '.InputMessage = "Nutzen Sie das Drop Down Men|fffd|, um die Option auszuw|fffd|hlen."
            .InputMessage = tooltip_text
            .ErrorMessage = ""
            .ShowInput = True
            .ShowError = True
        End With
      Else 'SBLOCCO  la cella --> perch|fffd| dovrei sbloccarla ?
        'cel2write.Locked = False
        cel2write.Locked = True
      End If
    
    idx = idx + 1
  Next c
  
  'per tutti i restanti se "svuota_values" = true ripulisco il valore e blocco la cella
  If idx <= UBound(arr_rngDest) And bln_svuotaValues Then
    For newIdx = idx To UBound(arr_rngDest)
      rng2clear_txt = arr_rngDest(newIdx)
      Set cel2clear = shDest.Range(rng2clear_txt)
      Set cel2clear = cel2clear.MergeArea
      
      cel2clear.Locked = False
      cel2clear.Validation.Delete
      cel2clear.Clear
      cel2write.Locked = True
      
    Next newIdx
  End If
  
  Exit Sub
  
gestErrori:
  Debug.Print Err.Number & " - " & Err.Description
  Exit Sub
  Resume

End Sub

Public Sub compilaTabella_2(nrOfRow As Integer, nrOfCol As Integer, spaceBetwRows As Integer, spaceBetwCols As Integer, rng_DestStart As Range, rng_ValoriDaScrivere, Optional bln_byRows As Boolean = True)

  Dim rng_Elemservice_Values As Range
  Dim nroElem As Integer
  Dim cel2write As Range
  
  On Error GoTo gestErrori
  
'  'svuota tabella
'  Dim rng2clear As Range
'  Set rng2clear = rng_DestStart.Resize(nrOfRow * (1 + spaceBetwRows) - 1, nrOfCol * (1 + spaceBetwCols) - 1)
'  rng2clear.ClearContents
  
  'Set rng_Elemservice_Values = rng_ElemService_List.Offset(0, colwithValues)
  If rng_ValoriDaScrivere.Cells.Count > nrOfCol * nrOfRow Then
    rng_DestStart.Value = "The number of elements to write in the table is too big"
    Exit Sub
  End If
  
  For Each c In rng_ValoriDaScrivere
    nroElem = nroElem + 1
    valore = c.Value
    
    rowIdx = row2Write(nroElem, nrOfRow, nrOfCol, bln_byRows)
    colIdx = col2Write(nroElem, nrOfRow, nrOfCol, bln_byRows)
    
    rowOffsetFinal = rowIdx - 1 + (rowIdx - 1) * spaceBetwRows
    colOffsetFinal = colIdx - 1 + (colIdx - 1) * spaceBetwCols
    
    Set cel2write = rng_DestStart.Offset(rowOffsetFinal, 0)
    Debug.Print cel2write.Address(False, False)
    For i = 1 To colOffsetFinal
      Set cel2write = cel2write.Offset(0, 1)
      'Debug.Print cel2write.Address(False, False)
      Set cel2write = cel2write.MergeArea
      'Debug.Print cel2write.Address(False, False)
    Next i
    Set cel2write = cel2write.MergeArea
    'Debug.Print cel2write.Address(False, False)
    
    'Set cel2write = rng_DestStart.Offset(rowOffsetFinal, colOffsetFinal)
    'Debug.Print cel2write.Address(False, False)
    'Set cel2write = cel2write.MergeArea
    'Debug.Print cel2write.Address(False, False)
    
    Debug.Print nroElem & " --> " & nomeServizio & "=" & valore & " --> " & cel2write.Address(False, False)
    cel2write.Value = valore
    
    'codice per bloccare la cella a seconda del valore ("-" --> BLOCCATO  "OPT" --> "X" o "")
      cel2write.Select
      cel2write.Validation.Delete
    
      If valore = "-" Or valore = "STD" Then 'blocco la cella
        cel2write.Locked = True
      ElseIf valore = "OPT" Then 'permetto di scegliere fra "X" e ""
        cel2write.Locked = False
        'Sheets("Garantieverl|fffd|ngerungsvertrag").Select
        With cel2write.Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:="='parameters'!$D$13:$D$14"
            .IgnoreBlank = False
            .InCellDropdown = True
            .InputTitle = "Optional"
            .ErrorTitle = ""
            .InputMessage = "Nutzen Sie das Drop Down Men|fffd|, um die Option auszuw|fffd|hlen."
            .ErrorMessage = ""
            .ShowInput = True
            .ShowError = True
        End With
      Else 'SBLOCCO  la cella
        cel2write.Locked = False
      End If
    
  Next c
  Exit Sub
  
gestErrori:
  Debug.Print Err.Number & " - " & Err.Description
  Exit Sub
  Resume

End Sub


Public Sub compilaTabella(nrOfRow As Integer, nrOfCol As Integer, rng_DestStart As Range, rng_ElemService_List As Range, colwithValues As Integer, Optional bln_byRows As Boolean = True)

  Dim rng_Elemservice_Values As Range
  Dim nroElem As Integer
  Dim cel2write As Range
  Dim rng2clear As Range
  
  spaceBetwRows = 1
  spaceBetwCols = 2
  
  'svuota tabella
  Set rng2clear = rng_DestStart.Resize(nrOfRow * (1 + spaceBetwRows) - 1, nrOfCol * (1 + spaceBetwCols) - 1)
  'Debug.Print rng2clear.Address(False, False)
  'rng2clear.Select
  rng2clear.ClearContents
  
  'Set rng_Elemservice_Values = rng_ElemService_List.Offset(0, colwithValues)
  If rng_ElemService_List.Cells.Count > nrOfCol * nrOfRow Then
    rng_DestStart.Value = "The number of elements to write in the table is too big"
    Exit Sub
  End If
  
  For Each elServ In rng_ElemService_List
    nroElem = nroElem + 1
    nomeServizio = elServ.Value
    valore = elServ.Offset(0, colwithValues).Value
    
    rowIdx = row2Write(nroElem, nrOfRow, nrOfCol, bln_byRows)
    colIdx = col2Write(nroElem, nrOfRow, nrOfCol, bln_byRows)
    
    rowOffsetFinal = rowIdx - 1 + (rowIdx - 1) * spaceBetwRows
    colOffsetFinal = colIdx - 1 + (colIdx - 1) * spaceBetwCols
    
    Set cel2write = rng_DestStart.Offset(rowOffsetFinal, colOffsetFinal)
    'Debug.Print nroElem & " --> " & nomeServizio & "=" & valore & " --> " & cel2write.Address(False, False)
    cel2write.Value = nomeServizio
    cel2write.Offset(0, 1).Value = valore
  
  Next elServ

End Sub


Public Sub test2()

Dim i As Integer
Dim rng2start As Range
Dim rng_ElemService_List As Range

Application.EnableEvents = False

Set rng2start = ActiveSheet.Range("A21")
Set rng_ElemService_List = ThisWorkbook.Worksheets("parameters").Range("G3:G8")

Call compilaTabella(4, 3, rng2start, rng_ElemService_List, 1, True)

Application.EnableEvents = True

End Sub

Public Sub test()

Dim i As Integer

For i = 1 To 9
  Debug.Print i & " --> " & row2Write(i, 4, 3, False) & "," & col2Write(i, 4, 3, False)
Next i

End Sub


Public Function row2Write(nroElemento As Integer, nrOfRow As Integer, nrOfCol As Integer, bln_byRows As Boolean) As Integer
 
 If bln_byRows Then
    resto = nroElemento Mod nrOfRow
    rowNr = resto + IIf(resto = 0, nrOfRow, 0)
    colNr = Int(nroElemento / nrOfRow) + IIf(resto = 0, 0, 1)
 Else
    resto = nroElemento Mod nrOfCol
    rowNr = Int(nroElemento / nrOfCol) + IIf(resto = 0, 0, 1)
    colNr = resto + IIf(resto = 0, nrOfCol, 0)
  End If

  row2Write = rowNr
  
End Function

Public Function col2Write(nroElemento As Integer, nrOfRow As Integer, nrOfCol As Integer, bln_byRows As Boolean) As Integer
 
 If bln_byRows Then
    resto = nroElemento Mod nrOfRow
    rowNr = resto + IIf(resto = 0, nrOfRow, 0)
    colNr = Int(nroElemento / nrOfRow) + IIf(resto = 0, 0, 1)
 Else
    resto = nroElemento Mod nrOfCol
    rowNr = Int(nroElemento / nrOfCol) + IIf(resto = 0, 0, 1)
    colNr = resto + IIf(resto = 0, nrOfCol, 0)
  End If
  
  col2Write = colNr
 
End Function






Public Function checkCompiledCells(sh2check_txt As String, shParam_txt As String, rng_startListCells2check_txt As String) As String

'Call checkCompiledCells("Garantieverl|fffd|ngerungsvertrag", "parameters", "A26")

Dim sh2check As Worksheet
Dim shParam As Worksheet
Dim rng_startListCells2check As Range
Dim rng_endCells2check As Range
Dim rng_Cells2check As Range
Dim myCell2check As Range
Dim elencoCelle As String

On Error GoTo gestErrori



Set sh2check = ThisWorkbook.Worksheets(sh2check_txt)
Set shParam = ThisWorkbook.Worksheets(shParam_txt)
Set rng_startListCells2check = shParam.Range(rng_startListCells2check_txt)
Set rng_endCells2check = rng_startListCells2check.End(xlDown)
checkCompiledCells = ""

If rng_endCells2check.Row < 1000 Then
  Set rng_Cells2check = Range(rng_startListCells2check.Offset(1, 0), rng_startListCells2check.End(xlDown))
  Debug.Print rng_Cells2check.Address
  
  elencoCelle = ""
  For Each cl In rng_Cells2check.Cells
    Debug.Print "----------------------------------"
    Debug.Print cl.Value
    Set myCell2check = ThisWorkbook.Worksheets(sh2check_txt).Range(cl.Value)
    Debug.Print "valore cella (" & myCell2check.Address(False, False) & "): ###" & myCell2check.Value & "###"
    Debug.Print "merge area:" & myCell2check.MergeArea.Address(False, False)
    
On Error GoTo errore_formattazione
    If Len(myCell2check.Value) = 0 Or IsNull(myCell2check.Value) Or myCell2check.Value = "" Then 'IsNull(myCell2check.Value) Or myCell2check.Value = "" Or
      elencoCelle = elencoCelle & ";" & CStr(cl.Value) & "#" & cl.Offset(0, 1).Value
      
      'myCell2check.Interior.ColorIndex = 3   'rosso
      'myCell2check.Borders.ColorIndex = 3   'rosso
      myCell2check.MergeArea.Borders.ColorIndex = 3   'rosso
      myCell2check.MergeArea.Borders.LineStyle = xlContinuous
      'MsgBox "Sie m|fffd|ssen die Zellen ausf|fffd|llen:'" & CStr(cl.Value) & "' in '" & sh2check_txt & "' um die Datei drucken zu k|fffd|nnen.", vbCritical + vbOKOnly, "Achtung !!!"
      'Exit Function
    Else
       'myCell2check.MergeArea.Interior.ColorIndex = 0  'nessun colore
       myCell2check.MergeArea.Borders.ColorIndex = 0
       myCell2check.MergeArea.Borders.LineStyle = xlDash

    End If
On Error GoTo gestErrori
    
errore_formattazione:
    
  Next cl
  checkCompiledCells = Mid(elencoCelle, 2)
End If
Exit Function

gestErrori:
  errore = Err.Number & " - " & Err.Description
  Debug.Print errore
  MsgBox "Fehler beim |fffd|berpr|fffd|fen der Zellen, welche ausgef|fffd|llt h|fffd|tten sein m|fffd|ssen.", vbCritical + vbOKOnly, "Achtung !!!"
  Exit Function
  Resume


End Function

Public Sub step1()

  Dim eventState As Boolean
  
  'Application.ScreenUpdating = False
  pwd = "CNHi_Elements_!001"
  
  Sheets("Garantieverl|fffd|ngerungsvertrag").Visible = True
  Sheets("Garantieverl|fffd|ngerungsvertrag").Select
  ActiveWindow.View = xlNormalView
  
  row2start = ThisWorkbook.Worksheets("Garantieverl|fffd|ngerungsvertrag").Buttons("btn_step_1").BottomRightCell.Row + 2
  col2start = ThisWorkbook.Worksheets("Garantieverl|fffd|ngerungsvertrag").Buttons("btn_step_1").TopLeftCell.Column
  
  ThisWorkbook.Worksheets("Garantieverl|fffd|ngerungsvertrag").Range(Cells(row2start, col2start), Cells(row2start + 8, col2start + 1)).Select
  eventState = Application.EnableEvents
  Application.EnableEvents = False
  ThisWorkbook.Worksheets("Garantieverl|fffd|ngerungsvertrag").Unprotect pwd
      ThisWorkbook.Worksheets("Garantieverl|fffd|ngerungsvertrag").Range(Cells(row2start, col2start), Cells(row2start + 8, col2start + 1)).ClearContents
  ThisWorkbook.Worksheets("Garantieverl|fffd|ngerungsvertrag").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True, Password:=pwd
  Application.EnableEvents = True 'eventState
  
Application.ScreenUpdating = False
'Application.Dialogs(xlDialogPrint).Show
Dim bResult As Boolean
 bResult = Application.Dialogs(xlDialogPrint).Show
 If bResult Then
 ''' OK was clicked
 Else
 Exit Sub
 ''' Cancel was clicked.
 End If

    'Sheets("Garantieverl|fffd|ngerungsvertrag").PrintOut

  'print attachments if necesarry

If ThisWorkbook.Worksheets("Fahrzeugdaten").Range("B26").Value <> 1 Then
    Application.ScreenUpdating = False
    Sheets("Fahrzeugdaten").Select
    Sheets("Fahrzeugdaten").PrintOut
     Sheets("Garantieverl|fffd|ngerungsvertrag").Select
End If
 

 
   ThisWorkbook.Unprotect pwd
    Sheets("T&C").Visible = True
    Sheets("T&C").Select
    ActiveWindow.View = xlNormalView
    Sheets("T&C").PrintOut
    Sheets("T&C").Visible = False
 
    Application.ScreenUpdating = True
    Sheets("Garantieverl|fffd|ngerungsvertrag").Visible = True
    Sheets("Garantieverl|fffd|ngerungsvertrag").Select
   
    
   '  ActiveWindow.View = xlNormalView
Application.ScreenUpdating = True

ThisWorkbook.Protect pwd

End Sub


Public Sub step2()

  Dim OutApp As Object
  Dim OutMail As Object
  Dim wb As Workbook
  Dim ws As Worksheet
  Dim sht2check As Worksheet
  Dim eventState As Boolean
  
  Set wb = ThisWorkbook
  Set ws = wb.Worksheets("parameters")
  Set sht2check = wb.Worksheets("Garantieverl|fffd|ngerungsvertrag")
  
  destEmail = "elements.contract@cnhind.com"
  pwd = "CNHi_Elements_!001"

  'controllo che sia tutto compilato
    res = checkCompiledCells(sht2check.Name, "parameters", "A26")
    If res <> "" Then
      arrValori = Split(res, ";")
      txt_for_msgbox = ""
      
      For Each couple In arrValori
        arr_cella_messaggio = Split(couple, "#")
        txt_Cell2compile_rng = arr_cella_messaggio(0)
        txt_Cell2compile_msg = arr_cella_messaggio(1)
        txt_for_msgbox = txt_for_msgbox & vbCrLf & txt_Cell2compile_msg & " (" & txt_Cell2compile_rng & ")"
      Next couple
      
      MsgBox "Sie m|fffd|ssen folgende Zellen im Tabellenblatt 'Garantieverl|fffd|ngerungsvertrag' ausf|fffd|llen:" & vbCrLf & txt_for_msgbox & vbCrLf & vbCrLf & "um die Datei drucken zu k|fffd|nnen.", vbCritical + vbOKOnly, "ACHTUNG !!!"
      Exit Sub
    End If


   '' If Worksheets("Garantieverl|fffd|ngerungsvertrag").Range("C118").Value = "KA" Then
  ''  Worksheets("parameters").Range("D50").Value = "K"
  ''  Else
  ''  msg = MsgBox(ws.Range("E48").Value, vbYesNo, "Technical price")
  ''  Worksheets("parameters").Range("D50").Value = IIf(msg = vbYes, "Y", "N")
  ''  End If
  
  bodyText = ws.Range("E54").Value & vbCrLf & ws.Range("E55").Value & vbCrLf & vbCrLf
  lastMsgRow = ws.Range("E55").End(xlDown).Row
  For riga = 56 To lastMsgRow
    bodyText = bodyText & ws.Range("E" & riga) & vbCrLf
  Next riga
  'Debug.Print bodyText
 
  'verifico che outlook sia installato
  If testOutlook Then
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
  
    On Error Resume Next
    With OutMail
      .To = destEmail
      .CC = ""
      .BCC = ""
      .Subject = ws.Range("D53").Value
      .body = bodyText
  
      .Display
    End With
    
    MsgBox "Falls Outlook nicht konfiguriert ist, senden Sie uns bitte eine E-Mail in dem Sie den Schritten 1 und 2 folgen, welche am Ende des Servicevertrages notiert sind.", vbCritical + vbOKOnly, "ACHTUNG !!!"
  
    On Error GoTo 0
  
    Set OutMail = Nothing
    Set OutApp = Nothing
  Else
    MsgBox "Es scheint, als sei Outlook nicht auf Ihrem Computer installiert. Bitte senden Sie uns eine E-Mail in dem Sie den Schritten 1 und 2 folgen.", vbCritical + vbOKOnly, "ACHTUNG !!!"
  End If
  
  row2start = sht2check.Buttons("btn_step_1").BottomRightCell.Row + 2
  col2start = sht2check.Buttons("btn_step_1").TopLeftCell.Column
  
  eventState = Application.EnableEvents
  Application.EnableEvents = False
  sht2check.Unprotect pwd
        'DESTINATARIO
        sht2check.Cells(row2start, col2start).Value = "TO"
        sht2check.Cells(row2start, col2start + 1).Value = destEmail
        
        'SOGGETTO
        sht2check.Cells(row2start + 1, col2start).Value = "SUBJECT"
        sht2check.Cells(row2start + 1, col2start + 1).Value = ws.Range("D53").Value
        
        'TESTO
        sht2check.Cells(row2start + 2, col2start).Value = "MAIL BODY"
        firstMsgRow = 54
        idx = 0
        For riga = firstMsgRow To lastMsgRow
          sht2check.Cells(row2start + 2 + idx, col2start + 1) = ws.Range("E" & riga)
          idx = idx + 1
        Next riga
        sht2check.Cells(row2start + 3, col2start).Select
        
  sht2check.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=True, Password:=pwd
  Application.EnableEvents = True 'eventState

End Sub

Public Function testOutlook() As Boolean
  
  Dim oObj As Object
 
  On Error Resume Next
  
  Set oObj = GetObject(, "Outlook.Application")
    
  If Err.Number <> 0 Then
    ' Outlook NON |fffd| aperto, tentativo di creare l'oggetto
    Err.Clear
    Set oObj = CreateObject("Outlook.Application")
      If Err.Number <> 0 Then
        'Err.Clear
        'MsgBox "Outlook NON |fffd| installato"
        'GoTo ExitPoint
        Err.Clear
      Else
        'Outlook |fffd| installato
        oObj.Close
        testOutlook = True
      End If
  Else
    'Outlook |fffd| aperto (quindi |fffd| installato)
    oObj.Close
    testOutlook = True
  End If
 
 
ExitPoint:
  Set oObj = Nothing
  Exit Function
 
End Function

Public Function Pprotect()

Dim wSheet As Worksheet



    For Each wSheet In Worksheets

        wSheet.Protect Password:="CNHi_Elements_!001", _
        UserInterFaceOnly:=True
        wSheet.EnableSelection = xlNoRestrictions
        
Next wSheet

End Function

Public Function UnPPProtect(myPassword As String)
Application.ScreenUpdating = False
ActiveWorkbook.ActiveSheet.Unprotect Password:=myPassword
ActiveWorkbook.Unprotect Password:=myPassword
End Function




Attribute VB_Name = "Questa_cartella_di_lavoro"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforePrint(Cancel As Boolean)

Dim res As String
Dim sht2check As Worksheet

Set sht2check = ThisWorkbook.Worksheets("Garantieverl|fffd|ngerungsvertrag")

res = checkCompiledCells(sht2check.Name, "parameters", "A26")
  
If res <> "" Then
  arrValori = Split(res, ";")
  txt_for_msgbox = ""
  
  For Each couple In arrValori
    arr_cella_messaggio = Split(couple, "#")
    txt_Cell2compile_rng = arr_cella_messaggio(0)
    txt_Cell2compile_msg = arr_cella_messaggio(1)
    txt_for_msgbox = txt_for_msgbox & vbCrLf & txt_Cell2compile_msg & " (" & txt_Cell2compile_rng & ")"
  Next couple
  
  MsgBox "Sie m|fffd|ssen diese Zellen ausf|fffd|llen:" & vbCrLf & txt_for_msgbox & vbCrLf & vbCrLf & "in 'Garantieverl|fffd|ngerungsvertrag', um die Datei drucken zu k|fffd|nnen.", vbCritical + vbOKOnly, "Achtung !!!"
  Cancel = True
End If

End Sub

'Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
'
'Dim res As String
'Dim sht2check As Worksheet
'
'Set sht2check = ThisWorkbook.Worksheets("Garantieverl|fffd|ngerungsvertrag")
'
'res = checkCompiledCells(sht2check.Name, "parameters", "A26")
'
'If res <> "" Then
'  arrValori = Split(res, ";")
'  txt_for_msgbox = ""
'
'  For Each couple In arrValori
'    arr_cella_messaggio = Split(couple, "#")
'    txt_Cell2compile_rng = arr_cella_messaggio(0)
'    txt_Cell2compile_msg = arr_cella_messaggio(1)
'    txt_for_msgbox = txt_for_msgbox & vbCrLf & txt_Cell2compile_msg & " (" & txt_Cell2compile_rng & ")"
'  Next couple
'
'  'MsgBox "Sie m|fffd|ssen diese Zellen ausf|fffd|llen:" & vbCrLf & txt_for_msgbox & vbCrLf & vbCrLf & "in 'Garantieverl|fffd|ngerungsvertrag', um die Datei speichern zu k|fffd|nnen.", vbCritical + vbOKOnly, "Achtung  !!!"
'  'Cancel = True
'End If
'
'End Sub


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
