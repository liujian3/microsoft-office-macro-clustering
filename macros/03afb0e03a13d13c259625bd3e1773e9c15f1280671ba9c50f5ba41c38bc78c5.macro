Attribute VB_Name = "EditorialMacros"
Option Explicit

Public Sub InitForEditorial()
'
' Code for editorial special setups that need to be called
'  after saving or on worksheet initialization.
'
    Application.ScreenUpdating = False

    Sheet7.Visible = xlSheetVeryHidden

    Application.ScreenUpdating = True
  
End Sub

Public Sub Workbook_BeforeClose_Editorial()
'
' Code for editorial special setups that need to be called
'  before close.
'
    Application.ScreenUpdating = False
      
    Sheet7.Visible = xlSheetVeryHidden

    Application.ScreenUpdating = True

End Sub



Attribute VB_Name = "EditorialMacros_Deactivate"
Option Explicit

Public Sub Workbook_Deactivate_Editorial()
  '
  ' Code for editorial special setups that need to be called
  '  when leaving the workbook without closing it. This, will
  '  also run when closing workbook.
  '
End Sub

Attribute VB_Name = "Module1"
Sub Clear()
'
' clear Macro
' Macro recorded 5/21/98 by Practitioners Publishing Company
'

    Msg = "Are you sure you want to clear all of the " & vbCrLf
    Msg = Msg & "input items from the worksheet?"
    Ans = MsgBox(Msg, vbYesNo, "PPC's Workpapers")
    
    If Ans = vbNo Then  ' User chose No.
    Exit Sub
    End If
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Range("L3RInputsClearTop").ClearContents
    Range("L3RInputsClearBot").ClearContents
    Sheet2.Select
    Range("ValuationHierEOP").EntireRow.Hidden = False
    Range("ValuationInputsClear").ClearContents
    Range("ValuationInputsClear").Rows.RowHeight = 25.5
    Range("A1").Select
    Sheet1.Select
    Range("AssetDescriptInputs").EntireRow.Hidden = False
    Sheet1.ShowButton.Visible = False
    With Sheet1.HideButton
        .Visible = True
        .Top = 45.75
        .Left = 381.75
    End With
    Range("InputClear").ClearContents
    Range("year_end").Value = "=PPC_GetBalanceSheetDate()"
    Range("Client").Value = "=PPC_GetClientName()"
    Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Client_Name") = "[Client Name]"
    Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date") = ""
    Application.ActiveWorkbook.ActiveSheet.EnableCalculation = False
    Application.ActiveWorkbook.ActiveSheet.EnableCalculation = True
    Range("Input_Sheet").Select
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub


Sub Rollforward()
'
' Rollforward Macro
' Macro recorded 6/19/00 by Practitioners Publishing Company
'
    Dim AnchorCell As Range, myRange As Range
    Dim Msg, Style, TITLE, Response

    Beep
    Msg = "Prior period amounts will be replaced with the " & vbCrLf & _
           "later period amounts. Do you want to continue?"   ' Define message.
    Style = vbOKCancel + vbQuestion + vbDefaultButton1 ' Define buttons.
    TITLE = "PPC's Workpapers"  ' Define title.
    Response = MsgBox(Msg, Style, TITLE)
    If Response = vbCancel Then    ' User chose Cancel.
        Exit Sub
    End If
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Set myRange = Nothing
    
    Sheet6.Select
    Range("L3QInputsClearTop").ClearContents
    Range("L3QInputsClearBot").ClearContents
    Range("A1").Select
    Sheet5.Select
    Range("L3RInputsClearTop").ClearContents
    Range("L3RInputsClearBot").ClearContents
    Range("A1").Select
    Sheet2.Select
    Range("ValuationHierEOP").Copy
    Range("ValuationHierBOP").PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Application.CutCopyMode = False
    Range("ValuationHierEOP").ClearContents
    For Each Row In Range("ValuationInputsClear")
        If Row.EntireRow.Hidden = False Then
            Row.EntireRow.AutoFit
            Row.RowHeight = Row.RowHeight + 12.75
        Else
        End If
    Next Row
    Range("A1").Select
    Sheet1.Select
    Range("FairValueEOPCol").Copy
    Range("FairValueBOPCol").PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Application.CutCopyMode = False
    Range("RollforwardInputClear").ClearContents
    For c = Range("FairValueBOPCol").Cells.Count + (Range("FairValueBOPCol").Row - 1) To Range("FairValueBOPCol").Row Step -1
        If Cells(c, Range("FairValueBOPCol").Column) = 0 Then
            Sheets(Array("Input", "Valuation Inputs")).Select
            Sheets("Input").Activate
            Cells(c, Range("FairValueBOPCol").Column).Select
            Selection.EntireRow.Select
            Selection.Delete Shift:=xlUp
            Sheets("Input").Select
            Call AddRow
            Application.EnableEvents = False
            Application.ScreenUpdating = False
        Else
        End If
    Next c
    Range("Preparer").ClearContents
    Range("Date_prepared").ClearContents
    Range("Input_Sheet").Select
    Range("year_end").Value = "=PPC_GetBalanceSheetDate()"
    Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date") = ""
    Application.ActiveWorkbook.ActiveSheet.EnableCalculation = False
    Application.ActiveWorkbook.ActiveSheet.EnableCalculation = True
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    
End Sub

Attribute VB_Name = "Module2"
Sub AddRow()

    Dim OriginalCell As Range, TargetCell As Range
'    Set OriginalCell = ActiveCell
      
    Application.EnableEvents = False
    Application.ScreenUpdating = False
        
    Sheets("Input").Select
    Set OriginalCell = ActiveCell
    Range("AssetDescriptInputs").Cells(Range("AssetDescriptInputs").Cells.Count).Select
    Selection.UnMerge
    Set TargetCell = ActiveCell
    Sheets(Array("Input", "Valuation Inputs")).Select
    Sheets("Input").Activate
    ActiveCell.Select
    Selection.EntireRow.Select
    Selection.Insert Shift:=xlDown
    TargetCell.Select
    Sheets("Input").Select
    Range(ActiveCell.Offset(-1, 0), ActiveCell.Offset(-1, 1)).Select
    Selection.Merge
    With Selection
        .VerticalAlignment = xlBottom
        .Orientation = 0
        .MergeCells = True
    End With
    Selection.Offset(1, 0).Select
    Range(Selection, Selection.Offset(0, 1)).Select
    Selection.Merge
    With Selection
        .VerticalAlignment = xlBottom
        .Orientation = 0
        .MergeCells = True
    End With
    Range(ActiveCell.Offset(0, 0), ActiveCell.Offset(0, Range("InputTable") _
    .Columns.Count - 2)).Select
    Selection.Copy
    Selection.Offset(-1, 0).PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
         SkipBlanks:=False, Transpose:=False
    Application.CutCopyMode = False
    Selection.Offset(1, 0).Select
    
    Selection.Resize(, Selection.Columns.Count - 1).ClearContents

    Sheets("Valuation Inputs").Select
    Range(ActiveCell, ActiveCell.Offset(0, Range _
    ("ValuationInputsClear").Columns.Count)).Select
    Selection.Copy
    Selection.Offset(-1, 0).PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
         SkipBlanks:=False, Transpose:=False
    Application.CutCopyMode = False
    Selection.Offset(1, 0).Select
    Selection.Offset(0, 1).Resize(, Selection.Columns.Count - 1).ClearContents
    Range("A1").Select
    Sheets("Input").Select
    OriginalCell.Select
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True

End Sub

Sub HideRows()

    Dim TargetCell As Range
    Set TargetCell = ActiveCell
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Range("AssetDescriptInputs").UnMerge
    For Each cell In Range("AssetDescriptInputs").Cells
        If Application.WorksheetFunction.CountIf(Range(cell, cell.Offset(0, Range("InputTable").Columns.Count - 1)), "") = Range("InputTable").Columns.Count Then
            Sheets(Array("Input", "Valuation Inputs")).Select
            Sheets("Input").Activate
            cell.EntireRow.Select
            Selection.EntireRow.Hidden = True
            Sheets("Valuation Inputs").Activate
            Selection.EntireRow.Hidden = True
            Sheets("Input").Select
        Else
            cell.EntireRow.Hidden = False
        End If
        cell.Select
        Range(cell, cell.Offset(0, 1)).Select
        Selection.Merge
        With Selection
            .VerticalAlignment = xlBottom
            .Orientation = 0
            .MergeCells = True
        End With
    Next cell
    Sheets("Valuation Inputs").Select
    Range("A1").Select
    Sheets("Input").Select
    Sheet1.HideButton.Visible = False
    With Sheet1.ShowButton
        .Visible = True
        .Top = 45.75
        .Left = 381.75
    End With
    TargetCell.Select
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
  
End Sub
Sub ShowRows()
    
    Dim TargetCell As Range
    Set TargetCell = ActiveCell
    
    Application.ScreenUpdating = False
    
    Range("ValuationHierEOP").EntireRow.Hidden = False
    Range("AssetDescriptInputs").EntireRow.Hidden = False
    Sheet1.ShowButton.Visible = False
    With Sheet1.HideButton
        .Visible = True
        .Top = 45.75
        .Left = 381.75
    End With
    TargetCell.Select
    
    Application.ScreenUpdating = True

End Sub


Attribute VB_Name = "Module3"
Sub Testo2()
Attribute Testo2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Testo2 Macro
'

'
    Application.GoTo Reference:=Sheet5.Range("A1")
    Application.GoTo Reference:=Sheet5.Range("B73").Offset(0, 1).End(xlDown).End(xlDown)
    Application.GoTo Reference:=Rows(ActiveCell.Row).Columns(4)
 
 'Sheet5.Range("B73").Offset(0, 1).End(xlDown).End(xlDown).Select
End Sub
Attribute VB_Name = "PPC_CodeModule"
Public Sub MacroCheck()
'Do nothing. This sub will be called from .NET code to check macro is enabled or not
End Sub


Public Function PPC_GetClientName()
  PPC_GetClientName = Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Client_Name")
End Function

Public Function PPC_GetBalanceSheetDate()
  PPC_GetBalanceSheetDate = Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date")
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ShowButton, 104, 1, MSForms, CommandButton"
Attribute VB_Control = "HideButton, 102, 2, MSForms, CommandButton"
'Private Sub Worksheet_Activate()
'Range("A1").Select
'End Sub

Private Sub HideButton_Click()

    Call HideRows

End Sub

Private Sub ShowButton_Click()

    Call ShowRows

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

    If Not Intersect(Target, Range("AssetCategoryInputs")) Is Nothing And _
    ActiveCell.Value = "Add a new asset class" Then
'    ActiveCell.Value = "Add a new asset category" Then
        frmAddCategory.Show
    ElseIf Not Intersect(Target, Range("AssetClassInputs")) Is Nothing And _
    ActiveCell.Value = "Add a new asset subclass" Then
'    ActiveCell.Value = "Add a new asset class" Then
        frmAddClass.Show
    End If

End Sub


Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()

    
    Dim OriginalCell As Range

    Application.ScreenUpdating = False

    Set OriginalCell = ActiveCell
    For Each Row In Range("ValuationInputsClear")
        If Row.EntireRow.Hidden = False Then
            Row.EntireRow.AutoFit
            Row.RowHeight = Row.RowHeight + 12.75
        Else
        End If
    Next Row

    OriginalCell.Select

    Application.ScreenUpdating = True

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
'
'
    Application.ScreenUpdating = False

    If Not Application.Intersect(Range("ValuationHierEOP"), Range(Target.Address)) _
        Is Nothing Then
        Dim myCell As Range
        Set myCell = Worksheets("Valuation Inputs").Cells(Target.Row, Worksheets("Valuation Inputs").Range("ValuationApproach").Column)
        If Target.Cells.Count > 1 Then
            GoTo RowSize
        ElseIf Target.Value = 1 And myCell = "Cost" Or Target.Value = 1 And myCell = "Income" Then
            Msg = "This asset was valued under the " & LCase(myCell.Value) & _
                  " appraoch. Generally under this appraoch, " & vbCrLf & "assets " & _
                  "are not valued using GAAP Level 1 (active market) inputs. " & _
                  "Rather, they are " & vbCrLf & "generally valued using Level " & _
                  "3 inputs (or perhaps Level 2 inputs)." & vbCrLf & vbCrLf & _
                  "Are you sure this asset was valued using Level 1 inputs?"
            Ans = MsgBox(Msg, vbYesNo, "PPC's Workpapers")
            If Ans = vbNo Then
                Target.Select
                Target.Value = ""
                Else
            End If
        End If
    End If
    If Not Application.Intersect(Range("ValuationApproach"), Range(Target.Address)) _
        Is Nothing Then

        Dim myCellHier As Range
        Set myCellHier = Worksheets("Valuation Inputs").Cells(Target.Row, Worksheets("Valuation Inputs").Range("ValuationHierEOP").Column)

        If Target.Cells.Count > 1 Then
            GoTo RowSize
        ElseIf Target.Value = "Cost" Or Target.Value = "Income" Then
            If myCellHier = 1 Then
                Msg = "This asset was valued using GAAP Level 1 " & _
                      "(active market) inputs. However," & vbCrLf & _
                      "under the " & LCase(Target.Value) & _
                      " appraoch, assets are generally not valued " & _
                      "using Level 1 inputs." & vbCrLf & "Rather, " & _
                      "they are valued using Level 3 inputs (or perhaps " & _
                      "Level 2 inputs)." & vbCrLf & vbCrLf & "Are you " & _
                      "sure this asset was valued under the " & _
                      LCase(Target.Value) & " appraoch using Level 1 inputs?"
                Ans = MsgBox(Msg, vbYesNo, "PPC's Workpapers")
                If Ans = vbNo Then
                    Target.Select
                    Target.Value = ""
                    Else
                End If
            End If
        End If
    End If
RowSize:
    If Not Application.Intersect(Range("ValuationInputsClear"), Range(Target.Address)) _
        Is Nothing Then
        For Each Row In Target
            Row.EntireRow.AutoFit
            Row.RowHeight = Row.RowHeight + 12.75
        Next Row
    Else
    End If

    Application.ScreenUpdating = True

End Sub

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()

    
    Dim nmeRange As Name
    Dim strRange As String
    Dim myRange As Range
    Dim myRow As Range
    Dim n As Long

    Application.ScreenUpdating = False

    Range("RBDTableFlex").EntireRow.Hidden = False

    For Each nmeRange In ActiveWorkbook.Names
        strRange = nmeRange.Name
        If strRange Like "RBD*Format" Then
            Range(strRange).Select
            Set myRange = Selection
            myRange.NumberFormat = "_(* #,##0_);_(* (#,##0);_(* ""-""_);_(@_)"
            For n = 1 To myRange.Columns.Count
                myRange.Columns(n).Select
                For Each cell In Selection
                    If cell.Value <> "" Then
                        cell.NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""_);_(@_)"
                        Exit For
                    End If
                Next cell
            Next n
'**********************************
'Uncomment Block this portion of code before submitting for review
            For Each myRow In myRange.Rows
            myRow.Select
            If Application.Sum(myRow) = 0 Then
                myRow.EntireRow.Hidden = True
            End If
            Next myRow
'*******************************
        End If
    Next nmeRange
'**********************************
'Uncomment Block this portion of code before submitting for review
    For Each cell In Range("RBDCatTotsL0")
        cell.Select
        If cell.Value = "" Then
            cell.EntireRow.Hidden = True
            If cell.Offset(0, -2).Value <> "" Then
                cell.Offset(1, 0).EntireRow.Hidden = True
            Else
                If cell.Offset(1, -1).Value = "" Then
                    cell.Offset(1, 0).EntireRow.Hidden = True
                ElseIf cell.Offset(1, -1).Value <> "" Then
                    cell.Offset(2, 0).EntireRow.Hidden = False
                Else
                    cell.Offset(2, 0).EntireRow.Hidden = True
                End If
                cell.Offset(0, -2).Select
                ActiveCell.End(xlUp).Select
                ActiveCell.EntireRow.Hidden = True
            End If
        End If
    Next cell

'*******************************

    Range("A1").Select 'Uncomment this
    Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()

    If ThisWorkbook.bIsSaving Then Exit Sub
   
    Dim nmeRange As Name
    Dim strRange As String
    Dim myRange As Range
    Dim myRow As Range
    Dim n As Long

    Application.ScreenUpdating = False

    Range("NRBDTableFlex").EntireRow.Hidden = False

    For Each nmeRange In ActiveWorkbook.Names
        strRange = nmeRange.Name
        If strRange Like "NRBD*Format" Then
            Range(strRange).Select
            Set myRange = Selection
            myRange.NumberFormat = "_(* #,##0_);_(* (#,##0);_(* ""-""_);_(@_)"
            For n = 1 To myRange.Columns.Count
                myRange.Columns(n).Select
                For Each cell In Selection
                    If cell.Value <> "" Then
                        cell.NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""_);_(@_)"
                        Exit For
                    End If
                Next cell
            Next n
'**********************************
'Uncomment Block this portion of code before submitting for review
            For Each myRow In myRange.Rows
            myRow.Select
            If Application.Sum(myRow) = 0 Then
                myRow.EntireRow.Hidden = True
            End If
            Next myRow
'*******************************
        End If
    Next nmeRange
'**********************************
'Uncomment Block this portion of code before submitting for review
    For Each cell In Range("NRBDCatTotsL0")
        cell.Select
        If cell.Value = "" Then
            cell.EntireRow.Hidden = True
            If cell.Offset(0, -2).Value <> "" Then
                cell.Offset(1, 0).EntireRow.Hidden = True
            Else
                If cell.Offset(1, -1).Value = "" Then
                    cell.Offset(1, 0).EntireRow.Hidden = True
                ElseIf cell.Offset(1, -1).Value <> "" Then
                    cell.Offset(2, 0).EntireRow.Hidden = False
                Else
                    cell.Offset(2, 0).EntireRow.Hidden = True
                End If
                cell.Offset(0, -2).Select
                ActiveCell.End(xlUp).Select
                ActiveCell.EntireRow.Hidden = True
            End If
        End If
    Next cell
'
'*******************************

    Range("A1").Select  'Uncomment this
    Application.ScreenUpdating = True

End Sub

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()

    If ThisWorkbook.bIsSaving Then Exit Sub

    Dim nmeRange As Name
    Dim strRange As String
    Dim myRange As Range
    Dim myRow As Range
    Dim n As Long

    Application.ScreenUpdating = False

    Range("L3RTableFlex").EntireRow.Hidden = False

    For Each nmeRange In ActiveWorkbook.Names
        strRange = nmeRange.Name
        If strRange Like "L3R*Format" Then
            Range(strRange).Select
            Set myRange = Selection
            myRange.NumberFormat = "_(* #,##0_);_(* (#,##0);_(* ""-""_);_(@_)"
            For n = 1 To myRange.Columns.Count
                myRange.Columns(n).Select
                For Each cell In Selection
                    If cell.Value <> "" Then
                        cell.NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""_);_(@_)"
                        Exit For
                    End If
                Next cell
            Next n
'**************************************
            For Each myRow In myRange.Rows
            myRow.Select
            If Application.Count(myRow) = 0 Then
                myRow.EntireRow.Hidden = True
            End If
            Next myRow
'********************************
        End If
    Next nmeRange
'***************************************************
    For Each cell In Range("L3RCatTotsBeg")
        cell.Select
        If cell.Value = "" Then
            cell.EntireRow.Hidden = True
            If cell.Offset(0, -2).Value <> "" Then
                cell.Offset(1, 0).EntireRow.Hidden = True
            Else
                If cell.Offset(1, -1).Value = "" Then
                    cell.Offset(1, 0).EntireRow.Hidden = True
                ElseIf cell.Offset(1, -1).Value <> "" Then
                    cell.Offset(2, 0).EntireRow.Hidden = False
                Else
                    cell.Offset(2, 0).EntireRow.Hidden = True
                End If
                cell.Offset(0, -2).Select
                ActiveCell.End(xlUp).Select
                ActiveCell.EntireRow.Hidden = True
            End If
        End If
    Next cell
    If Range("L3ROtherBeg").Value = "" And Range("L3ROtherBeg").Offset(0, 11).Value = "" Then
        Range("L3RInputsClearOth").Value = ""
    End If
'*************************************************************

    Range("A1").Select  'Uncomment this
    Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
  If ThisWorkbook.bIsSaving Then Exit Sub

    Application.ScreenUpdating = False


    For Each cell In Range("L3QFairValue")
        If cell.Value = "" And _
        Application.WorksheetFunction.CountIf(Range(cell.Offset(0, 1), cell.Offset(0, 3)), "") = 3 Then
            cell.EntireRow.Hidden = True
        ElseIf cell.Value = "" And _
        Application.WorksheetFunction.CountIf(Range(cell.Offset(0, 1), cell.Offset(0, 3)), "") < 3 Then
            Range(cell.Offset(0, 1), cell.Offset(0, 3)).ClearContents
            cell.EntireRow.Hidden = True
        Else
            cell.EntireRow.Hidden = False
'            If cell.Offset(0, -2).Value = "" Then
'                cell.Offset(0, -2).Select
'                Selection.End(xlUp).Select
'                ActiveCell.EntireRow.Hidden = False
'            End If
        End If
    Next cell
    For Each cell In Range("L3QCat")
'        If cell = Range("B65") Then
'            Beep
'        End If
'        If cell.Value = "" And cell.Offset(0, 2).Value = "" Then
'            cell.EntireRow.Hidden = True
''        ElseIf cell.Value <> "" And cell.Offset(1, 0).Value = "" Then
''        ElseIf Sheet5.Rows(cell.Row).EntireRow.Hidden = False And _
''         Left(cell.End(xlDown).Offset(-2, 1).Value, 5) = "Total" And _
''          cell.End(xlDown).Offset(-2, 2).Value <> "" Then
'        ElseIf cell.Value = "" And cell.Offset(0, 2).Value <> "" Then
'            cell.EntireRow.Hidden = False
'        ElseIf cell.Value <> "" And cell.Offset(0, 2).Value <> "" Then
'            cell.EntireRow.Hidden = False

        If Sheet5.Rows(cell.Row).EntireRow.Hidden = False Then
'            If Left(cell.Offset(0, 1).End(xlDown).End(xlDown).Value, 5) = "Total" Then 'And
'              cell.End(xlDown).Offset(-2, 2).Value <> "" Then
            If cell.Value = "" And cell.Offset(0, 2).Value = "" Then
                cell.EntireRow.Hidden = True
            ElseIf cell.Value = "" And cell.Offset(0, 2).Value <> "" Then
                cell.EntireRow.Hidden = False
            ElseIf cell.Value <> "" And cell.Offset(0, 2).Value <> "" Then
                cell.EntireRow.Hidden = False
            ElseIf cell.Value <> "" And cell.Offset(0, 2).Value = "" Then
                If Sheet5.Rows(cell.Row).Columns(3).End(xlDown).End(xlDown).Offset(0, 1).Value <> 0 And _
                 Sheet5.Rows(cell.Row).Columns(3).End(xlDown).End(xlDown).Offset(0, 11).Value = 0 Then
                    cell.EntireRow.Hidden = True
                ElseIf Sheet5.Rows(cell.Row).Columns(3).End(xlDown).End(xlDown).Offset(0, 1).Value = 0 And _
                 Sheet5.Rows(cell.Row).Columns(3).End(xlDown).End(xlDown).Offset(0, 11).Value <> 0 Then
                    cell.EntireRow.Hidden = False
                ElseIf Sheet5.Rows(cell.Row).Columns(3).End(xlDown).End(xlDown).Offset(0, 1).Value = "" And _
                 Sheet5.Rows(cell.Row).Columns(3).End(xlDown).End(xlDown).Offset(0, 11).Value = "" Then
                    cell.EntireRow.Hidden = True
                ElseIf Sheet5.Rows(cell.Row).Columns(3).End(xlDown).End(xlDown).Offset(0, 1).Value <> "" And _
                 Sheet5.Rows(cell.Row).Columns(3).End(xlDown).End(xlDown).Offset(0, 11).Value <> "" Then
                    cell.EntireRow.Hidden = False
'                If Sheet5.Rows(cell.Offset(0, 1).End(xlDown).End(xlDown).Row).Columns(4).Value <> 0 And _
'                 Sheet5.Rows(cell.Offset(0, 1).End(xlDown).End(xlDown).Row).Columns(14).Value = 0 Then
'                    cell.EntireRow.Hidden = True
'                ElseIf Sheet5.Rows(cell.Offset(0, 1).End(xlDown).End(xlDown).Row).Columns(4).Value = 0 And _
'                 Sheet5.Rows(cell.Offset(0, 1).End(xlDown).End(xlDown).Row).Columns(14).Value <> 0 Then
'                    cell.EntireRow.Hidden = False
'                ElseIf Sheet5.Rows(cell.Offset(0, 1).End(xlDown).End(xlDown).Row).Columns(4).Value = "" And _
'                 Sheet5.Rows(cell.Offset(0, 1).End(xlDown).End(xlDown).Row).Columns(14).Value = "" Then
''                    MsgBox cell.Worksheet.Name & " " & cell.Address
''                    MsgBox Sheet5.Rows(cell.Row).Columns(3).End(xlDown).Worksheet.Name & " " & Sheet5.Rows(cell.Row).Columns(3).End(xlDown).End(xlDown).Offset(0, 1).Address
''                    MsgBox Sheet5.Rows(cell.Offset(0, 1).End(xlDown).Row).Worksheet.Name & " " & Sheet5.Rows(cell.Offset(0, 1).End(xlDown).Row).Address
''                    MsgBox Sheet5.Rows(cell.Offset(0, 1).End(xlDown).End(xlDown).Row).Columns(4).Address & " " & Sheet5.Rows(cell.Offset(0, 1).End(xlDown).End(xlDown).Row).Columns(4).Worksheet.Name
'                    cell.EntireRow.Hidden = True
''                ElseIf Sheet5.Range(cell.Address).Offset(0, 1).End(xlDown).End(xlDown).Columns(4).Value <> "" And _
''                 Sheet5.Range(cell.Address).Offset(0, 1).End(xlDown).End(xlDown).Columns(14).Value = <> Then
''
''                    cell.EntireRow.Hidden = True
'                ElseIf Sheet5.Rows(cell.Offset(0, 1).End(xlDown).End(xlDown).Row).Columns(4).Value > 0 And _
'                 Sheet5.Rows(cell.Offset(0, 1).End(xlDown).End(xlDown).Row).Columns(14).Value > 0 Then
'                    cell.EntireRow.Hidden = False
                End If
'            Else
'                cell.EntireRow.Hidden = True
            End If
'        ElseIf Sheet5.Rows(cell.Row).EntireRow.Hidden = False Then
'            cell.EntireRow.Hidden = False
'        Else
'            cell.EntireRow.Hidden = True
        End If
    Next cell
    Sheet6.Select
    Range("A1").Select


End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
'
'
    Application.ScreenUpdating = False

    If Not Application.Intersect(Range("L3QInputsClearTop"), Range(Target.Address)) _
        Is Nothing Then
        For Each Row In Target
            Row.EntireRow.AutoFit
'            Row.RowHeight = Row.RowHeight + 12.75
        Next Row
     End If
    If Not Application.Intersect(Range("L3QInputsClearBot"), Range(Target.Address)) _
        Is Nothing Then
        For Each Row In Target
            Row.EntireRow.AutoFit
'            Row.RowHeight = Row.RowHeight + 12.75
        Next Row
        Else
    End If

    Application.ScreenUpdating = True

End Sub



Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'
' This code is protected and passworded when complete.
'

Private Const XL4MACRO As String = "PPCSecurityMacro"
Private Const INFORMATION As String = "INFORMATION"

Private Const bIsIDxR As Boolean = False        ' Set True if Interactive Disclosure Library
#Const IDxR = 0                                 ' Set 1 if Interactive Disclosure Library

      ' Declare security class

Private Sub Workbook_Activate()

  
  InitForEditorial
  
  On Error GoTo 0
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
  Workbook_BeforeClose_Editorial
End Sub



Public Function bIsSaving() As Boolean
  bIsSaving = False
End Function

Attribute VB_Name = "frmAddCategory"
Attribute VB_Base = "0{BE784A53-452A-4FE0-B882-8F234E2F76D7}{DF2BF59E-A14C-4428-99B4-B1258B8CBF20}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdAddCat_Click()

    Dim nmeRange As Name
    Dim strRange As String
    Dim myRange As Range
    Dim myRow As Range
    Dim n As Long
    Dim i As Long
    Dim wks As Worksheet
    Dim OriginalCell As Range
    Set OriginalCell = ActiveCell

    If txtCatLabel.Value = "" Then
        txtCatLabel.SetFocus
        MsgBox "Please enter a asset class name"
        Exit Sub
    End If
 
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    frmAddCategory.Hide
    
    Sheet3.Name = "RBD"
    Sheet4.Name = "NRBD"
    Sheet5.Name = "L3R"
    Sheet6.Name = "L3Q"
    Sheet7.Visible = xlSheetVisible
   
    Sheets("Dep Valid").Select
    Range("AssetCategoryValidTable").Select
    Selection.End(xlDown).Select
    Selection.EntireRow.Insert
 
    ActiveCell.Value = UCase(Left(txtCatLabel.Value, 1)) + LCase(Right(txtCatLabel.Value, Len(txtCatLabel.Value) - 1))
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "'s", "s")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "~", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "`", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "!", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "@", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "#", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "$", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "%", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "^", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "&", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "*", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "(", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, ")", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "-", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "+", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "=", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "{", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "}", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "[", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "]", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "|", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, ":", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, ";", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "<", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, ">", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, ",", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "/", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, "'", " ")
    ActiveCell.Value = Application.WorksheetFunction.Substitute(ActiveCell.Value, """", " ")
   
    OriginalCell.Value = ActiveCell.Value
    Range("AssetCategoryValidTableRange").Select
    ActiveWorkbook.Worksheets("Dep Valid").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Dep Valid").Sort.SortFields.Add KEY:=Range( _
        "AssetCategoryValidTableRange"), SortOn:=xlSortOnValues, _
        Order:=xlAscending, DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("Dep Valid").Sort
        .SortFields.Clear
        .SortFields.Add KEY:=Range("AssetCategoryValidTableRange"), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        .SetRange Range("AssetCategoryValidTableRange")
        .Orientation = xlTopToBottom
        .Apply
    End With
    
    Range(Range("NewAssetCategory"), Range("NewAssetCategory").Offset(5, 0)).Select
    Selection.EntireRow.Insert
    With ActiveCell
        .Value = Application.WorksheetFunction.Proper(OriginalCell.Value)
        .Font.Underline = True
    End With
    
    ActiveCell.Offset(2, 0).Select
    ActiveCell.Name = Application.WorksheetFunction.Substitute(Application.Proper(ActiveCell.Offset(-2, 0).Value), " ", "")
    ActiveCell.Value = "Add a new asset subclass"
'    ActiveCell.Value = "Add a new asset class"
    Range(ActiveCell, ActiveCell.Offset(1, 0)).Name = Application.WorksheetFunction.Substitute(Application.Proper(ActiveCell.Offset(-2, 0).Value & " Range"), " ", "")
    Range("a1").Select
    
'When adding an asset category (class), this portion of code loops
'through all of the worksheets to find the four disclosure
'worksheets (RBD, NRBD, L3R, and L3Q) and perform the following:
'add the new category (class) rows, label caption, and formulas. It
'also amends the "grand total" range to include the new category (class).

    For Each wks In ActiveWorkbook.Worksheets
        If wks.CodeName = "Sheet3" Or wks.CodeName = "Sheet4" Or wks.CodeName = "Sheet5" Or wks.CodeName = "Sheet6" Then
            wks.Select
            For Each nmeRange In ActiveWorkbook.Names
                strRange = nmeRange.Name
                If strRange Like wks.Name & "Other*" Then
                    Range(strRange).Select
                    Selection.EntireRow.Insert
                    Selection.EntireRow.Insert
                    If wks.CodeName = "Sheet3" Or wks.CodeName = "Sheet4" Or wks.CodeName = "Sheet5" Then
                        Range(ActiveCell.Offset(5, 0), ActiveCell.Offset(5, 0).End(xlToRight)).Select
                        Selection.Offset(-3, 0).Select
    '                    Range(ActiveCell.Offset(2, 0), ActiveCell.Offset(2, 0).End(xlToRight)).Select
                        Selection.Copy
                        Selection.Offset(-2, 0).Select
                        ActiveSheet.Paste
                        Application.CutCopyMode = False
                        Selection.Replace What:=ActiveCell.Offset(2, -2).Address, Replacement:=ActiveCell.Offset(0, -2).Address, LookAt:=xlPart, _
                            SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                            ReplaceFormat:=False
                        ActiveCell.Offset(0, -2).Value = OriginalCell.Value
                        For Each cell In Selection
                            ActiveWorkbook.Names(Mid("'" & cell.Offset(5, 0).Formula, 12, InStr("'" & cell.Offset(5, 0).Formula, ")") - 12)).RefersTo = _
                               "=" & Range(Mid("'" & cell.Offset(5, 0).Formula, 12, InStr("'" & cell.Offset(5, 0).Formula, ")") - 12)).Address & "," & cell.Address
                        Next cell
                    End If
                    If wks.CodeName = "Sheet6" Then
                        ActiveCell.Resize(, 6).Offset(2, -2).Select
'                        ActiveCell.Resize(, 4).Offset(2, 0).Select
                        Selection.Copy
                        Selection.Offset(-2, 0).Resize(2, 6).Select
'                        Selection.Offset(-2, 0).Select
'                        Selection.PasteSpecial Paste:=xlPasteFormulas
                        ActiveSheet.Paste
                        Application.CutCopyMode = False
                        ActiveCell.Resize(1, 6).Offset(1, 0).ClearContents
                        ActiveCell.Resize(, 3).Offset(, 3).Select
                        Selection.WrapText = True
                        Selection.ClearContents
                        ActiveCell.Resize(1, 3).Offset(1, 0).Select
                        Selection.Interior.Color = RGB(255, 255, 204)
                        ActiveCell.Resize(, 1).Offset(-1, -3).Select
                        ActiveCell.Value = OriginalCell.Value
                    End If
                End If
            Next nmeRange
            If wks.CodeName = "Sheet5" Then
                Selection.Offset(0, 1).Resize(, Selection.Columns.Count - 4).Select
'                Range(ActiveCell.Offset(0, 1), ActiveCell.Offset(0, 1).End(xlToRight).Offset(0, -3)).Select
                With Selection
                    .Interior.Pattern = xlNone
                    .ClearContents
                End With
                ActiveWorkbook.Names("L3RInputsClearBot").RefersTo = _
                    "=" & Range("L3RInputsClearBot").Address & "," & Selection.Address
            End If
            If wks.CodeName = "Sheet6" Then
'                Selection.Offset(0, 1).Resize(, Selection.Columns.Count - 4).Select
                Selection.Resize(, 6).Select
'                With Selection.Borders(xlEdgeBottom)
                Selection.Borders(xlEdgeBottom).LineStyle = xlLineStyleNone
'                        .Weight = xlThin
'                        .Color = RGB(192, 192, 192)
'                End With
'                Range(ActiveCell.Offset(1, 0), ActiveCell.Offset(1, 5)).Select
                Selection.Offset(1, 0).Select
                With Selection.Borders(xlEdgeTop)
                        .Weight = xlHairline
                        .Color = RGB(192, 192, 192)
                End With
                Selection.Offset(1, 0).Select
                Selection.BorderAround Color:=RGB(192, 192, 192), Weight:=xlThin
'                With Selection.BorderAround
'                        .Weight = xlThin
'                        .LineStyle = xlContinuous
'                        .Color = RGB(192, 192, 192)
'                End With
                Selection.Offset(-2, 3).Resize(, Selection.Columns.Count - 3).Select
'                With Selection
'                    .WrapText = True
'                    .Interior.Pattern = xlNone
'                    .ClearContents
'                End With
                ActiveWorkbook.Names("L3QInputsClearBot").RefersTo = _
                    "=" & Range("L3QInputsClearBot").Address & "," & Selection.Address
            End If
        End If
        Range("A1").Select
    Next wks
    
    Sheets("Input").Select
    OriginalCell.Select
    
    Sheet3.Name = "Recur Measure Disc"
    Sheet4.Name = "Non Recur Measure Disc"
    Sheet5.Name = "Level 3 Recon"
    Sheet6.Name = "Level 3 Quantitative"
    Sheet7.Visible = xlSheetVeryHidden

    
    txtCatLabel.Value = ""
    txtCatLabel.SetFocus
        
    Application.ScreenUpdating = True
    Application.EnableEvents = True
        
End Sub

Private Sub cmdCloseCat_Click()
    
    Unload Me
    ActiveCell.Value = ""
    
End Sub

Private Sub Label1_Click()

End Sub
Attribute VB_Name = "frmAddClass"
Attribute VB_Base = "0{C03E0604-AB15-43BB-9270-C1AB9AB7FA2A}{A122549C-0AF0-44D0-AD6E-562350A95FF2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdAddClass_Click()

    Dim wks As Worksheet
    Dim OriginalCell As Range
    Dim myAnchor As Range
    Dim myAnchor2 As Range
    Dim myNewRow As Range
    Dim myRng As Range
    Dim myCell As Range
    Dim myRngToSkip As Range
    Set OriginalCell = ActiveCell
    
    If txtClassLabel.Value = "" Then
        txtClassLabel.SetFocus
        MsgBox "Please enter an asset subclass name"
'        MsgBox "Please enter an asset class name"
        Exit Sub
    End If

    Application.EnableEvents = False
    Application.ScreenUpdating = False

    frmAddClass.Hide

    Sheet3.Name = "RBD"
    Sheet4.Name = "NRBD"
    Sheet5.Name = "L3R"
    Sheet6.Name = "L3Q"
    Sheet7.Visible = xlSheetVisible
    
'This portion of the code updates the dependent validation
'tables within the hidden "Dep Valid" worksheet and saves
'the user's data entry from the Add(Sub)Class form for later use.

    ActiveCell.Value = UCase(Left(txtClassLabel.Value, 1)) + LCase(Right(txtClassLabel.Value, Len(txtClassLabel.Value) - 1))
    OriginalCell.Value = ActiveCell.Value
    Sheets("Dep Valid").Select
    Range(Application.WorksheetFunction.Substitute(Application.Proper(OriginalCell.Offset(0, -1).Value), " ", "")).Select

    If ActiveCell.Offset(1, 0).Value = "" Then
        ActiveCell.Offset(1, 0).Value = OriginalCell.Value
    Else
        ActiveCell.Offset(1, 0).Select
        Selection.EntireRow.Insert
        ActiveCell.Value = OriginalCell.Value
        ActiveCell.Offset(-1, 0).Select
    End If
    Range(ActiveCell, ActiveCell.End(xlDown)).Select

    ActiveWorkbook.Worksheets("Dep Valid").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Dep Valid").Sort.SortFields.Add KEY:= _
        Selection, SortOn:=xlSortOnValues, _
        Order:=xlAscending, DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("Dep Valid").Sort
        .SortFields.Clear
        .SortFields.Add KEY:=Selection, _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        .SetRange Selection
        .Orientation = xlTopToBottom
        .Apply
    End With

    Range("a1").Select

'This portion of code informs the user if an asset subclass was
'added for a particular asset class, but other assets
'within that asset class were not assigned an asset subclass.
'This situation would cause those assets not to appear on the
'disclosure worksheets.

    Sheet1.Select
    OriginalCell.Select
    
    Dim AssetCategoryInputs As Range
    Dim AssetClassInputs As Range
    Dim myValue As String
    Dim myFormula As String
    Dim MissingClasses As Variant 'could be an error
    
    myValue = Selection.Offset(0, -1).Address
   
    With Worksheets("Input")
        Set AssetCategoryInputs = .Range("AssetCategoryInputs")
        Set AssetClassInputs = .Range("AssetClassInputs")
        myFormula = "SUMPRODUCT(--(" & AssetCategoryInputs.Address & "=" & myValue & "),--(" & AssetClassInputs.Address & "=" & Chr(34) & Chr(34) & "))"
        MissingClasses = Evaluate(myFormula)
    End With

    If IsError(MissingClasses) Then
        GoTo DisclosurePopulation
    ElseIf MissingClasses = 1 Then
        Msg = "There is one other asset included in " & _
              "the '" & OriginalCell.Offset(0, -1).Value & _
              "' class " & vbCrLf & "that does not " & _
              "have an assigned asset subclass. Add an " & _
              "asset subclass for the item in this asset " & _
              "class without one."
'              "' category " & vbCrLf & "that does not " & _
'              "have an assigned asset class. To ensure " & _
'              "the accuracy of the " & vbCrLf & _
'              "disclosure worksheets, please input an " & _
'              "asset class for the cell bordered in red."
        Ans = MsgBox(Msg, vbOKOnly, "PPC's Workpapers")
    ElseIf MissingClasses > 1 Then
        Msg = "There are " & MissingClasses & " assets " & _
              "included in the '" & OriginalCell.Offset _
              (0, -1).Value & "' class " & vbCrLf & _
              "that do not have an assigned asset subclass. " & _
              "Add an asset subclass for any items in " & vbCrLf & _
              "this asset class without one."
'              "that do not have an assigned asset class. " & _
'              "To ensure the accuracy of the " & vbCrLf & _
'              "disclosure worksheets, please input " & _
'              "an asset class for the cells bordered " & _
'              "in red."
        Ans = MsgBox(Msg, vbOKOnly, "PPC's Workpapers")
    Else
    End If
    
'When adding an initial asset class (subclass) for a particular cat (class),
'this portion of code loops through the disclosure sheets and
'performs the following: creates a cat (class) heading based equal
'to the existing cat (class) caption, changes and moves the existing
'cat (class) caption to be a cat (class) summary total caption, and adds
'the new class (subclass) caption in between the 2 cat (class) caption rows. It
'also moves the cat (class) formulas to the class (subclass) level and adds a
'"sum" formula to the various columns of the cat (class) row to sum
'the new class (subclass) level. Also, added new "format" range name to
'the new class (subclass) line (to properly put the "$" when the sheet
'is activated).
DisclosurePopulation:
    For Each wks In ActiveWorkbook.Worksheets
    
    If wks.CodeName = "Sheet3" Or wks.CodeName = "Sheet4" Or wks.CodeName = "Sheet5" Or wks.CodeName = "Sheet6" Then
        wks.Select
        Range("B1").Select
        Columns("B:B").Select
        Selection.EntireRow.Hidden = False
        Selection.Find(What:=OriginalCell.Offset(0, -1).Value, After:=ActiveCell, _
            LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, _
            SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False).Select
        If Range(Application.WorksheetFunction.Substitute(Application.Proper(ActiveCell.Value) _
            , " ", "")).Offset(2, 0).Value = "" And Range(Application.WorksheetFunction.Substitute( _
            Application.Proper(ActiveCell.Value), " ", "")).Offset(3, 0).Value = "" Then
            ActiveCell.EntireRow.Insert
            ActiveCell.EntireRow.Insert
            Set myNewRow = ActiveCell
            ActiveCell.Value = ActiveCell.Offset(2, 0).Value
            With ActiveCell.Offset(2, 1)
                .Value = "Total " & LCase(ActiveCell.Value)
                .IndentLevel = 1
            End With
            ActiveCell.Offset(1, 1).Value = OriginalCell.Value
            ActiveCell.Offset(2, 0).ClearContents
            If wks.CodeName <> "Sheet6" Then
                ActiveCell.Offset(0, 1).Select
                ActiveCell.Offset(0, 0).End(xlUp).Select
                Range(ActiveCell.Offset(0, 1), ActiveCell.Offset(0, 1).End(xlToRight)).Select
                Selection.Offset(-1, 0).Select
                Selection.Copy
                Selection.Offset(myNewRow.Row - Selection.Row + 1, 0).Select
                Set myAnchor = Selection
                Selection.PasteSpecial Paste:=xlPasteFormulasAndNumberFormats, Operation:=xlNone, _
                    SkipBlanks:=False, Transpose:=False
                Application.CutCopyMode = False
                Selection.Name = wks.Name & Application.WorksheetFunction.Substitute(Application.Proper(ActiveCell.Offset(-1, -2).Value), " ", "") & "Format"
                Selection.Replace What:="$B$*)", Replacement:=ActiveCell.Offset(-1, -2).Address & ")", LookAt:=xlPart, _
                    SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                    ReplaceFormat:=False
            End If
            If wks.CodeName = "Sheet5" Or wks.CodeName = "Sheet6" Then
'            If wks.CodeName = "Sheet5" Then
                If wks.CodeName = "Sheet5" Then
                    Selection.Offset(0, 1).Resize(, Selection.Columns.Count - 4).Select
                    Selection.Offset(1, 0).Select
                    Set myRngToSkip = Selection
'This Copy & Paste is to add the same number
'formats and condtional formatting to the
'new asset class (subclass) row
                    Selection.Copy
                    Selection.Offset(-1, 0).Select
                    Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                        SkipBlanks:=False, Transpose:=False
                    Application.CutCopyMode = False
                    Selection.Interior.Pattern = xlNone 'This line not in WPC
'This changes the format of the orginal Category (Class)
'row to that of a Category (Class) total row
                    With Selection.Offset(1, 0).Interior
                        .Pattern = xlSolid
                        .PatternColorIndex = xlAutomatic
                        .Color = 13434879
                    End With
'''*****Code in WPCbut not in WPN...not sure why.*****
''This For Each loop removes the conditional
''formating from the original Category (Class) row
'                    For Each cell In Selection.Offset(1, 0)
'                        With cell
'                            .FormatConditions(1).Delete
'                        End With
'                    Next cell
''This adds the Category (Class) total formulas to the
''to the input cells of the original Category (Class)
''row [which is now the Category (Class) total row].
'''*****End of WPC only code*****
                    myAnchor.Offset(1, 0).FormulaR1C1 = "=IF(COUNT(R[-1]C)=0,"""",SUM(R[-1]C))"
'''*****Code in WPCbut not in WPN...not sure why.*****
''This clears any inputs and conditional formatting
''copied from the original Category (Class) row to the new
''Asset Class (Subclass) row, and adds the appropriate
''conditional formatting for a Asset Class (Subclass) row.
''[Conditional formatting formulas differ slightly
''between a Category (Class) row and an Asset Class (Subclass) row.]
'                    Selection.ClearContents
'                    Set CondFormatCell = ActiveCell.Offset(2500, 0)
'                    CondFormatCell.Value = ActiveCell.FormatConditions(1).Formula1
'                    CondFormatCell.Replace _
'                     What:="$B$*)", Replacement:=ActiveCell.Offset(-1, -3).Address & ")"
'                    For Each cell In Selection
'                        With cell
'                            .FormatConditions(1).Delete
'                            .FormatConditions.Add Type:=xlExpression, _
'                             Formula1:=CondFormatCell.Formula
'                            .FormatConditions(1).Interior.Color = RGB(255, 0, 0)
'                        End With
'                    Next cell
'                    CondFormatCell.ClearContents
'''*****End of WPC only code*****
                End If
                If wks.CodeName = "Sheet6" Then
                    Selection.Offset(2, 2).Resize(, 4).Select
'                    Selection.Offset(2, 0).Select
                    Selection.Copy
                    Selection.Offset(-1, 0).Select
                    ActiveSheet.Paste
                    Application.CutCopyMode = False
                    Selection.Offset(-1, 0).Select
                    With Selection
                        .Interior.Pattern = xlSolid
                        .Interior.Color = RGB(255, 255, 204)
                        .ClearContents
                    End With
'''*****Code in WPCbut not in WPN...not sure why.*****
'                    For Each c In Selection
'                        c.BorderAround Color:=RGB(192, 192, 192), Weight:=xlThin
'                    Next c
'''*****End of WPC only code*****
                    Selection.Offset(2, 0).Select
                    With Selection
                        .Interior.Pattern = xlSolid
                        .Interior.Color = RGB(255, 255, 204)
                        .ClearContents
                    End With
                    Selection.Offset(0, 1).Resize(, Selection.Columns.Count - 1).Select
                    Set myRngToSkip = Selection
                    Selection.Offset(-2, -3).Resize(, Selection.Columns.Count + 3).Select
                    With Selection.Borders(xlEdgeTop)
                            .Weight = xlThin
                            .Color = RGB(192, 192, 192)
                    End With
    '                Range(ActiveCell.Offset(1, 0), ActiveCell.Offset(1, 5)).Select
                    Selection.Offset(1, 0).Select
                    With Selection.Borders(xlEdgeTop)
                            .Weight = xlHairline
                            .Color = RGB(192, 192, 192)
                    End With
                    Selection.Offset(1, 0).Select
                    With Selection.Borders(xlEdgeTop)
                            .Weight = xlHairline
                            .Color = RGB(192, 192, 192)
                    End With
                    Selection.Offset(-1, 3).Resize(, Selection.Columns.Count - 3).Select
'                    Selection.Offset(-1, 0).Select
                End If

'                ActiveWorkbook.Names("L3RInputsClearBot").RefersTo = _
'                    "=" & Range("L3RInputsClearBot").Address & "," & Selection.Address
                ActiveWorkbook.Names(ActiveSheet.Name & "InputsClearBot").RefersTo = _
                    "=" & Range(ActiveSheet.Name & "InputsClearBot").Address & "," & Selection.Address
'                For Each myCell In Range("L3RInputsClearBot").Cells
                Set myRng = Nothing
                For Each myCell In Range(ActiveSheet.Name & "InputsClearBot").Cells
                    If Intersect(myCell, myRngToSkip) Is Nothing Then
                        If myRng Is Nothing Then
                            Set myRng = myCell
                        Else
                            Set myRng = Union(myRng, myCell)
                        End If
                    Else
                    End If
                Next myCell
'                myRng.Name = "L3RInputsClearBot"
                myRng.Name = ActiveSheet.Name & "InputsClearBot"
            Else
                Selection.Offset(1, 0).Select
                Selection.FormulaR1C1 = "=IF(COUNT(R[-1]C)=0,"""",SUM(R[-1]C))"
            End If
            

'*********************************
'When adding a 2nd asset class (subclass) for a particular cat (class) ,
'this portion of code loops through the disclosure sheets and
'performs the following: adds a new line (and caption) above
'the 1st class (subclass) and copies the 1st class (subclass) formulas to the 2nd
'class (subclass) row. It also adds the new row to the "format" range
'and changes the cat (class) total formulas to sum the new 2nd class (subclass)
'level. Consider creating a new "caption" range name to
'alphabetically sort the class (subclass) captions for the new range.

        ElseIf Range(Application.WorksheetFunction.Substitute(Application.Proper(ActiveCell.Value) _
        , " ", "")).Offset(2, 0).Value <> "" And Range(Application.WorksheetFunction.Substitute( _
        Application.Proper(ActiveCell.Value), " ", "")).Offset(3, 0).Value = "" Then
            ActiveCell.Offset(1, 1).Select
            ActiveCell.EntireRow.Insert
            ActiveCell.Value = OriginalCell.Value
            If wks.CodeName <> "Sheet6" Then
                Range(ActiveCell.Offset(2, 1), ActiveCell.Offset(2, 1).End(xlToRight)).Select
                Selection.Offset(-1, 0).Select
                Selection.Copy
                Selection.Offset(-1, 0).Select
                Set myAnchor = Selection
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                    SkipBlanks:=False, Transpose:=False
                Application.CutCopyMode = False
                Range(Selection, Selection.Offset(1, 0)).Select
                ActiveWorkbook.Names(wks.Name & Application.WorksheetFunction.Substitute( _
                Application.Proper(ActiveCell.Offset(-1, -2).Value), " ", "") & "Format").RefersTo = _
                   "=" & Selection.Address
                Selection.Resize(1).Select
                Selection.Offset(2, 0).FormulaR1C1 = "=IF(COUNT(R[-2]C:R[-1]C)=0,"""",SUM(R[-2]C:R[-1]C))"
            End If
            If wks.CodeName = "Sheet5" Or wks.CodeName = "Sheet6" Then
                If wks.CodeName = "Sheet5" Then
                    Selection.Offset(0, 1).Resize(, Selection.Columns.Count - 4).Select
'''*****This code was used in WPC to replace the following "with selection" which is
'''still in WPN...not sure why.*****
''This Copy & Paste is to add the condtional formatting from
''the 1st Asset Class (Subclass) row to the new (2nd) Asset Class (Subclass) row
''and clear the inputs copied to 2nd Asset Class (Subclass) row.
'                    Selection.Offset(1, 0).Copy
'                    Selection.PasteSpecial Paste:=xlPasteAllExceptBorders, Operation:=xlNone, _
'                        SkipBlanks:=False, Transpose:=False
'                    Application.CutCopyMode = False
'                    Selection.ClearContents
'''*****End of WPC only code*****
                    With Selection
                        .Interior.Pattern = xlNone
                        .ClearContents
                    End With
                End If
                If wks.CodeName = "Sheet6" Then
                    Selection.Offset(1, 1).Resize(, 4).Select
                    Selection.Copy
                    Selection.Offset(-1, 0).Select
                    ActiveSheet.Paste
                    Application.CutCopyMode = False
                    Selection.Offset(0, -2).Resize(, Selection.Columns.Count + 2).Select
                    With Selection.Borders(xlEdgeTop)
                        .Weight = xlHairline
                        .Color = RGB(192, 192, 192)
                    End With
                    Selection.Offset(0, 3).Resize(, Selection.Columns.Count - 3).Select
                    Selection.ClearContents
                End If
                ActiveWorkbook.Names(ActiveSheet.Name & "InputsClearBot").RefersTo = _
                    "=" & Range(ActiveSheet.Name & "InputsClearBot").Address & "," & Selection.Address
            End If

'When adding a 3rd asset class (subclass) (or higher) for a particular cat (class),
'this portion of code loops through the disclosure sheets and
'performs the following: adds a new row (and caption) between
'the initial two class (subclass) rows and copies the formula from the
'bottom class (subclass) row to the new row. Consider creating a new
'"caption" range name to alphabetically sort the class (subclass) captions
'for the new range.

        ElseIf Range(Application.WorksheetFunction.Substitute(Application.Proper(ActiveCell.Value) _
        , " ", "")).Offset(2, 0).Value <> "" And Range(Application.WorksheetFunction.Substitute( _
        Application.Proper(ActiveCell.Value), " ", "")).Offset(3, 0).Value <> "" Then
            ActiveCell.Offset(2, 1).Select
            ActiveCell.EntireRow.Insert
            ActiveCell.Value = OriginalCell.Value
'            If wks.CodeName <> "Sheet5" Or wks.CodeName <> "Sheet6" Then
            If wks.CodeName <> "Sheet5" And wks.CodeName <> "Sheet6" Then
                Range(ActiveCell.Offset(-1, 1), ActiveCell.Offset(-1, 1).End(xlToRight)).Select
                Selection.Copy
                Selection.Offset(1, 0).Select
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                    SkipBlanks:=False, Transpose:=False
                Application.CutCopyMode = False
            End If
            If wks.CodeName = "Sheet5" Or wks.CodeName = "Sheet6" Then
                If wks.CodeName = "Sheet5" Then
                    ActiveCell.End(xlDown).Select
                    Range(ActiveCell.Offset(0, 1), ActiveCell.Offset(0, 1).End(xlToRight)).Select
                    If ActiveCell.Offset(0, -1).Value = "   Total trading securities" Or _
                        ActiveCell.Offset(0, -1).Value = "   Total available for sale securities" Then
                        Selection.Offset((Range(wks.Name & Application.WorksheetFunction.Substitute(Application.Proper(OriginalCell.Offset(0, -1).Value), " ", "") & "Format").Rows.Count + 1) * -1, 0).Select
                    Else
                        Selection.Offset(Range(wks.Name & Application.WorksheetFunction.Substitute(Application.Proper(OriginalCell.Offset(0, -1).Value), " ", "") & "Format").Rows.Count * -1, 0).Select
                    End If
                    Selection.Copy
                    Selection.Offset(1, 0).Select
                    Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                        SkipBlanks:=False, Transpose:=False
                    Application.CutCopyMode = False
                    Selection.Offset(0, 1).Resize(, Selection.Columns.Count - 4).Select
                    Selection.ClearContents
                End If
                If wks.CodeName = "Sheet6" Then
'                    Selection.Offset(1, 1).Resize(, 4).Select
                    Selection.Offset(1, -1).Resize(, 6).Select
                    With Selection.Borders(xlEdgeTop)
                        .Weight = xlHairline
                        .Color = RGB(192, 192, 192)
                    End With
                    Selection.Offset(0, 2).Resize(, 4).Select
                    Selection.Copy
                    Selection.Offset(-1, 0).Select
                    ActiveSheet.Paste
                    Application.CutCopyMode = False
'                    Selection.Offset(0, -2).Resize(, Selection.Columns.Count + 2).Select
                    Selection.Offset(0, -2).Resize(, 6).Select
                    With Selection.Borders(xlEdgeTop)
                        .Weight = xlHairline
                        .Color = RGB(192, 192, 192)
                    End With
'                    Selection.Offset(0, 3).Resize(, Selection.Columns.Count - 3).Select
                    Selection.Offset(0, 3).Resize(, 3).Select
                    Selection.ClearContents
                End If
                ActiveWorkbook.Names(ActiveSheet.Name & "InputsClearBot").RefersTo = _
                    "=" & Range(ActiveSheet.Name & "InputsClearBot").Address & "," & Selection.Address
            End If
        End If
    End If
    Range("A1").Select
    Next wks
'This portion of code returns the user to the cell on the Input
'worksheet where the user clicked the "add new asset subclass"
''worksheet where the user clicked the "add new asset class"
'validation list, clears the text from the AddClass form, and
'sets the focus of the AddClass form back to the data entry
'field, so it is ready to go when activated again.

    Sheets("Input").Select
    OriginalCell.Select

    Sheet3.Name = "Recur Measure Disc"
    Sheet4.Name = "Non Recur Measure Disc"
    Sheet5.Name = "Level 3 Recon"
    Sheet6.Name = "Level 3 Quantitative"
    Sheet7.Visible = xlSheetVeryHidden

    txtClassLabel.Value = ""
    txtClassLabel.SetFocus

    Application.ScreenUpdating = True
    Application.EnableEvents = True

End Sub

Private Sub cmdCloseClass_Click()

    Unload Me
    ActiveCell.Value = ""

End Sub



INQUEST-PP=macro
