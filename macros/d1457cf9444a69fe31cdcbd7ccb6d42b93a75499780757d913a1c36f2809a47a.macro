Attribute VB_Name = "CSMPCalculations"

Private m_stringSubLevelDiscounts As String

'It works with an ActiveSheet
Private Sub DeleteMarketingProgrammsColumn()
    Utils.DeleteNearbyDuplicateColumn ActiveSheet, "GP less CWO %", "Marketing Programs"
End Sub

Public Sub UpdateMarketingProgramsWith14Prct()
    Dim strWorksheetsToHide(4) As String
    Dim i As Integer
    Dim j As Integer
    Dim wsCurrent As Worksheet
    
    If Utils.Authentication = False Then Exit Sub
    
    strWorksheetsToHide(1) = Utils.STR_DIGITAL_COLOR_WORKSHEET
    'Peter said that 14% run is needed only on Digital & Color tab. 10-05-2017
    'strWorksheetsToHide(2) = Utils.STR_SOFTWARE_WORKSHEET
    'strWorksheetsToHide(3) = Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET
    
    For i = 1 To UBound(strWorksheetsToHide) - 1
        Dim nMPColIndex As Integer
        Dim nDealerPriceColIndex As Integer
        Dim nDealerPriceColLetter As String
        Dim nNumberOfUnitsColIndex As Integer
        Dim nTotalsRowIndex As Integer
        Dim strRange1 As String
        Dim strColumnLetter1 As String
        
        If strWorksheetsToHide(i) <> "" Then
        
            Set wsCurrent = ActiveWorkbook.Sheets(strWorksheetsToHide(i))
                
            nNumberOfUnitsColIndex = Utils.ColIndexExactMatch(wsCurrent, "Number of Units", 2)
            nMPColIndex = Utils.ColIndexExactMatch(wsCurrent, Utils.STR_COLUMN_NAME_AUTOMATIC_CREDIT, 2)    ' Marketing Programs
            nDealerPriceColIndex = Utils.ColIndexExactMatch(wsCurrent, "Dealer Price", 2)
            nDealerPriceColLetter = Utils.IndexToLetter(CLng(nDealerPriceColIndex))
            
            nTotalsRowIndex = Utils.FindTotalsRowIndex(strWorksheetsToHide(i))
            
            For j = 5 To nTotalsRowIndex
                If wsCurrent.Cells(j, nNumberOfUnitsColIndex).Value <> "" Then
                    Dim strTempFormula As String
                    Dim nAsteriskPosition As Integer
                    
                    'strTempFormula = wsCurrent.Cells(j, nMPColIndex).Formula
                    
                    'nAsteriskPosition = InStr(strTempFormula, "*")
                    
                    'If nAsteriskPosition > 1 Then
                    '    wsCurrent.Cells(j, nMPColIndex).Formula = Replace(strTempFormula, Mid(strTempFormula, nAsteriskPosition + 1), "0.14")
                    'End If
                    
                    wsCurrent.Cells(j, nMPColIndex).Formula = "=" & nDealerPriceColLetter & CStr(j) & "*0.14"
                End If
            Next j
            
            wsCurrent.Activate
        
            Call CSMPTotals.CSMPTotals
        
            wsCurrent.unprotect Utils.STR_DEFAULT_PASSWORD
            
            Call ApplyFormulasToGPColumns(strWorksheetsToHide(i), nTotalsRowIndex, False)
            
        End If
    Next i
    
    MsgBox "Standard Marketing Programs is finished successfully."
End Sub

Sub CSMPCalculations()
'
' Calculations Macro
' Macro recorded 10/2/2009 by Canon
'
' Keyboard Shortcut: Ctrl+m
'

Dim pw As String

pw = InputBox("Enter Password:")

If pw = "team" Then

    Dim a As Integer
    Dim BlankCounter As Integer
    
    
    Dim TotalsRowDigital As Integer
    Dim TotalsRowSoftware As Integer
    Dim TotalsRowFax As Integer
    
    Dim NumberOfUnitsColumn As Integer
    Dim DealerPriceColumn As Integer
    Dim CSMPCreditColumn As Integer
    Dim PlusPercentColumn As Integer
    Dim CSMPExtCreditColumn As Integer
    Dim CustomerPriceColumn As Integer
    Dim CustomerPriceExtColumn As Integer
    Dim AutomaticCreditColumn As Integer
    Dim AftermarketColumn As Integer
    Dim CWOColumn As Integer
    
    Dim CSMPCreditSum As Single
    Dim CSMPExtCreditSum As Single
    Dim CustomerPriceExtSum As Single
    Dim AutomaticCreditSum As Single
    Dim AftermarketSum As Single
    Dim CWOSum As Single
    
    Dim ItemClassColumn As Integer
    Dim LandedCostColumnDC As Integer
    Dim LandedCostColumnSoft As Integer
    Dim LandedCostColumnFPS As Integer
    
    Dim NumberOfUnitsSum As Single
    Dim NumberOfUnitsSumIR As Single
    Dim NumberOfUnitsSumGRAPHICS As Single
    Dim NumberOfUnitsSumPRODSYS As Single
    Dim NumberOfUnitsSumECOPY As Single
    Dim NumberOfUnitsSumSOFTWARE As Single
    Dim NumberOfUnitsSumMFP As Single
    Dim NumberOfUnitsSumPRINTER As Single
    Dim NumberOfUnitsSumSCANNER As Single
    
    Dim LandedCostSum As Single
    Dim LandedCostSumIR As Single
    Dim LandedCostSumGRAPHICS As Single
    Dim LandedCostSumPRODSYS As Single
    Dim LandedCostSumECOPY As Single
    Dim LandedCostSumSOFTWARE As Single
    Dim LandedCostSumMFP As Single
    Dim LandedCostSumPRINTER As Single
    Dim LandedCostSumSCANNER As Single
    
    Dim CustomerPriceSum As Single
    Dim CustomerPriceSumIR As Single
    Dim CustomerPriceSumGRAPHICS As Single
    Dim CustomerPriceSumPRODSYS As Single
    Dim CustomerPriceSumECOPY As Single
    Dim CustomerPriceSumSoftware As Single
    Dim CustomerPriceSumMFP As Single
    Dim CustomerPricePRINTER As Single
    Dim CustomerPriceSCANNER As Single
    
    Dim DealerPriceSum As Single
    Dim DealerPriceSumIR As Single
    Dim DealerPriceSumGRAPHICS As Single
    Dim DealerPriceSumPRODSYS As Single
    Dim DealerPriceSumECOPY As Single
    Dim DealerPriceSumSOFTWARE As Single
    Dim DealerPriceSumMFP As Single
    Dim DealerPriceSumPRINTER As Single
    Dim DealerPriceSumSCANNER As Single
    
    TotalsRow = 0
    ItemNumberColumn = 0
    NumberOfUnitsColumn = 0
    CSMPCreditColumn = 0
    CSMPExtCreditColumn = 0
    DealerPriceColumn = 0
    PlusPercentColumn = 0
    CustomerPriceColumn = 0
    CustomerPriceExtColumn = 0
    AutomaticCreditColumn = 0
    AftermarketColumn = 0
    CWOColumn = 0
    ItemClassColumn = 0
        
    TotalsRowDigital = 0
    TotalsRowSoftware = 0
    TotalsRowFax = 0
    
    LandedCostColumnDC = 999
    LandedCostColumnSoft = 999
    LandedCostColumnFPS = 999
    
    DealerPriceSum = 0
    AutomaticCreditSum = 0
    AftermarketSum = 0
    CWOSum = 0
    LandedCostSum = 0
    CSMPCreditsColumn = 0
    TotalPriceColumn = 0
    
    NumberOfUnitsSum = 0
    NumberOfUnitsSumIR = 0
    NumberOfUnitsSumGRAPHICS = 0
    NumberOfUnitsSumPRODSYS = 0
    NumberOfUnitsSumECOPY = 0
    NumberOfUnitsSumSOFTWARE = 0
    NumberOfUnitsSumMFP = 0
    NumberOfUnitsSumPRINTER = 0
    NumberOfUnitsSumSCANNER = 0
    
    LandedCostSum = 0
    LandedCostSumIR = 0
    LandedCostSumGRAPHICS = 0
    LandedCostSumPRODSYS = 0
    LandedCostSumECOPY = 0
    LandedCostSumSOFTWARE = 0
    LandedCostSumMFP = 0
    LandedCostSumPRINTER = 0
    LandedCostSumSCANNER = 0
    
    CustomerPriceSum = 0
    CustomerPriceSumIR = 0
    CustomerPriceSumGRAPHICS = 0
    CustomerPriceSumECOPY = 0
    CustomerPriceSumPRODSYS = 0
    CustomerPriceSumSoftware = 0
    CustomerPriceSumMFP = 0
    CustomerPriceSumPRINTER = 0
    CustomerPriceSumSCANNER = 0
    
    DealerPriceSum = 0
    DealerPriceSumIR = 0
    DealerPriceSumGRAPHICS = 0
    DealerPriceSumPRODSYS = 0
    DealerPriceSumECOPY = 0
    DealerPriceSumSOFTWARE = 0
    DealerPriceSumMFP = 0
    DealerPriceSumPRINTER = 0
    DealerPriceSumSCANNER = 0
    
    Application.ScreenUpdating = False
    
    ' update 08-24-2017 LC columns indexes must be less than 1 because they are used in Offset function on lines 568-617
    Sheets("Digital and Color").Select
    
    LandedCostColumnDC = Utils.ColIndexExactMatch(ActiveSheet, "LC", 2) - 1
    
    Sheets("Software").Select
    
    LandedCostColumnSoft = Utils.ColIndexExactMatch(ActiveSheet, "LC", 2) - 1
    
    Sheets("Fax, Printer, Scanner").Select
    
    LandedCostColumnFPS = Utils.ColIndexExactMatch(ActiveSheet, "LC", 2) - 1
        
If LandedCostColumnDC = 999 Then MsgBox "Landed Cost has not been entered on the Digital and Color tab.  Insert and try again.", vbExclamation
If LandedCostColumnSoft = 999 Then MsgBox "Landed Cost has not been entered on the Software tab.  Insert and try again.", vbExclamation
If LandedCostColumnFPS = 999 Then MsgBox "Landed Cost has not been entered on the Digital and Color tab.  Insert and try again.", vbExclamation

If LandedCostColumnDC <> 999 And LandedCostColumnSoft <> 999 And LandedCostColumnFPS <> 999 Then
            
    'Find all of the columns
    Sheets("Digital and Color").Select
    
    DeleteMarketingProgrammsColumn
    
    a = 0
    Do While a < 52
        Range("A2").Select
        If ActiveCell.Offset(0, a).Value = "Item #" Then ItemNumberColumn = a
        If ActiveCell.Offset(0, a).Value = "Number of Units" Then NumberOfUnitsColumn = a
        If ActiveCell.Offset(0, a).Value = "Dealer Price" Then DealerPriceColumn = a
        If ActiveCell.Offset(0, a).Value = "CSMP Credit" Then CSMPCreditColumn = a
        If ActiveCell.Offset(0, a).Value = "Discount Ratio" Then PlusPercentColumn = a
        If ActiveCell.Offset(0, a).Value = "CSMP Credit Extended" Then CSMPExtCreditColumn = a
        If ActiveCell.Offset(0, a).Value = "Net Dealer Cost before CWO" Then CustomerPriceColumn = a
        If ActiveCell.Offset(0, a).Value = "Net Dealer Cost Extended" Then CustomerPriceExtColumn = a
        If ActiveCell.Offset(0, a).Value = Utils.STR_COLUMN_NAME_AUTOMATIC_CREDIT Then AutomaticCreditColumn = a
        If ActiveCell.Offset(0, a).Value = "Aftermarket" Then AftermarketColumn = a
        If ActiveCell.Offset(0, a).Value = "CWO" Then CWOColumn = a
        If ActiveCell.Offset(0, a).Value = "Item Class" Then ItemClassColumn = a
        a = a + 1
    Loop
        
        'Find the Totals Row
        Sheets("Digital and Color").Select
        a = 0
        Do While a < Utils.N_MAX_ROWS_TO_SEARCH
            Range("A2").Select
            If ActiveCell.Offset(a, ItemNumberColumn).Value = "TOTALS" Then
            TotalsRowDigital = a
            a = Utils.N_MAX_ROWS_TO_SEARCH
            Else
            a = a + 1
            End If
        Loop
        
        Sheets("Software").Select
        
        DeleteMarketingProgrammsColumn
        
        a = 0
        Do While a < Utils.N_MAX_ROWS_TO_SEARCH
            Range("A2").Select
            If ActiveCell.Offset(a, ItemNumberColumn).Value = "TOTALS" Then
            TotalsRowSoftware = a
            a = Utils.N_MAX_ROWS_TO_SEARCH
            Else
            a = a + 1
            End If
        Loop
        
        Sheets("Fax, Printer, Scanner").Select
        
        DeleteMarketingProgrammsColumn
        
        a = 0
        Do While a < Utils.N_MAX_ROWS_TO_SEARCH
            Range("A2").Select
            If ActiveCell.Offset(a, ItemNumberColumn).Value = "TOTALS" Then
            TotalsRowFax = a
            a = Utils.N_MAX_ROWS_TO_SEARCH
            Else
            a = a + 1
            End If
        Loop
        
    'Calculate the Number of Units
    Sheets("Digital and Color").Select
    a = 0
    Do While a < TotalsRowDigital - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.Bold = True Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "iR" Then NumberOfUnitsSumIR = NumberOfUnitsSumIR + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Graphics" Then NumberOfUnitsSumGRAPHICS = NumberOfUnitsSumGRAPHICS + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Prod Sys" Then NumberOfUnitsSumPRODSYS = NumberOfUnitsSumPRODSYS + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        If ActiveCell.Offset(a, ItemClassColumn).Value = "eCopy" Then NumberOfUnitsSumECOPY = NumberOfUnitsSumECOPY + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        a = a + 1
        Else
        a = a + 1
    End If
    Loop

    Sheets("Software").Select
    a = 0
    Do While a < TotalsRowSoftware - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then
        Range("A5").Select
        NumberOfUnitsSumSOFTWARE = NumberOfUnitsSumSOFTWARE + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        a = a + 1
        Else
        a = a + 1
        End If
    Loop
    
    Sheets("Fax, Printer, Scanner").Select
    a = 0
    Do While a < TotalsRowFax - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.Bold = True Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "MFP" Then NumberOfUnitsSumMFP = NumberOfUnitsSumMFP + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Printer" Then NumberOfUnitsSumPRINTER = NumberOfUnitsSumPRINTER + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Scanner" Then NumberOfUnitsSumSCANNER = NumberOfUnitsSumSCANNER + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    ' as per request on 09-13-2011 do not add software to total units (NumberOfUnitsSumSOFTWARE)
    NumberOfUnitsSum = NumberOfUnitsSumIR + NumberOfUnitsSumGRAPHICS + NumberOfUnitsSumPRODSYS + NumberOfUnitsSumECOPY + NumberOfUnitsSumMFP + NumberOfUnitsSumPRINTER + NumberOfUnitsSumSCANNER
    
        
    'Calculate the Total Revenue (Dealer Price)
    Sheets("Digital and Color").Select
    a = 0
    Do While a < TotalsRowDigital - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "iR" Then DealerPriceSumIR = DealerPriceSumIR + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Graphics" Then DealerPriceSumGRAPHICS = DealerPriceSumGRAPHICS + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Prod Sys" Then DealerPriceSumPRODSYS = DealerPriceSumPRODSYS + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "eCopy" Then DealerPriceSumECOPY = DealerPriceSumECOPY + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop

    Sheets("Software").Select
    a = 0
    Do While a < TotalsRowSoftware - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then
        Range("A5").Select
        DealerPriceSumSOFTWARE = DealerPriceSumSOFTWARE + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
        End If
    Loop
    
    Sheets("Fax, Printer, Scanner").Select
    a = 0
    Do While a < TotalsRowFax - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "MFP" Then DealerPriceSumMFP = DealerPriceSumMFP + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Printer" Then DealerPriceSumPRINTER = DealerPriceSumPRINTER + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Scanner" Then DealerPriceSumSCANNER = DealerPriceSumSCANNER + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    DealerPriceSum = DealerPriceSumIR + DealerPriceSumGRAPHICS + DealerPriceSumPRODSYS + DealerPriceSumECOPY + DealerPriceSumSOFTWARE + DealerPriceSumMFP + DealerPriceSumPRINTER + DealerPriceSumSCANNER

    
    'Calculate the Total Net Dealer Cost (Net Dealer Cost before CWO)
    CustomerPriceSum = 0
    Sheets("Digital and Color").Select
    a = 0
    Do While a < TotalsRowDigital - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "iR" Then CustomerPriceSumIR = CustomerPriceSumIR + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Graphics" Then CustomerPriceSumGRAPHICS = CustomerPriceSumGRAPHICS + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Prod Sys" Then CustomerPriceSumPRODSYS = CustomerPriceSumPRODSYS + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "eCopy" Then CustomerPriceSumECOPY = CustomerPriceSumECOPY + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop

    Sheets("Software").Select
    a = 0
    Do While a < TotalsRowSoftware - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then
        Range("A5").Select
        CustomerPriceSumSoftware = CustomerPriceSumSoftware + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    Sheets("Fax, Printer, Scanner").Select
    a = 0
    Do While a < TotalsRowFax - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "MFP" Then CustomerPriceSumMFP = CustomerPriceSumMFP + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Printer" Then CustomerPriceSumPRINTER = CustomerPriceSumPRINTER + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Scanner" Then CustomerPriceSumSCANNER = CustomerPriceSumSCANNER + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    CustomerPriceSum = CustomerPriceSumIR + CustomerPriceSumGRAPHICS + CustomerPriceSumPRODSYS + CustomerPriceSumECOPY + CustomerPriceSumSoftware + CustomerPriceSumMFP + CustomerPriceSumPRINTER + CustomerPriceSumSCANNER

        
    'Calculate the Total Automatic Credit
    AutomaticCreditSum = 0
    
    Sheets("Digital and Color").Select
    a = 0
    Do While a < TotalsRowDigital - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        AutomaticCreditSum = AutomaticCreditSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, AutomaticCreditColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    Sheets("Software").Select
    a = 0
    Do While a < TotalsRowSoftware - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        AutomaticCreditSum = AutomaticCreditSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, AutomaticCreditColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    Sheets("Fax, Printer, Scanner").Select
    a = 0
    Do While a < TotalsRowFax - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        AutomaticCreditSum = AutomaticCreditSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, AutomaticCreditColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    'Calculate the Total Aftermarket
    AftermarketSum = 0
    
    Sheets("Digital and Color").Select
    a = 0
    Do While a < TotalsRowDigital - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        AftermarketSum = AftermarketSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, AftermarketColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    Sheets("Software").Select
    a = 0
    Do While a < TotalsRowSoftware - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        AftermarketSum = AftermarketSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, AftermarketColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    Sheets("Fax, Printer, Scanner").Select
    a = 0
    Do While a < TotalsRowFax - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        AftermarketSum = AftermarketSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, AftermarketColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    'Calculate the Total CWO
    CWOSum = 0
    
    Sheets("Digital and Color").Select
    a = 0
    Do While a < TotalsRowDigital - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        CWOSum = CWOSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, CWOColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    Sheets("Software").Select
    a = 0
    Do While a < TotalsRowSoftware - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        CWOSum = CWOSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, CWOColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    Sheets("Fax, Printer, Scanner").Select
    a = 0
    Do While a < TotalsRowFax - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        CWOSum = CWOSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, CWOColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
        
    'Calculate the Landed Cost
    Sheets("Digital and Color").Select
      
    a = 0
    Do While a < TotalsRowDigital - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 And ActiveCell.Offset(a, LandedCostColumnDC).Value <> "" Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "iR" And ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then LandedCostSumIR = LandedCostSumIR + (ActiveCell.Offset(a, LandedCostColumnDC).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Graphics" And ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then LandedCostSumGRAPHICS = LandedCostSumGRAPHICS + (ActiveCell.Offset(a, LandedCostColumnDC).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Prod Sys" And ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then LandedCostSumPRODSYS = LandedCostSumPRODSYS + (ActiveCell.Offset(a, LandedCostColumnDC).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "eCopy" And ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then LandedCostSumECOPY = LandedCostSumECOPY + (ActiveCell.Offset(a, LandedCostColumnDC).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    Sheets("Software").Select
    
    a = 0
    Do While a < TotalsRowSoftware - 3
        Range("A5").Select
        If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then
            If ActiveCell.Offset(a, NumberOfUnitsColumn).Value <> "" Then
                Range("A5").Select
                LandedCostSumSOFTWARE = LandedCostSumSOFTWARE + (ActiveCell.Offset(a, LandedCostColumnSoft).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
            End If
            a = a + 1
        Else
            a = a + 1
        End If
    Loop
        
    Sheets("Fax, Printer, Scanner").Select
    
    a = 0
    Do While a < TotalsRowFax - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "MFP" Then LandedCostSumMFP = LandedCostSumMFP + (ActiveCell.Offset(a, LandedCostColumnFPS).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Printer" Then LandedCostSumPRINTER = LandedCostSumPRINTER + (ActiveCell.Offset(a, LandedCostColumnFPS).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Scanner" Then LandedCostSumSCANNER = LandedCostSumSCANNER + (ActiveCell.Offset(a, LandedCostColumnFPS).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
        End If
    Loop
    
    LandedCostSum = LandedCostSumIR + LandedCostSumGRAPHICS + LandedCostSumPRODSYS + LandedCostSumECOPY + LandedCostSumSOFTWARE + LandedCostSumMFP + LandedCostSumPRINTER + LandedCostSumSCANNER
                     
            
    'Fill in the GP percentages
    'Get the column name involved in formula calculations 05-11-2017
    
    Call ApplyFormulasToGPColumns(Utils.STR_DIGITAL_COLOR_WORKSHEET, TotalsRowDigital, True)
    Call ApplyFormulasToGPColumns(Utils.STR_SOFTWARE_WORKSHEET, TotalsRowSoftware, True)
    Call ApplyFormulasToGPColumns(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET, TotalsRowFax, True)
    
    'Place cursor at top
    If Sheets("Fax, Printer, Scanner").Visible = True Then
        Sheets("Fax, Printer, Scanner").Select
        Range("A1").Select
    End If
    If Sheets("Software").Visible = True Then
        Sheets("Software").Select
        Range("A1").Select
    End If
     If Sheets("Digital and Color").Visible = True Then
        Sheets("Digital and Color").Select
        Range("A1").Select
    End If
        
    'Create the Profit Summary
        Sheets("Profit Summary").Visible = True
        Sheets("Profit Summary").Activate
        
        Range("E8").Value = NumberOfUnitsSum
        Range("E9").Value = DealerPriceSum
        Range("E10").Value = CustomerPriceSum
        Range("E11").Value = (CustomerPriceSum / DealerPriceSum) - 1
        Range("E12").Value = CustomerPriceSum - LandedCostSum
        Range("E13").Value = (CustomerPriceSum - LandedCostSum) / DealerPriceSum
        
        'With CWO
        Range("E15").Value = CWOSum
        Range("E16").Value = ((CustomerPriceSum - CWOSum) / DealerPriceSum) - 1
        Range("E17").Value = CustomerPriceSum - LandedCostSum - CWOSum
        Range("E18").Value = (CustomerPriceSum - LandedCostSum - CWOSum) / DealerPriceSum

        'With Automatic Credit
        Range("E20").Value = AutomaticCreditSum
        Range("E21").Value = ((CustomerPriceSum - CWOSum - AutomaticCreditSum) / DealerPriceSum) - 1
        Range("E22").Value = CustomerPriceSum - LandedCostSum - CWOSum - AutomaticCreditSum
        Range("E23").Value = (CustomerPriceSum - LandedCostSum - CWOSum - AutomaticCreditSum) / DealerPriceSum

        'With Aftermarket Programs
        Range("E25").Value = AftermarketSum
        Range("E26").Value = ((CustomerPriceSum - CWOSum - AutomaticCreditSum - AftermarketSum) / DealerPriceSum) - 1
        Range("E27").Value = CustomerPriceSum - LandedCostSum - CWOSum - AutomaticCreditSum - AftermarketSum
        Range("E28").Value = (CustomerPriceSum - LandedCostSum - CWOSum - AutomaticCreditSum - AftermarketSum) / DealerPriceSum
        
        'Product Line Summaries
        Range("C31").Value = NumberOfUnitsSumIR
        Range("D31").Value = (CustomerPriceSumIR + CustomerPriceSumECOPY) - (LandedCostSumIR + LandedCostSumECOPY)
        If DealerPriceSumIR <> 0 Then Range("E31").Value = ((CustomerPriceSumIR + CustomerPriceSumECOPY) - (LandedCostSumIR + LandedCostSumECOPY)) / (DealerPriceSumIR + DealerPriceSumECOPY)
        If DealerPriceSumIR = 0 Then Range("E31").Value = "N/A"
                        
        Range("C32").Value = NumberOfUnitsSumGRAPHICS
        Range("D32").Value = CustomerPriceSumGRAPHICS - LandedCostSumGRAPHICS
        If DealerPriceSumGRAPHICS <> 0 Then Range("E32").Value = (CustomerPriceSumGRAPHICS - LandedCostSumGRAPHICS) / DealerPriceSumGRAPHICS
        If DealerPriceSumGRAPHICS = 0 Then Range("E32").Value = "N/A"
     
        Range("C33").Value = NumberOfUnitsSumPRODSYS
        Range("D33").Value = CustomerPriceSumPRODSYS - LandedCostSumPRODSYS
        If DealerPriceSumPRODSYS <> 0 Then Range("E33").Value = (CustomerPriceSumPRODSYS - LandedCostSumPRODSYS) / DealerPriceSumPRODSYS
        If DealerPriceSumPRODSYS = 0 Then Range("E33").Value = "N/A"
             
        Range("C34").Value = NumberOfUnitsSumSOFTWARE
        Range("D34").Value = CustomerPriceSumSoftware - LandedCostSumSOFTWARE
        If DealerPriceSumSOFTWARE <> 0 Then Range("E34").Value = (CustomerPriceSumSoftware - LandedCostSumSOFTWARE) / DealerPriceSumSOFTWARE
        If DealerPriceSumSOFTWARE = 0 Then Range("E34").Value = "N/A"
            
        Range("C35").Value = NumberOfUnitsSumMFP
        Range("D35").Value = CustomerPriceSumMFP - LandedCostSumMFP
        If DealerPriceSumMFP <> 0 Then Range("E35").Value = (CustomerPriceSumMFP - LandedCostSumMFP) / DealerPriceSumMFP
        If DealerPriceSumMFP = 0 Then Range("E35").Value = "N/A"
     
        Range("C36").Value = NumberOfUnitsSumPRINTER
        Range("D36").Value = CustomerPriceSumPRINTER - LandedCostSumPRINTER
                
                'flag (fix column typo) 05-12-2011 (#0006)
        If DealerPriceSumPRINTER <> 0 Then Range("E36").Value = (CustomerPriceSumPRINTER - LandedCostSumPRINTER) / DealerPriceSumPRINTER
        If DealerPriceSumPRINTER = 0 Then Range("E36").Value = "N/A"
             
        Range("C37").Value = "N/A" 'No Scanner Business
        Range("D37").Value = "N/A"
        Range("E37").Value = "N/A"
            
     
        Range("A1").Select
        
               
End If 'Landed Cost If
End If 'Password If

Application.ScreenUpdating = True
End Sub

Private Sub ApplyFormulasToGPColumns(strTabName As String, nTotalsRow As Integer, bApplyToAllRows As Boolean)
    Const STR_NetDealerCostBeforeCWO_COLUMN = "Net Dealer Cost before CWO"
    Const STR_LC_COLUMN = "LC"
    Const STR_NetPriceAfterPTP_COLUMN = "Net Price After PTP"
    Const STR_DealerPrice_COLUMN = "Dealer Price"
    Const STR_CWO_COLUMN = "CWO"
    Const STR_MarketingPrograms_COLUMN = "Marketing Programs"
    
    Const STR_GPTPercent_COLUMN = "GP %"
    Const STR_GPLessCWOPercent_COLUMN = "GP less CWO %"
    
    Const STR_NUMBER_OF_UNITS_COLUMN = "Number of Units"
    
    Dim strNetDealerCostBeforeCWORange As String
    Dim strLCRange As String
    Dim strNetPriceAfterPTPRange As String
    Dim strDealerPriceRange As String
    Dim strCWORange As String
    Dim strGPTPercentRange As String
    Dim strGPLessCWOPercentRange As String
    Dim strMarketingProgramsRange As String
    Dim strNumberOfUnitsRange As String
    
    Dim wsCurrent As Worksheet
    Dim strFirstRowWithData As Integer
    Dim x As Integer
    
    Set wsCurrent = Sheets(strTabName)
    
    wsCurrent.Select
    
    On Error GoTo lblError1
    
    strNetDealerCostBeforeCWORange = Utils.IndexToLetter(CLng(Utils.ColIndexExactMatch(wsCurrent, STR_NetDealerCostBeforeCWO_COLUMN, 2)))
    strLCRange = Utils.IndexToLetter(CLng(Utils.ColIndexExactMatch(wsCurrent, STR_LC_COLUMN, 2)))
    'strNetPriceAfterPTPRange = Utils.IndexToLetter(CLng(Utils.ColIndexExactMatch(wsCurrent, STR_NetPriceAfterPTP_COLUMN, 2)))
    strDealerPriceRange = Utils.IndexToLetter(CLng(Utils.ColIndexExactMatch(wsCurrent, STR_DealerPrice_COLUMN, 2)))
    strCWORange = Utils.IndexToLetter(CLng(Utils.ColIndexExactMatch(wsCurrent, STR_CWO_COLUMN, 2)))
    strMarketingProgramsRange = Utils.IndexToLetter(CLng(Utils.ColIndexExactMatch(wsCurrent, STR_MarketingPrograms_COLUMN, 2)))
    
    strGPTPercentRange = Utils.IndexToLetter(CLng(Utils.ColIndexExactMatch(wsCurrent, STR_GPTPercent_COLUMN, 2)))
    strGPLessCWOPercentRange = Utils.IndexToLetter(CLng(Utils.ColIndexExactMatch(wsCurrent, STR_GPLessCWOPercent_COLUMN, 2)))
    
    strNumberOfUnitsRange = Utils.IndexToLetter(CLng(Utils.ColIndexExactMatch(wsCurrent, STR_NUMBER_OF_UNITS_COLUMN, 2)))
    
    For y = 3 To 10
        If Trim(wsCurrent.Range(strLCRange & CStr(y)).Value) <> "" Then
            strFirstRowWithData = CStr(y)
            Exit For
        End If
    Next y
    
    Range(strGPTPercentRange & strFirstRowWithData).Select
    Dim strFormulaPart As String
    
    strFormulaPart = "=IF(" & strDealerPriceRange & strFirstRowWithData & "=0,"""","
    
    ActiveCell.Formula = strFormulaPart & "(" & strNetDealerCostBeforeCWORange & strFirstRowWithData & "-" & strMarketingProgramsRange & strFirstRowWithData & "-" & strLCRange & strFirstRowWithData & ")/" & strDealerPriceRange & strFirstRowWithData & ")"
    Range(strGPLessCWOPercentRange & strFirstRowWithData).Select
    ActiveCell.Formula = strFormulaPart & "(" & strNetDealerCostBeforeCWORange & strFirstRowWithData & "-" & strMarketingProgramsRange & strFirstRowWithData & "-" & strLCRange & strFirstRowWithData & "-" & strCWORange & strFirstRowWithData & ")/" & strDealerPriceRange & strFirstRowWithData & ")" '"=(K5-M5-R5-O5)/F5"
        
    x = 0 ' CInt(strFirstRowWithData) + 1
    Do While x < nTotalsRow
        Range(strGPTPercentRange & strFirstRowWithData & ":" & strGPLessCWOPercentRange & strFirstRowWithData).Select
        Selection.Copy
        
        Dim bDoOperation As Boolean
        
        bDoOperation = False
        If bApplyToAllRows = True Then
            bDoOperation = True
        Else
            If Range(strNumberOfUnitsRange & CStr(x + CInt(strFirstRowWithData))).Value <> "" Then
                bDoOperation = True
            End If
        End If
        
        If bDoOperation = True Then
            If ActiveCell.Offset(x, -1).Value <> "" Then
                Range(strGPTPercentRange & strFirstRowWithData).Select
                ActiveCell.Offset(x, 0).Select
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                    SkipBlanks:=False, Transpose:=False
            End If
        End If
        
        x = x + 1
    Loop
    
    Exit Sub
    
lblError1:
    'do nothing
    MsgBox Err.Description
End Sub

'the new logic for March of 2017
'Public m_strPTPLevelDescription As String

Public Sub CWOProcessing()
    Dim workbookReference As Workbook
    Dim workbookMain As Workbook
    Dim worksheetDiscounts As Worksheet
    Dim stringReferenceBookFileName As String
    Dim strDefaultLogFileName As String
    Dim fnum1 As Integer
    Dim boolAtLeastOneMissingItemCode As Boolean
    Dim timeStart As Date
    Dim stringDiscounts As String
        
    If Authentication = False Then Exit Sub
    
    Dim form1 As frmCWOLevelSelection
    
    Set form1 = New frmCWOLevelSelection
    
    form1.Show vbModal
    
    If form1.intLevel = -1 Then Exit Sub
    
    Dim m_strPTPLevelDescription As String
    Dim bApplyToSelectedItemsOnly As Boolean
    
    bApplyToSelectedItemsOnly = form1.bApplyToSelectedItemsOnly
    
    m_strPTPLevelDescription = form1.GetPTPLevelDescription(form1.intLevel)
    
    Set workbookMain = ActiveWorkbook
    
    Application.ScreenUpdating = False
    
    timeStart = Now
    
    Application.Cursor = xlWait
        
    Set worksheetDiscounts = workbookMain.Sheets(Utils.STR_PRODUCT_GROUP_DISCOUNTS_WORKSHEET)
    
    Dim nDiscountsWorksheetLastColumnIndex As Integer
    
    nDiscountsWorksheetLastColumnIndex = Utils.FindLastColIndex(worksheetDiscounts, 1, 1) - 1
    
    For j = 3 To nDiscountsWorksheetLastColumnIndex
        stringDiscounts = stringDiscounts & worksheetDiscounts.Cells(form1.intLevel + 2, j).Value & ","
    Next j
    
    stringDiscounts = Left(stringDiscounts, Len(stringDiscounts) - 1)
    
    m_stringSubLevelDiscounts = ""
    
    If form1.intSubLevel > 0 Then
      Dim nSubLevelDiscountsWorksheetLastColumnIndex As Integer
    
      nSubLevelDiscountsWorksheetLastColumnIndex = Utils.FindLastColIndex(worksheetDiscounts, 19, 2) - 1
      
      For j = 2 To nSubLevelDiscountsWorksheetLastColumnIndex
        m_stringSubLevelDiscounts = m_stringSubLevelDiscounts & worksheetDiscounts.Cells(form1.intSubLevel + 14, j).Value & ","
      Next j
      
      m_stringSubLevelDiscounts = Left(m_stringSubLevelDiscounts, Len(m_stringSubLevelDiscounts) - 1)
      
    End If
    
    
    
    'start logging
    strDefaultLogFileName = workbookMain.Path & "\Log_" & Replace(Replace(CStr(Now), ":", "-", 1, -1, vbTextCompare), "/", "-", 1, -1, vbTextCompare) & ".txt"
    
    fnum1 = FreeFile()
    
    Open strDefaultLogFileName For Output As fnum1
        
    boolAtLeastOneMissingItemCode = False
    
    Dim arrayExceptions() As String
    
    Call ProcessOneActiveSpreadsheet(workbookMain, Utils.STR_DIGITAL_COLOR_WORKSHEET, fnum1, stringDiscounts, m_strPTPLevelDescription, bApplyToSelectedItemsOnly)
    Call ProcessOneActiveSpreadsheet(workbookMain, Utils.STR_SOFTWARE_WORKSHEET, fnum1, stringDiscounts, m_strPTPLevelDescription, bApplyToSelectedItemsOnly)
    Call ProcessOneActiveSpreadsheet(workbookMain, Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET, fnum1, stringDiscounts, m_strPTPLevelDescription, bApplyToSelectedItemsOnly)
    
    Close #fnum1
    
    'workbookReference.Close False
    
    Set workbookReference = Nothing
    
    Application.Cursor = xlDefault
    
    Application.ScreenUpdating = True
    
    If boolAtLeastOneMissingItemCode = False Then
        Kill strDefaultLogFileName
        
        MsgBox "CWO processing is finished successfully." & vbCrLf & "Started at " & Format(timeStart, "hh:mm:ss") & " Done at " & Format(Now, "hh:mm:ss") & "!"
    Else
        MsgBox "CWO processing is finished with errors. " & vbCrLf & "Started at " & Format(timeStart, "hh:mm:ss") & " Done at " & Format(Now, "hh:mm:ss") & "!" & vbCrLf & "Click OK to view the log file."
        
        Utils.ShellExecute Utils.GetDesktopWindow, "Open", strDefaultLogFileName, "", "C:\", 1
    End If
    'end logging
        
End Sub

Private Function GetSubLevelDiscounts(strGroupName As String)
  Dim arrGroupNames(13) As String
  Dim arrayDiscounts() As String
                            
  GetSubLevelDiscounts = 0
  
  If m_stringSubLevelDiscounts = "" Then Exit Function
  
  arrayDiscounts = Split(m_stringSubLevelDiscounts, ",", , vbTextCompare)
    
  arrGroupNames(0) = "Eta"
  arrGroupNames(1) = "Theta"
  arrGroupNames(2) = "Iota"
  arrGroupNames(3) = "Kappa"
  arrGroupNames(4) = "Lambda"
  arrGroupNames(5) = "Rho"
  arrGroupNames(6) = "Sigma"
  arrGroupNames(7) = "Upsilon"
      
  arrGroupNames(8) = "Phi"
  arrGroupNames(9) = "Chi "
  arrGroupNames(10) = "Psi "
  arrGroupNames(11) = "Alpha Alpha"
  arrGroupNames(12) = "Alpha Gamma"

  For k = 0 To UBound(arrGroupNames)
    If UCase(arrGroupNames(k)) = UCase(strGroupName) Then
      GetSubLevelDiscounts = arrayDiscounts(k)
      Exit Function
    End If
  Next k
End Function

Private Sub ProcessOneActiveSpreadsheet(workbookMain As Workbook, _
                                        stringSpreadsheetName As String, _
                                        fileNumber As Integer, _
                                        stringDiscounts As String, _
                                        strPTPLevelDescription As String, _
                                        bApplyToSelectedItemsOnly As Boolean)
    Dim i As Integer
    Dim stringDealerPriceColumn As String
    Dim intProductGroupColumn As Integer
    Dim nNumberOfUnitsColumn As Integer
    Dim stringProductGroupHelperColumn As String
    Dim stringNetPriceAfterPTPColumn As String
    Dim intNumberOfRows As Integer
    Dim worksheetActive As Worksheet
    Dim workbookPreviouslyActive As Workbook
    Dim worksheetPreviouslyActive As Worksheet
    
    Dim doubleCWOPrice As Double
    Dim doublePTPPrice As Double
    Dim boolSearchResult As Boolean
    Dim arrayDiscounts() As String
                            
    arrayDiscounts = Split(stringDiscounts, ",", , vbTextCompare)
    
    Set workbookPreviouslyActive = ActiveWorkbook
    
    Set worksheetPreviouslyActive = ActiveSheet
    
    workbookMain.Activate
        
    Set worksheetActive = workbookMain.Sheets(stringSpreadsheetName)
    
    worksheetActive.Activate
        
    intNumberOfRows = Utils.FindTotalsRowIndex(stringSpreadsheetName)
    
    Print #fileNumber, "The spreadsheet name is [" & stringSpreadsheetName & "]."
    
    stringDealerPriceColumn = Utils.ColPos2letter(worksheetActive, Utils.ColIndexExactMatch(worksheetActive, "Dealer Price", 2))
    
    intProductGroupColumn = Utils.ColIndexExactMatch(worksheetActive, Utils.STR_COLUMN_NAME_PRODUCT_GROUP, 2)
    
    nNumberOfUnitsColumn = Utils.ColIndexExactMatch(worksheetActive, "Number of Units", 2)
    
    stringProductGroupHelperColumn = Utils.ColPos2letter(worksheetActive, intProductGroupColumn + 1)
        
    'create the new column and placing it after stringProductGroupHelperColumn
    stringNetPriceAfterPTPColumn = Utils.ColPos2letter(worksheetActive, intProductGroupColumn + 2)
    
    worksheetActive.Range(stringNetPriceAfterPTPColumn & "2").Value = "Net Price After PTP"
    
    'set header here
    worksheetActive.Cells(2, intProductGroupColumn + 1).Value = strPTPLevelDescription
    
    Dim bDoProcessing As Boolean
    Dim bIsItemSelectedPreviously As Boolean
    
    For i = 5 To intNumberOfRows
        If bApplyToSelectedItemsOnly = True Then
            If worksheetActive.Cells(i, nNumberOfUnitsColumn).Value <> "" Then
                bDoProcessing = True
            Else
                bDoProcessing = False
            End If
        Else
            bDoProcessing = True
        End If
                
        'check for rollback in the CWO column
        If Trim(worksheetActive.Cells(i, intProductGroupColumn + 1).Value) <> "" Then
            '09-22-2017 may be I do a rollback of values.
            Call RollbackCellValue(worksheetActive, stringDealerPriceColumn, stringNetPriceAfterPTPColumn, i)
            
            worksheetActive.Cells(i, intProductGroupColumn + 1).Value = ""
            worksheetActive.Cells(i, intProductGroupColumn + 2).Value = ""
        End If
            
        If bDoProcessing = True Then
            'skip blanks in the column D
            If worksheetActive.Cells(i, intProductGroupColumn).Value <> "" Then
                Dim stringTemp0 As String
                Dim stringTemp1 As String
                        
                stringTemp0 = UCase(worksheetActive.Cells(i, intProductGroupColumn).Value)
                
                If Trim(stringTemp0) <> "" Then
                  Dim nTemp1 As Double
                  
                  nTemp1 = GetSubLevelDiscounts(stringTemp0)
                  
                  If nTemp1 > 0 Then
                    stringTemp1 = CStr(nTemp1)
                  Else
                    stringTemp1 = GetDiscount(stringTemp0, arrayDiscounts)
                  End If
                  
                Else
                    stringTemp1 = "0"
                End If
                
                worksheetActive.Cells(i, intProductGroupColumn + 1).Value = stringTemp1
                            
            End If
            
            If worksheetActive.Range(stringDealerPriceColumn & CStr(i)).Value <> "" Then
                            
                'Marketing Programs
                'check if percent value greater than 1
                Dim doubleTemp3 As Double
                
                doubleTemp3 = CDbl(worksheetActive.Range(stringProductGroupHelperColumn & CStr(i)).Value)
                
                If doubleTemp3 > 1 Then
                    worksheetActive.Range("M" & CStr(i)).Formula = "=" & stringDealerPriceColumn & CStr(i) & "*" & stringProductGroupHelperColumn & CStr(i) & "/100"
                Else
                    worksheetActive.Range("M" & CStr(i)).Formula = "=" & stringDealerPriceColumn & CStr(i) & "*" & stringProductGroupHelperColumn & CStr(i)
                End If
                
                'Net Price After PTP
                worksheetActive.Range(stringNetPriceAfterPTPColumn & CStr(i)).Value = CDbl(worksheetActive.Range(stringDealerPriceColumn & CStr(i)).Value) - CDbl(worksheetActive.Range("M" & CStr(i)).Value)
                
                'CWO =IF(ISBLANK(F6),"",F6*W6/100)
                Dim doubleTemp2 As Double
                
                If CDbl(worksheetActive.Range(stringDealerPriceColumn & CStr(i)).Value) > 0# Then
                    'Debug.Print "If before: " & worksheetActive.Range("A" & CStr(i)).Value & " -> " & worksheetActive.Range("O" & CStr(i)).Value
                                        
                    doubleTemp2 = CDbl(worksheetActive.Range("O" & CStr(i)).Value) / CDbl(worksheetActive.Range(stringDealerPriceColumn & CStr(i)).Value)
                                        
                    worksheetActive.Range("O" & CStr(i)).Value = CDbl(worksheetActive.Range(stringNetPriceAfterPTPColumn & CStr(i)).Value) * doubleTemp2
                    
                    'Debug.Print "If: " & worksheetActive.Range("A" & CStr(i)).Value & " -> " & worksheetActive.Range("O" & CStr(i)).Value
                    
                Else
                    worksheetActive.Range("O" & CStr(i)).Value = CDbl(worksheetActive.Range(stringDealerPriceColumn & CStr(i)).Value)
                    
                    'Debug.Print "Else: " & worksheetActive.Range("A" & CStr(i)).Value & " -> " & worksheetActive.Range("O" & CStr(i)).Value
                End If
            End If
        End If 'bDoProcessing
    Next i
    
    workbookPreviouslyActive.Activate
    
    worksheetPreviouslyActive.Activate
    
End Sub

Private Sub RollbackCellValue(worksheetActive As Worksheet, stringDealerPriceColumn As String, stringNetPriceAfterPTPColumn As String, i As Integer)
    Dim dblTemp1 As Double
    Dim dblTemp2 As Double
    Dim dblTemp3 As Double
    
    dblTemp1 = CDbl(worksheetActive.Range(stringDealerPriceColumn & CStr(i)).Value)
    dblTemp2 = CDbl(worksheetActive.Range(stringNetPriceAfterPTPColumn & CStr(i)).Value)
    
    If dblTemp2 = 0 Then
        worksheetActive.Range("O" & CStr(i)).Value = "0.00"
    Else
        dblTemp3 = CDbl(worksheetActive.Range("O" & CStr(i)).Value)
        
        worksheetActive.Range("O" & CStr(i)).Value = dblTemp3 * (dblTemp1 / dblTemp2)
    End If
End Sub

'use bijection between arrayDiscounts and arrGroupNames
Private Function GetDiscount(strGroupName As String, arrayDiscounts() As String)
    Dim arrGroupNames(26) As String
    
    arrGroupNames(0) = "Alpha"
    arrGroupNames(1) = "Beta"
    arrGroupNames(2) = "Gamma"
    arrGroupNames(3) = "Delta"
    arrGroupNames(4) = "Epslion"
    arrGroupNames(5) = "Zeta"
    arrGroupNames(6) = "Eta"
    arrGroupNames(7) = "Theta"
    arrGroupNames(8) = "Iota"
    arrGroupNames(9) = "Kappa"
    arrGroupNames(10) = "Lambda"
    'arrGroupNames(11) = "Nu"
    'arrGroupNames(12) = "Xi"
    'arrGroupNames(13) = "Omicron"
    'arrGroupNames(14) = "Pi"
    arrGroupNames(11) = "Mu"
    arrGroupNames(12) = "Rho"
    arrGroupNames(13) = "Sigma"
    arrGroupNames(14) = "Omicron"
    arrGroupNames(15) = "Pi"
    arrGroupNames(16) = "Tau"
    arrGroupNames(17) = "Upsilon"
    
    arrGroupNames(18) = "Phi"
    arrGroupNames(19) = "Chi "
    arrGroupNames(20) = "Psi "
    arrGroupNames(21) = "Omega"
    arrGroupNames(22) = "Alpha Alpha"
    arrGroupNames(23) = "Alpha Beta"
    arrGroupNames(24) = "Alpha Gamma"
    arrGroupNames(25) = "Alpha Delta"
    
    GetDiscount = -1
    
    For k = 0 To UBound(arrGroupNames)
        If UCase(arrGroupNames(k)) = UCase(strGroupName) Then
            GetDiscount = arrayDiscounts(k)
            Exit Function
        End If
    Next k
    
End Function







Attribute VB_Name = "CSMPCommonAccessoryCheck"

Private Const N_COLOR_INDEX = 26

Public Sub CSMPCommonAccessoryCheck()
    Dim strListOfWorksheetsToTest(3) As String
    Dim strListOfWorksheets() As String
        Dim i As Integer
        Dim nNumberOfExistingSheets As Integer

        strListOfWorksheetsToTest(0) = Utils.STR_DIGITAL_COLOR_WORKSHEET
        strListOfWorksheetsToTest(1) = Utils.STR_SOFTWARE_WORKSHEET
        strListOfWorksheetsToTest(2) = Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET
        
        nNumberOfExistingSheets = 0
        
        ReDim Preserve strListOfWorksheets(1)
        
        For i = LBound(strListOfWorksheetsToTest) To UBound(strListOfWorksheetsToTest)
                        If CheckIfSheetExists(strListOfWorksheetsToTest(i)) = True Then
                                        nNumberOfExistingSheets = nNumberOfExistingSheets + 1
                                        strListOfWorksheets(UBound(strListOfWorksheets) - 1) = strListOfWorksheetsToTest(i)
                                        If i < UBound(strListOfWorksheetsToTest) Then
                                                ReDim Preserve strListOfWorksheets(UBound(strListOfWorksheets) + 1)
                                        End If
                        End If
        Next
        
        If nNumberOfExistingSheets = 0 Then Exit Sub
        
    Call Utils.SetVisibilityOfWorksheets(strListOfWorksheets, xlSheetVisible)
    Call Utils.ProtectWorksheets(False, "team", strListOfWorksheets)
    
    Call CSMPCommonAccessoryCheckArrayOfSheets(strListOfWorksheets)
    
End Sub

Private Function CheckIfSheetExists(strSheetName As String)

        CheckIfSheetExists = True
        
        On Error Resume Next
        
        Dim wsCurrent As Worksheet
        
        Set wsCurrent = ActiveWorkbook.Sheets(strSheetName)
        
        If wsCurrent Is Nothing Then CheckIfSheetExists = False
        
        On Error GoTo 0

End Function

Private Sub CSMPCommonAccessoryCheckArrayOfSheets(strListOfWorksheets() As String)
    Dim nNumberOfWorksheetRows() As Integer
    Dim nItemNumberColumns() As Integer
    Dim nCSMPPriceColumns() As Integer
    Dim nRowCounter As Integer
    Dim wsCurrent As Worksheet
    Dim nNumberofUnitsColumns() As Integer
    Dim i As Integer
    Dim strItemCode As String
    Dim strColumnLetter As String
        
    Application.ScreenUpdating = False
    
    ReDim nNumberOfWorksheetRows(UBound(strListOfWorksheets))
    ReDim nItemNumberColumns(UBound(strListOfWorksheets))
    ReDim nCSMPPriceColumns(UBound(strListOfWorksheets))
    ReDim nNumberofUnitsColumns(UBound(strListOfWorksheets))
    
    'preparation
    For i = LBound(strListOfWorksheets) To UBound(strListOfWorksheets)
    
        If strListOfWorksheets(i) <> "" Then
            Set wsCurrent = ActiveWorkbook.Sheets(strListOfWorksheets(i))
            
            nNumberOfWorksheetRows(i) = Utils.RowsToScan(wsCurrent, "TOTALS", 1)
            
            nItemNumberColumns(i) = Utils.ColIndex(wsCurrent, "Item #", 2)
            
            nCSMPPriceColumns(i) = Utils.ColIndex(wsCurrent, "CSMP Credit", 2)
            
            nNumberofUnitsColumns(i) = Utils.ColIndex(wsCurrent, "Number of Units", 2)
            
            nRowCounter = 6
            
            'reset color
            Do While nRowCounter < nNumberOfWorksheetRows(i)
                If wsCurrent.Cells(nRowCounter, nItemNumberColumns(i)).Font.color = 0 Then wsCurrent.Cells(nRowCounter, nItemNumberColumns(i)).Interior.colorindex = xlNone
                nRowCounter = nRowCounter + 1
            Loop
            
            'disable filtering
            If Not wsCurrent.AutoFilter Is Nothing Then
                wsCurrent.Cells(1, nNumberofUnitsColumns(i)).EntireColumn.AutoFilter
            End If
            
        End If
                
    Next
    
    'main processing
    For i = LBound(strListOfWorksheets) To UBound(strListOfWorksheets)
        
        If strListOfWorksheets(i) <> "" Then
        
            Set wsCurrent = ActiveWorkbook.Sheets(strListOfWorksheets(i))
            
            nRowCounter = 6
            
            Do While nRowCounter < nNumberOfWorksheetRows(i)
            
                If (wsCurrent.Cells(nRowCounter, nItemNumberColumns(i)).Interior.colorindex = xlNone Or wsCurrent.Cells(nRowCounter, nItemNumberColumns(i)).Font.color = 0) _
                   And wsCurrent.Cells(nRowCounter, nItemNumberColumns(i)).Value <> "" Then
                   
                    strItemCode = wsCurrent.Cells(nRowCounter, nItemNumberColumns(i)).Value
                                
                    If FindAndReplaceMaxPriceForAccessoryForArrayOfWorksheets(ActiveWorkbook, strItemCode, nItemNumberColumns, nCSMPPriceColumns, nNumberOfWorksheetRows, strListOfWorksheets) = True Then
                        count = count + 1
                    End If
                    
                End If
            
                nRowCounter = nRowCounter + 1
                 
            Loop
            
        End If
            
    Next
    
    For i = LBound(strListOfWorksheets) To UBound(strListOfWorksheets)
    
        If strListOfWorksheets(i) <> "" Then
            Set wsCurrent = ActiveWorkbook.Sheets(strListOfWorksheets(i))
            
            strColumnLetter = Utils.ColPos2letter(wsCurrent, nNumberofUnitsColumns(i))
                        
            Utils.SetFilter strListOfWorksheets(i), strColumnLetter & "3:" & strColumnLetter
            
            'enable filtering
            'wsCurrent.Range(strColumnLetter & "3:" & strColumnLetter & nNumberOfWorksheetRows(i)).EntireColumn.AutoFilter
            
        End If
                
    Next
    
    Application.ScreenUpdating = True
    
    If count = 0 Then
        MsgBox "Congratulations!  There are no pricing discrepencies!", vbExclamation
    ElseIf count = 1 Then
        MsgBox ("There is 1 common accessory with different prices.  Please review the highlighted item codes. CSMP Credit is set to the highest value."), vbExclamation
    ElseIf count > 0 Then
        MsgBox ("There are ") & count & (" common accessories with discrepencies.  Please review the highlighted item codes. CSMP Credit is set to the highest value."), vbExclamation
    End If
    
End Sub

Private Sub CSMPCommonAccessoryCheckOneSheet(wsCurrent As Worksheet)

    Dim strWorkbookName As String
    Dim nNumberOfScanRows As Integer
    
    strWorkbookName = wsCurrent.Name
    
    nNumberOfScanRows = Utils.RowsToScan(wsCurrent, "TOTALS", 1)
    
    Application.ScreenUpdating = False

    Dim count As Integer

    Dim b As Integer
    Dim x As Integer
    
    Dim ItemNoColumn As Integer
    Dim CSMPCreditColumn As Integer

    Dim itemcode As String
    Dim CSMPCreditMax As Currency

    Dim colorindex As Integer

    Dim nTempPrice As Double
    
    count = 0

    b = 0
    x = 0
    itemcode = ""
    CSMPCreditMax = 0
    ItemNoColumn = 0
    CSMPCreditColumn = 0
    colorindex = 0

    'Find the Item # Column
    ItemNoColumn = Utils.ColIndex(wsCurrent, "Item #", 2)

    'Find the Total CSMPCreditMax Column
    CSMPCreditColumn = Utils.ColIndex(wsCurrent, "CSMP Credit", 2)

    'Make all accessories have a clear background
    b = 6
    Do While b < nNumberOfScanRows
        If wsCurrent.Cells(b, ItemNoColumn).Font.color = 0 Then wsCurrent.Cells(b, ItemNoColumn).Interior.colorindex = xlNone
        b = b + 1
    Loop

    x = 6
    Do While x < nNumberOfScanRows
        If (wsCurrent.Cells(x, ItemNoColumn).Interior.colorindex = xlNone Or wsCurrent.Cells(x, ItemNoColumn).Font.color = 0) _
           And wsCurrent.Cells(x, ItemNoColumn).Value <> "" Then
            itemcode = wsCurrent.Cells(x, ItemNoColumn).Value
                        
            If FindAndReplaceMaxPriceForAccessory(wsCurrent, itemcode, ItemNoColumn, CSMPCreditColumn, nNumberOfScanRows) = True Then
                count = count + 1
            End If
            
        End If
        
        x = x + 1
         
    Loop

    Application.ScreenUpdating = True

    If count = 0 Then
        MsgBox strWorkbookName & ": Congratulations!  There are no pricing discrepencies!", vbExclamation
    ElseIf count = 1 Then
        MsgBox (strWorkbookName & ": There is 1 common accessory with different prices.  Please review the highlighted item codes. CSMP Credit is set to the highest value."), vbExclamation
    ElseIf count > 0 Then
        MsgBox (strWorkbookName & ": There are ") & count & (" common accessories with discrepencies.  Please review the highlighted item codes. CSMP Credit is set to the highest value."), vbExclamation
    End If

End Sub

Private Function FindAndReplaceMaxPriceForAccessoryForArrayOfWorksheets(wbCurrent As Workbook, strItemCode As String, nItemCodeColumn() As Integer, nPriceColumn() As Integer, nNumberOfRowsToScan() As Integer, strListOfWorksheets() As String)
    Dim i As Integer
    Dim bResult As Boolean
    Dim bTempResult As Boolean
    
    bResult = False
    
    bTempResult = False
    
    For i = LBound(strListOfWorksheets) To UBound(strListOfWorksheets)
    
        If strListOfWorksheets(i) <> "" Then
            
            If bTempResult = True Then bResult = True
            
            bTempResult = FindAndReplaceMaxPriceForAccessory(wbCurrent.Sheets(strListOfWorksheets(i)), strItemCode, nItemCodeColumn(i), nPriceColumn(i), nNumberOfRowsToScan(i), bResult)
            
        End If
        
    Next
    
    FindAndReplaceMaxPriceForAccessoryForArrayOfWorksheets = bResult
End Function

Private Function FindAndReplaceMaxPriceForAccessory(wsCurrent As Worksheet, strItemCode As String, nItemCodeColumn As Integer, nPriceColumn As Integer, nNumberOfRowsToScan As Integer, Optional bCarryoverFound As Boolean = False)

    Dim nMaxPrice As Double
    Dim nTempMaxPrice As Double
    Dim bIsMaxPriceApplied As Boolean
    Dim bIsMaxPriceFirstRun As Boolean
    Dim rSearch As Range
    Dim strFirstAddress As String
    
                PrintDbgMsg "bCarryoverFound is " & CStr(bCarryoverFound)
                
                bIsMaxPriceFirstRun = True
        
    nMaxPrice = 0#
    
    bIsMaxPriceApplied = False
    
    'Find Max Price
    With wsCurrent.Range(Utils.ColPos2letter(wsCurrent, nItemCodeColumn) & "1").EntireColumn
        Set rSearch = .Find(strItemCode, , , xlWhole)
        
        If Not rSearch Is Nothing Then strFirstAddress = rSearch.Address
        
        Do While Not rSearch Is Nothing
        
            nTempMaxPrice = CDbl(rSearch.Offset(0, nPriceColumn - nItemCodeColumn).Value)
        
                                                If bIsMaxPriceFirstRun = True Then
                                                        nMaxPrice = nTempMaxPrice
                                                        bIsMaxPriceFirstRun = False
                                                End If
                                                
                                                If bCarryoverFound = True Then bIsMaxPriceApplied = True

                                                If nMaxPrice < nTempMaxPrice Then
                                                        nMaxPrice = nTempMaxPrice
                                                        bIsMaxPriceApplied = True
                                                ElseIf nMaxPrice > nTempMaxPrice Then
                                                        bIsMaxPriceApplied = True
                                                Else
                                                        ' do nothing
                                                End If
                        
            Set rSearch = .Find(strItemCode, wsCurrent.Range(rSearch.Address), , xlWhole)
            
            If rSearch Is Nothing Then Exit Do

            If strFirstAddress = rSearch.Address Then Exit Do
        Loop
                       
        If bIsMaxPriceApplied = False Then
        
            FindAndReplaceMaxPriceForAccessory = False
            
            Exit Function
        End If
    
        'Set Max price for All and Color
        Do While Not rSearch Is Nothing
        
            rSearch.Interior.colorindex = N_COLOR_INDEX
            
            rSearch.Offset(0, nPriceColumn - nItemCodeColumn).Value = nMaxPrice
            
            Set rSearch = .Find(strItemCode, wsCurrent.Range(rSearch.Address), , xlWhole)
            
            If rSearch Is Nothing Then Exit Do

            If strFirstAddress = rSearch.Address Then Exit Do
        Loop
    
        FindAndReplaceMaxPriceForAccessory = True
    
                                PrintDbgMsg "FindAndReplaceMaxPriceForAccessory is True, and strItemCode is " & strItemCode
                                
    End With
    
End Function

Attribute VB_Name = "CSMPForm"

Private m_bValueSelected As Boolean

Sub DropDown14_Change()
    m_bValueSelected = True
End Sub

Private Function GetActiveXObject(strObjectName As String)
    Dim objOB As OLEObject
    
    For i = 1 To ActiveSheet.OLEObjects.count
        Set objOB = ActiveSheet.OLEObjects(i)
        
        If objOB.Name = strObjectName Then
             Set GetActiveXObject = objOB.Object
             Exit Function
        End If
        
    Next

    Set GetActiveXObject = Nothing
End Function

Sub CSMPForm()

Dim AccountName As String
Dim Address As String
Dim CustomerCity As String
Dim CustomerContact As String
Dim CustomerEmail As String
Dim Website As String
Dim TypeOfBusiness As String
'Dim RequestSubmitDate As String
Dim DealerName As String
Dim DealerCode As String
'Dim DealerAddress As String
'Dim DealerCity As String
Dim DealerRep As String
Dim CanonCSM As String
'Dim SalesRegion As String

Dim DueDateDealer As String
Dim DueDateCustomer As String
Dim AwardDate As String
Dim Incumbent As String
Dim NewContractTerm As String
'Dim TargetedSellingPrice As Currency
Dim FinanceCompanyCFS As String
Dim ImmediateInstallDate As String
Dim InstallDuration As String
Dim FormalRFP As String
Dim Competition As String
Dim MonthsRemain As String
Dim CurrentLeasePayment As Currency
Dim BuyoutAmount As Currency

Dim Justification As String

Dim ErrorCount As Integer

If ActiveSheet.DropDowns("Drop Down 14").Value <> 0 Then
        m_bValueSelected = True
   If ActiveSheet.DropDowns("Drop Down 14").Value = 1 Then 'CSMP
        If Not (ActiveSheet.DropDowns("Drop Down 20").Value = 0 Or ActiveSheet.DropDowns("Drop Down 20").Value = 1) Then
            MsgBox "CSMP Program requires blank One Off."
            Exit Sub
        End If
   End If
End If

Utils.CSMPDetailForm_GreenButtonClicked = True

Call Sheet4.CSMPDetails_Init

AccountName = ""
Address = ""
CustomerCity = ""
CustomerContact = ""
CustomerEmail = ""
Website = ""
TypeOfBusiness = ""
'RequestSubmitDate = ""
DealerName = ""
DealerCode = ""
'DealerAddress = ""
'DealerCity = ""
DealerRep = ""
CanonCSM = ""
'SalesRegion = ""

DueDateDealer = ""
DueDateCustomer = ""
AwardDate = ""
Incumbent = ""
NewContractTerm = ""
'TargetedSellingPrice = 0
FinanceCompanyCFS = ""
ImmediateInstallDate = ""
InstallDuration = ""
FormalRFP = ""
Competition = ""
MonthsRemain = ""
CurrentLeasePayment = 0
BuyoutAmount = 0

Justification = ""

ActiveSheet.unprotect Password:="team"

Range("A15:A29").Interior.colorindex = 48
Range("E15:E29").Interior.colorindex = 48
Range("A33:A53").Interior.colorindex = 6
Range("E33:E41").Interior.colorindex = 6
Range("E45:E53").Interior.colorindex = 6
Range("F53").Interior.colorindex = 6
Range("A65:A65").Interior.colorindex = 0


Range("B15").Select
AccountName = ActiveCell.Value
UserFormCSMP.AccountNameLabelBox.Value = AccountName

Range("B17").Select
Address = ActiveCell.Value

Range("B19").Select
CustomerCity = ActiveCell.Value

Range("B21").Select
CustomerContact = ActiveCell.Value

Range("B23").Select
CustomerEmail = ActiveCell.Value

Range("B25").Select
Website = ActiveCell.Value

Range("B27").Select
TypeOfBusiness = ActiveCell.Value

'Range("B29").Select
'RequestSubmitDate = ActiveCell.Value

Range("F15").Select
DealerName = ActiveCell.Value

Range("F17").Select
DealerCode = ActiveCell.Value

'Range("F19").Select
'DealerAddress = ActiveCell.Value

'Range("F21").Select
'DealerCity = ActiveCell.Value

Range("F23").Select
DealerRep = ActiveCell.Value

Range("F25").Select
CanonCSM = ActiveCell.Value

If DealerCode = "" Then
    MsgBox "Please enter Dealer code.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("B4").Interior.colorindex = 26
End If

'If Range("F27").Value = "" Then
'    MsgBox "Please enter TSE name.", vbExclamation
'    ErrorCount = ErrorCount + 1
'    Range("B4").Interior.colorindex = 26
'End If
'
'If Range("H27").Value = "" Then
'    MsgBox "Please enter TSE code.", vbExclamation
'    ErrorCount = ErrorCount + 1
'    Range("B4").Interior.colorindex = 26
'End If

'Range("F27").Select
'SalesRegion = ActiveCell.Value
    
    
If Range("B4").Value <> "" And Not IsDate(Range("B4").Value) Then
    MsgBox "Please enter DATE value for offer start date.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("B4").Interior.colorindex = 26
End If

If Range("B6").Value <> "" And Not IsDate(Range("B6").Value) Then
    MsgBox "Please enter DATE value for offer expiration date.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("B6").Interior.colorindex = 26
End If

If Range("B39").Value <> "" And Not IsDate(Range("B39").Value) Then
    MsgBox "Please enter DATE value for due date dealer.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("B39").Interior.colorindex = 26
Else
    DueDateDealer = Range("B39").Value
End If

If Range("B41").Value <> "" And Not IsDate(Range("B41").Value) Then
    MsgBox "Please enter DATE value for due date customer.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("B41").Interior.colorindex = 26
Else
    DueDateCustomer = Range("B41").Value
End If

If Range("B43").Value <> "" And Not IsDate(Range("B43").Value) Then
    MsgBox "Please enter approximate DATE value for Award Date customer.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("B43").Interior.colorindex = 26
End If

If Range("F39").Value <> "" And Not IsDate(Range("F39").Value) Then
    MsgBox "Please enter approximate DATE value for Immediate Install Date customer.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("F39").Interior.colorindex = 26
End If

'compare dates here 02-25-2019
If ErrorCount = 0 Then
    If Not IsDate(Range("B39").Value) Then
        MsgBox "Please enter approximate DATE value for due date dealer.", vbExclamation
        ErrorCount = ErrorCount + 1
        Range("B39").Select
    ElseIf Not IsDate(Range("B41").Value) Then
        MsgBox "Please enter approximate DATE value for due date customer.", vbExclamation
        ErrorCount = ErrorCount + 1
        Range("B41").Select
    ElseIf Not IsDate(Range("B43").Value) Then
        MsgBox "Please enter approximate DATE value for Award Date.", vbExclamation
        ErrorCount = ErrorCount + 1
        Range("B43").Select
    Else
        If Not (CDate(Range("B39").Value) <= CDate(Range("B41").Value) And CDate(Range("B41").Value) <= CDate(Range("B43").Value)) Then
            MsgBox "Please enter dates that are sequential. For example, due date to dealer must be earlier than Award or Decision Date.", vbExclamation
            ErrorCount = ErrorCount + 1
            Range("B39").Interior.colorindex = 26
        End If
    End If
Else
    'do nothing
End If

If ErrorCount = 0 Then
    If Not IsDate(Range("F39").Value) Then
        MsgBox "Please enter approximate DATE value for Install Start Date.", vbExclamation
        ErrorCount = ErrorCount + 1
        Range("F39").Select
    ElseIf Not IsDate(Range("F41").Value) Then
        MsgBox "Please enter approximate DATE value for Install End Date.", vbExclamation
        ErrorCount = ErrorCount + 1
        Range("F41").Select
    Else
        If Not (CDate(Range("F39").Value) <= CDate(Range("F41").Value)) Then
            MsgBox "Please enter dates that are sequential. Install Start Date must be earlier than Install End Date.", vbExclamation
            ErrorCount = ErrorCount + 1
            Range("B39").Interior.colorindex = 26
        End If
    End If
Else
    'do nothing
End If

AwardDate = Range("B43").Value

Range("B45").Select
NewContractTerm = ActiveCell.Value

'Range("B47").Select
'TargetedSellingPrice = ActiveCell.Value

Range("B49").Select
Incumbent = ActiveCell.Value

Range("B51").Select
Competition = ActiveCell.Value

Range("B53").Select
FormalRFP = ActiveCell.Value

Range("F39").Select
ImmediateInstallDate = ActiveCell.Value

Range("F41").Select
InstallDuration = ActiveCell.Value

Range("F47").Select
MonthsRemain = ActiveCell.Value

If Range("F49").Value <> "" And Not IsNumeric(Range("F49").Value) Then
    MsgBox "Please enter numeric value for current lease payment.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("F49").Interior.colorindex = 26
Else
    Range("F49").Select
    CurrentLeasePayment = ActiveCell.Value
End If

If Range("F51").Value <> "" And Not IsNumeric(Range("F51").Value) Then
    MsgBox "Please enter numeric value for buyout amount.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("F51").Interior.colorindex = 26
Else
    Range("F51").Select
    BuyoutAmount = ActiveCell.Value
End If
    
Range("G53").Select
FinanceCompanyCFS = ActiveCell.Value
    
Range("A66").Select
Justification = ActiveCell.Value

Range("A1").Select

If ErrorCount <> 0 Then
    Utils.CSMPDetailForm_GreenButtonClicked = False
    Exit Sub
End If

ErrorCount = 0

If AccountName = "" And ErrorCount = 0 Then
    MsgBox "Please enter the account name.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a15").Interior.colorindex = 26
    End If
    
If Address = "" And ErrorCount = 0 Then
    MsgBox "Please enter the customer's address.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a17").Interior.colorindex = 26
    End If

If CustomerCity = "" And ErrorCount = 0 Then
    MsgBox "Please enter the customer's city/state/zip code.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a19").Interior.colorindex = 26
    End If

If CustomerContact = "" And ErrorCount = 0 Then
    MsgBox "Please enter the customer's contact.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("ab21").Interior.colorindex = 26
    End If
    
If CustomerEmail = "" And ErrorCount = 0 Then
    MsgBox "Please enter the customer's e-mail address.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a23").Interior.colorindex = 26
    End If
    
If Website = "" And ErrorCount = 0 Then
    MsgBox "Please enter the customer's website.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a25").Interior.colorindex = 26
    End If
    
If TypeOfBusiness = "" And ErrorCount = 0 Then
    MsgBox "Please enter the type of business.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a27").Interior.colorindex = 26
    End If

'If RequestSubmitDate = "" And ErrorCount = 0 Then
    'MsgBox "Please enter the request submit date.", vbExclamation
    'ErrorCount = ErrorCount + 1
    'Range("a29").Interior.ColorIndex = 26
    'End If

If DealerName = "" And ErrorCount = 0 Then
    MsgBox "Please enter the dealer name.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("e15").Interior.colorindex = 26
    End If
    
If DealerCode = "" And ErrorCount = 0 Then
    MsgBox "Please enter the dealer code.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("e17").Interior.colorindex = 26
    End If
    
'If DealerAddress = "" And ErrorCount = 0 Then
    'MsgBox "Please enter the dealer's address.", vbExclamation
    'ErrorCount = ErrorCount + 1
    'Range("e19").Interior.ColorIndex = 26
    'End If

'If DealerCity = "" And ErrorCount = 0 Then
    'MsgBox "Please enter the dealer's city/state/zip code.", vbExclamation
    'ErrorCount = ErrorCount + 1
    'Range("e21").Interior.ColorIndex = 26
    'End If

If DealerRep = "" And ErrorCount = 0 Then
    MsgBox "Please enter the dealer rep manager.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("e23").Interior.colorindex = 26
    End If
    
If CanonCSM = "" And ErrorCount = 0 Then
    MsgBox "Please enter the Canon CSM/TSE.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("e25").Interior.colorindex = 26
    End If
    
'If SalesRegion = "" And ErrorCount = 0 Then
    'MsgBox "Please enter the Sales Region.", vbExclamation
    'ErrorCount = ErrorCount + 1
    'Range("e27").Interior.ColorIndex = 26
    'End If
    
If DueDateDealer = "" And ErrorCount = 0 Then
    MsgBox "Please enter the Due Date to Dealer.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a39").Interior.colorindex = 26
    End If
    
If DueDateCustomer = "" And ErrorCount = 0 Then
    MsgBox "Please enter the Due Date to Customer.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a41").Interior.colorindex = 26
    End If

If AwardDate = "" And ErrorCount = 0 Then
    MsgBox "Please enter the Award or Decision Date.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a43").Interior.colorindex = 26
    End If
    
If NewContractTerm = "" And ErrorCount = 0 Then
    MsgBox "Please enter the Term of New Contract.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a45").Interior.colorindex = 26
    End If
    
'If TargetedSellingPrice = 0 And ErrorCount = 0 Then
    'MsgBox "Please enter the Targeted Selling Price.", vbExclamation
    'ErrorCount = ErrorCount + 1
    'Range("a47").Interior.ColorIndex = 26
    'End If
    
If Incumbent = "" And ErrorCount = 0 Then
    MsgBox "Please enter the Incumbent.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a49").Interior.colorindex = 26
    End If

If Competition = "" And ErrorCount = 0 Then
    MsgBox "Please enter the Competition.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a51").Interior.colorindex = 26
    End If
    
If FormalRFP = "" And ErrorCount = 0 Then
    MsgBox "Please enter - Formal RFP or Price Proposal.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a53").Interior.colorindex = 26
    End If

If ImmediateInstallDate = "" And ErrorCount = 0 Then
    MsgBox "Please enter the Immediate Install Date.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("e39").Interior.colorindex = 26
    End If
    
If InstallDuration = "" And ErrorCount = 0 Then
    MsgBox "Please enter the Install Duration.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("e41").Interior.colorindex = 26
    End If

'Range("f45").Select
'If ActiveCell.Value = "Lease" Then
    'If MonthsRemain = "" And ErrorCount = 0 Then
        'MsgBox "Please enter the Months Remaining on Lease.", vbExclamation
        'ErrorCount = ErrorCount + 1
        'Range("e47").Interior.ColorIndex = 26
        'End If
    'If CurrentLeasePayment = 0 And ErrorCount = 0 Then
        'MsgBox "Please enter the Current Lease Monthly Payment.", vbExclamation
        'ErrorCount = ErrorCount + 1
        'Range("e49").Interior.ColorIndex = 26
        'End If
    'If BuyoutAmount = 0 And ErrorCount = 0 Then
        'MsgBox "Please enter the Buyout Amount.", vbExclamation
        'ErrorCount = ErrorCount + 1
        'Range("e51").Interior.ColorIndex = 26
        'End If
    'If FinanceCompanyCFS = "" And ErrorCount = 0 Then
        'MsgBox "Please enter the Finance Company.", vbExclamation
        'ErrorCount = ErrorCount + 1
        'Range("e53:f53").Interior.ColorIndex = 26
        'End If
'End If

Range("k67").Select
ActiveCell.Value = "=LEN(A66)"

If Justification = "" And ErrorCount = 0 Then
    MsgBox "Please provide a justification for this request", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a52").Interior.colorindex = 26
    End If
    
Range("k67").Select
If Justification <> "" And ErrorCount = 0 And ActiveCell.Value < 25 Then
    MsgBox "Please provide more detail in your justification.", vbExclamation
    ErrorCount = ErrorCount + 1
    Range("a52").Interior.colorindex = 26
    End If
        
Range("k67").Select
Selection.Clear

'as per request 05-17-2011 do not protect this worksheet
'Protect the worksheet
'ActiveSheet.Protect Password:="team", _
'DrawingObjects:=False, Contents:=True, Scenarios:= _
'False, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
'AllowFormattingRows:=True, AllowSorting:=True, AllowFiltering:=True

If Not m_bValueSelected Then
    MsgBox "Please select Program.", vbExclamation
    Exit Sub
End If

If GetActiveXObject("obUpFront").Value = False And GetActiveXObject("obContinue").Value = False Then
        MsgBox "Choose Aftermarket Support Selection option.", vbExclamation
        Exit Sub
ElseIf GetActiveXObject("obUpFront").Value = True Then
    'do nothing
Else
        If GetActiveXObject("obContinue").Value = True Then
                If GetActiveXObject("chkAgreement").Value = False Then
                        MsgBox "When Continuous Support - iWR CPC is selected Agreement must be checked.", vbExclamation
                        Exit Sub
                End If
        End If
End If

'Validate numbers from Sheet4 class
If Sheet4.ValidateNumbers(111) = False Then
    Exit Sub
End If

If ErrorCount = 0 Then
                
On Error Resume Next
        
        Dim sh As Shape
        
        Set sh = ActiveSheet.Shapes("Picture 46")
        
        If sh Is Nothing Then
                'do nothing
    Else
                sh.Select
                Selection.Delete
        End If
        
    UserFormCSMP.Show
        
End If

Utils.CSMPDetailForm_GreenButtonClicked = False

End Sub


Attribute VB_Name = "CSMPTotals"
Sub CSMPTotals()
' Macro recorded 9/25/2009 by Canon
'

ActiveSheet.unprotect Password:="team"

Dim a As Integer
Dim BlankCounter As Integer


Dim TotalsRow As Integer
Dim ItemNumberColumn As Integer

Dim NumberOfUnitsColumn As Integer
Dim DealerPriceColumn As Integer
Dim CSMPCreditColumn As Integer
Dim PlusPercentColumn As Integer
Dim CSMPExtCreditColumn As Integer
Dim CustomerPriceColumn As Integer
Dim CustomerPriceExtColumn As Integer
Dim AutomaticCreditColumn As Integer
Dim AftermarketColumn As Integer
Dim CWOColumn As Integer

Dim NumberOfUnitsSum As Single
Dim DealerPriceSum As Single
Dim CSMPCreditSum As Single
Dim CustomerPriceSum As Single
Dim AutomaticCreditSum As Single
Dim AftermarketSum As Single
Dim CWOSum As Single
Dim TotalPriceColumn As Integer

TotalsRow = 0
ItemNumberColumn = 0
NumberOfUnitsColumn = 0
CSMPCreditColumn = 0
CSMPExtCreditColumn = 0
DealerPriceColumn = 0
PlusPercentColumn = 0
CustomerPriceColumn = 0
CustomerPriceExtColumn = 0
AutomaticCreditColumn = 0
AftermarketColumn = 0
CWOColumn = 0
TotalPriceColumn = 0

NumberOfUnitsSum = 0
DealerPriceSum = 0
CustomerPriceSum = 0
AutomaticCreditSum = 0
AftermarketSum = 0
CWOSum = 0


Application.ScreenUpdating = False

    'remove duplicate unused column Marketing Programs that follows on the right from the column GP less CWO %
    Utils.DeleteNearbyDuplicateColumn ActiveSheet, "GP less CWO %", "Marketing Programs"
    
    'Find all of the columns
    a = 0
    Do While a < 52
        Range("A2").Select
        If ActiveCell.Offset(0, a).Value = "Item #" Then ItemNumberColumn = a
        If ActiveCell.Offset(0, a).Value = "Number of Units" Then NumberOfUnitsColumn = a
        If ActiveCell.Offset(0, a).Value = "Dealer Price" Then DealerPriceColumn = a
        If ActiveCell.Offset(0, a).Value = "CSMP Credit" Then CSMPCreditColumn = a
        If ActiveCell.Offset(0, a).Value = "Discount Ratio" Then PlusPercentColumn = a
        If ActiveCell.Offset(0, a).Value = "CSMP Credit Extended" Then CSMPExtCreditColumn = a
        If ActiveCell.Offset(0, a).Value = "Net Dealer Cost before CWO" Then CustomerPriceColumn = a
        If ActiveCell.Offset(0, a).Value = "Net Dealer Cost Extended" Then CustomerPriceExtColumn = a
        If ActiveCell.Offset(0, a).Value = Utils.STR_COLUMN_NAME_AUTOMATIC_CREDIT Then AutomaticCreditColumn = a
        If ActiveCell.Offset(0, a).Value = "Aftermarket" Then AftermarketColumn = a
        If ActiveCell.Offset(0, a).Value = "CWO" Then CWOColumn = a
        If ActiveCell.Offset(0, a).Value = "Total Price" Then TotalPriceColumn = a
        a = a + 1
    Loop
    
    'Find the Totals Row
        a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A2").Select
        If ActiveCell.Offset(a, ItemNumberColumn).Value = "TOTALS" Then
        TotalsRow = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop
    
    'Calculate the Number of Units
    If ActiveSheet.Name <> "Software" Then
        a = 0
        Do While a < TotalsRow - 3
        Range("A5").Select
        If ActiveCell.Offset(a, NumberOfUnitsColumn).Value <> "" And ActiveCell.Offset(a, NumberOfUnitsColumn).Font.Bold = True Then
            NumberOfUnitsSum = NumberOfUnitsSum + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
            a = a + 1
            Else
            a = a + 1
        End If
        Loop
    Else
        a = 0
        Do While a < TotalsRow - 3
        Range("A5").Select
        If ActiveCell.Offset(a, NumberOfUnitsColumn).Value <> "" Then
            NumberOfUnitsSum = NumberOfUnitsSum + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
            a = a + 1
            Else
            a = a + 1
        End If
        Loop
    End If
    

    'Calculate the Dealer Price Sum
    a = 0
    DealerPriceSum = 0
    
    Do While a < TotalsRow - 3
    Range("A5").Select
    If ActiveCell.Offset(a, NumberOfUnitsColumn).Value <> "" And ActiveCell.Offset(a, NumberOfUnitsColumn - 1).Font.colorindex <> 49 Then
        DealerPriceSum = DealerPriceSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, DealerPriceColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    'Calculate the CSMP Credit Sum
    a = 0
    CSMPCreditSum = 0
    
    Do While a < TotalsRow - 3
    Range("A5").Select
    If ActiveCell.Offset(a, NumberOfUnitsColumn).Value <> "" And ActiveCell.Offset(a, NumberOfUnitsColumn - 1).Font.colorindex <> 49 Then
        CSMPCreditSum = CSMPCreditSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, CSMPCreditColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    

    
    'Calculate the Net Dealer Cost before CWO Sum
    a = 0
    CustomerPriceSum = 0
    
    Do While a < TotalsRow - 3
    Range("A5").Select
    If ActiveCell.Offset(a, NumberOfUnitsColumn).Value <> "" And ActiveCell.Offset(a, NumberOfUnitsColumn - 1).Font.colorindex <> 49 Then
        CustomerPriceSum = CustomerPriceSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, CustomerPriceColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
        
    'Calculate the Automatic Credit Sum
    a = 0
    AutomaticCreditSum = 0
    
    Do While a < TotalsRow - 3
    Range("A5").Select
    If ActiveCell.Offset(a, NumberOfUnitsColumn).Value <> "" And ActiveCell.Offset(a, NumberOfUnitsColumn - 1).Font.colorindex <> 49 Then
        AutomaticCreditSum = AutomaticCreditSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, AutomaticCreditColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    'Calculate the Aftermarket Sum
    a = 0
    AftermarketSum = 0
    
    Do While a < TotalsRow - 3
    Range("A5").Select
    If ActiveCell.Offset(a, NumberOfUnitsColumn).Value <> "" And ActiveCell.Offset(a, NumberOfUnitsColumn - 1).Font.colorindex <> 49 Then
        AftermarketSum = AftermarketSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, AftermarketColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    'Calculate the CWO Sum
    a = 0
    CWOSum = 0
    
    Do While a < TotalsRow - 3
    Range("A5").Select
    If ActiveCell.Offset(a, NumberOfUnitsColumn).Value <> "" And ActiveCell.Offset(a, NumberOfUnitsColumn - 1).Font.colorindex <> 49 Then
        CWOSum = CWOSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, CWOColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
       
    'Totals
    If NumberOfUnitsSum = 0 Then
        Range("A2").Select
        MsgBox "No quantities have been entered.  Please enter the number of units in column D.", vbExclamation
        ActiveCell.Offset(TotalsRow, NumberOfUnitsColumn).Value = 0
        ActiveCell.Offset(TotalsRow, DealerPriceColumn).Value = 0
        ActiveCell.Offset(TotalsRow, CSMPExtCreditColumn).Value = 0
        ActiveCell.Offset(TotalsRow, CustomerPriceExtColumn).Value = 0
        ActiveCell.Offset(TotalsRow, PlusPercentColumn).Value = 0
        ActiveCell.Offset(TotalsRow, AutomaticCreditColumn).Value = 0
        ActiveCell.Offset(TotalsRow, AftermarketColumn).Value = 0
        ActiveCell.Offset(TotalsRow, CWOColumn).Value = 0
        ActiveCell.Offset(TotalsRow, TotalPriceColumn).Value = 0
        Else
        Range("A2").Select
        ActiveCell.Offset(TotalsRow, NumberOfUnitsColumn).Value = NumberOfUnitsSum
        ActiveCell.Offset(TotalsRow, DealerPriceColumn).Value = DealerPriceSum
        ActiveCell.Offset(TotalsRow, CSMPExtCreditColumn).Value = CSMPCreditSum
        ActiveCell.Offset(TotalsRow, CustomerPriceExtColumn).Value = CustomerPriceSum
        ActiveCell.Offset(TotalsRow, PlusPercentColumn).Value = (CustomerPriceSum / DealerPriceSum) - 1
        ActiveCell.Offset(TotalsRow, AutomaticCreditColumn).Value = AutomaticCreditSum
        ActiveCell.Offset(TotalsRow, AftermarketColumn).Value = AftermarketSum
        ActiveCell.Offset(TotalsRow, CWOColumn).Value = CWOSum
        ActiveCell.Offset(TotalsRow, TotalPriceColumn).Value = DealerPriceSum - CSMPCreditSum - AutomaticCreditSum - AftermarketSum - CWOSum
    End If
    
Range("A1").Select
  
Application.ScreenUpdating = True


'Protect the worksheet
ActiveSheet.Protect Password:="team", _
DrawingObjects:=False, Contents:=True, Scenarios:= _
False, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
AllowFormattingRows:=True, AllowSorting:=True, AllowFiltering:=True
        
End Sub



Attribute VB_Name = "FastCalc"
Sub FastCalc()

Dim pw As String

pw = InputBox("Enter Password:")

If pw = "team" Then

    Dim a As Integer
    Dim BlankCounter As Integer
    
    
   Dim TotalsRowDigital As Integer
    Dim TotalsRowSoftware As Integer
    Dim TotalsRowFax As Integer
    
    Dim NumberOfUnitsColumn As Integer
    Dim DealerPriceColumn As Integer
    Dim CSMPCreditColumn As Integer
    Dim PlusPercentColumn As Integer
    Dim CSMPExtCreditColumn As Integer
    Dim CustomerPriceColumn As Integer
    Dim CustomerPriceExtColumn As Integer
    Dim AutomaticCreditColumn As Integer
    Dim AftermarketColumn As Integer
    Dim CWOColumn As Integer
    
    Dim CSMPCreditSum As Single
    Dim CSMPExtCreditSum As Single
    Dim CustomerPriceExtSum As Single
    Dim AutomaticCreditSum As Single
    Dim AftermarketSum As Single
    Dim CWOSum As Single
    
    Dim ItemClassColumn As Integer
    Dim LandedCostColumnDC As Integer
    Dim LandedCostColumnSoft As Integer
    Dim LandedCostColumnFPS As Integer
    
    Dim NumberOfUnitsSum As Single
    Dim NumberOfUnitsSumIR As Single
    Dim NumberOfUnitsSumGRAPHICS As Single
    Dim NumberOfUnitsSumPRODSYS As Single
    Dim NumberOfUnitsSumECOPY As Single
    Dim NumberOfUnitsSumSOFTWARE As Single
    Dim NumberOfUnitsSumMFP As Single
    Dim NumberOfUnitsSumPRINTER As Single
    Dim NumberOfUnitsSumSCANNER As Single
    
    Dim LandedCostSum As Single
    Dim LandedCostSumIR As Single
    Dim LandedCostSumGRAPHICS As Single
    Dim LandedCostSumPRODSYS As Single
    Dim LandedCostSumECOPY As Single
    Dim LandedCostSumSOFTWARE As Single
    Dim LandedCostSumMFP As Single
    Dim LandedCostSumPRINTER As Single
    Dim LandedCostSumSCANNER As Single
    
    Dim CustomerPriceSum As Single
    Dim CustomerPriceSumIR As Single
    Dim CustomerPriceSumGRAPHICS As Single
    Dim CustomerPriceSumPRODSYS As Single
    Dim CustomerPriceSumECOPY As Single
    Dim CustomerPriceSumSoftware As Single
    Dim CustomerPriceSumMFP As Single
    Dim CustomerPricePRINTER As Single
    Dim CustomerPriceSCANNER As Single
    
    Dim DealerPriceSum As Single
    Dim DealerPriceSumIR As Single
    Dim DealerPriceSumGRAPHICS As Single
    Dim DealerPriceSumPRODSYS As Single
    Dim DealerPriceSumECOPY As Single
    Dim DealerPriceSumSOFTWARE As Single
    Dim DealerPriceSumMFP As Single
    Dim DealerPriceSumPRINTER As Single
    Dim DealerPriceSumSCANNER As Single
    
    TotalsRow = 0
    ItemNumberColumn = 0
    NumberOfUnitsColumn = 0
    CSMPCreditColumn = 0
    CSMPExtCreditColumn = 0
    DealerPriceColumn = 0
    PlusPercentColumn = 0
    CustomerPriceColumn = 0
    CustomerPriceExtColumn = 0
    AutomaticCreditColumn = 0
    AftermarketColumn = 0
    CWOColumn = 0
    ItemClassColumn = 0
        
    TotalsRowDigital = 0
    TotalsRowSoftware = 0
    TotalsRowFax = 0
    
    LandedCostColumnDC = 999
    LandedCostColumnSoft = 999
    LandedCostColumnFPS = 999
    
    DealerPriceSum = 0
    AutomaticCreditSum = 0
    AftermarketSum = 0
    CWOSum = 0
    LandedCostSum = 0
    CSMPCreditsColumn = 0
    TotalPriceColumn = 0
    
    NumberOfUnitsSum = 0
    NumberOfUnitsSumIR = 0
    NumberOfUnitsSumGRAPHICS = 0
    NumberOfUnitsSumPRODSYS = 0
    NumberOfUnitsSumECOPY = 0
    NumberOfUnitsSumSOFTWARE = 0
    NumberOfUnitsSumMFP = 0
    NumberOfUnitsSumPRINTER = 0
    NumberOfUnitsSumSCANNER = 0
    
    LandedCostSum = 0
    LandedCostSumIR = 0
    LandedCostSumGRAPHICS = 0
    LandedCostSumPRODSYS = 0
    LandedCostSumECOPY = 0
    LandedCostSumSOFTWARE = 0
    LandedCostSumMFP = 0
    LandedCostSumPRINTER = 0
    LandedCostSumSCANNER = 0
    
    CustomerPriceSum = 0
    CustomerPriceSumIR = 0
    CustomerPriceSumGRAPHICS = 0
    CustomerPriceSumECOPY = 0
    CustomerPriceSumPRODSYS = 0
    CustomerPriceSumSoftware = 0
    CustomerPriceSumMFP = 0
    CustomerPriceSumPRINTER = 0
    CustomerPriceSumSCANNER = 0
    
    DealerPriceSum = 0
    DealerPriceSumIR = 0
    DealerPriceSumGRAPHICS = 0
    DealerPriceSumPRODSYS = 0
    DealerPriceSumECOPY = 0
    DealerPriceSumSOFTWARE = 0
    DealerPriceSumMFP = 0
    DealerPriceSumPRINTER = 0
    DealerPriceSumSCANNER = 0
    
    Application.ScreenUpdating = False
    
    ' update 08-24-2017 LC columns indexes must be less than 1 because they are used in Offset function on lines 568-617
    Sheets("Digital and Color").Select
    
    LandedCostColumnDC = Utils.ColIndexExactMatch(ActiveSheet, "LC", 2) - 1
    
    Sheets("Software").Select
    
    LandedCostColumnSoft = Utils.ColIndexExactMatch(ActiveSheet, "LC", 2) - 1
    
    Sheets("Fax, Printer, Scanner").Select
    
    LandedCostColumnFPS = Utils.ColIndexExactMatch(ActiveSheet, "LC", 2) - 1
        
If LandedCostColumnDC = 999 Then MsgBox "Landed Cost has not been entered on the Digital and Color tab.  Insert and try again.", vbExclamation
If LandedCostColumnSoft = 999 Then MsgBox "Landed Cost has not been entered on the Software tab.  Insert and try again.", vbExclamation
If LandedCostColumnFPS = 999 Then MsgBox "Landed Cost has not been entered on the Digital and Color tab.  Insert and try again.", vbExclamation

If LandedCostColumnDC <> 999 And LandedCostColumnSoft <> 999 And LandedCostColumnFPS <> 999 Then
            
    'Find all of the columns
    Sheets("Digital and Color").Select
        
    a = 0
    Do While a < 52
        Range("A2").Select
        If ActiveCell.Offset(0, a).Value = "Item #" Then ItemNumberColumn = a
        If ActiveCell.Offset(0, a).Value = "Number of Units" Then NumberOfUnitsColumn = a
        If ActiveCell.Offset(0, a).Value = "Dealer Price" Then DealerPriceColumn = a
        If ActiveCell.Offset(0, a).Value = "CSMP Credit" Then CSMPCreditColumn = a
        If ActiveCell.Offset(0, a).Value = "Discount Ratio" Then PlusPercentColumn = a
        If ActiveCell.Offset(0, a).Value = "CSMP Credit Extended" Then CSMPExtCreditColumn = a
        If ActiveCell.Offset(0, a).Value = "Net Dealer Cost before CWO" Then CustomerPriceColumn = a
        If ActiveCell.Offset(0, a).Value = "Net Dealer Cost Extended" Then CustomerPriceExtColumn = a
        If ActiveCell.Offset(0, a).Value = Utils.STR_COLUMN_NAME_AUTOMATIC_CREDIT Then AutomaticCreditColumn = a
        If ActiveCell.Offset(0, a).Value = "Aftermarket" Then AftermarketColumn = a
        If ActiveCell.Offset(0, a).Value = "CWO" Then CWOColumn = a
        If ActiveCell.Offset(0, a).Value = "Item Class" Then ItemClassColumn = a
        a = a + 1
    Loop
        
        'Find the Totals Row
        Sheets("Digital and Color").Select
        a = 0
        Do While a < Utils.N_MAX_ROWS_TO_SEARCH
            Range("A2").Select
            If ActiveCell.Offset(a, ItemNumberColumn).Value = "TOTALS" Then
            TotalsRowDigital = a
            a = Utils.N_MAX_ROWS_TO_SEARCH
            Else
            a = a + 1
            End If
        Loop
        
        Sheets("Software").Select
        
         a = 0
        Do While a < Utils.N_MAX_ROWS_TO_SEARCH
            Range("A2").Select
            If ActiveCell.Offset(a, ItemNumberColumn).Value = "TOTALS" Then
            TotalsRowSoftware = a
            a = Utils.N_MAX_ROWS_TO_SEARCH
            Else
            a = a + 1
            End If
        Loop
        
        Sheets("Fax, Printer, Scanner").Select
        

        a = 0
        Do While a < 1300
            Range("A2").Select
            If ActiveCell.Offset(a, ItemNumberColumn).Value = "TOTALS" Then
            TotalsRowFax = a
            a = 1300
            Else
            a = a + 1
            End If
        Loop
        
    'Calculate the Number of Units
    Sheets("Digital and Color").Select
    a = 0
    Do While a < TotalsRowDigital - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.Bold = True Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "iR" Then NumberOfUnitsSumIR = NumberOfUnitsSumIR + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Graphics" Then NumberOfUnitsSumGRAPHICS = NumberOfUnitsSumGRAPHICS + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Prod Sys" Then NumberOfUnitsSumPRODSYS = NumberOfUnitsSumPRODSYS + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        If ActiveCell.Offset(a, ItemClassColumn).Value = "eCopy" Then NumberOfUnitsSumECOPY = NumberOfUnitsSumECOPY + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        a = a + 1
        Else
        a = a + 1
    End If
    Loop

    Sheets("Software").Select
    a = 0
    Do While a < TotalsRowSoftware - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then
        Range("A5").Select
        NumberOfUnitsSumSOFTWARE = NumberOfUnitsSumSOFTWARE + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        a = a + 1
        Else
        a = a + 1
        End If
    Loop
    
    Sheets("Fax, Printer, Scanner").Select
    a = 0
    Do While a < TotalsRowFax - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.Bold = True Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "MFP" Then NumberOfUnitsSumMFP = NumberOfUnitsSumMFP + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Printer" Then NumberOfUnitsSumPRINTER = NumberOfUnitsSumPRINTER + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Scanner" Then NumberOfUnitsSumSCANNER = NumberOfUnitsSumSCANNER + ActiveCell.Offset(a, NumberOfUnitsColumn).Value
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    ' as per request on 09-13-2011 do not add software to total units (NumberOfUnitsSumSOFTWARE)
    NumberOfUnitsSum = NumberOfUnitsSumIR + NumberOfUnitsSumGRAPHICS + NumberOfUnitsSumPRODSYS + NumberOfUnitsSumECOPY + NumberOfUnitsSumMFP + NumberOfUnitsSumPRINTER + NumberOfUnitsSumSCANNER
    
        
    'Calculate the Total Revenue (Dealer Price)
    Sheets("Digital and Color").Select
    a = 0
    Do While a < TotalsRowDigital - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "iR" Then DealerPriceSumIR = DealerPriceSumIR + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Graphics" Then DealerPriceSumGRAPHICS = DealerPriceSumGRAPHICS + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Prod Sys" Then DealerPriceSumPRODSYS = DealerPriceSumPRODSYS + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "eCopy" Then DealerPriceSumECOPY = DealerPriceSumECOPY + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop

    Sheets("Software").Select
    a = 0
    Do While a < TotalsRowSoftware - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then
        Range("A5").Select
        DealerPriceSumSOFTWARE = DealerPriceSumSOFTWARE + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
        End If
    Loop
    
    Sheets("Fax, Printer, Scanner").Select
    a = 0
    Do While a < TotalsRowFax - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "MFP" Then DealerPriceSumMFP = DealerPriceSumMFP + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Printer" Then DealerPriceSumPRINTER = DealerPriceSumPRINTER + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Scanner" Then DealerPriceSumSCANNER = DealerPriceSumSCANNER + (ActiveCell.Offset(a, DealerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    DealerPriceSum = DealerPriceSumIR + DealerPriceSumGRAPHICS + DealerPriceSumPRODSYS + DealerPriceSumECOPY + DealerPriceSumSOFTWARE + DealerPriceSumMFP + DealerPriceSumPRINTER + DealerPriceSumSCANNER

    
    'Calculate the Total Net Dealer Cost (Net Dealer Cost before CWO)
    CustomerPriceSum = 0
    Sheets("Digital and Color").Select
    a = 0
    Do While a < TotalsRowDigital - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "iR" Then CustomerPriceSumIR = CustomerPriceSumIR + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Graphics" Then CustomerPriceSumGRAPHICS = CustomerPriceSumGRAPHICS + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Prod Sys" Then CustomerPriceSumPRODSYS = CustomerPriceSumPRODSYS + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "eCopy" Then CustomerPriceSumECOPY = CustomerPriceSumECOPY + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop

    Sheets("Software").Select
    a = 0
    Do While a < TotalsRowSoftware - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then
        Range("A5").Select
        CustomerPriceSumSoftware = CustomerPriceSumSoftware + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    Sheets("Fax, Printer, Scanner").Select
    a = 0
    Do While a < TotalsRowFax - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "MFP" Then CustomerPriceSumMFP = CustomerPriceSumMFP + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Printer" Then CustomerPriceSumPRINTER = CustomerPriceSumPRINTER + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Scanner" Then CustomerPriceSumSCANNER = CustomerPriceSumSCANNER + (ActiveCell.Offset(a, CustomerPriceColumn).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    CustomerPriceSum = CustomerPriceSumIR + CustomerPriceSumGRAPHICS + CustomerPriceSumPRODSYS + CustomerPriceSumECOPY + CustomerPriceSumSoftware + CustomerPriceSumMFP + CustomerPriceSumPRINTER + CustomerPriceSumSCANNER

        
    'Calculate the Total Automatic Credit
    AutomaticCreditSum = 0
    
    Sheets("Digital and Color").Select
    a = 0
    Do While a < TotalsRowDigital - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        AutomaticCreditSum = AutomaticCreditSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, AutomaticCreditColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    Sheets("Software").Select
    a = 0
    Do While a < TotalsRowSoftware - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        AutomaticCreditSum = AutomaticCreditSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, AutomaticCreditColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    Sheets("Fax, Printer, Scanner").Select
    a = 0
    Do While a < TotalsRowFax - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        AutomaticCreditSum = AutomaticCreditSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, AutomaticCreditColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    'Calculate the Total Aftermarket
    AftermarketSum = 0
    
    Sheets("Digital and Color").Select
    a = 0
    Do While a < TotalsRowDigital - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        AftermarketSum = AftermarketSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, AftermarketColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    Sheets("Software").Select
    a = 0
    Do While a < TotalsRowSoftware - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        AftermarketSum = AftermarketSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, AftermarketColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    Sheets("Fax, Printer, Scanner").Select
    a = 0
    Do While a < TotalsRowFax - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        AftermarketSum = AftermarketSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, AftermarketColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    'Calculate the Total CWO
    CWOSum = 0
    
    Sheets("Digital and Color").Select
    a = 0
    Do While a < TotalsRowDigital - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        CWOSum = CWOSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, CWOColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    Sheets("Software").Select
    a = 0
    Do While a < TotalsRowSoftware - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        CWOSum = CWOSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, CWOColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    Sheets("Fax, Printer, Scanner").Select
    a = 0
    Do While a < TotalsRowFax - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        CWOSum = CWOSum + (ActiveCell.Offset(a, NumberOfUnitsColumn).Value * ActiveCell.Offset(a, CWOColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
        
    'Calculate the Landed Cost
    Sheets("Digital and Color").Select
      
    a = 0
    Do While a < TotalsRowDigital - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 And ActiveCell.Offset(a, LandedCostColumnDC).Value <> "" Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "iR" And ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then LandedCostSumIR = LandedCostSumIR + (ActiveCell.Offset(a, LandedCostColumnDC).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Graphics" And ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then LandedCostSumGRAPHICS = LandedCostSumGRAPHICS + (ActiveCell.Offset(a, LandedCostColumnDC).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Prod Sys" And ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then LandedCostSumPRODSYS = LandedCostSumPRODSYS + (ActiveCell.Offset(a, LandedCostColumnDC).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "eCopy" And ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then LandedCostSumECOPY = LandedCostSumECOPY + (ActiveCell.Offset(a, LandedCostColumnDC).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
    End If
    Loop
    
    Sheets("Software").Select
    
    a = 0
    Do While a < TotalsRowSoftware - 3
        Range("A5").Select
        If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" Then
            If ActiveCell.Offset(a, NumberOfUnitsColumn).Value <> "" Then
                Range("A5").Select
                LandedCostSumSOFTWARE = LandedCostSumSOFTWARE + (ActiveCell.Offset(a, LandedCostColumnSoft).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
            End If
            a = a + 1
        Else
            a = a + 1
        End If
    Loop
        
    Sheets("Fax, Printer, Scanner").Select
    
    a = 0
    Do While a < TotalsRowFax - 3
    Range("A5").Select
    If ActiveCell.Offset(a, ItemNumberColumn).Value <> "" And ActiveCell.Offset(a, ItemNumberColumn).Font.colorindex <> 49 Then
        Range("A5").Select
        If ActiveCell.Offset(a, ItemClassColumn).Value = "MFP" Then LandedCostSumMFP = LandedCostSumMFP + (ActiveCell.Offset(a, LandedCostColumnFPS).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Printer" Then LandedCostSumPRINTER = LandedCostSumPRINTER + (ActiveCell.Offset(a, LandedCostColumnFPS).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        If ActiveCell.Offset(a, ItemClassColumn).Value = "Scanner" Then LandedCostSumSCANNER = LandedCostSumSCANNER + (ActiveCell.Offset(a, LandedCostColumnFPS).Value * ActiveCell.Offset(a, NumberOfUnitsColumn).Value)
        a = a + 1
        Else
        a = a + 1
        End If
    Loop
    
    LandedCostSum = LandedCostSumIR + LandedCostSumGRAPHICS + LandedCostSumPRODSYS + LandedCostSumECOPY + LandedCostSumSOFTWARE + LandedCostSumMFP + LandedCostSumPRINTER + LandedCostSumSCANNER
                       
    'Place cursor at top
    If Sheets("Fax, Printer, Scanner").Visible = True Then
        Sheets("Fax, Printer, Scanner").Select
        Range("A1").Select
    End If
    If Sheets("Software").Visible = True Then
        Sheets("Software").Select
        Range("A1").Select
    End If
     If Sheets("Digital and Color").Visible = True Then
        Sheets("Digital and Color").Select
        Range("A1").Select
    End If
        
    'Create the Profit Summary
        Sheets("Profit Summary").Visible = True
        Sheets("Profit Summary").Activate
        
        Range("E8").Value = NumberOfUnitsSum
        Range("E9").Value = DealerPriceSum
        Range("E10").Value = CustomerPriceSum
        Range("E11").Value = (CustomerPriceSum / DealerPriceSum) - 1
        Range("E12").Value = CustomerPriceSum - LandedCostSum
        Range("E13").Value = (CustomerPriceSum - LandedCostSum) / DealerPriceSum
        
        'With CWO
        Range("E15").Value = CWOSum
        Range("E16").Value = ((CustomerPriceSum - CWOSum) / DealerPriceSum) - 1
        Range("E17").Value = CustomerPriceSum - LandedCostSum - CWOSum
        Range("E18").Value = (CustomerPriceSum - LandedCostSum - CWOSum) / DealerPriceSum

        'With Automatic Credit
        Range("E20").Value = AutomaticCreditSum
        Range("E21").Value = ((CustomerPriceSum - CWOSum - AutomaticCreditSum) / DealerPriceSum) - 1
        Range("E22").Value = CustomerPriceSum - LandedCostSum - CWOSum - AutomaticCreditSum
        Range("E23").Value = (CustomerPriceSum - LandedCostSum - CWOSum - AutomaticCreditSum) / DealerPriceSum

        'With Aftermarket Programs
        Range("E25").Value = AftermarketSum
        Range("E26").Value = ((CustomerPriceSum - CWOSum - AutomaticCreditSum - AftermarketSum) / DealerPriceSum) - 1
        Range("E27").Value = CustomerPriceSum - LandedCostSum - CWOSum - AutomaticCreditSum - AftermarketSum
        Range("E28").Value = (CustomerPriceSum - LandedCostSum - CWOSum - AutomaticCreditSum - AftermarketSum) / DealerPriceSum
        
        'Product Line Summaries
        Range("C31").Value = NumberOfUnitsSumIR
        Range("D31").Value = (CustomerPriceSumIR + CustomerPriceSumECOPY) - (LandedCostSumIR + LandedCostSumECOPY)
        If DealerPriceSumIR <> 0 Then Range("E31").Value = ((CustomerPriceSumIR + CustomerPriceSumECOPY) - (LandedCostSumIR + LandedCostSumECOPY)) / (DealerPriceSumIR + DealerPriceSumECOPY)
        If DealerPriceSumIR = 0 Then Range("E31").Value = "N/A"
                        
        Range("C32").Value = NumberOfUnitsSumGRAPHICS
        Range("D32").Value = CustomerPriceSumGRAPHICS - LandedCostSumGRAPHICS
        If DealerPriceSumGRAPHICS <> 0 Then Range("E32").Value = (CustomerPriceSumGRAPHICS - LandedCostSumGRAPHICS) / DealerPriceSumGRAPHICS
        If DealerPriceSumGRAPHICS = 0 Then Range("E32").Value = "N/A"
     
        Range("C33").Value = NumberOfUnitsSumPRODSYS
        Range("D33").Value = CustomerPriceSumPRODSYS - LandedCostSumPRODSYS
        If DealerPriceSumPRODSYS <> 0 Then Range("E33").Value = (CustomerPriceSumPRODSYS - LandedCostSumPRODSYS) / DealerPriceSumPRODSYS
        If DealerPriceSumPRODSYS = 0 Then Range("E33").Value = "N/A"
             
        Range("C34").Value = NumberOfUnitsSumSOFTWARE
        Range("D34").Value = CustomerPriceSumSoftware - LandedCostSumSOFTWARE
        If DealerPriceSumSOFTWARE <> 0 Then Range("E34").Value = (CustomerPriceSumSoftware - LandedCostSumSOFTWARE) / DealerPriceSumSOFTWARE
        If DealerPriceSumSOFTWARE = 0 Then Range("E34").Value = "N/A"
            
        Range("C35").Value = NumberOfUnitsSumMFP
        Range("D35").Value = CustomerPriceSumMFP - LandedCostSumMFP
        If DealerPriceSumMFP <> 0 Then Range("E35").Value = (CustomerPriceSumMFP - LandedCostSumMFP) / DealerPriceSumMFP
        If DealerPriceSumMFP = 0 Then Range("E35").Value = "N/A"
     
        Range("C36").Value = NumberOfUnitsSumPRINTER
        Range("D36").Value = CustomerPriceSumPRINTER - LandedCostSumPRINTER
                
                'flag (fix column typo) 05-12-2011 (#0006)
        If DealerPriceSumPRINTER <> 0 Then Range("E36").Value = (CustomerPriceSumPRINTER - LandedCostSumPRINTER) / DealerPriceSumPRINTER
        If DealerPriceSumPRINTER = 0 Then Range("E36").Value = "N/A"
             
        Range("C37").Value = "N/A" 'No Scanner Business
        Range("D37").Value = "N/A"
        Range("E37").Value = "N/A"
            
     
        Range("A1").Select
        
               
End If 'Landed Cost If
End If 'Password If

Application.ScreenUpdating = True


End Sub
Attribute VB_Name = "GlobalRateFactors"
'----------------------------------------------------------------------------------------------------------------------
'- NAD Rate Factors (Values obtained from "FTR Rate Factors.2Q.04.01.2017 to 06.30.2017.doc")
'- 2Q/2017 Rate changes as per email from Mollie on 03/27/2017
'----------------------------------------------------------------------------------------------------------------------

'Digital/Color Copier - Fair Market Value
Public Const grf_NADDigitalColorCopierNoCancel_12 = 0.0845 'No change
Public Const grf_NADDigitalColorCopierNoCancel_24 = 0.044  'No change
Public Const grf_NADDigitalColorCopierNoCancel_36 = 0.0294 'No change
Public Const grf_NADDigitalColorCopierNoCancel_48 = 0.0242 'No change
Public Const grf_NADDigitalColorCopierNoCancel_60 = 0.02   'No change

Public Const grf_NADDigitalColorCopier05Cancel_12 = 0.0877 'No change
Public Const grf_NADDigitalColorCopier05Cancel_24 = 0.0454 'No change
Public Const grf_NADDigitalColorCopier05Cancel_36 = 0.0303 'No change
Public Const grf_NADDigitalColorCopier05Cancel_48 = 0.0249 'No change
Public Const grf_NADDigitalColorCopier05Cancel_60 = 0.0206 'No change

Public Const grf_NADDigitalColorCopier10Cancel_12 = 0.0876 'No change
Public Const grf_NADDigitalColorCopier10Cancel_24 = 0.0455 'No change
Public Const grf_NADDigitalColorCopier10Cancel_36 = 0.0304 'No change
Public Const grf_NADDigitalColorCopier10Cancel_48 = 0.025  'No change
Public Const grf_NADDigitalColorCopier10Cancel_60 = 0.0207 'No change

Public Const grf_NADDigitalColorCopier20Cancel_12 = 0.0881 'No change
Public Const grf_NADDigitalColorCopier20Cancel_24 = 0.0457 'No change
Public Const grf_NADDigitalColorCopier20Cancel_36 = 0.0306 'No change
Public Const grf_NADDigitalColorCopier20Cancel_48 = 0.0252 'No change
Public Const grf_NADDigitalColorCopier20Cancel_60 = 0.0209 'No change


'All Other Equipment (Large Format Printer, Scanner & Fax) - Fair Market Value
Public Const grf_NADAllOtherEquipmentNoCancel_12 = 0.0911 'No change
Public Const grf_NADAllOtherEquipmentNoCancel_24 = 0.0462 'No change
Public Const grf_NADAllOtherEquipmentNoCancel_36 = 0.0302 'No change
Public Const grf_NADAllOtherEquipmentNoCancel_48 = 0.0246 'No change
Public Const grf_NADAllOtherEquipmentNoCancel_60 = 0.0201 'No change

Public Const grf_NADAllOtherEquipment05Cancel_12 = 0.094  'No change
Public Const grf_NADAllOtherEquipment05Cancel_24 = 0.0476 'No change
Public Const grf_NADAllOtherEquipment05Cancel_36 = 0.0311 'No change
Public Const grf_NADAllOtherEquipment05Cancel_48 = 0.0253 'No change
Public Const grf_NADAllOtherEquipment05Cancel_60 = 0.0207 'No change

Public Const grf_NADAllOtherEquipment10Cancel_12 = 0.0942 'No change
Public Const grf_NADAllOtherEquipment10Cancel_24 = 0.0477 'No change
Public Const grf_NADAllOtherEquipment10Cancel_36 = 0.0312 'No change
Public Const grf_NADAllOtherEquipment10Cancel_48 = 0.0254 'No change
Public Const grf_NADAllOtherEquipment10Cancel_60 = 0.0208 'No change

Public Const grf_NADAllOtherEquipment20Cancel_12 = 0.0947 'No change
Public Const grf_NADAllOtherEquipment20Cancel_24 = 0.0479 'No change
Public Const grf_NADAllOtherEquipment20Cancel_36 = 0.0314 'No change
Public Const grf_NADAllOtherEquipment20Cancel_48 = 0.0256 'No change
Public Const grf_NADAllOtherEquipment20Cancel_60 = 0.021  'No change

'All Equipment - $1.00 Buyout
Public Const grf_NADAllEquipmentNoCancel_12 = 0.0966 '0.0961
Public Const grf_NADAllEquipmentNoCancel_24 = 0.0508 '0.0503
Public Const grf_NADAllEquipmentNoCancel_36 = 0.0329 '0.0324
Public Const grf_NADAllEquipmentNoCancel_48 = 0.0259 '0.0254
Public Const grf_NADAllEquipmentNoCancel_60 = 0.0215 '0.0210

Public Const grf_NADAllEquipment05Cancel_12 = 0.0995 '0.0989
Public Const grf_NADAllEquipment05Cancel_24 = 0.0523 '0.0518
Public Const grf_NADAllEquipment05Cancel_36 = 0.0338 '0.0333
Public Const grf_NADAllEquipment05Cancel_48 = 0.0266 '(correction) 0.0265 '0.0261
Public Const grf_NADAllEquipment05Cancel_60 = 0.0221 '0.0216

Public Const grf_NADAllEquipment10Cancel_12 = 0.0997 '0.0992
Public Const grf_NADAllEquipment10Cancel_24 = 0.0524 '0.0519
Public Const grf_NADAllEquipment10Cancel_36 = 0.0339 '0.0334
Public Const grf_NADAllEquipment10Cancel_48 = 0.0267 '0.0262
Public Const grf_NADAllEquipment10Cancel_60 = 0.0222 '0.0218

Public Const grf_NADAllEquipment20Cancel_12 = 0.1002 '0.0996
Public Const grf_NADAllEquipment20Cancel_24 = 0.0527 '0.0521
Public Const grf_NADAllEquipment20Cancel_36 = 0.0341 '0.0336
Public Const grf_NADAllEquipment20Cancel_48 = 0.0269 '0.0264
Public Const grf_NADAllEquipment20Cancel_60 = 0.0224 '0.0210



'-------------------------------------------------------------------------------------------------------------------------------
'- Federal Rate Factors (Values obtained from "Mod294.xls") -
'- 3Q 2014 values changed as per email from Lori on 07/30/2014 -
'-------------------------------------------------------------------------------------------------------------------------------

' GSA Rate ---------------------------------------------------
' Fair Market Value (FMV) Lease Rates
Public grf_FedGSAPVL_24 As Double
Public grf_FedGSAPVL_36 As Double
Public grf_FedGSAPVL_48 As Double
Public grf_FedGSAPVL_60 As Double

' LTOP Lease / $1.00 Buyout Rates
Public grf_FedGSALTOP_24 As Double
Public grf_FedGSALTOP_36 As Double
Public grf_FedGSALTOP_48 As Double
Public grf_FedGSALTOP_60 As Double

' CFS Rate ---------------------------------------------------
' Fair Market Value (FMV) Lease Rates
Public grf_FedOpenMarketPVL_24 As Double
Public grf_FedOpenMarketPVL_36 As Double
Public grf_FedOpenMarketPVL_48 As Double
Public grf_FedOpenMarketPVL_60 As Double

'LTOP Lease / $1.00 Buyout Rates
Public grf_FedOpenMarketLTOP_24 As Double
Public grf_FedOpenMarketLTOP_36 As Double
Public grf_FedOpenMarketLTOP_48 As Double
Public grf_FedOpenMarketLTOP_60 As Double

'08-04-2014
' Use only one place for rates
'
Public Sub GetFederalRatesFromSpecialValuesWorksheet(wbActive As Workbook)
        Dim wsSpecialValues As Worksheet
    Dim rSearch As Range
    Dim strFirstAddress As String
    Dim strSVWorksheetName As String
    Dim wsCurrent As Worksheet
    Dim wsRererence As Worksheet
    Dim i As Integer 'current row
    Dim k As Integer 'current row
    
    Set wsSpecialValues = wbActive.Sheets("Special Values")
    Set wsRererence = wsSpecialValues
    
    With wsSpecialValues.Range("A1").EntireColumn
        Set rSearch = .Find(STR_FEDERAL)
        
        If Not rSearch Is Nothing Then strFirstAddress = rSearch.Address
        Do While Not rSearch Is Nothing
        
            If Trim(CStr(rSearch.Offset(0, 1).Value)) = "" Then
                grf_FedGSAPVL_24 = CDbl(rSearch.Offset(6, 20).Value)
                                grf_FedGSAPVL_36 = CDbl(rSearch.Offset(4, 20).Value)
                                grf_FedGSAPVL_48 = CDbl(rSearch.Offset(2, 20).Value)
                                grf_FedGSAPVL_60 = CDbl(rSearch.Offset(0, 20).Value)
                                                                                           
                                grf_FedGSALTOP_24 = CDbl(rSearch.Offset(6, 19).Value)
                                grf_FedGSALTOP_36 = CDbl(rSearch.Offset(4, 19).Value)
                                grf_FedGSALTOP_48 = CDbl(rSearch.Offset(2, 19).Value)
                                grf_FedGSALTOP_60 = CDbl(rSearch.Offset(0, 19).Value)
                        
                                grf_FedOpenMarketPVL_24 = CDbl(rSearch.Offset(7, 20).Value)
                                grf_FedOpenMarketPVL_36 = CDbl(rSearch.Offset(5, 20).Value)
                                grf_FedOpenMarketPVL_48 = CDbl(rSearch.Offset(3, 20).Value)
                                grf_FedOpenMarketPVL_60 = CDbl(rSearch.Offset(1, 20).Value)
                                
                                grf_FedOpenMarketLTOP_24 = CDbl(rSearch.Offset(7, 19).Value)
                                grf_FedOpenMarketLTOP_36 = CDbl(rSearch.Offset(5, 19).Value)
                                grf_FedOpenMarketLTOP_48 = CDbl(rSearch.Offset(3, 19).Value)
                                grf_FedOpenMarketLTOP_60 = CDbl(rSearch.Offset(1, 19).Value)
                                
                                Exit Do
                                
            End If
            
            Set rSearch = .Find(STR_FEDERAL, wsSpecialValues.Range(rSearch.Address))
            
            If rSearch Is Nothing Then Exit Do

            If strFirstAddress = rSearch.Address Then Exit Do
        Loop
    End With
End Sub

'don't need these as of 01-10-2012
'-------------------------------------------------
' Hardcoded values from UserFormFederalHQDashboard
' Note: Will be revisited in future update

' Rates ------------------------------------------
'Public Const grf_FedHQDashboardRate24a = 0.0456
'Public Const grf_FedHQDashboardRate36a = 0.0284
'Public Const grf_FedHQDashboardRate36b = 0.0318
'Public Const grf_FedHQDashboardRate48a = 0.0236
'Public Const grf_FedHQDashboardRate48b = 0.0244
'Public Const grf_FedHQDashboardRate60a = 0.0200
'Public Const grf_FedHQDashboardRate60b = 0.0201
'
'' Values ------------------------------------------
'Public Const grf_FedHQDashboardValue24a = 0.0522 '0.0521
'Public Const grf_FedHQDashboardValue36a = 0.0319
'Public Const grf_FedHQDashboardValue36b = 0.0363 '0.0362
'Public Const grf_FedHQDashboardValue48a = 0.0266
'Public Const grf_FedHQDashboardValue48b = 0.0289 '0.0288
'Public Const grf_FedHQDashboardValue60a = 0.0226
'Public Const grf_FedHQDashboardValue60b = 0.0246 '0.0245


'^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
' Add additional rate factors here
'----------------------------------

' -----------------------------------------------------------
' NAD Rate Factor Functions (referenced from channel split) -
' -----------------------------------------------------------

' Function to return Rate Factors specified by "Cancellation Percent" and "Lease Term" for Digital/Color Copier
' Note - use 0 for "No Cancellation" Percent term
' Returns requested rate factor OR zero if parameter(s) are invalid
' Referenced in Row 1629, columns AH - AK
Public Function gfnc_NADDigitalColorCopier(nPercent As Integer, nLeaseTerm As Integer)
  Dim nRslt As Double
  
  ' Default to 0 to indicate invalid parameter(s)
  nRslt = 0
  
  ' Switch on Cancellation Percent then Lease Term
  Select Case nPercent
    ' No Cancellation Term
    Case 0
      Select Case nLeaseTerm
        ' 12 Month Lease
        Case 12
          nRslt = grf_NADDigitalColorCopierNoCancel_12
        
        ' 24 Month Lease
        Case 24
          nRslt = grf_NADDigitalColorCopierNoCancel_24
        
        ' 36 Month Lease
        Case 36
          nRslt = grf_NADDigitalColorCopierNoCancel_36
        
        ' 48 Month Lease
        Case 48
          nRslt = grf_NADDigitalColorCopierNoCancel_48
        
        ' 60 Month Lease
        Case 60
          nRslt = grf_NADDigitalColorCopierNoCancel_60
      
      End Select
        
    ' 5-Percent Cancellation Term
    Case 5
      Select Case nLeaseTerm
        ' 12 Month Lease
        Case 12
          nRslt = grf_NADDigitalColorCopier05Cancel_12
        
        ' 24 Month Lease
        Case 24
          nRslt = grf_NADDigitalColorCopier05Cancel_24
        
        ' 36 Month Lease
        Case 36
          nRslt = grf_NADDigitalColorCopier05Cancel_36
        
        ' 48 Month Lease
        Case 48
          nRslt = grf_NADDigitalColorCopier05Cancel_48
        
        ' 60 Month Lease
        Case 60
          nRslt = grf_NADDigitalColorCopier05Cancel_60
        
      End Select
    
    ' 10-Percent Cancellation Term
    Case 10
      Select Case nLeaseTerm
        ' 12 Month Lease
        Case 12
          nRslt = grf_NADDigitalColorCopier10Cancel_12
        
        ' 24 Month Lease
        Case 24
          nRslt = grf_NADDigitalColorCopier10Cancel_24
        
        ' 36 Month Lease
        Case 36
          nRslt = grf_NADDigitalColorCopier10Cancel_36
        
        ' 48 Month Lease
        Case 48
          nRslt = grf_NADDigitalColorCopier10Cancel_48
        
        ' 60 Month Lease
        Case 60
          nRslt = grf_NADDigitalColorCopier10Cancel_60
        
      End Select
    
    ' 20-Percent Cancellation Term
    Case 20
      Select Case nLeaseTerm
        ' 12 Month Lease
        Case 12
          nRslt = grf_NADDigitalColorCopier20Cancel_12
        
        ' 24 Month Lease
        Case 24
          nRslt = grf_NADDigitalColorCopier20Cancel_24
        
        ' 36 Month Lease
        Case 36
          nRslt = grf_NADDigitalColorCopier20Cancel_36
        
        ' 48 Month Lease
        Case 48
          nRslt = grf_NADDigitalColorCopier20Cancel_48
        
        ' 60 Month Lease
        Case 60
          nRslt = grf_NADDigitalColorCopier20Cancel_60
        
      End Select
  
  End Select
  
  ' Return desired Rate Factor (or 0 for invalid term selection(s))
  gfnc_NADDigitalColorCopier = nRslt
  
End Function


' Function to return Rate Factors specified by "Cancellation Percent" and "Lease Term" for All Equipment - $1.00 Buyout
' Note - use 0 for "No Cancellation" Percent term
' Returns requested rate factor OR zero if parameter(s) are invalid
' Referenced in Row 2564, columns AH - AK
Public Function gfnc_NADAllEquipment(nPercent As Integer, nLeaseTerm As Integer)
  Dim nRslt As Double
  
  ' Default to 0 to indicate invalid parameter(s)
  nRslt = 0
  
  ' Switch on Cancellation Percent then Lease Term
  Select Case nPercent
    ' No Cancellation Term
    Case 0
      Select Case nLeaseTerm
        ' 12 Month Lease
        Case 12
          nRslt = grf_NADAllEquipmentNoCancel_12
        
        ' 24 Month Lease
        Case 24
          nRslt = grf_NADAllEquipmentNoCancel_24
        
        ' 36 Month Lease
        Case 36
          nRslt = grf_NADAllEquipmentNoCancel_36
        
        ' 48 Month Lease
        Case 48
          nRslt = grf_NADAllEquipmentNoCancel_48
        
        ' 60 Month Lease
        Case 60
          nRslt = grf_NADAllEquipmentNoCancel_60
      
      End Select
        
    ' 5-Percent Cancellation Term
    Case 5
      Select Case nLeaseTerm
        ' 12 Month Lease
        Case 12
          nRslt = grf_NADAllEquipment05Cancel_12
        
        ' 24 Month Lease
        Case 24
          nRslt = grf_NADAllEquipment05Cancel_24
        
        ' 36 Month Lease
        Case 36
          nRslt = grf_NADAllEquipment05Cancel_36
        
        ' 48 Month Lease
        Case 48
          nRslt = grf_NADAllEquipment05Cancel_48
        
        ' 60 Month Lease
        Case 60
          nRslt = grf_NADAllEquipment05Cancel_60
        
      End Select
    
    ' 10-Percent Cancellation Term
    Case 10
      Select Case nLeaseTerm
        ' 12 Month Lease
        Case 12
          nRslt = grf_NADAllEquipment10Cancel_12
        
        ' 24 Month Lease
        Case 24
          nRslt = grf_NADAllEquipment10Cancel_24
        
        ' 36 Month Lease
        Case 36
          nRslt = grf_NADAllEquipment10Cancel_36
        
        ' 48 Month Lease
        Case 48
          nRslt = grf_NADAllEquipment10Cancel_48
        
        ' 60 Month Lease
        Case 60
          nRslt = grf_NADAllEquipment10Cancel_60
        
      End Select
    
    ' 20-Percent Cancellation Term
    Case 20
      Select Case nLeaseTerm
        ' 12 Month Lease
        Case 12
          nRslt = grf_NADAllEquipment20Cancel_12
        
        ' 24 Month Lease
        Case 24
          nRslt = grf_NADAllEquipment20Cancel_24
        
        ' 36 Month Lease
        Case 36
          nRslt = grf_NADAllEquipment20Cancel_36
        
        ' 48 Month Lease
        Case 48
          nRslt = grf_NADAllEquipment20Cancel_48
        
        ' 60 Month Lease
        Case 60
          nRslt = grf_NADAllEquipment20Cancel_60
        
      End Select
  
  End Select
  
  ' Return desired Rate Factor (or 0 for invalid term selection(s))
  gfnc_NADAllEquipment = nRslt
  
End Function

'^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
' Add additional functions here
'------------------------------


Attribute VB_Name = "RemoveModules"
'Macro removes all Form and standard modules from Excel macro-enabled workbook
'except for CSMP string in module name
'(It also preserves itself: RemoveModules)
'VBA must be unlocked with password
Public Sub RemoveModulesMacro()
    Dim strAvoidances(10) As String
    Dim nTemp As Integer
    
    If Utils.Authentication = False Then Exit Sub

    strAvoidances(1) = "CSMP"
    strAvoidances(2) = "RemoveModules"
    strAvoidances(3) = "UserFormChannelSelection"
    
    nTemp = RemoveModules(strAvoidances)
        
    MsgBox "All[" & CStr(nTemp) & "] non-CSMP modules removed successfully!!!"
    
End Sub

Public Function RemoveModulesByName(strModuleNames() As String)
    Dim sourceWorkbook As Workbook
    Dim objVbComponent As Object
    Dim i As Integer
    Dim nModulesCount As Integer
    Dim nTemp As Integer
    
    Set sourceWorkbook = ActiveWorkbook
           
    nTemp = 0
    
    i = 1
    nModulesCount = sourceWorkbook.VBProject.VBComponents.count
    While i <= nModulesCount
    
        Set objVbComponent = sourceWorkbook.VBProject.VBComponents.Item(i)
    
        i = i + 1
        
        Dim bFoundFlag As Boolean
        
        bFoundFlag = False
        
        For k = 1 To UBound(strModuleNames)
            If strModuleNames(k) <> "" And UCase(objVbComponent.Name) = UCase(strModuleNames(k)) Then
                bFoundFlag = True
                Exit For
            End If
        Next
        
        If bFoundFlag Then
            If objVbComponent.Type = 1 Or objVbComponent.Type = 3 Then ' Form or Standard module Type.
                sourceWorkbook.VBProject.VBComponents.Remove objVbComponent

                nTemp = nTemp + 1

                i = 1
                nModulesCount = sourceWorkbook.VBProject.VBComponents.count
            End If
        End If
        
    Wend
    
    RemoveModulesByName = nTemp
End Function

Public Function RemoveModules(strAvoidances() As String)
    Dim sourceWorkbook As Workbook
    Dim objVbComponent As Object
    Dim i As Integer
    Dim k As Integer
    Dim nModulesCount As Integer
    Dim nTemp As Integer
    Dim arrayOfModulesToDelete() As String
    
    Set sourceWorkbook = ActiveWorkbook
    
    ReDim Preserve arrayOfModulesToDelete(1)
    
    For i = 1 To sourceWorkbook.VBProject.VBComponents.count
    
        Set objVbComponent = sourceWorkbook.VBProject.VBComponents.Item(i)
        
        If objVbComponent.Type = 1 Or objVbComponent.Type = 3 Then ' Form or Standard module Type.
        
            Dim bFoundFlag As Boolean
            
            bFoundFlag = False
            
            k = 0
            Do While k <= UBound(strAvoidances)
                If strAvoidances(k) <> "" And InStr(1, UCase(objVbComponent.Name), UCase(strAvoidances(k)), vbTextCompare) > 0 Then
                    bFoundFlag = True
                    Exit Do
                End If
                
                k = k + 1
            Loop
            
            ' Prevent the removal of the GlobalRateFactors module
            If InStr(1, UCase(objVbComponent.Name), UCase("GlobalRateFactors"), vbTextCompare) > 0 Then bFoundFlag = True
            If InStr(1, UCase(objVbComponent.Name), UCase("modDebug"), vbTextCompare) > 0 Then bFoundFlag = True
        
            If Not bFoundFlag Then
                ReDim Preserve arrayOfModulesToDelete(UBound(arrayOfModulesToDelete) + 1)
                
                arrayOfModulesToDelete(UBound(arrayOfModulesToDelete) - 1) = objVbComponent.Name
            End If
        
        End If
    Next
    
    On Error Resume Next
    
    For i = LBound(arrayOfModulesToDelete) To UBound(arrayOfModulesToDelete)
    
        If arrayOfModulesToDelete(i) <> "" Then
            Call sourceWorkbook.VBProject.VBComponents.Remove(sourceWorkbook.VBProject.VBComponents(arrayOfModulesToDelete(i)))
        End If
        
    Next
    
    RemoveModules = UBound(arrayOfModulesToDelete)
End Function


Public Function ExportModule(sourceWorkbook As Workbook, strModuleName As String, strRootPath As String)
    Dim objVbComponent As Object
    
    ExportModule = False
    
    Set objVbComponent = sourceWorkbook.VBProject.VBComponents.Item(strModuleName)
    
    If objVbComponent Is Nothing Then Exit Function
    
    If objVbComponent.Type = 1 Then
        objVbComponent.Export strRootPath & objVbComponent.Name & ".bas"
    ElseIf objVbComponent.Type = 3 Then
        objVbComponent.Export strRootPath & objVbComponent.Name & ".frm"
    End If
            
    ExportModule = True
End Function


Public Function ImportModule(targetWorkbook As Workbook, strModulePath As String)
    Dim objVbComponent As Object
    
    ImportModule = False
    
        UpdateVBAReferences targetWorkbook
        
    'import module
    targetWorkbook.VBProject.VBComponents.Import strModulePath
            
    'delete module
    Kill strModulePath
    
    ImportModule = True
    
End Function

Public Sub UpdateVBAReferences(targetWorkbook As Workbook)
    On Error Resume Next
    
    If Not IsReferenceExists(targetWorkbook, "{2A75196C-D9EB-4129-B803-931327F72D5C}") Then
    
        'ADO 2.8
        '"{54AF9350-1923-11D3-9CA4-00C04F72C514}"
        targetWorkbook.VBProject.References.AddFromGuid "{2A75196C-D9EB-4129-B803-931327F72D5C}", 2, 8
    End If
    
    If Not IsReferenceExists(targetWorkbook, "{3F4DACA7-160D-11D2-A8E9-00104B365C9F}") Then
        'VBScript Reg. Expr. 5.5
        targetWorkbook.VBProject.References.AddFromGuid "{3F4DACA7-160D-11D2-A8E9-00104B365C9F}", 5, 5
    End If
End Sub

Private Function IsReferenceExists(targetWorkbook As Workbook, strGuid As String)
    IsReferenceExists = False
    
    Dim i As Integer
    
    On Error Resume Next
    
    For i = 1 To targetWorkbook.VBProject.References.count
        If targetWorkbook.VBProject.References.Item(i).GUID = strGuid Then
            IsReferenceExists = True
            
            Exit Function
        End If
    Next
    
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Label5, 21, 0, MSForms, Label"
Attribute VB_Control = "CheckBox1, 19, 1, MSForms, CheckBox"
Attribute VB_Control = "Label4, 18, 2, MSForms, Label"
Attribute VB_Control = "Label3, 17, 3, MSForms, Label"
Attribute VB_Control = "obContinue1, 16, 4, MSForms, OptionButton"
Attribute VB_Control = "obUpFront1, 15, 5, MSForms, OptionButton"
Attribute VB_Control = "chkAgreement, 14, 6, MSForms, CheckBox"
Attribute VB_Control = "Label2, 13, 7, MSForms, Label"
Attribute VB_Control = "obContinue, 12, 8, MSForms, OptionButton"
Attribute VB_Control = "obUpFront, 11, 9, MSForms, OptionButton"
Attribute VB_Control = "obSS, 10, 10, MSForms, OptionButton"
Attribute VB_Control = "Label1, 8, 11, MSForms, Label"
Attribute VB_Control = "obSL, 7, 12, MSForms, OptionButton"
Attribute VB_Control = "obSF, 6, 13, MSForms, OptionButton"
Attribute VB_Control = "obSP, 5, 14, MSForms, OptionButton"
Attribute VB_Control = "obS3, 4, 15, MSForms, OptionButton"
Attribute VB_Control = "obS1, 3, 16, MSForms, OptionButton"
Attribute VB_Control = "obS2, 2, 17, MSForms, OptionButton"
Attribute VB_Control = "obS0, 1, 18, MSForms, OptionButton"
Private arrOfCellAddresses(6) As String

Private arrOfCellAddressesForNumbers(9) As String

Private bIsProcessed As Boolean

Private Sub Check1DateCell(ByVal Target As Range, strCellAddress As String)
    'If Not Application.Intersect(Target, Range(strCellAddress)) Is Nothing Then
    If InStr(1, Target.Address, Range(strCellAddress).Address) > 0 And Mid(Target.Address, Len(Range(strCellAddress).Address) + 1, 1) = ":" Then
    
        Dim frm1 As frmCalendar
        
        Set frm1 = New frmCalendar
        
        ' Initialize Calendar with Date value (if available) or Date.Today
        If (IsDate(Range(strCellAddress).Value)) Then
          frm1.dtInitialDate = CDate(Range(strCellAddress).Value) ' Preload with current date value
        Else
          frm1.dtInitialDate = Date ' Empty - init with current date
        End If
          
        ' Open Calendar form
        frm1.Show
        If (frm1.bIsCancelled = False) Then
          ' Retrieve selected date
          Range(strCellAddress).Value = frm1.dtInitialDate
        End If
        
        Unload frm1
        
        Set frm1 = Nothing
        
        bIsProcessed = True
        
    End If
End Sub

Private Sub Check1NumberCell(ByVal Target As Range, strCellAddress As String)
    Dim strTempStr1 As String
    Dim nTempNumber1 As Double
            
    If Range(strCellAddress).Value <> "" Then
        strTempStr1 = Replace(Replace(Range(strCellAddress).Value, "$", ""), ",", "")
        
        If IsNumeric(strTempStr1) = False Then
            MsgBox "The value [" & strTempStr1 & "] must be numeric at cell's address [" & strCellAddress & "]."
            
            Range(strCellAddress).Select
        End If
    End If
End Sub

Public Sub CSMPDetails_Init()

    If arrOfCellAddresses(0) <> "" And arrOfCellAddressesForNumbers(0) <> "" Then
        Exit Sub
    End If
    
    'these are Canon HQ dates
    'arrOfCellAddresses(0) = "B4"
    'arrOfCellAddresses(1) = "B6"
    'arrOfCellAddresses(2) = "F6"
    'arrOfCellAddresses(3) = "F8"
    'arrOfCellAddresses(4) = "F10"
    'arrOfCellAddresses(5) = "B29"
    
    arrOfCellAddresses(0) = "B39"
    arrOfCellAddresses(1) = "F39"
    arrOfCellAddresses(2) = "B41"
    arrOfCellAddresses(3) = "B43"
    arrOfCellAddresses(4) = "F41"
    arrOfCellAddresses(5) = "B29"
    
    arrOfCellAddressesForNumbers(0) = "B33"
    arrOfCellAddressesForNumbers(1) = "B35"
    arrOfCellAddressesForNumbers(2) = "B37"
    'arrOfCellAddressesForNumbers(3) = "B45"
    'arrOfCellAddressesForNumbers(3) = "B47"
    arrOfCellAddressesForNumbers(3) = "F33"
    arrOfCellAddressesForNumbers(4) = "F35"
    arrOfCellAddressesForNumbers(5) = "F37"
    'arrOfCellAddressesForNumbers(7) = "F41"
    arrOfCellAddressesForNumbers(6) = "F47"
    arrOfCellAddressesForNumbers(7) = "F49"
    arrOfCellAddressesForNumbers(8) = "F51"
    
End Sub

Public Function ValidateNumbers(nUnusedparam As Integer)
    Dim wsThis As Worksheet
    Dim i As Integer
    
    Set wsThis = ThisWorkbook.Sheets("CSMP Detail Form")
    
    For i = LBound(arrOfCellAddressesForNumbers) To UBound(arrOfCellAddressesForNumbers) - 1
        If wsThis.Range(arrOfCellAddressesForNumbers(i)).Value <> "" And IsNumeric(wsThis.Range(arrOfCellAddressesForNumbers(i)).Value) = False Then
            MsgBox "The value [" & wsThis.Range(arrOfCellAddressesForNumbers(i)).Value & "] must be numeric at cell's address [" & arrOfCellAddressesForNumbers(i) & "]."
            
            wsThis.Range(arrOfCellAddressesForNumbers(i)).Select
            
            ValidateNumbers = False
            
            Exit Function
        End If
    Next i
    
    ValidateNumbers = True
    
End Function

Private Sub Worksheet_Change(ByVal Target As Range)
  Application.EnableEvents = False
    
  Dim i As Integer
  Dim strTargetAddress As String
  
  strTargetAddress = Replace(Target.Address, "$", "")
  
  bIsProcessed = False
  
  For i = LBound(arrOfCellAddressesForNumbers) To UBound(arrOfCellAddressesForNumbers)
    If bIsProcessed = True Then Exit For
    
    If arrOfCellAddressesForNumbers(i) <> "" And InStr(1, strTargetAddress, arrOfCellAddressesForNumbers(i)) > 0 Then
        Call Check1NumberCell(Target, arrOfCellAddressesForNumbers(i))
    End If
  Next i
  
  ' Re-enable events
  Application.EnableEvents = True
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

  If Utils.CSMPDetailForm_GreenButtonClicked = True Then
    Exit Sub
  End If
  
  ' Prevent further events
  Application.EnableEvents = False
    
  Dim i As Integer
  Dim strTargetAddress As String
  
  strTargetAddress = Replace(Target.Address, "$", "")
    
  'Utils.PrintDbgMsg "strTargetAddress = " & strTargetAddress
  
  bIsProcessed = False
  
  For i = LBound(arrOfCellAddresses) To UBound(arrOfCellAddresses)
    If bIsProcessed = True Then Exit For
  
    If arrOfCellAddresses(i) <> "" And InStr(1, strTargetAddress, arrOfCellAddresses(i)) > 0 Then
        Call Check1DateCell(Target, arrOfCellAddresses(i))
    End If
  Next i
      
  'For i = LBound(arrOfCellAddressesForNumbers) To UBound(arrOfCellAddressesForNumbers)
  '  If bIsProcessed = True Then Exit For
  '
  '  If arrOfCellAddressesForNumbers(i) <> "" And InStr(1, strTargetAddress, arrOfCellAddressesForNumbers(i)) > 0 Then
  '      Call Check1NumberCell(Target, arrOfCellAddressesForNumbers(i))
  '  End If
  'Next i
  
  ' Re-enable events
  Application.EnableEvents = True

End Sub

Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "StartOfferNew"
Private m_strCSMPExceptionsCallInside As String
Private m_strAMPCreditCallInside As String

Sub StartOfferNewWorkbook()


If Utils.Authentication() = False Then
    Exit Sub
End If

Dim digitaltotalsrow As Range
Dim softtotalsrow As Range
Dim faxtotalsrow As Range

Dim digitallastrow As Long
Dim softlastrow As Long
Dim faxlastrow As Long

'Unhide worksheets
If Sheets("Digital and Color").Visible = False Then
Sheets("Digital and Color").Visible = True
End If

If Sheets("Software").Visible = False Then
Sheets("Software").Visible = True
End If

If Sheets("Fax, Printer, Scanner").Visible = False Then
Sheets("Fax, Printer, Scanner").Visible = True
End If


Application.DisplayAlerts = False

On Error Resume Next
Sheets("ItemsNotInWorkBook").Delete


Application.DisplayAlerts = True


'Unprotect worksheets
ActiveWorkbook.unprotect team
Sheets("Digital and Color").unprotect "team"
Sheets("Software").unprotect "team"
Sheets("Fax, Printer, Scanner").unprotect "team"

'Unfilter sheets
Sheets("Digital and Color").Range("$D$3:$D$5000").AutoFilter Field:=1, Criteria1:="<>"
Sheets("Software").Range("$D$3:$D$5000").AutoFilter Field:=1, Criteria1:="<>"
Sheets("Fax, Printer, Scanner").Range("$D$3:$D$5000").AutoFilter Field:=1, Criteria1:="<>"

Set digitaltotalsrow = Sheets("Digital and Color").Range("A:A").Find(what:="TOTALS")
Set softtotalsrow = Sheets("Software").Range("A:A").Find(what:="TOTALS")
Set faxtotalsrow = Sheets("Fax, Printer, Scanner").Range("A:A").Find(what:="TOTALS")

digitallastrow = digitaltotalsrow.Offset(-1, 0).Row
softlastrow = softtotalsrow.Offset(-1, 0).Row
faxlastrow = faxtotalsrow.Offset(-1, 0).Row

'Copy landed cost
Call Utils.CopyCSMPLandedCost
bProtectedFlag = False

Application.ScreenUpdating = False
    
'Unprotect worksheets
ActiveWorkbook.unprotect team
Sheets("Digital and Color").unprotect "team"
Sheets("Software").unprotect "team"
Sheets("Fax, Printer, Scanner").unprotect "team"
    
 ' Unmerge Company Name cells
    Sheets("Digital and Color").Select
    Range("B1:C1").UnMerge
    Range("B1").Copy
    Range("C1").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Range("B1").ClearContents
    Range("C1").Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = True
        .MergeCells = False
    End With
    
    Sheets("Software").Select
    Range("B1:C1").UnMerge
    Range("B1").Copy
    Range("C1").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Range("B1").ClearContents
    Range("C1").Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = True
        .MergeCells = False
    End With
    
    Sheets("Fax, Printer, Scanner").Select
    Range("B1:C1").UnMerge
    Range("B1").Copy
    Range("C1").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Range("B1").ClearContents
    Range("C1").Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = True
        .MergeCells = False
    End With
 
'Delete credits from blank quantities
    
Sheets("Digital and Color").Select
    ActiveSheet.Range("$D$3:$D$" & digitallastrow).AutoFilter Field:=1, Criteria1:="="
    Range("G3:G" & digitallastrow).Select
    Selection.ClearContents
Sheets("Software").Select
    ActiveSheet.Range("$D$3:$D$" & softlastrow).AutoFilter Field:=1, Criteria1:="="
    Range("G3:G" & softlastrow).Select
    Selection.ClearContents
Sheets("Fax, Printer, Scanner").Select
    ActiveSheet.Range("$D$3:$D$" & faxlastrow).AutoFilter Field:=1, Criteria1:="="
    Range("G3:G" & faxlastrow).Select
    Selection.ClearContents
    
'Filter Sheets
 
    ActiveSheet.Range("$D$3:$D$" & digitallastrow).AutoFilter Field:=1, Criteria1:="<>"
    Range("A1").Select
    Sheets("Software").Select
    ActiveSheet.Range("$D$3:$D$" & softlastrow).AutoFilter Field:=1, Criteria1:="<>"
    Sheets("Fax, Printer, Scanner").Select
    ActiveSheet.Range("$D$3:$D$" & faxlastrow).AutoFilter Field:=1, Criteria1:="<>"
    Range("A1").Select
    
'Delete discount ratio from unused sheets

    Dim blanks1 As Boolean
    Dim blanks2 As Boolean
    
    For Each Cell In Sheets("Software").Range("D6:D" & softlastrow)
    If Not Cell.Value = "" Then
    blanks1 = False
    Exit For
    Else
    blanks1 = True
    End If
    Next
    
    For Each Cell In Sheets("Fax, Printer, Scanner").Range("D6:D" & faxlastrow)
    If Not Cell.Value = "" Then
    blanks2 = False
    Exit For
    Else
    blanks2 = True
    End If
    Next
    
    If blanks1 = True Then Sheets("Software").Range("H3").ClearContents
    If blanks2 = True Then Sheets("Fax, Printer, Scanner").Range("H3").ClearContents
    
'Fill in Detail Form

Sheet4.Range("B4").Value = Date
        
If InStr(1, Sheets("CSMP Detail Form").Range("F15").Value, "CSA") Then
    Sheets("CSMP Detail Form").Range("F29").Value = "Northeast"
    End If
    
Sheets("CSMP Detail Form").Range("F6:I6").ClearContents

For Each Cell In Sheets("CSMP Detail Form").Range("B15:F51")
If InStr(1, Cell.Value, "xx") Then
    Cell.Value = ""
    End If
If InStr(1, Cell.Value, "TBA") Then
    Cell.Value = ""
    End If
    Next Cell
    

'Set expiration date for 90 days after today. If dealer is CSA-PPS, should be 180 days.
If InStr(1, Sheet4.Range("F15").Value, "PPS") = False Then
Sheet4.Range("B6").Value = Date + 90
End If
If InStr(1, Sheet4.Range("F15").Value, "PPS") Then
Sheet4.Range("B6").Value = Date + 180
End If
 
         
'Input commitment based on S level
    If Sheet4.obS0.Value = True Then Sheet4.Range("B8").Value = "$250,000"
    If Sheet4.obS1.Value = True Then Sheet4.Range("B8").Value = "$500,000"
    If Sheet4.obS2.Value = True Then Sheet4.Range("B8").Value = "$1,000,000"
    If Sheet4.obS3.Value = True Then Sheet4.Range("B8").Value = "$3,000,000"
    If Sheet4.obSF.Value = True Then Sheet4.Range("B8").Value = "$25,000"
    If Sheet4.obSL.Value = True Then Sheet4.Range("B8").Value = "$50,000"
    If Sheet4.obSP.Value = True Then Sheet4.Range("B8").Value = "$25,000"
    If Sheet4.obSS.Value = True Then Sheet4.Range("B8").Value = "$10,000"
    
    'Add History tab
    Dim AnalystName As Variant
    Dim UserType As Variant
    
    AnalystName = InputBox("Please enter analyst name")
    UserType = InputBox("Please enter end user type as C (commercial) or G (government)")
    
    Sheets.Add(after:=Sheets(Sheets.count)).Name = "History "
    Range("A2").FormulaR1C1 = "Contract History"
    Range("A4").FormulaR1C1 = "Date"
    Range("B4").FormulaR1C1 = "Name"
    Range("C4").FormulaR1C1 = "Action"
    Range("D4").FormulaR1C1 = "End User Type"
    Range("D5").Value = UserType
    Range("A2").Font.Bold = True
    Range("A4:D4").Font.Bold = True
    Range("A5").FormulaR1C1 = "=TODAY()"
    Range("A5").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Range("B5").Select
    Application.CutCopyMode = False
    ActiveCell.FormulaR1C1 = AnalystName
    Range("C5").FormulaR1C1 = "Created offer"
    Range("C6").Select
    Columns("A:A").ColumnWidth = 9.5
    Columns("C:C").EntireColumn.AutoFit
    Columns("D:D").ColumnWidth = 13.5
    Range("A1").Select

'Delete unnecessary worksheets
Application.DisplayAlerts = False

On Error Resume Next
Sheets("Instructions").Delete
Sheets("ItemsNotInWorkBook").Delete
Sheets("Notes").Delete
Sheet25.Visible = xlSheetVisible
Sheet25.Delete
Sheet27.Visible = xlSheetVisible
Sheet27.Delete

Application.DisplayAlerts = True

'Color Cells
    'For Digital and Color Tab
If Sheet4.obUpFront.Value = True Then Worksheets("Digital and Color").Range("C1").Interior.ThemeColor = xlThemeColorAccent4
If Sheet4.obUpFront.Value = True Then Worksheets("Digital and Color").Range("C1").Interior.TintAndShade = 0.599993896298105
If Sheet4.obContinue.Value = True Then Worksheets("Digital and Color").Range("C1").Interior.ThemeColor = xlThemeColorAccent3
If Sheet4.obContinue.Value = True Then Worksheets("Digital and Color").Range("C1").Interior.TintAndShade = 0.599993896298105

'For Fax, Printer, Scanner Tab
If Sheet4.obUpFront1.Value = True Then Worksheets("Fax, Printer, Scanner").Range("C1").Interior.ThemeColor = xlThemeColorAccent4
If Sheet4.obUpFront1.Value = True Then Worksheets("Fax, Printer, Scanner").Range("C1").Interior.TintAndShade = 0.599993896298105
If Sheet4.obContinue1.Value = True Then Worksheets("Fax, Printer, Scanner").Range("C1").Interior.ThemeColor = xlThemeColorAccent3
If Sheet4.obContinue1.Value = True Then Worksheets("Fax, Printer, Scanner").Range("C1").Interior.TintAndShade = 0.599993896298105
 
'Fill in AMP credits
 
 m_strAMPCreditCallInside = "m_strAMPCreditCallInside"
 
 Call AMPFill
    
 m_strAMPCreditCallInside = ""
 
'Format Cells
 
  Sheets("Digital and Color").Select
    Rows("1:1").RowHeight = 18.5
    Rows("2:2").RowHeight = 51
    Rows("3:3").RowHeight = 12
    Columns("B:B").EntireColumn.Hidden = True
    Columns("D:V").ColumnWidth = 12
    Columns("R:S").EntireColumn.Hidden = True
    Columns("W:W").EntireColumn.Hidden = True
    Columns("Q:Q").EntireColumn.Hidden = True
    Columns("C:C").ColumnWidth = 65
    ActiveWindow.Zoom = 80
    Range("T3:T" & digitallastrow).Select
    With Selection
        .HorizontalAlignment = xlRight
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    Range("A1").Select
    
  Sheets("Software").Select
    Rows("1:1").RowHeight = 18.5
    Rows("2:2").RowHeight = 51
    Rows("3:3").RowHeight = 12
    Columns("B:B").EntireColumn.Hidden = True
    Columns("D:U").ColumnWidth = 12
    Columns("R:R").EntireColumn.Hidden = True
    Columns("V:V").EntireColumn.Hidden = True
    Columns("C:C").ColumnWidth = 65
    ActiveWindow.Zoom = 80
    Range("S3:U" & softlastrow).Select
    With Selection
        .HorizontalAlignment = xlRight
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    Range("A1").Select
    ActiveWindow.ScrollRow = 1
    
Sheets("Fax, Printer, Scanner").Select
    Rows("1:1").RowHeight = 18.5
    Rows("2:2").RowHeight = 51
    Rows("3:3").RowHeight = 12
    Columns("B:B").EntireColumn.Hidden = True
    Columns("D:V").ColumnWidth = 12
    Columns("C:C").ColumnWidth = 65
    Columns("R:S").EntireColumn.Hidden = True
    Columns("W:W").EntireColumn.Hidden = True
    Columns("Q:Q").EntireColumn.Hidden = True
    ActiveWindow.Zoom = 80
    Range("A1").Select
    ActiveWindow.ScrollRow = 1
    
Sheets("Digital and Color").Range("C1").Value = Sheets("CSMP Detail Form").Range("B15").Value
Sheets("Software").Range("C1").Value = Sheets("CSMP Detail Form").Range("B15").Value
Sheets("Fax, Printer, Scanner").Range("C1").Value = Sheets("CSMP Detail Form").Range("B15").Value
    
    Range("A1").Select
    ActiveWindow.ScrollRow = 1
    
    Sheets("Digital and Color").Select
    Sheets("Digital and Color").Range("$D$3:$D$" & digitallastrow).AutoFilter Field:=1, Criteria1:="<>"
    
'Run PTP and Totals Macros

Application.DisplayAlerts = False

   Call CSMPCalculations.CWOProcessing
    
Application.DisplayAlerts = False
   Call CSMPTotals.CSMPTotals
Application.DisplayAlerts = True
      
Sheets("Digital and Color").unprotect "team"
Sheets("Software").unprotect "team"
Sheets("Fax, Printer, Scanner").unprotect "team"
      
   Call CSMPCalculations.CSMPCalculations

Application.DisplayAlerts = True
    
Sheets("Digital and Color").unprotect "team"
Sheets("Software").unprotect "team"
Sheets("Fax, Printer, Scanner").unprotect "team"

    Sheets("Profit Summary").Range("E7") = "Request"
    Sheets("Profit Summary").Select
    ActiveWindow.View = xlNormalView
     
Sheets("Software").Columns("W:AH").EntireColumn.Hidden = False
   
'Hide new PTP columns
Sheets("Software").Select
Columns("Q:Q").EntireColumn.Hidden = True
Columns("V:V").EntireColumn.Hidden = True
Columns("X:X").EntireColumn.Hidden = True

Sheets("Fax, Printer, Scanner").Select
Columns("W:W").ColumnWidth = 10
Columns("W:W").EntireColumn.Hidden = True
Columns("Y:Y").EntireColumn.Hidden = True

Sheets("Digital and Color").Select
Columns("W:W").ColumnWidth = 10
Columns("W:W").EntireColumn.Hidden = True
Columns("Y:Y").EntireColumn.Hidden = True

Range("A1").Select
        
Application.Wait Now + #12:00:03 AM#
        
'Check if S level matches commitment
If Sheet4.obS0.Value = True And Sheets("Profit Summary").Range("E9").Value < 250000 Then MsgBox ("Please note: Revenue potential is less than S0 level commitment")
If Sheet4.obS0.Value = True And Sheets("Profit Summary").Range("E9").Value > 500000 Then MsgBox ("Please note: Revenue potential is greater than S0 level commitment")

If Sheet4.obS1.Value = True And Sheets("Profit Summary").Range("E9").Value < 500000 Then MsgBox ("Please note: Revenue potential is less than S1 level commitment")
If Sheet4.obS1.Value = True And Sheets("Profit Summary").Range("E9").Value > 1000000 Then MsgBox ("Please note: Revenue potential is greater than S1 level commitment")

If Sheet4.obS2.Value = True And Sheets("Profit Summary").Range("E9").Value < 1000000 Then MsgBox ("Please note: Revenue potential is less than S2 level commitment")
If Sheet4.obS2.Value = True And Sheets("Profit Summary").Range("E9").Value > 3000000 Then MsgBox ("Please note: Revenue potential is greater than S2 level commitment")

If Sheet4.obS3.Value = True And Sheets("Profit Summary").Range("E9").Value < 3000000 Then MsgBox ("Please note: Revenue potential is less than S3 level commitment")
        
'Format Totals Row

'Digital and Color Tab

digitaltotalsrow.Offset(0, 6).ClearContents
digitaltotalsrow.Offset(0, 7).ClearContents

 With digitaltotalsrow.Offset(0, 7).Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .color = 8257536
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    
With digitaltotalsrow.Offset(0, 7).Font
        .Name = "Arial"
        .Bold = True
        .Size = 10
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
 
 With digitaltotalsrow.Offset(0, 7)
        .Style = "Percent"
        .NumberFormat = "0.0%"
        .FormatConditions.Delete
    End With
    
'Software Tab

softtotalsrow.Offset(0, 6).ClearContents
softtotalsrow.Offset(0, 7).ClearContents
    
    With softtotalsrow.Offset(0, 7).Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .color = 8257536
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    
With softtotalsrow.Offset(0, 7).Font
        .Name = "Arial"
        .Bold = True
        .Size = 10
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
 
 With softtotalsrow.Offset(0, 7)
        .Style = "Percent"
        .NumberFormat = "0.0%"
        .FormatConditions.Delete
    End With

'Fax, Printer, Scanner Tab

faxtotalsrow.Offset(0, 6).ClearContents
faxtotalsrow.Offset(0, 7).ClearContents

 With faxtotalsrow.Offset(0, 7).Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .color = 8257536
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    
With faxtotalsrow.Offset(0, 7).Font
        .Name = "Arial"
        .Bold = True
        .Size = 10
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
 
 With faxtotalsrow.Offset(0, 7)
        .Style = "Percent"
        .NumberFormat = "0.0%"
        .FormatConditions.Delete
    End With
        
'Save file

Dim Slev As String

    If Sheet4.obS0.Value = True Then Slev = "S0"
    If Sheet4.obS1.Value = True Then Slev = "S1"
    If Sheet4.obS2.Value = True Then Slev = "S2"
    If Sheet4.obS3.Value = True Then Slev = "S3"
    If Sheet4.obSP.Value = True Then Slev = "SA4"
    If Sheet4.obSS.Value = True Then Slev = "SS"

Dim DealerName As String
If InStr(1, Sheet4.Range("F15").Value, "PPS") Then
DealerName = "CSA-PPS"
Else
If InStr(1, Sheet4.Range("F15").Value, "CSA") Then
DealerName = "CSA"
Else
DealerName = Sheet4.Range("F15").Value
End If
End If

Dim Program As String
If Sheet4.DropDowns("Drop Down 14").Value = 2 Then Program = "CSAP" Else Program = "CSMP"

Dim Filename As String
Filename = Sheet4.Range("B15").Value & " " & Program & " " & Year(Date) & " Cat " & Slev & " " & DealerName & " Request"
        
Dim bFileSaveAs As Boolean
bFileSaveAs = Application.Dialogs(xlDialogSaveAs).Show(Filename)
If Not bFileSaveAs Then Exit Sub

m_strCSMPExceptionsCallInside = "m_strCSMPExceptionsCallInside"

Call CSMPExceptions
        
m_strCSMPExceptionsCallInside = ""
          
End Sub

Sub CSMPExceptions()

If m_strCSMPExceptionsCallInside = "m_strCSMPExceptionsCallInside" Then
    'do nothing
Else
    If Utils.Authentication() = False Then
        Exit Sub
    End If
End If

Dim digitallastrow As Long
Dim softlastrow As Long
Dim faxlastrow As Long

digitallastrow = Utils.FindTotalsRowIndex("Digital and Color") - 1
softlastrow = Utils.FindTotalsRowIndex("Software") - 1
faxlastrow = Utils.FindTotalsRowIndex("Fax, Printer, Scanner") - 1

'Set CSMP exceptions to 0
   
    'Digital and Color

    For Each Cell In Sheets("Digital and Color").Range("C6:C" & digitallastrow)
    If InStr(1, Cell.Value, "PaperCut") Then
    Cell.Offset(0, 4).Value = "0"
    Cell.Offset(0, 5).Value = "0"
    End If
    Next Cell
    
    For Each Cell In Sheets("Digital and Color").Range("C6:C" & digitallastrow)
    If InStr(1, Cell.Value, "Customization Services") Then
    Cell.Offset(0, 4).Value = "0"
    Cell.Offset(0, 5).Value = "0"
    End If
    Next Cell
    
    For Each Cell In Sheets("Digital and Color").Range("C6:C" & digitallastrow)
    If InStr(1, Cell.Value, "Remote Installation") Then
    Cell.Offset(0, 4).Value = "0"
    Cell.Offset(0, 5).Value = "0"
    End If
    Next Cell
    
    For Each Cell In Sheets("Digital and Color").Range("C6:C" & digitallastrow)
    If InStr(1, Cell.Value, "Onsite Installation") Then
    Cell.Offset(0, 4).Value = "0"
    Cell.Offset(0, 5).Value = "0"
    End If
    Next Cell
    
    For Each Cell In Sheets("Digital and Color").Range("C6:C" & digitallastrow)
    If InStr(1, Cell.Value, "PS Unit-One Hour") And Cell.Offset(0, -2).Value <> "" Then
    Cell.Offset(0, 4).Value = "0"
    Cell.Offset(0, 5).Value = "0"
    End If
    Next Cell
    
     For Each Cell In Sheets("Digital and Color").Range("C6:C" & digitallastrow)
    If InStr(1, Cell.Value, "Training Material") And Cell.Offset(0, -2).Value <> "" Then
    Cell.Offset(0, 4).Value = "0"
    Cell.Offset(0, 5).Value = "0"
    End If
    Next Cell
    
    For Each Cell In Sheets("Digital and Color").Range("C6:C" & digitallastrow)
    If InStr(1, Cell.Value, "ShareScan Services") And Cell.Offset(0, -2).Value <> "" Then
    Cell.Offset(0, 4).Value = "0"
    Cell.Offset(0, 5).Value = "0"
    End If
    Next Cell
    
    For Each Cell In Sheets("Digital and Color").Range("C6:C" & digitallastrow)
    If InStr(1, Cell.Value, "Premier Rate") And Cell.Offset(0, -2).Value <> "" Then
    Cell.Offset(0, 4).Value = "0"
    Cell.Offset(0, 5).Value = "0"
    End If
    Next Cell
    
    For Each Cell In Sheets("Digital and Color").Range("C6:C" & digitallastrow)
    If InStr(1, Cell.Value, "Professional Service") And Cell.Offset(0, -2).Value <> "" Then
    Cell.Offset(0, 4).Value = "0"
    Cell.Offset(0, 5).Value = "0"
    End If
    Next Cell
    
    For Each Cell In Sheets("Digital and Color").Range("C6:C" & digitallastrow)
    If InStr(1, Cell.Value, "Buffer Pass Unit") Then
    Cell.Offset(0, 4).Value = "0"
    Cell.Offset(0, 5).Value = "0"
    End If
    Next Cell
        
    
    'Software

    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "Service") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell
        
    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "service") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell
    
    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "Uniflow Support") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell

    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "Training") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell

    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "Implementation") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell
     
    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "Travel Expenses") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell

    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "Legal Integration Unit") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell
    
    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "hour") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell
    
    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "Customization") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell
    
    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "uniFLOW Output Manager Project Access Pack") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell
    
    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "DSF to Fiery Integration Tier 1 support & renewal") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell
    
    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "Production Support") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell
    
    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "Remote Installation") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell
    
    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "Travel Cost Unit") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell
    
    For Each Cell In Sheets("Software").Range("C6:C" & softlastrow)
     If InStr(1, Cell.Value, "ECM Solution Support") And Cell.Offset(0, -2).Value <> "" Then
     Cell.Offset(0, 4).Value = "0"
     Cell.Offset(0, 5).Value = "0"
     End If
    Next Cell
        
End Sub

Sub AMPFill()

If m_strAMPCreditCallInside = "m_strAMPCreditCallInside" Then
    'do nothing
Else
    If Utils.Authentication() = False Then
        Exit Sub
    End If
End If

Dim digitallastrow As Long
Dim softlastrow As Long
Dim faxlastrow As Long

digitallastrow = Utils.FindTotalsRowIndex("Digital and Color") - 1
softlastrow = Utils.FindTotalsRowIndex("Software") - 1
faxlastrow = Utils.FindTotalsRowIndex("Fax, Printer, Scanner") - 1
                                                                      
For Each Cell In Sheets("Digital and Color").Range("C6:C" & digitallastrow)
    If InStr(1, Cell.Value, "AMP CSMP") And Sheet4.obSP.Value = True Then
     Cell.Offset(0, 4).FormulaR1C1 = "=VLOOKUP(RC[-6],'AMP Credits'!R7C5:R350C7,3,FALSE)"
End If
    If InStr(1, Cell.Value, "AMP CSMP") And Sheet4.obS0.Value = True Then
     Cell.Offset(0, 4).FormulaR1C1 = "=VLOOKUP(RC[-6],'AMP Credits'!R7C5:R350C7,3,FALSE)"
  End If
    If InStr(1, Cell.Value, "AMP CSMP") And Sheet4.obS1.Value = True Then
     Cell.Offset(0, 4).FormulaR1C1 = "=VLOOKUP(RC[-6],'AMP Credits'!R7C5:R350C8,4,FALSE)"
  End If
     If InStr(1, Cell.Value, "AMP CSMP") And Sheet4.obS2.Value = True Then
     Cell.Offset(0, 4).FormulaR1C1 = "=VLOOKUP(RC[-6],'AMP Credits'!R7C5:R350C9,5,FALSE)"
  End If
    If InStr(1, Cell.Value, "AMP CSMP") And Sheet4.obS3.Value = True Then
     Cell.Offset(0, 4).FormulaR1C1 = "=VLOOKUP(RC[-6],'AMP Credits'!R7C5:R350C10,6,FALSE)"
  End If
  Next Cell
  
'Removes errors from credits column
For Each Cell In Sheets("Digital and Color").Range("G6:G" & digitallastrow)
    If IsError(Cell.Value) = True Then
    Cell.Value = ""
    End If
    Next Cell
                                                                                                
For Each Cell In Sheets("Fax, Printer, Scanner").Range("C6:C" & faxlastrow)
    If InStr(1, Cell.Value, "AMP CSMP") And Sheet4.obSP.Value = True Then
     Cell.Offset(0, 4).FormulaR1C1 = "=VLOOKUP(RC[-6],'AMP Credits'!R7C5:R350C7,3,FALSE)"
End If
    If InStr(1, Cell.Value, "AMP CSMP") And Sheet4.obS0.Value = True Then
     Cell.Offset(0, 4).FormulaR1C1 = "=VLOOKUP(RC[-6],'AMP Credits'!R7C5:R350C7,3,FALSE)"
  End If
    If InStr(1, Cell.Value, "AMP CSMP") And Sheet4.obS1.Value = True Then
     Cell.Offset(0, 4).FormulaR1C1 = "=VLOOKUP(RC[-6],'AMP Credits'!R7C5:R350C8,4,FALSE)"
  End If
     If InStr(1, Cell.Value, "AMP CSMP") And Sheet4.obS2.Value = True Then
     Cell.Offset(0, 4).FormulaR1C1 = "=VLOOKUP(RC[-6],'AMP Credits'!R7C5:R350C9,5,FALSE)"
  End If
    If InStr(1, Cell.Value, "AMP CSMP") And Sheet4.obS3.Value = True Then
     Cell.Offset(0, 4).FormulaR1C1 = "=VLOOKUP(RC[-6],'AMP Credits'!R7C5:R350C10,6,FALSE)"
  End If
  Next Cell
  
 'Removes errors from credits column
For Each Cell In Sheets("Fax, Printer, Scanner").Range("G6:G" & faxlastrow)
    If IsError(Cell.Value) = True Then
    Cell.Value = ""
    End If
    Next Cell
    
  'Input commitment based on S level
     If Sheet4.obS0.Value = True Then Sheet4.Range("B8").Value = "$250,000"
    If Sheet4.obS1.Value = True Then Sheet4.Range("B8").Value = "$500,000"
    If Sheet4.obS2.Value = True Then Sheet4.Range("B8").Value = "$1,000,000"
    If Sheet4.obS3.Value = True Then Sheet4.Range("B8").Value = "$3,000,000"
    If Sheet4.obSF.Value = True Then Sheet4.Range("B8").Value = "$25,000"
    If Sheet4.obSL.Value = True Then Sheet4.Range("B8").Value = "$50,000"
    If Sheet4.obSP.Value = True Then Sheet4.Range("B8").Value = "$25,000"
    If Sheet4.obSS.Value = True Then Sheet4.Range("B8").Value = "$10,000"
    
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
Call Utils.AddAddIn2menuBar("Version", "Utils.GetVersion"): Call Utils.AddAddIn2menuBar("Copy Landed Cost", "Utils.CopyCSMPLandedCost"): Call Utils.AddAddIn2menuBar("Calculations", "CSMPCalculations.CSMPCalculations"): Call Utils.AddAddIn2menuBar("Unprotect Worksheets", "Utils.UnprotectDataWorksheets"): Call Utils.AddAddIn2menuBar("CSMP Common Accessories Check", "CSMPCommonAccessoryCheck.CSMPCommonAccessoryCheck"): Call Utils.AddAddIn2menuBar("PTP", "CSMPCalculations.CWOProcessing"): Call Utils.AddAddIn2menuBar("Start Offer New Workbook", "StartOfferNew.StartOfferNewWorkbook"): Call Utils.AddAddIn2menuBar("CSMP Exceptions", "StartOfferNew.CSMPExceptions"): Call Utils.AddAddIn2menuBar("AMP Fill", "StartOfferNew.AMPFill"): Call Utils.AddAddIn2menuBar("Turn To Offer New Workbook", "TurnToOfferNew.TurnToOfferNewWorkbook"): Call Utils.AddAddIn2menuBar("Fast Calc", "FastCalc.FastCalc"): Call Sheet4.CSMPDetails_Init
End Sub
Private Sub Workbook_BeforeClose(Cancel As Boolean)
Call Utils.RemoveAddInFromMenuBar("Version"): Call Utils.RemoveAddInFromMenuBar("Copy Landed Cost"): Call Utils.RemoveAddInFromMenuBar("Calculations"): Call Utils.RemoveAddInFromMenuBar("Unprotect Worksheets"): Call Utils.RemoveAddInFromMenuBar("CSMP Common Accessories Check"): Call Utils.RemoveAddInFromMenuBar("PTP"): Call Utils.RemoveAddInFromMenuBar("Start Offer New Workbook"): Call Utils.RemoveAddInFromMenuBar("CSMP Exceptions"): Call Utils.RemoveAddInFromMenuBar("AMP Fill"): Call Utils.RemoveAddInFromMenuBar("Turn To Offer New Workbook"): Call Utils.RemoveAddInFromMenuBar("Fast Calc"): Call Utils.CleanDataSheetsFromAutoShapes(Application.ThisWorkbook)
End Sub
Attribute VB_Name = "TurnToOfferNew"
Sub TurnToOfferNewWorkbook()

If Utils.Authentication() = False Then
    Exit Sub
End If

'turn to offer macro

Dim digitaltotalsrow As Range
Dim softtotalsrow As Range
Dim faxtotalsrow As Range

Dim digitallastrow As Long
Dim softlastrow As Long
Dim faxlastrow As Long

Dim strListOfWorksheets(3) As String
    
strListOfWorksheets(0) = "Digital and Color"
strListOfWorksheets(1) = "Software"
strListOfWorksheets(2) = "Fax, Printer, Scanner"

Set digitaltotalsrow = Sheets("Digital and Color").Range("A:A").Find(what:="TOTALS")
Set softtotalsrow = Sheets("Software").Range("A:A").Find(what:="TOTALS")
Set faxtotalsrow = Sheets("Fax, Printer, Scanner").Range("A:A").Find(what:="TOTALS")

digitallastrow = digitaltotalsrow.Offset(-1, 0).Row
softlastrow = softtotalsrow.Offset(-1, 0).Row
faxlastrow = faxtotalsrow.Offset(-1, 0).Row

Sheets("Digital and Color").unprotect "team"
Sheets("Software").unprotect "team"
Sheets("Fax, Printer, Scanner").unprotect "team"

Application.ScreenUpdating = False

 'Save file
 
ActiveWorkbook.Save

'save the offer file
 Dim bFileSaveAs As Boolean
    bFileSaveAs = Application.Dialogs(xlDialogSaveAs).Show
    If Not bFileSaveAs Then Exit Sub

'Remove formulas for PTP

    Sheets("Digital and Color").Select
    ActiveSheet.Range("$D$3:$D$" & digitallastrow).AutoFilter Field:=1
    Columns("M:M").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Application.CutCopyMode = False
    Sheets("Software").Select
    ActiveSheet.Range("$D$3:$D$" & softlastrow).AutoFilter Field:=1
    Columns("M:M").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Application.CutCopyMode = False
    Sheets("Fax, Printer, Scanner").Select
    ActiveSheet.Range("$D$3:$D$" & faxlastrow).AutoFilter Field:=1
    Columns("M:M").Select
    Selection.Copy
    ActiveSheet.Paste
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Application.CutCopyMode = False
    
'Remove CSMP cost columns
   Sheets("Digital and Color").Select
    Columns("T:Y").Delete Shift:=xlToLeft
    Columns("R").Delete Shift:=xlToLeft
    
   Sheets("Software").Select
    Columns("S:X").Delete Shift:=xlToLeft
    Columns("Q").Delete Shift:=xlToLeft
    
   Sheets("Fax, Printer, Scanner").Select
    Columns("T:Y").Delete Shift:=xlToLeft
    Columns("R").Delete Shift:=xlToLeft

'Remove credits from blank quantities

Sheets("Digital and Color").Select
    ActiveSheet.Range("$D$3:$D$" & digitallastrow).AutoFilter Field:=1, Criteria1:="="
    Range("G3:G" & digitallastrow).Select
    Selection.ClearContents
Sheets("Software").Select
    ActiveSheet.Range("$D$3:$D$" & softlastrow).AutoFilter Field:=1, Criteria1:="="
    Range("G3:G" & softlastrow).Select
    Selection.ClearContents
Sheets("Fax, Printer, Scanner").Select
    ActiveSheet.Range("$D$3:$D$" & faxlastrow).AutoFilter Field:=1, Criteria1:="="
    Range("G3:G" & faxlastrow).Select
    Selection.ClearContents

'Remove formulas from credits column
    
    Sheets("Digital and Color").Select
    ActiveSheet.Range("$D$3:$D$" & digitallastrow).AutoFilter Field:=1
    Columns("G:G").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Application.CutCopyMode = False
    Sheets("Software").Select
    ActiveSheet.Range("$D$3:$D$" & softlastrow).AutoFilter Field:=1
    Columns("G:G").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Application.CutCopyMode = False
    Sheets("Fax, Printer, Scanner").Select
    ActiveSheet.Range("$D$3:$D$" & faxlastrow).AutoFilter Field:=1
    Columns("G:G").Select
    Selection.Copy
    ActiveSheet.Paste
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Application.CutCopyMode = False
    
    Sheets("Digital and Color").Select
    ActiveSheet.Range("$M$3:$M$" & digitallastrow).AutoFilter Field:=1
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Application.CutCopyMode = False
    Sheets("Software").Select
    ActiveSheet.Range("$M$3:$M$" & softlastrow).AutoFilter Field:=1
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Application.CutCopyMode = False
    Sheets("Fax, Printer, Scanner").Select
    ActiveSheet.Range("$M$3:$M$" & faxlastrow).AutoFilter Field:=1
    Selection.Copy
    ActiveSheet.Paste
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Application.CutCopyMode = False
    

'Delete profit summary/PTP and hide all discount ratio and desired dealer net cost columns
    
Application.DisplayAlerts = False
   Sheets("Profit Summary").Delete
   Sheets("Product Group Discounts").Delete

Sheets("Digital and Color").Select
    Range("I4:I" & digitallastrow).ClearContents
    Range("I3:P3").ClearContents
    Columns("H:I").Select
    Range("I1").Activate
    Selection.EntireColumn.Hidden = True
    Columns("Q:Q").Select
    Selection.EntireColumn.Hidden = True

Sheets("Software").Select
    Range("I4:I" & softlastrow).ClearContents
    Range("I3:P3").ClearContents
    Columns("H:I").Select
    Range("I1").Activate
    Selection.EntireColumn.Hidden = True

Sheets("Fax, Printer, Scanner").Select
    Range("I4:I" & faxlastrow).ClearContents
    Range("I3:P3").ClearContents
    Columns("H:I").Select
    Range("I1").Activate
    Selection.EntireColumn.Hidden = True
    Columns("Q:Q").Select
    Selection.EntireColumn.Hidden = True
    
'Remove AMP credits if offer is continuous support
    
    For Each Cell In Sheets("Digital and Color").Range("C6:C" & digitallastrow)
      If InStr(1, Cell.Value, "AMP CSMP") And Sheet4.obContinue.Value = True Then
      Cell.Offset(0, 4).ClearContents
      End If
   Next Cell
   
   For Each Cell In Sheets("Fax, Printer, Scanner").Range("C90:C" & faxlastrow)
      If InStr(1, Cell.Value, "AMP CSMP") And Sheet4.obContinue1.Value = True Then
      Cell.Offset(0, 4).ClearContents
      End If
   Next Cell

'Remove additional columns to the right of calc sheets

Sheets("Digital and Color").Select
    Columns("S:AZ").Select
    Selection.Delete Shift:=xlToLeft
Sheets("Software").Select
    Columns("R:AZ").Select
    Selection.Delete Shift:=xlToLeft
Sheets("Fax, Printer, Scanner").Select
    Columns("S:AZ").Select
    Selection.Delete Shift:=xlToLeft

Sheets("Digital and Color").Select
    Columns("R:R").Select
    Selection.EntireColumn.Hidden = True
    
Sheets("Software").Select
    Columns("Q:Q").Select
    Selection.EntireColumn.Hidden = True
    
Sheets("Fax, Printer, Scanner").Select
    Columns("R:R").Select
    Selection.EntireColumn.Hidden = True
        
On Error Resume Next
Sheets("Instructions").Visible = False
Sheets("Digital and Color").Select

'MEAP for PaperCut check
For Each Cell In Sheets("Digital and Color").Range("C6:C" & digitallastrow)
    If InStr(1, Cell.Value, "MEAP for PaperCut") And Cell.Offset(0, 4).Value > 0 Then
     MsgBox ("Warning: MEAP for Papercut credit is not 0")
     Exit For
  End If
Next Cell

'Filter to non blank quantities for all sheets

    Sheets("Software").Select
    ActiveSheet.Range("$D$3:$D$" & softlastrow).AutoFilter Field:=1, Criteria1:="<>"
    ActiveWindow.Zoom = 80
    Range("A1").Select
    Sheets("Fax, Printer, Scanner").Select
    ActiveSheet.Range("$D$3:$D$" & faxlastrow).AutoFilter Field:=1, Criteria1:="<>"
    ActiveWindow.Zoom = 80
    Range("A1").Select
     Sheets("Digital and Color").Select
    ActiveSheet.Range("$D$3:$D$" & digitallastrow).AutoFilter Field:=1, Criteria1:="<>"
    ActiveWindow.Zoom = 80
    Range("A1").Select
    
'PTP Disclaimer (added 11/2/17)

Sheets("Digital and Color").Select
 If InStr(1, Sheets("CSMP Detail Form").Range("F15").Value, "CSA") = False Then
 Range("D1").FormulaR1C1 = _
    "* Please note - Column M reflects the Dealer PDL Program level at time of offer.  It should be used for reference and is not guaranteed if PDL levels change"
    Range("D1").Select
    With Selection.Font
        .color = -16776961
        .TintAndShade = 0
        .Bold = True
        .Italic = True
    End With
    End If

'run the CSMPTotals macro for sheets with items
    
  For Each Cell In Sheets("Digital and Color").Range("D6:D" & digitallastrow)
    If Not Cell.Value = "" Then
    blanks3 = False
    Exit For
    Else
    blanks3 = True
    End If
    Next
    
    For Each Cell In Sheets("Software").Range("D6:D" & softlastrow)
    If Not Cell.Value = "" Then
    blanks1 = False
    Exit For
    Else
    blanks1 = True
    End If
    Next
       
    For Each Cell In Sheets("Fax, Printer, Scanner").Range("D5:D" & faxlastrow)
    If Not Cell.Value = "" Then
    blanks2 = False
    Exit For
    Else
    blanks2 = True
    End If
    Next
    
    Application.DisplayAlerts = False
    
    If blanks1 = False Then Sheets("Software").Select
    Call CSMPTotals.CSMPTotals
    Call Utils.ProtectWorksheets(False, "team", strListOfWorksheets)
    
    If blanks2 = False Then Sheets("Fax, Printer, Scanner").Select
    Call CSMPTotals.CSMPTotals
    Call Utils.ProtectWorksheets(False, "team", strListOfWorksheets)
    
    If blanks3 = False Then Sheets("Digital and Color").Select
    Call CSMPTotals.CSMPTotals
    Call Utils.ProtectWorksheets(False, "team", strListOfWorksheets)
    
    Application.DisplayAlerts = True
    
 'Hide sheets if quantities are blank
       
    If blanks1 = True Then Worksheets("Software").Visible = False
    If blanks2 = True Then Worksheets("Fax, Printer, Scanner").Visible = False
    If blanks3 = True Then Worksheets("Digital and Color").Visible = False
                   
Application.DisplayAlerts = False
Call CSMPTotals.CSMPTotals
Application.DisplayAlerts = True

Sheets("Digital and Color").unprotect "team"
Sheets("Software").unprotect "team"
Sheets("Fax, Printer, Scanner").unprotect "team"

'Save file
ActiveWorkbook.Save


End Sub

Attribute VB_Name = "UserFormCSMP"
Attribute VB_Base = "0{218F9925-F283-4C65-A065-AF4A44EC14B5}{7ACBFF54-7CE7-4BD7-99AC-FC8CFAF3C5DF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False







Function SetCSMPCreditFormula(nRow As Integer)
        SetCSMPCreditFormula = "=IF(IsNumber(I" & CStr(nRow) & ")=True,E" & CStr(nRow) & "-I" & CStr(nRow) & ",IF(IsNumber(H" & CStr(nRow) & ")=True,-(E" & CStr(nRow) & "*H" & CStr(nRow) & "),0))"
End Function

Sub ContinueButton_Click()

Dim x As Integer
Dim BlankCounter As Integer

Application.ScreenUpdating = False
UserFormCSMP.Hide

    'don't need it fix #00008 05-18-2011
    'Sheets("CSMP Detail Form").Select
    'Range("B4").Select
    'ActiveCell.Value = UserFormCSMP.AccountNameLabelBox
    
    Sheets("Digital and Color").Visible = True
    Sheets("Digital and Color").Select
    Range("B1").Select
    ActiveCell.Value = UserFormCSMP.AccountNameLabelBox

    Sheets("Software").Visible = True
    Sheets("Software").Select
    Range("B1").Select
    ActiveCell.Value = UserFormCSMP.AccountNameLabelBox

    Sheets("Fax, Printer, Scanner").Visible = True
    Sheets("Fax, Printer, Scanner").Select
    Range("B1").Select
    ActiveCell.Value = UserFormCSMP.AccountNameLabelBox
    
    Sheets("Digital and Color").Select
    
    
If PercentOffDPRadialButton.Value = False And PercentOffMSRPRadialButton.Value = False And DesiredPriceRadialButton.Value = False And CSMPCreditRadialButton.Value = False Then
    MsgBox "Please select a method for pricing this account", vbExclamation
    Else
    

    
    If PercentOffMSRPRadialButton.Value = True Then
                Dim strRow As String
                
                Dim nTotalsRow As Integer
                
    'Digital tab
        Sheets("Digital and Color").Select
                
                Range("H3").Value = -(MSRPPercentTextBox / 100)
                
                'Range("I5").Select
        'Range("I5").Value = "=E5*(1+E$3)"
        'Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlNotEqual, _
        '    Formula1:="=E5*(1+$E$3)"
        '    Selection.FormatConditions(1).Interior.colorindex = 44
        'Selection.Copy
            
        x = 0
        BlankCounter = 0
        
                Range("H5").Formula = "=IF(I5<>0,IF(E5<>0,(I5/E5)-1,""""),$H$3)"
                
                nTotalsRow = Utils.FindTotalsRowIndex(Utils.STR_DIGITAL_COLOR_WORKSHEET)
                
                x = 0
        BlankCounter = 0
        
                If Range("H5").Value <> "" Then
                        Do While x < nTotalsRow
                                Range("H5").Select
                                If ActiveCell.Offset(x, -1).Value <> "" Then
                                        strRow = CStr(Mid(ActiveCell.Offset(x, 0).Address, InStr(2, ActiveCell.Offset(x, 0).Address, "$") + 1, Len(ActiveCell.Offset(x, 0).Address)))
                                                
                                        ActiveCell.Offset(x, 0).Formula = "=IF(I" & strRow & "<>0,IF(E" & strRow & "<>0,(I" & strRow & "/E" & strRow & ")-1,""""),$H$3)"
                                        
                                        ActiveCell.Offset(x, -1).Formula = SetCSMPCreditFormula(CInt(strRow))
                                        
                                        Range("H5").Select
                                        If ActiveCell.Offset(x, -2).Font.Bold = False Then
                                                Range("H5").Select
                                                ActiveCell.Offset(x, 0).Select
                                                Selection.Font.Bold = False
                                                Selection.Font.colorindex = 1
                                        End If
                                        
                                        Range("H5").Select
                                        If ActiveCell.Offset(x, -7).Font.colorindex = 49 Then
                                                Range("H5").Select
                                                ActiveCell.Offset(x, 0).Select
                                                Selection.Font.colorindex = 40
                                        End If
                                        
                                        Range("h5").Select
                                        If ActiveCell.Offset(x, -7).Interior.colorindex = 0 Then
                                                ActiveCell.Offset(x, 0).Select
                                                Selection.Interior.colorindex = 0
                                        End If
                                End If
                                
                                x = x + 1
                        Loop
                End If
                         
                'format MSRP % Box
        'Range("H3").Select
        'Selection.Copy
        'Range("E3").Select
        'Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
        'SkipBlanks:=False, Transpose:=False
        'ActiveCell.Value = -(MSRPPercentTextBox / 100)
        
    'Software tab
        Sheets("Software").Select
                
                Range("H3").Value = -(MSRPPercentTextBox / 100)
                
        'Range("I6").Select
        'Range("I6").Value = "=E6*(1+E$3)"
        'Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlNotEqual, _
        '    Formula1:="=E6*(1+$E$3)"
        '    Selection.FormatConditions(1).Interior.colorindex = 44
        'Selection.Copy
            
        x = 0
        BlankCounter = 0
        
                Range("H5").Formula = "=IF(I5<>0,IF(E5<>0,(I5/E5)-1,""""),$H$3)"
                
                nTotalsRow = Utils.FindTotalsRowIndex(Utils.STR_SOFTWARE_WORKSHEET)
                
        If Range("H5").Value <> "" Then
                        Do While x < nTotalsRow
                                Range("H5").Select
                                If ActiveCell.Offset(x, -1).Value <> "" Then
                                        strRow = CStr(Mid(ActiveCell.Offset(x, 0).Address, InStr(2, ActiveCell.Offset(x, 0).Address, "$") + 1, Len(ActiveCell.Offset(x, 0).Address)))
                                                
                                        ActiveCell.Offset(x, 0).Formula = "=IF(I" & strRow & "<>0,IF(E" & strRow & "<>0,(I" & strRow & "/E" & strRow & ")-1,""""),$H$3)"
                                        
                                        ActiveCell.Offset(x, -1).Formula = SetCSMPCreditFormula(CInt(strRow))
                                        
                                        Range("H5").Select
                                        If ActiveCell.Offset(x, -2).Font.Bold = False Then
                                                Range("H5").Select
                                                ActiveCell.Offset(x, 0).Select
                                                Selection.Font.Bold = False
                                                Selection.Font.colorindex = 1
                                        End If
                                        
                                        Range("H5").Select
                                        If ActiveCell.Offset(x, -7).Font.colorindex = 49 Then
                                                Range("H5").Select
                                                ActiveCell.Offset(x, 0).Select
                                                Selection.Font.colorindex = 40
                                        End If
                                        
                                        Range("h5").Select
                                        If ActiveCell.Offset(x, -7).Interior.colorindex = 0 Then
                                                ActiveCell.Offset(x, 0).Select
                                                Selection.Interior.colorindex = 0
                                        End If
                                End If
                                
                                x = x + 1
                        Loop
                End If
            
                Range("H5").Formula = ""
                
                Range("H5").Value = ""
                
        'format MSRP % Box
        'Range("H3").Select
        'Selection.Copy
        'Range("E3").Select
        'Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
        'SkipBlanks:=False, Transpose:=False
        'ActiveCell.Value = -(MSRPPercentTextBox / 100)
        
    'Fax, Printer, Scanner tab
        Sheets("Fax, Printer, Scanner").Select

                Range("H3").Value = -(MSRPPercentTextBox / 100)
                
        'Range("I5").Select
        'Range("I5").Value = "=E5*(1+E$3)"
        'Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlNotEqual, _
        '    Formula1:="=E5*(1+$E$3)"
        '    Selection.FormatConditions(1).Interior.colorindex = 44
        'Selection.Copy
            
        x = 0
        BlankCounter = 0
        
                Range("H5").Formula = "=IF(I5<>0,IF(E5<>0,(I5/E5)-1,""""),$H$3)"
                
                nTotalsRow = Utils.FindTotalsRowIndex(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET)
                
        If Range("H5").Value <> "" Then
                        Do While x < nTotalsRow
                                Range("H5").Select
                                If ActiveCell.Offset(x, -1).Value <> "" Then
                                        strRow = CStr(Mid(ActiveCell.Offset(x, 0).Address, InStr(2, ActiveCell.Offset(x, 0).Address, "$") + 1, Len(ActiveCell.Offset(x, 0).Address)))
                                                
                                        ActiveCell.Offset(x, 0).Formula = "=IF(I" & strRow & "<>0,IF(E" & strRow & "<>0,(I" & strRow & "/E" & strRow & ")-1,""""),$H$3)"
                                        
                                        ActiveCell.Offset(x, -1).Formula = SetCSMPCreditFormula(CInt(strRow))
                                        
                                        Range("H5").Select
                                        If ActiveCell.Offset(x, -2).Font.Bold = False Then
                                                Range("H5").Select
                                                ActiveCell.Offset(x, 0).Select
                                                Selection.Font.Bold = False
                                                Selection.Font.colorindex = 1
                                        End If
                                        
                                        Range("H5").Select
                                        If ActiveCell.Offset(x, -7).Font.colorindex = 49 Then
                                                Range("H5").Select
                                                ActiveCell.Offset(x, 0).Select
                                                Selection.Font.colorindex = 40
                                        End If
                                        
                                        Range("h5").Select
                                        If ActiveCell.Offset(x, -7).Interior.colorindex = 0 Then
                                                ActiveCell.Offset(x, 0).Select
                                                Selection.Interior.colorindex = 0
                                        End If
                                End If
                                
                                x = x + 1
                        Loop
                End If
            
        'format MSRP % Box
        'Range("H3").Select
        'Selection.Copy
        'Range("E3").Select
        'Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
        'SkipBlanks:=False, Transpose:=False
        'ActiveCell.Value = -(MSRPPercentTextBox / 100)
        

   End If


    If PercentOffDPRadialButton.Value = True Then
            
    'Digital tab
        Sheets("Digital and Color").Select
                
        Range("H3").Select
        ActiveCell.Value = -(DPPercentTextBox / 100)
            
        Range("H5").Select
        Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlNotEqual, _
            Formula1:="=($H$3)"
            Selection.FormatConditions(1).Interior.colorindex = 40
                    
        x = 0
        BlankCounter = 0
        
                If Range("H5").Value <> "" Then
                        Range("H5").Select
                        Do While BlankCounter < 10
                                Range("H5").Select
                                Selection.Copy
                                If ActiveCell.Offset(x, -1).Value <> "" And ActiveCell.Offset(x, -3).Value <> "N/A" And ActiveCell.Offset(x, -3).Value <> "---" Then
                                        Range("H5").Select
                                        ActiveCell.Offset(x, 0).Select
                                        ActiveSheet.Paste
                                        ActiveCell.Offset(x, 0).NumberFormat = "0.0%"
                                        Range("H5").Select
                                        If ActiveCell.Offset(x, -2).Font.Bold = False Then
                                                Range("H5").Select
                                                ActiveCell.Offset(x, 0).Select
                                                Selection.Font.Bold = False
                                                Selection.Font.colorindex = 1
                                        End If
                                        Range("H5").Select
                                        If ActiveCell.Offset(x, -7).Font.colorindex = 49 Then
                                                Range("H5").Select
                                                ActiveCell.Offset(x, 0).Select
                                                Selection.Font.colorindex = 40
                                        End If
                                        Range("h5").Select
                                        If ActiveCell.Offset(x, -7).Interior.colorindex = 0 Then
                                                ActiveCell.Offset(x, 0).Select
                                                Selection.Interior.colorindex = 0
                                        End If
                                        x = x + 1
                                        BlankCounter = 0
                                Else
                                        x = x + 1
                                        BlankCounter = BlankCounter + 1
                                End If
                        Loop
                End If
                                
                
    'Software tab
        Sheets("Software").Select
        Range("H3").Select
        ActiveCell.Value = -(DPPercentTextBox / 100)
            
        Range("H6").Select
        Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlNotEqual, _
            Formula1:="=($H$3)"
            Selection.FormatConditions(1).Interior.colorindex = 40
                    
        x = 0
        BlankCounter = 0
        
        Do While BlankCounter < 10
        Range("H6").Select
        Selection.Copy
        If ActiveCell.Offset(x, -1).Value <> "" And ActiveCell.Offset(x, -3).Value <> "N/A" And ActiveCell.Offset(x, -3).Value <> "---" Then
                Range("H6").Select
                ActiveCell.Offset(x, 0).Select
                ActiveSheet.Paste
                Range("H6").Select
                If ActiveCell.Offset(x, -2).Font.Bold = False Then
                    Range("H6").Select
                    ActiveCell.Offset(x, 0).Select
                    Selection.Font.Bold = False
                    Selection.Font.colorindex = 1
                End If
                Range("H6").Select
                If ActiveCell.Offset(x, -7).Font.colorindex = 49 Then
                    Range("H6").Select
                    ActiveCell.Offset(x, 0).Select
                    Selection.Font.colorindex = 49
                End If
                Range("h6").Select
                If ActiveCell.Offset(x, -7).Interior.colorindex = 0 Then
                    ActiveCell.Offset(x, 0).Select
                    Selection.Interior.colorindex = 0
                End If
                x = x + 1
                BlankCounter = 0
                Else
                x = x + 1
                BlankCounter = BlankCounter + 1
            End If
            Loop
    
    'Fax, Printer, Scanner tab
        Sheets("Fax, Printer, Scanner").Select
        Range("H3").Select
        ActiveCell.Value = -(DPPercentTextBox / 100)
            
        Range("H5").Select
        Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlNotEqual, _
            Formula1:="=($H$3)"
            Selection.FormatConditions(1).Interior.colorindex = 40
                    
        x = 0
        BlankCounter = 0
        
        Do While BlankCounter < 10
        Range("H5").Select
        Selection.Copy
        If ActiveCell.Offset(x, -1).Value <> "" And ActiveCell.Offset(x, -3).Value <> "N/A" And ActiveCell.Offset(x, -3).Value <> "---" Then
                Range("H5").Select
                ActiveCell.Offset(x, 0).Select
                ActiveSheet.Paste
                Range("H5").Select
                If ActiveCell.Offset(x, -2).Font.Bold = False Then
                    Range("H5").Select
                    ActiveCell.Offset(x, 0).Select
                    Selection.Font.Bold = False
                    Selection.Font.colorindex = 1
                End If
                Range("H5").Select
                If ActiveCell.Offset(x, -7).Font.colorindex = 49 Then
                    Range("H5").Select
                    ActiveCell.Offset(x, 0).Select
                    Selection.Font.colorindex = 49
                End If
                Range("h5").Select
                If ActiveCell.Offset(x, -7).Interior.colorindex = 0 Then
                    ActiveCell.Offset(x, 0).Select
                    Selection.Interior.colorindex = 0
                End If
                x = x + 1
                BlankCounter = 0
                Else
                x = x + 1
                BlankCounter = BlankCounter + 1
            End If
            Loop
    
    End If
    
    If CSMPCreditRadialButton.Value = True Then
    
    Dim TotalsRowDigital As Integer
    Dim TotalsRowSoftware As Integer
    Dim TotalsRowFax As Integer
    
        'Find the Totals Row
        Sheets("Digital and Color").Select
        a = 0
        Do While a < Utils.N_MAX_ROWS_TO_SEARCH
            Range("A2").Select
            If ActiveCell.Offset(a, ItemNumberColumn).Value = "TOTALS" Then
            TotalsRowDigital = a
            a = Utils.N_MAX_ROWS_TO_SEARCH
            Else
            a = a + 1
            End If
        Loop
        
        Sheets("Software").Select
        a = 0
        Do While a < Utils.N_MAX_ROWS_TO_SEARCH
            Range("A2").Select
            If ActiveCell.Offset(a, ItemNumberColumn).Value = "TOTALS" Then
            TotalsRowSoftware = a
            a = Utils.N_MAX_ROWS_TO_SEARCH
            Else
            a = a + 1
            End If
        Loop
        
        Sheets("Fax, Printer, Scanner").Select
        a = 0
        Do While a < Utils.N_MAX_ROWS_TO_SEARCH
            Range("A2").Select
            If ActiveCell.Offset(a, ItemNumberColumn).Value = "TOTALS" Then
            TotalsRowFax = a
            a = Utils.N_MAX_ROWS_TO_SEARCH
            Else
            a = a + 1
            End If
        Loop
    
        Sheets("Digital and Color").Select
        Range("G5").Select
        ActiveCell.Value = 0
        Range("I5").Select
        ActiveCell.FormulaR1C1 = "=RC[-3]-RC[-2]"
            i = 0
            Do While i < TotalsRowDigital - 3
                Range("G5").Select
                If ActiveCell.Offset(i, -1).Value <> "" Then
                    Range("G5:I5").Select
                    Selection.Copy
                    ActiveCell.Offset(i, 0).Select
                    Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                        SkipBlanks:=False, Transpose:=False
                End If
                i = i + 1
            Loop
        Columns("H:I").Select
        Selection.Locked = True
        Columns("G:G").Select
        Selection.Locked = False
            
        Sheets("Software").Select
        Range("G5").Select
        ActiveCell.Value = 0
        Range("I5").Select
        ActiveCell.FormulaR1C1 = "=RC[-3]-RC[-2]"
            i = 0
            Do While i < TotalsRowSoftware - 3
                Range("G5").Select
                If ActiveCell.Offset(i, -1).Value <> "" Then
                    Range("G5:I5").Select
                    Selection.Copy
                    ActiveCell.Offset(i, 0).Select
                    Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                        SkipBlanks:=False, Transpose:=False
                End If
                i = i + 1
            Loop
        Columns("H:I").Select
        Selection.Locked = True
        Columns("G:G").Select
        Selection.Locked = False
    
        Sheets("Fax, Printer, Scanner").Select
        Range("G5").Select
        ActiveCell.Value = 0
        Range("I5").Select
        ActiveCell.FormulaR1C1 = "=RC[-3]-RC[-2]"
            i = 0
            Do While i < TotalsRowFax - 3
                Range("G5").Select
                If ActiveCell.Offset(i, -1).Value <> "" Then
                    Range("G5:I5").Select
                    Selection.Copy
                    ActiveCell.Offset(i, 0).Select
                    Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                        SkipBlanks:=False, Transpose:=False
                End If
                i = i + 1
            Loop
        Columns("H:I").Select
        Selection.Locked = True
        Columns("G:G").Select
        Selection.Locked = False
        
        End If
                
    'clear 5 row from formulas/values.
        Dim nTotalPriceColIndex As Integer
        Dim k As Integer
        
        nTotalPriceColIndex = Utils.ColIndex(Sheets("Digital and Color"), "Total Price", 2)
        
        For k = 1 To nTotalPriceColIndex
                Sheets("Digital and Color").Cells(5, k).Formula = ""
                Sheets("Digital and Color").Cells(5, k).Value = ""
        Next k
        
        k = 0
                
Sheets("Fax, Printer, Scanner").Select
'Protect the worksheet
ActiveSheet.Protect Password:="team", _
DrawingObjects:=False, Contents:=True, Scenarios:= _
False, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
AllowFormattingRows:=True, AllowSorting:=True, AllowFiltering:=True
Range("D1").Select

Sheets("Software").Select
'Protect the worksheet
ActiveSheet.Protect Password:="team", _
DrawingObjects:=False, Contents:=True, Scenarios:= _
False, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
AllowFormattingRows:=True, AllowSorting:=True, AllowFiltering:=True
Range("D1").Select

Sheets("Digital and Color").Select
'Protect the worksheet
ActiveSheet.Protect Password:="team", _
DrawingObjects:=False, Contents:=True, Scenarios:= _
False, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
AllowFormattingRows:=True, AllowSorting:=True, AllowFiltering:=True
Range("D1").Select
    

End If

Application.ScreenUpdating = False
If DesiredPriceRadialButton.Value = True Then MsgBox "Please enter your desired Net Dealer Cost before CWO (per unit) in column I.", vbExclamation
    
        'Call Utils.RectangleDCTFix("CSMPTotals.CSMPTotals")
    'AssignCheckTotalsMacros
            
End Sub

Private Sub AssignCheckTotalsMacros()
    
    Dim strListOfWorksheets(3) As String
    
    strListOfWorksheets(0) = "Digital and Color"
    strListOfWorksheets(1) = "Software"
    strListOfWorksheets(2) = "Fax, Printer, Scanner"
    
    ProtectWorksheets False, Utils.STR_DEFAULT_PASSWORD, strListOfWorksheets
       
    Dim wsTemp As Worksheet
    Dim shTemp As Shape
    
    Set wsTemp = ActiveWorkbook.Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET)
     
    Set shTemp = wsTemp.Shapes("Rectangle 385")
    
    'http://www.vbaexpress.com/forum/showthread.php?41279-Name-and-Delete-Shape
    If shTemp Is Nothing Then
        shTemp.Delete
    End If
    
    Call Utils.AssignMacro2NewTotalsCell(ActiveWorkbook, Utils.STR_DIGITAL_COLOR_WORKSHEET, "CSMPTotals.CSMPTotals")
    
    Set wsTemp = ActiveWorkbook.Sheets(Utils.STR_SOFTWARE_WORKSHEET)
     
    Set shTemp = wsTemp.Shapes("Rectangle 54")
    
    'http://www.vbaexpress.com/forum/showthread.php?41279-Name-and-Delete-Shape
    If shTemp Is Nothing Then
        shTemp.Delete
    End If
    
    Call Utils.AssignMacro2NewTotalsCell(ActiveWorkbook, Utils.STR_SOFTWARE_WORKSHEET, "CSMPTotals.CSMPTotals")
    
    Set wsTemp = ActiveWorkbook.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET)
     
    Set shTemp = wsTemp.Shapes("Rectangle 50")
    
    'http://www.vbaexpress.com/forum/showthread.php?41279-Name-and-Delete-Shape
    If shTemp Is Nothing Then
        shTemp.Delete
    End If
    
    Call Utils.AssignMacro2NewTotalsCell(ActiveWorkbook, Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET, "CSMPTotals.CSMPTotals")
    
End Sub

Private Sub DesiredPriceRadialButton_Click()

DPPercentTextBox.Visible = False
Label11.Visible = False

MSRPPercentTextBox.Visible = False
Label13.Visible = False

End Sub

Private Sub PercentOffDPRadialButton_Click()

DPPercentTextBox.Visible = True
Label11.Visible = True

MSRPPercentTextBox.Visible = False
Label13.Visible = False

End Sub

Private Sub PercentOffMSRPRadialButton_Click()

MSRPPercentTextBox.Visible = True
Label13.Visible = True

DPPercentTextBox.Visible = False
Label11.Visible = False

End Sub

Attribute VB_Name = "UserFormCSMPUpload"
Attribute VB_Base = "0{1D8FF43A-0B7A-4828-BA95-38FF3400E71F}{4561B28A-663F-4A68-BC78-0AA219074B1A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
















Private m_nYear As Integer
Private m_strEndUserType As String
Private m_strOfferOrFinal As String
Private m_strRequest As String
Private m_strLastUpdated As String
Private m_strResultWinLoss As String
Private m_strCity As String
Private m_strState As String
Private m_strOrgUnit As String
Private m_strSalesRep As String
Private m_bCancelFlag As Boolean
Private m_strOfferName As String
Private m_nOfferID As Integer
Private m_nTSEID As Integer
Private m_nRevisionID As Integer
Private m_strDBFileName As String
Private m_strCINCSupport As String
Private m_strTargetAccount As String

' Added 06/2019 - WB
Private m_bCSAP_CHC As Boolean

Private m_bSaveNew As Boolean

Private m_arrTSEIDs() As Integer
Private m_arrTSENamesLong() As String

Private m_bOnLoadFlag As Boolean

'properties
Public Function DBFileName()
    DBFileName = m_strDBFileName
End Function

Public Function SaveNew()
    SaveNew = m_bSaveNew
End Function

' Added 06/2019 WB
Public Function CSAP_CHC()
  CSAP_CHC = m_bCSAP_CHC
End Function

Public Function TargetAccount()
    TargetAccount = m_strTargetAccount
End Function

Public Function CINCSupport()
    CINCSupport = m_strCINCSupport
End Function

Public Function OfferName()
    OfferName = m_strOfferName
End Function

Public Function OfferID()
    OfferID = m_nOfferID
End Function

Public Function TSEID()
    TSEID = m_nTSEID
End Function

Public Function RevisionID()
    RevisionID = m_nRevisionID
End Function

Public Function City()
    City = m_strCity
End Function

Public Function State()
    State = m_strState
End Function

Public Function OrgUnit()
    OrgUnit = m_strOrgUnit
End Function

Public Function SalesRep()
    SalesRep = m_strSalesRep
End Function

Public Function Request()
    Request = m_strRequest
End Function

Public Function LastUpdated()
    LastUpdated = m_strLastUpdated
End Function

Public Function ResultWinLoss()
    ResultWinLoss = m_strResultWinLoss
End Function

Public Function Year()
    Year = m_nYear
End Function

Public Function EndUserType()
    EndUserType = m_strEndUserType
End Function

Public Function OfferOrFinal()
    OfferOrFinal = m_strOfferOrFinal
End Function

Public Function CancelFlag()
    CancelFlag = m_bCancelFlag
End Function

Public Sub SetupForm(nYear As Integer, strEndUserType As String, strOfferName As String, strDBFileName As String)
    m_nYear = nYear
    m_strEndUserType = strEndUserType
    m_strOfferName = strOfferName
    m_strDBFileName = strDBFileName
End Sub





Private Sub cmbTSE_Change()

    If m_bOnLoadFlag = True Then Exit Sub

    'set m_nTSEID here.
    Dim i As Integer, nSelectedIndex As Integer
    
    For i = 0 To UBound(m_arrTSENamesLong) - 1
        If m_arrTSENamesLong(i) = cmbTSE.Text Then
            nSelectedIndex = i
            Exit For
        End If
    Next i
    
    m_nTSEID = m_arrTSEIDs(nSelectedIndex)
End Sub

Private Sub SetTSEID()
    Dim i As Integer, nSelectedIndex As Integer
    
    For i = 0 To UBound(m_arrTSEIDs) - 1
        If m_arrTSEIDs(i) = m_nTSEID Then
            nSelectedIndex = i
            Exit For
        End If
    Next i
    
    cmbTSE.Text = m_arrTSENamesLong(nSelectedIndex)
End Sub

Private Sub cmdCancel_Click()

    m_bCancelFlag = True
    
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    If m_nRevisionID = 0 Then
        MsgBox "Please, select a revision."
        Exit Sub
    End If
    
    ' Added 06/2019 WB - TSE disabled with CSAP / CHC checked
    If cmbTSE.Text = "" And chkCSAP_CHC.Value = False Then
        MsgBox "Please, select a TSE."
        Exit Sub
    End If
    
    m_bCancelFlag = False
    
        On Error Resume Next
    
                Err.Clear
        
        m_nYear = CInt(txtYear.Text)
            
        If Err.Number <> 0 Then
            MsgBox "Year has invalid number format."
            Exit Sub
        End If
                
        Err.Clear
        
        m_strLastUpdated = CDate(txtLastUpdated.Text)
        
        If Err.Number <> 0 Then
            MsgBox "LastUpdated has invalid date format."
            Exit Sub
        End If
        
    On Error GoTo ErrLabel
        
    
    m_strEndUserType = cmbEndUserType.Text
    m_strOfferOrFinal = cmbOfferOrFinal.Text
    m_strResultWinLoss = cmbResultWinLoss.Text
    m_strRequest = cmbRequest.Text
    
    m_strCity = txtCity.Text
    m_strState = txtState.Text
    m_strOrgUnit = txtOrgUnit.Text
    m_strSalesRep = "" 'txtSalesRep.Text
    m_strOfferName = txtOfferName.Text
    SetOfferID (Me.OfferName)
    
    ' Added 06/2019 WB - Save CSAP / CHC value
    m_bCSAP_CHC = chkCSAP_CHC.Value
    
    If chkCINCSupport.Value = True Then
        m_strCINCSupport = "Yes"
    Else
        m_strCINCSupport = "No"
    End If
    
    If chkTargetAmount.Value = True Then
        m_strTargetAccount = "Yes"
    Else
        m_strTargetAccount = "No"
    End If
        
    Me.Hide
    
    Exit Sub
    
ErrLabel:
    MsgBox "Error. Description: " & Err.Description
End Sub

Private Sub SetOfferID(strOfferName As String)
    Dim objConnection As ADODB.Connection
    Dim objRecordset As ADODB.Recordset
        
    Set objConnection = Utils.GetConnectionObjectForAccess(Me.DBFileName)
    
    If objConnection Is Nothing Then
        MsgBox "Unable to open connection to the Access database."
        Exit Sub
    End If
        
    Set objRecordset = CreateObject("ADODB.Recordset")
        
    objRecordset.Open "select ID from tblOffers where OfferName = '" & Replace(Me.OfferName, "'", "''") & "'", objConnection, adOpenForwardOnly, adLockReadOnly
       
    m_nOfferID = CInt(objRecordset("ID").Value)
    
    objRecordset.Close
    
End Sub

Private Sub cmdRevisions_Click()
    Dim frm1 As frmRevisions
    
    Set frm1 = New frmRevisions
    
    frm1.SetupForm Me.OfferName, Me.DBFileName
    
    frm1.Show
    
    txtSelectedRevision.Text = frm1.SelectedRevision
    m_nRevisionID = frm1.SelectedRevisionID
        
End Sub

Private Sub cmdUpdateOfferName_Click()
    Dim frm1 As frmOffers
    
    Set frm1 = New frmOffers
    
    frm1.SetupForm Me.OfferName, Me.DBFileName
    
    frm1.Show
    
    txtOfferName.Text = frm1.OfferName
    m_strOfferName = frm1.OfferName
    txtSelectedRevision.Text = ""
    m_nRevisionID = 0
    
    'pre-load all values if data exists in the Access database.
    PreloadValuesForTheExistingOffer frm1.OfferName
    
End Sub

Private Function GetDatabaseValue(objField As ADODB.Field)

    Dim vTemp1 As Variant
    
    vTemp1 = objField.Value
    
    If IsNull(vTemp1) = True Then
        GetDatabaseValue = ""
    Else
        GetDatabaseValue = CStr(vTemp1)
    End If
    
End Function

Private Sub PreloadValuesForTheExistingOffer(strOfferName As String)
    Dim objConnection As ADODB.Connection
    Dim objRecordset As ADODB.Recordset
        
    Set objConnection = Utils.GetConnectionObjectForAccess(Me.DBFileName)
    
    If objConnection Is Nothing Then
        MsgBox "Unable to open connection to the Access database."
        Exit Sub
    End If
        
    Set objRecordset = CreateObject("ADODB.Recordset")
        
    objRecordset.Open "select ID from tblOffers where OfferName = '" & Replace(strOfferName, "'", "''") & "'", objConnection, adOpenForwardOnly, adLockReadOnly
        
    If Not objRecordset.EOF Then
       m_nOfferID = CInt(objRecordset("ID").Value)
       
       objRecordset.Close
               
       Dim strSQLTemp1 As String
       
       strSQLTemp1 = "select [Year], [Offer Or Final], [End User Type], [Request], [Last Update], [Result Win/Loss], [City], [State], [Org Unit], [Sales Rep], [CINC Support], [Target Account], TSEID, [CSAP/CHC] from tbl1_Total_Tracking_Database where OfferID = " & CStr(m_nOfferID)
       
       objRecordset.Open strSQLTemp1, objConnection, adOpenForwardOnly, adLockReadOnly
    
       m_bSaveNew = objRecordset.EOF
       
       If Not objRecordset.EOF Then
                            
            txtYear.Text = GetDatabaseValue(objRecordset("Year"))
            cmbOfferOrFinal.Text = GetDatabaseValue(objRecordset("Offer Or Final"))
            cmbEndUserType.Text = GetDatabaseValue(objRecordset("End User Type"))
            cmbRequest.Text = GetDatabaseValue(objRecordset("Request"))
            txtLastUpdated.Text = GetDatabaseValue(objRecordset("Last Update"))
            cmbResultWinLoss.Text = GetDatabaseValue(objRecordset("Result Win/Loss"))
            txtCity.Text = GetDatabaseValue(objRecordset("City"))
            txtState.Text = GetDatabaseValue(objRecordset("State"))
            txtOrgUnit.Text = GetDatabaseValue(objRecordset("Org Unit"))
            'txtSalesRep.Text = objRecordset("Sales Rep").Value
            
            If IsNull(objRecordset("TSEID")) = False Then
                m_nTSEID = CInt(objRecordset("TSEID").Value)
                
                SetTSEID
            End If
            
            
            ' Added 06/2019 WB
            If objRecordset("CSAP/CHC").Value = True Then
              chkCSAP_CHC.Value = True
            Else
              chkCSAP_CHC.Value = False
            End If
              
            
            If objRecordset("CINC Support").Value = True Then
                chkCINCSupport.Value = True
            Else
                chkCINCSupport.Value = False
            End If
            
            If objRecordset("Target Account").Value = True Then
                chkTargetAmount.Value = True
            Else
                chkTargetAmount.Value = False
            End If
            
            objRecordset.Close
            
       End If
       
       If objRecordset.State <> adClosed Then
            objRecordset.Close
       End If
            
       txtSelectedRevision.Text = "Initial Revision"
        
       objRecordset.Open "select x.ID, x.Revision, x.DateCreated, x.DateModified from tblRevisions x, tblOffers y where x.OfferID = y.ID and x.Revision='Initial Revision' and y.OfferName = '" & Replace(strOfferName, "'", "''") & "'", objConnection, adOpenForwardOnly, adLockReadOnly
        
       m_nRevisionID = objRecordset("ID")
    Else
        m_bSaveNew = True
        
        'just preload offer name and Initial Revision.
        objRecordset.Close
                
        objConnection.Execute "insert into tblOffers (OfferName) values ('" & Replace(strOfferName, "'", "''") & "')"
        
        objConnection.Execute "insert into tblRevisions (OfferID, Revision, DateCreated, DateModified) select ID, '" & "Initial Revision" & "', '" & CStr(Now) & "', '" & CStr(Now) & "' from tblOffers where OfferName = '" & Replace(strOfferName, "'", "''") & "'"
        
        txtSelectedRevision.Text = "Initial Revision"
        
        objRecordset.Open "select x.ID, x.Revision, x.DateCreated, x.DateModified from tblRevisions x, tblOffers y where x.OfferID = y.ID and x.Revision='Initial Revision' and y.OfferName = '" & Replace(strOfferName, "'", "''") & "'", objConnection, adOpenForwardOnly, adLockReadOnly
        
        m_nRevisionID = objRecordset("ID")
        
    End If
    
End Sub

Private Sub PreLoadTSEs()
    Dim objConnection As ADODB.Connection
    Dim objRecordset As ADODB.Recordset
        
    Set objConnection = Utils.GetConnectionObjectForAccess(Me.DBFileName)
    
    If objConnection Is Nothing Then
        MsgBox "Unable to open connection to the Access database."
        Exit Sub
    End If
        
    Set objRecordset = CreateObject("ADODB.Recordset")
        
    Dim sqlQuery As String
    
    '04-19-2019 new tables for TSE
    sqlQuery = "select x.SalesRepAssignmentID as TSEID, " & _
                        "z.RepCode as TSECode, " & _
                        "y.FirstName + ' ' + y.LastName as [TSE Name], " & _
                        "y.FirstName + ' ' + y.LastName  + ' - ' + z.RepCode as [TSE Name Long] " & _
                "from [dbo].[tblSalesRepsToRepCodeAssignments] x, dbo.tblUsers y, dbo.tblRepCodes z " & _
                "where x.EmployeeID = y.UserId And x.RepCodeID = z.RepCodeID " & _
                "order by y.FirstName asc"
                
    objRecordset.Open sqlQuery, objConnection, adOpenForwardOnly, adLockReadOnly
    
    Me.cmbTSE.Clear
    
    ReDim Preserve m_arrTSEIDs(1)
    ReDim Preserve m_arrTSENamesLong(1)
    
    Me.cmbTSE.AddItem "CSA - No TSE"
            
    m_arrTSEIDs(UBound(m_arrTSEIDs) - 1) = -1

    m_arrTSENamesLong(UBound(m_arrTSENamesLong) - 1) = "CSA - No TSE"
    
    ReDim Preserve m_arrTSEIDs(UBound(m_arrTSEIDs) + 1)
    ReDim Preserve m_arrTSENamesLong(UBound(m_arrTSENamesLong) + 1)
    
    While Not objRecordset.EOF
        
        Me.cmbTSE.AddItem objRecordset("TSE Name Long")
        
        m_arrTSEIDs(UBound(m_arrTSEIDs) - 1) = objRecordset("TSEID")
        
        m_arrTSENamesLong(UBound(m_arrTSENamesLong) - 1) = objRecordset("TSE Name Long")
        
        ReDim Preserve m_arrTSEIDs(UBound(m_arrTSEIDs) + 1)
        ReDim Preserve m_arrTSENamesLong(UBound(m_arrTSENamesLong) + 1)
        
        objRecordset.MoveNext
        
    Wend
    
    objRecordset.Close
        
End Sub







Private Sub UserForm_Activate()
    cmbOfferOrFinal.AddItem "Offer"
    cmbOfferOrFinal.AddItem "Final"
    
    cmbEndUserType.AddItem "Commercial"
    cmbEndUserType.AddItem "Commercial Association"
    cmbEndUserType.AddItem "Commercial |fffd| Global"
    cmbEndUserType.AddItem "Government"
    cmbEndUserType.AddItem "Government Association"
    
    cmbRequest.AddItem "Initial"
    cmbRequest.AddItem "Renewal"
    cmbRequest.AddItem "Upgrade"
    
    cmbResultWinLoss.AddItem "Win"
    cmbResultWinLoss.AddItem "Loss"
    cmbResultWinLoss.AddItem "Still Working/Pending"
    cmbResultWinLoss.AddItem "Cancel"
    cmbResultWinLoss.AddItem "Renewal"
    cmbResultWinLoss.AddItem "Verbal Win"
    cmbResultWinLoss.AddItem "Expired With No Info"
    cmbResultWinLoss.AddItem "Upgrade"
    cmbResultWinLoss.AddItem "Another channel"
    cmbResultWinLoss.AddItem "Lower Category"
     
    'cmbCINCSupport.AddItem "Yes"
    'cmbCINCSupport.AddItem "No"
    
    'cmbTargetAccount.AddItem "Yes"
    'cmbTargetAccount.AddItem "No"
        
    cmbOfferOrFinal.Text = "Offer"
    txtYear.Text = m_nYear
    cmbEndUserType.Text = m_strEndUserType
    txtOfferName.Text = m_strOfferName
        
    txtLastUpdated.Text = Date
    cmbRequest.Text = "Initial"
    cmbResultWinLoss.Text = "Still Working/Pending"
    
    'populate City and State 02-22-2019
    Call PopulateCityAndState
    
    m_bOnLoadFlag = True
    
    PreLoadTSEs
    PreloadValuesForTheExistingOffer m_strOfferName
    
    m_bOnLoadFlag = False
    
End Sub

Private Sub PopulateCityAndState()
    Dim wsCSMP_DF As Worksheet
    
    Set wsCSMP_DF = ThisWorkbook.Sheets("CSMP Detail Form")
    
    If wsCSMP_DF.Range("B19").MergeArea.Columns.count = 1 Then
        
        txtCity.Text = wsCSMP_DF.Range("B19").Value
        txtState.Text = wsCSMP_DF.Range("C19").Value
    End If
End Sub
Attribute VB_Name = "UserFormChannelSelection"
Attribute VB_Base = "0{44AC931F-FCB4-4673-ACC5-08E395699618}{5A609139-4F1D-466E-872E-D8F3E5110A34}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

























Const STR_Desired_Net_Dealer_Cost_before_CWO = "Desired Dealer Net Cost"
Const STR_PRODUCTION_MODELS_SECTION = "PRODUCTION MODELS"

Dim m_strSecondaryMasterFile As String

Private Sub OceButton_Click()

    Dim x As Integer
    Dim i As Integer
    Dim e As Integer
    Dim a As Integer
    
    Dim TotalsRowDigital As Integer
    Dim TotalsRowSoftware As Integer
    Dim TotalsRowFax As Integer
    Dim ItemNumberColumn As Integer
    Dim OCEColumn As Integer
    
    
    ItemNumberColumn = 0
    OCEColumn = 0
    
    ' update macro assigned to TOTALS click
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Digital and Color", "Rectangle 385", "CSMPTotals.CSMPTotals")
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Software", "Rectangle 54", "CSMPTotals.CSMPTotals")
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Fax, Printer, Scanner", "Rectangle 50", "CSMPTotals.CSMPTotals")
    
    'assign macro for UPLOAD button
    Call Utils.AssignMacro2ComplexCell(ActiveWorkbook, "Profit Summary", "WordArt 3", "Utils.UploadOCEtoAccess")
    
    'GoTo FPSLabel
    'Application.ScreenUpdating = False

    UserFormChannelSelection.Hide
        
    'Update Digital and Color Worksheet
    Sheets("Digital and Color").Select

    'Find item number Column
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "Item #" Then ItemNumberColumn = i
        i = i + 1
    Loop
    
    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, ItemNumberColumn).Value = "TOTALS" Then
        TotalsRowDigital = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop
    
    'Delete Non-OCE Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "OCE" Then OCEColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowDigital
    Range("A5").Activate
    If ActiveCell.Offset(i, OCEColumn) = "P" Then
        i = i + 1
        a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
    End If
    Loop
    
    
    'Copy Values only for STD Cost and Dealer Price
    Columns("S:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
        
    'Copy Values only for Total Price
    Columns("AF:AF").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
            
    'Delete Country of Origin and Data to Publish Columns
    Columns("BF:BN").Select
    Selection.Delete Shift:=xlToLeft
    'Delete all columns after total price
    Columns("AG:BC").Select
    Selection.Delete Shift:=xlToLeft


    'Delete install charge through IFF
    Columns("Y:AB").Select
    Selection.Delete Shift:=xlToLeft

    'Delete Deviation Number Column
    Columns("W:W").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete Standard Cost Column
    Columns("Q:R").Select
    Selection.Delete Shift:=xlToLeft

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
    
    'Clear Border
    Range("E1").Select
    Selection.AutoFill Destination:=Range("E1:P1"), Type:=xlFillDefault
    Range("E1:P1").Select
    Selection.Clear
    Range("E1:P1").Select
    With Selection.Interior
        .colorindex = 38
        .Pattern = xlSolid
    End With
        
   'Update the Dealer Plus formula
       
       'Rename "Floor Plus" to "Net Cost before CWO"
        Range("K2").Select
        ActiveCell.FormulaR1C1 = "Net Dealer Cost before CWO"
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        Range("K5").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
            Operator:=xlEqual, Formula1:="=(G5-H5)"
            .IgnoreBlank = False
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = "Invalid Entry"
            .InputMessage = ""
            .ErrorMessage = _
            "Do not adjust this value.  Click 'Cancel' and adjust the Plus % to change the price."
            .ShowInput = False
            .ShowError = True
            End With
        
            ActiveCell.FormulaR1C1 = "=(RC[-4]-RC[-3])"
       
            i = 0
            Do While i < TotalsRowDigital - 3
                Range("K5").Select
                If ActiveCell.Offset(i, -2).Value <> "" Then
                    Range("K5:K5").Select
                    Selection.Copy
                    ActiveCell.Offset(i, 0).Select
                    Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                        SkipBlanks:=False, Transpose:=False
                End If
                i = i + 1
            Loop
             
    'Update the Plus % formula
        
        'Rename "Plus %" to "Discount Ratio"
        Range("I2").Select
        ActiveCell.FormulaR1C1 = "Discount Ratio"
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        Range("I5").Select
        ActiveCell.FormulaR1C1 = "=IF(RC[1]<>"""",(RC[1]/RC[-2])-1,R3C9)"
       
            i = 0
            Do While i < TotalsRowDigital - 3
                Range("I5").Select
                If ActiveCell.Offset(i, -1).Value <> "" Then
                    Range("I5:I5").Select
                    Selection.Copy
                    ActiveCell.Offset(i, 0).Select
                    Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                        SkipBlanks:=False, Transpose:=False
                End If
                i = i + 1
            Loop
             
    'Update CSMP formula
    Range("H5").Select
    ActiveCell.FormulaR1C1 = _
    "=IF(RC[2]<>"""",RC[-1]-RC[2],IF(RC[1]<>0,-(RC[-1]*RC[1]),0))"
       
        i = 0
        Do While i < TotalsRowDigital - 3
            Range("H5").Select
            If ActiveCell.Offset(i, -1).Value <> "" Then
                Range("H5:H5").Select
                Selection.Copy
                ActiveCell.Offset(i, 0).Select
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                    SkipBlanks:=False, Transpose:=False
            End If
            i = i + 1
        Loop
             
        'Undo Desired Price Validations
        Columns("J:J").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
            :=xlBetween
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = False
            .ShowError = False
        End With
        
        'Rename "Desired Price" to "Desired Dealer Cost before CWO"
        Range("J2").Select
        ActiveCell.FormulaR1C1 = STR_Desired_Net_Dealer_Cost_before_CWO
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        Columns("J:J").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
            :=xlBetween
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = False
            .ShowError = False
        End With
             
    
    'Update Total Price formula
    Range("O5").Select
    ActiveCell.FormulaR1C1 = "=RC[-4]-RC[-3]-RC[-2]-RC[-1]"
       
        i = 0
        Do While i < TotalsRowDigital - 3
            Range("O5").Select
            If ActiveCell.Offset(i, -4).Value <> "" Then
                Range("O5:O5").Select
                Selection.Copy
                ActiveCell.Offset(i, 0).Select
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                    SkipBlanks:=False, Transpose:=False
            End If
            i = i + 1
        Loop
    
    'Hide Automatic Credit through Payment Terms Columns
    Columns("L:N").Select
    Selection.EntireColumn.Hidden = True
    Columns("P:P").Select
    Selection.EntireColumn.Hidden = True
    
   
    'Delete Sorting Column
    Columns("A:A").Select
    Selection.Delete Shift:=xlToLeft

    Columns("O:O").Select
    Selection.ColumnWidth = 14
    Columns("I:J").Select
    Selection.ColumnWidth = 14
    Columns("H:H").Select
    Selection.ColumnWidth = 10.5
    
    Columns("D:D").Select
    Selection.NumberFormat = "0"
 
    'Add Sorting to Quantity Column
    Utils.SetFilter "Digital and Color", "D3:D"

    'Move columns to the way CSMP wants them
    Columns("J:O").Select
    Selection.EntireColumn.Hidden = False
    Columns("O:O").Select
    Selection.Cut
    Columns("K:K").Select
    Selection.Insert Shift:=xlToRight
    Columns("P:P").Select
    Selection.Cut
    Columns("J:J").Select
    Selection.Insert Shift:=xlToRight
    Columns("M:O").Select
    Selection.EntireColumn.Hidden = True
    Columns("Q:Q").Select
    Selection.EntireColumn.Hidden = True

    
Range("A1").Select


'Update Software
Sheets("Software").Select

    'Find item number Column
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "Item #" Then ItemNumberColumn = i
        i = i + 1
    Loop
    
    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, ItemNumberColumn).Value = "TOTALS" Then
        TotalsRowSoftware = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop
    
    'Delete Non-Oce Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "OCE" Then OCEColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowSoftware
    Range("A5").Activate
    If ActiveCell.Offset(i, OCEColumn) = "P" Then
        i = i + 1
        a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
    End If
    Loop

    'Delete Country of Origin and Data to Publish Columns
    Columns("AS:BA").Select
    Selection.Delete Shift:=xlToLeft
    
    'Copy Values only for Dealer Price
    Columns("S:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
                
    'Delete all columns after total price
    Columns("AG:AP").Select
    Selection.Delete Shift:=xlToLeft

    'Delete install charge through IFF
    Columns("Y:AB").Select
    Selection.Delete Shift:=xlToLeft

    'Delete Deviation Number Column
    Columns("W:W").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete DP Column
    Columns("Q:R").Select
    Selection.Delete Shift:=xlToLeft

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
    
    'Clear Border
    Range("E1").Select
    Selection.AutoFill Destination:=Range("E1:P1"), Type:=xlFillDefault
    Range("E1:P1").Select
    Selection.Clear
    Range("E1:P1").Select
    With Selection.Interior
        .colorindex = 38
        .Pattern = xlSolid
    End With
        
   'Update the Dealer Plus formula
       
       'Rename "Floor Plus" to "Net Cost before CWO"
        Range("K2").Select
        ActiveCell.FormulaR1C1 = "Net Dealer Cost before CWO"
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        Range("K6").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
            Operator:=xlEqual, Formula1:="=(G6-H6)"
            .IgnoreBlank = False
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = "Invalid Entry"
            .InputMessage = ""
            .ErrorMessage = _
            "Do not adjust this value.  Click 'Cancel' and adjust the Plus % to change the price."
            .ShowInput = False
            .ShowError = True
            End With
        
            ActiveCell.FormulaR1C1 = "=(RC[-4]-RC[-3])"
       
            i = 0
            Do While i < TotalsRowSoftware - 3
                Range("K6").Select
                If ActiveCell.Offset(i, -4).Value <> "" Then
                    Range("K6:K6").Select
                    Selection.Copy
                    ActiveCell.Offset(i, 0).Select
                    Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                        SkipBlanks:=False, Transpose:=False
                End If
                i = i + 1
            Loop
             
    'Update the Plus % formula
        
        'Rename "Plus %" to "Discount Ratio"
        Range("I2").Select
        ActiveCell.FormulaR1C1 = "Discount Ratio"
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
                'update validation to CSMP
                 Columns("I:I").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator _
            :=xlEqual, Formula1:="0"
            .IgnoreBlank = True
            .InCellDropdown = False
            .InputTitle = "NO PERCENTAGE CAN BE APPLIED"
            .ErrorTitle = "Restricted"
            .InputMessage = "Cannot deviate price - must use CSMP Published Purchase Price. "
            .ErrorMessage = "Cannot deviate price.  Only a value of 0% will be accepted."
            .ShowInput = True
            .ShowError = True
        End With
                        
        Range("I6").Select
        ActiveCell.FormulaR1C1 = "=IF(RC[1]<>"""",(RC[1]/RC[-2])-1,R3C9)"
       
            i = 0
            Do While i < TotalsRowSoftware - 3
                Range("I6").Select
                If ActiveCell.Offset(i, -1).Value <> "" Then
                    Range("I6:I6").Select
                    Selection.Copy
                    ActiveCell.Offset(i, 0).Select
                    Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                        SkipBlanks:=False, Transpose:=False
                End If
                i = i + 1
            Loop
             
    'Update CSMP formula
    Range("H6").Select
    ActiveCell.FormulaR1C1 = _
    "=IF(RC[2]<>"""",RC[-1]-RC[2],IF(RC[1]<>0,-(RC[-1]*RC[1]),0))"
       
        i = 0
        Do While i < TotalsRowSoftware - 3
            Range("H6").Select
            If ActiveCell.Offset(i, -1).Value <> "" Then
                Range("H6:H6").Select
                Selection.Copy
                ActiveCell.Offset(i, 0).Select
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                    SkipBlanks:=False, Transpose:=False
            End If
            i = i + 1
        Loop
             
        'Undo Desired Price Validations
        Columns("J:J").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
            :=xlBetween
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = False
            .ShowError = False
        End With
        
        'Rename "Desired Price" to "Desired Dealer Cost before CWO"
        Range("J2").Select
        ActiveCell.FormulaR1C1 = STR_Desired_Net_Dealer_Cost_before_CWO
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        Columns("J:J").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
            :=xlBetween
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = False
            .ShowError = False
        End With
             
    
    'Update Total Price formula
    Range("O6").Select
    ActiveCell.FormulaR1C1 = "=RC[-4]-RC[-3]-RC[-2]-RC[-1]"
       
        i = 0
        Do While i < TotalsRowSoftware - 3
            Range("O6").Select
            If ActiveCell.Offset(i, -4).Value <> "" Then
                Range("O6:O6").Select
                Selection.Copy
                ActiveCell.Offset(i, 0).Select
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                    SkipBlanks:=False, Transpose:=False
            End If
            i = i + 1
        Loop
    
    'Hide Automatic Credit through Payment Terms Columns
    Columns("L:N").Select
    Selection.EntireColumn.Hidden = True
    Columns("P:P").Select
    Selection.EntireColumn.Hidden = True
    
    Columns("E:E").Select
    Selection.NumberFormat = "0"
    
    'Delete Sorting Column
    Columns("A:A").Select
    Selection.Delete Shift:=xlToLeft
    
    'Add Sorting to Quantity Column
    Range("D3:D327").Select
    Selection.AutoFilter

    Columns("O:O").Select
    Selection.ColumnWidth = 14
    Columns("I:J").Select
    Selection.ColumnWidth = 14
    Columns("H:H").Select
    Selection.ColumnWidth = 10.5
    
    Columns("D:D").Select
    Selection.NumberFormat = "0"

    'Move columns to the way CSMP wants them
    Columns("J:O").Select
    Selection.EntireColumn.Hidden = False
    Columns("O:O").Select
    Selection.Cut
    Columns("K:K").Select
    Selection.Insert Shift:=xlToRight
    Columns("P:P").Select
    Selection.Cut
    Columns("J:J").Select
    Selection.Insert Shift:=xlToRight
    Columns("M:O").Select
    Selection.EntireColumn.Hidden = True
    Columns("Q:Q").Select
    Selection.EntireColumn.Hidden = True
    

Range("A1").Select
FPSLabel:
'Update FPS
Sheets("Fax, Printer, Scanner").Select

    'Find item number Column
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "Item #" Then ItemNumberColumn = i
        i = i + 1
    Loop
    
    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, ItemNumberColumn).Value = "TOTALS" Then
        TotalsRowFax = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop
    
    'Delete Non-Oce Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "OCE" Then OCEColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowFax
    Range("A5").Activate
    If ActiveCell.Offset(i, OCEColumn) = "P" Then
        i = i + 1
        a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
    End If
    Loop
        
    'Copy Values only for STD Cost and Dealer Price
    Columns("S:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    'Delete Country of Origin and Data to Publish Columns
    Columns("AT:BB").Select
    Selection.Delete Shift:=xlToLeft
               
    'Delete all columns after total price
    Columns("AG:AQ").Select
    Selection.Delete Shift:=xlToLeft

    'Delete install charge through IFF
    Columns("Y:AB").Select
    Selection.Delete Shift:=xlToLeft

    'Delete Deviation Number Column
    Columns("W:W").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete Standard Cost Column
    Columns("Q:R").Select
    Selection.Delete Shift:=xlToLeft

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
    
    'Clear Border
    Range("E1").Select
    Selection.AutoFill Destination:=Range("E1:Q1"), Type:=xlFillDefault
    Range("E1:Q1").Select
    Selection.Clear
    Range("E1:Q1").Select
    With Selection.Interior
        .colorindex = 38
        .Pattern = xlSolid
    End With
        
   'Update the Dealer Plus formula
       
       'Rename "Floor Plus" to "Net Cost before CWO"
        Range("K2").Select
        ActiveCell.FormulaR1C1 = "Net Dealer Cost before CWO"
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        'BUG - Incorrect operations at this point forward
        'Should determine totals column AFTER non-Oce items are removed
        Range("K5").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
            Operator:=xlEqual, Formula1:="=(G5-H5)"
            .IgnoreBlank = False
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = "Invalid Entry"
            .InputMessage = ""
            .ErrorMessage = _
            "Do not adjust this value.  Click 'Cancel' and adjust the Plus % to change the price."
            .ShowInput = False
            .ShowError = True
            End With
        
            ActiveCell.FormulaR1C1 = "=(RC[-4]-RC[-3])"
       
            i = 0
            Do While i < TotalsRowFax - 3
                Range("K5").Select
                If ActiveCell.Offset(i, -2).Value <> "" Then
                    Range("K5:K5").Select
                    Selection.Copy
                    ActiveCell.Offset(i, 0).Select
                    Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                        SkipBlanks:=False, Transpose:=False
                End If
                i = i + 1
            Loop
             
    'Update the Plus % formula
        
        'Rename "Plus %" to "Discount Ratio"
        Range("I2").Select
        ActiveCell.FormulaR1C1 = "Discount Ratio"
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        Range("I5").Select
        ActiveCell.FormulaR1C1 = "=IF(RC[1]<>"""",(RC[1]/RC[-2])-1,R3C9)"
       
            i = 0
            Do While i < TotalsRowFax - 3
                Range("I5").Select
                If ActiveCell.Offset(i, -1).Value <> "" Then
                    Range("I5:I5").Select
                    Selection.Copy
                    ActiveCell.Offset(i, 0).Select
                    Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                        SkipBlanks:=False, Transpose:=False
                End If
                i = i + 1
            Loop
             
    'Update CSMP formula
    Range("H5").Select
    ActiveCell.FormulaR1C1 = _
    "=IF(RC[2]<>"""",RC[-1]-RC[2],IF(RC[1]<>0,-(RC[-1]*RC[1]),0))"
       
        i = 0
        Do While i < TotalsRowDigital - 3
            Range("H5").Select
            If ActiveCell.Offset(i, -1).Value <> "" Then
                Range("H5:H5").Select
                Selection.Copy
                ActiveCell.Offset(i, 0).Select
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                    SkipBlanks:=False, Transpose:=False
            End If
            i = i + 1
        Loop
             
        'Undo Desired Price Validations
        Columns("J:J").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
            :=xlBetween
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = False
            .ShowError = False
        End With
        
        'Rename "Desired Price" to "Desired Dealer Cost before CWO"
        Range("J2").Select
        ActiveCell.FormulaR1C1 = STR_Desired_Net_Dealer_Cost_before_CWO
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        Columns("J:J").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
            :=xlBetween
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = False
            .ShowError = False
        End With
             
    
    'Update Total Price formula
    Range("O5").Select
    ActiveCell.FormulaR1C1 = "=RC[-4]-RC[-3]-RC[-2]-RC[-1]"
       
        i = 0
        Do While i < TotalsRowFax - 3
            Range("O5").Select
            If ActiveCell.Offset(i, -4).Value <> "" Then
                Range("O5:O5").Select
                Selection.Copy
                ActiveCell.Offset(i, 0).Select
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                    SkipBlanks:=False, Transpose:=False
            End If
            i = i + 1
        Loop
    
    'Hide Automatic Credit through Payment Terms Columns
    Columns("L:N").Select
    Selection.EntireColumn.Hidden = True
    Columns("P:P").Select
    Selection.EntireColumn.Hidden = True
    
    Columns("E:E").Select
    Selection.NumberFormat = "0"
    
    'Delete Sorting Column
    Columns("A:A").Select
    Selection.Delete Shift:=xlToLeft
    
    'Add Sorting to Quantity Column
    Range("D3:D87").Select
    Selection.AutoFilter

    Columns("O:O").Select
    Selection.ColumnWidth = 14
    Columns("I:J").Select
    Selection.ColumnWidth = 14
    Columns("H:H").Select
    Selection.ColumnWidth = 10.5
    
    Columns("D:D").Select
    Selection.NumberFormat = "0"

    'Move columns to the way CSMP wants them
    Columns("J:O").Select
    Selection.EntireColumn.Hidden = False
    Columns("O:O").Select
    Selection.Cut
    Columns("K:K").Select
    Selection.Insert Shift:=xlToRight
    Columns("P:P").Select
    Selection.Cut
    Columns("J:J").Select
    Selection.Insert Shift:=xlToRight
    Columns("M:O").Select
    Selection.EntireColumn.Hidden = True
    Columns("Q:Q").Select
    Selection.EntireColumn.Hidden = True

    Range("A1").Select
        
    'Delete unwanted worksheets
    Sheets("NAD Request").Select
    ActiveWindow.ScrollWorkbookTabs Position:=xlLast
    Sheets(Array("NAD Request", "FM Request", "NAD Proposal Template", "FTR", _
        "Federal Request", "CFS Sheet", _
        "Credit Card - Lease", "Credit Card - Purchase", _
        "Credit Card - Maintenance", "PAR Approval for Dealer Templat", _
        "Dealer FM Request", "FED Profit Summary", "Fed Proposal Template", "CSMP Detail Form", _
        "Legacy Maintenance PAR", "HP Request")).Select
    Sheets("PAR Approval for Dealer Templat").Activate
    ActiveWindow.SelectedSheets.Delete
    
    'Update Profit Summary
    Sheets("Profit Summary").Select
    Range("E3").FormulaR1C1 = "='Oc|fffd| Detail Form'!R[22]C[1]"
    Range("D3:E3").Select
    Range("D3:E3").Cut Destination:=Range("D2:E2")
    Range("B41:E47").FormulaR1C1 = "='Oc|fffd| Detail Form'!R[25]C[-1]"
    Range("A1:A1").Formula = "='Oc|fffd| Detail Form'!$B$15"
        
    'Deep hide data sheets
    Dim strWorksheetsToHide(4) As String
    strWorksheetsToHide(1) = "Digital and Color"
    strWorksheetsToHide(2) = "Software"
    strWorksheetsToHide(3) = "Fax, Printer, Scanner"
    strWorksheetsToHide(4) = "Profit Summary"
    
    Call SetVisibilityOfWorksheets(strWorksheetsToHide, xlSheetHidden)
    
    Sheets(strWorksheetsToHide(4)).Visible = xlSheetVeryHidden
    
    'Sheets(Array("Digital and Color", "Software", "Fax, Printer, Scanner", "Profit Summary")).Select
    'ActiveWindow.SelectedSheets.Visible = False
            
    Application.ScreenUpdating = True
    
    'Remove unused objects
    Dim strAvoidances(5) As String
    Dim nTemp As Integer
    
    strAvoidances(1) = "Oc|fffd|"
    strAvoidances(2) = "RemoveModules"
    strAvoidances(3) = "UserFormChannelSelection"
    strAvoidances(4) = "Util"
    strAvoidances(5) = "CSMP"
        
    nTemp = RemoveModules.RemoveModules(strAvoidances)
     
    ' Update Add-ins menu
    Call Utils.SetMenuBar("Call Utils.AddAddIn2menuBar(""Version"", ""Utils.GetVersion""):Call Utils.AddAddIn2menuBar(""Copy Landed Cost"", ""Utils.CopyOCELandedCost""):Call Utils.AddAddIn2menuBar(""Calculations"", ""CSMPCalculations.CSMPCalculations""):Call Utils.AddAddIn2menuBar(""Unprotect Worksheets"", ""Utils.UnprotectDataWorksheets"")", _
                           "Call Utils.RemoveAddInFromMenuBar(""Version""):Call Utils.RemoveAddInFromMenuBar(""Copy Landed Cost""):Call Utils.RemoveAddInFromMenuBar(""Calculations""):Call Utils.RemoveAddInFromMenuBar(""Unprotect Worksheets"")")
    
    Call Utils.GenericSpecialValues(ActiveWorkbook, "OCE", "C", "E")
    
    ' Finalize Oce split
    Call EndOfProcess("Oc|fffd|", "")

End Sub

Private Sub ClearRowFormulas(strWorksheetName As String, nRowIndex As Integer)
        Dim nLastColIndex As Integer
        Dim varValue
                
        nLastColIndex = Utils.FindLastColIndex(Sheets(strWorksheetName), 2, 2)
        
        For i = 1 To nLastColIndex
            If Sheets(strWorksheetName).Cells(nRowIndex, i).Formula <> "" Then
                varValue = Sheets(strWorksheetName).Cells(nRowIndex, i).Value
                Sheets(strWorksheetName).Cells(nRowIndex, i).Formula = ""
                
                Sheets(strWorksheetName).Cells(nRowIndex, i).Value = varValue
            End If
        Next
End Sub

Private Function EndOfProcess(strProcessName As String, strLastColumnCaption As String)

    Dim strMasterWorkbookPath As String
    
    Call Utils.ClearNumberOfUnitsColumnAllDataSheets(ActiveWorkbook)
        
    strMasterWorkbookPath = ActiveWorkbook.Path & "\" & ActiveWorkbook.Name
     
    'generate new file name: <> pricing workbook 04.01.11.xlsm
    Dim strDatePart As String
    Dim myRegExp As RegExp
    Dim myMatches As MatchCollection
    Dim myMatch As Match

    strg = ActiveWorkbook.Name

    Set myRegExp = New RegExp
    myRegExp.IgnoreCase = True
    myRegExp.Global = True
    myRegExp.Pattern = "\d{2}\.\d{2}\.\d{2}"
    Set myMatches = myRegExp.Execute(strg)
    
    If myMatches.count = 0 Then
        strDatePart = ""
    Else
        strDatePart = myMatches(0).Value
    End If

    Set myRegExp = Nothing

    'make ActiveWorkbook.Sheets("Special Values") very hidden
    ActiveWorkbook.Sheets("Special Values").Visible = 2

    Call ActiveWorkbook.SaveAs(ActiveWorkbook.Path & "\" & strProcessName & " Pricing Workbook " & strDatePart & ".xlsm")
    
    'MsgBox "Creating " & strProcessName & " Landed Cost File."
    
    Dim wbSplitted As Workbook
    Dim wbMaster As Workbook
    
    Set wbSplitted = ActiveWorkbook
     
    Set wbMaster = Workbooks.Open(strMasterWorkbookPath, 0) 'don't update links
    
    wbMaster.Activate
    
    If strProcessName = "Federal" Then
        Call Utils.CreateLandedCostFederal(wbMaster, wbSplitted, True)
        Call Utils.CreateLandedCostFederal(wbMaster, wbSplitted, False)
    ElseIf strProcessName = "CSMP" Then
        Dim strPrimaryLandedCostFile As String
        
        strPrimaryLandedCostFile = Utils.CreateGenericLandedCostWorksheet(wbMaster, wbSplitted, strProcessName, strLastColumnCaption)
        
        Utils.PrintDbgMsg "CSMP strPrimaryLandedCostFile: " & strPrimaryLandedCostFile
        
        Dim wbLandedCost As Workbook
        
        Set wbLandedCost = Workbooks.Open(strPrimaryLandedCostFile, 0)  'don't update links
        
        Utils.PrintDbgMsg "wbLandedCost.Name = " & wbLandedCost.Name & " wbLandedCost.Sheets.count  = " & CStr(wbLandedCost.Sheets.count)
                    
        Call wbSplitted.Sheets(Utils.STR_PRODUCT_GROUP_DISCOUNTS_WORKSHEET).Copy(wbLandedCost.Sheets(1))
        
        Utils.PrintDbgMsg "After copying. wbLandedCost.Name = " & wbLandedCost.Name & " wbLandedCost.Sheets.count  = " & CStr(wbLandedCost.Sheets.count)
        
        wbLandedCost.Close True
        
        If m_strSecondaryMasterFile <> "False" Then
            Call Utils.CreateSecondaryLandedCostForCSMP(strPrimaryLandedCostFile, m_strSecondaryMasterFile)
        End If
    Else
        Call Utils.CreateGenericLandedCostWorksheet(wbMaster, wbSplitted, strProcessName, strLastColumnCaption)
    End If
    
    'Utils.PrintDbgMsg "Before final removal of the Footnotes and PTP Group columns. 1"
    
    Dim strWorksheetsToHide(3) As String
    strWorksheetsToHide(0) = Utils.STR_DIGITAL_COLOR_WORKSHEET
    strWorksheetsToHide(1) = Utils.STR_SOFTWARE_WORKSHEET
    strWorksheetsToHide(2) = Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET
    
    'remove the Footnotes column
    Dim x As Integer
    Dim nFootnotesColumnIndex As Integer
    Dim wsTemp As Worksheet
    
    wbSplitted.Activate
    
    Call Utils.ProtectWorksheets(False, Utils.STR_DEFAULT_PASSWORD, strWorksheetsToHide)
    
    For x = 0 To 2
        'Utils.PrintDbgMsg "Before final removal of the Footnotes and PTP Group columns. In loop 2"
        
        Set wsTemp = wbSplitted.Sheets(strWorksheetsToHide(x))
        
        'Utils.PrintDbgMsg "Before final removal of the Footnotes and PTP Group columns. In loop 2a"
            
        'delete the Product Group column (02-28-2017)
        DeleteProductGroupColumn wsTemp

        'Utils.PrintDbgMsg "Before final removal of the Footnotes and PTP Group columns. In loop 2b"
        
        nFootnotesColumnIndex = Utils.ColIndexExactMatch(wsTemp, "Footnotes", 2)
        
        'Utils.PrintDbgMsg "Before final removal of the Footnotes and PTP Group columns. In loop 2c"
        
        If nFootnotesColumnIndex <> 0 Then
            'Utils.PrintDbgMsg "Before final removal of the Footnotes and PTP Group columns. (nFootnotesColumnIndex = " & CStr(nFootnotesColumnIndex) & ") In loop 2d"
            
            Dim strRange0 As String
            'Dim rgTemp1 As Range
            
            strRange0 = Utils.IndexToLetter(CLng(nFootnotesColumnIndex)) & "1"
            
            'Utils.PrintDbgMsg "Before final removal of the Footnotes and PTP Group columns. (strRange0 = " & strRange0 & ") In loop 2d0"
            
            'Utils.PrintDbgMsg "Before final removal of the Footnotes and PTP Group columns. (rgTemp1.Address = " & rgTemp1.Address & ") In loop 2d1"
            
            wsTemp.Range(strRange0).EntireColumn.Delete xlLeft
        End If
        
    Next x
    
    Utils.PrintDbgMsg "Before final removal of the Footnotes and PTP Group columns. After loop 3"
    
    Application.DisplayAlerts = False
    'delete the Product Group Discounts worksheet (02-28-2017)
    wbSplitted.Sheets(Utils.STR_PRODUCT_GROUP_DISCOUNTS_WORKSHEET).Delete
    wbSplitted.Sheets("GSA Promotional Pricing").Visible = xlSheetVeryHidden
    
    Application.DisplayAlerts = True
    
    wbSplitted.Save
    
    wbMaster.Close SaveChanges:=False
    
    Application.ScreenUpdating = True
    
    MsgBox strProcessName & " book splitted and Landed Cost File created successfully!!!"

End Function

Private Sub DeleteProductGroupColumn(wsCurrent As Worksheet)
    Dim intColumnIndex As Integer
    
    intColumnIndex = Utils.ColIndexExactMatch(wsCurrent, Utils.STR_COLUMN_NAME_PRODUCT_GROUP, 2)
    
    'Utils.PrintDbgMsg "wsCurrent.name = " & wsCurrent.Name & " intColumnIndex = " & CStr(intColumnIndex)
    
    If intColumnIndex <> 0 Then
        wsCurrent.Range(Utils.IndexToLetter(CLng(intColumnIndex)) & "1").EntireColumn.Delete xlLeft
    End If
End Sub

Private Function ReminderToSaveBackup()
    
    If MsgBox("Please, back up the book.", vbYesNo, "Reminder") = vbYes Then
        ReminderToSaveBackup = True
        Exit Function
    End If
    
    ReminderToSaveBackup = False
End Function

Private Sub CSMPButton_Click()

If ReminderToSaveBackup = True Then Exit Sub

PrintDbgMsg "CSMPButton_Click started: " & Now

Dim x As Integer
Dim i As Integer
Dim e As Integer
Dim a As Integer

Dim TotalsRowDigital As Integer
Dim TotalsRowSoftware As Integer
Dim TotalsRowFax As Integer
Dim ItemNumberColumn As Integer
Dim CSMPColumn As Integer

Dim wsCurrent As Worksheet

ItemNumberColumn = 0
CSMPColumn = 0

m_strSecondaryMasterFile = ""

'm_strSecondaryMasterFile = OpenFileDialog("All Files (*.*), *.*, " & _
'                                   "Excel files (*.xls; *.xlsx; *.xlsm), *.xls;*.xlsx;*.xlsm", "Select Secondary Master file location")
'
'If m_strSecondaryMasterFile = "False" Then
'    MsgBox "Secondary Master file is not selected. No secondary Landed Cost file will be created."
'End If
   
m_strSecondaryMasterFile = "False"

' update macro assigned to TOTALS click
Call Utils.AssignMacro2Cell(ActiveWorkbook, "Digital and Color", "Rectangle 385", "CSMPTotals.CSMPTotals")
Call Utils.AssignMacro2Cell(ActiveWorkbook, "Software", "Rectangle 54", "CSMPTotals.CSMPTotals")
Call Utils.AssignMacro2Cell(ActiveWorkbook, "Fax, Printer, Scanner", "Rectangle 50", "CSMPTotals.CSMPTotals")

Application.ScreenUpdating = False
    
UserFormChannelSelection.Hide

'Automatic Credit column update Formula to Value
Utils.AutomaticCreditColumnUpdateFormulaToValue ActiveWorkbook
    
'Update Digital Worksheet

    Set wsCurrent = ActiveWorkbook.Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET)

    ItemNumberColumn = Utils.ColIndexExactMatch(wsCurrent, "Item #", 2)
    
    CSMPColumn = Utils.ColIndexExactMatch(wsCurrent, "CSMP", 2)
    
    TotalsRowDigital = Utils.RowsToScan(wsCurrent, "TOTALS", ItemNumberColumn)
    
    wsCurrent.Select
    
    i = 0
    a = 0
    Do While a < TotalsRowDigital
        If wsCurrent.Cells(i + 5, CSMPColumn).Value = "P" Then
            i = i + 1
        Else
            wsCurrent.Rows(i + 5).Delete Shift:=xlUp
        End If

        a = a + 1
    Loop
    
    PrintDbgMsg "CSMPButton CSMP column - " & CStr(CSMPColumn)
    
    PrintDbgMsg "CSMPButton Totals Row: Old - " & CStr(TotalsRowDigital) & "; New - " & CStr(i + 5)
    
    'adjust for removed rows
    TotalsRowDigital = i + 5
    
    'Copy Values only for STD Cost and Dealer Price
    Columns("S:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
        
    'Copy Values only for Total Price
    Columns("AF:AF").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
            
    'Delete Country of Origin and Data to Publish Columns
    '06-16-2011 remove Oce column
    Columns("BF:BN").Select
    Selection.Delete Shift:=xlToLeft
    'Delete all columns after total price
    Columns("AG:BC").Select
    Selection.Delete Shift:=xlToLeft


    'Delete install charge through IFF
    Columns("Y:AB").Select
    Selection.Delete Shift:=xlToLeft

    'Delete Deviation Number Column
    Columns("W:W").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete Standard Cost Column
    Columns("Q:R").Select
    Selection.Delete Shift:=xlToLeft

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
    
    'Clear Border
    Range("E1").Select
    Selection.AutoFill Destination:=Range("E1:P1"), Type:=xlFillDefault
    Range("E1:P1").Select
    Selection.Clear
    Range("E1:P1").Select
    With Selection.Interior
        .colorindex = 38
        .Pattern = xlSolid
    End With
        
    Dim strFormulaK5 As String
    Dim strFormulaI5 As String
    Dim strFormulaH5 As String
    Dim strFormulaO5 As String
    
   'Update the Dealer Plus formula
       
       'Rename "Floor Plus" to "Net Cost before CWO"
        Range("K2").Select
        ActiveCell.FormulaR1C1 = "Net Dealer Cost before CWO"
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        Range("K5").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
            Operator:=xlEqual, Formula1:="=(G5-H5)"
            .IgnoreBlank = False
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = "Invalid Entry"
            .InputMessage = ""
            .ErrorMessage = _
            "Do not adjust this value.  Click 'Cancel' and adjust the Plus % to change the price."
            .ShowInput = False
            .ShowError = True
            End With
        
            ActiveCell.FormulaR1C1 = "=(RC[-4]-RC[-3])"
       
            strFormulaK5 = Range("K5").Formula
                    
    'Update the Plus % formula
        
        'Rename "Plus %" to "Discount Ratio"
        Range("I2").Select
        ActiveCell.FormulaR1C1 = "Discount Ratio"
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        Range("I5").Select
        ActiveCell.FormulaR1C1 = "=IF(RC[1]<>"""",(RC[1]/RC[-2])-1,R3C9)"
       
        strFormulaI5 = Range("I5").Formula
             
    'Update CSMP formula
    Range("H5").Select
    ActiveCell.FormulaR1C1 = _
    "=IF(RC[2]<>"""",RC[-1]-RC[2],IF(RC[1]<>0,-(RC[-1]*RC[1]),0))"
       
    strFormulaH5 = Range("H5").Formula
    
        'Undo Desired Price Validations
        Columns("J:J").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
            :=xlBetween
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = False
            .ShowError = False
        End With
        
        'Rename "Desired Price" to "Desired Dealer Cost before CWO"
        Range("J2").Select
        ActiveCell.FormulaR1C1 = STR_Desired_Net_Dealer_Cost_before_CWO
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        Columns("J:J").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
            :=xlBetween
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = False
            .ShowError = False
        End With
             
    
    'Update Total Price formula
    Range("O5").Select
    ActiveCell.FormulaR1C1 = "=RC[-4]-RC[-3]-RC[-2]-RC[-1]"
       
    strFormulaO5 = Range("O5").Formula
    
    i = 5
    Do While i < TotalsRowDigital
    
        If CStr(wsCurrent.Cells(i, 9).Value) <> "" Then wsCurrent.Cells(i, 11).Formula = Replace(strFormulaK5, "5", CStr(i), , , 1)
        
        If CStr(wsCurrent.Cells(i, 8).Value) <> "" Then wsCurrent.Cells(i, 9).Formula = Replace(strFormulaI5, "5", CStr(i), , , 1)
        
        If CStr(wsCurrent.Cells(i, 7).Value) <> "" Then wsCurrent.Cells(i, 8).Formula = Replace(strFormulaH5, "5", CStr(i), , , 1)
        
        If CStr(wsCurrent.Cells(i, 11).Value) <> "" Then wsCurrent.Cells(i, 15).Formula = Replace(strFormulaO5, "5", CStr(i), , , 1)
        
        i = i + 1
    Loop
    
    'Hide Automatic Credit through Payment Terms Columns
    Columns("L:N").Select
    Selection.EntireColumn.Hidden = True
    Columns("P:P").Select
    Selection.EntireColumn.Hidden = True
    
   
    'Delete Sorting Column
    Columns("A:A").Select
    Selection.Delete Shift:=xlToLeft

    Columns("O:O").Select
    Selection.ColumnWidth = 14
    Columns("I:J").Select
    Selection.ColumnWidth = 14
    Columns("H:H").Select
    Selection.ColumnWidth = 10.5
    
    Columns("D:D").Select
    Selection.NumberFormat = "0"
 
    'Add Sorting to Quantity Column
    Utils.SetFilter "Digital and Color", "D3:D"

    'Move columns to the way CSMP wants them
    Columns("J:O").Select
    Selection.EntireColumn.Hidden = False
    Columns("O:O").Select
    Selection.Cut
    Columns("K:K").Select
    Selection.Insert Shift:=xlToRight
    Columns("P:P").Select
    Selection.Cut
    Columns("J:J").Select
    Selection.Insert Shift:=xlToRight
    Columns("M:O").Select
    Selection.EntireColumn.Hidden = True
    Columns("Q:Q").Select
    Selection.EntireColumn.Hidden = True

    
Range("A1").Select


'Update Software
Sheets("Software").Select

    Set wsCurrent = ActiveWorkbook.Sheets(Utils.STR_SOFTWARE_WORKSHEET)
    
    ItemNumberColumn = Utils.ColIndexExactMatch(wsCurrent, "Item #", 2)
    
    CSMPColumn = Utils.ColIndexExactMatch(wsCurrent, "CSMP", 2)
    
    TotalsRowSoftware = Utils.RowsToScan(wsCurrent, "TOTALS", ItemNumberColumn)
    
    wsCurrent.Select
    
    i = 0
    a = 0
    Do While a < TotalsRowSoftware
        If wsCurrent.Cells(i + 5, CSMPColumn).Value = "P" Then
            i = i + 1
        Else
            wsCurrent.Rows(i + 5).Delete Shift:=xlUp
        End If

        a = a + 1
    Loop
    
    'adjust for removed rows
    TotalsRowSoftware = i + 5
    
    'Delete Country of Origin and Data to Publish Columns
    '06-16-2011 remove Oce column
    Columns("AS:BA").Select
    Selection.Delete Shift:=xlToLeft
    
    'Copy Values only for Dealer Price
    Columns("S:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
                
    'Delete all columns after total price
    Columns("AG:AP").Select
    Selection.Delete Shift:=xlToLeft

    'Delete install charge through IFF
    Columns("Y:AB").Select
    Selection.Delete Shift:=xlToLeft

    'Delete Deviation Number Column
    Columns("W:W").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete DP Column
    Columns("Q:r").Select
    Selection.Delete Shift:=xlToLeft

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
    
    'Clear Border
    Range("E1").Select
    Selection.AutoFill Destination:=Range("E1:P1"), Type:=xlFillDefault
    Range("E1:P1").Select
    Selection.Clear
    Range("E1:P1").Select
    With Selection.Interior
        .colorindex = 38
        .Pattern = xlSolid
    End With
        
   'Update the Dealer Plus formula
       
       'Rename "Floor Plus" to "Net Cost before CWO"
        Range("K2").Select
        ActiveCell.FormulaR1C1 = "Net Dealer Cost before CWO"
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        Range("K6").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
            Operator:=xlEqual, Formula1:="=(G6-H6)"
            .IgnoreBlank = False
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = "Invalid Entry"
            .InputMessage = ""
            .ErrorMessage = _
            "Do not adjust this value.  Click 'Cancel' and adjust the Plus % to change the price."
            .ShowInput = False
            .ShowError = True
            End With
        
            ActiveCell.FormulaR1C1 = "=(RC[-4]-RC[-3])"
       
            strFormulaK5 = Range("K6").Formula

    'Update the Plus % formula
        
        'Rename "Plus %" to "Discount Ratio"
        Range("I2").Select
        ActiveCell.FormulaR1C1 = "Discount Ratio"
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        'don't need this code anymore 07-16-2014
        'update validation to CSMP
        ' Columns("I:I").Select
        'With Selection.Validation
        '    .Delete
        '    .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator _
        '    :=xlEqual, Formula1:="0"
        '    .IgnoreBlank = True
        '    .InCellDropdown = False
        '    .InputTitle = "NO PERCENTAGE CAN BE APPLIED"
        '    .ErrorTitle = "Restricted"
        '    .InputMessage = "Cannot deviate price - must use CSMP Published Purchase Price. "
        '    .ErrorMessage = "Cannot deviate price.  Only a value of 0% will be accepted."
        '    .ShowInput = True
        '    .ShowError = True
        'End With
                
        Range("I6").Select
        ActiveCell.FormulaR1C1 = "=IF(RC[1]<>"""",(RC[1]/RC[-2])-1,R3C9)"
       
        strFormulaI5 = Range("I6").Formula
     
    'Update CSMP formula
    Range("H6").Select
    ActiveCell.FormulaR1C1 = _
    "=IF(RC[2]<>"""",RC[-1]-RC[2],IF(RC[1]<>0,-(RC[-1]*RC[1]),0))"
       
    strFormulaH5 = Range("H6").Formula
                 
        'Undo Desired Price Validations
        Columns("J:J").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
            :=xlBetween
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = False
            .ShowError = False
        End With
        
        'Rename "Desired Price" to "Desired Dealer Cost before CWO"
        Range("J2").Select
        ActiveCell.FormulaR1C1 = STR_Desired_Net_Dealer_Cost_before_CWO
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        Columns("J:J").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
            :=xlBetween
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = False
            .ShowError = False
        End With
             
    
    'Update Total Price formula
    Range("O6").Select
    ActiveCell.FormulaR1C1 = "=RC[-4]-RC[-3]-RC[-2]-RC[-1]"
       
    strFormulaO5 = Range("O6").Formula
    
    i = 6
    Do While i < TotalsRowSoftware
    
        If CStr(wsCurrent.Cells(i, 7).Value) <> "" Then wsCurrent.Cells(i, 11).Formula = Replace(strFormulaK5, "6", CStr(i), , , 1)
        
        If CStr(wsCurrent.Cells(i, 8).Value) <> "" Then wsCurrent.Cells(i, 9).Formula = Replace(strFormulaI5, "6", CStr(i), , , 1)
        
        If CStr(wsCurrent.Cells(i, 7).Value) <> "" Then wsCurrent.Cells(i, 8).Formula = Replace(strFormulaH5, "6", CStr(i), , , 1)
        
        If CStr(wsCurrent.Cells(i, 11).Value) <> "" Then wsCurrent.Cells(i, 15).Formula = Replace(strFormulaO5, "6", CStr(i), , , 1)
        
        i = i + 1
    Loop
    
    'Hide Automatic Credit through Payment Terms Columns
    Columns("L:N").Select
    Selection.EntireColumn.Hidden = True
    Columns("P:P").Select
    Selection.EntireColumn.Hidden = True
    
    Columns("E:E").Select
    Selection.NumberFormat = "0"
    
    'Delete Sorting Column
    Columns("A:A").Select
    Selection.Delete Shift:=xlToLeft
    
    'Add Sorting to Quantity Column
    Utils.SetFilter "Software", "D3:D"

    Columns("O:O").Select
    Selection.ColumnWidth = 14
    Columns("I:J").Select
    Selection.ColumnWidth = 14
    Columns("H:H").Select
    Selection.ColumnWidth = 10.5
    
    Columns("D:D").Select
    Selection.NumberFormat = "0"

    'Move columns to the way CSMP wants them
    Columns("J:O").Select
    Selection.EntireColumn.Hidden = False
    Columns("O:O").Select
    Selection.Cut
    Columns("K:K").Select
    Selection.Insert Shift:=xlToRight
    Columns("P:P").Select
    Selection.Cut
    Columns("J:J").Select
    Selection.Insert Shift:=xlToRight
    Columns("M:O").Select
    Selection.EntireColumn.Hidden = True
    Columns("Q:Q").Select
    Selection.EntireColumn.Hidden = True
    
    'make sure no validation in H column 07-16-2014
    Columns("H:H").Select
    Selection.Validation.Delete
    
Range("A1").Select

'Update FPS
Sheets("Fax, Printer, Scanner").Select

    Set wsCurrent = ActiveWorkbook.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET)
    
    ItemNumberColumn = Utils.ColIndexExactMatch(wsCurrent, "Item #", 2)
    
    CSMPColumn = Utils.ColIndexExactMatch(wsCurrent, "CSMP", 2)
    
    TotalsRowFax = Utils.RowsToScan(wsCurrent, "TOTALS", ItemNumberColumn)
    
    wsCurrent.Select
    
    PrintDbgMsg "Start deleting rows in Fax, Printer, Scanner in CSMPButton_Click at " & Now
    
    i = 0
    a = 0
    Do While a < TotalsRowFax
        If wsCurrent.Cells(i + 5, CSMPColumn).Value = "P" Then
            i = i + 1
        Else
            wsCurrent.Rows(i + 5).Delete Shift:=xlUp
        End If
    
        a = a + 1
    Loop
        
    PrintDbgMsg "End deleting rows in Fax, Printer, Scanner in CSMPButton_Click at " & Now
    
    'adjust for removed rows
    TotalsRowFax = i + 5
    
    'Copy Values only for STD Cost and Dealer Price
    Columns("S:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    'Delete Country of Origin and Data to Publish Columns
    '06-16-2011 remove Oce column
    Columns("AT:BB").Select
    Selection.Delete Shift:=xlToLeft
               
    'Delete all columns after total price
    Columns("AG:AQ").Select
    Selection.Delete Shift:=xlToLeft

    'Delete install charge through IFF
    Columns("Y:AB").Select
    Selection.Delete Shift:=xlToLeft

    'Delete Deviation Number Column
    Columns("W:W").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete Standard Cost Column
    Columns("Q:R").Select
    Selection.Delete Shift:=xlToLeft

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
    
    'Clear Border
    Range("E1").Select
    Selection.AutoFill Destination:=Range("E1:P1"), Type:=xlFillDefault
    Range("E1:P1").Select
    Selection.Clear
    Range("E1:P1").Select
    With Selection.Interior
        .colorindex = 38
        .Pattern = xlSolid
    End With
        
   'Update the Dealer Plus formula
       
       'Rename "Floor Plus" to "Net Cost before CWO"
        Range("K2").Select
        ActiveCell.FormulaR1C1 = "Net Dealer Cost before CWO"
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        Range("K5").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
            Operator:=xlEqual, Formula1:="=(G5-H5)"
            .IgnoreBlank = False
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = "Invalid Entry"
            .InputMessage = ""
            .ErrorMessage = _
            "Do not adjust this value.  Click 'Cancel' and adjust the Plus % to change the price."
            .ShowInput = False
            .ShowError = True
            End With
        
            ActiveCell.FormulaR1C1 = "=(RC[-4]-RC[-3])"
       
            strFormulaK5 = Range("K5").Formula
                  
    'Update the Plus % formula
        
        'Rename "Plus %" to "Discount Ratio"
        Range("I2").Select
        ActiveCell.FormulaR1C1 = "Discount Ratio"
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        ActiveCell.EntireColumn.NumberFormat = "0.00%"
        
        Range("I5").Select
        ActiveCell.FormulaR1C1 = "=IF(RC[1]<>"""",(RC[1]/RC[-2])-1,R3C9)"
       
        strFormulaI5 = Range("I5").Formula
             
    'Update CSMP formula
    Range("H5").Select
    ActiveCell.FormulaR1C1 = _
    "=IF(RC[2]<>"""",RC[-1]-RC[2],IF(RC[1]<>0,-(RC[-1]*RC[1]),0))"
     
    strFormulaH5 = Range("H5").Formula
             
        'Undo Desired Price Validations
        Columns("J:J").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
            :=xlBetween
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = False
            .ShowError = False
        End With
        
        'Rename "Desired Price" to "Desired Dealer Cost before CWO"
        Range("J2").Select
        ActiveCell.FormulaR1C1 = STR_Desired_Net_Dealer_Cost_before_CWO
        With ActiveCell.Characters(Start:=1, Length:=11).Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .colorindex = 1
        End With
        
        Columns("J:J").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
            :=xlBetween
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = False
            .ShowError = False
        End With
             
    
    'Update Total Price formula
    Range("O5").Select
    ActiveCell.FormulaR1C1 = "=RC[-4]-RC[-3]-RC[-2]-RC[-1]"
       
    strFormulaO5 = Range("O5").Formula
    
    i = 5
    Do While i < TotalsRowFax
    
        If CStr(wsCurrent.Cells(i, 9).Value) <> "" Then wsCurrent.Cells(i, 11).Formula = Replace(strFormulaK5, "5", CStr(i), , , 1)
        
        If CStr(wsCurrent.Cells(i, 8).Value) <> "" Then wsCurrent.Cells(i, 9).Formula = Replace(strFormulaI5, "5", CStr(i), , , 1)
        
        If CStr(wsCurrent.Cells(i, 7).Value) <> "" Then wsCurrent.Cells(i, 8).Formula = Replace(strFormulaH5, "5", CStr(i), , , 1)
        
        If CStr(wsCurrent.Cells(i, 11).Value) <> "" Then wsCurrent.Cells(i, 15).Formula = Replace(strFormulaO5, "5", CStr(i), , , 1)
        
        i = i + 1
    Loop
    
    'Hide Automatic Credit through Payment Terms Columns
    Columns("L:N").Select
    Selection.EntireColumn.Hidden = True
    Columns("P:P").Select
    Selection.EntireColumn.Hidden = True
    
    Columns("E:E").Select
    Selection.NumberFormat = "0"
    
    'Delete Sorting Column
    Columns("A:A").Select
    Selection.Delete Shift:=xlToLeft
    
    'Add Sorting to Quantity Column
    Utils.SetFilter "Fax, Printer, Scanner", "D3:D"

    Columns("O:O").Select
    Selection.ColumnWidth = 14
    Columns("I:J").Select
    Selection.ColumnWidth = 14
    Columns("H:H").Select
    Selection.ColumnWidth = 10.5
    
    Columns("D:D").Select
    Selection.NumberFormat = "0"

    'Move columns to the way CSMP wants them
    Columns("J:O").Select
    Selection.EntireColumn.Hidden = False
    Columns("O:O").Select
    Selection.Cut
    Columns("K:K").Select
    Selection.Insert Shift:=xlToRight
    Columns("P:P").Select
    Selection.Cut
    Columns("J:J").Select
    Selection.Insert Shift:=xlToRight
    Columns("M:O").Select
    Selection.EntireColumn.Hidden = True
    Columns("Q:Q").Select
    Selection.EntireColumn.Hidden = True

    Range("A1").Select
        
    'Delete unwanted worksheets
    Sheets("NAD Request").Select
    ActiveWindow.ScrollWorkbookTabs Position:=xlLast
    Sheets(Array("NAD Request", "FM Request", "NAD Proposal Template", "FTR", _
        "Federal Request", "CFS Sheet", _
        "Credit Card - Lease", "Credit Card - Purchase", "Legacy Maintenance PAR", _
        "Credit Card - Maintenance", "PAR Approval for Dealer Templat", "HP Request", _
        "Oc|fffd| Detail Form", "FED Profit Summary", "Fed Proposal Template", "Dealer FM Request", _
        "GSA Oce Wide Format", "NAD Oce Wide Format", "Pooled Maint Wkst", "GSA Tiered Maint ", "FGSD Add'l Justification" _
        )).Select
        ' GSA Oce Wide Format, NAD Oce Wide Format and Pooled Maint Wkst added 04/2014
    
    Sheets("PAR Approval for Dealer Templat").Activate
    Application.DisplayAlerts = False
    ActiveWindow.SelectedSheets.Delete
    Application.DisplayAlerts = True
    
    
    'Update Profit Summary
    Sheets("Profit Summary").Select
    Range("E3").FormulaR1C1 = "='CSMP Detail Form'!R[22]C[1]"
    Range("D3:E3").Select
    Range("D3:E3").Cut Destination:=Range("D2:E2")
    Range("B41:E47").FormulaR1C1 = "='CSMP Detail Form'!R[25]C[-1]"
    Range("A1:A1").Formula = "='CSMP Detail Form'!$B$15"
    
    'add Row Number column to data sheets
    Call Utils.AddRowNumberColumnToDataSheets(ActiveWorkbook)
    
    'Deep hide data sheets
    Dim strWorksheetsToHide(4) As String
    strWorksheetsToHide(1) = "Digital and Color"
    strWorksheetsToHide(2) = "Software"
    strWorksheetsToHide(3) = "Fax, Printer, Scanner"
    strWorksheetsToHide(4) = "Profit Summary"
    
    Call SetVisibilityOfWorksheets(strWorksheetsToHide, xlSheetHidden)
    
    Sheets(strWorksheetsToHide(4)).Visible = xlSheetVeryHidden
        
    Sheets("AMP Credits").Visible = xlSheetVeryHidden
    
    'Sheets(Array("Digital and Color", "Software", "Fax, Printer, Scanner", "Profit Summary")).Select
    'ActiveWindow.SelectedSheets.Visible = False
            
    Application.ScreenUpdating = True

    'remove unused modules
    Dim strAvoidances(12) As String
    Dim nTemp As Integer
    
    strAvoidances(1) = "CSMP"
    strAvoidances(2) = "RemoveModules"
    strAvoidances(3) = "UserFormChannelSelection"
    strAvoidances(4) = "Util"
    strAvoidances(5) = "frmCWOLevelSelection"
    strAvoidances(6) = "frmOffers"
    strAvoidances(7) = "frmRevisions"
    strAvoidances(8) = "StartOfferNew"
    strAvoidances(9) = "TurnToOfferNew"
    strAvoidances(10) = "FastCalc"
    strAvoidances(11) = "frmCalendar"
    
    nTemp = RemoveModules.RemoveModules(strAvoidances)
    
    ' Update Add-ins menu
    Call Utils.SetMenuBar("Call Utils.AddAddIn2menuBar(""Version"", ""Utils.GetVersion""):Call Utils.AddAddIn2menuBar(""Copy Landed Cost"", ""Utils.CopyCSMPLandedCost""):Call Utils.AddAddIn2menuBar(""Calculations"", ""CSMPCalculations.CSMPCalculations""):Call Utils.AddAddIn2menuBar(""Unprotect Worksheets"", ""Utils.UnprotectDataWorksheets""):Call Utils.AddAddIn2menuBar(""CSMP Common Accessories Check"", ""CSMPCommonAccessoryCheck.CSMPCommonAccessoryCheck""): Call Utils.AddAddIn2menuBar(""PTP"", ""CSMPCalculations.CWOProcessing""): Call Utils.AddAddIn2menuBar(""Start Offer New Workbook"", ""StartOfferNew.StartOfferNewWorkbook""): Call Utils.AddAddIn2menuBar(""CSMP Exceptions"", ""StartOfferNew.CSMPExceptions""):" & _
                          " Call Utils.AddAddIn2menuBar(""AMP Fill"", ""StartOfferNew.AMPFill"") : Call Utils.AddAddIn2menuBar(""Turn To Offer New Workbook"", ""TurnToOfferNew.TurnToOfferNewWorkbook""): Call Utils.AddAddIn2menuBar(""Fast Calc"", ""FastCalc.FastCalc""): Call Sheet4.CSMPDetails_Init", _
                          "Call Utils.RemoveAddInFromMenuBar(""Version""):Call Utils.RemoveAddInFromMenuBar(""Copy Landed Cost""):Call Utils.RemoveAddInFromMenuBar(""Calculations""):Call Utils.RemoveAddInFromMenuBar(""Unprotect Worksheets""):Call Utils.RemoveAddInFromMenuBar(""CSMP Common Accessories Check""): Call Utils.RemoveAddInFromMenuBar(""PTP""): Call Utils.RemoveAddInFromMenuBar(""Start Offer New Workbook""): Call Utils.RemoveAddInFromMenuBar(""CSMP Exceptions""): Call Utils.RemoveAddInFromMenuBar(""AMP Fill""): Call Utils.RemoveAddInFromMenuBar(""Turn To Offer New Workbook""): Call Utils.RemoveAddInFromMenuBar(""Fast Calc""):Call Utils.CleanDataSheetsFromAutoShapes(Application.ThisWorkbook)")
     
    Call Utils.GenericSpecialValues(ActiveWorkbook, "CSMP", "C", "E")
    
    ' Finalize CSMP split
    Call EndOfProcess("CSMP", "")
    
    'fix Totals button on the Software and FPS tabs. 08-24-2017
    Utils.CSMPWorkbookStartRoutins True
        
    PrintDbgMsg "CSMPButton_Click ended: " & Now
End Sub

Private Sub DealerFMButton_Click()
    
                                                
    
    Dim a As Integer
    Dim i As Integer
    Dim TotalsRowDigital As Integer
    Dim TotalsRowSoftware As Integer
    Dim TotalsRowFax As Integer
    '
    
    'Application.ScreenUpdating = False

    UserFormChannelSelection.Hide
    
    ' update macro assigned to TOTALS click
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Digital and Color", "Rectangle 385", "DealerFMTotals.DealerFMTotals")
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Software", "Rectangle 54", "DealerFMTotals.DealerFMTotals")
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Fax, Printer, Scanner", "Rectangle 50", "DealerFMTotals.DealerFMTotals")
    
    'DIGITAL AND COLOR
    Sheets("Digital and Color").Select
    
    'Find the Totals Row
        TotalsRowDigital = Utils.FindTotalsRowIndex(Utils.STR_DIGITAL_COLOR_WORKSHEET)
            
    'Delete Non-NAD Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "NAD/ FM" Then NADColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowDigital
    Range("A5").Activate
    If ActiveCell.Offset(i, NADColumn) = "P" Then
        i = i + 1
        a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
    End If
    Loop
    
    'Delete Data to Publish Column, Net Dealer Extended Cost Column, Country of Origin
    Columns("BD:BN").Select
    Selection.Delete Shift:=xlToLeft

    
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft

    
    'Delete GSA through Payment Terms
    Columns("AB:AE").Select
    Selection.Delete Shift:=xlToLeft

    'Delete unwanted columns
    Columns("AG:AX").Select
    Selection.Delete Shift:=xlToLeft

    Columns("Y:AE").Select
    Selection.Delete Shift:=xlToLeft

    Columns("W:W").Select
    Selection.Delete Shift:=xlToLeft
    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete Purchase Price, Delete Floor Price
    Columns("Q:R").Select
    Selection.Delete Shift:=xlToLeft
    
    'Copy Values for MSRP and Dealer Price
    Columns("P:Q").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    'Delete Master Data
    Columns("E:N").Select
    Range("N2").Activate
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
       
    
    'Update Formulas
    Range("H5").Select
    ActiveCell.FormulaR1C1 = "=IF(RC[1]<>"""",((RC[1]-RC[-1])/RC[-1]),R3C)"
    
    'Net Price
    'Dealer Price * Percentage
    Range("J5").Select
    ActiveCell.FormulaR1C1 = "=RC[-3]*(1+RC[-2])"
    
    'Compensation
    'Dealer Price - Selling Price
    Range("K5").Select
    ActiveCell.FormulaR1C1 = "=RC[-4]-RC[-1]"
    
    'hide ItemClass column
    Columns("L:L").Select
    Selection.EntireColumn.Hidden = True
    
    'Copy Cells throughout workbook
    i = 0
    Do While i < TotalsRowDigital - 3
        Range("H5").Select
        If ActiveCell.Offset(i, -2).Value <> "" Then
            Range("H5:K5").Select
            Selection.Copy
            ActiveCell.Offset(i, 0).Select
            Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                SkipBlanks:=False, Transpose:=False
        End If
        i = i + 1
    Loop
     
    'Rename column headings
    Range("J2").Value = "Net Price"
    Range("K2").Value = "Dealer Comp"
    
    'Format top row
    Range("G1").Select
    Selection.AutoFill Destination:=Range("G1:K1"), Type:=xlFillDefault
    
    'Add filtering to Column A
    Utils.SetFilter "Digital and Color", "A3:A"

        'quick fix: row 5 should have no formulas
        'ClearRowFormulas Utils.STR_DIGITAL_COLOR_WORKSHEET, 5
        
'SOFTWARE

    Sheets("Software").Select
    
    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, 1).Value = "TOTALS" Then
        TotalsRowSoftware = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop
        
    'Delete Non-NAD Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "NAD/ FM" Then NADColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowSoftware
    Range("A5").Activate
    If ActiveCell.Offset(i, NADColumn) = "P" Then
        i = i + 1
        a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
    End If
    Loop
    
    'Delete Data to Publish Column, Net Dealer Extended Cost Column, Country of Origin Column
    Columns("AQ:BA").Select
    Selection.Delete Shift:=xlToLeft

   
    'Delete Payment Terms
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete GSA Level II and HP Level II
    Columns("AB:AE").Select
    Selection.Delete Shift:=xlToLeft

    'Delete unwanted columns
    Columns("AG:AR").Select
    Selection.Delete Shift:=xlToLeft
    Columns("Y:AE").Select
    Selection.Delete Shift:=xlToLeft
    Columns("W:W").Select
    Selection.Delete Shift:=xlToLeft
    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft
    Columns("Q:R").Select
    Selection.Delete Shift:=xlToLeft
    
    'Copy values for MSRP and Dealer Price
    Columns("P:Q").Select
    Range("Q1").Activate
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    'delete Master Data
    Columns("E:N").Select
    Range("N2").Activate
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    
    
    'Update Formulas
   
    'Dealer Plus
    'Dealer Price * Percentage
    Range("J6").Select
    ActiveCell.FormulaR1C1 = "=RC[-3]*(1+RC[-2])"
    
    'Compensation
    'Dealer Price - Selling Price
    Range("K6").Select
    ActiveCell.FormulaR1C1 = "=RC[-4]-RC[-1]"
    
    'Zero out Perecntage column
    Range("H6").Select
    ActiveCell.FormulaR1C1 = "0%"
    
    'Copy Cells throughout workbook
    i = 0
    Do While i < TotalsRowDigital - 3
        Range("H6").Select
        If ActiveCell.Offset(i, -2).Value <> "" Then
            Range("H6:K6").Select
            Selection.Copy
            ActiveCell.Offset(i, 0).Select
            Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                SkipBlanks:=False, Transpose:=False
        End If
        i = i + 1
    Loop
    
    'Rename column headings
    Range("J2").Value = "Net Price"
    Range("K2").Value = "Dealer Comp"
    
    'Format top row
    Range("G1").Select
    Selection.AutoFill Destination:=Range("G1:M1"), Type:=xlFillDefault
    Range("G1:M1").Select
    

    'Add filtering to Column A
    Utils.SetFilter "Software", "A3:A"

'FAX PRINTER SCANNER
    
    Sheets("Fax, Printer, Scanner").Select
    
    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, 1).Value = "TOTALS" Then
        TotalsRowFax = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop

    'Delete Non-NAD Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "NAD/ FM" Then NADColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowFax
    Range("A5").Activate
    If ActiveCell.Offset(i, NADColumn) = "P" Then
        i = i + 1
        a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
    End If
    Loop
    
    'Delete Data to Publish Column, Net Dealer Extended Cost Column, Country of Origin Column
    Columns("AR:BB").Select
    Selection.Delete Shift:=xlToLeft

    'Delete GSA through Payment Terms
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete GSA Level II and HP Level II
    Columns("AB:AE").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete unwanted columns
    Columns("AG:AL").Select
    Selection.Delete Shift:=xlToLeft
    Columns("Y:AE").Select
    Selection.Delete Shift:=xlToLeft
    Columns("W:W").Select
    Selection.Delete Shift:=xlToLeft
    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft
    Columns("Q:R").Select
    Selection.Delete Shift:=xlToLeft
    
    'Copy values for MSRP and Dealer Price
    Columns("P:Q").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    'Delete Master Data
    Columns("E:N").Select
    Range("N2").Activate
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
        
    'Update Formulas
    Range("H5").Select
    ActiveCell.FormulaR1C1 = "=IF(RC[1]<>"""",((rc[1]-RC[-1])/RC[-1]),R3C)"
    
    'Net Price
    'Dealer Price * Percentage
    Range("J5").Select
    ActiveCell.FormulaR1C1 = "=RC[-3]*(1+RC[-2])"
    
    'Compensation
    'Dealer Price - Selling Price
    Range("K5").Select
    ActiveCell.FormulaR1C1 = "=RC[-4]-RC[-1]"
    
    'hide ItemClass column
    Columns("L:L").Select
    Selection.EntireColumn.Hidden = True
    
    'Copy Cells throughout workbook
    i = 0
    Do While i < TotalsRowDigital - 3
        Range("H5").Select
        If ActiveCell.Offset(i, -2).Value <> "" Then
            Range("H5:K5").Select
            Selection.Copy
            ActiveCell.Offset(i, 0).Select
            Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                SkipBlanks:=False, Transpose:=False
        End If
        i = i + 1
    Loop
     
    'Rename column headings
    Range("J2").Value = "Net Price"
    Range("K2").Value = "Dealer Comp"
    
    'Format top row
    Range("G1").Select
    Selection.AutoFill Destination:=Range("G1:K1"), Type:=xlFillDefault

    'Add filtering to Column A
    Utils.SetFilter "Fax, Printer, Scanner", "A3:A"

    Sheets("AMP Credits").Visible = True
    
    'Delete Unwanted Worksheets
    Sheets(Array( _
                 "HP Request", "CFS Sheet", "FED Profit Summary", "Fed Proposal Template", _
                 "NAD REquest", "Instructions", _
                 "PAR Approval for Dealer Templat", "FM Request", _
                 "Federal Request", "FTR", "CSMP Detail Form", "Oc|fffd| Detail Form", _
                 "NAD Proposal Template", "Legacy Maintenance PAR", _
                 "Credit Card - Purchase", "Credit Card - Lease", "Credit Card - Maintenance", _
                 "GSA Oce Wide Format", "NAD Oce Wide Format", "Pooled Maint Wkst", "AMP Credits" _
                 )).Select
                ' GSA Oce Wide Format, NAD Oce Wide Format and Pooled Maint Wkst added 04/2014
    
    'Sheets("Aftermarket Support").Activate
    ActiveWindow.SelectedSheets.Delete
    ActiveWindow.ScrollWorkbookTabs Position:=xlFirst
    
    Call HideUniFlowInSofware(ActiveWorkbook)
    Call HidePRISMAInSofware(ActiveWorkbook)
    
    'Deep hide data sheets
    Dim strWorksheetsToHide(4) As String
    strWorksheetsToHide(1) = "Digital and Color"
    strWorksheetsToHide(2) = "Software"
    strWorksheetsToHide(3) = "Fax, Printer, Scanner"
    strWorksheetsToHide(4) = "Profit Summary"
    
    Call SetVisibilityOfWorksheets(strWorksheetsToHide, xlSheetVeryHidden)
    
    'Sheets(Array("Digital and Color", "Software", "Fax, Printer, Scanner", "Profit Summary")).Select
    'ActiveWindow.SelectedSheets.Visible = False

    Application.ScreenUpdating = True
    
    'Remove unused modules
    Dim strAvoidances(5) As String
    Dim strDeleteList(4) As String
    Dim nTemp As Integer
    
    strAvoidances(1) = "DealerFM"
    strAvoidances(2) = "UserFormChannelSelection"
    strAvoidances(3) = "RemoveModules"
    strAvoidances(4) = "Utils"
    strAvoidances(5) = "DFM"
    nTemp = RemoveModules.RemoveModules(strAvoidances)
    
    'Update Add-ins menu
    Call Utils.SetMenuBar("Call Utils.AddAddIn2menuBar(""Version"", ""Utils.GetVersion""):Call Utils.AddAddIn2menuBar(""Pricing Dashboard"", ""DealerFMPricingDashboard.DealerFMPricingDashboard""):Call Utils.AddAddIn2menuBar(""HQ Dashboard"", ""DealerFMHQDashboard.DealerFMHQDashboard""):Call Utils.AddAddIn2menuBar(""Unprotect Worksheets"", ""Utils.UnprotectDataWorksheets""):Call Utils.AddAddIn2menuBar(""Copy Landed Cost"", ""Utils.CopyDFMLandedCost"")", _
                          "Call Utils.RemoveAddInFromMenuBar(""Version""):Call Utils.RemoveAddInFromMenuBar(""Pricing Dashboard""):Call Utils.RemoveAddInFromMenuBar(""HQ Dashboard""):Call Utils.RemoveAddInFromMenuBar(""Unprotect Worksheets""):Call Utils.RemoveAddInFromMenuBar(""Copy Landed Cost""):Call Utils.CleanDataSheetsFromAutoShapes(Application.ThisWorkbook)")
    
    'Protect Dealer FM Request sheet
    Dim strSheetList(1) As String
    strSheetList(1) = "Dealer FM Request"
    Call Utils.ProtectWorksheets(True, "team", strSheetList)
    
    'Save Dealer FM workbook
    Call EndOfProcess("DFM", "")

End Sub


Private Sub FederalButton_Click()
    
If ReminderToSaveBackup = True Then Exit Sub
    
    PrintDbgMsg "FederalButton_Click started: " & Now
    
    Dim x As Integer
    Dim i As Integer
    Dim e As Integer
    Dim a As Integer
    
    Dim TotalsRowDigital As Integer
    Dim TotalsRowSoftware As Integer
    Dim TotalsRowFax As Integer
    Dim ItemNumberColumn As Integer
    Dim FederalColumn As Integer
    
    Dim wsCurrent As Worksheet
    
    ItemNumberColumn = 0
    FederalColumn = 0
    
    UserFormChannelSelection.Hide
    'Application.ScreenUpdating = False
    
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Digital and Color", "Rectangle 385", "FederalTotals.FederalTotals")
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Software", "Rectangle 54", "FederalTotals.FederalTotals")
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Fax, Printer, Scanner", "Rectangle 50", "FederalTotals.FederalTotals")
    
    
    'DIGITAL AND COLOR
Set wsCurrent = ActiveWorkbook.Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET)

    ItemNumberColumn = Utils.ColIndexExactMatch(wsCurrent, "Item #", 2)
        
    TotalsRowDigital = Utils.RowsToScan(wsCurrent, "TOTALS", ItemNumberColumn)
    
    wsCurrent.Select
            
    ' NOTE - Removed due to error reported by Lori 10/11/2011
    ' She will fix manually for now
    
    'fix #REF! cells here
    'Call Utils.FixREFErrCells(ActiveSheet)
    
    'convert N/A to 0.0
    'Call Utils.ConvertNACellToZero(ActiveSheet)
        
    'Copy Values in the Master Data
    Columns("K:N").Select
    Range("K2").Activate
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Range("E1:N1").Select
    Application.CutCopyMode = False
    Selection.ClearContents
    
    'Unmerge Headers
    Range("E1:N1").Select
    Selection.UnMerge
    Range("BH1:BM1").Select
    Selection.UnMerge
    
    'Delete Non-Federal Line Items
    FederalColumn = Utils.ColIndexExactMatch(wsCurrent, "Federal", 2)
    
    i = 0
    a = 0
    Do While a < TotalsRowDigital
        If wsCurrent.Cells(i + 5, FederalColumn).Value = "P" Then
            i = i + 1
        Else
            wsCurrent.Rows(i + 5).Delete Shift:=xlUp
        End If

        a = a + 1
    Loop
    
    PrintDbgMsg "FederalButton Federal column - " & CStr(FederalColumn)
    
    PrintDbgMsg "FederalButton Totals Row: Old - " & CStr(TotalsRowDigital) & "; New - " & CStr(i + 5)
    
    'adjust for removed rows
    TotalsRowDigital = i + 5
    
    'Remove all Validations
    Cells.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
        :=xlBetween
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = ""
        .ShowInput = True
        .ShowError = True
    End With

    'Delete data to publish
    
    'Range("BH:BN").Select
    'Selection.Delete Shift:=xlToLeft
    '06-30-2011
    Range("BM:BN").Select
    Selection.Delete Shift:=xlToLeft
    
    Range("BH:BI").Select
    Selection.Delete Shift:=xlToLeft
    
    'Range("BH:BJ").Select
    'Selection.Delete Shift:=xlToLeft
    
    'Delete CSMP extended columns
    Columns("BD:BE").Select
    Selection.Delete Shift:=xlToLeft
    Columns("BI:BI").Select
    Selection.EntireColumn.Hidden = True
    
    'Paste values/delete columns for maintenance
    Columns("AZ:BC").Select
    Application.CutCopyMode = False
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Columns("AX:AX").Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    Range("AW1").Select
    Selection.ClearContents
    
    Columns("AT:AU").Select
    Selection.Delete Shift:=xlToLeft
    Columns("AR:AU").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    Columns("AL:AL").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
        
    Range("AN1").Select
    Selection.AutoFill Destination:=Range("AN1:AV1"), Type:=xlFillDefault
    
    'Delete Total Lease Payment Column
    Columns("AN:AQ").Select
    Selection.Delete Shift:=xlToLeft
            
    'Delete HP program columns
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft
    'Delete CSMP program columns
    Columns("AC:AE").Select
    Selection.Delete Shift:=xlToLeft
    
    Columns("X:AA").Select
    Selection.Delete Shift:=xlToLeft
    
    Columns("W:W").Select
    Selection.Cut
    Columns("P:P").Select
    Selection.Insert Shift:=xlToRight
    Range("P2").Value = "Comments"

    Columns("O:O").Select
    Selection.Copy
    Columns("P:P").Select
    Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
    Application.CutCopyMode = False
    
    Columns("U:U").Select
    Selection.Delete Shift:=xlToLeft
    Columns("R:S").Select
    Selection.Delete Shift:=xlToLeft
    Columns("R:R").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Columns("R:R").Select
    Application.CutCopyMode = False
    Selection.Copy
    Columns("S:Y").Select
    Selection.Insert Shift:=xlToRight
    
    Columns("I:J").Select
    Application.CutCopyMode = False
    Selection.Copy
    Range("R1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Columns("K:L").Select
    Application.CutCopyMode = False
    Selection.Copy
    ActiveWindow.SmallScroll ToRight:=2
    Range("U1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Columns("M:N").Select
    Application.CutCopyMode = False
    Selection.Copy
    Range("X1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Range("T2").Select
    Application.CutCopyMode = False
    ActiveCell.FormulaR1C1 = "GSA Level I Pre-IFF Price"

    Range("W2").Select
    ActiveCell.FormulaR1C1 = "GSA Level II Pre-IFF Price"

    
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
    
    Range("N1").Select
    Selection.AutoFill Destination:=Range("N1:Q1"), Type:=xlFillDefault
    Range("N1:Q1").Select
    
    Range("S1").Select
    Selection.ClearContents
    
    Range("AB1").Select
    Selection.AutoFill Destination:=Range("AB1:AC1"), Type:=xlFillDefault
    
    Columns("AJ:AJ").Select
    Selection.Cut
    Columns("G:G").Select
    Selection.Insert Shift:=xlToRight
    Range("E1").Select
    Selection.ClearContents
    Range("F1").Value = "Cost Basis:"
    Range("H1:I1").Select
    Selection.Cut Destination:=Range("G1:H1")
    Range("J1").Select
    Selection.AutoFill Destination:=Range("I1:J1"), Type:=xlFillDefault
    Range("I1:J1").Select
    
    Range("AC1").Select
    Selection.AutoFill Destination:=Range("AC1:AD1"), Type:=xlFillDefault
    Range("AC1:AD1").Select
    Range("AD1").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .colorindex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
    Columns("S:S").Select
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    Range("S2").Select
    ActiveCell.FormulaR1C1 = "Desired Pre-IFF Price"
    
    Range("S2:T2").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .color = 15201279
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    
    Columns("S:S").Select
    Selection.Copy
    Columns("U:V").Select
    Selection.Insert Shift:=xlToRight
    Range("U2").Value = "Desired Securing Comp"
    Range("V2").Value = "Installing Comp"


    Range("T3").Select
    Selection.Copy
    Range("U3").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Selection.NumberFormat = "0.0%"
    ActiveCell.FormulaR1C1 = "8%"
    Range("T3").Select
    Selection.Copy
    Range("V3").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Selection.NumberFormat = "0.0%"
    ActiveCell.FormulaR1C1 = "8%"

    'Desired Price Information
          
      'Level II Pre-II Price
      Range("N5").FormulaR1C1 = "=If(RC[1]<>"""",round(RC[1]/1.007557,0),"""")"
           
      'Desired Pre-IFF Price
      Range("S5").FormulaR1C1 = "=IF(RC[-1]<>"""",(RC[-1]-RC[1]),"""")"
      
      'Desired IFF
      Range("T5").FormulaR1C1 = "=IF(RC[-2]<>"""",(RC[-2]/(1+R3C))*R3C,"""")"
               
      'Desired Servicing Comp
      Range("U5").FormulaR1C1 = "=IF(RC[-3]<>"""",(RC[-3]/(1+R3C[-1]))*R3C,"""")"
    
      'Installing Comp
      Range("V5").FormulaR1C1 = "=ROUND(RC[-8]*R3C,0)"
      
      'Desired Total Price
      Range("W5").FormulaR1C1 = "=IF(RC[-5]<>"""",RC[-4]+RC[-3], IF(RC[-18]>10,RC[-8],RC[-11]))"

    Dim strFormulaN5 As String
    Dim strFormulaS5 As String
    Dim strFormulaT5 As String
    Dim strFormulaU5 As String
    Dim strFormulaV5 As String
    Dim strFormulaW5 As String
    
    strFormulaN5 = wsCurrent.Range("N5").Formula
    strFormulaS5 = wsCurrent.Range("S5").Formula
    strFormulaT5 = wsCurrent.Range("T5").Formula
    strFormulaU5 = wsCurrent.Range("U5").Formula
    strFormulaV5 = wsCurrent.Range("V5").Formula
    strFormulaW5 = wsCurrent.Range("W5").Formula
    
    'Copy for all cells
    
    i = 5
    Do While i < TotalsRowDigital
    
        'Copy GSA level II Pre-IFF
        If CStr(wsCurrent.Cells(i, 11).Value) <> "" Then wsCurrent.Cells(i, 14).Formula = Replace(strFormulaN5, "5", CStr(i), , , 1)
        
        'Copy Desired Price Columns
        If CStr(wsCurrent.Cells(i, 17).Value) <> "" Then
            wsCurrent.Cells(i, 19).Formula = Replace(strFormulaS5, "5", CStr(i), , , 1)
            wsCurrent.Cells(i, 20).Formula = Replace(strFormulaT5, "5", CStr(i), , , 1)
            wsCurrent.Cells(i, 21).Formula = Replace(strFormulaU5, "5", CStr(i), , , 1)
            wsCurrent.Cells(i, 22).Formula = Replace(strFormulaV5, "5", CStr(i), , , 1)
            
            With wsCurrent.Range("S" & CStr(i) & ":V" & CStr(i)).Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .color = 15201279
            .TintAndShade = 0
            .PatternTintAndShade = 0
            End With
        End If
        
        'Copy Total Price Columns
        If CStr(wsCurrent.Cells(i, 17).Value) <> "" Then wsCurrent.Cells(i, 23).Formula = Replace(strFormulaW5, "5", CStr(i), , , 1)
        
        i = i + 1
    Loop
    
    'Paste Values
    Columns("N:N").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
                
    Utils.SetFilter "Digital and Color", "A3:A"
    
    Call Utils.ApplyLeasingFormula2All(ActiveSheet)
        
'SOFTWARE
Set wsCurrent = ActiveWorkbook.Sheets(Utils.STR_SOFTWARE_WORKSHEET)

    ItemNumberColumn = Utils.ColIndexExactMatch(wsCurrent, "Item #", 2)
        
    TotalsRowSoftware = Utils.RowsToScan(wsCurrent, "TOTALS", ItemNumberColumn)
    
    wsCurrent.Select
       
    'Copy Values in the Master Data
    Columns("K:N").Select
    Range("K2").Activate
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Range("E1:N1").Select
    Application.CutCopyMode = False
    Selection.ClearContents
    
    'Unmerge Headers
    Range("E1:N1").Select
    Selection.UnMerge
    Range("AU1:AZ1").Select
    Selection.UnMerge
    
    'Delete Non-Federal Line Items
    FederalColumn = Utils.ColIndexExactMatch(wsCurrent, "Federal", 2)
    
    i = 0
    a = 0
    Do While a < TotalsRowSoftware
        If wsCurrent.Cells(i + 5, FederalColumn).Value = "P" Then
            i = i + 1
        Else
            wsCurrent.Rows(i + 5).Delete Shift:=xlUp
        End If

        a = a + 1
    Loop
    
    PrintDbgMsg "FederalButton Federal column - " & CStr(FederalColumn)
    
    PrintDbgMsg "FederalButton Totals Row: Old - " & CStr(TotalsRowSoftware) & "; New - " & CStr(i + 5)
    
    'adjust for removed rows
    TotalsRowSoftware = i + 5
    
    'Remove all Validations
    Cells.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
        :=xlBetween
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = ""
        .ShowInput = True
        .ShowError = True
    End With

    'Delete data to publish
    
    'Range("AU:BA").Select
    'Selection.Delete Shift:=xlToLeft
    
    '06-30-2011
    Range("AZ:BA").Select
    Selection.Delete Shift:=xlToLeft
    
    Range("AU:AV").Select
    Selection.Delete Shift:=xlToLeft
        
    'Range("AU:AW").Select
    'Selection.Delete Shift:=xlToLeft
    
    'Delete CSMP extended columns
    Columns("AQ:AR").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete Total Lease Payment Column
    Columns("AM:AP").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete HP price
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete CSMP program columns
    Columns("AC:AE").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete Floor Plus, Finders, Warrany
    Columns("X:AA").Select
    Selection.Delete Shift:=xlToLeft
    
    Columns("W:W").Select
    Selection.Cut
    Columns("P:P").Select
    Selection.Insert Shift:=xlToRight
    Range("P2").Value = "Comments"

    Columns("O:O").Select
    Selection.Copy
    Columns("P:P").Select
    Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
    Application.CutCopyMode = False
    
    Columns("U:U").Select
    Selection.Delete Shift:=xlToLeft
    Columns("R:S").Select
    Selection.Delete Shift:=xlToLeft
    Columns("R:R").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Columns("R:R").Select
    Application.CutCopyMode = False
    Selection.Copy
    Columns("S:Y").Select
    Selection.Insert Shift:=xlToRight
    
    Columns("I:J").Select
    Application.CutCopyMode = False
    Selection.Copy
    Range("R1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Columns("K:L").Select
    Application.CutCopyMode = False
    Selection.Copy
    ActiveWindow.SmallScroll ToRight:=2
    Range("U1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Columns("M:N").Select
    Application.CutCopyMode = False
    Selection.Copy
    Range("X1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Range("T2").Select
    Application.CutCopyMode = False
    ActiveCell.FormulaR1C1 = "GSA Level I Pre-IFF Price"

    Range("W2").Select
    ActiveCell.FormulaR1C1 = "GSA Level II Pre-IFF Price"

    
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
    
    Range("N1").Select
    Selection.AutoFill Destination:=Range("N1:Q1"), Type:=xlFillDefault
    Range("N1:Q1").Select
    
    Range("S1").Select
    Selection.ClearContents

    
    Columns("Z:Z").Select
    Selection.Cut
    Columns("G:G").Select
    Selection.Insert Shift:=xlToRight
    Range("E1").Select
    Selection.ClearContents
    Range("F1").Value = "Cost Basis:"
    Range("H1:I1").Select
    Selection.Cut Destination:=Range("G1:H1")
    Range("J1").Select
    Selection.AutoFill Destination:=Range("I1:J1"), Type:=xlFillDefault
    Range("I1:J1").Select
    
    Range("AC1").Select
    Selection.AutoFill Destination:=Range("AC1:AD1"), Type:=xlFillDefault
    Range("AC1:AD1").Select
    Range("AD1").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .colorindex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
    Columns("S:S").Select
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    Range("S2").Select
    ActiveCell.FormulaR1C1 = "Desired Pre-IFF Price"
    
    Range("S2:T2").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .color = 15201279
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    
    Columns("S:S").Select
    Selection.Copy
    Columns("U:V").Select
    Selection.Insert Shift:=xlToRight
    Range("U2").Value = "Desired Securing Comp"
    Range("V2").Value = "Installing Comp"


    Range("T3").Select
    Selection.Copy
    Range("U3").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Selection.NumberFormat = "0.0%"
    ActiveCell.FormulaR1C1 = "8%"
    Range("T3").Select
    Selection.Copy
    Range("V3").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Selection.NumberFormat = "0.0%"
    ActiveCell.FormulaR1C1 = "8%"

    'Desired Price Information
          
      'Plus Percent
      Range("Q6").FormulaR1C1 = 0

      'Level II Pre-II Price
      Range("N6").FormulaR1C1 = "=If(RC[1]<>"""",round(RC[1]/1.007557,0),"""")"
      
      'Desired Pre-IFF Price
      Range("S6").FormulaR1C1 = "=IF(RC[-1]<>"""",(RC[-1]-RC[1]),"""")"
      
      'Desired IFF
      Range("T6").FormulaR1C1 = "=IF(RC[-2]<>"""",(RC[-2]/(1+R3C))*R3C,"""")"
               
      'Desired Servicing Comp
      Range("U6").FormulaR1C1 = "=IF(RC[-3]<>"""",(RC[-3]/(1+R3C[-1]))*R3C,"""")"
    
      'Installing Comp
      Range("V6").FormulaR1C1 = "=ROUND(RC[-8]*R3C,0)"
      
      'Desired Total Price
      Range("W6").FormulaR1C1 = "=IF(RC[-5]<>"""",RC[-4]+RC[-3], IF(RC[-18]>10,RC[-8],RC[-11]))"

      'Copy for all cells
    Dim strFormulaN6 As String
    Dim strFormulaQ6 As String
    Dim strFormulaS6 As String
    Dim strFormulaT6 As String
    Dim strFormulaU6 As String
    Dim strFormulaV6 As String
    Dim strFormulaW6 As String
    
    strFormulaN6 = wsCurrent.Range("N6").Formula
    strFormulaQ6 = wsCurrent.Range("Q6").Formula
    strFormulaS6 = wsCurrent.Range("S6").Formula
    strFormulaT6 = wsCurrent.Range("T6").Formula
    strFormulaU6 = wsCurrent.Range("U6").Formula
    strFormulaV6 = wsCurrent.Range("V6").Formula
    strFormulaW6 = wsCurrent.Range("W6").Formula
    
    'Copy for all cells
    
    i = 5
    Do While i < TotalsRowSoftware
    
        'Copy GSA level II Pre-IFF
        If CStr(wsCurrent.Cells(i, 14).Value) <> "" Then wsCurrent.Cells(i, 17).Formula = Replace(strFormulaN6, "6", CStr(i), , , 1)
        
        'Copy Percent
        If CStr(wsCurrent.Cells(i, 3).Value) <> "" Then wsCurrent.Cells(i, 17).Formula = Replace(strFormulaQ6, "6", CStr(i), , , 1)
        
        'Copy Desired Price Columns
        If CStr(wsCurrent.Cells(i, 17).Value) <> "" Then
            wsCurrent.Cells(i, 19).Formula = Replace(strFormulaS6, "6", CStr(i), , , 1)
            wsCurrent.Cells(i, 20).Formula = Replace(strFormulaT6, "6", CStr(i), , , 1)
            wsCurrent.Cells(i, 21).Formula = Replace(strFormulaU6, "6", CStr(i), , , 1)
            wsCurrent.Cells(i, 22).Formula = Replace(strFormulaV6, "6", CStr(i), , , 1)
            
            With wsCurrent.Range("S" & CStr(i) & ":V" & CStr(i)).Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .color = 15201279
            .TintAndShade = 0
            .PatternTintAndShade = 0
            End With
        End If
        
        'Copy Total Price
        If CStr(wsCurrent.Cells(i, 17).Value) <> "" Then wsCurrent.Cells(i, 23).Formula = Replace(strFormulaW6, "6", CStr(i), , , 1)
        
        i = i + 1
    Loop
    
    'Paste Values
    Columns("N:N").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
            
    Utils.SetFilter "Software", "A3:A"
            
'FAX, PRINTER, SCANNER
Set wsCurrent = ActiveWorkbook.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET)

    ItemNumberColumn = Utils.ColIndexExactMatch(wsCurrent, "Item #", 2)
        
    TotalsRowFax = Utils.RowsToScan(wsCurrent, "TOTALS", ItemNumberColumn)
    
    wsCurrent.Select
   
    'Copy Values in the Master Data
    Columns("K:N").Select
    Range("K2").Activate
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Range("E1:N1").Select
    Application.CutCopyMode = False
    Selection.ClearContents
    
    'Unmerge Headers
    Range("E1:N1").Select
    Selection.UnMerge
    Range("AV1:BA1").Select
    Selection.UnMerge
    
    'Delete Non-Federal Line Items
    FederalColumn = Utils.ColIndexExactMatch(wsCurrent, "Federal", 2)
    
    i = 0
    a = 0
    Do While a < TotalsRowFax
        If wsCurrent.Cells(i + 5, FederalColumn).Value = "P" Then
            i = i + 1
        Else
            wsCurrent.Rows(i + 5).Delete Shift:=xlUp
        End If

        a = a + 1
    Loop
    
    PrintDbgMsg "FederalButton Federal column - " & CStr(FederalColumn)
    
    PrintDbgMsg "FederalButton Totals Row: Old - " & CStr(TotalsRowFax) & "; New - " & CStr(i + 5)
    
    'adjust for removed rows
    TotalsRowFax = i + 5
        
    'Remove all Validations
    Cells.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
        :=xlBetween
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = ""
        .ShowInput = True
        .ShowError = True
    End With

    'Delete data to publish
    
    'Range("AV:BB").Select
    'Selection.Delete Shift:=xlToLeft
    
    '06-30-2011
    Range("BA:BB").Select
    Selection.Delete Shift:=xlToLeft
    
    Range("AV:AW").Select
    Selection.Delete Shift:=xlToLeft
    
    'Range("AV:AX").Select
    'Selection.Delete Shift:=xlToLeft
    
    'Delete CSMP extended columns
    Columns("AR:AS").Select
    Selection.Delete Shift:=xlToLeft
    
    'moved
    'Columns("BB:BB").Select
    'Selection.EntireColumn.Hidden = True
    'Copy values for maintenance
    Columns("AQ:AQ").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Columns("AL:AL").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
        
    'Delete Total Lease Payment Column
    Columns("AM:AP").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete HP price
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete CSMP program columns
    Columns("AC:AE").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete Floor Plus, Finders, Warrany
    Columns("X:AA").Select
    Selection.Delete Shift:=xlToLeft
    
    Columns("W:W").Select
    Selection.Cut
    Columns("P:P").Select
    Selection.Insert Shift:=xlToRight
    Range("P2").Value = "Comments"

    Columns("O:O").Select
    Selection.Copy
    Columns("P:P").Select
    Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
    Application.CutCopyMode = False
    Columns("U:U").Select
    Selection.Delete Shift:=xlToLeft
    Columns("R:S").Select
    Selection.Delete Shift:=xlToLeft
    Columns("R:R").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Columns("R:R").Select
    Application.CutCopyMode = False
    Selection.Copy
    Columns("S:Y").Select
    Selection.Insert Shift:=xlToRight
    
    Columns("I:J").Select
    Application.CutCopyMode = False
    Selection.Copy
    Range("R1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Columns("K:L").Select
    Application.CutCopyMode = False
    Selection.Copy
    ActiveWindow.SmallScroll ToRight:=2
    Range("U1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Columns("M:N").Select
    Application.CutCopyMode = False
    Selection.Copy
    Range("X1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Range("T2").Select
    Application.CutCopyMode = False
    ActiveCell.FormulaR1C1 = "GSA Level I Pre-IFF Price"

    Range("W2").Select
    ActiveCell.FormulaR1C1 = "GSA Level II Pre-IFF Price"

    
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
        
    Range("N1").Select
    Selection.AutoFill Destination:=Range("N1:Q1"), Type:=xlFillDefault
    Range("N1:Q1").Select
    
    Range("S1").Select
    Selection.ClearContents

    
    Columns("AA:AA").Select
    Selection.Cut
    Columns("G:G").Select
    Selection.Insert Shift:=xlToRight
    Range("E1").Select
    Selection.ClearContents
    Range("F1").Value = "Cost Basis:"
    Range("H1:I1").Select
    Selection.Cut Destination:=Range("G1:H1")
    Range("J1").Select
    Selection.AutoFill Destination:=Range("I1:J1"), Type:=xlFillDefault
    Range("I1:J1").Select
    
    Range("AC1").Select
    Selection.AutoFill Destination:=Range("AC1:AD1"), Type:=xlFillDefault
    Range("AC1:AD1").Select
    Range("AD1").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .colorindex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
    Columns("S:S").Select
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    Range("S2").Select
    ActiveCell.FormulaR1C1 = "Desired Pre-IFF Price"
    
    Range("S2:T2").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .color = 15201279
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    
    Columns("S:S").Select
    Selection.Copy
    Columns("U:V").Select
    Selection.Insert Shift:=xlToRight
    Range("U2").Value = "Desired Securing Comp"
    Range("V2").Value = "Installing Comp"


    Range("T3").Select
    Selection.Copy
    Range("U3").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Selection.NumberFormat = "0.0%"
    ActiveCell.FormulaR1C1 = "5%"
    Range("T3").Select
    Selection.Copy
    Range("V3").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Selection.NumberFormat = "0.0%"
    ActiveCell.FormulaR1C1 = "5%"

    'Desired Price Information
          
      'Plus Percent
      Range("Q5").FormulaR1C1 = 0

      'Level II Pre-II Price
      Range("N5").FormulaR1C1 = "=If(RC[1]<>"""",round(RC[1]/1.007557,0),"""")"
      
      'Desired Pre-IFF Price
      Range("S5").FormulaR1C1 = "=IF(RC[-1]<>"""",(RC[-1]-RC[1]),"""")"
      
      'Desired IFF
      Range("T5").FormulaR1C1 = "=IF(RC[-2]<>"""",(RC[-2]/(1+R3C))*R3C,"""")"
               
      'Desired Servicing Comp
      Range("U5").FormulaR1C1 = "=IF(RC[-3]<>"""",(RC[-3]/(1+R3C[-1]))*R3C,"""")"
    
      'Installing Comp
      Range("V5").FormulaR1C1 = "=ROUND(RC[-8]*R3C,0)"
      
      'Desired Total Price
      Range("W5").FormulaR1C1 = "=IF(RC[-5]<>"""",RC[-4]+RC[-3], IF(RC[-18]>10,RC[-8],RC[-11]))"

    Dim strFormulaQ5 As String
    
    strFormulaN5 = wsCurrent.Range("N5").Formula
    strFormulaQ5 = wsCurrent.Range("Q5").Formula
    strFormulaS5 = wsCurrent.Range("S5").Formula
    strFormulaT5 = wsCurrent.Range("T5").Formula
    strFormulaU5 = wsCurrent.Range("U5").Formula
    strFormulaV5 = wsCurrent.Range("V5").Formula
    strFormulaW5 = wsCurrent.Range("W5").Formula
    
    'Copy for all cells
    
    i = 5
    Do While i < TotalsRowFax
    
        'Copy GSA level II Pre-IFF
        If CStr(wsCurrent.Cells(i, 11).Value) <> "" Then wsCurrent.Cells(i, 14).Formula = Replace(strFormulaN5, "5", CStr(i), , , 1)
        
        'Copy Percent
        If CStr(wsCurrent.Cells(i, 3).Value) <> "" Then wsCurrent.Cells(i, 17).Formula = Replace(strFormulaQ5, "5", CStr(i), , , 1)
        
        'Copy Desired Price Columns
        If CStr(wsCurrent.Cells(i, 17).Value) <> "" Then
            wsCurrent.Cells(i, 19).Formula = Replace(strFormulaS5, "5", CStr(i), , , 1)
            wsCurrent.Cells(i, 20).Formula = Replace(strFormulaT5, "5", CStr(i), , , 1)
            wsCurrent.Cells(i, 21).Formula = Replace(strFormulaU5, "5", CStr(i), , , 1)
            wsCurrent.Cells(i, 22).Formula = Replace(strFormulaV5, "5", CStr(i), , , 1)
            
            With wsCurrent.Range("S" & CStr(i) & ":V" & CStr(i)).Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .color = 15201279
            .TintAndShade = 0
            .PatternTintAndShade = 0
            End With
        End If
        
        'Copy Total Price Columns
        If CStr(wsCurrent.Cells(i, 17).Value) <> "" Then wsCurrent.Cells(i, 23).Formula = Replace(strFormulaW5, "5", CStr(i), , , 1)
        
        i = i + 1
    Loop
    
    'Paste Values
    Columns("N:N").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
        
    Utils.SetFilter "Fax, Printer, Scanner", "A3:A"
    
    Columns("AH:AH").Select
    Selection.EntireColumn.Hidden = True
                
    Sheets("AMP Credits").Visible = True
    
    'Remove unused sheets
    Sheets(Array( _
                 "HP Request", "NAD Request", "Instructions", "Profit Summary", _
                 "FM Request", "Dealer FM Request", "FTR", _
                 "CSMP Detail Form", "Oc|fffd| Detail Form", "NAD Proposal Template", _
                 "NAD Oce Wide Format", "AMP Credits" _
                 )).Select
                 ' NAD Oce Wide Format added 04/2014
    
    Application.DisplayAlerts = False
    ActiveWindow.SelectedSheets.Delete
    Application.DisplayAlerts = True
    
    ActiveWindow.ScrollWorkbookTabs Position:=xlFirst
    Sheets("FED Profit Summary").Select
    ActiveSheet.Name = "Profit Summary"
    
    Sheets("Profit Summary").Select
    Range("E2").Select
    ActiveCell.FormulaR1C1 = "='Federal Request'!R78C8"
    Range("E3").Select
    ActiveCell.FormulaR1C1 = "='Federal Request'!R4C2"
    Range("B41:E47").Select
    ActiveCell.FormulaR1C1 = "='Federal Request'!R73C1"
    Range("A1").Select
    ActiveCell.FormulaR1C1 = "='Federal Request'!R6C2"
    
    ' As per Lori - After split, hide Pre IFF columns (K & N) for D&C, Software and FPS tabs
    Sheets("Fax, Printer, Scanner").Select
    Columns("K").Hidden = True
    Columns("N").Hidden = True
    
    Sheets("Software").Select
    Columns("K").Hidden = True
    Columns("N").Hidden = True
    
    Sheets("Digital and Color").Select
    Columns("K").Hidden = True
    Columns("N").Hidden = True
    
    'Sheets("Digital and Color").Select
    Range("A1").Select
    
    'Call HideUniFlowInSofware(ActiveWorkbook)
    
    'Deep hide data sheets
    Dim strWorksheetsList(13) As String
    strWorksheetsList(1) = "CFS Sheet"
    strWorksheetsList(2) = "Fed Proposal Template"
    strWorksheetsList(3) = "PAR Approval for Dealer Templat"
    strWorksheetsList(4) = "Digital and Color"
    strWorksheetsList(5) = "Software"
    strWorksheetsList(6) = "Fax, Printer, Scanner"
    strWorksheetsList(7) = "Profit Summary"
    strWorksheetsList(8) = "Credit Card - Purchase"
    strWorksheetsList(9) = "Credit Card - Lease"
    strWorksheetsList(10) = "Credit Card - Maintenance"
    strWorksheetsList(11) = "Profit Summary"
    strWorksheetsList(12) = "GSA Oce Wide Format" ' Added 04/2014
    strWorksheetsList(13) = "Pooled Maint Wkst" ' Added 04/2014
    
    ' 04/03/2014 - Sheets RPP Configs, D&C Configs-OM, D&C Configs-GSA & Current Systems removed as per Lori
    
    Call SetVisibilityAndProtectionOfWorksheets(strWorksheetsList, xlSheetVeryHidden, True, "team")
    
    'Call SetVisibilityOfWorksheets(strWorksheetsToHide, xlSheetVeryHidden)
    
    'Sheets(Array("CFS Sheet", "Fed Proposal Template", _
    '             "PAR Approval for Dealer Templat", _
    '             "Digital and Color", "Software", "Fax, Printer, Scanner", _
    '             "Credit Card - Purchase", "Credit Card - Lease", "Credit Card - Maintenance", _
    '             "Profit Summary" _
    '            ) _
    '      ).Select
    'ActiveWindow.SelectedSheets.Visible = False
    
    Application.ScreenUpdating = True
    
    'Remove unused objects
    Dim strAvoidances(8) As String
    Dim nTemp As Integer
    strAvoidances(1) = "Federal"
    strAvoidances(2) = "UserFormChannelSelection"
    strAvoidances(3) = "Module1"
    strAvoidances(4) = "RemoveModules"
    strAvoidances(5) = "Utils"
    strAvoidances(6) = "UserFormCSMPUpload"
    strAvoidances(7) = "frmOffers"
    strAvoidances(8) = "frmRevisions"
    
    nTemp = RemoveModules.RemoveModules(strAvoidances)
    
    'Update Add-ins menu
    Call Utils.SetMenuBar("Call Utils.AddAddIn2menuBar(""Version"", ""Utils.GetVersion""):Call Utils.AddAddIn2menuBar(""Pricing Dashboard"", ""FederalPricingDashboard.FederalPricingDashboard""):Call Utils.AddAddIn2menuBar(""HQ Dashboard"", ""FederalHQDashboard.FederalHQDashboard""):Call Utils.AddAddIn2menuBar(""Unprotect Worksheets"", ""Utils.UnprotectDataWorksheets""):Call Utils.AddAddIn2menuBar(""Copy GSA Landed Cost"", ""Utils.CopyFederalGSALandedCost""):Call Utils.AddAddIn2menuBar(""Copy OM Landed Cost"", ""Utils.CopyFederalOMLandedCost"")", _
                          "Call Utils.RemoveAddInFromMenuBar(""Version""):Call Utils.RemoveAddInFromMenuBar(""Pricing Dashboard""):Call Utils.RemoveAddInFromMenuBar(""HQ Dashboard""):Call Utils.RemoveAddInFromMenuBar(""Unprotect Worksheets""):Call Utils.RemoveAddInFromMenuBar(""Copy GSA Landed Cost""):Call Utils.RemoveAddInFromMenuBar(""Copy OM Landed Cost""):Call Utils.CleanDataSheetsFromAutoShapes(Application.ThisWorkbook)")
        
    'Protect Federal Request sheet
    Dim strSheetList(1) As String
    strSheetList(1) = "Federal Request"
    Call Utils.ProtectWorksheets(True, "team", strSheetList)
    
    'Finalize split
    Call EndOfProcess("Federal", "")

    PrintDbgMsg "FederalButton_Click ended: " & Now
    
End Sub

Private Sub FMButton_Click()

    If ReminderToSaveBackup = True Then Exit Sub

    Dim a As Integer
    Dim i As Integer
    Dim TotalsRowDigital As Integer
    Dim TotalsRowSoftware As Integer
    Dim TotalsRowFax As Integer
    Dim NADColumn As Integer
    
    
    'Application.ScreenUpdating = False
    
    UserFormChannelSelection.Hide
    
    ' update macro assigned to TOTALS click
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Digital and Color", "Rectangle 385", "FMTotals.FMTotals")
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Software", "Rectangle 54", "FMTotals.FMTotals")
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Fax, Printer, Scanner", "Rectangle 50", "FMTotals.FMTotals")
    
    
    Sheets("Digital and Color").Select

    '--- Insert the proper NAD rates into Digital & Color worksheet
    
        'updated logic on 01-30-2014
    ' Attempt to find the 1st of 3 rows to modify
    RateFactorRow = Utils.FindRowIndexByCellText(ActiveSheet, STR_PRODUCTION_MODELS_SECTION, 4, Utils.N_MAX_ROWS_TO_SEARCH)
    
    ' Change rates for the first row (Digital Color Copier)
    Range("AH" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_24
    Range("AI" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_36
    Range("AJ" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_48
    Range("AK" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_60
    
    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, 1).Value = "TOTALS" Then
        TotalsRowDigital = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop
        
    '03-29-2018 preserve a formula '=S3095+AB3095' (="Dealer Price" + "IFF")
    Dim nIFF As Integer
    Dim nTotalPrice As Integer
    Dim nDealerPrice As Integer
    Dim strDealerPriceLetterNew As String
    Dim wsDC As Worksheet
    
    Set wsDC = Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET)
    
    nIFF = Utils.ColIndexExactMatch(wsDC, "IFF", 2)
    
    nTotalPrice = Utils.ColIndexExactMatch(wsDC, "Total Price", 2)
    
    nDealerPrice = Utils.ColIndexExactMatch(wsDC, "Dealer Price", 2)
    
    strDealerPriceLetterNew = "I"
    
    'Delete Non-NAD Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "NAD/ FM" Then NADColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowDigital
        Range("A5").Activate
        If ActiveCell.Offset(i, NADColumn) = "P" Then
            If wsDC.Cells(5 + i, nIFF).Value <> "" And IsEmpty(wsDC.Cells(5 + i, nIFF).Value) = False And IsNumeric(wsDC.Cells(5 + i, nIFF).Value) = True And wsDC.Cells(5 + i, nIFF).Value <> "0" And _
                IsEmpty(wsDC.Cells(5 + i, nDealerPrice).Value) = False And IsNumeric(wsDC.Cells(5 + i, nDealerPrice).Value) = True And _
                IsEmpty(wsDC.Cells(5 + i, nTotalPrice).Value) = False And IsNumeric(wsDC.Cells(5 + i, nTotalPrice).Value) = True Then
                If CDbl(wsDC.Cells(5 + i, nDealerPrice).Value) + CDbl(wsDC.Cells(5 + i, nIFF).Value) = CDbl(wsDC.Cells(5 + i, nTotalPrice).Value) Then
                    wsDC.Cells(5 + i, nTotalPrice).Formula = ""
                    wsDC.Cells(5 + i, nTotalPrice).Value = CStr(CDbl(wsDC.Cells(5 + i, nDealerPrice).Value) + CDbl(wsDC.Cells(5 + i, nIFF).Value))
                End If
            End If
            
            i = i + 1
            a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
        End If
    Loop
        
    'Delete Data to Publish Column, Net Dealer Extended Cost Column, Country of Origin
    Columns("BD:BN").Select
    Selection.Delete Shift:=xlToLeft

    
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft

    
    'Delete GSA through Payment Terms
    Columns("AB:AE").Select
    Selection.Delete Shift:=xlToLeft

    
    'Delete CSMP Columns
    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft

    'Copy Values for DP, FP
    Columns("P:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
    
    'Adjust finders fees for eCopy
    e = 0
    blank = 0
    
    Do Until blank = 10 Or e = 1300
    Range("B5").Activate
    If ActiveCell.Offset(e, 0) = "" Then
        e = e + 1
        blank = blank + 1
        Else
        If ActiveCell.Offset(e, 0) = "6315A728AA" Then
            Range("B5").Activate
            ActiveCell.Offset(e, 13).Value = "=round(50*(1-$O$1),0)"
            ActiveCell.Offset(e, 13).Select
            Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="50"
    Selection.FormatConditions(1).Interior.colorindex = 34
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="50"
    Selection.FormatConditions(2).Interior.colorindex = 40
            
            Range("B5").Activate
            ActiveCell.Offset(e + 1, 13).Value = "=round(50*(1-$O$1),0)"
            ActiveCell.Offset(e + 1, 13).Select
            Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="50"
    Selection.FormatConditions(1).Interior.colorindex = 34
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="50"
    Selection.FormatConditions(2).Interior.colorindex = 40
            
            Range("B5").Activate
            ActiveCell.Offset(e + 2, 13).Value = "=round(50*(1-$O$1),0)"
            ActiveCell.Offset(e + 2, 13).Select
            Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="50"
    Selection.FormatConditions(1).Interior.colorindex = 34
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="50"
    Selection.FormatConditions(2).Interior.colorindex = 40
    
            blank = 10
            Else
            blank = 0
            e = e + 1
        End If
    End If
    Loop
    
    
    e = 0
    blank = 0
    
    Do Until blank = 10 Or e = Utils.N_MAX_ROWS_TO_SEARCH
    Range("B5").Activate
    If ActiveCell.Offset(e, 0) = "" Then
        e = e + 1
        blank = blank + 1
        Else
        If ActiveCell.Offset(e, 0) = "6315A825AA" Then
            Range("B5").Activate
            ActiveCell.Offset(e, 13).Value = "=round(150*(1-$O$1),0)"
            ActiveCell.Offset(e, 13).Select
            Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="150"
    Selection.FormatConditions(1).Interior.colorindex = 34
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="150"
    Selection.FormatConditions(2).Interior.colorindex = 40
            
            Range("B5").Activate
            ActiveCell.Offset(e + 1, 13).Value = "=round(150*(1-$O$1),0)"
            ActiveCell.Offset(e + 1, 13).Select
            Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="150"
    Selection.FormatConditions(1).Interior.colorindex = 34
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="150"
    Selection.FormatConditions(2).Interior.colorindex = 40
            
            Range("B5").Activate
            ActiveCell.Offset(e + 2, 13).Value = "=round(150*(1-$O$1),0)"
            ActiveCell.Offset(e + 2, 13).Select
            Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="150"
    Selection.FormatConditions(1).Interior.colorindex = 34
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="150"
    Selection.FormatConditions(2).Interior.colorindex = 40
    
            blank = 10
            Else
            blank = 0
            e = e + 1
        End If
    End If
    Loop

    Range("A1").Select
    
    'Hide Rate Factor Columns and Item Class Column
    Columns("G:G").Select
    Selection.EntireColumn.Hidden = True
    Columns("R:U").Select
    Selection.EntireColumn.Hidden = True
    Columns("X:AA").Select
    Selection.EntireColumn.Hidden = True
    Columns("AN:AN").Select
    Selection.EntireColumn.Hidden = True
    
    'Add filtering to Column A
    Utils.SetFilter "Digital and Color", "A3:A"
        
        'quick fix: row 5 should have no formulas
        'ClearRowFormulas Utils.STR_DIGITAL_COLOR_WORKSHEET, 5
        
    Range("A1").Select
    
    Sheets("Software").Select

    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, 1).Value = "TOTALS" Then
        TotalsRowSoftware = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop
        
    'Delete Non-NAD Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "NAD/ FM" Then NADColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowSoftware
    Range("A5").Activate
    If ActiveCell.Offset(i, NADColumn) = "P" Then
        i = i + 1
        a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
    End If
    Loop

  
    'Delete Data to Publish Column, Net Dealer Extended Cost Column, Country of Origin Column
    Columns("AQ:BA").Select
    Selection.Delete Shift:=xlToLeft

   
    'Delete Payment Terms
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete GSA Level II and HP Level II
    Columns("AB:AE").Select
    Selection.Delete Shift:=xlToLeft

    'Delete CSMP Columns
    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft
    
    
    'Copy Values for DP, FP
    Columns("P:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
    
    'Hide OM Price Coulum and Rate Factor Columns
    Columns("G:G").Select
    Selection.EntireColumn.Hidden = True
    Columns("R:U").Select
    Selection.EntireColumn.Hidden = True
    Columns("W:Z").Select
    Selection.EntireColumn.Hidden = True
    
    'Add filtering to Column A
    Utils.SetFilter "Software", "A3:A"
    
    Sheets("Fax, Printer, Scanner").Select
    
    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, 1).Value = "TOTALS" Then
        TotalsRowFax = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop

    'Delete Non-NAD Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "NAD/ FM" Then NADColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowFax
    Range("A5").Activate
    If ActiveCell.Offset(i, NADColumn) = "P" Then
        i = i + 1
        a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
    End If
    Loop
   
    'Delete Data to Publish Column, Net Dealer Extended Cost Column, Country of Origin Column
    Columns("AR:BB").Select
    Selection.Delete Shift:=xlToLeft

    'Delete GSA through Payment Terms
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete GSA Level II and HP Level II
    Columns("AB:AE").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete CSMP Columns
    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft
    
    'Copy Values for DP, FP
    Columns("P:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft

    'Hide OM Price Column, Rate Factor Columns and Item Class Column
    Columns("G:G").Select
    Selection.EntireColumn.Hidden = True
    Columns("R:U").Select
    Selection.EntireColumn.Hidden = True
    Columns("W:Z").Select
    Selection.EntireColumn.Hidden = True
    Columns("AB:AB").Select
    Selection.EntireColumn.Hidden = True
    
    'Add filtering to Column A
    Utils.SetFilter "Fax, Printer, Scanner", "A3:A"
    
    Sheets("AMP Credits").Visible = True
    
    'Remove unused sheets
    Sheets(Array("NAD Request", "Federal Request", _
        "HP Request", "FED Profit Summary", "Fed Proposal Template", "Dealer FM Request", _
        "CFS Sheet", "Credit Card - Lease", "Credit Card - Purchase", "Legacy Maintenance PAR", _
        "Credit Card - Maintenance", "PAR Approval for Dealer Templat", _
        "Instructions", "CSMP Detail Form", "Oc|fffd| Detail Form", _
        "GSA Oce Wide Format", "NAD Oce Wide Format", "Pooled Maint Wkst", "AMP Credits" _
        )).Select
        ' GSA Oce Wide Format, NAD Oce Wide Format and Pooled Maint Wkst added 04/2014
        ' 04/03/2014 - Sheets RPP Configs, D&C Configs-OM, D&C Configs-GSA & Current Systems removed as per Lori
    
    Application.CutCopyMode = False
    ActiveWindow.SelectedSheets.Delete
    
    Sheets("Profit Summary").Select
    Range("E2").Select
    ActiveCell.FormulaR1C1 = "='FM Request'!R56C7"
    Range("E3").Select
    ActiveCell.FormulaR1C1 = "='FM Request'!R6C2"
    Range("B41:E47").Select
    ActiveCell.FormulaR1C1 = "='FM Request'!R45C1"
    Range("A1").Select
    ActiveCell.FormulaR1C1 = "='FM Request'!R6C7"
    
    
    Sheets("Digital and Color").Select
    Range("A1").Select
    
    'not needed anymore as per Lori's request.
    'Call HideUniFlowInSofware(ActiveWorkbook)
    Call Utils.HidePRISMAInSofware(ActiveWorkbook)
    
    Call Utils.ApplyFormulaInFPS(ActiveWorkbook)
    
    'Deep hide data sheets
    Dim strWorksheetsToHide(6) As String
    strWorksheetsToHide(1) = "Digital and Color"
    strWorksheetsToHide(2) = "Software"
    strWorksheetsToHide(3) = "Fax, Printer, Scanner"
    strWorksheetsToHide(4) = "FTR"
    strWorksheetsToHide(5) = "NAD Proposal Template"
    strWorksheetsToHide(6) = "Profit Summary"
    
    Call SetVisibilityOfWorksheets(strWorksheetsToHide, xlSheetVeryHidden)
    
    'Sheets(Array("Digital and Color", "Software", "Fax, Printer, Scanner", _
    '             "FTR", "NAD Proposal Template", "Profit Summary" _
    '             ) _
    '      ).Select
    'ActiveWindow.SelectedSheets.Visible = False
    
    Application.ScreenUpdating = True
    
    'Remove unused modules
    Dim strAvoidances(8) As String
    Dim strDeleteList(11) As String
    Dim nTemp As Integer
    
    strAvoidances(1) = "FM"
    strAvoidances(2) = "UserFormNADFTRName"         'Used for FTR sheet naming
    strAvoidances(3) = "UserFormChannelSelection"
    strAvoidances(4) = "RemoveModules"
    strAvoidances(5) = "Utils"
    strAvoidances(6) = "UserFormCSMPUpload"
    strAvoidances(7) = "frmOffers"
    strAvoidances(8) = "frmRevisions"
    
    nTemp = RemoveModules.RemoveModules(strAvoidances)
    
    strDeleteList(1) = "UserFormDealerFM"
    strDeleteList(2) = "UserFormDFMPricingDashboard"
    strDeleteList(3) = "UserFormDealerFMHQDashboard"
    strDeleteList(4) = "UserFormDealerFMImportPricing"
    strDeleteList(5) = "UserFormDealerFMImportPricing2"
    strDeleteList(6) = "DealerFMForm"
    strDeleteList(7) = "DealerFMTotals"
    strDeleteList(8) = "DealerFMHQDashboard"
    strDeleteList(9) = "DealerFMImportPricing"
    strDeleteList(10) = "DealerFMPricingDashboard"
    strDeleteList(11) = "DealerFMImportPricingDashboard"
    nTemp = nTemp + RemoveModules.RemoveModulesByName(strDeleteList)
    
    'Update Add-ins menu
    Call Utils.SetMenuBar("Call Utils.AddAddIn2menuBar(""Version"", ""Utils.GetVersion""):Call Utils.AddAddIn2menuBar(""Pricing Dashboard"", ""FMPricingDashboard.FMPricingDashboard""):Call Utils.AddAddIn2menuBar(""HQ Dashboard"", ""FMHQDashboard.FMHQDashboard""):Call Utils.AddAddIn2menuBar(""Unprotect Worksheets"", ""Utils.UnprotectDataWorksheets""):Call Utils.AddAddIn2menuBar(""Copy Landed Cost"", ""Utils.CopyFMLandedCost"")", _
                          "Call Utils.RemoveAddInFromMenuBar(""Version""):Call Utils.RemoveAddInFromMenuBar(""Pricing Dashboard""):Call Utils.RemoveAddInFromMenuBar(""HQ Dashboard""):Call Utils.RemoveAddInFromMenuBar(""Unprotect Worksheets""):Call Utils.RemoveAddInFromMenuBar(""Copy Landed Cost""):Call Utils.CleanDataSheetsFromAutoShapes(Application.ThisWorkbook)")
    
    'Protect FM Request sheet
    Dim strSheetList(1) As String
    strSheetList(1) = "FM Request"
    Call Utils.ProtectWorksheets(True, "team", strSheetList)
    
    'Save FM Pricing workbook
    Call EndOfProcess("FM", "% off MSRP")

End Sub

Private Sub HPButton_Click()

    If ReminderToSaveBackup = True Then Exit Sub

Dim a As Integer
Dim i As Integer
Dim TotalsRowDigital As Integer
Dim TotalsRowSoftware As Integer
Dim TotalsRowFax As Integer
Dim NADColumn As Integer


UserFormChannelSelection.Hide
'Application.ScreenUpdating = False

Call Utils.AssignMacro2Cell(ActiveWorkbook, "Digital and Color", "Rectangle 385", "HPTotals.HPTotals")
Call Utils.AssignMacro2Cell(ActiveWorkbook, "Software", "Rectangle 54", "HPTotals.HPTotals")
Call Utils.AssignMacro2Cell(ActiveWorkbook, "Fax, Printer, Scanner", "Rectangle 50", "HPTotals.HPTotals")


'DIGITAL AND COLOR
Sheets("Digital and Color").Select

    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, 1).Value = "TOTALS" Then
        TotalsRowDigital = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop
        
    'Delete Non-HP Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "HP" Then NADColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowDigital
    Range("A5").Activate
    If ActiveCell.Offset(i, NADColumn) = "P" Then
        i = i + 1
        a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
    End If
    Loop

    'Delete Data to Publish
    Columns("BH:BN").Select
    Selection.Delete Shift:=xlToLeft

    'Delete Net Dealer Extended Cost Column
    Columns("BD:BG").Select
    Selection.Delete Shift:=xlToLeft

    'Move Maintenance Included Label
    Range("AQ1").Select
    Selection.Cut Destination:=Range("AM1")
 
    'Delete Rate Factor Label
    Range("AF1").Select
    Selection.ClearContents
    
    'Delete Rate Factor Columns
    Columns("AN:AQ").Select
    Selection.Delete Shift:=xlToLeft

    Columns("AH:AK").Select
    Selection.Delete Shift:=xlToLeft
    
    Columns("AB:AE").Select
    Selection.Delete Shift:=xlToLeft

    Columns("W:W").Select
    Selection.Delete Shift:=xlToLeft
    Range("Z1").Select
    Selection.AutoFill Destination:=Range("O1:Z1"), Type:=xlFillDefault
    Range("O1:Z1").Select

    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft
    Columns("AA:AA").Select
    Selection.Cut
    Columns("S:S").Select
    Selection.Insert Shift:=xlToRight
    
    'Insert Column for HP Level I
    Columns("S:S").Select
    Selection.Copy
    Columns("R:R").Select
    ActiveSheet.Paste
    Range("R2").Select
    Application.CutCopyMode = False
    ActiveCell.FormulaR1C1 = "HP Level I Price"
    With ActiveCell.Characters(Start:=1, Length:=16).Font
        .Name = "Arial"
        .FontStyle = "Bold"
        .Size = 10
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .colorindex = 1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    Range("S2").Select
    ActiveCell.FormulaR1C1 = "HP Level II Price"
    With ActiveCell.Characters(Start:=1, Length:=17).Font
        .Name = "Arial"
        .FontStyle = "Bold"
        .Size = 10
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .colorindex = 1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    
    'Copy HP Level I Price
            x = 0
            Range("R5").Value = "=ROUNDUP(RC[2]*.80+RC[6]+RC[7],0)"
            Do While x < TotalsRowDigital
            Range("R5").Select
            Selection.Copy
            If ActiveCell.Offset(x, 1).Value <> "" Then
                Range("R5").Select
                ActiveCell.Offset(x, 0).Select
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                SkipBlanks:=False, Transpose:=False
                x = x + 1
                Else
                x = x + 1
                End If
            Loop
    
  
    
    Columns("Q:Q").Select
    Selection.Delete Shift:=xlToLeft
    
    'Copy values for DP
    Columns("Q:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    'Delete Master Data
    Columns("E:N").Select
    Range("N2").Activate
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    
    'Copy Plus Percent
        x = 0
        Range("J5").Value = "=IF(RC[1]<>"""",(RC[1]/RC[-2])-1,R3C)"
        Do While x < TotalsRowDigital
        Range("J5").Select
        Selection.Copy
        If ActiveCell.Offset(x, -1).Value <> "" Then
            Range("J5").Select
            ActiveCell.Offset(x, 0).Select
            Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
            x = x + 1
            Else
            x = x + 1
            End If
        Loop
            
    'Copy HP Level II Plus
        Range("L2").Value = "HP Level II Plus"
        x = 0
        Range("L5").Value = "=RC[-4]*(1+RC[-2])-RC[1]-RC[2]"
        Do While x < TotalsRowDigital
        Range("L5").Select
        Selection.Copy
        If ActiveCell.Offset(x, -3).Value <> "" Then
            Range("L5").Select
            ActiveCell.Offset(x, 0).Select
            Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
            x = x + 1
            Else
            x = x + 1
            End If
        Loop
        
    'Copy Finders Fees
        x = 0
        Range("N5").Value = "=ROUND(RC[-5]*.05,0)"
        Do While x < TotalsRowDigital
        Range("N5").Select
        Selection.Copy
        If ActiveCell.Offset(x, 0).Value <> "" Then
            Range("N5").Select
            ActiveCell.Offset(x, 0).Select
            Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
            x = x + 1
            Else
            x = x + 1
            End If
        Loop
        
    'Hide Item Type
    Columns("AE:AE").Select
    Selection.EntireColumn.Hidden = True

    'Add Sorting to Quantity Column
    Utils.SetFilter "Digital and Color", "E3:E"
    
Sheets("Software").Select
    
    'Remove validations
    Columns("T:X").Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
        :=xlBetween
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = ""
        .ShowInput = False
        .ShowError = False
    End With


    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, 1).Value = "TOTALS" Then
        TotalsRowSoftware = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop
        
    'Delete Non-HP Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "HP" Then NADColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowSoftware
    Range("A5").Activate
    If ActiveCell.Offset(i, NADColumn) = "P" Then
        i = i + 1
        a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
    End If
    Loop
    
    'Delete from Rates to Data to Publish
    Columns("AH:BA").Select
    Selection.Delete Shift:=xlToLeft

    Columns("AG:AG").Select
    Selection.Cut
    Columns("S:S").Select
    Selection.Insert Shift:=xlToRight
    
    'Insert Column for HP Level I
    Columns("S:S").Select
    Selection.Copy
    Columns("R:R").Select
    ActiveSheet.Paste
    Range("R2").Select
    Application.CutCopyMode = False
    ActiveCell.FormulaR1C1 = "HP Level I Price"
    With ActiveCell.Characters(Start:=1, Length:=16).Font
        .Name = "Arial"
        .FontStyle = "Bold"
        .Size = 10
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .colorindex = 1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    Range("S2").Select
    ActiveCell.FormulaR1C1 = "HP Level II Price"
    With ActiveCell.Characters(Start:=1, Length:=17).Font
        .Name = "Arial"
        .FontStyle = "Bold"
        .Size = 10
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .colorindex = 1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    
    'Copy HP Level I Price
            x = 0
            ' (WB) As per Mollie - changed rate from .80 to .95 for software tab
            'Range("R6").Value = "=ROUNDUP(RC[2]*.80+RC[8]+RC[9],0)"
            Range("R6").Value = "=ROUNDUP(RC[2]*.95+RC[8]+RC[9],0)"
            Do While x < TotalsRowSoftware
            Range("R6").Select
            Selection.Copy
            If ActiveCell.Offset(x, 1).Value <> "" Then
                Range("R6").Select
                ActiveCell.Offset(x, 0).Select
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                SkipBlanks:=False, Transpose:=False
                x = x + 1
                Else
                x = x + 1
                End If
            Loop
      
    Columns("Q:Q").Select
    Selection.Delete Shift:=xlToLeft
    
    'Deviation Number Column
    Columns("W:W").Select
    Selection.Delete Shift:=xlToLeft
    
    'CSMP Credit Column
    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft
    
    'Copy values for DP
    Columns("Q:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    'Delete IFF, Mark Programs Column
    Columns("Z:AC").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete Master Data
    Columns("E:N").Select
    Range("N2").Activate
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    
    'Copy Plus Percent
        x = 0
        Range("J6").Value = "=IF(RC[1]<>"""",(RC[1]/RC[-2])-1,R3C)"
        Do While x < TotalsRowSoftware
        Range("J6").Select
        Selection.Copy
        If ActiveCell.Offset(x, -1).Value <> "" Then
            Range("J6").Select
            ActiveCell.Offset(x, 0).Select
            Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
            x = x + 1
            Else
            x = x + 1
            End If
        Loop
            
    'Copy HP Level II Plus
        Range("L2").Value = "HP Level II Plus"
        x = 0
        Range("L6").Value = "=RC[-4]*(1+RC[-2])-RC[1]-RC[2]"
        Do While x < TotalsRowSoftware
        Range("L6").Select
        Selection.Copy
        If ActiveCell.Offset(x, -3).Value <> "" Then
            Range("L6").Select
            ActiveCell.Offset(x, 0).Select
            Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
            x = x + 1
            Else
            x = x + 1
            End If
        Loop
        
    'Copy Finders Fees
        'x = 0
        'Range("N6").Value = "=ROUND(RC[-5]*.05,0)"
        'Do While x < TotalsRowSoftware
        'Range("N6").Select
        'Selection.Copy
        'If ActiveCell.Offset(x, 0).Value <> "" Then
            'Range("N6").Select
            'ActiveCell.Offset(x, 0).Select
            'Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
            'SkipBlanks:=False, Transpose:=False
            'x = x + 1
            'Else
            'x = x + 1
            'End If
        'Loop
        
    'Copy Total Price
        x = 0
        Range("P6").Value = "=ROUNDUP(RC[-4]+RC[-3]+RC[-2]+RC[-1],0)"
        Do While x < TotalsRowSoftware
        Range("P6").Select
        Selection.Copy
        If ActiveCell.Offset(x, 0).Value <> "" Then
            Range("P6").Select
            ActiveCell.Offset(x, 0).Select
            Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
            x = x + 1
            Else
            x = x + 1
            End If
        Loop

    'Delete Rate Factor Label
    Range("P1").Select
    Selection.ClearContents
    
    'Format Top Row
    Range("I1").Select
    Selection.AutoFill Destination:=Range("I1:P1"), Type:=xlFillDefault
    Range("I1").Select
    Selection.AutoFill Destination:=Range("E1:I1"), Type:=xlFillDefault

    Range("A1").Select
    
    'Add Sorting to Quantity Column
    Utils.SetFilter "Software", "E3:E"

Sheets("Fax, Printer, Scanner").Select

    'Remove validations
    Columns("T:X").Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
        :=xlBetween
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = ""
        .ShowInput = False
        .ShowError = False
    End With


    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, 1).Value = "TOTALS" Then
        TotalsRowFax = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop
        
    'Delete Non-HP Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "HP" Then NADColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowFax
    Range("A4").Activate
    If ActiveCell.Offset(i, NADColumn) = "P" Then
        i = i + 1
        a = a + 1
        Else
            Rows(i + 4).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
    End If
    Loop
    
    
    'Delete from Rates to Data to Publish
    Columns("AH:BB").Select
    Selection.Delete Shift:=xlToLeft

    Range("AF1").Select
    Selection.Cut Destination:=Range("AE1")
    
    Columns("AB:AE").Select
    Selection.Delete Shift:=xlToLeft

    Columns("W:W").Select
    Selection.Delete Shift:=xlToLeft

    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft

    Columns("AA:AA").Select
    Selection.Cut
    Columns("S:S").Select
    Selection.Insert Shift:=xlToRight
    Columns("Q:Q").Select
    Selection.Delete Shift:=xlToLeft
    Columns("R:R").Select
    Selection.Copy
    Columns("Q:Q").Select
    ActiveSheet.Paste
    
    Range("Q2").Select
    Application.CutCopyMode = False
    ActiveCell.FormulaR1C1 = "HP Level I Price"
    With ActiveCell.Characters(Start:=1, Length:=10).Font
        .Name = "Arial"
        .FontStyle = "Bold"
        .Size = 10
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .colorindex = 1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    Range("Q3").Select

    'Copy HP Level I Price
        x = 0
        Range("Q5").Value = "=ROUNDUP(RC[2]*.80+RC[6]+RC[7],0)"
        Do While x < TotalsRowFax
        Range("Q5").Select
        Selection.Copy
        If ActiveCell.Offset(x, 1).Value <> "" Then
            Range("Q5").Select
            ActiveCell.Offset(x, 0).Select
            Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
            x = x + 1
            Else
            x = x + 1
            End If
        Loop
            
    Range("Q2").Value = "HP Level I Price"
    Range("R2").Value = "HP Level II Price"
    
    'Copy values for DP
    Columns("Q:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    'Delete Master Data
    Columns("E:N").Select
    Range("N2").Activate
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    
    'Copy Plus Percent
        x = 0
        Range("J5").Value = "=IF(RC[1]<>"""",(RC[1]/RC[-2])-1,R3C)"
        Do While x < TotalsRowFax
        Range("J5").Select
        Selection.Copy
        If ActiveCell.Offset(x, -1).Value <> "" Then
            Range("J5").Select
            ActiveCell.Offset(x, 0).Select
            Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
            x = x + 1
            Else
            x = x + 1
            End If
        Loop
            
    'Copy HP Level II Plus
        Range("L2").Value = "HP Level II Plus"
        x = 0
        Range("L5").Value = "=RC[-4]*(1+RC[-2])-RC[1]-RC[2]"
        Do While x < TotalsRowFax
        Range("L5").Select
        Selection.Copy
        If ActiveCell.Offset(x, -3).Value <> "" Then
            Range("L5").Select
            ActiveCell.Offset(x, 0).Select
            Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
            x = x + 1
            Else
            x = x + 1
            End If
        Loop
        
    'Copy Finders Fees
        x = 0
        Range("N5").Value = "=ROUND(RC[-5]*.05,0)"
        Do While x < TotalsRowFax
        Range("N5").Select
        Selection.Copy
        If ActiveCell.Offset(x, 0).Value <> "" Then
            Range("N5").Select
            ActiveCell.Offset(x, 0).Select
            Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
            x = x + 1
            Else
            x = x + 1
            End If
        Loop
        
        'Copy Total Price
        x = 0
        Range("P5").Value = "=ROUNDUP(RC[-4]+RC[-3]+RC[-2]+RC[-1],0)"
        Do While x < TotalsRowFax
        Range("P5").Select
        Selection.Copy
        If ActiveCell.Offset(x, 0).Value <> "" Then
            Range("P5").Select
            ActiveCell.Offset(x, 0).Select
            Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
            x = x + 1
            Else
            x = x + 1
            End If
        Loop

    'Hide Item Type
    Columns("Q:Q").Select
    Selection.EntireColumn.Hidden = True

    'Format Top Row
    Range("I1").Select
    Selection.AutoFill Destination:=Range("I1:P1"), Type:=xlFillDefault
    Range("I1").Select
    Selection.AutoFill Destination:=Range("E1:I1"), Type:=xlFillDefault
    
    Range("A1").Select
    
    'Add Sorting to Quantity Column
    Utils.SetFilter "Fax, Printer, Scanner", "E3:E"

    Application.ScreenUpdating = True

    Sheets("AMP Credits").Visible = True
    
    ' Remove unused sheets
    Sheets(Array( _
                 "CFS Sheet", "Fed Proposal Template", "NAD REquest", "Instructions", _
                 "PAR Approval for Dealer Templat", _
                 "FM Request", "Federal Request", "Dealer FM Request", _
                 "Credit Card - Purchase", "FTR", "CSMP Detail Form", "FED Profit Summary", _
                 "Credit Card - Lease", "NAD Proposal Template", _
                 "Credit Card - Maintenance", "Oc|fffd| Detail Form", "Legacy Maintenance PAR", _
                 "GSA Oce Wide Format", "NAD Oce Wide Format", "Pooled Maint Wkst", "AMP Credits" _
                 )).Select
                 ' GSA Oce Wide Format, NAD Oce Wide Format and Pooled Maint Wkst added 04/2014
                 ' 04/03/2014 - Sheets RPP Configs, D&C Configs-OM, D&C Configs-GSA & Current Systems removed as per Lori
    
    ActiveWindow.SelectedSheets.Delete
    ActiveWindow.ScrollWorkbookTabs Position:=xlFirst
    
    Sheets("Profit Summary").Select
    Range("E3").Select
    ActiveCell.Formula = "='HP Request'!F14"
    Range("A1").Select
    ActiveCell.Formula = "='HP Request'!B4"
    Range("B41").Select
    ActiveCell.Formula = "='HP Request'!A45"
    
    ' As per Mollie - After split, hide Columns "I", "L-O" & "Q-Z" on the D&C tab, "I" & "L-O" on the Software tab
    Sheets("Digital and Color").Select
    Columns("I").Hidden = True
    Columns("L:O").Hidden = True
    Columns("Q:Z").Hidden = True
    
    'must be "Yes" for HP
    Range("Y1").Value = "Yes"
    
    Sheets("Software").Select
    Columns("I").Hidden = True
    Columns("L:O").Hidden = True
    
    'remove 4th row for HP
    Range("A4").EntireRow.Delete Shift:=xlUp
    
    Sheets("Digital and Color").Select
        
    'remove formulas from blank rows
    Call Utils.RemoveFormulasInBlankRows(Sheets("Digital and Color"))
    Call Utils.RemoveFormulasInBlankRows(Sheets("Software"))
    
    'Deep hide data sheets
    Dim strWorksheetsToHide(4) As String
    strWorksheetsToHide(1) = "Digital and Color"
    strWorksheetsToHide(2) = "Software"
    strWorksheetsToHide(3) = "Fax, Printer, Scanner"
    strWorksheetsToHide(4) = "Profit Summary"
    
    Call SetVisibilityOfWorksheets(strWorksheetsToHide, xlSheetVeryHidden)

    'Sheets(Array("Digital and Color", "Software", "Fax, Printer, Scanner", "Profit Summary")).Select
    'ActiveWindow.SelectedSheets.Visible = False
    
    Application.ScreenUpdating = True
    
    ' Remove unused objects
    Dim strAvoidances(4) As String
    Dim strDeleteList(4) As String
    Dim nTemp As Integer
    
    strAvoidances(1) = "HP"
    strAvoidances(2) = "UserFormChannelSelection"
    strAvoidances(3) = "RemoveModules"
    strAvoidances(4) = "Utils"
    nTemp = RemoveModules.RemoveModules(strAvoidances)
    
    'Update Add-ins menu
    Call Utils.SetMenuBar("Call Utils.AddAddIn2menuBar(""Version"", ""Utils.GetVersion""):Call Utils.AddAddIn2menuBar(""Calculations"", ""HPCalculations.HPCalculations""):Call Utils.AddAddIn2menuBar(""Unprotect Worksheets"", ""Utils.UnprotectDataWorksheets""):Call Utils.AddAddIn2menuBar(""Copy Landed Cost"", ""Utils.CopyHPLandedCost"")", _
                          "Call Utils.RemoveAddInFromMenuBar(""Version""):Call Utils.RemoveAddInFromMenuBar(""Calculations""):Call Utils.RemoveAddInFromMenuBar(""Unprotect Worksheets""):Call Utils.RemoveAddInFromMenuBar(""Copy Landed Cost""):Call Utils.CleanDataSheetsFromAutoShapes(Application.ThisWorkbook)")
    
    
    'Protect Request form
    Dim strSheetList(1) As String
    strSheetList(1) = "HP Request"
    Call Utils.ProtectWorksheets(True, "team", strSheetList)
    
    'Finalize HP split
    Call EndOfProcess("HP", "")

End Sub



Private Sub NADButton_Click()
    
    If ReminderToSaveBackup = True Then Exit Sub
    
    Dim a As Integer
    Dim i As Integer
    Dim TotalsRowDigital As Integer
    Dim TotalsRowSoftware As Integer
    Dim TotalsRowFax As Integer
    Dim NADColumn As Integer
    
    Dim strRateFactorCellValue As String
    Dim RateFactorRow As Integer
    
    
    'Application.ScreenUpdating = False
    UserFormChannelSelection.Hide
        
    
    ' update macro assigned to TOTALS click
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Digital and Color", "Rectangle 385", "NADTotals.NADTotals")
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Software", "Rectangle 54", "NADTotals.NADTotals")
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Fax, Printer, Scanner", "Rectangle 50", "NADTotals.NADTotals")
    
    
    Sheets("Digital and Color").Select
    
    '--- Insert the proper NAD rates into Digital & Color worksheet
    
        'updated logic on 01-30-2014
    ' Attempt to find the 1st of 3 rows to modify
    RateFactorRow = Utils.FindRowIndexByCellText(ActiveSheet, STR_PRODUCTION_MODELS_SECTION, 4, Utils.N_MAX_ROWS_TO_SEARCH)
    
    ' Change rates for the first row (Digital Color Copier)
    Range("AH" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_24
    Range("AI" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_36
    Range("AJ" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_48
    Range("AK" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_60
    
    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, 1).Value = "TOTALS" Then
        TotalsRowDigital = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop
        
    'Delete Non-NAD Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "NAD/ FM" Then NADColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowDigital
    Range("A5").Activate
    If ActiveCell.Offset(i, NADColumn) = "P" Then
        i = i + 1
        a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
    End If
    Loop

    'Delete Data to Publish Column, Net Dealer Extended Cost Column, Country of Origin
    Columns("BD:BN").Select
    Selection.Delete Shift:=xlToLeft

    
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft

    
    'Delete GSA through Payment Terms
    Columns("AB:AE").Select
    Selection.Delete Shift:=xlToLeft

    
    'Delete CSMP Columns
    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft

    'Copy Values for DP, FP
    Columns("P:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
    
    
    
    'Hide Rate Factor Columns and Item Class Column
    Columns("G:G").Select
    Selection.EntireColumn.Hidden = True
    Columns("R:U").Select
    Selection.EntireColumn.Hidden = True
    Columns("X:AA").Select
    Selection.EntireColumn.Hidden = True
    Columns("AN:AN").Select
    Selection.EntireColumn.Hidden = True
    
    'Add filtering to Column A
    Utils.SetFilter "Digital and Color", "A3:A"
    
    Range("A1").Select
    
    'SOFTWARE
    Sheets("Software").Select

    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, 1).Value = "TOTALS" Then
        TotalsRowSoftware = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop
        
    'Delete Non-NAD Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "NAD/ FM" Then NADColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowSoftware
    Range("A5").Activate
    If ActiveCell.Offset(i, NADColumn) = "P" Then
        i = i + 1
        a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
    End If
    Loop

  
    'Delete Data to Publish Column, Net Dealer Extended Cost Column, Country of Origin Column
    Columns("AQ:BA").Select
    Selection.Delete Shift:=xlToLeft

   
    'Delete Payment Terms
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete GSA Level II and HP Level II
    Columns("AB:AE").Select
    Selection.Delete Shift:=xlToLeft

    'Delete CSMP Columns
    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft
    
    
    'Copy Values for DP, FP
    Columns("P:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
    
    'Hide OM Price Coulum and Rate Factor Columns
    Columns("G:G").Select
    Selection.EntireColumn.Hidden = True
    Columns("R:U").Select
    Selection.EntireColumn.Hidden = True
    Columns("W:Z").Select
    Selection.EntireColumn.Hidden = True
    
    'Add filtering to Column A
    Utils.SetFilter "Software", "A3:A"
    
    'FAX, PRINTER, SCANNER
    Sheets("Fax, Printer, Scanner").Select
    
    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, 1).Value = "TOTALS" Then
        TotalsRowFax = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop

    'Delete Non-NAD Line Items
    i = 0
    Range("A2").Select
    Do While i < 70
        If ActiveCell.Offset(0, i) = "NAD/ FM" Then NADColumn = i
        i = i + 1
    Loop
    i = 0
    a = 0
    Do While a < TotalsRowFax
    Range("A5").Activate
    If ActiveCell.Offset(i, NADColumn) = "P" Then
        i = i + 1
        a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
    End If
    Loop
   
    'Delete Data to Publish Column, Net Dealer Extended Cost Column, Country of Origin Column
    Columns("AR:BB").Select
    Selection.Delete Shift:=xlToLeft

    'Delete GSA through Payment Terms
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete GSA Level II and HP Level II
    Columns("AB:AE").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete CSMP Columns
    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft
    
    'Copy Values for DP, FP
    Columns("P:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft

    'Hide OM Price Column, Rate Factor Columns and Item Class Column
    Columns("G:G").Select
    Selection.EntireColumn.Hidden = True
    Columns("R:U").Select
    Selection.EntireColumn.Hidden = True
    Columns("W:Z").Select
    Selection.EntireColumn.Hidden = True
    Columns("AB:AB").Select
    Selection.EntireColumn.Hidden = True
    
    'Add filtering to Column A
    Utils.SetFilter "Fax, Printer, Scanner", "A3:A"
    Range("A1").Select

    Sheets("AMP Credits").Visible = True
    
    'Remove unused sheets
    Sheets(Array( _
             "FM Request", "Federal Request", "FED Profit Summary", "Fed Proposal Template", _
             "HP Request", _
             "CFS Sheet", "Dealer FM Request", "Credit Card - Lease", _
             "Credit Card - Purchase", "Credit Card - Maintenance", _
             "PAR Approval for Dealer Templat", _
             "Instructions", "CSMP Detail Form", "Oc|fffd| Detail Form", _
             "Legacy Maintenance PAR", _
             "GSA Oce Wide Format", "Pooled Maint Wkst", "AMP Credits" _
            )).Select
            ' GSA Oce Wide Format and Pooled Maint Wkst added 04/2014
            ' 04/03/2014 - Sheets RPP Configs, D&C Configs-OM, D&C Configs-GSA & Current Systems removed as per Lori
    
    Sheets("FM Request").Activate
    ActiveWindow.SelectedSheets.Delete
    ActiveWindow.ScrollWorkbookTabs Position:=xlFirst
    
    Sheets("Digital and Color").Select
    Range("A1").Select

    Call HideUniFlowInSofware(ActiveWorkbook)
    Call HidePRISMAInSofware(ActiveWorkbook)
    
    'Deep hide data sheets
    Dim strWorksheetsToHide(7) As String
    strWorksheetsToHide(1) = "Digital and Color"
    strWorksheetsToHide(2) = "Software"
    strWorksheetsToHide(3) = "Fax, Printer, Scanner"
    strWorksheetsToHide(4) = "Profit Summary"
    strWorksheetsToHide(5) = "FTR"
    strWorksheetsToHide(6) = "NAD Proposal Template"
    strWorksheetsToHide(7) = "NAD Oce Wide Format" ' Added 04/2014
    
    Call SetVisibilityOfWorksheets(strWorksheetsToHide, xlSheetVeryHidden)

    'Sheets(Array("Digital and Color", "Software", "Fax, Printer, Scanner", "Profit Summary", _
    '             "FTR", "NAD Proposal Template")).Select
    'ActiveWindow.SelectedSheets.Visible = False
            
    Application.ScreenUpdating = True
    
    'Remove unused modules
    Dim strAvoidances(5) As String
    Dim nTemp As Integer
    
    strAvoidances(1) = "NAD"
    strAvoidances(2) = "UserFormNADFTRName"
    strAvoidances(3) = "UserFormChannelSelection"
    strAvoidances(4) = "RemoveModules"
    strAvoidances(5) = "Util"
        
    nTemp = RemoveModules.RemoveModules(strAvoidances)
    
    'Protect NAD Request sheet
    Dim strSheetList(1) As String
    strSheetList(1) = "NAD Request"
    Call Utils.ProtectWorksheets(True, "team", strSheetList)
    
    'Update Add-ins menu
    Call Utils.SetMenuBar("Call Utils.AddAddIn2menuBar(""Version"", ""Utils.GetVersion""):Call Utils.AddAddIn2menuBar(""Pricing Dashboard"", ""NADPricingDashboard.NADPricingDashboard""):Call Utils.AddAddIn2menuBar(""HQ Dashboard"", ""NADHQDashboard.NADHQDashboard""):Call Utils.AddAddIn2menuBar(""Unprotect Worksheets"", ""Utils.UnprotectDataWorksheets""):Call Utils.AddAddIn2menuBar(""Copy Landed Cost"", ""Utils.CopyNADLandedCost"")", _
                          "Call Utils.RemoveAddInFromMenuBar(""Version""):Call Utils.RemoveAddInFromMenuBar(""Pricing Dashboard""):Call Utils.RemoveAddInFromMenuBar(""HQ Dashboard""):Call Utils.RemoveAddInFromMenuBar(""Unprotect Worksheets""):Call Utils.RemoveAddInFromMenuBar(""Copy Landed Cost""):Call Utils.CleanDataSheetsFromAutoShapes(Application.ThisWorkbook)")
    
    Call Utils.GenericSpecialValues(ActiveWorkbook, "NAD", "B", "C")
    
    'Finalize NAD split
    Call EndOfProcess("NAD", "% off MSRP")

End Sub

Private Sub PEAKButton_Click()
    Dim a As Integer
    Dim i As Integer
    Dim TotalsRowDigital As Integer
    Dim TotalsRowSoftware As Integer
    Dim TotalsRowFax As Integer
    Dim PEAKColumn As Integer
    Dim ItemNumberColumn As Integer
    Dim wsCurrent As Worksheet
    
    'Application.ScreenUpdating = False
    
    UserFormChannelSelection.Hide
    
    ' update macro assigned to TOTALS click
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Digital and Color", "Rectangle 385", "FMTotals.FMTotals")
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Software", "Rectangle 54", "FMTotals.FMTotals")
    Call Utils.AssignMacro2Cell(ActiveWorkbook, "Fax, Printer, Scanner", "Rectangle 50", "FMTotals.FMTotals")
    
    
    Sheets("Digital and Color").Select
    
Set wsCurrent = ActiveWorkbook.Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET)

    '--- Insert the proper NAD rates into Digital & Color worksheet
    
    ' Attempt to find the 1st of 3 rows to modify
    RateFactorRow = Utils.FindRowIndexByCellText(ActiveSheet, "imagePRESS C7010VP/C6010VP/C6010", 4, Utils.N_MAX_ROWS_TO_SEARCH)
    
    ' Change rates for the first row (Digital Color Copier)
    Range("AH" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_24
    Range("AI" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_36
    Range("AJ" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_48
    Range("AK" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_60
    
    ' Attempt to find the 2nd of 3 rows to modify
    RateFactorRow = Utils.FindRowIndexByCellText(ActiveSheet, "imagePRESS C7010VPS/C6010VPS/C6010S", 4, Utils.N_MAX_ROWS_TO_SEARCH)
    
    ' Change rates for the second row (Digital Color Copier)
    Range("AH" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_24
    Range("AI" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_36
    Range("AJ" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_48
    Range("AK" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADDigitalColorCopierNoCancel_60
    
    ' Attempt to find the last row to modify
    RateFactorRow = Utils.FindRowIndexByCellText(ActiveSheet, "X-Rite i1 Process Control", 4, Utils.N_MAX_ROWS_TO_SEARCH)
    
    ' Change rates for the third row (Digital Color Copier)
    Range("AH" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADAllEquipmentNoCancel_24
    Range("AI" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADAllEquipmentNoCancel_36
    Range("AJ" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADAllEquipmentNoCancel_48
    Range("AK" + CStr(RateFactorRow)).Value = GlobalRateFactors.grf_NADAllEquipmentNoCancel_60
    
    'Find the Totals Row
    ItemNumberColumn = Utils.ColIndexExactMatch(wsCurrent, "Item #", 2)
        
    TotalsRowDigital = Utils.RowsToScan(wsCurrent, "TOTALS", ItemNumberColumn)
    
    PrintDbgMsg "TotalsRowDigital: " & TotalsRowDigital
    
    'Delete PEAK Line Items
    PEAKColumn = Utils.ColIndexExactMatch(wsCurrent, "PEAK", 2)
    
    i = 0
    a = 0
    Do While a < TotalsRowDigital
        If wsCurrent.Cells(i + 5, PEAKColumn).Value = "P" Then
            i = i + 1
        Else
            wsCurrent.Rows(i + 5).Delete Shift:=xlUp
        End If

        a = a + 1
    Loop
    
    'adjust for removed rows
    TotalsRowDigital = i + 5
    
    'Delete Data to Publish Column, Net Dealer Extended Cost Column, Country of Origin
    Columns("BD:BN").Select
    Selection.Delete Shift:=xlToLeft

    
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft

    
    'Delete GSA through Payment Terms
    Columns("AB:AE").Select
    Selection.Delete Shift:=xlToLeft

    
    'Delete CSMP Columns
    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft

    'Copy Values for DP, FP
    Columns("P:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
    
    'Adjust finders fees for eCopy
    e = 0
    blank = 0
    
    Do Until blank = 10 Or e = 1300
    Range("B5").Activate
    If ActiveCell.Offset(e, 0) = "" Then
        e = e + 1
        blank = blank + 1
        Else
        If ActiveCell.Offset(e, 0) = "6315A728AA" Then
            Range("B5").Activate
            ActiveCell.Offset(e, 13).Value = "=round(50*(1-$O$1),0)"
            ActiveCell.Offset(e, 13).Select
            Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="50"
    Selection.FormatConditions(1).Interior.colorindex = 34
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="50"
    Selection.FormatConditions(2).Interior.colorindex = 40
            
            Range("B5").Activate
            ActiveCell.Offset(e + 1, 13).Value = "=round(50*(1-$O$1),0)"
            ActiveCell.Offset(e + 1, 13).Select
            Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="50"
    Selection.FormatConditions(1).Interior.colorindex = 34
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="50"
    Selection.FormatConditions(2).Interior.colorindex = 40
            
            Range("B5").Activate
            ActiveCell.Offset(e + 2, 13).Value = "=round(50*(1-$O$1),0)"
            ActiveCell.Offset(e + 2, 13).Select
            Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="50"
    Selection.FormatConditions(1).Interior.colorindex = 34
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="50"
    Selection.FormatConditions(2).Interior.colorindex = 40
    
            blank = 10
            Else
            blank = 0
            e = e + 1
        End If
    End If
    Loop
    
    
    e = 0
    blank = 0
    
    Do Until blank = 10 Or e = Utils.N_MAX_ROWS_TO_SEARCH
    Range("B5").Activate
    If ActiveCell.Offset(e, 0) = "" Then
        e = e + 1
        blank = blank + 1
        Else
        If ActiveCell.Offset(e, 0) = "6315A825AA" Then
            Range("B5").Activate
            ActiveCell.Offset(e, 13).Value = "=round(150*(1-$O$1),0)"
            ActiveCell.Offset(e, 13).Select
            Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="150"
    Selection.FormatConditions(1).Interior.colorindex = 34
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="150"
    Selection.FormatConditions(2).Interior.colorindex = 40
            
            Range("B5").Activate
            ActiveCell.Offset(e + 1, 13).Value = "=round(150*(1-$O$1),0)"
            ActiveCell.Offset(e + 1, 13).Select
            Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="150"
    Selection.FormatConditions(1).Interior.colorindex = 34
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="150"
    Selection.FormatConditions(2).Interior.colorindex = 40
            
            Range("B5").Activate
            ActiveCell.Offset(e + 2, 13).Value = "=round(150*(1-$O$1),0)"
            ActiveCell.Offset(e + 2, 13).Select
            Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="150"
    Selection.FormatConditions(1).Interior.colorindex = 34
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="150"
    Selection.FormatConditions(2).Interior.colorindex = 40
    
            blank = 10
            Else
            blank = 0
            e = e + 1
        End If
    End If
    Loop

    Range("A1").Select
    
    'Hide Rate Factor Columns and Item Class Column
    Columns("G:G").Select
    Selection.EntireColumn.Hidden = True
    Columns("R:U").Select
    Selection.EntireColumn.Hidden = True
    Columns("X:AA").Select
    Selection.EntireColumn.Hidden = True
    Columns("AN:AN").Select
    Selection.EntireColumn.Hidden = True
    
    'Add filtering to Column A
    Utils.SetFilter "Digital and Color", "A3:A"
        
        'quick fix: row 5 should have no formulas
        'ClearRowFormulas Utils.STR_DIGITAL_COLOR_WORKSHEET, 5
        
    Range("A1").Select
    
    Sheets("Software").Select
    
Set wsCurrent = ActiveWorkbook.Sheets(Utils.STR_SOFTWARE_WORKSHEET)

    'Find the Totals Row
    ItemNumberColumn = Utils.ColIndexExactMatch(wsCurrent, "Item #", 2)
        
    TotalsRowSoftware = Utils.RowsToScan(wsCurrent, "TOTALS", ItemNumberColumn)
    
    PrintDbgMsg "TotalsRowSoftware: " & TotalsRowSoftware
            
    'Delete PEAK Line Items
    PEAKColumn = Utils.ColIndexExactMatch(wsCurrent, "PEAK", 2)
    
    i = 0
    a = 0
    Do While a < TotalsRowSoftware
        If wsCurrent.Cells(i + 5, PEAKColumn).Value = "P" Then
            i = i + 1
        Else
            wsCurrent.Rows(i + 5).Delete Shift:=xlUp
        End If

        a = a + 1
    Loop
    
    'adjust for removed rows
    TotalsRowSoftware = i + 5
      
    'Delete Data to Publish Column, Net Dealer Extended Cost Column, Country of Origin Column
    Columns("AQ:BA").Select
    Selection.Delete Shift:=xlToLeft

   
    'Delete Payment Terms
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete GSA Level II and HP Level II
    Columns("AB:AE").Select
    Selection.Delete Shift:=xlToLeft

    'Delete CSMP Columns
    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft
    
    
    'Copy Values for DP, FP
    Columns("P:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft
    
    'Hide OM Price Coulum and Rate Factor Columns
    Columns("G:G").Select
    Selection.EntireColumn.Hidden = True
    Columns("R:U").Select
    Selection.EntireColumn.Hidden = True
    Columns("W:Z").Select
    Selection.EntireColumn.Hidden = True
    
    'Add filtering to Column A
    Utils.SetFilter "Software", "A3:A"
    
    Sheets("Fax, Printer, Scanner").Select
    
Set wsCurrent = ActiveWorkbook.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET)

    'Find the Totals Row
    ItemNumberColumn = Utils.ColIndexExactMatch(wsCurrent, "Item #", 2)
        
    TotalsRowFax = Utils.RowsToScan(wsCurrent, "TOTALS", ItemNumberColumn)
    
    PrintDbgMsg "TotalsRowFax: " & TotalsRowFax

    'Delete PEAK Line Items
    PEAKColumn = Utils.ColIndexExactMatch(wsCurrent, "PEAK", 2)
    
    i = 0
    a = 0
    Do While a < TotalsRowFax
        If wsCurrent.Cells(i + 5, PEAKColumn).Value = "P" Then
            i = i + 1
        Else
            wsCurrent.Rows(i + 5).Delete Shift:=xlUp
        End If

        a = a + 1
    Loop
    
    'adjust for removed rows
    TotalsRowFax = i + 5
       
    'Delete Data to Publish Column, Net Dealer Extended Cost Column, Country of Origin Column
    Columns("AR:BB").Select
    Selection.Delete Shift:=xlToLeft

    'Delete GSA through Payment Terms
    Columns("AG:AG").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete GSA Level II and HP Level II
    Columns("AB:AE").Select
    Selection.Delete Shift:=xlToLeft
    
    'Delete CSMP Columns
    Columns("T:T").Select
    Selection.Delete Shift:=xlToLeft
    
    'Copy Values for DP, FP
    Columns("P:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    'Delete Master Data
    Columns("E:N").Select
    Selection.Delete Shift:=xlToLeft

    'Hide OM Price Column, Rate Factor Columns and Item Class Column
    Columns("G:G").Select
    Selection.EntireColumn.Hidden = True
    Columns("R:U").Select
    Selection.EntireColumn.Hidden = True
    Columns("W:Z").Select
    Selection.EntireColumn.Hidden = True
    Columns("AB:AB").Select
    Selection.EntireColumn.Hidden = True
    
    'Add filtering to Column A
    Utils.SetFilter "Fax, Printer, Scanner", "A3:A"
    
    'Remove unused sheets
    Sheets(Array("NAD Request", "Federal Request", _
        "HP Request", "FED Profit Summary", "Fed Proposal Template", "Dealer FM Request", _
        "CFS Sheet", "Credit Card - Lease", "Credit Card - Purchase", "Legacy Maintenance PAR", _
        "Credit Card - Maintenance", "PAR Approval for Dealer Templat", _
        "Instructions", "CSMP Detail Form", "Oc|fffd| Detail Form", _
        "GSA Oce Wide Format", "NAD Oce Wide Format", "Pooled Maint Wkst" _
        )).Select
        ' GSA Oce Wide Format, NAD Oce Wide Format and Pooled Maint Wkst added 04/2014
        ' 04/03/2014 - Sheets RPP Configs, D&C Configs-OM, D&C Configs-GSA & Current Systems removed as per Lori
    
    
    Application.CutCopyMode = False
    ActiveWindow.SelectedSheets.Delete
    
    Sheets("Profit Summary").Select
    Range("E2").Select
    ActiveCell.FormulaR1C1 = "='FM Request'!R56C7"
    Range("E3").Select
    ActiveCell.FormulaR1C1 = "='FM Request'!R6C2"
    Range("B41:E47").Select
    ActiveCell.FormulaR1C1 = "='FM Request'!R45C1"
    Range("A1").Select
    ActiveCell.FormulaR1C1 = "='FM Request'!R6C7"
    
    
    Sheets("Digital and Color").Select
    Range("A1").Select
    
    Call HideUniFlowInSofware(ActiveWorkbook)
    Call HidePRISMAInSofware(ActiveWorkbook)
    
    'Deep hide data sheets
    Dim strWorksheetsToHide(6) As String
    strWorksheetsToHide(1) = "Digital and Color"
    strWorksheetsToHide(2) = "Software"
    strWorksheetsToHide(3) = "Fax, Printer, Scanner"
    strWorksheetsToHide(4) = "FTR"
    strWorksheetsToHide(5) = "NAD Proposal Template"
    strWorksheetsToHide(6) = "Profit Summary"
    
    Call SetVisibilityOfWorksheets(strWorksheetsToHide, xlSheetVeryHidden)
    
    'Sheets(Array("Digital and Color", "Software", "Fax, Printer, Scanner", _
    '             "FTR", "NAD Proposal Template", "Profit Summary" _
    '             ) _
    '      ).Select
    'ActiveWindow.SelectedSheets.Visible = False
    
    Application.ScreenUpdating = True
    
    'Remove unused modules
    Dim strAvoidances(5) As String
    Dim strDeleteList(11) As String
    Dim nTemp As Integer
    
    strAvoidances(1) = "FM"
    strAvoidances(2) = "UserFormNADFTRName"         'Used for FTR sheet naming
    strAvoidances(3) = "UserFormChannelSelection"
    strAvoidances(4) = "RemoveModules"
    strAvoidances(5) = "Utils"
    nTemp = RemoveModules.RemoveModules(strAvoidances)
    
    strDeleteList(1) = "UserFormDealerFM"
    strDeleteList(2) = "UserFormDFMPricingDashboard"
    strDeleteList(3) = "UserFormDealerFMHQDashboard"
    strDeleteList(4) = "UserFormDealerFMImportPricing"
    strDeleteList(5) = "UserFormDealerFMImportPricing2"
    strDeleteList(6) = "DealerFMForm"
    strDeleteList(7) = "DealerFMTotals"
    strDeleteList(8) = "DealerFMHQDashboard"
    strDeleteList(9) = "DealerFMImportPricing"
    strDeleteList(10) = "DealerFMPricingDashboard"
    strDeleteList(11) = "DealerFMImportPricingDashboard"
    nTemp = nTemp + RemoveModules.RemoveModulesByName(strDeleteList)
    
    'Update Add-ins menu
    Call Utils.SetMenuBar("Call Utils.AddAddIn2menuBar(""Version"", ""Utils.GetVersion""):Call Utils.AddAddIn2menuBar(""Pricing Dashboard"", ""FMPricingDashboard.FMPricingDashboard""):Call Utils.AddAddIn2menuBar(""HQ Dashboard"", ""FMHQDashboard.FMHQDashboard""):Call Utils.AddAddIn2menuBar(""Unprotect Worksheets"", ""Utils.UnprotectDataWorksheets""):Call Utils.AddAddIn2menuBar(""Copy Landed Cost"", ""Utils.CopyPEAKLandedCost"")", _
                          "Call Utils.RemoveAddInFromMenuBar(""Version""):Call Utils.RemoveAddInFromMenuBar(""Pricing Dashboard""):Call Utils.RemoveAddInFromMenuBar(""HQ Dashboard""):Call Utils.RemoveAddInFromMenuBar(""Unprotect Worksheets""):Call Utils.RemoveAddInFromMenuBar(""Copy Landed Cost"")")
    
    'Protect FM Request sheet
    Dim strSheetList(1) As String
    strSheetList(1) = "FM Request"
    Call Utils.ProtectWorksheets(True, "team", strSheetList)
    
    'Save FM Pricing workbook
    Call EndOfProcess("PEAK", "% off MSRP")
    
End Sub

Private Sub StateButton_Click()

Dim x As Integer
Dim i As Integer
Dim e As Integer

Dim blank As Integer
Dim BlankCounter As Integer

'Application.ScreenUpdating = False
Sheets("Digital and Color").Select

    'Delete Net Dealer Extended Cost Column
    Columns("AY:AZ").Select
    Selection.Delete Shift:=xlToLeft
 
    'Copy Values only for STD Cost and Dealer Price
    Columns("L:M").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
        
    'Delete Automatic Credit through Payment Terms
    Columns("Z:AB").Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    
    'Delete HP Level II
    Columns("AB:AB").Select
    Selection.Delete Shift:=xlToLeft
    
    'Hide Rate Factor Columns
    Columns("AB:AE").Select
    Selection.EntireColumn.Hidden = True
    Columns("AG:AJ").Select
    Selection.EntireColumn.Hidden = True
    
    'Delete Master Data
    Columns("E:I").Select
    Selection.Delete Shift:=xlToLeft
    
    'Move CGC Cell
    Range("G1").Select
    Selection.Cut Destination:=Range("H1")
    
    'Remove Validation from Desired Price, Deviation
    Columns("L:M").Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
        :=xlBetween
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = ""
        .ShowInput = True
        .ShowError = True
    End With
    
    'Rename "Floor Plus" to "Dealer Plus"
    Range("N2").Select
    ActiveCell.FormulaR1C1 = "Dealer Plus"
    With ActiveCell.Characters(Start:=1, Length:=11).Font
        .Name = "Arial"
        .FontStyle = "Bold"
        .Size = 10
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .colorindex = 1
    End With
    
    'Delete the CSMP Columns formula
    Columns("I:J").Select
    Selection.Delete Shift:=xlToLeft

   'Update the Dealer Plus formula
        Range("L5").Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
            Operator:=xlEqual, Formula1:="=H5*(1+I5)"
            .IgnoreBlank = False
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = "Invalid Entry"
            .InputMessage = ""
            .ErrorMessage = _
            "Do not adjust this value.  Click 'Cancel' and adjust the Plus % to change the price."
            .ShowInput = False
            .ShowError = True
            End With
        
            ActiveCell.FormulaR1C1 = "=RC[-4]*(1+RC[-3])"
       
            x = 1
            BlankCounter = 0
        
            Do While BlankCounter < 10
                Range("L5").Select
                Selection.Copy
                If ActiveCell.Offset(x, 0).Value <> "" Then
                ActiveCell.Offset(x, 0).Select
                ActiveSheet.Paste
                    If ActiveCell.Offset(0, -8).Font.Bold = False Then
                    Selection.Font.Bold = False
                    Selection.Font.colorindex = 1
                    End If
                x = x + 1
                BlankCounter = 0
                Else
                x = x + 1
                BlankCounter = BlankCounter + 1
                End If
             Loop
    
    'Delete Standard Cost Column
    Columns("G:G").Select
    Selection.Delete Shift:=xlToLeft
    
    'Copy Values only for Total Price
    Columns("S:S").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    'Delete Install, Finders, and Warranty Column
    Columns("M:O").Select
    Selection.Delete Shift:=xlToLeft
    
    'Rename "Total Price" to "GSA Level I"
    'Range("P2").Select
    'ActiveCell.FormulaR1C1 = "GSA Level I"
    'With ActiveCell.Characters(Start:=1, Length:=11).Font
        '.Name = "Arial"
        '.FontStyle = "Bold"
        '.Size = 10
        '.Strikethrough = False
        '.Superscript = False
        '.Subscript = False
        '.OutlineFont = False
        '.Shadow = False
        '.Underline = xlUnderlineStyleNone
        '.ColorIndex = 1
    'End With
    
    'Delete Aftermarket Line Items
    i = 0
    blank = 0
    
    Do Until blank = 10 Or i = 1300
    Range("B5").Activate
    If ActiveCell.Offset(i, 0) = "" Then
        blank = blank + 1
        i = i + 1
        Else
        If ActiveCell.Offset(i, 0).Font.colorindex = 49 Then
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            blank = 0
            Else
            blank = 0
            i = i + 1
        End If
    End If
    Loop

Range("A1").Select
    
Application.ScreenUpdating = True

UserFormChannelSelection.Hide
    
End Sub
Attribute VB_Name = "Utils"
'Win32 API functions declaration section (must be at the begining of the module)
Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias _
"GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal _
lpKeyName As String, ByVal lpDefault As String, ByVal _
lpReturnedString As String, ByVal nSize As Integer, ByVal _
lpFileName As String) As Long

Private Declare PtrSafe Sub OutputDebugString Lib "kernel32" Alias "OutputDebugStringA" (ByVal strMessage As String)

Public Type OPENFILENAME
    lStructSize As Long
    hwndOwner As Long
    hInstance As Long
    lpstrFilter As String
    lpstrCustomFilter As String
    nMaxCustFilter As Long
    nFilterIndex As Long
    lpstrFile As String
    nMaxFile As Long
    lpstrFileTitle As String
    nMaxFileTitle As Long
    lpstrInitialDir As String
    lpstrTitle As String
    flags As Long
    nFileOffset As Integer
    nFileExtension As Integer
    lpstrDefExt As String
    lCustData As Long
    lpfnHook As Long
    lpTemplateName As String
End Type

Public Declare PtrSafe Function GetOpenFileName Lib "comdlg32.dll" Alias "GetOpenFileNameA" (pOpenfilename As OPENFILENAME) As Long

Public Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" _
                   (ByVal hwnd As Long, ByVal lpszOp As String, _
                    ByVal lpszFile As String, ByVal lpszParams As String, _
                    ByVal LpszDir As String, ByVal FsShowCmd As Long) _
                    As Long
                    
Public Declare PtrSafe Function GetDesktopWindow Lib "user32" () As Long

Private Type SpecialValueRowStruct
    Channel As String
    Worksheet As String
    ItemNumber As String
    ModelName As String
    ItemDescription As String
    Column As String
    Value As String
    Rate As String
    HPLevelIPrice As String
    HPLevelIIPrice As String
    SecondaryColumn As String
    BlackMeterServiceComp As String
    ColorMeterServiceComp As String
    BlackMeterToner As String
    ColorMeterToner As String
    BlackMeterCanonAdmin As String
    ColorMeterCanonAdmin As String
    CentralDispatch As String
    FedCondion As String
    RateLTOP As String
    RatePVL As String
    Comment_notusedincalculations As String
    FindersFees As String
    DealerMonthlyMaint_Comp As String
    ColorMeterChargeTotal As String
    ColorMeterChargeIFF As String
    Action As String
    Section As String
    CustomerBaseCharge As String
    CopiesIncluded As String
    BlackMeterChargeTotal As String
    CanonAdminMonthlyMaintBase As String
    ArrColumnNamesWithValues(30) As String
    Row As Integer
End Type

Public Type UtilsOutputStruct
    IsFedComplexSVApplies As Boolean
End Type

Public utilOutput As UtilsOutputStruct

Private g_objConnection As ADODB.Connection

#Const DEBUG_MODE = 1

'---- Global Variables
Public CFSProposal_IsCoTerm As Boolean ' Used to track whether CFS Proposal is Lease or Co-Term
Public CSMPDetailForm_GreenButtonClicked As Boolean

'global constants
'worksheets names
Public Const STR_DIGITAL_COLOR_WORKSHEET = "Digital and Color"
Public Const STR_SOFTWARE_WORKSHEET = "Software"
Public Const STR_FAX_PRINTER_SCANNER_WORKSHEET = "Fax, Printer, Scanner"
Public Const STR_OCE_WIDE_FORMAT_WORKSHEET = "NAD Oce Wide Format"
Public Const STR_PRODUCT_GROUP_DISCOUNTS_WORKSHEET = "Product Group Discounts"

'Public Const STR_SQLSERVER_CONNECTION_STRING = "Provider=SQLNCLI11;Server=5CG6041QW6\SQLEXPR2012;Database=dbReportingDashboard;Uid=BPPLoginAcc6;Pwd=iFEu39F1;"
'Public Const STR_SQLSERVER_CONNECTION_STRING = "Provider=SQLNCLI11;Server=nymspr79;Database=dbReportingDashboard;Uid=BPPLoginAcc6;Pwd=iFEu39F1;"
Public Const STR_SQLSERVER_CONNECTION_STRING = "Provider=MSOLEDBSQL;SERVER=nymspr493;DATABASE=dbReportingDashboard;TrustedConnection=False;Connect Timeout=123;User Id=BPPLoginAcc6;PASSWORD=iFEu39F1;"

Public Const STR_DEFAULT_PASSWORD = "team"

Public Const N_MAX_COLS_TO_SEARCH = 500

'used in TOTALS calculation or other cases.
Public Const N_MAX_ROWS_TO_SEARCH = 7000

'channel acronyms
Public Const STR_FM = "FM"
Public Const STR_DEALER_FM = "DFM"
Public Const STR_CSMP = "CSMP"
Public Const STR_OCE = "OCE"
Public Const STR_FEDERAL = "FED"
Public Const STR_HP = "HP"

'column name constants
Public Const STR_COLUMN_NAME_AUTOMATIC_CREDIT = "Marketing Programs"
Public Const STR_COLUMN_NAME_PRODUCT_GROUP = "PTP Group" ' "Product Group"
Public Const STR_COLUMN_NAME_ROW_NUMBER = "Row Number"

' ProtectDataWorksheets - protects 3 data worksheets
'
'
Public Sub ProtectDataWorksheets()
    Dim strPassword As String
    Dim strListOfWorksheets(3) As String
    
    If Utils.Authentication = False Then Exit Sub

    strPassword = "team"
    
    strListOfWorksheets(0) = "Digital and Color"
    strListOfWorksheets(1) = "Software"
    strListOfWorksheets(2) = "Fax, Printer, Scanner"
    
    ProtectWorksheets True, strPassword, strListOfWorksheets
    
End Sub

' UnprotectDataWorksheets - unprotects data worksheets
' Ask for password
'
Public Sub UnprotectDataWorksheets()
    Dim strPassword As String
    Dim strListOfWorksheets(3) As String
    
    strPassword = InputBox("Enter password unprotect data worksheets.", "Password")
    
    strListOfWorksheets(0) = "Digital and Color"
    strListOfWorksheets(1) = "Software"
    strListOfWorksheets(2) = "Fax, Printer, Scanner"
    
    ProtectWorksheets False, strPassword, strListOfWorksheets
End Sub

'per discussion need not to call protect method 07-07-2011
Public Sub SetVisibilityAndProtectionOfWorksheets(strListOfWorksheets() As String, nVisibilityFlag As XlSheetVisibility, _
                                                  bProtectFlag As Boolean, strPassword As String _
                                                 )
  Call SetVisibilityOfWorksheets(strListOfWorksheets, nVisibilityFlag)
  'Call ProtectWorksheets(bProtectFlag, strPassword, strListOfWorksheets)
End Sub

' ProtectWorksheets - protects/unprotects array of worksheets
'
'
Public Sub ProtectWorksheets(bProtectFlag As Boolean, strPassword As String, strListOfWorksheets() As String)
    
    For i = 0 To UBound(strListOfWorksheets)
        If strListOfWorksheets(i) <> "" Then
            Set wsTemp = Sheets(strListOfWorksheets(i))
            
            If bProtectFlag Then
                wsTemp.Protect Password:=strPassword, AllowFiltering:=True
            Else
                wsTemp.unprotect strPassword
            End If
        End If
    Next
    
End Sub

' Specify the visibility for an array of worksheets
'
' strListOfWorksheets - array containing the name of sheet(s) to modify
' nVisbilityFlag - [xlSheetHidden | xlSheetVeryHidden | xlSheetVisible]
Public Sub SetVisibilityOfWorksheets(strListOfWorksheets() As String, nVisibilityFlag As XlSheetVisibility)
  
  For i = 0 To UBound(strListOfWorksheets)
    If strListOfWorksheets(i) <> "" Then
      ' Specify value from the XlSheetVisibility enumeration: xlSheetHidden, xlSheetVeryHidden, xlSheetVisible
      Sheets(strListOfWorksheets(i)).Visible = nVisibilityFlag
    End If
  Next

End Sub

' CopyFederalOMLandedCost - automate copying from "Landing cost - Oc|e9|.xslm"
'
'
Public Sub CopyFederalOMLandedCost()
    CopyLandedCost " - FedOM", "E:H"
End Sub

' CopyFederalGSALandedCost - automate copying from "Landing cost - Oc|e9|.xslm"
'
'
Public Sub CopyFederalGSALandedCost()
    CopyLandedCost " - FedGSA", "E:H"
End Sub

' CopyHPLandedCost - automate copying from "Landing cost - Oc|e9|.xslm"
'
'
Public Sub CopyHPLandedCost()
    CopyLandedCost " - HP", "E:G"
End Sub

' CopyFMLandedCost - automate copying from "Landing cost - Oc|e9|.xslm"
'
'
Public Sub CopyFMLandedCost()
    CopyLandedCost " - FM", "E:G"
End Sub

' CopyFMLandedCost - automate copying from "Landing cost - Oc|e9|.xslm"
'
'
Public Sub CopyPEAKLandedCost()
    CopyLandedCost " - PEAK", "E:G"
End Sub

' CopyDFMLandedCost - automate copying from "Landing cost - Oc|e9|.xslm"
'
'
Public Sub CopyDFMLandedCost()
    CopyLandedCost " - DFM", "E:G"
End Sub

' CopyNADLandedCost - automate copying from "Landing cost - Oc|e9|.xslm"
'
'
Public Sub CopyNADLandedCost()
    CopyLandedCost " - NAD", "E:G"
End Sub

' CopyOCELandedCost - automate copying from "Landing cost - Oc|e9|.xslm"
'
'
Public Sub CopyOCELandedCost()
    CopyLandedCost " - Oc|e9|", "D:F"
End Sub

' CopyCSMPLandedCost - automate copying from "Landing cost - CSMP.xslm"
'
'
Public Sub CopyCSMPLandedCost()
    CopyLandedCost " - CSMP", "D:H"
End Sub

' UploadOCEtoAccess - uploads data to access db
'
'
Public Sub UploadOCEtoAccess()

        Dim nRecordID As Integer
        
        nRecordID = Upload2Access("Oc|e9| Detail Form")
        
    If nRecordID = 0 Then Exit Sub
        
    MsgBox "New record ID is " & nRecordID & ". Successfully transfer OCE data to database!!!", vbOKOnly, "Data Transfer"
End Sub

' UploadCSMPtoAccess - uploads data to access db
'
'
Public Sub UploadCSMPtoAccess()

    Dim nRecordID As Integer
    
    nRecordID = Upload2Access("CSMP Detail Form")
        
    If nRecordID = 0 Then Exit Sub
        
    MsgBox "New record ID is " & nRecordID & ". Successfully transfer CSMP data to database!!!", vbOKOnly, "Data Transfer"
End Sub

'initially a connection object will be closed.
'05-07-2019 use existing connection with opened transaction
Public Function GetConnectionObjectForAccess(strDBFileName As String)
    'Dim objConnection As ADODB.Connection
    'Dim strProviderString As String
    'Dim bIsACCDBfile As Boolean
    '
    'Set objConnection = CreateObject("ADODB.Connection")
    '
    'strProviderString = Utils.STR_SQLSERVER_CONNECTION_STRING
    
On Error GoTo ErrLabel
    'Set objConnection = CreateObject("ADODB.Connection")
    
    'objConnection.Open strProviderString

    If g_objConnection Is Nothing Then
      Set GetConnectionObjectForAccess = Nothing
    Else
      Set GetConnectionObjectForAccess = g_objConnection
    End If

                      
                                                        
    
                                                                                  

                                                    
    Exit Function
ErrLabel:
    Set GetConnectionObjectForAccess = Nothing
End Function

' Upload2Access - uploads data to access db
'
'
Public Function Upload2Access(strWSDetailsName As String)
    Dim strDBFileName As String
    Dim objConnection As ADODB.Connection
    Dim objRecordset As ADODB.Recordset
    Dim wsCSMPDetailForm As Worksheet
    Dim wsProfitSummaryForm As Worksheet
    Dim nMaxID As Integer, nOfferID As Integer, nRevisionID As Integer, nTSEID As Integer
    Dim nYear As Integer, strEndUserType As String, strOfferOrFinal As String, strRequest As String, strLastUpdated As String, strResultWinLoss As String
    Dim strState As String, strOrgUnit As String, strSalesRep As String, strCINCSupport As String, strTargetAccount As String, strCity As String
    Dim bInsertOrUpdate As Boolean
    Dim bCSAP_CHC As Boolean
                        
    Upload2Access = 0

    If Utils.Authentication = False Then Exit Function

                                                               
                                                                                
                                                                                                      

                                                                     
                                                                           
                                                                                                                                                                                 

                               
    
                                                                                                                                   
        
    Set wsCSMPDetailForm = ActiveWorkbook.Sheets(strWSDetailsName)
    Set wsProfitSummaryForm = ActiveWorkbook.Sheets("Profit Summary")
    
    Set g_objConnection = CreateObject("ADODB.Connection")
                                                      
    
                        
    strProviderString = Utils.STR_SQLSERVER_CONNECTION_STRING
    
                                                                  
          

On Error GoTo ErrLabel
    
    g_objConnection.Open strProviderString
    
    g_objConnection.CommandTimeout = 123
    
    'Debug.Print CStr(g_objConnection.CommandTimeout) & " " & CStr(g_objConnection.ConnectionTimeout)
    
    Set objConnection = g_objConnection
        
                                        
    
    objConnection.BeginTrans
    
    If UploadOptionalParams(nYear, strEndUserType, strOfferOrFinal, _
                            strRequest, strLastUpdated, strResultWinLoss, _
                            strState, strOrgUnit, strSalesRep, nOfferID, nRevisionID, strCINCSupport, strTargetAccount, bInsertOrUpdate, strDBFileName, nTSEID, strCity, bCSAP_CHC) = True Then
                            
      objConnection.RollbackTrans
      
      objConnection.Close
      
      Exit Function
    End If
                            
    Set objRecordset = CreateObject("ADODB.Recordset")
    
    If bInsertOrUpdate = True Then
        objRecordset.Open "tbl1_Total_Tracking_Database", objConnection, ADODB.adOpenKeyset, adLockOptimistic, ADODB.CommandTypeEnum.adCmdTable
             
        objRecordset.AddNew
        
                                                              
    Else
        objRecordset.Open "select * from tbl1_Total_Tracking_Database where OfferID=" & CStr(nOfferID), objConnection, ADODB.adOpenKeyset, adLockOptimistic, ADODB.CommandTypeEnum.adCmdText
    End If

    SetRecorsetField objRecordset("End User Type"), strEndUserType
    SetRecorsetField objRecordset("Offer Or Final"), strOfferOrFinal
    SetIntegerRecorsetField objRecordset("Year"), nYear
    SetRecorsetField objRecordset("Request"), strRequest
    SetRecorsetField objRecordset("Last Update"), strLastUpdated
    SetRecorsetField objRecordset("Result Win/Loss"), strResultWinLoss
    SetRecorsetField objRecordset("State"), strState
    SetRecorsetField objRecordset("Org Unit"), strOrgUnit
    SetRecorsetField objRecordset("Sales Rep"), strSalesRep
    SetRecorsetField objRecordset("End User"), wsCSMPDetailForm.Range("B15").Value
    SetRecorsetField objRecordset("Industry"), wsCSMPDetailForm.Range("B27").Value
    SetDateRecorsetField objRecordset("Offer Approved"), wsCSMPDetailForm.Range("B4").Value
    SetDateRecorsetField objRecordset("Offer Expires"), wsCSMPDetailForm.Range("B6").Value
    SetRecorsetField objRecordset("Dealer"), wsCSMPDetailForm.Range("F15").Value
    SetRecorsetField objRecordset("Dealer Sell To Code"), wsCSMPDetailForm.Range("F17").Value
    
    If strWSDetailsName = "Oc|e9| Detail Form" Then
        SetRecorsetField objRecordset("TSE"), wsCSMPDetailForm.Range("H25").Value
        SetRecorsetField objRecordset("CSM"), wsCSMPDetailForm.Range("F25").Value
        SetRecorsetField objRecordset("Region"), wsCSMPDetailForm.Range("F27").Value
    Else
        SetRecorsetField objRecordset("TSE"), wsCSMPDetailForm.Range("F27").Value
        SetRecorsetField objRecordset("CSM"), wsCSMPDetailForm.Range("F25").Value
        SetRecorsetField objRecordset("Region"), wsCSMPDetailForm.Range("F29").Value
    End If

    SetRecorsetField objRecordset("Category"), GetRadioButtonValue(wsCSMPDetailForm)
    SetRecorsetField objRecordset("Incumbent"), wsCSMPDetailForm.Range("B49").Value
    SetRecorsetField objRecordset("Competition"), wsCSMPDetailForm.Range("B51").Value
    SetRecorsetField objRecordset("Installation Start"), wsCSMPDetailForm.Range("F39").Value
    SetDateRecorsetField objRecordset("Installation End"), wsCSMPDetailForm.Range("F41").Value
    SetDateRecorsetField objRecordset("Bid  Due Date"), wsCSMPDetailForm.Range("B41").Value
    SetDateRecorsetField objRecordset("Bid to be Awarded"), wsCSMPDetailForm.Range("B43").Value
    
    'new from 02-24-2017
    SetRecorsetField objRecordset("Discount % Ratio Overall"), wsProfitSummaryForm.Range("E11").Value
    SetRecorsetField objRecordset("GP % Overall"), wsProfitSummaryForm.Range("E13").Value
    
    'new from 09-30-2019
    SetRecorsetField objRecordset("Opportunity Type"), wsCSMPDetailForm.Range("B53").Value
        
    SetRecorsetField objRecordset("Discount Ratio"), wsProfitSummaryForm.Range("E16").Value
    SetRecorsetField objRecordset("GP after CWO"), wsProfitSummaryForm.Range("E18").Value
    SetRecorsetField objRecordset("Discount Ratio with all Promos"), wsProfitSummaryForm.Range("E21").Value
    SetRecorsetField objRecordset("GP % with all Promos"), wsProfitSummaryForm.Range("E23").Value
    SetRecorsetField objRecordset("GP with all Promos"), wsProfitSummaryForm.Range("E22").Value
    SetRecorsetField objRecordset("Discount Ratio with all Promos and AMP"), wsProfitSummaryForm.Range("E26").Value
    SetRecorsetField objRecordset("GP % with all Promos and AMP"), wsProfitSummaryForm.Range("E28").Value
    SetRecorsetField objRecordset("GP with all Promos and  AMP"), wsProfitSummaryForm.Range("E27").Value
    
    SetRecorsetField objRecordset("Unit Potential"), wsProfitSummaryForm.Range("E8").Value

    SetRecorsetField objRecordset("Potential AMP Expense"), wsProfitSummaryForm.Range("E25").Value
    
    SetRecorsetField objRecordset("Revenue Potential"), wsProfitSummaryForm.Range("E9").Value

    SetRecorsetField objRecordset("Upfront Support"), GetRadioButtonValueForSupport(wsCSMPDetailForm, "obUpFront")
    SetRecorsetField objRecordset("Continuous Support"), GetRadioButtonValueForSupport(wsCSMPDetailForm, "obContinue")
    
    SetRecorsetField objRecordset("imageCLASS - Upfront Support"), GetRadioButtonValueForSupport(wsCSMPDetailForm, "obUpFront1")
    SetRecorsetField objRecordset("imageCLASS - Continuous Support"), GetRadioButtonValueForSupport(wsCSMPDetailForm, "obContinue1")
    
    If strCINCSupport = "Yes" Then
        SetRecorsetField objRecordset("CINC Support"), True
    Else
        SetRecorsetField objRecordset("CINC Support"), False
    End If
    
    If strTargetAccount = "Yes" Then
        SetRecorsetField objRecordset("Target Account"), True
    Else
        SetRecorsetField objRecordset("Target Account"), False
    End If
        
    SetIntegerRecorsetField objRecordset("OfferID"), nOfferID
    
    'fill mandatory bit/other columns
    SetRecorsetField objRecordset("INAP"), False
    SetRecorsetField objRecordset("IKON/Global/Danka"), False
    SetRecorsetField objRecordset("Special Fund"), False
    'SetRecorsetField objRecordset("Upfront Support"), False
    'SetRecorsetField objRecordset("Continuous Support"), False
    'SetRecorsetField objRecordset("imageCLASS - Upfront Support"), False
    'SetRecorsetField objRecordset("imageCLASS - Continuous Support"), False
    SetRecorsetField objRecordset("CSAP/CHC"), bCSAP_CHC
    SetRecorsetField objRecordset("Second Year Extension"), False
    SetRecorsetField objRecordset("Third Year Extension"), False
    SetRecorsetField objRecordset("3+"), False
    SetRecorsetField objRecordset("Ricoh"), False
    SetRecorsetField objRecordset("Buy-out"), False
    
    SetRecorsetField objRecordset("City"), strCity
    
    If nTSEID <> -1 Then
        SetIntegerRecorsetField objRecordset("TSEID"), nTSEID
    Else
        'do nothing (set null)
    End If
    
    '06-19-2019
    SetRecorsetField objRecordset("Contract Term"), wsCSMPDetailForm.Range("B45").Value
        
    SetRecorsetField objRecordset("One off"), Utils.GetDropDownText(wsCSMPDetailForm, "Drop Down 20") 'dd.List(dd.ListIndex) 'wsCSMPDetailForm.DropDowns("Drop Down 34").Value
    
    objRecordset.Update
            
    Upload2Access = objRecordset("ID").Value
    
    Dim bResult1 As Boolean
    
    bResult1 = ScanDataTabsForRevision(nRevisionID, objConnection)
    
    objConnection.CommitTrans
    
    objRecordset.Close
    objConnection.Close
    
    Set objRecordset = Nothing
    Set objConnection = Nothing
        
    Exit Function
    
ErrLabel:

    Upload2Access = 0
    
    objConnection.RollbackTrans
    
    'objRecordset.Delete
    objRecordset.Close
    objConnection.Close
    
    Set objRecordset = Nothing
    Set objConnection = Nothing
    
    MsgBox "Error. Description: " & Err.Description & " and Source: " & Err.Source
    
End Function

Public Function ScanDataTabsForRevision(nRevisionID As Integer, objConnection As ADODB.Connection)
    Dim strListOfWorksheets(3) As String
    Dim wsCurrent As Worksheet
    Dim nTotalsRow As Integer, nCurrentRow As Integer, nNumberOfUnitsColumnIndex As Integer, nItemCodeColumnIndex As Integer, nItemDescColumnIndex As Integer
    Dim nMSRPColumnIndex As Integer, nDealerPriceColumnIndex As Integer, nCSMPCreditColumnIndex As Integer, nMarketingProgramsColumnIndex As Integer, nAftermarketColumnIndex As Integer, nCWOColumnIndex As Integer, nTotalPriceColumnIndex As Integer, nLCColumnIndex As Integer
    Dim dblMSRP As Double, dblDealerPrice As Double, dblCSMPCredit As Double, dblMarketingPrograms As Double, dblAftermarket As Double, dblCWO As Double, dblTotalPrice As Double, dblLC As Double
    Dim objRecordset As ADODB.Recordset
    Dim strItemCode As String, strItemDesc As String
    Dim strNewErrorMessage As String
    
    strListOfWorksheets(0) = Utils.STR_DIGITAL_COLOR_WORKSHEET
    strListOfWorksheets(1) = Utils.STR_SOFTWARE_WORKSHEET
    strListOfWorksheets(2) = Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET
    
    Set objRecordset = CreateObject("ADODB.Recordset")

    'delete existing entries for the existing revision
    objConnection.Execute "delete from tblOfferRevisionDetails where RevisionID = " & CStr(nRevisionID)
    
    For i = 0 To 2
        Set wsCurrent = ActiveWorkbook.Sheets(strListOfWorksheets(i))
        
        nTotalsRow = FindTotalsRowIndex(strListOfWorksheets(i))
        
        nNumberOfUnitsColumnIndex = Utils.ColIndexExactMatch(wsCurrent, "Number of Units", 2)
        
        nItemCodeColumnIndex = nNumberOfUnitsColumnIndex - 3
        
        nItemDescColumnIndex = nNumberOfUnitsColumnIndex - 1
        
        nMSRPColumnIndex = Utils.ColIndexExactMatch(wsCurrent, "MSRP", 2)
        nDealerPriceColumnIndex = Utils.ColIndexExactMatch(wsCurrent, "Dealer Price", 2)
        nCSMPCreditColumnIndex = Utils.ColIndexExactMatch(wsCurrent, "CSMP Credit", 2)
        nMarketingProgramsColumnIndex = Utils.ColIndexExactMatch(wsCurrent, "Marketing Programs", 2)
        nAftermarketColumnIndex = Utils.ColIndexExactMatch(wsCurrent, "Aftermarket", 2)
        nCWOColumnIndex = Utils.ColIndexExactMatch(wsCurrent, "CWO", 2)
        nTotalPriceColumnIndex = Utils.ColIndexExactMatch(wsCurrent, "Total Price", 2)
        nLCColumnIndex = Utils.ColIndexExactMatch(wsCurrent, "LC", 2)
        
        If nMSRPColumnIndex <= 0 Then Err.Raise vbObjectError + 2, "ScanDataTabsForRevision", "Unable to find MSRP column."
                        
        If nDealerPriceColumnIndex <= 0 Then Err.Raise vbObjectError + 2, "ScanDataTabsForRevision", "Unable to find Dealer Price column."
        
        If nCSMPCreditColumnIndex <= 0 Then Err.Raise vbObjectError + 2, "ScanDataTabsForRevision", "Unable to find CSMP Credit column."
        
        If nMarketingProgramsColumnIndex <= 0 Then Err.Raise vbObjectError + 2, "ScanDataTabsForRevision", "Unable to find Marketing Programs column."
        
        If nAftermarketColumnIndex <= 0 Then Err.Raise vbObjectError + 2, "ScanDataTabsForRevision", "Unable to find Aftermarket column."
        
        If nCWOColumnIndex <= 0 Then Err.Raise vbObjectError + 2, "ScanDataTabsForRevision", "Unable to find CSO column."
        
        If nTotalPriceColumnIndex <= 0 Then Err.Raise vbObjectError + 2, "ScanDataTabsForRevision", "Unable to find Total Price column."
        
        If nLCColumnIndex <= 0 Then Err.Raise vbObjectError + 2, "ScanDataTabsForRevision", "Unable to find LC column."
                        
        Dim nCurrentItemID As Long, nCurrentItemPriceID As Long
           
        For nCurrentRow = 3 To nTotalsRow - 1
        
            On Error GoTo ErrLabe1
            
            If IsRefErrorInTheCell(wsCurrent.Cells(nCurrentRow, nNumberOfUnitsColumnIndex)) = False Then
                If wsCurrent.Cells(nCurrentRow, nNumberOfUnitsColumnIndex).Value <> "" And wsCurrent.Cells(nCurrentRow, nItemCodeColumnIndex).Value <> "" Then
                    Dim vType As Variant
                                                               
                                      
                    'Debug.Print "Current row with data: " & CStr(nCurrentRow) & " Tabname is " & strListOfWorksheets(i)
                    
                    strNewErrorMessage = "Current row with data: " & CStr(nCurrentRow) & " Tabname is " & strListOfWorksheets(i)
                    
                    vType = GetItemType(wsCurrent, nCurrentRow, nItemCodeColumnIndex, strListOfWorksheets(i))
                    
                    'skip green lines
                    If strListOfWorksheets(i) = Utils.STR_SOFTWARE_WORKSHEET Or IsNull(vType) = False Then
                    
                        objRecordset.Open "select ID, Type from tblItems where ItemCode = '" & wsCurrent.Cells(nCurrentRow, nItemCodeColumnIndex).Value & "' and TabName='" & strListOfWorksheets(i) & "'", objConnection, ADODB.adOpenForwardOnly, ADODB.adLockReadOnly, ADODB.CommandTypeEnum.adCmdText
                        
                        If objRecordset.EOF Then ' insert a new record.
                            objRecordset.Close
                                                
                            If IsNull(vType) = False Then
                                objConnection.Execute "insert into tblItems (itemCode, ItemDescription, TabName, Type) values ('" & Replace(wsCurrent.Cells(nCurrentRow, nItemCodeColumnIndex).Value, "'", "''") & "', '" & Replace(wsCurrent.Cells(nCurrentRow, nItemDescColumnIndex).Value, "'", "''") & "', '" & strListOfWorksheets(i) & "','" & CStr(vType) & "')"
                            Else
                                objConnection.Execute "insert into tblItems (itemCode, ItemDescription, TabName) values ('" & Replace(wsCurrent.Cells(nCurrentRow, nItemCodeColumnIndex).Value, "'", "''") & "', '" & Replace(wsCurrent.Cells(nCurrentRow, nItemDescColumnIndex).Value, "'", "''") & "', '" & strListOfWorksheets(i) & "')"
                            End If
                            
                            objRecordset.Open "select ID, Type from tblItems where ItemCode = '" & wsCurrent.Cells(nCurrentRow, nItemCodeColumnIndex).Value & "' and TabName='" & strListOfWorksheets(i) & "'", objConnection, ADODB.adOpenForwardOnly, ADODB.adLockReadOnly, ADODB.CommandTypeEnum.adCmdText
                        
                        End If
                        
                        nCurrentItemID = objRecordset("ID").Value
                        
                        Dim strCurrentItemType As Variant
                        
                        strCurrentItemType = objRecordset("Type").Value
                        
                        objRecordset.Close
                        
                        If IsNull(strCurrentItemType) = True Then
                            strCurrentItemType = ""
                        End If
                        
                        'update Type if mismatch with vType
                        If IsNull(vType) = False And vType <> CStr(strCurrentItemType) Then
                            objConnection.Execute "update tblItems set Type='" & CStr(vType) & "' where ID = " & CStr(nCurrentItemID)
                        End If
                        
                        'add prices here
                                            
                        Dim sqlQuery As String, sqlInsertQuery As String
                        
                        sqlInsertQuery = "insert into tblItemPrices (MSRP, [Dealer Price], [CSMP Credit], [Marketing Programs], Aftermarket, [Total Price], CWO, LC) values ("
                        
                        If IsNumeric(wsCurrent.Cells(nCurrentRow, nMSRPColumnIndex).Value) = False Then
                            sqlQuery = "select ID from tblItemPrices where MSRP is null"
                            sqlInsertQuery = sqlInsertQuery & "null,"
                        Else
                            dblMSRP = CDbl(wsCurrent.Cells(nCurrentRow, nMSRPColumnIndex).Value)
                            sqlQuery = "select ID from tblItemPrices where MSRP = " & CStr(dblMSRP)
                            sqlInsertQuery = sqlInsertQuery & CStr(dblMSRP) & ","
                        End If
                        
                        If IsNumeric(wsCurrent.Cells(nCurrentRow, nDealerPriceColumnIndex).Value) = False Then
                            sqlQuery = sqlQuery & " and [Dealer Price] is null"
                            sqlInsertQuery = sqlInsertQuery & "null,"
                        Else
                            dblDealerPrice = CDbl(wsCurrent.Cells(nCurrentRow, nDealerPriceColumnIndex).Value)
                            sqlQuery = sqlQuery & " and [Dealer Price]=" & CStr(dblDealerPrice)
                            sqlInsertQuery = sqlInsertQuery & CStr(dblDealerPrice) & ","
                        End If
                                                
                        If IsNumeric(wsCurrent.Cells(nCurrentRow, nCSMPCreditColumnIndex).Value) = False Then
                            sqlQuery = sqlQuery & " and [CSMP Credit] is null"
                            sqlInsertQuery = sqlInsertQuery & "null,"
                        Else
                            dblCSMPCredit = CDbl(wsCurrent.Cells(nCurrentRow, nCSMPCreditColumnIndex).Value)
                            sqlQuery = sqlQuery & " and [CSMP Credit]=" & CStr(dblCSMPCredit)
                            sqlInsertQuery = sqlInsertQuery & CStr(dblCSMPCredit) & ","
                        End If
                        
                        If IsNumeric(wsCurrent.Cells(nCurrentRow, nMarketingProgramsColumnIndex).Value) = False Then
                            sqlQuery = sqlQuery & " and [Marketing Programs] is null"
                            sqlInsertQuery = sqlInsertQuery & "null,"
                        Else
                            dblMarketingPrograms = CDbl(wsCurrent.Cells(nCurrentRow, nMarketingProgramsColumnIndex).Value)
                            sqlQuery = sqlQuery & " and [Marketing Programs]=" & CStr(dblMarketingPrograms)
                            sqlInsertQuery = sqlInsertQuery & CStr(dblMarketingPrograms) & ","
                        End If
                        
                        If IsNumeric(wsCurrent.Cells(nCurrentRow, nAftermarketColumnIndex).Value) = False Then
                            sqlQuery = sqlQuery & " and Aftermarket is null"
                            sqlInsertQuery = sqlInsertQuery & "null,"
                        Else
                            dblAftermarket = CDbl(wsCurrent.Cells(nCurrentRow, nAftermarketColumnIndex).Value)
                            sqlQuery = sqlQuery & " and Aftermarket=" & CStr(dblAftermarket)
                            sqlInsertQuery = sqlInsertQuery & CStr(dblAftermarket) & ","
                        End If
                        
                        If IsNumeric(wsCurrent.Cells(nCurrentRow, nTotalPriceColumnIndex).Value) = False Then
                            sqlQuery = sqlQuery & " and [Total Price] is null"
                            sqlInsertQuery = sqlInsertQuery & "null,"
                        Else
                            dblTotalPrice = CDbl(wsCurrent.Cells(nCurrentRow, nTotalPriceColumnIndex).Value)
                            sqlQuery = sqlQuery & " and [Total Price]=" & CStr(dblTotalPrice)
                            sqlInsertQuery = sqlInsertQuery & CStr(dblTotalPrice) & ","
                        End If
                        
                        If IsNumeric(wsCurrent.Cells(nCurrentRow, nCWOColumnIndex).Value) = False Then
                            sqlQuery = sqlQuery & " and CWO is null"
                            sqlInsertQuery = sqlInsertQuery & "null,"
                        Else
                            dblCWO = CDbl(wsCurrent.Cells(nCurrentRow, nCWOColumnIndex).Value)
                            sqlQuery = sqlQuery & " and CWO=" & CStr(dblCWO)
                            sqlInsertQuery = sqlInsertQuery & CStr(dblCWO) & ","
                        End If
                        
                        If IsNumeric(wsCurrent.Cells(nCurrentRow, nLCColumnIndex).Value) = False Then
                            sqlQuery = sqlQuery & " and LC is null"
                            sqlInsertQuery = sqlInsertQuery & "null)"
                        Else
                            dblLC = CDbl(wsCurrent.Cells(nCurrentRow, nLCColumnIndex).Value)
                            sqlQuery = sqlQuery & " and LC=" & CStr(dblLC)
                            sqlInsertQuery = sqlInsertQuery & CStr(dblLC) & ")"
                        End If
                        
                        'sqlQuery = "select ID from tblItemPrices where MSRP = " & CStr(dblMSRP) & " and [Dealer Price]=" & CStr(dblDealerPrice) & " and [CSMP Credit]=" & CStr(dblCSMPCredit) & _
                        '           " and [Marketing Programs]=" & CStr(dblMarketingPrograms) & " and Aftermarket=" & CStr(dblAftermarket) & " and [Total Price]=" & CStr(dblTotalPrice) & " and LC=" & CStr(dblLC)
                        
                        objRecordset.Open sqlQuery, _
                                          objConnection, ADODB.adOpenForwardOnly, ADODB.adLockReadOnly, ADODB.CommandTypeEnum.adCmdText
                        
                        If objRecordset.EOF Then ' insert a new record.
                            objRecordset.Close
                                                
                            'sqlInsertQuery = "insert into tblItemPrices (MSRP, [Dealer Price], [CSMP Credit], [Marketing Programs], Aftermarket, CWO, [Total Price], LC) values (" & _
                            '            CStr(dblMSRP) & "," & CStr(dblDealerPrice) & "," & CStr(dblCSMPCredit) & "," & CStr(dblMarketingPrograms) & "," & CStr(dblAftermarket) & _
                            '            "," & CStr(dblCWO) & "," & CStr(dblTotalPrice) & "," & CStr(dblLC) & ")"
                            
                            objConnection.Execute sqlInsertQuery
                            
                            objRecordset.Open sqlQuery, objConnection, ADODB.adOpenForwardOnly, ADODB.adLockReadOnly, ADODB.CommandTypeEnum.adCmdText
                        
                        End If
                        
                        nCurrentItemPriceID = objRecordset("ID").Value
                        
                        objRecordset.Close
                        
                        objRecordset.Open "select ID from tblOfferRevisionDetails where RevisionID = " & CStr(nRevisionID) & " and ItemID=" & CStr(nCurrentItemID) & " and ItemPriceID=" & CStr(nCurrentItemPriceID), objConnection, ADODB.adOpenForwardOnly, ADODB.adLockReadOnly, ADODB.CommandTypeEnum.adCmdText
                        
                        Dim strSQLTemp0 As String
                        
                        If objRecordset.EOF Then
                            strSQLTemp0 = "insert into tblOfferRevisionDetails (RevisionID, ItemID, NumberOfUnits, ItemPriceID) values (" & CStr(nRevisionID) & ", " & CStr(nCurrentItemID) & ", " & wsCurrent.Cells(nCurrentRow, nNumberOfUnitsColumnIndex).Value & "," & CStr(nCurrentItemPriceID) & ")"
                        Else
                            strSQLTemp0 = "update tblOfferRevisionDetails set NumberOfUnits = NumberOfUnits + " & wsCurrent.Cells(nCurrentRow, nNumberOfUnitsColumnIndex).Value & " where ID=" & objRecordset("ID").Value
                        End If
                        
                        objRecordset.Close
                        
                        objConnection.Execute strSQLTemp0
                    End If 'If strListOfWorksheets(i) = Utils.STR_SOFTWARE_WORKSHEET Or vColor Is Not Null ...
                End If 'wsCurrent.Cells(nCurrentRow ...
            End If 'if IsRefErrorInTheCell ...
            
        Next nCurrentRow
    Next i

    Set objRecordset = Nothing
    
    ScanDataTabsForRevision = True
    
    Exit Function
    
ErrLabe1:
    strNewErrorMessage = strNewErrorMessage & " ErrDescription -> " & Err.Description
            
    Err.Clear
    
    Err.Raise vbObjectError + 1, "ScanDataTabsForRevision", strNewErrorMessage
    
End Function

Private Function GetItemType(wsCurrent As Worksheet, nCurrentRow As Integer, nItemCodeColumnIndex As Integer, strTabName As String)
    Dim vColor As Long
    
    vColor = wsCurrent.Cells(nCurrentRow, nItemCodeColumnIndex).Font.color
    If strTabName = Utils.STR_DIGITAL_COLOR_WORKSHEET Then
        If vColor = 0 Then
            GetItemType = "a"
        ElseIf vColor = 32768 Then 'skip green lines
            GetItemType = Null
        ElseIf vColor = 10027008 Then
            GetItemType = "m"
        Else
            GetItemType = Null
        End If
    ElseIf strTabName = Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET Then
        If vColor = 0 Then
            GetItemType = "a"
        ElseIf vColor = 26112 Then 'skip green lines
            GetItemType = Null
        ElseIf vColor = 10027008 Then
            GetItemType = "m"
        Else
            GetItemType = Null
        End If
    Else
        GetItemType = Null
    End If
End Function

Public Function IsRefErrorInTheCell(rg1 As Range)
    If IsError(rg1.Value) Then
        If rg1.Value = CVErr(xlErrRef) Then
            IsRefErrorInTheCell = True
            
            Exit Function
        End If
    End If
    
    IsRefErrorInTheCell = False
End Function

'function to get error source during database upload
Public Function SetIntegerRecorsetField(objField As ADODB.Field, varValue As Variant)
    SetIntegerRecorsetField = ""
    
    On Error GoTo lblError
    
    objField.Value = CInt(varValue)
    
    Exit Function
    
lblError:
    SetIntegerRecorsetField = "Error appeared in Database Field: [" & objField.Name & "]"
    Err.Raise Err.Number, SetIntegerRecorsetField, Err.Description
End Function

'function to get error source during database upload
Public Function SetDateRecorsetField(objField As ADODB.Field, varValue As Variant)
    SetDateRecorsetField = ""
    
    On Error GoTo lblError
    
    If CStr(varValue) = "" Then
        objField.Value = dbNull
    Else
        objField.Value = CDate(varValue)
    End If
    
    Exit Function
    
lblError:
    SetDateRecorsetField = "Error appeared in Database Field: [" & objField.Name & "]"
    Err.Raise Err.Number, SetDateRecorsetField, Err.Description
End Function

'function to get error source during database upload
Public Function SetRecorsetField(objField As ADODB.Field, varValue As Variant)
    SetRecorsetField = ""
    
    On Error GoTo lblError
    
    objField.Value = UCase(CStr(varValue))
    
    Exit Function
    
lblError:
    SetRecorsetField = "Error appeared in Database Field: [" & objField.Name & "]"
    Err.Raise Err.Number, SetRecorsetField, Err.Description
End Function

'help function to call form for optional params
Private Function UploadOptionalParams(ByRef nYear As Integer, ByRef strEndUserType As String, ByRef strOfferOrFinal As String, _
                                      ByRef strRequest As String, ByRef strLastUpdated As String, ByRef strResultWinLoss As String, _
                                      ByRef strState As String, ByRef strOrgUnit As String, ByRef strSalesRep As String, ByRef nOfferID As Integer, ByRef nRevisionID As Integer, _
                                      ByRef strCINCSupport As String, ByRef strTargetAccount As String, ByRef bInsertOrUpdate As Boolean, strDBFileName As String, ByRef nTSEID As Integer, _
                                      ByRef strCity As String, ByRef bCSAP_CHC As Boolean)
    Dim objForm As UserFormCSMPUpload
    
    Set objForm = New UserFormCSMPUpload
        
    objForm.SetupForm Year(Now), "Commercial", ActiveWorkbook.Name, strDBFileName
    
    objForm.Show
    
    nYear = objForm.Year
    strEndUserType = objForm.EndUserType
    strOfferOrFinal = objForm.OfferOrFinal
    strRequest = objForm.Request
    strLastUpdated = objForm.LastUpdated
    strResultWinLoss = objForm.ResultWinLoss
    strState = objForm.State
    strOrgUnit = objForm.OrgUnit
    strSalesRep = objForm.SalesRep
    nOfferID = objForm.OfferID
    nRevisionID = objForm.RevisionID
    strCINCSupport = objForm.CINCSupport
    bInsertOrUpdate = objForm.SaveNew
    strTargetAccount = objForm.TargetAccount
    strCity = objForm.City
    nTSEID = objForm.TSEID
    bCSAP_CHC = objForm.CSAP_CHC
    
    UploadOptionalParams = objForm.CancelFlag
        
End Function

'Help function to get selected option for Level
Public Function GetRadioButtonValue(wsCSMPDetailForm As Worksheet)
    Dim objOB As OLEObject
    Dim strResult As String
    
    strResult = "X"
    
    For i = 1 To wsCSMPDetailForm.OLEObjects.count
        Set objOB = wsCSMPDetailForm.OLEObjects(i)
        
        If InStr(objOB.Name, "ob") > 0 Then
            If objOB.Object.GroupName = "grpLevel" Then
                If objOB.Object.Value = True Then
                                        Dim nSpacePos As Integer
                                        
                                        nSpacePos = InStr(objOB.Object.Caption, " ")
                                        
                    strResult = Left(objOB.Object.Caption, nSpacePos - 1)
                    Exit For
                End If
            End If
        End If
        
    Next

    GetRadioButtonValue = strResult
End Function

'Help function to get selected option for Level
Public Function GetRadioButtonValueForSupport(wsCSMPDetailForm As Worksheet, strRadioButtonName As String)
    Dim objOB As OLEObject
    Dim strResult As String
    
    strResult = "False"
    
    For i = 1 To wsCSMPDetailForm.OLEObjects.count
        Set objOB = wsCSMPDetailForm.OLEObjects(i)
        
        If InStr(objOB.Name, strRadioButtonName) > 0 Then
            strResult = objOB.Object.Value
            Exit For
        End If
        
    Next

    GetRadioButtonValueForSupport = strResult
End Function

' GetConfigValue
'
'
'
Public Function GetConfigValue(strKeyName As String)

    Dim lpApplicationName As String
    Dim lpFileName As String
    Dim strResult As String
    Dim nRes As Long
    
    strResult = Space(255)
    
    lpApplicationName = "Settings"
    lpFileName = ActiveWorkbook.Path & "\master.ini"
    
    nRes = GetPrivateProfileString(lpApplicationName, strKeyName, "", strResult, Len(strResult), lpFileName)
        
    GetConfigValue = Replace(Trim(strResult), Chr(0), "")
End Function

'SetFilter on column D for particulat worksheet
'
'
Public Sub SetFilter(strWorksheetName As String, strColumnRange As String)
    Dim wsTemp As Worksheet
    Dim wsActiveCurrent As Worksheet
    Dim strRange As String
    
    Set wsActiveCurrent = ActiveSheet

    Set wsTemp = ActiveWorkbook.Sheets(strWorksheetName)
    
    wsTemp.Activate
    
    'strRange = "D3:D" & CStr(FindTotalsRowIndex(strWorksheetName))
    strRange = strColumnRange & CStr(FindTotalsRowIndex(strWorksheetName))
    
    'remove filter if exists
    If Not wsTemp.AutoFilter Is Nothing Then
        wsTemp.Range(strRange).Select
        Selection.AutoFilter
    End If
        
    wsTemp.Range(strRange).Select
    Selection.AutoFilter
    
    'unlock autofilter even on protected worksheet
    wsTemp.EnableAutoFilter = True
    
    wsActiveCurrent.Activate
End Sub

' FindTotalsRowIndex - Find Totals Column Index value
' with error handling
'
Public Function FindTotalsRowIndex(strWorksheetName As String)
    Dim wsCurrent As Worksheet
    Dim TotalsRow As Integer
    Dim ItemNumberColumn As Integer
    
    Set wsCurrent = ActiveWorkbook.Sheets(strWorksheetName)

    'Find the Totals Row
    ItemNumberColumn = Utils.ColIndexExactMatch(wsCurrent, "Item #", 2)
    
    TotalsRow = Utils.RowsToScan(wsCurrent, "TOTALS", ItemNumberColumn)
    
    If TotalsRow = -1 Then
        MsgBox "Unable to find TOTALS cell in " & strWorksheetName
        
        TotalsRow = Utils.N_MAX_ROWS_TO_SEARCH
    End If
    
    FindTotalsRowIndex = TotalsRow
    
End Function

'Authentication returns True if password correct
'
'
Public Function Authentication()
    Dim strPassword As String
    
    strPassword = InputBox("Enter password to run macro.", "Password")

    If strPassword = "team" Then
        Authentication = True
    Else
        Authentication = False
    End If

End Function

' AssignMacro2ComplexCell - assign macro to cell in particular worksheet
' Call AssignMacro2ComplexCell(ActiveWorkbook, "Digital and Color", "Rectangle 385", "CSMPTotals.CSMPTotals")
'
Public Sub AssignMacro2ComplexCell(wbActiveWorkbook As Workbook, strWorksheetName As String, strShapeName As String, strMacroName As String)
    
    Dim wsTemp As Worksheet
    
    Set wsTemp = wbActiveWorkbook.Sheets(strWorksheetName)
     
    wsTemp.Shapes(strShapeName).ParentGroup.OnAction = "'" & wbActiveWorkbook.Name & "'!" & strMacroName

End Sub

' AssignMacro2Cell - assign macro to cell in particular worksheet
' Call AssignMacro2Cell(ActiveWorkbook, "Digital and Color", "Rectangle 385", "CSMPTotals.CSMPTotals")
'
Public Sub AssignMacro2Cell(wbActiveWorkbook As Workbook, strWorksheetName As String, strShapeName As String, strMacroName As String)
    
    Dim wsTemp As Worksheet
    
    Set wsTemp = wbActiveWorkbook.Sheets(strWorksheetName)
     
    wsTemp.Shapes(strShapeName).OnAction = "'" & wbActiveWorkbook.Name & "'!" & strMacroName

End Sub

' AssignMacro2NewTotalsCell - assign macro to TOTALS cell in particular worksheet with creation of new shape
' Call AssignMacro2NewTotalsCell(ActiveWorkbook, "Digital and Color", "CSMPTotals.CSMPTotals")
'
Public Sub AssignMacro2NewTotalsCell(wbActiveWorkbook As Workbook, strWorksheetName As String, strMacroName As String)
    
    Dim wsTemp As Worksheet
    
    Set wsTemp = wbActiveWorkbook.Sheets(strWorksheetName)
     
    Dim nTotalsRow As Integer
        Dim rTemp As Range
        Dim spTmp As Shape
        
        nTotalsRow = Utils.FindTotalsRowIndex(strWorksheetName)
        
        Set rTemp = wsTemp.Range("B" & CStr(nTotalsRow))
        
        wsTemp.Activate
        Set spTmp = wsTemp.Shapes.AddShape(msoShapeRectangle, rTemp.Left, rTemp.Top, rTemp.Width, rTemp.Height)
        
        spTmp.Fill.Transparency = 1
        
        spTmp.OnAction = "'" & wbActiveWorkbook.Name & "'!" & strMacroName

End Sub

Public Sub CSMPWorkbookStartRoutins(bParamNotInUse As Boolean)
  'fix Totals button on the Software and FPS tabs. 08-24-2017
  Call Utils.VerifyAssignMacro2NewTotalsCell(Application.ThisWorkbook, Utils.STR_DIGITAL_COLOR_WORKSHEET, "A", "Rectangle 385", "CSMPTotals.CSMPTotals")
  Call Utils.VerifyAssignMacro2NewTotalsCell(Application.ThisWorkbook, Utils.STR_SOFTWARE_WORKSHEET, "A", "Rectangle 54", "CSMPTotals.CSMPTotals")
  Call Utils.VerifyAssignMacro2NewTotalsCell(Application.ThisWorkbook, Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET, "A", "Rectangle 50", "CSMPTotals.CSMPTotals")
End Sub

'try to solve macro disapearence in the Software and FPS tabs.
Public Sub VerifyAssignMacro2NewTotalsCell(wbActiveWorkbook As Workbook, strWorksheetName As String, strColumnName As String, strOldShapeName As String, strMacroName As String)
    
    Dim wsTemp As Worksheet
    
    Set wsTemp = wbActiveWorkbook.Sheets(strWorksheetName)
     
    wsTemp.Activate
    
    Dim nTotalsRow As Integer
    Dim rTemp As Range
    Dim spTmp As Shape
    Dim spVerification As Shape
    
    nTotalsRow = Utils.FindTotalsRowIndex(strWorksheetName)
    
    On Error Resume Next
    
    Set spVerification = wsTemp.Shapes(strOldShapeName)
    
    Set rTemp = wsTemp.Range(strColumnName & CStr(nTotalsRow))
    
    Utils.PrintDbgMsg ("The new shape coordinates will be (" & CStr(rTemp.Left) & "," & CStr(rTemp.Top) & ")")
    
    If spVerification Is Nothing Then
          
      wsTemp.Activate
      Set spTmp = wsTemp.Shapes.AddShape(msoShapeRectangle, rTemp.Left, rTemp.Top, rTemp.Width, rTemp.Height)
      
      spTmp.Fill.Transparency = 1
      
      spTmp.OnAction = "'" & wbActiveWorkbook.Name & "'!" & strMacroName
    Else
      With spVerification
        .Left = rTemp.Left
        .Top = rTemp.Top
        .OnAction = "'" & wbActiveWorkbook.Name & "'!" & strMacroName
      End With
    End If
    
End Sub

Private Sub PreProcessMasterForLandedCost(wbMaster As Workbook, strWorksheetName As String, bOMorGSAFlag As Boolean)
    Dim nTotalsRowIndex As Integer
    Dim nCollOffsetFederal As Integer
    Dim nCollOffset As Integer
        
    wbMaster.Activate
    
    nTotalsRowIndex = FindTotalsRowIndex(strWorksheetName)
    
    nCollOffsetFederal = FindColHeaderOffset(wbMaster.Sheets(strWorksheetName), "Federal")
    
    If bOMorGSAFlag = True Then
        nCollOffset = FindColHeaderOffset(wbMaster.Sheets(strWorksheetName), "OM")
    Else
        nCollOffset = FindColHeaderOffset(wbMaster.Sheets(strWorksheetName), "GSA")
    End If
    
    wbMaster.Activate
    wbMaster.Sheets(strWorksheetName).Activate
    wbMaster.Sheets(strWorksheetName).Select
    
    i = 0
    a = 0
    Do While a < nTotalsRowIndex
        Range("A5").Activate
        'If ActiveCell.Offset(i, nCollOffsetFederal) = "P" And ActiveCell.Offset(i, nCollOffset) = "P" Then
        If ActiveCell.Offset(i, nCollOffset) = "P" Then 'exact match
            i = i + 1
            a = a + 1
        Else
            Rows(i + 5).Select
            Selection.Delete Shift:=xlUp
            a = a + 1
        End If
    Loop
    
    'don't need TOTALS cell because it will override data in destination worksheet in Copy GSA/OM Landed cost
    'wbMaster.Activate
    'wbMaster.Sheets(strWorksheetName).Activate
    'wbMaster.Sheets(strWorksheetName).Select
    '
    'nTotalsRowIndex = FindTotalsRowIndex(strWorksheetName)
    '
    'wbMaster.Sheets(strWorksheetName).Range("A" & CStr(nTotalsRowIndex)).EntireRow.Delete Shift:=xlUp
End Sub

'bOMorGSAFlag - True - OM; False - GSA
Public Sub CreateLandedCostFederal(wbMaster As Workbook, wbSplitWorkbook As Workbook, bOMorGSAFlag As Boolean)
    Dim strLCFileName As String
    Dim wbLandedCost As Workbook
    Dim wbCurrent As Workbook
    Dim strListOfWorksheets(3) As String
    Dim strStartDestRange As String
    Dim strStartDestRangeLetter As String
    Dim strLCColumnName As String
    Dim strSourceSuffix As String
    Dim strOriginalSplittedBookPath As String
        
    Application.ScreenUpdating = False

    Dim strTmpFilePath As String
    
    strOriginalSplittedBookPath = wbSplitWorkbook.FullName
    
    strTmpFilePath = wbSplitWorkbook.Path & "\Book1.xlsm"
    
    PrintDbgMsg "strOriginalSplittedBookPath: " & strOriginalSplittedBookPath
    PrintDbgMsg "strTmpFilePath: " & strTmpFilePath
    
    Dim fso As Object
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    'object.copyfile,source,destination,file overright(True is default)
    fso.CopyFile strOriginalSplittedBookPath, strTmpFilePath, True
    
    Set fso = Nothing

    'FileCopy strOriginalSplittedBookPath, strTmpFilePath
    
    PrintDbgMsg "Success"
    
    Set wbCurrent = Workbooks.Open(strTmpFilePath, 0, CorruptLoad:=xlRepairFile) 'don't update links
    
    Set wbLandedCost = Workbooks.Open(wbSplitWorkbook.Path & "\LandedCost_TEMPLATE.xlsm", 0, CorruptLoad:=xlRepairFile) 'don't update links
    
    Dim i As Integer
    
    strListOfWorksheets(0) = STR_DIGITAL_COLOR_WORKSHEET
    strListOfWorksheets(1) = STR_SOFTWARE_WORKSHEET
    strListOfWorksheets(2) = STR_FAX_PRINTER_SCANNER_WORKSHEET

    wbCurrent.Activate
    
    'SetVisibilityAndProtectionOfWorksheets strListOfWorksheets, xlSheetVisible, False, "team"
    Call SetVisibilityOfWorksheets(strListOfWorksheets, xlSheetVisible)
    Call ProtectWorksheets(False, "team", strListOfWorksheets)
        
    wbCurrent.Activate
    
    For i = 0 To UBound(strListOfWorksheets) - 1
        Call PreProcessMasterForLandedCost(wbCurrent, strListOfWorksheets(i), bOMorGSAFlag)
    Next
    
    wbLandedCost.Activate
    
    If bOMorGSAFlag = True Then
        strLCColumnName = "FedOM"
    Else
        strLCColumnName = "FedGSA"
    End If
    
    For i = 0 To UBound(strListOfWorksheets) - 1
    
        wbLandedCost.Sheets(strListOfWorksheets(i)).Range("A1").EntireColumn.Insert xlShiftToRight
        
        wbCurrent.Sheets(strListOfWorksheets(i)).Range("B:D").Copy
        wbLandedCost.Sheets(strListOfWorksheets(i)).Range("B1").PasteSpecial
                
        'insert/rename column in worksheet
        wbLandedCost.Sheets(strListOfWorksheets(i)).Range("G1").EntireColumn.Insert xlShiftToRight
        
        If bOMorGSAFlag = True Then
            wbLandedCost.Sheets(strListOfWorksheets(i)).Range("G2").Value = "N/A"
        Else
            wbLandedCost.Sheets(strListOfWorksheets(i)).Range("G2").Value = "Short Funding"
        End If
        
        wbLandedCost.Sheets(strListOfWorksheets(i)).Range("H2").Value = "% off MSRP"
        
        Call ProcessLandedCostOneWorksheet(wbMaster.Sheets(strListOfWorksheets(i)), wbLandedCost.Sheets(strListOfWorksheets(i)), strLCColumnName)
        
    Next
    
    wbCurrent.Close SaveChanges:=False
        
    Kill strTmpFilePath
    
    Call RemoveModules.ExportModule(wbSplitWorkbook, "Utils", wbSplitWorkbook.Path & "\")
    Call RemoveModules.ImportModule(wbLandedCost, wbSplitWorkbook.Path & "\Utils.bas")

    'Standard Costing 04.01.11-MASTER.xlsm => Landed Cost 04.01.11-CSMP.xlsm
    strLCFileName = Replace(wbMaster.Name, "Standard Costing", "Landed Cost")
    strLCFileName = Replace(strLCFileName, "MASTER", strLCColumnName)

    wbLandedCost.SaveAs (wbLandedCost.Path & "\" & strLCFileName)

    'MakeLCFileWithGoodFormating wbLandedCost, " - " & strLCColumnName
    
    Call Utils.SetMenuBar2(wbLandedCost, "Call Utils.AddAddIn2menuBar(""Version"", ""Utils.GetVersion"")", _
                           "Call Utils.RemoveAddInFromMenuBar(""Version"")", False)

    wbLandedCost.Save

    wbLandedCost.Close
        
    Application.ScreenUpdating = True
End Sub

Private Sub CopyLandedCost(strSuffix As String, strStartSourceRange As String)
    Dim strLCFileName As String
    Dim wbMaster As Workbook
    Dim wbLandedCost As Workbook
    Dim strListOfWorksheets(3) As String
    Dim strStartDestRange As String
    'Dim strStartSourceRange As String
    Dim strSourceSuffix As String
    
    If Utils.Authentication = False Then Exit Sub

    'need to find last column and then paste data 06-13-2011
    'strStartDestRange = "R1"
    'strStartSourceRange = "D:F"
    strSourceSuffix = strSuffix '" - Oc|e9|"
    
    strListOfWorksheets(0) = "Digital and Color"
    strListOfWorksheets(1) = "Software"
    strListOfWorksheets(2) = "Fax, Printer, Scanner"
    
    strLCFileName = OpenFileDialog("All Files (*.*), *.*, " & _
                                   "Excel files (*.xls; *.xlsx; *.xlsm), *.xls;*.xlsx;*.xlsm", "Open Landed Cost File" & strSuffix)
    
    'strLCFileName = InputBox("Enter name of ""Landed Cost.xlsm"" file name", "File", GetConfigValue("OCELandedCostFileName"))
        
    Set wbMaster = ActiveWorkbook
    
    'unprotect worksheets
    Dim bProtectedFlag As Boolean
    
    bProtectedFlag = True

    If bProtectedFlag = True Then
        ProtectWorksheets False, "team", strListOfWorksheets
        bProtectedFlag = False
    End If

    Set wbLandedCost = Workbooks.Open(strLCFileName, False)
    
    Dim rDestinationRange As Range
    Dim rSourceRange As Range
    
    For i = 0 To UBound(strListOfWorksheets)
        If strListOfWorksheets(i) <> "" Then
            
            Dim bLastFoundFlag As Boolean
            Dim strTmpRange As String
            Dim wsSourceWS As Worksheet
            Dim wsTargetWS As Worksheet
            
            Set wsSourceWS = wbLandedCost.Sheets(strListOfWorksheets(i) & strSourceSuffix)
            Set wsTargetWS = wbMaster.Sheets(strListOfWorksheets(i))
            
            bLastFoundFlag = False
            
            a = 1
            Do While a < 78
                If Trim(CStr(wsTargetWS.Cells(2, a).Value)) = "" And bLastFoundFlag = True Then
                    strStartDestRange = wsTargetWS.Cells(1, a).Address(False, False)
                    Exit Do
                End If
            
                If Trim(CStr(wsTargetWS.Cells(2, a).Value)) <> "" Then bLastFoundFlag = True
            
                a = a + 1
            Loop
                 
            With wsSourceWS
                Set rSourceRange = .Range(strStartSourceRange)
            End With
            
            rSourceRange.Copy
               
                        If strSuffix = " - CSMP" Then
                                Dim nColumnWhereToInsertLC As Integer
                                
                                'If strListOfWorksheets(i) = STR_SOFTWARE_WORKSHEET Then
                                '        nColumnWhereToInsertLC = ColIndexExactMatch(wsTargetWS, "Total Price", 2) + 1
                                'Else
                                '        nColumnWhereToInsertLC = ColIndexExactMatch(wsTargetWS, "Item Class", 2) + 1
                                'End If
                                
                                nColumnWhereToInsertLC = ColIndexExactMatch(wsTargetWS, STR_COLUMN_NAME_ROW_NUMBER, 2) + 1
                                
                                strStartDestRange = wsTargetWS.Cells(1, nColumnWhereToInsertLC).Address(False, False)
                                                                
                        End If
                        
                        Set rDestinationRange = wsTargetWS.Range(strStartDestRange)
                                
                        rDestinationRange.PasteSpecial xlPasteAll
                                
            'apply formula for NAD, FM
            If strSuffix = " - NAD" Or strSuffix = " - FM" Or strSuffix = " - PEAK" Then
                Dim strAddress As String
                Dim strAddress2 As String
                Dim strRow1 As String
                Dim strRow2 As String
                Dim strRow3 As String
                Dim strRow4 As String
                Dim nTotalsRow As Integer
                 
                strAddress = rDestinationRange.Address(False, False)
                
                strRow1 = rDestinationRange.Offset(0, 2).Value
                strRow2 = rDestinationRange.Offset(1, 2).Value
                strRow3 = rDestinationRange.Offset(2, 2).Value
                strRow4 = rDestinationRange.Offset(3, 2).Value
                
                wsTargetWS.Activate
                nTotalsRow = FindTotalsRowIndex(strListOfWorksheets(i))

                'this make file grow to very huge one.
                'rDestinationRange.Offset(0, 2).EntireColumn.Formula = "=IF(IsBlank($" & strAddress & "), """", ($P1-$F1)/$F1)"
                strStartDestRange = rDestinationRange.Offset(0, 2).Address

                Dim strTmpCol As String

                strTmpCol = Mid(strStartDestRange, 2, InStr(2, strStartDestRange, "$") - 2)

                wsTargetWS.Range(strTmpCol & "1:" & strTmpCol & CStr(nTotalsRow)).Formula = "=IF(IsBlank($" & strAddress & "), """", ($P1-$F1)/$F1)"

                rDestinationRange.Offset(0, 2).Value = strRow1
                rDestinationRange.Offset(1, 2).Value = strRow2
                rDestinationRange.Offset(2, 2).Value = strRow3
                rDestinationRange.Offset(3, 2).Value = strRow4
            ElseIf strSuffix = " - DFM" Then
                'remove column: "GP Less CWO%"  (last column)
                rDestinationRange.Offset(0, 2).EntireColumn.Delete
                        End If
        End If
    Next

    If strSourceSuffix = " - CSMP" Then
        'Call CopyAutoCreditColumnToCSMP(wbLandedCost, wbMaster)
        
        'copy STR_PRODUCT_GROUP_DISCOUNTS_WORKSHEET
        Application.DisplayAlerts = False
        
        Dim wsProductGroupDiscounts As Worksheet
        Dim wsProductGroupDiscountsInCSMPWorkbook As Worksheet
        
        Set wsProductGroupDiscounts = wbLandedCost.Sheets(STR_PRODUCT_GROUP_DISCOUNTS_WORKSHEET)
        
        If Not wsProductGroupDiscounts Is Nothing Then
            On Error Resume Next
            Set wsProductGroupDiscountsInCSMPWorkbook = wbMaster.Sheets(STR_PRODUCT_GROUP_DISCOUNTS_WORKSHEET)
            
            If Not wsProductGroupDiscountsInCSMPWorkbook Is Nothing Then
                wsProductGroupDiscountsInCSMPWorkbook.Delete
            End If
            
            Call wsProductGroupDiscounts.Copy(wbMaster.Sheets(wbMaster.Sheets.count - 1))
            
            Set wsProductGroupDiscounts = Nothing
        End If
        
        Application.DisplayAlerts = True
    End If
    
    wbLandedCost.Application.CutCopyMode = False
    
    wbLandedCost.Close False

    'protect worksheets
    If bProtectedFlag = False Then ProtectWorksheets True, "team", strListOfWorksheets

    'added removal Addin Menu as of 09-15-2011
    Call Utils.AddAddIn2menuBar("Remove LandedCost Collumns", "Utils.RemoveLandedCostCollumnsMacro")
    
End Sub

' OpenFileDialog - select 1 file based on filter criteria
'
'
Public Function OpenFileDialog(strFilter As String, strDialogCaption As String)
    Dim vFile As Variant
    
    '"Text files (*.txt), *.txt"
    vFile = Application.GetOpenFileName(strFilter, 1, strDialogCaption, , False)
    
    OpenFileDialog = Trim(CStr(vFile))

End Function

Public Sub GetVersion()
  MsgBox "Version 2019.11.01.0"
End Sub

Private Sub SaveBackup()
    
    If MsgBox("Do you want to save backup of the book", vbYesNo) = vbYes Then
        Dim strCurrentBookPath As String
        Dim strNewBookPath As String
        
        strCurrentBookPath = ActiveWorkbook.Path & "\" & ActiveWorkbook.Name
        strNewBookPath = ActiveWorkbook.Path & "\" & ActiveWorkbook.Name & "_backup_" & Replace(Replace(CStr(Now), ":", "-", 1, -1, vbTextCompare), "/", "-", 1, -1, vbTextCompare) & ".xlsm"
        
        'Make backup copy of existing book
        Dim fso As New FileSystemObject
        fso.CopyFile strCurrentBookPath, strNewBookPath
    End If
End Sub

Public Function CreateGenericLandedCostWorksheet(wbMaster As Workbook, wbSplitWorkbook As Workbook, strLCColumnName As String, strLastColumnCaption As String)
    
    Dim bCopyFlag As Boolean
    Dim LCColumn As Integer
    
    Dim strFncResult As String
    Dim wbCurrent As Workbook
    Dim wbLandedCost As Workbook
    
    CreateGenericLandedCostWorksheet = ""
    
    Application.ScreenUpdating = False

    Set wbCurrent = wbMaster
    Set wbLandedCost = Workbooks.Open(wbCurrent.Path & "\LandedCost_TEMPLATE.xlsm", 0) 'don't update links

    'shift colons one position right
    If IsLCShifted(strLCColumnName) = True Then
        wbLandedCost.Sheets("Digital and Color").Range("A1").EntireColumn.Insert xlShiftToRight
        wbLandedCost.Sheets("Software").Range("A1").EntireColumn.Insert xlShiftToRight
        wbLandedCost.Sheets("Fax, Printer, Scanner").Range("A1").EntireColumn.Insert xlShiftToRight
        
        wbSplitWorkbook.Sheets("Digital and Color").Range("B:D").Copy
        wbLandedCost.Sheets("Digital and Color").Range("B1").PasteSpecial
        
        wbSplitWorkbook.Sheets("Software").Range("B:D").Copy
        wbLandedCost.Sheets("Software").Range("B1").PasteSpecial
        
        wbSplitWorkbook.Sheets("Fax, Printer, Scanner").Range("B:D").Copy
        wbLandedCost.Sheets("Fax, Printer, Scanner").Range("B1").PasteSpecial
        Else
        
        wbSplitWorkbook.Sheets("Digital and Color").Range("A:C").Copy
        wbLandedCost.Sheets("Digital and Color").Range("A1").PasteSpecial
        
        wbSplitWorkbook.Sheets("Software").Range("A:C").Copy
        wbLandedCost.Sheets("Software").Range("A1").PasteSpecial
        
        wbSplitWorkbook.Sheets("Fax, Printer, Scanner").Range("A:C").Copy
        wbLandedCost.Sheets("Fax, Printer, Scanner").Range("A1").PasteSpecial
    End If

    'rename header F2
    If Trim(strLastColumnCaption) <> "" Then
                 
        If IsLCShifted(strLCColumnName) = True Then
            wbLandedCost.Sheets("Digital and Color").Range("G2").Value = strLastColumnCaption '"% off MSRP"
            wbLandedCost.Sheets("Software").Range("G2").Value = strLastColumnCaption '"% off MSRP"
            wbLandedCost.Sheets("Fax, Printer, Scanner").Range("G2").Value = strLastColumnCaption '"% off MSRP"
        Else
            wbLandedCost.Sheets("Digital and Color").Range("F2").Value = strLastColumnCaption '"% off MSRP"
            wbLandedCost.Sheets("Software").Range("F2").Value = strLastColumnCaption '"% off MSRP"
            wbLandedCost.Sheets("Fax, Printer, Scanner").Range("F2").Value = strLastColumnCaption '"% off MSRP"
        End If
    End If
    
    Call ProcessLandedCostOneWorksheet(wbCurrent.Sheets("Digital and Color"), wbLandedCost.Sheets("Digital and Color"), strLCColumnName)
    Call ProcessLandedCostOneWorksheet(wbCurrent.Sheets("Software"), wbLandedCost.Sheets("Software"), strLCColumnName)
    Call ProcessLandedCostOneWorksheet(wbCurrent.Sheets("Fax, Printer, Scanner"), wbLandedCost.Sheets("Fax, Printer, Scanner"), strLCColumnName)
    
    If strLCColumnName = "CSMP" Then
        Call SaveAutoCreditColumnForCSMP(wbLandedCost, wbSplitWorkbook)
        
        wbSplitWorkbook.Save
    End If
    
    Call RemoveModules.ExportModule(wbSplitWorkbook, "Utils", wbCurrent.Path & "\")
    Call RemoveModules.ImportModule(wbLandedCost, wbCurrent.Path & "\Utils.bas")

    Dim strLCFileName As String

    'Standard Costing 04.01.11-MASTER.xlsm => Landed Cost 04.01.11-CSMP.xlsm
    strLCFileName = Replace(wbCurrent.Name, "Standard Costing", "Landed Cost")
    strLCFileName = Replace(strLCFileName, "MASTER", strLCColumnName)

    wbLandedCost.SaveAs (wbLandedCost.Path & "\" & strLCFileName)

    Call Utils.SetMenuBar2(wbLandedCost, "Call Utils.AddAddIn2menuBar(""Version"", ""Utils.GetVersion"")", _
                           "Call Utils.RemoveAddInFromMenuBar(""Version"")", False)

    'MakeLCFileWithGoodFormating wbLandedCost, " - " & strLCColumnName
    
    wbLandedCost.Save

    CreateGenericLandedCostWorksheet = wbLandedCost.FullName
    
    wbLandedCost.Close
    
    Application.ScreenUpdating = True

End Function

Private Function ProcessLandedCostOneWorksheet(wsMaster As Worksheet, wsInLandedCost As Worksheet, strLCColumnName As String)
    Dim nLandedCostCounter As Integer
    Dim nCurrentCounter As Integer
    Dim a As Integer
    Dim TotalsRowDigital As Integer

    ProcessLandedCostOneWorksheet = False

    wsMaster.Activate
    
    wsMaster.Select

    'Find item number Column
    ItemNumberColumn = 1
        
    'Find the Totals Row
    a = 0
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        Range("A1").Select
        If ActiveCell.Offset(a, ItemNumberColumn).Value = "TOTALS" Then
        TotalsRowDigital = a
        a = Utils.N_MAX_ROWS_TO_SEARCH
        Else
        a = a + 1
        End If
    Loop

    nCurrentCounter = 0
    nLandedCostCounter = 0

    Do While nLandedCostCounter < TotalsRowDigital
        Do While nCurrentCounter < TotalsRowDigital

            If IsLCShifted(strLCColumnName) = True Then
                strFncResult = IsRowMatch(wsMaster, wsInLandedCost, nCurrentCounter, nLandedCostCounter, 1)
            Else
                strFncResult = IsRowMatch(wsMaster, wsInLandedCost, nCurrentCounter, nLandedCostCounter, 0)
            End If

            If strFncResult = "True" Then
                ' copy here
                wsMaster.Range("E" & CStr(nCurrentCounter + 5)).Copy

                If IsLCShifted(strLCColumnName) = True Then
                    wsInLandedCost.Range("E" & CStr(nLandedCostCounter + 5)).PasteSpecial xlPasteValues
                Else
                    wsInLandedCost.Range("D" & CStr(nLandedCostCounter + 5)).PasteSpecial xlPasteValues
                End If
                
                Exit Do
            ElseIf strFncResult = "Skip" Then
                'do nothing
                nCurrentCounter = nCurrentCounter + 1
                Exit Do
            End If
            
            nCurrentCounter = nCurrentCounter + 1
            
        Loop
            
        nLandedCostCounter = nLandedCostCounter + 1
    Loop
    
    wsInLandedCost.Name = wsInLandedCost.Name & " - " & strLCColumnName

    ProcessLandedCostOneWorksheet = True
End Function

Private Function IsLCShifted(strLCColumnName As String)
    If strLCColumnName = "NAD" Or _
       strLCColumnName = "FM" Or _
       strLCColumnName = "PEAK" Or _
       strLCColumnName = "HP" Or _
       strLCColumnName = "FedOM" Or _
       strLCColumnName = "FedGSA" Or _
       strLCColumnName = "DFM" Then
        IsLCShifted = True
    Else
        IsLCShifted = False
    End If
End Function

Private Function IsRowMatch(wsMaster As Worksheet, wsInLandedCost As Worksheet, nPositionMaster As Integer, nPositionLC As Integer, nShiftCol As Integer)
    If Trim(CStr(wsMaster.Range("B" + CStr(nPositionMaster + 5)).Value)) = "" And _
       Trim(CStr(wsMaster.Range("C" + CStr(nPositionMaster + 5)).Value)) = "" And _
       Trim(CStr(wsMaster.Range("D" + CStr(nPositionMaster + 5)).Value)) = "" And _
       Trim(CStr(wsMaster.Range("B" + CStr(nPositionMaster + 5)).Value)) = Trim(CStr(wsInLandedCost.Range(Chr(Asc("A") + nShiftCol) + CStr(nPositionLC + 5)).Value)) And _
       Trim(CStr(wsMaster.Range("C" + CStr(nPositionMaster + 5)).Value)) = Trim(CStr(wsInLandedCost.Range(Chr(Asc("B") + nShiftCol) + CStr(nPositionLC + 5)).Value)) And _
       Trim(CStr(wsMaster.Range("D" + CStr(nPositionMaster + 5)).Value)) = Trim(CStr(wsInLandedCost.Range(Chr(Asc("C") + nShiftCol) + CStr(nPositionLC + 5)).Value)) Then
        IsRowMatch = "Skip"
    ElseIf Trim(CStr(wsMaster.Range("B" + CStr(nPositionMaster + 5)).Value)) = Trim(CStr(wsInLandedCost.Range(Chr(Asc("A") + nShiftCol) + CStr(nPositionLC + 5)).Value)) And _
           Trim(CStr(wsMaster.Range("C" + CStr(nPositionMaster + 5)).Value)) = Trim(CStr(wsInLandedCost.Range(Chr(Asc("B") + nShiftCol) + CStr(nPositionLC + 5)).Value)) And _
           Trim(CStr(wsMaster.Range("D" + CStr(nPositionMaster + 5)).Value)) = Trim(CStr(wsInLandedCost.Range(Chr(Asc("C") + nShiftCol) + CStr(nPositionLC + 5)).Value)) Then
        IsRowMatch = "True"
    Else
        IsRowMatch = "False"
    End If

End Function


Public Function AddAddIn2menuBar(strCaption As String, strOnActionMacro As String)
    Dim cmbBar As CommandBar
    Dim cmbControl As CommandBarControl
     
    On Error Resume Next
    
    AddAddIn2menuBar = False

    Set cmbBar = Application.CommandBars("Worksheet Menu Bar")
    
    Set cmbControl = cmbBar.Controls(strCaption)
    
    If Not cmbControl Is Nothing Then Exit Function
    
    Set cmbControl = cmbBar.Controls.Add(Type:=msoControlPopup, Temporary:=True) 'adds a menu item to the Menu Bar
    With cmbControl
        .Caption = strCaption '"Channel Selection" 'names the menu item
        .OnAction = strOnActionMacro '"ChannelSelection.ChannelSelection" 'runs the specified macro
    End With

    AddAddIn2menuBar = True
End Function

Public Function RemoveAddInFromMenuBar(strCaption As String)
    RemoveAddInFromMenuBar = False
    
    Dim cmbBar As CommandBar
    Dim cmbControl As CommandBarControl
     
    On Error Resume Next
    
    Set cmbBar = Application.CommandBars("Worksheet Menu Bar")
    
    Set cmbControl = cmbBar.Controls(strCaption)
    
    If cmbControl Is Nothing Then Exit Function
    
    cmbControl.Delete
    
    RemoveAddInFromMenuBar = True
End Function

Public Sub SetMenuBar2(wbWorkbook As Workbook, strOnWBOpenCode As String, strOnBeforeWBClosedCode As String, bCleanExistingCodeFlag As Boolean)
    Dim xlmodule As Object 'VBComponent
    Set xlmodule = wbWorkbook.VBProject.VBComponents("ThisWorkBook")
    
    

    ' Add a macro to the module...
    Dim strCode As String

    strCode = _
          "Private Sub Workbook_Open()" & vbCr & _
              strOnWBOpenCode & vbCr & _
          "end sub" & vbCr & _
          "Private Sub Workbook_BeforeClose(Cancel As Boolean)" & vbCr & _
              strOnBeforeWBClosedCode & vbCr & _
          "end sub"
  
        With xlmodule
        
                If bCleanExistingCodeFlag = True Then
                        Dim nProcCountLines As Integer
                        
                        nProcCountLines = .CodeModule.CountOfLines
                        .CodeModule.DeleteLines 1, nProcCountLines 'empty file
                        
                End If
                
                .CodeModule.AddFromString strCode
                
    End With
End Sub

Public Sub SetMenuBar(strOnWBOpenCode As String, strOnBeforeWBClosedCode As String)
    
     Call SetMenuBar2(ActiveWorkbook, strOnWBOpenCode, strOnBeforeWBClosedCode, True)
End Sub

'AddDataValidation2Column - add combobox in column, actually
'                 strList - comma-separated list of restricted values
'
Public Sub AddDataValidation2Column(wsCurrent As Worksheet, strColomnName As String, nNumberOfRows As Integer, strList As String)
    Dim rnCurrent As Range
    Dim nCounter As Integer
    
    For nCounter = 1 To nNumberOfRows
        Set rnCurrent = wsCurrent.Range(strColomnName & CStr(nCounter))

        rnCurrent.Validation.Delete
        
        rnCurrent.Validation.Add xlValidateList, xlValidAlertStop, xlEqual, strList, "NotUsed"
        
        rnCurrent.Validation.IgnoreBlank = True
    Next

End Sub

'AddDataValidation2Range - add combobox in column, actually
'                 strList - comma-separated list of restricted values
'
Public Sub AddDataValidation2Range(rnCurrent As Range, strList As String)
    
    rnCurrent.Validation.Delete
    
    rnCurrent.Validation.Add xlValidateList, xlValidAlertStop, xlEqual, strList, "NotUsed"
    
    rnCurrent.Validation.IgnoreBlank = True
    
End Sub

'ApplySpecialValuesFM_Software - self-explanatory
'
'
Public Sub ApplySpecialValuesFM_Software(wbActive As Workbook)
        Call ApplySpecialValuesFM_Generic(wbActive, STR_SOFTWARE_WORKSHEET)
End Sub

'ApplySpecialValuesFM_FPS - self-explanatory
'
'
Public Sub ApplySpecialValuesFM_FPS(wbActive As Workbook)
        Call ApplySpecialValuesFM_Generic(wbActive, STR_FAX_PRINTER_SCANNER_WORKSHEET)
End Sub

'ApplySpecialValuesFM_DigitalColor - self-explanatory
'
'
Public Sub ApplySpecialValuesFM_DigitalColor(wbActive As Workbook)
        Call ApplySpecialValuesFM_Generic(wbActive, STR_DIGITAL_COLOR_WORKSHEET)
End Sub

'strQueryColumnLetterDestination - is destination worksheet column for search. Default is C1
'strQueryColumnLetterSpecialValues  - is special values worksheet column for search. Default is B1
Public Sub GenericSpecialValues(wbActive As Workbook, strChannel As String, _
                                 Optional strQueryColumnLetterDestination As String, _
                                 Optional strQueryColumnLetterSpecialValues As String)
    Dim wsSpecialValues As Worksheet
    Dim rSearch As Range
    Dim strFirstAddress As String
    Dim strSVWorksheetName As String
    Dim strDestinationAddress As String
    Dim wsCurrent As Worksheet
    Dim wsRererence As Worksheet
    Dim i As Integer 'current row
    Dim k As Integer 'current row
    Dim objStructRow As SpecialValueRowStruct
    
    PrintDbgMsg "GenericSpecialValues for channel: " & strChannel
    
    If IsMissingEx(strQueryColumnLetterDestination) = True Then strQueryColumnLetterDestination = "C"
    If IsMissingEx(strQueryColumnLetterSpecialValues) = True Then strQueryColumnLetterSpecialValues = "B"
    
    Set wsSpecialValues = wbActive.Sheets("Special Values")
    Set wsRererence = wsSpecialValues
    
    With wsSpecialValues.Range("A1").EntireColumn
        Set rSearch = .Find(strChannel)
        
        If Not rSearch Is Nothing Then strFirstAddress = rSearch.Address
        Do While Not rSearch Is Nothing
        
            If Trim(CStr(rSearch.Offset(0, 1).Value)) <> "" Then
                If Replace(rSearch.Offset(0, 1).Value, " ", ", ") = STR_FAX_PRINTER_SCANNER_WORKSHEET Then
                    strSVWorksheetName = STR_FAX_PRINTER_SCANNER_WORKSHEET
                Else
                    strSVWorksheetName = rSearch.Offset(0, 1).Value
                End If
                
                Set wsCurrent = wbActive.Sheets(strSVWorksheetName)
                
                strDestinationAddress = strQueryColumnLetterSpecialValues & Mid(rSearch.Address, 3)
                
                arrFind = GetMultipleRowNumbersFromParams(wsCurrent, wsSpecialValues.Range(strDestinationAddress).Value, strQueryColumnLetterDestination & "1")

                Call PopulateSpecialValuesStruct(wsSpecialValues, CInt(Mid(rSearch.Address, 3)), objStructRow)
                
                For k = 1 To UBound(arrFind)
                    If objStructRow.Column <> "" Then
                        PrintDbgMsg "Applying Special Value for: " & strSVWorksheetName & " - Column: " & objStructRow.Column & " and Row: " & CStr(arrFind(k)) & " and Value: " & objStructRow.Value
                        ApplySpecialValueOrFunction wsCurrent.Range(objStructRow.Column & CStr(arrFind(k))), CInt(arrFind(k)), objStructRow.Value
                    End If
                Next
            End If
            
            Set rSearch = .Find(strChannel, wsSpecialValues.Range(rSearch.Address))
            
            If rSearch Is Nothing Then Exit Do

            If strFirstAddress = rSearch.Address Then Exit Do
        Loop
    End With
End Sub
 
'ApplySpecialValuesFM_DigitalColor - self-explanatory
'
'
Private Sub ApplySpecialValuesFM_Generic(wbActive As Workbook, strWorksheetName As String)
    Dim wsSpecialValues As Worksheet
    Dim rSearch As Range
    Dim strFirstAddress As String
    Dim wsCurrent As Worksheet
    Dim wsRererence As Worksheet
    Dim i As Integer 'current row
    Dim k As Integer 'current row

    Set wsCurrent = wbActive.Sheets(strWorksheetName)
                
    Set wsSpecialValues = wbActive.Sheets("Special Values")
    Set wsRererence = wsSpecialValues
    
        '       Black Meter Service Comp        Color Meter Service Comp        Black Meter Toner       Color Meter Toner       Black Meter Canon Admin Color Meter Canon Admin Central Dispatch
        '       Finders Fees    Dealer Monthly Maint. Comp
        
        Dim j As Integer
        Dim arrColumnsNames(9) As String
        Dim arrColumnsOffsetsInSpecValues(9) As Integer
        Dim arrColumnsOffsetsInDataWS(9) As Integer
        
        arrColumnsNames(0) = "Black Meter Service Comp"
        arrColumnsNames(1) = "Color Meter Service Comp"
        arrColumnsNames(2) = "Black Meter Toner"
        arrColumnsNames(3) = "Color Meter Toner"
        arrColumnsNames(4) = "Black Meter Canon Admin"
        arrColumnsNames(5) = "Color Meter Canon Admin"
        arrColumnsNames(6) = "Central Dispatch"
        arrColumnsNames(7) = "Finders Fees"
        arrColumnsNames(8) = "Dealer Monthly Maint. Comp"
        
        For f = 0 To 9
                j = 0
                Do While j < 70
                        If wsSpecialValues.Range("A1").Offset(0, j) = arrColumnsNames(f) Then
                                arrColumnsOffsetsInSpecValues(f) = j
                                Exit Do
                        End If
                        
                        j = j + 1
                Loop
        Next
                                        
    With wsSpecialValues.Range("A1").EntireColumn
        Set rSearch = .Find(STR_FM)
        
        If Not rSearch Is Nothing Then strFirstAddress = rSearch.Address
        Do While Not rSearch Is Nothing
            If Trim(CStr(rSearch.Offset(0, 3).Value)) <> "" Then
                                
                                If rSearch.Offset(0, 1).Value = strWorksheetName Or _
                                   (strWorksheetName = STR_FAX_PRINTER_SCANNER_WORKSHEET And rSearch.Offset(0, 1).Value = Replace(strWorksheetName, ", ", " ")) Then
                                        arrFind = GetMultipleRowNumbersFromParams(wsCurrent, rSearch.Offset(0, 3).Value)
                                        
                                        For k = 1 To UBound(arrFind)
                                                ' A           B          C        D           E                  F        G      H
                                                'Channel    Worksheet       Item#   Model Name      Item Description        Column  Value   Rate
                                                
                                                If Trim(CStr(rSearch.Offset(0, 5).Value)) <> "" Then
                                                        wsCurrent.Activate
                                                                                                                
                                                                                                                PrintDbgMsg ("Range: " & rSearch.Offset(0, 5).Value & CStr(arrFind(k)) & " Value: " & rSearch.Offset(0, 6).Value)
                                                                                                                PrintDbgMsg (vbTab & " Formula: " & wsCurrent.Range(rSearch.Offset(0, 5).Value & CStr(arrFind(k))).Formula)
                                                                                                                PrintDbgMsg (vbTab & " Formula Previous Column: " & wsCurrent.Range(rSearch.Offset(0, 5).Value & CStr(arrFind(k))).Offset(0, -1).Formula)
                                                                                                                
                                                        wsCurrent.Range(rSearch.Offset(0, 5).Value & CStr(arrFind(k))).Value = rSearch.Offset(0, 6).Value
                                                                                                                wsCurrent.Range(rSearch.Offset(0, 5).Value & CStr(arrFind(k))).Offset(0, -1).Select
                                                                                                                Selection.FormatConditions.Delete
                                                        Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLessEqual, _
                                                                Formula1:=(rSearch.Offset(0, 7).Value * -100)
                                                        Selection.FormatConditions(1).Interior.color = vbWhite
                                                        Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
                                                                Formula1:=(rSearch.Offset(0, 7).Value * -100)
                                                        Selection.FormatConditions(2).Interior.color = vbCyan
                                                End If
                                                
                                                'maintenance hard coded values
                                                'find columns offsets in data worksheet
                                                For f = 0 To 9
                                                        j = 0
                                                        Do While j < 70
                                                                If wsCurrent.Range("A2").Offset(0, j) = arrColumnsNames(f) Then
                                                                        arrColumnsOffsetsInDataWS(f) = j
                                                                        Exit Do
                                                                End If
                                                                
                                                                j = j + 1
                                                        Loop
                                                Next
                                                        
                                                'apply special values
                                                For f = 0 To 9
                                                        If Trim(CStr(rSearch.Offset(0, arrColumnsOffsetsInSpecValues(f)).Value)) <> "" Then
                                                                wsCurrent.Range("A1").Offset(arrFind(k) - 1, arrColumnsOffsetsInDataWS(f)).Value = rSearch.Offset(0, arrColumnsOffsetsInSpecValues(f)).Value
                                                        End If
                                                Next
                                                
                                        Next
                                End If
            End If

            Set rSearch = .Find(STR_FM, wsSpecialValues.Range(rSearch.Address))
            
            If rSearch Is Nothing Then Exit Do

            If strFirstAddress = rSearch.Address Then Exit Do
        Loop
    End With
        
End Sub

Public Function GetRowNumberFromParams(wsCurrent As Worksheet, rRefRange As Range)
    Dim rSearch As Range
    Dim strFirstAddress As String

    GetRowNumberFromParams = 1

    With wsCurrent.Range("C1").EntireColumn
        Set rSearch = .Find(rRefRange.Offset(0, 3).Value)
        
        'assume only 1 record for now.
        If Not rSearch Is Nothing Then
            strFirstAddress = rSearch.Address
            GetRowNumberFromParams = CLng(Mid(strFirstAddress, 4))
        Else
            GetRowNumberFromParams = 1
        End If
    End With
End Function

Public Function GetMultipleRowNumbersFromParams(wsCurrent As Worksheet, strSearch As String, Optional strSearchColumn As String)
    Dim rSearch As Range
    Dim strFirstAddress As String
    Dim strResult As String

    strResult = ""

    If IsMissingEx(strSearchColumn) = True Then strSearchColumn = "C1"
    
    With wsCurrent.Range(strSearchColumn).EntireColumn
        Set rSearch = .Find(strSearch, , , xlWhole)
        
        If Not rSearch Is Nothing Then strFirstAddress = rSearch.Address
        Do While Not rSearch Is Nothing

            strResult = strResult & "," & CLng(Mid(rSearch.Address, 4))

            Set rSearch = .Find(strSearch, wsCurrent.Range(rSearch.Address), , xlWhole)
            
            If rSearch Is Nothing Then Exit Do

            If strFirstAddress = rSearch.Address Then Exit Do

        Loop
    End With

    GetMultipleRowNumbersFromParams = Split(strResult, ",")
End Function

Public Function FindColHeaderOffset(wsCurrent As Worksheet, strColHeader As String)
    Dim x As Integer
    
    FindColHeaderOffset = 0
    
    x = 0
    Do While x < 100
        If wsCurrent.Range("A2").Offset(0, x).Value = strColHeader Then
            FindColHeaderOffset = x
            Exit Function
        End If
        
        x = x + 1
    Loop
End Function

'ApplySpecialValuesHP_DigitalColor - self-explanatory
'
'
Public Sub ApplySpecialValuesHP_DigitalColor(wbActive As Workbook)
    Dim wsSpecialValues As Worksheet
    Dim rSearch As Range
    Dim strFirstAddress As String
    Dim wsCurrent As Worksheet
    Dim wsRererence As Worksheet
    Dim i As Integer 'current row
    Dim k As Integer 'current row
    Dim objStructRow As SpecialValueRowStruct
    
    Set wsCurrent = wbActive.Sheets(STR_DIGITAL_COLOR_WORKSHEET)
    Set wsSpecialValues = wbActive.Sheets("Special Values")
    Set wsRererence = wsSpecialValues
    
    With wsSpecialValues.Range("A1").EntireColumn
        Set rSearch = .Find(STR_HP)
        
        If Not rSearch Is Nothing Then strFirstAddress = rSearch.Address
        Do While Not rSearch Is Nothing
            
            If Trim(CStr(rSearch.Offset(0, 3).Value)) <> "" Then
                arrFind = GetMultipleRowNumbersFromParams(wsCurrent, rSearch.Offset(0, 3).Value)
                
                For k = 1 To UBound(arrFind)
                    If rSearch.Offset(0, 1).Value = STR_DIGITAL_COLOR_WORKSHEET Then
                    
                         Call PopulateSpecialValuesStruct(wsSpecialValues, CInt(Mid(rSearch.Address, 3)), objStructRow)
                        
                        'check "Secondary Column" value
                        If Trim(CStr(rSearch.Offset(0, 5).Value)) <> "" Then
                            ApplySpecialValueOrFunction wsCurrent.Range(rSearch.Offset(0, 5).Value & CStr(arrFind(k))), CInt(arrFind(k)), rSearch.Offset(0, 8).Value
                            ApplySpecialValueOrFunction wsCurrent.Range(rSearch.Offset(0, 5).Value & CStr(arrFind(k))).Offset(0, 1), CInt(arrFind(k)), rSearch.Offset(0, 9).Value
                        End If
                        
                        Dim j As Integer
                        
                        For j = 0 To 6
                            If Trim(CStr(rSearch.Offset(0, (11 + j)).Value)) <> "" Then
                                wsCurrent.Range(Chr(Asc(rSearch.Offset(0, 10).Value) + j) & CStr(arrFind(k))).Value = rSearch.Offset(0, (11 + j)).Value
                            End If
                        Next

                        If objStructRow.CentralDispatch <> "" Then
                            wsCurrent.Range(ColPos2letter(wsCurrent, ColIndex(wsCurrent, "Central Dispatch", 2)) & CStr(arrFind(k))).Value = objStructRow.CentralDispatch
                        End If
                        
                        If objStructRow.DealerMonthlyMaint_Comp <> "" Then
                            wsCurrent.Range(ColPos2letter(wsCurrent, ColIndex(wsCurrent, "Dealer Monthly Maint. Comp", 2)) & CStr(arrFind(k))).Value = objStructRow.DealerMonthlyMaint_Comp
                        End If
                    End If
                Next
            Else
                'Section logic will be handled here.
                ApplySpecialValueToSection wsSpecialValues, rSearch, wsCurrent
                        
            End If

            Set rSearch = .Find(STR_HP, wsSpecialValues.Range(rSearch.Address))
            
            If rSearch Is Nothing Then Exit Do

            If strFirstAddress = rSearch.Address Then Exit Do
        Loop
    End With
End Sub

Private Sub ApplySpecialValueToSection(wsSpecialValues As Worksheet, rSearch As Range, wsCurrent As Worksheet)
    Dim objStructRow As SpecialValueRowStruct
    Call PopulateSpecialValuesStruct(wsSpecialValues, CInt(Mid(rSearch.Address, 3)), objStructRow)
    
    If objStructRow.Worksheet = STR_DIGITAL_COLOR_WORKSHEET And objStructRow.Section <> "" Then
        Dim nSectionStartRow, nSectionEndRow, nItemDescriptionColIndex, nRowColorRGB, nItemNumberColIndex
        
        nItemDescriptionColIndex = ColIndex(wsCurrent, "Item Description", 2)
        nItemNumberColIndex = ColIndex(wsCurrent, "Item #", 2)
        
        nRowColorRGB = RGB(70, 130, 180)
        nSectionStartRow = FindRowIndexByCellTextAndColor(wsCurrent, objStructRow.Section, CInt(nItemDescriptionColIndex), Utils.N_MAX_ROWS_TO_SEARCH, CLng(nRowColorRGB))
        
        Dim a As Integer

        nSectionEndRow = nSectionStartRow
        
        a = nSectionStartRow + 1
        
        'just find color after objStructRow.Section
        Do While a < Utils.N_MAX_ROWS_TO_SEARCH
        
            ' for protection search till Totals Row Color
            If wsCurrent.Cells(a, nItemDescriptionColIndex).Interior.color = nRowColorRGB Or _
               wsCurrent.Cells(a, nItemDescriptionColIndex).Interior.color = RGB(0, 0, 126) Then
                nSectionEndRow = a - 1
                
                Exit Do
            End If
            
            a = a + 1
        Loop
        
        Dim strCol As String, strHPLevelIPriceValue As String, strHPLevelIIPriceValue As String
        
        If Trim(CStr(objStructRow.ItemNumber)) = "" And _
           Trim(CStr(objStructRow.ModelName)) = "" And _
           Trim(CStr(objStructRow.ItemDescription)) = "" Then
           strCol = objStructRow.Column
           strHPLevelIPriceValue = objStructRow.HPLevelIPrice
           strHPLevelIIPriceValue = objStructRow.HPLevelIIPrice
        Else
            Exit Sub
        End If
        
        For a = nSectionStartRow To nSectionEndRow
            If wsCurrent.Cells(a, nItemNumberColIndex).Value <> "" Then
                ApplySpecialValueOrFunction wsCurrent.Range(strCol & CStr(a)), a, strHPLevelIPriceValue
                ApplySpecialValueOrFunction wsCurrent.Range(strCol & CStr(a)).Offset(0, 1), a, strHPLevelIIPriceValue
            End If
        Next
    End If
End Sub

'ApplySpecialValuesFederal_DigitalColor - self-explanatory
'
'
Public Sub ApplySpecialValuesFederal_DigitalColor(wbActive As Workbook)
    Dim wsSpecialValues As Worksheet
    Dim rSearch As Range
    Dim strFirstAddress As String
    Dim wsCurrent As Worksheet
    Dim wsRererence As Worksheet
    Dim i As Integer 'current row
    Dim k As Integer 'current row
        Dim objStructRow As SpecialValueRowStruct

    Set wsCurrent = wbActive.Sheets(STR_DIGITAL_COLOR_WORKSHEET)
    Set wsSpecialValues = wbActive.Sheets("Special Values")
    Set wsRererence = wsSpecialValues
    
    With wsSpecialValues.Range("A1").EntireColumn
        Set rSearch = .Find(STR_FEDERAL)
        
        If Not rSearch Is Nothing Then strFirstAddress = rSearch.Address
        Do While Not rSearch Is Nothing
            
            If Trim(CStr(rSearch.Offset(0, 1).Value)) = STR_DIGITAL_COLOR_WORKSHEET Then
                arrFind = GetMultipleRowNumbersFromParams(wsCurrent, rSearch.Offset(0, 3).Value)
                
                For k = 1 To UBound(arrFind)
                                        Call PopulateSpecialValuesStruct(wsSpecialValues, CInt(Mid(rSearch.Address, 3)), objStructRow)
                    FederalHelpFnc2 wbActive, rSearch, CStr(arrFind(k)), objStructRow
                Next
            End If
            
            Set rSearch = .Find(STR_FEDERAL, wsSpecialValues.Range(rSearch.Address))
            
            If rSearch Is Nothing Then Exit Do

            If strFirstAddress = rSearch.Address Then Exit Do
        Loop
    End With
End Sub

Private Sub FederalHelpFnc2(wbActive As Workbook, rSearch As Range, strRowIndex As String, objStructRow As SpecialValueRowStruct)

    Dim wsTarget As Worksheet
    Dim strTmp1 As String
    Dim i As Integer
    Dim nCollOffset As Integer
        
    Set wsTarget = wbActive.Sheets(STR_DIGITAL_COLOR_WORKSHEET)
    
    wbActive.Sheets(STR_DIGITAL_COLOR_WORKSHEET).Activate
    
    '           "AA" column (stands for Action)
    If Trim(CStr(rSearch.Offset(0, 26).Value)) = "Format" Then
        Dim arrayOfColumns(4) As String
                
        arrayOfColumns(0) = "AB"
        arrayOfColumns(1) = "AF"
        arrayOfColumns(2) = "AC"
        arrayOfColumns(3) = "AM"
        
        For i = 0 To UBound(arrayOfColumns) - 1
            
            Range(arrayOfColumns(i) & strRowIndex & ":" & arrayOfColumns(i) & strRowIndex).Select
            Selection.NumberFormat = "$#,##0"
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .color = 13434879
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
        Next
    Else
        For i = 5 To 100
            'Dim strTmp1 As String
            
            'exclude utility columns
            If Trim(CStr(rSearch.Offset(0, i).Value)) <> "" And i <> 21 And i <> 26 And objStructRow.FedCondion = "" Then
                strTmp1 = Mid(rSearch.Offset(0, i).Address, 1, InStr(2, rSearch.Address, "$"))
                
                'with absolute range pointer
                nCollOffset = FindColHeaderOffset(wsTarget, rSearch.EntireColumn.Range(strTmp1 & "1"))
        
                Range("A1").Offset(CInt(strRowIndex) - 1, nCollOffset).Value = rSearch.Offset(0, i).Value
            End If
        Next
                
    End If
End Sub

'ApplySpecialValuesFederal - self-explanatory
'
'
Public Sub ApplySpecialValuesFederal(wbActive As Workbook, strFedCondition As String, Optional strSkipThisTab As String)

    Dim wsSpecialValues As Worksheet
    Dim rSearch As Range
    Dim strFirstAddress As String
    Dim strSVWorksheetName As String
    Dim wsCurrent As Worksheet
    Dim wsRererence As Worksheet
    Dim i As Integer 'current row
    Dim k As Integer 'current row
    Dim objStructRow As SpecialValueRowStruct
    
    Set wsSpecialValues = wbActive.Sheets("Special Values")
    Set wsRererence = wsSpecialValues
    
    With wsSpecialValues.Range("A1").EntireColumn
        Set rSearch = .Find(STR_FEDERAL)
        
        If Not rSearch Is Nothing Then strFirstAddress = rSearch.Address
        Do While Not rSearch Is Nothing
        
            If Trim(CStr(rSearch.Offset(0, 1).Value)) = "" Then
                Dim bConditionFlag As Boolean
                                
                '           "S" column
                If rSearch.Offset(0, 18).Value = "GSA" Or rSearch.Offset(0, 18).Value = "GSA Promo" Then
                        bConditionFlag = True
                Else
                        bConditionFlag = False
                End If
                                
                '      columns:                     "F"                                             "T"
                FederalHelpFnc1 wbActive, rSearch.Offset(0, 5).Value, bConditionFlag, rSearch.Offset(0, 19).Value, rSearch.Offset(0, 20).Value
            Else
                If Replace(rSearch.Offset(0, 1).Value, " ", ", ") = STR_FAX_PRINTER_SCANNER_WORKSHEET Then
                    strSVWorksheetName = STR_FAX_PRINTER_SCANNER_WORKSHEET
                Else
                    strSVWorksheetName = rSearch.Offset(0, 1).Value
                End If
                
                If IsMissing(strSkipThisTab) = False Or IsMissing(strSkipThisTab) = True Then
                  Set wsCurrent = wbActive.Sheets(strSVWorksheetName)
                  
                  arrFind = GetMultipleRowNumbersFromParams(wsCurrent, rSearch.Offset(0, 3).Value)

                  Call PopulateSpecialValuesStruct(wsSpecialValues, CInt(Mid(rSearch.Address, 3)), objStructRow)
                  
                  'apply to all regardless of OM/GSA condition
                  For k = 1 To UBound(arrFind)
                  
                      If objStructRow.Column <> "" Then
                          PrintDbgMsg "Apply Federal Special Value for column: " & objStructRow.Column & " and value: " & objStructRow.Value
                          wsCurrent.Range(objStructRow.Column & CStr(arrFind(k))).Value = objStructRow.Value
                                          End If
                  Next
                End If
            End If
            
            Set rSearch = .Find(STR_FEDERAL, wsSpecialValues.Range(rSearch.Address))
            
            If rSearch Is Nothing Then Exit Do

            If strFirstAddress = rSearch.Address Then Exit Do
        Loop
    End With
End Sub

'ApplyComplexSpecialValuesFederal - self-explanatory
'
'
Public Sub ApplyComplexSpecialValuesFederal(wbActive As Workbook, strFedCondition As String, Optional strSkipThisTab As String)

    Dim wsSpecialValues As Worksheet
    Dim rSearch As Range
    Dim strFirstAddress As String
    Dim strSVWorksheetName As String
    Dim wsCurrent As Worksheet
    Dim wsRererence As Worksheet
    Dim i As Integer 'current row
    Dim k As Integer 'current row
    Dim objStructRow As SpecialValueRowStruct
    
    Set wsSpecialValues = wbActive.Sheets("Special Values")
    Set wsRererence = wsSpecialValues
    
    With wsSpecialValues.Range("A1").EntireColumn
        Set rSearch = .Find(STR_FEDERAL)
        
        If Not rSearch Is Nothing Then strFirstAddress = rSearch.Address
        Do While Not rSearch Is Nothing
        
            If Trim(CStr(rSearch.Offset(0, 1).Value)) = "" Then
                'do nothing
            Else
                If Replace(rSearch.Offset(0, 1).Value, " ", ", ") = STR_FAX_PRINTER_SCANNER_WORKSHEET Then
                    strSVWorksheetName = STR_FAX_PRINTER_SCANNER_WORKSHEET
                Else
                    strSVWorksheetName = rSearch.Offset(0, 1).Value
                End If
                
                If IsMissing(strSkipThisTab) = False Or IsMissing(strSkipThisTab) = True Then
                  Set wsCurrent = wbActive.Sheets(strSVWorksheetName)
                  
                  arrFind = GetMultipleRowNumbersFromParams(wsCurrent, rSearch.Offset(0, 3).Value)

                  Call PopulateSpecialValuesStruct(wsSpecialValues, CInt(Mid(rSearch.Address, 3)), objStructRow)
                  
                  'apply to all regardless of OM/GSA condition
                  For k = 1 To UBound(arrFind)
                  
                      If objStructRow.Column = "" Then
                          Call ApplyComplexFedSpecialValues(wsCurrent, objStructRow, CInt(arrFind(k)), strFedCondition)
                                          End If
                  Next
                End If
            End If
            
            Set rSearch = .Find(STR_FEDERAL, wsSpecialValues.Range(rSearch.Address))
            
            If rSearch Is Nothing Then Exit Do

            If strFirstAddress = rSearch.Address Then Exit Do
        Loop
    End With
End Sub

Private Sub ApplyComplexFedSpecialValues(wsCurrent As Worksheet, objStructRow As SpecialValueRowStruct, nRow As Integer, strFedCondition As String)
        Dim nCollPos As Integer
        Dim j As Integer
        Dim i As Integer
        Dim k As Integer
        
        Dim strTemp As String
        Dim strTemp1 As String
        Dim strLetter As String
        Dim arrStrTemp As Object
        
        For j = LBound(objStructRow.ArrColumnNamesWithValues) To UBound(objStructRow.ArrColumnNamesWithValues)
        
                strTemp = objStructRow.ArrColumnNamesWithValues(j)
                
                If strTemp <> "" Then
                        arrStrTemp2 = Split(strTemp, ",")
                        
                        'get the column letter
                        strTemp1 = arrStrTemp2(0)
                        
                        For k = 1 To 5
                                With wsCurrent.Range("A" & CStr(k)).EntireRow
                                        Set rSearch = .Find(strTemp1)
                                        
                                        If Not rSearch Is Nothing Then
                                                
                                                strLetter = Mid(rSearch.Address, 2, Len(rSearch.Address) - 3)
                                                
                                                Exit For
                                        End If
                                End With
                        Next k
                        
                        'get SpecialValueRowStruct member id
                        nCollPos = CInt(arrStrTemp2(1))
                        
                        i = nCollPos
                        
                        If strFedCondition <> "" Then
                                If strFedCondition = objStructRow.FedCondion Then
                                        Call SetValuesFromSV(wsCurrent, i, strLetter, nRow, objStructRow)
                                End If
                        End If
                End If
        Next j
End Sub

Private Sub SetValuesFromSV(wsCurrent As Worksheet, nSpecialValueRowStructMemberposition As Integer, strLetter As String, nRow As Integer, objStructRow As SpecialValueRowStruct)
        
        'utilOutput.IsFedComplexSVApplies = True
        
        Select Case nSpecialValueRowStructMemberposition
                Case 9
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.HPLevelIPrice
                Case 10
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.HPLevelIIPrice
                Case 11
                        'objStructRow.SecondaryColumn = wsCurrent.Cells(nRowIndex, i).Value
                Case 12
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.BlackMeterServiceComp
                Case 13
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.ColorMeterServiceComp
                Case 14
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.BlackMeterToner
                Case 15
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.ColorMeterToner
                Case 16
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.BlackMeterCanonAdmin
                Case 17
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.ColorMeterCanonAdmin
                Case 18
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.CentralDispatch
                Case 19
                        'objStructRow.FedCondion = wsCurrent.Cells(nRowIndex, i).Value
                Case 20
                        'objStructRow.RateLTOP = wsCurrent.Cells(nRowIndex, i).Value
                Case 21
                        'objStructRow.RatePVL = wsCurrent.Cells(nRowIndex, i).Value
                Case 22
                        'objStructRow.Comment_notusedincalculations = wsCurrent.Cells(nRowIndex, i).Value
                Case 23
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.FindersFees
                Case 24
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.DealerMonthlyMaint_Comp
                Case 25
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.ColorMeterChargeTotal
                Case 26
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.ColorMeterChargeIFF
                Case 27
                        'objStructRow.Action = wsCurrent.Cells(nRowIndex, i).Value
                Case 28
                        'objStructRow.Section = wsCurrent.Cells(nRowIndex, i).Value
                Case 29
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.CustomerBaseCharge
                Case 30
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.CopiesIncluded
                Case 31
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.BlackMeterChargeTotal
                Case 32
                        wsCurrent.Range(strLetter & CStr(nRow)).Value = objStructRow.CanonAdminMonthlyMaintBase
                Case Else
                        'do nothing
        End Select
End Sub

Private Sub FederalHelpFnc1(wbActive As Workbook, strHiddenColumn As String, bCondition As Boolean, strRate1 As String, strRate2 As String)
    
    Dim wsActiveWorksheet As Worksheet
    
    'backup
    If Not IsEmpty(Activeworksheet) Then Set wsActiveWorksheet = Activeworksheet

    Dim bISGSAorGSAPromo As Boolean
    
    bISGSAorGSAPromo = (wbActive.Sheets("Federal Request").Range("B12").Value = "GSA" Or wbActive.Sheets("Federal Request").Range("B12").Value = " GSA Promotion")
    
    If bISGSAorGSAPromo = True And bCondition = True Then
        wbActive.Sheets(STR_DIGITAL_COLOR_WORKSHEET).Select
        Columns(strHiddenColumn).Select
        Selection.EntireColumn.Hidden = False
        
        If wbActive.Sheets("Federal Request").Range("B23").Value = "LTOP" Then
                wbActive.Sheets(STR_DIGITAL_COLOR_WORKSHEET).Range(strHiddenColumn & "1").Value = strRate1
        Else
                wbActive.Sheets(STR_DIGITAL_COLOR_WORKSHEET).Range(strHiddenColumn & "1").Value = strRate2
        End If
        
        wbActive.Sheets(STR_SOFTWARE_WORKSHEET).Select
        Columns(strHiddenColumn).Select
        Selection.EntireColumn.Hidden = False
        
        If wbActive.Sheets("Federal Request").Range("B23").Value = "LTOP" Then
                wbActive.Sheets(STR_SOFTWARE_WORKSHEET).Range(strHiddenColumn & "1").Value = strRate1
        Else
                wbActive.Sheets(STR_SOFTWARE_WORKSHEET).Range(strHiddenColumn & "1").Value = strRate2
        End If
    ElseIf bISGSAorGSAPromo = False And bCondition = False Then
        wbActive.Sheets(STR_DIGITAL_COLOR_WORKSHEET).Select
        Columns(strHiddenColumn).Select
        Selection.EntireColumn.Hidden = False
        
        If wbActive.Sheets("Federal Request").Range("B23").Value = "LTOP" Then
                wbActive.Sheets(STR_DIGITAL_COLOR_WORKSHEET).Range(strHiddenColumn & "1").Value = strRate1
        Else
                wbActive.Sheets(STR_DIGITAL_COLOR_WORKSHEET).Range(strHiddenColumn & "1").Value = strRate2
        End If
        
        wbActive.Sheets(STR_SOFTWARE_WORKSHEET).Select
        Columns(strHiddenColumn).Select
        Selection.EntireColumn.Hidden = False
        
        If wbActive.Sheets("Federal Request").Range("B23").Value = "LTOP" Then
                wbActive.Sheets(STR_SOFTWARE_WORKSHEET).Range(strHiddenColumn & "1").Value = strRate1
        Else
                wbActive.Sheets(STR_SOFTWARE_WORKSHEET).Range(strHiddenColumn & "1").Value = strRate2
        End If
    End If

    If Not wsActiveWorksheet Is Nothing Then wsActiveWorksheet.Activate
        
End Sub

' SetFederalShortFundingFormula
' =((Z122-(AX$1 * W122)) / AX$1)* E122
'
Public Sub SetFederalShortFundingFormula(wbActive As Workbook)
    Dim nTotalsRow As Integer
    Dim bIsGSAFlag As Boolean
    Dim strListOfWorksheets(3) As String
    
    bIsGSAFlag = (wbActive.Sheets("Federal Request").Range("B12").Value = "GSA")
    
    If bIsGSAFlag = False Then
        PrintDbgMsg "SetFederalShortFundingFormula exit for OM..."
        Exit Sub
    End If
    
    strListOfWorksheets(0) = "Digital and Color"
    strListOfWorksheets(1) = "Software"
    strListOfWorksheets(2) = "Fax, Printer, Scanner"
    
    Dim wsTargetWS As Worksheet
    
    'Short Funding is only for GSA-PVL
    'don't need this as of 12/19/2011
    'If bIsGSAFlag = True And (wbActive.Sheets("Federal Request").Range("B23").Value = "LTOP") Then
    '    Dim nShortFundingColIndex
    '
    '    'rename header to "N/A"
    '    For i = 0 To UBound(strListOfWorksheets) - 1
    '        Set wsTargetWS = wbActive.Sheets(strListOfWorksheets(i))
    '
    '        nShortFundingColIndex = ColIndex (wsTargetWS, "Short Funding", 2)
    '
    '        wsTargetWS.Cells (2, nShortFundingColIndex).Value = "N/A"
    '    Next
    '
    '    PrintDbgMsg "SetFederalShortFundingFormula exit for GSA-LTOP..."
    '    Exit Sub
    'End If
    
    For i = 0 To UBound(strListOfWorksheets) - 1
        Set wsTargetWS = wbActive.Sheets(strListOfWorksheets(i))
                
        wsTargetWS.Activate
        nTotalsRow = FindTotalsRowIndex(strListOfWorksheets(i))
        
        Dim a As Integer
        Dim strStartDestRange As String
        Dim bLastFoundFlag As Boolean
    
        a = 3
        Do While a < 78
            If Trim(CStr(wsTargetWS.Cells(2, a).Value)) = "" And bLastFoundFlag = True Then
                'short funding is previous column
                strStartDestRange = wsTargetWS.Cells(1, a - 2).Address
                strStartDestRange = Mid(strStartDestRange, 2, InStr(2, strStartDestRange, "$") - 2)
                Exit Do
            End If
        
            If Trim(CStr(wsTargetWS.Cells(2, a).Value)) <> "" Then bLastFoundFlag = True
        
            a = a + 1
        Loop
        
        'make it dynamic based on lease option selected as of 10-24-2011
        Dim strLetterOfLeadingRate As String
        Dim nColIndexOfLeadingRate As Integer
        Dim nRate24ColIndex As Integer
        
        nRate24ColIndex = ColIndex(wsTargetWS, "24 mo. Monthly Min", 2)
        
        nColIndexOfLeadingRate = nRate24ColIndex
        
        For a = 0 To 3
            If wsTargetWS.Cells(2, nRate24ColIndex + a).EntireColumn.Hidden = False Then nColIndexOfLeadingRate = nRate24ColIndex + a
        Next
        
        strLetterOfLeadingRate = ColPos2letter(wsTargetWS, nColIndexOfLeadingRate)
                
        wsTargetWS.Range(strStartDestRange & "5:" & strStartDestRange & CStr(nTotalsRow - 1)).Formula = "=IF(($B5<>""""),(($" & strLetterOfLeadingRate & "5-(" & strStartDestRange & "$1*$W5))/" & strStartDestRange & "$1)*$E5, """")"
        wsTargetWS.Range(strStartDestRange & "5:" & strStartDestRange & CStr(nTotalsRow - 1)).NumberFormat = "$#,##0.00"

    Next
End Sub

Public Sub RemoveLandedCostCollumnsMacro()
    RemoveLandedCostCollumns ActiveWorkbook
End Sub

Public Sub RemoveLandedCostCollumns(wbCurrent As Workbook)
    Dim strListOfWorksheets(3) As String
    Dim wbMaster As Workbook
    Dim bCSMPBook As Boolean
    
    Const STR_LANDEDCOST_COL_HEADER = "LC"
    
    If Utils.Authentication = False Then Exit Sub

    strListOfWorksheets(0) = "Digital and Color"
    strListOfWorksheets(1) = "Software"
    strListOfWorksheets(2) = "Fax, Printer, Scanner"
    
    Set wbMaster = wbCurrent
    
    'unprotect worksheets
    Dim bProtectedFlag As Boolean
    
    bProtectedFlag = True

    If bProtectedFlag = True Then
        ProtectWorksheets False, "team", strListOfWorksheets
        bProtectedFlag = False
    End If
    
    bCSMPBook = (InStr(1, wbCurrent.Name, "CSMP", 1) > 0)
    
    'logic here
    Dim rDestinationRange As Range
    Dim rSourceRange As Range
    
    For i = 0 To UBound(strListOfWorksheets)
        If strListOfWorksheets(i) <> "" Then
            
            Dim bLastFoundFlag As Boolean
            Dim strTmpRange As String
            Dim wsSourceWS As Worksheet
            Dim wsTargetWS As Worksheet
            Dim nPosLCColumn As Integer
            
            Set wsTargetWS = wbMaster.Sheets(strListOfWorksheets(i))
            
            bLastFoundFlag = False
            
                                
                        a = 1
                        Do While a < 78
                                If Trim(CStr(wsTargetWS.Cells(2, a).Value)) = "" And bLastFoundFlag = True Then
                                        strStartDestRange = wsTargetWS.Cells(1, a).Address(False, False)
                                        Exit Do
                                End If
                        
                                If Trim(CStr(wsTargetWS.Cells(2, a).Value)) = STR_LANDEDCOST_COL_HEADER Then
                                        bLastFoundFlag = True
                                        nPosLCColumn = a
                                End If
                        
                                a = a + 1
                        Loop
                        
                        If bLastFoundFlag = True Then
                                If bCSMPBook = True Then
                                        ClearAutoCreditColumnForCSMP wsTargetWS
                                        
                                        Dim nColumnWhereToInsertLC As Integer
                                        
                                        If strListOfWorksheets(i) = STR_SOFTWARE_WORKSHEET Then
                                                nColumnWhereToInsertLC = ColIndexExactMatch(wsTargetWS, "Total Price", 2) + 1
                                        Else
                                                nColumnWhereToInsertLC = ColIndexExactMatch(wsTargetWS, "Item Class", 2) + 1
                                        End If
                                                                                
                                        wsTargetWS.Range(wsTargetWS.Cells(1, nColumnWhereToInsertLC), wsTargetWS.Cells(1, nColumnWhereToInsertLC + 2)).EntireColumn.Value = ""
                                        
                                Else
                                        wsTargetWS.Range(wsTargetWS.Cells(1, nPosLCColumn), wsTargetWS.Cells(1, a)).EntireColumn.Delete
                                End If
                        Else
                                MsgBox "Landed Cost Column doesn''t exist in worksheet " & strListOfWorksheets(i), vbOKOnly, "RemoveLandedCostCollumnsMacro"
                        End If
        End If
    Next

    'protect worksheets
    If bProtectedFlag = False Then ProtectWorksheets True, "team", strListOfWorksheets
End Sub

'actually we need to fix formula itself by using "ROUND" function
Public Sub FixREFErrCells(wsCurrent As Worksheet)
    Dim nTotalsRow As Integer
    Dim nTotalPriceColPos As Integer
    Dim strCollLetterTotalPrice As String
    Dim a As Integer
    
    nTotalsRow = Utils.FindTotalsRowIndex(wsCurrent.Name)
    
    a = 1
    Do While a < N_MAX_COLS_TO_SEARCH
       Range("A2").Select
       If ActiveCell.Offset(0, a) = "Total Price" Then
            nTotalPriceColPos = a + 1
            Exit Do
       End If
       
       a = a + 1
    Loop
    
    strCollLetterTotalPrice = ColPos2letter(wsCurrent, nTotalPriceColPos)
    
    a = 3
    Do While a < nTotalsRow
        
        If Not (InStr(1, wsCurrent.Cells(a, nTotalPriceColPos).Formula, "=ROUND") > 0) And _
           Trim(CStr(wsCurrent.Cells(a, nTotalPriceColPos).Value)) <> "" Then
            'wsCurrent.Cells (a, nTotalPriceColPos).Formula = "=ROUND(" & Mid (wsCurrent.Cells (a, nTotalPriceColPos).Formula, 2) & ",2)"
            Dim varTemp As Variant
            
            varTemp = wsCurrent.Cells(a, nTotalPriceColPos).Value
            
            wsCurrent.Cells(a, nTotalPriceColPos).Formula = ""
            wsCurrent.Cells(a, nTotalPriceColPos).Value = varTemp
        End If
        
        a = a + 1
    Loop
End Sub

Public Sub ApplyLeasingFormula2All(wsCurrent As Worksheet)
    Dim strCollLetter24 As String
    Dim strCollLetter36 As String
    Dim strCollLetter48 As String
    Dim strCollLetter60 As String
    Dim strCollLetterRef As String
        
    Dim a As Integer
    Dim n24MColPos As Integer
    Dim nTotalsRow As Integer
    
    a = 1
    Do While a < N_MAX_COLS_TO_SEARCH
       Range("A2").Select
       If ActiveCell.Offset(0, a) = "24 mo. Monthly Min" Then
            n24MColPos = a + 1
            Exit Do
       End If
       
       a = a + 1
    Loop
    
    nTotalsRow = Utils.FindTotalsRowIndex(wsCurrent.Name)
    
    strCollLetterRef = ColPos2letter(wsCurrent, n24MColPos - 1)
    strCollLetter24 = ColPos2letter(wsCurrent, n24MColPos)
    strCollLetter36 = ColPos2letter(wsCurrent, n24MColPos + 1)
    strCollLetter48 = ColPos2letter(wsCurrent, n24MColPos + 2)
    strCollLetter60 = ColPos2letter(wsCurrent, n24MColPos + 3)
    
    a = 2
    Do While a < nTotalsRow
        
        If InStr(1, wsCurrent.Cells(a, n24MColPos).Formula, "=ROUND") > 0 Then
            wsCurrent.Cells(a, n24MColPos).Formula = "=ROUND($" & strCollLetterRef & CStr(a) & "*" & strCollLetter24 & "$1,2)"
        End If
        
        If InStr(1, wsCurrent.Cells(a, n24MColPos + 1).Formula, "=ROUND") > 0 Then
            wsCurrent.Cells(a, n24MColPos + 1).Formula = "=ROUND($" & strCollLetterRef & CStr(a) & "*" & strCollLetter36 & "$1,2)"
        End If
        
        If InStr(1, wsCurrent.Cells(a, n24MColPos + 2).Formula, "=ROUND") > 0 Then
            wsCurrent.Cells(a, n24MColPos + 2).Formula = "=ROUND($" & strCollLetterRef & CStr(a) & "*" & strCollLetter48 & "$1,2)"
        End If
        
        If InStr(1, wsCurrent.Cells(a, n24MColPos + 3).Formula, "=ROUND") > 0 Then
            wsCurrent.Cells(a, n24MColPos + 3).Formula = "=ROUND($" & strCollLetterRef & CStr(a) & "*" & strCollLetter60 & "$1,2)"
        End If
        
        a = a + 1
    Loop
    
End Sub

Public Function ColPos2letter(wsCurrent As Worksheet, nColPos As Integer)
    
    ColPos2letter = Mid(wsCurrent.Cells(1, nColPos).Address, 2, _
                         InStr(2, wsCurrent.Cells(1, nColPos).Address, "$") - 2)
End Function

Public Sub ClearNumberOfUnitsColumnAllDataSheets(wbCurrent As Workbook)
        
        ClearNumberOfUnitsColumn (STR_DIGITAL_COLOR_WORKSHEET)
        ClearNumberOfUnitsColumn (STR_SOFTWARE_WORKSHEET)
        ClearNumberOfUnitsColumn (STR_FAX_PRINTER_SCANNER_WORKSHEET)
End Sub

Public Sub ClearNumberOfUnitsColumn(strWSCurrentName As String)
        Dim nTotalsRowIndex As Integer
        Dim nNOUColIndex As Integer
        Dim i As Integer
        Dim wsCurrent As Worksheet
        
        Set wsCurrent = Sheets(strWSCurrentName)
        
        nTotalsRowIndex = FindTotalsRowIndex(strWSCurrentName)
        
        'Number Of Units Column is "D"
        nNOUColIndex = ColIndex(wsCurrent, "Number of Units", 2)
                
        i = 5
        While i < nTotalsRowIndex
                #If DEBUG_MODE = 1 Then
                                        If IsModuleExists("modDebug") Then
                                                If wsCurrent.Cells(i, nNOUColIndex).Formula <> "" Then _
                                                        modDebug.PrintDebug ("Formula for cell in row:" & CStr(i) & " and column:" & CStr(nNOUColIndex) & " is: " & wsCurrent.Cells(i, nNOUColIndex).Formula)
                                        End If
                                #End If
                                
                                If wsCurrent.Cells(i, nNOUColIndex).Formula = "" Then _
                                        wsCurrent.Cells(i, nNOUColIndex).Value = ""
                
                i = i + 1
        Wend
End Sub

Public Function ColIndex(wsReference As Worksheet, strCaption1 As String, nHeaderRow As Integer)
    Dim a As Integer
    
    ColIndex = 0
    
    a = 1
    Do While a < N_MAX_COLS_TO_SEARCH
        If InStr(1, wsReference.Cells(nHeaderRow, a).Value, strCaption1) > 0 Then
           
            ColIndex = a
            
            Exit Do
        End If
        
        a = a + 1
    Loop
End Function

Public Function ColIndexExactMatch(wsReference As Worksheet, strCaption1 As String, nHeaderRow As Integer)
    Dim a As Integer
    
    ColIndexExactMatch = 0
    
    a = 1
    Do While a < N_MAX_COLS_TO_SEARCH
        If wsReference.Cells(nHeaderRow, a).Value = strCaption1 Then
           
            ColIndexExactMatch = a
            
            Exit Do
        End If
        
        a = a + 1
    Loop
End Function

Public Sub ConvertNACellToZero(wsCurrent As Worksheet)
    Dim nTotalsRow As Integer
    Dim n24MLeaseColPos As Integer
    Dim strCollLetterTotalPrice As String
    Dim a As Integer
    
    nTotalsRow = Utils.FindTotalsRowIndex(wsCurrent.Name)
    
    a = 1
    Do While a < N_MAX_COLS_TO_SEARCH
       Range("A2").Select
       If ActiveCell.Offset(0, a) = "24 mo. Monthly Min" Then
            n24MLeaseColPos = a + 1
            Exit Do
       End If
       
       a = a + 1
    Loop
        
    a = 3
    Do While a < nTotalsRow
        
        If InStr(1, wsCurrent.Cells(a, n24MLeaseColPos).Value, "N/A") > 0 Then
            wsCurrent.Cells(a, n24MLeaseColPos).Value = "0"
            wsCurrent.Cells(a, n24MLeaseColPos + 1).Value = "0"
            wsCurrent.Cells(a, n24MLeaseColPos + 2).Value = "0"
            wsCurrent.Cells(a, n24MLeaseColPos + 3).Value = "0"
        End If
        
        a = a + 1
    Loop
End Sub

Public Function FindLastColIndex(wsReference As Worksheet, nHeaderRow As Integer, nStartCollIndex As Integer)
    Dim a As Integer
    
    FindLastColIndex = 0
    
    a = nStartCollIndex
    Do While a < N_MAX_COLS_TO_SEARCH
        If Trim(CStr(wsReference.Cells(nHeaderRow, a).Value)) = "" Then
           
            FindLastColIndex = a
            
            Exit Do
        End If
        
        a = a + 1
    Loop
End Function

Public Sub RemoveFormulasInBlankRows(wsCurrent As Worksheet)
        Dim nItemColPos As Integer
        Dim nLastColPos As Integer
        Dim nTotalsRow As Integer
    Dim a As Integer
    Dim i As Integer
    
    nTotalsRow = Utils.FindTotalsRowIndex(wsCurrent.Name)
        
        nItemColPos = ColIndex(wsCurrent, "Item #", 2)
        nLastColPos = FindLastColIndex(wsCurrent, 2, 2)
        
        a = 3
        Do While a < nTotalsRow
        
                For i = nItemColPos + 3 To nLastColPos - 1
                        If Trim(CStr(wsCurrent.Cells(a, nItemColPos).Value)) = "" Then
                                wsCurrent.Cells(a, i).Formula = ""
                        End If
                Next
                
                a = a + 1
        Loop
        
End Sub

Public Function FindRowIndexByCellText(wsCurrent As Worksheet, strText As String, nColPos As Integer, nMaxNumberOfScanRows As Integer)
        Dim a As Integer
        
        FindRowIndexByCellText = 0
        
        a = 1
        Do While a < nMaxNumberOfScanRows
        
                If wsCurrent.Cells(a, nColPos).Value = strText Then
                
                        FindRowIndexByCellText = a
                        
                        Exit Do
                End If
                
                a = a + 1
        Loop
End Function

Public Function FindRowIndexByCellTextAndColor(wsCurrent As Worksheet, strText As String, nColPos As Integer, nMaxNumberOfScanRows As Integer, nRGBColor As Long)
        Dim a As Integer
        
        FindRowIndexByCellTextAndColor = 0
        
        a = 1
        Do While a < nMaxNumberOfScanRows
        
                If wsCurrent.Cells(a, nColPos).Value = strText And wsCurrent.Cells(a, nColPos).Interior.color = nRGBColor Then
                
                        FindRowIndexByCellTextAndColor = a
                        
                        Exit Do
                End If
                
                a = a + 1
        Loop
End Function

Public Function IsModuleExists(strModuleName As String)
        Dim xlmodule As Object 'VBComponent
        
        On Error Resume Next
        
        IsModuleExists = False
        
    Set xlmodule = ActiveWorkbook.VBProject.VBComponents(strModuleName)
        
        If Not (xlmodule Is Nothing) Then IsModuleExists = True
        
End Function

Public Sub PrintDbgMsg(strMessage As String)
    #If DEBUG_MODE = 1 Then
        OutputDebugString (strMessage)
    #End If
End Sub

Public Sub PrintDbgMsgWithCondition(strMessage As String, bConditionFlag As Boolean)
    If bConditionFlag = True Then
        PrintDbgMsg (strMessage)
    End If
End Sub

Public Sub HidePRISMAInSofware(wbActiveWorkbook As Workbook)
    Dim wsSoftware As Worksheet
    Dim nStartRowIndex As Integer
    Dim nEndRowIndex As Integer
    Dim nMaxNumberOfScanRows As Integer
    Dim nColPos As Integer
    Dim nRowColorRGB As Long
    
    Set wsSoftware = wbActiveWorkbook.Sheets(STR_SOFTWARE_WORKSHEET)
    
    nRowColorRGB = RGB(70, 130, 180)
    
    nMaxNumberOfScanRows = Utils.N_MAX_ROWS_TO_SEARCH
    
    nColPos = 4
    
    nStartRowIndex = FindRowIndexByCellTextAndColor(wsSoftware, "PRISMA", nColPos, nMaxNumberOfScanRows, nRowColorRGB)
    
    If nStartRowIndex = 0 Then Exit Sub
        
    Dim a As Integer
        
    nEndRowIndex = nStartRowIndex
    
    a = nStartRowIndex + 1
    
    'just find color after PRISMA
    Do While a < nMaxNumberOfScanRows
    
        ' for protection search till Totals Row Color
        If wsSoftware.Cells(a, nColPos).Interior.color = nRowColorRGB Or _
           wsSoftware.Cells(a, nColPos).Interior.color = RGB(0, 0, 126) Then
            nEndRowIndex = a - 1
            
            Exit Do
        End If
        
        a = a + 1
    Loop
    
    'now hide the rows from nStartRowIndex to nEndRowIndex
    wsSoftware.Range("A" & CStr(nStartRowIndex) & ":A" & CStr(nEndRowIndex)).EntireRow.Hidden = True
    
    Set wsSoftware = Nothing
End Sub

Public Sub ApplyFormulaInFPS(wbActiveWorkbook As Workbook)
    Dim wsFPS As Worksheet
    Dim nStartRowIndex As Integer
    Dim nEndRowIndex As Integer
    Dim nMaxNumberOfScanRows As Integer
    Dim nColPos As Integer
    Dim nRowColorRGB As Long
    
    Set wsFPS = wbActiveWorkbook.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET)
    
    nRowColorRGB = RGB(70, 130, 180)
    
    nMaxNumberOfScanRows = Utils.N_MAX_ROWS_TO_SEARCH
    
    nColPos = 4
    
    nStartRowIndex = FindRowIndexByCellTextAndColor(wsFPS, "ScanFront", nColPos, nMaxNumberOfScanRows, nRowColorRGB)
    
    If nStartRowIndex = 0 Then Exit Sub
    
    Dim a As Integer
        
    nEndRowIndex = nStartRowIndex
    
    a = nStartRowIndex + 1
    
    'just find color after uniFLOW
    Do While a < nMaxNumberOfScanRows
    
        ' for protection search till Totals Row Color
        If wsFPS.Cells(a, nColPos).Interior.color = nRowColorRGB Or _
           wsFPS.Cells(a, nColPos).Interior.color = RGB(0, 0, 126) Then
            nEndRowIndex = a - 1
            
            Exit Do
        End If
        
        a = a + 1
    Loop
    
    a = nStartRowIndex
    
    'now hide the rows from nStartRowIndex to nEndRowIndex
    wsFPS.Range("Q" & CStr(nStartRowIndex) & ":Q" & CStr(nEndRowIndex)).Formula = "=IF((M" & a & "=""""),"""",ROUNDUP(M" & a & "+N" & a & "+O" & a & ",0))"
    
    Set wsFPS = Nothing
End Sub

Public Sub HideUniFlowInSofware(wbActiveWorkbook As Workbook)
    Dim wsSoftware As Worksheet
    Dim nStartRowIndex As Integer
    Dim nEndRowIndex As Integer
    Dim nMaxNumberOfScanRows As Integer
    Dim nColPos As Integer
    Dim nRowColorRGB As Long
    
    Set wsSoftware = wbActiveWorkbook.Sheets(STR_SOFTWARE_WORKSHEET)
    
    nRowColorRGB = RGB(70, 130, 180)
    
    nMaxNumberOfScanRows = Utils.N_MAX_ROWS_TO_SEARCH
    
    nColPos = 4
    
    nStartRowIndex = FindRowIndexByCellTextAndColor(wsSoftware, "UniFLOW", nColPos, nMaxNumberOfScanRows, nRowColorRGB)
    
    If nStartRowIndex = 0 Then Exit Sub
    
    Dim a As Integer
        
    nEndRowIndex = nStartRowIndex
    
    a = nStartRowIndex + 1
    
    'just find color after uniFLOW
    Do While a < nMaxNumberOfScanRows
    
        ' for protection search till Totals Row Color
        If wsSoftware.Cells(a, nColPos).Interior.color = nRowColorRGB Or _
           wsSoftware.Cells(a, nColPos).Interior.color = RGB(0, 0, 126) Then
            nEndRowIndex = a - 1
            
            Exit Do
        End If
        
        a = a + 1
    Loop
    
    'now hide the rows from nStartRowIndex to nEndRowIndex
    wsSoftware.Range("A" & CStr(nStartRowIndex) & ":A" & CStr(nEndRowIndex)).EntireRow.Hidden = True
    
    Set wsSoftware = Nothing
End Sub

Private Sub ApplySpecialValueOrFunction(rgDestination As Range, nRowIndex As Integer, strSpecialValueOrFunction As String)
    Dim bIsValueFlag As String
    
    bIsValueFlag = True
    
    'don't do anything
    If strSpecialValueOrFunction = "" Then Exit Sub

    'figure out if it value or function
    If Mid(strSpecialValueOrFunction, 1, 2) = """=" Then bIsValueFlag = False
    
    If bIsValueFlag = True Then
        rgDestination.Value = strSpecialValueOrFunction
    Else
        Dim strTemp As String
        
        strTemp = Replace(strSpecialValueOrFunction, "#", CStr(nRowIndex), , , vbTextCompare)
        strTemp = Mid(strTemp, 2, Len(strTemp) - 2)
        rgDestination.Formula = strTemp
    End If
    
End Sub

Private Sub MakeLCFileWithGoodFormating(wbActiveWorkbook As Workbook, strSuffix As String)
    Dim nSectionRowColorRGB As Long
    Dim nSubSectionRowColorRGB As Long
    Dim nRegularRowColorRGB As Long
    Dim nGreyRowColorRGB As Long
    Dim nYellowRowColorRGB As Long
    Dim nTotalsRowColorRGB As Long

    nSectionRowColorRGB = RGB(70, 130, 180)
    nSubSectionRowColorRGB = RGB(240, 248, 255)
    nRegularRowColorRGB = RGB(255, 255, 255)
    nGreyRowColorRGB = RGB(191, 191, 191)
    nYellowRowColorRGB = RGB(255, 255, 204)
    nTotalsRowColorRGB = RGB(0, 0, 126)
    
    Dim strListOfWorksheets(3) As String
    Dim nMaxRowsCount As Integer
    Dim i As Integer
    Dim j As Integer
    Dim nItemColPos As Integer
    Dim nLastColPos As Integer
    Dim nTotalsRowIndex As Integer
    Dim wsCurrent As Worksheet
    
    nMaxRowsCount = Utils.N_MAX_ROWS_TO_SEARCH
    
    nTotalsRowIndex = nMaxRowsCount
    
    strListOfWorksheets(0) = STR_DIGITAL_COLOR_WORKSHEET
    strListOfWorksheets(1) = STR_SOFTWARE_WORKSHEET
    strListOfWorksheets(2) = STR_FAX_PRINTER_SCANNER_WORKSHEET

    For i = 0 To UBound(strListOfWorksheets) - 1
        Set wsCurrent = wbActiveWorkbook.Sheets(strListOfWorksheets(i) & strSuffix)
        nItemColPos = ColIndex(wsCurrent, "Item #", 2)
        nLastColPos = FindLastColIndex(wsCurrent, 2, nItemColPos)
        For j = 4 To nMaxRowsCount
            Select Case wsCurrent.Cells(j, nItemColPos).Interior.color
                Case nSectionRowColorRGB
                    ColorLCColumns wsCurrent, j, nItemColPos + 3, nLastColPos, nSectionRowColorRGB
                Case nSubSectionRowColorRGB
                    ColorLCColumns wsCurrent, j, nItemColPos + 3, nLastColPos, nSubSectionRowColorRGB
                'Case nRegularRowColorRGB
                    ' do nothing for now
                Case nYellowRowColorRGBB
                    ColorLCColumns wsCurrent, j, nItemColPos + 3, nLastColPos, nGreyRowColorRGB
                Case nTotalsRowColorRGB
                    ColorLCColumns wsCurrent, j, nItemColPos + 3, nLastColPos, nTotalsRowColorRGB
                    nTotalsRowIndex = j
                Case Else
                    If j > nTotalsRowIndex Then
                        ColorLCColumns wsCurrent, j, nItemColPos + 3, nLastColPos, nRegularRowColorRGB
                    Else
                        If wsCurrent.Cells(j, nItemColPos).Value = "" Then
                            ColorLCColumns wsCurrent, j, nItemColPos + 3, nLastColPos, nRegularRowColorRGB
                        Else
                            ColorLCColumns wsCurrent, j, nItemColPos + 3, nLastColPos, nGreyRowColorRGB
                        End If
                    End If
            End Select
        Next
    Next
    
End Sub

Private Sub ColorLCColumns(wsCurrent As Worksheet, nRowIndex As Integer, nStartColumn As Integer, nEndColumn As Integer, nColor As Long)
    Dim i As Integer
    
    For i = nStartColumn To nEndColumn - 1
        wsCurrent.Cells(nRowIndex, i).Interior.color = nColor
        wsCurrent.Cells(nRowIndex, i).Interior.Pattern = xlPatternAutomatic
        wsCurrent.Cells(nRowIndex, i).Borders.LineStyle = xlContinuous
        wsCurrent.Cells(nRowIndex, i).Font.Bold = False
        wsCurrent.Cells(nRowIndex, i).Font.color = RGB(0, 0, 0)
        wsCurrent.Cells(nRowIndex, i).Font.Size = 10
        
        If i = nStartColumn Then
            wsCurrent.Cells(nRowIndex, i).NumberFormat = "$#,##0.00"
        End If
        
        'if in header name GP put conditional formating
        If InStr(1, wsCurrent.Cells(2, i).Value, "GP") > 0 Then
            wsCurrent.Cells(nRowIndex, i).FormatConditions.Delete
            With wsCurrent.Cells(nRowIndex, i).FormatConditions.Add(Type:=xlCellValue, Operator:=xlLess, Formula1:="0")
                .Font.color = vbRed
            End With
            
        End If
        
        'if in header name MSRP put conditional formating
        If InStr(1, wsCurrent.Cells(2, i).Value, "MSRP") > 0 Then
            wsCurrent.Cells(nRowIndex, i).FormatConditions.Delete
            With wsCurrent.Cells(nRowIndex, i).FormatConditions.Add(Type:=xlCellValue, Operator:=xlLess, Formula1:="0.79")
                .Font.color = vbRed
            End With
        End If
    Next
    
End Sub

Public Sub FixDR7550CinNADandFM(wbActiveWorkbook As Workbook)
    Dim wsCurrent As Worksheet
    
    Set wsCurrent = wbActiveWorkbook.Sheets(STR_FAX_PRINTER_SCANNER_WORKSHEET)

    Dim nRate24ColIndex As Integer
    Dim nRate36ColIndex As Integer
    Dim nRate48ColIndex As Integer
    Dim nRate60ColIndex As Integer
    
    Dim nRate24ColLetter As String
    Dim nRate36ColLetter As String
    Dim nRate48ColLetter As String
    Dim nRate60ColLetter As String
    
    Dim nNADPurchasePriceColIndex As Integer
                
    nRate24ColIndex = ColIndex(wsCurrent, "24 mo. Monthly Min", 2)
    nRate36ColIndex = nRate24ColIndex + 1
    nRate48ColIndex = nRate24ColIndex + 2
    nRate60ColIndex = nRate24ColIndex + 3
    
    nRate24ColLetter = ColPos2letter(wsCurrent, nRate24ColIndex)
    nRate36ColLetter = ColPos2letter(wsCurrent, nRate36ColIndex)
    nRate48ColLetter = ColPos2letter(wsCurrent, nRate48ColIndex)
    nRate60ColLetter = ColPos2letter(wsCurrent, nRate60ColIndex)
    
    nNADPurchasePriceColIndex = ColIndex(wsCurrent, "NAD Purchase Price", 2)
    
    Dim rSearch As Range
    Dim strFirstAddress As String
    Dim strFormula1 As String
    Dim strFormula2 As String

    With wsCurrent.Range("C1").EntireColumn
        Set rSearch = .Find("DR-7550C")
        
        If Not rSearch Is Nothing Then strFirstAddress = rSearch.Address
    End With
    
    strFormula1 = "='" & STR_FAX_PRINTER_SCANNER_WORKSHEET & "'!" & ColPos2letter(wsCurrent, nNADPurchasePriceColIndex) & Mid(strFirstAddress, 4)
        
    Set wsCurrent = Nothing

    Set wsCurrent = wbActiveWorkbook.Sheets(STR_DIGITAL_COLOR_WORKSHEET)
    
    nNADPurchasePriceColIndex = ColIndex(wsCurrent, "NAD Purchase Price", 2)
    
    With wsCurrent.Range("C1").EntireColumn
        Set rSearch = .Find("DR-7550C")
        
        If Not rSearch Is Nothing Then strFirstAddress = rSearch.Address
    End With
    
    Dim strListOfWorksheets(3) As String
    Dim strPassword As String
    
    strPassword = "team"
    
    strListOfWorksheets(0) = STR_DIGITAL_COLOR_WORKSHEET
    
    ProtectWorksheets False, strPassword, strListOfWorksheets
    
    wsCurrent.Cells(CInt(Mid(strFirstAddress, 4)), nNADPurchasePriceColIndex).Formula = strFormula1
    
    Dim nRate24DCColIndex As Integer
    Dim nRate36DCColIndex As Integer
    Dim nRate48DCColIndex As Integer
    Dim nRate60DCColIndex As Integer
    
    nRate24DCColIndex = ColIndex(wsCurrent, "24 mo. Monthly Min", 2)
    nRate36DCColIndex = nRate24DCColIndex + 1
    nRate48DCColIndex = nRate24DCColIndex + 2
    nRate60DCColIndex = nRate24DCColIndex + 3
    
    strFormula2 = "=ROUND(P" & Mid(strFirstAddress, 4) & "*'" & STR_FAX_PRINTER_SCANNER_WORKSHEET & "'!" & nRate24ColLetter & "$1,2)"
    wsCurrent.Cells(CInt(Mid(strFirstAddress, 4)), nRate24DCColIndex).Formula = strFormula2
    
    PrintDbgMsg wsCurrent.Cells(CInt(Mid(strFirstAddress, 4)), nRate24DCColIndex).Address & " Formula: " & wsCurrent.Cells(CInt(Mid(strFirstAddress, 4)), nRate24DCColIndex).Formula
    
    strFormula2 = "=ROUND(P" & Mid(strFirstAddress, 4) & "*'" & STR_FAX_PRINTER_SCANNER_WORKSHEET & "'!" & nRate36ColLetter & "$1,2)"
    wsCurrent.Cells(CInt(Mid(strFirstAddress, 4)), nRate36DCColIndex).Formula = strFormula2
    
    strFormula2 = "=ROUND(P" & Mid(strFirstAddress, 4) & "*'" & STR_FAX_PRINTER_SCANNER_WORKSHEET & "'!" & nRate48ColLetter & "$1,2)"
    wsCurrent.Cells(CInt(Mid(strFirstAddress, 4)), nRate48DCColIndex).Formula = strFormula2
    
    strFormula2 = "=ROUND(P" & Mid(strFirstAddress, 4) & "*'" & STR_FAX_PRINTER_SCANNER_WORKSHEET & "'!" & nRate60ColLetter & "$1,2)"
    wsCurrent.Cells(CInt(Mid(strFirstAddress, 4)), nRate60DCColIndex).Formula = strFormula2
    
    ProtectWorksheets True, strPassword, strListOfWorksheets

End Sub

Public Sub FMadjustScannersFormula(wbActiveWorkbook As Workbook)
    Dim wsCurrent As Worksheet
    Dim nDRScannersStartSectionRowIndex As Integer
    Dim nDRScannersEndSectionRowIndex As Integer
    Dim nTotalPriceColIndex As Integer
    Dim nDealerPlusColIndex As Integer
    
    Set wsCurrent = wbActiveWorkbook.Sheets(STR_FAX_PRINTER_SCANNER_WORKSHEET)
    
    Dim strListOfWorksheets(3) As String
    Dim strPassword As String
    
    strPassword = "team"
    
    strListOfWorksheets(0) = STR_FAX_PRINTER_SCANNER_WORKSHEET
    
    ProtectWorksheets False, strPassword, strListOfWorksheets
    
    nDRScannersStartSectionRowIndex = FindRowIndexByCellTextAndColor(wsCurrent, "DR Scanners", 4, Utils.N_MAX_ROWS_TO_SEARCH, RGB(70, 130, 180))

    nTotalPriceColIndex = ColIndex(wsCurrent, "Total Price", 2)
    nDealerPlusColIndex = ColIndex(wsCurrent, "Dealer Plus", 2)
    
    Dim a As Integer
        
    nDRScannersEndSectionRowIndex = nDRScannersStartSectionRowIndex
    
    a = nDRScannersStartSectionRowIndex + 1
    
    'just find color after uniFLOW
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
    
        ' for protection search till Totals Row Color
        If wsCurrent.Cells(a, 4).Interior.color = RGB(70, 130, 180) Or _
           wsCurrent.Cells(a, 4).Interior.color = RGB(0, 0, 126) Then
            nDRScannersEndSectionRowIndex = a - 1
            
            Exit Do
        End If
        
        a = a + 1
    Loop
    
    Dim strFormula As String
    
    strFormula = "=IF((" & ColPos2letter(wsCurrent, nDealerPlusColIndex) & CStr(nDRScannersStartSectionRowIndex + 1) & "=""""),"""",ROUNDUP(" & ColPos2letter(wsCurrent, nDealerPlusColIndex) & CStr(nDRScannersStartSectionRowIndex + 1) & "+" & _
                               ColPos2letter(wsCurrent, nDealerPlusColIndex + 1) & CStr(nDRScannersStartSectionRowIndex + 1) & "+" & _
                               ColPos2letter(wsCurrent, nDealerPlusColIndex + 2) & CStr(nDRScannersStartSectionRowIndex + 1) & "+" & _
                               ColPos2letter(wsCurrent, nDealerPlusColIndex + 3) & CStr(nDRScannersStartSectionRowIndex + 1) & ",0))"
       
    PrintDbgMsg "Formula: " & strFormula
    
    wsCurrent.Range(ColPos2letter(wsCurrent, nTotalPriceColIndex) & CStr(nDRScannersStartSectionRowIndex + 1) & ":" & ColPos2letter(wsCurrent, nTotalPriceColIndex) & CStr(nDRScannersEndSectionRowIndex)).Formula = strFormula
        
    Set wsCurrent = Nothing

    ProtectWorksheets True, strPassword, strListOfWorksheets
    
End Sub

Public Sub FMadjustSoftwareFormula(wbActiveWorkbook As Workbook)
    Dim wsCurrent As Worksheet
    Dim nTotalsRowIndex As Integer
    Dim nTotalPriceColIndex As Integer
    Dim nDealerPlusColIndex As Integer
    
    Set wsCurrent = wbActiveWorkbook.Sheets(STR_SOFTWARE_WORKSHEET)
    
    Dim strListOfWorksheets(3) As String
    Dim strPassword As String
    
    strPassword = "team"
    
    strListOfWorksheets(0) = STR_SOFTWARE_WORKSHEET
    
    ProtectWorksheets False, strPassword, strListOfWorksheets
    
    'code here
    nTotalsRowIndex = FindTotalsRowIndex(STR_SOFTWARE_WORKSHEET)
    nTotalPriceColIndex = ColIndex(wsCurrent, "Total Price", 2)
    nDealerPlusColIndex = ColIndex(wsCurrent, "Dealer Plus", 2)
    
    Dim strFormula As String
    
    strFormula = "=IF((" & ColPos2letter(wsCurrent, nDealerPlusColIndex) & CStr(4) & "=""""),"""",ROUNDUP(" & ColPos2letter(wsCurrent, nDealerPlusColIndex) & CStr(4) & "+" & _
                               ColPos2letter(wsCurrent, nDealerPlusColIndex + 1) & CStr(4) & "+" & _
                               ColPos2letter(wsCurrent, nDealerPlusColIndex + 2) & CStr(4) & "+" & _
                               ColPos2letter(wsCurrent, nDealerPlusColIndex + 3) & CStr(4) & ",0))"
       
    PrintDbgMsg "Formula: " & strFormula
    
    wsCurrent.Range(ColPos2letter(wsCurrent, nTotalPriceColIndex) & CStr(4) & ":" & ColPos2letter(wsCurrent, nTotalPriceColIndex) & CStr(nTotalsRowIndex)).Formula = strFormula
    
    Set wsCurrent = Nothing

    ProtectWorksheets True, strPassword, strListOfWorksheets
End Sub

Public Sub eCopyMonthlyRatesFormulasNADandFM(wbActiveWorkbook As Workbook)
    Dim wsCurrent As Worksheet
    Dim wsFPS As Worksheet
    Dim nTotalsRowIndex As Integer
    Dim nTotalPriceColIndex As Integer
    Dim nDealerPlusColIndex As Integer
    
    Set wsCurrent = wbActiveWorkbook.Sheets(STR_DIGITAL_COLOR_WORKSHEET)
    Set wsFPS = wbActiveWorkbook.Sheets(STR_FAX_PRINTER_SCANNER_WORKSHEET)
    
    Dim strListOfWorksheets(3) As String
    Dim strPassword As String
    
    strPassword = "team"
    
    strListOfWorksheets(0) = STR_FAX_PRINTER_SCANNER_WORKSHEET
    
    ProtectWorksheets False, strPassword, strListOfWorksheets
    
    'code here
    Dim nRate24ColIndex As Integer
    Dim nRate36ColIndex As Integer
    Dim nRate48ColIndex As Integer
    Dim nRate60ColIndex As Integer
    
    Dim nRate24ColLetter As String
    Dim nRate36ColLetter As String
    Dim nRate48ColLetter As String
    Dim nRate60ColLetter As String
                    
    nRate24ColIndex = ColIndex(wsCurrent, "24 mo. Monthly Min", 2)
    nRate36ColIndex = nRate24ColIndex + 1
    nRate48ColIndex = nRate24ColIndex + 2
    nRate60ColIndex = nRate24ColIndex + 3
    
    nRate24ColLetter = ColPos2letter(wsCurrent, nRate24ColIndex)
    nRate36ColLetter = ColPos2letter(wsCurrent, nRate36ColIndex)
    nRate48ColLetter = ColPos2letter(wsCurrent, nRate48ColIndex)
    nRate60ColLetter = ColPos2letter(wsCurrent, nRate60ColIndex)
    
    nTotalPriceColIndex = ColIndex(wsFPS, "Total Price", 2)
    
    Dim nECopyStartSectionRowIndex As Integer
    Dim nECopyEndSectionRowIndex As Integer
    
    nECopyStartSectionRowIndex = FindRowIndexByCellTextAndColor(wsFPS, "eCopy", 4, Utils.N_MAX_ROWS_TO_SEARCH, RGB(70, 130, 180))
    
    Dim a As Integer
        
    nECopyEndSectionRowIndex = nECopyStartSectionRowIndex
    
    a = nECopyStartSectionRowIndex + 1
    
    'just find color after uniFLOW
    Do While a < Utils.N_MAX_ROWS_TO_SEARCH
    
        ' for protection search till Totals Row Color
        If wsFPS.Cells(a, 4).Interior.color = RGB(70, 130, 180) Or _
           wsFPS.Cells(a, 4).Interior.color = RGB(0, 0, 126) Then
            nECopyEndSectionRowIndex = a - 1
            
            Exit Do
        End If
        
        a = a + 1
    Loop
    
    nRate24ColIndex = ColIndex(wsFPS, "24 mo. Monthly Min", 2)
    nRate36ColIndex = nRate24ColIndex + 1
    nRate48ColIndex = nRate24ColIndex + 2
    nRate60ColIndex = nRate24ColIndex + 3
    
    Dim strFormula As String
    
    strFormula = "=IF((" & ColPos2letter(wsFPS, nTotalPriceColIndex) & CStr(nECopyStartSectionRowIndex + 1) & "=""""),"""",ROUND($" & ColPos2letter(wsFPS, nTotalPriceColIndex) & CStr(nECopyStartSectionRowIndex + 1) & "*'" & STR_DIGITAL_COLOR_WORKSHEET & "'!" & nRate24ColLetter & "$1,2))"
    
    PrintDbgMsg wsFPS.Range(ColPos2letter(wsFPS, nRate24ColIndex) & CStr(nECopyStartSectionRowIndex + 1) & ":" & ColPos2letter(wsFPS, nRate24ColIndex) & CStr(nECopyEndSectionRowIndex)).Address & " Formula 24: " & strFormula

    wsFPS.Range(ColPos2letter(wsFPS, nRate24ColIndex) & CStr(nECopyStartSectionRowIndex + 1) & ":" & ColPos2letter(wsFPS, nRate24ColIndex) & CStr(nECopyEndSectionRowIndex)).Formula = strFormula
      
    ' next monthly rate column
    strFormula = "=IF((" & ColPos2letter(wsFPS, nTotalPriceColIndex) & CStr(nECopyStartSectionRowIndex + 1) & "=""""),"""",ROUND($" & ColPos2letter(wsFPS, nTotalPriceColIndex) & CStr(nECopyStartSectionRowIndex + 1) & "*'" & STR_DIGITAL_COLOR_WORKSHEET & "'!" & nRate36ColLetter & "$1,2))"
    
    PrintDbgMsg wsFPS.Range(ColPos2letter(wsFPS, nRate36ColIndex) & CStr(nECopyStartSectionRowIndex + 1) & ":" & ColPos2letter(wsFPS, nRate36ColIndex) & CStr(nECopyEndSectionRowIndex)).Address & " Formula 36: " & strFormula

    wsFPS.Range(ColPos2letter(wsFPS, nRate36ColIndex) & CStr(nECopyStartSectionRowIndex + 1) & ":" & ColPos2letter(wsFPS, nRate36ColIndex) & CStr(nECopyEndSectionRowIndex)).Formula = strFormula
    
    ' next monthly rate column
    strFormula = "=IF((" & ColPos2letter(wsFPS, nTotalPriceColIndex) & CStr(nECopyStartSectionRowIndex + 1) & "=""""),"""",ROUND($" & ColPos2letter(wsFPS, nTotalPriceColIndex) & CStr(nECopyStartSectionRowIndex + 1) & "*'" & STR_DIGITAL_COLOR_WORKSHEET & "'!" & nRate48ColLetter & "$1,2))"
    
    PrintDbgMsg wsFPS.Range(ColPos2letter(wsFPS, nRate48ColIndex) & CStr(nECopyStartSectionRowIndex + 1) & ":" & ColPos2letter(wsFPS, nRate48ColIndex) & CStr(nECopyEndSectionRowIndex)).Address & " Formula 48: " & strFormula

    wsFPS.Range(ColPos2letter(wsFPS, nRate48ColIndex) & CStr(nECopyStartSectionRowIndex + 1) & ":" & ColPos2letter(wsFPS, nRate48ColIndex) & CStr(nECopyEndSectionRowIndex)).Formula = strFormula
    
    ' next monthly rate column
    strFormula = "=IF((" & ColPos2letter(wsFPS, nTotalPriceColIndex) & CStr(nECopyStartSectionRowIndex + 1) & "=""""),"""",ROUND($" & ColPos2letter(wsFPS, nTotalPriceColIndex) & CStr(nECopyStartSectionRowIndex + 1) & "*'" & STR_DIGITAL_COLOR_WORKSHEET & "'!" & nRate60ColLetter & "$1,2))"
    
    PrintDbgMsg wsFPS.Range(ColPos2letter(wsFPS, nRate60ColIndex) & CStr(nECopyStartSectionRowIndex + 1) & ":" & ColPos2letter(wsFPS, nRate60ColIndex) & CStr(nECopyEndSectionRowIndex)).Address & " Formula 60: " & strFormula

    wsFPS.Range(ColPos2letter(wsFPS, nRate60ColIndex) & CStr(nECopyStartSectionRowIndex + 1) & ":" & ColPos2letter(wsFPS, nRate60ColIndex) & CStr(nECopyEndSectionRowIndex)).Formula = strFormula
    
    Set wsCurrent = Nothing
    Set wsFPS = Nothing

    ProtectWorksheets True, strPassword, strListOfWorksheets
End Sub

Private Function PopulateSpecialValuesStruct(wsCurrent As Worksheet, nRowIndex As Integer, ByRef objStructRow As SpecialValueRowStruct)
    'Dim objStructRow As SpecialValueRowStruct
    Dim i As Integer
    Dim j As Integer
    Dim nLastColIndex As Integer
    
    nLastColIndex = FindLastColIndex(wsCurrent, 1, 2) - 1
    
        For j = LBound(objStructRow.ArrColumnNamesWithValues) To UBound(objStructRow.ArrColumnNamesWithValues)
                objStructRow.ArrColumnNamesWithValues(j) = ""
        Next j
        
        j = LBound(objStructRow.ArrColumnNamesWithValues)
        
        objStructRow.Row = nRowIndex
        
    For i = 1 To nLastColIndex
        Select Case i
            Case 1
                objStructRow.Channel = wsCurrent.Cells(nRowIndex, i).Value
            Case 2
                objStructRow.Worksheet = wsCurrent.Cells(nRowIndex, i).Value
            Case 3
                objStructRow.ItemNumber = wsCurrent.Cells(nRowIndex, i).Value
            Case 4
                objStructRow.ModelName = wsCurrent.Cells(nRowIndex, i).Value
            Case 5
                objStructRow.ItemDescription = wsCurrent.Cells(nRowIndex, i).Value
            Case 6
                objStructRow.Column = wsCurrent.Cells(nRowIndex, i).Value
            Case 7
                objStructRow.Value = wsCurrent.Cells(nRowIndex, i).Value
            Case 8
                objStructRow.Rate = wsCurrent.Cells(nRowIndex, i).Value
            Case 9
                objStructRow.HPLevelIPrice = wsCurrent.Cells(nRowIndex, i).Value
            Case 10
                objStructRow.HPLevelIIPrice = wsCurrent.Cells(nRowIndex, i).Value
            Case 11
                objStructRow.SecondaryColumn = wsCurrent.Cells(nRowIndex, i).Value
            Case 12
                objStructRow.BlackMeterServiceComp = wsCurrent.Cells(nRowIndex, i).Value
            Case 13
                objStructRow.ColorMeterServiceComp = wsCurrent.Cells(nRowIndex, i).Value
            Case 14
                objStructRow.BlackMeterToner = wsCurrent.Cells(nRowIndex, i).Value
            Case 15
                objStructRow.ColorMeterToner = wsCurrent.Cells(nRowIndex, i).Value
            Case 16
                objStructRow.BlackMeterCanonAdmin = wsCurrent.Cells(nRowIndex, i).Value
            Case 17
                objStructRow.ColorMeterCanonAdmin = wsCurrent.Cells(nRowIndex, i).Value
            Case 18
                objStructRow.CentralDispatch = wsCurrent.Cells(nRowIndex, i).Value
            Case 19
                objStructRow.FedCondion = wsCurrent.Cells(nRowIndex, i).Value
            Case 20
                objStructRow.RateLTOP = wsCurrent.Cells(nRowIndex, i).Value
            Case 21
                objStructRow.RatePVL = wsCurrent.Cells(nRowIndex, i).Value
            Case 22
                objStructRow.Comment_notusedincalculations = wsCurrent.Cells(nRowIndex, i).Value
            Case 23
                objStructRow.FindersFees = wsCurrent.Cells(nRowIndex, i).Value
            Case 24
                objStructRow.DealerMonthlyMaint_Comp = wsCurrent.Cells(nRowIndex, i).Value
            Case 25
                objStructRow.ColorMeterChargeTotal = wsCurrent.Cells(nRowIndex, i).Value
            Case 26
                objStructRow.ColorMeterChargeIFF = wsCurrent.Cells(nRowIndex, i).Value
            Case 27
                objStructRow.Action = wsCurrent.Cells(nRowIndex, i).Value
            Case 28
                objStructRow.Section = wsCurrent.Cells(nRowIndex, i).Value
            Case 29
                objStructRow.CustomerBaseCharge = wsCurrent.Cells(nRowIndex, i).Value
            Case 30
                objStructRow.CopiesIncluded = wsCurrent.Cells(nRowIndex, i).Value
            Case 31
                objStructRow.BlackMeterChargeTotal = wsCurrent.Cells(nRowIndex, i).Value
            Case 32
                objStructRow.CanonAdminMonthlyMaintBase = wsCurrent.Cells(nRowIndex, i).Value
            Case Else
                'do nothing
        End Select
                
                'save the column header and its position if the cell has a value.
                If i > 8 And wsCurrent.Cells(nRowIndex, i).Value <> "" Then
                        objStructRow.ArrColumnNamesWithValues(j) = wsCurrent.Cells(1, i).Value + "," + CStr(i)
                        j = j + 1
                End If
    Next
    
End Function

Public Function IsMissingEx(strValue As String)
    Dim bFlag As Boolean
    
    bFlag = IsMissing(strValue) Or Trim(strValue) = ""
    
    IsMissingEx = bFlag
End Function


'---------------------------------------------------------------------------------------
' Procedure : ValidateSpreadsheet
' Author    : C11546
' Date      : 4/23/2013
' Purpose   :
'---------------------------------------------------------------------------------------
'
Public Function ValidateSpreadsheet(wsCurrent As Worksheet, nNumberOfRowsToValidate As Integer, nNumberOfColumnsToValidate As Integer, ByRef strError As String) As Boolean

   Dim bResult As Boolean
   Dim nRowCounter As Integer
   Dim nColomnCounter As Integer
   Dim strValueChecker As String
   Dim varTest As Variant
   Dim strFormula As String
      
    strError = ""
    
    bResult = True
        
    nRowCounter = 1
    
    nColomnCounter = 1
    
    On Error Resume Next
    
    For nRowCounter = 1 To nNumberOfRowsToValidate
        For nColomnCounter = 1 To nNumberOfColumnsToValidate
        
            strValueChecker = "test"
            
            If strValueChecker = wsCurrent.Cells(nRowCounter, nColomnCounter).Value Then
                strValueChecker = strValueChecker & " passed"
            End If
            
            If Err.Number <> 0 Then
                bResult = False
    
                strError = strError & " Error (#N/A, #REF!, #NAME?, #DIV/0!, #NULL!, #VALUE! or #NUM!) [" & Err.Description & "] in cell: " & wsCurrent.Cells(nRowCounter, nColomnCounter).Address & vbCrLf
                
                Err.Clear
            Else
                                strFormula = ""
                If VLookupCellFunctionCheck(wsCurrent.Cells(nRowCounter, nColomnCounter), strFormula) = True Then
                
                    bResult = False
                    
                    strError = strError & " WARNING: VLookup formula [" & strFormula & "] (cell value is '" & wsCurrent.Cells(nRowCounter, nColomnCounter).Value & "') found in cell: " & wsCurrent.Cells(nRowCounter, nColomnCounter).Address & " formula removed and only value remained. " & vbCrLf
                End If
                
            End If
        Next
    Next
        
    ValidateSpreadsheet = bResult
    Exit Function
    
End Function


'---------------------------------------------------------------------------------------
' Procedure : VLookupCellFunctionCheck
' Author    : C11546
' Date      : 4/29/2013
' Purpose   : Result False means no vlookup formula is  in cell; True means Vlookup formula is in cell.
'---------------------------------------------------------------------------------------
'
Private Function VLookupCellFunctionCheck(c As Range, ByRef strFormula As String) As Boolean

    Dim bResult As Boolean
    'Dim strFormula As String
    
    bResult = False
    
   On Error GoTo VLookupCellFunctionCheck_Error

    strFormula = UCase(Trim(c.Formula))
        
    'Debug.Print "Formula [" & strFormula & "] for cell " & c.Address
        
    If InStr(1, strFormula, "=VLOOKUP", vbTextCompare) > 0 Then
        bResult = True
        
        Dim strStoredValue As String
        
        strStoredValue = c.Value
        
        c.Formula = ""
        
        c.Value = strStoredValue
    End If
    
    VLookupCellFunctionCheck = bResult

    
   On Error GoTo 0
   Exit Function

VLookupCellFunctionCheck_Error:

    'PrintDbgMsg "Error " & Err.Number & " (" & Err.Description & ") in procedure VLookupCellFunctionCheck of Module Utils"

End Function


Public Sub TestValidate()
    Dim strError As String
    Dim wsCurrent As Worksheet
    Dim nNumberOfScanRows As Integer
    Dim nMaxNumberOfColumnsToScan As Integer
    Dim bResultsFlag As Boolean
    Dim nRowCounter As Integer
    Dim strLogFileName As String
                                       
    If Utils.Authentication = False Then Exit Sub
    
    'strLogFileName = InputBox("Select Log file location") ' OpenFileDialog("All Files (*.*), *.*", "Select Log file location")
    
    strDefaultLogFileName = ActiveWorkbook.Path & "\Log_" & Replace(Replace(CStr(Now), ":", "-", 1, -1, vbTextCompare), "/", "-", 1, -1, vbTextCompare) & ".txt"
    
    strLogFileName = InputBox("Select Log file location", "New Log Location", strDefaultLogFileName)
    
    If strLogFileName = "" Then
        MsgBox "Canceled. Exiting..."
        Exit Sub
    End If
        
    fnum1 = FreeFile()
    
    Open strLogFileName For Output As fnum1
        
    bResultsFlag = True
    
    nMaxNumberOfColumnsToScan = 93
    
    Set wsCurrent = ActiveWorkbook.Sheets("Digital and Color")
    
    nNumberOfScanRows = RowsToScan(wsCurrent, "TOTALS", 2)
    
    If nNumberOfScanRows = -1 Then
        Print #fnum1, "WARNING: " & wsCurrent.Name & ": " & "Verify # of rows are less than: " & CStr(Utils.N_MAX_ROWS_TO_SEARCH)
        
        nNumberOfScanRows = CInt(InputBox("Enter approximate number of rows greater then " & CStr(Utils.N_MAX_ROWS_TO_SEARCH)))
    End If
    
    If Utils.ValidateSpreadsheet(wsCurrent, nNumberOfScanRows, nMaxNumberOfColumnsToScan, strError) = False Then
        bResultsFlag = False
        
        Print #fnum1, "Error in " & wsCurrent.Name & ": " & strError
    End If
     
    Set wsCurrent = ActiveWorkbook.Sheets("Software")
    
    nNumberOfScanRows = RowsToScan(wsCurrent, "TOTALS", 2)
    
    If nNumberOfScanRows = -1 Then
        Print #fnum1, "WARNING: " & wsCurrent.Name & ": " & "Verify # of rows are less than: " & CStr(Utils.N_MAX_ROWS_TO_SEARCH)
        
        nNumberOfScanRows = CInt(InputBox("Enter approximate number of rows greater then " & CStr(Utils.N_MAX_ROWS_TO_SEARCH)))
    End If
    
    If Utils.ValidateSpreadsheet(wsCurrent, nNumberOfScanRows, nMaxNumberOfColumnsToScan, strError) = False Then
        bResultsFlag = False
        
        Print #fnum1, "Error in " & wsCurrent.Name & ": " & strError
    End If
    
    Set wsCurrent = ActiveWorkbook.Sheets("Fax, Printer, Scanner")
    
    nNumberOfScanRows = RowsToScan(wsCurrent, "TOTALS", 2)
    
    If nNumberOfScanRows = -1 Then
        Print #fnum1, "WARNING: " & wsCurrent.Name & ": " & "Verify # of rows are less than: " & CStr(Utils.N_MAX_ROWS_TO_SEARCH)
        
        nNumberOfScanRows = CInt(InputBox("Enter approximate number of rows greater then " & CStr(Utils.N_MAX_ROWS_TO_SEARCH)))
    End If
    
    If Utils.ValidateSpreadsheet(wsCurrent, nNumberOfScanRows, nMaxNumberOfColumnsToScan, strError) = False Then
        bResultsFlag = False
        
        Print #fnum1, "Error in " & wsCurrent.Name & ": " & strError
    End If
    
    Set wsCurrent = ActiveWorkbook.Sheets("Special Values")
    
    nNumberOfScanRows = RowsToScan(wsCurrent, "", 1)
    
    If nNumberOfScanRows = -1 Then
        Print #fnum1, "Error in " & wsCurrent.Name & ": " & "Number of rows exceeds " & CStr(Utils.N_MAX_ROWS_TO_SEARCH)
        
        nNumberOfScanRows = CInt(InputBox("Enter approximate number of rows greater then " & CStr(Utils.N_MAX_ROWS_TO_SEARCH)))
    End If
    
    If Utils.ValidateSpreadsheet(wsCurrent, nNumberOfScanRows, nMaxNumberOfColumnsToScan, strError) = False Then
        bResultsFlag = False
        
        Print #fnum1, "Error in " & wsCurrent.Name & ": " & strError
    End If
    
    Close #fnum1
    
    ActiveWorkbook.Save
    
    If bResultsFlag Then
        MsgBox "Success!!!"
    Else
        MsgBox "Some errors occured. Please check log file for details."
        ShellExecute GetDesktopWindow, "Open", strLogFileName, "", "C:\", 1
    End If
    
End Sub

Public Function RowsToScan(wsCurrent As Worksheet, strLastRowValue As String, nColNumberForScan As Integer)
    Dim nRowCounter As Integer
    
    nRowCounter = 10
    
    '"TOTALS"
    
    While nRowCounter <= Utils.N_MAX_ROWS_TO_SEARCH
        If Trim(CStr(wsCurrent.Cells(nRowCounter, nColNumberForScan).Value)) = strLastRowValue Then
            RowsToScan = nRowCounter
            Exit Function
        End If
        
        nRowCounter = nRowCounter + 1
    Wend
    
    RowsToScan = -1
End Function

' True - visible
' False - hidden or very hidden
Public Function CheckWorksheetVisibility(wsCurrent As Worksheet)
    
    If wsCurrent.Visible = xlSheetVisible Then
        CheckWorksheetVisibility = True
    ElseIf wsCurrent.Visible = xlSheetHidden Or wsCurrent.Visible = xlSheetVeryHidden Then
        CheckWorksheetVisibility = False
    End If
    
End Function

Public Sub ClearAutoCreditColumnForCSMP(wsCurrent As Worksheet)

    Dim nAutoCreditColumn As Integer
    Dim nNumberOfScanRows As Integer
    
    nAutoCreditColumn = ColIndex(wsCurrent, STR_COLUMN_NAME_AUTOMATIC_CREDIT, 2)
    
    nNumberOfScanRows = RowsToScan(wsCurrent, "TOTALS", 1)
    
    wsCurrent.Range(ColPos2letter(wsCurrent, nAutoCreditColumn) & "5:" & ColPos2letter(wsCurrent, nAutoCreditColumn) & CStr(nNumberOfScanRows)).Value = ""
    
End Sub

Public Function SaveAutoCreditColumnForCSMP(wbLandedCost As Workbook, wbSplitWorkbook As Workbook)
    
    Dim nAutoCreditColumn As Integer
    Dim nProductGroupColumn As Integer
    Dim wsCurrent As Worksheet
    Dim strCSMP As String
    Dim nNumberOfScanRows As Integer
    
    strCSMP = " - CSMP"
    
    Set wsCurrent = wbSplitWorkbook.Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET)
    
    nAutoCreditColumn = ColIndex(wsCurrent, STR_COLUMN_NAME_AUTOMATIC_CREDIT, 2)
    
    nProductGroupColumn = Utils.ColIndexExactMatch(wsCurrent, Utils.STR_COLUMN_NAME_PRODUCT_GROUP, 2)
    
    nNumberOfScanRows = RowsToScan(wsCurrent, "TOTALS", 1)
    
    'ChangeFormulaToValue wsCurrent, nAutoCreditColumn
    
    wsCurrent.Range(ColPos2letter(wsCurrent, nAutoCreditColumn) & "1").EntireColumn.Copy
    wbLandedCost.Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET & strCSMP).Range("G1").PasteSpecial ' xlPasteValues, xlPasteSpecialOperationNone, True
    
    wsCurrent.Range(ColPos2letter(wsCurrent, nAutoCreditColumn) & "5:" & ColPos2letter(wsCurrent, nAutoCreditColumn) & CStr(nNumberOfScanRows)).Value = ""
    
    wsCurrent.Range(ColPos2letter(wsCurrent, nProductGroupColumn) & "1").EntireColumn.Copy
    wbLandedCost.Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET & strCSMP).Range("H1").PasteSpecial ' xlPasteValues, xlPasteSpecialOperationNone, True
    
    '--------------------------------------
    Set wsCurrent = wbSplitWorkbook.Sheets(Utils.STR_SOFTWARE_WORKSHEET)
    
    nAutoCreditColumn = ColIndex(wsCurrent, STR_COLUMN_NAME_AUTOMATIC_CREDIT, 2)
    
    nProductGroupColumn = Utils.ColIndexExactMatch(wsCurrent, Utils.STR_COLUMN_NAME_PRODUCT_GROUP, 2)
    
    nNumberOfScanRows = RowsToScan(wsCurrent, "TOTALS", 1)
    
    'ChangeFormulaToValue wsCurrent, nAutoCreditColumn
    
    wsCurrent.Range(ColPos2letter(wsCurrent, nAutoCreditColumn) & "1").EntireColumn.Copy
    wbLandedCost.Sheets(Utils.STR_SOFTWARE_WORKSHEET & strCSMP).Range("G1").PasteSpecial ' xlPasteValues, xlPasteSpecialOperationNone, True
    
    wsCurrent.Range(ColPos2letter(wsCurrent, nAutoCreditColumn) & "5:" & ColPos2letter(wsCurrent, nAutoCreditColumn) & CStr(nNumberOfScanRows)).Value = ""
    
    wsCurrent.Range(ColPos2letter(wsCurrent, nProductGroupColumn) & "1").EntireColumn.Copy
    wbLandedCost.Sheets(Utils.STR_SOFTWARE_WORKSHEET & strCSMP).Range("H1").PasteSpecial ' xlPasteValues, xlPasteSpecialOperationNone, True
    
    '-------------------------------------
    Set wsCurrent = wbSplitWorkbook.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET)
    
    nAutoCreditColumn = ColIndex(wsCurrent, STR_COLUMN_NAME_AUTOMATIC_CREDIT, 2)
    
    nProductGroupColumn = Utils.ColIndexExactMatch(wsCurrent, Utils.STR_COLUMN_NAME_PRODUCT_GROUP, 2)
    
    nNumberOfScanRows = RowsToScan(wsCurrent, "TOTALS", 1)
    
    'ChangeFormulaToValue wsCurrent, nAutoCreditColumn
    
    wsCurrent.Range(ColPos2letter(wsCurrent, nAutoCreditColumn) & "1").EntireColumn.Copy
    wbLandedCost.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET & strCSMP).Range("G1").PasteSpecial ' xlPasteValues, xlPasteSpecialOperationNone, True

    wsCurrent.Range(ColPos2letter(wsCurrent, nAutoCreditColumn) & "5:" & ColPos2letter(wsCurrent, nAutoCreditColumn) & CStr(nNumberOfScanRows)).Value = ""

    wsCurrent.Range(ColPos2letter(wsCurrent, nProductGroupColumn) & "1").EntireColumn.Copy
    wbLandedCost.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET & strCSMP).Range("H1").PasteSpecial ' xlPasteValues, xlPasteSpecialOperationNone, True
    
End Function

Public Function CreateSecondaryLandedCostForCSMP(strPrimaryLandedCostFile As String, strSecondaryMasterFile As String)
    Dim wbSecondaryMasterBook As Workbook
    Dim wbSecondaryLandedCostBook As Workbook
    Dim strSecondaryLandedCostFile As String

    Dim nAutoCreditColumn As Integer
    Dim nCSMPColumn As Integer
    Dim strCSMP As String
    Dim wsCurrent As Worksheet
    Dim nNumberOfScanRows As Integer
    Dim i As Integer
    Dim j As Integer
    Dim a As Integer
    
    strCSMP = " - CSMP"
    
    CreateSecondaryLandedCostForCSMP = ""
    
    Set wbSecondaryMasterBook = Workbooks.Open(strSecondaryMasterFile, 0) 'don't update links
   
    Dim nPos As Integer
     
    nPos = InStr(1, strPrimaryLandedCostFile, ".xlsm")
        
    strSecondaryLandedCostFile = Mid(strPrimaryLandedCostFile, 1, nPos - 1) & " - Secondary.xlsm"
        
    Dim fso As Object
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    'object.copyfile,source,destination,file overright(True is default)
    fso.CopyFile strPrimaryLandedCostFile, strSecondaryLandedCostFile, True
    
    Set fso = Nothing
    
    Set wbSecondaryLandedCostBook = Workbooks.Open(strSecondaryLandedCostFile, 0) 'don't update links
    
    Utils.PrintDbgMsg "CreateSecondaryLandedCostForCSMP: Label"
    
    '--------------------------------------------
    strCSMP = " - CSMP"
    
    Dim strListOfWorksheets(3) As String
    
    strListOfWorksheets(0) = STR_DIGITAL_COLOR_WORKSHEET
    strListOfWorksheets(1) = STR_SOFTWARE_WORKSHEET
    strListOfWorksheets(2) = STR_FAX_PRINTER_SCANNER_WORKSHEET
    
    For j = LBound(strListOfWorksheets) To UBound(strListOfWorksheets) - 1
        '-------------------------------------
        'delete G column from original Landed Cost file
        wbSecondaryLandedCostBook.Sheets(strListOfWorksheets(j) & strCSMP).Range("G1").EntireColumn.Delete Shift:=xlLeft
        
        Utils.PrintDbgMsg "CreateSecondaryLandedCostForCSMP: Label1"
        
        Set wsCurrent = wbSecondaryMasterBook.Sheets(strListOfWorksheets(j))
        
        wsCurrent.Activate
        
        nAutoCreditColumn = ColIndexExactMatch(wsCurrent, STR_COLUMN_NAME_AUTOMATIC_CREDIT, 2)
        
        Utils.PrintDbgMsg "CreateSecondaryLandedCostForCSMP: Label1a"
        
        If nAutoCreditColumn <> 0 Then
            nCSMPColumn = ColIndexExactMatch(wsCurrent, "CSMP", 2)
            
            nNumberOfScanRows = RowsToScan(wsCurrent, "TOTALS", 1)
            
            Utils.PrintDbgMsg "CreateSecondaryLandedCostForCSMP: Label1b"
            
            i = 0
            a = 0
            Do While a < nNumberOfScanRows
                If wsCurrent.Cells(i + 5, nCSMPColumn).Value = "P" Then
                    i = i + 1
                Else
                    wsCurrent.Rows(i + 5).Delete Shift:=xlUp
                End If
        
                a = a + 1
            Loop
            
            Utils.PrintDbgMsg "CreateSecondaryLandedCostForCSMP: Label2"
            
            wsCurrent.Range(ColPos2letter(wsCurrent, nAutoCreditColumn) & "1").EntireColumn.Copy
            wbSecondaryLandedCostBook.Sheets(strListOfWorksheets(j) & strCSMP).Range("G1").PasteSpecial
            wbSecondaryLandedCostBook.Sheets(strListOfWorksheets(j) & strCSMP).Range("G1").EntireColumn.Hidden = True
            
        End If
        
        Utils.PrintDbgMsg "CreateSecondaryLandedCostForCSMP: Label3"
    Next
    
    Utils.PrintDbgMsg "CreateSecondaryLandedCostForCSMP: Label4"
    
    '--------------------------------------------
        
    wbSecondaryLandedCostBook.Save
    
    CreateSecondaryLandedCostForCSMP = wbSecondaryLandedCostBook.FullName
    
    wbSecondaryLandedCostBook.Close SaveChanges:=False
    
    wbSecondaryMasterBook.Close SaveChanges:=False
    
    Set wbSecondaryMasterBook = Nothing
    Set wbSecondaryLandedCostBook = Nothing
    
    
    
End Function

Public Sub AutomaticCreditColumnUpdateFormulaToValue(wbCurrent As Workbook)
    Dim nAutoCreditColumn As Integer
    Dim wsCurrent As Worksheet
    Dim i As Integer

    Dim strListOfWorksheets(3) As String

    strListOfWorksheets(0) = Utils.STR_DIGITAL_COLOR_WORKSHEET
    strListOfWorksheets(1) = Utils.STR_SOFTWARE_WORKSHEET
    strListOfWorksheets(2) = Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET

    For i = LBound(strListOfWorksheets) To UBound(strListOfWorksheets) - 1
        Set wsCurrent = wbCurrent.Sheets(strListOfWorksheets(i))
        
        nAutoCreditColumn = ColIndex(wsCurrent, STR_COLUMN_NAME_AUTOMATIC_CREDIT, 2)
                
        ChangeFormulaToValue wsCurrent, nAutoCreditColumn
    Next
End Sub

'also copy Product Group to the end of all columns. (03-02-2017)
Public Function CopyAutoCreditColumnToCSMP(wbLandedCost As Workbook, wbCSMPBook As Workbook)
    Dim nAutoCreditColumn As Integer
    Dim nAutoCreditInLCColumn As Integer
    Dim nRowNumberColumn As Integer
    Dim nProductGroupInLCColumn As Integer
    Dim wsDestination As Worksheet
    Dim strCSMP As String
    
    strCSMP = " - CSMP"
    
    Set wsDestination = wbCSMPBook.Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET)
    
    nAutoCreditColumn = ColIndexExactMatch(wsDestination, STR_COLUMN_NAME_AUTOMATIC_CREDIT, 2)
    
    nAutoCreditInLCColumn = ColIndexExactMatch(wbLandedCost.Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET & strCSMP), STR_COLUMN_NAME_AUTOMATIC_CREDIT, 2)
    
    If nAutoCreditColumn <> 0 And nAutoCreditInLCColumn <> 0 Then
        wbLandedCost.Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET & strCSMP).Range("G1").EntireColumn.Copy
        wsDestination.Range(ColPos2letter(wsDestination, nAutoCreditColumn) & "1").PasteSpecial
    End If
    
    nRowNumberColumn = ColIndexExactMatch(wsDestination, "Row Number", 2)
    
    nProductGroupInLCColumn = ColIndexExactMatch(wbLandedCost.Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET & strCSMP), STR_COLUMN_NAME_PRODUCT_GROUP, 2)
    
    If nRowNumberColumn <> 0 And nProductGroupInLCColumn <> 0 Then
        wbLandedCost.Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET & strCSMP).Range(ColPos2letter(wsDestination, nProductGroupInLCColumn) & "1").EntireColumn.Copy
        wsDestination.Range(ColPos2letter(wsDestination, nRowNumberColumn + 1) & "1").PasteSpecial
    End If
    
    '---------------------------------------------------------------
    Set wsDestination = wbCSMPBook.Sheets(Utils.STR_SOFTWARE_WORKSHEET)
    
    nAutoCreditColumn = ColIndexExactMatch(wsDestination, STR_COLUMN_NAME_AUTOMATIC_CREDIT, 2)
    
    nAutoCreditInLCColumn = ColIndexExactMatch(wbLandedCost.Sheets(Utils.STR_SOFTWARE_WORKSHEET & strCSMP), STR_COLUMN_NAME_AUTOMATIC_CREDIT, 2)
    
    If nAutoCreditColumn <> 0 And nAutoCreditInLCColumn <> 0 Then
        wbLandedCost.Sheets(Utils.STR_SOFTWARE_WORKSHEET & strCSMP).Range("G1").EntireColumn.Copy
        wsDestination.Range(ColPos2letter(wsDestination, nAutoCreditColumn) & "1").PasteSpecial
    End If
    
    nRowNumberColumn = ColIndexExactMatch(wsDestination, "Row Number", 2)
    
    nProductGroupInLCColumn = ColIndexExactMatch(wbLandedCost.Sheets(Utils.STR_SOFTWARE_WORKSHEET & strCSMP), STR_COLUMN_NAME_PRODUCT_GROUP, 2)
    
    If nRowNumberColumn <> 0 And nProductGroupInLCColumn <> 0 Then
        wbLandedCost.Sheets(Utils.STR_SOFTWARE_WORKSHEET & strCSMP).Range(ColPos2letter(wsDestination, nProductGroupInLCColumn) & "1").EntireColumn.Copy
        wsDestination.Range(ColPos2letter(wsDestination, nRowNumberColumn + 1) & "1").PasteSpecial
    End If
    
    '---------------------------------------------------------------
    Set wsDestination = wbCSMPBook.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET)
    
    nAutoCreditColumn = ColIndexExactMatch(wsDestination, STR_COLUMN_NAME_AUTOMATIC_CREDIT, 2)
    
    nAutoCreditInLCColumn = ColIndexExactMatch(wbLandedCost.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET & strCSMP), STR_COLUMN_NAME_AUTOMATIC_CREDIT, 2)
    
    If nAutoCreditColumn <> 0 And nAutoCreditInLCColumn <> 0 Then
        wbLandedCost.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET & strCSMP).Range("G1").EntireColumn.Copy
        wsDestination.Range(ColPos2letter(wsDestination, nAutoCreditColumn) & "1").PasteSpecial
    End If
    
    nRowNumberColumn = ColIndexExactMatch(wsDestination, "Row Number", 2)
    
    nProductGroupInLCColumn = ColIndexExactMatch(wbLandedCost.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET & strCSMP), STR_COLUMN_NAME_PRODUCT_GROUP, 2)
    
    If nRowNumberColumn <> 0 And nProductGroupInLCColumn <> 0 Then
        wbLandedCost.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET & strCSMP).Range(ColPos2letter(wsDestination, nProductGroupInLCColumn) & "1").EntireColumn.Copy
        wsDestination.Range(ColPos2letter(wsDestination, nRowNumberColumn + 1) & "1").PasteSpecial
    End If
    
    '---------------------------------------------------------------
        
    Application.DisplayAlerts = True
    
End Function

'aplies to entire column.
Public Sub ChangeFormulaToValue(wsCurrent As Worksheet, nColPosition As Integer)
    Dim nRowCounter As Integer
    Dim tempValue As Variant
    
    nRowCounter = 1
    
    While nRowCounter <= Utils.N_MAX_ROWS_TO_SEARCH
    
        If wsCurrent.Cells(nRowCounter, nColPosition).Formula <> "" Then
            tempValue = wsCurrent.Cells(nRowCounter, nColPosition).Value
        
            wsCurrent.Cells(nRowCounter, nColPosition).Formula = ""
            
            wsCurrent.Cells(nRowCounter, nColPosition).Value = tempValue
        End If
                
        nRowCounter = nRowCounter + 1
    Wend
End Sub

'Call Utils.ChangeRatesInNADForOceSection(ActiveWorkbook.Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET), ActiveWorkbook.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET))
Public Sub ChangeRatesInNADForOceSection(wsCurrent As Worksheet, wsReferenceRates As Worksheet)

    Dim nItemDescriptionColumn As Integer
    Dim nStartRangePosition As Integer
    Dim nEndRangePosition As Integer
    Dim nRowCounter As Integer
    Dim n24moMonthlyMinColumn As Integer
    Dim n36moMonthlyMinColumn As Integer
    Dim n48moMonthlyMinColumn As Integer
    Dim n60moMonthlyMinColumn As Integer
    
    Dim nTotalPriceColumn As Integer
    Dim nMain24moMonthlyMinColumnLetter As String
    Dim nMain36moMonthlyMinColumnLetter As String
    Dim nMain48moMonthlyMinColumnLetter As String
    Dim nMain60moMonthlyMinColumnLetter As String
    
    wsCurrent.unprotect Password:=STR_DEFAULT_PASSWORD
    
    nItemDescriptionColumn = ColIndex(wsCurrent, "Item Description", 2)
    
    'nStartRangePosition = RowsToScan(wsCurrent, "Oc|e9| PlotWave 350", nItemDescriptionColumn)
    nStartRangePosition = FindRowIndexByCellTextAndColor(wsCurrent, "Oc|e9| PlotWave 350", nItemDescriptionColumn, N_MAX_ROWS_TO_SEARCH, 11829830)
    
        Dim strListOfWorksheets(1) As String
        
        strListOfWorksheets(0) = wsCurrent.Name
        
    If nStartRangePosition = 0 Then
        
                Call ProtectWorksheets(True, STR_DEFAULT_PASSWORD, strListOfWorksheets)
                
                Exit Sub
                
    End If
        
    'wsCurrent.Cells(nStartRangePosition, nItemDescriptionColumn).Interior.colorindex = 41
    
    'nEndRangePosition = RowsToScan(wsCurrent, "eCopy", nItemDescriptionColumn)
    nEndRangePosition = FindRowIndexByCellTextAndColor(wsCurrent, "eCopy", nItemDescriptionColumn, N_MAX_ROWS_TO_SEARCH, 11829830)
    
    n24moMonthlyMinColumn = ColIndex(wsReferenceRates, "24 mo. Monthly Min", 2)
    n36moMonthlyMinColumn = ColIndex(wsReferenceRates, "36 mo. Monthly Min", 2)
    n48moMonthlyMinColumn = ColIndex(wsReferenceRates, "48 mo. Monthly Min", 2)
    n60moMonthlyMinColumn = ColIndex(wsReferenceRates, "60 mo. Monthly Min", 2)

    nMain24moMonthlyMinColumnLetter = ColPos2letter(wsCurrent, ColIndex(wsCurrent, "24 mo. Monthly Min", 2))
    nMain36moMonthlyMinColumnLetter = ColPos2letter(wsCurrent, ColIndex(wsCurrent, "36 mo. Monthly Min", 2))
    nMain48moMonthlyMinColumnLetter = ColPos2letter(wsCurrent, ColIndex(wsCurrent, "48 mo. Monthly Min", 2))
    nMain60moMonthlyMinColumnLetter = ColPos2letter(wsCurrent, ColIndex(wsCurrent, "60 mo. Monthly Min", 2))
    
    nTotalPriceColumn = ColIndex(wsCurrent, "Total Price", 2)
    
    Dim strTotalPriceColumnLetter As String
    
    strTotalPriceColumnLetter = ColPos2letter(wsCurrent, nTotalPriceColumn)
    
    Dim str24RefRate As String
    Dim str36RefRate As String
    Dim str48RefRate As String
    Dim str60RefRate As String
    
    str24RefRate = wsReferenceRates.Cells(1, n24moMonthlyMinColumn).Value
    str36RefRate = wsReferenceRates.Cells(1, n36moMonthlyMinColumn).Value
    str48RefRate = wsReferenceRates.Cells(1, n48moMonthlyMinColumn).Value
    str60RefRate = wsReferenceRates.Cells(1, n60moMonthlyMinColumn).Value
    
    wsCurrent.Range(nMain24moMonthlyMinColumnLetter & CStr(nStartRangePosition)).Value = str24RefRate
    wsCurrent.Range(nMain36moMonthlyMinColumnLetter & CStr(nStartRangePosition)).Value = str36RefRate
    wsCurrent.Range(nMain48moMonthlyMinColumnLetter & CStr(nStartRangePosition)).Value = str48RefRate
    wsCurrent.Range(nMain60moMonthlyMinColumnLetter & CStr(nStartRangePosition)).Value = str60RefRate
        
    For nRowCounter = nStartRangePosition + 1 To nEndRangePosition - 1
        'formula; =ROUND($P1904*Q$1526,2)
        If wsCurrent.Range(nMain24moMonthlyMinColumnLetter & CStr(nRowCounter)).Formula <> "" Then wsCurrent.Range(nMain24moMonthlyMinColumnLetter & CStr(nRowCounter)).Formula = "=ROUND($" & strTotalPriceColumnLetter & CStr(nRowCounter) & "*" & str24RefRate & ",2)"
        If wsCurrent.Range(nMain36moMonthlyMinColumnLetter & CStr(nRowCounter)).Formula <> "" Then wsCurrent.Range(nMain36moMonthlyMinColumnLetter & CStr(nRowCounter)).Formula = "=ROUND($" & strTotalPriceColumnLetter & CStr(nRowCounter) & "*" & str36RefRate & ",2)"
        If wsCurrent.Range(nMain48moMonthlyMinColumnLetter & CStr(nRowCounter)).Formula <> "" Then wsCurrent.Range(nMain48moMonthlyMinColumnLetter & CStr(nRowCounter)).Formula = "=ROUND($" & strTotalPriceColumnLetter & CStr(nRowCounter) & "*" & str48RefRate & ",2)"
        If wsCurrent.Range(nMain60moMonthlyMinColumnLetter & CStr(nRowCounter)).Formula <> "" Then wsCurrent.Range(nMain60moMonthlyMinColumnLetter & CStr(nRowCounter)).Formula = "=ROUND($" & strTotalPriceColumnLetter & CStr(nRowCounter) & "*" & str60RefRate & ",2)"
    Next
    
    Call ProtectWorksheets(True, STR_DEFAULT_PASSWORD, strListOfWorksheets)
    
End Sub

' results are 3.45 => 4; 3.0 => 3
Function RoundUp(d As Double) As Long
    Dim result As Long
    result = Math.Round(d)
    If result >= d Then
        RoundUp = result
    Else
        RoundUp = result + 1
    End If
End Function

'add Row Number column to data sheets
Public Sub AddRowNumberColumnToDataSheets(wbCurrent As Workbook)
        Dim strWorksheets(3) As String
        Dim wsCurrent As Worksheet
        Dim nTotalsRow As Integer
        Dim nLastColumn As Integer
        
        strWorksheets(0) = STR_DIGITAL_COLOR_WORKSHEET
        strWorksheets(1) = STR_SOFTWARE_WORKSHEET
        strWorksheets(2) = STR_FAX_PRINTER_SCANNER_WORKSHEET

        For i = LBound(strWorksheets) To UBound(strWorksheets) - 1
                Set wsCurrent = Sheets(strWorksheets(i))
                
                'wsCurrent.Unprotect Password:=STR_DEFAULT_PASSWORD
                
                nTotalsRow = Utils.RowsToScan(wsCurrent, "TOTALS", Utils.ColIndexExactMatch(wsCurrent, "Item #", 2))
                 
                'find last column
                nLastColumn = Utils.ColIndexExactMatch(wsCurrent, "", 2) + 3
                
                wsCurrent.Cells(2, nLastColumn).Value = "Row Number"
                
                wsCurrent.Columns(nLastColumn).NumberFormat = "0"

                For j = 1 To nTotalsRow - 2
                        wsCurrent.Cells(j + 2, nLastColumn).Value = CStr(j)
                Next
                
                'wsCurrent.Protect Password:=STR_DEFAULT_PASSWORD
                        
        Next

End Sub

Public Function GetDropDownText(wsCurrent As Worksheet, strDopdownName As String)
    '06-21-2019 https://stackoverflow.com/a/9578689/3394380
    Dim dd As DropDown

    Set dd = wsCurrent.Shapes(strDopdownName).OLEFormat.Object

    GetDropDownText = dd.List(dd.ListIndex)
End Function

'This method is called by combo box from 'Oce Wide Format' spreadsheet.
Public Sub DropDown1_Change()
    Dim wsCurrent As Worksheet
    Dim strTemp As String
    
    Set wsCurrent = ActiveSheet
    
    strTemp = wsCurrent.Range("AR4").Offset(CInt(wsCurrent.DropDowns("Drop Down 1").Value), 0).Value
    
    For i = 0 To 3
        wsCurrent.Range("Q1").Offset(0, i).Value = wsCurrent.Range("AN4").Offset(CInt(wsCurrent.DropDowns("Drop Down 1").Value), i).Value
    Next
        
    Set wsCurrent = Nothing
End Sub

'fix D&C tab Totals macro
'must be called at the end of Channel request button click
Public Sub RectangleDCTFix(strMacroName As String)
    
        Dim TotalsRowDigital As Integer
    
    Dim rgTarget As Range
    
    Dim shRectangle As Shape
    
    Dim wsCurrent As Worksheet

    Set wsCurrent = Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET)

        wsCurrent.Activate
        
    TotalsRowDigital = Utils.RowsToScan(wsCurrent, "TOTALS", Utils.ColIndexExactMatch(wsCurrent, "Item #", 2))
    
    Dim strList(1) As String
    
    strList(0) = Utils.STR_DIGITAL_COLOR_WORKSHEET
    
    ProtectWorksheets False, Utils.STR_DEFAULT_PASSWORD, strList
            
    Set rgTarget = wsCurrent.Cells(TotalsRowDigital, Utils.ColIndexExactMatch(wsCurrent, "Item #", 2))
    
    Set shRectangle = wsCurrent.Shapes.AddShape(msoShapeRectangle, rgTarget.Left, rgTarget.Top, rgTarget.Width, rgTarget.Height)
    
    With shRectangle
                .Name = "Rectangle 385"
        .Fill.Transparency = 1
    End With

    Call Utils.AssignMacro2Cell(ActiveWorkbook, Utils.STR_DIGITAL_COLOR_WORKSHEET, "Rectangle 385", strMacroName)
    
    ProtectWorksheets True, Utils.STR_DEFAULT_PASSWORD, strList
        
End Sub

Public Function IsColorType(strColorType As String, nColor As Long)
    If Not (UCase(strColorType) = "B" Or UCase(strColorType) = "G" Or UCase(strColorType) = "R") Then
        Err.Raise -50000, , "Invalid Color Type."
        
        Exit Function
    End If
    
    'If nColor > CLng(&HFFFFFF) + 1 Then
    '    Err.Raise -50001, , "Color is out of bounds."
        
    '    Exit Function
    'End If
    
    Dim nR As Long
    Dim nG As Long
    Dim nB As Long
    Dim strTemp As String
    
    strTemp = Hex(nColor)
    
    If Len(strTemp) < 6 Then
        strTemp = String(6 - Len(strTemp), "0") & strTemp
    End If
    
    nB = CLng("&H" & Left(strTemp, 2))
    nG = CLng("&H" & Mid(strTemp, 3, 2))
    nR = CLng("&H" & Right(strTemp, 2))
    
    'Dim nTemp As Long
    'nTemp = Hex(nColor)
    'nB = nTemp / 10000
    'nG = (nTemp - nB * 10000) / 100
    'nR = nTemp - nB * 10000 - nG * 100
    
    If UCase(strColorType) = "B" And nB > 0 And nG = 0 And nR = 0 Then
        IsColorType = True
        
        Exit Function
    End If
    
    If UCase(strColorType) = "G" And nG > 0 And nB = 0 And nR = 0 Then
        IsColorType = True
        
        Exit Function
    End If
    
    If UCase(strColorType) = "R" And nR > 0 And nG = 0 And nB = 0 Then
        IsColorType = True
        
        Exit Function
    End If
    
    IsColorType = False
End Function

'http://www.purplemath.com/modules/numbbase3.htm
'https://social.msdn.microsoft.com/Forums/en-US/d73e4b27-3b38-4a52-a955-8d83e6b5e24e/is-there-a-power-of-function-in-vb-vba?forum=isvvba
Public Function LetterToIndex(strLetter As String)
    Dim nResult As Long
    Dim arrAlphabet(26) As String
    Dim arrAlphabetIndexes(26) As Integer
    Dim i, j As Integer
    Dim nStrLetterLenght As Integer
    
    nResult = 0
    
    For i = 1 To 26
        arrAlphabet(i - 1) = Chr(Asc("A") + i - 1)
        arrAlphabetIndexes(i - 1) = i
    Next i
    
    nStrLetterLenght = Len(strLetter)
    
    For i = 1 To nStrLetterLenght
        Dim strOneLetter As String
        
        strOneLetter = Mid(strLetter, nStrLetterLenght - i + 1, 1)
        
        For j = LBound(arrAlphabet) To UBound(arrAlphabet)
            
            If arrAlphabet(j) = UCase(strOneLetter) Then
            
                On Error GoTo lblError
                
                nResult = nResult + (arrAlphabetIndexes(j) * Application.WorksheetFunction.Power(26, i - 1))
                
                Exit For
            End If
            
        Next j
    Next i
    
    LetterToIndex = nResult
    
    Exit Function
    
lblError:
    LetterToIndex = -1
    
End Function

Public Sub test1()
    'MsgBox LetterToIndex("RQGV")
    'MsgBox IndexToLetter(328064)
    'MsgBox IndexToLetter(38)
    'Debug.Print IndexToLetter(2147483647)
    'Debug.Print LetterToIndex("FXSHRXW")
    Dim strtemp0 As String
    Dim strTemp1 As String
    
    'strTemp0 = IndexToLetter(26)
    
    strtemp0 = IndexToLetter(125 * 26 + 23)
    strTemp1 = ColPos2letter(ActiveSheet, 125 * 26 + 23)
End Sub

'limit is Long data type limit (2,147,483,647)
'https://stackoverflow.com/a/182924/3394380
Public Function IndexToLetter(nIndex As Long)
  Dim dividend As Integer

  Dim columnName As String

  Dim modulo As Integer

  dividend = nIndex

  columnName = ""

  While (dividend > 0)
    modulo = (dividend - 1) Mod 26
    columnName = Chr(65 + modulo) & columnName
    dividend = CInt((dividend - modulo) / 26)
  Wend
    
  IndexToLetter = columnName

End Function

Public Sub DeleteNearbyDuplicateColumn(wsCurrent As Worksheet, strMainColumnName As String, strColumnNameForDeletion As String)
    'remove duplicate unused column Marketing Programs that follows on the right from the column GP less CWO %
    Dim nMPColIndex As Integer
    Dim strRange1 As String
    Dim strColumnLetter1 As String
        
    nMPColIndex = Utils.ColIndexExactMatch(wsCurrent, strMainColumnName, 2) + 1

    strColumnLetter1 = Utils.IndexToLetter(CLng(nMPColIndex))
    
    If wsCurrent.Range(strColumnLetter1 & "2").Value = strColumnNameForDeletion Then
        strRange1 = strColumnLetter1 & "1"
         
        wsCurrent.Range(strRange1).EntireColumn.Hidden = False
        
        wsCurrent.Range(strRange1).EntireColumn.Delete xlLeft
    End If
End Sub

Public Sub CleanDataSheetsFromAutoShapes(wbCurrent As Workbook)
    Dim strListOfWorksheets(3) As String
    Dim i As Integer
    Dim j As Integer
    Dim wsCurrent As Worksheet
    Dim tmpShape As Shape
    Dim bAnyUpdate As Boolean
    Dim arrShapesNotForRemoval(3) As String
    
    On Error Resume Next
    
    arrShapesNotForRemoval(0) = "Rectangle 385"
    arrShapesNotForRemoval(1) = "Rectangle 54"
    arrShapesNotForRemoval(2) = "Rectangle 50"
    
    
    strListOfWorksheets(0) = Utils.STR_DIGITAL_COLOR_WORKSHEET
    strListOfWorksheets(1) = Utils.STR_SOFTWARE_WORKSHEET
    strListOfWorksheets(2) = Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET
    
    bAnyUpdate = False
    For i = 0 To 2
        Set wsCurrent = wbCurrent.Sheets(strListOfWorksheets(i))
        
        For Each tmpShape In wsCurrent.Shapes
            For j = 0 To 2
              If tmpShape.Name <> arrShapesNotForRemoval(j) And i = j Then
                  bAnyUpdate = True
              
                  tmpShape.Delete
                  
                  Exit For
              End If
            Next j
        Next
    Next i
    
    'maybe MS Qffice 2016 causes save dialog
    Application.DisplayAlerts = False
    
    wbCurrent.Save
    
    Application.DisplayAlerts = True

End Sub
Attribute VB_Name = "clsCalendar"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'https://stackoverflow.com/a/13166056
'#### CLASS NAMED clsTEST
Public WithEvents btn As MSForms.CommandButton
Attribute btn.VB_VarHelpID = -1
Public frm As frmCalendar
Public m_nYear As Integer, m_nMonth As Integer

Private Sub btn_Click()

    'MsgBox "Clicked " & btn.Caption
        
    frm.dtInitialDate = CDate(CStr(m_nMonth) & "/" & btn.Caption & "/" & CStr(m_nYear))
    
    'MsgBox frm.dtInitialDate
    
    frm.bIsCancelled = False
    
    frm.Hide
    
End Sub
'### END CLASS
Attribute VB_Name = "frmCWOLevelSelection"
Attribute VB_Base = "0{1072966E-5384-4B59-85AF-E41D221D876C}{7C71CC52-A988-4C34-9ED2-7A46C74C5D0E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False










Public intLevel As Integer
Public intSubLevel As Integer
Public nGlobalTotalAmount As Double
Public bApplyToSelectedItemsOnly As Boolean

Private arrRanges(9) As String
Private arrLevelNames(9) As String

Public Function GetPTPLevelDescription(nPTPLevel As Integer)
    GetPTPLevelDescription = arrLevelNames(nPTPLevel) & " - " & arrRanges(nPTPLevel)
End Function

Private Sub GetTotals()
    Dim wbActive As Workbook
    Dim wsActive As Worksheet
    Dim wsActiveBackup As Worksheet
    
    Dim TotalsRow As Integer
    Dim ItemNumberColumn As Integer
    Dim nNumberOfUnitsColumn As Integer
    Dim nNumberOfUnitsTotal As Integer
    
    On Error Resume Next
    
    nGlobalTotalAmount = 0#
    
    nNumberOfUnitsTotal = 0
    
    Set wbActive = ActiveWorkbook

    'Set wsActiveBackup = Activeworksheet
    
    Set wsActive = wbActive.Sheets(Utils.STR_DIGITAL_COLOR_WORKSHEET)
    
    wsActive.Activate
        
    ItemNumberColumn = Utils.ColIndexExactMatch(wsActive, "Item #", 2)
    
    nNumberOfUnitsColumn = Utils.ColIndexExactMatch(wsActive, "Number of Units", 2)
    
    TotalsRow = Utils.RowsToScan(wsActive, "TOTALS", ItemNumberColumn)
    
    'column P is Total Price in all 3 data spreadsheets.
    
    If Trim(wsActive.Range("P" & CStr(TotalsRow)).Value) = "" Then
        wsActive.Activate
        Call CSMPTotals.CSMPTotals
    End If
    
    nGlobalTotalAmount = nGlobalTotalAmount + CDbl(wsActive.Range("P" & CStr(TotalsRow)).Value)
    
    nNumberOfUnitsTotal = nNumberOfUnitsTotal + wsActive.Range(Utils.IndexToLetter(CLng(nNumberOfUnitsColumn)) & CStr(TotalsRow)).Value
    
    '---------------------------------------------------------------------------------------------
    wbActive.Sheets(Utils.STR_SOFTWARE_WORKSHEET).Activate
    
    Set wsActive = wbActive.Sheets(Utils.STR_SOFTWARE_WORKSHEET)
    
    wsActive.Activate
    
    ItemNumberColumn = Utils.ColIndexExactMatch(wsActive, "Item #", 2)
        
    nNumberOfUnitsColumn = Utils.ColIndexExactMatch(wsActive, "Number of Units", 2)
    
    TotalsRow = Utils.RowsToScan(wsActive, "TOTALS", ItemNumberColumn)
    
    'column P is Total Price in all 3 data spreadsheets.
    
    If Trim(wsActive.Range("P" & CStr(TotalsRow)).Value) = "" Then
        wsActive.Activate
        Call CSMPTotals.CSMPTotals
    End If
    
    nGlobalTotalAmount = nGlobalTotalAmount + CDbl(wsActive.Range("P" & CStr(TotalsRow)).Value)
    
    nNumberOfUnitsTotal = nNumberOfUnitsTotal + wsActive.Range(Utils.IndexToLetter(CLng(nNumberOfUnitsColumn)) & CStr(TotalsRow)).Value
    
    '---------------------------------------------------------------------------------------------
    wbActive.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET).Activate
    
    Set wsActive = wbActive.Sheets(Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET)
    
    wsActive.Activate
    
    ItemNumberColumn = Utils.ColIndexExactMatch(wsActive, "Item #", 2)
        
    nNumberOfUnitsColumn = Utils.ColIndexExactMatch(wsActive, "Number of Units", 2)
    
    TotalsRow = Utils.RowsToScan(wsActive, "TOTALS", ItemNumberColumn)
    
    'column P is Total Price in all 3 data spreadsheets.
    
    If Trim(wsActive.Range("P" & CStr(TotalsRow)).Value) = "" Then
        wsActive.Activate
        Call CSMPTotals.CSMPTotals
    End If
    
    nGlobalTotalAmount = nGlobalTotalAmount + CDbl(wsActive.Range("P" & CStr(TotalsRow)).Value)
    
    nNumberOfUnitsTotal = nNumberOfUnitsTotal + wsActive.Range(Utils.IndexToLetter(CLng(nNumberOfUnitsColumn)) & CStr(TotalsRow)).Value
    
    '---------------------------------------------------------------------------------------------
    'wsActiveBackup.Activate
    
    If nNumberOfUnitsTotal = 0 Then
        MsgBox "No quantities have been entered.  Please enter the number of units in column D.", vbExclamation
    End If
End Sub

Private Sub chkApplyToSelectedItemsOnly_Change()
    bApplyToSelectedItemsOnly = Not bApplyToSelectedItemsOnly
End Sub

Private Sub cmbLevel_Change()
    'Keith said that we don't need the comparison with Totals anymore 10-11-2017
    Exit Sub
    
    'get PTP range here
    Dim strCurentValue As String
    Dim arrRangesStr() As String
    Dim arrRangesLong(2) As Long
    Dim intLevelTemp0 As Integer
    Dim strMessage As String
    Dim bIsWarning As Boolean
    
    strCurentValue = Mid(cmbLevel.Value, 5)
    
    intLevelTemp0 = CInt(Mid(cmbLevel.Value, 1, 1))
    
    strMessage = "Warning ! The workbook total is " & CStr(nGlobalTotalAmount) & ". Selected range is "
    
    bIsWarning = False
    
    Select Case intLevelTemp0
        Case 0
            If Not (nGlobalTotalAmount >= 5000 And nGlobalTotalAmount <= 49000) Then
                strMessage = strMessage & "OPD - $5K-$49K"
                
                bIsWarning = True
            End If
        Case 1
            If Not (nGlobalTotalAmount < 250000) Then
                strMessage = strMessage & "$0-$250K"
                
                bIsWarning = True
            End If
        Case 2
            If Not (nGlobalTotalAmount >= 250000 And nGlobalTotalAmount < 500000) Then
                strMessage = strMessage & "$250K-$500K"
                
                bIsWarning = True
            End If
        Case 3
            If Not (nGlobalTotalAmount >= 500000 And nGlobalTotalAmount < 1250000) Then
                strMessage = strMessage & "$500K-$1.25M"
                
                bIsWarning = True
            End If
        Case 4
            If Not (nGlobalTotalAmount >= 1250000 And nGlobalTotalAmount < 2500000) Then
                strMessage = strMessage & "$1.25M-$2.50M"
                
                bIsWarning = True
            End If
        Case 5
            If Not (nGlobalTotalAmount >= 2500000 And nGlobalTotalAmount < 5000000) Then
                strMessage = strMessage & "$2.50M-$5.0M"
                
                bIsWarning = True
            End If
        Case 6
            If Not (nGlobalTotalAmount >= 5000000 And nGlobalTotalAmount < 7500000) Then
                strMessage = strMessage & "$5.0M-$7.5M"
                
                bIsWarning = True
            End If
        Case 7
            If Not (nGlobalTotalAmount >= 7500000) Then
                strMessage = strMessage & "$7.5M+"
                
                bIsWarning = True
            End If
    End Select
    
    'strCurentValue = Replace(strCurentValue, "$", "")
    'strCurentValue = Replace(strCurentValue, "K", "* 1000")
    'strCurentValue = Replace(strCurentValue, "M", "* 1000000")
    
    'arrRangesStr() = Split(strCurentValue, "-")
    
    'arrRangesLong(0) = CLng(Eval(arrRangesStr(0)))
    'arrRangesLong(1) = CLng(arrRangesStr(1))
    
    'show warning here
    If bIsWarning = True Then
        MsgBox strMessage
    End If
End Sub

Private Sub cmdCancel_Click()
    intLevel = -1
    intSubLevel = 0
    Me.Hide
End Sub

Private Sub cmdOK_Click()

    intLevel = cmbLevel.ListIndex  'CInt(Mid(cmbLevel.Value, 1, 1))
    
    intSubLevel = cmbSubLevel.ListIndex
    
    Dim strPassword As String
    Dim strListOfWorksheets(3) As String
    
    strPassword = Utils.STR_DEFAULT_PASSWORD
    
    strListOfWorksheets(0) = Utils.STR_DIGITAL_COLOR_WORKSHEET
    strListOfWorksheets(1) = Utils.STR_SOFTWARE_WORKSHEET
    strListOfWorksheets(2) = Utils.STR_FAX_PRINTER_SCANNER_WORKSHEET
    
    Call Utils.ProtectWorksheets(False, strPassword, strListOfWorksheets)
    
    Me.Hide
End Sub


Private Sub UserForm_Initialize()

    ' read it from the tab "Product Group Discounts"
    'arrRanges(0) = "$5K-$49K"
    'arrRanges(1) = "up to $249K"
    'arrRanges(2) = "$250K-$499K"
    'arrRanges(3) = "$500K-$1.24M"
    'arrRanges(4) = "$750K-$1.25M"
    'arrRanges(5) = "$1.25M-$2.4M"
    'arrRanges(6) = "$2.50M-$4.9M"
    'arrRanges(7) = "$5.0M-$7.4M"
    'arrRanges(8) = "$7.5M+"
    
    'arrLevelNames(0) = "0"
    'arrLevelNames(1) = "1"
    'arrLevelNames(2) = "2"
    'arrLevelNames(3) = "3"
    'arrLevelNames(4) = "3.5"
    'arrLevelNames(5) = "4"
    'arrLevelNames(6) = "5"
    'arrLevelNames(7) = "6"
    'arrLevelNames(8) = "7"
        
    Dim wbThis As Workbook, wsSTR_PRODUCT_GROUP_DISCOUNTS_WORKSHEET As Worksheet, i As Integer, nLastRow As Integer
    
    Set wbThis = ActiveWorkbook
    
    Set wsSTR_PRODUCT_GROUP_DISCOUNTS_WORKSHEET = wbThis.Sheets(Utils.STR_PRODUCT_GROUP_DISCOUNTS_WORKSHEET)
    
    For i = 2 To Utils.N_MAX_ROWS_TO_SEARCH
        If wsSTR_PRODUCT_GROUP_DISCOUNTS_WORKSHEET.Range("B" & CStr(i)).Value = "" Then
            nLastRow = i - 1
            Exit For
        End If
    Next i
    
    For i = 2 To nLastRow
        arrRanges(i - 2) = wsSTR_PRODUCT_GROUP_DISCOUNTS_WORKSHEET.Range("B" & CStr(i)).Value
        arrLevelNames(i - 2) = wsSTR_PRODUCT_GROUP_DISCOUNTS_WORKSHEET.Range("A" & CStr(i)).Value
    Next i
    
    cmbLevel.Clear
    
    For i = 0 To 8
        cmbLevel.AddItem arrLevelNames(i) & " - " & arrRanges(i)
    Next i
    
    cmbSubLevel.AddItem "N/A"
    cmbSubLevel.AddItem "A"
    cmbSubLevel.AddItem "B"
    cmbSubLevel.AddItem "C"
    
    cmbSubLevel.ListIndex = 0
        
    Call GetTotals
    
    chkApplyToSelectedItemsOnly.Value = True
    
    bApplyToSelectedItemsOnly = True
End Sub
Attribute VB_Name = "frmCalendar"
Attribute VB_Base = "0{FC933F85-6DD3-4D55-B8BC-4BEE35EF0D2F}{530AC41C-8C86-4927-BB64-4CE4AEFDCA1F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Public dtInitialDate As Date
Public bIsCancelled As Boolean

Private m_nYear As Integer, m_nMonth As Integer, m_nDay As Integer
Private btnDays() As CommandButton
Private mColOfButtonEvents As New Collection
Private bFlagMonthOnChangeTriggerEvent As Boolean

'dtInitialDate must be set before calling Init.
Private Sub Init()
    m_nYear = Year(dtInitialDate)
    
    m_nMonth = Month(dtInitialDate)
    
    m_nDay = Day(dtInitialDate)
    
    bFlagMonthOnChangeTriggerEvent = False
    
    cmbMonth.Text = CStr(m_nMonth)
        
    cmbYear.Text = CStr(m_nYear)
    
    bFlagMonthOnChangeTriggerEvent = True
    
End Sub

Private Sub ClearPreviousMonthButtonsWithEvents()
    Dim cmdTemp1 As CommandButton
    Dim i As Integer, nColCount As Integer
    Dim strTemp1 As String
    
    If bFlagMonthOnChangeTriggerEvent = False Then
        Exit Sub
    End If
    
    While mColOfButtonEvents.count <> 0
        mColOfButtonEvents.Remove 1
    Wend
    
    'On Error GoTo lblErr1
    'For i = 1 To 31
    '    strTemp1 = "btnDay" & i
    '    Me.Controls.Remove strTemp1
    '    'Set btnDays(i - 1) = Nothing
    'Next i
    
    'https://stackoverflow.com/a/27791048/3394380
    Dim cont As Control
    
    For Each cont In Me.Controls
        If InStr(cont.Name, "btnDay") = 1 Then
            Me.Controls.Remove cont.Name
        End If
    Next cont
    
'lblErr1:
    
End Sub

Private Function IntegerDivision(a As Integer, b As Integer)
    Dim nTemp2 As Integer, nTemp3 As Integer
    
    nTemp2 = a Mod b
    
    nTemp3 = CInt((a - nTemp2) / b)
    
    IntegerDivision = nTemp3
    
    'If nTemp2 < b / 2 Then
    '    IntegerDivision = 4
    'Else
    '    IntegerDivision = 5
    'End If
    
End Function

Private Sub cmbMonth_Change()
    Dim dtTemp1 As Date
    Dim strFirstWeekDayOfMonth As String
    Dim btnTemp5 As CommandButton
    
    If cmbMonth.Text <> "" Then
        m_nMonth = CInt(cmbMonth.Text)
    End If
    
    dtTemp1 = CDate(CStr(m_nMonth) & "/" & "1/" & CStr(m_nYear))
    
    strFirstWeekDayOfMonth = Format(dtTemp1, "dddd")
    
    dtTemp1 = DateAdd("d", -1, DateAdd("M", 1, dtTemp1))
    
    nTheLastDayOfTheMonth = Day(dtTemp1)
    
    Dim i As Integer
    
    Dim j As Integer, nFirstWeekDayOfMonth As Integer, nRow As Integer
    
    Dim arrWeekDays(7) As String
    
    arrWeekDays(0) = "Mo"
    arrWeekDays(1) = "Tu"
    arrWeekDays(2) = "We"
    arrWeekDays(3) = "Th"
    arrWeekDays(4) = "Fr"
    arrWeekDays(5) = "Sa"
    arrWeekDays(6) = "Su"
    
    For j = 0 To UBound(arrWeekDays)
        If InStr(1, strFirstWeekDayOfMonth, arrWeekDays(j)) <> 0 Then
            nFirstWeekDayOfMonth = j
            Exit For
        End If
    Next j
    
    Call ClearPreviousMonthButtonsWithEvents
    
    'ReDim btnDays(nTheLastDayOfTheMonth)
    
    Dim nInitialLeft As Integer, nInitialTop As Integer, nInitialLeftForTheFirstDay As Integer
        
    nInitialLeft = 12 ' + 18 + 2
    
    nInitialTop = 24 + 12 + 2
    
    nInitialLeftForTheFirstDay = nInitialLeft + (30 * nFirstWeekDayOfMonth)
        
    For i = 1 To nTheLastDayOfTheMonth
        'https://stackoverflow.com/a/10224992
        Set btnTemp5 = Me.Controls.Add("Forms.CommandButton.1", "btnDay" & i, True)
        
        With btnTemp5
            Dim nTopMultiplier As Integer
            
            Dim nTemp4 As Integer
                    
            nTemp4 = i - (7 - nFirstWeekDayOfMonth - 1)
            
            If nTemp4 <= 1 Then
                nRow = 1
            ElseIf nTemp4 > 1 And nTemp4 <= 8 Then
                nRow = 2
            ElseIf nTemp4 > 8 And nTemp4 <= 15 Then
                nRow = 3
            ElseIf nTemp4 > 15 And nTemp4 <= 22 Then
                nRow = 4
            ElseIf nTemp4 > 22 And nTemp4 <= 29 Then
                nRow = 5
            Else
                nRow = 6
            End If
            
            If i <= 7 - nFirstWeekDayOfMonth Then
                .Left = nInitialLeftForTheFirstDay + (30 * ((i - 1) Mod 7))
            Else
                .Left = nInitialLeft + (30 * ((i - 1 - (7 - nFirstWeekDayOfMonth)) Mod 7))
            End If
            
            nTopMultiplier = nRow - 1
            
            .Top = nInitialTop + (22 * nTopMultiplier)
            
            .Width = 20
            .Height = 18
            .Caption = CStr(i)
            
            .Visible = True
            
            If i = m_nDay And m_nMonth = Month(dtInitialDate) And m_nYear = Year(dtInitialDate) Then
               .BackColor = RGB(125, 125, 125)
            Else
               '.BackColor = RGB(0, 100, 100)
            End If
        
            .Enabled = True
            .Locked = False
            
        End With
        
        Dim evt As clsCalendar
        
        Set evt = New clsCalendar
        
        Set evt.frm = Me
        Set evt.btn = btnTemp5
        evt.m_nYear = m_nYear
        evt.m_nMonth = m_nMonth
        
        mColOfButtonEvents.Add evt
        
    Next i
End Sub

Private Sub cmbYear_Change()
    m_nYear = CInt(cmbYear.Value)
    
    Call cmbMonth_Change
End Sub

Private Sub cmdCancel_Click()
    bIsCancelled = True
    
    Me.Hide
    
End Sub

Private Sub cmdOK_Click()
    bIsCancelled = False
    
    Me.Hide
End Sub

Private Sub UserForm_Activate()
    
    Dim i As Integer, nTemp1 As Integer
    
    nTemp1 = Year(Now)
    
    For i = nTemp1 + 5 To nTemp1 - 10 Step -1
        cmbYear.AddItem CStr(i)
    Next i
    
    For i = 1 To 12
        cmbMonth.AddItem CStr(i)
    Next i
    
    Call Init
    
End Sub
Attribute VB_Name = "frmOffers"
Attribute VB_Base = "0{F220DCB4-E943-4FF3-A84B-0A41FA93D320}{2EB16536-F59E-4348-B9D2-94F44548EA7B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Private m_strOfferName As String
Private m_nOfferID As Integer
Private m_strDBFileName As String

Public Function DBFileName()
    DBFileName = m_strDBFileName
End Function

Public Function OfferName()
    OfferName = m_strOfferName
End Function

Public Function OfferID()
    OfferID = m_nOfferID
End Function

Public Sub SetupForm(strOfferName As String, strDBFileName As String)
    m_strOfferName = strOfferName
    m_strDBFileName = strDBFileName
End Sub

Private Sub cmdCancel_Click()
    Me.Hide
End Sub

Private Sub cmdOK_Click()

    If txtOldOfferName.Text <> txtNewOffername.Text Then
        MsgBox "Offer name is changed. Use the Update button to update Access database then click the OK button."
        Exit Sub
    End If
    
    m_strOfferName = txtOldOfferName.Text
    
    Me.Hide
    
End Sub

Private Sub cmdSearch_Click()
    Dim objConnection As ADODB.Connection
    Dim objRecordset As ADODB.Recordset
        
    lstSearchResults.Clear
    
    Set objConnection = Utils.GetConnectionObjectForAccess(m_strDBFileName)
    
    If objConnection Is Nothing Then
        MsgBox "Unable to open connection to the Access database."
        Exit Sub
    End If
        
    Set objRecordset = CreateObject("ADODB.Recordset")
    Dim nTempID As Integer
    Dim nPosTemp As Integer
    Dim strListItemText As String
    
    objRecordset.Open "select ID, OfferName from tblOffers where OfferName like '%" & txtSearch.Text & "%'", objConnection, adOpenForwardOnly, adLockReadOnly
    
    While Not objRecordset.EOF
    
        lstSearchResults.AddItem objRecordset("ID").Value & "-" & objRecordset("OfferName").Value
        
        objRecordset.MoveNext
    Wend
    
    objRecordset.Close
        
End Sub

Private Sub cmdUpdate_Click()
    Dim objConnection As ADODB.Connection
    Dim objRecordset As ADODB.Recordset
        
    Set objConnection = Utils.GetConnectionObjectForAccess(m_strDBFileName)
    
    If objConnection Is Nothing Then
        MsgBox "Unable to open connection to the Access database."
        Exit Sub
    End If
        
    Set objRecordset = CreateObject("ADODB.Recordset")
    Dim nTempID As Integer
    Dim nPosTemp As Integer
    Dim strListItemText As String
    
    objRecordset.Open "select ID from tblOffers where OfferName = '" & txtNewOffername.Text & "'", objConnection, adOpenForwardOnly, adLockReadOnly
    
    If Not objRecordset.EOF Then
    
        MsgBox "OfferName: [" & txtNewOffername.Text & "] already exist. Choose a different offer name."
        
        objRecordset.Close
                
        Exit Sub
    Else
        'a new case
        objRecordset.Close
        
        objRecordset.Open "select ID from tblOffers where OfferName = '" & txtOldOfferName.Text & "'", objConnection, adOpenForwardOnly, adLockReadOnly
        
        If Not objRecordset.EOF Then
            objRecordset.Close
            
            objConnection.Execute "insert into tblOffers (OfferName) values ('" & Replace(txtNewOffername.Text, "'", "''") & "')"
            
            'add Initial Revision to a new offer.
            objConnection.Execute "insert into tblRevisions (OfferID, Revision, DateCreated, DateModified) select ID, 'Initial Revision', '" & CStr(Now) & "', '" & CStr(Now) & "' from tblOffers where OfferName = '" & Replace(txtNewOffername.Text, "'", "''") & "'"
            
        Else
            objRecordset.Close
            
            objConnection.Execute "update tblOffers set OfferName = '" & txtNewOffername.Text & "' where OfferName = '" & txtOldOfferName.Text & "'"
        End If
        
        txtOldOfferName.Text = txtNewOffername.Text
        
    End If
        
    objRecordset.Open "select ID from tblOffers where OfferName = '" & txtNewOffername.Text & "'", objConnection, adOpenForwardOnly, adLockReadOnly
    
    m_nOfferID = objRecordset("ID").Value
    m_strOfferName = txtNewOffername.Text
    
    objRecordset.Close
            
    Call UserForm_Activate
    
    MsgBox "Updated Successfully !"
End Sub

Private Sub lstSearchResults_Change()
    Dim objConnection As ADODB.Connection
    Dim objRecordset As ADODB.Recordset
        
    If lstSearchResults.ListCount = 0 Then
        Exit Sub
    End If
    
    Set objConnection = Utils.GetConnectionObjectForAccess(m_strDBFileName)
    
    If objConnection Is Nothing Then
        MsgBox "Unable to open connection to the Access database."
        Exit Sub
    End If
        
    Set objRecordset = CreateObject("ADODB.Recordset")
    Dim nTempID As Integer
    Dim nPosTemp As Integer
    Dim strListItemText As String
    
    strListItemText = lstSearchResults.List(lstSearchResults.ListIndex)
    
    nPosTemp = InStr(1, strListItemText, "-")
    
    nTempID = CInt(Mid(strListItemText, 1, nPosTemp - 1))
        
    objRecordset.Open "select x.ID, x.OfferName from tblOffers x where x.ID = " & CStr(nTempID), objConnection, adOpenForwardOnly, adLockReadOnly
       
    m_nOfferID = objRecordset("ID").Value
    m_strOfferName = objRecordset("OfferName").Value
    txtNewOffername.Text = m_strOfferName
    txtOldOfferName.Text = m_strOfferName
    
End Sub

Private Sub UserForm_Activate()
    Dim objConnection As ADODB.Connection
    Dim objRecordset As ADODB.Recordset
        
    Set objConnection = Utils.GetConnectionObjectForAccess(m_strDBFileName)
    
    If objConnection Is Nothing Then
        MsgBox "Unable to open connection to the Access database."
        Exit Sub
    End If
        
    Set objRecordset = CreateObject("ADODB.Recordset")
    
    objRecordset.Open "select ID from tblOffers where OfferName = '" & Replace(Me.OfferName, "'", "''") & "'", objConnection, adOpenForwardOnly, adLockReadOnly
       
    If objRecordset.EOF Then
        objRecordset.Close
        
        objConnection.Execute "insert into tblOffers (OfferName) values ('" & Me.OfferName & "')"
        
        objRecordset.Open "select ID from tblOffers where OfferName = '" & Me.OfferName & "'", objConnection, adOpenForwardOnly, adLockReadOnly
        
    End If
    
    m_nOfferID = objRecordset("ID").Value
    
    objRecordset.Close
        
    txtOldOfferName.Text = Me.OfferName
    txtNewOffername.Text = Me.OfferName
    
    'txtSearch.Text = ""
    lstSearchResults.Clear
    
    Call cmdSearch_Click
    
End Sub
Attribute VB_Name = "frmRevisions"
Attribute VB_Base = "0{7871CEAD-8E8C-440F-920D-7E591A46F672}{08C06177-BD7F-4066-BAFE-057D355CD185}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Private m_strSelectedRevision As String
Private m_strOfferName As String
Private m_strDBFileName As String
Private m_bSkipListChangeEvent As Boolean
Private m_nSelectedRevisionID As Integer

Public Function SelectedRevision()
    SelectedRevision = m_strSelectedRevision
End Function

Public Function SelectedRevisionID()
    SelectedRevisionID = m_nSelectedRevisionID
End Function

Public Sub SetupForm(strOfferName As String, strDBFileName As String)
    m_strOfferName = strOfferName
    m_strDBFileName = strDBFileName
End Sub

Private Sub AddNewRevision()
    Dim objConnection As ADODB.Connection
    Dim objRecordset As ADODB.Recordset
        
    Set objConnection = Utils.GetConnectionObjectForAccess(m_strDBFileName)
    
    If objConnection Is Nothing Then
        MsgBox "Unable to open connection to the Access database."
        Exit Sub
    End If
        
    Set objRecordset = CreateObject("ADODB.Recordset")
            
    objConnection.Execute "insert into tblRevisions (OfferID, Revision, DateCreated, DateModified) select ID, '" & txtRevisionName.Text & "', '" & CStr(Now) & "', '" & CStr(Now) & "' from tblOffers where OfferName = '" & Replace(m_strOfferName, "'", "''") & "'"
        
    
End Sub


Private Sub cmdAddAsNewRevision_Click()
    AddNewRevision
    
    m_bSkipListChangeEvent = True
    
    Call UserForm_Activate
    
    m_bSkipListChangeEvent = False
End Sub

Private Sub cmdCancel_Click()
    Me.Hide
    
End Sub

Private Sub cmdModifyRevision_Click()
    Dim objConnection As ADODB.Connection
    Dim objRecordset As ADODB.Recordset
        
    Set objConnection = Utils.GetConnectionObjectForAccess(m_strDBFileName)
    
    If objConnection Is Nothing Then
        MsgBox "Unable to open connection to the Access database."
        Exit Sub
    End If
        
    Set objRecordset = CreateObject("ADODB.Recordset")
    Dim nTempID As Integer
    Dim nPosTemp As Integer
    Dim strListItemText As String
    
    strListItemText = lstRevisions.List(lstRevisions.ListIndex)
    
    nPosTemp = InStr(1, strListItemText, "-")
    
    nTempID = CInt(Mid(strListItemText, 1, nPosTemp - 1))
        
    objConnection.Execute "update tblRevisions set Revision = '" & txtRevisionName.Text & "', DateModified = '" & CStr(Now) & "'  where ID = " & CStr(nTempID)
            
    m_bSkipListChangeEvent = True
    
    Call UserForm_Activate
    
    m_bSkipListChangeEvent = False
End Sub

Private Sub cmdOK_Click()

    m_strSelectedRevision = txtRevisionName.Text
    
    Me.Hide
    
End Sub

Private Sub lstRevisions_Change()

    If m_bSkipListChangeEvent = True Then Exit Sub
    
    Dim objConnection As ADODB.Connection
    Dim objRecordset As ADODB.Recordset
        
    Set objConnection = Utils.GetConnectionObjectForAccess(m_strDBFileName)
    
    If objConnection Is Nothing Then
        MsgBox "Unable to open connection to the Access database."
        Exit Sub
    End If
        
    Set objRecordset = CreateObject("ADODB.Recordset")
    Dim nTempID As Integer
    Dim nPosTemp As Integer
    Dim strListItemText As String
    
    strListItemText = lstRevisions.List(lstRevisions.ListIndex)
    
    nPosTemp = InStr(1, strListItemText, "-")
    
    nTempID = CInt(Mid(strListItemText, 1, nPosTemp - 1))
        
    objRecordset.Open "select x.ID, x.Revision, x.DateCreated, x.DateModified from tblRevisions x where x.ID = " & CStr(nTempID), objConnection, adOpenForwardOnly, adLockReadOnly
       
    m_nSelectedRevisionID = objRecordset("ID").Value
    txtRevisionName.Text = objRecordset("Revision").Value
    txtDateCreated.Text = objRecordset("DateCreated").Value
    txtDateModified.Text = objRecordset("DateModified").Value
    
End Sub

Private Sub UserForm_Activate()
    Me.Caption = "Offer Name: " & m_strOfferName
        
    lstRevisions.Clear
        
    Dim objConnection As ADODB.Connection
    Dim objRecordset As ADODB.Recordset
        
    Set objConnection = Utils.GetConnectionObjectForAccess(m_strDBFileName)
    
    If objConnection Is Nothing Then
        MsgBox "Unable to open connection to the Access database."
        Exit Sub
    End If
        
    Set objRecordset = CreateObject("ADODB.Recordset")
    
    Dim bAtLeastOneRevisionIsFound As Boolean
    
    bAtLeastOneRevisionIsFound = False
    
    While Not bAtLeastOneRevisionIsFound
        If objConnection Is Nothing Then
            Set objConnection = Utils.GetConnectionObjectForAccess(m_strDBFileName)
        End If
        
        objRecordset.Open "select x.ID, x.Revision, x.DateCreated, x.DateModified from tblRevisions x, tblOffers y where x.OfferID = y.ID and y.OfferName = '" & Replace(m_strOfferName, "'", "''") & "'", objConnection, adOpenForwardOnly, adLockReadOnly
           
        While Not objRecordset.EOF
            Dim strtemp0 As String
            strtemp0 = objRecordset("ID").Value & "-" & objRecordset("Revision").Value
            
            lstRevisions.AddItem strtemp0
            objRecordset.MoveNext
            
            bAtLeastOneRevisionIsFound = True
        Wend
        
        objRecordset.Close
        
    
        If Not bAtLeastOneRevisionIsFound Then
            objRecordset.Open "select ID from tblOffers where OfferName = '" & Replace(m_strOfferName, "'", "''") & "'", objConnection, adOpenForwardOnly, adLockReadOnly
        
            If objRecordset.EOF Then
                objRecordset.Close
                
                objConnection.Execute "insert into tblOffers (OfferName) values ('" & Replace(m_strOfferName, "'", "''") & "')"
            End If
            
            If objRecordset.State <> adClosed Then
                objRecordset.Close
            End If
            
            txtRevisionName.Text = "Initial Revision"
            Call AddNewRevision
        End If
    Wend
        
    lstRevisions.ListIndex = lstRevisions.ListCount - 1
    
    
End Sub

' InQuest injected base64 decoded content
' z{Qjx
' *fz{M
' *fz{t
' *fz{u
' *fz{v
' e"{"u
' z{N}
' bjPn
' z{N}
' bjPn
' jw^t*,
' Z+	#
' L"jh
' L"jh
' :-jS
' :-j[
' l)^jq1
' *^r&
' *^r&
' 't*%
' "jUZ
' *^r&
' *%"w^
' Z+	#
' :-jS
' !'u'
' BzYE
' zj/j

INQUEST-PP=macro
