Attribute VB_Name = "OS_Version"
Option Explicit
              
Public Function GetOSVersion(Optional ByRef fbIsServer As Boolean = False) As String
Dim oWMI As Object
Dim oSystem As Object
Dim sSql As String
Dim sCaption As String
Dim sCSDVersion As String
Dim sOSArchitecture As String

  GetOSVersion = "<Failed>"
  On Error GoTo ErrHandler
  sSql = "SELECT * FROM Win32_OperatingSystem"       'Abfrage
 
  'WMI-Objekt erstellen und Abfrage ausf|fffd|hren
  Set oWMI = GetObject("winmgmts:").ExecQuery(sSql)
  For Each oSystem In oWMI
    sCaption = Trim(oSystem.Caption)                'Windows-Version im Klartext
    'sVersion = Trim(oSystem.version)               'exakte Version-Nr.
    If Not IsNull(oSystem.CSDVersion) Then
      sCSDVersion = Trim(oSystem.CSDVersion)        'ServicePack
    End If
    sOSArchitecture = Trim(oSystem.OSArchitecture) 'OSArchitecture: z.B. "64-bit"
    fbIsServer = Not CBool(Trim(oSystem.ProductType) = "1")  'Destopt oder Server
    Exit For
  Next
  
  If sCSDVersion <> vbNullString Then sCSDVersion = " (" & sCSDVersion & ")"
  GetOSVersion = sCaption & ", " & sOSArchitecture & sCSDVersion
  
  Set oSystem = Nothing
  Set oWMI = Nothing
  On Error GoTo 0
  Exit Function
 
ErrHandler:
  Set oSystem = Nothing
  Set oWMI = Nothing
End Function

Function GetSystemModel() As String
Dim oWMI As Object
Dim oResult As Object
Dim oItem As Object
Dim lTmp

  GetSystemModel = "<failed>"
  On Error GoTo ErrHandler
  Set oWMI = GetObject("winmgmts:")
  Set oResult = oWMI.ExecQuery("SELECT Model FROM Win32_ComputerSystem") ', "WQL", wbemFlagReturnImmediately + wbemFlagForwardOnly)
  For Each oItem In oResult
    lTmp = oItem.Model
    Exit For
  Next
  On Error GoTo 0
  GetSystemModel = lTmp
  Exit Function
 
ErrHandler:
End Function

Function GetSystemManufacturer() As String
Dim oWMI As Object
Dim oResult As Object
Dim oItem As Object
Dim lTmp

  GetSystemManufacturer = "<failed>"
  On Error GoTo ErrHandler
  Set oWMI = GetObject("winmgmts:")
  Set oResult = oWMI.ExecQuery("SELECT Manufacturer FROM Win32_ComputerSystem") ', "WQL", wbemFlagReturnImmediately + wbemFlagForwardOnly)
  For Each oItem In oResult
    lTmp = oItem.Manufacturer
    Exit For
  Next
  On Error GoTo 0
  GetSystemManufacturer = lTmp
  Exit Function
 
ErrHandler:
End Function

Attribute VB_Name = "ServiceStatus"
Option Explicit

#If Win64 Then  'not sure about 64 call
Private Declare PtrSafe Function OpenSCManager Lib "advapi32.dll" Alias "OpenSCManagerA" ( _
          ByVal lpMachineName As String, ByVal lpDatabaseName As String, _
          ByVal dwDesiredAccess As Long) As Long
Private Declare PtrSafe Function OpenService Lib "advapi32.dll" Alias "OpenServiceA" ( _
          ByVal hSCManager As Long, ByVal lpServiceName As String, _
          ByVal dwDesiredAccess As Long) As Long
Private Declare PtrSafe Function CloseServiceHandle Lib "advapi32.dll" (ByVal hSCObject As Long) As Long
Private Declare PtrSafe Function QueryServiceStatus Lib "advapi32.dll" ( _
          ByVal hService As Long, lpServiceStatus As SERVICE_STATUS) As Long
#Else
Private Declare Function OpenSCManager Lib "advapi32.dll" Alias "OpenSCManagerA" ( _
          ByVal lpMachineName As String, ByVal lpDatabaseName As String, _
          ByVal dwDesiredAccess As Long) As Long
Private Declare Function OpenService Lib "advapi32.dll" Alias "OpenServiceA" ( _
          ByVal hSCManager As Long, ByVal lpServiceName As String, _
          ByVal dwDesiredAccess As Long) As Long
Private Declare Function CloseServiceHandle Lib "advapi32.dll" (ByVal hSCObject As Long) As Long
Private Declare Function QueryServiceStatus Lib "advapi32.dll" ( _
          ByVal hService As Long, lpServiceStatus As SERVICE_STATUS) As Long
#End If

Private Type SERVICE_STATUS
  dwServiceType As Long
  dwCurrentState As Long
  dwControlsAccepted As Long
  dwWin32ExitCode As Long
  dwServiceSpecificExitCode As Long
  dwCheckPoint As Long
  dwWaitHint As Long
End Type

Public Function GetServiceStatus(ByVal fsServiceName As String) As String
Dim hSCM  As Long
Dim hSVC As Long
Dim pSTATUS As SERVICE_STATUS
Dim lRet As Long
Dim sTemp As String
Const SERVICE_STOPPED  As Long = &H1
Const SERVICE_START_PENDING  As Long = &H2
Const SERVICE_STOP_PENDING  As Long = &H3
Const SERVICE_RUNNING  As Long = &H4
Const SERVICE_CONTINUE_PENDING  As Long = &H5
Const SERVICE_PAUSE_PENDING  As Long = &H6
Const SERVICE_PAUSED  As Long = &H7
Const SERVICE_ACCEPT_STOP  As Long = &H1
Const SERVICE_ACCEPT_PAUSE_CONTINUE  As Long = &H2
Const SERVICE_ACCEPT_SHUTDOWN  As Long = &H4
Const SC_MANAGER_CONNECT  As Long = &H1
Const GENERIC_READ  As Long = &H80000000

  'Open The Service Control Manager
  hSCM = OpenSCManager(vbNullString, vbNullString, SC_MANAGER_CONNECT)
  If hSCM = 0 Then
    GetServiceStatus = "Error - " & Err.LastDllError
    Exit Function
  End If
  
  'Open the specific Service to obtain a handle
  hSVC = OpenService(hSCM, Trim(fsServiceName), GENERIC_READ)
    If hSVC = 0 Then
      GetServiceStatus = "Error - " & Err.LastDllError
      Call CloseServiceHandle(hSVC)  'Close the Handle to the Service
      Exit Function
    End If
  
  'Fill the Service Status Structure
  lRet = QueryServiceStatus(hSVC, pSTATUS)
  If lRet = 0 Then
    GetServiceStatus = "Error - " & Err.LastDllError
    Call CloseServiceHandle(hSVC) 'Close the Handle to the Service
    Call CloseServiceHandle(hSCM) 'Close the Handle to the Service Control Manager
    Exit Function
  End If
  
  'Report the Current State
  Select Case pSTATUS.dwCurrentState
    Case SERVICE_STOPPED:           sTemp = "Stopped"
    Case SERVICE_START_PENDING:     sTemp = "Started"
    Case SERVICE_STOP_PENDING:      sTemp = "in the process of being stopped"
    Case SERVICE_RUNNING:           sTemp = "Running"
    Case SERVICE_CONTINUE_PENDING:  sTemp = "in process of being Continued"
    Case SERVICE_PAUSE_PENDING:     sTemp = "in the process of being Paused"
    Case SERVICE_PAUSED:            sTemp = "Paused"
    Case SERVICE_ACCEPT_STOP:       sTemp = "Stopped"
    Case SERVICE_ACCEPT_PAUSE_CONTINUE:   sTemp = "PAUSE_CONTINUE"
    Case SERVICE_ACCEPT_SHUTDOWN:   sTemp = "Shutdown"
  End Select
  
  GetServiceStatus = sTemp
End Function



Attribute VB_Name = "SheetCD"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SheetPC"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SheetPreCalc"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "SheetVersion640"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SheetVersion710"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SheetVersion720"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SheetVersion730"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SheetVersion740"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SheetVersion750"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "main"
Option Explicit
Private gRange As Range

Private gBexPath As String
Private gBex35Path As String
Private gXlaPath As String
Private gBwPath As String
Private gBex7Path As String
Private gSapSharedPath As String
Private gSapPath As String
Private gMapPath As String
Private gOlapPath As String
Private gSysPath As String
Private gControlsPath As String
Private gSapControlsPath As String
Private gSapChartPath As String
    
Private gGuiFullVersion As String
Private gBex35FullVersion As String
Private gBex7FullVersion As String
Private gSapGuiMajorRelease As String
Private gBex7MajorRelease As String
Private gBex35MajorRelease As String
Private gSapGuiPatch As String
Private gBex35Patch As String
Private gBex7Patch As String
Private gBex35TextPatch As String
Private gBex7TextPatch As String
    
Private gBiForA1S As Boolean
    
Private gVersionSheet As String
Private gColumnIndex As Integer
Private gBw7Index As Integer
Private gBw35Index As Integer
Private gMapIndex As Integer
Private gOlapIndex As Integer
Private gSapGuiIndex As Integer
Private gAddCompIndex As Integer
Private gMsIndex As Integer
Private gMsDotNetFrameworkIndex As Integer
Private gSyncIndex As Integer
Private gCommentsIndex As Integer
Private gPreCalcIndex As Integer
Private gRegistryIndex As Integer
Private gSapSharedIndex As Integer

Private gRedCount As Integer
Private gYellowCount As Integer

Private gIsOutputCopyrightEvaluated As Boolean
Private gIsOutputCopyrightValue As Boolean

Public Const pcsNoVersion As String = "No Version"

#If Win64 Then
Private Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
         ByVal hwnd As LongPtr, ByVal lpOperation As String, ByVal lpFile As String, _
         ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As LongPtr
#Else
Private Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
          ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, _
          ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
#End If

Private Function InitilizeGlobalVariable()
  gGuiFullVersion = 0
  gBex35FullVersion = 0
  gBex7FullVersion = 0
  gSapGuiMajorRelease = 0
  gBex7MajorRelease = 0
  gBex35MajorRelease = 0
  gSapGuiPatch = 0
  gBex35Patch = 0
  gBex7Patch = 0
  gBex35TextPatch = 0
  gBex7TextPatch = 0
  gVersionSheet = 0
  gBiForA1S = False
 End Function

Sub PCCheck()
Dim lSheet As Worksheet
Dim lCheckFileName As String
Dim lTmp As String
Dim lIsEnableEvents As Boolean
Dim lIsPreCalcInstalled As Boolean
Dim l2ndRange As Range
Dim lExcelCount As Integer
Const lPcCheck As String = "PC Check"
Const lGuiNotInstalled As String = "640, 710, 720, 730, 740 or 750 not installed"
    
  Set lSheet = ThisWorkbook.Worksheets(lPcCheck)
  Set gRange = lSheet.Cells
  gRange.Range(gRange.Cells(10, 1), gRange.Cells(212, 10)).Clear       'clear the workarea
  gRange.Range(gRange.Cells(3, 2), gRange.Cells(8, 3)).Clear           'clear the General system Info

  On Error Resume Next
  lSheet.Shapes("ButtonPCCheck").Visible = msoFalse
  On Error GoTo 0
  
  lTmp = "Revision: " & GetWorkbookRevision(ThisWorkbook)
  Call outPos(2, 1, 8, lTmp) ', "@")

  'Fill the General system Info
  lCheckFileName = "sapBEX_PC_" & Format(Now, "MMDD_hhmmss") & ".xls"
  Call outPos(2, 2, 8, "Computer Name: ")
  Call outPos(2, 3, 0, GetMyComputerName)
  Call outPos(3, 2, 8, "File Location: ")
  Call outPos(3, 3, 0, TmpPath & lCheckFileName)
  Call outPos(4, 2, 8, "Check date: ")
  Call outPos(4, 3, 0, "'" & Int(Now) & "   " & Format(Now, "ttttt"))
  Call outPos(5, 2, 8, "Excel Version: ")
  
  lTmp = GetAllInstalledExcelVersions(lExcelCount)
  Call outPos(5, 3, IIf(lExcelCount = 1, 0, 4), lTmp)
  Call outPos(6, 2, 8, "Windows Version: ")
  Call outPos(6, 3, 0, GetOSVersion) 'GetOperatingSystem)
  
  Call outPos(7, 2, 8, "System Manufacturer: ")
  Call outPos(7, 3, 0, GetSystemManufacturer)
  
  Call outPos(8, 2, 8, "System Model: ")
  Call outPos(8, 3, 0, GetSystemModel)
  
  Call outPos(9, 2, 8, "Default Browser: ")
  Call outPos(9, 3, 0, GetDefaultBrowser)

  Call outPos(10, 2, 8, "SAP GUI: ")
  If Not GetPaths Then
    If (gVersionSheet = vbNullString) Or (gSapGuiMajorRelease = 0) Then
      Call outPos(10, 3, 4, lGuiNotInstalled)
    End If
    Call ExitCheck(TmpPath, lCheckFileName)
    Exit Sub
  End If

  If IsBex7xInstalled Then
    Call outPos(gBw7Index, 2, 8, gBex7TextPatch)
  Else
    Call outPos(gBw7Index, 2, 8, "No BI 7.x frontend installed")
  End If
  If IsBex350Installed Then
    Call outPos(gBw35Index, 2, 8, gBex35TextPatch)
  Else
    Call outPos(gBw35Index, 2, 8, "No BW 3.5 frontend installed")
  End If
  
  'Fill SAPGUI Release Info.
  If IsSAPGUI750Installed Or IsSAPGUI740Installed Or IsSAPGUI730Installed Or IsSAPGUI720Installed Or IsSAPGUI710Installed Or gBiForA1S Then
    If Not gBiForA1S Then
      If IsSAPGUI710Installed Then
        Call outPos(10, 3, 8, "710 Patch " & gSapGuiPatch)
      ElseIf IsSAPGUI720Installed Then
        Call outPos(10, 3, 8, "720 Patch " & gSapGuiPatch)
      ElseIf IsSAPGUI730Installed Then
        Call outPos(10, 3, 8, "730 Patch " & gSapGuiPatch)
      ElseIf IsSAPGUI740Installed Then
        Call outPos(10, 3, 8, "740 Patch " & gSapGuiPatch)
      ElseIf IsSAPGUI750Installed Then
        Call outPos(10, 3, 8, "750 Patch " & gSapGuiPatch)
      End If
    End If
  ElseIf IsSAPGUI640Installed Then
    Call outPos(10, 3, 8, "640 Patch " & gSapGuiPatch)
  Else
    Call outPos(10, 3, 8, lGuiNotInstalled)
    If (Not IsBex7xInstalled) And (Not IsBex350Installed) Then
      Call ExitCheck(TmpPath, lCheckFileName)
      Exit Sub
    End If
  End If

  Call outPos(gBw7Index - 2, 1, 8, "Filename")
  Call outPos(gBw7Index - 2, 2, 8, "File Version on PC")
  Call outPos(gBw7Index - 2, 3, 8, "File Version delivered")
  Call outPos(gBw7Index - 2, 4, 8, "Path")
  Call outPos(gBw7Index - 2, 5, 8, "Date/Time")
  Call outPos(gBw7Index - 2, 6, 8, "Size")
  Call outPos(gBw7Index - 2, 7, 8, "CompName")
  Call outPos(gBw7Index - 2, 8, 8, "CLSID")

  Application.CutCopyMode = False
  Range("A2").Select

  lIsEnableEvents = Application.EnableEvents
  If lIsEnableEvents Then Application.EnableEvents = False
  
  If IsBex750Installed Or IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed Then
    Call outBw7xComponents
    Call outSapSharedComponents(False)
    Call outSyncfusionComponents
  End If
  If IsBex350Installed Then outBw35Components
  If IsMapObjectsInstalled Then Call outMapObjects(False)
  If IsOlapInstalled Then Call outOleForOlap(False)
  If IsBex350Installed Then
    Call outSapGuiCoreComponents
    Call outAdditionalComponents(False)
  End If
  Call outMicrosoftCoreComponents
  Call outMicrosoftDotNetFramework
  Call outRegistyEntreesSection
  
  'Is PreCal installed?
  Call outPos(11, 2, 8, "PreCalc Server: ")
  lIsPreCalcInstalled = IsPreCalcInstalled
  If lIsPreCalcInstalled Then
    Call outPos(11, 3, 0, "Is installed")
  Else
    Call outPos(11, 3, 0, "Not installed")
  End If

  If lIsEnableEvents Then Application.EnableEvents = True
  
  Call HideUnused(True)

  gRange.Columns.AutoFit
  gRange.Columns(1).ColumnWidth = 26
  gRange.Columns(2).ColumnWidth = 18
  gRange.Columns(3).ColumnWidth = 21
  gRange.Columns(4).ColumnWidth = 43
  gRange.Columns(5).ColumnWidth = 15
  gRange.Columns(6).ColumnWidth = 15

  If gRedCount > 0 Or gYellowCount > 0 Then
    MsgBox gRedCount & " red signed Files found." & Chr(10) _
            & gYellowCount & " yellow signed Files found." & Chr(10) & Chr(10) _
            & "Please check SAPSETUP.LOG in " & GetProgramFilesFolder & "\SAP\SAPSetup\Logs" & "." & Chr(10) & Chr(10) _
            & "Please see note 197460 for more details.", vbExclamation
  End If

  'Set lSheet = ThisWorkbook.Worksheets("PC Check")
  'Set gRange = lSheet.Cells
  
  If lIsPreCalcInstalled Then
    Call PreCalcCheckInternal(False, l2ndRange)
  Else
    Set l2ndRange = Nothing
  End If

  Set lSheet = ThisWorkbook.Worksheets(lPcCheck)
  Set gRange = lSheet.Cells
  Call ExitCheck(TmpPath, lCheckFileName, l2ndRange)
End Sub

Private Sub ExitCheck( _
              ByVal iTmpPath As String, _
              ByVal iCheckFileName As String, _
     Optional ByVal i2ndRange As Range = Nothing)
Dim lNewBook As Workbook
Dim lCodeName As String
Dim lDisplayAlerts As Boolean
Dim lWorksheet As Worksheet
Dim lName As String
Dim lIsEnableEvents As Boolean
Dim lOthersWorksheetsCount As Integer

  lIsEnableEvents = Application.EnableEvents
  On Error Resume Next
  If lIsEnableEvents Then Application.EnableEvents = False  'cust. msg. 828661 2008
  Application.Workbooks(iCheckFileName).Close False
  Kill iTmpPath & iCheckFileName
  On Error GoTo 0
  
  Set lWorksheet = ThisWorkbook.Sheets.Add
  lWorksheet.Move Before:=ThisWorkbook.Sheets(1)
  gRange.Cells.Copy
  lWorksheet.Paste
  lWorksheet.Range("A1").Select
  
  If IsSAPGUI640Installed Then
    lWorksheet.Name = "Result SAP GUI 6.40"
  ElseIf IsSAPGUI710Installed Then
    lWorksheet.Name = "Result SAP GUI 7.10"
  ElseIf IsSAPGUI720Installed Then
    lWorksheet.Name = "Result SAP GUI 7.20"
  ElseIf IsSAPGUI730Installed Then
    lWorksheet.Name = "Result SAP GUI 7.30"
  ElseIf IsSAPGUI740Installed Then
    lWorksheet.Name = "Result SAP GUI 7.40"
  ElseIf IsSAPGUI750Installed Then
    lWorksheet.Name = "Result SAP GUI 7.50"
  ElseIf CInt(Val(gBex7MajorRelease)) > 0 Then
    lWorksheet.Name = "Result of " & Left(gBex7MajorRelease, 3)
  Else
    lWorksheet.Name = "Result SAP GUI 00"
  End If
  
  Set lNewBook = Workbooks.Add                                    'Create new workbook
  ThisWorkbook.Worksheets(1).Move Before:=lNewBook.Worksheets(1)  'Move filled out sheet to new workbook
  
  'PreCalc
  If Not i2ndRange Is Nothing Then
    Set lWorksheet = ThisWorkbook.Sheets.Add
    lWorksheet.Move Before:=ThisWorkbook.Sheets(1)
    i2ndRange.Cells.Copy
    lWorksheet.Paste
    lWorksheet.Range("A1").Select
    lWorksheet.Name = "Result PreCalc"
    
    ThisWorkbook.Worksheets(1).Move After:=lNewBook.Worksheets(1) 'Move filled out sheet to new workbook
    Set lWorksheet = lNewBook.Worksheets(1)
    lWorksheet.Activate
  End If
  
  'lCodeName = ThisWorkbook.Worksheets(1).CodeName
  'Call DeleteWorkbookEventCode(lNewBook, lCodeName)
  
  'Delete other WorkSheets
  lDisplayAlerts = Application.DisplayAlerts
  Application.DisplayAlerts = False
  lOthersWorksheetsCount = IIf(i2ndRange Is Nothing, 1, 2)
  Do While lNewBook.Worksheets.Count > lOthersWorksheetsCount
    lNewBook.Worksheets(lOthersWorksheetsCount + 1).Delete
  Loop
  Application.DisplayAlerts = lDisplayAlerts
  
  On Error Resume Next
  Call SaveAs(lNewBook, iTmpPath & iCheckFileName)
  'ThisWorkbook.Close False  'doesn't work like this in rare cases; workaround in next line => cust. msg. 3276017 2010
  Application.OnTime Now, "CloseThisWorkbook"
  If lIsEnableEvents Then Application.EnableEvents = True       'cust. msg. 828661 2008
  On Error GoTo 0
  
  If ExistsCommandBar("xxxSAPBEXxxx") Then Application.CommandBars("xxxSAPBEXxxx").Delete
  If ExistsCommandBar("xxxBEx Design Toolboxxxx") Then Application.CommandBars("xxxBEx Design Toolboxxxx").Delete
  If ExistsCommandBar("xxxBEx Analysis Toolboxxxx") Then Application.CommandBars("xxxBEx Analysis Toolboxxxx").Delete
End Sub

Sub CloseThisWorkbook()
  ThisWorkbook.Close False
End Sub

Private Sub DeleteWorkbookEventCode( _
                ByRef iWorkBook As Workbook, _
                ByVal iSheetName As String)
'Needs Reference Set To "Microsoft Visual Basic For Applications Extensibility"
'Tools > References.
  On Error Resume Next
  With iWorkBook.VBProject.VBComponents(iSheetName).CodeModule
    .DeleteLines 1, .CountOfLines
  End With
  On Error GoTo 0
End Sub

Private Sub outBw7xComponents()
Dim iCount As Integer
  
  gColumnIndex = GetColumnIndexOfInstalledPatch(gBex7TextPatch, GetIndex("BI in SAP NetWeaver 2004s"))

  Call outPos(gBw7Index, 1, 8, "BI Components")
  iCount = 1
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'AxInterop.SHDocVw.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExAddin.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExAddin.tlb       new; rev 41
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExAnalyzer.exe
  OutXLAfilePos GetBw7Row(iCount), , , False                                                 'BExAnalyzer.xla
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExApi.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExApi.tlb         new; rev 41
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExCAControls.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExCommon.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExCommunication.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExControls.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExControls2.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExDialogOpenSave.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExDiffViewer.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExFormulaParser.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExGeneratedAll.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExInstaller.dll
  If IsBex700Installed Then
    outEXEfilePos GetBw7Row(iCount), gBex7Path                                               'BExMailTrace.dll
  End If
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExOpenSaveServices.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExQueryDesigner.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExQueryDesignerFormulaParser.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExQueryDesignerStarter.exe
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExRDRuler.dll
  If IsBex700Installed Then
    outEXEfilePos GetBw7Row(iCount), gBex7Path                                               'BExReplayController.dll
  End If
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExReportDesigner.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExReportDesignerStarter.exe
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExSelectorAPI.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExSelectorDialog.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExSharedImageList.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExThemes.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExVariableScreen.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExWebApplicationDesigner.exe
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExXMLControls.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExXMLServices.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'Interop.MSXML2.dll
  If IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed Then
    outEXEfilePos GetBw7Row(iCount), gBex7Path                                               'Interop.SAPLogonCtrl.dll
  End If
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'Interop.SHDocVw.dll
  If IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed Then
    outEXEfilePos GetBw7Row(iCount), gBex7Path, , , , , "SAP.Connector.BAPIRET1"             'SAP.Connector.dll
    outEXEfilePos GetBw7Row(iCount), gBex7Path, , , , , "SAP.Connector.Rfc.EDI_DC_BLOCK"     'SAP.Connector.Rfc.dll
  ElseIf IsBex750Installed Then
    outEXEfilePos GetBw7Row(iCount), gBex7Path, , , , , "sapnco"                             'sapnco.dll
    outEXEfilePos GetBw7Row(iCount), gBex7Path, , , , , "sapnco_utils"                       'sapnco_utils.dll
  End If
  If Not IsBex750Installed Then
    outEXEfilePos GetBw7Row(iCount), gBex7Path                                               'sapbwwmd.ocx
  End If
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'SAPWADMXHTML.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADBackendServices.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADBExData.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADBISPParse.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADChartControlHost.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADConst.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADControllib.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADConversion.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADHTMLEditHost.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADHTMLEditing.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADLowLevelServices.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADMain.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADMapControlHost.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADMetadataGeneration.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADMXHTML.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADPageobjects.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADPropertiesctl.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADRDHost.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADRDLoader.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADRTFIntellisense.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADRTFIsRegEx.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADServices.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADSnapShots.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADStyleSheetServices.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADTagLocator.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADTokenSearch.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADWizTemplate.dll
  
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'sapchartcontrollib.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'axmapcontrollib.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'Axsapchartcontrollib.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'mapcontrollib.dll
  
  gColumnIndex = 2
End Sub

Private Sub outServerBw7xComponents()
Dim iCount As Integer
Dim sPath As String
  
  gColumnIndex = GetColumnIndexOfInstalledPatch(gBex7TextPatch, GetIndex("BI in SAP NetWeaver 2004s"))

  Call outPos(gBw7Index, 1, 8, "BI Components")
  iCount = 1
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'AxInterop.SHDocVw.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExAddin.dll
  iCount = iCount + 1                                                                        'BExAddin.tlb; no tlb on the server
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExAnalyzer.exe
  OutServerXLAfilePos GetBw7Row(iCount), gBex7Path, False                                    'BExAnalyzer.xla
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExApi.dll
  iCount = iCount + 1                                                                        'BExApi.tlb; no tlb on the server
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExCAControls.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExCommon.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExCommunication.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExControls.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExControls2.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExDialogOpenSave.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExDiffViewer.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExFormulaParser.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExGeneratedAll.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExInstaller.exe
  If IsBex700Installed Then
    outEXEfilePos GetBw7Row(iCount), gBex7Path                                               'BExMailTrace.dll
  End If
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExOpenSaveServices.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExQueryDesigner.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExQueryDesignerFormulaParser.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExQueryDesignerStarter.exe
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExRDRuler.dll
  If IsBex700Installed Then
    outEXEfilePos GetBw7Row(iCount), gBex7Path                                               'BExReplayController.dll
  End If
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExReportDesigner.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExReportDesignerStarter.exe
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExSelectorAPI.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExSelectorDialog.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExSharedImageList.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExThemes.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExVariableScreen.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExWebApplicationDesigner.exe
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExXMLControls.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'BExXMLServices.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'Interop.MSXML2.dll
  If IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed Then
    outEXEfilePos GetBw7Row(iCount), gBex7Path                                               'Interop.SAPLogonCtrl.dll
  End If
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'Interop.SHDocVw.dll
  If IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed Then
    outEXEfilePos GetBw7Row(iCount), gBex7Path                                               'SAP.Connector.dll
    outEXEfilePos GetBw7Row(iCount), gBex7Path                                               'SAP.Connector.Rfc.dll
  ElseIf IsBex750Installed Then
    sPath = gBex7Path
    If UCase(Right(gBex7Path, 4)) = "\BI\" Then
      sPath = Left(gBex7Path, Len(gBex7Path) - 3) & "System\SAP .NET Connector\.NET20\"
    End If
    outEXEfilePos GetBw7Row(iCount), sPath                                                   'sapnco.dll
    outEXEfilePos GetBw7Row(iCount), sPath                                                   'sapnco_utils.dll
  End If
  If Not IsBex750Installed Then
    outEXEfilePos GetBw7Row(iCount), gBex7Path                                               'sapbwwmd.ocx
  End If
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'SAPWADMXHTML.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADBackendServices.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADBExData.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADBISPParse.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADChartControlHost.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADConst.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADControllib.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADConversion.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADHTMLEditHost.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADHTMLEditing.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADLowLevelServices.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADMain.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADMapControlHost.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADMetadataGeneration.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADMXHTML.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADPageobjects.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADPropertiesctl.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADRDHost.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADRDLoader.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADRTFIntellisense.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADRTFIsRegEx.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADServices.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADSnapShots.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADStyleSheetServices.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADTagLocator.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADTokenSearch.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'WADWizTemplate.dll
  
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'sapchartcontrollib.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'axmapcontrollib.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'Axsapchartcontrollib.dll
  outEXEfilePos GetBw7Row(iCount), gBex7Path                                                 'mapcontrollib.dll
  
  gColumnIndex = 2
End Sub

Private Sub outPreCalcComponents()
Dim iCount As Integer
Dim sPath As String
Dim sTmp As String
Dim bTmp As Boolean
Dim sText As String
Dim bService1Running As Boolean
Dim bService2Running As Boolean
Dim bDesktop32 As Boolean
Dim bDesktop64 As Boolean
Dim tmpRange As Range
Const csRunning As String = "running"
Const csDesktop32 = "C:\Windows\System32\config\systemprofile\Desktop"
Const csDesktop64 = "C:\Windows\SysWOW64\config\systemprofile\Desktop"

  gColumnIndex = 2 'GetColumnIndexOfInstalledPatch("-", gPreCalcIndex)
  sPath = GetPreCalcPath & "\BI_Prec\"

  Call outPos(gPreCalcIndex, 1, 8, "PreCalc Server Components")
  iCount = 1
  outEXEfilePos gPreCalcIndex + 1, sPath                                            'BExPreCalcInstance.dll
  outEXEfilePos gPreCalcIndex + 2, sPath                                            'BExPreCalcRfcServer.dll
  outEXEfilePos gPreCalcIndex + 3, sPath                                            'BExPreCalcWindowsService.exe
  outEXEfilePos gPreCalcIndex + 4, sPath                                            'BExPreCalcWindowsServiceMulti.exe
  outEXEfilePos gPreCalcIndex + 5, sPath                                            'BExPrecalcWorker.exe
  outEXEfilePos gPreCalcIndex + 6, sPath                                            'BExPrecConsoleDispatcher.exe
  outEXEfilePos gPreCalcIndex + 7, sPath                                            'BExPrecConsoleWrapper.exe
  If IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed Then
    outEXEfilePos gPreCalcIndex + 8, sPath, , , , , "SAP.Connector.BAPIRET1"          'SAP.Connector.dll
    outEXEfilePos gPreCalcIndex + 9, sPath, , , , , "SAP.Connector.Rfc.EDI_DC_BLOCK"  'SAP.Connector.Rfc.dll
  ElseIf IsBex750Installed Then
    outEXEfilePos gPreCalcIndex + 8, sPath, , , , , "sapnco"                         'sapnco.dll
    outEXEfilePos gPreCalcIndex + 9, sPath, , , , , "sapnco_utils"                   'sapnco_utils.dll
  End If
  OutServerXLAfilePos gPreCalcIndex + 10, sPath, True                                'sapbexp.xla
  OutServerXLAfilePos gPreCalcIndex + 11, sPath, False                               'BExAnalyzer.xla
  
  'Check if folder exists
  Call outPos(gPreCalcIndex + 13, 1, 8, "Folder-Check")
  Call outPos(gPreCalcIndex + 14, 1, 0, "Desktop")
  bDesktop32 = FolderExists(csDesktop32)
  bDesktop64 = FolderExists(csDesktop64)
  If (Not bDesktop32) And (Not bDesktop64) Then
    Call outPos(gPreCalcIndex + 14, 2, 4, "Not found")
  Else
    sTmp = IIf(bDesktop64, csDesktop64, csDesktop32)
    Call outPos(gPreCalcIndex + 14, 2, 0, sTmp)
  End If
  
  'SapLogon.ini
  Call outPos(gPreCalcIndex + 15, 1, 0, "SapLogon.ini")
  sTmp = WinPath
  If sTmp <> vbNullString Then
    If Right(sTmp, 1) <> "\" Then sTmp = sTmp & "\"
    If FileExists(sTmp & "SapLogon.ini") Then
      Call outPos(gPreCalcIndex + 15, 2, 5, sTmp)
    Else
    Call outPos(gPreCalcIndex + 15, 2, 4, "Not found (" & sTmp & ")")
    End If
  End If
  
  
'  sTmp = Trim(RegistryGetString("SAP.BusinessExplorer.Analyzer\BW_PRECALC", "", hk_CLASSES_ROOT))
'  If sTmp = vbNullString Then sTmp = "<no data>"
'  sText = "CLASSES_ROOT\SAP.BusinessExplorer.Analyzer\BW_PRECALC: " & sTmp
'  Call outPos(gPreCalcIndex + 13, 1, 0, sText)
'  With gRange(gPreCalcIndex + 13, 1).Characters(Start:=Len(sText) - Len(sTmp) + 1, Length:=Len(sTmp))
'    .Font.Size = 10
'    .Font.Bold = True
'  End With


  'SHOWEXCEL
  sTmp = Trim(RegistryGetString("SOFTWARE\SAP\BEx", "SHOWEXCEL", hk_LOCAL_MACHINE))
  If sTmp = vbNullString Then sTmp = "<no data>"
  Call outPos(gPreCalcIndex + 17, 1, 0, "SHOWEXCEL")
  Call outPos(gPreCalcIndex + 17, 2, 0, sTmp)
  
  'KEEP_FILES
  sTmp = Trim(RegistryGetString("SAP.BusinessExplorer.Analyzer\BW_PRECALC", "KEEP_FILES", hk_CLASSES_ROOT))
  If sTmp = vbNullString Then sTmp = "<no data>"
  Call outPos(gPreCalcIndex + 18, 1, 0, "KEEP_FILES")
  Call outPos(gPreCalcIndex + 18, 2, 0, sTmp)
  
  'INSTANCE_RETRY_COUNT
  sTmp = Trim(RegistryGetString("SAP.BusinessExplorer.Analyzer\BW_PRECALC", "INSTANCE_RETRY_COUNT", hk_CLASSES_ROOT))
  If sTmp = vbNullString Then sTmp = "<no data>"
  Call outPos(gPreCalcIndex + 19, 1, 0, "INSTANCE_RETRY_COUNT")
  Call outPos(gPreCalcIndex + 19, 2, 0, sTmp)
  
  'PREC_TRACE
  sTmp = Trim(RegistryGetString("SAP.BusinessExplorer.Analyzer\BW_PRECALC", "PREC_TRACE", hk_CLASSES_ROOT))
  If sTmp = vbNullString Then sTmp = "<no data>"
  Call outPos(gPreCalcIndex + 20, 1, 0, "PREC_TRACE")
  Call outPos(gPreCalcIndex + 20, 2, 0, sTmp)
  
  'Services
  Call outPos(gPreCalcIndex + 22, 1, 8, "Services")
  Call outPos(gPreCalcIndex + 22, 2, 8, "Status")
  Call outPos(gPreCalcIndex + 22, 3, 8, "Logon as")
  Call outPos(gPreCalcIndex + 22, 4, 8, "Interact w. desktop")
  
  'SAP BW Precalculation Service: Status
  Call outPos(gPreCalcIndex + 23, 1, 0, "PreCalc Service")
  sTmp = GetServiceStatus("SAP BW Precalculation Service")
  Call outPos(gPreCalcIndex + 23, 2, 0, sTmp)
  bService1Running = CBool(csRunning = LCase(sTmp))
  
  'SAP BW Precalculation Service: Log on as
  sTmp = Trim(RegistryGetString("SYSTEM\CurrentControlSet\Services\SAP BW Precalculation Service", "ObjectName", hk_LOCAL_MACHINE))
  If LCase(sTmp) = LCase("LocalSystem") Then
    Call outPos(gPreCalcIndex + 23, 3, 4, sTmp)
  Else
    If sTmp = vbNullString Then sTmp = "<no data>"
    Call outPos(gPreCalcIndex + 23, 3, 0, sTmp)
  End If
  
  'SAP BW Precalculation Service: Interact w. desktop
  sTmp = IIf(CanServiceInteractWithDesktop("SAP BW Precalculation Service"), "Yes", "No")
  Call outPos(gPreCalcIndex + 23, 4, 0, sTmp)
  
  'SAP BW Precalculation Service Multi Instance: Status
  Call outPos(gPreCalcIndex + 24, 1, 0, "PreCalc Service Multi Instance")
  sTmp = GetServiceStatus("SAP BW Precalculation Service Multi Instance")
  Call outPos(gPreCalcIndex + 24, 2, 0, sTmp)
  bService2Running = CBool(csRunning = LCase(sTmp))
  
  If (Not bService1Running) And (Not bService2Running) Then
    Call outPos(gPreCalcIndex + 25, 1, 4, "Please start at least")
    Call outPos(gPreCalcIndex + 26, 1, 4, "one service and")
    Call outPos(gPreCalcIndex + 27, 1, 4, "execute the Check-Tool again.")
    gColumnIndex = 2
    'Exit Sub
  End If
  
  'SAP BW Precalculation Service: Log on as
  sTmp = Trim(RegistryGetString("SYSTEM\CurrentControlSet\Services\SAP BW Precalculation Service Multi Instance", "ObjectName", hk_LOCAL_MACHINE))
  If LCase(sTmp) = LCase("LocalSystem") Then
    Call outPos(gPreCalcIndex + 24, 3, 4, sTmp)
  Else
    If sTmp = vbNullString Then sTmp = "<no data>"
    Call outPos(gPreCalcIndex + 24, 3, 0, sTmp)
  End If
  
  'SAP BW Precalculation Service: Interact w. desktop
  sTmp = IIf(CanServiceInteractWithDesktop("SAP BW Precalculation Service Multi Instance"), "Yes", "No")
  Call outPos(gPreCalcIndex + 24, 4, 0, sTmp)
  
  
  Call outPreCalcServers(gPreCalcIndex + 26)

  gColumnIndex = 2
End Sub

Private Function CanServiceInteractWithDesktop(ByVal fsServiceName As String) As Boolean
Dim lngTmp As String
Const SERVICE_INTERACTIVE_PROCESS As Long = &H100&

  lngTmp = CLng(Val(Trim(RegistryGetString("SYSTEM\CurrentControlSet\Services\" & fsServiceName, "Type", hk_LOCAL_MACHINE, False))))
  CanServiceInteractWithDesktop = lngTmp And SERVICE_INTERACTIVE_PROCESS
End Function

Private Function GetBw7Row(ByRef fCount As Integer) As Integer
  GetBw7Row = GetRow(gBw7Index, fCount)
End Function
Private Function GetSapGuiRow(ByRef fCount As Integer) As Integer
  GetSapGuiRow = GetRow(gSapGuiIndex, fCount)
End Function
Private Function GetRow( _
                    ByVal fOffset As Integer, _
                    ByRef fCount As Integer) As Integer
  GetRow = fOffset + fCount
  fCount = fCount + 1
End Function
 
Private Sub outBw35Components()
  gColumnIndex = GetColumnIndexOfInstalledPatch(gBex35TextPatch, GetIndex("BW 3.5 Components"))

  'BW 3.5 Components
  Call outPos(gBw35Index, 1, 8, "BW 3.5 Components")
  OutXLAfilePos gBw35Index + 1                                          ' sapbex.xla
  OutXLAfilePos gBw35Index + 2                                          ' sapbex0.xla
  
  outSystemFilePos gBw35Index + 4                                       ' wdba.dll
  outEXEfilePos gBw35Index + 5, gBexPath, , , , , , False               ' wdbbapp.exe
  outCompPos gBw35Index + 6, "SAPBROWSER.SAPBrowserCtrl.1"              ' wdbbctrl.ocx
  outEXEfilePos gBw35Index + 7, gBexPath, , , , , , False               ' wdbbwait.ani
  
  outCompPos gBw35Index + 9, "SAPBExCommonResources.BExGlobal"          ' wdbcbexc.dll
  outCompPos gBw35Index + 10, "SAP.BWAdapter.1"                         ' wdbdapdt.ocx
  outCompPos gBw35Index + 11, "SAPBWOpenDialog.BEXOpenDialog"           ' wdbfodlg.dll
  outCompPos gBw35Index + 13, "wdbmbm2.BExMap2"                         ' wdbmbm2.ocx
  outCompPos gBw35Index + 14, "SAPBWObjectBrowser.BEXOpenSaveDialog"    ' wdboobjb.dll
  outEXEfilePos gBw35Index + 15, gBexPath, , , , , , False              ' wdbpwpub.exe
  
  outEXEfilePos gBw35Index + 17, gSapPath, , , , , , False              ' wdbranim.exe
  outCompPos gBw35Index + 18, "SAPRBLogic.SAPRBLog"                     ' wdbrlog.ocx
  outEXEfilePos gBw35Index + 19, gBexPath, , , , , , False              ' wdbrlog.exe
  outCompPos gBw35Index + 20, "SAP.BWTree.1"                            ' wdbrtre2.ocx
  outCompPos gBw35Index + 21, "SAPBWPrintProp.SAPQueryPrnProp"          ' wdbrprn.ocx
  
  outCompPos gBw35Index + 23, "SAPBWSelWizard.BWSelectionWizard"        ' wdbspres.dll
  outEXEfilePos gBw35Index + 24, gBexPath, , , , , , False              ' wdbtask.exe
  outCompPos gBw35Index + 25, "SAPVarEditor.BExVarWizard"               ' wdbvved.ocx
  outEXEfilePos gBw35Index + 26, gBexPath, , , , , , False              ' wdbwpub.exe
  outCompPos gBw35Index + 27, "BWWebPubWizard.webpubsh"                 ' wdbwwiz.dll
  
  If (Not IsBex750Installed) And (Not IsBex740Installed) And (Not IsBex730Installed) And (Not IsBex720Installed) Then
    outCompPos gBw35Index + 28, "SAP.BIWRFCServerCtrl.1"                ' wdbz.ocx
  End If
  
  outEXEfilePos gBw35Index + 29, gBexPath, , , , , , False              ' wdbbd3xlau.exe
  outEXEfilePos gBw35Index + 30, gBexPath, , , , , , False              ' bwcrw32.exe
  gColumnIndex = 2
End Sub
 
Private Sub outServerBw35Components()
  gColumnIndex = GetColumnIndexOfInstalledPatch(gBex35TextPatch, GetIndex("BW 3.5 Components"))

  'BW 3.5 Components
  Call outPos(gBw35Index, 1, 8, "BW 3.5 Components")
  OutServerXLAfilePos gBw35Index + 1, gBwPath                                ' sapbex.xla
  OutServerXLAfilePos gBw35Index + 2, gBwPath                                ' sapbex0.xla

  outEXEfilePos gBw35Index + 4, gBwPath, False, True, , , , False            ' wdba.dll
  outEXEfilePos gBw35Index + 5, gBwPath, False, True, , , , False            ' wdbbapp.exe
  outEXEfilePos gBw35Index + 6, gBwPath, False, True, , , , False            ' wdbbctrl.ocx
  outEXEfilePos gBw35Index + 7, gBwPath, False, True, , , , False            ' wdbbwait.ani
  
  outEXEfilePos gBw35Index + 9, gControlsPath, False, True, , , , False      ' wdbcbexc.dll
  outEXEfilePos gBw35Index + 10, gControlsPath, False, True, , , , False     ' wdbdapdt.ocx
  outEXEfilePos gBw35Index + 11, gControlsPath, False, True, , , , False     ' wdbfodlg.dll
  outEXEfilePos gBw35Index + 13, gControlsPath, False, True, , , , False     ' wdbmbm2.ocx
  outEXEfilePos gBw35Index + 14, gControlsPath, False, True, , , , False     ' wdboobjb.dll
  outEXEfilePos gBw35Index + 15, gBwPath, False, True, , , , False           ' wdbpwpub.exe
  outEXEfilePos gBw35Index + 17, gControlsPath, False, True, , , , False     ' wdbranim.exe
  outEXEfilePos gBw35Index + 18, gControlsPath, False, True, , , , False     ' wdbrlog.ocx
  outEXEfilePos gBw35Index + 19, gBwPath, False, True, , , , False           ' wdbrlog.exe
  outEXEfilePos gBw35Index + 20, gControlsPath, False, True, , , , False     ' wdbrtre2.ocx
  outEXEfilePos gBw35Index + 21, gControlsPath, False, True, , , , False     ' wdbrprn.ocx
  
  outEXEfilePos gBw35Index + 23, gControlsPath, False, True, , , , False     ' wdbspres.dll
  outEXEfilePos gBw35Index + 24, gBwPath, False, True, , , , False           ' wdbtask.exe
  outEXEfilePos gBw35Index + 25, gControlsPath, False, True, , , , False     ' wdbvVed.dll
  outEXEfilePos gBw35Index + 26, gBwPath, False, True, , , , False           ' wdbwpub.exe
  outEXEfilePos gBw35Index + 27, gControlsPath, False, True, , , , False     ' wdbwwiz.dll
  outEXEfilePos gBw35Index + 28, gControlsPath, False, True, , , , False     ' wdbz.ocx
  outEXEfilePos gBw35Index + 29, gBwPath, False, True, , , , False           ' wdbbd3xlau.exe
  outEXEfilePos gBw35Index + 30, gBwPath, False, True, , , , False           ' bwcrw32.exe
  gColumnIndex = 2
End Sub
    
Private Sub outMapObjects(ByVal iServer As Boolean)
  gColumnIndex = GetColumnIndex
  Call outPos(gMapIndex, 1, 8, "Map Components")
  outEXEfilePos gMapIndex + 1, gMapPath, False, iServer                 'af20.dll
  outEXEfilePos gMapIndex + 2, gMapPath, False, iServer                 'aiimage20.dll
  outEXEfilePos gMapIndex + 3, gMapPath, False, iServer                 'dforrt.dll
  outEXEfilePos gMapIndex + 4, gMapPath, False, iServer                 'efileio.dll
  outEXEfilePos gMapIndex + 5, gMapPath, False, iServer                 'elib.dll
  outEXEfilePos gMapIndex + 6, gMapPath, False, iServer                 'ergxlib.dll
  outEXEfilePos gMapIndex + 7, gMapPath, False, iServer                 'ethrlib.dll
  outEXEfilePos gMapIndex + 8, gMapPath, False, iServer                 'iso8211.dll
  outEXEfilePos gMapIndex + 9, gMapPath, False, iServer                 'libtiff.dll
  If iServer Then
    outEXEfilePos gMapIndex + 10, gMapPath, False, iServer              'memfile.dll
  Else
    outCompPos gMapIndex + 10, "MapObjects.MemFile.1", True             'memfile.dll
  End If
  outEXEfilePos gMapIndex + 11, gMapPath, False, iServer                'memtable20.dll
  If iServer Then
    outEXEfilePos gMapIndex + 12, gMapPath, False, iServer              'mo20.ocx
  Else
    outCompPos gMapIndex + 12, "MapObjects2.ZRenderer", True            'mo20.ocx
  End If
  outEXEfilePos gMapIndex + 13, gMapPath, False, iServer                'mo20.lic
  outEXEfilePos gMapIndex + 14, gMapPath, False, iServer                'mobase.dll
  outEXEfilePos gMapIndex + 15, gMapPath, False, iServer                'mofeat.dll
  outEXEfilePos gMapIndex + 16, gMapPath, False, iServer                'mogridio.dll
  outEXEfilePos gMapIndex + 17, gMapPath, False, iServer                'mtch.dll
  outEXEfilePos gMapIndex + 18, gMapPath, False, iServer                'pe.dll
  outEXEfilePos gMapIndex + 19, gMapPath, False, iServer                'sg.dll
  outEXEfilePos gMapIndex + 20, gMapPath, False, iServer                'shape20.dll
  gColumnIndex = 2
End Sub

Private Function GetColumnIndex(Optional ByVal fDefault As Integer = 2) As Integer
Dim i7x As Integer
Dim i35 As Integer
  
  If IsBex750Installed Or IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed Then
    i7x = GetColumnIndexOfInstalledPatch(gBex7TextPatch, GetIndex("BI in SAP NetWeaver 2004s"))
  End If
  If IsBex350Installed Then
    i35 = GetColumnIndexOfInstalledPatch(gBex35TextPatch, GetIndex("BW 3.5 Components"))
  End If
  
  If i7x = 0 And i35 = 0 Then
    GetColumnIndex = fDefault
  Else
    If i7x = 0 Then i7x = 32000
    If i35 = 0 Then i35 = 32000
    If i7x < i35 Then GetColumnIndex = i7x Else GetColumnIndex = i35
  End If
End Function

Private Sub outOleForOlap(ByVal iServer As Boolean)
  If IsBex350Installed Then
    gColumnIndex = GetColumnIndex
  Else
    gColumnIndex = 2
  End If
  Call outPos(gOlapIndex, 1, 8, "OLE for OLAP Components")
  outEXEfilePos gOlapIndex + 1, gOlapPath, False, iServer               'mdrmdlg.dll
  outEXEfilePos gOlapIndex + 2, gOlapPath, False, iServer               'mdrmsap.dll
  outEXEfilePos gOlapIndex + 3, gOlapPath, False, iServer               'mdxpars.dll
  outEXEfilePos gOlapIndex + 4, gOlapPath, False, iServer               'saprfc.ini
  outEXEfilePos gOlapIndex + 5, gOlapPath, False, iServer               'scerrlkp.dll
  gColumnIndex = 2
End Sub

Private Sub outSapSharedComponents(ByVal fbServer As Boolean)
Dim sPath As String
  
  sPath = gSapSharedPath
  If fbServer Then
    If UCase(Right(gBex7Path, 4)) = "\BI\" Then
      sPath = Left(gBex7Path, Len(gBex7Path) - 3) & "System\SAP\"
    End If
  End If
  
  If IsBex750Installed Or IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed Then
    gColumnIndex = GetColumnIndexOfInstalledPatch(gBex7TextPatch, GetIndex("BI in SAP NetWeaver 2004s"))
  End If
  
  Call outPos(gSapSharedIndex, 1, 8, "SAP Shared")
  outEXEfilePos gSapSharedIndex + 1, sPath                              'convlib.dll
  outEXEfilePos gSapSharedIndex + 2, sPath                              'sapchart.ocx
  outEXEfilePos gSapSharedIndex + 3, sPath                              'sapfewut.dll
  outEXEfilePos gSapSharedIndex + 4, sPath                              'sapfilecache.dll
  outEXEfilePos gSapSharedIndex + 5, sPath                              'saplgmgr2.dll
  outEXEfilePos gSapSharedIndex + 6, sPath                              'sapmime.dll
  outEXEfilePos gSapSharedIndex + 7, sPath                              'wdtlog.ocx
  
  If IsBex750Installed Then
    outEXEfilePos gSapSharedIndex + 8, sPath                            'LogonControlEx.dll
    outEXEfilePos gSapSharedIndex + 9, sPath                            'SAPLogonCtrl.dll
    outEXEfilePos gSapSharedIndex + 10, sPath                           'SAPRfcWrapperU.dll
  End If
  
  gColumnIndex = 2
End Sub

Private Sub outSapGuiCoreComponents()
Dim iCount As Integer

  iCount = 1
  gColumnIndex = GetColumnIndex
  Call outPos(gSapGuiIndex, 1, 8, "SAP GUI core components")
  outEXEfilePos GetSapGuiRow(iCount), gSapPath                          'chart.ocx
  outEXEfilePos GetSapGuiRow(iCount), gSapPath                          'icdataflow.ocx
  outEXEfilePos GetSapGuiRow(iCount), gSapPath                          'icjoin.ocx
  iCount = iCount + 1
  outEXEfilePos GetSapGuiRow(iCount), gSapPath                          'sapgradp.ocx
  outCompPos GetSapGuiRow(iCount), "SAP.CalendarControl.1", True        'sapcalen.ocx
  outCompPos GetSapGuiRow(iCount), "SAPGraphics.Chart.1", True          'sapchart.ocx
  iCount = iCount + 1
  outSystemFilePos GetSapGuiRow(iCount), , True                         'sapbtmp.dll
  If Not IsSAPGUI750Installed Then
    outSystemFilePos GetSapGuiRow(iCount), , True                       'librfc32.dll   This line in Excel is not existing for 750
  End If
  iCount = iCount + 1
  outCompPos GetSapGuiRow(iCount), "SAP.LogonControl.1", True           'wdtlog.ocx
  outCompPos GetSapGuiRow(iCount), "SAP.TableTreeControl.1", True       'wdttree.ocx
  outCompPos GetSapGuiRow(iCount), "SAP.TableFactory.1", True           'wdtaocx.ocx
  outCompPos GetSapGuiRow(iCount), "SAP.DataProvider.1", True           'sapdatap.ocx
  iCount = iCount + 1
  outEXEfilePos GetSapGuiRow(iCount), gSapPath                          'sapfctrl.dll
  
  If (Not IsSAPGUI750Installed) And (Not IsSAPGUI740Installed) And (Not IsSAPGUI730Installed) Then
    outEXEfilePos GetSapGuiRow(iCount), gSapPath                        'sapfcust.exe
  Else
    iCount = iCount + 1
  End If
  
  outEXEfilePos GetSapGuiRow(iCount), gSapPath                          'sapfdraw.dll
  outEXEfilePos GetSapGuiRow(iCount), gSapPath                          'sapfdraw.dll
  outEXEfilePos GetSapGuiRow(iCount), gSapPath                          'sapfhook.dll
  gColumnIndex = 2
End Sub

Private Sub outServerSapGuiCoreComponents()
Dim iCount As Integer

  iCount = 1
  gColumnIndex = GetColumnIndex
  Call outPos(gSapGuiIndex, 1, 8, "SAP GUI core components")
  outEXEfilePos GetSapGuiRow(iCount), gControlsPath, True, True, gSapControlsPath       'chart.ocx
  outEXEfilePos GetSapGuiRow(iCount), gControlsPath, True, True, gSapControlsPath       'icdataflow.ocx
  outEXEfilePos GetSapGuiRow(iCount), gControlsPath, True, True, gSapControlsPath       'icjoin.ocx
  iCount = iCount + 1
  outEXEfilePos GetSapGuiRow(iCount), gControlsPath, True, True, gSapControlsPath       'sapgradp.ocx
  outEXEfilePos GetSapGuiRow(iCount), gControlsPath, True, True, gSapControlsPath       'sapcalen.ocx
  outEXEfilePos GetSapGuiRow(iCount), gSapChartPath, True, True, gSapControlsPath       'sapchart.ocx
  iCount = iCount + 1
  outEXEfilePos GetSapGuiRow(iCount), gSysPath, True, True                              'sapbtmp.dll
  If Not IsSAPGUI750Installed Then
    outEXEfilePos GetSapGuiRow(iCount), gSysPath, True, True                            'librfc32.dll
  End If
  iCount = iCount + 1
  outEXEfilePos GetSapGuiRow(iCount), gSapChartPath, True, True, gSapControlsPath       'wdtlog.ocx
  outEXEfilePos GetSapGuiRow(iCount), gControlsPath, True, True, gSapControlsPath       'wdttree.ocx
  outEXEfilePos GetSapGuiRow(iCount), gControlsPath, True, True, gSapControlsPath       'wdtaocx.ocx
  outEXEfilePos GetSapGuiRow(iCount), gControlsPath, True, True, gSapControlsPath       'sapdatap.ocx
  iCount = iCount + 1
  outEXEfilePos GetSapGuiRow(iCount), gSapPath, True, True, , , , False                 'sapfctrl.dll
  
  If (Not IsSAPGUI750Installed) And (Not IsSAPGUI740Installed) And (Not IsSAPGUI730Installed) Then
    outEXEfilePos GetSapGuiRow(iCount), gSapPath, True, True                            'sapfcust.exe
  Else
    iCount = iCount + 1
  End If
  
  outEXEfilePos GetSapGuiRow(iCount), gSapPath, True, True                              'sapfdraw.dll
  outEXEfilePos GetSapGuiRow(iCount), gSapPath, True, True                              'sapfdraw.dll
  outEXEfilePos GetSapGuiRow(iCount), gSapPath, True, True                              'sapfhook.dll
  gColumnIndex = 2
End Sub

Private Sub outAdditionalComponents(ByVal iServer As Boolean)
  If IsBex350Installed Then gColumnIndex = GetColumnIndexOfInstalledPatch(gBex35TextPatch, GetIndex("BW 3.5 Components"))
  Call outPos(gAddCompIndex, 1, 8, "Additional components")
  
  If iServer Then
    outEXEfilePos gAddCompIndex + 1, gControlsPath, True, True, gSapControlsPath, , , False   'awkone.ocx
    outEXEfilePos gAddCompIndex + 2, gControlsPath, True, True, gSapControlsPath, , , False   'formx.ocx
    outEXEfilePos gAddCompIndex + 3, gControlsPath, True, True, gSapControlsPath, , , False   'sizerone.ocx
    outEXEfilePos gAddCompIndex + 4, gControlsPath, True, True, gSapControlsPath, , , False   'otxrt.dll
    outEXEfilePos gAddCompIndex + 5, gControlsPath, True, True, gSapControlsPath, , , False   'vsflex7l.ocx
    outEXEfilePos gAddCompIndex + 6, gControlsPath, True, True, gSapControlsPath, , , False   'vsocx32.ocx
    outEXEfilePos gAddCompIndex + 7, gControlsPath, True, True, gSapControlsPath, , , False   'vsocx6.ocx
  Else
    outCompPos gAddCompIndex + 1, "vsAwk.vsAwk"                           ' awkone.ocx
    outCompPos gAddCompIndex + 2, "Otx.OtxToolBar.1"                      ' formx.ocx
    outCompPos gAddCompIndex + 3, "TabOne.TabOne"                         ' sizerone.ocx
    outCompPos gAddCompIndex + 4, "otx.CollectionX"                       ' otxrt.dll
    outCompPos gAddCompIndex + 5, "VSFlexGrid.VSFlexGrid"                 ' vsflex7l.ocx
    outCompPos gAddCompIndex + 6, "VSOCX.VselasticCtrl.1"                 ' vsocx32.ocx
    outCompPos gAddCompIndex + 7, "vsElastic.vsElastic"                   ' vsocx6.ocx
  End If
  gColumnIndex = 2
End Sub

Private Sub outSyncfusionComponents()
  If IsBex750Installed Or IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed Then
    gColumnIndex = GetColumnIndexOfInstalledPatch(gBex7TextPatch, GetIndex("BI in SAP NetWeaver 2004s"))
  End If
  
  Call outPos(gSyncIndex, 1, 8, "Syncfusion components")
  outEXEfilePos gSyncIndex + 1, gBex7Path, , , , , "Syncfusion.Core.Licensing.FusionLicenseProvider"        'Syncfusion.Core.dll
  outEXEfilePos gSyncIndex + 2, gBex7Path, , , , , "Syncfusion.GridBaseAssembly"                            'Syncfusion.Grid.Base.dll
  outEXEfilePos gSyncIndex + 3, gBex7Path, , , , , "Syncfusion.GridWindowsAssembly"                         'Syncfusion.Grid.Windows.dll
  outEXEfilePos gSyncIndex + 4, gBex7Path, , , , , "Syncfusion.SharedBaseAssembly"                          'Syncfusion.Shared.Base.dll
  outEXEfilePos gSyncIndex + 5, gBex7Path, , , , , "Syncfusion.SharedWindowsAssembly"                       'Syncfusion.Shared.Windows.dll
  outEXEfilePos gSyncIndex + 6, gBex7Path, , , , , "Syncfusion.ToolsBaseAssembly"                           'Syncfusion.Tools.Base.dll
  outEXEfilePos gSyncIndex + 7, gBex7Path, , , , , "Syncfusion.ToolsWindowsAssembly"                        'Syncfusion.Tools.Windows.dll
  outEXEfilePos gSyncIndex + 8, gBex7Path, , , , , "Syncfusion.EditWindowsAssembly"                         'Syncfusion.Edit.Windows.dll
  gColumnIndex = 2
End Sub

Private Sub outRegistyEntreesSection()
Dim sValue1 As String
Dim sValue2 As String
  
  If gRegistryIndex = 0 Then Exit Sub
  Call outPos(gRegistryIndex, 1, 8, "Registry Entrees")
  outRegistryEntrees gRegistryIndex + 1   'Regional Options (RO): Country-ID
  outRegistryEntrees gRegistryIndex + 2   'RO: Numbers: Decimal symbol
  outRegistryEntrees gRegistryIndex + 3   'RO: Numbers: Thousand separator symbol
  outRegistryEntrees gRegistryIndex + 4   'RO: Currency: Decimal symbol
  outRegistryEntrees gRegistryIndex + 5   'RO: Currency: Thousand separator symbol
  outRegistryEntrees gRegistryIndex + 6   'RO: Date: Short date format
  outRegistryEntrees gRegistryIndex + 7   'RO: Date: Long date format
  outRegistryEntrees gRegistryIndex + 8   'RO: Date: Date seperator
  
  sValue1 = GetRegistryEntrees(gRegistryIndex + 9, 3, 4, 2, False, False)
  sValue2 = GetRegistryEntrees(gRegistryIndex + 9, 3, 4, 5, False, False) ' "Default")
  Call outPos(gRegistryIndex + 9, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(gRegistryIndex + 9, 1).Value)
  If (Val(sValue1) + Val(sValue2)) > 1 Then
    Call outPos(gRegistryIndex + 9, 2, 0, "Enabled")
  Else
    Call outPos(gRegistryIndex + 9, 2, 0, "Disabled")
  End If
  
  outRegistryEntrees gRegistryIndex + 10, , , , True 'TC: Security Settings
End Sub

Private Sub outMicrosoftCoreComponents()
  If IsBex750Installed Or IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed Then
    gColumnIndex = GetColumnIndexOfInstalledPatch(gBex7TextPatch, GetIndex("BI in SAP NetWeaver 2004s"))
  ElseIf IsBex350Installed Then
    gColumnIndex = GetColumnIndexOfInstalledPatch(gBex35TextPatch, GetIndex("BW 3.5 Components"))
  End If
    
  Call outPos(gMsIndex, 1, 8, "Microsoft core components")
  If IsBex350Installed Then
    outCompPos gMsIndex + 1, "DHTMLEdit.DHTMLEdit"                    ' dhtmled.ocx
  End If
  outSystemFilePos gMsIndex + 2, True                                 ' mfc42.dll
  outCompPos gMsIndex + 3, "MSFlexGridLib.MSFlexGrid"                 ' msflxgrd.ocx
  outSystemFilePos gMsIndex + 4, True                                 ' msvcp60.dll
  outSystemFilePos gMsIndex + 5, True                                 ' msvcrt.dll
  outSystemFilePos gMsIndex + 6, True                                 ' msvcrt40.dll
  outSystemFilePos gMsIndex + 7, True                                 ' oleaut32.dll
  outSystemFilePos gMsIndex + 8, True                                 ' olepro32.dll
  outSystemFilePos gMsIndex + 9, True                                 ' stdole2.tlb
  outCompPos gMsIndex + 10, "HTML.HostEncode"                         ' scrrun.dll
  If IsBex350Installed Then
    outCompPos gMsIndex + 11, "TriEditParse.TriEditParse"             ' triedit.dll
    outSystemFilePos gMsIndex + 12, True                              ' richtx32.ocx
  End If

  If IsBex750Installed Or IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed Then
    outEXEfilePos gMsIndex + 14, gBex7Path, , , , , , False, 2        ' ADODB.dll
    outEXEfilePos gMsIndex + 15, gBex7Path, , , , , , False, 2        ' dte.olb
    outEXEfilePos gMsIndex + 16, gBex7Path, , , , , , False, 2        ' EnvDTE.dll
    outEXEfilePos gMsIndex + 17, gBex7Path, , , , , , False, 2        ' Microsoft.mshtml.dll
    outEXEfilePos gMsIndex + 18, gBex7Path, , , , , , False, 2        ' Microsoft.StdFormat.dll
    outEXEfilePos gMsIndex + 19, gBex7Path, , , , , , False, 2        ' Microsoft.VisualBasic.Compatibility.Data.dll
    outEXEfilePos gMsIndex + 20, gBex7Path, , , , , , False, 2        ' Microsoft.VisualBasic.Compatibility.dll
    outEXEfilePos gMsIndex + 21, gBex7Path, , , , , , False, 2        ' MSDATASRC.dll
    outEXEfilePos gMsIndex + 22, gBex7Path, , , , , , False, 2        ' MSO.DLL
    outEXEfilePos gMsIndex + 23, gBex7Path, , , , , , False, 2        ' msoutl.olb
    outEXEfilePos gMsIndex + 24, gBex7Path, , , , , , False, 2        ' Office.dll
    outEXEfilePos gMsIndex + 25, gBex7Path, , , , , , False, 2        ' stdole.dll
    outEXEfilePos gMsIndex + 26, gBex7Path, , , , , , False, 2        ' VSLangProj.dll
  End If
  gColumnIndex = 2
End Sub

Private Sub outMicrosoftDotNetFramework()
Dim colFramework As Collection
Dim sTmp As String
Dim iLoop As Integer
  
  If (IsBex750Installed Or IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed) And (gMsDotNetFrameworkIndex > 0) Then
    Set colFramework = GetAllInstalledDotNetFrameworks
    If Not colFramework Is Nothing Then
      If colFramework.Count > 0 Then
        Call outPos(gMsDotNetFrameworkIndex, 1, 8, "Microsoft .Net Framework")
        For iLoop = colFramework.Count To 1 Step -1
          If sTmp <> vbNullString Then sTmp = sTmp & "; "
          sTmp = sTmp & colFramework.Item(iLoop)
        Next
        Call outPos(gMsDotNetFrameworkIndex, 2, 8, sTmp)
      End If
    End If
  End If
End Sub

Private Sub outPreCalcServers(ByVal fsStartRow As Integer)
Dim colServers As Collection
Dim sTmp As String
Dim iLoop As Integer
Dim sServer As String
  
  Set colServers = GetAllLocalPreCalcServers
  If Not colServers Is Nothing Then
    Call outPos(fsStartRow, 1, 8, "PreCalc-Servers")
    Call outPos(fsStartRow, 2, 8, "GWHOST (IP)")
    Call outPos(fsStartRow, 3, 8, "GWSERVICE (Port)")
    Call outPos(fsStartRow, 4, 8, "PROGID")
      
    If colServers.Count = 0 Then
      Call outPos(fsStartRow, 1, 4, "Error: Please register at least one Pre-Calc-Instance and execute this Check-Tool again.")
      Call Range(Cells(fsStartRow, 1), Cells(fsStartRow, 3)).Merge
    Else
      For iLoop = colServers.Count To 1 Step -1
        sServer = colServers.Item(iLoop)
        If sServer = vbNullString Then
          Call outPos(fsStartRow + iLoop, 1, 0, "<empty>")
        Else
          Call outPos(fsStartRow + iLoop, 1, 0, sServer)
          
          'GWHOST
          sTmp = Trim(RegistryGetString("SAP.BusinessExplorer.Analyzer\BW_PRECALC\Servers\" & sServer, "GWHOST", hk_CLASSES_ROOT))
          If sTmp = vbNullString Then sTmp = "<no data>"
          Call outPos(fsStartRow + iLoop, 2, 0, sTmp)
          
          'GWSERVICE
          sTmp = Trim(RegistryGetString("SAP.BusinessExplorer.Analyzer\BW_PRECALC\Servers\" & sServer, "GWSERVICE", hk_CLASSES_ROOT))
          If sTmp = vbNullString Then sTmp = "<no data>"
          Call outPos(fsStartRow + iLoop, 3, 0, sTmp)
        
          'PROGID
          sTmp = Trim(RegistryGetString("SAP.BusinessExplorer.Analyzer\BW_PRECALC\Servers\" & sServer, "PROGID", hk_CLASSES_ROOT))
          If sTmp = vbNullString Then sTmp = "<no data>"
          Call outPos(fsStartRow + iLoop, 4, 0, sTmp)
        End If
      Next
    End If
  End If
End Sub

Private Sub outServerMicrosoftCoreComponents()
Dim lVersion As String
  
  If IsBex750Installed Or IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed Then
    gColumnIndex = GetColumnIndexOfInstalledPatch(gBex7TextPatch, GetIndex("BI in SAP NetWeaver 2004s"))
  ElseIf IsBex350Installed Then
    gColumnIndex = GetColumnIndexOfInstalledPatch(gBex35TextPatch, GetIndex("BW 3.5 Components"))
  End If
    
  Call outPos(gMsIndex, 1, 8, "Microsoft core components")
  If IsBex350Installed Then
    Call outPos(gMsIndex + 1, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(gMsIndex + 1, 1).Value)
         outPos gMsIndex + 1, 2, 5, "Should be installed with Windows 7 and older (SAP note 1391689)"         'dhtmled.ocx
  End If
    
  lVersion = GetFileVersion(gSapPath + "sapfcust.exe")
  If lVersion = pcsNoVersion Then lVersion = "6200"
  If CInt(Left$(lVersion, 4)) >= 6200 Then
    Call outPos(gMsIndex + 2, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(gMsIndex + 2, 1).Value)
    Call outPos(gMsIndex + 2, 2, 5, "Should be installed with Windows")                                       'mfc42.dll
    Call outPos(gMsIndex + 3, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(gMsIndex + 3, 1).Value)
    Call outPos(gMsIndex + 3, 2, 5, "Should be installed with Windows")                                       'msflxgrd.ocx
    Call outPos(gMsIndex + 4, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(gMsIndex + 4, 1).Value)
    Call outPos(gMsIndex + 4, 2, 5, "Should be installed with Windows")                                       'msvcp60.dll
    Call outPos(gMsIndex + 5, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(gMsIndex + 5, 1).Value)
    Call outPos(gMsIndex + 5, 2, 5, "Should be installed with Windows")                                       'msvcrt.dll
    Call outPos(gMsIndex + 6, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(gMsIndex + 6, 1).Value)
    Call outPos(gMsIndex + 6, 2, 5, "Should be installed with Windows")                                       'msvcrt40.dll
    Call outPos(gMsIndex + 7, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(gMsIndex + 7, 1).Value)
    Call outPos(gMsIndex + 7, 2, 5, "Should be installed with Windows")                                       'oleaut32.dll
    Call outPos(gMsIndex + 8, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(gMsIndex + 8, 1).Value)
    Call outPos(gMsIndex + 8, 2, 5, "Should be installed with Windows")                                       'olepro32.dll
    Call outPos(gMsIndex + 9, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(gMsIndex + 9, 1).Value)
    Call outPos(gMsIndex + 9, 2, 5, "Should be installed with Windows")                                       'stdole2.tlb
    Call outPos(gMsIndex + 10, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(gMsIndex + 10, 1).Value)
    Call outPos(gMsIndex + 10, 2, 5, "Should be installed with Windows")                                      'scrrun.dll
  Else
    outEXEfilePos gMsIndex + 2, gSysPath, True, True, , , , False                                             'mfc42.dll
    outEXEfilePos gMsIndex + 3, gSysPath, True, True, , , , False                                             'msflxgrd.ocx
    outEXEfilePos gMsIndex + 4, gSysPath, True, True, , , , False                                             'msvcp60.dll
    outEXEfilePos gMsIndex + 5, gSysPath, True, True, , , , False                                             'msvcrt.dll
    outEXEfilePos gMsIndex + 6, gSysPath, True, True, , , , False                                             'msvcrt40.dll
    outEXEfilePos gMsIndex + 7, gSysPath, True, True, , , , False                                             'oleaut32.dll
    outEXEfilePos gMsIndex + 8, gSysPath, True, True, , , , False                                             'olepro32.dll
    outEXEfilePos gMsIndex + 9, gSysPath, True, True, , , , False                                             'stdole2.tlb
    outEXEfilePos gMsIndex + 10, gSysPath, True, True, , , , False                                            'scrrun.dll
  End If
  
  
'  Call outPos(gMsIndex + 3, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(gMsIndex + 3, 1).Value)
'  Call outPos(gMsIndex + 11, 2, 5, "Should be installed with Internet Explorer")   ' triedit.dll
'  outEXEfilePos gMsIndex + 12, gSysPath, True, True
    
  If IsBex350Installed Then
    Call outPos(gMsIndex + 11, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(gMsIndex + 11, 1).Value)
    Call outPos(gMsIndex + 11, 2, 5, "Should be installed with Windows")                            'triedit.dll
    Call outPos(gMsIndex + 11, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(gMsIndex + 11, 1).Value)
    Call outPos(gMsIndex + 11, 2, 5, "Should be installed with Windows")                            'richtx32.dll
  End If
    
    
  If IsBex750Installed Or IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed Then
    outEXEfilePos gMsIndex + 14, gBex7Path, , , , False, 2            ' ADODB.dll
    outEXEfilePos gMsIndex + 15, gBex7Path, , , , False, 2            ' dte.olb
    outEXEfilePos gMsIndex + 16, gBex7Path, , , , False, 2            ' EnvDTE.dll
    outEXEfilePos gMsIndex + 17, gBex7Path, , , , False, 2            ' Microsoft.mshtml.dll
    outEXEfilePos gMsIndex + 18, gBex7Path, , , , False, 2            ' Microsoft.StdFormat.dll
    outEXEfilePos gMsIndex + 19, gBex7Path, , , , False, 2            ' Microsoft.VisualBasic.Compatibility.Data.dll
    outEXEfilePos gMsIndex + 20, gBex7Path, , , , False, 2            ' Microsoft.VisualBasic.Compatibility.dll
    outEXEfilePos gMsIndex + 21, gBex7Path, , , , False, 2            ' MSDATASRC.dll
    outEXEfilePos gMsIndex + 22, gBex7Path, , , , False, 2            ' MSO.DLL
    outEXEfilePos gMsIndex + 23, gBex7Path, , , , False, 2            ' msoutl.olb
    outEXEfilePos gMsIndex + 24, gBex7Path, , , , False, 2            ' Office.dll
    outEXEfilePos gMsIndex + 25, gBex7Path, , , , False, 2            ' stdole.dll
    outEXEfilePos gMsIndex + 26, gBex7Path, , , , False, 2            ' VSLangProj.dll
  End If
  gColumnIndex = 2
End Sub

Public Sub outRegistryEntrees( _
                 ByVal Row As Integer, _
        Optional ByVal ColumnClass As Integer = 3, _
        Optional ByVal ColomnRowPath As Integer = 4, _
        Optional ByVal ColumnValueName As Integer = 2, _
        Optional ByVal fbEnumerateDataValues As Boolean = False, _
        Optional ByVal fbIsString As Boolean = True)
Dim lOut As String
  lOut = GetRegistryEntrees(Row, ColumnClass, ColomnRowPath, ColumnValueName, fbEnumerateDataValues, fbIsString)
  
  Call outPos(Row, 1, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, 1).Value)
  Call outPos(Row, 2, 0, lOut)
  Call outPos(Row, 3, 0, ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, 5).Value)
End Sub

Public Function GetRegistryEntrees( _
                    ByVal Row As Integer, _
                    ByVal ColumnClass As Integer, _
                    ByVal ColomnRowPath As Integer, _
                    ByVal ColumnValueName As Integer, _
                    ByVal fbEnumerateDataValues As Boolean, _
                    ByVal fbIsString As Boolean) As String
Dim lHKey As HKeyEnum
Dim lClass As String
Dim lPath As String
Dim lValueName As String
Dim lOut As String

  lClass = ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, ColumnClass).Value
  Select Case UCase(lClass)
    Case "HKEY_CLASSES_ROOT":   lHKey = hk_CLASSES_ROOT
    Case "HKEY_CURRENT_CONFIG": lHKey = hk_CURRENT_CONFIG
    Case "HKEY_CURRENT_USER":   lHKey = hk_CURRENT_USER
    Case "HKEY_LOCAL_MACHINE":  lHKey = hk_LOCAL_MACHINE
    Case "HKEY_USERS":          lHKey = hk_USERS
    Case Else:                  lHKey = hk_NotDefined
  End Select
    
  lPath = ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, ColomnRowPath).Value
  
  'Specail case for "TC: Security Settings"
  If Len(lPath) > 0 Then
    If InStr(lPath, "<ExcelVersion>") > 0 Then
      lPath = Replace(lPath, "<ExcelVersion>", Application.version)
    End If
  End If
  
  If lHKey = hk_NotDefined Then Exit Function
  If lPath = vbNullString Then Exit Function
  
  If Not fbEnumerateDataValues Then
    lValueName = ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, ColumnValueName).Value
    If lValueName = vbNullString Then Exit Function
    lOut = RegistryGetString(lPath, lValueName, lHKey, fbIsString)
  Else
    lOut = RegistryEnumerateDataValues(lPath, lHKey)
  End If
  GetRegistryEntrees = lOut
End Function

'iColumnIndex: E.g. for none SAP files
Public Sub outEXEfilePos( _
                 ByVal Row As Integer, _
                 ByVal path As String, _
        Optional ByVal system As Boolean, _
        Optional ByVal server As Boolean, _
        Optional ByVal path2 As String, _
        Optional ByVal VersionPrefix As String, _
        Optional ByVal GacProgID As String = vbNullString, _
        Optional ByVal iSignatureCheck As Boolean = True, _
        Optional ByVal iColumnIndex As Integer = 0)
Dim lColumnIndex As Integer: lColumnIndex = IIf(iColumnIndex <> 0, iColumnIndex, gColumnIndex)
Dim lFileName As String: lFileName = ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, 1).Value
Dim lFilePathName As String: lFilePathName = path & lFileName
Dim lVersionReal As String
Dim lVersionPlan As String: lVersionPlan = ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, lColumnIndex).Value
Dim lDestPath As String: lDestPath = ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, 4).Value
Dim lSourcePath As String: lSourcePath = ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, 5).Value
Dim lError As Boolean
Dim lFileLength As Long
Dim lLocatedInGAC As Boolean
Dim lPathGAC As String
Dim lFound As Boolean
Dim bError As Boolean
Dim tmpCol As Collection
Dim lngPattern As Long: lngPattern = xlSolid
Dim lOtherGacVersions As String
Dim lTmp As String
Dim lFile As String
Dim lLoop As Integer
Dim lIsOptional As Boolean

  lLocatedInGAC = False
  lPathGAC = vbNullString
  lVersionPlan = LCase(Trim(lVersionPlan))
  If IsNotAvailable(lVersionPlan) Then
    gRange.Rows(Row).EntireRow.Hidden = True
    Exit Sub
  End If
  If CheckFileExistsOnly(lVersionPlan) Then
    lVersionPlan = vbNullString
  End If
  
  lIsOptional = CheckFileIsOptional(lVersionPlan)
  lTmp = IIf(lIsOptional, vbNullString, lVersionPlan)
  Call outPos(Row, 1, 0, lFileName)
  Call outPos(Row, 3, 0, lTmp)
  
  On Error Resume Next
  lFileLength = FileLen(lFilePathName)
  If lFileLength = 0 Then
    lFilePathName = path2 & lFileName
    lFileLength = FileLen(lFilePathName)
    
    If lFileLength = 0 Then
      lTmp = GetFileVersion(lFilePathName)
      If (lTmp = pcsNoVersion) And lIsOptional Then
        'Optional files that are not found
        Call outPos(Row, 2, 7, "Optional (not found)")
        If server Then
          Call outComment(Row, gCommentsIndex + 5, lFileName, lFileName, lSourcePath, lDestPath, WinPath, lFileName)
        Else
          Call outComment(Row, gCommentsIndex + 11, lFileName)
        End If
      Else
        Set tmpCol = GetFileLocationFromGacFolder(lFileName)
        If Not tmpCol Is Nothing Then
          For lLoop = 1 To tmpCol.Count
            lLocatedInGAC = True
            lPathGAC = "GAC (GetFileLocationFromGacFolder)"
            lFile = tmpCol.Item(lLoop)
            lVersionReal = GetFileVersion(lFile)
            If lVersionReal <> lVersionPlan Then
              If lOtherGacVersions <> vbNullString Then lOtherGacVersions = lOtherGacVersions & "; "
              lOtherGacVersions = lOtherGacVersions & lVersionReal
            End If
          Next
        End If
      End If
    End If
    
    If (Not lIsOptional) And (lFileLength = 0) And (GacProgID <> vbNullString) And (Not lLocatedInGAC) Then
      lFilePathName = GetFileLocationFromGacViaRegistry(GacProgID)
      If lFilePathName <> vbNullString Then
        lLocatedInGAC = True
        lPathGAC = lFilePathName
      Else
        lVersionReal = GetVersionFromGacViaRegistry(GacProgID)
        If lVersionReal = vbNullString Then
          'Only in GAC; not in Registry and not in "%PROGRAMFILES(X86)%\SAP\Business Explorer\BI"
          lFilePathName = WinPath & lDestPath & lFileName
          lFileLength = FileLen(lFilePathName)
          If lFileLength > 0 Then
            lLocatedInGAC = True
            lPathGAC = lFilePathName
          ElseIf GacProgID <> vbNullString Then
            If ExistsInGACviaGACChangeNotification(GacProgID, lVersionPlan, lOtherGacVersions) Then
              lLocatedInGAC = True
              lPathGAC = "GAC (2)"
            End If
          End If
        Else
          If lVersionReal <> vbNullString Then
            lLocatedInGAC = True
            lPathGAC = "GAC"
          End If
        End If
      End If
    End If
  End If
  
  If lVersionReal = vbNullString Then
    lVersionReal = GetFileVersion(lFilePathName)
    lFound = OutLengthDatePos(Row, lFilePathName)
  Else
    lFound = True
  End If
  
  If lFound Then
    If lVersionPlan = vbNullString Then
      If iSignatureCheck And (Not lLocatedInGAC) Then lngPattern = IIf(CheckSignature(lFilePathName, bError), xlSolid, xlHorizontal)   'Checking Signaure
      Call outPos(Row, 2, 5, "OK", , lLocatedInGAC Or (lOtherGacVersions <> vbNullString), lngPattern)
    Else
      If lVersionReal = lVersionPlan Then
        If iSignatureCheck And (Not lLocatedInGAC) Then lngPattern = IIf(CheckSignature(lFilePathName, bError), xlSolid, xlHorizontal)   'Checking Signaure
        lTmp = lVersionReal
        If lLocatedInGAC And (lOtherGacVersions <> vbNullString) And (lOtherGacVersions <> lTmp) Then lTmp = lTmp & "; " & lOtherGacVersions
        Call outPos(Row, 2, 5, lTmp, , lLocatedInGAC Or (lOtherGacVersions <> vbNullString), lngPattern)
      Else
        If lVersionReal = pcsNoVersion Then
          'check file size
          If lFileLength > 0 Then
            If iSignatureCheck And (Not lLocatedInGAC) Then lngPattern = IIf(CheckSignature(lFilePathName, bError), xlSolid, xlHorizontal)   'Checking Signaure
            If (Val(lVersionPlan) = lFileLength) Or lIsOptional Then
              Call outPos(Row, 2, 5, "Size: " & lFileLength, , lLocatedInGAC Or (lOtherGacVersions <> vbNullString), lngPattern)
            Else
              Call outPos(Row, 2, IIf(lIsOptional, 5, 6), "Size: " & lFileLength, , lLocatedInGAC Or (lOtherGacVersions <> vbNullString), lngPattern)
            End If
          Else
            If system Then
              Call outPos(Row, 2, 7, "Not found", , lLocatedInGAC Or (lOtherGacVersions <> vbNullString))
              If Not server Then
                Call outComment(Row, gCommentsIndex + 21, lFileName)
              Else
                Call outComment(Row, gCommentsIndex + 5, lFileName, lFileName, lSourcePath, lDestPath, WinPath, lFileName)
              End If
            Else
              Call outPos(Row, 2, IIf(lIsOptional, 5, 4), "Not found", , lLocatedInGAC Or (lOtherGacVersions <> vbNullString))
              If Not server Then
                Call outComment(Row, gCommentsIndex + 21, lFileName)
              Else
                Call outComment(Row, gCommentsIndex + 4, lFileName, lFileName, lSourcePath, lDestPath, WinPath, lFileName)
              End If
            End If
          End If          'lFileLength > 0
        Else
          If CompareVersion(lVersionReal, lVersionPlan, VersionPrefix, lError) = 0 Then
            If lError Then
              lngPattern = xlSolid
            Else
              If iSignatureCheck And (Not lLocatedInGAC) Then lngPattern = IIf(CheckSignature(lFilePathName, bError), xlSolid, xlHorizontal)   'Checking Signaure
            End If
            Call outPos(Row, 2, IIf(lError, 9, 5), lVersionReal, , lLocatedInGAC Or (lOtherGacVersions <> vbNullString), lngPattern)
          Else
            If CompareVersion(lVersionReal, lVersionPlan, VersionPrefix) > 0 Then
              If iSignatureCheck And (Not lLocatedInGAC) Then lngPattern = IIf(CheckSignature(lFilePathName, bError), xlSolid, xlHorizontal)   'Checking Signaure
              Call outPos(Row, 2, 6, lVersionReal, , lLocatedInGAC Or (lOtherGacVersions <> vbNullString), lngPattern)
              If Not server Then
                Call outComment(Row, gCommentsIndex + 6, lFileName, lFileName, lSourcePath, lDestPath, WinPath, lFileName)
              Else
                Call outComment(Row, gCommentsIndex + 18, lFileName)
              End If
            Else
              If Not system Then
                lTmp = lVersionReal
                If lLocatedInGAC And (lOtherGacVersions <> vbNullString) And (lOtherGacVersions <> lTmp) Then lTmp = lTmp & "; " & lOtherGacVersions
                Call outPos(Row, 2, IIf(lIsOptional, 7, 4), lTmp, , lLocatedInGAC Or (lOtherGacVersions <> vbNullString))
                If server Then
                  Call outComment(Row, gCommentsIndex + 19, lFileName)
                Else
                  Call outComment(Row, gCommentsIndex + 7, lFileName, lFileName, lSourcePath, lDestPath, WinPath, lFileName)
                End If
              Else
                If iSignatureCheck And (Not lLocatedInGAC) Then lngPattern = IIf(CheckSignature(lFilePathName, bError), xlSolid, xlHorizontal)   'Checking Signaure
                Call outPos(Row, 2, 7, lVersionReal, , lLocatedInGAC Or (lOtherGacVersions <> vbNullString), lngPattern)
                If server Then
                  Call outComment(Row, gCommentsIndex + 19, lFileName)
                Else
                  Call outComment(Row, gCommentsIndex + 8, lFileName, lFileName, lSourcePath, lDestPath, WinPath, lFileName)
                End If
              End If   'system = False Then
            End If
          End If
        End If
      End If
    End If
    Call outPos(Row, 4, 0, IIf(lLocatedInGAC, lPathGAC, path))
    If IsOutputCopyright Then Call outPos(Row, 9, 0, GetFileCopyright(lFilePathName))  'CopyRight
  Else
    If lVersionPlan = "Should not be installed" Then
      If iSignatureCheck And (Not lLocatedInGAC) Then lngPattern = IIf(CheckSignature(lFilePathName, bError), xlSolid, xlHorizontal)   'Checking Signaure
      Call outPos(Row, 2, 5, lVersionPlan, , lLocatedInGAC Or (lOtherGacVersions <> vbNullString), lngPattern)
      
      'Comment
      If (Not server) And (GacProgID = vbNullString) Then
        If ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, 4).Value = "X" Then
          outComment Row, gCommentsIndex + 9, lFileName, lFileName, lDestPath, lFileName, lFileName, lDestPath
        Else
          outComment Row, gCommentsIndex + 10, lFileName, lFileName, lDestPath
        End If
      Else
        outComment Row, gCommentsIndex + 22, lFileName, lFileName, lDestPath, lFileName
      End If
    ElseIf lIsOptional Then
      'Do Nothing
    Else
      If lOtherGacVersions <> vbNullString Then
        Call outPos(Row, 2, 4, lOtherGacVersions, , lLocatedInGAC Or (lOtherGacVersions <> vbNullString))
      Else
        Call outPos(Row, 2, 4, "Not found", , lLocatedInGAC Or (lOtherGacVersions <> vbNullString))
      End If
      
      'Comment
      If (Not server) And (GacProgID = vbNullString) Then
        If ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, 4).Value = "X" Then
          outComment Row, gCommentsIndex + 9, lFileName, lFileName, lDestPath, lFileName, lFileName, lDestPath
        Else
          outComment Row, gCommentsIndex + 10, lFileName, lFileName, lDestPath
        End If
      Else
        outComment Row, gCommentsIndex + 20, lFileName
      End If
    End If
  End If
End Sub

'Get File-Location from GAC via fix path
Private Function GetFileLocationFromGacViaPath(ByVal iGacProgID As String, ByVal iPath As String) As String
Dim sRet As String
Dim sClsId As String

  sRet = vbNullString
  iGacProgID = Trim(iGacProgID)
  If iGacProgID <> vbNullString Then
    sClsId = RegistryGetString(iGacProgID & "\CLSID", , hk_CLASSES_ROOT)
    sRet = RegistryGetString("CLSID\" & sClsId & "\InprocServer32", "CodeBase", hk_CLASSES_ROOT)
    If LCase(Left(sRet, 8)) = "file:///" Then
      sRet = Right(sRet, Len(sRet) - 8)
    End If
  End If
  GetFileLocationFromGacViaPath = sRet
End Function

'Get File-Location from GAC via Registry
Private Function GetFileLocationFromGacViaRegistry(ByVal iGacProgID As String) As String
Dim lClsId As String
Dim sRet As String

  sRet = vbNullString
  iGacProgID = Trim(iGacProgID)
  If iGacProgID <> vbNullString Then
    lClsId = RegistryGetString(iGacProgID & "\CLSID", , hk_CLASSES_ROOT)
    sRet = RegistryGetString("CLSID\" & lClsId & "\InprocServer32", "CodeBase", hk_CLASSES_ROOT)
    If LCase(Left(sRet, 8)) = "file:///" Then
      sRet = Right(sRet, Len(sRet) - 8)
    End If
  End If
  GetFileLocationFromGacViaRegistry = sRet
End Function

'Get Version from GAC via Registry
Private Function GetVersionFromGacViaRegistry(ByVal iGacProgID As String) As String
Dim lClsId As String
Dim sRet As String

  sRet = vbNullString
  iGacProgID = Trim(iGacProgID)
  If iGacProgID <> vbNullString Then
    lClsId = RegistryGetString(iGacProgID & "\CLSID", , hk_CLASSES_ROOT)
    sRet = RegistryNextSubTree("CLSID\" & lClsId & "\InprocServer32", hk_CLASSES_ROOT)
  End If
  GetVersionFromGacViaRegistry = sRet
End Function

'Public Sub myTest()
'Dim tmpCol As Collection
'Dim lLoop As Integer
'Dim lFile As String
'Dim lOtherGacVersions As String
'Dim lTmp As String
'Dim lVersionReal As String
'  lVersionReal = "4.402.1.51"
'  Set tmpCol = GetFileLocationFromGacFolder("Syncfusion.Edit.windows.dll")
'  If Not tmpCol Is Nothing Then
'    For lLoop = 1 To tmpCol.Count
'      lFile = tmpCol.Item(lLoop)
'      lTmp = GetFileVersion(lFile)
'      If lTmp = lVersionReal Then
'        lVersionReal = lTmp
'      Else
'        If lOtherGacVersions <> vbNullString Then lOtherGacVersions = lOtherGacVersions & "; "
'        lOtherGacVersions = lOtherGacVersions & lTmp
'      End If
'    Next
'  End If
'End Sub

'Could return more than one location
Private Function GetFileLocationFromGacFolder(ByVal iFileName As String) As Collection
Dim lFileNameOnly As String
Dim lGacFolder As String
Dim lWinFolder As String
Dim colRet As Collection
Const cFolderGacOld As String = "assembly\GAC_MSIL\"
Const cFolderGacNew As String = "Microsoft.NET\assembly\GAC_MSIL\"
  
  If Trim(iFileName) = vbNullString Then
    Debug.Assert False         'Breakpoint
    Set GetFileLocationFromGacFolder = Nothing
    Exit Function
  End If
  
  lWinFolder = WinPath
  If lWinFolder = vbNullString Then
    Debug.Assert False         'Breakpoint
    Set GetFileLocationFromGacFolder = Nothing
    Exit Function
  End If
  If Right(lWinFolder, 1) <> "\" Then lWinFolder = lWinFolder & "\"
  
  Set colRet = New Collection
  
  lFileNameOnly = GetFilePartOnlyFile(iFileName)
  lGacFolder = lWinFolder & cFolderGacOld & lFileNameOnly
  Call GetFileLocationFromGacFolderInternal( _
          fCollection:=colRet, _
          iFileNameOnly:=lFileNameOnly, _
          iFolderGac:=lGacFolder)

  lGacFolder = lWinFolder & cFolderGacNew & lFileNameOnly
  Call GetFileLocationFromGacFolderInternal( _
          fCollection:=colRet, _
          iFileNameOnly:=lFileNameOnly, _
          iFolderGac:=lGacFolder)
  
  If colRet.Count > 0 Then
    Set GetFileLocationFromGacFolder = colRet
  Else
    Set GetFileLocationFromGacFolder = Nothing
  End If
  Set colRet = Nothing
End Function
Private Function GetFileLocationFromGacFolderInternal( _
    ByVal fCollection As Collection, _
    ByVal iFileNameOnly As String, _
    ByVal iFolderGac As String) As Boolean
Dim lFso As Object
Dim lFolder As String
Dim lFsoFolder As Object
Dim lFsoLoopFolder As Object
Dim lFsoFile As Object
  
  GetFileLocationFromGacFolderInternal = False
  If Not FolderExists(iFolderGac) Then
    Exit Function
  End If

  Set lFso = CreateObject("Scripting.FileSystemObject")
  Set lFsoFolder = lFso.GetFolder(iFolderGac)
  For Each lFsoLoopFolder In lFsoFolder.SubFolders
    For Each lFsoFile In lFsoLoopFolder.Files
      If InStr(1, lFsoFile.Name, iFileNameOnly, vbTextCompare) Then
        fCollection.Add lFsoFile.path
      End If
    Next
  Next
  Set lFsoFile = Nothing
  Set lFsoFolder = Nothing
  Set lFso = Nothing
  
  GetFileLocationFromGacFolderInternal = True
End Function

Private Function OutLengthDatePos( _
            ByVal Row As Integer, _
            ByVal fullName As String) As Boolean
Dim filelength As Long
  
  On Error Resume Next
  filelength = FileLen(fullName)
  If filelength = 0 Then
    Call outPos(Row, 5, 0, "Not found")
    Call outPos(Row, 6, 0, "Not found")
    OutLengthDatePos = False
  Else
    outDateTimePos Row, 5, FileDateTime(fullName)
    Call outPos(Row, 6, 0, filelength, "#,##0 ""Bytes""")
    OutLengthDatePos = True
  End If
End Function

Private Sub outPos( _
          ByVal Row As Integer, _
          ByVal col As Integer, _
          ByVal style As Byte, _
          ByVal fText As Variant, _
 Optional ByVal vbFormat As String, _
 Optional ByVal fUnderline As Boolean = False, _
 Optional ByVal flngPattern As Long = xlSolid)
 'Excel.Constants  xlSolid = 1
 
  With gRange(Row, col)
    .Value = fText
    If style > 0 Then .Font.Bold = True
    If style = 2 Then .Font.Size = 12
    If style = 3 Then .Font.Size = 16
    If style = 4 Then       ' red
      gRedCount = gRedCount + 1
      .Font.ColorIndex = 2
      .Interior.Pattern = flngPattern
      .Interior.Color = RGB(255, 0, 0)    '.ColorIndex = 3
    End If
    If style = 5 Then       ' green
      .Font.ColorIndex = 1
      .Interior.Pattern = flngPattern
      .Interior.Color = RGB(0, 255, 0)    ' Index = 4
    End If
    If style = 6 Then       ' yellow
      gYellowCount = gYellowCount + 1
      .Font.ColorIndex = 1
      .Interior.Pattern = flngPattern
      .Interior.Color = RGB(255, 255, 0)      'Index = 6
    End If
    If style = 7 Then       ' blue
      .Font.ColorIndex = 2
      .Interior.Pattern = flngPattern
      .Interior.Color = RGB(0, 0, 255)    'Index = 5
    End If
    If style = 8 Then .Font.Size = 10
    If style = 9 Then       ' gray
      .Font.ColorIndex = 2
      .Interior.Pattern = flngPattern
      .Interior.Color = RGB(128, 128, 128)
    End If
    If flngPattern <> xlSolid Then .Interior.PatternThemeColor = xlThemeColorDark1
    If vbFormat <> "" Then .NumberFormat = vbFormat
    If fUnderline Then .Font.Underline = xlUnderlineStyleSingle
  End With
End Sub

Private Sub outDateTimePos(Row As Integer, col As Integer, ByVal myDate As Date)
Dim myTime As Date
  
  myDate = myDate
  myTime = myDate - Int(myDate)
  Call outPos(Row, col, 0, Int(myDate) & "   " & myTime)    ' & "h:mm"
End Sub

Private Function FindRev(strText As String, strFind As String)
Dim nCurrentPos As Integer

  nCurrentPos = InStr(strText, strFind)
  While (nCurrentPos <> 0)
    FindRev = nCurrentPos
    nCurrentPos = InStr(nCurrentPos + 1, strText, strFind)
  Wend
End Function

Private Sub outCompPos( _
              ByVal iRow As Integer, _
              ByVal iCompName As String, _
     Optional ByVal iSignatureCheck As Boolean = False)
Dim file As String: file = ThisWorkbook.Worksheets(gVersionSheet).Cells(iRow, 1).Value
Dim lLocalFileVersion As String
Dim lDefaultVersion As String
Dim destPath As String: destPath = ThisWorkbook.Worksheets(gVersionSheet).Cells(iRow, 4).Value
Dim sourcePath As String: sourcePath = ThisWorkbook.Worksheets(gVersionSheet).Cells(iRow, 5).Value
Dim lLocalRegistryVersion As String
Dim lError As Boolean
Dim lLocatedInGAC As Boolean
Dim bError As Boolean
Dim lngPattern As Long: lngPattern = xlSolid

  lLocatedInGAC = False
  lDefaultVersion = ThisWorkbook.Worksheets(gVersionSheet).Cells(iRow, gColumnIndex).Value
  If (Trim(lDefaultVersion) = vbNullString) And (Trim(file) = vbNullString) Then Exit Sub
  
  Call outPos(iRow, 7, 0, iCompName)
  Call outPos(iRow, 1, 0, file)
  Call outPos(iRow, 3, 0, lDefaultVersion)
  
  lLocalRegistryVersion = RegistryEntry(iCompName, "clsid")
  If lLocalRegistryVersion = "" Then lLocalRegistryVersion = RegistryEntry(iCompName + ".1", "clsid")
  If lLocalRegistryVersion = "" Then
    If IsNotAvailable(lDefaultVersion) Then
      Call outPos(iRow, 2, 5, "Check OK", , lLocatedInGAC)
    Else
      'GetVersionFromGacViaRegistry(GacProgID)
      Call outPos(iRow, 2, 4, "Not registered", , lLocatedInGAC)
      Call outComment(iRow, gCommentsIndex + 12, file, file, sourcePath, destPath, file, destPath, file, WinPath, file)
    End If
  Else
    Call outPos(iRow, 8, 0, lLocalRegistryVersion)    ' clsid
    lLocalRegistryVersion = RegistryEntry("clsid", lLocalRegistryVersion & "\InProcServer32")
    If lLocalRegistryVersion = "" Then
      If IsNotAvailable(lDefaultVersion) Then
        Call outPos(iRow, 2, 5, "Check OK, but no server registered", , lLocatedInGAC)
      Else
        Call outPos(iRow, 2, 4, "No server registered!", 1, lLocatedInGAC)
        Call outComment(iRow, gCommentsIndex + 13, file, file, sourcePath, destPath, file, destPath, file, WinPath, file)
      End If
    Else
      lLocalFileVersion = GetFileVersion(lLocalRegistryVersion)
      If OutLengthDatePos(iRow, lLocalRegistryVersion) Then
        If lLocalFileVersion = lDefaultVersion Then
          If iSignatureCheck And (Not lLocatedInGAC) Then lngPattern = IIf(CheckSignature(lLocalRegistryVersion, bError), xlSolid, xlHorizontal)   'Checking Signaure
          Call outPos(iRow, 2, 5, lLocalFileVersion, , lLocatedInGAC, lngPattern)
        Else
          If IsNotAvailable(lDefaultVersion) Then
            Call outPos(iRow, 2, 5, "Check OK (" & lLocalFileVersion & ")", , lLocatedInGAC)
          Else
            If CompareVersion(lLocalFileVersion, lDefaultVersion, , lError) = 0 Then
              If iSignatureCheck And (Not lLocatedInGAC) Then lngPattern = IIf(CheckSignature(lLocalRegistryVersion, bError), xlSolid, xlHorizontal)   'Checking Signaure
              Call outPos(iRow, 2, IIf(lError, 9, 5), lLocalFileVersion, , lLocatedInGAC)
            Else
              If CompareVersion(lLocalFileVersion, lDefaultVersion) > 0 Then
                If iSignatureCheck And (Not lLocatedInGAC) Then lngPattern = IIf(CheckSignature(lLocalRegistryVersion, bError), xlSolid, xlHorizontal)   'Checking Signaure
                Call outPos(iRow, 2, 6, lLocalFileVersion, , lLocatedInGAC)
                Call outComment(iRow, gCommentsIndex + 15, file, file, sourcePath, destPath, file, destPath, file, WinPath, file)
              Else
                Call outPos(iRow, 2, 4, lLocalFileVersion, , lLocatedInGAC)
                Call outComment(iRow, gCommentsIndex + 16, file, file, sourcePath, destPath, file, destPath, file, WinPath, file)
              End If
            End If
          End If
        End If
        'check create object
        If iCompName <> "otx.CollectionX" _
          And iCompName <> "BWWebPubWizard.webpubsh" _
          And iCompName <> "wdbmbm2.BExMap2" _
          And iCompName <> "MSFlexGridLib.MSFlexGrid" _
          And iCompName <> "HTML.HostEncode" _
          And iCompName <> "TriEditParse.TriEditParse" _
          And iCompName <> "SAPBWPrintProp.SAPQueryPrnProp" _
          And gRange(2, 9).Value = "X" Then
          On Error Resume Next
          Dim compobj As Object
          Set compobj = CreateObject(iCompName)
          If compobj Is Nothing Then
            Call outPos(iRow, 2, 4, "Could not create object", , lLocatedInGAC)
            Range("A" & iRow).ClearComments
            Range("B" & iRow).ClearComments
            Call outComment(iRow, gCommentsIndex + 23, file, file, sourcePath, _
                                     destPath, file, destPath, file, WinPath, file)
          End If
          If iCompName <> "SAPBROWSER.SAPBrowserCtrl.1" Then
            compobj.Delete
          End If
          Set compobj = Nothing
        End If
        Call outPos(iRow, 4, 0, Left(lLocalRegistryVersion, FindRev(lLocalRegistryVersion, "\") - 1))
      Else
        If IsNotAvailable(lDefaultVersion) Then
          Call outPos(iRow, 2, 5, "Check OK", , lLocatedInGAC)
        Else
          Call outPos(iRow, 2, 4, "Not found", , lLocatedInGAC)
        End If
      End If
    End If
  End If
End Sub

Private Function OutServerXLAfilePos( _
                    ByVal fRow As Integer, _
                    ByVal fSourcePath As String, _
           Optional ByVal iSignatureCheck As Boolean = False) As Boolean
  OutServerXLAfilePos = OutXLAfilePosInternal(fRow, False, True, "", fSourcePath, iSignatureCheck)
End Function
Private Function OutXLAfilePos( _
                    ByVal fRow As Integer, _
           Optional ByVal fRead As Boolean = False, _
           Optional fServer As Boolean = False, _
           Optional ByVal iSignatureCheck As Boolean = False) As Boolean
  OutXLAfilePos = OutXLAfilePosInternal(fRow, fRead, fServer, , , iSignatureCheck)
End Function
Private Function OutXLAfilePosInternal( _
                    ByVal fRow As Integer, _
           Optional ByVal fRead As Boolean, _
           Optional ByVal fServer As Boolean, _
           Optional ByVal fVersionPrefix As String, _
           Optional ByVal fSourcePath As String, _
           Optional ByVal iSignatureCheck As Boolean = False) As Boolean
Dim lVersionDefault As String: lVersionDefault = ThisWorkbook.Worksheets(gVersionSheet).Cells(fRow, gColumnIndex).Value
Dim lFile As String: lFile = ThisWorkbook.Worksheets(gVersionSheet).Cells(fRow, 1).Value
Dim lDestPath As String
Dim lSourcePath As String
Dim lError As Boolean
Dim lFullName As String
Dim lOpenAlready As Boolean: lOpenAlready = False
Dim lWorkbook As Workbook
Dim lVersionCurrent As String: lVersionCurrent = "???"
Dim lProperty As Object
Dim lCloseAnalyzer3x As Boolean, lCloseAnalyzer7x As Boolean
Dim lngPattern As Long: lngPattern = xlSolid
Dim bError As Boolean

  If fServer Then
    lFullName = fSourcePath & lFile
  Else
    lFullName = gXlaPath & lFile
    lSourcePath = ThisWorkbook.Worksheets(gVersionSheet).Cells(fRow, 5).Value
    lDestPath = ThisWorkbook.Worksheets(gVersionSheet).Cells(fRow, 4).Value
  End If
  
  If IsNotAvailable(lVersionDefault) Then
    gRange.Rows(fRow).EntireRow.Hidden = True
    OutXLAfilePosInternal = True
    Exit Function
  End If
  
  Call outPos(fRow, 1, 0, lFile)
  Call outPos(fRow, 3, 0, lVersionDefault)
  If Not fRead Then
    lOpenAlready = ExistsWorkbook(lFile)
    
    If OutLengthDatePos(fRow, lFullName) Then
      Select Case LCase(lFile)
        Case "sapbex.xla", "sapbex0.xla": lCloseAnalyzer3x = True
        Case "bexanalyzer.xla":           lCloseAnalyzer7x = True
      End Select
      
      If lOpenAlready Then
        If ExistsWorkbook(lFile) Then
          On Error Resume Next
          Set lWorkbook = Application.Workbooks(lFile)
          Debug.Assert CBool((Err.Number = 0) And IsDevUser)    'Stop if err (only in dev. environment)
          On Error GoTo 0
        End If
      Else
        On Error Resume Next
        Set lWorkbook = Application.Workbooks.Open(lFullName)
        Debug.Assert CBool((Err.Number = 0) And IsDevUser)    'Stop if err (only in dev. environment)
        If Err.Number = 0 Then
'          If lCloseAnalyzer7x Then lWorkbook.RunAutoMacros xlAutoOpen
        Else
          If ExcelBrowserInplace Then
            MsgBox "Take care that this file is running in Microsoft Excel and not inplace in a browser." & vbCrLf & vbCrLf & _
                   "You can save this file on your local workstation and start it locally" & vbCrLf & _
                   "or change your settings for xls files in the Explorer.", vbInformation
            On Error Resume Next
            Call ShellExecute(0, "open", "http://support.microsoft.com/kb/162059", vbNullString, vbNullString, 1)
          End If
          End       '=> End here!
        End If
        On Error GoTo 0
      End If
      
      If lWorkbook Is Nothing Then
        Call outPos(fRow, 1, 4, "Not found", 1)
        If Not fServer Then
          Call outComment(fRow, gCommentsIndex + 11, lFile, lDestPath, lFile, lSourcePath, lDestPath, WinPath, lFile)
        Else
          Call outComment(fRow, gCommentsIndex + 20, lFile)
        End If
        OutXLAfilePosInternal = False
      Else
        For Each lProperty In lWorkbook.CustomDocumentProperties
          If lProperty.Name = "Version" Then
             lVersionCurrent = lProperty.Value
             Exit For
          End If
        Next lProperty
        If lVersionCurrent = lVersionDefault Then
          If iSignatureCheck Then lngPattern = IIf(CheckSignature(lFullName, bError), xlSolid, xlHorizontal)    'Checking Signaure
          Call outPos(fRow, 2, 5, lVersionDefault, , , lngPattern)
        Else
          If CompareVersion(lVersionCurrent, lVersionDefault, fVersionPrefix, lError) = 0 Then
            If iSignatureCheck Then lngPattern = IIf(CheckSignature(lFullName, bError), xlSolid, xlHorizontal)    'Checking Signaure
            Call outPos(fRow, 2, IIf(lError, 9, 5), lVersionCurrent, , , lngPattern)
          Else
            If CompareVersion(lVersionCurrent, lVersionDefault, fVersionPrefix) > 0 Then
              If iSignatureCheck Then lngPattern = IIf(CheckSignature(lFullName, bError), xlSolid, xlHorizontal)    'Checking Signaure
              Call outPos(fRow, 2, 6, lVersionCurrent, , , lngPattern)
              If Not fServer Then
                Call outComment(fRow, gCommentsIndex + 6, lFile, lFile, lSourcePath, lDestPath, WinPath, lFile)
              Else
                Call outComment(fRow, gCommentsIndex + 18, lFile)
              End If
            Else
              Call outPos(fRow, 2, 4, lVersionCurrent)
              If Not fServer Then
                Call outComment(fRow, gCommentsIndex + 7, lFile, lFile, lSourcePath, lDestPath, WinPath, lFile)
              Else
                Call outComment(fRow, gCommentsIndex + 19, lFile)
              End If
            End If
          End If
        End If
        If FileLen(lFullName) <> 0 Then Call outPos(fRow, 4, 0, Left(lFullName, FindRev(lFullName, "\")))
        OutXLAfilePosInternal = True
      End If
    Else
      Call outPos(fRow, 2, 4, "Not found")
      If Not fServer Then
        Call outComment(fRow, gCommentsIndex + 7, lFile, lFile, lSourcePath, lDestPath, WinPath, lFile)
      Else
        Call outComment(fRow, gCommentsIndex + 20, lFile)
      End If
    End If
  End If

  If Not lOpenAlready Then
    If lCloseAnalyzer3x Then
      If ExistsWorkbook("sapbex.xla") Then
        On Error Resume Next
        Application.Workbooks("sapbex.xla").Close False
        Debug.Assert CBool((Err.Number = 0) And IsDevUser)      'Stop if err (only in dev. environment)
        On Error GoTo 0
      End If
    ElseIf lCloseAnalyzer7x Then
      If ExistsWorkbook("BExAnalyzer.xla") Then
        On Error Resume Next
        With Application.Workbooks("BExAnalyzer.xla")
          Call .RunAutoMacros(xlAutoClose)
          If Err.Number <> 0 Then Err.Clear
          Call .Close(False)
          Debug.Assert CBool((Err.Number = 0) And IsDevUser)    'Stop if err (only in dev. environment)
        End With
        On Error GoTo 0
      End If
      
      If ExistsCommandBar("BEx Design Toolbox") Then
        On Error Resume Next
        Call Application.CommandBars("BEx Design Toolbox").Delete
        Debug.Assert CBool((Err.Number = 0) And IsDevUser)      'Stop if err (only in dev. environment)
        On Error GoTo 0
      End If
      If ExistsCommandBar("BEx Analysis Toolbox") Then
        On Error Resume Next
        Call Application.CommandBars("BEx Analysis Toolbox").Delete
        Debug.Assert CBool((Err.Number = 0) And IsDevUser)      'Stop if err (only in dev. environment)
        On Error GoTo 0
      End If
    End If
  End If
  
  If lCloseAnalyzer3x Then
    If ExistsCommandBar("xxxSAPBEXxxx") Then
      On Error Resume Next
      Call Application.CommandBars("xxxSAPBEXxxx").Delete
      Debug.Assert CBool((Err.Number = 0) And IsDevUser)      'Stop if err (only in dev. environment)
      On Error GoTo 0
    End If
  ElseIf lCloseAnalyzer7x Then
    If ExistsCommandBar("xxxBEx Design Toolboxxxx") Then
      On Error Resume Next
      Call Application.CommandBars("xxxBEx Design Toolboxxxx").Delete
      Debug.Assert CBool((Err.Number = 0) And IsDevUser)      'Stop if err (only in dev. environment)
      On Error GoTo 0
    End If
    If ExistsCommandBar("xxxBEx Analysis Toolboxxxx") Then
      On Error Resume Next
      Call Application.CommandBars("xxxBEx Analysis Toolboxxxx").Delete
      Debug.Assert CBool((Err.Number = 0) And IsDevUser)      'Stop if err (only in dev. environment)
      On Error GoTo 0
    End If
  End If
End Function

Private Sub outSystemFilePos( _
              ByVal Row As Integer, _
     Optional ByVal system As Boolean, _
     Optional ByVal iSignatureCheck As Boolean = False)
Dim file As String: file = ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, 1).Value
Dim myValue As String: myValue = SysPath & "\" & file
Dim myVersion As String
Dim version As String: version = ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, gColumnIndex).Value
Dim destPath As String: destPath = ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, 4).Value
Dim sourcePath As String: sourcePath = ThisWorkbook.Worksheets(gVersionSheet).Cells(Row, 5).Value
Dim lError As Boolean
Dim lngPattern As Long: lngPattern = xlSolid
Dim bError As Boolean
Dim sTmp As String

  sTmp = IIf(CheckFileIsOptional(version), vbNullString, version)
  Call outPos(Row, 1, 0, file)
  Call outPos(Row, 3, 0, sTmp)
  myVersion = GetFileVersion(myValue)
  If (myVersion = pcsNoVersion) And CheckFileIsOptional(version) Then
    Call outPos(Row, 2, 7, "Not found")
    Call outComment(Row, gCommentsIndex + 11, file, destPath, file, sourcePath, destPath, WinPath, file)
  Else
    If OutLengthDatePos(Row, myValue) Then
      If myVersion = version Then
        If iSignatureCheck Then lngPattern = IIf(CheckSignature(myValue, bError), xlSolid, xlHorizontal)   'Checking Signaure
        Call outPos(Row, 2, 5, myVersion, , , lngPattern)
      Else
        If CompareVersion(myVersion, version, , lError) = 0 Then
          If iSignatureCheck Then lngPattern = IIf(CheckSignature(myValue, bError), xlSolid, xlHorizontal)   'Checking Signaure
          Call outPos(Row, 2, IIf(lError, 9, 5), myVersion, , , lngPattern)
        Else
          If CompareVersion(myVersion, version) > 0 Then
            If iSignatureCheck Then lngPattern = IIf(CheckSignature(myValue, bError), xlSolid, xlHorizontal)   'Checking Signaure
            If Not system Then
              Call outPos(Row, 2, 6, myVersion, , , lngPattern)
              Call outComment(Row, gCommentsIndex + 6, file, file, sourcePath, destPath, WinPath, file)
            Else
              Call outPos(Row, 2, 7, myVersion, , , lngPattern)
              Call outComment(Row, gCommentsIndex + 6, file, file, sourcePath, destPath, WinPath, file)
            End If
          Else
            If Not system Then
              Call outPos(Row, 2, 4, myVersion)
              Call outComment(Row, gCommentsIndex + 7, file, file, sourcePath, destPath, WinPath, file)
            Else
              If iSignatureCheck Then lngPattern = IIf(CheckSignature(myValue, bError), xlSolid, xlHorizontal)   'Checking Signaure
              Call outPos(Row, 2, 7, myVersion, , , lngPattern)
              Call outComment(Row, gCommentsIndex + 8, file, file, sourcePath, destPath, WinPath, file)
            End If
          End If
        End If
      End If
      Call outPos(Row, 4, 0, SysPath)
    Else
      Call outPos(Row, 2, 4, "Not found")
      Call outComment(Row, gCommentsIndex + 11, file, destPath, file, sourcePath, destPath, WinPath, file)
    End If
  End If
End Sub

Private Sub outComment(Row As Integer, rowComment As Integer, _
                    Optional val1 As String = "", Optional val2 As String = "", _
                    Optional val3 As String = "", Optional val4 As String = "", _
                    Optional val5 As String = "", Optional val6 As String = "", _
                    Optional val7 As String = "", Optional val8 As String = "", _
                    Optional val9 As String = "")
Dim message As String
Dim height As Single
Dim lShape As Shape
  
  rowComment = rowComment
  message = ThisWorkbook.Worksheets(gVersionSheet).Cells(rowComment, 1).Value
  If Len(val1) > 0 Then message = ReplaceString(message, "%1", val1)
  If Len(val2) > 0 Then message = ReplaceString(message, "%2", val2)
  If Len(val3) > 0 Then message = ReplaceString(message, "%3", val3)
  If Len(val4) > 0 Then message = ReplaceString(message, "%4", val4)
  If Len(val5) > 0 Then message = ReplaceString(message, "%5", val5)
  If Len(val6) > 0 Then message = ReplaceString(message, "%6", val6)
  If Len(val7) > 0 Then message = ReplaceString(message, "%7", val7)
  If Len(val8) > 0 Then message = ReplaceString(message, "%8", val8)
  If Len(val9) > 0 Then message = ReplaceString(message, "%9", val9)
  height = Len(message) * 0.003
  If height < 1 Then height = 1
  gRange.Range("A" & Row).AddComment
  gRange.Range("A" & Row).Comment.Visible = True
  gRange.Range("A" & Row).Comment.Text Text:=message
  Set lShape = gRange.Range("A" & Row).Comment.Shape
  lShape.ScaleHeight height, msoFalse, msoScaleFromTopLeft
  lShape.ScaleWidth 3, msoFalse, msoScaleFromTopLeft
  gRange.Range("A" & Row).Comment.Visible = False
  gRange.Range("B" & Row).AddComment
  gRange.Range("B" & Row).Comment.Visible = True
  gRange.Range("B" & Row).Comment.Text Text:=message
  Set lShape = gRange.Range("B" & Row).Comment.Shape
  lShape.ScaleHeight height, msoFalse, msoScaleFromTopLeft
  lShape.ScaleWidth 3, msoFalse, msoScaleFromTopLeft
  gRange.Range("B" & Row).Comment.Visible = False
End Sub

Private Function ReplaceString(message As String, placeholder As String, Value As String) As String
Dim nPos As Long
Dim strLeft As String
Dim strRight As String
    
  nPos = InStr(message, placeholder)
  If nPos <> 0 Then
    strLeft = Left(message, nPos - 1)
    strRight = Right(message, Len(message) - nPos - Len(placeholder) + 1)
    ReplaceString = strLeft + Value + strRight
  Else
    ReplaceString = message
  End If
End Function

Private Function CompareVersion( _
                    ByVal version1 As String, _
                    ByVal version2 As String, _
           Optional ByVal VersionPrefix As String, _
           Optional ByRef iError As Boolean = False) As Integer
Dim build1 As String
Dim build2 As String
Dim rel1 As String
Dim rel2 As String
Dim pre1 As String
    
  If VersionPrefix <> "" Then
    If Left$(version1, Len(VersionPrefix)) <> VersionPrefix Then
      CompareVersion = -1
      Exit Function
    End If
  End If
    
  build1 = Right(version1, Len(version1) - FindRev(version1, "."))
  build2 = Right(version2, Len(version2) - FindRev(version2, "."))
  rel1 = Left(version1, FindRev(version1, "."))
  rel2 = Left(version2, FindRev(version2, "."))
  pre1 = Left(version1, InStr(version1, ".") - 1)         ' 021
  If CInt(pre1) > 1000 Or rel1 = rel2 Then
    On Error GoTo error_end
    If CInt(build1) > CInt(build2) Then
      CompareVersion = 1
    Else
      If CInt(build1) < CInt(build2) Then
        CompareVersion = -1
      Else
        CompareVersion = 0
      End If
    End If
  Else
    If version1 > version2 Then
      CompareVersion = 1
    Else
      If version1 < version2 Then
        CompareVersion = -1
      Else
        CompareVersion = 0
      End If
    End If
  End If
  On Error GoTo 0
  Exit Function

error_end:
  CompareVersion = 0
  iError = True
End Function

'Function "GetPaths" is NOT valid for Server-Check!
Private Function GetPaths() As Boolean
Dim frontLen As Long
Dim lCheckFile As String
Dim lTmpString As String
Const lSapPathSapGui As String = "sapgui\"
Static bSkip As Boolean

  If bSkip Then
    GetPaths = True
    Exit Function
  End If
  
  GetPaths = False
  bSkip = True
  Call InitilizeGlobalVariable
  
  'fill gBexPath, gSapPath, gMapPath, gOlapPath
  
  'Read SAPDestDir from Registry: SOFTWARE\SAP\SAP Shared
  gSapPath = Trim(RegistryGetString("SOFTWARE\SAP\SAP Shared", "SAPDestDir", hk_LOCAL_MACHINE))
  If gSapPath = vbNullString Then
    'Might be that "BI 7.0 AddOn for A1S" is installed
    gBiForA1S = True
    gVersionSheet = "Version 740"
    Call SapGuiPathNotFound
    
    'Check if "BI 7.0 AddOn for SAP GUI" without SAP GUI is installed
    lTmpString = Trim(RegistryGetString("SOFTWARE\WOW6432Node\SAP\SAP Shared\SAPBI", "SAPDestDir", hk_LOCAL_MACHINE))
    If lTmpString <> vbNullString Then
      If (Right(lTmpString, 1) <> "\") Or (Right(lTmpString, 1) <> "/") Then lTmpString = lTmpString & "\"
      gBex7Path = lTmpString & "BI\"
      lCheckFile = gBex7Path & "BExCommon.dll"
      If FileExists(lCheckFile) Then
        gBex7FullVersion = GetFileVersion(lCheckFile)
        gBex7MajorRelease = Val(FindVerpart(gBex7FullVersion, 1))        'Get Bex710 Release
        gBex7Patch = Val(FindVerpart(gBex7FullVersion, 3))
        If Val(gBex7FullVersion) > 0 Then
          gVersionSheet = GetVersionSheet(gBex7MajorRelease)
          gBex7TextPatch = Left(gBex7MajorRelease, 3) & " Patch " & gBex7Patch
          gBiForA1S = False
        Else
          gBex7Path = vbNullString
        End If
      End If
    End If
  Else
    If Right(gSapPath, 1) <> "\" Then gSapPath = gSapPath & "\"
    gSapPath = gSapPath & lSapPathSapGui
    
    lCheckFile = gSapPath + "sapgui.exe"
    If Not FileExists(lCheckFile) Then
      Call SapGuiPathNotFound: Exit Function
    End If
    gGuiFullVersion = GetFileVersion(lCheckFile)                   'Get SAPGUI total version
    gSapGuiMajorRelease = Val(FindVerpart(gGuiFullVersion, 1))     'Get SAPGUI Release
    gSapGuiPatch = Val(FindVerpart(gGuiFullVersion, 3))
  
    gVersionSheet = GetVersionSheet(CInt(Val(gSapGuiMajorRelease)))
    If gVersionSheet = vbNullString Then
      Call SapGuiPathNotFound
      Exit Function
    End If
  End If
  
  Call InitIndexes
        
  gSapSharedPath = Trim(GetProgramFilesCommonFolder)    'BEx xla path
  If Right(gSapSharedPath, 1) <> "\" Then gSapSharedPath = gSapSharedPath & "\"
  gSapSharedPath = gSapSharedPath & "SAP Shared\"
  gXlaPath = gSapSharedPath & "BW\"
  gOlapPath = gXlaPath & "OleOlap\"
  If Not FolderExists(gOlapPath) Then gOlapPath = vbNullString
    
  If IsSAPGUI750Installed Or IsSAPGUI740Installed Or IsSAPGUI730Installed Or IsSAPGUI720Installed Or IsSAPGUI710Installed Or gBiForA1S Then
    'BEx 7.10 or 7.20 or 7.30
    gBex7Path = GetSapWkstaVarsPath
    gBex7Path = GetBiDestDir(gBex7Path)
    If Right(gBex7Path, 1) <> "\" Then gBex7Path = gBex7Path & "\"
    gBex7Path = gBex7Path & "bi\"
    
    lCheckFile = gBex7Path & "BExCommon.dll"
    If FileExists(lCheckFile) Then
      gBex7FullVersion = GetFileVersion(lCheckFile)
      gBex7MajorRelease = Val(FindVerpart(gBex7FullVersion, 1))        'Get Bex710 Release
      gBex7Patch = Val(FindVerpart(gBex7FullVersion, 3))
      If IsSAPGUI710Installed Then
        gBex7TextPatch = "7.10 Patch " & gBex7Patch
      ElseIf IsSAPGUI720Installed Then
        gBex7TextPatch = "7.20 Patch " & gBex7Patch
      ElseIf IsSAPGUI730Installed Then
        gBex7TextPatch = "7.30 Patch " & gBex7Patch
      ElseIf IsSAPGUI740Installed Then
        gBex7TextPatch = "7.40 Patch " & gBex7Patch
      ElseIf IsSAPGUI750Installed Then
        gBex7TextPatch = "7.50 Patch " & gBex7Patch
      End If
    Else
      gBex7Path = ""
      If gBiForA1S Then
        gBiForA1S = False
        Exit Function
      End If
    End If
    
    If gXlaPath = vbNullString Then
      Call outPos(gBw7Index, 2, 4, "System Folder PROGRAM_FILES_COMMON not evaluable")   'Error
      Exit Function
    End If
      
  ElseIf IsSAPGUI640Installed Then
    
    'BEx 7.0
    gBex7Path = Left(gSapPath, Len(gSapPath) - Len(lSapPathSapGui))
    If Right(gBex7Path, 1) <> "\" Then gBex7Path = gBex7Path & "\"
    gBex7Path = gBex7Path & "bw\"
    
    gXlaPath = gBex7Path      'BEx xla path
    
    lCheckFile = gBex7Path & "BExCommon.dll"
    If FileExists(lCheckFile) Then
      gBex7FullVersion = GetFileVersion(lCheckFile)
      gBex7MajorRelease = Val(FindVerpart(gBex7FullVersion, 1))        'Get Bex710 Release
      gBex7Patch = Val(FindVerpart(gBex7FullVersion, 3))
     gBex7TextPatch = "7.00 Patch " & gBex7Patch
    Else
      gBex7Path = ""
    End If
  Else
    If gBex7Path = vbNullString Then
      Call SapGuiPathNotFound
      Exit Function
    End If
  End If
    
  'BEx 3.5
  If gSapPath <> vbNullString Then
    gBexPath = Left(gSapPath, Len(gSapPath) - Len(lSapPathSapGui))
    If Right(gBexPath, 1) <> "\" Then gBexPath = gBexPath & "\"
    gBexPath = gBexPath & "bw\"
    lCheckFile = gBexPath + "wdbrlog.exe"
  Else
    'This might be the case if "BI 7.0 AddOn for A1S" is installed
    lCheckFile = vbNullString
  End If
  If FileExists(lCheckFile) Then
    gBex35FullVersion = GetFileVersion(lCheckFile)
    gBex35MajorRelease = Val(FindVerpart(gBex35FullVersion, 1))                              ' Get Bex350 Release
    gBex35Patch = Val(FindVerpart(gBex35FullVersion, 2))
    gBex35TextPatch = "3.50 Patch " & gBex35Patch
  End If

  gMapPath = RegistryEntry("MapObjects.MemFile.1", "clsid")
  If gMapPath <> vbNullString Then
    gMapPath = RegistryEntry("clsid", gMapPath & "\InProcServer32")
    gMapPath = Left(gMapPath, FindRev(gMapPath, "\") - 1)
    If Right(gMapPath, 1) <> "\" Then gMapPath = gMapPath & "\"
  Else
    Call outPos(gMapIndex, 2, 8, "MapObjects not installed (MapObjects.MemFile.1 not registered)")               ' Error
    outComment gMapIndex, gCommentsIndex + 3
  End If
    
  GetPaths = True
End Function

Private Function GetVersionSheet(ByVal fiMajorRelease As Integer) As String
Dim sRet As String
    
  Select Case fiMajorRelease
    Case 6400 To 6499:  sRet = "Version 640"
    Case 7100 To 7199:  sRet = "Version 710"
    Case 7200 To 7299:  sRet = "Version 720"
    Case 7300 To 7399:  sRet = "Version 730"
    Case 7400 To 7499:  sRet = "Version 740"
    Case 7500 To 7599:  sRet = "Version 750"
    Case Else:          sRet = vbNullString
  End Select
  GetVersionSheet = sRet
End Function

Public Function GetPreCalcPath() As String
  GetPreCalcPath = Trim(RegistryGetString("Software\SAP\SAP Shared\SAP_BiPcs", "SAPDestDir", hk_LOCAL_MACHINE))
End Function

Private Sub SapGuiPathNotFound()
  Call outPos(11, 3, 8, "640, 710, 720, 730, 740 or 750 not installed")
  gSapGuiMajorRelease = 0
End Sub

Private Sub InitIndexes()
  gBw7Index = GetIndex("BI in SAP NetWeaver 2004s") + 2
  gBw35Index = GetIndex("BW 3.5 Components")
  gMapIndex = GetIndex("MapObjects")
  gOlapIndex = GetIndex("OLE for OLAP")
  gSapGuiIndex = GetIndex("SAP GUI core components")
  gAddCompIndex = GetIndex("Additional components")
  gSyncIndex = GetIndex("Syncfusion components")
  gSapSharedIndex = GetIndex("SAP Shared")
  gMsIndex = GetIndex("Microsoft core components")
  gMsDotNetFrameworkIndex = GetIndex("Microsoft .Net Framework")
  gColumnIndex = 2
  gRedCount = 0
  gYellowCount = 0
  gCommentsIndex = GetIndex("Comments")
  gPreCalcIndex = GetIndex("PreCalc Server")
  gRegistryIndex = GetIndex("Registry-Entrees")
End Sub

Public Function SaveAs( _
            ByRef iWorkBook As Workbook, _
            ByVal iFileName As String) As Boolean
Dim lFileFormat As XlFileFormat
  
  iFileName = Trim(iFileName)
  If (iFileName = vbNullString) Or (Len(iFileName) < 5) Then Exit Function
  If Right(iFileName, 3) = "xls" Then
    If GetExcelMajorVersion(Application.version) >= 12 Then
      lFileFormat = 56      'xlExcel8
    Else
      lFileFormat = 43      'xlExcel9795
    End If
    On Error Resume Next
    iWorkBook.SaveAs iFileName, FileFormat:=lFileFormat
    SaveAs = CBool(Err.Number = 0)
    On Error GoTo 0
  Else
    On Error Resume Next
    iWorkBook.SaveAs iFileName
    SaveAs = CBool(Err.Number = 0)
    On Error GoTo 0
  End If
End Function

'SAP GUI ermitteln
Public Function IsSAPGUI640Installed() As Boolean
  IsSAPGUI640Installed = CBool((CInt(Val(gSapGuiMajorRelease)) >= 6400) And (CInt(Val(gSapGuiMajorRelease)) <= 6499))
End Function
Public Function IsSAPGUI710Installed() As Boolean
  IsSAPGUI710Installed = CBool((CInt(Val(gSapGuiMajorRelease)) >= 7100) And (CInt(Val(gSapGuiMajorRelease)) <= 7199))
End Function
Public Function IsSAPGUI720Installed() As Boolean
  IsSAPGUI720Installed = CBool((CInt(Val(gSapGuiMajorRelease)) >= 7200) And (CInt(Val(gSapGuiMajorRelease)) <= 7299))
End Function
Public Function IsSAPGUI730Installed() As Boolean
  IsSAPGUI730Installed = CBool((CInt(Val(gSapGuiMajorRelease)) >= 7300) And (CInt(Val(gSapGuiMajorRelease)) <= 7399))
End Function
Public Function IsSAPGUI740Installed() As Boolean
  IsSAPGUI740Installed = CBool((CInt(Val(gSapGuiMajorRelease)) >= 7400) And (CInt(Val(gSapGuiMajorRelease)) <= 7499))
End Function
Public Function IsSAPGUI750Installed() As Boolean
  IsSAPGUI750Installed = CBool((CInt(Val(gSapGuiMajorRelease)) >= 7500) And (CInt(Val(gSapGuiMajorRelease)) <= 7599))
End Function
Public Function IsBex750Installed() As Boolean
   IsBex750Installed = CBool((CInt(Val(gBex7MajorRelease)) >= 7500) And (CInt(Val(gBex7MajorRelease)) <= 7599))
End Function
Public Function IsBex740Installed() As Boolean
   IsBex740Installed = CBool((CInt(Val(gBex7MajorRelease)) >= 7400) And (CInt(Val(gBex7MajorRelease)) <= 7499))
End Function
Public Function IsBex730Installed() As Boolean
   IsBex730Installed = CBool((CInt(Val(gBex7MajorRelease)) >= 7300) And (CInt(Val(gBex7MajorRelease)) <= 7399))
End Function
Public Function IsBex720Installed() As Boolean
   IsBex720Installed = CBool((CInt(Val(gBex7MajorRelease)) >= 7200) And (CInt(Val(gBex7MajorRelease)) <= 7299))
End Function
Public Function IsBex710Installed() As Boolean
   IsBex710Installed = CBool((CInt(Val(gBex7MajorRelease)) >= 7100) And (CInt(Val(gBex7MajorRelease)) <= 7199))
End Function
Public Function IsBex700Installed() As Boolean
   IsBex700Installed = CBool((CInt(Val(gBex7MajorRelease)) >= 7000) And (CInt(Val(gBex7MajorRelease)) <= 7099))
End Function
Public Function IsBex7xInstalled() As Boolean
   IsBex7xInstalled = CBool((CInt(Val(gBex7MajorRelease)) >= 7000) And (CInt(Val(gBex7MajorRelease)) <= 7999))
End Function
Public Function IsBex350Installed() As Boolean
   IsBex350Installed = CBool((CInt(Val(gBex35MajorRelease)) >= 3500) And (CInt(Val(gBex35MajorRelease)) <= 3599))
End Function
Public Function GetColumnIndexOfInstalledPatch(ipatchStr As String, icomponentindex As Integer) As Integer
Dim ltmpRange As Range
  Set ltmpRange = ThisWorkbook.Worksheets(gVersionSheet).Rows(icomponentindex).Find(ipatchStr, LookIn:=xlValues)
  If ltmpRange Is Nothing Then
    GetColumnIndexOfInstalledPatch = 2
  Else
    GetColumnIndexOfInstalledPatch = ltmpRange.Column
  End If
End Function

Public Function IsMapObjectsInstalled() As Boolean
  IsMapObjectsInstalled = FolderExists(gMapPath)
End Function
Public Function IsOlapInstalled() As Boolean
  IsOlapInstalled = FolderExists(gOlapPath)
End Function

Private Function FindVerpart(istrText As String, iPart As Integer) As Integer
Dim ltmpstrText As String: ltmpstrText = istrText
Dim ltmpPart As Integer: ltmpPart = iPart

  While (ltmpPart > 0)
    ltmpPart = ltmpPart - 1
    FindVerpart = Left(ltmpstrText, InStr(ltmpstrText, ".") - 1)
    ltmpstrText = Right(ltmpstrText, Len(ltmpstrText) - InStr(ltmpstrText, "."))
  Wend
  If Not IsNumeric(FindVerpart) Then Exit Function
  FindVerpart = CInt(FindVerpart)
End Function

Public Function GetIndex(ByVal iComponent As String) As Integer
Dim ltmpRange As Range
  
  Set ltmpRange = ThisWorkbook.Worksheets(gVersionSheet).Columns(1).Find(iComponent, LookIn:=xlValues)
  If Not ltmpRange Is Nothing Then GetIndex = ltmpRange.Row
End Function

Private Sub HideUnused(ByVal fbHidePreCalc As Boolean)
'Order: gBw7Index - gSapSharedIndex - gSyncIndex - gBw35Index - gMapIndex - gOlapIndex - gSapGuiIndex - gAddCompIndex - gMsIndex - gMsDotNetFrameworkIndex - gPreCalcIndex - gRegistryIndex
Dim lArea7x As String: lArea7x = gBw7Index & ":" & (gSapSharedIndex - 1)
Dim lAreaSapShared As String: lAreaSapShared = gSapSharedIndex & ":" & (gSyncIndex - 1)
Dim lAreaSyncfusion As String: lAreaSyncfusion = gSyncIndex & ":" & (gBw35Index - 1)
Dim lArea3x As String: lArea3x = gBw35Index & ":" & (gMapIndex - 1)
Dim lAreaMapObj As String: lAreaMapObj = gMapIndex & ":" & (gOlapIndex - 1)
Dim lAreaOLAP As String: lAreaOLAP = gOlapIndex & ":" & (gSapGuiIndex - 1)
Dim lAreaSapGui As String: lAreaSapGui = gSapGuiIndex & ":" & (gAddCompIndex - 1)
Dim lAreaAddComp As String: lAreaAddComp = gAddCompIndex & ":" & (gMsIndex - 1)
Dim lAreaMsComp As String: lAreaMsComp = gMsIndex & ":" & (gMsDotNetFrameworkIndex - 1)
Dim lAreaNetFramework As String: lAreaNetFramework = gMsDotNetFrameworkIndex & ":" & (gPreCalcIndex - 1)
Dim lAreaPreCalcComp As String: lAreaPreCalcComp = gPreCalcIndex & ":" & (gRegistryIndex - 1)

  If Not IsBex350Installed Then
    gRange.Rows(lArea3x).EntireRow.Hidden = True
    gRange.Rows(lAreaAddComp).EntireRow.Hidden = True
    gRange.Rows(lAreaSapGui).EntireRow.Hidden = True
  End If
  
  If (Not IsBex750Installed) And (Not IsBex740Installed) And (Not IsBex730Installed) And (Not IsBex720Installed) And (Not IsBex710Installed) And (Not IsBex700Installed) Then
    gRange.Rows(lArea7x).EntireRow.Hidden = True
    gRange.Rows(lAreaSapShared).EntireRow.Hidden = True
    gRange.Rows(lAreaSyncfusion).EntireRow.Hidden = True
  End If

  If Not IsMapObjectsInstalled Then gRange.Rows(lAreaMapObj).EntireRow.Hidden = True
  
  If Not IsOlapInstalled Then gRange.Rows(lAreaOLAP).EntireRow.Hidden = True

  If fbHidePreCalc Then gRange.Rows(lAreaPreCalcComp).EntireRow.Hidden = True
End Sub

'Read SAPBIDESTDIR out from SapWkstaVars.xml
Public Function GetBiDestDir(ByVal iFile As String) As String
Dim lFileNo As Integer, lLine As String, lFound As Boolean, lTmp As Integer
Const lSearch1 As String = "Name=""SAPBIDESTDIR"""
Const lSearch2 As String = "<value>"

  If FileExists(iFile) Then
    Reset                                          'Vorsichtsma|fffd|nahme
    lFileNo = FreeFile()
    On Error Resume Next            'zum Abfangen bei Problemem mit dem |fffd|ffnen
    Open iFile For Input As #lFileNo
    If Err.Number = 0 Then
      Do Until EOF(lFileNo)                     'Schleife bis zum Ende der Datei
        Line Input #lFileNo, lLine                  'Zeile in Variable einlesen.
        If lFound Then
          lTmp = InStr(LCase(lLine), lSearch2)
          If lTmp > 0 Then
            lLine = Right(lLine, Len(lLine) + 1 - lTmp - Len(lSearch2))
            lTmp = InStr(lLine, "<")
            If lTmp > 0 Then GetBiDestDir = Left(lLine, lTmp - 1)
            Exit Do
          End If
        End If
        If InStr(LCase(lLine), LCase(lSearch1)) > 0 Then lFound = True
      Loop
    Else
      Reset
    End If
    Close #lFileNo
    On Error GoTo 0
  End If
End Function

'Check if SAPBExC is called from WebBrowser inplace ("Browse in same window")
'If so, Application.Workbooks.Open(... failed!
Private Function ExcelBrowserInplace() As Boolean
Dim lExcelVersion As String

  lExcelVersion = RegistryGetString("SOFTWARE\Classes\Excel.Sheet\CurVer", "", hk_LOCAL_MACHINE)
  ExcelBrowserInplace = Not CBool(Trim(RegistryGetString("SOFTWARE\Classes\" & lExcelVersion, "BrowserFlags", hk_LOCAL_MACHINE)) = "8")
End Function

'Get file location of SapWkstaVars.xml
Private Function GetSapWkstaVarsPath() As String
Dim sTmp As String

  GetSapWkstaVarsPath = vbNullString
  sTmp = Trim(RegistryGetString("SOFTWARE\SAP\SAP Shared", "SAPSetupDir", hk_LOCAL_MACHINE)) 'e.g.: C:\Program Files\SAP\FrontEnd
  If sTmp = vbNullString Then Exit Function
  
  If Right(sTmp, 1) <> "\" Then sTmp = sTmp & "\"
  GetSapWkstaVarsPath = sTmp & "setup\SapWkstaVars.xml"
End Function

Private Function GetWorkbookRevision(ByVal fWorkbook As Workbook) As String
Dim lReturn As String, lTmp As Integer
Dim lProperty As Object
    
  For Each lProperty In fWorkbook.CustomDocumentProperties
    If lProperty.Name = "Version" Then
      lReturn = lProperty.Value
      lTmp = InStrRev(lReturn, ".")
      If lTmp > 0 Then
        lReturn = Right(lReturn, Len(lReturn) - lTmp)
        If Len(lReturn) = 0 Then
          lReturn = lProperty.Value
        Else
          lReturn = Val(lReturn)
        End If
      End If
      Exit For
    End If
  Next lProperty
  GetWorkbookRevision = lReturn
End Function

Private Function ExistsCommandBar(ByVal fName As String) As Boolean
Dim lCommandBar As CommandBar
  
  ExistsCommandBar = False
  fName = Trim(fName)
  If fName = vbNullString Then Exit Function
  For Each lCommandBar In Application.CommandBars
    If fName = lCommandBar.Name Then
      ExistsCommandBar = True
      Exit For
    End If
  Next
End Function

Private Function ExistsWorkbook(ByVal fsName As String) As Boolean
'fsName: not case sensitiv
Dim lWorkbook As Workbook
Dim lTmp As String
    
  ExistsWorkbook = False
      
'=> DOES NOT WORK!!!
'  For Each lWorkbook In Application.Workbooks
'    If lWorkbook.Name = fsName Then
'      ExistsWorkbook = True
'      Exit For
'    End If
'  Next

  On Error Resume Next
  Set lWorkbook = Application.Workbooks(fsName)
  If Not lWorkbook Is Nothing Then
    lTmp = lWorkbook.Name
    If LCase(lTmp) = LCase(fsName) Then ExistsWorkbook = True
  End If
  On Error GoTo 0
End Function

Sub ServerCheck()
Dim lSheet As Worksheet
Dim lCheckFileName As String
Dim lTmp As String
Dim lServerpath As String
Dim lIsEnableEvents As Boolean
Const lGuiNotInstalled As String = "640, 710, 720, 730, 740 or 750 not installed"
    
  Set lSheet = ThisWorkbook.Worksheets("Server Check")
  Set gRange = lSheet.Cells
  With gRange.Cells(4, 3)
    If (InStr(.Value, "add Installation Server Path here") > 0) Or .Value = "" Then
    'If .Value = "add Installation Server Path here (location of setup.exe)" Or .Value = "" Then
      If UCase(GetMyComputerName) = "WDFN33984281A" Then
        .Value = "\\WDFV41002648D.emea.global.corp.sap\Installation-server_fes_rel"
        '.Value = "\\Wdfd00146276a\SAP\Installation_Server_710_CD1"
        Exit Sub
      Else
        MsgBox "Please enter Server Path (location of setup.exe)"
        .Activate
        Exit Sub
      End If
    Else
      lServerpath = gRange.Cells(4, 3)
    End If
  End With
  If Right(lServerpath, 1) <> "\" Then lServerpath = lServerpath & "\"
  gRange.Range(gRange.Cells(10, 1), gRange.Cells(212, 10)).Clear       'clear the workarea
  gRange.Range(gRange.Cells(3, 2), gRange.Cells(8, 3)).Clear           'clear the General system Info
  
  On Error Resume Next
  lSheet.Shapes("ButtonServerCheck").Visible = msoFalse
  On Error GoTo 0
  
  lTmp = "Revision: " & GetWorkbookRevision(ThisWorkbook)
  Call outPos(2, 1, 8, lTmp) ', "@")
  
  'Fill the General system Info
  lCheckFileName = "sapBEX_CD_" & Format(Now, "MMDD_hhmmss") & ".xls"
  Call outPos(3, 2, 8, "File Location: ")
  Call outPos(3, 3, 0, TmpPath & lCheckFileName)
  Call outPos(4, 2, 8, "Server Path: ")
  Call outPos(4, 3, 0, lServerpath)
  Call outPos(8, 2, 8, "SAP GUI")
  
' ---------------------------------
'sapgui version and release
Const lSapPathSapGui As String = "sapgui\"
Dim lCheckFile As String

  gSapPath = lServerpath   'e.g.: \\Wdfd00146276a\SAP\Installation_Server_710_CD1
  If gSapPath = vbNullString Then
    Call SapGuiPathNotFound
    Call ExitCheck(TmpPath, lCheckFileName)
    Exit Sub
  End If
  If Right(gSapPath, 1) <> "\" Then gSapPath = gSapPath & "\"
  gSapPath = gSapPath & lSapPathSapGui
  lCheckFile = gSapPath + "sapgui.exe"
  If Not FileExists(lCheckFile) Then
    Call SapGuiPathNotFound
    Call ExitCheck(TmpPath, lCheckFileName)
    Exit Sub
  End If
  gGuiFullVersion = GetFileVersion(lCheckFile)                             ' Get SAPGUI total version
  gSapGuiMajorRelease = Val(FindVerpart(gGuiFullVersion, 1))                              ' Get SAPGUI Release
  gSapGuiPatch = Val(FindVerpart(gGuiFullVersion, 3))
  
  gVersionSheet = GetVersionSheet(CInt(Val(gSapGuiMajorRelease)))
  If gVersionSheet = vbNullString Then
    Call SapGuiPathNotFound
    Call ExitCheck(TmpPath, lCheckFileName)
    Exit Sub
  End If
  
  'BI patch
  If IsSAPGUI750Installed Or IsSAPGUI740Installed Or IsSAPGUI730Installed Or IsSAPGUI720Installed Or IsSAPGUI710Installed Then
  'BEx 7.10 or 7.20 or 7.30
    gBex7Path = lServerpath
    If Right(gBex7Path, 1) <> "\" Then gBex7Path = gBex7Path & "\"
    gBex7Path = gBex7Path & "bi\"
    
    lCheckFile = gBex7Path & "BExCommon.dll"
    If FileExists(lCheckFile) Then
      gBex7FullVersion = GetFileVersion(lCheckFile)
      gBex7MajorRelease = Val(FindVerpart(gBex7FullVersion, 1))        'Get Bex710 Release
      gBex7Patch = Val(FindVerpart(gBex7FullVersion, 3))
      If IsSAPGUI710Installed Then
        gBex7TextPatch = "7.10 Patch " & gBex7Patch
      ElseIf IsSAPGUI720Installed Then
        gBex7TextPatch = "7.20 Patch " & gBex7Patch
      ElseIf IsSAPGUI730Installed Then
        gBex7TextPatch = "7.30 Patch " & gBex7Patch
      ElseIf IsSAPGUI740Installed Then
        gBex7TextPatch = "7.40 Patch " & gBex7Patch
      ElseIf IsSAPGUI750Installed Then
        gBex7TextPatch = "7.50 Patch " & gBex7Patch
      End If
    Else
      gBex7Path = ""
    End If
    gBex7Path = lServerpath & "BI\"
    gBwPath = lServerpath & "BW\"
    gSapPath = lServerpath & "Sapgui\"
    gSapControlsPath = lServerpath & "Sapgui\Controls\"
    gMapPath = gBwPath & "MapObjects\"
    gOlapPath = gBwPath & "OleOlap\"
    gSysPath = lServerpath & "System\"
    gSapControlsPath = lServerpath & "Sapgui\"
    gControlsPath = lServerpath & "Sapgui\"
    gSapChartPath = lServerpath & "system\SAP\"
  ElseIf IsSAPGUI640Installed Then
    gBex7Path = Left(gSapPath, Len(gSapPath) - Len(lSapPathSapGui))
    If Right(gBex7Path, 1) <> "\" Then gBex7Path = gBex7Path & "\"
    gBex7Path = gBex7Path & "bw\"
    lCheckFile = gBex7Path & "BExCommon.dll"
    If FileExists(lCheckFile) Then
      gBex7FullVersion = GetFileVersion(lCheckFile)
      gBex7MajorRelease = Val(FindVerpart(gBex7FullVersion, 1))        'Get Bex710 Release
      gBex7Patch = Val(FindVerpart(gBex7FullVersion, 3))
      gBex7TextPatch = "7.00 Patch " & gBex7Patch
    Else
      gBex7Path = ""
    End If
    gBex7Path = lServerpath & "BW\"
    gBwPath = lServerpath & "BW\"
    gSapPath = lServerpath & "Sapgui\"
    gSapControlsPath = lServerpath & "Sapgui\Controls\"
    gMapPath = gBwPath & "MapObjects\"
    gOlapPath = gBwPath & "OleOlap\"
    gSysPath = lServerpath & "System\"
    gControlsPath = lServerpath & "Sapgui\"
    gSapChartPath = lServerpath & "system\SAP\"
  Else
    Call SapGuiPathNotFound
    Call ExitCheck(TmpPath, lCheckFileName)
    Exit Sub
  End If
  
  gBexPath = lServerpath
  If Right(gBexPath, 1) <> "\" Then gBexPath = gBexPath & "\"
  gBexPath = gBexPath & "bw\"
  lCheckFile = gBexPath + "wdbrlog.exe"
  If FileExists(lCheckFile) Then
    gBex35FullVersion = GetFileVersion(lCheckFile)
    gBex35MajorRelease = Val(FindVerpart(gBex35FullVersion, 1))                              ' Get Bex350 Release
    gBex35Patch = Val(FindVerpart(gBex35FullVersion, 2))
    gBex35TextPatch = "3.50 Patch " & gBex35Patch
  End If

 
' ----------------------------------------------
  InitIndexes
'    Auto_open

  'Fill SAPGUI Release Info
  If IsSAPGUI750Installed Or IsSAPGUI740Installed Or IsSAPGUI730Installed Or IsSAPGUI720Installed Or IsSAPGUI710Installed Then
    If IsBex750Installed Or IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Then
      Call outPos(gBw7Index, 2, 8, gBex7TextPatch)
    Else
      Call outPos(gBw7Index, 2, 8, "No BI 7.x frontend installed")
    End If
    If IsBex350Installed Then
      Call outPos(gBw35Index, 2, 8, gBex35TextPatch)
    Else
      Call outPos(gBw35Index, 2, 8, "No BW 3.5 frontend installed")
    End If
    If IsSAPGUI710Installed Then
      Call outPos(8, 3, 8, "710 Patch " & gSapGuiPatch)
    ElseIf IsSAPGUI720Installed Then
      Call outPos(8, 3, 8, "720 Patch " & gSapGuiPatch)
    ElseIf IsSAPGUI730Installed Then
      Call outPos(8, 3, 8, "730 Patch " & gSapGuiPatch)
    ElseIf IsSAPGUI740Installed Then
      Call outPos(8, 3, 8, "740 Patch " & gSapGuiPatch)
    ElseIf IsSAPGUI750Installed Then
      Call outPos(8, 3, 8, "750 Patch " & gSapGuiPatch)
    End If
    
  ElseIf IsSAPGUI640Installed Then
    If IsBex700Installed Then
      Call outPos(gBw7Index, 2, 8, gBex7TextPatch)
    Else
      Call outPos(gBw7Index, 2, 8, "No BI 7.xfrontend installed")
    End If
    If IsBex350Installed Then
      Call outPos(gBw35Index, 2, 8, gBex35TextPatch)
    Else
      Call outPos(gBw35Index, 2, 8, "No BW 3.5 frontend installed")
    End If
    Call outPos(8, 3, 8, "640 Patch " & gSapGuiPatch)
  
  Else
    Call outPos(8, 3, 8, lGuiNotInstalled)
    Call ExitCheck(TmpPath, lCheckFileName)
  End If
      
  Call outPos(gBw7Index - 2, 1, 8, "Filename")
  Call outPos(gBw7Index - 2, 2, 8, "File Version on Server")
  Call outPos(gBw7Index - 2, 3, 8, "File Version delivered")
  Call outPos(gBw7Index - 2, 4, 8, "Path")
  Call outPos(gBw7Index - 2, 5, 8, "Date/Time")
  Call outPos(gBw7Index - 2, 6, 8, "Size")

  lIsEnableEvents = Application.EnableEvents
  If lIsEnableEvents Then Application.EnableEvents = False
  
  If IsBex750Installed Or IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Or IsBex700Installed Then
    Call outServerBw7xComponents
    Call outSapSharedComponents(True)
    Call outSyncfusionComponents
  End If
  If IsBex350Installed Then outServerBw35Components
  If IsMapObjectsInstalled Then Call outMapObjects(True)
  If IsOlapInstalled Then Call outOleForOlap(True)
  If IsBex350Installed Then
    Call outServerSapGuiCoreComponents
    Call outAdditionalComponents(True)
  End If
  Call outServerMicrosoftCoreComponents
'    gRange(7, 3).value = ThisWorkbook.Worksheets("Version").Cells(8, 2).value

  If lIsEnableEvents Then Application.EnableEvents = True
  
  Call HideUnused(True)

  gRange.Columns.AutoFit
  gRange.Columns(1).ColumnWidth = 35
  gRange.Columns(2).ColumnWidth = 15
  gRange.Columns(3).ColumnWidth = 15
  gRange.Columns(4).ColumnWidth = 30
  gRange.Columns(5).ColumnWidth = 15
  gRange.Columns(6).ColumnWidth = 15

  If gRedCount > 0 Or gYellowCount > 0 Then
    MsgBox gRedCount & " red signed Files found." & Chr(10) _
            & gYellowCount & " yellow signed Files found." & Chr(10) & Chr(10) _
            & "Please check SAPSETUP.LOG in " & GetProgramFilesFolder & "\SAP\SAPSetup\Logs" & "." & Chr(10) & Chr(10) _
            & "Please see note 197460 for more details.", vbExclamation
  End If

  Call ExitCheck(TmpPath, lCheckFileName)
End Sub

Private Function CheckFileExistsOnly(ByVal fsText As String) As Boolean
  CheckFileExistsOnly = Trim(LCase(fsText)) = "<existsfile>"
End Function

Private Function CheckFileIsOptional(ByVal fsText As String) As Boolean
  CheckFileIsOptional = Trim(LCase(fsText)) = "<optional>"
End Function

Private Function IsNotAvailable(ByVal fsText As String) As Boolean
  IsNotAvailable = (Trim(LCase(fsText)) = "na") Or _
                   (Trim(LCase(fsText)) = "n.a.") Or _
                   (Trim(LCase(fsText)) = "not available")
End Function

Sub PreCalcCheck()
  Call PreCalcCheckInternal(True)
End Sub
Sub PreCalcCheckInternal( _
               ByVal fbExitCheck As Boolean, _
      Optional ByRef f2ndRange As Range = Nothing)
Dim lSheet As Worksheet
Dim lCheckFileName As String
Dim lIsEnableEvents As Boolean
Dim lExcelCount As Integer
Dim lTmp As String
Const lGuiNotInstalled As String = "710, 720, 730, 740 or 750 not installed"
    
  Set lSheet = ThisWorkbook.Worksheets("PreCalc Check")
  Set gRange = lSheet.Cells
  gRange.Range(gRange.Cells(10, 1), gRange.Cells(212, 10)).Clear       'clear the workarea
  gRange.Range(gRange.Cells(3, 2), gRange.Cells(8, 3)).Clear           'clear the General system Info

  On Error Resume Next
  lSheet.Shapes("ButtonPreCalcCheck").Visible = msoFalse
  lSheet.Shapes("txtInfo").Visible = msoFalse
  On Error GoTo 0
  
  lTmp = "Revision: " & GetWorkbookRevision(ThisWorkbook)
  Call outPos(2, 1, 8, lTmp) ', "@")

  'Fill the General system Info
  lCheckFileName = "sapBEX_PreCalc_" & Format(Now, "MMDD_hhmmss") & ".xls"
  Call outPos(2, 2, 8, "Computer Name: ")
  Call outPos(2, 3, 0, GetMyComputerName)
  Call outPos(3, 2, 8, "File Location: ")
  Call outPos(3, 3, 0, TmpPath & lCheckFileName)
  Call outPos(4, 2, 8, "Check date: ")
  Call outPos(4, 3, 0, "'" & Int(Now) & "   " & Format(Now, "ttttt"))
  Call outPos(5, 2, 8, "Excel Version: ")
  lTmp = GetAllInstalledExcelVersions(lExcelCount)
  Call outPos(5, 3, IIf(lExcelCount = 1, 0, 4), lTmp)
  Call outPos(6, 2, 8, "Windows Version: ")
  Call outPos(6, 3, 0, GetOSVersion) 'GetOperatingSystem)
  
  Call outPos(7, 2, 8, "System Manufacturer: ")
  Call outPos(7, 3, 0, GetSystemManufacturer)
  
  Call outPos(8, 2, 8, "System Model: ")
  Call outPos(8, 3, 0, GetSystemModel)
  
  Call outPos(9, 2, 8, "Default Browser: ")
  Call outPos(9, 3, 0, GetDefaultBrowser)

  Call outPos(10, 2, 8, "SAP GUI: ")
  If Not GetPaths Then
    If (gVersionSheet = vbNullString) Or (gSapGuiMajorRelease = 0) Then
      Call outPos(10, 3, 4, lGuiNotInstalled)
    End If
    Call ExitCheck(TmpPath, lCheckFileName)
    Exit Sub
  End If

  'Fill SAPGUI Release Info.
  If IsSAPGUI750Installed Or IsSAPGUI740Installed Or IsSAPGUI730Installed Or IsSAPGUI720Installed Or IsSAPGUI710Installed Then
    If IsBex750Installed Or IsBex740Installed Or IsBex730Installed Or IsBex720Installed Or IsBex710Installed Then
      Call outPos(gBw7Index, 2, 8, gBex7TextPatch)
    Else
      Call outPos(gBw7Index, 2, 8, "No BI 7.x frontend installed")
    End If
    If IsBex350Installed Then
      Call outPos(gBw35Index, 2, 8, gBex35TextPatch)
    Else
      Call outPos(gBw35Index, 2, 8, "No BW 3.5 frontend installed")
    End If
    If Not gBiForA1S Then
      If IsSAPGUI710Installed Then
        Call outPos(10, 3, 8, "710 Patch " & gSapGuiPatch)
      ElseIf IsSAPGUI720Installed Then
        Call outPos(10, 3, 8, "720 Patch " & gSapGuiPatch)
      ElseIf IsSAPGUI730Installed Then
        Call outPos(10, 3, 8, "730 Patch " & gSapGuiPatch)
      ElseIf IsSAPGUI740Installed Then
        Call outPos(10, 3, 8, "740 Patch " & gSapGuiPatch)
      ElseIf IsSAPGUI750Installed Then
        Call outPos(10, 3, 8, "750 Patch " & gSapGuiPatch)
      End If
    End If
    
  ElseIf IsSAPGUI640Installed Then
    If IsBex700Installed Then
      Call outPos(gBw7Index, 2, 8, gBex7TextPatch)
    Else
      Call outPos(gBw7Index, 2, 8, "No BI 7.x frontend installed")
    End If
    If IsBex350Installed Then
      Call outPos(gBw35Index, 2, 8, gBex35TextPatch)
    Else
      Call outPos(gBw35Index, 2, 8, "No BW 3.5 frontend installed")
    End If
    Call outPos(10, 3, 8, "640 Patch " & gSapGuiPatch)
  
    Call ExitCheck(TmpPath, lCheckFileName) 'SAP GUI 64.0 is not supported
  Else
    Call outPos(10, 3, 8, lGuiNotInstalled)
    Call ExitCheck(TmpPath, lCheckFileName)
  End If

  'Is PreCal installed?
  If (Not IsPreCalcInstalled) And fbExitCheck Then
    Call outPos(11, 4, 8, "No PreCalc Server installed")
    Call ExitCheck(TmpPath, lCheckFileName)
  End If
  
  Call outPos(gPreCalcIndex - 2, 1, 8, "Filename")
  Call outPos(gPreCalcIndex - 2, 2, 8, "File Version on PC")
  Call outPos(gPreCalcIndex - 2, 3, 8, "File Version delivered")
  Call outPos(gPreCalcIndex - 2, 4, 8, "Path")
  Call outPos(gPreCalcIndex - 2, 5, 8, "Date/Time")
  Call outPos(gPreCalcIndex - 2, 6, 8, "Size")
  Call outPos(gPreCalcIndex - 2, 7, 8, "CompName")
  Call outPos(gPreCalcIndex - 2, 8, 8, "CLSID")

  Application.CutCopyMode = False
  Range("A2").Select

  lIsEnableEvents = Application.EnableEvents
  If lIsEnableEvents Then Application.EnableEvents = False
  
  Call outPreCalcComponents
  Call outMicrosoftDotNetFramework

  If lIsEnableEvents Then Application.EnableEvents = True
  
  'HideUnused(False)
  gRange.Rows(gBw7Index & ":" & (gMsDotNetFrameworkIndex - 1)).EntireRow.Hidden = True

  gRange.Columns.AutoFit
  'gRange.Columns(1).ColumnWidth = 26
  gRange.Columns(2).ColumnWidth = 18
  gRange.Columns(3).ColumnWidth = 21
  gRange.Columns(4).ColumnWidth = 43
  gRange.Columns(5).ColumnWidth = 15
  gRange.Columns(6).ColumnWidth = 15

'  If gRedCount > 0 Or gYellowCount > 0 Then
'    MsgBox gRedCount & " red signed Files found." & Chr(10) _
'            & gYellowCount & " yellow signed Files found." & Chr(10) & Chr(10) _
'            & "Please check SAPSETUP.LOG in " & GetProgramFilesFolder & "\SAP\SAPSetup\Logs" & "." & Chr(10) & Chr(10) _
'            & "Please see note 197460 for more details.", vbExclamation
'  End If
  
  Set f2ndRange = gRange
  If fbExitCheck Then
    Call ExitCheck(TmpPath, lCheckFileName)
  End If
End Sub

Private Function CheckSignature( _
      ByVal fsFile As String, _
      ByRef fbError As Boolean) As Boolean
Dim bSkip As Boolean
  
  CheckSignature = False
  fbError = False
  
  'Skip check for following file types
  bSkip = False
  If Len(fsFile) > 4 Then
    Select Case LCase(Right(fsFile, 4))
      Case ".tlb":  bSkip = True
    End Select
  End If
  If bSkip Then
    CheckSignature = True
    Exit Function
  End If
  
  If DigitalSignatureExists(fsFile, fbError) Then
    CheckSignature = True
  Else
    If fbError Then
      fbError = False
      If VerifyFileSignature(fsFile, fbError) Then
        CheckSignature = True
      End If
    End If
  End If
End Function

Private Function IsOutputCopyright() As Boolean
Dim sRet As String

  If Not gIsOutputCopyrightEvaluated Then
    sRet = RegistryGetString("Software\SAP\BEx", "SAPBExC-Copyright", hk_CURRENT_USER)
    gIsOutputCopyrightValue = CBool(Trim(sRet) <> vbNullString)
    gIsOutputCopyrightEvaluated = True
  End If
  IsOutputCopyright = gIsOutputCopyrightValue
End Function

'e.g. "myFile.txt" => "myFile"
Public Function GetFilePartOnlyFile(ByVal fsFile As String) As String
Dim lngPos As Long
Dim sTmp As String

  lngPos = InStrRev(fsFile, "\")
  If lngPos > 0 Then sTmp = Right$(fsFile, Len(fsFile) - lngPos) _
                Else sTmp = fsFile
  lngPos = InStrRev(sTmp, ".")
  If lngPos = 0 Then GetFilePartOnlyFile = sTmp _
                Else GetFilePartOnlyFile = Left$(sTmp, lngPos - 1)
End Function
Attribute VB_Name = "modDigitalSignatureExists"
Option Explicit

#If Win64 Then  'not sure about 64 call
Private Declare PtrSafe Function CryptQueryObject Lib "Crypt32.dll" (ByVal dwObjectType As Long, _
    ByVal pvObject As Long, ByVal dwExpectedContentTypeFlags As Long, _
    ByVal dwExpectedFormatTypeFlags As Long, ByVal dwFlags As Long, _
    ByRef pdwMsgAndCertEncodingType As Long, ByRef pdwContentType As Long, _
    ByRef pdwFormatType As Long, ByRef phCertStore As Long, ByRef phMsg As Long, _
    ByRef ppvContext As Long) As Long
#Else
Private Declare Function CryptQueryObject Lib "Crypt32.dll" (ByVal dwObjectType As Long, _
    ByVal pvObject As Long, ByVal dwExpectedContentTypeFlags As Long, _
    ByVal dwExpectedFormatTypeFlags As Long, ByVal dwFlags As Long, _
    ByRef pdwMsgAndCertEncodingType As Long, ByRef pdwContentType As Long, _
    ByRef pdwFormatType As Long, ByRef phCertStore As Long, ByRef phMsg As Long, _
    ByRef ppvContext As Long) As Long
#End If

Private Const CERT_QUERY_OBJECT_FILE As Long = &H1
Private Const CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED As Long = 10
Private Const CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED As Long = 2 ^ CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED
Private Const CERT_QUERY_FORMAT_BINARY As Long = &H1
Private Const CERT_QUERY_FORMAT_FLAG_BINARY  As Long = 2 ^ CERT_QUERY_FORMAT_BINARY


Public Function DigitalSignatureExists( _
            ByVal fsFile As String, _
            ByRef fbError As Boolean) As Boolean
Dim lngResult As Long
Dim dwEncoding As Long
Dim dwContentType As Long
Dim dwFormatType As Long
Dim hStore As Long
Dim hMsg As Long

  DigitalSignatureExists = False
  fbError = False
  
#If Win64 Then
  Exit Function
#Else
  On Error Resume Next
  lngResult = CryptQueryObject( _
                CERT_QUERY_OBJECT_FILE, ByVal StrPtr(fsFile), _
                CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED, _
                CERT_QUERY_FORMAT_FLAG_BINARY, 0&, dwEncoding, _
                dwContentType, dwFormatType, hStore, hMsg, ByVal 0&)
  If Err.Number <> 0 Then
    fbError = True
  Else
    If lngResult > 0 Then DigitalSignatureExists = True
  End If
  On Error GoTo 0
#End If
End Function



Attribute VB_Name = "modVerifyFileSignature"
Option Explicit

#If Win64 Then  'not sure about 64 call
Private Declare PtrSafe Function WinVerifyTrust Lib "wintrust.dll" (ByVal hwnd As Long, ByRef pgActionID As GUID, ByRef pWVTData As Any) As Long
Private Declare PtrSafe Function CLSIDFromString Lib "ole32.dll" (ByVal lpszProgID As Long, pCLSID As GUID) As Long
#Else
Private Declare Function WinVerifyTrust Lib "wintrust.dll" (ByVal hwnd As Long, ByRef pgActionID As GUID, ByRef pWVTData As Any) As Long
Private Declare Function CLSIDFromString Lib "ole32.dll" (ByVal lpszProgID As Long, pCLSID As GUID) As Long
#End If

Private Type GUID
  Data1 As Long
  Data2 As Integer
  Data3 As Integer
  Data4(7) As Byte
End Type

Private Type WINTRUST_FILE_INFO
  cbStruct As Long
  pcwszFilePath As String
  hFile As Long
  pgKnownSubject As GUID
End Type

Private Type WINTRUST_DATA
  cbStruct As Long
  pPolicyCallbackData As Long
  pSIPClientData As Long
  dwUIChoice As Long
  fdwRevocationChecks As Long
  dwUnionChoice As Long
  pFile As Long
  pCatalog As Long
  pBlob As Long
  pSgnr As Long
  pCert As Long
  dwStateAction As Long
  hWVTStateData As Long
  pwszURLReference As String
  dwProvFlags As Long
  dwUIContext As Long
End Type

Private Const WTD_UI_NONE = 2
Private Const WTD_REVOKE_NONE = 0
Private Const WTD_CHOICE_FILE = 1
Private Const WTD_SAFER_FLAG = &H100

Private Const TRUST_E_PROVIDER_UNKNOWN = -2146762751
Private Const TRUST_E_ACTION_UNKNOWN = -2146762750
Private Const TRUST_E_SUBJECT_FORM_UNKNOWN = -2146762749
Private Const TRUST_E_SUBJECT_NOT_TRUSTED = -2146762748

Public Function VerifyFileSignature( _
              ByVal sFile As String, _
              ByRef fsError As Boolean) As Boolean
Dim uVerifyV2 As GUID
Dim uWTfileinfo As WINTRUST_FILE_INFO
Dim uWTdata As WINTRUST_DATA
Dim lRet As Long

  VerifyFileSignature = False
  fsError = False
  
#If Win64 Then
  Exit Function
#Else

  On Error GoTo VerifyFileSignature_Error
  With uWTfileinfo
    .cbStruct = Len(uWTfileinfo)
    .pcwszFilePath = sFile
  End With
  
  With uWTdata
    .cbStruct = Len(uWTdata)
    .dwUIChoice = WTD_UI_NONE
    .fdwRevocationChecks = WTD_REVOKE_NONE
    .dwUnionChoice = WTD_CHOICE_FILE
    .dwProvFlags = WTD_SAFER_FLAG
    .pFile = VarPtr(uWTfileinfo)
  End With
  
  If CLSIDFromString(StrPtr("{00AAC56B-CD44-11d0-8CC2-00C04FC295EE}"), uVerifyV2) = 0 Then
    lRet = WinVerifyTrust(0, uVerifyV2, uWTdata)
    VerifyFileSignature = CBool(lRet = 0)
  End If
  On Error GoTo 0
  Exit Function
  
VerifyFileSignature_Error:
  On Error GoTo 0
  fsError = True
#End If
End Function



Attribute VB_Name = "registry"
Option Explicit
Option Private Module

#If Win64 Then
Private Declare PtrSafe Function GetTempPath Lib "kernel32" Alias "GetTempPathA" _
  (ByVal nBufferLength As LongPtr, ByVal lpBuffer As String) As Long
#Else
Private Declare Function GetTempPath Lib "kernel32" Alias "GetTempPathA" _
  (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
#End If

#If Win64 Then  'not sure about 64 call
Private Declare PtrSafe Function GetSystemDirectory Lib "kernel32" Alias "GetSystemDirectoryA" _
    (ByVal lpBuffer As String, ByVal nSize As Long) As Long
#Else
Private Declare Function GetSystemDirectory Lib "kernel32" Alias "GetSystemDirectoryA" _
    (ByVal lpBuffer As String, ByVal nSize As Long) As Long
#End If

#If Win64 Then
Private Declare PtrSafe Function GetWindowsDirectory Lib "kernel32" Alias "GetWindowsDirectoryA" _
  (ByVal lpBuffer As String, ByVal nSize As Long) As Long
#Else
Private Declare Function GetWindowsDirectory Lib "kernel32" Alias "GetWindowsDirectoryA" _
  (ByVal lpBuffer As String, ByVal nSize As Long) As Long
#End If

#If Win64 Then  'not sure about 64 call
Private Declare PtrSafe Function FindFirstFile Lib "kernel32" Alias "FindFirstFileA" _
  (ByVal lpFileName As String, lpFindFileData As WIN32_FIND_DATA) As Long
Private Declare PtrSafe Function FindClose Lib "kernel32" (ByVal hFindFile As Long) As Long
#Else
Private Declare Function FindFirstFile Lib "kernel32" Alias "FindFirstFileA" _
  (ByVal lpFileName As String, lpFindFileData As WIN32_FIND_DATA) As Long
Private Declare Function FindClose Lib "kernel32" (ByVal hFindFile As Long) As Long
#End If

#If Win64 Then  'not sure about 64 call
Private Declare PtrSafe Function GetComputerName Lib "kernel32" _
   Alias "GetComputerNameA" (ByVal lpBuffer As String, nSize As Long) As Long
#Else
Private Declare Function GetComputerName Lib "kernel32" _
   Alias "GetComputerNameA" (ByVal lpBuffer As String, nSize As Long) As Long
#End If

'F|fffd|r GetSpecialFolder
'shfolder.dll bereitet Probleme bei der Installation: Autom. Registrierung nicht m|fffd|glich!!!
#If Win64 Then  'not sure about 64 call
Private Declare PtrSafe Function SHGetFolderPath Lib "shfolder.dll" Alias "SHGetFolderPathA" _
  (ByVal hwndOwner As Long, ByVal nFolder As Long, ByVal hToken As Long, _
   ByVal dwReserved As Long, ByVal lpszPath As String) As Long
#Else
Private Declare Function SHGetFolderPath Lib "shfolder.dll" Alias "SHGetFolderPathA" _
  (ByVal hwndOwner As Long, ByVal nFolder As Long, ByVal hToken As Long, _
   ByVal dwReserved As Long, ByVal lpszPath As String) As Long
#End If
'F|fffd|r GetSpecialFolder
#If Win64 Then
Private Declare PtrSafe Function SHGetPathFromIDList Lib "Shell32" Alias "SHGetPathFromIDListA" _
  (ByVal pidl As Long, ByVal pszPath As String) As Long
#Else
Private Declare Function SHGetPathFromIDList Lib "Shell32" Alias "SHGetPathFromIDListA" _
  (ByVal pidl As Long, ByVal pszPath As String) As Long
'F|fffd|r GetSpecialFolder
#End If
'F|fffd|r GetSpecialFolder
#If Win64 Then  'not sure about 64 call
Private Declare PtrSafe Function SHGetSpecialFolderLocation Lib "Shell32" _
  (ByVal hwndOwner As Long, ByVal nFolder As Long, pidl As Long) As Long
#Else
Private Declare Function SHGetSpecialFolderLocation Lib "Shell32" _
  (ByVal hwndOwner As Long, ByVal nFolder As Long, pidl As Long) As Long
#End If
'F|fffd|r GetSpecialFolder
#If Win64 Then  'not sure about 64 call
Private Declare PtrSafe Sub CoTaskMemFree Lib "ole32" (ByVal pv As Long)
#Else
Private Declare Sub CoTaskMemFree Lib "ole32" (ByVal pv As Long)
#End If

'F|fffd|r GetFileDescription
#If Win64 Then  'not sure about 64 call
Private Declare PtrSafe Function SHGetFileInfo Lib "Shell32" Alias "SHGetFileInfoA" _
    (ByVal pszPath As Any, ByVal dwFileAttributes As Long, psfi As SHFILEINFO, _
    ByVal cbFileInfo As Long, ByVal uFlags As Long) As Long
#Else
Private Declare Function SHGetFileInfo Lib "Shell32" Alias "SHGetFileInfoA" _
    (ByVal pszPath As Any, ByVal dwFileAttributes As Long, psfi As SHFILEINFO, _
    ByVal cbFileInfo As Long, ByVal uFlags As Long) As Long
#End If
Private Const MAX_PATH As Long = 260
Private Type SHFILEINFO
    hIcon As Long
    iIcon As Long
    dwAttributes As Long
    szDisplayName As String * MAX_PATH
    szTypeName As String * 80
End Type

Private Type FILETIME
     dwLowDate  As Long
     dwHighDate As Long
End Type

Private Type WIN32_FIND_DATA
   dwFileAttributes As Long
   ftCreationTime As FILETIME
   ftLastAccessTime As FILETIME
   ftLastWriteTime As FILETIME
   nFileSizeHigh As Long
   nFileSizeLow As Long
   dwReserved0 As Long
   dwReserved1 As Long
   cFileName As String * 260
   cAlternate As String * 14
End Type

Type SECURITY_ATTRIBUTES
    nLength As Long
    lpSecurityDescriptor As Long
    bInheritHandle As Long
End Type
#If Win64 Then  'not sure about 64 call
Private Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" ( _
    ByVal hKey As LongPtr, ByVal lpSubKey As String, ByVal ulOptions As Long, _
    ByVal samDesired As Long, phkResult As LongPtr) As Long
Private Declare PtrSafe Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" ( _
    ByVal hKey As LongPtr, ByVal lpValueName As String, ByVal lpReserved As Long, _
    lpType As Long, lpData As Any, lpcbData As Long) As Long
    ' Note that if you declare the lpData parameter as String, you must pass it ByVal
Private Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As LongPtr) As Long
Private Declare PtrSafe Function RegEnumKeyEx Lib "advapi32.dll" Alias "RegEnumKeyExA" _
    (ByVal hKey As LongPtr, ByVal dwIndex As Long, ByVal lpName As String, _
    lpcbName As Long, ByVal lpReserved As Long, ByVal lpClass As String, _
    lpcbClass As Long, lpftLastWriteTime As FILETIME) As Long
Private Declare PtrSafe Function RegEnumValue Lib "advapi32.dll" Alias "RegEnumValueA" ( _
    ByVal hKey As LongPtr, ByVal dwIndex As Long, ByVal lpValueName As String, _
    lpcbValueName As Long, ByVal lpReserved As Long, lpType As Long, _
    lpData As Any, lpcbData As Long) As Long
#Else
Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" ( _
    ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, _
    ByVal samDesired As Long, phkResult As Long) As Long
Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" ( _
    ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, _
    lpType As Long, lpData As Any, lpcbData As Long) As Long
    ' Note that if you declare the lpData parameter as String, you must pass it ByVal
Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long
Private Declare Function RegEnumKeyEx Lib "advapi32.dll" Alias "RegEnumKeyExA" _
    (ByVal hKey As Long, ByVal dwIndex As Long, ByVal lpName As String, _
    lpcbName As Long, ByVal lpReserved As Long, ByVal lpClass As String, _
    lpcbClass As Long, lpftLastWriteTime As FILETIME) As Long
Private Declare Function RegEnumValue Lib "advapi32.dll" Alias "RegEnumValueA" ( _
    ByVal hKey As Long, ByVal dwIndex As Long, ByVal lpValueName As String, _
    lpcbValueName As Long, ByVal lpReserved As Long, lpType As Long, _
    lpData As Any, lpcbData As Long) As Long
#End If

#If Win64 Then  'not sure about 64 call
Private Declare PtrSafe Function GetUserName Lib "advapi32.dll" Alias "GetUserNameA" ( _
    ByVal lpBuffer As String, nSize As Long) As Long
#Else
Private Declare Function GetUserName Lib "advapi32.dll" Alias "GetUserNameA" ( _
    ByVal lpBuffer As String, nSize As Long) As Long
#End If

Public Enum HKeyEnum
  hk_NotDefined
  hk_CLASSES_ROOT
  hk_CURRENT_USER
  hk_LOCAL_MACHINE
  hk_USERS
  hk_CURRENT_CONFIG
End Enum

Private Const HKEY_CLASSES_ROOT As Long = &H80000000
Private Const HKEY_LOCAL_MACHINE As Long = &H80000002
Private Const REG_SZ As Long = 1                   'Unicode null terminated string
Private Const REG_EXPAND_SZ As Long = 2            'Unicode null terminated string
Private Const REG_DWORD As Long = 4
Private Const ERROR_SUCCESS As Long = 0&
Private Const ERROR_NO_MORE_ITEMS As Long = 259

'Const SYNCHRONIZE = &H100000
'Const STANDARD_RIGHTS_READ = &H20000
'Const KEY_QUERY_VALUE = &H1
'Const KEY_ENUMERATE_SUB_KEYS = &H8
'Const KEY_NOTIFY = &H10
'Const KEY_READ = ((STANDARD_RIGHTS_READ Or _
'                  KEY_QUERY_VALUE Or _
'                  KEY_ENUMERATE_SUB_KEYS Or _
'                  KEY_NOTIFY) And _
'                  (Not SYNCHRONIZE))
Private Const KEY_READ As Long = &H20019

Function RegistryEntry( _
              ByVal key1 As String, _
              ByVal key2 As String, _
     Optional ByVal fHKey As Long = 0) As String
#If Win64 Then
Dim hRegKey As LongPtr
Dim hRegSubKey As LongPtr
#Else
Dim hRegKey As Long
Dim hRegSubKey As Long
#End If
Dim keyName1 As String * 80: keyName1 = key1 & vbNullChar
Dim keyName2 As String * 80: keyName2 = key2 & vbNullChar
Dim itemBuffer As String * 255
Dim itemLength As Long
Const KEY_QUERY_VALUE = &H1
   
  If fHKey = 0 Then fHKey = HKEY_CLASSES_ROOT
  If RegOpenKeyEx(fHKey, keyName1, 0, KEY_QUERY_VALUE, hRegKey) = 0 Then
    If RegOpenKeyEx(hRegKey, keyName2, 0, KEY_QUERY_VALUE, hRegSubKey) = 0 Then
      itemLength = 255
      RegQueryValueEx hRegSubKey, vbNullString, 0, 1, ByVal itemBuffer, itemLength
      RegQueryValueEx hRegSubKey, vbNullString, 0, 1, ByVal itemBuffer, itemLength
      RegistryEntry = Left(itemBuffer, itemLength - 1)
      RegCloseKey hRegKey
    End If
  End If
End Function

Public Function RegistryGetString( _
               ByVal fsKeyName As String, _
      Optional ByVal fsValueName As String = vbNullString, _
      Optional ByVal fHKey As HKeyEnum = hk_LOCAL_MACHINE, _
      Optional ByVal fbIsString As Boolean = True) As String
'Aufruf: MsgBox RegistryGetString("Software\Corel", "UserName")
#If Win64 Then
Dim lngHKey As LongPtr
#Else
Dim lngHKey As Long
#End If
Dim lngType As Long
Dim lngValueLen As Long
Dim sValue As String
Dim lngOpenHKey As Long
Dim lngValue As Long
Dim bOK As Boolean

  Select Case fHKey
    Case hk_NotDefined:     lngOpenHKey = &H80000002    'Default!
    Case hk_CLASSES_ROOT:   lngOpenHKey = &H80000000
    Case hk_CURRENT_USER:   lngOpenHKey = &H80000001
    Case hk_LOCAL_MACHINE:  lngOpenHKey = &H80000002
    Case hk_USERS:          lngOpenHKey = &H80000003
    Case hk_CURRENT_CONFIG: lngOpenHKey = &H80000005
  End Select
  
  RegistryGetString = vbNullString
  If RegOpenKeyEx(lngOpenHKey, fsKeyName, 0, KEY_READ, lngHKey) = 0 Then
    If fbIsString Then
      lngValueLen = 256: sValue = String$(lngValueLen, 0)
      If RegQueryValueEx(lngHKey, fsValueName, 0, lngType, ByVal sValue, lngValueLen) = 0 Then
        If (lngType = REG_EXPAND_SZ) Or (lngType = REG_SZ) Then _
          RegistryGetString = Left$(sValue, lngValueLen - 1)
      End If
    Else
      If RegQueryValueEx(lngHKey, fsValueName, 0, lngType, lngValue, 4) = 0 Then
        If lngType = REG_DWORD Then RegistryGetString = CStr(lngValue)
      End If
    End If
    Call RegCloseKey(lngHKey)
  End If
  
  If (Not fbIsString) And (RegistryGetString = vbNullString) Then RegistryGetString = 0
End Function

Public Function TmpPath() As String
Dim tempPathBuffer As String * 255
  GetTempPath 255, tempPathBuffer
  TmpPath = NullTrim(tempPathBuffer)
End Function

Public Function SysPath() As String
Dim sysPathBuffer As String * 255
  GetSystemDirectory sysPathBuffer, 255
  SysPath = NullTrim(sysPathBuffer)
End Function

Public Function WinPath() As String
Dim sysPathBuffer As String * 255
  GetWindowsDirectory sysPathBuffer, 255
  WinPath = NullTrim(sysPathBuffer)
End Function

Public Function NullTrim(fString As String) As String
  NullTrim = Left(fString, InStr(fString, vbNullChar) - 1)
End Function

Public Function FileExists(ByVal fsFile As String) As Boolean
Dim WFD As WIN32_FIND_DATA
Dim lngFile As Long
Const INVALID_HANDLE_VALUE As Long = -1
Const FILE_ATTRIBUTE_DIRECTORY As Long = &H10
   
  lngFile = FindFirstFile(fsFile, WFD)
  FileExists = (lngFile <> INVALID_HANDLE_VALUE) And _
               (Not (WFD.dwFileAttributes And FILE_ATTRIBUTE_DIRECTORY) = FILE_ATTRIBUTE_DIRECTORY)
  Call FindClose(lngFile)
End Function

Public Function FolderExists(ByVal iFolderPath As String) As Boolean
Dim fsoTmp As Object

  Set fsoTmp = CreateObject("Scripting.FileSystemObject")
  FolderExists = fsoTmp.FolderExists(iFolderPath)
  Set fsoTmp = Nothing
End Function

Private Function GetSpecialFolder(ByVal flngCSIDL As Long, Optional flngHwnd As Long = 0) As String
Dim lngPidl As Long, sPath As String

'Const CSIDL_DESKTOP = &H0                 '{desktop}
'Const CSIDL_INTERNET = &H1                'Internet Explorer (icon on desktop)
'Const CSIDL_PROGRAMS = &H2                'Start Menu\Programs
'Const CSIDL_CONTROLS = &H3                'My Computer\Control Panel
'Const CSIDL_PRINTERS = &H4                'My Computer\Printers
'Const CSIDL_PERSONAL = &H5                'My Documents
'Const CSIDL_FAVORITES = &H6               '{user}\Favourites
'Const CSIDL_STARTUP = &H7                 'Start Menu\Programs\Startup
'Const CSIDL_RECENT = &H8                  '{user}\Recent
'Const CSIDL_SENDTO = &H9                  '{user}\SendTo
'Const CSIDL_BITBUCKET = &HA               '{desktop}\Recycle Bin
'Const CSIDL_STARTMENU = &HB               '{user}\Start Menu
'Const CSIDL_DESKTOPDIRECTORY = &H10       '{user}\Desktop
'Const CSIDL_DRIVES = &H11                 'My Computer
'Const CSIDL_NETWORK = &H12                'Network Neighbourhood
'Const CSIDL_NETHOOD = &H13                '{user}\nethood
'Const CSIDL_FONTS = &H14                  'windows\fonts
'Const CSIDL_TEMPLATES = &H15
'Const CSIDL_COMMON_STARTMENU = &H16       'All Users\Start Menu
'Const CSIDL_COMMON_PROGRAMS = &H17        'All Users\Programs
'Const CSIDL_COMMON_STARTUP = &H18         'All Users\Startup
'Const CSIDL_COMMON_DESKTOPDIRECTORY = &H19 'All Users\Desktop
'Const CSIDL_APPDATA = &H1A                '{user}\Application Data
'Const CSIDL_PRINTHOOD = &H1B              '{user}\PrintHood
'Const CSIDL_LOCAL_APPDATA = &H1C          '{user}\Local Settings\Application Data (non roaming)
'Const CSIDL_ALTSTARTUP = &H1D             'non localized startup
'Const CSIDL_COMMON_ALTSTARTUP = &H1E      'non localized common startup
'Const CSIDL_COMMON_FAVORITES = &H1F
'Const CSIDL_INTERNET_CACHE = &H20
'Const CSIDL_COOKIES = &H21
'Const CSIDL_HISTORY = &H22
'Const CSIDL_COMMON_APPDATA = &H23          'All Users\Application Data
'Const CSIDL_WINDOWS = &H24                 'GetWindowsDirectory()
'Const CSIDL_SYSTEM = &H25                  'GetSystemDirectory()
'Const CSIDL_PROGRAM_FILES = &H26           'C:\Program Files
'Const CSIDL_MYPICTURES = &H27              'C:\Program Files\My Pictures
'Const CSIDL_PROFILE = &H28                 'USERPROFILE
'Const CSIDL_SYSTEMX86 = &H29               'x86 system directory on RISC
'Const CSIDL_PROGRAM_FILESX86 = &H2A        'x86 C:\Program Files on RISC
'Const CSIDL_PROGRAM_FILES_COMMON = &H2B    'C:\Program Files\Common
'Const CSIDL_PROGRAM_FILES_COMMONX86 = &H2C 'x86 Program Files\Common on RISC
'Const CSIDL_COMMON_TEMPLATES = &H2D        'All Users\Templates
'Const CSIDL_COMMON_DOCUMENTS = &H2E        'All Users\Documents
'Const CSIDL_COMMON_ADMINTOOLS = &H2F       'All Users\Start Menu\Programs\Administrative Tools
'Const CSIDL_ADMINTOOLS = &H30              '{user}\Start Menu\Programs\Administrative Tools
'Const CSIDL_FLAG_CREATE = &H8000&          'combine with CSIDL_ value to force create on SHGetSpecialFolderLocation()
'Const CSIDL_FLAG_DONT_VERIFY = &H4000      'combine with CSIDL_ value to force create on SHGetSpecialFolderLocation()
'Const CSIDL_FLAG_MASK = &HFF00             'mask for all possible flag values

'Most wanted:
'Const CSIDL_DESKTOP As Long = &H0
'Const CSIDL_PROGRAMS As Long = &H2
'Const CSIDL_STARTMENU As Long = &HB
'Const CSIDL_DESKTOPDIRECTORY As Long = &H10
     
  GetSpecialFolder = vbNullString
  If SHGetSpecialFolderLocation(flngHwnd, flngCSIDL, lngPidl) = 0 Then
    sPath = Space$(260)
    If SHGetPathFromIDList(ByVal lngPidl, ByVal sPath) Then
      GetSpecialFolder = GetDetermineNullString(sPath)
    End If
  End If
  Call CoTaskMemFree(lngPidl)
  
  '2. Versuch
  If GetSpecialFolder = vbNullString Then
    sPath = Space$(260)
    If SHGetFolderPath(flngHwnd, flngCSIDL, -1, &H0, sPath) = 0 Then
      GetSpecialFolder = GetDetermineNullString(sPath)
    End If
  End If
End Function

'Gibt String Null-terminiert zur|fffd|ck, der mit fester L|fffd|nge aus API kommt.
Public Function GetDetermineNullString(ByVal fsIn As String) As String
Dim lngTmp As Long
  GetDetermineNullString = vbNullString
  lngTmp = InStr(fsIn, Chr(0))
  If lngTmp = 0 Then Exit Function
  GetDetermineNullString = Left$(fsIn, lngTmp - 1)
End Function

Public Function GetProgramFilesCommonFolder() As String
Const CSIDL_PROGRAM_FILES_COMMON = &H2B    'C:\Program Files\Common
  GetProgramFilesCommonFolder = GetSpecialFolder(CSIDL_PROGRAM_FILES_COMMON)
End Function

Public Function GetProgramFilesFolder() As String
Const CSIDL_PROGRAM_FILES = &H26           'C:\Program Files
  GetProgramFilesFolder = GetSpecialFolder(CSIDL_PROGRAM_FILES)
End Function

Public Function GetMyComputerName() As String
Dim sTmp As String
Const MAX_COMPUTERNAME As Long = 15
   
  GetMyComputerName = vbNullString
  sTmp = Space(MAX_COMPUTERNAME + 1)
  If GetComputerName(sTmp, Len(sTmp)) <> 0 Then
    GetMyComputerName = GetDetermineNullString(sTmp)
  End If
End Function

Public Function GetAllInstalledDotNetFrameworks() As Collection
Dim colResult As Collection
Dim sTmp As String
Dim iLoop As Integer

  Set colResult = RegistryLoopTree("SOFTWARE\Microsoft\NET Framework Setup\NDP", hk_LOCAL_MACHINE, False)
  
  If Not colResult Is Nothing Then
    If colResult.Count > 0 Then
      'Remove CDF
      For iLoop = colResult.Count To 1 Step -1
        If colResult.Item(iLoop) = UCase("CDF") Then
          colResult.Remove (iLoop)
        End If
      Next
    End If
    
    'Check .Net Framework 4.5 and higher
    'https://msdn.microsoft.com/de-de/library/hh925568(v=vs.110).aspx
    If colResult.Count > 0 Then
      For iLoop = colResult.Count To 1 Step -1
        If colResult.Item(iLoop) = LCase("v4") Then
          colResult.Remove (iLoop)
          sTmp = RegistryGetString("SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full", "Release", hk_LOCAL_MACHINE, False)
          If Trim(sTmp) <> vbNullString Then
            If IsNumeric(sTmp) Then
              Select Case Val(sTmp)
                Case 378389:  colResult.Add "v4.5"
                Case 378675:  colResult.Add "v4.5.1"  'installiert mit Windows 8.1 oder Windows Server 2012 R2
                Case 378758:  colResult.Add "v4.5.1"  'installiert unter Windows 8, Windows 7 SP1 oder Windows Vista SP2
                Case 379893:  colResult.Add "v4.5.2"
                Case 381029:  colResult.Add "v4.6 RC"
                Case 393295:  colResult.Add "v4.6"    'for OS older than Win 10
                Case 393297:  colResult.Add "v4.6"    'for OS starting from Win 10
                Case 394271:  colResult.Add "v4.6.1"  'for OS older than Win 10
                Case 394254:  colResult.Add "v4.6.1"  'for OS starting from Win 10
                Case 394806:  colResult.Add "v4.6.2"  'for OS older than Win 10
                Case 394802:  colResult.Add "v4.6.2"  'for OS starting from Win 10
                Case Else:    colResult.Add sTmp
              End Select
              Exit For
            End If
          End If
        End If
      Next
    End If
  End If

  Set GetAllInstalledDotNetFrameworks = colResult
End Function
Public Function GetAllLocalPreCalcServers() As Collection
  Set GetAllLocalPreCalcServers = RegistryLoopTree( _
          "SAP.BusinessExplorer.Analyzer\BW_PRECALC\Servers", hk_CLASSES_ROOT, False)
End Function

Public Function RegistryNextSubTree( _
              ByVal fsHeaderTree As String, _
              ByVal fHKey As HKeyEnum) As String
Dim colTmp As Collection
Dim sTmp As String
Dim iLoop As Integer
  
  Set colTmp = RegistryLoopTree(fsHeaderTree, fHKey, False, True)
  If Not colTmp Is Nothing Then
    If colTmp.Count > 0 Then
      For iLoop = colTmp.Count To 1 Step -1
        If sTmp <> vbNullString Then sTmp = sTmp & "; "
        sTmp = sTmp & colTmp.Item(iLoop)
      Next
    End If
  End If
  RegistryNextSubTree = sTmp
End Function

Public Function RegistryEnumerateDataValues( _
              ByVal fsHeaderTree As String, _
              ByVal fHKey As HKeyEnum) As String
Dim colTmp As Collection
Dim sTmp As String
Dim iLoop As Integer
  
  Set colTmp = RegistryLoopTree(fsHeaderTree, fHKey, True)
  If Not colTmp Is Nothing Then
    If colTmp.Count > 0 Then
      For iLoop = colTmp.Count To 1 Step -1
        If sTmp <> vbNullString Then sTmp = sTmp & "; "
        sTmp = sTmp & colTmp.Item(iLoop)
      Next
    End If
  End If
  RegistryEnumerateDataValues = sTmp
End Function

Private Function RegistryLoopTree( _
              ByVal fsHeaderTree As String, _
              ByVal fHKey As HKeyEnum, _
              ByVal fbOnlyDataValues As Boolean, _
     Optional ByVal fbOnlyOneValue As Boolean = False) As Collection
#If Win64 Then
Dim lngKey As LongPtr
#Else
Dim lngKey As Long
#End If
Dim colSubKeys As Collection
Dim lngBufSize As Long
Dim sClassBuffer As String * 256
Dim sClassBufSize As Long
Dim typLastWriteTime As FILETIME

Dim sSubKeyName As String
Dim iIndex As Integer
Dim lngResult As Long
Dim lngOpenHKey As Long
Dim lngData As Long
Dim lngDataLen As Long
Dim lngValueLen As Long
Dim sValue As String

Const ERR_MORE_DATA As Long = 234

'Const SYNCHRONIZE = &H100000
'Const STANDARD_RIGHTS_READ = &H20000
'Const KEY_QUERY_VALUE = &H1
'Const KEY_ENUMERATE_SUB_KEYS = &H8
'Const KEY_NOTIFY = &H10
'Const KEY_READ = ((STANDARD_RIGHTS_READ Or _
'                  KEY_QUERY_VALUE Or _
'                  KEY_ENUMERATE_SUB_KEYS Or _
'                  KEY_NOTIFY) And _
'                  (Not SYNCHRONIZE))
Const KEY_READ As Long = &H20019
'Const KEY_ALL_ACCESS As Long = &H3F      'Only if Admin

  Select Case fHKey
    Case hk_NotDefined:     lngOpenHKey = &H80000002    'Default!
    Case hk_CLASSES_ROOT:   lngOpenHKey = &H80000000
    Case hk_CURRENT_USER:   lngOpenHKey = &H80000001
    Case hk_LOCAL_MACHINE:  lngOpenHKey = &H80000002
    Case hk_USERS:          lngOpenHKey = &H80000003
    Case hk_CURRENT_CONFIG: lngOpenHKey = &H80000005
  End Select

  Set colSubKeys = New Collection
  If RegOpenKeyEx(lngOpenHKey, fsHeaderTree, 0&, KEY_READ, lngKey) <> 0 Then
    If Not fbOnlyOneValue Then colSubKeys.Add "Unable to open registry-key: " & fsHeaderTree
    Exit Function
  End If

  iIndex = 0
  Do
    If Not fbOnlyDataValues Then
      
      sClassBuffer = ""
      sClassBufSize = 0
      lngBufSize = 256
      sSubKeyName = Space$(lngBufSize)
  
      lngResult = RegEnumKeyEx(lngKey, iIndex, sSubKeyName, lngBufSize, 0, sClassBuffer, _
              sClassBufSize, typLastWriteTime)
      If lngResult <> ERR_MORE_DATA And lngResult <> 0 Then Exit Do
      sSubKeyName = Left$(sSubKeyName, InStr(sSubKeyName, Chr$(0)) - 1)
      colSubKeys.Add sSubKeyName
      lngResult = ERROR_SUCCESS   'not to jump out of loop
    
    Else

      lngValueLen = 2000
      sValue = String(lngValueLen, 0)
      lngDataLen = 2000
      lngResult = RegEnumValue(lngKey, _
                               iIndex, _
                               ByVal sValue, _
                               lngValueLen, _
                               0&, _
                               REG_DWORD, _
                               ByVal lngData, _
                               lngDataLen)
      If lngResult = ERROR_SUCCESS Then
       sValue = Left(sValue, lngValueLen)
       colSubKeys.Add sValue & " = " & RegistryGetString(fsHeaderTree, sValue, fHKey, False)
      End If
  
      If fbOnlyOneValue Then lngResult = ERROR_SUCCESS
    End If
    iIndex = iIndex + 1
  Loop While lngResult = ERROR_SUCCESS
  RegCloseKey lngKey
  
  Set RegistryLoopTree = colSubKeys
End Function

'Office 2010: http://support.microsoft.com/kb/2186281
'Office 2013: http://support.microsoft.com/kb/2786054/en-us
Public Function GetAllInstalledExcelVersions(ByRef fiCount As Integer) As String
#If Win64 Then
Dim lKey As LongPtr
#Else
Dim lKey As Long
#End If

Dim lngBufSize As Long
Dim lClassBuffer As String * 256
Dim lClassBufSize As Long
Dim typLastWriteTime As FILETIME

Dim colSubKeys As Collection
Dim lSubKeyName As String
Dim lIndex As Integer
Dim lngResult As Long
Dim lTmp1 As String
Dim lTmp2 As String
Dim lRet As String
Const csExcel14_32Bit As String = "90140000-0011-0000-0000-0000000FF1CE"
Const csExcel14_64Bit As String = "90140000-0011-0000-1000-0000000FF1CE"

Const ERR_MORE_DATA As Long = 234
Const csInSubKey As String = "SOFTWARE\Microsoft\Office"
  
  fiCount = 0
  Set colSubKeys = New Collection
  If RegOpenKeyEx(HKEY_LOCAL_MACHINE, csInSubKey, 0&, KEY_READ, lKey) <> 0 Then
    GetAllInstalledExcelVersions = "Unable to open registry-key: " & csInSubKey
    Exit Function
  End If

  'Get Office versions
  lIndex = 0
  Do
    lClassBuffer = ""
    lClassBufSize = 0
    lngBufSize = 256
    lSubKeyName = Space$(lngBufSize)

    lngResult = RegEnumKeyEx(lKey, lIndex, lSubKeyName, lngBufSize, 0, lClassBuffer, _
            lClassBufSize, typLastWriteTime)
    If lngResult <> ERR_MORE_DATA And lngResult <> 0 Then Exit Do

    lSubKeyName = Left$(lSubKeyName, InStr(lSubKeyName, Chr$(0)) - 1)
    If IsNumeric(lSubKeyName) Then colSubKeys.Add lSubKeyName
    lIndex = lIndex + 1
  Loop
  RegCloseKey lKey
  
  If colSubKeys.Count > 0 Then
    'Get Excel versions
    For lIndex = 1 To colSubKeys.Count
      lTmp2 = RegistryGetString(csInSubKey & "\" & colSubKeys(lIndex) & "\Excel\InstallRoot", "Path", hk_LOCAL_MACHINE)
      If lTmp2 <> vbNullString Then
        If Right(lTmp2, 1) <> "\" Then lTmp2 = lTmp2 & "\"
        If FileExists(lTmp2 & "excel.exe") Then
          fiCount = fiCount + 1
          If lRet <> vbNullString Then lRet = lRet & "; "
          lTmp1 = GetFileVersion(lTmp2 & "excel.exe")
          lTmp1 = GetExcelTextVersion(lTmp1)
          
          If CStr(colSubKeys(lIndex)) = Application.version Then
#If Win64 Then
            lTmp1 = lTmp1 & " [64Bit]"
#Else
            lTmp1 = lTmp1 & " [32Bit]"
#End If
          End If
          lRet = lRet & lTmp1
        End If
      End If
    Next
  Else
    lTmp2 = Application.version & "." & Application.Build
    lRet = GetExcelTextVersion(lTmp2)
  End If
  
  GetAllInstalledExcelVersions = lRet
End Function

Private Function GetExcelTextVersion(ByVal iVersion As String) As String
Dim lRet As String
Dim lInt As Integer
  
  iVersion = Trim(iVersion)
  If iVersion = vbNullString Then Exit Function

  lInt = GetExcelMajorVersion(iVersion)
  Select Case lInt
    Case 5:     lRet = "Excel 5"
    Case 6:     lRet = "Excel 6"
    Case 7:     lRet = "Excel 95"
    Case 8:     lRet = "Excel 97"
    Case 9:     lRet = "Excel 2000"
    Case 10:    lRet = "Excel 2002"
    Case 11:    lRet = "Excel 2003"
    Case 12:    lRet = "Excel 2007"
    Case 14:    lRet = "Excel 2010"
    Case 15:    lRet = "Excel 2013"
    Case 16:    lRet = "Excel 2016"
    Case Else:  lRet = "Excel <unknown version>"
  End Select
  
  lRet = lRet & " (" & iVersion & ")"
  GetExcelTextVersion = lRet
End Function

Public Function GetExcelMajorVersion(ByVal iVersion As String) As Integer
Dim lsTmp As String, liTmp As Integer
 
  lsTmp = Trim(iVersion)
  If lsTmp = vbNullString Then Exit Function
  
  liTmp = InStr(lsTmp, ".")
  If liTmp > 1 Then lsTmp = Left(lsTmp, liTmp - 1)
  liTmp = InStr(lsTmp, ",")
  If liTmp > 1 Then lsTmp = Left(lsTmp, liTmp - 1)
  GetExcelMajorVersion = Val(lsTmp)
End Function

Public Function GetDefaultBrowser() As String
Dim lTmp As String
Dim lPos As Long
Dim lRet As String

  lTmp = Trim(RegistryGetString(".html", , hk_CLASSES_ROOT))
  If lTmp = vbNullString Then Exit Function
  
  lTmp = Trim(RegistryGetString(lTmp & "\shell\open\command", , hk_CLASSES_ROOT))
  If lTmp = vbNullString Then Exit Function
  
  If Left(lTmp, 1) = """" Then
    lPos = InStr(2, lTmp, """")
    If lPos > 2 Then lTmp = Mid(lTmp, 2, lPos - 2)
  End If

  If FileExists(lTmp) Then
    lRet = GetFileDescription(lTmp)
    If lRet = vbNullString Then lRet = lTmp
    lRet = lRet & " (" & GetFileVersion(lTmp) & ")"
  End If
  
  GetDefaultBrowser = lRet
End Function

Public Function UserName() As String
Dim sName As String * 256
Dim cChars As Long
  cChars = 256
  If GetUserName(sName, cChars) Then UserName = Left$(sName, cChars - 1)
End Function

Public Function IsDevUser() As Boolean
  IsDevUser = False
  If LCase(UserName) = "d023918" Then IsDevUser = True
End Function

Public Function IsPreCalcInstalled() As Boolean
Dim lTmp As String

  lTmp = Trim(RegistryGetString("Software\Microsoft\Windows\CurrentVersion\Uninstall\SAP_BiPcs", "UninstallString", hk_LOCAL_MACHINE))
  IsPreCalcInstalled = (Len(lTmp) > 0) And (Len(GetPreCalcPath) > 0)
End Function

'Via GACChangeNotification
Public Function ExistsInGACviaGACChangeNotification( _
            ByVal fsFileName As String, _
            ByVal fsGacVersion As String, _
            ByRef fsOtherVersions As String) As Boolean
#If Win64 Then
Dim lngKey As LongPtr
#Else
Dim lngKey As Long
#End If
Dim iIndex As Integer
Dim lngResult As Long
Dim lngData As Long
Dim lngDataLen As Long
Dim lngValueLen As Long
Dim sValue As String
Dim sArr() As String
Dim bRet As Boolean
Dim lFileNameOnly As String

Const csHeaderTree As String = "SOFTWARE\Microsoft\Fusion\GACChangeNotification\Default"
Const KEY_READ As Long = &H20019
Const KEY_WOW64_64KEY As Long = &H100&  'VB6 Programme sind 32bit. KEY_WOW64_64KEY erm|fffd|glicht den Zugriff auf den 64bit Hive in der Registry
Const HKEY_LOCAL_MACHINE As Long = &H80000002
  
  bRet = False
  fsOtherVersions = vbNullString
  
  If RegOpenKeyEx(HKEY_LOCAL_MACHINE, csHeaderTree, 0&, KEY_READ, lngKey) <> 0 Then
    If RegOpenKeyEx(HKEY_LOCAL_MACHINE, csHeaderTree, 0&, KEY_READ Or KEY_WOW64_64KEY, lngKey) <> 0 Then
      Debug.Assert False         'Breakpoint
      ExistsInGACviaGACChangeNotification = bRet
      Exit Function
    End If
  End If
  
  lFileNameOnly = GetFilePartOnlyFile(fsFileName)
  If Trim(lFileNameOnly) = vbNullString Then
    Debug.Assert False         'Breakpoint
    ExistsInGACviaGACChangeNotification = bRet
    Exit Function
  End If
  
  iIndex = 0
  Do
    lngValueLen = 2000
    sValue = String(lngValueLen, 0)
    lngDataLen = 2000
    lngResult = RegEnumValue( _
                  lngKey, _
                  iIndex, _
                  ByVal sValue, _
                  lngValueLen, _
                  0&, _
                  REG_DWORD, _
                  ByVal lngData, _
                  lngDataLen)
    If lngResult = ERROR_SUCCESS Then
      sValue = Left(sValue, lngValueLen)
      sArr = Split(sValue, ",")
      If UBound(sArr) >= 1 Then
        If sArr(0) = lFileNameOnly Then
          If sArr(1) = fsGacVersion Then
'            lngResult = ERROR_NO_MORE_ITEMS
'            fsOtherVersions = vbNullString
            bRet = True
          Else
            If fsOtherVersions <> vbNullString Then fsOtherVersions = fsOtherVersions & "; "
            fsOtherVersions = fsOtherVersions & sArr(1)
          End If
        End If
      End If
    End If
    iIndex = iIndex + 1
  Loop While lngResult = ERROR_SUCCESS
  RegCloseKey lngKey
  ExistsInGACviaGACChangeNotification = bRet
End Function

Attribute VB_Name = "support"
Option Explicit

Private Sub TabsHide()
Dim lSheet As Worksheet
  
  Set lSheet = GetSheet("Version 750")
  If Not lSheet Is Nothing Then
    If lSheet.Visible = xlSheetVisible Then lSheet.Visible = xlSheetHidden
  End If
  
  Set lSheet = GetSheet("Version 740")
  If Not lSheet Is Nothing Then
    If lSheet.Visible = xlSheetVisible Then lSheet.Visible = xlSheetHidden
  End If
  
  Set lSheet = GetSheet("Version 730")
  If Not lSheet Is Nothing Then
    If lSheet.Visible = xlSheetVisible Then lSheet.Visible = xlSheetHidden
  End If
  
  Set lSheet = GetSheet("Version 720")
  If Not lSheet Is Nothing Then
    If lSheet.Visible = xlSheetVisible Then lSheet.Visible = xlSheetHidden
  End If
  
  Set lSheet = GetSheet("Version 710")
  If Not lSheet Is Nothing Then
    If lSheet.Visible = xlSheetVisible Then lSheet.Visible = xlSheetHidden
  End If
  
  Set lSheet = GetSheet("Version 640")
  If Not lSheet Is Nothing Then
    If lSheet.Visible = xlSheetVisible Then lSheet.Visible = xlSheetHidden
  End If
End Sub

Private Sub TabsShow()
Dim lSheet As Worksheet
  
  Set lSheet = GetSheet("Version 750")
  If Not lSheet Is Nothing Then
    If lSheet.Visible <> xlSheetVisible Then lSheet.Visible = xlSheetVisible
  End If
  
  Set lSheet = GetSheet("Version 740")
  If Not lSheet Is Nothing Then
    If lSheet.Visible <> xlSheetVisible Then lSheet.Visible = xlSheetVisible
  End If
  
  Set lSheet = GetSheet("Version 730")
  If Not lSheet Is Nothing Then
    If lSheet.Visible <> xlSheetVisible Then lSheet.Visible = xlSheetVisible
  End If
  
  Set lSheet = GetSheet("Version 720")
  If Not lSheet Is Nothing Then
    If lSheet.Visible <> xlSheetVisible Then lSheet.Visible = xlSheetVisible
  End If
  
  Set lSheet = GetSheet("Version 710")
  If Not lSheet Is Nothing Then
    If lSheet.Visible <> xlSheetVisible Then lSheet.Visible = xlSheetVisible
  End If
  
  Set lSheet = GetSheet("Version 640")
  If Not lSheet Is Nothing Then
    If lSheet.Visible <> xlSheetVisible Then lSheet.Visible = xlSheetVisible
  End If
End Sub

Private Function GetSheet(ByVal iName As String) As Worksheet
  On Error Resume Next
  Set GetSheet = ThisWorkbook.Worksheets(iName)
  On Error GoTo 0
End Function

Attribute VB_Name = "version"
Option Explicit
Option Private Module

Type VS_FIXEDFILEINFO
   dwSignature As Long
   dwStrucVersionl As Integer     '  e.g. = &h0000 = 0
   dwStrucVersionh As Integer     '  e.g. = &h0042 = .42
   dwFileVersionMSl As Integer    '  e.g. = &h0003 = 3
   dwFileVersionMSh As Integer    '  e.g. = &h0075 = .75
   dwFileVersionLSl As Integer    '  e.g. = &h0000 = 0
   dwFileVersionLSh As Integer    '  e.g. = &h0031 = .31
   dwProductVersionMSl As Integer '  e.g. = &h0003 = 3
   dwProductVersionMSh As Integer '  e.g. = &h0010 = .1
   dwProductVersionLSl As Integer '  e.g. = &h0000 = 0
   dwProductVersionLSh As Integer '  e.g. = &h0031 = .31
   dwFileFlagsMask As Long        '  = &h3F for version "0.42"
   dwFileFlags As Long            '  e.g. VFF_DEBUG Or VFF_PRERELEASE
   dwFileOS As Long               '  e.g. VOS_DOS_WINDOWS16
   dwFileType As Long             '  e.g. VFT_DRIVER
   dwFileSubtype As Long          '  e.g. VFT2_DRV_KEYBOARD
   dwFileDateMS As Long           '  e.g. 0
   dwFileDateLS As Long           '  e.g. 0
End Type

#If Win64 Then  'not sure about 64 call
Declare PtrSafe Function GetFileVersionInfo Lib "Version.dll" Alias _
   "GetFileVersionInfoA" (ByVal lptstrFilename As String, ByVal _
   dwhandle As Long, ByVal dwlen As Long, lpData As Any) As Long
Declare PtrSafe Function GetFileVersionInfoSize Lib "Version.dll" Alias _
   "GetFileVersionInfoSizeA" (ByVal lptstrFilename As String, _
   lpdwHandle As Long) As Long
Declare PtrSafe Function VerQueryValue Lib "Version.dll" Alias _
   "VerQueryValueA" (pBlock As Any, ByVal lpSubBlock As String, _
   lplpBuffer As Any, puLen As Long) As Long
Declare PtrSafe Sub MoveMemory Lib "kernel32" Alias "RtlMoveMemory" _
   (dest As Any, ByVal source As Long, ByVal Length As Long)
#Else
Declare Function GetFileVersionInfo Lib "Version.dll" Alias _
   "GetFileVersionInfoA" (ByVal lptstrFilename As String, ByVal _
   dwhandle As Long, ByVal dwlen As Long, lpData As Any) As Long
Declare Function GetFileVersionInfoSize Lib "Version.dll" Alias _
   "GetFileVersionInfoSizeA" (ByVal lptstrFilename As String, _
   lpdwHandle As Long) As Long
Declare Function VerQueryValue Lib "Version.dll" Alias _
   "VerQueryValueA" (pBlock As Any, ByVal lpSubBlock As String, _
   lplpBuffer As Any, puLen As Long) As Long
Declare Sub MoveMemory Lib "kernel32" Alias "RtlMoveMemory" _
   (dest As Any, ByVal source As Long, ByVal Length As Long)
#End If

   
'For GetFileDescription
#If Win64 Then  'not sure about 64 call
Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, source As Any, ByVal Length As Long)
Private Declare PtrSafe Function lstrlenA Lib "kernel32" (ByVal lpString As Long) As Long
Private Declare PtrSafe Function VerLanguageName Lib "kernel32" Alias "VerLanguageNameA" (ByVal wLang As Long, ByVal szLang As String, ByVal nSize As Long) As Long
#Else
Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, source As Any, ByVal Length As Long)
Private Declare Function lstrlenA Lib "kernel32" (ByVal lpString As Long) As Long
Private Declare Function VerLanguageName Lib "kernel32" Alias "VerLanguageNameA" (ByVal wLang As Long, ByVal szLang As String, ByVal nSize As Long) As Long
#End If

Public Function GetFileVersion(ByVal nameOfFile As String) As String
#If Win64 Then
Dim lFso As Variant
  Set lFso = CreateObject("Scripting.FileSystemObject")
  GetFileVersion = lFso.GetFileVersion(nameOfFile)
#Else

Dim RC                As Long
Dim lDummy            As Long
Dim sBuffer()         As Byte
Dim lBufferLen        As Long
Dim lVerPointer       As Long
Dim udtVerBuffer      As VS_FIXEDFILEINFO
Dim lVerbufferLen     As Long

  lBufferLen = GetFileVersionInfoSize(nameOfFile, lDummy)
  If lBufferLen < 1 Then
    GetFileVersion = pcsNoVersion
    Exit Function
  End If
  
  ReDim sBuffer(lBufferLen)
  RC = GetFileVersionInfo(nameOfFile, 0&, lBufferLen, sBuffer(0))
  RC = VerQueryValue(sBuffer(0), "\", lVerPointer, lVerbufferLen)
  MoveMemory udtVerBuffer, lVerPointer, Len(udtVerBuffer)
  
  With udtVerBuffer
    GetFileVersion = .dwFileVersionMSh & "." & .dwFileVersionMSl & "." & .dwFileVersionLSh & "." & .dwFileVersionLSl
  End With
#End If
End Function

'******************************************************************

Public Function GetFileDescription(ByVal sFileName As String) As String
Dim nDummy          As Long
Dim nRet            As Long
Dim sBuffer()       As Byte
Dim nBufferLen      As Long
Dim lplpBuffer      As Long
Dim udtVerBuffer    As VS_FIXEDFILEINFO
Dim puLen           As Long
Dim nLanguage       As Integer
Dim nCodePage       As Integer
Dim sSubBlock       As String
Dim sVerLanguage    As String
Dim sVerCompany     As String
Dim sTemp           As String

#If Win64 Then
  Exit Function
#Else

  On Error GoTo Exit_GetFileDescription

  nBufferLen = GetFileVersionInfoSize(sFileName, nDummy)
  If nBufferLen = 0 Then Exit Function
  ReDim sBuffer(nBufferLen) As Byte
  Call GetFileVersionInfo(sFileName, 0&, nBufferLen, sBuffer(0))
  Call VerQueryValue(sBuffer(0), "\", lplpBuffer, puLen)
  Call CopyMemory(udtVerBuffer, ByVal lplpBuffer, Len(udtVerBuffer))
  If VerQueryValue(sBuffer(0), "\VarFileInfo\Translation", lplpBuffer, puLen) Then
    If puLen Then
      
      nRet = PointerToDWord(lplpBuffer) 'Handle the language/codepage as a dword
      nLanguage = LoWord(nRet)
      nCodePage = HiWord(nRet)

      'Determine language
      sVerLanguage = Space(256)
      If VerLanguageName(CLng(nLanguage), sVerLanguage, Len(sVerLanguage)) = 0 Then
       sVerLanguage = ""
      Else
       sVerLanguage = Left(sVerLanguage, nRet)
      End If
      
      sSubBlock = "\StringFileInfo\" & FmtHex(nLanguage, 4) & FmtHex(nCodePage, 4) & "\"
      sVerCompany = GetStdValue(VarPtr(sBuffer(0)), sSubBlock & "CompanyName")
      If Len(sVerCompany) = 0 Then
       'Try U.S. English...?
       sTemp = "\StringFileInfo\" & FmtHex(&H409, 4) & FmtHex(nCodePage, 4) & "\"
       sVerCompany = GetStdValue(VarPtr(sBuffer(0)), sTemp & "CompanyName")
       If Len(sVerCompany) > 0 Then
         sSubBlock = sTemp  'probably found the MS version bug.
       End If
      End If

      GetFileDescription = GetStdValue(VarPtr(sBuffer(0)), sSubBlock & "FileDescription")
    End If
  End If

Exit_GetFileDescription:

#End If
End Function

Public Function GetFileCopyright(ByVal sFileName As String) As String
Dim nDummy          As Long
Dim nRet            As Long
Dim sBuffer()       As Byte
Dim nBufferLen      As Long
Dim lplpBuffer      As Long
Dim udtVerBuffer    As VS_FIXEDFILEINFO
Dim puLen           As Long
Dim nLanguage       As Integer
Dim nCodePage       As Integer
Dim sSubBlock       As String
Dim sVerLanguage    As String
Dim sVerCompany     As String
Dim sTemp           As String

#If Win64 Then
  Exit Function
#Else

  On Error GoTo Exit_GetFileCopyright

  nBufferLen = GetFileVersionInfoSize(sFileName, nDummy)
  If nBufferLen = 0 Then Exit Function
  ReDim sBuffer(nBufferLen) As Byte
  Call GetFileVersionInfo(sFileName, 0&, nBufferLen, sBuffer(0))
  Call VerQueryValue(sBuffer(0), "\", lplpBuffer, puLen)
  Call CopyMemory(udtVerBuffer, ByVal lplpBuffer, Len(udtVerBuffer))
  If VerQueryValue(sBuffer(0), "\VarFileInfo\Translation", lplpBuffer, puLen) Then
    If puLen Then
      
      nRet = PointerToDWord(lplpBuffer) 'Handle the language/codepage as a dword
      nLanguage = LoWord(nRet)
      nCodePage = HiWord(nRet)

      'Determine language
      sVerLanguage = Space(256)
      If VerLanguageName(CLng(nLanguage), sVerLanguage, Len(sVerLanguage)) = 0 Then
       sVerLanguage = ""
      Else
       sVerLanguage = Left(sVerLanguage, nRet)
      End If
      
      sSubBlock = "\StringFileInfo\" & FmtHex(nLanguage, 4) & FmtHex(nCodePage, 4) & "\"
      sVerCompany = GetStdValue(VarPtr(sBuffer(0)), sSubBlock & "CompanyName")
      
      If Len(sVerCompany) = 0 Then
       'Try U.S. English...?
       sTemp = "\StringFileInfo\" & FmtHex(&H409, 4) & FmtHex(nCodePage, 4) & "\"
       sVerCompany = GetStdValue(VarPtr(sBuffer(0)), sTemp & "CompanyName")
       If Len(sVerCompany) > 0 Then
         sSubBlock = sTemp  'probably found the MS version bug.
       End If
      End If

      GetFileCopyright = GetStdValue(VarPtr(sBuffer(0)), sSubBlock & "LegalCopyright")
    End If
  End If

Exit_GetFileCopyright:

#End If
End Function

Private Function LoWord(ByVal LongIn As Long) As Integer
  Call CopyMemory(LoWord, LongIn, 2)
End Function
Private Function HiWord(ByVal LongIn As Long) As Integer
  Call CopyMemory(HiWord, ByVal (VarPtr(LongIn) + 2), 2)
End Function
Private Function FmtHex(ByVal InVal As Long, ByVal OutLen As Integer) As String
  FmtHex = Right$(String$(OutLen, "0") & Hex$(InVal), OutLen)
End Function
Private Function PointerToDWord(ByVal lpDWord As Long) As Long
Dim nRet As Long

  If lpDWord Then
    CopyMemory nRet, ByVal lpDWord, 4
    PointerToDWord = nRet
  End If
End Function
Private Function GetStdValue(ByVal lpBlock As Long, ByVal Value As String) As String
Dim lplpBuffer  As Long
Dim puLen       As Long

  If VerQueryValue(ByVal lpBlock, Value, lplpBuffer, puLen) Then
    If puLen Then GetStdValue = PointerToString(lplpBuffer)
  End If
End Function
Private Function PointerToString(lpString As Long) As String
Dim Buffer As String
Dim nLen As Long

  If lpString Then
    nLen = lstrlenA(lpString)
    If nLen Then
      Buffer = Space(nLen)
      CopyMemory ByVal Buffer, ByVal lpString, nLen
      PointerToString = Buffer
    End If
  End If
End Function

' InQuest injected base64 decoded content
' xihm
' *+x*&
' A/z{B
' "{-jY^t
' 'z{l
' )^J)
' +jab
' *^r&

INQUEST-PP=macro
