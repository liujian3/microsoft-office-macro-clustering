Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Helper"
Option Explicit

Declare PtrSafe Function timeGetTime Lib "winmm.dll" () As Long

Public Function CollectionItemExists(c As Collection, Name As String) As Boolean
  On Error GoTo notReadable
  Dim s As String
  s = CStr(c(Name))
  CollectionItemExists = True
  Exit Function
  
notReadable:
  CollectionItemExists = False
End Function

Attribute VB_Name = "HighResTimer"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Enum TimeState
    Started
    Stopped
End Enum


Private startTime, endTime As Long
Private dur As Double
Private state As Currency
Private m_TimeCol As Collection


Private Sub Class_Initialize()
    state = TimeState.Stopped
End Sub

Public Sub StartCounting(s As String)
  If CollectionItemExists(m_TimeCol, s) Then
    m_TimeCol.Remove s
  End If
  m_TimeCol.Add timeGetTime(), s
End Sub
Public Sub StopCounting(s As String)
  If CollectionItemExists(m_TimeCol, s) Then
    m_TimeCol.Remove s
  End If
End Sub

Function GetCount(s As String) As Double
  If Not CollectionItemExists(m_TimeCol, s) Then
    StartCounting s
    Exit Function
  End If
  GetCount = CDbl((timeGetTime() - m_TimeCol(s)) / 1000)
End Function


Public Sub DoStart()
    If state = TimeState.Started Then
        MsgBox "Cant' start, already started", vbCritical + vbSystemModal
        Exit Sub
    End If
    state = TimeState.Started
    startTime = timeGetTime()
    Set m_TimeCol = New Collection
End Sub

Public Function GetState() As TimeState
  GetState = state
End Function

Public Function DoStop() As Double
    endTime = timeGetTime()
    If state = TimeState.Stopped Then
        MsgBox "Cant' start, already started", vbCritical + vbSystemModal
        Exit Function
    End If
    state = TimeState.Stopped
    dur = CDbl((endTime - startTime) / 1000)
    DoStop = dur
End Function

Public Property Get Duration() As Double
    If state = TimeState.Started Then
        MsgBox "Must call Stop() first", vbCritical + vbSystemModal
        Exit Function
    End If
    Duration = dur
End Property



Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Dim G_HighResTimer As HighResTimer


Private Sub CommandButton1_Click()
    Dim conn As New ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim oRoot ' As IADs
    Dim oDomain ' As IADs
    Dim sBase As String
    Dim sFilter As String
    Dim sDomain As String
    Dim y As Long
    y = 5
    
    Dim sAttribs As String
    Dim sDepth As String
    Dim sQuery As String
    Dim sAns As String
    
    On Error GoTo errhandler:
    
    'Get user Using LDAP/ADO.  There is an easier way
    'to bind to a user object using the WinNT provider,
    'but this way is a better for educational purposes
    Set oRoot = GetObject(Cells(2, 3).Value & "://rootDSE")
    'work in the default domain
    sDomain = oRoot.Get("defaultNamingContext")
    Set oDomain = GetObject(Cells(2, 3).Value & "://" & sDomain)
    sBase = "<" & oDomain.ADsPath & ">"
    
    'Only get user name requested
    ' sFilter = "(&(objectCategory=person)(objectClass=user)(name=" _
    '    & LoginName & "))"
    
'    sFilter = "(&(objectCategory=person)(objectClass=user)(sn=Neubert))"
    
    sAttribs = "adsPath"
    sDepth = "subTree"
'    sFilter = "(&(objectCategory=person)(objectClass=user)(sn=Neubert))"
    sFilter = "(&(objectCategory=person)(objectClass=user)(sAMAccountName=" & Cells(2, 1).Value & "))"
    
    
    sQuery = sBase & ";" & sFilter & ";" & sAttribs & ";" & sDepth
                       
    Set G_HighResTimer = New HighResTimer
    Dim highResTimerStarted As Boolean
    highResTimerStarted = True
    G_HighResTimer.DoStart
    G_HighResTimer.StartCounting "AD"
    conn.Open "Data Source=Active Directory Provider;Provider=ADsDSOObject"
      
    Dim i As Long
    Dim user ' As IADsUser
    Set rs = conn.Execute(sQuery)
    Dim s As String
    Do While Not rs.EOF
        Set user = GetObject(rs("adsPath"))
        Dim objmemberOf
        Dim objGroup
        objmemberOf = user.GetEx("memberOf")
        For Each objGroup In objmemberOf
          Dim p1 As Long
          Dim p2 As Long
          p1 = InStr(objGroup, "CN=")
          p2 = InStr(objGroup, ",")
          If p1 > 0 And p2 > 0 Then
            If s <> "" Then
              s = s & ","
            End If
            ' s = s & "'" & Mid(objGroup, p1 + 3, p2 - p1 - 3) & "'"
            Cells(y, 1).Value = Mid(objGroup, p1 + 3, p2 - p1 - 3)
            y = y + 1
          End If
        Next
        rs.MoveNext
    Loop
    Cells(5, 3).Value = G_HighResTimer.GetCount("AD")
    
    ' GetUserGroups = s
errhandler:
    
    If Err.Number <> 0 Then
        MsgBox Err.Description
    End If
    
    On Error Resume Next
    If Not rs Is Nothing Then
        If rs.state <> 0 Then rs.Close
        Set rs = Nothing
    End If
    
    If Not conn Is Nothing Then
        If conn.state <> 0 Then conn.Close
        Set conn = Nothing
    End If
    
    Set oRoot = Nothing
    Set oDomain = Nothing
    
    If highResTimerStarted Then
      G_HighResTimer.DoStop
      Set G_HighResTimer = Nothing
    End If

End Sub
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
