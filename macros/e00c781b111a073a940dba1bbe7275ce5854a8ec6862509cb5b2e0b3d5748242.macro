Attribute VB_Name = "Module1"
Sub |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|1()
UserForm1.Show
End Sub
Attribute VB_Name = "Module2"
Sub |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|2()
UserForm2.Show
End Sub
Attribute VB_Name = "Module3"
Sub |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|3()
UserForm3.Show
End Sub
Attribute VB_Name = "Module4"
Sub |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|4()
UserForm4.Show
End Sub
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{3FCDC31D-7FD0-4ADF-BE08-B52BBE22E238}{407495C2-17F2-493A-8659-7531DD40E0F4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{7B527626-AD78-4B54-B44E-5C535A1BF9B0}{FE99075F-466C-4533-A1F2-8A3EB8216EA8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "UserForm3"
Attribute VB_Base = "0{59E21562-D2AA-48E8-8EC7-9933C4513D73}{C7044276-E331-4033-9931-CA5A8F3404EA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "UserForm4"
Attribute VB_Base = "0{DB9F1A2F-F8E0-488B-8C32-FC851AB33D0B}{8590E560-3765-40E9-B6B8-8DB3BCD59FA2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "UserForm5"
Attribute VB_Base = "0{510D127B-741F-4FC7-B075-D14F4F30CDAF}{C99465E7-AC7D-4BEB-AA72-8CF360D27951}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "dlg_Eingabe"
Attribute VB_Base = "0{4C30F110-2F05-4C06-A036-6E43ECF2602C}{6FE77CCA-7109-46AF-9CF4-1E309352F857}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub btn_Abbrechen_Click()
    dlg_Eingabe.Hide
End Sub

Private Sub btn_OK_Click()
    dlg_Eingabe.Hide
    ActiveShape.TextFrame.TextRange.Text = Me.txtbox_Eingabe.Text
End Sub



Attribute VB_Name = "mDrag"
Option Explicit
'(C)oded 2005 by hw@ppt-user.de '
'Verwendung des Moduls in per|fffd|nlichen nicht kommerziellen Projekten erlaubt'
'Jede Form der Weitergabe oder Ver|fffd|ffentlichung nur mit schriftlicher '
'Genehmigung des Autors - Alle Rechte bleiben beim Autor'
'Die Verwendung des Makros ist mit dem Text:'
'Diese Pr|fffd|sentation verwendet VBA-Makros von hw@lemitec.de'
'auf der Start- oder Impressum-Folie der Pr|fffd|sentation anzuzeigen.'
'---------------------------------------------------------------------'
'You may use the code in personal non profit projects
'PowerPoint files using this code may only be distributed or published
'with written permission from hw@lemitec.de
'All rights reserved by www.ppt-user.de
'Using this code please add the following text to the starting/impressum slide
'This Presentation uses a 'drag and drop' enhancement requiring VBA code
'written by hw@lemitec.de

'Sift+|fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Shift+CapsLock+|fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Shift+Tab+|fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 45|fffd|
'Windows+|fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'Alt+|fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Alt+Shift+|fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Shift+Windows+|fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Tab+|fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|


#If Win64 Then
    Declare PtrSafe Function GetKeyState Lib "user32" (ByVal nVirtKey As Long) As Integer
    Private Declare PtrSafe Function WindowFromPoint Lib "user32" (ByVal xPoint As Long, ByVal yPoint As Long) As Long
    Private Declare PtrSafe Function GetWindowRect Lib "user32" (ByVal hwnd As Long, lpRect As RECT) As Long
    Private Declare PtrSafe Function GetCursorPos Lib "user32" (lpPoint As PointAPI) As Long
    Private Declare PtrSafe Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long
    Private Declare PtrSafe Function SetCursorPos Lib "user32" (ByVal x As Long, ByVal y As Long) As Long
    Public Declare PtrSafe Function MonitorFromPoint Lib "user32.dll" (ByVal x As Long, ByVal y As Long, ByVal dwFlags As Long) As Long
#Else
    Declare Function GetKeyState Lib "user32" (ByVal nVirtKey As Long) As Integer
    Private Declare Function WindowFromPoint Lib "user32" (ByVal xPoint As Long, ByVal yPoint As Long) As Long
    Private Declare Function GetWindowRect Lib "user32" (ByVal hwnd As Long, lpRect As RECT) As Long
    Private Declare Function GetCursorPos Lib "user32" (lpPoint As PointAPI) As Long
    Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long
    Private Declare Function SetCursorPos Lib "user32" (ByVal x As Long, ByVal y As Long) As Long
    Public Declare Function MonitorFromPoint Lib "user32.dll" (ByVal x As Long, ByVal y As Long, ByVal dwFlags As Long) As Long
#End If

'1 Zoll = 72 Punkte -- 1 Zoll = 1440 Twips

Private Const SM_SCREENX = 0
Private Const SM_SCREENY = 1
Private Const msgCancel = "F|fffd|r die Ansteuerung eines 2.Monitors wird ein OS ab Win 2000 ben|fffd|tigt!"
Private Const msgNoXlInstance = "Excel Instanz nicht geladen...!"
Private Const SIGPROC = "Drag & Drop"
Private Const FIXSTART = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private Const FIXSTOP = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const VK_SHIFT = &H10
'Public Const VK_CTRL = &H11
Public Const VK_ALT = &H12
Public Const VK_CAPS = &H14
Public Const VK_WIN = &H5B
Public Const VK_TAB = &H9


Private Type PointAPI
    x As Long
    y As Long
End Type

Public Type RECT
    Left As Long
    Top As Long
    Right As Long
    Bottom As Long
End Type


Public mPoint As PointAPI
Public ActiveShape As Shape
Dim dragMode As Boolean
Dim dx As Double, dy As Double
Dim Pos
Dim f As Boolean


Sub DragandDrop(sh As Shape)
Dim sp As Shape

With ActivePresentation.SlideShowWindow.View
    .GotoSlide .Slide.SlideIndex
End With

If CBool(GetKeyState(VK_SHIFT) And &HF0000000) And _
    CBool(GetKeyState(VK_ALT) And &HF0000000) Then FixStartEnd sh: Exit Sub
If CBool(GetKeyState(VK_ALT) And &HF0000000) Then DragCalculate sh: Exit Sub
If CBool(GetKeyState(VK_SHIFT) And &HF0000000) And _
    CBool(GetKeyState(VK_WIN) And &HF0000000) Then FollowHyperlink sh: Exit Sub
If CBool(GetKeyState(VK_SHIFT) And &HF0000000) And _
    CBool(GetKeyState(VK_TAB) And &HF0000000) Then DragRotate sh: Exit Sub
If CBool(GetKeyState(VK_SHIFT) And &HF0000000) Then DragZoom sh: Exit Sub 'VK_ALT
If CBool(GetKeyState(VK_WIN) And &HF0000000) Then DragInput sh: Exit Sub
If CBool(GetKeyState(VK_TAB) And &HF0000000) Then FixDelete sh: Exit Sub

If sh.Child Then
     For Each sp In sh.ParentGroup.GroupItems
         With sp.ActionSettings(ppMouseClick)
             .Run = "DragandDrop"
             .Action = ppActionRunMacro
         End With
    Next
    Set sh = sh.ParentGroup
End If

dragMode = Not dragMode
DoEvents
Drag sh
DoEvents
If dragMode = False And sh.Tags(FIXSTOP) > "" Then
    On Error Resume Next
    Pos = Split(sh.Tags(FIXSTOP), ";")
    If Abs(sh.Top - Pos(0)) < 15 And Abs(sh.Left - Pos(1)) < 15 Then
        sh.Top = Pos(0): sh.Left = Pos(1)
    Else
        Pos = Split(sh.Tags(FIXSTART), ";")
        sh.Top = Pos(0): sh.Left = Pos(1)
    End If
End If
End Sub


Private Sub Drag(sh As Shape)
Dim i As Integer, sx As Integer, sy As Integer
Dim mWnd As Long, WR As RECT
Dim iw As Integer

dx = GetSystemMetrics(SM_SCREENX)
dy = GetSystemMetrics(SM_SCREENY)

GetCursorPos mPoint
With ActivePresentation.SlideShowWindow
' Mauspointer outside SystemMetrics 0,0 Transformation
    mWnd = WindowFromPoint(mPoint.x, mPoint.y)
    GetWindowRect mWnd, WR
    sx = WR.Left
    sy = WR.Top
    dx = (WR.Right - WR.Left) / ActivePresentation.PageSetup.SlideWidth
    dy = (WR.Bottom - WR.Top) / ActivePresentation.PageSetup.SlideHeight
End With

'Correct Ratio if Page not fit in Screen
If dx > dy Then
    sx = sx + (dx - dy) * ActivePresentation.PageSetup.SlideWidth / 2
    dx = dy
End If
If dy > dx Then
    sy = sy + (dy - dx) * ActivePresentation.PageSetup.SlideHeight / 2
    dy = dx
End If

'MsgBox mPoint.x / dx & ":" & sh.Left & "#" & mPoint.y / dy & ":" & sh.Top
While dragMode
    GetCursorPos mPoint
    sh.Left = (mPoint.x - sx) / dx - sh.Width / 2
    sh.Top = (mPoint.y - sy) / dy - sh.Height / 2
    'sh.TextFrame.TextRange.Text = mPoint.x & ":" & (sh.Left + sh.Width / 2) * dx
    '================== |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| PowerPoint 2013
            If Val(Application.Version) > 14 Then
                iw = iw + 1
                If iw = 2 Then
                    With ActivePresentation.SlideShowWindow.View
                        .GotoSlide .Slide.SlideIndex
                    End With
                    iw = 0
                End If
            End If
    '==================
    DoEvents
    i = i + 1: If i > 2000 Then dragMode = False ' not Aus
Wend
DoEvents

End Sub

Private Sub DragRotate(sh As Shape)
'VK_Shift+VK_TAB
Dim angle As Single, dt As Single

If sh.Child Then
    Set sh = sh.ParentGroup
End If

dt = Timer
angle = Val(sh.AlternativeText)
If angle = 0 Then angle = 45
sh.IncrementRotation (angle)
End Sub

Private Sub DragInput(sh As Shape)
'VK_WIN
 If sh.HasTextFrame Then
    Set ActiveShape = sh
    dlg_Eingabe.txtbox_Eingabe.Text = sh.TextFrame.TextRange.Text
    dlg_Eingabe.Show
    sh.Top = sh.Top + 1: sh.Top = sh.Top - 1
 End If
 DoEvents
End Sub

Private Sub DragZoom(sh As Shape)
Dim Zoom As Single
'VK_SHIFT  (+VK_CAPS)
Zoom = 0.75

If sh.Child Then
    Set sh = sh.ParentGroup
End If

If CBool(GetKeyState(VK_CAPS) And &HF0000000) Then
    Zoom = 1 / Zoom
End If
'sh.Tags.Add "Zoom", "1.5"
sh.ScaleHeight Zoom, msoFalse, msoScaleFromMiddle
sh.ScaleWidth Zoom, msoFalse, msoScaleFromMiddle
End Sub

Private Sub DragCalculate(sh As Shape)
'VK_Alt
Dim i%, xl As Object
Dim Formel
On Error Resume Next
If sh.HasTextFrame Then
    Set xl = CreateObject("Excel.Application")
    If xl Is Nothing Then MsgBox msgNoXlInstance, vbCritical, SIGPROC: Exit Sub
    For i = 1 To sh.TextFrame.TextRange.Paragraphs.Count
        Formel = sh.TextFrame.TextRange.Paragraphs(i)
        If InStr(Formel, "+") <> 0 Or InStr(Formel, "-") <> 0 Or InStr(Formel, "*") <> 0 Or InStr(Formel, "/") <> 0 Then
            If InStr(Formel, "=") > 0 Then Formel = Left(Formel, InStr(Formel, "=") - 1)
            Formel = Replace(Formel, ",", ".")
            sh.TextFrame.TextRange.Paragraphs(i).Text = Formel & "=" & xl.Evaluate(Formel)
        End If
    Next
    xl.Quit
    sh.Top = sh.Top + 1: sh.Top = sh.Top - 1
End If
DoEvents
End Sub

Private Sub FollowHyperlink(sh As Shape)
'VK_SHIFT+VK_WIN
On Error Resume Next
If sh.AlternativeText = "" Then
    sh.AlternativeText = InputBox("URL", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "http://www.lemitec.de")
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & sh.AlternativeText, vbExclamation, SIGPROC
Else
    ActivePresentation.FollowHyperlink sh.AlternativeText, , True
End If
If Err.Number <> 0 Then _
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", vbExclamation, SIGPROC
End Sub

Private Sub FixStartEnd(sh As Shape)
'VK_Shift + VK_ALT
Const FIXED = " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", FixDel = " |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Dim Pos

If sh.Child Then
    Set sh = sh.ParentGroup
End If

If sh.Tags(FIXSTART) = "" Then
    sh.Tags.Add FIXSTART, sh.Top & ";" & sh.Left
    MsgBox sh.Name & " " & FIXSTART & FIXED, vbExclamation, SIGPROC
    Exit Sub
Else
    Pos = Split(sh.Tags(FIXSTART), ";")
    If sh.Top = CSng(Pos(0)) And sh.Left = CSng(Pos(1)) Then
        sh.Tags.Delete FIXSTART
        sh.Tags.Delete FIXSTOP
        MsgBox sh.Name & " " & FIXSTART & "/" & FIXSTOP & FixDel, vbExclamation, SIGPROC
        Exit Sub
    End If
End If
If sh.Tags(FIXSTOP) = "" Then
    sh.Tags.Add FIXSTOP, sh.Top & ";" & sh.Left
    MsgBox sh.Name & " " & FIXSTOP & FIXED, vbExclamation, SIGPROC
Else
    Pos = Split(sh.Tags(FIXSTOP), ";")
    If sh.Top = CSng(Pos(0)) And sh.Left = CSng(Pos(1)) Then
        sh.Tags.Delete FIXSTOP
        MsgBox sh.Name & " " & FIXSTOP & FixDel, vbExclamation, SIGPROC
    End If
End If
End Sub

Private Sub FixDelete(sh As Shape)
'VK_CAPS

    If sh.Child Then
        Set sh = sh.ParentGroup
    End If

    sh.Tags.Delete FIXSTART
    sh.Tags.Delete FIXSTOP
      MsgBox sh.Name & ": " & vbCrLf & FIXSTART & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & _
      vbCrLf & FIXSTOP & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", vbExclamation, SIGPROC
End Sub



INQUEST-PP=macro
