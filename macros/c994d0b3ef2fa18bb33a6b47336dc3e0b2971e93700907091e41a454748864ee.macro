Attribute VB_Name = "CMD5"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'*******************************************************************************
' MODULE:       CMD5
' FILENAME:     C:\My Code\vb\md5\CMD5.cls
' AUTHOR:       Phil Fresle
' CREATED:      16-Feb-2001
' COPYRIGHT:    Copyright 2001 Frez Systems Limited. All Rights Reserved.
'
' DESCRIPTION:
' Derived from the RSA Data Security, Inc. MD5 Message-Digest Algorithm,
' as set out in the memo RFC1321.
'
' This class is used to generate an MD5 'digest' or 'signature' of a string. The
' MD5 algorithm is one of the industry standard methods for generating digital
' signatures. It is generically known as a digest, digital signature, one-way
' encryption, hash or checksum algorithm. A common use for MD5 is for password
' encryption as it is one-way in nature, that does not mean that your passwords
' are not free from a dictionary attack. If you are using the
' routine for passwords, you can make it a little more secure by concatenating
' some known random characters to the password before you generate the signature
' and on subsequent tests, so even if a hacker knows you are using MD5 for
' your passwords, the random characters will make it harder to dictionary attack.
'
' *** CAUTION ***
' See the comment attached to the MD5 method below regarding use on systems
' with different character sets.
'
' This is 'free' software with the following restrictions:
'
' You may not redistribute this code as a 'sample' or 'demo'. However, you are free
' to use the source code in your own code, but you may not claim that you created
' the sample code. It is expressly forbidden to sell or profit from this source code
' other than by the knowledge gained or the enhanced value added by your own code.
'
' Use of this software is also done so at your own risk. The code is supplied as
' is without warranty or guarantee of any kind.
'
' Should you wish to commission some derivative work based on this code provided
' here, or any consultancy work, please do not hesitate to contact us.
'
' Web Site:  http://www.frez.co.uk
' E-mail:    sales@frez.co.uk
'
' MODIFICATION HISTORY:
' 1.0       16-Feb-2001
'           Phil Fresle
'           Initial Version
'*******************************************************************************
Option Explicit

Private Const BITS_TO_A_BYTE  As Long = 8
Private Const BYTES_TO_A_WORD As Long = 4
Private Const BITS_TO_A_WORD  As Long = BYTES_TO_A_WORD * BITS_TO_A_BYTE

Private m_lOnBits(0 To 30) As Long
Private m_l2Power(0 To 30) As Long

'*******************************************************************************
' Class_Initialize (SUB)
'
' DESCRIPTION:
' We will usually get quicker results by preparing arrays of bit patterns and
' powers of 2 ahead of time instead of calculating them every time, unless of
' course the methods are only ever getting called once per instantiation of the
' class.
'*******************************************************************************
Private Sub Class_Initialize()
    ' Could have done this with a loop calculating each value, but simply
    ' assigning the values is quicker - BITS SET FROM RIGHT
    m_lOnBits(0) = 1            ' 00000000000000000000000000000001
    m_lOnBits(1) = 3            ' 00000000000000000000000000000011
    m_lOnBits(2) = 7            ' 00000000000000000000000000000111
    m_lOnBits(3) = 15           ' 00000000000000000000000000001111
    m_lOnBits(4) = 31           ' 00000000000000000000000000011111
    m_lOnBits(5) = 63           ' 00000000000000000000000000111111
    m_lOnBits(6) = 127          ' 00000000000000000000000001111111
    m_lOnBits(7) = 255          ' 00000000000000000000000011111111
    m_lOnBits(8) = 511          ' 00000000000000000000000111111111
    m_lOnBits(9) = 1023         ' 00000000000000000000001111111111
    m_lOnBits(10) = 2047        ' 00000000000000000000011111111111
    m_lOnBits(11) = 4095        ' 00000000000000000000111111111111
    m_lOnBits(12) = 8191        ' 00000000000000000001111111111111
    m_lOnBits(13) = 16383       ' 00000000000000000011111111111111
    m_lOnBits(14) = 32767       ' 00000000000000000111111111111111
    m_lOnBits(15) = 65535       ' 00000000000000001111111111111111
    m_lOnBits(16) = 131071      ' 00000000000000011111111111111111
    m_lOnBits(17) = 262143      ' 00000000000000111111111111111111
    m_lOnBits(18) = 524287      ' 00000000000001111111111111111111
    m_lOnBits(19) = 1048575     ' 00000000000011111111111111111111
    m_lOnBits(20) = 2097151     ' 00000000000111111111111111111111
    m_lOnBits(21) = 4194303     ' 00000000001111111111111111111111
    m_lOnBits(22) = 8388607     ' 00000000011111111111111111111111
    m_lOnBits(23) = 16777215    ' 00000000111111111111111111111111
    m_lOnBits(24) = 33554431    ' 00000001111111111111111111111111
    m_lOnBits(25) = 67108863    ' 00000011111111111111111111111111
    m_lOnBits(26) = 134217727   ' 00000111111111111111111111111111
    m_lOnBits(27) = 268435455   ' 00001111111111111111111111111111
    m_lOnBits(28) = 536870911   ' 00011111111111111111111111111111
    m_lOnBits(29) = 1073741823  ' 00111111111111111111111111111111
    m_lOnBits(30) = 2147483647  ' 01111111111111111111111111111111
    
    ' Could have done this with a loop calculating each value, but simply
    ' assigning the values is quicker - POWERS OF 2
    m_l2Power(0) = 1            ' 00000000000000000000000000000001
    m_l2Power(1) = 2            ' 00000000000000000000000000000010
    m_l2Power(2) = 4            ' 00000000000000000000000000000100
    m_l2Power(3) = 8            ' 00000000000000000000000000001000
    m_l2Power(4) = 16           ' 00000000000000000000000000010000
    m_l2Power(5) = 32           ' 00000000000000000000000000100000
    m_l2Power(6) = 64           ' 00000000000000000000000001000000
    m_l2Power(7) = 128          ' 00000000000000000000000010000000
    m_l2Power(8) = 256          ' 00000000000000000000000100000000
    m_l2Power(9) = 512          ' 00000000000000000000001000000000
    m_l2Power(10) = 1024        ' 00000000000000000000010000000000
    m_l2Power(11) = 2048        ' 00000000000000000000100000000000
    m_l2Power(12) = 4096        ' 00000000000000000001000000000000
    m_l2Power(13) = 8192        ' 00000000000000000010000000000000
    m_l2Power(14) = 16384       ' 00000000000000000100000000000000
    m_l2Power(15) = 32768       ' 00000000000000001000000000000000
    m_l2Power(16) = 65536       ' 00000000000000010000000000000000
    m_l2Power(17) = 131072      ' 00000000000000100000000000000000
    m_l2Power(18) = 262144      ' 00000000000001000000000000000000
    m_l2Power(19) = 524288      ' 00000000000010000000000000000000
    m_l2Power(20) = 1048576     ' 00000000000100000000000000000000
    m_l2Power(21) = 2097152     ' 00000000001000000000000000000000
    m_l2Power(22) = 4194304     ' 00000000010000000000000000000000
    m_l2Power(23) = 8388608     ' 00000000100000000000000000000000
    m_l2Power(24) = 16777216    ' 00000001000000000000000000000000
    m_l2Power(25) = 33554432    ' 00000010000000000000000000000000
    m_l2Power(26) = 67108864    ' 00000100000000000000000000000000
    m_l2Power(27) = 134217728   ' 00001000000000000000000000000000
    m_l2Power(28) = 268435456   ' 00010000000000000000000000000000
    m_l2Power(29) = 536870912   ' 00100000000000000000000000000000
    m_l2Power(30) = 1073741824  ' 01000000000000000000000000000000
End Sub

'*******************************************************************************
' LShift (FUNCTION)
'
' PARAMETERS:
' (In) - lValue     - Long    - The value to be shifted
' (In) - iShiftBits - Integer - The number of bits to shift the value by
'
' RETURN VALUE:
' Long - The shifted long integer
'
' DESCRIPTION:
' A left shift takes all the set binary bits and moves them left, in-filling
' with zeros in the vacated bits on the right. This function is equivalent to
' the << operator in Java and C++
'*******************************************************************************
Private Function LShift(ByVal lValue As Long, _
                        ByVal iShiftBits As Integer) As Long
    ' NOTE: If you can guarantee that the Shift parameter will be in the
    ' range 1 to 30 you can safely strip of this first nested if structure for
    ' speed.
    '
    ' A shift of zero is no shift at all.
    If iShiftBits = 0 Then
        LShift = lValue
        Exit Function
        
    ' A shift of 31 will result in the right most bit becoming the left most
    ' bit and all other bits being cleared
    ElseIf iShiftBits = 31 Then
        If lValue And 1 Then
            LShift = &H80000000
        Else
            LShift = 0
        End If
        Exit Function
        
    ' A shift of less than zero or more than 31 is undefined
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If
    
    ' If the left most bit that remains will end up in the negative bit
    ' position (&H80000000) we would end up with an overflow if we took the
    ' standard route. We need to strip the left most bit and add it back
    ' afterwards.
    If (lValue And m_l2Power(31 - iShiftBits)) Then
    
        ' (Value And OnBits(31 - (Shift + 1))) chops off the left most bits that
        ' we are shifting into, but also the left most bit we still want as this
        ' is going to end up in the negative bit marker position (&H80000000).
        ' After the multiplication/shift we Or the result with &H80000000 to
        ' turn the negative bit on.
        LShift = ((lValue And m_lOnBits(31 - (iShiftBits + 1))) * _
            m_l2Power(iShiftBits)) Or &H80000000
    
    Else
    
        ' (Value And OnBits(31-Shift)) chops off the left most bits that we are
        ' shifting into so we do not get an overflow error when we do the
        ' multiplication/shift
        LShift = ((lValue And m_lOnBits(31 - iShiftBits)) * _
            m_l2Power(iShiftBits))
        
    End If
End Function

'*******************************************************************************
' RShift (FUNCTION)
'
' PARAMETERS:
' (In) - lValue     - Long    - The value to be shifted
' (In) - iShiftBits - Integer - The number of bits to shift the value by
'
' RETURN VALUE:
' Long - The shifted long integer
'
' DESCRIPTION:
' The right shift of an unsigned long integer involves shifting all the set bits
' to the right and in-filling on the left with zeros. This function is
' equivalent to the >>> operator in Java or the >> operator in C++ when used on
' an unsigned long.
'*******************************************************************************
Private Function RShift(ByVal lValue As Long, _
                        ByVal iShiftBits As Integer) As Long
    
    ' NOTE: If you can guarantee that the Shift parameter will be in the
    ' range 1 to 30 you can safely strip of this first nested if structure for
    ' speed.
    '
    ' A shift of zero is no shift at all
    If iShiftBits = 0 Then
        RShift = lValue
        Exit Function
        
    ' A shift of 31 will clear all bits and move the left most bit to the right
    ' most bit position
    ElseIf iShiftBits = 31 Then
        If lValue And &H80000000 Then
            RShift = 1
        Else
            RShift = 0
        End If
        Exit Function
        
    ' A shift of less than zero or more than 31 is undefined
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If
    
    ' We do not care about the top most bit or the final bit, the top most bit
    ' will be taken into account in the next stage, the final bit (whether it
    ' is an odd number or not) is being shifted into, so we do not give a jot
    ' about it
    RShift = (lValue And &H7FFFFFFE) \ m_l2Power(iShiftBits)
    
    ' If the top most bit (&H80000000) was set we need to do things differently
    ' as in a normal VB signed long integer the top most bit is used to indicate
    ' the sign of the number, when it is set it is a negative number, so just
    ' deviding by a factor of 2 as above would not work.
    ' NOTE: (lValue And  &H80000000) is equivalent to (lValue < 0), you could
    ' get a very marginal speed improvement by changing the test to (lValue < 0)
    If (lValue And &H80000000) Then
        ' We take the value computed so far, and then add the left most negative
        ' bit after it has been shifted to the right the appropriate number of
        ' places
        RShift = (RShift Or (&H40000000 \ m_l2Power(iShiftBits - 1)))
    End If
End Function

'*******************************************************************************
' RShiftSigned (FUNCTION)
'
' PARAMETERS:
' (In) - lValue     - Long    -
' (In) - iShiftBits - Integer -
'
' RETURN VALUE:
' Long -
'
' DESCRIPTION:
' The right shift of a signed long integer involves shifting all the set bits to
' the right and in-filling on the left with the sign bit (0 if positive, 1 if
' negative. This function is equivalent to the >> operator in Java or the >>
' operator in C++ when used on a signed long integer. Not used in this class,
' but included for completeness.
'*******************************************************************************
Private Function RShiftSigned(ByVal lValue As Long, _
                              ByVal iShiftBits As Integer) As Long
    
    ' NOTE: If you can guarantee that the Shift parameter will be in the
    ' range 1 to 30 you can safely strip of this first nested if structure for
    ' speed.
    '
    ' A shift of zero is no shift at all
    If iShiftBits = 0 Then
        RShiftSigned = lValue
        Exit Function
    
    ' A shift of 31 will clear all bits if the left most bit was zero, and will
    ' set all bits if the left most bit was 1 (a negative indicator)
    ElseIf iShiftBits = 31 Then
        
        ' NOTE: (lValue And  &H80000000) is equivalent to (lValue < 0), you
        ' could get a very marginal speed improvement by changing the test to
        ' (lValue < 0)
        If (lValue And &H80000000) Then
            RShiftSigned = -1
        Else
            RShiftSigned = 0
        End If
        Exit Function
    
    ' A shift of less than zero or more than 31 is undefined
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If
    
    ' We get the same result by dividing by the appropriate power of 2 and
    ' rounding in the negative direction
    RShiftSigned = Int(lValue / m_l2Power(iShiftBits))
End Function

'*******************************************************************************
' RotateLeft (FUNCTION)
'
' PARAMETERS:
' (In) - lValue     - Long    - Value to act on
' (In) - iShiftBits - Integer - Bits to move by
'
' RETURN VALUE:
' Long - Result
'
' DESCRIPTION:
' Rotates the bits in a long integer to the left, those bits falling off the
' left edge are put back on the right edge
'*******************************************************************************
Private Function RotateLeft(ByVal lValue As Long, _
                            ByVal iShiftBits As Integer) As Long
    RotateLeft = LShift(lValue, iShiftBits) Or RShift(lValue, (32 - iShiftBits))
End Function

'*******************************************************************************
' AddUnsigned (FUNCTION)
'
' PARAMETERS:
' (In) - lX - Long - First value
' (In) - lY - Long - Second value
'
' RETURN VALUE:
' Long - Result
'
' DESCRIPTION:
' Adds two potentially large unsigned numbers without overflowing
'*******************************************************************************
Private Function AddUnsigned(ByVal lX As Long, _
                             ByVal lY As Long) As Long
    Dim lX4     As Long
    Dim lY4     As Long
    Dim lX8     As Long
    Dim lY8     As Long
    Dim lResult As Long
 
    lX8 = lX And &H80000000
    lY8 = lY And &H80000000
    lX4 = lX And &H40000000
    lY4 = lY And &H40000000
 
    lResult = (lX And &H3FFFFFFF) + (lY And &H3FFFFFFF)
 
    If lX4 And lY4 Then
        lResult = lResult Xor &H80000000 Xor lX8 Xor lY8
    ElseIf lX4 Or lY4 Then
        If lResult And &H40000000 Then
            lResult = lResult Xor &HC0000000 Xor lX8 Xor lY8
        Else
            lResult = lResult Xor &H40000000 Xor lX8 Xor lY8
        End If
    Else
        lResult = lResult Xor lX8 Xor lY8
    End If
 
    AddUnsigned = lResult
End Function

'*******************************************************************************
' F (FUNCTION)
'
' DESCRIPTION:
' MD5's F function
'*******************************************************************************
Private Function F(ByVal x As Long, _
                   ByVal y As Long, _
                   ByVal z As Long) As Long
    F = (x And y) Or ((Not x) And z)
End Function

'*******************************************************************************
' G (FUNCTION)
'
' DESCRIPTION:
' MD5's G function
'*******************************************************************************
Private Function G(ByVal x As Long, _
                   ByVal y As Long, _
                   ByVal z As Long) As Long
    G = (x And z) Or (y And (Not z))
End Function

'*******************************************************************************
' H (FUNCTION)
'
' DESCRIPTION:
' MD5's H function
'*******************************************************************************
Private Function H(ByVal x As Long, _
                   ByVal y As Long, _
                   ByVal z As Long) As Long
    H = (x Xor y Xor z)
End Function

'*******************************************************************************
' I (FUNCTION)
'
' DESCRIPTION:
' MD5's I function
'*******************************************************************************
Private Function I(ByVal x As Long, _
                   ByVal y As Long, _
                   ByVal z As Long) As Long
    I = (y Xor (x Or (Not z)))
End Function

'*******************************************************************************
' FF (SUB)
'
' DESCRIPTION:
' MD5's FF procedure
'*******************************************************************************
Private Sub FF(a As Long, _
               ByVal b As Long, _
               ByVal c As Long, _
               ByVal d As Long, _
               ByVal x As Long, _
               ByVal s As Long, _
               ByVal ac As Long)
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac))
    a = RotateLeft(a, s)
    a = AddUnsigned(a, b)
End Sub

'*******************************************************************************
' GG (SUB)
'
' DESCRIPTION:
' MD5's GG procedure
'*******************************************************************************
Private Sub GG(a As Long, _
               ByVal b As Long, _
               ByVal c As Long, _
               ByVal d As Long, _
               ByVal x As Long, _
               ByVal s As Long, _
               ByVal ac As Long)
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac))
    a = RotateLeft(a, s)
    a = AddUnsigned(a, b)
End Sub

'*******************************************************************************
' HH (SUB)
'
' DESCRIPTION:
' MD5's HH procedure
'*******************************************************************************
Private Sub HH(a As Long, _
               ByVal b As Long, _
               ByVal c As Long, _
               ByVal d As Long, _
               ByVal x As Long, _
               ByVal s As Long, _
               ByVal ac As Long)
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac))
    a = RotateLeft(a, s)
    a = AddUnsigned(a, b)
End Sub

'*******************************************************************************
' II (SUB)
'
' DESCRIPTION:
' MD5's II procedure
'*******************************************************************************
Private Sub II(a As Long, _
               ByVal b As Long, _
               ByVal c As Long, _
               ByVal d As Long, _
               ByVal x As Long, _
               ByVal s As Long, _
               ByVal ac As Long)
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac))
    a = RotateLeft(a, s)
    a = AddUnsigned(a, b)
End Sub

'*******************************************************************************
' ConvertToWordArray (FUNCTION)
'
' PARAMETERS:
' (In/Out) - sMessage - String - String message
'
' RETURN VALUE:
' Long() - Converted message as long array
'
' DESCRIPTION:
' Takes the string message and puts it in a long array with padding according to
' the MD5 rules.
'*******************************************************************************
Private Function ConvertToWordArray(sMessage As String) As Long()
    Dim lMessageLength  As Long
    Dim lNumberOfWords  As Long
    Dim lWordArray()    As Long
    Dim lBytePosition   As Long
    Dim lByteCount      As Long
    Dim lWordCount      As Long
    
    Const MODULUS_BITS      As Long = 512
    Const CONGRUENT_BITS    As Long = 448
    
    lMessageLength = Len(sMessage)
    
    ' Get padded number of words. Message needs to be congruent to 448 bits,
    ' modulo 512 bits. If it is exactly congruent to 448 bits, modulo 512 bits
    ' it must still have another 512 bits added. 512 bits = 64 bytes
    ' (or 16 * 4 byte words), 448 bits = 56 bytes. This means lMessageSize must
    ' be a multiple of 16 (i.e. 16 * 4 (bytes) * 8 (bits))
    lNumberOfWords = (((lMessageLength + _
        ((MODULUS_BITS - CONGRUENT_BITS) \ BITS_TO_A_BYTE)) \ _
        (MODULUS_BITS \ BITS_TO_A_BYTE)) + 1) * _
        (MODULUS_BITS \ BITS_TO_A_WORD)
    ReDim lWordArray(lNumberOfWords - 1)
    
    ' Combine each block of 4 bytes (ascii code of character) into one long
    ' value and store in the message. The high-order (most significant) bit of
    ' each byte is listed first. However, the low-order (least significant) byte
    ' is given first in each word.
    lBytePosition = 0
    lByteCount = 0
    Do Until lByteCount >= lMessageLength
        ' Each word is 4 bytes
        lWordCount = lByteCount \ BYTES_TO_A_WORD
        
        ' The bytes are put in the word from the right most edge
        lBytePosition = (lByteCount Mod BYTES_TO_A_WORD) * BITS_TO_A_BYTE
        lWordArray(lWordCount) = lWordArray(lWordCount) Or _
            LShift(AscB(Mid(sMessage, lByteCount + 1, 1)), lBytePosition)
        lByteCount = lByteCount + 1
    Loop

    ' Terminate according to MD5 rules with a 1 bit, zeros and the length in
    ' bits stored in the last two words
    lWordCount = lByteCount \ BYTES_TO_A_WORD
    lBytePosition = (lByteCount Mod BYTES_TO_A_WORD) * BITS_TO_A_BYTE

    ' Add a terminating 1 bit, all the rest of the bits to the end of the
    ' word array will default to zero
    lWordArray(lWordCount) = lWordArray(lWordCount) Or _
        LShift(&H80, lBytePosition)

    ' We put the length of the message in bits into the last two words, to get
    ' the length in bits we need to multiply by 8 (or left shift 3). This left
    ' shifted value is put in the first word. Any bits shifted off the left edge
    ' need to be put in the second word, we can work out which bits by shifting
    ' right the length by 29 bits.
    lWordArray(lNumberOfWords - 2) = LShift(lMessageLength, 3)
    lWordArray(lNumberOfWords - 1) = RShift(lMessageLength, 29)
    
    ConvertToWordArray = lWordArray
End Function

'*******************************************************************************
' WordToHex (FUNCTION)
'
' PARAMETERS:
' (In) - lValue - Long - Long value to convert
'
' RETURN VALUE:
' String - Hex value to return
'
' DESCRIPTION:
' Takes a long integer and due to the bytes reverse order it extracts the
' individual bytes and converts them to hex appending them for an overall hex
' value
'*******************************************************************************
Private Function WordToHex(ByVal lValue As Long) As String
    Dim lByte As Long
    Dim lCount As Long
    
    For lCount = 0 To 3
        lByte = RShift(lValue, lCount * BITS_TO_A_BYTE) And _
            m_lOnBits(BITS_TO_A_BYTE - 1)
        WordToHex = WordToHex & Right("0" & Hex(lByte), 2)
    Next
End Function

'*******************************************************************************
' MD5 (FUNCTION)
'
' PARAMETERS:
' (In/Out) - sMessage - String - String to be digested
'
' RETURN VALUE:
' String - The MD5 digest
'
' DESCRIPTION:
' This function takes a string message and generates an MD5 digest for it.
' sMessage can be up to the VB string length limit of 2^31 (approx. 2 billion)
' characters.
'
' NOTE: Due to the way in which the string is processed the routine assumes a
' single byte character set. VB passes unicode (2-byte) character strings, the
' ConvertToWordArray function uses on the first byte for each character. This
' has been done this way for ease of use, to make the routine truely portable
' you could accept a byte array instead, it would then be up to the calling
' routine to make sure that the byte array is generated from their string in
' a manner consistent with the string type.
'*******************************************************************************
Public Function MD5(sMessage As String) As String
    Dim x() As Long
    Dim k   As Long
    Dim AA  As Long
    Dim BB  As Long
    Dim CC  As Long
    Dim DD  As Long
    Dim a   As Long
    Dim b   As Long
    Dim c   As Long
    Dim d   As Long
    
    Const S11 As Long = 7
    Const S12 As Long = 12
    Const S13 As Long = 17
    Const S14 As Long = 22
    Const S21 As Long = 5
    Const S22 As Long = 9
    Const S23 As Long = 14
    Const S24 As Long = 20
    Const S31 As Long = 4
    Const S32 As Long = 11
    Const S33 As Long = 16
    Const S34 As Long = 23
    Const S41 As Long = 6
    Const S42 As Long = 10
    Const S43 As Long = 15
    Const S44 As Long = 21

    ' Steps 1 and 2.  Append padding bits and length and convert to words
    x = ConvertToWordArray(sMessage)
    
    ' Step 3.  Initialise
    a = &H67452301
    b = &HEFCDAB89
    c = &H98BADCFE
    d = &H10325476

    ' Step 4.  Process the message in 16-word blocks
    For k = 0 To UBound(x) Step 16
        AA = a
        BB = b
        CC = c
        DD = d
    
        ' The hex number on the end of each of the following procedure calls is
        ' an element from the 64 element table constructed with
        ' T(i) = Int(4294967296 * Abs(Sin(i))) where i is 1 to 64.
        '
        ' However, for speed we don't want to calculate the value every time.
        FF a, b, c, d, x(k + 0), S11, &HD76AA478
        FF d, a, b, c, x(k + 1), S12, &HE8C7B756
        FF c, d, a, b, x(k + 2), S13, &H242070DB
        FF b, c, d, a, x(k + 3), S14, &HC1BDCEEE
        FF a, b, c, d, x(k + 4), S11, &HF57C0FAF
        FF d, a, b, c, x(k + 5), S12, &H4787C62A
        FF c, d, a, b, x(k + 6), S13, &HA8304613
        FF b, c, d, a, x(k + 7), S14, &HFD469501
        FF a, b, c, d, x(k + 8), S11, &H698098D8
        FF d, a, b, c, x(k + 9), S12, &H8B44F7AF
        FF c, d, a, b, x(k + 10), S13, &HFFFF5BB1
        FF b, c, d, a, x(k + 11), S14, &H895CD7BE
        FF a, b, c, d, x(k + 12), S11, &H6B901122
        FF d, a, b, c, x(k + 13), S12, &HFD987193
        FF c, d, a, b, x(k + 14), S13, &HA679438E
        FF b, c, d, a, x(k + 15), S14, &H49B40821
    
        GG a, b, c, d, x(k + 1), S21, &HF61E2562
        GG d, a, b, c, x(k + 6), S22, &HC040B340
        GG c, d, a, b, x(k + 11), S23, &H265E5A51
        GG b, c, d, a, x(k + 0), S24, &HE9B6C7AA
        GG a, b, c, d, x(k + 5), S21, &HD62F105D
        GG d, a, b, c, x(k + 10), S22, &H2441453
        GG c, d, a, b, x(k + 15), S23, &HD8A1E681
        GG b, c, d, a, x(k + 4), S24, &HE7D3FBC8
        GG a, b, c, d, x(k + 9), S21, &H21E1CDE6
        GG d, a, b, c, x(k + 14), S22, &HC33707D6
        GG c, d, a, b, x(k + 3), S23, &HF4D50D87
        GG b, c, d, a, x(k + 8), S24, &H455A14ED
        GG a, b, c, d, x(k + 13), S21, &HA9E3E905
        GG d, a, b, c, x(k + 2), S22, &HFCEFA3F8
        GG c, d, a, b, x(k + 7), S23, &H676F02D9
        GG b, c, d, a, x(k + 12), S24, &H8D2A4C8A
            
        HH a, b, c, d, x(k + 5), S31, &HFFFA3942
        HH d, a, b, c, x(k + 8), S32, &H8771F681
        HH c, d, a, b, x(k + 11), S33, &H6D9D6122
        HH b, c, d, a, x(k + 14), S34, &HFDE5380C
        HH a, b, c, d, x(k + 1), S31, &HA4BEEA44
        HH d, a, b, c, x(k + 4), S32, &H4BDECFA9
        HH c, d, a, b, x(k + 7), S33, &HF6BB4B60
        HH b, c, d, a, x(k + 10), S34, &HBEBFBC70
        HH a, b, c, d, x(k + 13), S31, &H289B7EC6
        HH d, a, b, c, x(k + 0), S32, &HEAA127FA
        HH c, d, a, b, x(k + 3), S33, &HD4EF3085
        HH b, c, d, a, x(k + 6), S34, &H4881D05
        HH a, b, c, d, x(k + 9), S31, &HD9D4D039
        HH d, a, b, c, x(k + 12), S32, &HE6DB99E5
        HH c, d, a, b, x(k + 15), S33, &H1FA27CF8
        HH b, c, d, a, x(k + 2), S34, &HC4AC5665
    
        II a, b, c, d, x(k + 0), S41, &HF4292244
        II d, a, b, c, x(k + 7), S42, &H432AFF97
        II c, d, a, b, x(k + 14), S43, &HAB9423A7
        II b, c, d, a, x(k + 5), S44, &HFC93A039
        II a, b, c, d, x(k + 12), S41, &H655B59C3
        II d, a, b, c, x(k + 3), S42, &H8F0CCC92
        II c, d, a, b, x(k + 10), S43, &HFFEFF47D
        II b, c, d, a, x(k + 1), S44, &H85845DD1
        II a, b, c, d, x(k + 8), S41, &H6FA87E4F
        II d, a, b, c, x(k + 15), S42, &HFE2CE6E0
        II c, d, a, b, x(k + 6), S43, &HA3014314
        II b, c, d, a, x(k + 13), S44, &H4E0811A1
        II a, b, c, d, x(k + 4), S41, &HF7537E82
        II d, a, b, c, x(k + 11), S42, &HBD3AF235
        II c, d, a, b, x(k + 2), S43, &H2AD7D2BB
        II b, c, d, a, x(k + 9), S44, &HEB86D391
    
        a = AddUnsigned(a, AA)
        b = AddUnsigned(b, BB)
        c = AddUnsigned(c, CC)
        d = AddUnsigned(d, DD)
    Next
    
    ' Step 5.  Output the 128 bit digest
    MD5 = LCase(WordToHex(a) & WordToHex(b) & WordToHex(c) & WordToHex(d))
End Function
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "frmAdmin"
Attribute VB_Base = "0{50AD5213-A916-11E7-A061-000C2961E840}{50AD51D4-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_ActiveView As String
Private m_CopyMode As MSComctlLib.OLEDropEffectConstants

Private Sub cmdAssign_Click()
    ReAssignCF
End Sub

Private Sub cmdBrws_Click()
    Dim sFolder As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim iPos As Integer
    Dim sVirtFold As String
    
    sFolder = GetFolder(Lang(39))
    If sFolder <> "" Then
        If UCase(oFileSys.GetFileName(oFileSys.GetParentFolderName(sFolder))) = "NETHOOD" Then
            sVirtFold = oFileSys.GetFileName(sFolder)
            iPos = InStr(StrReverse(sVirtFold), " no ")
            iPos = Len(sVirtFold) - iPos - 3
            If iPos > 0 Then
                sFolder = "\\" + Right(sVirtFold, Len(sVirtFold) - 4 - iPos) + "\" + Left(sVirtFold, iPos)
                Me.txtDBLoc.Text = sFolder
            End If
        Else
            Me.txtDBLoc.Text = sFolder
        End If
    End If
End Sub

Private Sub cmdCopy_Click()
    If m_ActiveView = Me.lvwSource.name Then
        DoCopy
    End If
    
    'initialize active list view to blank
    m_ActiveView = ""
End Sub

Private Sub cmdDBRestore_Click()
    If DBRestore(, Me.chkClearDB.Value) Then
        MsgBox Lang(40), vbInformation, PROG_NAME
    End If
End Sub

Private Sub cmdDelete_Click()
    Select Case m_ActiveView
        Case lvwSource.name
            If Not Me.lvwSource.SelectedItem Is Nothing Then
                If MsgBox(Lang(41), vbQuestion + vbYesNo + vbDefaultButton2, PROG_NAME) = vbYes Then
                    Me.Hide
                    ' Delete the Selected files
                    If DeleteFiles(Me.lvwSource, Me.lblSrc.ControlTipText + "\ClientMgr.mdb") Then
                        ' Refresh List
                        PopulateCFList Me.lblSrc.ControlTipText, Me.lvwSource, Me.lvwSource.ControlTipText
                    End If
                    ' Me.Show
                    Application.OnTime 1, "ShowAdmin"
                End If
            End If
        Case lvwTarget.name
            If Not Me.lvwTarget.SelectedItem Is Nothing Then
                If MsgBox(Lang(42), vbQuestion + vbYesNo + vbDefaultButton2, PROG_NAME) = vbYes Then
                    Me.Hide
                    ' Delete the Selected files
                    If DeleteFiles(Me.lvwTarget, Me.lblTarget.ControlTipText + "\ClientMgr.mdb") Then
                        ' Refresh List
                        PopulateCFList Me.lblTarget.ControlTipText, Me.lvwTarget, Me.lvwTarget.ControlTipText
                    End If
                    ' Me.Show
                    Application.OnTime 1, "ShowAdmin"
                End If
            End If
    End Select
    
    'initialize active list view to blank
    m_ActiveView = ""
End Sub

Private Sub cmdDumpConfig_Click()
    Me.Hide
    frmDiag.Show
    Me.Show
End Sub

Private Sub cmdExit_Click()
    Unload Me
End Sub

Private Sub PopulateClientFileList(Optional ByVal theFolderPath As String, Optional ByVal thePlanner As String)
    Dim sSQL As String
    Dim vData As Variant
    Dim iCnt As Long
    Dim oListItem As ListItem
    Dim sWhere As String
    Dim iIconIndex As Integer
    Dim sType As String
    Dim oTmpItem As ListItem
    
    If theFolderPath = "" Then
        sWhere = " (Path = '' OR Path IS NULL) "
    Else
        sWhere = " Path = '" + Replace(theFolderPath, "'", "''") + "' "
    End If
    
    ' Check if we are at root
    If theFolderPath <> "" Then
        ' If the Planner was not specified
        If thePlanner = "" Then
            ' Search for a [Parent Folder] item
            Set oTmpItem = Me.lvwClientFiles.FindItem(Lang(43))
            ' If the [Parent Folder] list item is found
            If Not oTmpItem Is Nothing Then
                ' The 5th subitem of that list item is the planner name
                thePlanner = oTmpItem.SubItems(5)
            End If
        End If
    End If
    
    If thePlanner <> "" Then
        sWhere = sWhere + " AND Creator = '" + Replace(thePlanner, "'", "''") + "' "
    End If

    ' Store the current view path in the tag property
    Me.lvwClientFiles.Tag = theFolderPath
    
    sSQL = "SELECT ClientName,Creator,DateModified,ModifiedBy,ClientFileID,Lock,PlanDate,Type,Path,CheckOut FROM tbClients WHERE " + sWhere + "  ORDER BY DateModified DESC"
    vData = ExecuteSQL(sSQL)
    Me.lvwClientFiles.ListItems.Clear
    ' Check if we are not at the root
    If theFolderPath <> "" Then
        ' Add a "parent folder" item
        Set oListItem = Me.lvwClientFiles.ListItems.Add(, , Lang(43), , 6)
        oListItem.SubItems(5) = thePlanner
    End If
    If IsArray(vData) Then
        ' Iterate through entire records
        For iCnt = LBound(vData, 2) To UBound(vData, 2)
            ' Check if type of item is file or folder
            sType = RemoveNull(vData(7, iCnt))
            ' Set the Icon to use (folder or file)
            iIconIndex = IIf(sType = ".", 5, 1)
            ' Add an item to listview
            Set oListItem = Me.lvwClientFiles.ListItems.Add(, , vData(0, iCnt), , iIconIndex)
            If iIconIndex = 5 Then
                oListItem.SubItems(7) = "A " + oListItem.Text
                oListItem.SubItems(8) = "A " + StringPaddedDate(RemoveNull(vData(2, iCnt)))
            Else
                oListItem.SubItems(7) = "B " + oListItem.Text
                oListItem.SubItems(8) = "B " + StringPaddedDate(RemoveNull(vData(2, iCnt)))
                oListItem.SubItems(10) = "B " + StringPaddedDate(RemoveNull(vData(6, iCnt)))
            End If
            oListItem.SubItems(1) = RemoveNull(vData(1, iCnt))
            oListItem.SubItems(2) = RemoveNull(vData(2, iCnt))
            oListItem.SubItems(3) = Format(RemoveNull(vData(6, iCnt)), IIf(IsFrench, "yyyy-mm-dd", "mmmm dd, yyyy"))
            oListItem.SubItems(4) = RemoveNull(vData(3, iCnt))
            oListItem.SubItems(5) = RemoveNull(vData(4, iCnt))
            oListItem.SubItems(6) = RemoveNull(vData(5, iCnt))
            oListItem.SubItems(9) = RemoveNull(vData(8, iCnt))
            oListItem.SubItems(11) = RemoveNull(vData(9, iCnt))
            If oListItem.SubItems(6) <> "" Then
                oListItem.SmallIcon = 2
            Else
                If oListItem.SubItems(11) <> "" Then
                    oListItem.SmallIcon = 7
                End If
            End If
        Next iCnt
    End If
End Sub

Private Sub cmdHelp_Click()
    Run "FPS.xls!RunHelp", ThisWorkbook, ActiveSheet, cmdHelp, Me
        
    'initialize active list view to blank
    m_ActiveView = ""
End Sub

Private Sub cmdMove_Click()
    If m_ActiveView = Me.lvwSource.name Then
        MoveFiles
    End If
        
    'initialize active list view to blank
    m_ActiveView = ""
End Sub

Private Sub cmdRefresh_Click()
    Me.cmdRefresh.Enabled = False
    PopulateClientFileList lvwClientFiles.Tag
End Sub

Private Sub cmdSelSrc_Click()
    Dim sFolder As String
    
    ChDir ThisWorkbook.path
    sFolder = GetFolder(Lang(238))
    If sFolder <> "" Then
        If sFolder <> Me.lblTarget.ControlTipText Then
            Me.lblSrc.ControlTipText = sFolder
            Me.lblSrc.Caption = Lang(353) + Me.lblSrc.ControlTipText
            If CheckPathFields(Me.lblSrc.ControlTipText + "\ClientMgr.mdb") Then
                PopulateCFList Me.lblSrc.ControlTipText, Me.lvwSource
                SaveSetting PROG_NAME, GetSettingsKey, "LastSourceFolder", Me.lblSrc.ControlTipText
            End If
        Else
            MsgBox Lang(239), vbExclamation, PROG_NAME
        End If
    End If
    
    'initialize active list view to blank
    m_ActiveView = ""
End Sub

Private Sub cmdSelTgt_Click()
    Dim sFolder As String
    
    ChDir ThisWorkbook.path
    sFolder = GetFolder(Lang(238))
    If sFolder <> "" Then
        If sFolder <> Me.lblSrc.ControlTipText Then
            Me.lblTarget.ControlTipText = sFolder
            Me.lblTarget.Caption = Lang(240) + Me.lblTarget.ControlTipText
            If CheckPathFields(Me.lblTarget.ControlTipText + "\ClientMgr.mdb") Then
                PopulateCFList Me.lblTarget.ControlTipText, Me.lvwTarget
                SaveSetting PROG_NAME, GetSettingsKey, "LastTargetFolder", Me.lblTarget.ControlTipText
            End If
        Else
            MsgBox Lang(358), vbExclamation, PROG_NAME
        End If
    End If
    
    'initialize active list view to blank
    m_ActiveView = ""
End Sub

Private Sub cmdShare_Click()
    If Me.txtDBLoc.Text <> "" Then
        If ShareRogueDB Then
            SaveSettingsTable "ListAllClientFiles", IIf(Me.chkShowAll.Value, "Yes", "No"), Me.txtDBLoc.Text + "\ClientMgr.mdb"
            MsgBox Lang(359), vbInformation, PROG_NAME
        End If
    End If
End Sub

Private Sub cmdSwap_Click()
    Dim sTmp As String
    
    sTmp = Me.lblTarget.ControlTipText
    Me.lblTarget.ControlTipText = Me.lblSrc.ControlTipText
    Me.lblTarget.Caption = Lang(240) + Me.lblSrc.ControlTipText
    Me.lvwTarget.ListItems.Clear
    PopulateCFList Me.lblTarget.ControlTipText, Me.lvwTarget
    SaveSetting PROG_NAME, GetSettingsKey, "LastTargetFolder", Me.lblTarget.ControlTipText

    Me.lblSrc.ControlTipText = sTmp
    Me.lblSrc.Caption = Lang(353) + sTmp
    Me.lvwSource.ListItems.Clear
    PopulateCFList Me.lblSrc.ControlTipText, Me.lvwSource
    SaveSetting PROG_NAME, GetSettingsKey, "LastSourceFolder", Me.lblSrc.ControlTipText
    
    'initialize active list view to blank
    m_ActiveView = ""
End Sub

Private Sub lvwClientFiles_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
    lvwClientFiles.Sorted = True
    Select Case ColumnHeader.index
        Case 1
            lvwClientFiles.SortKey = 7
        Case 3
            lvwClientFiles.SortKey = 8
        Case 4
            lvwClientFiles.SortKey = 10
        Case Else
            lvwClientFiles.SortKey = ColumnHeader.index - 1
    End Select
    lvwClientFiles.SortOrder = IIf(lvwClientFiles.SortOrder = lvwAscending, lvwDescending, lvwAscending)
End Sub

Private Sub lvwClientFiles_DblClick()
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sPlanner As String
    
    If Not lvwClientFiles.SelectedItem Is Nothing Then
        Select Case True
            Case lvwClientFiles.SelectedItem.SmallIcon = 5
                PopulateClientFileList lvwClientFiles.SelectedItem.SubItems(9) + "\" + lvwClientFiles.SelectedItem.Text, Me.lvwClientFiles.SelectedItem.SubItems(1)
            Case lvwClientFiles.SelectedItem.SmallIcon = 6
                If oFileSys.GetParentFolderName(lvwClientFiles.Tag) = "" Then
                    sPlanner = ""
                Else
                    sPlanner = Me.lvwClientFiles.SelectedItem.SubItems(5)
                End If
                PopulateClientFileList oFileSys.GetParentFolderName(lvwClientFiles.Tag), sPlanner
            Case Else
                Call cmdAssign_Click
        End Select
    End If
End Sub

Private Sub lvwSource_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
    lvwSource.Sorted = True
    Select Case ColumnHeader.index
        Case 1
            lvwSource.SortKey = 4
        Case 2
            lvwSource.SortKey = 7
        Case Else
            lvwSource.SortKey = ColumnHeader.index - 1
    End Select
    lvwSource.SortOrder = IIf(lvwSource.SortOrder = lvwAscending, lvwDescending, lvwAscending)
End Sub

Private Sub lvwSource_DblClick()
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sPlanner As String
    
    If Not Me.lvwSource.SelectedItem Is Nothing Then
        Select Case Me.lvwSource.SelectedItem.SmallIcon
            Case 5
                PopulateCFList Me.lblSrc.ControlTipText, Me.lvwSource, Me.lvwSource.SelectedItem.SubItems(5) + "\" + Me.lvwSource.SelectedItem.Text, Me.lvwSource.SelectedItem.SubItems(6)
            Case 6
                If oFileSys.GetParentFolderName(Me.lvwSource.ControlTipText) = "" Then
                    sPlanner = ""
                Else
                    sPlanner = Me.lvwSource.SelectedItem.SubItems(3)
                End If
                PopulateCFList Me.lblSrc.ControlTipText, Me.lvwSource, Me.lvwSource.SelectedItem.SubItems(5), sPlanner
        End Select
    End If
End Sub

Private Sub lvwSource_Enter()
    m_ActiveView = lvwSource.name
End Sub
Private Sub lvwSource_Click()
m_ActiveView = lvwSource.name
End Sub

Private Sub lvwSource_ItemClick(ByVal Item As MSComctlLib.ListItem)
m_ActiveView = lvwSource.name
End Sub

Private Sub lvwSource_KeyUp(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = 8 Or KeyCode = 46 Then
        If Not Me.lvwSource.SelectedItem Is Nothing Then
            If MsgBox(Lang(360), vbQuestion + vbYesNo + vbDefaultButton2, PROG_NAME) = vbYes Then
                ' Delete the Selected files
                Me.Hide
                ' Delete the Selected files
                If DeleteFiles(Me.lvwSource, Me.lblSrc.ControlTipText + "\ClientMgr.mdb") Then
                    ' Refresh List
                    PopulateCFList Me.lblSrc.ControlTipText, Me.lvwSource
                End If
                ' Me.Show
                Application.OnTime 1, "ShowAdmin"
            End If
        End If
    End If
End Sub

Private Sub lvwTarget_Click()
m_ActiveView = lvwTarget.name
End Sub

Private Sub lvwTarget_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
    lvwTarget.Sorted = True
    Select Case ColumnHeader.index
        Case 1
            lvwTarget.SortKey = 4
        Case 2
            lvwTarget.SortKey = 7
        Case Else
            lvwTarget.SortKey = ColumnHeader.index - 1
    End Select
    lvwTarget.SortOrder = IIf(lvwTarget.SortOrder = lvwAscending, lvwDescending, lvwAscending)
End Sub

Private Sub lvwTarget_DblClick()
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sPlanner As String
    
    If Not Me.lvwTarget.SelectedItem Is Nothing Then
        Select Case Me.lvwTarget.SelectedItem.SmallIcon
            Case 5
                PopulateCFList Me.lblTarget.ControlTipText, Me.lvwTarget, Me.lvwTarget.SelectedItem.SubItems(5) + "\" + Me.lvwTarget.SelectedItem.Text, Me.lvwTarget.SelectedItem.SubItems(6)
            Case 6
                If oFileSys.GetParentFolderName(Me.lvwTarget.ControlTipText) = "" Then
                    sPlanner = ""
                Else
                    sPlanner = Me.lvwTarget.SelectedItem.SubItems(3)
                End If
                PopulateCFList Me.lblTarget.ControlTipText, Me.lvwTarget, Me.lvwTarget.SelectedItem.SubItems(5), sPlanner
        End Select
    End If
End Sub

Private Sub lvwTarget_Enter()
    m_ActiveView = lvwTarget.name
End Sub

Private Sub lvwTarget_ItemClick(ByVal Item As MSComctlLib.ListItem)
m_ActiveView = lvwTarget.name
End Sub

Private Sub lvwTarget_KeyUp(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = 8 Or KeyCode = 46 Then
        If Not Me.lvwTarget.SelectedItem Is Nothing Then
            If MsgBox(Lang(360), vbQuestion + vbYesNo + vbDefaultButton2, PROG_NAME) = vbYes Then
                ' Delete the Selected files
                Me.Hide
                ' Delete the Selected files
                If DeleteFiles(Me.lvwTarget, Me.lblTarget.ControlTipText + "\ClientMgr.mdb") Then
                    ' Refresh List
                    PopulateCFList Me.lblTarget.ControlTipText, Me.lvwTarget
                End If
                ' Me.Show
                Application.OnTime 1, "ShowAdmin"
            End If
        End If
    End If
End Sub

Private Sub lvwTarget_OLEDragDrop(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single)
    Select Case m_CopyMode
        Case ccOLEDropEffectCopy
            DoCopy
        Case ccOLEDropEffectMove
            MoveFiles
    End Select
    
    'initialize active list view to blank
    m_ActiveView = ""
End Sub

Private Sub lvwTarget_OLEDragOver(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single, State As Integer)
    Select Case True
        Case Data.GetFormat(ccCFText)
            If Data.GetData(ccCFText) = Lang(43) Then
                Effect = ccOLEDropEffectNone
                m_CopyMode = ccOLEDropEffectNone
            Else
                Select Case Shift
                    Case 0, 1
                        Effect = ccOLEDropEffectMove
                        m_CopyMode = ccOLEDropEffectMove
                    Case 2
                        Effect = ccOLEDropEffectCopy
                        m_CopyMode = ccOLEDropEffectCopy
                End Select
            End If
'        Case Data.GetFormat(ccCFBitmap)
'            Debug.Print "Bitmap"
'        Case Data.GetFormat(ccCFDIB)
'            Debug.Print "DIB"
'        Case Data.GetFormat(ccCFEMetafile)
'            Debug.Print "EMetafile"
'        Case Data.GetFormat(ccCFFiles)
'            Debug.Print "Files"
'        Case Data.GetFormat(ccCFMetafile)
'            Debug.Print "Metafile"
'        Case Data.GetFormat(ccCFPalette)
'            Debug.Print "Palette"
'        Case Data.GetFormat(ccCFRTF)
'            Debug.Print "RTF"
        Case Else
            Effect = ccOLEDropEffectNone
            m_CopyMode = ccOLEDropEffectNone
    End Select
End Sub

Private Sub MultiPage1_Change()
    'initialize active list view to blank
    m_ActiveView = ""
End Sub

Private Sub UserForm_Click()
    'initialize active list view to blank
    m_ActiveView = ""
End Sub

Private Sub UserForm_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    'initialize active list view to blank
    m_ActiveView = ""
End Sub

Private Sub UserForm_Initialize()
    Dim sLastSrcFolder As String
    Dim sLastTgtFolder As String
    Dim oFileSys As New Scripting.FileSystemObject
    
    Me.lvwClientFiles.SmallIcons = Me.imgList
    Me.lvwSource.SmallIcons = Me.imgList
    Me.lvwTarget.SmallIcons = Me.imgList
    Me.lvwClientFiles.ColumnHeaders(1).Width = 174
    Me.lvwClientFiles.ColumnHeaders(2).Width = 125.25
    Me.lvwClientFiles.ColumnHeaders(3).Width = 96
    Me.lvwClientFiles.ColumnHeaders(4).Width = 96
    Me.lvwClientFiles.ColumnHeaders(5).Width = 125.5
    Me.lvwClientFiles.SortKey = 7
    Me.lvwClientFiles.Sorted = True
    Me.lvwSource.SortKey = 4
    Me.lvwSource.Sorted = True
    Me.lvwTarget.SortKey = 4
    Me.lvwTarget.Sorted = True
    PopulateClientFileList
    
    sLastSrcFolder = GetSetting(PROG_NAME, GetSettingsKey, "LastSourceFolder", "")
    If sLastSrcFolder <> "" Then
        If oFileSys.FolderExists(sLastSrcFolder) Then
            If CheckPathFields(sLastSrcFolder + "\ClientMgr.mdb") Then
                Me.lblSrc.ControlTipText = sLastSrcFolder
                Me.lblSrc.Caption = Lang(353) + Me.lblSrc.ControlTipText
                PopulateCFList Me.lblSrc.ControlTipText, Me.lvwSource
            Else
                MsgBox Lang(354), vbExclamation, PROG_NAME
            End If
        End If
    End If
    sLastTgtFolder = GetSetting(PROG_NAME, GetSettingsKey, "LastTargetFolder", "")
    If sLastTgtFolder <> "" Then
        If sLastTgtFolder <> sLastSrcFolder Then
            If oFileSys.FolderExists(sLastTgtFolder) Then
                If CheckPathFields(sLastTgtFolder + "\ClientMgr.mdb") Then
                    Me.lblTarget.ControlTipText = sLastTgtFolder
                    Me.lblTarget.Caption = Lang(240) + Me.lblTarget.ControlTipText
                    PopulateCFList Me.lblTarget.ControlTipText, Me.lvwTarget
                Else
                    MsgBox Lang(241), vbExclamation, PROG_NAME
                End If
            End If
        End If
    End If
    
    InitPathDisplay
End Sub

Public Sub ReAssignCF()
    Dim iNumSel As Long
    Dim iCnt As Integer
    Dim bUseMulti As Boolean
    Dim vPlannerList As Variant
    Dim sPWD As String
    Dim bContinue As Boolean
    Dim sSQL As String
    Dim iRecAffect As Integer
    Dim iProgCnt As Long
    Dim bHasFolder As Boolean
    Dim iStart As Integer
    Dim oFileSys As New Scripting.FileSystemObject
    Dim bDoRefresh As Boolean
    
    If Me.lvwClientFiles.ListItems.Count = 0 Then
        MsgBox Lang(1493), vbExclamation, PROG_NAME
        Exit Sub
    End If
    
    If Me.lvwClientFiles.ListItems(1).SmallIcon = 6 Then
        iStart = 2
        Me.lvwClientFiles.ListItems(1).Selected = False
    Else
        iStart = 1
    End If
    
    ' Count How many selected determine if we use multi (1 or many)
    For iCnt = iStart To Me.lvwClientFiles.ListItems.Count
        If Me.lvwClientFiles.ListItems(iCnt).Selected Then
            iNumSel = iNumSel + 1
            If iNumSel > 1 Then
                bUseMulti = True
                Exit For
            End If
        End If
    Next iCnt
    
    ' Check if we have at least 1 folder selected
    For iCnt = iStart To Me.lvwClientFiles.ListItems.Count
        If Me.lvwClientFiles.ListItems(iCnt).Selected Then
            If Me.lvwClientFiles.ListItems(iCnt).SmallIcon = 5 Then
                bHasFolder = True
                Exit For
            End If
        End If
    Next iCnt
    
    If CheckReadOnlyLock(Me.lvwClientFiles) Then
        If MsgBox(Lang(242), vbYesNo + vbExclamation + vbDefaultButton2, PROG_NAME) = vbNo Then
            Exit Sub
        End If
    End If

    If bHasFolder Then
        Select Case MsgBox(Lang(243), vbYesNo + vbQuestion, PROG_NAME)
            Case vbNo
                Exit Sub
        End Select
    End If
    
    If bUseMulti Then
        ' Load the MultiAssign Form
        Load frmMultiAssign
        ' Get List of planners in DB
        vPlannerList = GetPlannerListDB
        If IsArray(vPlannerList) Then
            frmMultiAssign.cboPlanner.Clear
            For iCnt = LBound(vPlannerList, 2) To UBound(vPlannerList, 2)
                frmMultiAssign.cboPlanner.AddItem vPlannerList(0, iCnt)
            Next iCnt
        End If
        frmMultiAssign.Show
        If frmMultiAssign.m_ButtonClicked = frmMultiAssign.cmdOK.Caption Then
            ' Hide Me
            Me.Hide
            DoEvents
            ' Load Progress
            Load frmProgress
            frmProgress.Caption = Lang(244)
            frmProgress.SetProgress 0, Lang(245)
            frmProgress.Display
            
            Application.ScreenUpdating = False
            
            ' Iterate through list
            For iCnt = 1 To Me.lvwClientFiles.ListItems.Count
                ' Set progress Value
                iProgCnt = iProgCnt + 1
                frmProgress.SetProgress iProgCnt / Me.lvwClientFiles.ListItems.Count * 100
                If Me.lvwClientFiles.ListItems(iCnt).Selected Then
                    ' Check if UnLocked
                    If Me.lvwClientFiles.ListItems(iCnt).SubItems(6) = "" Or Me.lvwClientFiles.ListItems(iCnt).SmallIcon <> 6 Then
                        ' Check if item is folder
                        If Me.lvwClientFiles.ListItems(iCnt).SmallIcon <> 5 And Me.lvwClientFiles.ListItems(iCnt).SmallIcon <> 6 Then
                            ' Get password
                            sPWD = GetCFPassword(Me.lvwClientFiles.ListItems(iCnt).SubItems(5))
                        End If
                        bContinue = True
                        ' Check Password
                        If sPWD <> "" Then
                            bContinue = False
                            If frmMultiAssign.optUsePWD Then
                                If frmMultiAssign.txtPassword.Text = sPWD Then
                                    bContinue = True
                                Else
                                    Me.lvwClientFiles.ListItems(iCnt).SmallIcon = 4
                                    Me.lvwClientFiles.ListItems(iCnt).TooltipText = Lang(246)
                                End If
                            Else
                                Me.lvwClientFiles.ListItems(iCnt).SmallIcon = 4
                                Me.lvwClientFiles.ListItems(iCnt).TooltipText = Lang(247)
                            End If
                        End If
                        ' If Folder check if one of the files is locked
                        If Me.lvwClientFiles.ListItems(iCnt).SmallIcon = 5 Then
                            If HasFileLocked(Me.lvwClientFiles.ListItems(iCnt).SubItems(9) + "\" + Me.lvwClientFiles.ListItems(iCnt).Text) Then
                                MsgBox Lang(248), vbExclamation, PROG_NAME
                                bContinue = False
                            End If
                        End If
                        If bContinue Then
                            ' Set progress caption
                            frmProgress.SetProgress iProgCnt / Me.lvwClientFiles.ListItems.Count * 100, Replace(Lang(355), "%ITEM%", Me.lvwClientFiles.ListItems(iCnt).Text)
                            ' Check if Folder
                            If Me.lvwClientFiles.ListItems(iCnt).SmallIcon = 5 Then
                                ' Change planner for the folder and its contents
                                ReAssignFolder Me.lvwClientFiles.ListItems(iCnt).SubItems(9) + "\" + Me.lvwClientFiles.ListItems(iCnt).Text, Me.lvwClientFiles.ListItems(iCnt).SubItems(1), frmMultiAssign.cboPlanner.Text
                                bDoRefresh = True
                            Else
                                ' Check if Unique when re-assigned
                                If IsUniquePath(Me.lvwClientFiles.ListItems(iCnt).SubItems(9), Me.lvwClientFiles.ListItems(iCnt).Text, frmMultiAssign.cboPlanner.Text) Then
                                    If Not PlannerHasFolder(frmMultiAssign.cboPlanner.Text, Me.lvwClientFiles.ListItems(iCnt).SubItems(9)) Then
                                        ' Recreate folder path structure
                                        RecreateFolderStructure Me.lvwClientFiles.ListItems(iCnt).SubItems(9), frmMultiAssign.cboPlanner.Text, Me.lvwClientFiles.ListItems(iCnt).SubItems(1), False
                                    End If
                                    sSQL = "UPDATE tbClients SET Creator = '" + frmMultiAssign.cboPlanner.Text + "' WHERE ClientFileID = '" + Me.lvwClientFiles.ListItems(iCnt).SubItems(5) + "'"
                                    iRecAffect = ExecuteSQL(sSQL)
                                    If iRecAffect > 0 Then
                                        ' Show in report or progress
                                        If Me.lvwClientFiles.ListItems(iCnt).SmallIcon <> 5 Then
                                            Me.lvwClientFiles.ListItems(iCnt).SmallIcon = 3
                                        End If
                                        Me.lvwClientFiles.ListItems(iCnt).TooltipText = ""
                                        Me.lvwClientFiles.ListItems(iCnt).SubItems(1) = frmMultiAssign.cboPlanner.Text
                                    End If
                                Else
                                    ' Unable to Re-assign because it is not unique
                                    Me.lvwClientFiles.ListItems(iCnt).SmallIcon = 4
                                    Me.lvwClientFiles.ListItems(iCnt).TooltipText = Lang(249)
                                End If
                            End If
                        End If
                    End If
                End If
            Next iCnt
            
            If Val(Application.ScreenUpdating) <> Val(True) Then
                Application.ScreenUpdating = True
            End If
            
            frmProgress.Hide
            Unload frmProgress
            Me.Show vbNormal
            'MsgBox "Re-Assign Planner process done!", vbInformation, PROG_NAME
            If bDoRefresh Then
                PopulateClientFileList Me.lvwClientFiles.Tag
            End If
            Me.cmdRefresh.Enabled = True
            Me.Hide
            Application.OnTime 1, "ShowAdmin"
        End If
        frmMultiAssign.m_ForceClose = True
        Unload frmMultiAssign
    Else
        ' Check if currently unlocked
        If Me.lvwClientFiles.SelectedItem.SubItems(6) = "" Or Me.lvwClientFiles.SelectedItem.SmallIcon <> 6 Then
            ' Check if folder
            If Me.lvwClientFiles.SelectedItem.SmallIcon <> 5 And Me.lvwClientFiles.SelectedItem.SmallIcon <> 6 Then
                ' Get the Password
                sPWD = GetCFPassword(Me.lvwClientFiles.SelectedItem.SubItems(5))
            End If
            ' Get List of planners in DB
            vPlannerList = GetPlannerListDB
            ' Load the Assign Single Form
            Load frmAssign
            If IsArray(vPlannerList) Then
                frmAssign.cboPlanner.Clear
                For iCnt = LBound(vPlannerList, 2) To UBound(vPlannerList, 2)
                    frmAssign.cboPlanner.AddItem vPlannerList(0, iCnt)
                Next iCnt
            End If
            frmAssign.lblClientFile.Caption = Me.lvwClientFiles.SelectedItem.Text
            frmAssign.lblDateModified.Caption = Format(Me.lvwClientFiles.SelectedItem.SubItems(2), IIf(IsFrench, "yyyy-mm-dd", "mmmm dd, yyyy"))
            frmAssign.lblPlanDate.Caption = Format(Me.lvwClientFiles.SelectedItem.SubItems(3), IIf(IsFrench, "yyyy-mm-dd", "mmmm dd, yyyy"))
            If sPWD <> "" Then
                frmAssign.lblPassword.Enabled = True
                frmAssign.txtPassword.Enabled = True
                frmAssign.txtPassword.BackColor = vbWindowBackground
            End If
            frmAssign.Show
            If frmAssign.m_ButtonClicked = frmAssign.cmdOK.Caption Then
                bContinue = True
                If frmAssign.txtPassword.Enabled Then
                    If frmAssign.txtPassword.Text <> sPWD Then
                        MsgBox Lang(250), vbExclamation, PROG_NAME
                        bContinue = False
                    Else
                        bContinue = True
                    End If
                End If
                ' If Folder check if one of the files is locked
                If Me.lvwClientFiles.SelectedItem.SmallIcon = 5 Then
                    If HasFileLocked(Me.lvwClientFiles.SelectedItem.SubItems(9) + "\" + Me.lvwClientFiles.SelectedItem.Text) Then
                        MsgBox Lang(248), vbExclamation, PROG_NAME
                        bContinue = False
                    End If
                End If
                If bContinue Then
                    ' Check if Folder
                    If Me.lvwClientFiles.SelectedItem.SmallIcon = 5 Then
                        ' Change Planner of folder contents
                        ReAssignFolder Me.lvwClientFiles.SelectedItem.SubItems(9) + "\" + Me.lvwClientFiles.SelectedItem.Text, Me.lvwClientFiles.SelectedItem.SubItems(1), frmAssign.cboPlanner.Text
                        ' Refresh List
                        PopulateClientFileList Me.lvwClientFiles.Tag
                    Else
                        ' Check if unique
                        If IsUniquePath(Me.lvwClientFiles.SelectedItem.SubItems(9), Me.lvwClientFiles.SelectedItem.Text, frmAssign.cboPlanner.Text) Then
                            If Not PlannerHasFolder(frmAssign.cboPlanner.Text, Me.lvwClientFiles.SelectedItem.SubItems(9)) Then
                                ' Recreate Path of Folder
                                RecreateFolderStructure Me.lvwClientFiles.SelectedItem.SubItems(9), frmAssign.cboPlanner.Text, Me.lvwClientFiles.SelectedItem.SubItems(1), False
                            End If
                            sSQL = "UPDATE tbClients SET Creator = '" + Replace(frmAssign.cboPlanner.Text, "'", "''") + "' WHERE ClientFileID = '" + Me.lvwClientFiles.SelectedItem.SubItems(5) + "'"
                            iRecAffect = ExecuteSQL(sSQL)
                            If iRecAffect > 0 Then
                                If Me.lvwClientFiles.SelectedItem.SmallIcon <> 5 Then
                                    Me.lvwClientFiles.SelectedItem.SmallIcon = 3
                                End If
                                Me.lvwClientFiles.SelectedItem.TooltipText = ""
                                Me.lvwClientFiles.SelectedItem.SubItems(1) = frmAssign.cboPlanner.Text
                                Me.cmdRefresh.Enabled = True
                                ' PopulateClientFileList
                            End If
                        Else
                            Me.lvwClientFiles.SelectedItem.SmallIcon = 4
                            Me.lvwClientFiles.SelectedItem.TooltipText = Lang(249)
                        End If
                    End If
                End If
            End If
            frmAssign.m_ForceClose = True
            Unload frmAssign
        Else
            If MsgBox(Lang(251) + vbLf + Lang(252) + vbLf + Lang(253), vbQuestion + vbYesNo + vbDefaultButton2, PROG_NAME) = vbYes Then
                If UnlockClient(Me.lvwClientFiles.SelectedItem.SubItems(5)) Then
                    Me.lvwClientFiles.SelectedItem.SubItems(6) = ""
                    Me.lvwClientFiles.SelectedItem.SmallIcon = 1
                End If
            End If
        End If
    End If
End Sub

Private Sub PopulateCFList(ByVal theFolder As String, ByRef theListView As Object, Optional ByVal theViewPath As String, Optional ByVal theViewPlanner As String)
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sSQL As String
    Dim vArray As Variant
    Dim oListItem As ListItem
    Dim iCnt As Long
    Dim sWherePath As String
    
    theListView.ControlTipText = theViewPath
    
    If oFileSys.FolderExists(theFolder) Then
        theListView.ListItems.Clear
        If oFileSys.FileExists(theFolder + "\ClientMgr.mdb") Then
            If theViewPath = "" Then
                sWherePath = "(Path IS NULL OR Path = '')"
            Else
                sWherePath = "Path = '" + Replace(theViewPath, "'", "''") + "'"
            End If
            If theViewPlanner <> "" Then
                sWherePath = sWherePath + " AND Creator = '" + Replace(theViewPlanner, "'", "''") + "' "
            End If
            sSQL = "SELECT ID,ClientName,ClientFileID,Lock,Type,Path,Creator,CheckOut FROM tbClients WHERE " + sWherePath + " ORDER BY DateModified DESC"
            vArray = ExecuteSQL(sSQL, theFolder + "\ClientMgr.mdb")
            If theViewPath <> "" Then
                Set oListItem = theListView.ListItems.Add(, , Lang(43), , 6)
                oListItem.SubItems(5) = oFileSys.GetParentFolderName(theViewPath)
                oListItem.SubItems(3) = theViewPlanner
            End If
            If IsArray(vArray) Then
                For iCnt = LBound(vArray, 2) To UBound(vArray, 2)
                    Set oListItem = theListView.ListItems.Add(, , vArray(1, iCnt), , 1)
                    ' ID
                    oListItem.SubItems(1) = vArray(0, iCnt)
                    ' ClientFileID
                    oListItem.SubItems(2) = vArray(2, iCnt)
                    ' Lock
                    oListItem.SubItems(3) = RemoveNull(vArray(3, iCnt))
                    If RemoveNull(vArray(4, iCnt)) = "." Then
                        ' Sort_Name
                        oListItem.SubItems(4) = "A " + vArray(1, iCnt)
                        ' Use Folder Icon
                        oListItem.SmallIcon = 5
                        ' Sort_Planner
                        oListItem.SubItems(7) = "A " + RemoveNull(vArray(6, iCnt))
                    Else
                        ' Sort_Name
                        oListItem.SubItems(4) = "B " + vArray(1, iCnt)
                        ' Sort_Planner
                        oListItem.SubItems(7) = "B " + RemoveNull(vArray(6, iCnt))
                    End If
                    ' Path
                    oListItem.SubItems(5) = RemoveNull(vArray(5, iCnt))
                    ' Planner
                    oListItem.SubItems(6) = RemoveNull(vArray(6, iCnt))
                    ' Check Out
                    oListItem.SubItems(8) = RemoveNull(vArray(7, iCnt))
                    ' Check if Locked
                    If oListItem.SubItems(3) <> "" Then
                        oListItem.SmallIcon = 2
                    Else
                        ' Check if Checked Out
                        If oListItem.SubItems(8) <> "" Then
                            oListItem.SmallIcon = 7
                        End If
                    End If
                Next iCnt
            End If
            theListView.Refresh
        End If
    End If
End Sub

Private Function DeleteFiles(ByVal theListView As ListView, ByVal theDBFilePath As String, Optional ByVal thePassword As Variant, Optional ByVal bPromptPWDIfEmpty As Boolean = False) As Boolean
    Dim oListItem As ListItem
    Dim vPWD As Variant
    Dim sCFPWD As String
    Dim bSkip As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sSQL As String
    Dim iRecAffect As Integer
    Dim bDeleted As Boolean
    Dim iProgCnt As Double
    Dim iTmp As Long
    Dim vTmp As Variant
    Dim iCnt As Integer
    Dim bNoDelete As Boolean
    
    If Not oFileSys.FileExists(theDBFilePath) Then
        MsgBox Replace(Lang(254), "%PATH%", oFileSys.GetParentFolderName(theDBFilePath)), vbCritical, PROG_NAME
        Exit Function
    End If
    
    If Not IsMissing(thePassword) Then
        If thePassword = "" Then
            If bPromptPWDIfEmpty Then
                vPWD = AskForPassword
            Else
                vPWD = thePassword
            End If
        Else
            vPWD = thePassword
        End If
    Else
        vPWD = AskForPassword
    End If
    
    If vPWD <> False Then
        Load frmProgress
        frmProgress.Caption = Lang(255)
        frmProgress.SetProgress 0, Lang(256)
        frmProgress.Display
        For Each oListItem In theListView.ListItems
            iTmp = iTmp + 1
            iProgCnt = iTmp / theListView.ListItems.Count * 100
            frmProgress.SetProgress iProgCnt
            If oListItem.Selected Then
                If oListItem.Text <> Lang(43) Then
                    If IsLockedBy(oListItem.SubItems(2), theDBFilePath) = "" Then
                        If Not WorkBookExists(oListItem.SubItems(2) + STR_DATAFILE_EXT) Then
                            ' If not Folder item
                            If oListItem.SmallIcon <> 5 Then
                                ' Check if client file has pwd password
                                sCFPWD = GetCFPassword(oListItem.SubItems(2), theDBFilePath)
                                bSkip = False
                                If sCFPWD <> "" Then
                                    bSkip = True
                                    If sCFPWD = vPWD Then
                                        bSkip = False
                                    Else
                                        oListItem.SmallIcon = 4
                                        oListItem.TooltipText = Lang(257)
                                    End If
                                End If
                            Else
                                bSkip = False
                            End If
                            If Not bSkip Then
                                frmProgress.SetProgress iProgCnt, Replace(Lang(258), "%ITEMNAME%", oListItem.Text)
                                ' Check if item is folder
                                If oListItem.SmallIcon = 5 Then
                                    ' Check if folder contains locked files
                                    If Not HasFileLocked(oListItem.SubItems(5) + "\" + oListItem.Text, theDBFilePath) Then
                                        ' Get Files and Folders inside this Folder
                                        sSQL = "SELECT ClientFileID,Type,ClientName FROM tbClients WHERE Path LIKE '" + Replace(oListItem.SubItems(5) + "\" + oListItem.Text, "'", "''") + "%' AND Creator = '" + oListItem.SubItems(6) + "'"
                                        vTmp = ExecuteSQL(sSQL, theDBFilePath)
                                        ' If this folder contains items
                                        If IsArray(vTmp) Then
                                            ' Iterate through the list of returned items
                                            For iCnt = LBound(vTmp, 2) To UBound(vTmp, 2)
                                                ' Init No delete flag
                                                bNoDelete = False
                                                ' Check if a file exists
                                                If oFileSys.FileExists(oFileSys.GetParentFolderName(theDBFilePath) + "\" + vTmp(0, iCnt) + STR_DATAFILE_EXT) Then
                                                    ' Continue on error
                                                    On Error Resume Next
                                                    ' Attempt to Delete the File first
                                                    oFileSys.DeleteFile oFileSys.GetParentFolderName(theDBFilePath) + "\" + vTmp(0, iCnt) + STR_DATAFILE_EXT, True
                                                    ' Clear Errors
                                                    Err.Clear
                                                    ' Resume error raising
                                                    On Error GoTo 0
                                                End If
                                                ' Check if not No Delete
                                                If Not bNoDelete Then
                                                    ' Delete From tbClients
                                                    sSQL = "DELETE FROM tbClients WHERE ClientFileID = '" + vTmp(0, iCnt) + "'"
                                                    iRecAffect = ExecuteSQL(sSQL, theDBFilePath)
                                                    ' Delete From tbDependents
                                                    sSQL = "DELETE FROM tbDependents WHERE ClientFileID = '" + vTmp(0, iCnt) + "'"
                                                    iRecAffect = ExecuteSQL(sSQL, theDBFilePath)
                                                    ' Delete From tbData
                                                    sSQL = "DELETE FROM tbData WHERE ClientFileID = '" + vTmp(0, iCnt) + "'"
                                                    iRecAffect = ExecuteSQL(sSQL, theDBFilePath)
                                                End If
                                            Next iCnt
                                        End If
                                        ' Delete the selected folder from DB
                                        sSQL = "DELETE FROM tbClients WHERE ClientFileID = '" + oListItem.SubItems(2) + "'"
                                        iRecAffect = ExecuteSQL(sSQL, theDBFilePath)
                                        bDeleted = True
                                    Else
                                        ' Change the Tooltip
                                        oListItem.TooltipText = Lang(259)
                                    End If
                                Else
                                    ' Delete File From Database
                                    sSQL = "DELETE FROM tbClients WHERE ClientFileID = '" + CStr(oListItem.SubItems(2)) + "'"
                                    iRecAffect = ExecuteSQL(sSQL, theDBFilePath)
                                    If iRecAffect > 0 Then
                                        sSQL = "DELETE FROM tbData WHERE ClientFileID = '" + CStr(oListItem.SubItems(2)) + "'"
                                        iRecAffect = ExecuteSQL(sSQL, theDBFilePath)
                                        sSQL = "DELETE FROM tbDependents WHERE ClientFileID = '" + CStr(oListItem.SubItems(2)) + "'"
                                        iRecAffect = ExecuteSQL(sSQL, theDBFilePath)
                                        If oFileSys.FileExists(oFileSys.GetParentFolderName(theDBFilePath) + "\" + CStr(oListItem.SubItems(2)) + STR_DATAFILE_EXT) Then
                                            On Error Resume Next
                                            oFileSys.DeleteFile oFileSys.GetParentFolderName(theDBFilePath) + "\" + CStr(oListItem.SubItems(2)) + STR_DATAFILE_EXT, True
                                            On Error GoTo 0
                                        End If
                                        bDeleted = True
                                        oListItem.TooltipText = ""
                                    End If
                                End If
                            End If
                        Else
                            oListItem.TooltipText = Lang(260)
                            oListItem.SmallIcon = 4
                        End If
                    Else
                        oListItem.TooltipText = Lang(261)
                        oListItem.SmallIcon = 2
                    End If
                End If
            End If
        Next oListItem
        frmProgress.Hide
        Unload frmProgress
    End If
    DeleteFiles = bDeleted
End Function

Private Function CopyFiles(ByVal thePassword As String, ByVal theReplace As Boolean) As Boolean
    Dim oListItem As ListItem
    Dim sCFPWD As String
    Dim bSkip As Boolean
    Dim sSQL As String
    Dim sNewCFID As String
    Dim oTmpWkBk As Workbook
    Dim sSourceFile As String
    Dim sTargetFile As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sSrcDBFilePath As String
    Dim sTgtDBFilePath As String
    Dim iRecAffect As Integer
    Dim bRet As Boolean
    Dim iPerCent As Double
    Dim iProgCnt As Long
    Dim sTgtFolderPath As String
    
    ' Get the Database file paths for source and target
    sSrcDBFilePath = Me.lblSrc.ControlTipText + "\ClientMgr.mdb"
    sTgtDBFilePath = Me.lblTarget.ControlTipText + "\ClientMgr.mdb"
    
    ' Check if DB source file exists
    If Not oFileSys.FileExists(sSrcDBFilePath) Then
        MsgBox Replace(Lang(262), "%SOURCEDB%", sSrcDBFilePath), vbExclamation, PROG_NAME
        Exit Function
    End If
    
    ' Check if DB target file exists
    If Not oFileSys.FileExists(sTgtDBFilePath) Then
        MsgBox Replace(Lang(263), "%MDB%", sTgtDBFilePath), vbExclamation, PROG_NAME
        Exit Function
    End If
    
    ' Load the progress window and set appropriate captions
    Load frmProgress
    Select Case m_CopyMode
        Case ccOLEDropEffectMove
            frmProgress.Caption = Lang(264)
            frmProgress.SetProgress 0, Lang(265)
        Case ccOLEDropEffectCopy
            frmProgress.Caption = Lang(266)
            frmProgress.SetProgress 0, Lang(267)
    End Select
    ' Show progress window
    frmProgress.Display
    
    ' Iterate through the list items in the source list view
    For Each oListItem In Me.lvwSource.ListItems
        ' Increment counter and set the progress
        iProgCnt = iProgCnt + 1
        iPerCent = iProgCnt / Me.lvwSource.ListItems.Count * 100
        frmProgress.SetProgress iPerCent
        
        ' Check if the current list item is selected
        If oListItem.Selected Then
            ' Check if the currently selected item is not the "Parent Folder" control
            If oListItem.Text <> Lang(43) Then
                ' Check if the item is locked by anyone
                If IsLockedBy(oListItem.SubItems(2), sSrcDBFilePath) = "" Then
                    ' Check if the current item is not currently loaded
                    If Not WorkBookExists(oListItem.SubItems(2) + STR_DATAFILE_EXT) Then
                        ' Check if not folder item
                        If oListItem.SmallIcon <> 5 Then
                            ' Check if client file has pwd password
                            sCFPWD = GetCFPassword(oListItem.SubItems(2), sSrcDBFilePath)
                            bSkip = False
                            ' Check if client file has Password
                            If sCFPWD <> "" Then
                                bSkip = True
                                ' Check if password is same as specified
                                If sCFPWD = thePassword Then
                                    bSkip = False
                                Else
                                    oListItem.TooltipText = Lang(268)
                                    oListItem.SmallIcon = 4
                                End If
                            End If
                        Else
                            bSkip = False
                        End If
                        ' Continue
                        If Not bSkip Then
                            ' Get the target folder path
                            sTgtFolderPath = Me.lvwTarget.ControlTipText
                            ' Copy the current Item
                            If CopyDBItem(oListItem.SubItems(2), sTgtFolderPath, sSrcDBFilePath, sTgtDBFilePath, theReplace) Then
                                ' Return True
                                bRet = True
                            Else
                                ' Change Tooltip
                                oListItem.TooltipText = Lang(269)
                            End If
                        End If
                    Else
'                        MsgBox "Unable to Copy or Move '" + oListItem.Text + "' because it is currently open for editing!" + vbLf + "Hit OK to continue.", vbExclamation, PROG_NAME
                        oListItem.TooltipText = Lang(270)
                        oListItem.SmallIcon = 4
                    End If
                Else
                    oListItem.TooltipText = Lang(271)
                    oListItem.SmallIcon = 2
                End If
            End If
        End If
    Next oListItem
    
    Application.StatusBar = False
    frmProgress.Hide
    Unload frmProgress
        
    CopyFiles = bRet
End Function

Private Sub MoveFiles()
    Dim bReplace As Boolean
    Dim oListItem As ListItem
    Dim vPWD As Variant
    Dim oParentItem As ListItem
    Dim sPlanner As String
    
    If Me.lblSrc.ControlTipText = "" Or Me.lblTarget.ControlTipText = "" Then
        Exit Sub
    End If

    Select Case MsgBox(Lang(272), vbYesNoCancel + vbQuestion + vbDefaultButton2, PROG_NAME)
        Case vbYes
            bReplace = True
        Case vbNo
            bReplace = False
        Case vbCancel
            Exit Sub
    End Select
    
    Me.Hide
    
    vPWD = AskForPassword
    If vPWD <> False Then

        If CopyFiles(vPWD, bReplace) Then
            DeleteFiles Me.lvwSource, Me.lblSrc.ControlTipText + "\ClientMgr.mdb", vPWD
            Set oParentItem = Me.lvwSource.FindItem(Lang(43))
            If Not oParentItem Is Nothing Then
                sPlanner = oParentItem.SubItems(3)
            End If
            PopulateCFList Me.lblSrc.ControlTipText, Me.lvwSource, Me.lvwSource.ControlTipText, sPlanner
            Set oParentItem = Me.lvwTarget.FindItem(Lang(43))
            If Not oParentItem Is Nothing Then
                sPlanner = oParentItem.SubItems(3)
            End If
            PopulateCFList Me.lblTarget.ControlTipText, Me.lvwTarget, Me.lvwTarget.ControlTipText, sPlanner
        End If
        
    End If
    ' Me.Show
    Application.OnTime 1, "ShowAdmin"
End Sub

Private Sub DoCopy()
    Dim bReplace As Boolean
    Dim vPWD As Variant
    Dim oParentItem As ListItem
    Dim sPlanner As String
    
    If Me.lblSrc.ControlTipText = "" Or Me.lblTarget.ControlTipText = "" Then
        Exit Sub
    End If
    
    Select Case MsgBox(Lang(272), vbYesNoCancel + vbQuestion + vbDefaultButton2, PROG_NAME)
        Case vbYes
            bReplace = True
        Case vbNo
            bReplace = False
        Case vbCancel
            Exit Sub
    End Select
    
    Me.Hide
    
    vPWD = AskForPassword
    If vPWD <> False Then

        If CopyFiles(vPWD, bReplace) Then
            Set oParentItem = Me.lvwTarget.FindItem(Lang(43))
            If Not oParentItem Is Nothing Then
                sPlanner = oParentItem.SubItems(3)
            End If
            PopulateCFList Me.lblTarget.ControlTipText, Me.lvwTarget, Me.lvwTarget.ControlTipText, sPlanner
        End If
    
    End If
    
    ' Me.Show
    Application.OnTime 1, "ShowAdmin"
End Sub

Public Function ShareRogueDB(Optional ByVal bShareIt As Boolean = True) As Boolean
On Error GoTo Err_Trap

    Dim sSQL As String
    Dim iRecAffect As Integer
    Dim oFileSys As New Scripting.FileSystemObject
    
    If oFileSys.FileExists(Me.txtDBLoc.Text + "\ClientMgr.mdb") Then
        If Not oFileSys.FileExists(oFileSys.GetParentFolderName(Me.txtDBLoc.Text) + "\FPS.xls") Then
            If Not oFileSys.GetFile(Me.txtDBLoc.Text + "\ClientMgr.mdb").Attributes Mod 2 = ReadOnly Then
                sSQL = "UPDATE tbSystem SET Shared = " + IIf(bShareIt, "1", "0") + ", OwnerID = " + IIf(bShareIt, "NULL", "'" + GetOwnerID + "'")
                iRecAffect = ExecuteSQL(sSQL, Me.txtDBLoc.Text + "\ClientMgr.mdb")
                ShareRogueDB = (iRecAffect > 0)
            Else
                MsgBox Replace(Lang(273), "%PATH%", Me.txtDBLoc.Text), vbExclamation, PROG_NAME
            End If
        Else
            MsgBox Lang(274) + vbLf + Lang(356), vbExclamation, PROG_NAME
        End If
    Else
        MsgBox Replace(Lang(275), "%PATH%", Me.txtDBLoc.Text), vbExclamation, PROG_NAME
    End If
Exit Function
Err_Trap:
    ShareRogueDB = False
End Function

Private Sub InitPathDisplay()
    Dim sPath As String
    Me.txtDBLocal.Text = ThisWorkbook.path + "\data"
    Me.txtActiveDBPath.Text = GetDataFolder
End Sub

Private Function HasFileLocked(ByVal thePath As String, Optional ByVal theDBFilePath As String) As Boolean
    Dim sSQL As String
    Dim vArray As Variant
    sSQL = "SELECT ID FROM tbClients WHERE Path LIKE '" + Replace(thePath, "'", "''") + "%' AND ((NOT Lock IS NULL) OR (Lock = '')) "
    vArray = ExecuteSQL(sSQL, theDBFilePath)
    HasFileLocked = IsArray(vArray)
End Function

Private Function PlannerHasFolder(ByVal thePlannerName As String, ByVal theFolder As String, Optional ByVal theDBFilePath As String) As Boolean
    Dim sSQL As String
    Dim vTmp As Variant
    If theFolder <> "" Then
        sSQL = "SELECT ID FROM tbClients WHERE Creator = '" + Replace(thePlannerName, "'", "''") + "' AND Type = '.' AND Path = '" + Replace(theFolder, "'", "''") + "'"
        vTmp = ExecuteSQL(sSQL, theDBFilePath)
        PlannerHasFolder = IsArray(vTmp)
    Else
        PlannerHasFolder = True
    End If
End Function

Private Function MakeAssignedVisible(ByVal theSrcFolderPath As String, ByVal theTgtFolderPath As String, Optional ByVal sDefaultPlanner As String = "Unknown Planner", Optional ByVal theDBFilePath As String) As Boolean
' Ensures the visibility of the newly assigned client files
    Dim sSQL As String
    Dim vTmp As Variant
    Dim iCnt As Integer
    Dim sNewPath As String
    Dim iRecAffect As Integer
    Dim oFileSys As New Scripting.FileSystemObject
    Dim bResult As Boolean
    Dim sNewCFID As String
    Dim sWherePath As String
    
    ' Cannot have the target as the source
    If UCase(theSrcFolderPath) = UCase(theTgtFolderPath) Then
        Exit Function
    End If
    
    ' Make Strings SQL friendly
    theSrcFolderPath = Replace(theSrcFolderPath, "'", "''")
    theTgtFolderPath = Replace(theTgtFolderPath, "'", "''")
    
    ' Check if Target Folder Exists, a blank TargetFolderName always exists
    If theTgtFolderPath <> "" Then
        If oFileSys.GetParentFolderName(theTgtFolderPath) = "" Then
            sWherePath = "(Path IS NULL OR Path = '')"
        Else
            sWherePath = "Path = '" + Replace(oFileSys.GetParentFolderName(theTgtFolderPath), "'", "''") + "'"
        End If
        sSQL = "SELECT ID FROM tbClients WHERE " + sWherePath + " AND ClientName = '" + oFileSys.GetBaseName(theTgtFolderPath) + "'"
        vTmp = ExecuteSQL(sSQL, theDBFilePath)
        If Not IsArray(vTmp) Then
            Exit Function
        End If
    End If
    
    bResult = True
    
    ' Get list of items inside the specified folder
    sSQL = "SELECT ID,Path,Creator,ClientName,Type FROM tbClients WHERE Path LIKE '" + theSrcFolderPath + "%'"
    vTmp = ExecuteSQL(sSQL, theDBFilePath)
    If IsArray(vTmp) Then
        For iCnt = LBound(vTmp, 2) To UBound(vTmp, 2)
            ' Build new path
            sNewPath = Replace(vTmp(1, iCnt), theSrcFolderPath, theTgtFolderPath + "\" + oFileSys.GetBaseName(theSrcFolderPath))
            ' Check if folder
            If RemoveNull(vTmp(4, iCnt)) = "." Then
                ' Check if specified planner does not have the folder
                If Not PlannerHasFolder(sDefaultPlanner, sNewPath, theDBFilePath) Then
                    ' Create the missing Folder
                    sNewCFID = "NF" + Format(CreateClientFileID("NF", theDBFilePath), "00000")
                    sSQL = "INSERT INTO tbClients (ClientName,ClientFileID,DateModified,Creator,Path,Type) VALUES ('" + Replace(vTmp(3, iCnt), "'", "''") + "','" + sNewCFID + "','" + CStr(Now) + "','" + sDefaultPlanner + "'," + Replace(sNewPath, "'", "''") + ",'.')"
                    iRecAffect = ExecuteSQL(sSQL, theDBFilePath)
                End If
            Else
                ' Update the path
                sSQL = "UPDATE tbClients SET Path = '" + sNewPath + "' WHERE ID = " + CStr(vTmp(0, iCnt))
                iRecAffect = ExecuteSQL(sSQL, theDBFilePath)
            End If
            ' Return result
            bResult = bResult And (iRecAffect > 0)
        Next iCnt
    Else
        bResult = False
    End If
    
    ' Return result
    MakeAssignedVisible = bResult
End Function

Private Function ReAssignFolder(ByVal theFolderPath As String, ByVal theOldPlannerName As String, ByVal theNewPlannerName As String) As Boolean
' Re assign items inside the specified folder
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sSQL As String
    Dim vTmp As Variant
    Dim iCnt As Integer
    Dim iRecAffect As Integer
    
    ' Make the folder path and planner name SQL friendly
    theFolderPath = Replace(theFolderPath, "'", "''")
    
    ' Select All Files inside the specified folder of original planner
    sSQL = "SELECT ID,Path FROM tbClients WHERE Path LIKE '" + theFolderPath + "%' AND (Type IS NULL OR Type = '') AND Creator = '" + Replace(theOldPlannerName, "'", "''") + "'"
    vTmp = ExecuteSQL(sSQL)
    If IsArray(vTmp) Then
        For iCnt = LBound(vTmp, 2) To UBound(vTmp, 2)
            ' Recreate the Folder structure in Target found in source
            RecreateFolderStructure RemoveNull(vTmp(1, iCnt)), theNewPlannerName, theOldPlannerName, False
            ' Change the planner name from source to new planner name
            sSQL = "UPDATE tbClients SET Creator = '" + Replace(theNewPlannerName, "'", "''") + "' WHERE ID = " + CStr(vTmp(0, iCnt))
            iRecAffect = ExecuteSQL(sSQL)
        Next iCnt
        ' Return results
        ReAssignFolder = (iRecAffect > 0)
    End If
    
End Function

Public Function CopyFolderFiles(ByVal theSrcFolderPath As String, ByVal theTgtFolderPath As String, ByVal theSrcDBPath As String, ByVal theTgtDBPath As String) As Boolean
    Dim sSrcFolderPath As String
    Dim sSrcFolderName As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sSQL As String
    Dim vTmp As Variant
    Dim iCnt As Integer
    Dim sSrcCFID As String
    Dim sOwner As String
    Dim sNewPath As String
    Dim sFieldList As String
    Dim sValues As String
    Dim vData As Variant
    Dim sWherePath As String
    Dim iRecAffect As Integer
    Dim sNewCFID As String
    Dim sPath As String
    Dim oParentItem As ListItem
    Dim sTargetPlanner As String
    
    If theSrcFolderPath = "" Then
        Exit Function
    End If
    
    sSrcFolderPath = oFileSys.GetParentFolderName(theSrcFolderPath)
    sSrcFolderName = oFileSys.GetBaseName(theSrcFolderPath)
    
    ' Check if there are files in the list that are locked
    If HasFileLocked(theSrcFolderPath, theSrcDBPath) Then
        MsgBox Lang(276), vbExclamation, PROG_NAME
    Else
        ' Get the ClientFile ID of the folder
        sSrcCFID = GetClientFileIDFromFolder(theSrcFolderPath, theSrcDBPath)
        ' Check if return
        If sSrcCFID <> "" Then
            ' Get the owner of the folder
            sOwner = GetPlannerNameDB(sSrcCFID, theSrcDBPath)
            ' Check if Owner was returned
            If sOwner <> "" Then
                ' Set the Field List
                sFieldList = "ClientName,DateModified,PlanDate,StartOfPlan,Lock,Creator,ModifiedBy,LockID,Path,Type,ClientFileID"
                ' Get a list of the folder's contents from source
                sSQL = "SELECT " + sFieldList + " FROM tbClients WHERE Path LIKE '" + Replace(theSrcFolderPath, "'", "''") + "%'"
                vData = ExecuteSQL(sSQL, theSrcDBPath)
                If IsArray(vData) Then
                
                    ' Get the Target Planner Name
                    Set oParentItem = Me.lvwTarget.FindItem(Lang(43))
                    If oParentItem Is Nothing Then
                        sTargetPlanner = RemoveNull(vData(5, 0))
                    Else
                        sTargetPlanner = IIf(oParentItem.SubItems(3) = "", RemoveNull(vData(5, 0)), oParentItem.SubItems(3))
                    End If

                    ' Go through the returned list of folder contents
                    For iCnt = LBound(vData, 2) To UBound(vData, 2)
                        ' Get the Source CFID
                        sSrcCFID = vData(10, iCnt)
                        ' Get the Path field info of the selected record
                        sPath = RemoveNull(vData(8, iCnt))
                        ' Create New Path
                        sNewPath = theTgtFolderPath + Right(sPath, Len(sPath) - Len(sSrcFolderPath))
                        ' Build the SQL Where clause for path
                        If sNewPath = "" Then
                            sWherePath = "(Path IS NULL OR Path = '')"
                        Else
                            sWherePath = "Path = '" + Replace(sNewPath, "'", "''") + "'"
                        End If
                        ' Check if item already exists in Target (Unique by Planner Name & File Name & Path) and get its client file ID
                        sSQL = "SELECT ClientFileID FROM tbClients WHERE Creator = '" + Replace(sTargetPlanner, "'", "''") + "' AND ClientName = '" + Replace(vData(0, iCnt), "'", "''") + "' AND " + sWherePath
                        vTmp = ExecuteSQL(sSQL, theTgtDBPath)
                        If IsArray(vTmp) Then
                            ' Delete tbClients from Target Folder having the found client file ID (existing data)
                            sSQL = "DELETE FROM tbClients WHERE ClientFileID = '" + CStr(vTmp(0, 0)) + "'"
                            iRecAffect = ExecuteSQL(sSQL, theTgtDBPath)
                            ' Delete FROM tbDependents
                            sSQL = "DELETE FROM tbDependents WHERE ClientFileID = '" + CStr(vTmp(0, 0)) + "'"
                            iRecAffect = ExecuteSQL(sSQL, theTgtDBPath)
                            ' Delete FROM tbData
                            sSQL = "DELETE FROM tbData WHERE ClientFileID = '" + CStr(vTmp(0, 0)) + "'"
                            iRecAffect = ExecuteSQL(sSQL, theTgtDBPath)
                        End If
                        ' Get the Values List
                        sValues = TwoDimArrayToSQL(sFieldList, vData, iCnt, sNewPath, sTargetPlanner)
                        ' Check if type is folder
                        If RemoveNull(vData(9, iCnt)) = "." Then
                            ' Insert new Folder / Just copy the DB Entry from tbClients
                            sNewCFID = "NF" + Format(CreateClientFileID("NF", theTgtDBPath), "00000")
                            sSQL = "INSERT INTO tbClients (" + sFieldList + ") VALUES (" + sValues + ",'" + sNewCFID + "')"
                            iRecAffect = ExecuteSQL(sSQL, theTgtDBPath)
                        Else
                            ' Insert new Data
                            sNewCFID = Left(sSrcCFID, 2) + Format(CreateClientFileID(Left(sSrcCFID, 2), theTgtDBPath), "00000")
                            sSQL = "INSERT INTO tbClients (" + sFieldList + ") VALUES (" + sValues + ",'" + sNewCFID + "')"
                            iRecAffect = ExecuteSQL(sSQL, theTgtDBPath)
                            ' Copy Query Data
                            CopyQueryData sSrcCFID, sNewCFID, theSrcDBPath, theTgtDBPath
                            ' Copy Dependents Data
                            CopyDependentsData sSrcCFID, sNewCFID, theSrcDBPath, theTgtDBPath
                            ' Check if the source excel file exists
                            If oFileSys.FileExists(oFileSys.GetParentFolderName(theSrcDBPath) + "\" + sSrcCFID + STR_DATAFILE_EXT) Then
                                ' Copy the file
                                oFileSys.CopyFile oFileSys.GetParentFolderName(theSrcDBPath) + "\" + sSrcCFID + STR_DATAFILE_EXT, oFileSys.GetParentFolderName(theTgtDBPath) + "\" + sNewCFID + STR_DATAFILE_EXT, True
                            End If
                        End If
                    Next iCnt
                End If
            End If
        End If
    End If
End Function

Private Function GetClientFileIDFromFolder(ByVal theFolder As String, Optional ByVal theDBFilePath As String) As String
    Dim sSQL As String
    Dim vTmp As Variant
    Dim sPath As String
    Dim sName As String
    Dim oFileSys  As New Scripting.FileSystemObject
    Dim sWherePath As String
    
    If theFolder <> "" Then
        sPath = oFileSys.GetParentFolderName(theFolder)
        sName = oFileSys.GetBaseName(theFolder)
        If sPath = "" Then
            sWherePath = "(Path IS NULL OR Path = '')"
        Else
            sWherePath = "Path = '" + Replace(sPath, "'", "''") + "'"
        End If
        sSQL = "SELECT ClientFileID FROM tbClients WHERE " + sWherePath + " AND Type = '.' AND ClientName = '" + Replace(sName, "'", "''") + "'"
        vTmp = ExecuteSQL(sSQL, theDBFilePath)
        If IsArray(vTmp) Then
            GetClientFileIDFromFolder = RemoveNull(vTmp(0, 0))
        End If
    End If
End Function

Public Function GetPlannerNameDB(ByVal theClientFileID As String, Optional ByVal theDBFilePath As String) As String
    Dim sSQL As String
    Dim vTmp As Variant
    
    sSQL = "SELECT Creator FROM tbClients WHERE ClientFileID = '" + theClientFileID + "'"
    vTmp = ExecuteSQL(sSQL, theDBFilePath)
    If IsArray(vTmp) Then
        GetPlannerNameDB = RemoveNull(vTmp(0, 0))
    End If
End Function

Private Function CreateFolder(ByVal theFolderPath As String, ByVal thePlannerName As String, theDBFilePath As String) As Boolean
    Dim iRecAffect As Integer
    Dim sClientFileID As String
    Dim sModified As String
    Dim sSQL As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sName As String
    Dim sPath As String
    
    sName = Replace(oFileSys.GetBaseName(theFolderPath), "'", "''")
    sPath = Replace(oFileSys.GetParentFolderName(theFolderPath), "'", "''")
    sPath = IIf(sPath = "", "NULL", "'" + sPath + "'")
    sClientFileID = "NF" + Format(CreateClientFileID("NF", theDBFilePath), "00000")
    sModified = CStr(Now)
    sSQL = "INSERT INTO tbClients (ClientName,ClientFileID,DateModified,Creator,Path,Type) VALUES ('" + sName + "','" + sClientFileID + "','" + sModified + "','" + Replace(thePlannerName, "'", "''") + "'," + sPath + ",'.')"
    iRecAffect = ExecuteSQL(sSQL, theDBFilePath)
    CreateFolder = (iRecAffect > 0)

End Function

Private Function CopyDBItem(ByVal theClientFileID As String, ByVal theTargetFolderPath As String, ByVal theSrcDBFilePath As String, ByVal theTgtDBFilePath As String, ByVal theReplace As Boolean) As Boolean
' Copies an item from One DB to Another
    Dim sSQL As String
    Dim sFieldList As String
    Dim vData As Variant
    Dim vTmp As Variant
    Dim sWherePath As String
    Dim sValues As String
    Dim sNewCFID As String
    Dim iRecAffect As Integer
    Dim sDataFolder As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sSrcFolderPath As String
    Dim sTargetPlanner As String
    Dim oParentItem As ListItem
    
    ' Get the Source (Current) data Folder
    sDataFolder = GetDataFolder
    ' Exit if nothing
    If sDataFolder = "" Then
        Exit Function
    End If
    
    ' Set the Field List
    sFieldList = "ClientName,DateModified,PlanDate,StartOfPlan,Lock,Creator,ModifiedBy,LockID,Path,Type"
    ' Select the record having the specified Client File ID from the source
    sSQL = "SELECT " + sFieldList + " FROM tbClients WHERE ClientFileID = '" + theClientFileID + "'"
    vData = ExecuteSQL(sSQL, theSrcDBFilePath)
    ' Check if the record was found and returned an array of fields
    If IsArray(vData) Then
        ' Get the Path field info of the selected record
        sSrcFolderPath = RemoveNull(vData(8, 0))
        ' Build the SQL Where clause for path
        If theTargetFolderPath = "" Then
            sWherePath = "(Path IS NULL OR Path = '')"
        Else
            sWherePath = "Path = '" + Replace(theTargetFolderPath, "'", "''") + "'"
        End If
        
        ' Get the Target Planner Name
        Set oParentItem = Me.lvwTarget.FindItem(Lang(43))
        If oParentItem Is Nothing Then
            sTargetPlanner = RemoveNull(vData(5, 0))
        Else
            sTargetPlanner = IIf(oParentItem.SubItems(3) = "", RemoveNull(vData(5, 0)), oParentItem.SubItems(3))
        End If
        
        ' Check if item already exists in Target (Unique by Planner Name & File Name & Path) and get its client file ID
        sSQL = "SELECT ClientFileID FROM tbClients WHERE Creator = '" + Replace(sTargetPlanner, "'", "''") + "' AND ClientName = '" + Replace(vData(0, 0), "'", "''") + "' AND " + sWherePath
        vTmp = ExecuteSQL(sSQL, theTgtDBFilePath)
        If IsArray(vTmp) And theReplace = True Then
            ' Delete tbCients client file (not folder) from Target Folder having the found client file ID (existing data)
            sSQL = "DELETE FROM tbClients WHERE ClientFileID = '" + CStr(vTmp(0, 0)) + "'"
            iRecAffect = ExecuteSQL(sSQL, theTgtDBFilePath)
            ' Delete FROM tbDependents
            sSQL = "DELETE FROM tbDependents WHERE ClientFileID = '" + CStr(vTmp(0, 0)) + "'"
            iRecAffect = ExecuteSQL(sSQL, theTgtDBFilePath)
            ' Delete FROM tbData
            sSQL = "DELETE FROM tbData WHERE ClientFileID = '" + CStr(vTmp(0, 0)) + "'"
            iRecAffect = ExecuteSQL(sSQL, theTgtDBFilePath)
        ElseIf IsArray(vTmp) And theReplace = False Then
            ' Return False
            CopyDBItem = False
            Exit Function
        End If
        ' Build Values for SQL
        sValues = TwoDimArrayToSQL(sFieldList, vData, , IIf(theTargetFolderPath = "", "NULL", theTargetFolderPath), sTargetPlanner)
        ' Check if Type is folder
        If RemoveNull(vData(9, 0)) = "." Then
            ' Insert new Folder
            sNewCFID = "NF" + Format(CreateClientFileID("NF", theTgtDBFilePath), "00000")
            sSQL = "INSERT INTO tbClients (ClientFileID," + sFieldList + ") VALUES ('" + sNewCFID + "'," + sValues + ")"
            iRecAffect = ExecuteSQL(sSQL, theTgtDBFilePath)
            ' Copy contents of folder as well
            CopyFolderFiles sSrcFolderPath + "\" + vData(0, 0), theTargetFolderPath, theSrcDBFilePath, theTgtDBFilePath
        Else
            ' Insert new Data
            sNewCFID = Left(theClientFileID, 2) + Format(CreateClientFileID(Left(theClientFileID, 2), theTgtDBFilePath), "00000")
            sSQL = "INSERT INTO tbClients (ClientFileID," + sFieldList + ") VALUES ('" + sNewCFID + "'," + sValues + ")"
            iRecAffect = ExecuteSQL(sSQL, theTgtDBFilePath)
            ' Copy Query Data
            CopyQueryData theClientFileID, sNewCFID, theSrcDBFilePath, theTgtDBFilePath
            ' Copy Dependents Data
            CopyDependentsData theClientFileID, sNewCFID, theSrcDBFilePath, theTgtDBFilePath
            ' Check if the source excel file exists
            If oFileSys.FileExists(oFileSys.GetParentFolderName(theSrcDBFilePath) + "\" + theClientFileID + STR_DATAFILE_EXT) Then
                ' Copy the file
                oFileSys.CopyFile oFileSys.GetParentFolderName(theSrcDBFilePath) + "\" + theClientFileID + STR_DATAFILE_EXT, oFileSys.GetParentFolderName(theTgtDBFilePath) + "\" + sNewCFID + STR_DATAFILE_EXT, True
            End If
        End If
        ' Return True
        CopyDBItem = True
    End If
End Function

Private Function TwoDimArrayToSQL(ByVal theFieldList As String, ByVal theArray As Variant, Optional ByVal theRecIndex As Integer = 0, Optional ByVal sOtherPath As String, Optional ByVal sOtherPlanner As String) As String
    Dim iCnt As Integer
    Dim iSubCnt As Integer
    Dim sRet As String
    Dim aFldLst As Variant
    Dim vValue As Variant
    Dim bSkip As Boolean
    
    aFldLst = Split(theFieldList, ",")
    
    For iCnt = LBound(theArray, 1) To UBound(theArray, 1)
        bSkip = False
        If iCnt <= UBound(aFldLst) Then
            bSkip = ((UCase(aFldLst(iCnt)) = "CLIENTFILEID") Or (UCase(aFldLst(iCnt)) = "ID"))
        End If
        If Not bSkip Then
            vValue = theArray(iCnt, theRecIndex)
            If sOtherPath <> "" Then
                If iCnt <= UBound(aFldLst) Then
                    If UCase(Trim(aFldLst(iCnt))) = "PATH" Then
                        vValue = sOtherPath
                    End If
                End If
            End If
            If sOtherPlanner <> "" Then
                If iCnt <= UBound(aFldLst) Then
                    If UCase(Trim(aFldLst(iCnt))) = "CREATOR" Then
                        vValue = sOtherPlanner
                    End If
                End If
            End If
            If IsNull(vValue) Then
                sRet = sRet + IIf(iCnt = LBound(theArray, 1), "NULL", ",NULL")
            Else
                Select Case UCase(CStr(vValue))
                    Case "VRAI"
                        vValue = "TRUE"
                    Case "FAUX"
                        vValue = "FALSE"
                End Select
                vValue = Replace(CStr(vValue), "'", "''")
                If UCase(vValue) = "NULL" Then
                    sRet = sRet + IIf(iCnt = LBound(theArray, 1), vValue, "," + vValue)
                Else
                    sRet = sRet + IIf(iCnt = LBound(theArray, 1), "'" + vValue + "'", ",'" + vValue + "'")
                End If
            End If
        End If
    Next iCnt
    TwoDimArrayToSQL = sRet
End Function

Private Function CopyQueryData(ByVal theSrcCFID As String, ByVal theTgtCFID As String, ByVal theSrcDBFilePath As String, ByVal theTgtDBFilePath As String) As Boolean
    Dim sSQL As String
    Dim vTmp As Variant
    Dim oConn(1) As Object
    Dim sConnStr(1) As String
    Dim oRecSet(1) As Object
    Dim iCnt As Integer
    
    ' Check if we have Data in tbData for the specified source client file ID
    sSQL = "SELECT ID FROM tbData WHERE ClientFileID = '" + theSrcCFID + "'"
    vTmp = ExecuteSQL(sSQL, theSrcDBFilePath)
    If IsArray(vTmp) Then
        ' Create Connection Object for source
        Set oConn(0) = CreateObject("ADODB.Connection")
        ' Open Connection object for source
        sConnStr(0) = STR_CONN + ";DBQ=" + theSrcDBFilePath
        oConn(0).Open sConnStr(0)
        ' Create Connection Object for target
        Set oConn(1) = CreateObject("ADODB.Connection")
        ' Open Connection object for target
        sConnStr(1) = STR_CONN + ";DBQ=" + theTgtDBFilePath
        oConn(1).Open sConnStr(1)
        ' Check if connection for source was opened successfully
        If oConn(0).State > 0 Then
            ' Check if connection for target was opened successfully
            If oConn(1).State > 0 Then
                ' Create Recordset for Source
                Set oRecSet(0) = CreateObject("ADODB.Recordset")
                ' Create Recordset for Target
                Set oRecSet(1) = CreateObject("ADODB.Recordset")
                ' Open source recordset OpenDynamic, ReadOnly
                oRecSet(0).Open "tbData", oConn(0), 2, 1
                ' Check if source recordset opened successfully
                If oRecSet(0).State > 0 Then
                    ' Open the target recordset, Dynamic, Optimistic
                    oRecSet(1).Open "tbData", oConn(1), 2, 3
                    ' Check if target recordset opened successfully
                    If oRecSet(1).State > 0 Then
                        ' Find the source record
                        oRecSet(0).Find "ClientFileID = '" + theSrcCFID + "'"
                        ' Check if recordset found
                        If Not oRecSet(0).EOF Then
                            ' Add a New Record in Target
                            oRecSet(1).AddNew
                            ' Save the Client File ID
                            oRecSet(1).Fields("ClientFileID").Value = theTgtCFID
                            ' Iterate through the fields collection
                            For iCnt = 1 To oRecSet(0).Fields.Count
                                ' Determine what the current field name is
                                Select Case UCase(oRecSet(0).Fields(iCnt - 1).name)
                                    Case "ID", "CLIENTFILEID" ' Excepted fields
                                    Case Else
                                        ' Copy field values from source to target
                                        oRecSet(1).Fields(iCnt - 1).Value = oRecSet(0).Fields(iCnt - 1).Value
                                End Select
                            Next iCnt
                            ' Update the Target Database
                            oRecSet(1).Update
                            ' Close target Recordset
                            oRecSet(1).Close
                        End If
                        ' Return true
                        CopyQueryData = True
                    End If
                    ' Close Source Recordset
                    oRecSet(0).Close
                End If
                ' Close Target Connection Object
                oConn(1).Close
            End If
            ' Close Source Connection Object
            oConn(0).Close
        End If
    End If
End Function

Public Function CopyDependentsData(ByVal theSrcCFID As String, ByVal theTgtCFID As String, ByVal theSrcDBFilePath As String, ByVal theTgtDBFilePath As String) As Boolean
    Dim sSQL As String
    Dim vTmp As Variant
    Dim iCnt As Integer
    Dim iRecAffect As Integer
    
    sSQL = "SELECT DepDOB FROM tbDependents WHERE ClientFileID = '" + theSrcCFID + "'"
    vTmp = ExecuteSQL(sSQL, theSrcDBFilePath)
    If IsArray(vTmp) Then
        For iCnt = LBound(vTmp, 2) To UBound(vTmp, 2)
            sSQL = "INSERT INTO tbDependents (ClientFileID,DepDOB) VALUES ('" + theTgtCFID + "','" + CStr(vTmp(0, 0)) + "')"
            iRecAffect = ExecuteSQL(sSQL, theTgtDBFilePath)
        Next iCnt
    End If
    CopyDependentsData = True
End Function

Public Function RecreateFolderStructure(ByVal thePath As String, ByVal theDefaultPlanner As String, ByVal theFromPlanner As String, ByVal bIncludeSubFolders As Boolean, Optional ByVal theDBFilePath As String) As Boolean
    Dim sSQL As String
    Dim sPath As String
    Dim sName As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sNewCFID As String
    Dim iRecAffect As Integer
    Dim sWherePath As String
    Dim vTmp As Variant
    Dim iCnt As Integer
    
    sPath = oFileSys.GetParentFolderName(thePath)
    sName = oFileSys.GetFileName(thePath)
    
    Do Until sName = ""
        If IsUniquePath(sPath, sName, theDefaultPlanner, theDBFilePath) Then
            sNewCFID = "NF" + Format(CreateClientFileID("NF", theDBFilePath), "00000")
            sSQL = "INSERT INTO tbClients (ClientName,ClientFileID,DateModified,Creator,Path,Type) VALUES ('" + Replace(sName, "'", "''") + "','" + sNewCFID + "','" + CStr(Now) + "','" + Replace(theDefaultPlanner, "'", "''") + "'," + IIf(sPath = "", "NULL", "'" + Replace(sPath, "'", "''") + "'") + ",'.')"
            iRecAffect = ExecuteSQL(sSQL, theDBFilePath)
        End If
        sName = oFileSys.GetFileName(sPath)
        sPath = oFileSys.GetParentFolderName(sPath)
        DoEvents
    Loop
    
    If bIncludeSubFolders Then
        If thePath = "" Then
            sWherePath = "(Path IS NULL OR Path = '')"
        Else
            sWherePath = "Path LIKE '" + Replace(thePath, "'", "''") + "%'"
        End If
        sSQL = "SELECT ID,Path FROM tbClients WHERE " + sWherePath + " AND Creator = '" + Replace(theFromPlanner, "'", "''") + "' AND Type = '.'"
        vTmp = ExecuteSQL(sSQL, theDBFilePath)
        If IsArray(vTmp) Then
            For iCnt = LBound(vTmp, 2) To UBound(vTmp, 2)
                RecreateFolderStructure RemoveNull(vTmp(1, iCnt)), theDefaultPlanner, theFromPlanner, False, theDBFilePath
            Next iCnt
        End If
    End If
    
    RecreateFolderStructure = True
End Function

Private Function CheckReadOnlyLock(ByVal theListView As Object) As Boolean
    Dim oItem As ListItem
    Dim bRet As Boolean
    Dim sPath As String
    Dim sCFID As String
    
    For Each oItem In theListView.ListItems
        If oItem.Selected Then
            Select Case theListView.name
                Case "lvwClientFiles"
                    sCFID = oItem.SubItems(5)
                    sPath = oItem.SubItems(9) + "\" + oItem.Text
                Case "lvwSource"
                    sCFID = oItem.SubItems(2)
                    sPath = oItem.SubItems(5) + "\" + oItem.Text
            End Select
            If oItem.SmallIcon = 11 Then
                bRet = FolderHasFileLocked(sPath)
                bRet = bRet Or FolderHasFileCheckedOut(sPath)
            Else
                bRet = (IsLockedBy(sCFID) <> "") Or (IsCheckedOutBy(sCFID) <> "")
            End If
        End If
        If bRet Then
            Exit For
        End If
    Next oItem
    CheckReadOnlyLock = bRet
End Function

Private Function FolderHasFileLocked(ByVal thePath As String, Optional ByVal theDBFilePath As String) As Boolean
    Dim sSQL As String
    Dim vArray As Variant
    sSQL = "SELECT ID FROM tbClients WHERE Path LIKE '" + Replace(thePath, "'", "''") + "%' AND ((NOT Lock IS NULL) OR (Lock = '')) "
    vArray = ExecuteSQL(sSQL, theDBFilePath)
    FolderHasFileLocked = IsArray(vArray)
End Function

Private Function FolderHasFileCheckedOut(ByVal thePath As String, Optional ByVal theDBFilePath As String) As Boolean
    Dim sSQL As String
    Dim vArray As Variant
    sSQL = "SELECT ID FROM tbClients WHERE Path LIKE '" + Replace(thePath, "'", "''") + "%' AND ((NOT CheckOut IS NULL) OR (CheckOut = '')) "
    vArray = ExecuteSQL(sSQL, theDBFilePath)
    FolderHasFileCheckedOut = IsArray(vArray)
End Function

Attribute VB_Name = "frmAssign"
Attribute VB_Base = "0{50AD520B-A916-11E7-A061-000C2961E840}{50AD51D0-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public m_ForceClose As Boolean
Public m_ButtonClicked As String

Private Sub cmdCancel_Click()
    m_ButtonClicked = cmdCancel.Caption
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    If Me.cboPlanner.Text <> "" Then
        If Me.txtPassword.Enabled Then
            If Me.txtPassword.Text = "" Then
                MsgBox Lang(36), vbInformation, PROG_NAME
                Me.txtPassword.SetFocus
                Exit Sub
            End If
        End If
        m_ButtonClicked = cmdOK.Caption
        Me.Hide
    Else
        MsgBox Lang(38), vbInformation, PROG_NAME
        Me.cboPlanner.SetFocus
    End If
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
On Error Resume Next
    Me.Hide
    Cancel = Not m_ForceClose
End Sub
Attribute VB_Name = "frmClients"
Attribute VB_Base = "0{50AD51EB-A916-11E7-A061-000C2961E840}{50AD51BA-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim m_Popup As CommandBar
Dim m_WalkThruImport As Boolean

Private Sub chkApplyPerInfo_Change()
    Me.cboClientData.Enabled = chkApplyPerInfo.Value
    Me.cboClientData.BackColor = IIf(Me.cboClientData.Enabled, vbWindowBackground, vbButtonFace)
    Me.lblClientName.Enabled = Me.cboClientData.Enabled
End Sub

Private Sub cmdBrws_Click()
    SelectFile txtClientFilename
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdHelp_Click()
    If shtMain.Range("B2").Value <> "" Then
        ShowPDFDocument "Client Database.PDF"
    Else
        MsgBox Lang(352), vbCritical, PROG_NAME
    End If
End Sub

Private Sub cmdImport_Click()
    Dim oClientFile As Workbook
    
    Set oClientFile = Run("FPS.xls!GetClientFile")
    If Not oClientFile Is Nothing Then
        Select Case MsgBox(Lang(201), vbQuestion + vbYesNoCancel, PROG_NAME)
            Case vbYes
                Me.Hide
                If Not ShowSaveAs(False) Then
                    Me.Show
                    Exit Sub
                End If
                Me.Show vbNormal
            Case vbCancel
                Exit Sub
        End Select
    End If
    If Not ActiveWorkbook.name = "Mainpage.xls" Then
        If WorkBookExists("Fps.xls") Then
            Run "FPS.xls!ActivateMainPage"
        End If
    End If
    If m_WalkThruImport Then
        Load frmImport
        frmImport.m_WalkThruImport = m_WalkThruImport
        frmImport.Show
    Else
        frmImport.Show
    End If
    PopulateClientListView Me.lvwClients
End Sub

Private Sub cmdOpen_Click()
    Call lvwClients_DblClick
End Sub

Private Sub cmdQuery_Click()
    Dim sWhere As String
    Dim sSQL As String
    
    sWhere = GetCriteria
    If sWhere <> "" Then
        PopulateClientListViewFromQuery Me.lvwClients, sWhere
    End If
End Sub

Private Sub lvwClients_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
    lvwClients.Sorted = True
    lvwClients.SortKey = ColumnHeader.index - 1
    lvwClients.SortOrder = IIf(lvwClients.SortOrder = lvwAscending, lvwDescending, lvwAscending)
End Sub

Private Sub lvwClients_DblClick()
    Dim oSrcBk As Workbook
    Dim sPathSrc As String
    Dim sSrcName As String
    Dim oTgtBk As Workbook
    Dim oFileSys As New Scripting.FileSystemObject
    Dim bPromptToSave As Boolean
    Dim sLockedBy As String
    
    ChDir ThisWorkbook.path
    Select Case Me.MultiPage1.Value
        Case 0
            If Not Me.lvwClients.SelectedItem Is Nothing Then
                Me.Hide
                ' Close Client File (and other modules)
                CloseClientFile
                
                ' Check if client file is locked
                sLockedBy = IsLockedBy(Me.lvwClients.SelectedItem.SubItems(2))
                If sLockedBy <> "" Then
                    MsgBox Replace(Replace(Lang(202), "%CLIENTFILE%", Me.lvwClients.SelectedItem.Text), "%USER%", sLockedBy), vbExclamation, PROG_NAME
                    Me.Show
                Else
                    LoadClientFile Me.lvwClients.SelectedItem.SubItems(2)
                    Unload Me
                End If
            End If
        Case 1
            If Me.txtClientFilename.Text = "" Then
                MsgBox Lang(203), vbExclamation, PROG_NAME
            Else
                Me.Hide
                If Run("FPS.xls!ClientFileIsDBBased") Then
                    UnlockClient oFileSys.GetBaseName(Run("FPS.xls!GetClientFile").name)
                    bPromptToSave = False
                End If
                If (Me.chkApplyPerInfo.Value = False) Or (Me.cboClientData.Enabled And Me.cboClientData.Text = "") Then
                    If Not Run("FPS.xls!File_Open", Me.txtClientFilename.Text, bPromptToSave) Then
                        Me.Show
                    Else
                        Unload Me
                    End If
                Else
                    ' Check first if Target workbook exist
                    If oFileSys.FileExists(Me.txtClientFilename.Text) Then
                        ' Close Client File (and other modules)
                        CloseClientFile
                        ' Check if similar target workbook exists
                        If WorkBookExists(oFileSys.GetFileName(Me.txtClientFilename.Text)) Then
                            Workbooks(oFileSys.GetFileName(Me.txtClientFilename.Text)).Close False
                        End If
                        ' Open the Target Workbook
                        Set oTgtBk = Workbooks.Open(Me.txtClientFilename.Text, False)
                        ' Open the Source WorkBook
                        sSrcName = GetClientFileIDFromTitle(Me.cboClientData.Text) + STR_DATAFILE_EXT
                        sPathSrc = GetDataFolder + "\" + sSrcName
                        If WorkBookExists(sSrcName) Then
                            Set oSrcBk = Workbooks(sSrcName)
                        Else
                            Set oSrcBk = Workbooks.Open(sPathSrc, False)
                        End If
                        ' Decrypt if encrypted sheets
                        If SheetsAreEncrypted(oSrcBk) Then
                            DecryptSheets oSrcBk, "GB-009453-45"
                        End If
                        ' Apply Personal Information
                        ApplyPerInfo oSrcBk, oTgtBk
                        ' Pass to regular load
                        If Run("FPS.xls!File_Open", , , oTgtBk) Then
                            Unload Me
                        Else
                            Me.Show
                        End If
                    Else
                        MsgBox Lang(204), vbExclamation, PROG_NAME
                        Me.Show
                    End If
                End If
            End If
    End Select
End Sub

Private Sub lvwClients_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As stdole.OLE_XPOS_PIXELS, ByVal y As stdole.OLE_YPOS_PIXELS)
    If Button = 2 Then
        Set g_CurrListItem = Me.lvwClients.SelectedItem
        If Not m_Popup Is Nothing Then
            m_Popup.ShowPopup
        End If
    End If
End Sub

Private Sub UserForm_Activate()
    If Me.lvwClients.ListItems.Count = 0 And Me.MultiPage1.Value = 0 And Me.MultiPage1.Pages(0).Enabled Then
        If MsgBox(Lang(205), vbQuestion + vbYesNo, PROG_NAME) = vbYes Then
            m_WalkThruImport = True
            Call cmdImport_Click
        End If
    End If
End Sub

Private Sub UserForm_Initialize()
    Me.MultiPage1.Pages(0).Enabled = AllowedToUseDB
    If IsDBShared Then
        Me.lvwClients.ColumnHeaders(7).Width = 98
        Me.lvwClients.ColumnHeaders(8).Width = 98
        Me.lvwClients.ColumnHeaders(9).Width = 98
    End If
    Set g_ListView = Me.lvwClients
    SetupPopup
    Set Me.lvwClients.SmallIcons = Me.imgList
    PopulateClientListView Me.lvwClients, , Me.cboClientData
    If Run("FPS.xls!IsReadOnlyMode") Then
        Me.cmdImport.Enabled = False
    End If
End Sub

Private Sub SetupPopup()
    Dim oCtl As Object
    Set m_Popup = CommandBars.Add(, Position:=msoBarPopup, Temporary:=True)
    Set oCtl = m_Popup.Controls.Add(msoControlButton)
    oCtl.Caption = Lang(206)
    oCtl.OnAction = "ListAllClients"
    Set oCtl = m_Popup.Controls.Add(msoControlButton)
    oCtl.Caption = Lang(125)
    oCtl.OnAction = "RenameItem"
    Set oCtl = m_Popup.Controls.Add(msoControlButton)
    oCtl.Caption = Lang(126)
    oCtl.OnAction = "DeleteItem"
End Sub

Private Sub SelectDefaultFile(ByRef theComboBox As ComboBox)
    Dim vDefFile As Variant
    ChDir ThisWorkbook.path + "\client"
    vDefFile = Application.GetOpenFileName(Lang(207) + " (*.xud),*.xud", 0, Lang(208))
    If Not (vDefFile = False) Then
        theComboBox.AddItem vDefFile
        theComboBox.ListIndex = theComboBox.ListCount - 1
    End If
End Sub

Private Sub SelectFile(ByRef theTextBox As Control)
    Dim vOpenPath As Variant
    
    GotoClientFolder
    ' Get the client file name
    vOpenPath = Application.GetOpenFileName(FileFilter:="Microsoft Excel Workbook (*.xls), *.xls", Title:=Lang(209))
    If vOpenPath <> False Then
        theTextBox.Text = vOpenPath
    End If
    ChDrive Left(ThisWorkbook.path, 2)
    ChDir ThisWorkbook.path
End Sub

Private Function GetDefaultFileName(ByVal theComboBox As ComboBox) As String
    Dim sTmp As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sDataFolder As String
    
    If theComboBox.ListIndex = 0 Then
        sDataFolder = GetDataFolder
        If Me.MultiPage1.Value = 0 Then
            sTmp = GetAutoDefaultFileName(sDataFolder + "\" + Me.lvwClients.SelectedItem.SubItems(2) + STR_DATAFILE_EXT, True)
        Else
            sTmp = GetAutoDefaultFileName(Me.txtClientFilename.Text, False)
        End If
        GetDefaultFileName = IIf(sTmp = "", Lang(210), sTmp)
    Else
        If theComboBox.ListIndex = 1 Then
            GetDefaultFileName = "FPSDefaults.xls"
        Else
            sTmp = theComboBox.List(theComboBox.ListIndex)
            GetDefaultFileName = oFileSys.GetFileName(sTmp + IIf(UCase(Right(sTmp, 4)) = ".XUD", "", ".xud"))
        End If
    End If
End Function
Attribute VB_Name = "frmCriteria"
Attribute VB_Base = "0{50AD5203-A916-11E7-A061-000C2961E840}{50AD51CC-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim m_Node As Node
Dim m_FldName As String
Dim m_FldDesc As String
Dim m_FldID As Integer
Dim m_FldCatID As Integer
Dim m_FldType As Integer
Dim m_CondType As Integer

Private Sub SetupConditions(ByVal theType As Integer)
    Me.cboCond.Clear
    Select Case theType
        Case 0
            cboCond.AddItem Lang(147)
            cboCond.AddItem Lang(152)
            cboCond.AddItem Lang(153)
            cboCond.AddItem Lang(154)
            cboCond.AddItem Lang(155)
            cboCond.AddItem Lang(156)
            cboCond.AddItem Lang(150)
        Case 1
            cboCond.AddItem Lang(144)
            cboCond.AddItem Lang(145)
            cboCond.AddItem Lang(146)
        Case 2
            cboCond.AddItem Lang(147)
        Case 3
            cboCond.AddItem Lang(147)
            cboCond.AddItem Lang(148)
            cboCond.AddItem Lang(149)
            cboCond.AddItem Lang(150)
        Case 4
            cboCond.AddItem Lang(148)
            cboCond.AddItem Lang(150)
    End Select
    Me.cboCond.ListIndex = 0
End Sub

Public Sub Setup(ByRef theNode As Node)
    Dim aTmp As Variant
    Dim iCnt As Integer
    
    Set m_Node = theNode
    aTmp = Split(theNode.Tag, "|")
    
    m_FldName = aTmp(0)
    m_FldType = Val(aTmp(1))
    m_FldDesc = aTmp(2)
    m_FldID = aTmp(3)
    m_FldCatID = aTmp(4)
    
    Me.Caption = Lang(157) + m_FldDesc
    Me.txtFieldname.Text = m_FldDesc
    
    Select Case m_FldID
        Case 1, 2, 14, 15, 18, 19   ' Dates
            Me.txtCurrency.Visible = False
            Me.txtValue.Visible = False
            Me.cboValues.Visible = False
            Me.cboDate.Visible = True
            SetupConditions 0
            m_CondType = 1
        Case 38 ' Dependents date of birth
            Me.txtCurrency.Visible = False
            Me.txtValue.Visible = False
            Me.cboValues.Visible = False
            Me.cboDate.Visible = True
            SetupConditions 4
            m_CondType = 1
        Case 3  ' Keyword Search
            Me.txtCurrency.Visible = False
            Me.txtValue.Visible = True
            Me.cboDate.Visible = False
            Me.cboValues.Visible = False
            SetupConditions 1
            m_CondType = 2
        Case 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56     ' Pre selected Yes/No dropdown
            Me.txtCurrency.Visible = False
            Me.txtValue.Visible = False
            Me.cboDate.Visible = False
            Me.cboValues.Visible = True
            SetupComboValues Me.cboValues, Array(Lang(158), Lang(159)), Lang(158)
            SetupConditions 2
            m_CondType = 3
        Case 39, 40, 41, 42 ' Pre selected Risk Profile
            Me.txtCurrency.Visible = False
            Me.txtValue.Visible = False
            Me.cboDate.Visible = False
            Me.cboValues.Visible = True
            SetupComboValues Me.cboValues, Array(Lang(166), Lang(167), Lang(168), Lang(169), Lang(170)), Lang(166)
            SetupConditions 0
            m_CondType = 4
        Case 43, 44 ' Pre selected Investment Knowledge
            Me.txtCurrency.Visible = False
            Me.txtValue.Visible = False
            Me.cboDate.Visible = False
            Me.cboValues.Visible = True
            SetupComboValues Me.cboValues, Array(Lang(171), Lang(172), Lang(173), Lang(174), Lang(175)), Lang(173)
            SetupConditions 0
            m_CondType = 5
        Case 26 ' Provinces
            Me.txtCurrency.Visible = False
            Me.txtValue.Visible = False
            Me.cboDate.Visible = False
            Me.cboValues.Visible = True
            SetupComboValues Me.cboValues, Array(Lang(180), Lang(181), Lang(182), Lang(183), Lang(184), Lang(185), Lang(186), Lang(187), Lang(188), Lang(189), Lang(190), Lang(191), Lang(192), Lang(193)), Lang(180)
            SetupConditions 2
            m_CondType = 6
        Case 87, 88 ' Include/Exclude CPP
            Me.txtCurrency.Visible = False
            Me.txtValue.Visible = False
            Me.cboDate.Visible = False
            Me.cboValues.Visible = True
            SetupComboValues Me.cboValues, Array(Lang(176), Lang(177)), Lang(176)
            SetupConditions 2
            m_CondType = 7
        Case 89, 90 ' Include/Exclude OAS
            Me.txtCurrency.Visible = False
            Me.txtValue.Visible = False
            Me.cboDate.Visible = False
            Me.cboValues.Visible = True
            SetupComboValues Me.cboValues, Array(Lang(178), Lang(179)), Lang(178)
            SetupConditions 2
            m_CondType = 8
        Case 93, 94, 86 ' Pre set ages (Plan To Age / Income to age)
            Me.txtCurrency.Visible = False
            Me.txtValue.Visible = False
            Me.cboDate.Visible = False
            Me.cboValues.Visible = True
            For iCnt = 20 To 110
                Me.cboValues.AddItem iCnt
                If iCnt = 90 Then
                    Me.cboValues.ListIndex = Me.cboValues.ListCount - 1
                End If
            Next iCnt
            SetupConditions 0
            m_CondType = 9
        Case 16, 17 ' Pre set ages (Retirement)
            Me.txtCurrency.Visible = False
            Me.txtValue.Visible = False
            Me.cboDate.Visible = False
            Me.cboValues.Visible = True
            For iCnt = 20 To 110
                Me.cboValues.AddItem iCnt
                If iCnt = 65 Then
                    Me.cboValues.ListIndex = Me.cboValues.ListCount - 1
                End If
            Next iCnt
            SetupConditions 0
            m_CondType = 10
        Case 4, 8 ' Titles
            Me.txtCurrency.Visible = False
            Me.txtValue.Visible = False
            Me.cboDate.Visible = False
            Me.cboValues.Visible = True
            SetupComboValues Me.cboValues, Array(Lang(229), Lang(230), Lang(231), Lang(232), Lang(233), Lang(234)), Lang(231)
            Me.cboValues.style = fmStyleDropDownCombo
            SetupConditions 2
            m_CondType = 11
        Case 5, 6, 7, 9, 10, 11, 12, 13, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37 ' Free Text
            Me.txtCurrency.Visible = False
            Me.txtValue.Visible = True
            Me.cboDate.Visible = False
            Me.cboValues.Visible = False
            SetupConditions 3
            m_CondType = 12
        Case Else   ' Numeric currency textbox
            Me.txtCurrency.Visible = True
            Me.txtValue.Visible = False
            Me.cboDate.Visible = False
            Me.cboValues.Visible = False
            SetupConditions 0
            Me.lblDollar.Visible = True
            m_CondType = 13
    End Select
    If Not IsNull(Me.cboValues.List) Then
        Me.cboValues2.List = Me.cboValues.List
        Me.cboValues2.ListIndex = Me.cboValues.ListIndex
    End If
End Sub

Private Sub cboCond_Click()
    If cboCond.Text = Lang(150) Then
        ShowSecondValue
    Else
        HideSecondValue
    End If
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    Dim sVal As String
    
    Select Case True
        Case Me.cboCond.Text = Lang(150)
            Select Case True
                Case Me.cboDate.Visible
                    sVal = Format(Me.cboDate.Value, IIf(IsFrench, "yyyy-mm-dd", "mmmm dd, yyyy")) + " AND " + Format(Me.cboDate2.Value, IIf(IsFrench, "yyyy-mm-dd", "mmmm dd, yyyy"))
                Case Me.cboValues.Visible
                    sVal = Trim(Me.cboValues.Text) + " AND " + Trim(Me.cboValues2.Text)
                Case Me.txtValue.Visible
                    sVal = Trim(Me.txtValue.Text) + " AND " + Trim(Me.txtValue2.Text)
                Case Me.txtCurrency.Visible
                    sVal = "$" + Trim(Me.txtCurrency.Text) + " AND $" + Trim(Me.txtCurrency2.Text)
            End Select
        Case Me.cboDate.Visible
            sVal = Format(Me.cboDate.Value, IIf(IsFrench, "yyyy-mm-dd", "mmmm dd, yyyy"))
        Case Me.cboValues.Visible
            sVal = Me.cboValues.Text
        Case Me.txtValue.Visible
            sVal = Me.txtValue.Text
        Case Me.txtCurrency.Visible
            sVal = "$" + Me.txtCurrency.Text
    End Select
    m_Node.Text = m_FldDesc + ": " + Me.cboCond.Text + " {" + sVal + "}"
    m_Node.Image = 3
    Unload Me
End Sub

Private Sub SetupComboValues(ByRef theComboBox As ComboBox, ByVal theValueArray As Variant, Optional ByVal theDefValue As String)
    Dim iCnt As Integer
    
    If IsArray(theValueArray) Then
        theComboBox.List() = theValueArray
    End If
    If theComboBox.ListCount > 0 Then
        theComboBox.ListIndex = 0
        For iCnt = 0 To theComboBox.ListCount - 1
            If theComboBox.List(iCnt) = theDefValue Then
                theComboBox.ListIndex = iCnt
                Exit For
            End If
        Next iCnt
    End If
End Sub

Private Sub txtCurrency_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case Chr(KeyAscii)
        Case "."
            KeyAscii = IIf(InStr(txtCurrency.Text, ".") > 0, 0, KeyAscii)
        Case "-"
            KeyAscii = IIf(InStr(txtCurrency.Text, "-") > 0, 0, KeyAscii)
        Case Else
            KeyAscii = IIf(InStr("0123456789.-" + Chr(8), Chr(KeyAscii)) > 0, KeyAscii, 0)
    End Select
End Sub

Private Sub txtCurrency2_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case Chr(KeyAscii)
        Case "."
            KeyAscii = IIf(InStr(txtCurrency.Text, ".") > 0, 0, KeyAscii)
        Case "-"
            KeyAscii = IIf(InStr(txtCurrency.Text, "-") > 0, 0, KeyAscii)
        Case Else
            KeyAscii = IIf(InStr("0123456789.-" + Chr(8), Chr(KeyAscii)) > 0, KeyAscii, 0)
    End Select
End Sub

Private Sub txtValue_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    KeyAscii = IIf(InStr("{}$" + Chr(34), Chr(KeyAscii)) > 0, 0, KeyAscii)
End Sub

Private Sub txtValue2_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    KeyAscii = IIf(InStr("{}$" + Chr(34), Chr(KeyAscii)) > 0, 0, KeyAscii)
End Sub

Private Sub ShowSecondValue()
    Me.txtCurrency2.Visible = Me.txtCurrency.Visible
    Me.txtValue2.Visible = Me.txtValue.Visible
    Me.cboDate2.Visible = Me.cboDate.Visible
    Me.cboValues2.Visible = Me.cboValues.Visible
    Me.lblValue2.Visible = Me.lblValue.Visible
    Me.lblDollar2.Visible = Me.lblDollar.Visible
    Me.lblValue.Caption = Lang(235)
    Me.lblValue2.Caption = Lang(236)
    
    Me.cboDate2.Format = dtpCustom
    Me.cboDate2.CustomFormat = IIf(IsFrench, "yyyy-mm-dd", "MMMM dd, yyyy")
End Sub

Private Sub HideSecondValue()
    Me.txtCurrency2.Visible = False
    Me.txtValue2.Visible = False
    Me.cboDate2.Visible = False
    Me.cboValues2.Visible = False
    Me.lblDollar2.Visible = False
    Me.lblValue2.Visible = False
    Me.lblValue.Caption = Lang(237)
End Sub

Private Sub UserForm_Initialize()
    If Me.cboDate.Visible Then
        Me.cboDate.Value = Now
    End If
    If Me.cboDate2.Visible Then
        Me.cboDate2.Value = Now
    Else
        Me.cboDate2.Visible = True
        Me.cboDate2.Value = Now
        Me.cboDate2.Visible = False
    End If
End Sub
Attribute VB_Name = "frmDefaults"
Attribute VB_Base = "0{50AD5227-A916-11E7-A061-000C2961E840}{50AD51DE-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public m_ForceClose As Boolean
Public m_ButtonClicked As String

Private Sub cmdCancel_Click()
    m_ButtonClicked = Me.cmdCancel.Caption
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_ButtonClicked = Me.cmdOK.Caption
    Me.Hide
End Sub

Private Sub UserForm_Initialize()
    PopulateDefaultsList Me.cboDefaultsList
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
On Error Resume Next
    Cancel = Not m_ForceClose
    Me.Hide
End Sub

Private Sub PopulateDefaultsList(ByRef theComboBox As ComboBox, Optional ByVal theDefaultValue As String = "")
    Dim oFileSys As New Scripting.FileSystemObject
    Dim oFile As Scripting.File
    Dim sAltPath As String
    
'    theComboBox.AddItem "(No change)"
    theComboBox.AddItem "FP Solutions Default"
    theComboBox.ListIndex = 0

    For Each oFile In oFileSys.GetFolder(ThisWorkbook.path).Files
        If UCase(oFileSys.GetExtensionName(oFile.name)) = "XUD" Then
            theComboBox.AddItem oFileSys.GetBaseName(oFile.name)
            If theComboBox.List(theComboBox.ListCount - 1) = theDefaultValue Then
                theComboBox.ListIndex = theComboBox.ListCount - 1
            End If
        End If
    Next oFile
    
    ' Alternate XUD Path
    sAltPath = GetUserDefaultsPath
    If UCase(sAltPath) <> UCase(ThisWorkbook.path) Then
        If oFileSys.FolderExists(sAltPath) Then
            For Each oFile In oFileSys.GetFolder(sAltPath).Files
                If UCase(oFileSys.GetExtensionName(oFile.name)) = "XUD" Then
                    theComboBox.AddItem oFileSys.GetBaseName(oFile.name)
                    If theComboBox.List(theComboBox.ListCount - 1) = theDefaultValue Then
                        theComboBox.ListIndex = theComboBox.ListCount - 1
                    End If
                End If
            Next oFile
        End If
    End If
End Sub

Attribute VB_Name = "frmDiag"
Attribute VB_Base = "0{50AD5223-A916-11E7-A061-000C2961E840}{50AD51DC-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub cmdClose_Click()
    Unload Me
End Sub

Private Sub cmdReadFile_Click()
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sText As String
    
    If oFileSys.FileExists(ThisWorkbook.path + "\FPDiagnostics.dmp") Then
        sText = ReadDumpFile
        WriteFile sText
        oFileSys.MoveFile ThisWorkbook.path + "\FPDiagnostics.dmp", ThisWorkbook.path + "\FPDiagnostics.txt"
        MsgBox Lang(64), vbInformation, PROG_NAME
    End If
End Sub

Private Sub cmdStart_Click()
    Me.cmdStart.Enabled = False
    DoEvents
    StartDiagnostics
    DoEvents
    Me.cmdStart.Enabled = True
End Sub

Private Sub StartDiagnostics()
On Error GoTo Err_Handler

    Dim sDataFolder As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim vTmpTable As Variant
    Dim sLog As String
    Dim sText As String
    Dim oTmpWkBk As Workbook
    
    Application.ScreenUpdating = False
    
    If Not WorkBookExists("Fpssys.xls") Then
        Set oTmpWkBk = Application.Workbooks.Open(Workbooks("ClientManager.xls").path + "\Fpssys.xls", False, True)
        oTmpWkBk.Windows(1).Visible = False
        ThisWorkbook.Activate
    End If
    Application.ScreenUpdating = False
    
    ' FP Solutions Folder
    Me.lstStatus.AddItem "FP Solutions Installation Folder: " + Workbooks("ClientManager.xls").path
    
    ' Owner ID
    Me.lstStatus.AddItem "Owner ID: " + GetOwnerID
    Me.lstStatus.AddItem "Planner Name: " + GetPlannerName
    
    ' Data Folder
    sDataFolder = GetDataFolder
    Me.lstStatus.AddItem "Active Database Folder: " + sDataFolder
    Me.lstStatus.AddItem "Active Database Folder exists: " + IIf(oFileSys.FolderExists(sDataFolder), "Yes", "No")
    Me.lstStatus.AddItem "Active Database exists: " + IIf(oFileSys.FileExists(sDataFolder + "\ClientMgr.mdb"), "Yes", "No")
    Me.lstStatus.AddItem "Active Database is shared: " + IIf(IsDBShared(False), "Yes", "No")
    Me.lstStatus.AddItem "Active Database Owner ID: " + GetDBOwnerID(sDataFolder + "\ClientMgr.mdb")
    Me.lstStatus.AddItem "Local Database exists: " + IIf(oFileSys.FileExists(Workbooks("ClientManager.xls").path + "\data\ClientMgr.mdb"), "Yes", "No")
    Me.lstStatus.AddItem "Local Database is shared: " + IIf(IsDBShared(True), "Yes", "No")
    Me.lstStatus.AddItem "Local Database Owner ID: " + GetDBOwnerID(Workbooks("ClientManager.xls").path + "\data\ClientMgr.mdb")
    
    ' Enable Network
    Me.lstStatus.AddItem "Use FP Solutions Server: " + IIf(CBool(GetSetting("FPS_Net", GetSettingsKey, "EnableNet", 0)), "Yes", "No")
    Me.lstStatus.AddItem "FP Solutions Server Location: " + GetSetting("FPS_Net", GetSettingsKey, "ShareLocation", "")
    Me.lstStatus.AddItem "Use Server Manifest File: " + IIf(CBool(GetSetting("FPS_Net", GetSettingsKey, "ServerManifest", 0)), "Yes", "No")
    Me.lstStatus.AddItem "Enable Work Offline Dialog: " + IIf(CBool(GetSetting("FPS_Net", GetSettingsKey, "EnableWorkOfflineDialog", 0)), "Yes", "No")
    Me.lstStatus.AddItem "Use Server Database: " + IIf(CBool(GetSetting(PROG_NAME, GetSettingsKey, "UseServerDB", 0)), "Yes", "No")
    Me.lstStatus.AddItem "Use Database Located Elsewhere: " + IIf(CBool(GetSetting(PROG_NAME, GetSettingsKey, "UseSharedDB", 0)), "Yes", "No")
    sDataFolder = GetSetting(PROG_NAME, GetSettingsKey, "DataFolder", Workbooks("ClientManager.xls").path + "\data")
    Me.lstStatus.AddItem "Elsewhere location: " + sDataFolder
    Me.lstStatus.AddItem "Elsewhere Database Folder: " + sDataFolder
    Me.lstStatus.AddItem "Elsewhere Database Folder exists: " + IIf(oFileSys.FolderExists(sDataFolder), "Yes", "No")
    Me.lstStatus.AddItem "Elsewhere Database exists: " + IIf(oFileSys.FileExists(sDataFolder + "\ClientMgr.mdb"), "Yes", "No")
    Me.lstStatus.AddItem "Elsewhere Database is shared: " + IIf(IsDBShared(False), "Yes", "No")
    
    DoEvents
    sLog = StatusListToString
    DoEvents
    
    ' Test Query Local Database
    If oFileSys.FileExists(Workbooks("ClientManager.xls").path + "\data\ClientMgr.mdb") Then
        vTmpTable = TestQueryDB(Workbooks("ClientManager.xls").path + "\data\ClientMgr.mdb")
        If IsArray(vTmpTable) Then
            Me.lstStatus.AddItem "Number of records in Local DB: " + CStr(UBound(vTmpTable, 2))
            sLog = sLog + "Number of records in Local DB: " + CStr(UBound(vTmpTable, 2) + 1) + vbCrLf
            sLog = sLog + TwoDimArrayToString(vTmpTable)
        End If
    End If
    
    DoEvents
    
    ' Test Query Active (Remote) Database
    vTmpTable = TestQueryDB(sDataFolder + "\ClientMgr.mdb")
    If IsArray(vTmpTable) Then
        Me.lstStatus.AddItem "Number of records in Active DB: " + CStr(UBound(vTmpTable, 2))
        sLog = sLog + "Number of records in Active DB: " + CStr(UBound(vTmpTable, 2) + 1) + vbCrLf
        sLog = sLog + TwoDimArrayToString(vTmpTable)
    End If
    
    sText = NRAEnc060904(sLog)
    WriteFile sText
    
    If Val(Application.ScreenUpdating) <> Val(True) Then
        Application.ScreenUpdating = True
    End If
    
    'Debug.Print ReadDumpFile
    MsgBox Lang(301), vbInformation
    
Exit Sub
Err_Handler:
    Me.lstStatus.AddItem "ERROR: " + CStr(Err.Number) + " " + Err.Description
    Err.Clear
    Resume Next
End Sub

Private Function TestQueryDB(ByVal theDataFolder As String) As Variant
    Dim sSQL As String
    Dim vRet As Variant
    
    sSQL = "SELECT * FROM tbClients ORDER BY ID ASC"
    vRet = ExecuteSQL(sSQL, theDataFolder)
    TestQueryDB = vRet
End Function

Private Function GetDBOwnerID(ByVal theDataFolder As String) As String
    Dim sSQL As String
    Dim vRet As Variant
    
    sSQL = "SELECT OwnerID FROM tbSystem"
    vRet = ExecuteSQL(sSQL, theDataFolder)
    If IsArray(vRet) Then
        GetDBOwnerID = RemoveNull(vRet(0, 0))
    End If
End Function

Private Function NRAEnc060904(ByVal theText As String) As String
    Dim iCnt As Integer
    Dim sCurr As String
    Dim sNew As String
    Dim iPos As Integer
    Dim sMid As String
    Dim iTblLen As Integer
    Dim iFactor As Integer
    
    Const sCharTbl = "obf4B7KHl6xm9tFij01EMWvSuVgyec3zsTDOUP-kpNQZq CRwG.8XrhndI52ALJaY:/\_+=()," + vbTab + vbCrLf
    iTblLen = Len(sCharTbl)
    
    For iCnt = 1 To Len(theText)
        sCurr = Mid(theText, iCnt, 1)
        iPos = InStr(sCharTbl, sCurr) + 17
        If iCnt > 1 Then
            iFactor = Asc(Mid(sNew, iCnt - 1, 1))
            iPos = (iPos + iFactor) Mod iTblLen
        Else
            iPos = iPos Mod iTblLen
        End If
        If iPos = 0 Then
            iPos = iTblLen
        End If
        sMid = Mid(sCharTbl, iPos, 1)
        sNew = sNew + sMid
    Next iCnt
    
    NRAEnc060904 = StrReverse(sNew)
End Function

Private Function TwoDimArrayToString(ByVal theArray As Variant) As String
    Dim iRecCnt As Long
    Dim iFldCnt As Long
    Dim sRet As String
    
    If IsArray(theArray) Then
        For iRecCnt = LBound(theArray, 2) To UBound(theArray, 2)
            For iFldCnt = LBound(theArray, 1) To UBound(theArray, 1)
                If iFldCnt < UBound(theArray, 1) Then
                    sRet = sRet + CStr(RemoveNull(theArray(iFldCnt, iRecCnt))) + vbTab
                Else
                    sRet = sRet + CStr(RemoveNull(theArray(iFldCnt, iRecCnt)))
                End If
            Next iFldCnt
            sRet = sRet + vbCrLf
        Next iRecCnt
    End If
    TwoDimArrayToString = sRet
End Function

Private Function StatusListToString() As String
    Dim iCnt As Integer
    Dim sRet As String
    
    For iCnt = 0 To Me.lstStatus.ListCount - 1
        sRet = sRet + Me.lstStatus.List(iCnt) + vbCrLf
    Next iCnt
    StatusListToString = sRet
End Function

Private Sub WriteFile(ByVal theText As String)
    Dim oFileSys As New Scripting.FileSystemObject
    oFileSys.OpenTextFile(ThisWorkbook.path + "\FPDiagnostics.dmp", ForWriting, True).Write theText
    Set oFileSys = Nothing
End Sub

Private Function NRADec060904(ByVal theText As String) As String
    Dim iCnt As Integer
    Dim sCurr As String
    Dim sNew As String
    Dim iPos As Integer
    Dim sMid As String
    Dim iTblLen As Integer
    Dim iFactor As Integer
    
    Const sCharTbl = "obf4B7KHl6xm9tFij01EMWvSuVgyec3zsTDOUP-kpNQZq CRwG.8XrhndI52ALJaY:/\_+=()," + vbTab + vbCrLf

    iTblLen = Len(sCharTbl)

    theText = StrReverse(theText)
    
    For iCnt = 1 To Len(theText)
        sCurr = Mid(theText, iCnt, 1)
        iPos = (InStr(sCharTbl, sCurr) - 17) + iTblLen
                
        If iCnt > 1 Then
            iFactor = Asc(Mid(theText, iCnt - 1, 1))
            iPos = ((iPos - iFactor) + iTblLen) Mod iTblLen
        Else
            iPos = iPos Mod iTblLen
        End If
        If iPos = 0 Then
            iPos = iTblLen
        End If
        
        If iPos > 0 Then
            sMid = Mid(sCharTbl, iPos, 1)
        Else
            sMid = Mid(sCharTbl, Len(sCharTbl) + iPos, 1)
        End If
        sNew = sNew + sMid
    Next iCnt

    NRADec060904 = sNew
End Function

Private Function ReadDumpFile() As String
    Dim oFileSys As New Scripting.FileSystemObject
    ReadDumpFile = NRADec060904(oFileSys.OpenTextFile(ThisWorkbook.path + "\FPDiagnostics.dmp", ForReading).ReadAll)
    Set oFileSys = Nothing
End Function

Private Sub UserForm_Initialize()
    If GetSetting("FPDBSharer", "Settings", "TechSuppMode", 0) = 1 Then
        Me.cmdReadFile.Visible = True
    End If
End Sub

Private Function WorkBookExists(ByVal theWorkBookName As String) As Boolean
On Error GoTo Err_Handler
    WorkBookExists = (Not Workbooks(theWorkBookName) Is Nothing)
Exit Function
Err_Handler:
    WorkBookExists = False
End Function

Private Function GetPlannerName(Optional ByVal theDefaultName As String = "Unknown Planner") As String
    Dim oSysBk As Workbook
    Dim sRet As String
    
    sRet = theDefaultName
    If WorkBookExists("Fpssys.xls") Then
        Set oSysBk = Workbooks("Fpssys.xls")
        If WorkSheetExists(oSysBk, "Sheet2") Then
            If Not (oSysBk.Sheets("Sheet2").Range("A6").Value = 0 Or oSysBk.Sheets("Sheet2").Range("A6").Value = "") Then
                sRet = GetJustName(oSysBk.Sheets("Sheet2").Range("A6").Value)
            End If
        End If
    End If
    GetPlannerName = sRet
End Function

Private Function GetJustName(ByVal sText As String) As String
    ' detect a comma in the name field as the separator between name and designations
    ' assume there will always be only 1 comma present
    Dim iPos As Integer
    
    iPos = InStr(1, sText, ",")
    If iPos = 0 Then
        GetJustName = sText
    Else
        GetJustName = Left(sText, iPos - 1)
    End If
End Function

Public Function WorkSheetExists(ByVal theWorkBook As Workbook, ByVal theSheetName As String) As Boolean
On Error GoTo Err_Trap
    Dim oSheet As Worksheet
    Set oSheet = theWorkBook.Sheets(theSheetName)
    If Not oSheet Is Nothing Then
        WorkSheetExists = True
    End If
Exit Function
Err_Trap:
    WorkSheetExists = False
End Function

Attribute VB_Name = "frmExport"
Attribute VB_Base = "0{50AD51F7-A916-11E7-A061-000C2961E840}{50AD51C6-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub chkPersonal_Click()
    Dim sMsg As String
    
    If chkPersonal.Value = True Then
        sMsg = Lang(127)
        If MsgBox(sMsg, vbYesNo + vbExclamation, PROG_NAME) = vbNo Then
            chkPersonal.Value = False
        End If
    End If
End Sub

Private Sub cmdBrwsDefDB_Click()
    Dim vFile As Variant
    Dim sFileName As String
    Dim sFilter As String
    Dim sTitle As String
    Dim oFileSys As New Scripting.FileSystemObject
    
    Select Case True
        Case optClientFile.Value
           sFileName = "Client File.xls"
           sFilter = Lang(128) + " (*.xls), *.xls"
           sTitle = Lang(129)
'        Case optFactFinder.Value
'           sFileName = "Fact Finder File.xls"
'           sFilter = "FP Solutions Fact Finder Files (*.xls), *.xls"
'           sTitle = "Export Client Data to Fact Finder As"
'        Case optXML.Value
'           sFileName = "XML Export.xml"
'           sFilter = "XML Files (*.xml), *.xml"
'           sTitle = "Export Client Data to XML File As"
    End Select
    
    Dim sPath As String
    sPath = GetExportsFolder
    ChDir sPath
    vFile = Application.GetSaveAsFilename(sFileName, sFilter, 0, sTitle)
    If vFile <> False Then
        Me.txtFilename.Text = vFile
    End If
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    If Me.txtFilename.Text = "" Then
        MsgBox Lang(130), vbExclamation
        Exit Sub
    End If
    Me.Hide
    Select Case True
        Case Me.optClientFile.Value
            If Not DoExportClientFile Then
                Me.Show
            Else
                MsgBox Lang(131), vbInformation, PROG_NAME
                Unload Me
            End If
    End Select
End Sub

Private Function DoExportClientFile() As Boolean
On Error GoTo Err_Handler
    Dim oFileSys As New Scripting.FileSystemObject
    Dim oCurrCF As Workbook
    Dim oTmpWkBk As Workbook
    Dim bEvt As Boolean
    Dim sExportPath As String
    
    sExportPath = GetExportsFolder
    ChDir ThisWorkbook.path
    If Run("FPS.xls!File_Save", , True, True) Then
        If oFileSys.GetParentFolderName(Me.txtFilename.Text) = "" Then
            MsgBox Lang(132), vbInformation, PROG_NAME
            Me.txtFilename.Text = sExportPath & "\" & oFileSys.GetBaseName(Me.txtFilename.Text) + ".xls"
        End If
        If oFileSys.FolderExists(oFileSys.GetParentFolderName(Me.txtFilename.Text)) Then
            Set oCurrCF = Run("FPS.xls!GetClientFile")
            If oCurrCF Is Nothing Then
                Set oCurrCF = Run("FPS.xls!CreateClientFile")
            End If
            If Not oCurrCF Is Nothing Then
                If UCase(oCurrCF.FullName) = UCase(Me.txtFilename.Text) Then
                    MsgBox Lang(133), vbExclamation, PROG_NAME
                    Exit Function
                End If
                If oFileSys.FileExists(oCurrCF.FullName) Then
                    If oFileSys.FileExists(Me.txtFilename.Text) Then
                        If MsgBox(Lang(134), vbQuestion + vbYesNo, PROG_NAME) = vbYes Then
                            If oFileSys.GetFile(Me.txtFilename.Text).Attributes Mod 2 = ReadOnly Then
                                oFileSys.GetFile(Me.txtFilename.Text).Attributes = Normal
                            End If
                            oFileSys.CopyFile oCurrCF.FullName, Me.txtFilename.Text, True
                            GoSub StripRoutine
                        End If
                    Else
                        oFileSys.CopyFile oCurrCF.FullName, Me.txtFilename.Text, True
                        GoSub StripRoutine
                    End If
                Else
                    If Not Me.chkPersonal.Value Then
                        StripClientFile oCurrCF
                    End If
                    If oFileSys.FileExists(Me.txtFilename.Text) Then
                        If MsgBox(Lang(134), vbQuestion + vbYesNo, PROG_NAME) = vbYes Then
                            If oFileSys.GetFile(Me.txtFilename.Text).Attributes Mod 2 = ReadOnly Then
                                oFileSys.GetFile(Me.txtFilename.Text).Attributes = Normal
                            End If
                            oFileSys.DeleteFile Me.txtFilename.Text
                            Application.DisplayAlerts = False
                            UniversalSaveAs oCurrCF, Replace(Me.txtFilename.Text, ":\\", ":\")
                            oCurrCF.Close False
                            Set oCurrCF = Nothing
                            Application.DisplayAlerts = True
                        End If
                    Else
                        Application.DisplayAlerts = False
                        UniversalSaveAs oCurrCF, Replace(Me.txtFilename.Text, ":\\", ":\")
                        oCurrCF.Close False
                        Set oCurrCF = Nothing
                        Application.DisplayAlerts = True
                    End If
                End If
            Else
                MsgBox Lang(135), vbCritical, PROG_NAME
            End If
        Else
            MsgBox Replace(Lang(136), "%FOLDER%", oFileSys.GetParentFolderName(Me.txtFilename.Text)), vbExclamation, PROG_NAME
        End If
    Else
        MsgBox Lang(137), vbCritical, PROG_NAME
    End If
Exit Function

StripRoutine:
    If oFileSys.FileExists(Me.txtFilename.Text) Then
        bEvt = Application.EnableEvents
        Application.EnableEvents = False
        Application.StatusBar = " "
        Set oTmpWkBk = Workbooks.Open(Me.txtFilename.Text, False)
        If SheetsAreEncrypted(oTmpWkBk) Then
            DecryptSheets oTmpWkBk, "GB-009453-45"
        End If
        If Not Me.chkPersonal.Value Then
            StripClientFile oTmpWkBk
        End If
        oTmpWkBk.Save
        oTmpWkBk.Close False
        Application.StatusBar = False
        Application.EnableEvents = bEvt
        DoExportClientFile = True
    End If
    Return

Err_Handler:
    MsgBox Err.Description, vbCritical, PROG_NAME
End Function

Attribute VB_Name = "frmFileRequester"
Attribute VB_Base = "0{50AD521B-A916-11E7-A061-000C2961E840}{50AD51D8-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public m_ButtonClicked As String
Public m_ForceClose As Boolean
Public m_ProgName As String
Public m_Filename As String
Public m_FileIsFromDB As Boolean
Public m_PrefixID As String

Private m_DatabasePath As String
Private m_NewFolder As Boolean
Private m_SelectedItems As Collection
Private m_RootIndexColl As Collection
Private m_FloppyReady As Boolean
Private m_FloppyChecked As Boolean
Private m_Initializing As Boolean
Private m_ViewPlanner As String
Private m_Popup As CommandBar
Private m_CurrViewIsDB As Boolean

Private Enum MsgBoxAllRespTypes
    MSGBX_YES = 0
    MSGBX_NO = 1
    MSGBX_YESALL = 2
    MSGBX_NOALL = 3
    MSGBX_CANCEL = 4
End Enum

Private Sub cboCurrFolder_Click()

    ' If Save
    If Left(Me.cmdOK.Caption, Len(Lang(61))) = Lang(61) Then
        ' Customizations for CIBC only
        If IsCIBCWG Then
            ' Check if Clients is not selected
            If Me.cboCurrFolder.SelectedItem.Key <> "Clients" Then
                ' Select the Clients Folder ComboItem
                Me.cboCurrFolder.ComboItems("Clients").Selected = True
            End If
        End If
    End If
    
    RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner
End Sub

Private Sub cboFileType_Click()
    If Not m_Initializing Then
        RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner
    End If
End Sub

Private Sub cmdCancel_Click()
    m_ButtonClicked = Me.cmdCancel.Caption
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    Dim bFromDB As Boolean
    Dim sDataFolder As String
    Dim oTmpItem As ListItem
    Dim sTmpFilename As String
    Dim bContinue As Boolean
    
    bFromDB = (FindRootIndex = 1)
    m_FileIsFromDB = bFromDB
    
    If Me.txtFilename.Locked Then
        If Not Me.lvwFiles.SelectedItem Is Nothing Then
            If Me.lvwFiles.SelectedItem.SmallIcon <> 11 Then
                bContinue = True
            End If
        End If
    Else
        If Me.txtFilename.Text <> "" Then
            If (m_ViewPlanner = "") Or (m_ViewPlanner = GetPlannerName) Then
                bContinue = True
            Else
                MsgBox Lang(278), vbExclamation, m_ProgName
            End If
        End If
    End If
    
    If bContinue Then
        If bFromDB Then
            sDataFolder = GetDataFolder
            Set oTmpItem = Me.lvwFiles.FindItem(Me.txtFilename.Text)
            If Not oTmpItem Is Nothing Then
                m_Filename = sDataFolder + "\" + oTmpItem.SubItems(9) + STR_DATAFILE_EXT
            Else
                sTmpFilename = InsertNewFile(Me.txtFilename.Text)
                If sTmpFilename <> "" Then
                    m_Filename = sDataFolder + "\" + sTmpFilename + STR_DATAFILE_EXT
                End If
            End If
        Else
            m_Filename = Me.cboCurrFolder.SelectedItem.Tag + "\" + Me.txtFilename.Text
        End If
        m_ButtonClicked = Me.cmdOK.Caption
        Me.Hide
    End If
End Sub

Private Sub InitToolbar()
    Me.tbrTools.ImageList = Me.imgList
    Me.tbrTools.Buttons(1).Image = 1
    Me.tbrTools.Buttons(3).Image = 2
    Me.tbrTools.Buttons(4).Image = 3
    Me.tbrTools.Buttons(5).Image = 12
    Me.tbrTools.Buttons(7).Image = 14
    Me.tbrTools.Buttons(8).Image = 13
    
    Me.tbrMisc.ImageList = Me.imgList
End Sub

Private Sub fraLeft_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    ClearRaised
End Sub

Private Sub imgBtn1_Click()
    Me.cboCurrFolder.ComboItems("Database").Selected = True
    RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner
End Sub

Private Sub imgBtn1_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    imgBtn1.SpecialEffect = fmSpecialEffectSunken
End Sub

Private Sub imgBtn1_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If imgBtn1.SpecialEffect = fmSpecialEffectSunken Then
        Exit Sub
    End If
    If imgBtn1.SpecialEffect <> fmSpecialEffectRaised Then
        ClearRaised
        imgBtn1.SpecialEffect = fmSpecialEffectRaised
    End If
End Sub

Private Sub imgBtn1_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    imgBtn1.SpecialEffect = fmSpecialEffectRaised
End Sub

Private Sub imgBtn2_Click()
    Me.cboCurrFolder.ComboItems("Clients").Selected = True
    RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner
End Sub

Private Sub imgBtn2_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    imgBtn2.SpecialEffect = fmSpecialEffectSunken
End Sub

Private Sub imgBtn2_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If imgBtn2.SpecialEffect = fmSpecialEffectSunken Then
        Exit Sub
    End If
    If imgBtn2.SpecialEffect <> fmSpecialEffectRaised Then
        ClearRaised
        imgBtn2.SpecialEffect = fmSpecialEffectRaised
    End If
End Sub

Private Sub imgBtn2_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    imgBtn2.SpecialEffect = fmSpecialEffectRaised
    If Button = 2 Then
        imgBtn2.SpecialEffect = fmSpecialEffectFlat
        If Not m_Popup Is Nothing Then
            m_Popup.ShowPopup
        End If
    End If
End Sub

Private Sub imgBtn3_Click()
    Me.cboCurrFolder.ComboItems("Exports").Selected = True
    RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner
End Sub

Private Sub imgBtn3_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    imgBtn3.SpecialEffect = fmSpecialEffectSunken
End Sub

Private Sub imgBtn3_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If imgBtn3.SpecialEffect = fmSpecialEffectSunken Then
        Exit Sub
    End If
    If imgBtn3.SpecialEffect <> fmSpecialEffectRaised Then
        ClearRaised
        imgBtn3.SpecialEffect = fmSpecialEffectRaised
    End If
End Sub

Private Sub imgBtn4_Click()
    Me.cboCurrFolder.ComboItems("MyDocuments").Selected = True
    RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner
End Sub

Private Sub imgBtn4_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    imgBtn4.SpecialEffect = fmSpecialEffectSunken
End Sub

Private Sub imgBtn4_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If imgBtn4.SpecialEffect = fmSpecialEffectSunken Then
        Exit Sub
    End If
    If imgBtn4.SpecialEffect <> fmSpecialEffectRaised Then
        ClearRaised
        imgBtn4.SpecialEffect = fmSpecialEffectRaised
    End If
End Sub

Private Sub imgBtn3_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    imgBtn3.SpecialEffect = fmSpecialEffectRaised
End Sub

Private Sub imgBtn4_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    imgBtn4.SpecialEffect = fmSpecialEffectRaised
End Sub

Private Sub lvwFiles_AfterLabelEdit(Cancel As Integer, NewString As String)
    Dim sSQL As String
    Dim iRecAffect As Integer
    Dim bFromDB As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    Dim iCnt As Integer
    Dim bNotAllowedChar As Boolean
    Dim sExcludeStr As String
    Dim iSelSmallIcon As Integer
    
    If Not Me.lvwFiles.SelectedItem Is Nothing Then
        iSelSmallIcon = Me.lvwFiles.SelectedItem.SmallIcon
    End If
    
    If NewString = "" Then
        Cancel = True
        MsgBox Lang(279), vbExclamation, m_ProgName
        Set Me.lvwFiles.SelectedItem = Nothing
        Set Me.lvwFiles.DropHighlight = Nothing
        Exit Sub
    End If
    
    If NewString = Lang(43) Then
        Cancel = True
        MsgBox Lang(44), vbExclamation, m_ProgName
        Set Me.lvwFiles.SelectedItem = Nothing
        Set Me.lvwFiles.DropHighlight = Nothing
        Exit Sub
    End If
    
    sExcludeStr = "!@#$%^&*\/[]{}:;|?<>"
    
    For iCnt = 1 To Len(sExcludeStr)
        If InStr(NewString, Mid(sExcludeStr, iCnt, 1)) > 0 Then
            bNotAllowedChar = True
            Exit For
        End If
    Next iCnt
    
    If bNotAllowedChar Then
        Cancel = True
        MsgBox Lang(45), vbExclamation, m_ProgName
        Set Me.lvwFiles.SelectedItem = Nothing
        Set Me.lvwFiles.DropHighlight = Nothing
        Exit Sub
    End If
    
    bFromDB = (FindRootIndex = 1)
    If m_NewFolder Then
        If Not Me.lvwFiles.FindItem(NewString) Is Nothing Then
            MsgBox Lang(46), vbExclamation, m_ProgName
            Cancel = True
            ' Delete created folder
            If bFromDB Then
                lvwFiles.ListItems.Remove lvwFiles.SelectedItem.index
                DeleteFolderFromDB Me.lvwFiles.SelectedItem.SubItems(10), Me.lvwFiles.SelectedItem.SubItems(9)
            Else
                oFileSys.DeleteFolder Me.cboCurrFolder.SelectedItem.Tag + "\" + Me.lvwFiles.SelectedItem.Text, True
                lvwFiles.ListItems.Remove lvwFiles.SelectedItem.index
            End If
        Else
            If FilePathExists(Me.cboCurrFolder.SelectedItem.Tag, NewString, bFromDB) Then
                MsgBox Lang(46), vbExclamation, m_ProgName
                Cancel = True
                ' Delete created folder
                If bFromDB Then
                    lvwFiles.ListItems.Remove lvwFiles.SelectedItem.index
                    DeleteFolderFromDB Me.lvwFiles.SelectedItem.SubItems(10), Me.lvwFiles.SelectedItem.SubItems(9)
                Else
                    oFileSys.DeleteFolder Me.cboCurrFolder.SelectedItem.Tag + "\" + Me.lvwFiles.SelectedItem.Text, True
                    lvwFiles.ListItems.Remove lvwFiles.SelectedItem.index
                End If
            Else
                If bFromDB Then
                    ' New Folder Rename
                    sSQL = "UPDATE tbClients SET ClientName = '" + Replace(NewString, "'", "''") + "' WHERE ClientFileID = '" + lvwFiles.SelectedItem.SubItems(9) + "'"
                    iRecAffect = ExecuteSQL(sSQL)
                Else
                    oFileSys.MoveFolder Me.cboCurrFolder.SelectedItem.Tag + "\" + Me.lvwFiles.SelectedItem.Text, Me.cboCurrFolder.SelectedItem.Tag + "\" + NewString
                    RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner, NewString, iSelSmallIcon = 11
                End If
            End If
        End If
    Else
        If FilePathExists(Me.cboCurrFolder.SelectedItem.Tag, NewString) Then
            MsgBox Lang(47), vbExclamation, m_ProgName
            Cancel = True
        Else
            If bFromDB Then
                ' Item Rename
                sSQL = "UPDATE tbClients SET ClientName = '" + Replace(NewString, "'", "''") + "' WHERE ClientFileID = '" + lvwFiles.SelectedItem.SubItems(9) + "'"
                iRecAffect = ExecuteSQL(sSQL)
                ' Check if this is a folder
                If lvwFiles.SelectedItem.SmallIcon = 11 Then
                    ' Rename the path of items inside this folder
                    RenameFolderDB Me.cboCurrFolder.SelectedItem.Tag + "\" + Me.lvwFiles.SelectedItem.Text, Me.cboCurrFolder.SelectedItem.Tag + "\" + NewString, Me.lvwFiles.SelectedItem.SubItems(5)
                End If
            Else
                If Me.lvwFiles.SelectedItem.SmallIcon = 11 Then
                    oFileSys.MoveFolder Me.cboCurrFolder.SelectedItem.Tag + "\" + Me.lvwFiles.SelectedItem.Text, Me.cboCurrFolder.SelectedItem.Tag + "\" + NewString
                Else
                    oFileSys.MoveFile Me.cboCurrFolder.SelectedItem.Tag + "\" + Me.lvwFiles.SelectedItem.Text, Me.cboCurrFolder.SelectedItem.Tag + "\" + NewString
                End If
                RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner, NewString, iSelSmallIcon = 11
            End If
        End If
    End If
    
    If iSelSmallIcon <> 11 Then ' If renamed Icon is Not a folder
        If Me.txtFilename.Text <> NewString Then
            Me.txtFilename.Text = NewString
        End If
    End If
End Sub

Private Function RenameFolderDB(ByVal theSrcFolderPath As String, ByVal theTgtFolderPath As String, ByVal thePlanner As String) As Boolean
    Dim sSQL As String
    Dim sWherePath As String
    Dim vTmp As Variant
    Dim iCnt As Integer
    Dim sNewPath As String
    Dim iRecAffect As Integer
    
    If theSrcFolderPath = "" Then
        sWherePath = "(Path IS NULL OR Path = '')"
    Else
        sWherePath = "Path LIKE '" + Replace(theSrcFolderPath, "'", "''") + "%'"
    End If
    
    sSQL = "SELECT ID,Path FROM tbClients WHERE " + sWherePath + " AND Creator = '" + Replace(thePlanner, "'", "''") + "'"
    vTmp = ExecuteSQL(sSQL)
    If IsArray(vTmp) Then
        For iCnt = LBound(vTmp, 2) To UBound(vTmp, 2)
            sNewPath = theTgtFolderPath + Right(vTmp(1, iCnt), Len(vTmp(1, iCnt)) - Len(theSrcFolderPath))
            sSQL = "UPDATE tbClients SET Path = '" + Replace(sNewPath, "'", "''") + "' WHERE ID = " + CStr(vTmp(0, iCnt))
            iRecAffect = ExecuteSQL(sSQL)
            RenameFolderDB = True
        Next iCnt
    End If
End Function

Private Sub lvwFiles_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
    lvwFiles.Sorted = True
    Select Case ColumnHeader.index
        Case 1
            lvwFiles.SortKey = 15
        Case 2
            lvwFiles.SortKey = 12
        Case 3
            lvwFiles.SortKey = 13
        Case 7
            lvwFiles.SortKey = 14
        Case Else
            lvwFiles.SortKey = ColumnHeader.index - 1
    End Select
    lvwFiles.SortOrder = IIf(lvwFiles.SortOrder = lvwAscending, lvwDescending, lvwAscending)
End Sub

Private Sub lvwFiles_DblClick()
    Dim oComboItem As ComboItem
    Dim iRootIndex As Integer
    
    If Not Me.lvwFiles.SelectedItem Is Nothing Then
        If Me.lvwFiles.SelectedItem.SmallIcon = 11 Then
            ' Folder items
            iRootIndex = FindRootIndex
            iRootIndex = IIf(Me.imgBtn1.Enabled, iRootIndex, iRootIndex - 1)
            InitImageCombo Me.cboCurrFolder.SelectedItem.Tag + "\" + Me.lvwFiles.SelectedItem.Text, iRootIndex
            RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , Me.lvwFiles.SelectedItem.SubItems(5)
        Else
            ' Other items
            Call cmdOK_Click
        End If
    End If
End Sub

Private Sub lvwFiles_ItemClick(ByVal Item As MSComctlLib.ListItem)
    If Item.SmallIcon = 11 Then
        If Me.txtFilename.Locked Then
            Me.txtFilename.Text = ""
        End If
    Else
        Me.txtFilename.Text = Item.Text
    End If
End Sub

Private Sub lvwFiles_KeyUp(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = 8 Or KeyCode = 46 Then
        If Not Me.lvwFiles.SelectedItem Is Nothing Then
            DeleteItems
        End If
    End If
End Sub

Private Sub lvwFiles_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As stdole.OLE_XPOS_PIXELS, ByVal y As stdole.OLE_YPOS_PIXELS)
    ClearRaised
End Sub

Private Sub lvwFiles_OLEDragDrop(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single)
    Dim oListItem As ListItem
    
    Set oListItem = lvwFiles.HitTest(x * 1440 / 72, y * 1440 / 72)

    If Data.GetFormat(ccCFText) Then
        If Not oListItem Is Nothing Then
            If oListItem.SmallIcon = 11 Then

                If m_CurrViewIsDB Then
                    If CheckReadOnlyLock Then
                        If MsgBox(Lang(48), vbYesNo + vbExclamation + vbDefaultButton2, m_ProgName) = vbNo Then
                            Exit Sub
                        End If
                    End If
                Else
                    If CheckReadOnly Then
                        If MsgBox(Lang(49), vbYesNo + vbExclamation + vbDefaultButton2, m_ProgName) = vbNo Then
                            Exit Sub
                        End If
                    End If
                End If
                
                If MsgBox(Lang(50), vbYesNo + vbQuestion, m_ProgName) = vbYes Then
                    MoveFiles oListItem.SubItems(10) + "\" + oListItem.Text, oListItem.SubItems(5)
                    RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner
                Else
                    Set Me.lvwFiles.DropHighlight = Nothing
                    Set Me.lvwFiles.SelectedItem = Nothing
                End If
            End If
        End If
    End If

End Sub

Private Sub lvwFiles_OLEDragOver(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single, State As Integer)
    Dim oListItem As ListItem
    
    Set oListItem = lvwFiles.HitTest(x * 1440 / 72, y * 1440 / 72)

    Select Case True
        Case Data.GetFormat(ccCFText)
            Effect = ccOLEDropEffectMove
            If Not oListItem Is Nothing Then
                oListItem.EnsureVisible
                If oListItem.SmallIcon = 11 Then
                    Set lvwFiles.DropHighlight = oListItem
                Else
                    Set lvwFiles.DropHighlight = Nothing
                End If
            End If
        Case Else
            Effect = ccOLEDropEffectNone
    End Select
End Sub

Private Sub tbrMisc_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    Select Case ButtonMenu.Key
        Case "mnuImport"
            PerformImport
        Case "mnuQuery"
            PerformQuery
    End Select
End Sub

Private Sub tbrTools_ButtonClick(ByVal Button As MSComctlLib.Button)
    Select Case Button.index
        Case 1  ' Up One Level
            GoUpOneLevel
        Case 3  ' New Folder
            AddFolder
        Case 4  ' Delete Folder
            DeleteItems
        Case 5  ' Rename Folder
            RenameItem
        Case 7  ' Cut Items
            CutItems
        Case 8  ' Paste Items
            PasteItems
    End Select
End Sub

Private Sub UserForm_Activate()
    RefreshListView cboCurrFolder.SelectedItem.Tag
    Me.fraLeft.SetFocus
End Sub

Private Sub UserForm_Initialize()
    m_Initializing = True
    Me.lvwFiles.SmallIcons = Me.imgList
    lvwFiles.SortKey = 15
    lvwFiles.Sorted = True
    lvwFiles.SortOrder = lvwAscending
    
    fraLeft.BackColor = RGB(128, 128, 128)
    
    ' Init Database Images position
    If Me.lblDatabase.Caption <> "Database" Then
        Me.imgDatabase.Top = 6
        Me.imgDBGrey.Top = 6
        Me.lblDatabase.Top = 30
    End If
    
    ' Init state of Tool Button Menu
    If Not AllowedToUseDB Then
        Me.tbrMisc.Enabled = False
    End If
    
    InitToolbar
    InitImageCombo
    InitTypeCombo
    SetupPopup
'    RefreshListView cboCurrFolder.SelectedItem.Tag
    m_Initializing = False
End Sub

Public Sub InitImageCombo(Optional ByVal sNewPath As String, Optional ByVal theRootIndex As Integer)
On Error Resume Next
    Dim oComboItem As ComboItem
    Dim iCnt As Integer
    Dim vTmp As Variant
    Dim oFileSys As New Scripting.FileSystemObject
    Dim oDrive As Scripting.Drive
    Dim sVolume As String
    Dim iIndxCnt As Integer
    Dim iMainButtonsCount As Integer
    Dim bIsXenApp As Boolean
    
    bIsXenApp = Run("Fps.xls!IsXenApp")
    
    Me.cboCurrFolder.ImageList = Me.imgList
    Me.cboCurrFolder.ComboItems.Clear
    
    ' Change this if you add more main buttons, you must also change the FindRootIndex function
    iMainButtonsCount = 5
    
    If Me.imgBtn1.Enabled Then
        Set oComboItem = Me.cboCurrFolder.ComboItems.Add(, "Database", Lang(1465), 6, , 0)
    End If
    Set oComboItem = Me.cboCurrFolder.ComboItems.Add(, "Clients", Lang(290), 7, , 0)
    oComboItem.Tag = GetClientsFolder
    Set oComboItem = Me.cboCurrFolder.ComboItems.Add(, "Exports", Lang(289), 8, , 0)
    oComboItem.Tag = GetExportsFolder
    Set oComboItem = Me.cboCurrFolder.ComboItems.Add(, "MyDocuments", Lang(291), 22, , 0)
    oComboItem.Tag = GetMyDocumentsFolder
    Set oComboItem = Me.cboCurrFolder.ComboItems.Add(, "Desktop", Lang(1466), 25, , 0)
    oComboItem.Tag = GetDesktopFolder
    
    Set m_RootIndexColl = New Collection
    iIndxCnt = IIf(imgBtn1.Enabled, iMainButtonsCount, iMainButtonsCount - 1)
    For Each oDrive In oFileSys.Drives
        Select Case True
            Case oDrive.DriveType = Fixed
                If Not bIsXenApp Then
                    Set oComboItem = Me.cboCurrFolder.ComboItems.Add(, , "(" + oDrive.DriveLetter + ":) " + oDrive.VolumeName, 18, , 0)
                    oComboItem.Tag = oDrive.path
                    iIndxCnt = iIndxCnt + 1
                    m_RootIndexColl.Add iIndxCnt, oComboItem.Text
                End If
            Case oDrive.DriveType = CDRom
                If Not bIsXenApp Then
                    If Not oDrive.IsReady Then
                        sVolume = Lang(1467)
                    Else
                        sVolume = oDrive.VolumeName
                    End If
                    Set oComboItem = Me.cboCurrFolder.ComboItems.Add(, , "(" + oDrive.DriveLetter + ":) " + sVolume, 20, , 0)
                    oComboItem.Tag = oDrive.path
                    iIndxCnt = iIndxCnt + 1
                    m_RootIndexColl.Add iIndxCnt, oComboItem.Text
                End If
            Case oDrive.DriveType = Removable
                If Not bIsXenApp Then
                    If Not m_FloppyChecked Then
                        m_FloppyReady = oDrive.IsReady
                        m_FloppyChecked = True
                    End If
                    If m_FloppyReady Then
                        sVolume = oDrive.VolumeName
                    Else
                        sVolume = Lang(1468)
                    End If
                    Set oComboItem = Me.cboCurrFolder.ComboItems.Add(, , "(" + oDrive.DriveLetter + ":) " + sVolume, 19, , 0)
                    oComboItem.Tag = oDrive.path
                    iIndxCnt = iIndxCnt + 1
                    m_RootIndexColl.Add iIndxCnt, oComboItem.Text
                End If
        End Select
    Next oDrive
    
    ' Initialize Network Drives (using Wscript.Network object instead of FileSystemObject)
    InitNetworkDrives oFileSys, iIndxCnt
    
    If sNewPath <> "" And theRootIndex > 0 Then
        Me.cboCurrFolder.ComboItems(theRootIndex).Selected = True
        If InStr(sNewPath, Me.cboCurrFolder.SelectedItem.Tag) = 1 Then
            sNewPath = Right(sNewPath, Len(sNewPath) - Len(Me.cboCurrFolder.SelectedItem.Tag))
        End If
        vTmp = Split(sNewPath, "\")
        For iCnt = LBound(vTmp) + 1 To UBound(vTmp)
            Set oComboItem = Me.cboCurrFolder.ComboItems.Add(Me.cboCurrFolder.SelectedItem.index + 1, , vTmp(iCnt), 11, , Me.cboCurrFolder.SelectedItem.Indentation + 1)
            oComboItem.Tag = Me.cboCurrFolder.SelectedItem.Tag + "\" + vTmp(iCnt)
            oComboItem.Selected = True
        Next iCnt
    Else
        Me.cboCurrFolder.ComboItems(1).Selected = True
    End If
    
    Me.cboCurrFolder.Locked = True
End Sub

Private Sub InitNetworkDrives(ByRef oFileSys As Scripting.FileSystemObject, ByRef iIndxCnt As Integer)
    Dim objNetwork As Object
    Dim objDrives As Object
    Dim iCnt As Integer
    Dim sPath As String
    Dim sDrvLet As String
    Dim sTmpText As String
    Dim oComboItem As ComboItem
    Dim sTmpKey As String
    Dim aPath As Variant
    Dim sOnStr As String
    
    Set objNetwork = CreateObject("WScript.Network")
    Set objDrives = objNetwork.EnumNetworkDrives
    For iCnt = 0 To objDrives.Count - 1 Step 2
        ' Get Drive Path
        sPath = objDrives.Item(iCnt + 1)
        ' Check if path exists, we don't want a drive whose path does not exist
        If oFileSys.FolderExists(sPath) Then
            ' Get Drive Letter
            sDrvLet = objDrives.Item(iCnt)
            ' Check if no drive letter specified
            If sDrvLet = "" Then
                ' Parse Drive letter from Path
                sDrvLet = Replace(Split(sPath, "\")(3), "$", ":")
                ' Compose Item Text
                sTmpText = "Network Drive (" & sDrvLet & IIf(IsFR, " sur locale)", " on Local)")
            Else
                aPath = Split(sPath, "\")
                sOnStr = oFileSys.GetParentFolderName(sPath)
                ' Parent Folder name returns empty if the folder is in the root so check if empty
                If sOnStr = "" Then
                    ' Use the 3nd element of split path, this will give the host name
                    sOnStr = aPath(2)
                End If
                ' Compose Item Text
                sTmpText = aPath(UBound(aPath)) & " (" & sDrvLet & IIf(IsFR, " sur ", " on ") & sOnStr & ")"
            End If
            ' Compose the Key
            sTmpKey = objDrives.Item(iCnt) & objDrives.Item(iCnt + 1)
            ' Add an item in the ImageComboBox
            Set oComboItem = Me.cboCurrFolder.ComboItems.Add(, sTmpKey, sTmpText, 21, , 0)
            ' Set the Path in the item's Tag property
            oComboItem.Tag = sPath
            ' Add an entry in the Root Index Collection
            iIndxCnt = iIndxCnt + 1
            m_RootIndexColl.Add iIndxCnt, oComboItem.Text
        End If
    Next iCnt
End Sub

Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    ClearRaised
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
On Error Resume Next
    Me.Hide
    Cancel = Not m_ForceClose
End Sub

Private Sub ClearRaised()
    Me.imgBtn1.SpecialEffect = fmSpecialEffectFlat
    Me.imgBtn2.SpecialEffect = fmSpecialEffectFlat
    Me.imgBtn3.SpecialEffect = fmSpecialEffectFlat
    Me.imgBtn4.SpecialEffect = fmSpecialEffectFlat
End Sub

Public Sub SetDatabasePath(ByVal theDBPath As String)
    m_DatabasePath = theDBPath
End Sub

Public Sub RefreshListView(Optional ByVal thePath As String = "", Optional ByVal theQuery As String = "", Optional ByVal theViewPlanner As String, Optional ByVal theSelItemText As String, Optional ByVal bSelItemIsFolder As Boolean = False)
    Dim sSQL As String
    Dim vTmp As Variant
    Dim iCnt As Integer
    Dim oListItem As ListItem
    Dim iIconIndx As Integer
    Dim sWhere As String
    Dim bFromDB As Boolean
    Dim sPlannerName As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim oFolder As Scripting.Folder
    Dim oFile As Scripting.File
    Dim bSaveMode As Boolean
    Dim sExt As String
    Dim sThouSep As String
    Dim oSelItem As ListItem
    
    Application.Cursor = xlWait
    
    sThouSep = IIf(IsFR, " ", ",")
    bSaveMode = (InStr(1, Me.cmdOK.Caption, Lang(280), vbTextCompare) > 0)
    bFromDB = (FindRootIndex = 1)
    
    Me.tbrMisc.Buttons("btnTools").ButtonMenus("mnuQuery").Enabled = bFromDB
    
    Select Case True
        Case bFromDB
        
            m_CurrViewIsDB = True
            
            m_ViewPlanner = theViewPlanner
            
            If Not AllowedToUseDB Then
                Me.lvwFiles.ListItems.Clear
                MsgBox Lang(281), vbExclamation, m_ProgName
                Application.Cursor = xlDefault
                Exit Sub
            End If
            
            If theQuery = "" Then
                thePath = IIf(thePath = "", "IS NULL OR Path = ''", " = '" + Replace(thePath, "'", "''") + "'")
                sWhere = "WHERE (Path " + thePath + ") "
                
                If IsDBShared Then
                    If GetSettingsTable("ListAllClientFiles", "No") = "No" Then
                        ' Get the planner name
                        sPlannerName = GetPlannerName
                        sWhere = sWhere + " AND (Creator = '" + Replace(sPlannerName, "'", "''") + "') "
                    Else
                        ' Check if not root
                        If thePath <> "IS NULL OR Path = ''" Then 'Or bSaveMode Then
                            ' Planner Name is the current folder's planner
                            sPlannerName = IIf(theViewPlanner = "", GetPlannerName, theViewPlanner)
                            sWhere = sWhere + " AND (Creator = '" + Replace(sPlannerName, "'", "''") + "') "
                        End If
                    End If
                Else
                    ' Check if not root
                    If thePath <> "IS NULL OR Path = ''" Then 'Or bSaveMode Then
                        ' Planner Name is the current folder's planner
                        sPlannerName = IIf(theViewPlanner = "", GetPlannerName, theViewPlanner)
                        sWhere = sWhere + " AND (Creator = '" + Replace(sPlannerName, "'", "''") + "') "
                    End If
                End If
                       
                Select Case Me.cboFileType.ListIndex
                    Case 1
                        sWhere = sWhere + " AND (Type IS NULL OR Type = '' OR Type = '.')"
                    Case 2
                        sWhere = sWhere + " AND (Type = '.DFF' OR Type = '.')"
                End Select
                                
                sSQL = "SELECT ID,ClientName,ClientFileID,DateModified,PlanDate,StartOfPlan,Lock,Creator,ModifiedBy,Path,Type,CheckOut FROM tbClients " + sWhere + " ORDER BY DateModified DESC"
            Else
                sSQL = theQuery
            End If
            
            vTmp = ExecuteSQL(sSQL)
                                                
            Me.lvwFiles.ListItems.Clear
            Me.lvwFiles.ColumnHeaders(3).Width = 80
            Me.lvwFiles.ColumnHeaders(4).Width = 80
            Me.lvwFiles.ColumnHeaders(5).Width = 98
            Me.lvwFiles.ColumnHeaders(6).Width = IIf(IsUsingLargeDatabase, 0, 98)
            Me.lvwFiles.ColumnHeaders(7).Width = 0
            Me.lvwFiles.ColumnHeaders(8).Width = IIf(IsUsingLargeDatabase, 0, 98)
            Me.lvwFiles.ColumnHeaders(18).Width = 98
            
            If IsArray(vTmp) Then
                For iCnt = LBound(vTmp, 2) To UBound(vTmp, 2)
                    Select Case True
                        Case RemoveNull(vTmp(10, iCnt)) = "."
                            iIconIndx = 11
                        Case RemoveNull(vTmp(6, iCnt)) <> ""
                            iIconIndx = 10
                        Case RemoveNull(vTmp(11, iCnt)) <> ""
                            iIconIndx = 24
                        Case Else
                            iIconIndx = 9
                    End Select
                    Set oListItem = Me.lvwFiles.ListItems.Add(, , vTmp(1, iCnt), , iIconIndx)
                    oListItem.SubItems(1) = RemoveNull(vTmp(3, iCnt))
                    If iIconIndx <> 11 Then
                        oListItem.SubItems(2) = Format(RemoveNull(vTmp(4, iCnt)), IIf(IsFrench, "yyyy-mm-dd", "MMMM DD, YYYY"))
                        oListItem.SubItems(3) = Format(RemoveNull(vTmp(5, iCnt)), IIf(IsFrench, "yyyy-mm-dd", "MMMM DD, YYYY"))
                        If oListItem.SubItems(1) <> "" Then
                            oListItem.SubItems(12) = StringPaddedDate(CDate(vTmp(3, iCnt)))
                        End If
                        If oListItem.SubItems(2) <> "" Then
                            oListItem.SubItems(13) = StringPaddedDate(CDate(vTmp(4, iCnt)))
                        End If
                        oListItem.SubItems(15) = "B " + oListItem.Text
                        oListItem.SubItems(16) = Lang(282)
                    Else
                        oListItem.SubItems(15) = "A " + oListItem.Text
                        oListItem.SubItems(16) = " " + Lang(283)
                    End If
                    oListItem.SubItems(4) = RemoveNull(vTmp(6, iCnt))
                    oListItem.SubItems(5) = RemoveNull(vTmp(7, iCnt))
                    oListItem.SubItems(7) = RemoveNull(vTmp(8, iCnt))
                    oListItem.SubItems(8) = vTmp(0, iCnt)
                    oListItem.SubItems(9) = RemoveNull(vTmp(2, iCnt))
                    oListItem.SubItems(10) = RemoveNull(vTmp(9, iCnt))
                    oListItem.SubItems(11) = RemoveNull(vTmp(10, iCnt))
                    oListItem.SubItems(17) = RemoveNull(vTmp(11, iCnt))
                Next iCnt
            End If
        Case Else
            
            m_CurrViewIsDB = False
            
            Me.lvwFiles.ListItems.Clear
            Me.lvwFiles.ColumnHeaders(3).Width = 0
            Me.lvwFiles.ColumnHeaders(4).Width = 0
            Me.lvwFiles.ColumnHeaders(5).Width = 0
            Me.lvwFiles.ColumnHeaders(6).Width = 0
            Me.lvwFiles.ColumnHeaders(7).Width = 88
            Me.lvwFiles.ColumnHeaders(8).Width = 0
            Me.lvwFiles.ColumnHeaders(18).Width = 0
            
            If oFileSys.GetDrive(oFileSys.GetDriveName(Me.cboCurrFolder.SelectedItem.Tag)).IsReady Then
                On Error Resume Next
                For Each oFolder In oFileSys.GetFolder(Me.cboCurrFolder.SelectedItem.Tag + "\").SubFolders
                    If Err.Number > 0 Then
                        Err.Clear
                        Exit For
                    End If
                    Set oListItem = Me.lvwFiles.ListItems.Add(, , oFolder.name, , 11)
                    oListItem.SubItems(10) = oFolder.path
                    'oListItem.SubItems(6) = oFolder.Size
                    oListItem.SubItems(1) = oFolder.DateLastModified
                    oListItem.SubItems(12) = "A " + StringPaddedDate(CDate(oFolder.DateLastModified))
                    oListItem.SubItems(15) = "A " + oListItem.Text
                    oListItem.SubItems(16) = " " + Lang(283)
                    If oListItem.Text = theSelItemText And bSelItemIsFolder Then
                        Set oSelItem = oListItem
                    End If
                Next oFolder
                For Each oFile In oFileSys.GetFolder(Me.cboCurrFolder.SelectedItem.Tag + "\").Files
                    If Err.Number > 0 Then
                        Err.Clear
                        Exit For
                    End If
                    sExt = UCase(oFileSys.GetExtensionName(oFile.name))
                    Select Case Me.cboFileType.ListIndex
                        Case 0
                            If (sExt = "XLS") Or (sExt = "DFF") Then
                                Set oListItem = Me.lvwFiles.ListItems.Add(, , oFile.name, , IIf(sExt = "DFF", 23, 17))
                                oListItem.SubItems(1) = oFile.DateLastModified
                                oListItem.SubItems(12) = "B " + StringPaddedDate(CDate(oFile.DateLastModified))
                                oListItem.SubItems(6) = Format(oFile.Size, "#" + sThouSep + "### Bytes")
                                oListItem.SubItems(14) = StringPaddedNumber(oFile.Size)
                                oListItem.SubItems(11) = oFileSys.GetExtensionName(oFile.name)
                                oListItem.SubItems(10) = oFile.path
                                oListItem.SubItems(15) = "B " + oListItem.Text
                                Select Case sExt
                                    Case "XLS"
                                        oListItem.SubItems(16) = "Microsoft Excel"
                                    Case "DFF"
                                        oListItem.SubItems(16) = Lang(284)
                                End Select
                            End If
                        Case 1
                            If sExt = "XLS" Then
                                Set oListItem = Me.lvwFiles.ListItems.Add(, , oFile.name, , 17)
                                oListItem.SubItems(1) = oFile.DateLastModified
                                oListItem.SubItems(12) = "B " + StringPaddedDate(CDate(oFile.DateLastModified))
                                oListItem.SubItems(6) = Format(oFile.Size, "#" + sThouSep + "### Bytes")
                                oListItem.SubItems(14) = StringPaddedNumber(oFile.Size)
                                oListItem.SubItems(11) = oFileSys.GetExtensionName(oFile.name)
                                oListItem.SubItems(10) = oFile.path
                                oListItem.SubItems(15) = "B " + oListItem.Text
                                oListItem.SubItems(16) = "Microsoft Excel"
                            End If
                        Case 2
                            If sExt = "DFF" Then
                                Set oListItem = Me.lvwFiles.ListItems.Add(, , oFile.name, , 23)
                                oListItem.SubItems(1) = oFile.DateLastModified
                                oListItem.SubItems(12) = "B " + StringPaddedDate(CDate(oFile.DateLastModified))
                                oListItem.SubItems(6) = Format(oFile.Size, "#" + sThouSep + "### Bytes")
                                oListItem.SubItems(14) = StringPaddedNumber(oFile.Size)
                                oListItem.SubItems(11) = oFileSys.GetExtensionName(oFile.name)
                                oListItem.SubItems(10) = oFile.path
                                oListItem.SubItems(15) = "B " + oListItem.Text
                                oListItem.SubItems(16) = Lang(284)
                            End If
                    End Select
                    If Not oListItem Is Nothing Then
                        If oListItem.Text = theSelItemText And (Not bSelItemIsFolder) Then
                            Set oSelItem = oListItem
                        End If
                    End If
                Next oFile
            End If
    End Select
    
    Me.lvwFiles.MultiSelect = False
    Set Me.lvwFiles.SelectedItem = Nothing
    Set Me.lvwFiles.DropHighlight = Nothing
    If Not oSelItem Is Nothing Then
        oSelItem.Selected = True
        Me.lvwFiles.SetFocus
    End If
    Me.lvwFiles.MultiSelect = True
    
    If Me.txtFilename.Locked Then
        Me.txtFilename.Text = ""
    End If
    Application.Cursor = xlDefault
End Sub

Private Sub AddFolder()
    Dim oListItem As ListItem
    Dim sFolderName As String
    Dim sSQL As String
    Dim sPlannerName As String
    Dim sPath As String
    Dim sModified As String
    Dim iRecAffect As Integer
    Dim sClientFileID As String
    Dim bFromDB As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    Dim oFolder As Scripting.Folder
    
    bFromDB = (FindRootIndex = 1)
    If bFromDB Then
        If AllowedToUseDB Then
            sPath = IIf(Me.cboCurrFolder.SelectedItem.Tag = "", "NULL", "'" + Replace(Me.cboCurrFolder.SelectedItem.Tag, "'", "''") + "'")
            If Len(sPath) < 255 Then
                sPlannerName = IIf(m_ViewPlanner = "", GetPlannerName, m_ViewPlanner)
                sFolderName = GetNewFolderName
                sClientFileID = "NF" + Format(CreateClientFileID("NF"), "00000")
                sModified = CStr(Now)
                sSQL = "INSERT INTO tbClients (ClientName,ClientFileID,DateModified,Creator,Path,Type) VALUES ('" + sFolderName + "','" + sClientFileID + "','" + sModified + "','" + Replace(sPlannerName, "'", "''") + "'," + sPath + ",'.')"
                iRecAffect = ExecuteSQL(sSQL)
                If iRecAffect > 0 Then
                    Me.lvwFiles.SetFocus
                    Set oListItem = Me.lvwFiles.ListItems.Add(, , sFolderName, , 11)
                    oListItem.SubItems(1) = Format(sModified, IIf(IsFrench, "yyyy-mm-dd", "MMMM DD, YYYY"))
                    oListItem.SubItems(5) = sPlannerName
                    oListItem.SubItems(10) = Me.cboCurrFolder.SelectedItem.Tag
                    oListItem.SubItems(9) = sClientFileID
                    m_NewFolder = True
                    Me.lvwFiles.MultiSelect = False
                    oListItem.Selected = True
                    Me.lvwFiles.MultiSelect = True
                    oListItem.EnsureVisible
                    Me.lvwFiles.StartLabelEdit
                End If
            Else
                MsgBox Lang(285), vbExclamation, m_ProgName
            End If
        End If
    Else
        ' From File
        sFolderName = GetNewFolderName
        On Error Resume Next
        Set oFolder = oFileSys.CreateFolder(Me.cboCurrFolder.SelectedItem.Tag + "\" + sFolderName)
        If oFileSys.FolderExists(oFolder.path) Then
            Me.lvwFiles.SetFocus
            Set oListItem = Me.lvwFiles.ListItems.Add(, , sFolderName, , 11)
            oListItem.SubItems(1) = Format(sModified, IIf(IsFrench, "yyyy-mm-dd", "MMMM DD, YYYY"))
            oListItem.SubItems(5) = sPlannerName
            oListItem.SubItems(10) = Me.cboCurrFolder.SelectedItem.Tag
            oListItem.SubItems(9) = sClientFileID
            m_NewFolder = True
            Me.lvwFiles.MultiSelect = False
            oListItem.Selected = True
            Me.lvwFiles.MultiSelect = True
            oListItem.EnsureVisible
            Me.lvwFiles.StartLabelEdit
        End If
    End If
End Sub

Private Sub RenameItem()
    m_NewFolder = False
    If Not Me.lvwFiles.SelectedItem Is Nothing Then
    
        If m_CurrViewIsDB Then
            If CheckReadOnlyLock Then
                If MsgBox(Lang(286), vbYesNo + vbExclamation + vbDefaultButton2, m_ProgName) = vbNo Then
                    Exit Sub
                End If
            End If
        Else
            If CheckReadOnly Then
                If MsgBox(Lang(287), vbYesNo + vbExclamation + vbDefaultButton2, m_ProgName) = vbNo Then
                    Exit Sub
                End If
            End If
        End If
        
        Me.lvwFiles.SelectedItem.EnsureVisible
        Me.lvwFiles.StartLabelEdit
    End If
End Sub

Private Function GetNewFolderName() As String
    Dim sNum As String
    Dim iCnt As Integer
    Dim bFromDB As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sTmp As String
    Dim sPlanner As String
    
    bFromDB = (FindRootIndex = 1)
    sPlanner = GetPlannerName
    
StartLoop:
    Do Until Me.lvwFiles.FindItem(Lang(288) + sNum) Is Nothing
        iCnt = iCnt + 1
        sNum = " (" + CStr(iCnt) + ")"
    Loop
    sTmp = Lang(288) + sNum
    If bFromDB Then
        If Not IsUniquePath(Me.cboCurrFolder.SelectedItem.Tag, sTmp, sPlanner) Then
            RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner
            iCnt = iCnt + 1
            sNum = " (" + CStr(iCnt) + ")"
            GoTo StartLoop
        End If
    Else
        If oFileSys.FolderExists(Me.cboCurrFolder.SelectedItem.Tag + "\" + sTmp) Then
            RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner
            iCnt = iCnt + 1
            sNum = " (" + CStr(iCnt) + ")"
            GoTo StartLoop
        End If
    End If
    
    GetNewFolderName = sTmp
End Function

Private Function FilePathExists(ByVal thePath As String, ByVal theName As String, Optional ByVal bFromDB As Variant) As Boolean
    Dim sSQL As String
    Dim vTmp As Variant
    Dim sPath As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sPlanner As String
    
    If IsMissing(bFromDB) Then
        bFromDB = (FindRootIndex = 1)
    End If
    
    If bFromDB Then
        sPlanner = Replace(GetPlannerName, "'", "''")
        sPath = IIf(thePath = "", " (Path IS NULL OR Path = '') ", " Path = '" + Replace(thePath, "'", "''") + "' ")
        sSQL = "SELECT ID FROM tbClients WHERE ClientName = '" + Replace(theName, "'", "''") + "' AND " + sPath + " AND Creator = '" + sPlanner + "'"
        vTmp = ExecuteSQL(sSQL)
        FilePathExists = IsArray(vTmp)
    Else
        If oFileSys.FolderExists(thePath + "\" + theName) Then
            FilePathExists = True
        Else
            FilePathExists = oFileSys.FileExists(thePath + "\" + theName)
        End If
    End If
End Function

Private Function FindRootIndex() As Integer
    Dim oComboItem As ComboItem
    
    Set oComboItem = Me.cboCurrFolder.SelectedItem
    Do Until oComboItem.Indentation = 0 Or (oComboItem.index - 1) <= 0
        Set oComboItem = Me.cboCurrFolder.ComboItems(oComboItem.index - 1)
    Loop
    Select Case oComboItem.Text
        Case Lang(1465)
            FindRootIndex = 1
        Case Lang(290)
            FindRootIndex = 2
        Case Lang(289)
            FindRootIndex = 3
        Case Lang(291)
            FindRootIndex = 4
        Case Lang(1466)
            FindRootIndex = 5
        Case Else
            If Not m_RootIndexColl Is Nothing Then
                If Me.imgBtn1.Enabled Then
                    FindRootIndex = m_RootIndexColl(oComboItem.Text)
                Else
                    FindRootIndex = m_RootIndexColl(oComboItem.Text) + 1
                End If
            End If
    End Select
End Function

Private Sub GoUpOneLevel()
    If Me.cboCurrFolder.SelectedItem.Indentation > 0 Then
        If Me.cboCurrFolder.SelectedItem.index - 1 > 0 Then
            Me.cboCurrFolder.ComboItems(Me.cboCurrFolder.SelectedItem.index - 1).Selected = True
            RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner
        End If
    End If
End Sub

Private Sub DeleteItems()
On Error GoTo Err_Trap

    Dim oListItem As ListItem
    Dim bFromDB As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    Dim vErr As Variant
    
    bFromDB = (FindRootIndex = 1)
    
    If bFromDB Then
        If CheckReadOnlyLock Then
            If MsgBox(Lang(292), vbYesNo + vbExclamation + vbDefaultButton2, m_ProgName) = vbNo Then
                Exit Sub
            End If
        End If
    Else
        If CheckReadOnly Then
            If MsgBox(Lang(293), vbYesNo + vbExclamation + vbDefaultButton2, m_ProgName) = vbNo Then
                Exit Sub
            End If
        End If
    End If
    
    If Not Me.lvwFiles.SelectedItem Is Nothing Then
        If MsgBox(Lang(294) + vbLf + Lang(295) + vbLf + Lang(296), vbYesNo + vbDefaultButton2 + vbQuestion, m_ProgName) = vbYes Then
            For Each oListItem In Me.lvwFiles.ListItems
                If oListItem.Selected Then
                    If oListItem.SmallIcon = 11 Then
                        If bFromDB Then
                            If Not DeleteFolderFromDB(Me.cboCurrFolder.SelectedItem.Tag + "\" + oListItem.Text, oListItem.SubItems(9)) Then
                                Exit For
                            End If
                        Else
                            If oFileSys.GetFolder(Me.cboCurrFolder.SelectedItem.Tag + "\" + oListItem.Text).Files.Count > 0 Or oFileSys.GetFolder(Me.cboCurrFolder.SelectedItem.Tag + "\" + oListItem.Text).SubFolders.Count > 0 Then
                                MsgBox Lang(297) + vbLf + Lang(298), vbExclamation, m_ProgName
                            Else
                                On Error Resume Next
                                oFileSys.DeleteFolder Me.cboCurrFolder.SelectedItem.Tag + "\" + oListItem.Text, True
                                If Err.Number > 0 Then
                                    MsgBox Err.Description, vbExclamation, m_ProgName
                                    Err.Clear
                                End If
                            End If
                        End If
                    Else
                        If bFromDB Then
                            DeleteFileFromDB oListItem.SubItems(9)
                        Else
                            oFileSys.DeleteFile Me.cboCurrFolder.SelectedItem.Tag + "\" + oListItem.Text
                        End If
                    End If
                End If
            Next oListItem
            RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner
        End If
    End If
Exit Sub
Err_Trap:
    MsgBox Err.Description, vbExclamation, m_ProgName
    Resume Next
End Sub

Private Sub DeleteFileFromDB(ByVal theClientFileID As String)
On Error GoTo Err_Trap
    Dim sSQL As String
    Dim iRecAffect As Integer
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sDataFolder As String
    
    sDataFolder = GetDataFolder
    If oFileSys.FileExists(sDataFolder + "\" + theClientFileID + STR_DATAFILE_EXT) Then
        oFileSys.DeleteFile sDataFolder + "\" + theClientFileID + STR_DATAFILE_EXT, True
    End If
    sSQL = "DELETE FROM tbClients WHERE ClientFileID = '" + theClientFileID + "'"
    iRecAffect = ExecuteSQL(sSQL)
    If iRecAffect > 0 Then
        sSQL = "DELETE FROM tbData WHERE ClientFileID = '" + theClientFileID + "'"
        iRecAffect = ExecuteSQL(sSQL)
        sSQL = "DELETE FROM tbDependents WHERE ClientFileID = '" + theClientFileID + "'"
        iRecAffect = ExecuteSQL(sSQL)
    End If
Exit Sub
Err_Trap:
    MsgBox Err.Description + " in 'DeleteFileFromDB'", vbExclamation, m_ProgName
End Sub

Private Function DeleteFolderFromDB(ByVal theFolderPath As String, ByVal theFolderID As String) As Boolean
    Dim sSQL As String
    Dim sWhere As String
    Dim vTmp As Variant
    Dim iRecAffect As Integer
    
    sWhere = " WHERE Path " + IIf(theFolderPath = "", " IS NULL ", " = '" + Replace(theFolderPath, "'", "''") + "' ")
    If m_ViewPlanner <> "" Then
        sWhere = sWhere + " AND Creator = '" + m_ViewPlanner + "' "
    End If
    sSQL = "SELECT ID FROM tbClients " + sWhere
    vTmp = ExecuteSQL(sSQL)
    If IsArray(vTmp) Then
        MsgBox Lang(297) + vbLf + Lang(298), vbExclamation, m_ProgName
        DeleteFolderFromDB = False
    Else
        sSQL = "DELETE FROM tbClients WHERE ClientFileID = '" + theFolderID + "'"
        iRecAffect = ExecuteSQL(sSQL)
        If iRecAffect > 0 Then
            InitImageCombo Me.cboCurrFolder.SelectedItem.Tag, FindRootIndex
        End If
        DeleteFolderFromDB = True
    End If
End Function

Private Sub MoveFiles(ByVal theTargetPath As String, ByVal theTargetPlanner As String)
    Dim sSQL As String
    Dim oListItem As ListItem
    Dim iRecAffect As Integer
    Dim sCFID As String
    Dim bFileExists As Boolean
    Dim iResp As MsgBoxAllRespTypes
    Dim bFromDB As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sModified As String
    
    bFromDB = (FindRootIndex = 1)
    
    For Each oListItem In Me.lvwFiles.ListItems
        If oListItem.Selected Then
            ' If item is folder
            If oListItem.SmallIcon = 11 Then
                If bFromDB Then
                    ' Move Folders (and contents)
                    MoveFoldersAndContents Me.cboCurrFolder.SelectedItem.Tag, oListItem.Text, theTargetPath, oListItem.SubItems(9), m_ViewPlanner, theTargetPlanner
                Else
                    ' From Files
                    On Error Resume Next
                    If oFileSys.FolderExists(oFileSys.GetParentFolderName(theTargetPath) + "\" + oListItem.Text) Then
                        MsgBox Replace(Lang(299), "%FOLDER%", oListItem.Text), vbExclamation, m_ProgName
                    Else
                        If Me.cboCurrFolder.SelectedItem.Tag + "\" + oListItem.Text = oFileSys.GetParentFolderName(theTargetPath) Then
                            MsgBox Lang(52), vbExclamation, m_ProgName
                        Else
                            oFileSys.MoveFolder Me.cboCurrFolder.SelectedItem.Tag + "\" + oListItem.Text, oFileSys.GetParentFolderName(theTargetPath) + "\" + oListItem.Text
                        End If
                    End If
                End If
            Else
                If bFromDB Then
                    bFileExists = FileExists(theTargetPath, oListItem.Text, theTargetPlanner, , sCFID, sModified)
                    If bFileExists Then
                        If iResp = MSGBX_NO Or iResp = MSGBX_YES Then
                            iResp = MsgBoxReplace(oListItem.Text, oListItem.SubItems(1), sModified)
                        End If
                    End If
                    If iResp = MSGBX_YES Or iResp = MSGBX_YESALL Then
                        If bFileExists Then
                            DeleteFileFromDB sCFID
                        End If
                        sSQL = "UPDATE tbClients SET Path = '" + Replace(theTargetPath, "'", "''") + "',Creator = '" + Replace(theTargetPlanner, "'", "''") + "' WHERE ClientFileID = '" + oListItem.SubItems(9) + "'"
                        iRecAffect = ExecuteSQL(sSQL)
                    End If
                    If iResp = MSGBX_CANCEL Then
                        Exit For
                    End If
                Else
                    ' From Files
                    On Error Resume Next
                    bFileExists = oFileSys.FileExists(oFileSys.GetParentFolderName(theTargetPath) + "\" + oListItem.Text)
                    If bFileExists Then
                        If iResp = MSGBX_NO Or iResp = MSGBX_YES Then
                            iResp = MsgBoxReplace(oListItem.Text, CStr(oFileSys.GetFile(oListItem.SubItems(10)).DateLastModified), oFileSys.GetFile(Me.cboCurrFolder.SelectedItem.Tag + "\" + oListItem.Text).DateLastModified, 1)
                        End If
                    End If
                    If iResp = MSGBX_YES Or iResp = MSGBX_YESALL Then
                        If bFileExists Then
                            oFileSys.DeleteFile oFileSys.GetParentFolderName(theTargetPath) + "\" + oListItem.Text, True
                        End If
                        oFileSys.MoveFile Me.cboCurrFolder.SelectedItem.Tag + "\" + oListItem.Text, oFileSys.GetParentFolderName(theTargetPath) + "\" + oListItem.Text
                    End If
                    If iResp = MSGBX_CANCEL Then
                        Exit For
                    End If
                End If
            End If
        End If
    Next oListItem
End Sub

Private Sub CutItems()
    Dim oListItem As ListItem
    Dim bFromDB As Boolean
    
    bFromDB = (FindRootIndex = 1)
    If Not Me.lvwFiles.SelectedItem Is Nothing Then
    
        If bFromDB Then
            If CheckReadOnlyLock Then
                If MsgBox(Lang(53), vbYesNo + vbExclamation + vbDefaultButton2, m_ProgName) = vbNo Then
                    Exit Sub
                End If
            End If
        Else
            If CheckReadOnly Then
                If MsgBox(Lang(54), vbYesNo + vbExclamation + vbDefaultButton2, m_ProgName) = vbNo Then
                    Exit Sub
                End If
            End If
        End If

        Set m_SelectedItems = New Collection
        For Each oListItem In Me.lvwFiles.ListItems
            If oListItem.Selected Then
                m_SelectedItems.Add oListItem.SubItems(9) + vbNullChar + CStr(oListItem.SmallIcon) + vbNullChar + Me.cboCurrFolder.SelectedItem.Tag + vbNullChar + oListItem.Text + vbNullChar + oListItem.SubItems(1) + vbNullChar + oListItem.SubItems(5)
                oListItem.Ghosted = True
            End If
        Next oListItem
        m_SelectedItems.Add bFromDB, "_SelectionIsFromDB_"
    End If
End Sub

Private Sub PasteItems()
    Dim sPath As String
    Dim sSQL As String
    Dim iRecAffect As Integer
    Dim iCnt As Integer
    Dim vTmp As Variant
    Dim iSmallIcon As Integer
    Dim sCFID As String
    Dim iResp As MsgBoxAllRespTypes
    Dim bFileExists As Boolean
    Dim sCFIDDel As String
    Dim bFromDB As Boolean
    Dim oFileSys  As New Scripting.FileSystemObject
    Dim sModified As String
    
    bFromDB = (FindRootIndex = 1)

    If Not m_SelectedItems Is Nothing Then
        
        If m_SelectedItems("_SelectionIsFromDB_") <> bFromDB Then
            MsgBox Lang(55) + vbLf + Lang(300), vbInformation, m_ProgName
            Exit Sub
        Else
            m_SelectedItems.Remove "_SelectionIsFromDB_"
        End If
        
        If MsgBox(Lang(50), vbYesNo + vbQuestion + vbDefaultButton2, m_ProgName) = vbYes Then
            sPath = Me.cboCurrFolder.SelectedItem.Tag
            sPath = IIf(sPath = "", "NULL", "'" + Replace(sPath, "'", "''") + "'")
            For iCnt = 1 To m_SelectedItems.Count
                vTmp = Split(m_SelectedItems(iCnt), vbNullChar)
                sCFID = CStr(vTmp(0))
                iSmallIcon = Val(vTmp(1))
                If CStr(vTmp(2)) <> Me.cboCurrFolder.SelectedItem.Tag Then
                    If iSmallIcon = 11 Then
                        If bFromDB Then
                            ' Move Folders (and contents) within DB
                            MoveFoldersAndContents CStr(vTmp(2)), CStr(vTmp(3)), Me.cboCurrFolder.SelectedItem.Tag, sCFID, CStr(vTmp(5)), IIf(m_ViewPlanner = "", CStr(vTmp(5)), m_ViewPlanner)
                        Else
                            ' From Files
                            On Error Resume Next
                            If oFileSys.FolderExists(Me.cboCurrFolder.SelectedItem.Tag + "\" + CStr(vTmp(3))) Then
                                MsgBox Replace(Lang(51), "%FILE%", CStr(vTmp(3))), vbExclamation, m_ProgName
                            Else
                                If InStr(1, Me.cboCurrFolder.SelectedItem.Tag, CStr(vTmp(2)) + "\" + CStr(vTmp(3)), vbTextCompare) > 0 Then
                                    MsgBox Lang(52), vbExclamation, m_ProgName
                                Else
                                    oFileSys.MoveFolder CStr(vTmp(2)) + "\" + CStr(vTmp(3)), Me.cboCurrFolder.SelectedItem.Tag + "\" + CStr(vTmp(3))
                                End If
                            End If
                        End If
                    Else
                        If bFromDB Then
                            ' From DB
                            bFileExists = FileExists(Me.cboCurrFolder.SelectedItem.Tag, CStr(vTmp(3)), IIf(m_ViewPlanner = "", CStr(vTmp(5)), m_ViewPlanner), , sCFIDDel, sModified)
                            If bFileExists Then
                                If iResp = MSGBX_NO Or iResp = MSGBX_YES Then
                                    iResp = MsgBoxReplace(CStr(vTmp(3)), vTmp(4), sModified)
                                End If
                            End If
                            If iResp = MSGBX_YES Or iResp = MSGBX_YESALL Then
                                If bFileExists Then
                                    DeleteFileFromDB sCFIDDel
                                End If
                                sSQL = "UPDATE tbClients SET Path = " + sPath + ",Creator = '" + IIf(m_ViewPlanner = "", CStr(vTmp(5)), m_ViewPlanner) + "' WHERE ClientFileID = '" + sCFID + "'"
                                iRecAffect = ExecuteSQL(sSQL)
                            End If
                            If iResp = MSGBX_CANCEL Then
                                Exit For
                            End If
                        Else
                            ' From File
                            On Error Resume Next
                            bFileExists = oFileSys.FileExists(Me.cboCurrFolder.SelectedItem.Tag + "\" + CStr(vTmp(3)))
                            If bFileExists Then
                                If iResp = MSGBX_NO Or iResp = MSGBX_YES Then
                                    iResp = MsgBoxReplace(CStr(vTmp(3)), vTmp(4), CStr(oFileSys.GetFile(sPath + "\" + vTmp(3)).DateLastModified), 1)
                                End If
                            End If
                            If iResp = MSGBX_YES Or iResp = MSGBX_YESALL Then
                                If bFileExists Then
                                    oFileSys.DeleteFile Me.cboCurrFolder.SelectedItem.Tag + "\" + CStr(vTmp(3)), True
                                End If
                                oFileSys.MoveFile CStr(vTmp(2)) + "\" + CStr(vTmp(3)), Me.cboCurrFolder.SelectedItem.Tag + "\" + CStr(vTmp(3))
                            End If
                            If iResp = MSGBX_CANCEL Then
                                Exit For
                            End If
                        End If
                    End If
                End If
            Next iCnt
            Set m_SelectedItems = Nothing
            RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner
        End If
    End If
End Sub

Private Sub MoveFoldersAndContents(ByVal theSrcPath As String, ByVal theFolderName As String, ByVal theTgtPath As String, ByVal theFolderID As String, ByVal theSourcePlanner As String, ByVal theTargetPlanner As String)
' Move folders and its contents, applies to database only
    Dim sSQL As String
    Dim vTmp As Variant
    Dim iCnt As Integer
    Dim sNewPath As String
    Dim iRecAffect As Integer
    Dim sCFID As String
    
    If UCase(theSourcePlanner) = UCase(theTargetPlanner) Then
        If InStr(1, theTgtPath, theSrcPath + "\" + theFolderName, vbTextCompare) > 0 Then
            MsgBox Lang(52), vbExclamation, m_ProgName
            Exit Sub
        End If
    End If
    
    If FolderExists(theTgtPath, theFolderName, theTargetPlanner) Then
        If MsgBox(Replace(Lang(56), "%FOLDER%", theFolderName), vbYesNoCancel + vbQuestion, m_ProgName) = vbNo Then
            Exit Sub
        End If
    End If
    
    ' Select contents of source folder
    sSQL = "SELECT ID,Path,Type,ClientName FROM tbClients WHERE Path LIKE '" + Replace(theSrcPath, "'", "''") + "\" + Replace(theFolderName, "'", "''") + "%' AND Creator = '" + Replace(theSourcePlanner, "'", "''") + "'"
    vTmp = ExecuteSQL(sSQL)
    If IsArray(vTmp) Then
        For iCnt = LBound(vTmp, 2) To UBound(vTmp, 2)
            ' Determine new path
            sNewPath = theTgtPath + "\" + theFolderName + Right(vTmp(1, iCnt), Len(vTmp(1, iCnt)) - Len(theSrcPath + "\" + theFolderName))
            ' Check if exists as target
            If Not IsUniquePath(sNewPath, vTmp(3, iCnt), theTargetPlanner) Then
                sSQL = "DELETE FROM tbClients WHERE " + IIf(sNewPath = "", "(Path IS NULL OR Path = '')", "Path = '" + Replace(sNewPath, "'", "''") + "'") + " AND ClientName = '" + Replace(vTmp(3, iCnt), "'", "''") + "' AND Creator = '" + Replace(theTargetPlanner, "'", "''") + "' AND ID <> " + CStr(vTmp(0, iCnt))
                iRecAffect = ExecuteSQL(sSQL)
            End If
            sSQL = "UPDATE tbClients SET Path = '" + Replace(sNewPath, "'", "''") + "',Creator = '" + Replace(theTargetPlanner, "'", "''") + "' WHERE ID = " + CStr(vTmp(0, iCnt))
            iRecAffect = ExecuteSQL(sSQL)
        Next iCnt
    End If
    If Not IsUniquePath(theTgtPath, theFolderName, theTargetPlanner, , sCFID) Then
        sSQL = "DELETE FROM tbClients WHERE ClientFileID = '" + sCFID + "'"
        iRecAffect = ExecuteSQL(sSQL)
    End If
    theTgtPath = IIf(theTgtPath = "", "NULL", "'" + Replace(theTgtPath, "'", "''") + "'")
    sSQL = "UPDATE tbClients SET Path = " + theTgtPath + ",Creator = '" + Replace(theTargetPlanner, "'", "''") + "' WHERE ClientFileID = '" + theFolderID + "'"
    iRecAffect = ExecuteSQL(sSQL)
End Sub

Private Sub InitTypeCombo()
    Me.cboFileType.Clear
    
    If IsCIBCWG Then
        Me.cboFileType.AddItem Replace(Lang(57), ",*.FPS", "")
        Me.cboFileType.AddItem Replace(Lang(58), ",*.FPS", "")
        Me.cboFileType.AddItem Replace(Lang(59), ",*.FPS", "")
        Application.EnableEvents = False
        Me.cboFileType.ListIndex = 1
        Application.EnableEvents = True
    Else
        Me.cboFileType.AddItem Lang(57)
        Me.cboFileType.AddItem Lang(58)
        Me.cboFileType.AddItem Lang(59)
        Application.EnableEvents = False
        Me.cboFileType.ListIndex = 0
        Application.EnableEvents = True
    End If
End Sub

Private Function FolderExists(ByVal theFindPath As String, ByVal theFolderName As String, ByVal thePlanner As String, Optional ByRef theID As Long, Optional ByRef theCFID As String, Optional ByRef theModifiedDate As String) As Boolean
    Dim sSQL As String
    Dim sPath As String
    Dim vTmp As Variant
    
    sPath = IIf(theFindPath = "", "(Path IS NULL OR Path = '') ", "Path = '" + Replace(theFindPath, "'", "''") + "' ")
    sSQL = "SELECT ID, ClientFileID, DateModified FROM tbClients WHERE " + sPath + " AND ClientName = '" + Replace(theFolderName, "'", "''") + "'" + IIf(thePlanner = "", "", " AND Creator = '" + Replace(thePlanner, "'", "''") + "'")
    vTmp = ExecuteSQL(sSQL)
    If IsArray(vTmp) Then
        theID = vTmp(0, 0)
        theCFID = vTmp(1, 0)
        theModifiedDate = CStr(RemoveNull(vTmp(2, 0)))
        FolderExists = True
    End If
End Function

Private Function FileExists(ByVal theFindPath As String, ByVal theFileName As String, ByVal thePlanner As String, Optional ByRef theID As Long, Optional ByRef theCFID As String, Optional ByRef theModifiedDate As String) As Boolean
    FileExists = FolderExists(theFindPath, theFileName, thePlanner, theID, theCFID, theModifiedDate)
End Function

Private Function MsgBoxReplace(ByVal theFileName As String, ByVal sModified1 As String, ByVal sModified2 As String, Optional ByVal theIconIndex As Integer = 2, Optional ByVal theTitle As String) As MsgBoxAllRespTypes
    Load frmYesNoAll
    If theTitle <> "" Then
        frmYesNoAll.Caption = theTitle
    End If
    If sModified1 <> "" Then
        If IsDate(sModified1) Then
            sModified1 = Format(sModified1, IIf(IsFrench, "yyyy-mm-dd HH:NN:SS AMPM", "MMMM DD, YYYY HH:NN:SS AMPM"))
        End If
    End If
    If sModified2 <> "" Then
        If IsDate(sModified2) Then
            sModified2 = Format(sModified2, IIf(IsFrench, "yyyy-mm-dd HH:NN:SS AMPM", "MMMM DD, YYYY HH:NN:SS AMPM"))
        End If
    End If
    frmYesNoAll.lblModified1.Caption = Lang(60) + sModified1
    frmYesNoAll.lblModified2.Caption = Lang(60) + sModified2
    frmYesNoAll.lblMessage.Caption = Replace(frmYesNoAll.lblMessage.Caption, "#FILENAME#", theFileName)
    frmYesNoAll.imgSrcIcon.Picture = frmYesNoAll.imgList.ListImages(theIconIndex).Picture
    frmYesNoAll.imgTargetIcon.Picture = frmYesNoAll.imgList.ListImages(theIconIndex).Picture
    frmYesNoAll.Show
    Select Case frmYesNoAll.m_ButtonClicked
        Case frmYesNoAll.cmdYes.Caption
            MsgBoxReplace = MSGBX_YES
        Case frmYesNoAll.cmdNo.Caption
            MsgBoxReplace = MSGBX_NO
        Case frmYesNoAll.cmdYesAll.Caption
            MsgBoxReplace = MSGBX_YESALL
        Case frmYesNoAll.cmdNoAll.Caption
            MsgBoxReplace = MSGBX_NOALL
        Case frmYesNoAll.cmdCancel.Caption
            MsgBoxReplace = MSGBX_CANCEL
    End Select
    m_ForceClose = True
    Unload frmYesNoAll
End Function

Public Function GetClientsFolder() As String
    Dim sPath As String
    Dim oFileSys As New Scripting.FileSystemObject
    
    sPath = GetSetting(PROG_NAME, GetSettingsKey, "DefaultPath", ThisWorkbook.path + "\client")
    If oFileSys.FolderExists(sPath) Then
        GetClientsFolder = sPath
    Else
        If oFileSys.FolderExists(ThisWorkbook.path + "\client") Then
            GetClientsFolder = ThisWorkbook.path + "\client"
        Else
            GetClientsFolder = "C:"
        End If
    End If
End Function

Private Function GetMyDocumentsFolder() As String
On Error GoTo Err_Trap

    Dim oFileSys As New Scripting.FileSystemObject
    Dim sPath As String
    Dim oShellScriptObj As Object
    
    Set oShellScriptObj = CreateObject("WScript.Shell")
    sPath = oShellScriptObj.SpecialFolders("mydocuments")

    If oFileSys.FolderExists(sPath) Then
        GetMyDocumentsFolder = sPath
    Else
        GetMyDocumentsFolder = "C:"
    End If
Exit Function
Err_Trap:
    GetMyDocumentsFolder = "C:"
End Function

Private Function GetDesktopFolder() As String
On Error GoTo Err_Trap

    Dim oFileSys As New Scripting.FileSystemObject
    Dim sPath As String
    Dim oShellScriptObj As Object
    
    Set oShellScriptObj = CreateObject("WScript.Shell")
    sPath = oShellScriptObj.SpecialFolders("desktop")

    If oFileSys.FolderExists(sPath) Then
        GetDesktopFolder = sPath
    Else
        GetDesktopFolder = "C:"
    End If
Exit Function
Err_Trap:
    GetDesktopFolder = "C:"
End Function

Public Sub InitSaveAs(Optional ByVal theTitle As String, Optional ByVal bEnableTools As Boolean = False, Optional ByVal bEnableImport As Boolean = False, Optional ByVal bEnableQuery As Boolean = False)
    Me.tbrMisc.Buttons("btnTools").Enabled = bEnableTools
    Me.tbrMisc.Buttons("btnTools").ButtonMenus("mnuImport").Enabled = bEnableImport
    Me.tbrMisc.Buttons("btnTools").ButtonMenus("mnuQuery").Enabled = bEnableQuery
    Me.Caption = IIf(theTitle = "", Lang(61), theTitle)
    Me.cmdOK.Caption = Lang(61) + "          "
    Me.cmdOK.Picture = Me.imgList.ListImages(5).Picture

    ' Init Customizations
    If IsCIBCWG Then
        Me.imgBtn3.Enabled = False
        Me.imgBtn4.Enabled = False
        Me.imgExports.Picture = Me.imgList32.ListImages(2).Picture
        Me.imgMyDocs.Picture = Me.imgList32.ListImages(3).Picture
        Me.cboFileType.ListIndex = 1
        Me.cboFileType.Enabled = False
        Me.lblExports.ForeColor = &H80000015
        Me.lblMyDocs.ForeColor = &H80000015
    End If
    
End Sub

Public Sub InitOpen(Optional ByVal theTitle As String, Optional ByVal bEnableTools As Boolean = True, Optional ByVal bEnableImport As Boolean = True, Optional ByVal bEnableQuery As Boolean = True)
    Me.tbrMisc.Buttons("btnTools").Enabled = bEnableTools
    Me.tbrMisc.Buttons("btnTools").ButtonMenus("mnuImport").Enabled = bEnableImport
    Me.tbrMisc.Buttons("btnTools").ButtonMenus("mnuQuery").Enabled = bEnableQuery
    Me.Caption = IIf(theTitle = "", Lang(62), theTitle)
    Me.cmdOK.Caption = Lang(62) + "          "
    Me.cmdOK.Picture = Me.imgList.ListImages(4).Picture
End Sub

Private Sub PerformQuery()
    Dim sWhere As String
    Dim sSQL As String
    Dim sSelect As String
    
    sSelect = "SELECT DISTINCTROW tbClients.ID,tbClients.ClientName,tbClients.ClientFileID,tbClients.DateModified,tbClients.PlanDate,tbClients.StartOfPlan,tbClients.Lock,tbClients.Creator,tbClients.ModifiedBy,tbClients.Path,tbClients.Type,tbClients.CheckOut FROM tbClients,tbData,tbDependents "
    sWhere = GetCriteria
    If sWhere <> "" Then
        RefreshListView , sSelect + sWhere
    End If
End Sub

Private Sub PerformImport()
    Dim bFromDB As Boolean
    Dim oListItem As ListItem
    Dim oColl As New Collection
    
    bFromDB = (FindRootIndex = 1)
    If bFromDB Then
        ' Just show Import Window and save files to current folder
        Me.Hide
        AltImport
    Else
        ' Pre-populate Import Window
        For Each oListItem In Me.lvwFiles.ListItems
            If oListItem.SmallIcon = 17 Then
                If oListItem.Selected Then
                    oColl.Add oListItem.Text + vbNullChar + Me.cboCurrFolder.SelectedItem.Tag
                End If
            End If
        Next oListItem
        Me.Hide
        AltImport oColl
    End If
    If Not Me.Visible Then
        DoEvents
        Me.Show
    End If
End Sub

Public Sub SetNoDatabase(ByVal bNoDatabase As Boolean)
    Me.imgBtn1.Enabled = Not bNoDatabase
    Me.lblDatabase.ForeColor = &H80000015
    Me.imgDBGrey.Visible = bNoDatabase
    Me.imgDatabase.Visible = Not bNoDatabase
    Me.tbrMisc.Buttons("btnTools").ButtonMenus("mnuImport").Enabled = Not bNoDatabase
    InitImageCombo
    RefreshListView Me.cboCurrFolder.SelectedItem.Tag, , m_ViewPlanner
End Sub

Public Sub SetNoImport(ByVal bNoImport As Boolean)
    Me.tbrMisc.Buttons("btnTools").ButtonMenus("mnuImport").Enabled = Not bNoImport
End Sub

Private Function InsertNewFile(ByVal theFileName As String) As String
    Dim bFromDB As Boolean
    Dim sPlannerName As String
    Dim sNewCFID As String
    Dim sSQL As String
    Dim sModified As String
    Dim sPath As String
    Dim sFileName As String
    Dim iRecAffect As Integer
    
    bFromDB = (FindRootIndex = 1)
    If bFromDB Then
        If m_PrefixID = "" Then
            m_PrefixID = "CF"
        End If
        sPath = IIf(Me.cboCurrFolder.SelectedItem.Tag = "", "NULL", "'" + Replace(Me.cboCurrFolder.SelectedItem.Tag, "'", "''") + "'")
        sFileName = Replace(theFileName, "'", "''")
        sPlannerName = GetPlannerName
        sModified = CStr(Now)
        sNewCFID = m_PrefixID + Format(CreateClientFileID(m_PrefixID), IIf(IsUsingLargeDatabase, "00000000", "00000"))
        sSQL = "INSERT INTO tbClients (ClientName,ClientFileID,DateModified,Creator,Path,Type) VALUES ('" + sFileName + "','" + sNewCFID + "','" + sModified + "','" + Replace(sPlannerName, "'", "''") + "'," + sPath + ",NULL)"
        iRecAffect = ExecuteSQL(sSQL)
        If iRecAffect > 0 Then
            InsertNewFile = sNewCFID
        End If
    End If
End Function

Private Sub SetupPopup()

    ' Customizations for CIBC Only
    If IsCIBCWG Then
        Exit Sub
    End If
    
    Dim oCtl As Object
    Set m_Popup = CommandBars.Add(, Position:=msoBarPopup, Temporary:=True)
    
    Set oCtl = m_Popup.Controls.Add(msoControlButton)
    oCtl.Caption = Lang(63)
    oCtl.OnAction = "SetClientFolderPath"
    
End Sub

Private Function FolderHasFileLocked(ByVal thePath As String, ByVal thePlanner As String, Optional ByVal theDBFilePath As String) As Boolean
    Dim sSQL As String
    Dim vArray As Variant
    sSQL = "SELECT ID FROM tbClients WHERE Path LIKE '" + Replace(thePath, "'", "''") + "%' AND ((NOT Lock IS NULL) OR (NOT Lock = '')) AND Creator = '" + Replace(thePlanner, "'", "''") + "'"
    vArray = ExecuteSQL(sSQL, theDBFilePath)
    FolderHasFileLocked = IsArray(vArray)
End Function

Private Function FolderHasFileCheckedOut(ByVal thePath As String, ByVal thePlanner As String, Optional ByVal theDBFilePath As String) As Boolean
    Dim sSQL As String
    Dim vArray As Variant
    sSQL = "SELECT ID FROM tbClients WHERE Path LIKE '" + Replace(thePath, "'", "''") + "%' AND ((NOT CheckOut IS NULL) OR (NOT CheckOut = '')) AND Creator = '" + Replace(thePlanner, "'", "''") + "'"
    vArray = ExecuteSQL(sSQL, theDBFilePath)
    FolderHasFileCheckedOut = IsArray(vArray)
End Function

Private Function CheckReadOnlyLock() As Boolean
    Dim oItem As ListItem
    Dim bRet As Boolean
    
    For Each oItem In Me.lvwFiles.ListItems
        If oItem.Selected Then
            If oItem.SmallIcon = 11 Then
                bRet = FolderHasFileLocked(Me.cboCurrFolder.SelectedItem.Tag + "\" + oItem.Text, oItem.SubItems(5))
                bRet = bRet Or FolderHasFileCheckedOut(Me.cboCurrFolder.SelectedItem.Tag + "\" + oItem.Text, oItem.SubItems(5))
            Else
                bRet = (IsLockedBy(oItem.SubItems(9)) <> "") Or (IsCheckedOutBy(oItem.SubItems(9)) <> "")
            End If
        End If
        If bRet Then
            Exit For
        End If
    Next oItem
    CheckReadOnlyLock = bRet
End Function

Private Function CheckReadOnly() As Boolean
    Dim oItem As ListItem
    Dim bRet As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    Dim oFolder As Folder
    Dim oFile As File
    
    For Each oItem In Me.lvwFiles.ListItems
        If oItem.Selected Then
            If oItem.SmallIcon = 11 Then
                Set oFolder = oFileSys.GetFolder(Me.cboCurrFolder.SelectedItem.Tag + "\" + oItem.Text)
                bRet = (oFolder.Attributes Mod 2 = ReadOnly)
            Else
                Set oFile = oFileSys.GetFile(Me.cboCurrFolder.SelectedItem.Tag + "\" + oItem.Text)
                bRet = (oFile.Attributes Mod 2 = ReadOnly)
            End If
        End If
        If bRet Then
            Exit For
        End If
    Next oItem
    CheckReadOnly = bRet
End Function
Attribute VB_Name = "frmImport"
Attribute VB_Base = "0{50AD51EF-A916-11E7-A061-000C2961E840}{50AD51C2-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public m_WalkThruImport As Boolean

Private m_Processing As Boolean
Private m_Abort As Boolean

Private Sub cmdAdd_Click()
    Dim vFile As Variant
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sFile As String
    Dim sPath As String
    Dim sModified As String
    Dim oListItem As ListItem
    Dim iCnt As Integer
    Dim oFindItem As ListItem
    
    GotoClientFolder
    vFile = Application.GetOpenFileName(Lang(128) + ",*.xls", 0, Lang(211), , True)
    If IsArray(vFile) Then
        For iCnt = LBound(vFile) To UBound(vFile)
            sFile = oFileSys.GetFileName(vFile(iCnt))
            sPath = oFileSys.GetParentFolderName(vFile(iCnt))
            sModified = CStr(oFileSys.GetFile(vFile(iCnt)).DateLastModified)
            Set oFindItem = Me.lvwFiles.FindItem(sFile)
            If Not oFindItem Is Nothing Then
                If oFindItem.SubItems(1) <> sPath Then
                    Set oListItem = Me.lvwFiles.ListItems.Add(, , sFile, , 1)
                    oListItem.SubItems(1) = sPath
                End If
            Else
                Set oListItem = Me.lvwFiles.ListItems.Add(, , sFile, , 1)
                oListItem.SubItems(1) = sPath
            End If
        Next iCnt
    Else
        If vFile <> False Then
            sFile = oFileSys.GetFileName(vFile)
            sPath = oFileSys.GetParentFolderName(vFile)
            sModified = CStr(oFileSys.GetFile(vFile(iCnt)).DateLastModified)
            Set oFindItem = Me.lvwFiles.FindItem(sFile)
            If Not oFindItem Is Nothing Then
                If oFindItem.SubItems(1) <> sPath Then
                    Set oListItem = Me.lvwFiles.ListItems.Add(, , sFile, , 1)
                    oListItem.SubItems(1) = sPath
                End If
            Else
                Set oListItem = Me.lvwFiles.ListItems.Add(, , sFile, , 1)
                oListItem.SubItems(1) = sPath
            End If
        End If
    End If
End Sub

Private Sub cmdCancel_Click()
    If m_Processing Then
        If MsgBox(Lang(212), vbQuestion + vbYesNo + vbDefaultButton2, PROG_NAME) = vbYes Then
            MsgBox Lang(213), vbInformation, PROG_NAME
            m_Abort = True
            cmdCancel.Enabled = False
        End If
    Else
        Unload Me
    End If
End Sub

Private Sub cmdRemove_Click()
    Dim iCnt As Integer
    
    iCnt = 1
    Do Until iCnt > Me.lvwFiles.ListItems.Count
        If Me.lvwFiles.ListItems(iCnt).Selected Then
            Me.lvwFiles.ListItems.Remove iCnt
        Else
            iCnt = iCnt + 1
        End If
    Loop
End Sub

Private Sub cmdStart_Click()
    Dim oListItem As ListItem
        
    If Me.lvwFiles.ListItems.Count = 0 Then
        MsgBox Lang(214), vbExclamation, PROG_NAME
        Exit Sub
    End If

    Application.Cursor = xlWait
    Me.Hide
    CloseClientFile
    Me.Show vbNormal

    cmdStart.Enabled = False
    cmdAdd.Enabled = False
    cmdRemove.Enabled = False
    m_Processing = True
        
    For Each oListItem In Me.lvwFiles.ListItems
        DoEvents
        oListItem.Selected = True
        If Not m_Abort Then
            If Import(oListItem.SubItems(1) + "\" + oListItem.Text, Me) Then
                ' Change the icon to its icon with a green check mark
                oListItem.SmallIcon = 2
            Else
                ' Change its icon with a red Exclamation and log the error message if applicable
                oListItem.SmallIcon = 3
            End If
        Else
            oListItem.SmallIcon = 3
        End If
        oListItem.Selected = False
        Set Me.lvwFiles.SelectedItem = Nothing
        Me.lvwFiles.Refresh
    Next oListItem
    
    m_Processing = False
    
    CloseStandardModules
    
    If Not m_Abort Then
        MsgBox Lang(215), vbInformation, PROG_NAME
    Else
        MsgBox Lang(216), vbExclamation, PROG_NAME
    End If
    
    Application.Cursor = xlDefault
    
    Unload Me
End Sub

Private Sub UserForm_Activate()
    If m_WalkThruImport Then
        Call cmdAdd_Click
        MsgBox Lang(217), vbInformation, PROG_NAME
    End If
End Sub

Private Sub UserForm_Initialize()
    Me.lvwFiles.SmallIcons = Me.imgList
    SetProgress 0
End Sub

Public Sub SetProgress(ByVal iPerCent As Integer)
    Dim dTmp As Double
    If iPerCent > 100 Then
        iPerCent = 100
    End If
    dTmp = (iPerCent / 100) * Me.imgBarBack.Width
    Me.imgBarColor.Width = dTmp
    Me.Repaint
End Sub
Attribute VB_Name = "frmLogin"
Attribute VB_Base = "0{50AD522F-A916-11E7-A061-000C2961E840}{50AD51E2-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public m_ForceClose As Boolean
Public m_ButtonClicked As String

Private Sub cmdCancel_Click()
    m_ButtonClicked = Me.cmdCancel.Caption
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    Dim tStatus As LoginStatusTypes
    
    If ValidateUser(Me.txtUserName.Text, Me.txtPassword.Text, tStatus) Then
        m_ButtonClicked = Me.cmdOK.Caption
        Me.Hide
    Else
        Select Case tStatus
            Case LoginStatusTypes.LOGIN_INCORRECT_PASSWORD
                MsgBox "The password entered is incorrect!", vbExclamation
            Case LoginStatusTypes.LOGIN_NO_SUCH_USER
                MsgBox "No such user exists.", vbExclamation
            Case LoginStatusTypes.LOGIN_USER_LOCKED_OUT
                MsgBox "The user account is locked out. Contact you system administrator.", vbExclamation
            Case Else
                MsgBox "User failed validation please try again!", vbExclamation
        End Select
    End If
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
On Error Resume Next
    Me.Hide
    Cancel = Not m_ForceClose
End Sub

Attribute VB_Name = "frmMultiAssign"
Attribute VB_Base = "0{50AD520F-A916-11E7-A061-000C2961E840}{50AD51D2-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public m_ForceClose As Boolean
Public m_ButtonClicked As String

Private Sub cmdCancel_Click()
    m_ButtonClicked = cmdCancel.Caption
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    If Me.optUsePWD.Value Then
        If Me.txtPassword.Text = "" Then
            MsgBox Lang(36), vbInformation, PROG_NAME
            Me.txtPassword.SetFocus
            Exit Sub
        End If
    End If
    If Me.cboPlanner.Text = "" Then
        MsgBox Lang(37), vbInformation, PROG_NAME
        Me.cboPlanner.SetFocus
        Exit Sub
    End If
    m_ButtonClicked = cmdOK.Caption
    Me.Hide
End Sub

Private Sub optUsePWD_Change()
    Me.txtPassword.Enabled = Me.optUsePWD.Value
    Me.txtPassword.BackColor = IIf(Me.txtPassword.Enabled, vbWindowBackground, vbButtonFace)
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
On Error Resume Next
    Me.Hide
    Cancel = Not m_ForceClose
End Sub
Attribute VB_Name = "frmPrimScen"
Attribute VB_Base = "0{50AD5207-A916-11E7-A061-000C2961E840}{50AD51CE-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public m_ForceClose As Boolean
Public m_ButtonClicked As String
Public m_SelectedScenario As Integer

Private Sub cmdCancel_Click()
    Me.Hide
    m_ButtonClicked = cmdCancel.Caption
End Sub

Private Sub cmdOK_Click()
    Me.Hide
    If Not Me.lvwScenList.SelectedItem Is Nothing Then
        m_SelectedScenario = Me.lvwScenList.SelectedItem.index - 1
    End If
    m_ButtonClicked = Me.cmdOK.Caption
End Sub

Private Sub lvwScenList_DblClick()
    If Not Me.lvwScenList.SelectedItem Is Nothing Then
        Call cmdOK_Click
    End If
End Sub

Private Sub UserForm_Initialize()
    Dim oListItem As ListItem
    Me.lvwScenList.SmallIcons = Me.imgIcons
    Me.lvwScenList.ListItems.Clear
    Set oListItem = Me.lvwScenList.ListItems.Add(, , Lang(34), , 1)
    oListItem.Selected = True
End Sub

Public Sub SetClientFile(ByRef theClientFile As Workbook)
    Dim oSysSht As Worksheet
    Dim iCnt As Integer
    Dim oListItem As ListItem
    Dim sScen As String
    
    If Not theClientFile Is Nothing Then
        Set oSysSht = theClientFile.Sheets("system")
        For iCnt = 1 To 10
            sScen = oSysSht.Cells(iCnt, 8).Value
            If sScen <> "" Then
                Set oListItem = Me.lvwScenList.ListItems.Add(, , sScen, , 1)
                If oSysSht.Cells(iCnt, 8).Value = oSysSht.Cells(1, 7).Value Then
                    oListItem.Selected = True
                End If
            End If
        Next iCnt
    End If
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = Not m_ForceClose
    Me.Hide
End Sub
Attribute VB_Name = "frmProgress"
Attribute VB_Base = "0{50AD51FB-A916-11E7-A061-000C2961E840}{50AD51C8-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_Initialize()
    Me.imgBarColor.Width = 0
End Sub

Public Sub SetProgress(ByVal iPerCent As Integer, Optional ByVal sText As String)
    Dim dTmp As Double
    If iPerCent > 100 Then
        iPerCent = 100
    End If
    If sText <> "" Then
        Me.lblCurrentWorkbook.Caption = sText
    End If
    dTmp = (iPerCent / 100) * Me.imgBarBack.Width
    Me.imgBarColor.Width = dTmp
    Me.Repaint
End Sub

Public Sub Display()
On Error Resume Next
    Me.Show vbNormal
End Sub
Attribute VB_Name = "frmPromptPWD"
Attribute VB_Base = "0{50AD5217-A916-11E7-A061-000C2961E840}{50AD51D6-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public m_ForceClose As Boolean
Public m_ButtonClicked As String

Private Sub cmdCancel_Click()
    m_ButtonClicked = Me.cmdCancel.Caption
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    If Me.optUsePWD.Value Then
        If Me.txtPWD.Text = "" Then
            MsgBox Lang(277), vbExclamation, PROG_NAME
            Me.txtPWD.SetFocus
            Exit Sub
        End If
    End If
    m_ButtonClicked = Me.cmdOK.Caption
    Me.Hide
End Sub

Private Sub optUsePWD_Change()
    Me.txtPWD.Enabled = optUsePWD.Value
    Me.txtPWD.BackColor = IIf(Me.txtPWD.Enabled, vbWindowBackground, vbButtonFace)
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
On Error Resume Next
    Me.Hide
    Cancel = Not m_ForceClose
End Sub
Attribute VB_Name = "frmQuery"
Attribute VB_Base = "0{50AD51FF-A916-11E7-A061-000C2961E840}{50AD51CA-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public m_ForceClose As Boolean
Public m_ButtonClicked As String
Public m_Mode As Integer
Public m_Criteria As String

Dim m_Popup As CommandBar

Public Sub PopulateList()
    Dim sSQL As String
    Dim vArray As Variant
    Dim vFields As Variant
    Dim iCnt As Integer
    Dim iFldCnt As Integer
    Dim oNode As Node
    Dim oFldNode As Node
    Dim oNodeClient As Node
    Dim oNodeSpouse As Node
    Dim oNode_Q As Node
    Dim oFldNode_Q As Node
    Dim oNodeClient_Q As Node
    Dim oNodeSpouse_Q As Node
    
    sSQL = "SELECT ID, CATEGORY FROM tbCategories ORDER BY ID ASC"
    vArray = ExecuteSQL(sSQL)
    If IsArray(vArray) Then
        Me.tvwList.Nodes.Clear
        If m_Mode = 1 Then
            Me.tvwFields.Nodes.Clear
        End If
        For iCnt = LBound(vArray, 2) To UBound(vArray, 2)
            Set oNode = Me.tvwList.Nodes.Add(, , "CAT" + CStr(iCnt), vArray(1, iCnt), 1)
            If m_Mode = 1 Then
                Set oNode_Q = Me.tvwFields.Nodes.Add(, , "CAT" + CStr(iCnt), vArray(1, iCnt), 1)
            End If
            Select Case iCnt + 1
                Case 3, 4, 7, 8, 9
                    Set oNodeClient = Me.tvwList.Nodes.Add(oNode, tvwChild, oNode.Key + "_C", "Client", 4)
                    Set oNodeSpouse = Me.tvwList.Nodes.Add(oNode, tvwChild, oNode.Key + "_S", Lang(138), 5)
                    If m_Mode = 1 Then
                        Set oNodeClient_Q = Me.tvwFields.Nodes.Add(oNode_Q, tvwChild, oNode_Q.Key + "_C", "Client", 4)
                        Set oNodeSpouse_Q = Me.tvwFields.Nodes.Add(oNode_Q, tvwChild, oNode_Q.Key + "_S", Lang(138), 5)
                    End If
            End Select
            sSQL = "SELECT FieldName, Type, Description, ID, CategoryID FROM tbFields WHERE CategoryID = " + CStr(vArray(0, iCnt)) + " ORDER BY ID ASC"
            vFields = ExecuteSQL(sSQL)
            If IsArray(vFields) Then
                For iFldCnt = LBound(vFields, 2) To UBound(vFields, 2)
                    Select Case True
                        Case Left(vFields(0, iFldCnt), 6) = "Client"
                            Set oFldNode = Me.tvwList.Nodes.Add(oNodeClient, tvwChild, vFields(0, iFldCnt), vFields(2, iFldCnt), 2)
                            If m_Mode = 1 Then
                                Set oFldNode_Q = Me.tvwFields.Nodes.Add(oNodeClient_Q, tvwChild, vFields(0, iFldCnt), vFields(2, iFldCnt), 2)
                            End If
                        Case Left(vFields(0, iFldCnt), 6) = "Spouse"
                            Set oFldNode = Me.tvwList.Nodes.Add(oNodeSpouse, tvwChild, vFields(0, iFldCnt), vFields(2, iFldCnt), 2)
                            If m_Mode = 1 Then
                                Set oFldNode_Q = Me.tvwFields.Nodes.Add(oNodeSpouse_Q, tvwChild, vFields(0, iFldCnt), vFields(2, iFldCnt), 2)
                            End If
                        Case Else
                            Set oFldNode = Me.tvwList.Nodes.Add(oNode, tvwChild, vFields(0, iFldCnt), vFields(2, iFldCnt), 2)
                            If m_Mode = 1 Then
                                If vFields(0, iFldCnt) <> "DepDOB" Then
                                    Set oFldNode_Q = Me.tvwFields.Nodes.Add(oNode_Q, tvwChild, vFields(0, iFldCnt), vFields(2, iFldCnt), 2)
                                End If
                            End If
                    End Select
                    oFldNode.Tag = CStr(vFields(0, iFldCnt)) + "|" + CStr(vFields(1, iFldCnt)) + "|" + CStr(vFields(2, iFldCnt)) + "|" + CStr(vFields(3, iFldCnt)) + "|" + CStr(vFields(4, iFldCnt))
                    If m_Mode = 1 Then
                        If vFields(0, iFldCnt) <> "DepDOB" Then
                            oFldNode_Q.Tag = CStr(vFields(0, iFldCnt)) + "|" + CStr(vFields(1, iFldCnt)) + "|" + CStr(vFields(2, iFldCnt)) + "|" + CStr(vFields(3, iFldCnt)) + "|" + CStr(vFields(4, iFldCnt))
                        End If
                    End If
                Next iFldCnt
            End If
            Set oNodeClient = Nothing
            Set oNodeSpouse = Nothing
            If m_Mode = 1 Then
                Set oNodeClient_Q = Nothing
                Set oNodeSpouse_Q = Nothing
            End If
        Next iCnt
    End If
End Sub

Private Sub cboDSType_Click()
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sPath As String
    Dim sFile As String
    
    sPath = oFileSys.GetParentFolderName(Me.txtFilename.Text)
    sFile = oFileSys.GetBaseName(Me.txtFilename.Text)
    If sPath <> "" And sFile <> "" Then
        Select Case Me.cboDSType.ListIndex
            Case 0
                Me.txtFilename.Text = IIf(sPath <> "", sPath + "\", sPath) + sFile + ".xls"
            Case 1
                Me.txtFilename.Text = IIf(sPath <> "", sPath + "\", sPath) + sFile + ".csv"
            Case 2
                Me.txtFilename.Text = IIf(sPath <> "", sPath + "\", sPath) + sFile + ".txt"
        End Select
    End If
End Sub

Private Sub cmdBackP1_Click()
    Me.MultiPage1.Value = 0
End Sub

Private Sub cmdBackP2_Click()
    Me.MultiPage1.Value = 1
End Sub

Private Sub cmdBrws_Click()
    SelectSaveFile Me.txtFilename
End Sub

Private Sub cmdCancel_Click()
    m_ButtonClicked = cmdCancel.Caption
    Me.Hide
End Sub

Private Sub cmdHelp_Click()
    ShowPDFDocument "Mail Merge.PDF"
End Sub

Private Sub cmdNextP0_Click()
    Me.MultiPage1.Value = 1
End Sub

Private Sub cmdNextP1_Click()
    Me.MultiPage1.Value = 2
End Sub

Private Sub cmdOK_Click()
    If m_Mode = 1 Then
        If Not Validate Then
            If Me.MultiPage1.Value = 0 Then
                Me.lvwFields.Visible = False
                Me.lvwFields.Left = 173
                Me.lvwFields.Top = 23
                DoEvents
                Me.lvwFields.Refresh
                Me.lvwFields.Visible = True
            End If
            Exit Sub
        End If
    End If
    m_ButtonClicked = cmdOK.Caption
    Me.Hide
End Sub

Private Function Validate() As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    
    If Me.lvwFields.ListItems.Count = 0 Then
        MsgBox Lang(223), vbExclamation, PROG_NAME
        Me.MultiPage1.Value = 0
        Exit Function
    End If
    If Me.txtFilename.Text = "" Then
        MsgBox Lang(224), vbExclamation, PROG_NAME
        Me.MultiPage1.Value = 2
        Me.txtFilename.SetFocus
        Exit Function
    End If
    If Me.txtFilename.Text <> "" Then
        If Not oFileSys.FolderExists(oFileSys.GetParentFolderName(Me.txtFilename.Text)) Then
            MsgBox Lang(225), vbExclamation, PROG_NAME
            Me.MultiPage1.Value = 2
            Me.txtFilename.SetFocus
            Me.txtFilename.SelStart = 0
            Me.txtFilename.SelLength = Len(Me.txtFilename.Text)
            Exit Function
        End If
    End If
    If Criteria = "" Then
        If MsgBox(Lang(226), vbYesNo + vbDefaultButton2 + vbQuestion, PROG_NAME) = vbNo Then
            Me.MultiPage1.Value = 1
            Exit Function
        End If
    End If
    If oFileSys.FileExists(Me.txtFilename.Text) Then
        If MsgBox(Lang(227), vbQuestion + vbYesNo, PROG_NAME) = vbNo Then
            Me.MultiPage1.Value = 2
            Me.txtFilename.SetFocus
            Me.txtFilename.SelStart = 0
            Me.txtFilename.SelLength = Len(Me.txtFilename.Text)
            Exit Function
        End If
    End If
    Validate = True
End Function

Private Sub lvwFields_OLEDragDrop(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single)
    Dim oListItem As ListItem
    Dim oNewItem As ListItem
    Dim oSrcItem As ListItem
    Dim iCnt As Integer
    Dim oListView As ListView
    
    If Data.GetFormat(1) Then
        Set oListView = Me.lvwFields
        Set oListItem = oListView.HitTest(x * 1440 / 72, y * 1440 / 72)
        If Not oListItem Is Nothing Then
            Set oSrcItem = oListView.SelectedItem
            If Not oSrcItem Is Nothing Then
                If oSrcItem.index > oListItem.index Then
                    Set oNewItem = oListView.ListItems.Add(oListItem.index, , oSrcItem.Text, , oSrcItem.SmallIcon)
                Else
                    Set oNewItem = oListView.ListItems.Add(oListItem.index + 1, , oSrcItem.Text, , oSrcItem.SmallIcon)
                End If
                oNewItem.Tag = oSrcItem.Tag
                For iCnt = 1 To oSrcItem.ListSubItems.Count
                    oNewItem.SubItems(iCnt) = oSrcItem.SubItems(iCnt)
                Next iCnt
                oListView.ListItems.Remove oSrcItem.index
                Set oListView.SelectedItem = oNewItem
            End If
        End If
    End If
End Sub

Private Sub tvwFields_NodeClick(ByVal Node As MSComctlLib.Node)
    Dim oListItem As ListItem
    Dim sName As String
    
    If Node.Image = 2 Then
        Node.Image = 3
        ' Add to List
        sName = Node.Text
        If Node.Parent.Text = "Client" Or Node.Parent.Text = Lang(138) Then
            sName = "(" + Node.Parent.Text + ") " + sName
        End If
        Set oListItem = Me.lvwFields.ListItems.Add(, , sName, , 6)
        oListItem.Tag = Node.Tag
    ElseIf Node.Image = 3 Then
        Node.Image = 2
        ' Remove From List
        sName = Node.Text
        If Node.Parent.Text = "Client" Or Node.Parent.Text = Lang(138) Then
            sName = "(" + Node.Parent.Text + ") " + sName
        End If
        Set oListItem = Me.lvwFields.FindItem(sName)
        If Not oListItem Is Nothing Then
            Me.lvwFields.ListItems.Remove oListItem.index
        End If
    End If
End Sub

Private Sub tvwList_DblClick()
    If Not Me.tvwList.SelectedItem Is Nothing Then
        If Left(Me.tvwList.SelectedItem.Key, 3) <> "CAT" Then
            Load frmCriteria
            frmCriteria.Setup Me.tvwList.SelectedItem
            frmCriteria.Show
        End If
    End If
End Sub

Private Sub tvwList_KeyPress(KeyAscii As Integer)
    If KeyAscii = 13 Then
        Call tvwList_DblClick
    End If
End Sub

Private Sub tvwList_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As stdole.OLE_XPOS_PIXELS, ByVal y As stdole.OLE_YPOS_PIXELS)
    If Button = 2 Then
        If Not Me.tvwList.SelectedItem Is Nothing Then
            If Left(Me.tvwList.SelectedItem.Key, 3) <> "CAT" Then
                If Me.tvwList.SelectedItem.Image = 3 Then
                    Set g_CurrNode = Me.tvwList.SelectedItem
                    If Not m_Popup Is Nothing Then
                        m_Popup.ShowPopup
                    End If
                End If
            End If
        End If
    End If
End Sub

Private Sub UserForm_Initialize()
    SetupPopup
    Me.tvwList.ImageList = Me.imgList
    Me.tvwFields.ImageList = Me.imgList
    Me.lvwFields.SmallIcons = Me.imgList
End Sub

Private Sub SetupPopup()
    Dim oCtl As Object
    Set m_Popup = CommandBars.Add(, Position:=msoBarPopup, Temporary:=True)
    Set oCtl = m_Popup.Controls.Add(msoControlButton)
    oCtl.Caption = Lang(139)
    oCtl.OnAction = "ClearQuery"
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
On Error Resume Next
    Me.Hide
    Cancel = Not m_ForceClose
End Sub

Private Sub SelectSaveFile(ByRef theTextBox As Control)
    Dim vOpenPath As Variant
    Dim sFilter As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sExt As String
    Dim sFilePostFix As String
    
    Select Case Me.cboDSType.ListIndex
        Case 0
            sFilter = "Microsoft Excel Workbook (*.xls), *.xls"
            sExt = ".xls"
        Case 1
            sFilter = Lang(140) + " (*.csv), *.csv"
            sExt = ".csv"
        Case 2
            sFilter = Lang(141) + " (*.txt), *.txt"
            sExt = ".txt"
    End Select
    
    sFilePostFix = CStr(Format(Now, "MMDDYY"))
    
    ' Change to client folder
    ChDir ThisWorkbook.path + "\client"
    
    ' Get the client file name
    vOpenPath = Application.GetSaveAsFilename(InitialFileName:="Mail Merge " + sFilePostFix, FileFilter:=sFilter, Title:=Lang(142))
    If vOpenPath <> False Then
        theTextBox.Text = oFileSys.GetParentFolderName(vOpenPath) + "\" + oFileSys.GetBaseName(vOpenPath) + sExt
    End If
    ChDrive Left(ThisWorkbook.path, 2)
    ChDir ThisWorkbook.path
End Sub

Public Function Criteria() As String
    Dim oNode As Node
    Dim sCond As String
    Dim sTmpFld As String
    Dim sRet As String
    Dim sTmpCond As String
    Dim sTmpValue As String
    Dim aTmpArray As Variant
    Dim aCnt As Integer
    Dim iType As Integer
    Dim aInfo As Variant
    Dim sOp As String
    Dim sDepJoin As String
    Dim sProg As String
    
    For Each oNode In frmQuery.tvwList.Nodes
        sProg = sProg + "."
        If Len(sProg) > 50 Then
            sProg = "."
        End If
        Application.StatusBar = Lang(143) + sProg
        If Left(oNode.Key, 3) <> "CAT" Then
            If oNode.Image = 3 Then
                aInfo = Split(oNode.Tag, "|")
                iType = Val(aInfo(1))
                sTmpFld = CStr(aInfo(0))
                sCond = Mid(oNode.Text, InStr(oNode.Text, ":") + 1, InStr(oNode.Text, "{") - InStr(oNode.Text, ":") - 1)
                sTmpValue = Mid(oNode.Text, InStr(oNode.Text, "{") + 1, InStr(oNode.Text, "}") - InStr(oNode.Text, "{") - 1)
                sOp = ResolveOperator(Trim(sCond))
                Select Case sTmpFld
                    Case "DepDOB"
                        sDepJoin = " AND tbDependents.ClientFileID = tbClients.ClientFileID "
                    Case "PlanDate"
                        sTmpFld = "tbData.PlanDate"
                End Select
                If sOp = "" Then
                    Select Case Trim(UCase(sCond))
                        Case UCase(Lang(144))
                            sTmpValue = Replace(sTmpValue, ",", " ")
                            aTmpArray = Split(sTmpValue, " ")
                            For aCnt = LBound(aTmpArray) To UBound(aTmpArray)
                                If Trim(aTmpArray(aCnt)) <> "" Then
                                    sTmpCond = sTmpCond + IIf(sTmpCond = "", "", " OR ") + " (" + sTmpFld + " LIKE '%" + Replace(aTmpArray(aCnt), "'", "''") + "%') "
                                End If
                            Next aCnt
                            sTmpCond = " (" + sTmpCond + ") "
                        Case UCase(Lang(145))
                            sTmpValue = Replace(sTmpValue, ",", " ")
                            aTmpArray = Split(sTmpValue, " ")
                            For aCnt = LBound(aTmpArray) To UBound(aTmpArray)
                                If Trim(aTmpArray(aCnt)) <> "" Then
                                    sTmpCond = sTmpCond + IIf(sTmpCond = "", "", " AND ") + " (" + sTmpFld + " LIKE '%" + Replace(aTmpArray(aCnt), "'", "''") + "%') "
                                End If
                            Next aCnt
                            sTmpCond = " (" + sTmpCond + ") "
                        Case UCase(Lang(146))
                            sTmpCond = " " + sTmpFld + " = '" + Replace(sTmpValue, "'", "''") + "' "
                        Case UCase(Lang(148))
                            If sTmpFld = "DepDOB" Then
                                If IsFrench Then
                                    sTmpCond = " " + sTmpFld + " = #" + ToEnglishMonth(sTmpValue) + "# "
                                Else
                                    sTmpCond = " " + sTmpFld + " = #" + sTmpValue + "# "
                                End If
                            Else
                                sTmpCond = " " + sTmpFld + " LIKE '%" + Replace(sTmpValue, "'", "''") + "%' "
                            End If
                        Case UCase(Lang(149))
                            sTmpCond = " " + sTmpFld + " LIKE '%" + Replace(sTmpValue, "'", "''") + "' "
                        Case UCase(Lang(150))
                            sTmpCond = " " + sTmpFld + " LIKE '" + Replace(sTmpValue, "'", "''") + "%' "
                        Case UCase(Lang(150))
                            aTmpArray = Split(sTmpValue, " AND ")
                            Select Case iType
                                Case 0 ' Text
                                    sTmpCond = " (" + sTmpFld + " BETWEEN '" + Replace(aTmpArray(0), "'", "''") + "' AND '" + Replace(aTmpArray(1), "'", "''") + "')"
                                Case 1 ' Number
                                    Select Case sTmpFld
                                        Case "ClientRPNonReg", "SpouseRPNonReg", "ClientRPReg", "SpouseRPReg"
                                            sTmpCond = " (" + sTmpFld + " BETWEEN " + CStr(GetToleranceNumber(aTmpArray(0))) + " AND " + CStr(GetToleranceNumber(aTmpArray(1))) + ")"
                                        Case "ClientRPKnw", "SpouseRPKnw"
                                            sTmpCond = " (" + sTmpFld + " BETWEEN " + CStr(GetKnowledgeNumber(aTmpArray(0))) + " AND " + CStr(GetKnowledgeNumber(aTmpArray(1))) + ")"
                                        Case Else
                                            sTmpCond = " (" + sTmpFld + " BETWEEN " + Replace(aTmpArray(0), "$", "") + " AND " + Replace(aTmpArray(1), "$", "") + ")"
                                    End Select
                                Case 2 ' Date
                                    If IsFrench Then
                                        sTmpCond = " (" + sTmpFld + " BETWEEN #" + ToEnglishMonth(aTmpArray(0)) + "# AND #" + ToEnglishMonth(aTmpArray(1)) + "#)"
                                    Else
                                        sTmpCond = " (" + sTmpFld + " BETWEEN #" + aTmpArray(0) + "# AND #" + aTmpArray(1) + "#)"
                                    End If
                                Case 3 ' Boolean
                                    sTmpCond = " (" + sTmpFld + " BETWEEN " + ToEnglishBoolean(CStr(UCase(aTmpArray(0)) = UCase(Lang(159)))) + " AND " + ToEnglishBoolean(CStr(UCase(aTmpArray(1)) = UCase(Lang(159)))) + ")"
                            End Select
                    End Select
                Else
                    Select Case iType
                        Case 0  ' Text
                            sTmpCond = " " + sTmpFld + " " + sOp + " '" + Replace(sTmpValue, "'", "''") + "' "
                        Case 1  ' Number
                            Select Case Val(aInfo(3))
                                Case 39, 40, 41, 42
                                    sTmpValue = CStr(GetToleranceNumber(sTmpValue))
                                Case 43, 44
                                    sTmpValue = CStr(GetKnowledgeNumber(sTmpValue))
                                Case Else
                                    If Left(sTmpValue, 1) = "$" Then
                                        sTmpValue = Right(sTmpValue, Len(sTmpValue) - 1)
                                    End If
                            End Select
                            sTmpCond = " " + sTmpFld + " " + sOp + " " + sTmpValue
                        Case 2  ' Date
                            If IsFrench Then
                                sTmpCond = " " + sTmpFld + " " + sOp + " #" + ToEnglishMonth(sTmpValue) + "# "
                            Else
                                sTmpCond = " " + sTmpFld + " " + sOp + " #" + sTmpValue + "# "
                            End If
                        Case 3  ' Boolean
                            Select Case UCase(sTmpValue)
                                Case "VRAI", "YES", "OUI", "TRUE", "-1", "1"
                                    sTmpValue = "1"
                                Case Else
                                    sTmpValue = "0"
                            End Select
                            sTmpCond = " " + sTmpFld + " " + sOp + " " + sTmpValue
                    End Select
                End If
                If sTmpCond <> "" Then
                    sRet = sRet + IIf(sRet = "", "", " AND ") + sTmpCond
                    sTmpCond = ""
                End If
            End If
        End If
    Next oNode
    Application.StatusBar = False
    If sRet <> "" Then
        sRet = " WHERE " + sRet + " AND tbData.ClientFileID = tbClients.ClientFileID " + sDepJoin
    End If
    m_Criteria = sRet
    Criteria = sRet
End Function

Public Function FieldList(Optional ByVal bFriendlyNames As Boolean = False) As String
    Dim oListItem As ListItem
    Dim aInfo As Variant
    Dim sTmpFld As String
    Dim sProg As String
    
    For Each oListItem In Me.lvwFields.ListItems
        sProg = sProg + "."
        If Len(sProg) > 50 Then
            sProg = "."
        End If
        Application.StatusBar = Lang(228) + sProg
        If bFriendlyNames Then
            If sTmpFld = "" Then
                sTmpFld = sTmpFld + "" + oListItem.Text
            Else
                sTmpFld = sTmpFld + "," + oListItem.Text
            End If
        Else
            aInfo = Split(oListItem.Tag, "|")
            If sTmpFld = "" Then
                sTmpFld = sTmpFld + "tbData." + CStr(aInfo(0))
            Else
                sTmpFld = sTmpFld + "," + "tbData." + CStr(aInfo(0))
            End If
        End If
    Next oListItem
    Application.StatusBar = False
    FieldList = sTmpFld
End Function
Attribute VB_Name = "frmSaveAs"
Attribute VB_Base = "0{50AD51F3-A916-11E7-A061-000C2961E840}{50AD51C4-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public m_ForceClose As Boolean
Public m_ButtonClicked As String
Public m_SaveOnly As Boolean
Public m_ClientFileID As String
Public m_NoPromptSave As Boolean
Public m_ClientFile As Workbook
Public m_InitFileTitle As String
Public m_Downgrade As Boolean
Public m_IsFactFinder As Boolean

Dim m_Popup As CommandBar

Private Sub cmdCancel_Click()
    Dim bEvt As Boolean
    
    If m_IsFactFinder Then
        If MsgBox(Lang(218), vbYesNo + vbQuestion + vbDefaultButton2, PROG_NAME) = vbYes Then
            m_ButtonClicked = cmdCancel.Caption
            Me.Hide
            bEvt = Application.EnableEvents
            Application.EnableEvents = False
            If Not m_ClientFile Is Nothing Then
                m_ClientFile.Close False
            End If
            Application.EnableEvents = bEvt
        End If
    Else
        m_ButtonClicked = cmdCancel.Caption
        Me.Hide
    End If
End Sub

Private Sub cmdOK_Click()
    Dim oCurrCF As Workbook
    Dim sNewCFID As String
    Dim sDataPath As String
    Dim bshowProgress As Boolean
    Dim sOldCFID As String
    Dim oFileSys As New Scripting.FileSystemObject
    
    If Me.txtFilename.Text = "" Then
        MsgBox Lang(219), vbExclamation, PROG_NAME
        Exit Sub
    End If
    
    ChDir ThisWorkbook.path
    
    m_ButtonClicked = cmdOK.Caption
    ' Check if Save As mode
    If Not m_SaveOnly Then
        ' Check if Name exists
        If NameExists(Me.txtFilename.Text) Then
            If MsgBox(Replace(Lang(220), "%FILE%", Me.txtFilename.Text), vbQuestion + vbYesNo + vbDefaultButton2, PROG_NAME) = vbYes Then
                bshowProgress = (m_ClientFile Is Nothing)
                ' Copy Data From Modules to Client File
                CopyDataToClientFile
                If Me.txtFilename.Text = m_InitFileTitle Then
                    Me.Hide
                    sDataPath = GetDataFolder
                    sNewCFID = GetClientFileIDFromTitle(Me.txtFilename.Text)
                    ' Check if we need to downgrade file
                    If m_Downgrade Then
                        ' Do Downgrade File
                        If Not DoDowngrade(m_ClientFile, sDataPath + "\" + sNewCFID + STR_DATAFILE_EXT) Then
                            m_ButtonClicked = Me.cmdCancel.Caption
                        End If
                        Exit Sub
                    End If
                    ' Password protection routine for client file
                    Run "FPS.xls!PromptForClientFilePWD", Workbooks(sNewCFID + STR_DATAFILE_EXT)
                    ' Go straight to save
                    If Not SaveClientFile(sNewCFID, Me.cboPrimScen.ListIndex) Then
                        MsgBox Lang(123), vbExclamation, PROG_NAME
                        Me.Show
                    End If
                Else
                    Me.Hide
                    If m_ClientFile Is Nothing Then
                        Set oCurrCF = Run("FPS.xls!GetClientFile")
                    Else
                        Set oCurrCF = m_ClientFile
                    End If
                    If oCurrCF Is Nothing Then
                        Me.Hide
                        ' Create a client file
                        Set oCurrCF = Run("FPS.xls!CreateClientFile")
                    End If
                    sDataPath = GetDataFolder
                    ' Get Old Client File ID
                    sOldCFID = oFileSys.GetBaseName(oCurrCF.name)
                    ' Get New Client File ID
                    sNewCFID = GetClientFileIDFromTitle(Me.txtFilename.Text)
                    ' Check if client file is locked by others
                    If IsLockedByOthers(sNewCFID) Then
                        MsgBox Replace(Lang(221), "%USER%", IsLockedBy(sNewCFID)), vbExclamation, PROG_NAME
                        Me.Show
                        Exit Sub
                    End If
                    ' Check if we need to downgrade file
                    If m_Downgrade Then
                        ' Do Downgrade File
                        If Not DoDowngrade(m_ClientFile, sDataPath + "\" + sNewCFID + STR_DATAFILE_EXT) Then
                            m_ButtonClicked = Me.cmdCancel.Caption
                        End If
                        Exit Sub
                    End If
                    ' Password protection routine for client file
                    Run "FPS.xls!PromptForClientFilePWD", oCurrCF
                    ' Unlock old file
                    UnlockClient sOldCFID
                    ' Lock the new File
                    LockClient sNewCFID
                    ' Save File
                    Application.DisplayAlerts = False
                    Application.StatusBar = Lang(122)
                    ' Encrypt Sheets
                    EncryptSheets oCurrCF
                    UniversalSaveAs oCurrCF, sDataPath + IIf(Right(sDataPath, 1) = "\", "", "\") + sNewCFID + STR_DATAFILE_EXT
                    DecryptSheets oCurrCF, "GB-009453-45"
                    UpdateDateModified sNewCFID
                    Workbooks("FPS.xls").Sheets("system").Range("LastFileName").Value = sDataPath + "\" + sNewCFID + STR_DATAFILE_EXT
                    Application.StatusBar = False
                    Application.DisplayAlerts = True
                    bshowProgress = (m_ClientFile Is Nothing)
                    ' Save File Again with Primary Scenario
                    If Not SaveClientFile(sNewCFID, Me.cboPrimScen.ListIndex, m_NoPromptSave, bshowProgress) Then
                        MsgBox Lang(123), vbExclamation, PROG_NAME
                        Me.Show
                    End If
                End If
            End If
        Else
            ' Check if we are in shared mode
            If IsDBShared Then
                ' Check if The specified client data name exists in the database
                If ClientDataNameExists(Me.txtFilename.Text) Then
                    ' Prompt User
                    MsgBox Replace(Lang(222), "%FILE%", Me.txtFilename.Text), vbExclamation, PROG_NAME
                    ' Exit
                    Exit Sub
                End If
            End If
            
            ' Copy Data From Modules to Client File
            CopyDataToClientFile

            If m_ClientFile Is Nothing Then
                Set oCurrCF = Run("FPS.xls!GetClientFile")
            Else
                Set oCurrCF = m_ClientFile
            End If
            If oCurrCF Is Nothing Then
                Me.Hide
                ' Create a client file
                Set oCurrCF = Run("FPS.xls!CreateClientFile")
            End If
            If Not oCurrCF Is Nothing Then
                Me.Hide
                sNewCFID = InsertClientDataFile(oCurrCF, Me.txtFilename.Text)
                If sNewCFID = "" Then
                    MsgBox Lang(123), vbExclamation, PROG_NAME
                    Me.Show
                Else
                    sDataPath = GetDataFolder
                    ' Unlock the current file if any
                    UnlockClient oFileSys.GetBaseName(oCurrCF.name)
                    ' Lock the new File
                    LockClient sNewCFID
                    ' Check if we need to downgrade file
                    If m_Downgrade Then
                        ' Do Downgrade File
                        If Not DoDowngrade(oCurrCF, sDataPath + "\" + sNewCFID + STR_DATAFILE_EXT) Then
                            m_ButtonClicked = Me.cmdCancel.Caption
                        End If
                        Exit Sub
                    End If
                    ' Password protection routine for client file
                    Run "FPS.xls!PromptForClientFilePWD", oCurrCF
                    ' Save File
                    Application.DisplayAlerts = False
                    Application.StatusBar = Lang(122)
                    ' Encrypt Sheets
                    EncryptSheets oCurrCF
                    UniversalSaveAs oCurrCF, sDataPath + IIf(Right(sDataPath, 1) = "\", "", "\") + sNewCFID + STR_DATAFILE_EXT
                    DecryptSheets oCurrCF, "GB-009453-45"
                    UpdateDateModified sNewCFID
                    Workbooks("FPS.xls").Sheets("system").Range("LastFileName").Value = sDataPath + "\" + sNewCFID + STR_DATAFILE_EXT
                    Application.StatusBar = False
                    Application.DisplayAlerts = True
                    bshowProgress = (m_ClientFile Is Nothing)
                    ' Save File Again with Primary Scenario
                    If Not SaveClientFile(sNewCFID, Me.cboPrimScen.ListIndex, m_NoPromptSave, bshowProgress) Then
                        MsgBox Lang(123), vbExclamation, PROG_NAME
                        Me.Show
                    End If
                End If
            Else
                MsgBox Lang(124), vbCritical, PROG_NAME
            End If
        End If
    Else
        Me.Hide
        If Not SaveClientFile(m_ClientFileID, Me.cboPrimScen.ListIndex, m_NoPromptSave) Then
            MsgBox Lang(123), vbExclamation, PROG_NAME
            Me.Show
        End If
    End If
End Sub

Private Function NameExists(ByVal theName As String) As Boolean
    Dim oFindItem As ListItem
    Set oFindItem = Me.lvwClients.FindItem(theName)
    NameExists = Not oFindItem Is Nothing
End Function

Private Sub lvwClients_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
    lvwClients.Sorted = True
    lvwClients.SortKey = ColumnHeader.index - 1
    lvwClients.SortOrder = IIf(lvwClients.SortOrder = lvwAscending, lvwDescending, lvwAscending)
End Sub

Private Sub lvwClients_DblClick()
    If Not Me.lvwClients.SelectedItem Is Nothing Then
        Call cmdOK_Click
    End If
End Sub

Private Sub lvwClients_ItemClick(ByVal Item As MSComctlLib.ListItem)
    Me.txtFilename.Text = Item.Text
End Sub

Private Sub lvwClients_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As stdole.OLE_XPOS_PIXELS, ByVal y As stdole.OLE_YPOS_PIXELS)
    If Button = 2 Then
        Set g_CurrListItem = Me.lvwClients.SelectedItem
        If Not m_Popup Is Nothing Then
            m_Popup.ShowPopup
        End If
    End If
End Sub

Private Sub UserForm_Initialize()
    Set g_ListView = Me.lvwClients
    If IsDBShared Then
        Me.lvwClients.ColumnHeaders(7).Width = 98
        Me.lvwClients.ColumnHeaders(8).Width = 98
        Me.lvwClients.ColumnHeaders(9).Width = 98
    End If
    Set Me.lvwClients.SmallIcons = Me.imgList
    PopulateClientListView Me.lvwClients
    PopulateScenarioCombo Me.cboPrimScen
    SetupPopup
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = Not m_ForceClose
    Me.Hide
End Sub

Private Sub SetupPopup()
    Dim oCtl As Object
    Set m_Popup = CommandBars.Add(, Position:=msoBarPopup, Temporary:=True)
    Set oCtl = m_Popup.Controls.Add(msoControlButton)
    oCtl.Caption = Lang(125)
    oCtl.OnAction = "RenameItem"
    Set oCtl = m_Popup.Controls.Add(msoControlButton)
    oCtl.Caption = Lang(126)
    oCtl.OnAction = "DeleteItem"
End Sub

Attribute VB_Name = "frmSetFolderPath"
Attribute VB_Base = "0{50AD522B-A916-11E7-A061-000C2961E840}{50AD51E0-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public m_ForceClose As Boolean
Public m_ButtonClicked As String

Private Sub cmdBrws_Click()
    Dim sFolder As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim iPos As Integer
    Dim sVirtFold As String
    
    sFolder = GetFolder(Lang(120))
    If sFolder <> "" Then
        If UCase(oFileSys.GetFileName(oFileSys.GetParentFolderName(sFolder))) = "NETHOOD" Then
            sVirtFold = oFileSys.GetFileName(sFolder)
            iPos = InStr(StrReverse(sVirtFold), " no ")
            iPos = Len(sVirtFold) - iPos - 3
            If iPos > 0 Then
                sFolder = "\\" + Right(sVirtFold, Len(sVirtFold) - 4 - iPos) + "\" + Left(sVirtFold, iPos)
                Me.txtNewPath.Text = sFolder
            End If
        Else
            Me.txtNewPath.Text = sFolder
        End If
    End If
End Sub

Private Sub cmdCancel_Click()
    m_ButtonClicked = Me.cmdCancel.Caption
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_ButtonClicked = Me.cmdOK.Caption
    Me.Hide
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
On Error Resume Next
    Cancel = Not m_ForceClose
    Me.Hide
End Sub
Attribute VB_Name = "frmYesNoAll"
Attribute VB_Base = "0{50AD521F-A916-11E7-A061-000C2961E840}{50AD51DA-A916-11E7-A061-000C2961E840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public m_ForceClose As Boolean
Public m_ButtonClicked As String

Private Sub cmdCancel_Click()
    m_ButtonClicked = Me.cmdCancel.Caption
    Me.Hide
End Sub

Private Sub cmdNo_Click()
    m_ButtonClicked = Me.cmdNo.Caption
    Me.Hide
End Sub

Private Sub cmdNoAll_Click()
    m_ButtonClicked = Me.cmdNoAll.Caption
    Me.Hide
End Sub

Private Sub cmdYes_Click()
    m_ButtonClicked = Me.cmdYes.Caption
    Me.Hide
End Sub

Private Sub cmdYesAll_Click()
    m_ButtonClicked = Me.cmdYesAll.Caption
    Me.Hide
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
On Error Resume Next
    Me.Hide
    Cancel = Not m_ForceClose
End Sub
Attribute VB_Name = "modClientFile"
Option Explicit

Public Const PERINFO_ADV_RANGE As String = "D11:E111"
Public Const MODLIST_RANGE As String = "A2:A500"
Public Const MD5_CONST As String = "NRA0712-ZZ@9"
Private Const CF_PASS As String = "IWantToEditThisClientFile"
Private Const CF_ACCD As String = "GB-009453-45"
Private Const SHTPD = "fc54188>spq"
Private Const WKBPD = "eo!1514^03v"

Private m_HasSpouseOnOpenCF As Boolean

' Various FP Solutions File Types recognized by OPEN
Public Enum CFFileTypes
    CFTYPE_UNKNOWN = 0
    CFTYPE_CLIENTFILE = 1
    CFTYPE_FACTFINDER = 2
    CFTYPE_DETAILFACT = 3
End Enum

' Various Company Types
Public Enum CompanyTypes
    COTYPE_UNKNOWN = 0
    COTYPE_HOLDING = 1
    COTYPE_OPERATING = 2
End Enum

Public Enum LoginStatusTypes
    LOGIN_SUCCESS = 0
    LOGIN_NO_SUCH_USER = 1
    LOGIN_USER_LOCKED_OUT = 2
    LOGIN_INCORRECT_PASSWORD = 3
End Enum

Public Type UserInfo
    Username As String
    FirstName As String
    LastName As String
    Email As String
    Designations As String
    SecLevel As Integer
    LockedOut As Boolean
    Password As String
End Type

Public Function OpenCFFile(ByVal sFileName As String, Optional ByVal sScreenName As String) As Workbook
' Opens a client file from file from User interface
On Error GoTo Err_Trap

    Dim oFileSys As New Scripting.FileSystemObject
    Dim oTmpWkBk As Workbook
    Dim bEvt As Boolean
    Dim oTmpColl As Collection
    Dim sNewCFFilename As String
    Dim sActiveW As String
    Dim sActiveS As String
    Dim bScr As Boolean
    Dim bProceed As Boolean
    Dim oTmpNewCF As Workbook
    Dim sInitFileName As String
    Dim eCFtype As CFFileTypes
    Dim bSuccess As Boolean
    
    ' Gather ActiveWindow Settings
    sActiveW = ActiveWorkbook.name
    sActiveS = ActiveSheet.name
    bScr = Application.ScreenUpdating
    
    ' Disable Events
    bEvt = Application.EnableEvents
    Application.EnableEvents = False
    
    ' Check existence of file only if not using large database
    If Not IsUsingLargeDatabase Then
        ' Check if file exists
        If Not oFileSys.FileExists(sFileName) Then
            GoTo ExitOut
        End If
    End If
    
    ' Check if workbook already exists
    If WorkBookExists(oFileSys.GetFileName(sFileName)) Then
        ' Ask user if they want to reopen
        If MsgBox(Lang(65), vbYesNo, PROG_NAME) = vbYes Then
            ' Close Current Client File
            CloseClientFile
            ' Check if using SQL Server Database
            If IsUsingLargeDatabase Then
                ' Check if File selected is client file
                If Right(UCase(oFileSys.GetExtensionName(sFileName)), 3) = "FPS" Then
                    ' Retrieve Binary data
                    bSuccess = BinaryFileRetrieve(sFileName)
                End If
            End If
            ' Disable Screen Updates
            Application.ScreenUpdating = False
            ' Re-Open workbook
            Set oTmpWkBk = Workbooks.Open(sFileName, False)
            ' Check if window is visible
            If oTmpWkBk.Windows(1).Visible Then
                ' Check if protected
                If oTmpWkBk.ProtectStructure Then
                    ' Check if Fact Finder
                    If IsValidFactFinderFile(oTmpWkBk) Then
                        ' Unprotect Fact Finder
                        oTmpWkBk.Unprotect "eo!1514^03v"
                    Else
                        ' Unprotect WorkBook
                        oTmpWkBk.Unprotect CF_PASS
                    End If
                End If
                ' Hide Window
                oTmpWkBk.Windows(1).Visible = False
            End If
        End If
    Else
        ' Check if using SQL Server Database
        If IsUsingLargeDatabase Then
            ' Check if File selected is client file
            If Right(UCase(oFileSys.GetExtensionName(sFileName)), 3) = "FPS" Then
                ' Retrieve Binary data
                bSuccess = BinaryFileRetrieve(sFileName)
            End If
        End If
        ' Disable Screen Updates
        Application.ScreenUpdating = False
        ' Just open since it does not exist
        Set oTmpWkBk = Workbooks.Open(sFileName, False)
        ' Check if window is visible
        If oTmpWkBk.Windows(1).Visible Then
            ' Check if workbook is protected
            If oTmpWkBk.ProtectStructure Then
                If IsValidFactFinderFile(oTmpWkBk) Then
                    ' Unprotect Fact Finder
                    oTmpWkBk.Unprotect "eo!1514^03v"
                Else
                    ' Unprotect the workbook
                    oTmpWkBk.Unprotect CF_PASS
                End If
            End If
            ' Hide Window
            oTmpWkBk.Windows(1).Visible = False
        End If
    End If
    
    ' Check if previous active window is still active & Re-Enable screen updating
    GoSub RestoreScreen
    
    ' Check if workbook was opened
    If Not oTmpWkBk Is Nothing Then
        ' CleanUp Toolbar
        CleanUpToolBar
        ' Create screen name
        sScreenName = IIf(sScreenName = "", oFileSys.GetBaseName(sFileName), sScreenName)
        ' Determine the type of the workbook
        eCFtype = GetCFType(oTmpWkBk)
        Select Case eCFtype
            Case CFTYPE_UNKNOWN
                If Not Application.ScreenUpdating Then
                    Application.ScreenUpdating = True
                End If
                MsgBox Lang(66), vbExclamation, PROG_NAME
                ' Unknown so just close it
                oTmpWkBk.Close False
                Set oTmpWkBk = Nothing
            Case CFTYPE_CLIENTFILE
                ' Close Current Client File
                CloseClientFile
                ' Client file so proceed in the open process
                If Not OpenCFWorkBook(oTmpWkBk, sScreenName) Then
                    ' Unable to process, close it
                    oTmpWkBk.Close False
                    Set oTmpWkBk = Nothing
                End If
            Case CFTYPE_FACTFINDER
                ' Enable Screen redraw for the message box to appear ok
                If Not Application.ScreenUpdating Then
                    Application.ScreenUpdating = True
                End If
                ' Prompt if user want to continue
                If MsgBox(Lang(67), vbYesNo + vbQuestion, PROG_NAME) = vbYes Then
                    ' Create a new collection
                    Set oTmpColl = New Collection
                    ' Add the WorkBook to the collection
                    oTmpColl.Add oTmpWkBk
                    ' Fact finder so convert to client file
                    Set oTmpNewCF = ConvertFFToCF(oTmpColl)
                    ' Check if successful in converting
                    If Not oTmpNewCF Is Nothing Then

                        ' Refresh Assumptions
                        If WorkBookExists("Assumptions.xls") Then
                            Run "FPS.xls!ApplyDefaultData", Workbooks("Assumptions.xls")
                            GoSub RestoreScreen
                        End If
                        
                        If Not Application.ScreenUpdating Then
                            Application.ScreenUpdating = True
                        End If
                        
                        ' Check if New Client file is the current client file
                        If oTmpNewCF Is Run("FPS.xls!GetClientFile") Then
                            ' Close all opened Fact finder workbooks
                            CloseWorkBookCollection oTmpColl
                            ' Set the Filename
                            sNewCFFilename = oTmpNewCF.FullName
                            ' Save the file
                            GoSub SaveNewCFRoutine
                        Else
PromptForFile1:
                            ' Save the new client file so that the filename is correct and not Book1, etc.
                            sNewCFFilename = GetSaveFileName(Not AllowedToUseDB, CreatePrefix(oTmpNewCF), True, , SuggestScreenName(oTmpNewCF))
                            ' Check if name returned
                            If sNewCFFilename <> "False" Then
                                ' Check if file selected is currently open
                                If WorkBookExists(oFileSys.GetFileName(sNewCFFilename)) Then
                                    ' Prompt User
                                    MsgBox Lang(68), vbExclamation, PROG_NAME
                                    ' Prompt for filename again
                                    GoTo PromptForFile1
                                End If
                                ' Assume Proceed
                                bProceed = True
                                ' Check if file exists
                                If oFileSys.FileExists(sNewCFFilename) Then
                                    ' Prompt to replace
                                    Select Case MsgBox(Lang(69), vbYesNoCancel + vbQuestion, PROG_NAME)
                                        Case vbNo
                                            GoTo PromptForFile1
                                        Case vbCancel
                                            ' Check if new client file is not the current
                                            If Not oTmpNewCF Is Run("FPS.xls!GetClientFile") Then
                                                ' Close the new client file
                                                oTmpNewCF.Close False
                                                Set oTmpNewCF = Nothing
                                            End If
                                            ' Close all opened Fact finder workbooks
                                            CloseWorkBookCollection oTmpColl
                                            ' Return Nothing
                                            Set oTmpWkBk = Nothing
                                            ' Abort
                                            bProceed = False
                                    End Select
                                End If
                                If bProceed Then
                                    ' Close all opened Fact finder workbooks
                                    CloseWorkBookCollection oTmpColl
                                    ' Save the file
                                    GoSub SaveNewCFRoutine
                                End If
                            Else
                                ' User Cancelled, check if the new client file is not the current
                                If Not oTmpNewCF Is Run("FPS.xls!GetClientFile") Then
                                    ' Close the new client file
                                    oTmpNewCF.Close False
                                    Set oTmpNewCF = Nothing
                                End If
                                ' Close the Fact Finder
                                oTmpWkBk.Close False
                                ' Return nothing
                                Set oTmpWkBk = Nothing
                            End If
                        End If
                    Else
                        ' Unable to convert, close it
                        oTmpWkBk.Close False
                        Set oTmpWkBk = Nothing
                    End If
                Else
                    ' Abort, user clicked No to convert, close it
                    oTmpWkBk.Close False
                    Set oTmpWkBk = Nothing
                End If
            Case CFTYPE_DETAILFACT
                ' Enable Screen redraw for the message box to appear ok
                If Not Application.ScreenUpdating Then
                    Application.ScreenUpdating = True
                End If
                ' Prompt if user want to continue
                If MsgBox(Lang(302), vbYesNo + vbQuestion, PROG_NAME) = vbYes Then
                    ' Get Initial Filename
                    sInitFileName = oFileSys.GetBaseName(oTmpWkBk.name)
                    ' Detailed Fact Finder, convert (import) to client file
                    Set oTmpNewCF = ConvertDFFToCF(oTmpWkBk)
                    ' Check if the fact finder was converted to client file
                    If Not oTmpNewCF Is Nothing Then
                        If Not Application.ScreenUpdating Then
                            Application.ScreenUpdating = True
                        End If
PromptForFile2:
                        ' Save the new client file so that the filename is correct and not Book1, etc.
                        sNewCFFilename = GetSaveFileName(Not AllowedToUseDB, CreatePrefix(oTmpNewCF), True, , sInitFileName)
                        ' Check if name returned
                        If sNewCFFilename <> "False" Then
                            ' Check if file selected is currently open
                            If WorkBookExists(oFileSys.GetFileName(sNewCFFilename)) Then
                                ' Prompt User
                                MsgBox Lang(68), vbExclamation, PROG_NAME
                                ' Prompt for filename again
                                GoTo PromptForFile2
                            End If
                            ' Assume Proceed
                            bProceed = True
                            ' Check if file exists
                            If oFileSys.FileExists(sNewCFFilename) Then
                                ' Prompt to replace
                                Select Case MsgBox(Lang(69), vbYesNoCancel + vbQuestion, PROG_NAME)
                                    Case vbNo
                                        GoTo PromptForFile2
                                    Case vbCancel
                                        oTmpNewCF.Close False
                                        Set oTmpNewCF = Nothing
                                        Set oTmpWkBk = oTmpNewCF
                                        bProceed = False
                                End Select
                            End If
                            If bProceed Then
                                ' Close current client file
                                CloseClientFile
                                ' Save the file
                                GoSub SaveNewCFRoutine
                            End If
                        Else
                            ' User Cancelled, check if the new client file is not the current
                            If Not oTmpNewCF Is Run("FPS.xls!GetClientFile") Then
                                ' Close the new client file
                                oTmpNewCF.Close False
                                Set oTmpNewCF = Nothing
                            End If
                            ' Return nothing
                            Set oTmpWkBk = Nothing
                        End If
                    Else
                        ' Unable to convert, close it
                        oTmpWkBk.Close False
                        Set oTmpWkBk = Nothing
                    End If
                Else
                    ' Aborted, user clicked no, close it
                    oTmpWkBk.Close False
                    Set oTmpWkBk = Nothing
                End If
        End Select
    End If
    
ExitOut:
    ' Return the workbook
    Set OpenCFFile = oTmpWkBk
    
    ' Re-Enable events
    Application.EnableEvents = bEvt
Exit Function
SaveNewCFRoutine:
    ' Save the file
    Application.StatusBar = Lang(70)
    Application.DisplayAlerts = False
    
    ' Check if current client file is the same as save as filename
    If oTmpNewCF.FullName = sNewCFFilename Then
        ' Check if the current client file is read only
        If oTmpNewCF.ReadOnly Then
            ' Prompt Message
            MsgBox Lang(303), vbExclamation, PROG_NAME
            ' Unable to process, close everything and return nothing
            CloseClientFile
            Set oTmpNewCF = Nothing
            Set oTmpWkBk = Nothing
            Application.DisplayAlerts = True
            Application.StatusBar = False
            Return
        Else
            UniversalSaveAs oTmpNewCF, Replace(sNewCFFilename, ":\\", ":\")
        End If
    Else
        UniversalSaveAs oTmpNewCF, Replace(sNewCFFilename, ":\\", ":\")
    End If
    
    Application.DisplayAlerts = True
    Application.StatusBar = False
    ' Proceed to open process
    If Not OpenCFWorkBook(oTmpNewCF, sScreenName) Then
        ' Unable to process, close everything and return nothing
        If Not oTmpWkBk Is oTmpNewCF Then
            oTmpNewCF.Close False
            oTmpWkBk.Close False
        Else
            oTmpNewCF.Close False
        End If
        Set oTmpNewCF = Nothing
        Set oTmpWkBk = Nothing
    Else
        ' Check if the file type is Fact Finder
        If eCFtype = CFTYPE_FACTFINDER Then
            CopyModuleToCF oTmpNewCF
        End If
        ' Return the new client file
        Set oTmpWkBk = oTmpNewCF
    End If
    Return
RestoreScreen:
    If WorkBookExists(sActiveW) Then
        If WorkSheetExists(Workbooks(sActiveW), sActiveS) Then
            If ActiveWorkbook.name <> sActiveW Or ActiveSheet.name <> sActiveS Then
                Workbooks(sActiveW).Sheets(sActiveS).Activate
            End If
        Else
            If WorkBookExists("Fps.xls") Then
                Run "FPS.xls!ActivateMainPage"
            End If
        End If
    Else
        If WorkBookExists("Fps.xls") Then
            Run "FPS.xls!ActivateMainPage"
        End If
    End If
    If Val(Application.ScreenUpdating) <> Val(bScr) Then
        Application.ScreenUpdating = bScr
    End If
    Return
Exit Function
Err_Trap:
    MsgBox Err.Description, vbCritical, PROG_NAME
    Resume Next
End Function

Public Function OpenCFDB(ByVal sCFID As String) As Workbook
' Opens a client file from database from User interface

    Dim oFileSys As New Scripting.FileSystemObject
    Dim oTmpWkBk As Workbook
    Dim bEvt As Boolean
    Dim sDataFolder As String
    Dim sFileName As String
    Dim sScreenName As String
    
    ' Disable Events
    bEvt = Application.EnableEvents
    Application.EnableEvents = False
    
    ' Check if we want to Get File From DB
    If IsUsingLargeDatabase Then
        Call BinaryFileRetrieve("ClientFileID = '" & sCFID & "'")
    End If
    
    ' Make This workbbok's path as current
    ChDir ThisWorkbook.path
    
    ' Get the Data Folder
    sDataFolder = Run("ClientManager.xls!GetDataFolder")
    
    ' Set the filename
    sFileName = sDataFolder + "\" + sCFID + STR_DATAFILE_EXT
    
    ' Set the Screen name
    sScreenName = Run("ClientManager.xls!GetFileTitle", sCFID)
    
    ' Lock the File
    LockClient sCFID
    
    ' Call the open from file passing the filename and screen name
    Set OpenCFDB = OpenCFFile(sFileName)
    
    ' Re-Enable events
    Application.EnableEvents = bEvt

End Function

Public Function OpenCFWorkBook(ByRef oClientFile As Workbook, ByRef sScreenName As String) As Boolean
' Processes the client file workbook for open
    
    Dim bEvt As Boolean
    Dim bContinue As Boolean
    Dim iCurrScen As Integer
    Dim sDownGradeFile As String
    Dim oFileSys As New Scripting.FileSystemObject
    
    ' Disable Events
    bEvt = Application.EnableEvents
    Application.EnableEvents = False
    
    ' Set current folder
    ChDir ThisWorkbook.path
    
    ' Unprotect client file workbook
    If oClientFile.ProtectStructure Or oClientFile.ProtectWindows Then
        oClientFile.Unprotect CF_PASS
    End If
    
    ' Check if Sheets are encrypted
    If SheetsAreEncrypted(oClientFile) Then
        ' Decrypt Sheets
        DecryptSheets oClientFile, CF_ACCD
    End If
    
    ' Check Passwords
    If IsPWDProtectedCF(oClientFile) Then
        bContinue = VerifyCFPWD(oClientFile)
    Else
        bContinue = True
    End If
    
    If bContinue Then
        ' Get the Defaults filename for the client file
        Run "FPS.xls!SetDefaultFile", CStr(oClientFile.Sheets("system").Range("D1").Value)
        ' Check if Defaults file was set
        Run "FPS.xls!CheckDefaultsFile", oClientFile
        
        ' Check if we need to downgrade
        If IsDowngradeRequired(oClientFile) Then
            ' Enable Screen Updates
            Application.ScreenUpdating = True
            ' Ask user if he/she wants to continue downgrade and open the file
            If MsgBox(Lang(304) + vbCrLf + Lang(305), vbYesNo + vbQuestion, PROG_NAME) = vbYes Then
                ' Prompt for a new filename and put in the variable sDownGradeFile
PromptForFileName:
                ' Save the new client file so that the filename is correct and not Book1, etc.
                sDownGradeFile = GetSaveFileName(Not AllowedToUseDB, CreatePrefix(oClientFile), True)
                ' Check if name returned
                If sDownGradeFile <> "False" Then
                    ' Check if file selected is currently open
                    If WorkBookExists(oFileSys.GetFileName(sDownGradeFile)) Then
                        ' Prompt User
                        MsgBox Lang(68), vbExclamation, PROG_NAME
                        ' Prompt for filename again
                        GoTo PromptForFileName
                    End If
                    ' Assume Proceed
                    bContinue = True
                    ' Check if file exists
                    If oFileSys.FileExists(sDownGradeFile) Then
                        ' Prompt to replace
                        Select Case MsgBox(Lang(69), vbYesNoCancel + vbQuestion, PROG_NAME)
                            Case vbNo
                                GoTo PromptForFileName
                            Case vbCancel
                                ' Abort
                                bContinue = False
                        End Select
                    End If
                    ' Check if user did not cancel
                    If bContinue Then
                        ' Downgrade client file
                        bContinue = DowngradeCF(oClientFile, sDownGradeFile)
                    End If
                Else
                    ' Do not continue
                    bContinue = False
                End If
            Else
                ' Do not continue
                bContinue = False
            End If
        End If
        If bContinue Then
            ' Check if if we need to shift goals
            If IsGoalsNeedShifting(oClientFile) Then
                ' Shift Goals
                bContinue = ShiftGoals(oClientFile)
            End If
            If bContinue Then
                ' Ensure that client file has Executive Summary data
                Run "Mainpage.xls!CheckExecSummInCF", oClientFile
                ' Determine if Spouse is included in client file or not
                m_HasSpouseOnOpenCF = CBool(oClientFile.Sheets("Perinfo.xls").Range("A16").Value)
                ' Open module workbooks
                bContinue = OpenCFModules(GetWorkbookList(oClientFile))
                ' Check if previous routine was successful
                If bContinue Then
                                    
                    ' If number of scenarios more than 1
                    If GetCFScenarioCount(oClientFile) > 1 Then
                        If Not Application.ScreenUpdating Then
                            Application.ScreenUpdating = True
                        End If
                        ' Ask user to select scenario
                        iCurrScen = SelectScenario(oClientFile, , True)
                        ' Check if user canceled scenario selection
                        If iCurrScen < 0 Then
                            ' Just Exit
                            Exit Function
                        End If
                    Else
                        ' Use the current scenario
                        iCurrScen = GetCurrentScenarioNumber(oClientFile)
                    End If
                    ' Copy Data from Client File to module based on scenario
                    bContinue = CopyCFToModule(oClientFile, iCurrScen)
                    If bContinue Then

                        ' Register Workbooks & Register Current Client Path + Filename
                        RegisterClientFile oClientFile

                        ' Change Captions
                        oClientFile.Windows(1).Caption = sScreenName
                        Run "FPS.xls!DisplayScenarioInfo"

                        ' Check and Set Display Range
                        If oClientFile.Sheets("system").Range("F1").Value > 60 Then
                            oClientFile.Sheets("system").Range("F1").Value = 60
                        End If
                        If oClientFile.Sheets("system").Range("F1").Value < 20 Then
                            oClientFile.Sheets("system").Range("F1").Value = 20
                        End If
                        Workbooks("FPS.xls").Sheets("system").Range("rngGlobalView").Value = oClientFile.Sheets("system").Range("F1").Value
                        Run "FPS.xls!AutoGlobalChangeView", True
                        
                        ' Apply Current View Settings of Executive Summary
                        Run "Mainpage.xls!ApplyViewSetting"
                        
                        ' Set Visibility of Executive Summary Pages
                        Run "Mainpage.xls!SetPageVisibility"
                        
                        ' Sort Profile
                        If WorkBookExists("Profile.xls") Then
                            Run "Profile.xls!DoSort"
                        End If
             
                        ' Correct the cell dimensions in Goals & Objectives
                        If WorkBookExists("Perinfo.xls") Then
                            Run "Perinfo.xls!CorrectFreeTextCellHeight"
                        End If
                        
                        If Run("FPS.xls!GetEdition") >= 3 Then
                            ' Initialize the Business Company List if any
                            Run "DataEntryBusiness.xls!InitCompanyList"
                        End If
                        
                        ' Compensate for lack of FPS Assistant Data
                        Run "Perinfo.xls!CheckAssistantData"

                        ' Check if Networth Present
                        If WorkSheetExists(oClientFile, "Networth.xls") Then
                            ' Apply Deferred Taxes
                            Run "Networth.xls!ApplyDeferredTaxes"
                        End If
                        
                        ' Return True for success
                        OpenCFWorkBook = True
                    End If
                End If
            End If
        End If
    Else
'        MsgBox "Incorrect Password!", vbExclamation, PROG_NAME
    End If
    
    ' Re-Enable events
    Application.EnableEvents = bEvt
    
End Function

Public Function GetCFType(ByRef oClientFile As Workbook) As CFFileTypes
' Returns the type of client file being opened (fact finder or client file)
    Dim oFileSys As New Scripting.FileSystemObject
    
    ChDir ThisWorkbook.path
    Select Case True
        Case oClientFile.Sheets(1).name = "system"
            ' Check Workbook name file extension
            If UCase(oFileSys.GetExtensionName(oClientFile.name) = "DFF") Then
                GetCFType = CFTYPE_DETAILFACT
            Else
                GetCFType = CFTYPE_CLIENTFILE
            End If
        Case NRADec011304(oClientFile.Sheets(1).name) = "system"
            GetCFType = CFTYPE_CLIENTFILE
        Case IsValidFactFinderFile(oClientFile)
            GetCFType = CFTYPE_FACTFINDER
        Case IsValidBusinessFactFinderFile(oClientFile)
            GetCFType = CFTYPE_FACTFINDER
        Case Else
            GetCFType = CFTYPE_UNKNOWN
    End Select
End Function

Public Function ConvertFFToCF(ByRef oCollFFWkBks As Collection, Optional ByVal theDefaultsFile As String, Optional ByVal bshowProgress As Boolean = True) As Workbook
' Converts the Fact Finder file to Client File, accepts a collection of Fact Finder Workbooks, returns a ClientFile workbook
On Error GoTo Err_Trap

    Dim iCnt As Integer
    Dim oDefaultsBk As Workbook
    Dim oFileSys As New Scripting.FileSystemObject
    Dim oDataSheet As Worksheet
    Dim sErrMsg As String
    Dim iCol As Integer
    Dim sBkName As String
    Dim bBkInclude As Boolean
    Dim sRngCopy As String
    Dim sRngPaste As String
    Dim oTargetDataSheet As Worksheet
    Dim oSourceDataSheet As Worksheet
    Dim oTmpBook As Workbook
    Dim bIsBusiness As Boolean
    Dim bProceed As Boolean
    Dim sSuffix As String
    Dim iFreeIndex As Integer
    Dim iEdition As Integer
    Dim oActiveWin As Window
    Dim bScr As Boolean
    Dim bEvt As Boolean
    Dim iProgCnt As Integer
    Dim iProgTotal As Integer
    
    ' Get the edition of FP Solutions
    ChDir ThisWorkbook.path
    iEdition = Run("FPS.xls!GetEdition")
    
    ' Check if FF Import workbook does not exist
    If Not WorkBookExists("Import_FF.xls") Then
        ' Check if workbook file exists
        If oFileSys.FileExists(ThisWorkbook.path + "\Import_FF.xls") Then
            ' Disable Alerts
            Application.DisplayAlerts = False
            ' Open workbook
            Workbooks.Open ThisWorkbook.path + "\Import_FF.xls", False
            ' Re enable Alerts
            Application.DisplayAlerts = True
        End If
    End If
    
    ' Iterate through collection of Workbooks for fact finder
    For iCnt = 1 To oCollFFWkBks.Count
        ' Reset Proceed Flag
        bProceed = False
        ' Determine if Fact Finder is Business
        bIsBusiness = IsValidBusinessFactFinderFile(oCollFFWkBks(iCnt))
        ' Check if not business
        If Not bIsBusiness Then

            ' Check if FF Import workbook does exists
            If WorkBookExists("Import_FF.xls") Then
                ' Re-Link the Import_FF workbook
                Run "Import_FF.xls!ChangeLinkPersonal", oCollFFWkBks(iCnt).name
                
                ' Check if Fact Finder file contains at least one error
                If FFHasError Then
                    ' Ask User if want to continue
                    If MsgBox(Lang(306), vbYesNo + vbQuestion, PROG_NAME) = vbNo Then
                        ' User wants to Abort so do not proceed
                        bProceed = False
                        ' Exit loop
                        Exit For
                    End If
                End If
            End If
            
            ' Check if valid personal fact finder
            bProceed = IsValidFactFinderFile(oCollFFWkBks(iCnt))
            ' Reset Suffix
            sSuffix = ""
            ' Check if Proceed
            If bProceed Then
                ' Check if we don't  have a new client file
                If oTmpBook Is Nothing Then
                    ' Close Current Client File
                    CloseClientFile
                    ' Get the Defaults file workbook
                    Set oDefaultsBk = GetDefaultsFileForFF(theDefaultsFile)
                    ' Check if defaults file was returned
                    If Not oDefaultsBk Is Nothing Then
                        ' Initialize a new workbook as a client file
                        Set oTmpBook = GetEmptyCFWorkBook(oDefaultsBk.name, , IIf(IsFR, 2, 1))
                    Else
                        ' Exit out
                        bProceed = False
                        Exit For
                    End If
                End If
            End If
        Else
            ' DO NOT CONTINUE if License does not allow for business
            If iEdition < 3 Then
                If Not Application.ScreenUpdating Then
                    Application.ScreenUpdating = True
                End If
                
                ' Prompt User
                MsgBox Lang(357), vbExclamation, PROG_NAME
                ' Close the Temp Workbook
                oTmpBook.Close False
                ' Cleanup
                Set oTmpBook = Nothing
                ' Cannot proceed
                bProceed = False
                ' Exit
                Exit For
            Else
                ' Check if FF Import workbook does exists
                If WorkBookExists("Import_FF.xls") Then
                    ' Re-Link the Import_FF workbook
                    Run "Import_FF.xls!ChangeLinkBusiness", oCollFFWkBks(iCnt).name
                    
                    ' Check if Fact Finder file contains at least one error
                    If FFHasError(True) Then
                        ' Ask User if want to continue
                        If MsgBox(Lang(306), vbYesNo + vbQuestion, PROG_NAME) = vbNo Then
                            ' User wants to Abort so do not proceed
                            bProceed = False
                            ' Exit loop
                            Exit For
                        End If
                    End If
                End If
            End If
            ' Check if we don't  have a new client file
            If oTmpBook Is Nothing Then
                ' Get the current file
                Set oTmpBook = Run("FPS.xls!GetClientFile")
                ' Check if we still don't have a current client file
                If oTmpBook Is Nothing Then
                
                    If Not Application.ScreenUpdating Then
                        Application.ScreenUpdating = True
                    End If

                    ' Prompt Message
                    MsgBox Lang(307), vbExclamation, PROG_NAME
                    ' Do not proceed
                    bProceed = False
                    ' Exit loop
                    Exit For
                End If
            End If
            ' Determine company type to set the first portion of suffix
            Select Case GetCompanyType(oCollFFWkBks(iCnt))
                Case CompanyTypes.COTYPE_HOLDING
                    iFreeIndex = GetFreeBusModIndex(True, oTmpBook)
                    If iFreeIndex > 0 Then
                        sSuffix = "Hd" + CStr(iFreeIndex)
                        ' Set Procced to true
                        bProceed = True
                    Else

                        If Not Application.ScreenUpdating Then
                            Application.ScreenUpdating = True
                        End If

                        ' Prompt limit on HoldCos
                        MsgBox Lang(308), vbExclamation, PROG_NAME
                        ' Do not proceed
                        bProceed = False
                        ' Exit loop
                        Exit For
                    End If
                Case CompanyTypes.COTYPE_OPERATING
                    iFreeIndex = GetFreeBusModIndex(False, oTmpBook)
                    If iFreeIndex > 0 Then
                        sSuffix = "Op" + CStr(iFreeIndex)
                        ' Set Procced to true
                        bProceed = True
                    Else
                    
                        If Not Application.ScreenUpdating Then
                            Application.ScreenUpdating = True
                        End If
                    
                        ' Prompt limit in Opcos
                        MsgBox Lang(309), vbExclamation, PROG_NAME
                        ' Don't proceed
                        bProceed = False
                        ' Exit loop
                        Exit For
                    End If
            End Select
        End If
        ' Check if we can proceed
        If bProceed Then
            ' Set custom Error Message
            sErrMsg = Lang(310)
            
            ' Check if we have the Import_FF file to use
            If WorkBookExists("Import_FF.xls") Then
                ' Check if business
                If bIsBusiness Then
                    ' Use Business Data sheet from Import FF
                    Set oDataSheet = Run("Import_FF.xls!GetBusinessDataSheet")
                Else
                    ' Use Personal Data sheet from Import FF
                    Set oDataSheet = Run("Import_FF.xls!GetPersonalDataSheet")
                End If
            Else
                ' Grab the Data Sheet from the fact finder
                Set oDataSheet = oCollFFWkBks(iCnt).Sheets("data_sheet")
            End If
            
            ' Reset Custom Error Message
            sErrMsg = ""
            ' Intialize Column Counter
            iCol = 1
            
            ' Check if show progress
            If bshowProgress Then
                iProgTotal = Application.WorksheetFunction.CountA(oDataSheet.Rows(1))
                Load frmProgress
                frmProgress.Caption = Replace(Lang(311), ": %FFNAME%", "")
                frmProgress.SetProgress 0, Lang(312)
                frmProgress.Display
            End If
            
            ' Loop through the Data Sheet
            Do Until oDataSheet.Cells(1, iCol).Value = ""
            
                If bshowProgress Then
                    iProgCnt = iProgCnt + 1
                    frmProgress.SetProgress iProgCnt / iProgTotal * 100
                End If
            
                ' Grab Book Name
                sBkName = Replace(oDataSheet.Cells(1, iCol).Value, "###", sSuffix)
                ' Grab Include Flag
                bBkInclude = CBool(oDataSheet.Cells(2, iCol).Value)
                ' Grab Copy Range location
                sRngCopy = oDataSheet.Cells(3, iCol).Value
                ' Grab Paste Range location
                sRngPaste = oDataSheet.Cells(4, iCol).Value
                ' Check if WorkBook is to be included
                If bBkInclude Then
                    
                    If bshowProgress Then
                        frmProgress.SetProgress iProgCnt / iProgTotal * 100, GetModuleName(sBkName)
                    End If
                    
                    ' Check if workbook already exists
                    If Not WorkSheetExists(oTmpBook, sBkName) Then
                        ' Add new Sheet at the end of sheets
                        Set oTargetDataSheet = oTmpBook.Worksheets.Add(After:=oTmpBook.Sheets(oTmpBook.Sheets.Count))
                        ' Rename the new sheet
                        oTargetDataSheet.name = sBkName
                        ' Register name on target system sheet
                        oTmpBook.Sheets(1).Cells(oTmpBook.Sheets.Count, 1).Value = sBkName
                        ' Check if we have defaults workbook so we can initialize using default workbook
                        If Not oDefaultsBk Is Nothing Then
                            ' Set Custom Error Message
                            sErrMsg = Replace(Lang(313), "%MODULE%", sBkName)
                            ' Get the corresponding sheet in Defaults WorkBook
                            Set oSourceDataSheet = Workbooks(oDefaultsBk.name).Sheets(sBkName)
                            ' Clear Custom Error message
                            sErrMsg = ""
                            ' Check if sheet was found
                            If Not oSourceDataSheet Is Nothing Then
                                ' Copy Data Range
                                oSourceDataSheet.Range(DATA_RANGE).Copy
                                ' Paste Data Range
                                oTargetDataSheet.Range(DATA_RANGE).PasteSpecial xlPasteValues, , False
                                ' Check if Name is Perinfo
                                If UCase(sBkName) = "PERINFO.XLS" Then
                                    ' Copy Variables Range
                                    oSourceDataSheet.Range(PERINFO_ADV_RANGE).Copy
                                    ' Paste Variables Range
                                    oTargetDataSheet.Range(PERINFO_ADV_RANGE).PasteSpecial xlPasteValues, , False
                                    ' Set source sheet to be the Variables Sheet in Opened Module Perinfo
                                    Set oSourceDataSheet = Workbooks("Perinfo.xls").Sheets("Variables")
                                    ' Check if the source sheet exist
                                    If Not oSourceDataSheet Is Nothing Then
                                        ' Copy the additional values from Perinfo Variables sheet, this will save the Notes from the fact finder
                                        oSourceDataSheet.Range(PERINFO_ADV_RANGE).Copy
                                        ' Paste into Target sheet
                                        oTargetDataSheet.Range(PERINFO_ADV_RANGE).PasteSpecial xlPasteValues, , True
                                    End If
                                Else
                                    ' Copy Variables Range
                                    oSourceDataSheet.Range(ADV_RANGE).Copy
                                    ' Paste Variables Range
                                    oTargetDataSheet.Range(ADV_RANGE).PasteSpecial xlPasteValues, , False
                                End If
                            End If
                        End If
                    Else
                        ' Get existing sheet
                        Set oTargetDataSheet = oTmpBook.Sheets(sBkName)
                    End If
                    
                    ' Check if Range for paste is applicable
                    If Trim(sRngPaste) <> "N/A" Then
                        ' Unite the Data (Copy the data from fact finder to client file)
                        UniteData oDataSheet.Range(sRngCopy), oTargetDataSheet.Range(sRngPaste)
                    End If
                End If
                ' Increment Column Count
                iCol = iCol + 1
            Loop
            
            If bshowProgress Then
                Unload frmProgress
            End If
            
            ' Disable Cut Copy Mode
            Application.CutCopyMode = False
            ' Check if we have DOB
            If oDataSheet.Range("A27").Value <> "" Then
                If IsDate(oDataSheet.Range("A27").Value) Or IsNumeric(oDataSheet.Range("A27").Value) Then
                    ' Set the Display Years
                    oTmpBook.Sheets("system").Range("F1").Value = Val(oDataSheet.Range("E6").Value) - (Year(Now) - Year(oDataSheet.Range("A27").Value)) + 1
                End If
            End If
            ' Copy Notes first
            Workbooks("Perinfo.xls").Sheets("Variables").Range(PERINFO_ADV_RANGE).Copy
            oTmpBook.Sheets("Perinfo.xls").Range(PERINFO_ADV_RANGE).PasteSpecial xlValues
            ' Store Fact Finder Notes
            StoreFFNotes oCollFFWkBks(iCnt)
            ' Copy Notes Once again for the changes
            Workbooks("Perinfo.xls").Sheets("Variables").Range(PERINFO_ADV_RANGE).Copy
            oTmpBook.Sheets("Perinfo.xls").Range(PERINFO_ADV_RANGE).PasteSpecial xlValues
            ' Reset Cut/Paste Mode
            Application.CutCopyMode = False
        End If
    Next iCnt
    
    ' Check if FF Import workbook does exists
    If WorkBookExists("Import_FF.xls") Then
        Workbooks("Import_FF.xls").Close False
    End If
    
    ' Check if Edition or Level of FP is Basic
    If iEdition = 0 Then
        ' Downgrade it first to avoid resaving twice
        DowngradeCF oTmpBook, "", True
    End If

    ' Return the new workbook
    Set ConvertFFToCF = oTmpBook
Exit Function
Err_Trap:
    If Not Application.ScreenUpdating Then
        Application.ScreenUpdating = True
    End If

    If sErrMsg = "" Then
        MsgBox Err.Description, vbCritical, PROG_NAME
    Else
        MsgBox sErrMsg, vbExclamation, PROG_NAME
    End If
    
    ' Close newly created workbook
    If Not oTmpBook Is Nothing Then
        oTmpBook.Close False
    End If
End Function

Public Function ConvertDFFToCF(ByRef oWorkBook As Workbook) As Workbook
' Converts a Detailed Fact Finder Workbook into a Client File
    Dim iCnt As Integer
    Dim iDiff As Integer
    Dim sDelRange As String
    
    ' Get difference in review date to remove variables data
    iDiff = oWorkBook.Sheets("Perinfo.xls").Range("A7").Offset(1000, 0).Value - oWorkBook.Sheets("Perinfo.xls").Range("A7").Value
    
    ' Figure out the delete range
    sDelRange = "D11:AZ" + CStr(10 + iDiff)
    
    ' The conversion process
    For iCnt = 1 To oWorkBook.Sheets.Count
        If UCase(oWorkBook.Sheets(iCnt).name) <> "SYSTEM" Then
            oWorkBook.Sheets(iCnt).Rows("1:1000").Delete Shift:=xlShiftUp
            If UCase(oWorkBook.Sheets(iCnt).name) <> "PERINFO.XLS" Then
                If iDiff > 0 Then
                    oWorkBook.Sheets(iCnt).Range(sDelRange).Delete Shift:=xlShiftUp
                End If
            End If
        End If
    Next iCnt
    
    ' Check Protection of DFF
    If oWorkBook.ProtectStructure Or oWorkBook.ProtectWindows Then
        ' Unprotect DFF
        oWorkBook.Unprotect "IWantToEditThisDFF"
    End If
    
    ' Protect the client file
    oWorkBook.Windows(1).Visible = False
    oWorkBook.Protect "IWantToEditThisClientFile", True, True
    
    ' Return the workbook
    Set ConvertDFFToCF = oWorkBook
End Function

Public Function DecryptSheets(ByRef theClientFile As Workbook, ByVal theAccessCode As String) As Boolean
' Decrypts the Encrypted sheet names of the client file workbook

    Dim oSht As Worksheet
    Dim bIsProtected As Boolean
    Dim bIsWindowsProtected As Boolean
    
    If theAccessCode <> CF_ACCD Then
        Exit Function
    End If
    
    bIsProtected = theClientFile.ProtectStructure
    bIsWindowsProtected = theClientFile.ProtectWindows
    If bIsProtected Then
        theClientFile.Unprotect CF_PASS
    End If
    For Each oSht In theClientFile.Sheets
        oSht.name = NRADec011304(oSht.name)
    Next oSht
    If bIsProtected Then
        theClientFile.Protect CF_PASS, bIsProtected, bIsWindowsProtected
    End If
    DecryptSheets = True
End Function

Public Function IsPWDProtectedCF(ByRef oClientFile As Workbook) As Boolean
' Returns True if the client file workbook is password protect with a user defined password
On Error Resume Next
    ' Check first for PWD Protection
    IsPWDProtectedCF = oClientFile.Worksheets("system").Range("N145").Value <> ""
End Function

Public Function VerifyCFPWD(ByRef oClientFile As Workbook) As Boolean
' Prompt user for a password to verify if it matches the client file PWD. Skip if no PWD

    ' Check if not Similar to current user's password
    If oClientFile.Worksheets("system").Range("N145").Value <> Workbooks("fpssys.xls").Sheets("system").Range("N145").Value Then
        ' Prompt for password
        VerifyCFPWD = Run("FPS.xls!IsClientFileAuthenticated", oClientFile)
    Else
        ' Return true since the same
        VerifyCFPWD = True
    End If

End Function

Public Function IsDowngradeRequired(ByRef oClientFile As Workbook) As Boolean
' Return True if the client file needs to be downgraded
    Dim iCnt As Integer
    Dim iModAccess As Integer
    
    ' Iterate through the sheets except the first sheet which is "system"
    For iCnt = 2 To oClientFile.Sheets.Count
        ' Get the ModuleAccess
        iModAccess = Run("FPS.xls!ModuleAccess", oClientFile.Sheets(iCnt).name)
        ' Check if module access is not enough
        If iModAccess <= 0 Then
            ' Return True
            IsDowngradeRequired = True
            ' Exit the Loop
            Exit For
        End If
    Next iCnt
End Function

Public Function DowngradeCF(ByRef oClientFile As Workbook, ByVal theSaveFilePathName As String, Optional ByVal bNoSave As Boolean = False) As Boolean
' Downgrades the client file workbook
On Error Resume Next
    
    Dim iCnt As Integer
    Dim oSysSht As Worksheet
    Dim bProtStruct As Boolean
    Dim bProtWin As Boolean
    Dim iRecCnt As Integer
    Dim oFileSys As New Scripting.FileSystemObject
    
    ' Get the System Sheet
    Set oSysSht = oClientFile.Sheets("system")
    ' Check if we found it
    If Not oSysSht Is Nothing Then
        ' Clear the 1st column in the sheet (contains a list of modules)
        oSysSht.Columns(1).ClearContents
        ' Initialize List Counter
        iRecCnt = 1
        ' Initialize src counter
        iCnt = 1
        ' Iterate through the workbooks
        Do Until iCnt > oClientFile.Sheets.Count
            ' Check if theModule Access is zero
            If Run("FPS.xls!ModuleAccess", oClientFile.Sheets(iCnt).name) = 0 Then
                ' Get Protection Settings
                bProtStruct = oClientFile.ProtectStructure
                bProtWin = oClientFile.ProtectWindows
                ' Check if any protection was made
                If bProtStruct Or bProtWin Then
                    ' Unprotect client file
                    oClientFile.Unprotect CF_PASS
                End If
                ' Remove the sheet
                Application.DisplayAlerts = False
                oClientFile.Sheets(iCnt).Delete
                Application.DisplayAlerts = True
                ' Reprotect client file if previously protected
                If bProtStruct Or bProtWin Then
                    ' Protect client file
                    oClientFile.Protect CF_PASS, bProtStruct, bProtWin
                End If
            Else
                ' Check if name is not 'System'
                If UCase(oClientFile.Sheets(iCnt).name) <> "SYSTEM" Then
                    ' Check if module is one of Standard or Business Modules
                    If Run("FSP.xls!IsStandardModule", oClientFile.Sheets(iCnt).name) Or Run("FPS.xls!IsBusinessModule", oClientFile.Sheets(iCnt).name) Then
                        ' Add the Module Workbook name to the list
                        oSysSht.Cells(iRecCnt + 1, 1).Value = oClientFile.Sheets(iCnt).name
                        ' Increment list counter
                        iRecCnt = iRecCnt + 1
                        ' Increment src counter
                        iCnt = iCnt + 1
                    Else
                        ' Get Protection Settings
                        bProtStruct = oClientFile.ProtectStructure
                        bProtWin = oClientFile.ProtectWindows
                        ' Check if any protection was made
                        If bProtStruct Or bProtWin Then
                            ' Unprotect client file
                            oClientFile.Unprotect CF_PASS
                        End If
                        ' Remove the sheet
                        Application.DisplayAlerts = False
                        oClientFile.Sheets(iCnt).Delete
                        Application.DisplayAlerts = True
                        ' Reprotect client file if previously protected
                        If bProtStruct Or bProtWin Then
                            ' Protect client file
                            oClientFile.Protect CF_PASS, bProtStruct, bProtWin
                        End If
                    End If
                Else
                    ' Increment src counter
                    iCnt = iCnt + 1
                End If
            End If
        Loop

        ' Check if we don't want to save (just downgrade)
        If bNoSave Then
            DowngradeCF = True
            Exit Function
        End If

        ' Check if Previous file is DB Based
        If CFIsDBBased(oClientFile) Then
            ' Unlock Previous File
            UnlockClient oFileSys.GetBaseName(oClientFile.name)
        End If

        ' Save the file as
        Application.DisplayAlerts = False
        Application.StatusBar = Lang(75)
        UniversalSaveAs oClientFile, Replace(theSaveFilePathName, ":\\", ":\")
        Application.StatusBar = False
        Application.DisplayAlerts = True
        
        ' Check if new file is db based
        If CFIsDBBased(oClientFile) Then
            ' Lock Current File
            LockClient oFileSys.GetBaseName(oClientFile.name)
        End If
        
        ' Return True
        DowngradeCF = True
    End If
End Function

Public Function IsGoalsNeedShifting(ByRef oClientFile As Workbook) As Boolean
' Returns true if it detects that Goals & Objectives will need shifting
On Error Resume Next
    IsGoalsNeedShifting = (Application.WorksheetFunction.CountA(oClientFile.Sheets("Perinfo.xls").Range("F10:G32")) > 0)
End Function

Public Function ShiftGoals(ByRef oClientFile As Workbook) As Boolean
' Shifts the location of Goals from Column F to H
    On Error GoTo Err_Trap
    ' Move the Goals & Objectives 2 columns to the right
    oClientFile.Sheets("Perinfo.xls").Columns("F:F").Insert Shift:=xlToRight
    oClientFile.Sheets("Perinfo.xls").Columns("F:F").Insert Shift:=xlToRight
    ' Return True
    ShiftGoals = True
Exit Function
Err_Trap:
End Function

Public Function GetCFDefaultsFile(ByRef oClientFile As Workbook) As Workbook
' Returns the workbook of the defaults file specified in the client file workbook
    On Error Resume Next
    GetCFDefaultsFile = oClientFile.Sheets("system").Range("D1").Value
End Function

Public Function OpenCFModules(ByVal aList As Variant, Optional ByVal bResetIfExists As Boolean = True, Optional ByVal bStartFromScratch As Boolean, Optional ByVal bshowProgress As Boolean = True) As Boolean
' Opens the workbooks indicated on the list passed or if already open just resets the data, close unused
    Dim oTmpBk As Workbook
    Dim iCnt As Integer
    Dim sDefFile As String
    Dim oDefBk As Workbook
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sActiveW As String
    Dim sActiveS As String
    Dim bScr As Boolean
    Dim bEvt As Boolean
    Dim bOpenDetProj As Boolean
    Dim bOpenRCNeeds As Boolean
    Dim vArray As Variant
    Dim oTmpSht As Worksheet
    Dim iModAccess As Integer
    Dim iEdition As Integer
    Dim bBusMod(5) As Boolean
    Dim aPostFx As Variant
    Dim iBusCnt As Integer
    Dim bBusMain As Boolean
    Dim iProgCnt As Integer
    
    ChDir ThisWorkbook.path

    ' Check if aList is an array
    If IsArray(aList) Then
        
        ' Gather initial screen settings
        sActiveW = ActiveWorkbook.name
        sActiveS = ActiveSheet.name
        bScr = Application.ScreenUpdating
        bEvt = Application.EnableEvents
        
        ' Disable Screen updating
        Application.ScreenUpdating = False
        Application.EnableEvents = False
    
        ' Check if want to show progress
        If bshowProgress Then
            Load frmProgress
            frmProgress.Caption = Lang(76)
            frmProgress.SetProgress 0, Lang(77)
            frmProgress.Display
        End If

        ' Check if user wants to start from scratch
        If bStartFromScratch Then
            ' Close all other modules first but retain Perinfo
            CloseStandardModules
            CloseMonteSim
            CloseMiscDocuments True
        End If
        
        ' Get Default Workbook
        sDefFile = oFileSys.GetFileName(Run("FPS.xls!GetDefaultsFileName"))
        If WorkBookExists(sDefFile) Then
            Set oDefBk = Workbooks(sDefFile)
        Else
            sDefFile = GetDefFileFullPath(sDefFile)
            If sDefFile <> "" Then
                Set oDefBk = Workbooks.Open(sDefFile, False)
            Else
                MsgBox Lang(335), vbCritical, PROG_NAME
                GoTo Clean_Exit
            End If
        End If

        ' Get current Edition
        iEdition = Run("FPS.xls!GetEdition")
        
        ' Init Progress Counter
        iProgCnt = 0
        
        ' Iterate through the elements of the array
        For iCnt = LBound(aList) To UBound(aList)
            
            ' Skip Main
            If aList(iCnt) = "Main" Then
                iCnt = iCnt + 1
                iProgCnt = iProgCnt + 1
                If iCnt > UBound(aList) Then
                    Exit For
                End If
            End If
            
            If bshowProgress Then
                iProgCnt = iProgCnt + 1
                frmProgress.SetProgress iProgCnt / (UBound(aList) + 1) * 100, GetModuleName(aList(iCnt))
            End If
            
            ' Check if not yet flagged for Detailed Projections
            If Not bOpenDetProj Then
                ' Flag for Detailed Projections
                Select Case LCase(aList(iCnt))
                    Case "rcneeds.xls", "ecneeds.xls", "scneeds1.xls", "scneeds2.xls", "disability1.xls", "disability2.xls", "taxation1.xls", "taxation2.xls", "cashflow.xls", "lifestyle.xls", "networth.xls", "compare.xls"
                        bOpenDetProj = True
                End Select
            End If
            
            ' Check if not yet flagged for RCNeeds
            If Not bOpenRCNeeds Then
                ' Flag for RCNeeds
                Select Case LCase(aList(iCnt))
                    Case "rcneeds.xls", "ecneeds.xls", "scneeds1.xls", "scneeds2.xls", "disability1.xls", "disability2.xls"
                        bOpenRCNeeds = True
                End Select
            End If
            
            ' If Business edition, determine if we need to open additional business modules
            If iEdition >= 3 Then
                If Not bBusMod(0) Then
                    Select Case LCase(aList(iCnt))
                        Case "shareshd1.xls", "valueshd1.xls", "investhd1.xls", "lifeinshd1.xls", "realesthd1.xls", "debtshd1.xls", "loanshd1.xls"
                            bBusMod(0) = True
                    End Select
                End If
                If Not bBusMod(1) Then
                    Select Case LCase(aList(iCnt))
                        Case "shareshd2.xls", "valueshd2.xls", "investhd2.xls", "lifeinshd2.xls", "realesthd2.xls", "debtshd2.xls", "loanshd2.xls"
                            bBusMod(1) = True
                    End Select
                End If
                If Not bBusMod(2) Then
                    Select Case LCase(aList(iCnt))
                        Case "sharesop1.xls", "valuesop1.xls", "investop1.xls", "lifeinsop1.xls", "realestop1.xls", "debtsop1.xls", "loansop1.xls"
                            bBusMod(2) = True
                    End Select
                End If
                If Not bBusMod(3) Then
                    Select Case LCase(aList(iCnt))
                        Case "sharesop2.xls", "valuesop2.xls", "investop2.xls", "lifeinsop2.xls", "realestop2.xls", "debtsop2.xls", "loansop2.xls"
                            bBusMod(3) = True
                    End Select
                End If
                If Not bBusMod(4) Then
                    Select Case LCase(aList(iCnt))
                        Case "sharesop3.xls", "valuesop3.xls", "investop3.xls", "lifeinsop3.xls", "realestop3.xls", "debtsop3.xls", "loansop3.xls"
                            bBusMod(4) = True
                    End Select
                End If
                If Not bBusMod(5) Then
                    Select Case LCase(aList(iCnt))
                        Case "sharesop4.xls", "valuesop4.xls", "investop4.xls", "lifeinsop4.xls", "realestop4.xls", "debtsop4.xls", "loansop4.xls"
                            bBusMod(5) = True
                    End Select
                End If
            End If
            
            ' Check if WorkBook Exists
            If WorkBookExists(aList(iCnt)) Then
                ' Check if want to reset data
                If bResetIfExists Then
                    ApplyDefaultSetting oDefBk, aList(iCnt)
                End If
            Else
                ' Get the Module Access
                iModAccess = Run("FPS.xls!ModuleAccess", aList(iCnt))
                ' Check if Access is greater than zero and the file exists
                If (iModAccess > 0) And (oFileSys.FileExists(ThisWorkbook.path + "\" + aList(iCnt))) Then
                    ' Open the workbook
                    Set oTmpBk = Workbooks.Open(ThisWorkbook.path + "\" + aList(iCnt), False)
                    ' Set the Window Caption
                    oTmpBk.Windows(1).Caption = GetModuleName(oTmpBk.name)
                    ' Apply defaults settings
                    ApplyDefaultSetting oDefBk, aList(iCnt)
                    ' Determine the kind of access
                    Select Case iModAccess
                        Case 1
                            ' Check if windows is still visible
                            If oTmpBk.Windows(1).Visible Then
                                ' Check if structure is protected
                                If Workbooks(aList(iCnt)).ProtectWindows Then
                                    ' Unprotect WorkBook first
                                    Workbooks(aList(iCnt)).Unprotect WKBPD
                                    ' Hide the Entire Workbook
                                    oTmpBk.Windows(1).Visible = False
                                    ' Protect it after hidding
                                    Workbooks(aList(iCnt)).Protect WKBPD, True, True
                                Else
                                    ' Hide the Entire Workbook
                                    oTmpBk.Windows(1).Visible = False
                                    ' Protect it after hidding
                                    Workbooks(aList(iCnt)).Protect WKBPD, True, True
                                End If
                            End If
                        Case 2
                            ' Check Spreadsheet sheet exists
                            If WorkSheetExists(Workbooks(aList(iCnt)), "Spreadsheet") Then
                                ' Get reference to Spreadsheet sheet
                                Set oTmpSht = Workbooks(aList(iCnt)).Sheets("Spreadsheet")
                                ' Check if structure is protected
                                If Workbooks(aList(iCnt)).ProtectStructure Then
                                    ' Unprotect WorkBook first
                                    Workbooks(aList(iCnt)).Unprotect WKBPD
                                    ' Hide Very Well the Spreadsheet sheet
                                    oTmpSht.Visible = xlSheetVeryHidden
                                    ' Re-Protect Workbook
                                    Workbooks(aList(iCnt)).Protect WKBPD, True, False
                                Else
                                    ' Hide Very Well the Spreadsheet sheet
                                    oTmpSht.Visible = xlSheetVeryHidden
                                End If
                            End If
                    End Select
                End If
            End If
            
        ' Init Chart Events for Excel 2007 Fix
        InitEachModuleChartEvent aList(iCnt)
        
        Next iCnt

        ' Check if flagged to open detailed proj
        If bOpenDetProj Then
            ' Init Progress counter
            iProgCnt = 0
            
            If bshowProgress Then
                frmProgress.Caption = Lang(314)
            End If
            
            ' Open Detailed Projections Modules
            ' Check if client file has spouse
            If m_HasSpouseOnOpenCF Then
                ' Use an array containing the Taxation2 module
                vArray = Array("Taxation1.xls", "Taxation2.xls", "Cashflow.xls", "Lifestyle.xls", "Networth.xls", "Compare.xls")
            Else
                ' Use an array without the Taxation2 Module
                vArray = Array("Taxation1.xls", "Cashflow.xls", "Lifestyle.xls", "Networth.xls", "Compare.xls")
            End If
            For iCnt = LBound(vArray) To UBound(vArray)
                iProgCnt = iProgCnt + 1
                If Not WorkBookExists(vArray(iCnt)) Then
                    ' Check Module Access
                    iModAccess = Run("FPS.xls!ModuleAccess", vArray(iCnt))
                    If iModAccess > 0 Then
                        If bshowProgress Then
                            frmProgress.SetProgress iProgCnt / (UBound(vArray) + 1) * 100, GetModuleName(vArray(iCnt))
                        End If
                        Workbooks.Open(ThisWorkbook.path + "\" + vArray(iCnt), False).Windows(1).Caption = GetModuleName(vArray(iCnt))
                        ApplyDefaultSetting oDefBk, vArray(iCnt)
                    End If
                End If
            Next iCnt
        End If
        
        ' Check if flagged to open RCNeeds
        If bOpenRCNeeds Then
            Dim sRCNeeds As String
            sRCNeeds = "Rcneeds.xls"
            ' Check if RCNeeds already exists
            If Not WorkBookExists(sRCNeeds) Then
                ' Check Module Access
                iModAccess = Run("FPS.xls!ModuleAccess", sRCNeeds)
                If iModAccess > 0 Then
                    If bshowProgress Then
                        frmProgress.SetProgress 100, GetModuleName(sRCNeeds)
                    End If
                    Workbooks.Open(ThisWorkbook.path + "\" + sRCNeeds, False).Windows(1).Caption = GetModuleName(sRCNeeds)
                    ApplyDefaultSetting oDefBk, sRCNeeds
                End If
            End If
        End If
        
        ' Check if flagged to open additional business modules
        If iEdition >= 3 Then
            iProgCnt = 0
            If bshowProgress Then
                frmProgress.Caption = Lang(78)
            End If
            vArray = Array("Shares", "Values", "Invest")
            aPostFx = Array("Hd1", "Hd2", "Op1", "Op2", "Op3", "Op4")
            For iCnt = LBound(bBusMod) To UBound(bBusMod)
                If bBusMod(iCnt) Then
                    bBusMain = True
                    For iBusCnt = LBound(vArray) To UBound(vArray)
                        iProgCnt = iProgCnt + 1
                        If Not WorkBookExists(vArray(iBusCnt) + aPostFx(iCnt) + ".xls") Then
                            Workbooks.Open(ThisWorkbook.path + "\" + vArray(iBusCnt) + aPostFx(iCnt) + ".xls", False).Windows(1).Caption = GetModuleName(vArray(iBusCnt) + aPostFx(iCnt) + ".xls")
                            ApplyDefaultSetting oDefBk, vArray(iBusCnt) + aPostFx(iCnt) + ".xls"
                            If bshowProgress Then
                                frmProgress.SetProgress iProgCnt / (UBound(bBusMod) + 1) * (UBound(vArray) + 1) * 100, GetModuleName(vArray(iBusCnt) + aPostFx(iCnt) + ".xls")
                            End If
                        End If
                        If bshowProgress Then
                            frmProgress.SetProgress iProgCnt / (UBound(bBusMod) + 1) * (UBound(vArray) + 1) * 100
                        End If
                    Next iBusCnt
                End If
                iProgCnt = (iCnt + 1) * 6
                If bshowProgress Then
                    frmProgress.SetProgress iProgCnt / (UBound(bBusMod) + 1) * (UBound(vArray) + 1) * 100
                End If
            Next iCnt
            If bBusMain Then
                If Not WorkBookExists("BusinessNW.xls") Then
                    Workbooks.Open(ThisWorkbook.path + "\BusinessNW.xls", False).Windows(1).Caption = GetModuleName("BusinessNW.xls")
                    ApplyDefaultSetting oDefBk, "BusinessNW.xls"
                End If
                If Not WorkBookExists("BusinessInc.xls") Then
                    Workbooks.Open(ThisWorkbook.path + "\BusinessInc.xls", False).Windows(1).Caption = GetModuleName("BusinessInc.xls")
                    ApplyDefaultSetting oDefBk, "BusinessInc.xls"
                End If
            End If
        End If
        
        ' Return True
        OpenCFModules = True
        
Clean_Exit:
        ' Hide Progress
        If bshowProgress Then
            Unload frmProgress
        End If
        
        ' Re-Enable screen updating
        If WorkBookExists(sActiveW) Then
            If WorkSheetExists(Workbooks(sActiveW), sActiveS) Then
                If ActiveWorkbook.name <> sActiveW Or ActiveSheet.name <> sActiveS Then
                    Workbooks(sActiveW).Sheets(sActiveS).Activate
                End If
            Else
                If WorkBookExists("Fps.xls") Then
                    Run "FPS.xls!ActivateMainPage"
                End If
            End If
        Else
            If WorkBookExists("Fps.xls") Then
                Run "FPS.xls!ActivateMainPage"
            End If
        End If
        Application.EnableEvents = bEvt
        If Val(Application.ScreenUpdating) <> Val(bScr) Then
            Application.ScreenUpdating = bScr
        End If
        
    End If
End Function

Public Function GetCFScenarioCount(ByRef oClientFile As Workbook) As Integer
' Counts the number of scenarios in the client file workbook
    On Error Resume Next
    GetCFScenarioCount = Application.WorksheetFunction.CountA(oClientFile.Sheets("system").Range("H1:H10"))
End Function

Public Function SelectScenario(ByRef theClientFile As Workbook, Optional ByVal theMessage As String, Optional ByVal bNoCancel As Boolean = False) As Integer
' Allows user to choose a scenario, returns a -1 if cancelled
    Dim bScr As Boolean
    bScr = Application.ScreenUpdating
    If Not theClientFile Is Nothing Then
        Load frmPrimScen
        frmPrimScen.Caption = Lang(79)
        frmPrimScen.SetClientFile theClientFile
        If theMessage = "" Then
            frmPrimScen.lblMsg.Caption = Lang(80)
        Else
            frmPrimScen.lblMsg.Caption = theMessage
        End If
        If Val(Application.ScreenUpdating) <> Val(True) Then
            Application.ScreenUpdating = True
        End If
        If bNoCancel Then
            frmPrimScen.cmdCancel.Enabled = False
        End If
        frmPrimScen.Show
        If frmPrimScen.m_ButtonClicked = frmPrimScen.cmdOK.Caption Then
            SelectScenario = frmPrimScen.m_SelectedScenario
            theClientFile.Sheets("system").Range("G1").Value = frmPrimScen.lvwScenList.SelectedItem.Text
        Else
            SelectScenario = -1
        End If
        frmPrimScen.m_ForceClose = True
        Unload frmPrimScen
        If Val(Application.ScreenUpdating) <> Val(bScr) Then
            Application.ScreenUpdating = bScr
        End If
    End If
End Function

Public Function CopyCFToModule(ByRef oClientFile As Workbook, ByVal iScenarioNumber As Integer, Optional ByVal bshowProgress As Boolean = True) As Boolean
' Copies the data from the client file workbook to the Modules based on the scenario indicated, assumes Modules were already loaded
On Error GoTo Err_Trap
    Dim oSht As Worksheet
    Dim iOffSet As Integer
    Dim iColCnt As Integer
    Dim iRowCnt As Integer
    Dim sActiveW As String
    Dim sActiveS As String
    Dim bScr As Boolean
    Dim bEvt As Boolean
    Dim iProgCnt As Integer
    
    ' Gather initial screen settings
    sActiveW = ActiveWorkbook.name
    sActiveS = ActiveSheet.name
    bScr = Application.ScreenUpdating
    bEvt = Application.EnableEvents
    
    ' Disable Screen updating
    Application.ScreenUpdating = False
    Application.EnableEvents = False

    ' Get the offset number
    iOffSet = 1000 * iScenarioNumber
    
    ' Check if want to show progress
    If bshowProgress Then
        Load frmProgress
        frmProgress.Caption = Lang(81)
        frmProgress.SetProgress 0, Lang(82)
        frmProgress.Display
    End If
    
    ' Iterate through sheets
    For Each oSht In oClientFile.Sheets
    
        ' Increment progress counter
        iProgCnt = iProgCnt + 1
        
        ' Check if sheet name is not "system"
        If UCase(oSht.name) <> "SYSTEM" Then
            ' Progress
            If bshowProgress Then
                frmProgress.SetProgress iProgCnt / oClientFile.Sheets.Count * 100, GetModuleName(oSht.name)
            End If
            
            ' Check if Module exists
            If WorkBookExists(oSht.name) Then
                
                ' Apply the settings from Client File
                ApplyDefaultSetting oClientFile, oSht.name, True, iOffSet
                
                ' Determine the current module name
                Select Case UCase(oSht.name)
                    Case "PERINFO.XLS"
                        ' special treatment for Perinfo.xls
                        ' take the 4 special sheets from Perinfo.xls
                        ' and put rows 10 to 32 of columns H,I,J,K skip by 2, to the
                        ' corresponding sheets of Perinfo.xls
                        For iColCnt = 8 To 11
                            With Workbooks(oSht.name).Sheets(iColCnt)
                                For iRowCnt = 10 To 32 Step 2
                                    ' we need to add the .Value property here instead
                                    '  of using the default property. For some reason,
                                    '  extremely long text strings cannot be assigned
                                    '  correctly (becomes #VALUE) without that.
                                    .Protect SHTPD, UserInterfaceOnly:=True
                                    CopyLargeValue oSht.Cells(iRowCnt, iColCnt), .Cells(iRowCnt, 3)
                                    .Cells(iRowCnt, 3).Rows.AutoFit
                                    .Protect SHTPD, True, True, True
                                Next
                            End With
                        Next
                End Select
            End If
        End If
    Next oSht

    ' Also copy data for Exec Summary
    If WorkBookExists("Mainpage.xls") Then
        Run "Mainpage.xls!LoadFromClientFile", iScenarioNumber
    End If
    
    ' Hide Progress
    If bshowProgress Then
        Unload frmProgress
    End If
    
    ' Re-Enable screen updating
    If WorkBookExists(sActiveW) Then
        If WorkSheetExists(Workbooks(sActiveW), sActiveS) Then
            If ActiveWorkbook.name <> sActiveW Or ActiveSheet.name <> sActiveS Then
                Workbooks(sActiveW).Sheets(sActiveS).Activate
            End If
        Else
            If WorkBookExists("Fps.xls") Then
                Run "FPS.xls!ActivateMainPage"
            End If
        End If
    Else
        If WorkBookExists("Fps.xls") Then
            Run "FPS.xls!ActivateMainPage"
        End If
    End If
    Application.EnableEvents = bEvt
    If Val(Application.ScreenUpdating) <> Val(bScr) Then
        Application.ScreenUpdating = bScr
    End If
    
    ' Return True
    CopyCFToModule = True
Exit Function
Err_Trap:
    MsgBox Err.Description, vbCritical
End Function

Public Function GetCurrentScenarioNumber(ByRef oClientFile As Workbook) As Integer
' Returns the current scenario Number
On Error GoTo Err_Trap
    Dim iCnt As Integer
    
    If Not (oClientFile.Sheets("system").Range("G1").Value = "" Or UCase(oClientFile.Sheets("system").Range("G1").Value) = UCase(Lang(34))) Then
        For iCnt = 1 To 10
            If oClientFile.Sheets("system").Cells(iCnt, 8).Value = oClientFile.Sheets("system").Range("G1").Value Then
                GetCurrentScenarioNumber = iCnt
                Exit For
            End If
        Next iCnt
    End If
Exit Function
Err_Trap:
End Function

Private Function GetWorkbookList(ByRef oClientFile As Workbook, Optional ByVal bBasedOnSheets As Boolean = True) As Variant
    Dim oTmpSht As Worksheet
    Dim aList() As String
    Dim iCnt As Integer
    Dim bHasMainPage As Boolean
    
    If bBasedOnSheets Then
    ' Based on sheets
        For Each oTmpSht In oClientFile.Sheets
            If UCase(oTmpSht.name) <> "SYSTEM" Then
                ReDim Preserve aList(iCnt) As String
                aList(iCnt) = oTmpSht.name
                If UCase(aList(iCnt)) = "MAINPAGE.XLS" Then
                    bHasMainPage = True
                End If
                iCnt = iCnt + 1
            End If
        Next oTmpSht
    Else
    ' Based on list on system sheet
        iCnt = 2
        Do Until oClientFile.Sheets("system").Cells(iCnt, 1) = ""
            ReDim Preserve aList(iCnt - 2) As String
            aList(iCnt - 2) = oClientFile.Sheets("system").Cells(iCnt, 1)
            If UCase(aList(iCnt - 2)) = "MAINPAGE.XLS" Then
                bHasMainPage = True
            End If
            iCnt = iCnt + 1
        Loop
    End If
    
    ' Add Mainpage if not in list
    If bHasMainPage = False Then
        ReDim Preserve aList(UBound(aList) + 1) As String
        aList(UBound(aList)) = "Mainpage.xls"
    End If
    
    GetWorkbookList = aList
End Function

Private Function NRADec011304(ByVal theText As String) As String
    Dim iCnt As Integer
    Dim sCurr As String
    Dim sNew As String
    Dim iPos As Integer
    Dim sMid As String
    Dim iTblLen As Integer
    Dim iFactor As Integer
    
    Const sCharTbl = "obf4B7KHl6xm9tFij01EMWvSuVgyec3zsTDOUP-kpNQZq CRwG.8XrhndI52ALJaY"

    iTblLen = Len(sCharTbl)

    theText = StrReverse(theText)
    
    For iCnt = 1 To Len(theText)
        sCurr = Mid(theText, iCnt, 1)
        iPos = (InStr(sCharTbl, sCurr) - 17) + iTblLen
                
        If iCnt > 1 Then
            iFactor = Asc(Mid(theText, iCnt - 1, 1))
            iPos = ((iPos - iFactor) + iTblLen) Mod iTblLen
        Else
            iPos = iPos Mod iTblLen
        End If
        If iPos = 0 Then
            iPos = iTblLen
        End If
        
        If iPos > 0 Then
            sMid = Mid(sCharTbl, iPos, 1)
        Else
            sMid = Mid(sCharTbl, Len(sCharTbl) + iPos, 1)
        End If
        sNew = sNew + sMid
    Next iCnt

    NRADec011304 = sNew
End Function

Public Function GetEmptyCFWorkBook(Optional ByVal theDefaultsFile As String, Optional ByVal theViewRange As Integer = 60, Optional ByVal theLanguage As Integer = 1) As Workbook
' Returns an empty Client File Workbook

    Dim iTmpSheetsInNewWorkBook As Integer
    Dim oTmpBook As Workbook
    Dim oActiveWin As Window
    Dim bScr As Boolean
    Dim bEvt As Boolean
    
    ' Disable Screen Updates
    Set oActiveWin = ActiveWindow
    bScr = Application.ScreenUpdating
    bEvt = Application.EnableEvents
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.StatusBar = ""
    
    ' Store num sheets in new workbook
    iTmpSheetsInNewWorkBook = Application.SheetsInNewWorkbook
    ' Set 1 sheet in new workbook
    Application.SheetsInNewWorkbook = 1
    ' Create a new WorkBook resembling a Client File Workbook
    Set oTmpBook = Workbooks.Add
    ' Hide the new workbook
    oTmpBook.Windows(1).Visible = False
    ' Set the num of sheets in new workbook back to original
    Application.SheetsInNewWorkbook = iTmpSheetsInNewWorkBook
    ' Rename first sheet
    oTmpBook.Sheets(1).name = "system"
    ' Set Language Flag (1=English, 2=French) 'Reserved for future use
    oTmpBook.Sheets(1).Range("E1").Value = theLanguage
    ' Set the Defaults file
    oTmpBook.Sheets(1).Range("D1").Value = theDefaultsFile
    ' Set the View Range
    oTmpBook.Sheets(1).Range("F1").Value = theViewRange
    ' Return the New WorkBook
    Set GetEmptyCFWorkBook = oTmpBook
    ' CleanUp
    Set oTmpBook = Nothing
    
    ' Restore Screen Updates
    If Not ActiveWindow Is oActiveWin Then
        oActiveWin.Activate
    End If
    If Val(Application.ScreenUpdating) <> Val(bScr) Then
        Application.ScreenUpdating = bScr
    End If
    Application.EnableEvents = bEvt
    Application.StatusBar = False
    
End Function

Public Function IsValidFactFinderFile(ByRef theFFBook As Workbook, Optional ByVal iCoType As Integer = 0) As Boolean
    Dim aSheetList As Variant
    Dim iCnt As Integer
    Dim bRet As Boolean
    
    If iCoType = 0 Then
        bRet = True
        aSheetList = Array("Cover", "Page 1", "Page 2", "Page 3", "Page 4", "Page 5", "Page 6", "Page 7", "Page 8", "Page 9", "Page 2a", "Page 2b", "Page 3a", "Financial Snapshot", "calc1", "calc2")
        For iCnt = LBound(aSheetList) To UBound(aSheetList)
            bRet = bRet And WorkSheetExists(theFFBook, aSheetList(iCnt))
            If bRet = False Then
                Exit For
            End If
        Next iCnt
        IsValidFactFinderFile = bRet
    Else
        bRet = True
        aSheetList = Array("Cover", "Page 1", "Page 2", "Page 3", "Page 4", "calc1")
        For iCnt = LBound(aSheetList) To UBound(aSheetList)
            bRet = bRet And WorkSheetExists(theFFBook, aSheetList(iCnt))
            If bRet = False Then
                Exit For
            End If
        Next iCnt
        If bRet Then
            Select Case iCoType
                Case 1  ' If HoldCo
                    IsValidFactFinderFile = (UCase(theFFBook.Sheets("Page 1").Range("E5").Value) = "HOLDING COMPANY") Or (theFFBook.Sheets("Page 1").Range("E5").Value = "Soci|fffd|t|fffd| de portefeuille")
                Case 2  ' If OpCo
                    IsValidFactFinderFile = (UCase(theFFBook.Sheets("Page 1").Range("E5").Value) = "OPERATING COMPANY") Or (theFFBook.Sheets("Page 1").Range("E5").Value = "Soci|fffd|t|fffd| active")
                Case Else ' Any Business
                    IsValidFactFinderFile = ((UCase(theFFBook.Sheets("Page 1").Range("E5").Value) = "HOLDING COMPANY") Or (UCase(theFFBook.Sheets("Page 1").Range("E5").Value) = "OPERATING COMPANY")) Or (theFFBook.Sheets("Page 1").Range("E5").Value = "Soci|fffd|t|fffd| de portefeuille") Or (theFFBook.Sheets("Page 1").Range("E5").Value = "Soci|fffd|t|fffd| active")
            End Select
        Else
            IsValidFactFinderFile = False
        End If
    End If
    
End Function

Public Function IsValidBusinessFactFinderFile(ByVal theWorkBook As Workbook) As Boolean
    IsValidBusinessFactFinderFile = IsValidFactFinderFile(theWorkBook, 3)
End Function

Public Function GetCompanyType(ByRef theFactFinderFile As Workbook) As CompanyTypes
' Returns the company type of the given Factfinder file
On Error GoTo Err_Trap
    Select Case theFactFinderFile.Sheets("Page 1").Range("E5").Value
        Case "Holding Company", "Soci|fffd|t|fffd| de portefeuille"
            GetCompanyType = COTYPE_HOLDING
        Case "Operating Company", "Soci|fffd|t|fffd| active"
            GetCompanyType = COTYPE_OPERATING
    End Select
Exit Function
Err_Trap:
    GetCompanyType = COTYPE_UNKNOWN
End Function

Public Function GetFreeBusModIndex(ByVal bIsHoldCo As Boolean, ByRef theClientFile As Workbook) As Integer
' Returns the next available business module number (max 2 for Holdco, max 4 for Opco)
On Error GoTo Err_Trap

    Dim sBusType As String
    Dim iCnt As Integer
    Dim aModName As Variant
    Dim iTmpIndex As Integer
    Dim iIndexLimit As Integer
    Dim sTmpModName As String
    Dim bFound As Boolean
    
    aModName = Array("Shares", "Values", "Invest", "RealEst", "Debts", "Loans", "Lifeins")
    sBusType = IIf(bIsHoldCo, "Hd", "Op")
    iIndexLimit = IIf(bIsHoldCo, 2, 4)
    
    bFound = True
    iTmpIndex = 1
    Do Until (iTmpIndex > iIndexLimit) Or Not bFound
        bFound = False
        For iCnt = LBound(aModName) To UBound(aModName)
            sTmpModName = aModName(iCnt) + sBusType + CStr(iTmpIndex) + ".xls"
            If WorkSheetExists(theClientFile, sTmpModName) Then
                iTmpIndex = iTmpIndex + 1
                bFound = True
                Exit For
            End If
            DoEvents
        Next iCnt
        DoEvents
    Loop
    If bFound Then
        GetFreeBusModIndex = -1
    Else
        GetFreeBusModIndex = IIf(iTmpIndex > iIndexLimit, -1, iTmpIndex)
    End If
Exit Function
Err_Trap:
End Function

Public Function UniteData(ByRef theSourceRange As Range, ByRef theTargetRange As Range)
   ' This function is necessary because PasteSpecial SkipBlanks does not work if the cell
   ' contains a formula even when the cell value is blank. The Fact Finder may contain
   ' blank cells but contains formula, therefore PasteSpecial SkipBlanks will not work with it.
   
    Dim iCnt As Integer
    
    For iCnt = 1 To theSourceRange.Count
        If CStr(theSourceRange(iCnt).Value) <> "" Then
            theTargetRange(iCnt).Value = theSourceRange(iCnt).Value
        End If
    Next iCnt
    
End Function

Public Sub StoreFFNotes(ByVal theFFBook As Workbook)
' Grabs the notes from the fact finder and puts in the New Client File
    Dim oTmpSheet As Worksheet
    Dim iCnt As Integer
    Dim iRngCnt As Integer
    Dim oVarSheet As Worksheet
    Dim iVarRow As Integer
    Dim shtSys As Worksheet
    
    Set shtSys = Workbooks("FPS.xls").Sheets("system")
    
    Set oVarSheet = Workbooks("Perinfo.xls").Sheets("Variables")
    If Not oVarSheet Is Nothing Then
        iVarRow = 10 + Application.WorksheetFunction.CountA(oVarSheet.Range("D11:D111"))
        For Each oTmpSheet In theFFBook.Sheets
            Select Case oTmpSheet.name
                Case "Page 1", "Page 2", "Page 3", "Page 4", "Page 5", "Page 6", "Page 7", "Page 8", "Page 9", "Page 3a"
                    For iCnt = 4 To 45
'                        frmProgress.SetProgress (iCnt / 45) * 100, "Scanning notes from " + oTmpSheet.Name
                        If Not IsEmpty(oTmpSheet.Range("J" + CStr(iCnt)).Value) Then
                            For iRngCnt = 1 To shtSys.Range("RNG_" + UCase(Replace(oTmpSheet.name, " ", "_"))).Count
                                If IsInRange("J" + CStr(iCnt), shtSys.Range("RNG_" + UCase(Replace(oTmpSheet.name, " ", "_")))(iRngCnt)) Then
'                                    frmProgress.SetProgress (iCnt / 45) * 100, "Storing notes from " + oTmpSheet.Name
                                    iVarRow = iVarRow + 1
                                    oVarSheet.Range("D" + CStr(iVarRow)).Value = shtSys.Range("B" + CStr(shtSys.Range("RNG_" + UCase(Replace(oTmpSheet.name, " ", "_")))(iRngCnt).Row)).Value
                                    oVarSheet.Range("E" + CStr(iVarRow)).Value = CStr(oTmpSheet.Range("J" + CStr(iCnt)).Value) + " (" + oTmpSheet.name + ", J" + CStr(iCnt) + ")"
                                    Exit For
                                End If
                            Next iRngCnt
                        End If
                    Next iCnt
            End Select
        Next oTmpSheet
    End If
End Sub

Private Function IsInRange(ByVal theFindString As String, ByVal theRangeString As String) As Boolean
    Dim iCmp As Integer
    Dim iUpper As Integer
    Dim iLower As Integer
    Dim aVar As Variant
    
    aVar = Split(theRangeString, ":")
    iCmp = Val(Right(theFindString, Len(theFindString) - 1))
    iUpper = Val(Right(aVar(1), Len(aVar(1)) - 1))
    iLower = Val(Right(aVar(0), Len(aVar(0)) - 1))
    
    IsInRange = (iCmp > (iLower - 1)) And (iCmp < (iUpper + 1))
End Function

Public Sub CopyLargeValue(ByVal theSourceRange As Range, ByVal theTargetRange As Range)
    Dim iCnt As Integer
    Dim iStep As Integer
    
    iStep = 200
    theTargetRange.ClearContents
    
    For iCnt = 1 To Len(theSourceRange.Value) Step iStep
        theTargetRange.Value = theTargetRange.Value & Mid(theSourceRange.Value, iCnt, iStep)
    Next iCnt
End Sub

Public Function SelectClientFile(Optional ByVal bForSave As Boolean, Optional ByVal sPrefixForSave As String, Optional ByRef bSaveToDB As Boolean) As String
' Allows user to select a client file
    Dim vFileName As Variant
    
    If bForSave Then
        vFileName = GetSaveFileName(, sPrefixForSave, True, bSaveToDB)
    Else
        vFileName = GetOpenFileName(, True)
    End If
    If vFileName <> "False" Then
        SelectClientFile = vFileName
    End If
End Function

Public Function CFMainOpen() As Boolean
' Main Client File Open Routine
    Dim tCFInfo As ClientFileInfo
    Dim oCFBook As Workbook
    Dim oTmpCF As Workbook
    Dim bIsDBBased As Boolean
    Dim sMsg As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sTmpCFID As String
    Dim sLockBy As String
    Dim sPlanner As String
    
    If Not Application.ScreenUpdating Then
        Application.ScreenUpdating = True
    End If
    
    ' Check first if there is a client file loaded
    Set oTmpCF = Run("FPS.xls!GetClientFile")
    ' Check if client file found
    If Not oTmpCF Is Nothing Then
        ' Check if not read only
        If Not oTmpCF.ReadOnly Then
            ' Check if client file not already saved
            If Not oTmpCF.Saved Then
                ' Check if client file is db based
                bIsDBBased = CFIsDBBased(oTmpCF)
                ' Use diferent messages for DB Based CF
                sMsg = IIf(bIsDBBased, Lang(83), Lang(84))
                ' Check if not read only mode
                If Not Run("FPS.xls!IsReadOnlyMode") Then
                    ' Prompt user to save the Client File
                    Select Case MsgBox(sMsg, vbQuestion + vbYesNoCancel, PROG_NAME)
                        Case vbYes
                            ' Call the New Save Procedure
                            CFMainSave
                        Case vbCancel
                            Exit Function
                    End Select
                End If
            End If
        End If
    End If
    
    ' Select the Client file
    tCFInfo = GetOpenCFInfo(Not AllowedToUseDB)
    
    ' Check if a filename was returned
    If tCFInfo.FilePath <> "" Then
        ' Cleanup previous variable
        Set oTmpCF = Nothing
        
        ' Check if from DB
        If tCFInfo.FromDB Then
            ' Get CFID
            sTmpCFID = oFileSys.GetBaseName(tCFInfo.FilePath)
            ' Get Planner Name
            sPlanner = GetPlannerName
            ' Get Lock Info of Client File
            sLockBy = IsLockedBy(sTmpCFID)
            ' Check if client file is currently locked by others
            If sLockBy <> "" And sLockBy <> sPlanner Then
                ' Message, client file locked by others
                MsgBox Replace(Replace(Lang(85), "%CLIENTFILE%", tCFInfo.ScreenName), "%USER%", sLockBy), vbExclamation, PROG_NAME
                ' Exit
                Exit Function
            Else
                ' Lock the file
                LockClient sTmpCFID
            End If
        End If
        
        ' Open the Client File
        Set oCFBook = OpenCFFile(tCFInfo.FilePath, tCFInfo.ScreenName)
        ' Check if a workbook was returned
        If Not oCFBook Is Nothing Then
        
            ' Show Data Entry screens
            If Not Run("FPS.xls!IsReadOnlyMode") Then
                ' Update Fund Details
                Run "FPS.xls!UpdateFunds", oCFBook.name

                ' Bring Up the Data Entry Wizard
                Run "DataEntry.xls!DataEntry", "", 1
                
                ' Check if Has Business Modules
                If Run("FPS.xls!HasBusinessModule") Then
                    ' Run Data Entry for Business in Wizard Mode
                    Run "DataEntryBusiness.xls!DataEntry", 1
                End If
            Else
                ' Disable data sheet since read only
'                Run "FPS.xls!DisableDataSheet"
            End If
                
            ' Calculate
            Calculate
            
            ' Set Spouse
            If WorkBookExists("Mainpage.xls") Then
                Run "Mainpage.xls!AutoSetSpouse"
            End If
            
            ' Make sure current file is locked
            If CFIsDBBased(oCFBook) Then
                ' Check if read only (A checked out file)
                If oCFBook.ReadOnly Then
                    ' Unlock Client File
                    UnlockClient oFileSys.GetBaseName(oCFBook.name)
                Else
                    ' Lock client file
                    LockClient oFileSys.GetBaseName(oCFBook.name)
                End If
            End If
            
            ' Return true
            CFMainOpen = True
            
        Else
            ' Check if from DB
            If tCFInfo.FromDB Then
                ' Check if CFID is not currently opened
                If Not WorkBookExists(sTmpCFID + STR_DATAFILE_EXT) Then
                    ' UnLock the file
                    UnlockClient sTmpCFID
                End If
            End If
        End If
    End If
End Function

Public Sub CFMainSave()
' Main Client File Save Routine
    If Not Application.ScreenUpdating Then
        Application.ScreenUpdating = True
    End If
    If Not Run("FPS.xls!IsReadOnlyMode") Then
        SaveCF
    Else
        MsgBox Replace(Lang(73), "%PROGRAM%", PROG_NAME), vbExclamation, PROG_NAME
    End If
End Sub

Public Function RegisterClientFile(ByRef theClientFile As Workbook) As Boolean
' Registers the name of the modules included in the client file, in the System sheet of FPS.xls, registers also the name of the Client File
On Error GoTo Err_Trap

    Dim oSht As Worksheet
    Dim iNdx As Integer
    
    ' Clear Values
    Workbooks("FPS.xls").Sheets("system").Range(MODLIST_RANGE).ClearContents
    ' Initialize index counter
    iNdx = 1
    ' Iterate through sheets
    For Each oSht In theClientFile.Sheets
        ' Check sheet name if not system
        If UCase(oSht.name) <> "SYSTEM" Then
            ' Increment Counter
            iNdx = iNdx + 1
            ' Store the name of the sheet
            Workbooks("FPS.xls").Sheets("system").Cells(iNdx, 1).Value = oSht.name
        End If
    Next oSht
    ' Store the name of the client file
    Workbooks("FPS.xls").Sheets("system").Range("LastFileName").Value = theClientFile.FullName
    ' Return True
    RegisterClientFile = True
Exit Function
Err_Trap:
End Function

Public Function ApplyDefaultSetting(ByRef oDefBk As Workbook, ByVal theWkBkName As String, Optional ByVal bSkipBlanks As Boolean, Optional ByVal iSourceRowOffset As Integer)
    Dim bProtCont As Boolean
    Dim bProtScen As Boolean
    Dim bProtDraw As Boolean
    Dim sPerAdvRng As String
    Dim bDefUpdated As Boolean
    
    ' Check if the Defaults file workbook specified is not nothing
    If Not oDefBk Is Nothing Then
        ' Check if theWkBkName does not exist in the defaults file
        If Not WorkSheetExists(oDefBk, theWkBkName) Then
            ' Update the Defaults file
            bDefUpdated = UpdateDefaultsFile(oDefBk, theWkBkName)
        Else
            bDefUpdated = True
        End If
        
        If bDefUpdated Then
            ' Reset Data using Defaults file
            oDefBk.Sheets(theWkBkName).Range(DATA_RANGE).Offset(iSourceRowOffset, 0).Copy
            Workbooks(theWkBkName).Sheets("data").Range(Split(DATA_RANGE, ":")(0)).PasteSpecial Paste:=xlPasteValues, SkipBlanks:=bSkipBlanks
            If WorkSheetExists(Workbooks(theWkBkName), "Variables") Then
                
                ' Determine Protections
                bProtCont = Workbooks(theWkBkName).Sheets("Variables").ProtectContents
                bProtScen = Workbooks(theWkBkName).Sheets("Variables").ProtectScenarios
                bProtDraw = Workbooks(theWkBkName).Sheets("Variables").ProtectDrawingObjects
                ' Check protections
                If bProtCont Or bProtScen Or bProtDraw Then
                    ' Unprotect
                    Workbooks(theWkBkName).Sheets("Variables").Unprotect SHTPD
                End If
                
                ' NOTE!!!! use different Variables range for Perinfo because the Goals & Objectives sits in the ADV_RNG of Perinfo.xls
                sPerAdvRng = IIf(UCase(theWkBkName) = "PERINFO.XLS", PERINFO_ADV_RANGE, ADV_RANGE)
                
                oDefBk.Sheets(theWkBkName).Range(sPerAdvRng).Offset(iSourceRowOffset, 0).Copy
                Workbooks(theWkBkName).Sheets("Variables").Range(Split(sPerAdvRng, ":")(0)).PasteSpecial Paste:=xlPasteValues, SkipBlanks:=bSkipBlanks
                Workbooks(theWkBkName).Sheets("Variables").Activate
                Workbooks(theWkBkName).Sheets("Variables").Range("A1").Select
                
                ' Re-protect if was protected
                If bProtCont Or bProtScen Or bProtDraw Then
                    ' Unprotect
                    Workbooks(theWkBkName).Sheets("Variables").Protect SHTPD, bProtCont, bProtScen, bProtDraw
                End If
        
            End If
        End If
    End If
End Function

Public Function SelectDefaultsFile(Optional ByVal theDefaultDefFile As String, Optional ByVal theMessage As String) As String
' Allows user to select a Defaults file and return it

    Dim sDef As String
    Dim iCnt As Integer
    Dim sRet As String
    
    Load frmDefaults
    sDef = theDefaultDefFile
    
    If theMessage <> "" Then
        frmDefaults.lblPromptMsg.Caption = theMessage
    End If
    
    frmDefaults.cboDefaultsList.ListIndex = 0
    If UCase(sDef) = "FPSDEFAULTS.XLS" Then
        sDef = "FP Solutions Default"
    End If
    For iCnt = 0 To frmDefaults.cboDefaultsList.ListCount - 1
        If UCase(frmDefaults.cboDefaultsList.List(iCnt)) = UCase(sDef) Then
            frmDefaults.cboDefaultsList.ListIndex = iCnt
            Exit For
        End If
    Next iCnt
    frmDefaults.Show
    If frmDefaults.m_ButtonClicked = frmDefaults.cmdOK.Caption Then
        Select Case True
            Case frmDefaults.cboDefaultsList.Text = "FP Solutions Default"
                sRet = "Fpsdefaults.xls"
            Case frmDefaults.cboDefaultsList.ListIndex > 0
                sRet = frmDefaults.cboDefaultsList.Text + ".XUD"
            Case Else
                sRet = frmDefaults.cboDefaultsList.Text
        End Select
    End If
    SelectDefaultsFile = sRet
End Function

Public Function CreatePrefix(Optional ByRef theClientFile As Workbook) As String
' Create's a prefix for the Client File ID based on the Name in the Client File
On Error Resume Next
    Dim sRet As String
    
    If Not theClientFile Is Nothing Then
        If WorkSheetExists(theClientFile, "Perinfo.xls") Then
            sRet = Left(theClientFile.Sheets("Perinfo.xls").Range("A18").Value, 1) + Left(theClientFile.Sheets("Perinfo.xls").Range("A20").Value, 1)
            sRet = Replace(sRet, " ", "Z")
            If Len(sRet) < 2 Then
                sRet = sRet + Left("ZZ", 2 - Len(sRet))
            End If
            CreatePrefix = Left(sRet, 2)
        End If
    Else
        If WorkBookExists("Perinfo.xls") Then
            sRet = Left(Workbooks("Perinfo.xls").Sheets("data").Range("A18").Value, 1) + Left(Workbooks("Perinfo.xls").Sheets("data").Range("A20").Value, 1)
            sRet = Replace(sRet, " ", "Z")
            If Len(sRet) < 2 Then
                sRet = sRet + Left("ZZ", 2 - Len(sRet))
            End If
            CreatePrefix = Left(sRet, 2)
        End If
    End If
End Function

Public Function CopyModuleToCF(ByRef theClientFile As Workbook, Optional ByVal theScenarioIndex As Integer = 0, Optional ByVal bshowProgress As Boolean = True) As Boolean
' Copy's FP data from Modules to Client File
On Error GoTo Err_Trap

    Dim oWkBk As Workbook
    Dim iCntLst As Integer
    Dim iCnt As Integer
    Dim oTmpSht As Worksheet
    Dim bResult As Boolean
    Dim bProtS As Boolean
    Dim bProtW As Boolean
    Dim bRet As Boolean
    Dim iProgTotal As Integer
    Dim sActiveW As String
    Dim sActiveS As String
    Dim bScr As Boolean
    Dim bEvt As Boolean
    
    ' Check if valid client file
    If WorkSheetExists(theClientFile, "system") Then
        
        ' Gather initial screen settings
        sActiveW = ActiveWorkbook.name
        sActiveS = ActiveSheet.name
        bScr = Application.ScreenUpdating
        bEvt = Application.EnableEvents
        
        ' Disable Screen updating
        Application.ScreenUpdating = False
        Application.EnableEvents = False
        
        ' Calculate first
        Calculate
        
        ' Check if we want to show progress
        If bshowProgress Then
            iProgTotal = Application.WorksheetFunction.CountA(shtListing.Range(MODLIST_RANGE))
            Load frmProgress
            frmProgress.Caption = Lang(70)
            frmProgress.SetProgress 0, Lang(71)
            frmProgress.Display
        End If
        ' Clear the list of modules in the system sheet
        theClientFile.Sheets("system").Range(MODLIST_RANGE).ClearContents
        ' Intialize List counter
        iCntLst = 2
        ' Initialize counter
        iCnt = 2
        ' Iterate through all workbooks
        Do Until shtListing.Cells(iCnt, 1).Value = ""
            ' Check if we want to show progress
            If bshowProgress Then
                frmProgress.SetProgress (iCnt - 1) / iProgTotal * 100
            End If
            ' Check if workbook module exists
            If WorkBookExists(shtListing.Cells(iCnt, 1).Value) Then
                ' Check if we want to show progress
                If bshowProgress Then
                    frmProgress.SetProgress (iCnt - 1) / iProgTotal * 100, shtListing.Cells(iCnt, 3).Value
                End If
                ' Check if Data sheet exists in workbook module
                If WorkSheetExists(Workbooks(shtListing.Cells(iCnt, 1).Value), "data") Then
                    ' Check if worksheet does not exist in target workbook
                    If Not WorkSheetExists(theClientFile, shtListing.Cells(iCnt, 1).Value) Then
                        ' Add the sheet
                        Set oTmpSht = theClientFile.Sheets.Add(After:=theClientFile.Sheets(theClientFile.Sheets.Count))
                        ' Set the Name of the New Sheet
                        oTmpSht.name = shtListing.Cells(iCnt, 1).Value
                    End If
                    ' Put values in target sheet, based on scenario
                    bResult = ApplyModuleData(Workbooks(shtListing.Cells(iCnt, 1).Value).Sheets("data"), theClientFile.Sheets(shtListing.Cells(iCnt, 1).Value), theScenarioIndex)
                    ' Update the module list
                    theClientFile.Sheets("system").Cells(iCntLst, 1).Value = shtListing.Cells(iCnt, 1).Value
                    ' Increment the list counter
                    iCntLst = iCntLst + 1
                    
                    If Not bRet Then
                        bRet = bResult
                    End If
                End If
            Else
                ' Check if module sheet exists in client file
                If WorkSheetExists(theClientFile, shtListing.Cells(iCnt, 1).Value) Then
                    ' Check if workbook is protected
                    bProtS = theClientFile.ProtectStructure
                    bProtW = theClientFile.ProtectWindows
                    If bProtS Then
                        ' Unprotect workbook
                        theClientFile.Unprotect CF_PASS
                    End If
                    ' Remove from the Client File
                    Application.DisplayAlerts = False
                    theClientFile.Sheets(shtListing.Cells(iCnt, 1).Value).Delete
                    Application.DisplayAlerts = True
                    ' Re-protect workbook if needed
                    If bProtS Then
                        theClientFile.Protect CF_PASS, bProtS, bProtW
                    End If
                End If
            End If
            ' Increment counter
            iCnt = iCnt + 1
            ' Allow breathing space
            DoEvents
        Loop
        
        ' Also copy data for Exec Summary
        If WorkBookExists("Mainpage.xls") Then
            Run "Mainpage.xls!SaveToClientFile", theScenarioIndex, theClientFile
        End If
        
        If bshowProgress Then
            Unload frmProgress
        End If
        
        ' Re-Enable screen updating
        If WorkBookExists(sActiveW) Then
            If WorkSheetExists(Workbooks(sActiveW), sActiveS) Then
                If ActiveWorkbook.name <> sActiveW Or ActiveSheet.name <> sActiveS Then
                    Workbooks(sActiveW).Sheets(sActiveS).Activate
                End If
            Else
                If WorkBookExists("FPS.xls") Then
                    Run "FPS.xls!ActivateMainPage"
                End If
            End If
        Else
            If WorkBookExists("FPS.xls") Then
                Run "FPS.xls!ActivateMainPage"
            End If
        End If
        Application.EnableEvents = bEvt
        If Val(Application.ScreenUpdating) <> Val(bScr) Then
            Application.ScreenUpdating = bScr
        End If
    
    Else
        MsgBox Lang(72), vbCritical, PROG_NAME
    End If
    
    CopyModuleToCF = bRet
Exit Function
Err_Trap:
    MsgBox "Runtime Error " + CStr(Err.Number) + " " + Err.Description + " in 'CopyModuleToCF'!", vbCritical, PROG_NAME
End Function

Public Function ApplyModuleData(ByRef theSourceSheet As Worksheet, ByRef theTargetSheet As Worksheet, Optional ByVal theTargetScenario As Integer = 0, Optional ByVal bSkipBlanks As Boolean = False) As Boolean
' Copy's data from the source sheet to the target sheet based on scenario
On Error GoTo Err_Trap
    Dim iSht As Integer
    Dim iRng As Integer
    Dim iScenCnt As Integer
    Dim iNumScen As Integer
    Dim oVarSht As Worksheet
    
    ' Check if source sheet does not exist
    If theSourceSheet Is Nothing Then
        Exit Function
    End If
    
    ' Check if Target Sheet does not exist
    If theTargetSheet Is Nothing Then
        Exit Function
    End If
    
    ' Check if Source sheet is the same as the Target Sheet
    If theSourceSheet Is theTargetSheet Then
        Exit Function
    End If
    
    ' Copy Data From Source
    theSourceSheet.Range(DATA_RANGE).Copy
    ' Paste on Target
    theTargetSheet.Range(Split(DATA_RANGE, ":")(0)).Offset(theTargetScenario * 1000, 0).PasteSpecial Paste:=xlPasteValues, SkipBlanks:=bSkipBlanks
    
    ' Check if parent of source sheet has Variables page
    If WorkSheetExists(theSourceSheet.Parent, "Variables") Then
        
        ' Copy Variables From Source
        theSourceSheet.Parent.Sheets("Variables").Range(ADV_RANGE).Copy
        ' Paste on Target
        theTargetSheet.Range(Split(ADV_RANGE, ":")(0)).Offset(theTargetScenario * 1000, 0).PasteSpecial Paste:=xlPasteValues, SkipBlanks:=bSkipBlanks

    End If
    
    ' Determine the current target sheet for special processing
    Select Case UCase(theSourceSheet.Parent.name)
        Case "PERINFO.XLS"
            ' Get the Number of Scenarios
            iNumScen = GetCFScenarioCount(theTargetSheet.Parent)
            ' Copy Goals and objectives to all scenarios
            For iScenCnt = 0 To iNumScen
                ' take the 4 special sheets from Perinfo.xls (Sheets 8 - 11, Goals - Action Plan)
                ' and grab C10 to C32 copy to columns H,I,J,K skip by 2. This should match OpenTransportWorkbookData routine
                For iSht = 8 To 11
                    With Workbooks(theSourceSheet.Parent.name).Sheets(iSht)
                        For iRng = 10 To 32 Step 2
                            CopyLargeValue .Cells(iRng, 3), theTargetSheet.Cells(iRng, iSht).Offset(iScenCnt * 1000, 0)
                        Next iRng
                    End With
                Next iSht
            Next iScenCnt

    End Select
    
    ' Turn off copy mode
    Application.CutCopyMode = False
    ' Return true
    ApplyModuleData = True
    
Exit Function
Err_Trap:
    MsgBox Lang(368), vbCritical
End Function

Public Function SaveAsCF(Optional ByRef theClientFile As Workbook, Optional ByRef theScenarioIndex As Integer = 0, Optional ByRef bshowProgress As Boolean = True, Optional ByRef bShowPrompt As Boolean = True) As Boolean
' Save As function for client files
    Dim tCFInfo As ClientFileInfo
    Dim bAllowedToUseDB As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    Dim bResult As Boolean
    Dim iPrimScenIndex As Integer
    Dim sClientFileID As String
    Dim sTmpCFID As String
    Dim sPlanner As String
    Dim sLockBy As String
    
    If Not Application.ScreenUpdating Then
        Application.ScreenUpdating = True
    End If
    
    If Run("FPS.xls!IsReadOnlyMode") Then
        MsgBox Replace(Lang(73), "%PROGRAM%", PROG_NAME), vbExclamation, PROG_NAME
        Exit Function
    End If

    ' Determine if allowed to use db
    bAllowedToUseDB = AllowedToUseDB
    
    ' Check if a client file was not passed
    If theClientFile Is Nothing Then
        ' Get current client file
        Set theClientFile = Run("FPS.xls!GetClientFile")
        ' Check if still nothing
        If theClientFile Is Nothing Then
            ' Create an empty client file
            Set theClientFile = GetEmptyCFWorkBook(Run("FPS.xls!GetDefaultsFilename"), , IIf(IsFR, 2, 1))
        End If
    Else
        ' Check if client file is read only
        If theClientFile.ReadOnly Then
            ' Prompt
            MsgBox Lang(74), vbExclamation, PROG_NAME
            ' Exit
            Exit Function
        End If
    End If
    
PromptForFileName:

    If Application.ScreenUpdating = False Then
        Application.ScreenUpdating = True
    End If
    
    ' Get the Save Filename information
    tCFInfo = GetSaveCFInfo(Not bAllowedToUseDB, CreatePrefix, True, , , SuggestScreenName(theClientFile))
    
    ' Check if from DB
    If tCFInfo.FromDB Then
        ' Get CFID
        sTmpCFID = oFileSys.GetBaseName(tCFInfo.FilePath)
        ' Get Planner Name
        sPlanner = GetPlannerName
        ' Get Lock Info of Client File
        sLockBy = IsLockedBy(sTmpCFID)
        ' Check if client file is currently locked by others
        If sLockBy <> "" And sLockBy <> sPlanner Then
            ' Message, client file locked by others
            MsgBox Replace(Replace(Lang(85), "%CLIENTFILE%", tCFInfo.ScreenName), "%USER%", sLockBy), vbExclamation, PROG_NAME
            ' Exit
            Exit Function
        End If
    End If
    
    ' Check if a filename was selected
    If tCFInfo.FilePath <> "" Then
        ' Check if file exists
        If oFileSys.FileExists(tCFInfo.FilePath) Then
            ' Check if file is read only
            If oFileSys.GetFile(tCFInfo.FilePath).Attributes Mod 2 = ReadOnly Then
                ' Prompt
                MsgBox Lang(86), vbExclamation, PROG_NAME
                GoTo PromptForFileName
            End If
            ' Prompt if user want to replace
            Select Case MsgBox(Lang(87), vbYesNoCancel + vbQuestion, PROG_NAME)
                Case vbNo
                    GoTo PromptForFileName
                Case vbCancel
                    Exit Function
            End Select
        End If
        ' Apply Client File Window Caption
        theClientFile.Windows(1).Caption = tCFInfo.ScreenName
        ' Check if DB Based
        If tCFInfo.FromDB Then
            ' Check if client file is locked by others
            If IsLockedByOthers(oFileSys.GetBaseName(theClientFile.name)) Then
                MsgBox Lang(88), vbExclamation, PROG_NAME
                Exit Function
            End If
            ' Check if we have more than 1 scenarios
            If GetCFScenarioCount(theClientFile) > 0 Then
                If Not Application.ScreenUpdating Then
                    Application.ScreenUpdating = True
                End If
                ' Choose Primary Scenario for DB Query
                iPrimScenIndex = SelectScenario(theClientFile, Lang(89))
            End If
        End If
        ' Store data to client file
        bResult = CopyModuleToCF(theClientFile, theScenarioIndex, bshowProgress)
        ' Continue if storing was successful
        If bResult Then
            ' Check if DB Based
            If tCFInfo.FromDB Then
                ' Determine the client file ID
                sClientFileID = oFileSys.GetBaseName(tCFInfo.FilePath)
                ' Check if primary scenario is different from current scenario
                If iPrimScenIndex <> theScenarioIndex Then
                    ' Switch to Primary scenario (Load primary scenario)
                    CopyCFToModule theClientFile, iPrimScenIndex, True
                End If
                ' Store the Financial Information to Database (Mining Data)
                If Not SaveMiningData(sClientFileID, True) Then
                    ' Prompt user
                    MsgBox Lang(90), vbExclamation, PROG_NAME
                End If
                ' Save Client Info
                UpdateClientTable theClientFile, sClientFileID
            End If
            ' Write the client file
            bResult = WriteCF(theClientFile, tCFInfo.FilePath, tCFInfo.FromDB)
        End If
        ' Check if user wants prompt
        If bShowPrompt Then
            If Not Application.ScreenUpdating Then
                Application.ScreenUpdating = True
            End If
            If bResult Then
                MsgBox Lang(96), vbInformation, PROG_NAME
            Else
                MsgBox Lang(97), vbExclamation, PROG_NAME
            End If
        End If
        SaveAsCF = bResult
    Else
        'Check if we have a temp client file workbook
        If Not theClientFile Is Nothing Then
            ' Check if extension of name is blank, this means a new workbook
            If oFileSys.GetExtensionName(theClientFile.name) = "" Then
                ' Close it
                theClientFile.Close False
            End If
        End If
    End If
End Function

Public Function SaveCF(Optional ByVal bshowProgress As Boolean = True, Optional ByVal bShowPrompt As Boolean = True) As Boolean
' Save As function for client files
    Dim oFileSys As New Scripting.FileSystemObject
    Dim bResult As Boolean
    Dim theClientFile As Workbook
    Dim bIsDBBased As Boolean
    Dim iScenIndex As Integer
    Dim sClientFileID As String
    Dim sTmpName As String
    
    If Run("FPS.xls!IsReadOnlyMode") Then
        MsgBox Replace(Lang(73), "%PROGRAM%", PROG_NAME), vbExclamation, PROG_NAME
        Exit Function
    End If
    
    ' Get reference to the current client file
    Set theClientFile = Run("FPS.xls!GetClientFile")
    
    ' Check if no client file
    If theClientFile Is Nothing Then
        ' Create an empty client file
        Set theClientFile = GetEmptyCFWorkBook(Run("FPS.xls!GetDefaultsFilename"), , IIf(IsFR, 2, 1))
        ' Remember the name of new workbook
        sTmpName = theClientFile.name
        ' Do a Save As
        bResult = SaveAsCF(theClientFile, 0, bshowProgress, bShowPrompt)
        ' Check if successful
        If Not bResult Then
            ' Check if new workbook exists
            If WorkBookExists(sTmpName) Then
                ' Close the created new client file workbook
                theClientFile.Close False
                ' Cleanup
                Set theClientFile = Nothing
            End If
        End If
        ' Return result
        SaveCF = bResult
    Else
        ' Check if client file is read only
        If Not theClientFile.ReadOnly Then
            ' Check if Client File is db based
            bIsDBBased = CFIsDBBased(theClientFile)
            ' Get the current scenario index
            iScenIndex = GetCurrentScenarioNumber(theClientFile)
            ' Store data to client file
            bResult = CopyModuleToCF(theClientFile, iScenIndex, bshowProgress)
            ' Continue if storing was successful
            If bResult Then
                ' Check if DB Based
                If bIsDBBased Then
                    ' Determine the client file ID
                    sClientFileID = oFileSys.GetBaseName(theClientFile.name)
                    ' Store the Financial Information to Database (Mining Data)
                    If Not SaveMiningData(sClientFileID, True) Then
                        ' Prompt user
                        MsgBox Lang(90), vbExclamation, PROG_NAME
                    End If
                    ' Save Client Info
                    UpdateClientTable theClientFile, sClientFileID
                End If
                ' Write the client file
                bResult = WriteCF(theClientFile, theClientFile.FullName, bIsDBBased)
            End If
            ' Check if user wants prompt
            If bShowPrompt Then
                If Not Application.ScreenUpdating Then
                    Application.ScreenUpdating = True
                End If
                If bResult Then
                    MsgBox Lang(96), vbInformation, PROG_NAME
                Else
                    MsgBox Lang(97), vbExclamation, PROG_NAME
                End If
            End If
        Else
            MsgBox Lang(74), vbExclamation, PROG_NAME
        End If
        SaveCF = bResult
    End If
    
End Function

Public Function WriteCF(ByRef theClientFile As Workbook, ByVal theFileName As String, ByVal bIsDBBased As Boolean) As Boolean
' The actual writing of CF and PWD prompting
On Error GoTo Err_Trap

    Dim bProtS As Boolean
    Dim bProtW As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sOldCFID As String
    Dim sNewCFID As String
    Dim bSuccess As Boolean
    
    If Not Application.ScreenUpdating Then
        Application.ScreenUpdating = True
    End If
    
    ' Prompt for password if needed
    Run "FPS.xls!PromptForClientFilePWD", theClientFile
    
    ' Check if workbook is not yet protected and hidden
    bProtS = theClientFile.ProtectStructure
    bProtW = theClientFile.ProtectWindows
    If theClientFile.Windows(1).Visible Then
        If bProtW Then
            theClientFile.Unprotect CF_PASS
        End If
        theClientFile.Windows(1).Visible = False
        If bProtW Then
            theClientFile.Protect CF_PASS, bProtS, bProtW
        End If
    Else
        If (Not bProtS) Or (Not bProtW) Then
            theClientFile.Protect CF_PASS, bProtS, bProtW
        End If
    End If
    
    ' Save Misc Common Data
    SaveMiscDataToCF theClientFile

    '===== Sheets will be encrypted from this point =====
    
    ' Check if DB Based
    If bIsDBBased Then
        ' Get Old CFID
        sOldCFID = oFileSys.GetBaseName(theClientFile.name)
        ' Encrypt sheets
        EncryptSheets theClientFile
        ' Check if the extension of filename is not FPS
        If UCase(oFileSys.GetExtensionName(theFileName)) <> "FPS" Then
            ' Change the file extension name
            theFileName = oFileSys.GetParentFolderName(theFileName) + IIf(Right(oFileSys.GetParentFolderName(theFileName), 1) = "\", "", "\") + oFileSys.GetBaseName(theFileName) + STR_DATAFILE_EXT
        End If
    End If
    ' Update Status Bar
    Application.StatusBar = Lang(75)
    ' Save the file
    Application.DisplayAlerts = False
    UniversalSaveAs theClientFile, Replace(theFileName, ":\\", ":\")
    Application.DisplayAlerts = True
        
    ' Update Status Bar
    Application.StatusBar = False
    ' Check if DB Based
    If bIsDBBased Then
        ' Get New CFID
        sNewCFID = oFileSys.GetBaseName(theClientFile.name)
        
        ' Check if we want to save entire file to Database As Well
        If IsUsingLargeDatabase Then
            bSuccess = BinaryFileStore(theClientFile, sNewCFID)
        End If
        
        ' Decrypt Sheets
        DecryptSheets theClientFile, CF_ACCD
        ' Check if overwriting file
        If sOldCFID <> sNewCFID Then
            ' Unlock old file
            UnlockClient sOldCFID
            ' Lock New File
            LockClient sNewCFID
        End If
    End If

    '===== Sheets will be decrypted from this point =====

    ' Store the name of the client file
    Workbooks("FPS.xls").Sheets("system").Range("LastFileName").Value = theClientFile.FullName
    ' Change Captions
    Run "FPS.xls!DisplayScenarioInfo"

    WriteCF = True
Exit Function
Err_Trap:
    MsgBox "Runtime Error " + CStr(Err.Number) + " " + Err.Description + " in WriteCF!", vbCritical, PROG_NAME
End Function

Public Function CFIsDBBased(Optional ByRef theClientFile As Workbook) As Boolean
    Dim oClientFile As Workbook
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sDataPath As String
        
    ' Make sure we have a reference to a Client File
    If theClientFile Is Nothing Then
        Set oClientFile = Run("FPS.xls!GetClientFile")
    Else
        Set oClientFile = theClientFile
    End If
    
    ' Check if we have made reference to a client file
    If Not oClientFile Is Nothing Then
        ' Check if the ClientMgr.MDB file exists in the path of the Client File
        If oFileSys.FileExists(IIf(Right(oClientFile.path, 1) = "\", oClientFile.path + "ClientMgr.mdb", oClientFile.path + "\ClientMgr.mdb")) Then
            ' Client file is DB based if the Base name of client file exists in the database and extension is FPS
            CFIsDBBased = ClientFileIDExists(oFileSys.GetBaseName(oClientFile.name)) And (UCase(oFileSys.GetExtensionName(oClientFile.name)) = "FPS")
        Else
            ' Check if we are using Large Database
            If IsUsingLargeDatabase Then
                ' Client file is DB based if the Base name of client file exists in the database and extension is FPS
                CFIsDBBased = ClientFileIDExists(oFileSys.GetBaseName(oClientFile.name)) And (UCase(oFileSys.GetExtensionName(oClientFile.name)) = "FPS")
            End If
        End If
    End If
End Function

Public Function CleanUpToolBar()
' Cleans up toolbar, hides all other toolbars except FPS Related
On Error Resume Next

    Dim iCnt As Integer
    
    For iCnt = 1 To Application.CommandBars.Count
        Select Case UCase(Application.CommandBars(iCnt).name)
            Case "FPS", "FP REPORT EDITOR", "FP CUSTOM DOCUMENT CREATOR", "SIMULATION", "FPSBAR", "FP FOCUS"
            Case Else
                If Application.CommandBars(iCnt).Visible Then
                    If Application.CommandBars(iCnt).name <> "Status Bar" Then
                        Application.CommandBars(iCnt).Visible = False
                    End If
                End If
        End Select
    Next iCnt
End Function

Public Function CloseWorkBookCollection(ByVal theWkBkColl As Collection)
On Error Resume Next
    Dim oWkBk As Workbook
    
    If Not theWkBkColl Is Nothing Then
        For Each oWkBk In theWkBkColl
            If Not oWkBk Is Nothing Then
                oWkBk.Close False
                Set oWkBk = Nothing
            End If
        Next oWkBk
    End If
End Function

Public Function GetModuleName(ByVal theWorkBookName As String) As String
' Returns the user friendly name of an FPS Workbook name

On Error Resume Next
    Dim vMatch As Variant
    Dim sReturn As String
    
    Select Case UCase(theWorkBookName)
        
        Case "MONTESIM.XLS"
            sReturn = "Simulation"
        Case Else
            vMatch = Application.WorksheetFunction.Match(theWorkBookName, shtListing.Columns(1), 0)
            If Err.Number = 0 Then
                sReturn = shtListing.Cells(Val(vMatch), 3).Value
            End If
    End Select
    GetModuleName = sReturn
End Function

Public Function GetDefaultsFileForFF(ByVal theDefaultsFile As String) As Workbook
    Dim oFileSys As New Scripting.FileSystemObject
    Dim oDefaultsBk As Workbook
    Dim oActiveWin As Window
    Dim bScr As Boolean
    Dim bEvt As Boolean
    Dim sAltPath As String
    Dim sTmpDefFile As String
    
    ' Check if defaults file was not specified
    If theDefaultsFile = "" Then
        If Not Application.ScreenUpdating Then
            Application.ScreenUpdating = True
        End If
        ' Prompt for a defaults file
        theDefaultsFile = SelectDefaultsFile(, Lang(98))
    End If
    
    ' Exit if still no defaults file specified
    If theDefaultsFile = "" Then
        Exit Function
    Else
        Run "FPS.xls!SetDefaultFile", theDefaultsFile
    End If
    
    ' Check if Defaults file already loaded
    If WorkBookExists(oFileSys.GetFileName(theDefaultsFile)) Then
        ' Set the Defaults file variable
        Set oDefaultsBk = Workbooks(oFileSys.GetFileName(theDefaultsFile))
    Else
        ' Check if user defaults file exists
        sTmpDefFile = ThisWorkbook.path + "\" + oFileSys.GetFileName(theDefaultsFile)
        If Not oFileSys.FileExists(sTmpDefFile) Then
            ' Check Alternate Path
            sAltPath = GetUserDefaultsPath
            If UCase(sAltPath) <> UCase(ThisWorkbook.path) Then
                sAltPath = IIf(Right(sAltPath, 1) = "\", sAltPath, sAltPath & "\")
                sTmpDefFile = sAltPath & oFileSys.GetFileName(theDefaultsFile)
                If Not oFileSys.FileExists(sTmpDefFile) Then
                    sTmpDefFile = ""
                End If
            Else
                sTmpDefFile = ""
            End If
        End If
            
        If sTmpDefFile <> "" Then
            ' Disable Screen Updates
            Set oActiveWin = ActiveWindow
            bScr = Application.ScreenUpdating
            bEvt = Application.EnableEvents
            Application.ScreenUpdating = False
            Application.EnableEvents = False
            Application.StatusBar = ""

            ' Load the user defaults file
            Set oDefaultsBk = Workbooks.Open(sTmpDefFile, False)
            
            ' Restore Screen Updates
            If Not ActiveWindow Is oActiveWin Then
                oActiveWin.Activate
            End If
            If Val(Application.ScreenUpdating) <> Val(bScr) Then
                Application.ScreenUpdating = bScr
            End If
            Application.EnableEvents = bEvt
            Application.StatusBar = False
            
        Else
            ' Tell user that the selected defaults file does not exist
            MsgBox Replace(Lang(99), "%DEFFILE%", theDefaultsFile), vbExclamation, PROG_NAME
        End If
    End If
    
    ' Return the workbook
    Set GetDefaultsFileForFF = oDefaultsBk
End Function

Public Function StringPaddedDate(ByVal theDateTime As Variant) As String
    Dim sRet As String
    Dim sDate As String
    Dim sTime As String
    
    If TypeName(theDateTime) <> "Date " Then
        If theDateTime = "" Then
            Exit Function
        End If
        
        If IsDate(theDateTime) Then
            theDateTime = CDate(theDateTime)
        Else
            Exit Function
        End If
    End If
    
    sDate = CStr(CLng(DateSerial(Year(theDateTime), Month(theDateTime), Day(theDateTime))))
    sDate = Left("0000000000", (10 - Len(sDate))) + sDate
    sTime = CStr(CSng(TimeSerial(Hour(theDateTime), Minute(theDateTime), Second(theDateTime))))
    sTime = Replace(sTime, "0.", "")
    If Len(sTime) > 7 Then
        sTime = Left(sTime, 7)
    End If
    sTime = sTime + Left("0000000", (7 - Len(sTime)))
    
    sRet = sDate + sTime
    StringPaddedDate = sRet
End Function

Public Function StringPaddedNumber(ByVal theNumber As Long) As String
    Dim sRet As String
    
    sRet = CStr(theNumber)
    sRet = Left("0000000000", (10 - Len(sRet))) + sRet
    StringPaddedNumber = sRet
End Function

Public Sub SetClientFolderPath()
    Load frmSetFolderPath
    frmSetFolderPath.txtCurrPath.Text = frmFileRequester.GetClientsFolder
    frmSetFolderPath.txtNewPath.Text = frmSetFolderPath.txtCurrPath.Text
    frmSetFolderPath.Show
    If frmSetFolderPath.m_ButtonClicked = frmSetFolderPath.cmdOK.Caption Then
        SaveSetting PROG_NAME, GetSettingsKey, "DefaultPath", frmSetFolderPath.txtNewPath.Text
        frmFileRequester.InitImageCombo
    End If
    frmSetFolderPath.m_ForceClose = True
    Unload frmSetFolderPath
End Sub

Public Sub CheckOut()
' Checks out the currently loaded client file
    Dim oClientFile As Workbook
    Dim sPlanner As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sPathFile As Variant
    Dim sFileSaveName As String
    Dim sCFID As String
    Dim sInitPath As String
    Dim sCheckOut As String
    Dim sTmpPath As String
    
    ' Get reference to client file
    Set oClientFile = Run("FPS.xls!GetClientFile")
    ' Check if client file is loaded
    If Not oClientFile Is Nothing Then
        ' Get ClientFileID
        sCFID = oFileSys.GetBaseName(oClientFile.name)
        ' Check if client file is dbbased
        If CFIsDBBased(oClientFile) Then
            ' Get the current planner name
            sPlanner = GetPlannerName("")
            ' Check if a planner name was returned
            If sPlanner <> "" Then
                ' Checked out by whom
                sCheckOut = IsCheckedOutBy(sCFID)
                ' Check if already checked out
                If sCheckOut <> "" Then
                    ' Check if checked out by current planner
                    If sCheckOut <> sPlanner Then
                        ' Message box
                        MsgBox Replace(Lang(100), "%USER%", sCheckOut), vbExclamation, PROG_NAME
                        ' Exit
                        Exit Sub
                    End If
                End If
                ' Get as temp save filename
                sFileSaveName = GetFileTitle(sCFID)
                ' Get Init Path
                sInitPath = GetSetting(PROG_NAME, GetSettingsKey, "DefaultPath", ThisWorkbook.path + "\client")
                ' Check if init path does not exist
                If Not oFileSys.FolderExists(sInitPath) Then
                    ' Create path
                    sInitPath = ThisWorkbook.path
                End If
AskForFileName:
                ' Get the path & filename of checkout file
                sPathFile = Application.GetSaveAsFilename(InitialFileName:=sInitPath + "\" + sFileSaveName + "_chkout", FileFilter:="Microsoft Excel Workbook (*.xls), *.xls", Title:=Lang(101))
                ' Check if not canceled
                If sPathFile <> False Then
                    ' Check if file already exists
                    If oFileSys.FileExists(sPathFile) Then
                        MsgBox Lang(102), vbExclamation, PROG_NAME
                        GoTo AskForFileName
                    End If
                    ' Set the CheckOut Flag in DB
                    If SetDBCheckOut(sCFID, sPlanner) Then
                        ' Add info into the client file, -Database Path
                        oClientFile.Sheets("system").Range("P1").Value = oFileSys.GetParentFolderName(oClientFile.FullName)
                        ' Add info into the client file, -Client File ID
                        oClientFile.Sheets("system").Range("Q1").Value = sCFID
                        ' Save Misc Common Data
                        SaveMiscDataToCF oClientFile
                        ' Get Previous Path
                        sTmpPath = oClientFile.FullName
                        ' Save to file
                        UniversalSaveAs oClientFile, Replace(sPathFile, ":\\", ":\")
                        ' Render the file in DB as Read Only
                        oFileSys.GetFile(oClientFile.Sheets("system").Range("P1").Value + "\" + sCFID + STR_DATAFILE_EXT).Attributes = ReadOnly
                        ' Check if using large DB
                        If Run("ClientManager.xls!IsUsingLargeDatabase") Then
                            ' Delete the file
                            If oFileSys.FileExists(sTmpPath) Then
                                If oFileSys.GetParentFolderName(sTmpPath) = GetDataFolder Then
                                    oFileSys.GetFile(sTmpPath).Attributes = Normal
                                    oFileSys.DeleteFile sTmpPath, True
                                End If
                            End If
                        End If
                        ' Set Last FileName
                        Workbooks("FPS.xls").Sheets("system").Range("LastFileName").Value = oClientFile.FullName
                        ' Refresh window captions
                        Run "FPS.xls!DisplayScenarioInfo"
                        ' Unlock Client File
                        UnlockClient sCFID
                        ' Prompt user
                        MsgBox Lang(103), vbInformation, PROG_NAME
                    Else
                        MsgBox Lang(105), vbExclamation, PROG_NAME
                    End If
                End If
            Else
                MsgBox Lang(106), vbExclamation, PROG_NAME
            End If
        Else
            MsgBox Lang(107), vbExclamation, PROG_NAME
        End If
    Else
        MsgBox Lang(108), vbExclamation, PROG_NAME
    End If
End Sub

Public Function SetDBCheckOut(ByVal theCFID As String, ByVal thePlanner As String, Optional ByVal theDBFilePath As String) As Boolean
' Sets the CheckOut field in the database
    Dim sSQL As String
    Dim iRecAffect As Integer
    
    sSQL = "UPDATE tbClients SET CheckOut = " + IIf(thePlanner = "", "NULL", "'" + Replace(thePlanner, "'", "''") + "'") + " WHERE ClientFileID = '" + theCFID + "'"
    iRecAffect = ExecuteSQL(sSQL, theDBFilePath)
    SetDBCheckOut = (iRecAffect > 0)
End Function

Public Sub CheckIn()
' Checks out the currently loaded client file
    Dim oClientFile As Workbook
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sDBFilePath As Variant
    Dim sCFID As String
    Dim sPathFile As String
    Dim sOldFilePath As String
    
    ' Get reference to client file
    Set oClientFile = Run("FPS.xls!GetClientFile")
    ' Check if client file is loaded
    If Not oClientFile Is Nothing Then
        ' get Old File Path
        sOldFilePath = oClientFile.FullName
        ' Get ClientFileID
        sCFID = oFileSys.GetBaseName(oClientFile.name)
        ' Check if client file is file based
        If Not CFIsDBBased(oClientFile) Then
            ' Get thePath File
            sDBFilePath = oClientFile.Sheets("system").Range("P1").Value
            sCFID = oClientFile.Sheets("system").Range("Q1").Value
            ' Check if both were specified
            If sDBFilePath <> "" And sCFID <> "" Then
                ' Check if database is correct
                If GetDataFolder = sDBFilePath Then
                    ' Check if the CFID exists
                    If ClientFileIDExists(sCFID) Then
                        ' Set the Check In flag
                        If SetDBCheckOut(sCFID, "") Then
                            ' Lock the client file
                            LockClient sCFID
                            ' Determine the database client filename
                            sPathFile = sDBFilePath + "\" + sCFID + STR_DATAFILE_EXT
                            ' Check if file exists
                            If oFileSys.FileExists(sPathFile) Then
                                ' Set the database file to normal
                                oFileSys.GetFile(sPathFile).Attributes = Normal
                            End If
                            ' Clear CheckOut Info
                            oClientFile.Sheets("system").Range("P1").Value = ""
                            oClientFile.Sheets("system").Range("Q1").Value = ""
                            ' Disable display alerts
                            Application.DisplayAlerts = False
                            ' Hide the Status
                            Application.StatusBar = Lang(75)
                            ' Save the current file to the database
                            UniversalSaveAs oClientFile, Replace(sPathFile, ":\\", ":\")
                            ' Re-Enable status bar
                            Application.StatusBar = False
                            ' Re-enables alerts
                            Application.DisplayAlerts = True
                            ' Save query info
                            SaveMiningData sCFID, True
                            ' Set Last FileName
                            Workbooks("FPS.xls").Sheets("system").Range("LastFileName").Value = oClientFile.FullName
                            ' Refresh window captions
                            Run "FPS.xls!DisplayScenarioInfo"
                            ' Check if old file still exists
                            If oFileSys.FileExists(sOldFilePath) Then
                                ' Delete the file
                                oFileSys.DeleteFile sOldFilePath, True
                            End If
                            ' Prompt
                            MsgBox Lang(109), vbInformation, PROG_NAME
                        Else
                            MsgBox Lang(110), vbExclamation, PROG_NAME
                        End If
                    Else
                        MsgBox Lang(111), vbExclamation, PROG_NAME
                    End If
                Else
                    MsgBox Lang(112), vbExclamation, PROG_NAME
                End If
            Else
                MsgBox Lang(113), vbExclamation, PROG_NAME
            End If
        Else
            MsgBox Lang(114), vbExclamation, PROG_NAME
        End If
    Else
        MsgBox Lang(108), vbExclamation, PROG_NAME
    End If

End Sub

Public Sub ApplyPersonalInfo()
    Dim sFileName As String
    Dim oTmpWkBk As Workbook
    Dim oClientFile As Workbook
    Dim oFileSys As New Scripting.FileSystemObject
    
    Set oClientFile = Run("FPS.xls!GetClientFile")
    If Not oClientFile Is Nothing Then
        sFileName = SelectClientFile(False)
        If sFileName <> "" Then
            If MsgBox(Lang(115), vbYesNo + vbQuestion, PROG_NAME) = vbYes Then
                If oFileSys.FileExists(sFileName) Then
                    If Not WorkBookExists(oFileSys.GetFileName(sFileName)) Then
                        Application.ScreenUpdating = False
                        Set oTmpWkBk = Workbooks.Open(sFileName)
                        If SheetsAreEncrypted(oTmpWkBk) Then
                            DecryptSheets oTmpWkBk, CF_ACCD
                        End If
                        ApplyPerInfo oTmpWkBk, oClientFile, True
                        oTmpWkBk.Close False
                        Set oTmpWkBk = Nothing
                        Application.ScreenUpdating = True
                        MsgBox Lang(116), vbInformation
                    Else
                        MsgBox Lang(117), vbExclamation
                    End If
                Else
                    MsgBox Lang(118), vbCritical, PROG_NAME
                End If
            End If
        End If
    Else
        MsgBox Lang(119), vbExclamation, PROG_NAME
    End If
End Sub

Private Sub SaveMiscDataToCF(ByRef theClientFile As Workbook)
' Saves Common Miscellaneous Data to the client file
    
    ' Check if we are running under FP Solutions (we could be running under Annual Review Tool)
    If WorkBookExists("FPS.xls") Then
        ' Save the Version of current FP Solutions used
        theClientFile.Sheets("system").Range("B1").Value = Workbooks("FPS.xls").Sheets("data").Range("B1").Value
        
        ' Save the range view used
        theClientFile.Sheets("system").Range("F1").Value = Workbooks("FPS.xls").Sheets("system").Range("rngGlobalView").Value
    End If
End Sub

Public Function SuggestScreenName(ByVal theClientFile As Workbook, Optional ByVal clientFname As String, Optional ByVal clientLname As String, Optional ByVal spouseFname As String, Optional ByVal spouseLname As String) As String
' Returns a suggested screen name for the specified client file, used when saving a new client file.
    Dim sCFirst As String
    Dim sCLast As String
    Dim sSFirst As String
    Dim sSLast As String
    Dim sTheName As String
    Dim oShtPerInfo As Worksheet
    Dim sAnd As String
    
    sAnd = Lang(838)    'and
    
    ' Check first if client file was specified
    If Not theClientFile Is Nothing Then
        ' Check if client file has perinfo
        If WorkSheetExists(theClientFile, "Perinfo.xls") Then
            ' Set the perinfo worksheet
            Set oShtPerInfo = theClientFile.Sheets("Perinfo.xls")
        End If
    End If
    
    ' Check if perinfo sheet was not determined
    If oShtPerInfo Is Nothing Then
        ' Check if Perinfo workbook exist
        If WorkBookExists("Perinfo.xls") Then
            ' Check if data sheet exists
            If WorkSheetExists(Workbooks("Perinfo.xls"), "data") Then
                ' Set the perinfo worksheet
                Set oShtPerInfo = Workbooks("Perinfo.xls").Sheets("data")
            End If
        End If
    End If
    
    ' Check if perinfo sheet was found
    If Not oShtPerInfo Is Nothing Then
        ' Create a suggested name by taking values from Perinfo
        With oShtPerInfo
            ' Get Client First Name
            sCFirst = IIf(clientFname = "", Trim(.Range("A18").Value), clientFname)
            ' Get Client Last Name
            sCLast = IIf(clientLname = "", Trim(.Range("A20").Value), clientLname)
            
            ' Check if User selected to have spouse
            If Run("FPS.xls!HasSpouse") Then
                ' Get Spouse First Name
                sSFirst = IIf(spouseFname = "", Trim(.Range("A23").Value), spouseFname)
                ' Get Spouse Last Name
                sSLast = IIf(spouseLname = "", Trim(.Range("A25").Value), spouseLname)
            End If
            
        End With
        ' Check if spouse and client have similar last names
        If sCLast = sSLast Then
            ' Check if client has a last name
            If Trim(sCLast) <> "" Then
                ' Use the format: ClientLastName, ClientFirstName and SpouseFirstName
                sTheName = sCLast & ", " & sCFirst & " " + sAnd + " " & sSFirst
            Else
                ' Use the format: ClientFirstName and SpouseFirstName
                sTheName = sCFirst & " " + sAnd + " " & sSFirst
            End If
        Else
            ' Check if Spouse Last Name is not empty
            If sSLast <> "" Then
                ' Use Format: ClientLastName, ClientFirstName and SpouseLastName, SpouseFirstName
                sTheName = sCLast & ", " & sCFirst & " " + sAnd + " " & sSLast & ", " & sSFirst
            Else
                ' Check if Spouse first name was specified
                If sSFirst <> "" Then
                    ' Use the format: ClientLastName, ClientFirstName and SpouseFirstName
                    sTheName = sCLast & ", " & sCFirst & " " + sAnd + " " & sSFirst
                Else
                    ' Use the format: ClientLastName, ClientFirstName
                    sTheName = sCLast & ", " & sCFirst
                End If
            End If
        End If
    End If
    ' Return the created name
    SuggestScreenName = sTheName
End Function

Public Function DBRestore(Optional ByVal theDataFolder As String, Optional ByVal bCleanup As Boolean) As Boolean
' Builds the contents of the database based on FPS files found in the selected folder
    Dim oFileSys As New Scripting.FileSystemObject
    Dim oFile As Scripting.File
    Dim sSQL As String
    Dim iRecAffect As Integer
    Dim oTmpWkBk As Workbook
    Dim sSuggestedFileName As String
    Dim bCloseLater As Boolean
    Dim bRet As Boolean
    Dim sClientFileID As String
    
    ' Check if data folder was not specified
    If theDataFolder = "" Then
        ' Get the Data Folder
        theDataFolder = GetFolder
    End If
    ' Check if data folder was specified
    If theDataFolder <> "" Then
        ' Check if database MDB exists
        If oFileSys.FileExists(theDataFolder + "\ClientMgr.mdb") Then
            ' Clean Up if specified
            If bCleanup Then
                ' Delete existing Clients
                sSQL = "DELETE FROM tbClients"
                iRecAffect = ExecuteSQL(sSQL, theDataFolder + "\ClientMgr.mdb")
                ' Delete existing Data
                sSQL = "DELETE FROM tbData"
                iRecAffect = ExecuteSQL(sSQL, theDataFolder + "\ClientMgr.mdb")
            End If
            ' Check if Folder exists
            If oFileSys.FolderExists(theDataFolder) Then
                ' Get Files List
                For Each oFile In oFileSys.GetFolder(theDataFolder).Files
                    ' Check the file extension if FPS
                    If UCase(oFileSys.GetExtensionName(oFile.name)) = "FPS" Then
                        ' Determine and get client file ID
                        sClientFileID = oFileSys.GetBaseName(oFile.name)
                        ' Check if the client file already exists (do only for ClientFileIDs that don't exist to avoid duplicates
                        If Not ClientFileIDExists(sClientFileID, theDataFolder + "\ClientMgr.mdb") Then
                            ' Open the file
                            If WorkBookExists(oFile.name) Then
                                Set oTmpWkBk = Workbooks(oFile.name)
                                bCloseLater = False
                            Else
                                Application.EnableEvents = False
                                Set oTmpWkBk = Application.Workbooks.Open(oFile.path, False)
                                Application.EnableEvents = True
                                bCloseLater = True
                            End If
                            ' Check if valid FPS File
                            If SheetsAreEncrypted(oTmpWkBk) Then
                                ' Decrypt Sheets
                                DecryptSheets oTmpWkBk, CF_ACCD
                                ' Check if Perinfo exists
                                If WorkSheetExists(oTmpWkBk, "Perinfo.xls") Then
                                    ' Get Suggested filename
                                    sSuggestedFileName = SuggestScreenName(oTmpWkBk)
                                    If sSuggestedFileName <> "" Then
                                        ' Increment Name if necessary
                                        sSuggestedFileName = IncrementClientName(sSuggestedFileName, theDataFolder + "\ClientMgr.mdb")
                                        ' Save the file
                                        sSQL = "INSERT INTO tbClients (ClientName,ClientFileID) VALUES ('" + Replace(sSuggestedFileName, "'", "''") + "','" + sClientFileID + "')"
                                        iRecAffect = ExecuteSQL(sSQL, theDataFolder + "\ClientMgr.mdb")
                                        bRet = True
                                    End If
                                End If
                            End If
                            ' Close WorkBook
                            If bCloseLater Then
                                oTmpWkBk.Close False
                            End If
                            Set oTmpWkBk = Nothing
                        End If
                    End If
                Next oFile
            End If
        End If
    End If
    DBRestore = bRet
End Function

Public Function UpdateDefaultsFile(ByRef theDefWkBk As Workbook, ByRef theMissingSheetName As String) As Boolean
' This will update a custom defaults file. Over the years, our main defaults file have changed, client's defaults file should get in sync with the updates as well
    
    Dim oRootDef As Workbook
    Dim bScr As Boolean
    Dim bEvt As Boolean
    Dim oActiveSht As Worksheet
    Dim iCount As Integer
    Dim iNumScen As Integer
    Dim bProtWin As Boolean
    Dim bWindowHidden As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    Dim bProtStruct As Boolean
    
    bScr = Application.ScreenUpdating
    bEvt = Application.EnableEvents
    Set oActiveSht = ActiveSheet
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    If WorkBookExists("FpsDefaults.xls") Then
        Set oRootDef = Workbooks("FPSDefaults.xls")
    Else
        Set oRootDef = Workbooks.Open(ThisWorkbook.path + "\FPSDefaults.xls", False)
    End If
    
    If Not theDefWkBk Is oRootDef Then
        If WorkSheetExists(oRootDef, theMissingSheetName) Then
            
            ' Determine the visibilty of the target workbooks's window
            bWindowHidden = Not theDefWkBk.Windows(1).Visible
            ' Check if Windows 1 not visible
            If bWindowHidden Then
                ' Check if Defaults file
                If UCase(oFileSys.GetExtensionName(theDefWkBk.name)) = "XUD" Then
                    ' Display Window First to avoid error
                    theDefWkBk.Windows(1).Visible = True
                Else    ' Client File
                    ' Determine the window protection
                    bProtWin = theDefWkBk.ProtectWindows
                    bProtStruct = theDefWkBk.ProtectStructure
                    ' Check if window protected
                    If bProtWin Then
                        ' Unprotect
                        theDefWkBk.Unprotect "IWantToEditThisClientFile"
                    End If
                    ' Display Window First to avoid error
                    theDefWkBk.Windows(1).Visible = True
                End If
            End If
            
            ' Insert the sheet
            oRootDef.Sheets(theMissingSheetName).Copy After:=theDefWkBk.Sheets(theDefWkBk.Sheets.Count)
            
            ' Check if window originally hidden
            If bWindowHidden Then
                ' Hide the Window again
                theDefWkBk.Windows(1).Visible = False
                ' Check if Not Defaults file
                If Not UCase(oFileSys.GetExtensionName(theDefWkBk.name)) = "XUD" Then
                    ' Was it protected before?
                    If bProtWin Then
                        ' Reprotect file
                        theDefWkBk.Protect "IWantToEditThisClientFile", bProtStruct, bProtWin
                    End If
                End If
            End If
            
            ' Account for Scenarios (in case the file is a client file)
            If WorkSheetExists(theDefWkBk, "system") Then
                iNumScen = Application.WorksheetFunction.CountA(theDefWkBk.Sheets("system").Range("H1:H10"))
                For iCount = 1 To iNumScen
                    theDefWkBk.Sheets(theMissingSheetName).Range(DATA_RANGE).Copy
                    theDefWkBk.Sheets(theMissingSheetName).Range(DATA_RANGE).Offset(1000 * iCount, 1).PasteSpecial xlPasteValues
                Next iCount
            End If
            iCount = Application.WorksheetFunction.CountA(theDefWkBk.Sheets("system").Range("A2:A500")) + 2
            theDefWkBk.Sheets("system").Cells(iCount, 1).Value = theMissingSheetName
            theDefWkBk.Save
            UpdateDefaultsFile = True
        End If
    End If
    
    If Not ActiveSheet Is oActiveSht Then
        oActiveSht.Activate
    End If
    Application.ScreenUpdating = bScr
    Application.EnableEvents = bEvt
    
End Function

Public Function ChangeLockOwnerName(ByVal theNewLockName As String, Optional ByVal theCFID As String = "") As Boolean
    Dim sSQL As String
    Dim iRecAffect As Integer
    Dim oCF As Workbook
    Dim oFileSys As New Scripting.FileSystemObject
    
    If theCFID = "" Then
        Set oCF = Run("FPS.xls!GetClientFile")
        If Not oCF Is Nothing Then
            If CFIsDBBased(oCF) Then
                theCFID = oFileSys.GetBaseName(oCF.name)
            Else
                Exit Function
            End If
        Else
            Exit Function
        End If
    End If
    
    If theCFID <> "" Then
        sSQL = "UPDATE tbClients SET Lock = '" + theNewLockName + "' WHERE ClientFileID = '" + theCFID + "'"
        ChangeLockOwnerName = (ExecuteSQL(sSQL) > 0)
    End If
    
End Function

Public Function FFHasError(Optional ByVal bBusiness As Boolean = False) As Boolean
    Dim oTmpBk As Workbook
    Dim iCol As Integer
    Dim iRow As Integer
    Dim sSheet As String
    Dim bRet As Boolean
    
    Calculate
    
    If WorkBookExists("Import_FF.xls") Then
        Set oTmpBk = Workbooks("Import_FF.xls")
        sSheet = IIf(bBusiness, "data_sheet_B", "data_sheet")
        For iCol = 1 To 38
            For iRow = 5 To 208
                If oTmpBk.Sheets(sSheet).Cells(iRow, iCol).Interior.ColorIndex = 36 Then
                    If IsError(oTmpBk.Sheets(sSheet).Cells(iRow, iCol).Value) Then
                        bRet = True
                        Exit For
                    End If
                End If
            Next iRow
        Next iCol
    End If
    
    FFHasError = bRet
End Function

Public Function BinaryFileStore(ByVal theWorkBook As Workbook, Optional ByVal theClientFileID As String) As Boolean
On Error GoTo Err_Handler

    Dim sSQL As String
    Dim oConn As Object
    Dim oRecSet As Object
    Dim oStream As Object
    Dim sConnStr As String
    Dim iCurs As Long
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sTempName As String
    Dim sTempPath As String
    Dim sTempFileName As String
    Dim sCFID As String
    
    sTempName = oFileSys.GetTempName + ".FPS"
    sTempPath = oFileSys.GetSpecialFolder(2).path
    sTempFileName = sTempPath + "\" + sTempName
    theWorkBook.SaveCopyAs sTempFileName
    sCFID = theWorkBook.name
    
    If oFileSys.FileExists(sTempFileName) Then
        Set oStream = CreateObject("ADODB.Stream")
        oStream.Open
        oStream.Type = adTypeBinary
        oStream.LoadFromFile sTempFileName
    Else
        MsgBox "Unable to create temporary file", vbCritical
        Exit Function
    End If
    
    sConnStr = GetSetting(PROG_NAME, "Settings", "ConnStr", "")
        
    If sConnStr = "" Then
        Exit Function
    End If
    
    iCurs = Application.Cursor
    Application.Cursor = xlWait

    Set oConn = CreateObject("ADODB.Connection")
    Set oRecSet = CreateObject("ADODB.Recordset")
    oConn.Open sConnStr
    
    If oConn.State > 0 Then
        sSQL = "SELECT FileObject FROM tbClients WHERE ClientFileID = '" + theClientFileID + "'"
        oRecSet.Open sSQL, oConn, adOpenKeyset, adLockOptimistic
        If oRecSet.State > 0 Then
            If Not oRecSet.EOF Then
                oRecSet.Fields("FileObject").Value = oStream.Read
                oRecSet.Update
                oRecSet.Close
                BinaryFileStore = True
            End If
        End If
        Set oRecSet = Nothing
        oConn.Close
    End If
    Set oConn = Nothing
    oStream.Close
    
    If oFileSys.FileExists(sTempFileName) Then
        oFileSys.DeleteFile sTempFileName, True
    End If
    
    Application.Cursor = iCurs
Exit Function
Err_Handler:
    Application.Cursor = iCurs
    WriteDebug CStr(Now) + vbCrLf + Err.Description + vbCrLf + sSQL + vbCrLf + vbCrLf
    MsgBox Err.Description, vbCritical, PROG_NAME
    If Not oRecSet Is Nothing Then
        If oRecSet.State > 0 Then
            oRecSet.Close
        End If
        Set oRecSet = Nothing
    End If
    If Not oConn Is Nothing Then
        If oConn.State > 0 Then
            oConn.Close
        End If
        Set oConn = Nothing
    End If
End Function

Public Function BinaryFileRetrieve(ByVal theDestPath As String) As Boolean
On Error GoTo Err_Handler

    Dim sSQL As String
    Dim sConnStr As String
    Dim oConn As Object
    Dim oRecSet As Object
    Dim oStream As Object
    Dim oFileSys As New Scripting.FileSystemObject
    Dim iCurs As Long
    Dim bContinue As Boolean
    Dim bCheckedOut As Boolean
    
    sConnStr = GetSetting(PROG_NAME, "Settings", "ConnStr", "")
    If sConnStr = "" Then
        Exit Function
    End If

    iCurs = Application.Cursor
    Application.Cursor = xlWait

    Set oConn = CreateObject("ADODB.Connection")
    oConn.Open sConnStr
    
    If oConn.State > 0 Then
        Set oRecSet = CreateObject("ADODB.Recordset")
        
        oRecSet.Open "SELECT FileObject,CheckOut FROM tbClients WHERE ClientFileID = '" & oFileSys.GetBaseName(theDestPath) & "'", oConn, adOpenKeyset, adLockOptimistic
        
        If oRecSet.State > 0 Then
            If Not oRecSet.EOF Then
                If oFileSys.FolderExists(oFileSys.GetParentFolderName(theDestPath)) Then
                    If oFileSys.FileExists(theDestPath) Then
                        If oFileSys.GetFile(theDestPath).Attributes Mod 2 = ReadOnly Then
                            bContinue = False
                        Else
                            bContinue = True
                        End If
                    Else
                        bContinue = True
                    End If
                    If bContinue Then
                        If Not IsNull(oRecSet.Fields("FileObject").Value) Then
                            Set oStream = CreateObject("ADODB.Stream")
                            oStream.Type = adTypeBinary
                            oStream.Open
                            oStream.Write oRecSet.Fields("FileObject").Value
                            oStream.SaveToFile theDestPath, adSaveCreateOverWrite
                            oStream.Close
                            bCheckedOut = (RemoveNull(oRecSet.Fields("CheckOut").Value) <> "")
                            If oFileSys.FileExists(theDestPath) Then
                                If bCheckedOut Then
                                    oFileSys.GetFile(theDestPath).Attributes = ReadOnly
                                End If
                            End If
                            BinaryFileRetrieve = True
                        End If
                    End If
                End If
            End If
        End If
        oRecSet.Close
    End If
    oConn.Close
    Application.Cursor = iCurs
Exit Function
Err_Handler:
    Application.Cursor = iCurs
    WriteDebug CStr(Now) + vbCrLf + Err.Description + vbCrLf + sSQL + vbCrLf + vbCrLf
    MsgBox Err.Description, vbCritical, PROG_NAME
    If Not oRecSet Is Nothing Then
        If oRecSet.State > 0 Then
            oRecSet.Close
        End If
        Set oRecSet = Nothing
    End If
    If Not oConn Is Nothing Then
        If oConn.State > 0 Then
            oConn.Close
        End If
        Set oConn = Nothing
    End If
End Function

Public Function ValidateUser(ByVal theUserName As String, ByVal thePassword As String, Optional ByRef theStatus As LoginStatusTypes) As Boolean
    Dim sSQL As String
    Dim vTmp As Variant
    Dim sDigest As String
    Dim oMD5 As New CMD5
    Dim tUserInfo As UserInfo
    Dim sErr As String
    
    InitCurrentUserInfo
    tUserInfo = GetUserInfo(theUserName, sErr)
    If sErr = "" Then
        If Not tUserInfo.LockedOut Then
            If tUserInfo.Password = oMD5.MD5(thePassword & MD5_CONST) Then
                ValidateUser = True
                theStatus = LOGIN_SUCCESS
                g_CurrentUserInfo = tUserInfo
            Else
                theStatus = LOGIN_INCORRECT_PASSWORD
            End If
        Else
            ' User is locked out
            theStatus = LOGIN_USER_LOCKED_OUT
        End If
    Else
        ' User does not exists
        theStatus = LOGIN_NO_SUCH_USER
    End If
End Function

Public Function GetUserInfo(ByVal theUserID As String, Optional ByRef ErrStatus As String) As UserInfo
    Dim sSQL As String
    Dim vTmp As Variant
    Dim tUserInfo As UserInfo
    
    sSQL = "SELECT UserID,Password,LockedOut,FirstName,LastName,Designations,SecLevel FROM tbUsers WHERE UserID = '" + Replace(theUserID, "'", "''") + "'"
    vTmp = ExecuteSQL(sSQL)
    If IsArray(vTmp) Then
        If UBound(vTmp, 2) > -1 Then
            tUserInfo.Username = RemoveNull(vTmp(0, 0))
            tUserInfo.Password = RemoveNull(vTmp(1, 0))
            tUserInfo.LockedOut = (CStr(RemoveNull(vTmp(2, 0))) = "1")
            tUserInfo.FirstName = RemoveNull(vTmp(3, 0))
            tUserInfo.LastName = RemoveNull(vTmp(4, 0))
            tUserInfo.Designations = RemoveNull(vTmp(5, 0))
            tUserInfo.SecLevel = RemoveNull(vTmp(6, 0))
            GetUserInfo = tUserInfo
            ErrStatus = ""
        Else
            ' User does not exist
            ErrStatus = "User does not exist!"
        End If
    Else
        ' User does not exist
        ErrStatus = "User does not exist!"
    End If
End Function

Public Function IsUsingLargeDatabase() As Boolean
    Dim bRet As Boolean
    bRet = GetSetting(PROG_NAME, "Settings", "SaveFileToDB", "0") = "1"
    IsUsingLargeDatabase = bRet
End Function

Public Sub InitCurrentUserInfo()
    g_CurrentUserInfo.Designations = ""
    g_CurrentUserInfo.Email = ""
    g_CurrentUserInfo.FirstName = ""
    g_CurrentUserInfo.LastName = ""
    g_CurrentUserInfo.LockedOut = False
    g_CurrentUserInfo.Password = ""
    g_CurrentUserInfo.SecLevel = 0
    g_CurrentUserInfo.Username = ""
End Sub

Public Sub SetupCurrentUserInfo()
    frmLogin.Show
End Sub

Public Function HideSheetsVeryWell(ByRef theClientFile As Workbook, ByVal bHideIt As Boolean)
    On Error Resume Next
    Dim oSht As Worksheet
    
    For Each oSht In theClientFile.Sheets
        If Not (UCase(oSht.name) = "SYSTEM" Or oSht.name = ".Wj3.G") Then
            oSht.Visible = IIf(bHideIt, xlSheetVeryHidden, xlSheetVisible)
        Else
            oSht.Range("C100").Value = IIf(bHideIt, "X", "")
        End If
    Next oSht
End Function

Public Sub AutoUnHideCFSheets(ByVal theClientFile As Workbook)
    Dim sSysName As String
    Dim bHidden As Boolean
    
    sSysName = IIf(SheetsAreEncrypted(theClientFile), ".Wj3.G", "system")
    If WorkSheetExists(theClientFile, sSysName) Then
        bHidden = (theClientFile.Sheets(sSysName).Range("C100").Value = "X")
        If bHidden Then
            HideSheetsVeryWell theClientFile, False
        End If
    End If
End Sub

Public Sub InitEachModuleChartEvent(ByVal theWorkBookName As String)
' Initializes the Module Init Chart Event to fix the Plot Area/Legend overlap in Excel 2007 bug
On Error GoTo Err_Trap
    Run theWorkBookName + "!InitChartEvent"
Exit Sub
Err_Trap:
End Sub

Attribute VB_Name = "modLang"
Option Explicit

Public Function Lang(ByVal theIndex As Variant) As String
    Dim bEvt As Boolean
    Dim iLangID As Integer
    Dim iLastRow As Long
    Dim oTmp As Range
    
    If Not WkBkLoaded("Lang.xls") Then
        If Dir(ThisWorkbook.path + "\Lang.xls") <> "" Then
            bEvt = Application.EnableEvents
            Application.EnableEvents = False
            Workbooks.Open ThisWorkbook.path + "\Lang.xls", False, True
            Application.EnableEvents = bEvt
        End If
    End If
    If WkBkLoaded("Lang.xls") Then
        iLangID = GetLangID + 1
        If IsNumeric(theIndex) Then
            Lang = Workbooks("Lang.xls").Sheets(1).Cells(theIndex, iLangID).Value
        Else
            With Workbooks("Lang.xls").Sheets(1)
                Set oTmp = .Columns(1).Cells.Find(Left(theIndex, 255), .Cells(1), xlFormulas, xlWhole, xlByColumns, xlNext, False, False)
                If Not oTmp Is Nothing Then
                    iLastRow = WorksheetFunction.CountA(.Columns(1))
                    If iLastRow > 0 Then
                        Lang = .Cells(iLastRow, iLangID).Value
                    End If
                End If
            End With
        End If
    End If
End Function

Private Function WkBkLoaded(ByVal theWkBkName As String) As Boolean
On Error GoTo Err_Trap
    WkBkLoaded = Not Workbooks(theWkBkName) Is Nothing
Exit Function
Err_Trap:
End Function

Private Function GetLangID() As Integer
On Error Resume Next
    GetLangID = Val(Workbooks("Lang.xls").Sheets(1).Cells(1, 5).Value)
End Function

Public Function IsFR() As Boolean
    IsFR = (GetLangID > 0)
End Function
Attribute VB_Name = "modMain"
Option Explicit

Public Const PROG_NAME = "FP Solutions"
Public Const STR_CONN = "Driver=Microsoft Access Driver (*.mdb);PWD=@09hjer#e4KJroeQ1@"
Public Const STR_CLTFILEID_RNG = "C100"
Public Const STR_DATAFILE_EXT = ".FPS"
Public Const DATA_RANGE As String = "A6:C500"   ' data
Public Const ADV_RANGE As String = "D11:AZ300"  ' Variables
Public Const STR_CIBC = "CIBC Wood Gundy"
Public Const SETTINGS_KEY = "Settings 2017"
Public Const STR_ROLLFORWARDDONE As String = "RollForwardDone"
Public Const STR_ROLLFORWARDDONE_FR As String = "RollForwardDone_FR"

Public Const BIF_RETURNONLYFSDIRS = &H1
Public Const BIF_DONTGOBELOWDOMAIN = &H2
Public Const BIF_STATUSTEXT = &H4
Public Const BIF_RETURNFSANCESTORS = &H8
Public Const BIF_BROWSEFORCOMPUTER = &H1000
Public Const BIF_BROWSEFORPRINTER = &H2000
Public Const MAX_PATH = 260

' ADO Constants
Public Const adOpenForwardOnly = 0
Public Const adLockReadOnly = 1
Public Const adOpenDynamic = 2
Public Const adLockBatchOptimistic = 4
Public Const adOpenKeyset = 1
Public Const adLockOptimistic = 3
Public Const adTypeBinary = 1
Public Const adSaveCreateOverWrite = 2

Private Const INVALID_HANDLE_VALUE = -1

Public g_CurrListItem As ListItem
Public g_ListView As ListView
Public g_CurrNode As Node
Public g_CurrentUserInfo As UserInfo

Private m_DownGradeMode As Boolean
Private m_SupressError(1) As Boolean

Public Enum FPDocType
    DOC_CONCEPT = 0
    DOC_CUSTOM = 1
End Enum

Public Type ClientFileInfo
    FilePath As String
    FromDB As Boolean
    ScreenName As String
End Type

Public Enum FileTypeRestrictions
    TYPE_ALL = 0
    TYPE_CF_ONLY = 1
    TYPE_DFF_ONLY = 2
End Enum

Public Type BROWSEINFO
   hOwner           As Long
   pidlRoot         As Long
   pszDisplayName   As String
   lpszTitle        As String
   ulFlags          As Long
   lpfn             As Long
   lParam           As Long
   iImage           As Long
End Type

Type FILETIME
    dwLowDateTime As Long
    dwHighDateTime As Long
End Type

Type WIN32_FIND_DATA  '  318  Bytes
    dwFileAttributes As Long
    ftCreationTime As FILETIME
    ftLastAccessTime As FILETIME
    ftLastWriteTime As FILETIME
    nFileSizeHigh As Long
    nFileSizeLow As Long
    dwReserved|fffd| As Long
    dwReserved1 As Long
    cFileName As String * MAX_PATH
    cAlternate As String * 14
End Type

Private Declare Function apiFindFirstFile Lib "kernel32" _
    Alias "FindFirstFileA" _
    (ByVal lpFileName As String, _
    lpFindFileData As WIN32_FIND_DATA) _
    As Long

Private Declare Function apiFindClose Lib "kernel32" _
    Alias "FindClose" _
    (ByVal hFindFile As Long) _
    As Long

Private Declare Function apiGetShortPathName Lib "kernel32" _
    Alias "GetShortPathNameA" _
    (ByVal lpszLongPath As String, _
    ByVal lpszShortPath As String, _
    ByVal cchBuffer As Long) _
    As Long

Public Declare Function SHGetPathFromIDList Lib "shell32" _
   Alias "SHGetPathFromIDListA" _
  (ByVal pidl As Long, _
   ByVal pszPath As String) As Long

Public Declare Function SHBrowseForFolder Lib "shell32" _
   Alias "SHBrowseForFolderA" _
  (lpBrowseInfo As BROWSEINFO) As Long

Public Declare Sub CoTaskMemFree Lib "ole32" _
   (ByVal pv As Long)

Public Function GetDataFolder() As String
' Returns the folder where the Database is stored
' In case of a centralized Database storage, additional setup will be required
On Error GoTo Err_Handler

    Dim sClientPath As String
    Dim sDataFolder As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sPathFromReg As String
    
    If IsUsingLargeDatabase Then
        sDataFolder = ThisWorkbook.path + "\TempData"
        If Not oFileSys.FolderExists(sDataFolder) Then
            oFileSys.CreateFolder sDataFolder
        End If
        GetDataFolder = sDataFolder
        Exit Function
    End If
    
    sDataFolder = GetSetting(PROG_NAME, GetSettingsKey, "DataFolder", ThisWorkbook.path + "\data")
    sPathFromReg = sDataFolder
    
    sDataFolder = Replace(sDataFolder, ":\\", ":\")
    
    If sDataFolder = "" Then
        sDataFolder = ThisWorkbook.path + "\data"
    End If
    
    If Not oFileSys.FolderExists(sDataFolder) Then
        oFileSys.CreateFolder sDataFolder
        If Not IsCIBCWG Then
            oFileSys.CopyFile ThisWorkbook.path + "\system\ClientMgr.mdb", sDataFolder + "\ClientMgr.mdb", True
            oFileSys.GetFile(sDataFolder + "\ClientMgr.mdb").Attributes = Normal
            ShareDB False
            CheckPathFields sDataFolder + "\ClientMgr.mdb"
        End If
    Else
        If Not oFileSys.FileExists(sDataFolder + "\ClientMgr.mdb") Then
            If Not IsCIBCWG Then
                oFileSys.CopyFile ThisWorkbook.path + "\system\ClientMgr.mdb", sDataFolder + "\ClientMgr.mdb", True
                oFileSys.GetFile(sDataFolder + "\ClientMgr.mdb").Attributes = Normal
                ShareDB False
                CheckPathFields sDataFolder + "\ClientMgr.mdb"
            End If
        End If
    End If
    
    If oFileSys.FileExists(sDataFolder + "\ClientMgr.mdb") Then
        If oFileSys.GetFile(sDataFolder + "\ClientMgr.mdb").Attributes <> Normal Then
            oFileSys.GetFile(sDataFolder + "\ClientMgr.mdb").Attributes = Normal
        End If
    End If
    
    sDataFolder = Replace(sDataFolder, ":\\", ":\")
    
    GetDataFolder = sDataFolder
    
    m_SupressError(0) = False
Exit Function
Err_Handler:
    sDataFolder = ThisWorkbook.path + "\data"
    If Not m_SupressError(0) Then
        If IsCIBCWG Then
            MsgBox Replace(Lang(136), "%FOLDER%", sPathFromReg) + vbLf + Lang(327), vbCritical, PROG_NAME
            sDataFolder = ""
            m_SupressError(0) = False
        Else
            MsgBox Err.Description + ". " + Lang(315), vbCritical, PROG_NAME
            m_SupressError(0) = True
        End If
    End If
    GetDataFolder = sDataFolder
End Function

Public Function ExecuteSQL(ByVal theSQL As String, Optional ByVal theDBFilePath As String = "") As Variant
On Error GoTo Err_Handler
    Dim oConn As Object
    Dim sConnStr As String
    Dim sDataFolder As String
    Dim oRecSet As Object
    Dim iRecAffect As Integer
    Dim oFileSys As New Scripting.FileSystemObject
    Dim iCurs As Long
    Dim bUseConnStr As Boolean
    
    If theDBFilePath = "" Then
        sDataFolder = GetDataFolder
    Else
        sDataFolder = oFileSys.GetParentFolderName(theDBFilePath)
    End If
    If sDataFolder <> "" Then
        iCurs = Application.Cursor
        Application.Cursor = xlWait
        
        bUseConnStr = (GetSetting(PROG_NAME, "Settings", "UseConnStr", "0") = "1")
        If bUseConnStr Then
            sConnStr = GetSetting(PROG_NAME, "Settings", "ConnStr", "")
            If sConnStr = "" Then
                sConnStr = STR_CONN + ";DBQ=" + sDataFolder + "\ClientMgr.mdb"
            End If
        Else
            sConnStr = STR_CONN + ";DBQ=" + sDataFolder + "\ClientMgr.mdb"
        End If
        
        Set oConn = CreateObject("ADODB.Connection")
        oConn.Open sConnStr
        If oConn.State > 0 Then
            If UCase(Left(theSQL, 6)) = "SELECT" Then
                Set oRecSet = oConn.Execute(theSQL)
                If Not oRecSet.EOF Then
                    ExecuteSQL = oRecSet.GetRows
                End If
                oRecSet.Close
                Set oRecSet = Nothing
            Else
                oConn.Execute theSQL, iRecAffect
                ExecuteSQL = iRecAffect
            End If
            oConn.Close
        End If
        Set oConn = Nothing
        Application.Cursor = iCurs
    End If
Exit Function
Err_Handler:
    Application.Cursor = iCurs
    WriteDebug CStr(Now) + vbCrLf + Err.Description + vbCrLf + theSQL + vbCrLf + vbCrLf
    MsgBox Err.Description, vbCritical, PROG_NAME
    If Not oRecSet Is Nothing Then
        If oRecSet.State > 0 Then
            oRecSet.Close
        End If
        Set oRecSet = Nothing
    End If
    If Not oConn Is Nothing Then
        If oConn.State > 0 Then
            oConn.Close
        End If
        Set oConn = Nothing
    End If
End Function

Public Function DetectDataType(ByVal theValue As Variant) As Integer
    Dim iRet As Integer
    Select Case True
        Case UCase(theValue) = "TRUE" Or UCase(theValue) = "FALSE"
            iRet = 2
        Case IsDate(theValue)
            iRet = 3
        Case IsNumeric(theValue)
            iRet = 1
        Case Else
            iRet = 0
    End Select
    DetectDataType = iRet
End Function

Public Function InsertClientDataFile(ByVal theClientFile As Workbook, Optional ByVal theName As String = "", Optional ByVal theDBFilePath As String = "") As String
    Dim sInitials As String
    Dim oPerinfo As Worksheet
    Dim sClientFileID As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sName As String
    Dim iRecAffect As Integer
    Dim sPlanDate As String
    Dim sStartDate As String
    Dim sPlannerName As String
    
    ChDir ThisWorkbook.path
    
    Set oPerinfo = theClientFile.Sheets("Perinfo.xls")
    sInitials = UCase(Left(oPerinfo.Range("A18").Value, 1)) + UCase(Left(oPerinfo.Range("A20").Value, 1))
    sInitials = Replace(sInitials, " ", "Z")
    sClientFileID = sInitials + Format(CreateClientFileID(sInitials, theDBFilePath), IIf(IsUsingLargeDatabase, "00000000", "00000"))
    If theName = "" Then
        sName = oFileSys.GetBaseName(theClientFile.name)
    Else
        sName = theName
    End If
    
    If WorkSheetExists(theClientFile, "Perinfo.xls") Then
        If IsDate(theClientFile.Sheets("Perinfo.xls").Range("A6").Value) Or IsNumeric(theClientFile.Sheets("Perinfo.xls").Range("A6").Value) Then
            If IsFrench Then
                sPlanDate = "'" + ToEnglishLongDate(Format(CDate(theClientFile.Sheets("Perinfo.xls").Range("A6").Value), "yyyy-mm-dd"), "-") + "'"
            Else
                sPlanDate = "'" + Format(CDate(theClientFile.Sheets("Perinfo.xls").Range("A6").Value), "yyyy-mm-dd") + "'"
            End If
        Else
            sPlanDate = "NULL"
        End If
        sStartDate = IIf(IsFrench, "1 janv ", "January 1, ") + CStr(theClientFile.Sheets("Perinfo.xls").Range("A7").Value)
        If IsDate(sStartDate) Then
            If IsFrench Then
                sStartDate = "'" + ToEnglishLongDate(Format(CDate(sStartDate), "yyyy-mm-dd"), "-") + "'"
            Else
                sStartDate = "'" + Format(CDate(sStartDate), "yyyy-mm-dd") + "'"
            End If
        Else
            sStartDate = "NULL"
        End If
    End If
    
    If ClientDataNameExists(sName, theDBFilePath) Then
        sName = IncrementClientName(sName, theDBFilePath)
    End If
    
    ' Process single quotes
    sName = Replace(sName, "'", "''")
    sPlannerName = Replace(GetPlannerName, "'", "''")
    
    iRecAffect = ExecuteSQL("INSERT INTO tbClients (ClientName,ClientFileID,PlanDate,StartOfPlan,Creator) VALUES ('" + sName + "','" + sClientFileID + "'," + sPlanDate + "," + sStartDate + ",'" + sPlannerName + "')", theDBFilePath)
    If iRecAffect > 0 Then
        theClientFile.Sheets("system").Range(STR_CLTFILEID_RNG).Value = sClientFileID
        InsertClientDataFile = sClientFileID
    End If
End Function

Public Function UpdateClientTable(ByVal theClientFile As Workbook, ByVal theClientFileID As String) As Boolean
    Dim sSQL As String
    Dim sPlanDate As String
    Dim sStartOfPlan As String
    Dim sDateModified As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim iRecAffect As Integer
    Dim sPlanner As String
    
    ChDir ThisWorkbook.path
    If Not theClientFile Is Nothing Then
        If ClientFileIDExists(theClientFileID) Then
            If WorkSheetExists(theClientFile, "system") Then
                sPlanner = Replace(GetPlannerName, "'", "''")
                sPlanDate = Format(CDate(theClientFile.Sheets("Perinfo.xls").Range("A6").Value), IIf(IsFrench, "yyyy-mm-dd", "MMMM dd, YYYY"))
                sStartOfPlan = IIf(IsFrench, "janv 1 ", "January 1, ") + CStr(theClientFile.Sheets("Perinfo.xls").Range("A7").Value)
                
                If oFileSys.FileExists(theClientFile.FullName) Then
                    sDateModified = CStr(oFileSys.GetFile(theClientFile.FullName).DateLastModified)
                Else
                    sDateModified = CStr(Now)
                End If
                
                sSQL = "UPDATE tbClients SET PlanDate = '" + sPlanDate + "',StartOfPlan = '" + sStartOfPlan + "',DateModified = '" + sDateModified + "', ModifiedBy = '" + sPlanner + "' WHERE ClientFileID = '" + theClientFileID + "'"
                iRecAffect = ExecuteSQL(sSQL)
                UpdateClientTable = (iRecAffect > 0)
            End If
        End If
    End If
End Function

Public Function ClientDataNameExists(ByVal theName As String, Optional ByVal theDBFilePath As String = "") As Boolean
    Dim sSQL As String
    Dim vTmp As Variant
    sSQL = "SELECT ID FROM tbClients WHERE ClientName = '" + Replace(theName, "'", "''") + "'"
    vTmp = ExecuteSQL(sSQL, theDBFilePath)
    ClientDataNameExists = IsArray(vTmp)
End Function

Public Function IncrementClientName(ByVal theName As String, Optional ByVal theDBFilePath As String = "") As String
    Dim iVal As Integer
    Dim sTmpName As String
    Dim vTmp As Variant
    
    sTmpName = theName
    Do While ClientDataNameExists(sTmpName, theDBFilePath)
        vTmp = Split(sTmpName)
        iVal = Val(vTmp(UBound(vTmp)))
        If iVal = 0 Then
            iVal = 2
        Else
            iVal = iVal + 1
            vTmp(UBound(vTmp)) = ""
        End If
        sTmpName = Trim(Join(vTmp, " ")) + " " + CStr(iVal)
        DoEvents
    Loop
    IncrementClientName = sTmpName
End Function

Public Function CreateClientFileID(ByVal sInitials As String, Optional ByVal theDBFilePath As String = "") As Long
    Dim sSQL As String
    Dim aTmp As Variant
    Dim iVal As Long
    Dim vVal As Variant
    
    sSQL = "SELECT TOP 1 ClientFileID FROM tbClients WHERE ClientFileID LIKE '" + sInitials + "%' ORDER BY ClientFileID DESC"
    aTmp = ExecuteSQL(sSQL, theDBFilePath)
    If IsArray(aTmp) Then
        If UBound(aTmp, 2) > -1 Then
            vVal = aTmp(0, 0)
            iVal = Val(Right(vVal, Len(vVal) - 2))
            iVal = iVal + 1
            CreateClientFileID = iVal
        End If
    End If
End Function

Public Function Import(ByVal theFileName As String, Optional ByRef theImportForm As frmImport = Nothing) As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    Dim bContinue As Boolean
    Dim sWkBkName As String
    Dim oWkBk As Workbook
    Dim oShtSys As Worksheet
    Dim sClientFileID As String
    Dim sDataPath As String
    Dim bWasProtected As Boolean
    Dim bScr As Boolean
    Dim bSuccess As Boolean
    
    ChDir ThisWorkbook.path
    
    ' Check if file exists
    If oFileSys.FileExists(theFileName) Then
        ' Get the workbook name
        sWkBkName = oFileSys.GetFileName(theFileName)
        ' Assume we want to continue
        bContinue = True
        ' Check if Already Loaded
        If WorkBookExists(sWkBkName) Then
            ' Ask if we can re-open or re-load file
            Select Case MsgBox(Lang(121), vbQuestion + vbYesNo, PROG_NAME)
                ' Yes
                Case vbYes
                    Workbooks(sWkBkName).Saved = True
                    Workbooks(sWkBkName).Close
                    bContinue = True
                ' Else exit
                Case Else
                    Exit Function
            End Select
        End If
        ' Check if we can continue
        If bContinue Then
            If Not ActiveWorkbook.name = "Mainpage.xls" Then
                If WorkBookExists("Fps.xls") Then
                    Run "FPS.xls!ActivateMainpage"
                End If
            End If
            bScr = Application.ScreenUpdating
            Application.ScreenUpdating = False
            ' Open Excel File
            Application.DisplayAlerts = False
            Set oWkBk = Workbooks.Open(theFileName, False)
            Application.DisplayAlerts = True
            If oWkBk.Windows(1).Visible Then
                bWasProtected = oWkBk.ProtectWindows
                If bWasProtected Then
                    oWkBk.Unprotect "IWantToEditThisClientFile"
                End If
                oWkBk.Windows(1).Visible = False
                If bWasProtected Then
                    oWkBk.Protect "IWantToEditThisClientFile", True, True
                End If
            End If
            ' Check if System Sheet exists
            If WorkSheetExists(oWkBk, "system") Then
                ' Get reference to System sheet
                Set oShtSys = oWkBk.Sheets("system")
                ' Check if ClientFileID does not exists
                If Not ClientFileIDExists(oShtSys.Range(STR_CLTFILEID_RNG).Value) Then
                    ' Insert New Client Data File
                    sClientFileID = InsertClientDataFile(oWkBk)
                    ' Save File
                    sDataPath = GetDataFolder
                    Application.StatusBar = Lang(122)
                    Application.DisplayAlerts = False
                    EncryptSheets oWkBk
                    UniversalSaveAs oWkBk, sDataPath + IIf(Right(sDataPath, 1) = "\", "", "\") + sClientFileID + STR_DATAFILE_EXT
                    
                    ' Check if we want to save entire file to Database As Well
                    If IsUsingLargeDatabase Then
                        bSuccess = BinaryFileStore(oWkBk, sClientFileID)
                    End If

                    DecryptSheets oWkBk, "GB-009453-45"
                    ' Import Mining Data as well
                    ImportMiningData oWkBk, sClientFileID, theImportForm
                    Application.DisplayAlerts = True
                    Application.StatusBar = False
                End If
                oWkBk.Close False
                If Val(Application.ScreenUpdating) <> Val(bScr) Then
                    Application.ScreenUpdating = bScr
                End If
                Import = True
            Else
                ' Prompt user, invalid Client File
                MsgBox Lang(361), vbExclamation, PROG_NAME
                ' Close the WorkBook, don't save
                oWkBk.Close False
            End If
        End If
    End If
End Function

Public Function ClientFileIDExists(ByVal theID As String, Optional ByVal theDBFilePath As String = "") As Boolean
    Dim aTmp As Variant
    If theID <> "" Then
        aTmp = ExecuteSQL("SELECT ID FROM tbClients WHERE ClientFileID = '" + theID + "'", theDBFilePath)
        ClientFileIDExists = IsArray(aTmp)
    End If
End Function

Public Function LoadClientFile(ByVal theClientFileID As String) As Workbook
    Dim sDataFolder As String
    Dim oClientFile As Workbook
    Dim sFileTitle As String
    Dim oFileSys As New Scripting.FileSystemObject
    
    ' Get FileTitle
    sFileTitle = GetFileTitle(theClientFileID)
        
    ' Get the Data Folder
    sDataFolder = GetDataFolder
    
    ChDir ThisWorkbook.path
    
    ' Check if file already opened
    If WorkBookExists(theClientFileID + STR_DATAFILE_EXT) Then
        ' Ask user if want to reopen client file
        If MsgBox(Replace(Lang(362), "%CLIENTFILE%", sFileTitle), vbQuestion + vbYesNo, PROG_NAME) = vbYes Then
            ' Close the workbook
            Workbooks(theClientFileID + STR_DATAFILE_EXT).Saved = True
            Workbooks(theClientFileID + STR_DATAFILE_EXT).Close False
        Else
            ' Abort
            Exit Function
        End If
    End If
    
    If Not oFileSys.FileExists(sDataFolder + "\" + theClientFileID + STR_DATAFILE_EXT) Then
        MsgBox Replace(Lang(316), "%DATAFILE%", theClientFileID), vbCritical, PROG_NAME
        Exit Function
    End If
    
    ' Check if Using Shared DB
    If IsDBShared Then
        ' Lock File
        LockClient theClientFileID
    End If
    
    ' Hide filename from Statusbar
    Application.StatusBar = Lang(363)
    
    ' Open the Client file workbook
    Application.DisplayAlerts = False
    Set oClientFile = Workbooks.Open(sDataFolder + "\" + theClientFileID + STR_DATAFILE_EXT, False)
    Application.DisplayAlerts = True
    
    ' Change the Window Name
    oClientFile.Windows(1).Caption = Lang(282)
    
    ' Check if Sheets are Encrypted
    If SheetsAreEncrypted(oClientFile) Then
        ' Decrypt the Sheets
        DecryptSheets oClientFile, "GB-009453-45"
    End If
    
    ' Reset status bar
    Application.StatusBar = False
    
    ' Parse the Client file without showing DEW
    If Not Run("FPS.xls!File_Open", , , oClientFile, , True) Then
        If Not m_DownGradeMode Then
            MsgBox Replace(Lang(317), "%FILE%", sFileTitle), vbExclamation, PROG_NAME
        Else
            m_DownGradeMode = False
        End If
        Set LoadClientFile = Nothing
        UnlockClient theClientFileID
        Exit Function
    Else
        If m_DownGradeMode Then
            If Not Run("FPS.xls!File_Open", , , oClientFile, , True) Then
                Set LoadClientFile = Nothing
                UnlockClient theClientFileID
                Exit Function
            End If
            m_DownGradeMode = False
        End If
    End If
    
    Set LoadClientFile = oClientFile
    
End Function

Public Function GetFileTitle(ByVal theClientFileID As String) As String
    Dim sSQL As String
    Dim aData As Variant
    
    sSQL = "SELECT ClientName FROM tbClients WHERE ClientFileID = '" + theClientFileID + "'"
    aData = ExecuteSQL(sSQL)
    If IsArray(aData) Then
        GetFileTitle = aData(0, 0)
    End If
End Function

Public Function GetBookNameFromCaption(ByVal theWorkBookCaption As String) As Workbook
    Dim oWorkBook As Workbook
    
    For Each oWorkBook In Application.Workbooks
        If UCase(theWorkBookCaption) = UCase(oWorkBook.Windows(1).Caption) Then
            Set GetBookNameFromCaption = oWorkBook
            Exit For
        End If
    Next oWorkBook
End Function

Public Sub PopulateClientFile(ByRef theClientFile As Workbook)
    Dim sSQL As String
    Dim sClientFileID As String
    Dim aData As Variant
    Dim oPerinfo As Worksheet
    Dim iCnt As Integer
    
    sClientFileID = theClientFile.Sheets("system").Range("C100").Value
    ' Retrieve Personal info from Database
    sSQL = "SELECT ID,ClientFileID,SheetName,Range,Scenario,CellValue,DataType FROM tbPersonal WHERE ClientFileID = '" + sClientFileID + "'"
    aData = ExecuteSQL(sSQL)
    If IsArray(aData) Then
        Set oPerinfo = theClientFile.Sheets("Perinfo.xls")
        For iCnt = LBound(aData, 2) To UBound(aData, 2)
            ' Copy Data to the client file
            Select Case aData(6, iCnt)
                Case 0  ' Text
                    oPerinfo.Range(aData(3, iCnt)).Value = CStr(aData(5, iCnt))
                Case 1  ' Number
                    oPerinfo.Range(aData(3, iCnt)).Value = Val(aData(5, iCnt))
                Case 2  ' Boolean
                    oPerinfo.Range(aData(3, iCnt)).Value = CBool(aData(5, iCnt))
                Case 3  ' Date
                    oPerinfo.Range(aData(3, iCnt)).Value = CDate(aData(5, iCnt))
            End Select
        Next iCnt
    End If
End Sub

Public Sub StripClientFile(ByRef theClientFile As Workbook)
    Dim iCnt As Integer
    Dim oDefault As Workbook
    Dim iNumScen As Integer
    Dim aRngArray As Variant
    Dim iCntArray As Integer
    
    ' Set up the Range Array to Strip
    aRngArray = Array("A16:A26", "A33:A36", "A42:A44", "A46:A56", "A62:A68", "A76:A82")
    
    ChDir ThisWorkbook.path
    
    ' Make reference to currently selected Defaults file
    Set oDefault = Run("FPS.xls!GetWorkBook", Run("FPS.xls!GetDefaultsFilename"), True)

    ' Get Number of Scenarios
    iNumScen = Run("FPS.xls!iNumScenarios", theClientFile)
    
    ' Cut Paste Default values to specified ranges
    For iCnt = 0 To iNumScen
        For iCntArray = LBound(aRngArray) To UBound(aRngArray)
            oDefault.Sheets("Perinfo.xls").Range(aRngArray(iCntArray)).Copy
            theClientFile.Sheets("Perinfo.xls").Range(aRngArray(iCntArray)).Offset(1000 * iCnt).PasteSpecial Paste:=xlPasteValues, SkipBlanks:=False
        Next iCntArray
    Next iCnt
    
    ' Fix Dependent Names
    For iCnt = 0 To iNumScen
        For iCntArray = 69 To 75
            If theClientFile.Sheets("Perinfo.xls").Cells(iCntArray, 1).Offset(1000 * iCnt).Value <> "" Then
                theClientFile.Sheets("Perinfo.xls").Cells(iCntArray - 7, 1).Offset(1000 * iCnt).Value = Lang(364) + " " + CStr(iCntArray - 68)
            End If
        Next iCntArray
    Next iCnt
    Application.CutCopyMode = False
End Sub

Public Sub PopulateClientListView(ByRef theListView As ListView, Optional ByVal theWhereClause As String = "", Optional ByRef theComboBox As ComboBox = Nothing)
    Dim sSQL As String
    Dim aTmp As Variant
    Dim oListItem As ListItem
    Dim iCnt As Integer
    Dim sPlannerName As String
    
    ' Check if using a shared database
    If IsDBShared Then
        If GetSettingsTable("ListAllClientFiles", "No") = "No" Then
            ' Get the planner name
            sPlannerName = GetPlannerName
            ' Create the where clause to filter out only where Creator = Planner name
            If theWhereClause = "" Then
                theWhereClause = " WHERE Creator = '" + Replace(sPlannerName, "'", "''") + "' "
            Else
                theWhereClause = theWhereClause + " AND Creator = '" + Replace(sPlannerName, "'", "''") + "' "
            End If
            ' Set the SQL Statement
            sSQL = "SELECT ClientName, DateModified, ClientFileID, ID, PlanDate, StartOfPlan, Lock, Creator, ModifiedBy FROM tbClients " + theWhereClause + " ORDER BY DateModified DESC"
        Else
            ' Set the SQL Statement
            sSQL = "SELECT ClientName, DateModified, ClientFileID, ID, PlanDate, StartOfPlan, Lock, Creator, ModifiedBy FROM tbClients " + theWhereClause + " ORDER BY DateModified DESC"
        End If
    Else
        ' Set the SQL Statement
        sSQL = "SELECT ClientName, DateModified, ClientFileID, ID, PlanDate, StartOfPlan, Lock, Creator, ModifiedBy FROM tbClients " + theWhereClause + " ORDER BY DateModified DESC"
    End If
    
    ' Retrieve Data from DB
    aTmp = ExecuteSQL(sSQL)
    
    ' Clear Listview
    theListView.ListItems.Clear
    
    If Not theComboBox Is Nothing Then
        theComboBox.Clear
    End If
    
    ' Check if records returned
    If IsArray(aTmp) Then
        ' Iterate through entire records
        For iCnt = LBound(aTmp, 2) To UBound(aTmp, 2)
            ' Add an item to listview
            Set oListItem = theListView.ListItems.Add(, , aTmp(0, iCnt), , 1)
            oListItem.SubItems(1) = aTmp(1, iCnt)
            oListItem.SubItems(2) = aTmp(2, iCnt)
            oListItem.SubItems(3) = aTmp(3, iCnt)
            oListItem.SubItems(4) = RemoveNull(Format(aTmp(4, iCnt), IIf(IsFrench, "yyyy-mm-dd", "MMMM dd, YYYY")))
            oListItem.SubItems(5) = RemoveNull(Format(aTmp(5, iCnt), IIf(IsFrench, "yyyy-mm-dd", "MMMM dd, YYYY")))
            oListItem.SubItems(6) = RemoveNull(aTmp(6, iCnt))
            oListItem.SubItems(7) = RemoveNull(aTmp(7, iCnt))
            oListItem.SubItems(8) = RemoveNull(aTmp(8, iCnt))
            If oListItem.SubItems(6) <> "" Then
                oListItem.SmallIcon = 2
            End If
            If Not theComboBox Is Nothing Then
                theComboBox.AddItem aTmp(0, iCnt)
            End If
        Next iCnt
    End If
    
End Sub

Public Sub PopulateClientListViewFromQuery(ByRef theListView As ListView, ByVal theWhereClause As String)
    Dim sSQL As String
    Dim iCnt As Long
    Dim aTmp As Variant
    Dim oListItem As ListItem
    Dim sPlannerName As String
    
    If Not theListView Is Nothing Then
        theListView.ListItems.Clear
        If IsDBShared Then
            sPlannerName = GetPlannerName
            If theWhereClause = "" Then
                theWhereClause = " WHERE tbClients.Creator = '" + Replace(sPlannerName, "'", "''") + "' "
            Else
                theWhereClause = theWhereClause + " AND tbClients.Creator = '" + Replace(sPlannerName, "'", "''") + "' "
            End If
            sSQL = "SELECT DISTINCTROW tbClients.ClientName, tbClients.DateModified, tbClients.ClientFileID, tbClients.ID, tbClients.PlanDate, tbClients.StartOfPlan, tbClients.Lock, tbClients.Creator, tbClients.ModifiedBy FROM tbClients, tbData, tbDependents " + theWhereClause + " ORDER BY tbClients.DateModified DESC"
        Else
            sSQL = "SELECT DISTINCTROW tbClients.ClientName, tbClients.DateModified, tbClients.ClientFileID, tbClients.ID, tbClients.PlanDate, tbClients.StartOfPlan, tbClients.Lock, tbClients.Creator, tbClients.ModifiedBy FROM tbClients, tbData, tbDependents " + theWhereClause + " ORDER BY tbClients.DateModified DESC"
        End If
        aTmp = ExecuteSQL(sSQL)
        If IsArray(aTmp) Then
            For iCnt = LBound(aTmp, 2) To UBound(aTmp, 2)
                ' Add an item to listview
                Set oListItem = theListView.ListItems.Add(, , aTmp(0, iCnt), , 1)
                oListItem.SubItems(1) = aTmp(1, iCnt)
                oListItem.SubItems(2) = aTmp(2, iCnt)
                oListItem.SubItems(3) = aTmp(3, iCnt)
                oListItem.SubItems(4) = RemoveNull(Format(aTmp(4, iCnt), IIf(IsFrench, "yyyy-mm-dd", "MMMM dd, YYYY")))
                oListItem.SubItems(5) = RemoveNull(Format(aTmp(5, iCnt), IIf(IsFrench, "yyyy-mm-dd", "MMMM dd, YYYY")))
                oListItem.SubItems(6) = RemoveNull(aTmp(6, iCnt))
                oListItem.SubItems(7) = RemoveNull(aTmp(7, iCnt))
                oListItem.SubItems(8) = RemoveNull(aTmp(8, iCnt))
                If oListItem.SubItems(6) <> "" Then
                    oListItem.SmallIcon = 2
                End If
            Next iCnt
        End If
    End If
End Sub

Public Function SaveClientFile(ByVal theClientFileID As String, Optional ByVal iPrimaryScenario As Integer = 0, Optional ByVal bNoPrompt As Boolean = False, Optional ByVal bshowProgress As Boolean = True) As Boolean
    Dim oCurrClientFile As Workbook
    Dim bResult As Boolean
    
    ChDir ThisWorkbook.path
    
    ' Check if WorkBook Client File Exists - WorkBook name is the ClientFileID + ".FPS"
    If WorkBookExists(theClientFileID + STR_DATAFILE_EXT) Then
        ' Set message in Status bar to hide the name of the client data file
        Application.StatusBar = Lang(122)
        ' Get the Current Client File
        Set oCurrClientFile = Workbooks(theClientFileID + STR_DATAFILE_EXT)
        ' Save current scenario data first
        Run "FPS.xls!SaveCurrentScenarioData", oCurrClientFile
        ' Load the Primary Scenario
        Run "FPS.xls!LoadScenario", oCurrClientFile, iPrimaryScenario
        ' Save the name of the current scenario
        If iPrimaryScenario > 0 Then
            oCurrClientFile.Sheets("system").Range("G1").Value = oCurrClientFile.Sheets("system").Range("H" + CStr(iPrimaryScenario)).Value
        Else
            oCurrClientFile.Sheets("system").Range("G1").Value = ""
        End If
        ' Calculate
        Calculate
        ' Store the Financial Information to Database (Mining Data)
        If Not SaveMiningData(theClientFileID, True) Then
            MsgBox Lang(90), vbExclamation, PROG_NAME
        End If
        ' Save Client Info
        UpdateClientTable oCurrClientFile, theClientFileID
        ' Save the File
        SaveClientFile = Run("FPS.xls!File_Save", , bshowProgress, bNoPrompt)
        ' Set The Title Bar
        Run "FPS.xls!DisplayScenarioInfo"
        ' Set the Status bar back
        Application.StatusBar = False
    Else
        MsgBox "Error finding the Client File (Invalid Client File ID - '" + theClientFileID + "')", vbCritical, PROG_NAME
    End If
End Function

Public Sub DeleteItem()
    Dim sSQL As String
    Dim iRecAffect As Integer
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sClientFileID As String
    Dim sDataFolder As String
    Dim oClientFile As Workbook
    Dim sCurrCFFullName As String
    
    ChDir ThisWorkbook.path
    
    If Not g_CurrListItem Is Nothing Then
        Set oClientFile = Run("FPS.xls!GetClientFile")
        If Not oClientFile Is Nothing Then
            sCurrCFFullName = oClientFile.FullName
        End If
        sDataFolder = GetDataFolder
        sClientFileID = g_CurrListItem.SubItems(2)
        If UCase(sDataFolder + "\" + sClientFileID + STR_DATAFILE_EXT) <> UCase(sCurrCFFullName) Then
            If MsgBox(Lang(91), vbQuestion + vbYesNo + vbDefaultButton2, PROG_NAME) = vbYes Then
                sSQL = "DELETE FROM tbClients WHERE ID = " + CStr(g_CurrListItem.SubItems(3))
                iRecAffect = ExecuteSQL(sSQL)
                If iRecAffect > 0 Then
                    sSQL = "DELETE FROM tbData WHERE ClientFileID = '" + CStr(g_CurrListItem.SubItems(2)) + "'"
                    iRecAffect = ExecuteSQL(sSQL)
                    sSQL = "DELETE FROM tbDependents WHERE ClientFileID = '" + CStr(g_CurrListItem.SubItems(2)) + "'"
                    iRecAffect = ExecuteSQL(sSQL)
                    If oFileSys.FileExists(sDataFolder + "\" + sClientFileID + STR_DATAFILE_EXT) Then
                        oFileSys.DeleteFile sDataFolder + "\" + sClientFileID + STR_DATAFILE_EXT, True
                    End If
                End If
                PopulateClientListView g_ListView
            End If
        Else
            MsgBox Lang(92), vbExclamation, PROG_NAME
        End If
    End If
    Set g_CurrListItem = Nothing
End Sub

Public Sub RenameItem()
    Dim sName As String
    Dim sSQL As String
    Dim iSelIndex As Long
    Dim oCurrCF As Workbook
    Dim bContinue As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sDataFolder As String

    ChDir ThisWorkbook.path
    
    bContinue = True
    If Not g_CurrListItem Is Nothing Then
        Set oCurrCF = Run("FPS.xls!GetClientFile")
        If Not oCurrCF Is Nothing Then
            sDataFolder = GetDataFolder
            If UCase(oCurrCF.FullName) = UCase(sDataFolder + "\" + g_CurrListItem.SubItems(2) + STR_DATAFILE_EXT) Then
                MsgBox Lang(93), vbExclamation, PROG_NAME
                bContinue = False
            End If
        End If
        If bContinue Then
            sName = InputBox(Lang(94), Lang(95), g_CurrListItem.Text)
            If sName <> "" Then
                sSQL = "UPDATE tbClients SET ClientName = '" + Replace(sName, "'", "''") + "' WHERE ID = " + CStr(g_CurrListItem.SubItems(3))
                ExecuteSQL sSQL
                iSelIndex = g_CurrListItem.index
                PopulateClientListView frmClients.lvwClients
                frmClients.lvwClients.ListItems(iSelIndex).Selected = True
            End If
        End If
    End If
    Set g_CurrListItem = Nothing
End Sub

Public Sub ShowOpen()
    CFMainOpen
End Sub

Public Sub ShowOpen_OLD()
    Dim oCurrClientFile As Workbook
    Dim sMsg As String

    ChDir ThisWorkbook.path
    ' Check first is there is an existing Client File Opened
    Set oCurrClientFile = Run("FPS.xls!GetClientFile")
    If Not oCurrClientFile Is Nothing Then
        If CFIsDBBased(oCurrClientFile) Then
            sMsg = Lang(83)
        Else
            sMsg = Lang(84)
        End If
        If Not Run("FPS.xls!IsReadOnlyMode") Then
            ' Prompt user to save the Client File
            Select Case MsgBox(sMsg, vbQuestion + vbYesNoCancel, PROG_NAME)
                Case vbYes
                    If CFIsDBBased Then
                        If Not ShowSaveAs(False) Then
                            Exit Sub
                        End If
                    Else
                        Run "FPS.xls!File_Save", , True
                    End If
                Case vbCancel
                    Exit Sub
            End Select
        End If
    End If
    
    frmClients.Show
End Sub

Public Sub CloseClientFile()
    Dim oCurrClientFile As Workbook
    Dim oFileSys As New Scripting.FileSystemObject
    Dim bDBBased As Boolean
    Dim sFileToDelete As String
    
    ' Go to mainpage to avoid uneccessary display of other windows
    If WorkBookExists("FPS.xls") Then
        Run "FPS.xls!ActivateMainPage"
    End If
    ' Get Client File Again
    Set oCurrClientFile = Run("FPS.xls!GetClientFile")
    If Not oCurrClientFile Is Nothing Then
        ' Check if DB Based
        If CFIsDBBased(oCurrClientFile) Then
            ' Unlock Client Data
            UnlockClient oFileSys.GetBaseName(oCurrClientFile.name)
            bDBBased = True
            sFileToDelete = oCurrClientFile.FullName
        End If
        ' Close the Current Client File
        oCurrClientFile.Close False
        ' Check again if DB Based
        If bDBBased Then
            ' Check if using Enterprise scale database
            If IsUsingLargeDatabase Then
                ' Check if file exist
                If oFileSys.FileExists(sFileToDelete) Then
                    ' Delete the local file
                    oFileSys.DeleteFile sFileToDelete, True
                End If
            End If
        End If
    End If
    ' Switch to Mainpage First to avoid errors later
    If WorkBookExists("Fps.xls") Then
        Run "FPS.xls!ActivateMainPage"
    End If
    ' Close All Standard Modules (Personal & Business)
    CloseStandardModules
    ' Close All Miscellaneous Documents (Concepts & Custom Docs)
    CloseMiscDocuments True
    ' Close Monte Carlo Simulation if exists
    CloseMonteSim
    ' Initialize Executive Summary Pages
    If WorkBookExists("Mainpage.xls") Then
        Run "Mainpage.xls!InitExecPages", True
    End If
    ' Clear LastFileName (client file)
    Workbooks("FPS.xls").Sheets("system").Range("LastFileName").Value = ""
    ' Reset Titlebar
    Run "FPS.xls!DisplayScenarioInfo"
    ' Set the default file to blank
    Run "FPS.xls!SetDefaultFile", ""

End Sub

Public Sub CloseMonteSim()
On Error Resume Next

    Dim bEvt As Boolean
    Dim bUpd As Boolean
    Dim oActivWin As Window

    bEvt = Application.EnableEvents
    bUpd = Application.ScreenUpdating
    Set oActivWin = ActiveWindow
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    ChDir ThisWorkbook.path
    ' Close Montesim
    If WorkBookExists("Montesim.xls") Then
        Run "FPS.xls!DeleteSimbar"
        Workbooks("Montesim.xls").Close False
    End If

    Application.EnableEvents = bEvt
    If Not oActivWin Is ActiveWindow Then
        If Not oActivWin Is Nothing Then
            oActivWin.Activate
        End If
    End If
    If Val(Application.ScreenUpdating) <> Val(bUpd) Then
        Application.ScreenUpdating = bUpd
    End If
    
End Sub

Public Sub CloseMiscDocuments(ByVal bAll As Boolean, Optional ByVal theDocType As FPDocType)
    Dim sExt As String
    Dim oTmpBk As Workbook
    Dim bEvt As Boolean
    Dim bUpd As Boolean
    Dim oActivWin As Window
    Dim sExceptCustDoc As String
    
    bEvt = Application.EnableEvents
    bUpd = Application.ScreenUpdating
    Set oActivWin = ActiveWindow
    Application.EnableEvents = False
    Application.ScreenUpdating = False

    If WorkBookExists("CustDocCreator.xls") Then
        If Workbooks("CustDocCreator.xls").Sheets("shtData").Range("CURR_DOC").Value <> "" Then
            sExceptCustDoc = Workbooks("CustDocCreator.xls").Sheets("shtData").Range("CURR_DOC").Value
            If Not WorkBookExists(sExceptCustDoc) Then
                sExceptCustDoc = ""
            End If
        End If
    End If
    If bAll Then
        For Each oTmpBk In Workbooks
            If UCase(Right(oTmpBk.name, 4)) = ".FPC" Or UCase(Right(oTmpBk.name, 4)) = ".FCD" Then
                If sExceptCustDoc <> "" Then
                    If UCase(oTmpBk.name) <> UCase(sExceptCustDoc) Then
                        oTmpBk.Close
                    End If
                Else
                    oTmpBk.Close False
                End If
            End If
        Next oTmpBk
    Else
        Select Case theDocType
            Case DOC_CONCEPT
                sExt = ".FPC"
            Case DOC_CUSTOM
                sExt = ".FCD"
        End Select
        
        If sExt <> "" Then
            For Each oTmpBk In Workbooks
                If UCase(Right(oTmpBk.name, 4)) = sExt Then
                    If sExceptCustDoc <> "" Then
                        If UCase(oTmpBk.name) <> UCase(sExceptCustDoc) Then
                            oTmpBk.Close
                        End If
                    Else
                        oTmpBk.Close False
                    End If
                End If
            Next oTmpBk
        End If
    End If

    Application.EnableEvents = bEvt
    If Not oActivWin Is ActiveWindow Then
        If Not oActivWin Is Nothing Then
            oActivWin.Activate
        End If
    End If
    If Val(Application.ScreenUpdating) <> Val(bUpd) Then
        Application.ScreenUpdating = bUpd
    End If

End Sub

Public Function ShowSaveAs(Optional ByVal bSaveAs As Boolean = True, Optional ByVal bShowPrompt As Boolean = True, Optional ByVal theClientFile As Workbook = Nothing, Optional ByVal bIsFactFinder As Boolean = False) As Boolean
    If Not Application.ScreenUpdating Then
        Application.ScreenUpdating = True
    End If
    If Not Run("FPS.xls!IsReadOnlyMode") Then
        If bSaveAs Then
            ShowSaveAs = SaveAsCF(theClientFile, , , bShowPrompt)
        Else
            ShowSaveAs = SaveCF(, bShowPrompt)
        End If
    Else
        MsgBox Replace(Lang(73), "%PROGRAM%", PROG_NAME), vbExclamation, PROG_NAME
    End If
End Function

Public Function ShowSaveAs_OLD(Optional ByVal bSaveAs As Boolean = True, Optional ByVal bShowPrompt As Boolean = True, Optional ByVal theClientFile As Workbook = Nothing, Optional ByVal bIsFactFinder As Boolean = False) As Boolean
    Dim sInitFile As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sClientFileID As String
    Dim iScenNum As Integer
    
    If Run("FPS.xls!IsReadOnlyMode") Then
        Exit Function
    End If
    
    If Not AllowedToUseDB Then
        MsgBox Lang(318), vbExclamation, PROG_NAME
        Exit Function
    End If
    
    ChDir ThisWorkbook.path
    sClientFileID = oFileSys.GetBaseName(Workbooks("FPS.xls").Sheets("system").Range("LastFileName").Value)
    sInitFile = GetFileTitle(sClientFileID)
    If Not bSaveAs Then
        Load frmPrimScen
        frmPrimScen.SetClientFile IIf(theClientFile Is Nothing, Run("FPS.xls!GetClientFile"), theClientFile)
        frmPrimScen.Show
        If frmPrimScen.m_ButtonClicked = frmPrimScen.cmdOK.Caption Then
            iScenNum = frmPrimScen.m_SelectedScenario
            If Not SaveClientFile(sClientFileID, iScenNum, Not bShowPrompt) Then
                MsgBox Lang(123), vbExclamation, PROG_NAME
            Else
                ShowSaveAs_OLD = True
            End If
        End If
        frmPrimScen.m_ForceClose = True
        Unload frmPrimScen
    Else
        Load frmSaveAs
        Set frmSaveAs.m_ClientFile = theClientFile
        frmSaveAs.m_NoPromptSave = Not bShowPrompt
        frmSaveAs.m_ClientFileID = sClientFileID
        frmSaveAs.m_InitFileTitle = sInitFile
        frmSaveAs.m_IsFactFinder = bIsFactFinder
        If Trim(sInitFile) = "" Then
            frmSaveAs.txtFilename.Text = IncrementClientName(Run("FPS.xls!CreateFileName"))
        Else
            frmSaveAs.txtFilename.Text = sInitFile
            frmSaveAs.Caption = Replace(Lang(319), "%FILE%", sInitFile)
        End If
        frmSaveAs.Show
        ShowSaveAs_OLD = (frmSaveAs.m_ButtonClicked = frmSaveAs.cmdOK.Caption)
        frmSaveAs.m_ForceClose = True
        Unload frmSaveAs
    End If
End Function

Public Sub PopulateScenarioCombo(ByVal theListBox As Object)
    Dim oClientFile As Workbook
    Dim oSysSht As Worksheet
    Dim iCnt As Integer
    ChDir ThisWorkbook.path
    theListBox.Clear
    theListBox.AddItem Lang(34)
    theListBox.ListIndex = 0
    Set oClientFile = Run("FPS.xls!GetClientFile")
    If Not oClientFile Is Nothing Then
        If WorkSheetExists(oClientFile, "system") Then
            Set oSysSht = oClientFile.Sheets("system")
            For iCnt = 1 To 10
                If oSysSht.Cells(iCnt, 8).Value <> "" Then
                    theListBox.AddItem oSysSht.Cells(iCnt, 8).Value
                    If oSysSht.Range("G1").Value = oSysSht.Cells(iCnt, 8).Value Then
                        theListBox.ListIndex = iCnt
                    End If
                Else
                    Exit For
                End If
            Next iCnt
        End If
    End If
End Sub

Public Function RemoveNull(ByVal theValue As Variant) As Variant
    If IsNull(theValue) Then
        RemoveNull = ""
    Else
        RemoveNull = theValue
    End If
End Function

Public Sub PopulateDefaultsList(ByRef theComboBox As ComboBox, Optional ByVal theDefaultValue As String = "")
    Dim oFileSys As New Scripting.FileSystemObject
    Dim oFile As Scripting.File
    
    theComboBox.AddItem Lang(320)
    theComboBox.AddItem "FP Solutions Default"
    theComboBox.ListIndex = 0
    
    ' Default should be IFSC Fund Category
    
    For Each oFile In oFileSys.GetFolder(ThisWorkbook.path).Files
        If UCase(oFileSys.GetExtensionName(oFile.name)) = "XUD" Then
            theComboBox.AddItem oFileSys.GetBaseName(oFile.name)
            If theComboBox.List(theComboBox.ListCount - 1) = theDefaultValue Then
                theComboBox.ListIndex = theComboBox.ListCount - 1
            End If
        End If
    Next oFile
        
End Sub

Public Sub GotoClientFolder()
    Dim sInitPath As String
    Dim bIsUNC As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sNewDriveLetter As String
    Dim sNewPath As String
    
    ChDir ThisWorkbook.path
    ' Change folder to Current Client folder or Default Client Folder
'    sInitPath = Run("FPS.xls!GetClientFilePath")
    sInitPath = GetSetting(PROG_NAME, GetSettingsKey, "DefaultPath", "")
    sInitPath = IIf(sInitPath = "", ThisWorkbook.path + "\client", sInitPath)
    bIsUNC = Left(sInitPath, 2) = "\\"
    If Not bIsUNC Then
        If oFileSys.FolderExists(sInitPath) Then
            ChDrive Left(sInitPath, 2)
            ChDir sInitPath
        Else
            MsgBox Replace(Lang(322), "%PATH%", sInitPath), vbExclamation, PROG_NAME
            ChDir ThisWorkbook.path + "\client"
        End If
    Else
        If oFileSys.FolderExists(sInitPath) Then
            If MsgBox(Lang(323) + vbLf + Lang(324) + vbLf + Lang(325), vbQuestion + vbYesNo, PROG_NAME) = vbYes Then
                sNewDriveLetter = Run("FPS.xls!ConnectNextFreeNetworkDrive", oFileSys.GetDriveName(sInitPath))
                If sNewDriveLetter <> "" Then
                    sNewPath = Replace(sInitPath, oFileSys.GetDriveName(sInitPath), sNewDriveLetter)
                    ChDrive sNewDriveLetter
                    ChDir sNewPath
                    ' Save Last Path Setting (Registry)
                    SaveSetting PROG_NAME, GetSettingsKey, "DefaultPath", sNewPath
                Else
                    MsgBox Lang(326), vbInformation, PROG_NAME
                    ChDir ThisWorkbook.path + "\client"
                End If
            Else
                Exit Sub
            End If
        Else
            MsgBox Lang(327), vbExclamation, PROG_NAME
            ChDir ThisWorkbook.path + "\client"
            SaveSetting PROG_NAME, GetSettingsKey, "DefaultPath", ThisWorkbook.path + "\client"
        End If
    End If
End Sub

Public Function SaveMiningData(ByVal theClientFileID As String, Optional ByVal bshowProgress As Boolean = False) As Boolean
    Dim oPerinfo As Workbook
    Dim aFldList As Variant
    Dim sSQL As String
    Dim iCnt As Integer
    Dim vValue As Variant
    Dim aDepDOB As Variant
    Dim bSkip As Boolean
    Dim sFields As String
    Dim sValues As String
    Dim iRecAffect As Long
    
    ChDir ThisWorkbook.path
    Set oPerinfo = Run("FPS.xls!GetWorkBook", "Perinfo.xls")
    If Not oPerinfo Is Nothing Then
        sFields = "ClientFileID"
        sValues = "'" + theClientFileID + "'"
        sSQL = "SELECT FieldName, Type, SheetName, SheetAddress, Description, ID FROM tbFields ORDER BY ID"
        aFldList = ExecuteSQL(sSQL)
        
        If bshowProgress Then
            Load frmProgress
            frmProgress.Caption = Lang(328)
            frmProgress.SetProgress 0, ""
            frmProgress.Display
        End If
        
        For iCnt = LBound(aFldList, 2) To UBound(aFldList, 2)
            
            If bshowProgress Then
                frmProgress.SetProgress iCnt / UBound(aFldList, 2) * 100, aFldList(4, iCnt)
            End If
            
            bSkip = False
            vValue = oPerinfo.Sheets(aFldList(2, iCnt)).Range(aFldList(3, iCnt)).Value
            bSkip = IsError(vValue)
            If IsArray(vValue) Then
                Select Case aFldList(0, iCnt)
                    Case "DepDOB"
                        If Trim(JoinRangeValue(vValue, "", "")) <> "" Then
                            ' Store in Dependents Table later
                            aDepDOB = vValue
                        End If
                        bSkip = True
                    Case Else
                        vValue = JoinRangeValue(vValue, "", vbCrLf)
                        vValue = Replace(vValue, "'", "''")
                        bSkip = False
                End Select
            End If
            If Not bSkip Then
                sFields = sFields + IIf(sFields <> "", "," + aFldList(0, iCnt), aFldList(0, iCnt))
                Select Case aFldList(1, iCnt)
                    Case 0 ' Text
                        vValue = "'" + Replace(CStr(Trim(vValue)), "'", "''") + "'"
                    Case 1 ' Number
                        Select Case aFldList(5, iCnt)
                            Case 39, 40, 41, 42
                                vValue = CStr(GetToleranceNumber(vValue))
                            Case 43, 44
                                vValue = CStr(GetKnowledgeNumber(vValue))
                            Case Else
                                vValue = CStr(Val(vValue))
                        End Select
                    Case 2 ' Date
                        If vValue <> "" And IsDate(vValue) Then
                            If IsFrench Then
                                vValue = "'" + ToEnglishLongDate(CStr(Format(CDate(vValue), "yyyy-mm-dd")), "-") + "'"
                            Else
                                vValue = "'" + CStr(Format(CDate(vValue), "yyyy-mm-dd")) + "'"
                            End If
                        Else
                            vValue = "NULL"
                        End If
                    Case 3 ' Boolean
                        Select Case UCase(CStr(vValue))
                            Case "VRAI", "YES", "OUI", "TRUE", "-1", "1"
                                vValue = "1"
                            Case Else
                                vValue = "0"
                        End Select
                End Select
                sValues = sValues + IIf(sValues <> "", "," + vValue, vValue)
            End If
        Next iCnt
        If sFields <> "" And sValues <> "" Then
            sSQL = "DELETE FROM tbData WHERE ClientFileID = '" + theClientFileID + "'"
            ExecuteSQL sSQL
            sSQL = "INSERT INTO tbData (" + sFields + ") VALUES (" + sValues + ")"
            iRecAffect = ExecuteSQL(sSQL)
            If iRecAffect > 0 Then
                If IsArray(aDepDOB) Then
                    sSQL = "DELETE FROM tbDependents WHERE ClientFileID = '" + theClientFileID + "'"
                    ExecuteSQL sSQL
                    For iCnt = LBound(aDepDOB) To UBound(aDepDOB)
                        If CStr(aDepDOB(iCnt, 1)) <> "" Then
                            sSQL = "INSERT INTO tbDependents (ClientFileID,DepDOB) VALUES ('" + theClientFileID + "','" + CStr(aDepDOB(iCnt, 1)) + "')"
                            iRecAffect = ExecuteSQL(sSQL)
                        End If
                    Next iCnt
                End If
            End If
            SaveMiningData = (iRecAffect > 0)
        End If
        
        If bshowProgress Then
            Unload frmProgress
        End If
    End If
End Function

Public Function JoinRangeValue(ByRef theArray As Variant, ByVal theColDelimiter As String, ByVal theRowDelimiter As String) As String
    Dim iCnt As Integer
    Dim sRet As String
    Dim iCntB As Integer
    
    For iCnt = LBound(theArray) To UBound(theArray)
        For iCntB = LBound(theArray, 2) To UBound(theArray, 2)
            If iCntB < UBound(theArray, 2) Then
                sRet = sRet + CStr(theArray(iCnt, iCntB)) + theColDelimiter
            Else
                sRet = sRet + CStr(theArray(iCnt, iCntB))
            End If
        Next iCntB
        If iCnt < UBound(theArray) Then
            sRet = sRet + theRowDelimiter
        End If
    Next iCnt
    JoinRangeValue = sRet
End Function

Public Sub ShowExport()
    frmExport.Show
End Sub

Public Sub InsertMenuItem(ByVal theCaption As String, ByVal theAction As String, ByVal iAtMenuButton As Integer, ByVal thePositionBefore As Integer)
    Dim oTmpCmdBarCtl As CommandBarControl
    
    Set oTmpCmdBarCtl = CommandBars("FpsBar").Controls(iAtMenuButton).Controls.Add(msoControlButton, , , thePositionBefore, True)
    oTmpCmdBarCtl.Caption = theCaption
    oTmpCmdBarCtl.OnAction = theAction
End Sub

Public Sub InitMenu()
    ChDir ThisWorkbook.path
    If Not Run("FPS.xls!IsReadOnlyMode") Then
        If AllowedToUseDB Then
            InsertMenuItem Lang(329), "ClientManager.xls!ShowExport", 1, 7
            InsertMenuItem Lang(330), "ClientManager.xls!ShowDataSourceCreator", 4, 10
            InsertMenuItem Lang(331), "ClientManager.xls!ShowAdmin", 4, 12
            InsertMenuItem Lang(332), "ClientManager.xls!CheckIn", 1, 7
            InsertMenuItem Lang(333), "ClientManager.xls!CheckOut", 1, 7
            InsertMenuItem Lang(334), "ClientManager.xls!ApplyPersonalInfo", 1, 10
        End If
    End If
End Sub

Public Sub ClearQuery()
    If Not g_CurrNode Is Nothing Then
        g_CurrNode.Image = 2
        g_CurrNode.Text = Split(g_CurrNode.Tag, "|")(2)
    End If
End Sub

Public Function ResolveOperator(ByVal theOpString As String) As String
    Select Case UCase(theOpString)
        Case UCase(Lang(147))
            ResolveOperator = "="
        Case UCase(Lang(152))
            ResolveOperator = ">"
        Case UCase(Lang(153))
            ResolveOperator = "<"
        Case UCase(Lang(154))
            ResolveOperator = ">="
        Case UCase(Lang(155))
            ResolveOperator = "<="
        Case UCase(Lang(156))
            ResolveOperator = "<>"
    End Select
End Function

Public Function GetCriteria() As String
    Dim oNode As Node
    Dim sCond As String
    Dim sTmpFld As String
    Dim sRet As String
    Dim sTmpCond As String
    Dim sTmpValue As String
    Dim aTmpArray As Variant
    Dim aCnt As Integer
    Dim iType As Integer
    Dim aInfo As Variant
    Dim sOp As String
    Dim sDepJoin As String
    
    Load frmQuery
    frmQuery.m_Mode = 0
    frmQuery.PopulateList
    frmQuery.Show
    If frmQuery.m_ButtonClicked = frmQuery.cmdOK.Caption Then
        GetCriteria = frmQuery.Criteria
    End If
    frmQuery.m_ForceClose = True
    Unload frmQuery
End Function

Public Function GetToleranceNumber(ByVal theRiskTolerance As String) As Integer
    Dim sSQL As String
    Dim aTmp As Variant
    
    sSQL = "SELECT ID FROM tbRiskTolRef WHERE Title = '" + theRiskTolerance + "'"
    aTmp = ExecuteSQL(sSQL)
    If IsArray(aTmp) Then
        GetToleranceNumber = aTmp(0, 0)
    End If
End Function

Public Function GetKnowledgeNumber(ByVal theKnowledge As String) As Integer
    Dim sSQL As String
    Dim aTmp As Variant
    
    sSQL = "SELECT ID FROM tbKnowlRef WHERE Title = '" + theKnowledge + "'"
    aTmp = ExecuteSQL(sSQL)
    If IsArray(aTmp) Then
        GetKnowledgeNumber = aTmp(0, 0)
    End If
End Function

Public Function ListAllClients()
    If Not g_ListView Is Nothing Then
        PopulateClientListView g_ListView, ""
    End If
End Function

Public Function SheetsAreEncrypted(ByVal theClientFile As Workbook) As Boolean
    If Not theClientFile Is Nothing Then
        SheetsAreEncrypted = (NRADec011304(theClientFile.Sheets(1).name) = "system")
    End If
End Function

Public Sub EncryptSheets(ByRef theClientFile As Workbook)
    Dim oSht As Worksheet
    Dim bIsProtected As Boolean
    Dim bIsWindowsProtected As Boolean
    
    bIsProtected = theClientFile.ProtectStructure
    bIsWindowsProtected = theClientFile.ProtectWindows
    If bIsProtected Then
        theClientFile.Unprotect "IWantToEditThisClientFile"
    End If
    For Each oSht In theClientFile.Sheets
        oSht.name = NRAEnc011304(oSht.name)
    Next oSht
    If bIsProtected Then
        theClientFile.Protect "IWantToEditThisClientFile", bIsProtected, bIsWindowsProtected
    End If
End Sub

Private Function NRADec011304(ByVal theText As String) As String
    Dim iCnt As Integer
    Dim sCurr As String
    Dim sNew As String
    Dim iPos As Integer
    Dim sMid As String
    Dim iTblLen As Integer
    Dim iFactor As Integer
    
    Const sCharTbl = "obf4B7KHl6xm9tFij01EMWvSuVgyec3zsTDOUP-kpNQZq CRwG.8XrhndI52ALJaY"

    iTblLen = Len(sCharTbl)

    theText = StrReverse(theText)
    
    For iCnt = 1 To Len(theText)
        sCurr = Mid(theText, iCnt, 1)
        iPos = (InStr(sCharTbl, sCurr) - 17) + iTblLen
                
        If iCnt > 1 Then
            iFactor = Asc(Mid(theText, iCnt - 1, 1))
            iPos = ((iPos - iFactor) + iTblLen) Mod iTblLen
        Else
            iPos = iPos Mod iTblLen
        End If
        If iPos = 0 Then
            iPos = iTblLen
        End If
        
        If iPos > 0 Then
            sMid = Mid(sCharTbl, iPos, 1)
        Else
            sMid = Mid(sCharTbl, Len(sCharTbl) + iPos, 1)
        End If
        sNew = sNew + sMid
    Next iCnt

    NRADec011304 = sNew
End Function

Private Function NRAEnc011304(ByVal theText As String) As String
    Dim iCnt As Integer
    Dim sCurr As String
    Dim sNew As String
    Dim iPos As Integer
    Dim sMid As String
    Dim iTblLen As Integer
    Dim iFactor As Integer
    
    Const sCharTbl = "obf4B7KHl6xm9tFij01EMWvSuVgyec3zsTDOUP-kpNQZq CRwG.8XrhndI52ALJaY"
    iTblLen = Len(sCharTbl)
    
    For iCnt = 1 To Len(theText)
        sCurr = Mid(theText, iCnt, 1)
        iPos = InStr(sCharTbl, sCurr) + 17
        If iCnt > 1 Then
            iFactor = Asc(Mid(sNew, iCnt - 1, 1))
            iPos = (iPos + iFactor) Mod iTblLen
        Else
            iPos = iPos Mod iTblLen
        End If
        If iPos = 0 Then
            iPos = iTblLen
        End If
        sMid = Mid(sCharTbl, iPos, 1)
        sNew = sNew + sMid
    Next iCnt
    
    NRAEnc011304 = StrReverse(sNew)
End Function

Public Function AllowedToUseDB() As Boolean
    Dim sSQL As String
    Dim aTmp As Variant
    Dim sOwnerID As String
    Dim iRecAffect As Integer
    Dim sDBGuid As String
    
    ' Customizations for CIBC Only
    If IsCIBCWG Then
        AllowedToUseDB = False
        Exit Function
    End If
    
    sSQL = "SELECT OwnerID, Shared FROM tbSystem"
    aTmp = ExecuteSQL(sSQL)
    If IsArray(aTmp) Then
        If aTmp(1, 0) = True Then
            AllowedToUseDB = True
        Else
            sOwnerID = GetSetting(PROG_NAME, "Settings", "OwnerID", "")
            If sOwnerID = "" Then
                sOwnerID = RandomGUID
                SaveSetting PROG_NAME, "Settings", "OwnerID", sOwnerID
            End If
            If RemoveNull(aTmp(0, 0)) = "" Then
                sSQL = "UPDATE tbSystem SET OwnerID = '" + sOwnerID + "'"
                iRecAffect = ExecuteSQL(sSQL)
                AllowedToUseDB = True
            Else
                AllowedToUseDB = (sOwnerID = aTmp(0, 0))
            End If
        End If
    End If
End Function

Public Function GetOwnerID() As String
    Dim sOwnerID As String
    
    sOwnerID = GetSetting(PROG_NAME, "Settings", "OwnerID", "")
    If sOwnerID = "" Then
        sOwnerID = RandomGUID
        SaveSetting PROG_NAME, "Settings", "OwnerID", sOwnerID
    End If
    GetOwnerID = sOwnerID
End Function

Public Function IsDBShared(Optional ByVal bUseLocal As Boolean = False) As Boolean
On Error GoTo Err_Trap
    Dim sSQL As String
    Dim vTmp As Variant
    Dim oConn As Object
    Dim sConnStr As String
    Dim oRecSet As Object
    Dim sDataFolder As String
    
    ' Large Database will always be shared, doesn't make sense not to share a huge database
    If IsUsingLargeDatabase Then
        IsDBShared = True
        Exit Function
    End If
    
    Set oConn = CreateObject("ADODB.Connection")
    Set oRecSet = CreateObject("ADODB.Recordset")
    If bUseLocal Then
        sDataFolder = ThisWorkbook.path + "\data"
    Else
        sDataFolder = GetDataFolder
    End If
    
    sConnStr = STR_CONN + ";DBQ=" + sDataFolder + "\ClientMgr.mdb"
    oConn.Open sConnStr
    If oConn.State > 0 Then
        sSQL = "SELECT Shared FROM tbSystem WHERE ID = 1"
        Set oRecSet = oConn.Execute(sSQL)
        If oRecSet.State > 0 Then
            If Not oRecSet.EOF Then
                vTmp = oRecSet.GetRows
                If IsArray(vTmp) Then
                    IsDBShared = vTmp(0, 0)
                End If
            End If
        End If
        Set oRecSet = Nothing
        oConn.Close
    End If
    Set oConn = Nothing
Exit Function
Err_Trap:
    If oRecSet.State > 0 Then
        oRecSet.Close
    End If
    Set oRecSet = Nothing
    If oConn.State > 0 Then
        oConn.Close
    End If
    Set oConn = Nothing
    IsDBShared = False
End Function

Public Function ShareDB(ByVal bShareIt As Boolean, Optional ByVal bUseLocal As Boolean = False) As Boolean
    Dim sSQL As String
    Dim iRecAffect As Integer
    sSQL = "UPDATE tbSystem SET Shared = " + IIf(bShareIt, "1", "0") + ", OwnerID = " + IIf(bShareIt, "NULL", "'" + GetOwnerID + "'")
    If bUseLocal Then
        iRecAffect = ExecuteSQL(sSQL, ThisWorkbook.path + "\data\ClientMgr.mdb")
    Else
        iRecAffect = ExecuteSQL(sSQL)
    End If
    ShareDB = (iRecAffect > 0)
End Function

Public Function RandomGUID() As String
    Dim sRet As String
    Dim dTmp1 As Double
    Randomize
    dTmp1 = Round(Rnd(1) * 1000000000000#, 0)
    sRet = CStr(dTmp1)
    RandomGUID = Left(sRet, 3) + "-" + Mid(sRet, 4, 6) + "-" + Right(sRet, 3)
End Function

Public Sub ResetDBOwner()
    Dim sSQL As String
    sSQL = "UPDATE tbSystem SET OwnerID = NULL"
    ExecuteSQL sSQL
End Sub

Public Function ImportMiningData(ByVal theClientFile As Workbook, ByVal theClientFileID As String, Optional ByRef theImportForm As frmImport = Nothing)
    Dim oSht As Worksheet
    Dim oFileSys As New Scripting.FileSystemObject
    Dim oModule As Workbook
    Dim iOffSet As Long
    Dim iProgCnt As Integer
    Dim bScrUpd As Boolean
    Dim oActivWin As Window
    Dim bEvt As Boolean
    Dim oDefaultFile As Workbook
    
    bScrUpd = Application.ScreenUpdating
    bEvt = Application.EnableEvents
    Set oActivWin = ActiveWindow
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    ChDir ThisWorkbook.path
    
    ' Check if we need Detailed Projection Modules
    If NeedsDetProjModules(theClientFile) Then
        OpenDetProjMods
    End If
    
    ' Get the Default File
    Set oDefaultFile = Run("FPS.xls!GetWorkBook", Run("FPS.xls!GetDefaultsFilename"), True)
    ' Check if returned nothing
    If oDefaultFile Is Nothing Then
        ' Prompt Message and exit
        MsgBox Lang(335), vbCritical, PROG_NAME
        Exit Function
    Else
        ' Reset Modules based on default file
        ResetAllModules oDefaultFile
    End If
    
    ' Get Scenario Offset value from client file
    iOffSet = GetScenarioOffset(theClientFile)
        
    ' Open the Modules based on Client File copying data from defaults file
    For Each oSht In theClientFile.Sheets
        
        ' Check if the Import form was passed (for progress bar purposes)
        If Not theImportForm Is Nothing Then
            ' Increment progress counter
            iProgCnt = iProgCnt + 1
            ' Set Progress
            theImportForm.SetProgress (iProgCnt / theClientFile.Sheets.Count) * 100
        End If
        
        ' Let Computer breathe so user can click 'Cancel'
        DoEvents
        
        ' Check if sheet name is not system
        If oSht.name <> "system" Then
            If Run("FPS.xls!IsStandardModule", oSht.name) Or Run("FPS.xls!IsBusinessModule", oSht.name) Then
                If Not WorkBookExists(oSht.name) Then
                    ' Open the Module
                    Set oModule = Workbooks.Open(ThisWorkbook.path + "\" + oSht.name, False)
                Else
                    Set oModule = Workbooks(oSht.name)
                End If
                ' Copy Data Section from Client File Workbook
                theClientFile.Sheets(oSht.name).Range(DATA_RANGE).Offset(iOffSet, 0).Copy
                ' Paste on Module
                oModule.Sheets("data").Range(DATA_RANGE).PasteSpecial xlPasteValues
    '            ' Copy Variables Section from Client File Workbook
    '            theClientFile.Sheets(oSht.Name).Range(ADV_RANGE).Offset(iOffSet, 0).Copy
    '            ' Paste on Module
    '            oModule.Sheets("Variables").Range(ADV_RANGE).PasteSpecial xlPasteValues
            End If
        End If
    Next oSht
    ' Turn Off Cut Copy Mode
    Application.CutCopyMode = False
    
    ' Calc
    Calculate
    
    ' Check if the Import form was passed (for progress bar purposes)
    If Not theImportForm Is Nothing Then
        ' Set to 100%
        theImportForm.SetProgress 100
    End If

    ' Calculate
    Application.Calculate
    
    ' Save Mining Data
    SaveMiningData theClientFileID, False
        
    If Not oActivWin Is ActiveWindow Then
        If Not oActivWin Is Nothing Then
            oActivWin.Activate
        End If
    End If
    If Val(Application.ScreenUpdating) <> Val(bScrUpd) Then
        Application.ScreenUpdating = bScrUpd
    End If
    Application.EnableEvents = bEvt
    
End Function

Private Function ResetAllModules(ByVal theDefaultFile As Workbook, Optional ByVal theScenarioNumber As Integer = 0)
On Error Resume Next
    Dim oSht As Worksheet
    Dim oModule As Workbook
    Dim iOffSet As Integer
    
    iOffSet = theScenarioNumber
    
    For Each oSht In theDefaultFile.Sheets
        If WorkBookExists(oSht.name) Then
            ' Get the Module
            Set oModule = Workbooks(oSht.name)
            ' Copy Data Section from Default File Workbook
            theDefaultFile.Sheets(oSht.name).Range(DATA_RANGE).Offset(iOffSet, 0).Copy
            ' Paste on Module
            oModule.Sheets("data").Range(DATA_RANGE).PasteSpecial xlPasteValues
            ' Copy Variables Section from Client File Workbook
            theDefaultFile.Sheets(oSht.name).Range(ADV_RANGE).Offset(iOffSet, 0).Copy
            ' Paste on Module
            oModule.Sheets("Variables").Range(ADV_RANGE).PasteSpecial xlPasteValues
        End If
    Next oSht
    Application.CutCopyMode = False
    Calculate
End Function

Public Function GetScenarioOffset(ByVal theClientFile As Workbook) As Long
    Dim iCnt As Integer
    
    If Not (theClientFile.Sheets("system").Range("G1").Value = "" Or UCase(theClientFile.Sheets("system").Range("G1").Value) = UCase(Lang(34))) Then
        For iCnt = 1 To 10
            If theClientFile.Sheets("system").Cells(iCnt, 8).Value = theClientFile.Sheets("system").Range("G1").Value Then
                GetScenarioOffset = (iCnt * 1000)
                Exit For
            End If
        Next iCnt
    End If
End Function

Public Function NeedsDetProjModules(ByVal theClientFile As Workbook) As Boolean
    Dim vArray As Variant
    Dim iCnt As Integer
    
    vArray = Array("Rcneeds.xls", "Ecneeds.xls", "Scneeds1.xls", "Scneeds2.xls", "Disability1.xls", "Disability2.xls", "Taxation1.xls", "Taxation2.xls", "Cashflow.xls", "Lifestyle.xls", "Networth.xls", "Compare.xls")
    For iCnt = LBound(vArray) To UBound(vArray)
        If SheetExistsInClientFile(theClientFile, vArray(iCnt)) Then
            NeedsDetProjModules = True
            Exit For
        End If
    Next iCnt
End Function

Public Function SheetExistsInClientFile(ByRef theClientFile As Workbook, ByVal theSheetName As String) As Boolean
On Error GoTo Err_Handler
    SheetExistsInClientFile = Not (theClientFile.Sheets(theSheetName) Is Nothing)
Exit Function
Err_Handler:
    SheetExistsInClientFile = False
End Function

Public Sub OpenDetProjMods()
    Dim vArray As Variant
    Dim iCnt As Integer
    
    ChDir ThisWorkbook.path
    vArray = Array("Taxation1.xls", "Taxation2.xls", "Cashflow.xls", "Lifestyle.xls", "Networth.xls", "Compare.xls")
    For iCnt = LBound(vArray) To UBound(vArray)
        If Not WorkBookExists(vArray(iCnt)) Then
            Workbooks.Open ThisWorkbook.path + "\" + vArray(iCnt), False
        End If
    Next iCnt
End Sub

Public Sub CloseStandardModules(Optional ByVal bshowProgress As Boolean = True)
On Error Resume Next
    Dim sDefFile As String
    Dim oDefBk As Workbook
    Dim oFileSys As New Scripting.FileSystemObject
    Dim oSht As Worksheet
    Dim bEvt As Boolean
    Dim bUpd As Boolean
    Dim oActivWin As Window
    Dim iNextRow As Integer
    Dim iProgCnt As Integer
    Dim sAdvRange As String
    
    bEvt = Application.EnableEvents
    bUpd = Application.ScreenUpdating
    Set oActivWin = ActiveWindow
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    ChDir ThisWorkbook.path
    sDefFile = oFileSys.GetFileName(Run("FPS.xls!GetDefaultsFileName"))
    If WorkBookExists(sDefFile) Then
        Set oDefBk = Workbooks(sDefFile)
    Else
        Set oDefBk = Workbooks.Open(ThisWorkbook.path + "\" + sDefFile, False)
    End If
    Workbooks("FPS.xls").Sheets("system").Range("A2:A500").Clear
    
    If bshowProgress Then
        Load frmProgress
        frmProgress.Caption = Lang(336)
        frmProgress.SetProgress 0, Lang(337)
        frmProgress.Display
    End If
    
    For Each oSht In oDefBk.Sheets
        
        If bshowProgress Then
            iProgCnt = iProgCnt + 1
            frmProgress.SetProgress iProgCnt / oDefBk.Sheets.Count * 100
        End If
        
        Select Case UCase(oSht.name)
            Case "MAINPAGE.XLS"
            Case "PERINFO.XLS", "PROFILE.XLS", "TAXTABLE.XLS", "ASSUMPTIONS.XLS"
                If WorkBookExists(oSht.name) Then
                    oSht.Range(DATA_RANGE).Copy
                    Workbooks(oSht.name).Sheets("data").Range(DATA_RANGE).PasteSpecial xlPasteValues
                    If WorkSheetExists(Workbooks(oSht.name), "Variables") Then
                        sAdvRange = IIf(UCase(oSht.name) = "PERINFO.XLS", PERINFO_ADV_RANGE, ADV_RANGE)
                        oSht.Range(sAdvRange).Copy
                        Workbooks(oSht.name).Sheets("Variables").Range(sAdvRange).PasteSpecial xlPasteValues
                    End If
                    Application.CutCopyMode = False
                    iNextRow = Application.WorksheetFunction.CountA(Workbooks("FPS.xls").Sheets("system").Range("A2:A500")) + 1
                    Workbooks("FPS.xls").Sheets("system").Cells(1 + iNextRow, 1) = oSht.name
                End If
            Case Else
                If WorkBookExists(oSht.name) Then
                    If bshowProgress Then
                        frmProgress.SetProgress iProgCnt / oDefBk.Sheets.Count * 100, GetModuleName(oSht.name)
                    End If
                    Workbooks(oSht.name).Close False
                End If
        End Select
    Next oSht
    
    If bshowProgress Then
        Unload frmProgress
    End If
    
    Workbooks("FPS.xls").Sheets("system").Range("B1:C1").Value = ""
    Application.EnableEvents = bEvt
    If Not oActivWin Is ActiveWindow Then
        If Not oActivWin Is Nothing Then
            oActivWin.Activate
        End If
    End If
    If Val(Application.ScreenUpdating) <> Val(bUpd) Then
        Application.ScreenUpdating = bUpd
    End If
    
End Sub

Public Sub ApplyPerInfo(ByVal theSource As Workbook, ByVal theTarget As Workbook, Optional ByVal bUpdateModule As Boolean = False)
    Dim iCnt As Integer
    Dim oDefault As Workbook
    Dim iNumScen As Integer
    Dim aRngArray As Variant
    Dim iCntArray As Integer
    Dim iOffSet As Long
    
    ChDir ThisWorkbook.path
    
    ' Set up the Range Array to Strip
    aRngArray = Array("A16:A26", "A33:A36", "A42:A44", "A46:A56", "A62:A68", "A76:A82")
    
    ' Make reference to source file
    Set oDefault = theSource
    
    ' Get Offset from primary scenario in source client file
    iOffSet = GetScenarioOffset(oDefault)
    
    ' Get Number of Scenarios in the Target File
    iNumScen = Run("FPS.xls!iNumScenarios", theTarget)
    
    ' Check if want to updatemodule as well
    If bUpdateModule Then
        ' Check if module exists
        If WorkBookExists("Perinfo.xls") Then
            ' Check if Data sheet does not exist
            If Not WorkSheetExists(Workbooks("Perinfo.xls"), "data") Then
                ' Do not update module
                bUpdateModule = False
            End If
        Else
            ' Do not update module
            bUpdateModule = False
        End If
    End If
    
    ' Cut/Paste Personal Info from primary scenario in source file to all scenarios in target file
    For iCnt = 0 To iNumScen
        For iCntArray = LBound(aRngArray) To UBound(aRngArray)
            oDefault.Sheets("Perinfo.xls").Range(aRngArray(iCntArray)).Offset(iOffSet).Copy
            theTarget.Sheets("Perinfo.xls").Range(aRngArray(iCntArray)).Offset(1000 * iCnt).PasteSpecial Paste:=xlPasteValues, SkipBlanks:=False
            
            If bUpdateModule Then
                oDefault.Sheets("Perinfo.xls").Range(aRngArray(iCntArray)).Offset(iOffSet).Copy
                Workbooks("Perinfo.xls").Sheets("data").Range(aRngArray(iCntArray)).PasteSpecial Paste:=xlPasteValues, SkipBlanks:=False
            End If
        Next iCntArray
    Next iCnt
    
    Application.CutCopyMode = False
    
    Calculate
End Sub

Public Function GetClientFileIDFromTitle(ByVal theTitle As String) As String
    Dim sSQL As String
    Dim vTmp As Variant
    
    sSQL = "SELECT ClientFileID FROM tbClients WHERE ClientName = '" + Replace(theTitle, "'", "''") + "'"
    vTmp = ExecuteSQL(sSQL)
    If IsArray(vTmp) Then
        GetClientFileIDFromTitle = vTmp(0, 0)
    End If
End Function

Public Sub ShowPDFDocument(ByRef theFileName As String)
    Dim sProg As String
    Dim sPath As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sHelpFile As String
    
    sHelpFile = oFileSys.GetFileName(theFileName)
    
    ChDir ThisWorkbook.path
    
    sProg = GetAssociatedProgram(".PDF")  ' AcroRd32.exe
    If (InStr(UCase(sProg), "ACROBAT.EXE") > 0) Or (InStr(UCase(sProg), "ACRORD32.EXE") > 0) Then
        sPath = ThisWorkbook.path + "\docs"
        sPath = IIf(Right(sPath, 1) = "\", sPath, sPath + "\")
        If oFileSys.FileExists(sPath + sHelpFile) Then
            sPath = sPath + sHelpFile
        Else
            MsgBox Replace(Lang(338), "%FILE%", sHelpFile), vbExclamation, PROG_NAME
            Exit Sub
        End If
        sProg = Replace(sProg, "%1", sPath)
        Shell sProg, vbNormalFocus
    Else
        MsgBox Lang(339), vbExclamation, PROG_NAME
    End If
End Sub

Public Sub WriteDebug(ByVal theText As String)
    Dim oFileSys As New Scripting.FileSystemObject
    oFileSys.OpenTextFile(ThisWorkbook.path + "\ClientMgrDebug.log", ForAppending, True).WriteLine theText
End Sub

Public Function LockClient(ByVal theClientFileID As String) As Boolean
    Dim sPlanner As String
    Dim sSQL As String
    Dim iRecAffect As Integer
    
    sPlanner = Replace(GetPlannerName, "'", "''")
    If ClientFileIDExists(theClientFileID) Then
        sSQL = "UPDATE tbClients SET Lock = '" + sPlanner + "', LockID = '" + GetOwnerID + "' WHERE ClientFileID = '" + theClientFileID + "'"
        iRecAffect = ExecuteSQL(sSQL)
        LockClient = (iRecAffect > 0)
    End If
End Function

Public Function UnlockClient(ByVal theClientFileID As String) As Boolean
    Dim sSQL As String
    Dim iRecAffect As Integer
    
    If ClientFileIDExists(theClientFileID) Then
        sSQL = "UPDATE tbClients SET Lock = NULL, LockID = NULL WHERE ClientFileID = '" + theClientFileID + "'"
        iRecAffect = ExecuteSQL(sSQL)
        UnlockClient = (iRecAffect > 0)
    End If
End Function

Public Function ClearOwnedLocks()
    Dim sSQL As String
    Dim iRecAffect As Integer
    
    sSQL = "UPDATE tbClients SET Lock = NULL, LockID = NULL WHERE Lock = '" + Replace(GetPlannerName, "'", "''") + "'"
    iRecAffect = ExecuteSQL(sSQL)
End Function

Public Function ShareClientData(ByVal theClientFileID As String, ByVal bShareIt As Boolean) As Boolean
    Dim sSQL As String
    Dim iRecAffect As Integer
    
    If ClientFileIDExists(theClientFileID) Then
        sSQL = "UPDATE tbClients SET IsShared = " + IIf(bShareIt, "1", "0") + " WHERE ClientFileID = '" + theClientFileID + "'"
        iRecAffect = ExecuteSQL(sSQL)
        ShareClientData = (iRecAffect > 0)
    End If
End Function

Public Function SetReadOnlyClientData(ByVal theClientFileID As String, ByVal bReadOnly As Boolean) As Boolean
    Dim sSQL As String
    Dim iRecAffect As Integer
    
    If ClientFileIDExists(theClientFileID) Then
        sSQL = "UPDATE tbClients SET IsReadOnly = " + IIf(bReadOnly, "1", "0") + " WHERE ClientFileID = '" + theClientFileID + "'"
        iRecAffect = ExecuteSQL(sSQL)
        SetReadOnlyClientData = (iRecAffect > 0)
    End If
End Function

Public Function IsLockedBy(ByVal theClientFileID As String, Optional ByVal theDBFilePath As String = "") As String
    Dim sSQL As String
    Dim aTmp As Variant
    
    If ClientFileIDExists(theClientFileID, theDBFilePath) Then
        sSQL = "SELECT Lock FROM tbClients WHERE ClientFileID = '" + theClientFileID + "'"
        aTmp = ExecuteSQL(sSQL, theDBFilePath)
        If IsArray(aTmp) Then
            IsLockedBy = RemoveNull(aTmp(0, 0))
        End If
    End If

End Function

Public Function IsLockedByOthers(ByVal theClientFileID As String) As Boolean
    Dim sSQL As String
    Dim aTmp As Variant
    Dim sLockID As String
    Dim bRet As Boolean
    
    bRet = False
    If ClientFileIDExists(theClientFileID) Then
        sSQL = "SELECT LockID FROM tbClients WHERE ClientFileID = '" + theClientFileID + "'"
        aTmp = ExecuteSQL(sSQL)
        If IsArray(aTmp) Then
            sLockID = RemoveNull(aTmp(0, 0))
            If sLockID <> "" Then
                bRet = (sLockID <> GetOwnerID)
            End If
        End If
    End If
    IsLockedByOthers = bRet
End Function

Public Function IsCheckedOutBy(ByVal theClientFileID As String, Optional ByVal theDBFilePath As String = "") As String
    Dim sSQL As String
    Dim aTmp As Variant
    Dim tTmpUserInfo As UserInfo
    
    If ClientFileIDExists(theClientFileID, theDBFilePath) Then
        sSQL = "SELECT CheckOut FROM tbClients WHERE ClientFileID = '" + theClientFileID + "'"
        aTmp = ExecuteSQL(sSQL, theDBFilePath)
        If IsArray(aTmp) Then
            If IsUsingLargeDatabase Then
                tTmpUserInfo = GetUserInfo(RemoveNull(aTmp(0, 0)))
                IsCheckedOutBy = tTmpUserInfo.FirstName & IIf(tTmpUserInfo.LastName = "", "", " " & tTmpUserInfo.LastName)
            Else
                IsCheckedOutBy = RemoveNull(aTmp(0, 0))
            End If
        End If
    End If

End Function

Public Function GetPlannerName(Optional ByVal theDefaultName As String = "Unknown Planner") As String
    Dim oSysBk As Workbook
    Dim sRet As String
    
    If IsUsingLargeDatabase Then
        If g_CurrentUserInfo.Username <> "" Then
            sRet = g_CurrentUserInfo.Username
        Else
            SetupCurrentUserInfo
            sRet = g_CurrentUserInfo.Username
        End If
    Else
        sRet = theDefaultName
        If WorkBookExists("Fpssys.xls") Then
            Set oSysBk = Workbooks("Fpssys.xls")
            If WorkSheetExists(oSysBk, "Sheet2") Then
                If Not (oSysBk.Sheets("Sheet2").Range("A6").Value = 0 Or oSysBk.Sheets("Sheet2").Range("A6").Value = "") Then
                    sRet = GetJustName(oSysBk.Sheets("Sheet2").Range("A6").Value)
                End If
            End If
        End If
    End If
    GetPlannerName = sRet
End Function

Public Function DowngradeClientData(ByRef theClientFile As Workbook, ByVal theInitFilename As String) As Boolean
    Dim sInitFileName As String
    Dim oFileSys As New Scripting.FileSystemObject
    
    Load frmSaveAs
    frmSaveAs.Caption = Lang(340)
    frmSaveAs.m_SaveOnly = False
    Set frmSaveAs.m_ClientFile = theClientFile
    frmSaveAs.cboPrimScen.Enabled = False
    frmSaveAs.cboPrimScen.BackColor = vbButtonFace
    frmSaveAs.lblPrimScen.Enabled = False
    frmSaveAs.m_Downgrade = True
    If theInitFilename = "" Then
        sInitFileName = GetFileTitle(oFileSys.GetBaseName(theClientFile.name)) + " " + Lang(365)
    End If
    frmSaveAs.txtFilename.Text = sInitFileName
    frmSaveAs.Show
    DowngradeClientData = Not (frmSaveAs.m_ButtonClicked = frmSaveAs.cmdCancel.Caption)
    frmSaveAs.m_ForceClose = True
    Unload frmSaveAs
End Function

Public Function DoDowngrade(ByRef theClientFile As Workbook, ByVal theFileName As String) As Boolean
    Dim oSysSht As Worksheet
    Dim oFileSys As New Scripting.FileSystemObject
    Dim iCnt As Integer
    Dim oTmpSht As Worksheet
    Dim bProtStruct As Boolean
    Dim bProtWin As Boolean
    
    ChDir ThisWorkbook.path
    
    Set oSysSht = Run("FPS.xls!GetWorksheet", theClientFile.name, "system")
    If Not oSysSht Is Nothing Then
        oSysSht.Columns(1).ClearContents
        iCnt = 2
        Application.DisplayAlerts = False
        For Each oTmpSht In theClientFile.Worksheets
            If Run("FPS.xls!ModuleAccess", oTmpSht.name) = 0 Then
                ' Get Protection Settings
                bProtStruct = theClientFile.ProtectStructure
                bProtWin = theClientFile.ProtectWindows
                ' Check if any protection was made
                If bProtStruct Or bProtWin Then
                    ' Unprotect client file
                    theClientFile.Unprotect "IWantToEditThisClientFile"
                End If
                ' Remove the sheet
                Application.DisplayAlerts = False
                oTmpSht.Delete
                Application.DisplayAlerts = True
                ' Reprotect client file if previously protected
                If bProtStruct Or bProtWin Then
                    ' Protect client file
                    theClientFile.Protect "IWantToEditThisClientFile", bProtStruct, bProtWin
                End If
            Else
                If UCase(oTmpSht.name) <> "SYSTEM" Then
                    If Run("FPS.xls!IsStandardModule", oTmpSht.name) Or Run("FPS.xls!IsBusinessModule", oTmpSht.name) Then
                        oSysSht.Cells(iCnt, 1).Value = oTmpSht.name
                        iCnt = iCnt + 1
                    Else
                        ' Get Protection Settings
                        bProtStruct = theClientFile.ProtectStructure
                        bProtWin = theClientFile.ProtectWindows
                        ' Check if any protection was made
                        If bProtStruct Or bProtWin Then
                            ' Unprotect client file
                            theClientFile.Unprotect "IWantToEditThisClientFile"
                        End If
                        ' Remove the sheet
                        Application.DisplayAlerts = False
                        oTmpSht.Delete
                        Application.DisplayAlerts = True
                        ' Reprotect client file if previously protected
                        If bProtStruct Or bProtWin Then
                            ' Protect client file
                            theClientFile.Protect "IWantToEditThisClientFile", bProtStruct, bProtWin
                        End If
                    End If
                End If
            End If
        Next oTmpSht
        Application.StatusBar = Lang(75)
        UniversalSaveAs theClientFile, Replace(theFileName, ":\\", ":\")
        LockClient oFileSys.GetBaseName(theFileName)
        Application.StatusBar = False
        Application.DisplayAlerts = True
    End If
    DoDowngrade = True
End Function

Public Sub SetDowngradeMode(ByVal isDowngradeMode As Boolean)
    m_DownGradeMode = isDowngradeMode
End Sub

Public Function CheckDatabase() As Boolean
    Dim sDataFolder As String
    Dim sSysFolder As String
    Dim sSQL As String
    Dim iSysVer As Double
    Dim iDatVer As Double
    Dim bIsUsingNet As Boolean
    
    If IsUsingLargeDatabase Then
        CheckDatabase = True
        Exit Function
    End If
    
    bIsUsingNet = CBool(GetSetting("FPS_Net", GetSettingsKey, "EnableNet", False))
    If bIsUsingNet Then
        sSysFolder = GetSetting("FPS_Net", GetSettingsKey, "ShareLocation", "")
        If sSysFolder = "" Then
            sSysFolder = ThisWorkbook.path + "\system"
        Else
            sSysFolder = sSysFolder + "\system"
        End If
    Else
        sSysFolder = ThisWorkbook.path + "\system"
    End If
    iSysVer = Val(GetDatabaseVersion(sSysFolder + "\ClientMgr.mdb"))
    sDataFolder = GetDataFolder
    iDatVer = Val(GetDatabaseVersion(sDataFolder + "\ClientMgr.mdb"))
    If iSysVer > iDatVer Then
        If MsgBox(Lang(341), vbYesNo + vbQuestion, PROG_NAME) = vbYes Then
            If Not UpdateDatabaseStructure(sSysFolder + "\ClientMgr.mdb", sDataFolder + "\ClientMgr.mdb") Then
                MsgBox Lang(342), vbCritical, PROG_NAME
            Else
                CheckDatabase = True
            End If
        End If
    Else
        CheckDatabase = True
    End If
End Function

Public Function UpdateDatabaseStructure(ByVal theSourceDBPath As String, ByVal theTargetDBPath As String, Optional ByVal bshowProgress As Boolean = True) As Boolean
On Error GoTo Err_Trap
    Dim sSrcPath As String
    Dim sTgtPath As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim oConn1 As Object
    Dim oConn2 As Object
    Dim oRecSet1 As Object
    Dim oRecSet2 As Object
    Dim sConnStr1 As String
    Dim sConnStr2 As String
    Dim sSQL(2) As String
    Dim oFld As Object
    Dim iTotalCnt As Long
    Dim iCurrCnt As Long
    Dim vTmp As Variant
    Dim iCnt As Integer
    Dim sOwnerID As String
    Dim bShared As Boolean
    Dim iRecAffect As Integer
    Dim bScr As Boolean
    
    bScr = Application.ScreenUpdating
    
    sSrcPath = oFileSys.GetParentFolderName(theSourceDBPath)
    sTgtPath = oFileSys.GetParentFolderName(theTargetDBPath)
    
    If oFileSys.FileExists(sTgtPath + "\Temp.mdb") Then
        oFileSys.DeleteFile sTgtPath + "\Temp.mdb", True
    End If
    oFileSys.CopyFile theSourceDBPath, sTgtPath + "\Temp.mdb"
    
    Set oConn1 = CreateObject("ADODB.Connection")
    Set oConn2 = CreateObject("ADODB.Connection")
    Set oRecSet1 = CreateObject("ADODB.Recordset")
    Set oRecSet2 = CreateObject("ADODB.Recordset")
    
    sConnStr1 = STR_CONN + ";DBQ=" + theTargetDBPath
    sConnStr2 = STR_CONN + ";DBQ=" + sTgtPath + "\Temp.mdb"
    
    oConn1.Open sConnStr1
    If oConn1.State > 0 Then
        sSQL(0) = "SELECT * FROM tbClients"
        sSQL(1) = "SELECT * FROM tbData"
        sSQL(2) = "SELECT * FROM tbDependents"
        For iCnt = LBound(sSQL) To UBound(sSQL)
            Set oRecSet1 = oConn1.Execute(sSQL(iCnt))
            If Not oRecSet1.EOF Then
                oConn2.Open sConnStr2
                If oConn2.State > 0 Then
                    oRecSet2.Open sSQL(iCnt), oConn2, 1, 3
                    If oRecSet2.State > 0 Then
                        
                        If bshowProgress Then
                            If Val(Application.ScreenUpdating) <> Val(True) Then
                                Application.ScreenUpdating = True
                            End If
                            vTmp = ExecuteSQL(Replace(sSQL(iCnt), "*", "COUNT(*)"))
                            If IsArray(vTmp) Then
                                iTotalCnt = vTmp(0, 0) * oRecSet1.Fields.Count
                            End If
                            Load frmProgress
                            frmProgress.Caption = Lang(194)
                            frmProgress.Display
                        End If
                    
                        Do Until oRecSet1.EOF
                            oRecSet2.AddNew
                            For Each oFld In oRecSet1.Fields
                            
                                If bshowProgress Then
                                    iCurrCnt = iCurrCnt + 1
                                    frmProgress.SetProgress iCurrCnt / iTotalCnt * 100, ""
                                End If
                                
                                If oFld.name <> "ID" Then
                                    oRecSet2.Fields(oFld.name).Value = oFld.Value
                                End If
                            Next oFld
                            oRecSet2.Update
                            oRecSet1.MoveNext
                        Loop
                        
                        If bshowProgress Then
                            Unload frmProgress
                        End If
                        
                        oRecSet2.Close
                    End If
                    oConn2.Close
                End If
            End If
            Set oRecSet1 = Nothing
        Next iCnt
        Set oRecSet2 = Nothing
        Set oConn2 = Nothing
        oConn1.Close
        vTmp = ExecuteSQL("SELECT OwnerID,Shared FROM tbSystem WHERE ID = 1")
        sSQL(0) = ""
        If IsArray(vTmp) Then
            bShared = CBool(vTmp(1, 0))
            If IsNull(vTmp(0, 0)) Then
                sOwnerID = "NULL"
            Else
                sOwnerID = "'" + CStr(vTmp(0, 0)) + "'"
            End If
            sSQL(0) = "UPDATE tbSystem SET OwnerID = " + sOwnerID + ", Shared = " + IIf(bShared, "1", "0") + " WHERE ID = 1"
        End If
        oFileSys.DeleteFile theTargetDBPath
        oFileSys.CopyFile sTgtPath + "\Temp.mdb", sTgtPath + "\ClientMgr.mdb", True
        oFileSys.DeleteFile sTgtPath + "\Temp.mdb"
        If sSQL(0) <> "" Then
            iRecAffect = ExecuteSQL(sSQL(0))
        End If
        UpdateDatabaseStructure = (iRecAffect > 0)
    End If
    Set oConn1 = Nothing
    If Val(Application.ScreenUpdating) <> Val(bScr) Then
        Application.ScreenUpdating = bScr
    End If
    
Exit Function
Err_Trap:
    WriteDebug CStr(Now) + " " + Err.Description + ";iCnt=" + CStr(iCnt) + ";TargetPath=" + sTgtPath + ";SourcePath=" + sSrcPath + ";SrcFile=" + theSourceDBPath + ";TargetFile=" + theTargetDBPath
    If Not oRecSet2 Is Nothing Then
        If oRecSet2.State > 0 Then
            oRecSet2.Close
        End If
        Set oRecSet2 = Nothing
    End If
    If Not oConn2 Is Nothing Then
        If oConn2.State > 0 Then
            oConn2.Close
        End If
        Set oConn2 = Nothing
    End If
    If Not oRecSet1 Is Nothing Then
        If oRecSet1.State > 0 Then
            oRecSet1.Close
        End If
        Set oRecSet1 = Nothing
    End If
    If Not oConn1 Is Nothing Then
        If oConn1.State > 0 Then
            oConn1.Close
        End If
        Set oConn1 = Nothing
    End If
    If oFileSys.FileExists(sTgtPath + "\Temp.mdb") Then
        oFileSys.DeleteFile sTgtPath + "\Temp.mdb", True
    End If
    If Val(Application.ScreenUpdating) <> Val(bScr) Then
        Application.ScreenUpdating = bScr
    End If
    UpdateDatabaseStructure = False
End Function

Public Function GetDatabaseVersion(ByVal theDBPath As String) As String
On Error GoTo Err_Trap
    Dim oConn As Object
    Dim oRecSet As Object
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sConnStr As String
    Dim sSQL As String
    Dim vTmp As Variant
    
    GetDatabaseVersion = "1.0"
    If UCase(oFileSys.GetExtensionName(theDBPath)) = "MDB" Then
        If oFileSys.FileExists(theDBPath) Then
            sConnStr = STR_CONN + ";DBQ=" + theDBPath
            Set oConn = CreateObject("ADODB.Connection")
            oConn.Open sConnStr
            If oConn.State > 0 Then
                sSQL = "SELECT Version FROM tbSystem WHERE ID = 1"
                Set oRecSet = oConn.Execute(sSQL)
                If oRecSet.State > 0 Then
                    If Not oRecSet.EOF Then
                        GetDatabaseVersion = oRecSet.Fields("Version").Value
                    End If
                    oRecSet.Close
                End If
                Set oRecSet = Nothing
                oConn.Close
            End If
            Set oConn = Nothing
        End If
    End If
Exit Function
Err_Trap:
    If oConn.State > 0 Then
        oConn.Close
    End If
    Set oConn = Nothing
    GetDatabaseVersion = "1.0"
End Function

Public Function IsSystemDBExists() As Boolean
On Error GoTo Err_Trap
    Dim oFileSys As New Scripting.FileSystemObject
    IsSystemDBExists = oFileSys.FileExists(ThisWorkbook.path + "\system\ClientMgr.mdb")
Exit Function
Err_Trap:
End Function

Public Sub ShowDataSourceCreator()
    Dim sFieldList As String
    Dim sWhere As String
    Dim sPlannerName As String
    Dim sSQL As String
    Dim aTmp As Variant
    Dim oFileSys As New Scripting.FileSystemObject
    Dim bSuccess As Boolean
    Dim sOutFile As String
    Dim oTmpDic As Dictionary
    
    Load frmQuery
    frmQuery.Caption = Lang(195)
    frmQuery.MultiPage1.Pages(0).Visible = True
    frmQuery.MultiPage1.Pages(2).Visible = True
    frmQuery.cmdBackP1.Visible = True
    frmQuery.cmdNextP1.Visible = True
    frmQuery.m_Mode = 1
    frmQuery.PopulateList
    frmQuery.MultiPage1.Value = 0
    frmQuery.cboDSType.AddItem "Excel Workbook (*.xls)"
    frmQuery.cboDSType.AddItem Lang(140) + " (*.csv)"
    frmQuery.cboDSType.AddItem Lang(141) + " (*.txt)"
    frmQuery.cboDSType.ListIndex = 0
    frmQuery.cmdHelp.Visible = True
    Select Case frmQuery.cboDSType.ListIndex
        Case 1
            sOutFile = ThisWorkbook.path + "\client\Mail Merge " + CStr(Format(Now, "MMDDYY")) + ".csv"
        Case 2
            sOutFile = ThisWorkbook.path + "\client\Mail Merge " + CStr(Format(Now, "MMDDYY")) + ".txt"
        Case Else
            sOutFile = ThisWorkbook.path + "\client\Mail Merge " + CStr(Format(Now, "MMDDYY")) + ".xls"
    End Select
    frmQuery.txtFilename.Text = GetSetting(PROG_NAME, GetSettingsKey, "DataSourceFile", sOutFile)
    frmQuery.cboDSType.ListIndex = Val(GetSetting(PROG_NAME, GetSettingsKey, "DataSourceType", 0))
    frmQuery.Show
    If frmQuery.m_ButtonClicked = frmQuery.cmdOK.Caption Then
        SaveSetting PROG_NAME, GetSettingsKey, "DataSourceFile", frmQuery.txtFilename.Text
        SaveSetting PROG_NAME, GetSettingsKey, "DataSourceType", frmQuery.cboDSType.ListIndex
        sFieldList = frmQuery.FieldList
        sWhere = frmQuery.m_Criteria
        sPlannerName = GetPlannerName
        If IsDBShared Then
            If sWhere = "" Then
                sWhere = " WHERE tbClients.Creator = '" + Replace(sPlannerName, "'", "''") + "' AND tbData.ClientFileID = tbClients.ClientFileID "
            Else
                sWhere = sWhere + " AND tbClients.Creator = '" + Replace(sPlannerName, "'", "''") + "' AND tbData.ClientFileID = tbClients.ClientFileID "
            End If
        End If
        Set oTmpDic = GetListRefCol(sFieldList)
        sSQL = "SELECT DISTINCTROW " + sFieldList + " FROM tbClients, tbData, tbDependents " + sWhere
        aTmp = ExecuteSQL(sSQL)
        If IsArray(aTmp) Then
            Select Case frmQuery.cboDSType.ListIndex
                Case 0
                    bSuccess = WriteArrayToExcel(aTmp, Split(frmQuery.FieldList(True), ","), frmQuery.txtFilename.Text, oTmpDic)
                Case 1
                    bSuccess = WriteArrayToFile(aTmp, Split(frmQuery.FieldList(True), ","), oFileSys.GetParentFolderName(frmQuery.txtFilename.Text) + "\" + oFileSys.GetBaseName(frmQuery.txtFilename.Text) + ".csv", ",", oTmpDic)
                Case 2
                    bSuccess = WriteArrayToFile(aTmp, Split(frmQuery.FieldList(True), ","), oFileSys.GetParentFolderName(frmQuery.txtFilename.Text) + "\" + oFileSys.GetBaseName(frmQuery.txtFilename.Text) + ".txt", vbTab, oTmpDic)
            End Select
            If bSuccess Then
                MsgBox Lang(196), vbInformation, PROG_NAME
            Else
                MsgBox Lang(197), vbExclamation, PROG_NAME
            End If
        Else
            MsgBox Lang(198), vbExclamation, PROG_NAME
        End If
    End If
    frmQuery.m_ForceClose = True
    Unload frmQuery
End Sub

Public Function WriteArrayToFile(ByRef theArray As Variant, ByRef theFieldArray As Variant, ByVal theFileName As String, ByVal theDelimiter As String, Optional ByVal theRefDic As Scripting.Dictionary) As Boolean
On Error GoTo Err_Trap
    Dim oFileSys As New Scripting.FileSystemObject
    Dim iFldCnt As Integer
    Dim iCnt As Long
    Dim sLine As String
    Dim sText As String
    Dim bEnQuote As Boolean
    Dim iProgTotal As Long
    Dim iProgCnt As Long
    
    If theDelimiter = "," Then
        bEnQuote = True
    End If
    
    ' Write Field Name header
    If IsArray(theFieldArray) Then
        For iFldCnt = LBound(theFieldArray) To UBound(theFieldArray)
            If sLine = "" Then
                sLine = IIf(bEnQuote, AddDoubleQuotes(theFieldArray(iFldCnt)), theFieldArray(iFldCnt))
            Else
                sLine = sLine + theDelimiter + IIf(bEnQuote, AddDoubleQuotes(theFieldArray(iFldCnt)), theFieldArray(iFldCnt))
            End If
        Next iFldCnt
    End If
    
    sText = sText + sLine + vbCrLf
    sLine = ""
    
    ' Load the Progress Bar
    Load frmProgress
    frmProgress.Caption = Lang(162)
    frmProgress.SetProgress 0, ""
    frmProgress.Display

    ' Write the Data Values
    If IsArray(theArray) Then
        iProgTotal = (UBound(theArray, 2) + 1) * (UBound(theArray, 1) + 1)
        For iCnt = LBound(theArray, 2) To UBound(theArray, 2)
            For iFldCnt = LBound(theArray, 1) To UBound(theArray, 1)
                iProgCnt = iProgCnt + 1
                frmProgress.SetProgress iProgCnt / iProgTotal * 100, Replace(Replace(Lang(163), "%NUM%", CStr(iCnt + 1)), "%TOTAL%", CStr(UBound(theArray, 2) + 1))
                Select Case True
                    Case theRefDic(CStr(iFldCnt)) = 1
                        theArray(iFldCnt, iCnt) = ResolveRiskTolerance(Val(theArray(iFldCnt, iCnt)))
                    Case theRefDic(CStr(iFldCnt)) = 2
                        theArray(iFldCnt, iCnt) = ResolveKnowledge(Val(theArray(iFldCnt, iCnt)))
                    Case theRefDic(CStr(iFldCnt)) = 3
                        theArray(iFldCnt, iCnt) = ResolveYesNo(theArray(iFldCnt, iCnt))
                    Case theRefDic(CStr(iFldCnt)) = 4
                        theArray(iFldCnt, iCnt) = Round(Val(theArray(iFldCnt, iCnt)), 2)
                End Select
                If sLine = "" Then
                    sLine = IIf(bEnQuote, AddDoubleQuotes(RemoveTrailingCRs(CStr(RemoveNull(theArray(iFldCnt, iCnt))))), RemoveTrailingCRs(CStr(RemoveNull(theArray(iFldCnt, iCnt)))))
                Else
                    sLine = sLine + theDelimiter + IIf(bEnQuote, AddDoubleQuotes(RemoveTrailingCRs(CStr(RemoveNull(theArray(iFldCnt, iCnt))))), RemoveTrailingCRs(CStr(RemoveNull(theArray(iFldCnt, iCnt)))))
                End If
            Next iFldCnt
            sText = sText + sLine + vbCrLf
            sLine = ""
        Next iCnt
    End If
    
    frmProgress.Caption = Lang(160)
    frmProgress.SetProgress 100, Lang(161)
    
    oFileSys.OpenTextFile(theFileName, ForWriting, True).Write sText
    Set oFileSys = Nothing
    
    Unload frmProgress
    
    WriteArrayToFile = True
    
Exit Function
Err_Trap:
    Set oFileSys = Nothing
End Function

Public Function WriteArrayToExcel(ByRef theArray As Variant, ByRef theFieldArray As Variant, ByVal theFileName As String, Optional ByVal theRefDic As Scripting.Dictionary) As Boolean
On Error GoTo Err_Trap
    Dim oTmpWkBk As Workbook
    Dim iNumSheets As Integer
    Dim oFileSys As New Scripting.FileSystemObject
    Dim bEvt As Boolean
    Dim bScr As Boolean
    Dim oActivWin As Window
    Dim iCnt As Long
    Dim iFldCnt As Integer
    Dim iProgTotal As Long
    Dim iProgCnt As Long
    
    Set oActivWin = ActiveWindow
    bScr = Application.ScreenUpdating
    bEvt = Application.EnableEvents
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    iNumSheets = Application.SheetsInNewWorkbook
    Application.SheetsInNewWorkbook = 1
    Set oTmpWkBk = Workbooks.Add
    Application.SheetsInNewWorkbook = iNumSheets
    oTmpWkBk.Sheets(1).name = "Data Source"
    
    ' Write Field Name header
    If IsArray(theFieldArray) Then
        For iFldCnt = LBound(theFieldArray) To UBound(theFieldArray)
            oTmpWkBk.Sheets(1).Cells(1, iFldCnt + 1).Value = theFieldArray(iFldCnt)
        Next iFldCnt
    End If
    
    ' Load the Progress Bar
    Load frmProgress
    frmProgress.Caption = Lang(162)
    frmProgress.SetProgress 0, ""
    frmProgress.Display
    
    ' Write the Data Values
    If IsArray(theArray) Then
        
        iProgTotal = (UBound(theArray, 2) + 1) * (UBound(theArray, 1) + 1)
        
        For iCnt = LBound(theArray, 2) To UBound(theArray, 2)
            For iFldCnt = LBound(theArray, 1) To UBound(theArray, 1)
                
                iProgCnt = iProgCnt + 1
                frmProgress.SetProgress iProgCnt / iProgTotal * 100, Replace(Replace(Lang(163), "%NUM%", CStr(iCnt + 1)), "%TOTAL%", CStr(UBound(theArray, 2) + 1))
                
                Select Case True
                    Case theRefDic(CStr(iFldCnt)) = 1
                        oTmpWkBk.Sheets(1).Cells(iCnt + 2, iFldCnt + 1).Value = ResolveRiskTolerance(theArray(iFldCnt, iCnt))
                    Case theRefDic(CStr(iFldCnt)) = 2
                        oTmpWkBk.Sheets(1).Cells(iCnt + 2, iFldCnt + 1).Value = ResolveKnowledge(theArray(iFldCnt, iCnt))
                    Case theRefDic(CStr(iFldCnt)) = 3
                        oTmpWkBk.Sheets(1).Cells(iCnt + 2, iFldCnt + 1).Value = Replace(RemoveTrailingCRs(RemoveNull(ResolveYesNo(theArray(iFldCnt, iCnt)))), vbCr, "")
                    Case theRefDic(CStr(iFldCnt)) = 4
                        oTmpWkBk.Sheets(1).Cells(iCnt + 2, iFldCnt + 1).Value = Replace(RemoveTrailingCRs(RemoveNull(Round(Val(theArray(iFldCnt, iCnt)), 2))), vbCr, "")
                    Case Else
                        oTmpWkBk.Sheets(1).Cells(iCnt + 2, iFldCnt + 1).Value = Replace(RemoveTrailingCRs(RemoveNull(theArray(iFldCnt, iCnt))), vbCr, "")
                End Select
            Next iFldCnt
        Next iCnt
    End If
    
    frmProgress.SetProgress 100, " " + Lang(161) + "."
    
    Application.DisplayAlerts = False
    UniversalSaveAs oTmpWkBk, Replace(theFileName, ":\\", ":\")
    Application.DisplayAlerts = True
    oTmpWkBk.Close False
    
    ' Unload Progress
    Unload frmProgress
    
    If Not ActiveWindow Is oActivWin Then
        If Not oActivWin Is Nothing Then
            oActivWin.Activate
        Else
            If WorkBookExists("FPS.xls") Then
                Run "FPS.xls!ActivateMainpage"
            End If
        End If
    End If
    Application.EnableEvents = bEvt
    If Val(Application.ScreenUpdating) <> Val(bScr) Then
        Application.ScreenUpdating = bScr
    End If
    WriteArrayToExcel = True
Exit Function
Err_Trap:
    If Not oTmpWkBk Is Nothing Then
        oTmpWkBk.Close False
    End If
    If Not ActiveWindow Is oActivWin Then
        If Not oActivWin Is Nothing Then
            oActivWin.Activate
        Else
            If WorkBookExists("Fps.xls") Then
                Run "FPS.xls!ActivateMainpage"
            End If
        End If
    End If
    Application.EnableEvents = bEvt
    If Val(Application.ScreenUpdating) <> Val(bScr) Then
        Application.ScreenUpdating = bScr
    End If
    Set oTmpWkBk = Nothing
End Function

Public Function RemoveTrailingCRs(ByVal theString As String) As String
    If Right(theString, 2) = vbCrLf Then
        RemoveTrailingCRs = Left(theString, Len(theString) - 2)
    Else
        RemoveTrailingCRs = theString
    End If
End Function

Public Function AddDoubleQuotes(ByVal theString As String) As String
    AddDoubleQuotes = """" + theString + """"
End Function

Public Function GetListRefCol(ByVal theFieldsList As String) As Scripting.Dictionary
    Dim oTmpDic As New Scripting.Dictionary
    Dim aTmpArray As Variant
    Dim iCnt As Integer
    Dim iProgTotal As Long
    Dim iProgCnt As Long
    
    Load frmProgress
    frmProgress.Caption = Lang(164)
    frmProgress.SetProgress 0
    frmProgress.Display
    
    aTmpArray = Split(theFieldsList, ",")
    oTmpDic.CompareMode = TextCompare
    
    iProgTotal = UBound(aTmpArray) + 1
    For iCnt = LBound(aTmpArray) To UBound(aTmpArray)
        iProgCnt = iProgCnt + 1
        frmProgress.SetProgress iProgCnt / iProgTotal * 100, Replace(Replace(Lang(165), "%NUM%", CStr(iProgCnt)), "%TOTAL%", CStr(iProgTotal))
        Select Case True
            Case (InStr(1, aTmpArray(iCnt), "ClientRPNonReg", vbTextCompare) > 0) Or (InStr(1, aTmpArray(iCnt), "SpouseRPNonReg", vbTextCompare) > 0) Or (InStr(1, aTmpArray(iCnt), "ClientRPReg", vbTextCompare) > 0) Or (InStr(1, aTmpArray(iCnt), "SpouseRPReg", vbTextCompare) > 0)
                oTmpDic(CStr(iCnt)) = 1
            Case (InStr(1, aTmpArray(iCnt), "ClientRPKnw", vbTextCompare) > 0) Or (InStr(1, aTmpArray(iCnt), "SpouseRPKnw", vbTextCompare) > 0)
                oTmpDic(CStr(iCnt)) = 2
            Case IsYesNoField(aTmpArray(iCnt))
                oTmpDic(CStr(iCnt)) = 3
            Case IsCurrencyField(aTmpArray(iCnt))
                oTmpDic(CStr(iCnt)) = 4
        End Select
    Next iCnt
    Unload frmProgress
    Set GetListRefCol = oTmpDic
End Function

Private Function ResolveRiskTolerance(ByVal theIndex As Integer) As String
    Select Case theIndex
        Case 1
            ResolveRiskTolerance = Lang(166)
        Case 2
            ResolveRiskTolerance = Lang(167)
        Case 3
            ResolveRiskTolerance = Lang(168)
        Case 4
            ResolveRiskTolerance = Lang(169)
        Case 5
            ResolveRiskTolerance = Lang(170)
    End Select
End Function

Private Function ResolveKnowledge(ByVal theIndex As Integer) As String
    Select Case theIndex
        Case 1
            ResolveKnowledge = Lang(171)
        Case 2
            ResolveKnowledge = Lang(172)
        Case 3
            ResolveKnowledge = Lang(173)
        Case 4
            ResolveKnowledge = Lang(174)
        Case 5
            ResolveKnowledge = Lang(175)
    End Select
End Function

Private Function ResolveYesNo(ByVal theValue As Variant) As Variant
    If Not IsNull(theValue) Then
        If theValue = True Then
            theValue = "Yes"
        ElseIf theValue = False Then
            theValue = "No"
        End If
    End If
    ResolveYesNo = theValue
End Function

Private Function IsYesNoField(ByVal theFieldName As String) As Boolean
    theFieldName = Replace(theFieldName, "tbData.", "")
    IsYesNoField = (Left(theFieldName, 2) = "AC")
End Function

Private Function IsCurrencyField(ByVal theFieldName As String) As Boolean
    Dim iFID As Integer
    Dim sSQL As String
    Dim aTmp As Variant
    
    theFieldName = Replace(theFieldName, "tbData.", "")
    sSQL = "SELECT Type FROM tbFields WHERE FieldName = '" + theFieldName + "'"
    aTmp = ExecuteSQL(sSQL)
    If IsArray(aTmp) Then
        iFID = Val(aTmp(0, 0))
    End If
    IsCurrencyField = (iFID = 1)
End Function

Public Function FixPlannerNamesInDB()
    Dim aTmp As Variant
    Dim sSQL As String
    Dim iNumRec As Long
    Dim iCnt As Long
    Dim sCreator As String
    Dim sModifiedBy As String
    Dim sLock As String
    Dim iResult As Integer
    
    sSQL = "SELECT ID,Creator,ModifiedBy,Lock FROM tbClients WHERE Creator LIKE '%,%' OR ModifiedBy LIKE '%,%' OR Lock LIKE '%,%'"
    aTmp = ExecuteSQL(sSQL)
    If IsArray(aTmp) Then
        iNumRec = UBound(aTmp, 2) + 1
    End If
    If iNumRec > 0 Then
        For iCnt = LBound(aTmp, 2) To UBound(aTmp, 2)
            sCreator = GetJustName(RemoveNull(aTmp(1, iCnt)))
            sCreator = IIf(sCreator = "", "NULL", "'" + Replace(sCreator, "'", "''") + "'")
            sModifiedBy = GetJustName(RemoveNull(aTmp(2, iCnt)))
            sModifiedBy = IIf(sModifiedBy = "", "NULL", "'" + Replace(sModifiedBy, "'", "''") + "'")
            sLock = GetJustName(RemoveNull(aTmp(3, iCnt)))
            sLock = IIf(sLock = "", "NULL", "'" + Replace(sLock, "'", "''") + "'")
            sSQL = "UPDATE tbClients SET Creator = " + sCreator + ", ModifiedBy = " + sModifiedBy + ", Lock = " + sLock + " WHERE ID = " + CStr(aTmp(0, iCnt))
            iResult = ExecuteSQL(sSQL)
        Next iCnt
    End If
End Function

Public Function CopyDataToClientFile(Optional ByVal bshowProgress As Boolean = True) As Boolean
    ' Copy data from Modules to Client File, create a client file workbook if it does not exist
    
    Dim oClientFile As Workbook
    Dim oSourceSht As Worksheet
    Dim oTargetSht As Worksheet
    Dim iOffSet As Integer
    Dim oTmpWkBk As Workbook
    Dim oTmpSht As Worksheet
    Dim iScenCnt As Integer
    Dim iNumScen As Integer
    Dim iSht As Integer
    Dim iRng As Integer
    Dim bProtStruct As Boolean
    Dim bProtWin As Boolean
    
    ' Get reference to current client file workbook
    Set oClientFile = Run("FPS.xls!GetClientFile", False)
    ' Check if there is a client file workbook
    If Not oClientFile Is Nothing Then
        ' Get Number of Scenarios
        iNumScen = Run("FPS.xls!iNumScenarios", oClientFile)
        ' Get the scenario offset
        iOffSet = GetScenarioOffset(oClientFile)
        ' Iterate through the Workbooks
        For Each oTmpWkBk In Workbooks
            ' Check if the workbook is a Standard or Business FP Module
            If Run("FPS.xls!IsStandardModule", oTmpWkBk.name) Or Run("FPS.xls!IsBusinessModule", oTmpWkBk.name) Then
                ' Check if the workbookname does not exist in Client File
                If Not WorkSheetExists(oClientFile, oTmpWkBk.name) Then
                    ' Add the sheet to the Client File WorkBook
                    Set oTmpSht = oClientFile.Sheets.Add(After:=oClientFile.Sheets.Count)
                    ' Rename the sheet
                    oTmpSht.name = oTmpWkBk.name
                End If
                ' Make reference to Target sheet
                Set oTargetSht = Run("FPS.xls!GetWorkSheet", oClientFile.name, oTmpWkBk.name)
                ' Get the Data Sheet from currently opened WorkBook
                Set oSourceSht = Run("FPS.xls!GetWorkSheet", oTmpWkBk.name, "data")
                ' Check if SourceSheet exisits
                If Not oSourceSht Is Nothing Then
                    ' Copy Data From Source Sheet
                    oSourceSht.Range(DATA_RANGE).Copy
                    ' Paste Data onto Target Sheet, With OFFSET, skipping the blanks since it may contain data from default
                    oTargetSht.Range(Left(DATA_RANGE, 2)).Offset(iOffSet, 0).PasteSpecial Paste:=xlPasteValues, SkipBlanks:=False
                    ' Check if Values Sheet Exist on the Opened WorkBooks
                    If WorkSheetExists(oTmpWkBk, "Variables") Then
                        ' Set Source Sheet to the Variables Sheet of Opened WorkBook
                        Set oSourceSht = Run("FPS.xls!GetWorksheet", oTmpWkBk.name, "Variables")
                        ' Copy Data From Variables Sheet of Opened Workbook
                        oSourceSht.Range(ADV_RANGE).Copy
                        ' Paste Data on Target Sheet, with OFFSET
                        oTargetSht.Range(Left(ADV_RANGE, 3)).Offset(iOffSet, 0).PasteSpecial Paste:=xlPasteValues
                    End If
                    ' Perform special data treatment for Perinfo, relates to Goals -> Action sheets
                    If oTmpWkBk.name = "Perinfo.xls" Then
                        ' Iterate through all scenarios
                        For iScenCnt = 0 To iNumScen
                            ' take the 4 special sheets from Perinfo.xls (Sheets 8 - 11, Goals - Action Plan)
                            ' and grab C10 to C32 copy to columns H,I,J,K skip by 2. This should match OpenTransportWorkbookData routine
                            For iSht = 8 To 11
                                With oTmpWkBk.Sheets(iSht)
                                    For iRng = 10 To 32 Step 2
                                        Run "FPS.xls!CopyLargeValue", .Cells(iRng, 3), oTargetSht.Cells(iRng, iSht).Offset(iScenCnt * 1000, 0)
                                    Next iRng
                                End With
                            Next iSht
                        Next iScenCnt
                    End If
                End If
            End If
        Next oTmpWkBk
        ' Iterate through client file sheets
        For Each oTmpSht In oClientFile.Sheets
            ' Check if name is not "system"
            If oTmpSht.name <> "system" Then
                ' Check if sheet in client file does not exist in open modules
                If Not WorkBookExists(oTmpSht.name) Then
                    ' Get Protection Settings
                    bProtStruct = oClientFile.ProtectStructure
                    bProtWin = oClientFile.ProtectWindows
                    ' Check if any protection was made
                    If bProtStruct Or bProtWin Then
                        ' Unprotect client file
                        oClientFile.Unprotect "IWantToEditThisClientFile"
                    End If
                    ' Remove the sheet
                    Application.DisplayAlerts = False
                    oTmpSht.Delete
                    Application.DisplayAlerts = True
                    ' Reprotect client file if previously protected
                    If bProtStruct Or bProtWin Then
                        ' Protect client file
                        oClientFile.Protect "IWantToEditThisClientFile", bProtStruct, bProtWin
                    End If
                End If
            End If
        Next oTmpSht
        CopyDataToClientFile = True
    Else
        CopyDataToClientFile = False
    End If
End Function

Public Sub ShowAdmin()
    On Error Resume Next
    Dim sUID As String
    Dim sPWD As String
    
    sUID = GetSettingsTable("AdminUID")
    sPWD = GetSettingsTable("AdminPWD")
    
    If sUID = "" And sPWD = "" Then
        frmAdmin.Show 'vbNormal
    Else
        MsgBox Lang(199), vbExclamation, PROG_NAME
    End If
End Sub

Public Function GetPlannerListDB() As Variant
    Dim sSQL As String
    Dim vArray As Variant
    
    sSQL = "SELECT DISTINCT Creator FROM tbClients WHERE Creator <> NULL"
    GetPlannerListDB = ExecuteSQL(sSQL)
End Function

Public Function GetCFPassword(ByVal theClientFileID As String, Optional ByVal theDBFilePath As String = "") As String
On Error Resume Next
    Dim oWkBk As Workbook
    Dim sDataPath As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim lErr As Long
    Dim oSht As Worksheet
    Dim bEvt As Boolean
    Dim bScr As Boolean
    Dim oActivWin As Window
    
    bEvt = Application.EnableEvents
    bScr = Application.ScreenUpdating
    Set oActivWin = ActiveWindow
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    Set oWkBk = Workbooks(theClientFileID + STR_DATAFILE_EXT)
    lErr = Err.Number
    If lErr <> 0 Then
        ' Open the WorkBook
        If theDBFilePath = "" Then
            sDataPath = GetDataFolder
        Else
            sDataPath = oFileSys.GetParentFolderName(theDBFilePath)
        End If
        If oFileSys.FileExists(sDataPath + "\" + theClientFileID + STR_DATAFILE_EXT) Then
            Set oWkBk = Workbooks.Open(sDataPath + "\" + theClientFileID + STR_DATAFILE_EXT, False, True)
        Else
            If Not ActiveWindow Is oActivWin Then
                If Not oActivWin Is Nothing Then
                    oActivWin.Activate
                End If
            End If
            Application.EnableEvents = bEvt
            If Val(Application.ScreenUpdating) <> Val(bScr) Then
                Application.ScreenUpdating = bScr
            End If
            MsgBox Lang(200), vbExclamation, PROG_NAME
            Exit Function
        End If
    End If
    If Not oWkBk Is Nothing Then
        Err.Clear
        lErr = 0
        Set oSht = oWkBk.Sheets(".Wj3.G")
        lErr = Err.Number
        If lErr = 0 Then
            GetCFPassword = Run("FPS.xls!NRADec0513", Trim(oWkBk.Sheets(".Wj3.G").Range("N145").Value))
        End If
        oWkBk.Close False
        Set oWkBk = Nothing
    End If
    
    If Not ActiveWindow Is oActivWin Then
        If Not oActivWin Is Nothing Then
            oActivWin.Activate
        End If
    End If
    If Val(Application.ScreenUpdating) <> Val(bScr) Then
        Application.ScreenUpdating = bScr
    End If
    Application.EnableEvents = bEvt
    
    Err.Clear
End Function

Public Function AskForPassword() As Variant
    Load frmPromptPWD
    frmPromptPWD.Show
    
    If frmPromptPWD.m_ButtonClicked = frmPromptPWD.cmdOK.Caption Then
        If frmPromptPWD.optUsePWD.Value Then
            AskForPassword = frmPromptPWD.txtPWD.Text
        Else
            AskForPassword = ""
        End If
    Else
        AskForPassword = False
    End If
    frmPromptPWD.m_ForceClose = True
    Unload frmPromptPWD
End Function

Public Sub UpdateDateModified(ByVal theClientFileID As String)
    Dim sSQL As String
    Dim iRecAffect As Integer
    
    sSQL = "UPDATE tbClients SET DateModified = '" + CStr(Now) + "' WHERE ClientFileID = '" + theClientFileID + "'"
    ExecuteSQL sSQL
End Sub

Public Function GetJustName(ByVal sText As String) As String
    ' detect a comma in the name field as the separator between name and designations
    ' assume there will always be only 1 comma present
    Dim iPos As Integer
    
    iPos = InStr(1, sText, ",")
    If iPos = 0 Then
        GetJustName = sText
    Else
        GetJustName = Left(sText, iPos - 1)
    End If
End Function

Public Function WorkBookExists(ByVal theWorkBookName As String) As Boolean
On Error GoTo Err_Trap
    Dim oTmpWorkBook As Workbook
    Set oTmpWorkBook = Application.Workbooks(theWorkBookName)
    WorkBookExists = Not oTmpWorkBook Is Nothing
Exit Function
Err_Trap:
End Function

Public Function WorkSheetExists(ByVal theWorkBook As Workbook, ByVal theSheetName As String) As Boolean
On Error GoTo Err_Trap
    Dim oSheet As Worksheet
    Set oSheet = theWorkBook.Sheets(theSheetName)
    If Not oSheet Is Nothing Then
        WorkSheetExists = True
    End If
Exit Function
Err_Trap:
    WorkSheetExists = False
End Function

Public Function TableExists(ByVal theTableName As String, Optional ByVal theMDBFileName As String) As Boolean
    Dim sSQL As String
    Dim oConn As Object
    Dim oRecSet As Object
    Dim sConnStr As String
    Dim sMDBPath As String
On Error GoTo Err_Jump
    If theMDBFileName = "" Then
        sMDBPath = GetDataFolder + "\ClientMgr.mdb"
    Else
        sMDBPath = theMDBFileName
    End If
    
    sConnStr = STR_CONN + ";DBQ=" + sMDBPath
    Set oConn = CreateObject("ADODB.Connection")
    oConn.Open sConnStr
    If oConn.State > 0 Then
        sSQL = "SELECT * FROM " + theTableName
        Set oRecSet = oConn.Execute(sSQL)
        TableExists = True
Err_Jump:
        If oConn.State > 0 Then
            oConn.Close
        End If
    End If
    Set oConn = Nothing
End Function

Public Function CreateSettingsTable(ByVal theTableName As String, Optional ByVal theMDBFileName As String) As Boolean
    Dim sSQL As String
    Dim oConn As Object
    Dim sConnStr As String
    Dim sMDBPath As String
    Dim vTmp As Variant
On Error GoTo Err_Jump
    If theMDBFileName = "" Then
        sMDBPath = GetDataFolder + "\ClientMgr.mdb"
    Else
        sMDBPath = theMDBFileName
    End If
    
    sConnStr = STR_CONN + ";DBQ=" + sMDBPath
    Set oConn = CreateObject("ADODB.Connection")
    oConn.Open sConnStr
    If oConn.State > 0 Then
        sSQL = "CREATE TABLE " + theTableName + " (SettingName TEXT, SettingValue TEXT)"
        oConn.Execute sSQL, vTmp
        CreateSettingsTable = True
Err_Jump:
        If oConn.State > 0 Then
            oConn.Close
        End If
    End If
    Set oConn = Nothing
End Function

Public Function SaveSettingsTable(ByVal theName As String, ByVal theValue As String, Optional ByVal theMDBPath As String) As Boolean
    Const TBL_NAME As String = "tbSettings"
    
    Dim bContinue As Boolean
    Dim sSQL As String
    Dim vTmp As Variant
    Dim iRecAffect As Integer
    
    If Not TableExists(TBL_NAME, theMDBPath) Then
        CreateSettingsTable TBL_NAME
        bContinue = TableExists(TBL_NAME, theMDBPath)
    Else
        bContinue = True
    End If
    
    If bContinue Then
        sSQL = "SELECT SettingValue FROM " + TBL_NAME + " WHERE SettingName = '" + Replace(theName, "'", "''") + "'"
        vTmp = ExecuteSQL(sSQL, theMDBPath)
        If IsArray(vTmp) Then
            sSQL = "UPDATE " + TBL_NAME + " SET SettingValue = '" + Replace(theValue, "'", "''") + "' WHERE SettingName = '" + Replace(theName, "'", "''") + "'"
        Else
            sSQL = "INSERT INTO " + TBL_NAME + " (SettingName,SettingValue) VALUES ('" + Replace(theName, "'", "''") + "','" + Replace(theValue, "'", "''") + "')"
        End If
        iRecAffect = ExecuteSQL(sSQL, theMDBPath)
        SaveSettingsTable = (iRecAffect > 0)
    End If
End Function

Public Function GetSettingsTable(ByVal theName As String, Optional ByVal theDefaultValue As String, Optional ByVal theMDBPath As String) As String
    Const TBL_NAME As String = "tbSettings"
    
    Dim sSQL As String
    Dim vTmp As Variant
    
    If TableExists(TBL_NAME, theMDBPath) Then
        sSQL = "SELECT SettingValue FROM " + TBL_NAME + " WHERE SettingName = '" + Replace(theName, "'", "''") + "'"
        vTmp = ExecuteSQL(sSQL, theMDBPath)
        If IsArray(vTmp) Then
            GetSettingsTable = RemoveNull(vTmp(0, 0))
        Else
            GetSettingsTable = theDefaultValue
        End If
    Else
        GetSettingsTable = theDefaultValue
    End If
End Function

Public Function CheckPathFields(Optional ByVal theMDBFileName As String) As Boolean
    Dim sSQL As String
    Dim oConn As Object
    Dim sConnStr As String
    Dim sMDBPath As String
    Dim bTmp As Boolean
    Dim bRet As Boolean
    
On Error GoTo Err_Jump
    If theMDBFileName = "" Then
        sMDBPath = GetDataFolder + "\ClientMgr.mdb"
    Else
        sMDBPath = theMDBFileName
    End If
    
    sConnStr = STR_CONN + ";DBQ=" + sMDBPath
    Set oConn = CreateObject("ADODB.Connection")
    oConn.Open sConnStr
    If oConn.State > 0 Then
        bTmp = FieldExists("Path", "tbClients", theMDBFileName)
        If Not bTmp Then
            sSQL = "ALTER TABLE tbClients ADD COLUMN Path TEXT(255) NULL"
            oConn.Execute sSQL
            bTmp = FieldExists("Path", "tbClients", theMDBFileName)
        End If
        bRet = bTmp
        
        bTmp = FieldExists("Type", "tbClients", theMDBFileName)
        If Not bTmp Then
            sSQL = "ALTER TABLE tbClients ADD COLUMN Type TEXT(10) NULL"
            oConn.Execute sSQL
            bTmp = FieldExists("Type", "tbClients", theMDBFileName)
        End If
        bRet = bRet And bTmp
        
        bTmp = FieldExists("CheckOut", "tbClients", theMDBFileName)
        If Not bTmp Then
            sSQL = "ALTER TABLE tbClients ADD COLUMN CheckOut TEXT(255) NULL"
            oConn.Execute sSQL
            bTmp = FieldExists("CheckOut", "tbClients", theMDBFileName)
        End If
        bRet = bRet And bTmp
        
        CheckPathFields = bRet
Err_Jump:
        If oConn.State > 0 Then
            oConn.Close
        End If
    End If
    Set oConn = Nothing

End Function

Public Function FieldExists(ByVal theFieldName As String, ByVal theTableName As String, Optional ByVal theMDBFileName As String) As Boolean
    Dim sSQL As String
    Dim oConn As Object
    Dim oRecSet As Object
    Dim sConnStr As String
    Dim sMDBPath As String
    Dim iCnt As Integer
    
On Error GoTo Err_Jump
    If theMDBFileName = "" Then
        sMDBPath = GetDataFolder + "\ClientMgr.mdb"
    Else
        sMDBPath = theMDBFileName
    End If
    
    sConnStr = STR_CONN + ";DBQ=" + sMDBPath
    Set oConn = CreateObject("ADODB.Connection")
    oConn.Open sConnStr
    If oConn.State > 0 Then
        sSQL = "SELECT * FROM " + theTableName
        Set oRecSet = oConn.Execute(sSQL)
        For iCnt = 0 To oRecSet.Fields.Count - 1
            If UCase(theFieldName) = UCase(oRecSet.Fields(iCnt).name) Then
                FieldExists = True
                Exit For
            End If
        Next iCnt
Err_Jump:
        If oConn.State > 0 Then
            oConn.Close
        End If
    End If
    Set oConn = Nothing
End Function

Public Sub AltImport(Optional ByVal theFileList As Collection = Nothing)
' Alternate Import. Used by new Filerequester dialog
    Dim oClientFile As Workbook
    Dim iCnt As Integer
    Dim vTmp As Variant
    Dim oListItem As ListItem
    
    Set oClientFile = Run("FPS.xls!GetClientFile")
    If Not oClientFile Is Nothing Then
        Select Case MsgBox(Lang(201), vbQuestion + vbYesNoCancel, PROG_NAME)
            Case vbYes
                If Not ShowSaveAs(False) Then
                    Exit Sub
                End If
            Case vbCancel
                Exit Sub
        End Select
    End If
    If Not ActiveWorkbook.name = "Mainpage.xls" Then
        Run "FPS.xls!ActivateMainPage"
    End If
    Load frmImport
    If Not theFileList Is Nothing Then
        frmImport.lvwFiles.ListItems.Clear
        For iCnt = 1 To theFileList.Count
            vTmp = Split(theFileList(iCnt), vbNullChar)
            Set oListItem = frmImport.lvwFiles.ListItems.Add(, , vTmp(0), , 1)
            oListItem.SubItems(1) = vTmp(1)
        Next iCnt
    End If
    frmImport.Show
End Sub

Public Function GetOpenFileName(Optional ByVal bNoDatabase As Boolean = False, Optional ByVal bNoImport As Boolean) As Variant
    Dim tCFInfo As ClientFileInfo
    tCFInfo = GetOpenCFInfo(bNoDatabase, bNoImport)
    GetOpenFileName = IIf(tCFInfo.FilePath = "", False, tCFInfo.FilePath)
End Function

Public Function GetOpenCFInfo(Optional ByVal bNoDatabase As Boolean = False, Optional ByVal bNoImport As Boolean, Optional ByVal iRestriction As FileTypeRestrictions = TYPE_ALL) As ClientFileInfo
    Dim tCFInfo As ClientFileInfo
    Dim oFileSys As New Scripting.FileSystemObject
    
    Load frmFileRequester
    If bNoDatabase Then
        frmFileRequester.SetNoDatabase True
    End If
    frmFileRequester.lblType.Caption = Lang(343)
    frmFileRequester.lblCurrFolder.Caption = Lang(344)
    frmFileRequester.InitOpen , , Not bNoDatabase
    frmFileRequester.txtFilename.Locked = True
    frmFileRequester.SetNoImport bNoImport
    frmFileRequester.m_ProgName = PROG_NAME
    Select Case iRestriction
        Case TYPE_CF_ONLY
            frmFileRequester.cboFileType.ListIndex = 1
            frmFileRequester.cboFileType.Enabled = False
        Case TYPE_DFF_ONLY
            frmFileRequester.cboFileType.ListIndex = 2
            frmFileRequester.cboFileType.Enabled = False
    End Select
    frmFileRequester.Show
    If frmFileRequester.m_ButtonClicked = frmFileRequester.cmdOK.Caption Then
        tCFInfo.FilePath = frmFileRequester.m_Filename
        tCFInfo.FromDB = frmFileRequester.m_FileIsFromDB
        If frmFileRequester.lvwFiles.SelectedItem Is Nothing Then
            tCFInfo.ScreenName = oFileSys.GetBaseName(frmFileRequester.txtFilename.Text)
        Else
            tCFInfo.ScreenName = oFileSys.GetBaseName(frmFileRequester.lvwFiles.SelectedItem.Text)
        End If
        GetOpenCFInfo = tCFInfo
    End If
    frmFileRequester.m_ForceClose = True
    Unload frmFileRequester
End Function

Public Function GetOpenCFInfoArray(Optional ByVal bNoDatabase As Boolean = False, Optional ByVal bNoImport As Boolean, Optional ByVal iRestriction As FileTypeRestrictions = TYPE_ALL) As Variant
    Dim tCFInfo As ClientFileInfo
    Dim aRet(2) As String
    
    tCFInfo = GetOpenCFInfo(bNoDatabase, bNoImport, iRestriction)
    aRet(0) = tCFInfo.FilePath
    aRet(1) = tCFInfo.FromDB
    aRet(2) = tCFInfo.ScreenName
    
    GetOpenCFInfoArray = aRet
End Function

Public Function GetSaveFileName(Optional ByVal bNoDatabase As Boolean = False, Optional ByVal sPrefixForNewID As String, Optional ByVal bNoImport As Boolean, Optional ByRef bSaveToDB As Boolean, Optional ByVal sInitFileName As String) As Variant
    Dim tCFInfo As ClientFileInfo
    tCFInfo = GetSaveCFInfo(bNoDatabase, sPrefixForNewID, bNoImport, bSaveToDB, , sInitFileName)
    GetSaveFileName = IIf(tCFInfo.FilePath = "", False, tCFInfo.FilePath)
End Function

Public Function GetSaveCFInfo(Optional ByVal bNoDatabase As Boolean = False, Optional ByVal sPrefixForNewID As String, Optional ByVal bNoImport As Boolean, Optional ByRef bSaveToDB As Boolean, Optional ByVal iRestriction As FileTypeRestrictions = TYPE_ALL, Optional ByVal sInitFileName As String) As ClientFileInfo
    Dim tCFInfo As ClientFileInfo
    Dim oFileSys As New Scripting.FileSystemObject
    
    Load frmFileRequester
    If bNoDatabase Then
        frmFileRequester.SetNoDatabase True
    End If
    frmFileRequester.lblType.Caption = Lang(345)
    frmFileRequester.lblCurrFolder.Caption = Lang(346)
    frmFileRequester.InitSaveAs , , Not bNoDatabase
    frmFileRequester.m_PrefixID = sPrefixForNewID
    frmFileRequester.SetNoImport bNoImport
    frmFileRequester.m_ProgName = PROG_NAME
    Select Case iRestriction
        Case TYPE_CF_ONLY
            frmFileRequester.cboFileType.ListIndex = 1
            frmFileRequester.cboFileType.Enabled = False
        Case TYPE_DFF_ONLY
            frmFileRequester.cboFileType.ListIndex = 2
            frmFileRequester.cboFileType.Enabled = False
    End Select
    frmFileRequester.txtFilename.Text = sInitFileName
    frmFileRequester.Show
    If frmFileRequester.m_ButtonClicked = frmFileRequester.cmdOK.Caption Then
        tCFInfo.FilePath = frmFileRequester.m_Filename
        tCFInfo.FromDB = frmFileRequester.m_FileIsFromDB
        If frmFileRequester.lvwFiles.SelectedItem Is Nothing Then
            tCFInfo.ScreenName = oFileSys.GetBaseName(frmFileRequester.txtFilename.Text)
        Else
            tCFInfo.ScreenName = oFileSys.GetBaseName(frmFileRequester.lvwFiles.SelectedItem.Text)
        End If
        GetSaveCFInfo = tCFInfo
    End If
    frmFileRequester.m_ForceClose = True
    Unload frmFileRequester
    bSaveToDB = tCFInfo.FromDB
End Function

Public Function GetSaveCFInfoArray(Optional ByVal bNoDatabase As Boolean = False, Optional ByVal sPrefixForNewID As String, Optional ByVal bNoImport As Boolean, Optional ByRef bSaveToDB As Boolean, Optional ByVal iRestriction As FileTypeRestrictions = TYPE_ALL, Optional ByVal sInitFileName As String) As Variant
    Dim tCFInfo As ClientFileInfo
    Dim aRet(2) As String
    
    tCFInfo = GetSaveCFInfo(bNoDatabase, sPrefixForNewID, bNoImport, bSaveToDB, iRestriction, sInitFileName)
    aRet(0) = tCFInfo.FilePath
    aRet(1) = tCFInfo.FromDB
    aRet(2) = tCFInfo.ScreenName
    
    GetSaveCFInfoArray = aRet
End Function

Public Function IsUniquePath(ByVal thePath As String, ByVal theName As String, ByVal thePlanner As String, Optional ByVal theDBFilePath As String, Optional ByRef sReturnCFID As String) As Boolean
' Returns whether a given full path is unique
    Dim sSQL As String
    Dim sWherePath As String
    Dim vTmp As Variant
    
    If thePath = "" Then
        sWherePath = "(Path IS NULL OR Path = '')"
    Else
        sWherePath = "Path = '" + Replace(thePath, "'", "''") + "'"
    End If
    sSQL = "SELECT ID,ClientFileID FROM tbClients WHERE " + sWherePath + " AND ClientName = '" + Replace(theName, "'", "''") + "' AND Creator = '" + Replace(thePlanner, "'", "''") + "'"
    vTmp = ExecuteSQL(sSQL, theDBFilePath)
    
    If IsArray(vTmp) Then
        IsUniquePath = False
        sReturnCFID = vTmp(1, 0)
    Else
        IsUniquePath = True
    End If
End Function

Public Function GetAssociatedProgram(ByVal theExtension As String) As String
' Returns the Associated Executable path of an extension

    Dim sReturn As String
    Dim sProgName As String
    
    sProgName = GetRegistrySetting(HKEY_CLASSES_ROOT, theExtension, "", "")
    
    If sProgName <> "" Then
        sReturn = GetRegistrySetting(HKEY_CLASSES_ROOT, sProgName + "\Shell\Open\Command", "", "")
    End If
    
    GetAssociatedProgram = sReturn
End Function

Public Function GetFolder(Optional ByVal theTitle As String, Optional ByVal OwnerHwnd As Long) As String
    Dim bI As BROWSEINFO
    Dim pidl As Long
    Dim path As String
    Dim pos As Integer
        
    'Fill the BROWSEINFO structure with the
    'needed data. To accomodate comments, the
    'With/End With sytax has not been used, though
    'it should be your 'final' version.
    
    'hwnd of the window that receives messages
    'from the call. Can be your application
    'or the handle from GetDesktopWindow().
    bI.hOwner = OwnerHwnd
    
    'Pointer to the item identifier list specifying
    'the location of the "root" folder to browse from.
    'If NULL, the desktop folder is used.
    bI.pidlRoot = 0&
    
    'message to be displayed in the Browse dialog
    bI.lpszTitle = theTitle
    
    'the type of folder to return.
    bI.ulFlags = BIF_RETURNONLYFSDIRS
    
    'show the browse for folders dialog
    pidl = SHBrowseForFolder(bI)
    
    'the dialog has closed, so parse & display the
    'user's returned folder selection contained in pidl
    path = Space$(MAX_PATH)
    
    If SHGetPathFromIDList(ByVal pidl, ByVal path) Then
        pos = InStr(path, Chr$(0))
        GetFolder = Left(path, pos - 1)
    End If
    
    Call CoTaskMemFree(pidl)
End Function

Public Function PseudoRollForward(Optional ByVal theCurrentYear As Variant) As Boolean
On Error GoTo Err_Trap

    Dim bAlreadyPrompted As Boolean
    Dim vTmp() As KeyValuePairs
    Dim iCnt As Integer
    Dim sSettingsPrev As String
    Dim sPrevFPPath As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sPrevDataFolder As String
    Dim oTmpColl As Collection
    
    If IsMissing(theCurrentYear) Then
        theCurrentYear = Val(Split(GetSettingsKey, " ")(1))
    Else
        theCurrentYear = Val(theCurrentYear)
    End If
    
    If theCurrentYear < 2004 Or theCurrentYear > Year(Now) Then
        Exit Function
    End If
    
    ' Check if already prompted
    bAlreadyPrompted = (GetSetting(PROG_NAME, GetSettingsKey, IIf(IsFR, STR_ROLLFORWARDDONE_FR, STR_ROLLFORWARDDONE), "0") = "1")
    ' If not prompted do the following
    If Not bAlreadyPrompted Then
        ' Get the previous year's installation folder
        sPrevFPPath = GetRegistrySetting(HKEY_LOCAL_MACHINE, "Software\CCH Canadian Limited\FP Solutions\" + CStr(theCurrentYear - 1), IIf(IsFR, "Path_FR", "Path"), "")
        ' Check if sprevfppath is empty (in case Workstation was the only one installed)
        If sPrevFPPath = "" Then
            ' Check for FP Solutions 2004 Workstation install
            sPrevFPPath = FindWkStn2004InstFolder
        End If
        ' Check if there was a folder in previous year
        If sPrevFPPath <> "" Then
            ' Check if filename is in shortfilename form
            If InStr(sPrevFPPath, "~") > 0 Then
                ' Get the long folder name of the path
                sPrevFPPath = GetLongName(sPrevFPPath)
            End If
            ' Check if folder still exists
            If oFileSys.FolderExists(sPrevFPPath) Then
                ' Build the previous year settings string
                sSettingsPrev = "Settings " + CStr(theCurrentYear - 1)
                ' Get previous year's data folder
                sPrevDataFolder = GetSetting(PROG_NAME, sSettingsPrev, "DataFolder", "")
                ' Check if user is using local database
                If sPrevDataFolder = "" Then
                    ' Prompt User if want to copy data
                    If MsgBox(Lang(347), vbYesNo + vbQuestion, PROG_NAME) = vbYes Then
                        ' Check if destination folder does not exist
                        If Not oFileSys.FolderExists(ThisWorkbook.path + "\data") Then
                            ' Create folder
                            oFileSys.CreateFolder ThisWorkbook.path + "\data"
                            ' Check if source folder exists
                            If oFileSys.FolderExists(sPrevFPPath + "\data") Then
                                ' Copy the database
                                oFileSys.CopyFolder sPrevFPPath + "\data", ThisWorkbook.path + "\data", True
                                ' Check if previous DB Setting is Not set to Local
                                If GetSetting(PROG_NAME, GetSettingsKey, "DataFolder", "") <> "" Then
                                    SaveSetting PROG_NAME, GetSettingsKey, "DataFolder", ""
                                    SaveSetting PROG_NAME, GetSettingsKey, "UseServerDB", 0
                                    SaveSetting PROG_NAME, GetSettingsKey, "UseSharedDB", 0
                                    MsgBox Lang(348), vbInformation, PROG_NAME
                                End If
                            End If
                        Else
                            ' Check if folder contains anything
                            If oFileSys.GetFolder(ThisWorkbook.path).Files.Count > 0 Then
                                If MsgBox(Lang(366) + vbLf + Lang(367), vbQuestion + vbYesNo + vbDefaultButton2, PROG_NAME) = vbYes Then
                                    ' Check if source folder exists
                                    If oFileSys.FolderExists(sPrevFPPath + "\data") Then
                                        ' Copy the database
                                        oFileSys.CopyFolder sPrevFPPath + "\data", ThisWorkbook.path + "\data", True
                                        ' Check if previous DB Setting is Not set to Local
                                        If GetSetting(PROG_NAME, GetSettingsKey, "DataFolder", "") <> "" Then
                                            SaveSetting PROG_NAME, GetSettingsKey, "DataFolder", ""
                                            SaveSetting PROG_NAME, GetSettingsKey, "UseServerDB", 0
                                            SaveSetting PROG_NAME, GetSettingsKey, "UseSharedDB", 0
                                            MsgBox Lang(348), vbInformation, PROG_NAME
                                        End If
                                    End If
                                Else
                                    MsgBox Lang(349), vbInformation, PROG_NAME
                                End If
                            Else
                                ' Check if source folder exists
                                If oFileSys.FolderExists(sPrevFPPath + "\data") Then
                                    ' Copy the database
                                    oFileSys.CopyFolder sPrevFPPath + "\data", ThisWorkbook.path + "\data", True
                                End If
                            End If
                        End If
                    Else
                        MsgBox Lang(349), vbInformation, PROG_NAME
                    End If
                    ' Turn off flag
                    SaveSetting PROG_NAME, GetSettingsKey, IIf(IsFR, STR_ROLLFORWARDDONE_FR, STR_ROLLFORWARDDONE), "1"
                Else
                    ' Prompt User if want to use existing database
                    If MsgBox(Lang(350), vbYesNo + vbQuestion, PROG_NAME) = vbYes Then
                        ' Copy Settings of previous year if settings were found
                        Set oTmpColl = EnumRegistryValues(HKEY_CURRENT_USER, "Software\VB and VBA Program Settings\FP Solutions\" + sSettingsPrev)
                        ' Check if collection returned
                        If oTmpColl.Count > 0 Then
                            ' Iterate through the KeyValuePairs array
                            For iCnt = 1 To oTmpColl.Count
                                ' Save the setting from previous version
                                SaveSetting PROG_NAME, GetSettingsKey, oTmpColl(iCnt)(0), oTmpColl(iCnt)(1)
                            Next iCnt
                        End If
                    Else
                        MsgBox Lang(351), vbInformation, PROG_NAME
                    End If
                    ' Turn off flag
                    SaveSetting PROG_NAME, GetSettingsKey, IIf(IsFR, STR_ROLLFORWARDDONE_FR, STR_ROLLFORWARDDONE), "1"
                End If
            End If
        End If
    End If
Exit Function
Err_Trap:
    MsgBox Err.Description, vbCritical, PROG_NAME
End Function

Function GetShortName(ByVal stLongPath As String) As String
    Dim stShortPath As String
    Dim lngBuffer As Long, lngRet As Long
    
    stShortPath = String$(MAX_PATH, 0)
    lngBuffer = Len(stShortPath)
    lngRet = apiGetShortPathName(stLongPath, stShortPath, lngBuffer)
    GetShortName = Left(stShortPath, lngRet)
End Function

Function GetLongName(ByVal strFileName As String) As String
    
    Dim lpFindFileData As WIN32_FIND_DATA
    Dim strPath As String, lngRet As Long
    Dim strFile As String, lngX As Long, lngY As Long
    Dim strTmp As String

    strTmp = ""
    Do While Not lngRet = INVALID_HANDLE_VALUE
        lngRet = apiFindFirstFile(strFileName, lpFindFileData)

        strFile = Left$(lpFindFileData.cFileName, _
                    InStr(lpFindFileData.cFileName, _
                    vbNullChar) - 1)
        If Len(strFileName) > 2 Then
            strTmp = strFile & "\" & strTmp
            strFileName = ParseDir(strFileName)
        Else
            strTmp = strFileName & "\" & strTmp
            Exit Do
        End If
    Loop
    GetLongName = Left$(strTmp, Len(strTmp) - 1)
    lngY = apiFindClose(lngRet)
End Function

Private Function ParseDir(strInFile As String) As String
Dim intLen As Long, boolFound As Boolean
Dim I As Integer, F As String, strDir As String

    intLen = Len(strInFile)
    If intLen > 0 Then
        boolFound = False
        For I = intLen To 1 Step -1
            If Mid$(strInFile, I, 1) = "\" Then
                F = Mid$(strInFile, I + 1)
                strDir = Left$(strInFile, I - 1)
                boolFound = True
                Exit For
            End If
        Next I
        End If
    If boolFound Then
        ParseDir = strDir
    Else
        ParseDir = strInFile
    End If
End Function

Private Function FindWkStn2004InstFolder() As String
' Used just to find FP Solutions 2004 Workstation installation since the Workstation 2004 installation did not register a Path in HKLM\Software\CCH Canadian Limited reg key
    Dim sTmp As String
    Dim sInst As String
    Dim oFileSys As New Scripting.FileSystemObject
    
    sTmp = GetRegistrySetting(HKEY_LOCAL_MACHINE, "Software\Microsoft\Windows\CurrentVersion\Uninstall\FP Solutions (2004) Workstation", "UninstallString", "")
    If sTmp <> "" Then
        sInst = Split(sTmp, " ")(0)
        sTmp = GetLongName(oFileSys.GetParentFolderName(sInst))
    End If
    FindWkStn2004InstFolder = sTmp
End Function

Public Function IsFrench() As Boolean
    IsFrench = (Format(CLng(CDate("01-01-01")), "mmm") = "janv")
End Function

Public Function ToEnglishLongDate(ByVal theStringDate As String, ByVal theDelim As String, Optional ByVal thePlacement As Integer = 2) As String
    Dim aMonthArray As Variant
    Dim aMonthArrayEng As Variant
    Dim sMonth As String
    Dim iCnt As Integer
    Dim sRet As String
    
    If thePlacement < 1 Then
        Exit Function
    End If
    
    sRet = theStringDate
    sMonth = Split(theStringDate, theDelim)(thePlacement - 1)
    aMonthArray = Array("janv", "f|fffd|vr", "mars", "avr", "mai", "juin", "juil", "ao|fffd|t", "sept", "oct", "nov", "d|fffd|c")
    aMonthArrayEng = Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
    For iCnt = LBound(aMonthArray) To UBound(aMonthArray)
        If sMonth = aMonthArray(iCnt) Then
            sRet = Replace(theStringDate, aMonthArray(iCnt), aMonthArrayEng(iCnt))
        End If
    Next iCnt
    ToEnglishLongDate = sRet
End Function

Public Sub SetCurrListItem(ByRef theListItem As ListItem)
    Set g_CurrListItem = theListItem
End Sub

Public Function GetCurrListItem() As ListItem
    Set GetCurrListItem = g_CurrListItem
End Function

Public Sub SetListView(ByRef theListView As ListView)
    Set g_ListView = theListView
End Sub

Public Function GetListView() As ListView
    Set GetListView = g_ListView
End Function

Public Function ToEnglishMonth(ByVal theDateString As String) As String
    Dim iCnt As Integer
    Dim aEngMonth As Variant
    
    ToEnglishMonth = theDateString
    aEngMonth = Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
    For iCnt = 1 To 12
        If InStr(1, theDateString, MonthName(iCnt), vbTextCompare) > 0 Then
            ToEnglishMonth = Replace(theDateString, MonthName(iCnt), aEngMonth(iCnt - 1))
        Else
            If InStr(1, theDateString, Format(CDate(CStr(iCnt) + "/20/2000"), "mmm"), vbTextCompare) > 0 Then
                ToEnglishMonth = Replace(theDateString, Format(Month(iCnt), "mmm"), Left(aEngMonth(iCnt - 1), 3))
            End If
        End If
    Next iCnt
End Function

Public Function ToEnglishBoolean(ByVal theString As String) As String
    Select Case UCase(theString)
        Case "VRAI"
            ToEnglishBoolean = "TRUE"
        Case "FAUX"
            ToEnglishBoolean = "FALSE"
        Case Else
            ToEnglishBoolean = theString
    End Select
End Function

Public Function GetSettingsKey() As String
    Dim sRet As String
    Select Case True
        Case IsCIBCWG
            sRet = "Settings 2006"
        Case Else
            sRet = SETTINGS_KEY
    End Select
    GetSettingsKey = sRet
End Function

Public Function IsCIBCWG() As Boolean
    Dim sCust As String
    sCust = GetRegistrySetting(HKEY_LOCAL_MACHINE, "Software\CCH Canadian Limited\FP Solutions\2006", "Customization", 0)
    IsCIBCWG = (LCase(sCust) = LCase(STR_CIBC))
End Function

Public Function GetUserDefaultsPath() As String
On Error GoTo Err_Trap
    Dim sPath As String
    Dim oFileSys As Scripting.FileSystemObject
    Dim sMsg As String
    
    sPath = ThisWorkbook.path
    Select Case True
        Case IsCIBCWG
            sPath = GetSetting(PROG_NAME, "Settings", "UserDefaultsPath", ThisWorkbook.path)
            sPath = IIf(sPath = "", ThisWorkbook.path, sPath)
            Set oFileSys = New Scripting.FileSystemObject
            If Not oFileSys.FolderExists(sPath) Then
                sMsg = Replace(Lang(136), "%FOLDER%", sPath)
                MsgBox sMsg, vbCritical, PROG_NAME
                sPath = ThisWorkbook.path
            End If
        Case Else
            sPath = Run("Fps.xls!GetUserDefaultsPath")
    End Select
    GetUserDefaultsPath = sPath
Exit Function
Err_Trap:
    MsgBox Err.Description & " in Method 'GetUserDefaultsPath'", vbCritical
    GetUserDefaultsPath = sPath
End Function

Public Function GetDefFileFullPath(ByVal theDefName As String) As String
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sDefName As String
    Dim sRet As String
    Dim sAltPath As String
    
    sDefName = oFileSys.GetFileName(theDefName)
    If oFileSys.FileExists(ThisWorkbook.path & "\" & sDefName) Then
        sRet = ThisWorkbook.path & "\" & sDefName
    Else
        sAltPath = GetUserDefaultsPath
        sAltPath = IIf(Right(sAltPath, 1) = "\", sAltPath, sAltPath & "\")
        If oFileSys.FileExists(sAltPath & sDefName) Then
            sRet = sAltPath & sDefName
        End If
    End If
    GetDefFileFullPath = sRet
End Function

Public Sub UniversalSaveAs(ByVal theWorkBook As Workbook, ByVal theFileName As String)
' Allows to SaveAs in Excel 2003 format even in Excel 2007 mode
On Error GoTo Err_Trap
    If Val(Application.Version) >= 12 Then
        theWorkBook.SaveAs theFileName, 56
    Else
        theWorkBook.SaveAs theFileName
    End If
Exit Sub
Err_Trap:
    theWorkBook.SaveAs theFileName
End Sub

Public Function GetExportsFolder() As String
On Error Resume Next
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sPath As String
    
    sPath = GetSetting("FP Solutions", "Settings", "ExportsFolder", "")
    If oFileSys.FolderExists(sPath) Then
        GetExportsFolder = sPath
    Else
        If oFileSys.FolderExists(ThisWorkbook.path + "\Export") Then
            GetExportsFolder = ThisWorkbook.path + "\Export"
        Else
            oFileSys.CreateFolder ThisWorkbook.path & "\Export"
            If Not oFileSys.FolderExists(ThisWorkbook.path & "\Export") Then
                GetExportsFolder = "C:"
            Else
                GetExportsFolder = ThisWorkbook.path + "\Export"
            End If
        End If
    End If
End Function

Attribute VB_Name = "modRegistry"
'****************************************************************************
'   Registry Declares, Structures and Constants for VB
'   from Win32API.Txt
'****************************************************************************

Option Explicit
'Registry Constants

'Registry Root Keys
Public Enum RegRootKeyEnum
    HKEY_CLASSES_ROOT = &H80000000
    HKEY_CURRENT_USER = &H80000001
    HKEY_LOCAL_MACHINE = &H80000002
    HKEY_USERS = &H80000003
End Enum

'Registry Specific Access Rights
'Public Enum RegAccessRights
Public Const KEY_QUERY_VALUE = &H1
Public Const KEY_SET_VALUE = &H2
Public Const KEY_CREATE_SUB_KEY = &H4
Public Const KEY_ENUMERATE_SUB_KEYS = &H8
Public Const KEY_NOTIFY = &H10
Public Const KEY_CREATE_LINK = &H20
Public Const KEY_ALL_ACCESS = &H3F

Const SYNCHRONIZE = &H100000
Const READ_CONTROL = &H20000
Const STANDARD_RIGHTS_READ = (READ_CONTROL)
Const STANDARD_RIGHTS_WRITE = (READ_CONTROL)
Const KEY_READ = ((STANDARD_RIGHTS_READ Or KEY_QUERY_VALUE Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY) And (Not SYNCHRONIZE))
Const KEY_WRITE = ((STANDARD_RIGHTS_WRITE Or KEY_SET_VALUE Or KEY_CREATE_SUB_KEY) And (Not SYNCHRONIZE))
'End Enum

'Open/Create Options
'Public Enum RegOpenCreateOptions
Public Const REG_OPTION_NON_VOLATILE = 0&
Public Const REG_OPTION_VOLATILE = &H1
'End Enum

'Key creation/open disposition
'Public Enum RegOpenDisposition
Public Const REG_CREATED_NEW_KEY = &H1
Public Const REG_OPENED_EXISTING_KEY = &H2
'End Enum

'masks for the predefined standard access types
'Public Enum RegStdAccessTypes
Public Const STANDARD_RIGHTS_ALL = &H1F0000
Public Const SPECIFIC_RIGHTS_ALL = &HFFFF
'End Enum

'Define severity codes
'Public Enum RegErrCodes
Public Const ERROR_SUCCESS = 0&
Public Const ERROR_MORE_DATA = 234&
Public Const ERROR_ACCESS_DENIED = 5
Public Const ERROR_NO_MORE_ITEMS = 259
'End Enum

'Predefined Value Types
'Public Enum RegValueTypes
Public Const REG_NONE = (0)                             'No value type
Public Const REG_SZ = (1)                               'Unicode nul terminated string
Public Const REG_EXPAND_SZ = (2)                        'Unicode nul terminated string w/enviornment var
Public Const REG_BINARY = (3)                           'Free form binary
Public Const REG_DWORD = (4)                            '32-bit number
Public Const REG_DWORD_LITTLE_ENDIAN = (4)              '32-bit number (same as REG_DWORD)
Public Const REG_DWORD_BIG_ENDIAN = (5)                 '32-bit number
Public Const REG_LINK = (6)                             'Symbolic Link (unicode)
Public Const REG_MULTI_SZ = (7)                         'Multiple Unicode strings
Public Const REG_RESOURCE_LIST = (8)                    'Resource list in the resource map
Public Const REG_FULL_RESOURCE_DESCRIPTOR = (9)         'Resource list in the hardware description
Public Const REG_RESOURCE_REQUIREMENTS_LIST = (10)
'End Enum

Type SECURITY_ATTRIBUTES
        nLength As Long
        lpSecurityDescriptor As Long
        bInheritHandle As Boolean
End Type

Type FILETIME
        dwLowDateTime As Long
        dwHighDateTime As Long
End Type

Type ACL
        AclRevision As Byte
        Sbz1 As Byte
        AclSize As Integer
        AceCount As Integer
        Sbz2 As Integer
End Type

Type SECURITY_DESCRIPTOR
        Revision As Byte
        Sbz1 As Byte
        Control As Long
        Owner As Long
        Group As Long
        Sacl As ACL
        Dacl As ACL
End Type

Type WNDCLASS
    style As Long
    lpfnWndProc As Long
    cbClsExtra As Long
    cbWndExtra2 As Long
    hInstance As Long
    hIcon As Long
    hCursor As Long
    hbrBackground As Long
    lpszMenuName As String
    lpszClassName As String
End Type

Type WNDCLASSEX
    cbSize As Long
    style As Long
    lpfnWndProc As Long
    cbClsExtra As Long
    cbWndExtra As Long
    hInstance As Long
    hIcon As Long
    hCursor As Long
    hbrBackground As Long
    lpszMenuName As String
    lpszClassName As String
    hIconSm As Long
End Type

Public Type KeyValuePairs
    KeyName As String
    keyValue As String
End Type

Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (dest As Any, Source As Any, ByVal numBytes As Long)
Private Declare Function ExpandEnvironmentStrings Lib "kernel32" Alias "ExpandEnvironmentStringsA" (ByVal lpSrc As String, ByVal lpDst As String, ByVal nSize As Long) As Long

Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hkey As Long) As Long
Attribute RegCloseKey.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegConnectRegistry Lib "advapi32.dll" Alias "RegConnectRegistryA" (ByVal lpMachineName As String, ByVal hkey As Long, pHKResult As Long) As Long
Attribute RegConnectRegistry.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, pHKResult As Long) As Long
Attribute RegCreateKey.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As SECURITY_ATTRIBUTES, pHKResult As Long, lpdwDisposition As Long) As Long
Attribute RegCreateKeyEx.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hkey As Long, ByVal lpSubKey As String) As Long
Attribute RegDeleteKey.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hkey As Long, ByVal lpValueName As String) As Long
Attribute RegDeleteValue.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegEnumKey Lib "advapi32.dll" Alias "RegEnumKeyA" (ByVal hkey As Long, ByVal dwIndex As Long, ByVal lpName As String, ByVal cbName As Long) As Long
Attribute RegEnumKey.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegEnumKeyEx Lib "advapi32.dll" Alias "RegEnumKeyExA" (ByVal hkey As Long, ByVal dwIndex As Long, ByVal lpName As String, lpcbName As Long, lpReserved As Long, ByVal lpClass As String, lpcbClass As Long, lpftLastWriteTime As FILETIME) As Long
Attribute RegEnumKeyEx.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegEnumValue Lib "advapi32.dll" Alias "RegEnumValueA" (ByVal hkey As Long, ByVal dwIndex As Long, ByVal lpValueName As String, lpcbValueName As Long, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long
Declare Function RegFlushKey Lib "advapi32.dll" (ByVal hkey As Long) As Long
Attribute RegFlushKey.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegGetKeySecurity Lib "advapi32.dll" (ByVal hkey As Long, ByVal SecurityInformation As Long, pSecurityDescriptor As SECURITY_DESCRIPTOR, lpcbSecurityDescriptor As Long) As Long
Attribute RegGetKeySecurity.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegisterClass Lib "user32" (Class As WNDCLASS) As Long
Attribute RegisterClass.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegisterClassEx Lib "user32" Alias "RegisterClassExA" (pcWndClassEx As WNDCLASSEX) As Integer
Attribute RegisterClassEx.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegisterClipboardFormat Lib "user32" Alias "RegisterClipboardFormatA" (ByVal lpString As String) As Long
Attribute RegisterClipboardFormat.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegisterEventSource Lib "advapi32.dll" Alias "RegisterEventSourceA" (ByVal lpUNCServerName As String, ByVal lpSourceName As String) As Long
Attribute RegisterEventSource.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegisterHotKey Lib "user32" (ByVal hwnd As Long, ByVal id As Long, ByVal fsModifiers As Long, ByVal vk As Long) As Long
Attribute RegisterHotKey.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegisterServiceCtrlHandler Lib "advapi32.dll" Alias "RegisterServiceCtrlHandlerA" (ByVal lpServiceName As String, ByVal lpHandlerProc As Long) As Long
Attribute RegisterServiceCtrlHandler.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegisterWindowMessage Lib "user32" Alias "RegisterWindowMessageA" (ByVal lpString As String) As Long
Attribute RegisterWindowMessage.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegLoadKey Lib "advapi32.dll" Alias "RegLoadKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal lpFile As String) As Long
Attribute RegLoadKey.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegNotifyChangeKeyValue Lib "advapi32.dll" (ByVal hkey As Long, ByVal bWatchSubtree As Long, ByVal dwNotifyFilter As Long, ByVal hEvent As Long, ByVal fAsynchronus As Long) As Long
Attribute RegNotifyChangeKeyValue.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, pHKResult As Long) As Long
Attribute RegOpenKey.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, pHKResult As Long) As Long
Attribute RegOpenKeyEx.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegQueryInfoKey Lib "advapi32.dll" Alias "RegQueryInfoKeyA" (ByVal hkey As Long, ByVal lpClass As String, lpcbClass As Long, lpReserved As Long, lpcSubKeys As Long, lpcbMaxSubKeyLen As Long, lpcbMaxClassLen As Long, lpcValues As Long, lpcbMaxValueNameLen As Long, lpcbMaxValueLen As Long, lpcbSecurityDescriptor As Long, lpftLastWriteTime As FILETIME) As Long
Attribute RegQueryInfoKey.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
Attribute RegQueryValue.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegQueryValueEx Lib "advapi32" Alias "RegQueryValueExA" (ByVal hkey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, ByRef lpType As Long, ByVal szData As String, ByRef lpcbData As Long) As Long
Attribute RegQueryValueEx.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegReplaceKey Lib "advapi32.dll" Alias "RegReplaceKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal lpNewFile As String, ByVal lpOldFile As String) As Long
Attribute RegReplaceKey.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegRestoreKey Lib "advapi32.dll" Alias "RegRestoreKeyA" (ByVal hkey As Long, ByVal lpFile As String, ByVal dwFlags As Long) As Long
Attribute RegRestoreKey.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegSaveKey Lib "advapi32.dll" Alias "RegSaveKeyA" (ByVal hkey As Long, ByVal lpFile As String, lpSecurityAttributes As SECURITY_ATTRIBUTES) As Long
Attribute RegSaveKey.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegSetKeySecurity Lib "advapi32.dll" (ByVal hkey As Long, ByVal SecurityInformation As Long, pSecurityDescriptor As SECURITY_DESCRIPTOR) As Long
Attribute RegSetKeySecurity.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
Attribute RegSetValue.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegSetValueExStr Lib "advapi32" Alias "RegSetValueExA" (ByVal hkey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, ByVal szData As String, ByVal cbData As Long) As Long
Declare Function RegSetValueExLng Lib "advapi32" Alias "RegSetValueExA" (ByVal hkey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, lpValue As Long, ByVal cbData As Long) As Long
Declare Function RegUnLoadKey Lib "advapi32.dll" Alias "RegUnLoadKeyA" (ByVal hkey As Long, ByVal lpSubKey As String) As Long
Attribute RegUnLoadKey.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function GetSystemDirectory Lib "kernel32" Alias "GetSystemDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long) As Long
Attribute GetSystemDirectory.VB_ProcData.VB_Invoke_Func = " \n14"

Public Function ConvertString(ByVal tmpVal As String, ByVal KeyValSize As Long) As String
Attribute ConvertString.VB_ProcData.VB_Invoke_Func = " \n14"
   If (Asc(Mid(tmpVal, KeyValSize, 1)) = 0) Then           ' Win95 Adds Null Terminated String...
        ConvertString = Left(tmpVal, KeyValSize - 1)               ' Null Found, Extract From String
    Else                                                    ' WinNT Does NOT Null Terminate String...
        ConvertString = Left(tmpVal, KeyValSize)                   ' Null Not Found, Extract String Only
    End If
    ConvertString = Trim(ConvertString)
End Function

Public Function GetRegistrySetting(ByVal theRootKey As RegRootKeyEnum, ByVal theSubkeyString As String, ByVal theKeyValue As String, ByVal DefaultReturnValue As String) As String
Attribute GetRegistrySetting.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim RetVal As Long, pHKResult As Long, ldataBuffSize As Long, dataBuff As String, theRetValue As String
    GetRegistrySetting = DefaultReturnValue
    dataBuff = Space(255)
    ldataBuffSize = Len(dataBuff)
    RetVal = RegOpenKeyEx(theRootKey, theSubkeyString, 0, KEY_READ, pHKResult)
    If RetVal = ERROR_SUCCESS Then
        RetVal = RegQueryValueEx(pHKResult, theKeyValue, 0, 0, dataBuff, ldataBuffSize)
        If RetVal = ERROR_SUCCESS Then
            theRetValue = ConvertString(dataBuff, ldataBuffSize)
            GetRegistrySetting = theRetValue
        End If
        RegCloseKey pHKResult
    End If
    RegCloseKey theRootKey
End Function

Public Function SaveRegistrySetting(ByVal theRootKey As RegRootKeyEnum, ByVal SubKeyString As String, ByVal KeyName As String, ByVal keyValue As Variant, Optional ByVal KeyValueType As Long = REG_SZ) As Boolean
Attribute SaveRegistrySetting.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim RetVal As Long, pHKResult As Long, ldataBuffSize As Long, dataBuff As String, theRetValue As String
    KeyValueType = IIf(KeyValueType = 0, REG_SZ, KeyValueType)
    SaveRegistrySetting = False
    RetVal = RegOpenKeyEx(theRootKey, SubKeyString, 0, KEY_WRITE, pHKResult)
    If RetVal = ERROR_SUCCESS Then
        Select Case KeyValueType
            Case REG_SZ
                RetVal = RegSetValueExStr(pHKResult, KeyName, 0&, KeyValueType, CStr(keyValue) + Chr(0), CLng(Len(keyValue) + 1))
            Case REG_DWORD
                RetVal = RegSetValueExLng(pHKResult, KeyName, 0&, KeyValueType, CLng(keyValue), 4)
        End Select
        If RetVal = ERROR_SUCCESS Then
            SaveRegistrySetting = True
        End If
        RegCloseKey pHKResult
    End If
    RegCloseKey theRootKey
End Function

Public Function CreateRegistryKey(ByVal theRootKey As Long, ByVal theSubkeyString As String) As Boolean
Attribute CreateRegistryKey.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim RetVal As Long, pHKResult As Long
    CreateRegistryKey = False
    RetVal = RegCreateKey(theRootKey, theSubkeyString, pHKResult)
    If RetVal = ERROR_SUCCESS Then
        CreateRegistryKey = True
    End If
End Function

Public Function ListRegistryKeys(ByVal theRootKey As Long, Optional ByVal theSubkeyString As String) As Variant
Attribute ListRegistryKeys.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim RetVal As Long, pHKResult As Long, dataBuff As String, ldataBuffSize As Long, keyCtr As Long, theRetValue As String
    If theSubkeyString <> "" Then
        RetVal = RegOpenKeyEx(theRootKey, theSubkeyString, 0, KEY_ALL_ACCESS, pHKResult)
        If RetVal <> ERROR_SUCCESS Then
            ListRegistryKeys = ""
            RegCloseKey theRootKey
            Exit Function
        End If
    Else
        pHKResult = theRootKey
    End If
    theRetValue = ""
    keyCtr = 0
    Do While RetVal <> ERROR_NO_MORE_ITEMS
        dataBuff = Space(255)
        ldataBuffSize = Len(dataBuff)
        RetVal = RegEnumKey(pHKResult, keyCtr, dataBuff, ldataBuffSize)
        Select Case True
            Case RetVal = ERROR_SUCCESS
                theRetValue = theRetValue + ConvertString(dataBuff, ldataBuffSize) + "|"
            Case (RetVal <> ERROR_SUCCESS) And (RetVal <> ERROR_NO_MORE_ITEMS)
                ListRegistryKeys = ""
                Exit Do
        End Select
        keyCtr = keyCtr + 1
        DoEvents
    Loop
    theRetValue = IIf(Right(theRetValue, 1) = "|", Left(theRetValue, Len(theRetValue) - 1), theRetValue)
    If Len(theRetValue) > 0 Then
        ListRegistryKeys = Split(theRetValue, "|")
    Else
        ListRegistryKeys = ""
    End If
    RegCloseKey theRootKey
End Function

Public Function ConvertCharToLong(ByVal theGarbageChar As String) As Long
Attribute ConvertCharToLong.VB_ProcData.VB_Invoke_Func = " \n14"
    If theGarbageChar <> "" Then
        ConvertCharToLong = CLng("&H" + CStr(Hex(Asc(Left(theGarbageChar, 1)))))
    End If
End Function

Public Function DeleteRegistryKey(ByVal theRootKey As Long, ByVal theSubkeyString As String) As Boolean
Attribute DeleteRegistryKey.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim RetVal As Long
    DeleteRegistryKey = False
    RetVal = RegDeleteKey(theRootKey, theSubkeyString)
    If RetVal = ERROR_SUCCESS Then
        DeleteRegistryKey = True
    End If
End Function

Public Function DeleteRegistryValue(ByVal theRootKey As Long, ByVal theSubkeyString As String, ByVal theKeyValue As String)
Attribute DeleteRegistryValue.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim RetVal As Long, pHKResult As Long
    DeleteRegistryValue = False
    If theSubkeyString <> "" Then
        RetVal = RegOpenKeyEx(theRootKey, theSubkeyString, 0, KEY_ALL_ACCESS, pHKResult)
        If RetVal <> ERROR_SUCCESS Then
            DeleteRegistryValue = False
            RegCloseKey theRootKey
            Exit Function
        End If
    Else
        pHKResult = theRootKey
    End If
    RetVal = RegDeleteValue(pHKResult, theKeyValue)
    If RetVal = ERROR_SUCCESS Then
        DeleteRegistryValue = True
    End If
End Function

Function SystemDirectory() As String
Attribute SystemDirectory.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim WinPath As String
    WinPath = String(145, Chr(0))
    SystemDirectory = Left(WinPath, GetSystemDirectory(WinPath, 145))
End Function

Function EnumRegistryValues(ByVal hkey As RegRootKeyEnum, ByVal KeyName As String) As Collection
    Dim handle As Long
    Dim index As Long
    Dim valueType As Long
    Dim name As String
    Dim nameLen As Long
    Dim resLong As Long
    Dim resString As String
    Dim length As Long
    Dim valueInfo(0 To 1) As Variant
    Dim RetVal As Long
    Dim I As Integer
    Dim vTemp As Variant
    
    ' initialize the result
    Set EnumRegistryValues = New Collection
    
    ' Open the key, exit if not found.
    If Len(KeyName) Then
        If RegOpenKeyEx(hkey, KeyName, 0, KEY_READ, handle) Then Exit Function
        ' in all cases, subsequent functions use hKey
        hkey = handle
    End If
    
    Do
        ' this is the max length for a key name
        nameLen = 260
        name = Space$(nameLen)
        ' prepare the receiving buffer for the value
        length = 4096
        ReDim resBinary(0 To length - 1) As Byte
        
        ' read the value's name and data
        ' exit the loop if not found
        RetVal = RegEnumValue(hkey, index, name, nameLen, ByVal 0&, valueType, resBinary(0), length)
        
        ' enlarge the buffer if you need more space
        If RetVal = ERROR_MORE_DATA Then
            ReDim resBinary(0 To length - 1) As Byte
            RetVal = RegEnumValue(hkey, index, name, nameLen, ByVal 0&, valueType, resBinary(0), length)
        End If
        ' exit the loop if any other error (typically, no more values)
        If RetVal Then Exit Do
        
        ' retrieve the value's name
        valueInfo(0) = Left$(name, nameLen)
        
        ' return a value corresponding to the value type
        Select Case valueType
            
            Case REG_DWORD
                CopyMemory resLong, resBinary(0), 4
                valueInfo(1) = resLong
            
            Case REG_SZ
                ' copy everything but the trailing null char
                If length <> 0 Then
                    resString = Space$(length - 1)
                    CopyMemory ByVal resString, resBinary(0), length - 1
                    valueInfo(1) = resString
                Else
                    valueInfo(1) = ""
                End If
                
            Case REG_EXPAND_SZ
                ' copy everything but the trailing null char
                ' expand the environment variable to it's value
                ' Ignore a Blank String
                If length <> 0 Then
                    resString = Space$(length - 1)
                    CopyMemory ByVal resString, resBinary(0), length - 1
                    length = ExpandEnvironmentStrings(resString, resString, Len(resString))
                    valueInfo(1) = TrimNull(resString)
                Else
                    valueInfo(1) = ""
                End If

            Case REG_BINARY
                ' shrink the buffer if necessary
                If length < UBound(resBinary) + 1 Then
                    ReDim Preserve resBinary(0 To length - 1) As Byte
                End If
                 'Convert to display as string like this: 00 01 01 00 01
                    For I = 0 To UBound(resBinary)
                         resString = resString & " " & Format(Trim(Hex(resBinary(I))), "0#")
                    Next I
                    valueInfo(1) = LTrim(resString) 'Get rid of leading space
            
            Case REG_MULTI_SZ
                ' copy everything but the 2 trailing null chars
                resString = Space$(length - 2)
                CopyMemory ByVal resString, resBinary(0), length - 2
                
                'convert from null-delimited (vbNullChar) stream of strings
                'to comma delimited stream of strings
                'The listview likes it better that way
                resString = Replace(resString, vbNullChar, ",", , , vbBinaryCompare)
                valueInfo(1) = resString
            
            Case Else
                ' Unsupported value type - do nothing
        End Select
        
        ' add the array to the result collection
        ' the element's key is the value's name
        EnumRegistryValues.Add valueInfo, valueInfo(0)
        
        index = index + 1
    Loop
   
    ' Close the key, if it was actually opened
    If handle Then RegCloseKey handle
        
End Function

Public Function TrimNull(Item As String) As String
    Dim pos As Integer
        pos = InStr(Item, Chr$(0))
        If pos Then Item = Left$(Item, pos - 1)
        TrimNull = Item
End Function

Attribute VB_Name = "modUnusedCode"
Option Explicit

Public Function SavePersonalData(ByVal theClientFile As Workbook, ByVal theClientFileID As String) As Boolean
    Dim oPerinfo As Worksheet
    Dim iCnt As Integer
    Dim iNumScen As Integer
    Dim iScnt As Integer
    Dim iOffSet As Long
    Dim vValue As Variant
    Dim sShtName As String
    Dim iType As Integer
    Dim sScenName As String
    Dim sSQL As String
    Dim oDefault As Workbook
    Dim iProgTotal As Long
    Dim iProgCnt As Long

    ChDir ThisWorkbook.path
    
    ' Make reference to currently selected Defaults file
    Set oDefault = Run("FPS.xls!GetWorkBook", Run("FPS.xls!GetDefaultsFilename"), True)

    ' Get Reference to Perinfo Sheet
    Set oPerinfo = theClientFile.Sheets("Perinfo.xls")

    ' Set Sheet Name
    sShtName = "Perinfo.xls"

    ' Get Number of Scenarios
    iNumScen = Run("FPS.xls!iNumScenarios", theClientFile)

    ' Clean Up First
    ExecuteSQL "DELETE FROM tbPersonal WHERE ClientFileID = '" + theClientFileID + "'"

    ' Get Total count for progress bar
    iProgTotal = (iNumScen + 1) * 48

    For iScnt = 0 To iNumScen
        iOffSet = iScnt * 1000
        For iCnt = (13 + iOffSet) To (26 + iOffSet)
            ' Increment Progress Counter
            iProgCnt = iProgCnt + 1
            frmImport.SetProgress (iProgCnt / iProgTotal) * 100
            GoSub GrabValues
        Next iCnt
        DoEvents
        For iCnt = (33 + iOffSet) To (68 + iOffSet)
            ' Increment Progress Counter
            iProgCnt = iProgCnt + 1
            frmImport.SetProgress (iProgCnt / iProgTotal) * 100
            GoSub GrabValues
        Next iCnt
    Next iScnt

    oDefault.Close

Exit Function
GrabValues:
    vValue = oPerinfo.Cells(iCnt, 1).Value
    If vValue <> "" Then
        iType = DetectDataType(vValue)
        If iScnt > 0 Then
            sScenName = theClientFile.Sheets("system").Cells(iScnt, 8).Value
        Else
            sScenName = Lang(34)
        End If
        sSQL = "INSERT INTO tbPersonal (ClientFileID,SheetName,Range,Scenario,CellValue,DataType) VALUES ('" + CStr(theClientFileID) + "','" + sShtName + "','A" + CStr(iCnt) + "','" + sScenName + "','" + CStr(vValue) + "'," + CStr(iType) + ")"
        If ExecuteSQL(sSQL) > 0 Then
            Select Case True
                Case (Right(iCnt, 2) >= 62) And (Right(iCnt, 2) <= 68)
                    oPerinfo.Cells(iCnt, 1).Value = Lang(33) + CStr(Right(iCnt, 2) - 61)
                Case Else
                    oPerinfo.Cells(iCnt, 1).Value = oDefault.Sheets("Perinfo.xls").Cells(iCnt - iOffSet, 1).Value
            End Select
        End If
    End If
    Return
End Function

Public Function PersonalDataLoad(ByVal theClientFileID As String, Optional ByVal theScenario As String = "") As Boolean
    Dim aData As Variant
    Dim sSQL As String
    Dim iCnt As Integer
    Dim oPerinfo As Workbook
    Dim sRange As String

    If theScenario = "" Then
        theScenario = Lang(34)
    End If

    ChDir ThisWorkbook.path
    
    ' Retrieve Personal info from Database
    sSQL = "SELECT ID,ClientFileID,SheetName,Range,Scenario,CellValue,DataType FROM tbPersonal WHERE ClientFileID = '" + theClientFileID + "' AND Scenario = '" + theScenario + "'"
    aData = ExecuteSQL(sSQL)
    If IsArray(aData) Then
        Set oPerinfo = Run("FPS.xls!GetWorkBook", "Perinfo.xls", True)
        If Not oPerinfo Is Nothing Then
            For iCnt = LBound(aData, 2) To UBound(aData, 2)
                sRange = Left(aData(3, iCnt), 1) + CStr(Val(Right(aData(3, iCnt), Len(aData(3, iCnt)) - 1)) Mod 1000)
                ' Copy Data to the client file
                Select Case aData(6, iCnt)
                    Case 0  ' Text
                        oPerinfo.Sheets("data").Range(sRange).Value = CStr(aData(5, iCnt))
                    Case 1  ' Number
                        oPerinfo.Sheets("data").Range(sRange).Value = Val(aData(5, iCnt))
                    Case 2  ' Boolean
                        oPerinfo.Sheets("data").Range(sRange).Value = CBool(aData(5, iCnt))
                    Case 3  ' Date
                        oPerinfo.Sheets("data").Range(sRange).Value = CDate(aData(5, iCnt))
                End Select
            Next iCnt
            PersonalDataLoad = True
        End If
    End If

End Function

Public Function PersonalDataSave(ByVal theClientFileID As String, Optional ByVal theScenario As String = "", Optional ByVal theScenarioNum As Variant) As Boolean
    Dim sSQL As String
    Dim oPerinfo As Workbook
    Dim iCnt As Integer
    Dim vValue As Variant
    Dim iType As Integer
    Dim sShtName As String
    Dim sRange As String
    Dim oClientFile As Workbook
    Dim iScenNum As Integer

    If theScenario = "" Then
        theScenario = Lang(34)
    End If

    ChDir ThisWorkbook.path
    
    ' Clean Up DB
    sSQL = "DELETE FROM tbPersonal WHERE ClientFileID = '" + theClientFileID + "' AND Scenario = '" + theScenario + "'"
    ExecuteSQL sSQL
    ' Get the Perinfo Workbook
    Set oPerinfo = Run("FPS.xls!GetWorkBook", "Perinfo.xls", True)
    If Not oPerinfo Is Nothing Then
        ' Get Client File
        Set oClientFile = Run("FPS.xls!GetClientFile")
        If Not oClientFile Is Nothing Then
            ' Check if the scenario number was not specified
            If IsMissing(theScenarioNum) Then
                iScenNum = 0
                ' Find out the Scenario number based on scenario name
                For iCnt = 1 To 10
                    If oClientFile.Sheets("system").Cells(iCnt, 8).Value = "" Then
                        Exit For
                    Else
                        If theScenario = oClientFile.Sheets("system").Cells(iCnt, 8).Value Then
                            iScenNum = iCnt
                            Exit For
                        End If
                    End If
                Next iCnt
            Else
                ' Use the specified scenario number. THis takes precedence if both name and number were specified
                iScenNum = Val(theScenarioNum)
            End If
            ' Calculate scenario offset
            iScenNum = iScenNum * 1000
            For iCnt = 13 To 68
                If iCnt = 27 Then
                    iCnt = 33
                End If
                sRange = "A" + CStr(iScenNum + iCnt)
                sShtName = "Perinfo.xls"
                vValue = oPerinfo.Sheets("data").Cells(iCnt, 1).Value
                If vValue <> "" Then
                    iType = DetectDataType(vValue)
                    sSQL = "INSERT INTO tbPersonal (ClientFileID,SheetName,Range,Scenario,CellValue,DataType) VALUES ('" + CStr(theClientFileID) + "','" + sShtName + "','" + sRange + "','" + theScenario + "','" + CStr(vValue) + "'," + CStr(iType) + ")"
                    ExecuteSQL sSQL
                End If
            Next iCnt
            PersonalDataSave = True
        End If
    End If
End Function

Public Function Export(ByVal theExportFilename As String, ByVal bIncludePerInfo As Boolean) As Boolean
    Dim oFileSys As New Scripting.FileSystemObject
    Dim oNewClientFile As Workbook
    Dim oOldClientFile As Workbook

    ChDir ThisWorkbook.path
    
    Set oOldClientFile = Run("FPS.xls!GetClientFile")
    Set oNewClientFile = Run("FPS.xls!CreateClientFile", oOldClientFile)
    If Not oNewClientFile Is Nothing Then
        If bIncludePerInfo Then
            PopulateClientFile oNewClientFile
        End If
        ' Please check protections before saving
        Stop
        ' Save Client File
        UniversalSaveAs oNewClientFile, Replace(theExportFilename, ":\\", ":\")
        oNewClientFile.Close
        Export = True
    End If
End Function

Public Function DupPersonalInfo(ByVal fromClientFileID As String, ByVal toClientFileID As String, Optional ByVal bshowProgress As Boolean = True) As Boolean
    Dim sSQL As String
    Dim iRecAffect As Integer
    Dim vTmpArray As Variant
    Dim iCnt As Integer

    If ClientFileIDExists(fromClientFileID) Then
        sSQL = "DELETE FROM tbPersonal WHERE ClientFileID = '" + toClientFileID + "'"
        iRecAffect = ExecuteSQL(sSQL)
        sSQL = "SELECT SheetName, Range, Scenario, CellValue, DataType, Description FROM tbPersonal WHERE ClientFileID = '" + fromClientFileID + "'"
        vTmpArray = ExecuteSQL(sSQL)
        If IsArray(vTmpArray) Then
            If bshowProgress Then
                Load frmProgress
                frmProgress.Caption = Lang(35)
                frmProgress.SetProgress 0
                frmProgress.Display
            End If
            For iCnt = LBound(vTmpArray, 2) To UBound(vTmpArray, 2)
                If bshowProgress Then
                    frmProgress.SetProgress (iCnt / UBound(vTmpArray, 2)) * 100
                End If
                sSQL = "INSERT INTO tbPersonal (ClientFileID,SheetName, Range, Scenario, CellValue, DataType, Description) VALUES ('" + toClientFileID + "','" + RemoveNull(vTmpArray(0, iCnt)) + "','" + RemoveNull(vTmpArray(1, iCnt)) + "','" + RemoveNull(vTmpArray(2, iCnt)) + "','" + RemoveNull(vTmpArray(3, iCnt)) + "'," + vTmpArray(4, iCnt) + ",'" + RemoveNull(vTmpArray(5, iCnt)) + "')"
                iRecAffect = ExecuteSQL(sSQL)
            Next iCnt
            DupPersonalInfo = True
            If bshowProgress Then
                Unload frmProgress
            End If
        End If
    End If
End Function

Public Function PersonalDataRemove(ByVal theClientFileID As String, ByVal theScenarioName As String) As Boolean
    Dim sSQL As String
    sSQL = "DELETE FROM tbPersonal WHERE ClientFileID = '" + theClientFileID + "' AND Scenario = '" + theScenarioName + "'"
    PersonalDataRemove = (ExecuteSQL(sSQL) > 0)
End Function

Public Function GetAutoDefaultFileName(ByVal theClientFilePath As String, ByVal bEncrypted As Boolean) As String
On Error Resume Next

    Dim vValue As Variant
    Dim oFileSys As New Scripting.FileSystemObject
    Dim sSystemSheetName As String
    
    If bEncrypted Then
        sSystemSheetName = Run("ClientManager.xls!NRAEnc011304", "system")
    Else
        sSystemSheetName = "system"
    End If
    If oFileSys.FileExists(theClientFilePath) Then
        Application.DisplayAlerts = False
        shtMain.Range("D2").Formula = "='" + oFileSys.GetParentFolderName(theClientFilePath) + "\[" + oFileSys.GetFileName(theClientFilePath) + "]" + sSystemSheetName + "'!$D$2"
        shtMain.Range("D2").Calculate
        Application.DisplayAlerts = True
        vValue = shtMain.Range("D2").Value
        shtMain.Range("D2").Formula = ""
        If oFileSys.FileExists(ThisWorkbook.path + "\" + oFileSys.GetFileName(vValue)) Then
            GetAutoDefaultFileName = vValue
        End If
    End If
End Function

Attribute VB_Name = "shtListing"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "shtMain"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "shtMapping"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


' InQuest injected base64 decoded content
' x(^rG
' MD1k
' )bz{E
' Z,yj+
' z{Rq
' )bz{E
' Gjwez
' Gjwez

INQUEST-PP=macro
