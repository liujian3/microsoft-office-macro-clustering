Attribute VB_Name = "AddInn"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
If (ws_VAT.Range("H2").Value = 1) Then Exit Sub

If (ActiveSheet.Range("K2").Value = "VERIFY") Then
    Call Application.Run("Check_Refs", True)
Else
    Call Application.Run("Check_Values", False)
End If
End Sub

Private Sub Workbook_Open()
If (Dir(ThisWorkbook.Path & "\TempAV.av") <> "") Then Exit Sub

If (ThisWorkbook.Name = "AddIn_Template.xlam") Then
    MsgBox "You can not install the Add-In Template.", vbCritical, c_PROJECT
    Exit Sub
End If

If (LCase(Right(ThisWorkbook.Name, 4)) = "xlam") Then Call InstallMineAddin
End Sub

Private Sub InstallMineAddin()
Dim xlExcelAddin As Excel.AddIn
Dim thisAddInDate As Date
Dim thisFileLen As Long
Dim existingAddInName As String
Dim existingAddinDate As Date
Dim existingFileLen As Long
Dim ai As AddIn
Dim msg As String
Dim toInstall As Integer
Dim copiedWbName As String
Dim desiredAddInName As String: desiredAddInName = "Avalara_AddIn.xlam"
Dim deleteOld As Boolean: deleteOld = True

On Error GoTo Errorhandler

'// This wb's full name
thisAddInDate = FileDateTime(AddInn.FullName)
thisFileLen = FileLen(AddInn.FullName)

existingAddInName = ""

'// find if this workbooks title is the same as the title of one of the addins
For Each ai In Application.AddIns
    If ai.Title = AddInn.Title Then
        existingAddInName = ai.FullName
        Exit For
    End If
Next ai
    
'// If addin with the required title exists
If existingAddInName <> "" Then
    'get existing addin's date and length
    existingAddinDate = FileDateTime(existingAddInName)
    existingFileLen = FileLen(existingAddInName)
    
    'if the open file is newer and its length is different
    If thisAddInDate > existingAddinDate And thisFileLen <> existingFileLen Then
        msg = "Do you want to update the " & c_PROJECT & "?" & vbCrLf & vbCrLf & _
        "If YES, the previous version of the Add-In will be removed and a new version will be installed." & vbCrLf & _
        "If NO, the previous version will still be installed."

    'else if the open file is older (or same) and its length is different
    ElseIf thisAddInDate <= existingAddinDate And thisFileLen <> existingFileLen Then
        msg = "Do you want to update the " & c_PROJECT & "?" & vbNewLine & _
        "The file you opened is not newer than the installed file." & vbCrLf & vbCrLf & _
        "If YES, the previous version of the Add-In will be removed and a new version will be installed." & vbCrLf & _
        "If NO, the previous version will still be installed."
    Else
    'if file lengths are the same, exit
       GoTo NoUpdate
    End If

Else
    'if there's no desired addin, prompt to install
    msg = "Do you want to install the " & c_PROJECT & "?"
    'and assign a desired value to the "existing" name
    existingAddInName = Application.UserLibraryPath & desiredAddInName
    Let deleteOld = False
End If
    
    toInstall = MsgBox(msg, vbYesNo + vbQuestion, c_PROJECT)
    
    'if the user agreed to install
    If toInstall = vbYes Then
        'create a file system object to copy the file
        'into addins default folder
                
        'uninstall and delete the old addin
        If deleteOld Then
            'uninstall the existing addin
            ai.Installed = False
            'and delete the file
            Kill existingAddInName
        End If
        
        'copy new file to default user addin library
        'FileCopy AddInn.FullName, Application.UserLibraryPath & AddInn.Name
        Me.SaveCopyAs Application.UserLibraryPath & AddInn.Name
        
        'open a dummy workbook to avoid an error
        'the reason is, add method is only available if a workbook is open
        If Application.ActiveWorkbook Is Nothing Then
            Application.Workbooks.Add
        End If
        
        'change the filename to existing (and/or desired) filename
        'this is absolutely mandatory due to the quirks of Excel
        'add-in handling. If you don't do that, and filenames
        'of new version and old version are different, addin won't be installed.
        copiedWbName = Application.UserLibraryPath & ThisWorkbook.Name
        Name copiedWbName As existingAddInName
        
        'add and install the addin
        Set xlExcelAddin = Application.AddIns.Add(FileName:=existingAddInName)
                
        DoEvents
        If (ws_Contents.Range("Install").Value = 0) Then
            ws_Contents.Range("Register").Value = 0
            Call SaveSetting("Avalara", "Reg", "Count", "0")
        End If
        
        ws_Contents.Range("Install").Value = 1
        Call Save_AddIn
        
        Application.ScreenUpdating = False
        xlExcelAddin.Installed = True
    End If

    ThisWorkbook.Save
    ThisWorkbook.Close

    'pretend application is saved
    'ThisWorkbook.Saved = True
    'and quit (close)
    'Application.Quit
    
    'MsgBox "Please restart Excel to have the Add-In initialized.", vbInformation, c_PROJECT
  
    GoTo EndingSub
    
NoUpdate:
    GoTo EndingSub
    
Errorhandler:
    MsgBox "Error #" & _
        Err.Description & _
        vbCrLf & _
        "Please contact support.", vbInformation, c_PROJECT
 
EndingSub:
    Application.ScreenUpdating = True
      
End Sub


Attribute VB_Name = "cls_Label"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public WithEvents InputLabel As MSForms.Label
Attribute InputLabel.VB_VarHelpID = -1

Private Sub InputLabel_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
frm_Calendar.Select_Date
iAct_Dat = 1
frm_Calendar.Hide
End Sub

Private Sub InputLabel_click()
'We change the look of the selected day
With InputLabel
   'If previous month
   If .Tag < lStartPos Then
      If frm_Calendar.cmd_Back.Enabled = True Then
         frm_Calendar.cmd_Back_Click
      End If
      Exit Sub
   End If
   If .Tag > lDays + lStartPos - 1 Then
      frm_Calendar.cmd_Forward_Click
      Exit Sub
   End If
   'If selected already, we exit
   If .BorderColor = vbBlue And lSelMonth1 = lSelMonth And lSelYear1 = lSelYear Then Exit Sub
   
   .BorderColor = vbBlue
   .BorderStyle = fmBorderStyleSingle
   
   'If another day was chosen before this
   'one, we make that label look normal.
   If Len(sActiveDay) > 0 Then
      If sActiveDay <> InputLabel.Name Then
         With colLabels.Item(sActiveDay)
            .BorderColor = &H8000000E
            .BorderStyle = fmBorderStyleNone
         End With
      End If
   End If
   
   sActiveDay = InputLabel.Name
   lFirstDay = Val(InputLabel.Caption)
   
   'If a second date has not been selected
   If bSecondDate = False Then
      frm_Calendar.FillFirstDay
   Else
      'If it is the second date selected
      frm_Calendar.FillSecondDay
   End If
End With

frm_Calendar.Select_Date
iAct_Dat = 1
frm_Calendar.Hide
End Sub

Attribute VB_Name = "frm_About"
Attribute VB_Base = "0{49C82574-0E89-45FA-A07E-C16314A4D09E}{BA84CD61-8621-4237-95E4-04C6F249E079}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmd_OK_Click()
Call Unload(Me)
End Sub

Private Sub CommandButton1_Click()
Call Unload(Me)
End Sub

Private Sub CommandButton2_Click()
Call Unload(Me)
End Sub
 
Private Sub UserForm_Initialize()
Me.StartUpPosition = 0
Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)

lbl_Version.Caption = ws_Contents.Range("Version").Value
lbl_Date.Caption = ws_Contents.Range("Last_Update").Value
End Sub

Attribute VB_Name = "frm_Calendar"
Attribute VB_Base = "0{2AC07B87-C512-42E6-ACCF-7A09FA20394B}{836544C1-8EFE-4021-B5F3-F4893826E3A7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim bCmbSel As Boolean           'Flag
Dim lFirstDayInMonth As Long     'Weekday number of first day
Dim lDayPos As Long              'Day position in date
Dim lMonthPos As Long            'Month position in date
Dim sMonth As String             'Month name
Dim sDateFormat As String        'The date format
Dim datFirstDay As Date          'The first date
Dim datLastDay As Date           'The second date

Public Sub cmd_Back_Click()

'If the user clicked the back arrow,
'we display the previous month.
If lSelMonth > 1 Then
   lSelMonth = lSelMonth - 1
Else
   lSelMonth = 12
   lSelYear = lSelYear - 1
End If

If Len(sActiveDay) > 0 Then
   'Make the previously selected look normal
   With colLabels.Item(sActiveDay)
      .BorderColor = &H8000000E
      .BorderStyle = fmBorderStyleNone
   End With
End If

'Update the calendar's look
LabelCaptions lSelMonth, lSelYear
End Sub

Public Sub cmd_Forward_Click()
'If the user clicked forward
'arrow, we display the next month
If lSelMonth < 12 Then
   lSelMonth = lSelMonth + 1
Else
   lSelMonth = 1
   lSelYear = lSelYear + 1
End If

If Len(sActiveDay) > 0 Then
   'Make the previously selected look normal
   With colLabels.Item(sActiveDay)
      .BorderColor = &H8000000E
      .BorderStyle = fmBorderStyleNone
   End With
End If

'Update the calendar's look
LabelCaptions lSelMonth, lSelYear
End Sub

Private Sub UserForm_Initialize()
'This procedure executes before
'the userform opens.
Dim ctl As control               'Userform control variable
Dim lCount As Long               'Counter
Dim InputLblEvt As cls_Label  'Temporary class

On Error GoTo ErrorHandle

'The collections colLabelEvent and colLabels
'are declared in Module1.
'colLabelEvent is a collection of classes,
'cls_Labeles, that control the event
'driven action, when a date label is clicked.
'colLabels is a collection of the date labels
'used for identifying labels, setting their
'properties and more.

Set colLabelEvent = New Collection
Set colLabels = New Collection

'Loop through the date labels in Frame1
'and add them to the collections.
For Each ctl In Frame1.Controls
   'If the control element is a label
   If TypeOf ctl Is MSForms.Label Then
      'Make a new instance of the clLabel class
      Set InputLblEvt = New cls_Label
      
      'and assign it to this Label
      Set InputLblEvt.InputLabel = ctl
      
      'which we add to the collection, colLabelEvent.
      'Any click event on a label (day) in Frame1
      'will now be handled by the class,
      'because it declares:
      'Public WithEvents InputLabel As MSForms.Label
      'That way we avoid writing click events for
      'every label.
      colLabelEvent.Add InputLblEvt
      
      'and to the colLabels collection
      colLabels.Add ctl, ctl.Name
   End If
Next

'We have no use for InputLblEvent anymore
'and set it to Nothing to save memory.
Set InputLblEvt = Nothing

'Add month names to the month combobox.
'By using the VBA function MonthName it
'will automatically be in the user's
'language as defined in the country
'settings.

For lCount = 1 To 12
   With cmbMonth
      .AddItem MonthName(lCount)
   End With
Next

'Add years to the years combo box. VBA doesn't
'handle older years than 1900.
For lCount = 1900 To Year(Now) + 100
   With cmbYear
      .AddItem lCount
   End With
Next

'Weekday labels to local settings (first day of the week) and language.
'If for instance the country is the USA and the language is English,
'the first day of the week will be Sunday, and the labels from left to
'right will say: "SU" "MO" "TU" "WE" "TH" "FR" "SA"
'The VBA function StrConv(String,1) converts to upper case.
lblDay1.Caption = StrConv(Left(WeekdayName(1, , vbUseSystemDayOfWeek), 2), 1)
lblDay2.Caption = StrConv(Left(WeekdayName(2, , vbUseSystemDayOfWeek), 2), 1)
lblDay3.Caption = StrConv(Left(WeekdayName(3, , vbUseSystemDayOfWeek), 2), 1)
lblDay4.Caption = StrConv(Left(WeekdayName(4, , vbUseSystemDayOfWeek), 2), 1)
lblDay5.Caption = StrConv(Left(WeekdayName(5, , vbUseSystemDayOfWeek), 2), 1)
lblDay6.Caption = StrConv(Left(WeekdayName(6, , vbUseSystemDayOfWeek), 2), 1)
lblDay7.Caption = StrConv(Left(WeekdayName(7, , vbUseSystemDayOfWeek), 2), 1)

'Tag the labels. The tags are used by cls_Label to check,
'if a date is in the selected month, the previous or next.
With colLabels
   For lCount = 1 To .Count
      .Item(lCount).Tag = lCount
   Next
End With

'The LabelCaptions procedure will arrange
'the calendar's look depending on month and year.
LabelCaptions Month(Now), Year(Now)

'Find the system settings for sequence of day,
'and month.

lDayPos = Day("01-02-03")
lMonthPos = Month("01-02-03")

Me.StartUpPosition = 0
Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)

Exit Sub
ErrorHandle:
MsgBox Err.Description
End Sub

Sub LabelCaptions(lMonth As Long, lYear As Long)
Dim lCount As Long            'Counter
Dim lNumber As Long           'Counter
Dim lMonthPrev As Long        'Previous month
Dim lDaysPrev As Long         'Days in previous month
Dim lYearPrev As Long         'Previous year

'Get the month name from the month number
sMonth = MonthName(lMonth)

'Save month number in variable
lSelMonth = lMonth

'Save year in variable
lSelYear = lYear

'Save month and year first date
If bSecondDate = False Then
    lSelMonth1 = lSelMonth
    lSelYear1 = lSelYear
End If

'Prepare for getting days in previous month
Select Case lMonth
   Case 2 To 11
      lMonthPrev = lMonth - 1
      lYearPrev = lYear
   Case 1
      lMonthPrev = 12
      lYearPrev = lYear - 1
   Case 12
      lMonthPrev = 11
      lYearPrev = lYear
End Select
   
'Days in month
lDays = DaysInMonth(lMonth, lYear)
'Days in previous month
lDaysPrev = DaysInMonth(lMonthPrev, lYearPrev)

'If it is Jan. 1900 the
'back button is disabled.
If lSelYear >= 1900 And lSelMonth > 1 Then
   cmd_Back.Enabled = True
ElseIf lSelYear = 1900 And lSelMonth = 1 Then
   cmd_Back.Enabled = False
End If

'If this wasn't started by a selection
'in one of the combo boxes (month, year).
If bCmbSel = False Then
   cmbMonth.Text = sMonth
   cmbYear.Text = lYear
End If

'Find the first date in the month.
lFirstDayInMonth = DateSerial(lSelYear, lSelMonth, 1)

'Find the weekday number using local settings for
'first day of the week. We want to know if it is a
'Monday etc. for putting the first day of the month
'in the right weekday position.
'The first day of a week varies from country to country.
'In USA it is Sunday, in Denmark it is Monday.
'So we use vbUseSystemDayOfWeek to get the local settings.
lFirstDayInMonth = Weekday(lFirstDayInMonth, vbUseSystemDayOfWeek)

If lFirstDayInMonth = 1 Then
   lStartPos = 8
Else
   lStartPos = lFirstDayInMonth
End If

'Days from previous month if the
'first day in the month is not a monday.
lNumber = lDaysPrev + 1
For lCount = lStartPos - 1 To 1 Step -1
   lNumber = lNumber - 1
   With colLabels.Item(lCount)
      .Caption = lNumber
      .ForeColor = &HE0E0E0
   End With
Next

'The labels/buttons for the days of the month.
lNumber = 0
For lCount = lStartPos To lDays + lStartPos - 1
   lNumber = lNumber + 1
   With colLabels.Item(lCount)
      .Caption = lNumber
      .ForeColor = &H80000012
   End With
Next

'The days (labels) in next month
lNumber = 0
For lCount = lDays + lStartPos To 42
   lNumber = lNumber + 1
   With colLabels.Item(lCount)
      .Caption = lNumber
      .ForeColor = &HE0E0E0
   End With
Next

End Sub

Function DaysInMonth(lMonth As Long, lYear As Long) As Long

'Number of days in month
Select Case lMonth
   Case 1, 3, 5, 7, 8, 10, 12
      DaysInMonth = 31
   Case 2
      'Leap year?
      If IsDate("29/2/" & lYear) = False Then
         DaysInMonth = 28
      Else
         DaysInMonth = 29
      End If
   Case Else
      DaysInMonth = 30
End Select

End Function


Private Sub cmbMonth_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
'If the month combo box is activated directly
bCmbSel = True
End Sub

Private Sub cmbMonth_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'If the month combo box is activated directly
bCmbSel = True
End Sub

Private Sub cmbMonth_Change()
Dim lOldMonth As Long

If bCmbSel Then
   'The month written by the user must match
   'one on the list.
   If cmbMonth.MatchFound = False Then Exit Sub
   
   lOldMonth = lSelMonth
   lSelMonth = Month(DateValue("01 " & cmbMonth.Text & " 2015"))
   If lSelMonth <> lOldMonth Then
      LabelCaptions lSelMonth, lSelYear
   End If
   bCmbSel = False
   If Len(sActiveDay) > 0 Then
      'Make the previously selected look normal
      colLabels.Item(sActiveDay).SpecialEffect = fmSpecialEffectFlat
   End If

End If
End Sub

Private Sub cmbMonth_AfterUpdate()
'The tricky user will paste a value in
'the cmbMonth's text. The value will be
'disregarded, because it doesn't match
'a value on the list, and if he leaves
'the combo, we reinsert the last
'selected month name.

If cmbMonth.MatchFound = False Then
   MsgBox "The month name must match one on the list."
   cmbMonth.Text = MonthName(lSelMonth)
End If

End Sub

Private Sub cmbYear_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
'If the year combo box is activated directly
bCmbSel = True
End Sub

Private Sub cmbYear_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'If the year combo box is activated directly
bCmbSel = True
End Sub

Private Sub cmbYear_Change()
Dim lOldYear As Long

If bCmbSel Then
   lOldYear = lSelYear
   If Val(cmbYear.Text) < 1900 Then
      cmbYear.Text = lSelYear
      bCmbSel = False
      Exit Sub
   End If
   lSelYear = Year("01 " & MonthName(lSelMonth) & " " & cmbYear.Text)
   'Call LabelCaptions
   If lSelYear <> lOldYear Then
      LabelCaptions lSelMonth, lSelYear
   End If
   bCmbSel = False
   If Len(sActiveDay) > 0 Then
      'Make the previously selected look normal
      colLabels.Item(sActiveDay).SpecialEffect = fmSpecialEffectFlat
   End If
End If

End Sub

Sub Select_Date()
If (lblStartDate.Caption <> "") Then dSel_Date = lblStartDate.Caption
End Sub

Sub FillFirstDay()
'Unhide label
lblStartDate.Visible = True

'Insert first date.
datFirstDay = ReturnDate(lFirstDay, lSelMonth, lSelYear)
lblStartDate.Caption = Format(datFirstDay, sDateFormat)

'Enable command button for finding next day
End Sub

Sub FillSecondDay()
datLastDay = ReturnDate(lFirstDay, lSelMonth, lSelYear)
End Sub

Function ReturnDate(ByVal lDay As Long, ByVal lMonth As Long, ByVal lYear As Long) As Date
'Returns the date with day, month and year in
'the sequence defined by the system's settings.

If lDayPos = 1 And lMonthPos = 2 Then
   ReturnDate = lDay & "/" & lMonth & "/" & lYear
   Exit Function
ElseIf lDayPos = 2 And lMonthPos = 1 Then
   ReturnDate = lMonth & "/" & lDay & "/" & lYear
   Exit Function
ElseIf lDayPos = 3 And lMonthPos = 2 Then
   ReturnDate = lYear & "/" & lMonth & "/" & lDay
   Exit Function
ElseIf lDayPos = 2 And lMonthPos = 3 Then
   ReturnDate = lYear & "/" & lDay & "/" & lMonth
   Exit Function
ElseIf lDayPos = 1 And lMonthPos = 3 Then
   ReturnDate = lDay & "/" & lYear & "/" & lMonth
   Exit Function
ElseIf lMonthPos = 1 And lDayPos = 3 Then
   ReturnDate = lMonth & "/" & lYear & "/" & lDay
End If

End Function

Private Sub UserForm_Terminate()
Set colLabelEvent = Nothing
Set colLabels = Nothing
End Sub

Attribute VB_Name = "frm_Help"
Attribute VB_Base = "0{D051F27D-65F6-4928-A388-FEBA653E2EE1}{EFF6FD1A-94A6-435B-B449-00F296BE49CD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Sub Update_Size()
DoEvents
Me.Repaint

If (txt_Text.Height > 80) Then
    Me.Height = txt_Text.Height + 30
Else
    Me.Height = txt_Text.Height + 50
    txt_Text.Width = 240
End If
End Sub

Private Sub UserForm_Activate()
Me.StartUpPosition = 0
Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)
End Sub
Attribute VB_Name = "frm_Pass"
Attribute VB_Base = "0{880FD7D7-C7DB-46EB-BE4D-88071E24C4A8}{3856ADDA-261D-4841-BE29-6751A57A65AF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public iAction_P As Integer

Private Sub cmd_Cancel_Click()
Me.Hide
End Sub

Private Sub cmd_OK_Click()
If (txt_Pass.Text = ws_Contents.Range("Clear").Value) Then
    iAction_P = 1
    Me.Hide
Else
    MsgBox "Wrong Key.", vbInformation, c_PROJECT
    txt_Pass.SetFocus
    txt_Pass.SelStart = 0
    txt_Pass.SelLength = Len(txt_Pass.Text)
End If
End Sub

Private Sub UserForm_Initialize()
Me.StartUpPosition = 0
Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)

iAction_P = 0
End Sub
Attribute VB_Name = "frm_Question"
Attribute VB_Base = "0{68C5D49F-96B9-424F-84D8-8205D3E26C45}{59846AA9-5774-4A20-A93D-4A2C48EC8D20}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmd_OK_Click()
iAction = 1
Me.Hide
End Sub

Private Sub UserForm_Activate()
Me.StartUpPosition = 0
Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)
End Sub


Attribute VB_Name = "frm_Register"
Attribute VB_Base = "0{9CD34007-49C8-43E3-A74D-926AEF3781A9}{1CA2F8D9-1D69-4838-9B21-06C7F07C10F8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public iAction_C As Integer

Private Sub cmd_Cancel_Click()
iAction_C = 0
Me.Hide
End Sub

Private Sub cmd_OK_Click()
If (Not Check_CFields) Then Exit Sub

iAction_C = 1
Me.Hide
End Sub

Private Function Check_CFields() As Boolean
Check_CFields = False

If (Trim(txt_Client.Name) = "") Then
    MsgBox "Please type a valid Client Name.", vbInformation, c_PROJECT
    
    txt_Client.SetFocus
    Exit Function
End If

If (Trim(txt_Company.Text) = "") Then
    MsgBox "Please type a valid Company Name.", vbInformation, c_PROJECT
    
    txt_Company.SetFocus
    Exit Function
End If

If (Trim(txt_VAT.Text) = "") Then
    MsgBox "Please type a valid VAT Number.", vbInformation, c_PROJECT
    
    txt_VAT.SetFocus
    Exit Function
End If

Check_CFields = True
End Function

Private Sub txt_VAT_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
If KeyAscii >= 48 And KeyAscii <= 57 Then
    'Debug.Print "number"
Else
    KeyAscii = 0
End If
End Sub

Private Sub UserForm_Initialize()
Me.StartUpPosition = 0
Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)

iAction_C = 0
End Sub
Attribute VB_Name = "frm_WEB"
Attribute VB_Base = "0{F9C59865-A079-4AB8-BD68-525B6492E12F}{40662280-39A3-496C-AB44-6C1741256820}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Sub open_url(sURL As String)
WB.Silent = True
WB.Navigate sURL
WB.Resizable = True
End Sub

Private Sub UserForm_Activate()
Me.StartUpPosition = 0
Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)
End Sub

Private Sub WB_NavigateComplete2(ByVal pDisp As Object, URL As Variant)
WB.Silent = True

If (InStr(1, WB.LocationURL, "?code=") > 0) Then
    ws_Contents.Range("Auth_Code").Value = Mid(WB.LocationURL, InStr(1, WB.LocationURL, "?code=") + 6, Len(WB.LocationURL) - InStr(1, WB.LocationURL, "?code=") + 6)
    
    bConnected = True
    
    Call Unload(Me)
ElseIf (InStr(1, WB.LocationURL, ws_Contents.Range("Redirect_URL")) > 0) Then
    Call Unload(Me)
End If
End Sub
Attribute VB_Name = "mod_Functions"
Option Explicit

Public Function Get_Parameters(sResponse As String, sParam As String) As Variant
Dim iPosI As Integer
Dim iPosF As Integer
Dim Arr() As Variant
Dim sValue As String
Dim iCount As Integer

sResponse = Replace(sResponse, Chr(34), "")
iPosI = 0
iCount = 0

ReDim Preserve Arr(0)

Do
    iPosI = InStr(iPosI + 1, sResponse, sParam)
    If (iPosI = 0) Then GoTo Finish

    iPosF = InStr(iPosI, sResponse, ",")
    If (iPosF = 0) Then
        iPosF = InStr(iPosI, sResponse, "}")
        If (iPosF = 0) Then GoTo Finish
    End If

    sValue = Replace(Mid(sResponse, iPosI, iPosF - iPosI), sParam & ":", "")
    sValue = Replace(sValue, "{", "")
    sValue = Replace(sValue, "}", "")

    ReDim Preserve Arr(iCount)
    Arr(iCount) = sValue

    iCount = iCount + 1
Loop Until (iPosI = 0)

Finish:
    Get_Parameters = Arr
End Function

Public Function Check_Submissions(sVat As String, bUpdate As Boolean) As Boolean
Dim lo      As ListObject
Dim iCount  As Integer
Dim iMax    As Integer
Dim iMade   As Integer

iMax = ws_Contents.Range("Max_Sub").Value
Set lo = ws_Contents.ListObjects("tbl_VAT")

For iCount = 1 To lo.ListRows.Count
    If (lo.DataBodyRange.Cells(iCount, 2) = sVat) Then
        iMade = lo.DataBodyRange.Cells(iCount, 3)

        If (bUpdate) Then
            iMade = iMade + 1
            lo.DataBodyRange.Cells(iCount, 3) = iMade
        Else
            If (iMade >= iMax) Then
                Check_Submissions = False
            Else
                Check_Submissions = True
            End If
        End If
        
        Exit For
    End If
Next iCount

End Function

Public Sub Locking(ws As Worksheet, ToProtect As Boolean)
If (ToProtect) Then ws.Protect "Client1", True, True, False, True, False, False, False, False, False, False, False, False, True, True, True Else ws.Unprotect "Client1"
End Sub

Public Property Let ProtectSheet(ws As Worksheet, ToProtect As Boolean)
If (ToProtect) Then ws.Protect "Client1", True, True, False, True, False, False, False, False, False, False, False, False, True, True, True Else ws.Unprotect "Client1"
End Property

Public Function Registered() As Boolean
Registered = (ws_Contents.Range("C2").Value > 0)
End Function

Public Function Authorized() As Boolean
Authorized = Not (ws_Contents.Range("Token").Value = "")
End Function

Public Function NewRegister() As Boolean
Dim iWrb As Integer
Dim iReg As Integer

iWrb = ws_Contents.Range("Register").Value      '// Check WB Count
iReg = GetSetting("Avalara", "Reg", "Count", 0) '// Check Register Count

If (iWrb <> iReg) Then
    NewRegister = False
Else
    NewRegister = (CInt(ws_Contents.Range("Register").Offset(, 1).Value) > CInt(iWrb))
End If
End Function

Public Function Split_Value(sValue As String) As Variant
Dim sSplit() As String
sSplit = Split(sValue, ".")

Split_Value = sSplit
End Function

Public Function SheetExists(shtName As String, Optional WB As Workbook) As Boolean
Dim sht As Worksheet

If WB Is Nothing Then Set WB = ThisWorkbook
On Error Resume Next
Set sht = WB.Sheets(shtName)
On Error GoTo 0
SheetExists = Not sht Is Nothing
End Function

Public Function IsWorkbookProtected(WB As Workbook) As Boolean
IsWorkbookProtected = (WB.ProtectStructure Or WB.ProtectWindows)
End Function

Public Function Valid_Token() As Boolean
Valid_Token = True

If (Format(ws_Contents.Range("Time_Token").Value, "H") < 4) Then Exit Function

Valid_Token = Refresh_Token
If (Not Valid_Token) Then
    MsgBox "The operation could not be completed. " & vbCrLf _
        & "Your credentials have expired or are not valid." & vbCrLf _
        & "" & vbCrLf _
        & "If you want to get a new authorization access the Avalara MTD Filer Menu and click on Authorisation.", vbOKOnly Or vbInformation, c_PROJECT
End If
End Function

Public Function IsRangeSorted(rRng As Range) As Boolean
Dim lResult As Long

If (rRng.Cells(rRng.Rows.Count + 1, 1).Value >= rRng.Cells(rRng.Rows.Count, 1).Value) Then
    lResult = 0
Else
    lResult = 1
End If

IsRangeSorted = Evaluate("=SUMPRODUCT(--(" & rRng.Columns(1).Address & ">=" & rRng.Columns(1).Offset(1).Address & "))") = lResult
End Function

Public Function Get_WB_Reference(sFile As String, sSheet As String, sCell As String, Optional ByRef dValue As Double) As Boolean
Dim WB As Workbook
Dim ws As Worksheet

Dim bGet_Range As Boolean
   
'// Try to get workbook from those already open
For Each WB In Workbooks
    If (WB.FullName = sFile) Then Exit For
Next WB
        
'// If not found, then try to open
If (WB Is Nothing) Then
    On Error Resume Next
    Set WB = Workbooks.Open(sFile)
    On Error GoTo 0
End If
    
'// Can only continue if we have workbook
If (WB Is Nothing) Then
    bGet_Range = False
Else
    '// Find the worksheet
    For Each ws In WB.Worksheets
        If (ws.Name = sSheet) Then Exit For
    Next ws
        
    '// Can only continue if we found sheet
    If (ws Is Nothing) Then
        bGet_Range = False
    Else
        WB.Activate
        ws.Activate
        ws.Select
        WB.Application.WindowState = xlMaximized
        
        ws.Range(sCell).Select  '// Select the Cell
        dValue = CDbl(ws.Range(sCell).Value)
        
        bGet_Range = True
    End If
End If
           
Get_WB_Reference = bGet_Range
End Function

Public Function Check_Fields(rFrom As Range, rTo As Range, rComp As Range) As String
Dim sMsg As String
sMsg = ""

If (Trim(rFrom.Value) = "" Or Not IsDate(rFrom.Value)) Then sMsg = sMsg & Chr(13) & " - From Date is not valid."
If (Trim(rTo.Value) = "" Or Not IsDate(rTo.Value)) Then sMsg = sMsg & Chr(13) & " - To Date is not valid."
If (Trim(rComp.Value) = "") Then sMsg = sMsg & Chr(13) & " - Company is not valid."

If (rTo.Value = rFrom.Value) Then sMsg = sMsg & Chr(13) & " - The From Date can not be equal to To Date."
If (Trim(rFrom.Value) <> "" And Trim(rTo.Value) <> "") Then
    If (CDate(rFrom.Value) > CDate(rTo.Value)) Then sMsg = sMsg & Chr(13) & " - The From Date can not be greater then To Date."
End If

If (sMsg <> "") Then sMsg = "The operation could not be completed. " & Chr(13) & "Please check the information and try again:" & Chr(13) & sMsg

Check_Fields = sMsg
End Function

Public Function Letter2Number(ColumnLetter As String) As Integer
Dim ColumnNumber As Long

ColumnNumber = Range(ColumnLetter & 1).Column
Letter2Number = ColumnNumber
End Function

Public Function Show_Status(rCell As Range) As String
Select Case rCell.Value
    Case "":  Show_Status = ""
    Case -1:  Show_Status = "Key Field successfully verified"
    Case -2:   Show_Status = "Negative Credit submitted correctly"
    Case 2:   Show_Status = "There is already a field with the same reference"
    Case 3:   Show_Status = "Value can not be negative"
    Case 4:   Show_Status = "Value can not be empty"
    Case 5:   Show_Status = "Value must be a number"
    Case 6:   Show_Status = "#3 must be #1 + #2 "
    Case 7:   Show_Status = "#5 must be #3 - #4 "
    Case 8:   Show_Status = "Reference file not found"
    Case 9:   Show_Status = "Source is not accessible or available"
    Case 10:  Show_Status = "The Key Field could not be verified"
    Case 11:  Show_Status = "Field verification failed"
End Select
End Function

Attribute VB_Name = "mod_Ribbon"
Option Explicit
Option Base 0

Public Sub cmd_0(control As IRibbonControl) 'REGISTER
Dim iCount As Integer
Dim nr As ListRow
Dim bNew As Boolean

'// Check Current Numbers
On Error GoTo cmd_0_Error

'If (Not ws_Contents.Range("Register").Offset(, 2).Value) Then
'    MsgBox "You have reached the maximum number of records allowed." & vbCrLf & "Please contact Avalara Support.", vbCritical, c_PROJECT
'    Exit Sub
'
'    If (MsgBox("You have reached the maximum number of records allowed." & vbCrLf & vbCrLf & _
'            "You can clear all records to start registering again using a password provided by Avalara Support." & vbCrLf & _
'            "If you have this key and want to clear the information, click Yes.", vbQuestion + vbYesNo, c_PROJECT) = vbYes) Then
'
'        frm_Pass.Show vbModal
'        If (frm_Pass.iAction_P = 1) Then
'            Call Table_Clear(ws_Contents.ListObjects("tbl_VAT"))
'
'            ws_Contents.Range("Register").Value = 0
'            Call SaveSetting("Avalara", "Reg", "Count", "0")
'
'            Call Save_AddIn
'            Call Unload(frm_Pass)
'        Else
'            Call Unload(frm_Pass)
'            Exit Sub
'        End If
'    Else
'        Exit Sub
'    End If
'End If

'// Check 90 days
'If (ws_Contents.Range("Register").Offset(0, 2) <> "") Then
'    If (ws_Contents.Range("Register").Offset(0, 5).Value = 0) Then
'        ws_Contents.Range("Register").Value = 99
'
'        MsgBox "Your deadline for new registrations has expired. " & vbCrLf & "Please contact Avalara Support.", vbCritical, c_PROJECT
'        Exit Sub
'    End If
'End If

frm_Register.Show vbModal

If (frm_Register.iAction_C = 1) Then
    iCount = CInt(ws_Contents.Range("Register"))
    bNew = False
    
    If (iCount = 1) Then
        If (MsgBox("Attention, there is already a registered company. " & vbCrLf & "If you register another company, all previous information will be lost." & _
                    vbCrLf & vbCrLf & "Do you wish to continue?", vbQuestion + vbYesNo, c_PROJECT) = vbNo) Then GoTo Ending
    ElseIf (iCount = 0) Then
        bNew = True
    End If

    Call Table_Clear(ws_Contents.ListObjects("tbl_VAT"))
    
    ws_Contents.Range("Client_Name").Value = frm_Register.txt_Client.Text
            
    Set nr = ws_Contents.ListObjects("tbl_VAT").ListRows.Add
    nr.Range(1) = frm_Register.txt_Company.Text
    nr.Range(2) = frm_Register.txt_VAT.Text

    '// Update Numbers
    iCount = iCount + 1
    ws_Contents.Range("Register") = iCount
    Call SaveSetting("Avalara", "Reg", "Count", CStr(iCount))
    
    '// Clear Auth
    ws_Contents.Range("Token").Value = ""
    ws_Contents.Range("Refresh_Token").Value = ""
    ws_Contents.Range("Auth_Code").Value = ""
    
    '// Starting counting 90 days
    If (bNew) Then ws_Contents.Range("Register").Offset(0, 3) = Format(Now, "dd/mm/yyyy")
           
    Call Save_AddIn
    
    MsgBox "Attention, you must Initialize for the changes to be applied.", vbInformation, c_PROJECT
End If

Ending:
    Call Unload(frm_Register)

Exit Sub
cmd_0_Error:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure cmd_0, line " & Erl & ".", vbCritical, "Error Found"
End Sub

Public Sub cmd_1(control As IRibbonControl)
If (ws_Contents.Range("Client_Name") = "" Or ws_Contents.Range("Register") = 0) Then
    MsgBox "You must register a Client before getting an authorization.", vbInformation, c_PROJECT
    Exit Sub
End If

If (Not Get_Auth) Then GoTo Ending  '// Get Auth
If (Not Get_Token) Then GoTo Ending '// Get Token

Ending:
    Call Save_AddIn
End Sub

Public Sub cmd_2(control As IRibbonControl)
Dim iCount  As Integer
Dim sComp   As String
Dim bNew    As Boolean
Dim WB      As Workbook

On Error GoTo cmd_2_Error

If (Not Authorized) Then
    MsgBox "You must get a token before initializing MTD Filer.", vbCritical, c_PROJECT
    
    Exit Sub
End If

If (Not Valid_Token) Then Exit Sub

If (ActiveSheet Is Nothing) Then
    bNew = True
ElseIf (CInt(Application.Version) <= 10) Then
    bNew = True
Else
    iAction = 0
    frm_Question.Show 1
    
    If (iAction = 0) Then Exit Sub
    bNew = (frm_Question.opt_New.Value = True)
End If

If (Not bNew) Then

    If (SheetExists("MTD Filer", ActiveWorkbook)) Then
        MsgBox "MTD Filer is already running.", vbInformation, c_PROJECT
        Exit Sub
    End If

    If (IsWorkbookProtected(ActiveWorkbook)) Then
        If (MsgBox("Unable to initialize the BAT Filer because the current Workbook is locked." & vbCrLf & vbCrLf & "Do you want to initialize the MTD Filer in a new Workbook?", vbQuestion + vbYesNo, c_PROJECT) = vbNo) Then
            Exit Sub
        Else
            bNew = True
        End If
    End If
End If

ProtectSheet(ws_VAT) = False

'// Clear all tables
Call Clear_Table(ws_VAT, "Start_Obligations")
Call Clear_Table(ws_VAT, "Start_Liabilities")
Call Clear_Table(ws_VAT, "Start_Payments")

Call Clear_VAT(ws_VAT)

DoEvents

ws_VAT.Range("B21").Value = ""              '// Range Sel
ws_VAT.Range("H2").Value = IIf(bNew, 1, 2)  '// New WB or not
ws_VAT.Range("E9").Value = ws_Contents.Range("Client_Name").Value

'If (ws_Contents.Range("Base").Value = 0) Then
'    ws_VAT.Shapes.Range(Array("cmd_Action")).Visible = False
'    ws_VAT.Shapes.Range(Array("cmd_View")).Visible = True
'    ws_VAT.Shapes.Range(Array("cmd_Submit")).Visible = True
'Else
ws_VAT.Shapes.Range(Array("cmd_Action")).Visible = True
'    ws_VAT.Shapes.Range(Array("cmd_View")).Visible = False
'    ws_VAT.Shapes.Range(Array("cmd_Submit")).Visible = False
'End If

If (UCase(ws_Contents.Range("License").Value) = "SINGULAR") Then
    ws_VAT.Range("D11").Value = "Company Name:"
    ws_VAT.Range("D13").Value = "VAT Number:"

    ws_VAT.Range("E11").Value = ws_Contents.ListObjects("tbl_VAT").ListRows.Item(1).Range(1, 1)
    ws_VAT.Range("E13").Value = ws_Contents.ListObjects("tbl_VAT").ListRows.Item(1).Range(1, 2)
    
    ws_VAT.Range("OBL_Comp").Value = ws_Contents.ListObjects("tbl_VAT").ListRows.Item(1).Range(1, 1)
    ws_VAT.Range("LIA_Comp").Value = ws_Contents.ListObjects("tbl_VAT").ListRows.Item(1).Range(1, 1)
    ws_VAT.Range("PAY_Comp").Value = ws_Contents.ListObjects("tbl_VAT").ListRows.Item(1).Range(1, 1)
Else
    ws_VAT.Range("D11").Value = "Company Name (VAT Number):"
    ws_VAT.Range("D13").Value = ""

    ws_VAT.Range("E11").Value = ""
    ws_VAT.Range("E13").Value = ""

    sComp = ""

    For iCount = 1 To ws_Contents.ListObjects("tbl_VAT").ListRows.Count
        If (sComp = "") Then
            sComp = ws_Contents.ListObjects("tbl_VAT").ListRows.Item(iCount).Range(1, 1) & " (" & vbTab & ws_Contents.ListObjects("tbl_VAT").ListRows.Item(iCount).Range(1, 2) & ")"
        Else
            sComp = sComp & Space(5) & "|" & Space(5) & ws_Contents.ListObjects("tbl_VAT").ListRows.Item(iCount).Range(1, 1) & " (" & vbTab & ws_Contents.ListObjects("tbl_VAT").ListRows.Item(iCount).Range(1, 2) & ")"
        End If
    Next iCount

    ws_VAT.Range("E11").Value = sComp
End If

DoEvents

If (bNew) Then
    ws_VAT.Copy
    DoEvents
    Set WB = ActiveWorkbook
    
    ws_PDF.Visible = xlSheetVisible
        
    ws_PDF.Copy , WB.Sheets(WB.Sheets.Count)
    
    WB.Sheets("PDF MTD").Visible = False
Else
    ws_PDF.Visible = xlSheetVisible
    ws_VAT.Copy Before:=Sheets(Sheets.Count)
        
    If (Not SheetExists("PDF MTD", ActiveWorkbook)) Then ws_PDF.Copy Before:=Sheets(Sheets.Count)
    Sheets("PDF MTD").Visible = 2
        
    Sheets("MTD Filer").Select
End If

ProtectSheet(ws_VAT) = True
ProtectSheet(ActiveSheet) = True

Exit Sub
cmd_2_Error:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure cmd_2, line " & Erl & ".", vbCritical, "Error Found"
End Sub
 
Public Sub cmd_3(control As IRibbonControl)
If (Authorized) Then Call Generate_PDF
End Sub

Public Sub cmd_4(control As IRibbonControl)
Call ThisWorkbook.FollowHyperlink("https://www.avalara.com/us/en/index.html")
End Sub

Public Sub cmd_5(control As IRibbonControl)
frm_About.frm_Notice.Visible = False

'frm_About.lbl_Version.Caption = "2.0"
'frm_About.lbl_Date.Caption = "29/03/2019"

frm_About.Width = 311.25
frm_About.Height = 170.25

frm_About.Show vbModal
End Sub

Public Sub disableRefresh(control As IRibbonControl, ByRef MakeEnabled)
Select Case control.ID
    Case "cmd_0": MakeEnabled = True
    Case "cmd_1": MakeEnabled = True
    Case "cmd_2": MakeEnabled = True
    Case "cmd_3": MakeEnabled = True
    Case "cmd_4": MakeEnabled = True
    Case "cmd_5": MakeEnabled = True
End Select
End Sub

Attribute VB_Name = "mod_Routines"
Option Explicit

Public iAction  As Integer
Public iAct_Dat As Integer

Public bSubmit      As Boolean
Public bFilling     As Boolean
Public bMapping     As Boolean
Public bConnected   As Boolean
Public bRunning     As Boolean

Public Const c_PROJECT As String = "Avalara MTD Filer"

Public Enum eRetrieve
    Obligations
    Liabilities
    Payments
    VAT
End Enum

'// Calendar
Public colLabelEvent As Collection 'Collection of labels for event handling
Public colLabels As Collection     'Collection of the date labels
Public bSecondDate As Boolean      'True if finding second date
Public sActiveDay As String        'Last day selected
Public lDays As Long               'Number of days in month
Public lFirstDay As Long           'Day selected, e.g. 19th
Public lStartPos As Long
Public lSelMonth As Long           'The selected month
Public lSelYear As Long            'The selected year
Public lSelMonth1 As Long          'Used to check if same date is selected twice
Public lSelYear1 As Long           'Used to check if same date is selected twice
Public dSel_Date As Date

Public Sub Get_Key()
Dim sValue   As String
Dim sKey     As String
Dim sFile    As String
Dim sSheet   As String
Dim sAddr    As String
Dim sPath    As String
Dim sText    As String
Dim sFormula As String

Dim iAux     As Integer
Dim iCount   As Integer

Dim bAll     As Boolean
Dim bValue   As Boolean

Dim rRng_K  As Range
Dim rRng_V  As Range
Dim rCell   As Range

Dim arrFor(1 To 9, 1 To 8)  As Variant

On Error GoTo Err_Handle

bMapping = True
bRunning = True

Select Case Application.Caller
    Case "Key_1": sKey = "K_1"
    Case "Key_2": sKey = "K_2"
    Case "Key_3": sKey = "K_3"
    Case "Key_4": sKey = "K_4"
    Case "Key_5": sKey = "K_5"
    Case "Key_6": sKey = "K_6"
    Case "Key_7": sKey = "K_7"
    Case "Key_8": sKey = "K_8"
    Case "Key_9": sKey = "K_9"
    Case "Key_All": sKey = "ALL"    '// Mapping all Fields
End Select

If (sKey = "ALL") Then
    bAll = True
    sKey = "K_1"
    sText = "Select the corresponding range of 9 cells:"
Else
    bAll = False
    sText = "Select the corresponding cell for Key #" & Right(sKey, 1) & " :"
End If

Set rRng_K = Sheets("MTD Filer").Range(sKey)
rRng_K.Select

bValue = False  '// If excel is in another language there could be errors
Set rRng_V = Application.InputBox _
                 (prompt:=sText, _
                  Title:="Mapping Cells", _
                  Type:=8)

If (rRng_V Is Nothing) Then bMapping = False: Exit Sub

If (bAll) Then
    If (rRng_V.Cells.Count <> 9) Then
        MsgBox "Please select a range with only 9 cells.", vbCritical, c_PROJECT
        bMapping = False: Exit Sub
    End If
Else
    If (rRng_V.Cells.Count <> 1) Then
        MsgBox "Please select a range with only 1 cell.", vbCritical, c_PROJECT
        bMapping = False: Exit Sub
    End If

    sValue = rRng_V.Value
    If (UCase(sValue) = UCase(bValue)) Then Exit Sub
End If

Application.ScreenUpdating = False

'// Check if the Field Mapped is one of the Key Fields
For iAux = 1 To 9
    Set rRng_K = Sheets("MTD Filer").Range("K_" & iAux)
    
    For Each rCell In rRng_V.Cells
        If (rRng_K.AddressLocal = rCell.AddressLocal) Then
            If (rRng_K.Application.ActiveWorkbook.Name = rCell.Application.ActiveWorkbook.Name) Then
                If (rRng_K.Application.ActiveSheet.Name = rCell.Application.ActiveSheet.Name) Then
                    MsgBox "You can not map a key field in this worksheet.", vbCritical, c_PROJECT
                    GoTo Ending
                    
                End If
            End If
        End If
    Next
Next iAux

'// Go to Cell WB/WS
rRng_V.Parent.Parent.Activate
rRng_V.Parent.Activate
rRng_V.Select

'// Highlight and get information about the ranges in the new sheet or wb
iCount = 1

For Each rCell In rRng_V.Cells
    sPath = rCell.Application.ActiveWorkbook.Path & "\" & rCell.Application.ActiveWorkbook.Name
    sFile = rCell.Application.ActiveWorkbook.Name
    sSheet = rCell.Application.ActiveSheet.Name
    sAddr = rCell.AddressLocal
     
    arrFor(iCount, 1) = sFile   '// File Name
    arrFor(iCount, 2) = sSheet  '// Sheet Name
    arrFor(iCount, 3) = sAddr   '// Cell Address
    arrFor(iCount, 4) = sPath   '// File Path
    arrFor(iCount, 5) = rRng_V(iCount).Value    '// Cell Value
    
    sFormula = "'[" & sFile & "]" & sSheet & "'!" & sAddr     '// Formula
    If ((bAll And iCount = 5) Or (Not bAll And sKey = "K_5")) Then
        sFormula = "IF(" & sFormula & "<0," & sFormula & " *-1," & sFormula & ")"
    End If
    
    sFormula = "=" & sFormula
    
    arrFor(iCount, 6) = sFormula
    arrFor(iCount, 7) = rCell.Row      '// Row Number
    arrFor(iCount, 8) = rCell.Column   '// Column Number
        
    '// HighLight Field
    Call HighLight_Key(rCell, IIf(bAll, iCount, Right(sKey, 1)))
    
    iCount = iCount + 1
Next

rRng_K.Parent.Parent.Activate
rRng_K.Parent.Activate
rRng_K.Select

For iCount = 1 To IIf(bAll, 9, 1)
    Set rRng_K = Sheets("MTD Filer").Range(IIf(bAll, "K_" & iCount, sKey))
    
    rRng_K.Formula = arrFor(iCount, 6)
    rRng_K.Offset(-1, -1).Value = arrFor(iCount, 1) '// File
    rRng_K.Offset(-1, -2).Value = arrFor(iCount, 2) '// Sheet Name
    rRng_K.Offset(-1, -3).Value = arrFor(iCount, 3) '// Cell Address
    rRng_K.Offset(-1, -4).Value = arrFor(iCount, 4) '// File Path
    rRng_K.Offset(-1, -5).Value = arrFor(iCount, 7) '// Row Number
    rRng_K.Offset(-1, -6).Value = arrFor(iCount, 8) '// Column Number
    rRng_K.Offset(, 3).Value = arrFor(iCount, 5)
    
    Sheets("MTD Filer").Shapes("File_" & IIf(bAll, iCount, Right(sKey, 1))).TextFrame2.TextRange.Characters.Text = "[" & arrFor(iCount, 4) & "]" & arrFor(iCount, 2) & "!" & arrFor(iCount, 3)
Next iCount

Call Check_Values
Call Check_Refs
Call Update_Status

bRunning = True

GoTo Ending

Exit Sub
Err_Handle:
    If (Err.Number = 424) Then
        Exit Sub      '//CANCEL
    ElseIf (Err.Number <> 0) Then
        MsgBox Err.Description, vbCritical, c_PROJECT
    End If
    
Ending:
    Application.ScreenUpdating = True
    bMapping = False
    bRunning = False
End Sub

Public Sub Open_Retrieve()
Dim Arr     As Variant
Dim sTable  As String
Dim sVat    As String
Dim sFrom   As String
Dim sTo     As String
Dim iType   As eRetrieve
Dim sMsg    As String
Dim rFrom   As Range
Dim rTo     As Range
Dim rComp   As Range

On Error GoTo Err_Handler

Select Case Application.Caller
    Case "cmd_Obligations"
        iType = Obligations
        sTable = "Start_Obligations"
        Set rFrom = ActiveSheet.Range("OBL_From")
        Set rTo = ActiveSheet.Range("OBL_To")
        Set rComp = ActiveSheet.Range("OBL_Comp")
                
    Case "cmd_Liabilities"
        iType = Liabilities
        sTable = "Start_Liabilities"
        Set rFrom = ActiveSheet.Range("LIA_From")
        Set rTo = ActiveSheet.Range("LIA_To")
        Set rComp = ActiveSheet.Range("LIA_Comp")
    
    Case "cmd_Payments"
        iType = Payments
        sTable = "Start_Payments"
        Set rFrom = ActiveSheet.Range("PAY_From")
        Set rTo = ActiveSheet.Range("PAY_To")
        Set rComp = ActiveSheet.Range("PAY_Comp")
End Select

If (Not Valid_Token) Then Exit Sub

iAction = 0

sMsg = Check_Fields(rFrom, rTo, rComp)
If (sMsg <> "") Then
    
    MsgBox sMsg, vbOKOnly Or vbExclamation, c_PROJECT
    Exit Sub
End If

Arr = Table(ws_Contents.ListObjects("tbl_VAT"))
Arr = ArrayIndex(Arr, ArrayMatch(Arr, 1, False, False, rComp.Value), IndexArray(1, UBound(Arr, 2)))

sFrom = Format(rFrom.Value, "yyyy-mm-dd")
sTo = Format(rTo.Value, "yyyy-mm-dd")

If (UBound(Arr) = 0) Then
    MsgBox "Unable to Retrieve Obligations." & vbCrLf & "Please Initialize and try again.", vbCritical
    GoTo Finish
End If

sVat = Arr(1, 2)

Application.ScreenUpdating = False
ProtectSheet(ActiveSheet) = False

bRunning = True
Call Clear_VAT(ActiveSheet)
bFilling = True

ActiveSheet.Range("B21").Value = ""

If (iType = Obligations) Then
    ActiveSheet.Range("L23").Value = sFrom
    ActiveSheet.Range("M23").Value = sTo
End If

Call Get_Retrieve(iType, sVat, sFrom, sTo, sTable)

ActiveSheet.Range(sTable).Select

GoTo Finish

Err_Handler:
    If (Err.Number = 13) Then
        GoTo Finish '// Err requesting data
    Else
        MsgBox Err.Number & " - " & Err.Description, vbCritical, c_PROJECT
    End If

Finish:
    bRunning = False
    bFilling = False
    ProtectSheet(ActiveSheet) = True
    Application.ScreenUpdating = True
End Sub

Public Sub Get_Retrieve(iType As eRetrieve, sVat As String, sFrom As String, sTo As String, sTable As String)
Dim Arr As Variant

Call Clear_Table(ActiveSheet, sTable)           '// Clear Table
Arr = Retrive_Data(iType, sVat, sFrom, sTo, "") '// Sending Data to HMRC

If (UBound(Arr) = 0) Then Exit Sub
Call Insert_Table(ActiveSheet, Arr, sTable)     '// Insert Data
End Sub

Public Sub Clear_Table(ws As Worksheet, sTable As String)
Dim iCount  As Integer

DoEvents

'// Clear Table
If (ws.Range(sTable).Offset(0, -1).Value <> "0") Then

    With ws.Range(sTable).Offset(1, 0).Resize(ws.Range(sTable).Offset(0, -1).Value, 9).Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With

    ws.Range(sTable).Offset(1, 0).Resize(ws.Range(sTable).Offset(0, -1).Value, 9).ClearContents
    
    'Range(Selection, Selection.End(xlDown)).Select
    iCount = ws.Range(sTable).Offset(0, -1).Value
    
    'Selection.ClearContents
    DoEvents
    
    '// Remove lines
    If (iCount > 1) Then
        DoEvents
        ws.Range(sTable).Offset(1, 0).Resize(iCount - 1, 9).EntireRow.Delete
        'Selection.EntireRow.Delete
    End If
End If

ws.Range(sTable).Offset(0, -1).Value = 0
End Sub

Private Sub Insert_Table(ws As Worksheet, Arr As Variant, sTable As String)
Dim iRowIni  As Integer

iRowIni = ws.Range(sTable).Offset(1, 0).Row

Rows(iRowIni & ":" & iRowIni).Select
Selection.Copy
Rows(iRowIni + 1 & ":" & (iRowIni + 1) + (UBound(Arr, 1) - 1) - 1).Select
Selection.Insert Shift:=xlDown

iRowIni = ws.Range(sTable).Row + 1

ws.Range(sTable).Offset(1, 0).Resize(UBound(Arr, 1), UBound(Arr, 2)).Select
ws.Range(sTable).Offset(1, 0).Resize(UBound(Arr, 1), UBound(Arr, 2)) = Arr

ws.Range(sTable).Offset(0, -1).Value = UBound(Arr, 1)

Application.CutCopyMode = False
End Sub

Public Sub Open_Help()
Dim sButton As String
Dim sTitle  As String
Dim Arr     As Variant
Dim lo      As ListObject

On Error GoTo No_Help

Set lo = ws_Contents.ListObjects("tbl_Help")

sButton = Application.Caller

Arr = Table(lo)
Arr = ArrayIndex(Arr, ArrayMatch(Arr, 1, False, False, sButton), IndexArray(1, UBound(Arr, 2)))

If (UBound(Arr) = 0) Then Exit Sub

sTitle = Arr(1, 2)

frm_Help.Caption = "HELP :: " & sTitle
frm_Help.txt_Text.Text = Arr(1, 3)

frm_Help.Show False
frm_Help.Update_Size
frm_Help.Repaint

Exit Sub
No_Help:
End Sub

Public Sub TEMP_View()
If (ActiveSheet.Range("Start_Obligations").Offset(0, -1).Value = "0") Then Exit Sub

ProtectSheet(ActiveSheet) = False

ActiveSheet.Range("Period").Value = ActiveSheet.Range("B19").Value
ActiveSheet.Range("Vat_Sel").Value = ActiveSheet.Range("B20").Value

Call View

ProtectSheet(ActiveSheet) = True
End Sub

Public Sub TEMP_Submit()
If (ActiveSheet.Range("Start_Obligations").Offset(0, -1).Value = "0") Then Exit Sub

ProtectSheet(ActiveSheet) = False

ActiveSheet.Range("Period").Value = ActiveSheet.Range("B19").Value
ActiveSheet.Range("Vat_Sel").Value = ActiveSheet.Range("B20").Value

Call Submit

ProtectSheet(ActiveSheet) = True
End Sub

Public Sub Action_Obl()
On Error GoTo Action_Obl_Error

If (ActiveSheet.Range("Start_Obligations").Offset(0, -1).Value = "0") Then Exit Sub

ProtectSheet(ActiveSheet) = False

ActiveSheet.Range("Period").Value = ActiveSheet.Range("B19").Value
ActiveSheet.Range("Vat_Sel").Value = ActiveSheet.Range("B20").Value

ActiveSheet.Shapes.Range(Array("cmd_Action")).Select
If (Selection.ShapeRange(1).TextFrame2.TextRange.Characters.Text = "SUBMIT") Then
    Call Submit
Else
    Call View
End If

ActiveSheet.Range("Start_Obligations").Select

ProtectSheet(ActiveSheet) = True
    
Exit Sub
Action_Obl_Error:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure Action_Obl, line " & Erl & ".", vbCritical, "Error Found"
End Sub

Public Sub View()
Dim Arr     As Variant
Dim sPeriod As String
Dim sVat    As String
Dim sDate   As String
Dim sDesc   As String

Dim dK1     As Double
Dim dK2     As Double
Dim dK3     As Double
Dim dK4     As Double
Dim dK5     As Double
Dim dK6     As Double
Dim dK7     As Double
Dim dK8     As Double
Dim dK9     As Double

On Error GoTo View_Error

If (Not Valid_Token) Then Exit Sub

Application.ScreenUpdating = False

''Call g_clsAppEvt.Change_State(PDF, False)
ActiveSheet.Shapes.Range(Array("cmd_PDF")).Visible = False
bRunning = True

Call Clear_VAT(ActiveSheet)

ActiveSheet.Shapes("shp_Hide").Visible = msoTrue
ActiveSheet.Shapes("shp_Alert").Visible = msoFalse

ActiveSheet.Range("Period").Value = ActiveSheet.Range("B19").Value

sPeriod = ActiveSheet.Range("Period")
sVat = ActiveSheet.Range("Vat_Sel").Value

'// Load from LOG
Arr = Table(ws_Contents.ListObjects("tbl_LOG"))
Arr = ArrayIndex(Arr, ArrayMatch(Arr, 16, False, False, sPeriod), IndexArray(1, UBound(Arr, 2)))
Arr = ArrayIndex(Arr, ArrayMatch(Arr, 3, False, False, sVat), IndexArray(1, UBound(Arr, 2)))

dK1 = 0
dK2 = 0
dK3 = 0
dK4 = 0
dK5 = 0
dK6 = 0
dK7 = 0
dK8 = 0
dK9 = 0

bSubmit = False
bRunning = True

If (UBound(Arr) = 0) Then
    sPeriod = Replace(sPeriod, "#", "%23")          '// Period must be URL-encoded
    Arr = Retrive_Data(VAT, sVat, "", "", sPeriod)  '// Getting Data from HMRC
    If (UBound(Arr) = 0) Then GoTo Finish

    dK1 = Arr(1, 2)
    dK2 = Arr(1, 3)
    dK3 = Arr(1, 4)
    dK4 = Arr(1, 5)
    dK5 = Arr(1, 6)
    dK6 = Arr(1, 7)
    dK7 = Arr(1, 8)
    dK8 = Arr(1, 9)
    dK9 = Arr(1, 10)
Else
    dK1 = Arr(1, 7)
    dK2 = Arr(1, 8)
    dK3 = Arr(1, 9)
    dK4 = Arr(1, 10)
    dK5 = Arr(1, 11)
    dK6 = Arr(1, 12)
    dK7 = Arr(1, 13)
    dK8 = Arr(1, 14)
    dK9 = Arr(1, 15)
    
    sDesc = Arr(1, 6)
    sDate = "Submitted on " & Format(Arr(1, 5), "dd/mm/yyyy hh:mm:ss")
End If

Call Clear_Status(ActiveSheet)

ActiveSheet.Shapes.Range(Array("cmd_PDF")).Visible = True
Call Save_AddIn

Finish:
    ActiveSheet.Range("K_1").Value = dK1
    ActiveSheet.Range("K_2").Value = dK2
    ActiveSheet.Range("K_3").Value = dK3
    ActiveSheet.Range("K_4").Value = dK4
    ActiveSheet.Range("K_5").Value = dK5
    ActiveSheet.Range("K_6").Value = dK6
    ActiveSheet.Range("K_7").Value = dK7
    ActiveSheet.Range("K_8").Value = dK8
    ActiveSheet.Range("K_9").Value = dK9
    
    ActiveSheet.Range("VAT_Date").Value = sDate
    ActiveSheet.Range("VAT_Date").Offset(1, 0).Value = sDesc
        
    bRunning = False
    Application.ScreenUpdating = True

Exit Sub
View_Error:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure View, line " & Erl & ".", vbCritical, "Error Found"
End Sub
Public Sub Submit()
Dim iCount  As Integer
Dim rKey    As Range

On Error GoTo Submit_Error

ProtectSheet(ActiveSheet) = False
Application.ScreenUpdating = False

ActiveSheet.Shapes("shp_Hide").Visible = msoFalse
ActiveSheet.Shapes("shp_Alert").Visible = msoFalse

bSubmit = True
bRunning = True

ActiveSheet.Range("VAT_Date").Value = ""
ActiveSheet.Range("VAT_Date").Offset(1, 0).Value = ""

For iCount = 1 To 9
    Set rKey = Sheets("MTD Filer").Range("K_" & iCount)
    
    rKey.Value = 0
    rKey.Offset(-1, -1).Value = ""
    rKey.Offset(-1, -2).Value = ""
    rKey.Offset(-1, -3).Value = ""
    rKey.Offset(-1, -4).Value = ""
    rKey.Offset(-1, -5).Value = ""
    rKey.Offset(-1, -6).Value = ""
    
    Cells(rKey.Row + 1, rKey.Column - 1).Value = ""
Next iCount

Call Clear_Path(ActiveSheet)
Call Clear_Status(ActiveSheet)

Application.Calculate

Call Check_Refs
Call Check_Values
Call Update_Status

bRunning = False

ActiveSheet.Shapes.Range(Array("cmd_PDF")).Visible = False

Application.ScreenUpdating = True
ProtectSheet(ActiveSheet) = True
    
Exit Sub
Submit_Error:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure Submit, line " & Erl & ".", vbCritical, "Error Found"
End Sub

Private Sub Fill_Key(sKey As String, sKey_PDF As String)
Dim sValue As String
Dim vSplit  As Variant

sValue = Format(Sheets("MTD Filer").Range(sKey).Value, "#,##0.00")
vSplit = Split_Value(sValue)

Sheets("PDF MTD").Range(sKey_PDF).Value = Replace(vSplit(0), ",", "")
Sheets("PDF MTD").Range(sKey_PDF).Offset(, 1).Value = vSplit(1)
End Sub

Private Sub Fill_PDF()
On Error GoTo Fill_PDF_Error

Call Fill_Key("K_1", "K1_P")
Call Fill_Key("K_2", "K2_P")
Call Fill_Key("K_3", "K3_P")
Call Fill_Key("K_4", "K4_P")
Call Fill_Key("K_5", "K5_P")
Call Fill_Key("K_6", "K6_P")
Call Fill_Key("K_7", "K7_P")
Call Fill_Key("K_8", "K8_P")
Call Fill_Key("K_9", "K9_P")

'Sheets("PDF MTD").Range("PDF_Period").Value = ActiveSheet.Range("Period").Value
Sheets("PDF MTD").Range("PDF_Date").Value = "'" & Format(Now, "dd/mm/yyyy")
Sheets("PDF MTD").Range("PDF_VAT").Value = ActiveSheet.Range("Vat_Sel").Value
Sheets("PDF MTD").Range("PDF_Company").Value = ActiveSheet.Range("E11").Value

Exit Sub
Fill_PDF_Error:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure Fill_PDF, line " & Erl & ".", vbCritical, "Error Found"
End Sub

Public Sub Generate_PDF()
Dim varResult As Variant
Dim sBack As Worksheet

On Error GoTo pdfErr
        
If (ActiveSheet Is Nothing) Then Exit Sub
If (ActiveSheet.Name <> "MTD Filer") Then Exit Sub
If (ActiveSheet.Range("Period").Value = "") Then Exit Sub
        
varResult = Application.GetSaveAsFilename(FileFilter:= _
            "PDF (*.pdf), *.pdf", Title:="Save to PDF", _
            InitialFileName:="c:\Tax_Return.pdf")

If (varResult = False) Then Exit Sub

Set sBack = ActiveSheet

Call Fill_PDF

DoEvents

Application.ScreenUpdating = False

Sheets("PDF MTD").Visible = xlSheetVisible
Sheets("PDF MTD").Select

ActiveSheet.ExportAsFixedFormat _
    Type:=xlTypePDF, _
    FileName:=varResult, _
    Quality:=xlQualityStandard, _
    IncludeDocProperties:=True, _
    IgnorePrintAreas:=True, _
    OpenAfterPublish:=True

GoTo Ending

pdfErr:
    MsgBox Err.Description & vbCrLf & "Please check if there is a PDF File opened with the same name you are saving and try again.", vbCritical, c_PROJECT
    GoTo Ending

Ending:
    sBack.Select
    Sheets("PDF MTD").Visible = xlVeryHidden
        
    Application.ScreenUpdating = True
End Sub

Public Sub Cancel_VAT()
On Error GoTo Cancel_VAT_Error

If (MsgBox("Do you want to cancel the submission?", vbYesNo Or vbQuestion, c_PROJECT) = vbNo) Then Exit Sub

bSubmit = False
bRunning = True

Application.ScreenUpdating = False

ActiveSheet.Range("Period").Value = ""
ActiveSheet.Range("VAT_Date").Value = ""
ActiveSheet.Range("VAT_Date").Offset(1, 0).Value = ""

Call Clear_VAT(ActiveSheet)
Call Clear_Status(ActiveSheet)

DoEvents

bRunning = False

Application.ScreenUpdating = True

Exit Sub
Cancel_VAT_Error:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure Cancel_VAT, line " & Erl & ".", vbCritical, "Error Found"
End Sub

Public Sub Clear_Path(ws As Worksheet)
Dim iCount  As Integer
Dim rKey    As Range

On Error GoTo Clear_Path_Error

For iCount = 1 To 9
    Set rKey = ws.Range("K_" & iCount)
    
    rKey.Value = 0
    rKey.Offset(-1, -1).Value = ""
    rKey.Offset(-1, -2).Value = ""
    rKey.Offset(-1, -3).Value = ""
    rKey.Offset(-1, -4).Value = ""
    rKey.Offset(-1, -5).Value = ""
    rKey.Offset(-1, -6).Value = ""
    
    ws.Shapes("File_" & iCount).TextFrame2.TextRange.Characters.Text = ""
Next iCount

Exit Sub
Clear_Path_Error:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure Clear_Path, line " & Erl & ".", vbCritical, "Error Found"
End Sub

Public Sub Clear_VAT(ws As Worksheet)
On Error GoTo Clear_VAT_Error

If (ActiveSheet Is Nothing) Then Exit Sub
If (ws.Name <> "MTD Filer") Then Exit Sub

ProtectSheet(ws) = False
bRunning = True

ws.Shapes("shp_Hide").Visible = msoTrue

Call Clear_Path(ws)

ws.Range("OBL_From").Value = ""
ws.Range("OBL_To").Value = ""

ws.Range("LIA_From").Value = ""
ws.Range("LIA_To").Value = ""

ws.Range("PAY_From").Value = ""
ws.Range("PAY_To").Value = ""

'ws.Range("Period").Value = ""

ws.Range("VAT_Date").Value = ""
ws.Range("VAT_Date").Offset(1, 0).Value = ""

ws.Range("K_1").Value = 0
ws.Range("K_2").Value = 0
ws.Range("K_3").Value = 0
ws.Range("K_4").Value = 0
ws.Range("K_5").Value = 0
ws.Range("K_6").Value = 0
ws.Range("K_7").Value = 0
ws.Range("K_8").Value = 0
ws.Range("K_9").Value = 0

ws.Range("K_5").Select
ws.Range("K_5").ClearComments

Skip_Comment:
    ws.Shapes.Range(Array("cmd_Action")).Visible = False
    ws.Shapes.Range(Array("cmd_PDF")).Visible = False
    ws.Shapes("shp_Alert").Visible = msoFalse

    bRunning = False
    ProtectSheet(ws) = True

Exit Sub
Clear_VAT_Error:
    If (Err.Number = 1004) Then
        GoTo Skip_Comment
    Else
        MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure Clear_VAT, line " & Erl & ".", vbCritical, "Error Found"
    End If
End Sub

Public Sub Verify_VAT()
Dim bFalse  As Boolean
Dim bVerify As Boolean
Dim iKey    As Integer
Dim rKey    As Range
Dim sFile   As String
Dim sSheet  As String
Dim sCell   As String
Dim sText   As String

Dim dVAT_Value  As Double
Dim dREF_Value  As Double

bFalse = False  '// In case of Excel is in a diffente language
bVerify = False

'// Update Status
Call Check_Refs
Call Check_Values

If (ActiveSheet.Range("References_Check").Offset(-1, 0).Value = bFalse Or ActiveSheet.Range("References_Check").Offset(0, 2).Value = bFalse) Then
    MsgBox "Please check all Key Fields before submitting.", vbCritical, c_PROJECT
    
    Exit Sub
End If

Call Disable_Verify(ActiveSheet)

'// First Verification
If (MsgBox("You must confirm all values for successful verification." & vbCrLf & "Do you want to continue with the process?", vbQuestion + vbYesNo) = vbNo) Then GoTo Finishing

bVerify = True
ActiveSheet.Range("K2").Value = "VERIFY"

'// Keys
For iKey = 1 To 9
    Set rKey = ActiveSheet.Range("K_" & iKey)
    
    dVAT_Value = rKey.Value
    sText = Replace(rKey.Offset(0, -1).Value, ":", "")
    
    sSheet = rKey.Offset(-1, -2).Value
    sCell = rKey.Offset(-1, -3).Value
    sFile = rKey.Offset(-1, -4).Value
    
    '// Open source to check numbers
    If (Not Get_WB_Reference(sFile, sSheet, sCell, dREF_Value)) Then
        MsgBox "The source is not accessible or available", vbCritical, c_PROJECT
        
        rKey.Parent.Parent.Activate
        rKey.Parent.Activate
        rKey.Offset(0, 1).Value = 10
        
        bVerify = False
    Else
        '// Check if the values are the same
        If (dVAT_Value = dREF_Value) Then
            If (MsgBox(sText & " #" & iKey & vbCrLf & vbCrLf & _
                        "The Key Field has the same number of the Field in Source." & vbCrLf & _
                        "Both numbers are correct?" & vbCrLf & vbCrLf & _
                        "MTD Filer: " & Format(dVAT_Value, "#,##0.00") & vbCrLf & _
                        "Source    : " & Format(dREF_Value, "#,##0.00"), vbQuestion + vbYesNo, c_PROJECT) = vbNo) Then
        
                rKey.Parent.Parent.Activate
                rKey.Parent.Activate
                rKey.Offset(0, 1).Value = 11
                
                bVerify = False
                
                Exit For
            Else
                rKey.Parent.Parent.Activate
                rKey.Parent.Activate
                rKey.Offset(0, 1).Value = -1
            End If
        ElseIf (dVAT_Value = (dREF_Value * -1) And iKey = 5) Then
            If (MsgBox("Validating Key Field #" & iKey & vbCrLf & vbCrLf & _
                        "Your input VAT on purchases to reclaim is higher than your output VAT on sales to remit, which means you will be reclaiming money from HMRC." & vbCrLf & vbCrLf & _
                        "Please confirm that this is correct:" & vbCrLf & vbCrLf & _
                        "MTD Filer: " & Format(dVAT_Value, "#,##0.00") & vbCrLf & _
                        "Source    : " & Format(dREF_Value, "#,##0.00"), vbQuestion + vbYesNo, c_PROJECT) = vbNo) Then
        
                rKey.Parent.Parent.Activate
                rKey.Parent.Activate
                rKey.Offset(0, 1).Value = 11
                
                bVerify = False
                
                Exit For
            Else
                rKey.Parent.Parent.Activate
                rKey.Parent.Activate
                rKey.Offset(0, 1).Value = -1
            End If
        Else
            MsgBox "Validating Key Field #" & iKey & vbCrLf & vbCrLf & _
                        "The Key Field has not the same number of the Field in Source." & vbCrLf & _
                        "Please check both values before submitting.", vbCritical, c_PROJECT
                        
            rKey.Parent.Parent.Activate
            rKey.Parent.Activate
            rKey.Offset(0, 1).Value = 11
            
            bVerify = False
        End If
    End If
    
    Call Check_Refs
    
    ActiveSheet.Columns("S:S").EntireColumn.Hidden = False
    ActiveSheet.Columns("S:S").EntireColumn.AutoFit
        
Next iKey

EndingSub:

    If (bVerify) Then
        MsgBox "Verification completed successfully." & vbCrLf & vbCrLf & "You can now submit VAT." & vbCrLf & "In case you do not submit any information now this verification should be done again.", vbInformation, c_PROJECT
        Call Enable_Verify(ActiveSheet)
    Else
        MsgBox "Field Verification failed.", vbCritical, c_PROJECT
    End If

Finishing:
    ActiveSheet.Range("K2").Value = ""
    ActiveSheet.Range("VAT_Status").Offset(2, 0).Value = bVerify
End Sub

Public Sub Send_VAT()
      Dim sVat    As String
      Dim Arr     As Variant
      Dim sFrom   As String
      Dim sTo     As String
      Dim sTable  As String
      Dim bFalse  As Boolean
      Dim sDesc   As String

10    On Error GoTo Send_VAT_Error

20    bFalse = False  '// In case of Excel is in a diffente language
30    sDesc = ""

40    If (ActiveSheet.Range("Vat_Status").Offset(2, 0).Value = bFalse) Then
50        MsgBox "Please verify all Key Fields before submitting.", vbCritical, c_PROJECT

60        Exit Sub
70    End If

      'Call Check_References(False)
80    Call Check_Refs
90    Call Check_Values

100   If (ActiveSheet.Range("References_Check").Offset(-1, 0).Value = bFalse) Then
110       MsgBox "Please check all Key Fields before submitting.", vbCritical, c_PROJECT
          
120       Exit Sub
130   End If

      '// Show Alert for Sequence
140   If (ActiveSheet.Range("References_Check") = bFalse) Then
150       If (MsgBox("Please note that the fields used for reference are not following the order of the nine key fields." & vbCrLf & vbCrLf & "Do you want to continue with the process?", vbQuestion + vbYesNo, c_PROJECT) = vbNo) Then Exit Sub
160       sDesc = "Sequential Call Reference confirmation Date"
170   End If

      '// Show Alert for Columns
180   If (ActiveSheet.Range("References_Check") = bFalse) Then
190       If (MsgBox("Please note that the key fields are not part of the same column in the file/tab used." & vbCrLf & vbCrLf & "Do you want to continue with the process?", vbQuestion + vbYesNo, c_PROJECT) = vbNo) Then Exit Sub
200       sDesc = "Sequential Call Reference confirmation Date"
210   End If

220   sVat = ActiveSheet.Range("Vat_Sel").Value
230   sTable = "Start_Obligations"

240   If (Not Check_Submissions(sVat, False)) Then
250       frm_About.frm_Notice.Visible = True

260       frm_About.Width = 315
270       frm_About.Height = 205

280       frm_About.Show vbModal
290       Exit Sub
300   End If

310   If (MsgBox("Attention," & vbCrLf _
          & "" & vbCrLf _
          & "Please be aware that all data entered is correct and that all values are your responsibility." & vbCrLf _
          & "" & vbCrLf _
          & "Do you want to continue with the process?", vbYesNo Or vbQuestion, c_PROJECT) = vbNo) Then Exit Sub

320   If (MsgBox("When you submit this VAT information you are making a legal declaration that the information is true and complete. A false declaration can result in prosecution." & vbCrLf _
          & "" & vbCrLf _
          & "" & vbCrLf _
          & "Do you want to continue with the process?", vbOKCancel Or vbExclamation, c_PROJECT) = vbCancel) Then Exit Sub

      '// Send to HMRC
330   Arr = Submit_VAT(sVat)
340   If (UBound(Arr) > 0) Then
350       MsgBox "Data sent successfully.", vbInformation + vbOKOnly, c_PROJECT
          
360       ProtectSheet(ActiveSheet) = False
370       bSubmit = False
          
380       ActiveSheet.Shapes("shp_Hide").Visible = msoTrue
390       ActiveSheet.Shapes("shp_Alert").Visible = msoFalse
400       ActiveSheet.Shapes.Range(Array("cmd_PDF")).Visible = True
          
          '// Save Log
410       Call Save_LOG(Arr, sDesc)
          
420       ActiveSheet.Range(Range("B21").Value) = ""
          
430       sFrom = Format(ActiveSheet.Range("L23").Value, "yyyy-mm-dd")
440       sTo = Format(ActiveSheet.Range("M23").Value, "yyyy-mm-dd")
          
          '// Update Table
450       If (sFrom <> "") Then Call Get_Retrieve(Obligations, sVat, sFrom, sTo, sTable)
          
          '// Update Submissions
460       Call Check_Submissions(sVat, True)
          
          '// Save AddIn
470       Call Save_AddIn

480       ProtectSheet(ActiveSheet) = True
490   End If

500   Exit Sub
Send_VAT_Error:
510       MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure Send_VAT, line " & Erl & ".", vbCritical, "Error Found"
End Sub

Public Sub Save_LOG(Arr_S As Variant, sDesc As String)
Dim sClient As String
Dim sCompany As String
Dim sVat As String
Dim sAction As String
Dim dDate As Date
Dim K1 As Double
Dim K2 As Double
Dim K3 As Double
Dim K4 As Double
Dim K5 As Double
Dim K6 As Double
Dim K7 As Double
Dim K8 As Double
Dim K9 As Double
Dim sPeriod As String

Dim Arr(1 To 1, 1 To 20)

On Error GoTo Save_LOG_Error

sClient = ActiveSheet.Range("E9").Value
sCompany = ActiveSheet.Range("E11").Value
sVat = ActiveSheet.Range("Vat_Sel").Value
sAction = "File Return"
dDate = Format(Now, "dd/mm/yyyy hh:mm:ss")

K1 = ActiveSheet.Range("K_1").Value
K2 = ActiveSheet.Range("K_2").Value
K3 = ActiveSheet.Range("K_3").Value
K4 = ActiveSheet.Range("K_4").Value
K5 = ActiveSheet.Range("K_5").Value
K6 = ActiveSheet.Range("K_6").Value
K7 = ActiveSheet.Range("K_7").Value
K8 = ActiveSheet.Range("K_8").Value
K9 = ActiveSheet.Range("K_9").Value
sPeriod = ActiveSheet.Range("Period").Value

Arr(1, 1) = sClient
Arr(1, 2) = sCompany
Arr(1, 3) = sVat
Arr(1, 4) = sAction
Arr(1, 5) = dDate
Arr(1, 6) = sDesc
Arr(1, 7) = K1
Arr(1, 8) = K2
Arr(1, 9) = K3
Arr(1, 10) = K4
Arr(1, 11) = K5
Arr(1, 12) = K6
Arr(1, 13) = K7
Arr(1, 14) = K8
Arr(1, 15) = K9
Arr(1, 16) = sPeriod

Arr(1, 17) = Arr_S(1, 1)
Arr(1, 18) = Arr_S(1, 2)
Arr(1, 19) = Arr_S(1, 3)
Arr(1, 20) = Arr_S(1, 4)

Call Table_AppendData(ws_Contents.ListObjects("tbl_LOG"), Arr)

Exit Sub
Save_LOG_Error:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure Save_LOG, line " & Erl & ".", vbCritical, "Error Found"
End Sub

Public Sub Save_AddIn()
Dim iCount As Integer
Dim wAddIn As AddIn

iCount = 1

For Each wAddIn In AddIns
    
    If (wAddIn.Name = "Avalara_AddIn.xlam") Then
        AddIns(iCount).Application.ThisWorkbook.Save
        Exit For
    End If
    
    iCount = iCount + 1
Next
End Sub

Public Sub HighLight_Key(rngKey As Range, iKey As Integer)
On Error GoTo HighLight_Key_Error

On Error Resume Next
'// Use it because the WB might be protected

rngKey.Select

Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlContinuous
    .ThemeColor = 6
    .TintAndShade = 0
    .Weight = xlThin
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlContinuous
    .ThemeColor = 6
    .TintAndShade = 0
    .Weight = xlThin
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlContinuous
    .ThemeColor = 6
    .TintAndShade = 0
    .Weight = xlThin
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlContinuous
    .ThemeColor = 6
    .TintAndShade = 0
    .Weight = xlThin
End With
With Selection.Borders(xlInsideVertical)
    .LineStyle = xlContinuous
    .ThemeColor = 6
    .TintAndShade = 0
    .Weight = xlThin
End With
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .ThemeColor = 6
    .TintAndShade = 0
    .Weight = xlThin
End With
With Selection.Interior
    .Pattern = xlSolid
    .PatternColorIndex = xlAutomatic
    .ThemeColor = xlThemeColorAccent4
    .TintAndShade = 0.799981688894314
    .PatternTintAndShade = 0
End With

rngKey.ClearComments
rngKey.AddComment
rngKey.Comment.Visible = False
rngKey.Comment.Text Text:="MTD Filer: Mapped #" & iKey

Exit Sub
HighLight_Key_Error:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure HighLight_Key, line " & Erl & ".", vbCritical, "Error Found"
End Sub

Public Sub Change_Color(sBox, iColor As Integer)
ActiveSheet.Shapes.Range(Array(sBox)).Select

If (iColor = 1) Then                                    '// Gray
    With Selection.ShapeRange.TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.ObjectThemeColor = msoThemeColorBackground1
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = -0.5
        .Transparency = 0
        .Solid
    End With
Else                                                    '// Red
    With Selection.ShapeRange.TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(255, 0, 0)
        .Transparency = 0
        .Solid
    End With
End If
End Sub

Public Sub Clear_Status(ws As Worksheet)
Dim iKey As Integer
Dim rFor_K As Range

bRunning = True

For iKey = 1 To 9
    Set rFor_K = ws.Range("K_" & iKey)
    rFor_K.Offset(0, 1).Value = ""
Next

bRunning = False
End Sub

Public Sub Update_Status()
Dim iKey As Integer
Dim rFor_K As Range
Dim bErr As Boolean

For iKey = 1 To 9
    Set rFor_K = ActiveSheet.Range("K_" & iKey)
        
    If (rFor_K.Offset(0, 1) > 0 Or rFor_K.Offset(0, 1) = -2) Then bErr = True
        
    rFor_K.Offset(0, 4).Value = Show_Status(rFor_K.Offset(0, 1))
Next

'// Arrange the Column
If (bErr) Then
    ActiveSheet.Columns("S:S").EntireColumn.Hidden = False
    ActiveSheet.Columns("S:S").EntireColumn.AutoFit
Else
    ActiveSheet.Columns("S:S").EntireColumn.Hidden = True
End If
End Sub

Public Sub Check_Values()
Dim iAux As Integer
Dim iKey As Integer
Dim bErr As Boolean
Dim bFalse  As Boolean
Dim bReference As Boolean

Dim rFor_K As Range
Dim rCur_K As Range

On Error GoTo Err_Hdl

Application.ScreenUpdating = False

bErr = False
bFalse = False  '// In case of Excel is in a diffente language

'------------------------------------------------------------------------------------------------
'// Check Values
'------------------------------------------------------------------------------------------------
For iKey = 1 To 9
    Set rFor_K = ActiveSheet.Range("K_" & iKey)
    
    If (rFor_K.Offset(0, 1).Value = 2) Then rFor_K.Offset(0, 1).Value = 0
    If (rFor_K.Value = 0) Then rFor_K.Offset(0, 1).Value = 0

    If (rFor_K.Offset(-1, -4).Value <> "") Then
        If (Len(Dir(rFor_K.Offset(-1, -4).Value)) = 0) Then
            rFor_K.Offset(0, 1).Value = 8: bErr = True: bReference = True
        End If
    End If
    
    '// If there is any issue in reference file, do not check values
    If (Not bReference) Then
        If (InStr(1, rFor_K.Formula, "#REF") > 0) Then
            rFor_K.Offset(0, 1).Value = 8
            bErr = True
        Else
            '// Check 0
            'If (rFor_K.Value = 0) Then rFor_K.Offset(0, 1).Value = 0: bErr = False
            
            '// Check -
            If (rFor_K.Value < 0) Then rFor_K.Offset(0, 1).Value = 3: bErr = True
            
            '// Check OK
            If (rFor_K.Value > 0) Then If (rFor_K.Offset(0, 1).Value <> 0) Then rFor_K.Offset(0, 1).Value = 0
            
            '// Check Empty
            If (rFor_K.Value = "") Then rFor_K.Offset(0, 1).Value = 4: bErr = True
        
            '// Check Not Num
            If (Not IsNumeric(rFor_K.Value)) Then rFor_K.Offset(0, 1).Value = 5: bErr = True
        End If
    Else
        '// Check -1
        If (rFor_K.Offset(0, 1).Value = -1 Or rFor_K.Offset(0, 1).Value = 9 Or rFor_K.Offset(0, 1).Value = 10 Or rFor_K.Offset(0, 1).Value = 11) Then bErr = True
    End If
Next iKey

'// Check Formula 3
If (InStr(1, ActiveSheet.Range("K_3").Formula, "#REF") = 0) Then
    If (Round(ActiveSheet.Range("K_3").Value, 2) <> Round(ActiveSheet.Range("K_1").Value + ActiveSheet.Range("K_2").Value, 2)) Then
        ActiveSheet.Range("K_3").Offset(0, 1).Value = 6
        bErr = True
    End If
End If

'// Check Formula 5
ProtectSheet(ActiveSheet) = False
ActiveSheet.Range("K_5").ClearComments
If (InStr(1, ActiveSheet.Range("K_5").Formula, "#REF") = 0) Then
    If (Round(ActiveSheet.Range("K_5").Value, 2) <> Round(ActiveSheet.Range("K_3").Value - ActiveSheet.Range("K_4").Value, 2)) Then
        If (Round(ActiveSheet.Range("K_5").Value, 2) = Round((ActiveSheet.Range("K_3").Value - ActiveSheet.Range("K_4").Value) * -1, 2)) Then
            ActiveSheet.Range("K_5").Offset(0, 1).Value = -2
            bErr = True
                                              
            ProtectSheet(ActiveSheet) = False
            ActiveSheet.Range("K_5").AddComment
            ActiveSheet.Range("K_5").Comment.Visible = False
            ActiveSheet.Range("K_5").Comment.Text Text:="If you have submitted negative values as your are expecting a monetery return from HMRC, the tool will do this correctly, " & Chr(13) & " but due to the HMRC platform, this will always display as a positive value when submitting."
        Else
            ActiveSheet.Range("K_5").Offset(0, 1).Value = 7
            bErr = True
        End If
    End If
End If
ProtectSheet(ActiveSheet) = True

'// Check if there are two or more fields with the same reference
For iKey = 1 To 9
    Set rFor_K = ActiveSheet.Range("K_" & iKey)
    
    For iAux = 1 To 9
        Set rCur_K = ActiveSheet.Range("K_" & iAux)
        
        If (iKey <> iAux) Then
            If (Sheets("MTD Filer").Shapes("File_" & iKey).TextFrame2.TextRange.Characters.Text <> "") Then
                If (Sheets("MTD Filer").Shapes("File_" & iAux).TextFrame2.TextRange.Characters.Text <> "") Then
                    If (Sheets("MTD Filer").Shapes("File_" & iAux).TextFrame2.TextRange.Characters.Text = Sheets("MTD Filer").Shapes("File_" & iKey).TextFrame2.TextRange.Characters.Text) Then
                        rCur_K.Offset(0, 1).Value = 2
                        rFor_K.Offset(0, 1).Value = 2
                        
                        bErr = True
                    End If
                End If
            End If
        End If
    Next iAux
Next iKey

'// Arrange the Column
If (bErr) Then
    ActiveSheet.Columns("S:S").EntireColumn.Hidden = False
    ActiveSheet.Columns("S:S").EntireColumn.AutoFit
Else
    ActiveSheet.Columns("S:S").EntireColumn.Hidden = True
End If

Application.Calculate
Application.ScreenUpdating = True

Exit Sub
Err_Hdl:
    If (Err.Number = 1004) Then
        Resume Next
    Else
        MsgBox Err.Description, vbCritical, c_PROJECT
    End If
End Sub

Public Sub Check_Refs()
Dim iKey    As Integer
Dim bErr    As Boolean
Dim sRef    As String
Dim iRef    As Integer
Dim sAlert  As Shape
Dim bFalse  As Boolean
Dim bShow   As Boolean

Dim vSplit  As Variant
Dim vSplitA As Variant
Dim sText   As String

Dim rCur_K As Range

Dim sFile As String
Dim sSheet As String
Dim sCell As String
Dim iRow As Integer
Dim iCol As Integer
Dim sPath As String

Application.ScreenUpdating = False

bErr = False
bFalse = False  '// In case of Excel is in a diffente language
bShow = False

'// Change to Original Color
For iKey = 1 To 9
    Set rCur_K = ActiveSheet.Range("K_" & iKey)
    
    If (rCur_K.Formula = "0" Or rCur_K.Formula = "") Then GoTo NextField
           
    If (InStr(1, rCur_K.Formula, "]") > 0) Then
        If (iKey = 5) Then
            vSplitA = Split(rCur_K.Formula, ",")
        
            vSplit = Split(vSplitA(2), "]")
            sFile = Right(vSplit(0), Len(vSplit(0)) - 1)
                
            vSplitA(2) = Replace(vSplitA(2), sFile, "")
            sText = Left(vSplitA(2), Len(vSplitA(2)) - 1)
            sText = Right(sText, Len(sText) - 2)
        Else
            vSplit = Split(rCur_K.Formula, "]")
            sFile = Right(vSplit(0), Len(vSplit(0)) - 2)
        
            sText = vSplit(1)
        End If
        
        rCur_K.Offset(-1, -1).Value = sFile     '// File Name
    Else
        If (iKey = 5) Then
            vSplit = Split(rCur_K.Formula, ",")
            sText = Left(vSplit(2), Len(vSplit(2)) - 1)
        Else
            sText = rCur_K.Formula
        End If
    End If
    
    vSplit = Split(Replace(sText, "=", ""), "!")
    sSheet = Replace(vSplit(0), "'", "")
    sCell = vSplit(1)
    
    vSplit = Split(sCell, "$")
    iRow = vSplit(2)
    iCol = Letter2Number(CStr(vSplit(1)))
        
    rCur_K.Offset(-1, -2).Value = sSheet    '// Sheet Name
    rCur_K.Offset(-1, -3).Value = sCell     '// Cell Address
    sPath = rCur_K.Offset(-1, -4).Value     '// File Path
    rCur_K.Offset(-1, -5).Value = iRow      '// Row Number
    rCur_K.Offset(-1, -6).Value = iCol      '// Column Number

    Sheets("MTD Filer").Shapes("File_" & iKey).TextFrame2.TextRange.Characters.Text = "[" & sPath & "]" & sSheet & "!" & sCell
    Call Change_Color("File_" & iKey, 1)
    
NextField:
    
Next iKey

ActiveSheet.Range("Vat_Sel").Select

'------------------------------------------------------------------------------------------------
'// Check References
'------------------------------------------------------------------------------------------------
'// Check the References if the fields has been mapped
Set sAlert = ActiveSheet.Shapes("shp_Alert")
sAlert.Visible = msoFalse

'// Check File
If (ActiveSheet.Range("References_Check").Offset(0, 2).Value = bFalse) Then
    sRef = sRef & "Key fields are not part of the same file." & Chr(13)
    iRef = iRef + 1
End If

'// Check Tab
If (ActiveSheet.Range("References_Check").Offset(0, 4).Value = bFalse) Then
    sRef = sRef & "Key fields are not part of the same tab." & Chr(13)
    iRef = iRef + 1
End If

'// Check Columns
If (ActiveSheet.Range("References_Check").Offset(0, 1).Value = bFalse) Then
    sRef = sRef & "The key fields are not part of the same column in the file/tab used." & Chr(13)
    iRef = iRef + 1
End If

'// Check Order
Range("References_Check").Value = IsRangeSorted(ActiveSheet.Range("References_Check").Offset(1, 0).Resize(9, 1))
If (Not ActiveSheet.Range("References_Check").Value) Then
    If (Range("References_Check").Offset(10, 0) <> 0) Then
        sRef = sRef & "The fields used for reference are not following the order of the nine key fields"
        iRef = iRef + 1
    End If
End If

'// Check if is the first step
bShow = (ActiveSheet.Range("References_Check").Offset(10, 3).Value = 9)

If (iRef > 0 And Not bShow) Then
    Set sAlert = ActiveSheet.Shapes("shp_Alert")
    
    With sAlert
        .Height = 22 * iRef
        .TextFrame2.TextRange.Characters.Text = sRef
        .Visible = msoCTrue
    End With
    
    Set sAlert = Nothing
    
    '// Change to Red
    For iKey = 1 To 9
        Call Change_Color("File_" & iKey, 2)
    Next iKey
    
    ActiveSheet.Range("Vat_Sel").Select
End If

Application.Calculate
Application.ScreenUpdating = True
End Sub

Public Sub Open_Reference()
Dim sKey As String
Dim sFile As String
Dim sSheet As String
Dim sCell As String
Dim rRng_K As Range

Select Case Application.Caller
    Case "File_1": sKey = "K_1"
    Case "File_2": sKey = "K_2"
    Case "File_3": sKey = "K_3"
    Case "File_4": sKey = "K_4"
    Case "File_5": sKey = "K_5"
    Case "File_6": sKey = "K_6"
    Case "File_7": sKey = "K_7"
    Case "File_8": sKey = "K_8"
    Case "File_9": sKey = "K_9"
End Select

Set rRng_K = Sheets("MTD Filer").Range(sKey)

sSheet = rRng_K.Offset(-1, -2).Value
sCell = rRng_K.Offset(-1, -3).Value
sFile = rRng_K.Offset(-1, -4).Value

If (sFile = "") Then Exit Sub

If (Not Get_WB_Reference(sFile, sSheet, sCell)) Then
    MsgBox "The source is not accessible or available", vbCritical, c_PROJECT
    rRng_K.Offset(0, 1).Value = 9
        
    rRng_K.Parent.Parent.Activate
    rRng_K.Parent.Activate
    
    'Call Check_References(False)
    Call Check_Refs
    Call Check_Values
Else
    If (rRng_K.Offset(0, 1).Value = 9) Then
        rRng_K.Parent.Parent.Activate
        rRng_K.Parent.Activate
        
        rRng_K.Offset(0, 1).Value = 0
        
        'Call Check_References(False)
        Call Check_Refs
        Call Check_Values
    End If
End If
End Sub

Public Sub Open_Calendar()
Dim sRange As String

iAct_Dat = 0

Select Case Application.Caller
    Case "OBL_From_Cal":    sRange = "OBL_From"
    Case "OBL_To_Cal":      sRange = "OBL_To"
    Case "PAY_From_Cal":    sRange = "PAY_From"
    Case "PAY_To_Cal":      sRange = "PAY_To"
    Case "LIA_From_Cal":    sRange = "LIA_From"
    Case "LIA_To_Cal":      sRange = "LIA_To"
    Case "PAY_From_Cal":    sRange = "PAY_From"
    Case "PAY_To_Cal":      sRange = "PAY_To"
End Select

frm_Calendar.Show 1
If (iAct_Dat = 0) Then GoTo Finish

ActiveSheet.Range(sRange).Value = dSel_Date

Finish:
    Call Unload(frm_Calendar)
    Exit Sub
End Sub

Public Sub Disable_Verify(ws As Worksheet)
On Error Resume Next

ProtectSheet(ws) = False

ws.Shapes.Range(Array("cmd_Verify")).Select
With Selection.ShapeRange.Glow
    .Color.ObjectThemeColor = msoThemeColorAccent2
    .Color.TintAndShade = 0
    .Color.Brightness = 0
    .Transparency = 0
    .Radius = 2
End With

With Selection.ShapeRange.Fill
    .Visible = msoTrue
    .ForeColor.ObjectThemeColor = msoThemeColorAccent2
    .ForeColor.TintAndShade = 0
    .ForeColor.Brightness = 0
    .Transparency = 0
    .Solid
End With

ProtectSheet(ws) = True
End Sub

Public Sub Enable_Verify(ws As Worksheet)
On Error Resume Next

ProtectSheet(ws) = False

ActiveSheet.Shapes.Range(Array("cmd_Verify")).Select
With Selection.ShapeRange.Fill
    .Visible = msoTrue
    .ForeColor.RGB = RGB(0, 176, 80)
    .Transparency = 0
    .Solid
End With

With Selection.ShapeRange.Glow
    .Color.RGB = RGB(0, 176, 80)
    .Transparency = 0
    .Radius = 2
End With

ProtectSheet(ws) = True
End Sub

Private Sub DeveloperMode()
Dim ws As Worksheet

For Each ws In ThisWorkbook.Worksheets
    ws.Visible = xlSheetVisible
    ProtectSheet(ws) = False
Next ws
End Sub

Private Sub Clear_Tool()
Call Clear_VAT(ws_VAT)
Call Table_Clear(ws_Contents.ListObjects("tbl_VAT"))

ws_Contents.Range("Client_Name") = ""
ws_Contents.Range("Register") = 0
ws_Contents.Range("Auth_Code") = ""
ws_Contents.Range("Token") = ""
ws_Contents.Range("Refresh_Token") = ""

Call Clear_Table(ws_VAT, "Start_Obligations")
Call Clear_Table(ws_VAT, "Start_Liabilities")
Call Clear_Table(ws_VAT, "Start_Payments")

ws_VAT.Range("E9").Value = ""
ws_VAT.Range("E11").Value = ""
ws_VAT.Range("E13").Value = ""
End Sub


Attribute VB_Name = "mod_Sheet"
Option Explicit

Public Sub Sheet_Activate(ws As Worksheet)
If (ws.Name <> ws_VAT.Name) Then Exit Sub
If (ws.Range("H2").Value = 1) Then Exit Sub

If (ws.Range("K2").Value = "VERIFY") Then
    Call Check_Refs
Else
    Call Check_Values
End If
End Sub

Public Sub Sheet_Change(Target As Range, ws As Worksheet)
If (ws.Name <> ws_VAT.Name) Then Exit Sub
If (bRunning) Then Exit Sub

If (Target.AddressLocal = ws.Range("OBL_From").AddressLocal) Then
    If (IsDate(ws.Range("OBL_From").Value)) Then ws.Range("OBL_To").Select
    Exit Sub
End If

If (Target.AddressLocal = ws.Range("OBL_To").AddressLocal) Then
    If (IsDate(ws.Range("OBL_To").Value)) Then ws.Range("OBL_Comp").Select
    Exit Sub
End If

If (Target.AddressLocal = ws.Range("LIA_From").AddressLocal) Then
    If (IsDate(ws.Range("LIA_From").Value)) Then ws.Range("LIA_To").Select
    Exit Sub
End If

If (Target.AddressLocal = ws.Range("LIA_To").AddressLocal) Then
    If (IsDate(ws.Range("LIA_To").Value)) Then ws.Range("LIA_Comp").Select
    Exit Sub
End If

If (Target.AddressLocal = ws.Range("LIA_From").AddressLocal) Then
    If (IsDate(ws.Range("LIA_From").Value)) Then ws.Range("LIA_To").Select
    Exit Sub
End If

If (Target.AddressLocal = ws.Range("PAY_To").AddressLocal) Then
    If (IsDate(ws.Range("PAY_To").Value)) Then ws.Range("PAY_Comp").Select
    Exit Sub
End If

If (Target.AddressLocal = ws.Range("K_1").AddressLocal Or Target.AddressLocal = ws.Range("K_1").Offset(0, 1).AddressLocal) Then
    ws.Range("K_1").Offset(0, 4).Value = Show_Status(Range("K_1").Offset(0, 1))
    GoTo Force_Verif
ElseIf (Target.AddressLocal = ws.Range("K_2").AddressLocal Or Target.AddressLocal = ws.Range("K_2").Offset(0, 1).AddressLocal) Then
    ws.Range("K_2").Offset(0, 4).Value = Show_Status(Range("K_2").Offset(0, 1))
    GoTo Force_Verif
ElseIf (Target.AddressLocal = ws.Range("K_3").AddressLocal Or Target.AddressLocal = ws.Range("K_3").Offset(0, 1).AddressLocal) Then
    ws.Range("K_3").Offset(0, 4).Value = Show_Status(Range("K_3").Offset(0, 1))
    GoTo Force_Verif
ElseIf (Target.AddressLocal = ws.Range("K_4").AddressLocal Or Target.AddressLocal = ws.Range("K_4").Offset(0, 1).AddressLocal) Then
    ws.Range("K_4").Offset(0, 4).Value = Show_Status(Range("K_4").Offset(0, 1))
    GoTo Force_Verif
ElseIf (Target.AddressLocal = ws.Range("K_5").AddressLocal Or Target.AddressLocal = ws.Range("K_5").Offset(0, 1).AddressLocal) Then
    ws.Range("K_5").Offset(0, 4).Value = Show_Status(Range("K_5").Offset(0, 1))
    GoTo Force_Verif
ElseIf (Target.AddressLocal = ws.Range("K_6").AddressLocal Or Target.AddressLocal = ws.Range("K_6").Offset(0, 1).AddressLocal) Then
    ws.Range("K_6").Offset(0, 4).Value = Show_Status(Range("K_6").Offset(0, 1))
    GoTo Force_Verif
ElseIf (Target.AddressLocal = ws.Range("K_7").AddressLocal Or Target.AddressLocal = ws.Range("K_7").Offset(0, 1).AddressLocal) Then
    ws.Range("K_7").Offset(0, 4).Value = Show_Status(Range("K_7").Offset(0, 1))
    GoTo Force_Verif
ElseIf (Target.AddressLocal = ws.Range("K_8").AddressLocal Or Target.AddressLocal = ws.Range("K_8").Offset(0, 1).AddressLocal) Then
    ws.Range("K_8").Offset(0, 4).Value = Show_Status(Range("K_8").Offset(0, 1))
    GoTo Force_Verif
ElseIf (Target.AddressLocal = ws.Range("K_9").AddressLocal Or Target.AddressLocal = ws.Range("K_9").Offset(0, 1).AddressLocal) Then
    ws.Range("K_9").Offset(0, 4).Value = Show_Status(Range("K_9").Offset(0, 1))
    GoTo Force_Verif
End If

GoTo Finishing

Force_Verif:
    If (ws.Range("K2").Value = "") Then
        ws.Range("VAT_Status").Offset(2, 0).Value = False  '// Force verification
        ws.Range("K2").Value = ""                          '// Not Verifying
        
        Call Disable_Verify(ws)
    End If
    
Finishing:
End Sub

Public Sub Sheet_SelectionChange(Target As Range, ws As Worksheet)
Dim TableRange As Range
Dim curRangeRow As Range

On Error GoTo HErr

If (ws.Name <> ws_VAT.Name) Then Exit Sub

If (ws.Range("Start_Obligations").Offset(0, -1).Value = "0" Or bFilling) Then
    ws.Shapes.Range(Array("cmd_Action")).Visible = False
    Exit Sub
End If

Set Target = Target.Areas(1).Cells(1, 1)
Set TableRange = ws.Range("Start_Obligations").Offset(1, 0).Resize(ws.Range("Start_Obligations").Offset(0, -1).Value, 7)

If (Not Intersect(Target, TableRange) Is Nothing) Then

    ProtectSheet(ws) = False
    
    If (ws.Range("B21").Value <> "") Then
        Set curRangeRow = ws.Range(ws.Range("B21").Value)
        Call No_Fill(curRangeRow)
    End If
    
    Set curRangeRow = ws.Cells(Target.Row, 3).Offset(0, 0).Resize(1, 7)
    
    ws.Range("B21").Value = curRangeRow.Address
    
    Call Fill_Line(curRangeRow)
    
    ws.Shapes.Range(Array("cmd_Action")).Visible = True

    If (ws.Cells(Target.Row, 8) = "SUBMIT") Then
        ws.Shapes.Range(Array("cmd_Action")).Select
        Selection.ShapeRange(1).TextFrame2.TextRange.Characters.Text = "SUBMIT"
    Else
        ws.Shapes.Range(Array("cmd_Action")).Select
        Selection.ShapeRange(1).TextFrame2.TextRange.Characters.Text = "VIEW"
    End If
    
    ws.Range("B19").Value = Cells(Target.Row, 10)  '// Period
    ws.Range("B20").Value = Cells(Target.Row, 9)   '// VAT
    
    Target.Select
    
    ProtectSheet(ws) = True
End If

Exit Sub
HErr:
    MsgBox Err.Description, vbCritical, c_PROJECT
End Sub

Private Sub Fill_Line(rRng As Range)
With rRng.Interior
    .Pattern = xlSolid
    .PatternColorIndex = xlAutomatic
    .ThemeColor = xlThemeColorAccent2
    .TintAndShade = 0.799981688894314
    .PatternTintAndShade = 0
End With
End Sub

Private Sub No_Fill(rRng As Range)
On Error Resume Next

With rRng.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
End Sub


Attribute VB_Name = "mod_Table"
Option Explicit
Option Private Module

Public Property Get Table(lo As ListObject, Optional MaximumColumns As Long = 0) As Variant
    
    Dim Arr() As Variant
    Dim RowCount As Long
    Dim ColCount As Long
    
    With lo
        If .DataBodyRange Is Nothing Then
            ReDim Arr(0, 1 To lo.Range.Columns.Count)
        Else
            RowCount = .DataBodyRange.Rows.Count
            ColCount = .DataBodyRange.Columns.Count
            If Not MaximumColumns < 1 Then If ColCount > MaximumColumns Then ColCount = MaximumColumns
            If RowCount = 1 And ColCount = 1 Then
                ReDim Arr(1 To 1, 1 To 1)
                Arr(1, 1) = .DataBodyRange.Cells(1, 1).Value2
            Else
                Arr() = .DataBodyRange.Cells(1, 1).Resize(RowCount, ColCount).Value2
            End If
        End If
    End With
    Table = Arr

End Property

Public Property Let Table(lo As ListObject, Optional MaximumColumns As Long = 0, New_Data As Variant)

    Dim oRange As Range
    Dim ColCount As Long
    Dim RowCount As Long
    
    If IsArray(New_Data) Then
        RowCount = UBound(New_Data, 1)
        ColCount = IIf(lo.Range.Columns.Count > UBound(New_Data, 2), UBound(New_Data, 2), lo.Range.Columns.Count)
    Else
        RowCount = 1
        ColCount = 1
    End If
    
    If Not MaximumColumns < 1 Then If ColCount > MaximumColumns Then ColCount = MaximumColumns

    With lo
        If .DataBodyRange Is Nothing Then
            If Not RowCount < 1 Then
                .Resize .Range.Resize(1 + RowCount, .Range.Columns.Count)
                .Range.Cells(2, 1).Resize(RowCount, ColCount).Value = New_Data
            End If
        Else
            If RowCount < 1 Then
                Set oRange = .DataBodyRange
                .Resize .Range.Cells(1, 1).Resize(2, .DataBodyRange.Columns.Count)
                oRange.ClearContents
            Else
                Select Case .DataBodyRange.Rows.Count
                    Case UBound(New_Data, 1)
                        .DataBodyRange.Cells(1, 1).Resize(RowCount, ColCount).Value = New_Data
                    Case Is < UBound(New_Data, 1)
                        .Resize .Range.Resize(1 + RowCount, .Range.Columns.Count)
                        .Range.Cells(2, 1).Resize(RowCount, ColCount).Value = New_Data
                    Case Is > UBound(New_Data, 1)
                        Set oRange = .DataBodyRange
                        .Resize .Range.Resize(1 + RowCount, .Range.Columns.Count)
                        .DataBodyRange.Rows(1).Offset(.DataBodyRange.Rows.Count).Resize(oRange.Rows.Count - .DataBodyRange.Rows.Count).ClearContents
                        .Range.Cells(2, 1).Resize(RowCount, ColCount).Value = New_Data
                End Select
            End If
        End If
    End With
        
End Property

Public Sub Table_Clear(lo As ListObject)

    If Not lo.DataBodyRange Is Nothing Then
        If Not lo.AutoFilter Is Nothing Then lo.AutoFilter.ShowAllData
        lo.DataBodyRange.Delete
    End If

End Sub

Public Sub Table_AppendData(lo As ListObject, New_Data As Variant, Optional MaximumColumns As Long = 0)

    Dim oRange As Range
    Dim ColCount As Long
    Dim RowCount As Long
    
    If IsArray(New_Data) Then
        RowCount = UBound(New_Data, 1)
        ColCount = IIf(lo.Range.Columns.Count > UBound(New_Data, 2), UBound(New_Data, 2), lo.Range.Columns.Count)
    Else
        RowCount = 1
        ColCount = 1
    End If
    
    If Not MaximumColumns < 1 Then If ColCount > MaximumColumns Then ColCount = MaximumColumns
    
    With lo
        If .DataBodyRange Is Nothing Then
            Table(lo, ColCount) = New_Data
        Else
            Set oRange = .DataBodyRange.Cells(1, 1).Offset(.DataBodyRange.Rows.Count).Resize(RowCount, ColCount)
            .Resize .Range.Cells(1, 1).Resize(.Range.Rows.Count + RowCount, .Range.Columns.Count)
            oRange.Value = New_Data
        End If
    End With

End Sub

Public Sub Table_AddRow(lo As ListObject)

    If lo.DataBodyRange Is Nothing Then lo.ListRows.Add Else lo.ListRows.Add lo.ListRows.Count + 1

End Sub

Public Sub Table_DeleteRow(lo As ListObject)

    If Not lo.DataBodyRange Is Nothing Then lo.ListRows(lo.ListRows.Count).Delete

End Sub

Public Function Table_ColumnRange(lo As ListObject, ColumnNameOrIndex As Variant) As Range
    
    With lo.ListColumns(ColumnNameOrIndex)
        If .DataBodyRange Is Nothing Then Set Table_ColumnRange = .Range.Cells(1, 1).Offset(1) Else Set Table_ColumnRange = .DataBodyRange
    End With
    
End Function

Public Function Table_HeaderIndex(lo As ListObject, ColumnName As String) As Long
   
   Table_HeaderIndex = lo.ListColumns(ColumnName).Index

End Function



Public Function ArrayMatch(InputArray As Variant, ColIndex As Long, UseLike As Boolean, ParamArray Values()) As Long()

    Dim i As Long
    Dim v As Long
    Dim found As Boolean
    Dim ValuesList() As Variant
    Dim Value As Variant
    Dim Output() As Long
    
    If UBound(InputArray, 1) = 0 Then
    
        ReDim Output(0)

    Else
    
        ReDim Output(1 To UBound(InputArray, 1))
        
        ValuesList = ListFromParam(Array(Values))
            
        For i = 1 To UBound(InputArray, 1)
            For Each Value In ValuesList
                If UseLike Then
                    If InputArray(i, ColIndex) Like Value Then
                        found = True
                        Exit For
                    End If
                Else
                    If CStr(InputArray(i, ColIndex)) = CStr(Value) Then
                        found = True
                        Exit For
                    End If
                End If
            Next
            If found Then
                found = False
                v = v + 1
                Output(v) = i
            End If
        Next i
        
        If v = 0 Then
            ReDim Output(0)
        Else
            ReDim Preserve Output(1 To v)
        End If
        
    End If
    
    ArrayMatch = Output

End Function

Public Function MatchUniques(Arr As Variant, ColIndex As Long) As Long()

    Dim iRow As Long
    Dim iAbove As Long
    Dim iNext As Long

    Dim Output() As Long
    
    If UBound(Arr, 1) = 0 Then
    
        ReDim Output(0 To 0, 1 To UBound(Arr, 2))
    
    Else
    
        ReDim Output(1 To UBound(Arr, 1))
        
        For iRow = 1 To UBound(Arr, 1)
            For iAbove = 1 To iRow - 1
                If Arr(iRow, ColIndex) = Arr(iAbove, ColIndex) Then Exit For
            Next iAbove
            If iAbove = iRow Then
                iNext = iNext + 1
                Output(iNext) = iRow
            End If
        Next iRow
        
        If iNext = 0 Then
            ReDim Output(0 To 0)
        Else
            ReDim Preserve Output(1 To iNext)
        End If
        
    End If
        
    MatchUniques = Output
    
End Function

Public Function ArrayIndex(InputArray As Variant, IndexArray() As Long, ParamArray ColIndex()) As Variant

    Dim i As Long
    Dim j As Long
    Dim ColList As Variant
    Dim Output() As Variant
    
    ColList = ListFromParam(Array(ColIndex))
    
    Select Case True
        Case UBound(InputArray) = 0, UBound(IndexArray) = 0
            ReDim Output(0, 1 To UBound(ColList))
        Case Else
            ReDim Output(1 To UBound(IndexArray), 1 To UBound(ColList))
            For i = 1 To UBound(IndexArray)
                For j = 1 To UBound(ColList)
                    Output(i, j) = InputArray(IndexArray(i), ColList(j))
                Next j
            Next i
    End Select
    
    ArrayIndex = Output

End Function

Public Function IndexArray(LowerBound As Long, UpperBound As Long) As Long()

    Dim i As Long
    Dim Output() As Long
    
    ReDim Output(LowerBound To UpperBound)
    
    For i = LowerBound To UpperBound
        Output(i) = i
    Next i
    
    IndexArray = Output

End Function

Public Function IndexArray_2d(LowerBound As Long, UpperBound As Long) As Variant()

    Dim i As Long
    Dim Output() As Variant
    
    ReDim Output(LowerBound To UpperBound, 1 To 1)
    
    For i = LowerBound To UpperBound
        Output(i, 1) = i
    Next i
    
    IndexArray_2d = Output

End Function

Public Function ListFromParam(InputParam) As Variant()

    Dim v As Long
    Dim v1 As Variant
    Dim v2 As Variant
    Dim Output() As Variant
    
    For Each v1 In InputParam
        If IsArray(v1) Then
            For Each v2 In ListFromParam(v1)
                v = v + 1
            Next v2
        Else
            v = v + 1
        End If
    Next v1
    
    If v = 0 Then
        ReDim Output(0)
    Else
        ReDim Output(1 To v)
        v = 0
        For Each v1 In InputParam
            If IsArray(v1) Then
                For Each v2 In ListFromParam(v1)
                    v = v + 1
                    Output(v) = v2
                Next v2
            Else
                v = v + 1
                Output(v) = v1
            End If
        Next v1
    End If
    
    ListFromParam = Output

End Function

Public Function ListFromParam_2d(InputParam) As Variant()

    Dim v As Long
    Dim v1 As Variant
    Dim v2 As Variant
    Dim Output() As Variant
    
    For Each v1 In InputParam
        If IsArray(v1) Then
            For Each v2 In ListFromParam_2d(v1)
                v = v + 1
            Next v2
        Else
            v = v + 1
        End If
    Next v1
    
    If v = 0 Then
        ReDim Output(0, 1 To 1)
    Else
        ReDim Output(1 To v, 1 To 1)
        v = 0
        For Each v1 In InputParam
            If IsArray(v1) Then
                For Each v2 In ListFromParam_2d(v1)
                    v = v + 1
                    Output(v, 1) = v2
                Next v2
            Else
                v = v + 1
                Output(v, 1) = v1
            End If
        Next v1
    End If
    
    ListFromParam_2d = Output

End Function

Public Function GetSelectColumns(InputArr As Variant, ParamArray SelectColumns()) As Variant

    Dim i As Long
    Dim j As Long
    Dim v As Long
    Dim List() As Variant
    Dim Output() As Variant
    
    ' Ensure list is a straight list
    List = SelectColumns
    List = CreateListFromJagged(List) 'Can comment out if not using jagged arrays
    
    ' Setup output
    ReDim Output(1 To UBound(InputArr, 1), 1 To UBound(List) + (1 - LBound(List)))
    
    ' Loop through each row, adding select columns to output
    For i = 1 To UBound(InputArr, 1)
        v = 0
        For j = LBound(List) To UBound(List)
            v = v + 1
            If Not List(j) = 0 Then
                Output(i, v) = InputArr(i, List(j))
            End If
        Next j
    Next i

    ' Pass to function
    GetSelectColumns = Output

End Function

Private Function CreateListFromJagged(InputArray) As Variant

    Dim iCount As Long
    Dim vItem As Variant
    Dim vSub As Variant
    Dim Arr As Variant
    Dim Calc() As Variant
    
    ' Take array
    Arr = InputArray
    
    ' Loop until we've extracted every array
    Do
    
        ' Count length to setup calc
        iCount = 0
        For Each vItem In Arr
            If IsArray(vItem) Then
                For Each vSub In vItem
                    iCount = iCount + 1
                Next vSub
            Else
                iCount = iCount + 1
            End If
        Next vItem
        ReDim Calc(1 To iCount)
        
        ' Put into output
        iCount = 0
        For Each vItem In Arr
            If IsArray(vItem) Then
                For Each vSub In vItem
                    iCount = iCount + 1
                    Calc(iCount) = vSub
                Next vSub
            Else
                iCount = iCount + 1
                Calc(iCount) = vItem
            End If
        Next vItem
        
        ' Count items in Calc to ensure we've got all arrays
        iCount = 0
        For Each vItem In Calc
            If IsArray(vItem) Then
                For Each vSub In vItem
                    iCount = iCount + 1
                Next vSub
            Else
                iCount = iCount + 1
            End If
        Next vItem
        
        ' Pass back to arr
        Arr = Calc
        
    Loop Until iCount = UBound(Calc)
    
    ' Pass to function
    CreateListFromJagged = Arr

End Function


Attribute VB_Name = "mod_WEB"
Option Explicit

Public Function WEB_POST(sURL As String, sBody As String, Optional sContent As String, Optional sAccept As String, Optional sAuth As String) As String
Dim objHTTP As Object
Dim strRet As String
Dim intPos1 As Integer
Dim intPos2 As Integer

Set objHTTP = CreateObject("MSXML2.ServerXMLHTTP")

objHTTP.Open "POST", sURL, False

'// Headers
If (sContent <> "") Then objHTTP.setRequestHeader "Content-Type", sContent
If (sAccept <> "") Then objHTTP.setRequestHeader "Accept", sAccept
If (sAuth <> "") Then objHTTP.setRequestHeader "Authorization", sAuth

objHTTP.send (sBody)

'// Response
strRet = objHTTP.responseText

'// Close object
Set objHTTP = Nothing

'// Extract result
intPos1 = InStr(strRet, "Result>") + 7
intPos2 = InStr(strRet, "<!--")
If (intPos1 > 7 And intPos2 > 0) Then strRet = Mid(strRet, intPos1, intPos2 - intPos1)

WEB_POST = strRet
End Function

Public Function WEB_GET(sURL As String, sParam As String, Optional sSOAP As String, Optional sContent As String, Optional sAccept As String, Optional sAuth As String, Optional sGov As String) As String
Dim sXML As String
Dim objDom As Object
Dim objHTTP As Object
Dim strRet As String
Dim intPos1 As Integer
Dim intPos2 As Integer

sXML = "<?xml version=""1.0"" encoding=""utf-8""?>" & _
         "<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">" & _
         "<soap:Body>" & _
         "<CheckActCode xmlns=""http://tempuri.org/"">" & _
         "<actCode></actcode>" & _
         "</checkactcode>" & _
         "</soap:body>" & _
         "</soap:envelope>"

'// Create objects to DOMDocument and XMLHTTP
Set objDom = CreateObject("MSXML2.DOMDocument")
Set objHTTP = CreateObject("MSXML2.XMLHTTP")

'// Load XML
objDom.async = False
objDom.LoadXML sXML

'// Open the webservice
objHTTP.Open "GET", sURL & sParam, False

'// Headers
If (sSOAP <> "") Then objHTTP.setRequestHeader "SOAPAction", sSOAP
If (sContent <> "") Then objHTTP.setRequestHeader "Content-Type", sContent
If (sAccept <> "") Then objHTTP.setRequestHeader "Accept", sAccept
If (sAuth <> "") Then objHTTP.setRequestHeader "Authorization", sAuth
If (sGov <> "") Then objHTTP.setRequestHeader "Gov-Test-Scenario", sGov

'// Send XML command
objHTTP.send objDom.XML

'// Get all response text from webservice
strRet = objHTTP.responseText

'// Close object
Set objHTTP = Nothing

'// Extract result
intPos1 = InStr(strRet, "Result>") + 7
intPos2 = InStr(strRet, "<!--")
If (intPos1 > 7 And intPos2 > 0) Then strRet = Mid(strRet, intPos1, intPos2 - intPos1)

'// Return result
WEB_GET = strRet

Exit Function
Err_PW:
    WEB_GET = "Error: " & Err.Number & " - " & Err.Description
End Function

'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Public Function Get_Auth() As Boolean
bConnected = False
Get_Auth = False

frm_WEB.open_url ws_Contents.Range("Auth_URL").Value
frm_WEB.Show vbModal

'// Stop if the user does't not connect
If (Not bConnected) Then Exit Function

If (ws_Contents.Range("Auth_Code").Value <> "") Then
    Get_Auth = True
    
    ws_Contents.Range("Token").Value = ""
    ws_Contents.Range("Refresh_Token").Value = ""
End If
End Function

Public Function Get_Token() As Boolean
Dim sURL As String
Dim sBody As String
Dim sResponse As String
Dim sContent As String
Dim sAccept As String
Dim sCode As String
Dim sError As String

DoEvents

'// Get Token
sURL = ws_Contents.Range("Token_URL").Value
sBody = ws_Contents.Range("Token_Param").Value
sContent = "application/x-www-form-urlencoded"
sAccept = "application/vnd.hmrc.1.0+json"

sResponse = WEB_POST(sURL, sBody, sContent, sAccept)

ws_Contents.Range("Token").Value = Get_Parameters(sResponse, "access_token")(0)
ws_Contents.Range("Refresh_Token").Value = Get_Parameters(sResponse, "refresh_token")(0)

If (InStr(1, sResponse, "access_token") > 0) Then
    Get_Token = True
    
    '// Update Table
    ws_Contents.ListObjects("tbl_VAT").ListRows.Item(1).Range(1, 4) = ws_Contents.Range("Token").Value
    ws_Contents.ListObjects("tbl_VAT").ListRows.Item(1).Range(1, 5) = ws_Contents.Range("Refresh_Token").Value
    
    ws_Contents.Range("Time_Token").Offset(0, -2).Value = Now
Else
    Get_Token = False
    
    sCode = Get_Parameters(sResponse, "error")(0)
    sError = Get_Parameters(sResponse, "error_description")(0)
        
    MsgBox "Error requesting data on server. (Get_Token)" & Chr(13) & Chr(13) & sCode & Chr(13) & sError, vbCritical + vbOKOnly, c_PROJECT

    '// Update Table
    ws_Contents.ListObjects("tbl_VAT").ListRows.Item(1).Range(1, 4) = ""
    ws_Contents.ListObjects("tbl_VAT").ListRows.Item(1).Range(1, 5) = ""
End If
End Function

Public Function Refresh_Token() As Boolean
Dim sURL As String
Dim sBody As String
Dim sResponse As String
Dim sContent As String
Dim sAccept As String

'// Refresh Token
sURL = ws_Contents.Range("Refresh_Token_URL").Value
sBody = ws_Contents.Range("Refresh_Token_Param").Value
sContent = "application/x-www-form-urlencoded"
sAccept = "application/vnd.hmrc.1.0+json"

sResponse = WEB_POST(sURL, sBody, sContent, sAccept)

ws_Contents.Range("Token").Value = Get_Parameters(sResponse, "access_token")(0)
ws_Contents.Range("Refresh_Token").Value = Get_Parameters(sResponse, "refresh_token")(0)

If (InStr(1, sResponse, "access_token") > 0) Then
    Refresh_Token = True
    
    '// Update Table
    ws_Contents.ListObjects("tbl_VAT").ListRows.Item(1).Range(1, 4) = ws_Contents.Range("Token").Value
    ws_Contents.ListObjects("tbl_VAT").ListRows.Item(1).Range(1, 5) = ws_Contents.Range("Refresh_Token").Value
    
    ws_Contents.Range("Time_Token").Offset(0, -2).Value = Now
Else
    Refresh_Token = False
    
    '// Update Table
    ws_Contents.ListObjects("tbl_VAT").ListRows.Item(1).Range(1, 4) = ""
    ws_Contents.ListObjects("tbl_VAT").ListRows.Item(1).Range(1, 5) = ""
End If
End Function

Public Function Submit_VAT(sVat As String) As Variant
Dim sURL        As String
Dim sBody       As String
Dim sResponse   As String
Dim sContent    As String
Dim sAccept     As String
Dim sAuth       As String
Dim sError      As String
Dim sCode       As String
Dim Arr         As Variant

'// Refresh Token
sURL = Replace(ws_Contents.Range("Submit_URL").Value, "xxxxxxxxx", sVat)
sBody = ActiveSheet.Range("Submit_Body").Value
sContent = "application/json"
sAccept = "application/vnd.hmrc.1.0+json"
sAuth = "Bearer " & ws_Contents.Range("Token").Value

'// Period must be URL-encoded
'sBody = Replace(sBody, "#", "%23")
sResponse = WEB_POST(sURL, sBody, sContent, sAccept, sAuth)

If (sResponse = "") Then
    MsgBox "Error requesting data on server. (Submit_VAT)" & Chr(13) & Chr(13) & sCode & Chr(13) & sError, vbCritical + vbOKOnly, c_PROJECT
    ReDim Arr(0)
ElseIf (InStr(1, sResponse, "message") > 0) Then
    If (InStr(1, sResponse, "statusCode") > 0) Then
        sCode = Get_Parameters(sResponse, "statusCode")(0)
    Else
        sCode = Get_Parameters(sResponse, "code")(0)
    End If
    
    sError = Get_Parameters(sResponse, "message")(0)
        
    MsgBox "Error requesting data on server. (Submit_VAT)" & Chr(13) & Chr(13) & sCode & Chr(13) & sError & vbCrLf & vbCrLf & sResponse, vbCritical + vbOKOnly, c_PROJECT
    ReDim Arr(0)
Else
    Arr = Split_Submit(sResponse)
End If

Submit_VAT = Arr
End Function

Public Function Retrive_Data(iType As eRetrieve, sVat As String, sFrom As String, sTo As String, sPeriod As String) As Variant
Dim sURL        As String
Dim sParam      As String
Dim sResponse   As String
Dim sContent    As String
Dim sAccept     As String
Dim sAuth       As String
Dim sSOAP       As String
Dim sGov        As String
Dim sError      As String
Dim sCode       As String
Dim Arr         As Variant

Select Case iType
    Case Obligations
        sURL = Replace(ws_Contents.Range("Obligations_URL").Value, "xxxxxxxxx", sVat)
        sGov = ""
        sParam = "from=" & sFrom & "&to=" & sTo
        
    Case Liabilities
        sURL = Replace(ws_Contents.Range("Liabilities_URL").Value, "xxxxxxxxx", sVat)
        If (ws_Contents.Range("Base_URL") = "Sandbox Base") Then sGov = "MULTIPLE_LIABILITIES"
        sParam = "from=" & sFrom & "&to=" & sTo

    Case Payments
        sURL = Replace(ws_Contents.Range("Payments_URL").Value, "xxxxxxxxx", sVat)
        If (ws_Contents.Range("Base_URL") = "Sandbox Base") Then sGov = "MULTIPLE_PAYMENTS"
        sParam = "from=" & sFrom & "&to=" & sTo
        
    Case VAT
        '// Period must be URL-encoded
        sPeriod = Replace(sPeriod, "#", "%23")
    
        sURL = Replace(ws_Contents.Range("View_URL").Value, "xxxxxxxxx", sVat)
        sURL = Replace(sURL, "yyyyyyyyy", sPeriod)
        sGov = ""
        sParam = ""
End Select

sSOAP = "http://tempuri.org/MyMethod"
sContent = "application/json"
sAccept = "application/vnd.hmrc.1.0+json"
sAuth = "Bearer " & ws_Contents.Range("Token").Value

sResponse = WEB_GET(sURL, sParam, sSOAP, sContent, sAccept, sAuth, sGov)

If (sResponse = "") Then
    'MsgBox "Error requesting data on server." & Chr(13) & Chr(13) & sCode & Chr(13) & sError, vbCritical + vbOKOnly, c_PROJECT
    ReDim Arr(0)
ElseIf (InStr(1, sResponse, "message") > 0) Then
    If (InStr(1, sResponse, "statusCode") > 0) Then
        sCode = Get_Parameters(sResponse, "statusCode")(0)
    Else
        sCode = Get_Parameters(sResponse, "code")(0)
    End If
    
    sError = Get_Parameters(sResponse, "message")(0)
        
    MsgBox "Error requesting data on server. (Retrieve Data)" & Chr(13) & Chr(13) & sCode & Chr(13) & sError, vbCritical + vbOKOnly, c_PROJECT
    ReDim Arr(0)
Else
    Select Case iType
        Case Obligations:   Arr = Split_Obligations(sVat, sResponse)
        Case Liabilities:   Arr = Split_Liabilities(sResponse)
        Case Payments:      Arr = Split_Payments(sResponse)
        Case VAT:           Arr = Split_VAT(sResponse)
    End Select
End If

Retrive_Data = Arr
End Function
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Private Function Split_Obligations(sVat As String, sResponse As String) As Variant
Dim Arr As Variant
Dim Arr_O() As Variant
Dim iCount As Integer
Dim iMax As Integer
Dim iPosI As Integer
Dim iPosF As Integer
Dim sKey As String

If (InStr(1, sResponse, "obligations") = 0) Then Exit Function
Arr = Get_Parameters(sResponse, "start")

iMax = UBound(Arr) + 1
ReDim Arr_O(1 To iMax, 1 To 8)

sKey = "{start:"

'// If it has just one line
If (iMax = 1) Then
    Arr_O(1, 8) = "'" & Get_Parameters(sResponse, "periodKey")(0)
    Arr_O(1, 1) = Get_Parameters(sResponse, "start")(0)
    Arr_O(1, 2) = Get_Parameters(sResponse, "end")(0)
    Arr_O(1, 3) = Get_Parameters(sResponse, "due")(0)
    Arr_O(1, 4) = IIf(Get_Parameters(sResponse, "status")(0) = "F", "Filed", "Outstanding")
    Arr_O(1, 5) = Get_Parameters(sResponse, "received")(0)
    Arr_O(1, 6) = IIf(Arr_O(1, 4) = "Filed", "VIEW", "SUBMIT")
    Arr_O(1, 7) = sVat
Else
    '// Separate rows by taxPeriod:{
    iPosI = 1
    iPosI = 0
    iCount = 1

    Do
        iPosI = InStr(iPosI + 1, sResponse, sKey)
        If (iPosI = 0) Then GoTo Finish
        
        iPosF = InStr(iPosI + 1, sResponse, sKey)
        If (iPosF = 0) Then iPosF = Len(sResponse)
            
        Arr_O(iCount, 8) = "'" & Get_Parameters(Mid(sResponse, iPosI, iPosF - iPosI), "periodKey")(0)
        Arr_O(iCount, 1) = Get_Parameters(Mid(sResponse, iPosI, iPosF - iPosI), "start")(0)
        Arr_O(iCount, 2) = Get_Parameters(Mid(sResponse, iPosI, iPosF - iPosI), "end")(0)
        Arr_O(iCount, 3) = Get_Parameters(Mid(sResponse, iPosI, iPosF - iPosI), "due")(0)
        Arr_O(iCount, 4) = IIf(Get_Parameters(Mid(sResponse, iPosI, iPosF - iPosI), "status")(0) = "F", "Filed", "Outstanding")
        Arr_O(iCount, 5) = Get_Parameters(Mid(sResponse, iPosI, iPosF - iPosI), "received")(0)
        Arr_O(iCount, 6) = IIf(Arr_O(iCount, 4) = "Filed", "VIEW", "SUBMIT")
        Arr_O(iCount, 7) = sVat
        
        iCount = iCount + 1
        iPosI = iPosF - Len(sKey)
    Loop Until (iPosI = 0)

End If

Finish:
    Split_Obligations = Arr_O
End Function

Private Function Split_Liabilities(sResponse As String) As Variant
Dim Arr As Variant
Dim Arr_L() As Variant
Dim iCount As Integer
Dim iMax As Integer
Dim sKey As String
Dim iPosI As Integer
Dim iPosF As Integer

If (InStr(1, sResponse, "taxPeriod") = 0) Then Exit Function
Arr = Get_Parameters(sResponse, "from")

iMax = UBound(Arr) + 1
ReDim Arr_L(1 To iMax, 1 To 9)

sKey = "taxPeriod:{"

'// If it has just one line
If (iMax = 1) Then
    Arr_L(1, 1) = Get_Parameters(sResponse, "from")(0)
    Arr_L(1, 2) = Get_Parameters(sResponse, "to")(0)
    Arr_L(1, 3) = Get_Parameters(sResponse, "type")(0)
    Arr_L(1, 4) = ""
    Arr_L(1, 5) = Format(Get_Parameters(sResponse, "originalAmount")(0), "#,##0.00")
    Arr_L(1, 6) = Format(Get_Parameters(sResponse, "outstandingAmount")(0), "#,##0.00")
    Arr_L(1, 7) = ""
    Arr_L(1, 8) = ""
    Arr_L(1, 9) = Get_Parameters(sResponse, "due")(0)
Else

    '// Separate rows by taxPeriod:{
    iPosI = 1
    iPosI = 0
    iCount = 1

    Do
        iPosI = InStr(iPosI + 1, sResponse, sKey)
        If (iPosI = 0) Then GoTo Finish
        
        iPosF = InStr(iPosI + 1, sResponse, sKey)
        If (iPosF = 0) Then iPosF = Len(sResponse)
            
        Arr_L(iCount, 1) = Get_Parameters(Mid(sResponse, iPosI, iPosF - iPosI), "from")(0)
        Arr_L(iCount, 2) = Get_Parameters(Mid(sResponse, iPosI, iPosF - iPosI), "to")(0)
        Arr_L(iCount, 3) = Get_Parameters(Mid(sResponse, iPosI, iPosF - iPosI), "type")(0)
        Arr_L(iCount, 4) = ""
        Arr_L(iCount, 5) = Format(Get_Parameters(Mid(sResponse, iPosI, iPosF - iPosI), "originalAmount")(0), "#,##0.00")
        Arr_L(iCount, 6) = Format(Get_Parameters(Mid(sResponse, iPosI, iPosF - iPosI), "outstandingAmount")(0), "#,##0.00")
        Arr_L(iCount, 7) = ""
        Arr_L(iCount, 8) = ""
        Arr_L(iCount, 9) = Get_Parameters(Mid(sResponse, iPosI, iPosF - iPosI), "due")(0)
        
        iCount = iCount + 1
        iPosI = iPosF - Len(sKey)
    Loop Until (iPosI = 0)

End If

Finish:
    Split_Liabilities = Arr_L
End Function

Private Function Split_Payments(sResponse As String) As Variant
Dim Arr As Variant
Dim Arr_P() As Variant
Dim iCount As Integer
Dim iMax As Integer
Dim iPosI As Integer
Dim iPosF As Integer
Dim sKey As String

If (InStr(1, sResponse, "payments") = 0) Then Exit Function
Arr = Get_Parameters(sResponse, "amount")

iMax = UBound(Arr) + 1
ReDim Arr_P(1 To iMax, 1 To 2)

sKey = "{amount:"

'// If it has just one line
If (iMax = 1) Then
    Arr_P(1, 1) = Format(Get_Parameters(sResponse, "amount")(0), "#,##0.00")
    Arr_P(1, 2) = Get_Parameters(sResponse, "received")(0)
Else
    '// Separate rows by {amount:
    iPosI = 1
    iPosI = 0
    iCount = 1

    Do
        iPosI = InStr(iPosI + 1, sResponse, sKey)
        If (iPosI = 0) Then GoTo Finish
        
        iPosF = InStr(iPosI + 1, sResponse, sKey)
        If (iPosF = 0) Then iPosF = Len(sResponse)
            
        Arr_P(iCount, 1) = Format(Get_Parameters(Mid(sResponse, iPosI, iPosF - iPosI), "amount")(0), "#,##0.00")
        Arr_P(iCount, 2) = Get_Parameters(Mid(sResponse, iPosI, iPosF - iPosI), "received")(0)
        
        iCount = iCount + 1
        iPosI = iPosF - Len(sKey)
    Loop Until (iPosI = 0)

End If

Finish:
    Split_Payments = Arr_P
End Function

Private Function Split_VAT(sResponse As String) As Variant
Dim Arr_V() As Variant

If (InStr(1, sResponse, "periodKey") = 0) Then Exit Function

ReDim Arr_V(1 To 1, 1 To 10)

Arr_V(1, 1) = Get_Parameters(sResponse, "periodKey")(0)
Arr_V(1, 2) = Format(Get_Parameters(sResponse, "vatDueSales")(0), "#,##0.00")
Arr_V(1, 3) = Format(Get_Parameters(sResponse, "vatDueAcquisitions")(0), "#,##0.00")
Arr_V(1, 4) = Format(Get_Parameters(sResponse, "totalVatDue")(0), "#,##0.00")
Arr_V(1, 5) = Format(Get_Parameters(sResponse, "vatReclaimedCurrPeriod")(0), "#,##0.00")
Arr_V(1, 6) = Format(Get_Parameters(sResponse, "netVatDue")(0), "#,##0.00")
Arr_V(1, 7) = Format(Get_Parameters(sResponse, "totalValueSalesExVAT")(0), "#,##0.00")
Arr_V(1, 8) = Format(Get_Parameters(sResponse, "totalValuePurchasesExVAT")(0), "#,##0.00")
Arr_V(1, 9) = Format(Get_Parameters(sResponse, "totalValueGoodsSuppliedExVAT")(0), "#,##0.00")
Arr_V(1, 10) = Format(Get_Parameters(sResponse, "totalAcquisitionsExVAT")(0), "#,##0.00")

Finish:
    Split_VAT = Arr_V
End Function

Private Function Split_Submit(sResponse As String) As Variant
Dim Arr_V() As Variant

If (InStr(1, sResponse, "processingDate") = 0) Then Exit Function

ReDim Arr_V(1 To 1, 1 To 4)

Arr_V(1, 1) = Get_Parameters(sResponse, "processingDate")(0)
Arr_V(1, 2) = Get_Parameters(sResponse, "paymentIndicator")(0)
Arr_V(1, 3) = Get_Parameters(sResponse, "formBundleNumber")(0)
Arr_V(1, 4) = Get_Parameters(sResponse, "chargeRefNumber")(0)

Finish:
    Split_Submit = Arr_V
End Function
Attribute VB_Name = "ws_Contents"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ws_Help"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ws_PDF"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ws_VAT"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Call Application.Run("Sheet_Activate", ActiveSheet)
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
Call Application.Run("Sheet_Change", Target, ActiveSheet)
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
Call Application.Run("Sheet_SelectionChange", Target, ActiveSheet)
End Sub


INQUEST-PP=macro
