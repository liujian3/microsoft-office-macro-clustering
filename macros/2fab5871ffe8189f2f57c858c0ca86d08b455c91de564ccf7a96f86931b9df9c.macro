Attribute VB_Name = "EditorialMacros"
Option Explicit

Public Sub InitForEditorial()
  '
  ' Code for editorial special setups that need to be called
  '  after saving or on worksheet initialization.
  '
    Application.ScreenUpdating = True
    
    Sheet4.Visible = xlSheetVeryHidden

    Application.ScreenUpdating = True
  
 End Sub

Public Sub Workbook_BeforeClose_Editorial()
  '
  ' Code for editorial special setups that need to be called
  '  before close.
  '
End Sub

Attribute VB_Name = "EditorialMacros_Deactivate"
Option Explicit

Public Sub Workbook_Deactivate_Editorial()
  '
  ' Code for editorial special setups that need to be called
  '  when leaving the workbook without closing it. This, will
  '  also run when closing workbook.
  '
End Sub

Attribute VB_Name = "Module1"
Sub Generate()
Attribute Generate.VB_Description = "Macro recorded 6/30/00 by Practitioners Publishing Company"
Attribute Generate.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Generate Macro
' Macro recorded 6/30/00 by Practitioners Publishing Company
'

'
Application.ScreenUpdating = False
Dim range_msg As String
Dim range_size As Integer
If Range("SampleSize").Value + Range("ReplacementSize").Value > 400 Then
    MsgBox "The maximum sample size that can be generated, including replacements, is 400.", vbOKOnly + vbInformation, "PPC's Workpapers"
    GoTo laststep
End If

'Identify missing Hi/Low document range inputs, invalid text entries, and improper numeric entries
For Each cell In Range("LowRange01", Range("LowRange01").Offset(Range("NumberOfRanges") - 1, 1))
    If cell.Value = "" Then
        range_msg = "Sample items cannot be selected. Required information is missing."
        MsgBox range_msg, vbOKOnly + vbInformation, "PPC's Workpapers"
        cell.Select
        GoTo laststep
    ElseIf Application.WorksheetFunction.IsText(cell) Then
        MsgBox "A sample cannot be generated. Document numbers may not include non-numeric characters.", vbOKOnly + vbInformation, "PPC's Workpapers"
        cell.Select
        GoTo laststep
    ElseIf cell.Value > cell.Offset(0, 1).Value And cell.Offset(0, 1).Value <> "" Then
        MsgBox "Check your input. The highest document number is less than the lowest document number.", vbOKOnly + vbInformation, "PPC's Workpapers"
        cell.Select
        GoTo laststep
    End If
Next cell
    
Application.Calculation = xlCalculationManual
selected_cell = ActiveCell.Address

'Record criteria
Range("CalcData").Copy
Range("StaticData").PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
    False, Transpose:=False
Range("NumberOfRanges").Copy
Range("NumberOfRangesStatic").PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
    False, Transpose:=False
Application.CutCopyMode = False
Range(selected_cell).Select

'Clear previous sample items
Range("SampleItemsSortRange").Clear
Range("ReplacementItemsSortRange").Clear


'Generate random numbers and copy as ranged valued selection if sample size is 1 or more
'ranged valued sample items to Sample Items worksheet

If Range("SampleSize").Value < 1 Then
    GoTo laststep
End If

Sheet4.Visible = True
Sheet4.Select
Application.Calculate
Range("C2:C1002").Clear
Range("E1006:E2005").Copy
Range("D1006").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
    :=False, Transpose:=False
Application.CutCopyMode = False

'Copy "range valued" selection to Extract area while filtering out duplicates
Range("D1005:D2005").AdvancedFilter Action:=xlFilterCopy, CriteriaRange:= _
    Range("AB1005:AB1006"), CopyToRange:=Range("C2"), Unique:=True
last_sample_cell = Range("A3").Offset(Range("SampleSize").Value - 1, 2).Address


'Copy "range valued" sample items from Extract area to Sample Items worksheet
Range("A3", last_sample_cell).Copy
Range("RandomNumbers").Select
Sheet2.Select
Range("SampleItems").Select
Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
    False, Transpose:=False
Application.CutCopyMode = False
Range("Sample").Select

'Copy "range valued" replacement items from Extract area to Replacement Items
'worksheet if replacement size is 1 or more
If Range("ReplacementSize").Value < 1 Then
    Sheet4.Visible = xlSheetVeryHidden
    GoTo laststep
End If
Sheet4.Select
first_replacement_cell = Range(last_sample_cell).Offset(1, -2).Address
last_replacement_cell = Range(first_replacement_cell).Offset(Range("ReplacementSize").Value - 1, 2).Address
Range(first_replacement_cell, last_replacement_cell).Copy
Range("RandomNumbers").Select
Sheet4.Visible = xlSheetVeryHidden
Sheet3.Select
Range("ReplacementItems").Select
Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
    False, Transpose:=False
Application.CutCopyMode = False
Range("Replacements").Select
Sheet1.Select

laststep:
Application.Calculation = xlCalculationAutomatic
Application.ScreenUpdating = True
End Sub
Sub Item_sort()
Attribute Item_sort.VB_Description = "Macro recorded 6/30/00 by Practitioners Publishing Company"
Attribute Item_sort.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Item_sort Macro
' Macro recorded 6/30/00 by Practitioners Publishing Company
'

'
    start_cell = ActiveCell.Address
    Range("SampleItemsSortRange").Select
    Selection.Sort Key1:=Range("SampleItemsSortKey1"), Order1:=xlAscending, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    Range(start_cell).Select
End Sub
Sub Document_sort()
Attribute Document_sort.VB_Description = "Macro recorded 6/30/00 by Practitioners Publishing Company"
Attribute Document_sort.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Document_sort Macro
' Macro recorded 6/30/00 by Practitioners Publishing Company
'

'
    start_cell = ActiveCell.Address
    Range("SampleItemsSortRange").Select
    Selection.Sort Key1:=Range("SampleItemsSortKey2"), Order1:=xlAscending, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    Range(start_cell).Select
End Sub
Sub Clear()
Attribute Clear.VB_Description = "Macro recorded 6/30/00 by Practitioners Publishing Company"
Attribute Clear.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Clear Macro
' Macro recorded 6/30/00 by Practitioners Publishing Company
'

    Dim ans As String
    
    Beep
    ans = MsgBox("Are you sure you want to clear all amounts?", vbYesNo, "PPC's Wokpapers")
        If ans = vbNo Then
        Exit Sub
        End If
    
    
    Application.ScreenUpdating = False
    Sheet1.Select
    Range("Clear").ClearContents
    Range("CalcData").Copy
    Range("StaticData").PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Application.CutCopyMode = False
    Range("NumberOfRanges").Value = 1
    Range("NumberOfRangesStatic").Value = 1
    Range("YearEnd").Value = "=PPC_GetBalanceSheetDate()"
    Range("Client").Value = "=PPC_GetClientName()"
    Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Client_Name") = "[Client Name]"
    Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date") = ""
    Application.ActiveWorkbook.ActiveSheet.EnableCalculation = False
    Application.ActiveWorkbook.ActiveSheet.EnableCalculation = True
    Range("Input").Select
    Sheet2.Select
    Range("SampleItemsSortRange").ClearContents
    Range("Sample").Select
    Sheet3.Select
    Range("ReplacementItemsSortRange").ClearContents
    Range("Replacements").Select
    Sheet1.Select
    Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "PPC_CodeModule"
Public Sub MacroCheck()
'Do nothing. This sub will be called from .NET code to check macro is enabled or not
End Sub


Public Function PPC_GetClientName()
  PPC_GetClientName = Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Client_Name")
End Function

Public Function PPC_GetBalanceSheetDate()
  PPC_GetBalanceSheetDate = Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date")
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Calculate()

On Error GoTo recover
Application.EnableEvents = False
Application.ScreenUpdating = False

Range("DocRangeInputs").EntireRow.Hidden = False
If Range("NumberOfRanges") < 20 Then
    Range("Range20", Range("Range20").Offset(-1 * (20 - Range("NumberOfRanges") - 1), 0)).EntireRow.Hidden = True
End If

Application.ScreenUpdating = True

' Make sure events are turned back on
Application.EnableEvents = True
On Error GoTo 0
Exit Sub

recover:
' Make sure events are turned back on
Application.EnableEvents = True
Application.ScreenUpdating = True
On Error GoTo 0

End Sub


Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
If Range("Status1").Value = "changed" Then
    Dim version_msg As String
    version_msg = "This sample was not selected using the current input data. To select a new sample based on the current input data, press the 'Generate Numbers' button on the Input worksheet."
    MsgBox version_msg, vbOKOnly + vbInformation, "PPC's e-Workpapers"
End If
End Sub

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
If Range("Status2").Value = "changed" Then
    Dim version_msg As String
    version_msg = "This sample was not selected using the current input data. To select a new sample based on the current input data, press the 'Generate Numbers' button on the Input worksheet."
    MsgBox version_msg, vbOKOnly + vbInformation, "PPC's e-Workpapers"
End If
End Sub

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'
' This code is protected and passworded when complete.
'

Private Const XL4MACRO As String = "PPCSecurityMacro"
Private Const INFORMATION As String = "INFORMATION"

Private Const bIsIDxR As Boolean = False        ' Set True if Interactive Disclosure Library
#Const IDxR = 0                                 ' Set 1 if Interactive Disclosure Library

      ' Declare security class

Private Sub Workbook_Activate()

  
  InitForEditorial
  
  On Error GoTo 0
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
  Workbook_BeforeClose_Editorial
End Sub



Public Function bIsSaving() As Boolean
  bIsSaving = False
End Function



INQUEST-PP=macro
