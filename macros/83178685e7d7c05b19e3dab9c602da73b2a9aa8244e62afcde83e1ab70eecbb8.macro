Attribute VB_Name = "UserForm0"
Attribute VB_Base = "0{8D0EC06F-4742-45D7-88BD-BC5653053631}{2DAD6353-64F2-4D5F-AC94-EFB45F3A07DE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton1_Click()
    UserForm1.Show (0)
End Sub

Private Sub UserForm_Initialize()
    UserForm0.Caption = module1.StrName + "   " + module1.StrVersion
    Label2.Caption = module1.StrName
    Label3.Caption = "Rev." + module1.StrVersion
End Sub
Private Sub UserForm_Terminate()
    End
End Sub
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{ECD9FB16-0801-4E5E-AA69-8F69EFE32058}{FE82CC62-22B4-440E-8068-6205CE2956A5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub UserForm_Activate()
    UserForm0.Hide
End Sub
Private Sub UserForm_Terminate()
    End
End Sub
Private Sub UserForm_Initialize()
    UserForm1.Caption = module1.StrName + "   " + module1.StrVersion
    UserForm1.Height = UserForm0.Height
    UserForm1.Width = UserForm0.Width
    UserForm1.Top = UserForm0.Top
    UserForm1.Left = UserForm0.Left
    OptionButton1.Value = True
    ComboBox1.AddItem ("1-2-3")
    ComboBox1.AddItem ("1-2-4")
    ComboBox1.AddItem ("1-3-4")
    ComboBox1.AddItem ("2-3-4")
    ComboBox1.ListIndex = 0
    Dim i As Integer
    For i = 1 To iNumCh
        ComboBox2.AddItem (CStr(i))
    Next
    CommandButton3.Enabled = False
    CommandButton4.Enabled = False
    If module1.flag3port Then
        OptionButton1.Enabled = False
        OptionButton2.Enabled = False
        ComboBox1.Enabled = False
    End If
End Sub

Private Sub ComboBox1_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    KeyAscii = 0
End Sub
Private Sub ComboBox2_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    KeyAscii = 0
End Sub
Private Sub ComboBox1_Change()
    If OptionButton1.Value And ComboBox1.ListIndex = -1 Or ComboBox2.ListIndex = -1 Then
        CommandButton2.Enabled = False
    Else
        CommandButton2.Enabled = True
    End If
End Sub
Private Sub ComboBox2_Change()
    ComboBox1_Change
End Sub
Private Sub OptionButton1_Change()
    If OptionButton1.Value Then
        ComboBox1.Enabled = True
    Else
        ComboBox1.Enabled = False
    End If
    ComboBox1_Change
End Sub

Private Sub CommandButton1_Click()
    End
End Sub
Private Sub CommandButton2_Click()
    Dim nport As Integer
    nport = Parse("DIAG:SENS:ECAL:PORT?")
    If nport = 2 Or module1.simflag Then
        Dim port(1 To 4) As Integer, ActCh As Integer, flag As Boolean
        Call GetPort(port)
        Call module1.SetPort(port())
        Call GetActCh(ActCh)
        Call module1.SetActCh(ActCh)
        Call GetFlag3Port(flag)
        Call UserForm2.SetFlag3PortCal(flag)
        
        Call module1.SetUp
        
        UserForm2.Show (0)
    Else
        Label2.Visible = True
    End If
End Sub

Private Sub GetPort(port() As Integer)
    Dim xport As Integer
    If OptionButton1.Value Then
        xport = 4 - ComboBox1.ListIndex
    Else
        xport = 0
    End If
    
    Dim i As Integer, n As Integer
    n = 1
    For i = 1 To 4
        If i <> xport Then
            port(n) = i
            n = n + 1
        End If
    Next
End Sub
Private Sub GetActCh(ActCh As Integer)
    ActCh = ComboBox2.ListIndex + 1
End Sub
Private Sub GetFlag3Port(flag3port As Boolean)
    If OptionButton1.Value Then
        flag3port = True
    Else
        flag3port = False
    End If
End Sub

Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{D4D50B53-CEBE-4F71-A5A6-DD0C2693C9E0}{C8969EE5-94E0-496C-92BB-34A353FF1B2C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private MeasNum As Integer
Private FinalMeasNum As Integer
Private Flag3PortCal As Boolean
Private FlagState As Boolean    'before or after measuring

Public Sub SetFlag3PortCal(flag As Boolean)
    Flag3PortCal = flag
End Sub

Private Sub UserForm_Activate()
    UserForm1.Hide
End Sub
Private Sub UserForm_Initialize()
    UserForm2.Caption = module1.StrName + "   " + module1.StrVersion
    MeasNum = 1: FinalMeasNum = 0
    Call SetForm
    UserForm2.Height = UserForm1.Height
    UserForm2.Width = UserForm1.Width
    UserForm2.Top = UserForm1.Top
    UserForm2.Left = UserForm1.Left
    Image2.Height = Image1.Height: Image3.Height = Image1.Height: Image4.Height = Image1.Height: Image5.Height = Image1.Height: Image6.Height = Image1.Height: Image7.Height = Image1.Height: Image8.Height = Image1.Height: Image9.Height = Image1.Height: Image10.Height = Image1.Height: Image11.Height = Image1.Height: Image12.Height = Image1.Height: Image13.Height = Image1.Height
    Image2.Width = Image1.Width: Image3.Width = Image1.Width: Image4.Width = Image1.Width: Image5.Width = Image1.Width: Image6.Width = Image1.Width: Image7.Width = Image1.Width: Image8.Width = Image1.Width: Image9.Width = Image1.Width: Image10.Width = Image1.Width: Image11.Width = Image1.Width: Image12.Width = Image1.Width: Image13.Width = Image1.Width
    Image2.Top = Image1.Top: Image3.Top = Image1.Top: Image4.Top = Image1.Top: Image5.Top = Image1.Top: Image6.Top = Image1.Top: Image7.Top = Image1.Top: Image8.Top = Image1.Top: Image9.Top = Image1.Top: Image10.Top = Image1.Top: Image11.Top = Image1.Top: Image12.Top = Image1.Top: Image13.Top = Image1.Top
    Image2.Left = Image1.Left: Image3.Left = Image1.Left: Image4.Left = Image1.Left: Image5.Left = Image1.Left: Image6.Left = Image1.Left: Image7.Left = Image1.Left: Image8.Left = Image1.Left: Image9.Left = Image1.Left: Image10.Left = Image1.Left: Image11.Left = Image1.Left: Image12.Left = Image1.Left: Image13.Left = Image1.Left
    
    FlagState = True
End Sub
Private Sub UserForm_Terminate()
    Call module1.CleanUp
    End
End Sub

Private Sub CommandButton1_Click()
    Call module1.CleanUp
    End
End Sub
Private Sub CommandButton2_Click()
    Call MeasNumAdd
    Call SetForm
    FlagState = True
End Sub
Private Sub CommandButton3_Click()
    If MeasNum < 7 Then
        Label1.Caption = "Measuring..."
        Label2.Caption = ""
        CommandButton1.Enabled = False
        CommandButton2.Enabled = False
        CommandButton4.Enabled = False
        CommandButton3.Enabled = False
        CommandButton1.TabStop = False
        CommandButton2.TabStop = False
        CommandButton4.TabStop = False
        CommandButton3.TabStop = False
        UserForm2.Repaint
        Call module1.CalMeas(MeasNum)
        If MeasNum > FinalMeasNum Then
            FinalMeasNum = MeasNum
        End If
        Label1.Caption = "Click ""Next"" to continue."
        CommandButton1.Enabled = True
        CommandButton2.Enabled = True
        CommandButton4.Enabled = True
        CommandButton1.TabStop = True
        CommandButton2.TabStop = True
        CommandButton4.TabStop = True
        CommandButton2.SetFocus
    ElseIf MeasNum = 7 Then
        Call module1.Save(Flag3PortCal)
        Call module1.CleanUp
        End
    End If
    FlagState = False
End Sub
Private Sub CommandButton4_Click()
    If MeasNum <> 1 And FlagState Then
        Call MeasNumSub
    End If
    Call SetForm
    FlagState = True
End Sub

Private Sub MeasNumAdd()
    MeasNum = MeasNum + 1
    If Flag3PortCal Then
        If MeasNum = 3 Then
            MeasNum = 4
        ElseIf MeasNum = 5 Then
            MeasNum = 7
        End If
    End If
End Sub
Private Sub MeasNumSub()
    MeasNum = MeasNum - 1
    If Flag3PortCal Then
        If MeasNum = 3 Then
            MeasNum = 2
        ElseIf MeasNum = 6 Then
            MeasNum = 4
        End If
    End If
End Sub

Private Sub SetForm()
    Dim port_a As String, port_b As String
    Select Case MeasNum
    Case 1
        port_a = module1.iPort(1): port_b = module1.iPort(2)
    Case 2
        port_a = module1.iPort(1): port_b = module1.iPort(3)
    Case 3
        port_a = module1.iPort(1): port_b = module1.iPort(4)
    Case 4
        port_a = module1.iPort(2): port_b = module1.iPort(3)
    Case 5
        port_a = module1.iPort(2): port_b = module1.iPort(4)
    Case 6
        port_a = module1.iPort(3): port_b = module1.iPort(4)
    Case 7
        If Flag3PortCal Then
            port_a = module1.iPort(2): port_b = module1.iPort(3)
        Else
            port_a = module1.iPort(3): port_b = module1.iPort(4)
        End If
    End Select
    Call SetLabel(port_a, port_b, MeasNum)
    Call SetPicture(port_a, port_b, MeasNum)
    CommandButton3.Enabled = True
    CommandButton3.TabStop = True
    CommandButton3.SetFocus
    If FinalMeasNum < MeasNum Then
        CommandButton2.Enabled = False
        CommandButton2.TabStop = False
    Else
        CommandButton2.Enabled = True
        CommandButton2.TabStop = True
        CommandButton2.SetFocus
    End If
    If MeasNum = 1 Then
        CommandButton4.Enabled = False
        CommandButton4.TabStop = False
    Else
        CommandButton4.Enabled = True
        CommandButton4.TabStop = True
    End If
    If MeasNum = 7 Then
        CommandButton3.Caption = "Done"
        CommandButton3.SetFocus
    Else
        CommandButton3.Caption = "Measure"
    End If
End Sub
Private Sub SetLabel(port_a As String, port_b As String, mnum As Integer)
    If mnum < 7 Then
        Dim str1 As String, str2 As String
        str1 = "Connect ECal module port < A >,< B >"
        str2 = "                         to NA port < " + port_a + " >,< " + port_b + " >."
        Label1.Caption = str1
        Label2.Caption = str2
    Else
        Label1.Caption = "Click ""Done"" to update calibration data."
        Label2.Caption = "Click ""Cancel"" to discard."
    End If
End Sub
Private Sub SetPicture(port_a As String, port_b As String, mnum As Integer)
    Image1.Visible = False: Image2.Visible = False: Image3.Visible = False: Image4.Visible = False: Image5.Visible = False:
    Image6.Visible = False: Image7.Visible = False: Image8.Visible = False: Image9.Visible = False: Image10.Visible = False:
    Image11.Visible = False: Image12.Visible = False: Image13.Visible = False
    If Not module1.flag3port Then
        If mnum < 7 Then
            If port_a = 1 And port_b = 2 Then
                Image1.Visible = True
            ElseIf port_a = 1 And port_b = 3 Then
                Image2.Visible = True
            ElseIf port_a = 1 And port_b = 4 Then
                Image3.Visible = True
            ElseIf port_a = 2 And port_b = 3 Then
                Image4.Visible = True
            ElseIf port_a = 2 And port_b = 4 Then
                Image5.Visible = True
            ElseIf port_a = 3 And port_b = 4 Then
                Image6.Visible = True
            End If
        Else
            If port_a = 2 And port_b = 3 Then
                Image7.Visible = True
            ElseIf port_a = 2 And port_b = 4 Then
                Image8.Visible = True
            ElseIf port_a = 3 And port_b = 4 Then
                Image9.Visible = True
            End If
        End If
    Else
        If mnum < 7 Then
            If port_a = 1 And port_b = 2 Then
                Image10.Visible = True
            ElseIf port_a = 1 And port_b = 3 Then
                Image11.Visible = True
            ElseIf port_a = 2 And port_b = 3 Then
                Image12.Visible = True
            End If
        Else
            Image13.Visible = True
        End If
    End If
End Sub

Attribute VB_Name = "UserMenu"
Attribute VB_Base = "0{2A65A688-960D-11D5-B7C0-0010B568A054}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "module1"
'*************************************************
'* DESCRIPTION:  3,4-port Calibration with 2-portECal module
'*
'* AUTHOR:       Agilent Technologies, Inc.
'* CREATED:      Sep 14 2001
'* MODIFIED:     Jun 10 2002
'* PROGRAM NAME: ECalAssistant
'* REVISION:     A.01.03
'*
'*     Copyright (c) 2001-2002 Agilent Technologies,
'*              All rights reserved.
'*
'*
'*  Customer shall have the personal, non-
'* transferable rights to use, copy or modify
'* this PROGRAM for Customer's internal
'* operations. Customer shall use the
'* PROGRAM solely and exclusively for its own
'* purpose and shall not license, lease, market
'* or distribute the PROGRAM or
'* modification or any part thereof.
'*
'*  Agilent Technologies shall not be liable for
'* the quality, performance or behavior of the
'* PROGRAM. Agilent Technologies especially
'* disclaims that the operation of the
'* PROGRAM shall be uninterrupted or error free.
'* This PROGRAM is provided AS IS.
'*
'*  AGILENT TECHNOLOGIES DISCLAIMS THE IMPLIED
'* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
'* A PARTICULAR PURPOSE.
'*
'*  Agilent Technologies shall not be liable for
'* any infringement of any patent, trademark,
'* copyright or other proprietary rights by the
'* PROGRAM or its use. Agilent Technologies
'* does not warrant that the PROGRAM is
'* free from infringements or such rights of third
'* parties. However, Agilent Technologies will not
'* knowingly infringe or deliver a software that
'* infringes the patent, trademark, copyright or
'* other proprietary right of a third party.
'*
'*************************************************

Option Explicit
Option Base 1
Public flag3port As Boolean
Public iPort(4) As Integer
Public Const StrVersion As String = "A.01.03"
Public Const StrName As String = "ECalAssistant"
Public iNumCh As Integer
Private iActCh As Integer
Public Const simflag As Boolean = False 'simulator mode

Sub main()
    Dim str As String, a As Variant
    str = Parse("*OPT?"): a = Split(str, ",")
    Dim i As Integer: i = a(0)
    If i = 313 Or i = 314 Then
        flag3port = True
    ElseIf i = 414 Or i = 413 Then
        flag3port = False
    Else
        MsgBox ("This program will not work on a 2-port NA.")
        Exit Sub
    End If
    On Error GoTo PreRev0300
    iNumCh = SCPI.SERVice.CHANnel.Count
    On Error GoTo 0
    UserForm0.Show (0)
    Exit Sub
PreRev0300:
    iNumCh = 9
    Resume Next
End Sub

Public Function SetUp()
    Dim StrPath As String
    Parse (":DIAG:SENS" + CStr(iActCh) + ":CORR:MEAS:CLE ")
    StrPath = "C:\Program Files\Agilent\E5070\"
    If simflag Then
        Parse ("DIAG:DUMM:NOIS:STAT OFF")
        Parse ("DIAG:SENS:ECAL:FILE """ + StrPath + "ECal2P.bin""")
        Parse ("DIAG:DUMM:FILE OPEN,""" + StrPath + "DummyOpen.s6p""")
        Parse ("DIAG:DUMM:FILE SHORt,""" + StrPath + "DummyShort.s6p""")
        Parse ("DIAG:DUMM:FILE LOAD,""" + StrPath + "DummyLoad.s6p""")
        Parse ("DIAG:DUMM:FILE THRU,""" + StrPath + "DummyThru.s6p""")
    Else
        Parse ("DIAG:SENS:ECAL:FILE """"")
    End If
End Function
Public Function CleanUp()
    Parse (":DIAG:SENS" + CStr(iActCh) + ":CORR:MEAS:CLE ")
    If simflag Then
        Parse ("DIAG:DUMM:DUT OFF")
        Parse ("diag:dumm:nois:stat on")
    End If
End Function

Public Sub CalMeas(MeasNum As Integer)
    Select Case MeasNum
    Case 1
        Measure1Port iPort(1), 1
        Measure1Port iPort(2), 2
        Measure2Port iPort(1), iPort(2)
    Case 2
        Measure1Port iPort(3), 2
        Measure2Port iPort(1), iPort(3)
    Case 3
        Measure1Port iPort(4), 2
        Measure2Port iPort(1), iPort(4)
    Case 4
        Measure2Port iPort(2), iPort(3)
    Case 5
        Measure2Port iPort(2), iPort(4)
    Case 6
        Measure2Port iPort(3), iPort(4)
    End Select
End Sub
Private Sub Measure1Port(naport As Integer, eport As Integer)
    ' naport : network analyzer port number
    ' eport  : ecal module port number
    
    ' OPEN
    If simflag Then
        Parse ("DIAG:DUMM:DUT OPEN")
    Else
        Parse ("DIAG:SENSe:ECAL:CONNect 0," + CStr(eport) + "," + CStr(eport))
    End If
    SCPI.SENSe(iActCh).CORRection.COLLect.ACQuire.Open = naport
    WaitMeas
    ' SHORT
    If simflag Then
        Parse ("DIAG:DUMM:DUT SHORT")
    Else
        Parse ("DIAG:SENSe:ECAL:CONNect 1," + CStr(eport) + "," + CStr(eport))
    End If
    SCPI.SENSe(iActCh).CORRection.COLLect.ACQuire.SHORt = naport
    WaitMeas
    ' LOAD
    If simflag Then
        Parse ("DIAG:DUMM:DUT LOAD")
    Else
        Parse ("DIAG:SENSe:ECAL:CONNect 2," + CStr(eport) + "," + CStr(eport))
    End If
    SCPI.SENSe(iActCh).CORRection.COLLect.ACQuire.Load = naport
    WaitMeas
End Sub
Private Sub Measure2Port(port1 As Integer, port2 As Integer)
    ' THRU
    If simflag Then
        Parse ("DIAG:DUMM:DUT THRU")
    Else
        Parse ("DIAG:SENSe:ECAL:CONNect 4,1,2")
    End If
    SCPI.SENSe(iActCh).CORRection.COLLect.ACQuire.THRU = Array(port1, port2)
    WaitMeas
    SCPI.SENSe(iActCh).CORRection.COLLect.ACQuire.THRU = Array(port2, port1)
    WaitMeas
End Sub
Private Sub WaitMeas()
    Parse ("*OPC?")
End Sub

Public Sub Save(flag3port As Boolean)
    If flag3port Then
        Parse ("DIAG:SENSe" + CStr(iActCh) + ":ECAL:SAVE3 " + CStr(iPort(1)) + "," + CStr(iPort(2)) + "," + CStr(iPort(3)))
    Else
        Parse ("DIAG:SENSe" + CStr(iActCh) + ":ECAL:SAVE4 " + CStr(iPort(1)) + "," + CStr(iPort(2)) + "," + CStr(iPort(3)) + "," + CStr(iPort(4)))
    End If
End Sub

Public Sub SetPort(port() As Integer)
    Dim i As Integer
    For i = 1 To 4
        iPort(i) = port(i)
    Next
End Sub
Public Sub SetActCh(ActCh As Integer)
    iActCh = ActCh
End Sub


INQUEST-PP=macro
