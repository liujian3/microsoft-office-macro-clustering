Attribute VB_Name = "AddHyperlinksModule"
Option Explicit

Private sheetsHyperlinksCol As New Collection
Private Const DecouplingSheetName As String = "DecouplingSheet"

Public Sub addHyperlinksForSheets(ByRef sheet As Worksheet)
    If Not hyperLintFlag Then
        Exit Sub
    Else
        If isBoardStyleSheet(sheet) Then
            Call addBoardStyleHyperlinks_SheetActive(sheet) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd||4b3||1e9||fffd||fffd||fffd||fffd||fffd||f5||fffd||52a||fffd||fffd||fffd||fffd||fffd||4f3||fffd||fffd||fffd||fffd||fffd|
        ElseIf sheet.name = GetMainSheetName() Then
            Call addTransportSheetHyperlinks_SheetActive(sheet) '|fffd||fffd||fffd||fffd||fffd||fffd||4b3||fffd||fffd||fffd||4f3||fffd||fffd||fffd||fffd||fffd|
        ElseIf isCellSheet(sheet.name) Then
            Call addCellSheetHyperlinks_SheetActive(sheet) '|fffd||fffd||421||fffd||fffd||4b3||1e9|RXU Ant No.|fffd||fffd||fffd||4f3||fffd||fffd||fffd||fffd||fffd|
        End If
    End If
End Sub

'|fffd||fffd||fffd||f5||fffd||52a||fffd||fffd||fffd||fffd||fffd||4f5||fffd||fffd||fffd||fffd||fffd|
Public Sub addReferenceRangeHyperlinks_SheetChange(ByRef ws As Worksheet, ByRef Target As Range)
    If Target.count <> 1 Or containsASheet(ThisWorkbook, DecouplingSheetName) Then Exit Sub
    Dim groupName As String, columnName As String
    Dim RowNumber As Long, columnNumber As Long
    RowNumber = Target.row
    columnNumber = Target.column
    
    Dim targetInRecordsRangeFlag As Boolean, targetIsInListBoxFlag As Boolean
    '|fffd||436||fffd||fffd||7b8||135||135||fffd||52a||fffd||fffd||fffd||1f2||fffd||fffd||fffd||fffd||fffd||427||fffd||fffd||52a||fffd||fffd|
    targetInRecordsRangeFlag = getRangeGroupAndColumnName(ws, RowNumber, columnNumber, groupName, columnName)
    
    Dim referencedString As String
    Dim currentBoardStyleMappingDefData As CBoardStyleMappingDefData
    '|fffd||436||fffd||fffd||7b8||135||135||fffd||52a||fffd||fffd||fffd||1f2||fffd||fffd||fffd||fffd||fffd||4aa||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    targetIsInListBoxFlag = getReferecedString(groupName, columnName, referencedString, currentBoardStyleMappingDefData) '|fffd||436||fffd||461||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1f7||fffd||fffd||fffd||4aa||fffd||fffd||fffd||fffd||fffd||536||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    If targetInRecordsRangeFlag = False Or targetIsInListBoxFlag = False Then
        Exit Sub
    End If
    
    Call initBoardNoManagerPublic
    Dim referencedBoardNoAddress As String
    referencedBoardNoAddress = boardNoManager.getBoardNoAddress(Target.value)
    If referencedBoardNoAddress <> "" Then
        Call addHyperlink(ws, Target.address, ws, referencedBoardNoAddress)
    Else '|fffd||fffd||fffd||fffd||1ff||575||13b||fffd||fffd||fffd| |fffd||1f0||fffd||fffd||fffd||fffd||f5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2e3||fffd||fffd||fffd||4aa||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd||fffd||fffd||fffd||fffd||3aa||fffd||fffd||fffd||fffd||fffd||fffd||fffd||537||fffd||fffd||5b9||fffd||fffd||fffd||5b5||2b1||fffd||fffd||2bd||fffd||fffd||fffd||fffd||fffd||fffd|
        Call deleteHyperlink(ws, Target.address)
        Call setCertainRangeFont(Target)
    End If
End Sub

Public Sub setRangeFont(ByRef certainRange As Range, ByRef fontName As String)
    certainRange.Font.name = fontName
End Sub

Private Sub setCertainRangeFont(ByRef certainRange As Range)
    With certainRange
        .WrapText = True '|fffd||fffd||fffd||fffd||fffd||536||fffd||fffd||fffd||fffd||fffd|
        With .Font
            .name = "Arial"
            .Underline = xlUnderlineStyleNone '|fffd||fffd||fffd||bb||fffd||fffd||fffd|
            .colorIndex = -4105 '|fffd||fffd||26b|
        End With
    End With
End Sub

Public Sub addHyperlink(ByRef srcWs As Worksheet, ByRef srcAddress As String, ByRef dstWs As Worksheet, ByRef dstAddress As String, Optional ByVal fontName As String = "Arial")
    srcWs.Hyperlinks.Add Anchor:=srcWs.Range(srcAddress), address:="", _
        SubAddress:="'" & dstWs.name & "'!" & dstAddress
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4f0||fffd||fffd||fffd||fffd||fffd||723||fffd||27e||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4fb||fffd||57e||fffd||fffd||36c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4aa||5e2||fffd||28ec||fffd||fffd||4aa||fffd||fffd||36c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Not isCellSheet(srcWs.name) Then srcWs.Range(srcAddress).WrapText = False '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||421||fffd||fffd||4b3||fffd||fffd||fffd||fffd||fffd||536||fffd||fffd||fffd||fffd||fffd||fffd||f7||63b37||fffd||fffd||fffd||fffd||fffd||461||fffd||72ef7||fffd||fffd||fffd|
End Sub

Public Sub deleteHyperlink(ByRef srcWs As Worksheet, ByRef srcAddress As String)
    With srcWs.Range(srcAddress)
        If .Hyperlinks.count > 0 Then '|fffd||fffd||fffd||fffd||f5||fffd||52a||fffd||fffd||fffd||fffd||fffd||433||fffd||fffd||fffd||fffd||4e3||fffd||fffd||fffd||27e||fffd||fffd|
            .Hyperlinks.Delete
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
            .NumberFormatLocal = "@" '|fffd||fffd||fffd||f5||fffd||52a||fffd||fffd||fffd||2bd||3aa||fffd||131||fffd|
            Call setBorders(srcWs.Range(srcAddress))
        End If
    End With
End Sub

Private Function sheetHyperlinksShouldAdd(ByRef ws As Worksheet, ByRef sheetsHyperlinksCol As Collection) As Boolean
    Dim returnFlag As Boolean
    Dim sheetName As String
    sheetName = ws.name
    If Not Contains(sheetsHyperlinksCol, sheetName) Then '|fffd||fffd||fffd||5ae||1f0||fb||fffd||434||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4b3||1e9||fffd||fffd||fffd||fffd||4b3||1e9||fffd||fffd||fffd||1bc||fffd||fffd||fffd|col|fffd||fffd|
        sheetsHyperlinksCol.Add Item:=sheetName, key:=sheetName
        returnFlag = True
    Else '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2e3||fffd||fffd||fffd||5b1||fffd||fffd||fffd||2f3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||638||fffd||fffd||fffd||fffd||4f3||fffd||fffd||fffd||fffd||fffd||fffd||2e3||fffd||fffd||fffd||fffd||427||fffd||fffd|
        returnFlag = False
    End If
    sheetHyperlinksShouldAdd = returnFlag
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||2bd||4b3||1e9||fffd||fffd||fffd||fffd||fffd||175||133||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4b3||1e9||fffd||fffd||fffd||fffd||2b1||fffd||fffd||fffd||fffd|
Public Sub addBoardStyleHyperlinks_SheetActive(ByRef ws As Worksheet)
    '|fffd||fffd||fffd||fffd||fffd||fffd||1f5||fffd||fffd||fffd||fffd||fffd||2bd||4b3||1e9||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4b3||1e9||fffd||fffd||2f5||fffd||fffd||fffd||1f2||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||63a63||fffd||fffd||2f3||fffd|
    If (Not isBoardStyleSheet(ws)) Or containsASheet(ThisWorkbook, DecouplingSheetName) Then Exit Sub
    
    '|fffd||fffd||4b3||1e9||fffd||1f7||fffd||4f9||fffd||fffd||fffd||fffd||fffd||fffd||4e3||fffd||fffd||fffd||fffd||fffd||4f9||fffd||fffd||fffd||5b1||fffd||fffd||fffd||2f3||fffd|
    'If sheetHyperlinksShouldAdd(ws, sheetsHyperlinksCol) = False And forceRefreshFlag = False Then Exit Sub
    
    Set currentSheet = ws
    
    '|fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||f5||fffd||52a||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim referenceRangeManager As New CReferenceRangeManager
    Call referenceRangeManager.generateBoardNoReferenceAddressMap
    
    Call initBoardNoManagerPublic '|fffd||fffd||2bc||fffd||fffd||fffd||fffd||fffd||fffd||fffd||179||fffd||fffd||fffd||fffd||fffd|
    
    Call referenceRangeManager.setReferenceAddressHyperlinks(currentSheet, boardNoManager)
End Sub

'|fffd||fffd||fffd||fffd||4b3||fffd||fffd||4b3||1e9||fffd||fffd||fffd||fffd||2b1||fffd||fffd||fffd||fffd|Board Style Name|fffd||133||fffd||fffd||fffd||fffd||fffd|
Public Sub addTransportSheetHyperlinks_SheetActive(ByRef ws As Worksheet)
    '|fffd||fffd||fffd||fffd||fffd||fffd||1f4||fffd||fffd||fffd||4b3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4b3||1e9||fffd||fffd||2f5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||63a63||fffd||fffd||2f3||fffd|
    If ws.name <> GetMainSheetName() Or containsASheet(ThisWorkbook, DecouplingSheetName) Then Exit Sub
    
    '|fffd||fffd||4b3||1e9||fffd||1f7||fffd||4f9||fffd||fffd||fffd||fffd||fffd||fffd||4e3||fffd||fffd||fffd||fffd||fffd||4f9||fffd||fffd||fffd||5b1||fffd||fffd||fffd||2f3||fffd|
    If sheetHyperlinksShouldAdd(ws, sheetsHyperlinksCol) = False Then Exit Sub
    
    Dim boardStyleNameColumnNumber As Long
    boardStyleNameColumnNumber = getBoardStyleNameColumnNumber(ws) '|fffd||f5||fffd|BoardStyleName|fffd||43a||fffd|
    '|fffd||fffd||fffd||fb||fffd||fffd||fffd||4b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd||fffd||fffd||fffd||fffd||fffd||5b6||3a3||fffd||fffd||fffd||fffd||2f3||fffd|
    If boardStyleNameColumnNumber = -1 Then Exit Sub
    
    Dim maxRowNumber As Long, rowIndex As Long
    maxRowNumber = ws.Cells(65535, boardStyleNameColumnNumber).End(xlUp).row
    
    Dim dstBoardStyleSheetName As String
    For rowIndex = 3 To maxRowNumber
        With ws.Cells(rowIndex, boardStyleNameColumnNumber)
            dstBoardStyleSheetName = .value '|fffd||f5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd||fffd||fffd||fffd||fffd||5b5|
            Call addHyperlinkOfBoardStyleName(ws, .address, dstBoardStyleSheetName, "A1")
        End With
    Next rowIndex
End Sub

Private Function getBoardStyleNameColumnNumber(ByRef transportSheet As Worksheet) As Long
    getBoardStyleNameColumnNumber = -1
    Dim flag As Boolean
    flag = getBoardStyleInfo(transportSheet.name) '|fffd||436||fffd||fffd||fffd|RelationDef|fffd||1f7||fffd||fffd||fffd|Board Style Name|fffd||fffd||fffd||5b6||fffd|
    If flag = False Then
        Exit Function
    End If
    getBoardStyleNameColumnNumber = findCertainValColumnNumber(transportSheet, 2, board_style)
End Function

Private Sub addHyperlinkOfBoardStyleName(ByRef srcWs As Worksheet, ByRef srcAddress As String, ByRef dstWsName As String, ByRef dstAddress As String)
    Dim dstBoardStyleSheet As Worksheet
    If containsASheet(ThisWorkbook, dstWsName) Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd||4b3||1e9||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4f3||fffd||fffd||fffd||fffd||fffd|
        Set dstBoardStyleSheet = ThisWorkbook.Worksheets(dstWsName)
        Call addHyperlink(srcWs, srcAddress, dstBoardStyleSheet, dstAddress) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4f5||fffd||13f||fffd||ad65||fffd||fffd||fffd||fffd||2bd||fffd||fffd|A1|fffd||fffd|
    End If
End Sub

'|fffd||fffd||fffd||fffd||4b3||fffd||fffd|Board Style Name|5b5||fffd||131||fffd||2b1||fffd||fffd||fffd||4f3||fffd||fffd||fffd||fffd||fffd|
Public Sub addBoardStyleNameHyperlinks_SheetChange(ByRef ws As Worksheet, ByRef Target As Range)
    If Target.count <> 1 Or containsASheet(ThisWorkbook, DecouplingSheetName) Then Exit Sub
    Dim flag As Boolean
    flag = getBoardStyleInfo(ws.name) '|fffd||436||fffd||fffd||fffd|RelationDef|fffd||1f7||fffd||fffd||fffd|Board Style Name|fffd||fffd||fffd||5b6||fffd|
    If flag = False Then
        Exit Sub
    End If
    
    Dim RowNumber As Long, columnNumber As Long
    RowNumber = Target.row
    columnNumber = Target.column
    flag = isBoardStyleCol(ws, RowNumber, columnNumber) '|fffd||436||3f5||fffd||1f0||fffd||131||fffd||135||fffd||52a||fffd||fffd||fffd||1f7||fffd||fffd||fffd|Board Style Name|fffd||5b6||fffd|
    If flag = False Then Exit Sub
    
    Dim dstBoardStyleSheetName As String
    dstBoardStyleSheetName = Target.value
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||3aa||fffd||58ec||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2b1||fffd||fffd||fffd||fffd||fffd||2f3||fffd|
    If dstBoardStyleSheetName = "" Then Exit Sub
    
    Call addHyperlinkOfBoardStyleName(ws, Target.address, dstBoardStyleSheetName, "A1")
End Sub

'|421||fffd||fffd||4b3||fffd||fffd|RXU Ant No.|5b5||fffd||131||fffd||2b1||fffd||fffd||fffd||4f3||fffd||fffd||fffd||fffd||fffd|
Public Sub addRxuAntNoHyperlinks_SheetChange(ByRef ws As Worksheet, ByRef Target As Range)
    If Target.count <> 1 Or containsASheet(ThisWorkbook, DecouplingSheetName) Then Exit Sub
    
    Dim targetRowNumber As Long, targetColumnNumber As Long
    targetRowNumber = Target.row
    targetColumnNumber = Target.column
    
    Dim rxuAntNoName As String
    rxuAntNoName = getRxuAntNoName(ws.name) '|fffd||f5||fffd|RXU Ant No.|fffd||fffd||fffd||fffd||fffd||fffd|
    If rxuAntNoName = "" Then Exit Sub '|fffd||fffd||fffd||3b4||fffd||4b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2f3||fffd|
    
    Dim rxuAntNoNameColumnNumber As Long
    rxuAntNoNameColumnNumber = findCertainValColumnNumber(ws, 2, rxuAntNoName)
    
    If Target.value = "" Or rxuAntNoNameColumnNumber <> targetColumnNumber Then 'targetColumnNumber|fffd||3f6||fffd||fffd||fffd||3aa|-1|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|rxuAntNoNameColumnNumber|3b4||fffd||4b5||fffd||3aa|-1|fffd||fffd||fffd||fffd||5b1||fffd||fffd||fffd||2f3||fffd|
        Exit Sub '|fffd||fffd||fffd||13f||fffd||ad65||52a||fffd||fffd||3aa||fffd||57b||fffd||131||fffd||fffd||fffd||432||fffd||fffd||fffd|RXU Ant No.|fffd||423||fffd||fffd||fffd||fffd||2f3||fffd|
    End If
    
    Dim dstBoardStyleSheetName As String
    dstBoardStyleSheetName = getBoardStyleName(ws, targetRowNumber) '|fffd||f5||fffd||421||fffd||fffd||4b3||fffd||7b8||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4e6||fffd||fffd|Board Style
    If dstBoardStyleSheetName = "" Then
        Call deleteHyperlink(ws, Target.address) '|fb||fffd||fffd||fffd||4b5||fffd||fffd||fffd||4e6||fffd||fffd|BoardStyleName|fffd||fffd||fffd||bdaf8||f5||fffd||52a||fffd||fffd||133||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Exit Sub '|fffd||fffd||fffd|boardStyleName|3aa||fffd||563||fffd||fffd||fffd||fffd||2f3||fffd|
    End If
    Call addHyperlinkOfBoardStyleName(ws, Target.address, dstBoardStyleSheetName, "A1")
End Sub

'|421||fffd||fffd||4b3||fffd||6bc||fffd||fffd||fffd||2b1||fffd||fffd|RXU Ant No.|fffd||fffd||fffd||4f3||fffd||fffd||fffd||fffd||fffd|
Private Sub addCellSheetHyperlinks_SheetActive(ByRef ws As Worksheet)
    If (Not isCellSheet(ws.name)) Or containsASheet(ThisWorkbook, DecouplingSheetName) Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||421||fffd||fffd||4b3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4b3||1e9||fffd||fffd||2f5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2f3||fffd|
    
    '|fffd||fffd||4b3||1e9||fffd||1f7||fffd||4f9||fffd||fffd||fffd||fffd||fffd||fffd||4e3||fffd||fffd||fffd||fffd||fffd||4f9||fffd||fffd||fffd||5b1||fffd||fffd||fffd||2f3||fffd|
    'If sheetHyperlinksShouldAdd(ws, sheetsHyperlinksCol) = False Then Exit Sub
    
    Dim rxuAntNoName As String
    rxuAntNoName = getRxuAntNoName(ws.name) '|fffd||f5||fffd|RXU Ant No.|fffd||fffd||fffd||fffd||fffd||fffd|
    If rxuAntNoName = "" Then Exit Sub '|fffd||fffd||fffd||3b4||fffd||4b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2f3||fffd|
    
    Dim rxuAntNoNameColumnNumber As Long
    rxuAntNoNameColumnNumber = findCertainValColumnNumber(ws, 2, rxuAntNoName)
    
    If rxuAntNoNameColumnNumber = -1 Then Exit Sub '|fffd||fffd||fffd||fb||fffd||4b5||fffd||fffd||fffd||fffd||423||fffd||fffd||fffd||fffd||2f3||fffd|
    Dim maxRowNumber As Long, rowIndex As Long
    maxRowNumber = ws.Cells(65535, rxuAntNoNameColumnNumber).End(xlUp).row
    Dim dstBoardStyleSheetName As String
    For rowIndex = 3 To maxRowNumber
        With ws.Cells(rowIndex, rxuAntNoNameColumnNumber)
            If .value = "" Then GoTo NextLoop  '|fffd||fffd||fffd|RXU Ant No.|3aa||fffd||563||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd||46d||fffd||fffd|
            
            dstBoardStyleSheetName = getBoardStyleName(ws, rowIndex) '|fffd||f5||fffd||421||fffd||fffd||4b3||fffd||7b8||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4e6||fffd||fffd|Board Style
            If dstBoardStyleSheetName = "" Then
                Call deleteHyperlink(ws, .address) '|fffd||fffd||fffd||fb||fffd||fffd||fffd||4b5||fffd|BoardStyleName|fffd||fffd||fffd||bdaf8||f5||fffd||52a||fffd||fffd||133||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                GoTo NextLoop '|fffd||fffd||fffd|boardStyleName|3aa||fffd||563||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd||46d||fffd||fffd|
            End If
            Call addHyperlinkOfBoardStyleName(ws, .address, dstBoardStyleSheetName, "A1")
        End With
NextLoop:
    Next rowIndex
End Sub


Private Sub getAntenneMocNameAndAttrByCellSheetName(ByRef mocName As String, ByRef attrName As String, ByRef CellSheetName As String)
    If CellSheetName = "GSM|421||fffd||fffd|" Or CellSheetName = "GSM Cell" Then
        mocName = "GTRXGROUPSECTOREQM"
        attrName = "SECTORANTENNA"
    ElseIf CellSheetName = "UMTS|421||fffd||fffd|" Or CellSheetName = "UMTS Cell" Then
        mocName = "ULOCELLSECTOREQM"
        attrName = "SECTORANTENNA"
    ElseIf CellSheetName = "LTE|421||fffd||fffd|" Or CellSheetName = "LTE Cell" Then
        mocName = "eUCellSectorEqm"
        attrName = "SECTORANTENNA"
    End If
End Sub

Private Function getRxuAntNoName(ByRef sheetName As String) As String
    Dim mocName As String, attrName As String
    Call getAntenneMocNameAndAttrByCellSheetName(mocName, attrName, sheetName)
    getRxuAntNoName = findColumnFromRelationDef(sheetName, mocName, attrName)
End Function

Private Function getBoardStyleName(ByRef ws As Worksheet, ByRef targetRowNumber As Long) As String
    getBoardStyleName = ""
    
    Dim bsNameColumnName As String, bsName As String
    bsNameColumnName = ws.Range("A2").value '|fffd||f5||fffd||fffd||fffd||57e||fffd||fffd||fffd||1bb||fffd|rat|fffd||fffd||fffd||fffd||fffd||423||fffd||fffd||7870|*BTS Name|fffd||fffd|
    bsName = ws.Range("A" & targetRowNumber).value '|fffd||f5||fffd||fffd||fffd||57e||fffd||fffd|
    If bsName = "" Then Exit Function '|fffd||fffd||fffd||fffd||fb||fffd||57e||fffd||fffd||fffd||fffd||3aa||fffd||563||fffd||fffd||fffd||fffd||2f3||fffd|
    
    Dim bsNameColumnNumberInTransportSheet As Long
    Dim transportSheetName As String
    Dim transportSheet As Worksheet
    transportSheetName = GetMainSheetName()
    Set transportSheet = ThisWorkbook.Worksheets(transportSheetName) '|fffd||f5||fffd||fffd||fffd||fffd||fffd||4b3|
    '|fffd||6b4||fffd||fffd||fffd||4b3||fffd||4b5||fffd|RXU Ant No.|fffd||5b6||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    bsNameColumnNumberInTransportSheet = findCertainValColumnNumber(transportSheet, 2, bsNameColumnName)
    If bsNameColumnNumberInTransportSheet = -1 Then Exit Function '|fffd||fffd||fffd||fb||fffd||4b5||fffd||fffd||fffd||fffd||2f3||fffd|
    
    
    Dim maxRowNumber As Long, boardStyleNameColumnNumber As Long, rowIndex As Long
    maxRowNumber = transportSheet.Cells(65535, bsNameColumnNumberInTransportSheet).End(xlUp).row '|fffd||f5||fffd||fffd||fffd||fffd||fffd||4b3||fffd||fffd||fffd||fffd||fffd|
    
    boardStyleNameColumnNumber = getBoardStyleNameColumnNumber(transportSheet) '|fffd||f5||fffd|BoardStyleName|fffd||43a||fffd|
    If boardStyleNameColumnNumber = -1 Then Exit Function '|fffd||fffd||fffd||fffd||6b4||fffd||fffd||fffd||4b3||fb||fffd||4b5||fffd|BoardStyleName|fffd||5b6||3a3||fffd||fffd||fffd||fffd||2f3||fffd|
    
    Dim bsNameInTransportSheet As String
    For rowIndex = 3 To maxRowNumber
        bsNameInTransportSheet = transportSheet.Cells(rowIndex, bsNameColumnNumberInTransportSheet).value
        If bsNameInTransportSheet = bsName Then  '|fffd||6b4||fffd||fffd||fffd||4b3||fffd||4b5||fffd||fffd||fb||fffd||57e||fffd||fffd||fffd||fffd|
            getBoardStyleName = transportSheet.Cells(rowIndex, boardStyleNameColumnNumber).value
            Exit Function
        End If
    Next rowIndex
End Function
Attribute VB_Name = "AddRef"
Option Explicit
Public hisHyperlinkMap  As Collection
Private controlDefineMap As Collection
Public mappingDefineMap As Collection

'|fffd||fffd||5b8||fffd||fffd|sheet|4b3||fffd||fffd||5b8||fffd||fffd||fffd||423||fffd||fffd||fffd||fffd||fffd||5b8||fffd||fffd||fffd||423||fffd||fffd||fffd||fffd||fffd||fffd||43a||fffd|
Function Get_RefCol(sheetName As String, recordRow As Long, groupName As String, ColValue As String) As Long
    On Error GoTo ErrorHandler
    Dim m_colNum As Long
    Dim m_GroupColNum As Long
    Dim f_flag As Boolean
    f_flag = False
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Worksheets(sheetName)
    For m_colNum = 1 To ws.Range("IV" + CStr(recordRow)).End(xlToLeft).column
        If Get_DesStr(ColValue) = Get_DesStr(ws.Cells(recordRow, m_colNum).value) Then
            If groupName = "" Then
                f_flag = True
                Exit For
            Else
                m_GroupColNum = m_colNum
                While Get_DesStr(ws.Cells(recordRow - 1, m_GroupColNum).value) = ""
                    m_GroupColNum = m_GroupColNum - 1
                Wend
                If Get_DesStr(groupName) = Get_DesStr(ws.Cells(recordRow - 1, m_GroupColNum).value) Then
                    f_flag = True
                    Exit For
                End If
            End If
        End If
    Next
    If f_flag = False Then
        'MsgBox sheetName & "|231||fffd||fffd||fffd||423||fffd|" & ColValue, vbExclamation, "Warning"
    Else
        Get_RefCol = m_colNum
    End If
    Exit Function
ErrorHandler:
    Get_RefCol = -1
End Function

'|fffd||fffd||5b8||fffd||fffd|sheet|4b3||fffd||fffd||fffd||fffd|group|fffd||fffd||fffd||fffd||fffd||fffd|
Function Get_GroupRefRow(sheetName As String, groupName As String) As Long
    Dim m_rowNum As Long
    Dim f_flag As Boolean
    f_flag = False
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Worksheets(sheetName)
    For m_rowNum = 1 To ws.Range("a65536").End(xlUp).row
        If GetDesStr(groupName) = GetDesStr(ws.Cells(m_rowNum, 1).value) Then
            f_flag = True
            Exit For
        End If
    Next
    If f_flag = False Then
        'MsgBox sheetName & "|231||fffd||fffd|Group|fffd||fffd|" & groupName, vbExclamation, "Warning"
    End If
    
    Get_GroupRefRow = m_rowNum
    
End Function


'|fffd||fffd||fffd||23d||fffd||fffd||5b7||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function Get_DesStr(srcStr As String) As String
    Get_DesStr = UCase(Trim(srcStr))
End Function

'|fffd||fffd||fffd||fffd||1f7||fffd||3aa||fffd||3f7||fffd||fffd||fffd||fffd||fffd||fffd||4f8||fffd||2bd|
Function Is_Ref(celValue As String, splitStr As String) As Boolean
    Dim v
    Dim refFlag As Boolean
    refFlag = True
    
    v = Split(celValue, splitStr)
    Dim I As Long
    For I = 0 To UBound(v)
        If v(I) = "" Then
            refFlag = False
        End If
    Next I
        
    If I <> 3 Then
        refFlag = False
    End If
    
    Is_Ref = refFlag
End Function

Sub modifyRefRange(sh As Worksheet, nowSheetHyper As Collection, hisSheetHyper As Collection, address As String)
    
    Dim nowlinkType As ClinkType
    Dim hisLinkType As ClinkType
    Set nowlinkType = nowSheetHyper(address)
    Set hisLinkType = hisSheetHyper(address)
    
    '|fffd||436||3f1||fffd||4e6||fffd||f5||fffd||fffd||1f7||fffd||fffd||fffd|Moc|fffd||fffd||fffd||fffd||fffd||fffd||1e3||fffd||fffd||fffd||fffd||f8||131||fffd||fffd||fffd||2be|
    Dim mapdef As CMappingDef
    Set mapdef = getMappingDefine(nowlinkType.linkSheetName, nowlinkType.linkGroupName, nowlinkType.linkColumName)
    If mapdef Is Nothing Or mapdef.neType = "" Then  '|fffd||fffd||fffd||fffd|Range|fffd||fffd||2be|
            Dim columnName As String
            Dim groupName As String
            Dim ctlDef As New CControlDef
            groupName = get_GroupName(sh.name, nowlinkType.colNum)
            columnName = get_ColumnName(sh.name, nowlinkType.colNum)
            Set ctlDef = getControlDefine(sh.name, groupName, columnName)
            Call deleteRang(hisLinkType)
            If Not (ctlDef Is Nothing) Then
                Call addRange(nowlinkType, ctlDef)
            End If
            Call deleteRefComment(nowSheetHyper, hisLinkType)
            Call addRefComment(nowlinkType)
    End If
    
    Call hisSheetHyper.Remove(address) '|27e||fffd||fffd||52d||fffd||fffd||fffd||fffd||fffd||fffd|
    hisSheetHyper.Add Item:=nowlinkType, key:=address '|fffd||fffd||fffd||4f5||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd|
    Call hisHyperlinkMap.Remove(sh.name)
    hisHyperlinkMap.Add Item:=hisSheetHyper, key:=sh.name
    
End Sub
Sub addRefRange(sh As Worksheet, linktype As ClinkType, hisSheetHyper As Collection, address As String)
    
    '|fffd||436||3f1||fffd||4e6||fffd||f5||fffd||fffd||1f7||fffd||fffd||fffd|Moc|fffd||fffd||fffd||fffd||fffd||fffd||1e3||fffd||fffd||fffd||fffd||f8||131||fffd||fffd||fffd||2be|
    Dim mapdef As CMappingDef
    Set mapdef = getMappingDefine(linktype.linkSheetName, linktype.linkGroupName, linktype.linkColumName)
    If mapdef Is Nothing Or mapdef.neType = "" Then
        Dim columnName As String
        Dim groupName As String
        Dim ctlDef As New CControlDef
        groupName = get_GroupName(sh.name, linktype.colNum)
        columnName = get_ColumnName(sh.name, linktype.colNum)
        Set ctlDef = getControlDefine(sh.name, groupName, columnName)
        If Not (ctlDef Is Nothing) Then
                Call addRange(linktype, ctlDef)
        End If
        Call addRefComment(linktype)
    End If
    
    hisSheetHyper.Add Item:=linktype, key:=address
    Call hisHyperlinkMap.Remove(sh.name)
    hisHyperlinkMap.Add Item:=hisSheetHyper, key:=sh.name
End Sub

Private Sub addRange(linktype As ClinkType, ctlDef As CControlDef)
            Dim boundValue As String
            If ctlDef.dataType = "Enum" Then
                boundValue = ctlDef.lstValue
            Else
                boundValue = ctlDef.bound
            End If
            If linktype.linkSheetName = getResByKey("Comm Data") Then
                Call setRefValidation(ctlDef.dataType, boundValue, ThisWorkbook.Worksheets(linktype.linkSheetName), linktype.linkRowNum, linktype.linkColNum)
            Else
                Dim index As Long
                For index = 3 To ThisWorkbook.Worksheets(linktype.linkSheetName).Range("a65536").End(xlUp).row
                         Call setRefValidation(ctlDef.dataType, boundValue, ThisWorkbook.Worksheets(linktype.linkSheetName), index, linktype.linkColNum)
                Next
            End If
End Sub

Private Sub setRefValidation(ByVal contedType As String, ByVal boundValue As String, sheet As Worksheet, ByVal RowNum As Long, ByVal colNum As Long)
    On Error Resume Next
    Dim inputTitle As String
    inputTitle = getResByKey("Range")
    If contedType = "Enum" Then
        If boundValue <> sheet.Cells(RowNum, colNum).Validation.Formula1 Or sheet.Cells(RowNum, colNum).Validation.inputMessage = "" Then
            With sheet.Cells(RowNum, colNum).Validation
                .Add Type:=xlValidateList, Formula1:=boundValue
                .inputTitle = getResByKey("Range")
                .inputMessage = "[" + boundValue + "]"
                .ShowInput = True
                .ShowError = False
            End With
            sheet.Cells(RowNum, colNum).Validation.Modify Type:=xlValidateList, Formula1:=boundValue
        End If
    End If
End Sub

Sub deleteRefRang(sh As Worksheet, nowSheetHyper As Collection, hisSheetHyper As Collection, address As String)
    Dim mapdef As CMappingDef
    Dim linktype As ClinkType
    
    Set linktype = hisSheetHyper(address)
    
    Set mapdef = getMappingDefine(linktype.linkSheetName, linktype.linkGroupName, linktype.linkColumName)
    If mapdef Is Nothing Or mapdef.neType = "" Then
            Call deleteRang(linktype)
            Call deleteRefComment(nowSheetHyper, linktype)
    End If
    Call hisSheetHyper.Remove(address)
    Call hisHyperlinkMap.Remove(sh.name)
    hisHyperlinkMap.Add Item:=hisSheetHyper, key:=sh.name
    'If isListSheet(Sh.name) Then
    '    Call deletListRange(linktype)
    'End If
    
End Sub

Private Sub deleteRang(linktype As ClinkType)
            If linktype.linkSheetName = getResByKey("Comm Data") Then
                ThisWorkbook.Worksheets(linktype.linkSheetName).Cells(linktype.linkRowNum, linktype.linkColNum).Validation.Delete
            Else
                Dim index As Long
                For index = 3 To ThisWorkbook.Worksheets(linktype.linkSheetName).Range("a65536").End(xlUp).row
                         ThisWorkbook.Worksheets(linktype.linkSheetName).Cells(index, linktype.linkColNum).Validation.Delete
                Next
            End If
End Sub

Private Sub addRefComment(linktype As ClinkType)
            Dim refComment As Comment
            Dim textComment As String
            Dim reRange As Range
            Set reRange = ThisWorkbook.Worksheets(linktype.linkSheetName).Cells(linktype.linkColumRowNum, linktype.linkColNum)
            If Not (reRange Is Nothing) Then
                Set refComment = reRange.Comment
                If refComment Is Nothing Then
                    textComment = getResByKey("Referenced By") + vbCr + vbLf
                    textComment = textComment + "(" + linktype.getKey + ")"
                    With reRange.addComment
                        .Visible = False
                        .text textComment
                    End With
                Else
                    textComment = addComment(refComment.text, linktype)
                    reRange.Comment.Delete
                    With reRange.addComment
                        .Visible = False
                        .text textComment
                    End With
                End If
                reRange.Comment.Shape.TextFrame.AutoSize = True
                reRange.Comment.Shape.TextFrame.Characters.Font.Bold = True
            End If
End Sub



Private Sub deleteRefComment(nowSheetHyper As Collection, linktype As ClinkType)
            Dim refComment As Comment
            Dim textComment As String
            Dim textFinal As String
            Dim reRange As Range
            Set reRange = ThisWorkbook.Worksheets(linktype.linkSheetName).Cells(linktype.linkColumRowNum, linktype.linkColNum)
            If Not (reRange Is Nothing) Then
                Set refComment = reRange.Comment
                If Not (refComment Is Nothing) Then
                        textFinal = deleteComment(nowSheetHyper, refComment.text, linktype)
                        refComment.Delete
                        If textFinal <> "" Then
                            With reRange.addComment
                                .Visible = False
                                .text textFinal
                            End With
                            reRange.Comment.Shape.TextFrame.AutoSize = True
                            reRange.Comment.Shape.TextFrame.Characters.Font.Bold = True
                        End If
                    End If
            End If
End Sub



Private Function addComment(text As String, linktype As ClinkType) As String
       Dim comments As Variant
       Dim recomments As String
       comments = Split(text, vbCr + vbLf)
       Dim index As Long
       Dim linktxt As String
       For index = 1 To UBound(comments)
                 If comments(index) <> "" Then
                    linktxt = Mid(comments(index), 2, Len(comments(index)) - 2)
                    If Trim(linktxt) <> linktype.getKey Then
                            recomments = recomments + "(" + linktxt + ")" + vbCr + vbLf
                    End If
                 End If
       Next
       recomments = comments(0) + vbCr + vbLf + recomments + "(" + linktype.getKey + ")"
       addComment = recomments
End Function

Private Function deleteComment(nowSheetHyper As Collection, text As String, linktype As ClinkType) As String
    Dim comments As Variant
    Dim recomments As String
    comments = Split(text, vbCr + vbLf)
    
    Dim index As Long
    Dim linktxt As String
    For index = 1 To UBound(comments)
            If comments(index) <> "" Then
                linktxt = Mid(comments(index), 2, Len(comments(index)) - 2)
               If Trim(linktxt) <> linktype.getKey Or isLinked(nowSheetHyper, linktype) Then
                    recomments = recomments + "(" + linktxt + ")" + vbCr + vbLf
               End If
            End If
    Next
    If recomments <> "" Then
        recomments = comments(0) + vbCr + vbLf + recomments
    End If
    deleteComment = recomments
End Function

Private Function isLinked(nowSheetHyper As Collection, linktxt As ClinkType) As Boolean
        Dim link As ClinkType
        For Each link In nowSheetHyper
                If link.sheetName = linktxt.sheetName And link.groupName = linktxt.groupName And link.columName = linktxt.columName _
                And link.linkSheetName = linktxt.linkSheetName And link.linkGroupName = linktxt.linkGroupName And link.linkColNum = linktxt.linkColNum Then
                    isLinked = True
                    Exit Function
                End If
        Next
        isLinked = False
End Function


Function Contains(coll As Collection, key As String) As Boolean
        On Error GoTo NotFound
        Call coll(key)
        Contains = True
        Exit Function
NotFound:
        Contains = False
End Function


Function CheckValueInRefRange(ByVal cCtlDef As CControlDef, ByVal attrValue As String, cellRange As Range) As Boolean
    Dim attrType As String
    Dim attrRange As String
    Dim arrayList() As String
    Dim errorMsg, sItem As String
    Dim I, nResponse, nLoop As Long
    Dim min, max As Long
    
    attrType = cCtlDef.dataType
    attrRange = cCtlDef.bound
    
    If attrRange = "" Then
        CheckValueInRefRange = True
        Exit Function
    End If
    
    If attrType = "Enum" Then
        CheckValueInRefRange = False
        arrayList = Split(attrRange, ",")
        For I = 0 To UBound(arrayList)
            If Trim(attrValue) = arrayList(I) Then
                CheckValueInRefRange = True
                Exit For
            End If
        Next
        errorMsg = getResByKey("Range") + "[" + attrRange + "]"
    ElseIf attrType = "String" Or attrType = "Password" Or attrType = "ATM" Then
        min = CLng(Mid(attrRange, 2, InStr(1, attrRange, ",") - 2))
        max = CLng(Mid(attrRange, InStr(1, attrRange, ",") + 1, InStr(1, attrRange, "]") - InStr(1, attrRange, ",") - 1))
        If Len(attrValue) < min Or Len(attrValue) > max Then
            CheckValueInRefRange = False
        Else
            CheckValueInRefRange = True
        End If
        If min = max Then
            errorMsg = getResByKey("Limited Length") + "[" + CStr(min) + "]"
        Else
            errorMsg = getResByKey("Limited Length") + Replace(attrRange, ",", "~")
        End If
    ElseIf attrType = "IPV4" Or attrType = "IPV6" _
        Or attrType = "Time" Or attrType = "Date" _
        Or attrType = "DateTime" Or attrType = "Bitmap" _
        Or attrType = "Mac" Then
        CheckValueInRefRange = False
        Exit Function
    Else  '|fffd||fffd||5b5|
        If Check_Int_Validation(attrRange, attrValue) = True Then
            CheckValueInRefRange = True
        Else
            CheckValueInRefRange = False
        End If
        errorMsg = getResByKey("Range") + formatRange(attrRange)
    End If
    
    If CheckValueInRefRange = False Then
        errorMsg = getResByKey("Referenced By") + cCtlDef.groupName + "," + cCtlDef.sheetName + "," + cCtlDef.columnName + vbCr + vbLf + errorMsg
        nResponse = MsgBox(errorMsg, vbRetryCancel + vbCritical + vbApplicationModal + vbDefaultButton1, getResByKey("Warning"))
        If nResponse = vbRetry Then
            cellRange.Select
        End If
        cellRange.value = ""
    End If
End Function

Sub initAddRef()
    initControlDefineMap
    initmappingDefineMap
End Sub
Sub initControlDefineMap()
        Set controlDefineMap = getAllControlDefines()
End Sub
Sub initmappingDefineMap()
        Set mappingDefineMap = getAllMappingDefs()
End Sub
Function getControlDefine(sheetName As String, groupName As String, columnName As String) As CControlDef
        Dim key As String
        Dim def As CControlDef
        
        key = sheetName + "," + groupName + "," + columnName
        If controlDefineMap Is Nothing Then
            initControlDefineMap
        End If
        
        If Contains(controlDefineMap, key) Then
            Set def = controlDefineMap(key)
        End If
        Set getControlDefine = def
End Function


Function getMappingDefine(sheetName As String, groupName As String, columnName As String) As CMappingDef
        Dim key As String
        Dim def As CMappingDef
        
        key = sheetName + "," + groupName + "," + columnName
        If mappingDefineMap Is Nothing Then
            initmappingDefineMap
        End If
        
        If Contains(mappingDefineMap, key) Then
            Set def = mappingDefineMap(key)
        End If
        Set getMappingDefine = def
End Function

Function getAllMappingDefs() As Collection
        Dim mp As Collection
        Dim mpdef As CMappingDef
        Dim sheetDef As Worksheet
        Dim index As Long
        Dim defCollection As New Collection
        Set sheetDef = ThisWorkbook.Worksheets("MAPPING DEF")
        For index = 2 To sheetDef.Range("a65536").End(xlUp).row
                Set mpdef = New CMappingDef
                mpdef.sheetName = sheetDef.Cells(index, 1)
                mpdef.groupName = sheetDef.Cells(index, 2)
                mpdef.columnName = sheetDef.Cells(index, 3)
                mpdef.mocName = sheetDef.Cells(index, 4)
                mpdef.attributeName = sheetDef.Cells(index, 5)
                mpdef.neType = sheetDef.Cells(index, 12)
                mpdef.neVersion = sheetDef.Cells(index, 13)
                If Not Contains(defCollection, mpdef.getKey) Then
                    defCollection.Add Item:=mpdef, key:=mpdef.getKey
                End If
        Next
        Set getAllMappingDefs = defCollection
End Function

Function getAllControlDefines() As Collection
    On Error Resume Next
    Dim ctlDef As CControlDef
    Dim sheetDef As Worksheet
    Dim index As Long
    Dim defCollection As New Collection
    
    Set sheetDef = ThisWorkbook.Worksheets("CONTROL DEF")
    
    For index = 2 To sheetDef.Range("a65536").End(xlUp).row
            Set ctlDef = New CControlDef
            ctlDef.mocName = sheetDef.Cells(index, 1).value
            ctlDef.attributeName = sheetDef.Cells(index, 2).value
            ctlDef.dataType = sheetDef.Cells(index, 3).value
            ctlDef.bound = sheetDef.Cells(index, 4).value
            ctlDef.lstValue = sheetDef.Cells(index, 5).value
            ctlDef.controlInfo = sheetDef.Cells(index, 6).value
            ctlDef.sheetName = sheetDef.Cells(index, 7).value
            ctlDef.groupName = sheetDef.Cells(index, 8).value
            ctlDef.columnName = sheetDef.Cells(index, 9).value
            ctlDef.neType = sheetDef.Cells(index, 10).value
            If Not Contains(defCollection, ctlDef.getKey) Then
                defCollection.Add Item:=ctlDef, key:=ctlDef.getKey
            End If
    Next
    Set getAllControlDefines = defCollection
End Function








Attribute VB_Name = "AutoDeployment"
'|fffd||fffd||fffd||5f34||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2d26||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||26b|
Const SolidColorIdx = 16
Const SolidPattern = xlGray16
Const NullPattern = xlNone

Public Sub AutoDeploySheetChange(ByVal sheet As Object, ByVal Target As Range)
    Dim connTypeCol As Long
    Dim authenticationTypeCol As Long
    connTypeCol = 8
    authenticationTypeCol = 9
    
    If (Target.Interior.colorIndex = SolidColorIdx) And Target.value <> "" Then
        Target.value = ""
        MsgBox getResByKey("NoInput")
        Exit Sub
    End If
    
    If Target.row > 2 And Target.column = connTypeCol And Target.value = getResByKey("commConn") Then
                sheet.Cells(Target.row, authenticationTypeCol).Interior.colorIndex = SolidColorIdx
                sheet.Cells(Target.row, authenticationTypeCol).Interior.Pattern = SolidPattern
                sheet.Cells(Target.row, authenticationTypeCol).value = ""
                sheet.Cells(Target.row, authenticationTypeCol).Validation.ShowInput = False
    ElseIf Target.row > 2 And Target.column = connTypeCol And Target.value = getResByKey("sslConn") Then
                sheet.Cells(Target.row, authenticationTypeCol).Interior.colorIndex = NullPattern
                sheet.Cells(Target.row, authenticationTypeCol).Interior.Pattern = NullPattern
                sheet.Cells(Target.row, authenticationTypeCol).Validation.ShowInput = True
    End If
    
End Sub

Attribute VB_Name = "BaseStationForm"
Attribute VB_Base = "0{FBB20385-EE06-4015-8B7A-DA4366BBC90C}{DDC40C34-9C7B-4B65-B4A3-E2C0FA2A8DBB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Private Sub CancelButton_Click()
    Unload Me
End Sub

Private Sub OKButton_Click()
    Dim baseStationName As String
    Dim CellSheetName As String
    baseStationName = Me.BaseStationList.value
    CellSheetName = ActiveSheet.name
    If IsGBTSTemplate() Then
        Call AddTrxBinds(baseStationName, CellSheetName)
    Else
        Call AddSectorEqm(baseStationName)
    End If
    
    Unload Me
End Sub

'|fffd||4e1||fffd||fffd||fffd||1f0||fffd||fffd||fffd||fffd||4b3||fffd||fffd||fb||fffd||57e||fffd||fffd||fffd||1a1||fffd|
Private Sub Set_BaseStation_Related()
    Dim RowNum As Long
    Dim maxRow As String
    Dim nowSelection As Range
    Dim index As Long
    Dim baseStationCollection As Collection
    Dim baseStationName As Variant
    Dim selectBtsName As String
    Set baseStationCollection = New Collection
    BaseStationList.Clear
    
    Set nowSelection = Selection
    selectBtsName = ActiveSheet.Cells(nowSelection.row, 1).value
    If IsGBTSTemplate() Then
        selectBtsName = ActiveSheet.Cells(nowSelection.row, getGcellBTSNameCol(ActiveSheet.name)).value
    End If
    
    If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
        baseStationCollection.Add (selectBtsName)
    Else
        maxRow = ActiveSheet.Range("a65536").End(xlUp).row
        For RowNum = 3 To maxRow
            baseStationName = ActiveSheet.Cells(RowNum, 1).value
            '@gbts
            If IsGBTSTemplate() Then
                baseStationName = ActiveSheet.Cells(RowNum, getGcellBTSNameCol(ActiveSheet.name)).value
            End If
    
            If existInCollection(baseStationName, baseStationCollection) = False And Trim(baseStationName) <> "" Then
                baseStationCollection.Add (baseStationName)
            End If
        Next
    End If
    
    For Each baseStationName In baseStationCollection
        If Trim(baseStationName) <> "" Then
            BaseStationList.AddItem (baseStationName)
        End If
            
    Next
    
    If baseStationCollection.count <> 0 Then
        Me.BaseStationList.ListIndex = getIndexInCollection(selectBtsName, baseStationCollection)
    End If
End Sub

Private Function existInCollection(strValue As Variant, strCollection As Collection) As Boolean
    Dim sItem As Variant
    For Each sItem In strCollection
        If sItem = strValue Then
            existInCollection = True
            Exit Function
        End If
    Next
    existInCollection = False
End Function

Private Function getIndexInCollection(strValue As Variant, strCollection As Collection) As Long
    Dim sItem As Variant
    Dim index As Long
    index = 0
    For Each sItem In strCollection
        If sItem = strValue Then
            getIndexInCollection = index
            Exit Function
        End If
        index = index + 1
    Next
    getIndexInCollection = 0
End Function


Private Sub UserForm_Initialize()
    Call Upt_Desc
    Call Set_BaseStation_Related
End Sub

Private Sub Upt_Desc()
    BaseStationForm.Caption = getResByKey("BaseStationForm.Caption")
    BaseStationNameBox.Caption = getResByKey("BaseStationNameBox.Caption")
    OKButton.Caption = getResByKey("OKButton.Caption")
    CancelButton.Caption = getResByKey("CancelButton.Caption")
End Sub



Attribute VB_Name = "BoardStyleForm"
Attribute VB_Base = "0{DA38D0E2-3F40-4E06-B8BA-77F3A278D7AA}{E967D30F-2AC4-49E9-AB5E-06458F89F15A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Explicit

Private Const MaxMocNumber As Long = 10

Private Sub CancelButton_Click()
    Unload Me
End Sub

Private Sub FinishButton_Click()
    Unload Me
End Sub

Private Sub NextButton_Click()
    Call makeNewRecords
    Me.Hide
End Sub

Private Sub makeNewRecords()
    Dim groupName As String
    Dim moiNumber As Long
    groupName = Me.MocNameComboBox.value
    moiNumber = CLng(Me.MocNumberComboBox.value)
    
    Dim groupNameStartRowNumber As Long, groupNameEndRowNumber As Long
    Call getGroupNameStartAndEndRowNumber(groupName, groupNameStartRowNumber, groupNameEndRowNumber)
    
    Set selectedGroupMappingDefData = boardStyleMappingDefMap.GetAt(groupName)
    
    Call addNewLines(groupNameStartRowNumber + 2, groupNameEndRowNumber + 1, moiNumber, selectedGroupMappingDefData.totalColumnNumber)
    'Call setNewRangesStyle(groupNameEndRowNumber + 1, groupNameEndRowNumber + moiNumber, )
    
End Sub

Private Sub addNewLines(ByVal srcRowNumber As Long, ByVal dstRowNumber As Long, ByVal moiNumber As Long, ByVal maxColumnNumber As Long)
    Call insertNewLines(srcRowNumber, dstRowNumber, moiNumber)
    Call setNewRangesStyle(srcRowNumber, dstRowNumber, moiNumber, maxColumnNumber)
End Sub

Private Sub insertNewLines(ByVal srcRowNumber As Long, ByVal dstRowNumber As Long, ByVal moiNumber As Long)
    Dim k As Long
    Dim srcRowRange As Range, dstRowRange As Range
    Set srcRowRange = currentSheet.rows(srcRowNumber)
    Set dstRowRange = currentSheet.rows(dstRowNumber)
    For k = 1 To moiNumber
        srcRowRange.Copy
        dstRowRange.Insert Shift:=xlShiftDown
    Next k
    Application.CutCopyMode = False
End Sub

Private Sub setNewRangesStyle(ByVal srcRowNumber As Long, ByVal dstRowNumber As Long, ByVal moiNumber As Long, ByVal maxColumnNumber As Long)
    Call initMoiRowsManager(srcRowNumber, dstRowNumber, moiNumber, maxColumnNumber)
    Call setNewRangesBackgroundColour(NewMoiRangeColorIndex)
    
    Dim endRowNumber As Long
    endRowNumber = dstRowNumber + moiNumber - 1
    Call setNeedFillInRangesStyles(dstRowNumber, endRowNumber)
    Call clearBoardNoRanges(dstRowNumber, endRowNumber)
    Call clearNeedClearInRangesStyles(dstRowNumber, endRowNumber)
    
    Call selectCertainCell(currentSheet, "A" & srcRowNumber - 2)
End Sub

Private Sub initMoiRowsManager(ByVal srcRowNumber As Long, ByVal dstRowNumber As Long, ByVal moiNumber As Long, ByVal maxColumnNumber As Long)
    moiRowsManager.groupNameRowNumber = srcRowNumber - 2
    moiRowsManager.startRowNumber = dstRowNumber
    moiRowsManager.endRowNumber = dstRowNumber + moiNumber - 1
    moiRowsManager.maxColumnNumber = maxColumnNumber
End Sub

'Private Sub setNewRangesStyles()
'    Dim newMoiRange As Range
'    Set newMoiRange = moiRowsManager.getMoiRange
'    newMoiRange.Interior.colorIndex = NewMoiRangeColorIndex
'End Sub

Private Sub setNeedFillInRangesStyles(ByVal startRowNumber As Long, ByVal endRowNumber As Long)
    Dim needFillColumnNameCol As Collection
    Set needFillColumnNameCol = selectedGroupMappingDefData.needFillColumnNameCol
    Dim columnNamePositionLetterMap As CMap
    Set columnNamePositionLetterMap = selectedGroupMappingDefData.columnNamePositionLetterMap
    Dim columnName As Variant
    Dim columnNamePositionLetter As String
    Dim needFillInRange As Range
    For Each columnName In needFillColumnNameCol
        columnNamePositionLetter = columnNamePositionLetterMap.GetAt(columnName)
        Set needFillInRange = currentSheet.Range(currentSheet.Range(columnNamePositionLetter & startRowNumber), currentSheet.Range(columnNamePositionLetter & endRowNumber))
        needFillInRange.Interior.colorIndex = NeedFillInRangeColorIndex
        needFillInRange.ClearContents
        Call moiRowsManager.addNeedFillInRange(CStr(columnName), needFillInRange)
    Next columnName
End Sub

Private Sub clearNeedClearInRangesStyles(ByVal startRowNumber As Long, ByVal endRowNumber As Long)
    Dim needClearColumnNameCol As Collection
    Set needClearColumnNameCol = selectedGroupMappingDefData.needClearColumnNameCol
    Dim columnNamePositionLetterMap As CMap
    Set columnNamePositionLetterMap = selectedGroupMappingDefData.columnNamePositionLetterMap
    Dim columnName As Variant
    Dim columnNamePositionLetter As String
    Dim needClearInRange As Range
    
    If includeColumnName(columnName) Then
        For Each columnName In needClearColumnNameCol
            columnNamePositionLetter = columnNamePositionLetterMap.GetAt(columnName)
            Set needClearInRange = currentSheet.Range(currentSheet.Range(columnNamePositionLetter & startRowNumber), currentSheet.Range(columnNamePositionLetter & endRowNumber))
            needClearInRange.ClearContents
        Next columnName
    End If
End Sub

Private Function includeColumnName(ByRef columnName As Variant) As Boolean
    Dim mappingDefSheet As Worksheet
    Set mappingDefSheet = ThisWorkbook.Worksheets("MAPPING DEF")
    
    Dim columnNameInMappingDef As String
    Dim RowNumber As Long
    includeColumnName = False
    
    For RowNumber = 2 To mappingDefSheet.Range("a65536").End(xlUp).row
        columnNameInMappingDef = ""
        columnNameInMappingDef = mappingDefSheet.Range("C" & RowNumber).value
        
        If columnNameInMappingDef = columnName Then
            includeColumnName = True
            Exit For
        End If
    Next RowNumber
End Function


Private Sub initMocNameComboBox()
    Set boardStyleMappingDefMap = boardStyleData.getBoardStyleMappingDefMap
    
    Dim groupName As String
    Dim groupNameCollection As Collection
    Set groupNameCollection = getKeyValueCollection(boardStyleMappingDefMap.KeyCollection)
    
    If currentSheet Is Nothing Then Set currentSheet = ThisWorkbook.ActiveSheet
    
    Dim RowNumber As Long
    With Me.MocNameComboBox
        For RowNumber = 1 To currentSheet.Range("A65535").End(xlUp).row
            groupName = currentSheet.Range("A" & RowNumber).value
            If Contains(groupNameCollection, groupName) Then
                If RowNumber = 1 Then
                    .AddItem groupName
                ElseIf rowIsBlank(currentSheet, RowNumber - 1) Then
                    .AddItem groupName
                End If
            End If
        Next RowNumber
    End With
    
    Dim selectedGroupName As String
    Call getSelectedGroupName(selectedGroupName)
    If Me.MocNameComboBox.ListCount <> 0 Then
        If Contains(groupNameCollection, selectedGroupName) Then '??|fffd|???|fffd|????|fffd||fffd|?|fffd|?|fffd||fffd|
            Me.MocNameComboBox.value = selectedGroupName
        Else
            Me.MocNameComboBox.ListIndex = 0
        End If
    End If
End Sub

Private Sub getSelectedGroupName(ByRef selectedGroupName As String)
    Dim selectionRange As Range
    Set selectionRange = Selection
    selectedGroupName = selectionRange(1).value
End Sub

Private Sub initMocNumberComboBox()
    Dim number As Long
    With Me.MocNumberComboBox
        For number = 1 To MaxMocNumber
            .AddItem number
        Next number
    End With
    If Me.MocNumberComboBox.ListCount <> 0 Then Me.MocNumberComboBox.ListIndex = 0
End Sub

Private Sub UserForm_Initialize()
    On Error GoTo ErrorHandler
    Call Upt_Desc
    Set addBoardStyleMoiInProcess = New CAddingBoardStyleMoc
    Set moiRowsManager = New CMoiRowsManager
    Call addBoardStyleMoiInProcess.init
    If boardStyleData Is Nothing Then
        Call initBoardStyleMappingDataPublic
    End If
    Call initMocNameComboBox
    Call initMocNumberComboBox
    Exit Sub
ErrorHandler:
End Sub

Private Sub UserForm_Terminate()
    Set addBoardStyleMoiInProcess = Nothing
    Set moiRowsManager = Nothing
End Sub


Private Sub Upt_Desc()
    AddMocLabel.Caption = getResByKey("AddMocLabel.Caption")
    BoardStyleForm.Caption = getResByKey("BoardStyleForm.Caption")
    CancelButton.Caption = getResByKey("CancelButton.Caption")
    MocNumberLabel.Caption = getResByKey("MocNumberLabel.Caption")
    NextButton.Caption = getResByKey("NextButton.Caption")
End Sub


Attribute VB_Name = "BranchControl"
Option Explicit
Public Type controlRelation
    mocName As String
    contAttr As String
    contedAttrs(100) As String
    contedNum As Long '|fffd||fffd|0|fffd||fffd||2bc|
    neType  As String '|fffd||2f2||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||1ff||fffd||fffd||fffd||fffd||fffd||fffd||13b||fffd||fffd||fffd||fffd||fffd||fffd||fffd||57e||fffd||123||fffd||fffd||fffd||fffd||6bf||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||57e||fffd||43f||fffd||fffd||fffd|Moc|fffd||372||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd|
    sheetName As String ' |fffd||2f2||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd||fffd||fffd||fffd||5a3||fffd||36c||4bb|Moc|fffd||fffd||fffd||fffd||fffd||6b2||fffd||36c||fffd||fffd|Sheet|fffd||fffd|Comm Data|4b3||fffd||fffd||fffd||fffd||5a3||fffd||fffd||fffd||2b1||fffd||a3b32||fffd||fffd||73f||fffd|sheet|4b3||1e9||fffd||fffd||fffd||fffd|
End Type
Public ControlRelMap(1000) As controlRelation
Public contAttrValArray(100) As String
Dim ControlRelationNum As Long

Private controlRelationManager As CControlRelationManager

Private actualBoardStyleName As String

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||26b|
Public Const SolidColorIdx = 16
Public Const SolidPattern = xlGray16
Const NullPattern = xlNone
Const NormalPattern = 1

Function isControlDefSheetExist() As Boolean
    Dim SheetNum As Long
    isControlDefSheetExist = False
    For SheetNum = 1 To ThisWorkbook.Worksheets.count
        If "CONTROL DEF" = ThisWorkbook.Worksheets(SheetNum).name Then
            isControlDefSheetExist = True
            Exit For
        End If
    Next
End Function
Sub buildControlRelations()
    Dim conRowNum As Long
    Dim I, J As Long
    Dim conInfor As String, mocName As String, contedName As String, contName As String
    Dim isExist, flag, isfound As Boolean
    Dim index1, index2, index3, index4 As Long
    Dim neType As String
    Dim sheetName As String
    
    Dim groupName As String, columnName As String, valueType As String
    
    Set controlRelationManager = New CControlRelationManager '|fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||3a7||423||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    If isControlDefSheetExist = False Then
        Exit Sub
    End If
    
    ControlRelationNum = 0
    Dim controldef As Worksheet
    Set controldef = ThisWorkbook.Worksheets("CONTROL DEF")
    For conRowNum = 2 To controldef.Range("a65536").End(xlUp).row

        mocName = Trim(controldef.Cells(conRowNum, 1).value)
        contedName = Trim(controldef.Cells(conRowNum, 2).value)
        conInfor = Trim(controldef.Cells(conRowNum, 6).value)
        neType = Trim(controldef.Cells(conRowNum, 10).value)
        sheetName = Trim(controldef.Cells(conRowNum, 7).value)
    
        groupName = Trim(controldef.Range("H" & conRowNum).value)
        columnName = Trim(controldef.Range("I" & conRowNum).value)
        valueType = Trim(controldef.Range("C" & conRowNum).value)
        Call controlRelationManager.addNewAttributeRelation(mocName, contedName, conInfor, neType, sheetName, groupName, columnName, valueType)
        
        If conInfor <> "" Then
            While InStr(1, conInfor, "attribute", vbBinaryCompare) <> 0
                conInfor = Mid(conInfor, InStr(1, conInfor, "attribute", vbBinaryCompare) + 11)
                contName = Mid(conInfor, 1, InStr(1, conInfor, """") - 1)
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||635||fffd||4f3||fffd||fffd||fffd||3f5|
                isExist = False
                If ControlRelationNum > 0 Then
                    For I = 0 To ControlRelationNum - 1
                        If (mocName = ControlRelMap(I).mocName) And (contName = ControlRelMap(I).contAttr) _
                        And (neType = ControlRelMap(I).neType) And (sheetName = ControlRelMap(I).sheetName) Then
                            flag = False
                            For J = 0 To ControlRelMap(I).contedNum
                                If ControlRelMap(I).contedAttrs(J) = contedName Then
                                    flag = True
                                    Exit For
                                End If
                            Next
                            If flag = False Then
                                '|fffd||fffd||5a4||fffd||fffd||fffd||6b4||2f1||fffd||fffd||632||fffd||fffd||fffd||fffd||131||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||68ec||fffd||fffd||fffd||fffd|A->B->C, |4aa||fffd||fffd||5a4||fffd||fffd|A|fffd||13f||fffd||fffd||fffd||fffd||431||fffd||fffd||fffd|B|fffd||fffd|C|fffd||fffd||1f0||fffd||fffd|
                                isfound = False
                                For index1 = 0 To ControlRelationNum - 1
                                    If (mocName = ControlRelMap(index1).mocName) And (contedName = ControlRelMap(index1).contAttr) And (neType = ControlRelMap(index1).neType) And (sheetName = ControlRelMap(index1).sheetName) Then
                                        For index2 = 0 To ControlRelMap(index1).contedNum '|fffd||fffd||fffd||632||fffd||fffd||fffd|B|fffd||13f||fffd||fffd||fffd||fffd||431||fffd|
                                            For index3 = 0 To ControlRelMap(I).contedNum    '|fffd||fffd||fffd||632||fffd||fffd||fffd|A|fffd||13f||fffd||fffd||fffd||fffd||431||fffd|
                                                If ControlRelMap(index1).contedAttrs(index2) = ControlRelMap(I).contedAttrs(index3) Then
                                                    For index4 = ControlRelMap(I).contedNum To index3 Step -1
                                                        ControlRelMap(I).contedAttrs(index4 + 1) = ControlRelMap(I).contedAttrs(index4)
                                                    Next
                                                    ControlRelMap(I).contedAttrs(index3) = contedName
                                                    isfound = True
                                                    Exit For
                                                End If
                                            Next
                                            If isfound = True Then
                                                Exit For
                                            End If
                                        Next
                                        Exit For
                                    End If
                                Next
                                ControlRelMap(I).contedNum = ControlRelMap(I).contedNum + 1
                                If isfound = False Then
                                    ControlRelMap(I).contedAttrs(ControlRelMap(I).contedNum) = contedName
                                End If
                            End If
                            isExist = True
                            Exit For
                        End If
                    Next
                End If
                '|fb||fffd||fffd||fffd||fffd||fffd||635||fffd||4f3||fffd||fffd||fffd||3f5||fffd||fffd||fffd||fffd||fffd||bd||fffd|
                If isExist = False Then
                    ControlRelMap(ControlRelationNum).mocName = mocName
                    ControlRelMap(ControlRelationNum).contAttr = contName
                    ControlRelMap(ControlRelationNum).contedAttrs(0) = contedName
                    ControlRelMap(ControlRelationNum).contedNum = 0
                    ControlRelMap(ControlRelationNum).neType = neType
                    ControlRelMap(ControlRelationNum).sheetName = sheetName
                    ControlRelationNum = ControlRelationNum + 1
                End If
            Wend
        End If
    Next

End Sub
'1|fffd||fffd||2be||fffd||6b7||fffd||3a7||fffd||6a3||fffd|0|fffd||fffd||2be||fffd||fffd||fffd||6b7||fffd||3a7||fffd||6a3||fffd|-1|fffd||fffd||2be||3b4||fffd||fffd||fffd||fffd||4f3||fffd||fffd||fffd||3f5|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||67d||fffd||fffd||434||fffd||fffd||fffd|)
Function Check_Value_Validation(ByVal CurSheet As Worksheet, ByVal cellRange As Range, ByRef isConAttr As Boolean, ByRef contRel As controlRelation, ByRef currentNeType As String) As Long
    On Error Resume Next
    
    Dim groupName As String
    Dim columnName As String
    Dim mocName, attrName, attrType, attrRange As String
    Dim conRowNum, I As Long
    Dim neType As String
    Dim sheetName As String
    Dim controldef As CControlDef
    
    Call getGroupAndColumnName(CurSheet, cellRange, groupName, columnName)
'    If Not isBoardStyleSheet(CurSheet) Then
'        Call getGroupAndColumnName(CurSheet, cellRange, groupName, columnName)
'        Set controldef = getControlDefine(CurSheet.name, groupName, columnName)
'    Else
'        Call getGroupNameShNameAndAttrName(CurSheet, cellRange, groupName, sheetName, columnName)
'        Set controldef = getControlDefine(sheetName, groupName, columnName)
'    End If
    If Not isBoardStyleSheet(CurSheet) Then
        Set controldef = getControlDefine(CurSheet.name, groupName, columnName)
    Else
        Set controldef = getControlDefine(getResByKey("Board Style"), groupName, columnName)
    End If
    
    If controldef Is Nothing Then
        Check_Value_Validation = -1
        Exit Function
    End If
    
    mocName = controldef.mocName
    attrName = controldef.attributeName
    neType = controldef.neType
    sheetName = controldef.sheetName
    
    currentNeType = neType
    '|fffd||436||fffd||fffd||1f7||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd|
    For I = 0 To ControlRelationNum - 1
        If (ControlRelMap(I).mocName = mocName) And (ControlRelMap(I).contAttr = attrName) _
        And (ControlRelMap(I).neType = neType) And (ControlRelMap(I).sheetName = sheetName) Then
            If Moc_Appear_In_SameSheet(ControlRelMap(I).mocName, attrName) = False Then
                isConAttr = True
                contRel = ControlRelMap(I)
             End If
            Exit For
        End If
    Next
    If Trim(cellRange.value) <> "" And UBound(Split(cellRange.value, "\")) <> 2 Then '|5b5||fffd||1ff||563||fffd||fffd||fffd||fffd||436||fffd||fffd||fffd||fffd||fffd||5b5||fffd||1f7||fffd||fffd||6b7||fffd||3a7||fffd||fffd|
        attrType = controldef.dataType
        attrRange = controldef.bound + controldef.lstValue
        If Trim(controldef.controlInfo) <> "" Then
            '|fffd||437||fffd||5a7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3e2||fffd||137||fffd||3a7||fffd||fffd||fffd||737||fffd||fffd||fffd||fffd||4eef|,Tip|fffd||fffd||fffd||fffd||2be||fffd||13e||fffd||fffd||fffd||fffd||fffd||fffd||b7||fffd||3a7|
            If attrType = "Enum" And cellRange.Validation.inputMessage <> "" Then
                attrRange = Mid(cellRange.Validation.inputMessage, 2, Len(cellRange.Validation.inputMessage) - 2)
            ElseIf cellRange.Validation.inputMessage <> "" Then
                attrRange = cellRange.Validation.inputMessage
            End If
        End If
        
        Dim alreadyCheckFlag As Boolean
        alreadyCheckFlag = False '|fffd||fffd||fffd||fffd||5b5||fffd||1f7||fffd||fffd||47e||fffd||423||fffd||fffd||131||fffd||5be|
        
        If Check_Value_In_Range(attrType, attrRange, cellRange.value, cellRange, alreadyCheckFlag) = True Then
            Check_Value_Validation = 1
        Else
            If alreadyCheckFlag = False Then '|2f5||fffd||fffd||fffd||fffd|Check_Value_In_Range|fffd||fffd||fffd||cce3||fffd||2e3||fffd||fffd||fffd||4aa||fffd||fffd||fffd||b5||131||fffd||fffd||632||fffd||fffd||fffd||423||fffd||9dfd||fffd||fffd||fffd||fffd||fffd||fffd||423||fffd||fffd|
                If controlledAttrValidationCheck(CurSheet, controldef, cellRange) = True Then '|423||fffd||fffd||132||fffd||fffd||fffd||fffd||6b7||fffd||3a7||fffd||fffd|
                    Check_Value_Validation = 1
                Else '|423||fffd||fffd||132||fffd||fffd||fffd||fffd||fffd||fffd||6b7||fffd||3a7||fffd||6a3||fffd||fffd||fffd||fffd||fffd|0|fffd||fffd||fffd||fffd||4aa||3aa||fffd||2f2||fffd||fffd||fffd||fffd||43a||fffd||fffd||fffd||fffd||131||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||5a7||fffd||fffd|
                    Check_Value_Validation = 0
                End If
            Else '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||132||fffd||fffd||6b7||fffd||3a7||fffd||fffd|
                Check_Value_Validation = 0
            End If
        End If
        Exit Function
    Else  '|5b5||3aa||fffd||563||fffd||fffd||fffd||fffd||6bb||fffd||4aa||fffd||fffd||fffd||437||fffd||5a7||fffd||fffd||fffd||1a3||fffd||fffd||fffd||fffd||fffd||fffd||436||fffd||3aa||fffd||6b7||fffd||3a7||fffd||fffd|
        Check_Value_Validation = 1
        Exit Function
    End If
    
    Check_Value_Validation = -1
    
End Function

'|fffd||fffd||fffd||fffd||fffd||131||fffd||fffd||632||fffd||fffd||fffd||423||fffd||98ec||fffd||fffd|Tip|fffd||fffd||2be||fffd||13b||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||423||fffd||fffd|
Private Function controlledAttrValidationCheck(ByRef ws As Worksheet, ByRef controldef As CControlDef, ByRef cellRange As Range) As Boolean
    On Error GoTo ErrorHandler
    controlledAttrValidationCheck = False
    
    Dim mocName As String, attrName As String, neType As String, controlInfo As String, sheetName As String
    Call getControlAttrInfo(controldef, mocName, attrName, neType, sheetName, controlInfo)
    
     '|fffd||fffd||fffd||fffd||f2||fffd||fffd||fffd||fffd||fffd||fffd||1f1||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2f3||fffd|
    If Not controlRelationManager.containsControlledAttributeRelation(mocName, attrName, neType, sheetName) Then Exit Function
    
    '|fffd||4b5||fffd||fffd||f2||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd|
    Dim controlRelation As CControlRelation
    Set controlRelation = controlRelationManager.getControlRelation(mocName, attrName, neType, sheetName)
    
    Dim controlAttrValueManager As New CControlAttrValueManager '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||139||fffd||fffd||fffd||fffd||8ec||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||bc7b||fffd||fffd||fffd||fffd||fffd||137||fffd||5a7||fffd||fffd||fffd||fffd||fffd||fffd||3e2||fffd||fffd||423||fffd||fffd|
    Dim mainControlAttrReturnedValue As Long
    mainControlAttrReturnedValue = makeControlAttrValueCol(ws, mocName, attrName, neType, sheetName, controlRelation, controlAttrValueManager, cellRange)
    
    If mainControlAttrReturnedValue = 1 Then Exit Function '|fffd||fffd||fffd||fffd||4aa||fffd||535||fffd||1f0||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||43f||fffd||fffd||1a3||fffd||5b1||fffd||fffd||fffd||2f3||fffd|
    
    Dim oneBranchMatchFlag As Boolean
    Dim branchMatchChecker As New CBranchMatchChecker '|fffd||fffd||5a7||1a5||fffd||fffd||423||fffd||fffd||fffd||fffd|
    Call branchMatchChecker.init(controlAttrValueManager, controlInfo)
    oneBranchMatchFlag = branchMatchChecker.getOneBranchMatchFlag
    
    If oneBranchMatchFlag = False Then Exit Function '|fffd||fffd||fffd||fb||fffd||4b5||fffd||1a5||fffd||fffd||fffd||5a7||fffd||fffd||fffd||fffd||fffd||2f3||fffd|
    
    Dim matchBranchNode As Variant
    Set matchBranchNode = branchMatchChecker.getMatchBranchNode
    
    Dim controlAttrValue As New CControlAttrValue '|fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call controlAttrValue.init("", "", cellRange.value, controldef.dataType, False, False, False)
    Dim branchAttrValueValidationFlag As Boolean
    branchAttrValueValidationFlag = controlAttrValue.checkABranchAttrValues(matchBranchNode)
    
    
    If branchAttrValueValidationFlag = False Then
        Dim nResponse As Long
        Dim errorMsg As String
        With cellRange.Validation
            errorMsg = .inputTitle & .inputMessage
        End With
        nResponse = MsgBox(errorMsg, vbRetryCancel + vbCritical + vbApplicationModal + vbDefaultButton1, getResByKey("Warning"))
        If nResponse = vbRetry Then
            cellRange.Select
        End If
        cellRange.value = ""
    End If
    
    controlledAttrValidationCheck = branchAttrValueValidationFlag '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||3a7||423||fffd||fffd||13d||fffd||fffd|
    Exit Function
ErrorHandler:
    controlledAttrValidationCheck = True '|fffd||fffd||fffd||fffd||fffd||fffd||cce3||fffd||2e3||fffd||fffd||fffd||fffd||fffd||3aa||fffd||6b7||fffd||3a7||fffd||6a3||fffd||fffd||fffd||fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||331||fffd||fffd||fffd||4bb||fffd||fffd|
End Function

Sub getGroupAndColumnName(ByVal CurSheet As Worksheet, ByVal cellRange As Range, groupName As String, columnName As String)
    Dim m_rowNum, m_colNum As Long
    
    If CurSheet.name = getResByKey("Comm Data") Or InStr(CurSheet.name, getResByKey("Board Style")) <> 0 Then
        For m_rowNum = cellRange.row To 1 Step -1
            If CurSheet.Cells(m_rowNum, cellRange.column).Interior.colorIndex = 40 Then '34|fffd||fffd||fffd||fffd||26b|
                columnName = CurSheet.Cells(m_rowNum, cellRange.column).value
                Exit For
            End If
        Next
        For m_colNum = cellRange.column To 1 Step -1
            If CurSheet.Cells(m_rowNum - 1, m_colNum).value <> "" Then
                groupName = CurSheet.Cells(m_rowNum - 1, m_colNum).value
                Exit For
            End If
        Next
    Else
        columnName = CurSheet.Cells(2, cellRange.column).value
        For m_colNum = cellRange.column To 1 Step -1
            If CurSheet.Cells(1, m_colNum).value <> "" Then
                groupName = CurSheet.Cells(1, m_colNum).value
                Exit For
            End If
        Next
    End If
End Sub

Function Check_Value_In_Range(ByVal attrType As String, ByVal attrRange As String, ByVal attrValue As String, cellRange As Range, ByRef alreadyCheckFlag As Boolean) As Boolean
    On Error GoTo ErrorHandler
    
    Dim arrayList() As String
    Dim errorMsg, sItem As String
    Dim I, nResponse, nLoop As Long
    Dim min, max As Double
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3a7||3aa||fffd||563||fffd||fffd||fffd||fffd||fffd||4aa||423||fffd||fffd| DTS2012111306136
    If attrRange = "" Then
        Check_Value_In_Range = True
        alreadyCheckFlag = True
        Exit Function
    End If
    
    If attrType = "Enum" Then
        Check_Value_In_Range = False
        arrayList = Split(attrRange, ",")
        For I = 0 To UBound(arrayList)
            If Trim(attrValue) = arrayList(I) Then
                Check_Value_In_Range = True
                Exit For
            End If
        Next
        errorMsg = getResByKey("Range") + "[" + attrRange + "]"
    ElseIf attrType = "String" Or attrType = "Password" Or attrType = "ATM" Then
        min = CDbl(Mid(attrRange, 2, InStr(1, attrRange, ",") - 2))
        max = CDbl(Mid(attrRange, InStr(1, attrRange, ",") + 1, InStr(1, attrRange, "]") - InStr(1, attrRange, ",") - 1))
        If Len(attrValue) < min Or Len(attrValue) > max Then
            Check_Value_In_Range = False
        Else
            Check_Value_In_Range = True
        End If
        If min = max Then
            errorMsg = getResByKey("Limited Length") + "[" + CStr(min) + "]"
        Else
            errorMsg = getResByKey("Limited Length") + Replace(attrRange, ",", "~")
        End If
    ElseIf attrType = "IPV4" Or attrType = "IPV6" _
        Or attrType = "Time" Or attrType = "Date" _
        Or attrType = "DateTime" Or attrType = "Bitmap" _
        Or attrType = "Mac" Then
        Check_Value_In_Range = False
        alreadyCheckFlag = True
        Exit Function
    Else  '|fffd||fffd||5b5|
        If Check_Int_Validation(attrRange, attrValue) = True Then
            Check_Value_In_Range = True
        Else
            Check_Value_In_Range = False
        End If
        errorMsg = getResByKey("Range") + formatRange(attrRange)
    End If
    
    If Check_Value_In_Range = False Then
        nResponse = MsgBox(errorMsg, vbRetryCancel + vbCritical + vbApplicationModal + vbDefaultButton1, getResByKey("Warning"))
        If nResponse = vbRetry Then
            cellRange.Select
        End If
        cellRange.value = ""
    End If
    alreadyCheckFlag = True
    Exit Function
ErrorHandler:
    Check_Value_In_Range = False '|fffd||fffd||fffd||cce3||fffd||fffd||2f5||fffd||fffd||423||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4aa||fffd||fffd||fffd||fffd||fffd||fffd||fffd||431||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||423||fffd||fffd|
End Function
Sub Execute_Branch_Control(ByVal sheet As Worksheet, ByVal cellRange As Range, contRel As controlRelation, ByRef currentNeType As String)
    On Error Resume Next
    
    Dim sheetName, groupName, columnName As String
    Dim branchInfor As String, contedType As String
    Dim boundValue As String

    Dim allBranchMatch, contedOutOfControl As Boolean
    Dim xmlObject As Object
    Dim m, conRowNum, contedColNum As Long
    Dim noUse As Long
    Dim rootNode As Variant
    Dim controldef As Worksheet
    Dim controlledRange As Range
    Set controldef = ThisWorkbook.Worksheets("CONTROL DEF")
    '|fffd||538||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||437||fffd||5a7||fffd||fffd||fffd||fffd|
    For m = 0 To contRel.contedNum - 1
        For conRowNum = 2 To controldef.Range("a65536").End(xlUp).row
            If (contRel.mocName = controldef.Cells(conRowNum, 1).value) _
                            And contRel.neType = controldef.Cells(conRowNum, 10).value _
                            And (contRel.contedAttrs(m) = controldef.Cells(conRowNum, 2).value) _
                            And (contRel.sheetName = controldef.Cells(conRowNum, 7).value) Then
                sheetName = controldef.Cells(conRowNum, 7).value
                'sheetName = sheet.name
                groupName = controldef.Cells(conRowNum, 8).value
                columnName = controldef.Cells(conRowNum, 9).value
                contedType = controldef.Cells(conRowNum, 3).value
                contedColNum = get_colNum(sheetName, groupName, columnName, noUse)
                Set controlledRange = sheet.Cells(cellRange.row, contedColNum)
                If (Trim(cellRange.value) = "" And cellRange.Interior.colorIndex <> SolidColorIdx And cellRange.Interior.Pattern <> SolidPattern) Or UBound(Split(cellRange.value, "\")) = 2 Then '|fffd||fffd||fffd||fffd||3aa||fffd||57b||fffd||fffd||fffd||fffd||fffd||fffd||e3||fffd||fffd||fffd||fffd||2b1||fffd||fffd||fffd||fffd||4e6||fffd||fffd||3aa||fffd||1fb||4bc||fffd||fffd||fffd||427||fffd||fffd||fffd||fffd||3a7||fffd||5b8||fffd||fffd||273||fffd||2bc||5b5|
                    If controlledRange.Interior.colorIndex = SolidColorIdx And controlledRange.Interior.Pattern = SolidPattern Then
                        If controlledRange.Hyperlinks.count = 1 Then
                            controlledRange.Hyperlinks.Delete
                        End If
                        '|fffd||fffd||fffd||fffd||fffd||fffd||6bd||fffd||fffd||fffd||fffd||fffd||fffd||4f5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7b8||135||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4f5||fffd||fffd||423||fffd||fffd||fffd||f4||fffd||fffd||2bd||fffd||fffd||fffd||2b1||4e6||fffd||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd||fffd||5fb||fffd||fffd||335||fffd|
                        If Not setControlledRangeColorAndPattern(controlledRange) Then
                            controlledRange.Interior.colorIndex = NullPattern
                            controlledRange.Interior.Pattern = NullPattern
                        End If
                        controlledRange.Validation.ShowInput = True
                    End If
                    '|fffd||5b8||fffd||fffd||273||fffd||2bc||fffd||fffd||3a7|
                    boundValue = controldef.Cells(conRowNum, 4).value + controldef.Cells(conRowNum, 5).value
                    Call setValidation(contedType, boundValue, sheet, cellRange.row, contedColNum)
                    Call setEmptyValidation(sheet, cellRange.row, contedColNum)
                Else '|fffd||fffd||fffd||632||fffd||fffd||563||fffd||fffd||fffd||fffd||fffd|contRel.contedAttrs(m)|fffd||137||fffd||5a7||fffd||fffd||fffd||fffd|
                    branchInfor = controldef.Cells(conRowNum, 6).value
                    Set xmlObject = CreateObject("msxml2.domdocument")
                    xmlObject.LoadXML branchInfor
                    'Set BranchNodes = xmlObject.DocumentElement.ChildNodes
                    Set rootNode = xmlObject.DocumentElement
                    contedOutOfControl = False
                    allBranchMatch = checkAllBranchMatch(rootNode, sheet, cellRange, contRel, contedType, contedOutOfControl, contedColNum, currentNeType, branchInfor)
                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||5b5||fffd||fffd||fffd||fffd||fffd||6b7||fffd||5a7||fffd||fffd||fffd||fffd||fffd||6da8||fffd||137||fffd||3a7||fffd||6a3||fffd||fffd||b1eff||632||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||73f||fffd||fffd||1b3||fffd||fffd||28e9|
                    If allBranchMatch = False Then
                        If contedOutOfControl = False Then
                            controlledRange.Interior.colorIndex = SolidColorIdx
                            controlledRange.Interior.Pattern = SolidPattern
                            controlledRange.value = ""
                            controlledRange.Validation.ShowInput = False
                        Else
                            '|fffd||fffd||fffd||fffd||fffd||fffd||6bd||fffd||fffd||fffd||fffd||fffd||fffd||4f5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7b8||135||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4f5||fffd||fffd||423||fffd||fffd||fffd||f4||fffd||fffd||2bd||fffd||fffd||fffd||2b1||4e6||fffd||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd||fffd||5fb||fffd||fffd||335||fffd|
                            If Not setControlledRangeColorAndPattern(controlledRange) Then
                                controlledRange.Interior.colorIndex = NullPattern
                                controlledRange.Interior.Pattern = NullPattern
                            End If
                            controlledRange.Validation.ShowInput = True
                        End If
                        If controlledRange.Hyperlinks.count = 1 Then
                            controlledRange.Hyperlinks.Delete
                        End If
                    End If
                End If
                Exit For
            End If
        Next
    Next
    
End Sub

Private Function setControlledRangeColorAndPattern(ByRef controlledRange As Range) As Boolean
    '|fffd||fffd||fffd||436||fffd||fffd||1f7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||431||fffd||fffd||fffd||fffd||e8ec||fffd||fffd||fffd||5e3||fffd||fffd||fffd||fffd||436||fffd||fffd||1f7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||368||fffd||fffd||fffd||fffd|
    setControlledRangeColorAndPattern = False
    If inAddProcessFlag = True And moiRowsManager.rangeInNeedFillInRange(controlledRange) Then
        controlledRange.Interior.colorIndex = NeedFillInRangeColorIndex
        controlledRange.Interior.Pattern = NormalPattern
        setControlledRangeColorAndPattern = True
    ElseIf inAddProcessFlag = True And moiRowsManager.rangeInAddingRows(controlledRange) Then
        controlledRange.Interior.colorIndex = NewMoiRangeColorIndex
        controlledRange.Interior.Pattern = NormalPattern
        setControlledRangeColorAndPattern = True
    End If
End Function

Sub deleteValidation(ByRef sheet As Worksheet, ByRef RowNumber As Long, ByRef columnNumber As Long)
    sheet.Cells(RowNumber, columnNumber).Validation.Delete
End Sub

Private Sub makeControlAttrValueManager(ByRef sheet As Worksheet, ByRef dstRowNumber As Long, ByRef mainControlMocName As String, ByRef mainControlAttrName As String, _
    ByRef neType As String, ByRef virtualSheetName As String, ByRef oneMainControlAttrNotExist As Boolean, ByRef controlAttrValueManager As CControlAttrValueManager)
    
    '|fffd||fffd||fffd||fffd||47e||fffd||fffd||fffd||fffd||2f8||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2e3||fffd||5b1||fffd||fffd||fffd||2f3||fffd|
    If controlAttrValueManager.hasControlAttr(mainControlAttrName) Then Exit Sub
    
    Dim dstColumnNumber As Long
    dstColumnNumber = get_MocAndAttrcolNum(mainControlMocName, mainControlAttrName, virtualSheetName) '|fffd||f5||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||43a||fffd|
    If dstColumnNumber = 0 Then '|fffd||fffd||fffd||fffd|0|fffd||fffd||2f5||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6a3||fffd||fffd||fffd||fffd||2f3||fffd||fffd||fffd||fffd||fffd||fffd||fffd|flag|fffd||fffd||3aa|True
        oneMainControlAttrNotExist = True
        Exit Sub
    End If

    '|fffd||fffd||fffd||fffd||6b5||fffd||1f0||4b3||1e9||fb||fffd||fffd||fffd||4b5||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||13f||fffd||fffd||fffd||fffd||fffd||3e2||fffd||fffd||2f5||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||231||fffd||663||fffd||fffd||fffd||f1||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Not controlRelationManager.containsAttributeRelation(mainControlMocName, mainControlAttrName, neType, virtualSheetName) Then
        oneMainControlAttrNotExist = True
        Exit Sub
    End If
    
    Dim mainControlRelation As CControlRelation '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd|Control Def|fffd||fffd||fffd||fffd||fffd||fffd|
    Dim mainControlAttrValue As CControlAttrValue '|fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||5b5||fffd||fffd||fffd||fffd||fffd||363||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b5||fffd||fffd||fffd|
    Dim mainControlGroupName As String, mainControlColumnName As String, mainValueType As String
    
    Set mainControlRelation = controlRelationManager.getControlRelation(mainControlMocName, mainControlAttrName, neType, virtualSheetName)
    
    mainControlGroupName = mainControlRelation.groupName
    mainControlColumnName = mainControlRelation.columnName
    mainValueType = mainControlRelation.valueType
    
    Dim mainAttrCell As Range
    Dim mainValue As String
    Set mainAttrCell = sheet.Cells(dstRowNumber, dstColumnNumber)
    
    mainValue = mainAttrCell.value
        
    Dim valueEmptyFlag As Boolean, valueReferenceFlag As Boolean, valueCellGrayFlag As Boolean
    valueEmptyFlag = False
    valueReferenceFlag = False
    valueCellGrayFlag = False
    
    If UBound(Split(mainValue, "\")) = 2 Then  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||3aa||fffd||fffd||fffd||e3||fffd||fffd||fffd||5be||fffd||fffd||3aa|True|fffd||fffd||fffd||276||fffd||fffd||fffd||fffd||53c||fffd||fffd||fffd||fffd||fffd||fffd||fffd|check
        valueReferenceFlag = True '|fffd||fffd||fffd||fffd||3aa||fffd||fffd||fffd||f1||fffd||5be|
    ElseIf mainValue = "" Then '|fffd||fffd||2b1||fffd||fffd||fffd||632||fffd||fffd||fffd||3aa||fffd||563||fffd||fffd||43f||fffd||fffd||738||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||4b2||fffd||fffd||fffd||fffd||427||fffd||123||fffd||fffd||fffd||fffd||fffd||4aa||fffd||236||538||fffd||fffd||fffd||fffd||635||fffd||52a||fffd||fffd||fffd||fffd||fffd||423||fffd||fffd|
        Call currentParameterBranchCheck(sheet, mainAttrCell)
'        If cellIsGray(cellRange) Then
'            makeControlAttrValueCol = 1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||13b||4bb||fffd||fffd||131||fffd||fffd||47e||fffd||2b9||fffd||fffd||1f0||fffd||fffd||52a||fffd||fffd||4bb||fffd||fffd||2e3||fffd||fffd||fffd||fffd||fffd||4aa||fffd||436||fffd||fffd||2e3||fffd||5b1||fffd||fffd||fffd||2f3||fffd|
'            Exit Sub
'        End If
    End If
    
    If cellIsGray(mainAttrCell) Then '|fffd||fffd||fffd||133||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||5be||fffd||fffd||3aa|True|fffd||fffd||fffd||276||fffd||fffd||fffd||fffd||53c||fffd||fffd||fffd||fffd||fffd||fffd||fffd|check
        valueCellGrayFlag = True '|fffd||fffd||fffd||fffd||3aa||fffd||4bb||fffd||fffd||fffd||5be|
        valueEmptyFlag = True '|fffd||fffd||fffd||fffd||3aa||fffd||4bb||fffd||fffd||fffd||fffd||fffd||3f6||fffd||3aa||fffd||fffd|
    ElseIf mainValue = "" Then '|fffd||fffd||fffd||fffd||fffd||fffd||635||fffd||52a||fffd||fffd||3b4||fffd||4bb||fffd||fffd||fffd||2f5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||635||fffd||52a||fffd||fffd||fffd||fffd||fffd||fffd||427||fffd||fffd||5a7||fffd||fffd||5bb||fffd||fffd||3b4||fffd||fffd||434||5b5||fffd||fffd||fffd||571||fffd||5be||fffd||fffd||3aa|True|fffd||fffd||fffd||276||fffd||fffd||fffd||fffd||53c||fffd||fffd||fffd||fffd||fffd||fffd||fffd|check
        valueEmptyFlag = True
    End If
    
    Set mainControlAttrValue = New CControlAttrValue
    Call mainControlAttrValue.init(mainControlAttrName, mainControlColumnName, mainValue, mainValueType, valueEmptyFlag, valueReferenceFlag, valueCellGrayFlag)
    
    Call controlAttrValueManager.addNewControlAttrValue(mainControlAttrValue)
End Sub

Private Function getMainControlAttrCol(ByRef root As Variant) As Collection
    Dim controlAttrCol As New Collection
    Dim controlAttributeNode As Variant
    Dim controlAttributeName As String
    For Each controlAttributeNode In root.GetElementsByTagName("Equals")
        controlAttributeName = controlAttributeNode.getAttribute("attribute")
        If Not IsNull(controlAttributeName) Then
            If Not Contains(controlAttrCol, controlAttributeName) Then
                controlAttrCol.Add Item:=controlAttributeName, key:=controlAttributeName '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            End If
        End If
    Next controlAttributeNode
    Set getMainControlAttrCol = controlAttrCol
End Function

Function checkAllBranchMatch(rootNode As Variant, sheet As Worksheet, cellRange As Range, contRel As controlRelation, contedType As String, contedOutOfControl As Boolean, contedColNum As Long, ByRef currentNeType As String, ByRef controlInfo As String) As Boolean
    On Error Resume Next
    
    Dim matchBranchNode As Variant '|1a5||fffd||fffd||137||fffd||5a7||fffd||6b5||fffd|
    
    Dim I, J, colNum As Long
    Dim contAttrNum As Long
    Dim equalsNodes, boundNodes
    Dim eachContAttr As String, eachContAttrVal As String, boundValue As String
    Dim oneBranchMatch As Boolean, oneContNotExist As Boolean, oneContGray As Boolean, oneContNull As Boolean
    Dim valIsRight As Boolean
    
    checkAllBranchMatch = False

    Dim oneMainControlAttrNotExist As Boolean
    oneMainControlAttrNotExist = False
    
    Dim cellRowNumber As Long
    cellRowNumber = cellRange.row
    
    Dim controlAttrValueManager As New CControlAttrValueManager
    
    Dim mainControlAttrCol As Collection
    Set mainControlAttrCol = getMainControlAttrCol(rootNode) '|fffd||f5||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    Dim eachMainControlAttr As Variant
    For Each eachMainControlAttr In mainControlAttrCol
        Call makeControlAttrValueManager(sheet, cellRowNumber, contRel.mocName, CStr(eachMainControlAttr), currentNeType, contRel.sheetName, oneMainControlAttrNotExist, controlAttrValueManager)
    Next eachMainControlAttr

    If oneMainControlAttrNotExist = True Then '|fffd||fffd||fffd||632||fffd||fffd||fffd||231||fffd||663||fffd||fffd||fffd||fffd||3f6||fffd||fffd||6b7||fffd||3a7||fffd||6a3||fffd||5b1||fffd||fffd||fffd||2f3||fffd|
        contedOutOfControl = True
        Exit Function
    End If
    
    oneBranchMatch = newCheckBranchMatch(controlAttrValueManager, controlInfo, matchBranchNode)
    If oneBranchMatch = False Then '|3b4||fffd||4b5||fffd||1a5||fffd||fffd||fffd||5a7|
        contedOutOfControl = False
    Else '|fffd||2f7||fffd||5a7||fffd||438||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||1a5||fffd||fffd||279||fffd||fffd||fffd||fffd||fffd||fffd||fffd||437||fffd||5a7||fffd||fffd||fffd||fffd|
        Set boundNodes = matchBranchNode.childNodes
        '|fffd||fffd||f1||fffd||fffd||632||fffd||fffd||fffd||fffd||137||fffd||3a7|
        boundValue = getContedAttrBoundValue(boundNodes, valIsRight, sheet, cellRange, contedColNum)
        '|fffd||fffd||fffd||437||fffd||5a7||fffd||fffd||fffd||fffd|
        If sheet.Cells(cellRange.row, contedColNum).Interior.colorIndex = SolidColorIdx And sheet.Cells(cellRange.row, contedColNum).Interior.Pattern = SolidPattern Then
            If sheet.Cells(cellRange.row, contedColNum).Hyperlinks.count = 1 Then
                sheet.Cells(cellRange.row, contedColNum).Hyperlinks.Delete
            End If
            sheet.Cells(cellRange.row, contedColNum).Interior.colorIndex = NullPattern
            sheet.Cells(cellRange.row, contedColNum).Interior.Pattern = NullPattern
            sheet.Cells(cellRange.row, contedColNum).Validation.ShowInput = True
        End If
        '|fffd||fffd||fffd||6b7||fffd||3a7||fffd||fffd||2b1||4aa||fffd||fffd||fffd|
        If valIsRight = False And Trim(sheet.Cells(cellRange.row, contedColNum).value) <> "" _
            And contedType <> "IPV4" And contedType <> "IPV6" Then
            If sheet.Cells(cellRange.row, contedColNum).Hyperlinks.count = 1 Then
                sheet.Cells(cellRange.row, contedColNum).Hyperlinks.Delete
            End If
            sheet.Cells(cellRange.row, contedColNum).value = ""
        End If
        '|fffd||fffd||fffd||f1||fffd||fffd||632||fffd||fffd||fffd||fffd||137||fffd||3a7|
        Call setValidation(contedType, boundValue, sheet, cellRange.row, contedColNum)
        checkAllBranchMatch = True
    End If
    
'    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b7||fffd||5a7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||137||fffd||5a7||fffd||fffd||fffd||1a3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||22b||fffd||fffd||fffd||fffd||fffd||38e8||fffd||4bb||fffd||fffd||fffd|
'    For I = 0 To BranchNodes.Length - 1
'        oneBranchMatch = True
'        oneContGray = False
'        oneContNotExist = False
'        oneContNull = False
'        contAttrNum = 0
'        Set equalsNodes = BranchNodes(I).GetElementsByTagName("Equals")
'        '|fffd||fffd||fffd||2f7||fffd||5a7||fffd||435||138||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||5b5||fffd||1f7||fffd||fffd||6b7||fffd||3a7||fffd||fffd|
'        For J = 0 To equalsNodes.Length - 1
'            eachContAttr = equalsNodes(J).getAttributeNode("attribute").NodeValue
'
'            Call makeControlAttrValueManager(sheet, cellRowNumber, contRel.mocName, eachContAttr, currentNeType, contRel.sheetName, oneMainControlAttrNotExist, controlAttrValueManager)
'
'            If eachContAttr = contRel.contAttr Then
'                If cellRange.Interior.colorIndex = SolidColorIdx And cellRange.Interior.Pattern = SolidPattern Then
'                    oneContGray = True
'                    oneBranchMatch = False
'                    eachContAttrVal = ""
'                Else
'                    eachContAttrVal = Trim(cellRange.value)
'                End If
'            Else
'                eachContAttrVal = ""
'                colNum = get_MocAndAttrcolNum(contRel.mocName, eachContAttr, contRel.sheetName)
'                If colNum <> 0 Then
'                    If sheet.Cells(cellRange.row, colNum).Interior.colorIndex = SolidColorIdx And sheet.Cells(cellRange.row, colNum).Interior.Pattern = SolidPattern Then
'                        oneContGray = True
'                        oneBranchMatch = False
'                        eachContAttrVal = ""
'                    ElseIf UBound(Split(sheet.Cells(cellRange.row, colNum), "\")) = 2 Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||e3||fffd||fffd||fffd||fffd||fffd||4e6||fffd||fffd||fffd||73f||fffd||fffd||1a3||fffd||fffd||23c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd|
'                        oneContNull = True
'                        oneBranchMatch = False
'                        eachContAttrVal = ""
'                    Else
'                        eachContAttrVal = Trim(sheet.Cells(cellRange.row, colNum).value)
'                    End If
'                Else
'                    oneContNotExist = True
'                    oneBranchMatch = False
'                    Exit For
'                End If
'            End If
'            If oneBranchMatch = True And eachContAttrVal <> "" Then
'                '|fffd||fffd||fffd||6d7d||fffd||fffd||fffd||fffd||fffd||423||fffd||fffd||fffd||fffd||fffd||fffd||fffd|checkBranchMatch|fffd||436||3f8||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||1f7||fffd||1a5||fffd||fffd|
'                contAttrValArray(contAttrNum) = eachContAttrVal
'                contAttrNum = contAttrNum + 1
'            ElseIf oneContGray = False Then
'                oneContNull = True
'                oneBranchMatch = False
'            End If
'        Next
'
'        '|fffd||fffd||fffd||fffd||fffd||6bb||4bb||fffd||fffd||fffd||fffd||fffd||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||436||3f8||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||1f7||fffd||1a5||fffd||fffd|
'        If contAttrNum = equalsNodes.Length Then
'            'oneBranchMatch = checkBranchMatch(equalsNodes)
'            oneBranchMatch = newCheckBranchMatch(controlAttrValueManager, controlInfo)
'        End If
'
'        If oneBranchMatch = False Then
'            If oneContNotExist = True Then
'                contedOutOfControl = True
'                Exit For
'            ElseIf oneContGray = True Then
'                contedOutOfControl = False
'                'Exit For
'            ElseIf oneContNull = True Then
'                contedOutOfControl = True
'                Exit For
'            End If
'        Else '|fffd||2f7||fffd||5a7||fffd||438||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||1a5||fffd||fffd||279||fffd||fffd||fffd||fffd||fffd||fffd||fffd||437||fffd||5a7||fffd||fffd||fffd||fffd|
'            Set boundNodes = BranchNodes(I).ChildNodes
'            '|fffd||fffd||f1||fffd||fffd||632||fffd||fffd||fffd||fffd||137||fffd||3a7|
'            boundValue = getContedAttrBoundValue(boundNodes, valIsRight, sheet, cellRange, contedColNum)
'            '|fffd||fffd||fffd||437||fffd||5a7||fffd||fffd||fffd||fffd|
'            If sheet.Cells(cellRange.row, contedColNum).Interior.colorIndex = SolidColorIdx And sheet.Cells(cellRange.row, contedColNum).Interior.Pattern = SolidPattern Then
'                If sheet.Cells(cellRange.row, contedColNum).Hyperlinks.count = 1 Then
'                    sheet.Cells(cellRange.row, contedColNum).Hyperlinks.Delete
'                End If
'                sheet.Cells(cellRange.row, contedColNum).Interior.colorIndex = NullPattern
'                sheet.Cells(cellRange.row, contedColNum).Interior.Pattern = NullPattern
'                sheet.Cells(cellRange.row, contedColNum).Validation.ShowInput = True
'            End If
'            '|fffd||fffd||fffd||6b7||fffd||3a7||fffd||fffd||2b1||4aa||fffd||fffd||fffd|
'            If valIsRight = False And Trim(sheet.Cells(cellRange.row, contedColNum).value) <> "" _
'                And contedType <> "IPV4" And contedType <> "IPV6" Then
'                If sheet.Cells(cellRange.row, contedColNum).Hyperlinks.count = 1 Then
'                    sheet.Cells(cellRange.row, contedColNum).Hyperlinks.Delete
'                End If
'                sheet.Cells(cellRange.row, contedColNum).value = ""
'            End If
'            '|fffd||fffd||fffd||f1||fffd||fffd||632||fffd||fffd||fffd||fffd||137||fffd||3a7|
'            Call setValidation(contedType, boundValue, sheet, cellRange.row, contedColNum)
'            checkAllBranchMatch = True
'            Exit For
'        End If
'    Next
End Function

Private Function newCheckBranchMatch(ByRef controlAttrValueManager As CControlAttrValueManager, ByRef controlInfo As String, ByRef matchBranchNode As Variant) As Boolean
    Dim branchMatchChecker As New CBranchMatchChecker
    Call branchMatchChecker.init(controlAttrValueManager, controlInfo)
    newCheckBranchMatch = branchMatchChecker.getOneBranchMatchFlag
    Set matchBranchNode = branchMatchChecker.getMatchBranchNode
End Function

Function getContedAttrBoundValue(boundNodes, valIsRight As Boolean, sheet As Worksheet, cellRange As Range, contedColNum As Long) As String
    Dim k As Long
    Dim minValue, maxValue, tmp As Variant
    Dim boundValue As String
    Dim isfound As Boolean
     
    boundValue = ""
    valIsRight = False
    For k = 0 To boundNodes.Length - 1
        If (boundNodes(k).nodeName = "EnumItem") Or (boundNodes(k).nodeName = "BitEnumItem") Then
            isfound = True
            If UBound(Split(sheet.Cells(cellRange.row, contedColNum).value, "\")) = 2 Or _
                Trim(sheet.Cells(cellRange.row, contedColNum).value) = boundNodes(k).getAttributeNode("name").NodeValue Then
                valIsRight = True
            End If
            If boundValue <> "" Then
                boundValue = boundValue + "," + boundNodes(k).getAttributeNode("name").NodeValue
            Else
                boundValue = boundNodes(k).getAttributeNode("name").NodeValue
            End If
        ElseIf boundNodes(k).nodeName = "NumBoundTrait" Or boundNodes(k).nodeName = "StringLenTrait" Then
            isfound = True
            minValue = boundNodes(k).getAttributeNode("min").NodeValue
            maxValue = boundNodes(k).getAttributeNode("max").NodeValue
            boundValue = boundValue + "[" + minValue + "," + maxValue + "]"
            If sheet.Cells(cellRange.row, contedColNum).value <> "" And _
                UBound(Split(sheet.Cells(cellRange.row, contedColNum).value, "\")) <> 2 Then
                If boundNodes(k).nodeName = "NumBoundTrait" Then
                    tmp = CDbl(sheet.Cells(cellRange.row, contedColNum).value)
                Else
                    tmp = Len(sheet.Cells(cellRange.row, contedColNum).value)
                End If
                If (tmp >= CDbl(minValue)) And (tmp <= CDbl(maxValue)) Then
                    valIsRight = True
                End If
            ElseIf UBound(Split(sheet.Cells(cellRange.row, contedColNum).value, "\")) = 2 Then
                valIsRight = True
            End If
        End If
    Next
    getContedAttrBoundValue = boundValue
        '|fffd||fffd||fffd||fffd||f6||fffd||67a||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2b1|
    If isfound = False Then
        valIsRight = True
    End If
End Function
Function checkBranchMatch(equalsNodes) As Boolean
    Dim I As Long
    Dim J, k As Long
    Dim hasExist, isMatch1, isMatch2 As Boolean
        
    checkBranchMatch = True
    For I = 0 To equalsNodes.Length - 1
        hasExist = False
        For J = I + 1 To equalsNodes.Length - 1
            If I <> J And equalsNodes(I).getAttributeNode("attribute").NodeValue = equalsNodes(J).getAttributeNode("attribute").NodeValue Then
                hasExist = True
                isMatch1 = True
                isMatch2 = True
                For k = I To J - 1
                    If checkContValEquals(equalsNodes, k) = False Then
                        isMatch1 = False
                        Exit For
                    End If
                Next
                For k = J To equalsNodes.Length - 1
                    If checkContValEquals(equalsNodes, k) = False Then
                        isMatch2 = False
                        Exit For
                    End If
                Next
                If isMatch1 = False And isMatch2 = False Then
                    checkBranchMatch = False
                End If
                Exit For
            End If
        Next
        If hasExist = True Then
            Exit For
        Else
            If checkContValEquals(equalsNodes, I) = False Then
                checkBranchMatch = False
            End If
        End If
    Next

End Function
Function checkContValEquals(equalsNodes, index As Long) As Boolean
    Dim minValue, maxValue As String
    
    checkContValEquals = True
    If equalsNodes(index).FirstChild.nodeName = "EnumItem" Then
        If contAttrValArray(index) <> equalsNodes(index).FirstChild.getAttributeNode("name").NodeValue Then
            checkContValEquals = False
        End If
    ElseIf equalsNodes(index).FirstChild.nodeName = "NumBoundTrait" Then
        minValue = equalsNodes(index).FirstChild.getAttributeNode("min").NodeValue
        maxValue = equalsNodes(index).FirstChild.getAttributeNode("max").NodeValue
        If (CDbl(contAttrValArray(index)) < CDbl(minValue)) Or (CDbl(contAttrValArray(index)) > CDbl(maxValue)) Then
            checkContValEquals = False
        End If
    End If
End Function
Sub setValidation(ByVal contedType As String, ByVal boundValue As String, sheet As Worksheet, ByVal RowNum As Long, ByVal colNum As Long)
    On Error Resume Next
    
    Dim inputTitle As String
    inputTitle = getResByKey("Range")
    
    '|fffd||fffd||f6||fffd||663||fffd||fffd||fffd|Validation|fffd||fffd||fffd||fffd||3e3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1f7||fffd||4aa||fffd||fffd|
    If contedType <> "Enum" And contedType <> "Bitmap" And contedType <> "IPV4" And contedType <> "IPV6" _
        And contedType <> "Time" And contedType <> "Date" And contedType <> "DateTime" Then
        If boundValue <> sheet.Cells(RowNum, colNum).Validation.inputMessage Then
            If contedType = "String" Or contedType = "Password" Then
                inputTitle = getResByKey("Length")
                boundValue = formatRange(boundValue)
            End If
            
            If isNum(contedType) Then
                 boundValue = formatRange(boundValue)
            End If
            
            With sheet.Cells(RowNum, colNum).Validation
                .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertInformation
                .inputTitle = inputTitle
                .inputMessage = boundValue
                .ShowInput = True
                .ShowError = False
            End With
        End If
    '|f6||fffd||fffd|
    ElseIf contedType = "Enum" Then
        If boundValue <> sheet.Cells(RowNum, colNum).Validation.Formula1 Or sheet.Cells(RowNum, colNum).Validation.inputMessage = "" Then
            With sheet.Cells(RowNum, colNum).Validation
                .Delete
                .Add Type:=xlValidateList, Formula1:=boundValue
                .inputTitle = getResByKey("Range")
                .inputMessage = "[" + boundValue + "]"
                .ShowInput = True
                .ShowError = True
            End With
            sheet.Cells(RowNum, colNum).Validation.Modify Type:=xlValidateList, Formula1:=boundValue
        End If
    End If
    
End Sub
Function get_colNum(ByVal sheetName As String, ByVal groupName As String, ByVal columnName As String, RowNum As Long) As Long
    Dim m_colNum1, m_colNum2, m_rowNum As Long
    Dim ws As Worksheet
    If sheetName = getResByKey("Comm Data") Or InStr(sheetName, getResByKey("Board Style")) <> 0 Then
        If containsASheet(ThisWorkbook, sheetName) Then
            Set ws = ThisWorkbook.Worksheets(sheetName)
        Else
            Set ws = ThisWorkbook.Worksheets(actualBoardStyleName)
        End If
        For m_rowNum = 1 To ws.Range("a65536").End(xlUp).row
            If groupName = ws.Cells(m_rowNum, 1).value Then
                For m_colNum1 = 1 To ws.Range("IV" + CStr(m_rowNum + 1)).End(xlToLeft).column
                    If columnName = ws.Cells(m_rowNum + 1, m_colNum1).value Then
                        get_colNum = m_colNum1
                        RowNum = m_rowNum + 1
                        Exit For
                    End If
                Next
                Exit For
            End If
        Next
        
    Else
        Set ws = ThisWorkbook.Worksheets(sheetName)
        For m_colNum1 = 1 To ws.Range("IV2").End(xlToLeft).column
            If columnName = ws.Cells(2, m_colNum1).value Then
                m_colNum2 = m_colNum1
                While Trim(ws.Cells(1, m_colNum2).value) = ""
                    m_colNum2 = m_colNum2 - 1
                Wend
                If groupName = Trim(ws.Cells(1, m_colNum2).value) Then
                    get_colNum = m_colNum1
                    Exit For
                End If
            End If
        Next
    End If
End Function
Function get_MocAndAttrcolNum(ByVal mocName As String, ByVal attrName As String, ByVal sheetName As String) As Long
    Dim conRowNum, noUse As Long
    Dim groupName, columnName As String
    Dim controldef As Worksheet
    Set controldef = ThisWorkbook.Worksheets("CONTROL DEF")
    get_MocAndAttrcolNum = 0
    For conRowNum = 2 To controldef.Range("a65536").End(xlUp).row
        If (mocName = controldef.Cells(conRowNum, 1).value) _
            And (attrName = controldef.Cells(conRowNum, 2).value) _
            And (sheetName = controldef.Cells(conRowNum, 7).value) Then
            groupName = controldef.Cells(conRowNum, 8).value
            columnName = controldef.Cells(conRowNum, 9).value
            get_MocAndAttrcolNum = get_colNum(sheetName, groupName, columnName, noUse)
        Exit For
        End If
    Next
End Function
'|fffd||fffd||237||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1f7||fffd||fffd||fffd||fffd||fffd||262||fffd||fffd||3a7||fffd||fffd|[1|fffd||fffd|2][3|fffd||fffd|4]
Function Check_Int_Validation(ByVal attrRange As String, ByVal attrValue As String) As Boolean
    Dim sItem As String
    Dim min, max As Double
    Dim nLoop As Long
    Dim isInFlag, bFlag As Boolean

    sItem = Right(Left(Trim(attrValue), 1), 1)
    If sItem = "#" And Len(Trim(attrValue)) > 1 Then
        For nLoop = 2 To Len(Trim(attrValue))
            sItem = Right(Left(Trim(attrValue), nLoop), 1)
            If sItem < "0" Or sItem > "9" Then
                Check_Int_Validation = False
                Exit Function
            End If
        Next
        Check_Int_Validation = True
        Exit Function
    End If
    
    isInFlag = False
    bFlag = True
    For nLoop = 1 To Len(Trim(attrValue))
        sItem = Right(Left(Trim(attrValue), nLoop), 1)
        If sItem < "0" Or sItem > "9" Then
            If nLoop = 1 And sItem = "-" Then
                bFlag = True
            Else
                bFlag = False
                Check_Int_Validation = False
                Exit Function
            End If
        End If
    Next
    
    If bFlag = True Then
        While attrRange <> ""
            min = CDbl(Mid(attrRange, 2, InStr(1, attrRange, ",") - 2))
            max = CDbl(Mid(attrRange, InStr(1, attrRange, ",") + 1, InStr(1, attrRange, "]") - InStr(1, attrRange, ",") - 1))
            If CDbl(attrValue) >= min And CDbl(attrValue) <= max Then
                Check_Int_Validation = True
                Exit Function
            End If
            attrRange = Mid(attrRange, InStr(1, attrRange, "]") + 1)
        Wend
    End If
    Check_Int_Validation = False
End Function
'|fffd||436||3f2||fffd||fffd||fffd|Target|5b8||fffd||fffd||fffd||fffd||fffd||fffd||135||fffd||52a||fffd||fffd||fffd||1f7||fffd||3aa||fffd||fffd||26b||fffd||fffd||fffd||fffd||fffd||fffd||5f4||32c|,|fffd||fffd||fffd||fffd||fffd||fffd||578||f5||fffd||52a||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5|
Public Function Ensure_Gray_Cell(CurRange As Range) As Boolean
    If CurRange.value <> "" And CurRange.Interior.colorIndex = SolidColorIdx And CurRange.Interior.Pattern = SolidPattern Then
        MsgBox getResByKey("NoInput"), vbOKOnly + vbExclamation + vbApplicationModal + vbDefaultButton1, getResByKey("Warning")
        CurRange.value = ""
        CurRange.Select
        Ensure_Gray_Cell = True
    Else
        Ensure_Gray_Cell = False
    End If
End Function

Public Function Moc_Appear_In_SameSheet(ByVal mocName As String, ByVal attrName As String) As Boolean
        
        Dim rowIndex As Long
        Dim found As Boolean
        found = False
        Dim MAPPINGDEF As Worksheet
        Set MAPPINGDEF = ThisWorkbook.Worksheets("MAPPING DEF")
        For rowIndex = 2 To MAPPINGDEF.Range("a65536").End(xlUp).row
                If (MAPPINGDEF.Cells(rowIndex, 1).value = ThisWorkbook.ActiveSheet.name _
                    And MAPPINGDEF.Cells(rowIndex, 4).value = mocName _
                    And MAPPINGDEF.Cells(rowIndex, 5).value = attrName) Then
                    If found Then
                            Moc_Appear_In_SameSheet = True
                            Exit Function
                    Else
                        found = True
                    End If
                End If
        Next
End Function

Function formatRange(attrRange As String) As String
        Dim reRange As String
        reRange = ""
        Dim min As Double
        Dim max As Double
        
        While attrRange <> ""
            min = CDbl(Mid(attrRange, 2, InStr(1, attrRange, ",") - 2))
            max = CDbl(Mid(attrRange, InStr(1, attrRange, ",") + 1, InStr(1, attrRange, "]") - InStr(1, attrRange, ",") - 1))
            attrRange = Mid(attrRange, InStr(1, attrRange, "]") + 1)
            If min = max Then
                If reRange <> "" Then
                    reRange = reRange + ",[" + CStr(min) + "]"
                Else
                     reRange = "[" + CStr(min) + "]"
                End If
            Else
                If reRange <> "" Then
                    reRange = reRange + ",[" + CStr(min) + "~" + CStr(max) + "]"
                Else
                     reRange = "[" + CStr(min) + "~" + CStr(max) + "]"
                End If
            End If
        Wend
        formatRange = reRange
End Function

Public Sub boardStyleSheetControl(ByVal sh As Object, ByVal Target As Range)
    On Error Resume Next
    Dim sheet As New Worksheet
    Dim cellRange As Range
    Dim isConAttr As Boolean
    Dim RowNum As Long
    Dim contRel As controlRelation
    Set sheet = sh
    If Target.count Mod 256 = 0 Then
        Exit Sub
    End If
    Dim currentNeType As String
    If sheet.name <> getResByKey("Board Style") Then actualBoardStyleName = sheet.name
    For Each cellRange In Target
        If cellRange.Interior.colorIndex = 34 Or cellRange.Interior.colorIndex = 40 Or cellRange.Borders.LineStyle = xlLineStyleNone Then
            Exit Sub
        End If
        If Ensure_Gray_Cell(cellRange) = False Then
            'isConAttr|fffd||fffd||fffd||fffd||fffd||1f7||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd|
'            If UBound(Split(cellRange.value, "\")) <> 2 And cellRange.Hyperlinks.count = 1 Then
'                cellRange.Hyperlinks.Delete
'            End If
            isConAttr = False
           If (Check_Value_Validation(sheet, cellRange, isConAttr, contRel, currentNeType) = 1) And (isConAttr = True) Then
                Call Execute_Branch_Control(sheet, cellRange, contRel, currentNeType)
            End If
        End If
    Next cellRange
End Sub
'
Public Function isGsmCellSheet(sheetName As String) As Boolean
    If sheetName = "GSM Cell" Or sheetName = "GSM|421||fffd||fffd|" Then
        isGsmCellSheet = True
        Exit Function
    End If
    isGsmCellSheet = False
End Function

Private Sub setEmptyValidation(ByRef sheet As Worksheet, ByRef RowNumber As Long, ByRef columnNumber As Long)
    On Error Resume Next
    With sheet.Cells(RowNumber, columnNumber).Validation
        .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertInformation
        .inputTitle = ""
        .inputMessage = ""
        .ShowInput = True
        .ShowError = False
    End With
End Sub

Public Function cellIsGray(ByRef certainCell As Range) As Boolean
    If certainCell.Interior.colorIndex = SolidColorIdx And certainCell.Interior.Pattern = SolidPattern Then
        cellIsGray = True
    Else
        cellIsGray = False
    End If
End Function

Public Function sheetSelectionShouldCheck(ByRef ws As Worksheet) As Boolean
    Dim sheetName As String
    sheetName = ws.name
    If (isGsmCellSheet(sheetName) = False) And (sheetName <> "MappingSiteTemplate") And (sheetName <> "ProductType") _
        And (sheetName <> "MappingCellTemplate") And (sheetName <> "MappingRadioTemplate") _
        And (sheetName <> "MAPPING DEF") And (sheetName <> "SHEET DEF") And (sheetName <> "CONTROL DEF") And (sheetName <> "RELATION DEF") _
        And (sheetName <> "Help for USB Parameter") And (sheetName <> getResByKey("help")) _
        And (sheetName <> "IPRouteMap") And (sheetName <> getResByKey("Cover")) And (sheetName <> "COMMON") _
        And (sheetName <> "Qos") And (sheetName <> "USB Parameter for Sites") And (sheetName <> "SummaryRes") _
        And (sheetName <> getResByKey("Temp Sheet")) Then
        sheetSelectionShouldCheck = True
    Else
        sheetSelectionShouldCheck = False
    End If
End Function

Public Function selectionIsValid(ByRef ws As Worksheet, ByRef cellRange As Range) As Boolean
    If cellRange.Interior.colorIndex = 34 Or cellRange.Interior.colorIndex = 40 Or cellRange.Borders.LineStyle = xlLineStyleNone Then
        selectionIsValid = False
    Else
        selectionIsValid = True
    End If
End Function

Public Sub currentParameterBranchCheck(ByRef ws As Worksheet, ByRef cellRange As Range)
    On Error GoTo ErrorHandler
    If cellRange.count > 1 Then Exit Sub '|461||fffd||fffd||135||fffd||52a||fffd||fffd||fffd||fffd||fffd|1|fffd||fffd||fffd||fffd||fffd||2f3||fffd|
    
    If selectionIsValid(ws, cellRange) = False Then Exit Sub '|fffd||fffd||fffd||461||fffd||fffd||135||fffd||52a||fffd||fffd||1f7||fffd||fffd||fffd||5b1||fffd||fffd||fffd||2f3||fffd|
    
    '|fffd||fffd||fffd||fffd||47e||fffd||fffd||4bb||fffd||fffd||2e3||fffd||fffd||fffd||fffd||fffd||4aa||fffd||fffd||fffd||fffd||fffd||2e3||fffd||fffd||2f3||fffd|
    If cellIsGray(cellRange) Then Exit Sub
    
    Dim controldef As CControlDef
    Dim groupName As String, columnName As String, sheetName As String
    
    Call getGroupAndColumnName(ws, cellRange, groupName, columnName)
    
    If Not isBoardStyleSheet(ws) Then
        Set controldef = getControlDefine(ws.name, groupName, columnName)
    Else
        If ws.name <> getResByKey("Board Style") Then actualBoardStyleName = ws.name
        Set controldef = getControlDefine(getResByKey("Board Style"), groupName, columnName)
    End If
    
    '|3b4||fffd||4b5||fffd|Control Def|fffd||fffd||fffd||fffd||fffd||fffd||3e2||fffd||fffd||fffd||2f3||fffd|
    If controldef Is Nothing Then Exit Sub
    
    Dim mocName As String, attrName As String, neType As String, controlInfo As String
    Call getControlAttrInfo(controldef, mocName, attrName, neType, sheetName, controlInfo)
    
     '|fffd||fffd||fffd||fffd||f2||fffd||fffd||fffd||fffd||fffd||fffd||1f1||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2f3||fffd|
    If Not controlRelationManager.containsControlledAttributeRelation(mocName, attrName, neType, sheetName) Then Exit Sub
    
    '|fffd||4b5||fffd||fffd||f2||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd|
    Dim controlRelation As CControlRelation
    Set controlRelation = controlRelationManager.getControlRelation(mocName, attrName, neType, sheetName)
    
    Dim controlAttrValueManager As New CControlAttrValueManager '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||139||fffd||fffd||fffd||fffd||8ec||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||bc7b||fffd||fffd||fffd||fffd||fffd||137||fffd||5a7||fffd||fffd||fffd||fffd||fffd||fffd||3e2||fffd||fffd||423||fffd||fffd|
    Dim mainControlAttrReturnedValue As Long
    mainControlAttrReturnedValue = makeControlAttrValueCol(ws, mocName, attrName, neType, sheetName, controlRelation, controlAttrValueManager, cellRange)
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||fffd|1|fffd||fffd||4aa||f4||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||22b||fffd||fffd||4aa||f4||fffd||fffd||fffd||632||fffd||fffd||fffd||5b5||3aa||fffd||57b||fffd||3aa||fffd||fffd||fffd||e3||fffd||fffd||fffd||fffd||fffd||4aa||fffd||fffd||5a7||423||fffd||98ec||5b1||fffd||fffd||fffd||2f3||fffd|
    If mainControlAttrReturnedValue = 1 Then
        Exit Sub
    ElseIf mainControlAttrReturnedValue = 3 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||fffd|3|fffd||fffd||2f5||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||1f0||fffd||fffd||5a7||fffd||fffd||427||fffd||fffd||fffd||4bb||fffd||fffd||2f3||fffd|
        If cellIsGray(cellRange) Then Exit Sub '|fffd||fffd||2b1||fffd||43f||fffd||fffd||fffd||fffd||47e||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||13b||4bb||fffd||fffd||fffd||fffd||b8||f1||fffd||fffd||632||fffd||fffd||fffd||fffd||4bb||fffd||fffd||2e3||fffd||fffd||fffd||f4||fffd||372||fffd||fffd||fffd||4aa||fffd||674||3bb||4bb||fffd||fffd||fffd||1f0||fffd||fffd||52a||fffd||fffd||fffd||2e3||fffd||5b1||fffd||fffd||fffd||2f3||fffd||fffd||fffd||fffd||fffd||fffd||427||fffd||fffd|
        Call setRangeGray(cellRange)
        Exit Sub
    End If
    
    Dim oneBranchMatchFlag As Boolean
    Dim branchMatchChecker As New CBranchMatchChecker
    Call branchMatchChecker.init(controlAttrValueManager, controlInfo)
    oneBranchMatchFlag = branchMatchChecker.getOneBranchMatchFlag
    
    If oneBranchMatchFlag = False Then '|2f5||fffd||fffd||3b4||fffd||4b5||fffd||1a5||fffd||fffd||fffd||5a7||fffd||fffd||fffd||bdaf5||fffd||1f0||fffd||fffd||52a||fffd||4bb||fffd|
        Call setRangeGray(cellRange)
    Else '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||4aa||fffd||4bb||fffd||fffd||fffd||fffd||fffd||f4||fffd||fffd||4aa||fffd||fffd||fffd||4f1||fffd||fffd||637||fffd||5a7||fffd||fffd|Tip|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||427||fffd||fffd|
        Call setControlledParameterTipAndValidation(ws, cellRange, controldef.dataType, branchMatchChecker)
    End If
    Exit Sub
ErrorHandler:
    Exit Sub
End Sub

Private Sub setRangeGray(ByRef certainRange As Range)
    On Error Resume Next
    certainRange.Interior.colorIndex = SolidColorIdx
    certainRange.Interior.Pattern = SolidPattern
    certainRange.value = ""
    certainRange.Validation.ShowInput = False
End Sub

Private Sub setControlledParameterTipAndValidation(ByRef ws As Worksheet, ByRef cellRange As Range, ByRef valueType As String, ByRef branchMatchChecker As CBranchMatchChecker)
    If targetHasInputMessage(cellRange) Then Exit Sub  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|InputMessage|fffd||fffd|Tip|fffd||fffd||fffd||fffd||fffd||2f3||fffd|
    
    If branchMatchChecker.getMatchBranchAttrEmptyFlag = True Then Exit Sub '|fffd||fffd||fffd||133||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||3aa||fffd||563||fffd||fffd||fffd||fffd||fffd||4aa||fffd||fffd||fffd||fffd||5e2||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2f3||fffd|
    
    Dim matchBranchNode As Variant, boundNodes As Variant
    Set matchBranchNode = branchMatchChecker.getMatchBranchNode
    Set boundNodes = matchBranchNode.childNodes
    
    Dim boundValue As String
    Dim valIsRight As Boolean '|fb||2b2||f4||fffd||e3||fffd||5bb||fffd||fffd||3aa||fffd||2f5||fffd||fffd||fffd||5ae||1f0||fffd||13a||fffd||fffd||fffd|getContedAttrBoundValue
    '|fffd||fffd||f1||fffd||fffd||632||fffd||fffd||fffd||fffd||137||fffd||3a7|
    boundValue = getContedAttrBoundValue(boundNodes, valIsRight, ws, cellRange, cellRange.column)
    Call setValidation(valueType, boundValue, ws, cellRange.row, cellRange.column)
End Sub

Private Function targetHasInputMessage(ByRef Target As Range) As Boolean
    On Error GoTo ErrorHandler
    targetHasInputMessage = True
    If Target.Validation Is Nothing Then '|fb||fffd||fffd||fffd||fffd||427||fffd||523||fffd||fffd||fffd||fb||fffd||fffd|InputMessage
        targetHasInputMessage = False
        Exit Function
    End If
    
    Dim inputMessage As String
    inputMessage = Target.Validation.inputMessage '|fffd||fffd||fffd||fffd||fffd|InputMessage|fffd||fffd||fffd||fffd||5b5||fffd||279||fffd||fffd||fffd||fffd||fffd||fffd||fb||fffd||423||fffd||fffd||fffd||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|ErrorHandler
    If inputMessage = "" Then targetHasInputMessage = False '|fffd||fffd||fffd|InputMessage|3aa||fffd||563||fffd||fffd||fffd||fffd||fffd||3aa||fb||fffd||fffd|Tip
    Exit Function
ErrorHandler:
    targetHasInputMessage = False
End Function

Private Function makeControlAttrValueCol(ByRef ws As Worksheet, ByRef mocName As String, ByRef attributeName As String, ByRef neType As String, ByRef sheetName As String, ByRef controlRelation As CControlRelation, ByRef controlAttrValueManager As CControlAttrValueManager, ByRef cellRange As Range) As Long
    makeControlAttrValueCol = -1
    Dim cellRow As Long, cellColumn As Long, noUse As Long
    cellRow = cellRange.row
    
    Dim eachControlAttr As Variant
    Dim mainControlAttr As String, mainControlGroupName As String, mainControlColumnName As String, mainValue As String, mainValueType As String
    Dim mainControlColumnNumber As Long
    
    Dim controlAttrCol As Collection
    Set controlAttrCol = controlRelation.controlAttrCol
    
    Dim mainControlRelation As CControlRelation '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd|Control Def|fffd||fffd||fffd||fffd||fffd||fffd|
    Dim mainControlAttrValue As CControlAttrValue '|fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||5b5||fffd||fffd||fffd||fffd||fffd||363||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b5||fffd||fffd||fffd|
    
    For Each eachControlAttr In controlAttrCol
        mainControlAttr = CStr(eachControlAttr)
        '|fffd||fffd||fffd||fffd||6b5||fffd||1f0||4b3||1e9||fb||fffd||fffd||fffd||4b5||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||13f||fffd||fffd||fffd||fffd||fffd||3e2||fffd||fffd||2f5||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||231||fffd||663||fffd||fffd||fffd||f1||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Not controlRelationManager.containsAttributeRelation(mocName, mainControlAttr, neType, sheetName) Then
            makeControlAttrValueCol = 1 '1|fffd||fffd||2be||fffd||6bf||fffd||fffd||1b7||fffd||3a7||fffd||fffd|
            Exit Function
        End If
        
        Set mainControlRelation = controlRelationManager.getControlRelation(mocName, mainControlAttr, neType, sheetName)
        
        mainControlGroupName = mainControlRelation.groupName
        mainControlColumnName = mainControlRelation.columnName
        mainValueType = mainControlRelation.valueType
                
        mainControlColumnNumber = get_colNum(sheetName, mainControlGroupName, mainControlColumnName, noUse)
        '|fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||3b4||fffd||fffd||4b3||1e9||fffd||fffd||fffd||4b5||fffd||fffd||fffd||2f5||fffd||fffd|Control Def|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3e2||fffd||fffd||fffd||fffd||fffd||fffd||423||fffd||fffd||fffd||2f3||fffd|
        If mainControlColumnNumber = 0 Then
            makeControlAttrValueCol = 1 '1|fffd||fffd||2be||fffd||6bf||fffd||fffd||1b7||fffd||3a7||fffd||fffd|
            Exit Function
        End If
        
        Dim mainAttrCell As Range
        Set mainAttrCell = ws.Cells(cellRow, mainControlColumnNumber)
        
        mainValue = mainAttrCell.value
        
        Dim valueEmptyFlag As Boolean, valueReferenceFlag As Boolean, valueCellGrayFlag As Boolean
        valueEmptyFlag = False
        valueReferenceFlag = False
        valueCellGrayFlag = False
        
        If UBound(Split(mainValue, "\")) = 2 Then  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||3aa||fffd||fffd||fffd||e3||fffd||fffd||fffd||5be||fffd||fffd||3aa|True|fffd||fffd||fffd||276||fffd||fffd||fffd||fffd||53c||fffd||fffd||fffd||fffd||fffd||fffd||fffd|check
            valueReferenceFlag = True '|fffd||fffd||fffd||fffd||3aa||fffd||fffd||fffd||f1||fffd||5be|
        ElseIf mainValue = "" Then '|fffd||fffd||2b1||fffd||fffd||fffd||632||fffd||fffd||fffd||3aa||fffd||563||fffd||fffd||43f||fffd||fffd||738||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||4b2||fffd||fffd||fffd||fffd||427||fffd||123||fffd||fffd||fffd||fffd||fffd||4aa||fffd||236||538||fffd||fffd||fffd||fffd||635||fffd||52a||fffd||fffd||fffd||fffd||fffd||423||fffd||fffd|
            Call currentParameterBranchCheck(ws, mainAttrCell)
            If cellIsGray(cellRange) Then
                makeControlAttrValueCol = 1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||13b||4bb||fffd||fffd||131||fffd||fffd||47e||fffd||2b9||fffd||fffd||1f0||fffd||fffd||52a||fffd||fffd||4bb||fffd||fffd||2e3||fffd||fffd||fffd||fffd||fffd||4aa||fffd||436||fffd||fffd||2e3||fffd||5b1||fffd||fffd||fffd||2f3||fffd|
                Exit Function
            End If
        End If
        
        If cellIsGray(mainAttrCell) Then '|fffd||fffd||fffd||133||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||5be||fffd||fffd||3aa|True|fffd||fffd||fffd||276||fffd||fffd||fffd||fffd||53c||fffd||fffd||fffd||fffd||fffd||fffd||fffd|check
            valueCellGrayFlag = True '|fffd||fffd||fffd||fffd||3aa||fffd||4bb||fffd||fffd||fffd||5be|
            valueEmptyFlag = True '|fffd||fffd||fffd||fffd||3aa||fffd||4bb||fffd||fffd||fffd||fffd||fffd||3f6||fffd||3aa||fffd||fffd|
        ElseIf mainValue = "" Then '|fffd||fffd||fffd||fffd||fffd||fffd||635||fffd||52a||fffd||fffd||3b4||fffd||4bb||fffd||fffd||fffd||2f5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||635||fffd||52a||fffd||fffd||fffd||fffd||fffd||fffd||427||fffd||fffd||5a7||fffd||fffd||5bb||fffd||fffd||3b4||fffd||fffd||434||5b5||fffd||fffd||fffd||571||fffd||5be||fffd||fffd||3aa|True|fffd||fffd||fffd||276||fffd||fffd||fffd||fffd||53c||fffd||fffd||fffd||fffd||fffd||fffd||fffd|check
            valueEmptyFlag = True
        End If
        
        Set mainControlAttrValue = New CControlAttrValue
        Call mainControlAttrValue.init(mainControlAttr, mainControlColumnName, mainValue, mainValueType, valueEmptyFlag, valueReferenceFlag, valueCellGrayFlag)
        
        Call controlAttrValueManager.addNewControlAttrValue(mainControlAttrValue)
    Next eachControlAttr
    makeControlAttrValueCol = 2 '2|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||123||fffd||fffd||fffd||4aa||fffd||fffd||fffd||437||fffd||5a7||fffd||fffd||fffd||fffd||fffd||436||fffd|
End Function

Private Sub getControlAttrInfo(ByRef controldef As CControlDef, ByRef mocName As String, ByRef attrName As String, ByRef neType As String, ByRef sheetName As String, ByRef controlInfo As String)
    mocName = controldef.mocName
    attrName = controldef.attributeName
    neType = controldef.neType
    sheetName = controldef.sheetName
    controlInfo = controldef.controlInfo
End Sub

Attribute VB_Name = "CAddBoardStyleButtons"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Private addBoardStyleMoiBarCol_ As Collection
Private addBoardStyleMoiButton_ As CommandBarButton
Private addBoardStyleMoiFinishButton_ As CommandBarButton
Private addBoardStyleMoiCancelButton_ As CommandBarButton

Public Sub init()
    Dim capacityExpansionExist As Boolean
    capacityExpansionExist = containsAToolBar(CapactiyExpansionBarNameAddMoi)
    Dim bar As CommandBar
'    capacityExpansionExist = False
'    Dim bar As CommandBar
'    For Each bar In CommandBars
'        If bar.name = CapactiyExpansionBarNameAddMoi Then
'            capacityExpansionExist = True
'            Exit For
'        End If
'    Next
    If capacityExpansionExist Then
        Set bar = CommandBars(CapactiyExpansionBarNameAddMoi)
        Call initAddBoardStyleButtons(bar.Controls(1), bar.Controls(2), bar.Controls(3))
    End If
End Sub

Public Sub initAddBoardStyleButtons(ByRef AddButton As CommandBarButton, ByRef FinishButton As CommandBarButton, ByRef CancelButton As CommandBarButton)
    Set addBoardStyleMoiButton_ = AddButton
    Set addBoardStyleMoiFinishButton_ = FinishButton
    Set addBoardStyleMoiCancelButton_ = CancelButton
End Sub

Public Sub setAddBoardStyleButtons()
    addBoardStyleMoiButton_.Enabled = False
    addBoardStyleMoiFinishButton_.Enabled = True
    addBoardStyleMoiCancelButton_.Enabled = True
End Sub

Public Sub resetAddBoardStyleButtons()
    addBoardStyleMoiButton_.Enabled = True
    addBoardStyleMoiFinishButton_.Enabled = False
    addBoardStyleMoiCancelButton_.Enabled = False
End Sub
Attribute VB_Name = "CAddingBoardStyleMoc"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Private addBoardStyleButtons_ As CAddBoardStyleButtons

Public Sub init()

End Sub
'
'Private Sub setAddingBoardStyleMoi()
'    Dim button As CommandBarButton
'    Set button = addBoardStyleMoiBarCol("add")
'    button.Enabled = False
'    Set button = addBoardStyleMoiBarCol("finish")
'    button.Enabled = True
'    Set button = addBoardStyleMoiBarCol("cancel")
'    button.Enabled = True
'End Sub
'
'Private Sub resetAddingBoardStyleMoi()
'    Dim button As CommandBarButton
'    Set button = addBoardStyleMoiBarCol("add")
'    button.Enabled = True
'    Set button = addBoardStyleMoiBarCol("finish")
'    button.Enabled = False
'    Set button = addBoardStyleMoiBarCol("cancel")
'    button.Enabled = False
'End Sub

Private Sub Class_Initialize()
    inAddProcessFlag = True
    'Set addBoardStyleButtons_ = New CAddBoardStyleButtons
    If addBoardStyleButtons Is Nothing Then Call initAddBoardStyleButtonsPublic
    If deleteBoardStyleButtons Is Nothing Then Call initDeleteBoardStyleButtonsPublic
    
    Call addBoardStyleButtons.setAddBoardStyleButtons
    Call deleteBoardStyleButtons.setDeleteBoardStyleButtons
End Sub

Private Sub Class_Terminate()
    inAddProcessFlag = False
    Call addBoardStyleButtons.resetAddBoardStyleButtons
    Call deleteBoardStyleButtons.resetDeleteBoardStyleButtons
End Sub
Attribute VB_Name = "CAntGBts"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private p_cellId As String
Private p_brds As String
Private p_portNo As String
Private p_antNo As String
Private p_rowCount As Long
Private p_range As String
Private p_trxNum As Long
Private p_freqNos As String
Private p_antGrpId As String
Private Const BRACKET_RIGHT = "]"
Private Const BRACKET_LEFT = "["
Private Const COMMA = ","
Dim antenneCollection As Collection

    

Property Let cellId(str As String)
        p_cellId = str
End Property

Property Let trxNum(str As Long)
        p_trxNum = str
End Property

Property Let brds(str As String)
        p_brds = cutTail(expandStr(str, p_trxNum))
End Property

Property Let freqNos(str As String)
       p_freqNos = cutTail(str)
End Property

Property Let antNo(str As String)
        p_antNo = cutTail(expandStr(str, p_trxNum))
End Property
Property Let antGrpId(str As String)
        p_antGrpId = cutTail(expandStr(str, p_trxNum))
End Property

Property Let ranges(str As String)
        p_range = str
End Property

Property Let portNos(str As String)
        p_portNo = cutTail(expandStr(str, p_trxNum))
End Property

Property Get cellId() As String
        cellId = p_cellId
End Property

Property Get trxNum() As Long
        trxNum = p_trxNum
End Property

Property Get brds() As String
       brds = p_brds
End Property

Property Get ranges() As String
       ranges = p_range
End Property

Property Get portNos() As String
       portNos = p_portNo
End Property

Property Get freqNos() As String
       freqNos = p_freqNos
End Property

Property Get antNo() As String
       antNo = p_antNo
End Property
Property Get antGrpId() As String
       antGrpId = p_antGrpId
End Property

Property Get rowCount() As String
        rowCount = p_rowCount
End Property

Private Function getSplitStr(srcStr As String)
    Dim splitStr As String
    
    splitStr = COMMA
    If Not (InStr(srcStr, BRACKET_RIGHT) = 0) Then
        splitStr = BRACKET_RIGHT
    End If
    
    getSplitStr = splitStr
End Function

Private Function expandStr(srcStr As String, cnt As Long)
        Dim dstStr As String
        Dim strArray() As String
        Dim splitStr As String
        splitStr = getSplitStr(srcStr)
        
        Dim conStr As String
        Dim fmtStr As String
        fmtStr = srcStr
        If COMMA = splitStr Then
            conStr = COMMA
        Else
            conStr = BRACKET_RIGHT
            If Right(srcStr, 1) = BRACKET_RIGHT Then
                fmtStr = Left(srcStr, Len(srcStr) - 1)
            End If
        End If
  
        strArray = Split(fmtStr, splitStr)

      
        Dim iNo As Long
        
        If UBound(strArray) = 0 Then
            '1|fffd||fffd||579||3aa|1,1,1,1,1|fffd||fffd||fffd||4f7||fffd||fffd||fffd||3aa||fffd||fffd||fffd||fffd| [1,2|fffd||fffd||579||3aa|[1,2][1,2][1,2][1,2][1,2|fffd||fffd||fffd||4f7||fffd||fffd||fffd||3aa||fffd||fffd||fffd||fffd||fffd||fffd|
            iNo = 0
            
            While (iNo < cnt)
                If (0 = iNo) Then
                    dstStr = strArray(iNo)
                Else
                    dstStr = dstStr + conStr + strArray(0)
                End If
            
                iNo = iNo + 1
            Wend
            
            dstStr = dstStr + conStr
        Else
            '1,2 |fffd||fffd||579||3aa|1,2,,, [1,2][3,4]|fffd||fffd||579||3aa|[1,2][3,4]]]]
            dstStr = srcStr
            For iNo = UBound(strArray) + 1 To (cnt - 1)
                dstStr = dstStr + conStr
            Next
        End If
        
        expandStr = dstStr
End Function

Private Function cutTail(str As String) As String
        Dim strArr() As String
        Dim finaStr As String
        
        Dim splitStr As String
        splitStr = getSplitStr(str)
        Dim conStr As String
        
        If COMMA = splitStr Then
            conStr = COMMA
        Else
            conStr = BRACKET_RIGHT
        End If
        
        strArr = Split(str, splitStr)
        finaStr = ""
        Dim iNo As Long
        iNo = 0
        While (iNo < p_trxNum And iNo <= UBound(strArr))
            If (0 = iNo) Then
                finaStr = strArr(iNo)
            Else
                finaStr = finaStr + conStr + strArr(iNo)
            End If
            
            iNo = iNo + 1
        Wend
        
        
        If COMMA = splitStr Then
            cutTail = finaStr
        Else
            cutTail = finaStr + conStr
        End If
End Function

Private Function getCurValueSafty(strArr() As String, index As Long) As String

    If index <= UBound(strArr) Then
        Dim loc As Long
        loc = InStr(strArr(index), BRACKET_LEFT)
        If loc = 0 Then
            getCurValueSafty = Replace(strArr(index), BRACKET_LEFT, "")
        Else
            getCurValueSafty = Right(strArr(index), Len(strArr(index)) - loc)
        End If
    Else
        getCurValueSafty = ""
    End If
End Function

Private Function getStrToArrSize(srcStr As String, delimiter As String)
    Dim strArr() As String
    
    strArr = Split(srcStr, delimiter)
    getStrToArrSize = UBound(strArr)
End Function

Private Function getMaxStrToArrUBound(strArr() As String) As Long
    Dim index As Long
    Dim maxSize As Long
    
    maxSize = 0
        
    For index = LBound(strArr) To UBound(strArr)
        maxSize = max(maxSize, getStrToArrSize(strArr(index), COMMA))
    Next
    
    getMaxStrToArrUBound = maxSize
End Function

Private Function autoSplit(srcStr As String) As String()
    Dim deliStr As String
    deliStr = getSplitStr(srcStr)
    
    Dim fmtStr As String
    fmtStr = srcStr
    If BRACKET_RIGHT = deliStr Then
        fmtStr = Left(srcStr, Len(srcStr) - 1)
    End If
    
    autoSplit = Split(srcStr, deliStr)
End Function


Function getAntenneCollection() As Collection
    Set getAntenneCollection = antenneCollection
End Function

Public Function commitData() As Boolean

    Dim brdArray() As String
    Dim frqArray() As String
    Dim portNoArray() As String
    Dim antArray() As String
    Dim antGrpIdArray() As String
    Dim index As Long
    Dim innerIndex As Long
    Set antenneCollection = New Collection
    
    brdArray = autoSplit(p_brds)
    frqArray = autoSplit(p_freqNos)
    portNoArray = autoSplit(p_portNo)
    antArray = autoSplit(antNo)
    antGrpIdArray = autoSplit(antGrpId)
    
    commitData = True
    
    If (0 = p_trxNum) Or (-1 = UBound(frqArray)) Then
        Call MsgBox(getResByKey("TrxNumCannotBeZeroOrEmpty") & ":" & p_cellId, vbInformation, getResByKey("Warning"))
        commitData = False
        Exit Function
    End If
    
    If p_trxNum > 1 + UBound(frqArray) Then
        Call MsgBox(getResByKey("freqNumShouldBeBiggerThanTrxNum") & ":" & p_cellId, vbInformation, getResByKey("Error"))
        commitData = False
        Exit Function
    End If
    
'    If UBound(frqArray) > UBound(brdArray) Or UBound(frqArray) > UBound(portNoArray) Or UBound(frqArray) > UBound(antArray) Then
'        Call MsgBox(getResByKey("DebugArrayCrash") & ":" & p_cellId, vbInformation, getResByKey("Warning"))
'    End If
    
    'process per freq / per cell
    For index = LBound(frqArray) To UBound(frqArray)
                Call expandBinds(antenneCollection, _
                    p_cellId, _
                    getCurValueSafty(frqArray, index), _
                    getCurValueSafty(brdArray, index), _
                    getCurValueSafty(portNoArray, index), _
                    getCurValueSafty(antArray, index), _
                    getCurValueSafty(antGrpIdArray, index))
                    
    Next
    
End Function

Private Sub expandBinds(ByRef antCollection As Collection, sCellId As String, sFreq As String, sBrd As String, sPortNo As String, sAntNo As String, sAntGrpId As String)
    Dim strArr(4) As String
    strArr(0) = sBrd
    strArr(1) = sPortNo
    strArr(2) = sAntNo
    strArr(3) = sAntGrpId
    
    Dim maxUbound As Long
    maxUbound = getMaxStrToArrUBound(strArr)
    
    sBrd = expandStr(sBrd, maxUbound + 1)
    sPortNo = expandStr(sPortNo, maxUbound + 1)
    sAntNo = expandStr(sAntNo, maxUbound + 1)
    sAntGrpId = expandStr(sAntGrpId, maxUbound + 1)
    
    
    Dim brdArray() As String
    Dim portNoArray() As String
    Dim antArray() As String
    Dim antGrpIdArray() As String
    brdArray = Split(sBrd, COMMA)
    portNoArray = Split(sPortNo, COMMA)
    antArray = Split(sAntNo, COMMA)
    antGrpIdArray = Split(sAntGrpId, COMMA)
    
    Dim index As Long
    For index = LBound(brdArray) To maxUbound
        Dim antenne(5) As String
        antenne(0) = sCellId
        antenne(1) = sFreq
        antenne(2) = getCurValueSafty(brdArray, index)
        antenne(3) = getCurValueSafty(portNoArray, index)
        antenne(4) = getCurValueSafty(antArray, index)
        antenne(5) = getCurValueSafty(antGrpIdArray, index)
        Call antCollection.Add(antenne)
    Next
End Sub


Attribute VB_Name = "CAntennes"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private p_cellId As String
Private p_sectorIds As String
Private p_antennes As String
Private p_rowCount As Long
Private p_range As String
Private p_trx As String
Private p_row As Long

Property Let cellId(str As String)
        p_cellId = str
End Property

Property Let trxId(str As String)
        p_trx = str
End Property

Property Let sectorIds(str As String)
        p_sectorIds = str
End Property

Property Let ranges(str As String)
        p_range = str
End Property

Property Let row(val As Long)
        p_row = val
End Property

Property Let antennes(str As String)
        Dim antenneIndex As Long
        Dim sectorArray() As String
        p_rowCount = 0
        sectorArray = Split(str, ";")
        For antenneIndex = LBound(sectorArray) To UBound(sectorArray)
              p_rowCount = p_rowCount + UBound(Split(sectorArray(antenneIndex), ",")) + 1
        Next
        p_antennes = str
End Property

Property Get cellId() As String
        cellId = p_cellId
End Property

Property Get trxId() As String
        trxId = p_trx
End Property

Property Get sectorIds() As String
       sectorIds = p_sectorIds
End Property

Property Get ranges() As String
       ranges = p_range
End Property

Property Get antennes() As String
        antennes = p_antennes
End Property

Property Get rowCount() As String
        rowCount = p_rowCount
End Property

Property Get row() As Long
        row = p_row
End Property

Function getAntenneCollection(sflag As Boolean, rowVal As Long) As Collection
    Dim sectorArray() As String
    Dim sectorAntenneArray() As String
    Dim trxArray() As String
    Dim antenneArray() As String
    Dim innerSector() As String
    Dim index As Long
    Dim innerIndex As Long
    Dim boardNum As String
    Dim antenneNo As String
    Dim modelT As String
    Dim antenneCollection As Collection
    Set antenneCollection = New Collection
    
    sflag = True
    If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
        sectorArray = Split(p_sectorIds, ";")
    Else
        sectorArray = Split(p_sectorIds, ",")
    End If
    sectorAntenneArray = Split(p_antennes, ";")
    trxArray = Split(p_trx, ",")
    If UBound(sectorArray) <> UBound(sectorAntenneArray) Or checkGSMCellDataError(sectorArray, sectorAntenneArray, trxArray) Then
        Call MsgBox(getResByKey("errorRecordExists"), vbInformation, getResByKey("Warning"))
        sflag = False
        rowVal = p_row
        Exit Function
    End If
    If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
        For index = LBound(sectorAntenneArray) To UBound(sectorAntenneArray)
            If Trim(sectorAntenneArray(index)) = "" Then
                    Call setValueIntoAntenneCollection(antenneCollection, p_cellId, sectorArray(index), "", "", "", p_range, trxArray(index))
            Else
                antenneArray = Split(sectorAntenneArray(index), ",")
                innerSector = Split(sectorArray(index), ",")
                For innerIndex = LBound(antenneArray) To UBound(antenneArray)
                    If Trim(antenneArray(innerIndex)) = "" Then
                        Call setValueIntoAntenneCollection(antenneCollection, p_cellId, innerSector(innerIndex), "", "", "", p_range, trxArray(index))
                    Else
                        Call getBoardNumAndAntenneNo(antenneArray(innerIndex), boardNum, antenneNo, modelT)
                        Call setValueIntoAntenneCollection(antenneCollection, p_cellId, innerSector(innerIndex), boardNum, antenneNo, modelT, p_range, trxArray(index))
                    End If
                 Next
             End If
        Next
    Else
        For index = LBound(sectorAntenneArray) To UBound(sectorAntenneArray)
                If Trim(sectorAntenneArray(index)) = "" Then
                    Call setValueIntoAntenneCollection(antenneCollection, p_cellId, sectorArray(index), "", "", "", p_range, "")
                Else
                    antenneArray = Split(sectorAntenneArray(index), ",")
                     For innerIndex = LBound(antenneArray) To UBound(antenneArray)
                        If Trim(antenneArray(innerIndex)) = "" Then
                            Call setValueIntoAntenneCollection(antenneCollection, p_cellId, sectorArray(index), "", "", "", p_range, "")
                        Else
                            Call getBoardNumAndAntenneNo(antenneArray(innerIndex), boardNum, antenneNo, modelT)
                            Call setValueIntoAntenneCollection(antenneCollection, p_cellId, sectorArray(index), boardNum, antenneNo, modelT, p_range, "")
                        End If
                        Next
                 End If
        Next
    End If
    Set getAntenneCollection = antenneCollection
End Function

Private Function checkGSMCellDataError(sectorArray() As String, sectorAntenneArray() As String, trxArray() As String) As Boolean
    Dim index As Long
    Dim innerIndex As Long
    Dim antenneArray() As String
    Dim innerSector() As String
    
    checkGSMCellDataError = False
    
    If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
        For index = LBound(sectorAntenneArray) To UBound(sectorAntenneArray)
            antenneArray = Split(sectorAntenneArray(index), ",")
            innerSector = Split(sectorArray(index), ",")
            If UBound(antenneArray) <> UBound(innerSector) Then
                checkGSMCellDataError = True
                Exit Function
            End If
        Next
    End If
End Function

Private Sub setValueIntoAntenneCollection(antenneCollection As Collection, cellStr As String, sectorStr As String, boardStr As String, anteStr As String, rsModel As String, rangeStr As String, trxStr As String)
    Dim antenne(6) As String
    antenne(0) = cellStr
    antenne(1) = sectorStr
    antenne(2) = boardStr
    antenne(3) = anteStr
    antenne(4) = rsModel
    antenne(5) = rangeStr
    antenne(6) = trxStr
    Call antenneCollection.Add(antenne)
End Sub

Private Sub getBoardNumAndAntenneNo(ByVal str As String, boardNum As String, antenneNo As String, modelT As String)
    Dim twoStr() As String
    Dim boardAnte As String
    Dim strs() As String
    Dim index As Long
    twoStr = Split(str, ":")
    boardAnte = twoStr(0)
    modelT = twoStr(1)
    strs = Split(boardAnte, "_")
    antenneNo = strs(UBound(strs))
    boardNum = ""
    For index = LBound(strs) To UBound(strs) - 1
        If boardNum = "" Then
              boardNum = strs(index)
        Else
              boardNum = boardNum + "_" + strs(index)
        End If
    Next
End Sub
Attribute VB_Name = "CApplicationFlags"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Sub init()

End Sub

Private Sub changeFlags(ByRef flag As Boolean)
    Application.DisplayAlerts = flag
    Application.ScreenUpdating = flag
    'Application.EnableEvents = flag '|fffd||631||fffd||fffd||bc||fffd||fffd||134||fffd||fffd||fffd|
End Sub

Private Sub Class_Initialize()
    Call changeFlags(False)
End Sub

Private Sub Class_Terminate()
    Call changeFlags(True)
End Sub
Attribute VB_Name = "CBoardNoManager"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private boardNoMap_ As CMap 'groupName|3aa|Key|fffd||fffd|BoardNoString|3aa|Value
Private boardNoAddressMap_ As CMap '|fffd||fffd||fffd||fffd||fffd||fffd||3aa|key|fffd||fffd||fffd||f5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b5||135||fffd||5b7||3aa|Value
Private boardStyleMappingDefMap_ As CMapValueObject
Private Const delimiter As String = ","
Private Const MaxBoardNoIndex_ As Long = 1000

Private Sub init()
    Set boardNoMap_ = New CMap
    Set boardNoAddressMap_ = New CMap
    If boardStyleData Is Nothing Then Call initBoardStyleMappingDataPublic
    Set boardStyleMappingDefMap_ = boardStyleData.getBoardStyleMappingDefMap
    
    Dim groupName As Variant
    For Each groupName In boardStyleMappingDefMap_.KeyCollection
        Call initGroupNameBoardNoMap(CStr(groupName))
        'Call updateGroupNameBoardNoMap(CStr(groupName))
    Next groupName
End Sub

Public Function getBoardNoColumnLetterByGroupName(ByRef groupName As String) As String
    Dim boardStyleMappindDefData As CBoardStyleMappingDefData
    Dim boardNo As String
    If boardNoMap_.haskey(groupName) Then
        Set boardStyleMappindDefData = boardStyleMappingDefMap_.GetAt(groupName)
        boardNo = boardStyleMappindDefData.autoFillInColumnName
        getBoardNoColumnLetterByGroupName = boardStyleMappindDefData.getColumnNamePositionLetter(boardNo)
    Else
        getBoardNoColumnLetterByGroupName = ""
    End If
End Function

Public Function getBoardNoStringByGroupName(ByRef groupName As String) As String
    Dim boardNoString As String
    boardNoString = ""
    If boardNoMap_.haskey(groupName) Then
        boardNoString = boardNoMap_.GetAt(groupName)
    End If
    getBoardNoStringByGroupName = boardNoString
End Function

Private Sub initGroupNameBoardNoMap(ByRef groupName As String)
    Dim autoFillInColumnName As String
    Dim boardStyleMappingDefData As CBoardStyleMappingDefData
    
    Set boardStyleMappingDefData = boardStyleMappingDefMap_.GetAt(groupName)
    autoFillInColumnName = boardStyleMappingDefData.autoFillInColumnName
    
    If autoFillInColumnName <> "" Then
        Call boardNoMap_.SetAt(groupName, "")
    End If
End Sub

Public Sub generateCurrentGroupNameBoardNoMap()
    'If boardNoMap_ Is Nothing Then Call init
    Call init '|ff||fffd||3b6||fffd|init,|fffd||537||fffd||fffd||fffd||fffd||435||135||fffd||fffd||fffd||fffd||171||fffd||fffd||fffd||57a||fffd||f5||fffd||fffd||fffd||fffd||fffd||fffd||6b2||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim groupName As Variant
    For Each groupName In boardNoMap_.KeyCollection
        Call updateGroupNameBoardNoMap(CStr(groupName))
    Next groupName
End Sub

Private Sub updateGroupNameBoardNoMap(ByRef groupName As String)
    Dim autoFillInColumnName As String
    Dim groupNameStartRowNumber As Long, groupNameEndRowNumber As Long
    Dim boardStyleMappingDefData As CBoardStyleMappingDefData
    Dim boardNoColumLetter As String
    Dim boardNoString As String
    
    Set boardStyleMappingDefData = boardStyleMappingDefMap_.GetAt(groupName)
    autoFillInColumnName = boardStyleMappingDefData.autoFillInColumnName
    
    If autoFillInColumnName <> "" Then
        Call getGroupNameStartAndEndRowNumber(groupName, groupNameStartRowNumber, groupNameEndRowNumber)
        boardNoColumLetter = boardStyleMappingDefData.getColumnNamePositionLetter(autoFillInColumnName)
        boardNoString = getBoardNoString(boardNoColumLetter, groupNameStartRowNumber + 2, groupNameEndRowNumber)
        Call boardNoMap_.SetAt(groupName, boardNoString)
    End If
End Sub

Private Function getBoardNoString(ByVal columnLetter As String, ByVal startRowNumber As Long, ByVal endRowNumber As Long)
    Dim RowNumber As Long
    Dim boardNo As String, eachBoardNo As String
    Dim boardNoRange As Range
    boardNo = ""
    For RowNumber = startRowNumber To endRowNumber
        Set boardNoRange = currentSheet.Range(columnLetter & RowNumber)
        eachBoardNo = Trim(boardNoRange.value)
        If eachBoardNo <> "" Then
            boardNo = boardNo & eachBoardNo & delimiter
            Call boardNoAddressMap_.SetAt(eachBoardNo, boardNoRange.address(False, False)) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||17a||376||fffd||4e6||fffd||fffd||5b7||fffd||fffd||fffd||bd||fffd|Map|fffd||fffd|
        End If
    Next RowNumber
    If boardNo <> "" Then boardNo = Left(boardNo, Len(boardNo) - 1)
    getBoardNoString = boardNo
End Function

Public Sub getNewBoardNo(ByRef inputboardNo As String)
    Dim boardNoStringCollection As Collection
    Set boardNoStringCollection = boardNoMap_.ValueCollection
    Dim boardNoString As Variant
    Dim boardNoIndexUsableFlag As Boolean
    Dim tempBoardNo As String
    Dim boardNoIndex As Long
    
    For boardNoIndex = 1 To MaxBoardNoIndex_
        boardNoIndexUsableFlag = True
        tempBoardNo = inputboardNo & boardNoIndex
        For Each boardNoString In boardNoStringCollection
            If InStr(boardNoString, tempBoardNo) <> 0 Then
                'maxBoardNoIndex = getMaxBoardNoIndex(CStr(boardNoString), tempBoardNo, maxBoardNoIndex)
                boardNoIndexUsableFlag = False
                Exit For
            End If
        Next boardNoString
        
        If boardNoIndexUsableFlag = True Then
            inputboardNo = tempBoardNo
            Exit Sub
        End If
    Next boardNoIndex
End Sub

Public Sub addNewBoardNo(ByRef groupName As String, ByRef newBoardNo As String)
    Dim boardNoString As String
    boardNoString = boardNoMap_.GetAt(groupName)
    If boardNoString = "" Then
        boardNoString = boardNoString & newBoardNo
    Else
        boardNoString = boardNoString & delimiter & newBoardNo
    End If
    'Call eraseLastChar(boardNoString)
    Call boardNoMap_.SetAt(groupName, boardNoString)
End Sub

'|fffd||f5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b5||fffd||52a||fffd||fffd||fffd||5b7|
Public Function getBoardNoAddress(ByRef boardNo As String) As String
    getBoardNoAddress = ""
    If boardNoAddressMap_.haskey(boardNo) Then
        getBoardNoAddress = boardNoAddressMap_.GetAt(boardNo)
    End If
End Function
Attribute VB_Name = "CBoardStyleData"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private boardStyleMappingDefMap_ As CMapValueObject
Private mocNameGroupNameMap_ As CMap 'key: mocName-value: groupName
Private Const NeedFillFlag_ As String = "Yes"
Private Const NeedFillTitle_ As String = "ShowInBoardStyle"
Private Const delimiter_ As String = "-"
'Private needFillColumnLetter_ As String

Public Function getBoardStyleMappingDefMap() As CMapValueObject
    Set getBoardStyleMappingDefMap = boardStyleMappingDefMap_
End Function

Public Sub init()
    Call initBoardStyleMappingDefMap
    Call initBoardStyleRelationDef
    Call initBoardStyleColumnLetter
End Sub

Public Function getGroupNameByMocName(ByRef mocName As String) As String
    getGroupNameByMocName = ""
    If mocNameGroupNameMap_.haskey(mocName) Then
        getGroupNameByMocName = mocNameGroupNameMap_.GetAt(mocName)
    End If
End Function

Private Sub initBoardStyleColumnLetter()
    Dim boardStyleSheet As Worksheet
    Set boardStyleSheet = getBoardStyleSheet
    Dim groupName As Variant
    Dim groupNameRowNumber As Long
    Dim boardStyleMappingDefData As CBoardStyleMappingDefData
    
    For Each groupName In boardStyleMappingDefMap_.KeyCollection
        groupNameRowNumber = getGroupNameStartRowNumber(boardStyleSheet, CStr(groupName))
        Set boardStyleMappingDefData = boardStyleMappingDefMap_.GetAt(groupName)
        Call boardStyleMappingDefData.updateColumnNamePositionLetterMap(boardStyleSheet, groupNameRowNumber + 1)
    Next groupName
End Sub

Private Function getBoardStyleSheet() As Worksheet
    Dim boardStyleSheetName As String
    boardStyleSheetName = getResByKey("Board Style")
    If containsASheet(ThisWorkbook, boardStyleSheetName) Then
        Set getBoardStyleSheet = ThisWorkbook.Worksheets(boardStyleSheetName)
    Else
        Set getBoardStyleSheet = ThisWorkbook.Worksheets(boardStyleSheetName & "_1")
    End If
End Function

Private Sub initBoardStyleMappingDefMap()
    Dim mappingDefSheet As Worksheet
    Set mappingDefSheet = ThisWorkbook.Worksheets("MAPPING DEF")
    'needFillColumnLetter_ = getColStr(findCertainValColumnNumber(mappingDefSheet, 1, NeedFillTitle_))
    
    Dim sheetName As String, groupName As String, columnName As String, mocName As String, attributeName As String
    Dim neType As String, needFillStr As String
    Dim RowNumber As Long
    
    For RowNumber = 2 To mappingDefSheet.Range("a65536").End(xlUp).row
        Call clearMappingDefEachRowData(sheetName, groupName, columnName, mocName, attributeName)
        Call getMappingDefEachRowData(sheetName, groupName, columnName, mocName, attributeName, mappingDefSheet, RowNumber)
        
        If sheetName = getResByKey("Board Style") Then
            Call addEachRowDataToMappingDefMap(groupName, columnName, mocName, attributeName)
            Call makeMocNameGroupNameMap(groupName, mocName)
        End If
    Next RowNumber
End Sub

Private Function includeColumnName(ByRef columnName As String) As Boolean
    Dim mappingDefSheet As Worksheet
    Set mappingDefSheet = ThisWorkbook.Worksheets("MAPPING DEF")
    
    Dim columnNameInMappingDef As String
    Dim RowNumber As Long
    includeColumnName = False
    
    For RowNumber = 2 To mappingDefSheet.Range("a65536").End(xlUp).row
        columnNameInMappingDef = ""
        columnNameInMappingDef = mappingDefSheet.Range("C" & RowNumber).value
        
        If columnNameInMappingDef = columnName Then
            includeColumnName = True
            Exit For
        End If
    Next RowNumber
End Function

Private Sub makeMocNameGroupNameMap(ByRef groupName As String, ByRef mocName As String)
    If mocName <> "" And Not mocNameGroupNameMap_.haskey(mocName) Then
        Call mocNameGroupNameMap_.SetAt(mocName, groupName)
    End If
End Sub

Private Sub addEachRowDataToMappingDefMap(ByRef groupName As String, ByRef columnName As String, ByRef mocName As String, _
    ByRef attributeName As String)
    Dim boardStyleMappingDefData As CBoardStyleMappingDefData
    If boardStyleMappingDefMap_.haskey(groupName) Then
        Set boardStyleMappingDefData = boardStyleMappingDefMap_.GetAt(groupName)
        Call boardStyleMappingDefData.addData(groupName, columnName, mocName, attributeName)
    Else
        Set boardStyleMappingDefData = New CBoardStyleMappingDefData
        Call boardStyleMappingDefData.addData(groupName, columnName, mocName, attributeName)
        Call boardStyleMappingDefMap_.SetAt(groupName, boardStyleMappingDefData)
    End If
End Sub

Private Sub getMappingDefEachRowData(ByRef sheetName As String, ByRef groupName As String, ByRef columnName As String, ByRef mocName As String, _
    ByRef attributeName As String, ByRef mappingDefSheet As Worksheet, ByRef RowNumber As Long)
    sheetName = mappingDefSheet.Range("A" & RowNumber).value
    groupName = mappingDefSheet.Range("B" & RowNumber).value
    columnName = mappingDefSheet.Range("C" & RowNumber).value
    mocName = mappingDefSheet.Range("D" & RowNumber).value
    attributeName = mappingDefSheet.Range("E" & RowNumber).value
    'needFillStr = mappingDefSheet.Range(needFillColumnLetter_ & rowNumber).value
End Sub

Private Sub clearMappingDefEachRowData(ByRef sheetName As String, ByRef groupName As String, ByRef columnName As String, ByRef mocName As String, _
    ByRef attributeName As String)
    sheetName = ""
    groupName = ""
    columnName = ""
    mocName = ""
    attributeName = ""
End Sub

Private Sub initBoardStyleRelationDef()
    Dim relationDefSheet As Worksheet
    Set relationDefSheet = ThisWorkbook.Worksheets("RELATION DEF")
    Dim sheetName As String, groupName As String, columnName As String, mocName As String, attributeName As String
    Dim isVisible As String, isMocAttribute As String, referenceMoc As String, referenceKey As String, needFillIn As String, needClearIn As String
    
    Dim RowNumber As Long
    
    For RowNumber = 2 To relationDefSheet.Range("a65536").End(xlUp).row
        Call clearRelationDefEachRowData(sheetName, groupName, columnName, mocName, attributeName, isVisible, isMocAttribute, referenceMoc, referenceKey, needFillIn, needClearIn)
        Call getRelationDefEachRowData(sheetName, groupName, columnName, mocName, attributeName, isVisible, isMocAttribute, referenceMoc, referenceKey, needFillIn, needClearIn, relationDefSheet, RowNumber)
        
        If sheetName = getResByKey("Board Style") Then
            Call updateRelationDefRowData(groupName, columnName, mocName, attributeName, isVisible, isMocAttribute, referenceMoc, referenceKey, needFillIn, needClearIn)
        End If
        
    Next RowNumber
End Sub

Private Sub updateRelationDefRowData(ByRef predefinedGroupName As String, ByRef predefinedColumnName As String, ByRef mocName As String, _
    ByRef attributeName As String, ByRef isVisible As String, ByRef isMocAttribute As String, ByRef referenceMoc As String, _
    ByRef referenceKey As String, ByRef needFillIn As String, ByRef needClearIn As String)
    
    'If Not boardStyleMappingDefMap_.haskey(groupName) Then Exit Sub
    If Not mocNameGroupNameMap_.haskey(mocName) Then Exit Sub
    
    Dim groupName As String, columnName As String
    groupName = mocNameGroupNameMap_.GetAt(mocName)
    
    Dim boardStyleMappingDefData As CBoardStyleMappingDefData
    Set boardStyleMappingDefData = boardStyleMappingDefMap_.GetAt(groupName)
    
    columnName = boardStyleMappingDefData.getColumnNameByAttributeName(attributeName)
    
    If columnName = "" Then
        columnName = predefinedColumnName
    End If
    
    If isVisible = "True" And isMocAttribute = "False" And referenceKey = "" Then
        Call boardStyleMappingDefData.updateAutoFillInColumnName(columnName, attributeName)
    ElseIf isVisible = "True" And isMocAttribute = "False" And referenceKey <> "" Then
        Call boardStyleMappingDefData.updateListboxReferenceKeyMap(columnName, makeReferenceMocKey(referenceMoc, referenceKey))
    End If
    
    If needFillIn = "Y" Then
        Call boardStyleMappingDefData.updateNeedFillInColumnNameCol(columnName)
    End If
    
    If needClearIn = "Y" Then
        Call boardStyleMappingDefData.updateNeedClearInColumnNameCol(columnName)
    End If
End Sub

Private Function makeReferenceMocKey(ByRef referenceMoc As String, ByRef referenceKey As String)
    makeReferenceMocKey = referenceMoc & delimiter_ & referenceKey
End Function

Private Sub getRelationDefEachRowData(ByRef sheetName As String, ByRef groupName As String, ByRef columnName As String, _
    ByRef mocName As String, ByRef attributeName As String, ByRef isVisible As String, ByRef isMocAttribute As String, ByRef referenceMoc As String, _
    ByRef referenceKey As String, ByRef needFillIn As String, ByRef needClearIn As String, ByRef relationDefSheet As Worksheet, ByRef RowNumber As Long)
    sheetName = relationDefSheet.Range("A" & RowNumber).value
    groupName = relationDefSheet.Range("B" & RowNumber).value
    columnName = relationDefSheet.Range("C" & RowNumber).value
    mocName = relationDefSheet.Range("F" & RowNumber).value
    attributeName = relationDefSheet.Range("G" & RowNumber).value
    isVisible = relationDefSheet.Range("D" & RowNumber).value
    isMocAttribute = relationDefSheet.Range("E" & RowNumber).value
    referenceMoc = relationDefSheet.Range("J" & RowNumber).value
    referenceKey = relationDefSheet.Range("K" & RowNumber).value
    needFillIn = relationDefSheet.Range("M" & RowNumber).value
    needClearIn = relationDefSheet.Range("N" & RowNumber).value
End Sub

Private Sub clearRelationDefEachRowData(ByRef sheetName As String, ByRef groupName As String, ByRef columnName As String, ByRef mocName As String, _
    ByRef attributeName As String, ByRef isVisible As String, ByRef isMocAttribute As String, ByRef referenceMoc As String, ByRef referenceKey As String, _
    ByRef needFillIn As String, ByRef needClearIn As String)
    sheetName = ""
    groupName = ""
    columnName = ""
    mocName = ""
    attributeName = ""
    isVisible = ""
    isMocAttribute = ""
    referenceMoc = ""
    referenceKey = ""
    needFillIn = ""
    needClearIn = ""
End Sub

Private Sub Class_Initialize()
    Set boardStyleMappingDefMap_ = New CMapValueObject
    Set mocNameGroupNameMap_ = New CMap
End Sub


Attribute VB_Name = "CBoardStyleMappingDefData"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mocName_ As String 'moc|fffd||fffd||fffd||fffd||fffd||fffd|
Private groupName_ As String 'groupName
'Private attributeNameCol_ As Collection '|fffd||fffd||fffd||536||fffd||fffd||fffd||fffd||fffd|
'Private displayAttributeNameCol_ As Collection '|fffd||fffd||4aa||fffd||fffd||2be||fffd||fffd||fffd||fffd||fffd||536||fffd||fffd||fffd||fffd||fffd|
Private columnNameCol_ As Collection '|fffd||fffd||fffd||fffd||22b||fffd||fffd|, |fffd||536||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3aa|Key
Private columnNamePositionLetterMap_ As CMap '|ff||4bb||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b5||fffd|ColumnLetter Map
Private needFillColumnNameCol_ As Collection '|fffd||fffd||4aa||fffd||fffd||2be||fffd||fffd||fffd||fffd||fffd||fffd||22b||fffd||fffd|
Private needClearColumnNameCol_ As Collection '|fffd||fffd||4aa||fffd||fffd||2be||fffd||fffd||fffd||fffd||fffd||fffd||22b||fffd||fffd|
'Private hasBoardNoFlag_ As Boolean
Private autoFillInColumnName_ As String
Private autoFillInColumnNameSourceAttributes_ As String
Private listboxReferenceKeyMap_ As CMap '|fffd||fffd|Reference Moc|fffd||fffd|Reference Key|fffd||fffd||3aa|value

Public Function getColumnNameByAttributeName(ByRef attributeName As String) As String
    If Contains(columnNameCol_, attributeName) Then
        getColumnNameByAttributeName = columnNameCol_(attributeName)
    Else
        getColumnNameByAttributeName = ""
    End If
End Function

Public Function getColumnNamePositionLetter(ByRef columnName As String) As String
    getColumnNamePositionLetter = columnNamePositionLetterMap_.GetAt(columnName)
End Function

Public Sub updateColumnNamePositionLetterMap(ByRef ws As Worksheet, ByRef RowNumber As Long)
    Dim columnNumber As Long
    Dim columnName As String, columnLetter As String
    For columnNumber = 1 To ws.Range("IV" & RowNumber).End(xlToLeft).column
        columnName = ws.Cells(RowNumber, columnNumber).value
        columnLetter = getColStr(columnNumber)
        Call columnNamePositionLetterMap_.SetAt(columnName, columnLetter)
    Next columnNumber
End Sub

Public Property Get groupName() As String
    groupName = groupName_
End Property

Public Property Get columnNamePositionLetterMap() As CMap
    Set columnNamePositionLetterMap = columnNamePositionLetterMap_
End Property

Public Property Get needFillColumnNameCol() As Collection
    Set needFillColumnNameCol = needFillColumnNameCol_
End Property

Public Property Get needClearColumnNameCol() As Collection
    Set needClearColumnNameCol = needClearColumnNameCol_
End Property

Public Property Get totalColumnNumber() As Long
    totalColumnNumber = columnNamePositionLetterMap_.count
End Property

Public Property Get autoFillInColumnName() As String
    autoFillInColumnName = autoFillInColumnName_
End Property

Public Property Get autoFillInColumnNameSourceAttributes() As String
    autoFillInColumnNameSourceAttributes = autoFillInColumnNameSourceAttributes_
End Property

Public Sub updateAutoFillInColumnName(ByRef columnName As String, ByRef attributeName As String)
    autoFillInColumnName_ = columnName
    autoFillInColumnNameSourceAttributes_ = getAttributeLongNameString(attributeName)
End Sub

Private Function getAttributeLongNameString(ByRef attruteName As String)
    Dim attributeLongNameString As String
    attributeLongNameString = ""
    Dim delimiter As String
    delimiter = ","
    Dim attributesArray As Variant, eachAttribute As Variant
    attributesArray = Split(attruteName, delimiter)
    For Each eachAttribute In attributesArray
        attributeLongNameString = attributeLongNameString & columnNameCol_(eachAttribute) & delimiter
    Next eachAttribute
    attributeLongNameString = Left(attributeLongNameString, Len(attributeLongNameString) - 1)
    getAttributeLongNameString = attributeLongNameString
End Function

Public Function getListBoxReferenceValue(ByRef columnName) As String
    Dim referenceValue As String
    If listboxReferenceKeyMap_.haskey(columnName) Then
        referenceValue = listboxReferenceKeyMap_.GetAt(columnName)
    Else
        referenceValue = ""
    End If
    getListBoxReferenceValue = referenceValue
End Function

Public Sub updateListboxReferenceKeyMap(ByRef columnName As String, ByRef key As String)
    Call listboxReferenceKeyMap_.SetAt(columnName, key)
End Sub

Public Function hasListBoxColumns() As Boolean
    hasListBoxColumns = True
    If listboxReferenceKeyMap_.isEmpty Then hasListBoxColumns = False
End Function

Public Function getListBoxReferencKeyMap() As CMap
    Set getListBoxReferencKeyMap = listboxReferenceKeyMap_
End Function

Public Sub updateNeedFillInColumnNameCol(ByRef columnName As String)
    needFillColumnNameCol_.Add Item:=columnName
End Sub

Public Sub updateNeedClearInColumnNameCol(ByRef columnName As String)
    needClearColumnNameCol_.Add Item:=columnName
End Sub

Public Sub addData(ByRef groupName As String, ByRef columnName As String, ByRef mocName As String, _
    ByRef attributeName As String)
    If mocName_ = "" Then mocName_ = mocName
    groupName_ = groupName
    If attributeName = "" Then
        columnNameCol_.Add Item:=columnName, key:=columnName
    Else
        columnNameCol_.Add Item:=columnName, key:=attributeName
    End If
'
'    If UCase(needFillStr) = "YES" Then
'        needFillColumnNameCol_.Add Item:=columnName
'    End If
    
End Sub

Private Sub Class_Initialize()
    Set columnNameCol_ = New Collection
    Set columnNamePositionLetterMap_ = New CMap
    Set needFillColumnNameCol_ = New Collection
    Set needClearColumnNameCol_ = New Collection
    Set listboxReferenceKeyMap_ = New CMap
End Sub
Attribute VB_Name = "CBoardStyleSheetNumberChange"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Const delimiter_ As String = "_"
Private boardStyleSheetPrefix_ As String
Private baseBoardStyleSheetName_ As String

Public Sub keepOneBaseBoardStyleSheet()
    Dim sheet As Worksheet, sheetName As String
    For Each sheet In ThisWorkbook.Worksheets
        sheetName = sheet.name
        If InStr(sheetName, boardStyleSheetPrefix_) <> 0 Then
            If sheetName <> boardStyleSheetPrefix_ And sheetName <> baseBoardStyleSheetName_ Then
                Call deleteCertainSheet(ThisWorkbook, sheetName)
            Else
                Call renameCertainSheet(ThisWorkbook, sheetName, baseBoardStyleSheetName_)
            End If
        End If
    Next sheet
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5e2||fffd||fffd||421||fffd||13f||fffd||fffd||639||631||563||fffd||fffd||fffd||7fa||fffd||fffd||fffd||fffd||fffd||fffd||fffd||27e||fffd||fffd||fffd||435||fffd||427||fffd||fffd|
    Dim baseBoardStyleSheet As Worksheet
    Set baseBoardStyleSheet = ThisWorkbook.Worksheets(baseBoardStyleSheetName_)
    Dim maxRowNumber As Long, maxColumnNumber As Long
    maxRowNumber = baseBoardStyleSheet.Range("A65536").End(xlUp).row
    maxColumnNumber = baseBoardStyleSheet.UsedRange.Columns.count
    Call refreshComment(baseBoardStyleSheet.Range(baseBoardStyleSheet.Cells(1, 1), baseBoardStyleSheet.Cells(maxRowNumber, maxColumnNumber)))
End Sub

Public Sub addBoardStyleSheets(ByVal sheetNumber As Long)
    If sheetNumber >= 2 Then
        Call copyBoardStyleSheet(sheetNumber)
        'Call copyBoardStyleDefSheet(sheetNumber, ThisWorkbook.Worksheets("MAPPING DEF"), "A")
        'Call copyBoardStyleDefSheet(sheetNumber, ThisWorkbook.Worksheets("SHEET DEF"), "A")
        'Call copyBoardStyleDefSheet(sheetNumber, ThisWorkbook.Worksheets("CONTROL DEF"), "G")
    End If
End Sub

Private Sub copyBoardStyleSheet(ByVal sheetNumber As Long)
    Dim k As Long
    Dim baseSheet As Worksheet
    
    hyperLintFlag = False
    
    For k = 2 To sheetNumber
        Set baseSheet = ThisWorkbook.Worksheets(baseBoardStyleSheetName_)
        baseSheet.Copy after:=baseSheet
        'Set baseSheet = ThisWorkbook.ActiveSheet
        
        ThisWorkbook.ActiveSheet.name = boardStyleSheetPrefix_ & delimiter_ & CStr(k)
    Next k
    
    Dim shtname As String
    For k = 2 To sheetNumber
        Dim l As Long
        l = sheetNumber - k + 2
        shtname = boardStyleSheetPrefix_ & delimiter_ & CStr(l)
        Set baseSheet = ThisWorkbook.Worksheets(shtname)
        baseSheet.name = boardStyleSheetPrefix_ & CStr(k)
    Next k
    
    For k = 2 To sheetNumber
        shtname = boardStyleSheetPrefix_ & CStr(k)
        Set baseSheet = ThisWorkbook.Worksheets(shtname)
        baseSheet.name = boardStyleSheetPrefix_ & delimiter_ & CStr(k)
    Next k
    
    hyperLintFlag = True
End Sub

Private Sub copyBoardStyleDefSheet(ByVal sheetNumber As Long, ByRef ws As Worksheet, ByRef columnLetter As String)
    Dim maxRowNumber As Long, RowNumber As Long, currentRowNumber As Long
    maxRowNumber = ws.Range("a65536").End(xlUp).row
    currentRowNumber = maxRowNumber + 1
    For RowNumber = 2 To maxRowNumber
        If baseBoardStyleSheetName_ = ws.Range(columnLetter & RowNumber).value Then
            Call copyBaseBoardStyleRowAndRename(ws, RowNumber, currentRowNumber, columnLetter, sheetNumber)
            currentRowNumber = currentRowNumber + sheetNumber - 1
        End If
    Next RowNumber
End Sub

Private Sub copyBaseBoardStyleRowAndRename(ByRef ws As Worksheet, ByVal srcRowNumber As Long, _
    ByVal dstRowNumber As Long, ByRef columnLetter As String, ByVal sheetNumber As Long)
    Dim k As Long
    ws.rows(srcRowNumber).Copy
    ws.Paste Destination:=ws.rows(dstRowNumber & ":" & dstRowNumber + sheetNumber - 2) '|4bb||fffd||fffd||fffd||53f||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4b3||1e9||fffd||fffd||fffd||423||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For k = 2 To sheetNumber
        ws.Range(columnLetter & dstRowNumber).value = boardStyleSheetPrefix_ & delimiter_ & k
        dstRowNumber = dstRowNumber + 1
    Next k
End Sub

Private Sub deleteRowsInCertainSheet(ByRef ws As Worksheet, ByRef sheetName, ByRef columnLetter As String)
    Dim RowNumber As Long
    For RowNumber = 2 To ws.UsedRange.rows.count
        If sheetName = ws.Range(columnLetter & RowNumber).value Then
            ws.rows(RowNumber).Delete
            RowNumber = RowNumber - 1
        End If
    Next RowNumber
End Sub

Private Sub deleteCertainSheet(ByRef wb As Workbook, ByRef sheetName As String)
    wb.Worksheets(sheetName).Delete
    'Call deleteRowsInCertainSheet(wb.Worksheets("MAPPING DEF"), sheetName, "A")
    'Call deleteRowsInCertainSheet(wb.Worksheets("SHEET DEF"), sheetName, "A")
    'Call deleteRowsInCertainSheet(wb.Worksheets("CONTROL DEF"), sheetName, "G")
End Sub

Private Sub renameSheetInCertainSheet(ByRef ws As Worksheet, ByRef oldSheetName As String, ByRef newSheetName As String, ByRef columnLetter As String)
    Dim RowNumber As Long
    Dim sheetNameRange As Range
    For RowNumber = 2 To ws.UsedRange.rows.count
        Set sheetNameRange = ws.Range(columnLetter & RowNumber)
        If oldSheetName = sheetNameRange.value Then
            sheetNameRange.value = newSheetName
        End If
    Next RowNumber
End Sub

Private Sub renameCertainSheet(ByRef wb As Workbook, ByRef oldSheetName As String, ByRef newSheetName As String)
    wb.Worksheets(oldSheetName).name = newSheetName
    'Call renameSheetInCertainSheet(wb.Worksheets("MAPPING DEF"), oldSheetName, newSheetName, "A")
    'Call renameSheetInCertainSheet(wb.Worksheets("SHEET DEF"), oldSheetName, newSheetName, "A")
    'Call renameSheetInCertainSheet(wb.Worksheets("CONTROL DEF"), oldSheetName, newSheetName, "G")
End Sub

Private Sub Class_Initialize()
    boardStyleSheetPrefix_ = getResByKey("Board Style")
     baseBoardStyleSheetName_ = boardStyleSheetPrefix_ & delimiter_ & "1"
End Sub
Attribute VB_Name = "CBranchMatchChecker"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private controlAttrValueManager_ As CControlAttrValueManager '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||775||139||fffd||fffd||fffd||fffd||fffd|
Private controlInfo_ As String 'XML|fffd||fffd||fffd||fffd||3e2|
Private oneBranchMatchFlag_ As Boolean '|fffd||1f7||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||5a7||1a5||fffd||fffd||131||fffd||5be|
Private matchBranchXml_ As String '|1a5||fffd||fffd||137||fffd||5a7|xml|fffd||fffd||3e2||fffd||fffd||fffd||fffd||fffd||6b6||535||fffd||1f0||fffd||fffd||fffd||fffd||5b5||fffd||fffd||423||fffd||fffd|
Private matchBranchNode_ As Variant '|1a5||fffd||fffd||fffd|Branch|fffd||6b5||38ec||fffd||1f7||fffd||fffd||fffd||fffd||fa||fffd||fffd||fffd||fffd||67f||fffd|

Public Sub init(ByRef controlAttrValueManager As CControlAttrValueManager, ByRef controlInfo As String)
    Set controlAttrValueManager_ = controlAttrValueManager
    controlInfo_ = controlInfo
End Sub

'|fffd||f5||fffd||1a5||fffd||fffd||fffd||5a7||fffd||6b5||fffd|
Public Function getMatchBranchNode() As Variant
    Set getMatchBranchNode = matchBranchNode_
End Function

'|fffd||fffd||1a5||fffd||fffd||fffd||5a7||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||5b5||fffd||1f7||fffd||3aa||fffd||563||fffd||4aa||fffd||fffd|oneBranchMatchFlag_|3aa|True
Public Function getMatchBranchAttrEmptyFlag() As Boolean
    getMatchBranchAttrEmptyFlag = False
    If oneBranchMatchFlag_ = False Then
        getMatchBranchAttrEmptyFlag = True
        Exit Function '|fffd||fffd||fffd||1a5||fffd||fffd||fffd||5a7||3aa|false|fffd||fffd||2f5||fffd||fffd||fb||fffd||fffd||1a5||fffd||48ec||fffd||676||fffd||133||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||3aa||fffd||563||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If
    Dim controlAttrValue As CControlAttrValue
    Dim equalsNode As Variant
    Dim attributeName As String
    
    For Each equalsNode In matchBranchNode_.GetElementsByTagName("Equals")
        attributeName = equalsNode.getAttribute("attribute") '|fffd||f5||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set controlAttrValue = controlAttrValueManager_.getControlAttrValue(attributeName) '|fffd||f5||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||5b5||fffd||fffd||fffd||375||fffd||fffd||fffd|
        If controlAttrValue.valueEmptyFlag = True Then '|fffd||fffd||1a5||fffd||fffd||fffd||5a7||fffd||fffd||ff||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||5b5||fffd||1f7||fffd||3aa||fffd||fffd|
            getMatchBranchAttrEmptyFlag = True
            Exit Function
        End If
    Next equalsNode
End Function

Public Function getOneBranchMatchFlag() As Boolean
    Dim xmlDoc As Variant
    Set xmlDoc = CreateObject("MSXML2.DOMDocument")
    xmlDoc.LoadXML (controlInfo_)
    
    Dim root As Variant
    Set root = xmlDoc.DocumentElement
    
    oneBranchMatchFlag_ = checkOneConditionMatch(root)
    getOneBranchMatchFlag = oneBranchMatchFlag_
End Function

'|fffd||2f2||fffd||4bb||fffd||fffd||fffd||fffd||5a7||fffd||fffd||fffd|Equals|fffd||fffd||fffd||1f7||fffd||fffd||fffd||1a5||fffd||fffd||fffd||fffd||fffd|
Private Function checkOneBranchItemMatch(ByRef rootNode As Variant) As Boolean
    checkOneBranchItemMatch = False
    
    Dim attributeName As String
    
    Dim controlAttrValue As CControlAttrValue
    Dim xmlInfo As String
    
    Dim equalsNode As Variant
    For Each equalsNode In rootNode.SelectNodes("Equals")
        attributeName = equalsNode.getAttribute("attribute") '|fffd||f5||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set controlAttrValue = controlAttrValueManager_.getControlAttrValue(attributeName) '|fffd||f5||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||5b5||fffd||fffd||fffd||375||fffd||fffd||fffd|
        checkOneBranchItemMatch = controlAttrValue.checkAttrValidation(equalsNode) '|fffd||fffd||fffd||fffd||1f0||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||6b5||3d2b||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||8ec||fffd||fffd||fffd||fffd||1a5||fffd||fffd||fffd||423||fffd||fffd|
        
        If checkOneBranchItemMatch = True Then Exit Function
    Next equalsNode
End Function

'|fffd||2f2||fffd||fffd||fffd|Condition|fffd||1f7||fffd||36c||2b1||1a5||fffd||48ec||4bb||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5bb||fffd||fffd||4bb||fffd||fffd|Condition
Private Function checkAllConditionMatch(ByRef rootNode As Variant) As Boolean
    Dim matchFlag As Boolean, conditionMatchFlag As Boolean
    matchFlag = True
    Dim conditionNode As Variant
    For Each conditionNode In rootNode.SelectNodes("Condition")
        conditionMatchFlag = checkOneConditionMatch(conditionNode)
        matchFlag = matchFlag And conditionMatchFlag
    Next conditionNode
    checkAllConditionMatch = matchFlag
End Function

'|fffd||2f2||fffd||4bb||fffd||fffd||fffd||fffd||5a7||fffd||1f7||fffd||1a5||fffd||fffd|
Private Function checkOneBranchMatch(ByRef rootNode As Variant) As Boolean
    Dim enumItemNode As Variant
    Dim currentBrachEnumItemMatchFlag As Boolean, allConditionMatchFlag As Boolean
    currentBrachEnumItemMatchFlag = checkOneBranchItemMatch(rootNode) '|fffd||fffd||1f0||fffd||fffd||5a7||fffd||fffd||fffd||4fd||6b5||fffd|equals|5b5||fffd||1f7||fffd||1a5||fffd||fffd|
    allConditionMatchFlag = checkAllConditionMatch(rootNode) '|fffd||fffd||fffd||435||fffd|Condition|fffd||fffd||5a7||fffd||1f7||fffd||36c||2b1||fffd||fffd||fffd||fffd|
    checkOneBranchMatch = currentBrachEnumItemMatchFlag And allConditionMatchFlag '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||38ec||fffd||fffd||1f0||fffd||fffd||5a7||1a5||fffd||fffd||279||fffd|
End Function

'|fffd||fffd||fffd||4bb||fffd||fffd|Condition|fffd||1f7||fffd||1a5||fffd||fffd|
Private Function checkOneConditionMatch(ByRef rootNode As Variant) As Boolean
    checkOneConditionMatch = False
    Dim branchMatchFlag As Boolean
    Dim branchNode As Variant
    For Each branchNode In rootNode.SelectNodes("Branch") 'rootNode.ChildNodes
        branchMatchFlag = checkOneBranchMatch(branchNode)
        If branchMatchFlag = True Then
            checkOneConditionMatch = True
            matchBranchXml_ = branchNode.XML
            Set matchBranchNode_ = branchNode '|fffd||f5||fffd||1a5||fffd||fffd||fffd||5a7||fffd||fffd|Branch|fffd||6b5||fffd|
            Exit Function
        End If
    Next branchNode
End Function

Private Sub Class_Initialize()
    oneBranchMatchFlag_ = False
End Sub
Attribute VB_Name = "CChangeVersion"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Function changeVersion(ByRef wb As Workbook, ByRef newVersion As String, Optional ByRef neType As String = "Base Station") As Boolean
    changeVersion = True
    Dim coverName As String
    coverName = getCoverName(wb)
    With wb.Worksheets(coverName).Cells(3, 4)
        If Trim(.value) = newVersion Then
            changeVersion = False '|fffd||fffd||fffd||fffd||6c7e||fffd||fffd||fffd||fffd||36c||fffd||fffd||fffd||fffd||fb||fffd||fffd||fffd||7b8||130||6c7e||fffd||163||fffd||5b1||fffd||fffd||fffd||2f3||fffd||fffd||fffd||fffd||fffd||5be||fffd||fffd||3aa|False
            Exit Function
        End If
        .value = newVersion
    End With
    Call changeMappingDefVersion(wb, newVersion, neType)
End Function

Private Function getCoverName(ByRef wb As Workbook) As String
    getCoverName = "Cover"
    If containsASheet(wb, "|fffd||fffd||fffd||fffd|") Then
        getCoverName = "|fffd||fffd||fffd||fffd|"
    End If
End Function

Private Sub changeMappingDefVersion(ByRef wb As Workbook, ByRef newVersion As String, ByRef neType As String)
    Dim mappingDefSheet As Worksheet
    Set mappingDefSheet = wb.Worksheets("MAPPING DEF")
    
    Dim ucaseNeType As String
    ucaseNeType = UCase(neType)
    
    Dim RowNumber As Long
    For RowNumber = 2 To mappingDefSheet.Range("A65535").End(xlUp).row
        If UCase(mappingDefSheet.Range("L" & RowNumber).value) = ucaseNeType Then
            mappingDefSheet.Range("M" & RowNumber).value = newVersion
        End If
    Next RowNumber
End Sub
Attribute VB_Name = "CControlAttrValue"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private shortName_ As String '|fffd||fffd||fffd||fffd||fffd||fffd|
Private longName_ As String '|fffd||fffd||fffd||fffd||fffd||1a3||fffd||fffd||fffd||4b3||1e9||fffd||3f5||fffd||fffd||fffd||2be||fffd||fffd||fffd||fffd|
Private value_ As String '|fffd||f2||fffd||fffd||fffd||fffd||fffd||5b5|
Private valueType_ As String '|fffd||fffd||fffd||363||fffd|string/enum/uinteger|fffd||fffd|
Private matchFlag_ As Boolean

Private valueEmptyFlag_ As Boolean '|fffd||fffd||fffd||fffd||5b5||fffd||1f7||fffd||3aa||fffd||575||131||fffd||5be||3bb|
Private valueReferenceFlag_ As Boolean '|fffd||fffd||fffd||fffd||5b5||fffd||1f7||fffd||3aa||fffd||fffd||fffd||f5||131||fffd||5be||3bb|
Private valueCellGrayFlag_ As Boolean '|fffd||fffd||fffd||635||fffd||52a||fffd||fffd||fffd||1f7||fffd||3aa||fffd||4bb||fffd||fffd||131||fffd||5be||3bb|

Public Sub init(ByRef shortName As String, ByRef longName As String, ByRef value As String, ByRef valueType As String, _
    ByRef valueEmptyFlag As Boolean, ByRef valueReferenceFlag As Boolean, ByRef valueCellGrayFlag As Boolean)
    shortName_ = shortName
    longName_ = longName
    value_ = value
    valueType_ = valueType
    
    valueEmptyFlag_ = valueEmptyFlag
    valueReferenceFlag_ = valueReferenceFlag
    valueCellGrayFlag_ = valueCellGrayFlag
End Sub

Public Function checkAttrValidation(ByRef equalsNode As Variant) As Boolean
    If valueCellGrayFlag_ = True Then '|fffd||fffd||fffd||fffd||fffd||fffd||63b||4bb||fffd||fffd||fffd||fffd||fffd||f2||fffd||fffd||fffd||fffd||fffd||427||fffd||fffd||fffd||fffd||fffd||6b7||fffd||3a7||fffd||fffd|
        checkAttrValidation = False
        Exit Function
    ElseIf valueReferenceFlag_ = True Or (valueEmptyFlag_ = True And valueCellGrayFlag_ = False) Then '|fffd||fffd||fffd||fffd||fffd||52a||fffd||fffd||3aa||fffd||fffd||fffd||fb||a3a3f||fffd||fffd||4b7||1fb||4bb||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3f6||fffd||3aa||5b5||fffd||fffd||427|
        checkAttrValidation = True
        matchFlag_ = True
        Exit Function
    End If
    
    Dim validationFlag As Boolean
    Dim childNodes As Variant
    Set childNodes = equalsNode.childNodes
    
    '|4aa||423||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5bb||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5a3||fffd||fffd||fffd||fffd||fffd||22b||fffd||fffd||fffd||fffd||423||fffd||98ec||fffd||3f6||fffd||fffd||6b7||fffd||3a7||fffd||fffd|
    If valueType_ = "Enum" Then
        validationFlag = checkEnumValidation(childNodes)
    ElseIf valueType_ = "UInteger" Or valueType_ = "Integer" Then
        validationFlag = checkIntegerValidation(childNodes)
    ElseIf valueType_ = "String" Or valueType_ = "Password" Or valueType_ = "ATM" Then
        validationFlag = checkStringValidation(childNodes)
    Else
        validationFlag = True
    End If
    checkAttrValidation = validationFlag
    matchFlag_ = validationFlag
End Function

'|423||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||1f7||fffd||fffd||fffd||fffd|Branch|fffd||fffd||5a7||fffd||6b5||fffd||fffd||435||138||fffd||5b5|
Public Function checkABranchAttrValues(ByRef branchNode As Variant) As Boolean
    On Error GoTo ErrorHandler
    Dim validationFlag As Boolean
    If valueType_ = "Enum" Then
        validationFlag = checkEnumValidation(branchNode.SelectNodes("EnumItem")) 'EnumItem|fffd||fffd||f6||fffd||675||fffd||4bb||fffd||5b1||fffd||1e9|
        If validationFlag = False Then
            validationFlag = checkEnumValidation(branchNode.SelectNodes("BitEnumItem")) 'BitEnumItem|fffd||fffd||f6||fffd||675||135||6b6||fffd||fffd||5b1||fffd||1e9|
        End If
    ElseIf valueType_ = "UInteger" Or valueType_ = "Integer" Then
        validationFlag = checkIntegerValidation(branchNode.SelectNodes("NumBoundTrait")) 'NumBoundTrait|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||375||131||fffd||1e9|
    ElseIf valueType_ = "String" Or valueType_ = "Password" Or valueType_ = "ATM" Then
        validationFlag = checkStringValidation(branchNode.SelectNodes("StringLenTrait")) 'StringLenTrait|fffd||fffd||fffd||5b7||fffd||fffd||fffd||fffd||fffd||fffd||375||131||fffd||1e9|
    End If
    checkABranchAttrValues = validationFlag
    Exit Function
ErrorHandler: '|fffd||fffd||fffd||cce3||fffd||fffd||2f5||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||fffd||fffd||372||fffd||fffd||523||fffd||423||fffd||fffd||2a7||fffd||fffd|
    checkABranchAttrValues = False
End Function

Private Function checkEnumValidation(ByRef childNodes As Variant) As Boolean
    checkEnumValidation = False
    Dim enumItemNode As Variant
    For Each enumItemNode In childNodes
        If enumItemNode.getAttribute("name") = value_ Then 'if enumItemNode.nodeName = "EnumItem" or "BitEnumItem" then
            checkEnumValidation = True
            Exit Function
        End If
    Next enumItemNode
End Function

Private Function checkIntegerValidation(ByRef childNodes As Variant) As Boolean
    checkIntegerValidation = False
    Dim traitNode As Variant
    Dim minValue As Double
    Dim maxValue As Double
    For Each traitNode In childNodes
        minValue = CDbl(traitNode.getAttribute("min"))
        maxValue = CDbl(traitNode.getAttribute("max"))
        If CDbl(value_) <= maxValue And CDbl(value_) >= minValue Then
            checkIntegerValidation = True
            Exit Function
        End If
    Next traitNode
End Function

Private Function checkStringValidation(ByRef childNodes As Variant) As Boolean
    checkStringValidation = False
    Dim traitNode As Variant
    Dim minValue As Double
    Dim maxValue As Double
    For Each traitNode In childNodes
        minValue = CDbl(traitNode.getAttribute("min"))
        maxValue = CDbl(traitNode.getAttribute("max"))
        If Len(value_) <= maxValue And Len(value_) >= minValue Then
            checkStringValidation = True
            Exit Function
        End If
    Next traitNode
End Function

Property Get shortName() As String
    shortName = shortName_
End Property

Property Get valueEmptyFlag() As Boolean
    valueEmptyFlag = valueEmptyFlag_
End Property

Private Sub Class_Initialize()
    matchFlag_ = False
    valueEmptyFlag_ = False
    valueReferenceFlag_ = False
    valueCellGrayFlag_ = False
End Sub
Attribute VB_Name = "CControlAttrValueManager"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private controlAttrValueMap_ As New CMapValueObject '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||5b5||fffd||fffd|Map|fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3aa|Key

Public Sub addNewControlAttrValue(ByRef controlAttrValue As CControlAttrValue)
    If Not controlAttrValueMap_.haskey(controlAttrValue.shortName) Then
        Call controlAttrValueMap_.SetAt(controlAttrValue.shortName, controlAttrValue)
    End If
End Sub

Public Function getControlAttrValue(ByRef shortName As String) As CControlAttrValue
    Set getControlAttrValue = controlAttrValueMap_.GetAt(shortName)
End Function

Public Function hasControlAttr(ByRef shortName As String) As Boolean
    hasControlAttr = controlAttrValueMap_.haskey(shortName)
End Function

Attribute VB_Name = "CControlDef"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_mocName As String
Private m_attributeName   As String
Private m_dataType As String
Private m_bound   As String
Private m_lstValue   As String
Private m_sheetName As String
Private m_groupName As String
Private m_columnName As String
Private m_neType As String
Private m_controlInfo As String
        
Property Get mocName() As String
    mocName = m_mocName
End Property
Property Get attributeName() As String
    attributeName = m_attributeName
End Property
Property Get dataType() As String
    dataType = m_dataType
End Property
Property Get bound() As String
    bound = m_bound
End Property
Property Get lstValue() As String
    lstValue = m_lstValue
End Property

Property Get sheetName() As String
    sheetName = m_sheetName
End Property

Property Get groupName() As String
    groupName = m_groupName
End Property

Property Get columnName() As String
    columnName = m_columnName
End Property

Property Get neType() As String
    neType = m_neType
End Property

Property Get controlInfo() As String
    controlInfo = m_controlInfo
End Property
'let
Property Let mocName(name As String)
    m_mocName = name
End Property
Property Let attributeName(name As String)
    m_attributeName = name
End Property
Property Let dataType(name As String)
    m_dataType = name
End Property
Property Let bound(boundValue As String)
    m_bound = boundValue
End Property
Property Let lstValue(value As String)
    m_lstValue = value
End Property

Property Let sheetName(name As String)
    m_sheetName = name
End Property

Property Let groupName(name As String)
    m_groupName = name
End Property

Property Let columnName(name As String)
    m_columnName = name
End Property

Property Let controlInfo(str As String)
    m_controlInfo = str
End Property

Property Let neType(str As String)
    m_neType = str
End Property

Public Function getKey() As String
    getKey = m_sheetName + "," + m_groupName + "," + m_columnName
End Function


Attribute VB_Name = "CControlRelation"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mocName_ As String
Private attributeName_ As String '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1f1||fffd||fffd||632||fffd||fffd||fffd|
Private controlAttrCol_ As New Collection '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd|
Private neType_ As String
Private sheetName_ As String
Private groupName_ As String
Private columnName_ As String
Private valueType_ As String '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||363||fffd|Enum|fffd||fffd|String|fffd||fffd|

Public Sub init(ByRef mocName As String, ByRef attributeName As String, ByRef controlInfo As String, ByRef neType As String, ByRef sheetName As String, ByRef groupName As String, ByRef columnName As String, ByRef valueType As String)
    If controlInfo <> "" Then initControlAttrCol (controlInfo)
    Call initParameters(mocName, attributeName, neType, sheetName, groupName, columnName, valueType)
End Sub

Property Get groupName() As String
    groupName = groupName_
End Property

Property Get columnName() As String
    columnName = columnName_
End Property

Property Get valueType() As String
    valueType = valueType_
End Property

Private Sub initParameters(ByRef mocName As String, ByRef attributeName As String, ByRef neType As String, ByRef sheetName As String, ByRef groupName As String, ByRef columnName As String, ByRef valueType As String)
    mocName_ = mocName
    attributeName_ = attributeName
    neType_ = neType
    sheetName_ = sheetName
    groupName_ = groupName
    columnName_ = columnName
    valueType_ = valueType
End Sub

Private Sub initControlAttrCol(ByRef controlInfo As String)
    Dim xmlDoc As Variant
    Set xmlDoc = CreateObject("MSXML2.DOMDocument")
    xmlDoc.LoadXML (controlInfo)
    
    Dim root As Variant '|fffd||fffd||fffd||6b5||fffd|
    Set root = xmlDoc.DocumentElement
    
    Dim controlAttributeNode As Variant
    Dim controlAttributeName As String
    For Each controlAttributeNode In root.GetElementsByTagName("Equals")
        controlAttributeName = controlAttributeNode.getAttribute("attribute")
        If Not IsNull(controlAttributeName) Then
            If Not Contains(controlAttrCol_, controlAttributeName) Then
                controlAttrCol_.Add Item:=controlAttributeName, key:=controlAttributeName '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            End If
        End If
    Next controlAttributeNode
End Sub

Property Get controlAttrCol() As Collection
    Set controlAttrCol = controlAttrCol_
End Property

Attribute VB_Name = "CControlRelationManager"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Const keyDelimeter_ As String = "_"
Private controlledAttributeCollection_ As New Collection '|fffd||fffd||fffd||632||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||b5975||fffd||fffd||5b7||fffd||fffd||fffd|key|5b5||fffd||fffd|value|5b5||fffd||fffd||fffd||fffd||fffd||fffd||4aa||2b1||fffd||fffd||fffd||fffd||4aa||fffd||fffd|controlRelationMap_|fffd||fffd||221|
Private controlRelationMap_ As New CMapValueObject

Public Sub addNewAttributeRelation(ByRef mocName As String, ByRef attributeName As String, ByRef controlInfo As String, ByRef neType As String, ByRef sheetName As String, ByRef groupName As String, ByRef columnName As String, ByRef valueType As String)
    On Error GoTo ErrorHandler
    Dim key As String
    key = getKey(mocName, attributeName, neType, sheetName)
    If Not controlRelationMap_.haskey(key) Then
        Dim controlRelation As New CControlRelation
        Call controlRelation.init(mocName, attributeName, controlInfo, neType, sheetName, groupName, columnName, valueType)
        Call controlRelationMap_.SetAt(key, controlRelation)
    End If
    
    If controlInfo <> "" And (Not Contains(controlledAttributeCollection_, key)) Then
        controlledAttributeCollection_.Add Item:=key, key:=key
    End If
    Exit Sub
ErrorHandler:
    Exit Sub
End Sub

Private Function getKey(ByRef mocName As String, ByRef attributeName As String, ByRef neType As String, ByRef sheetName As String) As String
    getKey = mocName & keyDelimeter_ & attributeName & keyDelimeter_ & neType & keyDelimeter_ & sheetName
End Function

'Control Def|4b3||1e9||fffd||fffd||fffd||1f7||fffd||fffd||434||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd||fffd||632||fffd||fffd||fffd|
Public Function containsControlledAttributeRelation(ByRef mocName As String, ByRef attributeName As String, ByRef neType As String, ByRef sheetName As String) As Boolean
    Dim key  As String
    key = getKey(mocName, attributeName, neType, sheetName)
    If Contains(controlledAttributeCollection_, key) Then
        containsControlledAttributeRelation = True
    Else
        containsControlledAttributeRelation = False
    End If
End Function

'Control Def|4b3||1e9||fffd||fffd||fffd||1f7||fffd||fffd||434||fffd||fffd||fffd||fffd||fffd|
Public Function containsAttributeRelation(ByRef mocName As String, ByRef attributeName As String, ByRef neType As String, ByRef sheetName As String) As Boolean
    Dim key  As String
    key = getKey(mocName, attributeName, neType, sheetName)
    If controlRelationMap_.haskey(key) Then
        containsAttributeRelation = True
    Else
        containsAttributeRelation = False
    End If
End Function

Public Function getControlRelation(ByRef mocName As String, ByRef attributeName As String, ByRef neType As String, ByRef sheetName As String) As CControlRelation
    On Error GoTo ErrorHandler
    Dim key As String
    key = getKey(mocName, attributeName, neType, sheetName)
    Set getControlRelation = controlRelationMap_.GetAt(key)
    Exit Function
ErrorHandler:
    Set getControlRelation = Nothing
End Function
Attribute VB_Name = "CDeleteBoardStyleButtons"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private deleteBoardStyleMoiButton_ As CommandBarButton

Public Sub init()
    Dim capacityExpansionExist As Boolean
    capacityExpansionExist = containsAToolBar(CapactiyExpansionBarNameDeleteMoi)
    Dim bar As CommandBar
    If capacityExpansionExist Then
        Set bar = CommandBars(CapactiyExpansionBarNameDeleteMoi)
        Call initDeleteBoardStyleButtons(bar.Controls(1))
    End If
End Sub

Public Sub initDeleteBoardStyleButtons(ByRef deleteButton As CommandBarButton)
    Set deleteBoardStyleMoiButton_ = deleteButton
End Sub

Public Sub setDeleteBoardStyleButtons()
    deleteBoardStyleMoiButton_.Enabled = False
End Sub

Public Sub resetDeleteBoardStyleButtons()
    deleteBoardStyleMoiButton_.Enabled = True
End Sub
Attribute VB_Name = "CExportHelpXML"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Const strFileName As String = "PreInfo.xml"
Private strFilePath As String


'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||135||fffd|
Public Function ExportXMLFile() As Boolean
    
'    Dim fWriPreInfo As New CUtf8File
'    Dim SgwAddrType As String
'    Dim M2000AddrType As String
'    Dim path As String
'
'    Dim fWriErr As New CUtf8File
'
'    If shtExport.checkdata = False Then
'        Exit Function
'    End If
'
'
'    path = Application.GetSaveAsFilename("PreInfo.xml", "XML Files (*.xml), *.xml", 1, "Export PreInfo.xml")
'
'    If path = "False" Then
'        ExportXMLFile = False
'        Exit Function
'    End If
'
'    If Not fWriPreInfo.CreateXmlFile(path) Then
'        MsgBox "Create PreInfo.xml Failed|fffd||fffd|"
'        ExportXMLFile = False
'        Exit Function
'    End If
'
'    writeHead fWriPreInfo
'
'    SgwAddrType = GetAddrTypeStr(Trim(GetCell(shtExport, ROW_SEGW_ADDRTYPE, COL_VALUE)))
'    M2000AddrType = GetAddrTypeStr(Trim(GetCell(shtExport, ROW_M2000_ADDRTYPE, COL_VALUE)))
'
'
'    fWriPreInfo.AppendLine GetLeftBlankStr(2) & "<DHCPSRVADDR AddrType=""" & M2000AddrType & """ IpAddr=""" & Trim(GetCell(shtExport, ROW_M2000_IP, COL_VALUE)) _
'                        & """ URL=""" & Trim(GetCell(shtExport, ROW_M2000_DOMAIN, COL_VALUE)) & """/>"
'
'    fWriPreInfo.AppendLine GetLeftBlankStr(2) & "<SEGWADDR AddrType=""" & SgwAddrType & """ IpAddr=""" & Trim(GetCell(shtExport, ROW_SEGW_IP, COL_VALUE)) _
'                        & """ URL=""" & Trim(GetCell(shtExport, ROW_SEGW_DOMAIN, COL_VALUE)) & """/>"
'
'
'    fWriPreInfo.AppendLine GetLeftBlankStr(2) & "<AUTHMETH AuthMeth=""" & shtExport.getAuthMethInt(GetCell(shtExport, ROW_AUTH_METH, COL_VALUE)) & """ PreShareKey=""" & Trim(GetCell(shtExport, ROW_KEY, COL_VALUE)) & """/>"
'    fWriPreInfo.AppendLine GetLeftBlankStr(2) & "<DHCPVLANID VlanId=""" & Trim(GetCell(shtExport, ROW_DHCP_VLANID, COL_VALUE)) & """/>"
'    fWriPreInfo.AppendLine GetLeftBlankStr(2) & "<SEGWLOCNAME Name=""" & Trim(GetCell(shtExport, ROW_SEGW_LOCALNAME, COL_VALUE)) & """/>"
'    fWriPreInfo.AppendLine GetLeftBlankStr(2) & "<CROSSCAFILEPATH PathName=""" & Trim(GetCell(shtExport, ROW_LIC_PATH, COL_VALUE)) & """/>"
'    fWriPreInfo.AppendLine GetLeftBlankStr(2) & "<CRLFILEPATH PathName=""" & Trim(GetCell(shtExport, ROW_CRL_FILEPATH, COL_VALUE)) & """/>"
'    fWriPreInfo.AppendLine GetLeftBlankStr(2) & "<CRSERVER IpAddr=""" & Trim(GetCell(shtExport, ROW_CR_SERVIP, COL_VALUE)) & """ User=""" & _
'                         Trim(GetCell(shtExport, ROW_CR_SERVNAME, COL_VALUE)) & """ Passward=""" & Trim(GetCell(shtExport, ROW_CR_SERVPWD, COL_VALUE)) & _
'                         """ DownLoadType=""" & Replace(Trim(GetCell(shtExport, ROW_CR_DLDTYPE, COL_VALUE)), "NULL", "") & _
'                         """ Dn=""" & Trim(GetCell(shtExport, ROW_CR_DN, COL_VALUE)) & _
'                         """ Searchdn=""" & Trim(GetCell(shtExport, ROW_CR_SERACHDN, COL_VALUE)) & """/>"
'
'    Dim CaProtocol As String
'    If Trim(GetCell(shtExport, ROW_CASERVER_PROTOCOL, COL_VALUE)) = "http" Then
'        CaProtocol = "0"
'    ElseIf Trim(GetCell(shtExport, ROW_CASERVER_PROTOCOL, COL_VALUE)) = "https" Then
'        CaProtocol = "1"
'    Else
'
'    End If
'
'
'
'    fWriPreInfo.AppendLine GetLeftBlankStr(2) & "<CASERVER Name=""" & Trim(GetCell(shtExport, ROW_CASERVER_NAME, COL_VALUE)) & _
'                           """ Protocol=""" & CaProtocol & _
'                           """ IpAddr=""" & Trim(GetCell(shtExport, ROW_CASERVER_IP, COL_VALUE)) & _
'                           """ Port=""" & Trim(GetCell(shtExport, ROW_CASERVER_PORT, COL_VALUE)) & _
'                           """ Path=""" & Trim(GetCell(shtExport, ROW_CASERVER_PATH, COL_VALUE)) & _
'                           """/>"
'
'
'    M2000AddrType = GetAddrTypeStr(Trim(GetCell(shtExport, ROW_1M2000_ADDRTYPE, COL_VALUE)))
'
'
'    fWriPreInfo.AppendLine GetLeftBlankStr(2) & "<NMS1ADDR AddrType=""" & M2000AddrType & _
'                           """ IpAddr=""" & Trim(GetCell(shtExport, ROW_1M2000_IP, COL_VALUE)) & _
'                           """ URL=""" & Trim(GetCell(shtExport, ROW_1M2000_URL, COL_VALUE)) & """/>"
'
'    M2000AddrType = GetAddrTypeStr(Trim(GetCell(shtExport, ROW_2M2000_ADDRTYPE, COL_VALUE)))
'
'    fWriPreInfo.AppendLine GetLeftBlankStr(2) & "<NMS2ADDR AddrType=""" & M2000AddrType & _
'                           """ IpAddr=""" & Trim(GetCell(shtExport, ROW_2M2000_IP, COL_VALUE)) & _
'                           """ URL=""" & Trim(GetCell(shtExport, ROW_2M2000_URL, COL_VALUE)) & """/>"
'
'    M2000AddrType = GetAddrTypeStr(Trim(GetCell(shtExport, ROW_2DHCPSERVER_ADDRTYPE, COL_VALUE)))
'
'    fWriPreInfo.AppendLine GetLeftBlankStr(2) & "<DHCPSRV2ADDR AddrType=""" & M2000AddrType & _
'                           """ IpAddr=""" & Trim(GetCell(shtExport, ROW_2DHCPSERVER_IP, COL_VALUE)) & _
'                           """ URL=""" & Trim(GetCell(shtExport, ROW_2DHCPSERVER_URL, COL_VALUE)) & """/>"
'
'
'
'    fWriPreInfo.AppendLine GetLeftBlankStr(2) & "<FILES>"
'
'    If Trim(GetCell(shtExport, ROW_USB_ROOTNAME, COL_VALUE)) <> "" Then
'        fWriPreInfo.AppendLine GetLeftBlankStr(3) & "<File Name=""" & shtExport.strRootFilePath & Trim(GetCell(shtExport, ROW_USB_ROOTNAME, COL_VALUE)) & """/>"
'    End If
'
'    If Trim(GetCell(shtExport, ROW_USB_CRLNAME, COL_VALUE)) <> "" Then
'        fWriPreInfo.AppendLine GetLeftBlankStr(3) & "<File Name=""" & shtExport.strCRLFilePath & Trim(GetCell(shtExport, ROW_USB_CRLNAME, COL_VALUE)) & """/>"
'    End If
'    If Trim(GetCell(shtExport, ROW_USB_CROSSNAME, COL_VALUE)) <> "" Then
'        fWriPreInfo.AppendLine GetLeftBlankStr(3) & "<File Name=""" & shtExport.strCrossFilePath & Trim(GetCell(shtExport, ROW_USB_CROSSNAME, COL_VALUE)) & """/>"
'    End If
'
'    fWriPreInfo.AppendLine GetLeftBlankStr(2) & "</FILES>"
'
'
'    fWriPreInfo.AppendLine GetLeftBlankStr(1) & "</ConfigInfo>"
'    fWriPreInfo.AppendLine "</PreInfo>"
'
'    fWriPreInfo.CloseXmlFile
'
'    MsgBox "Export success! File path:" & path
'
'    ExportXMLFile = True
End Function



''|434|ditemap|fffd||13c||fffd||377||fffd||fffd||3e2|
Private Sub writeHead(fwriFile As CUtf8File)

    fwriFile.AppendLine "<?xml version=""1.0"" encoding=""UTF-8""?>"
    fwriFile.AppendLine "<PreInfo Version=""1"" TimeStamp=""" & Time & """>"
    fwriFile.AppendLine GetLeftBlankStr(1) & "<ConfigInfo TimeStamp=""" & Time & """>"
  
End Sub

Private Function GetAddrTypeStr(strAddrType As String) As String
'    If strAddrType = shtExport.getIpTypeStr Then
'        GetAddrTypeStr = "1"
'    ElseIf strAddrType = shtExport.getUrlTypeStr Then
'        GetAddrTypeStr = "0"
'    ElseIf strAddrType = "" Then
'        GetAddrTypeStr = ""
'    Else
'        MsgBox "Address Type is Wrong|fffd||fffd|"
'    End If
    
End Function

Private Function GetLeftBlankStr(level As Long) As String
    GetLeftBlankStr = Space(level * 4)
End Function








Attribute VB_Name = "CGBtsTrxBind"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private p_cellId As String
Private p_freqNo As String
Private p_brdNo As String
Private p_portNo As String
Private p_antNo As String
Private p_antGrpId As String

    

Property Let cellId(str As String)
        p_cellId = str
End Property



Property Get cellId() As String
        cellId = p_cellId
End Property



    

Property Let freqNo(str As String)
        p_freqNo = str
End Property



Property Get freqNo() As String
        freqNo = p_freqNo
End Property




    

Property Let brdNo(str As String)
        p_brdNo = str
End Property



Property Get brdNo() As String
        brdNo = p_brdNo
End Property



    

Property Let portNo(str As String)
        p_portNo = str
End Property



Property Get portNo() As String
        portNo = p_portNo
End Property



    

Property Let antNo(str As String)
        p_antNo = str
End Property




Property Get antNo() As String
        antNo = p_antNo
End Property
Property Let antGrpId(str As String)
        p_antGrpId = str
End Property
Property Get antGrpId() As String
        antGrpId = p_antGrpId
End Property



Attribute VB_Name = "CMap"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mcolKey As Collection '|fffd||63c||fffd||fffd||5bc||fffd||fffd||fffd|
Private mcolKey2Data As Collection  '|fffd||fffd||fffd||775||13c||fffd||fffd||3e3||fffd||fffd||fffd|Key|fffd||fffd||fffd||fffd|
Private mMulKeySep As String '|fffd||fffd||fffd||5b5||5ae||fffd||fffd||137||5b8||fffd||fffd||fffd|

Public Sub Clean()
    Set mcolKey = New Collection
    Set mcolKey2Data = New Collection
End Sub

Public Function GetAt(ByVal strKey, Optional Default) As Variant
    On Error Resume Next
    Call EncrptKey(strKey)
    GetAt = mcolKey2Data(strKey)
    If Err <> 0 Then
        GetAt = Default
        Err.Clear
    End If
End Function

Public Sub SetAt(ByVal strKey, ByVal vVal)
    Call EncrptKey(strKey)
    If haskey(strKey) Then
        mcolKey2Data.Remove strKey
    Else
        mcolKey.Add strKey, strKey
    End If

    mcolKey2Data.Add vVal, strKey
End Sub

Public Function haskey(ByVal strKey) As Boolean
    Dim v
    
    On Error Resume Next
    Call EncrptKey(strKey)
    v = mcolKey2Data(strKey)
    haskey = (Err = 0)
End Function

Public Function MakeKey(ParamArray key() As Variant) As String
    Dim colX As New Collection
    Dim I As Long
    
    For I = 0 To UBound(key)
        colX.Add key(I)
    Next I

    MakeKey = MakeKeyByCol(colX)
End Function

Public Function MakeKeyByCol(colX As Collection) As String
    Dim I As Long
    Dim s As String
    
    s = colX(1)
    For I = 2 To colX.count
        s = s & mMulKeySep & colX(I)
    Next I
    Call EncrptKey(s)
    
    MakeKeyByCol = s
End Function

Public Property Get KeyCollection() As Collection
    Dim colKey As New Collection
    Dim key
    
    For Each key In mcolKey
        DisEncrptKey key
        colKey.Add key
    Next key
   
    Set KeyCollection = colKey
End Property

Public Property Get ValueCollection() As Collection
    Set ValueCollection = mcolKey2Data
End Property

Public Property Get count() As Long
    count = mcolKey.count
End Property

Public Property Let MulKeySep(ByVal s As String)
    mMulKeySep = s
End Property

Private Sub Class_Initialize()
    Me.Clean
    mMulKeySep = "\"
End Sub

Public Sub RemoveKey(ByVal key)
    On Error Resume Next
    Call EncrptKey(key)
    mcolKey.Remove key
    mcolKey2Data.Remove key
End Sub

Public Property Get isEmpty() As Boolean
    isEmpty = (Me.count <= 0)
End Property

Private Sub EncrptKey(key)
    If IsNumeric(key) Then key = Chr(8) & key
End Sub

Private Sub DisEncrptKey(key)
    If Left(key, 1) = Chr(8) Then key = Mid(key, 2)
End Sub

Attribute VB_Name = "CMapValueObject"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mcolKey      As Collection '|fffd||63c||fffd||fffd||5bc||fffd||fffd||fffd|
Private mcolKey2Data As Collection  '|fffd||fffd||fffd||775||13c||fffd||fffd||3e3||fffd||fffd||fffd|Key|fffd||fffd||fffd||fffd|
Private mMulKeySep As String '|fffd||fffd||fffd||5b5||5ae||fffd||fffd||137||5b8||fffd||fffd||fffd|

Public Sub Clean()
    Set mcolKey = New Collection
    Set mcolKey2Data = New Collection
End Sub

Public Function GetAt(ByVal strKey, Optional Default) As Variant
    On Error Resume Next
    Call EncrptKey(strKey)
    Set GetAt = mcolKey2Data(strKey)
    If Err <> 0 Then
        Set GetAt = Default
        Err.Clear
    End If
End Function

Public Sub SetAt(ByVal strKey, ByVal vVal)
    Call EncrptKey(strKey)
    If haskey(strKey) Then
        mcolKey2Data.Remove strKey
    Else
        mcolKey.Add strKey, strKey
    End If

    mcolKey2Data.Add vVal, strKey
End Sub

Public Function haskey(ByVal strKey) As Boolean
    Dim v
    
    On Error Resume Next
    Call EncrptKey(strKey)
    Set v = mcolKey2Data(strKey)
    haskey = (Err = 0)
End Function

Public Function MakeKey(ParamArray key() As Variant) As String
    Dim colX As New Collection
    Dim I As Long
    
    For I = 0 To UBound(key)
        colX.Add key(I)
    Next I

    MakeKey = MakeKeyByCol(colX)
End Function

Public Function MakeKeyByCol(colX As Collection) As String
    Dim I As Long
    Dim s As String
    
    s = colX(1)
    For I = 2 To colX.count
        s = s & mMulKeySep & colX(I)
    Next I
    Call EncrptKey(s)
    
    MakeKeyByCol = s
End Function

Public Property Get KeyCollection() As Collection
    Dim colKey As New Collection
    Dim key
    
    For Each key In mcolKey
        DisEncrptKey key
        colKey.Add key
    Next key
   
    Set KeyCollection = colKey
End Property

Public Property Get ValueCollection() As Collection
    Set ValueCollection = mcolKey2Data
End Property

Public Property Get count() As Long
    count = mcolKey.count
End Property

Public Property Let MulKeySep(ByVal s As String)
    mMulKeySep = s
End Property

Private Sub Class_Initialize()
    Me.Clean
    mMulKeySep = "\"
End Sub

Public Sub RemoveKey(ByVal key)
    On Error Resume Next
    Call EncrptKey(key)
    mcolKey.Remove key
    mcolKey2Data.Remove key
End Sub

Public Property Get isEmpty() As Boolean
    isEmpty = (Me.count <= 0)
End Property

Private Sub EncrptKey(key)
    If IsNumeric(key) Then key = Chr(8) & key
End Sub

Private Sub DisEncrptKey(key)
    If Left(key, 1) = Chr(8) Then key = Mid(key, 2)
End Sub


Attribute VB_Name = "CMappingDef"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
        Private m_sheetName As String
        Private m_groupName As String
        Private m_columnName As String
        Private m_mocName As String
        Private m_attributeName  As String
        Private m_neType As String
        Private m_neVersion As String
        
' get property
Property Get neType() As String
        neType = m_neType
End Property
Property Get neVersion() As String
        neVersion = m_neVersion
End Property
Property Get sheetName() As String
        sheetName = m_sheetName
End Property

Property Get groupName() As String
        groupName = m_groupName
End Property

Property Get columnName() As String
        columnName = m_columnName
End Property

Property Get mocName() As String
        mocName = m_mocName
End Property
Property Get attributeName() As String
        attributeName = m_attributeName
End Property


' set property
Property Let sheetName(shName As String)
        m_sheetName = shName
End Property

Property Let groupName(gpName As String)
        m_groupName = gpName
End Property

Property Let columnName(colmName As String)
        m_columnName = colmName
End Property

Property Let mocName(mcName As String)
         m_mocName = mcName
End Property
Property Let attributeName(arrtName As String)
        m_attributeName = arrtName
End Property
Property Let neType(str As String)
        m_neType = str
End Property
Property Let neVersion(str As String)
        m_neVersion = str
End Property

' function

Public Function getKey() As String
    getKey = m_sheetName + "," + m_groupName + "," + m_columnName
End Function

Attribute VB_Name = "CMoiRowsManager"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private groupNameRowNumber_ As Long
Private startRowNumber_ As Long
Private endRowNumber_ As Long
Private maxColumnNumber_ As Long
Private dstMoiRange_ As Range
Private dstRowsRange_ As Range
Private needFillInRangeMap_ As CMapValueObject
Private needFillInRangeAddressMap_ As CMap

Public Function checkNeedFillInCells(ByRef emptyCell As Range, ByRef emptyCellAddressString As String) As Boolean
    checkNeedFillInCells = True
    Dim needFillInRange As Range
    Dim eachCell As Range
    For Each needFillInRange In needFillInRangeMap_.ValueCollection
        For Each eachCell In needFillInRange
            If Trim(eachCell.value) = "" Then
                If emptyCell Is Nothing Then Set emptyCell = eachCell
                checkNeedFillInCells = False
                Call makeEmptyCellAddressString(eachCell.address(False, False), emptyCellAddressString)
            End If
        Next eachCell
    Next needFillInRange
End Function

Private Sub makeEmptyCellAddressString(ByRef cellAddress As String, ByRef emptyCellAddressString As String)
    If emptyCellAddressString = "" Then
        emptyCellAddressString = cellAddress
    Else
        emptyCellAddressString = emptyCellAddressString & ", " & cellAddress
    End If
End Sub

Public Sub addNeedFillInRange(ByRef columnName As String, ByRef needFillInRange As Range)
    Call needFillInRangeMap_.SetAt(columnName, needFillInRange)
End Sub

Public Function rangeInNeedFillInRange(ByRef certainRange As Range) As Boolean
    rangeInNeedFillInRange = True
    If needFillInRangeAddressMap_ Is Nothing Then Call initNeedFillInRangeAddressMap
    
    Dim eachCell As Range
    For Each eachCell In certainRange
        If Not needFillInRangeAddressMap_.haskey(eachCell.address(False, False)) Then
            rangeInNeedFillInRange = False
            Exit Function
        End If
    Next eachCell
End Function

Private Sub initNeedFillInRangeAddressMap()
    Set needFillInRangeAddressMap_ = New CMap
    Dim needFillInRange As Range
    Dim eachCell As Range
    For Each needFillInRange In needFillInRangeMap_.ValueCollection
        For Each eachCell In needFillInRange
            Call needFillInRangeAddressMap_.SetAt(eachCell.address(False, False), eachCell.address(False, False))
        Next eachCell
    Next needFillInRange
End Sub

Public Function rangeInAddingRows(ByRef certainRange As Range) As Boolean
    rangeInAddingRows = False
    Dim startRowNumber As Long, endRowNumber As Long
    startRowNumber = certainRange.row
    endRowNumber = startRowNumber + certainRange.rows.count - 1
    If startRowNumber >= startRowNumber_ And endRowNumber <= endRowNumber_ Then
        rangeInAddingRows = True
    End If
End Function

Public Property Let groupNameRowNumber(ByRef RowNumber As Long)
    groupNameRowNumber_ = RowNumber
End Property

Public Property Let startRowNumber(ByRef RowNumber As Long)
    startRowNumber_ = RowNumber
End Property

Public Property Let endRowNumber(ByRef RowNumber As Long)
    endRowNumber_ = RowNumber
End Property

Public Property Let maxColumnNumber(ByRef columnNumber As Long)
    maxColumnNumber_ = columnNumber
End Property

Public Property Get groupNameRowNumber() As Long
    groupNameRowNumber = groupNameRowNumber_
End Property

Public Property Get startRowNumber() As Long
    startRowNumber = startRowNumber_
End Property

Public Property Get endRowNumber() As Long
    endRowNumber = endRowNumber_
End Property

Public Property Get getMoiRange()
    If dstMoiRange_ Is Nothing Then
        Set dstMoiRange_ = currentSheet.Range(currentSheet.Cells(startRowNumber_, 1), currentSheet.Cells(endRowNumber_, maxColumnNumber_))
    End If
    Set getMoiRange = dstMoiRange_
End Property

Public Property Get getMoiRowsRange()
    If dstRowsRange_ Is Nothing Then
        Set dstRowsRange_ = currentSheet.rows(startRowNumber_ & ":" & endRowNumber_)
    End If
    Set getMoiRowsRange = dstRowsRange_
End Property

Private Sub Class_Initialize()
    Set needFillInRangeMap_ = New CMapValueObject
    startRowNumber_ = -1
    endRowNumber_ = -1
End Sub

Private Sub Class_Terminate()
    startRowNumber_ = -1
    endRowNumber_ = -1
End Sub

Attribute VB_Name = "CReferenceRangeManager"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private referenceAddressBoardNoMap_ As CMap '|fffd||fffd||fffd||f5||135||fffd||5b7||fffd||375||fffd||fffd||fffd||fffd||175||fffd|Map
Private boardNoReferenceAddressMap_ As CMap '|fffd||fffd||fffd||fffd||fffd||17a||375||fffd||5b7||fffd||fffd|Map
Private boardStyleMappingDefMap_ As CMapValueObject
Private groupNameWithListBoxColumnsMap_ As CMapValueObject '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Map|fffd||fffd|key/value|fffd||fffd||fffd||fffd|groupName

Private Sub init()
    If boardStyleData Is Nothing Then Call initBoardStyleMappingDataPublic
    Set boardStyleMappingDefMap_ = boardStyleData.getBoardStyleMappingDefMap
    
    Dim groupName As Variant
    For Each groupName In boardStyleMappingDefMap_.KeyCollection
        Call initGroupNameBoardStyleDataMap(CStr(groupName))
        'Call updateGroupNameBoardNoMap(CStr(groupName))
    Next groupName
End Sub

Public Sub setReferenceAddressHyperlinks(ByRef ws As Worksheet, ByRef boardNoManager As CBoardNoManager)
    Dim srcReferenceAddress As Variant '|fffd||fffd||fffd||f5||fffd||fffd||fffd||fffd||175||135||fffd||5b7|
    'srcBoardNo|3aa||fffd||fffd||fffd||f5||fffd||fffd||fffd||fffd||175||fffd||52a||fffd||fffd||fffd||2b5||fffd||2b5||fffd||fffd||fffd||fffd||fffd||5b5||fffd||fffd|referencedBoardNoAddress|3aa||fffd||f5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b5||fffd||5b7|
    Dim srcBoardNo As String, referencedBoardNoAddress As String
    For Each srcReferenceAddress In referenceAddressBoardNoMap_.KeyCollection
        srcBoardNo = referenceAddressBoardNoMap_.GetAt(srcReferenceAddress)
        referencedBoardNoAddress = boardNoManager.getBoardNoAddress(srcBoardNo)
        If referencedBoardNoAddress <> "" Then '|fffd||fffd||fffd||fffd||4b5||fffd||fffd||2f5||fffd||5b7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b7||fffd||fffd||fffd||4f3||fffd||fffd||fffd||fffd||fffd|
            Call addHyperlink(ws, CStr(srcReferenceAddress), ws, referencedBoardNoAddress)
        Else '|fffd||fffd||fffd||fb||fffd||4b5||fffd||fffd||fffd||4e6||fffd||fffd||fffd||fffd||fffd||163||fffd||fffd||bdaf3||fffd||fffd||fffd||fffd||fffd||27e||fffd||fffd|
            Call deleteHyperlink(ws, CStr(srcReferenceAddress))
        End If
    Next srcReferenceAddress
End Sub

Public Function getReferenceAddressString(ByRef boardNo As String) As String
    If boardNoReferenceAddressMap_.haskey(boardNo) Then
        getReferenceAddressString = boardNoReferenceAddressMap_.GetAt(boardNo)
    Else
        getReferenceAddressString = ""
    End If
End Function

Private Sub initGroupNameBoardStyleDataMap(ByRef groupName As String)
    Dim boardStyleMappingDefData As CBoardStyleMappingDefData
    Set boardStyleMappingDefData = boardStyleMappingDefMap_.GetAt(groupName)
    If boardStyleMappingDefData.hasListBoxColumns Then
        Call groupNameWithListBoxColumnsMap_.SetAt(groupName, groupName)
    End If
End Sub

Public Sub generateBoardNoReferenceAddressMap()
    Call init
    
    Dim groupName As Variant
    Dim boardStyleMappingDefData As CBoardStyleMappingDefData
    For Each groupName In groupNameWithListBoxColumnsMap_.KeyCollection
        Set boardStyleMappingDefData = boardStyleMappingDefMap_.GetAt(groupName)
        Call generateEachColumn(CStr(groupName), boardStyleMappingDefData)
    Next groupName
End Sub

Private Sub generateEachColumn(ByRef groupName As String, ByRef boardStyleMappingDefData As CBoardStyleMappingDefData)
    Dim listBoxColumnsMap As CMap
    Set listBoxColumnsMap = boardStyleMappingDefData.getListBoxReferencKeyMap
    
    Dim startRowNumber As Long, endRowNumber As Long
    Call getGroupNameStartAndEndRowNumber(groupName, startRowNumber, endRowNumber)
    
    Dim columnName As Variant
    Dim columnLetter As String
    Dim rowIndex As Long
    Dim boardNo As String
    Dim boardNoRange As Range
    
    For Each columnName In listBoxColumnsMap.KeyCollection
        columnLetter = boardStyleMappingDefData.getColumnNamePositionLetter(CStr(columnName))
        For rowIndex = startRowNumber + 2 To endRowNumber
            Set boardNoRange = currentSheet.Range(columnLetter & rowIndex)
            boardNo = boardNoRange.value
            If boardNo <> "" Then
                Call referenceAddressBoardNoMap_.SetAt(boardNoRange.address(False, False), boardNo)
                Call updateBoardNoReferenceAddressMap(boardNoRange.address(False, False), boardNo)
            End If
        Next rowIndex
    Next columnName
End Sub

Private Sub updateBoardNoReferenceAddressMap(ByRef boardNoRange As String, ByRef boardNo As String)
    Dim addressString As String
    If boardNoReferenceAddressMap_.haskey(boardNo) Then
        addressString = boardNoReferenceAddressMap_.GetAt(boardNo)
        Call addNewAddress(boardNoRange, addressString)
        Call boardNoReferenceAddressMap_.SetAt(boardNo, addressString)
    Else
        Call boardNoReferenceAddressMap_.SetAt(boardNo, boardNoRange)
    End If
End Sub

Private Sub addNewAddress(ByRef boardNoRange As String, ByRef addressString As String)
    If addressString = "" Then
        addressString = addressString & boardNoRange
    Else
        addressString = addressString & "," & boardNoRange
    End If
End Sub

Private Sub Class_Initialize()
    Set referenceAddressBoardNoMap_ = New CMap
    Set boardNoReferenceAddressMap_ = New CMap
    Set groupNameWithListBoxColumnsMap_ = New CMapValueObject
End Sub
Attribute VB_Name = "CUtf8File"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private utfStream
    
Const adTypeText = 2
Const adSaveCreateOverWrite = 2
Private FileName
Private strCont As String

Public Function CreateXmlFile(strFileName As String) As Boolean
    Dim TextStream
    Set utfStream = CreateObject("ADODB.Stream")
    
    FileName = strFileName
    strCont = ""
    CreateXmlFile = True
End Function

Public Sub AppendLine(strLine As String, Optional bAlignIdent As Boolean = False)
    strCont = strCont & strLine & vbCrLf
End Sub

Public Sub CloseXmlFile()
    Dim pos
    Dim strPath As String

    '|fffd||fffd||5a4||b7||fffd||fffd||fffd||fffd||fffd||fffd|
    pos = InStrRev(FileName, "\")
    If pos > 0 Then
        strPath = Left(FileName, pos - 1)
        If Not NewDir(strPath) Then
            SysErr "|b7||fffd||fffd|" & vbCrLf & strPath & vbCrLf & "|fffd||1f7||fffd||fffd||fffd|"
        End If
    End If
    
    With utfStream
        .Open
        .Type = adTypeText
        .Charset = "UTF-8"
        .Position = utfStream.Size
        .WriteText strCont
        .SaveToFile FileName, adSaveCreateOverWrite
        .Close
    End With
    
    strCont = ""
    FileName = ""
    Set utfStream = Nothing
    

End Sub




Attribute VB_Name = "CValideDef"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
        Private m_sheetName As String
        Private m_groupName As String
        Private m_columnName As String
        Private m_row As Long
        Private m_column As Long
        
    Property Let sheetName(str As String)
        m_sheetName = str
    End Property
    
    Property Let groupName(str As String)
        m_groupName = str
    End Property
    
    Property Let columnName(str As String)
        m_columnName = str
    End Property
    
    Property Let row(str As Long)
        m_row = str
    End Property
    
    Property Let column(str As Long)
        m_column = str
    End Property
    
    Property Get row() As Long
        row = m_row
    End Property
    
    Property Get column() As Long
        column = m_column
    End Property
    
    Function getKey() As String
        getKey = m_sheetName + "," + m_groupName + "," + m_columnName
    End Function
    
    Function getValidedef() As String
        getValidedef = "=INDIRECT(""'InnerValideDef'!D" & CStr(m_row) & ":" & getColStr(m_column) & CStr(m_row) & """)"
    End Function
    


Attribute VB_Name = "CapacityCellSub"
Option Explicit

Private Const CELL_BAR_NAME = "SectorEqmBar"
Private Const DELFREQ_BAR_NAME = "DeleteFreqBar"
Private Const FINISH_BAR_NAME = "AdjustFinishBar"
Private Const CANCEL_BAR_NAME = "AdjustCancelBar"
Private Const Col_Width = 12
Private SITE_NAME As String
Private WRITESUCCESS As Boolean
Public InAdjustAntnPort As Boolean
Private CELL_SHEET_NAME As String
Public CELL_TYPE As Long
Private ROW_COUNT As Long
Private cellValueStr As String
Private trxValueStr As String
Private boardValueStr As String
Private antnValueStr As String
Private modelValueStr As String
Private valueMap As Collection
Private errCollect As Collection
Private dupCollect As Collection

Private Select_Line As Long
Private Cell_Index As Long
Private Trx_Index As Long
Private Sector_Index As Long
Private Board_Index As Long
Private Ante_Index As Long
Private Model_Index As Long

Sub popUpTempSheetCannotChangeMsgbox()
    Call MsgBox(getResByKey("TempSheetCannotChange"), vbInformation, getResByKey("Warning"))
    ThisWorkbook.Worksheets(getResByKey("Temp Sheet")).Select
End Sub

Sub popUpTempSheetCannotSaveMsgbox()
    Call MsgBox(getResByKey("TempSheetCannotSave"), vbInformation, getResByKey("Warning"))
End Sub

Sub changeRangeColor(sheet As Worksheet, cRange As Range)
    Dim rStr As String
    Dim RowNum As Long
    rStr = cRange.address(False, False)
    If Contains(errCollect, rStr) Then
        cRange.Interior.colorIndex = -4142
        Exit Sub
    End If
    
    RowNum = cRange.row
    Dim rowSet As Variant
    Dim tVal As Variant
    Dim sVal As Variant
    Dim lineStr As String
    For Each tVal In dupCollect
        If InStr(1, tVal, str(RowNum)) <> 0 Then
            rowSet = Split(tVal, ",")
            If UBound(rowSet) = 1 Then
                For Each sVal In rowSet
                    RowNum = CLng(sVal)
                    sheet.Range(Cells(RowNum, Cell_Index), Cells(RowNum, Model_Index)).Interior.colorIndex = -4142
                Next
            Else
                sheet.Range(Cells(RowNum, Cell_Index), Cells(RowNum, Model_Index)).Interior.colorIndex = -4142
                dupCollect.Remove (tVal)
                For Each sVal In rowSet
                    If sVal <> str(RowNum) Then
                        If lineStr = "" Then
                            lineStr = sVal
                        Else
                            lineStr = lineStr + "," + sVal
                        End If
                    End If
                Next
                dupCollect.Add Item:=lineStr, key:=lineStr
            End If
            Exit Sub
        End If
    Next
End Sub

Sub createCellBar()
    Dim baseStationChooseBar As CommandBar
    Dim delChooseBar As CommandBar
    Dim baseStationStyle As CommandBarButton
    Dim delFreqStyle As CommandBarButton
    Call deleteCellBar
    Set baseStationChooseBar = Application.CommandBars.Add(CELL_BAR_NAME, msoBarTop)
    
    
    Dim barDescLbl As String
    
    If IsGBTSTemplate() Then
        barDescLbl = "AdjustTrxBind"
    Else
        barDescLbl = "AdjustCellAntnPort"
    End If
    
    With baseStationChooseBar
        .Protection = msoBarNoResize
        .Visible = True
        Set baseStationStyle = .Controls.Add(Type:=msoControlButton)
        With baseStationStyle
            .Style = msoButtonIconAndCaption
            .Caption = getResByKey(barDescLbl)
            .TooltipText = getResByKey(barDescLbl)
            .OnAction = "baseStationChoose"
            .FaceId = 186
            .Enabled = True
        End With
      End With
      
    Set delChooseBar = Application.CommandBars.Add(DELFREQ_BAR_NAME, msoBarBottom)
    Dim delbarDescLbl As String
    delbarDescLbl = "DeleteFreq"
    With delChooseBar
        .Protection = msoBarNoResize
        .Visible = True
        Set delFreqStyle = .Controls.Add(Type:=msoControlButton)
        With delFreqStyle
            .Style = msoButtonIconAndCaption
            .Caption = getResByKey(delbarDescLbl)
            .TooltipText = getResByKey(delbarDescLbl)
            .OnAction = "deleteFrequency"
            .FaceId = 186
            .Enabled = True
        End With
      End With
End Sub

Private Sub baseStationChoose()
    On Error GoTo ErrorHandler
    Dim nowSelection As Range
    Dim actSheetName As String
    Dim myAttrName As String
    Dim myCellMocName As String
    Dim constCellTempCol As Long
    Dim cellIdValue As String
    
    Set nowSelection = Selection
    actSheetName = ThisWorkbook.ActiveSheet.name
    
    CELL_SHEET_NAME = actSheetName
    CELL_TYPE = cellSheetType(actSheetName)

    If CELL_TYPE = 0 Then
        Call getCellMocNameAndAttrName(myCellMocName, myAttrName)
        constCellTempCol = getColNum(actSheetName, 2, myAttrName, myCellMocName)
        cellIdValue = ActiveSheet.Cells(nowSelection.row, constCellTempCol).value
        If IsNull(cellIdValue) = True Or cellIdValue = "" Then
            Call MsgBox(getResByKey("ChooseLine"), vbInformation, getResByKey("Warning"))
            GoTo ErrorHandler
        End If
        Select_Line = nowSelection.row
        Call judgeGNormalCell
    End If
    
    BaseStationForm.Show
    Exit Sub
ErrorHandler:
End Sub
Private Sub deleteFrequency()
    On Error GoTo ErrorHandler
    
    DeleteFreqForm.Show
    Exit Sub
ErrorHandler:
End Sub

Private Sub judgeGNormalCell()
    Dim mocName As String
    Dim attrName As String
    Dim cellTypeIndex As Long
    Dim cellTypeVal As String

    mocName = "GLOCELL"
    attrName = "LOCELLTYPE"
    cellTypeIndex = getColNum(CELL_SHEET_NAME, 2, attrName, mocName)
    cellTypeVal = ActiveSheet.Cells(Select_Line, cellTypeIndex).value
    If cellTypeVal = "NORMAL_CELL" Then
        CELL_TYPE = 4
    End If
End Sub


Sub deleteCellBar()
    If existToolBar(CELL_BAR_NAME) Then
        Application.CommandBars(CELL_BAR_NAME).Delete
    End If
    
    If existToolBar(DELFREQ_BAR_NAME) Then
        Application.CommandBars(DELFREQ_BAR_NAME).Delete
    End If
End Sub
 
 Sub initTempSheetControl(ByRef flag As Boolean)
    On Error Resume Next
    Dim k As Long
    Dim controlId As Long
    For k = 1 To Application.CommandBars("Ply").Controls.count
        controlId = Application.CommandBars("Ply").Controls(k).ID
        Application.CommandBars("Ply").FindControl(ID:=controlId).Enabled = flag
    Next
    With Application.CommandBars("Column")
        .FindControl(ID:=3183).Enabled = flag
        .FindControl(ID:=297).Enabled = flag
        .FindControl(ID:=294).Enabled = flag
    End With
End Sub

Sub createTempBar()
    Dim finishBar As CommandBar
    Dim finishStyle As CommandBarButton
    Dim cancelStyle As CommandBarButton
    If ThisWorkbook.ActiveSheet.name <> getResByKey("Temp Sheet") Then
        Exit Sub
    End If
    
    Set finishBar = Application.CommandBars.Add(FINISH_BAR_NAME, msoBarTop)
    With finishBar
        .Protection = msoBarNoResize
        .Visible = True
        Set finishStyle = .Controls.Add(Type:=msoControlButton)
        With finishStyle
            .Style = msoButtonIconAndCaption
            .Caption = getResByKey("Finish")
            .TooltipText = getResByKey("Finish")
            .OnAction = "writeBackData"
            .FaceId = 186
            .Enabled = True
        End With
        Set cancelStyle = .Controls.Add(Type:=msoControlButton)
        With cancelStyle
            .Style = msoButtonIconAndCaption
            .Caption = getResByKey("Cancel")
            .TooltipText = getResByKey("Cancel")
            .OnAction = "deleteTempSheet"
            .FaceId = 186
            .Enabled = True
        End With
      End With
      
End Sub

Sub deleteTempBar()
    If existToolBar(FINISH_BAR_NAME) Then
        Application.CommandBars(FINISH_BAR_NAME).Delete
    End If
    If existToolBar(CANCEL_BAR_NAME) Then
        Application.CommandBars(CANCEL_BAR_NAME).Delete
    End If
End Sub


Private Function existToolBar(ByRef barName As String) As Boolean
    On Error GoTo ErrorHandler
    existToolBar = True
    Dim bar As CommandBar
    Set bar = CommandBars(barName)
    Exit Function
ErrorHandler:
    existToolBar = False
End Function

Sub AddSectorEqm(siteName As String)
    On Error GoTo ErrorHandler
    Set valueMap = New Collection
    SITE_NAME = siteName
    WRITESUCCESS = False
    ThisWorkbook.Worksheets.Add after:=ThisWorkbook.ActiveSheet
    ThisWorkbook.ActiveSheet.name = getResByKey("Temp Sheet")
    ROW_COUNT = calculateRow()
    Call createTempBar
    Call initMenuStatus(ThisWorkbook.ActiveSheet)
    InAdjustAntnPort = True
    If Not insertCellIdColumn() Then
        Exit Sub
    End If
    If Not insertSectorIdColumn() Then
        Exit Sub
    End If
    If insertRxuBoardColumn() = False Then
        Exit Sub
    End If
     If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
        Call insertTrxColumn
    End If
    
    Call insertAntenneColumn
    Call insertAnteModelColumn
    Call writeData
    Call AdjustSheetStyle
    WRITESUCCESS = True
    Exit Sub
ErrorHandler:
    WRITESUCCESS = False
End Sub

Private Sub AdjustSheetStyle()
    Dim tmpSheet As Worksheet
    Dim sheetRange As Range
    Set tmpSheet = ThisWorkbook.Worksheets(getResByKey("Temp Sheet"))
    With tmpSheet.Cells.Font
        .name = "Arial"
        .Size = 10
    End With
    With tmpSheet.Range(Cells(2, Cell_Index), Cells(2 + ROW_COUNT + 3, Model_Index))
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders.LineStyle = xlContinuous
    End With
End Sub

Private Sub writeData()
    Dim Cell As CAntennes
    Dim row As Variant
    Dim index As Long
    Dim sflag As Boolean
    Dim boardStr As String
    Dim antnStr As String
    Dim rsModel As String
    Dim tempSheet As Worksheet
    Dim antenneCollection As Collection
    Dim rangeStr As String
    Dim rowVal As Long
    sflag = True
    Set tempSheet = ThisWorkbook.Worksheets(getResByKey("Temp Sheet"))
    index = 2
    For Each Cell In valueMap
        Set antenneCollection = Cell.getAntenneCollection(sflag, rowVal)
        If sflag = False Then
            Call deleteTempSheet
            ThisWorkbook.Worksheets(CELL_SHEET_NAME).rows(rowVal).Select
            Exit Sub
        End If
        For Each row In antenneCollection
            boardStr = row(2)
            antnStr = row(3)
            rsModel = row(4)
            rangeStr = row(5)
            If checkBoardBasedValid(boardStr) = False Or (Trim(antnStr) <> "" And checkDataValid(antnValueStr, antnStr) = False) _
            Or (Trim(rsModel) <> "" And checkDataValid(modelValueStr, rsModel) = False) Then
                Call MsgBox(getResByKey("wrongDataInput") & rangeStr, vbInformation, getResByKey("Warning"))
                Call deleteTempSheet
                ThisWorkbook.Worksheets(CELL_SHEET_NAME).Range(rangeStr).Select
                Exit Sub
            End If
            tempSheet.Cells(index, Cell_Index).value = row(0)
            If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
                tempSheet.Cells(index, Trx_Index).value = row(6)
            End If
            tempSheet.Cells(index, Sector_Index).value = row(1)
            tempSheet.Cells(index, Board_Index).value = boardStr
            tempSheet.Cells(index, Ante_Index).value = antnStr
            tempSheet.Cells(index, Model_Index).value = rsModel
            index = index + 1
        Next
    Next
End Sub

Private Function checkBoardBasedValid(tVal As String) As Boolean
        If tVal = "" Then
            checkBoardBasedValid = True
            Exit Function
        End If
        Dim tCount As Long
        Dim strArray() As String
        strArray = Split(tVal, "_")
        tCount = UBound(strArray)
        If tCount = 3 Then
            checkBoardBasedValid = True
        Else
            checkBoardBasedValid = False
        End If
End Function


Private Function checkDataValid(tValueStr As String, tVal As String) As Boolean
        Dim index As Long
        Dim strArray() As String
        strArray = Split(tValueStr, ",")
        For index = LBound(strArray) To UBound(strArray)
              If strArray(index) = tVal Then
                checkDataValid = True
                Exit Function
                End If
        Next
        checkDataValid = False
End Function


Private Function insertCellIdColumn() As Boolean
        Dim myAttrName As String
        Dim myCellMocName As String
        Dim constCellTempCol As Long
        Call getCellMocNameAndAttrName(myCellMocName, myAttrName)
        constCellTempCol = getColNum(CELL_SHEET_NAME, 2, myAttrName, myCellMocName)
        
        Dim cellsheet As Worksheet
        insertCellIdColumn = True
        Set cellsheet = ThisWorkbook.Worksheets(CELL_SHEET_NAME)
        Cell_Index = 1
        cellsheet.Cells(2, constCellTempCol).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, Cell_Index)
        Dim cellsStr As String
        cellsStr = ""
        If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
            cellsStr = cellsheet.Cells(Select_Line, constCellTempCol).value
        Else
            Dim index As Long
            For index = 2 To cellsheet.Range("a65536").End(xlUp).row
                If cellsheet.Cells(index, 1).value = SITE_NAME Then
                    If cellsStr <> "" Then
                         cellsStr = cellsStr + "," + cellsheet.Cells(index, constCellTempCol).value
                    Else
                        cellsStr = cellsheet.Cells(index, constCellTempCol).value
                    End If
                End If
            Next
        End If
        Dim cellRang As Range
        Set cellRang = ThisWorkbook.ActiveSheet.Range("A2:A" + CStr(2 + ROW_COUNT + 3))
        If cellsStr <> "" Then
                cellValueStr = cellsStr
                With cellRang.Validation
                   .Delete
                   .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=cellsStr
                End With
                ThisWorkbook.ActiveSheet.Columns(Cell_Index).ColumnWidth = Col_Width
        End If
        insertCellIdColumn = True
End Function

Public Sub insertTrxColumn()
        Trx_Index = 2
        ThisWorkbook.ActiveSheet.Cells(1, Sector_Index).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, Trx_Index)
        ThisWorkbook.ActiveSheet.Cells(1, Trx_Index).value = getResByKey("Frequency")

        Dim cellRang As Range
        Set cellRang = ThisWorkbook.ActiveSheet.Range("B2:B" + CStr(2 + ROW_COUNT + 3))
                With cellRang.Validation
                   .Delete
                   .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=trxValueStr
                End With
        ThisWorkbook.ActiveSheet.Columns(Trx_Index).ColumnWidth = Col_Width
End Sub


Private Function insertSectorIdColumn() As Boolean
        Dim mocName As String
        Dim attrName As String
        Dim sectorColumnName As String
        Dim columnIndex As Long
        Dim cellsheet As Worksheet
        
        Set cellsheet = ThisWorkbook.Worksheets(CELL_SHEET_NAME)
        Call getSectorMocNameAndAttr(mocName, attrName)
        sectorColumnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
        columnIndex = findColumnByName(cellsheet, sectorColumnName, 2)
        If columnIndex < 0 Then
            insertSectorIdColumn = False
            Exit Function
        End If
        If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
            Sector_Index = 3
        Else
            Sector_Index = 2
        End If
        cellsheet.Cells(2, columnIndex).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, Sector_Index)
        ThisWorkbook.ActiveSheet.Columns(Sector_Index).ColumnWidth = Col_Width
        insertSectorIdColumn = True
End Function

Private Function insertRxuBoardColumn() As Boolean
        insertRxuBoardColumn = True
        Dim brdStyleSheetName As String
        Dim grpCollection As Collection
        Dim brdStr As String
        Dim brdGrp
        Dim startRow As Long
        Dim endRow As Long
        Dim index As Long
        Dim btsIndex As Long
        Dim charStr As String
        Dim mainSheetName As String
        Dim mainSheet As Worksheet
        btsIndex = -1
        
        brdStyleSheetName = findBoardStyleSheet(btsIndex)
        If brdStyleSheetName = "" Then
                Call MsgBox(getResByKey("NoBoradStyle"), vbInformation, getResByKey("Warning"))
                Call deleteTempSheet
                mainSheetName = GetMainSheetName
                Set mainSheet = ThisWorkbook.Worksheets(mainSheetName)
                mainSheet.Select
                If btsIndex <> -1 Then
                    mainSheet.rows(btsIndex).Select
                End If
                insertRxuBoardColumn = False
                Exit Function
        End If
        
        brdStr = ""
        Set grpCollection = findBrdGroups
        Dim boardStyleSheet As Worksheet
        
        Set boardStyleSheet = ThisWorkbook.Worksheets(brdStyleSheetName)
        
        If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
            Board_Index = 4
            charStr = "D"
        Else
            Board_Index = 3
            charStr = "C"
        End If
        
        For Each brdGrp In grpCollection
            Call getStartAndEndRowNum(brdStyleSheetName, CStr(brdGrp), startRow, endRow)
            boardStyleSheet.Cells(startRow + 1, 1).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, Board_Index)
            For index = startRow + 2 To endRow
                If brdStr = "" Then
                    brdStr = boardStyleSheet.Cells(index, 1).value
                Else
                    brdStr = brdStr + "," + boardStyleSheet.Cells(index, 1).value
                End If
            Next
        Next
        
        Dim cellRang As Range
        Set cellRang = ThisWorkbook.ActiveSheet.Range(charStr + "2:" + charStr + CStr(2 + ROW_COUNT + 3))
        If brdStr <> "" Then
                boardValueStr = brdStr
                With cellRang.Validation
                   .Delete
                   .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=brdStr
                End With
                ThisWorkbook.ActiveSheet.Columns(Board_Index).ColumnWidth = Col_Width
        End If
End Function

Private Sub getStartAndEndRowNum(brdSheetName As String, ByRef groupName As String, ByRef groupNameStartRowNumber As Long, ByRef groupNameEndRowNumber As Long)
    Dim sh As Worksheet
    Set sh = ThisWorkbook.Worksheets(brdSheetName)
    groupNameStartRowNumber = getGroupNameStartRowNumber(sh, groupName)
    groupNameEndRowNumber = groupNameStartRowNumber + getCurrentRegionRowsCount(sh, groupNameStartRowNumber) - 1
End Sub

Private Function getCurrentRegionRowsCount(ByRef ws As Worksheet, ByRef startRowNumber As Long) As Long
    Dim RowNumber As Long
    Dim rowscount As Long
    rowscount = 1
    For RowNumber = startRowNumber + 1 To 2000
        If rowIsBlank(ws, RowNumber) = True Then
            Exit For
        Else
            rowscount = rowscount + 1
        End If
    Next RowNumber
    getCurrentRegionRowsCount = rowscount
End Function

Private Function findBrdGroups() As Collection
    Dim relationSheet As Worksheet
    Dim rowCount As Long
    Dim index As Long
    Dim grpCollection As New Collection
    Set relationSheet = ThisWorkbook.Worksheets("RELATION DEF")
    rowCount = relationSheet.Range("a65536").End(xlUp).row
    For index = 2 To rowCount
        If UCase(relationSheet.Cells(index, 6).value) = "RRU" Or UCase(relationSheet.Cells(index, 6).value) = "RFU" Or _
            UCase(relationSheet.Cells(index, 6).value) = "AARU" Then
                If Not Contains(grpCollection, UCase(relationSheet.Cells(index, 6).value)) Then
                    grpCollection.Add Item:=relationSheet.Cells(index, 2).value, key:=UCase(relationSheet.Cells(index, 6).value)
                End If
        End If
    Next
    Set findBrdGroups = grpCollection
End Function

Private Function findBoardStyleSheet(btsIndex As Long) As String
    Dim groupName As String
    Dim columnName As String
    Dim mainSheet As Worksheet
    Dim mainSheetName As String
    mainSheetName = GetMainSheetName
    Set mainSheet = ThisWorkbook.Worksheets(mainSheetName)
    
    Dim siteIndex As Long
    Dim brdStyleIndex As Long
    'site index
    groupName = ThisWorkbook.Worksheets(CELL_SHEET_NAME).Cells(1, 1).value
    columnName = ThisWorkbook.Worksheets(CELL_SHEET_NAME).Cells(2, 1).value
    siteIndex = findColNumByGrpNameAndColName(mainSheet, groupName, columnName)
    'brd index
    Call findBrdStyleGrpNameAndColName(mainSheetName, groupName, columnName)
    brdStyleIndex = findColNumByGrpNameAndColName(mainSheet, groupName, columnName)
    
    Dim row As Long
    For row = 2 To mainSheet.Range("a65536").End(xlUp).row
         If mainSheet.Cells(row, siteIndex).value = SITE_NAME Then
                findBoardStyleSheet = mainSheet.Cells(row, brdStyleIndex).value
                btsIndex = row
                Exit Function
         End If
    Next
    findBoardStyleSheet = ""
End Function


Private Function findColNumByGrpNameAndColName(sh As Worksheet, groupName As String, columnName As String)
    Dim m_colNum As Long
    For m_colNum = 1 To sh.Range("IV2").End(xlToLeft).column
        If get_GroupName(sh.name, m_colNum) = groupName Then
            If GetDesStr(columnName) = GetDesStr(sh.Cells(2, m_colNum).value) Then
                findColNumByGrpNameAndColName = m_colNum
                Exit For
            End If
        End If
    Next
End Function

Private Sub findBrdStyleGrpNameAndColName(sheetName As String, groupName As String, columanName As String)
    Dim relationSheet As Worksheet
    Dim rowCount As Long
    Dim index As Long
    
    Set relationSheet = ThisWorkbook.Worksheets("RELATION DEF")
    rowCount = relationSheet.Range("a65536").End(xlUp).row
    For index = 2 To rowCount
        If relationSheet.Cells(index, 1).value = sheetName And LCase(relationSheet.Cells(index, 4).value) = "true" And _
            LCase(relationSheet.Cells(index, 5).value) = "false" Then
                groupName = relationSheet.Cells(index, 2).value
                columanName = relationSheet.Cells(index, 3).value
                Exit Sub
            Exit Sub
        End If
    Next
End Sub

Private Function calculateRow() As Long
    Dim mocName As String
    Dim attrName As String
    Dim columnName As String
    Dim rowCount As Long
    Dim columnIndex As Long
    Dim SECTORINDEX As Long
    Dim cellsheet As Worksheet
    Dim index As Long
    Dim antenneIndex As Long
    Dim sectorArray As Validation
    Set cellsheet = ThisWorkbook.Worksheets(CELL_SHEET_NAME)
    '|fffd||fffd||421||fffd||fffd|ID|fffd||fffd||fffd||6b5||fffd||fffd||fffd|
    Dim constCellTempCol As Long
    Call getCellMocNameAndAttrName(mocName, attrName)
    constCellTempCol = getColNum(CELL_SHEET_NAME, 2, attrName, mocName)
        
    '|fffd||fffd||221||fffd||fffd||fffd||7f6||2ff||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call getAntenneMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    columnIndex = findColumnByName(cellsheet, columnName, 2)
    '|fffd||fffd||221||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call getSectorMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    SECTORINDEX = findColumnByName(cellsheet, columnName, 2)
    
    rowCount = 0
    If columnIndex <= 0 Then
        calculateRow = rowCount
        Exit Function
    End If
    Dim antennes As CAntennes
    If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
        Set antennes = New CAntennes
        antennes.cellId = cellsheet.Cells(Select_Line, constCellTempCol).value
        antennes.trxId = TrxInfoMgr.getFreqLstStrByGCell(CELL_SHEET_NAME, SITE_NAME, antennes.cellId)
        trxValueStr = antennes.trxId

        antennes.antennes = cellsheet.Cells(Select_Line, columnIndex).value
        antennes.sectorIds = cellsheet.Cells(Select_Line, SECTORINDEX).value
        antennes.ranges = cellsheet.Cells(Select_Line, columnIndex).address(False, False)
        antennes.row = Select_Line
        rowCount = rowCount + antennes.rowCount
        valueMap.Add Item:=antennes, key:=cellsheet.Cells(Select_Line, constCellTempCol).value
    Else
        For index = 3 To cellsheet.Range("a65536").End(xlUp).row
            If cellsheet.Cells(index, 1).value = SITE_NAME And cellsheet.Cells(index, columnIndex).value <> "" Then
                Set antennes = New CAntennes
                antennes.cellId = cellsheet.Cells(index, constCellTempCol).value
                antennes.trxId = ""
                antennes.antennes = cellsheet.Cells(index, columnIndex).value
                antennes.sectorIds = cellsheet.Cells(index, SECTORINDEX).value
                antennes.ranges = cellsheet.Cells(index, columnIndex).address(False, False)
                antennes.row = index
                rowCount = rowCount + antennes.rowCount
                If Not Contains(valueMap, cellsheet.Cells(index, constCellTempCol).value) Then
                    valueMap.Add Item:=antennes, key:=cellsheet.Cells(index, constCellTempCol).value
                End If
            End If
        Next
    End If
    
    calculateRow = rowCount
End Function

Private Function findColumnByName(sh As Worksheet, columnName As String, row As Long) As String
    Dim columnCount As Long
    Dim index As Long
    columnCount = sh.Range("IV" + CStr(row)).End(xlToLeft).column
    For index = 1 To columnCount
           If sh.Cells(row, index).value = columnName Then
                 findColumnByName = index
                 Exit Function
           End If
    Next
    findColumnByName = -1
End Function

Public Function findColumnFromRelationDef(sheetName As String, mocName As String, attrName As String) As String
    Dim relationSheet As Worksheet
    Dim rowCount As Long
    Dim index As Long
    
    Set relationSheet = ThisWorkbook.Worksheets("RELATION DEF")
    rowCount = relationSheet.Range("a65536").End(xlUp).row
    For index = 2 To rowCount
        If relationSheet.Cells(index, 1).value = sheetName And relationSheet.Cells(index, 6).value = mocName And _
            relationSheet.Cells(index, 7).value = attrName Then
            findColumnFromRelationDef = relationSheet.Cells(index, 3).value
            Exit Function
        End If
    Next
    findColumnFromRelationDef = ""
End Function

Private Sub getSectorMocNameAndAttr(ByRef mocName As String, ByRef attrName As String)
    If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
        mocName = "GTRXGROUPSECTOREQM"
        attrName = "SECTORID"
    ElseIf CELL_TYPE = 1 Then
        mocName = "ULOCELLSECTOREQM"
        attrName = "SECTORID"
    ElseIf CELL_TYPE = 2 Then
        mocName = "eUCellSectorEqm"
        attrName = "SECTORID"
    End If
End Sub

Private Sub getAntenneMocNameAndAttr(ByRef mocName As String, ByRef attrName As String)
    If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
        mocName = "GTRXGROUPSECTOREQM"
        attrName = "SECTORANTENNA"
    ElseIf CELL_TYPE = 1 Then
        mocName = "ULOCELLSECTOREQM"
        attrName = "SECTORANTENNA"
    ElseIf CELL_TYPE = 2 Then
        mocName = "eUCellSectorEqm"
        attrName = "SECTORANTENNA"
    End If
End Sub

Private Function getCellMocNameAndAttrName(ByRef mocName As String, ByRef attrName As String)
    If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
        attrName = "GLoCellID"
        mocName = "GLoCell"
    ElseIf CELL_TYPE = 1 Then
        attrName = "ULOCELLID"
        mocName = "ULOCELL"
    ElseIf CELL_TYPE = 2 Then
        attrName = "LocalCellId"
        mocName = "Cell"
    End If
End Function
Private Function cellSheetType(sheetName As String) As Long
    If sheetName = "GSM Cell" Or sheetName = "GSM|421||fffd||fffd|" Then
        If IsGBTSTemplate() Then
            cellSheetType = 21
        Else
            cellSheetType = 0
        End If
    ElseIf sheetName = "UMTS Cell" Or sheetName = "UMTS|421||fffd||fffd|" Then
        cellSheetType = 1
    ElseIf sheetName = "LTE Cell" Or sheetName = "LTE|421||fffd||fffd|" Then
        cellSheetType = 2
    Else
        cellSheetType = -1
    End If
End Function


Private Sub insertAntenneColumn()
    Dim referencedString As String
    Dim tmpSheet As Worksheet
    Dim RowNum As Long
    Dim mocName As String
    Dim attrName As String
    Dim columnName As String
    Dim antnIndex As Long
    Dim cellsheet As Worksheet
    Dim charStr As String
    
    referencedString = "R0A,R0B,R0C,R0D,R0E,R0F,R0G,R0H,R1A,R1B,R1C,R1D,R2A,R2B,R2C,R2D,R3A,R3B,R3C,R3D,R4A,R4B,R4C,R4D,R5A,R5B,R5C,R5D,R6A,R6B,R6C,R6D,R7A,R7B,R7C,R7D"
    
    Set cellsheet = ThisWorkbook.Worksheets(CELL_SHEET_NAME)
    Call getAntenneMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    antnIndex = findColumnByName(cellsheet, columnName, 2)
    
    If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
        Ante_Index = 5
        charStr = "E"
    Else
        Ante_Index = 4
        charStr = "D"
    End If
    
    cellsheet.Cells(2, antnIndex).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, Ante_Index)
    
    Dim antnRang As Range
    Set antnRang = ThisWorkbook.ActiveSheet.Range(charStr + "2:" + charStr + CStr(2 + ROW_COUNT + 3))
    If referencedString <> "" Then
            antnValueStr = referencedString
            With antnRang.Validation
               .Delete
               .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=referencedString
            End With
            ThisWorkbook.ActiveSheet.Columns(Ante_Index).ColumnWidth = Col_Width
    End If
End Sub

Public Sub insertAnteModelColumn()
         Dim charStr As String
         Dim referencedString As String
         
        If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
            Model_Index = 6
            charStr = "F"
        Else
            Model_Index = 5
            charStr = "E"
        End If
        referencedString = "RXTX_MODE,RX_MODE,TX_MODE"
        
        ThisWorkbook.ActiveSheet.Cells(1, Sector_Index).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, Model_Index)
        ThisWorkbook.ActiveSheet.Cells(1, Model_Index).value = getResByKey("anteModel")

        Dim cellRang As Range
        modelValueStr = referencedString
        Set cellRang = ThisWorkbook.ActiveSheet.Range(charStr + "2:" + charStr + CStr(2 + ROW_COUNT + 3))
                With cellRang.Validation
                   .Delete
                   .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=referencedString
                End With
        ThisWorkbook.ActiveSheet.Columns(Model_Index).ColumnWidth = Col_Width
End Sub

Private Function getAnteRSModelValue(rsModel As String, changeT As Long) As String
    If changeT = 0 Then
        If rsModel = "RX And TX" Then
            getAnteRSModelValue = "RXTX"
        Else
            getAnteRSModelValue = rsModel
        End If
    Else
         If rsModel = "RXTX" Then
            getAnteRSModelValue = "RX And TX"
        Else
            getAnteRSModelValue = rsModel
        End If
    End If
End Function

Private Sub writeBackData()
    If IsGBTSTemplate() Then
        Call writeGbtsBackData
        Exit Sub
    End If

On Error GoTo ErrorHandler
    Dim cellInfoMap As CMapValueObject
    Dim error As Boolean
    Set errCollect = New Collection
    If WRITESUCCESS = True Then
        error = checkUserData()
        If error = False Then
            Exit Sub
        End If
        If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
            Call writeGSMCellData
        Else
            Set cellInfoMap = genCellInfoMap()
            Call sortMapByKey(cellInfoMap, error)
            Call writeCellData(cellInfoMap)
        End If
    End If
    WRITESUCCESS = False
    Call deleteTempSheet
ErrorHandler:
End Sub

Private Function writeGSMCellData() As Collection
    Dim trxArray() As String
    Dim index As Long
    Dim RowNum As Long
    Dim maxRow As Long
    Dim trxId As String
    Dim sector As String
    Dim antenna As String
    Dim secStr As String
    Dim antaStr As String
    Dim tmpSheet As Worksheet
    Dim cellsheet As Worksheet
    Dim boardAnte As String
    Dim sectorId As String
    
    Set tmpSheet = ThisWorkbook.Worksheets(getResByKey("Temp Sheet"))
    secStr = "-1"
    antaStr = ""
    trxArray = Split(trxValueStr, ",")
    maxRow = tmpSheet.Range("a65536").End(xlUp).row
    For index = LBound(trxArray) To UBound(trxArray)
        sector = "-1"
        For RowNum = 2 To maxRow
            trxId = tmpSheet.Cells(RowNum, Trx_Index).value
            sectorId = tmpSheet.Cells(RowNum, Sector_Index).value
            If trxId = trxArray(index) Then
                boardAnte = tmpSheet.Cells(RowNum, Board_Index).value + "_" + tmpSheet.Cells(RowNum, Ante_Index).value + ":" + tmpSheet.Cells(RowNum, Model_Index).value
                If sector = "-1" Then
                    sector = sectorId
                    antenna = boardAnte
                Else
                    sector = sector + "," + sectorId
                    antenna = antenna + "," + boardAnte
                End If
            End If
        Next
        
        If sector = "-1" Then
            If secStr = "-1" Then
                secStr = ""
                antaStr = ""
            ElseIf index < UBound(trxArray) Then
                secStr = secStr + ";"
                antaStr = antaStr + ";"
            End If
        Else
            If secStr = "-1" Then
                secStr = sector
                antaStr = antenna
            Else
                secStr = secStr + ";" + sector
                antaStr = antaStr + ";" + antenna
            End If
        End If
    Next
    
    Dim mocName As String
    Dim attrName As String
    Dim columnName As String
    Dim antnIndex As Long
    Dim secIndex As Long
    
    Set cellsheet = ThisWorkbook.Worksheets(CELL_SHEET_NAME)
    Call getAntenneMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    antnIndex = findColumnByName(cellsheet, columnName, 2)
    '|fffd||fffd||221||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call getSectorMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    secIndex = findColumnByName(cellsheet, columnName, 2)
    
    cellsheet.Cells(Select_Line, secIndex).value = secStr
    cellsheet.Cells(Select_Line, antnIndex).value = antaStr
    
End Function


Private Sub deleteTempSheet()
    If IsGBTSTemplate() Then
        Call delTmpSht
        Exit Sub
    End If

    Dim tmpSheet As Worksheet
    Dim cellsheet As Worksheet
    InAdjustAntnPort = False
    If CELL_SHEET_NAME <> "" Then
        Set cellsheet = ThisWorkbook.Worksheets(CELL_SHEET_NAME)
        cellsheet.Activate
    End If
    Set tmpSheet = ThisWorkbook.Worksheets(getResByKey("Temp Sheet"))
    Call changeAlerts(False)
    tmpSheet.Delete
    Call changeAlerts(True)
End Sub


Private Function genCellInfoMap() As CMapValueObject
    Dim tmpSheet As Worksheet
    Dim maxRow As Long
    Dim RowNum As Long
    Dim cellInfoMap As CMapValueObject
    Dim tmpMap As CMap
    Dim cellId As String
    Dim sectorId As String
    Dim board As String
    Dim antn As String
    Dim model As String
    Dim boardInfo As String
    Dim tVal As CMap
    Dim sVal As String
    Dim isExist As Boolean
    Dim celldes As String
    Dim sectordes As String
    Dim antndes As String
    
    Set cellInfoMap = New CMapValueObject
    
    Set tmpSheet = ThisWorkbook.Worksheets(getResByKey("Temp Sheet"))
    
    maxRow = tmpSheet.Range("a65536").End(xlUp).row
    For RowNum = 2 To maxRow
        cellId = tmpSheet.Cells(RowNum, Cell_Index).value
        sectorId = tmpSheet.Cells(RowNum, Sector_Index).value
        board = tmpSheet.Cells(RowNum, Board_Index).value
        antn = tmpSheet.Cells(RowNum, Ante_Index).value
        model = tmpSheet.Cells(RowNum, Model_Index).value
        boardInfo = board & "_" & antn & ":" & model
        
        isExist = cellInfoMap.haskey(cellId)
        If isExist Then
            Set tVal = cellInfoMap.GetAt(cellId)
            isExist = tVal.haskey(sectorId)
            If isExist Then
                sVal = tVal.GetAt(sectorId)
                boardInfo = sVal + "," + boardInfo
                tVal.RemoveKey (sectorId)
            End If
            Call tVal.SetAt(sectorId, boardInfo)
        Else
            Set tmpMap = New CMap
            Call tmpMap.SetAt(sectorId, boardInfo)
            Call cellInfoMap.SetAt(cellId, tmpMap)
        End If
    Next
    Set genCellInfoMap = cellInfoMap
End Function

Private Function checkUserData() As Boolean
    Dim tmpSheet As Worksheet
    Dim errRangeCol As Collection
    Dim maxRow As Long
    Dim RowNum As Long
    Dim cellStr As String
    Dim sectorStr As String
    Dim boardStr As String
    Dim trxStr As String
    Dim antnStr As String
    Dim modelStr As String
    Dim errflag As Boolean
    Dim lineStr As String
    Dim tVal As Variant
    Dim eRange As Range
    Dim dupCol As Collection
    Dim dupStr As String
    Dim keyStr As String
    Dim trxCol As Collection '|423||fffd||fffd|GSM|421||fffd||fffd||fffd||fffd||1b5||fffd||fffd||fffd||fffd||bdbc||4aa||fffd||fffd||fffd||fffd|
    Dim trxSectorMap As New CMapValueObject '|423||fffd||fffd|GSM|fffd||fffd||421||fffd||fffd||fffd||fffd||fffd||fffd||fffd||ff||fffd||fffd||1b5||fffd||fffd||fffd||fffd||fffd||f5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4aa||4bb||fffd||fffd|
    
    checkUserData = True
    Set tmpSheet = ThisWorkbook.Worksheets(getResByKey("Temp Sheet"))
    Set errRangeCol = New Collection
    Set dupCol = New Collection
    Set trxCol = New Collection
    
    trxStr = ""
    
    maxRow = tmpSheet.Range("a65536").End(xlUp).row
    For RowNum = 2 To maxRow
        cellStr = tmpSheet.Cells(RowNum, Cell_Index).value
        sectorStr = tmpSheet.Cells(RowNum, Sector_Index).value
        boardStr = tmpSheet.Cells(RowNum, Board_Index).value
        antnStr = tmpSheet.Cells(RowNum, Ante_Index).value
        If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
            trxStr = tmpSheet.Cells(RowNum, Trx_Index).value
        End If
        modelStr = tmpSheet.Cells(RowNum, Model_Index).value
        
        errflag = checkInputData(tmpSheet, RowNum, cellStr, trxStr, sectorStr, boardStr, antnStr, modelStr, errRangeCol)
        If errflag Then
            If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
                trxStr = tmpSheet.Cells(RowNum, Trx_Index).value
                If Not Contains(trxCol, trxStr) Then
                    trxCol.Add Item:=trxStr, key:=trxStr
                End If
                
                If trxSectorMap.haskey(trxStr) Then
                    Dim col As New Collection
                    Set col = trxSectorMap.GetAt(trxStr)
                    If Not Contains(col, sectorStr) Then
                        col.Add Item:=sectorStr, key:=sectorStr
                        trxSectorMap.RemoveKey (trxStr)
                        Call trxSectorMap.SetAt(trxStr, col)
                    End If
                Else
                    Dim newcol As Collection
                    Set newcol = New Collection
                    newcol.Add Item:=sectorStr, key:=sectorStr
                    Call trxSectorMap.SetAt(trxStr, newcol)
                End If

                keyStr = cellStr + "_" + sectorStr + "_" + trxStr + "_" + boardStr + "_" + antnStr + "_" + modelStr
            Else
                keyStr = cellStr + "_" + sectorStr + "_" + boardStr + "_" + antnStr + "_" + modelStr
            End If
            If Contains(dupCol, keyStr) Then
                lineStr = dupCol(keyStr) + "," + str(RowNum)
                dupCol.Remove (keyStr)
            Else
                lineStr = str(RowNum)
            End If
            dupCol.Add Item:=lineStr, key:=keyStr
        End If
    Next
    
    If errRangeCol.count() <> 0 Then
        Call MsgBox(getResByKey("recordError"), vbInformation, getResByKey("Warning"))
        For Each tVal In errRangeCol
            Set eRange = tmpSheet.Range(tVal)
            eRange.Interior.colorIndex = 3
        Next
        Set errCollect = errRangeCol
        checkUserData = False
        Exit Function
    End If
    
    Dim lineSet As Variant
    Dim selectStr As String
    Set dupCollect = New Collection
    For Each tVal In dupCol
        If InStr(1, tVal, ",") <> 0 Then
            dupCollect.Add Item:=tVal, key:=tVal
            If dupStr = "" Then
                dupStr = tVal
                selectStr = tVal
            Else
                dupStr = dupStr + ";" + tVal
                selectStr = selectStr + "," + tVal
            End If
        End If
    Next
    
    If dupStr <> "" Then
        Call MsgBox(getResByKey("recordDuplicate") + dupStr, vbInformation, getResByKey("Warning"))
        lineSet = Split(selectStr, ",")
        For Each tVal In lineSet
            RowNum = CLng(tVal)
            tmpSheet.Range(Cells(RowNum, Cell_Index), Cells(RowNum, Model_Index)).Interior.colorIndex = 3
        Next
        checkUserData = False
        Exit Function
    End If
    
    
    If CELL_TYPE = 0 Or CELL_TYPE = 4 Then
        Dim trxArray() As String
        Dim errorTrx As String
        errorTrx = ""
        Dim index As Long
        trxArray = Split(trxValueStr, ",")
        For index = LBound(trxArray) To UBound(trxArray)
            If Not Contains(trxCol, trxArray(index)) Then
                If errorTrx = "" Then
                    errorTrx = trxArray(index)
                Else
                    errorTrx = errorTrx + "," + trxArray(index)
                End If
            End If
        Next
        
        If errorTrx <> "" Then
            Call MsgBox(getResByKey("trxNeedSet") + errorTrx, vbInformation, getResByKey("Warning"))
            checkUserData = False
            Exit Function
        End If
    End If
    
    
    If CELL_TYPE = 0 Then
        Dim sVal As Variant
        For Each sVal In trxSectorMap.KeyCollection
            If IsGSMMulCellVaild(sVal, trxSectorMap) = False Then
                Call MsgBox(getResByKey("sectorNeedSame") + errorTrx, vbInformation, getResByKey("Warning"))
                checkUserData = False
                Exit Function
            End If
        Next
    End If

End Function

Private Function IsGSMMulCellVaild(tVal As Variant, trxSectorMap As CMapValueObject)
    Dim col As Collection
    Dim sVal As Variant
    Dim val As Variant
    
    Set col = trxSectorMap.GetAt(tVal)
    For Each sVal In trxSectorMap.KeyCollection
        If tVal <> sVal Then
            Dim kcol As Collection
            Set kcol = trxSectorMap.GetAt(sVal)
            For Each val In col
                If Not Contains(kcol, CStr(val)) Then
                    IsGSMMulCellVaild = False
                    Exit Function
                End If
            Next
        End If
    Next
    IsGSMMulCellVaild = True
End Function



Private Function checkInputData(sheet As Worksheet, lineNo As Long, Cell As String, trx As String, _
        sector As String, board As String, antn As String, model As String, errRangeCol As Collection) As Boolean
        checkInputData = True
        Dim rangeStr As String
        If checkDataValid(cellValueStr, Cell) = False Then
            rangeStr = sheet.Cells(lineNo, Cell_Index).address(False, False)
            errRangeCol.Add Item:=rangeStr, key:=rangeStr
            checkInputData = False
        End If
    
        If (CELL_TYPE = 0 Or CELL_TYPE = 4) And checkDataValid(trxValueStr, trx) = False Then
            rangeStr = sheet.Cells(lineNo, Trx_Index).address(False, False)
            errRangeCol.Add Item:=rangeStr, key:=rangeStr
            checkInputData = False
        End If
    
        If Trim(sector) = "" Or isAInteger(sector) = False Then
            rangeStr = sheet.Cells(lineNo, Sector_Index).address(False, False)
            errRangeCol.Add Item:=rangeStr, key:=rangeStr
            checkInputData = False
        End If
        
        If checkDataValid(boardValueStr, board) = False Then
            rangeStr = sheet.Cells(lineNo, Board_Index).address(False, False)
            errRangeCol.Add Item:=rangeStr, key:=rangeStr
            checkInputData = False
        End If
            
        If checkDataValid(antnValueStr, antn) = False Then
            rangeStr = sheet.Cells(lineNo, Ante_Index).address(False, False)
            errRangeCol.Add Item:=rangeStr, key:=rangeStr
            checkInputData = False
        End If
        
        If checkDataValid(modelValueStr, model) = False Then
            rangeStr = sheet.Cells(lineNo, Model_Index).address(False, False)
            errRangeCol.Add Item:=rangeStr, key:=rangeStr
            checkInputData = False
        End If
        
End Function

Private Function isAInteger(ByRef tVal As String) As Boolean
    On Error GoTo ErrorHandler
    Dim k As Long
    If InStr(tVal, ".") <> 0 Then GoTo ErrorHandler
    k = CLng(tVal)
    If k <= 65535 And k >= 0 Then
        isAInteger = True
    Else
        isAInteger = False
    End If
    Exit Function
ErrorHandler:
    isAInteger = False
End Function

'Private Function existAntnPort(ByRef antnStr As String, ByRef tVal As String) As Boolean
'    Dim antenneArray() As String
'    Dim index As Long
'    antenneArray = Split(antnStr, ",")
'    For index = LBound(antenneArray) To UBound(antenneArray)
'        If antenneArray(index) = tVal Then
'            existAntnPort = True
'            Exit Function
'        End If
'    Next
'    existAntnPort = False
'End Function


Private Sub writeCellData(ByRef cellInfoMap As CMapValueObject)
    Dim cellsheet As Worksheet
    Dim maxRow As Long
    Dim RowNum As Long
    Dim baseStationName As String
    Dim cellId As String
    Dim keyVal As Variant
    Dim tmpVal As Variant
    Dim sectorStr As String
    Dim boradStr As String
    Dim tVal As CMap
    Dim mocName As String
    Dim attrName As String
    Dim columnName As String
    Dim antnIndex As Long
    Dim SECTORINDEX As Long
    Dim constCellTempCol As Long
    '|fffd||fffd||421||fffd||fffd|ID|fffd||fffd||fffd||6b5||fffd||fffd||fffd|
    Set cellsheet = ThisWorkbook.Worksheets(CELL_SHEET_NAME)
    Call getCellMocNameAndAttrName(mocName, attrName)
    constCellTempCol = getColNum(CELL_SHEET_NAME, 2, attrName, mocName)
        
    '|fffd||fffd||221||fffd||fffd||fffd||7f6||2ff||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call getAntenneMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    antnIndex = findColumnByName(cellsheet, columnName, 2)
    '|fffd||fffd||221||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call getSectorMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    SECTORINDEX = findColumnByName(cellsheet, columnName, 2)
    
    maxRow = cellsheet.Range("a65536").End(xlUp).row
    
    For RowNum = 3 To maxRow
            baseStationName = cellsheet.Cells(RowNum, 1).value
            cellId = cellsheet.Cells(RowNum, constCellTempCol).value
            sectorStr = ""
            boradStr = ""
            If baseStationName = SITE_NAME Then
                For Each keyVal In cellInfoMap.KeyCollection
                    If cellId = keyVal Then
                        Set tVal = cellInfoMap.GetAt(keyVal)
                        For Each tmpVal In tVal.KeyCollection
                            If sectorStr = "" Then
                                sectorStr = tmpVal
                                boradStr = tVal.GetAt(tmpVal)
                            Else
                                sectorStr = sectorStr & "," & tmpVal
                                boradStr = boradStr & ";" & tVal.GetAt(tmpVal)
                            End If
                        Next
                    End If
               Next
                cellsheet.Cells(RowNum, SECTORINDEX).value = sectorStr
                cellsheet.Cells(RowNum, antnIndex).value = boradStr
            End If
    Next
End Sub


Private Sub sortMapByKey(ByRef mapObject As CMapValueObject, error As Boolean)
    On Error GoTo ErrorHandler
    Dim tmpValueMap As CMapValueObject
    Dim tCount As Long
    Dim keyVal As Variant
    Dim tmpVal As Variant
    Dim tVal As CMap
    Dim tmpMap As CMap
    Dim keyArray() As Variant
    Dim index As Long
    Dim antnStr As String
    Dim secStr As String
    Set tmpValueMap = New CMapValueObject
    error = False
    For Each keyVal In mapObject.KeyCollection
        Set tVal = mapObject.GetAt(keyVal)
        tCount = tVal.KeyCollection.count
        ReDim keyArray(tCount - 1)
        index = 0
        For Each tmpVal In tVal.KeyCollection
            keyArray(index) = CLng(tmpVal)
            index = index + 1
        Next
        Call QuickSort(keyArray())
        Set tmpMap = New CMap
        For index = LBound(keyArray) To UBound(keyArray)
            secStr = CStr(keyArray(index))
            If tVal.haskey(secStr) = False Then Exit Sub
            antnStr = tVal.GetAt(secStr)
            Call getSortedStr(antnStr)
            Call tmpMap.SetAt(secStr, antnStr)
        Next
        Call tmpValueMap.SetAt(keyVal, tmpMap)
    Next
    Set mapObject = tmpValueMap
ErrorHandler:
    error = True
End Sub

Private Sub getSortedStr(ByRef infoStr As String)
    Dim strArray() As Variant
    Dim tmpArray As Variant
    Dim index As Long
    Dim tCount As Long
    Dim tmpStr As String
    tmpArray = Split(infoStr, ",")
    tCount = UBound(tmpArray) - LBound(tmpArray)
    ReDim strArray(tCount) As Variant
    For index = LBound(tmpArray) To UBound(tmpArray)
        strArray(index) = tmpArray(index)
    Next
    Call QuickSort(strArray())
    tmpStr = ""
    
    For index = LBound(strArray) To UBound(strArray)
        If tmpStr = "" Then
            tmpStr = strArray(index)
        Else
            tmpStr = tmpStr & "," & strArray(index)
        End If
    Next
    infoStr = tmpStr
End Sub

Private Sub changeAlerts(ByRef flag As Boolean)
    Application.EnableEvents = flag
    Application.DisplayAlerts = flag
    Application.ScreenUpdating = flag
End Sub

Public Sub QuickSort(ByRef lngArray() As Variant)
    Dim iLBound As Long
    Dim iUBound As Long
    Dim iTemp As Variant
    Dim iOuter As Long
    Dim iMax As Long
    
    iLBound = LBound(lngArray)
    iUBound = UBound(lngArray)

    If (iUBound - iLBound) Then
        For iOuter = iLBound To iUBound
            If lngArray(iOuter) > lngArray(iMax) Then iMax = iOuter
        Next iOuter

        iTemp = lngArray(iMax)
        lngArray(iMax) = lngArray(iUBound)
        lngArray(iUBound) = iTemp

        Call InnerQuickSort(lngArray, iLBound, iUBound)
    End If
End Sub


Private Sub InnerQuickSort(ByRef lngArray() As Variant, ByVal iLeftEnd As Long, ByVal iRightEnd As Long)
    Dim iLeftCur As Long
    Dim iRightCur As Long
    Dim iPivot As Variant
    Dim iTemp As Variant

    If iLeftEnd >= iRightEnd Then Exit Sub

    iLeftCur = iLeftEnd
    iRightCur = iRightEnd + 1
    iPivot = lngArray(iLeftEnd)
    
    Do
        Do
            iLeftCur = iLeftCur + 1
        Loop While lngArray(iLeftCur) < iPivot

        Do
            iRightCur = iRightCur - 1
        Loop While lngArray(iRightCur) > iPivot
        
        If iLeftCur >= iRightCur Then Exit Do
        
        iTemp = lngArray(iLeftCur)
        lngArray(iLeftCur) = lngArray(iRightCur)
        lngArray(iRightCur) = iTemp
    Loop

    lngArray(iLeftEnd) = lngArray(iRightCur)
    lngArray(iRightCur) = iPivot
    Call InnerQuickSort(lngArray, iLeftEnd, iRightCur - 1)
    Call InnerQuickSort(lngArray, iRightCur + 1, iRightEnd)
End Sub

Sub deleteFreqAssoEqm(cellRow As Long, freqIndex As Long)
End Sub
Attribute VB_Name = "CapacityGbtsCell"

Option Explicit

Public hyperLintFlag As Boolean
Private Const CELL_BAR_NAME = "SectorEqmBar"
Private Const FINISH_BAR_NAME = "AdjustFinishBar"
Private Const CANCEL_BAR_NAME = "AdjustCancelBar"

Private SITE_NAME As String
Private WRITESUCCESS As Boolean

Private CELL_SHEET_NAME As String
Private CELL_TYPE As Long
Private ROW_COUNT As Long
Private cellValueStr As String
Private boardValueStr As String
Private portNoValueStr As String
Private antnValueStr As String
Private antnGrpIDValueStr As String
Private valueMap As Collection
Private Const CON_SHARP = "#"
Private Const CON_BRACKET_RIGHT = "]"
Private Const CON_BRACKET_LEFT = "["
Private Const CON_COMMA = ","
Private Const NormalPattern = 1
Public Sub AddTrxBinds(siteName As String, CellSheetName As String)
    On Error GoTo ErrorHandler
    Set valueMap = New Collection
    SITE_NAME = siteName
    WRITESUCCESS = False
    CELL_SHEET_NAME = CellSheetName
    CELL_TYPE = cellSheetType(CellSheetName)
    
    Dim chkPassed As Boolean
    chkPassed = True
    ROW_COUNT = calculateRow(chkPassed)
    If Not chkPassed Then
        Exit Sub
    End If
    
    ThisWorkbook.Worksheets.Add after:=ThisWorkbook.ActiveSheet
    ThisWorkbook.ActiveSheet.name = getResByKey("Temp Sheet")
    
    Call createTempBar
    Call initMenuStatus(ThisWorkbook.ActiveSheet)
    InAdjustAntnPort = True
    If Not insertCellIdColumn() Then
        Exit Sub
    End If
    If Not insertFreqColumn() Then
        Exit Sub
    End If
    'Exit Sub
    If Not insertRxuBoardColumn() Then
        Call delTmpSht
        Exit Sub
    End If
        
    Call insertAntenneColumn
    
    Call insertAntenneGrpColumn
    
    Call writeData
    
    Call AdjustSheetStyle
    
    WRITESUCCESS = True
    Exit Sub
ErrorHandler:
    WRITESUCCESS = False
    
End Sub

Private Sub AdjustSheetStyle()
    Dim tmpSheet As Worksheet
    Dim sheetRange As Range
    Set tmpSheet = ThisWorkbook.Worksheets(getResByKey("Temp Sheet"))
    With tmpSheet.Cells.Font
        .name = "Arial"
        .Size = 10
    End With
    With tmpSheet.Range(Cells(2, 1), Cells(1 + ROW_COUNT, 6))
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders.LineStyle = xlContinuous
    End With
End Sub

Private Function existToolBar(ByRef barName As String) As Boolean
    On Error GoTo ErrorHandler
    existToolBar = True
    Dim bar As CommandBar
    Set bar = CommandBars(barName)
    Exit Function
ErrorHandler:
    existToolBar = False
End Function


Private Sub writeData()
    Dim Cell As CAntGBts
    Dim row As Variant
    Dim index As Long
    
    Dim boardStr As String
    Dim antnStr As String
    Dim antnGrpIdStr As String
    Dim tempSheet As Worksheet
    Dim antenneCollection As Collection
    Dim rangeStr As String
    Dim portStr As String
    
    
    Set tempSheet = ThisWorkbook.Worksheets(getResByKey("Temp Sheet"))
    index = 2
    For Each Cell In valueMap
        Set antenneCollection = Cell.getAntenneCollection
        
        For Each row In antenneCollection
            'boardStr = row(2)
            'rangeStr = row(3)
            'rangeStr = row(3)
            'antnStr = row(4)
            'antnGrpIdStr = row(5)
            
            tempSheet.Cells(index, 1).value = row(0)
            tempSheet.Cells(index, 2).value = row(1)
            tempSheet.Cells(index, 3).value = row(2)
            tempSheet.Cells(index, 4).value = row(3)
            tempSheet.Cells(index, 5).value = row(4)
            If row(4) <> "BY_ANTGRP" Then
                tempSheet.Cells(index, 6).Interior.colorIndex = SolidColorIdx
                tempSheet.Cells(index, 6).Interior.Pattern = SolidPattern
                tempSheet.Cells(index, 6).value = ""
                'tempSheet.Cells(index, 6).Validation.ShowInput = False
            Else
                tempSheet.Cells(index, 6).value = row(5)
            End If
            index = index + 1
        Next
    Next
End Sub

Private Function checkDataValid(tValueStr As String, tVal As String, allowEmpty As Boolean) As Boolean
        If allowEmpty And ("" = tVal) Then
            checkDataValid = True
            Exit Function
        End If
        
        Dim index As Long
        Dim strArray() As String
        strArray = Split(tValueStr, ",")
        For index = LBound(strArray) To UBound(strArray)
              If strArray(index) = tVal Then
                checkDataValid = True
                Exit Function
                End If
        Next
        checkDataValid = False
End Function


Private Function insertCellIdColumn() As Boolean
        Dim myAttrName As String
        Dim myCellMocName As String
        Dim constCellTempCol As Long
        Call getCellMocNameAndAttrName(myCellMocName, myAttrName)
        constCellTempCol = getColNum(CELL_SHEET_NAME, 2, myAttrName, myCellMocName)
        
        Dim cellsheet As Worksheet
        insertCellIdColumn = True
        Set cellsheet = ThisWorkbook.Worksheets(CELL_SHEET_NAME)
        cellsheet.Cells(2, constCellTempCol).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, 1)
        ThisWorkbook.ActiveSheet.Cells(1, 1).ClearComments

        '|fffd||fffd||3aa||fffd||2f8||fffd||2bd|
        ThisWorkbook.ActiveSheet.Cells(1, 1).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, 2)
        ThisWorkbook.ActiveSheet.Cells(1, 2).value = ""
        ThisWorkbook.ActiveSheet.Cells(1, 1).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, 3)
        ThisWorkbook.ActiveSheet.Cells(1, 3).value = ""
        ThisWorkbook.ActiveSheet.Cells(1, 1).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, 4)
        ThisWorkbook.ActiveSheet.Cells(1, 4).value = ""
        ThisWorkbook.ActiveSheet.Cells(1, 1).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, 5)
        ThisWorkbook.ActiveSheet.Cells(1, 5).value = ""
        ThisWorkbook.ActiveSheet.Cells(1, 1).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, 6)
        ThisWorkbook.ActiveSheet.Cells(1, 6).value = ""
        Dim cellsStr As String
        cellsStr = ""
        Dim index As Long
        For index = 2 To cellsheet.Range("a65536").End(xlUp).row
            If cellsheet.Cells(index, getGcellBTSNameCol(CELL_SHEET_NAME)).value = SITE_NAME Then
                If cellsStr <> "" Then
                    cellsStr = cellsStr + "," + cellsheet.Cells(index, constCellTempCol).value
                Else
                    cellsStr = cellsheet.Cells(index, constCellTempCol).value
                End If
            End If
        Next
        Dim cellRang As Range
        Set cellRang = ThisWorkbook.ActiveSheet.Range("A2:A" + CStr(1 + ROW_COUNT))
        If cellsStr <> "" Then
                cellValueStr = cellsStr
                With cellRang.Validation
                   .Delete
                   .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=cellsStr
                End With
        End If

        insertCellIdColumn = True
End Function

Private Function insertFreqColumn() As Boolean
        
        ThisWorkbook.ActiveSheet.Cells(1, 2).value = getResByKey("GCELLFREQ")
        
        insertFreqColumn = True
End Function
Private Function insertAntenneGrpColumn() As Boolean
    Dim brdStyleSheetName As String
    Dim boardStyleSheet As Worksheet
    Dim dspCategory As String
    Dim innerCategory As String
    Dim antGrpIdStr As String
    Dim startRow As Long
    Dim endRow As Long
    Dim index As Long
    
    insertAntenneGrpColumn = True
    
    brdStyleSheetName = findBoardStyleSheet
    dspCategory = findAntGrpName
    innerCategory = "BTSANTENNAGROUP"
    
    ThisWorkbook.ActiveSheet.Cells(1, 6).value = getResByKey("ANTGROUPID")
    
    If Not ("" = brdStyleSheetName) Then
        Set boardStyleSheet = ThisWorkbook.Worksheets(brdStyleSheetName)
        If Not ("" = dspCategory) Then
            Call getStartAndEndRowNum(brdStyleSheetName, dspCategory, startRow, endRow)
            Dim antGrpIdColName As String
            Dim mocName As String
            Dim attrName As String
            Dim colNo As Long
                    
            Call getAntGrpIdMocNameAndAttr(mocName, attrName)
            antGrpIdColName = getColNameBaseMapDef(getResByKey("Board Style"), attrName, innerCategory)
            colNo = getColNumByName(brdStyleSheetName, startRow + 1, antGrpIdColName)

            For index = startRow + 2 To endRow
                If antGrpIdStr = "" Then
                    antGrpIdStr = boardStyleSheet.Cells(index, colNo).text
                Else
                    antGrpIdStr = antGrpIdStr + "," + boardStyleSheet.Cells(index, colNo).text
                End If
            Next
        End If
    Else
        MsgBox getResByKey("brdstylecannotbenull") & SITE_NAME, vbExclamation, getResByKey("Warning")
        insertAntenneGrpColumn = False
        
        Exit Function
    End If
    
    Dim cellRang As Range
    Set cellRang = ThisWorkbook.ActiveSheet.Range("F2:F" + CStr(1 + ROW_COUNT))
    
    If antGrpIdStr <> "" Then
            antnGrpIDValueStr = antGrpIdStr
            With cellRang.Validation
               .Delete
               .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=antGrpIdStr
            End With
    End If
End Function

Private Function insertRxuBoardColumn() As Boolean
        Dim brdStyleSheetName As String
        Dim grpCollection As Collection
        Dim brdStr As String
        Dim brdGrp
        Dim startRow As Long
        Dim endRow As Long
        Dim index As Long
        Dim colNo As Long
             
        
        insertRxuBoardColumn = True
        
        brdStyleSheetName = findBoardStyleSheet
        brdStr = ""
        Set grpCollection = findBrdGroups
        Dim boardStyleSheet As Worksheet
                
        If Not ("" = brdStyleSheetName) Then
            Set boardStyleSheet = ThisWorkbook.Worksheets(brdStyleSheetName)
            For Each brdGrp In grpCollection
                Dim strArr() As String
                strArr = Split(CStr(brdGrp), CON_SHARP)
                
                Dim dspCategory As String
                dspCategory = strArr(LBound(strArr))
                Dim innerCategory As String
                innerCategory = strArr(UBound(strArr))
                
                Call getStartAndEndRowNum(brdStyleSheetName, dspCategory, startRow, endRow)
                boardStyleSheet.Cells(startRow + 1, 1).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, 3)
                ThisWorkbook.ActiveSheet.Cells(1, 3).ClearComments
                
              
                Dim brdNoColName As String
                Dim mocName As String
                Dim attrName As String
                        
                Call getPhybrdMocNameAndAttr(mocName, attrName)
                brdNoColName = getColNameBaseMapDef(getResByKey("Board Style"), attrName, innerCategory)
                colNo = getColNumByName(brdStyleSheetName, startRow + 1, brdNoColName)

                For index = startRow + 2 To endRow
                    If brdStr = "" Then
                        brdStr = boardStyleSheet.Cells(index, colNo).value
                    Else
                        brdStr = brdStr + "," + boardStyleSheet.Cells(index, colNo).value
                    End If
                Next
            Next
        Else
            MsgBox getResByKey("brdstylecannotbenull") & SITE_NAME, vbExclamation, getResByKey("Warning")
            insertRxuBoardColumn = False
            Exit Function
        End If
        
        
        Dim cellRang As Range
        Set cellRang = ThisWorkbook.ActiveSheet.Range("C2:C" + CStr(1 + ROW_COUNT))
        If brdStr <> "" Then
                boardValueStr = brdStr
                With cellRang.Validation
                   .Delete
                   .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=brdStr
                End With
        End If
        
End Function


Private Sub getStartAndEndRowNum(brdSheetName As String, ByRef groupName As String, ByRef groupNameStartRowNumber As Long, ByRef groupNameEndRowNumber As Long)
    Dim sh As Worksheet
    Set sh = ThisWorkbook.Worksheets(brdSheetName)
    groupNameStartRowNumber = getGroupNameStartRowNumber(sh, groupName)
    groupNameEndRowNumber = groupNameStartRowNumber + getCurrentRegionRowsCount(sh, groupNameStartRowNumber) - 1
End Sub

Private Function getCurrentRegionRowsCount(ByRef ws As Worksheet, ByRef startRowNumber As Long) As Long
    Dim RowNumber As Long
    Dim rowscount As Long
    rowscount = 1
    For RowNumber = startRowNumber + 1 To 2000
        If rowIsBlank(ws, RowNumber) = True Then
            Exit For
        Else
            rowscount = rowscount + 1
        End If
    Next RowNumber
    getCurrentRegionRowsCount = rowscount
End Function

Private Function findBrdGroups() As Collection
    Dim relationSheet As Worksheet
    Dim rowCount As Long
    Dim index As Long
    Dim grpCollection As New Collection
    Set relationSheet = ThisWorkbook.Worksheets("RELATION DEF")
    rowCount = relationSheet.Range("a65536").End(xlUp).row
    For index = 2 To rowCount
        If UCase(relationSheet.Cells(index, 6).value) = "BTSTRXBRD" Or UCase(relationSheet.Cells(index, 6).value) = "BTSRXUBRD" Then ' Or _
            'UCase(relationSheet.Cells(index, 6).value) = "BTSBRD" Then
                If Not Contains(grpCollection, UCase(relationSheet.Cells(index, 6).value)) Then
                    grpCollection.Add Item:=relationSheet.Cells(index, 2).value + CON_SHARP + UCase(relationSheet.Cells(index, 6).value), key:=UCase(relationSheet.Cells(index, 6).value)
                End If
        End If
    Next
    Set findBrdGroups = grpCollection
End Function
Private Function findAntGrpName() As String
    Dim mappingDefSht As Worksheet
    Dim index As Long
    Dim rowCount As Long
    Set mappingDefSht = ThisWorkbook.Worksheets("MAPPING DEF")
    rowCount = mappingDefSht.Range("a65536").End(xlUp).row
    For index = 2 To rowCount
        If UCase(mappingDefSht.Cells(index, 4).value) = "BTSANTENNAGROUP" Then
            findAntGrpName = mappingDefSht.Cells(index, 2).text
            Exit Function
        End If
    Next
End Function


Private Function findBoardStyleSheet() As String
    Dim groupName As String
    Dim columnName As String
    Dim mainSheet As Worksheet
    Dim mainSheetName As String
    mainSheetName = GetMainSheetName
    Set mainSheet = ThisWorkbook.Worksheets(mainSheetName)
    
    Dim siteNameCol As Long
    Dim brdStyleIndex As Long
    'site
    groupName = get_GroupName(mainSheetName, getTransBTSNameCol(mainSheetName))
    columnName = ThisWorkbook.Worksheets(mainSheetName).Cells(2, getTransBTSNameCol(mainSheetName)).value
    siteNameCol = findColNumByGrpNameAndColName(mainSheet, groupName, columnName)
    'brd
    Call findBrdStyleGrpNameAndColName(mainSheetName, groupName, columnName)
    brdStyleIndex = findColNumByGrpNameAndColName(mainSheet, groupName, columnName)
    
    Dim row As Long
    For row = 2 To mainSheet.Range("b65536").End(xlUp).row
         If mainSheet.Cells(row, siteNameCol).value = SITE_NAME Then
                findBoardStyleSheet = mainSheet.Cells(row, brdStyleIndex).value
                Exit Function
         End If
    Next
    findBoardStyleSheet = ""
End Function


Private Function findColNumByGrpNameAndColName(sh As Worksheet, groupName As String, columnName As String)
    Dim m_colNum As Long
    For m_colNum = 1 To sh.Range("IV2").End(xlToLeft).column
        If get_GroupName(sh.name, m_colNum) = groupName Then
            If GetDesStr(columnName) = GetDesStr(sh.Cells(2, m_colNum).value) Then
                findColNumByGrpNameAndColName = m_colNum
                Exit For
            End If
        End If
    Next
End Function

Private Sub findBrdStyleGrpNameAndColName(sheetName As String, groupName As String, columnName As String)
    Dim colNum As Long
    
    colNum = getColNum(GetMainSheetName, 2, "BRDSTYLE", "BTS")
    groupName = get_GroupName(GetMainSheetName, colNum)
    columnName = get_ColumnName(GetMainSheetName, colNum)

End Sub

Private Function calculateRow(ByRef chkPassed As Boolean) As Long
    Dim mocName As String
    Dim attrName As String
    Dim columnName As String
    Dim rowCount As Long
    Dim brdCol As Long
    Dim brdPort As Long
    Dim cellsheet As Worksheet
    Dim index As Long
    Dim antenneIndex As Long
    Dim antenneGrpIdex As Long
    Dim sectorArray As Validation
    Dim trxNumIndex As Long
    Dim bchIndex As Long
    Dim tchIndex As Long
    Dim cellBandIndex As Long
    Dim cellBand As String
    Dim freqs As String
    Dim trxIndex As Long
            
    Set cellsheet = ThisWorkbook.Worksheets(CELL_SHEET_NAME)
    '|fffd||fffd||421||fffd||fffd|ID|fffd||fffd||fffd||6b5||fffd||fffd||fffd|
    Dim constCellTempCol As Long
    Call getCellMocNameAndAttrName(mocName, attrName)
    constCellTempCol = getColNum(CELL_SHEET_NAME, 2, attrName, mocName)
        
    Call getMainBcchAttrName(mocName, attrName)
    bchIndex = getColNum(CELL_SHEET_NAME, 2, attrName, mocName)
    
    Call getTchAttrName(mocName, attrName)
    tchIndex = getColNum(CELL_SHEET_NAME, 2, attrName, mocName)
        
    '|fffd||fffd||221||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call getPhybrdMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    brdCol = findColumnByName(cellsheet, columnName, 2)
    '|fffd||fffd||221||fffd||fffd||fffd||fffd||2ff||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call getBrdPortMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    brdPort = findColumnByName(cellsheet, columnName, 2)
    '|fffd||fffd||221||fffd||fffd||fffd||7f6||2ff||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call getAntPorNoMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    antenneIndex = findColumnByName(cellsheet, columnName, 2)
    
    Call getAntGrpIdMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    antenneGrpIdex = findColumnByName(cellsheet, columnName, 2)
    '|fffd||fffd||221||fffd||fffd||1b5||fffd||fffd||fffd||fffd|
    Call getTrxNumMocNameAndAttr(mocName, attrName)
    trxNumIndex = getColNum(CELL_SHEET_NAME, 2, attrName, mocName)
    '|fffd||fffd||221||421||fffd||fffd||1b5||fffd||fffd|
    Call getCellFreqNameAndAttrName(mocName, attrName)
    cellBandIndex = getColNum(CELL_SHEET_NAME, 2, attrName, mocName)
    
    rowCount = 0
    If brdCol <= 0 Then
        calculateRow = rowCount
        Exit Function
    End If
    Dim trxNumStr As String
    
    Dim ant As CAntGBts
    For index = 3 To cellsheet.Range("a65536").End(xlUp).row
        If cellsheet.Cells(index, getGcellBTSNameCol(CELL_SHEET_NAME)).value = SITE_NAME Then
            Set ant = New CAntGBts
            trxNumStr = cellsheet.Cells(index, trxNumIndex).value
            cellBand = cellsheet.Cells(index, cellBandIndex).value
                        
            Dim trxNumArr() As String
            Dim elNo As Long
            Dim curCellTrxNum As Long
            curCellTrxNum = 0
            trxNumArr = Split(trxNumStr, ",")
            For elNo = LBound(trxNumArr) To UBound(trxNumArr)
                curCellTrxNum = curCellTrxNum + trxNumArr(elNo)
                trxIndex = elNo
            Next
            ant.trxNum = curCellTrxNum
            
            Dim tchFreqs As String
            tchFreqs = cellsheet.Cells(index, tchIndex).value
            
            If (Trim(tchFreqs) <> "") Then
                If Trim(cellsheet.Cells(index, bchIndex).value) <> "" Then
                    tchFreqs = "," + tchFreqs
                    freqs = cellsheet.Cells(index, bchIndex).value + tchFreqs
                Else
                    freqs = tchFreqs
                End If
            End If
            
            If trxIndex = 1 Then
                Call changeFreqs(freqs, trxNumStr, cellBand)
                ant.freqNos = freqs
            Else
                ant.freqNos = cellsheet.Cells(index, bchIndex).value + tchFreqs
            End If
            
            
            ant.cellId = cellsheet.Cells(index, constCellTempCol).value
            ant.brds = cellsheet.Cells(index, brdCol).value
            
            Dim portNo As String
            portNo = cellsheet.Cells(index, brdPort).value
            ant.portNos = replaceStr(portNo, "NA", "")
            
            Dim antNo As String
            antNo = cellsheet.Cells(index, antenneIndex).value
            ant.antNo = replaceStr(antNo, "NA", "")
            
            Dim antGrpId As String
            antGrpId = cellsheet.Cells(index, antenneGrpIdex).value
            ant.antGrpId = replaceStr(antGrpId, "NA", "")
            
            ant.ranges = cellsheet.Cells(index, brdCol).address(False, False)
            
            chkPassed = ant.commitData()
            If Not chkPassed Then
                Exit Function
            End If
            
            rowCount = rowCount + ant.getAntenneCollection.count
                        
            If Not Contains(valueMap, cellsheet.Cells(index, constCellTempCol).value) Then
                valueMap.Add Item:=ant, key:=cellsheet.Cells(index, constCellTempCol).value
            End If
        End If
    Next
    calculateRow = rowCount
End Function
Private Function replaceStr(str As String, oldStr As String, newStr As String) As String
    Dim strArray() As String
    strArray = Split(str, ",")
    replaceStr = ""
    Dim index As Long
    For index = LBound(strArray) To UBound(strArray)
        Dim number As String
        number = strArray(index)
        If number = oldStr Then
            number = newStr
        End If
        replaceStr = replaceStr + number + ","
    Next
    If Trim(replaceStr) <> "" Then
        replaceStr = Left(replaceStr, Len(replaceStr) - 1)
    End If
End Function

Private Function findColumnByName(sh As Worksheet, columnName As String, row As Long) As String
    Dim columnCount As Long
    Dim index As Long
    columnCount = sh.Range("IV" + CStr(row)).End(xlToLeft).column
    For index = 1 To columnCount
           If sh.Cells(row, index).value = columnName Then
                 findColumnByName = index
                 Exit Function
           End If
    Next
    findColumnByName = -1
End Function

Private Function findColumnFromSingleRelationDef(sheetName As String, mocName As String, _
    attrName As String, srcSheetName As String) As String
    
    Dim relationSheet As Worksheet
    Dim rowCount As Long
    Dim index As Long
    
    Set relationSheet = ThisWorkbook.Worksheets(srcSheetName)
    rowCount = relationSheet.Range("a65536").End(xlUp).row
    For index = 2 To rowCount
        If relationSheet.Cells(index, 1).value = sheetName And relationSheet.Cells(index, 6).value = mocName And _
            relationSheet.Cells(index, 7).value = attrName Then
            findColumnFromSingleRelationDef = relationSheet.Cells(index, 3).value
            Exit Function
        End If
    Next
    
    findColumnFromSingleRelationDef = ""
End Function


Private Function findColumnFromRelationDef(sheetName As String, mocName As String, attrName As String) As String
    Dim tmpStr As String
    
    tmpStr = findColumnFromSingleRelationDef(sheetName, mocName, attrName, "RELATION DEF")
    If Not "" = tmpStr Then
        findColumnFromRelationDef = tmpStr
    Else
        findColumnFromRelationDef = findColumnFromSingleRelationDef(sheetName, mocName, attrName, "RELATION_EXT")
    End If
End Function

Private Sub getFreqMocNameAndAttr(ByRef mocName As String, ByRef attrName As String)
    If CELL_TYPE = 21 Then
        mocName = "TRXINFO"
        attrName = "BCCHFREQ"
    End If
End Sub

Private Sub getPhybrdMocNameAndAttr(ByRef mocName As String, ByRef attrName As String)
    If CELL_TYPE = 21 Then
        attrName = "BRDNO"
        mocName = "TRXBIND2PHYBRD"
    End If
End Sub


Private Sub getBrdPortMocNameAndAttr(ByRef mocName As String, ByRef attrName As String)
    If CELL_TYPE = 21 Then
        attrName = "TRXPN"
        mocName = "TRXBIND2PHYBRD"
    End If
End Sub

Private Sub getAntPorNoMocNameAndAttr(ByRef mocName As String, ByRef attrName As String)
    If CELL_TYPE = 21 Then
        attrName = "ANTPASSNO"
        mocName = "TRXBIND2PHYBRD"
    End If
End Sub
Private Sub getAntGrpIdMocNameAndAttr(ByRef mocName As String, ByRef attrName As String)
    If CELL_TYPE = 21 Then
        attrName = "ANTENNAGROUPID"
        mocName = "TRXBIND2PHYBRD"
    End If
End Sub

Private Sub getTrxNumMocNameAndAttr(ByRef mocName As String, ByRef attrName As String)
    If CELL_TYPE = 21 Then
        attrName = "TRXNUM"
        mocName = "TRXINFO"
    End If
End Sub

Private Function getMainBcchAttrName(ByRef mocName As String, ByRef attrName As String)
    If CELL_TYPE = 21 Then
        attrName = "BCCHFREQ"
        mocName = "TRXINFO"
    End If
End Function

Private Function getTchAttrName(ByRef mocName As String, ByRef attrName As String)
    If CELL_TYPE = 21 Then
        attrName = "NONBCCHFREQLIST"
        mocName = "TRXINFO"
    End If
End Function


Private Function getCellMocNameAndAttrName(ByRef mocName As String, ByRef attrName As String)
    If CELL_TYPE = 21 Then
        attrName = "CELLNAME"
        mocName = "GCELL"
    End If
End Function

Private Function getCellFreqNameAndAttrName(ByRef mocName As String, ByRef attrName As String)
    If CELL_TYPE = 21 Then
        attrName = "TYPE"
        mocName = "GCELL"
    End If
End Function
Private Function cellSheetType(sheetName As String) As Long
    If sheetName = "GSM Cell" Or sheetName = "GSM|421||fffd||fffd|" Then
        cellSheetType = 21
    Else
        cellSheetType = -1
    End If
End Function
Private Sub insertAntenneColumn()
    
    Dim tmpSheet As Worksheet
    Dim RowNum As Long
    Dim mocName As String
    Dim attrName As String
    Dim columnName As String
    Dim portIndex As String
    Dim antnIndex As Long
    Dim cellsheet As Worksheet
    
    portNoValueStr = "0,1,2,3,4,5,6,7"
    antnValueStr = "A,B,NULL,BY_ANTGRP"
    
    Set cellsheet = ThisWorkbook.Worksheets(CELL_SHEET_NAME)
    Call getBrdPortMocNameAndAttr(mocName, attrName)
    portIndex = getColNum(CELL_SHEET_NAME, 2, attrName, mocName)
    
    ThisWorkbook.ActiveSheet.Cells(1, 4).value = getResByKey("TRXBRDPASSNO")
    'cellSheet.Cells(2, portIndex).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, 4)
    Call getAntPorNoMocNameAndAttr(mocName, attrName)
    antnIndex = getColNum(CELL_SHEET_NAME, 2, attrName, mocName)
    cellsheet.Cells(2, antnIndex).Copy Destination:=ThisWorkbook.ActiveSheet.Cells(1, 5)
    ThisWorkbook.ActiveSheet.Cells(1, 5).ClearComments
   
    
    Dim antnRang As Range
    Set antnRang = ThisWorkbook.ActiveSheet.Range("E2:E" + CStr(1 + ROW_COUNT))
            
    With antnRang.Validation
       .Delete
       .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=antnValueStr
    End With

    Dim portRang As Range
    Set portRang = ThisWorkbook.ActiveSheet.Range("D2:D" + CStr(1 + ROW_COUNT))
    With portRang.Validation
       .Delete
       .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=portNoValueStr
    End With

    
End Sub


Public Sub writeGbtsBackData()
    If WRITESUCCESS = True Then
        If chkCellInfoMap() Then
            Exit Sub
        End If
        
        Call writeCellData
    End If
    WRITESUCCESS = False
    Call delTmpSht
End Sub

Public Sub delTmpSht()
    Dim tmpSheet As Worksheet
    Dim cellsheet As Worksheet
    InAdjustAntnPort = False
    If CELL_SHEET_NAME <> "" Then
        Set cellsheet = ThisWorkbook.Worksheets(CELL_SHEET_NAME)
        cellsheet.Activate
    End If
    Set tmpSheet = ThisWorkbook.Worksheets(getResByKey("Temp Sheet"))
    Call changeAlerts(False)
    tmpSheet.Delete
    Call changeAlerts(True)
End Sub


Private Function chkCellInfoMap() As Boolean


    Dim tmpSheet As Worksheet
    Dim maxRow As Long
    Dim RowNum As Long
    Dim cellInfoMap As CMapValueObject
    Dim tmpMap As CMap
    Dim cellId As String
    Dim freqNo As String
    Dim board As String
    Dim portNo As String
    Dim antNo As String
    
    'Dim boardInfo As String
    Dim tVal As CMap
    Dim sVal As String
    Dim isExist As Boolean
    Dim celldes As String
    Dim sectordes As String
    Dim antndes As String
    
    
    
    
    Set tmpSheet = ThisWorkbook.Worksheets(getResByKey("Temp Sheet"))

    
    maxRow = tmpSheet.Range("a65536").End(xlUp).row
    For RowNum = 2 To maxRow
        cellId = tmpSheet.Cells(RowNum, 1).value
        freqNo = tmpSheet.Cells(RowNum, 2).value
        board = tmpSheet.Cells(RowNum, 3).value
        portNo = tmpSheet.Cells(RowNum, 4).value
        antNo = tmpSheet.Cells(RowNum, 5).value
        'boardInfo = board & "_" & portNo
        
        
        
        If checkInputData(tmpSheet, cellId, freqNo, board, portNo, antNo, RowNum) Then
            chkCellInfoMap = True
            Exit Function
        End If

    Next
    chkCellInfoMap = False
    
End Function

Private Function checkInputData(sheet As Worksheet, ByRef Cell As String, ByRef freqNo As String, _
    ByRef board As String, ByRef portNo As String, ByRef antNo As String, lineNo As Long) As Boolean
        Dim rangeStr As String
        If Trim(Cell) = "" Or Trim(freqNo) = "" Or Trim(board) = "" Then 'Or Trim(portNo) = "" Or Trim(antNo) = "" Then
            sheet.rows(lineNo).Select
            MsgBox getResByKey("emptyCellExists") & lineNo, vbExclamation, getResByKey("Warning")
            checkInputData = True
            Exit Function
        End If
        
        If checkDataValid(cellValueStr, Cell, False) = False Then
            rangeStr = sheet.Cells(lineNo, 1).address(False, False)
            Call MsgBox(getResByKey("GcellDataWrong") & rangeStr, vbInformation, getResByKey("Warning"))
            sheet.Range(rangeStr).Select
            checkInputData = True
            Exit Function
        End If
    
        If isAInteger(freqNo) = False Then
            rangeStr = sheet.Cells(lineNo, 2).address(False, False)
            Call MsgBox(getResByKey("freqDataErrShouldBeInteger") & rangeStr, vbInformation, getResByKey("Warning"))
            sheet.Range(rangeStr).Select
            checkInputData = True
            Exit Function
        End If
        
        If checkDataValid(boardValueStr, board, False) = False Then
            rangeStr = sheet.Cells(lineNo, 3).address(False, False)
            Call MsgBox(getResByKey("boardDataWrong") & rangeStr, vbInformation, getResByKey("Warning"))
            sheet.Range(rangeStr).Select
            checkInputData = True
            Exit Function
        End If
        
        If checkDataValid(portNoValueStr, portNo, True) = False Then
            rangeStr = sheet.Cells(lineNo, 4).address(False, False)
            Call MsgBox(getResByKey("portNoDataDataWrong") & rangeStr, vbInformation, getResByKey("Warning"))
            sheet.Range(rangeStr).Select
            checkInputData = True
            Exit Function
        End If
            
        If checkDataValid(antnValueStr, antNo, True) = False Then
            rangeStr = sheet.Cells(lineNo, 5).address(False, False)
            Call MsgBox(getResByKey("antnPassNoDataDataWrong") & rangeStr, vbInformation, getResByKey("Warning"))
            sheet.Range(rangeStr).Select
            checkInputData = True
            Exit Function
        End If
        checkInputData = False
End Function

Private Function isAInteger(ByRef tVal As String) As Boolean
    On Error GoTo ErrorHandler
    Dim k As Long
    If InStr(tVal, ".") <> 0 Then GoTo ErrorHandler
    k = CLng(tVal)
    If k <= 65535 And k >= 0 Then
        isAInteger = True
    Else
        isAInteger = False
    End If
    Exit Function
ErrorHandler:
    isAInteger = False
End Function

Private Function existAntnPort(ByRef antnStr As String, ByRef tVal As String) As Boolean
    Dim antenneArray() As String
    Dim index As Long
    antenneArray = Split(antnStr, ",")
    For index = LBound(antenneArray) To UBound(antenneArray)
        If antenneArray(index) = tVal Then
            existAntnPort = True
            Exit Function
        End If
    Next
    existAntnPort = False
End Function



Private Function shrinkStr(inputStr As String, deliStr As String) As String
        Dim fmtStr As String
        Dim appendStr As String
        
        fmtStr = inputStr
        If CON_BRACKET_RIGHT = deliStr Then
            appendStr = CON_BRACKET_RIGHT
            If Right(inputStr, 1) = CON_BRACKET_RIGHT Then
                fmtStr = Left(inputStr, Len(inputStr) - 1)
            End If
        End If
        
        
        Dim strArray() As String
        strArray = Split(fmtStr, deliStr)

        Dim iNo As Long
        Dim tmpStr As String
        
        For iNo = LBound(strArray) To UBound(strArray)
            If (0 = iNo) Then
                tmpStr = strArray(iNo)
            Else
               If Not (tmpStr = strArray(iNo)) Then
                    shrinkStr = inputStr
                    Exit Function
               End If
            End If
        Next
        
        shrinkStr = tmpStr + appendStr
End Function

Private Function filterEmptyQuoatData(value As String)
    If "[]" = value Then
        filterEmptyQuoatData = ""
    Else
        filterEmptyQuoatData = value
    End If
End Function

Private Sub writeCellData()
    Dim cellsheet As Worksheet
    Dim maxRow As Long
    Dim RowNum As Long
    Dim baseStationName As String
    Dim cellId As String
    Dim keyVal As Variant
    Dim tmpVal As Variant
    
    Dim tVal As CMap
    Dim mocName As String
    Dim attrName As String
    Dim columnName As String
    Dim brdCol As Long
    Dim brdPort As Long
    Dim constCellTempCol As Long
    Dim antenneIndex As Long
    Dim antenneGrpIdIndex As Long
    
    '|fffd||fffd||421||fffd||fffd|ID|fffd||fffd||fffd||6b5||fffd||fffd||fffd|
    Set cellsheet = ThisWorkbook.Worksheets(CELL_SHEET_NAME)
    Call getCellMocNameAndAttrName(mocName, attrName)
    constCellTempCol = getColNum(CELL_SHEET_NAME, 2, attrName, mocName)
     
    '|fffd||fffd||221||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call getPhybrdMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    brdCol = findColumnByName(cellsheet, columnName, 2)
    '|fffd||fffd||221||fffd||fffd||fffd||fffd||2ff||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call getBrdPortMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    brdPort = findColumnByName(cellsheet, columnName, 2)
    '|fffd||fffd||221||fffd||fffd||fffd||7f6||2ff||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call getAntPorNoMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    antenneIndex = findColumnByName(cellsheet, columnName, 2)
    
    Call getAntGrpIdMocNameAndAttr(mocName, attrName)
    columnName = findColumnFromRelationDef(CELL_SHEET_NAME, mocName, attrName)
    antenneGrpIdIndex = findColumnByName(cellsheet, columnName, 2)
    
    maxRow = cellsheet.Range("a65536").End(xlUp).row
    
    Dim udCollection As Collection
    Call prepareUserDataCollection(udCollection)
    
    For RowNum = 3 To maxRow
            baseStationName = cellsheet.Cells(RowNum, getGcellBTSNameCol(CELL_SHEET_NAME)).value
            cellId = cellsheet.Cells(RowNum, constCellTempCol).value
            If baseStationName = SITE_NAME Then
                Dim brdNoStr As String
                Dim portNoStr As String
                Dim antNoStr As String
                Dim antGrpIdStr As String
                brdNoStr = ""
                portNoStr = ""
                antNoStr = ""
                antGrpIdStr = ""
                Call getAntCfg(udCollection, cellId, brdNoStr, portNoStr, antNoStr, antGrpIdStr)
                cellsheet.Cells(RowNum, brdCol).value = filterEmptyQuoatData(brdNoStr)
                cellsheet.Cells(RowNum, brdPort).value = filterEmptyQuoatData(portNoStr)
                cellsheet.Cells(RowNum, antenneIndex).value = filterEmptyQuoatData(antNoStr)
                cellsheet.Cells(RowNum, antenneGrpIdIndex).value = filterEmptyQuoatData(antGrpIdStr)
            End If
    Next
End Sub

Function conStrValue(ByRef srcStr As String, ByRef curStr As String, conStr As String)
    If ("" = srcStr) Then
        conStrValue = curStr
    Else
        conStrValue = srcStr + conStr + curStr
    End If
End Function

Private Function quoatStr(srcStr As String, rruFlag As Boolean) As String
    If rruFlag Then
        quoatStr = CON_BRACKET_LEFT + srcStr + CON_BRACKET_RIGHT
    Else
        quoatStr = srcStr
    End If
End Function

Private Sub getAntCfg(ByRef udCollection As Collection, ByRef cellId As String, ByRef brdNoStr As String, ByRef portNoStr As String, ByRef antNoStr As String, ByRef antGrpIdStr As String)

    Dim tmpSheet As Worksheet
    Dim maxRow As Long
    Dim RowNum As Long
    Dim tmpCollection As Collection
    Set tmpCollection = New Collection
    
    Dim rruFlag As Boolean
    rruFlag = False
       
    
    Set tmpSheet = ThisWorkbook.Worksheets(getResByKey("Temp Sheet"))
    If Contains(udCollection, cellId) Then
        '|ff||4bb||fffd||fffd||fffd||fffd||1b5|
        Dim freq As Collection
        For Each freq In udCollection(cellId)
            '|ff||4bb||fffd||fffd||fffd||f6a39||fffd||3f5||fffd||fffd||4bb||fffd||fffd||fffd||fffd||1b5||fffd||fffd||fffd||fffd||fffd||436||fffd||fffd||fffd||f6a39||fffd||3f5|
            'RRU|fffd||fffd||421||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||1b5||fffd||130||f6a39||fffd||3f5||2b9||fffd||f6||fffd||fffd||177||5b8||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            
            Dim freqBind As CGBtsTrxBind
            If freq.count > 1 Then
                rruFlag = True
                
                Dim newBind As CGBtsTrxBind
                Set newBind = New CGBtsTrxBind
                For Each freqBind In freq
                    newBind.cellId = freqBind.cellId
                    newBind.freqNo = freqBind.freqNo
                    
                    newBind.brdNo = conStrValue(newBind.brdNo, freqBind.brdNo, CON_COMMA)
                    newBind.portNo = conStrValue(newBind.portNo, freqBind.portNo, CON_COMMA)
                    newBind.antNo = conStrValue(newBind.antNo, freqBind.antNo, CON_COMMA)
                    newBind.antGrpId = conStrValue(newBind.antGrpId, freqBind.antGrpId, CON_COMMA)
                    
                Next
                                               
                tmpCollection.Add Item:=newBind
            ElseIf (freq.count = 1) Then
                tmpCollection.Add Item:=freq(1)
            End If
        
        Next
    End If
    
    Dim conStr As String
    Dim deliStr As String
    If rruFlag Then
        conStr = ""
        deliStr = CON_BRACKET_RIGHT
    Else
        conStr = CON_COMMA
        deliStr = CON_COMMA
    End If
    
    Dim bind As CGBtsTrxBind
    For Each bind In tmpCollection
        brdNoStr = conStrValue(brdNoStr, quoatStr(bind.brdNo, rruFlag), conStr)
        portNoStr = conStrValue(portNoStr, quoatStr(bind.portNo, rruFlag), conStr)
        antNoStr = conStrValue(antNoStr, quoatStr(bind.antNo, rruFlag), conStr)
        antGrpIdStr = conStrValue(antGrpIdStr, quoatStr(bind.antGrpId, rruFlag), conStr)
    Next
    
    brdNoStr = shrinkStr(brdNoStr, deliStr)
    portNoStr = shrinkStr(portNoStr, deliStr)
    antNoStr = shrinkStr(antNoStr, deliStr)
    antGrpIdStr = shrinkStr(antGrpIdStr, deliStr)
    
    brdNoStr = replaceStr(brdNoStr, "", "NA")
    portNoStr = replaceStr(portNoStr, "", "NA")
    antNoStr = replaceStr(antNoStr, "", "NA")
    antGrpIdStr = replaceStr(antGrpIdStr, "", "NA")
    
    If rruFlag Then
        Call shrink(brdNoStr, deliStr)
        Call shrink(portNoStr, deliStr)
        Call shrink(antNoStr, deliStr)
        Call shrink(antGrpIdStr, deliStr)
    End If
End Sub
Private Function shrink(ByRef inputStr As String, deliStr As String)
    Dim strArray() As String
    strArray = Split(inputStr, deliStr)
    inputStr = ""
    Dim tmpStr As String
    tmpStr = ""
    
    Dim iNo As Long
    For iNo = LBound(strArray) To UBound(strArray)
        If strArray(iNo) = "" Then
            Exit Function
        End If
        
        tmpStr = Right(strArray(iNo), Len(strArray(iNo)) - 1)
        tmpStr = shrinkStr(tmpStr, CON_COMMA)
        inputStr = inputStr + CON_BRACKET_LEFT + tmpStr + CON_BRACKET_RIGHT
    Next
End Function



'|fffd||fb||fffd||fffd||fffd||434||fffd||fffd||fffd||fffd||fffd||771||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||77d||1e79||fffd||fffd|collection(|421||fffd||fffd||fffd||fffd||fffd||1a3||fffd|collection|fffd||fffd||421||fffd||fffd||fffd||fffd||fffd||fffd|+|1b5||fffd||38ec|collection(|fffd||f6a39||fffd||3f5|)|fffd||fffd|)
Private Sub prepareUserDataCollection(ByRef udCollection As Collection)

    Dim tmpSheet As Worksheet
    Dim maxRow As Long
    Dim RowNum As Long
    Set udCollection = New Collection
    
    Set tmpSheet = ThisWorkbook.Worksheets(getResByKey("Temp Sheet"))
    maxRow = tmpSheet.Range("a65536").End(xlUp).row
    For RowNum = 2 To maxRow
        Dim cellId As String
        Dim freqNo As String
        Dim brdNoStr As String
        Dim portNoStr As String
        Dim antNoStr As String
        Dim antGrpIdStr As String
                
        cellId = Trim(tmpSheet.Cells(RowNum, 1).value)
        freqNo = Trim(tmpSheet.Cells(RowNum, 2).value)
        
        If ("" = Trim(tmpSheet.Cells(RowNum, 3).value)) Then
            brdNoStr = "NA"
        Else
            brdNoStr = Trim(tmpSheet.Cells(RowNum, 3).value)
        End If
        
        If ("" = Trim(tmpSheet.Cells(RowNum, 4).value)) Then
            portNoStr = "NA"
        Else
            portNoStr = Trim(tmpSheet.Cells(RowNum, 4).value)
        End If

        If ("" = Trim(tmpSheet.Cells(RowNum, 5).value)) Then
            antNoStr = "NA"
        Else
            antNoStr = Trim(tmpSheet.Cells(RowNum, 5).value)
        End If

        If ("" = Trim(tmpSheet.Cells(RowNum, 6).value)) Then
            antGrpIdStr = "NA"
        Else
            antGrpIdStr = Trim(tmpSheet.Cells(RowNum, 6).value)
        End If
        
        Dim comKey As String
        comKey = cellId + CON_SHARP + freqNo
        
        Dim bind As CGBtsTrxBind
        Set bind = New CGBtsTrxBind
        bind.cellId = cellId
        bind.freqNo = freqNo
        bind.brdNo = brdNoStr
        bind.portNo = portNoStr
        bind.antNo = antNoStr
        bind.antGrpId = antGrpIdStr
        
        If Contains(udCollection, cellId) Then
            Dim freqCollection As Collection
            Set freqCollection = udCollection(cellId)
            If Contains(freqCollection, comKey) Then
                freqCollection(comKey).Add Item:=bind
            Else
                Dim bdCollection As Collection
                Set bdCollection = New Collection
                bdCollection.Add Item:=bind
                
                freqCollection.Add Item:=bdCollection, key:=comKey
            End If
            
        Else
            Dim bindCollection As Collection
            Set bindCollection = New Collection
            bindCollection.Add Item:=bind
            
            Dim frqCollection As Collection
            Set frqCollection = New Collection
            frqCollection.Add Item:=bindCollection, key:=comKey
            
            udCollection.Add Item:=frqCollection, key:=cellId
        End If
        
    Next

End Sub

Private Sub sortMapByKey(ByRef mapObject As CMapValueObject, error As Boolean)
    On Error GoTo ErrorHandler
    Dim tmpValueMap As CMapValueObject
    Dim tCount As Long
    Dim keyVal As Variant
    Dim tmpVal As Variant
    Dim tVal As CMap
    Dim tmpMap As CMap
    Dim keyArray() As Variant
    Dim index As Long
    Dim antnStr As String
    Dim secStr As String
    Set tmpValueMap = New CMapValueObject
    error = False
    For Each keyVal In mapObject.KeyCollection
        Set tVal = mapObject.GetAt(keyVal)
        tCount = tVal.KeyCollection.count
        ReDim keyArray(tCount - 1)
        index = 0
        For Each tmpVal In tVal.KeyCollection
            keyArray(index) = CLng(tmpVal)
            index = index + 1
        Next
        Call QuickSort(keyArray())
        Set tmpMap = New CMap
        For index = LBound(keyArray) To UBound(keyArray)
            secStr = CStr(keyArray(index))
            If tVal.haskey(secStr) = False Then Exit Sub
            antnStr = tVal.GetAt(secStr)
            Call getSortedStr(antnStr)
            Call tmpMap.SetAt(secStr, antnStr)
        Next
        Call tmpValueMap.SetAt(keyVal, tmpMap)
    Next
    Set mapObject = tmpValueMap
ErrorHandler:
    error = True
End Sub

Private Sub getSortedStr(ByRef infoStr As String)
    Dim strArray() As Variant
    Dim tmpArray As Variant
    Dim index As Long
    Dim tCount As Long
    Dim tmpStr As String
    tmpArray = Split(infoStr, ",")
    tCount = UBound(tmpArray) - LBound(tmpArray)
    ReDim strArray(tCount) As Variant
    For index = LBound(tmpArray) To UBound(tmpArray)
        strArray(index) = tmpArray(index)
    Next
    Call QuickSort(strArray())
    tmpStr = ""
    
    For index = LBound(strArray) To UBound(strArray)
        If tmpStr = "" Then
            tmpStr = strArray(index)
        Else
            tmpStr = tmpStr & "," & strArray(index)
        End If
    Next
    infoStr = tmpStr
End Sub

Private Sub changeAlerts(ByRef flag As Boolean)
    Application.EnableEvents = flag
    Application.DisplayAlerts = flag
    Application.ScreenUpdating = flag
End Sub

Public Sub QuickSort(ByRef lngArray() As Variant)
    Dim iLBound As Long
    Dim iUBound As Long
    Dim iTemp As Variant
    Dim iOuter As Long
    Dim iMax As Long
    
    iLBound = LBound(lngArray)
    iUBound = UBound(lngArray)

    If (iUBound - iLBound) Then
        For iOuter = iLBound To iUBound
            If lngArray(iOuter) > lngArray(iMax) Then iMax = iOuter
        Next iOuter

        iTemp = lngArray(iMax)
        lngArray(iMax) = lngArray(iUBound)
        lngArray(iUBound) = iTemp

        Call InnerQuickSort(lngArray, iLBound, iUBound)
    End If
End Sub


Private Sub InnerQuickSort(ByRef lngArray() As Variant, ByVal iLeftEnd As Long, ByVal iRightEnd As Long)
    Dim iLeftCur As Long
    Dim iRightCur As Long
    Dim iPivot As Variant
    Dim iTemp As Variant

    If iLeftEnd >= iRightEnd Then Exit Sub

    iLeftCur = iLeftEnd
    iRightCur = iRightEnd + 1
    iPivot = lngArray(iLeftEnd)
    
    Do
        Do
            iLeftCur = iLeftCur + 1
        Loop While lngArray(iLeftCur) < iPivot

        Do
            iRightCur = iRightCur - 1
        Loop While lngArray(iRightCur) > iPivot
        
        If iLeftCur >= iRightCur Then Exit Do
        
        iTemp = lngArray(iLeftCur)
        lngArray(iLeftCur) = lngArray(iRightCur)
        lngArray(iRightCur) = iTemp
    Loop

    lngArray(iLeftEnd) = lngArray(iRightCur)
    lngArray(iRightCur) = iPivot
    Call InnerQuickSort(lngArray, iLeftEnd, iRightCur - 1)
    Call InnerQuickSort(lngArray, iRightCur + 1, iRightEnd)
End Sub

Private Function getColNameBaseMapDef(sheetName As String, attrName As String, mocName As String) As String
    On Error Resume Next
    Dim m_colNum As Long
    Dim m_rowNum As Long
    Dim MAPPINGDEF As Worksheet
    Dim ws As Worksheet
    Dim localCurColName As String
        
    Set MAPPINGDEF = ThisWorkbook.Worksheets("MAPPING DEF")
    getColNameBaseMapDef = ""
    For m_rowNum = 2 To MAPPINGDEF.Range("a65536").End(xlUp).row
        If UCase(attrName) = UCase(MAPPINGDEF.Cells(m_rowNum, 5).value) _
           And UCase(sheetName) = UCase(MAPPINGDEF.Cells(m_rowNum, 1).value) _
           And UCase(mocName) = UCase(MAPPINGDEF.Cells(m_rowNum, 4).value) Then
            getColNameBaseMapDef = MAPPINGDEF.Cells(m_rowNum, 3).value
            
            Exit For
        End If
    Next
End Function

Private Function getColNumByName(sheetName As String, recordRow As Long, ColName As String) As Long
    On Error Resume Next
    Dim m_colNum As Long
    Dim ws As Worksheet
    Dim localCurColName As String
        
    getColNumByName = -1
    
    Set ws = ThisWorkbook.Worksheets(sheetName)
    
    m_colNum = 1
    Do
        localCurColName = GetDesStr(ws.Cells(recordRow, m_colNum).value)
        If "" = localCurColName Then
            Exit Function
        End If
        
        If GetDesStr(ColName) = localCurColName Then
            getColNumByName = m_colNum
            Exit Function
        End If
        
        m_colNum = m_colNum + 1
    Loop

End Function

Public Sub BranchControlForTempSht(ByVal sheet As Object, ByVal Target As Range)
    Dim cellRange As Range, freqRange As Range
    Dim antNoStr As String
    
    For Each cellRange In Target
        If cellRange.column = 5 Then
            For Each freqRange In cellRange
                antNoStr = Trim(freqRange.value)
                If cellRange.row > 1 And antNoStr <> "BY_ANTGRP" Then
                    sheet.Cells(cellRange.row, 6).Interior.colorIndex = SolidColorIdx
                    sheet.Cells(cellRange.row, 6).Interior.Pattern = SolidPattern
                    sheet.Cells(cellRange.row, 6).value = ""
                    sheet.Cells(cellRange.row, 6).Validation.ShowInput = False
                
                ElseIf cellRange.row > 1 And antNoStr = "BY_ANTGRP" Then
                    sheet.Cells(cellRange.row, 6).Interior.colorIndex = NormalRangeColorIndex
                    sheet.Cells(cellRange.row, 6).Interior.Pattern = NormalPattern
                    sheet.Cells(cellRange.row, 6).value = ""
                    sheet.Cells(cellRange.row, 6).Validation.ShowInput = True
                End If
            Next
        ElseIf cellRange.column = 6 Then
            For Each freqRange In cellRange
                If freqRange.value <> "" And freqRange.Interior.colorIndex = SolidColorIdx And freqRange.Interior.Pattern = SolidPattern Then
                    MsgBox getResByKey("NoInput"), vbOKOnly + vbExclamation + vbApplicationModal + vbDefaultButton1, getResByKey("Warning")
                    freqRange.value = ""
                    freqRange.Select
                End If
            Next
        End If
    
    Next cellRange
    
End Sub






Attribute VB_Name = "CellSub"
Option Explicit
'|fffd||fffd|eNodeB Radio Data|fffd||fffd||4b3||fffd||fffd||bc||fffd||fffd||2bc||fffd||fffd|
Private Const constRecordRow = 2
Private Const cellMocName As String = "GLoCell"
Private Const attrName As String = "CellTemplateName"
Private Const CellType As String = "GSM Local Cell"

Private Const logicCellMocName As String = "GCELL"
Private Const logicAttrName As String = "TemplateName"
Private Const logicCellType As String = "GSM Logic Cell"

Private Const UCellMocName As String = "ULOCELL"
Private Const UAttrName As String = "CellTemplateName"
Private Const UCellType As String = "UMTS Local Cell"

Private Const logicUCellMocName As String = "CELL"
Private Const logicUAttrName As String = "TemplateName"
Private Const logicUCellType As String = "UMTS Logic Cell"

Private Const LCellMocName As String = "Cell"
Private Const LAttrName As String = "CellTemplateName"
Private Const LCellType As String = "LTE Cell"

Function isCellSheet(sheetName As String) As Boolean
    If sheetName = "GSM Cell" Or sheetName = "UMTS Cell" Or sheetName = "LTE Cell" _
        Or sheetName = "GSM|421||fffd||fffd|" Or sheetName = "UMTS|421||fffd||fffd|" Or sheetName = "LTE|421||fffd||fffd|" Then
        isCellSheet = True
        Exit Function
    End If
    isCellSheet = False
End Function
 
Function isTrasnPortSheet(sheetName As String) As Boolean
    If sheetName = "GSM Cell" Or sheetName = "UMTS Cell" Or sheetName = "LTE Cell" _
        Or sheetName = "GSM|421||fffd||fffd|" Or sheetName = "UMTS|421||fffd||fffd|" Or sheetName = "LTE|421||fffd||fffd|" _
        Or sheetName = "GTRXGROUP" Or sheetName = "TRX|fffd||fffd|" Then
        isTrasnPortSheet = True
        Exit Function
    End If
    isTrasnPortSheet = False
End Function

'|fffd||fffd||4aa||fffd||fffd||fffd||5b4||fffd||fffd||fffd|LTE|fffd||fffd|Mrat|fffd||132||fffd||fffd||fffd|
Public Sub cellSheetSelectionEvent(ByVal sheet As Worksheet, ByVal Target As Range)
    Dim neType As String
    neType = getNeType()
    If neType = "LTE" Then
        Call Cell_Worksheet_SelectionChange(sheet, Target)
    Else 'Mrat,UMTS
        Call CellSelectionChange(sheet, Target)
    End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||e1||fffd|Cell Template|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||431||fffd||fffd||fffd||fffd||bc||fffd|
Public Sub CellSelectionChange(ByVal sheet As Worksheet, ByVal Target As Range)
        'init |fffd||fffd||fffd||fffd|GCell
        Call initCellTemplate(sheet, Target, attrName, cellMocName, getResByKey(CellType))
        'init |fffd||7fc||fffd|GCell
        Call initCellTemplate(sheet, Target, logicAttrName, logicCellMocName, getResByKey(logicCellType))
        
        'init |fffd||fffd||fffd||fffd|UCell
        Call initCellTemplate(sheet, Target, UAttrName, UCellMocName, getResByKey(UCellType))
        'init |fffd||7fc||fffd|UCell
        Call initCellTemplate(sheet, Target, logicUAttrName, logicUCellMocName, getResByKey(logicUCellType))
        
        'init |fffd||fffd||fffd||fffd|LCell
        Call initCellTemplate(sheet, Target, LAttrName, LCellMocName, getResByKey(LCellType))
End Sub

Sub initCellTemplate(ByVal sheet As Worksheet, ByVal Target As Range, myAttrName As String, myCellMocName As String, myType As String)
        Dim m_Cell_Template As String
        Dim constCellTempCol As Long
        '|fffd||fffd||fffd||fffd||fffd||fffd|Cell Template|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        constCellTempCol = getColNum(sheet.name, constRecordRow, myAttrName, myCellMocName)
        
        If constCellTempCol >= 0 And Target.column = constCellTempCol And Target.count = 1 And Target.row > constRecordRow Then
            '|fffd||fffd||221||fffd||fffd|CellTemplate|fffd||fffd||fffd||43a||fffd||461||5b5|
            m_Cell_Template = getCellTemplate(myType, sheet, Target)
            If m_Cell_Template <> "" Then
                With Target.Validation
                   .Delete
                   .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=m_Cell_Template
                End With
                If Not Target.Validation.value Then
                    Target.value = ""
                End If
            Else
                With Target.Validation
                    .Delete
                    .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator:=xlBetween
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .inputTitle = ""
                    .ErrorTitle = ""
                    .inputMessage = ""
                    .ErrorMessage = ""
                    .IMEMode = xlIMEModeNoControl
                    .ShowInput = True
                    .ShowError = True
                End With
                    Target.value = ""
            End If
        End If
End Sub

'|fffd||4e1||fffd|MappingCellTemplate|fffd||fffd||4b3||fffd||fffd||221||fffd||fffd|Cell Template|fffd||fffd||fffd||43a||fffd||461||5b5|
Function getCellTemplate(myType As String, sheet As Worksheet, cellRange As Range) As String
    Dim m_rowNum As Long
    Dim m_RowNum_Inner As Long
    Dim flag As Boolean
    Dim m_Str As String
    Dim m_start As Long
    Dim m_end As Long
    Dim neType As String
    
    neType = getNeType()
    m_Str = ""
      For m_rowNum = 2 To MappingCellTemplate.Range("a65536").End(xlUp).row
        If myType = MappingCellTemplate.Cells(m_rowNum, 2).value _
        And neType = MappingCellTemplate.Cells(m_rowNum, 3).value Then
                   If m_Str = "" Then
                        m_Str = MappingCellTemplate.Cells(m_rowNum, 1).value
                   Else
                        m_Str = m_Str & "," & MappingCellTemplate.Cells(m_rowNum, 1).value
                   End If
         End If
    Next
    
    If Len(m_Str) > 256 Then
        Dim groupName As String
        Dim columnName As String
        Dim valideDef As CValideDef
        Call getGroupAndColumnName(sheet, cellRange, groupName, columnName)
        Set valideDef = initDefaultDataSub.getInnerValideDef(sheet.name + "," + groupName + "," + columnName)
        If valideDef Is Nothing Then
            Set valideDef = addInnerValideDef(sheet.name, groupName, columnName, m_Str)
        Else
            Call modiflyInnerValideDef(sheet.name, groupName, columnName, m_Str, valideDef)
        End If
        m_Str = valideDef.getValidedef
    End If
    getCellTemplate = m_Str
End Function

'LTE|421||fffd||fffd||123||fffd||fffd||134||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4aa||fffd||fffd||fffd||fffd||1f0||fffd||fffd||133||429||fffd||fffd||fffd||fffd||5b5||fffd||fffd||2be|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||e1||fffd|Cell Template|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||431||fffd||fffd||fffd||fffd||bc||fffd|
Sub Cell_Worksheet_SelectionChange(ByVal sh As Worksheet, ByVal Target As Range)
    Dim m_Cell_Template As String
    
    Dim constBandwidthCol As Long, constSACol As Long, constFDDTDDCol As Long, constTxRxModeCol As Long, constCellTempCol As Long
    '|fffd||fffd|LTE Cell|fffd||fffd||4b3||fffd||fffd|*DlBandwidth|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    constBandwidthCol = getColNum(sh.name, constRecordRow, "DlBandWidth", "Cell")
    
    '|fffd||fffd|LTE Cell|fffd||fffd||4b3||fffd||fffd|SubframeAssignment|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    constSACol = getColNum(sh.name, constRecordRow, "SubframeAssignment", "Cell")
    
    '|fffd||fffd|LTE Cell|fffd||fffd||4b3||fffd||fffd|*FddTddInd|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    constFDDTDDCol = getColNum(sh.name, constRecordRow, "FddTddInd", "Cell")
    
    '|fffd||fffd|LTE Cell|fffd||fffd||4b3||fffd||fffd|*TxRxMode|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    constTxRxModeCol = getColNum(sh.name, constRecordRow, "TxRxMode", "Cell")
      
    '|fffd||fffd|LTE Cell|fffd||fffd||4b3||fffd||fffd|*Cell Template|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    constCellTempCol = getColNum(sh.name, constRecordRow, "CellTemplateName", "Cell")
    Dim bandWidthValue As String
    Dim saValue As String
    Dim fddTddValue As String
    Dim txRxModeValue As String
    If constBandwidthCol = -1 Then
         bandWidthValue = ""
     Else
         bandWidthValue = Cells(Target.row, constBandwidthCol).value
     End If
     
     If constTxRxModeCol = -1 Then
         txRxModeValue = ""
     Else
         txRxModeValue = Cells(Target.row, constTxRxModeCol).value
     End If
     
     If constFDDTDDCol = -1 Then
         fddTddValue = ""
     Else
         fddTddValue = Cells(Target.row, constFDDTDDCol).value
     End If
     
     If constSACol = -1 Then
         saValue = ""
     Else
         saValue = Cells(Target.row, constSACol).value
     End If
     

    If Target.column = constCellTempCol And Target.count = 1 And Target.row > constRecordRow Then
         '|fffd||fffd||221||fffd||fffd|CellTemplate|fffd||fffd||fffd||43a||fffd||461||5b5|
        m_Cell_Template = Get_Template_Related(bandWidthValue, txRxModeValue, fddTddValue, saValue, sh, Target)
        If m_Cell_Template <> "" Then
            With Target.Validation
               .Delete
               .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=m_Cell_Template
            End With
        Else
            With Target.Validation
                .Delete
                .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator:=xlBetween
                .IgnoreBlank = True
                .InCellDropdown = True
                .inputTitle = ""
                .ErrorTitle = ""
                .inputMessage = ""
                .ErrorMessage = ""
                .IMEMode = xlIMEModeNoControl
                .ShowInput = True
                .ShowError = True
            End With
        End If
    End If
End Sub

'|fffd||4e1||fffd|MappingCellTemplate|fffd||fffd||4b3||fffd||fffd||221||fffd||fffd|Cell Template|fffd||fffd||fffd||43a||fffd||461||5b5|
Function Get_Template_Related(DlBandwidth As String, TxRxMode As String, FDDTDD As String, SA As String, sheet As Worksheet, cellRange As Range) As String
    Dim m_rowNum As Long
    Dim m_Str As String
    Dim m_start As Long
    Dim m_end As Long
    
    Dim DlBandwidth1 As String, FDDTDD1 As String
    m_start = 0
    
    m_Str = ""
    Select Case DlBandwidth
        Case "CELL_BW_N6"
            DlBandwidth1 = "1.4M"
        Case "CELL_BW_N15"
            DlBandwidth1 = "3M"
        Case "CELL_BW_N25"
            DlBandwidth1 = "5M"
        Case "CELL_BW_N50"
            DlBandwidth1 = "10M"
        Case "CELL_BW_N75"
            DlBandwidth1 = "15M"
        Case "CELL_BW_N100"
            DlBandwidth1 = "20M"
        Case Else
            DlBandwidth1 = ""
    End Select
       
    Select Case FDDTDD
        Case "CELL_TDD"
            FDDTDD1 = "TDD"
        Case "CELL_FDD"
            FDDTDD1 = "FDD"
        Case Else
            FDDTDD1 = ""
    End Select

    m_Str = ""
    For m_rowNum = 2 To MappingCellTemplate.Range("e65536").End(xlUp).row
        If (DlBandwidth1 = MappingCellTemplate.Cells(m_rowNum, 1).value Or DlBandwidth1 = "" Or MappingCellTemplate.Cells(m_rowNum, 1).value = "") _
        And (TxRxMode = MappingCellTemplate.Cells(m_rowNum, 2).value Or TxRxMode = "" Or MappingCellTemplate.Cells(m_rowNum, 2).value = "") _
        And (FDDTDD1 = MappingCellTemplate.Cells(m_rowNum, 3).value Or FDDTDD1 = "" Or MappingCellTemplate.Cells(m_rowNum, 3).value = "") _
        And (SA = MappingCellTemplate.Cells(m_rowNum, 4).value Or SA = "") Then
                   If m_Str = "" Then
                        m_Str = MappingCellTemplate.Cells(m_rowNum, 5).value
                   Else
                        m_Str = m_Str & "," & MappingCellTemplate.Cells(m_rowNum, 5).value
                   End If
         End If
    Next
    
     If Len(m_Str) > 256 Then
        Dim groupName As String
        Dim columnName As String
        Dim valideDef As CValideDef
        Call getGroupAndColumnName(sheet, cellRange, groupName, columnName)
        Set valideDef = initDefaultDataSub.getInnerValideDef(sheet.name + "," + groupName + "," + columnName)
        If valideDef Is Nothing Then
            Set valideDef = addInnerValideDef(sheet.name, groupName, columnName, m_Str)
        Else
            Call modiflyInnerValideDef(sheet.name, groupName, columnName, m_Str, valideDef)
        End If
        m_Str = valideDef.getValidedef
    End If
    Get_Template_Related = m_Str
    
End Function



Attribute VB_Name = "ClinkType"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
    Private m_linkSheetName As String '|fffd||fffd||fffd||fffd||fffd||fffd|Cell|fffd||fffd|sheet|fffd||fffd||fffd||fffd|
    Private m_linkGroupName As String '|fffd||fffd||fffd||fffd||fffd||fffd|group|fffd||fffd||fffd||fffd||fffd||fffd|
    Private m_linkColumName As String '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||435||fffd||fffd||fffd||fffd||fffd|
    Private m_linkRowNum As Long ' |fffd||fffd||fffd||fffd||fffd||4f5||fffd|cell|fffd||fffd||2b5||fffd||fffd||fffd||43a||fffd|
    Private m_linkColNum As Long '|fffd||fffd||fffd||fffd||fffd||fffd|cell|fffd||fffd||2b5||fffd||fffd||fffd||43a||fffd|
    
    Private m_linkColumRowNum As Long ' |fffd||fffd||fffd||fffd||fffd||4f5||135||fffd||fffd||fffd||377||fffd||fffd||fffd||6b5||fffd||3bb||fffd||fffd|
    
    Private m_sheetName As String '|fffd||fffd||fffd||fffd|cell|fffd||fffd||fffd||6b5||fffd|sheet
    Private m_groupName As String
    Private m_columName As String
    
    Private m_rowNum As Long '|fffd||fffd||fffd||fffd|cell|fffd||fffd||fffd||6b5||fffd||fffd||fffd|
    Private m_colNum As Long '|fffd||fffd||fffd||fffd|cell|fffd||fffd||fffd||6b5||fffd||fffd||fffd|
    Private m_address As String
Property Get groupName() As String
        groupName = m_groupName
End Property
Property Let columName(str As String)
        m_columName = str
End Property

Property Get columName() As String
        columName = m_columName
End Property

Property Let groupName(str As String)
        m_groupName = str
End Property

Property Get linkColumRowNum() As Long
                linkColumRowNum = m_linkColumRowNum
End Property

Property Let linkColumRowNum(row As Long)
                m_linkColumRowNum = row
End Property


Property Get linkSheetName() As String
        linkSheetName = m_linkSheetName
End Property

Property Let linkSheetName(str As String)
        m_linkSheetName = str
End Property

Property Get linkGroupName() As String
        linkGroupName = m_linkGroupName
End Property

Property Let linkGroupName(str As String)
        m_linkGroupName = str
End Property

Property Get linkColumName() As String
        linkColumName = m_linkColumName
End Property

Property Let linkColumName(str As String)
        m_linkColumName = str
End Property

Property Get linkRowNum() As Long
        linkRowNum = m_linkRowNum
End Property

Property Let linkRowNum(str As Long)
        m_linkRowNum = str
End Property

Property Get linkColNum() As Long
        linkColNum = m_linkColNum
End Property

Property Let linkColNum(str As Long)
        m_linkColNum = str
End Property

Property Get sheetName() As String
        sheetName = m_sheetName
End Property

Property Let sheetName(str As String)
        m_sheetName = str
End Property

Property Get RowNum() As Long
        RowNum = m_rowNum
End Property

Property Let RowNum(str As Long)
        m_rowNum = str
End Property

Property Get colNum() As Long
        colNum = m_colNum
End Property

Property Let colNum(str As Long)
        m_colNum = str
End Property
Property Get address() As String
        address = m_address
End Property
Property Let address(str As String)
        m_address = str
End Property

Public Function getKey() As String
            getKey = m_sheetName + "," + m_groupName + "," + m_columName
End Function

Attribute VB_Name = "CreatBar"
Option Explicit

Public Const CapactiyExpansionBarNameAddMoi As String = "CapacityExpansionAddMoi"
Public Const CapactiyExpansionBarNameDeleteMoi As String = "CapacityExpansionDeleteMoi"
Public Const OperationBarName As String = "Operation Bar"

Public Sub initCapacityExpansionToolBar(ByRef ws As Worksheet)
    Call deleteCapacityExpansionToolBar
    
    If isBoardStyleSheet(ws) Then
        Call insertCapacityExpansionToolBar
    End If

End Sub

Public Sub initAujustAntnPortToolBar(ByRef ws As Worksheet)
    Call CapacityCellSub.deleteCellBar
    Call CapacityCellSub.deleteTempBar
    
    If isCellSheet(ws.name) Then
         Call CapacityCellSub.createCellBar
    ElseIf ws.name = getResByKey("Temp Sheet") Then
        Call CapacityCellSub.createTempBar
    End If

End Sub

Private Sub insertCapacityExpansionToolBar()
    Call deleteCapacityExpansionToolBar
    
    Call insertAddBoardStyleMoiBar
    
    Call insertDeleteBoardStyleMoiBar
    
    If inAddProcessFlag = True Then
        Call addBoardStyleButtons.setAddBoardStyleButtons
        Call deleteBoardStyleButtons.setDeleteBoardStyleButtons
    End If
End Sub

Private Sub insertAddBoardStyleMoiBar()
    Dim addBoardStyleMoiBar As CommandBar
    Dim addBoardStyleMoiButton As CommandBarButton
    Dim addBoardStyleMoiFinishButton As CommandBarButton
    Dim addBoardStyleMoiCancelButton As CommandBarButton
    
    Set addBoardStyleButtons = New CAddBoardStyleButtons
    'Set addBoardStyleMoiBarCol = New Collection
    Set addBoardStyleMoiBar = Application.CommandBars.Add(CapactiyExpansionBarNameAddMoi, msoBarTop)
    With addBoardStyleMoiBar
        .Protection = msoBarNoResize
        .Visible = True
        Set addBoardStyleMoiButton = .Controls.Add(Type:=msoControlButton)
        'addBoardStyleMoiBarCol.Add Item:=addBoardStyleMoiButton, key:="add"
        With addBoardStyleMoiButton
            .Style = msoButtonIconAndCaption
            .Caption = getResByKey("AddBoardStyleMoi")
            .TooltipText = getResByKey("AddBoardStyleMoi")
            .OnAction = "addBoardStyleMoi"
            .FaceId = 3183
            .Enabled = True
        End With
        
        Set addBoardStyleMoiFinishButton = .Controls.Add(Type:=msoControlButton)
        'addBoardStyleMoiBarCol.Add Item:=addBoardStyleMoiFinishButton, key:="finish"
        With addBoardStyleMoiFinishButton
            .Style = msoButtonIconAndCaption
            .Caption = getResByKey("Finish")
            .TooltipText = getResByKey("Finish")
            .OnAction = "addBoardStyleMoiFinishButton"
            .FaceId = 186
            .Enabled = False
        End With
        
        Set addBoardStyleMoiCancelButton = .Controls.Add(Type:=msoControlButton)
        'addBoardStyleMoiBarCol.Add Item:=addBoardStyleMoiCancelButton, key:="cancel"
        With addBoardStyleMoiCancelButton
            .Style = msoButtonIconAndCaption
            .Caption = getResByKey("Cancel")
            .TooltipText = getResByKey("Cancel")
            .OnAction = "addBoardStyleMoiCancelButton"
            .FaceId = 186
            .Enabled = False
        End With
    End With
    Call addBoardStyleButtons.initAddBoardStyleButtons(addBoardStyleMoiButton, addBoardStyleMoiFinishButton, addBoardStyleMoiCancelButton)
End Sub

Private Sub insertDeleteBoardStyleMoiBar()
    Dim deleteBoardStyleMoiBar As CommandBar
    Dim deleteBoardStyleMoiButton As CommandBarButton
    Set deleteBoardStyleButtons = New CDeleteBoardStyleButtons
    Set deleteBoardStyleMoiBar = Application.CommandBars.Add(CapactiyExpansionBarNameDeleteMoi, msoBarTop)
    With deleteBoardStyleMoiBar
        .Protection = msoBarNoResize
        .Visible = True
        Set deleteBoardStyleMoiButton = .Controls.Add(Type:=msoControlButton)
        With deleteBoardStyleMoiButton
            .Style = msoButtonIconAndCaption
            .Caption = getResByKey("DeleteBoardStyleMoi")
            .TooltipText = getResByKey("DeleteBoardStyleMoi")
            .OnAction = "deleteBoardStyleMoi"
            .FaceId = 293
            .Enabled = True
        End With
    End With
    Call deleteBoardStyleButtons.initDeleteBoardStyleButtons(deleteBoardStyleMoiButton)
End Sub

Public Sub deleteCapacityExpansionToolBar()
    If containsAToolBar(CapactiyExpansionBarNameAddMoi) Then
        Application.CommandBars(CapactiyExpansionBarNameAddMoi).Delete
    End If
    If containsAToolBar(CapactiyExpansionBarNameDeleteMoi) Then
        Application.CommandBars(CapactiyExpansionBarNameDeleteMoi).Delete
    End If
End Sub

Public Sub InsertUserToolBar()
    Dim toolbar As CommandBar
    
    If Not containsAToolBar(OperationBarName) Then
        Set toolbar = Application.CommandBars.Add(OperationBarName, msoBarTop)
        With toolbar
            .Protection = msoBarNoResize
            .Visible = True
            With .Controls.Add(Type:=msoControlButton)
                .Caption = getResByKey("Bar_Template")
                .OnAction = "addTemplate" '|fffd||fffd||27e||421||fffd||fffd||123||fffd||fffd|
                .Style = msoButtonIconAndCaption
                .Enabled = True
                .FaceId = 186
            End With
        End With
    End If
End Sub

Public Sub DeleteUserToolBar()
    If containsAToolBar(OperationBarName) Then
        Application.CommandBars(OperationBarName).Delete
    End If
End Sub







Attribute VB_Name = "DeleteFreqForm"
Attribute VB_Base = "0{21405E37-9483-4583-81C3-876EBAD49386}{1A3EE38F-36A0-46ED-AD9D-B5FF70EFDEB7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit
Private freqCollection As Collection
Private SelectedSiteName As String
Private SelectedCellName As String
Private SelectedFreq As String
Private SelectedFreqIndex As Long
Private row As Long
'|fffd||4e1||fffd||fffd||fffd||1f0||fffd||fffd||fffd||fffd||4b3||fffd||fffd||fb||fffd||57e||fffd||fffd||fffd||1a1||fffd|
Private Sub Set_BaseStation_Related()
    Dim RowNum As Long
    Dim maxRow As String
    Dim nowSelection As Range
    Dim index As Long
    Dim baseStationCollection As Collection
    Dim baseStationName As Variant
    Dim selectBtsName As String
    Set baseStationCollection = New Collection
    BaseStationList.Clear
    
    Set nowSelection = Selection
    selectBtsName = ActiveSheet.Cells(nowSelection.row, getGcellBTSNameCol(ActiveSheet.name)).value

    maxRow = ActiveSheet.Range("a65536").End(xlUp).row
    For RowNum = 3 To maxRow
        baseStationName = ActiveSheet.Cells(RowNum, getGcellBTSNameCol(ActiveSheet.name)).value
            
        If existInCollection(baseStationName, baseStationCollection) = False And Trim(baseStationName) <> "" Then
            baseStationCollection.Add (baseStationName)
        End If
    Next
    
    For Each baseStationName In baseStationCollection
        If Trim(baseStationName) <> "" Then
            BaseStationList.AddItem (baseStationName)
        End If
            
    Next
    
    If baseStationCollection.count <> 0 Then
        Me.BaseStationList.ListIndex = getIndexInCollection(selectBtsName, baseStationCollection)
    End If
End Sub
'|fffd||4fb||fffd||57e||fffd||fffd||fffd||1bb||fffd||fffd||421||fffd||fffd||fffd||fffd||fffd||fffd|
Private Function set_Cell_Related(btsName As String)
    Dim RowNum As Long
    Dim maxRow As Long
    Dim cellNameCollection As Collection
    Dim nowSelection As Range
    Dim cellName As Variant
    Dim selectCellName As String
    
    Set cellNameCollection = New Collection
    Set nowSelection = Selection
    CellList.Clear
    
    Set nowSelection = Selection
    selectCellName = ActiveSheet.Cells(nowSelection.row, getGcellCellNameCol(ActiveSheet.name)).value
    
    maxRow = ActiveSheet.Range("a65536").End(xlUp).row
    For RowNum = 3 To maxRow
        If btsName = ActiveSheet.Cells(RowNum, getGcellBTSNameCol(ActiveSheet.name)).value Then
            cellName = ActiveSheet.Cells(RowNum, getGcellCellNameCol(ActiveSheet.name)).value
            If existInCollection(cellName, cellNameCollection) = False And Trim(cellName) <> "" Then
                cellNameCollection.Add (cellName)
            End If
        End If
    Next
    
    For Each cellName In cellNameCollection
        If Trim(cellName) <> "" Then
            CellList.AddItem (cellName)
        End If
    Next
    
    If cellNameCollection.count <> 0 Then
        Me.CellList.ListIndex = getIndexInCollection(selectCellName, cellNameCollection)
    End If
    
End Function
'|fffd||4fb||fffd||57e||fffd||fffd||fffd||1ba||fffd||421||fffd||fffd||fffd||fffd||fffd||1bb||fffd||fffd||1b5||fffd||fffd||fffd||431||fffd|
Private Function setFreq_Related(btsName As String, cellName As String)
    Dim RowNum As Long
    Dim maxRow As Long
    
    Dim nowSelection As Range
    Dim selectFreq As String
    Dim bcch As String
    Dim nonbcch As String
    Dim trxNum As String
    Dim cellBand As String
    Dim freqArray() As String
    Dim nonbcchArray() As String
    Dim trxNumArray() As String
    
    Set freqCollection = New Collection
    Set nowSelection = Selection
    FrequencyList.Clear
    
    Set nowSelection = Selection
    
    maxRow = ActiveSheet.Range("a65536").End(xlUp).row
    For RowNum = 3 To maxRow
        If btsName = ActiveSheet.Cells(RowNum, getGcellBTSNameCol(ActiveSheet.name)).value _
            And cellName = ActiveSheet.Cells(RowNum, getGcellCellNameCol(ActiveSheet.name)).value Then
            bcch = ActiveSheet.Cells(RowNum, getBcchCol(ActiveSheet.name)).value
            nonbcch = ActiveSheet.Cells(RowNum, getNonBcchCol(ActiveSheet.name)).value
            trxNum = ActiveSheet.Cells(RowNum, getTrxNumCol(ActiveSheet.name)).value
            cellBand = ActiveSheet.Cells(RowNum, getCellBandCol(ActiveSheet.name)).value
            
            Dim index As Long
            Dim freqs As String
            If (Trim(nonbcch) <> "") Then
                If Trim(bcch) <> "" Then
                    freqs = bcch + "," + nonbcch
                Else
                    freqs = nonbcch
                End If
            Else
                freqs = bcch
            End If
            
            Dim allFreqs As String
            allFreqs = freqs
            
            If Trim(trxNum) = "" Or CLng(trxNum) = 0 Then
                selectFreq = ""
            Else
                trxNumArray = Split(trxNum, ",")
            
                If UBound(trxNumArray) = 1 Then
                    Call changeFreqs(freqs, trxNum, cellBand)
                Else
                    Dim trxInd As Long
                    trxInd = CLng(trxNum)
                    freqs = cutTail(freqs, trxInd)
                End If
            
                If Trim(freqs) <> "" Then
                    freqArray = Split(freqs, ",")
                    selectFreq = freqArray(0)
                    For index = LBound(freqArray) To UBound(freqArray)
                        Dim onefreq As Variant
                        onefreq = freqArray(index)
                        FrequencyList.AddItem (onefreq)
                    Next
                Else
                    selectFreq = ""
                End If
            End If
            
            Dim allFreqArray() As String
            If Trim(allFreqs) <> "" Then
                allFreqArray = Split(allFreqs, ",")
                For index = LBound(allFreqArray) To UBound(allFreqArray)
                    onefreq = allFreqArray(index)
                    freqCollection.Add (onefreq)
                Next
            End If
            Exit For
        End If
    Next
        
    If freqCollection.count <> 0 Then
        If Me.FrequencyList.ListCount <> 0 Then
            Me.FrequencyList.ListIndex = getIndexInCollection(selectFreq, freqCollection)
        End If
    End If
    
End Function
Private Function getGcellBTSNameCol(shtname As String) As Long
    getGcellBTSNameCol = getColNum(shtname, 2, "BTSNAME", "GCELL")
End Function
Private Function getGcellCellNameCol(shtname As String) As Long
    getGcellCellNameCol = getColNum(shtname, 2, "CELLNAME", "GCELL")
End Function
Private Function getBcchCol(shtname As String) As Long
    getBcchCol = getColNum(shtname, 2, "BCCHFREQ", "TRXINFO")
End Function
Private Function getNonBcchCol(shtname As String) As Long
    getNonBcchCol = getColNum(shtname, 2, "NONBCCHFREQLIST", "TRXINFO")
End Function
Private Function getTrxNumCol(shtname As String) As Long
    getTrxNumCol = getColNum(shtname, 2, "TRXNUM", "TRXINFO")
End Function
Private Function getCellBandCol(shtname As String) As Long
    getCellBandCol = getColNum(shtname, 2, "TYPE", "GCELL")
End Function
Private Function existInCollection(strValue As Variant, strCollection As Collection) As Boolean
    Dim sItem As Variant
    For Each sItem In strCollection
        If sItem = strValue Then
            existInCollection = True
            Exit Function
        End If
    Next
    existInCollection = False
End Function

Private Function getIndexInCollection(strValue As Variant, strCollection As Collection) As Long
    Dim sItem As Variant
    Dim index As Long
    index = 0
    For Each sItem In strCollection
        If sItem = strValue Then
            getIndexInCollection = index
            Exit Function
        End If
        index = index + 1
    Next
    getIndexInCollection = 0
End Function


Private Sub Upt_Desc()
    DeleteFreqForm.Caption = getResByKey("DeleteFreqForm.Caption")
    BaseStationNameBox.Caption = getResByKey("BaseStationNameBox.Caption")
    CellNameBox.Caption = getResByKey("CellNameBox.Caption")
    FrequencyBox.Caption = getResByKey("FrequencyBox.Caption")
    CommitButton.Caption = getResByKey("CommitButton.Caption")
    CancelButton.Caption = getResByKey("CancelButton.Caption")
End Sub

Private Sub BaseStationList_Change()
    SelectedSiteName = Me.BaseStationList.value
    Call set_Cell_Related(SelectedSiteName)
    SelectedCellName = Me.CellList.value
        
    Call setFreq_Related(SelectedSiteName, SelectedCellName)
End Sub


Private Sub CancelButton_Click()
    Unload Me
End Sub

Private Sub CellList_Change()
    SelectedSiteName = Me.BaseStationList.value
    SelectedCellName = Me.CellList.value
    Call setFreq_Related(SelectedSiteName, SelectedCellName)
    
End Sub
Private Sub CommitButton_Click()
    Dim baseStationName As String
    Dim CellSheetName As String
    Dim freq As String
    baseStationName = Me.BaseStationList.value
    CellSheetName = Me.CellList.value
    freq = Me.FrequencyList.value
    
    Dim RowNum As Long
    Dim maxRow As Long
    
    CellSheetName = ActiveSheet.name
    
    maxRow = ActiveSheet.Range("a65536").End(xlUp).row
    For RowNum = 3 To maxRow
        If SelectedSiteName = ActiveSheet.Cells(RowNum, getGcellBTSNameCol(ActiveSheet.name)).value _
            And SelectedCellName = ActiveSheet.Cells(RowNum, getGcellCellNameCol(ActiveSheet.name)).value Then
            row = RowNum
            Exit For
        End If
    Next
    
    Call deleteFreqAndAssocMo(CellSheetName, row, SelectedFreqIndex, freqCollection)
    
    If iseGBTSTemp() Then
        Call deleteFreqAssoEqm(row, SelectedFreqIndex)
    End If
    
    Call MsgBox(getResByKey("deleteTrxSuccess"), vbInformation, getResByKey("success"))
        
    Unload Me
End Sub

Private Sub FrequencyList_Change()
    SelectedSiteName = Me.BaseStationList.value
    SelectedCellName = Me.CellList.value
    SelectedFreq = Me.FrequencyList.value
    
    SelectedFreqIndex = getIndexInCollection(SelectedFreq, freqCollection)
End Sub

Private Sub UserForm_Initialize()
    Call Upt_Desc
    Call Set_BaseStation_Related
    Dim btsName As String
    Dim cellName As String
    btsName = Me.BaseStationList.value
    
    Call set_Cell_Related(btsName)
    cellName = Me.CellList.value
        
    Call setFreq_Related(btsName, cellName)
End Sub
Private Function iseGBTSTemp() As Boolean
    Dim cover As String
    Dim key As String
    
    cover = getResByKey("Cover")
    key = ThisWorkbook.Worksheets(cover).Cells(2, 2).value
    If key = "GBTS|fffd||fffd||1b5||fffd||fffd||fffd||fffd||fffd||27c||fffd||fffd||fffd|" Or key = "GBTS RF Adjustment Data Workbook" Then
        iseGBTSTemp = False
    Else
        iseGBTSTemp = True
    End If
End Function
Attribute VB_Name = "EmptySheetSub"
Sub hiddenEmptySheet()
        Dim index As Long
        Dim column As Long
        Dim isEmpty As Boolean
        Dim sheetDef As Worksheet
        Set sheetDef = ThisWorkbook.Worksheets("SHEET DEF")
        For index = 2 To sheetDef.Range("a65536").End(xlUp).row
                isEmpty = True
                If UCase(sheetDef.Cells(index, 2)) <> "MAIN" And UCase(sheetDef.Cells(index, 2)) <> "COMMON" Then
                    For column = 1 To ThisWorkbook.Worksheets(sheetDef.Cells(index, 1).value).Range("IV2").End(xlToLeft).column
                             If ThisWorkbook.Worksheets(sheetDef.Cells(index, 1).value).Cells(3, column).value <> "" Then
                                    isEmpty = False
                                    Exit For
                             End If
                    Next
                    If isEmpty Then
                        ThisWorkbook.Worksheets(sheetDef.Cells(index, 1).value).Visible = 0
                    End If
                End If
        Next
End Sub

Sub showEmptySheet()
        Dim index As Long
        Dim sheetDef As Worksheet
        Set sheetDef = ThisWorkbook.Worksheets("SHEET DEF")
        For index = 2 To sheetDef.Range("a65536").End(xlUp).row
                 If UCase(sheetDef.Cells(index, 2)) <> "MAIN" And UCase(sheetDef.Cells(index, 2)) <> "COMMON" Then
                    ThisWorkbook.Worksheets(sheetDef.Cells(index, 1).value).Visible = -1
                End If
        Next
End Sub


Attribute VB_Name = "FileSub"
#If VBA7 Then
    Public Declare PtrSafe Function MultiByteToWideChar Lib "kernel32" ( _
        ByVal CodePage As Long, _
        ByVal dwFlags As Long, _
        ByRef lpMultiByteStr As Any, _
        ByVal cchMultiByte As Long, _
        ByVal lpWideCharStr As Any, _
        ByVal cchWideChar As Long) As Long
#Else
    Public Declare Function MultiByteToWideChar Lib "kernel32" ( _
        ByVal CodePage As Long, _
        ByVal dwFlags As Long, _
        ByRef lpMultiByteStr As Any, _
        ByVal cchMultiByte As Long, _
        ByVal lpWideCharStr As Any, _
        ByVal cchWideChar As Long) As Long
#End If

#If VBA7 Then
    Public Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" ( _
        ByVal CodePage As Long, _
        ByVal dwFlags As Long, _
        ByVal lpWideCharStr As Any, _
        ByVal cchWideChar As Long, _
        ByRef lpMultiByteStr As Any, _
        ByVal cchMultiByte As Long, _
        ByVal lpDefaultChar As String, _
        ByVal lpUsedDefaultChar As Long) As Long
#Else
    Public Declare Function WideCharToMultiByte Lib "kernel32" ( _
        ByVal CodePage As Long, _
        ByVal dwFlags As Long, _
        ByVal lpWideCharStr As Any, _
        ByVal cchWideChar As Long, _
        ByRef lpMultiByteStr As Any, _
        ByVal cchMultiByte As Long, _
        ByVal lpDefaultChar As String, _
        ByVal lpUsedDefaultChar As Long) As Long
#End If
    
Function readUTF8File(strFile As String) As String
    Dim bByte As Byte
    Dim ReturnByte() As Byte
    Dim lngBufferSize As Long
    Dim strBuffer As String
    Dim lngResult As Long
    Dim bHeader(1 To 3) As Byte
    Dim I As Long
 
    On Error GoTo errHandle
    If Dir(strFile) = "" Then Exit Function
 
     ' |fffd||536||fffd||fffd||fffd||fffd||1b4||fffd||fffd||13c||fffd|
    Open strFile For Binary As #1
    ReDim ReturnByte(0 To LOF(1) - 1) As Byte
    ' |fffd||fffd||221||1f0||fffd||fffd||fffd||fffd||fffd||5bd||fffd|
    Get #1, , bHeader(1)
    Get #1, , bHeader(2)
    Get #1, , bHeader(3)
    ' |fffd||436||fffd||1f0||fffd||fffd||fffd||fffd||fffd||5bd||fffd||fffd||1f7||fffd||3aa|BOM|377|
    If bHeader(1) = 239 And bHeader(2) = 187 And bHeader(3) = 191 Then
        For I = 3 To LOF(1) - 1
            Get #1, , ReturnByte(I - 3)
        Next I
    Else
        ReturnByte(0) = bHeader(1)
        ReturnByte(1) = bHeader(2)
        ReturnByte(2) = bHeader(3)
        For I = 3 To LOF(1) - 1
            Get #1, , ReturnByte(I)
        Next I
    End If
    ' |fffd||631||fffd||fffd||13c||fffd|
    Close #1
 
    ' |5ea||fffd||fffd|UTF-8|fffd||fffd||fffd||fffd||3aa||fffd||5b7||fffd||fffd||fffd|
    lngBufferSize = UBound(ReturnByte) + 1
    strBuffer = String$(lngBufferSize, vbNullChar)
    lngResult = MultiByteToWideChar(65001, 0, ReturnByte(0), _
        lngBufferSize, StrPtr(strBuffer), lngBufferSize)
    readUTF8File = Left(strBuffer, lngResult)
 
    Exit Function
errHandle:
    Close #1
    readUTF8File = ""
    Exit Function
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||131||fffd||434||fffd||fffd|UTF8|fffd||fffd||2bd||fffd||fffd||fffd||131||fffd||fffd||13c||fffd|
' strInput|fffd||fffd||fffd||131||fffd||fffd||5b7||fffd||fffd||fffd|
' strFile|fffd||fffd||fffd||fffd||fffd||fffd||fffd|UTF8|fffd||fffd||2bd||fffd||13c||fffd||b7||fffd||fffd|
' bBOM|fffd||fffd|True|fffd||fffd||2be||fffd||13c||fffd||fffd||fffd|"EFBBBF"|377||fffd||fffd|False|fffd||fffd||2be||fffd||fffd||fffd||fffd|
Sub WriteUTF8File(strInput As String, strFile As String, Optional bBOM As Boolean = True)
    On Error GoTo errHandle
    Dim bByte As Byte
    Dim ReturnByte() As Byte
    Dim lngBufferSize As Long
    Dim lngResult As Long
    Dim TLen As Long
 
    ' |fffd||436||fffd||fffd||fffd||fffd||fffd||fffd||5b7||fffd||fffd||fffd||fffd||1f7||fffd||3aa||fffd||fffd|
    If Len(strInput) = 0 Then Exit Sub
    ' |fffd||436||fffd||fffd||13c||fffd||fffd||1f7||fffd||fffd||fffd||6a3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||27e||fffd||fffd|
    If Dir(strFile) <> "" Then Kill strFile
 
    TLen = Len(strInput)
    lngBufferSize = TLen * 3 + 1
    ReDim ReturnByte(lngBufferSize - 1)
    lngResult = WideCharToMultiByte(CP_UTF8, 0, StrPtr(strInput), TLen, _
        ReturnByte(0), lngBufferSize, vbNullString, 0)
    If lngResult Then
        lngResult = lngResult - 1
        ReDim Preserve ReturnByte(lngResult)
        Open strFile For Binary As #1
        If bBOM = True Then
            bByte = 239
            Put #1, , bByte
            bByte = 187
            Put #1, , bByte
            bByte = 191
            Put #1, , bByte
        End If
        Put #1, , ReturnByte
        Close #1
    End If
    Exit Sub
errHandle:
    Close #1
    Exit Sub
End Sub

Attribute VB_Name = "GenBaseStationRef"
Option Explicit
Dim board_pattern As String
Public board_style As String


Public Sub genBaseStationBoardStyleRef(ByRef ws As Worksheet, ByRef Target As Range)
    Dim groupName As String, columnName As String
    Dim RowNumber As Long, columnNumber As Long
    Dim refString As String
    Dim flag As Boolean
    If Target.rows.count <> 1 Or Target.Columns.count <> 1 Then Exit Sub
    flag = getBoardStyleInfo(ws.name)
    If flag = False Then
        Exit Sub
    End If
    
    RowNumber = Target.row
    columnNumber = Target.column
    flag = isBoardStyleCol(ws, RowNumber, columnNumber)
    If flag = False Then Exit Sub
    
    refString = genBoardStyleRefString()
    If refString = "" Then Exit Sub
    
    Call setBoardStyleListBoxRangeValidation(ws.name, board_pattern, board_style, refString, ws, Target)
End Sub


Private Function genBoardStyleRefString() As String
    Dim refString As String
    Dim ws As Worksheet
    Dim boardStyleSheetName As String
    refString = ""
    boardStyleSheetName = getResByKey("Board Style")
    For Each ws In ThisWorkbook.Worksheets
        If InStr(ws.name, boardStyleSheetName) <> 0 Then
            If refString = "" Then
                refString = ws.name
            Else
                refString = refString + "," + ws.name
            End If
        End If
    Next
    genBoardStyleRefString = refString
End Function


Public Function isBoardStyleCol(ByRef ws As Worksheet, ByRef RowNumber As Long, ByRef columnNumber As Long) As Boolean
    Dim attrValue As String
    Dim mocValue As String
    Dim maxRow As Long
'    maxRow = ws.Range("a65536").End(xlUp).row
'    If rowNumber > maxRow Or rowNumber < 3 Then
'        isBoardStyleCol = False
'        Exit Function
'    End If
    
    If rangeHasBorder(ws.rows(RowNumber)) = False Then
        isBoardStyleCol = False
        Exit Function
    End If

    attrValue = ws.Cells(2, columnNumber).value
    If attrValue = board_style Then
        mocValue = getMocGroupName(ws, 1, columnNumber)
        If mocValue = board_pattern Then
            isBoardStyleCol = True
            Exit Function
        End If
    End If
    isBoardStyleCol = False
End Function


Public Function getBoardStyleInfo(ByRef sheetName As String) As Boolean
    Dim relationDef As Worksheet
    Dim maxRow As Long
    Dim RowNum As Long
    Dim tmpName As String
    Set relationDef = ThisWorkbook.Worksheets("RELATION DEF")
    
    
    maxRow = relationDef.Range("a65536").End(xlUp).row
    
    For RowNum = 2 To maxRow
        tmpName = relationDef.Cells(RowNum, 1).value
        If tmpName = sheetName And relationDef.Cells(RowNum, 4).value = "True" And relationDef.Cells(RowNum, 5).value = "False" Then
            board_pattern = relationDef.Cells(RowNum, 2).value
            board_style = relationDef.Cells(RowNum, 3).value
            getBoardStyleInfo = True
            Exit Function
        End If
    Next
    getBoardStyleInfo = False
End Function


Private Function getMocGroupName(ByRef ws As Worksheet, ByRef RowNumber As Long, ByRef columnNumber As Long) As String
    Dim cellValue As String
    cellValue = ws.Cells(RowNumber, columnNumber).value
    Dim k As Long
    If cellValue = "" Then
        For k = columnNumber To 1 Step -1
            cellValue = ws.Cells(RowNumber, k).value
            If cellValue <> "" Then
                getMocGroupName = cellValue
                Exit Function
            End If
        Next k
    Else
        getMocGroupName = cellValue
    End If
End Function


Attribute VB_Name = "HideShowEmptyRow"
Const MocName_Column = 1
Public Function IsSystemSheet(CurSheet As Worksheet) As Boolean
    IsSystemSheet = False
    If CurSheet.name = GetMainSheetName _
       Or CurSheet.name = getResByKey("Cover") _
       Or CurSheet.name = getResByKey("Comm Data") _
         Then
        IsSystemSheet = True
    End If
End Function
Private Sub HideRow(startRow As Long, endRow As Long, CurSheet As Worksheet)
  Dim index As Long
  Dim TitleRow As Long
  Dim ExistsData As Boolean
  ExistsData = False
  
  TitleRow = 1
  Dim count As Long
  count = CurSheet.Columns.count
  For index = startRow To endRow
     If Application.WorksheetFunction.CountBlank(CurSheet.rows(index)) <> count And CurSheet.Cells(index, MocName_Column) = "" Then 'Data row is not empty
       ExistsData = True
     End If
     
     If Application.WorksheetFunction.CountBlank(CurSheet.rows(index)) = count Then 'Empty Row
       CurSheet.rows(index).Hidden = True
     End If
     
     If CurSheet.Cells(index, MocName_Column) <> "" Then 'Next Title Row
       'If last Title Row have not data, hide it
       If ExistsData = False Then
         CurSheet.rows(TitleRow).Hidden = True
       End If
       ExistsData = False
       TitleRow = index
     End If
  Next index
  
  'Last MOC
  If ExistsData = False Then
    CurSheet.rows(TitleRow).Hidden = True
  End If
  
  
End Sub

Function get_EndRow() As Long
  Dim iRow As Long
  Dim ShetDef_Shet As Worksheet
  Set ShetDef_Shet = Sheets("SHEET DEF")
  
  get_EndRow = 1
  iRow = 2
  Do While ShetDef_Shet.Cells(iRow, 1) <> ""
    If ShetDef_Shet.Cells(iRow, 5).value <> "" Then
      If Int(ShetDef_Shet.Cells(iRow, 5)) > get_EndRow Then
              get_EndRow = Int(ShetDef_Shet.Cells(iRow, 5).value)
      End If
    End If
    iRow = iRow + 1
  Loop
End Function

Sub HideEmptyRow()
  Dim CurSheet As Worksheet
  Dim endRow As Long
  Dim startRow As Long
  
  Dim index As Long

  If IsSystemSheet(ActiveSheet) Then Exit Sub
  Set CurSheet = ActiveSheet

  startRow = 2
  endRow = get_EndRow()
  
  Application.ScreenUpdating = False
  
  Call HideRow(startRow, endRow, CurSheet)
  Application.ScreenUpdating = True

End Sub

Sub ShowEmptyRow()
  Dim CurSheet As Worksheet
  If IsSystemSheet(ActiveSheet) Then Exit Sub
  Set CurSheet = ActiveSheet
  CurSheet.Cells.Select
  CurSheet.Cells.EntireRow.Hidden = False
  'CurSheet.rows("1:1").Select
  'Selection.EntireRow.Hidden = True
End Sub










Attribute VB_Name = "InnerValideDef"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "LLD_Summary"
Option Explicit
Public lldModelFlag As String

Function getEndRow(readRowNum As Long) As Long
        Dim rowCount, colIndex As Long
        Dim curStatus, preStatus As Boolean
        preStatus = False
        For rowCount = 1 To Worksheets("COMMON").Range("a65536").End(xlUp).row
                curStatus = True
                For colIndex = 1 To Worksheets("COMMON").Range("IV2").End(xlToLeft).column
                    If Worksheets("COMMON").Cells(readRowNum + rowCount, colIndex).value <> "" Then
                        curStatus = False
                    End If
                Next
                If preStatus = True And curStatus = False Then
                    Exit For
                End If
                preStatus = curStatus
        Next
        getEndRow = rowCount - 1
End Function

'|fffd||fffd||fffd||23d||fffd||fffd||5b7||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function GetDesStr(srcStr As String) As String
    GetDesStr = UCase(Trim(srcStr))
End Function

'|fffd||fffd||5b8||fffd||fffd|sheet|4b3||fffd||fffd||5b8||fffd||fffd||fffd||423||fffd||fffd||fffd||fffd||fffd||5b8||fffd||fffd||fffd||423||fffd||fffd||fffd||fffd||fffd||fffd||43a||fffd|
Function Get_Col(sheetName As String, recordRow As Long, ColValue As String) As Long
    Dim m_colNum As Long
    
    Get_Col = -1
    For m_colNum = 1 To Worksheets(sheetName).Range("IV" + CStr(recordRow)).End(xlToLeft).column
        If GetDesStr(ColValue) = GetDesStr(Worksheets(sheetName).Cells(recordRow, m_colNum).value) Then
                Get_Col = m_colNum
            Exit For
        End If
    Next
End Function

'|fffd||fffd||5b8||fffd||fffd|sheet|4b3||fffd||fffd||fffd||fffd|group|fffd||fffd||fffd||fffd||fffd||fffd|
Function Get_GroupRow(sheetName As String, groupName As String) As Long
    Dim m_rowNum As Long
    Dim f_flag As Boolean
    
    f_flag = False
    For m_rowNum = 1 To Worksheets(sheetName).Range("a65536").End(xlUp).row
        If GetDesStr(groupName) = GetDesStr(Worksheets(sheetName).Cells(m_rowNum, 1).value) Then
            f_flag = True
            Exit For
        End If
    Next
    If f_flag = False Then
        'MsgBox sheetName & "|231||fffd||fffd|Group|fffd||fffd|" & groupName, vbExclamation, "Warning"
    End If
    
    Get_GroupRow = m_rowNum
    
End Function





Attribute VB_Name = "LteTemplateForm"
Attribute VB_Base = "0{CB670695-6FB1-4E4D-A254-E4479A6EF8F0}{E451912B-6B07-45EB-9EFE-38D368872EF3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False







'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4fa||fffd||27e||fffd||fffd||fffd||fffd|MappingSiteTemplate|fffd||fffd|,|fffd||fffd|MappingCellTemplate|fffd||fffd||fffd||361||fffd|MappingRadioTemplate|fffd||fffd||4b3||fffd||fffd||123||fffd||fffd|

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''                         '
'1.|fffd||fffd||fffd||4fa||fffd||27e||fffd||fffd||fffd||fffd|MappingSiteTemplate|fffd||fffd||4b3||fffd||fffd||123||fffd||5863|
'|fffd||fffd|*Site Type|fffd||fffd||fffd||fffd|Cabinet Type|fffd||fffd||fffd||fffd|FDD/TDD Mode|fffd||fffd||fffd||fffd|*Site Patten|fffd||fffd||fffd||43a||fffd||461||5b5||fffd||134||fffd||fffd||fffd|    '
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'|fffd||fffd||fffd||fffd||fffd||bc||fffd|,|12c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2be|Site|fffd||fffd||1e9||4b3|
Private Sub UserForm_Activate()
    MultiPage.Font.Size = 10
    Me.Caption = getResByKey("Bar_Template")
'    If MultiPage.value = 0 Then
'        'Me.SitePattern.SetFocus
'        'SetSiteType
'    Else
    MultiPage.value = 1
    SetFddTddIdd
'    End If
    Dim func As ToolBarFunction
    Set func = New ToolBarFunction
    If func.siteAddSupport = False Then
        MultiPage.Pages.Item(0).Visible = False
    End If
    If func.cellAddSupport = False Then
        MultiPage.Pages.Item(1).Visible = False
    End If
    If func.radioAddSupport = False Then
        MultiPage.Pages.Item(2).Visible = False
    End If
End Sub
'|461||fffd||fffd||fffd||bc||fffd|,|461||fffd||fffd||36c||fffd||131||fffd||1e9|(|fffd||fffd||fffd||fffd|Site,Cell|fffd||fffd|Radio)
Private Sub MultiPage_Change()
 If MultiPage.value = 0 Then
    'SetSiteType
 ElseIf MultiPage.value = 1 Then
    SetFddTddIdd
 ElseIf MultiPage.value = 2 Then
    'SetFTMode
    'SetRSA
 End If
End Sub
'|461||fffd||fffd||fffd||bc||fffd|,|461||fffd||fffd|Add |461||fffd||fffd|
Private Sub AddSiteTemplate_Click()
    Me.SitePattern.Visible = True
    Me.SitePatternList.Visible = False
    Me.AddSiteButton.Caption = getResByKey("Add")
End Sub
'|461||fffd||fffd||fffd||bc||fffd|,|461||fffd||fffd|Delete|461||fffd||fffd|
Private Sub DeleteSiteTemplate_Click()
    Me.SitePattern.Visible = False
    Me.SitePatternList.Visible = True
    Me.AddSiteButton.Caption = getResByKey("Delete")
    Set_Template_Related
End Sub
'|fffd||1f7b||fffd||fffd||fffd||fffd|Add/Delete|fffd||fffd||fffd||fffd|
Private Sub AddSiteButton_Click()
    If Me.AddSiteTemplate.value = True Then
        AddSite
    Else
        DeleteSite
    End If
    Call refreshCell
End Sub
'|221||fffd||fffd||fffd||2f4||3b2||fffd||fffd||fffd|
Private Sub CancelSiteButton_Click()
    Unload Me
End Sub

'|fffd||fffd|DeleteSite|fffd||fffd||fffd||fffd||165||fffd||bc||fffd|,|27e||fffd||fffd||123||fffd||fffd|
Private Sub DeleteSite()
    Dim templatename As String
    Dim rowscount As Long
    Dim templateStr As String
    Dim iIndex As Long
    Dim existflg As Long
    
    templatename = SitePatternList.text
    
    '|fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    rowscount = MappingSiteTemplate.Range("a65536").End(xlUp).row
    
    '|fffd||fffd||fffd||fffd|flag
    existflg = 0
      
    '|fffd||fffd|Site Pattern|fffd||fffd||3aa||fffd||fffd||2b1||fffd||fffd||fffd||fffd|
    If templatename = "" Then
       MsgBox templatename & getResByKey("sitePatternIsEmpty"), vbExclamation, getResByKey("Warning")
        existflg = 2
        Exit Sub
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||12c||fffd||3fa||fffd||461||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||638||fffd||fffd||fffd||2b1||27e||fffd||fffd||fffd||fffd|
    For m_rowNum = 2 To rowscount
        If MappingSiteTemplate.Cells(m_rowNum, 4) = templatename _
                And MappingSiteTemplate.Cells(m_rowNum, 3) = FDDTDDMode.value _
                And MappingSiteTemplate.Cells(m_rowNum, 2) = CabinetType.value _
                And MappingSiteTemplate.Cells(m_rowNum, 1) = SiteType.value Then
            MappingSiteTemplate.rows(m_rowNum).Delete
            existflg = 1
        End If
    Next
    
    If existflg = 0 Then
        MsgBox templatename & getResByKey("NotExist"), vbExclamation, getResByKey("Warning")
    End If
    
    If existflg = 1 Then
        SitePatternList.text = ""
        For iIndex = 0 To SitePatternList.ListCount - 1
                    If (SitePatternList.List(iIndex, 0) = templatename) Then
                        SitePatternList.RemoveItem (iIndex)
                        Exit For
                    End If
        Next
        Load Me
                MsgBox getResByKey("is deleted"), vbInformation, getResByKey("Information")
    End If
    
End Sub

'|fffd||fffd|AddSite|fffd||fffd||fffd||fffd||165||fffd||bc||fffd|,|fffd||fffd||fffd||fffd||123||fffd||fffd|
Private Sub AddSite()
    Dim templatename As String
    Dim rowscount As Long
    Dim templateStr As String
    Dim iIndex As Long
    Dim existflg As Long
    Dim lastLineofGroup As Long
    
    '|fffd||fb||fffd||fffd||fffd||fffd||fffd||5b5|
    templatename = SitePattern.text
    
    '|fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    rowscount = MappingSiteTemplate.Range("a65536").End(xlUp).row
    
    '|fffd||638||fffd||fffd||fffd||fffd||fffd|flag
    existflg = 0
      
    '|fffd||fffd|Site Pattern|fffd||fffd||3aa||fffd||fffd||2b1||fffd||fffd||fffd||fffd|
    If templatename = "" Then
        MsgBox templatename & getResByKey("sitePatternIsEmpty"), vbExclamation, getResByKey("Warning")
        existflg = 1
        Exit Sub
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||12c||fffd||3fa||fffd||461||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||638||fffd||fffd||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd|
    For m_rowNum = 2 To rowscount
        If MappingSiteTemplate.Cells(m_rowNum, 4) = templatename _
                And MappingSiteTemplate.Cells(m_rowNum, 3) = FDDTDDMode.value _
                And MappingSiteTemplate.Cells(m_rowNum, 2) = CabinetType.value _
                And MappingSiteTemplate.Cells(m_rowNum, 1) = SiteType.value Then
            MsgBox templatename & getResByKey("AlreadyExists"), vbExclamation, getResByKey("Warning")
            SitePattern.SetFocus
            existflg = 1
            Exit For
        End If
    Next
        
    '|fffd||fffd||fffd||4b5||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd|
    lastLineofGroup = rowscount + 1
    Worksheets("MappingSiteTemplate").rows(CStr(lastLineofGroup) & ":" & CStr(lastLineofGroup)).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    
    '|fffd||fffd||fffd||638||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd||5b5||5f7||fffd||4f5||fffd||fffd||fffd||461||5b5||fffd||431||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b6||fffd||fffd||fffd||fffd||fffd|eNodeB Transport Data|fffd||fffd||4b3||fffd||135||fffd||4bb||fffd||fffd||fffd||fffd||bc|
    If existflg = 0 Then
        MappingSiteTemplate.Cells(lastLineofGroup, 1).value = SiteType.value
        MappingSiteTemplate.Cells(lastLineofGroup, 2).value = CabinetType.value
        MappingSiteTemplate.Cells(lastLineofGroup, 3).value = FDDTDDMode.value
        MappingSiteTemplate.Cells(lastLineofGroup, 4).value = templatename
        Load Me
         MsgBox getResByKey("is added"), vbInformation, getResByKey("Information")
    End If
End Sub

'|fffd||fffd|Site Type|fffd||fffd||461||fffd||fffd||fffd||bc||fffd|
Private Sub SiteType_Change()
    SetCabinetType (Me.SiteType.text)
    
    'DBS3900_LTE|5a7||fffd||fffd|FDD/TDD/FDDTDD|fffd||fffd||fffd||5a3||fffd||fffd||fffd||fffd||fffd||57e||fffd||fffd||5bb||5a7||fffd||fffd|FDD
    Me.FDDTDDMode.Clear
    If Me.SiteType.text = "DBS3900_LTE" Then
        Me.FDDTDDMode.AddItem ("FDD")
        Me.FDDTDDMode.AddItem ("TDD")
        Me.FDDTDDMode.AddItem ("FDDTDD")
    Else
        Me.FDDTDDMode.AddItem ("FDD")
    End If
    
    FDDTDDMode.value = "FDD"
    Set_Template_Related
    
End Sub

'|fffd||fffd|Cabinet Type|fffd||fffd||461||fffd||fffd||fffd||bc||fffd|
Private Sub CabinetType_Change()
    Set_Template_Related
End Sub

'|fffd||fffd|FDDTDD Mode|fffd||fffd||461||fffd||fffd||fffd||bc||fffd|
Private Sub FDDTDDMode_Change()
    Set_Template_Related
End Sub

'|fffd||4e1||fffd|MappingSiteTypeCabinetType|fffd||fffd||4b3||fffd||fffd||221||fffd||fffd|*Site Type|fffd||fffd||fffd||43a||fffd||461||5b5|
Private Sub SetSiteType()
    Dim m_rowNum As Long
    Dim m_RowNum_Inner As Long
    Dim m_Str As String
    Dim flag As Boolean
    
    Me.SiteType.Clear
    Me.SiteType.AddItem (MappingSiteTypeCabinetType.Cells(2, 1).value)
    SiteType.value = MappingSiteTypeCabinetType.Cells(2, 1).value
    For m_rowNum = 3 To MappingSiteTypeCabinetType.Range("a65536").End(xlUp).row
        For m_RowNum_Inner = 2 To m_rowNum - 1
            If MappingSiteTypeCabinetType.Cells(m_rowNum, 1) <> MappingSiteTypeCabinetType.Cells(m_RowNum_Inner, 1) Then
                flag = False
            Else
                flag = True
                Exit For
            End If
        Next
        If flag = False Then
            Me.SiteType.AddItem (MappingSiteTypeCabinetType.Cells(m_rowNum, 1).value)
        End If
    Next
    
End Sub

'|fffd||4e1||fffd|MappingSiteTypeCabinetType|fffd||fffd||4b3||fffd||fffd||221||fffd||fffd|Cabinet Type|fffd||fffd||fffd||43a||fffd||461||5b5|
Private Sub SetCabinetType(SiteType As String)
    Dim m_rowNum As Long
    Dim m_Str As String
    Dim flag As Boolean
    flag = True
    
    '|fffd||fffd||fffd||fffd||fffd|Cabinet Type|fffd||fffd||fffd||275||13a||fffd||461||5b5|
    Me.CabinetType.Clear
    
    For m_rowNum = 2 To MappingSiteTypeCabinetType.Range("a65536").End(xlUp).row
        If SiteType = MappingSiteTypeCabinetType.Cells(m_rowNum, 1).value Then
            Me.CabinetType.AddItem (MappingSiteTypeCabinetType.Cells(m_rowNum, 2).value)
            If flag = True Then
                CabinetType.value = MappingSiteTypeCabinetType.Cells(m_rowNum, 2).value
                flag = False
            End If
        End If
    Next
    
End Sub
'|fffd||4e1||fffd|MappingSiteTemplate|fffd||fffd||4b3||fffd||fffd||221||fffd||fffd|*Site Patten|fffd||fffd||fffd||43a||fffd||461||5b5|
Private Sub Set_Template_Related()
    Dim m_rowNum As Long
    
    '|fffd||fffd||fffd||fffd||fffd|Cabinet Type|fffd||fffd||fffd||275||13a||fffd||461||5b5|
    SitePatternList.Clear
    For m_rowNum = 2 To MappingSiteTemplate.Range("a65536").End(xlUp).row
        If SiteType.text = MappingSiteTemplate.Cells(m_rowNum, 1).value _
            And CabinetType.text = MappingSiteTemplate.Cells(m_rowNum, 2).value _
            And FDDTDDMode.text = MappingSiteTemplate.Cells(m_rowNum, 3).value Then
            SitePatternList.AddItem (MappingSiteTemplate.Cells(m_rowNum, 4).value)
        End If
    Next
    
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'|fffd||fffd||fffd||4fa||fffd||27e||fffd||fffd||fffd||fffd|MappingCellTemplate|fffd||fffd||4b3||fffd||fffd||123||fffd||fffd|                             '
'|fffd||fffd|*Band Width|fffd||fffd||fffd||fffd|FddTddIdd|fffd||fffd||fffd||fffd|FDD/TDD Mode|fffd||fffd||fffd||fffd|*Cell Mode|fffd||fffd||fffd||43a||fffd||461||5b5||fffd||134||fffd||fffd||fffd|    '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub AddCellTemplate_Click()
    Me.CellPatternText.Visible = True
    Me.CellPattern.Visible = False
    Me.AddCellButton.Caption = getResByKey("Add")
End Sub
Private Sub DeleteCellTemplate_Click()
    Me.CellPattern.Visible = True
    Me.CellPatternText.Visible = False
    Me.AddCellButton.Caption = getResByKey("Delete")
    SetCellPattern
End Sub
'|fffd||1f7b||fffd||fffd||fffd||fffd|Add/Delete|fffd||fffd||fffd||fffd|
Private Sub AddCellButton_Click()
    If Me.AddCellTemplate.value = True Then
        AddCell
    Else
        DeleteCell
    End If
    Call refreshCell
End Sub
'|221||fffd||fffd||fffd||2f4||3b2||fffd||fffd||fffd|
Private Sub CancelCellButton_Click()
    Unload Me
End Sub

'|fffd||fffd|Delete|fffd||fffd||fffd||fffd||165||fffd||bc||fffd|,|27e||fffd||fffd||123||fffd||fffd|
Private Sub DeleteCell()
    Dim templatename As String
    Dim rowscount As Long
    Dim templateStr As String
    Dim iIndex As Long
    Dim existflg As Long
    
    '|fffd||fb||fffd||fffd||fffd||fffd||fffd||5b5|
    templatename = CellPattern.text
    
    '|fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    rowscount = MappingCellTemplate.Range("a65536").End(xlUp).row
    
    '|fffd||fffd||fffd||fffd|flag
    existflg = 0
      
    '|fffd||fffd|Cell Pattern|fffd||fffd||3aa||fffd||fffd||2b1||fffd||fffd||fffd||fffd|
    If templatename = "" Then
        MsgBox templatename & getResByKey("cellPatternIsEmpty"), vbExclamation, getResByKey("Warning")
        existflg = 2
        Exit Sub
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||12c||fffd||3fa||fffd||461||5b5||fffd||fffd||fffd||4b5||fffd||fffd||fffd||4e6||fffd||fffd||2b1||27e||fffd||fffd||fffd||fffd|
    For m_rowNum = 2 To rowscount
        If MappingCellTemplate.Cells(m_rowNum, 5) = templatename _
                And (MappingCellTemplate.Cells(m_rowNum, 4) = SA.value Or Me.SA.Enabled = False) _
                And MappingCellTemplate.Cells(m_rowNum, 3) = FddTddIdd.value _
                And MappingCellTemplate.Cells(m_rowNum, 2) = TxRxMode.value _
                And MappingCellTemplate.Cells(m_rowNum, 1) = BandWidth.value Then
            MappingCellTemplate.rows(m_rowNum).Delete
            SetCellPattern
            existflg = 1
        End If
    Next
    
    If existflg = 0 Then
         MsgBox templatename & getResByKey("NotExist"), vbExclamation, getResByKey("Warning")
    End If
    
    If existflg = 1 Then
        'CellPattern.text = ""
        For iIndex = 0 To CellPattern.ListCount - 1
                    If (CellPattern.List(iIndex, 0) = templatename) Then
                        CellPattern.RemoveItem (iIndex)
                        Exit For
                    End If
        Next
        Load Me
                MsgBox getResByKey("is deleted"), vbInformation, getResByKey("Information")
    End If
End Sub

'|fffd||fffd|Add|fffd||fffd||fffd||fffd||165||fffd||bc||fffd|,|fffd||fffd||fffd||fffd||123||fffd||fffd|
Private Sub AddCell()
    Dim templatename As String
    Dim rowscount As Long
    Dim templateStr As String
    Dim iIndex As Long
    Dim existflg As Long
    Dim lastLineofGroup As Long
    Dim flag4, flag3, flag2, flag1 As Boolean
    
    flag4 = False
    flag3 = False
    flag2 = False
    falg1 = False
    
    '|fffd||fb||fffd||fffd||fffd||fffd||fffd||5b5|
    templatename = CellPatternText.text
    
    '|fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    rowscount = MappingCellTemplate.Range("E65536").End(xlUp).row
    
    '|fffd||638||fffd||fffd||fffd||fffd||fffd|flag
    existflg = 0
      
    '|fffd||fffd|Cell Pattern|fffd||fffd||3aa||fffd||fffd||2b1||fffd||fffd||fffd||fffd|
    If templatename = "" Then
        MsgBox templatename & getResByKey("cellPatternIsEmpty"), vbExclamation, getResByKey("Warning")
        existflg = 1
        Exit Sub
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||12c||fffd||3fa||fffd||461||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||638||fffd||fffd||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd|
    For m_rowNum = rowscount To 2 Step -1
        If MappingCellTemplate.Cells(m_rowNum, 5) = templatename _
                And (MappingCellTemplate.Cells(m_rowNum, 4) = SA.value Or Me.SA.Enabled = False) _
                And MappingCellTemplate.Cells(m_rowNum, 3) = FddTddIdd.value _
                And MappingCellTemplate.Cells(m_rowNum, 2) = TxRxMode.value _
                And MappingCellTemplate.Cells(m_rowNum, 1) = BandWidth.value Then
            MsgBox templatename & getResByKey("AlreadyExists"), vbExclamation, getResByKey("Warning")
            CellPatternText.SetFocus
            existflg = 1
            Exit For
        End If
    Next
        
    '|fffd||fffd||fffd||4b5||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd|
    lastLineofGroup = rowscount + 1
    Worksheets("MappingCellTemplate").rows(CStr(lastLineofGroup) & ":" & CStr(lastLineofGroup)).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
        
    '|fffd||fffd||fffd||638||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd||5b5||5f7||fffd||4f5||fffd||fffd||fffd||461||5b5||fffd||431||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b6||fffd||fffd||fffd||fffd||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||135||fffd||4bb||fffd||fffd||fffd||fffd||bc|
    If existflg = 0 Then
        MappingCellTemplate.Cells(lastLineofGroup, 1).value = BandWidth.value
        MappingCellTemplate.Cells(lastLineofGroup, 2).value = TxRxMode.value
        MappingCellTemplate.Cells(lastLineofGroup, 3).value = FddTddIdd.value
        MappingCellTemplate.Cells(lastLineofGroup, 4).value = SA.value
        MappingCellTemplate.Cells(lastLineofGroup, 5).value = templatename
        Me.CellPatternText.value = ""
        Me.CellPatternText.SetFocus
        Load Me
        MsgBox getResByKey("is added"), vbInformation, getResByKey("Information")
    End If
End Sub

Private Sub FddTddIdd_Change()
    SetBandWidth
    SetTxRxMode
    SetSA
    SetCellPattern
End Sub
Private Sub BandWidth_Change()
    SetCellPattern
End Sub
Private Sub TxRxMode_Change()
    SetCellPattern
End Sub
Private Sub SA_Change()
    SetCellPattern
End Sub
'|fffd||fffd||fffd||e1||fffd|*FddTddIdd|fffd||fffd||fffd||43a||fffd||461||5b5|
Private Sub SetFddTddIdd()

    Me.FddTddIdd.Clear
    Me.FddTddIdd.AddItem ("FDD")
    Me.FddTddIdd.AddItem ("TDD")
    Me.FddTddIdd.text = "TDD"
    
End Sub

'|fffd||fffd||fffd||e1||fffd|*BandWidth|fffd||fffd||fffd||43a||fffd||461||5b5|
Private Sub SetBandWidth()
    
    Me.BandWidth.Clear
    
    If Me.FddTddIdd.text = "FDD" Then
        Me.BandWidth.AddItem ("1.4M")
        Me.BandWidth.AddItem ("3M")
        Me.BandWidth.AddItem ("5M")
        Me.BandWidth.AddItem ("10M")
        Me.BandWidth.AddItem ("15M")
        Me.BandWidth.AddItem ("20M")
        Me.BandWidth.text = ("1.4M")
    ElseIf Me.FddTddIdd.text = "TDD" Then
        Me.BandWidth.AddItem ("5M")
        Me.BandWidth.AddItem ("10M")
        Me.BandWidth.AddItem ("15M")
        Me.BandWidth.AddItem ("20M")
        Me.BandWidth.text = "10M"
    End If

End Sub
'|fffd||fffd||fffd||e1||fffd|*TxRxMode|fffd||fffd||fffd||43a||fffd||461||5b5|
Private Sub SetTxRxMode()
    
    Me.TxRxMode.Clear
    
    If Me.FddTddIdd.text = "FDD" Then
        Me.TxRxMode.AddItem ("1T1R")
        Me.TxRxMode.AddItem ("1T2R")
        Me.TxRxMode.AddItem ("2T2R")
        Me.TxRxMode.AddItem ("2T4R")
        Me.TxRxMode.AddItem ("4T4R")
        Me.TxRxMode.text = "1T1R"
    ElseIf Me.FddTddIdd.text = "TDD" Then
        Me.TxRxMode.AddItem ("1T1R")
        Me.TxRxMode.AddItem ("2T2R")
        Me.TxRxMode.AddItem ("4T4R")
        Me.TxRxMode.AddItem ("8T8R")
        Me.TxRxMode.text = "1T1R"
    End If
    
End Sub

'|fffd||fffd||fffd||e1||fffd|*SA|fffd||fffd||fffd||43a||fffd||461||5b5|
Private Sub SetSA()
    
    Me.SA.Clear
    If Me.FddTddIdd.text = "TDD" Then
        Me.SA.Enabled = True
        Me.SA.AddItem ("SA0")
        Me.SA.AddItem ("SA1")
        Me.SA.AddItem ("SA2")
        Me.SA.AddItem ("SA3")
        Me.SA.AddItem ("SA4")
        Me.SA.AddItem ("SA5")
        Me.SA.AddItem ("SA6")
        Me.SA.text = "SA0"
    Else
        'Me.SA.text = " "
        Me.SA.Enabled = False
    End If
    
End Sub
'|fffd||4e1||fffd|MappingCellTemplate|fffd||fffd||4b3||fffd||fffd||221||fffd||fffd|*Cell Pattern|fffd||fffd||fffd||43a||fffd||461||5b5|
Private Sub SetCellPattern()
    Dim m_rowNum As Long
    Dim m_Str As String
    Dim flag As Boolean
    flag = True
    
    FddTddIdd = Me.FddTddIdd.text
    BandWidth = Me.BandWidth.text
    TxRxMode = Me.TxRxMode.text
    SA = Me.SA.text
    
    '|fffd||fffd||fffd||fffd||fffd|Cell Pattern|fffd||fffd||fffd||275||13a||fffd||461||5b5|
    Me.CellPattern.Clear
    
    For m_rowNum = 2 To MappingCellTemplate.Range("a65536").End(xlUp).row
         If BandWidth = MappingCellTemplate.Cells(m_rowNum, 1).value And FddTddIdd = MappingCellTemplate.Cells(m_rowNum, 3).value And TxRxMode = MappingCellTemplate.Cells(m_rowNum, 2).value Then
            If (Me.SA.Enabled = False) Or (SA = MappingCellTemplate.Cells(m_rowNum, 4).value) Then
                Me.CellPattern.AddItem (MappingCellTemplate.Cells(m_rowNum, 5).value)
                If flag = True Then
                    CellPattern.value = MappingCellTemplate.Cells(m_rowNum, 5).value
                    flag = False
                End If
             End If
        End If
    Next
    
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'|fffd||fffd||fffd||4fa||fffd||27e||fffd||fffd||fffd||fffd|MappingRadioTemplate|fffd||fffd||4b3||fffd||fffd||123||fffd||fffd|                             '
'|fffd||fffd|FTMode|fffd||fffd||fffd||fffd|RSA|fffd||fffd||fffd||fffd|Radio Pattern|fffd||fffd||fffd||43a||fffd||461||5b5||fffd||134||fffd||fffd||fffd|    '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub AddRadioTemplate_Click()
    Me.RadioPatternText.Visible = True
    Me.RadioPattern.Visible = False
    Me.AddRadioButton.Caption = "Add"
End Sub
Private Sub DeleteRadioTemplate_Click()
    Me.RadioPattern.Visible = True
    Me.RadioPatternText.Visible = False
    Me.AddRadioButton.Caption = "Delete"
    SetRadioPattern
End Sub
'|fffd||1f7b||fffd||fffd||fffd||fffd|Add/Delete|fffd||fffd||fffd||fffd|
Private Sub AddRadioButton_Click()
    If Me.AddRadioTemplate.value = True Then
        AddRadio
    Else
        DeleteRadio
    End If
End Sub
Private Sub CancelRadioButton_Click()
    Unload Me
End Sub
Private Sub SetFTMode()
    
    Me.FTMode.Clear
    Me.FTMode.AddItem ("FDD")
    Me.FTMode.AddItem ("TDD")
    Me.FTMode.AddItem ("FDDTDD")
    Me.FTMode.text = "TDD"

End Sub
Private Sub SetRSA()
    
    Me.RSA.Clear
    If Me.FTMode.text = "TDD" Then
        Me.RSA.Enabled = True
        Me.RSA.AddItem ("SA0")
        Me.RSA.AddItem ("SA1")
        Me.RSA.AddItem ("SA2")
        Me.RSA.AddItem ("SA3")
        Me.RSA.AddItem ("SA4")
        Me.RSA.AddItem ("SA5")
        Me.RSA.AddItem ("SA6")
        Me.RSA.text = "SA0"
    Else
        Me.RSA.text = ""
        Me.RSA.Enabled = False
    End If

End Sub
Private Sub FTMode_Change()
    SetRSA
    SetRadioPattern
End Sub

Private Sub RSA_Change()
    SetRadioPattern
End Sub
Private Sub SetRadioPattern()
    Dim m_rowNum As Long
    Dim m_Str As String
    Dim flag As Boolean
    flag = True
    
    FTMode = Me.FTMode.text
    RSA = Me.RSA.text
    
    '|fffd||fffd||fffd||fffd||fffd|Radio Pattern|fffd||fffd||fffd||275||13a||fffd||461||5b5|
    Me.RadioPattern.Clear
    
    For m_rowNum = 2 To MappingRadioTemplate.Range("a65536").End(xlUp).row
         If FTMode = MappingRadioTemplate.Cells(m_rowNum, 1).value Then
            If ((Me.RSA.Enabled = False) Or (RSA = "") Or (RSA = MappingRadioTemplate.Cells(m_rowNum, 2).value)) Then
                Me.RadioPattern.AddItem (MappingRadioTemplate.Cells(m_rowNum, 3).value)
                If flag = True Then
                    RadioPattern.value = MappingRadioTemplate.Cells(m_rowNum, 3).value
                    flag = False
                End If
             End If
        End If
    Next

End Sub
'|fffd||fffd|Delete|fffd||fffd||fffd||fffd||165||fffd||bc||fffd|,|27e||fffd||fffd||123||fffd||fffd|
Private Sub DeleteRadio()
    Dim templatename As String
    Dim rowscount As Long
    Dim templateStr As String
    Dim iIndex As Long
    Dim existflg As Long
    
    '|fffd||fb||fffd||fffd||fffd||fffd||fffd||5b5|
    templatename = RadioPattern.text
    
    '|fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    rowscount = MappingRadioTemplate.Range("a65536").End(xlUp).row
    
    '|fffd||fffd||fffd||fffd|flag
    existflg = 0
      
    '|fffd||fffd|Radio Pattern|fffd||fffd||3aa||fffd||fffd||2b1||fffd||fffd||fffd||fffd|
    If templatename = "" Then
        MsgBox templatename & getResByKey("radioPatternIsEmpty"), vbExclamation, getResByKey("Warning")

        existflg = 2
        Exit Sub
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||12c||fffd||3fa||fffd||461||5b5||fffd||fffd||fffd||4b5||fffd||27e||fffd||fffd||fffd||e8ec||fffd||fffd||fffd||fffd||27e||fffd||fffd||fffd||fffd|
    For m_rowNum = 2 To rowscount
        If MappingRadioTemplate.Cells(m_rowNum, 3) = templatename _
                And MappingRadioTemplate.Cells(m_rowNum, 1) = FTMode.value _
                And (Me.RSA.Enabled = False Or MappingRadioTemplate.Cells(m_rowNum, 2) = RSA.value) Then
            MappingRadioTemplate.rows(m_rowNum).Delete
            existflg = 1
        End If
    Next
    
    If existflg = 0 Then
         MsgBox templatename & getResByKey("NotExist"), vbExclamation, getResByKey("Warning")
    End If
    
    If existflg = 1 Then
        RadioPattern.text = ""
        For iIndex = 0 To RadioPattern.ListCount - 1
                    If (RadioPattern.List(iIndex, 0) = templatename) Then
                        RadioPattern.RemoveItem (iIndex)
                        Exit For
                    End If
        Next
        RadioPattern.SetFocus
        Load Me
        MsgBox getResByKey("is deleted"), vbInformation, getResByKey("Information")
    End If
End Sub

'|fffd||fffd|Add|fffd||fffd||fffd||fffd||165||fffd||bc||fffd|,|fffd||fffd||fffd||fffd||123||fffd||fffd|
Private Sub AddRadio()
    Dim templatename As String
    Dim rowscount As Long
    Dim templateStr As String
    Dim iIndex As Long
    Dim existflg As Long
    Dim lastLineofGroup As Long
    Dim flag As Boolean
    flag = False
    
    '|fffd||fb||fffd||fffd||fffd||fffd||fffd||5b5|
    templatename = RadioPatternText.text
    
    '|fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    rowscount = MappingRadioTemplate.Range("a65536").End(xlUp).row
    
    '|fffd||638||fffd||fffd||fffd||fffd||fffd|flag
    existflg = 0
      
    '|fffd||fffd|Radio Pattern|fffd||fffd||3aa||fffd||fffd||2b1||fffd||fffd||fffd||fffd|
    If templatename = "" Then
        MsgBox templatename & getResByKey("radioPatternIsEmpty"), vbExclamation, getResByKey("Warning")
        existflg = 1
        Exit Sub
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||12c||fffd||3fa||fffd||461||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||638||fffd||fffd||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd|
    For m_rowNum = 2 To rowscount
        If MappingRadioTemplate.Cells(m_rowNum, 3) = templatename _
                And MappingRadioTemplate.Cells(m_rowNum, 2) = RSA.value _
                And MappingRadioTemplate.Cells(m_rowNum, 1) = FTMode.value Then
            MsgBox templatename & getResByKey("AlreadyExists"), vbExclamation, getResByKey("Warning")
            RadioPatternText.SetFocus
            existflg = 1
            Exit For
        End If
    Next
        
   lastLineofGroup = rowscount + 1
    Worksheets("MappingRadioTemplate").rows(CStr(lastLineofGroup) & ":" & CStr(lastLineofGroup)).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
 
    '|fffd||fffd||fffd||638||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd||5b5||5f7||fffd||4f5||fffd||fffd||fffd||461||5b5||fffd||431||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b6||fffd||fffd||fffd||fffd||fffd|eNodeB Transport Data|fffd||fffd||4b3||fffd||135||fffd||4bb||fffd||fffd||fffd||fffd||bc|
    If existflg = 0 Then
        MappingRadioTemplate.Cells(lastLineofGroup, 1).value = FTMode.value
        MappingRadioTemplate.Cells(lastLineofGroup, 2).value = RSA.value
        MappingRadioTemplate.Cells(lastLineofGroup, 3).value = templatename
        RadioPatternText.value = ""
        Load Me
         MsgBox getResByKey("is added"), vbInformation, getResByKey("Information")
    End If
End Sub

Private Sub refreshCell()
    Dim rangeHis As Range
    Dim row, columen As Long
    Set rangeHis = Selection
    ActiveSheet.Cells(Selection.row + 1, Selection.column).Select
    rangeHis.Select
End Sub

Attribute VB_Name = "MakeBoardStyleSheets"
Option Explicit

Private logPath As String

Private Function getSheetNumber(ByRef sheetNumber As Long, ByRef inputParamterStr As String, ByRef trace As String) As Boolean
    On Error GoTo ErrorHandler
    getSheetNumber = True
    Dim parameterArray As Variant, sheetNumberArray As Variant, ele As Variant
    
    inputParamterStr = FileSub.readUTF8File(logPath)
    parameterArray = Split(inputParamterStr, vbCr + vbLf)
    
    For Each ele In parameterArray
        sheetNumberArray = Split(ele, "=")
        If "BoardStyleSheetNumber" = Trim(sheetNumberArray(0)) Then
            sheetNumber = CLng(sheetNumberArray(1))
            Exit Function
        End If
    Next ele

    Exit Function
ErrorHandler:
    getSheetNumber = False
    trace = trace & "GetSheetNumber Fails! " & Err.Description
End Function

'Public Sub releaseClassResource(ByRef applicationFlag As CApplicationFlags, ByRef boardStyle As CBoardStyle)
'    Set applicationFlag = Nothing
'    Set boardStyle = Nothing
'End Sub

Public Sub makeMultiBoardSytleSheets()
    On Error GoTo ErrorHandler

    logPath = ThisWorkbook.Path + "\Parameter.ini"
    
    Dim applicationFlag As New CApplicationFlags
    Call applicationFlag.init
    
    Dim trace As String
    trace = ""
    
    Dim sheetNumber As Long
    Dim inputParamterStr As String
    If False = getSheetNumber(sheetNumber, inputParamterStr, trace) Then GoTo ErrorHandler
    
    Dim boardStyle As New CBoardStyleSheetNumberChange
    Call boardStyle.keepOneBaseBoardStyleSheet
    Call boardStyle.addBoardStyleSheets(sheetNumber)
    
    ThisWorkbook.Save
    'Call releaseClassResource(applicationFlag, boardStyle)
    Call FileSub.WriteUTF8File(inputParamterStr & vbCrLf & "Log=Make board style sheets successfully." & trace, logPath, False)
    'ThisWorkbook.Close saveChanges:=False
    Exit Sub
ErrorHandler:
    ThisWorkbook.Save
    'Call releaseClassResource(applicationFlag, boardStyle)
    Call FileSub.WriteUTF8File(inputParamterStr & vbCrLf & "Log=Make board style sheets unsuccessfully!" & trace & " Error Info: " & Err.Description, logPath, False)
    'ThisWorkbook.Close saveChanges:=False
End Sub

'|fffd||7b8||130||6c7e||fffd||163||fffd||fffd||1f1||fffd||6c7e||fffd||fffd||fffd||775||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4aa||fffd||fffd||fffd||fffd||1f0||328||fffd||fffd||fffd||fffd||fffd||7b8||130||6c7e||fffd||fffd|
Private Function getVersion(ByRef newVersion As String, ByRef inputParamterStr As String, ByRef trace As String, ByRef logPath As String) As Boolean
    On Error GoTo ErrorHandler
    getVersion = True
    Dim parameterArray As Variant, versionArray As Variant, ele As Variant
    
    inputParamterStr = FileSub.readUTF8File(logPath)
    parameterArray = Split(inputParamterStr, vbCr + vbLf)
    
    For Each ele In parameterArray
        versionArray = Split(ele, "=")
        If "NewVersion" = Trim(versionArray(0)) Then
            newVersion = versionArray(1)
            Exit Function
        End If
    Next ele

    Exit Function
ErrorHandler:
    getVersion = False
    trace = trace & "GetVersion Fails! " & Err.Description
End Function

Public Sub changeVersion()
    On Error GoTo ErrorHandler
    
    Dim changeVersionLogPath As String
    changeVersionLogPath = ThisWorkbook.Path + "\ChangeVersion.ini"
    
    Dim applicationFlag As New CApplicationFlags
    Call applicationFlag.init
    
    Dim trace As String
    trace = ""
    
    Dim newVersion As String
    Dim inputParamterStr As String
    '|fffd||fffd||f0||6c7e||fffd||17a||fffd||fffd||fffd||fffd||fffd||fffd||13c||fffd||fffd||fffd||52d||fffd||5b7||fffd||fffd||fffd|
    If False = getVersion(newVersion, inputParamterStr, trace, changeVersionLogPath) Then GoTo ErrorHandler

    If newVersion <> "" Then
        '|fffd||fffd||fffd||fffd||fffd||b5||130||6c7e||fffd||fffd|
        Dim changeVersionClass As New CChangeVersion
        Call changeVersionClass.changeVersion(ThisWorkbook, newVersion)
    End If
    
    ThisWorkbook.Save
    Call FileSub.WriteUTF8File(inputParamterStr & vbCrLf & "Log=Change version successfully." & trace, changeVersionLogPath, False)
    
    Exit Sub
ErrorHandler:
    ThisWorkbook.Save
    Call FileSub.WriteUTF8File(inputParamterStr & vbCrLf & "Log=Change version unsuccessfully!" & trace & " Error Info: " & Err.Description, changeVersionLogPath, False)
End Sub



Attribute VB_Name = "MappingCellTemplate"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MappingRadioTemplate"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MappingSiteTemplate"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "NoneLteTemplateForm"
Attribute VB_Base = "0{0FF2A1E7-2859-4B25-A89F-0090FF807FC5}{0263EE11-2C56-4632-837B-D220FD35EB6A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4fa||fffd||27e||fffd||fffd||fffd||fffd|MappingSiteTemplate|fffd||fffd|,|fffd||fffd|MappingCellTemplate|fffd||fffd||fffd||361||fffd|MappingRadioTemplate|fffd||fffd||4b3||fffd||fffd||123||fffd||fffd|
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''                         '
'1.|fffd||fffd||fffd||4fa||fffd||27e||fffd||fffd||fffd||fffd|MappingSiteTemplate|fffd||fffd||4b3||fffd||fffd||123||fffd||5863|
'|fffd||fffd|*Site Type|fffd||fffd||fffd||fffd|Cabinet Type|fffd||fffd||fffd||fffd|FDD/TDD Mode|fffd||fffd||fffd||fffd|*Site Patten|fffd||fffd||fffd||43a||fffd||461||5b5||fffd||134||fffd||fffd||fffd|    '
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'|fffd||fffd||fffd||fffd||fffd||bc||fffd|,|12c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2be|Site|fffd||fffd||1e9||4b3|
Private Sub UserForm_Activate()
    MultiPage.Font.Size = 10
    Me.Caption = getResByKey("Bar_Template")
    If MultiPage.value = 0 Then
        Me.SitePattern.SetFocus
        SetSiteType
    Else
        MultiPage.value = 0
    End If
    Dim func As ToolBarFunction
    Set func = New ToolBarFunction
    If func.siteAddSupport = False Then
        MultiPage.Pages.Item(0).Visible = False
    End If
    If func.cellAddSupport = False Then
        MultiPage.Pages.Item(1).Visible = False
    End If
    If func.radioAddSupport = False Then
        MultiPage.Pages.Item(2).Visible = False
    End If
End Sub
'|461||fffd||fffd||fffd||bc||fffd|,|461||fffd||fffd||36c||fffd||131||fffd||1e9|(|fffd||fffd||fffd||fffd|Site,Cell|fffd||fffd|Radio)
Private Sub MultiPage_Change()
 If MultiPage.value = 0 Then
    SetSiteType
 ElseIf MultiPage.value = 1 Then
    setCellTypePattern
 ElseIf MultiPage.value = 2 Then
    setRadioType
 End If
End Sub
'|461||fffd||fffd||fffd||bc||fffd|,|461||fffd||fffd|Add |461||fffd||fffd|
Private Sub AddSiteTemplate_Click()
    Me.SitePattern.Visible = True
    Me.SitePatternList.Visible = False
    Me.AddSiteButton.Caption = getResByKey("Add")
End Sub
'|461||fffd||fffd||fffd||bc||fffd|,|461||fffd||fffd|Delete|461||fffd||fffd|
Private Sub DeleteSiteTemplate_Click()
    Me.SitePattern.Visible = False
    Me.SitePatternList.Visible = True
    Me.AddSiteButton.Caption = getResByKey("Delete")
    Set_Template_Related
End Sub
'|fffd||1f7b||fffd||fffd||fffd||fffd|Add/Delete|fffd||fffd||fffd||fffd|
Private Sub AddSiteButton_Click()
    If Me.AddSiteTemplate.value = True Then
        AddSite
    Else
        DeleteSite
    End If
    Call refreshCell
End Sub
'|221||fffd||fffd||fffd||2f4||3b2||fffd||fffd||fffd|
Private Sub CancelSiteButton_Click()
    Unload Me
End Sub

'|fffd||fffd|DeleteSite|fffd||fffd||fffd||fffd||165||fffd||bc||fffd|,|27e||fffd||fffd||123||fffd||fffd|
Private Sub DeleteSite()
    Dim templatename As String
    Dim rowscount As Long
    Dim templateStr As String
    Dim iIndex As Long
    Dim existflg As Long
    Dim neType As String
    neType = getNeType()
    
    templatename = Trim(SitePatternList.text)
    
    '|fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    rowscount = MappingSiteTemplate.Range("a65536").End(xlUp).row
    
    '|fffd||fffd||fffd||fffd|flag
    existflg = 0
      
    '|fffd||fffd|Site Pattern|fffd||fffd||3aa||fffd||fffd||2b1||fffd||fffd||fffd||fffd|
    If templatename = "" Then
        MsgBox templatename & getResByKey("sitePatternIsEmpty"), vbExclamation, getResByKey("Warning")
        existflg = 2
        Exit Sub
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||12c||fffd||3fa||fffd||461||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||638||fffd||fffd||fffd||2b1||27e||fffd||fffd||fffd||fffd|
    For m_rowNum = 2 To rowscount
        If MappingSiteTemplate.Cells(m_rowNum, 4) = templatename _
                And MappingSiteTemplate.Cells(m_rowNum, 1) = SiteType.value _
                And MappingSiteTemplate.Cells(m_rowNum, 5) = neType Then
            MappingSiteTemplate.rows(m_rowNum).Delete
            existflg = 1
        End If
    Next
    
    If existflg = 0 Then
        MsgBox templatename & getResByKey("NotExist"), vbExclamation, getResByKey("Warning")
    End If
    
    '|27e||fffd||fffd||fffd||279||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b6||fffd||fffd||fffd||fffd||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||135||fffd||4bb||fffd||fffd||fffd||fffd||bc|
    If existflg = 1 Then
        SitePatternList.text = ""
        For iIndex = 0 To SitePatternList.ListCount - 1
                    If (SitePatternList.List(iIndex, 0) = templatename) Then
                        SitePatternList.RemoveItem (iIndex)
                        Exit For
                    End If
        Next
        

        'SitePatternList.SetFocus
        'ThisWorkbook.Worksheets("Base Station Transport Data").Activate
        'ThisWorkbook.Worksheets("Base Station Transport Data").range("A3").Select
        Load Me
        MsgBox getResByKey("is deleted"), vbInformation, getResByKey("Information")
    End If
End Sub

'|fffd||fffd|AddSite|fffd||fffd||fffd||fffd||165||fffd||bc||fffd|,|fffd||fffd||fffd||fffd||123||fffd||fffd|
Private Sub AddSite()
    Dim templatename As String
    Dim rowscount As Long
    Dim templateStr As String
    Dim iIndex As Long
    Dim existflg As Long
    Dim lastLineofGroup As Long
    Dim neType As String
    
    neType = getNeType()

    '|fffd||fb||fffd||fffd||fffd||fffd||fffd||5b5|
    templatename = Trim(SitePattern.text)
    
    '|fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    rowscount = MappingSiteTemplate.Range("a65536").End(xlUp).row
    
    '|fffd||638||fffd||fffd||fffd||fffd||fffd|flag
    existflg = 0
      
    '|fffd||fffd|Site Pattern|fffd||fffd||3aa||fffd||fffd||2b1||fffd||fffd||fffd||fffd|
    If templatename = "" Then
        MsgBox templatename & getResByKey("sitePatternIsEmpty"), vbExclamation, getResByKey("Warning")
        existflg = 1
        Exit Sub
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||12c||fffd||3fa||fffd||461||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||638||fffd||fffd||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd|
    For m_rowNum = 2 To rowscount
        If MappingSiteTemplate.Cells(m_rowNum, 4) = templatename _
                And MappingSiteTemplate.Cells(m_rowNum, 1) = SiteType.value _
                And MappingSiteTemplate.Cells(m_rowNum, 5) = neType Then
            MsgBox templatename & getResByKey("AlreadyExists"), vbExclamation, getResByKey("Warning")
            SitePattern.SetFocus
            existflg = 1
            Exit Sub
        End If
    Next
        
    '|fffd||fffd||fffd||4b5||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd|
    'lastLineofGroup = rowscount
    'For n_RowNum = 2 To rowscount
    '    If (MappingSiteTemplate.Cells(n_RowNum, 1) = SiteType.value And MappingSiteTemplate.Cells(n_RowNum, 5) = neType) _
    '        Or MappingSiteTemplate.Cells(n_RowNum, 1) = "" Then
    '        lastLineofGroup = n_RowNum
    '     End If
    'Next
    'lastLineofGroup = lastLineofGroup + 1
    lastLineofGroup = rowscount + 1
    Worksheets("MappingSiteTemplate").rows(CStr(lastLineofGroup) & ":" & CStr(lastLineofGroup)).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    
    '|fffd||fffd||fffd||638||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd||5b5||5f7||fffd||4f5||fffd||fffd||fffd||461||5b5||fffd||431||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b6||fffd||fffd||fffd||fffd||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||135||fffd||4bb||fffd||fffd||fffd||fffd||bc|
    If existflg = 0 Then
        MappingSiteTemplate.Cells(lastLineofGroup, 1).value = SiteType.value
        MappingSiteTemplate.Cells(lastLineofGroup, 2).value = ""
        MappingSiteTemplate.Cells(lastLineofGroup, 3).value = ""
        MappingSiteTemplate.Cells(lastLineofGroup, 4).value = templatename
        MappingSiteTemplate.Cells(lastLineofGroup, 5).value = neType
        'Worksheets("Base Station Transport Data").Activate
        'Worksheets("Base Station Transport Data").range("A3").Select
        
        SitePattern.value = ""
        SitePattern.SetFocus
        Load Me
        MsgBox getResByKey("is added"), vbInformation, getResByKey("Information")
    End If
End Sub

'|fffd||fffd|Site Type|fffd||fffd||461||fffd||fffd||fffd||bc||fffd|
Private Sub SiteType_Change()
    Set_Template_Related
End Sub


'|fffd||4e1||fffd|MappingSiteTemplate|fffd||fffd||4b3||fffd||fffd||221||fffd||fffd|*Site Type|fffd||fffd||fffd||43a||fffd||461||5b5|
Private Sub SetSiteType()
    Dim m_rowNum As Long
    Dim neType As String
    neType = getNeType()
    Me.SiteType.Clear
    For m_rowNum = 2 To ProductType.Range("a65536").End(xlUp).row
            If neType = ProductType.Cells(m_rowNum, 2).value Then
                Me.SiteType.AddItem (ProductType.Cells(m_rowNum, 1).value)
            End If
    Next
    If Me.SiteType.ListCount Then
         Me.SiteType.ListIndex = 0
    End If
End Sub


'|fffd||4e1||fffd|MappingSiteTemplate|fffd||fffd||4b3||fffd||fffd||221||fffd||fffd|*Site Patten|fffd||fffd||fffd||43a||fffd||461||5b5|
Private Sub Set_Template_Related()
    Dim m_rowNum As Long
    Dim neType As String
    neType = getNeType()
    '|fffd||fffd||fffd||fffd||fffd|Cabinet Type|fffd||fffd||fffd||275||13a||fffd||461||5b5|
    SitePatternList.Clear
    For m_rowNum = 2 To MappingSiteTemplate.Range("a65536").End(xlUp).row
        If SiteType.text = MappingSiteTemplate.Cells(m_rowNum, 1).value _
        And neType = MappingSiteTemplate.Cells(m_rowNum, 5).value Then
            SitePatternList.AddItem (MappingSiteTemplate.Cells(m_rowNum, 4).value)
        End If
    Next
End Sub


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'|fffd||fffd||fffd||4fa||fffd||27e||fffd||fffd||fffd||fffd|MappingCellTemplate|fffd||fffd||4b3||fffd||fffd||123||fffd||fffd|                             '
'|fffd||fffd|*Band Width|fffd||fffd||fffd||fffd|FddTddIdd|fffd||fffd||fffd||fffd|FDD/TDD Mode|fffd||fffd||fffd||fffd|*Cell Mode|fffd||fffd||fffd||43a||fffd||461||5b5||fffd||134||fffd||fffd||fffd|    '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Private Sub AddCellTemplate_Click()
    Me.CellPatternText.Visible = True
    Me.CellPattern.Visible = False
    Me.AddCellButton.Caption = getResByKey("Add")
End Sub
Private Sub DeleteCellTemplate_Click()
    Me.CellPattern.Visible = True
    Me.CellPatternText.Visible = False
    Me.AddCellButton.Caption = getResByKey("Delete")
    SetCellPattern
End Sub
'|fffd||1f7b||fffd||fffd||fffd||fffd|Add/Delete|fffd||fffd||fffd||fffd|
Private Sub AddCellButton_Click()
    If Me.AddCellTemplate.value = True Then
        AddCell
    Else
        DeleteCell
    End If
    Call refreshCell
End Sub
'|221||fffd||fffd||fffd||2f4||3b2||fffd||fffd||fffd|
Private Sub CancelCellButton_Click()
    Unload Me
End Sub

'|fffd||fffd|Delete|fffd||fffd||fffd||fffd||165||fffd||bc||fffd|,|27e||fffd||fffd||123||fffd||fffd|
Private Sub DeleteCell()
    Dim templatename As String
    Dim CellType, neType As String
    Dim rowscount As Long
    Dim templateStr As String
    Dim iIndex As Long
    Dim existflg As Long
    
    neType = getNeType()
    '|fffd||fb||fffd||fffd||fffd||fffd||fffd||5b5|
    templatename = Trim(CellPattern.text)
    CellType = Me.CellType.value
    '|fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    rowscount = MappingCellTemplate.Range("a65536").End(xlUp).row
    
    '|fffd||fffd||fffd||fffd|flag
    existflg = 0
      
    '|fffd||fffd|Cell Pattern|fffd||fffd||3aa||fffd||fffd||2b1||fffd||fffd||fffd||fffd|
    If templatename = "" Then
        MsgBox templatename & getResByKey("cellPatternIsEmpty"), vbExclamation, getResByKey("Warning")
        existflg = 2
        Exit Sub
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||12c||fffd||3fa||fffd||461||5b5||fffd||fffd||fffd||4b5||fffd||fffd||fffd||4e6||fffd||fffd||2b1||27e||fffd||fffd||fffd||fffd|
    For m_rowNum = 2 To rowscount
        If MappingCellTemplate.Cells(m_rowNum, 1) = templatename _
        And MappingCellTemplate.Cells(m_rowNum, 2) = CellType _
        And MappingCellTemplate.Cells(m_rowNum, 3) = neType Then
            MappingCellTemplate.rows(m_rowNum).Delete
            SetCellPattern
            existflg = 1
        End If
    Next
    
    If existflg = 0 Then
        MsgBox templatename & getResByKey("NotExist"), vbExclamation, getResByKey("Warning")
    End If
    
    If existflg = 1 Then
        'CellPattern.text = ""
        For iIndex = 0 To CellPattern.ListCount - 1
                    If (CellPattern.List(iIndex, 0) = templatename) Then
                        CellPattern.RemoveItem (iIndex)
                        Exit For
                    End If
        Next
        'ThisWorkbook.Worksheets("Base Station Transport Data").Activate
        'ThisWorkbook.Worksheets("Base Station Transport Data").range("A3").Select
        Load Me
        MsgBox getResByKey("is deleted"), vbInformation, getResByKey("Information")
    End If
End Sub

'|fffd||fffd|Add|fffd||fffd||fffd||fffd||165||fffd||bc||fffd|,|fffd||fffd||fffd||fffd||123||fffd||fffd|
Private Sub AddCell()
    Dim templatename As String
    Dim CellType, neType As String
    
    Dim rowscount As Long
    Dim templateStr As String
    Dim iIndex As Long
    Dim existflg As Long
    Dim lastLineofGroup As Long
    Dim flag4, flag3, flag2, flag1 As Boolean
    
    flag4 = False
    flag3 = False
    flag2 = False
    falg1 = False
    
    neType = getNeType()
    
    '|fffd||fb||fffd||fffd||fffd||fffd||fffd||5b5|
    templatename = Trim(CellPatternText.text)
    
    CellType = Me.CellType.value
    '|fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    rowscount = MappingCellTemplate.Range("a65536").End(xlUp).row
    
    '|fffd||638||fffd||fffd||fffd||fffd||fffd|flag
    existflg = 0
      
    '|fffd||fffd|Cell Pattern|fffd||fffd||3aa||fffd||fffd||2b1||fffd||fffd||fffd||fffd|
    If templatename = "" Then
        MsgBox templatename & getResByKey("cellPatternIsEmpty"), vbExclamation, getResByKey("Warning")
        existflg = 1
        Exit Sub
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||12c||fffd||3fa||fffd||461||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||638||fffd||fffd||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd|
    For m_rowNum = rowscount To 2 Step -1
        If MappingCellTemplate.Cells(m_rowNum, 1) = templatename _
        And MappingCellTemplate.Cells(m_rowNum, 2) = CellType _
        And MappingCellTemplate.Cells(m_rowNum, 3) = neType Then
            MsgBox templatename & getResByKey("AlreadyExists"), vbExclamation, getResByKey("Warning")
            CellPatternText.SetFocus
            existflg = 1
            Exit Sub
        End If
    Next
    
    'lastLineofGroup = rowscount
    'For n_RowNum = 2 To rowscount
    '    If (MappingCellTemplate.Cells(n_RowNum, 3) = neType And MappingCellTemplate.Cells(n_RowNum, 2) = CellType) _
    '        Or MappingCellTemplate.Cells(n_RowNum, 1) = "" Then
     '       lastLineofGroup = n_RowNum
    '    End If
    'Next
    
    '|fffd||fffd||fffd||4b5||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd|
    'lastLineofGroup = lastLineofGroup + 1
    lastLineofGroup = rowscount + 1
    Worksheets("MappingCellTemplate").rows(CStr(lastLineofGroup) & ":" & CStr(lastLineofGroup)).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
        
    '|fffd||fffd||fffd||638||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd||5b5||5f7||fffd||4f5||fffd||fffd||fffd||461||5b5||fffd||431||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b6||fffd||fffd||fffd||fffd||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||135||fffd||4bb||fffd||fffd||fffd||fffd||bc|
    If existflg = 0 Then
        MappingCellTemplate.Cells(lastLineofGroup, 1).value = templatename
        MappingCellTemplate.Cells(lastLineofGroup, 2).value = CellType
        MappingCellTemplate.Cells(lastLineofGroup, 3).value = neType
        Me.CellPatternText.value = ""
        Me.CellPatternText.SetFocus
        'ThisWorkbook.Worksheets("Base Station Transport Data").Activate
        'ThisWorkbook.Worksheets("Base Station Transport Data").range("A3").Select
        Load Me
        MsgBox getResByKey("is added"), vbInformation, getResByKey("Information")
    End If
End Sub

Private Sub setCellTypePattern()
        Dim neType As String
        neType = getNeType()
        CellType.Clear
        If neType = "MRAT" Then
            With CellType
                        If isContainBaseStation() Then
                            .AddItem getResByKey("GSM Local Cell")
                            .AddItem getResByKey("UMTS Local Cell")
                            .AddItem getResByKey("LTE Cell")
                        End If
                        If isContainGsmControl() Then
                            .AddItem getResByKey("GSM Logic Cell")
                        End If
                        If isContainUmtsControl() Then
                            .AddItem getResByKey("UMTS Logic Cell")
                        End If
            End With
        ElseIf neType = "UMTS" Then
            With CellType
                        If isContainBaseStation() Then
                            .AddItem getResByKey("UMTS Local Cell")
                         End If
                         If isContainUmtsControl() Then
                            .AddItem getResByKey("UMTS Logic Cell")
                         End If
            End With
        ElseIf neType = "GSM" Then
            With CellType
                         If isContainBaseStation() Then
                            .AddItem getResByKey("GSM Local Cell")
                        End If
                        If isContainGsmControl() Then
                            .AddItem getResByKey("GSM Logic Cell")
                        End If
            End With
        ElseIf neType = "LTE" Then
            With CellType
                        .AddItem getResByKey("LTE Cell")
            End With
        End If
        If Me.CellType.ListCount Then
            CellType.ListIndex = 0
        End If
End Sub

Private Sub CellType_Change()
        SetCellPattern
End Sub

'|fffd||4e1||fffd|MappingCellTemplate|fffd||fffd||4b3||fffd||fffd||221||fffd||fffd|*Cell Pattern|fffd||fffd||fffd||43a||fffd||461||5b5|
Private Sub SetCellPattern()
    Dim m_rowNum As Long
    Dim m_Str As String
    Dim flag As Boolean
    Dim CellType, neType As String
    
    neType = getNeType()
    CellType = Me.CellType.value
    
    flag = True
    
    '|fffd||fffd||fffd||fffd||fffd|Cell Pattern|fffd||fffd||fffd||275||13a||fffd||461||5b5|
    Me.CellPattern.Clear
    
    For m_rowNum = 2 To MappingCellTemplate.Range("a65536").End(xlUp).row
            If CellType = MappingCellTemplate.Cells(m_rowNum, 2).value _
            And neType = MappingCellTemplate.Cells(m_rowNum, 3).value Then
                Me.CellPattern.AddItem (MappingCellTemplate.Cells(m_rowNum, 1).value)
                 If flag = True Then
                     CellPattern.value = MappingCellTemplate.Cells(m_rowNum, 1).value
                     flag = False
                 End If
            End If
    Next
End Sub


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'|fffd||fffd||fffd||4fa||fffd||27e||fffd||fffd||fffd||fffd|MappingRadioTemplate|fffd||fffd||4b3||fffd||fffd||123||fffd||fffd|                             '
'|fffd||fffd|FTMode|fffd||fffd||fffd||fffd|RSA|fffd||fffd||fffd||fffd|Radio Pattern|fffd||fffd||fffd||43a||fffd||461||5b5||fffd||134||fffd||fffd||fffd|    '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub AddRadioTemplate_Click()
    Me.RadioPatternText.Visible = True
    Me.RadioPattern.Visible = False
    Me.AddRadioButton.Caption = getResByKey("Add")
End Sub
Private Sub DeleteRadioTemplate_Click()
    Me.RadioPattern.Visible = True
    Me.RadioPatternText.Visible = False
    Me.AddRadioButton.Caption = getResByKey("Delete")
    SetRadioPattern
End Sub
'|fffd||1f7b||fffd||fffd||fffd||fffd|Add/Delete|fffd||fffd||fffd||fffd|
Private Sub AddRadioButton_Click()
    If Me.AddRadioTemplate.value = True Then
        AddRadio
    Else
        DeleteRadio
    End If
    Call refreshCell
End Sub
Private Sub CancelRadioButton_Click()
    Unload Me
End Sub



Private Sub setRadioType()
        Dim neType As String
        neType = getNeType()

        Me.RadioType.Clear
        If neType = "MRAT" Then
            With RadioType
                        RadioType.AddItem getResByKey("GSM Radio Template")
                        RadioType.AddItem getResByKey("UMTS Radio Template")
                        RadioType.AddItem getResByKey("LTE Radio Template")
            End With
        ElseIf neType = "UMTS" Then
            With RadioType
                        RadioType.AddItem getResByKey("UMTS Radio Template")
            End With
        ElseIf neType = "GSM" Then
            With RadioType
                        RadioType.AddItem getResByKey("GSM Radio Template")
            End With
        ElseIf neType = "LTE" Then
            With RadioType
                        RadioType.AddItem getResByKey("LTE Radio Template")
            End With
        End If
        
        If Me.RadioType.ListCount > 0 Then
            Me.RadioType.ListIndex = 0
        End If
        
End Sub

Private Sub RadioType_Change()
        SetRadioPattern
End Sub

Private Sub SetRadioPattern()
    Dim m_rowNum As Long
    Dim m_Str As String
    Dim flag As Boolean
    Dim radioTp, neType As String
    flag = True
    
    neType = getNeType()
    radioTp = Me.RadioType.value
    
    '|fffd||fffd||fffd||fffd||fffd|Radio Pattern|fffd||fffd||fffd||275||13a||fffd||461||5b5|
    Me.RadioPattern.Clear
    For m_rowNum = 2 To MappingRadioTemplate.Range("a65536").End(xlUp).row
            If MappingRadioTemplate.Cells(m_rowNum, 2).value = radioTp _
                And MappingRadioTemplate.Cells(m_rowNum, 3).value = neType Then
                    Me.RadioPattern.AddItem (MappingRadioTemplate.Cells(m_rowNum, 1).value)
                    If flag = True Then
                        RadioPattern.value = MappingRadioTemplate.Cells(m_rowNum, 1).value
                        flag = False
                    End If
            End If
    Next
    
End Sub



'|fffd||fffd|Delete|fffd||fffd||fffd||fffd||165||fffd||bc||fffd|,|27e||fffd||fffd||123||fffd||fffd|
Private Sub DeleteRadio()
    Dim templatename As String
    Dim rowscount As Long
    Dim templateStr As String
    Dim iIndex As Long
    Dim existflg As Long
    Dim radioTp, neType As String
    
    neType = getNeType()
    
    '|fffd||fb||fffd||fffd||fffd||fffd||fffd||5b5|
    templatename = Trim(RadioPattern.text)
    radioTp = RadioType.value
    '|fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    rowscount = MappingRadioTemplate.Range("a65536").End(xlUp).row
    
    '|fffd||fffd||fffd||fffd|flag
    existflg = 0
      
    '|fffd||fffd|Radio Pattern|fffd||fffd||3aa||fffd||fffd||2b1||fffd||fffd||fffd||fffd|
    If templatename = "" Then
        MsgBox templatename & getResByKey("radioPatternIsEmpty"), vbExclamation, getResByKey("Warning")
        existflg = 2
        Exit Sub
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||12c||fffd||3fa||fffd||461||5b5||fffd||fffd||fffd||4b5||fffd||27e||fffd||fffd||fffd||e8ec||fffd||fffd||fffd||fffd||27e||fffd||fffd||fffd||fffd|
    For m_rowNum = 2 To rowscount
        If MappingRadioTemplate.Cells(m_rowNum, 1) = templatename _
        And MappingRadioTemplate.Cells(m_rowNum, 2) = radioTp _
        And MappingRadioTemplate.Cells(m_rowNum, 3) = neType Then
            MappingRadioTemplate.rows(m_rowNum).Delete
            existflg = 1
        End If
    Next
    
    If existflg = 0 Then
        MsgBox templatename & getResByKey("NotExist"), vbExclamation, getResByKey("Warning")
    End If
    
    '|27e||fffd||fffd||fffd||279||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b6||fffd||fffd||fffd||fffd||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||135||fffd||4bb||fffd||fffd||fffd||fffd||bc|
    If existflg = 1 Then
        'ThisWorkbook.Worksheets("Base Station Transport Data").Activate
        'ThisWorkbook.Worksheets("Base Station Transport Data").range("A3").Select
        
        RadioPattern.text = ""
        For iIndex = 0 To RadioPattern.ListCount - 1
                    If (RadioPattern.List(iIndex, 0) = templatename) Then
                        RadioPattern.RemoveItem (iIndex)
                        Exit For
                    End If
        Next
        RadioPattern.SetFocus
        Load Me
        MsgBox getResByKey("is deleted"), vbInformation, getResByKey("Information")
    End If
End Sub

'|fffd||fffd|Add|fffd||fffd||fffd||fffd||165||fffd||bc||fffd|,|fffd||fffd||fffd||fffd||123||fffd||fffd|
Private Sub AddRadio()
    Dim templatename As String
    Dim rowscount As Long
    Dim templateStr As String
    Dim iIndex As Long
    Dim existflg As Long
    Dim lastLineofGroup As Long
    Dim flag As Boolean
    Dim radioTp, neType As String
    radioTp = RadioType.value
    flag = False
    
    neType = getNeType()
    '|fffd||fb||fffd||fffd||fffd||fffd||fffd||5b5|
    templatename = Trim(RadioPatternText.text)
    
    '|fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    rowscount = MappingRadioTemplate.Range("a65536").End(xlUp).row
    
    '|fffd||638||fffd||fffd||fffd||fffd||fffd|flag
    existflg = 0
      
    '|fffd||fffd|Radio Pattern|fffd||fffd||3aa||fffd||fffd||2b1||fffd||fffd||fffd||fffd|
    If templatename = "" Then
        MsgBox templatename & getResByKey("radioPatternIsEmpty"), vbExclamation, getResByKey("Warning")
        existflg = 1
        Exit Sub
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||12c||fffd||3fa||fffd||461||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||638||fffd||fffd||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd|
    For m_rowNum = 2 To rowscount
        If MappingRadioTemplate.Cells(m_rowNum, 1) = templatename _
           And MappingRadioTemplate.Cells(m_rowNum, 2) = radioTp _
           And MappingRadioTemplate.Cells(m_rowNum, 3) = neType Then
            MsgBox templatename & getResByKey("AlreadyExists"), vbExclamation, getResByKey("Warning")
            RadioPatternText.SetFocus
            existflg = 1
            Exit Sub
        End If
    Next

    'lastLineofGroup = rowscount
    'For n_RowNum = 2 To rowscount
    '    If (MappingRadioTemplate.Cells(n_RowNum, 3) = neType And MappingRadioTemplate.Cells(n_RowNum, 2) = radioTp) _
    '    Or MappingRadioTemplate.Cells(n_RowNum, 1) = "" Then
    '        lastLineofGroup = n_RowNum
    '    End If
    ' Next
    
    '|fffd||fffd||fffd||4b5||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd|
   ' lastLineofGroup = lastLineofGroup + 1
   lastLineofGroup = rowscount + 1
    Worksheets("MappingRadioTemplate").rows(CStr(lastLineofGroup) & ":" & CStr(lastLineofGroup)).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    
    '|fffd||fffd||fffd||638||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd||5b5||5f7||fffd||4f5||fffd||fffd||fffd||461||5b5||fffd||431||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b6||fffd||fffd||fffd||fffd||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||135||fffd||4bb||fffd||fffd||fffd||fffd||bc|
    If existflg = 0 Then
        MappingRadioTemplate.Cells(lastLineofGroup, 1).value = templatename
        MappingRadioTemplate.Cells(lastLineofGroup, 2).value = radioTp
        MappingRadioTemplate.Cells(lastLineofGroup, 3).value = neType
        RadioPatternText.value = ""
        'ThisWorkbook.Worksheets("Base Station Transport Data").Activate
        'ThisWorkbook.Worksheets("Base Station Transport Data").range("A3").Select
        Load Me
        MsgBox getResByKey("is added"), vbInformation, getResByKey("Information")
    End If
End Sub



Private Sub refreshCell()
    Dim rangeHis As Range
    Dim row, columen As Long
    Set rangeHis = Selection
    ActiveSheet.Cells(Selection.row + 1, Selection.column).Select
    rangeHis.Select
End Sub










Attribute VB_Name = "OperateBoardStyleData"
Option Explicit

Public boardStyleData As CBoardStyleData
Public inAddProcessFlag As Boolean
Public currentSheet As Worksheet
Public currentCellValue As String
Public addBoardStyleMoiInProcess As CAddingBoardStyleMoc
Public moiRowsManager As CMoiRowsManager
Public boardNoManager As CBoardNoManager
Public boardStyleMappingDefMap As CMapValueObject
Public selectedGroupMappingDefData As CBoardStyleMappingDefData

Public addBoardStyleButtons As CAddBoardStyleButtons
Public deleteBoardStyleButtons As CDeleteBoardStyleButtons
Public Const NewMoiRangeColorIndex As Long = 43 '|1f3||fffd||323||fffd||fffd||fffd||fffd||fffd|Moi|fffd||435||fffd||26b|
Public Const NeedFillInRangeColorIndex As Long = 33 '|1f3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||ed65||52a||fffd||fffd||fffd||26b|
Public Const NormalRangeColorIndex As Long = -4142 '|fffd||fffd||26b||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||52a||fffd||fffd||fffd||26b|
Public Const BoardNoDelimiter As String = "_"

Public Const PublicMaxRowNumber As Long = 2000

Public Sub addBoardStyleMoiFinishButton()
    On Error GoTo ErrorHandler
    If checkNeedFillInCellsFilled = False Then Exit Sub

    Call makeAutoFillInColumnNameValue
    Call selectCertainCell(currentSheet, "A" & moiRowsManager.groupNameRowNumber)
    Call setNewRangesBackgroundColour(NormalRangeColorIndex)
    Unload BoardStyleForm
    Exit Sub
ErrorHandler:
End Sub

Public Sub setNewRangesBackgroundColour(ByRef colorIndex As Long)
    Dim newMoiRange As Range, eachCell As Range
    Set newMoiRange = moiRowsManager.getMoiRange
    For Each eachCell In newMoiRange
        '|fffd||fffd||fffd||fffd||fffd||52a||fffd||fffd||fffd||1fb||4bb||fffd||fffd||123||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd||fffd||fffd||fffd||fffd||26b||fffd||fffd||fffd||1f7||fffd||5a7||fffd||fffd||fffd||1b5||13b||4bb||fffd||fffd||fffd||fffd||b2ef1||fffd|
        If eachCell.Interior.colorIndex <> SolidColorIdx And eachCell.Interior.Pattern <> SolidPattern Then eachCell.Interior.colorIndex = colorIndex
    Next eachCell
End Sub

Public Sub addBoardStyleMoiCancelButton()
    On Error GoTo ErrorHandler
    Dim deletedRowsRange As Range
    Set deletedRowsRange = moiRowsManager.getMoiRowsRange
    deletedRowsRange.Delete
    Call selectCertainCell(currentSheet, "A" & moiRowsManager.groupNameRowNumber)
    Unload BoardStyleForm
    Exit Sub
ErrorHandler:
End Sub

Public Function isBoardStyleSheet(ByRef ws As Worksheet) As Boolean
    Dim sheetName As String, boardStyleSheetName As String
    isBoardStyleSheet = False
    boardStyleSheetName = getResByKey("Board Style")
    If InStr(ws.name, boardStyleSheetName) <> 0 Then
        isBoardStyleSheet = True
    End If
End Function

Public Function containsASheet(ByRef wb As Workbook, ByRef sheetName As String) As Boolean
    On Error GoTo ErrorHandler
    containsASheet = True
    Dim sheet As Worksheet
    Set sheet = wb.Worksheets(sheetName)
    Exit Function
ErrorHandler:
    containsASheet = False
End Function

Public Function findCertainValColumnNumber(ByRef ws As Worksheet, ByVal RowNumber As Long, ByRef cellVal As Variant, Optional ByVal startColumn As Long = 1)
    Dim currentCellVal As Variant
    Dim maxColumnNumber As Long, k As Long
    maxColumnNumber = ws.UsedRange.Columns.count
    findCertainValColumnNumber = -1
    For k = startColumn To maxColumnNumber
        currentCellVal = ws.Cells(RowNumber, k).value
        If currentCellVal = cellVal Then
            findCertainValColumnNumber = k
            Exit For
        End If
    Next
End Function
Public Function findCertainValRowNumber(ByRef ws As Worksheet, ByVal columnLetter As String, ByRef cellVal As Variant, Optional ByVal startRow As Long = 1)
    Dim currentCellVal As Variant
    Dim maxRowNumber As Long, k As Long
    maxRowNumber = ws.UsedRange.rows.count
    findCertainValRowNumber = -1
    For k = startRow To maxRowNumber
        currentCellVal = ws.Range(columnLetter & k).value
        If currentCellVal = cellVal Then
            findCertainValRowNumber = k
            Exit For
        End If
    Next
End Function

Public Function containsAToolBar(ByRef barName As String) As Boolean
    On Error GoTo ErrorHandler
    containsAToolBar = True
    Dim bar As CommandBar
    Set bar = CommandBars(barName)
    Exit Function
ErrorHandler:
    containsAToolBar = False
End Function

Public Sub eraseLastChar(ByRef str As String)
    If str <> "" Then str = Left(str, Len(str) - 1)
End Sub

Public Sub selectCertainCell(ByVal ws As Worksheet, ByVal rangeName As String, Optional ByVal scrollFlag As Boolean = True)
    Application.GoTo Reference:=ws.Range(rangeName), Scroll:=scrollFlag
End Sub

Public Sub resetAddBoardStyleMoiInfo(ByRef ws As Worksheet)
    'inAddProcessFlag = False
    Set currentSheet = ws
End Sub

Private Function checkNeedFillInCellsFilled() As Boolean
    checkNeedFillInCellsFilled = True
        
    Dim emptyCell As Range
    Dim emptyCellAddress As String
    Dim emptyCellAddressString As String
    If moiRowsManager.checkNeedFillInCells(emptyCell, emptyCellAddressString) = False Then
        emptyCellAddress = emptyCell.address(False, False)
        Call MsgBox(getResByKey("EmptyCellFound") & vbCrLf & emptyCellAddressString, vbExclamation)
        Call selectCertainCell(currentSheet, emptyCellAddress, False)
        checkNeedFillInCellsFilled = False
    End If
End Function

Private Sub makeAutoFillInColumnNameValue()
    Dim boardNoName As String
    boardNoName = selectedGroupMappingDefData.autoFillInColumnName
    If boardNoName = "" Then Exit Sub
    
    Dim startRowNumber As Long, endRowNumber As Long
    startRowNumber = moiRowsManager.startRowNumber
    endRowNumber = moiRowsManager.endRowNumber
    
    Call clearBoardNoRanges(startRowNumber, endRowNumber)
    Call initBoardNoManagerPublic
        
    Dim boardNoSourceAttributes As String
    Dim boardNoColumnLetter As String
    boardNoSourceAttributes = selectedGroupMappingDefData.autoFillInColumnNameSourceAttributes
    Dim boardNoSourceAttributeColumnLetterArr As Variant
    boardNoSourceAttributeColumnLetterArr = getBoardNoSourceColumnLetterAttr(boardNoSourceAttributes)
    boardNoColumnLetter = selectedGroupMappingDefData.getColumnNamePositionLetter(boardNoName)

    Call fillInBoardNoRanges(boardNoColumnLetter, startRowNumber, endRowNumber, boardNoSourceAttributeColumnLetterArr)
End Sub

Public Sub fillInBoardNoRanges(ByRef boardNoColumnLetter As String, ByRef startRowNumber As Long, ByRef endRowNumber As Long, ByRef sourceAttributeColumnLetterArr As Variant)
    Dim tempBoardNo As String
    Dim RowNumber As Long
    For RowNumber = startRowNumber To endRowNumber
        tempBoardNo = getTempBoardNo(RowNumber, sourceAttributeColumnLetterArr) '|fffd||f5||fffd|0_0_1_|fffd||fffd||fffd||fffd||fffd||131||fffd||fffd||1f0||5fa|
        Call boardNoManager.getNewBoardNo(tempBoardNo) '|fffd||f5||fffd||fffd||fffd||fffd||fffd||4aa||fffd||fffd||fffd||275||135||fffd||fffd||fffd||fffd||fffd|tempBoardNo
        tempBoardNo = tempBoardNo & "(n)"
        Call boardNoManager.addNewBoardNo(selectedGroupMappingDefData.groupName, tempBoardNo)
        currentSheet.Range(boardNoColumnLetter & RowNumber).value = tempBoardNo
    Next RowNumber

End Sub

Public Function getTempBoardNo(ByRef RowNumber As Long, ByRef sourceAttributeColumnLetterArr As Variant)
    Dim tempBoardNo As String
    tempBoardNo = ""
    Dim index As Long
    Dim attributeValue As String
    For index = LBound(sourceAttributeColumnLetterArr) To UBound(sourceAttributeColumnLetterArr)
        attributeValue = currentSheet.Range(sourceAttributeColumnLetterArr(index) & RowNumber).value
        tempBoardNo = tempBoardNo & attributeValue & BoardNoDelimiter
    Next index
    getTempBoardNo = tempBoardNo
End Function

Public Function getBoardNoSourceColumnLetterAttr(ByRef sourceAttr As String) As Variant
    Dim columnLetterArr As Variant
    Dim colunmLetter As String, columnName As String
    columnLetterArr = Split(sourceAttr, ",")
    
    Dim index As Long
    For index = LBound(columnLetterArr) To UBound(columnLetterArr)
        columnName = columnLetterArr(index)
        colunmLetter = selectedGroupMappingDefData.getColumnNamePositionLetter(columnName)
        columnLetterArr(index) = colunmLetter
    Next index
    getBoardNoSourceColumnLetterAttr = columnLetterArr
End Function

Public Sub popUpSheetCannotChangeMsgbox()
    Call MsgBox(getResByKey("CannotChangeSheet"), vbExclamation)
    '"|fffd||fffd||fffd||6bd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|BoardStyle MOC|fffd||132||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||43b||fffd||4b3||1e9||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4f2||fffd||fffd||fffd||fffd||fffd||fffd||2f3||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    currentSheet.Select
End Sub

Public Sub popUpWbCannotSaveMsgbox()
    Call MsgBox(getResByKey("CannotSaveWb"), vbExclamation)
End Sub

Public Sub boardStyleSelectionChange(ByRef ws As Worksheet, ByRef Target As Range)
    On Error GoTo ErrorHandler
    Dim groupName As String, columnName As String
    Dim RowNumber As Long, columnNumber As Long
    If Target.rows.count <> 1 Or Target.Columns.count <> 1 Then Exit Sub
    
    RowNumber = Target.row
    columnNumber = Target.column
    
    Dim targetInRecordsRangeFlag As Boolean, targetIsInListBoxFlag As Boolean, targetInBoardNoFlag As Boolean
    targetInRecordsRangeFlag = getRangeGroupAndColumnName(ws, RowNumber, columnNumber, groupName, columnName)
        
    Dim referencedString As String
    Dim currentBoardStyleMappingDefData As CBoardStyleMappingDefData
    targetIsInListBoxFlag = getReferecedString(groupName, columnName, referencedString, currentBoardStyleMappingDefData) '|fffd||436||fffd||461||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1f7||fffd||fffd||fffd||4aa||fffd||fffd||fffd||fffd||fffd||536||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    targetInBoardNoFlag = judgeWhetherInBoardNoColumn(columnName, currentBoardStyleMappingDefData) '|fffd||436||fffd||461||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1f7||fffd||fffd||fffd|BoardNo
    
    If targetIsInListBoxFlag = False And targetInBoardNoFlag = False Then
        Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4aa||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||431||fffd||fffd||132||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b1||fffd||fffd||fffd||2f3||fffd|
    End If
    If targetInRecordsRangeFlag = False Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||777||fffd||3a7||fffd||6a3||fffd||fffd||fffd||fffd||23d||fffd||fffd||fffd||427||fffd||fffd||fffd||fffd||563||fffd||fffd||fffd||fffd||2f3||fffd|
        'target.Validation.Delete
        Exit Sub
    End If
    
    If targetIsInListBoxFlag = True Then
        Call setBoardStyleListBoxRangeValidation(ws.name, groupName, columnName, referencedString, ws, Target)
    ElseIf targetInBoardNoFlag = True Then
        Call setBoardNoRangeValidation(Target)
    End If
    Exit Sub
ErrorHandler:
End Sub

Private Function judgeWhetherInBoardNoColumn(ByRef columnName As String, ByRef currentBoardStyleMappingDefData As CBoardStyleMappingDefData)
    If columnName = currentBoardStyleMappingDefData.autoFillInColumnName And columnName <> "" Then
        judgeWhetherInBoardNoColumn = True
    Else
        judgeWhetherInBoardNoColumn = False
    End If
End Function

Private Sub setBoardNoRangeValidation(ByRef Target As Range)
    'target.Offset(0, 1).Select
    With Target.Validation
        .Delete
        .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertInformation '|5bb||fffd||fffd||fffd||fffd||2be||fffd||fffd||3e2||fffd||fffd||427||fffd||fffd||fffd||fffd||fffd||fffd|
        .inputTitle = getResByKey("ForbiddenEditTitle") '|fffd||fffd||fffd||fffd||fffd||fffd||2be|Title
        .inputMessage = getResByKey("ForbiddenEditContent") '|fffd||fffd||fffd||fffd||fffd||fffd||2be||fffd||fffd||fffd||fffd|
        .ShowInput = True 'True|fffd||fffd||2be||fffd||fffd||fffd||fffd||fffd||fffd||2be||fffd||fffd||3e2||fffd||fffd|False|fffd||fffd||fffd||fffd||2be||fffd||fffd||fffd||fffd||fffd||fffd||2be||fffd||fffd||3e2|
        .ShowError = False 'True|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||427||fffd||fffd||5b5||fffd||fffd|False|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End With
End Sub

Public Sub setBoardStyleListBoxRangeValidation(ByRef sheetName As String, ByRef groupName As String, ByRef columnName As String, _
    ByRef referencedString As String, ByRef sheet As Worksheet, ByRef Target As Range)
    If Len(referencedString) > 255 Then
        Dim valideDef As CValideDef
        'Call getGroupAndColumnName(sheet, cellRange, groupName, columnName)
        Set valideDef = initDefaultDataSub.getInnerValideDef(sheetName + "," + groupName + "," + columnName)
        If valideDef Is Nothing Then
            Set valideDef = addInnerValideDef(sheetName, groupName, columnName, referencedString)
        Else
            Call modiflyInnerValideDef(sheet.name, groupName, columnName, referencedString, valideDef)
        End If
        referencedString = valideDef.getValidedef
    End If
    With Target.Validation
        .Delete
        If referencedString <> "" Then
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=referencedString
            .ShowError = False
        Else
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=" "
            .ShowError = False
        End If
    End With
End Sub

Public Function getReferecedString(ByRef groupName As String, ByRef columnName As String, ByRef referencedString As String, _
    ByRef currentBoardStyleMappingDefData As CBoardStyleMappingDefData) As Boolean
    getReferecedString = True
    If boardStyleData Is Nothing Then Call initBoardStyleMappingDataPublic
    Set boardStyleMappingDefMap = boardStyleData.getBoardStyleMappingDefMap
    Set currentBoardStyleMappingDefData = boardStyleMappingDefMap.GetAt(groupName)
    
    referencedString = currentBoardStyleMappingDefData.getListBoxReferenceValue(columnName)
    If referencedString = "" Then
        getReferecedString = False
        Exit Function
    End If
    
    Call initBoardNoManagerPublic
    Dim mocNameBoardNoArr As Variant
    mocNameBoardNoArr = Split(referencedString, "-")
    referencedString = getBoardNoString(CStr(mocNameBoardNoArr(0)))
    'Debug.Print referencedString
    
End Function

Private Function getBoardNoString(ByRef mocNameString As String)
    Dim mocNameArr As Variant
    mocNameArr = Split(mocNameString, ",")
    Dim index As Long
    Dim boardNoString As String, mocboardNoString As String, groupName As String
    boardNoString = ""
    For index = LBound(mocNameArr) To UBound(mocNameArr)
        groupName = boardStyleData.getGroupNameByMocName(CStr(mocNameArr(index)))
        mocboardNoString = boardNoManager.getBoardNoStringByGroupName(groupName)
        If mocboardNoString <> "" Then
            If boardNoString = "" Then
                boardNoString = boardNoString & mocboardNoString
            Else
                boardNoString = boardNoString & "," & mocboardNoString
            End If
        End If
    Next index
    getBoardNoString = boardNoString
End Function

Public Function getGroupRowNumber(ByRef ws As Worksheet, ByVal RowNumber) As Long
    Dim maxRowNumber As Long, k As Long
    
    maxRowNumber = ws.UsedRange.rows.count
    If RowNumber > maxRowNumber Then RowNumber = maxRowNumber
    
    For k = RowNumber To 1 Step -1
        If k = 1 Then Exit For
        If rowIsBlank(ws, k - 1) = True And rowIsBlank(ws, k) = False Then Exit For
    Next k
    getGroupRowNumber = k
End Function

Private Function getNextGroupRowNumber(ByRef ws As Worksheet, ByVal RowNumber) As Long
    Dim nextGroupRowNumber As Long
    nextGroupRowNumber = -1
    Dim maxRowNumber As Long, k As Long
    
    maxRowNumber = ws.UsedRange.rows.count
    
    For k = RowNumber To maxRowNumber
        If rowIsBlank(ws, k) = True And rowIsBlank(ws, k + 1) = False Then
            nextGroupRowNumber = k + 1
            Exit For
        End If
    Next k
    
    '|fffd||fffd||fffd||fffd||fffd|-1|fffd||fffd||2f5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||98ec||5bb||fffd||fffd||fffd||f5||fffd||52a||fffd||fffd||fffd||1f7||fffd||fffd||431||7ff||fffd||fffd||fffd||fffd||436||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If nextGroupRowNumber = -1 Then
        Dim predefinedMaxRowNumber As Long
        predefinedMaxRowNumber = Application.WorksheetFunction.min(RowNumber + 2000, maxRowNumber) '|fffd||fffd||5b9||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||fffd||131||7ff||fffd||4bb||5b1||fffd||fffd||fffd||f5||fffd|65535|fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd|2000|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
        For k = RowNumber To predefinedMaxRowNumber
            If rangeHasBorder(ws.rows(k)) Then
                nextGroupRowNumber = k
            Else
                Exit For
            End If
        Next k
        
        nextGroupRowNumber = nextGroupRowNumber + 2 '|3aa||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||4bb||fffd||a3||fffd||fffd||fffd||fffd||fffd||fffd|2
    End If
    
    getNextGroupRowNumber = nextGroupRowNumber
End Function

Public Function getRangeGroupAndColumnName(ByRef ws As Worksheet, ByVal RowNumber As Long, ByVal columnNumber As Long, _
    ByRef groupName As String, ByRef columnName As String, Optional ByVal deleteBoardStyleFlag As Boolean = False) As Boolean
    
    Dim groupRowNumber As Long
    groupRowNumber = getGroupRowNumber(ws, RowNumber)
    groupName = ws.Range("A" & groupRowNumber).value
    columnName = ws.Cells(groupRowNumber + 1, columnNumber).value
    
    Dim groupMaxRow As Long
    groupMaxRow = getNextGroupRowNumber(ws, RowNumber) - 2
'    If deleteBoardStyleFlag = False Then
'        groupMaxRow = groupRowNumber + getCurrentRegionRowsCount(ws, groupRowNumber)
'    Else
'        groupMaxRow = getNextGroupRowNumber(ws, rowNumber) - 2
'    End If

    'groupMaxRow<0|2f5||fffd||fffd||461||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||fffd||133||fffd||fffd||fffd||fffd||7ff||fffd||fffd||fffd||fffd|
    If (RowNumber > groupRowNumber + 1 And RowNumber <= groupMaxRow) Then
        getRangeGroupAndColumnName = True
        If RowNumber = groupMaxRow And rowIsBlank(ws, RowNumber + 1) = False Then
            getRangeGroupAndColumnName = False
        End If
    Else
        getRangeGroupAndColumnName = False
    End If
End Function

Public Function rowIsBlank(ByRef ws As Worksheet, ByRef RowNumber As Long) As Boolean
    If Application.WorksheetFunction.CountBlank(ws.Range("A" & RowNumber & ":IV" & RowNumber)) = 256 Then
        rowIsBlank = True
    Else
        rowIsBlank = False
    End If
End Function

Public Function rangeHasBorder(ByRef certainRange As Range) As Boolean
    If certainRange.Borders.LineStyle = xlLineStyleNone Then '|fb||fffd||431||7ff||fffd|
        rangeHasBorder = False
    Else '|fffd||431||7ff||fffd|
        rangeHasBorder = True
    End If
End Function

Public Function getGroupNameStartRowNumber(ByRef ws As Worksheet, ByRef groupName As String) As Long
    Dim RowNumber As Long, initialRowNumber As Long
    Dim lastRowEmptyFlag As Boolean
    lastRowEmptyFlag = False
    initialRowNumber = 1
    Do While Not lastRowEmptyFlag
        RowNumber = findCertainValRowNumber(ws, "A", groupName, initialRowNumber)
        If RowNumber = -1 Then Exit Do
        If RowNumber = 1 Then
            lastRowEmptyFlag = True
        ElseIf rowIsBlank(ws, RowNumber - 1) = True Then
            lastRowEmptyFlag = True
        End If
        initialRowNumber = RowNumber + 1
    Loop
    getGroupNameStartRowNumber = RowNumber
End Function

Public Sub getGroupNameStartAndEndRowNumber(ByRef groupName As String, ByRef groupNameStartRowNumber As Long, ByRef groupNameEndRowNumber As Long)
    If currentSheet Is Nothing Then Set currentSheet = ThisWorkbook.ActiveSheet
    groupNameStartRowNumber = getGroupNameStartRowNumber(currentSheet, groupName)
    'groupNameEndRowNumber = findCertainValRowNumber(currentSheet, "A", "", groupNameStartRowNumber)
    'groupNameEndRowNumber = groupNameStartRowNumber + currentSheet.Range("A" & groupNameStartRowNumber).CurrentRegion.rows.count - 1
    groupNameEndRowNumber = groupNameStartRowNumber + getCurrentRegionRowsCount(currentSheet, groupNameStartRowNumber) - 1
    
End Sub

Private Function getCurrentRegionRowsCount(ByRef ws As Worksheet, ByRef startRowNumber As Long) As Long
    Dim RowNumber As Long
    Dim rowscount As Long
    rowscount = 1
    For RowNumber = startRowNumber + 1 To PublicMaxRowNumber
        If rowIsBlank(ws, RowNumber) = True Then
            Exit For
        Else
            rowscount = rowscount + 1
        End If
    Next RowNumber
    getCurrentRegionRowsCount = rowscount
End Function

Public Sub clearBoardNoRanges(ByVal startRowNumber As Long, ByVal endRowNumber As Long)
    Dim autoFillInColumnName As String, columnLetter As String
    Dim boardNoRanges As Range
    autoFillInColumnName = selectedGroupMappingDefData.autoFillInColumnName
    If autoFillInColumnName <> "" Then
        columnLetter = selectedGroupMappingDefData.getColumnNamePositionLetter(autoFillInColumnName)
        Set boardNoRanges = currentSheet.Range(currentSheet.Range(columnLetter & startRowNumber), currentSheet.Range(columnLetter & endRowNumber))
        boardNoRanges.ClearContents
    End If
End Sub

Public Sub initBoardStyleMappingDataPublic()
    If boardStyleData Is Nothing Then Set boardStyleData = New CBoardStyleData
    Call boardStyleData.init
End Sub

Public Sub initAddBoardStyleButtonsPublic()
    If addBoardStyleButtons Is Nothing Then Set addBoardStyleButtons = New CAddBoardStyleButtons
    Call addBoardStyleButtons.init
End Sub

Public Sub initDeleteBoardStyleButtonsPublic()
    If deleteBoardStyleButtons Is Nothing Then Set deleteBoardStyleButtons = New CDeleteBoardStyleButtons
    Call deleteBoardStyleButtons.init
End Sub

Public Sub initBoardNoManagerPublic()
    If boardNoManager Is Nothing Then Set boardNoManager = New CBoardNoManager
    Call boardNoManager.generateCurrentGroupNameBoardNoMap
End Sub

Public Sub addBoardStyleMoi()
    BoardStyleForm.Show
End Sub

'boardstyle|4b3||1e9||27e||fffd||fffd||fffd||430||fffd||165|
Public Sub deleteBoardStyleMoi()
    Dim rowCollection As New Collection
    Dim groupName As String
    
    If checkSelectRanges(rowCollection, groupName) = False Then
        Call MsgBox(getResByKey("ChooseOneMoc"), vbExclamation)
        Exit Sub
    End If
    
    Call deleteRows(rowCollection, groupName)
    
    Call addBoardStyleHyperlinks_SheetActive(currentSheet) '|27e||fffd||fffd||fffd||fffd||5ae||fffd||fffd||fffd||fffd||fffd||f5||fffd||52a||fffd||fffd||fffd||131||48ec||fffd||fffd||3aa||fffd||fffd||4aa||fffd||fffd||fffd||b5||fffd||fffd||fffd||4bb||fffd||3a3||fffd||fffd||fffd||2e2||fffd||b5||fffd||1f0||4b3||fffd||fffd||fffd||fffd||fffd||fffd|
    'Call MsgBox("selected right-" & groupName)
End Sub

Private Sub keepAtLeastOneRow(ByRef rowCollection As Collection, ByRef groupName As String, ByRef ws As Worksheet)
    Dim groupRowNumber As Long, nextGroupRowNumber As Long, dataAreaRowsCount As Long
    Dim groupMaxRow As Long
    groupRowNumber = getGroupNameStartRowNumber(ws, groupName)
    nextGroupRowNumber = getNextGroupRowNumber(ws, groupRowNumber)
    If nextGroupRowNumber = -1 Then '|fffd||fffd||1f0||fffd||fffd|group|fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||fffd|
        groupMaxRow = groupRowNumber + getCurrentRegionRowsCount(ws, groupRowNumber) - 1
        dataAreaRowsCount = groupMaxRow - (groupRowNumber + 2) + 1
    Else
        dataAreaRowsCount = (nextGroupRowNumber - 2) - (groupRowNumber + 2) + 1
    End If
    
    If rowCollection.count < dataAreaRowsCount Then Exit Sub '|fffd||fffd||fffd||27e||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||421||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    Dim newRowNumber As Long
    newRowNumber = rowCollection(rowCollection.count) + 1
    ws.rows(groupRowNumber + 2).Copy
    ws.rows(newRowNumber).Insert Shift:=xlDown
    ws.Range(ws.Cells(newRowNumber, 1), ws.Cells(newRowNumber, ws.UsedRange.Columns.count)).ClearContents
End Sub

Private Sub deleteRows(ByRef rowCollection As Collection, ByRef groupName As String)
    If MsgBox(getResByKey("ConfirmMoiDeletion"), vbQuestion + vbYesNo) = vbNo Then
        Exit Sub
    End If
    
    Call keepAtLeastOneRow(rowCollection, groupName, currentSheet)
    
    Call initBoardNoManagerPublic
    Dim boardNoColumnLetter As String
    Dim outputString As String
    outputString = ""
    
    boardNoColumnLetter = boardNoManager.getBoardNoColumnLetterByGroupName(groupName)
    If boardNoColumnLetter <> "" Then '|fffd||fffd||fffd||fffd||439||fffd||fffd||fffd||fffd||fffd||fffd||f5||fffd|*|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Call deleteRowsWithBoardNoColumn(rowCollection, boardNoColumnLetter, outputString)
        Call MsgBox(outputString, vbInformation)
    Else
        Call deleteRowsWithoutBoardNoColumn(rowCollection)
        Call MsgBox(getResByKey("FinishRowsDeletion"), vbInformation)
    End If
    
    Dim groupNameStartRowNumber As Long
    groupNameStartRowNumber = getGroupNameStartRowNumber(currentSheet, groupName)
    currentSheet.Range("A" & groupNameStartRowNumber).Select
End Sub

Private Sub deleteRowsWithBoardNoColumn(ByRef rowCollection As Collection, ByRef boardNoColumnLetter As String, ByRef outputString As String)
    Dim referenceRangeManager As New CReferenceRangeManager
    Call referenceRangeManager.generateBoardNoReferenceAddressMap

    Dim boardNo As String, boardNoReferenceAddressString As String
    Dim RowNumber As Variant
    For Each RowNumber In rowCollection
        boardNo = currentSheet.Range(boardNoColumnLetter & RowNumber).value
        boardNoReferenceAddressString = referenceRangeManager.getReferenceAddressString(boardNo)
        If boardNoReferenceAddressString <> "" Then
            Call clearReferenceAddress(boardNoReferenceAddressString, rowCollection)
            Call makeBoardNoReferenceAddressOutputString(outputString, boardNo, boardNoReferenceAddressString)
        End If
    Next RowNumber
    
    Call deleteRowsWithoutBoardNoColumn(rowCollection)
    If outputString <> "" Then
        outputString = getResByKey("FinishRowsDeletion") & vbCrLf & vbCrLf & getResByKey("ReferenceAddressCleared") & outputString
    Else
        outputString = getResByKey("FinishRowsDeletion")
    End If
End Sub

Private Sub makeBoardNoReferenceAddressOutputString(ByRef outputString As String, ByRef boardNo As String, ByRef boardNoReferenceAddressString As String)
     outputString = outputString & vbCrLf & boardNo & ": " & boardNoReferenceAddressString
End Sub

Private Sub clearReferenceAddress(ByRef referenceAddressString As String, ByRef rowCollection As Collection)
    Dim referenceAddressArr As Variant, referenceAddress As Variant
    Dim newReferenceAddressString As String, newReferenceAddress As String
    
    newReferenceAddressString = referenceAddressString
    referenceAddressArr = Split(referenceAddressString, ",")
    
    For Each referenceAddress In referenceAddressArr
        If getNewAddressAfterDeletion(CStr(referenceAddress), newReferenceAddress, rowCollection) = True Then
            newReferenceAddressString = Replace(newReferenceAddressString, CStr(referenceAddress), newReferenceAddress)
        End If
        currentSheet.Range(referenceAddress).ClearContents '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|BoardNo|fffd||135||fffd||52a||fffd||fffd|
    Next referenceAddress
    referenceAddressString = newReferenceAddressString
End Sub

Private Function getNewAddressAfterDeletion(ByRef oldAddress As String, ByRef newAddress As String, ByRef rowCollection As Collection) As Boolean
    getNewAddressAfterDeletion = False
    Dim rowIndex As Variant
    Dim numberOfRowsToShiftUp As Long
    numberOfRowsToShiftUp = 0
    For Each rowIndex In rowCollection
        If Range(oldAddress).row > rowIndex Then
            numberOfRowsToShiftUp = numberOfRowsToShiftUp + 1
            getNewAddressAfterDeletion = True
        End If
    Next rowIndex
    newAddress = Range(oldAddress).Offset(-numberOfRowsToShiftUp, 0).address(False, False)
End Function

Private Sub deleteRowsWithoutBoardNoColumn(ByRef rowCollection As Collection)
    Dim RowNumber As Variant
    Dim multiRowsDeletionString As String
    For Each RowNumber In rowCollection
        If multiRowsDeletionString = "" Then
            multiRowsDeletionString = RowNumber & ":" & RowNumber
        Else
            multiRowsDeletionString = multiRowsDeletionString & "," & RowNumber & ":" & RowNumber
        End If
    Next RowNumber
    currentSheet.Range(multiRowsDeletionString).Delete
End Sub

Private Function checkSelectRanges(ByRef rowCollection As Collection, ByRef groupName As String) As Boolean
    checkSelectRanges = True
    Dim rowRange As Range
    Dim selectionRange As Range
    Set selectionRange = Selection
    
    Dim RowNumber As Long, columnNumber As Long
    Dim lastGroupName As String, columnName As String

    columnNumber = 1
    For Each rowRange In selectionRange.rows
        RowNumber = rowRange.row
        rowCollection.Add Item:=RowNumber, key:=CStr(RowNumber)
        If checkLastTwoRow(RowNumber, 1, groupName, columnName, lastGroupName) = False Then
            checkSelectRanges = False
            Exit Function
        End If
    Next rowRange
End Function

Private Function checkLastTwoRow(ByRef RowNumber As Long, ByRef columnNumber As Long, ByRef groupName As String, _
    ByRef columnName As String, ByRef lastGroupName As String) As Boolean
    checkLastTwoRow = True
    If currentSheet Is Nothing Then Set currentSheet = ThisWorkbook.ActiveSheet
    If getRangeGroupAndColumnName(currentSheet, RowNumber, columnNumber, groupName, columnName, True) = True Then
        If groupName <> lastGroupName And lastGroupName <> "" Then
            checkLastTwoRow = False
            Exit Function
        Else
            lastGroupName = groupName
        End If
    Else
        checkLastTwoRow = False
        Exit Function
    End If
End Function

Attribute VB_Name = "RefreshModel"
Function getColStr(ByVal NumVal As Long) As String
    Dim str As String
    Dim strs() As String
    
    If NumVal > 256 Or NumVal < 1 Then
        getColStr = ""
    Else
        str = Cells(NumVal).address
        strs = Split(str, "$", -1)
        getColStr = strs(1)
    End If
End Function









Attribute VB_Name = "ResourceSub"
Private resource  As CMap

Public Sub initResource()
        Dim index As Long
        Dim key As String
        Dim value As String
        Set resource = New CMap
        For index = 2 To SummaryRes.Range("a65536").End(xlUp).row
            key = SummaryRes.Cells(index, 1).value
            value = SummaryRes.Cells(index, 2).value
            Call resource.SetAt(key, value)
        Next
        
End Sub

Public Function getResByKey(key As String) As String
   On Error Resume Next
    If resource Is Nothing Then
            Call initResource
    End If
    If (resource.haskey(key)) Then
            getResByKey = resource.GetAt(key)
    Else
            getResByKey = key
    End If
End Function


Public Function getNeType() As String
    On Error Resume Next
    Dim cover As String
    Dim key As String
    Dim reValue As String
    
    cover = getResByKey("Cover")
    key = ThisWorkbook.Worksheets(cover).Cells(2, 2).value
    reValue = getResByKey(key)
    getNeType = reValue
End Function

Public Function isContainGsmControl() As Boolean
    On Error Resume Next
    Dim cover As String
    Dim key As String
    Dim reValue As String
    Dim index As Long
    
    cover = getResByKey("Cover")
    For index = 3 To 5
        key = ThisWorkbook.Worksheets(cover).Cells(index, 2).value
        reValue = getResByKey(key)
        If reValue = "BSC" Then
            isContainGsmControl = True
            Exit Function
        End If
    Next
    isContainGsmControl = False
End Function

Public Function isContainUmtsControl() As Boolean
    On Error Resume Next
    Dim cover As String
    Dim key As String
    Dim reValue As String
    Dim index As Long
    
    cover = getResByKey("Cover")
    For index = 3 To 5
        key = ThisWorkbook.Worksheets(cover).Cells(index, 2).value
        reValue = getResByKey(key)
        If reValue = "RNC" Then
            isContainUmtsControl = True
            Exit Function
        End If
    Next
    isContainUmtsControl = False
End Function

Public Function isContainBaseStation() As Boolean
    On Error Resume Next
    Dim cover As String
    Dim key As String
    Dim reValue As String
    Dim index As Long
    
    cover = getResByKey("Cover")
    For index = 3 To 5
        key = ThisWorkbook.Worksheets(cover).Cells(index, 2).value
        reValue = getResByKey(key)
        If reValue = "BaseStation" Then
            isContainBaseStation = True
            Exit Function
        End If
    Next
    isContainBaseStation = False
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SummaryRes"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SystemConf"
Option Explicit



Public Function IsGBTSTemplate() As Boolean
    
    IsGBTSTemplate = False
    
    If IsExistsSheet("FUNCTION_SHEET") Then
        If ("DATAITF_BTS" = ThisWorkbook.Sheets("FUNCTION_SHEET").Cells(1, 1).value) Then
            IsGBTSTemplate = True
        End If
    End If
End Function

Function IsExistsSheet(sheetName As String) As Boolean
  Dim ShtIdx As Long
  Dim OpSht As Worksheet
  
  ShtIdx = 1
  Do While (ShtIdx <= ActiveWorkbook.Sheets.count)
      Set OpSht = ActiveWorkbook.Sheets(ShtIdx)
      If OpSht.name = sheetName Then
        IsExistsSheet = True
        Exit Function
      End If
      ShtIdx = ShtIdx + 1
  Loop
  IsExistsSheet = False
End Function

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Activate()
    On Error Resume Next
    initResource
    buildControlRelations
    hyperLintFlag = True
    Set currentSheet = ThisWorkbook.ActiveSheet
    Call initCapacityExpansionToolBar(currentSheet)
    Call initAujustAntnPortToolBar(currentSheet)
    Call initMenuStatus(currentSheet)
    
    Call addHyperlinksForSheets(currentSheet) '|fffd||fffd||421||fffd||fffd||4b3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd||4b3||fffd||fffd||fffd||fffd||fffd||fffd||4b3||fffd||fffd||fffd||4f3||fffd||fffd||fffd||fffd||fffd|
    'currentCellValue = ActiveCell.value
End Sub


Private Sub Workbook_Deactivate()
    On Error Resume Next
    
    Call DeleteUserToolBar '|fffd||fffd||27e||421||fffd||fffd||fffd||230||fffd||165|
    
    Call deleteCapacityExpansionToolBar
    Call CapacityCellSub.deleteCellBar
    Call CapacityCellSub.deleteTempBar
    destroyMenuStatus
    Application.StatusBar = False
End Sub

'|fffd||fffd||5a7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4e6||fffd||fffd||fffd||fffd|
Private Sub Workbook_SheetChange(ByVal sh As Object, ByVal Target As Range)
    On Error Resume Next
    Dim sheet As New Worksheet
    Dim cellRange As Range
    Dim isConAttr As Boolean
    Dim RowNum As Long
    Dim contRel As controlRelation
    Dim sheetName As String
    Set sheet = sh
    sheetName = sheet.name
    
    If ThisWorkbook.name <> ActiveWorkbook.name Or sheet.Visible <> xlSheetVisible Then
        Exit Sub
    End If
    If isControlDefSheetExist = False Then
        Exit Sub
    End If
    
    If isBoardStyleSheet(sheet) Then
        Call boardStyleSheetControl(sheet, Target) '|fffd||fffd||fffd||fffd||fffd||fffd||2bd||4b3||1e9||fffd||fffd||5a7||fffd||fffd||fffd||fffd|
        Call addReferenceRangeHyperlinks_SheetChange(sheet, Target) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||f5||fffd||52a||fffd||fffd||fffd||fffd||fffd||fffd|
        Exit Sub
    End If
    
    If sheetName = GetMainSheetName() Then
        Call addBoardStyleNameHyperlinks_SheetChange(sheet, Target) '|fffd||fffd||fffd||4f4||fffd||fffd||fffd||4b3||fffd||fffd||fffd||fffd||fffd||fffd||2bd||fffd||fffd||fffd||1b3||fffd||fffd||fffd||fffd||fffd|
    ElseIf isCellSheet(sheetName) Then
        Call addRxuAntNoHyperlinks_SheetChange(sheet, Target) '|fffd||fffd||421||fffd||fffd||4b3||1e9||fffd||fffd|RXU Ant No.|fffd||fffd||fffd||4f3||fffd||fffd||fffd||fffd||fffd|
    End If
    
    If sheetName = getResByKey("Temp Sheet") Then
        Call changeRangeColor(sheet, Target)
        Call BranchControlForTempSht(sheet, Target)
    End If
    
    Dim sheetType As String
    Dim currentNeType As String
    sheetType = getSheetType(sheetName)
    If (isGsmCellSheet(sheetName) = False) And (sheetName <> "MappingSiteTemplate") And (sheetName <> "ProductType") _
        And (sheetName <> "MappingCellTemplate") And (sheetName <> "MappingRadioTemplate") _
        And (sheetName <> "MAPPING DEF") And (sheetName <> "SHEET DEF") And (sheetName <> "CONTROL DEF") And (sheetName <> "RELATION DEF") _
        And (sheetName <> "Help for USB Parameter") And (sheetName <> getResByKey("help")) _
        And (sheetName <> "IPRouteMap") And (sheetName <> getResByKey("Cover")) And (sheetName <> "COMMON") _
        And (sheetName <> "Qos") And (sheetName <> "USB Parameter for Sites") And (sheetName <> "SummaryRes") _
        And (sheetName <> getResByKey("Temp Sheet")) And (sheetType <> "") _
        And Not isGsmCellSheet(sheet.name) Then
        If sheetName = GetMainSheetName() And getNeType() <> "USU" And (Not (cellRange.row = 3)) Then
            Call TransPortSheetChange(sheet, Target)
        End If
        If Target.count Mod 256 = 0 Then
            Exit Sub
        End If
        For Each cellRange In Target
            If sheetName = getResByKey("Comm Data") Then
                If cellRange.Interior.colorIndex = 34 Or cellRange.Interior.colorIndex = 40 Or cellRange.Borders.LineStyle = xlLineStyleNone Then
                    Exit Sub
                End If
            Else
                If (cellRange.row < 3) Or (cellRange.column > sheet.Range("IV2").End(xlToLeft).column) Then
                    Exit Sub
                End If
            End If
            
            If (Not (sheetName = GetMainSheetName() And cellRange.row = 3)) And Ensure_Gray_Cell(cellRange) = False Then
                'isConAttr|fffd||fffd||fffd||fffd||fffd||1f7||fffd||fffd||fffd||fffd||fffd||fffd||632||fffd||fffd||fffd|
'                If UBound(Split(cellRange.value, "\")) <> 2 And cellRange.Hyperlinks.count = 1 Then
'                    cellRange.Hyperlinks.Delete
'                End If
                isConAttr = False
                
               If (Check_Value_Validation(sheet, cellRange, isConAttr, contRel, currentNeType) = 1) And (isConAttr = True) Then
                    Call Execute_Branch_Control(sheet, cellRange, contRel, currentNeType)
                End If
                
                '|423||fffd||fffd||fffd||1f7||fffd||fffd||fffd||fffd||fffd||fffd||f2||fffd||fffd||fffd|
                'Call CheckRefedCellValidation(sheet, cellRange)
            End If
        Next cellRange
    End If
End Sub
Private Sub Workbook_SheetActivate(ByVal sh As Object)
    On Error GoTo ErrorHandler
    If ThisWorkbook.name <> ActiveWorkbook.name Or sh.Visible <> xlSheetVisible Then
        Exit Sub
    End If
    Dim sheet As Worksheet
    Set sheet = sh
    'If addBoardStyleMoiInProcess Is Nothing Then
    If inAddProcessFlag = False Then
        Call resetAddBoardStyleMoiInfo(sheet)
    Else
        Exit Sub
    End If
    
    If InAdjustAntnPort = True Then
        Exit Sub
    End If
    
    Call initAujustAntnPortToolBar(sheet)
    Call initCapacityExpansionToolBar(sheet)
    Call initMenuStatus(sheet)
    
    Call addHyperlinksForSheets(sheet) '|fffd||fffd||421||fffd||fffd||4b3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd||4b3||fffd||fffd||fffd||fffd||fffd||fffd||4b3||fffd||fffd||fffd||4f3||fffd||fffd||fffd||fffd||fffd|
    Exit Sub
ErrorHandler:
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
'    If Not isIubStyleWorkBook() And Not SummaryRes.Visible Then
'        AddLink
'    End If
    If inAddProcessFlag = True Then
        Call popUpWbCannotSaveMsgbox
        Cancel = True
        SaveAsUI = True
    End If
    If InAdjustAntnPort = True Then
        Call popUpWbCannotSaveMsgbox
        Cancel = True
        SaveAsUI = True
    End If
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    On Error Resume Next
    If inAddProcessFlag = True Then
        Call popUpWbCannotSaveMsgbox
        Cancel = True
    End If
    If InAdjustAntnPort = True Then
        Call popUpTempSheetCannotSaveMsgbox
        Cancel = True
    End If
End Sub

Private Sub Workbook_SheetDeactivate(ByVal sh As Object)
    On Error GoTo ErrorHandler
    If inAddProcessFlag = True And sh.name = currentSheet.name Then
        Call popUpSheetCannotChangeMsgbox
    End If
    If InAdjustAntnPort = True And sh.name = getResByKey("Temp Sheet") Then
        Call popUpTempSheetCannotChangeMsgbox
    End If
    Exit Sub
ErrorHandler:
End Sub

Private Sub Workbook_SheetSelectionChange(ByVal sh As Object, ByVal Target As Range)
    On Error GoTo ErrorHandler
    'currentCellValue = ActiveCell.value
    Dim sht As Worksheet
    Set sht = sh
    
    If ThisWorkbook.name <> ActiveWorkbook.name Or sht.Visible <> xlSheetVisible Then
        Exit Sub
    End If
    
    If sheetSelectionShouldCheck(sht) Then
        Call currentParameterBranchCheck(sht, Target) '|fffd||fffd||1f0||fffd||5b6||3b7||fffd||5a7||423||fffd||fffd|
    End If
    
    If isBoardStyleSheet(sht) Then
        Call boardStyleSelectionChange(sht, Target)
    End If
    
    If sht.name = GetMainSheetName() Then
        Call genBaseStationBoardStyleRef(sht, Target)
    ElseIf isCellSheet(sht.name) And Not IsGBTSTemplate() Then
        Call cellSheetSelectionEvent(sht, Target)
    End If
    
'    If isIubStyleWorkSheet(sht.name) Then
'        Call iubStyleSheetSelectionChange(sht, Target)
'    End If
'
'     If sht.name = GetMainSheetName() And getNeType() <> "USU" And (Not (isIubStyleWorkBook() And Target.row = 3)) Then
'        Call iubStyleWorkBookSelectionChange(sht, Target)
'    End If
    Exit Sub
ErrorHandler:
End Sub



Attribute VB_Name = "ToolBarFunction"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
    Private m_siteAddSupport As Boolean
    Private m_cellAddSupport As Boolean
    Private m_radioAddSupport As Boolean
    
Property Get siteAddSupport() As Boolean
    siteAddSupport = m_siteAddSupport
End Property

Property Get cellAddSupport() As Boolean
    cellAddSupport = m_cellAddSupport
End Property

Property Get radioAddSupport() As Boolean
    radioAddSupport = m_radioAddSupport
End Property

Private Sub Class_Initialize()
On Error GoTo ErrExit
            Dim sh As Worksheet
            m_siteAddSupport = True
            m_cellAddSupport = True
            m_radioAddSupport = True
            Set sh = Worksheets("ToolBarConfig")
            
            If sh.Cells(1, 2).value = "N" Then
                  m_siteAddSupport = False
            End If
            If sh.Cells(2, 2).value = "N" Then
                  m_cellAddSupport = False
            End If
            If sh.Cells(3, 2).value = "N" Then
                  m_radioAddSupport = False
            End If
            Exit Sub
ErrExit:
            m_siteAddSupport = True
            m_cellAddSupport = True
            m_radioAddSupport = True
End Sub


Attribute VB_Name = "TransPortSub"
'|fffd||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||fffd||bc||fffd||fffd||2bc||fffd||fffd|
Private Const constRecordRow = 2
Private Const productTypeAttr As String = "PRODUCTTYPE"
Private Const productTypeMoc As String = "Node"
Private Const siteTemplateAttr As String = "SiteTemplateName"
Private Const siteTemplateMoc As String = "Node"
Private Const GRadioAttr As String = "RadioTemplateName"
Private Const GRadioMoc As String = "GbtsFunction"
Private Const URadioAttr As String = "RadioTemplateName"
Private Const URadioMoc As String = "NodeBFunction"
Private Const LRadioAttr As String = "RadioTemplateName"
Private Const LRadioMoc As String = "eNodeBFunction"

Private Const gsmRadioType As String = "GSM Radio Template"
Private Const umtsRadioType As String = "UMTS Radio Template"
Private Const lteRadioType As String = "LTE Radio Template"




'|fffd||fffd||fffd||5878|*Site Type|fffd||fffd||fffd||fffd||fffd||fffd|Cabinet Type|fffd||fffd||fffd||fffd||fffd||fffd|*Site Template|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||bc||fffd|
Public Sub TransPortSheetChange(ByVal sh As Object, ByVal Target As Range)
    Dim m_Str As String
    '|fffd||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||fffd|*Site Type|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    constTypeCol = getColNum(sh.name, constRecordRow, productTypeAttr, productTypeMoc)
    
    '|fffd||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||fffd|*Site Template|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    constPattenCol = getColNum(sh.name, constRecordRow, siteTemplateAttr, siteTemplateMoc)
    
    '|fffd||fffd|*Site Type|fffd||fffd||5b5||fffd||fffd||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||e1||fffd|Site Template|fffd||fffd||fffd||13a||fffd||461||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1f0||5b5||fffd||fffd|
     If Target.column = constTypeCol And Target.row > constRecordRow And Target.count = 1 Then
        If constTypeCol <> -1 And constPattenCol <> -1 Then
            '|fffd||fffd||221||fffd||fffd|*Site Template|fffd||fffd||fffd||43a||fffd||461||5b5|
            m_Str_Template = Get_Template_Related(Target.value)
            If m_Str_Template <> "" Then
                With Target.Offset(0, constPattenCol - constTypeCol).Validation
                    .Delete
                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=m_Str_Template
                End With
                If Not Target.Offset(0, constPattenCol - constTypeCol).Validation.value Then
                    Target.Offset(0, constPattenCol - constTypeCol).value = ""
                End If
            Else
                With Target.Offset(0, constPattenCol - constTypeCol).Validation
                    .Delete
                    .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator:=xlBetween
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .inputTitle = ""
                    .ErrorTitle = ""
                    .inputMessage = ""
                    .ErrorMessage = ""
                    .IMEMode = xlIMEModeNoControl
                    .ShowInput = True
                    .ShowError = True
                End With
                    Target.Offset(0, constPattenCol - constTypeCol).value = ""
            End If
        End If
         
    End If

End Sub
    
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||e1||fffd|*Site Type|fffd||fffd||fffd||43a||361||fffd|*Site Template|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||431||fffd||fffd||fffd||fffd||bc||fffd|
Public Sub TransPortSheetSelectionChange(ByVal sh As Object, ByVal Target As Range)
    Dim m_Str_Cabinet As String
    Dim m_Str_Template As String
    Debug.Print Now
    '|fffd||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||fffd|*Site Type|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    constTypeCol = getColNum(sh.name, constRecordRow, productTypeAttr, productTypeMoc)
    
    '|fffd||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||fffd|*Site Template|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    constPattenCol = getColNum(sh.name, constRecordRow, siteTemplateAttr, siteTemplateMoc)

    '|fffd||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||fffd|*GBTS Radio Template|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    constGsmRadionPattenCol = getColNum(sh.name, constRecordRow, GRadioAttr, GRadioMoc)
    
    '|fffd||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||fffd|*Umts Radio Template|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    constUmtsRadionPattenCol = getColNum(sh.name, constRecordRow, URadioAttr, URadioMoc)
    
    '|fffd||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||fffd|*LTE Radio Template|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    constLteRadionPattenCol = getColNum(sh.name, constRecordRow, LRadioAttr, LRadioMoc)
    Debug.Print Now
    '|fffd||fffd||221||fffd||fffd|*Site Type|fffd||fffd||fffd||43a||fffd||461||5b5||fffd||fffd||fffd||fffd||fffd||8da8||3aa||fffd||fffd||fffd||fffd||fffd||fffd|
    If Target.column = constTypeCol And Target.count = 1 And Target.row > constRecordRow Then
        '|fffd||fffd||221||fffd||fffd|*Site Type|fffd||fffd||fffd||43a||fffd||461||5b5|
        m_Str_Cabinet = GetSiteType
        If m_Str_Cabinet <> "" Then
            With Target.Validation
               .Delete
               .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=m_Str_Cabinet
            End With
            If Not Target.Validation.value Then
                Target.value = ""
            End If
        Else
            With Target.Validation
                .Delete
                .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator:=xlBetween
                .IgnoreBlank = True
                .InCellDropdown = True
                .inputTitle = ""
                .ErrorTitle = ""
                .inputMessage = ""
                .ErrorMessage = ""
                .IMEMode = xlIMEModeNoControl
                .ShowInput = True
                .ShowError = True
            End With
                Target.value = ""
        End If
    '|fffd||fffd||221||fffd||fffd|*Site Template|fffd||fffd||fffd||43a||fffd||461||5b5||fffd||fffd||fffd||fffd||fffd||8da8||3aa||fffd||fffd||fffd||fffd||fffd||431||fffd|
    ElseIf Target.column = constPattenCol And Target.count = 1 And Target.row > constRecordRow Then
        If constTypeCol <> -1 Then
            If Cells(Target.row, constTypeCol).value <> "" Then
                '|fffd||4e1||fffd|MappingSiteTemplate|fffd||fffd||4b3||fffd||fffd||221||fffd||fffd|*Site Template|fffd||fffd||fffd||43a||fffd||461||5b5|
                m_Str_Template = Get_Template_Related(Target.Offset(0, constTypeCol - constPattenCol).value)
                If m_Str_Template <> "" Then
                    With Target.Validation
                           .Delete
                           .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=m_Str_Template
                    End With
                    If Not Target.Validation.value Then
                        Target.value = ""
                    End If
                Else
                    With Target.Validation
                        .Delete
                        .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator:=xlBetween
                        .IgnoreBlank = True
                        .InCellDropdown = True
                        .inputTitle = ""
                        .ErrorTitle = ""
                        .inputMessage = ""
                        .ErrorMessage = ""
                        .IMEMode = xlIMEModeNoControl
                        .ShowInput = True
                        .ShowError = True
                    End With
                        Target.value = ""
                End If
            Else
                With Target.Validation
                    .Delete
                    .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator:=xlBetween
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .inputTitle = ""
                    .ErrorTitle = ""
                    .inputMessage = ""
                    .ErrorMessage = ""
                    .IMEMode = xlIMEModeNoControl
                    .ShowInput = True
                    .ShowError = True
                End With
                    Target.value = ""
            End If
        End If
    ElseIf Target.column = constGsmRadionPattenCol And Target.count = 1 And Target.row > constRecordRow Then
        '|fffd||fffd||221||fffd||fffd|*Radio Template|fffd||fffd||fffd||43a||fffd||461||5b5|
        m_Str_Radio = getRadioTemplate(getResByKey(gsmRadioType))
        If m_Str_Radio <> "" Then
            With Target.Validation
               .Delete
               .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=m_Str_Radio
            End With
            If Not Target.Validation.value Then
                Target.value = ""
            End If
        Else
            With Target.Validation
                .Delete
                .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator:=xlBetween
                .IgnoreBlank = True
                .InCellDropdown = True
                .inputTitle = ""
                .ErrorTitle = ""
                .inputMessage = ""
                .ErrorMessage = ""
                .IMEMode = xlIMEModeNoControl
                .ShowInput = True
                .ShowError = True
            End With
                Target.value = ""
        End If
    ElseIf Target.column = constUmtsRadionPattenCol And Target.count = 1 And Target.row > constRecordRow Then
        '|fffd||fffd||221||fffd||fffd|*Radio Template|fffd||fffd||fffd||43a||fffd||461||5b5|
        m_Str_Radio = getRadioTemplate(getResByKey(umtsRadioType))
        If m_Str_Radio <> "" Then
            With Target.Validation
               .Delete
               .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=m_Str_Radio
            End With
            If Not Target.Validation.value Then
                Target.value = ""
            End If
        Else
            With Target.Validation
                .Delete
                .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator:=xlBetween
                .IgnoreBlank = True
                .InCellDropdown = True
                .inputTitle = ""
                .ErrorTitle = ""
                .inputMessage = ""
                .ErrorMessage = ""
                .IMEMode = xlIMEModeNoControl
                .ShowInput = True
                .ShowError = True
            End With
                Target.value = ""
        End If
    ElseIf Target.column = constLteRadionPattenCol And Target.count = 1 And Target.row > constRecordRow Then
        '|fffd||fffd||221||fffd||fffd|*Radio Template|fffd||fffd||fffd||43a||fffd||461||5b5|
        m_Str_Radio = getRadioTemplate(getResByKey(lteRadioType))
        If m_Str_Radio <> "" Then
            With Target.Validation
               .Delete
               .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=m_Str_Radio
            End With
            If Not Target.Validation.value Then
                Target.value = ""
            End If
        Else
            With Target.Validation
                .Delete
                .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator:=xlBetween
                .IgnoreBlank = True
                .InCellDropdown = True
                .inputTitle = ""
                .ErrorTitle = ""
                .inputMessage = ""
                .ErrorMessage = ""
                .IMEMode = xlIMEModeNoControl
                .ShowInput = True
                .ShowError = True
            End With
                Target.value = ""
        End If
    End If
End Sub

'|fffd||4e1||fffd|MappingSiteTypeCabinetType|fffd||fffd||4b3||fffd||fffd||221||fffd||fffd|*Site Type|fffd||fffd||fffd||43a||fffd||461||5b5|
Function GetSiteType() As String
    Dim m_rowNum As Long
    Dim m_Str, neType As String
    
    neType = getNeType()
    m_Str = ""
    For m_rowNum = 2 To ProductType.Range("a65536").End(xlUp).row
            If ProductType.Cells(m_rowNum, 2) = neType Then
                If m_Str = "" Then
                     m_Str = ProductType.Cells(m_rowNum, 1).value
                Else
                    m_Str = m_Str & "," & ProductType.Cells(m_rowNum, 1).value
                End If
            End If
    Next
    GetSiteType = m_Str
End Function

Function getRadioTemplate(RadioType As String) As String
    Dim m_rowNum As Long
    Dim m_RowNum_Inner As Long
    Dim flag As Boolean
    Dim m_Str As String
    Dim m_start As Long
    Dim m_end As Long
    Dim neType As String
    neType = getNeType()
    m_Str = ""
      For m_rowNum = 2 To MappingRadioTemplate.Range("a65536").End(xlUp).row
        If RadioType = MappingRadioTemplate.Cells(m_rowNum, 2).value _
        And neType = MappingRadioTemplate.Cells(m_rowNum, 3).value Then
            If m_Str = "" Then
                m_Str = MappingRadioTemplate.Cells(m_rowNum, 1).value
            Else
                m_Str = m_Str & "," & MappingRadioTemplate.Cells(m_rowNum, 1).value
            End If
        End If
    Next
    
    'If m_start = 0 Then
    '    m_Str = ""
    'Else
    '    m_Str = "=INDIRECT(""MappingRadioTemplate!A" & CStr(m_start) & ":A" & CStr(m_end) & """)"
   ' End If
    getRadioTemplate = m_Str
End Function


'|fffd||4e1||fffd|MappingSiteTemplate|fffd||fffd||4b3||fffd||fffd||221||fffd||fffd|*Site Template|fffd||fffd||fffd||43a||fffd||461||5b5|
Public Function Get_Template_Related(SiteType As String) As String
    Dim m_rowNum As Long
    Dim m_Str As String
    Dim m_start As Long
    Dim m_end As Long
    Dim neType As String
    
    neType = getNeType()
    
    m_start = 0
    m_Str = ""
    For m_rowNum = 2 To MappingSiteTemplate.Range("a65536").End(xlUp).row
        If SiteType = MappingSiteTemplate.Cells(m_rowNum, 1).value _
        And neType = MappingSiteTemplate.Cells(m_rowNum, 5).value Then
            If m_Str = "" Then
                m_Str = MappingSiteTemplate.Cells(m_rowNum, 4).value
            Else
                m_Str = m_Str & "," & MappingSiteTemplate.Cells(m_rowNum, 4).value
            End If
        End If
    Next
    
    'If m_start = 0 Then
        'm_Str = ""
    'Else
        'm_Str = "=INDIRECT(""MappingSiteTemplate!D" & CStr(m_start) & ":D" & CStr(m_end) & """)"
    'End If
    
    Get_Template_Related = m_Str

End Function

'|fffd||fffd||5b8||fffd||fffd|sheet|4b3||fffd||fffd||5b8||fffd||fffd||fffd||423||fffd||fffd||fffd||fffd||fffd||5b8||fffd||fffd||fffd||423||fffd||fffd||fffd||fffd||fffd||fffd||43a||fffd|
Private Function Get_Col(sheetName As String, recordRow As Long, ColValue As String) As Long
    Dim m_colNum As Long

    Get_Col = -1
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Worksheets(sheetName)
    For m_colNum = 1 To ws.Range("IV2").End(xlToLeft).column
        If ColValue = ws.Cells(recordRow, m_colNum).value Then
            Get_Col = m_colNum
            Exit For
        End If
    Next
End Function






Attribute VB_Name = "TrxInfoMgr"
Option Explicit

Public Const CELLBAND_850 = "GSM850"
Public Const CELLBAND_900 = "GSM900"
Public Const CELLBAND_1800 = "GSM1800"
Public Const CELLBAND_1900 = "GSM1900"
Private Const MOC_TRXINFO = "TRXINFO"
Private Const ATTR_MAGRP = "MAGRPFREQLIST"
Private Const ATTR_BRDNO = "BRDNO"
Private Const ATTR_TRXPN = "TRXPN"
Private Const ATTR_ANTPASSNO = "ANTPASSNO"
Private Const ATTR_HSN = "HSN"
Private Const ATTR_HOPMODE = "HOPMODE"
Private Const ATTR_TRXNUM = "TRXNUM"
Private Const ATTR_TYPE = "TYPE"
Private Const ATTR_BCH_FREQ = "BCCHFREQ"
Private Const ATTR_TCH_FREQ = "NONBCCHFREQLIST"
Private Const ATTR_BTSNAME = "BTSNAME"
Private Const ATTR_CELLNAME = "CELLNAME"
Private Const ATTR_GLOCELLID = "GLocellId"
Private Const MOC_GLOCELL = "GLOCELL"
Private Const MOC_GCELL = "GCELL"
Private Const MOC_TRXBIND2PHYBRD = "TRXBIND2PHYBRD"
Private Const MOC_GCELLMAGRP = "GCELLMAGRP"
Private REMOVESUCCESS As Boolean
Private CellShtName As String
Private RowNumber As Long
Private NeedDeleteIndex As Long
Private freqCollection As Collection
Private hasTrx As Boolean
Public Sub test()
    Dim trxStr As String
    trxStr = ""
    trxStr = getFreqLstStrByGCell("GSM Cell", "MRAT3", "0")
 End Sub
 
    
'|fffd||fffd||fffd||fffd||2f5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||77b||fffd||57e||fffd||fffd||fffd||fffd|BtsName|fffd||fffd||421||fffd||fffd||fffd||fffd||fffd||fffd|GCellName|fffd||fffd||4b3||1e9|GCellShtName|fffd||fffd||221||1b5||fffd||fffd||fffd||fffd||3e2|
'|5e2||fffd||fffd||38fa|
'1|fffd||fffd||fffd||fffd||1b5||fffd||fffd||fffd||fffd|TRXNUM|fffd||fffd||fffd||fffd||fffd||47e||fffd||fffd||fffd||434||fffd||fffd|
'2|fffd||fffd||fffd||fffd|B|fffd||377||fffd||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||47e||fffd||fffd||fffd||434||fffd||fffd|
'3|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|1|fffd||fffd|2|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||63f||563||fffd|
'4|fffd||fffd||fffd||fffd||2b5||fffd||2b5||fffd||1b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|TRXNUM|2b1||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b5||fffd||3c7b||fffd||635||fffd||fffd||fffd||4b2||fffd||fffd||fffd||1f2||fffd||fffd||fffd||fffd||f6a35||fffd||1b5||fffd||fffd|
Public Function getFreqLstStrByGCell(GCellShtName As String, btsName As String, GLocellId As String) As String
    
    Dim cellsheet As Worksheet
    Set cellsheet = ThisWorkbook.Worksheets(GCellShtName)
    
    Dim trxNumIndex As Long
    trxNumIndex = getColNum(GCellShtName, 2, ATTR_TRXNUM, MOC_TRXINFO)
    
    Dim bchIndex As Long
    bchIndex = getColNum(GCellShtName, 2, ATTR_BCH_FREQ, MOC_TRXINFO)
    
    Dim tchIndex As Long
    tchIndex = getColNum(GCellShtName, 2, ATTR_TCH_FREQ, MOC_TRXINFO)
 
    Dim btsNameColIndex As Long
    btsNameColIndex = getColNum(GCellShtName, 2, ATTR_BTSNAME, MOC_GCELL)
        
    Dim gLocellIdColIndex As Long
    gLocellIdColIndex = getColNum(GCellShtName, 2, ATTR_GLOCELLID, MOC_GLOCELL)
 
    Dim index As Long
    
    For index = 3 To cellsheet.Range("a65536").End(xlUp).row
        If cellsheet.Cells(index, btsNameColIndex).value = btsName _
            And cellsheet.Cells(index, gLocellIdColIndex).value = GLocellId Then
            
            Dim trxNumStr As String
            trxNumStr = cellsheet.Cells(index, trxNumIndex).value
                        
            Dim trxNumArr() As String
            Dim elNo As Long
            Dim curCellTrxNum As Long
            curCellTrxNum = 0
            trxNumArr = Split(trxNumStr, ",")
            For elNo = LBound(trxNumArr) To UBound(trxNumArr)
                curCellTrxNum = curCellTrxNum + trxNumArr(elNo)
            Next
                      
            
            Dim tchFreqs As String
            tchFreqs = cellsheet.Cells(index, tchIndex).value
            If Not (Trim(tchFreqs) = "") Then
                tchFreqs = "," + tchFreqs
            End If
            getFreqLstStrByGCell = cutTail(cellsheet.Cells(index, bchIndex).value + tchFreqs, curCellTrxNum)
            Exit Function
        End If
    Next
    
    getFreqLstStrByGCell = ""
End Function
Public Function cutTail(str As String, elementNum As Long) As String
    Dim strArr() As String
    Dim finaStr As String
    
    
    strArr = Split(str, ",")
    finaStr = ""
    Dim iNo As Long
    iNo = 0
    While (iNo < elementNum And iNo <= UBound(strArr))
        If (0 = iNo) Then
            finaStr = strArr(iNo)
        Else
            finaStr = finaStr + "," + strArr(iNo)
        End If
        
        iNo = iNo + 1
    Wend
                   
    cutTail = finaStr
End Function

Public Sub deleteFreqAndAssocMo(CellSheetName As String, RowNum As Long, SelectedFreqIndex As Long, _
    freqCollect As Collection)
    On Error GoTo ErrorHandler
    CellShtName = CellSheetName
    RowNumber = RowNum
    NeedDeleteIndex = SelectedFreqIndex
    Set freqCollection = freqCollect
    
    Dim freq As String
    freq = freqCollection.Item(SelectedFreqIndex + 1)
    
    Call deleteTrx
    
    Call changeTrxNum(freq)
    
    hasTrx = True
    hasTrx = trxExist()
    
    Call deleteTrxChildMo
    
    Call changeHopType
    
    Call changeMaGrpList(freq)
    
    Call changeTrxBind
    
ErrorHandler:
    REMOVESUCCESS = False
    
End Sub
Private Function trxExist() As Boolean
    Dim ws As Worksheet
    
    Set ws = ThisWorkbook.Worksheets(CellShtName)
    
    Dim trxNumIndex As Long
    Dim trxNumStr As String
    trxExist = True
    
    trxNumIndex = getColNum(CellShtName, 2, ATTR_TRXNUM, MOC_TRXINFO)
    trxNumStr = ws.Cells(RowNumber, trxNumIndex)
    
    If (Trim(trxNumStr) = "") Or (Trim(trxNumStr) = "0") Or (Trim(trxNumStr) = "0,0") Then
        trxExist = False
    End If
End Function
Private Function deleteTrx()
    Dim bchIndex As Long
    Dim tchIndex As Long
    Dim tchStr As String
    Dim hasBch As Boolean
    Dim freq As String
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(CellShtName)
    
    bchIndex = getColNum(CellShtName, 2, ATTR_BCH_FREQ, MOC_TRXINFO)
    tchIndex = getColNum(CellShtName, 2, ATTR_TCH_FREQ, MOC_TRXINFO)
    hasBch = existBch(ws, bchIndex)
    freq = freqCollection.Item(NeedDeleteIndex + 1)

    tchStr = ""
    
    If freq = ws.Cells(RowNumber, bchIndex) Then

        freqCollection.Remove (NeedDeleteIndex + 1)
        ws.Cells(RowNumber, bchIndex) = ""

    Else
        freqCollection.Remove (NeedDeleteIndex + 1)
        Dim tCount As Long
        If freqCollection.count >= 1 Then
            If hasBch Then
                For tCount = 2 To freqCollection.count
                    tchStr = tchStr + freqCollection.Item(tCount) + ","
                Next
            Else
                For tCount = 1 To freqCollection.count
                    tchStr = tchStr + freqCollection.Item(tCount) + ","
                Next
            End If
        End If
        If Trim(tchStr) <> "" Then
            ws.Cells(RowNumber, tchIndex) = Left(tchStr, Len(tchStr) - 1)
        Else
            ws.Cells(RowNumber, tchIndex) = ""
        End If
    End If
End Function
Private Function existBch(ws As Worksheet, bchIndex As Long) As Boolean
    Dim bch As String
    bch = ws.Cells(RowNumber, bchIndex).value
    If bch = "" Then
        existBch = False
    Else
        existBch = True
    End If
End Function

Private Function deleteTrxChildMo()
    Dim TrxChildMocCollection As Collection
    Set TrxChildMocCollection = New Collection
    
    TrxChildMocCollection.Add ("GTRXDEV")
    TrxChildMocCollection.Add ("GTRXRSVPARA")
    TrxChildMocCollection.Add ("GTRXIUO")
    TrxChildMocCollection.Add ("GTRXBASE")
    TrxChildMocCollection.Add ("GTRXFC")
    TrxChildMocCollection.Add ("GTRXRLALM")
    
    Dim mocName As Variant
    
    For Each mocName In TrxChildMocCollection
        changeAttrByMoc (mocName)
    Next
End Function
Private Function changeTrxNum(freq As String)
    Dim trxNumber As String
    Dim cellBand As String
    Dim trxNumIndex As Long
    Dim cellBandIndex As Long
    Dim trxNumArray() As String
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(CellShtName)
        
    trxNumIndex = getColNum(CellShtName, 2, ATTR_TRXNUM, MOC_TRXINFO)
    cellBandIndex = getColNum(CellShtName, 2, ATTR_TYPE, MOC_GCELL)
    
    trxNumber = ws.Cells(RowNumber, trxNumIndex)
    cellBand = ws.Cells(RowNumber, cellBandIndex)
    
    trxNumArray = Split(trxNumber, ",")
    Dim eNo As Long
    eNo = UBound(trxNumArray)
    
    If eNo = 0 Then
        ws.Cells(RowNumber, trxNumIndex) = trxNumber - 1
    Else
        Dim lBandNum As Long
        Dim uBandNum As Long
        lBandNum = trxNumArray(0)
        uBandNum = trxNumArray(1)
        
        Dim band As String
        band = getFreqBand(CStr(freq), cellBand)
            
        If (band = CELLBAND_850 Or band = CELLBAND_900) Then
            lBandNum = lBandNum - 1
        Else
            uBandNum = uBandNum - 1
        End If
        
        ws.Cells(RowNumber, trxNumIndex) = CStr(lBandNum) + "," + CStr(uBandNum)
    End If
End Function
Private Function changeHopType()
    Dim tchIndex As Long
    Dim trxNumIndex As Long
    Dim hopTypeIndex As Long
    
    Dim tchStr As String
    Dim trxNumStr As String
    
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(CellShtName)
    tchIndex = getColNum(CellShtName, 2, ATTR_TCH_FREQ, MOC_TRXINFO)
    trxNumIndex = getColNum(CellShtName, 2, ATTR_TRXNUM, MOC_TRXINFO)
    hopTypeIndex = getColNum(CellShtName, 2, ATTR_HOPMODE, MOC_GCELLMAGRP)
    tchStr = ws.Cells(RowNumber, tchIndex)
    trxNumStr = ws.Cells(RowNumber, trxNumIndex)
    
    If Trim(tchStr) = "" Or CLng(trxNumStr) = 0 Or (Not hasTrx) Then
        ws.Cells(RowNumber, hopTypeIndex) = "NO_FH"
    End If
    
End Function
Private Function changeMaGrpList(needDeletefreq As String)
    Dim maGrpIndex As Long
    Dim maGrpStr As String
    Dim hopModeIndex As Long
    Dim hopModeStr As String
    Dim isRFHop As Boolean
    Dim newMaGrpStr As String
    Dim hsnIndex As Long
    Dim hsnStr As String
    Dim hsnArray() As String
    Dim newHsn As String
    
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(CellShtName)
    
    newMaGrpStr = ""
    newHsn = ""
    
    maGrpIndex = getColNum(CellShtName, 2, ATTR_MAGRP, MOC_TRXINFO)
    maGrpStr = ws.Cells(RowNumber, maGrpIndex)
    
    hsnIndex = getColNum(CellShtName, 2, ATTR_HSN, MOC_GCELLMAGRP)
    hsnStr = ws.Cells(RowNumber, hsnIndex)
    
    hopModeIndex = getColNum(CellShtName, 2, ATTR_HOPMODE, MOC_GCELLMAGRP)
    hopModeStr = ws.Cells(RowNumber, hopModeIndex)
    
    If Trim(hopModeStr) = "NO_FH" Then
        ws.Cells(RowNumber, hsnIndex) = ""
        ws.Cells(RowNumber, maGrpIndex) = ""
    Else

        hsnArray = Split(hsnStr, ",")
    
        Dim hNo As Long
        hNo = UBound(hsnArray)
    
        isRFHop = False
        If hopModeStr = "RF_FH" Then
            isRFHop = True
        End If
    
        Dim maGrpArray() As String
        maGrpArray = Split(maGrpStr, "]")
    
    Dim index As Long
    For index = LBound(maGrpArray) To UBound(maGrpArray)
        Dim maFreqs As String
        Dim processFreqs As String
        maFreqs = maGrpArray(index)
        If Trim(maFreqs) <> "" Then
            processFreqs = deleteFreq(needDeletefreq, Right(maFreqs, Len(maFreqs) - 1), isRFHop)
                    
                If Trim(processFreqs) <> "" Then
                    newMaGrpStr = newMaGrpStr + "[" + Trim(processFreqs) + "]"
                    If hNo <> 0 Then
                        newHsn = newHsn + hsnArray(index) + ","
                    Else
                        newHsn = hsnStr + ","
                    End If
                End If
            End If
        Next
    
        ws.Cells(RowNumber, maGrpIndex) = newMaGrpStr
    
        If Trim(newMaGrpStr) <> "" Then
            ws.Cells(RowNumber, hsnIndex) = Left(newHsn, Len(newHsn) - 1)
        Else
            ws.Cells(RowNumber, hsnIndex) = ""
        End If
    End If
    
End Function
Private Function deleteFreq(needDeletefreq As String, inputMaFreqs As String, isRFHop As Boolean) As String
    Dim freqs() As String
    freqs = Split(inputMaFreqs, ",")
    Dim index As Long
    Dim onefreq As String
    
    deleteFreq = ""
    
    For index = LBound(freqs) To UBound(freqs)
        onefreq = freqs(index)
        Dim trimdFreq As String
        trimdFreq = onefreq
        If InStr(onefreq, "(") <> 0 Then
            Dim deliStr As String
            If InStr(onefreq, ":") <> 0 Then
                deliStr = ":"
            Else
                deliStr = ")"
            End If
            trimdFreq = Right(trimdFreq, Len(trimdFreq) - 1)
            trimdFreq = Left(trimdFreq, InStr(trimdFreq, deliStr) - 1)
            If trimdFreq <> needDeletefreq Then
                deleteFreq = deleteFreq + onefreq + ","
            Else
                If isRFHop Then
                    deleteFreq = deleteFreq + trimdFreq + ","
                End If
            End If
        Else
            If onefreq <> needDeletefreq Or isRFHop Then
                deleteFreq = deleteFreq + onefreq + ","
            End If
            
        End If
    Next
    If InStr(deleteFreq, ",") <> 0 Then
        deleteFreq = Left(deleteFreq, Len(deleteFreq) - 1)
    End If
End Function

Private Function changeAttrByMoc(mocName As String)
    Dim m_colNum As Long
    Dim m_rowNum As Long
    Dim attrName As String
    Dim MAPPINGDEF As Worksheet
    Dim ws As Worksheet
    Set MAPPINGDEF = ThisWorkbook.Worksheets("MAPPING DEF")
    For m_rowNum = 2 To MAPPINGDEF.Range("a65536").End(xlUp).row
        If UCase(CellShtName) = UCase(MAPPINGDEF.Cells(m_rowNum, 1).value) _
            And UCase(mocName) = UCase(MAPPINGDEF.Cells(m_rowNum, 4).value) Then
            attrName = MAPPINGDEF.Cells(m_rowNum, 5).value
            If GetDesStr(attrName) <> "CELLNAME" And GetDesStr(attrName) <> "BTSNAME" Then
                m_colNum = getColNum(CellShtName, 2, attrName, mocName)
                changeAttr (m_colNum)
            End If
            
        End If
    Next
End Function

Private Function changeAttr(colomn As Long)
    Dim ws As Worksheet
    Dim attrValue As String
    
    Set ws = ThisWorkbook.Worksheets(CellShtName)
    attrValue = ws.Cells(RowNumber, colomn).value
    
    ws.Cells(RowNumber, colomn).value = deleteIndex(attrValue)

End Function
Private Function deleteIndex(attrValue As String) As String
    Dim strArray() As String
    Dim iNo As Long
    Dim tCount As Long
    deleteIndex = ""
    If Trim(attrValue) = "" Then
        deleteIndex = attrValue
        Exit Function
    End If
    strArray = Split(attrValue, ",")
    tCount = UBound(strArray)
    If tCount = 0 Then
        If hasTrx Then
            deleteIndex = attrValue
            Exit Function
        Else
            deleteIndex = ""
            Exit Function
        End If
    Else
        For iNo = LBound(strArray) To tCount
            If iNo = NeedDeleteIndex Then
                strArray(iNo) = ""
            Else
                deleteIndex = deleteIndex + strArray(iNo) + ","
            End If
        Next
    End If
    
    deleteIndex = shrinkStr(Left(deleteIndex, Len(deleteIndex) - 1), ",")
    
End Function

Private Function shrinkStr(inputStr As String, deliStr As String) As String
        Dim fmtStr As String
        Dim appendStr As String
        
        fmtStr = inputStr
        If "]" = deliStr Then
            appendStr = "]"
            If Right(inputStr, 1) = "]" Then
                fmtStr = Left(inputStr, Len(inputStr) - 1)
            End If
        End If
        
        
        Dim strArray() As String
        strArray = Split(fmtStr, deliStr)

        Dim iNo As Long
        Dim tmpStr As String
        
        For iNo = LBound(strArray) To UBound(strArray)
            If (0 = iNo) Then
                tmpStr = strArray(iNo)
            Else
               If Not (tmpStr = strArray(iNo)) Then
                    shrinkStr = inputStr
                    Exit Function
               End If
            End If
        Next
        
        shrinkStr = tmpStr + appendStr
End Function


Private Function changeTrxBind()
    Dim brdNoIndex As Long
    Dim brdNoStr As String
    Dim trxPnIndex As Long
    Dim trxPnStr As String
    Dim antPassNoIndex As Long
    Dim antPassNoStr As String
    Dim rruFlag As Boolean
    
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(CellShtName)
    brdNoIndex = getColNum(CellShtName, 2, ATTR_BRDNO, MOC_TRXBIND2PHYBRD)
    trxPnIndex = getColNum(CellShtName, 2, ATTR_TRXPN, MOC_TRXBIND2PHYBRD)
    antPassNoIndex = getColNum(CellShtName, 2, ATTR_ANTPASSNO, MOC_TRXBIND2PHYBRD)
    
    brdNoStr = ws.Cells(RowNumber, brdNoIndex)
    trxPnStr = ws.Cells(RowNumber, trxPnIndex)
    antPassNoStr = ws.Cells(RowNumber, antPassNoIndex)
    
    rruFlag = False
    If InStr(brdNoStr, "[") Then
        rruFlag = True
    End If
    
    If rruFlag Then
        brdNoStr = rruDelInd(brdNoStr)
        trxPnStr = rruDelInd(trxPnStr)
        antPassNoStr = rruDelInd(antPassNoStr)
    Else
        brdNoStr = delInd(brdNoStr)
        trxPnStr = delInd(trxPnStr)
        antPassNoStr = delInd(antPassNoStr)
    End If
    ws.Cells(RowNumber, brdNoIndex) = brdNoStr
    ws.Cells(RowNumber, trxPnIndex) = trxPnStr
    ws.Cells(RowNumber, antPassNoIndex) = antPassNoStr
    
End Function
Private Function rruDelInd(inputStr As String) As String
    rruDelInd = ""
    Dim strArray() As String
    strArray = Split(inputStr, "]")
    If UBound(strArray) = 0 Then
        If hasTrx Then
            rruDelInd = inputStr
        Else
            rruDelInd = ""
        End If
    Else
        Dim index As Long
        For index = LBound(strArray) To UBound(strArray)
            If index <> NeedDeleteIndex And Trim(strArray(index)) <> "" Then
                rruDelInd = rruDelInd + strArray(index) + "]"
            End If
        Next
    End If
    rruDelInd = shrinkStr(rruDelInd, "]")
End Function
Private Function delInd(inputStr As String) As String
    Dim strArray() As String
    strArray = Split(inputStr, ",")
    delInd = ""
    If InStr(inputStr, ",") = 0 Then
        If hasTrx Then
            delInd = inputStr
        Else
            delInd = ""
        End If
    Else
        Dim index As Long
        For index = LBound(strArray) To UBound(strArray)
            If index <> NeedDeleteIndex Then
                delInd = delInd + strArray(index) + ","
            End If
        Next
    End If
    If InStr(delInd, ",") <> 0 Then
        delInd = Left(delInd, Len(delInd) - 1)
    End If
End Function
Public Function changeFreqs(ByRef freqs As String, trxNumStr As String, cellBand As String) As String
    Dim trxNumArr() As String
    Dim lBandNum As Long
    Dim uBandNum As Long
    Dim lbandIndex As Long
    Dim ubandIndex As Long
    Dim freq As String
    Dim band As String
    Dim newFreqs As String
    
    trxNumArr = Split(trxNumStr, ",")
    lBandNum = trxNumArr(0)
    uBandNum = trxNumArr(1)
    
    Dim freqsArr() As String
    freqsArr = Split(freqs, ",")
    
    Dim freqIndex As Long
    For freqIndex = LBound(freqsArr) To UBound(freqsArr)
        freq = freqsArr(freqIndex)
        band = getFreqBand(freq, cellBand)
        If (band = CELLBAND_850 Or band = CELLBAND_900) And (lbandIndex < lBandNum) Then
            newFreqs = newFreqs + freq + ","
            lbandIndex = lbandIndex + 1
        ElseIf (band = CELLBAND_1800 Or band = CELLBAND_1900) And (ubandIndex < uBandNum) Then
            newFreqs = newFreqs + freq + ","
            ubandIndex = ubandIndex + 1
        End If
    Next
    freqs = newFreqs
End Function
Public Function getFreqBand(freq As String, cellBand As String) As String
    If (freq >= 0 And freq <= 124) Or (freq >= 955 And freq <= 1023) Then
        getFreqBand = CELLBAND_900
    ElseIf (freq >= 128 And freq <= 251) Then
        getFreqBand = CELLBAND_850
    ElseIf (freq >= 512 And freq <= 885) And (InStr(cellBand, "1800") <> 0) Then
        getFreqBand = CELLBAND_1800
    ElseIf (freq >= 512 And freq <= 810) And (InStr(cellBand, "1900") <> 0) Then
        getFreqBand = CELLBAND_1900
    End If
End Function
Public Function getGcellBTSNameCol(shtname As String) As Long
    getGcellBTSNameCol = getColNum(shtname, 2, "BTSNAME", "GCELL")
End Function

Public Function getTransBTSNameCol(shtname As String) As Long
    getTransBTSNameCol = getColNum(shtname, 2, "BTSNAME", "BTS")
End Function
Attribute VB_Name = "Util"
Option Explicit

Global Const g_strInvalidChar4Sql As String = "'"
Global Const g_strInvalidChar4PureFileName  As String = "\/:*?<>|"""
Global Const g_strInvalidChar4Path          As String = "/*?<>|"""

#If VBA7 Then
Private Declare PtrSafe Function GetUserName Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
#Else
Private Declare Function GetUserName Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
#End If

#If VBA7 Then
Private Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
#Else
Private Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
#End If
Private Const SW_SHOWNORMAL = 1
Public HasHistoryData As Boolean


'|fffd||fffd||fffd||f7||fffd||fffd||fffd||fffd||fffd|GetFileName("|fffd||fffd||373||fffd||171||fffd|, *.sql", "Open")
Public Function GetFileName(ByVal strFilter, ByVal strTitle, ByVal bMulSel As Boolean, vFileName As Variant) As Boolean
    
    Dim vRsp
    Dim I As Long
    
    GetFileName = False
    vRsp = Application.GetOpenFilename(FileFilter:=strFilter, title:=strTitle, MultiSelect:=bMulSel)
    If IsArray(vRsp) Then
        GetFileName = True
        
        ReDim vFileName(UBound(vRsp) - 1)
        For I = 1 To UBound(vRsp)
            vFileName(I - 1) = vRsp(I)
        Next I
    ElseIf vRsp <> False Then
        vFileName = vRsp
        GetFileName = True
    End If
End Function

Public Function ReadFile(ByVal strFileName As String) As Collection
    
    Dim FN As Long
    Dim strLine As String
    Dim colRead As New Collection
    
    FN = FreeFile()
    Open strFileName For Input As #FN
    
    While Not EOF(FN)
        Line Input #FN, strLine
        colRead.Add strLine
    Wend
    Close #FN
    
    Set ReadFile = colRead
    
End Function

Public Function WriteFile(ByVal strFileName As String, colWri As Collection, Optional bOverLay As Boolean = False, Optional bMarkSeq As Boolean = False) As Boolean
    Dim FN
    Dim v
    Dim strLine As String
    Dim Seq As Long
    Dim strPath As String
    Dim pos As Long
    
    '|fffd||fffd||5a4||b7||fffd||fffd||fffd||fffd||fffd||fffd|
    pos = InStrRev(strFileName, "\")
    If pos > 0 Then
        strPath = Left(strFileName, pos - 1)
        If Not NewDir(strPath) Then
            SysErr "File path" & vbCrLf & strPath & vbCrLf & "invalid|fffd||fffd|"
            Exit Function
        End If
    End If
    
    On Error GoTo ErrExit
    
    If bOverLay Then KillFile strFileName
    
    FN = FreeFile()
    Open strFileName For Append As #FN

    Seq = 1
    For Each v In colWri
        strLine = v
        If bMarkSeq Then strLine = Seq & vbTab & strLine
        Print #FN, strLine
        Seq = Seq + 1
    Next v
    Close #FN
ErrExit:
    WriteFile = (Err = 0)
End Function

Public Function LikeEx(ByVal strExp, ByVal strCmp, Optional bCaseSensitive As Boolean = True) As Boolean
    
    If Not bCaseSensitive Then
        strExp = UCase(strExp)
        strCmp = UCase(strCmp)
    End If
    
    LikeEx = (strExp Like strCmp)
    
End Function

Public Function SubString(ByVal s As String, ByVal nFrom As Long, ByVal nTo As Long) As String
    
    Dim nLen As Long
    
    nLen = nTo - nFrom
    If nLen >= 0 Then nLen = nLen + 1
    
    If nLen > 0 Then SubString = Mid(s, nFrom, nLen)
    
End Function

Public Function SplitEx(ByVal s As String, ByVal Sep As String) As Collection
    Dim colRet As New Collection
    Dim I As Long
    Dim v
    
    If s <> "" Then
        v = Split(s, Sep)
        For I = 0 To UBound(v)
            colRet.Add v(I)
        Next I
    End If
    
    Set SplitEx = colRet
End Function

Public Function GetCell(shtX As Worksheet, ByVal r, ByVal C)
    GetCell = shtX.Cells(r, C)
End Function

'|434||fffd||b8fa|True|fffd||fffd||3b4||434||fffd||b8fa|False
Public Function SetCell(shtX As Worksheet, ByVal r, ByVal C, ByVal strCellVal) As Boolean
    Dim strOld As String
    
    strOld = GetCell(shtX, r, C)
    If strOld <> CStr(strCellVal) Then
        shtX.Cells(r, C) = strCellVal
        SetCell = True
    End If
End Function

Public Function IsNullRow(shtX As Worksheet, ByVal r As Long, Optional FromCol, Optional ToCol) As Boolean
    Dim nFromCol As Long
    Dim nToCol As Long
    
    nFromCol = IIf(IsMissing(FromCol), 1, CellCol2Int(FromCol))
    nToCol = IIf(IsMissing(ToCol), 3, CellCol2Int(ToCol))
    
    Dim C As Long
    Dim strCell As String
    
    IsNullRow = False
    For C = nFromCol To nToCol
        strCell = GetCell(shtX, r, C)
        If LeftMostMatch(strCell, "//") Then Exit For '|fffd||fffd||fffd||fffd||3aa||5e2||fffd||fffd||fffd||423||fffd||fffd||fffd||3aa||fffd||fffd||fffd||fffd|
        If strCell <> "" Then Exit Function
    Next C
    IsNullRow = True
End Function

Public Sub SetNullRow(shtX As Worksheet, ByVal r As Long, Optional FromCol, Optional ToCol)
    
    If IsMissing(FromCol) Then FromCol = "A"
    If IsMissing(ToCol) Then FromCol = "C"
    
    If Not IsNumeric(FromCol) Then FromCol = Asc(FromCol) - Asc("A") + 1
    If Not IsNumeric(ToCol) Then ToCol = Asc(ToCol) - Asc("A") + 1
    
    Dim C As Long
    
    For C = FromCol To ToCol
        Call SetCell(shtX, r, C, "")
    Next C

End Sub

Public Function Col2String(colX As Collection, Sep) As String
    
    Dim v
    Dim strRet As String
    
    strRet = ""
    For Each v In colX
        strRet = strRet & Sep & v
    Next v
    Col2String = Mid(strRet, Len(Sep) + 1)
    
End Function

Public Function Arr2String(arr As Variant, Sep) As String
    Dim I As Long
    Dim strRet As String
    
    For I = 0 To UBound(arr)
        strRet = strRet & Sep & arr(I)
    Next I
    Arr2String = Mid(strRet, Len(Sep) + 1)
End Function

Public Function FormatCellAddr(ByVal r, ByVal C)
    FormatCellAddr = "$" & CellCol2Str(C) & "$" & r
End Function

Public Function FormatRangeAddr(ByVal r0, ByVal r1, ByVal c0, ByVal c1)
    FormatRangeAddr = FormatCellAddr(r0, c0) & ":" & FormatCellAddr(r1, c1)
End Function

Public Function FormatCollection(ParamArray itm()) As Collection
    Dim colX As New Collection
    Dim I As Long
    
    For I = 0 To UBound(itm)
        colX.Add itm(I)
    Next I
    
    Set FormatCollection = colX
End Function

Public Sub SysErr(ByVal s As String)
    LimitMsgBoxText s
    MsgBox s, vbCritical, "Error"
End Sub

Public Sub SysWarn(ByVal s As String)
    LimitMsgBoxText s
    MsgBox s, vbExclamation, "Warning"
End Sub

Public Sub SysInfo(ByVal s As String)
    LimitMsgBoxText s
    MsgBox s, vbInformation, "Information"
End Sub

Public Function SysAsk(ByVal strAsk As String, Style As VbMsgBoxStyle) As VbMsgBoxResult
    LimitMsgBoxText strAsk
    SysAsk = MsgBox(strAsk, Style + vbQuestion, "Question?")
End Function

Public Sub UniqueCol(colX As Collection)
    Dim colTemp As New Collection
    Dim v

    On Error Resume Next
    For Each v In colX
        colTemp.Add v, "Key_" & v
    Next v
    Set colX = colTemp
    
    If Err <> 0 Then Err.Clear
End Sub

Public Sub KillFile(strFile As String)
    On Error Resume Next
    
    SetAttr strFile, vbNormal
    Kill strFile
End Sub

Public Function NewDir(ByVal strPath) As Boolean
    Dim dirAttr As VbFileAttribute
    
    dirAttr = vbNormal + vbDirectory + vbReadOnly
    If Dir(strPath, dirAttr) <> "" Then
        NewDir = True
        Exit Function
    End If
    
    Dim pos As Long
    Dim strtemp As String
    
    On Error Resume Next
    pos = InStr(1, strPath, "\")
    While pos > 0
        strtemp = Left(strPath, pos - 1)
        If Dir(strtemp, dirAttr) = "" Then MkDir strtemp
        pos = InStr(pos + 1, strPath, "\")
    Wend
    
    MkDir strPath
    
    NewDir = (Dir(strPath, dirAttr) <> "")
    If Err <> 0 Then Err.Clear
End Function

Public Function IsSameCol(ByVal Col1, ByVal Col2) As Boolean
    If IsNumeric(Col1) And IsNumeric(Col2) Then
        IsSameCol = (val(Col1) = val(Col2))
    ElseIf (Not IsNumeric(Col1)) And (Not IsNumeric(Col2)) Then
        IsSameCol = (Col1 = Col2)
    Else
        IsSameCol = (CellCol2Str(Col1) = CellCol2Str(Col2))
    End If
End Function

Public Function LookupSheet(ByVal strName As String, shtX As Worksheet) As Boolean
    strName = UCase(strName)
    LookupSheet = False
    For Each shtX In ThisWorkbook.Sheets
        If UCase(shtX.CodeName) = strName Then
            LookupSheet = True
            Exit For
        End If
    Next shtX
End Function

Public Sub HideSheetCol(shtX As Worksheet, ByVal col, Optional bHide As Boolean = True)
    Dim rng As Range

    col = CellCol2Str(col)
    Set rng = MakeRange(shtX, 1, col)
    
    If bHide Then
        If IsColHide(shtX, col) Then Exit Sub
    Else
        If Not IsColHide(shtX, col) Then Exit Sub
    End If
    
    rng.EntireColumn.ColumnWidth = IIf(bHide, 0, 8)
End Sub

Public Function IsColHide(shtX As Worksheet, ByVal col) As Boolean
    Dim rng As Range
    
    col = CellCol2Str(col)
    Set rng = MakeRange(shtX, 1, col)
    IsColHide = (rng.EntireColumn.ColumnWidth < 1)
End Function

Public Sub HideSheetRow(shtX As Worksheet, ByVal row, Optional bHide As Boolean = True)
    Dim rng As Range
    
    Set rng = MakeRange(shtX, row, "A")
    
    If bHide Then
        If IsRowHide(shtX, row) Then Exit Sub
    Else
        If Not IsRowHide(shtX, row) Then Exit Sub
    End If
    
    rng.EntireRow.RowHeight = IIf(bHide, 0, 11.25)
End Sub

Public Sub DelSheetRow(shtX As Worksheet, ByVal r0 As Long, Optional r1)
    If IsMissing(r1) Then r1 = r0
    MakeRange(shtX, r0, "A", r1, "A").EntireRow.Delete
End Sub

Public Sub InsertSheetRow(shtX As Worksheet, ByVal row As Long, Optional Num = 1)
    MakeRange(shtX, row, "A", row + Num - 1).EntireRow.Insert
End Sub

Public Function IsRowHide(shtX As Worksheet, ByVal row) As Boolean
    Dim rng As Range
    
    Set rng = MakeRange(shtX, row, "A")
    IsRowHide = (rng.EntireRow.RowHeight < 1)
End Function

Public Function LeftMostMatch(ByVal s As String, ByVal strLeft As String) As Boolean
    LeftMostMatch = Left(s, Len(strLeft)) = strLeft
End Function
Public Function RightMostMatch(ByVal s As String, ByVal strRight As String) As Boolean
    RightMostMatch = (Right(s, Len(strRight)) = strRight)
End Function

Public Function InCollection(colX As Collection, ByVal vItem, Optional bCaseSentive As Boolean = True) As Boolean
    Dim v
    Dim bOk As Boolean
    
    If (Not bCaseSentive) And (Not IsNumeric(vItem)) Then vItem = UCase(vItem)
    
    For Each v In colX
        If IsNumeric(v) And IsNumeric(vItem) Then
            bOk = (val(v) = val(vItem))
        Else
            If bCaseSentive Then
                bOk = (CStr(v) = CStr(vItem))
            Else
                bOk = (UCase(v) = CStr(vItem))
            End If
        End If
        If bOk Then Exit For
    Next v
    
    InCollection = bOk
End Function

Public Function InArray(ByVal vItem, ParamArray Choice() As Variant) As Boolean
    Dim I As Long
    
    InArray = False
    For I = 0 To UBound(Choice)
        If vItem = Choice(I) Then
            InArray = True
            Exit For
        End If
    Next I
End Function

Public Function IsSubSet(colFather As Collection, colChild As Collection) As Boolean
    Dim v
    
    IsSubSet = False
    For Each v In colChild
        If Not InCollection(colFather, v) Then Exit Function
    Next v
    IsSubSet = True
End Function

Public Function HasOneOf(ByVal s As String, ByVal strCharSet As String) As Boolean
    Dim I As Long
    For I = 1 To Len(strCharSet)
        If InStr(1, s, Mid(strCharSet, I, 1)) > 0 Then
            HasOneOf = True
            Exit For
        End If
    Next I
End Function

Public Function IsSymbol(ByVal strSymbol As String) As Boolean
    Dim I As Long
    Dim ch As String
    Dim bOk As Boolean
    
    strSymbol = UCase(strSymbol)
    
    ch = Left(strSymbol, 1)
    bOk = (ch = "_")
    If Not bOk Then bOk = (("A" <= ch) And (ch <= "Z"))
    If Not bOk Then Exit Function
    
    For I = 1 To Len(strSymbol)
        ch = Mid(strSymbol, I, 1)
        bOk = (ch = "_")
        If Not bOk Then bOk = (("0" <= ch) And (ch <= "9")) Or (("A" <= ch) And (ch <= "Z"))
        If Not bOk Then Exit Function
    Next I
    IsSymbol = True
End Function

Public Function MakeRange(shtX As Worksheet, r0, c0, Optional r1, Optional c1) As Range
    If IsMissing(r1) Then r1 = r0
    If IsMissing(c1) Then c1 = c0
    Set MakeRange = shtX.Range(shtX.Cells(r0, CellCol2Str(c0)), shtX.Cells(r1, CellCol2Str(c1)))
End Function

Public Function max(ByVal a, ByVal b)
    max = IIf(a > b, a, b)
End Function

Public Function min(ByVal a, ByVal b)
    min = IIf(a < b, a, b)
End Function

Public Function LenEx(ByVal s As String) As Long
    Dim I As Long
    Dim nNum As Long
    Dim ch As String
    
    For I = 1 To Len(s)
        ch = Mid(s, I, 1)
        nNum = nNum + 1
        If Asc(ch) < 0 Then nNum = nNum + 1
    Next I
    
    LenEx = nNum
    
End Function

Public Function HasBigChar(ByVal s As String) As Boolean
    Dim I As Long
    Dim ch As String
    
    HasBigChar = False
    For I = 1 To Len(s)
        ch = Mid(s, I, 1)
        If Asc(ch) < 0 Then
            HasBigChar = True
            Exit For
        End If
    Next I
End Function

Public Function IsMacroStr(ByVal s As String) As Boolean
    Dim I As Long
    Dim nAscII As Long
    Dim bOk As Boolean
    
    IsMacroStr = False
    s = UCase(Trim(s))
    If s = "" Then Exit Function
        
    nAscII = Asc(Left(s, 1))
    If Between(nAscII, Asc("A"), Asc("Z")) Or (nAscII = Asc("_")) Then   '|fffd||fffd||fffd||fffd||138||fffd||fffd||fffd||fffd||fffd||fffd|A~Z|fffd||fffd|_|fffd||fffd|
        For I = 2 To Len(s) '|fffd||fffd||fffd||fffd||fffd||5b7||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: A~Z, 0~9, _ |fffd||fffd||fffd||5b7||fffd|
            nAscII = Asc(Mid(s, I, 1))
            bOk = Between(nAscII, Asc("A"), Asc("Z"))
            If Not bOk Then bOk = Between(nAscII, Asc("0"), Asc("9"))
            If Not bOk Then bOk = (nAscII = Asc("_"))
            If Not bOk Then Exit Function
        Next I
        IsMacroStr = True
    End If
End Function

Public Function GetWorkSheet(wb As Workbook, ByVal strSheetName As String) As Worksheet
    Dim shtX  As Worksheet
    
    strSheetName = UCase(strSheetName)
    For Each shtX In wb.Sheets
        If (UCase(shtX.CodeName) = strSheetName) Or (UCase(shtX.name) = strSheetName) Then
            Set GetWorkSheet = shtX
            Exit For
        End If
    Next shtX
End Function

Public Sub AppendCollection(colOld As Collection, colAppend As Collection)
    Dim v
    
    For Each v In colAppend
        colOld.Add v
    Next v
End Sub

Public Sub CfmArray(v As Variant)
    Dim vOld
    If Not IsArray(v) Then
        vOld = v
        ReDim v(0)
        v(0) = vOld
    End If
End Sub

Public Sub Exchange(a, b)
    Dim tmp
    
    tmp = a
    a = b
    b = tmp
End Sub

Public Sub ShowInfo(colInfo As Collection, ByVal strInfo As String, Optional strFile)
    Dim strWri As String
    
    If Not IsMissing(strFile) Then strWri = ThisWorkbook.Path & "\" & strFile
    If strWri = "" Then
        SysInfo strInfo & vbCrLf & Col2String(colInfo, vbCrLf)
    Else
        strInfo = strInfo & vbCrLf & "The error information has been record in " & vbCrLf & strWri
        WriteFile strWri, colInfo, True, True
        SysInfo strInfo
        Shell "notepad.exe " & strWri, vbMaximizedFocus
    End If
End Sub

Private Sub LimitMsgBoxText(s As String)
    Const nMaxLen As Long = 250
    If Len(s) > nMaxLen Then s = Left(s, nMaxLen) & "..."
End Sub

Public Function OpenWorkBook(ByVal strFileName As String) As Workbook
    On Error GoTo ErrExit
    Dim bookRead As Workbook
    Set bookRead = Workbooks.Open(FileName:=strFileName)
    If Err = 0 Then bookRead.RunAutoMacros xlAutoOpen + xlAutoActivate
    
ErrExit:
    If Err = 0 Then
        Set OpenWorkBook = bookRead
    Else
        Set OpenWorkBook = Nothing
    End If
End Function

Public Sub CloseWorkBook(book As Workbook, bSaveChanges As Boolean)
    book.Close saveChanges:=bSaveChanges
End Sub

Public Function GetRowStr(shtX As Worksheet, ByVal row As Long, ByVal ColFrom, ByVal ColTo) As String
    AssertEx (Len(ColFrom) = 1)
    AssertEx (Len(ColTo) = 1)
    
    Dim col As Long
    Dim s As String
    
    For col = Asc(ColFrom) To Asc(ColTo)
        s = s & vbTab & GetCell(shtX, row, Chr(col))
    Next col
    s = Mid(s, 2)
    GetRowStr = s
End Function

Public Function GetRowHeight(shtX As Worksheet, ByVal row As Long) As Variant
    GetRowHeight = MakeRange(shtX, row, "A").EntireRow.RowHeight
End Function

Public Sub SetRowHeight(shtX As Worksheet, ByVal row As Long, ByVal lHeight As Variant)
    MakeRange(shtX, row, "A").EntireRow.RowHeight = lHeight
End Sub

Public Sub SetColWidth(shtX As Worksheet, ByVal col, ByVal lWidth)
    MakeRange(shtX, 1, col).EntireColumn.ColumnWidth = lWidth
End Sub

Public Function GetColWidth(shtX As Worksheet, ByVal col) As Variant
    GetColWidth = MakeRange(shtX, 1, col).EntireColumn.ColumnWidth
End Function

Public Function CountSubStrNum(ByVal s As String, ByVal strSubStr As String) As Long
    Dim Num As Long
    Dim pos As Long
    Dim nSubStrLen As String
    
    nSubStrLen = Len(strSubStr)
    pos = InStr(1, s, strSubStr)
    
    While pos > 0
        Num = Num + 1
        pos = InStr(pos + nSubStrLen, s, strSubStr)
    Wend
    CountSubStrNum = Num
End Function

Public Sub AssertEx(Optional bCondition As Boolean = False)
    Debug.Assert (bCondition)
End Sub

'|fffd||436||fffd|x|fffd||1f7||fffd||fffd||fffd||fffd|[a, b]|5ae||fffd||fffd|
Public Function Between(x, a, b) As Boolean
    Between = ((a <= x) And (x <= b))
End Function

'|fffd||fffd||fffd||b8fa|1~256
Function CellCol2Str(ByVal C) As String
    Dim n0 As String
    Dim n1 As String
    
    If Not IsNumeric(C) Then
        CellCol2Str = UCase(C)
        Exit Function
    End If
    
    C = C - 1
    AssertEx Between(C, 0, 255)
    n0 = Chr((C Mod 26) + Asc("A"))
    C = C \ 26
    If C > 0 Then n1 = Chr(C + Asc("A") - 1)
    
    CellCol2Str = n1 & n0
End Function

'|fffd||fffd||fffd||fffd||5b5||fffd||fffd|[1, 256]
Function CellCol2Int(C) As Long
    If IsNumeric(C) Then
        CellCol2Int = val(C)
        Exit Function
    End If

    C = UCase(C)
    
    Dim d0 As Long
    Dim d1 As Long
    
    If Len(C) = 1 Then
        d0 = Asc(Left(C, 1)) - Asc("A")
    ElseIf Len(C) = 2 Then
        d1 = Asc(Left(C, 1)) - Asc("A") + 1
        d0 = Asc(Mid(C, 2)) - Asc("A")
    End If
    
    CellCol2Int = (d1 * 26 + d0) + 1
End Function

Public Sub FreeMem(v)
    If IsArray(v) Then Erase v
End Sub

Public Function GetSysUserName() As String
    Dim strName As String * 256
    Dim pos As Long
    
    GetUserName strName, Len(strName)
    pos = InStr(1, strName, Chr(0))
    If pos > 0 Then
        GetSysUserName = Left(strName, pos - 1)
    Else
        GetSysUserName = strName
    End If
End Function

Public Function MakeFileName(ByVal strPath, ByVal strName) As String
    If Right(strPath, 1) <> "\" Then strPath = strPath & "\"
    Call CfmDirExist(strPath)
    MakeFileName = strPath & strName
End Function

Public Function CfmDirExist(ByVal strPath As String) As Boolean
    Dim nPos As Long
    Dim strSubDir As String
    Dim ALL_DIR_ATTR As VbFileAttribute
    
    ALL_DIR_ATTR = vbHidden + vbNormal + vbReadOnly + vbSystem + vbDirectory
    
    strPath = Trim(strPath)
    If Right(strPath, 1) = "\" Then strPath = Left(strPath, Len(strPath) - 1)
    If Right(strPath, 1) = "$" Then strPath = strPath & "\"
    If Right(strPath, 1) = ":" Then strPath = strPath & "\"

    On Error GoTo ErrExit
    If Dir(strPath, ALL_DIR_ATTR) = "" Then
        nPos = IIf((Left(strPath, 2) = "\\") And (InStr(1, strPath, "$\") > 0), InStr(1, strPath, "$\") + 1, 3)
        Do
            nPos = InStr(nPos + 1, strPath, "\")
            If nPos = 0 Then Exit Do
            strSubDir = Left(strPath, nPos - 1)
            If Dir(strSubDir, ALL_DIR_ATTR) = "" Then MkDir strSubDir
        Loop
        MkDir strPath
    End If
    
ErrExit:
    CfmDirExist = (Err = 0)
End Function

Public Function ShellEx(ByVal strFile As String, Optional vError) As Boolean
    Dim nErrCode As Long
    Dim bOk As Boolean
    Dim s As String
    
    nErrCode = ShellExecute(0, "open", strFile, "", "", SW_SHOWNORMAL)
    bOk = (nErrCode > 32)
    
    If (Not bOk) And (Not IsMissing(vError)) Then
        Select Case nErrCode
            Case 0
                s = "The operating system is out of memory or resources. "
            Case 2
                s = "The specified file was not found. "
            Case 3
                s = "The specified path was not found. "
            Case 11
                s = "The .exe file is invalid (non-Win32? .exe or error in .exe image). "
            Case 5
                s = "The operating system denied access to the specified file.  "
            Case 27
                s = "The file name association is incomplete or invalid. "
            Case 30
                s = "The DDE transaction could not be completed because other DDE transactions were being processed. "
            Case 29
                s = "The DDE transaction failed. "
            Case 28
                s = "The DDE transaction could not be completed because the request timed out. "
            Case 32
                s = "The specified dynamic-link library was not found.  "
            Case 2
                s = "The specified file was not found.  "
            Case 31
                s = "There is no application associated with the given file name extension. This error will also be returned if you attempt to print a file that is not printable. "
            Case 8
                s = "There was not enough memory to complete the operation. "
            Case 3
                s = "The specified path was not found. "
            Case 26
                s = "A sharing violation occurred. "
        End Select
        
        vError = s
    End If
    
    ShellEx = bOk
End Function

Public Function CloneWorkBook(wbFrom As Workbook, ByVal strSaveFile As String) As Workbook
    Dim wbCopy As Workbook
    
    On Error Resume Next
    wbFrom.SaveCopyAs strSaveFile
    If Err <> 0 Then Exit Function
    
    Set wbCopy = Workbooks.Open(strSaveFile)
    If Err <> 0 Then Exit Function
    If wbCopy Is Nothing Then Exit Function
    
    wbCopy.RunAutoMacros xlAutoOpen
    Set CloneWorkBook = wbCopy
End Function

Public Sub ShowSheet(sh As Worksheet, bShow As Boolean)
    Dim eVis As XlSheetVisibility
    Dim bPreSaved As Boolean
    
    eVis = IIf(bShow, xlSheetVisible, xlSheetHidden)
    If (sh.Visible <> eVis) Then
        bPreSaved = ThisWorkbook.Saved
        sh.Visible = eVis
        ThisWorkbook.Saved = bPreSaved
    End If
    If bShow Then sh.Activate
End Sub

Public Sub writeSheet(sh As Worksheet, r As Long, nFromCol As Long, ParamArray cellVal() As Variant)
    Dim C As Long
    
    For C = 0 To UBound(cellVal)
        SetCell sh, r, C + nFromCol, cellVal(C)
    Next C
End Sub

'|fffd||fffd||fffd||fffd||1f7||fffd||fffd||1ff||fffd||13f||bc|
Public Function IsBlankPath(ByVal strPath As String) As Boolean
    Dim strDir As String
    
    IsBlankPath = True
    
    strDir = Dir(strPath & "\*.*", vbDirectory + vbHidden + vbNormal + vbReadOnly + vbSystem)
    Do While strDir <> ""
        If (strDir <> ".") And (strDir <> "..") Then
            IsBlankPath = False
            Exit Do
        End If
        strDir = Dir()
    Loop
End Function

Public Function IsValidPath(ByVal strPath) As Boolean
    Dim strDrv As String
    Dim pos As Long
    Dim strInvalidCh As String
    Dim I As Long
    
    If strPath = "" Then Exit Function
    strInvalidCh = "/:*?<>|" & """"
    
    On Error Resume Next
    If Dir(strPath, vbDirectory) <> "" Then
        IsValidPath = True
        Exit Function
    End If
    Err.Clear
    
    pos = InStr(1, strPath, ":\")
    If pos > 0 Then
        strDrv = Left(strPath, pos + 1)
        If Dir(strDrv, vbDirectory) = "" Then Exit Function
        If Err <> 0 Then Exit Function
        
        strPath = Mid(strPath, pos + 2)
        For I = 1 To Len(strInvalidCh)
            If InStr(1, strPath, Mid(strInvalidCh, I, 1)) > 0 Then
                IsValidPath = False
                Exit Function
            End If
        Next I
        IsValidPath = True
    End If
End Function
'|fffd||fffd||1bd||328||fffd||fffd|M2000|fffd||4ff||fffd||fffd||135||fffd||fffd||435||132||fffd||fffd||fffd||5b8||fffd||affd||fffd||fffd||fffd||fffd||fffd||fffd|M2000|fffd||13d||4ff||fffd||fffd||135||fffd||fffd||fffd|
Public Function CopyRosaM2000(shtSrc As Worksheet, shtDst As Worksheet, dstStartRow As Long, objNum As Long, srcStartRow As Long)

    InsertSheetRow shtDst, dstStartRow, objNum
    MakeRange(shtSrc, srcStartRow, "A", srcStartRow + objNum - 1).EntireRow.Copy
    MakeRange(shtDst, dstStartRow, "A", dstStartRow + objNum - 1).PasteSpecial
    
End Function
Public Function CopySheet(shtFrom As Worksheet, shtTo As Worksheet)
    shtTo.UsedRange.EntireRow.Delete
    
    shtFrom.UsedRange.Copy
    shtTo.Paste
    
    Dim r, C
    
    '|fffd||fffd||fffd||fffd||fffd||438||7e1||fffd||fffd||43f||fffd|
    For C = 1 To shtFrom.UsedRange.Columns.count
        SetColWidth shtTo, C, GetColWidth(shtFrom, C)
    Next C
    
    shtTo.name = shtFrom.name
End Function

Public Function CompileMessage(ByVal szString As Long) As Boolean
    CompileMessage = True
End Function
     
Public Function CompileStatus(ByVal szString As Long) As Boolean
    CompileStatus = True
End Function

Public Function ColString2Num(ByVal colString As String) As Long
    ColString2Num = Asc(UCase(colString)) - Asc("A") + 1
End Function

Sub copyENodeBNameId()
    Dim SheetCount As Long
    Dim iIndext As Long
    Dim jIndext As Long
    Dim iRow As Long
    Dim rowCount As Long
    Dim bFind As Boolean
    Dim sheetCur  As Worksheet
    Dim sheetEquip  As Worksheet
    SheetCount = ThisWorkbook.Sheets.count
    Set sheetEquip = ThisWorkbook.Worksheets("Equipment")
   
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|sheet
    For iIndext = 4 To SheetCount
        Set sheetCur = ThisWorkbook.Worksheets(iIndext)
        If sheetCur.Cells(3, 1).value = "eNodeBName" Then
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|enodeb name
            iRow = 4
            While sheetEquip.Cells(iRow, 1).value <> ""
                bFind = False
                rowCount = 1
                While sheetCur.Cells(rowCount, 1).value <> ""
                    rowCount = rowCount + 1
                Wend
                For jIndext = 4 To rowCount - 1
                     
                    '|fffd||4b5||fffd|enodb name
                    If sheetEquip.Cells(iRow, 1).value & "" = sheetCur.Cells(jIndext, 1).value & "" Then
                        bFind = True
                    End If
                Next
                If bFind = False Then
                    sheetCur.Cells(rowCount, 1).value = sheetEquip.Cells(iRow, 1).value
                    sheetCur.Cells(rowCount, 2).value = sheetEquip.Cells(iRow, 2).value
                End If
                iRow = iRow + 1
            Wend
        End If
    Next
           
End Sub

Sub DisplayMessageOnStatusbar()
    Application.DisplayStatusBar = True '|fffd||fffd||2be||5f4||32c||fffd||fffd|
    Application.StatusBar = "Running,please wait......" '|5f4||32c||fffd||fffd||fffd||fffd||2be||fffd||fffd||3e2|
    Application.Cursor = xlWait
End Sub

Public Sub DisplayMessageOnStatusbaring(Num As Long)
    Application.StatusBar = "Running,please wait......Finish " & Num & "%!" '|5f4||32c||fffd||fffd||fffd||fffd||2be||fffd||fffd||3e2|
End Sub

Public Sub EndDisplayMessageOnStatusbar()
    Application.Cursor = xlDefault
    Application.StatusBar = "Finished."  '|5f4||32c||fffd||fffd||fffd||fffd||2be||fffd||fffd||3e2|
End Sub

Public Sub ReturnStatusbaring()
    Application.StatusBar = "Ready." '|5f4||32c||fffd||fffd||fffd||5b8||fffd||fffd||fffd||fffd||fffd|
End Sub

Public Sub ClosingProStatusbaring()
    Application.StatusBar = "Closing the application|fffd||fffd|please wait......" '|5f4||32c||fffd||fffd||fffd||5b8||fffd||fffd||fffd||fffd||fffd|
End Sub

'|5f0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4e1||fffd|Base Station Transport Data|fffd||fffd||4b3||fffd||fffd|*Site Template|fffd||fffd||fffd||43a||fffd||461||5b5||fffd||134||fffd||fffd||fffd|
Sub addTemplate()
    Dim neType As String
    neType = getNeType()
    If neType = "LTE" Then
        Load LteTemplateForm
        LteTemplateForm.Show
    Else
        Load NoneLteTemplateForm
        NoneLteTemplateForm.Show
    End If
End Sub

'|fffd||fffd||5b8||fffd||fffd|sheet|4b3||fffd||fffd||5b8||fffd||fffd||fffd||423||fffd||fffd||fffd||fffd||fffd||5b8||fffd||fffd||fffd||423||fffd||fffd||fffd||fffd||fffd||fffd||43a||fffd|,|368||fffd||fffd|attrName|fffd||fffd|MocName|fffd||fffd||221||fffd||fffd|
Public Function getColNum(sheetName As String, recordRow As Long, attrName As String, mocName As String) As Long
    On Error Resume Next
    Dim m_colNum As Long
    Dim m_rowNum As Long
    Dim ColName As String
    Dim colGroupName As String
    
    Dim flag As Boolean
    Dim MAPPINGDEF As Worksheet
    Dim ws As Worksheet
    
    Set MAPPINGDEF = ThisWorkbook.Worksheets("MAPPING DEF")
    flag = False
    getColNum = -1
    For m_rowNum = 2 To MAPPINGDEF.Range("a65536").End(xlUp).row
        If UCase(attrName) = UCase(MAPPINGDEF.Cells(m_rowNum, 5).value) _
           And UCase(sheetName) = UCase(MAPPINGDEF.Cells(m_rowNum, 1).value) _
           And UCase(mocName) = UCase(MAPPINGDEF.Cells(m_rowNum, 4).value) Then
            ColName = MAPPINGDEF.Cells(m_rowNum, 3).value
            colGroupName = MAPPINGDEF.Cells(m_rowNum, 2).value
            flag = True
            Exit For
        End If
    Next
    If flag = True Then
        Set ws = ThisWorkbook.Worksheets(sheetName)
        For m_colNum = 1 To ws.Range("IV" + CStr(recordRow)).End(xlToLeft).column
            If get_GroupName(sheetName, m_colNum) = colGroupName Then
                If GetDesStr(ColName) = GetDesStr(ws.Cells(recordRow, m_colNum).value) Then
                    getColNum = m_colNum
                    Exit For
                End If
            End If
        Next
    End If
End Function
Public Function GetMainSheetName() As String
       On Error Resume Next
        Dim name As String
        Dim RowNum As Long
        Dim sheetDef As Worksheet
        Set sheetDef = ThisWorkbook.Worksheets("SHEET DEF")
        For RowNum = 1 To sheetDef.Range("a65536").End(xlUp).row
            If sheetDef.Cells(RowNum, 2).value = "MAIN" Then
                name = sheetDef.Cells(RowNum, 1).value
                Exit For
            End If
        Next
        GetMainSheetName = name
End Function

Function GetCommonSheetName() As String
         On Error Resume Next
        Dim name As String
        Dim RowNum As Long
        Dim sheetDef As Worksheet
        Set sheetDef = ThisWorkbook.Worksheets("SHEET DEF")
        
        For RowNum = 1 To sheetDef.Range("a65536").End(xlUp).row
            If sheetDef.Cells(RowNum, 2).value = "COMMON" Then
                name = sheetDef.Cells(RowNum, 1).value
                Exit For
            End If
        Next
        GetCommonSheetName = name
End Function

'|fffd||fffd||fffd||fffd||368||4b3||221||fffd||fffd|Group name
Public Function get_GroupName(sheetName As String, colNum As Long) As String
        Dim index As Long
        Dim ws As Worksheet
        Set ws = ThisWorkbook.Worksheets(sheetName)
        For index = colNum To 1 Step -1
            If Not isEmpty(ws.Cells(1, index).value) Then
                get_GroupName = ws.Cells(1, index).value
                Exit Function
            End If
        Next
        get_GroupName = ""
End Function

'|fffd||fffd||fffd||fffd||368||4b3||221||fffd||fffd|Colum name
Public Function get_ColumnName(ByVal sheetName As String, colNum As Long) As String
        Dim index As Long
        get_ColumnName = ThisWorkbook.Worksheets(sheetName).Cells(2, colNum)
End Function

Public Function isNum(contedType As String) As Boolean
    If contedType = "Integer" Or contedType = "UInteger" Then
        isNum = True
    Else
        isNum = False
    End If
End Function

Public Sub clearXLGray()
    Dim index, cloumIndex, commIndex, commCloumIndex As Long
    Dim worksh, sheetDef As New Worksheet
    Set sheetDef = ThisWorkbook.Worksheets("SHEET DEF")
    For index = 2 To sheetDef.Range("a65536").End(xlUp).row
            Set worksh = ThisWorkbook.Worksheets(sheetDef.Cells(index, 1).value)
            If sheetDef.Cells(index, 2) = "COMMON" Then
                    For commIndex = 1 To worksh.Range("a65536").End(xlUp).row
                            For commCloumIndex = 1 To worksh.Range("IV" + CStr(commIndex)).End(xlToLeft).column
                                If worksh.Cells(commIndex, commCloumIndex).Interior.colorIndex = 16 And _
                                     worksh.Cells(commIndex, commCloumIndex).Interior.Pattern = xlGray16 Then
                                        worksh.Cells(commIndex, commCloumIndex).Interior.colorIndex = xlNone
                                        worksh.Cells(commIndex, commCloumIndex).Interior.Pattern = xlNone
                                        'worksh.Cells(commIndex, commCloumIndex).Validation.ShowInput = True
                                End If
                            Next
                    Next
            ElseIf "Pattern" = sheetDef.Cells(index, 2) Then
                    
            Else
                    For cloumIndex = 1 To worksh.Range("IV" + CStr(3)).End(xlToLeft).column
                        If worksh.Cells(3, cloumIndex).Interior.colorIndex = 16 And _
                             worksh.Cells(3, cloumIndex).Interior.Pattern = xlGray16 Then
                                worksh.Cells(3, cloumIndex).Interior.colorIndex = xlNone
                                worksh.Cells(3, cloumIndex).Interior.Pattern = xlNone
                                'worksh.Cells(3, cloumIndex).Validation.ShowInput = True
                        End If
                    Next
            End If
    Next
    ThisWorkbook.Save
End Sub

Public Function isPatternSheet(sheetName As String) As Boolean
    Dim m_rowNum As Long
    Dim sheetDef As Worksheet
    Set sheetDef = ThisWorkbook.Worksheets("SHEET DEF")
    For m_rowNum = 2 To sheetDef.Range("a65536").End(xlUp).row
        If sheetName = sheetDef.Cells(m_rowNum, 1).value Then
            If sheetDef.Cells(m_rowNum, 2).value = "Pattern" Then
                isPatternSheet = True
            Else
                isPatternSheet = False
            End If
            Exit For
        End If
    Next
End Function

Sub clearStyles()
        Dim s As Style
        For Each s In ThisWorkbook.Styles
            If Not s.BuiltIn Then
                'Debug.Print s.Name
                Debug.Print s.name
                s.Delete '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||27e||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd|
            End If
        Next
End Sub

Sub deleteWorkbookNames()
    Dim n As name
    For Each n In ThisWorkbook.Names
       Debug.Print n.index
        n.Delete
    Next
End Sub

Public Function getKeyValueCollection(ByVal col As Collection) As Collection
    Dim value As Variant
    Dim keyValueCollection As New Collection
    For Each value In col
        keyValueCollection.Add Item:=value, key:=value
    Next value
    Set getKeyValueCollection = keyValueCollection
End Function

Sub setBorders(ByRef certainRange As Range)
    On Error Resume Next
    certainRange.Borders(xlEdgeLeft).LineStyle = xlContinuous
    certainRange.Borders(xlEdgeTop).LineStyle = xlContinuous
    certainRange.Borders(xlEdgeBottom).LineStyle = xlContinuous
    certainRange.Borders(xlEdgeRight).LineStyle = xlContinuous
    certainRange.Borders(xlInsideVertical).LineStyle = xlContinuous
    certainRange.Borders(xlInsideHorizontal).LineStyle = xlContinuous
    certainRange.Borders.LineStyle = xlContinuous
End Sub

Function calculateColumnName(ByRef columnNumber As Long) As String
    Dim myRange As Range
    Set myRange = Cells(1, columnNumber)    '|5b8||fffd||fffd||fffd||fffd||fffd||431||fffd||175||fffd||fffd||fffd||fffd||2d65||52a||fffd||fffd|
    calculateColumnName = Left(myRange.Range("A1").address(True, False), _
        InStr(1, myRange.Range("A1").address(True, False), "$", 1) - 1)
    Set myRange = Nothing
End Function

Sub changeAlert(ByRef flag As Boolean)
    Application.DisplayAlerts = flag
    Application.ScreenUpdating = flag
End Sub

Sub destroyMenuStatus()
    With Application
        .CommandBars("Row").Reset
        .CommandBars("Column").Reset
        .CommandBars("Cell").Reset
        .CommandBars("Ply").Reset
    End With
End Sub
Sub insertAndDeleteControl(ByRef flag As Boolean)
    On Error Resume Next
    With Application
        With .CommandBars("Row")
            .FindControl(ID:=3183).Enabled = flag '|fffd||fffd||fffd||fffd|
            .FindControl(ID:=296).Enabled = flag '|fffd||fffd|
            .FindControl(ID:=293).Enabled = flag '|27e||fffd||fffd|
        End With
        With .CommandBars("Column")
            .FindControl(ID:=3183).Enabled = flag '|fffd||fffd||fffd||fffd|
            .FindControl(ID:=297).Enabled = flag '|fffd||fffd|
            .FindControl(ID:=294).Enabled = flag '|27e||fffd||fffd|
        End With
        With .CommandBars("Cell")
            .FindControl(ID:=3181).Enabled = flag '|fffd||fffd||fffd||fffd|
            .FindControl(ID:=295).Enabled = flag '|fffd||fffd|
            .FindControl(ID:=292).Enabled = flag '|27e||fffd||fffd|
        End With
    End With
End Sub

Sub initMenuStatus(sh As Worksheet)
    If isBoardStyleSheet(sh) Then
        Call insertAndDeleteControl(False)
    ElseIf sh.name = getResByKey("Temp Sheet") Then
        Call initTempSheetControl(False)
    Else
        Call initTempSheetControl(True)
        Call insertAndDeleteControl(True)
    End If
End Sub

Function getSheetType(sheetName As String) As String
    Dim m_rowNum As Long
    Dim sheetDef As Worksheet
    Set sheetDef = ThisWorkbook.Worksheets("SHEET DEF")
    For m_rowNum = 2 To sheetDef.Range("a65536").End(xlUp).row
        If sheetName = sheetDef.Cells(m_rowNum, 1).value Then
            getSheetType = UCase(sheetDef.Cells(m_rowNum, 2).value)
            Exit Function
        End If
    Next
    getSheetType = ""
End Function

Public Function findCertainValRowNumberByTwoKeys(ByRef ws As Worksheet, ByVal columnLetter1 As String, ByRef cellVal1 As String, _
    ByVal columnLetter2 As String, ByRef cellVal2 As String, Optional ByVal startRow As Long = 1)
    
    Dim currentCellVal1 As String
    Dim currentCellVal2 As String
    Dim maxRowNumber As Long, k As Long
    maxRowNumber = ws.UsedRange.rows.count
    findCertainValRowNumberByTwoKeys = -1
    For k = startRow To maxRowNumber
        currentCellVal1 = ws.Range(columnLetter1 & k).value
        currentCellVal2 = ws.Range(columnLetter2 & k).value
        If currentCellVal1 = cellVal1 And currentCellVal2 = cellVal2 Then
            findCertainValRowNumberByTwoKeys = k
            Exit For
        End If
    Next
End Function

'|fffd||631||fffd||fffd||fffd||5e2||fffd||fffd||2e2||fffd||a3||fffd||fffd||fffd||7f2||fffd||fffd||fffd||27e||fffd||fffd||fffd||435||fffd||427||fffd||fffd|
Public Sub refreshComment(ByVal myRange As Range)
    On Error Resume Next
    Dim Cell As Range
    For Each Cell In myRange
        Cell.Comment.Shape.TextFrame.AutoSize = False
    Next
End Sub
Attribute VB_Name = "initDefaultDataSub"
Private valideCollection As Collection

Sub initInnerValideDef()
        If valideCollection Is Nothing Then
            Set valideCollection = New Collection
        End If
        Dim rowCount As Long
        Dim innerSheet As Worksheet
        Set innerSheet = ThisWorkbook.Worksheets("InnerValideDef")
        rowCount = innerSheet.Range("a65536").End(xlUp).row
        Dim index As Long
        Dim valideDef As CValideDef
        
        For index = 2 To rowCount
                Set valideDef = New CValideDef
                valideDef.sheetName = innerSheet.Cells(index, 1).value
                valideDef.groupName = innerSheet.Cells(index, 2).value
                valideDef.columnName = innerSheet.Cells(index, 3).value
                valideDef.row = index
                valideDef.column = innerSheet.Range("IV" + CStr(index)).End(xlToLeft).column
                Call valideCollection.Add(valideDef, valideDef.getKey)
        Next
End Sub

Function getInnerValideDef(key As String) As CValideDef
        If valideCollection Is Nothing Then
            Call initInnerValideDef
        End If
        Dim isExist As Boolean
        isExist = Contains(valideCollection, key)
        If isExist Then
                Set getInnerValideDef = valideCollection.Item(key)
        End If
End Function

Function modiflyInnerValideDef(sheetName As String, groupName As String, columnName As String, value As String, ByRef valideDef As CValideDef)
        Dim innerSheet As Worksheet
        Dim rowRange As Range
        Set innerSheet = ThisWorkbook.Worksheets("InnerValideDef")
        Set rowRange = innerSheet.rows(valideDef.row)
        rowRange.EntireRow.ClearContents
        rowRange.Cells(1, 1).value = sheetName
        rowRange.Cells(1, 2).value = groupName
        rowRange.Cells(1, 3).value = columnName
        
        Dim values() As String
        Dim column As Long
        Dim index As Long
        values = Split(value, ",")
        column = 3
        For index = LBound(values) To UBound(values)
                column = column + 1
                rowRange.Cells(1, column).value = values(index)
        Next
        valideDef.column = column
        Call valideCollection.Remove(valideDef.getKey)
        Call valideCollection.Add(valideDef, valideDef.getKey)
        
End Function

Function addInnerValideDef(sheetName As String, groupName As String, columnName As String, value As String) As CValideDef
        Dim key As String
        key = sheetName + "," + groupName + "," + columnName
        Dim isExist As Boolean
        isExist = Contains(valideCollection, key)
        If isExist Then
            Exit Function
        End If
        Dim innerSheet As Worksheet
        Set innerSheet = ThisWorkbook.Worksheets("InnerValideDef")
        Dim row As Long
        Dim column As Long
        Dim index As Long
        Dim values() As String
        
        values = Split(value, ",")
        row = innerSheet.Range("a65536").End(xlUp).row + 1
        column = 3
        innerSheet.Cells(row, 1).value = sheetName
        innerSheet.Cells(row, 2).value = groupName
        innerSheet.Cells(row, 3).value = columnName
        
        For index = LBound(values) To UBound(values)
                column = column + 1
                innerSheet.Cells(row, column).value = values(index)
        Next
        
        Dim valideDef As CValideDef
        Set valideDef = New CValideDef
        valideDef.sheetName = sheetName
        valideDef.groupName = groupName
        valideDef.columnName = columnName
        valideDef.row = row
        valideDef.column = column
        Call valideCollection.Add(valideDef, valideDef.getKey)
        Set addInnerValideDef = valideDef
End Function






' InQuest injected base64 decoded content
' BzYR
' y(^z
' t)^j
' kjw!
' z{Oj
' Zr+r
' )e"p
' y(^z
' }(^z
' BzYE
' j{g=
' q/z{
' Zr+r
' Zr+r
' Zr+r
' `yh^
' "phj

INQUEST-PP=macro
