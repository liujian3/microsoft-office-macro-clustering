Attribute VB_Name = "Mdl_auto_open_Smpl190918"


Option Explicit
Dim MS As Worksheet

Dim tmOn As Date
Dim tmOnPr As Date




Sub save10min()
   On Error Resume Next
    Dim rc As Variant
    MS.Activate
    
    Dim intrvl As Integer
    intrvl = 30 '|fffd||fffd||fffd|v|fffd||3cd|X|fffd||fffd||fffd||fffd||fffd||fffd|
    
    Application.DisplayAlerts = True
    rc = MsgBox(intrvl & "|fffd||fffd||fffd||fffd||fffd||255||6d1||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd||6d1||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbYesNo, "|fffd|m|fffd|F")
    If rc = vbYes Then
        ActiveWorkbook.Save
    End If
    tmOnPr = tmOn
    tmOn = Now + TimeSerial(0, intrvl, 0)
    Application.OnTime tmOn, "save10min"
End Sub


Attribute VB_Name = "Mdl|fffd||590||fffd||fffd||690|A"
Option Explicit



Public Function CV_Range_to_Variant(r1 As Range, Optional NData As Integer, Optional NR As Long, Optional nC As Long) As Variant

   '|fffd||348||353||fffd||fffd||312|l|fffd||fffd||fffd|Variant|fffd||242||fffd||fffd||fffd|
   'Variant|fffd||fffd|1|fffd||fffd||242||202||fffd|
    'ReDim CV_RANGE_to_Array(N)
    'Dim tV() As Double
    Dim tV() As Variant
    
    'Dim NR As Integer, NC As Integer

    Dim mycell As Range
    
    NR = r1.Rows.Count
    nC = r1.Columns.Count
    ReDim tV((NR) * (nC))
    Dim i As Integer
    i = 0
    'Set myCell = R1
    Dim WS As Worksheet
    Set WS = r1.Worksheet
    Dim CI As Integer, RI As Integer
    
    For Each mycell In r1
   ' For Each myCell
        RI = mycell.Row: CI = mycell.Column
       ' tV(i) = myCell.Value
       tV(i) = WS.Range(WS.Cells(RI, CI), WS.Cells(RI, CI)).Value
        i = i + 1
    Next
    NData = i
    CV_Range_to_Variant = tV
End Function
Function convToKataStr(tS As String) As String
 'Kata|fffd|l|fffd||255||fffd||fffd||fffd||fffd||fffd||fffd||3ca||fffd||fffd||fffd||fffd||fffd|@|fffd|M|fffd||fffd||fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|@|fffd|M|fffd||fffd||fffd|V|fffd|A|fffd||fffd||fffd||fffd|
 '13|fffd|g|fffd||fffd||fffd|b|fffd|N|fffd|^|fffd|[|fffd|~|fffd|i|fffd||fffd||fffd||14e|g|fffd|p
 Dim tS2 As String
     tS2 = tS
     tS2 = Replace(tS2, "|fffd||fffd|", "_alpha_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_beta_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_gamma_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_delta_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_epsilon_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_zeta_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_eta_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_theta_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_iota_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_kappa_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_lambda_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_mu_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_nu_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_xi_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_omicron_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_pi_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_rho_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_sigma_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_tau_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_upsilon_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_phi_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_chi_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_psi_")
    tS2 = Replace(tS2, "|fffd||fffd|", "_omega_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_alpha_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_beta_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_gamma_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_delta_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_delta_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_epsilon_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_zeta_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_eta_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_theta_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_iota_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_kappa_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_lambda_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_mu_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_nu_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_xi_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_omicron_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_pi_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_rho_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_sigma_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_tau_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_upsilon_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_phi_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_Chi_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_psi_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_omega_")
    tS2 = Replace(tS2, StrConv("|fffd||fffd|", vbUpperCase), "_ast")
    tS2 = Replace(tS2, "(", "_")
    tS2 = Replace(tS2, ")", "_")
    tS2 = Replace(tS2, "/", "_")
    tS2 = Replace(tS2, "+", "_")
    tS2 = Replace(tS2, "-", "_")
    tS2 = Replace(tS2, "'", "_dash")
    tS2 = Replace(tS2, "|fffd||317|p", "_adptd")
    tS2 = Replace(tS2, "|fffd|D", "l")
    tS2 = Replace(tS2, "|fffd|", "_")
    
    
    tS2 = StrConv(tS2, vbNarrow)
    tS2 = Replace(tS2, "=", "")
    tS2 = Replace(tS2, "__", "_")
    tS2 = Replace(tS2, "__", "_")
    tS2 = Replace(tS2, "__", "_")
    tS2 = Replace(tS2, "__", "_")
    If left(tS2, 1) = "_" Then
        tS2 = Right(tS2, Len(tS2) - 1)
    End If
    If Right(tS2, 1) = "_" Then
        tS2 = left(tS2, Len(tS2) - 1)
    End If
    
    tS2 = UCase(tS2)
    convToKataStr = tS2

End Function


Public Function G() As Double '|fffd|d|fffd||349||fffd||fffd||fffd||fffd|x
    G = 9.80665
End Function
Public Function gravity() '|fffd|d|fffd||349||fffd||fffd||fffd||fffd|x
    gravity = 9.80665
End Function

Public Function Pai() As Double '|fffd|~|fffd||fffd||fffd||fffd|
    Pai = 3.141592654
End Function

Public Function MT_RC_ConE91(ByVal FC As Double, ByVal Gamma As Double, Optional Tanni As String = "tf") As Double
'RC|fffd|K|fffd||fffd|'91|fffd|@|fffd|\3 |fffd|R|fffd||fffd||fffd|N|fffd||fffd||fffd|[|fffd|g|fffd||303||fffd||fffd||fffd||fffd|O|fffd|W|fffd||fffd|
    Select Case Tanni
        Case "tf":        MT_RC_ConE91 = 210000# * (Gamma / 2.3) ^ 1.5 * (FC / 200#) ^ 0.5 '|fffd||fffd|:tf/m3|fffd|@'Fc:kg/|fffd|p2
        Case "kN":        MT_RC_ConE91 = 21000# * (Gamma / 23) ^ 1.5 * (FC / 20#) ^ 0.5 '|fffd||fffd|:kN/m3|fffd|@'Fc:N/mm2
    End Select

End Function

Public Function MT_RC_Gamma99(FC As Double, Optional CType As String = "NC", Optional Kata As String = "Gamma") As Variant
'|fffd|S|fffd||603|R|fffd||fffd||fffd|N|fffd||fffd||fffd|[|fffd|g|fffd||30f|d|fffd||fffd| 99 p7
    Dim Tt As Double, tV As Variant
     Select Case CType
         Case "NC":
            If FC <= 36# Then
                Tt = 24#
            ElseIf FC <= 48# Then
                Tt = 24.5
            ElseIf FC <= 60# Then Tt = 25#
            Else: Tt = 0#
            End If
                    
         Case "LC1":
            If FC <= 27# Then
                Tt = 20#
            ElseIf FC <= 36# Then
                Tt = 22#
            Else: Tt = 0#
            End If
         Case "LC2":
            If FC <= 27# Then
                Tt = 18#
            Else: Tt = 0#
            End If
        Case Else:
            Tt = 0#
    End Select
    
    Kata = convToKataStr(Kata)
    Select Case Kata
        Case UCase("unit"), "|fffd|P|fffd||fffd|"
              tV = "kN/m3"
        Case UCase("Ctype")
              tV = CType
        Case Else
              tV = Tt
    End Select
    MT_RC_Gamma99 = tV
End Function

Public Function Acs(CS As Double) As Double 'cos-1
    Dim SN As Double
        If CS = 0# Then
            Acs = Pai() / 2#
        Else
          SN = (1# - CS ^ 2) ^ 0.5
          Acs = Atn(SN / CS)
        End If
End Function

Public Function cal|fffd|s|fffd||fffd||fffd||fffd|(ByVal XL As Double, ByVal xR As Double) As String
    cal|fffd|s|fffd||fffd||fffd||fffd| = Futougou(XL, xR)

End Function



Public Function Futougou(ByVal XL As Double, ByVal xR As Double) As String
 Dim tS As String
'|fffd|s|fffd||fffd||fffd||fffd|
    If XL > xR Then
        tS = ">"
    Else
        If XL < xR Then
            tS = "<"
        Else
            tS = "="
        End If
    End If
    Futougou = tS
End Function


Public Function cal|fffd||fffd||fffd||fffd|(ByVal x As Variant, ByVal Hanteiti As Variant, ByVal HanteiKigou As String) As Variant
    
cal|fffd||fffd||fffd||fffd| = Hantei(x, Hanteiti, HanteiKigou)

End Function



Public Function Hantei(ByVal x As Variant, ByVal Hanteiti As Variant, ByVal HanteiKigou As String) As Variant
'|fffd|O.K.|fffd||fffd|N.G.|fffd||fffd||fffd||502||fffd|
Dim T As Variant
If IsNumeric(x) And IsNumeric(Hanteiti) Then


    '|fffd||fffd||fffd||fffd|
        Select Case HanteiKigou
            Case "<":
                If x < Hanteiti Then
                    T = "O.K."
                Else
                    T = "N.G."
                End If
            Case ">":
                If x > Hanteiti Then
                    T = "O.K."
                Else
                    T = "N.G."
                End If
            Case "|fffd||fffd|":
                If x > Hanteiti Then
                    T = "N.G."
                Else
                    T = "O.K."
                End If
            Case "|fffd||fffd|":
                If x < Hanteiti Then
                    T = "N.G."
                Else
                    T = "O.K."
                End If
            Case "=":
                If x <> Hanteiti Then
                    T = "N.G."
                Else
                    T = "O.K."
                End If
            
            
            Case Else:
                    T = "HanteiKigou Error"
        End Select
Else
    
    T = CVErr(xlErrValue)
End If
    Hantei = T
End Function
Public Sub ExAllVCopy()
 'AllVCopy|fffd||30e||fffd||fffd|s 10UD|fffd||fffd||fffd||fffd||fffd||fffd||fffd||14e|g|fffd|p

    Dim tB As Boolean
    Dim WB As Workbook
    Set WB = ActiveWorkbook
   tB = AllVCopy(WB)
End Sub
Function AllVCopy(WB As Workbook, Optional fSave As Boolean = True, Optional fAlrt As Boolean = True) As Boolean
'10UD|fffd||fffd||fffd||fffd||fffd||fffd||fffd||14e|g|fffd|p|fffd|@110124RESPM2_1CSV|fffd||fffd||fffd||fffd|(UD|fffd|p).xls
' |fffd|l|fffd||6d1||fffd| Macro |fffd|S|fffd||102||303||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||30a||590||fffd||fffd||202||1c2||fffd|l|fffd|R|fffd|s|fffd|[|fffd||fffd||fffd||115||6d1||fffd||fffd||fffd||fffd||702||fffd||fffd|B

'
 Dim ret As Variant
    Calculate
    'Dim WB As Workbook
    Dim WS As Worksheet
    Dim Save_File, Save_Filename As String
    Dim tV As Variant, tS As String
    Dim ext As String

        'Set WB = ThisWorkbook
    If fSave = True Then
        ret = MsgBox("|fffd|l|fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|O|fffd||255||6d1||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbYesNo)
        tS = WB.FullName
        ext = Right(tS, Len(tS) - InStrRev(tS, "."))
        If ret = vbYes Then
            tV = Application.GetSaveAsFilename(tS, FileFilter:="Microsoft Excel|fffd|u|fffd|b|fffd|N,*." & ext)
            If tV = False Then
            Else
                WB.SaveAs FileName:=tV
            End If
        End If
   Else
       tS = WB.FullName
    End If
        With WB
             For Each WS In WB.Worksheets
                WS.Activate
                ActiveSheet.Unprotect
                WS.Visible = xlSheetVisible
                'ActiveSheet.Range("$A$1:$A$10000").AutoFilter Field:=1
                WS.Select
                Cells.Select
                '|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd|[|fffd||fffd||502||242||fffd||fffd||fffd||10f||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If ActiveSheet.AutoFilterMode = True Then
                  Debug.Print "|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd|[|fffd||752||fffd||3c2||fffd|"
                  Selection.AutoFilter
                ElseIf ActiveSheet.AutoFilterMode = False Then
                  Debug.Print "|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd|[|fffd||fffd||fffd||752||fffd|"
                End If
                Selection.Copy
                Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
                    :=False, Transpose:=False
                 'ActiveSheet.PROTECT DrawingObjects:=True, Contents:=True, Scenarios:=True
            Next WS
        End With
        
    Dim ext2 As String
    ext2 = "xlsx" '|fffd|l|fffd|R|fffd|s|fffd|[|fffd||343|}|fffd|N|fffd||fffd||fffd||fffd||fffd||fffd||fffd||255||3cd|X|fffd||fffd||fffd||fffd|
    
    '|fffd||fffd||fffd|O|fffd||fffd|t|fffd||fffd||fffd||6d1||fffd||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd||752||fffd|
    Save_Filename = left(tS, InStrRev(tS, ".") - 1) & "(|fffd|l|fffd|R|fffd|s|fffd|[)" & "." & ext2
    
    '|fffd|u|fffd||fffd||fffd|O|fffd||fffd|t|fffd||fffd||fffd||115||6d1||fffd||fffd||fffd||fffd||fffd|v|fffd|_|fffd|C|fffd|A|fffd||fffd||fffd|O|fffd|{|fffd|b|fffd|N|fffd|X|fffd||315|\|fffd||fffd|
    If fAlrt = False Then
        Application.DisplayAlerts = False
    End If
    If fAlrt = True Then
    
        Save_File = Application.GetSaveAsFilename(Save_Filename, _
             FileFilter:="Microsoft Excel|fffd|u|fffd|b|fffd|N,*." & ext2)
        If Save_File = tV Then
            ret = MsgBox("|fffd|l|fffd|R|fffd|s|fffd|[|fffd|O|fffd||193||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|A|fffd|{|fffd||fffd||fffd||242||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbOKCancel)
            If ret = vbOK Then
            Else
                End
    
            End If
        End If
    Else
        Save_File = Save_Filename
    End If
'    ActiveWorkbook.SaveAs filename:="C:\Users\watanabe\Desktop\|fffd||fffd||fffd||b0a2||fffd||fffd|(|fffd|l|fffd|R|fffd|s|fffd|[).xlsx", _
'        FileFormat:=xlOpenXMLWorkbook, CreateBackup:=False
    If fAlrt = False Then
        Application.DisplayAlerts = False
    End If
     ActiveWorkbook.SaveAs FileName:= _
     Save_File, _
    FileFormat:=xlOpenXMLWorkbook, CreateBackup:=False
 '    Password:="", WriteResPassword:="", ReadOnlyRecommended:=False, _
 '            CreateBackup:=False
     'FileFormat:=xlNormal,
    If fAlrt = False Then
        Application.DisplayAlerts = True
    End If
     
     
     AllVCopy = True
End Function
Attribute VB_Name = "Module3"
Option Explicit

Sub Macro2()
Attribute Macro2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro2 Macro
'

'
    ActiveSheet.Protect DrawingObjects:=False, Contents:=True, Scenarios:= _
        True
End Sub
Attribute VB_Name = "PRJ1910N|fffd||fffd||fffd||22ed|"
Option Explicit

Function mk|fffd||fffd||fffd||fffd||fffd||fffd||fffd|NRCSRC() As String
'RCSRC|fffd||303||fffd||fffd||fffd||fffd|N|fffd||314|z|fffd||fffd||fffd||502||fffd|
    Dim tS() As String, i As Integer, n As Integer
    n = 3
    ReDim tS(n)
    
    tS(1) = "A": tS(2) = "B": tS(3) = "C"
    
    rtrnN|fffd||fffd||fffd||fffd||fffd||fffd||fffd|NRCSRC = tS
    

End Function
Function mk|fffd||fffd||fffd||fffd||fffd|N|fffd|R|fffd||fffd||fffd||fffd||fffd|g(n|fffd|K|fffd||fffd| As Integer, s|fffd|K|fffd||fffd|() As String, s|fffd||fffd||fffd||fffd||fffd|N As String, n|fffd|K|fffd||fffd| As Integer) As String
'|fffd||fffd||fffd||fffd||fffd|N|fffd|R|fffd||fffd||fffd||fffd||fffd|g|fffd||fffd||3c2||fffd||fffd||fffd|
Dim tS As String, i As Integer
    If n|fffd|K|fffd||fffd| = 0 Then
    Else
        If n|fffd|K|fffd||fffd| = n|fffd|K|fffd||fffd| Then
            tS = "|fffd|S|fffd|K|fffd||fffd|" & s|fffd||fffd||fffd||fffd||fffd|N & "|fffd|A"
        Else
            For i = 1 To n|fffd|K|fffd||fffd|
            
             tS = tS & s|fffd|K|fffd||fffd|(i) & "|fffd|K|fffd|"
            Next i
            tS = left(tS, Len(tS) - 1) & "|fffd||fffd|" & s|fffd||fffd||fffd||fffd||fffd|N & "|fffd|A"
        End If
  
    'End If
    End If
    mk|fffd||fffd||fffd||fffd||fffd|N|fffd|R|fffd||fffd||fffd||fffd||fffd|g = tS


End Function
Function cnt|fffd|KNumber(v|fffd|K|fffd||fffd| As Variant) As Integer
    Dim n|fffd|K As Integer, i As Integer, n As Integer
    n = UBound(v|fffd|K|fffd||fffd|)
    
    For i = 1 To n
        If v|fffd|K|fffd||fffd|(i) = "-" Then
        Else
           n|fffd|K = n|fffd|K + 1
        End If
    Next i

    cnt|fffd|KNumber = n|fffd|K


End Function





Function rtrn|fffd|K|fffd||fffd||fffd||fffd||fffd|N|fffd||303|R|fffd||fffd||fffd||fffd||fffd|g(rng|fffd|K|fffd||fffd| As Range, rng|fffd|K|fffd||fffd||fffd||fffd||fffd|N As Range) As String
    Dim v|fffd|K|fffd||fffd| As Variant, v|fffd|K|fffd||fffd||fffd||fffd||fffd|N As Variant

    v|fffd|K|fffd||fffd| = CV_Range_to_Variant(rng|fffd|K|fffd||fffd|)
    v|fffd|K|fffd||fffd||fffd||fffd||fffd|N = CV_Range_to_Variant(rng|fffd|K|fffd||fffd||fffd||fffd||fffd|N)
    
    
  Dim n As Integer, n|fffd|K As Integer, i As Integer
    n|fffd|K = cnt|fffd|KNumber(v|fffd|K|fffd||fffd|)
    
  Dim sA|fffd|K|fffd||fffd|() As String, sB|fffd|K|fffd||fffd|() As String, sC|fffd|K|fffd||fffd|() As String
  Dim nA|fffd|K|fffd||fffd| As Integer, nB|fffd|K|fffd||fffd| As Integer, nC|fffd|K|fffd||fffd| As Integer
    
  ReDim sA|fffd|K|fffd||fffd|(n|fffd|K), sB|fffd|K|fffd||fffd|(n|fffd|K), sC|fffd|K|fffd||fffd|(n|fffd|K)
  For i = 0 To n|fffd|K - 1
    Select Case v|fffd|K|fffd||fffd||fffd||fffd||fffd|N(i)
        Case "A"
                nA|fffd|K|fffd||fffd| = nA|fffd|K|fffd||fffd| + 1: sA|fffd|K|fffd||fffd|(nA|fffd|K|fffd||fffd|) = v|fffd|K|fffd||fffd|(i)
        Case "B"
                nB|fffd|K|fffd||fffd| = nB|fffd|K|fffd||fffd| + 1: sB|fffd|K|fffd||fffd|(nB|fffd|K|fffd||fffd|) = v|fffd|K|fffd||fffd|(i)
        Case "C"
                nC|fffd|K|fffd||fffd| = nC|fffd|K|fffd||fffd| + 1: sC|fffd|K|fffd||fffd|(nC|fffd|K|fffd||fffd|) = v|fffd|K|fffd||fffd|(i)
    End Select
  Next i
  Dim tS As String
  tS = mk|fffd||fffd||fffd||fffd||fffd|N|fffd|R|fffd||fffd||fffd||fffd||fffd|g(nA|fffd|K|fffd||fffd|, sA|fffd|K|fffd||fffd|, "A", n|fffd|K)
  tS = tS & mk|fffd||fffd||fffd||fffd||fffd|N|fffd|R|fffd||fffd||fffd||fffd||fffd|g(nB|fffd|K|fffd||fffd|, sB|fffd|K|fffd||fffd|, "B", n|fffd|K)
  tS = tS & mk|fffd||fffd||fffd||fffd||fffd|N|fffd|R|fffd||fffd||fffd||fffd||fffd|g(nC|fffd|K|fffd||fffd|, sC|fffd|K|fffd||fffd|, "C", n|fffd|K)
  
  tS = left(tS, Len(tS) - 1)
  
  
  rtrn|fffd|K|fffd||fffd||fffd||fffd||fffd|N|fffd||303|R|fffd||fffd||fffd||fffd||fffd|g = tS
End Function


Function rtrn|fffd||12ed||fffd|x|fffd||303|R|fffd||fffd||fffd||fffd||fffd|g(rng|fffd|K|fffd||fffd| As Range, rng|fffd|K|fffd||fffd|B As Range) As String
    Dim v|fffd|K|fffd||fffd| As Variant, v|fffd|K|fffd||fffd|B As Variant

    v|fffd|K|fffd||fffd| = CV_Range_to_Variant(rng|fffd|K|fffd||fffd|)
    v|fffd|K|fffd||fffd|B = CV_Range_to_Variant(rng|fffd|K|fffd||fffd|B)
    
    
  Dim n As Integer, n|fffd|K As Integer, i As Integer
    
    n|fffd|K = cnt|fffd|KNumber(v|fffd|K|fffd||fffd|)
 
    
  Dim s|fffd||12ed||fffd|x|fffd|K|fffd||fffd|() As String
  Dim n|fffd||12ed||fffd|x|fffd|K As Integer
    
  ReDim s|fffd||12ed||fffd|x|fffd|K|fffd||fffd|(n|fffd|K)
  

  For i = 0 To n|fffd|K - 1
        If v|fffd|K|fffd||fffd|B(i) < 13.5 Then
               n|fffd||12ed||fffd|x|fffd|K = n|fffd||12ed||fffd|x|fffd|K + 1: s|fffd||12ed||fffd|x|fffd|K|fffd||fffd|(n|fffd||12ed||fffd|x|fffd|K) = v|fffd|K|fffd||fffd|(i)
        End If
  Next i

  Dim tS As String
  If n|fffd||12ed||fffd|x|fffd|K > 0 Then
    tS = mk|fffd||fffd||fffd||fffd||fffd|N|fffd|R|fffd||fffd||fffd||fffd||fffd|g(n|fffd||12ed||fffd|x|fffd|K, s|fffd||12ed||fffd|x|fffd|K|fffd||fffd|, "|fffd||12ed||fffd|x|fffd|R|fffd||fffd||fffd|N|fffd||fffd||fffd|[|fffd|g", n|fffd|K)
  
    tS = left(tS, Len(tS) - 1)
  End If
  
  
  rtrn|fffd||12ed||fffd|x|fffd||303|R|fffd||fffd||fffd||fffd||fffd|g = tS
End Function


Function rtrn|fffd||fffd||fffd|K|fffd||1d4||fffd||fffd||fffd||fffd||303|R|fffd||fffd||fffd||fffd||fffd|g(rng|fffd|K|fffd||fffd| As Range, rng|fffd||fffd||fffd|K|fffd||1d2||fffd||fffd||292|u As Range) As String
    Dim v|fffd|K|fffd||fffd| As Variant, v|fffd||fffd||fffd|K|fffd||1d2||fffd||fffd||292|u As Variant

    v|fffd|K|fffd||fffd| = CV_Range_to_Variant(rng|fffd|K|fffd||fffd|)
    v|fffd||fffd||fffd|K|fffd||1d2||fffd||fffd||292|u = CV_Range_to_Variant(rng|fffd||fffd||fffd|K|fffd||1d2||fffd||fffd||292|u)
    
    
  Dim n As Integer, n|fffd|K As Integer, i As Integer
    
    n|fffd|K = cnt|fffd|KNumber(v|fffd|K|fffd||fffd|)
 
    
  Dim s|fffd||fffd||fffd|K|fffd||1d2||fffd||fffd|K|fffd||fffd|() As String, s|fffd||fffd||fffd|K|fffd||1d2||fffd||fffd||292|u() As String
  Dim n|fffd||fffd||fffd|K|fffd||1d4||fffd||fffd||fffd||fffd|K As Integer
    
  ReDim s|fffd||fffd||fffd|K|fffd||1d4||fffd||fffd||fffd||fffd|K|fffd||fffd|(n|fffd|K), s|fffd||fffd||fffd|K|fffd||1d2||fffd||fffd||292|u(n|fffd|K)
  

  For i = 0 To n|fffd|K - 1
        If Len(v|fffd||fffd||fffd|K|fffd||1d2||fffd||fffd||292|u(i)) > 0 Then
               n|fffd||fffd||fffd|K|fffd||1d4||fffd||fffd||fffd||fffd|K = n|fffd||fffd||fffd|K|fffd||1d4||fffd||fffd||fffd||fffd|K + 1: s|fffd||fffd||fffd|K|fffd||1d4||fffd||fffd||fffd||fffd|K|fffd||fffd|(n|fffd||fffd||fffd|K|fffd||1d4||fffd||fffd||fffd||fffd|K) = v|fffd|K|fffd||fffd|(i)
               s|fffd||fffd||fffd|K|fffd||1d2||fffd||fffd||292|u(n|fffd||fffd||fffd|K|fffd||1d4||fffd||fffd||fffd||fffd|K) = v|fffd||fffd||fffd|K|fffd||1d2||fffd||fffd||292|u(i)
        End If
  Next i

  Dim tS As String
  For i = 1 To n|fffd||fffd||fffd|K|fffd||1d4||fffd||fffd||fffd||fffd|K
        If Len(s|fffd||fffd||fffd|K|fffd||1d2||fffd||fffd||292|u(i)) > 0 Then
               tS = tS & s|fffd||fffd||fffd|K|fffd||1d4||fffd||fffd||fffd||fffd|K|fffd||fffd|(i) & "|fffd|K" & left(s|fffd||fffd||fffd|K|fffd||1d2||fffd||fffd||292|u(i), Len(s|fffd||fffd||fffd|K|fffd||1d2||fffd||fffd||292|u(i)) - 1) & "|fffd|A"
        End If
  Next i


  
  rtrn|fffd||fffd||fffd|K|fffd||1d4||fffd||fffd||fffd||fffd||303|R|fffd||fffd||fffd||fffd||fffd|g = tS
End Function

Function rtrn|fffd||390|S|fffd||fffd||fffd|R|fffd||fffd||fffd||fffd||fffd|g(rng|fffd|K|fffd||fffd| As Range, rng|fffd|K|fffd||390|SG As Range, Optional Flg|fffd||390|S = True) As String
'Flg|fffd||390|S true:|fffd||390|S|fffd||fffd||fffd|@true:|fffd||fffd||fffd||fffd||fffd||fffd|


    Dim v|fffd|K|fffd||fffd| As Variant, v|fffd|K|fffd||390|SG As Variant

    v|fffd|K|fffd||fffd| = CV_Range_to_Variant(rng|fffd|K|fffd||fffd|)
    v|fffd|K|fffd||390|SG = CV_Range_to_Variant(rng|fffd|K|fffd||390|SG)
    
    
  Dim n As Integer, n|fffd|K As Integer, i As Integer
    
    n|fffd|K = cnt|fffd|KNumber(v|fffd|K|fffd||fffd|)
 
    
  Dim s|fffd||390|SOut|fffd|K|fffd||fffd|() As String
  Dim n|fffd||390|SOut|fffd|K As Integer
    
  ReDim s|fffd||390|SOut|fffd|K|fffd||fffd|(n|fffd|K)
  

  For i = 0 To n|fffd|K - 1
        If v|fffd|K|fffd||390|SG(i) < 1# Then
               n|fffd||390|SOut|fffd|K = n|fffd||390|SOut|fffd|K + 1: s|fffd||390|SOut|fffd|K|fffd||fffd|(n|fffd||390|SOut|fffd|K) = v|fffd|K|fffd||fffd|(i)
        End If
  Next i

  Dim tS As String
  If Flg|fffd||390|S = True Then
      If n|fffd||390|SOut|fffd|K > 0 Then
        tS = mk|fffd||fffd||fffd||fffd||fffd|N|fffd|R|fffd||fffd||fffd||fffd||fffd|g(n|fffd||390|SOut|fffd|K, s|fffd||390|SOut|fffd|K|fffd||fffd|, "0.15|fffd||12d02||fffd||fffd||102||fffd||fffd||fffd|B", n|fffd|K)
      
        tS = left(tS, Len(tS) - 1)
      Else
        tS = "|fffd|S|fffd|K|fffd||fffd|0.15|fffd||209||fffd||fffd||142||fffd||fffd||fffd|B"
      End If
    Else
      If n|fffd||390|SOut|fffd|K > 0 Then
        tS = mk|fffd||fffd||fffd||fffd||fffd|N|fffd|R|fffd||fffd||fffd||fffd||fffd|g(n|fffd||390|SOut|fffd|K, s|fffd||390|SOut|fffd|K|fffd||fffd|, "0.6|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|B", n|fffd|K)
      
        tS = left(tS, Len(tS) - 1)
      Else
        tS = "|fffd|S|fffd|K|fffd||fffd|0.6|fffd||20f||fffd||142||fffd||fffd||fffd|B"
      End If
    End If
  
  rtrn|fffd||390|S|fffd||fffd||fffd|R|fffd||fffd||fffd||fffd||fffd|g = tS
End Function


Function rtrnIs|fffd|R|fffd||fffd||fffd||fffd||fffd|g(rng|fffd|K|fffd||fffd| As Range, rng|fffd|KIs As Range, Iso As Double, Optional FlgIs = True) As String
'FlgIs true:Is|fffd|@true:Ctu|fffd|Sd


    Dim v|fffd|K|fffd||fffd| As Variant, v|fffd|KIs As Variant

    v|fffd|K|fffd||fffd| = CV_Range_to_Variant(rng|fffd|K|fffd||fffd|)
    v|fffd|KIs = CV_Range_to_Variant(rng|fffd|KIs)
    
    
  Dim n As Integer, n|fffd|K As Integer, i As Integer
    
    n|fffd|K = cnt|fffd|KNumber(v|fffd|K|fffd||fffd|)
 
    
  Dim sIsOut|fffd|K|fffd||fffd|() As String
  Dim nIsOut|fffd|K As Integer
    
  ReDim sIsOut|fffd|K|fffd||fffd|(n|fffd|K)
  

  For i = 0 To n|fffd|K - 1
        If v|fffd|KIs(i) < Iso Then
               nIsOut|fffd|K = nIsOut|fffd|K + 1: sIsOut|fffd|K|fffd||fffd|(nIsOut|fffd|K) = v|fffd|K|fffd||fffd|(i)
        End If
  Next i

  Dim tS As String, tS2 As String
  
  tS2 = Format(Iso, "0.000") & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|B"

      
      If nIsOut|fffd|K > 0 Then
        tS = mk|fffd||fffd||fffd||fffd||fffd|N|fffd|R|fffd||fffd||fffd||fffd||fffd|g(nIsOut|fffd|K, sIsOut|fffd|K|fffd||fffd|, "", n|fffd|K)
        tS2 = Format(Iso, "0.000") & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|B"
        tS = left(tS & tS2, Len(tS & tS2) - 1)
      Else
        tS = "|fffd|S|fffd|K|fffd||fffd|"
        tS2 = Format(Iso, "0.000") & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|B"
        tS = tS & tS2
      End If
      
      Dim sIs As String
      If FlgIs = True Then
         sIs = "|fffd|hs|fffd|w|fffd|W|fffd||34f||fffd|L|fffd||312||282||fffd|A"
        Else
         sIs = "|fffd|bTU|fffd||fffd|rD|fffd||34f||fffd|L|fffd||312||282||fffd|A"
      End If
      tS = sIs & tS
  
  rtrnIs|fffd|R|fffd||fffd||fffd||fffd||fffd|g = tS
End Function


Attribute VB_Name = "RC|fffd||fffd||fffd||18e|{|fffd|H|fffd|A|fffd||fffd||fffd|J|fffd|["
'post-construction anchor|fffd|@PCAB|fffd|@|fffd||692||fffd||fffd|n|fffd||fffd||fffd||18e|{|fffd|H|fffd|A|fffd||fffd||fffd|J|fffd|[
Option Explicit
Public Function MT_PCAB_calQa1(SigmaY As Double, sae As Double) As Double
Attribute MT_PCAB_calQa1.VB_Description = "2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P268 (3.9.4-8)|fffd||fffd||fffd|@|fffd|||fffd||782||fffd||fffd||fffd|f"
Attribute MT_PCAB_calQa1.VB_ProcData.VB_Invoke_Func = " \n57"
'2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P268 (3.9.4-8)|fffd||fffd||fffd|@|fffd|||fffd||782||fffd||fffd||fffd|f
    MT_PCAB_calQa1 = 0.7 * SigmaY * sae / 1000#
End Function
Public Function MT_PCAB_calQa2(eC As Double, SigumaB As Double, sae As Double) As Double
Attribute MT_PCAB_calQa2.VB_Description = "2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P268 (3.9.4-9)|fffd||fffd| |fffd|x|fffd||fffd|"
Attribute MT_PCAB_calQa2.VB_ProcData.VB_Invoke_Func = " \n57"
'2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P268 (3.9.4-9)|fffd||fffd| '|fffd|x|fffd||fffd|
    MT_PCAB_calQa2 = 0.4 * (eC * SigumaB) ^ 0.5 * sae / 1000#
End Function
Public Function MT_PCAB_calQa(eC As Double, SigumaB As Double, SigmaY As Double, sae As Double) As Double
Attribute MT_PCAB_calQa.VB_Description = "2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P268 (3.9.4-9)|fffd||fffd| |fffd||fffd||fffd||18e|{|fffd|H|fffd|A|fffd||fffd||fffd|J|fffd|[|fffd||302||fffd||fffd||fffd|f|fffd||fffd||fffd|x"
Attribute MT_PCAB_calQa.VB_ProcData.VB_Invoke_Func = " \n57"
'2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P268 (3.9.4-9)|fffd||fffd| '|fffd||fffd||fffd||18e|{|fffd|H|fffd|A|fffd||fffd||fffd|J|fffd|[|fffd||302||fffd||fffd||fffd|f|fffd||fffd||fffd|x
    MT_PCAB_calQa = min(MT_PCAB_calQa1(SigmaY, sae), MT_PCAB_calQa2(eC, SigumaB, sae), 10000000000#)
End Function
Public Function MT_PCAB_calAc(Sita As Double, le As Double, da As Double) As Double
Attribute MT_PCAB_calAc.VB_Description = "2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P283 |fffd||fffd|Ac"
Attribute MT_PCAB_calAc.VB_ProcData.VB_Invoke_Func = " \n57"
'2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P283 |fffd||fffd|Ac
     MT_PCAB_calAc = (Pai() - Pai() * Sita / 90# + Sin(2# * Sita / 180# * Pai())) * (le + da / 2#) ^ 2# - Pai() / 4 * da ^ 2#
End Function
Public Function MT_PCAB_calSita(P As Double, le As Double, da As Double) As Double
Attribute MT_PCAB_calSita.VB_Description = "2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P283 |fffd||303||fffd|"
Attribute MT_PCAB_calSita.VB_ProcData.VB_Invoke_Func = " \n57"
'2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P283 |fffd||303||fffd|
    Dim le2 As Double
    le2 = le + 0.5 * da
    If P >= le2 * 2 Then P = le2 * 2
    MT_PCAB_calSita = Acs(P / 2# / le2) / Pai() * 180#
End Function
Public Function MT_PCAB_calTa1(Sigumay As Double, ao As Double) As Double
Attribute MT_PCAB_calTa1.VB_Description = "2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P269 (3.9.4-14)|fffd||fffd|"
Attribute MT_PCAB_calTa1.VB_ProcData.VB_Invoke_Func = " \n57"
'2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P269 (3.9.4-14)|fffd||fffd|
     MT_PCAB_calTa1 = Sigumay * ao / 1000#
End Function
Public Function MT_PCAB_calTa2(SigumaB As Double, Ac As Double) As Double
Attribute MT_PCAB_calTa2.VB_Description = "2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P269 (3.9.4-15)|fffd||fffd|"
Attribute MT_PCAB_calTa2.VB_ProcData.VB_Invoke_Func = " \n57"
'2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P269 (3.9.4-15)|fffd||fffd|
     MT_PCAB_calTa2 = 0.23 * SigumaB ^ 0.5 * Ac / 1000#
End Function
Public Function MT_PCAB_calTua(SigumaB As Double) As Double
Attribute MT_PCAB_calTua.VB_Description = "2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P269 (3.9.4-17)|fffd||fffd|"
Attribute MT_PCAB_calTua.VB_ProcData.VB_Invoke_Func = " \n57"
'2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P269 (3.9.4-17)|fffd||fffd|
     MT_PCAB_calTua = 10# * (SigumaB / 21#) ^ 0.5
End Function
Public Function MT_PCAB_calTa3(SigumaB As Double, da As Double, le As Double) As Double
Attribute MT_PCAB_calTa3.VB_Description = "2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P269 (3.9.4-16)|fffd||fffd|"
Attribute MT_PCAB_calTa3.VB_ProcData.VB_Invoke_Func = " \n57"
'2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P269 (3.9.4-16)|fffd||fffd|
     MT_PCAB_calTa3 = MT_PCAB_calTua(SigumaB) * Pai() * da * le / 1000#
End Function
Public Function MT_PCAB_calTa(Sigumay As Double, ao As Double, SigumaB As Double, Ac As Double, da As Double, le As Double) As Double
Attribute MT_PCAB_calTa.VB_Description = "2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P269 (3.9.4-16)|fffd||fffd|"
Attribute MT_PCAB_calTa.VB_ProcData.VB_Invoke_Func = " \n57"
'2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P269 (3.9.4-16)|fffd||fffd|

     MT_PCAB_calTa = Application.WorksheetFunction.min(MT_PCAB_calTa1(Sigumay, ao), MT_PCAB_calTa2(SigumaB, Ac), MT_PCAB_calTa3(SigumaB, da, le))
End Function

Function MT_PCAB_calTa_2K10m_WS(rBar As Range, rCon As Range, rCal As Range, Kata As String) As Variant
    Dim sSiguma_y As Double, sc_a As Double, da As Double, le As Double
    Dim FC As Double, TCON As String
    Dim Alpha1_3 As Double, F_Capsule As Boolean, F_Organic As Boolean, Fyeald As Boolean, Term As String
    
    
    
    Dim tVB As Variant
    tVB = CV_Range_to_Variant(rBar)
    sSiguma_y = tVB(0): sc_a = tVB(1): da = tVB(2): le = tVB(3):
    tVB = CV_Range_to_Variant(rCon)
    FC = tVB(0): TCON = tVB(1):
    tVB = CV_Range_to_Variant(rCal)
    Alpha1_3 = tVB(0): F_Capsule = tVB(1): F_Organic = tVB(2): Fyeald = tVB(3): Term = tVB(4):
    
    MT_PCAB_calTa_2K10m_WS = MT_PCAB_calTa_2K10m(sSiguma_y, sc_a, da, le, _
                            FC, TCON, _
                            Alpha1_3, F_Capsule, F_Organic, Fyeald, Term, _
                             Kata)
End Function


Function MT_PCAB_calTa_2K10m(sSiguma_y As Double, sc_a As Double, da As Double, le As Double, _
                            FC As Double, TCON As String, _
                            Alpha1_3 As Double, F_Capsule As Boolean, F_Organic As Boolean, Fyeald As Boolean, _
                            Term As String, Kata As String) As Double
'|fffd|e|fffd||d347||fffd||fffd||fffd|\|fffd||fffd||fffd||74c|v|fffd|w|fffd|j|fffd||fffd|2|fffd||141|@2010|fffd|N|fffd|@|fffd||fffd|4|fffd||481|@|fffd|e|fffd||fffd|A|fffd||fffd||fffd|J|fffd|[|fffd|{|fffd||fffd||fffd|g|fffd||74c|v|fffd|w|fffd|j|fffd|E|fffd||fffd||fffd|
'4.5|fffd|@|fffd||692||fffd||fffd|n|fffd|A|fffd||fffd||fffd|J|fffd|[|fffd|{|fffd||fffd||fffd|g|fffd||310||74c|v 4.5.1|fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||c2bc2||fffd||a347|
'4.5.1(3)(27)|fffd||fffd||fffd||fffd||1c9||fffd|
'Alpha1_3|fffd|F|fffd||fffd|1|fffd||fffd||fffd|2|fffd||fffd||fffd|3|fffd|@Tcon|fffd|F|fffd|R|fffd||fffd||fffd|N|fffd||fffd||fffd|[|fffd|g|fffd||303|^|fffd|C|fffd|vNC,LC1,LC2,

'|fffd||3cd|X|fffd|O|fffd||308||fffd||fffd||fffd|
'F_Capsule:|fffd|J|fffd|v|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6c2||fffd||fffd|@Term|fffd|F|fffd||fffd||fffd||fffd|L|fffd|@|fffd|Z|fffd||fffd|S
'Fyeald|fffd|F|fffd|||fffd||78d|~|fffd||fffd||fffd||fffd|s|fffd||6cf||602||fffd||fffd||fffd||fffd||90a9||fffd||fffd||fffd||202||fffd||fffd||fffd|
'(sSiguma_y As Double, sc_a As Double, da As Double, le As Double, Alpha1_3 As Double, _
'                            Fc As Double, Tcon As String, F_Capsule As Boolean, F_Organic As Boolean, Term As String, Kata As String, _
'                            Fyeald As Boolean) As Double
'

Dim Alpha_yu As Double, sSigma_pa As Double, lce As Double
Dim Tau_bavg As Double, Tau_a As Double, Pa1 As Double, pa3 As Double, Pa As Double
Dim Fai(3) As Double, tD As Double, le_req As Double
    
    Call calTa_2K10_setFai(Term, Fai)

    If Fyeald = True Then
        Alpha_yu = 1.25
    Else
        Alpha_yu = 1#
    End If
    sSigma_pa = Alpha_yu * sSiguma_y
    lce = le - 2# * da
    

    
    Tau_bavg = calTa_2K10_calTau_bavg(FC, TCON, F_Capsule, F_Organic)
    Tau_a = Alpha1_3 * Tau_bavg
    Pa1 = Fai(1) * sSigma_pa * sc_a / 1000
    pa3 = Fai(3) * Tau_a * Pai() * da * lce / 1000
    Pa = Application.WorksheetFunction.min(Pa1, pa3)
    
    le_req = sSigma_pa * da / 4# / Tau_a
    
    Kata = UCase(Kata)
    Select Case Kata
        Case UCase("PHI_1"): tD = Fai(1)
        Case UCase("PHI_2"): tD = Fai(2)
        Case UCase("PHI_3"): tD = Fai(3)
    
        Case UCase("Alpha_yu"): tD = Alpha_yu
        Case UCase("s_Sigma_pa"): tD = sSigma_pa
        Case UCase("lce"):   tD = lce
        Case UCase("Alpha1_3"): tD = Alpha1_3
        Case UCase("Tau_bavg"): tD = Tau_bavg
        Case UCase("Tau_a"): tD = Tau_a
        Case UCase("pa1"):  tD = Pa1
        Case UCase("pa3"):  tD = pa3
        Case UCase("pa"):   tD = Pa
        Case UCase("lereq"):   tD = le_req
        
        
        Case Else
            tD = 0#
    End Select
    MT_PCAB_calTa_2K10m = tD

End Function

Function MT_PCAB_calTa_2K10(sSiguma_y As Double, sc_a As Double, da As Double, le As Double, Alpha1_3 As Double, _
                            FC As Double, TCON As String, F_Capsule As Boolean, F_Organic As Boolean, Term As String, Kata As String, _
                            Fyeald As Boolean) As Double
Attribute MT_PCAB_calTa_2K10.VB_Description = "|fffd|e|fffd||d347||fffd||fffd||fffd|\|fffd||fffd||fffd||74c|v|fffd|w|fffd|j|fffd||fffd|2|fffd||141|@2010|fffd|N|fffd|@|fffd||fffd|4|fffd||481|@|fffd|e|fffd||fffd|A|fffd||fffd||fffd|J|fffd|[|fffd|{|fffd||fffd||fffd|g|fffd||74c|v|fffd|w|fffd|j|fffd|E|fffd||fffd||fffd| 4.5|fffd|@|fffd||692||fffd||fffd|n|fffd|A|fffd||fffd||fffd|J|fffd|[|fffd|{|fffd||fffd||fffd|g|fffd||310||74c|v 4.5.1|fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||c2bc2||fffd||a347| 4.5.1(3)(27)|fffd||fffd||fffd||fffd||1c9||fffd|"
Attribute MT_PCAB_calTa_2K10.VB_ProcData.VB_Invoke_Func = " \n57"
'|fffd|e|fffd||d347||fffd||fffd||fffd|\|fffd||fffd||fffd||74c|v|fffd|w|fffd|j|fffd||fffd|2|fffd||141|@2010|fffd|N|fffd|@|fffd||fffd|4|fffd||481|@|fffd|e|fffd||fffd|A|fffd||fffd||fffd|J|fffd|[|fffd|{|fffd||fffd||fffd|g|fffd||74c|v|fffd|w|fffd|j|fffd|E|fffd||fffd||fffd|
'4.5|fffd|@|fffd||692||fffd||fffd|n|fffd|A|fffd||fffd||fffd|J|fffd|[|fffd|{|fffd||fffd||fffd|g|fffd||310||74c|v 4.5.1|fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||c2bc2||fffd||a347|
'4.5.1(3)(27)|fffd||fffd||fffd||fffd||1c9||fffd|
'Alpha1_3|fffd|F|fffd||fffd|1|fffd||fffd||fffd|2|fffd||fffd||fffd|3|fffd|@Tcon|fffd|F|fffd|R|fffd||fffd||fffd|N|fffd||fffd||fffd|[|fffd|g|fffd||303|^|fffd|C|fffd|vNC,LC1,LC2,

'|fffd||3cd|X|fffd|O|fffd||308||fffd||fffd||fffd|
'F_Capsule:|fffd|J|fffd|v|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6c2||fffd||fffd|@Term|fffd|F|fffd||fffd||fffd||fffd|L|fffd|@|fffd|Z|fffd||fffd|S
'Fyeald|fffd|F|fffd|||fffd||78d|~|fffd||fffd||fffd||fffd|s|fffd||6cf||602||fffd||fffd||fffd||fffd||90a9||fffd||fffd||fffd||202||fffd||fffd||fffd|
'(sSiguma_y As Double, sc_a As Double, da As Double, le As Double, Alpha1_3 As Double, _
'                            Fc As Double, Tcon As String, F_Capsule As Boolean, F_Organic As Boolean, Term As String, Kata As String, _
'                            Fyeald As Boolean) As Double
'

Dim Alpha_yu As Double, sSigma_pa As Double, lce As Double
Dim Tau_bavg As Double, Tau_a As Double, Pa1 As Double, pa3 As Double, Pa As Double
Dim Fai(3) As Double, tD As Double, le_req As Double
    
    Call calTa_2K10_setFai(Term, Fai)

    If Fyeald = True Then
        Alpha_yu = 1.25
    Else
        Alpha_yu = 1#
    End If
    sSigma_pa = Alpha_yu * sSiguma_y
    lce = le - 2# * da
    

    
    Tau_bavg = calTa_2K10_calTau_bavg(FC, TCON, F_Capsule, F_Organic)
    Tau_a = Alpha1_3 * Tau_bavg
    Pa1 = Fai(1) * sSigma_pa * sc_a / 1000
    pa3 = Fai(3) * Tau_a * Pai() * da * lce / 1000
    Pa = Application.WorksheetFunction.min(Pa1, pa3)
    
    le_req = sSigma_pa * da / 4# / Tau_a
    
    Kata = UCase(Kata)
    Select Case Kata
        Case UCase("Fai1"): tD = Fai(1)
        Case UCase("Fai2"): tD = Fai(2)
        Case UCase("Fai3"): tD = Fai(3)
    
        Case UCase("Alpha_yu"): tD = Alpha_yu
        Case UCase("sSigma_pa"): tD = sSigma_pa
        Case UCase("lce"):   tD = lce
        Case UCase("Alpha1_3"): tD = Alpha1_3
        Case UCase("Tau_bavg"): tD = Tau_bavg
        Case UCase("Tau_a"): tD = Tau_a
        Case UCase("pa1"):  tD = Pa1
        Case UCase("pa3"):  tD = pa3
        Case UCase("pa"):   tD = Pa
        Case UCase("le_req"):   tD = le_req
        
        
        Case Else
            tD = 0#
    End Select
    MT_PCAB_calTa_2K10 = tD

End Function
Sub calTa_2K10_setFai(Term As String, Fai() As Double)
    Select Case Term
        Case UCase("L"): Fai(1) = 2# / 3#: Fai(2) = 1# / 3#: Fai(3) = 1# / 3#
        Case UCase("S"): Fai(1) = 1#: Fai(2) = 2# / 3#: Fai(3) = 2# / 3#
        Case Else: Fai(1) = 1#: Fai(2) = 1#: Fai(3) = 1
    End Select

End Sub



Function calTa_2K10_calAlpha(ByVal C1 As Variant, ByVal c2 As Variant, ByVal C3 As Variant, _
        ByVal P As Variant, ByVal le As Double, ByVal da As Double, Kata As String) As Double
    Dim tD As Double, tAlpha(3) As Double, Alpha1_3 As Double
    Dim IndexHeri As Integer
    Kata = UCase(Kata)
    If le > 10 * da Then le = 10 * da
    IndexHeri = 0
    If IsNumeric(P) = True Then IndexHeri = IndexHeri + 1
    If IsNumeric(c2) = True And IsNumeric(P) = False Then IndexHeri = IndexHeri + 100
    If IsNumeric(C1) = True Then IndexHeri = IndexHeri + 1000
    If IsNumeric(C3) = True Then IndexHeri = IndexHeri + 10
    Select Case IndexHeri
        Case 1000: '    If IsNumeric(c2) = False And IsNumeric(c3) = False And IsNumeric(p) = False Then '|fffd||402||582||80a0||fffd||fffd|
                    tAlpha(1) = 0.5 * (C1 / le) + 0.5
                    tAlpha(2) = 1
                    tAlpha(3) = 1
        Case 1100: '    Else
                    'If IsNumeric(c3) = False And IsNumeric(p) = False Then  '|fffd||fffd||fffd||582||80a0||fffd||fffd|
                    tAlpha(1) = 0.5 * (C1 / le) + 0.5
                    tAlpha(2) = 0.5 * (c2 / le) + 0.5
                    tAlpha(3) = 1
        Case 1010: '   Else
                    'If IsNumeric(c2) = False And IsNumeric(p) = False Then  '|fffd||fffd||fffd||282||582||80a0||fffd||fffd|
                    tAlpha(1) = 0.5 * (C1 / le) + 0.5
                    tAlpha(2) = 1
                    tAlpha(3) = 0.5 * (C3 / le) + 0.5
        Case 1001 '  Else '|fffd||416||283|w|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||83|A|fffd||fffd||fffd|J|fffd|[|fffd|s|fffd|b|fffd|`|fffd||fffd|
                    tAlpha(1) = 0.5 * (C1 / le) + 0.5
                    c2 = P / 2#
                    tAlpha(2) = 0.5 * (c2 / le) + 0.5
                    tAlpha(3) = 1
        Case 1110 '3|fffd||282||582||80a0||fffd||fffd|
                    tAlpha(1) = 0.5 * (C1 / le) + 0.5
                    tAlpha(2) = 0.5 * (c2 / le) + 0.5
                    tAlpha(3) = 0.5 * (C3 / le) + 0.5
        Case 1011 '|fffd||fffd||fffd||282||582||80a0||fffd||fffd||fffd|w|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||83|A|fffd||fffd||fffd|J|fffd|[|fffd|s|fffd|b|fffd|`|fffd||fffd|
                    tAlpha(1) = 0.5 * (C1 / le) + 0.5
                    c2 = P / 2#
                    tAlpha(2) = 0.5 * (c2 / le) + 0.5
                    tAlpha(3) = 0.5 * (C3 / le) + 0.5
        
        Case Else
                    tAlpha(1) = 0#
                    tAlpha(2) = 0#
                    tAlpha(3) = 0#
    End Select
    
    
    If tAlpha(1) > 1 Then tAlpha(1) = 1
    If tAlpha(2) > 1 Then tAlpha(2) = 1
    If tAlpha(3) > 1 Then tAlpha(3) = 1
    
    Alpha1_3 = tAlpha(1) * tAlpha(2) * tAlpha(3)
    Select Case Kata
        Case UCase("Alpha_1"): tD = tAlpha(1)
        Case UCase("Alpha_2"): tD = tAlpha(2)
        Case UCase("Alpha_3"): tD = tAlpha(3)
        Case UCase("Alpha1_3"): tD = Alpha1_3
        Case UCase("le"): tD = le
        
        Case Else
            tD = 0#
    End Select
    
    calTa_2K10_calAlpha = tD
End Function

Function calTa_2K10_calTau_bavg(FC As Double, TCON As String, F_Capsule As Boolean, F_Organic As Boolean) As Double
    Dim tD As Double
    Select Case F_Capsule
        Case True
            If F_Organic = True Then
                If UCase(left(TCON, 2)) = "NC" Then
                    tD = 10#
                Else
                    tD = 8#
                End If
            Else
                If UCase(left(TCON, 2)) = "NC" Then
                    tD = 5#
                Else
                    tD = 4#
                End If
            End If
       Case Else
                If UCase(left(TCON, 2)) = "NC" Then
                    tD = 7#
                Else
                    tD = 5.6
                End If
    End Select
    tD = tD * (FC / 21#) ^ 0.5
    
    calTa_2K10_calTau_bavg = tD
End Function
Function MT_PCAB_calQa_2K10_WS(rBar As Range, c As Double, rCon As Range, Kata As String) As Variant
    Dim sSiguma_y As Double, sc_a As Double, da As Double, le As Double
    'Dim C As Double
    Dim FC As Double, TCON As String, Term As String

    
    Dim tVB As Variant
    tVB = CV_Range_to_Variant(rBar)
    sSiguma_y = tVB(0): sc_a = tVB(1): da = tVB(2): le = tVB(3):
    tVB = CV_Range_to_Variant(rCon)
    FC = tVB(0): TCON = tVB(1): Term = tVB(2):
    
    MT_PCAB_calQa_2K10_WS = MT_PCAB_calQa_2K10(sSiguma_y, sc_a, da, le, _
                            c, _
                            FC, TCON, Term, _
                            Kata)
End Function




Function MT_PCAB_calQa_2K10(sSiguma_y As Double, sc_a As Double, da As Double, le As Double, _
                            c As Double, _
                            FC As Double, TCON As String, Term As String, _
                            Kata As String) As Double
Attribute MT_PCAB_calQa_2K10.VB_Description = "|fffd|e|fffd||d347||fffd||fffd||fffd|\|fffd||fffd||fffd||74c|v|fffd|w|fffd|j|fffd||fffd|2|fffd||141|@2010|fffd|N|fffd|@ 4.5|fffd|@|fffd||692||fffd||fffd|n|fffd|A|fffd||fffd||fffd|J|fffd|[|fffd|{|fffd||fffd||fffd|g|fffd||310||74c|v 4.5.2|fffd||fffd||fffd||fffd|f|fffd||fffd|"
Attribute MT_PCAB_calQa_2K10.VB_ProcData.VB_Invoke_Func = " \n57"
'|fffd|e|fffd||d347||fffd||fffd||fffd|\|fffd||fffd||fffd||74c|v|fffd|w|fffd|j|fffd||fffd|2|fffd||141|@2010|fffd|N|fffd|@|fffd||fffd|4|fffd||481|@|fffd|e|fffd||fffd|A|fffd||fffd||fffd|J|fffd|[|fffd|{|fffd||fffd||fffd|g|fffd||74c|v|fffd|w|fffd|j|fffd|E|fffd||fffd||fffd|
'4.5|fffd|@|fffd||692||fffd||fffd|n|fffd|A|fffd||fffd||fffd|J|fffd|[|fffd|{|fffd||fffd||fffd|g|fffd||310||74c|v 4.5.2|fffd||fffd||fffd||fffd|f|fffd||342||fffd||fffd||c2bc2||fffd||a347|
    Dim Fai(3) As Double
    Dim tqa(3) As Double, sSigma_qa As Double, Qa As Double, eC As Double
    Dim Gamma As Double, cSigma_qa As Double, cSigma_t As Double
    Dim Aqc As Double, tD As Double
    
    Call calTa_2K10_setFai(Term, Fai)
    sSigma_qa = 0.7 * sSiguma_y
    Gamma = MT_RC_Gamma99(FC, TCON) - 1
    eC = MT_RC_ConE99(Gamma, FC) '
    cSigma_qa = 0.5 * (FC * eC) ^ 0.5
    cSigma_t = 0.31 * FC ^ 0.5
    If TCON <> "NC" Then
        cSigma_t = 0.9 * cSigma_t
    End If
    Aqc = 0.5 * Pai() * c ^ 2
    tqa(1) = Fai(1) * sSigma_qa * sc_a / 1000#
    tqa(2) = Fai(2) * cSigma_qa * sc_a / 1000#
    tqa(3) = Fai(2) * cSigma_t * Aqc / 1000#
    Qa = Application.WorksheetFunction.min(tqa(1), tqa(2), tqa(3))
    Kata = UCase(Kata)
    Select Case Kata
        Case UCase("PHI_1"): tD = Fai(1)
        Case UCase("PHI_2"): tD = Fai(2)
        Case UCase("PHI_3"): tD = Fai(3)
        Case UCase("qa1"): tD = tqa(1)
        Case UCase("qa2"): tD = tqa(2)
        Case UCase("qa3"): tD = tqa(3)
        Case UCase("s_Sigma_qa"): tD = sSigma_qa
        Case UCase("c_Sigma_qa"): tD = cSigma_qa
        Case UCase("c_Sigma_t"): tD = cSigma_t
        Case UCase("qa"): tD = Qa
        Case UCase("Ec"): tD = eC
        Case UCase("Gamma"): tD = Gamma
        Case UCase("Aqc"): tD = Aqc
        Case Else
            tD = 0#
    End Select
    MT_PCAB_calQa_2K10 = tD
 End Function

Attribute VB_Name = "SRC|fffd||fffd||fffd||18e|{|fffd|H|fffd|A|fffd||fffd||fffd|J|fffd|[09"
'post-construction anchor|fffd|@PCAB_SRC|fffd|@|fffd||692||fffd||fffd|n|fffd||fffd||fffd||18e|{|fffd|H|fffd|A|fffd||fffd||fffd|J|fffd|[|fffd|r|fffd|q|fffd|b|fffd||fffd||fffd|C|fffd|w|fffd|j'97
Option Explicit
Public Function PCAB_SRC09_lDa(ByVal Pa As Double, ByVal Ga As Double, ByVal Hairetu As String) As Double
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P213 (3) Da
    Select Case Hairetu
        Case "D"
            PCAB_SRC09_lDa = (Pa ^ 2 + Ga ^ 2) ^ 0.5
        Case "T"
            PCAB_SRC09_lDa = ((Pa / 2) ^ 2 + Ga ^ 2) ^ 0.5
    End Select
            
End Function

Public Function PCAB_SRC09_l0(ByVal le As Double, ByVal da As Double) As Double
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P213 (3) Ac0
    PCAB_SRC09_l0 = le + da / 2#
End Function


Public Function PCAB_SRC09_Ac0(ByVal le As Double, ByVal da As Double) As Double
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P213 (4) Ac0
    
    PCAB_SRC09_Ac0 = Pai() * le * (le + da)
End Function

Public Function PCAB_SRC09_D0(ByVal L0 As Double, ByVal theta1 As Double) As Double
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P231 (5) |fffd|co
    PCAB_SRC09_D0 = 2 * L0 * Sin(theta1)
End Function
Public Function PCAB_SRC09_calTheta(ByVal x As Double, ByVal y As Double) As Double
    If x < y Then
        PCAB_SRC09_calTheta = Acs(x / y)
    Else
        PCAB_SRC09_calTheta = 0#
    End If
End Function


Public Function PCAB_SRC09_Theta_1(ByVal Pa As Double, ByVal L0 As Double) As Double
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P231 (5) |fffd||fffd|1
        PCAB_SRC09_Theta_1 = PCAB_SRC09_calTheta(Pa, 2 * L0)
End Function


Public Function PCAB_SRC09_Theta_2(ByVal Ga As Double, ByVal L0 As Double, ByVal Hairetu As String) As Double
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P231 (5) |fffd||fffd|2
     If Hairetu = "D" Then
        PCAB_SRC09_Theta_2 = PCAB_SRC09_calTheta(Ga, 2 * L0)
    Else
        PCAB_SRC09_Theta_2 = 0#
    End If
End Function

Public Function PCAB_SRC09_Theta_3(ByVal D0 As Double, ByVal L0 As Double, ByVal Hairetu As String) As Double
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P231 (5) |fffd||fffd|3
    If Hairetu = "T" Then
        PCAB_SRC09_Theta_3 = PCAB_SRC09_calTheta(D0, 2 * L0)
    Else
        PCAB_SRC09_Theta_3 = 0#
    End If
 End Function


Public Function PCAB_SRC09_Theta_c1(ByVal Ca1 As Double, ByVal L0 As Double) As Double
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P231 (5) |fffd||fffd|c1
        PCAB_SRC09_Theta_c1 = PCAB_SRC09_calTheta(Ca1, L0)
End Function

Public Function PCAB_SRC09_Theta_c2(ByVal Ca2 As Double, ByVal L0 As Double, ByVal Hairetu As String) As Double
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P231 (5) |fffd||fffd|c2
    If Hairetu = "S" Then
        PCAB_SRC09_Theta_c2 = PCAB_SRC09_calTheta(Ca2, L0)
    Else
        PCAB_SRC09_Theta_c2 = 0#
    End If
End Function



Public Function PCAB_SRC09_cal_delta_A(ByVal theta As Double, ByVal x As Double) As Double
       PCAB_SRC09_cal_delta_A = (2 * theta - Sin(2 * theta)) * x * x
 End Function



Public Function PCAB_SRC09_delta_A1(ByVal theta1 As Double, ByVal L0 As Double) As Double
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P231 (5) |fffd||fffd|A1
        PCAB_SRC09_delta_A1 = PCAB_SRC09_cal_delta_A(theta1, L0)
 End Function

Public Function PCAB_SRC09_delta_A2(ByVal theta2 As Double, ByVal L0 As Double) As Double
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P231 (5) |fffd||fffd|A2
        PCAB_SRC09_delta_A2 = PCAB_SRC09_cal_delta_A(theta2, L0) / 2#
 End Function

Public Function PCAB_SRC09_delta_A3(ByVal Theta_3 As Double, ByVal L0 As Double) As Double
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P231 (5) |fffd||fffd|A3
        PCAB_SRC09_delta_A3 = PCAB_SRC09_cal_delta_A(Theta_3, L0)
 End Function

Public Function PCAB_SRC09_delta_Ac1(ByVal Theta_c1 As Double, ByVal L0 As Double) As Double
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P231 (5) |fffd||fffd|Ac1
        PCAB_SRC09_delta_Ac1 = PCAB_SRC09_cal_delta_A(Theta_c1, L0) / 2#
 End Function

Public Function PCAB_SRC09_delta_Ac2(ByVal Theta_c2 As Double, ByVal L0 As Double) As Double
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P231 (5) |fffd||fffd|Ac1
        PCAB_SRC09_delta_Ac2 = PCAB_SRC09_cal_delta_A(Theta_c2, L0) / 2#
 End Function
Function PCAB_SRC09_calAc_WS(rData As Range, Kata As String) As Variant
    Dim Ca1 As Double, Ca2 As Double, Ga As Double, Pa As Double, le As Double, da As Double
    Dim Hairetu As String
    
    
    
    Dim tVB As Variant
    tVB = CV_Range_to_Variant(rData)
    Ca1 = tVB(0): Ca2 = tVB(1): Ga = tVB(2): Pa = tVB(3): le = tVB(4): da = tVB(5): Hairetu = tVB(6)
    
    
    PCAB_SRC09_calAc_WS = PCAB_SRC09_calAc(Ca1, Ca2, Ga, Pa, le, da, Hairetu, Kata)


End Function
 
Public Function PCAB_SRC09_calAc(ByVal Ca1 As Double, ByVal Ca2 As Double, ByVal Ga As Double, ByVal Pa As Double, ByVal le As Double, ByVal da As Double, _
                ByVal Hairetu As String, Kata As String) As Variant
'10|fffd|d|fffd||34d|H|fffd||fffd||3d0|k|fffd||22ed||fffd||14e|g|fffd|p
'12|fffd||fffd|c|fffd|t|fffd|J,13|fffd||54b||fffd||fffd||14e|g|fffd|p14|fffd||fffd||fffd||fffd||fffd||fffd|,15NHK|fffd||fffd||fffd||fffd|
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P213 Ac|fffd||30c|v|fffd|Z
'Input
'   Ca1,Ca2,pa,Ga P215|fffd|`235|fffd||315|t|fffd|^|fffd|}|fffd||242||fffd||fffd|
'   le da P235 |fffd|t|fffd|^|fffd|}5|fffd||242||fffd||fffd|
'   Hairetu S:|fffd|V|fffd||fffd||fffd|O|fffd||fffd||fffd|@D:|fffd|_|fffd|u|fffd||fffd| T:|fffd||74b9|
'Output Kata|fffd||313||fffd||fffd||342||242||fffd||fffd|
'|fffd|@|fffd|@Kata:"Ac"|fffd|@|fffd|@Ac|fffd||fffd||502||fffd|
'    Kata:"CT"    |fffd|R|fffd|[|fffd||fffd||fffd|^|fffd|C|fffd|v|fffd||fffd||502||fffd|
'            |fffd|@ Sa|fffd|@|fffd|V|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd|(a)|fffd|@P215|fffd|@|fffd|t|fffd|^|fffd|}1.8.1(a)
'|fffd|@             Sb|fffd|@|fffd|V|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd|(b)|fffd|@P215|fffd|@|fffd|t|fffd|^|fffd|}1(b)
'|fffd|@             Sc|fffd|@|fffd|V|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd|(c)|fffd|@P215|fffd|@|fffd|t|fffd|^|fffd|}1(c)
'               Da|fffd|@|fffd|_|fffd|u|fffd||fffd||fffd||fffd|(a)|fffd|@P216|fffd|@|fffd|t|fffd|^|fffd|}1.8.2(a)
'|fffd|@             Db|fffd|@|fffd|_|fffd|u|fffd||fffd||fffd||fffd|(b)|fffd|@P216|fffd|@|fffd|t|fffd|^|fffd|}1.8.2(b)
'|fffd|@             Dc|fffd|@|fffd|_|fffd|u|fffd||fffd||fffd||fffd|(c)|fffd|@P216|fffd|@|fffd|t|fffd|^|fffd|}1.8.2(c)
'               Ta|fffd|@|fffd||74b9||fffd||fffd|(a)|fffd|@P217|fffd|@|fffd|t|fffd|^|fffd|}1.8.2(a)
'|fffd|@             Tb|fffd|@|fffd||74b9||fffd||fffd|(b)|fffd|@P217|fffd|@|fffd|t|fffd|^|fffd|}1.8.2(b)
'|fffd|@             Tc|fffd|@|fffd||74b9||fffd||fffd|(c)|fffd|@P217|fffd|@|fffd|t|fffd|^|fffd|}1.8.2(c)
'    Kata:"Zu"  |fffd|R|fffd|[|fffd||fffd||fffd|^|fffd|C|fffd|v|fffd||310|}|fffd||50d||fffd||fffd||10a6||fffd||fffd|"|fffd|t|fffd|^|fffd|}2(a)"|fffd||fffd||502||fffd|



     Dim tD As Double, CornType As String, Zu As String, tAc As Double
     Dim tS As String, tV As Variant, T As Double
     
     Dim L0 As Double, Ac0 As Double, lDa As Double, theta_1 As Double, D0 As Double
     Dim delta_A1 As Double, theta_2 As Double, delta_A2 As Double, Theta_3 As Double
     Dim delta_A3 As Double, Theta_c1 As Double, delta_Ac1 As Double, Theta_c2 As Double
     Dim delta_Ac2 As Double
     
     
    If Hairetu = "S" Then
        If Ca1 < Ca2 Then
            T = Ca1: Ca1 = Ca2: Ca2 = T
        End If
    End If
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P213
        L0 = PCAB_SRC09_l0(le, da)
        
        Ac0 = PCAB_SRC09_Ac0(le, da)
    
    
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P213
        lDa = PCAB_SRC09_lDa(Pa, Ga, Hairetu)
        
'09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@p231
   ' (5)(a)
        theta_1 = PCAB_SRC09_Theta_1(Pa, L0)
 
        D0 = PCAB_SRC09_D0(L0, theta_1)

        delta_A1 = PCAB_SRC09_delta_A1(theta_1, L0)
   ' (5)(b)
        theta_2 = PCAB_SRC09_Theta_2(Ga, L0, Hairetu)
 
        delta_A2 = PCAB_SRC09_delta_A2(theta_2, L0)
        
   ' (5)(c)
        Theta_3 = PCAB_SRC09_Theta_3(lDa, L0, Hairetu)
 
        delta_A3 = PCAB_SRC09_delta_A3(Theta_3, L0)
        
        
   ' (5)(d)
        Theta_c1 = PCAB_SRC09_Theta_c1(Ca1, L0)
 
        delta_Ac1 = PCAB_SRC09_delta_Ac1(Theta_c1, L0)


        Theta_c2 = PCAB_SRC09_Theta_c2(Ca2, L0, Hairetu)
 
 
        delta_Ac2 = PCAB_SRC09_delta_Ac2(Theta_c2, L0)
        
 '09SRC|fffd|K|fffd|p|fffd||30e||fffd||fffd||fffd||fffd||fffd|@P213
       tS = ""
    
        Select Case Hairetu
            Case "S"
                tS = tS & " |fffd|t|fffd|^|fffd|}1"
                If L0 > Ca1 And L0 > Pa / 2# And D0 / 2# >= Ca1 Then
                      tAc = Pa * (Ca1 + Ca2) - Pai * da * da / 4
                      CornType = "Sa"
                      Zu = tS & "(a)"
                ElseIf L0 > Ca2 And L0 > Pa / 2# And D0 / 2# >= Ca2 Then
                      tAc = (Ac0 - delta_A1) / 2# - delta_Ac1 + Pa * Ca2 - Pai * da * da / 8
                      CornType = "Sb"
                      Zu = tS & "(b)"
                Else
                      tAc = Ac0 - (delta_A1 + delta_Ac1 + delta_Ac2)
                      CornType = "Sc"
                      Zu = tS & "(c)"
                End If
            Case "D"
               tS = tS & " |fffd|t|fffd|^|fffd|}2"

                 If L0 > Ca1 And L0 > Pa / 2# And L0 > lDa / 2# And D0 / 2# >= Ca1 Then
                      tAc = Pa * (Ca1 + Ga / 2#) - Pai * da * da / 4
                      CornType = "Da"
                      Zu = tS & "(a)"
                ElseIf L0 > Pa / 2# And L0 > lDa / 2# And D0 / 2 < Ca1 Then
                      tAc = (Ac0 - delta_A1 + Pa * Ga) / 2# - delta_Ac1 - Pai * da * da / 8
                      CornType = "Db"
                      Zu = tS & "(b)"
                Else
                      tAc = Ac0 - (delta_A1 + delta_A2 + delta_Ac1)
                      CornType = "Dc"
                      Zu = tS & "(c)"
                End If
                      
             Case "T"
                tS = tS & " |fffd|t|fffd|^|fffd|}3"
                If L0 > Ca1 And L0 > Pa / 2# And L0 > lDa / 2# And D0 / 2# >= Ca1 Then
                      tAc = Pa * (Ca1 + Ga / 2#) - Pai * da * da / 4
                      CornType = "Ta"
                      Zu = tS & "(a)"
                ElseIf L0 > Pa / 2# And L0 > lDa / 2# And D0 / 2 < Ca1 And D0 / 2# + L0 / 2# > Ga Then
                      tAc = (Ac0 - delta_A1 + Pa * Ga) / 2# - delta_Ac1 - Pai * da * da / 8
                      CornType = "Tb"
                      Zu = tS & "(a)"
                Else
                      tAc = Ac0 - delta_A1 - delta_A3 - delta_Ac1
                      CornType = "Tc"
                      Zu = tS & "(a)"
                End If
            Case Else
                    tAc = 0#
                    CornType = "ERROR"
                    Zu = "ERROR"

        End Select
        Select Case UCase(Kata)
            Case UCase("AC"): tV = tAc
            Case UCase("CT"): tV = CornType
            Case UCase("Zu"): tV = Zu
            Case UCase("L0"): tV = L0
            Case UCase("Ac0"): tV = Ac0
            Case UCase("lDa"): tV = lDa
            Case UCase("theta_1"): tV = theta_1
            Case UCase("D0"): tV = D0
            Case UCase("delta_A1"): tV = delta_A1
            Case UCase("theta_2"): tV = theta_2
            Case UCase("delta_A2"): tV = delta_A2
            Case UCase("Theta_3"): tV = Theta_3
            Case UCase("delta_A3"): tV = delta_A3
            Case UCase("Theta_c1"): tV = Theta_c1
            Case UCase("delta_Ac1"): tV = delta_Ac1
            Case UCase("Theta_c2"): tV = Theta_c2
            Case UCase("delta_Ac2"): tV = delta_Ac2

            Case Else: tV = "-"
        End Select
        PCAB_SRC09_calAc = tV
 End Function

Function PCAB_SRC09_cal_TaQa_WS(rBar As Range, rCon As Range, rM As Range, Kata As String, Optional SType As String = "|fffd||692||fffd||fffd|n|fffd||776||fffd|") As Variant
    Dim a0 As Double, da As Double, sae As Double, sigma_y As Double
    Dim Ac As Double, C1 As Double, le As Double, Sigma_B As Double, eC As Double
    Dim mAe As Double, m_Sigma_y As Double
'15NHK|fffd|{|fffd||fffd||fffd||fffd||fffd||14e|g|fffd|p
'=PCAB_SRC09_cal_TaQa_WS($N$181:$Q$181,$N$183:$R$183,convToKataStr(C181))
    Dim tVB As Variant
    tVB = CV_Range_to_Variant(rBar)
    da = tVB(0): a0 = tVB(1): sae = tVB(2): sigma_y = tVB(3)
    
    tVB = CV_Range_to_Variant(rCon)
    Ac = tVB(0): C1 = tVB(1): le = tVB(2): Sigma_B = tVB(3): eC = tVB(4)
    
    tVB = CV_Range_to_Variant(rM)
    mAe = tVB(0): m_Sigma_y = tVB(1)
    
    
    PCAB_SRC09_cal_TaQa_WS = PCAB_SRC09_cal_TaQa(da, a0, sae, sigma_y, _
                                Ac, C1, le, Sigma_B, eC, mAe, m_Sigma_y, Kata, SType)


End Function
 


Function PCAB_SRC09_cal_TaQa(da As Double, a0 As Double, sae As Double, sigma_y As Double, _
    Ac As Double, C1 As Double, le As Double, Sigma_B As Double, eC As Double, _
    mAe As Double, m_Sigma_y As Double, _
    Kata As String, Optional SType As String = "|fffd||692||fffd||fffd|n|fffd||776||fffd|") As Variant
'2009|fffd|N|fffd||fffd||fffd||fffd||fffd||fffd|SRC|fffd||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P189 (4.1.1)|fffd||fffd|
Dim le_da As Double, MssgT As String, Ta1 As Double, Ta2 As Double, c1_le As Double
Dim Tau_a As Double, Alpha As Double, Ta3 As Double, tA As Double
Dim Qa1 As Double, Qa2 As Double, MssgQ As String, Qamin As Double, Tau As Double, Qa As Double, Tau_max As Double

 Kata = convToKataStr(Kata)

'|fffd||692||fffd||fffd|n|fffd|A|fffd||fffd||fffd|J|fffd||311||3d7||fffd|
    Select Case SType
        Case "|fffd||692||fffd||fffd|n|fffd||776||fffd|"
            le_da = le / da
                MssgT = ""
                If le_da < 7# Then
                    MssgT = "|fffd||fffd|e/|fffd||fffd|a|fffd||fffd|7.0|fffd|I"
                End If
            '2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P269 (3.9.4-14)|fffd||fffd|
                Ta1 = MT_PCAB_calTa1(sigma_y, a0) * 1000#
            '2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P269 (3.9.4-14)|fffd||fffd|
                Ta2 = MT_PCAB_calTa2(Sigma_B, Ac) * 1000#
            '2009|fffd|N|fffd||fffd||fffd||fffd|SRC|fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P190 (4.1.5)|fffd||fffd|
                c1_le = C1 / le
                Tau_a = 10# * (Sigma_B / 21#) ^ 0.5
                Alpha = 1#
                If c1_le < 1# Then
                    Alpha = 0.5 * c1_le + 0.5
                End If
                Tau_a = Alpha * Tau_a
                Ta3 = Tau_a * Pai() * da * le
                tA = Application.WorksheetFunction.min(Ta1, Ta2, Ta3)
            '2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P268 (3.9.4-8)|fffd||fffd||fffd|@|fffd|||fffd||782||fffd||fffd||fffd|f
                Qa1 = MT_PCAB_calQa1(sigma_y, sae) * 1000#
            '2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P268 (3.9.4-9)|fffd||fffd| '|fffd|x|fffd||fffd|
                Qa2 = MT_PCAB_calQa2(eC, Sigma_B, sae) * 1000#
                
                MssgQ = ""
                'If le_da < 7# Then
                '    MssgQ = "|fffd||fffd|e/|fffd||fffd|a|fffd||fffd|7.0|fffd|I"
                'End If
                Qamin = Application.WorksheetFunction.min(Qa1, Qa2)
                Tau = Qamin / sae
                Qa = Qamin
                Tau_max = 294#
                If Tau > Tau_max Then
                    Qa = Tau_max * sae
                End If
        Case "|fffd||fffd||fffd||fffd||fffd|n|fffd||776||fffd|"
                MssgT = ""
                le_da = le / da
                If le_da < 4# Then
                    MssgT = "|fffd||fffd|e/|fffd||fffd|a|fffd||fffd|4.0|fffd|I"
                End If
            '2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P269 (3.9.4-14)|fffd||fffd|
                Ta1 = MT_PCAB_calTa1(sigma_y, a0) * 1000#
            '2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P269 (3.9.4-14)|fffd||fffd|
                Ta2 = MT_PCAB_calTa2(Sigma_B, Ac) * 1000#
            '2009|fffd|N|fffd||fffd||fffd||fffd|SRC|fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P190 (4.1.5)|fffd||fffd|
                Ta3 = m_Sigma_y * mAe
                tA = Application.WorksheetFunction.min(Ta1, Ta2, Ta3)
            '2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P268 (3.9.4-8)|fffd||fffd||fffd|@|fffd|||fffd||782||fffd||fffd||fffd|f
                Qa1 = MT_PCAB_calQa1(m_Sigma_y, mAe) * 1000#
            '2001|fffd|N|fffd||fffd||fffd||fffd||fffd||151||3d0|k|fffd||fffd||fffd|C|fffd||74c|v|fffd|w|fffd|j|fffd|@P268 (3.9.4-9)|fffd||fffd| '|fffd|x|fffd||fffd|
                Qa2 = MT_PCAB_calQa2(eC, Sigma_B, sae) * 1000#
                MssgQ = ""
                If le_da < 7# Then
                    MssgQ = "|fffd||fffd|e/|fffd||fffd|a|fffd||fffd|7.0|fffd|I"
                    Qa2 = Qa2 * 3# / 4#
                    Tau_max = 245#
                Else
                    MssgQ = "|fffd||fffd|e/|fffd||fffd|a|fffd||fffd|7.0|fffd|I"
                    Tau_max = 294
                End If
                Qamin = Application.WorksheetFunction.min(Qa1, Qa2)
                Tau = Qamin / mAe
                Qa = Qamin
                
                If Tau > Tau_max Then
                    Qa = Tau_max * mAe
                End If
        End Select
        Dim tV As Variant
        Select Case UCase(Kata)
            Case UCase("le_da"): tV = le_da
            Case UCase("MssgT"): tV = MssgT
            Case UCase("Ta1"): tV = Ta1 / 1000#
            Case UCase("Ta2"): tV = Ta2 / 1000#
            Case UCase("c1_le"): tV = c1_le
            Case UCase("Tau_a"): tV = Tau_a
            Case UCase("Alpha"): tV = Alpha
            Case UCase("Tau_a"): tV = Tau_a
            Case UCase("Ta3"): tV = Ta3 / 1000#
            Case UCase("Ta"): tV = tA / 1000#
            Case UCase("Qa1"): tV = Qa1 / 1000#
            Case UCase("Qa2"): tV = Qa2 / 1000#
            Case UCase("MssgQ"): tV = MssgQ
            Case UCase("Qamin"): tV = Qamin / 1000#
            Case UCase("Tau"): tV = Tau
            Case UCase("Qa"): tV = Qa / 1000#
            Case UCase("Tau_max"): tV = Tau_max

            Case Else: tV = 0#
        End Select
        PCAB_SRC09_cal_TaQa = tV
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Option Explicit

Private Sub CommandButton1_Click()
    Dim CS As Worksheet
    Set CS = ActiveSheet
    Call SheetContensclear(CS)
    Call getAllSheetName(CS, 2, 1)
End Sub


Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Sub Workbook_Open()
 'tmOnPr = 0
      
      'Call save10min
      
      Worksheets("|fffd|g|fffd||fffd||fffd||fffd|").Activate
 '     Set MS = ActiveSheet
 '      Call EnableCalculation(MS.Parent, False)

 '     MS.EnableCalculation = True
      
 '     Application.DisplayAlerts = True
 '     AllSheetEnable (True)
End Sub

Sub Workbook_BeforeClose(Cancel As Boolean)

   ' Application.OnTime tmOn, "save10min", False


End Sub

Attribute VB_Name = "|a914||415|z|fffd|p|fffd|R|fffd|[|fffd|h"
Option Explicit

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|auto_open|fffd||58c|W
Sub EnableCalculation(WB As Workbook, B_ON As Boolean)
'|fffd|S|fffd||102||303||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||fffd|EnableCalculation|fffd||fffd|ON|fffd|@OFF
    Dim WS As Worksheet
        With WB
             For Each WS In WB.Worksheets
                
                WS.EnableCalculation = B_ON
                
            Next WS
        End With

End Sub
Public Sub OpenLinkFile(MS As Worksheet, IR As Integer, ic As Integer, Optional F_EnableC As Boolean = True)  '|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd||5c2||fffd||fffd|f|fffd|[|fffd|^|fffd||5c1|[|fffd|X|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||303|I|fffd|[|fffd|v|fffd||fffd|
    Dim filePath As String, FileName As String
    Dim i As Integer
    'Dim actbook As Workbook
    Dim strFileName
    Dim NumFile As Integer
    'Dim IR As Integer, IC As Integer
    
    'Dim MS As Worksheet
    'Set MS = ActiveSheet
    '|fffd||fffd|{|fffd||752||fffd|V|fffd|[|fffd|g|fffd||24a|J|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||702||142||303|p|fffd|X|fffd||fffd||fffd|i|fffd|[
    'filePath = MS.Cells(2, 2).Value
    NumFile = MS.Cells(IR, ic).Value

    Dim |fffd|w|fffd||839e||fffd||fffd|  As Variant, t|fffd||50a|u As String
    't|fffd||50a|u = InputBox("|fffd|J|fffd||fffd||fffd||50a|u|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd|b)|fffd||fffd||fffd||fffd||fffd|l", "|fffd||fffd||fffd||50a||50a|u", "0")
    'If IsNumeric(t|fffd||50a|u) Then
    'Else
    '    t|fffd||50a|u = "0"
    'End If
    't|fffd||50a|u = "00:00:" & MJ_SKeta(CInt(t|fffd||50a|u), 2)
    Call EnableCalculation(MS.Parent, False)
        
    '|fffd||702||fffd||fffd|J|fffd||fffd||fffd||102||fffd||fffd||202||fffd||fffd||a347||fffd||302||74a|J|fffd||fffd|
    For i = 1 To NumFile
        'If i > 1 Then
        '    |fffd|w|fffd||839e||fffd||fffd| = Now + TimeValue(t|fffd||50a|u)  '|fffd||fffd||fffd||74e||fffd||fffd||fffd||fffd||fffd||827d||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|Q
        '    Application.Wait (|fffd|w|fffd||839e||fffd||fffd|)             '|fffd|}|fffd|N|fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd|w|fffd||839e||fffd||fffd||fffd||702||152||fffd||fffd|f|fffd||fffd||fffd||fffd|
                                           '|fffd||fffd||fffd||fffd||fffd||58d||10a|J|fffd||fffd||24f||fffd||fffd||fffd||fffd||fffd||fffd||fffd|}|fffd|N|fffd||fffd|
        'End If
        '|fffd||fffd||fffd||182||303|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||242||fffd||fffd||fffd|
        'actbook.Activate
        FileName = MS.Cells(IR + i, ic).Value
        'On Error Resume Next
        strFileName = FileName
        'On Error GoTo 0
        'Set actbook = Application.ActiveWorkbook
    
        Workbooks.Open FileName:=strFileName
        
        Call EnableCalculation(ActiveSheet.Parent, False)
    Next i
    Dim WBK As Workbook
    If F_EnableC = True Then
        For Each WBK In Workbooks
            Call EnableCalculation(WBK, True)
        Next WBK
    End If

    MS.Activate
    'OpenLinkFile = True
End Sub
Sub AllSheetEnable(F_EnableC As Boolean)

  Dim WBK As Workbook
    If F_EnableC = True Then
        For Each WBK In Workbooks
            Call EnableCalculation(WBK, True)
        Next WBK
    End If
End Sub
Public Function gF|fffd||fffd||fffd|E|fffd||fffd||fffd||fffd|(FN As Variant) As Variant '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|E|fffd||fffd||fffd||fffd|Q|fffd|b|fffd|g|fffd||fffd||fffd||fffd|
'|fffd|V:\|fffd|n|fffd|\1405|fffd|n\|fffd||4d40f||fffd||fffd|f|fffd|[|fffd|^\|fffd||fffd||fffd||fffd||fffd|u|fffd||4d40f||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||13f82||fffd|

    Dim tS As String, tS2
    Dim l As Integer, c As Integer
    tS = FN
    l = Len(tS)
    tS2 = Right(tS, 1)
    If tS2 = "\" Then
        l = l - 1: tS = left(tS, l)
    End If
    c = InStrRev(tS, "\")
       
        gF|fffd||fffd||fffd|E|fffd||fffd||fffd||fffd| = Right(tS, l - c)
End Function


'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Q|fffd||195||fffd||fffd||fffd||fffd||fffd|
Public Function f|fffd|Q|fffd||195||fffd||fffd||fffd||fffd||fffd|(FN As String, SN As String, sC As String, Optional eC As String = "", _
    Optional sR As Long = 0, Optional eR As Long = 0) As String
'|fffd|Q|fffd||197|p|fffd|Z|fffd||fffd||fffd||348||355||fffd||fffd||fffd||fffd||fffd||3ca||fffd|
'|fffd|g|fffd|p|fffd||fffd|@=HLOOKUP(H13,INDIRECT(SansyoMojiretu(FN, SN, SC, EC )),9,FALSE)
'FN :|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd| SN:|fffd|V|fffd|[|fffd|g|fffd||fffd| SC|fffd|F|fffd|J|fffd|n|fffd|Z|fffd||fffd| EC|fffd|F|fffd|I|fffd||fffd||fffd|Z|fffd||fffd|
    '=HLOOKUP(H13,INDIRECT("'[&a1&.xls]BBB '!$V$4:$AR$12"),9,FALSE)
    
    If sR = 0 Then
        sR = 1
    End If
    If eR = 0 Then
        eR = 1000
    End If
     
    Dim tS As String
    
    If eC = "" Then
            tS = sC
    Else
        If Not IsNumeric(Right(sC, 1)) Then
            sC = sC & CStr(sR)
        End If
        If Not IsNumeric(Right(eC, 1)) Then
            eC = eC & CStr(eR)
        End If
        tS = sC & ":" & eC
    End If
    
    If SN = "" Then
        If UCase(Right(FN, 4)) = ".CSV" Then
               tS = "'[" & FN & "]" & left(FN, Len(FN) - 4) & "'" & "!" & tS
        End If
    Else
        If FN = "" Then
              tS = "'" & SN & "'" & "!" & tS

        Else
            tS = "'[" & FN & "]" & SN & "'" & "!" & tS
        End If
        If sC = "" Then
            tS = left(tS, Len(tS) - 2)
            tS = Right(tS, Len(tS) - 1)
            
        End If
    End If
    f|fffd|Q|fffd||195||fffd||fffd||fffd||fffd||fffd| = tS
End Function

Function MJ_SKeta(x As Integer, ketasuu As Integer) As String
'|fffd||fffd||fffd||fffd||30a||590||fffd||fffd||16f11|O|fffd||fffd|Z|fffd||fffd||fffd||fffd||fffd||101|@|fffd||7c2||fffd|l|fffd||fffd|Variant|fffd||242||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||b0a6||fffd||fffd|@|fffd||64ea||fffd||fffd|0|fffd||fffd|t|fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim dx As Double, Rketa As Integer, tSt As String
Dim i As Integer, T As Double

    If x = 0 Then
        Rketa = 1
    Else
        dx = x
        T = Log(dx) / Log(10#)
        Rketa = Application.WorksheetFunction.RoundDown(T + 1.001, 0)
    End If
    If ketasuu - Rketa < 0 Then
        tSt = "########"
    Else
        tSt = CStr(x)
        For i = 1 To ketasuu - Rketa
            tSt = "0" & tSt
        Next i
    
    End If
    MJ_SKeta = tSt
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd|

Sub getAllSheetName(CS As Worksheet, IR As Long, ic As Long, Optional TgtSht As Worksheet = Nothing)
'|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd||311|S|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||30a|l|fffd||fffd|
    
'    Dim WS As Worksheet, WB As Workbook, tv As Variant
'    Dim i As Integer, TS As String, tIR As Long, tIC As Long
'    Set WB = CS.Parent
'    tIR = IR: tIC = ic
'    CS.Unprotect
'        With WB
'             For Each WS In WB.Worksheets
'                TS = WS.Name
'                CS.Cells(tIR, tIC).Value = TS
'                tIR = tIR + 1
'            Next WS
'        End With
'    tIR = IR: tIC = ic + 1
'             For Each WS In WB.Worksheets
'                tv = getSheet_Name_Index_CodeName_WB(WB.Name, WS.Name, "SNtoSI")
'                CS.Cells(tIR, tIC).Value = tv
'                tIR = tIR + 1
'            Next WS
'    tIR = IR: tIC = ic + 2
'             For Each WS In WB.Worksheets
'                tv = getSheet_Name_Index_CodeName_WB(WB.Name, WS.Name, "SNtoCN")
'                CS.Cells(tIR, tIC).Value = tv
'                CS.Cells(tIR, tIC + 1).Value = Replace(tv, "Sheet", "")
'                tIR = tIR + 1
'            Next WS
'|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd||311|S|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||30a|l|fffd||fffd|
'|fffd||fffd||116||fffd||fffd||12c8d||fffd||fffd||fffd||fffd||9f30||102||fffd|CS|fffd||142||202||fffd||fffd||a347||fffd||341|ATgtSht|fffd||fffd||fffd||fffd||342||fffd||fffd||fffd|


    
    Dim WS As Worksheet, WB As Workbook, tV As Variant
    Dim i As Integer, tS As String, tIR As Long, tIC As Long
    If TgtSht Is Nothing Then
        Set WB = CS.Parent
    Else
        Set WB = TgtSht.Parent
    End If
    
    tIR = IR: tIC = ic
    CS.Unprotect
        With WB
             For Each WS In WB.Worksheets
                tS = WS.Name
                CS.Cells(tIR, tIC).Value = tS
                tIR = tIR + 1
            Next WS
        End With
    tIR = IR: tIC = ic + 1
             For Each WS In WB.Worksheets
                tV = getSheet_Name_Index_CodeName_WB(WB.Name, WS.Name, "SNtoSI")
                CS.Cells(tIR, tIC).Value = tV
                tIR = tIR + 1
            Next WS
    tIR = IR: tIC = ic + 2
             For Each WS In WB.Worksheets
                tV = getSheet_Name_Index_CodeName_WB(WB.Name, WS.Name, "SNtoCN")
                CS.Cells(tIR, tIC).Value = tV
                CS.Cells(tIR, tIC + 1).Value = Replace(tV, "Sheet", "")
                tIR = tIR + 1
            Next WS
End Sub

Function getSheet_Name_Index_CodeName_WB(WBName As String, Para As Variant, Kata As String) As Variant
'|fffd||fffd||fffd||303||fffd||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    Dim tV As Variant
    Dim WB As Workbook, SName As String, SIndex As Integer, CName As String
    Set WB = Workbooks(WBName)

    Select Case UCase(Kata)
        Case UCase("SNtoSI"): tV = getSheet_Name_Index_CodeName(WB, CStr(Para), 0, "", Kata)
        Case UCase("SItoSN"): tV = getSheet_Name_Index_CodeName(WB, "", CInt(Para), "", Kata)
        Case UCase("SNtoCN"): tV = getSheet_Name_Index_CodeName(WB, CStr(Para), 0, "", Kata)

        Case UCase("SItoCN"): tV = getSheet_Name_Index_CodeName(WB, "", CInt(Para), "", Kata)

        Case UCase("CNtoSN"): tV = getSheet_Name_Index_CodeName(WB, "", 0, CStr(Para), Kata)
        Case UCase("CNtoSI"): tV = getSheet_Name_Index_CodeName(WB, "", 0, CStr(Para), Kata)
    End Select

    getSheet_Name_Index_CodeName_WB = tV

End Function

Function getSheet_Name_Index_CodeName(WB As Workbook, SName As String, SIndex As Integer, CName As String, Kata As String) As Variant
'|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||316||fffd||fffd|O|fffd|A|fffd||fffd||fffd||7af||fffd||fffd||fffd|A|fffd|R|fffd|[|fffd|h|fffd|l|fffd|[|fffd||fffd|CodeName|fffd||13f82||fffd|
    Dim tV As Variant, Sht As Worksheet
    
    
    Select Case UCase(Kata)
        Case UCase("SNtoSI"): tV = WB.Worksheets(SName).Index
        Case UCase("SItoSN"): tV = WB.Worksheets(SIndex).Name
        Case UCase("SNtoCN"): tV = WB.Worksheets(SName).CodeName
        Case UCase("SItoCN"): tV = WB.Worksheets(SIndex).CodeName
        Case UCase("CNtoSN"):
            For Each Sht In WB.Worksheets
                    If Sht.CodeName = CName Then
                     tV = Sht.Name
                    Exit For
                    End If
            Next
        Case UCase("CNtoSI"):
            For Each Sht In WB.Worksheets
                    If Sht.CodeName = CName Then
                     tV = Sht.Index
                    Exit For
                    End If
            Next
    End Select
    getSheet_Name_Index_CodeName = tV

End Function
Public Sub SheetContensclear(tWS As Worksheet)
'|fffd|V|fffd|[|fffd|g|fffd||303|N|fffd||fffd||fffd|A
    tWS.Cells.ClearContents
End Sub


'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|l|fffd|R|fffd|s|fffd|[
Function AllVCopy(WB As Workbook, Optional fSave As Boolean = True, Optional fAlrt As Boolean = True) As Boolean
'10UD|fffd||fffd||fffd||fffd||fffd||fffd||fffd||14e|g|fffd|p|fffd|@110124RESPM2_1CSV|fffd||fffd||fffd||fffd|(UD|fffd|p).xls
' |fffd|l|fffd||6d1||fffd| Macro |fffd|S|fffd||102||303||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||30a||590||fffd||fffd||202||1c2||fffd|l|fffd|R|fffd|s|fffd|[|fffd||fffd||fffd||115||6d1||fffd||fffd||fffd||fffd||702||fffd||fffd|B

'
 Dim ret As Variant
    Calculate
    'Dim WB As Workbook
    Dim WS As Worksheet
    Dim Save_File, Save_Filename As String
    Dim tV As Variant, tS As String
    Dim ext As String

        'Set WB = ThisWorkbook
    If fSave = True Then
        ret = MsgBox("|fffd|l|fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|O|fffd||255||6d1||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbYesNo)
        tS = WB.FullName
        ext = Right(tS, Len(tS) - InStrRev(tS, "."))
        If ret = vbYes Then
            tV = Application.GetSaveAsFilename(tS, FileFilter:="Microsoft Excel|fffd|u|fffd|b|fffd|N,*." & ext)
            If tV = False Then
            Else
                WB.SaveAs FileName:=tV
            End If
        End If
   Else
       tS = WB.FullName
    End If
        With WB
             For Each WS In WB.Worksheets
                WS.Activate
                ActiveSheet.Unprotect
                WS.Visible = xlSheetVisible
                'ActiveSheet.Range("$A$1:$A$10000").AutoFilter Field:=1
                WS.Select
                Cells.Select
                '|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd|[|fffd||fffd||502||242||fffd||fffd||fffd||10f||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If ActiveSheet.AutoFilterMode = True Then
                  Debug.Print "|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd|[|fffd||752||fffd||3c2||fffd|"
                  Selection.AutoFilter
                ElseIf ActiveSheet.AutoFilterMode = False Then
                  Debug.Print "|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd|[|fffd||fffd||fffd||752||fffd|"
                End If
                Selection.Copy
                Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
                    :=False, Transpose:=False
                 'ActiveSheet.PROTECT DrawingObjects:=True, Contents:=True, Scenarios:=True
            Next WS
        End With
        
    Dim ext2 As String
    ext2 = "xlsx" '|fffd|l|fffd|R|fffd|s|fffd|[|fffd||343|}|fffd|N|fffd||fffd||fffd||fffd||fffd||fffd||fffd||255||3cd|X|fffd||fffd||fffd||fffd|
    
    '|fffd||fffd||fffd|O|fffd||fffd|t|fffd||fffd||fffd||6d1||fffd||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd||752||fffd|
    Save_Filename = left(tS, InStrRev(tS, ".") - 1) & "(|fffd|l|fffd|R|fffd|s|fffd|[)" & "." & ext2
    
    '|fffd|u|fffd||fffd||fffd|O|fffd||fffd|t|fffd||fffd||fffd||115||6d1||fffd||fffd||fffd||fffd||fffd|v|fffd|_|fffd|C|fffd|A|fffd||fffd||fffd|O|fffd|{|fffd|b|fffd|N|fffd|X|fffd||315|\|fffd||fffd|
    If fAlrt = False Then
        Application.DisplayAlerts = False
    End If
    If fAlrt = True Then
    
        Save_File = Application.GetSaveAsFilename(Save_Filename, _
             FileFilter:="Microsoft Excel|fffd|u|fffd|b|fffd|N,*." & ext2)
        If Save_File = tV Then
            ret = MsgBox("|fffd|l|fffd|R|fffd|s|fffd|[|fffd|O|fffd||193||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|A|fffd|{|fffd||fffd||fffd||242||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbOKCancel)
            If ret = vbOK Then
            Else
                End
    
            End If
        End If
    Else
        Save_File = Save_Filename
    End If
'    ActiveWorkbook.SaveAs filename:="C:\Users\watanabe\Desktop\|fffd||fffd||fffd||b0a2||fffd||fffd|(|fffd|l|fffd|R|fffd|s|fffd|[).xlsx", _
'        FileFormat:=xlOpenXMLWorkbook, CreateBackup:=False
    If fAlrt = False Then
        Application.DisplayAlerts = False
    End If
     ActiveWorkbook.SaveAs FileName:= _
     Save_File, _
    FileFormat:=xlOpenXMLWorkbook, CreateBackup:=False
 '    Password:="", WriteResPassword:="", ReadOnlyRecommended:=False, _
 '            CreateBackup:=False
     'FileFormat:=xlNormal,
    If fAlrt = False Then
        Application.DisplayAlerts = True
    End If
     
     
     AllVCopy = True
End Function
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd|h|fffd||fffd||fffd|X|fffd||58c|W

Function getCellAddress(tR As Range, Optional IndxSwtch = 1, Optional F|fffd|l|fffd|R|fffd|s As String = False, Optional sRRC As String = "Rng") As String
'|fffd|Z|fffd||fffd||fffd||303|A|fffd|h|fffd||fffd||fffd|X|fffd||fffd||502||fffd|
     Dim tS As String, RowAbsolute As Boolean, ColumnAbsolute As Boolean, ReferenceStyle As Variant
     Dim External As Boolean, RelativeTo As Boolean
        RowAbsolute = False: ColumnAbsolute = False: ReferenceStyle = xlA1
         External = False: 'RelativeTo As Boolean |fffd|g|fffd||fffd||202||fffd|
'xlA1:            A1 |fffd|`|fffd||fffd||fffd||30e|Q|fffd||182||155||502||fffd||fffd||fffd||702||fffd||fffd|
'xlR1C1:   R1C1 |fffd|`|fffd||fffd||fffd||30e|Q|fffd||182||155||502||fffd||fffd||fffd||702||fffd|
         
     
     Select Case IndxSwtch
        Case 1: External = True '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||702||fffd|
        Case 2: External = True '|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||702||fffd|
        Case Else
     End Select

     Dim indx As Integer
     tS = tR.Address(RowAbsolute, ColumnAbsolute, ReferenceStyle, External)
     If F|fffd|l|fffd|R|fffd|s = True Then
        tS = Replace(tS, ".xlsm", "(|fffd|l|fffd|R|fffd|s|fffd|[).xlsx")
     End If
     
     If IndxSwtch = 2 Then
            indx = InStr(tS, "]")
            tS = "'" & Right(tS, Len(tS) - indx)
     End If
' |fffd|_|fffd|b|fffd|V|fffd||fffd||fffd||303|`|fffd|F|fffd|b|fffd|N
    If left(tS, 1) = "'" Then
    Else
        tS = "'" & tS
    End If
    Dim tI As Integer
    tI = InStr(tS, "!")
    If Mid(tS, tI - 1, 1) = "'" Then
    Else
        tS = Mid(tS, 1, tI - 1) & "'" & Mid(tS, tI, Len(tS) - tI + 1)
    End If
    

'|fffd||64ea||fffd|s|fffd|A|fffd||64ea||fffd||fffd||30e||fffd||fffd|o|fffd||fffd|

    Dim sRw(2) As String, sClmn(2) As String, tIndx(2) As Integer, tS2(3) As String
    
    
    If UCase(sRRC) = "Rng" Then
    Else
        tIndx(1) = InStr(tS, "!")
        tIndx(2) = InStr(tS, ":")
        tS2(1) = left(tS, tIndx(1)) '|fffd||fffd||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||702||fffd|
        tS2(2) = Mid(tS, tIndx(1) + 1, tIndx(2) - 1 - tIndx(1)) '|fffd|J|fffd|n|fffd|Z|fffd||fffd||fffd||fffd|
        tS2(3) = Right(tS, Len(tS) - tIndx(2))  '|fffd|J|fffd|n|fffd|Z|fffd||fffd||fffd||fffd|
        For tI = 1 To 2
            For indx = 1 To Len(tS2(tI + 1))
                If IsNumeric(Mid(tS2(tI + 1), indx)) Then
                        sClmn(tI) = left(tS2(tI + 1), indx - 1)
                        sRw(tI) = Right(tS2(tI + 1), Len(tS2(tI + 1)) - indx + 1)
                        Exit For
                End If
            Next indx
        Next tI
        If UCase(sRRC) = UCase("Clmn") Then
            tS = tS2(1) & sClmn(1) & sRw(1) & ":" & sClmn(2) & sRw(1)
        End If
        If UCase(sRRC) = UCase("Rw") Then
            tS = tS2(1) & sClmn(1) & sRw(1) & ":" & sClmn(1) & sRw(2)
        End If
        
        
     End If
        
    getCellAddress = tS
End Function
Function getAddress(tR As Range) As String
'|fffd|Z|fffd||fffd||fffd||303|A|fffd|h|fffd||fffd||fffd|X|fffd||fffd||502||fffd|(|fffd||fffd||fffd||fffd||fffd|j
    Dim tS As String
    'tS = ColumnNumToColumnName(tR.Column) & CStr(tR.Row)
    tS = tR.Address
      getAddress = tS

End Function



INQUEST-PP=macro
