Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdAktionStarten, 18, 6, MSForms, CommandButton2"
Attribute VB_Control = "CommandButton22, 17, 7, MSForms, CommandButton2"
Attribute VB_Control = "CommandButton21, 16, 8, MSForms, CommandButton2"
Attribute VB_Control = "cmdEntschuetzen_IM_Systeme_DIK, 3, 9, MSForms, CommandButton2"
Attribute VB_Control = "cmdSchuetzen_IM_Systeme_DIK, 4, 10, MSForms, CommandButton2"
Attribute VB_Control = "cmdAlleWBSichtbar, 15, 11, MSForms, CommandButton2"
Option Explicit

' ##################################################
' Schuetzen_Entschuetzen_Assistent - Tabelle1
' F. Boller
' Version: 05.12.2019
' ##################################################


Private Sub cmdAktionStarten_Click()
    Call AktionsformOeffnen
End Sub


Private Sub cmdAlleWBSichtbar_Click()
    Dim wb As Workbook
    Dim msg$
    Dim Anzahl%
    
    msg$ = ""
    Anzahl% = 0
    
    ' --- Schleife durch alle offenen Workbooks
    For Each wb In Workbooks
        Anzahl% = Anzahl% + 1
        
        ' --- wenn das Fenster versteckt ist
        If wb.Name <> ThisWorkbook.Name Then
            If Windows(wb.Name).Visible = False Then
                
                ' --- dann mach es sichtbar
                Windows(wb.Name).Visible = True
                msg$ = msg & "# " & wb.Name & vbCrLf
            Else
                msg$ = msg & ". " & wb.Name & vbCrLf
            End If
        Else
            msg$ = msg & ". " & wb.Name & vbCrLf
        End If
    Next
    
    MsgBox msg$ & vbCrLf & "Fertig. Insgesamt " & Anzahl% & " sind ge|fffd|ffnet.", , "Alle Workbooks einblenden"
End Sub


Private Sub cmdEntschuetzen_Dokumentationsstatus_IM_Systeme_Click()
    QuellPfad$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Quellordner_Dokumentationsstatus_IM_Systeme")
    QuellDatei$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Quelldatei_Dokumentationsstatus_IM_Systeme")
    strKennwort$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Kennwort_Dokumentationsstatus")
    strAktionsArt$ = "Entschuetzen"
    Call Aktion
End Sub

Private Sub cmdEntschuetzen_IM_Systeme_DIK_Click()
    QuellPfad$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Quellordner_IM_Systeme_DIK")
    QuellDatei$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Quelldatei_IM_Systeme_DIK")
    strKennwort$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Kennwort_IM_Systeme_DIK")
    strAktionsArt$ = "Entschuetzen"
    Call Aktion
End Sub


Private Sub cmdSchuetzen_Dokumentationsstatus_IM_Systeme_Click()
    QuellPfad$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Quellordner_Dokumentationsstatus_IM_Systeme")
    QuellDatei$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Quelldatei_Dokumentationsstatus_IM_Systeme")
    strKennwort$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Kennwort_Dokumentationsstatus")
    strAktionsArt$ = "Schuetzen"
    Call Aktion
End Sub


Private Sub cmdSchuetzen_IM_Systeme_DIK_Click()
    QuellPfad$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Quellordner_IM_Systeme_DIK")
    QuellDatei$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Quelldatei_IM_Systeme_DIK")
    strKennwort$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Kennwort_IM_Systeme_DIK")
    strAktionsArt$ = "Schuetzen"
    Call Aktion
End Sub


Private Sub CommandButton21_Click()
    QuellPfad$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Quellordner_Dokumentationsstatus_IM_Systeme")
    QuellDatei$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Quelldatei_Dokumentationsstatus_IM_Systeme")
    strKennwort$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Kennwort_Dokumentationsstatus")
    strAktionsArt$ = "Entschuetzen"
    Call Aktion
End Sub

Private Sub CommandButton22_Click()
    QuellPfad$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Quellordner_Dokumentationsstatus_IM_Systeme")
    QuellDatei$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Quelldatei_Dokumentationsstatus_IM_Systeme")
    strKennwort$ = Workbooks(ThisWorkbook.Name).Sheets("Info").Range("Kennwort_Dokumentationsstatus")
    strAktionsArt$ = "Schuetzen"
    Call Aktion
End Sub
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdEntschl|fffd|sseln, 2, 0, MSForms, CommandButton2"
Option Explicit


Private Sub cmdEntschl|fffd|sseln_Click()

    If Workbooks(ThisWorkbook.Name).Sheets("log").Range("Verschluesselungsquelle") = "" Then Exit Sub
    
    If myRot13(InputBox("Kennwort:", "Freischalten der Entschl|fffd|sselungsfunktion")) = "Nhqvg" Then
    
        Dim Ergebnis$, tmp$

        Ergebnis$ = DeRot13(Workbooks(ThisWorkbook.Name).Sheets("log").Range("Verschluesselungsquelle"))
        
        tmp$ = InputBox("Ergebnis der Entschl|fffd|sselung:", "Entschl|fffd|sselung", Ergebnis$)
    End If
    End
End Sub
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "frmAktion"
Attribute VB_Base = "0{4EFEF0E7-4D9A-4016-91B0-AADB67AE0EB5}{D8341DF5-08B8-4D23-9C95-51BA4ACD747A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub cmbDatei_Change()
    Dim zeile%
    
    zeile% = cmbDatei.ListIndex + 2
    
    '    public const Spalte_Dateiname% = 1
    '    public const Spalte_Pfad% = 2
    '    public const Spalte_Sheets% = 3
    '    public const Spalte_SheetAusnahmen% = 4
    '    public const Spalte_KennwortSheet% = 5
    '    public const Spalte_KennwortBook% = 6
    '    public const Spalte_Kommentar% = 7
    
    ' --- Daten in Formular |fffd|bernehmen
    lblPfad.Caption = ThisWorkbook.Sheets("Daten").Cells(zeile%, Spalte_Pfad%)
    txtSchutz_Sheets.Text = ThisWorkbook.Sheets("Daten").Cells(zeile%, Spalte_Sheets%)
    txtSchutz_AusnahmeSheets.Text = ThisWorkbook.Sheets("Daten").Cells(zeile%, Spalte_SheetAusnahmen%)
    txt_KennwortSheet.Text = ThisWorkbook.Sheets("Daten").Cells(zeile%, Spalte_KennwortSheet%)
    txt_KennwortBook.Text = ThisWorkbook.Sheets("Daten").Cells(zeile%, Spalte_KennwortBook%)
    lblKommentar.Caption = ThisWorkbook.Sheets("Daten").Cells(zeile%, Spalte_Kommentar%)
    
End Sub


Private Sub cmdAbbruch_Click()
    Unload Me
End Sub


Private Sub cmdEntschuetzen_Click()

    QuellPfad$ = lblPfad.Caption
    QuellDatei$ = cmbDatei
    strKennwort$ = txt_KennwortSheet.Text
    strAktionsArt$ = "Entschuetzen"
    Call Aktion

End Sub


Private Sub cmdSchutz_Click()

    QuellPfad$ = lblPfad.Caption
    QuellDatei$ = cmbDatei
    strKennwort$ = txt_KennwortSheet.Text
    strAktionsArt$ = "Schuetzen"
    
    b_SpeichernNachSchutz = chkSchutz_SpeichernNach
    b_OS_Schreibschutz = chkSchutz_Schreibschutz
    
    Call Aktion

End Sub

Private Sub UserForm_Initialize()

    Dim zeile%
    
    With ThisWorkbook.Sheets("Daten")
    
        cmbDatei.Clear
        
        ' --- Schleife durch alle Zeilen im Arbeitsblatt "Daten"
        For zeile% = 2 To .Range("A65535").End(xlUp).Row
        
            cmbDatei.AddItem .Cells(zeile%, Spalte_Dateiname%)
            
        Next
    
    End With
    
    b_init = False
    
    cmbDatei.ListIndex = 0
    
End Sub
Attribute VB_Name = "frmKennwort"
Attribute VB_Base = "0{836CBCF2-710F-4F3A-A766-664AE0BBC094}{BF5864E9-DDA1-432A-8599-B7CE15A3843A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    strKennwort = ""
    Unload frmKennwort
End Sub


Private Sub cmdOK_Click()
    strKennwort = txtKennwort.Text
    Unload frmKennwort
End Sub

Attribute VB_Name = "modMain"
Option Explicit

' ##################################################
' Schuetzen_Entschuetzen_Assistent - modTools
' F. Boller
' Version: 05.12.2019
' ##################################################


' ==============================================
' --- Public Sub AktionsformOeffnen()
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Dialog zum Sch|fffd|tzen/Entsch|fffd|tzen vorbereiten und aufrufen
' ==============================================
Public Sub AktionsformOeffnen()
    
    b_init = True
    b_SpeichernNachSchutz = False
    b_OS_Schreibschutz = False
    
    Load frmAktion
    
    frmAktion.Show 1
    
    
    End
End Sub
Attribute VB_Name = "modTools"
Option Explicit

' ##################################################
' Schuetzen_Entschuetzen_Assistent - modTools
' F. Boller
' Version: 05.12.2019
' ##################################################


' ==============================================
' --- Public Function KennwortEingabe() As Boolean
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Dialog zur Kennworteingabe aufrufen
' ==============================================
Public Function KennwortEingabe() As Boolean
    
    Load frmKennwort
    frmKennwort.txtKennwort.Text = strKennwort$
    frmKennwort.Show 1
    
    If strKennwort$ <> "" Then
        bKennwortManuell = True
        KennwortEingabe = True
    Else
        'MsgBox "Abbruch", vbCritical
        KennwortEingabe = False
    End If
End Function


' ==============================================
' --- Public Sub Aktion(Art$)
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Sch|fffd|tzen oder Entsch|fffd|tzen einer Arbeitsmappe nach Pr|fffd|fung
' ==============================================
Public Sub Aktion()
    
    Select Case strAktionsArt$
    
        Case "Schuetzen":
            If CheckKennwort Then
                If OeffneExcelDatei Then
                    Call WB_Sheets_Ausblenden_Schuetzen(QuellDatei)
                    MsgBox "Die Datei wurde gesch|fffd|tzt, aber noch nicht gespeichert!", vbInformation, QuellDatei$
                Else
                    MsgBox FehlerMsg$
                End If
            End If
            
        Case "Entschuetzen":
            If CheckKennwort Then
                If OeffneExcelDatei Then
                    Call WB_Sheets_Einblenden_Entschuetzen(QuellDatei)
                    MsgBox "Die Datei wurde entsch|fffd|tzt und kann ge|fffd|ndert werden. Bitte nicht vergessen, sie wieder zu sch|fffd|tzen, bevor sie gespeichert wird!", vbInformation, QuellDatei$
                Else
                    MsgBox FehlerMsg$
                End If
            End If
            
        Case Else:
            MsgBox "Im Programm wird ein falscher Aktionswert |fffd|bergeben: " & strAktionsArt$
            
    End Select

End Sub


' ==============================================
' --- Private Function CheckKennwort() As Boolean
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     pr|fffd|fen, ob Kennwort hinterlegt ist, sonst abfragen
' ==============================================
Private Function CheckKennwort() As Boolean
    
    bKennwortManuell = False
    
    If Trim$(strKennwort) <> "" Then
        CheckKennwort = True
        Exit Function
    End If
    
    ' --- Abfrage
    Call KennwortEingabe
    
    If Trim$(strKennwort) <> "" Then
        CheckKennwort = True
    Else
        ' --- wenn gesch|fffd|tzt werden soll, muss auch ein Kennwort eingegeben werden
        If strAktionsArt$ = "Schuetzen" Then
            MsgBox "Es ist kein Kennwort hinterlegt.", , "Abbruch"
            CheckKennwort = False
        Else
            ' --- ge|fffd|ffnet werden darf auch ohne Kennwort
            CheckKennwort = True
        End If
    End If

End Function


' ==============================================
' --- Private Function Datenzugriff_ist_moeglich() As Boolean
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     pr|fffd|ft, ob der Zugriff auf die Arbeitsmappe m|fffd|glich ist
' ==============================================
Private Function Datenzugriff_ist_moeglich() As Boolean
    
    ' --- Versuche, die Quelldatei zu |fffd|ffnen
    If Not OeffneExcelDatei Then
        
        ' --- Hinweis zeigen
        MsgBox FehlerMsg & vbCrLf & vbCrLf & "M|fffd|gliche Fehlerursachen:" & vbCrLf & "- nicht am Server angemeldet" & vbCrLf & "- keine Berechtigungen" & vbCrLf & vbCrLf & "Bitte wende Dich im Zweifelsfall an Frank Boller", vbCritical, "Abbruch - kein Zugriff auf die Arbeitsmappe"
        
        Datenzugriff_ist_moeglich = False
    Else
    End If

End Function



Public Function DirExist(ByVal sPath As String) As Boolean
'**********************************************
' Existiert der Pfad ?
'**********************************************
    On Error GoTo DirExistHandler
    
    DirExist = (Dir(sPath, vbDirectory + vbHidden + vbSystem) <> "")
    On Error GoTo 0
    Exit Function
  
DirExistHandler: 'Laufwerk existiert nicht o.|fffd|.
    DirExist = False
    Resume Next
  
End Function


'**********************************************
' Existiert eine Datei mit einer L|fffd|nge > 0 ?
'**********************************************
Public Function FileExistsWithFileLen(ByVal filename As String)
    
    Dim Length As Long

    On Error GoTo FileDoesntExist
    Length = FileLen(filename)
    FileExistsWithFileLen = True
    Exit Function
    
FileDoesntExist:
    FileExistsWithFileLen = False
End Function




'**********************************************
' NameOhnePfad
' = Dateiname vom Pfad befreien
'**********************************************
Public Function NameOhnePfad(Pfad$) As String
    Dim pos%
    
    pos% = InStrRev(Pfad, "\")
    If pos% > 0 Then
        NameOhnePfad = Right(Pfad, Len(Pfad) - pos)
    Else
        NameOhnePfad = Pfad$
    End If
    
End Function


' ==============================================
' --- Public Function OeffneExcelDatei() As Boolean
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Exceldatei |fffd|ffnen, wenn m|fffd|glich
' Vorgaben:
' - Quellpfad = Verzeichnis
' - QuellDatei = Dateiname
' ==============================================
Public Function OeffneExcelDatei() As Boolean

    Dim wb As Workbook
    Dim ws As Worksheet
    Dim bExists As Boolean
    Dim errnum%
    
    
    ' --- Pr|fffd|fen, ob Zielworkbook auf diesem PC bereits ge|fffd|ffnet ist
    For Each wb In Workbooks
        If wb.Name = QuellDatei Then
            ' --- Abbruch
            OeffneExcelDatei = True
            Exit Function
        End If
    Next
    
    ' --- Pr|fffd|fen, ob Verzeichnis existiert
    If Not DirExist(QuellPfad) Then
        FehlerMsg$ = "Kein Zugriff auf das Datenverzeichnis:" & vbCrLf & QuellPfad
        OeffneExcelDatei = False
        Exit Function
    End If
    
    ' --- Pr|fffd|fen, ob Datei existiert
    If Not FileExistsWithFileLen(QuellPfad & QuellDatei) Then
        FehlerMsg$ = "Kein Zugriff auf Datei" & vbCrLf & QuellDatei & vbCrLf & "im Ordner" & vbCrLf & QuellPfad
        OeffneExcelDatei = False
        Exit Function
    End If
    
    
    ' --- Pr|fffd|fen, ob Datei durch anderen Benutzer ge|fffd|ffnet ist (|fffd|ber das Netzwerk)
    If IsFileOpen(QuellPfad & QuellDatei) Then
        ' @@@ Hinweis, erneut versuchen
        FehlerMsg$ = "Datei ist durch anderen Benutzer ge|fffd|ffnet:" & vbCrLf & QuellDatei & vbCrLf & "im Ordner" & vbCrLf & QuellPfad
        ' --- Abbruch
        OeffneExcelDatei = False
        Exit Function
    End If


    ' --- wenn die Quelldatei schreibgesch|fffd|tzt ist...
    If GetAttr(QuellPfad & QuellDatei) And vbReadOnly Then

        ' --- Clear Error Object
        Err.Clear
        
        ' --- Set Error Handler
        On Error Resume Next
        
        ' --- Schreibschutzattribut entfernen (Versuch)
        SetAttr QuellPfad & QuellDatei, vbArchive
        
        ' --- Fehlercode auswerten
        Select Case Err.Number
            
            ' --- kein Fehler gemeldet
            Case 0
            
            ' --- Fehler beim Entfernen des Schreibschutzes
            Case Else
            
                ' --- dokumentieren
                MsgBox "Die Datei ist schreibgesch|fffd|tzt." & vbCrLf & _
                "Fehler beim Entfernen des Schreibschutzes #" & Err.Number & ": " & Err.Description, , "Abbruch"
                
                ' --- Abbruch
                OeffneExcelDatei = False
                
                ' --- Clear Error Object
                Err.Clear
                
                ' --- Disable Error Handler
                On Error GoTo 0
                Exit Function
            
        End Select
        
        ' --- Disable Error Handler
        On Error GoTo 0
        
        ' --- immer noch schreibgesch|fffd|tzt?
        If GetAttr(QuellPfad & QuellDatei) And vbReadOnly Then
        
            ' --- dokumentieren
            MsgBox "Die Datei ist schreibgesch|fffd|tzt, der Schreibschutz konnte nicht entfernt werden.", , "Abbruch"
            
            ' --- Abbruch
            OeffneExcelDatei = False
            
            ' --- Clear Error Object
            Err.Clear
            
            ' --- Disable Error Handler
            On Error GoTo 0
            Exit Function
            
        End If
    End If


    ' --- Bildschirmaktualisierung ausschalten
'    Application.ScreenUpdating = False
    
    ' --- Anzeige der Fenster in Taskleiste ausschalten
'    Application.ShowWindowsInTaskbar = False
    
    ' --- Datei |fffd|ffnen
    
    ' --- Fehlerabfang
    On Error GoTo ErrHandlerOeffneExcelDatei
    Workbooks.Open QuellPfad & QuellDatei
    On Error GoTo 0
    
    ' --- Name des Fensters auslesen
    ' wbQuellWinName$ = QuellDatei
    
    ' --- Fenster ausblenden
'    Windows(wbQuellWinName$).Visible = False
    
    ' --- Fenster verkleinern
    Call QuelldateiFensterVerkleinern
    
    '    ' --- wenn der Assistent ge|fffd|ffnet wird ...
    '    If QuellDatei$ = "Homepage_Rechnungsassistent.xlsm" Then
    '
    '        ' --- alle vorhandenen Arbeitsbl|fffd|tter nach wichtigem Blatt durchsuchen
    '        bExists = ExistiertSheet(QuellDatei, "Veranstaltungsart")
    '
    '    Else ' --- wenn Datendatei ge|fffd|ffnet wird...
    '
    '        ' --- alle vorhandenen Arbeitsbl|fffd|tter nach wichtigem Blatt durchsuchen
    '        bExists = ExistiertSheet(QuellDatei, "Homepagebestellungen")
    '    End If
    
    ' --- Anzeige der Fenster in Taskleiste wieder einschalten
'    Application.ShowWindowsInTaskbar = True
    
    ' --- Bildschirmaktialisierung einschalten
'    Application.ScreenUpdating = True

    '    ' --- gefunden? Alles OK
    '    If bExists Then
    '        OeffneExcelDatei = True
    '
    '    Else
    '        ' --- nicht die richtige Datei gefunden?
    '
    '        ' --- Datei wieder schlie|fffd|en
    '        Windows(QuellDatei).Close SaveChanges:=False
    '
    '        FehlerMsg$ = "Die folgende Quelldatei enth|fffd|lt nicht die notwendigen Arbeitsbl|fffd|tter:" & vbCrLf & QuellPfad & QuellDatei
    '        OeffneExcelDatei = False
    '    End If
    
    OeffneExcelDatei = True
    Exit Function
    
ErrHandlerOeffneExcelDatei:
    errnum = Err
    On Error GoTo 0
    
    MsgBox "Es ist ein Fehler beim |fffd|ffnen der Exceldatei aufgetreten (#" & errnum & ")." & vbCrLf & QuellPfad & QuellDatei, vbCritical, "Fehler beim |fffd|ffnen der Exceldatei"
    
    ' --- Abbruch
    OeffneExcelDatei = False
    
End Function


' ==============================================
' --- Private Sub SchliesseExcelDatei()
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Exceldatei schlie|fffd|en, wenn m|fffd|glich
' ==============================================
Private Sub SchliesseExcelDatei()
    
    
    ' --- Bildschirmaktualisierung abschalten
'    Application.ScreenUpdating = False
    
    ' --- Sichtbar machen
'    Windows(wbQuellWinName$).Visible = False
    
    ' --- Daten|fffd|nderungen sichern
'    Workbooks(wbQuellWinName$).Save
    
    ' --- Schliessen
    Windows(QuellDatei).Close SaveChanges:=False
    
    ' --- Bildschirmaktualisierung anschalten
'    Application.ScreenUpdating = True

End Sub



' ==============================================
' --- Private Function IsFileOpen(filename As String)
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Pr|fffd|fung, ob Datei bereits ge|fffd|ffnet ist (|fffd|ber Netzwerk)
' ==============================================
Private Function IsFileOpen(filename As String)

    Dim filenum As Integer, errnum As Integer

    On Error Resume Next   ' Turn error checking off.
    
    filenum = FreeFile()   ' Get a free file number.
    ' Attempt to open the file and lock it.
    Open filename For Input Lock Read As #filenum
    Close filenum          ' Close the file.
    errnum = Err           ' Save the error number that occurred.
    On Error GoTo 0        ' Turn error checking back on.

    ' Check to see which error occurred.
    Select Case errnum

        ' No error occurred.
        ' File is NOT already open by another user.
        Case 0
            IsFileOpen = False

        ' Error number for "Permission Denied."
        ' File is already opened by another user.
        Case 70
            IsFileOpen = True

        ' Another error occurred.
        Case Else
            Error errnum
    End Select
    
End Function


' ==============================================
' --- Private Function ExistiertSheet(Workbook$, SheetName$) As Boolean
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Pr|fffd|fung, ob Sheet existiert
' ==============================================
Private Function ExistiertSheet(Workbook$, SheetName$) As Boolean
    Dim ws As Worksheet
    
    ExistiertSheet = False
    
    For Each ws In Workbooks(QuellDatei).Worksheets
        If ws.Name = SheetName$ Then
            ExistiertSheet = True: Exit For
        End If
    Next
    

End Function

' ==============================================
' --- Function DeRot13(ByVal Text As String) As String
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 11.07.2017, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     DeKodierung eines C|fffd|sar-verschl|fffd|sselten Textes
' ==============================================
Public Function DeRot13(ByVal Text As String) As String
    
    Dim i As Long ' --- Schleifenz|fffd|hler
    
    ' --- falls der |fffd|bergebene String leer ist...
    If Len(Text) = 0 Then
        ' --- gib einen leeren String zur|fffd|ck
        DeRot13 = ""
        Exit Function
    End If
    
    ' --- Schleife durch alle Zeichen des Textes
    For i = 1 To Len(Text)
    
        ' --- in Abh|fffd|ngigkeit des Zeichens (Buchstaben, Zahlen)...
        Select Case Asc(UCase$(Mid$(Text, i, 1)))
            
            ' --- verschiebe den ASCII-Wert des Zeichens
            Case Asc("A") + 13 To Asc("M") + 13
                Mid$(Text, i) = Chr$(Asc(Mid$(Text, i, 1)) - 13)
                
            Case Asc("N") - 13 To Asc("Z") - 13
                Mid$(Text, i) = Chr$(Asc(Mid$(Text, i, 1)) + 13)
                
            Case Asc("0") + 5 To Asc("4") + 5
                Mid$(Text, i) = Chr$(Asc(Mid$(Text, i, 1)) - 5)
                
            Case Asc("5") - 5 To Asc("9") - 5
                Mid$(Text, i) = Chr$(Asc(Mid$(Text, i, 1)) + 5)
        End Select
    Next i

    ' --- R|fffd|ckgabe des dekodierten Textes
    DeRot13 = Text
End Function


' ==============================================
' --- Function myRot13(ByRef Text As String) As String
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 11.07.2017, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     C|fffd|sar-Kodierung eines Textes
' ==============================================
Public Function myRot13(ByVal Text As String) As String
    
    Dim i As Long ' --- Schleifenz|fffd|hler
    
    ' --- falls der |fffd|bergebene String leer ist...
    If Len(Text) = 0 Then
        ' --- gib einen leeren String zur|fffd|ck
        myRot13 = ""
        Exit Function
    End If
    
    ' --- Schleife durch alle Zeichen des Textes
    For i = 1 To Len(Text)
    
        ' --- in Abh|fffd|ngigkeit des Zeichens (Buchstaben, Zahlen)...
        Select Case UCase$(Mid$(Text, i, 1))
            
            ' --- verschiebe den ASCII-Wert des Zeichens
            Case "A" To "M"
                Mid$(Text, i) = Chr$(Asc(Mid$(Text, i, 1)) + 13)
                
            Case "N" To "Z"
                Mid$(Text, i) = Chr$(Asc(Mid$(Text, i, 1)) - 13)
                
            Case "0" To "4"
                Mid$(Text, i) = Chr$(Asc(Mid$(Text, i, 1)) + 5)
                
            Case "5" To "9"
                Mid$(Text, i) = Chr$(Asc(Mid$(Text, i, 1)) - 5)
        End Select
    Next i
    
    myRot13 = Text
End Function


' ==============================================
' --- Private Sub WB_Sheets_Ausblenden_Schuetzen(ByVal wbname$)
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     alle Sheets im Workbook mit Kennwort sch|fffd|tzen
'
'' Setze einen Schutz f|fffd|r das Tabellenblatt, der
'' * Benutzereingaben verweigert
'' * UserInterfaceOnly = VBA-Eingaben erm|fffd|glicht
'' * DrawingObjects = Formen sind gesch|fffd|tzt
'' * Contents = Inhalte sind gesch|fffd|tzt (gesperrte Zellen, Diagramme komplett)
'' * Scenarios
'
'    ActiveSheet.EnableSelection = xlNoRestrictions
' ==============================================
Private Function WB_Sheets_Ausblenden_Schuetzen(ByVal wbname$) As Boolean

    Dim ws As Worksheet
    Dim b_isProtected As Boolean
    
    Application.ScreenUpdating = False
    
    b_isProtected = False
    
    ' --- Pr|fffd|fen, ob Sheets schon gesch|fffd|tzt sind  ' @@@ gefilterte Liste
    For Each ws In Workbooks(wbname$).Worksheets
    
        ' --- Pr|fffd|fen, ob Sheet schon gesch|fffd|tzt ist
        If ws.ProtectContents = True Then
        
            b_isProtected = True
            
        End If
            
    Next
    
    If b_isProtected Then
        ' --- Sheets schon gesch|fffd|tzt. Trotzdem sch|fffd|tzen (Kennwort |fffd|berschreiben)?
        If MsgBox("In der Arbeitsmappe gibt es schon gesch|fffd|tzte Arbeitsbl|fffd|tter. " & vbCrLf & _
            "Soll dieser Schutz |fffd|berschrieben werden?", vbOKCancel, "ACHTUNG") = vbCancel Then
            WB_Sheets_Ausblenden_Schuetzen = False
            Exit Function
        End If
    End If
    
    ' --- Sheets sch|fffd|tzen ' @@@ gefilterte Liste
    For Each ws In Workbooks(wbname$).Worksheets
        ' --- nur sch|fffd|tzen, nicht ausblenden
        ws.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, UserInterfaceOnly:=True, AllowFormattingCells:=False, AllowFormattingColumns:=False, AllowFormattingRows:=False, Password:=strKennwort
        '    If ws.Name = "Info" Then
        '        ' --- nur sch|fffd|tzen, nicht ausblenden
        '        ws.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, UserInterfaceOnly:=True, AllowFormattingCells:=False, AllowFormattingColumns:=False, AllowFormattingRows:=False, Password:=myRot13(myKeyword)
        '    Else
        '        ' --- sch|fffd|tzen und ausblenden
        '        ws.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, UserInterfaceOnly:=True, AllowFormattingCells:=False, AllowFormattingColumns:=False, AllowFormattingRows:=False, Password:=myRot13(myKeyword)
        '        ws.Visible = xlSheetHidden
        '    End If
    Next
    
    ' --- protokolliere Kennwort aus Sicherheitsgr|fffd|nden
    Call LogSchutz
    
    '    ' --- wenn das Kennwort manuell eingegeben wurde, protokolliere es aus Sicherheitsgr|fffd|nden
    '    If bKennwortManuell Then
    '    End If
    
    Application.ScreenUpdating = True
    
    WB_Sheets_Ausblenden_Schuetzen = True
    
End Function


' ==============================================
' --- Private Sub LogSchutz()
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Kennwort zum Sch|fffd|tzen protokollieren
' ==============================================
Private Sub LogSchutz()

    Dim AnzahlLOGs As Long
    
    ' --- letzte Zeile in Tabelle Log suchen
    AnzahlLOGs = ThisWorkbook.Sheets("Log").Range("A65535").End(xlUp).Row
    If AnzahlLOGs >= 65535 Then
        MsgBox "Log-Tabelle ist voll, bitte alte Inhalte verschieben", vbCritical, "Abbruch Protokollierung der Kennw|fffd|rter"
        Exit Sub
    End If
    
    ' --- Eintrag in neue Zeile
    With ThisWorkbook.Sheets("Log")
        .Unprotect (DeRot13(internesKennwort$))
        .Range("A" & AnzahlLOGs + 1).Value = Now
        .Range("B" & AnzahlLOGs + 1).Value = QuellDatei$
        .Range("C" & AnzahlLOGs + 1).Value = QuellPfad$
        .Range("D" & AnzahlLOGs + 1).Value = Environ("USERNAME")
        .Range("E" & AnzahlLOGs + 1).Value = myRot13(strKennwort)
        .Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, UserInterfaceOnly:=True, AllowFormattingCells:=False, AllowFormattingColumns:=False, AllowFormattingRows:=False, Password:=DeRot13(internesKennwort$)
    End With
    
    ' --- direkt nach dem Protokollieren Datei speichern
    Call ThisWorkbookSave

End Sub


' ==============================================
' --- Private Sub WB_Sheets_Einblenden_Entschuetzen(ByVal wbname$)
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Arbeitsbl|fffd|tter einblenden und entsch|fffd|tzen
' ==============================================
Private Sub WB_Sheets_Einblenden_Entschuetzen(ByVal wbname$)
    Dim ws As Worksheet

    Application.ScreenUpdating = False
    
    For Each ws In Workbooks(wbname$).Worksheets
        If strKennwort$ <> "" Then ws.Unprotect (strKennwort)
        ws.Visible = xlSheetVisible
    Next
    
    Application.ScreenUpdating = True
End Sub


' ==============================================
' --- Private Sub QuelldateiFensterVerkleinern()
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     QuelldateiFensterVerkleinern
' ==============================================
Private Sub QuelldateiFensterVerkleinern()
    Exit Sub
    Dim win As Window
    For Each win In Application.Windows
        If win.Caption = QuellDatei Then 'Workbooks(QuellDatei).Name Then
            win.WindowState = xlMinimized
            DoEvents
'            MsgBox "Quelldatei minimiert"
        End If
    Next
End Sub


' ==============================================
' --- Private Sub ThisWorkbookSave()
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     diese Arbeitsmappe ohne Fehlermeldungen speichern
' ==============================================
Private Sub ThisWorkbookSave()
    ' --- Arbeitsmappe speichern
    Application.DisplayAlerts = False
    ThisWorkbook.Save
    Application.DisplayAlerts = True

End Sub


' ==============================================
' --- Private Sub Kennwortverschluesselung()
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     nur zum manuellen Aufruf: Verschl|fffd|sselung eines eingegebenen Worts
' ==============================================
Private Sub Kennwortverschluesselung()
    Dim s$
    Dim t$
    
    t$ = ""
    t$ = InputBox("Kennwort unverschl|fffd|sselt eingeben:", "Kennwortverschl|fffd|sselung")
    If t$ = "" Then Exit Sub
    
    s$ = InputBox("Das verschl|fffd|sselte Kennwort lautet:", "Kennwortverschl|fffd|sselung", myRot13(t$))
    
    End
End Sub


' ==============================================
' --- Private Sub LogSheetSchuetzenUndAusblenden()
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     nur zum manuellen Aufruf: Schutz und Ausblenden des Log-Arbeitsblattes
' ==============================================
Private Sub LogSheetSchuetzenUndAusblenden()
    '    Dim myKennwort$, myKennwort2$
    '
    '    myKennwort$ = InputBox("Kennwort:", "Sch|fffd|tzen des Arbeitsblatts 'Log'")
    '    If myKennwort$ = "" Then Exit Sub
    '
    '    myKennwort2$ = InputBox("Wiederholung:", "Sch|fffd|tzen des Arbeitsblatts 'Log'")
    '
    '    If myKennwort$ <> myKennwort2$ Then
    '        MsgBox "Kennw|fffd|rter nicht identisch, Abbruch"
    '        Exit Sub
    '    End If
    
    Application.ScreenUpdating = False
    ThisWorkbook.Sheets("Log").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, UserInterfaceOnly:=True, AllowFormattingCells:=False, AllowFormattingColumns:=False, AllowFormattingRows:=False, Password:=DeRot13(internesKennwort$)
    ThisWorkbook.Sheets("Log").Visible = xlSheetHidden
    Application.ScreenUpdating = True
    
    MsgBox "Das Arbeitsblatt ist gesch|fffd|tzt und ausgeblendet, aber die Datei ist noch nicht gespeichert."
    
    End

End Sub


' ==============================================
' --- Private Sub LogSheetEinblendenUndEntschuetzen()
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     Version: 05.12.2019, F. Boller
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'     nur zum manuellen Aufruf: Einblenden und Entsch|fffd|tzen des Log-Arbeitsblattes
' ==============================================
Private Sub LogSheetEinblendenUndEntschuetzen()
    '    Dim myKennwort$
    '
    '    myKennwort$ = InputBox("Kennwort", "Entsch|fffd|tzen des Arbeitsblatts 'Log'")
    '    If myKennwort$ = "" Then Exit Sub
    
    Application.ScreenUpdating = False
    ThisWorkbook.Sheets("Log").Unprotect (DeRot13(internesKennwort$))
    ThisWorkbook.Sheets("Log").Visible = xlSheetVisible
    Application.ScreenUpdating = True
    
    End
End Sub

Attribute VB_Name = "modUnbenutzt"
Option Explicit


'    ' -----------------------------------------------------------
'    ' AssistentAusblenden
'    ' -----------------------------------------------------------
'    Public Sub AssistentAusblenden()
'        Dim win As Window
'        If Application.Workbooks.Count = 1 Then
'            Application.Visible = False
'            DoEvents
'    '        MsgBox "Excel ausgeblendet"
'        Else
'            For Each win In Application.Windows
'                If win.Caption = ThisWorkbook.Name Then
'                    win.Visible = False
'                    DoEvents
'    '                MsgBox "Assistent ausgeblendet"
'                End If
'            Next
'        End If
'    End Sub
'
'
'    ' -----------------------------------------------------------
'    ' AssistentEinblenden
'    ' -----------------------------------------------------------
'    Public Sub AssistentEinblenden()
'        Dim win As Window
'        If Application.Workbooks.Count = 1 Then
'            Application.Visible = True
'            DoEvents
'    '        MsgBox "Excel eingeblendet"
'        Else
'            For Each win In Application.Windows
'                If win.Caption = ThisWorkbook.Name Then
'                    win.Visible = True
'                    DoEvents
'    '                MsgBox "Assistent eingeblendet"
'                End If
'            Next
'        End If
'    End Sub


'**********************************************
'**********************************************
'**********************************************
' nur f|fffd|r manuellen Aufruf
'**********************************************
'**********************************************
'**********************************************



'    Private Sub WB_Aktion()
'        Dim wb As Workbook
'        For Each wb In Workbooks
'            If (wb.Name = NameOhnePfad(Zieldatei_KHK$)) Or (wb.Name = NameOhnePfad(Zieldatei_Veranstaltungen$)) Then
'                Windows(wb.Name).Visible = True
'                MsgBox wb.Name, , "jetzt sichtbar"
'            End If
'        Next
'        End
'
'    End Sub

'    Private Sub SchliesseXLSXDateiManuell()
'        ' --- Ohne Datensicherung schlie|fffd|en
'        Windows(NameOhnePfad(Zieldatei_KHK$)).Close SaveChanges:=False
'    End Sub
'
'
'    Private Sub SchuetzeThisWorkbook()
'        Call WB_Sheets_Ausblenden_Schuetzen(ThisWorkbook.Name)
'        End
'    End Sub
'
'    Private Sub EntschuetzeThisWorkbook()
'        Call WB_Sheets_Einblenden_Entschuetzen(ThisWorkbook.Name)
'        End
'    End Sub






'    Private Sub myVersion()
'        MsgBox Application.Version
'        End
'    End Sub

Attribute VB_Name = "modVar"
Option Explicit

' ##################################################
' Schuetzen_Entschuetzen_Assistent - modVar
' F. Boller
' Version: 05.12.2019
' abgeleitet von Schuetzen_Entschuetzen_Assistent.xlsm (Homepageassistent)
' ##################################################

Public Const internesKennwort$ = "nhqvg"

Public Const Spalte_Dateiname% = 1
Public Const Spalte_Pfad% = 2
Public Const Spalte_Sheets% = 3
Public Const Spalte_SheetAusnahmen% = 4
Public Const Spalte_KennwortSheet% = 5
Public Const Spalte_KennwortBook% = 6
Public Const Spalte_Kommentar% = 7

Public QuellDatei$
Public QuellPfad$
Public strKennwort$
Public FehlerMsg$
Public bKennwortManuell As Boolean
Public strAktionsArt$

Public b_init As Boolean
Public b_SpeichernNachSchutz As Boolean
Public b_OS_Schreibschutz As Boolean

' InQuest injected base64 decoded content
' jwez

INQUEST-PP=macro
