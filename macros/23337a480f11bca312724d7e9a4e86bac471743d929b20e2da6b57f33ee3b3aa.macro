Attribute VB_Name = "Arkusz1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Arkusz2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Arkusz3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Arkusz4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Module1"
Option Explicit
'----------------------------------------------------------------------------------'
'HELP
'Jawne Deklarowanie:
'Deklarowanie zmiennych za pomoc|fffd| s|fffd||fffd|w kluczowych Dim, Private, Public, oraz Static nazywamy jawnym deklarowaniem.
'Zmienna w j|fffd|zyku Visual Basic mo|fffd|e by|fffd| te|fffd| niejawnie zadeklarowana po prostu przez u|fffd|ycie jej w instrukcji przypisania.
'Wszystkie zmienne zadeklarowane niejawnie s|fffd| typu Variant.
'Zmienne typu Variant wymagaj|fffd| wi|fffd|cej zasob|fffd|w pami|fffd|ci ni|fffd| wi|fffd|kszo|fffd||fffd| innych zmiennych.
'Jawne deklarowanie wszystkich zmiennych redukuje niebezpiecze|fffd|stwo wyst|fffd|pienia b|fffd||fffd|d|fffd|w wynikaj|fffd|cych z konflikt|fffd|w nazw i pomy|fffd|ek w pisowni.
'Aby unikn|fffd||fffd| przykrych niespodzianek dobrze by|fffd|oby wyrobi|fffd| sobie nawyk jawnego deklarowania wszystkich zmiennych.
'Bardzo pomocna w tym mo|fffd|e okaza|fffd| si|fffd| instrukcja Option Explicit.
'Je|fffd|eli w sekcji deklaracji modu|fffd|u kodu wpiszesz:
'Option Explicit
'VBA wy|fffd|wietli komunikat o b|fffd||fffd|dzie, ilekro|fffd| wykryje niezadeklarowan|fffd| zmienn|fffd|.
'W takim przypadku mo|fffd|emy doda|fffd| brakuj|fffd|c|fffd| deklaracj|fffd|.
'Instrukcja Option Explicit wykorzystywana jest na poziomie modu|fffd|u w celu wymuszenia jawnego deklarowania wszystkich zmiennych w danym module.
'------------------------------------------------------------------------------------'
'http://dzono4.w.interia.pl/kurs/zmienne.htm
'------------------------------------------------------------------------------------'





Public Function NazwaDnia(NumerDnia As Integer)
'funkcja podaje nazw|fffd| dnia tygodnia na podstawie jego numeru w formacie 2.

'budowa tabeli z nazwami dni tygodnia
Dim tydzien(1 To 7) As String
tydzien(1) = "(Poniedzia|fffd|ek)"
tydzien(2) = "(Wtorek)"
tydzien(3) = "(|fffd|roda)"
tydzien(4) = "(Czwartek)"
tydzien(5) = "(Pi|fffd|tek)"
tydzien(6) = "(Sobota)"
tydzien(7) = "(Niedziela)"

'przypisanie nazwy do numeru
If NumerDnia = 1 Then
NazwaDnia = tydzien(1)
ElseIf NumerDnia = 2 Then
NazwaDnia = tydzien(2)
ElseIf NumerDnia = 3 Then
NazwaDnia = tydzien(3)
ElseIf NumerDnia = 4 Then
NazwaDnia = tydzien(4)
ElseIf NumerDnia = 5 Then
NazwaDnia = tydzien(5)
ElseIf NumerDnia = 6 Then
NazwaDnia = tydzien(6)
ElseIf NumerDnia = 7 Then
NazwaDnia = tydzien(7)
End If

End Function

Public Function DataW(Data As Date, Czasookres As Integer, Jednostka As String)
'funkcja podaje drug|fffd| dat|fffd| na podstawie podanej daty, jednostek czasookresu i czasookresu

'deklaracja zmiennych
Dim dzien As Integer
Dim miesiac As Integer
Dim rok As Integer
Dim i As Integer

'budowa tabeli z kalendarzem
Dim kalendarz(2000 To 2050, 1 To 12) As Integer
For i = 2000 To 2050
kalendarz(i, 1) = 31
kalendarz(i, 2) = 28
kalendarz(i, 3) = 31
kalendarz(i, 4) = 30
kalendarz(i, 5) = 31
kalendarz(i, 6) = 30
kalendarz(i, 7) = 31
kalendarz(i, 8) = 31
kalendarz(i, 9) = 30
kalendarz(i, 10) = 31
kalendarz(i, 11) = 30
kalendarz(i, 12) = 31
Next

For i = 2000 To 2050 Step 4
kalendarz(i, 2) = 29
Next i

'podstawianie danych pod zmienne
DataW = Data
dzien = Day(Data)
rok = Year(Data)
miesiac = Month(Data)

'dodawanie czasookresu w latach
If Jednostka = "r" Or Jednostka = "R" Then
rok = rok + Czasookres
    If dzien > kalendarz(rok, miesiac) Then
    dzien = dzien - 1
    End If
End If

'dodawanie czasookresu w miesi|fffd|cach
If Jednostka = "m" Or Jednostka = "M" Then
miesiac = miesiac + Czasookres
    For i = 1 To 100
        If miesiac > 12 Then
        miesiac = miesiac - 12
        rok = rok + 1
        End If
    Next

    If dzien > kalendarz(rok, miesiac) Then
    dzien = dzien - 1
    End If
        If dzien > kalendarz(rok, miesiac) Then
        dzien = dzien - 1
        End If
            If dzien > kalendarz(rok, miesiac) Then
            dzien = dzien - 1
            End If
End If




'dodawanie czasookresu w dniach
If Jednostka = "d" Or Jednostka = "D" Then
dzien = dzien + Czasookres

    For i = 1 To 100
        If dzien > kalendarz(rok, miesiac) Then
        dzien = dzien - kalendarz(rok, miesiac)
        miesiac = miesiac + 1
        End If
            If miesiac > 12 Then
            miesiac = miesiac - 12
            rok = rok + 1
            End If
    Next
End If


'sk|fffd|adanie daty nast|fffd|pnego wzorcowania
DataW = DateSerial(rok, miesiac, dzien)

End Function




Function IleDniRoboczych(ByVal StartData As Date, ByVal StopData As Date) As Variant
'wg stanu prawnego na dzie|fffd| 01 stycznia 2007 roku (12 dni |fffd|wi|fffd|tecznych)
 Dim dDataWielkanoc As Date, lOkres As Long, lWolne As Long, dLicz As Date, lRok As Long
 
 If StartData <= StopData Then
    lOkres = DateDiff("d", StartData, StopData) + 1
    lRok = Year(StartData)
    dDataWielkanoc = Wielkanoc(lRok)
   For dLicz = StartData To StopData
     If lRok <> Year(dLicz) Then
        lRok = Year(dLicz)
        dDataWielkanoc = Wielkanoc(lRok)
     End If
     If Weekday(dLicz, vbMonday) = 6 Or Weekday(dLicz, vbMonday) = 7 Then
        lWolne = lWolne + 1
     ElseIf Weekday(dLicz, vbMonday) < 6 Then
        Select Case dLicz
               Case DateSerial(lRok, 1, 1), dDataWielkanoc + 1, _
                    DateSerial(lRok, 5, 1), DateSerial(lRok, 5, 3), _
                    dDataWielkanoc + 60, DateSerial(lRok, 8, 15), _
                    DateSerial(lRok, 11, 1), DateSerial(lRok, 11, 11), _
                    DateSerial(lRok, 12, 25), DateSerial(lRok, 12, 26)
                    lWolne = lWolne + 1
        End Select
     End If
   Next dLicz
  IleDniRoboczych = lOkres - lWolne
 Else
  IleDniRoboczych = CVErr(xlErrValue)
 End If
End Function

Function PierwszyDzienRoboczy(ByVal dData As Date) As Date
 Dim dDataWielkanoc       As Date
 Dim bytIndeks            As Byte
 dData = dData + 1
 dDataWielkanoc = Wielkanoc(Year(dData))
 Do
    bytIndeks = 0
    Select Case Weekday(dData, vbMonday)
        Case 6
             bytIndeks = 2
        Case 7
             bytIndeks = 1
    End Select
    dData = dData + bytIndeks
    bytIndeks = 0
   Select Case dData
        Case DateSerial(Year(dData), 1, 1), dDataWielkanoc + 1, DateSerial(Year(dData), 5, 1), _
             DateSerial(Year(dData), 5, 3), dDataWielkanoc + 60, DateSerial(Year(dData), 8, 15), _
             DateSerial(Year(dData), 11, 1), DateSerial(Year(dData), 11, 11), DateSerial(Year(dData), 12, 26)
             bytIndeks = 1
        Case DateSerial(Year(dData), 12, 25)
             bytIndeks = 2
   End Select
    dData = dData + bytIndeks
   Loop Until bytIndeks = 0
 PierwszyDzienRoboczy = dData
End Function

Function Wielkanoc(ByVal rok As Integer) As Date
'http://www.cpearson.com/excel/holidays.htm
'poprawna dla lat 1900 - 2099
  Dim id    As Integer
  id = (((255 - 11 * (rok Mod 19)) - 21) Mod 30) + 21
  Wielkanoc = DateSerial(rok, 3, 1) + id + (id > 48) + 6 - ((rok + rok \ 4 + _
              id + (id > 48) + 1) Mod 7)
End Function

Function DzienTygodnia(dData As Date) As String
  'dla Excel'97
  DzienTygodnia = Choose(Weekday(dData, vbMonday), "Pn", "Wt", "|fffd|r", "Cz", "Pt", "So", "N")
End Function
Function NazwaMiesiaca(NrMiesiaca As Integer) As String
 'dla Excel'97
 NazwaMiesiaca = Choose(NrMiesiaca, "Stycze|fffd|", "Luty", "Marzec", "Kwiecie|fffd|", "Maj", _
                                   "Czerwiec", "Lipiec", "Sierpie|fffd|", "Wrzesie|fffd|", _
                                   "Pa|fffd|dziernik", "Listopad", "Grudzie|fffd|")
End Function






Public Function InterLinPop(TemperaturaNi|fffd|sza As Double, PoprawkaNi|fffd|sza As Double, TemperaturaWy|fffd|sza As Double, PoprawkaWy|fffd|sza As Double, Temperatura As Double)
'funkcja interpoluje liniowo pomi|fffd|dzy dwoma punktami wzorcowania).
'InterLinPop(T1;P1;T2;P2;T) gdzie T1-temp.wzorc.ni|fffd|sza, P1-popr.ni|fffd|sza, T2-temp.wzorc.wy|fffd|sza, P2-popr.wy|fffd|sza, t-temp.wymagana, wynikiem jest poprawka.
'funkcja mo|fffd|e interpolowac r|fffd|wnie|fffd| si|fffd||fffd|.
Dim PrzyrostTemperatury As Double
Dim PrzyrostPoprawki As Double
Dim PrzyrostPoprawkiNaStopie|fffd| As Double
Dim Nadwy|fffd|kaTemperatury As Double
Dim Poprawka As Double




             PrzyrostTemperatury = TemperaturaWy|fffd|sza - TemperaturaNi|fffd|sza
             PrzyrostPoprawki = PoprawkaWy|fffd|sza - PoprawkaNi|fffd|sza
             PrzyrostPoprawkiNaStopie|fffd| = PrzyrostPoprawki / PrzyrostTemperatury
             Nadwy|fffd|kaTemperatury = Temperatura - TemperaturaNi|fffd|sza
             Poprawka = (PrzyrostPoprawkiNaStopie|fffd| * Nadwy|fffd|kaTemperatury) + PoprawkaNi|fffd|sza

InterLinPop = Poprawka

End Function




















Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' kk	"5

INQUEST-PP=macro
