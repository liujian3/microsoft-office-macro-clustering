Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Module1"
Attribute VB_Name = "Registry32"
'=====================================================================
' (c) Copyright 1992-2011 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/OS/Win/32-bits/Registry32.bas 3     5/06/14 9:57a Jimm $
'=====================================================================
'Registry - a collection of registry functions
'32-bit Registry routines

Option Explicit

'Windows API declarations
Public Const KEY_READ = ((STANDARD_RIGHTS_READ Or KEY_QUERY_VALUE Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY) And (Not SYNCHRONIZE))
Public Const KEY_WRITE = ((STANDARD_RIGHTS_WRITE Or KEY_SET_VALUE Or KEY_CREATE_SUB_KEY) And (Not SYNCHRONIZE))

'=====================================================================
'                   OpenKey
'This function returns a handle to an existing key, or zero if the
'key does not exist or if the function fails.
'---------------------------------------------------------------------
Public Function OpenKey(ByVal hive As Long, ByVal strKey As String) As Long
    Dim lngReturn As Long
    Dim lngKey As Long

    lngReturn = RegOpenKeyEx(hive, strKey, 0&, KEY_READ, lngKey)

    If lngReturn <> ERROR_SUCCESS Then
        lngKey = 0
    End If

    OpenKey = lngKey
End Function

'=====================================================================
'                       GetRegistryString
'Retrieves a string value from a specified key.
'Use HKEY_CURRENT_USER etc. for hive
'Returns an empty string if it fails.
'---------------------------------------------------------------------
Public Function GetRegistryString(ByVal hive As Long, ByVal strKey As String, ByVal strValueName As String) As String

    Dim strBuffer As String, strMsg As String
    Dim lngRetVal As Long
    Dim lngValueType As Long
    Dim lngValueLength As Long
    Dim lngKey As Long

    'Open the existing key.
    lngKey = OpenKey(hive, strKey)
    If lngKey <> 0 Then
        strBuffer = Strings.Space(255)
        lngValueLength = 256
        lngRetVal = RegQueryValueExString(lngKey, strValueName, 0&, _
            lngValueType, strBuffer, lngValueLength)

        If lngRetVal = ERROR_SUCCESS Then
            If lngValueType = REG_SZ Then
                'Get the string.
                strBuffer = Strings.left$(strBuffer, lngValueLength - 1)
            Else
                strBuffer = ""
            End If
        Else
            strBuffer = ""
        End If

        'Call the API function to close the key (ignore errors)
        lngRetVal = RegCloseKey(lngKey)
    End If

    GetRegistryString = strBuffer
End Function

' Sets the indicated registry value, creating the key if necessary
Public Sub SetRegistryString(ByVal hive As Long, ByVal strKeyName As String, ByVal strValueName As String, ByVal vValueSetting As Variant)

    Dim lRetVal As Long  'result of the SetValueEx function
    Dim hKey As Long     'handle of open key
    Dim lngDisp As Long  'whether an existing key was opened or a new one created

    'open the specified key
    lRetVal = RegCreateKeyEx(hive, strKeyName, 0, 0, REG_OPTION_NON_VOLATILE, KEY_WRITE, 0, hKey, lngDisp&)

    If lRetVal <> ERROR_SUCCESS Then
        hKey = 0
    Else
        Dim strValueSetting As String
        strValueSetting = vValueSetting & Strings.Chr$(0)
        RegSetValueExString hKey, strValueName, 0&, REG_SZ, strValueSetting, Len(strValueSetting)
        RegCloseKey (hKey)
    End If

End Sub
Attribute VB_Name = "MTW5"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'MTW5 5.0
' (c) Copyright 1992-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/MTDLLPath.cls 42    10/11/11 2:12p Jimm $
Option Explicit

' Note: * all functions/subs that start with MTCommand_ are "top-level" entry points called from
'         OnAction handlers (e.g. buttons, menu items, etc).
'       * all functions/subs that start with MTCallback_ are are called by
'         Word 2007 as needed to refresh the Ribbon UI
'       * all functions/subs that start with NoDirectCall_
'          MUST NOT BE CALLED except via a RunXXX command


' module name
Private Const module As String = "MTW5"
Private Const moduleCLS As String = "UIWrappersCls"

Public WithEvents App As Application
Attribute App.VB_VarHelpID = -1

Private Sub App_DocumentBeforeSave(ByVal Doc As Document, SaveAsUI As Boolean, Cancel As Boolean)
    RunDocCallback moduleCLS, "NoDirectCall_App_DocumentBeforeSave"
End Sub

'Runs when a doc is created, opened or activated (W2000 and higher only)
'Checks if doc is marked as containing eqns from other platform
Private Sub App_DocumentOpen(ByVal Doc As Document)
    Set MTW5_aDoc = Doc
    RunDocCallback moduleCLS, "NoDirectCall_App_DocumentOpen"
End Sub

'Runs when doc is created, opened or activated
'Check if doc's template has old MT macros installed
Private Sub App_DocumentChange()
    RunDocCallback moduleCLS, "NoDirectCall_App_DocumentChange"
End Sub

Private Sub App_WindowActivate(ByVal Doc As Document, ByVal Wn As Window)
    RunDocCallback moduleCLS, "NoDirectCall_App_WindowActivate"
End Sub

'Private Sub App_WindowSelectionChange(ByVal sel As Selection)
'    RunDocCallback moduleCLS, "NoDirectCall_App_WindowSelectionChange"
'End Sub

' called when the class is being initialized
Private Sub Class_Initialize()
    On Error GoTo bye
    UIUpdate
    Exit Sub
bye:
        WriteLog "Class_Initialize error"
    ' First, pass along any DSI_ABORT_EXCEPTIONs to be caught by the top-level handler
    If err.Number = DSI_ABORT_EXCEPTION Then
        err.Raise DSI_ABORT_EXCEPTION 'leaves other Err data intact
    Else
        ' handle unexpected error by displaying message, log error, throw DSI private error
        Asserts.AssertFailure module, "Class_Initialize", err.Description
    End If
End Sub
Attribute VB_Name = "CallbackGuard"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'CallbackGuard
'=====================================================================
' (c) Copyright 1992-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/CallbackGuard.cls 15    9/17/12 1:21p Jimm $
'=====================================================================

' This file is shared between PP and Word

Private Sub Class_Initialize()

    ' initialize API
    Dim stat As Boolean
    Dim dllver As Long
    Dim msg As String
    Dim result As Long

    stat = False
    SetDLLPath
    
    #If Win32 Then
        Const ErrorVal As Integer = 0
    #Else
        Const ErrorVal As Integer = -1
    #End If
    
    ' Attempt to load the DLL
    result = MTInitAPI(mtinitLAUNCH_AS_NEEDED, 30)
    
    If result = mpMTDLL_NOT_FOUND Then
        ShowDLLNotFoundError
    ElseIf result <= ErrorVal Then
       msg = GetUserString2("1606", "3206", "The MathType commands could not communicate with MathType. There was a problem starting the API. Please be sure that MathType is properly installed.")
    Else
        'get the API Version (loads DLL)
        dllver = MTAPIVersion(MTAPI_VERSION)
        If dllver = mpBAD_VERSION Then
            ShowDLLNotFoundError
        'check the version against our constants
        ElseIf (dllver > mtversMajVerHi) Or (dllver < mtversMajVerLo) Then
            msg = GetUserString2("1607", "3207", "The version of this macro doesn't match the version of MathType's DLL. Reinstall MathType to fix this condition.")
        ElseIf (dllver < mtversMinVer) Then
            msg = GetUserString2("1608", "3208", "A more recent version of MathType's DLL is required to use this macro. Reinstall MathType to fix this condition.")
        Else
            stat = True
        End If
    End If

    If Not stat Then
        WriteLog "callbackguard error"
        EndAPI
        If (Len(msg) > 0) Then
            MsgBox msg, vbCritical, GetUserString2(1609, 3209, "MathType Commands for Microsoft Word Error")
        End If
        err.Raise DSI_ABORT_EXCEPTION
    End If
End Sub

Private Sub Class_Terminate()
    EndAPI
End Sub

Private Sub EndAPI()
    ' terminate API
    MTTermAPI
End Sub
Attribute VB_Name = "CommandGuard"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'CommandGuard
'=====================================================================
' (c) Copyright 1992-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/CommandGuard.cls 14    9/17/12 1:21p Jimm $
'=====================================================================

' This file is shared between PP and Word

Private Sub Class_Initialize()

    On Error Resume Next

    ' Code to handle simultaneous execution
    If macroExecuting = True Then
        MsgBox "Only One MathType command can be executed at a time.  Please try again later."
        'Increment the OffBusy version check variable
        err.Raise DSI_ABORT_EXCEPTION
    Else
        macroExecuting = True
    End If

    ' initialize API
    Dim stat As Boolean
    Dim dllver As Long
    Dim msg As String
    Dim result As Long
    result = mpMTDLL_NOT_FOUND

    stat = False
    SetDLLPath

    #If Win32 Then
    Const ErrorVal As Integer = 0
    #Else
    Const ErrorVal As Integer = -1
    #End If

    ' Attempt to load the DLL
    result = MTInitAPI(mtinitLAUNCH_AS_NEEDED, 30)
        
    If result = mpMTDLL_NOT_FOUND Then
        ShowDLLNotFoundError
    ElseIf result <= ErrorVal Then
       msg = GetUserString2("1606", "3206", "The MathType commands could not communicate with MathType. There was a problem starting the API. Please be sure that MathType is properly installed.")
    Else
        'get the API Version (loads DLL)
        dllver = MTAPIVersion(MTAPI_VERSION)
        If dllver = mpBAD_VERSION Then
            ShowDLLNotFoundError
        'check the version against our constants
        ElseIf (dllver > mtversMajVerHi) Or (dllver < mtversMajVerLo) Then
            msg = GetUserString2("1607", "3207", "The version of this macro doesn't match the version of MathType's DLL. Reinstall MathType to fix this condition.")
        ElseIf (dllver < mtversMinVer) Then
            msg = GetUserString2("1608", "3208", "A more recent version of MathType's DLL is required to use this macro. Reinstall MathType to fix this condition.")
        Else
            stat = True
        End If
    End If

    If Not stat Then
        EndAPI
        If (Len(msg) > 0) Then
            MsgBox msg, vbCritical, GetUserString2("1609", "3209", "MathType Commands for Microsoft Word Error")
        End If
        err.Raise DSI_ABORT_EXCEPTION
    End If
End Sub

Private Sub Class_Terminate()
    EndAPI
End Sub

Private Sub EndAPI()

    On Error Resume Next

    ' code to release the execution lock
    macroExecuting = False

    ' terminate API
    MTTermAPI

End Sub
Attribute VB_Name = "AutoExecCls"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'AutoExecCls
'=====================================================================
' (c) Copyright 1992-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/AutoExecCls.cls 26    10/11/11 2:12p Jimm $
'=====================================================================
Option Explicit

' Note: * all functions/subs that start with MTCommand_ are "top-level" entry points called from
'         OnAction handlers (e.g. buttons, menu items, etc).
'       * all functions/subs that start with MTCallback_ are are called by
'         Word 2007 as needed to refresh the Ribbon UI
'       * all functions/subs that start with NoDirectCall_
'          MUST NOT BE CALLED except via a RunXXX command

' module name
Private Const module As String = "AutoExecCls"

Private m_lError As Long
Private m_sError As String

' Expose the error description
' This error number is required because the CallByName
' function does not return the correct error
Public Property Get ErrorDescription() As String
    ErrorDescription = m_sError
End Property

' Expose the error number
' This error number is required because the CallByName
' function does not return the correct error
Public Property Get ErrorNumber() As Long
    ErrorNumber = m_lError
End Property

Public Sub NoDirectCall_Main()

    'If an error occurs in the logging initialization code, default to non-verbose logging
    On Error Resume Next

    Dim regValue As String
    regValue = GetPreference(HKEY_CURRENT_USER, mtreg_MT_WORDCMDS_LOCATION, mtreg_MT_VERBOSE_LOGGING_KEY)
    Select Case regValue
    Case "1"
        gVerboseLogging = True
    Case "0"
        gVerboseLogging = False
    Case Else
        gVerboseLogging = False
    End Select

    WriteLog "Word logging enabled"

    ' Replace logging init error handler with main error handler
    On Error GoTo fail


    WriteLog "Storing Application in MTApp"
    Set MTApp.App = Application

     'unload any MTW4 macros
    WriteLog "About to check MT4 macros"
    UnloadMT4Macros

    'check for MTW3 macros in the Normal template
    WriteLog "About to check for MTW3 macros in Normal template"
    If UILib.RemoveMT3Macros(NormalTemplate) Then
        WriteLog "Found MT3 macros"

        MsgBox UILib.GetUserString("!0201MathType has found and removed an old version of the MathType Commands for Word. The new commands will be available the next time you run Word. Word will now Exit."), _
            vbInformation, UILib.GetUserString("!0200MathType Commands")

        'make sure no MTW3 menu items remain...
        RemoveOldMenuItems

        WriteLog "removed MT3 macros - quitting"

        Application.Quit
    End If

    'initialize default side for equation numbering
    #If Win32 Then
    If Val(Application.version) >= kWord2007 Then
        WriteLog "About to initialize eqn numbering side"
        InitDefaultEqnNumSide
            WriteLog "Successfully initialized eqn numbering side"
        End If
    #Else
    WriteLog "About to initialize eqn numbering side"
    InitDefaultEqnNumSide
    WriteLog "Successfully initialized eqn numbering side"
    #End If

    #If Win32 Then
        WriteLog "About to call UIUpdate"
    UIUpdate
    If Val(Application.version) < kWord2007 Then
        If Not MTApp.App Is Nothing Then
            WriteLog "queuing UpdatePre2007CommandBar"
            MTApp.App.OnTime Now + TimeValue("00:00:01"), "UpdatePre2007CommandBar"
        End If
    End If
    #ElseIf 0 Then
    WriteLog "About to call UpdateState"
    UpdateState
    If Not MTApp.App Is Nothing Then
        ' http://valor:8080/browse/MT-2861
        WriteLog "Scheduling UpdatePre2007CommandBar before"
        On Error GoTo ScheduleErr1
        MTApp.App.OnTime Now + TimeValue("00:00:15"), "UpdatePre2007CommandBar"
        WriteLog "Scheduling UpdatePre2007CommandBar after"
        GoTo ScheduleComplete
ScheduleErr1:
        WriteLog "Scheduling Error - attempting immediate call of UpdatePre2007CommandBar"
        On Error GoTo ScheduleComplete
        UpdatePre2007CommandBar
        WriteLog "Returned from UpdatePre2007CommandBar immediate call"
ScheduleComplete:
    Else
        WriteLog "Scheduling UpdatePre2007CommandBar was skipped - MTApp.App is nothing"
    End If
    #End If

        'Update WordVer usage statistic
    Dim wordMajorVersion As Long
    wordMajorVersion = Int(Val(Application.version))
    MTSetStatistic "WordVer", wordMajorVersion

        'Install our keyboard shortcuts
    AddKeyboardShortcuts

    WriteLog "AutoExecCls.NoDirectCall_Main success"
    Exit Sub

fail:
    ' First, pass along any DSI_ABORT_EXCEPTIONs to be caught by the top-level handler
    If err.Number = DSI_ABORT_EXCEPTION Then
        err.Raise DSI_ABORT_EXCEPTION 'leaves other Err data intact
    Else
        ' handle unexpected error by displaying message, log error, throw DSI private error
        Asserts.AssertFailure module, "Main", err.Description
    End If

    Exit Sub

unload:
    'can't display error as WLL is missing, so continue quietly
    AddIns(MacroContainer).Installed = False

        WriteLog "Unloaded ourselves, and exiting quietly"
End Sub

'Unload MathType4 macros if found
Private Sub UnloadMT4Macros()
    Dim addin As addin
    Dim prefix As String
    Dim prefixLen As Long

    prefix = "MathType Commands For Word"
    prefixLen = Len(prefix)
    On Error GoTo errHandler
    For Each addin In AddIns

            WriteLog "Considering addin " & addin

        'XP has a 'bug' where asking the name for an unloaded & non-existent AddIn throws an error
        If left$(addin.name, prefixLen) = prefix Then

                WriteLog "matched prefix"

            MsgBox UILib.GetUserString("!0203An older version of the MathType Commands for Word is installed and will now be removed. Please ignore the ensuing message (Word cannot open this document template)."), _
                vbInformation, UILib.GetUserString("!0200MathType Commands")
            addin.Installed = False

                WriteLog "About to Kill addin"
            KillAddIn addin.path, Application.PathSeparator, addin.name

                WriteLog "About to Delete addin"
            addin.Delete

                WriteLog "exiting prefix match conditional"
            End If
continue:
    Next
    Exit Sub

errHandler:
        WriteLog "in UnloadMT4Macros errhandler looking at error number " & err.Number
    Resume continue

End Sub

Private Sub KillAddIn(path As String, separator As String, name As String)
    'wrap Kill in error handler as it throws an exception if file is busy/missing
    On Error Resume Next
    FileSystem.Kill path & separator & name
End Sub

'Remove MTW3 menu items from Normal template
'Search all menus in the menubar to avoid using explicit menu names
Private Sub RemoveOldMenuItems()
    Dim curMenu As CommandBarControl
    Dim curItem As CommandBarControl

    CustomizationContext = NormalTemplate

        WriteLog "About to interate through menubar controls"

    For Each curMenu In CommandBars.ActiveMenuBar.Controls
        For Each curItem In curMenu.Controls
                WriteLog "considering" & curItem.Caption
            Select Case curItem.Caption
            Case "Equation Number", "Equation Reference", "Equation Section", _
                "Equation Section...", "Equation Number Format...", "MathType Preferences", _
                "MathType Preferences...", "Update Equations", "Update Equations..."

                curItem.Delete
                    WriteLog "deleted" & curItem.Caption
            End Select
        Next curItem
    Next curMenu

        WriteLog "exiting RemoveOldMenuItems"
End Sub

'Adds our keyboard shortcuts
'Inline Eqn                         = Ctrl+Alt+Q = 512 + 1024 + 81 = 1617
    'Mac                            = Ctrl+Option+Q         = 4096 + 2048 + 81 = 6225

'Display Eqn                        = Alt+Q = 1024 + 81 = 1105
    'Mac                            = Option+Q              = 2048 + 81 = 2129

'Right Numbered Disp Eqn            = Shift+Alt+Q = 256 + 1024 + 81 = 1361
    'Mac                            = Shift+Option+Q        = 512 + 2048 + 81 = 2641

'Left Numbered Disp Eqn             = Ctrl+Shift+Alt+Q = 512 + 256 + 1024 + 81 = 1873
    'Mac                            = Ctrl+Shift+Option+Q   = 4096 + 512 + 2048 + 81 = 6737

'Tex Toggle                         = Alt+\ = 1024 + 220 = 1244
    'Mac                            = n/a                   = 2048 + 220 = 2268
    'Mac Alternate                  = Ctrl+X                = 4096 + 88 = 4184

'Edit in place selected equation    = Alt+E = 1024 + 69 = 1093
    'Mac                            = n/a                   = 2048 + 69 = 2117 - For reference only, not supported on the Mac

'Edit in MT selected equation       = Alt+O = 1024 + 79 = 1103
    'Mac                            = Option+Command+O      = 2048 + 256 + 79 = 2383

'Open Math Input Panel              = Ctrl+Shift+M = 512 + 256 + 77 = 845
    'Mac                            = n/a                   = 4096 + 512 + 77 = 4685 - For reference only, not supported on the Mac

Public Sub AddKeyboardShortcuts()

    On Error Resume Next

    #If Win32 Then
    KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_InsertInlineEqn", KeyCode:=Val(UILib.GetUserString("!24001617"))

    KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_InsertDispEqn", KeyCode:=Val(UILib.GetUserString("!24011105"))

    KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_InsertRightNumberedDispEqn", KeyCode:=Val(UILib.GetUserString("!24021361"))

    KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_InsertLeftNumberedDispEqn", KeyCode:=Val(UILib.GetUserString("!24031873"))

    KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_TeXToggle", KeyCode:=Val(UILib.GetUserString("!24041244"))

    KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_EditEquationInPlace", KeyCode:=Val(UILib.GetUserString("!24051093"))

    KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_EditEquationOpen", KeyCode:=Val(UILib.GetUserString("!24061103"))

    If IsMathInputPanelAvailable Then
        KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_MathInputControl", KeyCode:=Val(UILib.GetUserString("!24070845"))
    End If

    #Else
    WriteLog "AddKeyShortcut: InsertInlineEqn"
    KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_InsertInlineEqn", KeyCode:=Val(UILib.GetUserString("!33246225"))

    WriteLog "AddKeyShortcut: InsertDispEqn"
    KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_InsertDispEqn", KeyCode:=Val(UILib.GetUserString("!33252129"))

    WriteLog "AddKeyShortcut: InsertRightNumberedDispEqn"
    KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_InsertRightNumberedDispEqn", KeyCode:=Val(UILib.GetUserString("!33262641"))

    WriteLog "AddKeyShortcut: InsertLeftNumberedDispEqn"
    KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_InsertLeftNumberedDispEqn", KeyCode:=Val(UILib.GetUserString("!33276737"))

    WriteLog "AddKeyShortcut: TeXToggle"
    KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_TeXToggle", KeyCode:=Val(UILib.GetUserString("!33282268"))
    If err.Number = 5346 Then
        WriteLog "Using alternate keystroke (Ctrl-X) for TexToggle"
        KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_TeXToggle", KeyCode:=Val(UILib.GetUserString("!33354184"))
    End If

    WriteLog "AddKeyShortcut: EditEquationOpen"
    KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, command:="MTCommand_EditEquationOpen", KeyCode:=Val(UILib.GetUserString("!33302383"))

    WriteLog "AddKeyShortcut: Finished"
    #End If

    'If the Word option "Prompt before saving Normal template" is checked on Word always
    'prompts to save normal.dot because of the above KeyBindings additions.
    'See http://valor:8080/browse/MT-2176
    'To prevent this prompt we clear the template dirty flag
    Application.NormalTemplate.saved = True

    Exit Sub

err:
    MsgBox "AddKeyShortcut: error " & err.Number & Chr(13) & err.Description
    Resume Next

End Sub

Attribute VB_Name = "UIHelpCls"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'=====================================================================
' (c) Copyright 2007-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/UIHelpCls.cls 16    10/11/11 2:12p Jimm $
'=====================================================================

Private m_lError As Long
Private m_sError As String

' module name
Private Const module As String = "UIHelpCls"


' Expose the error description
' This error number is required because the CallByName
' function does not return the correct error
Public Property Get ErrorDescription() As String
    ErrorDescription = m_sError
End Property

' Expose the error number
' This error number is required because the CallByName
' function does not return the correct error
Public Property Get ErrorNumber() As Long
    ErrorNumber = m_lError
End Property

Public Sub NoDirectCall_ShowHelpContents()
    ShowHelpTopic 0
    MTIncrementStatisticBy "HCts", 1
End Sub

Public Sub NoDirectCall_ShowHelpMTInWord()
    If Application.name = kAppMSW Then
        If Val(Application.version) <= kWord2003 Then
            ShowHelpTopic hlpMSWDMathType_Support_For_Word
        Else
            ShowHelpTopic hlpMSWDMathType_Support_For_Word_2007
        End If
    ElseIf Application.name = kAppMSPP Then
        If Val(Application.version) <= kPP2003 Then
            ShowHelpTopic hlpMSWDMathType_Support_For_PP
        Else
            ShowHelpTopic hlpMSWDMathType_Support_For_PP_2007
        End If
    End If

    MTIncrementStatisticBy "HWrd", 1
End Sub

Public Sub NoDirectCall_ShowUnlockReg()
    ' note: we changed the UI to combine unlock and registration
    ' we are keeping the old code (following this line) around just in case we want to switch back
    ShowHelpTopic hlpMSWDUnlock_MathType

    'Dim result As Long

    'result = MTGetAppFunctionality

    'If result = DemoMode.dmFull Then
    '    result = MTGetURL(mturlMATHTYPE_REGISTER, True, "", 0)
    'Else
    '    ShowHelpTopic hlpMSWDUnlock_MathType
    'End If
End Sub


'Opens the MathType Help file to a particular topic
'topic = help constant from HELP.H (0 for index)
Private Sub ShowHelpTopic(topic As Long)

    SetPreference HKEY_CURRENT_USER, mtreg_MT_WORDCMDS_LOCATION, "HelpTopicArgument", str(topic)

    #If Word Then
        RunDispatch "", kMTCommands & ".MTHelp.MTHelpTopicViaRegistry", False
    #Else
            MTHelp.MTHelpTopicViaRegistry
    #End If

End Sub

Public Sub NoDirectCall_ShowWebHomePage()
    Dim result As Long
    result = MTGetURL(mturlMATHTYPE_HOME, True, "", 0)
End Sub

Public Sub NoDirectCall_ShowWebSupport()
    Dim result As Long
    result = MTGetURL(mturlMATHTYPE_SUPPORT, True, "", 0)
End Sub

Public Sub NoDirectCall_ShowWebEmailFeedback()
    If Application.name = kAppMSPP Then
        ShowWebEmailFeedbackPP
    ElseIf Application.name = kAppMSW Then
        ShowWebEmailFeedbackWord
    End If
End Sub

Private Sub ShowWebEmailFeedbackPP()
    #If PP Then

    Dim address As String
    Dim subject As String
    Dim prezo As Presentation
    Dim useTempDoc As Boolean
    Dim argumentsPosition
    Dim argumentsPresent As Boolean

    useTempDoc = Application.Presentations.Count = 0
    address = GetAddress(mturlMATHTYPE_FEEDBACK)

    ' test for URL arguments by looking for a question mark
    argumentsPresent = InStr(1, address, "?", vbTextCompare) > 0

    subject = "MathType feedback"
    If useTempDoc Then
        Set prezo = Presentations.Add
    Else
        Set prezo = ActivePresentation
    End If

    If argumentsPresent Then
        ' since arguments are present, just append the subject
        prezo.FollowHyperlink address & "&subject=" & subject
    Else
        ' since there are no arguments, add the argument char followed by the subject
        prezo.FollowHyperlink address & "?subject=" & subject
    End If
    If useTempDoc Then
        prezo.Close
    End If

    #End If
End Sub

Private Sub ShowWebEmailFeedbackWord()
    #If Word Then
    Dim address As String
    Dim subject As String
    Dim Doc As Document
    Dim useTempDoc As Boolean
    Dim argumentsPosition
    Dim argumentsPresent As Boolean

    useTempDoc = Application.Documents.Count = 0
    address = GetAddress(mturlMATHTYPE_FEEDBACK)

    ' test for URL arguments by looking for a question mark
    argumentsPresent = InStr(1, address, "?", vbTextCompare) > 0

    subject = "MathType feedback"
    If useTempDoc Then
        Set Doc = Documents.Add
    Else
        Set Doc = ActiveDocument
    End If

    If argumentsPresent Then
        ' since arguments are present, just append the subject
        Doc.FollowHyperlink address & "&subject=" & subject
    Else
        ' since there are no arguments, add the argument char followed by the subject
        Doc.FollowHyperlink address & "?subject=" & subject
    End If
    If useTempDoc Then
        Doc.Close False
    End If
    #End If
End Sub

Public Sub NoDirectCall_ShowWebOrderMathType()
    Dim result As Long
    result = MTGetURL(mturlMATHTYPE_ORDER, True, "", 0)
End Sub

Public Sub NoDirectCall_ShowFutureMT()
    Dim result As Long
    result = MTGetURL(mturlMATHTYPE_FUTURE, True, "", 0)
End Sub

Private Function GetAddress(whichURL As Long) As String
    On Error GoTo bye
    Dim buffer As String
    Dim bufLen As Long
    Dim result As Long

    GetAddress = ""
    ' set the buffer length to zero for the first pass
    bufLen = 0


    ' get back the length for the URL first which comes as the result of
    ' calling this function with a bufLen of zero
    result = MTGetURL(whichURL, False, buffer, bufLen)
    If result >= 0 Then ' negative values indiacate an error
        bufLen = result + 1
        ' initalize the buffer with spaces
        buffer = Space$(bufLen)

        ' call again, but this time we send in the buffer length
        result = MTGetURL(whichURL, False, buffer, bufLen)
        If result = mtOK Then
            buffer = left(buffer, bufLen - 1)
            GetAddress = buffer
        End If
    End If
    Exit Function
bye:
    ' First, pass along any DSI_ABORT_EXCEPTIONs to be caught by the top-level handler
    If err.Number = DSI_ABORT_EXCEPTION Then
        err.Raise DSI_ABORT_EXCEPTION 'leaves other Err data intact
    Else
        ' handle unexpected error by displaying message, log error, throw DSI private error
        Asserts.AssertFailure module, "GetAddress", err.Description
    End If
End Function

Public Sub NoDirectCall_ShowAboutMT()
    Dim result As Long
    result = MTShowAboutBox
End Sub
Attribute VB_Name = "UILibCls"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'=====================================================================
' (c) Copyright 2007-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/UILibCls.cls 7     10/11/11 2:12p Jimm $
'=====================================================================

Private m_lError As Long
Private m_sError As String

' Expose the error description
' This error number is required because the CallByName
' function does not return the correct error
Public Property Get ErrorDescription() As String
    ErrorDescription = m_sError
End Property

' Expose the error number
' This error number is required because the CallByName
' function does not return the correct error
Public Property Get ErrorNumber() As Long
    ErrorNumber = m_lError
End Property

Public Sub NoDirectCall_Browse()
    Dim userChoice As Integer
    Dim dropDown As Office.CommandBarComboBox
    Dim command As String

    If browseChoice = -1 Then
        ' serach for the only combo box
        Set dropDown = CommandBars("MathType").FindControl(msoControlDropdown)
        If Not dropDown Is Nothing Then
            userChoice = dropDown.ListIndex
        Else
            userChoice = 1
        End If
    Else
        userChoice = browseChoice
    End If

    If forward Then
        Select Case userChoice
        Case 0 To 1
            command = kMTCommands & ".MTBrowse.BrowseEquationsForward"
        Case 2
            command = kMTCommands & ".MTBrowse.BrowseEquationNumberRefForward"
        Case 3
            command = kMTCommands & ".MTBrowse.BrowseChapterSectionForward"
        End Select
    Else
        Select Case userChoice
        Case 0 To 1
            command = kMTCommands & ".MTBrowse.BrowseEquationsBackward"
        Case 2
            command = kMTCommands & ".MTBrowse.BrowseEquationNumberRefBackward"
        Case 3
            command = kMTCommands & ".MTBrowse.BrowseChapterSectionBackward"
        End Select
    End If

    If Not command = "" Then
        RunDispatch "", command, False
    End If
    MTIncrementStatisticBy "WDBr", 1
End Sub

Public Sub NoDirectCall_InsertInlineEqn()
    WriteLog "Entering InsertInlineEqn"
    RunDispatch "", kMTCommands & ".MTInsertEquation.InsertInlineEquation", False
    
    WriteLog "Incrementing CInline VC stat"
    MTIncrementStatisticBy "CInline", 1
    
    WriteLog "Exiting InsertInlineEqn"
End Sub

Public Sub NoDirectCall_InsertDispEqn()
    RunDispatch "", kMTCommands & ".MTInsertEquation.InsertDisplayEquation", False
    MTIncrementStatisticBy "CDisp", 1
End Sub

Public Sub NoDirectCall_InsertLeftNumberedDispEqn()
    RunDispatch "", kMTCommands & ".MTInsertEquation.InsertLeftNumberedDisplayEquation", False
    MTIncrementStatisticBy "CDispL", 1
End Sub

Public Sub NoDirectCall_InsertRightNumberedDispEqn()
    RunDispatch "", kMTCommands & ".MTInsertEquation.InsertRightNumberedDisplayEquation", False
    MTIncrementStatisticBy "CDispR", 1
End Sub

Public Sub NoDirectCall_InsertLeftNumberedDispEqnEB()
    RunDispatch "", kMTCommands & ".MTInsertEBEquation.InsertEBLeftNumberedDisplayEquation", False
    MTIncrementStatisticBy "CEBDispL", 1
End Sub

Public Sub NoDirectCall_InsertRightNumberedDispEqnEB()
    RunDispatch "", kMTCommands & ".MTInsertEBEquation.InsertEBRightNumberedDisplayEquation", False
    MTIncrementStatisticBy "CEBDispR", 1
End Sub

Public Sub NoDirectCall_InsertEqnNum()
    RunDispatch "", kMTCommands & ".MTEqnNum.Main", False
    MTIncrementStatisticBy "CEqNum", 1
End Sub

Public Sub NoDirectCall_InsertEqnRef()
    RunDispatch "", kMTCommands & ".MTMarkRef.Main", False
    MTIncrementStatisticBy "CEqRef", 1
End Sub

Public Sub NoDirectCall_UpdateEqns()
    RunDispatch "", kMTCommands & ".MTUpdateFields.Main", False
    MTIncrementStatisticBy "CUpdEqNum", 1
End Sub

Public Sub NoDirectCall_CrashTest()
    Dim result As Long
    Dim where, how
    where = 1 '1 for WLL; 2 for DLL
    how = 1   '1 for Assert; 2 for divide by zero
    result = MTCrashTest(where, how)
End Sub

'checks if Word is being used as an embedded object
'if Word's window does not have a caption, we assume it is embedded
Private Function IsEmbeddedObject() As Boolean
    IsEmbeddedObject = (Len(Application.ActiveWindow.Caption) = 0)
End Function
Attribute VB_Name = "UIWrappersCls"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private m_lError As Long
Private m_sError As String

'=====================================================================
' (c) Copyright 2007-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/UIWrappersCls.cls 25    5/06/14 9:54a Jimm $
'=====================================================================

' Support code for updating the cursor position
Private Const mttstyle_EB_NUMBERED_EQUATION As String = "MTEBNumberedEquation"

' Expose the error description
' This error number is required because the CallByName
' function does not return the correct error
Public Property Get ErrorDescription() As String
    ErrorDescription = m_sError
End Property

' Expose the error number
' This error number is required because the CallByName
' function does not return the correct error
Public Property Get ErrorNumber() As Long
    ErrorNumber = m_lError
End Property


'************* UIWrappers Module code *****************

Public Sub NoDirectCall_EditPaste()

    RunDispatch "", kMTCommands & ".MTLib.DSIEditPaste", False

End Sub

Public Sub NoDirectCall_App_DocumentChange()
    ' It's screwy to look for MT3 macros everytime we change to
    ' a document. Not only will the call be redundant 99% of the time,
    ' it is not clear that MT3 macros can be in documents from any of
    ' the versions of Word we still support. Further, our AutoExec code
    ' string MT3 macros from Normal.dot.  This whole handler should be
    ' removed in future versions of MT.
    Dim aTemplate As Template
    On Error GoTo Error
    'put in variable, can't pass objects directly
    Set aTemplate = ActiveDocument.AttachedTemplate
    UILib.RemoveMT3Macros aTemplate
        Exit Sub
Error:
        WriteLog "NoDirectCall_App_DocumentChange error"
End Sub

Public Sub NoDirectCall_FilePrintPreview()
    Dim Doc As Document
    Dim styleVisible As Boolean

    Set Doc = ActiveDocument
    If Not Doc Is Nothing Then
        If PrintPreview Then
            PrintPreview = False
        Else
            styleVisible = IsSectionStyleVisible()
            If styleVisible Then HideSectionStyle
            Doc.PrintPreview
            ' if the style is visible, we need to loop until the print
            ' preview "mode" ends. We need to make sure that DoEvents
            ' gets called so the user can do other things in the UI
            If styleVisible Then
                Do Until PrintPreview = False
                    DoEvents
                Loop
                ' when the loop ends, show the style
                ShowSectionStyle
            End If
        End If
    End If
End Sub

Public Sub NoDirectCall_FilePrintDefault()
    PrintDoc False
End Sub


Public Sub NoDirectCall_FilePrint()
    PrintDoc True
End Sub

Public Sub NoDirectCall_InsertEquation()
    RunDispatch "", kMTCommands & ".MTInsertEquation.InsertInlineEquation", False
End Sub

Public Sub NoDirectCall_ShowAll()
    Dim saved As Boolean
    saved = ActiveDocument.saved
    If ActiveWindow.ActivePane.View.ShowAll Then
        HideSectionStyle
    Else
        ShowSectionStyle
    End If
    ActiveWindow.ActivePane.View.ShowAll = Not ActiveWindow.ActivePane.View.ShowAll
    ActiveDocument.saved = saved
End Sub

Public Sub NoDirectCall_EditTextEqn()
    Dim stat As Long
    stat = MsgBox(UILib.GetUserString("!2500This is a MathType 1.x (non-OLE) equation. The Convert Equations... command can be used to convert it to a MathType 4 equation. Do you want to do this now?"), _
        vbQuestion + vbYesNo, UILib.GetUserString2("1620", "3220", "MathType Macro Message"))

    If stat = vbYes Then UILib.MTCommand_ConvertEqns
End Sub

Public Sub NoDirectCall_EditDispEqn()
    Dim stat As Long
    stat = MsgBox(UILib.GetUserString("!2500This is a MathType 1.x (non-OLE) equation. The Convert Equations... command can be used to convert it to a MathType 4 equation. Do you want to do this now?"), _
        vbQuestion + vbYesNo, UILib.GetUserString2("1620", "3220", "MathType Macro Message"))

    If stat = vbYes Then UILib.MTCommand_ConvertEqns
End Sub

'Support Functions
'Returns True if style exists in the active document.
Private Function styleExists(style As String) As Boolean
    Dim aStyle As style
    styleExists = False
    On Error GoTo abort
    Set aStyle = ActiveDocument.Styles(style)
    'if we get here the style exists
    styleExists = True
abort:
End Function

'If MTEquationSection style exists, make it not hidden
Private Sub ShowSectionStyle()
    If styleExists(mtstyle_EQUATION_SECTION) Then
        ActiveDocument.Styles(mtstyle_EQUATION_SECTION).font.Hidden = False
    End If
End Sub

'If MTEquationSection style exists, make it hidden
Public Sub HideSectionStyle()
    If styleExists(mtstyle_EQUATION_SECTION) Then
        ActiveDocument.Styles(mtstyle_EQUATION_SECTION).font.Hidden = True
    End If
End Sub

'Returns True if MTEquationSection style is visible
Public Function IsSectionStyleVisible() As Boolean
    IsSectionStyleVisible = False
    If styleExists(mtstyle_EQUATION_SECTION) Then
        IsSectionStyleVisible = _
            Not (ActiveDocument.Styles(mtstyle_EQUATION_SECTION).font.Hidden)
    End If
End Function

'Hides our MTEquationSection style if necessary before printing
Private Sub PrintDoc(ui As Boolean)
    On Error GoTo abort
    Dim styleVisible As Boolean
    styleVisible = IsSectionStyleVisible()
    If styleVisible Then HideSectionStyle
    With Dialogs(wdDialogFilePrint)
        If ui Then
            .Show
        Else
            .Execute
        End If
    End With
    If styleVisible Then ShowSectionStyle
abort:
End Sub

'************* MTW5 class module code *****************

Public Sub NoDirectCall_App_DocumentBeforeSave()
    ' delay 3 seconds and update the UI
    If Not MTApp.App Is Nothing Then
        MTApp.App.OnTime Now + TimeValue("00:00:03"), "UIUpdate"
    End If
End Sub

Public Sub NoDirectCall_App_DocumentOpen()
    CheckEqnsFromOtherPlatform
    InitDefaultEqnNumSide
    Invalidate
End Sub

Private Sub CheckEqnsFromOtherPlatform()
    On Error GoTo MacError

    If (MTW5_aDoc Is Nothing) Then
        Exit Sub
    End If

    If GetPlatform() = kPlatformMac Then
        If MTW5_aDoc.CustomDocumentProperties(mtprop_HAS_WIN_EQNS) = True Then
            DeleteDocProperty MTW5_aDoc, mtprop_HAS_WIN_EQNS
            AskRunConvertEquations kPlatformWin
        End If
    End If

WinTest:
    On Error GoTo WinError
    If GetPlatform() = kPlatformWin Then
        If MTW5_aDoc.CustomDocumentProperties.Item(mtprop_HAS_MAC_EQNS).value = True Then
            DeleteDocProperty MTW5_aDoc, mtprop_HAS_MAC_EQNS
            AskRunConvertEquations kPlatformMac
        End If
    End If
    Exit Sub

MacError:
    Resume WinTest:

WinError:
End Sub

'Prompt to run Convert Equations
Private Sub AskRunConvertEquations(platformID As Long)
    Dim stat As Long
    Dim msg As String

    msg = UILib.GetUserString2("0600", "0600", "This document contains equations created on a Macintosh computer. To view the equations correctly you should run the Convert Equations command. Would you like to run this command now?")

    stat = MsgBox(msg, vbQuestion + vbYesNo, UILib.GetUserString("!1806MathType Commands for Word"))
    If stat = vbYes Then
        UILib.MTCommand_ConvertEqns
    End If
End Sub
'Deletes document property, OK to call if it doesn't exist
Public Sub DeleteDocProperty(Doc As Document, prop As String)
    On Error GoTo Error
    Doc.CustomDocumentProperties(prop).Delete
Error:
End Sub

'Similar to MTLib.GetPlatform, returns kPlatformWin or kPlatformMac
Private Function GetPlatform() As Long
    If InStr(1, System.OperatingSystem, "Macintosh", vbTextCompare) > 0 Then
        GetPlatform = kPlatformMac
    Else
        GetPlatform = kPlatformWin
    End If
End Function

Public Sub NoDirectCall_App_WindowActivate()
    InitDefaultEqnNumSide
    Invalidate
    UIUpdate
End Sub

Public Sub NoDirectCall_App_WindowSelectionChange()
    ' special handling for hitting return when on the right side of a EB equation
    checkForEBEquationAfterReturn
    UIUpdate
End Sub

' special handling for hitting return when on the right side of a EB equation
Private Sub checkForEBEquationAfterReturn()
#If Win32 Then
    Application.ScreenUpdating = False
    Dim resetSelection As Boolean
    resetSelection = False
    On Error Resume Next
    ' this only applies to Office 2007
    If Val(Application.version) >= kWord2007 Then
        ' use Win32 API to obtain the state of the return key
        ' the high order bit is set to 1 if the return key is down
        ' which looks like a negative integer
        Dim result As Integer
        result = GetKeyState(KeyCodeConstants.vbKeyReturn)
        ' keep the selection in case we need to revert back to it
        Dim savedRng As Range
        Set savedRng = Selection.Range.Duplicate

        ' the following variables are used to achieve late binding
        ' (i.e. for compiling on pre-Office 2007)
        Dim tbl
        Dim sel
        Set sel = Selection
        With sel
            Set tbl = .Tables(1)

            ' EB equations we have inserted are suspposed to have a table around them
            If IsEmpty(tbl) Then
                ' we did not change the selection, so just bail
                Application.ScreenUpdating = True
                Exit Sub
            End If

            ' if the return key is pressed, and we are in a EB equation table,
            ' but we are not inside a EB equation
            If result < 0 And _
                .Information(wdWithInTable) And _
                tbl.style.NameLocal = mttstyle_EB_NUMBERED_EQUATION And _
                sel.OMaths.Count = 0 Then

                ' backup one character and see if we are in a EB equation
                .MoveLeft

                If sel.OMaths.Count > 0 Then
                    ' since we are in a EB equation, move one more to the left,
                    ' which should put the cursor just after the equation,
                    ' but before the return character, and then delete
                    .MoveLeft
                    .Delete
                    ' now jump out of the table and enter a new paragraph,
                    ' which is what the user really wanted to do
                    While .Information(wdWithInTable)
                        If .MoveRight = 0 Then Exit Sub
                    Wend
                    .TypeParagraph
                    .MoveLeft
                Else
                    resetSelection = True
                End If
            End If
        End With
    End If
done:
    If resetSelection Then
        ' we must not be in a EB equation, so reset the selection
        savedRng.Select
    End If
    Application.ScreenUpdating = True
#End If
End Sub

Attribute VB_Name = "UIRibbonCls"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'=====================================================================
' (c) Copyright 2007-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/UIRibbonCls.cls 18    6/23/10 6:50p Robertm $
'=====================================================================

Private Const kUILib As String = "UILibCls"
Private Const kPPInsertMTEquation As String = "PPInsertMTEquationCls"
Private Const kUIHelp As String = "UIHelpCls"
Private Const kUIBrowse As String = "PPBrowseCls"

Private m_lError As Long
Private m_sError As String

' Expose the error description
' This error number is required because the CallByName
' function does not return the correct error
Public Property Get ErrorDescription() As String
    ErrorDescription = m_sError
End Property

' Expose the error number
' This error number is required because the CallByName
' function does not return the correct error
Public Property Get ErrorNumber() As Long
    ErrorNumber = m_lError
End Property

Public Sub NoDirectCall_OnRibbonLoaded()
  Set gMTRibbon = ribbon
End Sub

Public Sub NoDirectCall_OnSelectedIndexBrowseType()
    If Application.name = kAppMSW Then
        If gMTBrowseType = 0 Then
            index = gMTBrowseType
        Else
            ' adjust to zero based index before setting the value
            index = gMTBrowseType - 1
        End If
    End If
End Sub

Public Sub NoDirectCall_OnInsertInlineEqn()
    If Application.name = kAppMSW Then
        RunDispatch kUILib, "NoDirectCall_InsertInlineEqn"
    ElseIf Application.name = kAppMSPP Then
        RunDispatch kPPInsertMTEquation, "NoDirectCall_OnInsertEquation"
    End If
End Sub

Public Sub NoDirectCall_OnInsertDispEqn()
    If Application.name = kAppMSW Then
        RunDispatch kUILib, "NoDirectCall_InsertDispEqn"
    End If
End Sub

Public Sub NoDirectCall_OnInsertLeftNumberedDispEqn()
    If Application.name = kAppMSW Then
        #If Word Then
        If gMTEqnNumsOnRight = True Then
            gMTEqnNumsOnRight = False
            Invalidate
            SaveDefaultEqnNumSide
        End If
        RunDispatch kUILib, "NoDirectCall_InsertLeftNumberedDispEqn"
        #End If
    End If
End Sub

Public Sub NoDirectCall_OnInsertRightNumberedDispEqn()
    If Application.name = kAppMSW Then
        #If Word Then
        If gMTEqnNumsOnRight = False Then
            gMTEqnNumsOnRight = True
            Invalidate
            SaveDefaultEqnNumSide
        End If
        RunDispatch kUILib, "NoDirectCall_InsertRightNumberedDispEqn"
        #End If
    End If
End Sub

Public Sub NoDirectCall_OnInsHandEqn()
    If Application.name = kAppMSW Then
        RunDispatch "", kMTCommands & ".MTMathInputControl.Main", False, mtbIDInsHandEqn
    ElseIf Application.name = kAppMSPP Then
        RunDispatch kPPInsertMTEquation, "NoDirectCall_OnInsPPHandEqn"
    End If
End Sub

Public Sub NoDirectCall_OnInsertInlineEqnEB()
    #If Word Then
        If Documents.Count > 0 Then
            cancelDefault = False
            MTIncrementStatisticBy "CEBInline", 1
        End If
    #ElseIf PP Then
        If Presentations.Count > 0 Then
            cancelDefault = False
            MTIncrementStatisticBy "CEBInline", 1
        End If
    #End If
End Sub

Public Sub NoDirectCall_OnInsertLeftNumberedDispEqnEB()
    If Application.name = kAppMSW Then
        RunDispatch kUILib, "NoDirectCall_InsertLeftNumberedDispEqnEB"
    End If
End Sub

Public Sub NoDirectCall_OnInsertRightNumberedDispEqnEB()
   If Application.name = kAppMSW Then
        RunDispatch kUILib, "NoDirectCall_InsertRightNumberedDispEqnEB"
   End If
End Sub


Public Sub NoDirectCall_OnFormatEquations()
    If Application.name = kAppMSW Then
        RunDispatch "", kMTCommands & ".MTFormatEquations.Main", False
    End If
End Sub

Public Sub NoDirectCall_OnConvertEquations()
    If Application.name = kAppMSW Then
        RunDispatch "", kMTCommands & ".MTConvertEquations.Main", False
    End If
End Sub

Public Sub NoDirectCall_OnTeXToggle()
    If Application.name = kAppMSW Then
        RunDispatch "", kMTCommands & ".MTTeXToggle.Main", False
    End If
End Sub

Public Sub NoDirectCall_OnExportEquations()
    If Application.name = kAppMSW Then
        RunDispatch "", kMTCommands & ".MTExportEquations.Main", False
    End If
End Sub

Public Sub NoDirectCall_OnMathPage()
    If Application.name = kAppMSW Then
        RunDispatch "", kMTCommands & ".MathPage.MP_ExportTo", False
    End If
End Sub

Public Sub NoDirectCall_OnSetEquationPrefs()
    If Application.name = kAppMSW Then
        RunDispatch "", kMTCommands & ".MTSetEqnPrefs.Main", False
    End If
End Sub

Public Sub NoDirectCall_OnInsertEquationNumber()
    If Application.name = kAppMSW Then
        RunDispatch kUILib, "NoDirectCall_InsertEqnNum"
    End If
End Sub


Public Sub NoDirectCall_OnFormatEquationNumbers()
    If Application.name = kAppMSW Then
        RunDispatch "", kMTCommands & ".MTEqnNumFormat.Main", False
    End If
End Sub

Public Sub NoDirectCall_OnUpdateEquationNumbers()
    If Application.name = kAppMSW Then
        RunDispatch kUILib, "NoDirectCall_UpdateEqns", True
    End If
End Sub

Public Sub NoDirectCall_OnEquationReference()
    If Application.name = kAppMSW Then
        RunDispatch kUILib, "NoDirectCall_InsertEqnRef"
    End If
End Sub


Public Sub NoDirectCall_OnInsertChapterSectionBreak()
    If Application.name = kAppMSW Then
        RunDispatch "", kMTCommands & ".MTSecNum.Main", False
    End If
End Sub

Public Sub NoDirectCall_OnInsertNextSection()
    If Application.name = kAppMSW Then
        RunDispatch "", kMTCommands & ".MTSecNum.InsertNextSectionBreak", False
    End If
End Sub

Public Sub NoDirectCall_OnInsertNextChapter()
    If Application.name = kAppMSW Then
        RunDispatch "", kMTCommands & ".MTSecNum.InsertNextChapterBreak", False
    End If
End Sub

Public Sub NoDirectCall_OnModifyChapterSectionBreak()
    If Application.name = kAppMSW Then
        RunDispatch "", kMTCommands & ".MTFormatEquationSection.Main", False
    End If
End Sub

Public Sub NoDirectCall_OnHelpContents()
    RunDispatch kUIHelp, "NoDirectCall_ShowHelpContents"
End Sub

Public Sub NoDirectCall_OnHelpMTInWord()
     RunDispatch kUIHelp, "NoDirectCall_ShowHelpMTInWord"
End Sub

Public Sub NoDirectCall_OnUnlockReg()
    RunDispatch kUIHelp, "NoDirectCall_ShowUnlockReg"
End Sub

Public Sub NoDirectCall_OnAboutMT()
    RunDispatch kUIHelp, "NoDirectCall_ShowAboutMT"
End Sub

Public Sub NoDirectCall_OnWebHomePage()
    RunDispatch kUIHelp, "NoDirectCall_ShowWebHomePage"
End Sub

Public Sub NoDirectCall_OnWebSupport()
    RunDispatch kUIHelp, "NoDirectCall_ShowWebSupport"
End Sub

Public Sub NoDirectCall_OnWebEmailFeedback()
    RunDispatch kUIHelp, "NoDirectCall_ShowWebEmailFeedback"
End Sub

Public Sub NoDirectCall_OnWebOrderMathType()
    RunDispatch kUIHelp, "NoDirectCall_ShowWebOrderMathType"
End Sub

Public Sub NoDirectCall_OnFutureMT()
    RunDispatch kUIHelp, "NoDirectCall_ShowFutureMT"
End Sub

Public Sub NoDirectCall_OnMTOptions()
    If Application.name = kAppMSW Then
        RunDispatch "", kMTCommands & ".MTOptions.Main", False
    End If
End Sub

Public Sub NoDirectCall_OnBrowseType()
    If Application.name = kAppMSW Then
        ' first index comes through as 0, so add one
        gMTBrowseType = selectedIndex + 1
    End If
End Sub

Public Sub NoDirectCall_OnBrowsePrevious()
    If Application.name = kAppMSW Then
        browseChoice = gMTBrowseType
        forward = False
        RunDispatch kUILib, "NoDirectCall_Browse"
    ElseIf Application.name = kAppMSPP Then
        forward = False
        RunDispatch kUIBrowse, "NoDirectCall_Browse"
    End If
End Sub

Public Sub NoDirectCall_OnBrowseNext()
    If Application.name = kAppMSW Then
        browseChoice = gMTBrowseType
        forward = True
        RunDispatch kUILib, "NoDirectCall_Browse"
    ElseIf Application.name = kAppMSPP Then
        forward = True
        RunDispatch kUIBrowse, "NoDirectCall_Browse"
    End If
End Sub

Public Sub NoDirectCall_OnMathInputControl()
    If Application.name = kAppMSW Then
        RunDispatch "", kMTCommands & ".MTMathInputControl.Main", False
    End If
End Sub
Attribute VB_Name = "AssertDlg"
Attribute VB_Base = "0{18E09104-8747-43EE-B780-ED8B0496B97F}{501ECCC0-F07E-4F12-95BE-4B43A571AF31}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub CommandButtonBreak_Click()
    Me.tag = "Break"
    Me.Hide
End Sub

Private Sub CommandButtonIgnore_Click()
    Me.tag = "Ignore"
    Me.Hide
End Sub
Attribute VB_Name = "Asserts"
'Asserts
'=====================================================================
' (c) Copyright 1992-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/Asserts.bas 11    10/17/11 11:13a Jimm $
'=====================================================================

' This is our private exception which starts at the lowest recommended user defined error number
Public Const DSI_ABORT_EXCEPTION As Long = vbObjectError + 512 + 1

' Used by CallbackGuard and CommandGuard classes... do not edit this value from
' outside of these classes
Public macroExecuting As Boolean
Public gVerboseLogging As Boolean
Private Const doAsserts = False

Public Sub WriteLog(msg As String)

    If gVerboseLogging = False Then
        Exit Sub
    End If

    On Error GoTo bye
    Dim folder As String
    Dim fileNum As Integer
    fileNum = 0
    Dim logFileName As String
    logFileName = "MT_VBA_Asserts.log"
    Dim logFilePath As String
    
    #If Win32 Then
        Dim fso As Object
        Set fso = CreateObject("Scripting.FileSystemObject")
    folder = fso.GetSpecialFolder(2)
        folder = folder & "\"
    #Else
        'Application.PathSeparator is undefined in Office 2011
        #If Word Then
        folder = Application.path & ":"
        #Else
        folder = GetMathTypeDir & ":"
        #End If
    #End If

    logFilePath = folder & logFileName
    fileNum = FileSystem.FreeFile
    If fileNum <> 0 Then
        Open logFilePath For Append Access Write Shared As #fileNum
        Print #fileNum, Now & ": "; msg
    End If
bye:
    If fileNum <> 0 Then
        Close #fileNum
    End If
End Sub

Public Sub AssertFailure(module As String, method As String, msg As String)
    WriteLog msg 'Log the error to a file in the user temp directory
    If doAsserts = True Then
         Dim dlg As AssertDlg
         Set dlg = New AssertDlg
         #If Mac And PP Then
         dlg.Message.Caption = ReplaceSubstring(dlg.Message.Caption, "x", module & "." & method & " " & msg)
         #Else
         dlg.Message.Caption = replace(dlg.Message.Caption, "x", module & "." & method & " " & msg)
         #End If
         
         dlg.Show
         
         If dlg.tag = "Ignore" Then
             Exit Sub
         ElseIf dlg.tag = "Break" Then
             Stop
             err.Raise DSI_ABORT_EXCEPTION
         End If
     Else
        MsgBox "MathType has detected an error in" & module & "." & method & ": " & msg & ". Please save your " & _
               "document and report this error to Design Science Technical Support."
        err.Raise DSI_ABORT_EXCEPTION
     End If
End Sub

Public Sub Assert(b As Boolean, module As String, method As String, msg As String)
    If b = False Then
        AssertFailure module, method, msg
    End If
End Sub

Public Sub LogAndAlert(module As String, method As String, msg As String)
    On Error GoTo done
    'Increment a version check variable counter.
    MTIncrementStatisticBy "OffAst", 1
    AssertFailure module, method, msg
done:
End Sub
Attribute VB_Name = "AutoExec"
'AutoExec 5.0
'=====================================================================
' (c) Copyright 1992-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/AutoExec.bas 56    10/17/11 11:13a Jimm $
'=====================================================================
Option Explicit

Public MTApp As New MTW5

Private Const module As String = "AutoExec"
Private Const moduleCLS As String = "AutoExecCls"

' This should start with MTCommand_ but it can not since Word expects this name
Public Sub Main()
    macroExecuting = False
    RunMTDLLCommand moduleCLS, "NoDirectCall_Main"
End Sub

Attribute VB_Name = "Declarations"

'Declarations.bas
'bit independent declarations

'====================================================================
' (c) Copyright 1992-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/Declarations.bas 8     5/06/14 9:54a Jimm $
'====================================================================

' Note that this module is also shared between Word and PowerPoint

Option Explicit

'name of commands project
Public Const kMTCommands As String = "MTCommandsMain"

Public Const kAppMSW As String = "Microsoft Word"
Public Const kAppMSPP As String = "Microsoft PowerPoint"

'major version IDs of Word - Windows
Public Const kWord97 As Long = 8
Public Const kWord2000 As Long = 9
Public Const kWordX As Long = 10
Public Const kWord2003 As Long = 11
Public Const kWord2007 As Long = 12
Public Const kWord2010 As Long = 14
Public Const kWord2013 As Long = 15
Public Const kWord2003SP3MinorVersion As Long = 8169
Public Const kWord2007SP2MinorVersion As Long = 6400

'major version IDs of Word - Mac
Public Const kWord2004 As Long = 11
Public Const kWord2008 As Long = 12
Public Const kWord2011 As Long = 14

'major version IDs of PPT - Windows
Public Const kPP2003 As Long = 11
Public Const kPP2007 As Long = 12
Public Const kPP2010 As Long = 14
Public Const kPP2013 As Long = 15

'major version IDs of PPT - Mac
Public Const kPP2004 As Long = 11
Public Const kPP2008 As Long = 12
Public Const kPP2011 As Long = 14

'version # of the MathType API
Public Const MTAPI_VERSION As Integer = 5

' used with the return value from MTGetAppFunctionality
#If Win32 Then
Enum DemoMode
    dmNone = 0  ' no mode at all (completely fresh install)
    dmDemo      'full functionality, but with expiration date
    dmFull      ' full functionality, registered, no expiration
    dmExpired   ' reduced functionality, demo has expired
    dmCancelled ' reduced functionality, reg num has been cancelled by reg check
End Enum
#End If

'----------- Numbers we compare against with MTAPIvers ----------
Public Const mtversMajVerHi As Integer = 1535   '0x05ff
Public Const mtversMajVerLo As Integer = 1280   '0x0500
Public Const mtversMinVer As Integer = 1280     '0x0500

'Custom Properties
'Boolean, indicates type of equations in doc
Public Const mtprop_HAS_MAC_EQNS As String = "MTMacEqns"
Public Const mtprop_HAS_WIN_EQNS As String = "MTWinEqns"
Public Const mtprop_EQN_NUMS_ON_RIGHT As String = "MTEqnNumsOnRight"

'MT registry name
#If Win32 Then
Public Const mt_REGISTRY As String = ""             'use Windows registry
#Else
Public Const mt_REGISTRY As String = "MathType6"    'use Mac file
#End If

'Registry Locations
Public Const HKEY_CLASSES_ROOT = &H80000000
Public Const HKEY_CURRENT_USER = &H80000001
Public Const HKEY_LOCAL_MACHINE = &H80000002
Public Const HKEY_USERS = &H80000003
Public Const HKEY_PERFORMANCE_DATA = &H80000004
Public Const HKEY_CURRENT_CONFIG = &H80000005
Public Const HKEY_DYN_DATA = &H80000006

Public Const mtreg_HKLM = "HKEY_LOCAL_MACHINE"
Public Const mtreg_HKCU = "HKEY_CURRENT_USER"

Public Const mtreg_MT_HKLM_HOME = "SOFTWARE\Design Science\DSMT6"
Public Const mtreg_MT_HKCU_HOME = "Software\Design Science\DSMT6"
Public Const mtreg_MT_HKLM_DIRECTORIES = mtreg_MT_HKLM_HOME & "\Directories"
Public Const mtreg_MT_DIRECTORIES_LOCATION As String = "Software\Design Science\DSMT6\Directories"

Public Const mtreg_MT_ASK_ON_PASTE As String = "AskOnPaste"
Public Const mtreg_MT_EQN_NUMS_ON_RIGHT_KEY As String = "EqnNumsOnRight"
Public Const mtreg_MT_HELPDIR_KEY As String = "HelpDir"
Public Const mtreg_MT_HELPFILE_KEY As String = "HelpFile"
Public Const mtreg_MT_HELPFILE_LOCATION As String = "Software\Design Science\DSMT6\Config"
Public Const mtreg_MT_LANGUAGEDIR_KEY As String = "LangDir"             'language support files directory
Public Const mtreg_MT_MATHPAGE_KEY As String = mtreg_MT_HKCU_HOME & "\MathPage"
Public Const mtreg_MT_PASTECANCELDEF As String = "PasteCancelDefault"   'Continue default behavior for pasting
Public Const mtreg_MT_PREFDIR_KEY As String = "PrefsDir"                'system directory
Public Const mtreg_MT_PROGDIR_KEY As String = "ProgDir"                 'app directory
Public Const mtreg_MT_VERBOSE_LOGGING_KEY As String = "VerboseLogging"
Public Const mtreg_MT_WORDCMDS_LOCATION As String = mtreg_MT_HKCU_HOME & "\WordCommands"
Public Const mtreg_MT_WORD_2003_OMML_IN_RTF As String = "OMMLinRTF"     'if non-zero look in RTF instead of PNG in Word 2003
Public Const mtreg_MT_WORD_CONVFROM As String = "ConvertFrom"           'ConvertFrom key
Public Const mtreg_MT_WORD_CONVMISC As String = "ConvertMisc"           'ConvertMisc key
Public Const mtreg_MT_WORD_CONVTO As String = "ConvertTo"               'ConvertTo key
Public Const mtreg_MT_WORD_CONVTRANS As String = "ConvertTranslator"    'ConvertTranslator key
Public Const mtreg_MT_WORD_DEFAULT_EQNNUM_CUSTOM As String = "DefaultEqnNumCustom"      'Default eqn num. format
Public Const mtreg_MT_WORD_DEFAULT_EQNNUM_FORMAT As String = "DefaultEqnNumFormat"      'Default eqn num. format
Public Const mtreg_MT_WORD_DONTSHOW_EQNNUM_WARNING As String = "NoEqnNumWarningDlg"     'Don't Show EqnNum's 'Insert Break?' dialog key
Public Const mtreg_MT_WORD_DONTSHOW_EQNREFDLG As String = "NoInsertEqnRefDlg"           'Don't Show Insert Eqn Ref dialog key
Public Const mtreg_MT_WORD_DONTSHOW_LANGDLLERROR As String = "NoLanguageDLLError"       'Don't Show Missing Lang DLL key
Public Const mtreg_MT_WORD_DONTSHOW_SLOWEQNUPDATE As String = "NoSlowUpdateEqnDlg"      'Don't Show 'Slow EqnNum updates' key
Public Const mtreg_MT_WORD_EXPORT_DIRECTORY As String = "ExportDir"     'Default export dir
Public Const mtreg_MT_WORD_EXPORT_FILETYPE As String = "ExportFileType" 'Default export filetype
Public Const mtreg_MT_WORD_EXPORT_PATTERN As String = "ExportPattern"   'Default pattern
Public Const mtreg_MT_WORD_EXPORT_REPLACE As String = "ExportReplace"   'Replace?
Public Const mtreg_MT_WORD_MATHML_PASTEAS As String = "MMLPasteAs"
Public Const mtreg_MT_WORD_NOAPPLY_CONVERTED_EQN_STYLE As String = "ConvertEqnNoStyle" 'If set does not apply the MTConvertedEquation Style to converted equations
Public Const mtreg_MT_WORD_NO_SPACE_AFTER_INLINE As String = "NoSpaceAfterInline"
Public Const mtreg_MT_WORD_NO_CHECK_PROG_ID As String = "NoCheckProgID" 'MT-3373
Public Const mtreg_MT_WORD_OMML2MML_XSL_DIRNAME As String = "OMML2MMLXSL_DIR"
Public Const mtreg_MT_WORD_OMML2MML_XSL_FILENAME As String = "OMML2MMLXSL_FILE"
Public Const mtreg_MT_WORD_SEEN_MATHMLHELP As String = "SeenMathMLHelp" '"1" if MathMLHelp tip has been shown
Public Const mtreg_MT_CONVERTEQNS_DELAY As String = "ConvertEquationDelay"  ' amount of time to delay in milliseconds after copy to clipboard in convert equations

Public Const msoreg_WORD2007DIR_SECTION As String = "Software\Microsoft\Office\12.0\Word\Options\"
Public Const msoreg_WORD2010DIR_SECTION As String = "Software\Microsoft\Office\14.0\Word\Options\"
Public Const msoreg_WORD2013DIR_SECTION As String = "Software\Microsoft\Office\15.0\Word\Options\"
Public Const msoreg_WORDDIR_KEY As String = "PROGRAMDIR"

' the following declarations are used for identifying buttons in the UI
Public Const mtbIDInsDispMTEqn As String = "MathType_B_InsDispMTEqn"
Public Const mtbIDInsDispMTEqn3 As String = "MathType_B_InsDispMTEqn3"
Public Const mtbIDInsDispMTEqnLeftNum As String = "MathType_B_InsDispMTEqnLeftNum"
Public Const mtbIDInsDispMTEqnLeftNum2 As String = "MathType_B_InsDispMTEqnLeftNum2"
Public Const mtbIDInsDispMTEqnLeftNum3 As String = "MathType_B_InsDispMTEqnLeftNum3"
Public Const mtbIDInsDispMTEqnRightNum As String = "MathType_B_InsDispMTEqnRightNum"
Public Const mtbIDInsDispMTEqnRightNum2 As String = "MathType_B_InsDispMTEqnRightNum2"
Public Const mtbIDInsDispMTEqnRightNum3 As String = "MathType_B_InsDispMTEqnRightNum3"
Public Const mtbIDInsEBEqn2 As String = "MathType_B_InsEBEqn2"
Public Const mtbIDInsHandEqn As String = "MathType_B_InsHandEqn"
Public Const mtbIDInsInlineMTEqn As String = "MathType_B_InsInlineMTEqn"
Public Const mtbIDInsInlineMTEqn3 As String = "MathType_B_InsInlineMTEqn3"
Public Const mtbIDSpeak As String = "MathType_B_Speak"
Public Const mtbIDSpeak3 As String = "MathType_B_Speak3"

'Public Const mtbIDMathType_B_InsEBEqn As String = "MathType_B_InsEBEqn" ' replaced by O2007 implementation
Public Const mtbIDInsEBEqnLeftNum As String = "MathType_B_InsEBEqnLeftNum"
Public Const mtbIDInsEBEqnRightNum As String = "MathType_B_InsEBEqnRightNum"

Public Const mtbIDInsertNumber As String = "MathType_B_InsertNumber"

Public Const mtbIDFormatEqnNums As String = "MathType_B_FormatEqnNums"
Public Const mtbIDUpdateEqnNums As String = "MathType_B_UpdateEqnNums"

Public Const mtbIDEquationReference As String = "MathType_B_EquationReference"

Public Const mtbIDManageChapterSections As String = "MathType_M_EqnNumsChapsSects"

Public Const mtbIDInsertNextSection As String = "MathType_B_InsertNextSection"
Public Const mtbIDInsertNextChapter As String = "MathType_B_InsertNextChapter"
Public Const mtbIDMoreBreaks As String = "MathType_B_MoreBreaks"
Public Const mtbIDModifyBreak As String = "MathType_B_ModifyBreak"

Public Const mtbIDBrowsePrev As String = "MathType_B_BrowsePrev"
Public Const mtbIDBrowseType As String = "MathType_DD_BrowseType"
Public Const mtbIDBrowseNext As String = "MathType_B_BrowseNext"

Public Const mtbIDSetEqnPrefs As String = "MathType_B_SetEqnPrefs"
Public Const mtbIDFormatEqns As String = "MathType_B_FormatEqns"
Public Const mtbIDConvertEqns As String = "MathType_B_ConvertEqns"
Public Const mtbIDTeXToggle As String = "MathType_B_TeXToggle"
Public Const mtbIDExportEqns As String = "MathType_B_ExportEqns"
Public Const mtbIDMathPage As String = "MathType_B_MathPage"

Public Const mtbIDHelp As String = "MathType_B_Help"
Public Const mtbIDHelpContents As String = "MathType_B_HelpContents"
Public Const mtbIDHelpMTInWord As String = "MathType_B_HelpMTInWord"
Public Const mtbIDHelpUnlockReg As String = "MathType_B_HelpUnlockReg"
Public Const mtbIDHelpAboutMT As String = "MathType_B_HelpAboutMT"

Public Const mtbIDWeb As String = "MathType_B_Web"
Public Const mtbIDWebHomePage As String = "MathType_B_WebHomePage"
Public Const mtbIDWebSupport As String = "MathType_B_WebSupport"
Public Const mtbIDWebEmailFeedback As String = "MathType_B_WebEmailFeedback"
Public Const mtbIDWebOrderMT As String = "MathType_B_WebOrderMT"
Public Const mtbIDFutureMT As String = "MathType_B_FutureMT"
Public Const mtbIDMTOptions As String = "MathType_DL_MTOptions"

Public Const mtbIDOMMathPage As String = "MathType_B_OMMathPage"

#If Word Then
Public Enum States
    AlwaysEnable = 1
    Word97SelectionInFootnoteEndnotePane = 2
    Word97SelectionInCommentPane = 4
    Word97SelectionInHeaderFooter = 8
    WordXPActiveWindowViewSplitSpecial = 16
    NotInReadingView = 32
    MTReferenceExists = 64
    NotInUnsupportedView = 128
    MathPageOK = 256
    IsDocumentOpen = 512
    SelectionInTextBox = 1024
    IsFunctionalityOK = 2048
End Enum
#ElseIf PP Then
    #If Win32 Then
    Public Enum States
        AlwaysEnable = 1
        IsPresentationOpen = 2
        ViewIsNotSlideSorter = 4
        ViewIsNotOutline = 8
        BrowseOK = 16
        NotInUnsupportedView = 32
    End Enum
    #Else ' no enum support on Mac PPT
    Public Const AlwaysEnable As Long = 1
    Public Const IsPresentationOpen As Long = 2
    Public Const ViewIsNotSlideSorter As Long = 4
    Public Const ViewIsNotOutline As Long = 8
    Public Const BrowseOK As Long = 16
    Public Const NotInUnsupportedView As Long = 32
    #End If
#End If

' major version # of this API
Public Const MPAPI_VERSION As Integer = 5

'----------- Numbers we compare against with MTAPIvers ----------
'MathType 5.01 uses the MathPage 5.1 API
Public Const mpversMajVerHi As Integer = 1535   '0x05ff
Public Const mpversMajVerLo As Integer = 1281   '0x0501
Public Const mpversMinVer As Integer = 1281     '0x0501

'API Return codes
Public Const mpOK As Long = 0
Public Const mpEQN_NO_BASELINE = 1000
Public Const mpBAD_VERSION As Long = -1000
Public Const mpMTDLL_NOT_FOUND As Long = -1001
Public Const mpFILE_INVALID As Long = -1002
Public Const mpFILE_NO_ACCESS As Long = -1003
Public Const mpNOT_AN_EQUATION As Long = -1004
Public Const mpERROR As Long = -9999

'Flag values for MPDocInit
Public Const mpdFullCompatibility As Integer = 1
Public Const mpdGenMathML As Integer = 2
Public Const mpdMathZoom As Integer = 4

'style values input to MPProcessSymbol
Public Const kPlainText As Integer = 0
Public Const kBoldText As Integer = 1
Public Const kItalicText As Integer = 2

'kind values, also returned by MPAnalyzeSymbol
Public Const kSIDefault As Long = 0                 'default value
Public Const kSIGIF As Long = 1                     'needs a GIF
Public Const kSIEntity As Long = 2                  'needs entity
Public Const kSIInsertSymbolPlaceholder As Long = 3 'maybe an inserted symbol
Public Const kSISubstituted As Long = 4             'char is being changed, 0 = delete char
Public Const kSIMissingFont As Long = 5             'font not installed

'Constants for 'cur sel' or 'whole doc'
Public Const mt_RANGE_DOCUMENT = 0
Public Const mt_RANGE_SELECTION = 1

'Flag bit for MTLib.SaveWordState()
Public Const mt_SWS_TRACKCHANGES = 1
Public Const mt_SWS_SMART_CUTPASTE = 2
Public Const mt_SWS_TYPING_REPLACE_SELECTION = 4
Public Const mt_SWS_PASTE_SMART_CUTPASTE = 8

'URL codes - also see UIHelp.bas mturl's
Public Const mturlMATHTYPE_OMML2MATHMLXSL As Long = 7

'Default OMML XSL file name
Public Const kOMML2MML_XSL_FILENAME As String = "OMML2MML.XSL"

'Word exe name
Public Const kWORDEXENAME = "WINWORD.EXE"

'MTMsgBox Constants
Public Const mt_MBYESNO = 1
Public Const mt_MBYESNOCANCEL = 2
Public Const mt_MBYES = 1
Public Const mt_MBNO = 2
Public Const mt_MBCANCEL = 3

' file type constants
Public Const kFTEPS_OSPICT As Integer = 0   'EPS+WMF, EPS+PICT
Public Const kFTEPS_NONE As Integer = 1     'EPS/None
Public Const kFTEPS_TIFF As Integer = 2     'EPS/TIFF (Win only)
Public Const kFTGIF As Integer = 3          'GIF
Public Const kFTOSPICT As Integer = 4       'WMF, PICT
Public Const kFTPDF As Integer = 5          'PDF

'Values for MTLib.GetPlatform()
Public Const kPlatformMac As Long = 1
Public Const kPlatformWin As Long = 2

' Predefined Clipboard Formats copied from C:\Program Files\Microsoft Visual Studio\Common\Tools\Winapi\WIN32API.TXT
Public Const CF_TEXT As Integer = 1
Public Const CF_BITMAP As Integer = 2
Public Const CF_METAFILEPICT As Integer = 3
Public Const CF_SYLK As Integer = 4
Public Const CF_DIF As Integer = 5
Public Const CF_TIFF As Integer = 6
Public Const CF_OEMTEXT As Integer = 7
Public Const CF_DIB As Integer = 8
Public Const CF_PALETTE As Integer = 9
Public Const CF_PENDATA As Integer = 10
Public Const CF_RIFF As Integer = 11
Public Const CF_WAVE As Integer = 12
Public Const CF_UNICODETEXT As Integer = 13
Public Const CF_ENHMETAFILE As Integer = 14

Public Const HWND_TOP = 0
Public Const SWP_SHOWWINDOW = &H40

' language type values for MTSetEqnFromLangStr
Public Const mtlangTEX_INPUT As Integer = 1
Public Const mtlangMATHML As Integer = 2
Public Const mtlangMTEF As Integer = 3

#If Win32 Then
'SHGetSpecialFolderPath parameter
Public Enum mceIDLPaths
    CSIDL_PROGRAM_FILES = &H26 ' * CSIDL_PROGRAM_FILES - Version 5.0. Program Files folder. A common path is C:\Program Files.
End Enum
#End If

Type SymbolInfo
    kind As Integer         'out from MPFindSymbol, input to MPProcessSymbol (see above)
    charCode As Integer     'out from MPFindSymbol, input to MPProcessSymbol
    isUniCode As Boolean    'private to WLL
    size As Single
    style As Integer        'see style constants above
    color As Long           'RGB value
End Type

Type BorderInfo
    width As Long           'one of wdLineWidth
    style As Long           'one of wdLineStyle
    color As Long           'RGB value
End Type

'display values for GIFInfo.display
Public Const mpdtInternal As Long = 0               'use internal inline/display setting
Public Const mpdtInline As Long = 1                 'make inline
Public Const mpdtDisplay As Long = 2                'make display

Type GIFInfo
    smooth As Boolean        'True to use anti-aliasing
    bkgndColor As Long       'only needed if (smooth || ! transparent)
    size As Single           'size of surrounding text
    fillType As Long         'one of msoFillType or 0
    topBorder As BorderInfo
    leftBorder As BorderInfo
    bottomBorder As BorderInfo
    rightBorder As BorderInfo
End Type

Type GIFInfo2
    version As Integer       'version of struct/API; 1 = MTW 5.0a
    smooth As Boolean        'True to use anti-aliasing
    bkgndColor As Long       'only needed if (smooth || ! transparent)
    size As Single           'size of surrounding text
    fillType As Long         'one of msoFillType or 0
    topBorder As BorderInfo
    leftBorder As BorderInfo
    bottomBorder As BorderInfo
    rightBorder As BorderInfo
    display As Long         'one of mpdtXXX constants
End Type

'struct for MPEnumMathMLTarget2
Type MPMathMLTarget
    browser As Integer      '0-based compatibility choice, -1 = all
    minWordVer As Integer   'min version of Word that supports target (8,9,10...)
    nameMax As Integer      'max len of name
    targetName As String    'MathML target name
    descMax As Integer      'max len of description
    targetDesc As String    'MathML target description
End Type

Type MPMathMLTarget2
    version As Integer      'struct/API version; MTW5.0a = 1
    browser As Integer      '0-based compatibility choice, -1 = all
    minWordVer As Integer   'min version of Word that supports target (8,9,10...)
    nameMax As Integer      'max len of name
    targetName As String    'MathML target name
    descMax As Integer      'max len of description
    targetDesc As String    'MathML target description
    extMax As Integer       'max len of extensions
    extensions As String    'valid file extensions, first is default
End Type

' maximum length of file paths, names, etc.
Public Const MTAPI_MAX_PATH As Long = 260

' Picture specifier
Public Type MTAPI_PICT
   mm    As Long
   xExt  As Long
   yExt  As Long
   hMF   As Long
End Type

Public Type RECT
   left     As Long
   top      As Long
   right    As Long
   bottom   As Long
End Type

' Picture dimensions
Public Type MTAPI_DIMS
   baseline As Integer  ' dist of baseline from bottom (points)
   bounds   As RECT     ' bounding rectangle (points)
End Type

'Info about chap/sec break
#If Word Then
Public Type BreakInfo
    parentField As Field                'Enclosing Macrobutton Field
    hasChapter As Boolean               'True if chapter field present
    isExplicitChapterNumber As Boolean  'True if chap# is explicit
    chapterNumber As String             'Explicit chap#'s value
    isExplicitSectionNumber As Boolean  'True if sec# is explicit
    sectionNumber As String             'Explicit sec#'s value
End Type
#Else
' Field is undefined in PowerPoint
Public Type BreakInfo
    'parentField As Field                'Enclosing Macrobutton Field
    hasChapter As Boolean               'True if chapter field present
    isExplicitChapterNumber As Boolean  'True if chap# is explicit
    chapterNumber As String             'Explicit chap#'s value
    isExplicitSectionNumber As Boolean  'True if sec# is explicit
    sectionNumber As String             'Explicit sec#'s value
End Type
#End If

'GetFileVersionInfo Declarations
Type VS_FIXEDFILEINFO
   dwSignature As Long
   dwStrucVersionl As Integer
   dwStrucVersionh As Integer
   dwFileVersionMSl As Integer
   dwFileVersionMSh As Integer
   dwFileVersionLSl As Integer
   dwFileVersionLSh As Integer
   dwProductVersionMSl As Integer
   dwProductVersionMSh As Integer
   dwProductVersionLSl As Integer
   dwProductVersionLSh As Integer
   dwFileFlagsMask As Long
   dwFileFlags As Long
   dwFileOS As Long
   dwFileType As Long
   dwFileSubtype As Long
   dwFileDateMS As Long
   dwFileDateLS As Long
End Type

' return codes from MT DLL API

' success, no error
Public Const mtOK As Long = 0
' equation OLE 1.0 object on clipboard
Public Const mtOLE_EQUATION As Long = 1
' Windows metafile equation graphic (not OLE object) on clipboard
Public Const mtWMF_EQUATION As Long = 2
' Macintosh PICT equation graphic (not OLE object) on clipboard
Public Const mtMAC_PICT_EQUATION As Long = 4
' equation OLE 2.0 object on clipboard
Public Const mtWORD_EQUATION As Long = 5
Public Const mtTEXT_EQUATION As Long = 6
Public Const mtMACRO_EQUATION As Long = 7
Public Const mtOLE2_EQUATION As Long = 8
Public Const mtOMML_EQUATION As Long = 9

' error return codes

' can't find MathType application
Public Const mtMT_NOT_FOUND As Long = -1
' can't run the MathType application
Public Const mtMT_CANT_RUN As Long = -2
' the MathType application is the wrong version
Public Const mtMT_BAD_VERSION As Long = -3
' the MathType application is already in use
Public Const mtMT_IN_USE As Long = -4
' the MathType application is not running (i.e. unexpectedly aborted)
Public Const mtMT_NOT_RUNNING As Long = -5
' time ran out waiting for the MathType application to start up
Public Const mtRUN_TIMEOUT As Long = -6
' not equation on clipboard
Public Const mtNOT_EQUATION As Long = -7
' file does not exist or bad pathname
Public Const mtFILE_NOT_FOUND As Long = -8
'  insufficient memory
Public Const mtMEMORY As Long = -9
' bad file
Public Const mtBAD_FILE As Long = -10
' requested data does not exist
Public Const mtDATA_NOT_FOUND As Long = -11
' too many server session open
Public Const mtTOO_MANY_SESSIONS As Long = -12
' could not perform one or more subs
Public Const mtSUBSTITUTION_ERROR As Long = -13
' could not perform translation
Public Const mtTRANSLATOR_ERROR As Long = -14
' could not set preferences, or invalid preference string
Public Const mtPREFERENCE_ERROR As Long = -15
' bad path (e.g. directory doesn't exist)
Public Const mtBAD_PATH As Long = -16
' file access error (e.g. user doesn't have privileges to write file)
Public Const mtFILE_ACCESS As Long = -17
' file write error (e.g. disk full)
Public Const mtFILE_WRITE_ERROR As Long = -18
' other error
Public Const mtERROR As Long = -9999

' options values for MTInitAPI
Public Const mtinitLAUNCH_AS_NEEDED As Integer = 0
Public Const mtinitLAUNCH_NOW As Integer = 1

' options values for MTGetLastDimension
Public Const mtdimFIRST              As Integer = 1
Public Const mtdimWIDTH              As Integer = 1
Public Const mtdimHEIGHT             As Integer = 2
Public Const mtdimBASELINE           As Integer = 3
Public Const mtdimHORIZ_POS_TYPE     As Integer = 4
Public Const mtdimHORIZ_POS          As Integer = 5
Public Const mtdimLAST               As Integer = 5

' options values for MTGetTranslatorsInfo
Public Const mttrnCOUNT As Integer = 1
Public Const mttrnMAX_NAME As Integer = 2
Public Const mttrnMAX_DESC As Integer = 3
Public Const mttrnMAX_FILE As Integer = 4
Public Const mttrnOPTIONS As Integer = 5

' options values for MTXFormSetPrefs
Public Const mtxfmPREF_EXISTING As Integer = 1
Public Const mtxfmPREF_MTDEFAULT As Integer = 2
Public Const mtxfmPREF_USER As Integer = 3
Public Const mtxfmPREF_LAST As Integer = 3

' options values for MTXFormSetTranslator
Public Const mtxfmTRANSL_INC_NONE As Integer = 0
Public Const mtxfmTRANSL_INC_NAME As Integer = 1
Public Const mtxfmTRANSL_INC_DATA As Integer = 2
Public Const mtxfmTRANSL_INC_MTDEFAULT As Integer = 4
Public Const mtxfmTRANSL_INC_CLIPBOARD_EXTRA As Integer = 8

' return values from MTXFormGetStatus
Public Const mtxfmSTAT_PREF As Long = -3
Public Const mtxfmSTAT_TRANSL As Long = -2
Public Const mtxfmSTAT_ACTUAL_LEN As Long = -1

' data sources/destinations for MTXFormEqn
Public Const mtxfmPREVIOUS As Integer = -1
Public Const mtxfmCLIPBOARD As Integer = -2
Public Const mtxfmLOCAL As Integer = -3
Public Const mtxfmFILE As Integer = -4

' data formats for MTXFormEqn
Public Const mtxfmMTEF As Integer = 4
Public Const mtxfmHMTEF As Integer = 5
Public Const mtxfmPICT As Integer = 6
Public Const mtxfmTEXT As Integer = 7
Public Const mtxfmHTEXT As Integer = 8
Public Const mtxfmGIF As Integer = 9
Public Const mtxfmEPS_NONE As Integer = 10
Public Const mtxfmEPS_WMF As Integer = 11
Public Const mtxfmEPS_TIFF As Integer = 12
Public Const mtxfmRTF As Integer = 13
Public Const mtxfmPDF As Integer = 14

' option values for MTSetMTPrefs
Public Const mtprfMODE_NEXT_EQN  As Integer = 1
Public Const mtprfMODE_MTDEFAULT As Integer = 2
Public Const mtprfMODE_INLINE    As Integer = 4

' option values for MTXFormAddVarSub
Public Const mtxfmSUBST_ALL As Integer = 0
Public Const mtxfmSUBST_ONE As Integer = 1

' find/replace types for MTXFormAddVarSub substitutions
Public Const mtxfmVAR_SUB_BAD         As Integer = -1
Public Const mtxfmVAR_SUB_PLAIN_TEXT  As Integer = 0
Public Const mtxfmVAR_SUB_MTEF_TEXT   As Integer = 1
Public Const mtxfmVAR_SUB_MTEF_BINARY As Integer = 2
Public Const mtxfmVAR_SUB_DELETE      As Integer = 3
Public Const mtxfmVAR_SUB_MAX         As Integer = 4

' replace styles for MTXFormAddVarSub substitutions where type = mtxfmVAR_SUB_PLAIN_TEXT
Public Const mtxfmSTYLE_FIRST    As Integer = 1
Public Const mtxfmSTYLE_TEXT     As Integer = 1
Public Const mtxfmSTYLE_FUNCTION As Integer = 2
Public Const mtxfmSTYLE_VARIABLE As Integer = 3
Public Const mtxfmSTYLE_LCGREEK  As Integer = 4
Public Const mtxfmSTYLE_UCGREEK  As Integer = 5
Public Const mtxfmSTYLE_SYMBOL   As Integer = 6
Public Const mtxfmSTYLE_VECTOR   As Integer = 7
Public Const mtxfmSTYLE_NUMBER   As Integer = 8
Public Const mtxfmSTYLE_LAST     As Integer = 8

' tokens for MathType translator text equations
Public Const mttexteqn_START As String = "% MathType!"
Public Const mttexteqn_END As String = "% MathType!End!"

' Property names
Public Const mtprop_USE_MATHTYPE_PREFS  As String = "MTUseMTPrefs"          'True to use MathType's prefs for new equations
Public Const mtprop_PREFERENCES         As String = "MTPreferences"         'doc's settings for new equations
Public Const mtprop_PREFERENCES_FILE    As String = "MTPreferenceSource"    'pref filename
Public Const mtprop_MTW4_NUMBER_PREFS   As String = "MTEquationNumber"      'MTW4 equation number format
Public Const mtprop_NUMBER_PREFS        As String = "MTEquationNumber"      'MT eqn number format
Public Const mtprop_NUMBER_PREFS_VER    As Long = 2                         'MTW5 & newer property version number
Public Const mtprop_CUSTOM_EQNNUM_PREFS As String = "MTCustomEquationNumber" 'True if eqn number format is custom
Public Const mtprop_DEFER_FIELD_UPDATE  As String = "MTDeferFieldUpdate"    'Controls auto field updating
Public Const mtprop_EQUATION_SECTION_CHECKED As String = "MTEquationSection" 'True if 'eqn section number = 0' check has been made
Public Const mtprop_EQNREFPANE          As String = "MTEqnRefPane"          'Pane # containing insertion point where ref. is to be placed

'old Autotext entry for MTW3's equation# format
Public Const mtautotext_MT3_EQN_NUMBER_FORMAT As String = "ZMTEqnNumFormatPrefs"

' Version-independent MathType OLE ID
Public Const mtole_PROGID As String = "DSEquations"

' Styles
Public Const mtstyle_EQUATION_SECTION As String = "MTEquationSection"
Public Const mtstyle_DISPLAY_EQUATION As String = "MTDisplayEquation"
Public Const mtstyle_CONVERTED_EQUATION As String = "MTConvertedEquation"
' Table Styles
Public Const mttstyle_EB_NUMBERED_EQUATION As String = "MTEBNumberedEquation"

' Macrobuttons
Public Const mtmacro_EDIT_EQUATION_SECTION As String = "MTEditEquationSection"
Public Const mtmacro_EDIT_EQUATION_SECTION_VER As String = "2"  'MTW5 & newer property version number

Attribute VB_Name = "Declarations32"

'Declarations32.bas
'32 bit Windows declarations

'=====================================================================
' (c) Copyright 1992-2011 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/OS/Win/32-bits/Declarations32.bas 6     1/24/14 10:10a Jimm $
'=====================================================================

Public Const kBits As Long = 32

'=====================================================================
'MATHPAGE declarations
'=====================================================================
Public Declare Function MPAnalyzeSymbol Lib "MathPage.WLL" (ByVal charCode As Integer, ByVal font As String, ByRef info As SymbolInfo) As Long
Public Declare Function MPAPIVersion Lib "MathPage.WLL" (ByVal api As Integer) As Long
Public Declare Function MPCopySupportFiles Lib "MathPage.WLL" () As Long
Public Declare Function MPDocInit Lib "MathPage.WLL" (ByVal docDir As String, ByVal support As String, ByVal wordVer As Integer, ByVal flags As Integer, ByVal target As String) As Long
Public Declare Function MPDocTerm Lib "MathPage.WLL" () As Long
Public Declare Function MPEnumMathMLTarget Lib "MathPage.WLL" (ByVal index As Integer, ByRef targetInfo As MPMathMLTarget) As Long
Public Declare Function MPEnumMathMLTarget2 Lib "MathPage.WLL" (ByVal index As Integer, ByRef targetInfo As MPMathMLTarget2) As Long
Public Declare Function MPFileCleanup Lib "MathPage.WLL" (ByVal fileName As String, ByVal supportDir As String) As Long
#If Word Then
'Range is undefined in PowerPoint
Public Declare Function MPFindSymbol Lib "MathPage.WLL" (ByVal Range As Range, ByVal font As String, ByRef info As SymbolInfo) As Long
#End If
Public Declare Function MPOpenFileInBrowser Lib "MathPage.WLL" (ByVal path As String) As Long
Public Declare Function MPProcessEquation Lib "MathPage.WLL" (ByVal gifFile As String, ByRef info As GIFInfo, ByVal tagAttrs As String) As Long
Public Declare Function MPProcessEquation2 Lib "MathPage.WLL" (ByVal gifFile As String, ByRef info As GIFInfo2, ByVal tagAttrs As String) As Long
Public Declare Function MPProcessHTML Lib "MathPage.WLL" (ByVal inPath As String, ByVal outPath As String) As Long
Public Declare Function MPProcessHTML2 Lib "MathPage.WLL" (ByVal inPath As String, ByVal outPath As String, ByVal isMasterDoc As Long) As Long
Public Declare Function MPProcessSymbol Lib "MathPage.WLL" (ByVal gifFile As String, ByVal font As String, ByRef info As SymbolInfo, ByVal symbolID As String, ByVal tagAttrs As String) As Long
Public Declare Function MTAPIGetNestingLevel Lib "MathPage.WLL" () As Long
Public Declare Function MTAPIVersion Lib "MathPage.WLL" (ByVal api As Integer) As Long
Public Declare Function MTClearClipboard Lib "MathPage.WLL" () As Long
Public Declare Function MTCloseOleObject Lib "MathPage.WLL" (ByVal dwSaveOpts As Long, ByVal varOleObject As Object) As Long
Public Declare Function MTConvertPrefsToUIForm Lib "MathPage.WLL" (ByVal inPrefs As String, ByVal outPrefs As String, ByVal outPrefsLen As Integer) As Long
Public Declare Function MTCopyButtonFace Lib "MathPage.WLL" (ByVal tag As String) As Long
Public Declare Function MTCrashTest Lib "MathPage.WLL" (ByVal where As Long, ByVal how As Long) As Long
Public Declare Function MTCreateDirectory Lib "MathPage.WLL" (ByVal directory As String) As Long
Public Declare Function MTEnumTranslators Lib "MathPage.WLL" (ByVal index As Integer, ByVal transName As String, ByVal transNameLen As Integer, ByVal transDesc As String, ByVal transDescLen As Integer, ByVal transFile As String, ByVal transFileLen As Integer) As Long
Public Declare Function MTEquationOnClipboard Lib "MathPage.WLL" () As Long
Public Declare Function MTGetAppFunctionality Lib "MathPage.WLL" () As Long
Public Declare Function MTGetClipboardText Lib "MathPage.WLL" (ByVal cbText As String, ByRef cbTextLen As Long) As Long
Public Declare Function MTGetLangBytesFromEqn Lib "MathPage.WLL" (ByVal myObj As Object, ByVal langType As Integer, ByRef langBuff As Byte, ByRef buffLen As Long) As Long
Public Declare Function MTGetLangStrFromEqn Lib "MathPage.WLL" (ByVal myObj As Object, ByVal langType As Integer, ByVal langStr As String, ByRef strLen As Long) As Long
Public Declare Function MTGetLastDimension Lib "MathPage.WLL" (ByVal dimIndex As Integer) As Long
Public Declare Function MTGetLocaleDLL Lib "MathPage.WLL" (ByVal buffer As String, ByRef length As Long) As Long
Public Declare Function MTGetLocaleString Lib "MathPage.WLL" (ByVal str As String, ByVal buffer As String, ByRef length As Long) As Long
Public Declare Function MTGetMathMLFromClipboard Lib "MathPage.WLL" (ByVal mathMlStr As String, ByRef mathMlDataLen As Long) As Long
Public Declare Function MTGetMathMLFromClipboardText Lib "MathPage.WLL" (ByVal mathMlStr As String, ByRef mathMlDataLen As Long) As Long
Public Declare Function MTGetOMMLFromClipboardHTML Lib "MathPage.WLL" (ByVal ommlData As String, ByRef ommlDataLen As Long) As Long
Public Declare Function MTGetOMMLFromClipboardPNGOA Lib "MathPage.WLL" (ByVal ommlData As String, ByRef ommlDataLen As Long) As Long
Public Declare Function MTGetOMMLFromClipboardRTF Lib "MathPage.WLL" (ByVal ommlData As String, ByRef ommlDataLen As Long) As Long
Public Declare Function MTGetPreference Lib "MathPage.WLL" (ByVal name As String, ByVal value As String, ByRef valueLen As Integer, ByVal section As String, ByVal filePath As String) As Long
Public Declare Function MTGetPrefsFromClipboard Lib "MathPage.WLL" (ByVal prefs As String, ByVal prefsLen As Integer) As Long
Public Declare Function MTGetPrefsFromFile Lib "MathPage.WLL" (ByVal prefFile As String, ByVal prefs As String, ByVal prefsLen As Integer) As Long
Public Declare Function MTGetPrefsMTDefault Lib "MathPage.WLL" (ByVal prefs As String, ByVal prefsLen As Integer) As Long
Public Declare Function MTGetTickCount Lib "MathPage.WLL" () As Long
Public Declare Function MTGetTranslatorsInfo Lib "MathPage.WLL" (ByVal infoIndex As Integer) As Long
Public Declare Function MTGetURL Lib "MathPage.WLL" (ByVal whichURL As Long, ByVal bGoToURL As Boolean, ByVal strURL As String, ByVal sizeURL As Long) As Long
Public Declare Function MTGetUserString Lib "MathPage.WLL" (ByVal str As String, ByVal buffer As String, ByRef length As Long) As Long
Public Declare Function MTGetUserWString Lib "MathPage.WLL" (ByVal str As String, ByRef buffer As Byte, ByRef length As Long) As Long
Public Declare Function MTIncrementStatisticBy Lib "MathPage.WLL" (ByVal name As String, ByVal value As Long) As Long
Public Declare Function MTInitAPI Lib "MathPage.WLL" (ByVal options As Integer, ByVal timeout As Integer) As Long
Public Declare Function MTInitLocaleStringDLL Lib "MathPage.WLL" (ByVal version As Long, ByVal languageID As Long) As Long
Public Declare Function MTInsertHandwrittenMath Lib "MathPage.WLL" () As Long
Public Declare Function MTIsClipboardFormatAvailable Lib "MathPage.WLL" (ByVal lpsFormat As String, ByVal iFormat As Integer, ByRef isAvailable As Boolean) As Long
Public Declare Function MTIsFullFunctionality Lib "MathPage.WLL" () As Long
Public Declare Function MTIsMathInputPanelAvailable Lib "MathPage.WLL" (ByRef isAvailable As Boolean) As Long
Public Declare Function MTIsMathInputPanelTheClipboardOwner Lib "MathPage.WLL" (ByRef mipIsCBOwner As Boolean) As Long
Public Declare Function MTOpenFileDialog Lib "MathPage.WLL" (ByVal fileType As Integer, ByVal title As String, ByVal dir As String, ByVal file As String, ByVal fileLen As Integer) As Long
Public Declare Function MTPreviewDialog Lib "MathPage.WLL" (ByVal parent As Long, ByVal title As String, ByVal prefs As String, ByVal closeBtnText As String, ByVal helpBtnText As String, ByVal helpID As Long, ByVal helpFile As String) As Long
Public Declare Function MTSaveFileDialog Lib "MathPage.WLL" (ByVal title As String, ByVal dir As String, ByVal file As String, ByVal filterName As String, ByVal filterSpec As String, ByVal buffer As String, ByRef length As Long) As Long
Public Declare Function MTSetClipboardText Lib "MathPage.WLL" (ByVal cbText As String) As Long
Public Declare Function MTSetEqnFromLangBytes Lib "MathPage.WLL" (ByVal myObj As Object, ByVal langType As Integer, langBuff As Byte, ByVal buffLen As Long) As Long
Public Declare Function MTSetEqnFromLangStr Lib "MathPage.WLL" (ByVal myObj As Object, ByVal langType As Integer, langStr As Any, ByVal strLen As Long) As Long
Public Declare Function MTSetMTPrefs Lib "MathPage.WLL" (ByVal mode As Integer, ByVal prefs As String, ByVal timeout As Integer) As Long
Public Declare Function MTSetPreference Lib "MathPage.WLL" (ByVal name As String, ByVal value As String, ByVal section As String, ByVal filePath As String) As Long
Public Declare Function MTSetStatistic Lib "MathPage.WLL" (ByVal name As String, ByVal value As Long) As Long
Public Declare Function MTShowAboutBox Lib "MathPage.WLL" () As Long
Public Declare Function MTTermAPI Lib "MathPage.WLL" () As Long
Public Declare Function MTXFormAddVarSub Lib "MathPage.WLL" (ByVal options As Integer, ByVal findType As Integer, ByVal find As String, ByVal findLen As Long, ByVal replaceType As Integer, ByVal replace As String, ByVal replaceLen As Long, ByVal replaceStyle As Integer) As Long
Public Declare Function MTXFormEqn Lib "MathPage.WLL" (ByVal src As Integer, ByVal srcFmt As Integer, ByVal srcData As String, ByVal srcDataLen As Long, ByVal dst As Integer, ByVal dstFmt As Integer, ByVal dstData As String, ByVal dstDataLen As Long, ByVal dstPath As String, ByRef dims As MTAPI_DIMS) As Long
Public Declare Function MTXFormEqnBytes Lib "MathPage.WLL" Alias "MTXFormEqn" (ByVal src As Integer, ByVal srcFmt As Integer, srcData As Byte, ByVal srcDataLen As Long, ByVal dst As Integer, ByVal dstFmt As Integer, ByVal dstData As String, ByVal dstDataLen As Long, ByVal dstPath As String, ByRef dims As MTAPI_DIMS) As Long
Public Declare Function MTXFormGetStatus Lib "MathPage.WLL" (ByVal index As Integer) As Long
Public Declare Function MTXFormReset Lib "MathPage.WLL" () As Long
Public Declare Function MTXFormSetPrefs Lib "MathPage.WLL" (ByVal prefType As Integer, ByVal prefStr As String) As Long
Public Declare Function MTXFormSetTranslator Lib "MathPage.WLL" (ByVal options As Integer, ByVal transName As String) As Long

'=====================================================================
'WINDOWS OS declarations
'=====================================================================

'For IDataObject manipulations
Public Declare Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As Long) As Long
Public Declare Function GlobalFree Lib "kernel32" (ByVal hMem As Long) As Long
Public Declare Function GlobalLock Lib "kernel32" (ByVal hMem As Long) As Long
Public Declare Function GlobalSize Lib "kernel32" (ByVal hMem As Long) As Long
Public Declare Function GlobalUnlock Lib "kernel32" (ByVal hMem As Long) As Long
Public Declare Function RegisterClipboardFormat Lib "user32" Alias "RegisterClipboardFormatA" (ByVal lpString As String) As Long
Public Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (lpvDest As Any, lpvSource As Any, ByVal cbCopy As Long)

' Clipboard operations
Public Declare Function CloseClipboard Lib "user32" () As Integer
Public Declare Function EmptyClipboard Lib "user32" () As Long
Public Declare Function GetClipboardData Lib "user32" (ByVal wFormat As Integer) As Long
Public Declare Function lstrcpy Lib "kernel32" (ByVal lpString1 As Any, ByVal lpString2 As Any) As Long
Public Declare Function OpenClipboard Lib "user32" (ByVal hwnd As Integer) As Integer
Public Declare Function SetClipboardData Lib "user32" (ByVal wFormat As Long, ByVal hMem As Long) As Long
Public Declare Function CountClipboardFormats Lib "user32" () As Long

'System API's
Public Declare Function FindWindowByClass Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As Long) As Long
Public Declare Function GetEnvironmentVariable Lib "kernel32" Alias "GetEnvironmentVariableA" (ByVal lpName As String, ByVal lpBuffer As String, ByVal nSize As Long) As Long
Public Declare Function GetFileVersionInfo Lib "Version.dll" Alias "GetFileVersionInfoA" (ByVal lptstrFilename As String, ByVal dwhandle As Long, ByVal dwlen As Long, lpData As Any) As Long
Public Declare Function GetFileVersionInfoSize Lib "Version.dll" Alias "GetFileVersionInfoSizeA" (ByVal lptstrFilename As String, lpdwHandle As Long) As Long
Public Declare Function GetForegroundWindow Lib "user32" () As Long
Public Declare Function GetKeyState Lib "user32" (ByVal vKey As Long) As Integer
Public Declare Function GetLastError Lib "kernel32" () As Long
Public Declare Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Long) As Long
Public Declare Function GetTickCount Lib "kernel32" () As Long
Public Declare Function GetWindowRect Lib "user32" (ByVal hwnd As Long, ByRef hMem As RECT) As Boolean
Public Declare Function SetEnvironmentVariable Lib "kernel32" Alias "SetEnvironmentVariableA" (ByVal lpName As String, ByVal lpValue As String) As Long
Public Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
Public Declare Function SetWindowPos Lib "user32" (ByVal hwnd As Long, ByVal hWndInsertAfter As Long, ByVal topx As Integer, ByVal topy As Integer, ByVal width As Integer, ByVal height As Integer, ByVal flags As Integer) As Boolean
Public Declare Function ShellExecute Lib "SHELL32.DLL" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
Public Declare Function SHGetSpecialFolderPath Lib "SHELL32.DLL" Alias "SHGetSpecialFolderPathA" (ByVal hwnd As Long, ByVal lpszPath As String, ByVal nFolder As Integer, ByVal fCreate As Boolean) As Boolean
Public Declare Function StringFromGUID2 Lib "OLE32.dll" (ByRef rGUID As Any, ByVal lpSz As String, ByVal cchMax As Long) As Long
Public Declare Function VerQueryValue Lib "Version.dll" Alias "VerQueryValueA" (pBlock As Any, ByVal lpSubBlock As String, lplpBuffer As Any, puLen As Long) As Long
Public Declare Sub MoveMemory Lib "kernel32" Alias "RtlMoveMemory" (dest As Any, ByVal Source As Long, ByVal length As Long)

'Help
Public Declare Function HtmlHelp Lib "hhctrl.ocx" Alias "HtmlHelpA" (ByVal hwnd As Long, ByVal lpHelpFile As String, ByVal wCommand As Long, ByVal dwData As Long) As Long
Public Declare Function WinHelp Lib "user32" Alias "WinHelpA" (ByVal hwnd As Long, ByVal lpHelpFile As String, ByVal wCommand As Long, ByVal dwData As Long) As Long

'Registry API's
Public Declare Function RegQueryInfoKey Lib "advapi32.dll" Alias "RegQueryInfoKeyA" (ByVal pRegKey As Long, sClass As String, sClassLen As Long, ByVal Reserved As Long, cSubKeys As Long, cMaxSubKeyLen As Long, cMaxClassLen As Long, cValues As Long, cMaxValueNameLen As Long, cMaxValueLen As Long, cbSecurityDescriptor As Long, ftLastWriteTime As Long) As Long

Public Declare Function RegCreateKeyEx Lib "advapi32.dll" _
    Alias "RegCreateKeyExA" ( _
    ByVal lngKey As Long, _
    ByVal lpSubKey As String, _
    ByVal Reserved As Long, _
    ByVal lpClass As String, _
    ByVal dwOptions As Long, _
    ByVal samDesired As Long, _
    ByVal lpSecurityAttributes As Long, _
    phkResult As Long, _
    ByVal lpdwDisposition As Long) As Long

Public Declare Function RegQueryValueExString Lib "advapi32.dll" _
    Alias "RegQueryValueExA" ( _
    ByVal lngKey As Long, _
    ByVal lpValueName As String, _
    ByVal lpReserved As Long, _
    lpType As Long, _
    ByVal lpData As String, _
    lpcbData As Long) As Long

Public Declare Function RegOpenKeyEx Lib "advapi32.dll" _
    Alias "RegOpenKeyExA" ( _
    ByVal lngKey As Long, _
    ByVal lpSubKey As String, _
    ByVal ulOptions As Long, _
    ByVal samDesired As Long, _
    phkResult As Long) As Long

Public Declare Function RegCloseKey Lib "advapi32.dll" _
    (ByVal lngKey As Long) As Long

Public Declare Function RegSetValueExString Lib "advapi32.dll" _
    Alias "RegSetValueExA" ( _
    ByVal hKey As Long, _
    ByVal lpValueName As String, _
    ByVal Reserved As Long, _
    ByVal dwType As Long, _
    ByVal lpValue As String, _
    ByVal cbData As Long) As Long

'=====================================================================
Attribute VB_Name = "UILib"
'UILib 5.2
'====================================================================
' (c) Copyright 1992-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/UILib.bas 107   5/06/14 9:54a Jimm $
'====================================================================

' Note: * all functions/subs that start with MTCommand_ are "top-level" entry points called from
'         OnAction handlers (e.g. buttons, menu items, etc).
'       * all functions/subs that start with MTCallback_ are are called by
'         Word 2007 as needed to refresh the Ribbon UI
'       * all functions/subs that start with NoDirectCall_
'          MUST NOT BE CALLED except via a RunXXX command

' variable for dispatch class
Private cls

' module name
Private Const module As String = "UILib"
Private Const moduleCLS As String = "UILibCls"

' browse variables
Public browseChoice As Long
Public forward As Boolean

Public gMTEqnNumsOnRight As Boolean

Public Sub MTCommand_MTBrowseNext(Optional choice)
    If IsMissing(choice) Then
        browseChoice = -1
    End If
    forward = True
    RunMTDLLCommand moduleCLS, "NoDirectCall_Browse"
End Sub

Public Sub MTCommand_MTBrowsePrevious(Optional choice)
    If IsMissing(choice) Then
        browseChoice = -1
    End If
    forward = False
    RunMTDLLCommand moduleCLS, "NoDirectCall_Browse"
End Sub

'Runs Set Equation Reference command
Public Sub MTPlaceRef()
    RunMTDLLCommand "", kMTCommands & ".MTPlaceRef.Main", False
End Sub

'Runs Modify Chapter/Section Break command
Public Sub MTEditEquationSection()
    RunMTDLLCommand "", kMTCommands & ".MTFormatEquationSection.EditEquationSection", False
End Sub

'Runs Modify Chapter/Section Break command
Public Sub MTEditEquationSection2()
    RunMTDLLCommand "", kMTCommands & ".MTFormatEquationSection.EditEquationSection", False
End Sub

'Runs Modify Chapter/Section Break command
Public Sub MTEditEquationSection3()
    RunMTDLLCommand "", kMTCommands & ".MTFormatEquationSection.NewVersion", False
End Sub

'Runs Modify Chapter/Section Break command
Public Sub MTEditEquationSection4()
    RunMTDLLCommand "", kMTCommands & ".MTFormatEquationSection.NewVersion", False
End Sub

'Runs Modify Chapter/Section Break command
Public Sub MTEditEquationSection5()
    RunMTDLLCommand "", kMTCommands & ".MTFormatEquationSection.NewVersion", False
End Sub

'Runs Export All MathPage command
Public Sub ExportAllMathPage()
    RunMTDLLCommand "", kMTCommands & ".MathPage.ExportAll", False
End Sub

'Runs Export to MathPage command
Public Sub MTCommand_ExportMathPage()
    RunMTDLLCommand "", kMTCommands & ".MathPage.MP_ExportTo", False, mtbIDMathPage
End Sub

'Runs Set Equation Preferences command
Public Sub MTCommand_SetEqnPrefs()
    RunMTDLLCommand "", kMTCommands & ".MTSetEqnPrefs.Main", False, mtbIDSetEqnPrefs
End Sub

'Runs Insert Inline Equation command
Public Sub MTCommand_InsertInlineEqn()
    RunMTDLLCommand moduleCLS, "NoDirectCall_InsertInlineEqn", True, mtbIDInsInlineMTEqn
End Sub

'Runs Insert Display Equation command
Public Sub MTCommand_InsertDispEqn()
    RunMTDLLCommand moduleCLS, "NoDirectCall_InsertDispEqn", True, mtbIDInsDispMTEqn
End Sub

'Runs Insert Left-Numbered Display Equation command
Public Sub MTCommand_InsertLeftNumberedDispEqn()
    RunMTDLLCommand moduleCLS, "NoDirectCall_InsertLeftNumberedDispEqn", True, mtbIDInsDispMTEqnLeftNum
End Sub

'Runs Insert Right-Numbered Display Equation command
Public Sub MTCommand_InsertRightNumberedDispEqn()
    RunMTDLLCommand moduleCLS, "NoDirectCall_InsertRightNumberedDispEqn", True, mtbIDInsDispMTEqnRightNum
End Sub

'Runs Insert Left-Numbered Display Equation command
Public Sub MTCommand_InsertLeftNumberedDispEqnEB()
    RunMTDLLCommand moduleCLS, "NoDirectCall_InsertLeftNumberedDispEqnEB"
End Sub

'Runs Insert Right-Numbered Display Equation command
Public Sub MTCommand_InsertRightNumberedDispEqnEB()
    RunMTDLLCommand moduleCLS, "NoDirectCall_InsertRightNumberedDispEqnEB"
End Sub

'Runs Insert Equation Number command
Public Sub MTCommand_InsertEqnNum()
    RunMTDLLCommand moduleCLS, "NoDirectCall_InsertEqnNum", True, mtbIDInsertNumber
End Sub

'Runs Insert Equation Reference command
Public Sub MTCommand_InsertEqnRef()
    RunMTDLLCommand moduleCLS, "NoDirectCall_InsertEqnRef", True, mtbIDEquationReference
End Sub

'Runs Insert Equation Section command
Public Sub MTCommand_InsertSecNum()
    RunMTDLLCommand "", kMTCommands & ".MTSecNum.Main", False, mtbIDMoreBreaks
End Sub

'Runs Insert Equation Section command
Public Sub MTCommand_InsertNextSection()
    RunMTDLLCommand "", kMTCommands & ".MTSecNum.InsertNextSectionBreak", False, mtbIDInsertNextSection
End Sub

'Runs Insert Equation Section command
Public Sub MTCommand_InsertNextChapter()
    RunMTDLLCommand "", kMTCommands & ".MTSecNum.InsertNextChapterBreak", False, mtbIDInsertNextChapter
End Sub

'Runs Modify Equation Section command
Public Sub MTCommand_FormatEqnSec()
    RunMTDLLCommand "", kMTCommands & ".MTFormatEquationSection.Main", False, mtbIDModifyBreak
End Sub

'Runs Format Equation Numbers command
Public Sub MTCommand_FormatEqnNum()
    RunMTDLLCommand "", kMTCommands & ".MTEqnNumFormat.Main", False, mtbIDFormatEqnNums
End Sub

'Runs Format Equations command
Public Sub MTCommand_FormatEqns()
    RunMTDLLCommand "", kMTCommands & ".MTFormatEquations.Main", False, mtbIDFormatEqns
End Sub

'Runs Convert Equations command
Public Sub MTCommand_ConvertEqns()
    RunMTDLLCommand "", kMTCommands & ".MTConvertEquations.Main", False, mtbIDConvertEqns
End Sub

'Runs Export Equations command
Public Sub MTCommand_ExportEqns()
    RunMTDLLCommand "", kMTCommands & ".MTExportEquations.Main", False, mtbIDExportEqns
End Sub

'Runs Update Fields command
Public Sub MTCommand_UpdateEqns()
    RunMTDLLCommand moduleCLS, "NoDirectCall_UpdateEqns", True, mtbIDUpdateEqnNums
End Sub

Public Sub MTCommand_TeXToggle()
   RunMTDLLCommand "", kMTCommands & ".MTTeXToggle.Main", False, mtbIDTeXToggle
End Sub

Public Sub MTCommand_EditEquationOpen()
    RunMTDLLCommand "", kMTCommands & ".MTLib.MTEditEquationOpen", False
End Sub

Public Sub MTCommand_EditEquationInPlace()
    RunMTDLLCommand "", kMTCommands & ".MTLib.MTEditEquationInPlace", False
End Sub

Public Sub MTCommand_MathInputControl()
    RunMTDLLCommand "", kMTCommands & ".MTMathInputControl.Main", False
End Sub

Public Sub MTCommand_MTOptions()
    RunMTDLLCommand "", kMTCommands & ".MTOptions.Main", False, mtbIDMTOptions
End Sub

'Runs a synchronous command (requiring the DLL) inside an error handler
Public Sub RunMTDLLCommand(module As String, command As String, Optional isLocal As Boolean = True, Optional btnID As String = "")
    RunMTDLLCode module, command, "command", isLocal, btnID
End Sub

'Runs a asynchronous command (requiring the DLL) inside an error handler
Public Sub RunDocCallback(module As String, command As String, Optional isLocal As Boolean = True, Optional btnID As String = "")
    RunMTDLLCode module, command, "callback", isLocal, btnID
End Sub

'Runs code (requiring the DLL) inside an error handler with a guard
Private Sub RunMTDLLCode(module As String, command As String, calltype As String, Optional isLocal As Boolean = True, Optional btnID As String = "")
    On Error GoTo abort

    ' Instantiate the guard object
    Dim toplevelguard As Object
    If calltype = "callback" Then
        Set toplevelguard = New CallbackGuard
    Else
        Set toplevelguard = New CommandGuard
    End If

    If LoadMathTypeCommands() Then
        RunDispatch module, command, isLocal, btnID
    End If

    Exit Sub

abort:
    WriteLog "RunMTDLLCode error:" & module & ":" & command & ":" & calltype
    ' generic automation error
    If err.Number = 440 Then
        Dim errNum
        Dim errDesc

        If (Not cls Is Nothing) And (Not IsEmpty(cls)) Then
            errNum = cls.ErrorNumber
            errDesc = cls.ErrorDescription
        End If
        ' extract the real error from the class
        Asserts.LogAndAlert module, "RunMTDLLCode", errNum & " " & errDesc
    ElseIf err.Number <> DSI_ABORT_EXCEPTION Then
        Dim desc As String
        desc = err.Description
        ' We use AssertFailure to notify the end user of the unexpected exception
        ' and to log the error.  However, since AssertFailure raises another
        ' DSI_ABORT_EXCEPTION, we need to set things up to resume after the assert and exit
        Asserts.LogAndAlert module, "Error running cmd=" & command & " mod=" & module & " in RunMTDLLCommand", desc
    End If
    ' No action needed for DSI_ABORT_EXCEPTION errors
    ' Exiting the subroutine will clear the error
End Sub

' dispatches a command to its associated class
Public Sub RunDispatch(module As String, command As String, Optional isLocal As Boolean = True, Optional btnID As String = "")
    ' We used to enable/disable the UI controls based on document state.
    ' Now we just bail out and display an error message if we cannot
    ' run our commands due to an invalid document state
    ' note that an empty string for btnID skips checking
    If Len(btnID) <> 0 Then
        UpdateState
        If Not NoDirectCall_IsEnabled(btnID) Then
            Dim msg As String
            msg = GetDisabledString(btnID)
            If Len(msg) = 0 Then
                MsgBox "Unable to execute this command"
            Else
                MsgBox GetUserString("!3014This command cannot be executed because ") & msg
            End If
            Exit Sub
        End If
    End If

    If isLocal Then
        Select Case module
            Case "AutoExecCls"
                Set cls = New AutoExecCls
            Case "UIHelpCls"
                Set cls = New UIHelpCls
            Case "UILibCls"
                Set cls = New UILibCls
            Case "UIWrappersCls"
                Set cls = New UIWrappersCls
            Case "UIRibbonCls"
                Set cls = New UIRibbonCls
        End Select
        If (Not cls Is Nothing) And (Not IsEmpty(cls)) Then
            On Error GoTo CallError
               CallByName cls, command, VbMethod
            GoTo done
CallError:
            WriteLog "RunDispatch error (1):" & command
        End If
    Else
        If module <> "" Then
            Asserts.AssertFailure "UILib", "RunDispatch", "Can't dispatch to unkown module" & module
            WriteLog "RunDispatch error (2):" & command
        Else
            ' on the Mac, Application.Run is a Sub, not a Function
            #If Win32 Then
            command = replace(command, ".", "_", , , vbTextCompare)
            Set cls = Application.Run("new_MTCommandsDispatchClass")
            WriteLog "sanity checking cls"
            If (Not cls Is Nothing) And (Not IsEmpty(cls)) Then
                WriteLog "Calling " & command
                    CallByName cls, command, VbMethod ' this method is unavailable on the Mac
            End If
            #Else
                On Error GoTo AppRunError
                Application.Run command
AppRunError:
            #End If
        End If
    End If
done:
End Sub

'Runs a function (requiring the DLL) inside an error handler,
'but does not execute LoadMathTypeCommands
Public Function RunUICallback(command As String, ParamArray args() As Variant)
    On Error GoTo abort

    ' Instantiate the guard object
    Dim toplevelguard As CallbackGuard
    Set toplevelguard = New CallbackGuard

    Select Case command
        Case "NoDirectCall_GetUnlockScreenTipUI"
            RunUICallback = NoDirectCall_GetUnlockScreenTipUI()
        Case "NoDirectCall_GetUnlockUI"
            RunUICallback = NoDirectCall_GetUnlockUI()
        Case "NoDirectCall_IsEnabled"
            RunUICallback = NoDirectCall_IsEnabled((args(0)))
        Case "NoDirectCall_LocateSupertip"
            RunUICallback = NoDirectCall_LocateSupertip((args(0)))
        Case "NoDirectCall_GetNumEqVisible"
            RunUICallback = NoDirectCall_GetNumEqVisible((args(0)))
        Case "NoDirectCall_GenEnabledByAppFunctionality"
            RunUICallback = NoDirectCall_GenEnabledByAppFunctionality((args(0)))
        Case Else
            WriteLog "RunUICallback error 1:" & command
    End Select

    Exit Function
abort:
    WriteLog "RunUICallback error 2:" & command
    If err.Number <> DSI_ABORT_EXCEPTION Then
        Dim desc As String
        desc = err.Description
        ' We use AssertFailure to notify the end user of the unexpected exception
        ' and to log the error.  However, since AssertFailure raises another
        ' DSI_ABORT_EXCEPTION, we need to set things up to resume after the assert and exit
        On Error Resume Next
        Asserts.LogAndAlert module, "RunUICallback", desc
    End If
    ' No action needed for DSI_ABORT_EXCEPTION errors
    ' Exiting the subroutine will clear the error
End Function

'Loads MathType Commands template if not already loaded
Function LoadMathTypeCommands() As Boolean
    Dim addin As String
    Dim mtDir As String

    LoadMathTypeCommands = False

    mtDir = GetMathTypeDir

    #If Win32 Then
    addin = mtDir & Application.PathSeparator & _
            "Office Support" & Application.PathSeparator & _
            Trim(str(kBits)) & Application.PathSeparator & _
            "WordCmds.dot"
    #Else
    addin = mtDir & Application.PathSeparator & _
            "Office Support" & Application.PathSeparator & _
            "WordCmds.dot"
    #End If

    If IsAddInInstalled(addin) = False Then
        System.Cursor = wdCursorWait
        On Error GoTo err
        AddIns.Add fileName:=addin, Install:=True
        On Error GoTo 0
        System.Cursor = wdCursorNormal
        If IsAddInInstalled(addin) Then
            LoadMathTypeCommands = True
        Else
            ShowReinstallError
        End If
    Else
        LoadMathTypeCommands = True
    End If
    Exit Function

err:
    'trap office XP error when in reviewing pane
    If err.Number = 4605 Then 'command unavailable error
        If HandleCommandUnavailable(addin) Then
            Resume Next
        End If
    End If
    'otherwise show reinstall error
    UILib.ShowReinstallError
End Function

Private Function HandleCommandUnavailable(addin As String) As Boolean
    Dim curPane As Pane
    On Error GoTo err
    If Val(Application.version) >= kWordX Then
        Set curPane = ActiveDocument.ActiveWindow.ActivePane
        ActiveDocument.Bookmarks("\StartOfDoc").Select
        AddIns.Add fileName:=addin, Install:=True
        curPane.Activate
        HandleCommandUnavailable = True
        Exit Function
    End If
err:
    WriteLog "HandleCommandUnavailable error"
    HandleCommandUnavailable = False
End Function

'Returns True if addIn/Template is already installed
Private Function IsAddInInstalled(addin As String) As Boolean

    IsAddInInstalled = False
    On Error GoTo err
    IsAddInInstalled = AddIns(addin).Installed
    If IsAddInInstalled = True Then Exit Function
err:
    On Error GoTo 0

    'one last attempt to brute force install the addin
    'as a fix for http://valor:8080/browse/MT-2085
    Dim currentAddin As addin
    Dim found As Boolean
    found = False

    For Each currentAddin In AddIns
        Dim currentAddinFullPath As String
        ' Sometimes AddIns don't respond well to .path or .name
        On Error GoTo skip
        currentAddinFullPath = currentAddin.path & Application.PathSeparator & currentAddin.name
        If (Strings.LCase(currentAddinFullPath) = Strings.LCase(addin)) And _
           (PathExists(currentAddinFullPath)) Then
            found = True
        End If
skip:
        On Error GoTo 0
    Next currentAddin

    If found = True Then
        AddIns(addin).Installed = True
        IsAddInInstalled = AddIns(addin).Installed
    End If

End Function

Private Function PathExists(path As String) As Boolean

    PathExists = False

    If Len(dir$(path)) > 0 And Len(path) > 0 Then
        PathExists = True
    End If

End Function

'Returns True if MT3 macros were found & removed
Public Function RemoveMT3Macros(aTemplate As Template) As Boolean
    RemoveMT3Macros = False

    'make sure we don't call it for our current templates
    'remove if MTLib exists, but "MTW4" AND "MT5API" do not exist
    If HasComponent(aTemplate, "MTLib") Then
        If Not HasComponent(aTemplate, "MTW4") Then
            If Not HasComponent(aTemplate, "MT5API") Then ' Attibute VB_Name for Mtapi.bas
                If Not HasComponent(aTemplate, "Declarations") Then
                    If LoadMathTypeCommands() Then
                        'Can't pass template, but we got it as activedoc.template
                        'and that's what MTCleanup does
                        WriteLog "Calling MTCleanup"
                        RunDispatch "", kMTCommands & ".MTLib.MTCleanup", False
                        RemoveMT3Macros = True
                    End If
                End If
            End If
        End If
    End If
End Function

'Returns True if component exists in the template
Private Function HasComponent(aTemplate As Template, name As String) As Boolean
    Dim temp As String

    On Error GoTo abort
    HasComponent = False
#If Win32 Then '.VBProject is unavailable on the Mac
    temp = aTemplate.VBProject.VBComponents(name).name
    HasComponent = True
#End If
abort:
End Function

'Takes a localizable string of the form "!nnnnString", where nnnn is a 4-digit string ID.
'If current language is English, or the language DLL can't be found, just strip the prefix
Public Function GetUserString(englishString As String) As String

    Dim buffer(1023) As Byte
    Dim tmpStr As String
    Dim bufLen As Long
   
    bufLen = 512
    MTGetUserWString englishString, buffer(0), bufLen
    tmpStr = buffer
    GetUserString = LeftB(tmpStr, bufLen * 2)

End Function

Public Function GetUserString2(winID As String, macID As String, englishString) As String

    Dim nnnnString As String
    Dim strID As String

    #If Win32 Then
        strID = winID
    #Else
        strID = macID
    #End If

    nnnnString = "!" + strID + englishString

    GetUserString2 = GetUserString(nnnnString)

End Function

'Displays error telling user to reinstall MathType
Public Sub ShowReinstallError()
    Beep
    MsgBox GetUserString("!0202An error occurred starting MathType's Commands for Word. Please re-install MathType."), _
        vbOKOnly, GetUserString("!0200MathType Commands")
End Sub

'Returns True if MathType's Full Functionality is available (i.e. not an expired demo)
Public Function IsFullFunctionality() As Boolean
    IsFullFunctionality = (MTIsFullFunctionality() = 1)
End Function

Public Sub CrashTest()
    RunMTDLLCommand moduleCLS, "NoDirectCall_CrashTest"
End Sub

'Callback routine that determines which split button for inserting numbered eqns is visible
Public Function NoDirectCall_GetNumEqVisible(id As String)
    NoDirectCall_GetNumEqVisible = False
    If id = "MathType_SB_NumEqnL" And gMTEqnNumsOnRight = False Then
        'Make left-default sb visible when the last numbered eqn was on left
        NoDirectCall_GetNumEqVisible = True
    ElseIf id = "MathType_SB_NumEqnR" And gMTEqnNumsOnRight = True Then
        'Make right-default sb visible when the last numbered eqn was on right
        NoDirectCall_GetNumEqVisible = True
    End If
End Function

' inits eqn numbering side from doc props, registry or default
Public Sub InitDefaultEqnNumSide()
    Dim regValue As String

    On Error GoTo missing
    ' default
    gMTEqnNumsOnRight = True

    ' if we find a per document setting, use it
    Dim Doc As Document
    Set Doc = ActiveDocument

    If Doc.CustomDocumentProperties.Item(mtprop_EQN_NUMS_ON_RIGHT).value = True Then
        gMTEqnNumsOnRight = True
    ElseIf Doc.CustomDocumentProperties.Item(mtprop_EQN_NUMS_ON_RIGHT).value = False Then
        gMTEqnNumsOnRight = False
    End If
    Exit Sub

missing:
    regValue = GetPreference(HKEY_CURRENT_USER, mtreg_MT_WORDCMDS_LOCATION, mtreg_MT_EQN_NUMS_ON_RIGHT_KEY)
    Select Case regValue
    Case "1"
        gMTEqnNumsOnRight = True
    Case "0"
        gMTEqnNumsOnRight = False
    Case Else
        gMTEqnNumsOnRight = True
    End Select
End Sub

' saves the default side for equation numbering
Public Sub SaveDefaultEqnNumSide()

    ' save to custom doc props if we can, ignoring errors.
    On Error Resume Next
    Dim Doc As Document
    Set Doc = ActiveDocument

    If Not Doc.ReadOnly Then
        Doc.CustomDocumentProperties(mtprop_EQN_NUMS_ON_RIGHT).Delete
        Doc.CustomDocumentProperties.Add mtprop_EQN_NUMS_ON_RIGHT, _
           False, msoPropertyTypeBoolean, gMTEqnNumsOnRight
    End If

    ' save to registry, but let error propagate to top-level handler if we encounter
    ' one since this should not happen
    On Error GoTo 0

    Dim textValue As String
    If gMTEqnNumsOnRight Then
        textValue = "1"
    Else
        textValue = "0"
    End If
    SetPreference HKEY_CURRENT_USER, mtreg_MT_WORDCMDS_LOCATION, mtreg_MT_EQN_NUMS_ON_RIGHT_KEY, textValue
End Sub

'Returns True if the MT DLL version is OK, else displays error & returns False
Public Function IsDLLVersionOK()
    Dim stat As Boolean
    Dim result As Long
    Dim dllver As Long
    Dim msg As String

    'todo there should not be different return values on Mac vs Win
    #If Win32 Then
        Const ErrorVal As Integer = 0
    #Else
        Const ErrorVal As Integer = -1
    #End If

    stat = False
    result = MTInitAPI(mtinitLAUNCH_AS_NEEDED, 30)
    If result <= ErrorVal Then
        msg = UILib.GetUserString2("1606", "3206", "The MathType commands could not communicate with MathType. There was a problem starting the API. Please be sure that MathType is properly installed.")
    Else
        'get the API Version (loads DLL)
        dllver = MTAPIVersion(MTAPI_VERSION)
        If dllver = mpMTDLL_NOT_FOUND Or dllver = mpBAD_VERSION Then
            ShowDLLNotFoundError
        'check the version against our constants
        ElseIf (dllver > mtversMajVerHi) Or (dllver < mtversMajVerLo) Then
            msg = UILib.GetUserString2("1607", "3207", "The version of this macro doesn't match the version of MathType's DLL. Reinstall MathType to fix this condition.")
        ElseIf (dllver < mtversMinVer) Then
            msg = UILib.GetUserString2("1608", "3208", "A more recent version of MathType's DLL is required to use this macro. Reinstall MathType to fix this condition.")
        Else
            stat = True
        End If
    End If

    If Not stat And Len(msg) > 0 Then
        MsgBox msg, vbCritical, UILib.GetUserString2("1609", "3209", "MathType Commands for Microsoft Word Error")
    End If
    IsDLLVersionOK = stat
End Function

Public Function IsMathInputPanelAvailable() As Boolean

    IsMathInputPanelAvailable = False

#If Win32 Then
    ' there is no math input panel on the Mac
    Dim toplevelguard As Object
    Set toplevelguard = New CallbackGuard

    Dim isAvailable As Boolean
    MTIsMathInputPanelAvailable isAvailable
    If isAvailable Then
        IsMathInputPanelAvailable = True
    End If
#End If

End Function

Public Function GetMathTypeDir() As String

#If Win32 Then
    GetMathTypeDir = GetPreference(HKEY_LOCAL_MACHINE, mtreg_MT_HKLM_DIRECTORIES, mtreg_MT_PROGDIR_KEY)
#Else
    Dim path(1023) As Byte
    Dim pathLen As Long
    Dim stat As Long
    Dim tmpStr As String
    
    pathLen = 512

    stat = MTGetWPathToMathType(path(0), pathLen)
    If stat = mtOK Then
        tmpStr = path
        GetMathTypeDir = LeftB(tmpStr, pathLen * 2)
    Else
        GetMathTypeDir = ""
    End If
#End If
End Function
Attribute VB_Name = "UIWrappers"
'UIWrappers: 5.01
'====================================================================
' (c) Copyright 1992-2010 by Design Science, Inc. All rights reserved
'$Header: /MathType/Windows/WordMacros/UIWrappers.bas 28    7/12/10 1:37p Jimm $
'====================================================================
Option Explicit

' Note: * all functions/subs that start with MTCommand_ are "top-level" entry points called from
'         OnAction handlers (e.g. buttons, menu items, etc).
'       * all functions/subs that start with MTCallback_ are are called by
'         Word 2007 as needed to refresh the Ribbon UI
'       * all functions/subs that start with NoDirectCall_
'          MUST NOT BE CALLED except via a RunXXX command

Private Const module As String = "UIWrappers"
Private Const moduleCLS As String = "UIWrappersCls"

' *** Begin MTW5 Globals ***
Public MTW5_aDoc As Document
' *** End MTW5 Globals ***

' this is called when the user selects File->Print Preview
' This should start with MTCommand_ but it can not since Word expects this name
Public Sub FilePrintPreview()
    ' We have to use RunDocCallback here, since concurrent execution is
    ' required for print preview.  See MT-1119
    RunDocCallback moduleCLS, "NoDirectCall_FilePrintPreview"
End Sub

'Called by Print button that has no UI
' This should start with MTCommand_ but it can not since Word expects this name
Public Sub FilePrintDefault()
    ' We have to use RunDocCallback here, since concurrent execution is
    ' required for print preview.  See MT-1119
    RunDocCallback moduleCLS, "NoDirectCall_FilePrintDefault"
End Sub

'Called by Print command, shows dialog
' This should start with MTCommand_ but it can not since Word expects this name
Public Sub FilePrint()
    RunMTDLLCommand moduleCLS, "NoDirectCall_FilePrint"
End Sub

'Starting with Word 2002, MTEF comment records are stripped out of WMF files
' by Word when they are placed on the clipboard.  Thus, in recent versions of
' Word, overriding the native EditPictureEdit command does no good in terms
' of being ablt to edit MT picture equations as equations. Moreover, in Word 2007
' calling the Activate method on an inline shape no longer invokes the default
' picture editor in Word, so it becomes quite difficult to hook the EditPictureEdit
' command without screwing up the native picture editing capabilities in Word.
' Thus, we remove this override in MT6.0b.  See MT-1131.
'Public Sub EditPictureEdit()
'    RunMTDLLCommand "", kMTCommands & ".MTLib.MTEditPicture", False
'End Sub


'Inserts an equation at the insertion point
'InsertEquation is called when the EE (square root of alpha) button is clicked
' This should start with MTCommand_ but it can not since Word expects this name
Public Sub InsertEquation()
    RunMTDLLCommand moduleCLS, "NoDirectCall_InsertEquation"
End Sub

'Shows/hides all nonprinting characters, and our Equation Breaks (avoids dirtying the doc)
' This should start with MTCommand_ but it can not since Word expects this name
Public Sub ShowAll()
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowAll"
End Sub

'This macro replaces one shipped with MathType1.x.
'Run when user clicks on an old paragraph (display) MathType equation.
' This should start with MTCommand_ but it can not since older MT versions expect this name
Public Sub EditTextEqn()
    RunMTDLLCommand moduleCLS, "NoDirectCall_EditTextEqn"
End Sub

'This macro replaces one shipped with MathType 1.x.
'Run when user clicks on an old inline (text) macrobutton MathType equation.
' This should start with MTCommand_ but it can not since older MT versions expect this name
Public Sub EditDispEqn()
    RunMTDLLCommand moduleCLS, "NoDirectCall_EditDispEqn"
End Sub
Attribute VB_Name = "UIWrappers2007"
'UIWrappers2007: 5.01
'====================================================================
' (c) Copyright 1992-2010 by Design Science, Inc. All rights reserved
'$Header: /MathType/Windows/WordMacros/UIWrappers2007.bas 2     10/11/11 2:12p Jimm $
'====================================================================
Option Explicit

Private Const module As String = "UIWrappers"
Private Const moduleCLS As String = "UIWrappersCls"

Public Sub DSIEditPaste(control As IRibbonControl, cancelDefault)

    RunMTDLLCommand moduleCLS, "NoDirectCall_EditPaste"
    
    Dim strCancelDefault As String
    strCancelDefault = GetPreference(HKEY_CURRENT_USER, mtreg_MT_WORDCMDS_LOCATION, mtreg_MT_PASTECANCELDEF)
    
    If (strCancelDefault = "0") Then
        cancelDefault = False
    Else
        cancelDefault = True
    End If
        
End Sub
Attribute VB_Name = "MTLibCommon"

'=====================================================================
' (c) Copyright 1992-2011 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/MTLibCommon.bas 6     5/06/14 9:54a Jimm $
'=====================================================================

'
' Routines common to Word and PowerPoint
'

Option Explicit

Private gDLLNotFoundErrorShown As Boolean

Public Sub SetDLLPath()
#If Win32 Then
    Dim mtDir As String
    Dim mathPageDir As String
    Dim buf As String
    Dim result As Long
    Dim pathSep As String

    #If Word Then
    pathSep = Application.PathSeparator
    #Else
    pathSep = "\"
    #End If

    mathPageDir = GetMathTypeDir & pathSep & "MathPage" & pathSep & Trim(str(kBits))

    If (FileExists(mathPageDir) = False) Then
        mathPageDir = GetMathTypeDir & pathSep & "MathPage"
    End If

    ' set the buffer to the max length of the path
    buf = Space(32767)

    ' get the path environment variable
    result = GetEnvironmentVariable("Path", buf, 32767)

    If result <> 0 Then

        ' truncate the path to the proper length of the path
        buf = left(buf, result)

        ' if we have already added the mathpage dir to the path then exit
        If InStr(1, buf, mathPageDir, vbTextCompare) Then
            Exit Sub
        End If

        ' append the mathpage dir to the path
        buf = buf & ";" & mathPageDir
        SetEnvironmentVariable "Path", buf

    End If
#End If
End Sub

Public Function FileExists(fileName As String) As Boolean

    FileExists = False
  
    On Error GoTo done
    If Not dir(fileName, vbDirectory) = vbNullString Then
        FileExists = True
    End If
    
done:
    On Error GoTo 0

End Function

Public Sub ShowDLLNotFoundError()
    If gDLLNotFoundErrorShown = False Then
        MsgBox GetUserString("!1697The MathType DLL cannot be found. Please reinstall MathType."), vbCritical, GetUserString("!1609MathType Commands for Microsoft Word Error")
        gDLLNotFoundErrorShown = True
    End If
End Sub
Attribute VB_Name = "Preferences"

'====================================================================
' (c) Copyright 1992-2011 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/Preferences.bas 2     5/06/14 9:54a Jimm $
'====================================================================

' Routines for reading/writing user preferences

Option Explicit

Public Function GetPreference(ByVal hive As Long, ByVal strFolder As String, ByVal strKey As String) As String

#If Win32 Then

    GetPreference = GetRegistryString(hive, strFolder, strKey)

#Else

    Dim stat As Long
    Dim value As String
    Const BUFSIZE As Integer = 1024

    value = Strings.Space(BUFSIZE)

    stat = MTGetPreference(strKey, value, BUFSIZE - 1, "", "")

    value = Strings.Trim(value)

    GetPreference = value

#End If

End Function

Public Sub SetPreference(ByVal hive As Long, ByVal strFolder As String, ByVal strKey As String, ByVal strValue As String)

#If Win32 Then
    SetRegistryString hive, strFolder, strKey, strValue
#Else
    Dim stat As Long
    stat = MTSetPreference(strKey, strValue, "", "")
#End If

End Sub
Attribute VB_Name = "Registry"
'=====================================================================
' (c) Copyright 1992-2011 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/Registry.bas 7     10/11/11 2:12p Jimm $
'=====================================================================
'Registry - a collection of registry functions
'Registry routines that are bitness independent

Option Explicit

'Unicode null-terminated string.
Public Const REG_SZ = 1
Public Const ERROR_SUCCESS = 0&

Public Const STANDARD_RIGHTS_ALL = &H1F0000
Public Const READ_CONTROL = &H20000
Public Const STANDARD_RIGHTS_READ = (READ_CONTROL)
Public Const STANDARD_RIGHTS_WRITE = (READ_CONTROL)
Public Const SYNCHRONIZE = &H100000
Public Const KEY_CREATE_LINK = &H20
Public Const KEY_CREATE_SUB_KEY = &H4
Public Const KEY_ENUMERATE_SUB_KEYS = &H8
Public Const KEY_NOTIFY = &H10
Public Const KEY_QUERY_VALUE = &H1
Public Const REG_OPTION_NON_VOLATILE = &H0
Public Const KEY_SET_VALUE = &H2
Public Const KEY_ALL_ACCESS = ((STANDARD_RIGHTS_ALL Or KEY_QUERY_VALUE Or KEY_SET_VALUE Or KEY_CREATE_SUB_KEY Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY Or KEY_CREATE_LINK) And (Not SYNCHRONIZE))
Attribute VB_Name = "UIRibbon"
'UIRibbon 5.3
'====================================================================
' (c) Copyright 1992-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/UIRibbon.bas 57    6/23/10 6:50p Robertm $
'====================================================================

' This file is shared between Word and PowerPoint. Some functions are only
' intended to be used by Word at this time. Since a user might try to execute
' one of these macros, we will do a application name check to limit their execution.

Option Explicit

Public gMTBrowseType As Integer
Public gMTRibbon As IRibbonUI

Private Const module As String = "UIRibbon"
Private Const moduleCLS As String = "UIRibbonCls"

'called when ribbon loads; save ribbon to invoke its Invalidate method later
Public Sub MTCommand_OnRibbonLoaded(ribbon As IRibbonUI)
    Set gMTRibbon = ribbon
End Sub

'call back for setting the initial state of the browse dropdown
Public Sub MTCommand_OnSelectedIndexBrowseType(control As IRibbonControl, ByRef index)
    RunDocCallback moduleCLS, "NoDirectCall_OnSelectedIndexBrowseType"
End Sub

'Runs Insert Inline Equation command
Public Sub MTCommand_OnInsertInlineEqn(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnInsertInlineEqn", True, mtbIDInsInlineMTEqn
End Sub

'Runs Insert Display Equation command
Public Sub MTCommand_OnInsertDispEqn(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnInsertDispEqn", True, mtbIDInsDispMTEqn
End Sub

'Runs Insert Left-Numbered Display Equation command
Public Sub MTCommand_OnInsertLeftNumberedDispEqn(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnInsertLeftNumberedDispEqn", True, mtbIDInsDispMTEqnLeftNum
End Sub

'Runs Insert Right-Numbered Display Equation command
Public Sub MTCommand_OnInsertRightNumberedDispEqn(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnInsertRightNumberedDispEqn", True, mtbIDInsDispMTEqnRightNum
End Sub

'Runs Insert Handwritten Math command
Public Sub MTCommand_OnInsHandEqn(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnInsHandEqn", True, mtbIDInsHandEqn
End Sub

'Inserts EB Inline Equation
Public Sub MTCommand_OnInsertInlineEqnEB(control As IRibbonControl, cancelDefault)
    'RunMTDLLCommand moduleCLS, "NoDirectCall_OnInsertInlineEqnEB", True, mtbIDMathType_B_InsEBEqn
End Sub

'Inserts EB Left-Numbered Display Equation
Public Sub MTCommand_OnInsertLeftNumberedDispEqnEB(control As IRibbonControl)
    'RunMTDLLCommand moduleCLS, "NoDirectCall_OnInsertLeftNumberedDispEqnEB", True, mtbIDInsEBEqnLeftNum
End Sub

'Inserts EB Right-Numbered Display Equation
Public Sub MTCommand_OnInsertRightNumberedDispEqnEB(control As IRibbonControl)
    'RunMTDLLCommand moduleCLS, "NoDirectCall_OnInsertRightNumberedDispEqnEB", True, mtbIDInsEBEqnRightNum
End Sub

'Runs Format Equations command
Public Sub MTCommand_OnFormatEquations(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnFormatEquations", True, mtbIDFormatEqns
End Sub

'Runs Convert Equations command
Public Sub MTCommand_OnConvertEquations(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnConvertEquations", True, mtbIDConvertEqns
End Sub

'Runs TeX Toggle command
Public Sub MTCommand_OnTeXToggle(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnTeXToggle", True, mtbIDTeXToggle
End Sub

'Runs Export Equations command
Public Sub MTCommand_OnExportEquations(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnExportEquations", True, mtbIDExportEqns
End Sub


'Runs MathPage command
Public Sub MTCommand_OnMathPage(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnMathPage", True, mtbIDMathPage
End Sub

'Runs Set Equation Prefs command
Public Sub MTCommand_OnSetEquationPrefs(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnSetEquationPrefs", True, mtbIDSetEqnPrefs
End Sub

'Runs Insert Equation Number command
Public Sub MTCommand_OnInsertEquationNumber(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnInsertEquationNumber", True, mtbIDInsertNumber
End Sub

'Runs Format Equation Numbers command
Public Sub MTCommand_OnFormatEquationNumbers(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnFormatEquationNumbers", True, mtbIDFormatEqnNums
End Sub

'Runs Update Equation Numbers command
Public Sub MTCommand_OnUpdateEquationNumbers(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnUpdateEquationNumbers", True, mtbIDUpdateEqnNums
End Sub

'Runs Insert Equation Reference command
Public Sub MTCommand_OnEquationReference(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnEquationReference", True, mtbIDEquationReference
End Sub

'Runs Insert Chapter/Section Break command
Public Sub MTCommand_OnInsertChapterSectionBreak(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnInsertChapterSectionBreak", True, mtbIDMoreBreaks
End Sub

'Runs Insert Chapter/Section Break command
Public Sub MTCommand_OnInsertNextSection(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnInsertNextSection", True, mtbIDInsertNextSection
End Sub


'Runs Insert Chapter/Section Break command
Public Sub MTCommand_OnInsertNextChapter(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnInsertNextChapter", True, mtbIDInsertNextChapter
End Sub

'Runs Modify Chapter/Section Break command
Public Sub MTCommand_OnModifyChapterSectionBreak(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnModifyChapterSectionBreak", True, mtbIDModifyBreak
End Sub

'Runs MathType Help
Public Sub MTCommand_OnHelpContents(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnHelpContents", True, mtbIDHelp
End Sub

Public Sub MTCommand_OnHelpMTInWord(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnHelpMTInWord", True, mtbIDHelpMTInWord
End Sub

Public Sub MTCommand_OnUnlockReg(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnUnlockReg", True, mtbIDHelpUnlockReg
End Sub

Public Sub MTCommand_OnAboutMT(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnAboutMT", True, mtbIDHelpAboutMT
End Sub

Public Sub MTCommand_OnWebHomePage(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnWebHomePage", True, mtbIDWeb
End Sub

Public Sub MTCommand_OnWebSupport(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnWebSupport", True, mtbIDWebSupport

End Sub

Public Sub MTCommand_OnWebEmailFeedback(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnWebEmailFeedback", True, mtbIDWebEmailFeedback
End Sub

Public Sub MTCommand_OnWebOrderMathType(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnWebOrderMathType", True, mtbIDWebOrderMT
End Sub

Public Sub MTCommand_OnFutureMT(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnFutureMT", True, mtbIDFutureMT
End Sub

Public Sub MTCommand_OnMTOptions(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnMTOptions", True, mtbIDMTOptions
End Sub

'Set Browse Type
Public Sub MTCommand_OnBrowseType(control As IRibbonControl, selectedId As String, selectedIndex As Integer)

    'RunMTDLLCommand moduleCLS, "NoDirectCall_OnBrowseType"
    ' We can't use RunMTDLLCommand since we need a way to pass arguments.
    ' For now, I just instantiate a guard directly and did not
    ' provide an error handler in light of the simplicity of the code
    ' to be executed.

    Dim toplevelguard As CommandGuard
    Set toplevelguard = New CommandGuard

    If Application.name = kAppMSW Then
        ' first index comes through as 0, so add one
        gMTBrowseType = selectedIndex + 1
    End If

End Sub

'Browse to Previous
Public Sub MTCommand_OnBrowsePrevious(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnBrowsePrevious", True, mtbIDBrowsePrev
End Sub

'Browse to Next
Public Sub MTCommand_OnBrowseNext(control As IRibbonControl)
    RunMTDLLCommand moduleCLS, "NoDirectCall_OnBrowseNext", True, mtbIDBrowseNext
End Sub

Public Sub MTCallback_GetEnabled(control As IRibbonControl, ByRef enabled)
    enabled = RunUICallback("NoDirectCall_GenEnabledByAppFunctionality", control.id)
End Sub

Public Sub MTCallback_GetSupertip(control As IRibbonControl, ByRef screentip)
    screentip = RunUICallback("NoDirectCall_LocateSupertip", control.id)
End Sub

Public Sub MTCallback_GetLabel(control As IRibbonControl, ByRef label)
    label = RunUICallback("NoDirectCall_GetUnlockUI")
End Sub

Public Sub MTCallback_GetScreenTip(control As IRibbonControl, ByRef screentip)
    screentip = RunUICallback("NoDirectCall_GetUnlockScreenTipUI")
End Sub

Public Sub MTCallback_GetNumEqVisible(control As IRibbonControl, ByRef visible)
    visible = RunUICallback("NoDirectCall_GetNumEqVisible", control.id)
End Sub

Public Sub MTCallback_IsWin7(control As IRibbonControl, ByRef visible)
    visible = IsMathInputPanelAvailable
End Sub

Public Sub MTCallback_IsBeforeWin7(control As IRibbonControl, ByRef visible)
    visible = Not IsMathInputPanelAvailable
End Sub
Attribute VB_Name = "UIHelp"
'====================================================================
' (c) Copyright 1992-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/UIHelp.bas 25    9/17/12 1:21p Jimm $
'====================================================================
' This module is dedicated to help related functionality
' It is shared between word and powerpoint

' Note: * all functions/subs that start with MTCommand_ are "top-level" entry points called from
'         OnAction handlers (e.g. buttons, menu items, etc).
'       * all functions/subs that start with MTCallback_ are are called by
'         Word 2007 as needed to refresh the Ribbon UI
'       * all functions/subs that start with NoDirectCall_
'          MUST NOT BE CALLED except via a RunXXX command

'URL codes - also see MTDeclarations.bas mturl's
Public Const mturlMATHTYPE_HOME As Long = 1
Public Const mturlMATHTYPE_SUPPORT As Long = 2
Public Const mturlMATHTYPE_FEEDBACK As Long = 3
Public Const mturlMATHTYPE_ORDER As Long = 4
Public Const mturlMATHTYPE_FUTURE As Long = 5
Public Const mturlMATHTYPE_REGISTER As Long = 6

'Constants for use in Help calls from dialogs
Public Const hlpMSWDMathType_Support_For_Word = 101

#If Win32 Then
Public Const hlpMSWDMathType_Support_For_Word_2007 = 102
#Else
Public Const hlpMSWDMathType_Support_For_Word_2007 = 3200
#End If

Public Const hlpMSWDMathType_Support_For_PP = 1

#If Win32 Then
Public Const hlpMSWDMathType_Support_For_PP_2007 = 3
#Else
Public Const hlpMSWDMathType_Support_For_PP_2007 = 3202
#End If

#If Win32 Then
Public Const hlpMSWDUnlock_MathType = 165
#Else
Public Const hlpMSWDUnlock_MathType = 195
#End If

Private Const module As String = "UIHelp"
Private Const moduleCLS As String = "UIHelpCls"

'Runs MathType Help
Public Sub MTCommand_ShowHelpContents()
#If Win32 Then
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowHelpContents", True, mtbIDHelpContents
#Else
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowHelpContents", True
#End If
End Sub

Public Sub MTCommand_ShowHelpMTInWord()
#If Win32 Then
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowHelpMTInWord", True, mtbIDHelpMTInWord
#Else
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowHelpMTInWord", True
#End If
End Sub

Public Sub MTCommand_ShowUnlockReg()
#If Win32 Then
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowUnlockReg", True, mtbIDHelpUnlockReg
#Else
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowUnlockReg", True
#End If
End Sub

' *** web help code ***

Public Sub MTCommand_ShowWebHomePage()
#If Win32 Then
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowWebHomePage", True, mtbIDWebHomePage
#Else
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowWebHomePage", True
#End If
End Sub

Public Sub MTCommand_ShowWebSupport()
#If Win32 Then
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowWebSupport", True, mtbIDWebSupport
#Else
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowWebSupport", True
#End If
End Sub

Public Sub MTCommand_ShowWebEmailFeedback()
#If Win32 Then
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowWebEmailFeedback", True, mtbIDWebEmailFeedback
#Else
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowWebEmailFeedback", True
#End If
End Sub

Public Sub MTCommand_ShowWebOrderMathType()
#If Win32 Then
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowWebOrderMathType", True, mtbIDWebOrderMT
#Else
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowWebOrderMathType", True
#End If
End Sub

Public Sub MTCommand_ShowFutureMT()
#If Win32 Then
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowFutureMT", True, mtbIDFutureMT
#Else
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowFutureMT", True
#End If
End Sub

' *** misc help code ***

Public Sub MTCommand_ShowAboutMT()
#If Win32 Then
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowAboutMT", True, mtbIDHelpAboutMT
#Else
    RunMTDLLCommand moduleCLS, "NoDirectCall_ShowAboutMT", True
#End If
End Sub

' called from UIEnableDisable and UIRibbon
Public Function NoDirectCall_GetUnlockUI() As String
    ' note: we changed the UI to combine unlock and registration
    ' we are keeping the old code (following this line) around just in case we want to switch back
    NoDirectCall_GetUnlockUI = GetUserString2("3103", "3104", "U&nlock/Register MathType...")

    'Dim result As Long
    'result = MTGetAppFunctionality
    'If result = DemoMode.dmFull Then
    '    NoDirectCall_GetUnlockUI = GetUserString("!1896O&nline Registration...")
    'Else
    '    NoDirectCall_GetUnlockUI = GetUserString("!1838U&nlock MathType...")
    'End If

    ' Office 12 and greater does not need a keyboard mnemonic
    If Val(Application.version) >= kWord2007 Then
        #If Mac And PP Then
        NoDirectCall_GetUnlockUI = ReplaceSubstring(NoDirectCall_GetUnlockUI, "&", "")
        #Else
        NoDirectCall_GetUnlockUI = replace(NoDirectCall_GetUnlockUI, "&", "")
        #End If
    End If
End Function

Public Function NoDirectCall_GetUnlockScreenTipUI() As String
    ' note: we changed the UI to combine unlock and registration
    ' we are keeping the old code (following this line) around just in case we want to switch back
    NoDirectCall_GetUnlockScreenTipUI = GetUserString("!3102Unlock/Register MathType")

    'Dim result As Long
    'result = MTGetAppFunctionality
    'If result = DemoMode.dmFull Then
    '    NoDirectCall_GetUnlockScreenTipUI = GetUserString("!3101Register MathType")
    'Else
    '    NoDirectCall_GetUnlockScreenTipUI = GetUserString("!3100Unlock MathType")
    'End If
End Function


Attribute VB_Name = "UIEnableDisable"
'====================================================================
' (c) Copyright 1992-2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/UIEnableDisableWord.bas 55    7/27/14 2:33p Johns $
'====================================================================
' This module is used to enable and disable the user interface elements
' for Word depending on the state of the selection.

' The following functions and subroutines must exist in the PowerPoint
' and Word versions of this module.
'
' NoDirectCall_IsEnabled
' UpdateState
' NoDirectCall_LocateSupertip
' Invalidate
' UpdatePre2007CommandBar

' a collection of long values which are used with a bit mask to
' store the enabled state for a particular button/menu item. It uses
' a string key of button id's (one of the mtbIDXXX constants)
Public buttonStates As Collection
' a collection of possible states (i.e. the States enumeration values)
Private DocumentStates As Collection
' a collection of boolean values whose key is a string version of each States enumeration
' This is used to store the values from the current UI update cycle
Public currentStatesCollection As Collection
' a collection of boolean values whose key is a string version of each States enumeration
' this is used to store the value from the previous UI update cycle
Private previousStatesCollection As Collection
' a collection of strings whose key is is a string version of each States enumeration
' each string represents what should be shown in the disabled state
Private superTipDisabledCollection As Collection
' a collection of strings whose key is a button ID
' each string represents what should be shown in the enabled state
Private superTipEnabledCollection As Collection


' tests to see if the application is in a state where it's ok to
' execute a particular command. If the button should be enabled,
' it returns true, otherwise false.
'
' buttonID must be one of the mtbIDXXX constants defined in UIDeclarations
Public Function NoDirectCall_IsEnabled(buttonID As String) As Boolean
    NoDirectCall_IsEnabled = True ' must be initialized to true

    On Error GoTo err

    ' make sure we are ready to run
    If InitializeStatesCollection = False Then
        ' if initialization fails, then we need to bail
        GoTo err
    End If

    ' iterate through each document state
    Dim aState
    For Each aState In DocumentStates
        ' use the aState bitmask against the value stored in buttonStates
        ' to determine if the state really applies
        If buttonStates(buttonID) And aState Then
            ' during each loop check the current state value and apply it to
            ' the result. Once the loop completes the NoDirectCall_IsEnabled value
            ' should reflect if the button/menu item should be enabled
            NoDirectCall_IsEnabled = NoDirectCall_IsEnabled And currentStatesCollection(CStr(aState))
        End If
    Next
    Exit Function
err:
    ' failure results in a disabled button
    NoDirectCall_IsEnabled = False
End Function

' this function is called to update the currentStatesCollection with the
' current state. It does this by setting a boolean value for a given state.
'
' For example, the States.IsDocumentOpen enumeration value is used as a key,
' and the value associated with this key is the result of Not (Documents.Count = 0)
'
' the function returns false if the current state is the same as the previous state
' and true if the state has really changed
Public Function UpdateState() As Boolean

    WriteLog "UpdateState start"

    UpdateState = False

    On Error GoTo err

    ' make sure all fof the necessary collections are built
    If InitializeStatesCollection = False Then
        ' if initialization fails, we need to bail out
        GoTo err
    End If

    ' Most of the commands used here require an active document
    Dim hasDocuments As Boolean
    ' we reuse this value over and over as the result of checking some state
    Dim temp As Boolean

    hasDocuments = Not (Documents.Count = 0)

    ' always enable state must always be set to true
    temp = True
    UpdateCollection currentStatesCollection, States.AlwaysEnable, temp

    'temp =
    'UpdateCollection currentStatesCollection, States.CheckSectionNumber, temp

    ' is document open state has the same value as the hasDocuments so just reuse it
    temp = hasDocuments
    UpdateCollection currentStatesCollection, States.IsDocumentOpen, temp

    If hasDocuments Then
        temp = ActiveDocument.saved And Len(ActiveDocument.path) > 0 And Not (ActiveDocument.ReadOnly)
    Else
        temp = False
    End If
    UpdateCollection currentStatesCollection, States.MathPageOK, temp

    ' make sure a document is open first before attempting to use a command
    ' many of the following states do the same thing
    If hasDocuments Then
        temp = ActiveDocument.Bookmarks.Exists("MTReference")
    Else
        temp = False
    End If
    UpdateCollection currentStatesCollection, States.MTReferenceExists, temp

    If hasDocuments Then
        temp = Not (Application.ActiveWindow.Selection.StoryType = wdTextFrameStory)
    Else
        temp = False
    End If
    UpdateCollection currentStatesCollection, States.SelectionInTextBox, temp

    If hasDocuments Then
        temp = IsNotInReadingView()
    End If
    UpdateCollection currentStatesCollection, States.NotInReadingView, temp

    ' Warning: there appears to be a bug in pre-2007 versions of Word whereby
    ' accessing the read-only Selection.Information(wdXXX) method causes a
    ' DocumentChange event to fire.   Consequently, it is important that the
    ' App_DocumentChange event handler be fast, and that it does not indirectly
    ' invoke another call to UpdateState, or an infinite loop ensues.  See MT-1159
    If hasDocuments Then
        temp = Not (Application.ActiveWindow.Selection.Information(wdInCommentPane))
    Else
        temp = False
    End If
    UpdateCollection currentStatesCollection, States.Word97SelectionInCommentPane, temp

    If hasDocuments Then
        temp = Not (Application.ActiveWindow.Selection.Information(wdInFootnoteEndnotePane))
    Else
        temp = False
    End If
    UpdateCollection currentStatesCollection, States.Word97SelectionInFootnoteEndnotePane, temp

    If hasDocuments Then
        temp = Not (Application.ActiveWindow.Selection.Information(wdInHeaderFooter))
    Else
        temp = False
    End If
    UpdateCollection currentStatesCollection, States.Word97SelectionInHeaderFooter, temp

    If hasDocuments Then
        If Val(Application.version) = kWordX Then
            temp = IsWordXPActiveWindowViewSplitSpecial()
        Else
            temp = False
        End If
    Else
        temp = False
    End If
    UpdateCollection currentStatesCollection, States.WordXPActiveWindowViewSplitSpecial, temp


    temp = IsFullFunctionality
    UpdateCollection currentStatesCollection, States.IsFunctionalityOK, temp

    temp = IsNotUnsupportedView
    UpdateCollection currentStatesCollection, States.NotInUnsupportedView, temp

    ' now check the previous state with the current state to see if we should allow
    ' an update of the UI
    Dim aState
    For Each aState In DocumentStates
        If previousStatesCollection(CStr(aState)) <> currentStatesCollection(CStr(aState)) Then
            UpdateState = True
            Exit For
        End If
    Next

    ' update the previous state with the current state
    Dim aStateLong As Long
    For Each aState In DocumentStates
        aStateLong = aState
        UpdateCollection previousStatesCollection, aStateLong, currentStatesCollection(CStr(aStateLong))
    Next

    WriteLog "UpdateState end"

    Exit Function
err:
    ' if error occurs, then we can't be sure if the previous and new states are different
    ' so just return false so no further action is taken
    WriteLog "UpdateState error"
    UpdateState = False
End Function

' This function determines the super tip for a button
' It is nearly the same as NoDirectCall_IsEnabled, but it creates a string
' that partially describes the reason for the disabled state,
' or an empty string if the button is enabled
Public Function NoDirectCall_LocateSupertip(id As String) As String
    Dim disabledString As String

    On Error GoTo err

    disabledString = GetDisabledString(id)

    NoDirectCall_LocateSupertip = superTipEnabledCollection(id)

    ' For MTW6, we only set the supertip based on app functionality, since we aren't actually
    ' disabling buttons based on document state
    Dim isEnabled
    isEnabled = NoDirectCall_GenEnabledByAppFunctionality(id)
    If Not isEnabled Then
        If Len(NoDirectCall_LocateSupertip) <> 0 Then
            NoDirectCall_LocateSupertip = NoDirectCall_LocateSupertip & vbNewLine & vbNewLine
        End If
        NoDirectCall_LocateSupertip = NoDirectCall_LocateSupertip & GetUserString("!3000This button is disabled because: ") & disabledString & "."
    End If
    Exit Function
err:
    NoDirectCall_LocateSupertip = ""
End Function

Public Function GetDisabledString(id As String)
    Dim aCurrentState As Boolean

    On Error GoTo err

    ' make sure we are ready to run
    If InitializeStatesCollection = False Then
        ' if initialization fails, then we need to bail
        GoTo err
    End If

    ' We handle IsFunctionalityOK and IsDocumentOpen as special cases
    ' since when they hold, they should be the only reason given for being disabled
    If buttonStates(id) And States.IsFunctionalityOK Then
        If currentStatesCollection(CStr(States.IsFunctionalityOK)) = False Then
            GetDisabledString = superTipDisabledCollection(CStr(States.IsFunctionalityOK))
            Exit Function
        End If
    End If
    ' We also handle protected view as a special case. Note we check IsNotUnsupportedView()
    ' directly, since currentStatesCollection is not dependably updated in protected view
    ' We would need to add event listeners for protected view activation/open events and
    ' rewrite much of UpdateStates for protected view windows.
    If buttonStates(id) And States.NotInUnsupportedView Then
        If IsNotUnsupportedView() = False Then
            GetDisabledString = superTipDisabledCollection(CStr(States.NotInUnsupportedView))
            Exit Function
        End If
    End If
    If buttonStates(id) And States.IsDocumentOpen Then
        If currentStatesCollection(CStr(States.IsDocumentOpen)) = False Then
            GetDisabledString = superTipDisabledCollection(CStr(States.IsDocumentOpen))
            Exit Function
        End If
    End If

    ' iterate through each document state
    Dim aState
    For Each aState In DocumentStates
        ' use the aState bitmask against the value stored in buttonStates
        ' to determine if the state really applies
        If buttonStates(id) And aState Then
            ' during each loop check the current state value and apply it to
            ' the result. Once the loop completes the IsEnabled value
            ' should reflect if the button/menu item should be enabled
            aCurrentState = currentStatesCollection(CStr(aState))
            If aCurrentState = False Then
                    ' add to the disabled string
                If GetDisabledString <> "" Then
                    GetDisabledString = GetDisabledString & ", " & superTipDisabledCollection(CStr(aState))
                    Else
                    GetDisabledString = superTipDisabledCollection(CStr(aState))
                    End If
                End If
            End If
    Next
    Exit Function
err:
    GetDisabledString = ""
End Function


Private Function IsNotInReadingView() As Boolean
    IsNotInReadingView = Not (ActiveWindow.View.Type = wdReadingView)
End Function

Private Function IsWordXPActiveWindowViewSplitSpecial() As Boolean
    IsWordXPActiveWindowViewSplitSpecial = Not (ActiveDocument.ActiveWindow.View.SplitSpecial = wdPaneRevisions And _
                    ActiveDocument.ActiveWindow.ActivePane.index > 1)
End Function

' called by the MTW5 class to inform the ribbon to update itself
' by initiating call backs to determine enable/disable state of buttons
Public Sub Invalidate()
    If Not IsEmpty(gMTRibbon) Then
        If Not (gMTRibbon Is Nothing) Then
            gMTRibbon.Invalidate
        End If
    End If
End Sub

' called by the MTW5 class to initiate an update of the CommandBars
' (i.e. menu items and buttons) to determine their enable/disable state
Public Sub UpdatePre2007CommandBar()

    WriteLog "UpdatePre2007CommandBar start"

    Dim MTToolbar As CommandBar
    Dim cb As CommandBar
    Dim cbc As CommandBarControl
    Dim foundMenuBar As Boolean
    Dim foundMathType As Boolean
    foundMenuBar = False
    foundMathType = False

    On Error GoTo errHandler
    Dim i As Long
    For i = 1 To CommandBars.Count
        Set cb = CommandBars(i)
        If Not (cb Is Nothing) And (cb.name = "Menu Bar" Or cb.name = "MathType") Then

            WriteLog "cb.Name: " & cb.name
            If cb.name = "Menu Bar" Then foundMenuBar = True
            If cb.name = "MathType" Then foundMathType = True

            UpdatePre2007UIItem cb, mtbIDBrowseNext
            UpdatePre2007UIItem cb, mtbIDBrowsePrev
            UpdatePre2007UIItem cb, mtbIDBrowseType
            UpdatePre2007UIItem cb, mtbIDConvertEqns
            UpdatePre2007UIItem cb, mtbIDTeXToggle
            UpdatePre2007UIItem cb, mtbIDEquationReference
            UpdatePre2007UIItem cb, mtbIDExportEqns
            UpdatePre2007UIItem cb, mtbIDFormatEqnNums
            UpdatePre2007UIItem cb, mtbIDFormatEqns
            UpdatePre2007UIItem cb, mtbIDFutureMT
            UpdatePre2007UIItem cb, mtbIDHelp
            UpdatePre2007UIItem cb, mtbIDHelpAboutMT
            UpdatePre2007UIItem cb, mtbIDHelpContents
            UpdatePre2007UIItem cb, mtbIDHelpMTInWord
            UpdatePre2007UIItem cb, mtbIDInsHandEqn

            Set cbc = UpdatePre2007UIItem(cb, mtbIDHelpUnlockReg)
            If Not (cbc Is Nothing) Then
                cbc.Caption = RunUICallback("NoDirectCall_GetUnlockUI")
            End If
            UpdatePre2007UIItem cb, mtbIDInsDispMTEqn
            UpdatePre2007UIItem cb, mtbIDInsDispMTEqnLeftNum
            UpdatePre2007UIItem cb, mtbIDInsDispMTEqnRightNum
            UpdatePre2007UIItem cb, mtbIDInsertNextChapter
            UpdatePre2007UIItem cb, mtbIDInsertNextSection
            UpdatePre2007UIItem cb, mtbIDInsertNumber
            UpdatePre2007UIItem cb, mtbIDInsInlineMTEqn
            UpdatePre2007UIItem cb, mtbIDMathPage
            UpdatePre2007UIItem cb, mtbIDModifyBreak
            UpdatePre2007UIItem cb, mtbIDMoreBreaks
            UpdatePre2007UIItem cb, mtbIDOMMathPage
            UpdatePre2007UIItem cb, mtbIDSetEqnPrefs
            UpdatePre2007UIItem cb, mtbIDUpdateEqnNums
            UpdatePre2007UIItem cb, mtbIDWeb
            UpdatePre2007UIItem cb, mtbIDWebEmailFeedback
            UpdatePre2007UIItem cb, mtbIDWebHomePage
            UpdatePre2007UIItem cb, mtbIDWebOrderMT
            UpdatePre2007UIItem cb, mtbIDWebSupport
            UpdatePre2007UIItem cb, mtbIDInsHandEqn
            UpdatePre2007UIItem cb, mtbIDMTOptions
            UpdatePre2007UIItem cb, mtbIDSpeak
        End If
    Next

    WriteLog "  foundMenuBar: " & foundMenuBar
    WriteLog "  foundMathType: " & foundMathType

finalize:
    On Error GoTo abort:
    Dim aTemplate As Template
    For Each aTemplate In Templates
        If aTemplate.name = MacroContainer.name Then
            aTemplate.saved = True
            Exit For
        End If
    Next

    WriteLog "UpdatePre2007CommandBar end"
    Exit Sub

errHandler:
    WriteLog "UpdatePre2007CommandBar error"
    Resume finalize

abort:
    WriteLog "UpdatePre2007CommandBar error"
End Sub

Private Function UpdatePre2007UIItem(cmdBar As CommandBar, id As String) As CommandBarControl

    'WriteLog "  UpdatePre2007UIItem start"
    On Error GoTo errHandler

    Dim cbc As CommandBarControl
    Set cbc = cmdBar.FindControl(id:=1, tag:=id, Recursive:=True)
    Set UpdatePre2007UIItem = cbc
    If Not (cbc Is Nothing) Then
        cbc.enabled = RunUICallback("NoDirectCall_GenEnabledByAppFunctionality", id)
        If (id = mtbIDInsHandEqn) Then
            WriteLog "GenEnabledByAppFunctionality set cbc.enbled to " & cbc.enabled
            ' Disable no matter what if the MIP isn't there
            Dim impa As Boolean
            impa = IsMathInputPanelAvailable
            WriteLog "Call to IsMathInputPanelAvailable returned " & impa
            If Not impa Then cbc.enabled = False
            WriteLog "Final value of cbc.enabled is " & cbc.enabled
            Exit Function
        End If
    End If

    'WriteLog "  UpdatePre2007UIItem end"

    Exit Function

errHandler:
    WriteLog "  UpdatePre2007UIItem error"

End Function

' this subroutine makes sure that the various state collections are populated with data
' returns true if no errors happened, false otherwise
Public Function InitializeStatesCollection() As Boolean
    InitializeStatesCollection = True ' default to success
    On Error GoTo err
    ' setup a collection with nothing more than the values found in the states enumeration
    If DocumentStates Is Nothing Then
        Set DocumentStates = New Collection
        DocumentStates.Add States.AlwaysEnable
        DocumentStates.Add States.IsDocumentOpen
        DocumentStates.Add States.MathPageOK
        DocumentStates.Add States.MTReferenceExists
        DocumentStates.Add States.SelectionInTextBox
        DocumentStates.Add States.NotInReadingView
        DocumentStates.Add States.Word97SelectionInCommentPane
        DocumentStates.Add States.Word97SelectionInFootnoteEndnotePane
        DocumentStates.Add States.Word97SelectionInHeaderFooter
        DocumentStates.Add States.WordXPActiveWindowViewSplitSpecial
        DocumentStates.Add States.IsFunctionalityOK
        DocumentStates.Add States.NotInUnsupportedView
    End If

    ' setup the current and previous states to dummy values if needed
    If currentStatesCollection Is Nothing Then
        Set currentStatesCollection = New Collection
        currentStatesCollection.Add False, CStr(States.AlwaysEnable)
        currentStatesCollection.Add False, CStr(States.IsDocumentOpen)
        currentStatesCollection.Add False, CStr(States.MathPageOK)
        currentStatesCollection.Add False, CStr(States.MTReferenceExists)
        currentStatesCollection.Add False, CStr(States.SelectionInTextBox)
        currentStatesCollection.Add False, CStr(States.NotInReadingView)
        currentStatesCollection.Add False, CStr(States.Word97SelectionInCommentPane)
        currentStatesCollection.Add False, CStr(States.Word97SelectionInFootnoteEndnotePane)
        currentStatesCollection.Add False, CStr(States.Word97SelectionInHeaderFooter)
        currentStatesCollection.Add False, CStr(States.WordXPActiveWindowViewSplitSpecial)
        currentStatesCollection.Add False, CStr(States.IsFunctionalityOK)
        currentStatesCollection.Add False, CStr(States.NotInUnsupportedView)
    End If
    If previousStatesCollection Is Nothing Then
        Set previousStatesCollection = New Collection
        previousStatesCollection.Add False, CStr(States.AlwaysEnable)
        previousStatesCollection.Add False, CStr(States.IsDocumentOpen)
        previousStatesCollection.Add False, CStr(States.MathPageOK)
        previousStatesCollection.Add False, CStr(States.MTReferenceExists)
        previousStatesCollection.Add False, CStr(States.SelectionInTextBox)
        previousStatesCollection.Add False, CStr(States.NotInReadingView)
        previousStatesCollection.Add False, CStr(States.Word97SelectionInCommentPane)
        previousStatesCollection.Add False, CStr(States.Word97SelectionInFootnoteEndnotePane)
        previousStatesCollection.Add False, CStr(States.Word97SelectionInHeaderFooter)
        previousStatesCollection.Add False, CStr(States.WordXPActiveWindowViewSplitSpecial)
        previousStatesCollection.Add False, CStr(States.IsFunctionalityOK)
        previousStatesCollection.Add False, CStr(States.NotInUnsupportedView)
    End If

    If superTipDisabledCollection Is Nothing Then
        Set superTipDisabledCollection = New Collection

        superTipDisabledCollection.Add "", CStr(States.AlwaysEnable) ' special case
        superTipDisabledCollection.Add GetUserString("!3001a document is not open"), CStr(States.IsDocumentOpen)
        superTipDisabledCollection.Add GetUserString("!3010the document has not been saved"), CStr(States.MathPageOK)
        superTipDisabledCollection.Add GetUserString("!3002a reference has not been added"), CStr(States.MTReferenceExists)
        superTipDisabledCollection.Add GetUserString("!3003the current selection is inside a textbox"), CStr(States.SelectionInTextBox)
        superTipDisabledCollection.Add GetUserString("!3004the application is in Reading View"), CStr(States.NotInReadingView)
        superTipDisabledCollection.Add GetUserString("!3005the current selection is inside a comment pane"), CStr(States.Word97SelectionInCommentPane)
        superTipDisabledCollection.Add GetUserString("!3006the current selection is inside a footnote or endnote pane"), CStr(States.Word97SelectionInFootnoteEndnotePane)
        superTipDisabledCollection.Add GetUserString("!3007the current selection is inside a header or footer"), CStr(States.Word97SelectionInHeaderFooter)
        superTipDisabledCollection.Add GetUserString("!3008the document has a split window"), CStr(States.WordXPActiveWindowViewSplitSpecial)
        superTipDisabledCollection.Add GetUserString("!3009the MathType 30-day demo has expired"), CStr(States.IsFunctionalityOK)
        superTipDisabledCollection.Add GetUserString("!3016the document is in an unsupported view"), CStr(States.NotInUnsupportedView)
    End If

    If superTipEnabledCollection Is Nothing Then
        Set superTipEnabledCollection = New Collection
        superTipEnabledCollection.Add GetUserString("!3041Insert an inline MathType equation."), mtbIDInsInlineMTEqn
        superTipEnabledCollection.Add GetUserString("!3042Insert a centered MathType display equation."), mtbIDInsDispMTEqn
        superTipEnabledCollection.Add GetUserString("!3043Insert display MathType equation with number on left."), mtbIDInsDispMTEqnLeftNum
        superTipEnabledCollection.Add GetUserString("!3044Insert display MathType equation with number on right."), mtbIDInsDispMTEqnRightNum
        superTipEnabledCollection.Add GetUserString("!3043Insert display MathType equation with number on left."), mtbIDInsDispMTEqnLeftNum2
        superTipEnabledCollection.Add GetUserString("!3044Insert display MathType equation with number on right."), mtbIDInsDispMTEqnRightNum2

        superTipEnabledCollection.Add GetUserString("!3041Insert an inline MathType equation."), mtbIDInsInlineMTEqn3
        superTipEnabledCollection.Add GetUserString("!3042Insert a centered MathType display equation."), mtbIDInsDispMTEqn3
        superTipEnabledCollection.Add GetUserString("!3047Insert a MathType equation from handwriting"), mtbIDInsHandEqn
        superTipEnabledCollection.Add GetUserString("!3043Insert display MathType equation with number on left."), mtbIDInsDispMTEqnLeftNum3
        superTipEnabledCollection.Add GetUserString("!3044Insert display MathType equation with number on right."), mtbIDInsDispMTEqnRightNum3

        superTipEnabledCollection.Add GetUserString("!3045Insert display Equation Builder equation with number on left."), mtbIDInsEBEqnLeftNum
        superTipEnabledCollection.Add GetUserString("!3046Insert display Equation Builder equation with number on right."), mtbIDInsEBEqnRightNum
        superTipEnabledCollection.Add GetUserString("!3050Insert an equation number at the insertion point."), mtbIDInsertNumber
        superTipEnabledCollection.Add GetUserString("!3051Set the format of equation numbers."), mtbIDFormatEqnNums
        superTipEnabledCollection.Add GetUserString("!3052Update equation numbers after rearranging the document."), mtbIDUpdateEqnNums
        superTipEnabledCollection.Add GetUserString("!3079Insert a reference to an existing equation."), mtbIDEquationReference
        superTipEnabledCollection.Add GetUserString("!3080Manage chapter and section breaks for equation numbering."), mtbIDManageChapterSections
        superTipEnabledCollection.Add GetUserString("!3053Starts a new equation numbering section."), mtbIDInsertNextSection
        superTipEnabledCollection.Add GetUserString("!3054Starts a new equation numbering chapter."), mtbIDInsertNextChapter
        superTipEnabledCollection.Add GetUserString("!3055Insert a break with a specified starting number."), mtbIDMoreBreaks
        superTipEnabledCollection.Add GetUserString("!3056Modify an existing chapter or section break."), mtbIDModifyBreak
        superTipEnabledCollection.Add GetUserString("!3057Browse equations, equation numbers, chapter and section breaks."), mtbIDBrowseType
        superTipEnabledCollection.Add GetUserString("!3058Loads fonts, styles and sizes from MathType preference files."), mtbIDSetEqnPrefs
        superTipEnabledCollection.Add GetUserString("!3059Format some or all of the MathType equations in this document."), mtbIDFormatEqns
        superTipEnabledCollection.Add GetUserString("!3060Convert equations in a document to TeX or MathML."), mtbIDConvertEqns
        superTipEnabledCollection.Add GetUserString("!3081Convert a run of TeX/LaTeX equation language to a MathType equation or vice-versa. Enclose TeX in $...$ for an inline equation, \[...\] for a display (paragraph) equation."), mtbIDTeXToggle
        superTipEnabledCollection.Add GetUserString("!3061Export equations to EPS or GIF image files."), mtbIDExportEqns
        superTipEnabledCollection.Add GetUserString("!3062Publish the document to a math-savvy web page."), mtbIDMathPage
        superTipEnabledCollection.Add GetUserString("!3063Allows you to enter a MathType product key and gain access to full MathType functionality."), mtbIDHelpUnlockReg
        superTipEnabledCollection.Add GetUserString("!3064View MathType's version number and your product key."), mtbIDHelpAboutMT
        superTipEnabledCollection.Add GetUserString("!3065Open MathType's home page in your web browser."), mtbIDWeb
        superTipEnabledCollection.Add GetUserString("!3065Open MathType's home page in your web browser."), mtbIDWebHomePage
        superTipEnabledCollection.Add GetUserString("!3077Go to MathType's online support area."), mtbIDWebSupport
        superTipEnabledCollection.Add GetUserString("!3078Prepare an email ready to send feedback to Design Science."), mtbIDWebEmailFeedback
        superTipEnabledCollection.Add "", mtbIDBrowsePrev
        superTipEnabledCollection.Add "", mtbIDBrowseNext
        superTipEnabledCollection.Add "", mtbIDHelp
        superTipEnabledCollection.Add "", mtbIDHelpContents
        superTipEnabledCollection.Add "", mtbIDHelpMTInWord
        superTipEnabledCollection.Add "", mtbIDWebOrderMT
        superTipEnabledCollection.Add "", mtbIDFutureMT
        superTipEnabledCollection.Add GetUserString2("3305", "3314", "MathType options for Word"), mtbIDMTOptions
    End If

    ' the rest of this function sets up which button ID is associated with a
    ' specific enable/disable state

    ' this value is used to hold the state bits. It is or'd together with
    ' one or more of the states enumeration values. A set of buttons may share
    ' a particular set of bits, so this value can be used multiple times.
    ' Because this variable is reset for each new state, you must be careful
    ' when editing the code.
    Dim state As Long

    If buttonStates Is Nothing Then
        Set buttonStates = New Collection
    End If

    If buttonStates.Count = 0 Then
        '**** start of new state ****
        state = States.IsDocumentOpen
        state = state Or States.NotInReadingView
        state = state Or States.NotInUnsupportedView

        buttonStates.Add state, mtbIDInsInlineMTEqn
        buttonStates.Add state, mtbIDInsInlineMTEqn3

        ' now add the lite mode check
        state = state Or States.IsFunctionalityOK

        buttonStates.Add state, mtbIDFormatEqnNums ' works in full/eval mode only
        buttonStates.Add state, mtbIDUpdateEqnNums ' works in full/eval mode only
        buttonStates.Add state, mtbIDEquationReference ' works in full/eval mode only
        buttonStates.Add state, mtbIDSetEqnPrefs ' works in full/eval mode only
        buttonStates.Add state, mtbIDFormatEqns ' works in full/eval mode only
        buttonStates.Add state, mtbIDConvertEqns ' works in full/eval mode only
        buttonStates.Add state, mtbIDExportEqns ' works in full/eval mode only
        buttonStates.Add state, mtbIDTeXToggle ' works in full/eval mode only
        buttonStates.Add state, mtbIDInsHandEqn 'FIX

        '**** start of new state ****
        state = States.IsDocumentOpen Or States.Word97SelectionInCommentPane Or _
                States.Word97SelectionInHeaderFooter Or _
                States.Word97SelectionInFootnoteEndnotePane Or States.SelectionInTextBox

        If Val(Application.version) = kWordX Then
            state = state Or States.WordXPActiveWindowViewSplitSpecial
        End If

        state = state Or States.NotInReadingView
        state = state Or States.NotInUnsupportedView

        buttonStates.Add state, mtbIDInsDispMTEqn
        buttonStates.Add state, mtbIDInsDispMTEqn3

        ' now add the lite mode check
        state = state Or States.IsFunctionalityOK

        buttonStates.Add state, mtbIDInsDispMTEqnLeftNum ' works in full/eval mode only
        buttonStates.Add state, mtbIDInsDispMTEqnRightNum ' works in full/eval mode only
        buttonStates.Add state, mtbIDInsDispMTEqnLeftNum2 ' works in full/eval mode only
        buttonStates.Add state, mtbIDInsDispMTEqnRightNum2 ' works in full/eval mode only
        buttonStates.Add state, mtbIDInsDispMTEqnLeftNum3 ' works in full/eval mode only
        buttonStates.Add state, mtbIDInsDispMTEqnRightNum3 ' works in full/eval mode only
        buttonStates.Add state, mtbIDInsertNumber ' works in full/eval mode only
        buttonStates.Add state, mtbIDManageChapterSections ' works in full/eval mode only
        buttonStates.Add state, mtbIDInsertNextSection ' works in full/eval mode only
        buttonStates.Add state, mtbIDInsertNextChapter ' works in full/eval mode only
        buttonStates.Add state, mtbIDMoreBreaks ' works in full/eval mode only
        buttonStates.Add state, mtbIDModifyBreak ' works in full/eval mode only
        buttonStates.Add state, mtbIDMTOptions ' works in full/eval mode only

        '**** start of new state ****
        state = States.IsDocumentOpen
        state = state Or States.NotInUnsupportedView

        buttonStates.Add state, mtbIDBrowsePrev
        buttonStates.Add state, mtbIDBrowseType
        buttonStates.Add state, mtbIDBrowseNext

        ' I removed the dependency on States.MathPageOK, but left the machinery to
        ' maintain and update States.MathPageOK for use it in the future. See MT-937 -RM
        ' state = States.IsDocumentOpen Or States.MathPageOK Or States.IsFunctionalityOK
        state = state Or States.IsFunctionalityOK

        buttonStates.Add state, mtbIDMathPage ' works in full/eval mode only
        buttonStates.Add state, mtbIDOMMathPage ' works in full/eval mode only

        '**** start of new state ****
        state = States.AlwaysEnable

        buttonStates.Add state, mtbIDHelp
        buttonStates.Add state, mtbIDHelpContents
        buttonStates.Add state, mtbIDHelpMTInWord
        buttonStates.Add state, mtbIDHelpUnlockReg
        buttonStates.Add state, mtbIDHelpAboutMT

        buttonStates.Add state, mtbIDWeb
        buttonStates.Add state, mtbIDWebHomePage
        buttonStates.Add state, mtbIDWebSupport
        buttonStates.Add state, mtbIDWebEmailFeedback
        buttonStates.Add state, mtbIDWebOrderMT
        buttonStates.Add state, mtbIDFutureMT
        buttonStates.Add state, mtbIDSpeak
        buttonStates.Add state, mtbIDSpeak3

        state = state Or States.IsFunctionalityOK
        buttonStates.Add state, mtbIDMTOptions

    End If
    Exit Function
err:
    InitializeStatesCollection = False
End Function

' Since the individual items stored within a VB collection can not be updated
' this subroutine will do the dirty work of manipulating the collection
' to update a given value that is associated with a given key.
Private Sub UpdateCollection(col As Collection, key As Long, value)
    Dim keyStr As String
    Dim tmp

    ' our keys are really long values, but VB does not accept that
    ' so convert to a string
    keyStr = CStr(key)
    ' check if key exists by using the item command to retreive the
    ' value associated with a key. If the item does not exist, we get
    ' an error, and jump to "keymissing"
    On Error GoTo keymissing
    tmp = col.Item(keyStr) ' could fail

    col.Remove keyStr ' could fail but probably won't if it got this far
    col.Add value, keyStr
    GoTo done
keymissing:
    col.Add value, keyStr
    GoTo done
done:
End Sub

Public Sub UIUpdate()
    WriteLog "UIUpdate start"
    ' refresh state
    If UpdateState Then
        ' if needed, update UI elements
        #If Win32 Then
        If Val(Application.version) >= kWord2007 Then
            Invalidate
        Else
            UpdatePre2007CommandBar
        End If
        #Else
        UpdatePre2007CommandBar
        #End If
    End If
    WriteLog "UIUpdate end"
End Sub
Attribute VB_Name = "UIEnableDisable2007"
'====================================================================
' (c) Copyright 2010 by Design Science, Inc. All rights reserved.
'$Header: /MathType/Windows/WordMacros/OfficeVersion/2007/UIEnableDisableWord2007.bas 1     10/11/11 2:05p Jimm $
'====================================================================

Public Function IsNotUnsupportedView() As Boolean
    
    IsNotUnsupportedView = True

End Function

Public Function NoDirectCall_GenEnabledByAppFunctionality(id As String) As Boolean
    
    NoDirectCall_GenEnabledByAppFunctionality = True

    If buttonStates Is Nothing Then
        InitializeStatesCollection
    End If
    
    If buttonStates(id) And IsFunctionalityOK Then
        NoDirectCall_GenEnabledByAppFunctionality = currentStatesCollection(CStr(IsFunctionalityOK))
    End If

End Function

' InQuest injected base64 decoded content
' L^p)l
' 12'r
' ek!*
' :u)u
' :s(v'
' j+wm4
' j+wm4
' +)11*
' +)11*
' z-xI
' *^r&
' 12,1
' a"zn
' zP/j)ZnW
' 12,1
' a"zn
' *^r&
' *^r&

INQUEST-PP=macro
