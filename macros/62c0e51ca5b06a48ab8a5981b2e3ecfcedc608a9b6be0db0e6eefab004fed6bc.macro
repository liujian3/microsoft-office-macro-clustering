Attribute VB_Name = "ModAdmin"
Private Sub Protect_All()

    Const password$ = "Russell123"
        
    ResetTemplateFR
    
    ' Hide columns on SheetData
    Dim i%
    With SheetData
        .Unprotect password
        For i = 1 To 45         ' AS - changed from 44 (AR) - Oct 2019
            .Columns(i).Hidden = 1 - .Cells(3, i).Value
        Next i
        .Select
        ActiveWindow.DisplayHeadings = False
        ActiveWindow.DisplayGridlines = False
    End With
    
    SheetData.Protect password
    SheetPortfolio.Protect password
        
    SheetMML.Visible = xlSheetVeryHidden
    SheetAllocation.Visible = xlSheetVeryHidden

End Sub



Private Sub Unprotect_All()
    
    Const password$ = "Russell123"
    
    SheetData.Unprotect password
    SheetData.Select
    ActiveWindow.DisplayHeadings = True
    ActiveWindow.DisplayGridlines = True
    
    SheetPortfolio.Unprotect password
    SheetTemplate.Unprotect password
    
    SheetData.Rows.Hidden = False
    SheetData.Columns.Hidden = False
    SheetPortfolio.Rows.Hidden = False
    SheetTemplate.Rows.Hidden = False
    
    SheetMML.Visible = xlSheetVisible
    SheetAllocation.Visible = xlSheetVisible

End Sub



Private Sub TEMP_HideRows_Classes()

    Dim i%
    With Sheets("Russell Investments Classes")
        For i = List_start To List_end
            .Rows(i).Hidden = 1 - .Cells(i, 8).Value
        Next i
    End With

End Sub
Attribute VB_Name = "ModFormat"
' ----------------------------------------------------------------------------
' Workbook          : Manager_Allocations_FR.xls
' Author            : Lisa Wu
' Created           : May 28, 2018
' Description       : Print Manager Allocation Tool output report.
' ----------------------------------------------------------------------------
' Macros included   : Sub ProcessReportFR()
'                     Sub ResetTemplateFR()
' Description       : Linked to "Print" button on SheetData
' ----------------------------------------------------------------------------

Option Explicit

Public Const SAA_FR$ = "R|fffd|partition de l|fffd|actif cible Investissements Russell"
Public Const List_start% = 9
Public Const List_end% = 147       ' changed from 135 - Oct-2019

' SheetData
Public Const colStart% = 6         ' F  - Short Term Income
Public Const colEnd% = 35          ' AI - Positioning Strategies; changed from 34 (Oct-2019)

Sub ProcessReportFR()

    Application.ScreenUpdating = False
    Application.Calculate
  
    Const password$ = "Russell123"
    SheetTemplate.Unprotect password
        
    ' SheetData
        
    Const colPrint% = 1
    Const colClient% = 2
    Const colAmount% = 3
    Const colFundName% = 5        ' E  - Proposal Type
    Const colFundGroup% = 39      ' AM - Group Name; changed from 38 (Oct-2019)
    Const rowStart% = 4
    
    Dim PrintRow$, Client$, FundName$, FundGroup$, Amount#
    
    ' SheetTemplate
    
    Const ClientCell$ = "E2"
    Const AmountCell$ = "F6"
    Const TemplateHeight% = 163   ' changed from 151 (Oct-2019)
    Const TemplateWidth% = 6
    
    Dim TemplateRange$
    TemplateRange = "A1:F" & TemplateHeight
    
    Dim CountVisibleRows%
    
    Dim Dscl_start%, Dscl_end%
    Dscl_start = SheetAllocation.Range("DsclStart").Value
    Dscl_end = SheetAllocation.Range("DsclEnd").Value
        
    Dim r%, i%
    Dim rDscl%

    ' Create output sheet
    
    Dim OutputSheet As Worksheet
    Set OutputSheet = Application.Worksheets.Add
    OutputSheet.Name = "Output Sheet"
    
    For i = 1 To TemplateWidth
        OutputSheet.Cells(1, i).ColumnWidth = SheetTemplate.Cells(1, i).ColumnWidth
    Next
    
    ' Produce combined report
    
    Dim CountFund%
    
    Dim cRow%:            cRow = rowStart
    Dim OutputRow&:       OutputRow = 1
    Dim ChartNumber&:     ChartNumber = 2
    
    Dim co As ChartObject
    Dim s As Shape
        
    PrintRow = SheetData.Cells(cRow, colPrint).Value
    Client = SheetData.Cells(cRow, colClient).Value
    
'    On Error GoTo ErrorHandler
    
    While Not Trim(Client) = ""
        
        If UCase(Left(Trim(PrintRow & " "), 1)) = "Y" Then
            
            CountFund = CountFund + 1
        
            FundName = SheetData.Cells(cRow, colFundName).Value
            FundGroup = SheetData.Cells(cRow, colFundGroup).Value
            Amount = SheetData.Cells(cRow, colAmount).Value
            
            ' Assign allocation values to chart data source - SheetAllocation
            For i = 1 To (colEnd - colStart + 1)
                With SheetAllocation.Range("Allocation")
                    .Cells(i, 1) = SheetData.Cells(cRow, i + colStart - 1).Value
                End With
            Next i
            
            With SheetTemplate
            
                ' Assign allocation values to SheetTemplate
                For r = List_start To List_end
                    If .Cells(r, 8) <> "" Then
                        .Cells(r, 5) = SheetAllocation.Range("Allocation").Cells(.Cells(r, 8).Value, 1).Value
                    End If
                    'Hide rows where allocation % = 0
                    .Rows(r).Hidden = (.Cells(r, 5) = 0)
                Next r

                CountVisibleRows = Application.WorksheetFunction.CountIf(.Range("E" & List_start & ":E" & List_end), "<>0")
                
                ' Set up page title
                .Cells(1, 1).Value = FundGroup
                .Cells(2, 3).Value = FundName
                .Cells(2, 5).Value = Client
                .Cells(3, 5).Value = SheetAllocation.Range("NumSubAdvs").Value & " sous-conseiller"
                .Cells(4, 5).Value = SheetAllocation.Range("NumPools").Value & " fonds d'investissement"
                .Cells(6, 6).Value = Amount
                
                ' Disclosure
                .Rows(Dscl_start).Hidden = False
                .Rows(Dscl_end).Hidden = False
                .Rows(CStr(Dscl_start + 1) & ":" & CStr(Dscl_end - 1)).Hidden = True
                
                rDscl = SheetAllocation.Range("Dscl").Value
                .Rows(rDscl).Hidden = False
        
            End With
                        
            ' Copy Template sheet to Output sheet
            For r = 1 To TemplateHeight
                OutputSheet.Cells(r + OutputRow - 1, 1).RowHeight = SheetTemplate.Cells(r, 1).RowHeight
            Next r
            SheetTemplate.Range(TemplateRange).Copy OutputSheet.Cells(OutputRow, 1)
            
            Application.ScreenUpdating = True
            Set co = SheetTemplate.ChartObjects(1)
            co.CopyPicture
            OutputSheet.Paste Destination:=OutputSheet.Cells(OutputRow + 1, 4)
            Application.ScreenUpdating = False
            
            Set s = OutputSheet.Shapes(ChartNumber)
            s.Left = co.Left
            
            ' Add page breaks
            With OutputSheet
                If (CountVisibleRows > 21 And CountVisibleRows < 53) Or _
                    (CountVisibleRows > 89 And CountVisibleRows < 120) Then            ' changed from 23-53 to 21-53
                    .HPageBreaks.Add before:=.Cells(OutputRow + Dscl_start - 1, 1)
                End If
            End With
            
            ChartNumber = ChartNumber + 2
            OutputRow = OutputRow + TemplateHeight
            OutputSheet.HPageBreaks.Add before:=OutputSheet.Cells(OutputRow, 1)
            
        End If
        
        cRow = cRow + 1
        PrintRow = SheetData.Cells(cRow, colPrint).Value
        Client = SheetData.Cells(cRow, colClient).Value
                
    Wend
    
    SheetTemplate.Protect password
    
    ' Print OutputSheet
    Application.PrintCommunication = False
    With OutputSheet.PageSetup
        .PrintArea = "A1:F" & CStr(TemplateHeight * CountFund)
        .LeftMargin = SheetTemplate.PageSetup.LeftMargin
        .RightMargin = SheetTemplate.PageSetup.RightMargin
        .TopMargin = SheetTemplate.PageSetup.TopMargin
        .BottomMargin = SheetTemplate.PageSetup.BottomMargin
        .CenterHorizontally = True
        .FitToPagesTall = False
        .FitToPagesWide = 1
'        .Zoom = SheetTemplate.PageSetup.Zoom
    End With
    Application.PrintCommunication = True
    Application.Calculate
    Application.ScreenUpdating = True
    
    OutputSheet.PrintPreview
    OutputSheet.Delete

    ' Reset SheetTemplate
    ResetTemplateFR
    
Done:
    Exit Sub
    
ErrorHandler:
    SheetData.Protect password
    SheetTemplate.Protect password
    MsgBox "Input not valid.", , "Error"
    
End Sub



Sub ResetTemplateFR()
    
    Const password$ = "Russell123"
    
    ' SheetAllocation
    Const colDefaultSAA$ = "AM"   ' changed from "AI" - Apr 2019
    
    Dim i%, r%, rDscl%
    Dim Dscl_start%, Dscl_end%
    Dscl_start = SheetAllocation.Range("DsclStart").Value
    Dscl_end = SheetAllocation.Range("DsclEnd").Value

    For i = 1 To (colEnd - colStart + 1)
        With SheetAllocation.Range("Allocation")
            .Cells(i, 1) = SheetAllocation.Range(colDefaultSAA & .Cells(i, 1).Row).Value / 100
        End With
    Next i

    With SheetTemplate
    
        .Unprotect password
        
        ' Assign allocation values to SheetTemplate
        For r = List_start To List_end
            If .Cells(r, 8) <> "" Then
                .Cells(r, 5) = SheetAllocation.Range("Allocation").Cells(.Cells(r, 8).Value, 1).Value
            End If
            'Hide rows where allocation % = 0
            .Rows(r).Hidden = (.Cells(r, 5) = 0)
        Next r

        ' Set up page title
        .Cells(1, 1).Value = "Fonds Investissements Russell"
        .Cells(2, 3).Value = SAA_FR
        .Cells(2, 5).Value = "Client"
        .Cells(3, 5).Value = SheetAllocation.Range("NumSubAdvs").Value & " sous-conseiller"
        .Cells(4, 5).Value = SheetAllocation.Range("NumPools").Value & " fonds d'investissement"
        .Cells(6, 6).Value = 100000
        
        ' Disclosure
        .Rows(Dscl_start).Hidden = False
        .Rows(Dscl_end).Hidden = False
        .Rows(CStr(Dscl_start + 1) & ":" & CStr(Dscl_end - 1)).Hidden = True
        
        rDscl = SheetAllocation.Range("Dscl").Value
        .Rows(rDscl).Hidden = False

        .ResetAllPageBreaks
        .HPageBreaks.Add before:=.Cells(Dscl_start, 1)

    End With
    
    Application.Calculate
    SheetTemplate.Protect password

End Sub
Attribute VB_Name = "Mod_Temp"
Sub SetColor_PieChart()

    Dim clr As Long
    Dim x%, pointCount%
    
    chartCount = Sheets("Allocation").ChartObjects.Count
    
    pointCount = Sheets("Allocation").ChartObjects("Chart1").Chart.SeriesCollection(1).Points.Count
        
    For x = 1 To pointCount
        With Sheets("Allocation").Range("rngRGB_Allocation")
            Sheets("Allocation").ChartObjects("Chart1").Chart.SeriesCollection(1).Points(x).Format.Fill.ForeColor.RGB _
                = RGB(.Cells(x, 1), .Cells(x, 2), .Cells(x, 3))
        End With
    Next x
    
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SheetAllocation"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SheetData"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    
    If Intersect(Target, Range("E4:E50")) Is Nothing Then Exit Sub
    
    Const password$ = "Russell123"
    Unprotect password

    Const clrLightGray& = 15856371      ' RGB(243, 242, 241) = 15856371
    Const clrDarkGray& = 12566463       ' RGB(191, 191, 191) = 12566463
        
    Dim rowTemplate%
    rowTemplate = Range("InputTemplate").Row

    Dim i%
    i = Application.ActiveCell.Row
    
    If Cells(i, 5) = SAA_FR Then
        
        With Range(Cells(i, colStart), Cells(i, colEnd))
            .Copy
            .PasteSpecial xlPasteValues
            .SpecialCells(xlCellTypeVisible).Interior.Color = clrLightGray
            .SpecialCells(xlCellTypeVisible).Font.Color = 0
            .SpecialCells(xlCellTypeVisible).Locked = False
        End With
    
    Else
    
        Range(Cells(rowTemplate, colStart), Cells(rowTemplate, colEnd)).Copy
        With Range(Cells(i, colStart), Cells(i, colEnd))
            .PasteSpecial xlPasteFormulas
            .Interior.Color = clrDarkGray
            .Font.Color = clrDarkGray
            .Locked = True
        End With
        
    End If
    
    Application.CutCopyMode = False
    Cells(i, 5).Select

    Protect password
        
End Sub
Attribute VB_Name = "SheetMML"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SheetPortfolio"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    
'    On Error Resume Next

    If Intersect(Target, Range("A1:E1")) Is Nothing And _
        Intersect(Target, Range("C2:C4")) Is Nothing Then Exit Sub

    Const password As String = "Russell123"
    Unprotect password
        
    Dim Dscl_start%, Dscl_end%
    Dscl_start = SheetAllocation.Range("DsclStart").Value
    Dscl_end = SheetAllocation.Range("DsclEnd").Value
    
    Dim r%
    Dim rDscl%

    If Not Intersect(Target, Range("A1")) Is Nothing Then
        If IsEmpty(Range("A1")) Then
            Range("PortfolioName") = ""
        Else
            Range("PortfolioName") = SheetAllocation.Range("PortfolioName_Selection").Cells(1, 1)
        End If
    End If
    
    
    If Not Intersect(Target, Range("PortfolioName")) Is Nothing Then
    
        If IsError(Cells(3, 5)) Then Exit Sub
    
        ' Hide rows where underlying pools % = 0
                
        For r = List_start To List_end
            Rows(r).Hidden = (Cells(r, 5) = 0)
        Next
        
        ' Disclosure
        Rows(Dscl_start).Hidden = False
        Rows(Dscl_end).Hidden = False
        
        Rows(CStr(Dscl_start + 1) & ":" & CStr(Dscl_end - 1)).Hidden = True
                
        rDscl = SheetAllocation.Range("PortfolioDscl").Value
        
        Rows(rDscl).Hidden = False
        
        ' Page break before disclosure for MAIE & MAFI
        
        ResetAllPageBreaks
        
'        If Range("PortfolioIndex").Value = "MAIE" Or Range("PortfolioIndex").Value = "MAFI" _
'            Or Range("PortfolioIndex").Value = "MFGB" Then
'            HPageBreaks.Add before:=Cells(Dscl_start, 1)
'        End If
        
        Select Case Range("PortfolioIndex").Value
        Case "MAIE", "MAFI", "MFGB", "RDMIP", "RIEP"
            HPageBreaks.Add before:=Cells(Dscl_start, 1)
        Case Else
        End Select
        
    End If
            
    Protect password
    
End Sub
Attribute VB_Name = "SheetTemplate"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
