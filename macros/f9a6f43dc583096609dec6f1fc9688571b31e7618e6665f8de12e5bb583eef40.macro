Attribute VB_Name = "MGlobals"
Option Explicit

Public Const ANA_COL As String = "$A"
Public Const ANA_CHECK_COL As String = "$B"
Public Const SUPP_STOCK_COL As String = "$C"
Public Const SHELF_DESCRIPTION_COL As String = "$D"
Public Const VARIETY_COL As String = "$E"
Public Const SIZE_COL As String = "$F"
Public Const UNIT_SIZE_UOM_COL As String = "$G"
Public Const UNIT_SIZE_QTY_COL As String = "$H"
Public Const VOL_UOM_COL As String = "$I"
Public Const VOL_QTY_COL As String = "$J"
Public Const PRICE_COMP_UOM_COL As String = "$K"
Public Const PRICE_COMP_QTY_COL As String = "$L"
Public Const OPTION_COL As String = "$M"
Public Const TILL_DESCRIPTION_COL As String = "$N"
Public Const POS_COL As String = "$O"
Public Const BRAND_COL As String = "$P"
Public Const PLU_COL As String = "$R"
Public Const CASE_TUC_COL As String = "$S"
Public Const TUC_CHECK_COL As String = "$T"
Public Const ITEMS_PER_CASE As String = "$U" '#2009-07-08
Public Const SUPP_PACK_LENGTH_COL As String = "$V"
Public Const SUPP_PACK_WIDTH_COL As String = "$W"
Public Const SUPP_PACK_HEIGHT_COL As String = "$X"
Public Const SUPP_PACK_WEIGHT_COL As String = "$Y"
Public Const INNER_TUC_COL As String = "$Z"
Public Const INNER_TUC_CHK_COL As String = "$AA"
Public Const WHS_PK_QTY_COL As String = "$AB"
Public Const WHS_PK_LENGTH_COL As String = "$AC"
Public Const WHS_PK_WIDTH_COL As String = "$AD"
Public Const WHS_PK_HEIGHT_COL As String = "$AE"
Public Const WHS_PK_WEIGHT_COL As String = "$AF"
'Sanjeev: SPECIAL_HANDLING_INSTR_COL added on 21-Sept-2011.
'Moving all columns after this by one.
Public Const SPECIAL_HANDLING_INSTR_COL As String = "$AG"
Public Const PALLET_TI_COL As String = "$AH"
Public Const PALLET_HI_COL As String = "$AI"
Public Const PALLET_ROUND_COL As String = "$AJ"
Public Const WHSE_AREA_COL As String = "$AK"
Public Const CONV_BELT_COL As String = "$AL"
Public Const CRUSH_COL As String = "$AM"
Public Const WHSE_ROT_COL As String = "$AN"
Public Const SUPP_PK_COST_COL As String = "$AO"
Public Const PRICE_COL As String = "$AP"
Public Const MFGR_PRE_COL As String = "$AQ"
Public Const MFGR_SUGG_COL As String = "$AR"
Public Const TAX_COL As String = "$AS"
Public Const COST_AVG_COL As String = "$AT"
Public Const DEPT_COL As String = "$AU"
Public Const SUPPLIER_COL As String = "$AV"
Public Const ITEM_TYPE_COL As String = "$AW"
Public Const ITEM_SUB_TYPE_COL As String = "$AX"
Public Const COMM_COL As String = "$AY"
Public Const PPG_COL As String = "$AZ"
Public Const PROJ_SALES_COL As String = "$BC"
Public Const SEND_TO_STORE As String = "$BD"
Public Const ITEM_EFF_DATE As String = "$BE"
Public Const PERF_RATING_COL As String = "$BG"
Public Const REPLEN_COL As String = "$BH"
'Sanjeev: INTANGIBLE_IND, VARIETY_PACK_IND added on 04-Apr-2012.
'Moving all columns after this by two.
Public Const VARIETY_PACK_IND As String = "$BI"
Public Const INTANGIBLE_IND As String = "$BJ"
Public Const SUPP_LEAD_COL As String = "$BK"
Public Const EX_SUPP_COL As String = "$BL"
Public Const ITEM_REPL_COL As String = "$BO"
Public Const CHANGE_REASON_COL As String = "$BP"
Public Const COMMENT_COL As String = "$BQ"
Public Const ITEM_LENGTH_COL As String = "$BR"
Public Const ITEM_WIDTH_COL As String = "$BS"
Public Const ITEM_HEIGHT_COL As String = "BT"
Public Const ITEM_WEIGHT_COL As String = "$BU"
Public Const LIFE_STORE_COL As String = "$CH"
Public Const LIFE_DEPOT_COL As String = "$CI"
Public Const MARSH_AREA_COL As String = "$CL"
Public Const FACTORY_ID As String = "$CV"  ' added 2011-05-23
Public Const COUNTRY_COL As String = "$CW" ' moved along one column 2011-05-23


Public Const Consideration_Code As String = "$DO" ' added 2012-05-01

Public Const EXTENDED_SIZE As String = "$DP" ' added 2012-11-20
Public Const ALCOHOL_BY_VOLUME As String = "$DQ" ' added 2012-11-20
Public Const PACK_SIZE As String = "$DR"  ' added 2012-11-20

Public Const Item_Restriction As String = "$DS" ' added 2012-05-01

Public Consi_Code As Range ' Considersation Code in Input Sheet


' Parameters in the 'Parameters' sheet
Public Const PARAM_SHEET As String = "Parameters"
Public LIFE_DEPOT_LIMIT As Integer

' Countries in the 'Country Of Origin Lookup' sheet
Public Const COUNTRY_SHEET As String = "Country of Origin Lookup"
Public Const COUNTRY_RANGE As String = "CountryLookup"
Public COUNTRY_LOOKUP As Range


' Comparison UOM conversion and display mappings
Public Const UOM_SHEET As String = "UOM Conversion"
Public Const UOM_RANGE As String = "UOMConv"
Public UOM_LOOKUP As Range



Attribute VB_Name = "MSystemCode"
Option Explicit

'#################################################
'#
'#  Project                         SEL_Preview.xls
'#
'#  Notes                           Quick and dirty tool to take a user's keyed
'#                                     information and display it in SEL format.
'#
'#
'#  Business Owner              Aniela Tallentire
'#  ISD Developer                Kevin Morris
'#
'#################################################
'#  Description         Procedures and Functions written specifically for this
'#                          application.
'#################################################


'#
'#  populate_params - notes
'#  ----------------------------------
'#
'#  Comments    Populate global system parameters (defined in MGlobals) and ranges
'#
'#  Date                Author              Action
'#  ===========================================================================
'#  2010-11-04      Charles Wong        Created
'#  ===========================================================================
Sub populate_params()
    ' Parameters
    LIFE_DEPOT_LIMIT = ThisWorkbook.Worksheets(PARAM_SHEET).Range("$B$3").Value
    ' Ranges
    Set COUNTRY_LOOKUP = ThisWorkbook.Worksheets(COUNTRY_SHEET).Range(COUNTRY_RANGE)
    Set UOM_LOOKUP = ThisWorkbook.Worksheets(UOM_SHEET).Range(UOM_RANGE)

End Sub


'#
'#  add_validation_to_row - notes
'#  ----------------------------------
'#
'#  Comments    Runs when user chooses to validate a single (the active) row for asda criteria
'#
'#  Date                Author              Action
'#  ===========================================================================
'#  2007-01-04      Kevin Morris        Created
'#  2009-07-08      Kevin Morris        Changed to call validate_me_asda & _supplier
'#  ===========================================================================
Sub add_asda_validation_to_row()
Attribute add_asda_validation_to_row.VB_ProcData.VB_Invoke_Func = " \n14"

Dim rngA As Range
Dim rngB As Range
Dim iColCount As Integer

    Call populate_params
    
    Call validate_me(ActiveCell.Row, "Supplier")
    Call validate_me(ActiveCell.Row, "Asda")
    
    MsgBox "Validation complete", vbInformation + vbOKOnly, "All done"
    
End Sub

'#
'#  add_supplier_validation_to_row - notes
'#  --------------------------------------------
'#
'#  Comments    Runs when user chooses to validate a single (the active) row for supplier criteria
'#
'#  Date                Author              Action
'#  ===========================================================================
'#  2009-07-08      Kevin Morris        Created
'#  ===========================================================================
Sub add_supplier_validation_to_row()

Dim rngA As Range
Dim rngB As Range
Dim iColCount As Integer

    Call populate_params
    
    Call validate_me(ActiveCell.Row, "Supplier")
    MsgBox "Validation complete", vbInformation + vbOKOnly, "All done"
End Sub




'#
'#  add_asda_validation_throughout - notes
'#  ---------------------------------------------
'#
'#  Comments    Runs when user chooses to validate all entries.  Assumes used
'#                      range is correct and works through each row within.  Limits
'#                      size of sheet to 1000 rows.
'#
'#  Date                Author              Action
'#  ===========================================================================
'#  2007-01-04      Kevin Morris        Created
'#  2009-07-08      Kevin Morris        Changed to call validate_me_asda
'#  ===========================================================================
Sub add_asda_validation_throughout()
Attribute add_asda_validation_throughout.VB_ProcData.VB_Invoke_Func = " \n14"

Dim rngA As Range
Dim rngB As Range
Dim lRow As Long

    Call populate_params
    
    lRow = ActiveSheet.UsedRange.Rows.Count
    If lRow > 1000 Then
        MsgBox "Too many rows in use.  Fix and retry."
        Exit Sub
    End If
    
    Range("$A4").Select
    Do While ActiveCell.Row <= lRow
        Call validate_me(ActiveCell.Row, "Asda")
        ActiveCell.Offset(1, 0).Select
    Loop

    MsgBox "Validation complete", vbInformation + vbOKOnly, "All done"
End Sub

'#
'#  add_supplier_validation_throughout - notes
'#  ------------------------------------------------
'#
'#  Comments    Runs when user chooses to validate all entries.  Assumes used
'#                      range is correct and works through each row within.  Limits
'#                      size of sheet to 1000 rows.
'#
'#  Date                Author              Action
'#  ===========================================================================
'#  2009-07-08      Kevin Morris        Created
'#  ===========================================================================
Sub add_supplier_validation_throughout()

Dim rngA As Range
Dim rngB As Range
Dim lRow As Long

    Call populate_params
    
    lRow = ActiveSheet.UsedRange.Rows.Count
    If lRow > 1000 Then
        MsgBox "Too many rows in use.  Fix and retry."
        Exit Sub
    End If
    
    Range("$A4").Select
    Do While ActiveCell.Row <= lRow
        Call validate_me(ActiveCell.Row, "Supplier")
        ActiveCell.Offset(1, 0).Select
    Loop
    
    MsgBox "Validation complete", vbInformation + vbOKOnly, "All done"
End Sub


'#
'#  validate_me - notes
'#  ----------------------
'#
'#  Comments    Accepts a row and attemps to add validation to each relevant cell in the row
'#
'#  Date                Author              Action
'#  ===========================================================================
'#  2007-01-04      Kevin Morris    Created
'#  2009-07-08      Kevin Morris    Modified to accept chkType and filter to control what's checked
'#                                                   Expected values "sel","Asda","Supplier"
'#  ===========================================================================
Sub validate_me(ByVal lRow As Long, Optional chkType As String)
Attribute validate_me.VB_ProcData.VB_Invoke_Func = " \n14"

Dim iDecPlc As Integer

    

    '##########################################################################
    '# ANA Col A
    '# Conditions : 0, 7 or 12 digits.  No special characters
    '# 2010-11-02 CW: allow complete empty
    Select Case chkType
        Case "Asda", "Supplier"
            If Len(Range(ANA_COL & lRow).Value) > 12 Then
                    MsgBox "ANA must be 12 or fewer characters.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(ANA_COL & lRow).Select
                    End
            ElseIf (Len(Range(ANA_COL & lRow).Value) > 0) And (Not check_numeric(Range(ANA_COL & lRow).Value)) Then
                MsgBox "Only numbers allowed in ANA.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(ANA_COL & lRow).Select
                End
            End If
     End Select
    '##########################################################################
    '# ANA Check Digit Col B
    '# Conditions : Max 1 digit
    '# 2010-11-02 CW: Force empty if ANA is empty
    Select Case chkType
        Case "Asda", "Supplier"
            If Len(Range(ANA_COL & lRow).Value) > 0 Then
                If (Len(Range(ANA_CHECK_COL & lRow).Value) <> 1) Or (Not check_numeric(Range(ANA_CHECK_COL & lRow).Value)) Then
                    MsgBox "ANA Check Digit must be 1 numeric character.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(ANA_CHECK_COL & lRow).Select
                    End
                End If
            Else
                If Len(Range(ANA_CHECK_COL & lRow).Value) <> 0 Then
                    MsgBox "ANA Check Digit must be empty if ANA is empty. Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(ANA_CHECK_COL & lRow).Select
                    End
                End If
            End If
    End Select
    
    '##########################################################################
    '# Supplier Stock Number Col C
    '# Conditions : Max 15 digits
    '# 2010-11-02 CW: Allow empty (but not spaces)
    '# 2010-11-09 CW: Allow non-numeric characters
    Select Case chkType
        Case "Asda", "Supplier"
            If Len(Range(SUPP_STOCK_COL & lRow).Value) > 0 Then
                If Len(Range(SUPP_STOCK_COL & lRow).Value) > 15 Then
                    MsgBox "Supplier stock number must be a maximum of 15 characters.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(SUPP_STOCK_COL & lRow).Select
                    End
                End If
            End If
    End Select
    
    '##########################################################################
    '# Shelf Descr Col D
    '# Conditions : Max 20 characters.  No special characters
    Select Case chkType
        Case "Asda", "Supplier", "sel"
            If Len(Range(SHELF_DESCRIPTION_COL & lRow).Value) > 20 Or _
                Len(Range(SHELF_DESCRIPTION_COL & lRow).Value) = 0 Then
                MsgBox "Shelf Description limit is 20 characters and cannot be blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(SHELF_DESCRIPTION_COL & lRow).Select
                    End
            End If
            
            If allowed_characters(Range(SHELF_DESCRIPTION_COL & lRow).Value) = False Then
                MsgBox "Shelf Description doesn't allow any special characters (e.g. !""|fffd|$%^&*).  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(SHELF_DESCRIPTION_COL & lRow).Select
                End
            End If
    End Select
    
    '##########################################################################
    '# Variety Col E
    '# Conditions : Max 6 characters.  No special characters
    Select Case chkType
        Case "Asda", "Supplier", "sel"
            If Len(Range(VARIETY_COL & lRow).Value) > 6 Then '# Or
                '# Len(Range(VARIETY_COL & lRow).Value) = 0 Then
                MsgBox "Variety limit is 6 characters.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(VARIETY_COL & lRow).Select
                End
            End If
            
            If allowed_characters(Range(VARIETY_COL & lRow).Value) = False Then
                MsgBox "Variety doesn't allow any special characters (e.g. !""|fffd|$%^&*).  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(VARIETY_COL & lRow).Select
                End
            End If
    End Select
    
    '##########################################################################
    '# Size Col F
    '# Conditions : Max 6 characters.
    Select Case chkType
        Case "Asda", "Supplier", "sel"
            If Len(Range(SIZE_COL & lRow).Value) > 6 Then '# Or
                '# Len(Range(SIZE_COL & lRow).Value) = 0 Then
                MsgBox "Size limit is 6 characters and cannot be blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(SIZE_COL & lRow).Select
                End
            End If
    End Select
        
    '##########################################################################
    '# Unit Size UOM Col G
    '# Conditions : Max 6 characters.  Restricted entry.
        Select Case chkType
        Case "Asda", "Supplier", "sel"
            If Len(Range(UNIT_SIZE_UOM_COL & lRow).Value) > 2 Or _
                Len(Range(UNIT_SIZE_UOM_COL & lRow).Value) = 0 Then
                MsgBox "Unit Size UOM limit is 2 characters and cannot be blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(UNIT_SIZE_UOM_COL & lRow).Select
                End
            End If
            
            If Len(Range(UNIT_SIZE_UOM_COL & lRow).Value) > 0 Then
                Select Case UCase(Range(UNIT_SIZE_UOM_COL & lRow).Value)
                    Case "EA", "CM", "C3", "ML", "MR", "GR", "KG", "LT"
                    Case Else
                        MsgBox "Unit Size UOM must be one of  'EA', 'CM', 'C3', 'ML', 'MR','GR','KG','LT'.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(UNIT_SIZE_UOM_COL & lRow).Select
                        End
                End Select
            End If
        End Select
    
    '##########################################################################
    '# Unit Size Col H
    '# Conditions : Digits only
    Select Case chkType
        Case "Asda", "Supplier", "sel"
            If check_numeric(Range(UNIT_SIZE_QTY_COL & lRow).Value) = False Or _
                Len(Range(UNIT_SIZE_QTY_COL & lRow).Value) = 0 Then
                MsgBox "Unit Size allows only digits and cannot be blank.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(UNIT_SIZE_QTY_COL & lRow).Select
                End
            End If
    End Select
    
    '##########################################################################
    '# Volume UOM Col I
    '# Conditions : Restricted entry
    Select Case chkType
        Case "Asda"
            If Len(Range(VOL_UOM_COL & lRow).Value) > 0 Then
                Select Case UCase(Range(VOL_UOM_COL & lRow).Value)
                    Case "EA", "CM", "CL", "ML", "MR"
                    Case Else
                        MsgBox "Volume UOM must be one of 'EA', 'KG', 'GR''.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(VOL_UOM_COL & lRow).Select
                        End
                End Select
            End If
    End Select
    
    '##########################################################################
    '# Volume Qty Col J
    '# Conditions : Digits only
    Select Case chkType
        Case "Asda"
            If check_numeric(Range(VOL_QTY_COL & lRow).Value) = False Then
                MsgBox "Volume Qty allows only digits.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(VOL_QTY_COL & lRow).Select
                End
            End If
    End Select

    '##########################################################################
    '# Price Comparison UOM Col K
    '# Conditions : Characters only
    Select Case chkType
        Case "Asda", "sel"
            If Len(Range(PRICE_COMP_UOM_COL & lRow).Value) > 2 Or _
                Len(Range(PRICE_COMP_UOM_COL & lRow).Value) = 0 Then
                MsgBox "Price Comparison UOM limit is 2 characters and cannot be blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(PRICE_COMP_UOM_COL & lRow).Select
                End
            End If
            
            If Len(Range(PRICE_COMP_UOM_COL & lRow).Value) > 0 Then
                Select Case UCase(Range(PRICE_COMP_UOM_COL & lRow).Value)
                    Case "EA", "CM", "C3", "ML", "MR", "GR", "KG", "LT"
                    Case Else
                        MsgBox "Price Comparison UOM must be one of 'EA', 'CM', 'C3', 'ML', 'MR','GR','KG','LT'.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(PRICE_COMP_UOM_COL & lRow).Select
                        End
                End Select
            End If
    End Select

    '##########################################################################
    '# Price Comparison Qty Col L
    '# Conditions : Digits only
    Select Case chkType
        Case "Asda", "sel"
            If check_numeric(Range(PRICE_COMP_QTY_COL & lRow).Value) = False Or _
                Len(Range(PRICE_COMP_QTY_COL & lRow).Value) = 0 Then
                MsgBox "Price Comparison Qty allows only digits and cannot be blank.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(PRICE_COMP_QTY_COL & lRow).Select
                End
            End If
    End Select
    
    '##########################################################################
    '# Option Col M
    '# Conditions : <= 20
    '# 2010-11-04 CW: Added this validation
    '# 2010-11-12 CW: Changed to allow alphanumeric, and not > 25 characters
    '# 2010-11-18 CW: length limit now 20 characters
    Select Case chkType
        Case "Asda", "Supplier"
            If Len(Range(OPTION_COL & lRow).Value) > 20 Then
                MsgBox "Options must not be longer than 20 characters.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(OPTION_COL & lRow).Select
                End
            'If check_numeric(Range(OPTION_COL & lRow).Value) = False Then
            '    MsgBox "Options must contain only numeric digits.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
            '    Range(OPTION_COL & lRow).Select
            '    End
            'ElseIf CInt(Range(OPTION_COL & lRow).Value) > 25 Then
            '    MsgBox "Options must not be > 25.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
            '    Range(OPTION_COL & lRow).Select
            '    End
            End If
    End Select
    
    '##########################################################################
    '# Till Description Col N
    '# Conditions : Max 12 characters
    Select Case chkType
        Case "Asda"
            If Len(Range(TILL_DESCRIPTION_COL & lRow).Value) > 12 Or _
            Len(Range(TILL_DESCRIPTION_COL & lRow).Value) = 0 Then
                MsgBox "Till description limit is 12 characters and cannot be blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(TILL_DESCRIPTION_COL & lRow).Select
                End
            End If
    End Select
    
    '##########################################################################
    '# POS Col O
    '# Conditions : Equals SHELF_DESCRIPTION_COL if blank.  No special characters.  Max 40 characters.
    Select Case chkType
        Case "Asda", "Supplier", "sel"
            If Range(POS_COL & lRow).Value = "" Then
                Range(POS_COL & lRow).Value = Range(SHELF_DESCRIPTION_COL & lRow).Value
            End If
            
            If allowed_characters(Range(POS_COL & lRow).Value, True) = False Then
                MsgBox "POS doesn't allow any special characters (e.g. !""|fffd|$%^&*).  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(POS_COL & lRow).Select
                End
            End If
            
            If Len(Range(POS_COL & lRow).Value) > 40 Or _
                Len(Range(POS_COL & lRow).Value) = 0 Then
                MsgBox "POS limit is 40 characters and cannot be blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(POS_COL & lRow).Select
                End
            End If
    End Select

    '##########################################################################
    '# Brand Col P
    '# Conditions : Mandatory field.  Restricted entry.
    '# 2010-11-09 CW: Removed on Rob's request
   
    'Select Case chkType
    '    Case "Asda"
    '        If Len(Range(BRAND_COL & lRow).Value) = 0 Then
    '            MsgBox "Brand is a mandatory field.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
    '            Range(BRAND_COL & lRow).Select
    '            End
    '        Else
    '            Select Case Range(BRAND_COL & lRow).Value
    '                Case 1 To 8, 10 To 12
    '                Case Else
    '                    MsgBox "Brand must be between 1 and 8 or 10 and 12.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
    '                    Range(BRAND_COL & lRow).Select
    '                    End
    '            End Select
    '        End If
    'End Select

    '##########################################################################
    '# PLU Col R
    '# Conditions : Max 5 Characters
    Select Case chkType
        Case "Asda"
            If Len(Range(PLU_COL & lRow).Value) > 5 Then
                MsgBox "PLU limit is 5 characters.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(PLU_COL & lRow).Select
                End
            End If
    End Select

    '##########################################################################
    '# Case TUC Col S
    '# Conditions : 12/13 Digits
    '# 2010-11-03 CW: allow complete empty
    '# 2010-11-12 CW: If Inner TUC & its check digit are populated, then error if TUC is empty or dummy (000000000000)
    Select Case chkType
        Case "Asda", "Supplier"
            If Len(Range(CASE_TUC_COL & lRow).Value) > 0 Then
                If check_numeric(Range(CASE_TUC_COL & lRow).Value) = False Then
                    MsgBox "Case TUC allows only digits.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(CASE_TUC_COL & lRow).Select
                    End
                End If
                
                If Len(Range(CASE_TUC_COL & lRow).Value) > 13 Or _
                   Len(Range(CASE_TUC_COL & lRow).Value) = 0 Then
                    MsgBox "Case TUC must be 13 or fewer digits and cannot be blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(CASE_TUC_COL & lRow).Select
                    End
                End If
            End If
    
            If Len(Range(INNER_TUC_COL & lRow).Value) > 0 And _
               Len(Range(INNER_TUC_CHK_COL & lRow).Value) > 0 Then
                  If Len(Range(CASE_TUC_COL & lRow).Value) = 0 Or _
                     CStr(Range(CASE_TUC_COL & lRow).Value = "000000000000") Then
                        MsgBox "Case TUC cannot be empty or dummy if Inner TUC and Inner TUC Check Digit are not empty.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(CASE_TUC_COL & lRow).Select
                        End
                End If
            End If
    
    End Select

    '##########################################################################
    '# TUC Chk Digit Col T
    '# Conditions : Max 1 digit
    '# 2010-11-03 CW: force empty if TUC is empty, force numeric
    '# 2010-11-08 CW: allow empty if TUC is dummy (000000000000)
    '# 2010-11-12 CW: If Inner TUC & its check digit are populated, then error if TUC check digit is empty
    Select Case chkType
        Case "Asda", "Supplier"
            'If Len(Range(TUC_CHECK_COL & lRow).Value) > 0 Then
            If Len(Range(CASE_TUC_COL & lRow).Value) > 0 Then
                If CStr(Range(CASE_TUC_COL & lRow).Value <> "000000000000") Then
                    If (Len(Range(TUC_CHECK_COL & lRow).Value) <> 1) Or (Not check_numeric(Range(TUC_CHECK_COL & lRow).Value)) Then
                        MsgBox "TUC Check Digit must be 1 numeric character.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(TUC_CHECK_COL & lRow).Select
                        End
                    End If
                End If
            Else
                If Len(Range(TUC_CHECK_COL & lRow).Value) <> 0 Then
                    MsgBox "TUC Check Digit must be empty if TUC is empty.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(TUC_CHECK_COL & lRow).Select
                    End
                End If
            End If
    
            ' CW: This is unreachable at the moment due to the validation in Col S and the above validations, but keep it anyway for modularity
            If Len(Range(INNER_TUC_COL & lRow).Value) > 0 And _
               Len(Range(INNER_TUC_CHK_COL & lRow).Value) > 0 Then
                If Len(Range(TUC_CHECK_COL & lRow).Value) = 0 Then
                  MsgBox "Case TUC Check Digit cannot be empty if Inner TUC and Inner TUC Check Digit are not empty.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                  Range(TUC_CHECK_COL & lRow).Select
                  End
                End If
            End If
    
    End Select
    
    
    '##########################################################################
    '# Items per Case Col U
    '# Conditions : should = or be a multiple of Items Per Inner Pack (AB)
    '# 2010-11-12 CW: Not allow 0 or empty, must be numeric
    Select Case chkType
        Case "Asda", "Supplier"
        If check_numeric(Range(ITEMS_PER_CASE & lRow).Value) = False Or _
           Len(Range(ITEMS_PER_CASE & lRow).Value) = 0 Then
            MsgBox "Items per case must be entered and must be numeric digits.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
            Range(ITEMS_PER_CASE & lRow).Select
            End
        ElseIf Len(Range(WHS_PK_QTY_COL & lRow).Value) > 0 And check_numeric(Range(WHS_PK_QTY_COL & lRow).Value) = True Then
            If Range(WHS_PK_QTY_COL & lRow).Value <> 0 Then
                If Range(ITEMS_PER_CASE & lRow).Value Mod Range(WHS_PK_QTY_COL & lRow).Value <> 0 Then
                    MsgBox "Items per case must the same as or a multiple of Items per Inner Pack.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(ITEMS_PER_CASE & lRow).Select
                    End
                End If
            End If
        End If
    End Select
    
    
    '##########################################################################
    '# Supplier Pack Length  Col V
    '# Conditions : Digits only.  Max 2 decimal places
    Select Case chkType
        Case "Asda", "Supplier"
            If check_numeric(Range(SUPP_PACK_LENGTH_COL & lRow).Value) = False Or _
                Len(Range(SUPP_PACK_LENGTH_COL & lRow).Value) = 0 Then
                MsgBox "Supplier pack length allows only digits and cannot be blank.   Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(SUPP_PACK_LENGTH_COL & lRow).Select
                End
            End If
            
            If Range(SUPP_PACK_LENGTH_COL & lRow).Value <> "" Then
                iDecPlc = InStr(1, Range(SUPP_PACK_LENGTH_COL & lRow).Value, ".", vbTextCompare)
                If iDecPlc <> 0 Then
                    If Len(Range(SUPP_PACK_LENGTH_COL & lRow).Value) - iDecPlc > 2 Then
                        MsgBox "Supplier pack length allows only 2 decimal places.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(SUPP_PACK_LENGTH_COL & lRow).Select
                        End
                    End If
                End If
            End If
    End Select
    
    
    '##########################################################################
    '# Supplier Pack Width Col W
    '# Conditions : Digits only.  Max 2 decimal places.
    Select Case chkType
        Case "Asda", "Supplier"
            If check_numeric(Range(SUPP_PACK_WIDTH_COL & lRow).Value) = False Or _
                Len(Range(SUPP_PACK_WIDTH_COL & lRow).Value) = 0 Then
                MsgBox "Supplier pack width allows only digits and cannot be blank.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(SUPP_PACK_WIDTH_COL & lRow).Select
                End
            End If
            
            If Range(SUPP_PACK_WIDTH_COL & lRow).Value <> "" Then
                iDecPlc = InStr(1, Range(SUPP_PACK_WIDTH_COL & lRow).Value, ".", vbTextCompare)
                If iDecPlc <> 0 Then
                    If Len(Range(SUPP_PACK_WIDTH_COL & lRow).Value) - iDecPlc > 2 Then
                        MsgBox "Supplier pack width allows only 2 decimal places.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(SUPP_PACK_WIDTH_COL & lRow).Select
                        End
                    End If
                End If
            End If
    End Select
    
    '##########################################################################
    '# Supplier Pack Height Col X
    '# Conditions : Digits only.  Max 2 decimal places.
    Select Case chkType
        Case "Asda", "Supplier"
            If check_numeric(Range(SUPP_PACK_HEIGHT_COL & lRow).Value) = False Or _
                Len(Range(SUPP_PACK_HEIGHT_COL & lRow).Value) = 0 Then
                MsgBox "Supplier pack height allows only digits and cannot be blank.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(SUPP_PACK_HEIGHT_COL & lRow).Select
                    End
            End If
            
            If Range(SUPP_PACK_HEIGHT_COL & lRow).Value <> "" Then
                iDecPlc = InStr(1, Range(SUPP_PACK_HEIGHT_COL & lRow).Value, ".", vbTextCompare)
                If iDecPlc <> 0 Then
                    If Len(Range(SUPP_PACK_HEIGHT_COL & lRow).Value) - iDecPlc > 2 Then
                        MsgBox "Supplier pack height allows only 2 decimal places.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(SUPP_PACK_HEIGHT_COL & lRow).Select
                        End
                    End If
                End If
            End If
    End Select
    
    '##########################################################################
    '# Supplier Pack Weight Col Y
    '# Conditions : Digits only.  Max 2 decimal places.
    Select Case chkType
        Case "Asda", "Supplier"
            If check_numeric(Range(SUPP_PACK_WEIGHT_COL & lRow).Value) = False Or _
                Len(Range(SUPP_PACK_WEIGHT_COL & lRow).Value) = 0 Then
                MsgBox "Supplier pack weight allows only digits and cannot be blank.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(SUPP_PACK_WEIGHT_COL & lRow).Select
                    End
            End If
            
            If Range(SUPP_PACK_WEIGHT_COL & lRow).Value <> "" Then
                iDecPlc = InStr(1, Range(SUPP_PACK_WEIGHT_COL & lRow).Value, ".", vbTextCompare)
                If iDecPlc <> 0 Then
                    If Len(Range(SUPP_PACK_WEIGHT_COL & lRow).Value) - iDecPlc > 2 Then
                        MsgBox "Supplier pack weight allows only 2 decimal places.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(SUPP_PACK_WEIGHT_COL & lRow).Select
                        End
                    End If
                End If
            End If
    End Select
    
    '##########################################################################
    '# Inner TUC Col Z
    '# Conditions : 12/13 Digits
    '# 2010-11-03 CW: force entry if TUC is not empty
    '# 2010-11-09 CW: remove forcing
    Select Case chkType
        Case "Asda", "Supplier"
            If Len(Range(INNER_TUC_COL & lRow).Value) > 0 Then
                If check_numeric(Range(INNER_TUC_COL & lRow).Value) = False Then
                    MsgBox "Inner TUC allows only digits.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(INNER_TUC_COL & lRow).Select
                    End
                End If
    
                If Len(Range(INNER_TUC_COL & lRow).Value) > 13 Then
                    MsgBox "Inner TUC must be 13 or fewer digits or left empty.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(INNER_TUC_COL & lRow).Select
                    End
                End If
            'Else       ' 9/11/2010 removed on Rob's request
            '    If Len(Range(TUC_CHECK_COL & lRow).Value) > 0 Then
            '        MsgBox "Inner TUC must be provided if TUC is not empty.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
            '        Range(INNER_TUC_COL & lRow).Select
            '        End
            '    End If
            End If
    End Select
    
    '##########################################################################
    '# Inner TUC Chk Digit Col  AA
    '# Conditions : 1 Digits
    '# 2010-11-03 CW: force empty if TUC is empty
    Select Case chkType
        Case "Asda", "Supplier"
            If Len(Range(INNER_TUC_COL & lRow).Value) > 0 Then
                If check_numeric(Range(INNER_TUC_CHK_COL & lRow).Value) = False Then
                    MsgBox "Inner TUC Check Digit allows only digits.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(INNER_TUC_CHK_COL & lRow).Select
                    End
                End If
                
                'If Trim(Range(INNER_TUC_COL & lRow).Value) <> "" Then
                Select Case Len(Trim(Range(INNER_TUC_CHK_COL & lRow).Value))
                    Case 1, ""
                    Case Else
                        MsgBox "Inner TUC Check Digit must be 1 digit only.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(INNER_TUC_CHK_COL & lRow).Select
                        End
                End Select
                'End If
            Else
                If Len(Range(INNER_TUC_CHK_COL & lRow).Value) > 0 Then
                    MsgBox "Inner TUC Check Digit must be left empty if Inner TUC is empty.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(INNER_TUC_CHK_COL & lRow).Select
                    End
                End If
            End If
    End Select
    
    '##########################################################################
    '# Whse Pack Qty Col AB
    '# Conditions : Mandatory field.
    '# 2010-12-12 CW: Can be any number but not zero
    Select Case chkType
        Case "Supplier"
            If Len(Range(WHS_PK_QTY_COL & lRow).Value) > 0 Then
                If check_numeric(Range(WHS_PK_QTY_COL & lRow).Value) = False Then
                    MsgBox "Whse Pack Qty must be numeric, or left blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(WHS_PK_QTY_COL & lRow).Select
                    End
                ElseIf Range(WHS_PK_QTY_COL & lRow).Value = 0 Then
                    MsgBox "Whse Pack Qty can be any numbers but zero, or left blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(WHS_PK_QTY_COL & lRow).Select
                    End
                End If
            End If
    End Select
    
    
    
    '##########################################################################
    '# Whs Pack Length  Col AC
    '# Conditions : Digits only.  Max 2 decimal places
    Select Case chkType
        Case "Supplier"
            If check_numeric(Range(WHS_PK_LENGTH_COL & lRow).Value) = False Then
                MsgBox "Whse pack length allows only digits.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(WHS_PK_LENGTH_COL & lRow).Select
                End
            End If
            
            If Range(WHS_PK_LENGTH_COL & lRow).Value <> "" Then
                iDecPlc = InStr(1, Range(WHS_PK_LENGTH_COL & lRow).Value, ".", vbTextCompare)
                If iDecPlc <> 0 Then
                    If Len(Range(WHS_PK_LENGTH_COL & lRow).Value) - iDecPlc > 2 Then
                        MsgBox "Whse pack length allows only 2 decimal places.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(WHS_PK_LENGTH_COL & lRow).Select
                        End
                    End If
                End If
            End If
    End Select
    
    '##########################################################################
    '# Whs Pack Width Col AD
    '# Conditions : Digits only.  Max 2 decimal places.
    Select Case chkType
        Case "Supplier"
            If check_numeric(Range(WHS_PK_WIDTH_COL & lRow).Value) = False Then
                MsgBox "Whse pack width allows only digits.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(WHS_PK_WIDTH_COL & lRow).Select
                End
            End If
            
            If Range(WHS_PK_WIDTH_COL & lRow).Value <> "" Then
                iDecPlc = InStr(1, Range(WHS_PK_WIDTH_COL & lRow).Value, ".", vbTextCompare)
                If iDecPlc <> 0 Then
                    If Len(Range(WHS_PK_WIDTH_COL & lRow).Value) - iDecPlc > 2 Then
                        MsgBox "Whse pack width allows only 2 decimal places.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(WHS_PK_WIDTH_COL & lRow).Select
                        End
                    End If
                End If
            End If
    End Select
    
    '##########################################################################
    '# Whs Pack Height Col AE
    '# Conditions : Digits only.  Max 2 decimal places.
    Select Case chkType
        Case "Supplier"
            If check_numeric(Range(WHS_PK_HEIGHT_COL & lRow).Value) = False Then
                MsgBox "Whse pack height allows only digits.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(WHS_PK_HEIGHT_COL & lRow).Select
                    End
            End If
            
            If Range(WHS_PK_HEIGHT_COL & lRow).Value <> "" Then
                iDecPlc = InStr(1, Range(WHS_PK_HEIGHT_COL & lRow).Value, ".", vbTextCompare)
                If iDecPlc <> 0 Then
                    If Len(Range(WHS_PK_HEIGHT_COL & lRow).Value) - iDecPlc > 2 Then
                        MsgBox "Whse pack height allows only 2 decimal places.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(WHS_PK_HEIGHT_COL & lRow).Select
                        End
                    End If
                End If
            End If
    End Select
    
    '##########################################################################
    '# Whs Pack Weight Col AF
    '# Conditions : Digits only.  Max 2 decimal places.
    Select Case chkType
        Case "Supplier"
            If check_numeric(Range(WHS_PK_WEIGHT_COL & lRow).Value) = False Then
                MsgBox "Whse pack weight allows only digits.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(WHS_PK_WEIGHT_COL & lRow).Select
                    End
            End If
            
            If Range(WHS_PK_WEIGHT_COL & lRow).Value <> "" Then
                iDecPlc = InStr(1, Range(WHS_PK_WEIGHT_COL & lRow).Value, ".", vbTextCompare)
                If iDecPlc <> 0 Then
                    If Len(Range(WHS_PK_WEIGHT_COL & lRow).Value) - iDecPlc > 2 Then
                        MsgBox "Whse pack weight allows only 2 decimal places.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(WHS_PK_WEIGHT_COL & lRow).Select
                        End
                    End If
                End If
            End If
    End Select
    
    '##########################################################################
    '# Pallet TI Col AG
    '# Conditions : Digits only.
    Select Case chkType
        Case "Asda", "Supplier"
            If check_numeric(Range(PALLET_TI_COL & lRow).Value) = False Or _
             Len(Range(PALLET_TI_COL & lRow).Value) = 0 Then
                MsgBox "Pallet TI allows only digits and cannot be blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(PALLET_TI_COL & lRow).Select
                    End
            End If
    End Select
    
    '##########################################################################
    '# Pallet HI Col AH
    '# Conditions : Digits only.
    Select Case chkType
        Case "Asda", "Supplier"
            If check_numeric(Range(PALLET_HI_COL & lRow).Value) = False Or _
             Len(Range(PALLET_HI_COL & lRow).Value) = 0 Then
                MsgBox "Pallet HI allows only digits and cannot be blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(PALLET_HI_COL & lRow).Select
                    End
            End If
    End Select
    
    
    
    
    
    
    
    '##########################################################################
    '# Pallet Round Col AI
    '# Conditions : Digits only.
    Select Case chkType
        Case "Asda"
            If check_numeric(Range(PALLET_ROUND_COL & lRow).Value) = False Then
                MsgBox "Pallet Round allows only digits.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(PALLET_ROUND_COL & lRow).Select
                    End
            End If
    End Select
    
    '##########################################################################
    '# Whse Area Col AJ
    '# Conditions : Digits only.
    '# 2010-11-04 CW: Not to accept 1 as input, i.e. 2-8 only
    Select Case chkType
        Case "Asda"
            If check_numeric(Range(WHSE_AREA_COL & lRow).Value) = False Or _
                Len(Range(WHSE_AREA_COL & lRow).Value) = 0 Then
                MsgBox "Whse Area allows only digits and cannot be blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(WHSE_AREA_COL & lRow).Select
                    End
            End If
            Select Case Range(WHSE_AREA_COL & lRow).Value
                Case 2 To 8
                Case Else
                    MsgBox "Warehouse Area number should be between 2 and 8.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(WHSE_AREA_COL & lRow).Select
                    End
            End Select
    End Select
    
    '##########################################################################
    '# Conveyer Belt Col AK
    '# Conditions : Empty/Y/N only
    Select Case chkType
        Case "Asda", "Supplier"
            Select Case UCase(Trim(Range(CONV_BELT_COL & lRow).Value))
                Case "", "Y", "N"
                Case Else
                    MsgBox "Convey belt must be Y or N.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(CONV_BELT_COL & lRow).Select
                    End
            End Select
    End Select
    
    '##########################################################################
    '# Crushable Col AL
    '# Conditions : Empty,1,2,3 only
    '# 2010-11-03 CW: Allow empty
    Select Case chkType
        Case "Asda"
            If Len((Range(CRUSH_COL & lRow).Value)) > 0 Then
                Select Case UCase(Range(CRUSH_COL & lRow).Value)
                    Case "1", "2", "3"
                    Case Else
                        MsgBox "Crushable must be 1,2 or 3.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(CRUSH_COL & lRow).Select
                        End
                End Select
            End If
    End Select
    
    '##########################################################################
    '# Whs Rotation Col AM
    '# Conditions : Empty,1,2 only
    '# 2010-11-03 CW: Allow empty
    Select Case chkType
        Case "Asda"
            If Len((Range(WHSE_ROT_COL & lRow).Value)) > 0 Then
                Select Case UCase(Range(WHSE_ROT_COL & lRow).Value)
                    Case "1", "2"
                    Case Else
                        MsgBox "Whse Rotation must be 1 or 2.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(WHSE_ROT_COL & lRow).Select
                        End
                End Select
            End If
    End Select
    
    '##########################################################################
    '# Supplier Pack Cost Col AN
    '# Conditions : Digits only.
    '# 2010-11-03 CW: Do not allow empty
    Select Case chkType
        Case "Asda", "Supplier"
            If check_numeric(Range(SUPP_PK_COST_COL & lRow).Value) = False Or _
                Len(Range(SUPP_PK_COST_COL & lRow).Value) = 0 Then
                MsgBox "Supplier Pack Cost allows only digits and cannot be blank.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(SUPP_PK_COST_COL & lRow).Select
                    End
            End If
    End Select
    
    
    '##########################################################################
    '# Customer Base Unit Retail Col AO
    '# Conditions : Digits only.  Max 2 decimal places.
    Select Case chkType
        Case "Asda", "sel"
            If check_numeric(Range(PRICE_COL & lRow).Value) = False Or _
                Len(Range(PRICE_COL & lRow).Value) = 0 Then
                MsgBox "Customer Base Unit Retail allows only digits and cannot be blank.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(PRICE_COL & lRow).Select
                    End
            End If
            
            If Range(PRICE_COL & lRow).Value <> "" Then
                iDecPlc = InStr(1, Range(PRICE_COL & lRow).Value, ".", vbTextCompare)
                If iDecPlc <> 0 Then
                    If Len(Range(PRICE_COL & lRow).Value) - iDecPlc > 2 Then
                        MsgBox "Customer Base Unit Retail allows only 2 decimal places.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(PRICE_COL & lRow).Select
                        End
                    End If
                End If
            End If
    End Select
    
    
    '##########################################################################
    
    
    
    '##########################################################################
    '# Price Col AP
    '# 13-11-2012: Validate Unit Cost
    '##########################################################################
    Select Case chkType
       Case "Asda"
       Dim SupplierPackUnitCost
       Dim RetailPrice
       Dim Response
       
       If Range(ITEMS_PER_CASE & lRow).Value = 0 Then
       Response = MsgBox("Supplier Pack Qty is Zero. Unit Cost Validations are not possible. Click OK to continue or CANCEL to amend Supplier Pack Qty.", vbInformation + vbOKCancel, "Warning")
               If (Response = vbCancel) Then
                    Range(ITEMS_PER_CASE & lRow).Select
                    End
                    End If
        ElseIf Range(PRICE_COL & lRow).Value = 0 Then
       Response = MsgBox("Customer Base Unit Retail is Zero. Unit Cost Validations are not possible. Click OK to continue or CANCEL to amend Customer Base Unit Retail.", vbInformation + vbOKCancel, "Warning")
               If (Response = vbCancel) Then
                    Range(PRICE_COL & lRow).Select
                    End
                    End If
        Else
       SupplierPackUnitCost = Range(SUPP_PK_COST_COL & lRow).Value / Range(ITEMS_PER_CASE & lRow).Value
       RetailPrice = Range(PRICE_COL & lRow).Value
       '27-02-2013 smanjil: - Changed as per Rob Onions - Supplier Pack to retail and retail to supplier pack should both be checked to be within +/-150%.
            If Abs(((RetailPrice - SupplierPackUnitCost) / RetailPrice) * 100) > 150 Or Abs(((RetailPrice - SupplierPackUnitCost) / SupplierPackUnitCost) * 100) > 150 Then
               Response = MsgBox("Are you aware that unit cost will  be more than / less than +150% or -150% for this item. Click Yes to continue or NO to amend cost or retail price?", vbInformation + vbYesNo, "Warning")
               If (Response = vbNo) Then
                    Range(PRICE_COL & lRow).Select
                    End
                    End If
                    
            End If
            End If
            
    End Select
    '##########################################################################
    
    '##########################################################################
    '# Mfgr Pre Price Col AP
    '# Conditions : Digits only.
    Select Case chkType
        Case "Supplier"
            If check_numeric(Range(MFGR_PRE_COL & lRow).Value) = False Then
                MsgBox "Mfgr Pre Price allows only digits.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(MFGR_PRE_COL & lRow).Select
                    End
            End If
    End Select
    '##########################################################################
    '# Mfgr Suggested Price Col AQ
    '# Conditions : Digits only.
    Select Case chkType
        Case "Supplier"
            If check_numeric(Range(MFGR_SUGG_COL & lRow).Value) = False Then
                MsgBox "Mfgr Suggested Retail allows only digits.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(MFGR_SUGG_COL & lRow).Select
                    End
            End If
    End Select
    
    '##########################################################################
    '# Tax Item Class Col AR
    '# Conditions : Restricted entry.
    Select Case chkType
        Case "Asda"
            Select Case UCase(Range(TAX_COL & lRow).Value)
                Case "A", "B", "F", "G", "W", "X", "R", "H"
                Case Else
                    MsgBox "Tax Item Class must be 'A', 'B', 'F', 'G', 'W', 'X', 'R', 'H'.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(TAX_COL & lRow).Select
                    End
            End Select
    End Select
    
    '##########################################################################
    '# Cost Avg Col AS
    '# Conditions : Must be Empty or R
    Select Case chkType
        Case "Asda"
        Select Case UCase(Range(COST_AVG_COL & lRow).Value)
            Case "", "R"
            Case Else
                MsgBox "Cost Avg must be 'R'.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(COST_AVG_COL & lRow).Select
                End
        End Select
    End Select
    
    '##########################################################################
    '# Department Col AT
    '# Conditions : 2 digits.
    Select Case chkType
        Case "Asda"
            If check_numeric(Range(DEPT_COL & lRow).Value) = False Then
                MsgBox "Department allows only digits.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(DEPT_COL & lRow).Select
                    End
            End If
            If Len(Range(DEPT_COL & lRow).Value) > 2 Or _
                Len(Range(DEPT_COL & lRow).Value) = 0 Then
                MsgBox "Department must be a maximum of 2 characters and cannot be blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(DEPT_COL & lRow).Select
                End
            End If
            Select Case Range(DEPT_COL & lRow).Value
                Case Is < 1, Is > 99, 19, 56, 70
                    MsgBox "Invalid value for department.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(DEPT_COL & lRow).Select
                    End
            End Select
            
    End Select
    
    '##########################################################################
    '# Supplier # Col AU
    '# Conditions : 9 digits.
    Select Case chkType
        Case "Asda"
            If check_numeric(Range(SUPPLIER_COL & lRow).Value) = False Then
                MsgBox "Supplier Number allows only digits.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(SUPPLIER_COL & lRow).Select
                    End
            End If
            If Len(Range(SUPPLIER_COL & lRow).Value) > 9 Or _
                Len(Range(SUPPLIER_COL & lRow).Value) = 0 Then
                MsgBox "Supplier Number must be a maximum of 9 characters and cannot be blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(SUPPLIER_COL & lRow).Select
                End
            End If
    End Select
    
    '##########################################################################
    '# Item Type Col AV
    '# Conditions : Restricted entry.
    Select Case chkType
        Case "Asda"
            Select Case UCase(Range(ITEM_TYPE_COL & lRow).Value)
                Case "3", "7", "03", "07", "20", "33", "37", "40", "43"
                Case Else
                    MsgBox "Item Type must be '03', '07', '20', '33', '37', '40', '43'.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(ITEM_TYPE_COL & lRow).Select
                    End
            End Select
    End Select
    
    '##########################################################################
    '# Item Sub Type Col AW
    '# Conditions : Restricted entry.
    Select Case chkType
        Case "Asda"
            Select Case UCase(Range(ITEM_SUB_TYPE_COL & lRow).Value)
                Case "0", "00", "97", "20"
                Case Else
                    MsgBox "Item Sub Type must be '00', '97', '20'.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(ITEM_SUB_TYPE_COL & lRow).Select
                    End
            End Select
    End Select
    
    '##########################################################################
    '# Commodity Col AX
    '# Conditions : Must be 00
    Select Case chkType
        Case "Asda"
            Select Case UCase(Range(COMM_COL & lRow).Value)
                Case "", "00"
                Case Else
                    MsgBox "Commodity must be '00'.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(COMM_COL & lRow).Select
                    End
            End Select
    End Select
    
    '##########################################################################
    '# PPG Col AY
    '# Conditions : Mandatory
    Select Case chkType
        Case "Asda"
            If Range(PPG_COL & lRow).Value = "" Then
                MsgBox "PPG is a mandatory entry.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(PPG_COL & lRow).Select
                End
            End If
    End Select
    
    '##########################################################################
    '# Projected Yearly Sales  Col BB
    '# Conditions : Mandatory
    Select Case chkType
        Case "Asda"
            If Range(PROJ_SALES_COL & lRow).Value = "" Then
                MsgBox "Projected Yearly Sales is a mandatory entry.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(PROJ_SALES_COL & lRow).Select
                End
            End If
    End Select


    '##########################################################################
    '# Send to Store Date Col BC
    '# Conditions : Mandatory
    '# 2010-11-03 CW: Do not error Fri/Sat if VAT code is A
    '# 2010-11-12 CW: Now error Fri/Sat if VAT code is A too :|
    Select Case chkType
        Case "Asda"
            If Len(Range(SEND_TO_STORE & lRow).Value) = 0 Or _
                Not IsDate(Range(SEND_TO_STORE & lRow).Value) Then
                MsgBox "Send to store date is a mandatory entry.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(SEND_TO_STORE & lRow).Select
                End
            End If
            'If UCase(Range(TAX_COL & lRow).Value) <> "A" Then
                Select Case Weekday(Range(SEND_TO_STORE & lRow).Value)
                    Case 6, 7
                    MsgBox "Send to store date cannot be Friday or Saturday.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(SEND_TO_STORE & lRow).Select
                    End
                End Select
            'End If
    End Select

    '##########################################################################
    '# Item Effective Date Col BD
    '# Conditions : Mandatory
    '# 2010-11-03 CW: Error if Sat/Sun
    Select Case chkType
        Case "Asda"
            If Len(Range(ITEM_EFF_DATE & lRow).Value) = 0 Or _
                Not IsDate(Range(ITEM_EFF_DATE & lRow).Value) Then
                MsgBox "Item effective date is a mandatory entry.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(ITEM_EFF_DATE & lRow).Select
                End
            End If
            If Range(ITEM_EFF_DATE & lRow).Value < Range(SEND_TO_STORE & lRow).Value + 2 Then
                MsgBox "Item effective date must be at least 2 days greater than send to store date.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(ITEM_EFF_DATE & lRow).Select
                End
            End If
                Select Case Weekday(Range(ITEM_EFF_DATE & lRow).Value)
                    Case 1, 7
                    MsgBox "Item Effective date cannot be Saturday or Sunday.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(ITEM_EFF_DATE & lRow).Select
                    End
            End Select
    End Select

    '##########################################################################
    '# Performance Rating  Col BF
    '# Conditions : Mandatory
'    Select Case chkType
'        Case "Asda"
'            If Range(PERF_RATING_COL & lRow).Value = 0 Then
'                MsgBox "Performance rating must not be 0.  Checking will now stop", vbExclamation + vbOKOnly, "Please fix"
'                Range(PERF_RATING_COL & lRow).Select
'                End
'            End If
        
'            If Range(PERF_RATING_COL & lRow).Value = "" Then
'                MsgBox "Performance rating should be 3.  Are you sure you want to differ?.", vbExclamation + vbOKOnly, "Please fix"
'                Range(PERF_RATING_COL & lRow).Select
'                'End - not enforced beyond a suggestion
'            End If
'    End Select
        
    '##########################################################################
    '# Replenishable Order Book Col BG
    '# Conditions : Empty/Y/N only
    Select Case chkType
        Case "Asda"
            Select Case UCase(Range(REPLEN_COL & lRow).Value)
                Case "", "Y", "N"
                Case Else
                    MsgBox "Replenishable Order Book must be Y or N.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(REPLEN_COL & lRow).Select
                    End
            End Select
    End Select
    
    '##########################################################################
    '# Supplier Lead Time Col BH
    '# Conditions : Digits only.
    '# 2010-11-03 CW: Error if >365
    Select Case chkType
        Case "Asda", "Supplier"
            If check_numeric(Range(SUPP_LEAD_COL & lRow).Value) = False Then
                MsgBox "Supplier Lead Time allows only digits.  Exclude unit of measure.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(SUPP_LEAD_COL & lRow).Select
                    End
            End If
            
            If Range(SUPP_LEAD_COL & lRow).Value > 365 Then
                MsgBox "Supplier Lead Time cannot be > 365.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(SUPP_LEAD_COL & lRow).Select
                End
            End If
    End Select
    
    '##########################################################################
    '# Exclusive Supply DC Number Col BI
    '# Conditions : Must be empty
    Select Case chkType
        Case "Asda"
            If Range(EX_SUPP_COL & lRow).Value <> "" Then
                MsgBox "Exclusive Supply DC Number must be left blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(EX_SUPP_COL & lRow).Select
                    End
            End If
    End Select
    
    '##########################################################################
    '# Item Replaces Col BL
    '# Conditions :
    '# 2010-11-03 CW: Error if left blank when Reason code is 5
    Select Case chkType
        Case "Asda"
            If Range(CHANGE_REASON_COL & lRow).Value = 5 Then
                If Len(Range(ITEM_REPL_COL & lRow).Value) = 0 Then
                    MsgBox "Item Replaces cannot be empty or blank if Change Reason is 5.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(ITEM_REPL_COL & lRow).Select
                    End
                End If
            
                If Not check_numeric(Range(ITEM_REPL_COL & lRow).Value) Then
                    MsgBox "Item Replaces must contain only numeric digits.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(ITEM_REPL_COL & lRow).Select
                    End
                End If
            End If
    End Select
    
    
    '##########################################################################
    '# Change Reason Code Col BM
    '# Conditions : Restricted entry.
    Select Case chkType
        Case "Asda"
            Select Case UCase(Range(CHANGE_REASON_COL & lRow).Value)
                Case "2", "3", "4", "5", "7", "8"
                Case Else
                    MsgBox "Change reason code must be '2', '3', '4', '5', '7', '8'.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(CHANGE_REASON_COL & lRow).Select
                    End
            End Select
    End Select
    
    '##########################################################################
    '# Comment Col BN
    '# Conditions : No special characters.  Max 60 characters.
    '# removed 2009-07-08 as per RO instrruction
'    If allowed_characters(Range(COMMENT_COL & lRow).Value) = False Then
'        MsgBox "Comment doesn't allow any special characters (e.g. !""|fffd|$%^&*).  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
'        Range(COMMENT_COL & lRow).Select
'        End
'    End If
'
'    If Len(Range(COMMENT_COL & lRow).Value) > 60 Then
'        MsgBox "Comment limit is 60 characters.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
'        Range(COMMENT_COL & lRow).Select
'        End
'    End If
'
    
    
    
    
    
    '##########################################################################
    '# Item Length Qty Col BO
    '# Conditions : Must be numeric
    Select Case chkType
        Case "Supplier"
            If check_numeric(Range(ITEM_LENGTH_COL & lRow).Value) = False Then
                MsgBox "Item Length allows only digits.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(ITEM_LENGTH_COL & lRow).Select
                    End
            End If
'            If Range(ITEM_LENGTH_COL & lRow).Value <> "" Then
'                MsgBox "Item Length Qty must be left blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
'                    Range(ITEM_LENGTH_COL & lRow).Select
'                    End
'            End If
            
    End Select
    
    '##########################################################################
    '# Item Width Qty Col BP
    '# Conditions : Must be numeric
    Select Case chkType
        Case "Supplier"
            If check_numeric(Range(ITEM_WIDTH_COL & lRow).Value) = False Then
                MsgBox "Item Width allows only digits.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(ITEM_WIDTH_COL & lRow).Select
                    End
            End If
'            If Range(ITEM_WIDTH_COL & lRow).Value <> "" Then
'                MsgBox "Item Width Qty must be left blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
'                    Range(ITEM_WIDTH_COL & lRow).Select
'                    End
'            End If
    End Select
    '##########################################################################
    '# Item Height Qty Col BQ
    '# Conditions : Must be numeric
    Select Case chkType
        Case "Supplier"
            If check_numeric(Range(ITEM_HEIGHT_COL & lRow).Value) = False Then
                MsgBox "Item Height allows only digits.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(ITEM_HEIGHT_COL & lRow).Select
                    End
            End If
'            If Range(ITEM_HEIGHT_COL & lRow).Value <> "" Then
'                MsgBox "Item Height Qty must be left blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
'                    Range(ITEM_HEIGHT_COL & lRow).Select
'                    End
'            End If
    End Select
    
    '##########################################################################
    '# Item Weight Qty Col BR
    '# Conditions : Must be empty
    Select Case chkType
        Case "Supplier"
            If Range(ITEM_WEIGHT_COL & lRow).Value <> "" Then
                MsgBox "Item Weight Qty must be left blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(ITEM_WEIGHT_COL & lRow).Select
                    End
            End If
    End Select
    
    '##########################################################################
    '# Life Into Store Col CE
    '# Conditions :
    '# 2010-11-03 CW: Error if > Depot Life
    Select Case chkType
        Case "Asda", "Supplier"
            If Len(Range(LIFE_STORE_COL & lRow).Value) > 0 Then
                If Not check_numeric(Range(LIFE_STORE_COL & lRow).Value) Then
                    MsgBox "Life Into Store must be numeric or empty.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(LIFE_STORE_COL & lRow).Select
                    End
                ElseIf check_numeric(Range(LIFE_DEPOT_COL & lRow).Value) Or Len(Range(LIFE_DEPOT_COL & lRow).Value) = 0 Then
                    If CInt(Range(LIFE_STORE_COL & lRow).Value) > CInt(Range(LIFE_DEPOT_COL & lRow).Value) Then
                        MsgBox "Life Into Store cannot be > Depot Life.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                        Range(LIFE_STORE_COL & lRow).Select
                        End
                    End If
                End If
            End If
    End Select
    
    '##########################################################################
    '# Depot Life Col CF
    '# Conditions :
    '# 2010-11-03 CW: Error if not numeric or > limit (parameterised)
    Select Case chkType
        Case "Asda", "Supplier"
            If Not check_numeric(Range(LIFE_DEPOT_COL & lRow).Value) Then
                MsgBox "Depot Life must be numeric.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(LIFE_DEPOT_COL & lRow).Select
                End
            ElseIf Range(LIFE_DEPOT_COL & lRow).Value > LIFE_DEPOT_LIMIT Then
                MsgBox "Depot Life cannot be > " & LIFE_DEPOT_LIMIT & ".  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(LIFE_DEPOT_COL & lRow).Select
                End
            End If
    End Select

    '##########################################################################
    '# Marshalling Area Col CI
    '# Conditions :
    '# 2010-11-04 CW: Error if not empty if Item Type is 33
    '# 2010-11-08 CW: Error if empty and Item Type is 33 - change of mind
    Select Case chkType
        Case "Asda"
            If Len(Range(MARSH_AREA_COL & lRow).Value) > 0 Then
                If Not check_numeric(Range(MARSH_AREA_COL & lRow).Value) Then
                    MsgBox "Marshalling Area must be numeric.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(MARSH_AREA_COL & lRow).Select
                    End
                End If
            Else
                If Trim(CStr(Range(ITEM_TYPE_COL & lRow).Value)) = "33" Then
                    MsgBox "Marshalling Area must be entered if Item Type is 33.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(MARSH_AREA_COL & lRow).Select
                    End
                End If
            End If
    End Select

    '##########################################################################
    '# Country of Origin Col CS
    '# Conditions :
    '# 2010-11-04 CW: Error if not in the 'CountryLookup' range (public Range var COUNTRY_LOOKUP)
    Select Case chkType
        Case "Asda", "Supplier"
            If Len(Range(COUNTRY_COL & lRow).Value) = 0 Then
                    'if is blank error straight away
                MsgBox "Country Of Origin must not be blank.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(COUNTRY_COL & lRow).Select
                End
            Else
                Dim r As Range
                Dim ok As Boolean
                ok = False
                
                If InStr(UCase(CStr(Range(COUNTRY_COL & lRow).Value)), ";") <> 0 Then
                    'if is multi country run multi country function
                    ok = MultiCoOCIsOK(UCase(CStr(Range(COUNTRY_COL & lRow).Value)))
                Else
                    For Each r In COUNTRY_LOOKUP.Rows
                        If UCase(CStr(Range(COUNTRY_COL & lRow).Value)) = UCase(CStr(r.Columns(1).Value)) Then
                            ok = True
                            Exit For
                        End If
                    Next
                End If
            End If
            If ok = False Then
                MsgBox "Country Of Origin must be one of those in the '" & COUNTRY_SHEET & "' worksheet.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                Range(COUNTRY_COL & lRow).Select
                End
            End If

    End Select

    '##########################################################################
    '# Factory ID
    '# Conditions : If specified, can not be characters A-Z
    Select Case chkType
        Case "Asda", "Supplier"
            If Not not_A_Z(Range(FACTORY_ID & lRow).Value) Then
                MsgBox "Factory ID must be numeric with ',' or ';' only.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(FACTORY_ID & lRow).Select
                    End
                End If
'            If Not check_numeric(Range(FACTORY_ID & lRow).Value) Then
'                MsgBox "Factory ID must be numeric.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
'                    Range(FACTORY_ID & lRow).Select
'                    End
'                End If
'            If Len(Range(FACTORY_ID & lRow).Value) > 8 Then
'                MsgBox "Factory ID cannot be more than 8 characters.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
'                    Range(FACTORY_ID & lRow).Select
'                    End
'            End If
    End Select
    '##########################################################################
    
    '##########################################################################
    '# Extended Size COL DJ
    '# Conditions : Value between 0.01 and 9999.99
    '# 2012-11-20: Added
    Select Case chkType
        Case "Asda"
        If Range(DEPT_COL & lRow).Value = 67 Or Range(DEPT_COL & lRow).Value = 68 Or Range(DEPT_COL & lRow).Value = 96 Then
        
        If Range(EXTENDED_SIZE & lRow).Value > 9999.99 Or Range(EXTENDED_SIZE & lRow).Value < 0.01 Then
                    MsgBox "Extended Size is mandatory and requires a value between 0.01 and 9999.99.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(EXTENDED_SIZE & lRow).Select
                    End
            End If
            ElseIf (Not IsEmpty(Range(EXTENDED_SIZE & lRow).Value) And Not Range(EXTENDED_SIZE & lRow).Value = 0) Then
              MsgBox "Extended Size is invalid if Department is not 67, 68 or 96.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
              Range(EXTENDED_SIZE & lRow).Select
              End
              End If
    End Select
    '##########################################################################
    
    '##########################################################################
    '# ALCOHOL_BY_VOLUME COL DK
    '# Conditions : Value between 0.01 and 999.99
    '# 2012-11-20: Added
    Select Case chkType
        Case "Asda", "Supplier"
        If Range(DEPT_COL & lRow).Value = 67 Or Range(DEPT_COL & lRow).Value = 68 Or Range(DEPT_COL & lRow).Value = 96 Then
        If Range(ALCOHOL_BY_VOLUME & lRow).Value > 999.99 Or Range(ALCOHOL_BY_VOLUME & lRow).Value < 0.01 Then
                    MsgBox "Alcohol by volume is mandatory and requires a value between 0.01 and 9999.99. Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(ALCOHOL_BY_VOLUME & lRow).Select
                    End
            End If
            ElseIf (Not IsEmpty(Range(ALCOHOL_BY_VOLUME & lRow).Value) And Not Range(ALCOHOL_BY_VOLUME & lRow).Value = 0) Then
              MsgBox "Alcohol by volume is invalid if Department is not 67, 68 or 96.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
              Range(ALCOHOL_BY_VOLUME & lRow).Select
              End
              End If
    End Select
    '##########################################################################
    
  '##########################################################################
    '# PACK_SIZE COL DL
    '# Conditions : Value between 1 and 999
    '# 2012-11-20: Added
    Select Case chkType
        Case "Asda"
        If Range(DEPT_COL & lRow).Value = 67 Or Range(DEPT_COL & lRow).Value = 68 Or Range(DEPT_COL & lRow).Value = 96 Then
        If Range(PACK_SIZE & lRow).Value > 999 Or Range(PACK_SIZE & lRow).Value < 1 Then
                    MsgBox "Pack Size is mandatory and requires a value between 1 and 999.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                    Range(PACK_SIZE & lRow).Select
                    End
            End If
            ElseIf (Not IsEmpty(Range(PACK_SIZE & lRow).Value) And Not Range(PACK_SIZE & lRow).Value = 0) Then
              MsgBox "Pack Size is invalid if Department is not 67, 68 or 96.  Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
              Range(PACK_SIZE & lRow).Select
              End
            End If
    End Select
    '##########################################################################
    
    '##########################################################################
    '# Consideration Code
    '# Conditions : Consideration Code should be less than 5 or value is comma separated.
    Select Case chkType
    Case "Asda"
        Dim lngth As Integer
        Dim avarSplit As Variant
        Dim intIndex As Integer
        
        lngth = Len(Range(Consideration_Code & lRow).Value)
    
       ' Validation to check whether Cell value is greater than 5
        If lngth > 0 Then
            avarSplit = Split(Range(Consideration_Code & lRow).Value, ",")
            For intIndex = LBound(avarSplit) To UBound(avarSplit)
                If avarSplit(intIndex) > 5 Or avarSplit(intIndex) <= 0 Then
                     MsgBox "Consideration code only allows numeric's between 1 and 5 divided by "","" if more than one e.g. 1,2,3. Checking will now stop.", vbExclamation + vbOKOnly, "Please fix"
                     Range(Consideration_Code & lRow).Select
                     End
                 End If
            Next
        End If
    End Select
    '##########################################################################
    '# Item Restriction
    '# Conditions : Item Restricts the value "Y" or "y"
    Select Case chkType
        Case "Asda", "Supplier"
        
            If Trim(Range(Item_Restriction & lRow).Value) = "Y" Or Trim(Range(Item_Restriction & lRow).Value) = "y" Then
           
                MsgBox "This item requires a restriction please send a request to ""Restriction Requests"" email address", vbInformation + vbOKOnly, "Warning"
                    Range(Item_Restriction & lRow).Select
            End If
    End Select
    
End Sub
'##########################################################################
    
    



'#
'#  sel_preview_start - notes
'#  -------------------------
'#
'#  Comments    Runs when user requests to view an SEL
'#
'#
'#  Date                Author              Action
'#  ===========================================================================
'#  23-Oct-06       Kevin Morris        Created
'#  2006-12-18      Kevin Morris        Copy Shelf Desc (D) to POS(O) if POS(O) is blank
'#  2009-07-08      Kevin Morris        Modified to allow multiple sel previews
'#  2010-11-02      Charles Wong        Modified for new SEL format
'#  2010-11-04      Charles Wong        Implemented UOM mapping
'#  ===========================================================================
Sub sel_preview_start()
Attribute sel_preview_start.VB_ProcData.VB_Invoke_Func = " \n14"

' Populate Params
Call populate_params

Dim iRow As Long
Dim blnVarSize As Boolean
Dim ians As Integer

    ians = MsgBox("Preview one (YES) or all (NO)?", vbQuestion + vbYesNo, "What would you like to do?")
    
    '# go to the top of the list
    If ians = vbNo Then
        [a4].Select
    End If
    
    'Do Until Range("A" & ActiveCell.Column).Address = ""
    Do Until Range("A" & ActiveCell.Row).Address = ""
    
        iRow = ActiveCell.Row
    
        '# run validation first
        Call validate_me(iRow, "sel")
    
        '# load the form
        Load fSEL
    
        '# assign the values to the form elements
        With fSEL
        
            '#  If POS has been left blank then copy ShelfDesc data over
            If Range(POS_COL & "$" & iRow).Value = "" Then
                Range(POS_COL & "$" & iRow).Value = Range(SHELF_DESCRIPTION_COL & "$" & iRow).Value
            End If
        
            '# shelf description
            If UCase(Range(SHELF_DESCRIPTION_COL & "$" & iRow).Value) = UCase(Range(POS_COL & "$" & iRow).Value) And _
                Not allowed_characters(Range(SHELF_DESCRIPTION_COL & "$" & iRow).Value) Then
                
                .lblShelfDesc.Caption = replace_special(Range(SHELF_DESCRIPTION_COL & "$" & iRow).Value)
                .lblVariety = Range(POS_COL & "$" & iRow).Value
                '.lblSize = ""
                
                blnVarSize = True
                
            ElseIf allowed_characters(Range(SHELF_DESCRIPTION_COL & "$" & iRow).Value) Then
                .lblShelfDesc.Caption = Range(SHELF_DESCRIPTION_COL & "$" & iRow).Value
            End If
            
            If Not blnVarSize Then
                '#  Variety
                '# If POS_COL <> SHELF_DESCRIPTION_COL then override Variety & Size with chars 1-20 and 21-40 from
                '#  POS
                If UCase(Range(POS_COL & "$" & iRow).Value) <> UCase(Range(SHELF_DESCRIPTION_COL & "$" & iRow).Value) Then
    
                    '# override variety
                    .lblVariety.Caption = Left(Range(POS_COL & "$" & iRow).Value, 20) & " " & Application.WorksheetFunction.Proper(Mid(Range(POS_COL & "$" & iRow).Value, 21, 19))
                    
                    '# override size
                    '.lblSize.Caption = Application.WorksheetFunction.Proper(Mid(Range(POS_COL & "$" & iRow).Value, 21, 19))
                Else
                    '# variety
                    .lblVariety.Caption = Range(VARIETY_COL & "$" & iRow).Value & " " & Application.WorksheetFunction.Proper(Range(SIZE_COL & "$" & iRow).Value)
                    '# size
                    '.lblSize.Caption = Application.WorksheetFunction.Proper(Range(SIZE_COL & "$" & iRow).Value)
                End If
            End If
        
        
            ' Lookup the conversion ration between UOM and comparison UOM
            Dim uomRatio As Single
            Dim uomDisp As String
            Dim r As Range
            Dim matched As Boolean
        
            ' set defaults
            uomRatio = 1
            uomDisp = Left(LCase(Range(PRICE_COMP_UOM_COL & "$" & iRow).Value), 2)
            matched = False
            
            For Each r In UOM_LOOKUP.Rows
                If UCase(CStr(Range(UNIT_SIZE_UOM_COL & "$" & iRow).Value)) = UCase(CStr(r.Columns(2).Value)) And _
                   UCase(CStr(Range(PRICE_COMP_UOM_COL & "$" & iRow).Value)) = UCase(CStr(r.Columns(5).Value)) Then
                    matched = True
                    uomRatio = r.Columns(7).Value
                    uomDisp = CStr(r.Columns(8).Value)
                    Exit For
                End If
            Next
            
            'MsgBox "uomRatio=" & uomRatio & " uomDisp=" & uomDisp
            
            '# Price/Size Comparison
            'If Range(PRICE_COMP_QTY_COL & "$" & iRow).Value = "" Or _
            '   Range(PRICE_COMP_QTY_COL & "$" & iRow) = 1 Then
            '    If UCase(Range(UNIT_SIZE_UOM_COL & "$" & iRow).Value) <> "EA" Then
            '        .lblSizeComp = Left(LCase(Range(PRICE_COMP_UOM_COL & "$" & iRow).Value), 2)
            '        '.lblSizeComp = "Per " & Left(LCase(Range(PRICE_COMP_UOM_COL & "$" & iRow).Value), 2)
            '        '.lblSizeComp = "Per " & LCase(Range(PRICE_COMP_UOM_COL & "$" & iRow).Value)
            '    Else
            '        .lblSizeComp = "ea"
            '        '.lblSizeComp = "Per ea"
            '    End If
            'Else
            '    If UCase(Range(UNIT_SIZE_UOM_COL & "$" & iRow).Value) = "C3" Then
            '        .lblSizeComp = "cl"
            '        '.lblSizeComp = "Per cl"
            '    ElseIf UCase(Range(UNIT_SIZE_UOM_COL & "$" & iRow).Value) = "GR" Then
            '        .lblSizeComp = "g"
            '        '.lblSizeComp = "Per g"
            '    Else
            '        .lblSizeComp = Range(PRICE_COMP_QTY_COL & "$" & iRow).Value & Left(LCase(Range(PRICE_COMP_UOM_COL & "$" & iRow).Value), 2)
            '        '.lblSizeComp = "Per " & Range(PRICE_COMP_QTY_COL & "$" & iRow).Value & Left(LCase(Range(PRICE_COMP_UOM_COL & "$" & iRow).Value), 2)
            '    End If
            If Range(PRICE_COMP_QTY_COL & "$" & iRow).Value = "" Or _
               Range(PRICE_COMP_QTY_COL & "$" & iRow) = 1 Then
                .lblSizeComp = uomDisp
            Else
                .lblSizeComp = Range(PRICE_COMP_QTY_COL & "$" & iRow).Value & uomDisp
            End If
            
            ' What is this, Kev? :0
            On Error Resume Next
            
            Dim priceComp As Currency
                        
            If Range(PRICE_COMP_QTY_COL & "$" & iRow).Value = "" Or _
               Range(PRICE_COMP_QTY_COL & "$" & iRow) = 1 Then
                priceComp = Range(PRICE_COL & "$" & iRow).Value / Range(UNIT_SIZE_QTY_COL & "$" & iRow).Value * 1 / uomRatio
            Else
                priceComp = Range(PRICE_COL & "$" & iRow).Value / Range(UNIT_SIZE_QTY_COL & "$" & iRow).Value * Range(PRICE_COMP_QTY_COL & "$" & iRow).Value / uomRatio
            End If
            
            If priceComp >= 1# Then
                .lblPriceComp = Format(priceComp, "|fffd|#,##0.00")
            Else
                .lblPriceComp = Format(priceComp * 100, "#,##0.00") & "p"
            End If
            
            'If (Range(PRICE_COL & "$" & iRow).Value / Range(UNIT_SIZE_QTY_COL & "$" & iRow).Value) * Range(PRICE_COMP_QTY_COL & "$" & iRow).Value >= 1# Then
            '    .lblPriceComp = Format((Range(PRICE_COL & "$" & iRow).Value / Range(UNIT_SIZE_QTY_COL & "$" & iRow).Value) * Range(PRICE_COMP_QTY_COL & "$" & iRow).Value, "|fffd|#,##0.00")
            'Else
            '    If Range(PRICE_COMP_QTY_COL & "$" & iRow).Value = "" Or _
            '        Range(PRICE_COMP_QTY_COL & "$" & iRow) = 1 Then
            '        .lblPriceComp = Format((Range(PRICE_COL & "$" & iRow).Value / Range(UNIT_SIZE_QTY_COL & "$" & iRow).Value) * 1, "#,##0.00") & "p"
            '    Else
            '        .lblPriceComp = Format((Range(PRICE_COL & "$" & iRow).Value / Range(UNIT_SIZE_QTY_COL & "$" & iRow).Value) * Range(PRICE_COMP_QTY_COL & "$" & iRow).Value * 100, "#,##0.0") & "p"
            '    End If
            'End If
            
            On Error GoTo 0
            
            '# unit price
            If Range(PRICE_COL & "$" & iRow).Value >= 1# Then
                .lblPrice = Format(Range(PRICE_COL & "$" & iRow).Value, "|fffd|* #,##0.00;")
            Else
                '.lblPrice = add_pence(Range(PRICE_COL & "$" & iRow).Value)
                .lblPrice = Format(Range(PRICE_COL & "$" & iRow).Value * 100, "#,##0p")
            End If
    
        End With
    
        '# show the form
        fSEL.Show
    
        If ians = vbYes Then Exit Do
        ActiveCell.Offset(1, 0).Select
    Loop
    
End Sub






'#
'#  export_data_for_load - notes
'#  ----------------------------
'#
'#  Comments    Can't directly load data from this spready when VBA is
'#                      protected so this process extracts the contents into a
'#                      a new sheet that the user can save and load later.
'#                      In case the user messes us the "save for later" bit
'#                      this process will not delete the data afterwards.
'#
'#  Date                Author              Action
'#  ===========================================================================
'#  2007-02-02      Kevin Morris        Created
'#  ===========================================================================
Sub export_data_for_load()
Attribute export_data_for_load.VB_ProcData.VB_Invoke_Func = " \n14"

Dim wbs As Workbook

    Workbooks.Add
    Set wbs = ActiveWorkbook
    ThisWorkbook.Activate
    shInput.UsedRange.Copy
    wbs.Activate
    Range("a1").PasteSpecial (xlPasteAll)
    [a1].Select
    Application.CutCopyMode = False

End Sub
Attribute VB_Name = "MSystemFunctions"
Option Explicit


'#
'#  allowed_characters - notes
'#  --------------------------
'#
'#  Comments    Runs when user requests to view an SEL.  Checks the passed
'#                   text to exclude any 'special' characters.
'#
'#  Date            Author              Action
'#  ===========================================================================
'#  23-Oct-06    Kevin Morris        Created
'#  2009-07-08  Kevin Morris           Dirty-don't-tell-anyone-hack to extend functionality
'#  ===========================================================================
Function allowed_characters(ByVal strTXT As String, Optional ByVal blnVer As Boolean) As Boolean
Attribute allowed_characters.VB_ProcData.VB_Invoke_Func = " \n14"

Dim ik As Integer

    '# exclude '+'/'-' chars
    If blnVer = True Then
        For ik = 1 To Len(strTXT)
            Select Case Asc(Mid(strTXT, ik, 1))
                
                Case 65 To 90, 97 To 122, 48 To 57, 32, 43, 45, 38, 47 '# 38,47 added 2009-07-8
                Case Else
                    allowed_characters = False
                    Exit Function
            End Select
        Next ik
    End If
    If blnVer = False Then
        For ik = 1 To Len(strTXT)
            Select Case Asc(Mid(strTXT, ik, 1))
                
                Case 65 To 90, 97 To 122, 48 To 57, 32
                Case Else
                    allowed_characters = False
                    Exit Function
            End Select
        Next ik
    End If
'    If blnVer = "Pos" Then
'        For ik = 1 To Len(strTXT)
'            Select Case Asc(Mid(strTXT, ik, 1))
'
'                Case 65 To 90, 97 To 122, 48 To 57, 32
'                Case Else
'                    allowed_characters = False
'                    Exit Function
'            End Select
'        Next ik
'    End If
    allowed_characters = True
End Function


'#
'#  add_pence - notes
'#  ------------------
'#
'#  Comments    Called to return a value with a "p" suffix
'#
'#
'#  Date        Author              Action
'#  ===========================================================================
'#  24-Oct-06   Kevin Morris        Created
'#  ===========================================================================
Function add_pence(ByVal strPrice As String) As String
Attribute add_pence.VB_ProcData.VB_Invoke_Func = " \n14"

Dim ik As Integer
Dim idp As Integer

    '# find the decimal place
    If Len(strPrice) <= 4 Then
        For ik = 1 To Len(strPrice)
            If Mid(strPrice, ik, 1) = "." Then
                add_pence = Trim(Mid(strPrice, ik + 1, 10)) & "p"
            End If
        Next ik
    Else
        '# ok we've got loads of decimal places
        strPrice = Mid(strPrice, 3, 3) / 10
        add_pence = strPrice & "p"
    End If
End Function




'#
'#  replace_special - notes
'#  ----------------------
'#
'#  Comments    Replace any special characters found with spaces
'#
'#
'#  Date        Author              Action
'#  ===========================================================================
'#  25-Oct-06   Kevin Morris        Created
'#  ===========================================================================
Function replace_special(strTXT As String) As String
Attribute replace_special.VB_ProcData.VB_Invoke_Func = " \n14"

Dim re As RegExp
Dim strResults As String
Dim oMatches As MatchCollection
Dim oMatch As Match
      

    Set re = New RegExp
    re.Global = True
    re.IgnoreCase = True
      
    re.Pattern = "[^a-zA-Z1-9]"
    strTXT = re.Replace(strTXT, " ")
    replace_special = strTXT

End Function


'#
'#  check_numeric - notes
'#  ----------------------
'#
'#  Comments    Checks passed value contains only numeric data.  False means failed test.
'#
'#
'#  Date            Author              Action
'#  ===========================================================================
'#  2007-01-04   Kevin Morris        Created
'#  ===========================================================================
Function check_numeric(ByVal strValue As String) As Boolean
Attribute check_numeric.VB_ProcData.VB_Invoke_Func = " \n14"

Dim re As RegExp
Dim strResults As String
Dim oMatches As MatchCollection
Dim oMatch As Match
      

    Set re = New RegExp
    re.Global = True
    re.IgnoreCase = True
      
    re.Pattern = "[^0-9\.]"
    If re.Test(strValue) Then
        check_numeric = False
    Else
        check_numeric = True
    End If
    
End Function



'#
'#  not_A_Z - notes
'#  ---------------
'#
'#  Comments    Checks passed value contains no A-Z characters.  False means failed test.
'#
'#
'#  Date            Author              Action
'#  ===========================================================================
'#  2011-05-23   Kevin Morris        Created
'#  ===========================================================================
Function not_A_Z(ByVal strValue As String) As Boolean

Dim re As RegExp
Dim strResults As String
Dim oMatches As MatchCollection
Dim oMatch As Match
      

    Set re = New RegExp
    re.Global = True
    re.IgnoreCase = True
      
    re.Pattern = "[a-zA-Z]"
    If Not re.Test(strValue) Then
        not_A_Z = True
    Else
        not_A_Z = False
    End If
    
End Function

Function MultiCoOCIsOK(ConcatData As Variant) As Boolean
Dim stringArray As Variant
Dim ArraySize As Integer
'Dim ConcatData As String
Dim UnConcatData As String
Dim PlaceMarker As Integer
Dim StrLength As Integer
Dim Deliminator As String
Dim ArrayInt As Integer
Dim i As Integer
Dim r As Range
Dim Found As Boolean
ReDim stringArray(0)

Deliminator = ";"
Debug.Print COUNTRY_LOOKUP.Address
'ConcatData = Selection.Value
StrLength = Len(ConcatData)
PlaceMarker = InStrRev(ConcatData, Deliminator)
While PlaceMarker <> 0
    ArrayInt = Application.WorksheetFunction.CountA(stringArray) - 1
    StrLength = Len(ConcatData)
    PlaceMarker = InStrRev(ConcatData, Deliminator)
    stringArray(ArrayInt) = Trim(Right(ConcatData, StrLength - PlaceMarker))
        If PlaceMarker <> 0 Then
            ConcatData = Left(ConcatData, PlaceMarker - 1)
        End If
    ReDim Preserve stringArray(Application.WorksheetFunction.CountA(stringArray))
Wend


ArrayInt = Application.WorksheetFunction.CountA(stringArray) - 1




For i = 0 To ArrayInt - 1

    Found = False
    
        For Each r In COUNTRY_LOOKUP.Rows
        Debug.Print UCase(CStr(r.Columns(1).Value)), UCase(stringArray(i))
            If UCase(stringArray(i)) = UCase(CStr(r.Columns(1).Value)) Then
                Found = True
                Exit For
            End If
        Next r
        
    If Not Found Then
        MsgBox stringArray(i) & " was not found in Country Of Origin list"
        MultiCoOCIsOK = False
        Exit Function
        Else
        MultiCoOCIsOK = True
    End If

Next i

End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Const SEL_TOOL = "SEL_Preview"

Private Sub Workbook_Open()

Dim cbar As CommandBar
Dim cbutton As CommandBarButton
Dim Found As Boolean
    
   
'   Dim frmSplash As fSplash
'    '##########################################################################
'    '# 'splash screen
'    Set frmSplash = New fSplash
'    frmSplash.Show vbModeless
'
'    '# pause
'    Application.Wait Now + TimeValue("00:00:2")
'
'    '# Unload the splash screen
'    Unload frmSplash
'    Set frmSplash = Nothing
    '#
   '##########################################################################
   
    '#
    '# Look for the required command bar
    '#
    Found = False
    For Each cbar In Application.CommandBars
        If cbar.Name = SEL_TOOL Then
            Found = True
            Exit For
        End If
    Next cbar

    '#
    '# If it doesn't exist then add it
    '#
    If Found = False Then
        On Error Resume Next
        Application.CommandBars.Add(Name:=SEL_TOOL).Visible = True
        On Error GoTo 0
        Toolbars(SEL_TOOL).Visible = True
    End If
    
    '#
    '# look through each of the controls on the command bar to see if the button we want to add
    '# already exists
    '#
    Found = False
    'For Each cbutton In cbar.Controls
    For Each cbutton In Application.CommandBars(SEL_TOOL).Controls
        If cbutton.Caption = "SEL Preview Tool" Then
            Found = True
            Exit For
        End If
    Next cbutton
    
    '#
    '# The button doesn't exist - add it
    '#
    If Found = False Then
        Toolbars(SEL_TOOL).ToolbarButtons.Add Button:=155, before:=1
        Toolbars(SEL_TOOL).ToolbarButtons(1).Name = "SEL Preview Tool"
        Toolbars(SEL_TOOL).ToolbarButtons(1).OnAction = "MSystemCode.sel_preview_start"
        Toolbars(SEL_TOOL).Position = xlTop
    End If
    
End Sub



Private Sub Workbook_BeforeClose(Cancel As Boolean)
Dim cbar As CommandBar
Dim cbutton As CommandBarButton
Dim Found As Boolean
    
    '#
    '# Look for the required command bar
    '#
    Found = False
    For Each cbar In Application.CommandBars
        If cbar.Name = SEL_TOOL Then
            Found = True
            Exit For
        End If
    Next cbar

    '#
    '# If it doesn't exist then we've nothing to do
    '#
    If Found = False Then
        Exit Sub
    End If
    
    '#
    '# look through each of the controls on the command bar to see if the button we want to add
    '# already exists
    '#
    Found = False
    For Each cbutton In cbar.Controls
        If cbutton.Caption = "SEL Preview Tool" Then
            Found = True
            Exit For
        End If
    Next cbutton
    
    '#
    '# We've found the button - remove it
    '#
    If Found = True Then
        Toolbars(SEL_TOOL).ToolbarButtons(cbutton.Index).Delete
    End If

    Application.CommandBars(SEL_TOOL).Delete
End Sub


'Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
'
'Dim strAdd() As String
'
'    If Target.Count > 1 Then
'        Call MSystemCode.check_cells(Target.Address)
'        Exit Sub
'    End If
'
'    On Error Resume Next
'
'    strAdd() = Split(Target.Address, "$", -1, vbTextCompare)
'
'    '#  add validation criteria if needed
'    If Range(UNIT_SIZE_UOM_COL & "$" & strAdd(2)).Value = "" Then
'        MSystemCode.add_validation Range(UNIT_SIZE_UOM_COL & "$" & strAdd(2)).Address, "EA,CM,C3,GR,KG,LT,ML,MR"
'    End If
'
'    If Range(VOL_UOM_COL & "$" & strAdd(2)).Value = "" Then
'        MSystemCode.add_validation Range(VOL_UOM_COL & "$" & strAdd(2)).Address, "GR,KG"
'    End If
'
'
'
'
'    '#ANA
'    If InStr(1, CStr(Target.Address), ANA_COL, vbTextCompare) <> 0 Then
'        If Len(Target.Value) > 12 Then
'            If Target.Count = 1 Then MsgBox "Please limit entry to 12 characters - including spaces! in " & Target.Address, vbExclamation + vbOKOnly, "ANA"
'            Range(Target.Address).Select
'        End If
'        If Not MSystemCode.allowed_characters(Target.Value) Then
'            If Target.Count = 1 Then MsgBox "Please remove any 'special' characters e.g. !""|fffd|$%^&*( from " & Target.Address, vbExclamation + vbOKOnly, "ANA"
'            Range(Target.Address).Select
'        End If
'    End If
'
'    '#  ANA Check digit
'    If InStr(1, CStr(Target.Address), ANA_CHECK_COL, vbTextCompare) <> 0 Then
'        If Len(Target.Value) <> 1 Then
'            If Target.Count = 1 Then MsgBox "Please limit entry to 1 character - including spaces! in " & Target.Address, vbExclamation + vbOKOnly, "ANA Check Digit"
'            Range(Target.Address).Select
'        End If
'    End If
'
'    '# Supplier stock number
'    If InStr(1, CStr(Target.Address), SUPP_STOCK_COL, vbTextCompare) <> 0 Then
'        If Len(Target.Value) > 15 Then
'            If Target.Count = 1 Then MsgBox "Please limit entry to 15 characters - including spaces! in " & Target.Address, vbExclamation + vbOKOnly, "Supplier Stock Number"
'            Range(Target.Address).Select
'        End If
'    End If
'
'
'    '# shelf description limit
'    If InStr(1, CStr(Target.Address), SHELF_DESCRIPTION_COL, vbTextCompare) <> 0 Then
''        If Len(Target.Value) > 20 Then
''            If Target.Count = 1 Then MsgBox "Please limit entry to 20 characters - including spaces! in " & Target.Address, vbExclamation + vbOKOnly, "Shelf Description"
''            Range(Target.Address).Select
''        End If
'        If Not MSystemCode.allowed_characters(Target.Value) Then
'            If Target.Count = 1 Then MsgBox "Please remove any 'special' characters e.g. !""|fffd|$%^&*( from " & Target.Address, vbExclamation + vbOKOnly, "Shelf Description"
'            Range(Target.Address).Select
'        End If
'    End If
'
'    '# variety limit
'    If InStr(1, CStr(Target.Address), VARIETY_COL, vbTextCompare) <> 0 Then
'        If Len(Target.Value) > 6 Then
'            If Target.Count = 1 Then MsgBox "Please limit entry to 6 characters - including spaces!", vbExclamation + vbOKOnly, "Variety"
'            Range(Target.Address).Select
'        End If
'    End If
'
'
'    '# size limit
'    If InStr(1, CStr(Target.Address), SIZE_COL, vbTextCompare) <> 0 Then
'        If Len(Target.Value) > 6 Then
'            If Target.Count = 1 Then MsgBox "Please limit entry to 6 characters - including spaces!", vbExclamation + vbOKOnly, "Size"
'            Range(Target.Address).Select
'        End If
'    End If
'
'    '# unit size
'    If InStr(1, CStr(Target.Address), UNIT_SIZE_QTY_COL, vbTextCompare) <> 0 Then
'        If Not IsNumeric(Target.Value) Then
'            If Target.Count = 1 Then MsgBox "Please enter only text in cell " & Target.Address, vbExclamation + vbOKOnly, "Size"
'            Range(Target.Address).Select
'        End If
'        If Range(Target.Address) > 9999999.9 Then
'            If Target.Count = 1 Then MsgBox "Please number too big in " & Target.Address, vbExclamation + vbOKOnly, "Size"
'            Range(Target.Address).Select
'        End If
'    End If
'
'
'    '# till description limit
'    If InStr(1, CStr(Target.Address), TILL_DESCRIPTION_COL, vbTextCompare) <> 0 Then
'        If Len(Target.Value) > 12 Then
'            If Target.Count = 1 Then MsgBox "Please limit entry to 12 characters - including spaces!", vbExclamation + vbOKOnly, "Till Description"
'            Range(Target.Address).Select
'        End If
'    End If
'
'    '# pos limit
'    If InStr(1, CStr(Target.Address), POS_COL, vbTextCompare) <> 0 Then
'        If Len(Target.Value) > 40 Then
'            If Target.Count = 1 Then MsgBox "Please limit entry to 40 characters - including spaces!", vbExclamation + vbOKOnly, "POS Description"
'            Range(Target.Address).Select
'        End If
'    End If
'
'
'    '# plu limit
'    If InStr(1, CStr(Target.Address), PLU_COL, vbTextCompare) <> 0 Then
'        If Len(Target.Value) > 5 Then
'            If Target.Count = 1 Then MsgBox "Please limit entry to 5 characters - including spaces!", vbExclamation + vbOKOnly, "PLU"
'            Range(Target.Address).Select
'        End If
'    End If
'
'
'    '# inner tuc limit
'    If InStr(1, CStr(Target.Address), INNER_TUC_COL, vbTextCompare) <> 0 Then
'        If Len(Target.Value) > 13 Then
'            If Target.Count = 1 Then MsgBox "Please limit entry to 13 characters - including spaces!", vbExclamation + vbOKOnly, "TUC"
'            Range(Target.Address).Select
'        End If
'    End If
'
'    On Error GoTo 0
'End Sub

Private Sub Workbook_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Range)

Dim sTmp As String

    If ActiveSheet.Name = shInput.Name Then

        sTmp = Target.Address
    
        Application.ScreenUpdating = False
    
        ActiveSheet.Shapes("btnAdd").Select
        Selection.Characters.Text = "Asda Validate row " & ActiveCell.Row
        ActiveSheet.Shapes("btnAddSupp").Select
        Selection.Characters.Text = "Supplier Validate row " & ActiveCell.Row
    
    
        Range(sTmp).Select
        
        Application.ScreenUpdating = True
    End If
End Sub

'# disallow users from entering N/A 2009-07-08 KM
'# 2010-11-02 CW: Fixed bug where it displays an error during worksheet changes
Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)

Dim sTmp As String
Dim c As Range

    sTmp = Target.Address

    If ActiveSheet.Name = shInput.Name Then
    
        'If InStr(1, UCase(Range(sTmp).Value), "N/A", vbTextCompare) <> 0 Or _
         '   InStr(1, UCase(Range(sTmp).Value), "NA", vbTextCompare) <> 0 Then
        For Each c In Target.Cells
            'If UCase(Range(sTmp).Value) = "N/A" Or _
            '    UCase(Range(sTmp).Value) = "NA" Then
            If UCase(c.Value) = "N/A" Or _
                UCase(c.Value) = "NA" Then
                MsgBox "N/A are disallowed. Target cleared.  Please refer to permitted criteria", vbInformation + vbOKOnly, "Invalid"
                
                With Range(sTmp)
                    .Value = ""
                    .Select
                End With
                
                Exit For
            End If
        Next
    
    End If
End Sub
Sub t()
Attribute t.VB_ProcData.VB_Invoke_Func = " \n14"

    Do
        ActiveCell.Offset(1, 0).Select
    Loop

End Sub
Attribute VB_Name = "fSEL"
Attribute VB_Base = "0{A93DD4B5-97E4-4ABF-B922-69E319AB2530}{900EF49F-9011-4D38-A42E-D9FC8CEB7458}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub UserForm_Activate()

    Range("$DN" & ActiveCell.Row).Value = 1

    With ActiveCell.EntireRow.Interior
        .ColorIndex = 35
        .Pattern = xlSolid
    End With

End Sub


Private Sub UserForm_Terminate()

    Range("$DN" & ActiveCell.Row).Value = ""

    With ActiveCell.EntireRow.Interior
        .ColorIndex = xlNone
    End With
    
End Sub
Attribute VB_Name = "fSplash"
Attribute VB_Base = "0{BFD5F9C7-A852-4556-8384-05C0FF316B18}{1D853771-CBEF-4EE3-978A-75EF0D944E23}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit


Private Sub UserForm_Initialize()

    Me.Height = Me.InsideHeight

    SetUserformAppearance Me, uwsNoTitleBar
    
End Sub


Attribute VB_Name = "shInput"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
