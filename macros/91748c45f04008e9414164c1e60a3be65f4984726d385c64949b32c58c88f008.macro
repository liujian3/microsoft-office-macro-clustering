Attribute VB_Name = "ListPrinters"
Option Explicit

Const PRINTER_ENUM_CONNECTIONS = &H4
Const PRINTER_ENUM_LOCAL = &H2

#If VBA7 Then
    Private Declare PtrSafe Function EnumPrinters Lib "winspool.drv" Alias "EnumPrintersA" _
            (ByVal flags As Long, ByVal name As String, ByVal Level As Long, _
             pPrinterEnum As Long, ByVal cdBuf As Long, pcbNeeded As Long, _
             pcReturned As Long) As Long

    Private Declare PtrSafe Function PtrToStr Lib "kernel32" Alias "lstrcpyA" _
            (ByVal RetVal As String, ByVal Ptr As Long) As Long

    Private Declare PtrSafe Function StrLen Lib "kernel32" Alias "lstrlenA" _
            (ByVal Ptr As Long) As Long
#Else
    Private Declare Function EnumPrinters Lib "winspool.drv" Alias "EnumPrintersA" _
                                          (ByVal flags As Long, ByVal name As String, ByVal Level As Long, _
                                           pPrinterEnum As Long, ByVal cdBuf As Long, pcbNeeded As Long, _
                                           pcReturned As Long) As Long

    Private Declare Function PtrToStr Lib "kernel32" Alias "lstrcpyA" _
                                      (ByVal RetVal As String, ByVal Ptr As Long) As Long

    Private Declare Function StrLen Lib "kernel32" Alias "lstrlenA" _
                                    (ByVal Ptr As Long) As Long
#End If

Public Function ListPrinters() As Variant

Dim bSuccess As Boolean
Dim iBufferRequired As Long
Dim iBufferSize As Long
Dim iBuffer() As Long
Dim iEntries As Long
Dim iIndex As Long
Dim strPrinterName As String
Dim iDummy As Long
Dim iDriverBuffer() As Long
Dim strPrinters() As String

    iBufferSize = 3072

    ReDim iBuffer((iBufferSize \ 4) - 1) As Long

    'EnumPrinters will return a value False if the buffer is not big enough
    bSuccess = EnumPrinters(PRINTER_ENUM_CONNECTIONS Or _
                            PRINTER_ENUM_LOCAL, vbNullString, _
                            1, iBuffer(0), iBufferSize, iBufferRequired, iEntries)

    If Not bSuccess Then
        If iBufferRequired > iBufferSize Then
            iBufferSize = iBufferRequired
            Debug.Print "iBuffer too small. Trying again with "; _
                        iBufferSize & " bytes."
            ReDim iBuffer(iBufferSize \ 4) As Long
        End If
        'Try again with new buffer
        bSuccess = EnumPrinters(PRINTER_ENUM_CONNECTIONS Or _
                                PRINTER_ENUM_LOCAL, vbNullString, _
                                1, iBuffer(0), iBufferSize, iBufferRequired, iEntries)
    End If

    If Not bSuccess Then
        'Enumprinters returned False
        ShowError 17, 51
        Unload frmErr1
        Exit Function
    Else
        'Enumprinters returned True, use found printers to fill the array
        ReDim strPrinters(iEntries - 1)
        For iIndex = 0 To iEntries - 1
            'Get the printername
            strPrinterName = Space$(StrLen(iBuffer(iIndex * 4 + 2)))
            iDummy = PtrToStr(strPrinterName, iBuffer(iIndex * 4 + 2))
            strPrinters(iIndex) = strPrinterName
        Next iIndex
    End If

    ListPrinters = strPrinters

End Function

Public Function IsBounded(vArray As Variant) As Boolean

'If the variant passed to this function is an array, the function will return True;
'otherwise it will return False
    On Error Resume Next
    IsBounded = IsNumeric(UBound(vArray))

End Function

Public Function IsPrinter(sPrinterName As String) As Boolean
Dim strPrinters As Variant
Dim x As Long
    strPrinters = ListPrinters
    If IsBounded(strPrinters) Then
        For x = LBound(strPrinters) To UBound(strPrinters)
            If strPrinters(x) = sPrinterName Then
                IsPrinter = True
                Exit For
            End If
        Next x
    End If
End Function

Attribute VB_Name = "ModCheckData"
Option Explicit

Public Function CheckHash(xlSheet As Object) As Boolean
Dim c As Object
    With xlSheet.UsedRange
        Set c = .Find("#")
        If Not c Is Nothing Then
            ShowError 4, 40
            Unload frmErr1
            CheckHash = True
        End If
    End With
End Function

Public Function CheckEmptyFields(xlApp As Object, xlSheet As Object) As Boolean
Dim LastRow As Integer
Dim LastOverallRow As Integer
Dim LastCol As Integer
Dim iCol As Long
Dim strText As String, strMsg As String
Dim strSource As String
Dim vCol As Variant
Dim i As Long, j As Long, k As Long

    CheckEmptyFields = False
    With ActiveDocument.MailMerge.DataSource
        strSource = .name
    End With

    strText = ""
    With xlSheet
        LastCol = .Cells(1, .Columns.Count).End(-4159).Column
        LastRow = .Cells(.Rows.Count, "A").End(-4162).Row
        LastOverallRow = xlSheet.UsedRange.Rows.Count
        If LastRow < LastOverallRow Then
            ShowError 17, 36
            Unload frmErr1
            CheckEmptyFields = True
            Exit Function
        End If
    End With
    i = xlApp.WorksheetFunction.CountBlank(xlSheet.Range(xlSheet.Cells(1, 1), xlSheet.Cells(LastRow, LastCol)))
    Select Case i
        Case Is = 0
            ' There are no empty fields.
        Case Is = 1
            strMsg = ""
            ShowError 17, 29, True, strMsg
            If frmErr1.Tag = 0 Then CheckEmptyFields = True
            Unload frmErr1
        Case Else
            ShowError 17, 30, True
            If frmErr1.Tag = 0 Then CheckEmptyFields = True
            Unload frmErr1
    End Select
End Function

Public Function CheckWorksheet(xlSheet As Object) As Boolean
Dim LastCol As Integer
Dim iCol As Long
Dim strMsg As String
Dim i As Long
    CheckWorksheet = False
    With xlSheet
        LastCol = .Cells(1, .Columns.Count).End(-4159).Column
        For i = 1 To LastCol
            iCol = 0
            If Trim(.Cells(1, i)) = "" Then
                If i = 1 Then
                    CheckWorksheet = True
                    ShowError 17, 32
                    Unload frmErr1
                    Exit Function
                End If
                iCol = iCol + 1
                If iCol = 1 Then
                    ShowError 17, 33
                    Unload frmErr1
                    CheckWorksheet = True
                    Exit Function
                End If
            End If
        Next i
    End With
End Function

Function CheckInTable() As Boolean
Dim oFld As Field
Dim oRng As Range
    For Each oFld In ActiveDocument.Fields
        If oFld.Type = wdFieldMergeField Then
            Set oRng = oFld.Code
            If oRng.Information(wdWithInTable) Then
                CheckInTable = True
                Exit For
            End If
        End If
    Next oFld
End Function

Function FixChars(strText As Variant) As Variant
    strText = Replace(strText, Chr(34), Chr(95))
    strText = Replace(strText, Chr(42), Chr(95))
    strText = Replace(strText, Chr(44), Chr(95))
    strText = Replace(strText, Chr(46), Chr(95))
    strText = Replace(strText, Chr(47), Chr(95))
    strText = Replace(strText, Chr(58), Chr(95))
    strText = Replace(strText, Chr(60), Chr(95))
    strText = Replace(strText, Chr(62), Chr(95))
    strText = Replace(strText, Chr(63), Chr(95))
    strText = Replace(strText, Chr(124), Chr(95))
    FixChars = strText
End Function

Function FixName(strName As Variant) As Variant
    strName = Replace(strName, Chr(10), Chr(95))
    strName = Replace(strName, Chr(32), Chr(95))
    strName = Replace(strName, Chr(34), "")
    strName = Replace(strName, Chr(35), "")
    strName = Replace(strName, Chr(36), "")
    strName = Replace(strName, Chr(37), "")
    strName = Replace(strName, Chr(38), "")
    strName = Replace(strName, Chr(39), "")
    strName = Replace(strName, Chr(40), "")
    strName = Replace(strName, Chr(41), "")
    strName = Replace(strName, Chr(42), "")
    strName = Replace(strName, Chr(43), "")
    strName = Replace(strName, Chr(44), "")
    strName = Replace(strName, Chr(45), "")
    strName = Replace(strName, Chr(46), "")
    strName = Replace(strName, Chr(47), "")
    strName = Replace(strName, Chr(58), "")
    strName = Replace(strName, Chr(59), "")
    strName = Replace(strName, Chr(60), "")
    strName = Replace(strName, Chr(62), "")
    strName = Replace(strName, Chr(63), "")
    strName = Replace(strName, Chr(64), "")
    strName = Replace(strName, Chr(91), "")
    strName = Replace(strName, Chr(92), "")
    strName = Replace(strName, Chr(93), "")
    strName = Replace(strName, Chr(94), "")
    strName = Replace(strName, Chr(96), Chr(95))
    strName = Replace(strName, Chr(123), "")
    strName = Replace(strName, Chr(124), "")
    strName = Replace(strName, Chr(125), "")
    strName = Replace(strName, Chr(126), "")
    strName = Replace(strName, Chr(128), "")
    strName = Replace(strName, Chr(163), "")
    FixName = Trim(strName)
End Function
Attribute VB_Name = "ModCleanSheet"
Option Explicit

Sub CleanSheet()
Dim xlApp As Object
Dim xlBook As Object
Dim xlSheet As Object
Dim iCols As Long, iCol As Long, c As Long
Dim iRows As Long, iRow As Long, r As Long
Dim oFrm As frmProgress
Dim PortionDone As Double
Dim strFilename As String
Dim strName As String
Dim k As Long
Dim oDoc As Document
Dim dSource As String
Dim strPath As String

    Set oDoc = ActiveDocument
    strPath = oDoc.FullName
    With oDoc.MailMerge
        dSource = .DataSource.name
        If Len(.DataSource.name) = 0 Then
            ShowError 2, 2
            Unload frmErr1
            Exit Sub
        End If

        If Right(.DataSource.name, 4) <> "xlsx" And Right(.DataSource.name, 3) <> "xls" Then
            ShowError 4, 4
            Unload frmErr1
            Exit Sub
        End If
    End With
    On Error GoTo 0
    Set xlApp = CreateObject("Excel.Application")
    Set xlBook = xlApp.Workbooks.Open(dSource)
    Set xlSheet = xlBook.Worksheets(1)

    iRows = xlSheet.UsedRange.Rows.Count
    iCols = xlSheet.UsedRange.Columns.Count
    iRow = xlSheet.Cells(xlSheet.Rows.Count, 1).End(-4162).Row
    iCol = xlSheet.Cells(1, xlSheet.Columns.Count).End(-4159).Column
    If iRows > iRow Or iCols > iCol Then
        Select Case True
            Case iRows > iRow And iCols > iCol
                ShowError 18, 48, True, "columns and rows"
            Case iRows > iRow
                ShowError 18, 48, True, "rows"
            Case iCols > iCol
                ShowError 18, 48, True, "columns"
        End Select
        If frmErr1.Tag = 1 Then
            xlApp.DisplayAlerts = False
            strName = xlBook.FullName
            strFilename = Left(xlBook.FullName, _
                               InStrRev(xlBook.FullName, Chr(46)) - 1) & _
                               " (Original)" & Right(xlBook.name, Len(xlBook.name) - InStrRev(xlBook.name, Chr(46)) + 1)
            xlBook.SaveAs strFilename
            xlApp.DisplayAlerts = True


            If iRows > iRow Then
                Set oFrm = New frmProgress
                With oFrm
                    .Height = 72
                    .Label2.Visible = False
                    .Show vbModeless
                End With
                k = 0
                For r = iRows To iRow + 1 Step -1
                    k = k + 1
                    PortionDone = k / (iRows - iRow)        'This is a decimal fraction
                    oFrm.lblProgress.Width = oFrm.fmeProgress.Width * PortionDone
                    oFrm.Caption = "Processing Row " & k & " of " & iRows - iRow
                    xlSheet.Rows(r).EntireRow.Delete
                    DoEvents
                Next r
                Unload oFrm
            End If
            If iCols > iCol Then
                Set oFrm = New frmProgress
                With oFrm
                    .Height = 72
                    .Label2.Visible = False
                    .Show vbModeless
                End With
                k = 0
                For c = iCols To iCol + 1 Step -1
                    k = k + 1
                    PortionDone = k / (iCols - iCol)        'This is a decimal fraction
                    oFrm.lblProgress.Width = oFrm.fmeProgress.Width * PortionDone
                    oFrm.Caption = "Processing Column " & k & " of " & iCols - iCol
                    xlSheet.Columns(c).EntireColumn.Delete
                    DoEvents
                Next c
                Unload oFrm
            End If
            xlApp.DisplayAlerts = False
            oDoc.Close wdDoNotSaveChanges
            xlBook.SaveAs strName
            xlApp.DisplayAlerts = True
            Set oDoc = Documents.Open(strPath)
            oDoc.MailMerge.MainDocumentType = wdNotAMergeDocument
            oDoc.MailMerge.MainDocumentType = wdFormLetters
            oDoc.MailMerge.OpenDataSource _
                    name:=strName, _
                    ConfirmConversions:=False, _
                    ReadOnly:=False, _
                    LinkToSource:=True, _
                    AddToRecentFiles:=False, _
                    PasswordDocument:="", _
                    PasswordTemplate:="", _
                    WritePasswordDocument:="", _
                    WritePasswordTemplate:="", _
                    Revert:=False, _
                    Format:=wdOpenFormatAuto, _
                    Connection:="Provider=Microsoft.ACE.OLEDB.12.0;User ID=Admin;Data Source=" & _
                                strName & ";Mode=Read;Extended Properties=""HDR=YES;IMEX=1;"";Jet OLEDB:System database="""";Jet OLEDB:Registry Path="""";Jet OLEDB:Engine Type=37;Jet", _
                                SQLStatement:="SELECT * FROM `Sheet1$`", _
                                SQLStatement1:="", _
                                SubType:=wdMergeSubTypeAccess
            oDoc.Save
        End If
    Else
        ShowError 17, 47
    End If
    Unload frmErr1
    Set oDoc = Nothing
    Set xlSheet = Nothing
    Set xlBook = Nothing
    xlApp.Quit
    Set xlApp = Nothing
End Sub
Attribute VB_Name = "ModCloseBtn"
Option Explicit

Private Const mcGWL_STYLE = (-16)
Private Const mcWS_SYSMENU = &H80000

'Windows API calls to handle windows
#If VBA7 Then
    Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
#Else
    Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
#End If

#If VBA7 Then
    Private Declare PtrSafe Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
#Else
    Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
#End If

#If VBA7 Then
    Private Declare PtrSafe Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
#Else
    Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
#End If


Public Sub RemoveCloseButton(frm As Object)
    Dim lngStyle As Long
    Dim lngHWnd As Long

    lngHWnd = FindWindow(vbNullString, frm.Caption)
    lngStyle = GetWindowLong(lngHWnd, mcGWL_STYLE)

    If lngStyle And mcWS_SYSMENU > 0 Then
        SetWindowLong lngHWnd, mcGWL_STYLE, (lngStyle And Not mcWS_SYSMENU)
    End If

End Sub
Attribute VB_Name = "ModDeclare"
Option Explicit

Public AppVer As String
Public AttachmentFields As Variant
Public AttachmentFiles As Variant
Public bAddCC As Boolean
Public bExchange As Boolean
Public bExists As Boolean
Public bFields As Boolean, bEmpty As Boolean, bHash As Boolean, bSheet As Boolean
Public bFound As Boolean, bFilter As Boolean, bUseFilter As Boolean
Public bIsForm As Boolean
Public bIsHTML As Boolean
Public bMany As Boolean
Public bPrefix As Boolean
Public bProtected As Boolean
Public bReceipt As Boolean
Public bStarted As Boolean
Public bSubject As Boolean
Public bValidate As Boolean
Public ChildFields As Variant
Public colStores As Object        'As Outlook.Stores
Public Const AppCaption As String = "Mail Merge Tools - "
Public Const AppID As String = "Mail Merge - 'Many to One'"
Public Const strFolderName As String = "Merge Many To One"
Public dSource As String
Public Email As Long
Public fd As FileDialog
Public FilterA As String, FilterB As String, FilterC As String, FilterD As String
Public flagFields As Boolean
Public flagFiles As Boolean
Public fldrSignatures As Folder
Public flSig As File
Public fName As Long
Public fso As New FileSystemObject
Public i As Long, j As Long, k As Long, m As Long, r As Long, s As Long
Public iAddress As Long
Public iColA As Long, iColB As Long, iColC As Long, iColD As Long, LastCol As Long
Public iCount As Long
Public iErr As Long
Public ifolder As Object
Public iImportant As Integer
Public iNewFolder As Object
Public iTemp As Long, jtemp As Long, iSubject As Long
Public Key As String
Public KeyField As Long, iFname As Long
Public LastRow As Long
Public MainDoc As String
Public MergeData As Variant
Public MergeFields As Variant
Public mfCode As Range
Public myWS As Object
Public numflds As Integer, numfldsA As Integer
Public numrecs As Long
Public objDoc As Object        'As Outlook.MailItem
Public oDoc As Document
Public oErrDoc As Document
Public oFld As Field
Public oFrm As frmProgress
Public oItem As Object        'As Outlook.MailItem
Public olAccount As Object        'As Outlook.Account
Public olApp As Object        'As Outlook.Application
Public olMailItems As Object        'As Outlook.Items
Public olNS As Object        'As Outlook.NameSpace
Public oMail As Object        'As Outlook.MailItem
Public oRng As Range
Public oRoot As Object        'As Outlook.Folder
Public oStore As Object        'As Outlook.Store
Public oStory As Range
Public oTemp As Document
Public PortionDone As Double
Public qryStr As String
Public RegKey As String
Public rngEmpty As Range
Public SigFields As Variant
Public Signature As String
Public sPass1 As String, sPass2 As String
Public sPassword As String
Public strAccount As String
Public strAddressError As String
Public strAndOr As String
Public strAttach As String
Public strCC As String
Public strCCA As String
Public strCCField As String
Public strChildFields As String
Public strDefaultAcct As String
Public strDefaultStore As String
Public strDestination As String
Public strEmail As String
Public strEmailField As String
Public strError As String
Public strErrorText As String
Public strFname As String
Public strFolder As String
Public strFTempName As String
Public strHTMLPath As String
Public strID As String
Public strKey As String
Public strLeading As String
Public strMessage As String
Public strProxy As String
Public strRecipient As String
Public strReplyTo As String
Public strResult As String
Public strSig As String
Public strSigFields As String
Public strSigPath As String
Public strSubject As String, strSubjectText As String
Public strTempFormat As String
Public strTrailing As String
Public strWB As String
Public vEmailAddress As Variant
Public Ver As String
Public vFname As Variant
Public xlApp As Object
Public xlBook As Object
Public xlSheet As Object
Public Const HKCR = &H80000000 'HKEY_CLASSES_ROOT
Public Const HKCU = &H80000001 'HKEY_CURRENT_USER
Public Const HKLM = &H80000002 'HKEY_LOCAL_MACHINE
Public Const HKUS = &H80000003 'HKEY_USERS
Public Const HKCC = &H80000005 'HKEY_CURRENT_CONFIG
Attribute VB_Name = "ModFileExists"
Option Explicit

Public Function FileExists(ByVal Filename As String) As Boolean
Dim nAttr As Long
    On Error GoTo NoFile
    nAttr = GetAttr(Filename)
    If (nAttr And vbDirectory) <> vbDirectory Then
        FileExists = True
    End If
NoFile:
End Function

Public Function RegKeyExists(i_RegKey As String) As Boolean
Dim myWS As Object
    On Error GoTo ErrorHandler
    Set myWS = CreateObject("WScript.Shell")
    myWS.RegRead i_RegKey
    RegKeyExists = True
    Exit Function
ErrorHandler:
    RegKeyExists = False
End Function

Sub RegKeySave(i_RegKey As String, _
               i_Value As String, _
               Optional i_Type As String = "REG_DWORD")
Dim myWS As Object
    Set myWS = CreateObject("WScript.Shell")
    myWS.RegWrite i_RegKey, i_Value, i_Type
End Sub

Attribute VB_Name = "ModFilter"
Option Explicit

Function FilterData() As Long
    FilterData = 0
    On Error Resume Next
    AppVer = ThisDocument.name
    AppVer = Right(AppVer, Len(AppVer) - InStr(AppVer, "Ver ") - 3)
    AppVer = Left(AppVer, Len(AppVer) - 5)

    With ActiveDocument.MailMerge
        If .MainDocumentType <> wdFormLetters Then
            ShowError 2, 2
            Unload frmErr1
            FilterData = 2
            Exit Function
        End If
        If Len(.DataSource.name) = 0 Then
            ShowError 3, 3
            Unload frmErr1
            FilterData = 2
            Exit Function
        End If
        If Right(.DataSource.name, 4) <> "xlsx" And Right(.DataSource.name, 3) <> "xls" Then
            ShowError 4, 4
            Unload frmErr1
            FilterData = 2
            Exit Function
        End If
    End With

    With ActiveDocument
        If .Saved = False Then
            ShowError 5, 5, True
            If frmErr1.Tag = 1 Then
                .Save
                Unload frmErr1
            Else
                Unload frmErr1
                Exit Function
            End If
        End If

        Set myWS = CreateObject("WScript.Shell")
        Ver = myWS.RegRead("HKEY_CLASSES_ROOT\Outlook.Application\CurVer\")
        Ver = Right(Ver, Len(Ver) - InStrRev(Ver, "."))
        Key = "HKEY_CURRENT_USER\Software\Microsoft\Office\" _
              & Ver & ".0\Outlook\Options\Spelling\Check"
        If RegKeyExists(Key) Then
            RegKey = myWS.RegRead(Key)
            If RegKey > 0 Then
                ShowError 8, 8, True
                If frmErr1.Tag = 0 Then
                    Unload frmErr1
                    Set myWS = Nothing
                    Exit Function
                Else
                    Unload frmErr1
                    Set myWS = Nothing
                End If
            End If
        Else
            RegKeySave Key, 0
        End If

        MainDoc = .FullName
        strFname = Left(.FullName, InStrRev(.FullName, ".") - 1)
        With .MailMerge.DataSource
            dSource = .name
            strWB = Left(.name, InStrRev(.name, ".") - 1) & "_Temp.xlsx"
            qryStr = .QueryString
            numrecs = .RecordCount
            numflds = .FieldNames.Count
        End With

        .MailMerge.MainDocumentType = wdNotAMergeDocument
        .SaveAs2 Filename:=strFname & "_Temp.docx", _
                 FileFormat:=wdFormatXMLDocument, _
                 AddToRecentFiles:=False
    End With
    Set oDoc = ActiveDocument

    Set xlApp = CreateObject("Excel.Application")
    With xlApp
        Set xlBook = .Workbooks.Open(dSource)
        Set xlSheet = xlBook.Worksheets(1)
        LastCol = xlSheet.Cells(1, xlSheet.Columns.Count).End(-4159).Column
        MergeData = xlSheet.Range("A1").CurrentRegion.Value
        MergeFields = xlSheet.Range("A1").CurrentRegion.Rows(1)
    End With

    If numflds > LastCol Then
        ShowError 17, 23
        Unload frmErr1
        ActiveDocument.Close wdDoNotSaveChanges
        xlBook.Close SaveChanges:=False
        xlApp.Quit
        Set xlApp = Nothing
        Set xlSheet = Nothing
        Set xlBook = Nothing
        Set oDoc = Nothing
        Documents.Open MainDoc
        ShowError 17, 9
        Unload frmErr1
        FilterData = 2
        Exit Function
    End If

    If CheckHash(xlSheet) = True Then
        ActiveDocument.Close wdDoNotSaveChanges
        xlBook.Close SaveChanges:=False
        xlApp.Quit
        Set xlApp = Nothing
        Set xlSheet = Nothing
        Set xlBook = Nothing
        Set oDoc = Nothing
        Documents.Open MainDoc
        FilterData = 2
        ShowError 17, 9
        Unload frmErr1
        Exit Function
    End If

    If CheckWorksheet(xlSheet) = True Then
        ActiveDocument.Close wdDoNotSaveChanges
        xlBook.Close SaveChanges:=False
        xlApp.Quit
        Set xlApp = Nothing
        Set xlSheet = Nothing
        Set xlBook = Nothing
        Set oDoc = Nothing
        Documents.Open MainDoc
        FilterData = 2
        ShowError 17, 9
        Unload frmErr1
        Exit Function
    End If


    If GetSetting(AppID, "Disclaimer", "Show on Start") = "" Then
        SaveSetting AppID, "Disclaimer", "Show on Start", True
    End If
    If GetSetting(AppID, "Config", "Filter") = "" Then
        SaveSetting AppID, "Config", "Filter", True
    End If

    With frmFilter
        .Caption = AppID & " - Version " & AppVer
        .CheckShow.Value = GetSetting(AppID, "Disclaimer", "Show on Start")
        .CheckShowForm.Value = GetSetting(AppID, "Config", "Filter")

        If .CheckShow.Value = True Then
            .Width = 406
            .FrameDisclaimer.Left = 18
            .Height = 500
            .FrameFilter.Visible = False
        Else
            .Width = 384
            .FrameDisclaimer.Left = 390
            .Height = 326
            .FrameFilter.Visible = True
        End If

        On Error Resume Next

        bFields = GetSetting(AppID, "Config", "Retain Fields")
        If Err.Number > 0 Then
            bFields = False
        End If
        .CheckRetainFields.Value = bFields

        .LstFilterA.Clear
        .LstFilterB.Clear
        .LstFilterC.Clear
        .LstFilterD.Clear

        For i = 1 To numflds
            .LstFilterA.AddItem
            .LstFilterA.List(i - 1, 0) = i
            .LstFilterA.List(i - 1, 1) = MergeFields(1, i)
            .LstFilterB.AddItem
            .LstFilterB.List(i - 1, 0) = i
            .LstFilterB.List(i - 1, 1) = MergeFields(1, i)
            .LstFilterC.AddItem
            .LstFilterC.List(i - 1, 0) = i
            .LstFilterC.List(i - 1, 1) = MergeFields(1, i)
            .LstFilterD.AddItem
            .LstFilterD.List(i - 1, 0) = i
            .LstFilterD.List(i - 1, 1) = MergeFields(1, i)
        Next i

        If .CheckRetainFields.Value = True Then
            FilterA = GetSetting(AppID, "Config", "Field A")
            FilterB = GetSetting(AppID, "Config", "Field B")
            FilterC = GetSetting(AppID, "Config", "Field C")
            FilterD = GetSetting(AppID, "Config", "Field D")

            If FilterA = "" Then FilterA = -1
            If FilterB = "" Then FilterB = -1
            If FilterC = "" Then FilterC = -1
            If FilterD = "" Then FilterD = -1

            .LstFilterA.ListIndex = FilterA
            .LstFilterB.ListIndex = FilterB
            .LstFilterC.ListIndex = FilterC
            .LstFilterD.ListIndex = FilterD
        Else
            .LstFilterA.ListIndex = -1
            .LstFilterB.ListIndex = -1
            .LstFilterC.ListIndex = -1
            .LstFilterD.ListIndex = -1
        End If

        .LstFilterA.SetFocus

        RemoveCloseButton frmFilter

        .Show

        If .Tag <> 1 Then
            xlBook.Close SaveChanges:=False
            Set xlBook = Nothing
            Set xlSheet = Nothing
            xlApp.Quit
            Set xlApp = Nothing
            oDoc.Close wdDoNotSaveChanges
            Set oDoc = Documents.Open(MainDoc)
            ShowError 17, 9
            Unload frmErr1
            oDoc.Save
            Set oDoc = Nothing
            Unload frmFilter
            FilterData = 2
            Exit Function
        End If

        If .CheckA.Value = False And _
           .CheckB.Value = False And _
           .CheckC.Value = False And _
           .CheckD.Value = False Then
            xlBook.Close SaveChanges:=False
            Set xlBook = Nothing
            Set xlSheet = Nothing
            xlApp.Quit
            Set xlApp = Nothing
            oDoc.Close wdDoNotSaveChanges
            Set oDoc = Documents.Open(MainDoc)
            oDoc.Save
            Set oDoc = Nothing
            Unload frmFilter
            Exit Function
        End If

        Set oFrm = New frmProgress
        With oFrm
            .Height = 72        '88
            .Label2.Visible = False
            .Show vbModeless
        End With

        LastRow = xlSheet.Cells(xlSheet.Rows.Count, "A").End(-4162).Row
        For i = LastRow To 2 Step -1
            bFound = False
            PortionDone = (LastRow - i) / LastRow        'This is a decimal fraction
            oFrm.lblProgress.Width = oFrm.fmeProgress.Width * PortionDone
            oFrm.Caption = "Filtering record " & LastRow - i & " of " & LastRow - 2
            DoEvents

            If .CheckA.Value = True Then
                iColA = .LstFilterA.Column(0)
                If isDate(xlSheet.Cells(i, iColA)) = True Then
                    If myDate(xlSheet.Cells(i, iColA)) <> myDate(.TextValA) Then
                        bFound = True
                    End If
                Else
                    If Trim(LCase(xlSheet.Cells(i, iColA))) <> Trim(LCase(.TextValA)) Then
                        bFound = True
                    End If
                End If
            End If

            If .CheckB.Value = True Then
                iColB = .LstFilterB.Column(0)
                If isDate(xlSheet.Cells(i, iColB)) = True Then
                    If myDate(xlSheet.Cells(i, iColB)) <> myDate(.TextValB) Then
                        bFound = True
                    End If
                Else
                    If Trim(LCase(xlSheet.Cells(i, iColB))) <> Trim(LCase(.TextValB)) Then
                        bFound = True
                    End If
                End If
            End If

            If .CheckC.Value = True Then
                iColC = .LstFilterC.Column(0)
                If isDate(xlSheet.Cells(i, iColC)) = True Then
                    If myDate(xlSheet.Cells(i, iColC)) <> myDate(.TextValC) Then
                        bFound = True
                    End If
                Else
                    If Trim(LCase(xlSheet.Cells(i, iColC))) <> Trim(LCase(.TextValC)) Then
                        bFound = True
                    End If
                End If
            End If

            If .CheckD.Value = True Then
                iColD = .LstFilterD.Column(0)
                If isDate(xlSheet.Cells(i, iColD)) = True Then
                    If myDate(xlSheet.Cells(i, iColD)) <> myDate(.TextValD) Then
                        bFound = True
                    End If
                Else
                    If Trim(LCase(xlSheet.Cells(i, iColD))) <> Trim(LCase(.TextValD)) Then
                        bFound = True
                    End If
                End If
            End If
            If bFound Then xlSheet.Rows(i).EntireRow.Delete
        Next i
    End With
    Unload oFrm
    Unload frmFilter
    xlApp.DisplayAlerts = False
    xlBook.SaveAs Filename:=strWB, FileFormat:=51, CreateBackup:=False
    xlApp.DisplayAlerts = True
    xlBook.Close
    Set xlSheet = Nothing
    Set xlBook = Nothing
    xlApp.Quit
    Set xlApp = Nothing
    oDoc.MailMerge.MainDocumentType = wdFormLetters
    oDoc.MailMerge.OpenDataSource name:= _
                                  strWB, ConfirmConversions:=False, ReadOnly:=False, LinkToSource:=True, _
                                  AddToRecentFiles:=False, PasswordDocument:="", PasswordTemplate:="", _
                                  WritePasswordDocument:="", WritePasswordTemplate:="", Revert:=False, _
                                  Format:=wdOpenFormatAuto, Connection:= _
                                  "Provider=Microsoft.ACE.OLEDB.12.0;User ID=Admin;Data Source=" & strWB & ";Mode=Read;Extended Properties=""HDR=YES;IMEX=1;"";Jet OLEDB:System database="""";Jet OLEDB:Registry Path="""";J" _
                                  , SQLStatement:="SELECT * FROM `Sheet1$`", SQLStatement1:="", SubType:= _
                                  wdMergeSubTypeAccess
    oDoc.Save
    FilterData = 1
    Set oDoc = Nothing
End Function

Private Function myDate(strField As String)
    If isDate(strField) = True Then
        myDate = Format(strField, "MM/dd/yyyy")
    End If
End Function

Attribute VB_Name = "ModHTML"
Option Explicit
'Reads each line of a text file to an array
'This function requires a reference to the _
 Microsoft Scripting Runtime Library

Public Function FileToArray(ByVal Filename As String, _
                            ByRef TheArray As Variant)
Dim oFSO As New FileSystemObject
Dim oFSTR As Scripting.TextStream
Dim ret As Long
Dim lCtr As Long
    If Dir(Filename) = "" Then Exit Function
    If VarType(TheArray) <> vbArray + vbString Then Exit Function
    On Error GoTo ErrorHandler
    Set oFSTR = oFSO.OpenTextFile(Filename)
    Do While Not oFSTR.AtEndOfStream
        ReDim Preserve TheArray(lCtr) As String
        TheArray(lCtr) = oFSTR.ReadLine
        lCtr = lCtr + 1
        DoEvents
    Loop
    oFSTR.Close
ErrorHandler:
    Set oFSTR = Nothing
End Function

Sub Send_As_HTML_Mail()
Dim olApp As Object
Dim oAccount As Object        'Outlook.Account
Dim oMail As Object        'Outlook.MailItem
Dim strAcc As String
    '**** Optional
Dim bStarted As Boolean
Dim i As Long
Dim strMessagePath As String
Dim strHTM() As String
    On Error Resume Next
    Set olApp = GetObject(, "Outlook.Application")
    If Err <> 0 Then
        Set olApp = CreateObject("Outlook.Application")
        bStarted = True
    End If
    On Error GoTo 0
    '++++++++++++++++++++++++++++++++++++++++
    'Set the path of the message html file
    strMessagePath = BrowseForFile
    'Set the subject test of the message
    '++++++++++++++++++++++++++++++++++++++++++
    Set oMail = olApp.CreateItem(0)
    With oMail
        FileToArray strMessagePath, strHTM
        For i = 0 To UBound(strHTM)
            .HTMLBody = .HTMLBody & strHTM(i) & vbCr
        Next i
        .Display
    End With
    Set oMail = Nothing
End Sub

Function BrowseForFile() As String
Dim fDialog As FileDialog
    Set fDialog = Application.FileDialog(msoFileDialogFilePicker)
    With fDialog
        .Title = "Select the HTML format message file to be used as body text and click OK"
        .AllowMultiSelect = False
        .Filters.Clear
        .Filters.Add "Document Files", "*.docx"
        .InitialView = msoFileDialogViewList
        If .Show <> -1 Then Exit Function
        BrowseForFile = .SelectedItems.Item(1)
    End With
End Function

Sub SendMessage(ByVal strRecipient As String, strSubject As String, strAttachments As String, strAccount As Object)
Dim i As Long
    With Application.ActiveDocument.MailEnvelope
        With .Item
            .Recipients.Add strRecipient
            .Subject = ""
            .Subject = strSubject
            .SendUsingAccount = strAccount
            .Close 0
        End With
    End With
End Sub
Attribute VB_Name = "ModHelp"
Option Explicit
Private strColor As String
Private iFont As Long
Private strHelp As String
Private strCaption As String
Private frmHeight As Long

Const hlp1 As String = "Choose the type of merge." & vbCr & vbCr & _
      "Select One to One for conventional one record per document merges and mail merge documents which contain protected form fields." & vbCr & vbCr & _
      "Select Many to One for merges which list items from several records related to a key field which contains a value common to all the records in the set." & vbCr & vbCr & _
      "The value chosen will remain selected for subsequent merges, until changed."
Const hlpcap1 As String = "Help - Merge Type"

Const hlp2 As String = "Checking the 'Retain e-mail address' check box causes " & _
      "the e-mail address entered into the text box to be retained and re-inserted the next time the application is run." & vbCr & vbCr & _
      "This may be cancelled at any time, by unchecking the check box."
Const hlpcap2 As String = "Help - Copies"

Const hlp3 As String = "The CC/BCC options allow for additional recipients for the e-mail messages created by the add-in. " & vbCr & vbCr & _
      "You may enter an e-mail address in the text box, which will be added to all messages, and/or select an e-mail address field from the data source." & vbCr & vbCr & _
      "If you choose the BCC option, the original recipients will not see to whom the copies have been sent."

Const hlp4 As String = "If the child fields are in a table, ensure that the 'Child Fields are in a Table' check box is checked. The check box ensures that table rows are created for each child level entry." & vbCr & vbCr & _
      "When this box is unchecked, the function instead uses the 'child separator', which is determined by the pair of buttons beneath the check box. These buttons provide two options:" & vbCr & vbCr & _
      " 1. The items are separated by a paragraph break - indicated on the button by the pilcrow symbol - '|fffd|'." & vbCr & vbCr & _
      " 2. The items are separated by a comma and a space. When this option is selected the last item in the list may be separated from the other items with ' and ' or ' or '."
Const hlpcap4 As String = "Help - Child Fields"

Const hlp5 As String = "In order for the function to add attachments named in a mergefield ( or fields), the mergefield must contain the full path of the file to be attached, " & _
      "e.g. 'C:\Path\Filename.ext' and that path must be valid." & vbCr & vbCr & _
      "In the case of Many to One merges, the attachment data is read from the key record (i.e. the first record of each set containing the key field)." & vbCr & vbCr & _
      "In addition, an attachment common to all messages may be selected."
Const hlpcap5 As String = "Help - Merge with Attachments"

Const hlp6 As String = "The function permits the selection of a child field to be used in a list, independently of the child fields selected from the 'Merge' tabbed page e.g. to create a series of signature prompts for a contract document." & vbCr & vbCr & _
      "The same child field used here may also be used in the main body of the document, with the list settings attributed to it from the main 'Merge ' tabbed page." & vbCr & vbCr & _
      "By using the leading and trailing text boxes, a variety of spacing options can be created. An indication of the layout is shown in the 'Independent List Layout' display panel." & vbCr & vbCr & _
      "Use SHIFT+Enter to create a new line in either text box." & vbCr & vbCr & _
      "TABs may be included in either text box, by typing '[TAB]' (without the quotes) in the text box, to work in conjunction with TABs set in the paragraph style applied to the field used to display the results in the merge document." & vbCr & vbCr & _
      "Regretably it is not possible to display the spacing provided by the TAB in the 'Independent List Layout' display panel." & vbCr & vbCr & _
      "The values and associated text are assigned to a docvariable named 'varSig'. To reproduce the content of that variable, a DocVariable field " & _
      "{ DOCVARIABLE varSig } must exist at the required location in the merge document, before running this process." & vbCr & vbCr & _
      "The 'Insert List Field' option in the add-in's ribbon group will facilitate that by " & _
      "inserting the DocVariable field with the required syntax at the current cursor position in the document."
Const hlpcap6 As String = "Help - Independent List Field"

Const hlp7 As String = "The HTML option enables a Word document to be selected for use as the covering message body, in place of the simple plain text message which may be entered in the 'Text for covering email message' text box." & vbCr & vbCr & _
      "Because e-mail message and Word document formats are entirely different, be aware that the covering message may not appear exactly as it does in Word. Check the format of the covering document in Word's web view before saving it for use here." & vbCr & vbCr & _
      "The Word document format enables personalized covering messages to be employed. To take advantage of this ability, temporarily attach the same data source that you will be using for the merge process to the covering message document. Personalize using merge fields from the data source, then set the document type to 'Normal Word Document' " & _
      "before saving the document."
Const hlpcap7 As String = "Help - Import Message Body"

Const hlp8 As String = "When a One to One merge is selected, a 'key' field is required. In this context a key field can be any field that contains unique data in consecutive records. The key field is only use to determine which records to merge." & vbCr & vbCr & _
      "If the value of the key field in the current record is identical to the value of the key field in the previous record, the record is ignored. " & vbCr & vbCr & _
      "This is only likely to be problematical with data sources that may also be used for Many to One merges, which have key fields that contain identical data for several records. In such a case choose an altenative field as key field for this process."
Const hlpcap8 As String = "Help - One to One Key Field"

Const hlp9 As String = "When a merge option to separate documents is selected, a 'filename' field is required. This can be any field that contains unique data in consecutive records. The key field is only use to determine which records to merge." & vbCr & vbCr & _
      "If the value of the filename field in the current record is identical to the value of the filename field in the previous record, the record is ignored. " & vbCr & vbCr & _
      "This is only likely to be problematical with data sources that may also be used for Many to One merges, where there may be key fields that contain identical data for several consecutive records. In such a case do not use the key field to name the documents."
Const hlpcap9 As String = "Help - File Name Field"

Const hlp10 As String = "Throughout the application, the question mark buttons provide context sensitive help on the various functions."
Const hlpcap10 As String = "Help - Information Buttons"

Const hlp11 As String = "Additional file naming options allow the content of a second field to be included in the filename construction, with or without accompanying text. This could be used, for example, to add descriptive text or the current date etc." & vbCr & vbCr & _
      "The accompanying text, where used, can be inserted before or after the field values, and you may choose the separator character." & vbCr & vbCr & _
      "Where a second field is selected, the value from that field can be placed to appear in the filename, before or after the value from the filename field selected from the main dialog."
Const hlpcap11 As String = "Help - File Naming Options"

Const hlp12 As String = "The default configuration is for POP/IMAP email accounts. Exchange Server accounts are handled differently from POP/IMAP accounts, and with such an account you may not send from an account other than the default account. " & vbCr & vbCr & _
      "It is however possible to send 'On behalf of' an alternative account and checking the 'Exch.' check box selects the alternative mode. The type of account should be detected automatically, but if you are using an Exchange Server account and the box is not checked, you must check it to enable the function to work correctly." & vbCr & vbCr & _
      "The default setting for POP/IMAP accounts is the Outlook default e-mail account, and this is displayed in the list box." & vbCr & vbCr & "Note: Clicking the 'Exch.' check box will clear any list box selection displayed. No value here is treated as the default account selection."
Const hlpcap12 As String = "Help - Email Accounts"

Const hlp13 As String = "The add-in allows the use of multiple e-mail addresses in the e-mail field, each separated by a semi-colon. Checking the BCC check box causes " & _
      "the message to be sent to each address as a blind copy, i.e. the recipient will not see who else the message has been sent to." & vbCr & vbCr & _
      "The BCC function works in conjunction with the similar function on the 'Copy to Third Party' tab, which allows the addition of a recipient " & _
      "not listed in the data, but is common to all records. e.g. to send a copy to a supervisor."
Const hlp14 As String = "The filename field selected from the main Merge tabbed page may be supplemented with the value of a second field and or fixed text." & vbCr & vbCr & "The Transpose option swaps the positions of the two fields." & vbCr & vbCr & _
      "The Prefix and Suffix buttons position the associated text before or after the filename field(s)."
Const hlpcap14 As String = "Help - Filenames"
Const hlp15 As String = "While you can select the account from which you wish to send the messages, you may wish to direct replies to another address." & vbCr & vbCr & _
      "Enter in this section the address you wish the replies to be sent to." & vbCr & vbCr & "If you check the 'Retain 'reply-to' address' check box, the value will re stored for re-use."
Const hlpcap15 As String = "Help - Reply To Address"
Const hlp16 As String = "The merge function provides for a second list of data, from records relating to a single child field - available in the application from the List Field tab. This field works in conjunction with a document variable and a docvariable field." & vbCr & vbCr & _
      "The field is intended for use as a signature block, e.g. for contract documents, but it can be used to list the values from any single field each to a separate line, with or without leading and trailing text. For more information, please see the web page." & vbCr & vbCr & _
      "The field can be entered in the document manually, but this function ensures the correct syntax for use by the application."
Const hlpcap16 As String = "Help - List Field Variable"

Function ShowHelp(ByRef lngHelp As Long)
    strColor = wdColorBlue
    iFont = 13

    Select Case lngHelp
        Case 1: strHelp = hlp1: strCaption = hlpcap1: frmHeight = 254
        Case 2: strHelp = hlp2: strCaption = hlpcap2: frmHeight = 166
        Case 3: strHelp = hlp3: strCaption = hlpcap2: frmHeight = 226
        Case 4: strHelp = hlp4: strCaption = hlpcap4: frmHeight = 304
        Case 5: strHelp = hlp5: strCaption = hlpcap5: frmHeight = 226
        Case 6: strHelp = hlp6: strCaption = hlpcap6: frmHeight = 570
        Case 7: strHelp = hlp7: strCaption = hlpcap7: frmHeight = 336
        Case 8: strHelp = hlp8: strCaption = hlpcap8: frmHeight = 274
        Case 9: strHelp = hlp9: strCaption = hlpcap9: frmHeight = 290
        Case 10: strHelp = hlp10: strCaption = hlpcap10: frmHeight = 116
        Case 11: strHelp = hlp11: strCaption = hlpcap11: frmHeight = 256
        Case 12: strHelp = hlp12: strCaption = hlpcap12: frmHeight = 336
        Case 13: strHelp = hlp13: strCaption = hlpcap2: frmHeight = 226
        Case 14: strHelp = hlp14: strCaption = hlpcap14: frmHeight = 196
        Case 15: strHelp = hlp15: strCaption = hlpcap15: frmHeight = 196
        Case 16: strHelp = hlp16: strCaption = hlpcap15: frmHeight = 276
        Case Else: strHelp = "Help for this function under development.": frmHeight = 100: strCaption = "Under Development"
    End Select

    With frmHelp
        .Height = frmHeight
        .lblHelp.Height = .Height - 84
        .cbOK.Top = .Height - 60
        .Caption = strCaption
        With .lblHelp
            .Font.Size = iFont
            .ForeColor = strColor
            .Caption = strHelp
            .TextAlign = fmTextAlignLeft
        End With
        Beep
        RemoveCloseButton frmHelp

        .Show
    End With
    Unload frmHelp
End Function



Attribute VB_Name = "ModManytoOneEmail"
Option Explicit
'variable declarations in modDeclare
Sub ManyToOne()
    Set xlApp = Nothing
    Set xlBook = Nothing
    Set xlSheet = Nothing
    Set olApp = Nothing
    Set oItem = Nothing
    Set objDoc = Nothing
    Set olMailItems = Nothing
    Set oMail = Nothing
    Set olAccount = Nothing
    Set olNS = Nothing
    Set oRoot = Nothing
    Set colStores = Nothing
    Set oStore = Nothing
    Set ifolder = Nothing
    Set iNewFolder = Nothing
    Set fso = Nothing
    Set oDoc = Nothing
    Set oErrDoc = Nothing
    Set oTemp = Nothing

    bUseFilter = False
    bFilter = False

    AppVer = ThisDocument.name
    AppVer = Right(AppVer, Len(AppVer) - InStr(AppVer, "Ver ") - 3)
    AppVer = Left(AppVer, Len(AppVer) - 5)

    If Documents.Count = 0 Then
        ShowError 17, 2
        Unload frmErr1
        Exit Sub
    End If

    Set oDoc = ActiveDocument
    MainDoc = ActiveDocument.FullName

    If GetSetting(AppID, "Config", "Filter") = "" Then
        SaveSetting AppID, "Config", "Filter", True
    End If

    bUseFilter = GetSetting(AppID, "Config", "Filter")

    If bUseFilter = True Then
        Select Case FilterData
            Case 0
                ActiveDocument.Close
                If FileExists(MainDoc) Then
                    Documents.Open MainDoc
                End If
            Case 2
                Exit Sub
            Case Else
        End Select
        GoTo Start:
    End If

    If GetSetting(AppID, "Config", "Validate e-mails") = "" Then
        SaveSetting AppID, "Config", "Validate e-mails", True
    End If
    bValidate = CBool(GetSetting(AppID, "Config", "Validate e-mails"))

    With oDoc.MailMerge
        If .MainDocumentType <> wdFormLetters Then
            ShowError 2, 2
            Unload frmErr1
            Exit Sub
        End If

        For Each oFld In oDoc.Fields
            If oFld.Type = wdFieldAddressBlock Then
                ShowError 17, 28
                Unload frmErr1
                Exit Sub
            End If
        Next oFld

        If Len(.DataSource.name) = 0 Then
            ShowError 3, 3
            Unload frmErr1
            Exit Sub
        End If

        If Right(.DataSource.name, 4) <> "xlsx" And Right(.DataSource.name, 3) <> "xls" Then
            ShowError 4, 4
            Unload frmErr1
            Exit Sub
        End If
    End With

    With oDoc
        If .Saved = False Then
            ShowError 5, 5, True
            If frmErr1.Tag = 1 Then
                Unload frmErr1
                .Save
            Else
                Unload frmErr1
                Exit Sub
            End If
        End If
    End With
Start:
    bStarted = False
    m = 0
    bStarted = False

    Set oDoc = ActiveDocument

    sPassword = ""
    bIsForm = False

    If oDoc.FormFields.Count > 0 Then
        If oDoc.ProtectionType <> wdNoProtection Then
            bIsForm = True
        Else
            ShowError 14, 20, True
            If frmErr1.Tag = 1 Then
                Unload frmErr1
                With frmPassword
                    .LabelPwd.Caption = "Please enter a password to protect the forms, " & _
                                        "or leave blank for no password."
                    .TxtPassword.SetFocus
                    RemoveCloseButton frmPassword
                    .Show
                    sPass1 = Trim(.TxtPassword.Text)
                    Unload frmPassword
                End With
                'a password has been entered
                If sPass1 <> "" Then
                    With frmPassword
                        .LabelPwd.Caption = "Please re-enter to confirm the password to protect the forms."
                        .TxtPassword.SetFocus
                        RemoveCloseButton frmPassword
                        .Show
                        sPass2 = Trim(.TxtPassword.Text)
                        Unload frmPassword
                    End With
                    If sPass1 = sPass2 Then
                        sPassword = sPass1
                    Else
                        Unload frmPassword
                        ShowError 16, 22
                        Unload frmErr1
                        'GoTo NoPass
                        oDoc.Close wdDoNotSaveChanges
                        If FileExists(MainDoc) Then
                            Documents.Open MainDoc
                            ShowError 17, 9
                        End If
                        Unload frmErr1

                        GoTo CleanUp
                    End If
                End If

                oDoc.Protect _
                        Type:=wdAllowOnlyFormFields, _
                        NoReset:=True, _
                        Password:=sPassword
                bIsForm = True
            Else
                Unload frmErr1
                bIsForm = False
            End If
        End If
    End If

    On Error GoTo ErrMsg
    'On Error GoTo 0
    'Get the details of the datasource
    With oDoc.MailMerge.DataSource
        dSource = .name
        numfldsA = .FieldNames.Count
    End With

    Set xlApp = CreateObject("Excel.Application")
    With xlApp
        Set xlBook = .Workbooks.Open(dSource)
        Set xlSheet = xlBook.Worksheets(1)

        'Check validity of worksheet
        If CheckHash(xlSheet) = True Then
            bHash = True
            xlBook.Close SaveChanges:=False
            GoTo ErrMsg:
        End If

        If CheckWorksheet(xlSheet) = True Then
            xlBook.Close SaveChanges:=False
            bSheet = True
            GoTo ErrMsg:
        End If

        If CheckEmptyFields(xlApp, xlSheet) = True Then
            bEmpty = True
            xlBook.Close SaveChanges:=False
            GoTo ErrMsg:
        End If

        numflds = xlSheet.Cells(1, xlSheet.Columns.Count).End(-4159).Column
        numrecs = xlSheet.Range("A" & xlSheet.Rows.Count).End(-4162).Row
        MergeData = xlSheet.Range("A1").CurrentRegion.Value
        MergeFields = xlSheet.Range("A1").CurrentRegion.Rows(1)
        xlBook.Close SaveChanges:=False
        Set xlSheet = Nothing
        Set xlBook = Nothing
    End With
    xlApp.Quit
    Set xlApp = Nothing

    If numfldsA <> numflds Then
        ShowError 17, 23
        Unload frmErr1
        ActiveDocument.Close wdDoNotSaveChanges
        If FileExists(MainDoc) Then
            Documents.Open MainDoc
            ShowError 17, 9
        End If
        Unload frmErr1

        GoTo CleanUp
    End If

    If numflds = 1 Then
        ShowError 17, 39
        Unload frmErr1
    End If

    If IsOutlook Then
        On Error Resume Next
        Set olApp = GetObject(, "Outlook.Application")
        If Err <> 0 Then
            Set olApp = CreateObject("Outlook.Application")
            bStarted = True
        End If

        On Error GoTo ErrMsg2

        Set olNS = olApp.GetNamespace("MAPI")
        olNS.logon
        strDefaultAcct = olNS.Accounts.Item(1)
        strDefaultStore = olNS.DefaultStore

        'Double check values have been read
        If strDefaultStore = "" Then strDefaultStore = olApp.Session.DefaultStore
        If strDefaultAcct = "" Then strDefaultAcct = olApp.Session.Accounts.Item(1)

        'On Error GoTo 0
        strSigPath = "C:\Users\" & Environ("username") & _
                     "\AppData\Roaming\Microsoft\Signatures\"
        If Dir(strSigPath) = "" Then
            strSigPath = "C:\Documents and Settings\" & Environ("username") & _
                         "\Application Data\Microsoft\Signatures\"
        End If
    End If
    'Start Form +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    If GetSetting(AppID, "Disclaimer", "Show on Start") = "" Then
        SaveSetting AppID, "Disclaimer", "Show on Start", True
    End If

    With frmMFForm
        'Save default settings in registry
        SaveSetting AppID, "Config", "Current Version", AppVer
        .Caption = AppCaption & "Version " & AppVer & " - Many to One"

        .CheckShow.Value = GetSetting(AppID, "Disclaimer", "Show on Start")


        If GetSetting(AppID, "Config", "Exchange Account") = "" Then
            SaveSetting AppID, "Config", "Exchange Account", False
        End If

        If GetSetting(AppID, "Config", "BCC") = "" Then
            SaveSetting AppID, "Config", "BCC", False
        End If
        If GetSetting(AppID, "Config", "AddBCC") = "" Then
            SaveSetting AppID, "Config", "AddBCC", True
        End If
        If GetSetting(AppID, "Config", "Option Many") = "" Then
            If numflds = 1 Then
                SaveSetting AppID, "Config", "Option Many", False
            Else
                SaveSetting AppID, "Config", "Option Many", True
            End If
        End If
        If Not bUseFilter Then
            'Set Userform start location
            If .CheckShow.Value = True Then
                .FrameDisclaimer.Left = 8
                .Height = 554
                .FrameInfo.Visible = False
                .FrameMergeType.Visible = False
            Else
                .FrameDisclaimer.Left = 420
                .Height = 402
                .FrameInfo.Visible = True
                .FrameMergeType.Visible = True
            End If
        Else
            .FrameDisclaimer.Left = 420
            .Height = 402
            .FrameInfo.Visible = True
            .FrameMergeType.Visible = True
        End If
        .MultiPage1.Height = .Height - 64
        .CmdCancel.Top = .Height - 50        '57
        .cmdContinue.Top = .Height - 50        '57
        .Image1.Top = .Height - 50        '58
        .Top = Application.Top
        .Left = Application.Left + ((Application.Width - .Width) / 2)
        .MultiPage1.Value = 0
        'Check whether to show disclaimer text

        .Width = 400        '408
        .MultiPage1.Width = 384
        'Replace problem characters in field names vis-vis docvariable names
        With .lstMergeFields
            If numflds = 1 Then
                .AddItem
                .List(0, 0) = 1
                .List(0, 1) = FixName(MergeFields)
            Else
                For i = 1 To numflds
                    .AddItem
                    .List(i - 1, 0) = i
                    .List(i - 1, 1) = FixName(MergeFields(1, i))
                Next i
            End If
        End With

        'Fill document destinations
        With .cmbDestination
            .Clear
            .AddItem "Merge to Individual Word Files"
            .AddItem "Merge to Individual PDF Files"
            If IsPrinter("PDFCreator") Then
                .AddItem "Merge to Individual PDF Files (using PDFCreator)"
            End If
            .AddItem "Merge to Printer"
            If IsOutlook Then
                .AddItem "Merge to Email Message"
                .AddItem "Merge to Email as Word Attachment"
                .AddItem "Merge to Email as PDF Attachment"
                If IsPrinter("PDFCreator") Then
                    .AddItem "Merge to Email as PDF Attachment (using PDFCreator)"
                End If
            End If
            .ListIndex = -1
        End With

        With .cmbImportance
            .Clear
            .AddItem
            .List(0, 0) = "Low"
            .List(0, 1) = 0
            .AddItem
            .List(1, 0) = "Normal"
            .List(1, 1) = 1
            .AddItem
            .List(2, 0) = "High"
            .List(2, 1) = 2
            .ListIndex = 1
        End With

        'Get gefault e-mail account
        'Fill accounts list
        If IsOutlook Then
            With .lstAccounts
                .Clear
                For Each olAccount In olApp.Session.Accounts
                    .AddItem olAccount
                    If olAccount = strDefaultAcct Then
                        Select Case (olAccount.AccountType)
                            Case 0        'olExchange
                                bExchange = True
                            Case 1        'olImap
                                bExchange = False
                            Case 2        ' olPop3
                                bExchange = False
                            Case 3        'olHttp
                                bExchange = False
                            Case 5        'olOtherAccount
                                bExchange = False

                        End Select
                    End If
                Next olAccount
                .ListIndex = 0
            End With
        End If
        .CheckExchange.Value = bExchange


        'Copy mergefields to other field listboxes
        .cmbEmail.List = .lstMergeFields.List
        .cmbFileName.List = .lstMergeFields.List
        .CmbCC.List = .lstMergeFields.List
        .lstAttachFields.List = .lstMergeFields.List
        .cmbSubject.List = .lstMergeFields.List

        'Set startup display values
        .cmdContinue.Enabled = False
        .lblEmailAddress.Visible = False
        .cmbEmail.Visible = False
        .lblEmailSubject.Visible = False
        .txtEmailSubject.Visible = False
        .lblMsgText.Visible = False
        .txtEmailMessage.Visible = False
        .LstSignature.Visible = False
        .LblSig.Visible = False
        .lstAccounts.Visible = False
        .lblAccounts.Visible = False

        'Fill signatures list box
        If IsOutlook Then
            With .LstSignature
                .AddItem "No Signature"
                If fso.FolderExists(strSigPath) Then
                    Set fldrSignatures = fso.GetFolder(strSigPath)
                    For Each flSig In fldrSignatures.Files
                        If InStr(1, flSig.name, ".txt") <> 0 Then
                            .AddItem Left(flSig.name, Len(flSig.name) - 4)
                        End If
                    Next flSig
                End If
                Set fso = Nothing
                Set flSig = Nothing
                Set fldrSignatures = Nothing
                .ListIndex = 0
            End With
        End If

        'If merge document contains form fields set the initial form values
        If bIsForm = True Then
            .OptMany.Value = False
            .OptMany.Enabled = False
            .OptOne.Value = True
            .OptOne.Enabled = True
            .OptOne.Caption = "Merge Protected Form"
        Else
            If numflds = 1 Then
                .OptMany.Value = False
                .OptOne.Value = Not .OptMany.Value
                .OptMany.Enabled = False
                .OptOne.Enabled = True
                .OptOne.Caption = "Merge One to One"
            Else
                .OptMany.Value = GetSetting(AppID, "Config", "Option Many")
                .OptMany.Enabled = True
                .OptOne.Value = Not .OptMany.Value
                .OptOne.Enabled = True
                .OptOne.Caption = "Merge One to One"
            End If
        End If

        RemoveCloseButton frmMFForm

        .Show vbModal        'Display the form

        'User has clicked Cancel - so Quit
        If .Tag = 0 Then
            Unload frmMFForm
            Set frmMFForm = Nothing
            ActiveDocument.Close wdDoNotSaveChanges
            On Error Resume Next
            If FileExists(MainDoc) Then
                Documents.Open MainDoc
                ShowError 17, 9
            End If
            Unload frmErr1

            GoTo CleanUp
        End If

        bReceipt = .CheckReceipt.Value
        iImportant = .cmbImportance.Column(1)

        'Store the values for an added recipient
        bAddCC = False
        If .OptBCC.Value = True Then
            bAddCC = True
        End If
        strCC = .TextCCAddr.Text
        strReplyTo = .TextReplyTo.Text

        'Store the values for using a pre-prepared e-mail message in Word format
        bIsHTML = .CheckHTML.Value
        strHTMLPath = .txtHTML.Text

        'Record if attachments have been selected from the data source
        If .lstAttachAddedFields.ListCount > 0 Then
            flagFields = True
            AttachmentFields = .lstAttachAddedFields.List
        Else
            flagFields = False
        End If
        'Record if a common attachment has been entered in the userform
        If .lstAttachments.ListCount > 0 Then
            flagFiles = True
            AttachmentFiles = .lstAttachments.List
        Else
            flagFiles = False
        End If

        'Record the choice of e-mail signature
        If .LstSignature.Value <> "No Signature" Then
            strSigPath = "C:\Users\" & Environ("username") & _
                         "\AppData\Roaming\Microsoft\Signatures\" & _
                         .LstSignature.Value & ".txt"
            If Dir(strSigPath) = "" Then
                strSigPath = "C:\Documents and Settings\" & Environ("username") & _
                             "\Application Data\Microsoft\Signatures\" & _
                             .LstSignature.Value & ".txt"
            End If
            If Dir(strSigPath) <> "" Then
                Signature = GetText(strSigPath)
            Else
                Signature = ""
            End If
        Else
            Signature = ""
        End If

        'record the sending account
        strAccount = .lstAccounts.Value
        bExchange = .CheckExchange.Value
        strProxy = .TextProxy.Text

        'record the keyfield and e-mail field indices
        KeyField = Val(.txtKeyIndex)
        Email = Val(.txtEmailIndex)

        'Record whether one or two file naming fields have been selected
        If InStr(1, .txtFileNameIndex, "|") > 0 Then
            vFname = Split(.txtFileNameIndex, "|")
            fName = 0
        Else
            fName = Val(.txtFileNameIndex)
        End If

        'Record the chosen layout of the filename
        strTempFormat = .txtFormat.Text
        'Record the email field name
        strEmailField = .cmbEmail.Text

        'Record is a field is to be used in the e-mail message subject
        If .cmbSubject.Value <> "" Then
            iSubject = Val(.cmbSubject.Value)
        Else
            iSubject = 0
            bSubject = False
        End If

        'Record which child fields have been selected
        strChildFields = ""
        For i = 0 To .lstRepeatFields.ListCount - 1
            strChildFields = strChildFields & "|" & _
                             .lstRepeatFields.List(i, 0)
        Next i
        strChildFields = Mid(strChildFields, 2)

        strSigFields = .ListSig.Text
        strCCField = .CmbCC.Text

        'replace any TAB text with a tab character in the leading and trailing list field texts
        strLeading = Replace(.TextLeading.Text, "[TAB]", Chr(9))
        strTrailing = Replace(.TextTrailing.Text, "[TAB]", Chr(9))
        'Record the destination of the merged documents
        Select Case .cmbDestination.Value
            Case "Merge to Individual Word Files"
                strDestination = "Files"        'Set the folder location for documents
                GetFolder

            Case "Merge to Individual PDF Files"
                strDestination = "PDF"
                GetFolder        'Set the folder location for PDF files

            Case "Merge to Individual PDF Files (using PDFCreator)"
                strDestination = "Creator"
                GetFolder        'Set the folder location for PDF files

            Case "Merge to Printer"
                strDestination = "Print"

            Case "Merge to Email Message"
                strDestination = "EmailMessage"
                strSubject = .txtEmailSubject.Text
                If .CheckSubject.Value = True And .cmbSubject.Text <> "" Then
                    bSubject = True
                    If .OptPrefix.Value = True Then
                        bPrefix = True
                    Else
                        bPrefix = False
                    End If
                End If
                modMessages.AddOutlookFolder

            Case "Merge to Email as Word Attachment"
                strDestination = "EmailWordAttachment"
                GetFolder
                strSubject = .txtEmailSubject.Text
                If .CheckSubject.Value = True And .cmbSubject.Text <> "" Then
                    bSubject = True
                    If .OptPrefix.Value = True Then
                        bPrefix = True
                    Else
                        bPrefix = False
                    End If
                End If
                'Record the entered message body text
                strMessage = .txtEmailMessage
                'Create the Outlook temporary folder to store the messages
                modMessages.AddOutlookFolder

            Case "Merge to Email as PDF Attachment"
                strDestination = "EmailPDFAttachment"
                GetFolder
                strSubject = .txtEmailSubject.Text
                If .CheckSubject.Value = True And .cmbSubject.Text <> "" Then
                    bSubject = True
                    If .OptPrefix.Value = True Then
                        bPrefix = True
                    Else
                        bPrefix = False
                    End If
                End If
                'Record the entered message body text
                strMessage = .txtEmailMessage
                'Create the Outlook temporary folder to store the messages
                modMessages.AddOutlookFolder

            Case "Merge to Email as PDF Attachment (using PDFCreator)"
                strDestination = "EmailCreatorAttachment"
                GetFolder
                strSubject = .txtEmailSubject.Text
                If .CheckSubject.Value = True And .cmbSubject.Text <> "" Then
                    bSubject = True
                    If .OptPrefix.Value = True Then
                        bPrefix = True
                    Else
                        bPrefix = False
                    End If
                End If
                'Record the entered message body text
                strMessage = .txtEmailMessage
                'Create the Outlook temporary folder to store the messages
                modMessages.AddOutlookFolder

        End Select
    End With

    'Now finished with the userform so unload it.
    Unload frmMFForm

    On Error Resume Next
    bProtected = False
    With oDoc
        If .ProtectionType <> wdNoProtection Then
            bProtected = True
            iCount = 0
            sPassword = GetPassWord(sPassword)        'unprotect form
            If sPassword = "NoPassword" Then
                oDoc.Close wdDoNotSaveChanges
                If FileExists(MainDoc) Then
                    Documents.Open MainDoc
                    ShowError 17, 9
                End If
                Unload frmErr1
                GoTo CleanUp
            End If
        End If

        'Convert the MERGEFIELDS to DOCVARIABLE fields
        For Each oStory In oDoc.StoryRanges
            For i = 1 To oStory.Fields.Count
                If oStory.Fields(i).Type = wdFieldMergeField Then
                    Set mfCode = oStory.Fields(i).Code
                    mfCode = Replace(LCase(mfCode), "mergefield", "DOCVARIABLE")
                End If
            Next i
            If oStory.StoryType <> wdMainTextStory Then
                While Not (oStory.NextStoryRange Is Nothing)
                    Set oStory = oStory.NextStoryRange
                    For i = 1 To oStory.Fields.Count
                        If oStory.Fields(i).Type = wdFieldMergeField Then
                            Set mfCode = oStory.Fields(i).Code
                            mfCode = Replace(LCase(mfCode), "mergefield", "DOCVARIABLE")
                        End If
                    Next i
                Wend
            End If
        Next oStory

        'Convert the Mail Merge Main document to a normal Word document
        .MailMerge.MainDocumentType = wdNotAMergeDocument
    End With

    ChildFields = Split(strChildFields, "|")
    SigFields = Split(strSigFields, "|")

    '*********************************************************************
    'Check for presence of email addresses
    If InStr(1, strDestination, "Email") > 0 Then
        On Error GoTo 0
        strError = ""

        strAddressError = ""
        iErr = 0
        For k = 2 To numrecs
            strEmail = MergeData(k, Email)
            If isEmailInvalid(Trim(strEmail)) Then
                If strEmail = "" Then
                    strErrorText = "No e-mail address listed."
                Else
                    strErrorText = strEmail
                End If
                strError = strError & k & ", "
                iErr = iErr + 1
                strAddressError = strAddressError & "Record " & k & vbTab & strErrorText & vbCr
            End If
        Next k

        If iErr > 0 And iErr < numrecs * 0.75 Then
            ShowError 12, 17, False, Left(strError, Len(strError) - 2), iErr
            Unload frmErr1
            Set oErrDoc = Documents.Add
            oErrDoc.Range.Text = strAddressError
            If iErr = 1 Then
                oErrDoc.Range.InsertBefore "The email address in the following record is invalid:" & vbCr
            Else
                oErrDoc.Range.InsertBefore "The email addresses in the following records are invalid:" & vbCr
            End If
            With oErrDoc.Range
                .NoProofing = True
                .Font.name = "Calibri"
                .Font.Size = 12
                .Font.Bold = False
                .Font.Italic = False
                .ParagraphFormat.SpaceAfter = 12
                .Paragraphs(1).Range.Font.Size = 14
            End With

            oDoc.Close wdDoNotSaveChanges
            If FileExists(MainDoc) Then
                Documents.Open MainDoc
                ShowError 17, 9
            End If
            Unload frmErr1

            oErrDoc.Activate

            GoTo CleanUp
        End If
        If iErr >= numrecs * 0.75 Then
            ShowError 12, 18, False, strEmailField
            Unload frmErr1

            oDoc.Close wdDoNotSaveChanges
            If FileExists(MainDoc) Then
                Documents.Open MainDoc
                ShowError 17, 9
            End If
            Unload frmErr1

            GoTo CleanUp

        End If
    End If
    '*********************************************************************
    oDoc.Variables("varSig").Value = " "
    strSig = ""

    Set oFrm = New frmProgress
    With oFrm
        If InStr(1, strDestination, "Email") > 0 Then
            .Height = 120        '142
            .Label2.Visible = True
        Else
            .Height = 72        '88
            .Label2.Visible = False
        End If
        .Show vbModeless
    End With
    Application.ScreenUpdating = False
    For k = 2 To numrecs

        PortionDone = k / numrecs        'This is a decimal fraction
        oFrm.lblProgress.Width = oFrm.fmeProgress.Width * PortionDone
        oFrm.Caption = "Processing record " & k - 1
        DoEvents

        strKey = MergeData(k, KeyField)
        'Create variables in the document with the names and values of the fields in each record
        If numflds = 1 Then
            If Trim(strSigFields) = Trim(MergeFields) Then
                strSig = MergeData(k, 1) & "[|fffd|]"
            End If

            If Trim(strCCField) = Trim(MergeFields) Then
                strCCA = MergeData(k, 1)
                If isEmailInvalid(Trim(strCCA)) Then
                    strCCA = ""
                End If
            End If

            If MergeData(k, i) <> "" Then
                oDoc.Variables(MergeFields).Value = MergeData(k, 1)
            Else
                oDoc.Variables(MergeFields).Value = Chr(151)
                'oDoc.Variables(MergeFields).Value = " "
            End If
        Else
            For i = 1 To numflds
                If Trim(strSigFields) = Trim(MergeFields(1, i)) Then
                    strSig = MergeData(k, i) & "[|fffd|]"
                End If

                If Trim(strCCField) = Trim(MergeFields(1, i)) Then
                    strCCA = MergeData(k, i)
                    If isEmailInvalid(Trim(strCCA)) Then
                        strCCA = ""
                    End If
                End If

                If MergeData(k, i) <> "" Then
                    oDoc.Variables(MergeFields(1, i)).Value = MergeData(k, i)
                Else
                    oDoc.Variables(MergeFields(1, i)).Value = Chr(151)
                    'oDoc.Variables(MergeFields(1, i)).Value = " "
                End If
            Next i
        End If

        If bMany = True Then
            If k + 1 <= numrecs Then
                If MergeData(k, KeyField) = strKey Then
                    With oDoc
                        If strDestination = "EmailMessage" Then
                            strFname = "NoName"
                        Else
                            Select Case fName
                                Case 0
                                    For iFname = 0 To 1
                                        strFTempName = FixChars(MergeData(k, Val(vFname(iFname))))
                                        If iFname = 0 Then
                                            If Trim(strFTempName) = "" Then
                                                strFTempName = "NoName " & m
                                                m = m + 1
                                            End If
                                            strFname = Replace(strTempFormat, "Field1", strFTempName)
                                        Else
                                            strFname = Replace(strFname, "Field2", strFTempName)
                                        End If
                                    Next iFname
                                Case Else
                                    strFTempName = FixChars(MergeData(k, fName))
                                    If Trim(strFTempName) = "" Then
                                        strFTempName = "NoName " & m
                                        m = m + 1
                                    End If
                                    strFname = Replace(strTempFormat, "Field1", strFTempName)
                            End Select
                        End If
                    End With
                End If
            End If
        End If

Repeat:
        If k + 1 <= numrecs Then
            If MergeData(k + 1, KeyField) = strKey Then
                k = k + 1
                For j = 0 To UBound(ChildFields)
                    i = Val(ChildFields(j))
                    If GetSetting(AppID, "Config", "Child Fields in Table") = True Then
                        oDoc.Variables(MergeFields(1, i)).Value = oDoc.Variables(MergeFields(1, i)).Value & "[~]" & _
                                                                  MergeData(k, i)
                    Else
                        If Trim(MergeData(k, i)) <> "" Then
                            oDoc.Variables(MergeFields(1, i)).Value = oDoc.Variables(MergeFields(1, i)).Value & "[~]" & _
                                                                      MergeData(k, i)
                        End If
                    End If
                    If Trim(strSigFields) = Trim(MergeFields(1, i)) Then
                        strSig = strSig & "[|fffd|]" & MergeData(k, i)
                        strSig = Replace(strSig, "[|fffd|][|fffd|]", "[|fffd|]")
                    End If
                Next j
                GoTo Repeat
            End If
        End If

        With oDoc
            If Trim(Replace(strSig, "[|fffd|]", "")) <> "" Then
                If Right(Trim(strSig), 3) = "[|fffd|]" Then
                    strSig = strLeading & Trim(Replace(strSig, "[|fffd|]", "")) & strTrailing
                Else
                    strSig = strLeading & strSig & strTrailing
                End If
                oDoc.Variables("varSig").Value = Replace(strSig, "[|fffd|]", strTrailing & strLeading)
            Else
                oDoc.Variables("varSig").Value = " "
            End If

            strSig = ""
            UpdateAllFields
            .UndoClear
            For i = .Fields.Count To 1 Step -1
                If InStr(.Fields(i).result, "[~]") > 0 Then
                    strResult = .Fields(i).result
                    Set mfCode = .Fields(i).result

                    .Fields(i).Unlink
                    If GetSetting(AppID, "Config", "Separator") = True Then
                        If GetSetting(AppID, "Config", "Child Fields in Table") = True Then
                            mfCode.Text = strResult
                        Else
                            mfCode.Text = Replace(strResult, "[~]", vbCr)
                        End If
                    Else
                        If GetSetting(AppID, "Config", "AndOr") = True Then
                            strAndOr = " and "
                        Else
                            strAndOr = " or "
                        End If
                        strResult = Left(strResult, InStrRev(strResult, "[~]") - 1) & _
                                    strAndOr & _
                                    Right(strResult, Len(strResult) - InStrRev(strResult, "[~]") - 2)
                        mfCode.Text = Replace(strResult, "[~]", ", ")
                    End If
                ElseIf .Fields(i).result = " " Then
                    Set rngEmpty = .Fields(i).result.Duplicate
                    rngEmpty.End = rngEmpty.End + 2
                    If rngEmpty = .Fields(i).result.Paragraphs(1).Range Then
                        .Fields(i).result.Paragraphs(1).Range.Delete
                    Else
                        .Fields(i).Delete
                    End If
                End If
            Next i


            If bMany = False Then
                With oDoc
                    If strDestination = "EmailMessage" Then
                        strFname = "NoName"
                    Else
                        Select Case fName
                            Case 0
                                For iFname = 0 To 1
                                    strFTempName = MergeData(k, Val(vFname(iFname)))
                                    FixChars strFTempName
                                    If iFname = 0 Then
                                        If Trim(strFTempName) = "" Then
                                            strFTempName = "NoName " & m
                                            m = m + 1
                                        End If
                                        strFname = Replace(strTempFormat, "Field1", strFTempName)
                                    Else
                                        strFname = Replace(strFname, "Field2", strFTempName)
                                    End If
                                Next iFname
                            Case Else
                                strFTempName = MergeData(k, fName)
                                FixChars strFTempName
                                If Trim(strFTempName) = "" Then
                                    strFTempName = "NoName " & m
                                    m = m + 1
                                End If
                                strFname = Replace(strTempFormat, "Field1", strFTempName)
                        End Select
                    End If
                End With
            End If


            If GetSetting(AppID, "Config", "Child Fields in Table") = True Then
                SplitTable oDoc
            End If

            If bIsForm Then
                If .ProtectionType = wdNoProtection Then
                    .Protect Type:=wdAllowOnlyFormFields, _
                             NoReset:=True, _
                             Password:=sPassword
                End If
            End If

            UpdateAllFields

            If bSubject = True Then
                If bPrefix = True Then
                    strSubjectText = MergeData(k, iSubject) & Chr(32) & strSubject
                Else
                    strSubjectText = strSubject & Chr(32) & MergeData(k, iSubject)
                End If
            Else
                strSubjectText = strSubject
            End If

            Select Case strDestination
                Case "Files"
                    If LCase(Right(strFname, 4)) <> "docx" Then strFname = strFname & ".docx"
                    .SaveAs strFolder & strFname, FileFormat:=wdFormatDocumentDefault, AddToRecentFiles:=False
                Case "PDF"
                    .ExportAsFixedFormat strFolder & strFname & ".pdf", _
                                         wdExportFormatPDF, False, _
                                         wdExportOptimizeForPrint
                Case "Creator"
                    PrintToPDFCreator strFname & ".pdf", strFolder, oDoc

                Case "Print"
                    .PrintOut background:=False

                Case "EmailMessage"
                    For Each olAccount In olApp.Session.Accounts
                        If olAccount.DisplayName = strAccount Or strAccount = "" Then
                            If flagFields = False And flagFiles = False Then
                                Set objDoc = .MailEnvelope.Item
                            Else
                                Set oTemp = Documents.Add(Template:=oDoc.FullName, Visible:=False)
                                oTemp.Range.FormattedText = oDoc.Range
                                Set objDoc = oTemp.MailEnvelope.Item
                            End If
                            With objDoc
                                While .Recipients.Count > 0
                                    .Recipients.Remove 1
                                Wend
                                While .Attachments.Count > 0
                                    .Attachments.Remove 1
                                Wend
                                While .replyrecipients.Count > 0
                                    .replyrecipients.Remove 1
                                Wend

                                If InStr(1, MergeData(k, Email), ";") > 0 Then
                                    vEmailAddress = Split(MergeData(k, Email), ";")

                                    If GetSetting(AppID, "Config", "BCC") = True Then
                                        For iAddress = 0 To UBound(vEmailAddress)
                                            .Recipients.Add(Trim(vEmailAddress(iAddress))).Type = 3
                                        Next iAddress
                                    Else
                                        .Recipients.Add(vEmailAddress(0)).Type = 1
                                        For iAddress = 1 To UBound(vEmailAddress)
                                            .Recipients.Add(Trim(vEmailAddress(iAddress))).Type = 2
                                        Next iAddress
                                    End If
                                Else
                                    If Not Trim(MergeData(k, Email)) = vbNullString Then
                                        .Recipients.Add(MergeData(k, Email)).Type = 1
                                    Else
                                        ShowError 12, 50, False, CStr(k)
                                    End If
                                End If

                                If strCC <> "" Then
                                    If bAddCC = True Then
                                        .Recipients.Add(strCC).Type = 3
                                    Else
                                        .Recipients.Add(strCC).Type = 2
                                    End If
                                End If

                                If strCCA <> "" Then
                                    If bAddCC = True Then
                                        .Recipients.Add(strCCA).Type = 3
                                    Else
                                        .Recipients.Add(strCCA).Type = 2
                                    End If
                                End If

                                If strReplyTo <> "" Then .replyrecipients.Add strReplyTo


                                If flagFields = True Then
                                    On Error Resume Next
                                    For j = 0 To UBound(AttachmentFields)
                                        .Attachments.Add MergeData(k, AttachmentFields(j, 0)), , 1
                                    Next j
                                End If

                                If flagFiles = True Then
                                    For j = 0 To UBound(AttachmentFiles)
                                        .Attachments.Add AttachmentFiles(j, 0), , 1
                                    Next j
                                End If

                                .Subject = strSubjectText
                                .OriginatorDeliveryReportRequested = bReceipt
                                .Importance = iImportant


                                If bExchange = True Then
                                    If strProxy <> "" Then
                                        .SentOnBehalfOfName = strProxy
                                    End If
                                End If

                                Set .SendUsingAccount = olAccount
                                strRecipient = .To
                                .Close 0
                            End With
                            If flagFields = True Or flagFiles = True Then
                                oTemp.Close wdDoNotSaveChanges
                            End If
                            Exit For
                        End If
                    Next olAccount
                    MoveMessages strSubjectText

                Case "EmailWordAttachment"
                    If LCase(Right(strFname, 4)) <> "docx" Then strFname = strFname & ".docx"

                    .SaveAs strFolder & strFname, FileFormat:=wdFormatDocumentDefault, AddToRecentFiles:=False
                    strAttach = ActiveDocument.FullName
                    For Each olAccount In olApp.Session.Accounts
                        If olAccount.DisplayName = strAccount Or strAccount = "" Then
                            If bIsHTML = True Then
                                Set oTemp = Documents.Add(Template:=strHTMLPath, Visible:=False)
                                With oTemp
                                    .MailMerge.MainDocumentType = wdNotAMergeDocument
                                    For Each oStory In .StoryRanges
                                        For iTemp = 1 To oStory.Fields.Count
                                            If oStory.Fields(iTemp).Type = wdFieldMergeField Then
                                                Set mfCode = oStory.Fields(iTemp).Code
                                                mfCode = Replace(LCase(mfCode), "mergefield", "DOCVARIABLE")
                                            End If
                                        Next iTemp
                                        If oStory.StoryType <> wdMainTextStory Then
                                            While Not (oStory.NextStoryRange Is Nothing)
                                                Set oStory = oStory.NextStoryRange
                                                For iTemp = 1 To oStory.Fields.Count
                                                    If oStory.Fields(iTemp).Type = wdFieldMergeField Then
                                                        Set mfCode = oStory.Fields(iTemp).Code
                                                        mfCode = Replace(LCase(mfCode), "mergefield", "DOCVARIABLE")
                                                    End If
                                                Next iTemp
                                            Wend
                                        End If
                                    Next oStory
                                    Set oStory = Nothing
                                    If numflds = 1 Then
                                        If MergeData(k, jtemp) <> "" Then
                                            .Variables(MergeFields).Value = MergeData(k, jtemp)
                                        Else
                                            .Variables(MergeFields).Value = " "
                                        End If
                                    Else
                                        For jtemp = 1 To numflds
                                            If MergeData(k, jtemp) <> "" Then
                                                .Variables(MergeFields(1, jtemp)).Value = MergeData(k, jtemp)
                                            Else
                                                .Variables(MergeFields(1, jtemp)).Value = " "
                                            End If
                                        Next jtemp
                                    End If
                                    .Fields.Update
                                    .Fields.Unlink
                                End With

                                Set oItem = oTemp.MailEnvelope.Item
                                With oItem
                                    If InStr(1, MergeData(k, Email), ";") > 0 Then
                                        vEmailAddress = Split(MergeData(k, Email), ";")

                                        If GetSetting(AppID, "Config", "BCC") = True Then
                                            For iAddress = 0 To UBound(vEmailAddress)
                                                .Recipients.Add(Trim(vEmailAddress(iAddress))).Type = 3
                                            Next iAddress
                                        Else
                                            .Recipients.Add(vEmailAddress(0)).Type = 1
                                            For iAddress = 1 To UBound(vEmailAddress)
                                                .Recipients.Add(Trim(vEmailAddress(iAddress))).Type = 2
                                            Next iAddress
                                        End If
                                    Else
                                        If Not Trim(MergeData(k, Email)) = vbNullString Then
                                            .Recipients.Add(MergeData(k, Email)).Type = 1
                                        Else
                                            ShowError 12, 50, False, CStr(k)
                                        End If
                                    End If

                                    If strCC <> "" Then
                                        If bAddCC = True Then
                                            .Recipients.Add(strCC).Type = 3
                                        Else
                                            .Recipients.Add(strCC).Type = 2
                                        End If
                                    End If

                                    If strCCA <> "" Then
                                        If bAddCC = True Then
                                            .Recipients.Add(strCCA).Type = 3
                                        Else
                                            .Recipients.Add(strCCA).Type = 2
                                        End If
                                    End If

                                    If strReplyTo <> "" Then .replyrecipients.Add strReplyTo

                                    .Subject = strSubjectText
                                    .OriginatorDeliveryReportRequested = bReceipt
                                    .Importance = iImportant

                                    If bExchange = True Then
                                        If strProxy <> "" Then
                                            .SentOnBehalfOfName = strProxy
                                        End If
                                    End If
                                    Set .SendUsingAccount = olAccount

                                    .Attachments.Add strAttach
                                    If flagFields = True Then
                                        On Error Resume Next
                                        For j = 0 To UBound(AttachmentFields)
                                            .Attachments.Add MergeData(k, AttachmentFields(j, 0))
                                        Next j
                                    End If
                                    If flagFiles = True Then
                                        For j = 0 To UBound(AttachmentFiles)
                                            .Attachments.Add AttachmentFiles(j, 0)
                                        Next j
                                    End If
                                    .Save
                                    .Close 0
                                End With
                                oTemp.Close wdDoNotSaveChanges
                            Else

                                Set oItem = olApp.CreateItem(0)        'olMailItem
                                With oItem

                                    If InStr(1, MergeData(k, Email), ";") > 0 Then
                                        vEmailAddress = Split(MergeData(k, Email), ";")

                                        If GetSetting(AppID, "Config", "BCC") = True Then
                                            For iAddress = 0 To UBound(vEmailAddress)
                                                .Recipients.Add(Trim(vEmailAddress(iAddress))).Type = 3
                                            Next iAddress
                                        Else
                                            .Recipients.Add(vEmailAddress(0)).Type = 1
                                            For iAddress = 1 To UBound(vEmailAddress)
                                                .Recipients.Add(Trim(vEmailAddress(iAddress))).Type = 2
                                            Next iAddress
                                        End If
                                    Else
                                        If Not Trim(MergeData(k, Email)) = vbNullString Then
                                            .Recipients.Add(MergeData(k, Email)).Type = 1
                                        Else
                                            ShowError 12, 50, False, CStr(k)
                                        End If
                                    End If

                                    If strCC <> "" Then
                                        If bAddCC = True Then
                                            .Recipients.Add(strCC).Type = 3
                                        Else
                                            .Recipients.Add(strCC).Type = 2
                                        End If
                                    End If

                                    If strCCA <> "" Then
                                        If bAddCC = True Then
                                            .Recipients.Add(strCCA).Type = 3
                                        Else
                                            .Recipients.Add(strCCA).Type = 2
                                        End If
                                    End If


                                    If strReplyTo <> "" Then .replyrecipients.Add strReplyTo

                                    If bExchange = True Then
                                        If strProxy <> "" Then
                                            .SentOnBehalfOfName = strProxy
                                        End If
                                    End If
                                    Set .SendUsingAccount = olAccount

                                    .Subject = strSubjectText
                                    .OriginatorDeliveryReportRequested = bReceipt
                                    .Importance = iImportant


                                    .BodyFormat = 1        'olFormatPlain
                                    .Body = strMessage & vbCr + vbCr & Signature
                                    .Attachments.Add strAttach
                                    If flagFields = True Then
                                        On Error Resume Next
                                        For j = 0 To UBound(AttachmentFields)
                                            .Attachments.Add MergeData(k, AttachmentFields(j, 0)), , 1
                                        Next j
                                    End If
                                    If flagFiles = True Then
                                        For j = 0 To UBound(AttachmentFiles)
                                            .Attachments.Add AttachmentFiles(j, 0), , 1
                                        Next j
                                    End If
                                    strRecipient = .To
                                    .Close 0
                                End With
                            End If
                            Exit For
                        End If
                    Next olAccount
                    MoveMessages strSubjectText

                Case "EmailPDFAttachment", "EmailCreatorAttachment"
                    If strDestination = "EmailCreatorAttachment" Then
                        PrintToPDFCreator strFname & ".pdf", strFolder, oDoc
                    Else
                        .ExportAsFixedFormat strFolder & strFname & ".pdf", _
                                             wdExportFormatPDF, False, _
                                             wdExportOptimizeForPrint
                    End If
                    For Each olAccount In olApp.Session.Accounts
                        If olAccount.DisplayName = strAccount Or strAccount = "" Then
                            If bIsHTML = True Then
                                Set oTemp = Documents.Add(Template:=strHTMLPath, Visible:=False)
                                With oTemp
                                    .MailMerge.MainDocumentType = wdNotAMergeDocument
                                    For Each oStory In .StoryRanges
                                        For iTemp = 1 To oStory.Fields.Count
                                            If oStory.Fields(iTemp).Type = wdFieldMergeField Then
                                                Set mfCode = oStory.Fields(iTemp).Code
                                                mfCode = Replace(LCase(mfCode), "mergefield", "DOCVARIABLE")
                                            End If
                                        Next iTemp
                                        If oStory.StoryType <> wdMainTextStory Then
                                            While Not (oStory.NextStoryRange Is Nothing)
                                                Set oStory = oStory.NextStoryRange
                                                For iTemp = 1 To oStory.Fields.Count
                                                    If oStory.Fields(iTemp).Type = wdFieldMergeField Then
                                                        Set mfCode = oStory.Fields(iTemp).Code
                                                        mfCode = Replace(LCase(mfCode), "mergefield", "DOCVARIABLE")
                                                    End If
                                                Next iTemp
                                            Wend
                                        End If
                                    Next oStory
                                    Set oStory = Nothing
                                    If numflds = 1 Then
                                        If MergeData(k, jtemp) <> "" Then
                                            .Variables(MergeFields).Value = MergeData(k, jtemp)
                                        Else
                                            .Variables(MergeFields).Value = " "
                                        End If
                                    Else
                                        For jtemp = 1 To numflds
                                            If MergeData(k, jtemp) <> "" Then
                                                .Variables(MergeFields(1, jtemp)).Value = MergeData(k, jtemp)
                                            Else
                                                .Variables(MergeFields(1, jtemp)).Value = " "
                                            End If
                                        Next jtemp
                                    End If
                                    .Fields.Update
                                    .Fields.Unlink
                                End With

                                Set oItem = oTemp.MailEnvelope.Item
                                With oItem
                                    If InStr(1, MergeData(k, Email), ";") > 0 Then
                                        vEmailAddress = Split(MergeData(k, Email), ";")

                                        If GetSetting(AppID, "Config", "BCC") = True Then
                                            For iAddress = 0 To UBound(vEmailAddress)
                                                .Recipients.Add(Trim(vEmailAddress(iAddress))).Type = 3
                                            Next iAddress
                                        Else
                                            .Recipients.Add(vEmailAddress(0)).Type = 1
                                            For iAddress = 1 To UBound(vEmailAddress)
                                                .Recipients.Add(Trim(vEmailAddress(iAddress))).Type = 2
                                            Next iAddress
                                        End If
                                    Else
                                        If Not Trim(MergeData(k, Email)) = vbNullString Then
                                            .Recipients.Add(MergeData(k, Email)).Type = 1
                                        Else
                                            ShowError 12, 50, False, CStr(k)
                                        End If
                                    End If

                                    If strCC <> "" Then
                                        If bAddCC = True Then
                                            .Recipients.Add(strCC).Type = 3
                                        Else
                                            .Recipients.Add(strCC).Type = 2
                                        End If
                                    End If

                                    If strCCA <> "" Then
                                        If bAddCC = True Then
                                            .Recipients.Add(strCCA).Type = 3
                                        Else
                                            .Recipients.Add(strCCA).Type = 2
                                        End If
                                    End If


                                    If strReplyTo <> "" Then .replyrecipients.Add strReplyTo

                                    If bExchange = True Then
                                        If strProxy <> "" Then
                                            .SentOnBehalfOfName = strProxy
                                        End If
                                    End If
                                    Set .SendUsingAccount = olAccount

                                    .Subject = strSubjectText
                                    .OriginatorDeliveryReportRequested = bReceipt
                                    .Importance = iImportant


                                    .Attachments.Add strFolder & strFname & ".pdf"
                                    If flagFields = True Then
                                        On Error Resume Next
                                        For j = 0 To UBound(AttachmentFields)
                                            .Attachments.Add MergeData(k, AttachmentFields(j, 0))
                                        Next j
                                    End If
                                    If flagFiles = True Then
                                        For j = 0 To UBound(AttachmentFiles)
                                            .Attachments.Add AttachmentFiles(j, 0)
                                        Next j
                                    End If
                                    .Save
                                    .Close 0
                                End With
                                oTemp.Close wdDoNotSaveChanges
                            Else
                                Set oItem = olApp.CreateItem(0)        'olMailItem
                                With oItem
                                    If InStr(1, MergeData(k, Email), ";") > 0 Then
                                        vEmailAddress = Split(MergeData(k, Email), ";")

                                        If GetSetting(AppID, "Config", "BCC") = True Then
                                            For iAddress = 0 To UBound(vEmailAddress)
                                                .Recipients.Add(Trim(vEmailAddress(iAddress))).Type = 3
                                            Next iAddress
                                        Else
                                            .Recipients.Add(vEmailAddress(0)).Type = 1
                                            For iAddress = 1 To UBound(vEmailAddress)
                                                .Recipients.Add(Trim(vEmailAddress(iAddress))).Type = 2
                                            Next iAddress
                                        End If
                                    Else
                                        If Not Trim(MergeData(k, Email)) = vbNullString Then
                                            .Recipients.Add(MergeData(k, Email)).Type = 1
                                        Else
                                            ShowError 12, 50, False, CStr(k)
                                        End If
                                    End If

                                    If strCC <> "" Then
                                        If bAddCC = True Then
                                            .Recipients.Add(strCC).Type = 3
                                        Else
                                            .Recipients.Add(strCC).Type = 2
                                        End If
                                    End If

                                    If strCCA <> "" Then
                                        If bAddCC = True Then
                                            .Recipients.Add(strCCA).Type = 3
                                        Else
                                            .Recipients.Add(strCCA).Type = 2
                                        End If
                                    End If
                                    If bExchange = True Then
                                        If strProxy <> "" Then
                                            .SentOnBehalfOfName = strProxy
                                        End If
                                    End If


                                    If strReplyTo <> "" Then .replyrecipients.Add strReplyTo

                                    Set .SendUsingAccount = olAccount

                                    .Subject = strSubjectText
                                    .OriginatorDeliveryReportRequested = bReceipt
                                    .Importance = iImportant

                                    .BodyFormat = 1        'olFormatPlain
                                    .Body = strMessage & vbCr + vbCr & Signature
                                    .Attachments.Add strFolder & strFname & ".pdf"
                                    If flagFields = True Then
                                        On Error Resume Next
                                        For j = 0 To UBound(AttachmentFields)
                                            .Attachments.Add MergeData(k, AttachmentFields(j, 0)), , 1
                                        Next j
                                    End If
                                    If flagFiles = True Then
                                        For j = 0 To UBound(AttachmentFiles)
                                            .Attachments.Add AttachmentFiles(j, 0), , 1
                                        Next j
                                    End If
                                    strRecipient = .To
                                    .Close 0
                                End With
                            End If
                            Exit For
                        End If
                    Next olAccount
                    MoveMessages strSubjectText

            End Select
            Do While .Undo = True
                .Undo
            Loop
        End With
        PauseCode 100
    Next k
    Unload oFrm
    oDoc.Close wdDoNotSaveChanges
    Application.ScreenUpdating = True
    If FileExists(MainDoc) Then
        Documents.Open MainDoc
        ShowError 17, 9
    End If
    Unload frmErr1

    If bStarted Then
        olApp.Quit
    End If
CleanUp:
    Set xlApp = Nothing
    Set xlBook = Nothing
    Set xlSheet = Nothing
    Set olApp = Nothing
    Set oItem = Nothing
    Set objDoc = Nothing
    Set olMailItems = Nothing
    Set oMail = Nothing
    Set olAccount = Nothing
    Set olNS = Nothing
    Set oRoot = Nothing
    Set colStores = Nothing
    Set oStore = Nothing
    Set ifolder = Nothing
    Set iNewFolder = Nothing
    Set fso = Nothing
    Set oDoc = Nothing
    Set oErrDoc = Nothing
    Set oTemp = Nothing
    Exit Sub
ErrMsg:
    xlApp.Quit
ErrMsg2:
    If Err.Number > 0 Then
        ShowError 7, 6
        Unload frmErr1
    End If
    ActiveDocument.Close wdDoNotSaveChanges
    If FileExists(MainDoc) Then
        Documents.Open MainDoc
        If bEmpty = True Or bHash = True Or bSheet = True Then
            ShowError 17, 9
            Unload frmErr1
        End If
    End If
    Set xlApp = Nothing
    Set xlBook = Nothing
    Set xlSheet = Nothing
    Set olApp = Nothing
    Set oItem = Nothing
    Set objDoc = Nothing
    Set olMailItems = Nothing
    Set oMail = Nothing
    Set olAccount = Nothing
    Set olNS = Nothing
    Set oRoot = Nothing
    Set colStores = Nothing
    Set oStore = Nothing
    Set ifolder = Nothing
    Set iNewFolder = Nothing
    Set fso = Nothing
    Set oDoc = Nothing
    Set oErrDoc = Nothing
    Set oTemp = Nothing
End Sub

Function GetText(ByVal sFile As String) As String
Dim fso As Object
Dim ts As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(sFile).OpenAsTextStream(1, -2)
    GetText = ts.ReadAll
    ts.Close
End Function
Sub GetFolder()
    Set fd = Application.FileDialog(msoFileDialogFolderPicker)
    With fd
        .Title = "Select the folder into which the documents will be saved."
        If .Show = -1 Then
            strFolder = .SelectedItems(1) & "\"
        Else
            ShowError 6, 7
            Set fd = Nothing
            Unload frmErr1
            strFolder = ""
        End If
    End With
End Sub
Sub UpdateAllFields()
Dim oStory As Range
    For Each oStory In ActiveDocument.StoryRanges
        oStory.Fields.Update
        If oStory.StoryType <> wdMainTextStory Then
            While Not (oStory.NextStoryRange Is Nothing)
                Set oStory = oStory.NextStoryRange
                oStory.Fields.Update
            Wend
        End If
    Next oStory
    Set oStory = Nothing
End Sub
Function isEmailInvalid(strAddress As String) As Boolean
Dim i As Long, j As Long, k As Long, m As Long
Dim vEmailAddress As Variant
Const strBanned As String = "(|)|,|:|;|<|>|@|[|]"
Dim strBannedInDomain As String
Dim vBannedInDomain As Variant
Dim vBanned As Variant
Dim strLocal As String
Dim strDomain As String

    If GetSetting(AppID, "Config", "Validate e-mails") = "" Then
        SaveSetting AppID, "Config", "Validate e-mails", True
    End If
    bValidate = CBool(GetSetting(AppID, "Config", "Validate e-mails"))
    If Not bValidate Then
        isEmailInvalid = False
        Exit Function
    End If

    vBanned = Split(strBanned, "|")

    vEmailAddress = Split(strAddress, ";")
    For m = 0 To UBound(vEmailAddress)
        If Len(lTrim(vEmailAddress(m))) < 7 Or _
           Len(lTrim(vEmailAddress(m))) > 253 Then
            isEmailInvalid = True
            Exit Function
        End If
        If InStr(1, lTrim(vEmailAddress(m)), "@") = 0 Then
            isEmailInvalid = True
            Exit Function
        End If
        strLocal = Left(lTrim(vEmailAddress(m)), InStr(1, lTrim(vEmailAddress(m)), "@") - 1)
        strDomain = Right(lTrim(vEmailAddress(m)), Len(lTrim(vEmailAddress(m))) - Len(strLocal) - 1)

        'Check whole address
        If InStr(1, lTrim(vEmailAddress(m)), ".") = 0 Then
            isEmailInvalid = True
            Exit Function
        End If
        If InStr(1, lTrim(vEmailAddress(m)), "..") > 0 Then
            isEmailInvalid = True
            Exit Function
        End If
        If Left(lTrim(vEmailAddress(m)), 1) = "." Then
            isEmailInvalid = True
            Exit Function
        End If
        If Right(lTrim(vEmailAddress(m)), 1) = "." Then
            isEmailInvalid = True
            Exit Function
        End If
        i = InStr(1, lTrim(vEmailAddress(m)), "@") + 1
        If InStr(i, lTrim(vEmailAddress(m)), "@") > 0 And _
           InStr(i, lTrim(vEmailAddress(m)), "@") < 65 Then
            isEmailInvalid = True
            Exit Function
        End If

        'Check local string
        For j = 0 To UBound(vBanned)
            k = InStr(1, strLocal, vBanned(j))
            If k > 0 Then
                If Mid(strLocal, k - 1, 1) <> Chr(34) And _
                   Mid(strLocal, k + 1, 1) <> Chr(34) Then
                    isEmailInvalid = True
                    Exit For
                    Exit Function
                End If
            End If
        Next j
        k = InStr(1, strLocal, " ")
        If k > 0 Then
            If Mid(strLocal, k - 1, 1) <> "\" Then
                isEmailInvalid = True
                Exit Function
            End If
        End If
        k = InStr(1, strLocal, "\")
        If k > 0 Then
            If Mid(strLocal, k + 1, 1) <> "\" Then
                isEmailInvalid = True
                Exit Function
            End If
        End If
        k = InStr(1, strLocal, Chr(34))
        If k > 0 Then
            If Mid(strLocal, k - 1, 1) <> "\" Then
                isEmailInvalid = True
            End If
        End If

        'Check domain
        k = InStr(1, strDomain, " ")
        If k > 0 Then
            isEmailInvalid = True
            Exit Function
        End If
        k = InStr(1, strDomain, "|")
        If k > 0 Then
            isEmailInvalid = True
            Exit Function
        End If

        strBannedInDomain = ""
        For j = 1 To Len(strDomain)
            strBannedInDomain = strBannedInDomain & Mid(strDomain, j, 1)
            If j < Len(strDomain) Then
                strBannedInDomain = strBannedInDomain & "|"
            End If
        Next j
        vBannedInDomain = Split(strBannedInDomain, "|")
        For j = 0 To UBound(vBannedInDomain)
            If Asc(vBannedInDomain(j)) < 46 And _
               Asc(vBannedInDomain(j)) > 122 Then
                isEmailInvalid = True
                Exit Function
            End If
            If Asc(vBannedInDomain(j)) > 57 And _
               Asc(vBannedInDomain(j)) < 65 Then
                isEmailInvalid = True
                Exit Function
            End If
            If Asc(vBannedInDomain(j)) > 90 And _
               Asc(vBannedInDomain(j)) < 97 Then
                isEmailInvalid = True
                Exit Function
            End If
        Next j
    Next m
End Function


Function MoveMessages(strSubject As String)
Dim iLast As Integer
Dim iM As Long
Dim bFoundDraft As Boolean

    On Error Resume Next
    bFoundDraft = False
    Set olApp = GetObject(, "Outlook.Application")
    If Err <> 0 Then
        Set olApp = CreateObject("Outlook.Application")
    End If

    Set olNS = olApp.GetNamespace("MAPI")
    olNS.logon

    'Identify the temporary folder to store the messages
    Set ifolder = olNS.GetDefaultFolder(16).folders(strFolderName)
    'Identify the saved messages
    Set olMailItems = olNS.GetDefaultFolder(16).Items
    iLast = olMailItems.Count

    If iLast > 0 Then
        'there are messages so move the last one to ifolder
        For iM = 1 To iLast        ' so check all the messages
            Set oMail = olMailItems(iM)
            If oMail.Subject = strSubject Then        'And oMail.To = strTo Then
                'if the subject matches, move it
                oMail.Move ifolder
                bFoundDraft = True
                Exit For        'and stop looking
            End If
        Next iM
        'The message is found so exit the function
        If bFoundDraft Then GoTo CleanUp
    End If

    'the message is not found so keep looking
    Set colStores = olNS.Stores
    For Each oStore In colStores
        'omit folders named 'archive'.
        If InStr(1, LCase(oStore.getrootfolder), "archive") = 0 Then
            'Ignore the default folder because we have already looked there
            If oStore.getrootfolder <> olNS.GetDefaultFolder(16).Parent Then
                Set oRoot = oStore.getrootfolder
                'see if there are messages in the Drafts folder of the current store
                Set olMailItems = oRoot.folders("Drafts").Items
                iLast = olMailItems.Count
                If iLast > 0 Then        ' so check all the messages
                    For iM = 1 To iLast
                        Set oMail = olMailItems(iM)
                        'if a message matches the subject
                        If oMail.Subject = strSubject Then        'And oMail.To = strTo Then
                            oMail.Move ifolder        'move it
                            bFoundDraft = True
                            Exit For        'end stop looking
                        End If
                    Next iM
                    'message is found so we can stop looking
                    If bFoundDraft Then GoTo CleanUp
                End If
            End If
        End If
    Next oStore        'message is not found so look in the next store

CleanUp:
    Set oStore = Nothing
    Set colStores = Nothing
    Set oRoot = Nothing
    Set oMail = Nothing
    Set ifolder = Nothing
    Set olMailItems = Nothing
End Function

Sub SplitTable(oDoc As Document)
Dim oTable As Table
Dim oCell As Cell, oCell2 As Cell, oCell3 As Cell
Dim lRow As Long
Dim i As Long, j As Long, k As Long, l As Long
Dim vItems As Variant
Dim vCellText As Variant
    If oDoc.Tables.Count > 0 Then
        For Each oTable In oDoc.Range.Tables
            For Each oCell In oTable.Range.Cells
                If InStr(1, oCell.Range.Text, "[~]") > 0 Then
                    lRow = oCell.RowIndex
                    For Each oCell2 In oTable.Rows(lRow).Cells
                        oCell2.Range.Text = Replace(oCell2.Range.Text, "[~]", "|")
                    Next oCell2
                    vItems = Split(oCell.Range.Text, "|")
                    For i = 1 To UBound(vItems)
                        oCell.Row.Select
                        Selection.InsertRowsBelow 1
                    Next i
                    For j = 1 To oTable.Rows(lRow).Cells.Count
                        Set oCell3 = oTable.Cell(lRow, j)
                        vCellText = Split(oCell3.Range.Text, "|")
                        For k = 0 To UBound(vItems)
                            On Error Resume Next
                            oTable.Cell(lRow + k, j).Range.Text = Replace(vCellText(k), Chr(13), "")
                        Next k
                    Next j
                    Err.Clear
                    Exit For
                    Exit For
                End If
            Next oCell
        Next oTable
    End If
End Sub


Function CountChar(strText As String, strChar As String) As Integer
Dim iChar As Integer
Dim i As Long
    CountChar = 0
    iChar = Asc(strChar)
    For i = 1 To Len(strText)
        If Asc(Mid$(strText, i, 1)) = iChar Then CountChar = CountChar + 1
    Next
End Function

Attribute VB_Name = "ModPDFCreator"
Option Explicit

Sub PrintToPDFCreator(sPDFName As String, sPDFPath As String, oDoc As Document)

Dim pdfjob As Object
Dim sPrinter As String
    'Change active printer to PDFCreator
    With Dialogs(wdDialogFilePrintSetup)
        sPrinter = .Printer
        .Printer = "PDFCreator"
        .DoNotSetAsSysDefault = True
        .Execute
    End With

    Set pdfjob = CreateObject("PDFCreator.clsPDFCreator")

    With pdfjob
        If .cStart("/NoProcessingAtStartup") = False Then
            ShowError 17, 52
            Unload frmErr1
            Exit Sub
        End If

        '.cStart "/NoProcessingAtStartup"
        .cOption("UseAutosave") = 1
        .cOption("UseAutosaveDirectory") = 1
        .cOption("AutosaveDirectory") = sPDFPath
        .cOption("AutosaveFilename") = sPDFName
        .cOption("AutosaveFormat") = 0        ' 0 = PDF
        .cClearCache
    End With

    'Print the document to PDF
    oDoc.PrintOut

    'Wait until the print job has entered the print queue
    Do Until pdfjob.cCountOfPrintjobs = 1
        DoEvents
    Loop
    pdfjob.cPrinterStop = False

    'Wait until PDF creator is finished then release the objects
    Do Until pdfjob.cCountOfPrintjobs = 0
        DoEvents
    Loop
    pdfjob.cClose
    'Restore the original printer
    With Dialogs(wdDialogFilePrintSetup)
        .Printer = sPrinter
        .Execute
    End With
    Set pdfjob = Nothing
End Sub

Attribute VB_Name = "ModPassword"
Option Explicit
Function GetPassWord(sPassword As String) As String
Dim strPW As String
Dim bReprotectPW As Boolean
Dim lngC As Long
Dim oDoc As Document
Dim strMessage As String
Dim strTitle As String
Dim lngHeight As Long
Dim lngCmdTop As Long
Dim lngTxtTop As Long
Dim lngLblHt As Long
Dim strCol As String

    strMessage = "The document is a protected form with password protection. " & _
                 "The document must be unprotected in order to complete the process.  " & vbCr + vbCr & _
                 "Please enter the password to unprotect the form."
    strTitle = "PASSWORD?"

    lngHeight = 190
    lngLblHt = 72
    lngCmdTop = 58
    lngTxtTop = 94
    strCol = wdColorBlack
    strPW = sPassword

    lngC = 0
    Set oDoc = ActiveDocument

    If oDoc.ProtectionType <> wdNoProtection Then
        bReprotectPW = False

Err_NeedsPWReEntry:
        On Error GoTo Err_NeedsPW
        oDoc.Unprotect Password:=strPW
    End If
    GetPassWord = strPW
    Set oDoc = Nothing
    Exit Function

Err_NeedsPW:
    lngC = lngC + 1
    If Not bReprotectPW Then
        If Err.Number = 5485 Then
            bReprotectPW = True
            With frmPassword
                .Height = lngHeight
                .CmdPwd.Top = .Height - lngCmdTop
                .TxtPassword.Top = .Height - lngTxtTop
                .TxtPassword.PasswordChar = Chr(42)
                .LabelPwd.Height = lngLblHt
                .LabelPwd.ForeColor = strCol
                .LabelPwd = strMessage
                .Caption = strTitle
                RemoveCloseButton frmPassword
                .Show
                strPW = Trim(.TxtPassword.Text)
                Unload frmPassword
            End With
            Resume Err_NeedsPWReEntry
        End If
    Else
        If Err.Number = 5485 Then
            If lngC < 3 Then
                strTitle = "INVALID PASSWORD"
                strMessage = "The password entered was incorrect." _
                             & vbCr & "Enter password to unprotect the form."
                bReprotectPW = False
                lngHeight = 154
                lngLblHt = 42
                strCol = wdColorRed
                Resume Err_NeedsPWReEntry
            Else
                ShowError 13, 19
                Unload frmErr1
                strPW = "NoPassword"
                GetPassWord = strPW
            End If
        End If
    End If

End Function




Attribute VB_Name = "ModProgress"
Option Explicit
#If VBA7 Then
    Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#Else
    Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If

Sub PauseCode(ByVal lngPeriod As Long)
    DoEvents
    Sleep lngPeriod
    ' Call it in desired location to sleep for 1 seconds like this:
    ' PauseCode 1000
End Sub


Attribute VB_Name = "ModSetUp"
Public Function SetUpPage(MergeType As String)
    With frmMFForm
        .lblEmailAddress.Top = 208
        .cmbEmail.Top = 210
        .CheckBCC.Top = 210
        .Help13.Top = 210
        .lblEmailSubject.Top = 240
        .txtEmailSubject.Top = 240
        .CheckSubject.Top = 264
        .cmbSubject.Top = 264
        .FrameSubject.Top = 286
        .LabelSubject.Top = 290
        .CheckHTML.Top = 326
        .Help7.Top = 324
        .lblMsgText.Top = 330
        .txtEmailMessage.Top = 348
        .lblHTML.Top = 348
        .txtHTML.Top = 366
        .cmdBrowseForHTML.Top = 366
        .lstAccounts.Top = 402
        .TextProxy.Top = 402
        .CheckExchange.Top = 402
        .Help12.Top = 402
        .LblSig.Top = 430
        .LstSignature.Top = 434
        .CmdMoreNames.Visible = True
        .Help11.Visible = True
        .CheckHTML.Visible = True
        .Help7.Visible = True
        .Help13.Visible = True
        .LblSig.Enabled = True
        .LstSignature.Enabled = True
        .lblFileName.Caption = "Select the filename field."
        .LabelInfo.Caption = "Select the 'Key Field', which, in this context, is a field that contains identification data unique to each record."
        With .lblAccounts
            If frmMFForm.CheckExchange.Value = True Then
                .Caption = "Send on behalf of:"
                .TextAlign = fmTextAlignRight
                .Top = 404
                .Height = 18
                frmMFForm.lstAccounts.Visible = False
                frmMFForm.TextProxy.Left = 156
            Else
                .Caption = "Select the account from which to send the messages."
                .TextAlign = fmTextAlignLeft
                .Top = 398
                .Height = 27
                frmMFForm.lstAccounts.Visible = True
                frmMFForm.TextProxy.Left = 402
            End If
        End With
        If .OptMany.Value = True Then
            .Caption = AppCaption & "Version " & AppVer & " - Many to One - " & .cmbDestination.Text
            .Help4.Visible = True
            .Help8.Visible = False
            bMany = True
        Else
            .Caption = AppCaption & "Version " & AppVer & " - One to One - " & .cmbDestination.Text
            .Help4.Visible = False
            .Help8.Visible = True
            bMany = False
        End If
        RemoveCloseButton frmMFForm

        Select Case .MultiPage1.Value
            Case Is = 0
                If .CheckShow.Value = True Then
                    If .FrameDisclaimer.Left < 12 Then
                        frmMFForm.Height = 584        '552        '548
                        .FrameInfo.Visible = False
                        .FrameMergeType.Visible = False
                    Else
                        frmMFForm.Height = 402        '392
                        .FrameInfo.Visible = True
                        .FrameMergeType.Visible = True
                    End If
                Else
                    frmMFForm.Height = 402        '392
                    .FrameInfo.Visible = True
                    .FrameMergeType.Visible = True
                End If

                .cmbDestination.Top = 60        '30
                .cmdContinue.Enabled = False
                .MultiPage1.Pages(2).Enabled = False
                .MultiPage1.Pages(3).Enabled = False
                .MultiPage1.Pages(4).Enabled = False
                If .ListSig.ListIndex > -1 Then
                    SaveSetting AppID, "Config", "ListField", .ListSig.ListIndex
                End If


            Case Is = 1
                .MultiPage1.Pages(2).Enabled = False
                .MultiPage1.Pages(3).Enabled = False
                .MultiPage1.Pages(4).Enabled = False
                If .ListSig.ListIndex > -1 Then
                    SaveSetting AppID, "Config", "ListField", .ListSig.ListIndex
                End If

                Select Case MergeType
                    Case Is = ""
                        .MultiPage1.Pages(1).Enabled = False
                    Case Is = "Merge to Individual Word Files", "Merge to Individual PDF Files", "Merge to Individual PDF Files (using PDFCreator)"
                        .Height = 304        '296
                        .MultiPage1.Pages(1).Enabled = True
                        .cmdContinue.Enabled = True
                        .lblEmailAddress.Visible = False
                        .cmbEmail.Visible = False
                        .lblEmailSubject.Visible = False
                        .Help13.Visible = False
                        .CheckBCC.Visible = False
                        .txtEmailSubject.Visible = False
                        .LstSignature.Visible = False
                        .LblSig.Visible = False
                        .lstAccounts.Visible = False
                        .lblAccounts.Visible = False
                        .lblMsgText.Visible = False
                        .txtEmailMessage.Visible = False
                        If .cmbFileName.ListIndex = -1 Then .cmdContinue.Enabled = False
                        If .cmbFileName.Value = "" Then .cmdContinue.Enabled = False

                        .Label7.Caption = "A One to One merge will simply split the document according to the selection chosen from the Start page. " & _
                                          "Records that have the same data in the filename field as the previous record will be skipped."
                        If .OptOne.Value = True Then
                            .LabelInfo.Caption = "Select the field that contains the identification data to be used to name each merged document."
                            .MultiPage1.Pages(2).Enabled = False
                        Else
                            .MultiPage1.Pages(2).Enabled = True
                        End If
                        .Help13.Visible = False
                        .lblFileName.Visible = True
                        .cmbFileName.Visible = True


                    Case Is = "Merge to Printer"
                        .MultiPage1.Pages(1).Enabled = True
                        .cmdContinue.Enabled = True
                        .Label7.Caption = "A One to One merge will simply split the document according to the selection chosen from the Start page. " & _
                                          "Records that have the same data, in the field selected as key field, as the previous record will be skipped."
                        If .OptOne.Value = False Then
                            .MultiPage1.Pages(2).Enabled = True
                            .Height = 270        '260
                            .MultiPage1.Height = .Height - 53        '59
                            .lblFileName.Visible = False
                            .cmbFileName.Visible = False
                        Else
                            .MultiPage1.Pages(2).Enabled = False
                            .Height = 300        '288
                            .MultiPage1.Height = .Height - 53        '59
                            .lblFileName.Visible = True
                            .lblFileName.Caption = "Select the key field."
                            .cmbFileName.Visible = True
                        End If
                        .CmdMoreNames.Visible = False
                        .Help11.Visible = False
                        .Help13.Visible = False

                    Case Is = "Merge to Email Message"
                        .Height = 516        '482        '448 '438
                        .MultiPage1.Pages(1).Enabled = True
                        .MultiPage1.Pages(3).Enabled = True
                        .MultiPage1.Pages(4).Enabled = True

                        .CheckHTML.Visible = False
                        .Help7.Visible = False
                        .Label7.Caption = "A One to One merge will simply split the document according to the selection chosen from the Start page. " & _
                                          "Records that have the same data, in the field selected as key field, as the previous record will be skipped."

                        .lblMsgText.Top = .lblMsgText.Top - 30
                        .txtEmailMessage.Top = .txtEmailMessage.Top - 30
                        .lblHTML.Top = .lblHTML.Top - 30
                        .txtHTML.Top = .txtHTML.Top - 30
                        .cmdBrowseForHTML.Top = .cmdBrowseForHTML.Top - 30
                        .lblAccounts.Top = .lblAccounts.Top - 72
                        .lstAccounts.Top = .lstAccounts.Top - 72
                        .TextProxy.Top = .TextProxy.Top - 72
                        .CheckExchange.Top = .CheckExchange.Top - 72
                        .Help12.Top = .Help12.Top - 72
                        .LblSig.Top = .LblSig.Top - 72
                        .LstSignature.Top = .LstSignature.Top - 72

                        If .OptOne.Value = False Then
                            .MultiPage1.Pages(2).Enabled = True
                            .lblFileName.Visible = False
                            .cmbFileName.Visible = False
                            .Height = .Height - 34
                            .lblEmailAddress.Top = .lblEmailAddress.Top - 34
                            .cmbEmail.Top = .cmbEmail.Top - 34
                            .lblEmailSubject.Top = .lblEmailSubject.Top - 34
                            .txtEmailSubject.Top = .txtEmailSubject.Top - 34
                            .CheckSubject.Top = .CheckSubject.Top - 34
                            .cmbSubject.Top = .cmbSubject.Top - 34
                            .LabelSubject.Top = .LabelSubject.Top - 34
                            .FrameSubject.Top = .FrameSubject.Top - 34
                            .lblAccounts.Top = .lblAccounts.Top - 34
                            .lstAccounts.Top = .lstAccounts.Top - 34
                            .LstSignature.Top = .LstSignature.Top - 34
                            .LblSig.Top = .LblSig.Top - 34
                            .CheckExchange.Top = .CheckExchange.Top - 34
                            .Help12.Top = .Help12.Top - 34
                            .Help13.Top = .Help13.Top - 34
                            .CheckBCC.Top = .CheckBCC.Top - 34
                            .TextProxy.Top = .TextProxy.Top - 34
                        Else
                            .MultiPage1.Pages(2).Enabled = False
                            .lblFileName.Visible = True
                            .lblFileName.Caption = "Select the key field."
                            .cmbFileName.Visible = True
                        End If
                        .lblEmailAddress.Visible = True
                        .cmbEmail.Visible = True
                        .CheckBCC.Visible = True
                        .CheckBCC.Value = GetSetting(AppID, "Config", "BCC")
                        .Help13.Visible = True
                        .lblEmailSubject.Visible = True
                        .txtEmailSubject.Visible = True
                        .LstSignature.Visible = True
                        .LblSig.Visible = True
                        .lstAccounts.Visible = True
                        .lblAccounts.Visible = True
                        .lblMsgText.Visible = False
                        .txtEmailMessage.Visible = False
                        .CmdMoreNames.Visible = False
                        .Help11.Visible = False

                        If .CheckSubject.Value = True Then
                            .LabelSubject.Visible = False
                            .FrameSubject.Visible = True
                        Else
                            .LabelSubject.Left = 12
                            .LabelSubject.Visible = True
                            .FrameSubject.Visible = False
                        End If

                        .LblSig.Enabled = False
                        .LstSignature.Enabled = False
                        If .cmbEmail.ListIndex = -1 Or .cmbEmail.Value = "" Then
                            .cmdContinue.Enabled = False
                        Else
                            .cmdContinue.Enabled = True
                        End If
                        .Frame8.Top = .LblSig.Top + 30

                    Case Is = "Merge to Email as Word Attachment", "Merge to Email as PDF Attachment", "Merge to Email as PDF Attachment (using PDFCreator)"
                        .Height = 584        '552 '544
                        If .CheckHTML.Value = True Then
                            .lblMsgText.Visible = False
                            .txtEmailMessage.Visible = False
                            .lblHTML.Left = 12
                            .txtHTML.Left = 12
                        Else
                            .lblMsgText.Visible = True
                            .txtEmailMessage.Visible = True
                            .lblHTML.Left = 402
                            .txtHTML.Left = 402
                        End If
                        .cmdBrowseForHTML.Left = .txtHTML.Left + 256
                        .MultiPage1.Pages(1).Enabled = True
                        .MultiPage1.Pages(3).Enabled = True
                        .MultiPage1.Pages(4).Enabled = True
                        .cmdContinue.Enabled = True
                        .lblEmailAddress.Visible = True
                        .cmbEmail.Visible = True
                        .CheckBCC.Visible = True
                        .CheckBCC.Value = GetSetting(AppID, "Config", "BCC")
                        .Help13.Visible = True
                        If .CheckSubject.Value = True Then
                            .LabelSubject.Visible = False
                            .FrameSubject.Visible = True
                        Else
                            .LabelSubject.Left = 12
                            .LabelSubject.Visible = True
                            .FrameSubject.Visible = False
                        End If
                        .lblEmailSubject.Visible = True
                        .txtEmailSubject.Visible = True
                        .LstSignature.Visible = True
                        .LblSig.Visible = True
                        .lstAccounts.Visible = True
                        .lblAccounts.Visible = True
                        If .cmbFileName.ListIndex = -1 Then .cmdContinue.Enabled = False
                        If .cmbFileName.Value = "" Then .cmdContinue.Enabled = False
                        If .cmbEmail.ListIndex = -1 Then .cmdContinue.Enabled = False
                        If .cmbEmail.Value = "" Then .cmdContinue.Enabled = False

                        If .OptOne.Value = True Then
                            .MultiPage1.Pages(2).Enabled = False
                            .LabelInfo.Caption = "Select the field that contains the identification data to be used to name each merged document."
                        Else
                            .MultiPage1.Pages(2).Enabled = True
                        End If
                        .lblFileName.Visible = True
                        .cmbFileName.Visible = True
                        .Frame8.Top = .LblSig.Top + 28
                End Select
                If .ListSig.ListIndex > -1 Then
                    SaveSetting AppID, "Config", "ListField", .ListSig.ListIndex
                End If

            Case Is = 2
                .MultiPage1.Pages(4).Enabled = False
                If InStr(1, MergeType, "Email") > 0 Then .MultiPage1.Pages(4).Enabled = True
                .Height = 372        '358 '350
                With .ListSig
                    .Clear
                    .AddItem
                    .List(0, 0) = ""
                    .List(0, 1) = ""
                    For k = 0 To frmMFForm.lstRepeatFields.ListCount - 1
                        .AddItem
                        .List(k + 1, 0) = frmMFForm.lstRepeatFields.List(k, 0)
                        .List(k + 1, 1) = frmMFForm.lstRepeatFields.List(k, 1)
                    Next k
                    '.ListIndex = 0
                    If GetSetting(AppID, "Config", "ListField") <> "" Then
                        .ListIndex = Val(GetSetting(AppID, "Config", "ListField"))
                    End If
                End With
            Case Is = 3
                If .ListSig.ListIndex > -1 Then
                    SaveSetting AppID, "Config", "ListField", .ListSig.ListIndex
                End If

                .Height = 474        '460 502
                .lstAttachAddedFields.Height = .lstAttachFields.Height

            Case Is = 4
                If .ListSig.ListIndex > -1 Then
                    SaveSetting AppID, "Config", "ListField", .ListSig.ListIndex
                End If

                If .OptMany.Value = True Then
                    .LabeCopyInfo.Visible = True
                    .Height = 534        '368
                    .Frame3.Height = 276
                    .Frame9.Top = 306
                Else
                    .LabeCopyInfo.Visible = False
                    .Height = 514        '348
                    .Frame3.Height = 246
                    .Frame9.Top = 276
                End If
                .OptBCC.Value = GetSetting(AppID, "Config", "BCC")
                .OptCC.Value = Not .OptBCC.Value
        End Select

        .Help8.Left = .LabelInfo.Left + 336
        .MultiPage1.Height = .Height - 64        '8        '72
        .CmdCancel.Top = .Height - 50        '57        '48
        .cmdContinue.Top = .Height - 50        '57        '48
        .Image1.Top = .Height - 51        ' 58        '49
    End With
End Function




Attribute VB_Name = "OpenBrowser"
Option Explicit
Private pWebAddress As String
#If VBA7 Then
    Public Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, _
                                                                                          ByVal lpOperation As String, ByVal lpFile As String, _
                                                                                          ByVal lpParameters As String, ByVal lpDirectory As String, _
                                                                                          ByVal nShowCmd As Long) As Long
#Else
    Public Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, _
                                                                                  ByVal lpOperation As String, ByVal lpFile As String, _
                                                                                  ByVal lpParameters As String, ByVal lpDirectory As String, _
                                                                                  ByVal nShowCmd As Long) As Long
#End If

Public Sub NewShell(cmdLine As String, lngWindowHndl As Long)
    ShellExecute lngWindowHndl, "open", cmdLine, "", "", 1
End Sub

Public Sub Info()
    pWebAddress = "http://www.gmayor.com/ManyToOne.htm"
    Call NewShell(pWebAddress, 3)
End Sub

Public Sub DonateGB()
    pWebAddress = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=C22QAMXJVVZQ4"
    Call NewShell(pWebAddress, 3)
End Sub

Public Sub DonateEU()
    pWebAddress = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=72JWWJEZX6KXS"
    Call NewShell(pWebAddress, 3)
End Sub

Public Sub DonateUS()
    pWebAddress = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=HUS7FWLVVNTH4"
    Call NewShell(pWebAddress, 3)
End Sub

Attribute VB_Name = "RX"
Option Explicit
Public myRibbon As IRibbonUI
Private bStateGMManyToOneTog1 As Boolean
Private bStateGMManyToOneTog2 As Boolean
Const strXml As String = "<button id=""CustombuttonGMManyToOne06"" imageMso=""PropertySheet"" label=""Insert List Field"" onAction=""GMManyToOneBtn""/>" & _
      "<button id=""CustombuttonGMManyToOne07"" imageMso=""RecurrenceEditSeries"" label=""Clean Worksheet"" onAction=""GMManyToOneBtn""/>" & _
      "<button id=""CustombuttonGMManyToOne02"" image=""SendCopySendNow"" label=""Send Messages"" onAction=""GMManyToOneBtn""/>" & _
      "<button id=""CustombuttonGMManyToOne03"" image=""FileClose"" label=""Remove Temp Folder"" onAction=""GMManyToOneBtn""/>" & _
      "<button id=""CustombuttonGMManyToOne04"" image=""Actions-edit-redo-icon"" label=""Reset Defaults"" onAction=""GMManyToOneBtn""/>" & _
      "<button id=""CustombuttonGMManyToOne05"" image=""SendCopySendNow"" label=""Force Send - All Messages"" onAction=""GMManyToOneBtn""/>" & _
      "</menu>"
Const strFilterOff As String = "<toggleButton id=""GMManyToOneTog1"" image=""ActionsRed"" label=""Hide Filter Dialog"" getPressed=""RX.GetPressed"" onAction=""RX.ToggleOnAction""/>"
Const strFilterOn As String = "<toggleButton id=""GMManyToOneTog1"" image=""ActionsBlue"" label=""Show Filter Dialog"" getPressed=""RX.GetPressed"" onAction=""RX.ToggleOnAction""/>"
Const strEmailOff As String = "<toggleButton id=""GMManyToOneTog2"" image=""emailoff"" label=""Disable E-Mail Address Validation"" getPressed=""RX.GetPressed"" onAction=""RX.ToggleOnAction""/>"
Const strEmailOn As String = "<toggleButton id=""GMManyToOneTog2"" image=""emailon"" label=""Enable E-Mail Address Validation"" getPressed=""RX.GetPressed"" onAction=""RX.ToggleOnAction""/>"

Sub Onload(ribbon As IRibbonUI)

    If GetSetting(AppID, "Config", "Filter") = "" Then
        SaveSetting AppID, "Config", "Filter", True
    End If
    bFilter = CBool(GetSetting(AppID, "Config", "Filter"))
    bStateGMManyToOneTog1 = bFilter

    If GetSetting(AppID, "Config", "Validate e-mails") = "" Then
        SaveSetting AppID, "Config", "Validate e-mails", True
    End If
    bValidate = CBool(GetSetting(AppID, "Config", "Validate e-mails"))
    bStateGMManyToOneTog2 = bValidate

    Set myRibbon = ribbon
End Sub
Sub GetPressed(control As IRibbonControl, ByRef state)
    Select Case control.ID

        Case "GMManyToOneTog1"
            If bStateGMManyToOneTog1 Then
                state = False
            Else
                state = True
            End If

        Case "GMManyToOneTog2"
            If bStateGMManyToOneTog2 Then
                state = False
            Else
                state = True
            End If

        Case Else

    End Select
End Sub
Sub GetContent(control As IRibbonControl, ByRef returnedVal)

Dim xml As String
Dim strSchema As String
    If Val(Application.Version) > 12 Then
        strSchema = """http://schemas.microsoft.com/office/2009/07/customui"""
    Else
        strSchema = """http://schemas.microsoft.com/office/2006/01/customui"""
    End If
    Select Case control.ID
        Case "GMManyToOneDM1"
            Select Case bStateGMManyToOneTog1
                    'Return this bit of XML pointing to an image in the customUI\images folder
                Case "True"
                    xml = "<menu xmlns=" & strSchema & " itemSize=""large"" >"
                    xml = xml & strFilterOff
                    If bStateGMManyToOneTog2 = True Then
                        xml = xml & strEmailOff
                    Else
                        xml = xml & strEmailOn
                    End If
                    'Return this bit of XML point to a different image in the the customUI\images folder
                Case Else
                    xml = "<menu xmlns=" & strSchema & " itemSize=""large"" >"
                    xml = xml & strFilterOn
                    If bStateGMManyToOneTog2 = True Then
                        xml = xml & strEmailOff
                    Else
                        xml = xml & strEmailOn
                    End If
            End Select

            Select Case bStateGMManyToOneTog2
                    'Return this bit of XML pointing to an image in the customUI\images folder
                Case "True"
                    xml = "<menu xmlns=" & strSchema & " itemSize=""large"" >"
                    If bStateGMManyToOneTog1 = True Then
                        xml = xml & strFilterOff
                    Else
                        xml = xml & strFilterOn
                    End If
                    xml = xml & strEmailOff
                    'Return this bit of XML point to a different image in the the customUI\images folder
                Case Else
                    xml = "<menu xmlns=" & strSchema & " itemSize=""large"" >"
                    If bStateGMManyToOneTog1 = True Then
                        xml = xml & strFilterOff
                    Else
                        xml = xml & strFilterOn
                    End If
                    xml = xml & strEmailOn
            End Select
            xml = xml & strXml
            returnedVal = xml
            myRibbon.InvalidateControl ("GMManyToOneDM1")
        Case Else
            'Do Nothing
    End Select

End Sub
Sub ToggleOnAction(control As IRibbonControl, pressed As Boolean)
    Select Case control.ID
        Case "GMManyToOneTog1"
            If pressed Then
                bStateGMManyToOneTog1 = False
                ShowError 17, 46
                SaveSetting AppID, "Config", "Filter", False
            Else
                bStateGMManyToOneTog1 = True
                ShowError 17, 45
                SaveSetting AppID, "Config", "Filter", True
            End If
            myRibbon.InvalidateControl ("GMManyToOneTog1")

        Case "GMManyToOneTog2"
            If pressed Then
                bStateGMManyToOneTog2 = False
                ShowError 17, 54, False, False
                SaveSetting AppID, "Config", "Validate e-mails", False
            Else
                bStateGMManyToOneTog2 = True
                ShowError 17, 54, False, True
                SaveSetting AppID, "Config", "Validate e-mails", True
            End If
            myRibbon.InvalidateControl ("GMManyToOneTog2")
    End Select
End Sub

Attribute VB_Name = "ResetRegistry"
Option Explicit

Function RegKeyDelete(i_RegKey As String) As Boolean
Dim myWS As Object

    On Error GoTo ErrorHandler
    'access Windows scripting
    Set myWS = CreateObject("WScript.Shell")
    'delete registry key
    myWS.RegDelete i_RegKey
    'deletion was successful
    RegKeyDelete = True
    Set myWS = Nothing
    Exit Function

ErrorHandler:
    'deletion wasn't successful
    RegKeyDelete = False
    Set myWS = Nothing
End Function

Sub ResetManyToOneRegistry()
    RegKeyDelete "HKEY_CURRENT_USER\Software\VB and VBA Program Settings\Mail Merge - 'Many to One'\Config\"
    RegKeyDelete "HKEY_CURRENT_USER\Software\VB and VBA Program Settings\Mail Merge - 'Many to One'\Disclaimer\"
    If RegKeyDelete("HKEY_CURRENT_USER\Software\VB and VBA Program Settings\Mail Merge - 'Many to One'\") = True Then
        ShowError 17, 35, False, "Many to One registry settings reset." & vbCr & vbCr & "It is recommended that you restart Word to reload the add-in's ribbon."
    Else
        ShowError 17, 35, False, "Many to One registry settings not present"
    End If
    Unload frmErr1
End Sub

Attribute VB_Name = "RibbonButtons"
Option Explicit

Sub GMManyToOneBtn(control As IRibbonControl)
    Select Case control.ID
        Case "CustombuttonGMManyToOne01"
            ModManytoOneEmail.ManyToOne

        Case "CustombuttonGMManyToOne02"
            If Not IsOutlook Then
                ShowError 17, 41
                Unload frmErr1
                Exit Sub
            End If
            modMessages.SendMessages

        Case "CustombuttonGMManyToOne03"
            If Not IsOutlook Then
                ShowError 17, 41
                Unload frmErr1
                Exit Sub
            End If
            modMessages.RemoveOutlookFolder

        Case "CustombuttonGMManyToOne04"
            ResetRegistry.ResetManyToOneRegistry

        Case "CustombuttonGMManyToOne05"
            If Not IsOutlook Then
                ShowError 17, 41
                Unload frmErr1
                Exit Sub
            End If
            modMessages.SendAllMessages

        Case Is = "CustombuttonGMManyToOne06"
            ShowError 17, 53, True, , , True
            Select Case frmErr1.Tag
                Case 0
                    ShowHelp 16
                Case 1
                    If ActiveDocument.Type <> wdTypeDocument Then
                        ShowError 2, 2
                        Unload frmErr1
                    End If
                    ActiveDocument.Variables("varSig").Value = "'varSig' docvariable - This value filled from code"
                    Set oRng = Selection.Range
                    oRng.Collapse wdCollapseEnd
                    oRng.Fields.Add oRng, wdFieldDocVariable, "varSig \*charformat", False
                Case Else: Exit Sub
            End Select

        Case Is = "CustombuttonGMManyToOne07"
            ModCleanSheet.CleanSheet

        Case Is = "CustombuttonGMManyToOne08"
            If GetSetting(AppID, "Config", "Validate e-mails") = "" Then
                SaveSetting AppID, "Config", "Validate e-mails", True
            End If
            bValidate = CBool(GetSetting(AppID, "Config", "Validate e-mails"))
            ShowError 17, 54, True, CStr(bValidate)
            If frmErr1.Tag = 1 Then
                bValidate = Not bValidate
                SaveSetting AppID, "Config", "Validate e-mails", bValidate
            End If
            Unload frmErr1
    End Select
End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "frmDonate"
Attribute VB_Base = "0{BBCC89F0-7EA9-46B3-A72D-7FD21081EB65}{FC238ECB-61BA-4BDB-8C43-25580C99F106}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton1_Click()
    Unload Me
End Sub

Private Sub CommandButton2_Click()
    DonateGB
    Unload Me
End Sub

Private Sub CommandButton3_Click()
    DonateEU
    Unload Me
End Sub

Private Sub CommandButton4_Click()
    DonateUS
    Unload Me
End Sub

Private Sub cmdClose_Click()
    Unload Me
End Sub

Attribute VB_Name = "frmErr1"
Attribute VB_Base = "0{715CB2E2-7970-46D2-950E-6AE6C53554DE}{8F71297D-0E4F-40B8-9593-59EA2DF9695C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CB_ErrOK_Click()
    Me.Tag = "1"
    Me.Hide
End Sub

Private Sub CBErrNo_Click()
    Me.Tag = "0"
    Me.Hide
End Sub

Private Sub CBQuit_Click()
    Me.Tag = "3"
    Me.Hide
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then Cancel = True
End Sub


Attribute VB_Name = "frmFilename"
Attribute VB_Base = "0{620A0E77-2670-4E3E-99B4-B16BFDA320EE}{86A5B3B5-4457-4C73-A577-7709B46702CC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CheckTranspose_Click()
    DefineCaption
End Sub

Private Sub CmbSeparator_Change()
    DefineCaption
End Sub

Private Sub CmdCancel_Click()
    Me.Tag = 0
    Me.Hide
End Sub

Private Sub CmdContinue_Click()
    Me.Tag = 1
    Me.Hide
End Sub

Private Sub Help14_Click()
    ModHelp.ShowHelp 14
End Sub

Private Sub Listfilename_Click()
    DefineCaption
End Sub

Private Sub OptPrefix_Click()
    DefineCaption
End Sub

Private Sub OptSuffix_Click()
    DefineCaption
End Sub

Private Sub TextFilename_Change()
    DefineCaption
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then Cancel = True
End Sub

Private Sub cmdClose_Click()
    Me.Hide
    Me.Tag = 0
End Sub

Function DefineCaption()
Dim strGhostText As String
Dim strGhostFileName As String
Dim strSeparator As String
Dim strPrefix As String
Dim strSuffix As String
    With Me
        If .Listfilename.ListIndex > -1 Then
            If frmFilename.CheckTranspose.Value = True Then
                strGhostFileName = "Field1"
            Else
                strGhostFileName = "Field2"
            End If
        Else
            strGhostFileName = ""
        End If

        Select Case .CmbSeparator.Value
            Case "[Underscore]": strSeparator = "_"
            Case "[Hyphen]": strSeparator = "-"
            Case "[Space]": strSeparator = Chr(32)
            Case Else: strSeparator = "_"
        End Select

        If .OptPrefix.Value = True Then
            strPrefix = .TextFilename.Text
            strSuffix = ""
        Else
            strPrefix = ""
            strSuffix = .TextFilename.Text
        End If

        .LabelFormat.Caption = strPrefix
        
        If strPrefix <> "" Then
            .LabelFormat.Caption = .LabelFormat.Caption & strSeparator
        End If
        
        If frmFilename.CheckTranspose.Value = True Then
            .LabelFormat.Caption = .LabelFormat.Caption & "Field2"
        Else
            .LabelFormat.Caption = .LabelFormat.Caption & "Field1"
        End If
        
        If strGhostFileName <> "" Then
            .LabelFormat.Caption = .LabelFormat.Caption & strSeparator
        End If
        
        .LabelFormat.Caption = .LabelFormat.Caption & strGhostFileName
        
        If strSuffix <> "" Then
            .LabelFormat.Caption = .LabelFormat.Caption & strSeparator
        End If
        
        .LabelFormat.Caption = .LabelFormat.Caption & strSuffix
        .TextFormat.Text = .LabelFormat.Caption
    
    End With
End Function


Attribute VB_Name = "frmFilter"
Attribute VB_Base = "0{7E8730CD-E13D-4ECE-9855-CA6B899A71D9}{6381B151-FB38-46C3-AEBD-C7A1F14EA43F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Function SetCaption() As String
    If Me.CheckA.Value = True Or _
       Me.CheckB.Value = True Or _
       Me.CheckC.Value = True Or _
       Me.CheckD.Value = True Then
        SetCaption = "Apply Filter to Worksheet Data"
    Else
        SetCaption = "Merge All Records"
    End If
End Function

Private Sub CheckA_Click()
    Me.CmdFilter.Caption = SetCaption
End Sub

Private Sub CheckB_Click()
    Me.CmdFilter.Caption = SetCaption
End Sub

Private Sub CheckC_Click()
    Me.CmdFilter.Caption = SetCaption
End Sub

Private Sub CheckD_Click()
    Me.CmdFilter.Caption = SetCaption
End Sub

Private Sub CheckRetainFields_Click()
    SaveSetting AppID, "Config", "Retain Fields", Me.CheckRetainFields.Value
End Sub

Private Sub CheckShow_Click()
    SaveSetting AppID, "Disclaimer", "Show on Start", Me.CheckShow.Value
    With Me
        If .CheckShow.Value = True Then
            .FrameDisclaimer.Left = 18
            .Width = 406
            .Height = 500
            .FrameFilter.Visible = False
        End If
    End With
End Sub

Private Sub CheckShowForm_Click()
    SaveSetting AppID, "Config", "Filter", Me.CheckShowForm.Value
End Sub

Private Sub CmdCancel_Click()
    Me.Hide
    Me.Tag = 0
End Sub

Private Sub CmdFilter_Click()
    Me.Hide
    Me.Tag = 1
    If Me.CheckRetainFields.Value = True Then
        SaveSetting AppID, "Config", "Field A", Me.LstFilterA.ListIndex
        SaveSetting AppID, "Config", "Field B", Me.LstFilterB.ListIndex
        SaveSetting AppID, "Config", "Field C", Me.LstFilterC.ListIndex
        SaveSetting AppID, "Config", "Field D", Me.LstFilterD.ListIndex
    Else
        SaveSetting AppID, "Config", "Field A", -1
        SaveSetting AppID, "Config", "Field B", -1
        SaveSetting AppID, "Config", "Field C", -1
        SaveSetting AppID, "Config", "Field D", -1
    End If
End Sub

Private Sub cmdHideDisclaimer_Click()
    With Me
        .Width = 384
        .FrameDisclaimer.Left = 390
        .Height = 326
        .FrameFilter.Visible = True
    End With
End Sub

Private Sub Image1_Click()
    frmDonate.Show
End Sub

Private Sub Image4_Click()
    OpenBrowser.Info
End Sub

Private Sub LstFilterA_Change()
    With Me
        If .LstFilterA.ListIndex > -1 Then
            If .LstFilterA.ListIndex = .LstFilterB.ListIndex Or _
               .LstFilterA.ListIndex = .LstFilterC.ListIndex Or _
               .LstFilterA.ListIndex = .LstFilterD.ListIndex Then
                ShowError 17, 15
                Unload frmErr1
                .LstFilterA.ListIndex = -1
                .LstFilterA.SetFocus
            End If
        End If
        If .LstFilterA.ListIndex > -1 And _
           .TextValA.Text <> vbNullString Then
            .CheckA.Value = True
        Else
            .CheckA.Value = False
        End If
    End With
End Sub

Private Sub LstFilterB_Click()
    With Me
        If .LstFilterB.ListIndex > -1 Then
            If .LstFilterB.ListIndex = .LstFilterA.ListIndex Or _
               .LstFilterB.ListIndex = .LstFilterC.ListIndex Or _
               .LstFilterB.ListIndex = .LstFilterD.ListIndex Then
                ShowError 17, 15
                Unload frmErr1
                .LstFilterB.ListIndex = -1
                .LstFilterB.SetFocus
            End If
            If .LstFilterB.ListIndex > -1 And _
               .TextValB.Text <> vbNullString Then
                .CheckB.Value = True
            End If
        Else
            .CheckB.Value = False
        End If
    End With
End Sub

Private Sub LstFilterC_Change()
    With Me
        If .LstFilterC.ListIndex > -1 Then
            If .LstFilterC.ListIndex = .LstFilterB.ListIndex Or _
               .LstFilterC.ListIndex = .LstFilterA.ListIndex Or _
               .LstFilterC.ListIndex = .LstFilterD.ListIndex Then
                ShowError 17, 15
                Unload frmErr1
                .LstFilterC.ListIndex = -1
                .LstFilterC.SetFocus
            End If
        End If
        If .LstFilterC.ListIndex > -1 And _
           .TextValC.Text <> vbNullString Then
            .CheckC.Value = True
        Else
            .CheckC.Value = False
        End If
    End With
End Sub

Private Sub LstFilterD_Change()
    With Me
        If .LstFilterD.ListIndex > -1 Then
            If .LstFilterD.ListIndex = .LstFilterA.ListIndex Or _
               .LstFilterD.ListIndex = .LstFilterB.ListIndex Or _
               .LstFilterD.ListIndex = .LstFilterC.ListIndex Then
                ShowError 17, 15
                Unload frmErr1
                .LstFilterD.ListIndex = -1
                .LstFilterD.SetFocus
            End If
        End If
        If .LstFilterD.ListIndex > -1 And _
           .TextValD.Text <> vbNullString Then
            .CheckD.Value = True
        Else
            .CheckD.Value = False
        End If
    End With
End Sub

Private Sub TextValA_Change()
    With Me
        If .LstFilterA.ListIndex > -1 And _
           .TextValA.Text <> vbNullString Then
            .CheckA.Value = True
        Else
            .CheckA.Value = False
        End If
    End With
End Sub

Private Sub TextValB_Change()
    With Me
        If .LstFilterB.ListIndex > -1 And _
           .TextValB.Text <> vbNullString Then
            .CheckB.Value = True
        Else
            .CheckB.Value = False
        End If
    End With
End Sub

Private Sub TextValC_Change()
    With Me
        If .LstFilterC.ListIndex > -1 And _
           .TextValC.Text <> vbNullString Then
            .CheckC.Value = True
        Else
            .CheckC.Value = False
        End If
    End With
End Sub

Private Sub TextValD_Change()
    With Me
        If .LstFilterD.ListIndex > -1 And _
           .TextValD.Text <> vbNullString Then
            .CheckD.Value = True
        Else
            .CheckD.Value = False
        End If
    End With
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        Cancel = True
    End If
End Sub

Private Sub cmdClose_Click()
    Me.Hide
    Me.Tag = 0
End Sub
Attribute VB_Name = "frmHelp"
Attribute VB_Base = "0{9102EF4E-E46A-4DA6-8D2C-786A8B8D5C4E}{982E188B-ABE6-4D85-B118-8782BF35FC0E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub cbOK_Click()
   Unload Me
End Sub

Private Sub cmdClose_Click()
    Unload Me
End Sub

Attribute VB_Name = "frmMFForm"
Attribute VB_Base = "0{200DCBEF-DF51-4A18-AFBA-65B65E039D03}{2227DD6D-F4A5-461B-8EF8-845BDCC0800F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private i As Long, j As Long, k As Long
Private strText1 As String
Private strText2 As String
Private fd As FileDialog

Private Sub CheckAndOr_Click()
    If Me.CheckAndOr.Value = True Then
        Me.CheckAndOr.Caption = "Last child field separator is 'and'"
        SaveSetting AppID, "Config", "AndOr", True
    Else
        Me.CheckAndOr.Caption = "Last child field separator is 'or'"
        SaveSetting AppID, "Config", "AndOr", False
    End If
End Sub

Private Sub CheckBCC_Click()
    SaveSetting AppID, "Config", "BCC", Me.CheckBCC.Value
    Me.OptBCC.Value = True
End Sub

Private Sub CheckExchange_Click()
    Me.lstAccounts.ListIndex = -1
    SetUpPage Me.cmbDestination.Value
End Sub

Private Sub CheckHTML_Click()
    SetUpPage Me.cmbDestination.Value
End Sub

Private Sub CheckReplyTo_Click()
    If Not Me.CheckReplyTo.Value Then Me.TextReplyTo.Text = ""
End Sub

Private Sub CheckRetain_Click()
    If Not Me.CheckRetain.Value Then Me.TextCCAddr.Text = ""
End Sub

Private Sub CheckShow_Click()
    SaveSetting AppID, "Disclaimer", "Show on Start", Me.CheckShow.Value
    With Me
        If .CheckShow.Value = True Then
            Me.FrameDisclaimer.Left = 8
            .Height = 554        '552
            .FrameInfo.Visible = False
            .FrameMergeType.Visible = False
            .MultiPage1.Height = .Height - 64 '72
            .cmdContinue.Top = .Height - 50 '57
            .CmdCancel.Top = .Height - 50 '57
            .Image1.Top = .Height - 51 '58
        End If
    End With
End Sub

Private Sub CheckSeparator_Click()
    If Me.CheckSeparator.Value = True Then
        Me.CheckSeparator.Caption = "Child field separator is '|fffd|'"
        Me.CheckAndOr.Visible = False
    Else
        Me.CheckSeparator.Caption = "Child field separator is ','"
        Me.CheckAndOr.Visible = True
    End If
    SaveSetting AppID, "Config", "Separator", Me.CheckSeparator.Value
End Sub

Private Sub CheckSubject_Click()
    SetUpPage Me.cmbDestination.Value
End Sub

Private Sub CheckTable_Click()
    If Me.CheckTable.Value = True Then
        If ActiveDocument.Tables.Count = 0 Then
            ShowError 17, 24
            Me.CheckTable.Value = False
            Unload frmErr1
        End If
    End If
    SaveSetting AppID, "Config", "Child Fields in Table", Me.CheckTable.Value
End Sub

Private Sub CmbCC_Change()
    If Me.CmbCC.ListIndex > -1 Then
        If Me.CmbCC.Value = Me.cmbEmail.Value Then
            ShowError 12, 26, True
            If frmErr1.Tag = 0 Then Me.CmbCC.ListIndex = -1
            Unload frmErr1
        End If
    End If
End Sub

Private Sub cmbDestination_Change()
    With Me
        If Me.cmbDestination.ListIndex > -1 Then
            .FrameInfo.Visible = False
            .LstSignature.Visible = False
            .lstAccounts.Visible = False
            .MultiPage1.Pages(1).Visible = True
            .MultiPage1.Pages(1).Enabled = True
            .MultiPage1.Value = 1
            SetUpPage .cmbDestination.Value
        End If
    End With
    
End Sub

Private Sub cmbEmail_Change()
    With Me.cmbEmail
        If .ListIndex > -1 Then
            Me.txtEmailIndex.Text = .List(.ListIndex, 0)
        End If
    End With
    With Me
        With .lstMergeFields
            For i = 0 To .ListCount - 1
                .Selected(i) = False
            Next i
        End With
    End With
    SetUpPage Me.cmbDestination.Value
End Sub

Private Sub cmbFileName_Change()
    With Me
        With .lstMergeFields
            For i = 0 To .ListCount - 1
                .Selected(i) = False
            Next i
        End With
        If .OptMany.Value = False Then
            .txtKeyField.Value = .cmbFileName.Value
        End If
        With .cmbFileName
            If .ListIndex > -1 Then
                Me.txtFileNameIndex.Text = .List(.ListIndex, 0)
            End If
        End With

        SetUpPage .cmbDestination.Value

        If .OptMany.Value = False Then
            With .lstMergeFields
                For i = 0 To .ListCount - 1
                    If Trim(.List(i, 1)) = Trim(Me.cmbFileName.Text) Then
                        Me.txtKeyIndex.Text = .List(i, 0)
                        Me.txtKeyField.Text = .List(i, 1)
                        Exit For
                    End If
                Next i
            End With
        End If
    End With
End Sub

Private Sub cmbSubject_Change()
    If Me.cmbSubject.ListIndex > -1 Then
        Me.CheckSubject.Value = True
    End If
End Sub

Private Sub cmdAdd_Click()
    With Me.lstMergeFields
        i = .ListIndex
        If i > -1 Then
            With Me.lstRepeatFields
                .AddItem
                .List(.ListCount - 1, 0) = Me.lstMergeFields.List(i, 0)
                .List(.ListCount - 1, 1) = Me.lstMergeFields.List(i, 1)
            End With
            .RemoveItem (i)
        End If
    End With
End Sub

Private Sub cmdAddAttach_Click()
    With Me.lstAttachFields
        i = .ListIndex
        If i > -1 Then
            With Me.lstAttachAddedFields
                .AddItem
                .List(.ListCount - 1, 0) = Me.lstAttachFields.List(i, 0)
                .List(.ListCount - 1, 1) = Me.lstAttachFields.List(i, 1)
            End With
            .RemoveItem (i)
        End If
    End With
End Sub

Private Sub cmdBrowseforAttachments_Click()
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    With fd
        .Title = "Select the files to be attached to the email messages."
        .AllowMultiSelect = True
        If .Show = -1 Then
            For i = 1 To .SelectedItems.Count
                lstAttachments.AddItem .SelectedItems(i)
            Next i
        End If
    End With
    Me.lstAttachments.ListIndex = -1
    Me.cmdDelete.Enabled = False
    With Me.lstAttachFields
        For i = 0 To .ListCount - 1
            .Selected(i) = False
        Next i
    End With
End Sub

Private Sub cmdBrowseForHTML_Click()
    Me.txtHTML.Text = ModHTML.BrowseForFile
End Sub

Private Sub CmdCancel_Click()
    Me.Tag = 0
    SaveSetting AppID, "Config", "ListField", "0"
    Me.Hide
End Sub

Private Sub CmdChildEnd_Click()
    Me.CheckAndOr.Value = Not Me.CheckAndOr.Value
    Me.CmdChildEnd.Caption = Me.CheckAndOr.Caption
    Me.CmdChildEnd.Visible = Me.CheckAndOr.Visible
    If Me.CmdChildEnd.Visible = True Then
        Me.LabelSep.Caption = "Click to change separator values:"
        Me.CmdChildSep.Width = 180
        Me.CheckTable.Visible = False
    Else
        Me.LabelSep.Caption = "Click to change separator value:"
        Me.CmdChildSep.Width = 360
        Me.CheckTable.Visible = True
    End If
End Sub

Private Sub CmdChildSep_Click()
    Me.CheckSeparator.Value = Not Me.CheckSeparator.Value
    Me.CmdChildSep.Caption = Me.CheckSeparator.Caption
    Me.CmdChildEnd.Visible = Me.CheckAndOr.Visible
    If Me.CmdChildEnd.Visible = True Then
        Me.LabelSep.Caption = "Click to change separator values:"
        Me.CmdChildSep.Width = 180
        Me.CheckTable.Visible = False
    Else
        Me.LabelSep.Caption = "Click to change separator value:"
        Me.CmdChildSep.Width = 360
        Me.CheckTable.Visible = True
    End If
End Sub

Private Sub CmdContinue_Click()
    With Me
        If .TextCCAddr.Text <> "" Then
            If isEmailInvalid(.TextCCAddr.Text) = True Then
                ShowError 12, 25, True
                If frmErr1.Tag = 0 Then
                    .TextCCAddr.Text = ""
                    Unload frmErr1
                Else
                    Unload frmErr1
                    .MultiPage1.Value = 3
                    .TextCCAddr.SetFocus
                    Exit Sub
                End If
            End If
        End If


        Select Case .cmbDestination.Value
            Case Is = "Merge to Email as Word Attachment", "Merge to Email as PDF Attachment", "Merge to Email Message"
                If .CheckSubject.Value = True And .cmbSubject.ListIndex = -1 Then
                    ShowError 15, 27, True
                    If frmErr1.Tag = 0 Then
                        Unload frmErr1
                        .CheckSubject.Value = False
                    Else
                        Unload frmErr1
                        .MultiPage1.Value = 1
                        .txtEmailSubject.SetFocus
                        Exit Sub
                    End If
                End If
                If .txtEmailSubject.Text = "" And .CheckSubject.Value = False Then
                    ShowError 15, 21, True
                    If frmErr1.Tag = 1 Then
                        Unload frmErr1
                        .MultiPage1.Value = 1
                        .txtEmailSubject.SetFocus
                        Exit Sub
                    End If
                End If
            Case Else
        End Select
        If .OptMany.Value = False Then
            .txtKeyField.Value = .cmbFileName.Value
        End If
        SaveSetting AppID, "Config", "ListField", "0"
        If .CheckRetain.Value = True Then
            SaveSetting AppID, "Config", "CopyTo", .TextCCAddr.Text
        Else
            SaveSetting AppID, "Config", "CopyTo", ""
        End If
        SaveSetting AppID, "Config", "Retain CC", .CheckRetain.Value
        SaveSetting AppID, "Config", "Option Many", .OptMany.Value
        .Tag = 1
        .Hide
    End With
End Sub

Private Sub cmdDelete_Click()
    With Me.lstAttachments
        i = .ListIndex
        If i > -1 Then
            .RemoveItem (i)
        End If
    End With

End Sub

Private Sub cmdHideDisclaimer_Click()
    With Me
        .FrameDisclaimer.Left = 420
        .Height = 402
        .FrameInfo.Visible = True
        .FrameMergeType.Visible = True
        .MultiPage1.Height = .Height - 64 '72
        .CmdCancel.Top = .Height - 50 '57
        .cmdContinue.Top = .Height - 50 '57
        .Image1.Top = .Height - 51 '58
    End With
End Sub

Private Sub cmdKeyField_Click()
Dim i As Long, j As Long
    If Me.cmdKeyField.Caption = "Add >>" Then
        With Me.lstMergeFields
            i = .ListIndex
            If i > -1 Then
                Me.txtKeyIndex.Text = .List(i, 0)
                Me.txtKeyField.Text = .List(i, 1)
                .RemoveItem (i)
                Me.cmdKeyField.Caption = "<< Remove"
            End If
        End With
    Else
        With Me.lstMergeFields
            .AddItem
            For j = .ListCount - 1 To Val(Me.txtKeyIndex.Text) Step -1
                .List(j, 0) = .List(j - 1, 0)
                .List(j, 1) = .List(j - 1, 1)
            Next j
            .List(j, 0) = Me.txtKeyIndex.Text
            .List(j, 1) = Me.txtKeyField.Text
        End With
        Me.txtKeyIndex.Text = ""
        Me.txtKeyField.Text = ""
        Me.cmdKeyField.Caption = "Add >>"
    End If
    SetUpPage Me.cmbDestination.Value
End Sub

Private Sub CmdMoreNames_Click()
    If Me.cmbFileName.ListIndex = -1 Then
        ShowError 17, 31
        Unload frmErr1
        Exit Sub
    End If
    With frmFilename
        .Width = 346
        .Listfilename.List = frmMFForm.cmbFileName.List
        With .CmbSeparator
            .Clear
            .AddItem "[Underscore]"
            .AddItem "[Hyphen]"
            .AddItem "[Space]"
            .ListIndex = 0
        End With
        RemoveCloseButton frmFilename
        .Show
        If .Tag = 0 Then Exit Sub
        frmMFForm.TextFilename.Text = .LabelFormat.Caption
        If .Listfilename.ListIndex > -1 Then
            If InStr(1, frmMFForm.txtFileNameIndex.Text, "|") > 0 Then
                frmMFForm.txtFileNameIndex.Text = Left(frmMFForm.txtFileNameIndex.Text, InStr(1, frmMFForm.txtFileNameIndex.Text, "|") - 1)
            End If
            frmMFForm.txtFileNameIndex.Text = frmMFForm.txtFileNameIndex.Text & "|" & .Listfilename.ListIndex + 1
        End If
        frmMFForm.txtFormat.Text = .TextFormat.Text
    End With
    Unload frmFilename
End Sub

Private Sub cmdRemAttach_Click()
    With Me.lstAttachAddedFields
        i = .ListIndex
        If i > -1 Then
            With Me.lstAttachFields
                .AddItem
                For j = .ListCount - 1 To Me.lstAttachAddedFields.List(i, 0) Step -1
                    .List(j, 0) = .List(j - 1, 0)
                    .List(j, 1) = .List(j - 1, 1)
                Next j
                .List(j, 0) = Me.lstAttachAddedFields.List(i, 0)
                .List(j, 1) = Me.lstAttachAddedFields.List(i, 1)
            End With
            .RemoveItem (i)
        End If
    End With
End Sub

Private Sub cmdRemove_Click()
    With Me.lstRepeatFields
        i = .ListIndex
        If i > -1 Then
            With Me.lstMergeFields
                .AddItem
                For j = .ListCount - 1 To Me.lstRepeatFields.List(i, 0) Step -1
                    .List(j, 0) = .List(j - 1, 0)
                    .List(j, 1) = .List(j - 1, 1)
                Next j
                .List(j, 0) = Me.lstRepeatFields.List(i, 0)
                .List(j, 1) = Me.lstRepeatFields.List(i, 1)
            End With
            .RemoveItem (i)
        End If
    End With
End Sub

Private Sub ConfigHlp_Click()
    OpenBrowser.Info
End Sub

Private Sub Help12_Click()
    ShowHelp 12
End Sub

Private Sub Help13_Click()
    ShowHelp 13
End Sub

Private Sub Help15_Click()
    ShowHelp 1
End Sub

Private Sub Image1_Click()
    frmDonate.Show
End Sub

Private Sub Image2_Click()
    OpenBrowser.Info
End Sub

Private Sub Help11_Click()
    ShowHelp 11
End Sub

Private Sub Help1_Click()
    ShowHelp 1
End Sub

Private Sub Help2_Click()
    ShowHelp 2
End Sub

Private Sub Help3_Click()
    ShowHelp 3
End Sub

Private Sub Help4_Click()
    ShowHelp 4
End Sub

Private Sub Help5_Click()
    ShowHelp 5
End Sub

Private Sub Help6_Click()
    ShowHelp 6
End Sub

Private Sub Help7_Click()
    ShowHelp 7
End Sub

Private Sub Help8_Click()
    With Me
        If .cmbDestination.Value = "Merge to Printer" Or _
           .cmbDestination.Value = "Merge to Email Message" Then
            ShowHelp 8
        Else
            ShowHelp 9
        End If
    End With
End Sub

Private Sub Help10_Click()
    ShowHelp 10
End Sub

Private Sub Image4_Click()
    OpenBrowser.Info
End Sub

Private Sub ListSig_Change()
    If Me.ListSig.ListIndex > 0 Then
        Me.LabelLayout.Caption = Me.TextLeading.Text & _
                                 "{ " & Me.ListSig.Text & " }" & _
                                 Me.TextTrailing.Text & "(...next child data)"
    End If
End Sub

Private Sub lstAttachments_Click()
    With Me.lstAttachFields
        For i = 0 To .ListCount - 1
            .Selected(i) = False
        Next i
    End With
End Sub

Private Sub MultiPage1_Change()
    If Me.cmbDestination.Value <> "" Then
        Me.MultiPage1.Pages(4).Enabled = True
        Me.MultiPage1.Pages(1).Enabled = True
    End If
    SetUpPage Me.cmbDestination.Value
End Sub

Private Sub OptCC_Click()
    If Me.OptCC.Value = True Then
        If Me.CheckBCC.Value = True Then
            ShowError 17, 26, True
            If frmErr1.Tag = 0 Then
                Me.OptBCC.Value = True
                Me.OptCC.Value = False
                Unload frmErr1
            End If
        End If
    End If
End Sub

Private Sub OptMany_Change()
    SetUpPage Me.cmbDestination.Value

    With Me
        If .OptMany.Value = True Then
            .LabelSep.Visible = True
            .CmdChildSep.Visible = True
            .CmdChildEnd.Visible = True
            .CheckTable.Visible = True
            .LabelInfo.Left = 390
            .Caption = AppCaption & "Version " & AppVer & " - Many to One"
            RemoveCloseButton Me

            With .cmbDestination
                .Clear
                .AddItem "Merge to Individual Word Files"
                .AddItem "Merge to Individual PDF Files"
                If IsPrinter("PDFCreator") Then
                    .AddItem "Merge to Individual PDF Files (using PDFCreator)"
                End If
                .AddItem "Merge to Printer"
                If IsOutlook Then
                    .AddItem "Merge to Email Message"
                    .AddItem "Merge to Email as Word Attachment"
                    .AddItem "Merge to Email as PDF Attachment"
                    If IsPrinter("PDFCreator") Then
                        .AddItem "Merge to Email as PDF Attachment (using PDFCreator)"
                    End If
                End If
                .ListIndex = -1
            End With
            .FrameOneToOne.Left = 390
            .lstMergeFields.Visible = True
            .lblChildField.Visible = True
            .lstRepeatFields.Visible = True
            .lblKeyField.Visible = True
            .txtKeyField.Visible = True
            .cmdKeyField.Visible = True
            .cmdAdd.Visible = True
            .cmdRemove.Visible = True
            .MultiPage1.Value = 0
        Else
            .LabelInfo.Left = 12
        End If
        .CheckTable.Value = GetSetting(AppID, "Config", "Child Fields in Table")
        If ActiveDocument.Tables.Count = 0 Then
            Me.CheckTable.Value = False
            SaveSetting AppID, "Config", "Child Fields in Table", False
        End If

        If .CheckSeparator.Value = True Then
            .CheckSeparator.Caption = "Child field separator is '|fffd|'"
            .CheckAndOr.Visible = False
        Else
            .CheckSeparator.Caption = "Child field separator is ','"
            .CheckAndOr.Visible = True
        End If

        If .CheckAndOr.Value = True Then
            .CheckAndOr.Caption = "Last child field separator is 'and'"
        Else
            .CheckAndOr.Caption = "Last child field separator is 'or'"
        End If

        .CmdChildEnd.Caption = .CheckAndOr.Caption
        .CmdChildSep.Caption = .CheckSeparator.Caption
        .CmdChildEnd.Visible = .CheckAndOr.Visible
        If .CmdChildEnd.Visible = True Then
            .CmdChildSep.Width = 180
            .LabelSep.Caption = "Click to change separator values:"
            .CheckTable.Visible = False
        Else
            .CmdChildSep.Width = 360
            .LabelSep.Caption = "Click to change separator value:"
            .CheckTable.Visible = True
        End If
    End With
End Sub

Private Sub OptOne_Click()
    SetUpPage Me.cmbDestination.Value
    With Me
        If .OptOne.Value = True Then
            .LabelSep.Visible = False
            .CmdChildSep.Visible = False
            .CmdChildEnd.Visible = False
            .CheckTable.Visible = False
            .FrameInfo.Left = 8
            .Caption = AppCaption & "Version " & AppVer & " - One to One"
            RemoveCloseButton Me
            Select Case bIsForm
                Case Is = True
                    With .cmbDestination
                        .Clear
                        .AddItem "Merge to Individual Word Files"
                        .ListIndex = 0
                        If IsOutlook Then
                            .AddItem "Merge to Email as Word Attachment"
                            .ListIndex = -1
                        End If

                    End With
                    .Label7.Caption = "This option allows mail merge with documents that include protected form fields from the Legacy form fields set. " & _
                                      "Protected form fields and mail merge are otherwise mutually exclusive."
                Case Is = False
                    With .cmbDestination
                        .Clear
                        .AddItem "Merge to Individual Word Files"
                        .AddItem "Merge to Individual PDF Files"
                        If IsPrinter("PDFCreator") Then
                            .AddItem "Merge to Individual PDF Files (using PDFCreator)"
                        End If
                        .AddItem "Merge to Printer"
                        If IsOutlook Then
                            .AddItem "Merge to Email Message"
                            .AddItem "Merge to Email as Word Attachment"
                            .AddItem "Merge to Email as PDF Attachment"
                            If IsPrinter("PDFCreator") Then
                                .AddItem "Merge to Email as PDF Attachment (using PDFCreator)"
                            End If
                            .ListIndex = -1
                        End If
                    End With
                    .Label7.Caption = "A One to One merge will simply split the document according to the selection chosen from the Start page. " & _
                                      "Records that have the same data in the filename field as the previous record will be skipped."
            End Select
            .FrameOneToOne.Left = 8
            .lstMergeFields.Visible = False
            .lblChildField.Visible = False
            .lstRepeatFields.Visible = False
            .lblKeyField.Visible = False
            .txtKeyField.Visible = False
            .cmdKeyField.Visible = False
            .cmdAdd.Visible = False
            .cmdRemove.Visible = False
            .MultiPage1.Value = 0
        End If
    End With
End Sub

Private Sub TextLeading_Change()
    If Me.ListSig.ListIndex > 0 Then
        Me.LabelLayout.Caption = Me.TextLeading.Text & _
                                 "{ " & Me.ListSig.Text & " }" & _
                                 Me.TextTrailing.Text & "(...next child data)"
    End If
End Sub

Private Sub TextTrailing_Change()
    If Me.ListSig.ListIndex > 0 Then
        Me.LabelLayout.Caption = Me.TextLeading.Text & _
                                 "{ " & Me.ListSig.Text & " }" & _
                                 Me.TextTrailing.Text & "(...next child data)"
    End If
End Sub

Private Sub Userform_Initialize()
    With Me
        .Top = Application.Top + 50
        SetUpPage .cmbDestination.Value
        If GetSetting(AppID, "Config", "Separator") = "" Then
            SaveSetting AppID, "Config", "Separator", True
        End If
        Me.CheckSeparator.Value = GetSetting(AppID, "Config", "Separator")

        If GetSetting(AppID, "Config", "AndOr") = "" Then
            SaveSetting AppID, "Config", "AndOr", True
        End If
        Me.CheckAndOr.Value = GetSetting(AppID, "Config", "AndOr")

        If GetSetting(AppID, "Config", "Child Fields in Table") = "" Then
            SaveSetting AppID, "Config", "Child Fields in Table", True
        End If

        SaveSetting AppID, "Config", "Child Fields in Table", CheckInTable
        .CheckTable.Value = GetSetting(AppID, "Config", "Child Fields in Table")

        If .CheckSeparator.Value = True Then
            .CheckSeparator.Caption = "Child field separator is '|fffd|'"
            .CheckAndOr.Visible = False
        Else
            .CheckSeparator.Caption = "Child field separator is ','"
            .CheckAndOr.Visible = True
        End If

        If .CheckAndOr.Value = True Then
            .CheckAndOr.Caption = "Last child field separator is 'and'"
        Else
            .CheckAndOr.Caption = "Last child field separator is 'or'"
        End If

        If GetSetting(AppID, "Config", "Retain CC") = "" Then
            SaveSetting AppID, "Config", "Retain CC", False
        End If
        .CheckRetain = GetSetting(AppID, "Config", "Retain CC")
        If .CheckRetain.Value = True Then
            .TextCCAddr.Text = GetSetting(AppID, "Config", "CopyTo")
        End If

        .CmdChildEnd.Caption = .CheckAndOr.Caption
        .CmdChildSep.Caption = .CheckSeparator.Caption
        .CmdChildEnd.Visible = .CheckAndOr.Visible
        If .CmdChildEnd.Visible = True Then
            .CmdChildSep.Width = 180
            .LabelSep.Caption = "Click to change separator values:"
            .CheckTable.Visible = False
        Else
            .CmdChildSep.Width = 360
            .LabelSep.Caption = "Click to change separator value:"
            .CheckTable.Visible = True
        End If

        If ActiveDocument.ProtectionType <> wdNoProtection Then
            bIsForm = True
        End If
        .MultiPage1.Value = 0
        .MultiPage1.Pages(3).Enabled = False
        .MultiPage1.Pages(2).Enabled = False
        .MultiPage1.Pages(1).Enabled = False
    End With
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        Cancel = True
    End If
End Sub

Attribute VB_Name = "frmPassword"
Attribute VB_Base = "0{9EFDE5F7-C7DB-46B7-AE34-2F19152641B0}{CCC145DB-26EF-49AC-B5F8-4D0C1A3724BA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CmdPwd_Click()
    Me.Hide
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        Cancel = True
    End If
End Sub
Attribute VB_Name = "frmProgress"
Attribute VB_Base = "0{AF8C149C-C942-4287-A618-23BE3722E3AD}{DCB9518A-65E8-46F2-884A-BE4EDA6526DD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
If CloseMode = vbFormControlMenu Then Cancel = True
End Sub
Attribute VB_Name = "modError"
Option Explicit

Function ShowError(ByRef LngCaption As Long, _
                   lngErr As Long, _
                   Optional bYesNo As Boolean, _
                   Optional fPath As String, _
                   Optional iErr As Long, _
                   Optional bQuit As Boolean)
Dim pCaption As String
Dim pMessage As String
Dim lngFontSize As Long
Dim strYes As String, strNo As String, strYesAcc As String, strNoAcc As String
Dim iHeight As Long
Dim iWide As Long
Dim strColor As String
Dim sOutlook As String

Const cap1 As String = "Wrong Word Version"
Const cap2 As String = "Wrong Document Type"
Const cap3 As String = "Missing Data Source"
Const cap4 As String = "Wrong Data Type"
Const cap5 As String = "Not Saved"
Const cap6 As String = "File Save"
Const cap8 As String = "Outlook Spell Check"
Const cap10 As String = "Temporary Folder"
Const cap11 As String = "Send Messages"
Const cap12 As String = "Invalid E-Mail Address"
Const cap13 As String = "Wrong Password"
Const cap14 As String = "Form"
Const cap15 As String = "Subject"
Const cap16 As String = "Password Confirmation Error"
Const cap17 As String = "User Information"
Const cap18 As String = "Incompatible Worksheet!"

Const msg1 As String = "This add-in is for use with Office 2007 and 2010 only."
Const msg2 As String = "This application is designed only to be run with a Letter type mail merge main document." & vbCr + vbCr & _
      "Open the correct document or change the document type and try again!"
Const msg3 As String = "Attach the data source and re-run the macro."
Const msg4 As String = "The data source must be an Excel Spreadsheet." & vbCr + vbCr & _
      "Attach the correct data source and try again."
Const msg5 As String = "The mail merge main document must be saved before the macro can continue" & vbCr + vbCr & _
      "Please click 'Continue' to save the document."
Const msg7 As String = "The documents will be saved in the default document file location."
Const msg9 As String = "The original document has been restored."
Const msg14 As String = "The messages have been moved from the temporary folder to the Outbox." & vbCr + vbCr & "If you have Outlook configured to send messages immediately, " & _
      "the messages will be sent automatically." & vbCr + vbCr & "If not you may click 'Send Now' to send and receive all messages now, otherwise click 'Continue' to close this dialog."
Const msg15 As String = "You may not select a field that is already selected."
Const msg16 As String = "The temporary folder is not present or there are no messages in the temporary folder to send?"
Const msg19 As String = "The password entered is incorrect." & vbCr + vbCr & "The process will be cancelled!"
Const msg20 As String = "The current document contains form fields. " & _
      "The merge document is not currently protected for forms." & vbCr + vbCr & _
      "Do you wish to protect the finished merged forms or continue without protection?"
Const msg21 As String = "You have not entered a subject for the message." & vbCr + vbCr & _
      "Messages without a subject may be treated as spam by the receiving mail server."
Const msg22 As String = "The password check entered does not match the original password!" & vbCr + vbCr & _
      "The process will be cancelled. Re-run the process and enter matching passwords in both dialogs."
Const msg23 As String = "There is a conflict between the number of mergefields reported in the merge document and the number of fields in the worksheet header row." & vbCr + vbCr & _
      "Before this function can process your data, you must use the Clean Worksheet function from the 'Misc Functions' menu in the add-in's ribbon group to correct the problem."
Const msg24 As String = "There are no tables in the merge document!"
Const msg25 As String = "The e-mail address entered is invalid, do you wish to correct it?" & vbCr & vbCr & _
      "If you choose not to correct the address, it will be omitted from the merge process."
Const msg26 As String = "The BCC option has been set for the main recipient(s). If you select the CC option here, the CC addresses will be visible to " & _
      "the main recipient(s)." & vbCr & vbCr & "Are you sure you want to do this?"
Const msg27 As String = "You have checked the option to use a field in the subject, but no field is selected. Do you wish to select a field?"
Const msg28 As String = "The merge document contains an address block field. This process does not use mail merge and cannot resolve address block field constructions." & vbCr & vbCr & _
      "Replace the address block field with the individual address fields that make up the address layout before continuing."
Const msg31 As String = "Select a filename field before using this option."
Const msg32 As String = "The Excel datasource must use Sheet 1 of the workbook, and the fieldnames must be in Row 1 starting at Column 1."
Const msg33 As String = "At least one of the columns in Row 1 of the Excel data source worksheet has a missing fieldname value." & vbCr & vbCr & "It is necessary to correct this before proceeding."
Const msg34 As String = "At least one of the fieldnames in Row 1 of the Excel datasource worksheet has a paragraph break. Paragraph breaks are not acceptable in field names for this merge process."
Const msg37 As String = "Each path in the data field selected for the message body document will now be tested for availability. If a path is invalid or missing a report will be produced enabling the data to be corrected before continuing with the merge." & vbCr & vbCr & _
      "Where the path associated with a record is missing or invalid, the merge may proceed, but the covering message will be blank." & vbCr & vbCr & "This process could take some time. Are you sure that you wish to proceed?"
Const msg38 As String = "Path errors have been found in the data field selected for the message body document. A report has been prepared listing the errant entries." & vbCr & vbCr & "It is recommended that you quit the merge and fix the errors."
Const msg39 As String = "The data file associated with the current document has only one field. Only 'One to One' merges are possible with such a data file."
Const msg40 As String = "The data file contains the '#' character. This is a reserved character used in this merge process, and if ignored will cause the merge to fail." & vbCr & vbCr & _
      "The add-in makes no changes to user data, so in order to proceed, you will need a version of the data with all '#' characters removed."
Const msg41 As String = "This function requires Outlook as the default e-mail application."
Const msg42 As String = "Do you wish to proceed with the merge of the filtered data now?"
Const msg43 As String = "You can complete the merge by clicking Start Merge in the application's ribbon group."
Const msg44 As String = "Do you wish to filter the data?" & vbCr & vbCr & _
      "Your choice will be retained and this dialog will not be shown again." & vbCr & vbCr & _
      "If you wish to change that choice, to re-display this dialog, click the 'Reset Filter Option' button in the add-in's ribbon group."
Const msg45 As String = "Filter Dialog Enabled."
Const msg46 As String = "Filter Dialog Disabled."
Const msg47 As String = "There should be no phantom fields in the data."
Const msg49 As String = "Filter function under development!"
Const msg50 As String = "The e-mail address is missing from record "
Const msg51 As String = "Error enumerating printers."
Const msg52 As String = "Unable to initialize PDFCreator."
Const msg53 As String = "This function works in conjunction with the List Field option. It places a docvariable field at the cursor with the correct syntax for use by the add-in."
Const msg54 As String = "E-mail validation is "

    strYes = "OK"
    strYesAcc = "O"
    strNo = "Cancel"
    strNoAcc = "C"
    iHeight = 164
    strColor = &HFF        'Red

    lngFontSize = 13
    Select Case LngCaption
        Case 1: pCaption = cap1
        Case 2: pCaption = cap2
        Case 3: pCaption = cap3
        Case 4: pCaption = cap4
        Case 5: pCaption = cap5
        Case 6: pCaption = cap6
        Case 7: pCaption = "Error number " & Err.Number
        Case 8: pCaption = cap8
        Case 10: pCaption = cap10
        Case 11: pCaption = cap11
        Case 12: pCaption = cap12
        Case 13: pCaption = cap13
        Case 14: pCaption = cap14
        Case 15: pCaption = cap15
        Case 16: pCaption = cap16
        Case 17: pCaption = cap17
        Case 18: pCaption = cap18

    End Select
    Select Case lngErr
        Case 1
            pMessage = msg1
            iHeight = 114
        Case 2
            pMessage = msg2
            iHeight = 184
        Case 3
            pMessage = msg3
            iHeight = 114
        Case 4
            pMessage = msg4
        Case 5
            pMessage = msg5
            strYes = "Continue"
            strYesAcc = "C"
        Case 6
            pMessage = Err.Description
            If pMessage = "Subscript out of range" Then
                lngFontSize = 12
                iHeight = 174
                pMessage = pMessage & vbCr + vbCr & _
                           "The most common reason for this error is a problem with the Excel data file. Check for conditions this add-in cannot handle. This would include hidden columns, and missing column headings"
            Else
                iHeight = 164
            End If
        Case 7
            pMessage = msg7
            strColor = wdColorRed
            iHeight = 114
        Case 8
            If Val(Application.Version) = 14 Then
                sOutlook = "File > Options > Mail."
            Else
                sOutlook = "Tools > Options."
            End If
            lngFontSize = 10
            strColor = wdColorBlue
            pMessage = "The add-in has detected that you have the option selected in Outlook, to spell check messages before sending. When merging to the body of an e-mail message, this may result in a requirement for user interaction between every message, which, with a large data source, can be very tedious." & vbCr & vbCr & _
                       "To avoid that situation, the option to merge to that destination will not be available until the option to spell check is de-selected in Outlook's " & sOutlook & vbCr & vbCr & _
                       "Either continue and choose a destination other than merging to the body of e-mail messages or select Cancel to quit the macro then change the spell check setting before running the macro again."
            iHeight = 264
        Case 9
            pMessage = msg9
            iHeight = 114
        Case 10
            pMessage = "A temporary Outlook folder" & vbCr + vbCr & _
                       fPath & vbCr + vbCr & "has been created as a sub folder to 'Drafts', to store the messages and their attachments."
            strColor = wdColorBlue
            iHeight = 194
        Case 11
            pMessage = "Temporary Outlook folder(s)" & vbCr + vbCr & _
                       fPath & vbCr + vbCr & "have been removed."
            strColor = wdColorBlue
            iHeight = 164
        Case 12
            pMessage = "The temporary Outlook folder" & vbCr + vbCr & _
                       fPath & vbCr + vbCr & "contains files that have not been sent. Are you sure that you wish to remove it?"
            strYes = "Yes"
            strNo = "No"
            strYesAcc = "Y"
            strNoAcc = "N"
            iHeight = 174
        Case 13
            pMessage = "Do you wish to remove the Outlook temporary folder" & vbCr + vbCr & fPath & vbCr + vbCr & _
                       "If you choose to remove it, it will be recreated next time this application is run."
            strYes = "Yes"
            strNo = "No"
            strYesAcc = "Y"
            strNoAcc = "N"
            strColor = wdColorBlue
            iHeight = 204
        Case 14
            pMessage = msg14
            strColor = wdColorBlue
            strYes = "Send Now"
            strNo = "Continue"
            strYesAcc = "S"
            strNoAcc = "C"
            iHeight = 184
        Case 15
            pMessage = msg15
            iHeight = 114
        Case 16
            pMessage = msg16
            lngFontSize = 14
            iHeight = 134
        Case 17
            If iErr = 1 Then
                pMessage = "The e-mail address associated with record" & vbCr & _
                           fPath & vbCr & "is invalid. Correct the error and re-run the macro."
            Else
                pMessage = "The e-mail addresses associated with records" & vbCr & _
                           fPath & vbCr & "are invalid. Correct the errors and re-run the macro."
            End If
            strYes = "Exit function"
            strYesAcc = "E"
            lngFontSize = 14
            If iErr > 10 Then lngFontSize = 12
            iHeight = 174
        Case 18
            pMessage = "In the field " & Chr(34) & fPath & Chr(34) & " chosen for the e-mail addresses, " & _
                       "the majority of records do not appear to contain e-mail addresses. " & vbCr & _
                       vbCr & "This function requires that all the records have valid e-mail addresses."
            strYes = "Exit function"
            strYesAcc = "E"
            iHeight = 184
        Case 19
            pMessage = msg19
            strColor = wdColorRed
            iHeight = 134
        Case 20
            pMessage = msg20
            iHeight = 204
            strYes = "Protect Forms"
            strNo = "Continue"
            strYesAcc = "P"
            strNoAcc = "N"

        Case 21
            pMessage = msg21
            iHeight = 184
            strYes = "Add Subject"
            strNo = "Continue"
            strYesAcc = "A"
            strNoAcc = "C"

        Case 22
            pMessage = msg22
            iHeight = 184
            strYes = "End Process"
            strYesAcc = "E"

        Case 23
            pMessage = msg23
            iHeight = 244
        Case 24
            pMessage = msg24
            iHeight = 114
        Case 25
            pMessage = msg25
            strYes = "Yes"
            strNo = "Ignore"
            strYesAcc = "Y"
            strNoAcc = "I"
            iHeight = 174

        Case 26
            pMessage = msg26
            strYes = "Yes"
            strNo = "No"
            strYesAcc = "Y"
            strNoAcc = "N"
            iHeight = 184
        Case 27
            pMessage = msg27
            strYes = "Yes"
            strNo = "No"
            strYesAcc = "Y"
            strNoAcc = "N"

            iHeight = 134
        Case 28
            pMessage = msg28
            iHeight = 212
            strYes = "End Process"
            strYesAcc = "E"
        Case 29
            pMessage = "The data source has an empty field. This may result in incorrect or incomplete information being merged into the document, " & _
                       "and should be avoided if the field is to be:" & vbCr & vbCr & _
                       "Used as an e-mail address" & vbCr & _
                       "Included in an e-mail subject" & vbCr & _
                       "Used to name the document" & vbCr & _
                       "Used as a key field." & vbCr & vbCr & _
                       "It is recommended that you correct the data to eliminate the empty field value." & vbCr & vbCr & _
                       "Do you wish to cancel or continue with the missing data?"
            iHeight = 330
            strYes = "Continue"
            strYesAcc = "C"
            strNo = "Cancel"
            strNoAcc = "n"
        Case 30
            pMessage = "The data source has empty fields. This may result in incorrect or incomplete information being merged into the document, " & _
                       "and should be avoided if the field is to be:" & vbCr & vbCr & _
                       "Used as an e-mail address" & vbCr & _
                       "Included in an e-mail subject" & vbCr & _
                       "Used to name the document" & vbCr & _
                       "Used as a key field." & vbCr & vbCr & _
                       "It is recommended that you correct the data to eliminate the empty field values." & vbCr & vbCr & _
                       "Do you wish to cancel or continue with the missing data?"
            iHeight = 330
            strYes = "Continue"
            strYesAcc = "C"
            strNo = "Cancel"
            strNoAcc = "n"
        Case 31
            pMessage = msg31
            iHeight = 114
        Case 32
            pMessage = msg32
            iHeight = 134
        Case 33
            pMessage = msg33
            iHeight = 182
        Case 34
            pMessage = msg34
        Case 35
            pMessage = fPath
            If InStr(1, fPath, "reset") Then
                iHeight = 140
            Else
                iHeight = 114
            End If
        Case 36
            pMessage = "The application uses column A of the datasource to determine which records to process. This column appears to have fewer values than there are records. " & _
                       "This will result in the merge being unable to process all the records." & vbCr & vbCr & _
                       "It is essential that you correct the data to eliminate the empty field values in the first column (or move that column to the right, to leave a column A with all values completed) before running the process again."
            iHeight = 290
            strYes = "End Process"
            strYesAcc = "E"
        Case 37
            pMessage = msg37
            iHeight = 304
            strYes = "Validate Paths"
            strYesAcc = "V"
            strNoAcc = "C"
            strNo = "Cancel"
        Case 38
            pMessage = msg38
            iHeight = 194
            strYes = "Quit the Merge"
            strNo = "Continue"
            strYesAcc = "Q"
            strNoAcc = "C"

        Case 39
            pMessage = msg39
            iHeight = 144
        Case 40
            pMessage = msg40
            iHeight = 220
        Case 41
            pMessage = msg41
            iHeight = 114
        Case 42
            pMessage = msg42
            iHeight = 114
        Case 43
            pMessage = msg43
            iHeight = 134
        Case 44
            pMessage = msg44
            iHeight = 234
            strYes = "Filter"
            strNo = "No Filter"
            strYesAcc = "F"
            strNoAcc = "N"
        Case 45
            pMessage = msg45
            iHeight = 100
        Case 46
            pMessage = msg46
            iHeight = 100

        Case 47
            pMessage = msg47
            iHeight = 120
        Case 48
            If fPath = "columns and rows" Then
                pMessage = "The numbers of " & fPath & " used in the worksheet and reported by Word Mail Merge do not match the " & " numbers of " & fPath & " identified by the Many to One function." & vbCr & vbCr & _
                           "Do you wish to correct the worksheet?"
            Else
                pMessage = "The number of " & fPath & " used in the worksheet and reported by Word Mail Merge does not match the " & " number of " & fPath & " identified by the Many to One function." & vbCr & vbCr & _
                           "Do you wish to correct the worksheet?"
            End If
            pMessage = pMessage & vbCr & vbCr & "If you continue, the original workbook will saved with '(Original)' appended to the filename and the modified file will be saved with the original filename."
            iHeight = 270
        Case 49
            pMessage = msg49
            iHeight = 100
        Case 50
            pMessage = msg50 & fPath & vbCr & vbCr & "The message will be created in the Outlook temporary folder, but do not attempt to send it until the correct" & vbCr & "e-mail address has been added."
            iHeight = 190
        Case 51
            pMessage = msg51
            iHeight = 100
        Case 52
            pMessage = msg52
            iHeight = 100
        Case 53
            pMessage = msg53
            iHeight = 140
            strNo = "Help"
            strNoAcc = "H"
        Case 54
            If CBool(fPath) = True Then
                pMessage = msg54 & "enabled."
            Else
                pMessage = msg54 & "disabled."
            End If
            strNoAcc = "C"
            strNo = "Cancel"
            iHeight = 100
    End Select

    Unload frmErr1
    With frmErr1
        .Height = iHeight
        .LBL_Err1.Height = .Height - 78
        .Caption = pCaption
        .CB_ErrOK.Caption = strYes
        .CB_ErrOK.Accelerator = strYesAcc
        .CBErrNo.Caption = strNo
        .CBErrNo.Accelerator = strNoAcc
        .CB_ErrOK.Top = .Height - 54
        .CBErrNo.Top = .Height - 54
        .CBQuit.Top = .Height - 54
        .CBQuit.Accelerator = ""
        If bYesNo = True Then
            .CB_ErrOK.Left = 108
            .CB_ErrOK.Width = 118
            .CBErrNo.Visible = True
            .CBErrNo.Left = 12
        Else
            .CB_ErrOK.Left = 18
            .CB_ErrOK.Width = 204
            .CBErrNo.Visible = False
        End If
        If bQuit = True Then
            .CBQuit.Width = 72
            .CBQuit.Visible = True
            .CBQuit.Left = 12
            .CBQuit.Accelerator = "Q"
            .CBErrNo.Width = 72
            .CBErrNo.Visible = True
            .CBErrNo.Left = 84
            .CB_ErrOK.Width = 72
            .CB_ErrOK.Left = 156
        End If
        With .LBL_Err1
            .Caption = pMessage
            .Font.name = "Calibri"
            .Font.Size = lngFontSize
            .Font.Bold = False
            .ForeColor = strColor
            .TextAlign = fmTextAlignCenter
        End With
        Beep
        RemoveCloseButton frmErr1
        .Show
    End With
End Function
Attribute VB_Name = "modMessages"
Option Explicit
Private olApp As Object        'As Outlook.Application
Private olItems As Object        'As Outlook.Items
Private olItem As Object        'As Outlook.MailItem
Private olNS As Object        'As Outlook.NameSpace
Private olSycs As Object        'As Outlook.SyncObjects
Private olSyc As Object        'As Outlook.SyncObject
Private ifolder As Object        'As Outlook.Folder
Private oRoot As Object        'As Outlook.Folder
Private olFolders As Object        'As Outlook.folders
Private olFolder As Object        'As Outlook.Folder
Private Folder As Object
Private folders As Object
Private foldercount As Integer
Private iNewFolder As Object        'As Outlook.Folder
Private colStores As Object        'As Outlook.Stores
Private oStore As Object        'As Outlook.Store
Private olAccount As Object        'As Outlook.Account
Private bStarted As Boolean
Private bFolderPresent As Boolean
Private bExists As Boolean
Private i As Long
Private strAccount As String
Private olMailItems As Object        'As Outlook.Items

Sub AddOutlookFolder()
    bExists = False
    bStarted = False
    On Error Resume Next

    Set olApp = GetObject(, "Outlook.Application")
    If Err <> 0 Then
        Set olApp = CreateObject("Outlook.Application")
        bStarted = True
    End If
    Set olNS = olApp.GetNamespace("MAPI")
    olNS.logon
    For i = olNS.GetDefaultFolder(16).folders.Count To 1 Step -1
        Set ifolder = olNS.GetDefaultFolder(16).folders(i)
        If ifolder.name = strFolderName Then
            bExists = True
            Set iNewFolder = olNS.GetDefaultFolder(16).folders(i)
            Exit For
        End If
    Next i

    If Not bExists Then
        Set ifolder = olNS.GetDefaultFolder(16)
        Set iNewFolder = ifolder.folders.Add(strFolderName)
        ShowError 10, 10, False, iNewFolder.name
    End If

CleanUp:
    If bStarted Then
        olApp.Quit
    End If

    Set ifolder = Nothing
    Set iNewFolder = Nothing
    Set olNS = Nothing
    Set olApp = Nothing
End Sub

Sub RemoveOutlookFolder()
    On Error Resume Next
    bStarted = False
    Set olApp = GetObject(, "Outlook.Application")
    If Err <> 0 Then
        Set olApp = CreateObject("Outlook.Application")
        bStarted = True
    End If

    Set olNS = olApp.GetNamespace("MAPI")
    olNS.logon

    For Each ifolder In olNS.GetDefaultFolder(16).folders
        If ifolder.name = strFolderName Then
            ifolder.Delete
            Exit For
        End If
    Next ifolder
    ShowError 10, 11, False, strFolderName

CleanUp:
    If bStarted Then
        olApp.Quit
    End If
    Set olApp = Nothing
    Set olNS = Nothing
    Set ifolder = Nothing
End Sub

Private Sub SendNewMessages(ByVal oStore As Object, oFldr As Object)
    Set folders = oFldr.folders
    foldercount = folders.Count
    'Check if there are any folders below oFolder
    If foldercount Then
        For Each Folder In folders
            If Folder.name = strFolderName Then
                If Folder.Items.Count > 0 Then
                    For i = Folder.Items.Count To 1 Step -1
                        Set olItem = Folder.Items(i)
                        olItem.sEnd
                    Next i
                End If
            End If
            SendNewMessages oStore, Folder
        Next Folder
    End If
CleanUp:
    Set folders = Nothing
    Set Folder = Nothing
    Set olItem = Nothing
End Sub

Sub SendMessages()
    On Error Resume Next
    bStarted = False
    Set olApp = GetObject(, "Outlook.Application")
    If Err <> 0 Then
        Set olApp = CreateObject("Outlook.Application")
        bStarted = True
    End If

    Set olNS = olApp.GetNamespace("MAPI")
    olNS.logon

    Set colStores = olNS.Stores
    For Each oStore In colStores
        Set oRoot = oStore.getrootfolder
        SendNewMessages oStore, oRoot
    Next oStore

    ShowError 11, 14, True
    If frmErr1.Tag = 1 Then
        Set olSycs = olNS.SyncObjects
        For i = 1 To olSycs.Count
            Set olSyc = olSycs.Item(i)
            olSyc.Start
        Next
        Unload frmErr1
    End If

CleanUp:
    Set olApp = Nothing
    Set olNS = Nothing
    Set colStores = Nothing
    Set oRoot = Nothing
    Set oStore = Nothing
End Sub

Sub SendAllMessages()
    On Error Resume Next
    Set olApp = GetObject(, "Outlook.Application")
    If Err <> 0 Then
        Set olApp = CreateObject("Outlook.Application")
        bStarted = True
    End If
    On Error GoTo 0

    Set olNS = olApp.GetNamespace("MAPI")
    olNS.logon
    Set olSycs = olNS.SyncObjects
    Set olItems = olNS.GetDefaultFolder(4).Items
    For i = olItems.Count To 1 Step -1
        Set olItem = olItems(i)
        olItem.sEnd
    Next i
    For i = 1 To olSycs.Count
        Set olSyc = olSycs.Item(i)
        olSyc.Start
    Next
CleanUp:
    Set olApp = Nothing
    Set olItems = Nothing
    Set olItem = Nothing
    Set olNS = Nothing
    Set olSycs = Nothing
    Set olSyc = Nothing
End Sub


Attribute VB_Name = "modOutlook"
Option Explicit
'Check the registry to see if Outlook is the default email application
Public Function IsOutlook() As Boolean
Dim myWS As Object
Dim RegKey As String
Dim Key As String
    Key = "HKEY_LOCAL_MACHINE\SOFTWARE\Clients\Mail\"
    On Error Resume Next
    'access Windows scripting
    Set myWS = CreateObject("WScript.Shell")
    'read key from registry
    RegKey = myWS.RegRead(Key)
    If RegKey = "Microsoft Outlook" Then
        IsOutlook = True
    Else
        IsOutlook = False
    End If
    Set myWS = Nothing
End Function




INQUEST-PP=macro
