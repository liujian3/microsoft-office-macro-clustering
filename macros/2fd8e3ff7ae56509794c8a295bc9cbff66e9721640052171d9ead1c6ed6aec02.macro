Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

'Sinn der Aktion ist, dass ein Angebot nur |fffd|ber den "Angebot speichern"-Button gespeichert werden kann.
'Damit kann sichergestellt werden, dass es im vogegebenen Pfad landet und andere Sicherheitsmerkmale beachtet werden k|fffd|nnen.

'!!!!!!!!!!1 nur ich kann au|fffd|er der Reihe speichern !!!!! evtl auf andere Admins ausdehnen !!!!!!!!!!!!!!!

    If Not IstKundenversion() Then      'Kunden k|fffd|nnen beliebig speichern
        If Not (Range("Name_Bearbeiter_Kurzzeichen") = "PL" Or Range("Name_Bearbeiter_Kurzzeichen") = "RoNu" Or Range("Name_Bearbeiter_Kurzzeichen") = "JH") Then
            If Not VonAngebotSpeichern Then
                MsgBox ("Kann auf diesem Weg nicht gespeichert werden. Bitte dazu den 'Angebot speichern'-Button verwenden.")
                Cancel = True
            End If
        End If
    End If

    VonAngebotSpeichern = False
End Sub

Private Sub Workbook_Open()

'Beim |fffd|ffnen werden verschiedene Einstellungen vorgenommen und Daten aus der Access-DB geholt.

'- Update-Daten der Access-DB
'- Daten aus der Access-DB in diese Excel-Mappe

'Dabei gibt es Einschr|fffd|nkungen:
'- Bei der Kundenversion kein Kontakt zur Access-DB
'- Bei Angeboten keine |fffd|bernahme aus der Access-DB, daf|fffd|r die Bearbeitung sperren
'  (wird alles erst dann wieder offen, wenn das Angebot per Button zur Bearbeitung ge|fffd|ffnet wird)


'Den Check, ob lokal beim Kunden oder die globale Version kann ich |fffd|ber das "Admin"-Tabellenblatt ermitteln. Wenn das da ist, dann ist es die globale Version
    
    If Not IstKundenversion() Then      'Kundenversionen werden anders behandelt
    
'wenn bei Tech Data ....
    
    
        If Worksheets(TUpdates).Range("Name_AngebotNummer") = "" Then
            'dann ist es ein leerer Kalkulator (kein Angebot)
    
            'Call KalkulatorVorbereiten  'ist jetzt in frmBitteWarten
            frmBitteWarten.Show
           
            Worksheets(TKalkulator).cmdVmware.Visible = False
            Worksheets(TKalkulator).cmdVeeam.Visible = False
           ' Worksheets(TKalkulator).cmdAngebotSpeichern.Visible = False
            
            Worksheets(TKalkulator).optCpp.Visible = False
            Worksheets(TKalkulator).optVpp.Visible = False
            Worksheets(TKalkulator).cmdOranFreigabe.Visible = False
            Range("Name_TextRabattsystem") = ""
                  
        Else
            'dann ist es ein Angebot
           
        End If
        
       
        
        'Berechnungsspalten ausblenden
        ThisWorkbook.Worksheets(TKalkulator).Range("O:AZ").EntireColumn.Hidden = True
        
        'aufr|fffd|umen ...
        Application.StatusBar = False
        
        Worksheets(TKalkulator).Activate
        Cells(1, 1).Select
    Else
        'wenn beim Kunden ...
        
    End If
        
    
End Sub


Attribute VB_Name = "Dokumentation"
Option Explicit



'------------------------------
'Selektion von Veeam-Artikeln

'Selektion nach
'   Typ (Lizenz, Renewal, IUL, Support)
'   Kundenart (Commercioal, Public, Education)

'zeige alle Artikel, bei denen
'   NICHT ((DistiProzent=DistiLizenz))
'   ODER
'   ((DistiProzent=DistiLizenz) UND (ProductSKU(Stelle 1) = ("P" bzw. "C" bzw. "V")) ))


'   "WHERE (( NOT ((DistiProzent=" & Str(DistiLizenz) & "))) " & _
    "OR " & _
    "((DistiProzent=" & Str(DistiLizenz) & ") AND ((Left([ProductSKU],1))=""" & TextKundenart & """))) "



'---------------------------
'Selektion nach Veeam-Textfilter

'1 Filterwort
'   (Description WIE *Wort1*) ODER (ProductSKU WIE *Wort1*)

'2 Filterw|fffd|rter
'   (Description WIE *Wort1*)  ODER (ProductSKU WIE *Wort1*)
'   UND
'   (Description WIE *Wort2*)  ODER (ProductSKU WIE *Wort2*)
Attribute VB_Name = "Modul1"
Option Explicit

Sub Makro1()
Attribute Makro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro1 Makro
'

'
    Rows("27:27").Select
    With Selection.Font
        .Name = "Arial"
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
End Sub
Attribute VB_Name = "Modul2"
Option Explicit

Sub Makro2()
Attribute Makro2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro2 Makro
'

'
    ActiveCell.FormulaR1C1 = _
        "=IF(Name_VMware_Tier=0,RC17,IFERROR(INDEX('Preisliste VMware'!C1,IFERROR(MATCH(RC17&""T""&Name_VMware_Tier,'Preisliste VMware'!C1,0),IFERROR(MATCH(RC17&""-T""&Name_VMware_Tier,'Preisliste VMware'!C1,0),MATCH(LEFT(RC[-7],LEN(RC[-7])-2) & RIGHT(RC[-7],1)&""-T""&Name_VMware_Tier,'Preisliste VMware'!C1,0)))),RC17))"
    Range("X28").Select
End Sub
Attribute VB_Name = "Modul3"
Option Explicit

Sub Makro3()
Attribute Makro3.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro3 Makro
'

'
    ActiveCell.FormulaR1C1 = _
        "=INDEX(R4C42:R7C43,MATCH(RC[-1],R4C41:R7C41,0),IF(RC[-3],2,1))"
    Range("AG45").Select
End Sub
Attribute VB_Name = "Modul4"
Option Explicit

Sub Makro4()
Attribute Makro4.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro4 Makro
'

'
    ActiveCell.FormulaR1C1 = _
        "=INDEX('Tagespreisliste VMware'!C[-45],Kalkulator!R[-4]C[-4])"
    Range("AY33").Select
End Sub
Sub Makro5()
Attribute Makro5.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro5 Makro
'

'
    Range("AY32").Select
    ActiveCell.FormulaR1C1 = _
        "=INDEX('Tagespreisliste VMware'!C6,Kalkulator!R[-4]C[-4])"
    Range("AY33").Select
End Sub
Sub Makro6()
Attribute Makro6.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro6 Makro
'

'
    ActiveCell.FormulaR1C1 = "=INDEX('Tagespreisliste Veeam'!C5,RC47)"
    Range("AD44").Select
    Sheets("Kalkulator").Select
    Range("AD42").Select
    ActiveCell.FormulaR1C1 = _
        "=IFERROR(INDEX('Tagespreisliste Veeam'!C5,RC47),"""")"
    Range("AD42").Select
End Sub
Sub Makro7()
Attribute Makro7.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro7 Makro
'

'
    ActiveCell.FormulaR1C1 = _
        "=IFERROR(INDEX('Tagespreisliste Veeam'!C5,RC47),"""")"
    Range("AD44").Select
End Sub
Sub Makro8()
Attribute Makro8.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro8 Makro
'

'
    ActiveCell.FormulaR1C1 = "=RC29 & IF(RC30=0,"""",""  ||  ""&RC30)"
    Range("E47").Select
End Sub
Sub Makro9()
Attribute Makro9.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro9 Makro
'

'
    Rows("29:29").Select
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub
Sub Makro10()
Attribute Makro10.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro10 Makro
'

'
    Rows("32:32").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
End Sub
Attribute VB_Name = "Modul5"
Option Explicit

Sub Makro11()
Attribute Makro11.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro11 Makro
'

'
    Range("N28").Select
    With Selection.Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End Sub
Attribute VB_Name = "Modul6"
Option Explicit

Sub Makro12()
Attribute Makro12.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro12 Makro
'

'
    ActiveCell.FormulaR1C1 = _
        "=VLOOKUP(RC26,'Tagespreisliste Veeam'!C1:C10,10,FALSE)+R17C41+R17C44"
    Range("AP41").Select
End Sub
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Private Sub cmdAnsprechpartner_Click()
    frmAnsprechpartner.Show
End Sub

Private Sub cmdDeltasStatus_Click()

    Call DeltasStatus
End Sub

Private Sub cmdKdA_Click()
    TransferMuster = "KundenAdressen"
    frmMuster.Show
End Sub

Private Sub cmdKdK_Click()
    TransferMuster = "KundenKonditionen"
    frmMuster.Show
End Sub

Private Sub cmdKondis_Click()
TransferMuster = "Konditionen"
    frmMuster.Show
End Sub

Private Sub cmdKonditionenEinlesen_Click()
    Call KonditionenEinlesen
End Sub

Private Sub cmdKundenBearbeiten_Click()
    frmKunde.Show
End Sub

Private Sub cmdKundenEinlesen_Click()

    Call KundenEinlesen
End Sub

Private Sub cmdKundenKonditionenEinlesen_Click()
    Call KundenKonditionenEinlesen
End Sub

Private Sub cmdMusterDeltasStatus_Click()

    TransferMuster = "DeltasStatus"
    frmMuster.Show
End Sub

Private Sub cmdPfade_Click()

   frmPfade.Show
End Sub

Private Sub cmdPreislistenversand_Click()

    If Worksheets(TAdmin).Cells(12, 14) = "" Or Worksheets(TAdmin).Cells(13, 14) = "" Then
        MsgBox ("die Felder 'Monat + Version' und 'Angebote g|fffd|ltig bis' m|fffd|ssen ausgef|fffd|llt sein!")
    Else
        Call Preislistenversand
    End If
End Sub

Private Sub cmdPreislisteVeeamAktualisieren_Click()
    Call VeeamPreislisteEinlesen
End Sub

Private Sub cmdPreislisteVmwareAktualisieren_Click()
    Call VmwarePreislisteEinlesen
End Sub

Private Sub cmdVmwareSupport_Click()
    Call ImportSupportTabelle
End Sub

Private Sub cmdVmwareListenvergleich_Click()

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstPL As Object    'DAO.Recordset

Dim FDlg As FileDialog

Dim SelItem As Variant
Dim wbVmware As Workbook
Dim wsA As Worksheet
Dim wsD As Worksheet

Dim rngErgebnis As Range

Dim wbAbgleich As Workbook
Dim wsAbgleich As Worksheet
Dim ZeileAbgleich As Long

    'Einf|fffd|hrung ...
    MsgBox ("Dieses Programm vergleicht die original VMware Preisliste mit der internen Liste vom Kalkulator. " & _
            "Alle Produkte, die in der Liste vom Kalkulator ohne 'Ablaufdatum', aber nicht in der VMware Preisliste vorhanden sind, werden in eine neue Excel-Tabelle geschrieben." & vbCrLf & vbCrLf & _
            "Mit dem zweiten Programm (Button 'VMware markierte SKUs l|fffd|schen') kann man die dort vorhandenen Produkte l|fffd|schen." & vbCrLf & vbCrLf & _
            "Wichtig ist, die korrekte VMware-Preisliste auszuw|fffd|hlen, die auch im Kalkulator eingelesen wurde. Ob EUR- oder USD-Liste ist egal.")

    'Excel-Preisliste |fffd|ffnen
    Set FDlg = Application.FileDialog(msoFileDialogOpen)
    FDlg.AllowMultiSelect = False
    FDlg.Filters.Clear
    FDlg.Filters.Add "Excel-Dateien", "*.xls; *.xlsx"
    FDlg.Title = "VMware-Preisliste ausw|fffd|hlen"
    If FDlg.Show Then
        
        For Each SelItem In FDlg.SelectedItems
                
            'Preisliste |fffd|ffnen
            Set wbVmware = Workbooks.Open(Filename:=SelItem)
    
            On Error Resume Next
            Set wsA = wbVmware.Worksheets("A-EUR")
            If Err.Number > 0 Then
                Set wsA = wbVmware.Worksheets("A-USD")
            End If
            On Error GoTo 0
            Set wsD = wbVmware.Worksheets("D")
    
            'neue Excel-Tabelle erstellen
            Set wbAbgleich = Application.Workbooks.Add
            Set wsAbgleich = wbAbgleich.ActiveSheet
            wsAbgleich.Cells(1, 1) = "PartNumber"
            ZeileAbgleich = 2
            
    
            'Access starten
            Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
            Set accDB = dbEngine.OpenDatabase(ThisWorkbook.Worksheets(TUpdates).Range("Name_PfadAccessDB"))
    
            Set rstPL = accDB.OpenRecordset("SELECT PartNumber, Product FROM tblPreislisteVMware WHERE GueltigBis is Null", dbOpenSnapshot)
            
            Do While Not rstPL.EOF
    
                Application.StatusBar = rstPL.absoluteposition
    
                Set rngErgebnis = wsA.Columns(6).Find(What:=rstPL!PartNumber, After:=wsA.Cells(1, 6), LookIn:=xlFormulas _
                        , LookAt:=xlWhole, SearchOrder:=xlByColumns, SearchDirection:=xlNext, _
                        MatchCase:=False, SearchFormat:=False)
    
    
                If rngErgebnis Is Nothing Then
                    Set rngErgebnis = wsD.Columns(6).Find(What:=rstPL!PartNumber, After:=wsA.Cells(1, 6), LookIn:=xlFormulas _
                            , LookAt:=xlWhole, SearchOrder:=xlByColumns, SearchDirection:=xlNext, _
                            MatchCase:=False, SearchFormat:=False)
    
                    If rngErgebnis Is Nothing Then
                        wsAbgleich.Cells(ZeileAbgleich, 1) = rstPL!PartNumber
                        wsAbgleich.Cells(ZeileAbgleich, 2) = rstPL!Product
                        ZeileAbgleich = ZeileAbgleich + 1
                    End If
                End If
    
                rstPL.MoveNext
            Loop
    
            'aufr|fffd|umen
            Application.StatusBar = False
    
            wbVmware.Close savechanges:=False
    
            rstPL.Close
            Set rstPL = Nothing
            
            accDB.Close
            Set accDB = Nothing
            'dbEngine.Quit
            Set dbEngine = Nothing
    
        Next SelItem
        
        MsgBox ("Abgleich fertig, Liste erstellt")
        
    End If




End Sub

Private Sub cmdVmwareProdukteLoeschen_Click()

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstPL As Object    'DAO.Recordset

Dim wbAbgleich As Workbook
Dim wsAbgleich As Worksheet
Dim ZeileAbgleich As Long
Dim rngAbgleich As Range

Dim FDlg As FileDialog
Dim SelItem As Variant

'Einf|fffd|hrung ...
    MsgBox ("Dieses Programm ben|fffd|tigt die Liste, die der Button dar|fffd|ber bereits generiert hat (alternativ gleich aufgebaute Listen). " & _
            "Ausgewertet wird nur die erste Spalte mit der Produktnummer. Alle Artikel, die in der Liste zu finden sind, werden unwiederbringlich gel|fffd|scht. " & _
            "Dabei ist es egal, ob dazwischen L|fffd|cken sind.")

    'Excel-Abgleich |fffd|ffnen
    Set FDlg = Application.FileDialog(msoFileDialogOpen)
    FDlg.AllowMultiSelect = False
    FDlg.Filters.Clear
    FDlg.Filters.Add "Excel-Dateien", "*.xls; *.xlsx"
    FDlg.Title = "VMware-L|fffd|schliste ausw|fffd|hlen"
    If FDlg.Show Then
        
        For Each SelItem In FDlg.SelectedItems
                
            'Preisliste |fffd|ffnen
            Set wbAbgleich = Workbooks.Open(Filename:=SelItem)
    
            Set wsAbgleich = wbAbgleich.ActiveSheet
    
            'ZeileAbgleich = 1
            Set rngAbgleich = wsAbgleich.Cells(1, 1)
    
            'Access starten
            Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
            Set accDB = dbEngine.OpenDatabase(ThisWorkbook.Worksheets(TUpdates).Range("Name_PfadAccessDB"))
    
            Set rstPL = accDB.OpenRecordset("SELECT PartNumber FROM tblPreislisteVMware", dbOpenDynaset)
            
            Do
    
                'ZeileAbgleich = ZeileAbgleich + 1
                Set rngAbgleich = rngAbgleich.Offset(1, 0)
                
                If rngAbgleich.Value = "" Then
                    Set rngAbgleich = rngAbgleich.End(xlDown)
                End If
    
                Application.StatusBar = rngAbgleich.Row
    
                If rngAbgleich.Value <> "" Then
                    rstPL.FindFirst "PartNumber=""" & rngAbgleich.Value & """"
                    
                    If Not rstPL.nomatch Then
                        rstPL.Delete
                    End If
                    
                    
                End If
    
                
            Loop Until rngAbgleich.Row > 1000000
    
            'aufr|fffd|umen
            Application.StatusBar = False
    
            wbAbgleich.Close savechanges:=False
    
            rstPL.Close
            Set rstPL = Nothing
            
            accDB.Close
            Set accDB = Nothing
            'dbEngine.Quit
            Set dbEngine = Nothing
    
        Next SelItem
        
        MsgBox ("alle gel|fffd|scht")
        
    End If





End Sub

Private Sub cmdVmwareSupportEinlesen_Click()
    Call ListeEinlesen
End Sub

Private Sub cmdVmwareSupportErstellen_Click()
    Call ListeErstellen
End Sub

Private Sub cmdVPP_Click()
    Call ImportVppTabelle
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

    If Target.Address = "$B$30" Then
        Worksheets(TKalkulator).Range("Name_Wechselkurs_EurChf") = Range("B30")
    End If

End Sub


Attribute VB_Name = "Tabelle10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "optCpp, 57, 0, MSForms, OptionButton"
Attribute VB_Control = "optVpp, 56, 1, MSForms, OptionButton"
Attribute VB_Control = "cmdAngebotSpeichern, 14, 5, MSForms, CommandButton"
Attribute VB_Control = "cmdVmware, 5, 6, MSForms, CommandButton"
Attribute VB_Control = "cmdVeeam, 4, 8, MSForms, CommandButton"
Attribute VB_Control = "cmdOranFreigabe, 13, 9, MSForms, CommandButton"
Option Explicit


Private Sub cmdAngebotKorrigieren_Click()
Dim AngID As String
Dim PfadAngebot As String
Dim Dummy As String
Dim FDlg As FileDialog
Dim SelItem As Variant
   
    PfadAngebot = Worksheets(TUpdates).Range("Name_PfadAngebote")
   
    'Test, ob der Pfad existiert
    Dummy = Dir(PfadAngebot, vbDirectory)
    If Dummy = "" Or PfadAngebot = "" Then
        MsgBox ("Der Pfad zum Speichern des Angebots ist nicht bekannt. Bitte |fffd|ndere diesen im 'Admin'-Bereich oder kontaktiere den Administrator.")
        Exit Sub
    End If
       
    'speichern ...
    VonAngebotSpeichern = True      '|fffd|bergabevariable, damit der Workbook_BeforeSave wei|fffd|, dass er auch speichern darf
    Application.DisplayAlerts = False
    ThisWorkbook.SaveAs PfadAngebot & "\" & Worksheets(TUpdates).Range("Name_AngebotNummer") & Format(Worksheets(TUpdates).Range("Name_AngebotVersion"), "000") & ".xlsm"
    Application.DisplayAlerts = True
    
    'in die ESol schreiben
    'Call EsolSchreiben(True)
    Call ESOLneu(True)
End Sub

Private Sub cmdAngebotSpeichern_Click()
   
Dim AngID As String
Dim PfadAngebot As String
Dim Dummy As String
Dim FDlg As FileDialog
Dim SelItem As Variant
   
    PfadAngebot = Worksheets(TUpdates).Range("Name_PfadAngebote")
   
    'Test, ob der Pfad existiert
    Dummy = Dir(PfadAngebot, vbDirectory)
    If Dummy = "" Or PfadAngebot = "" Then
        MsgBox ("Der Pfad zum Speichern des Angebots ist nicht bekannt. Bitte |fffd|ndere diesen im 'Admin'-Bereich oder kontaktiere den Administrator.")
        Exit Sub
    End If
    
   'speichern ...
    If Worksheets(TUpdates).Range("Name_AngebotNummer") = "" Then
        'neues Angebot
        AngID = Format(Date, "00000") & "-" & Format(Time() * 100000, "00000") & "-" & Range("Name_Bearbeiter_Kurzzeichen")
        Worksheets(TUpdates).Range("Name_AngebotNummer") = AngID
        Worksheets(TUpdates).Range("Name_AngebotVersion") = 1
        Worksheets(TKalkulator).Range("Name_AngebotVom") = Date
    Else
        'altes Angebot, neue Version
        Worksheets(TUpdates).Range("Name_AngebotVersion") = Worksheets(TUpdates).Range("Name_AngebotVersion") + 1
    End If
    'NEU: Angebotsnummer direkt schreiben
    Worksheets(TKalkulator).Range("Name_AngebotNr") = Worksheets(TUpdates).Range("Name_AngebotNummer") & Format(Worksheets(TUpdates).Range("Name_AngebotVersion"), "000")
    'Ende neu
    
    'speichern ...
    VonAngebotSpeichern = True      '|fffd|bergabevariable, damit der Workbook_BeforeSave wei|fffd|, dass er auch speichern darf
    ThisWorkbook.SaveAs PfadAngebot & "\" & Worksheets(TUpdates).Range("Name_AngebotNummer") & Format(Worksheets(TUpdates).Range("Name_AngebotVersion"), "000") & ".xlsm", , , , , , , xlLocalSessionChanges
    
    'in die ESol schreiben
    'Call EsolSchreiben(False)
    Call ESOLneu(False)
End Sub

Private Sub cmdExcelMini_Click()
'erstellt eine sehr einfache Aufstellung der Bestellung

Dim wbKalkulator As Workbook
Dim wbMini As Workbook, wsMini As Worksheet

Dim ZeileKalkulator As Long, ZeileMini As Long

    Set wbKalkulator = ActiveWorkbook

    Application.Workbooks.Add
    Set wbMini = ActiveWorkbook
    Set wsMini = ActiveSheet
    
'Kopfzeilen
    With wsMini.Cells(1, 1)
        .FormulaR1C1 = "VMware"
        .Font.Bold = True
    End With
    
    wsMini.Cells(1, 3) = wbKalkulator.Worksheets(TKalkulator).Range("Name_Kunde_Name")
    wsMini.Cells(2, 3) = wbKalkulator.Worksheets(TKalkulator).Cells(16, 2)
    wsMini.Cells(3, 3) = wbKalkulator.Worksheets(TKalkulator).Range("Name_KundeNr")
    
    With wsMini.Range(wsMini.Cells(1, 3), wsMini.Cells(3, 4))
        .Interior.Color = RGB(255, 200, 0)
    
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlInsideHorizontal).Weight = xlThin
    End With
    
    
    wsMini.Cells(2, 1) = "VPP"
    wsMini.Cells(2, 2) = wbKalkulator.Worksheets(TKalkulator).Range("Name_VPP_MembershipID")
    
    wsMini.Cells(3, 1) = "ORAN"
    wsMini.Cells(3, 2) = wbKalkulator.Worksheets(TKalkulator).Range("Name_OranNummer")
    
    With wsMini.Range(wsMini.Cells(2, 1), wsMini.Cells(3, 2))
        .Interior.Color = RGB(255, 255, 100)
    
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlInsideVertical).Weight = xlThin
        .Borders(xlInsideHorizontal).Weight = xlThin
    End With
    
    
     With wsMini.Cells(1, 6)
        .FormulaR1C1 = "Veeam"
        .Font.Bold = True
    End With
    
    
    wsMini.Cells(2, 6) = "DRG"
    wsMini.Cells(2, 7) = wbKalkulator.Worksheets(TKalkulator).Range("Name_Veeam_Projektmeldung")
    wsMini.Cells(2, 8) = wbKalkulator.Worksheets(TKalkulator).Range("Name_Veeam_ProjektmeldungText")

    With wsMini.Range(wsMini.Cells(2, 6), wsMini.Cells(2, 8))
        .Interior.Color = RGB(255, 255, 100)
    
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlInsideVertical).Weight = xlThin
        .Borders(xlInsideHorizontal).Weight = xlThin
    End With



'Tabellen|fffd|berschriften
    wsMini.Cells(5, 1) = "Menge"
    wsMini.Cells(5, 2) = "SKU"
    wsMini.Cells(5, 3) = "Reseller EK |fffd|"
    wsMini.Cells(5, 4) = "TD EK |fffd|"
    
    With wsMini.Range(wsMini.Cells(5, 1), wsMini.Cells(5, 4))
        .Interior.Color = RGB(221, 221, 221)
    
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlInsideVertical).Weight = xlThin
    End With
    
    
    wsMini.Cells(5, 6) = "Menge"
    wsMini.Cells(5, 7) = "SKU"
    wsMini.Cells(5, 8) = "Reseller EK |fffd|"
    wsMini.Cells(5, 9) = "TD EK USD"

     With wsMini.Range(wsMini.Cells(5, 6), wsMini.Cells(5, 9))
        .Interior.Color = RGB(221, 221, 221)
    
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlInsideVertical).Weight = xlThin
    End With

'Positionen schreiben: VMware
    ZeileKalkulator = Application.WorksheetFunction.Match("Start VMware", wbKalkulator.Worksheets(TKalkulator).Columns(SpHersteller), 0)
    ZeileKalkulator = ZeileKalkulator + 1
    
    ZeileMini = 6
    
    Do While wbKalkulator.Worksheets(TKalkulator).Cells(ZeileKalkulator, SpHersteller) <> ""
        wsMini.Cells(ZeileMini, 1) = wbKalkulator.Worksheets(TKalkulator).Cells(ZeileKalkulator, SpAnzahl)
        wsMini.Cells(ZeileMini, 2) = wbKalkulator.Worksheets(TKalkulator).Cells(ZeileKalkulator, SpArtNr)
        wsMini.Cells(ZeileMini, 3) = wbKalkulator.Worksheets(TKalkulator).Cells(ZeileKalkulator, SpHek)
        wsMini.Cells(ZeileMini, 4) = wbKalkulator.Worksheets(TKalkulator).Cells(ZeileKalkulator, SpTDEkEinzel)

        With wsMini.Range(wsMini.Cells(ZeileMini, 1), wsMini.Cells(ZeileMini, 4))
            .Borders(xlEdgeLeft).Weight = xlThin
            .Borders(xlEdgeTop).Weight = xlThin
            .Borders(xlEdgeBottom).Weight = xlThin
            .Borders(xlEdgeRight).Weight = xlThin
            .Borders(xlInsideVertical).Weight = xlThin
        End With

        ZeileKalkulator = ZeileKalkulator + 1
        ZeileMini = ZeileMini + 1
    Loop

'Positionen schreiben: Veeam
    ZeileKalkulator = Application.WorksheetFunction.Match("Start Veeam", wbKalkulator.Worksheets(TKalkulator).Columns(SpHersteller), 0)
    ZeileKalkulator = ZeileKalkulator + 1
    
    ZeileMini = 6
    
    Do While wbKalkulator.Worksheets(TKalkulator).Cells(ZeileKalkulator, SpHersteller) <> ""
    
        If Left(wbKalkulator.Worksheets(TKalkulator).Cells(ZeileKalkulator, SpBeschreibung), 10) <> "ausblenden" Then
    
            wsMini.Cells(ZeileMini, 6) = wbKalkulator.Worksheets(TKalkulator).Cells(ZeileKalkulator, SpVeeamAnzahl)
            wsMini.Cells(ZeileMini, 7) = wbKalkulator.Worksheets(TKalkulator).Cells(ZeileKalkulator, SpVeeamArtNr)
            wsMini.Cells(ZeileMini, 8) = wbKalkulator.Worksheets(TKalkulator).Cells(ZeileKalkulator, SpHek)
            wsMini.Cells(ZeileMini, 9) = wbKalkulator.Worksheets(TKalkulator).Cells(ZeileKalkulator, SpTDEkEinzel)

            With wsMini.Range(wsMini.Cells(ZeileMini, 6), wsMini.Cells(ZeileMini, 9))
                .Borders(xlEdgeLeft).Weight = xlThin
                .Borders(xlEdgeTop).Weight = xlThin
                .Borders(xlEdgeBottom).Weight = xlThin
                .Borders(xlEdgeRight).Weight = xlThin
                .Borders(xlInsideVertical).Weight = xlThin
            End With

            ZeileMini = ZeileMini + 1
        End If

        ZeileKalkulator = ZeileKalkulator + 1

    Loop

'letzte Formatierungen
    wsMini.Range(wsMini.Cells(1, 1), wsMini.Cells(1, 9)).EntireColumn.AutoFit

'aufr|fffd|umen
    Set wbKalkulator = Nothing
    Set wsMini = Nothing
    Set wbMini = Nothing

End Sub

Private Sub cmdKondisAendern_Click()

    frmKondis.Show
End Sub

Private Sub cmdKundeSuchen_Click()
    frmKundeSuchen.Show
    
    If TransferKundenNr <> 0 Then       '0 ist Abbruchkennzeichen
    
        If Worksheets(TUpdates).Range("Name_AngebotNummer") <> "" Then
            Worksheets(TUpdates).Range("Name_AngebotNummer") = ""
            Worksheets(TUpdates).Range("Name_AngebotVersion") = ""
            Worksheets(TKalkulator).Range("Name_AngebotNr") = ""
        End If
    
        Call KondisSchreiben(TransferKundenNr)
        cmdAngebotSpeichern.Visible = True
    End If
End Sub

Private Sub cmdOranFreigabe_Click()
    frmAdvantagePlus.Show
End Sub



Private Sub cmdSoftReset_Click()

Dim Zeile As Integer

    Call ResetKalkulator
    
    'Tagespreisliste VMware
    'Application.StatusBar = "Tagespreisliste VMware erstellen"
    Call VMwareTagespreislisteErstellen
    Zeile = Application.WorksheetFunction.Match("Tagespreisliste VMware erstellen", Worksheets(TUpdates).Columns(1), 0)
    Worksheets(TUpdates).Cells(Zeile, 3) = Now()
    Worksheets(TUpdates).Cells(Zeile, 4) = Environ("Username")
    
    Worksheets(TKalkulator).optCpp.Visible = False
    Worksheets(TKalkulator).optVpp.Visible = False
    Range("Name_TextRabattsystem") = ""
    
     'Tagespreisliste Veeam
    'Application.StatusBar = "Tagespreisliste Veeam erstellen"
    Call VeeamTagespreislisteErstellen
    Zeile = Application.WorksheetFunction.Match("Tagespreisliste Veeam erstellen", Worksheets(TUpdates).Columns(1), 0)
    Worksheets(TUpdates).Cells(Zeile, 3) = Now()
    Worksheets(TUpdates).Cells(Zeile, 4) = Environ("Username")
    
    'zum Schlu|fffd| speichern, damit der Dateiname sich |fffd|ndert; deshalb auf Temp, damit das nirgend im Weg ist
    Application.DisplayAlerts = False
    ThisWorkbook.SaveAs Environ("Temp") & "\Kalkulator.xlsm"
    Application.DisplayAlerts = True
End Sub

Private Sub cmdVeeam_Click()

    'erst abchecken, ob die Basisangaben drin sind. ohne die gibt es keine Preisberechnung
    If Range("Name_Veeam_Maintenance") = "" Then
        MsgBox ("Bitte erst 'Maintenance' eingeben, eine Preisberechnung ist sonst nicht m|fffd|glich.")
        Exit Sub
    End If
    
    If Range("Name_Veeam_Projektmeldung") = "" Then
        MsgBox ("Bitte erst 'DealReg' eingeben, eine Preisberechnung ist sonst nicht m|fffd|glich.")
        Exit Sub
    End If
    
    If Range("Name_Veeam_Kundenart") = "" Then
        MsgBox ("Bitte erst 'Kundenart' eingeben, eine Preisberechnung ist sonst nicht m|fffd|glich.")
        Exit Sub
    End If
    
    If Range("Name_Veeam_Support") = "" Then
        MsgBox ("Bitte erst 'Support' eingeben, eine Preisberechnung ist sonst nicht m|fffd|glich.")
        Exit Sub
    End If
    
    'wenn bis hierher, dann kann ein Artikel ausgew|fffd|hlt werden
    frmVeeamSelektierenNEU.Show
    
End Sub

Private Sub cmdVmware_Click()

    'erst abchecken, ob die Basisangaben drin sind. ohne die gibt es keine Preisberechnung
    If Range("Name_VMware_Maintenance") = "" Then
        MsgBox ("Bitte erst 'Maintenance' eingeben, eine Preisberechnung ist sonst nicht m|fffd|glich.")
        Exit Sub
    End If
    
    If Range("Name_VMware_Kundenart") = "" Then
        MsgBox ("Bitte erst 'Kundenart' eingeben, eine Preisberechnung ist sonst nicht m|fffd|glich.")
        Exit Sub
    End If
    
    If Range("Name_VMware_Support") = "" Then
        MsgBox ("Bitte erst 'Support' eingeben, eine Preisberechnung ist sonst nicht m|fffd|glich.")
        Exit Sub
    End If
    
    'wenn bis hierher, dann kann ein Artikel ausgew|fffd|hlt werden
    frmVmwareSelektieren.Show
    
End Sub

Private Sub cmdZuExcelNackt_Click()

Dim n As Long, i As Long

Dim DatName As String

    Sheets("Kalkulator").Copy       'kopiert den Kalkulator in ein neues Workbook
   
''L|fffd|scht Ereignisprozeduren:
'    For n = ActiveWorkbook.VBProject.vbComponents.Count To 1 Step -1
'        For i = 1 To ActiveWorkbook.VBProject.vbComponents(n).CodeModule.CountOfLines
'            If ActiveWorkbook.VBProject.vbComponents(n).Type <> 1 And ActiveWorkbook.VBProject.vbComponents(n).Type <> 3 Then _
'                ActiveWorkbook.VBProject.vbComponents(n).CodeModule.DeleteLines 1
'        Next
'    Next

    'zweiter Versuch: beim ersten steigt O365 aus :-(
    DatName = Environ("Temp") & "/" & Cells(12, 2) & " " & Format(Now, "yyyymmdd hhnnss") & ".xlsx"
    Application.DisplayAlerts = False
    ActiveWorkbook.SaveAs DatName
    ActiveWorkbook.Close
    Application.DisplayAlerts = True
    Application.Workbooks.Open DatName
    
    'schmei|fffd|t die Formeln raus und macht Werte daraus
    ActiveSheet.Cells.Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Application.CutCopyMode = False
    
    '|fffd|berfl|fffd|ssige Spalten l|fffd|schen
    ActiveSheet.Columns("L:AZ").Delete Shift:=xlToLeft
   
    'Buttons l|fffd|schen
    ActiveSheet.Shapes.Range(Array("cmdKundeSuchen")).Delete
    ActiveSheet.Shapes.Range(Array("cmdAngebotSpeichern")).Delete
    ActiveSheet.Shapes.Range(Array("cmdAngebotKorrigieren")).Delete
    ActiveSheet.Shapes.Range(Array("cmdSoftReset")).Delete
    ActiveSheet.Shapes.Range(Array("cmdZuExcelNackt")).Delete
    ActiveSheet.Shapes.Range(Array("cmdExcelMini")).Delete
    ActiveSheet.Shapes.Range(Array("cmdKondisAendern")).Delete
   
    ActiveSheet.Shapes.Range(Array("cmdOranFreigabe")).Delete
    ActiveSheet.Shapes.Range(Array("cmdVmware")).Delete
    ActiveSheet.Shapes.Range(Array("cmdVeeam")).Delete
    
    'ausgeblendete Zeilen einblenden
    ActiveSheet.Cells.EntireRow.Hidden = False
    
    'Kommentare l|fffd|schen
    ActiveSheet.Cells.ClearComments
   
    'vern|fffd|nftige Startposition setzen
    ActiveSheet.Cells(1, 1).Select
    
    
    

End Sub

Private Sub optVpp_Click()

End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
Dim AnzahlAlt As Long
Dim AnzahlNeu As Long
Dim Eing As String
Dim Zeile As Long, ZeileEnde As Long

    If IstKundenversion Then
        Worksheets(TKalkulator).Unprotect (KalkulatorPW)
    End If

'nachdem zwei Funktionalit|fffd|ten (Anzahl der Positionen und gesamte Position l|fffd|schen) damit gehen, m|fffd|ssen diese beiden im Angebot, das nicht ge|fffd|ndert werden kann, abgefangen werden.
    If Worksheets(TUpdates).Range("Name_AngebotNummer") <> "" And Worksheets(TKalkulator).cmdAngebotSpeichern.Visible = False Then
        MsgBox ("|fffd|nderungen nicht m|fffd|glich, bitte erst 'Angebot |fffd|ndern' w|fffd|hlen.")
        Cancel = True
    Else
        If Target.Columns.Count = 1 Then
        
            'Teil, der zum L|fffd|schen von Zeilen ist
            'l|fffd|scht die Zeile, wo doppelgeklickt ist, wenn die geklickte Zelle der M|fffd|lleimer ist
            'funktioniert auch bei verbundenen Zellen (wenn Support direkt mit der Lizenz verkauft wird)
        
            If Cells(Target.Rows(1).Row, Target.Columns(1).Column).Font.Name = "Wingdings 2" And Cells(Target.Rows(1).Row, Target.Columns(1).Column) = 3 Then
                Range(Rows(Target.Rows(1).Row), Rows(Target.Rows(1).Row + Target.Rows.Count - 1)).Delete        'geht das auch einfacher ???????
                Cancel = True
            Else
                If Target.Column = SpLeerzeile And Cells(Target.Rows(1).Row, SpLeerzeile) = "Leerzeile" Then
                    'Leerzeile danach einf|fffd|gen
                    Rows(Target.Row + Target.Rows.Count).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
                    Cells(Target.Row + Target.Rows.Count, SpHersteller) = "Leerzeile"
                    
                    'der nimmt beim Einf|fffd|gen die formatierung mit, und damit die senkrechten Striche der Pseudobuttons. die m|fffd|ssen wieder raus:
                    Rows(Target.Row + Target.Rows.Count).Borders(xlInsideVertical).LineStyle = xlNone
                    Rows(Target.Row + Target.Rows.Count).Interior.Pattern = xlNone      'grau raus
                    
                    'auch die L|fffd|schen-Funktion soll erstellt werden
                    With Worksheets(TKalkulator).Cells(Target.Row + Target.Rows.Count, SpLoeschen)
                        .FormulaR1C1 = "3"
                        .Font.Name = "Wingdings 2"
                        .Font.Size = 12
                        .HorizontalAlignment = xlCenter
                        .VerticalAlignment = xlCenter
                        .Interior.Color = FarbeCoolGray1
                        .Borders(xlEdgeLeft).Weight = xlThin
                        .Borders(xlEdgeTop).Weight = xlThin
                        .Borders(xlEdgeBottom).Weight = xlThin
                        .Borders(xlEdgeRight).Weight = xlThin
                    End With
                
                    
                                
                    Cancel = True
                Else
                     'Teil, der zum |fffd|ndern von Anzahl ist
            
                    If Target.Column = SpAnzahl Then
                         If (Cells(Target.Rows(1).Row, SpLoeschen).Font.Name = "Wingdings 2" And Cells(Target.Rows(1).Row, SpLoeschen) = 3) Or _
                                 Cells(Target.Rows(1).Row, SpLoeschen).MergeCells Then
                             
                             'selektieren, ob es die obere oder die untere Zeile ist
                             If Cells(Target.Rows(1).Row, SpLoeschen).Font.Name = "Wingdings 2" And Cells(Target.Rows(1).Row, SpLoeschen) = 3 Then
                                 'obere Zeile (oder nur eine)
                                 AnzahlAlt = Cells(Target.Row, SpBasisAnzahl)
                                 Eing = InputBox("Bitte die gew|fffd|nschte Anzahl eingeben", "Anzahl |fffd|ndern", AnzahlAlt)
                                 If Eing <> "" Then
                                     AnzahlNeu = CLng(Eing)
                                     Cells(Target.Row, SpBasisAnzahl) = AnzahlNeu
                                     
                                     'gibt es eine zweite Zeile?
                                     If Cells(Target.Row, SpLoeschen).MergeCells Then
                                         Cells(Target.Row + 1, SpBasisAnzahl) = AnzahlNeu
                                     End If
                                 End If
                             Else
                                 'untere Zeile
                                 AnzahlAlt = Cells(Target.Row, SpBasisAnzahl)
                                 Eing = InputBox("Bitte die gew|fffd|nschte Anzahl eingeben" & vbCrLf & "(die Anzahl bezieht sich auf die Lizenz, nicht auf den Support)", "Anzahl |fffd|ndern", AnzahlAlt)
                                 If Eing <> "" Then
                                     AnzahlNeu = CLng(Eing)
                                     Cells(Target.Row, SpBasisAnzahl) = AnzahlNeu
                                     Cells(Target.Row - 1, SpBasisAnzahl) = AnzahlNeu
                                 End If
                             End If
                             
                             Cancel = True
                         End If
                     End If
                End If
            End If
        Else
            If Target.Columns.Count = 11 Then       'die beiden |fffd|berschriften von VMware und Veeam sind 11 Spalten breit, das sollte sonst nirgends vokommen. Deshalb geht das als Erkennungskriterium f|fffd|r das Ein- und Ausblenden.
                Zeile = Target.Row      'Zeile, in der geklickt wurde
            
                If Cells(Zeile, 1) = "VMware" Then
                    ZeileEnde = Application.WorksheetFunction.Match("Ende VMware", Columns(SpHersteller), 0)
                    If Rows(Zeile + 1).EntireRow.Hidden = False Then
                        'ausblenden
                        cmdVmware.Visible = False
                        cmdOranFreigabe.Visible = False
                        optCpp.Visible = False
                        optVpp.Visible = False
                        Range(Cells(Zeile + 1, 1), Cells(ZeileEnde, 1)).EntireRow.Hidden = True
                    Else
                        'einblenden
                        Range(Cells(Zeile + 1, 1), Cells(ZeileEnde, 1)).EntireRow.Hidden = False
                        
                        'ob der Button sichtbar ist, h|fffd|ngt von den Konditionen ab. einer reicht
                        If Range("Name_Kunde_Kondi_VMware_vSphere") <> "" Or _
                                Range("Name_Kunde_Kondi_VMware_NvSphere") <> "" Or _
                                Range("Name_Kunde_Kondi_VMware_SnS") <> "" Or _
                                Range("Name_Kunde_Kondi_VMware_Essentials") <> "" Or _
                                Range("Name_Kunde_Kondi_VMware_Workstation") <> "" Or _
                                Range("Name_Kunde_Kondi_VMware_PSO") <> "" Or _
                                Range("Name_Kunde_Kondi_VMware_Renewal") <> "" Or _
                                Range("Name_Kunde_Kondi_VMware_Status") <> "" Then
                            cmdVmware.Visible = True
                                                        
                            'in Excel 2010 geht das noch, danach in allen Versionen Fehler bei der Beibehaltung der Position nach oben. Deshalb hier noch mal neu gesetzt
                            cmdVmware.Top = Cells(26, 1).Top - cmdVmware.Height
                            cmdOranFreigabe.Top = Cells(24, 1).Top
                            optCpp.Top = Cells(21, 1).Top
                            optVpp.Top = Cells(22, 1).Top
                                                        
                            'die CPP oder VPP h|fffd|ngen dann wiederum an dem Ststus der Konditionen
                            If Range("Name_Kunde_Kondi_VMware_Status") <> "Professional" Then
                                optCpp.Visible = True
                                optVpp.Visible = True
                            End If
                            
                            'der ORAN-Button h|fffd|ngt an der ORAN-Nummer
                            If Range("Name_OranNummer") <> "" Then
                                cmdOranFreigabe.Visible = True
                            End If
                            
                        End If
                    End If
                Else
                    ZeileEnde = Application.WorksheetFunction.Match("Ende Veeam", Columns(SpHersteller), 0)
                    If Rows(Zeile + 1).EntireRow.Hidden = False Then
                        'ausblenden
                        cmdVeeam.Visible = False
                        Range(Cells(Zeile + 1, 1), Cells(ZeileEnde, 1)).EntireRow.Hidden = True
                    Else
                        'einblenden
                        
                        'erst mal den Kopfbereich incl. |fffd|berschriften
                        ZeileEnde = Application.WorksheetFunction.Match("Start Veeam", Columns(SpHersteller), 0) + 1
                        
                        Range(Cells(Zeile + 1, 1), Cells(ZeileEnde, 1)).EntireRow.Hidden = False
                        
                        'dann die Positionen
                        Zeile = ZeileEnde + 1
                        
                        Do While Cells(Zeile, SpHersteller) <> ""
                            If Cells(Zeile, SpBeschreibung) <> "ausblenden" Then
                                Cells(Zeile, SpBeschreibung).EntireRow.Hidden = False
                            End If
                            Zeile = Zeile + 1
                        Loop
                        
                        'und dann den Fu|fffd|bereich
                        ZeileEnde = Application.WorksheetFunction.Match("Ende Veeam", Columns(SpHersteller), 0)
                        Range(Cells(Zeile, 1), Cells(ZeileEnde, 1)).EntireRow.Hidden = False
                        
                        
                        'ob der Button sichtbar ist, h|fffd|ngt von den Konditionen ab. Die m|fffd|ssen vollst|fffd|ndig sein
                        If Range("Name_Kunde_Kondi_Veeam_Veeam") <> "" Or _
                                Range("Name_Kunde_Kondi_Veeam_SnS") <> "" Or _
                                Range("Name_Kunde_Kondi_Veeam_Renewal") <> "" Or _
                                Range("Name_Kunde_Kondi_Veeam_Status") <> "" Then
                            cmdVeeam.Visible = True
                        End If
                        
                         'in Excel 2010 geht das noch, danach in allen Versionen Fehler bei der Beibehaltung der Position nach oben. Deshalb hier noch mal neu gesetzt
                        cmdVeeam.Top = Cells(39, 1).Top - cmdVeeam.Height
                        
                    End If
                End If
            
            
                Cancel = True
            End If
        End If
    End If
    
    If IstKundenversion Then
        Worksheets(TKalkulator).Protect (KalkulatorPW)
    End If
End Sub


Private Sub Worksheet_Change(ByVal Target As Range)

    If Target.Rows.Count = 1 And Target.Columns.Count = 1 Then
    
        If Not IsError(Target) Then
        
            If Target.Address = Range("Name_OranNummer").Address Then       'wenn die ge|fffd|nderte Zelle die ORAN-Nummer ist, dann ...
                If Target = "" Then
                    cmdOranFreigabe.Visible = False
                    
                    'alles auf "falsch" setzen
                    Call OranFreigabenRuecksetzen
                    
                Else
                    cmdOranFreigabe.Visible = True
                End If
            End If
            
            If Target.Address = Range("Name_Veeam_Maintenance").Address Or _
                    Target.Address = Range("Name_Veeam_Kundenart").Address Or _
                    Target.Address = Range("Name_Veeam_Support").Address Then
                Call VeeamEinAusBlenden
            End If
            
            If Target.Address = Range("Name_Veeam_Projektmeldung").Address Then
                If Target = "Projektmeldung Nein" Then
                    Range("Name_Veeam_ProjektmeldungText") = ""
                End If
            End If
        End If
    End If
    

End Sub


Sub KondisSchreiben(KundeNr As Long)
'nach Auswahl vom Kunden werden die Konditionen aus der Kundenliste geholt und hardcodiert in den Konfigurator geschrieben.
'So gemacht, weil in der Stand-Alone-Version keine Kundentabellen mehr drin sind

'Zus|fffd|tzlich werden die Advantage+-Freigaben auf Falsch zur|fffd|ckgesetzt

Dim KondiZeile As Variant
Dim KundeZeile As Variant

Dim GibtKondis As Boolean

    KundeZeile = Application.Match(KundeNr, Worksheets(TKunden).Range("A:A"), 0)

    If Not TransferKondis Then      'muss ich nur durchlaufen, wenn die Daten aus dem Kunden kommen, aber nicht, wenn nur die Kondis geholt werden

    'allgemein Kunde
        'Kundennummer
        Range("Name_KundeNr") = KundeNr
        
        Range("Name_GroupID") = Worksheets(TKunden).Cells(KundeZeile, 7)
        
        'Name + Anschrift
        Range("Name_Kunde_Name") = Worksheets(TKunden).Cells(KundeZeile, 2)
        Range("Name_Kunde_Strasse") = Worksheets(TKunden).Cells(KundeZeile, 3)
        Range("Name_Kunde_PlzOrt") = Worksheets(TKunden).Cells(KundeZeile, 4) & IIf(Worksheets(TKunden).Cells(KundeZeile, 4) = "", "", "-") & _
                    Worksheets(TKunden).Cells(KundeZeile, 5) & " " & _
                    Worksheets(TKunden).Cells(KundeZeile, 6)

    End If

    'die folgenden 4 Zeilen suchen raus, ob es wenigstens eine Kondi gibt, entweder f|fffd|r VMware oder f|fffd|r Veeam
    KondiZeile = Application.Match(Worksheets(TKunden).Cells(KundeZeile, 7), Worksheets(TKundenKondiVMware).Range("A:A"), 0)
    GibtKondis = Not IsError(KondiZeile) And Worksheets(TKunden).Cells(KundeZeile, 7) <> ""
    KondiZeile = Application.Match(Worksheets(TKunden).Cells(KundeZeile, 7), Worksheets(TKundenKondiVeeam).Range("A:A"), 0)
    GibtKondis = GibtKondis Or (Not IsError(KondiZeile) And Worksheets(TKunden).Cells(KundeZeile, 7) <> "")

    If Worksheets(TKunden).Cells(KundeZeile, 7) <> "" And GibtKondis Then  'wenn es eine GroupID, sprich, Konditionen gibt

'VMware
        KondiZeile = Application.Match(Worksheets(TKunden).Cells(KundeZeile, 7), Worksheets(TKundenKondiVMware).Range("A:A"), 0)
    
        If Not IsError(KondiZeile) And Worksheets(TKunden).Cells(KundeZeile, 7) <> "" Then
    
            Range("Name_Kunde_Kondi_VMware_vSphere") = Worksheets(TKundenKondiVMware).Cells(KondiZeile, 2)
            Range("Name_Kunde_Kondi_VMware_NvSphere") = Worksheets(TKundenKondiVMware).Cells(KondiZeile, 3)
            Range("Name_Kunde_Kondi_VMware_SnS") = Worksheets(TKundenKondiVMware).Cells(KondiZeile, 4)
            Range("Name_Kunde_Kondi_VMware_Essentials") = Worksheets(TKundenKondiVMware).Cells(KondiZeile, 5)
            Range("Name_Kunde_Kondi_VMware_Workstation") = Worksheets(TKundenKondiVMware).Cells(KondiZeile, 6)
            Range("Name_Kunde_Kondi_VMware_PSO") = Worksheets(TKundenKondiVMware).Cells(KondiZeile, 7)
            Range("Name_Kunde_Kondi_VMware_Renewal") = Worksheets(TKundenKondiVMware).Cells(KondiZeile, 8)
            Range("Name_Kunde_Kondi_VMware_Status") = Worksheets(TKundenKondiVMware).Cells(KondiZeile, 9)
            
            If Range("Name_Kunde_Kondi_VMware_Status") <> "Professional" Then
                Range("Name_lbl_VPP_MembershipID") = "VPP Membership ID:"
                Range("Name_lbl_VPP_alt") = "Aktuelle VPP Punktzahl:"
                
                If Rows(Application.Match("Start VMware", Columns(SpHersteller), 0)).EntireRow.Hidden = False Then
                    optCpp.Visible = True
                    optVpp.Visible = True
                Else
                    optCpp.Visible = False
                    optVpp.Visible = False
                End If
                
                Range("Name_TextRabattsystem") = "Rabattsystem"
            Else
                Range("Name_lbl_VPP_MembershipID") = ""
                Range("Name_lbl_VPP_alt") = ""
                
                optCpp.Visible = False
                optVpp.Visible = False
                Range("Name_TextRabattsystem") = "Rabattsystem"
            End If
            
            
            Range("Name_OranNummer") = ""
            cmdOranFreigabe.Visible = False
            Range("Name_lblOranNummer") = "Oran-No.:"
            
            If Rows(Application.Match("Start VMware", Columns(SpHersteller), 0)).EntireRow.Hidden = False Then
                cmdVmware.Visible = True
            Else
                cmdVmware.Visible = False
            End If
            
            Range("Name_VMware_keineKondis") = ""
        Else
            MsgBox ("keine Kondis f|fffd|r VMware")
            Range("Name_Kunde_Kondi_VMware_vSphere") = ""
            Range("Name_Kunde_Kondi_VMware_NvSphere") = ""
            Range("Name_Kunde_Kondi_VMware_SnS") = ""
            Range("Name_Kunde_Kondi_VMware_Essentials") = ""
            Range("Name_Kunde_Kondi_VMware_Workstation") = ""
            Range("Name_Kunde_Kondi_VMware_PSO") = ""
            Range("Name_Kunde_Kondi_VMware_Renewal") = ""
            Range("Name_Kunde_Kondi_VMware_Status") = ""
            
            Range("Name_lblOranNummer") = ""
            cmdVmware.Visible = False
            Range("Name_VMware_keineKondis") = "keine Konditionen vorhanden"
        End If
        
        
        'ORAN-Freigaben
        Call OranFreigabenRuecksetzen
        
        
'Veeam
        KondiZeile = Application.Match(Worksheets(TKunden).Cells(KundeZeile, 7), Worksheets(TKundenKondiVeeam).Range("A:A"), 0)
    
        If Not IsError(KondiZeile) And Worksheets(TKunden).Cells(KundeZeile, 7) <> "" Then
    
            Range("Name_Kunde_Kondi_Veeam_Veeam") = Worksheets(TKundenKondiVeeam).Cells(KondiZeile, 2)
            Range("Name_Kunde_Kondi_Veeam_SnS") = Worksheets(TKundenKondiVeeam).Cells(KondiZeile, 3)
            Range("Name_Kunde_Kondi_Veeam_Renewal") = Worksheets(TKundenKondiVeeam).Cells(KondiZeile, 4)
            Range("Name_Kunde_Kondi_Veeam_Status") = Worksheets(TKundenKondiVeeam).Cells(KondiZeile, 5)
            
            If Rows(Application.Match("Start Veeam", Columns(SpHersteller), 0)).EntireRow.Hidden = False Then
                cmdVeeam.Visible = True
            Else
                cmdVeeam.Visible = False
            End If
            
            Range("Name_Veeam_keineKondis") = ""
            
            'nur Gold oder Platinum-Kunden d|fffd|rfen Internal Use ausw|fffd|hlen d|fffd|rfen
'            If Range("Name_Kunde_Kondi_Veeam_Status") = "Gold" Or Range("Name_Kunde_Kondi_Veeam_Status") = "Platinum" Then
'
'            Else
'
'            End If
            
        Else
            MsgBox ("keine Kondis f|fffd|r Veeam")
            Range("Name_Kunde_Kondi_Veeam_Veeam") = ""
            Range("Name_Kunde_Kondi_Veeam_SnS") = ""
            Range("Name_Kunde_Kondi_Veeam_Renewal") = ""
            Range("Name_Kunde_Kondi_Veeam_Status") = ""
            cmdVeeam.Visible = False
            Range("Name_Veeam_keineKondis") = "keine Konditionen vorhanden"
        End If

    Else    'wenn keine Kondis vorhanden, dann zu den allgemeinen springen
        TransferKondis = True

        MsgBox ("Der Kunde hat keine Konditionen hinterlegt. Bitte w|fffd|hle im n|fffd|chsten Dialog eine aus den allgemeinen Konditionen aus.")
    
        frmKundeSuchen.Show
        
        If TransferKundenNr <> 0 Then
            Call KondisSchreiben(TransferKundenNr)      'ACHTUNG: rekursiver Aufruf!!
        Else
            'wenn keine Ersatzkondis gew|fffd|hlt wurden, alle auf Nix setzen
            Range("Name_Kunde_Kondi_VMware_vSphere") = ""
            Range("Name_Kunde_Kondi_VMware_NvSphere") = ""
            Range("Name_Kunde_Kondi_VMware_SnS") = ""
            Range("Name_Kunde_Kondi_VMware_Essentials") = ""
            Range("Name_Kunde_Kondi_VMware_Workstation") = ""
            Range("Name_Kunde_Kondi_VMware_PSO") = ""
            Range("Name_Kunde_Kondi_VMware_Renewal") = ""
            Range("Name_Kunde_Kondi_VMware_Status") = ""
            Range("Name_lblOranNummer") = ""
            cmdVmware.Visible = False
            Range("Name_VMware_keineKondis") = "keine Konditionen vorhanden"
        
            Range("Name_Kunde_Kondi_Veeam_Veeam") = ""
            Range("Name_Kunde_Kondi_Veeam_SnS") = ""
            Range("Name_Kunde_Kondi_Veeam_Renewal") = ""
            Range("Name_Kunde_Kondi_Veeam_Status") = ""
            cmdVeeam.Visible = False
            Range("Name_Veeam_keineKondis") = "keine Konditionen vorhanden"
        End If

        TransferKondis = False
    End If
End Sub


Sub EsolSchreiben(Erneuerung As Boolean)

Dim SQLText As String

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database

Dim EsolPfad As String

Dim Zeile As Integer

'alle Felder der Contentdata als Text; Variablen beginnen alle mit "FldC" (f|fffd|r Field ContentData) gefolgt von dem originalen Feldnamen
Dim FldCOppID As String
Dim FldCSKU As String
Dim FldCQTY As String
Dim FldCMSRP As String
Dim FldCDiscountP As String
Dim FldCDiscountD As String
Dim FldCORAN As String
Dim FldCVPP As String
Dim FldCConditions As String
Dim FldCVPPPunkte As String
Dim FldCManufacturer As String
Dim FldCVolumeDiscount As String
Dim FldCInfo As String
Dim FldCSort As String
Dim FldCDPartnerlevel As String
Dim FldCDDiscount As String
Dim FldCAnsprechpartner As String
Dim FldCZeit As String
Dim FldCVMWareHEKG As String

'alle Felder der Pipeline als Text; Variablen beginnen alle mit "FldP" (f|fffd|r Field Pipeline) gefolgt von dem originalen Feldnamen
Dim FldPOppID As String
Dim FldPCustNo As String
Dim FldPCustName As String
Dim FldPEndCustName As String
Dim FldPManufacturer As String
Dim FldPCreator As String
Dim FldPStatus As String
Dim FldPReason_Lost As String
Dim FldPExpRevenue As String
Dim FldPExpRevenueDell As String
Dim FldPExpRevenueVMWare As String
Dim FldPExpRevenueVeeam As String
Dim FldPExpRevenueDatacore As String
Dim FldPExpRevenueCortado As String
Dim FldPExpRevenueAtlantis As String
Dim FldPExpRevenueStarwind As String
Dim FldPExpRevenueFalconStor As String
Dim FldPCreationDate As String
Dim FldPExpPOPrice As String
Dim FldPDealRegID As String
Dim FldPQuoteID As String
Dim FldPLicOrRnwl As String
Dim FldPProducts As String
Dim FldPStatusLong As String
Dim FldPDueDate As String
Dim FldPProjectType As String
Dim FldPChangeDate As String
Dim FldPPath As String
Dim FldPPartnerconditions As String
Dim FldPChangerate As String
Dim FldPHiddenRows As String


    EsolPfad = Worksheets(TUpdates).Range("Name_PfadEsolDB")

    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(EsolPfad)     '<-- wenn da was falsches drin ist, kommt ein Fehler!

'Pipeline
    'Daten der Pipeline sammeln
    FldPOppID = Worksheets(TUpdates).Range("Name_AngebotNummer") & "-" & Format(Worksheets(TUpdates).Range("Name_AngebotVersion"), "000")
    FldPCustNo = Worksheets(TKalkulator).Range("Name_KundeNr")
    FldPCustName = Worksheets(TKalkulator).Range("Name_Kunde_Name")
    FldPEndCustName = Worksheets(TKalkulator).Range("Name_Endkunde")
    'FldPManufacturer    '!!!!!!!!!!!! hier knallt's, weil nicht eindeutig !!!!!!!!!!!!!!!!!
    'quckfix laut Robert: den mit mehr Volumen nehmen
    If Worksheets(TKalkulator).Range("Name_Zwischensumme_VMware") > Worksheets(TKalkulator).Range("Name_Zwischensumme_Veeam") Then
        FldPManufacturer = "VMware"
    Else
        FldPManufacturer = "Veeam"
    End If
    
    FldPCreator = Worksheets(TKalkulator).Range("Name_Bearbeiter_Name")
    'FldPStatus  'evtl. komplett weglassen
    'FldPReason_Lost 'evtl. komplett weglassen
    FldPExpRevenue = Str(Worksheets(TKalkulator).Range("Name_Gesamtpreis"))
    'FldPExpRevenueDell
    FldPExpRevenueVMWare = Str(Worksheets(TKalkulator).Range("Name_Zwischensumme_VMware"))
    FldPExpRevenueVeeam = Str(Worksheets(TKalkulator).Range("Name_Zwischensumme_Veeam"))
    'FldPExpRevenueDatacore
    'FldPExpRevenueCortado
    'FldPExpRevenueAtlantis
    'FldPExpRevenueStarwind
    'FldPExpRevenueFalconStor
    FldPCreationDate = DatumSQL(Date)   'gibt das heutige Datum aus
    'FldPExpPOPrice  '???
    'FldPDealRegID   '???
    'FldPQuoteID     '???
    'FldPLicOrRnwl   '???
    'FldPProducts    '???
    'FldPStatusLong  '???
    FldPDueDate = DatumSQL(Worksheets(TKalkulator).Range("Name_GueltigBis"))
    'FldPProjectType     'Raus, nicht ben|fffd|tigt
    FldPChangeDate = FldPCreationDate
    FldPPath = Worksheets(TUpdates).Range("Name_PfadAngebote") & "\" & Worksheets(TUpdates).Range("Name_AngebotNummer") & "-" & Format(Worksheets(TUpdates).Range("Name_AngebotVersion"), "000") & ".xlsm"
    'FldPPartnerconditions   '!!!!!!!!!!!!! noch zu pr|fffd|fen !!!!!!!!!!!!!!!!!!!
    'FldPChangerate      'Raus, nicht ben|fffd|tigt
    'FldPHiddenRows      'Raus, nicht ben|fffd|tigt

    'Pipeline schreiben
    
    If Erneuerung Then
        SQLText = "UPDATE [Pipeline] SET " & _
        "CustNo='" & FldPCustNo & "', " & _
        "CustName='" & FldPCustName & "', " & _
        "EndCustName='" & FldPEndCustName & "', " & _
        "Manufacturer='" & FldPManufacturer & "', " & _
        "Creator='" & FldPCreator & "', " & _
        "Status='" & FldPStatus & "', " & _
        "Reason_Lost='" & FldPReason_Lost & "', " & _
        "ExpRevenue=" & FldPExpRevenue & ", " & _
        "ExpRevenueVMWare=" & FldPExpRevenueVMWare & ", " & _
        "ExpRevenueVeeam=" & FldPExpRevenueVeeam & ", " & _
        "CreationDate=" & FldPCreationDate & ", " & _
        "DueDate=" & FldPDueDate & ", " & _
        "ChangeDate=" & FldPCreationDate & ", " & _
        "ProjectType='" & FldPProjectType & "', " & _
        "Path='" & FldPPath & "'" & _
        "WHERE OppID='" & FldPOppID & "'"
    Else
        SQLText = "INSERT INTO [Pipeline] (OppID, CustNo, CustName, EndCustName, Manufacturer, " & _
        "Creator, Status, Reason_Lost, " & _
        "ExpRevenue, ExpRevenueVMWare, ExpRevenueVeeam, " & _
        "CreationDate, DueDate, ChangeDate, ProjectType, " & _
        "Path" & _
        ") " & "VALUES " & _
        "('" & FldPOppID & "', '" & FldPCustNo & "', '" & FldPCustName & "', '" & FldPEndCustName & "', '" & FldPManufacturer & "', " & _
        "'" & FldPCreator & "', '" & FldPStatus & "', '" & FldPReason_Lost & "', " & _
        FldPExpRevenue & ", " & FldPExpRevenueVMWare & ", " & FldPExpRevenueVeeam & ", " & _
        FldPCreationDate & ", " & FldPDueDate & ", " & FldPCreationDate & ", '" & FldPProjectType & "', " & _
        "'" & FldPPath & "'" & _
        ")"
    End If
    
Debug.Print SQLText
    
    accDB.Execute SQLText

'Contentdata
    Zeile = 20
    
    If Erneuerung Then
        'alte Werte l|fffd|schen
        SQLText = "DELETE FROM [Contentdata] WHERE OppID='" & FldPOppID & "'"
        accDB.Execute SQLText
    End If
    
    Do While Worksheets(TKalkulator).Cells(Zeile, 2) <> "Gesamtpreis netto:"
        If Worksheets(TKalkulator).Cells(Zeile, SpAnzahl) <> "" And IsNumeric(Worksheets(TKalkulator).Cells(Zeile, SpAnzahl)) Then     'irgendwie muss ich rausfinden, welche Zeilen tats|fffd|chlich Bestellpositionen sind ...
            'Contentdate sammeln
            FldCOppID = Worksheets(TUpdates).Range("Name_AngebotNummer") & "-" & Format(Worksheets(TUpdates).Range("Name_AngebotVersion"), "000")
            FldCSKU = Worksheets(TKalkulator).Cells(Zeile, SpArtNr)
            FldCQTY = Str(Worksheets(TKalkulator).Cells(Zeile, SpAnzahl))
            FldCMSRP = Str(Worksheets(TKalkulator).Cells(Zeile, SpListenpreis))
            'FldCDiscountP
            'FldCDiscountD
            FldCORAN = Worksheets(TKalkulator).Range("Name_OranNummer")
            FldCVPP = Worksheets(TKalkulator).Range("Name_VPP_MembershipID")
            
            FldCManufacturer = Worksheets(TKalkulator).Cells(Zeile, SpHersteller)
            
            Select Case FldCManufacturer
                Case "VMware"
                    FldCConditions = Worksheets(TKalkulator).Range("Name_VMware_Kundenart")
                    FldCZeit = Worksheets(TKalkulator).Range("Name_VMware_Support")
                Case "Veeam"
                    FldCConditions = Worksheets(TKalkulator).Range("Name_Veeam_Kundenart")
                    FldCZeit = Worksheets(TKalkulator).Range("Name_Veeam_Support")
            End Select
            
            FldCVPPPunkte = Str(Worksheets(TKalkulator).Range("Name_VPP_alt"))
            
            FldCVolumeDiscount = Str(Worksheets(TKalkulator).Range("Name_Volumenrabatt"))
            FldCInfo = Worksheets(TKalkulator).Range("Name_HinweiseZumAngebot")
            FldCSort = Str(Worksheets(TKalkulator).Cells(Zeile, 2))  'Positionsnummer
            'FldCDPartnerlevel
            'FldCDDiscount
            'FldCAnsprechpartner '??????? Kundenname ????????
            'FldCVMWareHEKG

            'Contentdata schreiben
            SQLText = "INSERT INTO [Contentdata] (OppID, SKU, QTY, MSRP, " & _
            "ORAN, VPP, Conditions, " & _
            "VPPPunkte, Manufacturer, VolumeDiscount, Info, " & _
            "Sort, Zeit" & _
            ") " & "VALUES " & _
            "('" & FldCOppID & "', '" & FldCSKU & "', " & FldCQTY & ", " & FldCMSRP & ", " & _
            "'" & FldCORAN & "', '" & FldCVPP & "', '" & FldCConditions & "', " & _
            FldCVPPPunkte & ", '" & FldCManufacturer & "', " & FldCVolumeDiscount & ", '" & FldCInfo & "'," & _
            FldCSort & ", '" & FldCZeit & "'" & _
            ")"
            
'Debug.Print SQLText
            
           accDB.Execute SQLText
    
        End If
        Zeile = Zeile + 1
    Loop
    
    'aufr|fffd|umen
    Set accDB = Nothing
    Set dbEngine = Nothing
End Sub


Sub ESOLneu(Erneuerung As Boolean)

Dim SQLText As String

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstEsol As Object

Dim EsolPfad As String

Dim VeeamNeulizenz As Boolean
Dim Zeile As Integer, ZeileKunde As Long

    EsolPfad = Worksheets(TUpdates).Range("Name_PfadEsolDB")

    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(EsolPfad)
    
    Set rstEsol = accDB.OpenRecordset("tblEsol")   ' Verwendung gespeicherte Abfrage/Tabelle

    'f|fffd|r Veeam erst rausfinden, ob Neulizenz oder nicht
    VeeamNeulizenz = False
    
    Zeile = 20
    Do
        If Worksheets(TKalkulator).Cells(Zeile, SpHersteller) = "Veeam" Then
            If Mid(Worksheets(TKalkulator).Cells(Zeile, SpVeeamArtNr), 15, 3) = "000" Then
                VeeamNeulizenz = True
            End If
        End If
    
        Zeile = Zeile + 1
    Loop Until Worksheets(TKalkulator).Cells(Zeile, SpHersteller) = "Ende Veeam" Or VeeamNeulizenz

    'Startzeile finden
    Zeile = 20

    Do While Worksheets(TKalkulator).Cells(Zeile, SpHersteller) <> "Veeam" And Worksheets(TKalkulator).Cells(Zeile, SpHersteller) <> "VMware"
        Zeile = Zeile + 1
    Loop

    Do
        rstEsol.addnew
                
        rstEsol!AngebotNummer = Worksheets(TKalkulator).Range("Name_AngebotNr")
        rstEsol!ErstelltAm = Worksheets(TKalkulator).Range("Name_AngebotVom")
        rstEsol!GueltigBis = Worksheets(TKalkulator).Range("Name_GueltigBis")
        rstEsol!Ersteller = Worksheets(TKalkulator).Range("Name_Bearbeiter_Name")
        rstEsol!KundeNummer = Worksheets(TKalkulator).Range("Name_KundeNr")
        
        ZeileKunde = Application.WorksheetFunction.Match(Worksheets(TKalkulator).Range("Name_KundeNr"), Worksheets(TKunden).Columns(1), 0)
        rstEsol!KundeName = Worksheets(TKunden).Cells(ZeileKunde, 2)
        rstEsol!KundeStrasse = Worksheets(TKunden).Cells(ZeileKunde, 3)
        rstEsol!KundePLZ = Worksheets(TKunden).Cells(ZeileKunde, 5)
        rstEsol!KundeOrt = Worksheets(TKunden).Cells(ZeileKunde, 6)
        
        rstEsol!KundeAnsprechpartner = Worksheets(TKalkulator).Cells(13, 2)
        rstEsol!Endkunde = Worksheets(TKalkulator).Range("Name_Endkunde")
        rstEsol!Kommentar = Worksheets(TKalkulator).Range("Name_HinweiseZumAngebot")
        
        rstEsol!Hersteller = Worksheets(TKalkulator).Cells(Zeile, SpHersteller)
        rstEsol!SKU = Worksheets(TKalkulator).Cells(Zeile, SpArtNr)
        rstEsol!Anzahl = Worksheets(TKalkulator).Cells(Zeile, SpAnzahl)
        rstEsol!PreisEK = Worksheets(TKalkulator).Cells(Zeile, SpTDEinkauf)
        rstEsol!PreisVK = Worksheets(TKalkulator).Cells(Zeile, SpTotal)
        rstEsol!Marge = Worksheets(TKalkulator).Cells(Zeile, SpMarge)
        
        Select Case Worksheets(TKalkulator).Cells(Zeile, SpHersteller)
            Case "VMware"
                rstEsol!Produktgruppe = Worksheets(TKalkulator).Cells(Zeile, SpProductPlatform)
                rstEsol!DealRegNummer = Worksheets(TKalkulator).Range("Name_OranNummer")
                rstEsol!Partnerstatus = Worksheets(TKalkulator).Range("Name_Kunde_Kondi_VMware_Status")
                
                rstEsol!Neulizenz = True    'hardcodiert, geh|fffd|rt wirklich so
                
            Case "Veeam"
                rstEsol!Produktgruppe = IIf(Worksheets(TKalkulator).Cells(Zeile, SpVeeamLizenz), "Lizenz", "Support")
                rstEsol!DealRegNummer = Worksheets(TKalkulator).Range("Name_Veeam_ProjektmeldungText")
                rstEsol!Partnerstatus = Worksheets(TKalkulator).Range("Name_Kunde_Kondi_Veeam_Status")
                
                rstEsol!Neulizenz = VeeamNeulizenz
                
            Case Else
                MsgBox ("Fehler beim Schreiben der ESOL: falscher Hersteller")
        End Select
                
        rstEsol.Update
        
        Zeile = Zeile + 1
        Do While Worksheets(TKalkulator).Cells(Zeile, SpHersteller) <> "Veeam" And Worksheets(TKalkulator).Cells(Zeile, SpHersteller) <> "VMware" And Worksheets(TKalkulator).Cells(Zeile, SpHersteller) <> "Ende Veeam"
            Zeile = Zeile + 1
        Loop
    Loop Until Worksheets(TKalkulator).Cells(Zeile, SpHersteller) = "Ende Veeam"

    
    Set dbEngine = Nothing
    
    'Access-DB schlie|fffd|en
    accDB.Close
    Set accDB = Nothing
    Set rstEsol = Nothing
End Sub
Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "frmAdvantagePlus"
Attribute VB_Base = "0{B30BCAF9-461A-4EB2-868D-02738E61420C}{3BCF2700-A4D3-401F-B956-B2C65936C4EA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


'Das Formular beinhaltet erst mal nur die |fffd|berschriften.
'Alle anderen Controls werden zur Laufzeit durch den Initialize dynamisch erzeugt.
'Sinn der Aktion ist, dass die Daten variabel sind, wenn sich die Original VMware Advantage+ - Liste |fffd|ndert, und damit die Basis in der Access-DB.


Private Sub UserForm_Initialize()
'das Formular muss dann auch neu aufgebaut werden

Const Zeilenhoehe As Double = 15
Const LinienOffset As Double = 3

Dim MeinForm As UserForm
Dim MeinControl As Control

Dim Zeile As Integer
Dim AlteDivision As String, AlteProductGroup As String, AltePlatformGroup As String, AlteProductPlatform As String
Dim LetztePosTop As Double

    'Me.BackColor = RGB(237, 237, 237)   'keine TechData-Farbe, ist von der Homepage geklaut

    For Zeile = 2 To Worksheets(TAdvantagePlus).Cells(2, 1).End(xlDown).Row
        'Division
         If AlteDivision <> Worksheets(TAdvantagePlus).Cells(Zeile, 1) Then
            Set MeinControl = Me.Controls.Add("Forms.Label.1", "lblZeile" & Zeile, True)
            With MeinControl
                .Height = 15.75
                .Width = 100
                .Top = Zeilenhoehe * Zeile
                .Caption = Worksheets(TAdvantagePlus).Cells(Zeile, 1)
                '.Font.Style = "Corbel"
                .Left = 20
                .Visible = True
            End With
               
            Set MeinControl = Me.Controls.Add("Forms.Label.1", "lblZeile" & Zeile, True)
            With MeinControl
                .Height = 1
                .Width = 640
                .Top = Zeilenhoehe * Zeile - 1
                .Left = 20 - LinienOffset
                .Visible = True
                .BackColor = 0
            End With
        End If

        AlteDivision = Worksheets(TAdvantagePlus).Cells(Zeile, 1)

        'Product Group
        If AlteProductGroup <> Worksheets(TAdvantagePlus).Cells(Zeile, 2) Then
            Set MeinControl = Me.Controls.Add("Forms.Label.1", "lblZeile" & Zeile, True)
            With MeinControl
                .Height = 15.75
                .Width = 100
                .Top = Zeilenhoehe * Zeile
                .Caption = Worksheets(TAdvantagePlus).Cells(Zeile, 2)
                .Left = 120
                .Visible = True
            End With
    
            Set MeinControl = Me.Controls.Add("Forms.Label.1", "lblZeile" & Zeile, True)
            With MeinControl
                .Height = 1
                .Width = 540
                .Top = Zeilenhoehe * Zeile - 1
                .Left = 120 - LinienOffset
                .Visible = True
                .BackColor = 0
            End With
        End If

        AlteProductGroup = Worksheets(TAdvantagePlus).Cells(Zeile, 2)
    
        'Platform Group
        If AltePlatformGroup <> Worksheets(TAdvantagePlus).Cells(Zeile, 3) Then
            Set MeinControl = Me.Controls.Add("Forms.Label.1", "lblZeile" & Zeile, True)
            With MeinControl
                .Height = 15.75
                .Width = 175
                .Top = Zeilenhoehe * Zeile
                .Caption = Worksheets(TAdvantagePlus).Cells(Zeile, 3)
                .Left = 220
                .Visible = True
            End With
            If Worksheets(TAdvantagePlus).Cells(Zeile, 5) = -1 Then
                MeinControl.BackColor = FarbePlanet
                
                Set MeinControl = Me.Controls.Add("Forms.CheckBox.1", "lblZeile" & Zeile, True)
                With MeinControl
                    .Height = 15.75
                    .Width = 15
                    .Top = Zeilenhoehe * Zeile
                    .Caption = ""
                    .ControlSource = "'" & Worksheets(TAdvantagePlus).Name & "'!I" & Zeile
                    .Left = 580
                    .Visible = True
                End With
            End If
                        
            Set MeinControl = Me.Controls.Add("Forms.Label.1", "lblZeile" & Zeile, True)
            With MeinControl
                .Height = 1
                .Width = 440
                .Top = Zeilenhoehe * Zeile - 1
                .Left = 220 - LinienOffset
                .Visible = True
                .BackColor = 0
            End With
        End If

        AltePlatformGroup = Worksheets(TAdvantagePlus).Cells(Zeile, 3)
        
        'Product Platform
        Set MeinControl = Me.Controls.Add("Forms.Label.1", "lblZeile" & Zeile, True)
        With MeinControl
            .Height = 15.75
            .Width = 170
            .Top = Zeilenhoehe * Zeile
            .Caption = Worksheets(TAdvantagePlus).Cells(Zeile, 4)
            .Left = 400
            .Visible = True
        End With

        If Worksheets(TAdvantagePlus).Cells(Zeile, 7) = -1 Then
            MeinControl.BackColor = FarbePlanet
            
            Set MeinControl = Me.Controls.Add("Forms.CheckBox.1", "lblZeile" & Zeile, True)
            With MeinControl
                .Height = 15.75
                .Width = 15
                .Top = Zeilenhoehe * Zeile
                .Caption = ""
                .ControlSource = "'" & Worksheets(TAdvantagePlus).Name & "'!I" & Zeile
                .Left = 580
                .Visible = True
            End With
        End If

    Next Zeile
    
    LetztePosTop = MeinControl.Top - 15
    
    'senkrechte Linien
    Set MeinControl = Me.Controls.Add("Forms.Label.1", "lblZeile" & Zeile, True)
    With MeinControl
        .Height = LetztePosTop
        .Width = 1
        .Top = Zeilenhoehe * 2 - 1
        .Left = 120 - LinienOffset
        .Visible = True
        .BackColor = 0
    End With

    Set MeinControl = Me.Controls.Add("Forms.Label.1", "lblZeile" & Zeile, True)
    With MeinControl
        .Height = LetztePosTop
        .Width = 1
        .Top = Zeilenhoehe * 2 - 1
        .Left = 220 - LinienOffset
        .Visible = True
        .BackColor = 0
    End With

    Set MeinControl = Me.Controls.Add("Forms.Label.1", "lblZeile" & Zeile, True)
    With MeinControl
        .Height = LetztePosTop
        .Width = 1
        .Top = Zeilenhoehe * 2 - 1
        .Left = 400 - LinienOffset
        .Visible = True
        .BackColor = 0
    End With


    Me.ScrollBars = fmScrollBarsVertical
    Me.ScrollHeight = LetztePosTop + 50

    'frmAdvantagePlus.Show
End Sub
Attribute VB_Name = "frmAnsprechpartner"
Attribute VB_Base = "0{B2E8615E-C24F-4DB4-8F0D-D5A5C4D30D74}{889CD33D-1B39-40D4-B6F3-35AF84ABA83E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database


Private Sub cmdDelAP_Click()

Dim rstAp As Object     'DAO.Recordset


    If IsNumeric(lstAnsprechpartner) Then
        'Access l|fffd|schen
        Set rstAp = accDB.OpenRecordset("SELECT * FROM tblAnsprechpartner WHERE IDAnsprechpartner=" & lstAnsprechpartner)
        
        rstAp.Delete
        
        rstAp.Close
        Set rstAp = Nothing
        
        'Listbox Eintrag l|fffd|schen
        lstAnsprechpartner.RemoveItem (lstAnsprechpartner.ListIndex)
        
        lstAnsprechpartner = ""

        'Textboxen leeren
        txtVorname = ""
        txtNachname = ""
        txtTelefon = ""
        txtEMail = ""
        txtKurzzeichen = ""
        txtWinLogin = ""
        
    Else
        MsgBox ("kein Ansprechpartner gew|fffd|hlt")
    End If

End Sub

Private Sub cmdInsAP_Click()

    lstAnsprechpartner = ""

    txtVorname = ""
    txtNachname = ""
    txtTelefon = ""
    txtEMail = ""
    txtKurzzeichen = ""
    txtWinLogin = ""

End Sub

Private Sub cmdSchliessen_Click()
    Unload Me
End Sub

Private Sub lstAnsprechpartner_Click()
Dim rstAp As Object     'DAO.Recordset
    
    Set rstAp = accDB.OpenRecordset("SELECT * FROM tblAnsprechpartner WHERE IDAnsprechpartner=" & lstAnsprechpartner)
    
    txtVorname = Nz(rstAp!Vorname, "")
    txtNachname = Nz(rstAp!Nachname, "")
    txtTelefon = Nz(rstAp!TelefonNr, "")
    txtEMail = Nz(rstAp!Mail, "")
    txtKurzzeichen = Nz(rstAp!Kurzzeichen, "")
    txtWinLogin = Nz(rstAp!WinLogin, "")
    
    rstAp.Close
    Set rstAp = Nothing
End Sub

Private Sub txtEMail_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren(lstAnsprechpartner, "Mail", txtEMail)
End Sub

Private Sub txtKurzzeichen_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren(lstAnsprechpartner, "Kurzzeichen", txtKurzzeichen)
End Sub

Private Sub txtNachname_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren(lstAnsprechpartner, "Nachname", txtNachname)
End Sub

Private Sub txtTelefon_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren(lstAnsprechpartner, "TelefonNr", txtTelefon)
End Sub

Private Sub txtVorname_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren(lstAnsprechpartner, "Vorname", txtVorname)
End Sub

Private Sub txtWinLogin_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren(lstAnsprechpartner, "WinLogin", txtWinLogin)
End Sub


Private Sub UserForm_Initialize()
Dim rstAp As Object     'DAO.Recordset

    'Set dbe = CreateObject("DAO.DBEngine.36")   ' Acc2000-2003
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"))
    
    Set rstAp = accDB.OpenRecordset("tblAnsprechpartner")
    
    lstAnsprechpartner.Clear
    
    Do While Not rstAp.EOF
    
        lstAnsprechpartner.AddItem
        lstAnsprechpartner.List(lstAnsprechpartner.ListCount - 1, 0) = rstAp!IDAnsprechpartner
        lstAnsprechpartner.List(lstAnsprechpartner.ListCount - 1, 1) = rstAp!Vorname
        lstAnsprechpartner.List(lstAnsprechpartner.ListCount - 1, 2) = rstAp!Nachname
'        lstAnsprechpartner.List(lstGroup.ListCount - 1, 2) = rstKd!KdStrasse
'        lstAnsprechpartner.List(lstGroup.ListCount - 1, 3) = rstKd!KdOrt
    
        rstAp.MoveNext
    Loop
    
    rstAp.Close
    Set rstAp = Nothing
End Sub

Private Sub UserForm_Terminate()

     Set dbEngine = Nothing
    
    'Access-DB schlie|fffd|en
    accDB.Close
    Set accDB = Nothing
End Sub


Sub FeldAktualisieren(ID As Variant, Feld As String, Wert As String)
Dim NeueID As Long
Dim rstAp As Object     'DAO.Recordset

    If IsNumeric(ID) Then   'Datensatz existiert schon ...
        Set rstAp = accDB.OpenRecordset("SELECT * FROM tblAnsprechpartner WHERE IDAnsprechpartner=" & ID)
        rstAp.Edit
        rstAp.Fields(Feld) = Wert
        rstAp.Update
    Else        'neuer Datensatz
        'Access neu anlegen
        Set rstAp = accDB.OpenRecordset("SELECT * FROM tblAnsprechpartner")
        
        rstAp.addnew
        rstAp.Fields(Feld) = Wert
        NeueID = rstAp!IDAnsprechpartner
        rstAp.Update
        
        'Listbox neu einf|fffd|gen
        lstAnsprechpartner.AddItem
        lstAnsprechpartner.List(lstAnsprechpartner.ListCount - 1, 0) = NeueID
        
        lstAnsprechpartner.ListIndex = lstAnsprechpartner.ListCount - 1
    End If

    rstAp.Close
    Set rstAp = Nothing
    
    'Listbox aktualisieren
    If Feld = "Vorname" Then
        lstAnsprechpartner.List(lstAnsprechpartner.ListIndex, 1) = Wert
    End If
    
    If Feld = "Nachname" Then
        lstAnsprechpartner.List(lstAnsprechpartner.ListIndex, 2) = Wert
    End If
    
End Sub
Attribute VB_Name = "frmBitteWarten"
Attribute VB_Base = "0{F978E416-F912-4D5F-A09B-D4CCE770D595}{78B52891-E9B7-48DF-B0B8-917AF8C7DDA7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit



Private Sub UserForm_Activate()
    Call KalkulatorVorbereiten
    Unload Me
End Sub

Attribute VB_Name = "frmKondis"
Attribute VB_Base = "0{55AED07E-A825-4DF1-8AB0-E6F7AAFFC548}{C1C1309A-99CE-4F30-A0F9-E7962E3A08CC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdOK_Click()

    

    Range("Name_Kunde_Kondi_VMware_vSphere") = txtVmwareVsphere / 100
    Range("Name_Kunde_Kondi_VMware_NvSphere") = txtVmwareNvsphere / 100
    Range("Name_Kunde_Kondi_VMware_SnS") = txtVmwareSns / 100
    Range("Name_Kunde_Kondi_VMware_Essentials") = txtVmwareEssentials / 100
    Range("Name_Kunde_Kondi_VMware_Workstation") = txtVmwareWorkstation / 100
    Range("Name_Kunde_Kondi_VMware_PSO") = txtVmwarePso / 100
    Range("Name_Kunde_Kondi_VMware_Renewal") = txtVmwareRenewal / 100
    Range("Name_Kunde_Kondi_VMware_Status") = cboVmwareStatus
   
    Range("Name_Kunde_Kondi_Veeam_Veeam") = txtVeeamVeeam / 100
    Range("Name_Kunde_Kondi_Veeam_SnS") = txtVeeamSns / 100
    Range("Name_Kunde_Kondi_Veeam_Renewal") = txtVeeamRenewal / 100
    Range("Name_Kunde_Kondi_Veeam_Status") = cboVeeamStatus

    If Range("Name_Kunde_Kondi_VMware_Status") <> "Professional" Then
        Range("Name_lbl_VPP_MembershipID") = "VPP Membership ID:"
        Range("Name_lbl_VPP_alt") = "Aktuelle VPP Punktzahl:"
        
        Worksheets(TKalkulator).optCpp.Visible = True
        Worksheets(TKalkulator).optVpp.Visible = True
        Range("Name_TextRabattsystem") = "Rabattsystem"
        
        'Range("Name_OranNummer") = ""
        If Range("Name_OranNummer") = "" Then
            Worksheets(TKalkulator).cmdOranFreigabe.Visible = False
        Else
            Worksheets(TKalkulator).cmdOranFreigabe.Visible = True
        End If
        Range("Name_lblOranNummer") = "Oran-No.:"
        
    Else
        Range("Name_lbl_VPP_MembershipID") = ""
        Range("Name_lbl_VPP_alt") = ""
        
        Worksheets(TKalkulator).optCpp.Visible = False
        Worksheets(TKalkulator).optVpp.Visible = False
        Range("Name_TextRabattsystem") = ""
        
        Range("Name_OranNummer") = ""
        Worksheets(TKalkulator).cmdOranFreigabe.Visible = False
        Range("Name_lblOranNummer") = ""
    End If


    Unload Me
End Sub

Private Sub cmdSchliessen_Click()
    Unload Me
End Sub



Private Sub UserForm_Initialize()

    txtVmwareVsphere = Range("Name_Kunde_Kondi_VMware_vSphere") * 100
    txtVmwareNvsphere = Range("Name_Kunde_Kondi_VMware_NvSphere") * 100
    txtVmwareSns = Range("Name_Kunde_Kondi_VMware_SnS") * 100
    txtVmwareEssentials = Range("Name_Kunde_Kondi_VMware_Essentials") * 100
    txtVmwareWorkstation = Range("Name_Kunde_Kondi_VMware_Workstation") * 100
    txtVmwarePso = Range("Name_Kunde_Kondi_VMware_PSO") * 100
    txtVmwareRenewal = Range("Name_Kunde_Kondi_VMware_Renewal") * 100
    cboVmwareStatus = Range("Name_Kunde_Kondi_VMware_Status")
   
    txtVeeamVeeam = Range("Name_Kunde_Kondi_Veeam_Veeam") * 100
    txtVeeamSns = Range("Name_Kunde_Kondi_Veeam_SnS") * 100
    txtVeeamRenewal = Range("Name_Kunde_Kondi_Veeam_Renewal") * 100
    cboVeeamStatus = Range("Name_Kunde_Kondi_Veeam_Status")

    cboVmwareStatus.AddItem "Premier"
    cboVmwareStatus.AddItem "Professional"
    cboVmwareStatus.AddItem "Enterprise"
    
    cboVeeamStatus.AddItem "Registered"
    cboVeeamStatus.AddItem "Silver"
    cboVeeamStatus.AddItem "Gold"
    cboVeeamStatus.AddItem "Platinum"
    
End Sub
Attribute VB_Name = "frmKunde"
Attribute VB_Base = "0{4AF9F4B0-E68E-4A4A-81A1-BA6DAC45F399}{2BDF1BD5-BB75-45CF-B979-3447298F1C7F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database


Private Sub cboVeeamStatus_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKondiVeeam", TKundenKondiVeeam, "Status", cboVeeamStatus, "Group")
End Sub

Private Sub cboVmwareStatus_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKondiVmware", TKundenKondiVMware, "Status", cboVmwareStatus, "Group")
End Sub


Private Sub cmdDelEmail_Click()
Dim rstEV As Object     'AS DAO.Recordset

    If IsNull(lstEmailVerteiler) Then
        MsgBox ("keine E-Mail-Adresse zum l|fffd|schen gew|fffd|hlt!")
    Else
        'in die Access-DB l|fffd|schen
        'accDB.DoCmd.RunSQL "DELETE FROM tblKundenEmailVerteiler WHERE IDEmailVerteiler=" & lstEmailVerteiler
        
        Set rstEV = accDB.OpenRecordset("SELECT * FROM tblKundenEmailVerteiler WHERE IDEmailVerteiler=" & lstEmailVerteiler)
        rstEV.Delete
        lstEmailVerteiler.RemoveItem (lstEmailVerteiler.ListIndex)
    
    End If

End Sub

Private Sub cmdInsEmail_Click()
Dim Eing As String
Dim rstEV As Object     'AS DAO.Recordset
Dim IDEmailVerteiler As Long
    
    Eing = InputBox("Bitte die e-Mail-Adresse eingeben")
    
    If Eing <> "" Then      'wenn eine e-Mail-Adresse eingegeben wurde ...
    
        'in die Access-DB schreiben
        Set rstEV = accDB.OpenRecordset("tblKundenEmailVerteiler")
        
        rstEV.addnew
        rstEV!KundenNrID = txtKundenNr
        rstEV!Email = Eing
        IDEmailVerteiler = rstEV!IDEmailVerteiler
        rstEV.Update
        
        rstEV.Close
        Set rstEV = Nothing
        
        'dann die Listbox aktualisieren
        lstEmailVerteiler.AddItem
        lstEmailVerteiler.List(lstEmailVerteiler.ListCount - 1, 0) = IDEmailVerteiler
        lstEmailVerteiler.List(lstEmailVerteiler.ListCount - 1, 1) = Eing
        
    End If
End Sub

Private Sub cmdKundeSuchen_Click()
Dim rstKd As Object     ' AS DAO.Recordset
Dim Spalte As Integer
        
    frmKundeSuchen.Show
    
    If TransferKundenNr <> 0 Then       '0 ist Abbruchkennzeichen
        txtKundenNr = TransferKundenNr
    
        FeldAktiv txtKundenNr, True
        FeldAktiv txtName, True
        FeldAktiv txtStrasse, True
        FeldAktiv txtLand, True
        FeldAktiv txtPlz, True
        FeldAktiv txtOrt, True
        FeldAktiv txtGroupID, True
        FeldAktiv lstEmailVerteiler, True
        
        FeldAktiv cmdInsEmail, True
        FeldAktiv cmdDelEmail, True
    
        'Name und Adresse
        Set rstKd = accDB.OpenRecordset("SELECT * FROM tblKunden WHERE IDKundenNr=" & TransferKundenNr)
        txtName = rstKd!KdName
        txtStrasse = Nz(rstKd!KdStrasse, "")
        txtLand = Nz(rstKd!KdLand, "")
        txtPlz = Nz(rstKd!KdPlz, "")
        txtOrt = Nz(rstKd!KdOrt, "")
        
        'Gruppe
        txtGroupID = Nz(rstKd!GroupID, "")
        
        If txtGroupID <> "" Then
        
            FeldAktiv lstGroup, True
            FeldAktiv txtVmwareVsphere, True
            FeldAktiv txtVmwareNvsphere, True
            FeldAktiv txtVmwareSns, True
            FeldAktiv txtVmwareEssentials, True
            FeldAktiv txtVmwareWorkstation, True
            FeldAktiv txtVmwarePso, True
            FeldAktiv txtVmwareRenewal, True
            FeldAktiv cboVmwareStatus, True
            FeldAktiv txtVmwarePartnerID, True
            FeldAktiv txtVeeamVeeam, True
            FeldAktiv txtVeeamSns, True
            FeldAktiv txtVeeamRenewal, True
            FeldAktiv cboVeeamStatus, True
            FeldAktiv txtVeeamPartnerID, True
        
            lstGroup.Clear
            If txtGroupID <> "" Then
                Set rstKd = accDB.OpenRecordset("SELECT * FROM tblKunden WHERE GroupID=" & txtGroupID)
                Do While Not rstKd.EOF
                
                    If rstKd!IDKundenNr <> CLng(txtKundenNr) Then
                        lstGroup.AddItem
                        lstGroup.List(lstGroup.ListCount - 1, 0) = rstKd!IDKundenNr
                        lstGroup.List(lstGroup.ListCount - 1, 1) = rstKd!KdName
                        lstGroup.List(lstGroup.ListCount - 1, 2) = Nz(rstKd!KdStrasse, "")
                        lstGroup.List(lstGroup.ListCount - 1, 3) = Nz(rstKd!KdOrt, "")
                    End If
                    
                    rstKd.MoveNext
                Loop
            End If
              
            'Konditionen
            Set rstKd = accDB.OpenRecordset("SELECT * FROM tblKondiVmware WHERE GroupID=" & txtGroupID)
            If Not rstKd.EOF Then
                txtVmwareVsphere = rstKd!vSphere * 100
                txtVmwareNvsphere = rstKd!NvSphere * 100
                txtVmwareSns = rstKd!SnS * 100
                txtVmwareEssentials = rstKd!Essentials * 100
                txtVmwareWorkstation = rstKd!Workstation * 100
                txtVmwarePso = rstKd!PSO * 100
                txtVmwareRenewal = rstKd!Renewal * 100
                cboVmwareStatus = Nz(rstKd!Status, "")
                txtVmwarePartnerID = Nz(rstKd!PartnerID, "")
            Else
                txtVmwareVsphere = ""
                txtVmwareNvsphere = ""
                txtVmwareSns = ""
                txtVmwareEssentials = ""
                txtVmwareWorkstation = ""
                txtVmwarePso = ""
                txtVmwareRenewal = ""
                cboVmwareStatus = ""
                txtVmwarePartnerID = ""
            End If
            
            Set rstKd = accDB.OpenRecordset("SELECT * FROM tblKondiVeeam WHERE GroupID=" & txtGroupID)
            If Not rstKd.EOF Then
                txtVeeamVeeam = rstKd!Veeam * 100
                txtVeeamSns = rstKd!SnS * 100
                txtVeeamRenewal = rstKd!Renewal * 100
                cboVeeamStatus = Nz(rstKd!Status, "")
                txtVeeamPartnerID = Nz(rstKd!PartnerID, "")
            Else
                txtVeeamVeeam = ""
                txtVeeamSns = ""
                txtVeeamRenewal = ""
                cboVeeamStatus = ""
                txtVeeamPartnerID = ""
            End If
       
       
        End If
        
        'E-Mail-Verteiler
        lstEmailVerteiler.Clear
        Set rstKd = accDB.OpenRecordset("SELECT * FROM tblKundenEmailVerteiler WHERE KundenNrID=" & TransferKundenNr)
        Do While Not rstKd.EOF
            lstEmailVerteiler.AddItem
            lstEmailVerteiler.List(lstEmailVerteiler.ListCount - 1, 0) = rstKd!IDEmailVerteiler
            lstEmailVerteiler.List(lstEmailVerteiler.ListCount - 1, 1) = rstKd!Email
            rstKd.MoveNext
        Loop
        
        
        
        rstKd.Close
        Set rstKd = Nothing
    
    End If
End Sub



Private Sub cmdNeu_Click()

Dim KundenNr As String, KdName As String
Dim rstKd As Object     'DAO-Recordset
Dim Zeile As Integer

    Do
        KundenNr = InputBox("Bitte die Kundennummer eingeben (muss ausgef|fffd|llt sein, als Zahl)")
    Loop Until KundenNr <> "" And IsNumeric(KundenNr)
    
    Do
        KdName = InputBox("Bitte den Namen vom Kunden eingeben (muss ausgef|fffd|llt sein")
    Loop Until KdName <> ""
    
    Set rstKd = accDB.OpenRecordset("SELECT * FROM tblKunden WHERE IDKundenNr=" & KundenNr)
    
    If rstKd.EOF Then
    
        If MsgBox("M|fffd|chtest du wirklich einen neuen Kunden mit der Kunden-Nr. " & KundenNr & " und dem Namen " & KdName & " anlegen?", vbOKCancel) = vbOK Then
    
            'Access anlegen
            rstKd.addnew
            rstKd!IDKundenNr = KundenNr
            rstKd!KdName = KdName
            rstKd.Update
                
            'Excel anlegen
            Zeile = Worksheets(TKunden).Cells(1, 1).End(xlDown).Row + 1
            Worksheets(TKunden).Cells(Zeile, 1) = KundenNr
            Worksheets(TKunden).Cells(Zeile, 2) = KdName
            
            'Felder |fffd|ffnen
            FeldAktiv txtKundenNr, True
            FeldAktiv txtName, True
            FeldAktiv txtStrasse, True
            FeldAktiv txtLand, True
            FeldAktiv txtPlz, True
            FeldAktiv txtOrt, True
            FeldAktiv txtGroupID, True
            FeldAktiv lstEmailVerteiler, True
            FeldAktiv lstGroup, True
            FeldAktiv txtVmwareVsphere, True
            FeldAktiv txtVmwareNvsphere, True
            FeldAktiv txtVmwareSns, True
            FeldAktiv txtVmwareEssentials, True
            FeldAktiv txtVmwareWorkstation, True
            FeldAktiv txtVmwarePso, True
            FeldAktiv txtVmwareRenewal, True
            FeldAktiv cboVmwareStatus, True
            FeldAktiv txtVeeamVeeam, True
            FeldAktiv txtVeeamSns, True
            FeldAktiv txtVeeamRenewal, True
            FeldAktiv cboVeeamStatus, True
            FeldAktiv cmdInsEmail, True
            FeldAktiv cmdDelEmail, True

            'Anfangswerte im Formular setzen
            txtKundenNr = KundenNr
            txtName = KdName
        End If

    Else
        MsgBox ("Die Kundennummer wurde bereits angelegt! Neuanlage nicht m|fffd|glich!")
    End If

End Sub

Private Sub cmdSchliessen_Click()
    
    Unload Me
End Sub


Private Sub txtGroupID_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
Dim rstKd As Object
    
    If txtGroupID <> "" Then
    
        'Test, ob Group neu ist
        Set rstKd = accDB.OpenRecordset("SELECT GroupID FROM tblKondiVmware WHERE GroupID=" & txtGroupID & " " & _
                "UNION ALL " & _
                "SELECT GroupID FROM tblKondiVeeam WHERE GroupID=" & txtGroupID)
        
        If rstKd.EOF Then
            If MsgBox("Zu dem Group Key gibt es keine Konditionen. M|fffd|chtest du diese Nummer trotzdem weiter verwenden?", vbYesNo) = vbNo Then
                txtGroupID = ""
            End If
        End If
    End If
        
    
        
    If txtGroupID <> "" Then        'kommt schon wieder, weil es im Block vorher evtl. auf "" gesetzt wurde
        
        'Feld aktualisieren
        Call FeldAktualisieren("tblKunden", TKunden, "GroupID", CDbl(txtGroupID), "Kunde")
        
        'Liste leeren
        lstGroup.Clear
        
        'alle Felder der Konditionen freischalten
        FeldAktiv lstGroup, True
        FeldAktiv txtVmwareVsphere, True
        FeldAktiv txtVmwareNvsphere, True
        FeldAktiv txtVmwareSns, True
        FeldAktiv txtVmwareEssentials, True
        FeldAktiv txtVmwareWorkstation, True
        FeldAktiv txtVmwarePso, True
        FeldAktiv txtVmwareRenewal, True
        FeldAktiv cboVmwareStatus, True
        FeldAktiv txtVeeamVeeam, True
        FeldAktiv txtVeeamSns, True
        FeldAktiv txtVeeamRenewal, True
        FeldAktiv cboVeeamStatus, True

        'Liste |fffd|ndern
        Set rstKd = accDB.OpenRecordset("SELECT * FROM tblKunden WHERE GroupID=" & txtGroupID)
        Do While Not rstKd.EOF
        
            If rstKd!IDKundenNr <> CLng(txtKundenNr) Then
                lstGroup.AddItem
                lstGroup.List(lstGroup.ListCount - 1, 0) = rstKd!IDKundenNr
                lstGroup.List(lstGroup.ListCount - 1, 1) = rstKd!KdName
                lstGroup.List(lstGroup.ListCount - 1, 2) = Nz(rstKd!KdStrasse, "")
                lstGroup.List(lstGroup.ListCount - 1, 3) = Nz(rstKd!KdOrt, "")
            End If
            
            rstKd.MoveNext
        Loop
        
        'Konditionen
        Set rstKd = accDB.OpenRecordset("SELECT * FROM tblKondiVmware WHERE GroupID=" & txtGroupID)
        
        If Not rstKd.EOF Then
            txtVmwareVsphere = rstKd!vSphere * 100
            txtVmwareNvsphere = rstKd!NvSphere * 100
            txtVmwareSns = rstKd!SnS * 100
            txtVmwareEssentials = rstKd!Essentials * 100
            txtVmwareWorkstation = rstKd!Workstation * 100
            txtVmwarePso = rstKd!PSO * 100
            txtVmwareRenewal = rstKd!Renewal * 100
            cboVmwareStatus = rstKd!Status
        Else
            txtVmwareVsphere = ""
            txtVmwareNvsphere = ""
            txtVmwareSns = ""
            txtVmwareEssentials = ""
            txtVmwareWorkstation = ""
            txtVmwarePso = ""
            txtVmwareRenewal = ""
            cboVmwareStatus = ""
        End If
        
        Set rstKd = accDB.OpenRecordset("SELECT * FROM tblKondiVeeam WHERE GroupID=" & txtGroupID)
        
        If Not rstKd.EOF Then
            txtVeeamVeeam = rstKd!Veeam * 100
            txtVeeamSns = rstKd!SnS * 100
            txtVeeamRenewal = rstKd!Renewal * 100
            cboVeeamStatus = rstKd!Status
        Else
            txtVeeamVeeam = ""
            txtVeeamSns = ""
            txtVeeamRenewal = ""
            cboVeeamStatus = ""
        End If
       
    Else
        
        'Feld aktualisieren
        Call FeldAktualisieren("tblKunden", TKunden, "GroupID", txtGroupID, "Kunde")
        
        'Liste leeren
        lstGroup.Clear
        
        'alle Felder der Konditionen freischalten
        FeldAktiv lstGroup, False
        FeldAktiv txtVmwareVsphere, False
        FeldAktiv txtVmwareNvsphere, False
        FeldAktiv txtVmwareSns, False
        FeldAktiv txtVmwareEssentials, False
        FeldAktiv txtVmwareWorkstation, False
        FeldAktiv txtVmwarePso, False
        FeldAktiv txtVmwareRenewal, False
        FeldAktiv cboVmwareStatus, False
        FeldAktiv txtVeeamVeeam, False
        FeldAktiv txtVeeamSns, False
        FeldAktiv txtVeeamRenewal, False
        FeldAktiv cboVeeamStatus, False
        
        txtVmwareVsphere = ""
        txtVmwareNvsphere = ""
        txtVmwareSns = ""
        txtVmwareEssentials = ""
        txtVmwareWorkstation = ""
        txtVmwarePso = ""
        txtVmwareRenewal = ""
        cboVmwareStatus = ""
        
        txtVeeamVeeam = ""
        txtVeeamSns = ""
        txtVeeamRenewal = ""
        cboVeeamStatus = ""
        
    End If
End Sub



Private Sub txtLand_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)

    Call FeldAktualisieren("tblKunden", TKunden, "KdLand", txtLand, "Kunde")

End Sub


Private Sub txtName_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)

    If txtName <> "" And Not IsNull(txtName) Then
        Call FeldAktualisieren("tblKunden", TKunden, "KdName", txtName, "Kunde")
    Else
        MsgBox ("Der Name muss ausgef|fffd|llt sein!")
        Cancel = True
    End If
End Sub

Private Sub txtOrt_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKunden", TKunden, "KdOrt", txtOrt, "Kunde")
End Sub

Private Sub txtPlz_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKunden", TKunden, "KdPlz", txtPlz, "Kunde")
End Sub

Private Sub txtStrasse_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKunden", TKunden, "KdStrasse", txtStrasse, "Kunde")
End Sub

Private Sub txtVeeamPartnerID_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKondiVeeam", TKundenKondiVeeam, "PartnerID", txtVeeamPartnerID, "Group")
End Sub

Private Sub txtVeeamRenewal_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKondiVeeam", TKundenKondiVeeam, "Renewal", txtVeeamRenewal / 100, "Group")
End Sub

Private Sub txtVeeamSns_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKondiVeeam", TKundenKondiVeeam, "SnS", txtVeeamSns / 100, "Group")
End Sub

Private Sub txtVeeamVeeam_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKondiVeeam", TKundenKondiVeeam, "Veeam", txtVeeamVeeam / 100, "Group")
End Sub

Private Sub txtVmwareEssentials_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKondiVmware", TKundenKondiVMware, "Essentials", txtVmwareEssentials / 100, "Group")
End Sub

Private Sub txtVmwareNvsphere_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKondiVmware", TKundenKondiVMware, "NvSphere", txtVmwareNvsphere / 100, "Group")
End Sub

Private Sub txtVMwarePartnerID_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKondiVmware", TKundenKondiVMware, "PartnerID", txtVmwarePartnerID, "Group")
End Sub

Private Sub txtVmwarePso_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKondiVmware", TKundenKondiVMware, "PSO", txtVmwarePso / 100, "Group")
End Sub

Private Sub txtVmwareRenewal_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKondiVmware", TKundenKondiVMware, "Renewal", txtVmwareRenewal / 100, "Group")
End Sub

Private Sub txtVmwareSns_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKondiVmware", TKundenKondiVMware, "SnS", txtVmwareSns / 100, "Group")
End Sub

Private Sub txtVmwareVsphere_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKondiVmware", TKundenKondiVMware, "vSphere", txtVmwareVsphere / 100, "Group")
End Sub

Private Sub txtVmwareWorkstation_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call FeldAktualisieren("tblKondiVmware", TKundenKondiVMware, "Workstation", txtVmwareWorkstation / 100, "Group")
End Sub



Private Sub UserForm_Initialize()

    'Set dbe = CreateObject("DAO.DBEngine.36")   ' Acc2000-2003
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"))
    
'    Set accDB = CreateObject("Access.Application")
'    accDB.OpenCurrentDatabase Range("Name_PfadAccessDB"), True
    
    cboVmwareStatus.AddItem "Premier"
    cboVmwareStatus.AddItem "Professional"
    cboVmwareStatus.AddItem "Enterprise"
    
    cboVeeamStatus.AddItem "Registered"
    cboVeeamStatus.AddItem "Silver"
    cboVeeamStatus.AddItem "Gold"
    cboVeeamStatus.AddItem "Platinum"
    
    FeldAktiv txtKundenNr, False
    FeldAktiv txtName, False
    FeldAktiv txtStrasse, False
    FeldAktiv txtLand, False
    FeldAktiv txtPlz, False
    FeldAktiv txtOrt, False
    FeldAktiv txtGroupID, False
    FeldAktiv lstEmailVerteiler, False
    FeldAktiv lstGroup, False
    FeldAktiv txtVmwareVsphere, False
    FeldAktiv txtVmwareNvsphere, False
    FeldAktiv txtVmwareSns, False
    FeldAktiv txtVmwareEssentials, False
    FeldAktiv txtVmwareWorkstation, False
    FeldAktiv txtVmwarePso, False
    FeldAktiv txtVmwareRenewal, False
    FeldAktiv cboVmwareStatus, False
    FeldAktiv txtVeeamVeeam, False
    FeldAktiv txtVeeamSns, False
    FeldAktiv txtVeeamRenewal, False
    FeldAktiv cboVeeamStatus, False
    FeldAktiv cmdInsEmail, False
    FeldAktiv cmdDelEmail, False
End Sub

Private Sub UserForm_Terminate()

    Set dbEngine = Nothing
    
    'Access-DB schlie|fffd|en
    accDB.Close
    Set accDB = Nothing
End Sub


Sub FeldAktualisieren(accTbl As String, xlsTbl As String, Feldname As String, Wert As Variant, ArtID As String)
Dim rstKd As Object
Dim KdZeile As Integer
Dim SpalteNr As Integer
Dim ID As Long
Dim FeldID As String

    Select Case ArtID
        Case "Kunde"
            ID = txtKundenNr
            FeldID = "IDKundenNr"
        Case "Group"
            ID = txtGroupID
            FeldID = "GroupID"
        Case Else
            MsgBox ("falsche ID im Code!!!")
    End Select

    'Access-DB finden
    Set rstKd = accDB.OpenRecordset("SELECT * FROM " & accTbl & " WHERE " & FeldID & "=" & ID)
    
    If rstKd.EOF Then   'tritt auf, wenn der Datensatz noch nicht da ist --> neu anlegen
        'Access neu
        rstKd.addnew
        rstKd.Fields(FeldID) = ID
        rstKd.Fields(Feldname) = Wert
        rstKd.Update
       
        'Excel neue Zeile anlegen
        KdZeile = Worksheets(xlsTbl).Cells(1, 1).End(xlDown).Row + 1
        Worksheets(xlsTbl).Cells(KdZeile, 1) = ID
    Else
        'Access |fffd|ndern
        rstKd.Edit
        If Wert = "" Then
            rstKd.Fields(Feldname) = Null
        Else
            rstKd.Fields(Feldname) = Wert
        End If
        rstKd.Update
        
        'Excel Zeile finden
        KdZeile = Application.WorksheetFunction.Match(ID, Worksheets(xlsTbl).Columns(1), 0)
    End If
    
    'Excel-Tabelle |fffd|ndern
    SpalteNr = Application.WorksheetFunction.Match(Feldname, Worksheets(xlsTbl).Rows(1), 0)
    Worksheets(xlsTbl).Cells(KdZeile, SpalteNr) = Wert
    
    'aufr|fffd|umen
    rstKd.Close
    Set rstKd = Nothing
End Sub


Sub FeldAktiv(Feld As Object, Aktiv As Boolean)

    Feld.Enabled = Aktiv
    If Left(Feld.Name, 3) <> "cmd" Then
        If Aktiv Then
            Feld.BackColor = FarbeWhite
        Else
            Feld.BackColor = FarbeCoolGray1
        End If
    End If
End Sub
Attribute VB_Name = "frmKundeSuchen"
Attribute VB_Base = "0{E93487D0-142F-4E3E-8655-246912E7016E}{3DBCA035-1E3F-42AC-8603-0118C5AB3DB5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdAbbrechen_Click()
    TransferKundenNr = 0        'Abbruchkennzeichen
    Unload Me
End Sub


Private Sub cmdHinweise_Click()

    MsgBox ("Hinweise zum Gebrauch vom Filter:" & vbCrLf & _
            "Gesucht werden kann nach Name, Ort und Kundennummer." & vbCrLf & _
            "Diese brauchen nicht vollst|fffd|ndig zu sein, es werden auch Teile davon erkannt." & vbCrLf & _
            "Man kann mehrere Suchbegriffe eingeben, getrennt mit Leerzeichen." & vbCrLf & vbCrLf & _
            "Beispiele:" & vbCrLf & _
            "Suchbegriff 'bech neck' findet unter anderem alle Bechtle in Neckarsulm" & vbCrLf & _
            "Suchbegriff 'bech ulm' findet unter anderem alle Bechtle in Neckarsulm" & vbCrLf & _
            "Suchbegriff '100' zeigt alle Kunden, die in der Kundennummer irgendwo 100 haben")
End Sub

Private Sub cmdOK_Click()

    If IsNumeric(lstKunden) Then
        'Call KondisSchreiben(lstKunden)
        TransferKundenNr = lstKunden
        Unload Me
    Else
        MsgBox ("kein Kunde ausgew|fffd|hlt")
    End If
End Sub


Private Sub lstKunden_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    
    If IsNull(lstKunden) Then
        MsgBox ("einen musst du schon ausw|fffd|hlen ...")
    Else
        TransferKundenNr = lstKunden
        'Call KondisSchreiben(lstKunden)
        Unload Me
    End If
End Sub

Private Sub txtSuchfeld_Change()

Dim dbEngine As Object
Dim accDB As Object
Dim rstQry As Object
Dim SQLWhere As String
Dim SQLText As String

Dim KdArray() As String
Dim Rs As Integer

Dim Suchbegriffe As Variant, BegriffNr As Integer, Wort As String

    'Suchbegriffe aufdr|fffd|seln: die W|fffd|rter werden (Leerzeichen getrennt) separiert und dann in den SQL Where Teil zusammengesetzt
    Suchbegriffe = Split(txtSuchfeld, " ")

    For BegriffNr = 0 To UBound(Suchbegriffe)
        Wort = LCase(Suchbegriffe(BegriffNr))
        SQLWhere = SQLWhere & IIf(SQLWhere = "", "", " AND ") & "(LCASE(KdName) Like ""*" & Wort & "*"" OR LCASE(KdOrt) Like ""*" & Wort & "*"" OR IDKundenNr Like ""*" & Wort & "*"")"
        'SQLWhere = SQLWhere & IIf(SQLWhere = "", "", " AND ") & "(LCASE(KdName) Like ""*" & Wort & "*"")"
    Next BegriffNr

'F|fffd|llt die Listbox mit den Produkten
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(ThisWorkbook.FullName, False, False, "Excel 12.0")
    
    SQLText = "SELECT IDKundenNr, KdName, KdStrasse, KdOrt " & _
                "FROM [Kunden$] " & _
                IIf(SQLWhere = "", "", "WHERE " & SQLWhere & " ") & _
                "ORDER BY KdName"
    
'Debug.Print SQLText
    
    Set rstQry = accDB.OpenRecordset(SQLText)
    
    lstKunden.Clear       'l|fffd|scht alle Listeneintr|fffd|ge
                
'neue Version - viel schneller
    If Not rstQry.EOF Then
        rstQry.movelast
        rstQry.movefirst
        ReDim Preserve KdArray(rstQry.RecordCount - 1, 3)
        Rs = 0
    Else
        ReDim Preserve KdArray(0, 3)
    End If
    
    Do While Not rstQry.EOF       'Schleife |fffd|ber alle Records
        KdArray(Rs, 0) = rstQry.Fields(0).Value
        KdArray(Rs, 1) = rstQry.Fields(1).Value
        KdArray(Rs, 2) = IIf(IsNull(rstQry.Fields(2).Value), "", rstQry.Fields(2).Value)
        KdArray(Rs, 3) = IIf(IsNull(rstQry.Fields(3).Value), "", rstQry.Fields(3).Value)

        Rs = Rs + 1
        rstQry.MoveNext
    Loop
    lstKunden.List = KdArray
'ende neue Version
    
    'alles schlie|fffd|en
    rstQry.Close
    Set rstQry = Nothing
    Set dbEngine = Nothing
    accDB.Close
    Set accDB = Nothing




End Sub

Private Sub UserForm_Activate()
  Call txtSuchfeld_Change
End Sub


'Sub KondisSchreiben(KundeNr As Long)
''nach Auswahl vom Kunden werden die Konditionen aus der Kundenliste geholt und hardcodiert in den konfigurator geschrieben.
''So gemacht, weil in der Stand-Alone-Version keine Kundentabellen mehr drin sind
'
''Zus|fffd|tzlich werden die Advantage+-Freigaben auf Falsch zur|fffd|ckgesetzt
'
''allgemein Kunde
'    'Kundennummer
'    Range("Name_KundeNr") = KundeNr
'
'    'Name + Anschrift
'    Range("Name_Kunde_Name") = Application.WorksheetFunction.VLookup(KundeNr, Worksheets(TKunden).Range("A:D"), 2, False)
'    Range("Name_Kunde_Strasse") = Application.WorksheetFunction.VLookup(KundeNr, Worksheets(TKunden).Range("A:D"), 3, False)
'    Range("Name_Kunde_PlzOrt") = Application.WorksheetFunction.VLookup(KundeNr, Worksheets(TKunden).Range("A:D"), 4, False)
'
''VMware
'    Range("Name_Kunde_Kondi_VMware_vSphere") = Application.WorksheetFunction.VLookup(CLng(lstKunden), Worksheets(TKundenKondiVMware).Range("A:I"), 2, False)
'    Range("Name_Kunde_Kondi_VMware_NvSphere") = Application.WorksheetFunction.VLookup(CLng(lstKunden), Worksheets(TKundenKondiVMware).Range("A:I"), 3, False)
'    Range("Name_Kunde_Kondi_VMware_SnS") = Application.WorksheetFunction.VLookup(CLng(lstKunden), Worksheets(TKundenKondiVMware).Range("A:I"), 4, False)
'    Range("Name_Kunde_Kondi_VMware_Essentials") = Application.WorksheetFunction.VLookup(CLng(lstKunden), Worksheets(TKundenKondiVMware).Range("A:I"), 5, False)
'    Range("Name_Kunde_Kondi_VMware_Workstation") = Application.WorksheetFunction.VLookup(CLng(lstKunden), Worksheets(TKundenKondiVMware).Range("A:I"), 6, False)
'    Range("Name_Kunde_Kondi_VMware_PSO") = Application.WorksheetFunction.VLookup(CLng(lstKunden), Worksheets(TKundenKondiVMware).Range("A:I"), 7, False)
'    Range("Name_Kunde_Kondi_VMware_Renewal") = Application.WorksheetFunction.VLookup(CLng(lstKunden), Worksheets(TKundenKondiVMware).Range("A:I"), 8, False)
'    Range("Name_Kunde_Kondi_VMware_Status") = Application.WorksheetFunction.VLookup(CLng(lstKunden), Worksheets(TKundenKondiVMware).Range("A:I"), 9, False)
'
'    Range("Name_OranNummer") = ""
'    cmdOranFreigabe.Visible = False
'
'    'wenn Status Professional, dann ORAN weg
'    If Range("Name_Kunde_Kondi_VMware_Status") = "Professional" Then
'        Range("Name_lblOranNummer") = ""
'        '!!!!!!!!!!!!!!!!1 ORAN-Nummer Zelle sperren!
'    Else
'        Range("Name_lblOranNummer") = "Oran-No.:"
'    End If
'
'    'ORAN-Freigaben
'    Call OranFreigabenRuecksetzen
'
'
''Veeam
'    Range("Name_Kunde_Kondi_Veeam_Veeam") = Application.WorksheetFunction.VLookup(CLng(lstKunden), Worksheets(TKundenKondiVeeam).Range("A:E"), 2, False)
'    Range("Name_Kunde_Kondi_Veeam_SnS") = Application.WorksheetFunction.VLookup(CLng(lstKunden), Worksheets(TKundenKondiVeeam).Range("A:E"), 3, False)
'    Range("Name_Kunde_Kondi_Veeam_Renewal") = Application.WorksheetFunction.VLookup(CLng(lstKunden), Worksheets(TKundenKondiVeeam).Range("A:E"), 4, False)
'    Range("Name_Kunde_Kondi_Veeam_Status") = Application.WorksheetFunction.VLookup(CLng(lstKunden), Worksheets(TKundenKondiVeeam).Range("A:E"), 5, False)
'
'End Sub

Private Sub UserForm_Initialize()

    If TransferKondis Then
        txtSuchfeld = "vmware"
        Call txtSuchfeld_Change
        txtSuchfeld.Visible = False
        lblFilter.Visible = False
        cmdHinweise.Visible = False
    Else
        txtSuchfeld.SetFocus
    End If
    
End Sub
Attribute VB_Name = "frmMuster"
Attribute VB_Base = "0{F68D67EC-D2E7-4AE4-9710-B2C7146CDCB0}{56204748-615F-434B-B368-61AC8A7D145D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub UserForm_Activate()

    imgAdressen.Visible = False
    imgCustomerGroup.Visible = False
    imgKonditionen.Visible = False
    imgDeltasStatus.Visible = False
    
    Select Case TransferMuster
        Case "KundenAdressen": imgAdressen.Visible = True
        Case "KundenKonditionen": imgCustomerGroup.Visible = True
        Case "Konditionen": imgKonditionen.Visible = True
        Case "DeltasStatus": imgDeltasStatus.Visible = True
    End Select

End Sub

Attribute VB_Name = "frmPfade"
Attribute VB_Base = "0{0D4C9E78-3845-4FED-A98F-F91256EED5F0}{6CB101BF-D7AE-4515-A19D-0C51A5497258}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit




Private Sub cmdPfadAendern_Click()
Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstPfade As Object     ' AS DAO.Recordset

Dim FDlg As FileDialog
Dim SelItem As Variant
Dim Pfad As String
Dim Zeile As Long

    If Not IsNull(lstPfade) Then
    
        'Access-DB |fffd|ffnen
        Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
        Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"))
        Set rstPfade = accDB.OpenRecordset("SELECT * FROM tblPfade WHERE PfadName=""" & lstPfade & """")   ' Verwendung gespeicherte Abfrage/Tabelle
    
        'Unterscheidung, welcher FileDialog gebraucht wird: Datei oder Verzeichnis
        If rstPfade!MitDatei Then
            Set FDlg = Application.FileDialog(msoFileDialogFilePicker)
            FDlg.Filters.Clear
            'FDlg.Filters.Add "Access-Datenbanken", "*.accdb"
        Else
            Set FDlg = Application.FileDialog(msoFileDialogFolderPicker)
        End If
    
        FDlg.AllowMultiSelect = False
    
        If FDlg.Show Then
            For Each SelItem In FDlg.SelectedItems
                Pfad = SelItem
            Next SelItem
       
            'in der Access-DB |fffd|ndern
            rstPfade.Edit
            rstPfade!Pfad = Pfad
            rstPfade.Update
       
            'in dem angezeigten Dialog |fffd|ndern
            lstPfade.List(lstPfade.ListIndex, 1) = Pfad
       
            'Pfade in Excel neu setzen
            Zeile = Application.Match(lstPfade, Worksheets(TUpdates).Range("Bereich_Pfade").Columns(1), 0)
            Worksheets(TUpdates).Range("Bereich_Pfade").Cells(Zeile, 2) = Pfad
          
        End If
    
        Set rstPfade = Nothing
        Set accDB = Nothing
        Set dbEngine = Nothing
    End If
End Sub

Private Sub cmdSchliessen_Click()

    Unload Me
End Sub



Private Sub lstPfade_DblClick(ByVal Cancel As MSForms.ReturnBoolean)

    Call cmdPfadAendern_Click
End Sub

Private Sub UserForm_Initialize()
Dim Zeile As Integer


    'erstellt den Inhalt der Listbox mit den vorhandenen Pfaden
    lstPfade.Clear

    Zeile = 1
    
    Do While Range("Bereich_Pfade").Cells(Zeile, 1) <> ""
        lstPfade.AddItem Range("Bereich_Pfade").Cells(Zeile, 1)
        lstPfade.List(lstPfade.ListCount - 1, 1) = Range("Bereich_Pfade").Cells(Zeile, 2)
    
        Zeile = Zeile + 1
    Loop

End Sub
Attribute VB_Name = "frmVeeamSelektierenNEU"
Attribute VB_Base = "0{23ABC8BA-99C5-48C6-859D-FA8BD81DED4C}{FAD59499-EFC6-4F42-8A56-B5456C09FE28}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit



Private Sub cboArt_Change()
    
    If Nz(cboArt, "") = "" Then
        cboProdukttype.Enabled = False
        cboProduktfamilie.Enabled = False
        cboEdition.Enabled = False
        
        cboArt = ""
        cboProdukttype = ""
        cboProduktfamilie = ""
        cboEdition = ""
    Else
        If cboArt = "Neulizenz" Then
            lblFilterHinweis.Caption = "ber|fffd|cksichtigt" & vbCrLf & _
                    "     Maintenance: " & Range("Name_Veeam_Maintenance") & vbCrLf & _
                    "     Kundenart: " & Range("Name_Veeam_Kundenart") & vbCrLf & _
                    "     Support: " & Range("Name_Veeam_Support")
        Else
            lblFilterHinweis.Caption = ""
        End If
    
        cboProdukttype.Enabled = True
        cboProduktfamilie.Enabled = True
        cboEdition.Enabled = True
    End If
    
    Call ErgebnislisteAufbauen
End Sub

Private Sub cboEdition_Change()
    Call ErgebnislisteAufbauen
End Sub

Private Sub cboProduktfamilie_Change()
    Call ErgebnislisteAufbauen
End Sub

Private Sub cboProdukttype_Change()
    Call ErgebnislisteAufbauen
End Sub

Private Sub cmdAbbrechen_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()

    Call OK(True)
End Sub

Private Sub cmdOKWeiter_Click()
    Call OK(False)
End Sub

Private Sub lstProdukte_Click()
'wenn ein Produkt angew|fffd|hlt wird, soll der gesamte Text in den Textboxen dargestellt werden

Dim Zeilen As Integer, Spalten As Integer
Dim SpalteDescription As Integer, SpalteComments As Integer

    txtProductSKU = lstProdukte.Column(0)
    
    'die anderen beiden werden direkt aus der Preisliste bef|fffd|llt, sonst werden nur die ersten 255 Zeichen angezeigt
    Zeilen = Worksheets("Preisliste Veeam").Cells(1, 1).End(xlDown).Row
    Spalten = Worksheets("Preisliste Veeam").Cells(1, 1).End(xlToRight).Column
    
    SpalteDescription = Application.WorksheetFunction.Match("ProductDescription", Sheets("Preisliste Veeam").Rows(1), 0)
    SpalteComments = Application.WorksheetFunction.Match("Comments", Sheets("Preisliste Veeam").Rows(1), 0)
    
    txtProductDescription = Application.WorksheetFunction.VLookup(lstProdukte.Column(0), Worksheets("Preisliste Veeam").Range(Worksheets("Preisliste Veeam").Cells(1, 1), Worksheets("Preisliste Veeam").Cells(Zeilen, Spalten)), SpalteDescription, False)
    txtComment = Application.WorksheetFunction.VLookup(lstProdukte.Column(0), Worksheets("Preisliste Veeam").Range(Worksheets("Preisliste Veeam").Cells(1, 1), Worksheets("Preisliste Veeam").Cells(Zeilen, Spalten)), SpalteComments, False)
End Sub

Private Sub txtFilter_Change()

    If txtFilter = "" Then
        cboArt.Enabled = True
        cboProdukttype.Enabled = True
        cboProduktfamilie.Enabled = True
        cboEdition.Enabled = True
    Else
        cboArt.Enabled = False
        cboProdukttype.Enabled = False
        cboProduktfamilie.Enabled = False
        cboEdition.Enabled = False
        
        cboArt = ""
        cboProdukttype = ""
        cboProduktfamilie = ""
        cboEdition = ""
        
        Call ProdukteFiltern
    End If
End Sub

Private Sub UserForm_Initialize()

'ComboBoxen f|fffd|llen
    cboArt.AddItem "Neulizenz"
    cboArt.AddItem "freie Artikelwahl"

    cboProdukttype.AddItem "Perpetual"
    cboProdukttype.AddItem "Subscription"


    cboProduktfamilie.AddItem "VBR"
    cboProduktfamilie.List(cboProduktfamilie.ListCount - 1, 1) = "Backup & Replication"
    cboProduktfamilie.AddItem "VAS"
    cboProduktfamilie.List(cboProduktfamilie.ListCount - 1, 1) = "Veeam Availability Suite"
    cboProduktfamilie.AddItem "ONE"
    cboProduktfamilie.List(cboProduktfamilie.ListCount - 1, 1) = "Veeam ONE"
    cboProduktfamilie.AddItem "ESS"
    cboProduktfamilie.List(cboProduktfamilie.ListCount - 1, 1) = "Backup Essentials"
    cboProduktfamilie.AddItem "BMP"
    cboProduktfamilie.List(cboProduktfamilie.ListCount - 1, 1) = "Package"
    cboProduktfamilie.AddItem "VMP"
    cboProduktfamilie.List(cboProduktfamilie.ListCount - 1, 1) = "Mgmt Pack"
    cboProduktfamilie.AddItem "VAG"
    cboProduktfamilie.List(cboProduktfamilie.ListCount - 1, 1) = "Veeam Agent"
    cboProduktfamilie.AddItem "VBO"
    cboProduktfamilie.List(cboProduktfamilie.ListCount - 1, 1) = "Backup for Office 365"
    cboProduktfamilie.AddItem "CEE"
    cboProduktfamilie.List(cboProduktfamilie.ListCount - 1, 1) = "Cloud connect for enterprise"
    cboProduktfamilie.AddItem "VPS"
    cboProduktfamilie.List(cboProduktfamilie.ListCount - 1, 1) = "Profession Services"
    cboProduktfamilie.AddItem "VAO"
    cboProduktfamilie.List(cboProduktfamilie.ListCount - 1, 1) = "Availability Orchestrator"
    cboProduktfamilie.AddItem "VAN"
    cboProduktfamilie.List(cboProduktfamilie.ListCount - 1, 1) = "Availability for Nuntainx AHV"
    cboProduktfamilie.AddItem "RNT"
    cboProduktfamilie.List(cboProduktfamilie.ListCount - 1, 1) = "Rental"

    cboEdition.AddItem "PLS"
    cboEdition.List(cboEdition.ListCount - 1, 1) = "Enterprise Plus"
    cboEdition.AddItem "ENT"
    cboEdition.List(cboEdition.ListCount - 1, 1) = "Enterprise"
    cboEdition.AddItem "STD"
    cboEdition.List(cboEdition.ListCount - 1, 1) = "Standard"
    cboEdition.AddItem "000"
    cboEdition.List(cboEdition.ListCount - 1, 1) = "ohne"
    cboEdition.AddItem "BCK"
    cboEdition.List(cboEdition.ListCount - 1, 1) = "Backup"
    cboEdition.AddItem "REP"
    cboEdition.List(cboEdition.ListCount - 1, 1) = "Replication"
    cboEdition.AddItem "365"
    cboEdition.List(cboEdition.ListCount - 1, 1) = "Office 365"
    cboEdition.AddItem "TAM"
    cboEdition.List(cboEdition.ListCount - 1, 1) = "Time and Materials"
    cboEdition.AddItem "TEM"
    cboEdition.List(cboEdition.ListCount - 1, 1) = "Travel & Expenses Fee"
    cboEdition.AddItem "AGR"
    cboEdition.List(cboEdition.ListCount - 1, 1) = "Agreement"
    cboEdition.AddItem "AIX"
    cboEdition.List(cboEdition.ListCount - 1, 1) = "IBM AIX"
    cboEdition.AddItem "SLR"
    cboEdition.List(cboEdition.ListCount - 1, 1) = "Oracle Solaris"

    cboProdukttype.Enabled = False
    cboProduktfamilie.Enabled = False
    cboEdition.Enabled = False

    lblFilterHinweis.Caption = ""
End Sub


Sub ErgebnislisteAufbauen()
'erstellt aus den gefilterten Selektionen die Artikelnummern und f|fffd|llt damit das Ergebnisfeld

Dim FilterString As String, FilterString2 As String
Dim Support As Byte

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstQry As Object     ' AS DAO.Recordset
Dim KdArray() As String
Dim Rs As Integer

    FilterString2 = ""  'der wird nur gebraucht, wenn es eine ODER-Verkn|fffd|pfung gibt. Die gibt es nur bei Perpetual + Production SNS und beschreibt die Support-Artikelnummern

    If Nz(cboArt, "") <> "" Then
    

    '1. Stelle: Kundenart
        If cboArt = "Neulizenz" Then
            FilterString = Application.WorksheetFunction.VLookup(Range("Name_Veeam_Kundenart"), Range("Bereich_Veeam_KundenartIndex"), 2, False)
        Else
            FilterString = "?"
        End If
        
    '2. Stelle
        FilterString = FilterString & "-"
        
    '3. bis 5. Stelle: Produktfamilie
        If IsNull(cboProduktfamilie) Then
            FilterString = FilterString & "???"
        Else
            FilterString = FilterString & cboProduktfamilie
        End If
        
    '6. bis 8. Stelle: Edition
        If IsNull(cboEdition) Then
            FilterString = FilterString & "???"
        Else
            FilterString = FilterString & cboEdition
        End If
        
    '9. Stelle
        FilterString = FilterString & "-"
        
    '10. Stelle: Produkttype
        Select Case cboProdukttype
            Case "Perpetual"
                FilterString = FilterString & "V"
            Case "Subscription"
                FilterString = FilterString & "0"
            Case Else
                FilterString = FilterString & "?"
        End Select
        
    '11. Stelle
        FilterString = FilterString & "?"
        
    '12. Stelle
        FilterString = FilterString & "-"
        
    '13. Stelle: Produkttype
        Select Case cboProdukttype
            Case "Perpetual"
                FilterString = FilterString & "P"
            Case "Subscription"
                FilterString = FilterString & "S"
            Case Else
                FilterString = FilterString & "?"
        End Select
        
    '---- bis hier sauber
        
    '14. Stelle: Subscription Type
        Support = Application.WorksheetFunction.VLookup(Range("Name_Veeam_Support"), Range("Bereich_Veeam_SupportIndex"), 2, False)
    
        Select Case cboProdukttype
            Case "Perpetual"        'bei Perpetual ist die 14. Stelle abh|fffd|ngig von der Maintenance
                If cboArt = "Neulizenz" Then
                    If Range("Name_Veeam_Maintenance") = "Basic SnS" Then
                        FilterString = FilterString & "0"
                    Else
                        FilterString = FilterString & "P"
                    End If
                Else
                    FilterString = FilterString & "?"
                End If
    
            Case "Subscription"
                If cboArt = "Neulizenz" Then
                    If Range("Name_Veeam_Maintenance") = "Basic SnS" Then
                        FilterString = FilterString & "-"   'diese Kombination kann es nicht geben (keine Basic bei Subscription), deshalb mit einem Zeichen belegt, das dort nie vorkommt
                    Else
                        FilterString = FilterString & "U"   '!!! hier geh|fffd|rt eigentlich die Verzweigung in "U" oder "A", die hier nicht umgesetzt ist
                    End If
                Else
                    FilterString = FilterString & "?"
                End If
            Case Else
                FilterString = FilterString & "?"
        End Select
        
    '15. bis 17. Stelle: Support Zeitraum
        Select Case cboProdukttype
            Case "Perpetual"
                If cboArt = "Neulizenz" Then
                    FilterString = FilterString & "000"     'bei Lizenzen immer 000
                Else
                    FilterString = FilterString & "???"
                End If
            
            Case "Subscription"
                If cboArt = "Neulizenz" Then
                    If Range("Name_Veeam_Maintenance") = "Basic SnS" Then       'die Kombi gibt es nicht, deshalb entwerten
                        FilterString = FilterString & "---"
                    Else
                        FilterString = FilterString & Support & "YP"
                    End If
                Else
                    FilterString = FilterString & "???"
                End If
               
            Case Else
                FilterString = FilterString & "???"
        End Select
        
    Else
        FilterString = "XXX" 'Filter deaktiviert, keine Ergebnisse
    End If
    
    'alle weiteren Stellen:
    If cboArt = "Neulizenz" Then
        'nur neue Lizenzen
        FilterString = FilterString & "-00"
        If FilterString2 <> "" Then FilterString2 = FilterString2 & "-00"
    Else
        'werden ignoriert
        FilterString = FilterString & "*"
        If FilterString2 <> "" Then FilterString2 = FilterString2 & "*"
    End If
    
'Hilfskonstruktion:
'Debug.Print FilterString & "     " & FilterString2
    
'die Ergebnisse auswerfen
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(ThisWorkbook.FullName, False, False, "Excel 12.0")
    
    Set rstQry = accDB.OpenRecordset("SELECT ProductSKU, ProductDescription " & _
                "FROM [Tagespreisliste Veeam$] " & _
                "WHERE ProductSKU LIKE """ & FilterString & """ " & _
                IIf(FilterString2 <> "", "OR ProductSKU LIKE """ & FilterString2 & """ ", "") & _
                "")
                '"ORDER BY Lizenzierungsart")
    

    lstProdukte.Clear       'l|fffd|scht alle Listeneintr|fffd|ge
           
'    Do While Not rstQry.EOF       'Schleife |fffd|ber alle Records
'        lstProdukte.AddItem rstQry.Fields(0).Value
'        lstProdukte.List(lstProdukte.ListCount - 1, 1) = Nz(rstQry.Fields(1).Value, "")
'        'If Not IsNull(rstQry.Fields(2).Value) Then lstProdukte.List(lstProdukte.ListCount - 1, 2) = rstQry.Fields(2).Value
'
'        rstQry.MoveNext
'    Loop
    
    
     'neue Version - viel schneller
    If Not rstQry.EOF Then
        rstQry.movelast
        rstQry.movefirst
        ReDim Preserve KdArray(rstQry.RecordCount - 1, 1)
        Rs = 0
    Else
        ReDim Preserve KdArray(0, 1)
    End If
    
    Do While Not rstQry.EOF       'Schleife |fffd|ber alle Records
        KdArray(Rs, 0) = rstQry.Fields(0).Value
        KdArray(Rs, 1) = Nz(rstQry.Fields(1).Value, "")
        

        Rs = Rs + 1
        rstQry.MoveNext
    Loop
    lstProdukte.List = KdArray
'ende neue Version
    
    
    
    
    
    'alles schlie|fffd|en
    rstQry.Close
    Set rstQry = Nothing
    Set dbEngine = Nothing
    accDB.Close
    Set accDB = Nothing
    
    'nachfolgende Controls r|fffd|cksetzen
    txtProductSKU = ""
    txtProductDescription = ""
    txtComment = ""
End Sub


Sub ProdukteFiltern()
Dim dbEngine As Object
Dim accDB As Object
Dim rstQry As Object
Dim SQLWhere As String
Dim SQLText As String
Dim KdArray() As String
Dim Rs As Integer

Dim Suchbegriffe As Variant, BegriffNr As Integer, Wort As String

    'Suchbegriffe aufdr|fffd|seln: die W|fffd|rter werden (Leerzeichen getrennt) separiert und dann in den SQL Where Teil zusammengesetzt
    Suchbegriffe = Split(txtFilter, " ")

    For BegriffNr = 0 To UBound(Suchbegriffe)
        Wort = LCase(Suchbegriffe(BegriffNr))
        SQLWhere = SQLWhere & IIf(SQLWhere = "", "", " AND ") & "(LCASE(ProductDescription) Like ""*" & Wort & "*"" OR LCASE(Comments) Like ""*" & Wort & "*"" OR LCASE(ProductSKU) Like ""*" & Wort & "*"")"
        'SQLWhere = SQLWhere & IIf(SQLWhere = "", "", " AND ") & "(LCASE(KdName) Like ""*" & Wort & "*"")"
    Next BegriffNr

'F|fffd|llt die Listbox mit den Produkten
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(ThisWorkbook.FullName, False, False, "Excel 12.0")
    
'Debug.Print SQLWhere
    
    SQLText = "SELECT ProductSKU, ProductDescription, Comments " & _
                "FROM [Tagespreisliste Veeam$] " & _
                IIf(SQLWhere = "", "", "WHERE " & SQLWhere & " ") & _
                "ORDER BY ProductSKU"
    
'Debug.Print SQLText
    
    Set rstQry = accDB.OpenRecordset(SQLText)
    
'    lstProdukte.Clear       'l|fffd|scht alle Listeneintr|fffd|ge
'
'    Do While Not rstQry.EOF       'Schleife |fffd|ber alle Records
'        lstProdukte.AddItem rstQry.Fields(0).Value
'        lstProdukte.List(lstProdukte.ListCount - 1, 1) = Nz(rstQry.Fields(1).Value, "")
'
'        rstQry.MoveNext
'    Loop
    
    'neue Version - viel schneller
    If Not rstQry.EOF Then
        rstQry.movelast
        rstQry.movefirst
        ReDim Preserve KdArray(rstQry.RecordCount - 1, 1)
        Rs = 0
    Else
        ReDim Preserve KdArray(0, 1)
    End If
    
    Do While Not rstQry.EOF       'Schleife |fffd|ber alle Records
        KdArray(Rs, 0) = rstQry.Fields(0).Value
        KdArray(Rs, 1) = Nz(rstQry.Fields(1).Value, "")
        

        Rs = Rs + 1
        rstQry.MoveNext
    Loop
    lstProdukte.List = KdArray
'ende neue Version
  
  
    'alles schlie|fffd|en
    rstQry.Close
    Set rstQry = Nothing
    Set dbEngine = Nothing
    accDB.Close
    Set accDB = Nothing
End Sub


Private Sub OK(MitSchliessen As Boolean)
Dim Zeile As Integer
Dim StartZeile As Integer
Dim ProductSKU As String
Dim Ende As Boolean
Dim ZeileMitSupport As Boolean
Dim Kommentar As String
    
    If IstKundenversion Then
        Worksheets(TKalkulator).Unprotect (KalkulatorPW)
    End If
    
    'Check, ob |fffd|berhaupt richtig eingegeben
    If txtProductSKU <> "" Then
        If txtAnzahl <> "" Then
        
            ProductSKU = txtProductSKU
        
'um die eventuelle automatische Aufstockung von Support zu generieren, wird hier eine Schleife eingebaut.
'mit "Ende" wird das Ende der Schleife gekennzeichnet, was der Normalfall ist. Falls ein zweiter Artikel dazu kommt, wird das nach dem Erstellen der
'ersten Zeile festgestellt, die Artikelnummer bestimmt und die Schleife noch mal durchgelaufen.
            
            Ende = True
            ZeileMitSupport = False
        
            StartZeile = Application.WorksheetFunction.Match("Start Veeam", Worksheets(TKalkulator).Columns(SpHersteller), 0)
                
            'Zeile bestimmen, in der der neue Artikel geschrieben werden soll
            Zeile = 1
            Do While Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpHersteller) <> ""
                Zeile = Zeile + 1
            Loop
                
            Do
        
                If Not Ende Then Zeile = Zeile + 1
            
                'Zeile einf|fffd|gen
                Worksheets(TKalkulator).Rows(StartZeile + Zeile).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromRightOrBelow
            
                'Positionsnummer
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpPos).FormulaR1C1 = "=IFERROR(R[-1]C+1,1)"
                
                'Spalte C: Anzahl vom Produkt
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpAnzahl).FormulaR1C1 = "=RC" & SpBasisAnzahl
                
                'Spalte D: Produktnummer
                Cells(StartZeile + Zeile, SpArtNr).FormulaR1C1 = "=RC" & SpVeeamArtNr
                
                'Spalte E: Beschreibung
                Cells(StartZeile + Zeile, SpBeschreibung).FormulaR1C1 = "=RC" & SpVeeamArtikelBeschreibung & " & IF(RC" & SpVeeamArtikelKommentar & "=0,"""",""  ||  ""&RC" & SpVeeamArtikelKommentar & ")"
                
                'Spalte G: Listenpreis
                Cells(StartZeile + Zeile, SpListenpreis).FormulaR1C1 = "=RC" & SpVeeamListpreis & "*Name_Umrechnung"
                
                'Spalte H: Rabatt
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpRabatt).FormulaR1C1 = "=RC" & SpRabattBerechnet
                
                'Spalte I : HEK
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpHek).FormulaR1C1 = "=ROUND(RC" & SpListenpreis & "*(1-RC" & SpRabatt & "),2)"
                
                'Spalte J: Gesamtpreis
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpTotal).FormulaR1C1 = "=IFERROR(RC" & SpHek & "*RC" & SpAnzahl & ",0)"
                
                'Kennzeichen, dass es um einen Veeam-Artikel handelt
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpHersteller) = "Veeam"
                
                'Spalte R: BasisAnzahl
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpBasisAnzahl) = CInt(txtAnzahl)
                
                If cboArt = "Neulizenz" Then
                    'Spalte Q: Fixeingabe
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamFixeingabe) = False
                
                    'Spalte S: Kundenart
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, 19).FormulaR1C1 = _
                            "=IF(RC" & SpVeeamLizenz & ",VLOOKUP(Name_Veeam_Kundenart,Bereich_Veeam_KundenartIndex,2,FALSE),""V"")"
                    
                    'Spalte T: Artikelkern
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamArtikelkern) = Mid(ProductSKU, 3, 9)
                    
                    'Spalte U: Product Type
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamProductType).FormulaR1C1 = "=IF(MID(RC20,8,1)=""V"",""P"",""S"")"
                    
                    'Spalte V: Maintenance
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamMaintenance).FormulaR1C1 = _
                            "=IF(MID(RC20,8,1)=""V"",IF(Name_Veeam_Maintenance=""Basic SnS"",""0"",IF(RC25,""P"",""0"")),""U"")"
                    
                    'Spalte W: Support
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamSupport).FormulaR1C1 = _
                            "=IF(AND(MID(RC20,8,1)=""V"",RC25),""000"",VLOOKUP(Name_Veeam_Support,Bereich_Veeam_SupportIndex,2,FALSE)-IF(RC21=""P"",1,0)&IF(AND(RC21=""P"",Name_Veeam_Maintenance=""Production SnS""),""P"",""Y"")&""P"")"
                    
                    'Spalte X: Suffix
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, 24).FormulaR1C1 = "'00"
                    
                    'Spalte Y: Lizenz
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamLizenz).FormulaR1C1 = Ende        'ist ein bissl tricky, h|fffd|ngt mit der Steuerung durch die Variable "Ende" zusammen, die die erste oder zweite Runde bestimmt
                    ZeileMitSupport = Not Ende
                    
                    'Spalte Z: Artikelnummer
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamArtNr).FormulaR1C1 = _
                            "=RC19&""-""&RC20&""-""&RC21&RC22&RC23&""-""&RC24"
                
                Else
                    'Spalte Q: Fixeingabe
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamFixeingabe) = True
                
                    'Spalte Z: Artikelnummer
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamArtNr) = ProductSKU
                End If
                
                
                
                'Spalte AA: Listpreis
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamListpreis).FormulaR1C1 = _
                        "=IFERROR(VLOOKUP(RC26,'Tagespreisliste Veeam'!C1:C6,6,FALSE),0)"
                
                
                'Spalte AB: Rabatt berechnet
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpRabattBerechnet).FormulaR1C1 = _
                        "=1-((1-RC" & SpVeeamRabatt & ")*(1-Name_Volumenrabatt))"
                'Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpRabattBerechnet).FormulaR1C1 = _
                        "=1-((1-VeeamRabatt(RC" & 26 & ", Name_SummeListenpreisVeeam,Name_Veeam_Projektmeldung,Name_Kunde_Kondi_Veeam_Veeam,Name_Kunde_Kondi_Veeam_SnS,Name_Kunde_Kondi_Veeam_Renewal,Name_Kunde_Kondi_Veeam_Status,RC" & SpVeeamDealReg & "))*(1-Name_Volumenrabatt))"
                
                
                'Spalte AC: Artikeltext
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamArtikelBeschreibung).FormulaR1C1 = _
                        "=IF(ISERROR(MATCH(RC" & SpVeeamArtNr & ",'Tagespreisliste Veeam'!C1:C1,0)),IF(RC25,""Artikel so nicht erh|fffd|ltlich"",""ausblenden""),VLOOKUP(RC26,'Tagespreisliste Veeam'!C1:C4,4,FALSE))"
                
                'Spalte AD: Artikel Kommentar
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamArtikelKommentar).FormulaR1C1 = _
                        "=IFERROR(INDEX('Tagespreisliste Veeam'!C5,RC" & SpPlZeile & "),"""")"
                                
                'Spalte AE: DealReg
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamDealReg).FormulaR1C1 = _
                        "=VLOOKUP(RC" & SpVeeamArtNr & ",'Tagespreisliste Veeam'!C1:C11,11,FALSE)"
                
                'Spalte AF: DealRegSumme, was alles f|fffd|r DealReg (ohne NetNew) gilt
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamDealRegSumme).FormulaR1C1 = _
                        "=IF(OR(RC" & SpVeeamLizenz & ",RC" & SpVeeamFixeingabe & "),RC" & SpVeeamDealReg & ",IF(AND(RC" & SpVeeamArtikelkern & "=R[-1]C" & SpVeeamArtikelkern & ",AND(RC" & SpVeeamProductType & "=""P"",RC" & SpVeeamMaintenance & "=""0"",OR(RC" & SpVeeamSupport & "=""1PP"",RC" & SpVeeamSupport & "=""2PP"",RC" & SpVeeamSupport & "=""3PP"",RC" & SpVeeamSupport & "=""4PP"",RC" & SpVeeamSupport & "=""1YP"",RC" & SpVeeamSupport & "=""2YP"",RC" & SpVeeamSupport & "=""3YP"",RC" & SpVeeamSupport & "=""4YP""))),R[-1]C" & SpVeeamDealReg & ",FALSE))"
                
                'Spalte AG: Disti Prozent
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamDistiProzent).FormulaR1C1 = _
                        "=VLOOKUP(RC" & SpVeeamArtNr & ",'Tagespreisliste Veeam'!C1:C11,10,FALSE)"
                
                'Spalte AH: Veeam Rabatt
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamRabatt).FormulaR1C1 = _
                        "=INDEX(R4C42:R7C43,MATCH(RC" & SpVeeamDistiProzent & ",R4C41:R7C41,0),IF(RC" & SpVeeamDealReg & ",2,1))"
                
                'Spalte AP: Discount
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpDiscount).FormulaR1C1 = _
                        "=VLOOKUP(RC" & SpVeeamArtNr & ",'Tagespreisliste Veeam'!C1:C10,10,FALSE)+if(RC" & SpVeeamDealReg & ", R17C41+R17C44,0)"
                                
                'Spalte AQ: TD Einzelpreis Einkauf
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpTDEkEinzel).FormulaR1C1 = _
                        "=VLOOKUP(RC" & SpVeeamArtNr & ",'Tagespreisliste Veeam'!C1:C10,7,FALSE)*(1-RC" & SpDiscount & ")"
                
                'Spalte AR: TD Einkauf
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpTDEinkauf).FormulaR1C1 = _
                        "=VLOOKUP(RC" & SpVeeamArtNr & ",'Tagespreisliste Veeam'!C1:C10,7,FALSE)*RC" & SpVeeamAnzahl & "*(1-RC" & SpDiscount & ")"
                
                'Spalte AS: Marge
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpMarge).FormulaR1C1 = _
                        "=(RC" & SpTotal & "-RC" & SpTDEinkauf & "*Name_AutoWechselkurs_USD_EUR)/RC" & SpTotal
                                                
                'Spalte AU: Zeile in Tagespreisliste
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpPlZeile).FormulaR1C1 = _
                        "=MATCH(RC" & SpVeeamArtNr & ",'Tagespreisliste Veeam'!C1,0)"
                
                
                
                
'                 'den Kommentar mit dem Comment einf|fffd|gen
'                Kommentar = Application.IfError(Application.VLookup(Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVeeamArtNr), Worksheets(TTagespreislisteVeeam).Range(Worksheets(TTagespreislisteVeeam).Cells(1, 1), Worksheets(TTagespreislisteVeeam).Cells(1, 5)).EntireColumn, 5, False), "")
'
'                If Kommentar = "0" Then
'                    Kommentar = " "
'                End If
'
'                Cells(StartZeile + Zeile, SpBeschreibung).AddComment Text:=Kommentar
'                Cells(StartZeile + Zeile, SpBeschreibung).Comment.Shape.Width = 400
                
                'Font auf Arial setzen (Standard w|fffd|re Corbel, aber das macht Probleme beim kopieren aus PDF)
                Rows(StartZeile + Zeile).Font.Name = "Arial"
                
                'Schrift der Beschreibung kleiner
                Cells(StartZeile + Zeile, SpBeschreibung).Font.Size = 10
                
                'den "L|fffd|schen"-Button simulieren
                With Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpLoeschen)
                    .FormulaR1C1 = "3"
                    .Font.Name = "Wingdings 2"
                    .Font.Size = 11
                    .HorizontalAlignment = xlCenter
                    .VerticalAlignment = xlCenter
                    .Interior.Color = FarbeCoolGray1
                    .Borders(xlEdgeLeft).Weight = xlThin
                    .Borders(xlEdgeTop).Weight = xlThin
                    .Borders(xlEdgeBottom).Weight = xlThin
                    .Borders(xlEdgeRight).Weight = xlThin
                End With
                
                'den "Leerzeile einf|fffd|gen"-Button simulieren
                 With Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpLeerzeile)
                    .FormulaR1C1 = "Leerzeile"
                    '.Font.Name = "Wingdings 2"
                    .Font.Size = 10
                    .HorizontalAlignment = xlCenter
                    .VerticalAlignment = xlCenter
                    .Interior.Color = FarbeCoolGray1
                    .Borders(xlEdgeLeft).Weight = xlThin
                    .Borders(xlEdgeTop).Weight = xlThin
                    .Borders(xlEdgeBottom).Weight = xlThin
                    .Borders(xlEdgeRight).Weight = xlThin
                End With
                
                'und jetzt feststellen, ob eine zweite Zeile n|fffd|tig ist.
                If Cells(StartZeile + Zeile, 21) = "P" And Cells(StartZeile + Zeile, 23) = "000" Then
                    Ende = False
                Else
                    Ende = True
                End If
                
                
                'die Beschreibungen k|fffd|nnen mit Zeilenumbruch sein. Um dann die Zeile hoch genug zu machen, kommt hier der AutoFit
                Rows(StartZeile + Zeile).EntireRow.AutoFit
                
                 'weil dadurch auch die Zeilenh|fffd|he zu gering werden k|fffd|nnte, kommt hier die evtl. Erh|fffd|hung
                If Rows(StartZeile + Zeile).RowHeight < 22.5 Then
                    Rows(StartZeile + Zeile).RowHeight = 22.5
                End If
                
            Loop Until Ende
                
                
            'wenn zwei Positionen erstellt wurden, sollen die miteinander verbunden werden.
            'Zwei Positionen entstehen, wenn der zweite ein Support ist und die Variable IstSupport auf TRUE steht
            If ZeileMitSupport Then
                Application.DisplayAlerts = False       'verhindert R|fffd|ckfragen |fffd|ber gel|fffd|schte / |fffd|berschriebene Tabellen / Dateien
                Range(Cells(StartZeile + Zeile - 1, SpLoeschen), Cells(StartZeile + Zeile, SpLoeschen)).MergeCells = True
                Range(Cells(StartZeile + Zeile - 1, SpLeerzeile), Cells(StartZeile + Zeile, SpLeerzeile)).MergeCells = True
                Application.DisplayAlerts = True
                
                Cells(StartZeile + Zeile - 1, SpLoeschen).AddComment Text:="Doppelklick l|fffd|scht die Positionen"
            Else
                Cells(StartZeile + Zeile, SpLoeschen).AddComment Text:="Doppelklick l|fffd|scht die Position"
            End If
                
            Call VeeamEinAusBlenden
            
            If MitSchliessen Then
                Unload Me
            End If
            
        Else
            MsgBox ("keine Anzahl eingegeben")
        End If
    Else
        MsgBox ("kein Produkt gew|fffd|hlt")
    End If
        
    If IstKundenversion Then
        Worksheets(TKalkulator).Protect (KalkulatorPW)
    End If

End Sub


Attribute VB_Name = "frmVmwareSelektieren"
Attribute VB_Base = "0{905E2E7F-AB3E-4F69-83BB-F2938BC74BBB}{B7B0D70C-CAF5-43BA-81B7-8E83A36F9CD9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub chkKundenart_Click()
    Call lstProductplatform_Click
End Sub

Private Sub cmdAbbrechen_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    Call OK(True)
End Sub

Private Sub cmdOKWeiter_Click()
    Call OK(False)
End Sub

Private Sub lstProductfamily_Click()
'erstellt den Inhalt der zweiten Listbox

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstQry As Object     ' AS DAO.Recordset

'F|fffd|llt die erste Listbox
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(ThisWorkbook.FullName, False, False, "Excel 12.0")
    Set rstQry = accDB.OpenRecordset("SELECT DISTINCT ProductPlatform " & _
                "FROM [Tagespreisliste VMware$] " & _
                "WHERE ProductFamily=""" & lstProductfamily & """ AND Typ<>""SnS"" " & _
                "ORDER BY ProductPlatform")
    
    lstProductplatform.Clear       'l|fffd|scht alle Listeneintr|fffd|ge
            
    Do While Not rstQry.EOF       'Schleife |fffd|ber alle Records
        lstProductplatform.AddItem rstQry.Fields(0).Value
        
        rstQry.MoveNext
    Loop
    
    'alles schlie|fffd|en
    rstQry.Close
    Set rstQry = Nothing
    Set dbEngine = Nothing
    accDB.Close
    Set accDB = Nothing
    
    'nachfolgende Controls r|fffd|cksetzen
    lstProdukte.Clear
    txtPartnumber = ""
    txtProduct = ""
    txtComment = ""
End Sub

Private Sub lstProductplatform_Click()
'erstellt den Inhalt der zweiten Listbox

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstQry As Object     ' AS DAO.Recordset
Dim QryStr As String


'F|fffd|llt die erste Listbox
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(ThisWorkbook.FullName, False, False, "Excel 12.0")
    
    QryStr = "SELECT PartNumber, Product " & _
                "FROM [Tagespreisliste VMware$] " & _
                "WHERE ProductFamily=""" & lstProductfamily & """ AND ProductPlatform=""" & lstProductplatform & """ " & _
                    "AND NOT( PartNumber LIKE ""*L1"") AND NOT( PartNumber LIKE ""*L2"") AND NOT( PartNumber LIKE ""*L3"") AND NOT( PartNumber LIKE ""*L4"") AND NOT( PartNumber LIKE ""*T?"") " & _
                    "AND NOT( Typ LIKE ""SnS"") " & _
                    IIf(chkKundenart, IIf(Range("Name_VMware_Kundenart") = "Academic", "AND (PartNumber LIKE ""*A"" OR PartNumber LIKE ""*A1S"" OR PartNumber LIKE ""*-APRO"") ", "AND (PartNumber LIKE ""*C"" OR PartNumber LIKE ""*C1S""  OR PartNumber LIKE ""*-PRO"" OR PartNumber LIKE ""*-C-L*"") "), "") & _
                "ORDER BY PartNumber"
                'Erkl|fffd|rung von den WHERE-Zeilen:
                '1. Zeile: Selektion von Product Family und Product Platform
                '2. Zeile: Schmei|fffd|t die Level 1 bis 4 raus (NICHT WIE *L?); und die Tier
                '3. Zeile: Schmei|fffd|t die Supports raus
                '4. Zeile: Schaut, ob die Checkbox mit der Kundenart aktiv ist. Wenn ja, je nach Kundenart das letzte Zeichen filtern A oder C oder A1S oder C1S
                
    Set rstQry = accDB.OpenRecordset(QryStr)
    
    
    lstProdukte.Clear       'l|fffd|scht alle Listeneintr|fffd|ge
            
    Do While Not rstQry.EOF       'Schleife |fffd|ber alle Records
        lstProdukte.AddItem rstQry.Fields(0).Value
        lstProdukte.List(lstProdukte.ListCount - 1, 1) = rstQry.Fields(1).Value
        
        rstQry.MoveNext
    Loop
    
    'alles schlie|fffd|en
    rstQry.Close
    Set rstQry = Nothing
    Set dbEngine = Nothing
    accDB.Close
    Set accDB = Nothing
    
    'nachfolgende Controls r|fffd|cksetzen
    txtPartnumber = ""
    txtProduct = ""
    txtComment = ""
End Sub

Private Sub lstProdukte_Click()
'wenn ein Produkt angew|fffd|hlt wird, soll der gesamte Text in den Textboxen dargestellt werden

Dim Zeilen As Integer, Spalten As Integer
Dim SpalteDescription As Integer, SpalteComments As Integer

    txtPartnumber = lstProdukte.Column(0)
    
    'die anderen beiden werden direkt aus der Preisliste bef|fffd|llt, sonst werden nur die ersten 255 Zeichen angezeigt
    Zeilen = Worksheets(TPreislisteVmware).Cells(1, 1).End(xlDown).Row
    Spalten = Worksheets(TPreislisteVmware).Cells(1, 1).End(xlToRight).Column
    
    SpalteDescription = Application.WorksheetFunction.Match("Product", Sheets(TPreislisteVmware).Rows(1), 0)
    SpalteComments = Application.WorksheetFunction.Match("Comments", Sheets(TPreislisteVmware).Rows(1), 0)
    
    txtProduct = Application.WorksheetFunction.VLookup(lstProdukte.Column(0), Worksheets(TPreislisteVmware).Range(Worksheets(TPreislisteVmware).Cells(1, 1), Worksheets(TPreislisteVmware).Cells(Zeilen, Spalten)), SpalteDescription, False)
    txtComment = Application.WorksheetFunction.VLookup(lstProdukte.Column(0), Worksheets(TPreislisteVmware).Range(Worksheets(TPreislisteVmware).Cells(1, 1), Worksheets(TPreislisteVmware).Cells(Zeilen, Spalten)), SpalteComments, False)
    
End Sub

Private Sub txtFilter_Change()

    If txtFilter = "" Then
        lstProductfamily.Enabled = True
        lstProductplatform.Enabled = True
        
        lstProductfamily.BackColor = FarbeWhite
        lstProductplatform.BackColor = FarbeWhite
    Else
        lstProductfamily.Enabled = False
        lstProductplatform.Enabled = False
        
        lstProductfamily = ""
        lstProductplatform.Clear
        
        lstProductfamily.BackColor = FarbeCoolGray1
        lstProductplatform.BackColor = FarbeCoolGray1
        
        Call ProdukteFiltern

    End If

End Sub

Private Sub UserForm_Initialize()
Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstQry As Object     ' AS DAO.Recordset

'setzt den Text der Checkbox
    chkKundenart.Caption = "nur " & Range("Name_VMware_Kundenart")
    chkKundenart.Value = True
    
''setzt die Optionen auf "alle"
'    optAlle.Value = True

'F|fffd|llt die erste Listbox
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(ThisWorkbook.FullName, False, False, "Excel 12.0")
    Set rstQry = accDB.OpenRecordset("SELECT DISTINCT ProductFamily FROM [Tagespreisliste VMware$] WHERE Typ<>""SnS"" ORDER BY ProductFamily DESC")
    
    lstProductfamily.Clear       'l|fffd|scht alle Listeneintr|fffd|ge
            
    Do While Not rstQry.EOF       'Schleife |fffd|ber alle Records
    
        If Not IsNull(rstQry.Fields(0).Value) Then lstProductfamily.AddItem rstQry.Fields(0).Value
        
        rstQry.MoveNext
    Loop
    
    'alles schlie|fffd|en
    rstQry.Close
    Set rstQry = Nothing
    Set dbEngine = Nothing
    accDB.Close
    Set accDB = Nothing
End Sub


Sub ProdukteFiltern()
Dim dbEngine As Object
Dim accDB As Object
Dim rstQry As Object
Dim SQLWhere As String
Dim SQLText As String
Dim KdArray() As String
Dim Rs As Integer

Dim Suchbegriffe As Variant, BegriffNr As Integer, Wort As String

    'Suchbegriffe aufdr|fffd|seln: die W|fffd|rter werden (Leerzeichen getrennt) separiert und dann in den SQL Where Teil zusammengesetzt
    Suchbegriffe = Split(txtFilter, " ")

    For BegriffNr = 0 To UBound(Suchbegriffe)
        Wort = LCase(Suchbegriffe(BegriffNr))
        SQLWhere = SQLWhere & IIf(SQLWhere = "", "", " AND ") & "(LCASE(Product) Like ""*" & Wort & "*"" OR LCASE(Comments) Like ""*" & Wort & "*"" OR LCASE(PartNumber) Like ""*" & Wort & "*"")"
        'SQLWhere = SQLWhere & IIf(SQLWhere = "", "", " AND ") & "(LCASE(KdName) Like ""*" & Wort & "*"")"
    Next BegriffNr

'F|fffd|llt die Listbox mit den Produkten
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(ThisWorkbook.FullName, False, False, "Excel 12.0")
    
    SQLText = "SELECT PartNumber, Product, Comments " & _
                "FROM [Tagespreisliste VMware$] " & _
                IIf(SQLWhere = "", "", "WHERE " & SQLWhere & " ") & _
                "ORDER BY PartNumber"
    
'Debug.Print SQLText
    
    Set rstQry = accDB.OpenRecordset(SQLText)
    
'    lstProdukte.Clear       'l|fffd|scht alle Listeneintr|fffd|ge
'
'    Do While Not rstQry.EOF       'Schleife |fffd|ber alle Records
'        lstProdukte.AddItem rstQry.Fields(0).Value
'        lstProdukte.List(lstProdukte.ListCount - 1, 1) = rstQry.Fields(1).Value
'
'        rstQry.MoveNext
'    Loop
    
    'neue Version - viel schneller
    If Not rstQry.EOF Then
        rstQry.movelast
        rstQry.movefirst
        ReDim Preserve KdArray(rstQry.RecordCount - 1, 1)
        Rs = 0
    Else
        ReDim Preserve KdArray(0, 1)
    End If
    
    Do While Not rstQry.EOF       'Schleife |fffd|ber alle Records
        KdArray(Rs, 0) = rstQry.Fields(0).Value
        KdArray(Rs, 1) = Nz(rstQry.Fields(1).Value, "")
        

        Rs = Rs + 1
        rstQry.MoveNext
    Loop
    lstProdukte.List = KdArray
'ende neue Version
    
    
    'alles schlie|fffd|en
    rstQry.Close
    Set rstQry = Nothing
    Set dbEngine = Nothing
    accDB.Close
    Set accDB = Nothing



End Sub


Private Sub OK(MitSchliessen As Boolean)

Dim Zeile As Integer
Dim StartZeile As Integer
Dim PartNumber As String
Dim Ende As Boolean
Dim IstSupport As Boolean
Dim ProductFamily As String
Dim Kommentar As String

    
    If IstKundenversion Then
        Worksheets(TKalkulator).Unprotect (KalkulatorPW)
    End If
    
    'Check, ob |fffd|berhaupt richtig eingegeben
    If txtPartnumber <> "" Then
        If txtAnzahl <> "" Then
        
            PartNumber = txtPartnumber
        
'um die eventuelle automatische Aufstockung von Support zu generieren, wird hier eine Schleife eingebaut.
'mit "Ende" wird das Ende der Schleife gekennzeichnet, was der Normalfall ist. Falls ein zweiter Artikel dazu kommt, wird das nach dem Erstellen der
'ersten Zeile festgestellt, die Artikelnummer bestimmt und die Schleife noch mal durchgelaufen.
            
            Ende = True
            IstSupport = False
        
            Application.ScreenUpdating = False
        
            Do
                'Application.Calculation = xlCalculationManual
        
                StartZeile = Application.WorksheetFunction.Match("Start VMware", Worksheets(TKalkulator).Columns(SpHersteller), 0)
                
                'Zeile bestimmen, in der der neue Artikel geschrieben werden soll
                Zeile = 1
                Do While Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpHersteller) <> ""
                    Zeile = Zeile + 1
                Loop
            
                'Zeile einf|fffd|gen
                Worksheets(TKalkulator).Rows(StartZeile + Zeile).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromRightOrBelow
            
                'Positionsnummer
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpPos).FormulaR1C1 = "=IFERROR(R[-1]C+1,1)"
                
                'den sichtbaren Teil mit Formeln versehen
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpAnzahl).FormulaR1C1 = "=RC" & SpResultierendeAnzahl
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpArtNr).FormulaR1C1 = "=RC" & SpResultierendePartNumber
                'Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpBeschreibung).FormulaR1C1 = "=IFERROR(VLOOKUP(RC" & SpArtNr & ",'Tagespreisliste VMware'!C1:C5,5,FALSE) & ""  |||  "" & VLOOKUP(RC" & SpArtNr & ",'Tagespreisliste VMware'!C1:C6,6,FALSE),""nicht verf|fffd|gbar"")"
                                
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpBeschreibung).FormulaR1C1 = "=RC" & SpVmwareArtikelBeschreibung & " & IF(RC" & SpVmwareArtikelKommentar & "=0,"""",""  ||  ""&RC" & SpVmwareArtikelKommentar & ")"
                
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVppPunkte).FormulaR1C1 = "=IFERROR(IF(Name_VMware_IstProfessional,"""",RC" & SpVppPunkteBerechnet & "),"""")"
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpListenpreis).FormulaR1C1 = "=IFERROR(RC" & SpResultierenderListenpreis & "*Name_Umrechnung,"""")"
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpRabatt).FormulaR1C1 = "=IFERROR(RC" & SpResultierenderRabatt & ","""")"
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpHek).FormulaR1C1 = "=IFERROR(ROUND(RC" & SpListenpreis & "*(1-RC" & SpRabatt & "),2),"""")"
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpTotal).FormulaR1C1 = "=IFERROR(RC" & SpHek & "*RC" & SpAnzahl & ","""")"
                
                'Kennzeichen, dass es um einen VMware-Artikel handelt       15
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpHersteller) = "VMware"
                
                'Basis-PartNumber           17
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpBasisPartNumber) = PartNumber
                
                'Basis Anzahl               18
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpBasisAnzahl) = CInt(txtAnzahl)
                
                'ist Support?               19
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpIstSupport) = IstSupport
                
                If IstSupport Then
                'Formel f|fffd|r die Support Part Number      23
                    'FormelString = "=LOOKUP(2,1/('Supportzuordnungen VMware'!R1C1:R10000C1&'Supportzuordnungen VMware'!R1C3:R10000C3&'Supportzuordnungen VMware'!R1C4:R10000C4=RC14&Name_Vmware_MaintenanceKurz&Name_VMware_SupportKurz),'Supportzuordnungen VMware'!C2)"
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpSupportPartNumber).FormulaR1C1 = _
                            "=LOOKUP(2,1/('Supportzuordnungen VMware'!R1C1:R10000C1&'Supportzuordnungen VMware'!R1C3:R10000C3&'Supportzuordnungen VMware'!R1C4:R10000C4=RC" & SpBasisPartNumber & "&Name_Vmware_MaintenanceKurz&Name_VMware_SupportKurz),'Supportzuordnungen VMware'!C2)"
                    
                    'Erkl|fffd|rung der Formel:
                    'Die Formel ist vom Ziel her ein "SVERWEIS" mit 3 Kriterien.
                    'Quelle: http://www.excelformeln.de/formeln.html?welcher=30
                    
                    
                Else
                    'Formel f|fffd|r den Artikel mit entsprechendem Level        20
                    'die Formel ist so kompliziert, weil der Level mal mit Strich "-L1" sein kann, und mal ohne "L1".
                    'der Anfang ist ein Wenn, ob |fffd|berhaupt ein Level ben|fffd|tigt wird. Dann wird einfach die Basisnummer genommen.
                    'Sonst kommt ein Index zur Anwendung: Das Argument liefert die Zeile, in der die richtige Artikelnummer zu finden ist (aber nicht unbedingt den richtigen Artikel, wegen mehrere, die durch den "g|fffd|ltig ab" und "g|fffd|ltig bis" selektiert werden m|fffd|ssen)
                    'Das Argument ist ein Vergleich, beide Versionen der m|fffd|glichen Schreibweisen zu erkennen. Die falsche wird einfach durch den Wennfehler erkannt und durch die richtige ersetzt.
                    'Es gibt aber auch welche, wo es gar keinen Level gibt. Daf|fffd|r gibt es noch einen Wennfehler, der in diesem Fall die BasisPartNumber auswirft.
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpArtikelLevel).FormulaR1C1 = _
                            "=IF(Name_VMware_Level=0,RC" & SpBasisPartNumber & ",IFERROR(INDEX('Tagespreisliste VMware'!C1,IFERROR(MATCH(RC" & SpBasisPartNumber & "&""L""&Name_VMware_Level,'Tagespreisliste VMware'!C1,0),IFERROR(MATCH(RC" & SpBasisPartNumber & "&""-L""&Name_VMware_Level,'Tagespreisliste VMware'!C1,0),MATCH(LEFT(RC" & SpBasisPartNumber & ",LEN(RC" & SpBasisPartNumber & ")-2) & RIGHT(RC" & SpBasisPartNumber & ",1)&""-L""&Name_VMware_Level,'Tagespreisliste VMware'!C1,0)))),RC" & SpBasisPartNumber & "))"
                
                    'Formel f|fffd|r VPP-geeignet            21
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpFuerVpp).FormulaR1C1 = "=IFERROR(VLOOKUP(RC" & SpBasisPartNumber & ",'" & TVppPoints & "'!C1:C3,3,FALSE),FALSE)"
                    
                    'Formel f|fffd|r den Artikel mit entsprechendem Tier        23
                    Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpArtikelTier).FormulaR1C1 = _
                            "=IF(Name_VMware_Tier=0,RC" & SpBasisPartNumber & ",IFERROR(INDEX('Tagespreisliste VMware'!C1,IFERROR(MATCH(RC" & SpBasisPartNumber & "&""T""&Name_VMware_Tier,'Tagespreisliste VMware'!C1,0),IFERROR(MATCH(RC" & SpBasisPartNumber & "&""-T""&Name_VMware_Tier,'Tagespreisliste VMware'!C1,0),MATCH(LEFT(RC" & SpBasisPartNumber & ",LEN(RC" & SpBasisPartNumber & ")-2) & RIGHT(RC" & SpBasisPartNumber & ",1)&""-T""&Name_VMware_Tier,'Tagespreisliste VMware'!C1,0)))),RC" & SpBasisPartNumber & "))"
                       
                    'die Formel ist grauslig ... sie soll die K|fffd|rzungen, die VMware leider ohne Ystem macht, abdecken:
                    '"Normalform":           xxx-UG-C-Tx
                    'K|fffd|rzung Version 1:    xxx-UG-CTx
                    'K|fffd|rzung Version 2:    xxx-UGC-Tx
                       
                End If
                
                
                'Formel f|fffd|r resultierende Part number   24
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpResultierendePartNumber).FormulaR1C1 = _
                        "=IFERROR(IF(RC" & SpIstSupport & ",RC" & SpSupportPartNumber & ",IF(RC" & SpFuerVpp & ", IF(Name_Vmware_Vpp, RC" & SpArtikelLevel & ", RC" & SpArtikelTier & ") ,RC" & SpBasisPartNumber & ")),""nicht verf|fffd|gbar"")"
                
                'Formel f|fffd|r resultierende Anzahl        25
                'f|fffd|r Support muss mit der Anzahl multipliziert werden, die bei den Dropdowns hinterlegt sind, um bei Mehrfachkauf (z.B. 5 Jahre support braucht 5 x 1 Jahre Support) zu ber|fffd|cksichtigen
                 Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpResultierendeAnzahl).FormulaR1C1 = _
                        "=IF(RC" & SpIstSupport & ",RC" & SpBasisAnzahl & "*VLOOKUP(Name_VMware_Support,Bereich_VMware_Support_alles,3,FALSE),RC" & SpBasisAnzahl & ")"
                
                 'Spalte 26: Artikeltext
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVmwareArtikelBeschreibung).FormulaR1C1 = _
                        "=IFERROR(INDEX('Tagespreisliste VMware'!C5,RC" & SpPlZeile & "),"""")"
                
                'Spalte 27: Artikel Kommentar
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVmwareArtikelKommentar).FormulaR1C1 = _
                        "=IFERROR(INDEX('Tagespreisliste VMware'!C6,RC" & SpPlZeile & "),"""")"
                                
                'Typ oder Rabattgruppe              28
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpTyp).FormulaR1C1 = _
                        "=VLOOKUP(RC" & SpResultierendePartNumber & ",'Tagespreisliste VMware'!C1:C12,10,FALSE)"
                                
                'Product Platform                   29
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpProductPlatform).FormulaR1C1 = _
                        "=IFERROR(VLOOKUP(RC" & SpResultierendePartNumber & ",'Tagespreisliste VMware'!C1:C12,3,FALSE),"""")"
                
                'Formel f|fffd|r Preis aus Liste         30
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpResultierenderListenpreis).FormulaR1C1 = _
                        "=IFERROR(VLOOKUP(RC" & SpResultierendePartNumber & ",'Tagespreisliste VMware'!C1:C12,7,FALSE),"""")"

                'Formel f|fffd|r USD-Preis aus Liste     31
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpResultierenderListenpreisUsd).FormulaR1C1 = _
                        "=IFERROR(VLOOKUP(RC" & SpResultierendePartNumber & ",'Tagespreisliste VMware'!C1:C12,8,FALSE),"""")"
                
                'Formel f|fffd|r Dealband1 aus Liste      32
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpResultierendesDealband1).FormulaR1C1 = "=VLOOKUP(RC" & SpResultierendePartNumber & ",'Tagespreisliste VMware'!C1:C12,11,FALSE)"
                
                'Formel f|fffd|r Dealband2 aus Liste      33
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpResultierendesDealband2).FormulaR1C1 = "=VLOOKUP(RC" & SpResultierendePartNumber & ",'Tagespreisliste VMware'!C1:C12,12,FALSE)"
                                   
                'VPP-Punkte bestimmen               34
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpVppPunkteBerechnet).FormulaR1C1 = _
                        "=IFERROR(VLOOKUP(IF(RC" & SpIstSupport & ",RC" & SpResultierendePartNumber & ",RC" & SpBasisPartNumber & "),'VMware VPP Punkte'!C1:C2,2,FALSE)*RC" & SpResultierendeAnzahl & ",0)"
                
                'Rabatt aus Advantage+              35
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpRabattAusAdvantage).FormulaR1C1 = _
                        "=VLOOKUP(RC" & SpProductPlatform & ",'VMware Advantage+'!C4:C10,7,FALSE)"
                                
                'Bedingungen f|fffd|r Advantage+ erf|fffd|llt?    36
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpAdvantageBedingungen).FormulaR1C1 = _
                        "=IF(AND(" & _
                                "OR(Name_VMware_AdvUSD>10000,AND(Name_VMware_AdvUSD1000>1000,OR(RC" & SpProductPlatform & "=""MOBILE WO ADV"",RC" & SpProductPlatform & "=""MOBILE WO STD"",RC" & SpProductPlatform & "=""AIRWATCH"",RC" & SpProductPlatform & "=""BUNDLES"",RC" & SpProductPlatform & "=""STANDALONE MDM"",RC" & SpProductPlatform & "=""RUGGED"",RC" & SpProductPlatform & "=""HOSTING"",RC" & SpProductPlatform & "=""AW EXPRESS"")))," & _
                                "RC" & SpIstSupport & "=FALSE," & _
                                "LOOKUP(2,1/(OFFSET('VMware Advantage+'!R1C9,0,0,MATCH(RC" & SpProductPlatform & ",'VMware Advantage+'!C4,0),1)<>""""),'VMware Advantage+'!C9)" & _
                                "),TRUE,FALSE)"
                'Erkl|fffd|rung der Formel:
                'erste Zeile: Gro|fffd|es WENN. Es gibt 3 verschiedene Bedingungen, die alle erf|fffd|llt sein m|fffd|ssen. diese sind in den n|fffd|chste Zeilen erkl|fffd|rt
                'zweite Zeile: 1. Bedingung: Die USD-Grenze muss |fffd|berschritten sein, entweder 10000 oder f|fffd|r manche Produktgruppen 1000
                'dritte zeile: 2. Bedingung: Es muss ein Support sein
                'vierte Zeile: 3. Bedingung: Die Produktgruppe muss per ORAN-Freigabe freigegeben sein.
                'f|fffd|nfte Zeile: Klammer zu vom gro|fffd|en Wenn, und Ergebnis DANN und SONST
                
                'Erkl|fffd|rung der 3. Bedingung:
                'ermittelt den letzten verwendeten Wert: =VERWEIS(2;1/(A1:A999<>"");A:A)      Quelle: http://www.excelformeln.de/formeln.html?welcher=48
                'Der Bereich wird mit der Zeile ersetzt, der als letzte Zeile die gefundene Product Platform hat:
                'aus A1:A999 wird BEREICH.VERSCHIEBEN(I1;0;0;78;1), wobei "78" hier nur ein Platzhalter ist. Er erzeugt einen Bereich mit H|fffd|he 78
                'den "78" wird |fffd|ber eine VERGLEICH("HORIZON ENT";D:D;0) ersetzt, wobei der Suchbegriff die Product Platform ist, der ein paar Spalten vorher ermittelt wurde
                
                'Rabatt laut Typ und Kundenkondi    37
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpRabattTyp).FormulaR1C1 = "=VLOOKUP(RC" & SpTyp & ",Bereich_Kunde_Kondi_VMware,2,FALSE)"
                
                'Zusatzrabatt aus Support           38
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpRabattSupport).FormulaR1C1 = "=IF(RC" & SpIstSupport & ",Name_VMware_RabattZusatzSupport,0)"

                'Zusatzrabatt aus DealReg           39
                 Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpRabattDealReg).FormulaR1C1 = _
                        "=IF(RC" & SpAdvantageBedingungen & ",RC" & SpRabattAusAdvantage & ",0)"
                    
                'gesamt Rabatt berechnen        40
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpResultierenderRabatt).FormulaR1C1 = _
                        "=(RC" & SpRabattTyp & "+RC" & SpRabattSupport & "+RC" & SpRabattDealReg & ")/(1-Name_Volumenrabatt)"
                        
                    'Erkl|fffd|rung der Formel:
                    'Erst mal eine Summe aus 3 Summanden.
                    'Danach wird die Summe mit dem Volumenrabatt verrechnet
                
                
                'Disount                        42
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpDiscount).FormulaR1C1 = _
                        "=VLOOKUP(RC" & SpResultierendePartNumber & ",'Tagespreisliste VMware'!C1:C12,9,FALSE)"
                
                'TD Einkauf Einzel                     43
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpTDEkEinzel).FormulaR1C1 = _
                        "=(RC" & SpResultierenderListenpreis & "-(RC" & SpResultierenderListenpreis & "*(RC" & SpDiscount & "+RC" & SpRabattSupport & "+RC" & SpRabattDealReg & ")))"
                                
                'TD Einkauf                     44
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpTDEinkauf).FormulaR1C1 = _
                        "=(RC" & SpResultierenderListenpreis & "-(RC" & SpResultierenderListenpreis & "*(RC" & SpDiscount & "+RC" & SpRabattSupport & "+RC" & SpRabattDealReg & ")))*RC" & SpResultierendeAnzahl
                
                'Marge                          45
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpMarge).FormulaR1C1 = _
                        "=(RC" & SpTotal & "-RC" & SpTDEinkauf & ")/RC" & SpTotal


                'Zeile in Tagespreisliste       47
                Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpPlZeile).FormulaR1C1 = _
                        "=MATCH(RC" & SpResultierendePartNumber & ",'Tagespreisliste VMware'!C1,0)"

                'Font auf Arial setzen (Standard w|fffd|re Corbel, aber das macht Probleme beim kopieren aus PDF)
                Rows(StartZeile + Zeile).Font.Name = "Arial"
                
                'Schrift der Beschreibung kleiner
                Cells(StartZeile + Zeile, SpBeschreibung).Font.Size = 10

                'den "L|fffd|schen"-Button simulieren
                With Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpLoeschen)
                    .FormulaR1C1 = "3"
                    .Font.Name = "Wingdings 2"
                    .Font.Size = 12
                    .HorizontalAlignment = xlCenter
                    .VerticalAlignment = xlCenter
                    .Interior.Color = FarbeCoolGray1
                    .Borders(xlEdgeLeft).Weight = xlThin
                    .Borders(xlEdgeTop).Weight = xlThin
                    .Borders(xlEdgeBottom).Weight = xlThin
                    .Borders(xlEdgeRight).Weight = xlThin
                End With
                
                
                'den "Leerzeile einf|fffd|gen"-Button simulieren
                 With Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpLeerzeile)
                    .FormulaR1C1 = "Leerzeile"
                    '.Font.Name = "Wingdings 2"
                    .Font.Size = 10
                    .HorizontalAlignment = xlCenter
                    .VerticalAlignment = xlCenter
                    .Interior.Color = FarbeCoolGray1
                    .Borders(xlEdgeLeft).Weight = xlThin
                    .Borders(xlEdgeTop).Weight = xlThin
                    .Borders(xlEdgeBottom).Weight = xlThin
                    .Borders(xlEdgeRight).Weight = xlThin
                End With
                
                
                
                'den Kommentar mit der Anzahl-|fffd|ndern einf|fffd|gen
                Cells(StartZeile + Zeile, SpAnzahl).AddComment Text:="zum |fffd|ndern der Anzahl doppelklicken"
                
'                'den Kommentar mit dem Comment einf|fffd|gen
'                Kommentar = ""
'                On Error Resume Next
'                Kommentar = Application.VLookup(Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpResultierendePartNumber), Worksheets(TPreislisteVmware).Range(Worksheets(TPreislisteVmware).Cells(1, 1), Worksheets(TPreislisteVmware).Cells(1, 6)).EntireColumn, 6, False)
'                On Error GoTo 0
'                '                    Debug.Print Application.VLookup(Worksheets(TKalkulator).Cells(StartZeile + Zeile, SpResultierendePartNumber), Worksheets(TPreislisteVmware).Range(Worksheets(TPreislisteVmware).Cells(1, 1), Worksheets(TPreislisteVmware).Cells(1, 6)).EntireColumn, 6, False)
'                Cells(StartZeile + Zeile, SpBeschreibung).AddComment Text:=Kommentar
'
'                Cells(StartZeile + Zeile, SpBeschreibung).Comment.Shape.Width = 400
'                Cells(StartZeile + Zeile, SpBeschreibung).Comment.Shape.Height = 120
                
                'und jetzt feststellen, ob eine zweite Zeile n|fffd|tig ist.
                If IstSupport Then
                    Ende = True
                Else
                
                    'Product Family
                    ProductFamily = Application.VLookup(PartNumber, Worksheets(TTagespreislisteVmware).Range(Worksheets(TTagespreislisteVmware).Cells(1, 1), Worksheets(TTagespreislisteVmware).Cells(1, 4)).EntireColumn, 4, False)
                
                    'die mit inclusive Support brauchen keine zus|fffd|tzliche Supportzeile, also vorher abfragen; genauso die FUSION und WORKSTATION; auch die Gutscheine, die "-CR-" enthalten
                    If Not (InStr(PartNumber, "12MT0") > 0 Or InStr(PartNumber, "24MT0") > 0 Or InStr(PartNumber, "36MT0") > 0 Or InStr(PartNumber, "12PT0") > 0 Or InStr(PartNumber, "24PT0") > 0 Or InStr(PartNumber, "36PT0") > 0 Or InStr(PartNumber, "TLSS") > 0 Or ProductFamily = "WORKSTATION" Or ProductFamily = "FUSION" Or InStr(PartNumber, "-CR-") > 0) Then
                        IstSupport = True
                        Ende = False
                    End If
                End If
                
                
                'die Beschreibungen k|fffd|nnen mit Zeilenumbruch sein. Um dann die Zeile hoch genug zu machen, kommt hier der AutoFit
                Rows(StartZeile + Zeile).EntireRow.AutoFit
                
                'weil dadurch auch die Zeilenh|fffd|he zu gering werden k|fffd|nnte, kommt hier die evtl. Erh|fffd|hung
                If Rows(StartZeile + Zeile).RowHeight < 22.5 Then
                    Rows(StartZeile + Zeile).RowHeight = 22.5
                End If
                
            Loop Until Ende
            
            'wenn zwei Positionen erstellt wurden, sollen die miteinander verbunden werden.
            'Zwei Positionen entstehen, wenn der zweite ein Support ist und die Variable IstSupport auf TRUE steht
            If IstSupport Then
                Application.DisplayAlerts = False       'verhindert R|fffd|ckfragen |fffd|ber gel|fffd|schte / |fffd|berschriebene Tabellen / Dateien
                Range(Cells(StartZeile + Zeile - 1, SpLoeschen), Cells(StartZeile + Zeile, SpLoeschen)).MergeCells = True
                Range(Cells(StartZeile + Zeile - 1, SpLeerzeile), Cells(StartZeile + Zeile, SpLeerzeile)).MergeCells = True
                Application.DisplayAlerts = True
                
                Cells(StartZeile + Zeile - 1, SpLoeschen).AddComment Text:="Doppelklick l|fffd|scht die Positionen"
            Else
                Cells(StartZeile + Zeile, SpLoeschen).AddComment Text:="Doppelklick l|fffd|scht die Position"
            End If
            
            Application.ScreenUpdating = True
                
            'selektiert die Positionsnummer, weil der Bildschirm sonst irgendwo hinten steht
            Worksheets(TKalkulator).Cells(StartZeile + Zeile, 2).Select
            
            If MitSchliessen Then
                Unload Me
            End If
            
        Else
            MsgBox ("keine Anzahl eingegeben")
        End If
    Else
        MsgBox ("kein Produkt gew|fffd|hlt")
    End If
        

    If IstKundenversion Then
        Worksheets(TKalkulator).Protect (KalkulatorPW)
    End If
End Sub




Attribute VB_Name = "mdlAllgemein"
Option Explicit


'Passwort f|fffd|r alles
Public Const KalkulatorPW As String = "RoEn"

'Tabellenbl|fffd|tter
Public Const TAdmin As String = "Admin"
Public Const TKalkulator As String = "Kalkulator"
Public Const TKunden As String = "Kunden"
Public Const TKundenKondiVeeam As String = "Kunden Kondi Veeam"
Public Const TKundenKondiVMware As String = "Kunden Kondi VMware"
Public Const TPreislisteVeeam As String = "Preisliste Veeam"
Public Const TPreislisteVmware As String = "Preisliste VMware"
Public Const TTagespreislisteVmware As String = "Tagespreisliste VMware"
Public Const TTagespreislisteVeeam As String = "Tagespreisliste Veeam"
Public Const TSupportzuordnungenVmware As String = "Supportzuordnungen VMware"
Public Const TVppPoints As String = "VMware VPP Punkte"
Public Const TUpdates As String = "Updates"
Public Const TAdvantagePlus As String = "VMware Advantage+"

'Spalten
'Kalkulator
Public Const SpPos As Integer = 2               'beide
Public Const SpAnzahl As Integer = 3            'beide
Public Const SpArtNr As Integer = 4             'beide
Public Const SpBeschreibung As Integer = 5      'beide
Public Const SpVppPunkte As Integer = 6         'beide
Public Const SpListenpreis As Integer = 7       'beide
Public Const SpRabatt As Integer = 8            'beide
Public Const SpHek As Integer = 9               'beide
Public Const SpTotal As Integer = 10            'beide

Public Const SpLoeschen As Integer = 12         'beide
Public Const SpLeerzeile As Integer = 14        'beide
Public Const SpHersteller As Integer = 15       'beide

Public Const SpVeeamFixeingabe As Integer = 17      'Veeam
Public Const SpVeeamAnzahl As Integer = 18          'Veeam

Public Const SpVeeamArtikelkern As Integer = 20     'Veeam
Public Const SpVeeamProductType As Integer = 21     'Veeam
Public Const SpVeeamMaintenance As Integer = 22     'Veeam
Public Const SpVeeamSupport As Integer = 23         'Veeam
Public Const SpVeeamSuffix As Integer = 24          'Veeam
Public Const SpVeeamLizenz As Integer = 25          'Veeam
Public Const SpVeeamArtNr As Integer = 26           'Veeam
Public Const SpVeeamListpreis As Integer = 27       'Veeam
Public Const SpRabattBerechnet As Integer = 28      'Veeam
Public Const SpVeeamArtikelBeschreibung As Integer = 29  'Veeam
Public Const SpVeeamArtikelKommentar As Integer = 30     'Veeam
Public Const SpVeeamDealReg As Integer = 31         'Veeam
Public Const SpVeeamDealRegSumme As Integer = 32    'Veeam
Public Const SpVeeamDistiProzent As Integer = 33    'Veeam
Public Const SpVeeamRabatt As Integer = 34          'Veeam


Public Const SpBasisPartNumber As Integer = 17  'VMware
Public Const SpBasisAnzahl As Integer = 18      'vMware
Public Const SpIstSupport As Integer = 19       'VMware
Public Const SpArtikelLevel As Integer = 20     'VMware
Public Const SpFuerVpp As Integer = 21          'VMware
Public Const SpSupportPartNumber As Integer = 22            'VMware
Public Const SpArtikelTier As Integer = 23                  'VMware
Public Const SpResultierendePartNumber As Integer = 24      'VMware
Public Const SpResultierendeAnzahl As Integer = 25          'VMware
Public Const SpVmwareArtikelBeschreibung As Integer = 26    'VMware
Public Const SpVmwareArtikelKommentar As Integer = 27       'VMware
Public Const SpTyp As Integer = 28                          'VMware
Public Const SpProductPlatform = 29                         'VMware
Public Const SpResultierenderListenpreis As Integer = 30    'VMware
Public Const SpResultierenderListenpreisUsd As Integer = 31 'VMware
Public Const SpResultierendesDealband1 As Integer = 32      'VMware
Public Const SpResultierendesDealband2 As Integer = 33      'VMware
Public Const SpVppPunkteBerechnet As Integer = 34           'VMware
Public Const SpRabattAusAdvantage As Integer = 35           'VMware
Public Const SpAdvantageBedingungen As Integer = 36         'VMware
Public Const SpRabattTyp As Integer = 37                    'VMware
Public Const SpRabattSupport As Integer = 38                'VMware
Public Const SpRabattDealReg As Integer = 39                'VMware
Public Const SpResultierenderRabatt As Integer = 40         'VMware

Public Const SpDiscount As Integer = 42                     'beide
Public Const SpTDEkEinzel As Integer = 43                   'beide
Public Const SpTDEinkauf As Integer = 44                    'beide
Public Const SpMarge As Integer = 45                        'beide

Public Const SpPlZeile As Integer = 47                      'beide

'Access-Konstanten nachgebaut
Public Const dbOpenSnapshot As Integer = 4
Public Const dbOpenDynaset As Integer = 2

'Prozente --> Typ
Public Const DistiLizenz As Double = 0.26
Public Const DistiIul As Double = 0.1
Public Const DistiSupport As Double = 0.15
Public Const DistiRenewal As Double = 0.09


Public Const ZeErsteZeileProdukt As Integer = 21


'Farben
'TechData
Public Const FarbeCoolGray1 As Long = 14080473  'rgb(217,217,214)
Public Const FarbeWhite As Long = 16777215      'rgb(255,255,255)
Public Const FarbePlanet As Long = 1366220      'rgb(204,216,20)        gr|fffd|n

'Veeam
Public Const FarbeVeeamGruenDunkel As Long = 5296274      'rgb(146,208,80)
Public Const FarbeVeeamGruenHell As Long = 11854022       'rgb(198,224,180)

'Public Const VMwareGruen As Long = 11858118         'RGB(198, 240, 180)


'Transfervariablen
Public TransferKundenNr As Long
Public VonAngebotSpeichern As Boolean
Public TransferKondis As Boolean
Public TransferMuster As String




Attribute VB_Name = "mdlClipboard"
'http://stackoverflow.com/questions/14738330/office-2013-excel-putinclipboard-is-different
Option Explicit
#If Win64 Then
    Declare PtrSafe Function GlobalUnlock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
    Declare PtrSafe Function GlobalLock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
    Declare PtrSafe Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As LongPtr) As LongPtr
    Declare PtrSafe Function CloseClipboard Lib "User32" () As Long
    Declare PtrSafe Function OpenClipboard Lib "User32" (ByVal hwnd As LongPtr) As LongPtr
    Declare PtrSafe Function EmptyClipboard Lib "User32" () As Long
    Declare PtrSafe Function lstrcpy Lib "kernel32" (ByVal lpString1 As Any, ByVal lpString2 As Any) As LongPtr
    Declare PtrSafe Function SetClipboardData Lib "User32" (ByVal wFormat As Long, ByVal hMem As LongPtr) As LongPtr
#Else
    Declare Function GlobalUnlock Lib "kernel32" (ByVal hMem As Long) As Long
    Declare Function GlobalLock Lib "kernel32" (ByVal hMem As Long) As Long
    Declare Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As Long) As Long
    Declare Function CloseClipboard Lib "User32" () As Long
    Declare Function OpenClipboard Lib "User32" (ByVal hwnd As Long) As Long
    Declare Function EmptyClipboard Lib "User32" () As Long
    Declare Function lstrcpy Lib "kernel32" (ByVal lpString1 As Any, ByVal lpString2 As Any) As Long
    Declare Function SetClipboardData Lib "User32" (ByVal wFormat As Long, ByVal hMem As Long) As Long
#End If

Public Const GHND = &H42
Public Const CF_TEXT = 1
Public Const MAXSIZE = 4096

Sub SetClipboard(MyString As String)
   #If Win64 Then
      Dim hGlobalMemory As LongPtr, lpGlobalMemory As LongPtr, hClipMemory As LongPtr
   #Else
      Dim hGlobalMemory As Long, lpGlobalMemory As Long, hClipMemory As Long
   #End If
   Dim x As Long
   ' Allocate moveable global memory.
   '-------------------------------------------
   hGlobalMemory = GlobalAlloc(GHND, Len(MyString) + 1)

   ' Lock the block to get a far pointer
   ' to this memory.
   lpGlobalMemory = GlobalLock(hGlobalMemory)

   ' Copy the string to this global memory.
   lpGlobalMemory = lstrcpy(lpGlobalMemory, MyString)

   ' Unlock the memory.
   If GlobalUnlock(hGlobalMemory) <> 0 Then
      MsgBox "Could not unlock memory location. Copy aborted. Please contact 14Fathoms."
      GoTo OutOfHere2
   End If

   ' Open the Clipboard to copy data to.
   If OpenClipboard(0&) = 0 Then
      MsgBox "Could not open the Clipboard. Copy aborted. Please contact 14Fathoms."
      Exit Sub
   End If

   ' Clear the Clipboard.
   x = EmptyClipboard()

   ' Copy the data to the Clipboard.
   hClipMemory = SetClipboardData(CF_TEXT, hGlobalMemory)

OutOfHere2:

   If CloseClipboard() = 0 Then
      MsgBox "Could not close Clipboard. Please contact 14Fathoms."
   End If

End Sub


Attribute VB_Name = "mdlFunktionen"
Option Explicit


'Function PfadAccessDB() As String
''liefert den Pfad der Access-Datenbank
'
'    If Environ("Username") = "Peter" Then       'f|fffd|r mich in der Entwicklungsumgebung
'        PfadAccessDB = ThisWorkbook.Path
'    Else
'        PfadAccessDB = TechDataPfadAccessDB
'    End If
'End Function


Function BearbeiterHolen() As Boolean
'kopiert den aktuellen Bearbeiter aus der Access-DB in den Kalkulator
'gleichzeitig Test, ob der |fffd|ffnende berechtigt ist

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstB As Object     ' AS DAO.Recordset
Dim Spalte As Integer
    
    'Set dbe = CreateObject("DAO.DBEngine.36")   ' Acc2000-2003
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    
    'als Sperre gegen falsche Datenbanken und zum abfangen kommt jetzt ...
    On Error GoTo Fehler
    
    Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"))
    
    Set rstB = accDB.OpenRecordset("SELECT * FROM tblAnsprechpartner WHERE WinLogin=""" & Environ("Username") & """")
    
    'das reicht, der Rest sollte richtig laufen
    On Error GoTo 0
    
    If rstB.EOF Then
        BearbeiterHolen = False
    Else
        BearbeiterHolen = True
        
        Range("Name_Bearbeiter_Name") = rstB!Vorname & " " & rstB!Nachname
        Range("Name_Bearbeiter_Telefon") = rstB!TelefonNr
        Range("Name_Bearbeiter_EMail") = rstB!Mail
        Range("Name_Bearbeiter_Kurzzeichen") = Nz(rstB!Kurzzeichen, "")
    End If
    
    
    rstB.Close
    Set rstB = Nothing
    
    Set dbEngine = Nothing
    
    'Access-DB schlie|fffd|en
    accDB.Close
    Set accDB = Nothing

Exit Function

Fehler:
    MsgBox ("keine g|fffd|ltige Datenbank!")
    BearbeiterHolen = False
    
End Function


Function IstKundenversion() As Boolean

    On Error Resume Next
    Debug.Print Worksheets(TAdmin).Index    'Zugriff auf das "Admin"-Blatt ...  wenn das nicht da ist, tritt ein Fehler auf. Es ist nicht da in der Kunden-Version
    If Err.Number = 0 Then
        IstKundenversion = False
    Else
        IstKundenversion = True
    End If

End Function



Function VeeamRabatt(SKU As String, SummeUVP As Double, Projektmeldung As String, RabVeeam As Double, RabSnS As Double, RabRen As Double, Status As String, DealReg As Boolean) As Double
'berechnet einen Rabatt abh|fffd|ngig von Produkt und Kundenkonditionen.
'bei Fehlern wird ein seeehr hoher Rabatt ausgegeben

Dim ZeileVeeam As Integer
Dim DistiProzent As Double

    ZeileVeeam = Application.WorksheetFunction.Match(SKU, Worksheets(TPreislisteVeeam).Columns(1), 0)
    DistiProzent = Worksheets(TPreislisteVeeam).Cells(ZeileVeeam, 10)
           
    Select Case DistiProzent
        Case DistiLizenz

            VeeamRabatt = RabVeeam
            
        Case DistiIul
            VeeamRabatt = 0
        Case DistiSupport
            VeeamRabatt = RabSnS
        Case DistiRenewal
            VeeamRabatt = RabRen
        Case Else
            VeeamRabatt = 999999999
    End Select


    If DealReg Then
        If SummeUVP > 6500 And Projektmeldung = "Projektmeldung Ja" Then
            Select Case Status
                Case "Platinum"
                    VeeamRabatt = VeeamRabatt + 0.12
                Case "Gold"
                    VeeamRabatt = VeeamRabatt + 0.1
                Case "Silver"
                    VeeamRabatt = VeeamRabatt + 0.06
            End Select
        End If
                
                    
        If SummeUVP > 26000 And Projektmeldung = "Projektmeldung Ja/NetNew" Then
            Select Case Status
                Case "Platinum"
                    VeeamRabatt = VeeamRabatt + 0.15
                Case "Gold"
                    VeeamRabatt = VeeamRabatt + 0.13
                Case "Silver"
                    VeeamRabatt = VeeamRabatt + 0.09
            End Select
        End If
    End If


End Function



Function DatumSQL(Datum As Variant) As String
    If IsDate(Datum) Then
        DatumSQL = Format(Datum, "\#mm\/dd\/yyyy\#")
    Else
        DatumSQL = ""
    End If
End Function


Function DatumZeitSQL(DatumZeit As Variant) As String
    If IsDate(DatumZeit) Then
        DatumZeitSQL = Format(DatumZeit, "\#mm\/dd\/yyyy hh:nn:ss\#")
    Else
        DatumZeitSQL = ""
    End If
End Function

Private Function MakroVorhanden(ModulName As String, Bezeichnung As String) As Boolean
    
    'MakroVorhanden = ThisWorkbook.VBProject.VBComponents(ModulName).CodeModule.ProcStartLine(Bezeichnung, vbext_pk_Proc) <> 0
End Function


Function TabelleExistiert(MeinWB As Workbook, MeineTabelle As String) As Boolean
TabelleExistiert = False
    On Error Resume Next
    TabelleExistiert = MeinWB.Worksheets(MeineTabelle).Index > 0
    On Error GoTo 0
End Function


Function VmwareSupportArtikel(PartNumber As String, Maintenance As String, Support As String) As String
'erstellt aus der Basisartikelnummer, Maintenance und Support die dazugeh|fffd|rige Support-Artikelnummer

'!!!!!!!!!!!!!!!!!! micht fertig und funktionsf|fffd|hig !!!!!!!!!!!!! durch Formel ersetzt !!!!!!!!!!!!!!!!!!!!

Dim MaintenanceKurz As String, SupportKurz As String
Dim AbfrageErgebnis As Variant

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database

    Select Case Maintenance
        Case "Basic SnS"
            MaintenanceKurz = "Basic"
        Case "Production SnS"
            MaintenanceKurz = "Production"
    End Select
    
    Select Case Support
        Case "2 Monate Support & Subscription"
            SupportKurz = "2M"
        Case "1 Jahr Support & Subscription"
            SupportKurz = "1Y"
        Case "2 Jahre Support & Subscription"
            SupportKurz = "1Y"
        Case "3 Jahre Support & Subscription"
            SupportKurz = "3Y"
        Case "4 Jahre Support & Subscription"
            SupportKurz = "1Y"
        Case "5 Jahre Support & Subscription"
            SupportKurz = "1Y"
    End Select

    'die richtige Anzahl und Rabatt bez|fffd|glich 2 Jahre, 4 Jahre und 5 Jahre muss separat bestimmt werden!
    
    
    'F|fffd|llt die erste Listbox
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(ThisWorkbook.FullName, False, False, "Excel 12.0")
    
    AbfrageErgebnis = accDB.DLookup("[SupportNumber]", "[Supportzuordnungen VMware$]", "PartNumber=""" & PartNumber & """ AND Maintenance=""" & MaintenanceKurz & """ AND Dauer=""" & SupportKurz & """")
    
    If IsNull(AbfrageErgebnis) Then
        VmwareSupportArtikel = ""
    Else
        VmwareSupportArtikel = AbfrageErgebnis
    End If
    
    'alles schlie|fffd|en
    Set dbEngine = Nothing
    accDB.Close
    Set accDB = Nothing
    
End Function



Function VmwarePreis2(PartNumber As String) As Double
'


Dim AbfrageErgebnis As Variant

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database

Dim rstQry As Object
Dim SQLString As String
    
    'F|fffd|llt die erste Listbox
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(ThisWorkbook.FullName, False, False, "Excel 12.0")
    
    'AbfrageErgebnis = accDB.DLookup("[ListPriceEur]", "[Preisliste VMware$]", "PartNumber=""" & PartNumber & """")
    
    SQLString = "SELECT ListPriceEur " & _
                    "FROM [Preisliste VMware$] " & _
                    "WHERE (PartNumber=""" & PartNumber & """) AND " & _
                    "((GueltigAb IS NULL AND GueltigBis IS NULL) OR (GueltigAb<" & DatumSQL(Date) & ") OR (GueltigBis>" & DatumSQL(Date) & "))"
'Debug.Print SQLString
    
    Set rstQry = accDB.OpenRecordset(SQLString)
    
'    Do While Not rstQry.EOF
'        Debug.Print rstQry.Fields(0)
'        rstQry.movenext
'    Loop
    
    AbfrageErgebnis = rstQry.Fields(0)
    
    If IsNull(AbfrageErgebnis) Then
        VmwarePreis2 = ""
    Else
        VmwarePreis2 = AbfrageErgebnis
    End If
    
    'alles schlie|fffd|en
    Set dbEngine = Nothing
    accDB.Close
    Set accDB = Nothing
    
End Function


Function VmwarePreis(PartNumber As String, Optional Art As String = "EUR") As Variant

Dim Zeile As Integer
Dim Ergebnis As Double
Dim EvStr As String
Dim Ende As Boolean
Dim SpalteArt As Integer
    
    '!!!!!!!!!1  Spalte hardcodiert    !!!!!!!!!!!!!!!!!!!!1
    
    Select Case Art
        Case "EUR"
            SpalteArt = 7
        Case "USD"
            SpalteArt = 8
        Case "Dealband1"
            SpalteArt = 13
        Case "Dealband2"
            SpalteArt = 14
    End Select
    
    Zeile = 2
    Ende = False
    Do
       
        If Worksheets(TPreislisteVmware).Cells(Zeile, 1) = PartNumber Then
            If ((Worksheets(TPreislisteVmware).Cells(Zeile, 9) = "" And Worksheets(TPreislisteVmware).Cells(Zeile, 10) = "") Or _
                    (Worksheets(TPreislisteVmware).Cells(Zeile, 9) = "" And Worksheets(TPreislisteVmware).Cells(Zeile, 10) >= Date) Or _
                    (Worksheets(TPreislisteVmware).Cells(Zeile, 9) <= Date And Worksheets(TPreislisteVmware).Cells(Zeile, 10) = "")) Then
                Ergebnis = Worksheets(TPreislisteVmware).Cells(Zeile, SpalteArt)
                Ende = True
            End If
        End If
        Zeile = Zeile + 1
    Loop Until Ende Or Worksheets(TPreislisteVmware).Cells(Zeile, 1) = ""
         
    If Ende Then
        VmwarePreis = Ergebnis
    Else
        VmwarePreis = "NA()"
    End If
End Function


Function KalkulatorVorbereiten() As Boolean
'ausgelagert, weil doppelt ben|fffd|tigt: hier beim Workbook_open, und auf tabelle Kalkulator 'Angebot bearbeiten'

'pr|fffd|ft erst, ob die Datenbanken |fffd|berhaupt verf|fffd|gbar sind, und wenn ja, alles neu aus dem BE holen und Tagespreislisten berechnen

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstB As Object     ' AS DAO.Recordset
Dim Spalte As Integer
Dim Zeile As Integer

Dim FDlg As FileDialog
Dim SelItem As Variant

Dim AccessDBPfad As String
Dim EsolDBPfad As String
Dim Weiter As Boolean


    Weiter = True
    KalkulatorVorbereiten = False
    
    'Werte aus der Access-DB |fffd|bernehmen

'ist die Access-DB zu finden?
    AccessDBPfad = Range("Name_PfadAccessDB")
    
    If Dir(AccessDBPfad) = "" Or AccessDBPfad = "" Then
        'ist nicht zu finden, |fffd|ber Auswahl holen

        MsgBox ("Die Access-Datenbank kann nicht gefunden werden. Bitte w|fffd|hle die 'Kalkulator_BE.accdb' manuell im folgenden Dialog aus.")

        Set FDlg = Application.FileDialog(msoFileDialogOpen)
        FDlg.AllowMultiSelect = False
        FDlg.Filters.Clear
        FDlg.Filters.Add "Access-Datenbanken", "*.accdb"
        FDlg.FilterIndex = 1
        FDlg.Title = "Kalkulator_BE ausw|fffd|hlen"
        If FDlg.Show Then
            For Each SelItem In FDlg.SelectedItems
                AccessDBPfad = SelItem
            Next SelItem
        Else
            MsgBox ("Die Datenbank wurde nicht ausgew|fffd|hlt. Der Kalkulator kann deshalb den Anwender nicht |fffd|berpf|fffd|fen und beendet deswegen!")
            Weiter = False
        End If
    End If

    Range("Name_PfadAccessDB") = AccessDBPfad


'ist die ESol-DB zu finden?
    EsolDBPfad = Range("Name_PfadEsolDB")
    
    If Dir(EsolDBPfad) = "" Or EsolDBPfad = "" Then
        'ist nicht zu finden, |fffd|ber Auswahl holen

        MsgBox ("Die Access-Datenbank kann nicht gefunden werden. Bitte w|fffd|hle die 'Esol.mdb' manuell im folgenden Dialog aus.")

        Set FDlg = Application.FileDialog(msoFileDialogOpen)
        FDlg.AllowMultiSelect = False
        FDlg.Filters.Clear
        FDlg.Filters.Add "Access-Datenbanken", "*.accdb"
        FDlg.Filters.Add "Access-Datenbanken", "*.mdb"
        FDlg.FilterIndex = 1
        FDlg.Title = "ESol ausw|fffd|hlen"
        If FDlg.Show Then
            For Each SelItem In FDlg.SelectedItems
                EsolDBPfad = SelItem
            Next SelItem
        Else
            MsgBox ("Die Datenbank wurde nicht ausgew|fffd|hlt. Der Kalkulator kann eventuelle Angebote nicht speichern und beendet deswegen!")
            Weiter = False
        End If
    End If

    Range("Name_PfadEsolDB") = EsolDBPfad

'den Bearbeiter checken
    If BearbeiterHolen Then

        If Weiter Then
        
            Application.ScreenUpdating = False
            
            'alles r|fffd|cksetzen
            Call ResetKalkulator
        
            'Set dbe = CreateObject("DAO.DBEngine.36")   ' Acc2000-2003
            Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
            Set accDB = dbEngine.OpenDatabase(AccessDBPfad)     '<-- wenn da was falsches drin ist, kommt ein Fehler!
    
            Set rstB = accDB.OpenRecordset("tblUpdates", 2)
    
        'VMware
            Application.StatusBar = "Updates der VMware in der Access-DB holen"
            'EUR-Preisliste
            rstB.FindFirst "Tabelle=""VMware Preisliste EUR"""
            Zeile = Application.WorksheetFunction.Match("VMware Preisliste EUR nach Access", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 2) = rstB!Dateiname
            Worksheets(TUpdates).Cells(Zeile, 3) = rstB!Wann
            Worksheets(TUpdates).Cells(Zeile, 4) = rstB!VonWem
    
            'USD-Preisliste
            rstB.FindFirst "Tabelle=""VMware Preisliste USD"""
            Zeile = Application.WorksheetFunction.Match("VMware Preisliste USD nach Access", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 2) = rstB!Dateiname
            Worksheets(TUpdates).Cells(Zeile, 3) = rstB!Wann
            Worksheets(TUpdates).Cells(Zeile, 4) = rstB!VonWem
    
            'VPP-Punkte
            Call VppPunkteVmwareNachKalkulatorKopieren
            rstB.FindFirst "Tabelle=""VMware VPP Punkte"""
            Zeile = Application.WorksheetFunction.Match("VMware VPP Punkte nach Access", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 2) = rstB!Dateiname
            Worksheets(TUpdates).Cells(Zeile, 3) = rstB!Wann
            Worksheets(TUpdates).Cells(Zeile, 4) = rstB!VonWem
    
            'Support-Zuordnungen
            rstB.FindFirst "Tabelle=""VMware Support-Zuordnung"""
            Call SupportzuordnungenVmwareNachKalkulatorKopieren
            Zeile = Application.WorksheetFunction.Match("VMware Support-Zuordnung nach Access", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 2) = rstB!Dateiname
            Worksheets(TUpdates).Cells(Zeile, 3) = rstB!Wann
            Worksheets(TUpdates).Cells(Zeile, 4) = rstB!VonWem
    
            'Preisliste von Access nach Excel |fffd|bernehmen
            Application.StatusBar = "Preisliste VMware nach Excel"
            Call PreislisteVmwareNachKalkulatorKopieren
            Zeile = Application.WorksheetFunction.Match("VMware Preisliste nach Excel", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 3) = Now()
            Worksheets(TUpdates).Cells(Zeile, 4) = Environ("Username")
    
            'VPP-Punkte nach Excel |fffd|bernehmen
            Application.StatusBar = "VPP-Punkte VMware nach Excel"
            Call PreislisteVmwareNachKalkulatorKopieren
            Zeile = Application.WorksheetFunction.Match("VMware VPP-Punkte nach Excel", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 3) = Now()
            Worksheets(TUpdates).Cells(Zeile, 4) = Environ("Username")
                        
            'Tagespreisliste VMware
            Application.StatusBar = "Tagespreisliste VMware erstellen"
            Call VMwareTagespreislisteErstellen
            Zeile = Application.WorksheetFunction.Match("Tagespreisliste VMware erstellen", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 3) = Now()
            Worksheets(TUpdates).Cells(Zeile, 4) = Environ("Username")

            'Support-Zuordnungen von Access nach Kalkulator
            Application.StatusBar = "Supportzuordnungen VMware erstellen"
            Call AccessDatenNachExcelKopieren("tblVmwareSupport", TSupportzuordnungenVmware)
            Zeile = Application.WorksheetFunction.Match("Vmware Supportzuordnungen nach Excel", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 3) = Now()
            Worksheets(TUpdates).Cells(Zeile, 4) = Environ("Username")
            
            'AdvantagePlus
            Call CheckAufAdvantagePlus
            Call AdvantagePlusErstellen
            
        'Veeam
            Application.StatusBar = "Updates der Veeam in der Access-DB holen"
            'EUR-Preisliste
            rstB.FindFirst "Tabelle=""Veeam Preisliste EUR"""
            Zeile = Application.WorksheetFunction.Match("Veeam Preisliste EUR nach Access", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 2) = rstB!Dateiname
            Worksheets(TUpdates).Cells(Zeile, 3) = rstB!Wann
            Worksheets(TUpdates).Cells(Zeile, 4) = rstB!VonWem
    
            'USD-Preisliste
            rstB.FindFirst "Tabelle=""Veeam Preisliste USD"""
            Zeile = Application.WorksheetFunction.Match("Veeam Preisliste USD nach Access", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 2) = rstB!Dateiname
            Worksheets(TUpdates).Cells(Zeile, 3) = rstB!Wann
            Worksheets(TUpdates).Cells(Zeile, 4) = rstB!VonWem
    
            'Preisliste von Access nach Excel |fffd|bernehmen
            Application.StatusBar = "Preisliste Veeam nach Excel"
            Call PreislisteVeeamNachKalkulatorKopieren
            Zeile = Application.WorksheetFunction.Match("Veeam Preisliste nach Excel", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 3) = Now()
            Worksheets(TUpdates).Cells(Zeile, 4) = Environ("Username")
    
             'Tagespreisliste Veeam
            Application.StatusBar = "Tagespreisliste Veeam erstellen"
            Call VeeamTagespreislisteErstellen
            Zeile = Application.WorksheetFunction.Match("Tagespreisliste Veeam erstellen", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 3) = Now()
            Worksheets(TUpdates).Cells(Zeile, 4) = Environ("Username")
    
        'Kunden
            'Kunden kopieren
            Application.StatusBar = "Kunden nach Excel"
            Call KundenNachKalkulatorKopieren
            Zeile = Application.WorksheetFunction.Match("Kunden nach Excel", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 3) = Now()
            Worksheets(TUpdates).Cells(Zeile, 4) = Environ("Username")
    
            'Kunden Kondi VMware
            Application.StatusBar = "Kunden Kondi VMware nach Excel"
            Call KundenKondiVMwareNachKalkulatorKopieren
            Zeile = Application.WorksheetFunction.Match("Kunden Kondi VMware nach Excel", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 3) = Now()
            Worksheets(TUpdates).Cells(Zeile, 4) = Environ("Username")
    
            'Kunden Kondi Veeam
            Application.StatusBar = "Kunden Kondi Veeam nach Excel"
            Call KundenKondiVeeamNachKalkulatorKopieren
            Zeile = Application.WorksheetFunction.Match("Kunden Kondi Veeam nach Excel", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 3) = Now()
            Worksheets(TUpdates).Cells(Zeile, 4) = Environ("Username")
        
        'Kunden letzte Aktualisierungen
            rstB.FindFirst "Tabelle=""Kunden"""
            Worksheets(TAdmin).Range("Name_KundenEinlesen_Datei") = "Datei: " & rstB!Dateiname
            Worksheets(TAdmin).Range("Name_KundenEinlesen_Datum") = "am: " & Format(rstB!Wann, "dd.mm.yyyy hh:nn")
            
            rstB.FindFirst "Tabelle=""KundenKonditionen"""
            Worksheets(TAdmin).Range("Name_KundenKonditionenEinlesen_Datei") = "Datei: " & rstB!Dateiname
            Worksheets(TAdmin).Range("Name_KundenKonditionenEinlesen_Datum") = "am: " & Format(rstB!Wann, "dd.mm.yyyy hh:nn")
            
            rstB.FindFirst "Tabelle=""Konditionen"""
            Worksheets(TAdmin).Range("Name_KonditionenEinlesen_Datei") = "Datei: " & rstB!Dateiname
            Worksheets(TAdmin).Range("Name_KonditionenEinlesen_Datum") = "am: " & Format(rstB!Wann, "dd.mm.yyyy hh:nn")
            
        
            rstB.Close
            Set rstB = Nothing
    
            Set dbEngine = Nothing
    
            'Access-DB schlie|fffd|en
            accDB.Close
            Set accDB = Nothing
            
            Application.ScreenUpdating = True
            KalkulatorVorbereiten = True
        Else
            MsgBox ("Die Datenbanken sind nicht erreichbar. Der Konfigurator wird deshalb geschlossen.")
            ThisWorkbook.Close savechanges:=False
            Exit Function
            
        End If
    Else
        MsgBox ("Der Bearbeiter ist nicht bekannt. Der Konfigurator wird deshalb geschlossen.")
        ThisWorkbook.Close savechanges:=False
        Exit Function
    End If
    
End Function


Function SonderzeichenRaus(TextMit As String) As String

    SonderzeichenRaus = Trim(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(TextMit, "/", ""), "\", ""), ".", ""), "*", ""), "?", ""), "[", ""), "]", ""), "&", ""))
End Function

Attribute VB_Name = "mdlKunden"
Option Explicit


Sub KundenNachKalkulatorKopieren()
'kopiert die Daten der Access-DB in den Kalkulator

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstKd As Object     ' AS DAO.Recordset
Dim Spalte As Integer
    
    'erst mal alles l|fffd|schen, was drin ist
    Worksheets(TKunden).Cells.ClearContents
    

    'Set dbe = CreateObject("DAO.DBEngine.36")   ' Acc2000-2003
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"))
    
     Set rstKd = accDB.OpenRecordset("SELECT * FROM tblKunden ORDER BY KdName")   ' Verwendung gespeicherte Abfrage/Tabelle
    
    ' Feldnamen |fffd|bernehmen
    For Spalte = 0 To rstKd.Fields.Count - 1
       ' f|fffd|r ActiveSheet kann man auch etwas Intelligenteres einsetzen
       Worksheets(TKunden).Cells(1, Spalte + 1) = rstKd.Fields(Spalte).Name
    Next Spalte
    
    ' Inhalt (gesamtes Recordset) |fffd|bernehmen
    Worksheets(TKunden).Cells(2, 1).CopyFromRecordset rstKd
    
    rstKd.Close
    Set rstKd = Nothing
    
    Set dbEngine = Nothing
    
    'Access-DB schlie|fffd|en
    accDB.Close
    Set accDB = Nothing
End Sub


Sub KundenKondiVeeamNachKalkulatorKopieren()
'kopiert die Daten der Access-DB in den Kalkulator

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstKd As Object     ' AS DAO.Recordset
Dim Spalte As Integer
    
    'erst mal alles l|fffd|schen, was drin ist
    Worksheets(TKundenKondiVeeam).Cells.ClearContents
    

    'Set dbe = CreateObject("DAO.DBEngine.36")   ' Acc2000-2003
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"))
    
     Set rstKd = accDB.OpenRecordset("tblKondiVeeam")   ' Verwendung gespeicherte Abfrage/Tabelle
    
    ' Feldnamen |fffd|bernehmen
    For Spalte = 0 To rstKd.Fields.Count - 1
       ' f|fffd|r ActiveSheet kann man auch etwas Intelligenteres einsetzen
       Worksheets(TKundenKondiVeeam).Cells(1, Spalte + 1) = rstKd.Fields(Spalte).Name
    Next Spalte
    
    ' Inhalt (gesamtes Recordset) |fffd|bernehmen
    Worksheets(TKundenKondiVeeam).Cells(2, 1).CopyFromRecordset rstKd
    
    rstKd.Close
    Set rstKd = Nothing
    
    Set dbEngine = Nothing
    
    'Access-DB schlie|fffd|en
    accDB.Close
    Set accDB = Nothing
End Sub


Sub KundenKondiVMwareNachKalkulatorKopieren()
'kopiert die Daten der Access-DB in den Kalkulator

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstKd As Object     ' AS DAO.Recordset
Dim Spalte As Integer
    
    'erst mal alles l|fffd|schen, was drin ist
    Worksheets(TKundenKondiVMware).Cells.ClearContents
    

    'Set dbe = CreateObject("DAO.DBEngine.36")   ' Acc2000-2003
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"))
    
     Set rstKd = accDB.OpenRecordset("tblKondiVMware")   ' Verwendung gespeicherte Abfrage/Tabelle
    
    ' Feldnamen |fffd|bernehmen
    For Spalte = 0 To rstKd.Fields.Count - 1
       ' f|fffd|r ActiveSheet kann man auch etwas Intelligenteres einsetzen
       Worksheets(TKundenKondiVMware).Cells(1, Spalte + 1) = rstKd.Fields(Spalte).Name
    Next Spalte
    
    ' Inhalt (gesamtes Recordset) |fffd|bernehmen
    Worksheets(TKundenKondiVMware).Cells(2, 1).CopyFromRecordset rstKd
    
    rstKd.Close
    Set rstKd = Nothing
    
    Set dbEngine = Nothing
    
    'Access-DB schlie|fffd|en
    accDB.Close
    Set accDB = Nothing
    
    Set dbEngine = Nothing
End Sub


'neue Logik f|fffd|r die Kunden:
'Es werden drei Listen ben|fffd|tigt:
'1) Kundenliste (alle, ohne Groupkey)
'2) Kundenliste, besser gesagt nur Zuordnung Kundennummer - Groupkey
'3) Konditionen (mit Groupkey)


Sub KundenEinlesen()
'bearbeitet Liste 1

Dim FDlg As FileDialog

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstKunden As Object ' AS DAO.Recordset

Dim wbKunden As Workbook
Dim SpKundenNr As Integer, SpName As Integer, SpGroupKey As Integer, SpStrasse As Integer, SpPLZ As Integer, SpOrt As Integer, SpLand As Integer

Dim Zeile As Integer
Dim AnzahlKunden As Long

    Set FDlg = Application.FileDialog(msoFileDialogOpen)
    FDlg.AllowMultiSelect = False
    FDlg.Filters.Add "Excel-Dateien", "*.xls; *.xlsx"
    FDlg.Title = "Kundenliste ausw|fffd|hlen"
    If FDlg.Show Then
        
        'Set wbKalkulator = ThisWorkbook
        
        'Access |fffd|ffnen
        Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
        Set accDB = dbEngine.OpenDatabase(ThisWorkbook.Worksheets(TUpdates).Range("Name_PfadAccessDB"))
        
        Set rstKunden = accDB.OpenRecordset("SELECT * FROM tblKunden")
        
        'Excel-Datei |fffd|ffnen
        Set wbKunden = Workbooks.Open(FDlg.SelectedItems(1))
        
        'Spalten finden
        SpKundenNr = WorksheetFunction.Match("KdNr", wbKunden.ActiveSheet.Rows(1), 0)
        SpName = WorksheetFunction.Match("Name", wbKunden.ActiveSheet.Rows(1), 0)
        SpStrasse = WorksheetFunction.Match("Stra|fffd|e", wbKunden.ActiveSheet.Rows(1), 0)
        SpPLZ = WorksheetFunction.Match("PLZ", wbKunden.ActiveSheet.Rows(1), 0)
        SpOrt = WorksheetFunction.Match("Ort", wbKunden.ActiveSheet.Rows(1), 0)
        SpLand = WorksheetFunction.Match("L|fffd|nderkennzeichen", wbKunden.ActiveSheet.Rows(1), 0)

        AnzahlKunden = wbKunden.ActiveSheet.Cells(1, 1).End(xlDown).Row
        
        'alle Werte einlesen
        Zeile = 2
        Do While wbKunden.ActiveSheet.Cells(Zeile, 1) <> ""
            Application.StatusBar = Zeile & " von " & AnzahlKunden
        
            If Trim(wbKunden.ActiveSheet.Cells(Zeile, SpName)) <> "nicht gefunden" Then
            
                rstKunden.FindFirst "IDKundenNr=" & wbKunden.ActiveSheet.Cells(Zeile, SpKundenNr)
            
                If rstKunden.nomatch Then
                    rstKunden.addnew
                    rstKunden!IDKundenNr = wbKunden.ActiveSheet.Cells(Zeile, SpKundenNr)
                Else
                    rstKunden.Edit
                End If
            
                rstKunden!KdName = wbKunden.ActiveSheet.Cells(Zeile, SpName)
                rstKunden!KdStrasse = wbKunden.ActiveSheet.Cells(Zeile, SpStrasse)
                rstKunden!KdLand = wbKunden.ActiveSheet.Cells(Zeile, SpLand)
                rstKunden!KdPlz = wbKunden.ActiveSheet.Cells(Zeile, SpPLZ)
                rstKunden!KdOrt = wbKunden.ActiveSheet.Cells(Zeile, SpOrt)
            
                rstKunden.Update
            
            End If
        
            Zeile = Zeile + 1
        Loop

        Application.StatusBar = False

        'Status schreiben
        Set rstKunden = accDB.OpenRecordset("SELECT * FROM tblUpdates WHERE Tabelle=""Kunden""")
        rstKunden.Edit
        rstKunden!Dateiname = wbKunden.Name
        rstKunden!Wann = Now()
        rstKunden!VonWem = Environ("Username")
        rstKunden.Update
        
        ThisWorkbook.Worksheets(TAdmin).Range("Name_KundenEinlesen_Datei") = "zuletzt eingelesen: " & wbKunden.Name
        ThisWorkbook.Worksheets(TAdmin).Range("Name_KundenEinlesen_Datum") = "am: " & Now()

        'Excel wieder schlie|fffd|en
        wbKunden.Close savechanges:=False
        Set wbKunden = Nothing
                
        'Access-DB schlie|fffd|en
        rstKunden.Close
        Set rstKunden = Nothing
        
        accDB.Close
        Set accDB = Nothing
        
        Set dbEngine = Nothing
        
        'die neu eingelesene Liste jetzt vom Access-BE in den Kalkulator kopieren
        KundenNachKalkulatorKopieren
    End If
End Sub


Sub KundenKonditionenEinlesen()
'bearbeitet Liste 2

Dim FDlg As FileDialog

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstKunden As Object ' AS DAO.Recordset

Dim wbKunden As Workbook
Dim SpCustomerKey As Integer, SpCustomer As Integer, SpGroupKey As Integer, SpStreet As Integer, SpPLZ As Integer, SpLocation As Integer

Dim Zeile As Integer
Dim AnzahlKunden As Long

    Set FDlg = Application.FileDialog(msoFileDialogOpen)
    FDlg.AllowMultiSelect = False
    FDlg.Filters.Add "Excel-Dateien", "*.xls; *.xlsx"
    FDlg.Title = "Kundenliste mit Konditionen ausw|fffd|hlen"
    If FDlg.Show Then
        
        'Access |fffd|ffnen
        Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
        Set accDB = dbEngine.OpenDatabase(ThisWorkbook.Worksheets(TUpdates).Range("Name_PfadAccessDB"))
        
        Set rstKunden = accDB.OpenRecordset("SELECT * FROM tblKunden")
        
        'Excel-Datei |fffd|ffnen
        Set wbKunden = Workbooks.Open(FDlg.SelectedItems(1))
        
        'Spalten finden
        SpCustomerKey = WorksheetFunction.Match("customerkey", wbKunden.ActiveSheet.Rows(1), 0)
        SpCustomer = WorksheetFunction.Match("customer", wbKunden.ActiveSheet.Rows(1), 0)
        SpGroupKey = WorksheetFunction.Match("groupkey", wbKunden.ActiveSheet.Rows(1), 0)
        SpStreet = WorksheetFunction.Match("street", wbKunden.ActiveSheet.Rows(1), 0)
        SpPLZ = WorksheetFunction.Match("PLZ", wbKunden.ActiveSheet.Rows(1), 0)
        SpLocation = WorksheetFunction.Match("Location", wbKunden.ActiveSheet.Rows(1), 0)
        
        AnzahlKunden = wbKunden.ActiveSheet.Cells(1, 1).End(xlDown).Row
        
        'alle Werte einlesen
        Zeile = 2
        Do While wbKunden.ActiveSheet.Cells(Zeile, 1) <> ""
            Application.StatusBar = Zeile & " von " & AnzahlKunden
        
        
            rstKunden.FindFirst "IDKundenNr=" & wbKunden.ActiveSheet.Cells(Zeile, SpCustomerKey)
        
            If rstKunden.nomatch Then
                rstKunden.addnew
                rstKunden!IDKundenNr = wbKunden.ActiveSheet.Cells(Zeile, SpCustomerKey)
                rstKunden!KdStrasse = wbKunden.ActiveSheet.Cells(Zeile, SpStreet)
                'rstKunden!KdLand = wbKunden.ActiveSheet.Cells(Zeile, SpLand)
                rstKunden!KdPlz = wbKunden.ActiveSheet.Cells(Zeile, SpPLZ)
                rstKunden!KdOrt = wbKunden.ActiveSheet.Cells(Zeile, SpLocation)
            Else
                rstKunden.Edit
            End If
        
            rstKunden!GroupID = wbKunden.ActiveSheet.Cells(Zeile, SpGroupKey)
        
            rstKunden.Update
        
            Zeile = Zeile + 1
        Loop

        Application.StatusBar = False

        'Status schreiben
        Set rstKunden = accDB.OpenRecordset("SELECT * FROM tblUpdates WHERE Tabelle=""KundenKonditionen""")
        rstKunden.Edit
        rstKunden!Dateiname = wbKunden.Name
        rstKunden!Wann = Now()
        rstKunden!VonWem = Environ("Username")
        rstKunden.Update
        
        ThisWorkbook.Worksheets(TAdmin).Range("Name_KundenKonditionenEinlesen_Datei") = "zuletzt eingelesen: " & wbKunden.Name
        ThisWorkbook.Worksheets(TAdmin).Range("Name_KundenKonditionenEinlesen_Datum") = "am: " & Now()

        'Excel wieder schlie|fffd|en
        wbKunden.Close savechanges:=False
        Set wbKunden = Nothing
        
        'Access-DB schlie|fffd|en
        rstKunden.Close
        Set rstKunden = Nothing
        
        accDB.Close
        Set accDB = Nothing
        
        Set dbEngine = Nothing
        
        'die neu eingelesene Liste jetzt vom Access-BE in den Kalkulator kopieren
        KundenNachKalkulatorKopieren
    End If
End Sub




Sub KonditionenEinlesen()
'bearbeitet Liste 3

Dim FDlg As FileDialog

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim accApp As Object    'Access Application
Dim rstKd As Object     ' AS DAO.Recordset
Dim AnzahlKunden As Long

Dim wbKondis As Workbook
Dim wsKondis As Worksheet
Dim SpCustomerKey As Integer, SpProductHierarchy As Integer, SpConditionValue As Integer

Dim Zeile As Integer

Dim VmwareVsphere As Variant, VmwareNvsphere As Variant, VmwareSns As Variant, VmwareEssentials As Variant, VmwareWorkstation As Variant, VmwarePso As Variant, VmwareRenewal As Variant
Dim VeeamVeeam As Variant, VeeamSns As Variant, VeeamRenewal As Variant

    Set FDlg = Application.FileDialog(msoFileDialogOpen)
    FDlg.AllowMultiSelect = False
    FDlg.Filters.Add "Excel-Dateien", "*.xls; *.xlsx"
    FDlg.Title = "Konditionsliste ausw|fffd|hlen"
    If FDlg.Show Then
        
        'Access |fffd|ffnen
        
        
        Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
        Set accDB = dbEngine.OpenDatabase(ThisWorkbook.Worksheets(TUpdates).Range("Name_PfadAccessDB"))
        
        Set accApp = CreateObject("Access.Application")
        accApp.OpenCurrentDatabase ThisWorkbook.Worksheets(TUpdates).Range("Name_PfadAccessDB"), True
        
        'alles l|fffd|schen: die Daten werden komplett neu aufgebaut
        accApp.DoCmd.RunSQL "DELETE FROM tblKondiVeeam WHERE GroupID > 1000"
        accApp.DoCmd.RunSQL "DELETE FROM tblKondiVMWare WHERE GroupID > 1000"

        'Excel-Datei |fffd|ffnen
        Set wbKondis = Workbooks.Open(FDlg.SelectedItems(1))
        Set wsKondis = wbKondis.Sheets("Excons")
        
        'Spalten finden
        SpCustomerKey = WorksheetFunction.Match("Customer_Key", wbKondis.ActiveSheet.Rows(1), 0)
        SpProductHierarchy = WorksheetFunction.Match("Product_Hierarchy", wbKondis.ActiveSheet.Rows(1), 0)
        SpConditionValue = WorksheetFunction.Match("Condition_Value", wbKondis.ActiveSheet.Rows(1), 0)
        
        'alle Werte einlesen
        Set rstKd = accDB.OpenRecordset("SELECT DISTINCT tblKunden.GroupID FROM tblKunden")
        
        rstKd.movelast
        rstKd.movefirst
        AnzahlKunden = rstKd.RecordCount
        
        Do While Not rstKd.EOF
        
            Application.StatusBar = rstKd.absoluteposition & " von " & AnzahlKunden
        
            With ActiveWorkbook.ActiveSheet
    
                If Application.CountIfs(.Columns(1), rstKd!GroupID, .Columns(3), "000337770000001002") = 1 Then
                    VmwareVsphere = Str(Application.SumIfs(.Columns(7), .Columns(1), rstKd!GroupID, .Columns(3), "000337770000001002") * -0.01)
                Else
                    VmwareVsphere = Null
                End If
                
                If Application.CountIfs(.Columns(1), rstKd!GroupID, .Columns(3), "000337770000001007") = 1 Then
                    VmwareNvsphere = Str(Application.SumIfs(.Columns(7), .Columns(1), rstKd!GroupID, .Columns(3), "000337770000001007") * -0.01)
                Else
                    VmwareNvsphere = Null
                End If
                
                If Application.CountIfs(.Columns(1), rstKd!GroupID, .Columns(3), "000337770000001005") = 1 Then
                    VmwareSns = Str(Application.SumIfs(.Columns(7), .Columns(1), rstKd!GroupID, .Columns(3), "000337770000001005") * -0.01)
                Else
                    VmwareSns = Null
                End If
                
                If Application.CountIfs(.Columns(1), rstKd!GroupID, .Columns(3), "000337770000001006") = 1 Then
                    VmwareEssentials = Str(Application.SumIfs(.Columns(7), .Columns(1), rstKd!GroupID, .Columns(3), "000337770000001006") * -0.01)
                Else
                    VmwareEssentials = Null
                End If
                
                If Application.CountIfs(.Columns(1), rstKd!GroupID, .Columns(3), "000337770000001003") = 1 Then
                    VmwareWorkstation = Str(Application.SumIfs(.Columns(7), .Columns(1), rstKd!GroupID, .Columns(3), "000337770000001003") * -0.01)
                Else
                    VmwareWorkstation = Null
                End If
                
                If Application.CountIfs(.Columns(1), rstKd!GroupID, .Columns(3), "000337770000001009") = 1 Then
                    VmwarePso = Str(Application.SumIfs(.Columns(7), .Columns(1), rstKd!GroupID, .Columns(3), "000337770000001009") * -0.01)
                Else
                    VmwarePso = Null
                End If
                
                If Application.CountIfs(.Columns(1), rstKd!GroupID, .Columns(3), "000337770000001001") = 1 Then
                    VmwareRenewal = Str(Application.SumIfs(.Columns(7), .Columns(1), rstKd!GroupID, .Columns(3), "000337770000001001") * -0.01)
                Else
                    VmwareRenewal = Null
                End If
                
                
                
                If Application.CountIfs(.Columns(1), rstKd!GroupID, .Columns(3), "000337770000002000") = 1 Then
                    VeeamVeeam = Str(Application.SumIfs(.Columns(7), .Columns(1), rstKd!GroupID, .Columns(3), "000337770000002000") * -0.01)
                Else
                    VeeamVeeam = Null
                End If
                
                If Application.CountIfs(.Columns(1), rstKd!GroupID, .Columns(3), "000337770000002001") = 1 Then
                    VeeamSns = Str(Application.SumIfs(.Columns(7), .Columns(1), rstKd!GroupID, .Columns(3), "000337770000002001") * -0.01)
                Else
                    VeeamSns = Null
                End If
                
                If Application.CountIfs(.Columns(1), rstKd!GroupID, .Columns(3), "000337770000002003") = 1 Then
                    VeeamRenewal = Str(Application.SumIfs(.Columns(7), .Columns(1), rstKd!GroupID, .Columns(3), "000337770000002003") * -0.01)
                Else
                    VeeamRenewal = Null
                End If
                
            End With
    
            If Not (IsNull(VmwareVsphere) And IsNull(VmwareNvsphere) And IsNull(VmwareSns) And IsNull(VmwareEssentials) And IsNull(VmwareWorkstation) And IsNull(VmwarePso) And IsNull(VmwareRenewal)) Then
                accApp.DoCmd.RunSQL "INSERT INTO tblKondiVMWare (GroupID, vSphere, NvSphere, SnS, Essentials, Workstation, PSO, Renewal) " & _
                        "VALUES (" & rstKd!GroupID & ", " & VmwareVsphere & ", " & VmwareNvsphere & ", " & VmwareSns & ", " & VmwareEssentials & ", " & VmwareWorkstation & ", " & VmwarePso & ", " & VmwareRenewal & ")"
            End If
            
            If Not (IsNull(VeeamVeeam) And IsNull(VeeamSns) And IsNull(VeeamRenewal)) Then
                accApp.DoCmd.RunSQL "INSERT INTO tblKondiVeeam (GroupID, Veeam, SnS, Renewal) " & _
                        "VALUES (" & rstKd!GroupID & ", " & Nz(VeeamVeeam, "Null") & ", " & VeeamSns & ", " & Nz(VeeamRenewal, "Null") & ")"
            End If
            

'F|fffd|r vSphere nutze die Product_Hierarchy 000337770000001002
'F|fffd|r NvSphere nutze die Product_Hierarchy 000337770000001007
'F|fffd|r SnS(VMWare) nutze die Product_Hierarchy 000337770000001005
'F|fffd|r Essentials nutze die Product_Hierarchy 000337770000001006
'F|fffd|r Workstation nutze die Product_Hierarchy 000337770000001003
'F|fffd|r PSO nutze die Product_Hierarchy 000337770000001009
'F|fffd|r Renewal(VMware) nutze die Product_Hierarchy 000337770000001001

'F|fffd|r Veeam nutze die Product_Hierarchy 000337770000002000
'F|fffd|r SnS(Veeam) nutze die Product_Hierarchy 000337770000002001
'F|fffd|r Renewal(Veeam) nutze die Product_Hierarchy 000337770000002003

            rstKd.MoveNext
        Loop

        Application.StatusBar = False

        'Status schreiben
        Set rstKd = accDB.OpenRecordset("SELECT * FROM tblUpdates WHERE Tabelle=""Konditionen""")
        rstKd.Edit
        rstKd!Dateiname = wbKondis.Name
        rstKd!Wann = Now()
        rstKd!VonWem = Environ("Username")
        rstKd.Update
        
        ThisWorkbook.Worksheets(TAdmin).Range("Name_KonditionenEinlesen_Datei") = "zuletzt eingelesen: " & wbKondis.Name
        ThisWorkbook.Worksheets(TAdmin).Range("Name_KonditionenEinlesen_Datum") = "am: " & Now()

        
        'Excel wieder schlie|fffd|en
        wbKondis.Close savechanges:=False
        Set wbKondis = Nothing
        
        rstKd.Close
        Set rstKd = Nothing
        
        Set dbEngine = Nothing
        
        'Access-DB schlie|fffd|en
        accApp.Quit
        Set accApp = Nothing
        
        accDB.Close
        Set accDB = Nothing
        
        'die neu eingelesene Liste jetzt vom Access-BE in den Kalkulator kopieren
        Call KundenKondiVMwareNachKalkulatorKopieren
        Call KundenKondiVeeamNachKalkulatorKopieren
        
    End If
End Sub



Sub PartnerIDkopieren()
'Diese Prozedur sollte nur ein mal verwendet werden; keine Verbindung zu Oberfl|fffd|che; nur hier direkt zu starten

'Erwartet die "alte" Konditionstabelle, in der die PartnerID eingepflegt ist

'NEU: es werden auch die Status |fffd|bernommen

Dim FDlg As FileDialog
Dim wbKondis As Workbook
Dim accApp As Object    'Access Application
Dim Zeile As Long

    Set FDlg = Application.FileDialog(msoFileDialogOpen)
    FDlg.AllowMultiSelect = False
    FDlg.Filters.Add "Excel-Dateien", "*.xls; *.xlsx"
    FDlg.Title = "Konditionsliste ausw|fffd|hlen"
    If FDlg.Show Then
    
        Set wbKondis = Workbooks.Open(FDlg.SelectedItems(1))

        Set accApp = CreateObject("Access.Application")
        accApp.OpenCurrentDatabase ThisWorkbook.Worksheets(TUpdates).Range("Name_PfadAccessDB"), True
        
        'VMware
        Zeile = 9
        Do While wbKondis.Worksheets("Konditionen VMWare").Cells(Zeile, 1) <> ""
            If wbKondis.Worksheets("Konditionen VMWare").Cells(Zeile, 11) <> "" Then
                accApp.DoCmd.RunSQL "UPDATE tblKondiVMWare SET PartnerID=""" & wbKondis.Worksheets("Konditionen VMWare").Cells(Zeile, 10) & """ WHERE GroupID=" & wbKondis.Worksheets("Konditionen VMWare").Cells(Zeile, 11)
                
                If wbKondis.Worksheets("Konditionen VMWare").Cells(Zeile, 9) <> "Enrolled" Then
                    accApp.DoCmd.RunSQL "UPDATE tblKondiVMWare SET Status=""" & wbKondis.Worksheets("Konditionen VMWare").Cells(Zeile, 9) & """ WHERE GroupID=" & wbKondis.Worksheets("Konditionen VMWare").Cells(Zeile, 11)
                End If
                
            End If
            Zeile = Zeile + 1
        Loop
        
        'Veeam
        Zeile = 9
        Do While wbKondis.Worksheets("Konditionen Veeam").Cells(Zeile, 1) <> ""
            If wbKondis.Worksheets("Konditionen Veeam").Cells(Zeile, 7) <> "" Then
                accApp.DoCmd.RunSQL "UPDATE tblKondiVeeam SET PartnerID=""" & wbKondis.Worksheets("Konditionen Veeam").Cells(Zeile, 6) & """, Status=""" & wbKondis.Worksheets("Konditionen Veeam").Cells(Zeile, 5) & """ WHERE GroupID=" & wbKondis.Worksheets("Konditionen Veeam").Cells(Zeile, 7)
            End If
            Zeile = Zeile + 1
        Loop
        
        'aufr|fffd|umen
        wbKondis.Close (False)
        
        accApp.Quit
        Set accApp = Nothing

        MsgBox ("fertig")

    End If
End Sub


Sub DeltasStatus()

Dim FDlg As FileDialog
Dim wbStatus As Workbook
Dim wsStatusVmware As Worksheet, wsStatusVeeam As Worksheet
Dim ZeileStatus As Variant, ZeileKondis As Variant

Dim wsKondiVmware As Worksheet, wsKondiVeeam As Worksheet

Dim FehlerString As String

    Set FDlg = Application.FileDialog(msoFileDialogOpen)
    FDlg.AllowMultiSelect = False
    FDlg.Filters.Add "Excel-Dateien", "*.xls; *.xlsx"
    FDlg.Title = "Liste mit Status ausw|fffd|hlen"
    If FDlg.Show Then
    
        Set wsKondiVmware = ThisWorkbook.Worksheets(TKundenKondiVMware)
        Set wsKondiVeeam = ThisWorkbook.Worksheets(TKundenKondiVeeam)
    
        Set wbStatus = Workbooks.Open(FDlg.SelectedItems(1))
        Set wsStatusVmware = wbStatus.Worksheets("Konditionen VMWare")
        Set wsStatusVeeam = wbStatus.Worksheets("Konditionen Veeam")

'VMware
        'von Status nach Kondis
        ZeileStatus = 3

        Do While wsStatusVmware.Cells(ZeileStatus, 1) <> ""
            If wsStatusVmware.Cells(ZeileStatus, 4) <> "" Then
                ZeileKondis = Application.Match(wsStatusVmware.Cells(ZeileStatus, 4), wsKondiVmware.Cells(1, 1).EntireColumn, 0)
                If IsNumeric(ZeileKondis) Then
                    If wsStatusVmware.Cells(ZeileStatus, 2) <> wsKondiVmware.Cells(ZeileKondis, 9) Then
                        FehlerString = FehlerString & "VMware: Group-ID " & wsKondiVmware.Cells(ZeileKondis, 1) & " abweichender Status" & vbCrLf
                    End If
                Else
                    FehlerString = FehlerString & "VMware: Group-ID " & wsStatusVmware.Cells(ZeileStatus, 4) & " in Statusliste, aber nicht in Kalkulator" & vbCrLf
                End If
            End If
            ZeileStatus = ZeileStatus + 1
        Loop

        'von Kondis nach Status
        ZeileKondis = 2

        Do While wsKondiVmware.Cells(ZeileKondis, 1) <> ""
            ZeileStatus = Application.Match(wsKondiVmware.Cells(ZeileKondis, 1), wsStatusVmware.Columns(4), 0)
            If Not IsNumeric(ZeileStatus) Then
                FehlerString = FehlerString & "VMware: Group-ID " & wsKondiVmware.Cells(ZeileKondis, 1) & " in Kalkulator, aber nicht in Statusliste" & vbCrLf
            End If
            ZeileKondis = ZeileKondis + 1
        Loop



'Veeam
        'von Status nach Kondis
        ZeileStatus = 3

        Do While wsStatusVeeam.Cells(ZeileStatus, 1) <> ""
            If wsStatusVeeam.Cells(ZeileStatus, 4) <> "" Then
                ZeileKondis = Application.Match(wsStatusVeeam.Cells(ZeileStatus, 4), wsKondiVeeam.Cells(1, 1).EntireColumn, 0)
                If IsNumeric(ZeileKondis) Then
                    If wsStatusVeeam.Cells(ZeileStatus, 2) <> wsKondiVeeam.Cells(ZeileKondis, 5) Then
                        FehlerString = FehlerString & "Veeam: Group-ID " & wsKondiVeeam.Cells(ZeileKondis, 1) & " abweichender Status" & vbCrLf
                    End If
                Else
                    FehlerString = FehlerString & "Veeam: Group-ID " & wsStatusVeeam.Cells(ZeileStatus, 4) & " in Statusliste, aber nicht in Kalkulator" & vbCrLf
                End If
            End If

            ZeileStatus = ZeileStatus + 1
        Loop

        'von Kondis nach Status
        ZeileKondis = 2

        Do While wsKondiVeeam.Cells(ZeileKondis, 1) <> ""
            ZeileStatus = Application.Match(wsKondiVeeam.Cells(ZeileKondis, 1), wsStatusVeeam.Columns(4), 0)
            If Not IsNumeric(ZeileStatus) Then
                FehlerString = FehlerString & "Veeam: Group-ID " & wsKondiVeeam.Cells(ZeileKondis, 1) & " in Kalkulator, aber nicht in Statusliste" & vbCrLf
            End If
            ZeileKondis = ZeileKondis + 1
        Loop




        If FehlerString = "" Then
            MsgBox ("Fertig. Keine Fehler gefunden.")
        Else
            SetClipboard (FehlerString)
            MsgBox ("Fertig. Die Fehler wurden in die Zwischenablage kopiert.")
        End If

'aufr|fffd|umen
        wbStatus.Close (False)

        Set wbStatus = Nothing
        Set wsStatusVmware = Nothing
        Set wsStatusVeeam = Nothing

    End If
    
End Sub


Sub MailinglisteKopieren()
'Diese Prozedur sollte nur ein mal verwendet werden; keine Verbindung zu Oberfl|fffd|che; nur hier direkt zu starten

'Erwartet die Mailingliste: Spalte A die Kundennummer, Spalte B die E-Mail-Adressen Semikolon-getrennt

Dim FDlg As FileDialog
Dim wbKondis As Workbook
Dim accApp As Object    'Access Application
Dim Zeile As Long
Dim Pos1 As Integer, Pos2 As Integer
Dim Email As String

    Set FDlg = Application.FileDialog(msoFileDialogOpen)
    FDlg.AllowMultiSelect = False
    FDlg.Filters.Add "Excel-Dateien", "*.xls; *.xlsx"
    FDlg.Title = "Mailingliste ausw|fffd|hlen"
    If FDlg.Show Then
    
        Set wbKondis = Workbooks.Open(FDlg.SelectedItems(1))

        Set accApp = CreateObject("Access.Application")
        accApp.OpenCurrentDatabase ThisWorkbook.Worksheets(TUpdates).Range("Name_PfadAccessDB"), True
        
        'Liste durchgehen
        Zeile = 2
        Do While wbKondis.Worksheets("Mailingliste").Cells(Zeile, 1) <> ""
            Pos1 = 1
            Pos2 = 1
            Do
                Pos1 = Pos2
                Pos2 = InStr(Pos1 + 1, wbKondis.Worksheets("Mailingliste").Cells(Zeile, 2), ";")
                If Pos2 = 0 Then Pos2 = 999 'wenn kein Seimkolon hinten dran ist, dann den gesamten Rest bringen
                
                Email = Mid(wbKondis.Worksheets("Mailingliste").Cells(Zeile, 2), Pos1, Pos2 - Pos1)
                Email = Trim(Replace(Email, ";", ""))
                
                
                accApp.DoCmd.RunSQL "INSERT INTO tblKundenEmailVerteiler (KundennrID, EMail) VALUES (" & wbKondis.Worksheets("Mailingliste").Cells(Zeile, 1) & ", """ & Email & """)"
                
            
            Loop Until Pos2 >= Len(wbKondis.Worksheets("Mailingliste").Cells(Zeile, 2))
            
            Zeile = Zeile + 1
        Loop
        
        
        
        'aufr|fffd|umen
        wbKondis.Close (False)
        
        accApp.Quit
        Set accApp = Nothing

        MsgBox ("fertig")

    End If


End Sub
Attribute VB_Name = "mdlPreislistenversand"
Option Explicit


Sub Preislistenversand()

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database

Dim rstKd As Object     'Recordset mit den Kunden, an die eine bestimmte Preisliste versendet werden soll
Dim rstKondi As Object  'Recordset f|fffd|r die Konditionen
Dim rstVerteiler As Object  'Recordset f|fffd|r die E-Mail-Verteiler

Dim Vorlage As String   'String mit dem Pfad und dem Namen f|fffd|r die E-Mail-Vorlage
Dim FDlg As FileDialog
Dim SelItem As Variant

Dim MonatVersion As String

'f|fffd|r Outlook
Static myMail As Object ' Outlook.MailItem
Static olApp As Object  'Outlook.Application
Dim Empfaenger As String


    If MsgBox("Der Preislistenversand zerst|fffd|rt diese Kopie des Kalkulators! Trotzdem fortfahren?", vbOKCancel) = vbCancel Then
        Exit Sub
    End If

    MonatVersion = Worksheets(TAdmin).Cells(12, 14)

'****************************
'die Vorlage f|fffd|r die E-Mail suchen (lassen)
    Set FDlg = Application.FileDialog(msoFileDialogFilePicker)
    FDlg.AllowMultiSelect = False

    FDlg.Filters.Add "Outlook-Vorlagen", "*.oft"
    FDlg.FilterIndex = 2

    FDlg.Title = "Vorlage ausw|fffd|hlen"
    
    If FDlg.Show Then
        For Each SelItem In FDlg.SelectedItems
            Vorlage = SelItem
        Next SelItem
    Else
        Exit Sub
    End If


    Application.DisplayAlerts = False       'verhindert R|fffd|ckfragen |fffd|ber gel|fffd|schte / |fffd|berschriebene Tabellen / Dateien

'**********************************
'erst wird der neue Kalkulator fit f|fffd|r die Kundenversion gemacht:

    'kompletter Reset
    Call ResetKalkulator
    
    ThisWorkbook.Worksheets(TKalkulator).Activate
    Cells(1, 1).Select
    
    Range("Name_GueltigBis") = Worksheets(TAdmin).Cells(13, 14)
    
    'Mappenschutz aufheben
    ActiveWorkbook.Unprotect (KalkulatorPW)
    
    '|fffd|berfl|fffd|ssige Tabellen l|fffd|schen
    ThisWorkbook.Worksheets(TAdmin).Delete 'l|fffd|scht das Tabellenblatt
    ThisWorkbook.Worksheets(TKunden).Delete 'l|fffd|scht das Tabellenblatt
    ThisWorkbook.Worksheets(TKundenKondiVeeam).Delete 'l|fffd|scht das Tabellenblatt
    ThisWorkbook.Worksheets(TKundenKondiVMware).Delete 'l|fffd|scht das Tabellenblatt
    
    'Mappenschutz wieder aktivieren
    ActiveWorkbook.Protect Password:=KalkulatorPW, Structure:=True, Windows:=False
    
    'Buttons l|fffd|schen
    ThisWorkbook.Worksheets(TKalkulator).Shapes("cmdSoftReset").Delete
    ThisWorkbook.Worksheets(TKalkulator).Shapes("cmdKundeSuchen").Delete
    'ThisWorkbook.Worksheets(TKalkulator).Shapes("cmdAngebotSpeichern").Delete
    ThisWorkbook.Worksheets(TKalkulator).Shapes("cmdAngebotKorrigieren").Delete
    ThisWorkbook.Worksheets(TKalkulator).Shapes("cmdZuExcelNackt").Delete
    ThisWorkbook.Worksheets(TKalkulator).Shapes("cmdExcelMini").Delete
    ThisWorkbook.Worksheets(TKalkulator).Shapes("cmdKondisAendern").Delete
    
    'der eine wird unsichtbar gemacht, weil der sp|fffd|ter auch ausgewertet wird
    ThisWorkbook.Worksheets(TKalkulator).Shapes("cmdAngebotSpeichern").Visible = False
    
    'Bearbeiter l|fffd|schen
    With ThisWorkbook.Worksheets(TKalkulator)
        .Range(.Cells(11, 10), .Cells(14, 10)).ClearContents
    End With

    'sicherstellen, dass die Berechnungsspalten ausgeblendet sind
    ThisWorkbook.Worksheets(TKalkulator).Range("M:AZ").EntireColumn.Hidden = True

'**************************
'Outlook starten
    Set olApp = CreateObject("Outlook.Application")

'***************************
'dann werden daraus die Kundenversionen gebaut

    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"))
    
    'Recordset |fffd|ffnen mit allen betroffenen Kunden
    Set rstKd = accDB.OpenRecordset("SELECT DISTINCT tblKundenEmailVerteiler.KundenNrID, tblKunden.KdName, tblKunden.KdStrasse, tblKunden.KdLand, tblKunden.KdPlz, tblKunden.KdOrt, tblKunden.GroupID " & _
            "FROM tblKundenEmailVerteiler INNER JOIN tblKunden ON tblKundenEmailVerteiler.KundenNrID = tblKunden.IDKundenNr")


    Do While Not rstKd.EOF
        
        'falls gesch|fffd|tzt, wieder |fffd|ffnen
        Worksheets(TKalkulator).Unprotect (KalkulatorPW)
        
        'allgemein Kunde
            'Kundennummer
            Range("Name_KundeNr") = rstKd!KundenNrID
            
            Range("Name_GroupID") = rstKd!GroupID
            
            'Name + Anschrift
            Range("Name_Kunde_Name") = rstKd!KdName
            Range("Name_Kunde_Strasse") = rstKd!KdStrasse
            Range("Name_Kunde_PlzOrt") = rstKd!KdLand & IIf(Nz(rstKd!KdLand, "") = "", "", "-") & rstKd!KdPlz & " " & rstKd!KdOrt
        
        'VMware
            Set rstKondi = accDB.OpenRecordset("SELECT * FROM tblKondiVMWare WHERE GroupID=" & rstKd!GroupID)
        
            If Not rstKondi.EOF Then
        
                Range("Name_Kunde_Kondi_VMware_vSphere") = rstKondi!vSphere
                Range("Name_Kunde_Kondi_VMware_NvSphere") = rstKondi!NvSphere
                Range("Name_Kunde_Kondi_VMware_SnS") = rstKondi!SnS
                Range("Name_Kunde_Kondi_VMware_Essentials") = rstKondi!Essentials
                Range("Name_Kunde_Kondi_VMware_Workstation") = rstKondi!Workstation
                Range("Name_Kunde_Kondi_VMware_PSO") = rstKondi!PSO
                Range("Name_Kunde_Kondi_VMware_Renewal") = rstKondi!Renewal
                Range("Name_Kunde_Kondi_VMware_Status") = rstKondi!Status
                
                If Range("Name_Kunde_Kondi_VMware_Status") = "Enterprise" Then
                    Range("Name_lbl_VPP_MembershipID") = "VPP Membership ID:"
                    Range("Name_lbl_VPP_alt") = "Aktuelle VPP Punktzahl:"
                Else
                    Range("Name_lbl_VPP_MembershipID") = ""
                    Range("Name_lbl_VPP_alt") = ""
                End If
                
                Range("Name_OranNummer") = ""
                ThisWorkbook.Worksheets(TKalkulator).Shapes("cmdOranFreigabe").Visible = False
                
                'wenn Status Professional, dann ORAN weg
                If Range("Name_Kunde_Kondi_VMware_Status") = "Professional" Then
                    Range("Name_lblOranNummer") = ""
                    'ORAN-Nummer Zelle sperren!
                    Range("Name_OranNummer").Locked = True
                Else
                    Range("Name_lblOranNummer") = "Oran-No.:"
                    Range("Name_OranNummer").Locked = False
                End If
                
                ThisWorkbook.Worksheets(TKalkulator).Shapes("cmdVmware").Visible = True
                
            Else
                Range("Name_Kunde_Kondi_VMware_vSphere") = ""
                Range("Name_Kunde_Kondi_VMware_NvSphere") = ""
                Range("Name_Kunde_Kondi_VMware_SnS") = ""
                Range("Name_Kunde_Kondi_VMware_Essentials") = ""
                Range("Name_Kunde_Kondi_VMware_Workstation") = ""
                Range("Name_Kunde_Kondi_VMware_PSO") = ""
                Range("Name_Kunde_Kondi_VMware_Renewal") = ""
                Range("Name_Kunde_Kondi_VMware_Status") = ""
                Range("Name_lblOranNummer") = ""
                
                ThisWorkbook.Worksheets(TKalkulator).Shapes("cmdVmware").Visible = False
            End If
            
            
            'ORAN-Freigaben
            Call OranFreigabenRuecksetzen
            
            
        'Veeam
            Set rstKondi = accDB.OpenRecordset("SELECT * FROM tblKondiVeeam WHERE GroupID=" & rstKd!GroupID)
        
            If Not rstKondi.EOF Then
                Range("Name_Kunde_Kondi_Veeam_Veeam") = rstKondi!Veeam
                Range("Name_Kunde_Kondi_Veeam_SnS") = rstKondi!SnS
                Range("Name_Kunde_Kondi_Veeam_Renewal") = rstKondi!Renewal
                Range("Name_Kunde_Kondi_Veeam_Status") = rstKondi!Status
                
                ThisWorkbook.Worksheets(TKalkulator).Shapes("cmdVeeam").Visible = True
            Else
                Range("Name_Kunde_Kondi_Veeam_Veeam") = ""
                Range("Name_Kunde_Kondi_Veeam_SnS") = ""
                Range("Name_Kunde_Kondi_Veeam_Renewal") = ""
                Range("Name_Kunde_Kondi_Veeam_Status") = ""
                
                ThisWorkbook.Worksheets(TKalkulator).Shapes("cmdVeeam").Visible = False
            End If
        
            'mit Passwort sch|fffd|tzen
            Worksheets(TKalkulator).Protect (KalkulatorPW)
        
            'Ergebnis mit neuem Namen speichern
            ThisWorkbook.SaveAs ThisWorkbook.Path & "\TechData Kalkulator - " & SonderzeichenRaus(rstKd!KdName) & " - " & Format(Now(), "yyyymmdd hhnn") & ".xlsm"       '|fffd|berschreibt die evtl. vorhandene
        
        
'*************** dann hier weiter Liste bauen, speichern, Mail machen .....
        
        
        
'***************************************
'E-Mail estellen
        
        Set myMail = olApp.CreateItemFromTemplate(Vorlage)
        
        Set rstVerteiler = accDB.OpenRecordset("SELECT EMail FROM tblKundenEmailVerteiler WHERE KundenNrID=" & rstKd!KundenNrID)
        
        Empfaenger = ""
        Do While Not rstVerteiler.EOF
            Empfaenger = Empfaenger & rstVerteiler!Email & ";"
            rstVerteiler.MoveNext
        Loop

        myMail.Subject = "Virtualisierungspreisliste_" & MonatVersion
        myMail.BCC = Empfaenger
        myMail.Attachments.Add (ThisWorkbook.FullName)
        myMail.Display      'der E-Mail-Entwurf erscheint (und wird mit der n|fffd|chsten Zeile wieder geschlossen)
        myMail.Close 0      ' = olSave      --> das Speichern erzeugt einen Entwurf, der dann im Ordner zu finden ist
'E-Mail fertig

        rstKd.MoveNext
    Loop

'aufr|fffd|umen ...
    rstKd.Close
    Set rstKd = Nothing
    
    rstKondi.Close
    Set rstKd = Nothing

    rstVerteiler.Close
    Set rstVerteiler = Nothing

    accDB.Close
    Set accDB = Nothing
    
    Set dbEngine = Nothing

    Set myMail = Nothing
    Set olApp = Nothing

    MsgBox ("Die Preislisten wurden erstellt und befinden sich im Outlook 'Entw|fffd|rfe'-Ordner.")

End Sub









'Sub PreislistenversandSpensi()
'
'    Dim Drafts As Outlook.MAPIFolder
'    Dim lngCounter As Long
'    Dim MailItem As Outlook.MailItem
'    Dim oA As New Outlook.Application
'    Dim oExcel As Object
'    Dim oFolder As Outlook.MAPIFolder
'    Dim oFs As Outlook.Folders
'    'Dim oMailWordDoc As Object
'    Dim o_NS As Outlook.Namespace
'    Dim strRecipients As String
'    Dim strTableName As String
'    Dim oWord As Object
'    Dim oWordDoc As Object
'    Dim strAttachment As String
'    Dim strDocName As String
'    Dim strMainPath As String
'    Dim strPartner As String
'    Dim strPL As String
'    Dim strSubject As String
'    Dim strVersion As String
'    Dim wrdArray() As String
'    Dim i As Integer
'    Dim objRecip As Recipient
'
'    'strVersion = InputBox("Version der Preisliste:")
'    strVersion = ThisWorkbook.Sheets("Automat").Range("A4")
'    strMainPath = ThisWorkbook.Sheets("Automat").Range("A2") & "\" & strVersion
'    If Dir(strMainPath & "\") = Empty Then
'        MsgBox "Folder " & strMainPath & " containing customer priceliste does not exists. Please check the folder name", vbCritical, "VMWare Priceliste"
'        Exit Sub
'    End If
'
'    If ThisWorkbook.Sheets("Automat").Range("A6") = "" Or Not InStr(1, ThisWorkbook.Sheets("Automat").Range("A6"), "@") > 0 Then
'        MsgBox "Emaill address entered in the Automat is invalid.", vbCritical, "VMWare Priceliste"
'        Exit Sub
'    End If
'
'    Set o_NS = oA.GetNamespace("MAPI")
'    o_NS.Logon , , , False
'    Set oFs = o_NS.Folders
'    Set oFolder = oFs.Item(ThisWorkbook.Sheets("Automat").Range("A6").Value)
'    'Set Drafts = oFolder.Folders("Drafts")
'    strTableName = ThisWorkbook.Sheets("Automat").Range("A2") & "\Mailingliste.xlsx"
'    'strDocName = "C:\Users\patrick.spensberger\Downloads\Newsletter.docx"
'    On Error Resume Next
'    Set oExcel = GetObject(, "Excel.Application")
'    If Err.Number <> 0 Then
'        Err.Clear
'        Set oExcel = CreateObject("Excel.Application")
'    End If
'    oExcel.Workbooks.Open Filename:=strTableName, ReadOnly:=True
'    'Set oWord = GetObject(, "Word.Application")
'    If Err.Number <> 0 Then
'        Err.Clear
'        'Set oWord = CreateObject("Word.Application")
'    End If
'    'Set oWordDoc = oWord.Documents.Open(strDocName)
'    lngCounter = 2
'    If Not oExcel.Sheets("Mailingliste").Range("C" & lngCounter).Value = "Wahr" Then
'    lngCounter = lngCounter + 1
'    Else
'    strPartner = oExcel.Sheets("Mailingliste").Range("G" & lngCounter).Value
'    strRecipients = oExcel.Sheets("Mailingliste").Range("B" & lngCounter).Value
'    strPL = oExcel.Sheets("Mailingliste").Range("H" & lngCounter).Value
'    strAttachment = strMainPath & "\Kunden_Virtualisierungs_Preisliste_" & strPL & "_" & strVersion & ".xlsx"
'    End If
'    Do While Not strPartner = ""
'        Set MailItem = oA.CreateItemFromTemplate(ThisWorkbook.Sheets("Automat").Range("A2") & "\Newsletter.oft")
'
'    wrdArray() = Split(strRecipients, ";")
'
'MailItem.Recipients.Clear
'
'        For i = LBound(wrdArray) To UBound(wrdArray)
'    wrdArray(i) = Replace(wrdArray(i), "'", "")
'    wrdArray(i) = Replace(wrdArray(i), "'", "")
'        MailItem.Recipients.Add wrdArray(i)
'        MailItem.Recipients(1).Resolve
'        MailItem.Recipients(i + 1).Type = olBCC
'        MailItem.Recipients(i + 1).Resolve
'        MailItem.Recipients(i).Resolve
'        Next i
'        MailItem.Recipients.ResolveAll
'        MailItem.Subject = "Virtualisierungspreisliste " & strVersion & " " & Format(Date, "MMMM")
'        MailItem.Attachments.Add (strAttachment)
'    'MailItem.Attachments.Add ("C:\Users\patrick.spensberger\Documents\Preisliste\Q3_PROMO_Veeam.pdf")
'        MailItem.Display
'        'oWordDoc.Content.Copy
'        'Set oMailWordDoc = Outlook.ActiveInspector.WordEditor
'        'oMailWordDoc.Application.Selection.Paste
'        MailItem.Close olSave
'        Set MailItem = Nothing
'        lngCounter = lngCounter + 1
'        strPartner = oExcel.Sheets("Mailingliste").Range("G" & lngCounter).Value
'        strRecipients = oExcel.Sheets("Mailingliste").Range("B" & lngCounter).Value
'        strPL = oExcel.Sheets("Mailingliste").Range("H" & lngCounter).Value
'        strAttachment = strMainPath & "\Kunden_Virtualisierungs_Preisliste_" & strPL & "_" & strVersion & ".xlsx"
'    Loop
'    oExcel.Quit
'    oWord.Quit
'    MsgBox ("End")
'End Sub



'Sub SendAllDrafts()
'' Send the messages in the Drafts folder (ignore any subfolders)
'If MsgBox("Bist du Sack dir sicher das alles raus soll?", _
'    vbQuestion + vbYesNo) <> vbYes Then Exit Sub
'Dim fldDraft As MAPIFolder, msg As Outlook.MailItem, intCount As Integer
'Set fldDraft = Outlook.GetNamespace("MAPI").GetDefaultFolder(olFolderDrafts)
'intCount = 0
'Do While fldDraft.Items.Count > 0
'    Set msg = fldDraft.Items(1)
'    msg.Send
'    'Sleep 500
'    intCount = intCount + 1
'Loop
'If Not (msg Is Nothing) Then Set msg = Nothing
'Set fldDraft = Nothing
'MsgBox intCount & " messages sent", vbInformation + vbOKOnly
'End Sub



'Public Sub SendeMail(strMail As String, strBetreff As String, strText As String, strAttach As String)
' 'strMail enth|fffd|lt alle Mailadressen (wie man sie in Outloook eingeben w|fffd|rde)
' 'strBetreff die Betreffzeile f|fffd|r die Mail
' 'strText den eMail-Text
'
' 'Einstellungen f|fffd|r die Schrift in der E-Mail
' Const SchriftSize As String = "11"     'Schweinerei: als Text, mu|fffd| ich nix konvertieren. Nur mit Dezimalpunkt!
' Const SchriftType As String = "Calibri" 'Schriftart
'
'     Static myMail       As Object ' Outlook.MailItem
'     Static myOutlApp    As Object  'Outlook.Application
'     Dim strTextHTML As String
'
'    'Body in HTMLBody |fffd|ndern
'    strTextHTML = Replace(strText, vbCrLf, "<br />")
'    strTextHTML = "<body  style=font-size:" & SchriftSize & "pt;font-family:" & SchriftType & "> " & strTextHTML & " </body>"
'
'     'Outlook |fffd|ffnen
'     Set myOutlApp = CreateObject("Outlook.Application")   'New Outlook.Application
'     'neue Mail |fffd|ffnen
'     Set myMail = myOutlApp.CreateItem(0)       'olMailItem
'     With myMail
'         'Mail Felder bef|fffd|llen
'         .To = strMail
'         .SentOnBehalfOfName = "office@bikealpin.de"
'         .Subject = strBetreff
'         '.Body = strText
'         .HTMLBody = strTextHTML
'         'Dateien Anh|fffd|ngen
'
'         If strAttach <> "" Then
'            .Attachments.Add strAttach
'         End If
'
'         '.Send
'         .Display
'
'     End With
'     'myOutlApp.Quit
'     Set myMail = Nothing
'     Set myOutlApp = Nothing
' End Sub
'
Attribute VB_Name = "mdlProzeduren"
Option Explicit

Sub AccessDatenNachExcelKopieren(QuelleAccessTbl As String, ZielExcelTbl As String)
'kopiert die Daten der Access-DB in den Kalkulator

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstPL As Object     ' AS DAO.Recordset
Dim Spalte As Integer
    
    'erst mal alles l|fffd|schen, was drin ist
    Worksheets(ZielExcelTbl).Cells.ClearContents
    

    'Set dbe = CreateObject("DAO.DBEngine.36")   ' Acc2000-2003
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"))
    
     Set rstPL = accDB.OpenRecordset(QuelleAccessTbl)   ' Verwendung gespeicherte Abfrage/Tabelle
    
    ' Feldnamen |fffd|bernehmen
    For Spalte = 0 To rstPL.Fields.Count - 1
       Worksheets(ZielExcelTbl).Cells(1, Spalte + 1) = rstPL.Fields(Spalte).Name
    Next Spalte
    
    ' Inhalt (gesamtes Recordset) |fffd|bernehmen
    Worksheets(ZielExcelTbl).Cells(2, 1).CopyFromRecordset rstPL
    
    rstPL.Close
    Set rstPL = Nothing
    
    Set dbEngine = Nothing
    
    'Access-DB schlie|fffd|en
    accDB.Close
    Set accDB = Nothing
End Sub


Sub ResetKalkulator()
'macht einen kompletten Reset vom Kalkulator, incl. allen Produkten, Konditionen, Kunden

Dim Zeile As Integer

    Application.ScreenUpdating = False

'Artikel l|fffd|schen
    'Anfang VMware finden
    Zeile = 1
    Do
        Zeile = Zeile + 1
    Loop Until Worksheets(TKalkulator).Cells(Zeile, SpHersteller) = "Start VMware"

    'VMware Artikel l|fffd|schen
    Zeile = Zeile + 1
    Do While Worksheets(TKalkulator).Cells(Zeile, SpHersteller) <> ""
        Worksheets(TKalkulator).Rows(Zeile).Delete Shift:=xlUp
    Loop

    'Anfang Veeam finden
    Do
        Zeile = Zeile + 1
    Loop Until Worksheets(TKalkulator).Cells(Zeile, SpHersteller) = "Start Veeam"
    
    'Veeam Artikel l|fffd|schen
    Zeile = Zeile + 1
    Do While Worksheets(TKalkulator).Cells(Zeile, SpHersteller) <> ""
        Worksheets(TKalkulator).Rows(Zeile).Delete Shift:=xlUp
    Loop
    

'allgemein Kunde
    'Kundennummer
    Range("Name_KundeNr") = ""
    Range("Name_GroupID") = ""
    
    'Name + Anschrift
    Range("Name_Kunde_Name") = ""
    Range("Name_Kunde_Strasse") = ""
    Range("Name_Kunde_PlzOrt") = ""
    
    'Endkunde
    Range("Name_Endkunde") = ""
    
    'Angebot
    Range("Name_AngebotVom") = Date
    If Not IstKundenversion Then
        Range("Name_GueltigBis") = Date + 28
    End If
    Range("Name_HinweiseZumAngebot") = ""
    
'VMware
    Range("Name_Kunde_Kondi_VMware_vSphere") = ""
    Range("Name_Kunde_Kondi_VMware_NvSphere") = ""
    Range("Name_Kunde_Kondi_VMware_SnS") = ""
    Range("Name_Kunde_Kondi_VMware_Essentials") = ""
    Range("Name_Kunde_Kondi_VMware_Workstation") = ""
    Range("Name_Kunde_Kondi_VMware_PSO") = ""
    Range("Name_Kunde_Kondi_VMware_Renewal") = ""
    Range("Name_Kunde_Kondi_VMware_Status") = ""
    
    Range("Name_OranNummer") = ""
    Worksheets(TKalkulator).cmdOranFreigabe.Visible = False
    Range("Name_lblOranNummer") = ""
     
    'ORAN-Freigaben
    Call OranFreigabenRuecksetzen
    
    'Einstellungen
    Range("Name_VMware_Maintenance") = "Production SnS"
    Range("Name_VMware_Kundenart") = "Commercial"
    Range("Name_VMware_Support") = "1 Jahr Support & Subscription"
    
    Range("Name_lbl_VPP_MembershipID") = ""
    Range("Name_VPP_MembershipID") = ""
    Range("Name_lbl_VPP_alt") = ""
    Range("Name_VPP_alt") = ""
    Range("Name_lblOranNummer") = ""
    Range("Name_OranNummer") = ""
    
    Worksheets(TKalkulator).optCpp = True
    
'Veeam
    Range("Name_Kunde_Kondi_Veeam_Veeam") = ""
    Range("Name_Kunde_Kondi_Veeam_SnS") = ""
    Range("Name_Kunde_Kondi_Veeam_Renewal") = ""
    Range("Name_Kunde_Kondi_Veeam_Status") = ""
        
    Range("Name_Veeam_Maintenance") = "Basic SnS"
    Range("Name_Veeam_Projektmeldung") = "Projektmeldung Nein"
    Range("Name_Veeam_Kundenart") = "Standard"
    Range("Name_Veeam_Support") = "1 Jahr Support & Subscription"
        
'Angebot
    Range("Name_AngebotNummer") = ""
    Range("Name_AngebotVersion") = ""
    'NEU: Angebot im Kalkulator direkt
    Worksheets(TKalkulator).Cells(17, 7) = ""
    'end neu

    Cells.EntireRow.Hidden = False

    Application.ScreenUpdating = True
End Sub



Sub VeeamEinAusBlenden()
Dim Zeile As Integer

    If IstKundenversion Then
        Worksheets(TKalkulator).Unprotect (KalkulatorPW)
    End If

    Zeile = Application.WorksheetFunction.Match("Start Veeam", Worksheets(TKalkulator).Columns(SpHersteller), 0)

    Application.ScreenUpdating = False

    Zeile = Zeile + 1
    Do While Worksheets(TKalkulator).Cells(Zeile, SpHersteller) = "Veeam"
        
        Worksheets(TKalkulator).Rows(Zeile).EntireRow.Hidden = Cells(Zeile, 29) = "ausblenden"
        
        If Not Worksheets(TKalkulator).Rows(Zeile).EntireRow.Hidden Then
        
            'die Beschreibungen k|fffd|nnen mit Zeilenumbruch sein. Um dann die Zeile hoch genug zu machen, kommt hier der AutoFit
            Rows(Zeile).EntireRow.AutoFit
            
             'weil dadurch auch die Zeilenh|fffd|he zu gering werden k|fffd|nnte, kommt hier die evtl. Erh|fffd|hung
            If Rows(Zeile).RowHeight < 22.5 Then
                Rows(Zeile).RowHeight = 22.5
            End If
        
        End If
        
        Zeile = Zeile + 1
    Loop
    
    Application.ScreenUpdating = True
    
    If IstKundenversion Then
        Worksheets(TKalkulator).Protect (KalkulatorPW)
    End If
End Sub


Sub CheckAufAdvantagePlus()
'|fffd|berpr|fffd|ft, ob alle Eintragungen f|fffd|r Advantage+, also
'ProductPlatform, PlatformGroup und ProductGroup zugeordnet sind.
'Falls nicht, wird nur ein Hinweis ausgegeben. Die Zuordnung muss dann separat erfolgen.

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstQry As Object     ' AS DAO.Recordset
Dim SQLString As String

    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"))
    
    'ProductPlatform
    SQLString = "SELECT tblVMwareProductPlatform.ProductPlatform " & _
            "FROM tblVMwareProductPlatform " & _
            "WHERE (((tblVMwareProductPlatform.AdvantagePlus) Is Null))"

    Set rstQry = accDB.OpenRecordset(SQLString)

    If Not rstQry.EOF Then
        MsgBox ("Product Platforms ohne Advantage+ -Zuordnung!")
    End If

    'PlatformGroup
    SQLString = "SELECT tblVMwarePlatformGroup.PlatformGroup " & _
            "FROM tblVMwarePlatformGroup " & _
            "WHERE (((tblVMwarePlatformGroup.ProductGroup) Is Null)) OR (((tblVMwarePlatformGroup.AdvantagePlus) Is Null)) OR (((tblVMwarePlatformGroup.AdvantagePlus)=True) AND ((tblVMwarePlatformGroup.AdvantagePlusDisount) Is Null))"
    
    Set rstQry = accDB.OpenRecordset(SQLString)

    If Not rstQry.EOF Then
        MsgBox ("Platform Groups ohne Advantage+ -Zuordnung!")
    End If

    'ProductGroup
    SQLString = "SELECT tblVMwareProductGroup.ProductGroup " & _
            "FROM tblVMwareProductGroup " & _
            "WHERE (((tblVMwareProductGroup.Division) Is Null Or (tblVMwareProductGroup.Division)=""""))"

    Set rstQry = accDB.OpenRecordset(SQLString)

    If Not rstQry.EOF Then
        MsgBox ("Product Groups ohne Advantage+ -Zuordnung!")
    End If

'fertig, aufr|fffd|umen
    rstQry.Close
    Set rstQry = Nothing
    
    accDB.Close
    Set accDB = Nothing
    Set dbEngine = Nothing
End Sub


Attribute VB_Name = "mdlVMware"
Option Explicit


Sub VmwarePreislisteEinlesen()
'liest die original VMware Preislisten ein und aktualisiert damit die Access-DB

'Eine Annahme ist, dass EUR und USD einen identischen Aufbau haben und jedes Produkt in beiden Tabellen in der gleichen Zeile ist.
'Dabei wird die EUR-Tabelle als Master genommen, von der USD-Tabelle wird nur der List Price USD genommen.

Const StartZeile As Integer = 8

Dim FDlg As FileDialog
Dim SelItem As Variant

Dim WbEur As Workbook, WbUsd As Workbook, wbXXX As Workbook

Dim Zeile As Integer, MaxZeile As Integer

Dim Durchgang As Byte   'erster Durchgange geht auf die A-xxx Tabellen, 2. Durchgang auf die D-Tabellen
Dim TabNameEur As String
Dim TabNameUsd As String
Dim TabNameChanges As String, Tabelle As Worksheet
Dim SpaltePrice As Integer, SpalteDiscount As Integer, SpalteDealband1 As Integer, SpalteDealband2 As Integer
Dim ZeileUsd As Integer

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object

Dim SQLString As String

Dim PartNumber As String, PlatformGroup As String, ProductPlatform As String, ProductFamily As String, Product As String, Comments As String, PriceChange As Variant, ListPriceEur As Double, ListPriceUsd As Double, Discount As Double, Typ As String, Dealband1 As Double, Dealband2 As Double
Dim ListenTyp As String     'unterscheidet, ob es sich um eine EUR oder eine USD Liste handelt



Dim Test As String

    MsgBox ("Die Preise m|fffd|ssen immer mit beiden Preislisten, EUR und USD, aktualisiert werden." & vbCrLf & _
            "Bitte markiere deshalb im folgenden Dialog beide Preislisten.")

    Set FDlg = Application.FileDialog(msoFileDialogOpen)
    FDlg.AllowMultiSelect = True
    FDlg.Filters.Clear
    FDlg.Filters.Add "Excel-Dateien", "*.xls; *.xlsx"
    'FDlg.FilterIndex = 2
    FDlg.Title = "VMware-Preislisten ausw|fffd|hlen"
    If FDlg.Show Then
    
        If FDlg.SelectedItems.Count = 2 Then
        
            For Each SelItem In FDlg.SelectedItems
            
                Workbooks.Open Filename:=SelItem
                
                Set wbXXX = ActiveWorkbook
            
                If TabelleExistiert(wbXXX, "A-EUR") Then
                    Set WbEur = wbXXX
                Else
                    If TabelleExistiert(wbXXX, "A-USD") Then
                        Set WbUsd = wbXXX
                    Else
                        MsgBox ("Anscheinend ein falsche Datei: Kein brauchbares Tabellenblatt gefunden. Programm bricht ab.")
                        Exit Sub
                    End If
                    
                End If
                           
            Next SelItem
            
            MsgBox ("Das Einlesen wird einige Minuten ben|fffd|tigen, siehe den Zeilenz|fffd|hler rechts unten")
            
    '-----Variante 1
            'Verbindung zur Access-DB erstellen
            Set accDB = CreateObject("Access.Application")
            accDB.OpenCurrentDatabase ThisWorkbook.Worksheets(TUpdates).Range("Name_PfadAccessDB"), True
            
    '----Variante 2
    '        On Error Resume Next
    '        Set dbengine !!!!!!!!!!! fehlt!!!!!
    '        Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"), True)
    
    '        If Err.Number <> 0 Then
    '            MsgBox ("Fehler: " & Err.Number & " " & Err.Description)
    '            Exit Sub
    '        End If
    '        On Error GoTo 0
    '--------------
            
            
            
        'alle "End-of-Life" |fffd|ndern
            
            'Tabellenblattname finden
            For Each Tabelle In WbEur.Worksheets
                If Left(Tabelle.Name, 11) = "All Changes" Then
                    TabNameChanges = Tabelle.Name
                End If
            Next Tabelle
            
            'Startzeile
            Zeile = 4
            
            Do While WbEur.Worksheets(TabNameChanges).Cells(Zeile, 1) <> ""
            
                Application.StatusBar = "All Changes " & " Zeile " & Zeile
            
                If WbEur.Worksheets(TabNameChanges).Cells(Zeile, 1) = "End-of_Life" Then
                        
                    PartNumber = WbEur.Sheets(TabNameChanges).Cells(Zeile, 6)
                    PriceChange = DateSerial(Left(WbEur.Sheets(TabNameChanges).Cells(Zeile, 8), 4), Mid(WbEur.Sheets(TabNameChanges).Cells(Zeile, 8), 6, 2), Right(WbEur.Sheets(TabNameChanges).Cells(Zeile, 8), 2))
                    
                    SQLString = "UPDATE tblPreislisteVMware SET GueltigBis=" & DatumSQL(PriceChange) & " , " & _
                                                                "GueltigAb="""" " & _
                                                                "WHERE PartNumber=""" & PartNumber & """"
                    accDB.DoCmd.RunSQL SQLString
                End If
            
                Zeile = Zeile + 1
            Loop
            
            
        'EOL-Liste verarbeiten
            Zeile = 4
            
            Do While WbEur.Worksheets("EOL").Cells(Zeile, 1) <> ""
            
                Application.StatusBar = "EOL " & " Zeile " & Zeile
                     
                PartNumber = WbEur.Sheets("EOL").Cells(Zeile, 3)
                
                'das Datum in Spalte 4 ist meistens als Text, manchmal als Datum formatiert. Das wird hier in der "If .. Then" abgefangen
                If IsDate(WbEur.Sheets("EOL").Cells(Zeile, 4)) Then
                    PriceChange = WbEur.Sheets("EOL").Cells(Zeile, 4)
                Else
                    PriceChange = DateSerial(Left(WbEur.Sheets("EOL").Cells(Zeile, 4), 4), Mid(WbEur.Sheets("EOL").Cells(Zeile, 4), 6, 2), Right(WbEur.Sheets("EOL").Cells(Zeile, 4), 2))
                End If
                
                
                SQLString = "UPDATE tblPreislisteVMware SET GueltigBis=" & DatumSQL(PriceChange) & " , " & _
                                                            "GueltigAb="""" " & _
                                                            "WHERE PartNumber=""" & PartNumber & """"
                accDB.DoCmd.RunSQL SQLString
             
            
                Zeile = Zeile + 1
            Loop
        
        
            
            
        'alle abgelaufenen Daten l|fffd|schen
            accDB.DoCmd.RunSQL "DELETE FROM tblPreislisteVMware WHERE GueltigBis<" & DatumSQL(Date)
            
            
        'die Preislisten durchlaufen
            For Durchgang = 1 To 2      'macht zwei Durchg|fffd|nge, um die Tabellen A oder D zu durchlaufen
            
                If Durchgang = 1 Then
                    TabNameEur = "A-EUR"
                    TabNameUsd = "A-USD"
                    SpaltePrice = 8
                    SpalteDiscount = 9
                    SpalteDealband1 = 11
                    SpalteDealband2 = 12
                Else
                    TabNameEur = "D"
                    TabNameUsd = "D"
                    SpaltePrice = 11
                    SpalteDiscount = 12
                    SpalteDealband1 = 14
                    SpalteDealband2 = 15
                End If
                
                Zeile = StartZeile
                MaxZeile = WbEur.Sheets(TabNameEur).Cells(StartZeile, 6).End(xlDown).Row
                
                'wbEUR.Sheets("A-EUR").Activate
                'wbUSD.Sheets("A-USD").Activate
                DoEvents    'braucht's, weil sonst f|fffd|r den Zeilenz|fffd|hler das Workbook nicht vern|fffd|nftig zu sehen ist.
                
                Do While Not WbEur.Sheets(TabNameEur).Cells(Zeile, 1) = ""
                
                    Application.StatusBar = "Durchgang " & Durchgang & " Zeile " & Zeile & " / " & MaxZeile
                    
                    'die VMware-Liste hat Doubletten. What the fuck! Da muss ich eine Abfrage reinbauen, ob das Produkt schon mal vorgekommen ist.
                    If Application.WorksheetFunction.CountIf(WbEur.Sheets(TabNameEur).Range(WbEur.Sheets(TabNameEur).Cells(StartZeile, 6), WbEur.Sheets(TabNameEur).Cells(Zeile - 1, 6)), WbEur.Sheets(TabNameEur).Cells(Zeile, 6)) = 0 Then
                    
                        'die Werte aus der Preisliste in Variablen schreiben
                        PartNumber = WbEur.Sheets(TabNameEur).Cells(Zeile, 6)
                        PlatformGroup = WbEur.Sheets(TabNameEur).Cells(Zeile, 1)
                        ProductPlatform = WbEur.Sheets(TabNameEur).Cells(Zeile, 2)
                        ProductFamily = UCase(WbEur.Sheets(TabNameEur).Cells(Zeile, 3))
                        Product = WbEur.Sheets(TabNameEur).Cells(Zeile, 4)
                        Comments = WbEur.Sheets(TabNameEur).Cells(Zeile, 5)
                        
                        If WbEur.Sheets(TabNameEur).Cells(Zeile, 7) = "" Then
                            PriceChange = Null
                        Else
                            'PriceChange = DateSerial(Left(WbEur.Sheets(TabNameEur).Cells(Zeile, 7), 4), Mid(WbEur.Sheets(TabNameEur).Cells(Zeile, 7), 6, 2), Right(WbEur.Sheets(TabNameEur).Cells(Zeile, 7), 2))
                            PriceChange = WbEur.Sheets(TabNameEur).Cells(Zeile, 7)
                        End If
                        
                        ListPriceEur = WbEur.Sheets(TabNameEur).Cells(Zeile, SpaltePrice)
                        
                        'ZeileUsd = Match(PartNumber, wbUSD.Sheets(TabNameUsd).Columns(6), 0)
                        'ListPriceUsd = wbUSD.Sheets(TabNameUsd).Cells(ZeileUsd, SpaltePrice)
                        
'Debug.Print Application.WorksheetFunction.VLookup(PartNumber, wbUSD.Sheets(TabNameUsd).Range("F:O"), SpaltePrice - 5, False)
                        
                        ListPriceUsd = Application.WorksheetFunction.VLookup(PartNumber, WbUsd.Sheets(TabNameUsd).Range("F:O"), SpaltePrice - 5, False)
                        Discount = WbEur.Sheets(TabNameEur).Cells(Zeile, SpalteDiscount) / 100
                        
                        Dealband1 = WbEur.Sheets(TabNameEur).Cells(Zeile, SpalteDealband1)
                        Dealband2 = WbEur.Sheets(TabNameEur).Cells(Zeile, SpalteDealband2)
                        
                    'der Typ ist komplizierter ...
                        'erst mal die einfache Zuordnung machen, die sich am Discount orientiert
                        Select Case Discount
                            Case 0.1
                                Typ = "SnS"
                            Case 0.15
                                Typ = "vSphere"
                            Case 0.18
                                Typ = "NvSphere"
                            Case Else
                                Typ = "SnS"     'den hab ich noch aus dem alten Automat
                        End Select
                        
                        'dann die Workstations setzen
                        If (ProductFamily = "FUSION" Or ProductFamily = "WORKSTATION") And (Discount <> 0.1) Then
                            Typ = "Workstation"
                        End If
                            
                        'dann noch die Essentials
                        'laut E-Mail von Daniele am 13.08.2018 10:52 gibt es nur vier einzelne Produkte daf|fffd|r:
                        If PartNumber = "VS6-ESSL-KIT-A" Or _
                                PartNumber = "VS6-ESSL-KIT-C" Or _
                                PartNumber = "VS6-ESP-KIT-A" Or _
                                PartNumber = "VS6-ESP-KIT-C" Then
                            Typ = "Essentials"
                        End If
                    'fertig mit den Typen
                        
                    
                        If Durchgang = 1 Or (Durchgang = 2 And ProductFamily = "AIRWATCH CLOUD") Then
                    
                            'Pr|fffd|fen, ob das Produkt schon da ist
                            If IsNull(accDB.DLookup("[PartNumber]", "tblPreislisteVMware", "PartNumber='" & PartNumber & "'")) Then      'wenn er nicht da ist
                                'neuen Datensatz schreiben
                                SQLString = "INSERT INTO tblPreislisteVMware (PartNumber, PlatformGroup, ProductPlatform, ProductFamily, Product, Comments,  ListPriceEur, ListPriceUsd, Discount, Typ, Dealband1, Dealband2) " & _
                                                        "VALUES (""" & PartNumber & """, """ & PlatformGroup & """, """ & ProductPlatform & """, """ & ProductFamily & """, """ & Product & """, """ & Comments & """, " & Str(ListPriceEur) & ", " & Str(ListPriceUsd) & ", " & Str(Discount) & ", """ & Typ & """, " & Str(Dealband1) & ", " & Str(Dealband2) & ")"
                                accDB.DoCmd.RunSQL SQLString
            
                            Else
                                If IsNull(PriceChange) Then     'wenn es keine Preis|fffd|nderung gibt (kein Termin daf|fffd|r),
                                    ' dann sofort updaten
                                    SQLString = "UPDATE tblPreislisteVMware SET PlatformGroup=""" & PlatformGroup & """, " & _
                                                                                        "ProductPlatform=""" & ProductPlatform & """, " & _
                                                                                        "ProductFamily=""" & ProductFamily & """, " & _
                                                                                        "Product=""" & Product & """, " & _
                                                                                        "Comments=""" & Comments & """, " & _
                                                                                        "ListPriceEur=" & Str(ListPriceEur) & ", " & _
                                                                                        "ListPriceUsd=" & Str(ListPriceUsd) & ", " & _
                                                                                        "Discount=" & Str(Discount) & ", " & _
                                                                                        "Typ=""" & Typ & """, " & _
                                                                                        "Dealband1=" & Str(Dealband1) & ", " & _
                                                                                        "Dealband2=" & Str(Dealband2) & " " & _
                                                                            "WHERE PartNumber=""" & PartNumber & """"
                                    
                                    accDB.DoCmd.RunSQL SQLString
                                Else
                                    'den alten Datensatz mit dem Ablauf-Termin versehen
                                    accDB.DoCmd.RunSQL "UPDATE tblPreislisteVMware SET GueltigBis=" & DatumSQL(PriceChange - 1) & " , " & _
                                                                                        "GueltigAb="""" " & _
                                                                            "WHERE PartNumber=""" & PartNumber & """"
            
                                    'den neuen Datensatz neu reinnehmen
                                    SQLString = "INSERT INTO tblPreislisteVMware (PartNumber, PlatformGroup, ProductPlatform, ProductFamily, Product, Comments, GueltigAb, ListPriceEur, ListPriceUsd, Discount, Typ, Dealband1, Dealband2) " & _
                                                        "VALUES (""" & PartNumber & """, """ & PlatformGroup & """, """ & ProductPlatform & """, """ & ProductFamily & """, """ & Product & """, """ & Comments & """, " & DatumSQL(PriceChange) & ", " & Str(ListPriceEur) & ", " & Str(ListPriceUsd) & ", " & Str(Discount) & ", """ & Typ & """, " & Str(Dealband1) & ", " & Str(Dealband2) & ")"
                                    accDB.DoCmd.RunSQL SQLString
                                
                                End If
                            End If
        
                        End If
        
        
        
                    End If
    
'Debug.Print Zeile
                    Zeile = Zeile + 1
                Loop
    
            Next Durchgang



            'Updates aktualisieren
            accDB.DoCmd.RunSQL "UPDATE tblUpdates SET Dateiname=""" & WbEur.Name & """ , " & _
                                                                                "Wann=" & DatumZeitSQL(Now) & ", " & _
                                                                                "VonWem=""" & Environ("Username") & """ " & _
                                                                                "WHERE Tabelle=""VMware Preisliste EUR"""
                                                                                
            accDB.DoCmd.RunSQL "UPDATE tblUpdates SET Dateiname=""" & WbUsd.Name & """ , " & _
                                                                                "Wann=" & DatumZeitSQL(Now) & ", " & _
                                                                                "VonWem=""" & Environ("Username") & """ " & _
                                                                                "WHERE Tabelle=""VMware Preisliste USD"""


            'Excel schlie|fffd|en
            WbEur.Close savechanges:=False
            Set WbEur = Nothing
            WbUsd.Close savechanges:=False
            Set WbUsd = Nothing
            Set wbXXX = Nothing

            'Access-DB schlie|fffd|en
            'accDB.CloseCurrentDatabase
    '----Variante 1
            accDB.Quit
            
    '----Variante 2
            'accDB.Close
    '----
            Set accDB = Nothing

        Else
            MsgBox ("Falsche Anzahl an Dateien ausgew|fffd|hlt, Einlesen nicht m|fffd|glich")
        End If
        
        Application.StatusBar = False
        
'zum Schluss muss die Product Platform |fffd|berpr|fffd|ft werden, ob es da was neues gibt.
        Call CheckProductPlatform
        
    Else
        MsgBox ("keine Preisliste gew|fffd|hlt")
    End If

End Sub





Sub PreislisteVmwareNachKalkulatorKopieren()

    Call AccessDatenNachExcelKopieren("tblPreislisteVmware", TPreislisteVmware)
End Sub


Sub ImportSupportTabelle()
'importiert die Support-Tabelle in die Access-DB

Const StartZeile As Integer = 8

Dim FDlg As FileDialog
Dim SelItem As Variant

'Dim wbEUR As Workbook, wbUSD As Workbook, wbXXX As Workbook

Dim Zeile As Integer, Spalte As Integer

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object

Dim PartNumber As String, SupportNumber As String, Maintenance As String, Dauer As String
Dim Speichern As Boolean

    Set FDlg = Application.FileDialog(msoFileDialogOpen)
    FDlg.AllowMultiSelect = False
    FDlg.Filters.Clear
    FDlg.Filters.Add "Excel-Dateien", "*.xls; *.xlsx"
    'FDlg.FilterIndex = 2
    FDlg.Title = "VMware-Support Zuordnungen ausw|fffd|hlen"
    If FDlg.Show Then
    
        For Each SelItem In FDlg.SelectedItems
            
            Workbooks.Open Filename:=SelItem
            
    '-----Variante 1
            'Verbindung zur Access-DB erstellen
            Set accDB = CreateObject("Access.Application")
            accDB.OpenCurrentDatabase Range("Name_PfadAccessDB"), True
            
    '----Variante 2
    '        On Error Resume Next
    '        Set dbengine !!!!!!!!!!! fehlt!!!!!
    '        Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"), True)
    
    '        If Err.Number <> 0 Then
    '            MsgBox ("Fehler: " & Err.Number & " " & Err.Description)
    '            Exit Sub
    '        End If
    '        On Error GoTo 0
    '--------------
            
            
            'alle Daten l|fffd|schen
            accDB.DoCmd.RunSQL "DELETE FROM tblVmwareSupport"
            
            Zeile = StartZeile
            
            Worksheets("IMPORT").Activate
            
            DoEvents    'braucht's, weil sonst f|fffd|r den Zeilenz|fffd|hler das Workbook nicht vern|fffd|nftig zu sehen ist.
            
            Do While Not Cells(Zeile, 1) = ""
            
                Application.StatusBar = "Zeile " & Zeile
                
                PartNumber = Cells(Zeile, 1)
                                    
                If Mid(PartNumber, Len(PartNumber) - 1, 1) <> "L" Then      'die LEvels rausschmei|fffd|en, weil die identisch mit der normalen Nummer sind
                    
                    For Spalte = 3 To 13 Step 2         'die Spalten mit den Supportnummern durchlaufen
                 
                        SupportNumber = Cells(Zeile, Spalte)
                 
                        If SupportNumber <> "" Then
                 
                            'die Nummer analysieren, wo die hin geh|fffd|rt
                            Speichern = True
                            If InStr(SupportNumber, "-G-") > 0 Then
                                Maintenance = "Basic"
                                Dauer = "1Y"
                            Else
                                If InStr(SupportNumber, "-P-") > 0 Then
                                    Maintenance = "Production"
                                    Dauer = "1Y"
                                Else
                                    If InStr(SupportNumber, "-3G-") > 0 Or InStr(SupportNumber, "-3GSSS") > 0 Then
                                        Maintenance = "Basic"
                                        Dauer = "3Y"
                                    Else
                                        If InStr(SupportNumber, "-3P-") > 0 Or InStr(SupportNumber, "-3PSSS") > 0 Then
                                            Maintenance = "Production"
                                            Dauer = "3Y"
                                        Else
                                            If InStr(SupportNumber, "-2M-G") > 0 Or InStr(SupportNumber, "-2M-A-G") > 0 Then
                                                Maintenance = "Basic"
                                                Dauer = "2M"
                                            Else
                                                If InStr(SupportNumber, "-2M-P") > 0 Or InStr(SupportNumber, "-2M-A-P") > 0 Then
                                                    Maintenance = "Production"
                                                    Dauer = "2M"
                                                Else
                                                    If InStr(SupportNumber, "1PAK") > 0 Then
                                                        Maintenance = "Basic"
                                                        Dauer = "1I"
                                                    Else
                                                        If InStr(SupportNumber, "3PAK") > 0 Then
                                                            Maintenance = "Basic"
                                                            Dauer = "3I"
                                                        Else
                                                            If InStr(SupportNumber, "5PAK") > 0 Then
                                                                Maintenance = "Basic"
                                                                Dauer = "5I"
                                                            Else
                                                                'MsgBox ("Fehler in Zeile " & Zeile & " Spalte " & Spalte & ": Nummer nicht zerlegbar")
                                                                Speichern = False
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                    
                           'neuen Datensatz schreiben
                           If Speichern Then
                               accDB.DoCmd.RunSQL "INSERT INTO tblVmwareSupport (PartNumber, SupportNumber, Maintenance, Dauer) " & _
                                                   "VALUES (""" & PartNumber & """, """ & SupportNumber & """, """ & Maintenance & """, """ & Dauer & """)"
                           End If
                        End If
                       
                    Next Spalte
    
                End If

                Zeile = Zeile + 1
            Loop

            'Excel schlie|fffd|en
            ActiveWorkbook.Close savechanges:=False
            
            'Updates aktualisieren
            accDB.DoCmd.RunSQL "UPDATE tblUpdates SET Dateiname=""" & Mid(SelItem, InStrRev(SelItem, "\") + 1) & """ , " & _
                                                                                "Wann=" & DatumZeitSQL(Now) & ", " & _
                                                                                "VonWem=""" & Environ("Username") & """ " & _
                                                                                "WHERE Tabelle=""VMware Support-Zuordnung"""
            
            
        Next SelItem
            
        
            
            
        'Access-DB schlie|fffd|en
        'accDB.CloseCurrentDatabase
'----Variante 1
        accDB.Quit
        
'----Variante 2
        'accDB.Close
'----
        Set accDB = Nothing

        Application.StatusBar = False
        
    Else
        MsgBox ("keine Supportliste gew|fffd|hlt")
    End If
End Sub




Sub SupportzuordnungenVmwareNachKalkulatorKopieren()

    Call AccessDatenNachExcelKopieren("tblVmwareSupport", TSupportzuordnungenVmware)
End Sub


Sub VppPunkteVmwareNachKalkulatorKopieren()

    Call AccessDatenNachExcelKopieren("tblVMwareVPP", TVppPoints)
End Sub


Sub ImportVppTabelle()
'importiert die VPP-Punkte-Tabelle in die Access-DB

Const StartZeile As Integer = 18

Dim FDlg As FileDialog
Dim SelItem As Variant
Dim Zeile As Integer, MaxZeile As Integer

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object

Dim PartNumber As String, VppPoints As Long, Eligibility As Boolean
Dim Speichern As Boolean

    Set FDlg = Application.FileDialog(msoFileDialogOpen)
    FDlg.AllowMultiSelect = False
    FDlg.Filters.Clear
    FDlg.Filters.Add "Excel-Dateien", "*.xls; *.xlsx", 1
    'FDlg.FilterIndex = 2
    FDlg.Title = "VMware-Support Zuordnungen ausw|fffd|hlen"
    If FDlg.Show Then
    
        For Each SelItem In FDlg.SelectedItems
            
            Workbooks.Open Filename:=SelItem
            
    '-----Variante 1
            'Verbindung zur Access-DB erstellen
            Set accDB = CreateObject("Access.Application")
            accDB.OpenCurrentDatabase ThisWorkbook.Worksheets(TUpdates).Range("Name_PfadAccessDB"), True
            
    '----Variante 2
    '        On Error Resume Next
    '        Set dbengine !!!!!!!!!!! fehlt!!!!!
    '        Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"), True)
    
    '        If Err.Number <> 0 Then
    '            MsgBox ("Fehler: " & Err.Number & " " & Err.Description)
    '            Exit Sub
    '        End If
    '        On Error GoTo 0
    '--------------
            
            'alle Daten l|fffd|schen
            accDB.DoCmd.RunSQL "DELETE FROM tblVMwareVPP"
            
            Zeile = StartZeile
            MaxZeile = Cells(StartZeile, 1).End(xlDown).Row
            
            DoEvents    'braucht's, weil sonst f|fffd|r den Zeilenz|fffd|hler das Workbook nicht vern|fffd|nftig zu sehen ist.
            
            Do While Not Cells(Zeile, 1) = ""
            
                Application.StatusBar = "Zeile " & Zeile & " / " & MaxZeile
                
                PartNumber = Cells(Zeile, 2)
                VppPoints = Cells(Zeile, 4)
                Eligibility = Cells(Zeile, 5) = "Y"
                                    
                    
                'neuen Datensatz schreiben
                
                accDB.DoCmd.RunSQL "INSERT INTO tblVMwareVPP (PartNumber, VppPoints, VppDiscountEligibility) " & _
                                        "VALUES (""" & PartNumber & """, " & VppPoints & ",  " & IIf(Eligibility, "TRUE", "FALSE") & ")"
                          

                Zeile = Zeile + 1
            Loop

            'Excel schlie|fffd|en
            ActiveWorkbook.Close savechanges:=False
            
            'Updates aktualisieren
            accDB.DoCmd.RunSQL "UPDATE tblUpdates SET Dateiname=""" & Mid(SelItem, InStrRev(SelItem, "\") + 1) & """ , " & _
                                                                                "Wann=" & DatumZeitSQL(Now) & ", " & _
                                                                                "VonWem=""" & Environ("Username") & """ " & _
                                                                                "WHERE Tabelle=""VMware VPP Punkte"""
                        
                        
            Zeile = Application.WorksheetFunction.Match("VMware VPP Punkte nach Access", Worksheets(TUpdates).Columns(1), 0)
            Worksheets(TUpdates).Cells(Zeile, 2) = Mid(SelItem, InStrRev(SelItem, "\") + 1)
            Worksheets(TUpdates).Cells(Zeile, 3) = Now
            Worksheets(TUpdates).Cells(Zeile, 4) = Environ("Username")
                        
                        
        Next SelItem
            
        'Access-DB schlie|fffd|en
        'accDB.CloseCurrentDatabase
'----Variante 1
        accDB.Quit
        
'----Variante 2
        'accDB.Close
'----
        Set accDB = Nothing

        Application.StatusBar = False
        
        Call VppPunkteVmwareNachKalkulatorKopieren
        
        
        
    Else
        MsgBox ("keine VPP-Liste gew|fffd|hlt")
    End If
End Sub


Sub VMwareTagespreislisteErstellen()
'macht aus der allgemeinen Preisliste (mit "g|fffd|ltig ab" und "g|fffd|ltig bis") eine tagesaktuelle Preisliste. Die Daten kommen direkt aus diesem Konfigurator (nicht aus der Access-DB).

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstQry As Object     ' AS DAO.Recordset
Dim SQLString As String
Dim Spalte As Integer

'erstellt Access und dei Abfrage von der Preisliste
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(ThisWorkbook.FullName, False, False, "Excel 12.0")
    
    SQLString = "SELECT PartNumber, PlatformGroup, ProductPlatform, ProductFamily, Product, Comments, ListPriceEur, ListPriceUsd, Discount, Typ, Dealband1, Dealband2 " & _
    "FROM [" & TPreislisteVmware & "$] " & _
    "WHERE ((GueltigAb IS NULL AND GueltigBis IS NULL) OR (GueltigAb<" & DatumSQL(Date) & ") OR (GueltigBis>" & DatumSQL(Date) & "))"
        
    Set rstQry = accDB.OpenRecordset(SQLString)
        
    'erst mal alles l|fffd|schen, was in der Tagespreislsite ist
    Worksheets(TTagespreislisteVmware).Cells.ClearContents
        
    ' Feldnamen |fffd|bernehmen
    For Spalte = 0 To rstQry.Fields.Count - 1
       Worksheets(TTagespreislisteVmware).Cells(1, Spalte + 1) = rstQry.Fields(Spalte).Name
    Next Spalte
    
    ' Inhalt (gesamtes Recordset) in die Tagespreisliste |fffd|bernehmen
    Worksheets(TTagespreislisteVmware).Cells(2, 1).CopyFromRecordset rstQry
    
    'aufr|fffd|umen
    rstQry.Close
    Set rstQry = Nothing
    
    Set dbEngine = Nothing
    
    'Access-DB schlie|fffd|en
    accDB.Close
    Set accDB = Nothing
    
End Sub


Sub CheckProductPlatform()
'pr|fffd|ft, ob neue Product Platforms dazu gekommen sind, und erg|fffd|nzt sie in der Tabelle

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstQry As Object     ' AS DAO.Recordset
Dim rstTbl As Object
Dim SQLString As String
Dim AnzAenderungen As Integer
Dim accApp As Object

    AnzAenderungen = 0

    
'Access vorbereiten
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"))
    
    Set accApp = CreateObject("Access.Application")
    accApp.OpenCurrentDatabase ThisWorkbook.Worksheets(TUpdates).Range("Name_PfadAccessDB"), True
    
    
'Check f|fffd|r neue ProductPlatform
    SQLString = "SELECT PlPP.productplatform, PlPP.PlatformGroup " & _
            "FROM (SELECT DISTINCT tblPreislisteVMWare.ProductPlatform, tblPreislisteVMWare.PlatformGroup " & _
            "FROM tblPreislisteVMWare)  AS PlPP LEFT JOIN tblVMwareProductPlatform ON PlPP.ProductPlatform = tblVMwareProductPlatform.ProductPlatform " & _
            "WHERE (((tblVMwareProductPlatform.ProductPlatform) Is Null))"
    
    Set rstQry = accDB.OpenRecordset(SQLString)
    Set rstTbl = accDB.OpenRecordset("tblVMwareProductPlatform")
    
    Do While Not rstQry.EOF
        rstTbl.addnew
        rstTbl!ProductPlatform = rstQry!ProductPlatform
        rstTbl!PlatformGroup = rstQry!PlatformGroup
        rstTbl!SortKey = Nz(accApp.DMax("[SortKey]", "tblVMwareProductPlatform", "PlatformGroup=""" & rstQry!PlatformGroup & """"), 0) + 1
        rstTbl.Update
        
        AnzAenderungen = AnzAenderungen + 1
        
        rstQry.MoveNext
    Loop
    
    
'Check f|fffd|r neue PlatformGroup
    SQLString = " SELECT PlPP.PlatformGroup " & _
            "FROM (SELECT DISTINCT tblPreislisteVMWare.PlatformGroup " & _
            "FROM tblPreislisteVMWare)  AS PlPP LEFT JOIN tblVMwarePlatformGroup ON PlPP.PlatformGroup = tblVMwarePlatformGroup.PlatformGroup " & _
            "WHERE (((tblVMwarePlatformGroup.PlatformGroup) Is Null))"
            
    Set rstQry = accDB.OpenRecordset(SQLString)
    Set rstTbl = accDB.OpenRecordset("tblVMwarePlatformGroup")
    
    Do While Not rstQry.EOF
        rstTbl.addnew
        rstTbl!PlatformGroup = rstQry!PlatformGroup
        rstTbl.Update
        
        'MsgBox ("Neue Product Platform: " & rstQry!ProductPlatform)
        AnzAenderungen = AnzAenderungen + 1
        
        rstQry.MoveNext
    Loop
       
    
'Check, ob es eine neue Kombination aus ProductPlatform und PlatformGroup gibt
    SQLString = " SELECT DISTINCT tblPreislisteVMWare.PlatformGroup, tblPreislisteVMWare.ProductPlatform " & _
            "FROM tblVMwareProductPlatform RIGHT JOIN tblPreislisteVMWare ON (tblVMwareProductPlatform.ProductPlatform = tblPreislisteVMWare.ProductPlatform) AND (tblVMwareProductPlatform.PlatformGroup = tblPreislisteVMWare.PlatformGroup) " & _
            "WHERE (((tblVMwareProductPlatform.ProductPlatform) Is Null))"

    Set rstQry = accDB.OpenRecordset(SQLString)
    Set rstTbl = accDB.OpenRecordset("SELECT * FROM tblVMwareProductPlatform")
    
    Do While Not rstQry.EOF
        rstTbl.FindFirst "ProductPlatform=""" & rstQry!ProductPlatform & """"
        
        rstTbl.Edit
        rstTbl!PlatformGroup = rstQry!PlatformGroup
        rstTbl.Update
        
        AnzAenderungen = AnzAenderungen + 1
        
        rstQry.MoveNext
    Loop


'Fertig
    
    If AnzAenderungen > 0 Then
        MsgBox ("Bei den ProductPlatforms oder PlatformGroups wurden neue erg|fffd|nzt bzw. |fffd|nderungen vorgenommen. Bitte pflege diese in dem Advantage+ -Tool ein.")
    End If
    
    
    rstQry.Close
    Set rstQry = Nothing
    rstTbl.Close
    Set rstTbl = Nothing
    
    Set accDB = Nothing
    Set dbEngine = Nothing
    
    accApp.Quit
    Set accApp = Nothing
End Sub


Sub AdvantagePlusErstellen()
'liest die Daten aus der Access-DB, Abfrage qryVMwareAdvantagePlus ein, macht daraus eine Excel-Tabelle

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstQry As Object     ' AS DAO.Recordset

Dim Zeile As Integer, MaxZeile As Integer

    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"))
    

    Set rstQry = accDB.OpenRecordset("qryVMwareAdvantagePlus")

    
    'Die Erstellung geht von einem leeren Blatt aus ...
    Worksheets(TAdvantagePlus).Cells.ClearContents
    
    Zeile = 2


    Do While Not rstQry.EOF
    
        'eigentlich sollte es keine schrottigen Daten geben. Wenn ja, werden diese nicht |fffd|bernommen
        If Not (IsNull(rstQry!PGAP) Or IsNull(rstQry!PPAP) Or IsNull(rstQry!Division) Or IsNull(rstQry!ProductGroup)) Then
        
            Worksheets(TAdvantagePlus).Cells(Zeile, 1) = rstQry!Division
            Worksheets(TAdvantagePlus).Cells(Zeile, 2) = rstQry!ProductGroup
            Worksheets(TAdvantagePlus).Cells(Zeile, 3) = rstQry!PlatformGroup
            Worksheets(TAdvantagePlus).Cells(Zeile, 4) = rstQry!ProductPlatform
            Worksheets(TAdvantagePlus).Cells(Zeile, 5) = rstQry!PGAP
            Worksheets(TAdvantagePlus).Cells(Zeile, 6) = rstQry!PGAPD
            Worksheets(TAdvantagePlus).Cells(Zeile, 7) = rstQry!PPAP
            Worksheets(TAdvantagePlus).Cells(Zeile, 8) = rstQry!PPAPD
            
            'der folgende Block schreibt hartcodiert rein, welcher Discountsatz gilt: der von der Product Group oder der von der Product Platform
            If Worksheets(TAdvantagePlus).Cells(Zeile, 5) Then
                Worksheets(TAdvantagePlus).Cells(Zeile, 10) = Worksheets(TAdvantagePlus).Cells(Zeile, 6)
            Else
                If Worksheets(TAdvantagePlus).Cells(Zeile, 7) Then
                    Worksheets(TAdvantagePlus).Cells(Zeile, 10) = Worksheets(TAdvantagePlus).Cells(Zeile, 8)
                End If
            End If
            
            'die Bestimmung, ob bei ORAN registriert, wird erst mal f|fffd|r alle auf FALSCH gesetzt:
            If Worksheets(TAdvantagePlus).Cells(Zeile, 3) <> Worksheets(TAdvantagePlus).Cells(Zeile - 1, 3) And Worksheets(TAdvantagePlus).Cells(Zeile, 5) = -1 Then
                Worksheets(TAdvantagePlus).Cells(Zeile, 9) = False
            End If
            
            If Worksheets(TAdvantagePlus).Cells(Zeile, 4) <> Worksheets(TAdvantagePlus).Cells(Zeile - 1, 4) And Worksheets(TAdvantagePlus).Cells(Zeile, 7) = -1 Then
                Worksheets(TAdvantagePlus).Cells(Zeile, 9) = False
            End If
            
            Zeile = Zeile + 1
        End If
        
        rstQry.MoveNext
    Loop

    MaxZeile = Zeile - 1
    
    rstQry.Close
    Set rstQry = Nothing
    
    Set accDB = Nothing
    Set dbEngine = Nothing



End Sub



Sub OranFreigabenRuecksetzen()
'setzt alle Freigaben der Advantage+ wieder zur|fffd|ck

Dim Zelle As Range

    Set Zelle = Worksheets(TAdvantagePlus).Cells(2, 9)
    Do While Zelle.Row < 1000
        Zelle = False
        Set Zelle = Zelle.End(xlDown)
    Loop
End Sub
Attribute VB_Name = "mdlVMwareSupportNEU"
Option Explicit


Sub ListeErstellen()
'erstellt eine Liste mit den Zuordnungen von Support zu Vertrag.
'Basis sind die Vertragsnummern aus dem Backend und die original Excel-Preisliste von VMware.
'Von den Vertragsnummern im Backend werden die Zuordnungen aus der Preisliste genommen (mittels Reihenfolge: Support kommt immer nach dem Vertrag).
'Die Liste wird gleichzeitig mit den vorhandenen Supportzuordnungen abgeglichen.

'Danach kann die bearbeitete Liste wieder eingelesen werden (noch nicht existent !!!!!!!!)

'derzeitige Fehlerfarben:
'Rot: Supportnummer kommt aus Preisliste, ist aber nicht in alter Liste vorhanden
'Blau: Supportnummer ist in alter Supportliste, aber nicht in VMware-Preisliste vorhanden

Dim rstVertrag As Object  ' DAO.Recordset
Dim rstSupport As Object    'DAO.Recordset
'Dim rstSupportTest As DAO.Recordset
Dim Zeile As Long, Spalte As Integer, HZeile As Long
Dim PLZeile As Long

Dim xlListe As Workbook, xlPl As Workbook
Dim wsListe As Worksheet, wsPL As Worksheet
Dim NummerVergleich As String
Dim SupT1 As String, SupT2 As String, SupU1 As String, SupU2 As String
Dim Pos1 As Byte, Pos2 As Byte, Pos3 As Byte
Dim Weiter As Boolean

Dim SupportGesamt As Long
Dim FDlg As FileDialog
Dim SelItem As Variant

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database

Dim Fehler As String
Dim MaxVertrag As Long

    Fehler = ""

    MsgBox ("Dieses Programm erstellt eine Excel-Tabelle, in der die Vertr|fffd|ge mit den dazugeh|fffd|rigen Supports zusammengestellt werden. " & _
            "Nach der manuellen Bearbeitung kann diese Tabelle dann eingelesen werden." & vbCrLf & _
            "Die Farben bedeuten:" & vbCrLf & _
            "Gelb: Supportnummer bzw. Vertrag kommt aus der VMware-Preisliste, ist aber nicht in alter Supportiste vorhanden" & vbCrLf & _
            "Blau: Supportnummer ist in alter Supportliste, aber nicht in VMware-Preisliste vorhanden." & vbCrLf & vbCrLf & _
            "Rot: Vertrag ist in Kalkulator, aber nicht in VMware-Preisliste vorhanden." & vbCrLf & vbCrLf & _
            "Die Erstellung wird einige Sekunden dauern, der Fortschritt ist links unten zu sehen.")
            
    MsgBox ("Selektiere bitte die vorher eingelesene Original VMware-Preisliste, EUR-Version.")

    Set FDlg = Application.FileDialog(msoFileDialogOpen)
    FDlg.AllowMultiSelect = False
    FDlg.Filters.Clear
    FDlg.Filters.Add "Excel-Dateien", "*.xls; *.xlsx"
    'FDlg.FilterIndex = 2
    FDlg.Title = "EUR-VMware-Preisliste ausw|fffd|hlen"
    If FDlg.Show Then
        For Each SelItem In FDlg.SelectedItems
            Workbooks.Open Filename:=SelItem
            Set xlPl = ActiveWorkbook
        Next SelItem

        If TabelleExistiert(xlPl, "A-EUR") Then
            xlPl.Worksheets("A-EUR").Activate
            Set wsPL = xlPl.Worksheets("A-EUR")

            'die neu zu erstellende Supportliste anlegen
            Workbooks.Add
            Set xlListe = ActiveWorkbook
            Set wsListe = xlListe.ActiveSheet
                
            'Access starten
            Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
            Set accDB = dbEngine.OpenDatabase(ThisWorkbook.Worksheets(TUpdates).Range("Name_PfadAccessDB"))
                            
            'Vertr|fffd|ge setzen
            Set rstVertrag = accDB.OpenRecordset("SELECT DISTINCT PartNumber FROM tblPreislisteVMware WHERE Typ<>""SnS"" AND PartNumber NOT LIKE ""*TLSS*"" AND PartNumber NOT LIKE ""*L?"" AND PartNumber NOT LIKE ""*T?""")
            rstVertrag.movelast
            rstVertrag.movefirst
            MaxVertrag = rstVertrag.RecordCount
                
            'Supportzurodnungen zum Abgleich setzen
            Set rstSupport = accDB.OpenRecordset("SELECT * FROM tblVmwareSupport", dbOpenSnapshot)
    
            Zeile = 2
            SupportGesamt = 0
            Do While Not rstVertrag.EOF
                Application.StatusBar = "Zeile " & Zeile - 1 & " von " & MaxVertrag
                
                'die Vertragsnummer eintragen
                wsListe.Cells(Zeile, 1) = rstVertrag!PartNumber
                
                '... und in Preisliste suchen
                On Error Resume Next
                PLZeile = -1
                PLZeile = Application.WorksheetFunction.Match(rstVertrag!PartNumber, wsPL.Columns(6), 0)
                On Error GoTo 0
                
                'wenn die Vertragsnummer gefunden wurde, dann weiter
                If PLZeile > 0 Then
                    
                    'Test, ob die Vertragsnummer in alter Supporttabelle ist
                    rstSupport.FindFirst "PartNumber=""" & rstVertrag!PartNumber & """"
                    If rstSupport.nomatch Then
                        wsListe.Cells(Zeile, 1).Interior.Color = RGB(255, 255, 0)
                    End If
                    
                    
                    NummerVergleich = Replace(OhneLevel(rstVertrag!PartNumber), "-", "")
                    
                    'sucht die erste Zeile, die nennenswert anders ist; |fffd|berspringen von s|fffd|mtlichen Level- und Tier-Nummern
                    HZeile = PLZeile + 1
                    Do While NummerVergleich = Replace(OhneLevel(wsPL.Cells(HZeile, 6)), "-", "")
                        HZeile = HZeile + 1
                    Loop
                
                    Spalte = 2
                                
                    Weiter = True
                     'Do While InStr(XlPL.activesheet.cells(HZeile, 6), "SSS") > 0      'alte Version, pr|fffd|ft die Artikelnummer, ob Support, anhand von "SSS" ab. Fehler: SUP etc. fallen raus
                     Do While wsPL.Cells(HZeile, 9) = 10       'neue Version, pr|fffd|ft anhand vom Discount, ob Support
                     
                     
                         If Weiter Then
                            'check, ob die Supportnummer zu den vorherigen passt
                            Pos1 = InStr(wsPL.Cells(HZeile, 6), "-")
                            SupU1 = Left(wsPL.Cells(HZeile, 6), Pos1 - 1)
                           
                            If (Spalte > 2 And SupU1 = SupT1) Or (Spalte = 2) Then
                                                
                                'check, ob A oder C passt (weil diese komische Logik drin ist, unbedingt fragen, was das soll!!!!!!!!!!!!!!!!!!!!!!!!!!
                                If CheckAC(rstVertrag!PartNumber) = Right(wsPL.Cells(HZeile, 6), 1) Then
                                                        
                                    'check, wenn 2M, dann muss es ein UG sein
                                    If Left(SupportLaufzeit(wsPL.Cells(HZeile, 6)), 2) = "2M" Then
                                        If CheckUpgrade(rstVertrag!PartNumber) Then
                                        
                                            'Einf|fffd|gen der Supportnummer in Supportliste
                                            wsListe.Cells(Zeile, Spalte) = wsPL.Cells(HZeile, 6)
                                            DoEvents
                                            SupT1 = SupU1
                                            
                                            'Check, ob Supportnummer auch in alter Supportliste drin ist
                                            rstSupport.FindFirst "PartNumber=""" & rstVertrag!PartNumber & """ AND SupportNumber=""" & wsPL.Cells(HZeile, 6) & """"
                                            If rstSupport.nomatch Then
                                                wsListe.Cells(Zeile, Spalte).Interior.Color = RGB(255, 255, 0)
                                            End If
                                            
                                            Spalte = Spalte + 1
                                        End If
                                    Else
                                        'Einf|fffd|gen der Supportnummer in Supportliste
                                        wsListe.Cells(Zeile, Spalte) = wsPL.Cells(HZeile, 6)
                                        DoEvents
                                        SupT1 = SupU1
                                        
                                        'Check, ob Supportnummer auch in alter Supportliste drin ist
                                        rstSupport.FindFirst "PartNumber=""" & rstVertrag!PartNumber & """ AND SupportNumber=""" & wsPL.Cells(HZeile, 6) & """"
                                        If rstSupport.nomatch Then
                                            wsListe.Cells(Zeile, Spalte).Interior.Color = RGB(255, 255, 0)
                                        End If
                                        
                                        Spalte = Spalte + 1
                                    End If
                                Else
                                    Weiter = False
                                End If
                            Else
                                Weiter = False
                            End If
                        End If
                        
                        HZeile = HZeile + 1
                    Loop
                Else
                    Fehler = Fehler & rstVertrag!PartNumber & " ist im Kalkulator, aber nicht in der VMware-Preisliste" & vbCrLf
                    wsListe.Cells(Zeile, 1).Interior.Color = RGB(255, 0, 0)
                End If      'If PLZeile > 0
                                
                                
                'Test, ob Supports in Kalkulator, aber nicht in Preisliste sind
                rstSupport.FindFirst "PartNumber=""" & rstVertrag!PartNumber & """"
                
'Debug.Print rstSupport.nomatch
                
                Do While Not rstSupport.nomatch
                    
                    'in der neuen Liste suchen
                    On Error Resume Next
                    Spalte = -1
                    Spalte = Application.WorksheetFunction.Match(rstSupport!SupportNumber, wsListe.Rows(Zeile), 0)
                    On Error GoTo 0
                    
                    'wenn die nicht gefunden wird, neu anf|fffd|gen
                    If Spalte = -1 Then
                        Spalte = wsListe.Cells(Zeile, 1).End(xlToRight).Column
                        If Spalte > 1000 Then
                            Spalte = 1
                        End If
                        
                        wsListe.Cells(Zeile, Spalte).Offset(0, 1) = rstSupport!SupportNumber
                        wsListe.Cells(Zeile, Spalte).Offset(0, 1).Interior.Color = RGB(100, 100, 255)
                    End If
                    
                    rstSupport.FindNext "PartNumber=""" & rstVertrag!PartNumber & """"
                Loop
                                
                Zeile = Zeile + 1
                rstVertrag.MoveNext
            Loop
    
            wsListe.Range("A1:M1").EntireColumn.AutoFit
        
            wsListe.Cells(1, 1) = "Vertr|fffd|ge"
            wsListe.Cells(1, 2) = "Supports -->"
            wsListe.Range("A1:B1").Font.Bold = True
        
            MsgBox ("Fertig, die Liste wurde erstellt. " & _
                "Bitte korrigiere die Liste manuell (keine Leerzeilen oder Leerspalten erlaubt!) und lese sie dann ein." & vbCrLf & _
                "Die Farben bedeuten:" & vbCrLf & _
                "Gelb: Supportnummer bzw. Vertrag kommt aus der VMware-Preisliste, ist aber nicht in alter Supportiste vorhanden" & vbCrLf & _
                "Blau: Supportnummer ist in alter Supportliste, aber nicht in VMware-Preisliste vorhanden." & vbCrLf & _
                "Rot: Vertrag ist in Kalkulator, aber nicht in VMware-Preisliste vorhanden.")
        
'            If Fehler <> "" Then
'                SetClipboard (Fehler)
'                MsgBox ("Es sind einige Fehler aufgetreten. Diese wurden in die Zwischenablage kopiert.")
'            End If
        
        Else
            MsgBox ("Die Tabelle 'A-EUR' kann nicht gefunden werden. Falsche Preisliste ausgew|fffd|hlt?")
        End If
        
        'Aufr|fffd|umen
        Set wsListe = Nothing
        Set wsPL = Nothing

        xlPl.Close (False)
        Set xlPl = Nothing
        Set xlListe = Nothing
        Set rstVertrag = Nothing

        Application.StatusBar = False

    End If      'If FDlg.Show
End Sub



Function OhneLevel(Nummer As String) As String

    If Left(Right(Nummer, 2), 1) = "L" Or Left(Right(Nummer, 2), 1) = "T" Then  'holt die Levels raus
        OhneLevel = Left(Nummer, Len(Nummer) - 2)
        If Right(OhneLevel, 1) = "-" Then
            OhneLevel = Left(Nummer, Len(Nummer) - 3)
        End If
    Else
        OhneLevel = Nummer
    End If

End Function


Function CheckAC(Nummer As String) As String
'Pr|fffd|ft, ob "A" oder "C" und gibt diesen String zur|fffd|ck
Dim Pos As Byte

    If Right(OhneLevel(Nummer), 1) = "A" Or Right(OhneLevel(Nummer), 1) = "C" Then
        CheckAC = Right(OhneLevel(Nummer), 1)
    Else
        Pos = InStrRev(Nummer, "-")
        If Right(Nummer, Len(Nummer) - Pos) = "APROMO" Then
            CheckAC = "A"
        Else
            If Right(Nummer, Len(Nummer) - Pos) = "PROMO" Then
                CheckAC = "C"
            Else
                If Right(Nummer, Len(Nummer) - Pos) = "APRO" Then
                    CheckAC = "A"
                Else
                    If Right(Nummer, Len(Nummer) - Pos) = "PRO" Then
                        CheckAC = "C"
                    Else
                        If Right(Nummer, Len(Nummer) - Pos) = "AP" Then
                            CheckAC = "A"
                        Else
                            If Right(Nummer, Len(Nummer) - Pos) = "CP" Then
                                CheckAC = "C"
                            Else
                                If Right(Nummer, Len(Nummer) - Pos) = "P" Then
                                    CheckAC = "C"
                                Else
                                    CheckAC = "Fehler"
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End If
    End If

End Function


Function SupportLaufzeit(SupportPN As String) As String
'zieht aus einer Supportnummer den Zeitraum raus

Dim Pos As Byte
Dim StammTeil As String


    Pos = InStr(SupportPN, "-SUP")
    If Pos = 0 Then
        Pos = InStr(SupportPN, "-1PAK")
        If Pos = 0 Then
            Pos = InStr(SupportPN, "-3PAK")
            If Pos = 0 Then
                Pos = InStr(SupportPN, "-5PAK")
                If Pos = 0 Then
                    Pos = InStr(SupportPN, "-2M-P")
                    If Pos = 0 Then
                        Pos = InStr(SupportPN, "-2M-G")
                        If Pos = 0 Then
                            Pos = InStr(SupportPN, "-3P")
                            If Pos = 0 Then
                                Pos = InStr(SupportPN, "-3G")
                                If Pos = 0 Then
                                    Pos = InStr(SupportPN, "-G-")
                                    If Pos = 0 Then
                                        Pos = InStr(SupportPN, "-P-")
                                        If Pos = 0 Then
                                            Pos = InStr(SupportPN, "-GSS")
                                            If Pos = 0 Then
                                                Pos = InStr(SupportPN, "-PSS")
                                                If Pos = 0 Then
                                                    Pos = InStr(SupportPN, "-2MPSS")
                                                    If Pos = 0 Then
                                                        Pos = InStr(SupportPN, "-2MGSS")
                                                        If Pos = 0 Then
                                                            'nix
                                                        Else
                                                            SupportLaufzeit = "2MG"
                                                        End If
                                                    Else
                                                        SupportLaufzeit = "2MP"
                                                    End If
                                                Else
                                                    SupportLaufzeit = "P"
                                                End If
                                             Else
                                                SupportLaufzeit = "G"
                                             End If
                                        Else
                                            SupportLaufzeit = "P"
                                        End If
                                    Else
                                        SupportLaufzeit = "G"
                                    End If
                                Else
                                    SupportLaufzeit = "3G"
                                End If
                            Else
                                SupportLaufzeit = "3P"
                            End If
                        Else
                            SupportLaufzeit = "2MP"
                        End If
                    Else
                        SupportLaufzeit = "2MG"
                    End If
                Else
                    SupportLaufzeit = "5PAK"
                End If
            Else
                SupportLaufzeit = "3PAK"
            End If
        Else
            SupportLaufzeit = "1PAK"
        End If
    Else
        SupportLaufzeit = "SUP"
    End If


    If Pos = 0 Then
        SupportLaufzeit = "Fehler"
    Else
        'StammTeil = Left(SupportPN, Pos - 1)
       ' AC = Right(SupportPN, 1)
    
    End If
End Function


Function CheckUpgrade(Nummer As String) As Boolean
'pr|fffd|ft eine Lizenz, ob es ein Upgrade "UG" ist
Dim VertragStamm As String

    VertragStamm = Nummer
    If Right(VertragStamm, 2) = "L1" Or Right(VertragStamm, 2) = "L2" Or Right(VertragStamm, 2) = "L3" Or Right(VertragStamm, 2) = "L4" Then
        VertragStamm = Left(VertragStamm, Len(VertragStamm) - 2)
        If Right(VertragStamm, 1) = "-" Then
            VertragStamm = Left(VertragStamm, Len(VertragStamm) - 1)
        End If
    End If

    'PROMO raus     !!! muss vor "A und C raus" sein, weil die noch ausgewertet werden !!!!
    If Right(VertragStamm, 5) = "PROMO" Or Right(VertragStamm, 3) = "PRO" Then
        If Right(VertragStamm, 5) = "PROMO" Then
            VertragStamm = Left(VertragStamm, Len(VertragStamm) - 5)    '"PROMO" raus
        Else
            VertragStamm = Left(VertragStamm, Len(VertragStamm) - 3)    'PRO" raus
        End If

        If Right(VertragStamm, 1) = "-" Then
            VertragStamm = Left(VertragStamm, Len(VertragStamm) - 1)
        End If
    End If

    'A und C am Ende raus, und merken
    If Right(VertragStamm, 1) = "A" Or Right(VertragStamm, 1) = "C" Then
        'AC = Right(VertragStamm, 1)
        VertragStamm = Left(VertragStamm, Len(VertragStamm) - 1)
        If Right(VertragStamm, 1) = "-" Then
            VertragStamm = Left(VertragStamm, Len(VertragStamm) - 1)
        End If
    Else    'wenn weder A noch C gehe ich (siehe PROMO) davon aus, dass es ein "C" ist
        'AC = "C"
    End If

    'UG raus
    If (Right(VertragStamm, 2) = "UG") Or (InStr(VertragStamm, "-UG-") > 0) Then
        'VertragStamm = Left(VertragStamm, Len(VertragStamm) - 2)
'            If Right(VertragStamm, 1) = "-" Then
'                VertragStamm = Left(VertragStamm, Len(VertragStamm) - 1)
'            End If
        CheckUpgrade = True
    Else
        CheckUpgrade = False
    End If
End Function


Sub ListeEinlesen()
'liest die oben erstellte Liste in die access-DB ein,
'nachdem sie manuell korrigiert wurde.

'Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database

Dim FDlg As FileDialog
Dim SelItem As Variant

Dim xlListe As Workbook
Dim wsListe As Worksheet

Dim Zeile As Long, Spalte As Integer
Dim SupportNumber As String, Maintenance As String, Dauer As String, PartNumber As String
Dim Speichern As Boolean, Fehler As Boolean
Dim MaxVertrag As Long

    Fehler = False
    
    Set FDlg = Application.FileDialog(msoFileDialogOpen)
    FDlg.AllowMultiSelect = False
    FDlg.Filters.Clear
    FDlg.Filters.Add "Excel-Dateien", "*.xls; *.xlsx"
    FDlg.Title = "Support-Liste ausw|fffd|hlen"
    If FDlg.Show Then
    
        For Each SelItem In FDlg.SelectedItems
            Workbooks.Open Filename:=SelItem
            Set xlListe = ActiveWorkbook
        Next SelItem

        Set wsListe = xlListe.ActiveSheet

        'Access starten
        Set accDB = CreateObject("Access.Application")
        accDB.OpenCurrentDatabase ThisWorkbook.Worksheets(TUpdates).Range("Name_PfadAccessDB"), True
              
        'alle Daten l|fffd|schen
        accDB.DoCmd.RunSQL "DELETE FROM tblVmwareSupport"
                                              
        MaxVertrag = wsListe.Cells(1, 1).End(xlDown).Row
                                              
        Zeile = 2
        
        Do While wsListe.Cells(Zeile, 1) <> ""
            Application.StatusBar = "Zeile " & Zeile - 1 & " von " & MaxVertrag

            PartNumber = wsListe.Cells(Zeile, 1)

            Spalte = 2

            Do While wsListe.Cells(Zeile, Spalte) <> ""

                SupportNumber = Cells(Zeile, Spalte)

                If SupportNumber <> "" Then

                    'die Nummer analysieren, wo die hin geh|fffd|rt
                    Speichern = True
                    
                    If InStr(SupportNumber, "2M-GSSS") > 0 Or InStr(SupportNumber, "2M-G-SSS") Or InStr(SupportNumber, "2M-A-GSSS") Then
                        Maintenance = "Basic"
                        Dauer = "2M"
                    Else
                        If InStr(SupportNumber, "2M-PSSS") > 0 Or InStr(SupportNumber, "2M-P-SSS") Or InStr(SupportNumber, "2M-A-PSSS") Then
                            Maintenance = "Production"
                            Dauer = "2M"
                        Else
                            If InStr(SupportNumber, "-G-") > 0 Or InStr(SupportNumber, "-GSSS") > 0 Then
                                Maintenance = "Basic"
                                Dauer = "1Y"
                            Else
                                If InStr(SupportNumber, "-P-") > 0 Or InStr(SupportNumber, "-PSSS") > 0 Then
                                    Maintenance = "Production"
                                    Dauer = "1Y"
                                Else
                                    If InStr(SupportNumber, "-3G-") > 0 Or InStr(SupportNumber, "-3GSSS") > 0 Then
                                        Maintenance = "Basic"
                                        Dauer = "3Y"
                                    Else
                                        If InStr(SupportNumber, "-3P-") > 0 Or InStr(SupportNumber, "-3PSSS") > 0 Then
                                            Maintenance = "Production"
                                            Dauer = "3Y"
                                        Else
                                            If InStr(SupportNumber, "-2M-G") > 0 Or InStr(SupportNumber, "-2M-A-G") > 0 Or InStr(SupportNumber, "-2MGSSS") > 0 Then
                                                Maintenance = "Basic"
                                                Dauer = "2M"
                                            Else
                                                If InStr(SupportNumber, "-2M-P") > 0 Or InStr(SupportNumber, "-2M-A-P") > 0 Or InStr(SupportNumber, "-2MPSSS") > 0 Then
                                                    Maintenance = "Production"
                                                    Dauer = "2M"
                                                Else
                                                    If InStr(SupportNumber, "1PAK") > 0 Then
                                                        Maintenance = "Basic"
                                                        Dauer = "1I"
                                                    Else
                                                        If InStr(SupportNumber, "3PAK") > 0 Then
                                                            Maintenance = "Basic"
                                                            Dauer = "3I"
                                                        Else
                                                            If InStr(SupportNumber, "5PAK") > 0 Then
                                                                Maintenance = "Basic"
                                                                Dauer = "5I"
                                                            Else
                                                                If InStr(SupportNumber, "-SUB-") > 0 Then
                                                                    Maintenance = "Basic"
                                                                    Dauer = "1Y"
                                                                Else
                                                                    If InStr(SupportNumber, "-3SUB-") > 0 Then
                                                                        Maintenance = "Basic"
                                                                        Dauer = "3Y"
                                                                    Else
                                                                        If InStr(SupportNumber, "-GSUP") > 0 Then
                                                                            Maintenance = "Basic"
                                                                            Dauer = "1Y"
                                                                        Else
                                                                            If InStr(SupportNumber, "-PSUP") > 0 Then
                                                                                Maintenance = "Production"
                                                                                Dauer = "1Y"
                                                                            Else
                                                                                If InStr(SupportNumber, "-3GSUP") > 0 Then
                                                                                    Maintenance = "Basic"
                                                                                    Dauer = "3Y"
                                                                                Else
                                                                                    If InStr(SupportNumber, "-3PSUP") > 0 Then
                                                                                        Maintenance = "Production"
                                                                                        Dauer = "3Y"
                                                                                    Else
                                                                                        If InStr(SupportNumber, "-1-SUP") > 0 Then
                                                                                            Maintenance = "Basic"
                                                                                            Dauer = "1I"
                                                                                        Else
                                                                                            If InStr(SupportNumber, "-3-SUP") > 0 Then
                                                                                                Maintenance = "Basic"
                                                                                                Dauer = "3I"
                                                                                            Else
                                                                                                If InStr(SupportNumber, "-5-SUP") > 0 Then
                                                                                                    Maintenance = "Basic"
                                                                                                    Dauer = "5I"
                                                                                                Else
        
                                                                                                    'MsgBox ("Fehler in Zeile " & Zeile & " Spalte " & Spalte & ": Nummer nicht zerlegbar")
                                                                                                    Debug.Print SupportNumber
                                                                                                    Speichern = False
                                                                                                    Fehler = True
                                                                                                    
                                                                                                End If
                                                                                            End If
                                                                                        End If
                                                                                    End If
                                                                                End If
                                                                            End If
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If

                    'neuen Datensatz schreiben
                    If Speichern Then
                        accDB.DoCmd.RunSQL "INSERT INTO tblVmwareSupport (PartNumber, SupportNumber, Maintenance, Dauer) " & _
                                            "VALUES (""" & PartNumber & """, """ & SupportNumber & """, """ & Maintenance & """, """ & Dauer & """)"
                    End If
                End If

                Spalte = Spalte + 1
            Loop

            Zeile = Zeile + 1
        Loop
             
        Application.StatusBar = False
                 
        'Update in die Access-DB hinterlegen
        accDB.DoCmd.RunSQL "UPDATE tblUpdates SET Dateiname=""" & xlListe.Name & """ , " & _
                                                                                "Wann=" & DatumZeitSQL(Now) & ", " & _
                                                                                "VonWem=""" & Environ("Username") & """ " & _
                                                                                "WHERE Tabelle=""VMware Support-Zuordnung"""
                                                   
        Zeile = Application.WorksheetFunction.Match("VMware Support-Zuordnung nach Access", ThisWorkbook.Worksheets(TUpdates).Columns(1), 0)
        ThisWorkbook.Worksheets(TUpdates).Cells(Zeile, 2) = xlListe.Name
        ThisWorkbook.Worksheets(TUpdates).Cells(Zeile, 3) = Now
        ThisWorkbook.Worksheets(TUpdates).Cells(Zeile, 4) = Environ("Username")
                 
        'aufr|fffd|umen
        xlListe.Close (False)
        Set wsListe = Nothing
        Set xlListe = Nothing
        
        accDB.Quit
        Set accDB = Nothing
             
        'damit die neuen Werte auch im Kalkulator sind:
        Call AccessDatenNachExcelKopieren("tblVmwareSupport", TSupportzuordnungenVmware)
           
        MsgBox ("Die Liste wurde eingelesen.")
        If Fehler Then
            MsgBox ("Es konnten einige Supporte nicht zugeordnet werden. Die betroffenen sind im Direktfenster zu finden. Bitte mit Peter kl|fffd|ren, wie die zu behandeln sind.")
        End If
             
    End If

End Sub
Attribute VB_Name = "mdlVeeam"
Option Explicit


'Nachdem Veeam verschiedene Vorlagen verwenet, bei denen die Spalten unterschiedlcih sind, mache ich das dynamisch
Dim SpProductSKU As Integer
Dim SpProductType As Integer
Dim SpSKUType As Integer
Dim SpProductDescription As Integer
Dim SpComments As Integer
Dim SpDistiListPrice As Integer
Dim SpDistiProzent As Integer
Dim SpDistiDealReg As Integer


Sub VariablenSpaltenSetzen()
'setzt die Variablen gem|fffd||fffd| dem aktuellen Workbook
Dim Zelle As Range


    SpProductSKU = Application.WorksheetFunction.Match("Product SKU", Rows(2), 0)
    SpProductType = Application.WorksheetFunction.Match("Product Type", Rows(2), 0)
    SpSKUType = Application.WorksheetFunction.Match("SKU Type", Rows(2), 0)
    SpProductDescription = Application.WorksheetFunction.Match("Veeam Product Description", Rows(2), 0)
    SpComments = Application.WorksheetFunction.Match("Comments", Rows(2), 0)
    
    SpDistiListPrice = 9    'hardcodiert; Absprache mit Robert
    
    If IsError(Application.Match("Disti, %", Rows(2), 0)) Then
        SpDistiProzent = 0
    Else
        SpDistiProzent = Application.Match("Disti, %", Rows(2), 0)
    End If
    
    'Die distis zu sinden geht anders, weil da ein Zeilenumbruch drin ist.
    Set Zelle = Rows(2).Find("witi")
    If Zelle Is Nothing Then
        SpDistiDealReg = 0
    Else
        SpDistiDealReg = Zelle.Column
    End If
    
End Sub



Sub VeeamPreislisteEinlesen()
'liest die original Veeam Preislisten ein und aktualisiert damit die Access-DB

Const StartZeile As Integer = 3

Dim FDlg As FileDialog
Dim SelItem As Variant

Dim Zeile As Integer

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object

Dim ProductSKU As String, ProductType As String, SKUType As String, ProductDescription As String, Comments As String, DistiListPriceUSD As Double, MsrpEUR As Double, DealReg As Boolean, DistiProzent As Double
Dim ListenTyp As String     'unterscheidet, ob es sich um eine EUR oder eine USD Liste handelt
Dim GueltigAb As Date, GueltigBis As Date, UeberschriftText As String
Dim DatMonat As String, DatTag As Byte, DatJahr As Integer
Dim Pos As Byte, Pos2 As Byte

'Dim wbEUR As Workbook, wbUSD As Workbook, wbXXX As Workbook
Dim WbEur As String, WbUsd As String

'diese Variablen noch anpassen, Name sollte f|fffd|r alle verst|fffd|ndlich sein!!
Dim Lizenzname As String
Dim Lizenzierungsart As String

Dim Test As String

Dim TabelleNr As Byte


    MsgBox ("Die Preise m|fffd|ssen immer mit beiden Preislisten, EUR und USD, aktualisiert werden." & vbCrLf & _
            "Bitte markiere deshalb im folgenden Dialog beide Preislisten.")

    Set FDlg = Application.FileDialog(msoFileDialogOpen)
    FDlg.AllowMultiSelect = True
    FDlg.Filters.Clear
    FDlg.Filters.Add "Excel-Dateien", "*.xls; *.xlsx"
    FDlg.Title = "Veeam-Preisliste(n) ausw|fffd|hlen"
    If FDlg.Show Then
    
    
        If FDlg.SelectedItems.Count = 2 Then
    
            
    '-----Variante 1
            'Verbindung zur Access-DB erstellen
            Set accDB = CreateObject("Access.Application")
            accDB.OpenCurrentDatabase Range("Name_PfadAccessDB"), True
            
    '----Variante 2
    '        On Error Resume Next
    '        Set dbengine !!!!!!!!!!! fehlt!!!!!
    '        Set accDB = dbEngine.OpenDatabase(Range("Name_PfadAccessDB"), True)
    
    '        If Err.Number <> 0 Then
    '            MsgBox ("Fehler: " & Err.Number & " " & Err.Description)
    '            Exit Sub
    '        End If
    '        On Error GoTo 0
    '--------------
            
            'alle abglaufenen Preise l|fffd|schen
            accDB.DoCmd.RunSQL "DELETE FROM tblPreislisteVeeam WHERE GueltigBis<" & DatumSQL(Date)
            
            
            'alle gew|fffd|hlten Dateien durchlaufen
            For Each SelItem In FDlg.SelectedItems
                
                'Preisliste |fffd|ffnen
                Workbooks.Open Filename:=SelItem
                
                Zeile = StartZeile
                
                'erst mal muss die Stattabelle gefunden werden. Die ist immer nach dem Blatt "LICENSING"
                'deshalb wird dieses als erstes gesucht.
                Worksheets("LICENSING").Activate
                TabelleNr = ActiveSheet.Index
                
                Do
                    TabelleNr = TabelleNr + 1
                    Worksheets(TabelleNr).Activate
                
                
                    If Worksheets(TabelleNr).Visible Then       'hab da in der Promo ausgeblendete Bl|fffd|tter gefunden ....
                
                
                        '|fffd|berschrift zerpfl|fffd|cken, um den G|fffd|ltigkeitsbereich zu bekommen
                        UeberschriftText = Trim(Cells(1, Application.Match("1", ActiveSheet.Rows(1), -1)))
                    
                        'G|fffd|ltig von
                        'der erste Text ist immer "Prices Valid", also brauche ich die Suche erst danach starten
                        Pos = InStr(14, UeberschriftText, " ")
                        DatMonat = Trim(Mid(UeberschriftText, 14, Pos - 14))
                        
                        Pos2 = InStr(Pos, UeberschriftText, ",")
                        DatTag = Mid(UeberschriftText, Pos + 1, Pos2 - Pos)
                        DatJahr = Mid(UeberschriftText, Pos2 + 2, 4)
                        
                        Select Case DatMonat
                            Case Is = "January": GueltigAb = DateSerial(DatJahr, 1, DatTag)
                            Case Is = "February": GueltigAb = DateSerial(DatJahr, 2, DatTag)
                            Case Is = "March": GueltigAb = DateSerial(DatJahr, 3, DatTag)
                            Case Is = "April": GueltigAb = DateSerial(DatJahr, 4, DatTag)
                            Case Is = "May": GueltigAb = DateSerial(DatJahr, 5, DatTag)
                            Case Is = "June": GueltigAb = DateSerial(DatJahr, 6, DatTag)
                            Case Is = "July": GueltigAb = DateSerial(DatJahr, 7, DatTag)
                            Case Is = "August": GueltigAb = DateSerial(DatJahr, 8, DatTag)
                            Case Is = "September": GueltigAb = DateSerial(DatJahr, 9, DatTag)
                            Case Is = "October": GueltigAb = DateSerial(DatJahr, 10, DatTag)
                            Case Is = "November": GueltigAb = DateSerial(DatJahr, 11, DatTag)
                            Case Is = "December": GueltigAb = DateSerial(DatJahr, 12, DatTag)
                            Case Else
                                MsgBox ("Monat beim Einlesen nicht erkannt! Fehler beim G|fffd|ltigkeitsdatum 'ab'! Text ist '" & DatMonat & "'. Programm bricht ab!")
                                Exit Sub
                        End Select
                        
                        'g|fffd|ltig bis
                        'Suche nach "through", danach kommt der Monat
                        Pos = InStr(UeberschriftText, "through") + 8
                        Pos2 = InStr(Pos + 2, UeberschriftText, " ")
                        DatMonat = Trim(Mid(UeberschriftText, Pos, Pos2 - Pos))
                        
                        Pos = Pos2
                        Pos2 = InStrRev(UeberschriftText, ",")
                        DatTag = Mid(UeberschriftText, Pos + 1, Pos2 - Pos)
                        DatJahr = Right(UeberschriftText, 4)
                        
                        Select Case DatMonat
                            Case Is = "January": GueltigBis = DateSerial(DatJahr, 1, DatTag)
                            Case Is = "February": GueltigBis = DateSerial(DatJahr, 2, DatTag)
                            Case Is = "March": GueltigBis = DateSerial(DatJahr, 3, DatTag)
                            Case Is = "April": GueltigBis = DateSerial(DatJahr, 4, DatTag)
                            Case Is = "May": GueltigBis = DateSerial(DatJahr, 5, DatTag)
                            Case Is = "June": GueltigBis = DateSerial(DatJahr, 6, DatTag)
                            Case Is = "July": GueltigBis = DateSerial(DatJahr, 7, DatTag)
                            Case Is = "August": GueltigBis = DateSerial(DatJahr, 8, DatTag)
                            Case Is = "September": GueltigBis = DateSerial(DatJahr, 9, DatTag)
                            Case Is = "October": GueltigBis = DateSerial(DatJahr, 10, DatTag)
                            Case Is = "November": GueltigBis = DateSerial(DatJahr, 11, DatTag)
                            Case Is = "December": GueltigBis = DateSerial(DatJahr, 12, DatTag)
                            Case Else
                                MsgBox ("Monat beim Einlesen nicht erkannt! Fehler beim G|fffd|ltigkeitsdatum 'bis'! Text ist '" & DatMonat & "'. Programm bricht ab!")
                                Exit Sub
                        End Select
                        
                        'erst die Spaltenvariablen setzen
                        Call VariablenSpaltenSetzen
                        
                        
                        'in den |fffd|berschriften ist so zu finden, ob es USD oder EUR sind
                        ListenTyp = Right(Cells(2, SpDistiListPrice), 3)
                        
                        If ListenTyp = "EUR" Then
                            WbEur = ActiveWorkbook.Name
                        Else
                            WbUsd = ActiveWorkbook.Name
                        End If
                        
                        'Schleife |fffd|ber alle Zeilen
                        Do While Not Cells(Zeile, 1) = ""
                        
                            'in der untersten Zeile den Statusbar mit der Zeile f|fffd|ttern
                            Application.StatusBar = "Zeile " & Zeile
                        
                            If Mid(Cells(Zeile, SpProductSKU), 2, 1) = "-" Then        'wenn's eine SKU ist ...
                                
                                'alle wichtigen Werte aus dem Excel nehmen und in Variablen schieben
                                ProductSKU = Cells(Zeile, SpProductSKU)
                                ProductType = Trim(Cells(Zeile, SpProductType))
                                SKUType = Trim(Cells(Zeile, SpSKUType))
                                ProductDescription = Cells(Zeile, SpProductDescription)
                                Comments = Cells(Zeile, SpComments)
                                'die folgenden sind zwar abh|fffd|ngig, ob EUR oder USD Liste, ist aber egal, ich bef|fffd|lle immer alle ... richtig wird's erst, wenn die Daten per SQL geschrieben werden
                                MsrpEUR = Cells(Zeile, SpDistiListPrice)
                                DistiListPriceUSD = Cells(Zeile, SpDistiListPrice)
                                If SpDistiDealReg <> 0 Then DealReg = Cells(Zeile, SpDistiDealReg) <> "N/A"
                                If SpDistiProzent = 0 Then
                                    DistiProzent = 0
                                Else
                                    DistiProzent = Cells(Zeile, SpDistiProzent)
                                End If
                                
            'Debug.Print Cells(Zeile, 1)
                                
                                
                                
            'Debug.Print accDB.DLookup("[ProductSKU]", "tblPreislisteVeeam", "ProductSKU=""V-VASPLS-VS-P0000-00""")
                                
                                If IsNull(accDB.DLookup("[ProductSKU]", "tblPreislisteVeeam", "ProductSKU='" & Cells(Zeile, SpProductSKU) & "'")) Then
                                       
                                    'neu anlegen
                                    If ListenTyp = "EUR" Then
                                        accDB.DoCmd.RunSQL "INSERT INTO tblPreislisteVeeam (ProductSKU, Lizenzname, Lizenzierungsart, ProductType, ProductDescription, Comments, SKUType, MsrpEUR, GueltigAb, GueltigBis) " & _
                                                        "VALUES (""" & ProductSKU & """, """ & Lizenzname & """, """ & Lizenzierungsart & """, """ & ProductType & """, """ & ProductDescription & """, """ & Comments & """, """ & SKUType & """, " & Str(MsrpEUR) & ", " & DatumSQL(GueltigAb) & ", " & DatumSQL(GueltigBis) & ")"
                                    Else
                                        accDB.DoCmd.RunSQL "INSERT INTO tblPreislisteVeeam (ProductSKU, Lizenzname, Lizenzierungsart, ProductType, ProductDescription, Comments, SKUType, DistiListPriceUSD, DistiProzent, DealReg, GueltigAb, GueltigBis) " & _
                                                        "VALUES (""" & ProductSKU & """, """ & Lizenzname & """, """ & Lizenzierungsart & """, """ & ProductType & """, """ & ProductDescription & """, """ & Comments & """, """ & SKUType & """, " & Str(DistiListPriceUSD) & ", " & Str(DistiProzent) & ", " & IIf(DealReg, "True", "False") & ", " & DatumSQL(GueltigAb) & ", " & DatumSQL(GueltigBis) & ")"
                                    End If
                                Else
                                    If accDB.DLookup("[GueltigAb]", "tblPreislisteVeeam", "ProductSKU='" & Cells(Zeile, SpProductSKU) & "'") = GueltigAb And _
                                            accDB.DLookup("[GueltigBis]", "tblPreislisteVeeam", "ProductSKU='" & Cells(Zeile, SpProductSKU) & "'") = GueltigBis Then
                                        'aktualisieren
                                        If ListenTyp = "EUR" Then
                                            accDB.DoCmd.RunSQL "UPDATE tblPreislisteVeeam SET Lizenzname=""" & Lizenzname & """, " & _
                                                                                            "Lizenzierungsart=""" & Lizenzierungsart & """, " & _
                                                                                            "ProductType=""" & ProductType & """, " & _
                                                                                            "ProductDescription=""" & ProductDescription & """, " & _
                                                                                            "Comments=""" & Comments & """, " & _
                                                                                            "SKUType=""" & SKUType & """, " & _
                                                                                            "MsrpEUR=" & Str(MsrpEUR) & ", " & _
                                                                                            "GueltigAb=" & DatumSQL(GueltigAb) & ", " & _
                                                                                            "GueltigBis=" & DatumSQL(GueltigBis) & " " & _
                                                                                "WHERE ProductSKU=""" & ProductSKU & """"
                                        Else
                                            accDB.DoCmd.RunSQL "UPDATE tblPreislisteVeeam SET Lizenzname=""" & Lizenzname & """, " & _
                                                                                            "Lizenzierungsart=""" & Lizenzierungsart & """, " & _
                                                                                            "ProductType=""" & ProductType & """, " & _
                                                                                            "ProductDescription=""" & ProductDescription & """, " & _
                                                                                            "Comments=""" & Comments & """, " & _
                                                                                            "SKUType=""" & SKUType & """, " & _
                                                                                            "DistiListPriceUSD=" & Str(DistiListPriceUSD) & ", " & _
                                                                                            "DistiProzent=" & Str(DistiProzent) & ", " & _
                                                                                            "DealReg=" & IIf(DealReg, "True", "False") & ", " & _
                                                                                            "GueltigAb=" & DatumSQL(GueltigAb) & ", " & _
                                                                                            "GueltigBis=" & DatumSQL(GueltigBis) & " " & _
                                                                                "WHERE ProductSKU=""" & ProductSKU & """"
                                        End If
                                    Else
                                        'neu anlegen
                                        If ListenTyp = "EUR" Then
                                            accDB.DoCmd.RunSQL "INSERT INTO tblPreislisteVeeam (ProductSKU, Lizenzname, Lizenzierungsart, ProductType, ProductDescription, Comments, SKUType, MsrpEUR, GueltigAb, GueltigBis) " & _
                                                            "VALUES (""" & ProductSKU & """, """ & Lizenzname & """, """ & Lizenzierungsart & """, """ & ProductType & """, """ & ProductDescription & """, """ & Comments & """, """ & SKUType & """, " & Str(MsrpEUR) & ", " & DatumSQL(GueltigAb) & ", " & DatumSQL(GueltigBis) & ")"
                                        Else
                                            accDB.DoCmd.RunSQL "INSERT INTO tblPreislisteVeeam (ProductSKU, Lizenzname, Lizenzierungsart, ProductType, ProductDescription, Comments, SKUType, DistiListPriceUSD, DistiProzent, DealReg, GueltigAb, GueltigBis) " & _
                                                            "VALUES (""" & ProductSKU & """, """ & Lizenzname & """, """ & Lizenzierungsart & """, """ & ProductType & """, """ & ProductDescription & """, """ & Comments & """, """ & SKUType & """, " & Str(DistiListPriceUSD) & ", " & Str(DistiProzent) & ", " & IIf(DealReg, "True", "False") & ", " & DatumSQL(GueltigAb) & ", " & DatumSQL(GueltigBis) & ")"
                                        End If
                                    
                                    End If
                                    
                                End If
                                
                            Else            'alle, die keine Bestellnummer haben --> Kategorien
                               
                                If Cells(Zeile, 1).Interior.Color = FarbeVeeamGruenDunkel Then
                                    Lizenzname = Trim(Cells(Zeile, 1))
                                    
                                    'Sonderschleife f|fffd|r Promo: Da werden die hellgr|fffd|nen Zeilen bei Perpetual weggelassen, deshalb hier gleich gesetzt
                                    If Mid(Cells(Zeile + 1, SpProductSKU), 2, 1) = "-" Then
                                        Lizenzierungsart = "Perpetual Licenses"
                                    End If
                                Else
                                    Lizenzierungsart = Trim(Cells(Zeile, 1))
                                End If
                                
                            End If
                        
                            Zeile = Zeile + 1
                        Loop
                        
                    
                    End If
                    
                    
                'Loop Until ActiveSheet.Name = "EMEA" Or TabelleNr = Worksheets.Count
                Loop Until True     'da war mal eine Schleife |fffd|ber alle Tabellen drin. Jetzt wird nur die eine nach LICENSING eingelesen
                
                'Preisliste schlie|fffd|en
                ActiveWorkbook.Close savechanges:=False
                                
            Next SelItem
            
            'Statusbar ausschalten
            Application.StatusBar = False
            
            
            
             'Updates aktualisieren
            accDB.DoCmd.RunSQL "UPDATE tblUpdates SET Dateiname=""" & WbEur & """ , " & _
                                                                                "Wann=" & DatumZeitSQL(Now) & ", " & _
                                                                                "VonWem=""" & Environ("Username") & """ " & _
                                                                                "WHERE Tabelle=""Veeam Preisliste EUR"""
                                                                                
            accDB.DoCmd.RunSQL "UPDATE tblUpdates SET Dateiname=""" & WbUsd & """ , " & _
                                                                                "Wann=" & DatumZeitSQL(Now) & ", " & _
                                                                                "VonWem=""" & Environ("Username") & """ " & _
                                                                                "WHERE Tabelle=""Veeam Preisliste USD"""
            
            
            
            
            'Access-DB schlie|fffd|en
            'accDB.CloseCurrentDatabase
    '----Variante 1
            accDB.Quit
            
    '----Variante 2
            'accDB.Close
    '----
            Set accDB = Nothing
        
        Else
            MsgBox ("Falsche Anzahl an Dateien ausgew|fffd|hlt, Einlesen nicht m|fffd|glich")
        End If
        
    Else
        MsgBox ("keine Preisliste gew|fffd|hlt")
    End If

End Sub



Sub PreislisteVeeamNachKalkulatorKopieren()

    Call AccessDatenNachExcelKopieren("tblPreislisteVeeam", TPreislisteVeeam)
End Sub



Sub DatenVeeamBerechnen()
'berechnet Listen und Einzelteile aus der Veeam-Preisliste

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstQry As Object     ' AS DAO.Recordset

    'Datenbank erstellen
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(ThisWorkbook.FullName, False, False, "Excel 12.0")
    
    
'Kategorie berechnen
    'Recordset |fffd|ffnen
    Set rstQry = accDB.OpenRecordset("SELECT DISTINCT Kategorie FROM [Preisliste Veeam$] ORDER BY Kategorie")
    
    'Daten aus Recordset in Excel kopieren
    Worksheets("Daten Veeam").Cells(2, 1).CopyFromRecordset rstQry
    
    'alles beenden
    rstQry.Close
    Set rstQry = Nothing
    
    Set dbEngine = Nothing
    
    'Access-DB schlie|fffd|en
    accDB.Close
    Set accDB = Nothing

End Sub



Sub VeeamTagespreislisteErstellen()
'macht aus der allgemeinen Preisliste (mit "g|fffd|ltig ab" und "g|fffd|ltig bis") eine tagesaktuelle Preisliste. Die Daten kommen direkt aus diesem Konfigurator (nicht aus der Access-DB).

Dim dbEngine As Object  ' As DAO.DBEngine
Dim accDB As Object     ' As DAO.Database
Dim rstQry As Object     ' AS DAO.Recordset
Dim SQLString As String
Dim Spalte As Integer

'erstellt Access und dei Abfrage von der Preisliste
    Set dbEngine = CreateObject("DAO.DBEngine.120")   ' ab Acc2007
    Set accDB = dbEngine.OpenDatabase(ThisWorkbook.FullName, False, False, "Excel 12.0")
    
    SQLString = "SELECT ProductSKU, ProductType, SKUType, ProductDescription, Comments, MsrpEUR, DistiListPriceUSD, Lizenzname, Lizenzierungsart, DistiProzent, DealReg " & _
    "FROM [" & TPreislisteVeeam & "$] " & _
    "WHERE ((GueltigAb IS NULL AND GueltigBis IS NULL) OR (GueltigAb<" & DatumSQL(Date) & ") OR (GueltigBis>" & DatumSQL(Date) & "))"
        
    Set rstQry = accDB.OpenRecordset(SQLString)
        
    'erst mal alles l|fffd|schen, was in der Tagespreislsite ist
    Worksheets(TTagespreislisteVeeam).Cells.ClearContents
        
    ' Feldnamen |fffd|bernehmen
    For Spalte = 0 To rstQry.Fields.Count - 1
       Worksheets(TTagespreislisteVeeam).Cells(1, Spalte + 1) = rstQry.Fields(Spalte).Name
    Next Spalte
    
    ' Inhalt (gesamtes Recordset) in die Tagespreisliste |fffd|bernehmen
    Worksheets(TTagespreislisteVeeam).Cells(2, 1).CopyFromRecordset rstQry
    
    'aufr|fffd|umen
    rstQry.Close
    Set rstQry = Nothing
    
    Set dbEngine = Nothing
    
    'Access-DB schlie|fffd|en
    accDB.Close
    Set accDB = Nothing
    
End Sub


' InQuest injected base64 decoded content
' *'zq"
' 'v+b
' +-yW
' +-yY
' %z'!
' +-xJ
' &F(!
' .+-zzkz+
' .+-zzkz+
' kz+%
' zsZr
' -zak
' ("n)b
' oj{Z

INQUEST-PP=macro
