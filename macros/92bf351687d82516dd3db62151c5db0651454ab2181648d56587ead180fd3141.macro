Attribute VB_Name = "Module1"
Public Function set_module_table(ByVal ip_name As String, ByVal sheet As String, ByVal f_row As Integer, ByVal ip_append As String)
Dim ind As Integer
    ind = 253 + Worksheets("dss_data").Range("D252").value
    
    Worksheets("dss_data").Range("D" & ind).value = ip_name & ip_append
    Worksheets("dss_data").Range("H" & ind).value = ip_name & ip_append
    
    If sheet = "Clock" Then
        Worksheets("dss_data").Range("I" & ind).value = f_row
    End If
    If sheet = "Logic" Then
        Worksheets("dss_data").Range("J" & ind).value = f_row
    End If
    If sheet = "LSRAM" Then
        Worksheets("dss_data").Range("K" & ind).value = f_row
    End If
    If sheet = "uSRAM" Then
        Worksheets("dss_data").Range("L" & ind).value = f_row
    End If
    If sheet = "IO" Then
        Worksheets("dss_data").Range("M" & ind).value = f_row
    End If
    If sheet = "PLL & DLL" Then
        Worksheets("dss_data").Range("N" & ind).value = f_row
    End If
    If sheet = "Transceiver" Then
        Worksheets("dss_data").Range("O" & ind).value = f_row
    End If
    If sheet = "memory_lsram" Then
        Worksheets("dss_data").Range("P" & ind).value = f_row
    End If
    If sheet = "memory_usram" Then
        Worksheets("dss_data").Range("Q" & ind).value = f_row
    End If
End Function

Public Function d_module_tabel(ByVal m_name As String, ByVal ip_code As Integer)
Dim ind As Integer
Dim check As String
    ind = 254
    For i = 254 To 273
        check = Worksheets("dss_data").Range("H" & i).value
        If check = m_name Then
            For j = i To 273
            
                    Worksheets("dss_data").Range("H" & j).value = Worksheets("dss_data").Range("H" & j + 1).value
                    Worksheets("dss_data").Range("I" & j).value = Worksheets("dss_data").Range("I" & j + 1).value
                    Worksheets("dss_data").Range("J" & j).value = Worksheets("dss_data").Range("J" & j + 1).value
                    Worksheets("dss_data").Range("K" & j).value = Worksheets("dss_data").Range("K" & j + 1).value
                    Worksheets("dss_data").Range("L" & j).value = Worksheets("dss_data").Range("L" & j + 1).value
                    Worksheets("dss_data").Range("M" & j).value = Worksheets("dss_data").Range("M" & j + 1).value
                    Worksheets("dss_data").Range("N" & j).value = Worksheets("dss_data").Range("N" & j + 1).value
            
                    Worksheets("dss_data").Range("O" & j).value = Worksheets("dss_data").Range("O" & j + 1).value
            
                    Worksheets("dss_data").Range("P" & j).value = Worksheets("dss_data").Range("P" & j + 1).value
            
                    Worksheets("dss_data").Range("Q" & j).value = Worksheets("dss_data").Range("Q" & j + 1).value
            
            Next j
            Exit Function
        End If
    Next i
End Function
Public Function module_name_notused(ByVal ip_name As String, ByVal ip_append As String) As Boolean
Dim ip_avl As Integer
ip_avl = Worksheets("dss_data").Range("D252").value
ip_name = ip_name & ip_append
    For i = 254 To 254 + ip_avl
        If ip_name = Worksheets("dss_data").Range("D" & i).value Then
            module_name_notused = True
            Exit Function
        End If
    Next i
    module_name_notused = False
End Function
Public Function ip_code_set(ByVal code As Integer)
    Dim row As Integer
    row = 253 + Worksheets("dss_data").Range("D252").value
    Worksheets("dss_data").Range("F" & row).value = code
End Function

'This is used in to get the free row in all sheets to append data
Public Function free_row(ByVal sheet As Worksheet, ByVal rstart As Integer, ByVal rstop As Integer, ByVal col As String, ByVal sheet_name As String) As Integer
Dim i As Integer
Dim cell As String
Dim target_r As Integer
Dim test As Integer

    target_r = get_nonzero(sheet, rstart, rstop, col)

    Do
        If sheet_name = "Clock" Then
            test = compare_clock(target_r, rstop)
        End If
        
        If sheet_name = "Logic" Then
            test = compare_logic(target_r, rstop)
        End If
        
        If sheet_name = "LSRAM" Then
            test = compare_lsram(target_r, rstop)
        End If
        
        If sheet_name = "uSRAM" Then
            test = compare_usram(target_r, rstop)
        End If
        
        If sheet_name = "Math Block" Then
            test = compare_math(target_r, rstop)
        End If
        
        If sheet_name = "IO" Then
            test = compare_io(target_r, rstop)
        End If
        
        If sheet_name = "Transceiver" Then
            test = compare_transceiver(target_r, rstop)
        End If
            
        If sheet_name = "PLL" Then
            test = compare_pll(target_r, rstop)
        End If
            
        If sheet_name = "DLL" Then
            test = compare_dll(target_r, rstop)
        End If
        
        If test <> 0 Then
            target_r = test + 1
        End If
    Loop While test <> 0
        
     free_row = target_r
    
End Function
Public Function compare_clock(ByVal rstart As Integer, ByVal rstop As Integer) As Integer
Dim i As Integer
    
    For i = rstart To rstop
        If ActiveWorkbook.Worksheets("Clock").Range(clock_name_str_col & i).value <> "" Then
            compare_clock = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("Clock").Range(clock_freq_col & i).value <> "" Then
            compare_clock = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("Clock").Range(clock_fanout_col & i).value <> "" Then
            compare_clock = i
            Exit Function
        End If
    Next i
        
        compare_clock = 0
End Function
Public Function compare_logic(ByVal rstart As Integer, ByVal rstop As Integer) As Integer
Dim i As Integer

    For i = rstart To rstop
        If ActiveWorkbook.Worksheets("Logic").Range(logic_name_str_col & i).value <> "" Then
            compare_logic = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("Logic").Range(logic_freq_col & i).value <> "" Then
            compare_logic = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("Logic").Range(logic_dff_col & i).value <> "" Then
            compare_logic = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("Logic").Range(logic_lut_col & i).value <> "" Then
            compare_logic = i
            Exit Function
        End If
    Next i
        compare_logic = 0
End Function
Public Function compare_lsram(ByVal rstart As Integer, ByVal rstop As Integer) As Integer
Dim i As Integer

    For i = rstart To rstop
        If ActiveWorkbook.Worksheets("LSRAM").Range(lsram_name_str_col & i).value <> "" Then
            compare_lsram = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("LSRAM").Range(lsram_nblock_col & i).value <> "" Then
            compare_lsram = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("LSRAM").Range(lsram_Aclkfreq_col & i).value <> "" Then
            compare_lsram = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("LSRAM").Range(lsram_Bclkfreq_col & i).value <> "" Then
            compare_lsram = i
            Exit Function
        End If
    Next i
        
        compare_lsram = 0
End Function
Public Function compare_usram(ByVal rstart As Integer, ByVal rstop As Integer) As Integer
Dim i As Integer

    For i = rstart To rstop
        If ActiveWorkbook.Worksheets("uSRAM").Range(usram_name_str_col & i).value <> "" Then
            compare_usram = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("uSRAM").Range(usram_nblock_col & i).value <> "" Then
            compare_usram = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("uSRAM").Range(usram_writeclkfreq_col & i).value <> "" Then
            compare_usram = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("uSRAM").Range(usram_readclkfreq_col & i).value <> "" Then
            compare_usram = i
            Exit Function
        End If
    Next i
        compare_usram = 0
End Function
Public Function compare_math(ByVal rstart As Integer, ByVal rstop As Integer) As Integer
Dim i As Integer

    For i = rstart To rstop
        If ActiveWorkbook.Worksheets("Math Block").Range(math_name_str_col & i).value <> "" Then
            compare_math = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("Math Block").Range(math_clkfreq_col & i).value <> "" Then
            compare_math = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("Math Block").Range(math_nblock_col & i).value <> "" Then
            compare_math = i
            Exit Function
        End If
    Next i
        compare_math = 0
End Function
Public Function compare_io(ByVal rstart As Integer, ByVal rstop As Integer) As Integer
Dim i As Integer

    For i = rstart To rstop
        If ActiveWorkbook.Worksheets("IO").Range(io_name_str_col & i).value <> "" Then
            compare_io = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("IO").Range(io_inputpins_col & i).value <> "" Then
            compare_io = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("IO").Range(io_outputpins_col & i).value <> "" Then
            compare_io = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("IO").Range(io_bidirpins_col & i).value <> "" Then
            compare_io = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("IO").Range(io_clkfreq_col & i).value <> "" Then
            compare_io = i
            Exit Function
        End If
    Next i
        compare_io = 0
End Function

Public Function compare_transceiver(ByVal rstart As Integer, ByVal rstop As Integer) As Integer
Dim i As Integer

    For i = rstart To rstop
        If ActiveWorkbook.Worksheets("Transceiver").Range(xcvr_name_str_col & i).value <> "" Then
            compare_transceiver = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("Transceiver").Range(xcvr_protocol_col & i).value <> "   " Then
            compare_transceiver = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("Transceiver").Range(xcvr_nlanes_col & i).value <> "" Then
            compare_transceiver = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("Transceiver").Range(xcv_txdatarate_col & i).value <> "" Then
            compare_transceiver = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("Transceiver").Range(xcvr_rxdatarate_col & i).value <> "" Then
            compare_transceiver = i
            Exit Function
        End If
    Next i
        compare_transceiver = 0
End Function
Public Function compare_pll(ByVal rstart As Integer, ByVal rstop As Integer) As Integer
Dim i As Integer

    For i = rstart To rstop
        If ActiveWorkbook.Worksheets("PLL & DLL").Range(pll_name_str_col & i).value <> "" Then
            compare_pll = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("PLL & DLL").Range(pll_refclk_col & i).value <> "" Then
            compare_pll = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("PLL & DLL").Range(pll_out0freq_col & i).value <> "" Then
            compare_pll = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("PLL & DLL").Range(pll_out1freq_col & i).value <> "" Then
            compare_pll = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("PLL & DLL").Range(pll_out2freq_col & i).value <> "" Then
            compare_pll = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("PLL & DLL").Range(pll_out3freq_col & i).value <> "" Then
            compare_pll = i
            Exit Function
        End If
    Next i
        compare_pll = 0
End Function
Public Function compare_dll(ByVal rstart As Integer, ByVal rstop As Integer) As Integer
Dim i As Integer

    For i = rstart To rstop
        
        If ActiveWorkbook.Worksheets("PLL & DLL").Range(dll_name_str_col & i).value <> "" Then
            compare_dll = i
            Exit Function
        End If
        If ActiveWorkbook.Worksheets("PLL & DLL").Range(dll_refclk_col & i).value <> "" Then
            compare_dll = i
            Exit Function
        End If
        
    Next i
        compare_dll = 0
End Function
' It gives 1st non zero row scanning from last to first in total column
Public Function get_nonzero(ByVal sheet As Worksheet, ByVal rstart As Integer, ByVal rstop As Integer, ByVal col As String) As Integer
Dim i As Integer
Dim cell As String
Dim nonzero_found As Boolean

    For i = rstop To rstart Step -1
        cell = col & i
        If sheet.Range(cell) <> 0 Then
           nonzero_found = True
            Exit For
         End If
    Next i
    
    If i = rstart - 1 Then
        get_nonzero = rstart
    End If
    
    If nonzero_found Then
        If i = rstop Then
            get_nonzero = i
        Else
            get_nonzero = i + 1
        End If
    End If
    
End Function
Public Function ddr_validation_on_pll() As Boolean
    Dim i, val As Double
    For i = 24 To 17 Step -1
        val = ActiveWorkbook.Worksheets("PLL & DLL").Range("K" & i).value
        If val = 0# Then
            ddr_validation_on_pll = True
            Exit Function
'        End If
        ElseIf val <> 0# Then
            ddr_validation_on_pll = False
            Exit Function
        End If
    Next i
    
End Function

Public Sub script_import(ByRef Path As String)
'Public Sub script_import()
    'Dim intPath As String
    'intPath = "C:/Users/hassan.hassan/Documents/My Received Files/mpe_test_case(3).xml"
    import_mpe.script_import Path
End Sub

Public Sub script_import_prev_ver(ByRef Path As String)
    'Dim intPath As String
    'intPath = "F:/hassan/mpe_import/golden_retiming_on/stitched_10seed_he/10_g5_jesd_v4/regtest/10_g5_jesd_v4_02092232/UC_1_c_LB_XCVR3/designer/JESD204B_LB/PolarFire_Power_Estimator_v3e.xlsm"
    import_mpe.script_import_prev_ver Path
End Sub
Attribute VB_Name = "Module2"
Sub clear_all()
    
Application.EnableEvents = False
    Application.Run "clear_clock"
    Application.Run "clear_logic"
    Application.Run "clear_lsram"
    Application.Run "clear_usram"
    Application.Run "clear_mathblock"
    Application.Run "clear_pll_dll_osc"
    Application.Run "clear_Transceiver"
  '  Application.Run "clear_summary"
    Application.Run "clear_misc"
    Application.Run "clear_io"
    Application.Run "clear_userfrom_data"    ' TO clear all userfroms data in summary which is present in dss_data sheet
Application.EnableEvents = True
    
End Sub
Private Sub clear_bank_static()
    Worksheets("bank_static_data").Range("AH23:AH41").value = "VDDI 1.2"
End Sub

Private Sub clear_voltages()
    Dim i, j As Integer
    i = 22
    j = 43
    
    While i <= 36
       Worksheets("Summary").Range("N" + CStr(i)).value = Worksheets("Summary").Range("AK" + CStr(j)).value
       i = i + 1
       j = j + 1
    Wend
    
    If Worksheets("Summary").Range("AT43").value Then
        Worksheets("Summary").Range("N21").value = Worksheets("Summary").Range("AR25").value
        Worksheets("Summary").Range("N33").value = Worksheets("Summary").Range("AR25").value
    Else
        Worksheets("Summary").Range("N21").value = Worksheets("Summary").Range("AR24").value
        Worksheets("Summary").Range("N33").value = Worksheets("Summary").Range("AR24").value
    End If
    
End Sub

Sub clear_summary()

    Application.Run "clear_bank_static"
    Application.Run "clear_voltages"
    
    Worksheets("Summary").Activate
        
'    Range("D20").value = "Sleep"
'    Range("D21").value = "Sleep"
    
    'set the die to the low power die
    Range("D12").value = "MPF300TLS"
    
    'set the die voltage to 1.0V
    Range("D15").value = "1.0 V"
    
    'Key Generation
    If Worksheets("Summary").Range("D11").value = Worksheets("Summary").Range("AI8").value Then
       key = WorksheetFunction.VLookup(Worksheets("Summary").Range("D12").value, Worksheets("dss_data").Range("B3:D38").value, 3, False)
    Else
       key = WorksheetFunction.VLookup(Worksheets("Summary").Range("D12").value, Worksheets("dss_data").Range("C3:D38").value, 2, False)
    End If
    
    If Not WorksheetFunction.VLookup(key & "_" & Worksheets("Summary").Range("D13").value, Worksheets("dss_data").Range("AB48:AX100").value, 23, False) Then
      'Do nothing as for this combination of die_package Thermal data not available yet.
    Else
          
       Range("D26").value = 25
     
       Range("D29").value = "10 mm - Low Profile"
       Range("D30").value = "2.5 m/s"
       Range("D32").value = "JEDEC (2s2p)"
       
       Worksheets("Summary").Range("D27").value = Worksheets("Summary").Range("AY31").value
       Worksheets("Summary").Range("D25").value = Worksheets("Summary").Range("AX31").value
    End If
    
    'Save the Init PE data
    'Worksheets("dss_data").Range("D125:D157").value = Worksheets("dss_data").Range("C125:C157").value
    
End Sub
Sub clear_clock()

    'Clear the contents of the name field
    'Worksheets("Clock").Range("B12:D511").ClearContents
    Worksheets("Clock").Range(clock_name_str_col & "12:" & clock_name_end_col & "511").ClearContents
    
    'Clear the contents of the Clock Frequency field
    'Worksheets("Clock").Range("E12:E511").ClearContents
    Worksheets("Clock").Range(clock_freq_col & "12:" & clock_freq_col & "511").ClearContents
    
      'set Clock Type to defaul i.e  Global
    'Worksheets("Clock").Range("F12:F511").value = "Global"
    Worksheets("Clock").Range(clock_clktype_col & "12:" & clock_clktype_col & "511").value = "Global"
    
    'Clear the contents of the # Registers field
    'Worksheets("Clock").Range("G12:G511").ClearContents
    Worksheets("Clock").Range(clock_fanout_col & "12:" & clock_fanout_col & "511").ClearContents
    
    'Set the Global Enable Rate to default (100%)
    'Worksheets("Clock").Range("H12:H511").value = 1
    Worksheets("Clock").Range(clock_enrate_col & "12:" & clock_enrate_col & "511").value = 1

End Sub

Sub clear_logic()

'Clear the contents of the name field
    'Worksheets("Logic").Range("B9:D508").ClearContents
    Worksheets("Logic").Range(logic_name_str_col & "9:" & logic_name_end_col & "508").ClearContents
    
    'Clear the contents of the Clock Frequency field
    'Worksheets("Logic").Range("E9:E508").ClearContents
    Worksheets("Logic").Range(logic_freq_col & "9:" & logic_freq_col & "508").ClearContents
    
    'Clear the contents of the # Registers field
    'Worksheets("Logic").Range("F9:F508").ClearContents
    Worksheets("Logic").Range(logic_dff_col & "9:" & logic_dff_col & "508").ClearContents
    
    'Clear the contents of the # LUTs field
    'Worksheets("Logic").Range("G9:G508").ClearContents
    Worksheets("Logic").Range(logic_lut_col & "9:" & logic_lut_col & "508").ClearContents
    
     'Set the fanout to default value (3)
    'Worksheets("Logic").Range("H9:H508").value = 3
    Worksheets("Logic").Range(logic_fanout_col & "9:" & logic_fanout_col & "508").value = 3
    
    'Set the Toggle Rate to default (12.5%)
    'Worksheets("Logic").Range("I9:I508").value = 0.125
    Worksheets("Logic").Range(logic_tgrate_col & "9:" & logic_tgrate_col & "508").value = 0.125

End Sub

Sub clear_lsram()

    'Clear the contents of the name field
    'Worksheets("LSRAM").Range("B9:D250").ClearContents
    Worksheets("LSRAM").Range(lsram_name_str_col & "9:" & lsram_name_end_col & "250").ClearContents
    
    'Clear the contents of the #LSRAM Blocks field
    'Worksheets("LSRAM").Range("E9:E250").ClearContents
    Worksheets("LSRAM").Range(lsram_nblock_col & "9:" & lsram_nblock_col & "250").ClearContents
    
    'Clear Port A:
    ' set width to x1 default
    'Worksheets("LSRAM").Range("F9:F250").value = 20
    Worksheets("LSRAM").Range(lsram_Awidth_col & "9:" & lsram_Awidth_col & "250").value = 20
    'Clock Frequency
    'Worksheets("LSRAM").Range("G9:G250").ClearContents
    Worksheets("LSRAM").Range(lsram_Aclkfreq_col & "9:" & lsram_Aclkfreq_col & "250").ClearContents
    'write Mode
    'Worksheets("LSRAM").Range("H9:H250").value = "Simple Write"
    Worksheets("LSRAM").Range(lsram_Amode_col & "9:" & lsram_Amode_col & "250").value = "Simple Write"
    'Set Write Rate to 12.5%
    'Worksheets("LSRAM").Range("I9:I250").value = 0.125
    Worksheets("LSRAM").Range(lsram_Awriterate_col & "9:" & lsram_Awriterate_col & "250").value = 0.125
    'Set Read Rate to 12.5%
    'Worksheets("LSRAM").Range("J9:J250").value = 0.125
    Worksheets("LSRAM").Range(lsram_Areadrate_col & "9:" & lsram_Areadrate_col & "250").value = 0.125
    'Set Enable Rate to 12.5%
    'Worksheets("LSRAM").Range("K9:K250").value = 0.125
    Worksheets("LSRAM").Range(lsram_Aenrate_col & "9:" & lsram_Aenrate_col & "250").value = 0.125
    
    'Clear Port B:
    ' set width to x1 default
    'Worksheets("LSRAM").Range("L9:L250").value = 20
    Worksheets("LSRAM").Range(lsram_Bwidth_col & "9:" & lsram_Bwidth_col & "250").value = 20
    'Clock Frequency
    'Worksheets("LSRAM").Range("M9:M250").ClearContents
    Worksheets("LSRAM").Range(lsram_Bclkfreq_col & "9:" & lsram_Bclkfreq_col & "250").ClearContents
    'write Mode
    'Worksheets("LSRAM").Range("N9:N250").value = "Simple Write"
    Worksheets("LSRAM").Range(lsram_Bmode_col & "9:" & lsram_Bmode_col & "250").value = "Simple Write"
    'Set Write Rate to 12.5%
    'Worksheets("LSRAM").Range("O9:O250").value = 0.125
    Worksheets("LSRAM").Range(lsram_Bwriterate_col & "9:" & lsram_Bwriterate_col & "250").value = 0.125
    'Set Read Rate to 12.5%
    'Worksheets("LSRAM").Range("P9:P250").value = 0.125
    Worksheets("LSRAM").Range(lsram_Breadrate_col & "9:" & lsram_Breadrate_col & "250").value = 0.125
    'Set Enable Rate to 12.5%
    'Worksheets("LSRAM").Range("Q9:Q250").value = 0.125
    Worksheets("LSRAM").Range(lsram_Benrate_col & "9:" & lsram_Benrate_col & "250").value = 0.125
    
    'set Pipeline
    'Worksheets("LSRAM").Range("R9:R250").value = "No"
    Worksheets("LSRAM").Range(lsram_pipeline_col & "9:" & lsram_pipeline_col & "250").value = "No"
    'ECC set
    'Worksheets("LSRAM").Range("S9:S250").value = "No"
    Worksheets("LSRAM").Range(lsram_ecc_col & "9:" & lsram_ecc_col & "250").value = "No"
    'Set output toggle rate to 50%
    'Worksheets("LSRAM").Range("T9:T250").value = 0.5
    Worksheets("LSRAM").Range(lsram_tgrate_col & "9:" & lsram_tgrate_col & "250").value = 0.5
       
End Sub

Sub clear_usram()

    'Clear the contents of the name field
    'Worksheets("uSRAM").Range("B9:D250").ClearContents
    Worksheets("uSRAM").Range(usram_name_str_col & "9:" & usram_name_end_col & "250").ClearContents
    
    'Clear the contents of the #uSRAM Blocks field
    'Worksheets("uSRAM").Range("E9:E250").ClearContents
    Worksheets("uSRAM").Range(usram_nblock_col & "9:" & usram_nblock_col & "250").ClearContents
    
      'Clear the contents of the width
    'Worksheets("uSRAM").Range("F9:F250").value = 12
    Worksheets("uSRAM").Range(usram_width_col & "9:" & usram_width_col & "250").value = 12
    
      'Set Use Registers as No
    'Worksheets("uSRAM").Range("G9:G250").value = "No"
    Worksheets("uSRAM").Range(usram_reg_col & "9:" & usram_reg_col & "250").value = "No"
    
    'Clear Write Port:
    'Clock Frequency
    'Worksheets("uSRAM").Range("H9:H250").ClearContents
    Worksheets("uSRAM").Range(usram_writeclkfreq_col & "9:" & usram_writeclkfreq_col & "250").ClearContents
    'Set Enable Rate to 100%
    'Worksheets("uSRAM").Range("I9:I250").value = 0.125
    Worksheets("uSRAM").Range(usram_writeenrate_col & "9:" & usram_writeenrate_col & "250").value = 0.125
    
    'Clear Read Port:
    'Clock Frequency
    'Worksheets("uSRAM").Range("J9:J250").ClearContents
    Worksheets("uSRAM").Range(usram_readclkfreq_col & "9:" & usram_readclkfreq_col & "250").ClearContents
    'Set Enable Rate to 100%
    'Worksheets("uSRAM").Range("K9:K250").value = 0.125
    Worksheets("uSRAM").Range(usram_readenrate_col & "9:" & usram_readenrate_col & "250").value = 0.125
    'Set Output Toggle Rate to 50%
    Worksheets("uSRAM").Range(usram_tgrate_col & "9:" & usram_tgrate_col & "250").value = 0.5

End Sub

Sub clear_mathblock()

    'Clear the contents of the name field
    'Worksheets("Math Block").Range("B8:D250").ClearContents
    Worksheets("Math Block").Range(math_name_str_col & "8:" & math_name_end_col & "250").ClearContents
    
    'Clear Clock Frequencies
    'Worksheets("Math Block").Range("E8:E250").ClearContents
    Worksheets("Math Block").Range(math_clkfreq_col & "8:" & math_clkfreq_col & "250").ClearContents
    
    'Clear the contents of the #Math Blocks field
    'Worksheets("Math Block").Range("F8:F250").ClearContents
    Worksheets("Math Block").Range(math_nblock_col & "8:" & math_nblock_col & "250").ClearContents
    
    'Set the default toggle rate 12.5 %
    'Worksheets("Math Block").Range("G8:G250").value = 0.125
    Worksheets("Math Block").Range(math_tgrate_col & "8:" & math_tgrate_col & "250").value = 0.125
    
    'set Mode
    'Worksheets("Math Block").Range("H8:H250").value = "Normal-Multiplier"
    Worksheets("Math Block").Range(math_mode_col & "8:" & math_mode_col & "250").value = "Normal-Multiplier"
    
    'set Pre Adder
    'Worksheets("Math Block").Range("I8:I250").value = "No"
    Worksheets("Math Block").Range(math_preadder_col & "8:" & math_preadder_col & "250").value = "No"
    
    'set Pipelined input
    'Worksheets("Math Block").Range("J8:J250").value = "No"
    Worksheets("Math Block").Range(math_inputpipe_col & "8:" & math_inputpipe_col & "250").value = "No"
    
    'set Pipelined input
    'Worksheets("Math Block").Range("K8:K250").value = "No"
    Worksheets("Math Block").Range(math_outputpipe_col & "8:" & math_outputpipe_col & "250").value = "No"
    
End Sub

Sub clear_pll_dll_osc()
 
   'Clear Oscillator
   'Worksheets("PLL & DLL").Range("E12").value = "No"
   
   'Clear PLL
   Worksheets("PLL & DLL").Range(pll_name_str_col & "17:" & pll_out3freq_col & "24").ClearContents
   Worksheets("PLL & DLL").Range(pll_mode_col & "17:" & pll_mode_col & "24").value = "Min VCO for Low Power"
   
   'Clear DLL
   Worksheets("PLL & DLL").Range(dll_name_str_col & "28:" & dll_refclk_col & "35").ClearContents
  
End Sub

Sub clear_misc()
 
   'Clear Crypto
   Sheet14.Range(crypto_clkfreq_col & "12").ClearContents
   Sheet14.Range(crypto_tgrate_col & "12").value = 0.125
   
End Sub

Sub clear_io()

'  Worksheets("IO").Range("B21:D721").ClearContents
    Worksheets("IO").Range(io_name_str_col & "21:" & io_name_end_col & "721").ClearContents
'  Worksheets("IO").Range("E21:E721").value = "HSIO"
    Worksheets("IO").Range(io_banktype_col & "21:" & io_banktype_col & "721").value = "HSIO"
'  Worksheets("IO").Range("F21:F721").value = "LVCMOS18"
    Worksheets("IO").Range(io_standard_col & "21:" & io_standard_col & "721").value = "LVCMOS18"
'  Worksheets("IO").Range("G21:G721").value = 1.8
    Worksheets("IO").Range(io_vddi_col & "21:" & io_vddi_col & "721").value = 1.8
'  Worksheets("IO").Range("H21:J721").ClearContents
    Worksheets("IO").Range(io_inputpins_col & "21:" & io_inputpins_col & "721").ClearContents
    Worksheets("IO").Range(io_outputpins_col & "21:" & io_outputpins_col & "721").ClearContents
    Worksheets("IO").Range(io_bidirpins_col & "21:" & io_bidirpins_col & "721").ClearContents
'  Worksheets("IO").Range("K21:K721").value = "Off"
    Worksheets("IO").Range(io_vcm_col & "21:" & io_vcm_col & "721").value = "Off"
'  Worksheets("IO").Range("L21:L721").value = "Off"
    Worksheets("IO").Range(io_schmitt_col & "21:" & io_schmitt_col & "721").value = "Off"
'  Worksheets("IO").Range("M21:M721").value = "NO_ODT"
    Worksheets("IO").Range(io_odt_col & "21:" & io_odt_col & "721").value = "NO_ODT"
'  Worksheets("IO").Range("N21:N721").value = "2 mA"
    Worksheets("IO").Range(io_drive_col & "21:" & io_drive_col & "721").value = "2 mA"
'  Worksheets("IO").Range("O21:O721").value = "Off"
    Worksheets("IO").Range(io_slew_col & "21:" & io_slew_col & "721").value = "Off"
'  Worksheets("IO").Range("P21:P721").value = 5
    Worksheets("IO").Range(io_load_col & "21:" & io_load_col & "721").value = 5
'  Worksheets("IO").Range("Q21:Q721").value = "Unused"
    Worksheets("IO").Range(io_iog_col & "21:" & io_iog_col & "721").value = "Unused"
'  Worksheets("IO").Range("R21:R721").ClearContents
    Worksheets("IO").Range(io_clkfreq_col & "21:" & io_clkfreq_col & "721").ClearContents
'  Worksheets("IO").Range("S21:S721").value = "SDR"
    Worksheets("IO").Range(io_datarate_col & "21:" & io_datarate_col & "721").value = "SDR"
'  Worksheets("IO").Range("T21:T721").value = 0.125
    Worksheets("IO").Range(io_tgrate_col & "21:" & io_tgrate_col & "721").value = 0.125
'  Worksheets("IO").Range(io_enrate_col & "21:" & io_enrate_col & "721").value = 0.5
'  Worksheets("IO").Range("V21:V721").value = 1
    Worksheets("IO").Range(io_odtenable_col & "21:" & io_odtenable_col & "721").value = 1
  Worksheets("IO").Range("W21:W721").value = ""
  Worksheets("IO").Range("X21:X721").value = ""
'  Worksheets("IO").io_advanced_settings.value = False
  Worksheets("IO").Range("CB21:CB721").value = ""

End Sub

'Sub clear_mss_fddr()
'
'  'Clear FDDR
'   Worksheets("MSS & FDDR").Range("B12:E12").ClearContents
'   Worksheets("MSS & FDDR").Range("F12").value = Worksheets("MSS & FDDR").Range("AI17").value
'
'   'Clear MSS
'   Worksheets("MSS & FDDR").Range("B19:D19").ClearContents
'   Worksheets("MSS & FDDR").Range("E19").value = Worksheets("MSS & FDDR").Range("AR32").value  'Cache Controller - Disable
'   Worksheets("MSS & FDDR").Range("F19").value = "OFF"  'eNVM - OFF
'
'   Worksheets("MSS & FDDR").Range("B24").value = Worksheets("MSS & FDDR").Range("AL17").value  'MDDR_CLK MULT
'   Worksheets("MSS & FDDR").Range("C24").value = Worksheets("MSS & FDDR").Range("AO17").value  'DDR_FIC_CLK DIV
'   Worksheets("MSS & FDDR").Range("F24:H24").value = "OFF"  'MDDR Mode - OFF
'
'   Worksheets("MSS & FDDR").Range("C28").value = Worksheets("MSS & FDDR").Range("AR17").value 'APB_O_CLK DIV
'   Worksheets("MSS & FDDR").Range("D28").value = Worksheets("MSS & FDDR").Range("AR17").value 'APB_1_CLK DIV
'
'   Worksheets("MSS & FDDR").Range("C32:D34").value = "OFF"  'MMUART/SPI/I2C 0/1 - OFF
'   Worksheets("MSS & FDDR").Range("C35").value = "OFF" 'WATCHDOG - OFF
'   Worksheets("MSS & FDDR").Range("C37").value = "OFF" 'TIMER - OFF
'   Worksheets("MSS & FDDR").Range("D36").value = "OFF" 'RTC - OFF
'   Worksheets("MSS & FDDR").Range("D38").value = "OFF" 'CAN - OFF
'
'   Worksheets("MSS & FDDR").Range("H28:H30").value = "OFF"  'Ethernet, USB and HPDMA - OFF
'
'
'End Sub

'Sub clear_hpms_fddr()
'
' 'Clear FDDR
' Worksheets("HPMS & FDDR").Range("B12:E12").ClearContents
' Worksheets("HPMS & FDDR").Range("F12").value = Worksheets("HPMS & FDDR").Range("AI17").value
'
' 'Clear HPMS
' Worksheets("HPMS & FDDR").Range("B19:D19").ClearContents
' Worksheets("HPMS & FDDR").Range("E19:F19").value = "OFF" 'HPDMA, eNVM - OFF
'
' Worksheets("HPMS & FDDR").Range("B24:C24").value = Worksheets("HPMS & FDDR").Range("AL17").value 'HPMS_DDR_CLK MULT
' Worksheets("HPMS & FDDR").Range("F24:H24").value = "OFF" 'HPMS DDR Mode - OFF
'
'End Sub

Sub clear_Transceiver()

  'Worksheets("Transceiver").Range("B14:D37").ClearContents
  Worksheets("Transceiver").Range(xcvr_name_str_col & "14:" & xcvr_name_end_col & "37").ClearContents
  'Worksheets("Transceiver").Range("E14:E37").value = Worksheets("Transceiver").Range("BM17").value
  Worksheets("Transceiver").Range(xcvr_protocol_col & "14:" & xcvr_protocol_col & "37").value = Worksheets("Transceiver").Range("BM17").value
  'Worksheets("Transceiver").Range("F14:F37").ClearContents
  Worksheets("Transceiver").Range(xcvr_nlanes_col & "14:" & xcvr_nlanes_col & "37").ClearContents
  
  'Worksheets("Transceiver").Range("G14:G37").value = Worksheets("Transceiver").Range("BO17").value
  Worksheets("Transceiver").Range(xcvr_opmode_col & "14:" & xcvr_opmode_col & "37").value = Worksheets("Transceiver").Range("BO17").value
  
  'Worksheets("Transceiver").Range("H14:H37").ClearContents
  Worksheets("Transceiver").Range(xcv_txdatarate_col & "14:" & xcv_txdatarate_col & "37").ClearContents
  
  Worksheets("Transceiver").Range(xcvr_rxdatarate_col & "14:" & xcvr_rxdatarate_col & "37").ClearContents
  
  'Worksheets("Transceiver").Range("I14:I37").value = Worksheets("Transceiver").Range("BQ17").value
  Worksheets("Transceiver").Range(xcvr_pll_col & "14:" & xcvr_pll_col & "37").value = Worksheets("Transceiver").Range("BR17").value
  
  'Worksheets("Transceiver").Range("J14:J37").value = Worksheets("Transceiver").Range("BR17").value
  Worksheets("Transceiver").Range(xcvr_dfe_col & "14:" & xcvr_dfe_col & "37").value = Worksheets("Transceiver").Range("BS17").value
  
  'Worksheets("Transceiver").Range("K14:K37").value = Worksheets("Transceiver").Range("BS17").value
  Worksheets("Transceiver").Range(xcvr_eyemonitor_col & "14:" & xcvr_eyemonitor_col & "37").value = Worksheets("Transceiver").Range("BT17").value
  
  'Worksheets("Transceiver").Range("L14:L37").value = WorksheetFunction.VLookup(Worksheets("Transceiver").Range("BN4").value, Worksheets("Transceiver").Range("CM41:CP48").value, 4, False)
  Worksheets("Transceiver").Range(xcvr_ctle_col & "14:" & xcvr_ctle_col & "37").value = WorksheetFunction.VLookup(Worksheets("Transceiver").Range("BN4").value, Worksheets("Transceiver").Range("CM41:CP48").value, 4, False)
  
  'Worksheets("Transceiver").Range("N14:N37").value = Worksheets("Transceiver").Range("BV17").value
  Worksheets("Transceiver").Range(xcvr_txamp_col & "14:" & xcvr_txamp_col & "37").value = Worksheets("Transceiver").Range("BV17").value
  
  'Worksheets("Transceiver").Range("O14:O37").value = Worksheets("Transceiver").Range("BW17").value
  Worksheets("Transceiver").Range(xcvr_pcsmode_col & "14:" & xcvr_pcsmode_col & "37").value = Worksheets("Transceiver").Range("BW17").value
  
  'Worksheets("Transceiver").Range("P14:P37").value = Worksheets("Transceiver").Range("BX17").value
  Worksheets("Transceiver").Range(xcvr_pcswidth_col & "14:" & xcvr_pcswidth_col & "37").value = Worksheets("Transceiver").Range("BX17").value
  
  'Worksheets("Transceiver").Range("Q14:Q37").value = Worksheets("Transceiver").Range("BM132").value
  Worksheets("Transceiver").Range(xcvr_pcie_col & "14:" & xcvr_pcie_col & "37").value = Worksheets("Transceiver").Range("BM132").value

End Sub
Private Sub clear_userfrom_data()
        
    clear_manage_ip 'To clear Manage IP
        
    'To clear Import path
    ActiveWorkbook.Worksheets("dss_data").Range("I35").ClearContents
    
    'Save the Init PE data
    Worksheets("dss_data").Range("D125:D162").value = Worksheets("dss_data").Range("C125:C162").value
End Sub
Function clear_manage_ip()
    'To clear Manage IP
    Worksheets("dss_data").Range("D252").value = 0
    Worksheets("dss_data").Range("D254:D273").ClearContents
    Worksheets("dss_data").Range("F254:F273").ClearContents
    Worksheets("dss_data").Range("H254:Q273").ClearContents
    Worksheets("dss_data").Range("A248").value = 1 ' number of ddr iP created by init PE
End Function
Sub clear_snapshots_and_data()
    Call Sheets("Snapshot").doDeleteAllSnap
    Worksheets("summary_snap").Range("A:ZZ").ClearContents
    Worksheets("clock_snap").Range("A:ZZ").ClearContents
    Worksheets("logic_snap").Range("A:ZZ").ClearContents
    Worksheets("lsram_snap").Range("A:ZZ").ClearContents
    Worksheets("usram_snap").Range("A:ZZ").ClearContents
    Worksheets("math_snap").Range("A:ZZ").ClearContents
    Worksheets("io_snap").Range("A:ZZ").ClearContents
    Worksheets("Transceiver_snap").Range("A:ZZ").ClearContents
    Worksheets("pll_snap").Range("A:ZZ").ClearContents
    Worksheets("dll_snap").Range("A:ZZ").ClearContents
    Worksheets("misc_snap").Range("A:ZZ").ClearContents

    Worksheets("Snapshot").Range("E4").value = 1
    Worksheets("Snapshot").Range("H4").value = 0
    Worksheets("Snapshot").Range("K4").value = 0
    Worksheets("Snapshot").Range("N4").value = 0
    Worksheets("Snapshot").Range("Q4").value = 0
    Worksheets("Snapshot").Range("T4").value = 0
    Worksheets("Snapshot").Range("W4").value = 0
    Worksheets("Snapshot").Range("Z4").value = 0
    Worksheets("Snapshot").Range("AC4").value = 0
    Worksheets("Snapshot").Range("AF4").value = 0
End Sub

Sub clear_all_snapshots()
    ans = MsgBox("Are you sure you want to delete all snapshots.", vbYesNo, "Clear all Snapshots")
        If ans = vbNo Then
            Exit Sub
        Else
            Application.ScreenUpdating = False
                clear_snapshots_and_data
            Application.ScreenUpdating = True
        End If
End Sub

Public Sub ComputeThermalPower()
   'for Max ta purpose
    Worksheets("core_static_data").Range("C9").value = Worksheets("dss_data").Range("Q28").value
    Worksheets("dss_data").Range("G21").value = Worksheets("Summary").Range("I11").value
    
    'Thermal power purpose
    Worksheets("core_static_data").Range("C9").value = Worksheets("Summary").Range("D26").value
    If Worksheets("core_static_data").Range("C9").value < 125 Then
        For i = 1 To 20
            Worksheets("core_static_data").Range("C9").value = Worksheets("Summary").Range("I16").value ' 20 iterations for Junction temperature accuracy and convergence.
        Next i
    Else
        Worksheets("core_static_data").Range("C9").value = 125
    End If
End Sub

Attribute VB_Name = "Module3"
Sub init_pe()
   Application.ScreenUpdating = False
   init_pc.Show
   Application.ScreenUpdating = True
End Sub

Private Sub init_io_bank()
    Application.ScreenUpdating = False
    io_banks.Show
    Application.ScreenUpdating = True
End Sub
Sub manage_ip()
    Application.ScreenUpdating = False
    manage_all_ip.Show
    Application.ScreenUpdating = True
End Sub
Sub Import_Click()
' import_mpe.file_path.value = ActiveWorkbook.Worksheets("dss_data").Range("I4").value    'change from activework to thisworkbook
   import_mpe.file_path.value = ThisWorkbook.Worksheets("dss_data").Range("I35").value    'change from activework to thisworkbook
    Application.ScreenUpdating = False
    import_mpe.Show
    Application.ScreenUpdating = True
End Sub
Private Sub testSetFDDR()
    init_pc.scriptSetFDDR 173, "DDR2", "32", "50", "111", "3"
End Sub
Sub return_to_summary()
  Worksheets("Summary").Activate
End Sub
Sub reset_to_defaults()
    Application.ScreenUpdating = False
    reset_form.Show
    Application.ScreenUpdating = True
End Sub
Sub Export_Submit()
    export_report.Show
End Sub
Sub comment()
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------
'                                                             Batch mode commands to execute all modules
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------
End Sub
'--------------------------------------
'Batch to set DDR
'--------------------------------------
Private Function setDDR(ByVal d_type As String, ByVal d_width As Integer, ByVal d_clkfreq As Double, ByVal d_odt As String, ByVal d_axitype As String, ByVal d_axiwidth As Integer, ByVal d_logicclkrate As String, ByVal d_ecc As String, ByVal d_module_name As String)
     Run add_ddr3.MPESETDDR(d_type, d_width, d_clkfreq, d_odt, d_axitype, d_axiwidth, d_logicclkrate, d_ecc, d_module_name)
     setDDR = "DDR set successfully"
End Function
'--------------------------------------
'Batch to set Transceiver
'--------------------------------------
Private Function setTransceiver(ByVal module_name As String, ByVal protocol_preset As String, ByVal xcvr_lanes_tb As Integer, ByVal operation_mode As String, ByVal xcvr_data_rate_tb As Double, ByVal pll_used As String, ByVal tx_amplitude As String, ByVal pcs_mode As String, ByVal pcs_width As Integer, ByVal hard_pcie As String)
    Run add_transceiver.MPESETTRANS(module_name, protocol_preset, xcvr_lanes_tb, operation_mode, xcvr_data_rate_tb, pll_used, tx_amplitude, pcs_mode, pcs_width, hard_pcie)
    setTransceiver = "Transceiver set successfully"
End Function
'--------------------------------------
'Batch to set LSRAM
'--------------------------------------
Private Function setLSRAM(ByVal lsram_module_name As String, ByVal lsram_portA_depth As Integer, ByVal lsram_portA_width As Integer, ByVal lsram_portA_clkfrq As Double, ByVal lsram_portA_writerate As String, ByVal lsram_portA_enablerate As String, ByVal lsram_portB_depth As Integer, ByVal lsram_portB_width As Integer, ByVal lsram_portB_clkfrq As Double, ByVal lsram_portB_writerate As String, ByVal lsram_portB_enablerate As String, ByVal lsram_operationmode_cb As String, ByVal lsram_togglerate As String, ByVal lsram_optimizemode_cb As String)
    Run memory_config.MPESETLSRAM(lsram_module_name, lsram_portA_depth, lsram_portA_width, lsram_portA_clkfrq, lsram_portA_writerate, lsram_portA_enablerate, lsram_portB_depth, lsram_portB_width, lsram_portB_clkfrq, lsram_portB_writerate, lsram_portB_enablerate, lsram_operationmode_cb, lsram_togglerate, lsram_optimizemode_cb)
    setLSRAM = "LSRAM set successfully"
End Function
'--------------------------------------
'Batch to set uSRAM
'--------------------------------------
Private Function setUSRAM(ByVal usram_module_name As String, ByVal usram_writeP_depth As Integer, ByVal usram_writeP_width As Integer, ByVal usram_writeP_clkfreq As Double, ByVal usram_writeP_enablerate As String, ByVal usram_readP_depth As Integer, ByVal usram_readP_width As Integer, ByVal usram_readP_clkfreq As Double, ByVal usram_readP_enablerate As String, ByVal usram_optimizemode_cb As String, ByVal usram_togglerate As String, ByVal usram_useregisters_cb As String)
    Run memory_config.MPESETuSRAM(usram_module_name, usram_writeP_depth, usram_writeP_width, usram_writeP_clkfreq, usram_writeP_enablerate, usram_readP_depth, usram_readP_width, usram_readP_clkfreq, usram_readP_enablerate, usram_optimizemode_cb, usram_togglerate, usram_useregisters_cb)
    setUSRAM = "uSRAM set successfully"
End Function
'--------------------------------------
'Batch to intiliaze Power Estimator
'--------------------------------------
Private Function InitPowerEstimator(ByVal fpga_sys_clk As String, ByVal cb_init_fabric As String, ByVal fpga_reg_txt As String, ByVal fpga_comb_txt As String, ByVal fpga_uram_txt As String, _
ByVal fpga_lsram_txt As String, ByVal fpga_math_txt As String, ByVal io_tech As String, ByVal inputs_tb As String, ByVal outputs_tb As String, ByVal default_tr_txt As String, _
ByVal default_er_txt As String, ByVal ok_append As String, ByVal ok_clear As String, ByVal reset_button As String)
    Run init_pc.MPESETINITPC(fpga_sys_clk, cb_init_fabric, fpga_reg_txt, fpga_comb_txt, fpga_uram_txt, fpga_lsram_txt, fpga_math_txt, io_tech, inputs_tb, outputs_tb, _
    default_tr_txt, default_er_txt, ok_append, ok_clear, reset_button)
    setInitPc = "Init PC set successfully"
End Function
'--------------------------------------
'Batch to import MPE
'--------------------------------------
Private Function import(ByVal estimator_rb As String, ByVal smartpower_rb As String, ByVal imp_append_data As String, ByVal imp_overwrite_data As String, ByVal Imp_device_settings As String, _
ByVal Imp_thermal_inputs As String, ByVal Imp_voltage_settings As String, ByVal Imp_snapshots As String, ByVal file_path As String)
    Run import_mpe.MPEIMPORTMPE(estimator_rb, smartpower_rb, imp_append_data, imp_overwrite_data, Imp_device_settings, Imp_thermal_inputs, Imp_voltage_settings, Imp_snapshots, file_path)
    import = "MPE imported successfully"
End Function
'--------------------------------------
'Batch to create Snapshot
'--------------------------------------
Private Function createSnapshot(ByVal snapshot As String)
    If snapshot = "True" Then
        Sheets("Snapshot").Create_snapshot_batch
        createSnapshot = "Snapshot Captured"
    End If
End Function
'--------------------------------------
'Batch to delete IPs
'--------------------------------------
Private Function deleteIP(ByVal manage_ip_list As String)
    Run manage_all_ip.MPEDELETEIP(manage_ip_list)
    deleteIP = manage_ip_list & "deleted"
End Function
'--------------------------------------
'Batch to reset to Default
'--------------------------------------
Private Function resetToDefault(ByVal reset_data As String, ByVal reset_all_settings As String, ByVal reset_all_settings_snapshots As String)
    Run reset_form.MPE_RESET_DEFAULT(reset_data, reset_all_settings, reset_all_settings_snapshots)
    resetToDefault = "Device Reset Succesfull"
End Function
'Testing the DDR_script macro through this workbook only
Sub dummy()
  'Debug.Print ("hello, console!")
  
  'setDDR "DDR4", 64, 7000, "120", "AXI4", 512, "Quad", "yes", "My_script_ddr4"
  
  'setDDR "DDR3", 8, 666.6, "NO_ODT", "AXI3", 64, "Quad", "no", "After_ddr3"
  
  'setDDR "LPDDR3", 16, 6000, "120", "AXI3", 128, "Quad", "NA", "My_script_lPDDR3"

  'resetToDefault "TRUE", "FALSE", "FALSE"
   
  'setTransceiver "from_Batch6", "PCIe Gen1", 333, "Duplex", 2.5, "Q0_TXPLL0", "800mV with -6.0dB", "PIPE", 32, "Yes"
  
  'setLSRAM "from_batch1", 110, 10, 50.2, "12.5", "12.5", 10, 10, 50.01, "12.5", "12.5", "Dual Port mode", "60", "Low Power mode"
  
  'setUSRAM "from_Batch4", 10, 10, 50.2, "12.5", 10, 10, 1500.2, "12.5", "High Speed mode", "1500", "Yes"
  
  'InitPowerEstimator "100", "75 %", "186858", "186858", "1386", "476", "462", "LVCMOS18", "10", "10", "12.5", "12.5", "False", "True", "False"
  
  'createSnapshot "True"
  
  'deleteIP "from_batch1"
  
  'resetToDefault "True", "False", "False"
 ' Debug.Print (getModePower("Active"))
  '----------------------------------------------------------------------------------------------------------------------------------------------------------------
  'Debug.Print (getResourceUtilization("DFF"))
  'setVoltage ("0.97")
  'Debug.Print (setDevice("MPF300XT"))
  'Debug.Print (setPackage("FCG484"))
  'Debug.Print (setDeviceInfo("MPF300TLS", "FCG484", "IND", "STD"))
  'Debug.Print (setProcess("Maximum"))
End Sub
Private Function setDeviceInfo(ByVal device As String, ByVal package As String, ByVal tGrade As String, ByVal sGrade As String)
    a = Sheet2.ValidateDevice1(device, package, tGrade, sGrade)
    If a <> "True" Then
        setDeviceInfo = a
        Exit Function
    End If
    setDevice (device)
    setPackage (package)
    setTemperatureRange (tGrade)
    setSpeedGrade (sGrade)
    setDeviceInfo = "Device: " & device & " Package: " & package & " Temperature Grade: " & tGrade & " Speed Grade: " & sGrade
End Function
Private Function setDevice(ByVal device_ As String) As String
    a = Sheet2.ValidateDevice1(device:=device_)
    If a <> "True" Then
        setDevice = a
        Exit Function
    End If
    Worksheets("Summary").Range("D12").value = device_
    setDevice = "Device set to: " & device_
End Function
Private Function setPackage(ByVal package_ As String)
    a = Sheet2.ValidateDevice1(package:=package_)
    If a <> "True" Then
        setPackage = a
        Exit Function
    End If
    Worksheets("Summary").Range("D13").value = package_
    setPackage = "Package set to: " & package_
End Function
Private Function setTemperatureRange(ByVal tGrade_ As String)
    If UCase(tGrade_) Like "EXT*" Then
            tRange_ = "Extended"
        ElseIf UCase(tGrade_) Like "IND*" Then
            tGrade_ = "Industrial"
        End If
    a = Sheet2.ValidateDevice1(tGrade:=tGrade_)
    If a <> "True" Then
        setTemperatureRange = a
        Exit Function
    End If
    Worksheets("Summary").Range("D14").value = tGrade_
    setTemperatureRange = "Temperature Grade set to: " & tGrade_
End Function
Private Function setCoreVoltage(ByVal cVoltage As String)
    If cVoltage = "1.0 V" Or cVoltage = "1.05 V" Then
        Worksheets("Summary").Range("D15").value = cVoltage
    Else
        setCoreVoltage = "Invalid Voltage. Voltage is either '1.0 V' or '1.05 V'"
    End If
End Function
Private Function setProcess(ByVal process As String)
    If UCase(process) = "TYPICAL" Or UCase(process) = "MAXIMUM" Then
        Worksheets("Summary").Range("D16").value = process
    Else
        setProcess = "Invalid Process. Process is either 'Typical' or 'Maximum'"
    End If
End Function
Private Function setSpeedGrade(ByVal sGrade_ As String)
    a = Sheet2.ValidateDevice1(sGrade:=sGrade_)
    If a <> "True" Then
        Debug.Print (a)
        Exit Function
    End If
    Worksheets("Summary").Range("D17").value = sGrade_
    setSpeedGrade = "Speed Grade set to: " & sGrade_
End Function
Private Function setJunctionTemperature(ByVal jTemp As String)
    Worksheets("Summary").Range("D26").value = jTemp
    setJunctionTemperature = "Junction Temperature set to: " & jTemp
End Function
Private Function getResourceUtilization(ByVal Resource As String)
    rowno = Worksheets("Summary").Range(Resource).row
    Worksheets("Summary").Range(Resource).NumberFormat = "0.000%"
    getResourceUtilization = Worksheets("Summary").Range("O" & rowno).Text
End Function
Private Function getModePower(ByVal mode As String)
    rowno = Worksheets("Summary").Range(mode).row
    getModePower = Worksheets("Summary").Range("N" & rowno).value
End Function
Private Function ExportPowerReport(Optional Power_Summary = False, Optional Power_Breakdown = False, Optional Rail_Breakdown = False, Optional Resource_Utilization = False, Optional Thermal_Summary = False, Optional File_Location = ".")
    Run export_report.ExportPowerReport(power:=Power_Summary, BPower:=Power_Breakdown, BRail:=Rail_Breakdown, Resource:=Resource_Utilization, Thermal:=Thermal_Summary, FileLoc:=File_Location)
End Function
Function batch_call()
    batch_call = "Running..."
End Function
Sub test()
    a = ExportPowerReport(Power_Summary:=True, Power_Breakdown:=True, Rail_Breakdown:=True, Resource_Utilization:=True, Thermal_Summary:=True, File_Location:=".")
End Sub


Attribute VB_Name = "Module4"
'Clock sheet column names references.
Property Get clock_name_str_col() As String
    clock_name_str_col = "B"
End Property
Property Get clock_name_end_col() As String
    clock_name_end_col = "D"
End Property

Property Get clock_freq_col() As String
    clock_freq_col = "E"
End Property

Property Get clock_clktype_col() As String
    clock_clktype_col = "F"
End Property

Property Get clock_fanout_col() As String
    clock_fanout_col = "G"
End Property

Property Get clock_enrate_col() As String
    clock_enrate_col = "H"
End Property

'Logic sheet column names references.
Property Get logic_name_str_col() As String
    logic_name_str_col = "B"
End Property

Property Get logic_name_end_col() As String
    logic_name_end_col = "D"
End Property

Property Get logic_freq_col() As String
    logic_freq_col = "E"
End Property

Property Get logic_dff_col() As String
    logic_dff_col = "F"
End Property

Property Get logic_lut_col() As String
    logic_lut_col = "G"
End Property

Property Get logic_fanout_col() As String
    logic_fanout_col = "H"
End Property

Property Get logic_tgrate_col() As String
    logic_tgrate_col = "I"
End Property

'LSRAM sheet column names references.

Property Get lsram_name_str_col() As String
    lsram_name_str_col = "B"
End Property

Property Get lsram_name_end_col() As String
    lsram_name_end_col = "D"
End Property

Property Get lsram_nblock_col() As String
    lsram_nblock_col = "E"
End Property

Property Get lsram_Awidth_col() As String
    lsram_Awidth_col = "F"
End Property

Property Get lsram_Aclkfreq_col() As String
    lsram_Aclkfreq_col = "G"
End Property

Property Get lsram_Amode_col() As String
    lsram_Amode_col = "H"
End Property

Property Get lsram_Awriterate_col() As String
    lsram_Awriterate_col = "I"
End Property

Property Get lsram_Areadrate_col() As String
    lsram_Areadrate_col = "J"
End Property

Property Get lsram_Aenrate_col() As String
    lsram_Aenrate_col = "K"
End Property

Property Get lsram_Bwidth_col() As String
    lsram_Bwidth_col = "L"
End Property

Property Get lsram_Bclkfreq_col() As String
    lsram_Bclkfreq_col = "M"
End Property

Property Get lsram_Bmode_col() As String
    lsram_Bmode_col = "N"
End Property

Property Get lsram_Bwriterate_col() As String
    lsram_Bwriterate_col = "O"
End Property

Property Get lsram_Breadrate_col() As String
    lsram_Breadrate_col = "P"
End Property

Property Get lsram_Benrate_col() As String
    lsram_Benrate_col = "Q"
End Property

Property Get lsram_pipeline_col() As String
    lsram_pipeline_col = "R"
End Property

Property Get lsram_ecc_col() As String
    lsram_ecc_col = "S"
End Property

Property Get lsram_tgrate_col() As String
    lsram_tgrate_col = "T"
End Property

'uSRAM sheet column names references.

Property Get usram_name_str_col() As String
    usram_name_str_col = "B"
End Property

Property Get usram_name_end_col() As String
    usram_name_end_col = "D"
End Property

Property Get usram_nblock_col() As String
    usram_nblock_col = "E"
End Property

Property Get usram_width_col() As String
    usram_width_col = "F"
End Property

Property Get usram_reg_col() As String
    usram_reg_col = "G"
End Property

Property Get usram_writeclkfreq_col() As String
    usram_writeclkfreq_col = "H"
End Property

Property Get usram_writeenrate_col() As String
    usram_writeenrate_col = "I"
End Property

Property Get usram_readclkfreq_col() As String
    usram_readclkfreq_col = "J"
End Property

Property Get usram_readenrate_col() As String
    usram_readenrate_col = "K"
End Property

Property Get usram_tgrate_col() As String
    usram_tgrate_col = "L"
End Property

'Math block sheet column names references.

Property Get math_name_str_col() As String
    math_name_str_col = "B"
End Property

Property Get math_name_end_col() As String
    math_name_end_col = "D"
End Property

Property Get math_clkfreq_col() As String
    math_clkfreq_col = "E"
End Property

Property Get math_nblock_col() As String
    math_nblock_col = "F"
End Property

Property Get math_tgrate_col() As String
    math_tgrate_col = "G"
End Property

Property Get math_mode_col() As String
    math_mode_col = "H"
End Property

Property Get math_preadder_col() As String
    math_preadder_col = "I"
End Property

Property Get math_inputpipe_col() As String
    math_inputpipe_col = "J"
End Property

Property Get math_outputpipe_col() As String
    math_outputpipe_col = "K"
End Property

'IO sheet column names references.

Property Get io_name_str_col() As String
    io_name_str_col = "B"
End Property

Property Get io_name_end_col() As String
    io_name_end_col = "D"
End Property

Property Get io_banktype_col() As String
    io_banktype_col = "E"
End Property

Property Get io_standard_col() As String
    io_standard_col = "F"
End Property

Property Get io_vddi_col() As String
    io_vddi_col = "G"
End Property

Property Get io_inputpins_col() As String
    io_inputpins_col = "H"
End Property

Property Get io_outputpins_col() As String
    io_outputpins_col = "I"
End Property

Property Get io_bidirpins_col() As String
    io_bidirpins_col = "J"
End Property

Property Get io_vcm_col() As String
    io_vcm_col = "K"
End Property

Property Get io_schmitt_col() As String
    io_schmitt_col = "L"
End Property

Property Get io_odt_col() As String
    io_odt_col = "M"
End Property

Property Get io_drive_col() As String
    io_drive_col = "N"
End Property

Property Get io_slew_col() As String
    io_slew_col = "O"
End Property

Property Get io_load_col() As String
    io_load_col = "P"
End Property

Property Get io_iog_col() As String
    io_iog_col = "Q"
End Property

Property Get io_clkfreq_col() As String
    io_clkfreq_col = "R"
End Property

Property Get io_datarate_col() As String
    io_datarate_col = "S"
End Property

Property Get io_tgrate_col() As String
    io_tgrate_col = "T"
End Property

Property Get io_enrate_col() As String
    io_enrate_col = "U"
End Property

Property Get io_odtenable_col() As String
    io_odtenable_col = "V"
End Property

'Transceiver sheet column names references.

Property Get xcvr_name_str_col() As String
    xcvr_name_str_col = "B"
End Property

Property Get xcvr_name_end_col() As String
    xcvr_name_end_col = "D"
End Property

Property Get xcvr_protocol_col() As String
    xcvr_protocol_col = "E"
End Property

Property Get xcvr_nlanes_col() As String
    xcvr_nlanes_col = "F"
End Property

Property Get xcvr_opmode_col() As String
    xcvr_opmode_col = "G"
End Property

Property Get xcv_txdatarate_col() As String
    xcv_txdatarate_col = "H"
End Property

Property Get xcvr_rxdatarate_col() As String
    xcvr_rxdatarate_col = "I"
End Property

Property Get xcvr_pll_col() As String
    xcvr_pll_col = "J"
End Property

Property Get xcvr_dfe_col() As String
    xcvr_dfe_col = "K"
End Property

Property Get xcvr_eyemonitor_col() As String
    xcvr_eyemonitor_col = "L"
End Property

Property Get xcvr_ctle_col() As String
    xcvr_ctle_col = "M"
End Property

Property Get xcvr_txamp_col() As String
    xcvr_txamp_col = "N"
End Property

Property Get xcvr_pcsmode_col() As String
    xcvr_pcsmode_col = "O"
End Property

Property Get xcvr_pcswidth_col() As String
    xcvr_pcswidth_col = "P"
End Property

Property Get xcvr_pcie_col() As String
    xcvr_pcie_col = "Q"
End Property

'PLL sheet column names references.

Property Get pll_name_str_col() As String
    pll_name_str_col = "B"
End Property

Property Get pll_name_end_col() As String
    pll_name_end_col = "D"
End Property

Property Get pll_refclk_col() As String
    pll_refclk_col = "E"
End Property

Property Get pll_out0freq_col() As String
    pll_out0freq_col = "F"
End Property

Property Get pll_out1freq_col() As String
    pll_out1freq_col = "G"
End Property

Property Get pll_out2freq_col() As String
    pll_out2freq_col = "H"
End Property

Property Get pll_out3freq_col() As String
    pll_out3freq_col = "I"
End Property

Property Get pll_mode_col() As String
    pll_mode_col = "J"
End Property

'DLL sheet column names references.

Property Get dll_name_str_col() As String
    dll_name_str_col = "B"
End Property

Property Get dll_name_end_col() As String
    dll_name_end_col = "D"
End Property

Property Get dll_refclk_col() As String
    dll_refclk_col = "E"
End Property

'User Crypto sheet column names references.

Property Get crypto_clkfreq_col() As String
    crypto_clkfreq_col = "E"
End Property

Property Get crypto_tgrate_col() As String
    crypto_tgrate_col = "F"
End Property
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    
    'Handling for pre-post Adder option based on Mode
    If Target.column = 8 Then
        Range("I" & Target.row).value = Range(WorksheetFunction.VLookup(Range("H" & Target.row).value, Range("BG3:BI6").value, 3, False)).value
    End If
    
    
    If Worksheets("dss_data").Range("G19").value <> Worksheets("Summary").Range("I11").value Then
        ComputeThermalPower
        Worksheets("dss_data").Range("G19").value = Worksheets("Summary").Range("I11").value
    End If
       
End Sub
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Worksheets("dss_data").Range("G19").value <> Worksheets("Summary").Range("I11").value Then
        ComputeThermalPower
        Worksheets("dss_data").Range("G19").value = Worksheets("Summary").Range("I11").value
    End If
End Sub



Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Worksheets("dss_data").Range("G19").value <> Worksheets("Summary").Range("I11").value Then
        ComputeThermalPower
        Worksheets("dss_data").Range("G19").value = Worksheets("Summary").Range("I11").value
    End If
End Sub



Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "exportReport, 28528, 0, MSForms, CommandButton"
Dim LockThermal As Boolean
Const Enable = True
Dim computationInProgress As Boolean
Dim thermalSupported As Boolean
Private Sub NormalToBack()
    Set rng = ActiveSheet.Range("A1")
    For i = 0 To 54
        For j = 0 To 20
            If rng.Offset(i, j).Style = "Normal" Then
                rng.Offset(i, j).Style = "Background"
            Else
                rng.Offset(i, j).Select
                Selection.Style = rng.Offset(i, j).Style
            End If
        Next j
    Next i
End Sub

Private Sub CleanStyle()
    Max = ActiveWorkbook.Styles.Count
    For i = 1 To Max
        If Not ActiveWorkbook.Styles(i).BuiltIn Then
            If InStr(ActiveWorkbook.Styles(i).Name, "Title ") > 0 Then
                ActiveWorkbook.Styles(i).Delete
                i = 1
                Max = ActiveWorkbook.Styles.Count
            End If
        End If
    Next i
End Sub
Private Sub ExportReport_Click()
   Export_Submit
   Worksheets("Summary").Range("D7").Activate
End Sub

Private Sub CommandButton1_Click()

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    'On Error Resume Next
    'partNumber
    
    Dim key As String
    Dim KeySerdes As String
    
    ' For chosing the default value of device when family is changed.
    
    If Target.row = 11 And Target.column = 4 Then
      If Range("D11").value = Worksheets("dss_data").Range("B2") Then
        Range("D12").value = WorksheetFunction.Substitute(Range("D12").value, "M2GL", "M2S", 1) 'Keeping this code, will update it once marketing names for G5/G5+ devices are finalized.
      Else
        Range("D12").value = WorksheetFunction.Substitute(Range("D12").value, "M2S", "M2GL", 1) 'Keeping this code, will update it once marketing names for G5/G5+ devices are finalized.
      End If
    End If
    
    ' For chosing the value of VDD & VDDA Rail Voltage Value in Rail Summary Table if Core voltage is changed.
    If Target.row = 15 And Target.column = 4 Then
       Range("N21").value = WorksheetFunction.VLookup(Range("D15").value, Worksheets("Summary").Range("AQ24:AR25").value, 2, False)
     'VDDA rail is independent of VDD rail voltage
     '  Range("N33").value = WorksheetFunction.VLookup(Range("D15").value, Worksheets("Summary").Range("AQ24:AR25").value, 2, False)
    End If
    
        
    ' For chosing the default value of package when device/die is changed.
    If Target.row = 12 And Target.column = 4 Then
      'when device change presets in init PE making as defaults.
      Worksheets("dss_data").Range("D125:D162").value = Worksheets("dss_data").Range("C125:C162").value
      
      If Range("D11").value = Range("AI1").value Then
        key = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("B3:D38").value, 3, False)
        KeySerdes = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("B3:E38").value, 4, False)
      Else
        key = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("C3:D38").value, 2, False)
        KeySerdes = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("C3:E38").value, 3, False)
      End If
      
     
      Range("D13").value = WorksheetFunction.HLookup(key, Range("AO1:AV12").value, 2, False)
'      If Not WorksheetFunction.VLookup(KeySerdes, Worksheets("Transceiver_data").Range("B90:C118").value, 2, False) Then
'       HideSerdes
'      Else
'       UnHideSerdes
'      End If

      'for choosing the speed grade default value
      If Right(Left(Worksheets("Summary").Range("D12").value, 8), 1) <> "L" Then
          Range("D17").value = "STD"
      Else
            Range("D17").value = "STD"
          'Range("D17").value = "STD-LP"
      End If
      
      If Right(Worksheets("Summary").Range("D12").value, 1) <> "S" Then
        HideSecurity
      Else
        UnHideSecurity
      End If
      
      'For 300XT device in IO sheet VDDI and VCM is not suppoted so hidding the same
      If Worksheets("Summary").Range("D12").value = "MPF300XT" Then
        Worksheets("IO").Columns("G").EntireColumn.Hidden = True    'VDDI
        Worksheets("IO").Columns("K").EntireColumn.Hidden = True    'VCM
      Else
        Worksheets("IO").Columns("G").EntireColumn.Hidden = False    'VDDI
        Worksheets("IO").Columns("K").EntireColumn.Hidden = False    'VCM
      End If
      
      
      'SAR-98887 fix
'      If Worksheets("Summary").Range("D11").value = Worksheets("Summary").Range("AI1").value Then
'            'Worksheets("Summary").Range("M15").value = 0
'            Worksheets("Summary").Range("M15:O15").ClearContents
'            Worksheets("Summary").Range("M13").value = 1 - Worksheets("Summary").Range("M14").value
'            Worksheets("Summary").Range("L15:O15").Locked = True
'            Worksheets("Summary").Range("L15:O15").Interior.Color = RGB(192, 192, 192)
'      Else
'            Worksheets("Summary").Range("M15:O15").Locked = False
'            Worksheets("Summary").Range("M15").Interior.Color = xlNone
'            Worksheets("Summary").Range("N15:O15").Interior.Color = RGB(216, 228, 188)
'            Worksheets("Summary").Range("M13").value = 0.5
'            Worksheets("Summary").Range("M14").value = 0
'            Worksheets("Summary").Range("M15").value = 0.5
'      End If
            
            
      'Also change the voltage if not in range
      If Not Range("N21").Validation.value Then
        Range("N21").value = WorksheetFunction.VLookup(Range("D15").value, Range("AQ24:AR25"), 2, False)
      End If
    
        'if device changes CTLE drive options in XCVR sheet changes
        
        key = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("B3:D38").value, 3, False)
        Worksheets("Transceiver").Range("M14:M37").value = WorksheetFunction.VLookup(key, Worksheets("Transceiver").Range("CM41:CP48").value, 4, False)
        
    
    End If
    
    
    If (Target.row = 12 Or Target.row = 13) And Target.column = 4 Then
          'And change the range
      If Not Range("D14").Validation.value Then
        Range("D14").value = Range("AO20").value
      End If
    End If
    
    If Enable Then
    
        'Key Generation
        If Range("D11").value = Range("AI1").value Then
          key = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("B3:D38").value, 3, False)
        Else
          key = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("C3:D38").value, 2, False)
        End If
        
        'Any change to D11:D15 trigger thetaSA/thetaJA/thermal/power recomputation
        'Any change to D27 trigger thermal/power recomputation
        'Any change to D29:D33 trigger thetaSA/thetaJA/thermal/power recomputation
        'Any change to I14 trigger power recomputation (except if already in progress)
                
        If Target.column = 4 And (Target.row = 11 Or Target.row = 12 Or Target.row = 13) Then
            'Check is thermal supported
            thermalSupported = WorksheetFunction.VLookup(key & "_" & Range("D13").value, Worksheets("dss_data").Range("AB48:AX100").value, 23, False)
            If Not thermalSupported Then
                computationInProgress = True
                'estimated_tj.value = False
                'estimated_tj.Enabled = True
                'user_entered_tj.value = True
                Range("D25").value = Range("AX31").value
                user_entered_tj_select
                Range("C34").value = "Thermal data is not yet available for the selected combination of die and package"
                computationInProgress = False
            Else
                computationInProgress = True
                Range("C34").value = ""
                Application.ScreenUpdating = False
                'estimated_tj.Enabled = True  check how to change this
                Range("D25").value = Range("AX31").value
             '   Worksheets("Summary").Range("D25").Locked = False
             '   Worksheets("Summary").Range("D25").Interior.Color = x1None
                Dim oldVal As Boolean
                If Range("D25").value = Range("AX31").value Then
'                oldVal = user_entered_tj.value
                 oldVal = True
                End If
                'estimated_tj.value = True
                Range("D25").value = Range("AX32").value
                estimated_tj_select
                If oldVal Then
                    'user_entered_tj.value = True
                    Range("D25").value = Range("AX31").value
                    user_entered_tj_select
                End If
                Application.ScreenUpdating = True
                computationInProgress = False
            End If
        End If
        
        'Thermal input data section
        
        If Target.column = 4 And Target.row = 25 Then
            If Range("D25").value = Range("AX31").value Then
                    user_entered_tj_select
            End If
            If Range("D25").value = Range("AX32").value Then
                    estimated_tj_select
            End If
        End If
        
        If Target.column = 4 And Target.row = 27 Then
            If Range("D27").value = Range("AY31").value Then
                    custom_theta_ja_select
            End If
            If Range("D27").value = Range("AY32").value Then
                    estimated_theta_ja_select
            End If
        End If
        
        If Not computationInProgress Then
            computationInProgress = True
            Application.ScreenUpdating = False
            
            updateAir = False
            updateSA = False
            updateJA = False
            updateThermal = False
            
            If Target.column = 4 And (Target.row >= 11 And Target.row <= 16) Then
                updateSA = True
                updateJA = True
                updateThermal = True
            End If
            
            If Target.column = 4 And Target.row = 26 Then
                updateJA = True
                updateThermal = True
            End If
            
            If Target.column = 4 And Target.row = 29 Then
                updateAir = True
            End If
            
            If Target.column = 4 And Target.row >= 28 And Target.row <= 32 Then
                updateSA = True
                updateJA = True
                updateThermal = True
            End If
            
            
'            If Target.Column = 9 And Target.row = 11 Then
'                updateThermal = True
'            End If
            If Worksheets("dss_data").Range("G19").value <> Worksheets("Summary").Range("I11").value Then
                updateThermal = True
                Worksheets("dss_data").Range("G19").value = Worksheets("Summary").Range("I11").value
            End If
                
            If updateAir And (Range("D25").value = Range("AX32").value) Then
                UpdateAirFlow
            End If
            
            
            If updateSA And (Range("D25").value = Range("AX32").value) Then
                UpdateThetaSA
            End If
            
            If updateJA And (Range("D25").value = Range("AX32").value) Then
                UpdateThetaJA
            End If
            
            If updateThermal Then
                ComputeThermalPower
            End If
            computationInProgress = False
            Application.ScreenUpdating = True
            
        End If
        
    End If
End Sub

Private Sub HideSerdes()
   Dim p As String
   p = "tpp555"
        
   Application.ScreenUpdating = False
   ThisWorkbook.Unprotect Password:=p
    
   Worksheets("Transceiver").Visible = xlSheetVeryHidden
   
        
   ThisWorkbook.Protect Password:=p, Structure:=True, Windows:=False
   Application.ScreenUpdating = False
   
End Sub

Private Sub UnHideSerdes()
    Dim p As String
   p = "tpp555"
        
   Application.ScreenUpdating = False
   Worksheets("Transceiver").Unprotect Password:=p
   ThisWorkbook.Unprotect Password:=p
    
   Worksheets("Transceiver").Visible = xlSheetVisible
   
        
   Worksheets("Transceiver").Protect Password:=p, UserInterfaceOnly:=True
   ThisWorkbook.Protect Password:=p, Structure:=True, Windows:=False
   Application.ScreenUpdating = False
End Sub

Private Sub HideSecurity()
   Dim p As String
   p = "tpp555"
        
   Application.ScreenUpdating = False
   ThisWorkbook.Unprotect Password:=p
    
   Sheet14.Visible = xlSheetVeryHidden
   
        
   ThisWorkbook.Protect Password:=p, Structure:=True, Windows:=False
   Application.ScreenUpdating = False
   
End Sub

Private Sub UnHideSecurity()
    Dim p As String
   p = "tpp555"
        
   Application.ScreenUpdating = False
   Sheet14.Unprotect Password:=p
   ThisWorkbook.Unprotect Password:=p
    
   Sheet14.Visible = xlSheetVisible
   
        
   Sheet14.Protect Password:=p, UserInterfaceOnly:=True
   ThisWorkbook.Protect Password:=p, Structure:=True, Windows:=False
   Application.ScreenUpdating = False
End Sub
        
Private Sub UpdateThetaJA()
    If (Range("D25").value = Range("AX32").value) And (Range("D27").value = Range("AY32").value) Then
        'Compute the Effective Theta JA depending on the operating conditions.
        If Range("D29").value = Range("AS31").value Then
            Nosink_noboard
        ElseIf Range("D29").value <> Range("AS31").value And Range("D32").value = Range("AU31").value Then
            Sink_noboard
        ElseIf Range("D29").value <> Range("AS31").value And Range("D32").value = Range("AU32").value Then
            Sink_board
        End If
    End If
End Sub

Private Sub Nosink_noboard()
    Dim die As String
    Dim pkg As String
    Dim AirFlow As String
    Dim key As String
    Dim ethetaja As Double
    
    ethetaja = 0
    ' Generate the Key
    If Range("D11").value = Range("AI1").value Then
        key = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("B3:D38").value, 3, False)
    Else
        key = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("C3:D38").value, 2, False)
    End If
      
    ethetaja = WorksheetFunction.VLookup(key & "_" & Range("D13").value, Worksheets("dss_data").Range("AB48:AX100").value, 1 + WorksheetFunction.Match(Range("D30").value, Worksheets("dss_data").Range("AC48:AE48").value, 0), False)
      
    'Concept : ethetaja = thetaja from the data sheet
    Range("D28").value = ethetaja
End Sub

Private Sub Sink_noboard()
    Dim die As String
    Dim pkg As String
    Dim AirFlow As String
    Dim key As String
    Dim ethetaja As Double
    Dim thetajc As Double
    Dim thetacs As Double
    Dim thetasa As Double
    
    ethetaja = 0
    thetajc = 0
    thetacs = 0
    thetasa = 0
    
    ' Generate the Key
    If Range("D11").value = Range("AI1").value Then
        key = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("B3:D38").value, 3, False)
    Else
        key = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("C3:D38").value, 2, False)
    End If
     
    'Concept : ethetaja = thetajc + thetacs + thetasa
     thetajc = WorksheetFunction.VLookup(key & "_" & Range("D13").value, Worksheets("dss_data").Range("AB48:AX100").value, 5 + WorksheetFunction.Match(Range("D32").value, Worksheets("dss_data").Range("AG48:AH48").value, 0), False)
     thetacs = WorksheetFunction.VLookup(key & "_" & Range("D13").value, Worksheets("dss_data").Range("AB48:AX100").value, 11, False)
     
     If Range("D29").value = Range("AS32").value Then
       thetasa = WorksheetFunction.VLookup(key & "_" & Range("D13").value, Worksheets("dss_data").Range("AB48:AX100").value, 12, False)
     Else
       thetasa = WorksheetFunction.VLookup(key & "_" & Range("D13").value, Worksheets("dss_data").Range("AB48:AX100").value, 11 + WorksheetFunction.Match(Range("D29").value, Worksheets("dss_data").Range("AN47:AV47").value, 0) + WorksheetFunction.Match(Range("D30").value, Worksheets("dss_data").Range("AN48:AP48").value, 0), False)
     End If
     
     ethetaja = thetajc + thetacs + thetasa
     Range("D28").value = ethetaja
End Sub

Private Sub Sink_board()

    Dim die As String
    Dim pkg As String
    Dim AirFlow As String
    Dim ethetaja As Double
    Dim thetajc As Double
    Dim thetacs As Double
    Dim thetasa As Double
    Dim thetajb As Double
    Dim thetaba As Double
        
    ethetaja = 0
    thetajc = 0
    thetacs = 0
    thetasa = 0
    thetajb = 0
    thetaba = 0
          
    
    ' Generate the Key
    If Range("D11").value = Range("AI1").value Then
        key = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("B3:D38").value, 3, False)
    Else
        key = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("C3:D38").value, 2, False)
    End If
     
    'Concept : ethetaja = (thetajc + thetacs + thetasa)(thetajb + thetaba)/(thetajc + thetacs + thetasa + thetajb + thetaba)
     thetajc = WorksheetFunction.VLookup(key & "_" & Range("D13").value, Worksheets("dss_data").Range("AB49:AX100").value, 5 + WorksheetFunction.Match(Range("D32").value, Worksheets("dss_data").Range("AG48:AH48").value, 0), False)
     thetacs = WorksheetFunction.VLookup(key & "_" & Range("D13").value, Worksheets("dss_data").Range("AB49:AX100").value, 11, False)
     
     If Range("D29").value = Range("AS32").value Then
       thetasa = WorksheetFunction.VLookup(key & "_" & Range("D13").value, Worksheets("dss_data").Range("AB49:AX100").value, 12, False)
     Else
       thetasa = WorksheetFunction.VLookup(key & "_" & Range("D13").value, Worksheets("dss_data").Range("AB49:AX100").value, 11 + WorksheetFunction.Match(Range("D29").value, Worksheets("dss_data").Range("AN47:AV47").value, 0) + WorksheetFunction.Match(Range("D30").value, Worksheets("dss_data").Range("AN48:AP48").value, 0), False)
     End If
     
    thetajb = WorksheetFunction.VLookup(key & "_" & Range("D13").value, Worksheets("dss_data").Range("AB49:AX100").value, 5, False)
    thetaba = WorksheetFunction.VLookup(key & "_" & Range("D13").value, Worksheets("dss_data").Range("AB49:AX100").value, 7 + WorksheetFunction.Match(Range("D30").value, Worksheets("dss_data").Range("AI48:AK48").value, 0), False)
    
    ethetaja = (thetajc + thetacs + thetasa) * (thetajb + thetaba) / (thetajc + thetacs + thetasa + thetajb + thetaba)
    LockSink_board = True
    Range("D28").value = ethetaja

End Sub

Private Sub UpdateAirFlow()
    'Set the default value of AirFlow in case of heat sink options other than None.
    If Range("D29").value <> Range("AS31").value Then
       Range("D30").value = Range("AT32").value
    Else
      Range("D30").value = Range("AT31").value
    End If
End Sub

Private Sub UpdateThetaSA()

    Dim key As String
    
    ' Generate the Key
    If Range("D11").value = Range("AI1").value Then
        key = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("B3:D38").value, 3, False)
    Else
        key = WorksheetFunction.VLookup(Range("D12").value, Worksheets("dss_data").Range("C3:D38").value, 2, False)
    End If
    
   If (Range("D25").value = Range("AX32").value) And (Range("D27").value = Range("AY32").value) Then
    If Range("D29").value = "Custom" Then
        Range("D31").Locked = False
        Range("D31").Interior.ColorIndex = xlNone
        Range("D32").Locked = False
        Range("D32").Interior.ColorIndex = xlNone
        Range("D31").NumberFormat = "#.0"
    ElseIf Range("D29").value = "None" Then
        Range("D31").Locked = True
        Range("D31").Interior.Color = RGB(192, 192, 192)
        Range("D31").NumberFormat = ";;;"
        Range("D32").Locked = True
        Range("D32").Interior.Color = RGB(192, 192, 192)
        Range("D32").value = "JEDEC (2s2p)"
    Else
        Range("D31").Locked = False
        Range("D31").Interior.Color = RGB(192, 192, 192)
        ' Point to whatever value we will have based on the selection
        Range("D31").NumberFormat = "#.0"
        Range("D31").value = WorksheetFunction.VLookup(key & "_" & Range("D13").value, Worksheets("dss_data").Range("AB49:AX100").value, 11 + WorksheetFunction.Match(Range("D29").value, Worksheets("dss_data").Range("AN47:AV47").value, 0) + WorksheetFunction.Match(Range("D30").value, Worksheets("dss_data").Range("AN48:AP48").value, 0), False)
        Range("D32").Locked = False
        Range("D32").Interior.ColorIndex = xlNone
    End If
   End If
   
End Sub

Private Sub EnableThermalOptions()
    Range("D27").value = Range("AY31").value      ' custom_theta_ja.Enabled = True 'check it needs
    If Not thermalSupported Then
        'estimated_theta_ja.Enabled = False
        Range("D27").value = Range("AY31").value
        Range("D27").NumberFormat = "General"
        Worksheets("Summary").Range("D27").Locked = False
        Worksheets("Summary").Range("D27").Interior.Color = RGB(255, 255, 255)
    Else
        'estimated_theta_ja.Enabled = True   check this how to change
        Range("D27").value = Range("AY32").value
        Range("D27").NumberFormat = "General"
        Worksheets("Summary").Range("D27").Locked = False
        Worksheets("Summary").Range("D27").Interior.Color = RGB(255, 255, 255)
    End If
        
    If Range("D27").value = Range("AY31").value Then
        custom_theta_ja_select
    Else
        estimated_theta_ja_select
    End If
    
End Sub

Private Sub DisableThermalOptions()
    Range("D27:D32").NumberFormat = ";;;"
    Range("D28:D32").Locked = True
    Range("D28:D32").Interior.Color = RGB(192, 192, 192)
    
        'custom_theta_ja.Enabled = False
        'estimated_theta_ja.Enabled = False
        Worksheets("Summary").Range("D27:D28").Locked = True
        Worksheets("Summary").Range("D27:D28").Interior.Color = RGB(192, 192, 192)

End Sub

Private Sub EnableEThetaOptions()
    
    Range("D29").NumberFormat = "General"
    Range("D30").NumberFormat = "General"
    Range("D31").NumberFormat = "General"
    Range("D32").NumberFormat = "General"
    
    Range("D28").NumberFormat = "#.00"
    Range("D28").Locked = True
    Range("D28").Interior.Color = RGB(192, 192, 192)
    
    Range("D29:D32").Locked = False
    Range("D29:D32").Interior.ColorIndex = x1None
    UpdateThetaSA
End Sub

Private Sub DisableEThetaOptions()
   
    Range("D29").Locked = False
    Range("D29").NumberFormat = ";;;"
    Range("D30").NumberFormat = ";;;"
    Range("D31").NumberFormat = ";;;"
    Range("D32").NumberFormat = ";;;"

    Range("D28").Locked = False
    Range("D28").Interior.ColorIndex = xlNone
    
    Range("D29:D32").Locked = True
    Range("D29:D32").Interior.Color = RGB(192, 192, 192)

End Sub

Sub custom_theta_ja_select()
    If Range("D27").value = Range("AY31").value Then
        LockThermal = True
        DisableEThetaOptions
        Range("D28").NumberFormat = "#.00"
        LockThermal = False
    End If
End Sub

Sub estimated_theta_ja_select()
    If Range("D27").value = Range("AY32").value Then
        EnableEThetaOptions
    End If
End Sub
 Sub estimated_tj_select()
    If Range("D25").value = Range("AX32").value Then
        LockThermal = True
        Worksheets("dss_data").Range("AC43").value = 0
        Range("C26").value = "Ambient Temperature Ta (" & Chr(176) & "C)"
        EnableThermalOptions
        estimated_theta_ja_select
        custom_theta_ja_select
        LockThermal = False
        UpdateThetaSA
        ComputeThermalPower
    End If
End Sub
 Sub user_entered_tj_select()
    If Range("D25").value = Range("AX31").value Then
        LockThermal = True
        Worksheets("dss_data").Range("AC43").value = 1
        Range("C26").value = "Junction Temperature Tj (" & Chr(176) & "C)"
        DisableThermalOptions
        ComputeThermalPower
        LockThermal = False
    End If
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
   If Target.Range.Address = "$G$32" Then
      Worksheets("IO").Activate
   ElseIf Target.Range.Address = "$G$33" Then
      Worksheets("IO").Activate
   ElseIf Target.Range.Address = "$H$25" Then
      Worksheets("Clock").Activate
   ElseIf Target.Range.Address = "$H$26" Then
      Worksheets("Logic").Activate
   ElseIf Target.Range.Address = "$H$27" Then
      Worksheets("Math Block").Activate
   ElseIf Target.Range.Address = "$H$28" Then
      Worksheets("LSRAM").Activate
   ElseIf Target.Range.Address = "$G$29" Then
      Sheet11.Activate
   ElseIf Target.Range.Address = "$G$30" Then
      Sheet11.Activate
   ElseIf Target.Range.Address = "$G$31" Then
      Sheet14.Activate
   ElseIf Target.Range.Address = "$G$32" Then
      Worksheets("IO").Activate
   ElseIf Target.Range.Address = "$G$33" Then
      Worksheets("IO").Activate
   ElseIf Target.Range.Address = "$G$34" Then
      Worksheets("Transceiver").Activate
   End If
End Sub
Public Function ValidateDevice1(Optional ByVal device As String, Optional ByVal package As String, Optional ByVal tGrade As String, Optional ByVal sGrade As String)
ValidateDevice1 = "True"
On Error GoTo returnfn
Dim vlp As Variant
Dim packArr(50) As String

    If device <> "" Then
        vlp = WorksheetFunction.VLookup(device, Worksheets("DRC").Range("C3:R226").value, 2, False)
    End If
    
    If package <> "" Then
        If device = "" Then
            device = Range("D12")
        End If
        
        j = 0
        For i = 1 To 300
            If Worksheets("DRC").Range("C" & i) = device Then
                packArr(j) = Worksheets("DRC").Range("D" & i)
                j = j + 1
            End If
        Next i
        If (UBound(Filter(packArr, package)) > -1) Then
            ValidateDevice1 = "True"
        Else
            ValidateDevice1 = "Invalid Package to the corresponding Die: " & device
            Exit Function
        End If
    End If
    
    If tGrade <> "" Then
        If tGrade Like "Ext*" Or tGrade Like "ext*" Then
            tGrade = "EXT"
        ElseIf tGrade Like "Ind*" Or tGrade Like "ind*" Then
            tGrade = "IND"
        End If
        
        If device = "" And package = "" Then
            device = Range("D12")
            package = Range("D13")
        End If
        
        j = 0
        For i = 1 To 300
            If Worksheets("DRC").Range("C" & i) = device And Worksheets("DRC").Range("D" & i) = package Then
                packArr(j) = Worksheets("DRC").Range("F" & i)
                j = j + 1
            End If
        Next i
        If (UBound(Filter(packArr, tGrade)) > -1) Then
            ValidateDevice1 = "True"
        Else
            ValidateDevice1 = "Invalid Temperature grade to the corresponding Die: " & device & "  and package: " & package
            Exit Function
        End If
        
    End If
    
    If sGrade <> "" Then
        
        If device = "" And package = "" Then
            device = Range("D12")
            package = Range("D13")
        End If
        
        j = 0
        For i = 1 To 300
            If Worksheets("DRC").Range("C" & i) = device And Worksheets("DRC").Range("D" & i) = package Then
                packArr(j) = Worksheets("DRC").Range("E" & i)
                j = j + 1
            End If
        Next i
        If (UBound(Filter(packArr, sGrade)) > -1) Then
            ValidateDevice1 = "True"
        Else
            ValidateDevice1 = "Invalid Speed grade to the corresponding Die: " & device & "  and package: " & package
        End If
    End If
    
    Exit Function
returnfn:
        'no device
        ValidateDevice1 = "Invalid Die. " & Error
        Exit Function
End Function
Function partNumber()
    Dim partValues As String
    Dim arr
    device = Range("D12")
    package = Range("D13")
    tGrade = Range("D14")
    sGrade = Range("D17")
    If tGrade = "Industrial" Then
        tGrade = "IND"
    ElseIf tGrade = "Extended" Then
        tGrade = "EXT"
    End If

    For i = 1 To 300
            If Worksheets("DRC").Range("C" & i) = device And Worksheets("DRC").Range("D" & i) = package And CStr(Worksheets("DRC").Range("E" & i)) = CStr(sGrade) And Worksheets("DRC").Range("F" & i) = tGrade Then
                partNumber = Worksheets("DRC").Range("A" & i)
                arr = Sheet47.Range("A" & i & ":R" & i)
                Sheet47.Range("A10000:R10000") = arr
                'Debug.Print (partNumber)
                Exit Function
            End If
    Next i
    
End Function

Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Worksheets("dss_data").Range("G19").value <> Worksheets("Summary").Range("I11").value Then
        ComputeThermalPower
        Worksheets("dss_data").Range("G19").value = Worksheets("Summary").Range("I11").value
    End If
End Sub
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Worksheets("dss_data").Range("G19").value <> Worksheets("Summary").Range("I11").value Then
        ComputeThermalPower
        Worksheets("dss_data").Range("G19").value = Worksheets("Summary").Range("I11").value
    End If
End Sub
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "delete_10, 22, 0, MSForms, CommandButton"
Attribute VB_Control = "delete_9, 21, 1, MSForms, CommandButton"
Attribute VB_Control = "delete_8, 20, 2, MSForms, CommandButton"
Attribute VB_Control = "delete_7, 19, 3, MSForms, CommandButton"
Attribute VB_Control = "delete_6, 18, 4, MSForms, CommandButton"
Attribute VB_Control = "delete_5, 17, 5, MSForms, CommandButton"
Attribute VB_Control = "delete_4, 16, 6, MSForms, CommandButton"
Attribute VB_Control = "delete_3, 15, 7, MSForms, CommandButton"
Attribute VB_Control = "delete_2, 14, 8, MSForms, CommandButton"
Attribute VB_Control = "delete_1, 13, 9, MSForms, CommandButton"
Attribute VB_Control = "restore_10, 12, 10, MSForms, CommandButton"
Attribute VB_Control = "restore_9, 11, 11, MSForms, CommandButton"
Attribute VB_Control = "restore_8, 10, 12, MSForms, CommandButton"
Attribute VB_Control = "restore_7, 9, 13, MSForms, CommandButton"
Attribute VB_Control = "restore_6, 8, 14, MSForms, CommandButton"
Attribute VB_Control = "restore_5, 7, 15, MSForms, CommandButton"
Attribute VB_Control = "restore_4, 6, 16, MSForms, CommandButton"
Attribute VB_Control = "restore_3, 5, 17, MSForms, CommandButton"
Attribute VB_Control = "restore_2, 4, 18, MSForms, CommandButton"
Attribute VB_Control = "create_snapshot, 2, 19, MSForms, CommandButton"
Attribute VB_Control = "restore_1, 3, 20, MSForms, CommandButton"
Private Sub doSheetSnap(ByRef curSheet As Worksheet, ByRef snapSheet As Worksheet, ByVal nbcol As Integer, _
                    ByVal startRow As Integer, ByVal stopRow As Integer, ByVal startSnapCol As Integer, ByRef cols() As String)

    For r = startRow To stopRow
        For ci = 0 To nbcol - 1
            rg = cols(ci) & r
            snapSheet.Range(Cells(r, startSnapCol + ci).Address).value = curSheet.Range(rg).value
        Next ci
    Next r

End Sub


Private Sub doSheetSnapRestore(ByRef curSheet As Worksheet, ByRef snapSheet As Worksheet, ByVal nbcol As Integer, _
                    ByVal startRow As Integer, ByVal stopRow As Integer, ByVal startSnapCol As Integer, ByRef cols() As String)

    For r = startRow To stopRow
        For ci = 0 To nbcol - 1
            rg = cols(ci) & r
            curSheet.Range(rg).value = snapSheet.Range(Cells(r, startSnapCol + ci).Address).value
        Next ci
    Next r

End Sub
Private Sub snapClock(ByVal snapnb As Integer, ByVal restore As Boolean)

    'setup variable for clock
    Const nbcol = 5
    startRow = 12
    stopRow = 511
    startSnapCol = nbcol * (snapnb - 1) + 1
    
    Dim cols(0 To nbcol - 1) As String
    
    cols(0) = "B"
    cols(1) = "E"
    cols(2) = "F"
    cols(3) = "G"
    cols(4) = "H"
    
    If restore Then
        doSheetSnapRestore ActiveWorkbook.Worksheets("Clock"), ActiveWorkbook.Worksheets("clock_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    Else
        doSheetSnap ActiveWorkbook.Worksheets("Clock"), ActiveWorkbook.Worksheets("clock_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    End If

End Sub
Private Sub snapLogic(ByVal snapnb As Integer, ByVal restore As Boolean)

    'setup variable for Logic
    Const nbcol = 6
    startRow = 9
    stopRow = 508
    startSnapCol = nbcol * (snapnb - 1) + 1
    
    Dim cols(0 To nbcol - 1) As String
    
    cols(0) = "B"
    cols(1) = "E"
    cols(2) = "F"
    cols(3) = "G"
    cols(4) = "H"
    cols(5) = "I"
    
    If restore Then
        doSheetSnapRestore ActiveWorkbook.Worksheets("Logic"), ActiveWorkbook.Worksheets("logic_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    Else
        doSheetSnap ActiveWorkbook.Worksheets("Logic"), ActiveWorkbook.Worksheets("logic_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    End If

End Sub

Private Sub snapLsram(ByVal snapnb As Integer, ByVal restore As Boolean)

    'setup variable for LSRAM
    Const nbcol = 17
    startRow = 9
    stopRow = 250
    startSnapCol = nbcol * (snapnb - 1) + 1
    
    Dim cols(0 To nbcol - 1) As String
    
    cols(0) = "B"
    cols(1) = "E"
    cols(2) = "F"
    cols(3) = "G"
    cols(4) = "H"
    cols(5) = "I"
    cols(6) = "J"
    cols(7) = "K"
    cols(8) = "L"
    cols(9) = "M"
    cols(10) = "N"
    cols(11) = "O"
    cols(12) = "P"
    cols(13) = "Q"
    cols(14) = "R"
    cols(15) = "S"
    cols(16) = "T"
        
    If restore Then
        doSheetSnapRestore ActiveWorkbook.Worksheets("LSRAM"), ActiveWorkbook.Worksheets("lsram_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    Else
        doSheetSnap ActiveWorkbook.Worksheets("LSRAM"), ActiveWorkbook.Worksheets("lsram_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    End If

End Sub
Private Sub snapUsram(ByVal snapnb As Integer, ByVal restore As Boolean)

    'setup variable for USRAM
    Const nbcol = 9
    startRow = 9
    stopRow = 250
    startSnapCol = nbcol * (snapnb - 1) + 1
    
    Dim cols(0 To nbcol - 1) As String
    
    cols(0) = "B"
    cols(1) = "E"
    cols(2) = "F"
    cols(3) = "G"
    cols(4) = "H"
    cols(5) = "I"
    cols(6) = "J"
    cols(7) = "K"
    cols(8) = "L"
    
    If restore Then
        doSheetSnapRestore ActiveWorkbook.Worksheets("uSRAM"), ActiveWorkbook.Worksheets("usram_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    Else
        doSheetSnap ActiveWorkbook.Worksheets("uSRAM"), ActiveWorkbook.Worksheets("usram_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    End If

End Sub

Private Sub snapMath(ByVal snapnb As Integer, ByVal restore As Boolean)

    'setup variable for Math
    Const nbcol = 8
    startRow = 8
    stopRow = 250
    startSnapCol = nbcol * (snapnb - 1) + 1
    
    Dim cols(0 To nbcol - 1) As String
    
    cols(0) = "B"
    cols(1) = "E"
    cols(2) = "F"
    cols(3) = "G"
    cols(4) = "H"
    cols(5) = "I"
    cols(6) = "J"
    cols(7) = "K"
    
    If restore Then
        doSheetSnapRestore ActiveWorkbook.Worksheets("Math Block"), ActiveWorkbook.Worksheets("math_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    Else
        doSheetSnap ActiveWorkbook.Worksheets("Math Block"), ActiveWorkbook.Worksheets("math_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    End If

End Sub
Private Sub snapIO(ByVal snapnb As Integer, ByVal restore As Boolean)

    'setup variable for IO
    Const nbcol = 19
    startRow = 21
    stopRow = 721
    startSnapCol = nbcol * (snapnb - 1) + 1
    
    Dim cols(0 To nbcol - 1) As String
    
    cols(0) = "B"
    cols(1) = "E"
    cols(2) = "F"
    cols(3) = "G"
    cols(4) = "H"
    cols(5) = "I"
    cols(6) = "J"
    cols(7) = "K"
    cols(8) = "L"
    cols(9) = "M"
    cols(10) = "N"
    cols(11) = "O"
    cols(12) = "P"
    cols(13) = "Q"
    cols(14) = "R"
    cols(15) = "S"
    cols(16) = "T"
    cols(17) = "U"
    cols(18) = "V"
    
    If restore Then
        doSheetSnapRestore ActiveWorkbook.Worksheets("IO"), ActiveWorkbook.Worksheets("io_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    Else
        doSheetSnap ActiveWorkbook.Worksheets("IO"), ActiveWorkbook.Worksheets("io_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    End If

End Sub
Private Sub snapTransceiver(ByVal snapnb As Integer, ByVal restore As Boolean)

    'setup variable for Transceiver
    Const nbcol = 14
    startRow = 14
    stopRow = 37
    startSnapCol = nbcol * (snapnb - 1) + 1
    
    Dim cols(0 To nbcol - 1) As String
    
    cols(0) = "B"
    cols(1) = "E"
    cols(2) = "F"
    cols(3) = "G"
    cols(4) = "H"
    cols(5) = "I"
    cols(6) = "J"
    cols(7) = "K"
    cols(8) = "L"
    cols(9) = "M"
    cols(10) = "N"
    cols(11) = "O"
    cols(12) = "P"
    cols(13) = "Q"
    
    If restore Then
        doSheetSnapRestore ActiveWorkbook.Worksheets("Transceiver"), ActiveWorkbook.Worksheets("Transceiver_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    Else
        doSheetSnap ActiveWorkbook.Worksheets("Transceiver"), ActiveWorkbook.Worksheets("Transceiver_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    End If

End Sub
Private Sub snapPLL(ByVal snapnb As Integer, ByVal restore As Boolean)

    'setup variable for Math
    Const nbcol = 7
    startRow = 17
    stopRow = 24
    startSnapCol = nbcol * (snapnb - 1) + 1
    
    Dim cols(0 To nbcol - 1) As String
    
    cols(0) = "B"
    cols(1) = "E"
    cols(2) = "F"
    cols(3) = "G"
    cols(4) = "H"
    cols(5) = "I"
    cols(6) = "J"
    
    If restore Then
        doSheetSnapRestore ActiveWorkbook.Worksheets("PLL & DLL"), ActiveWorkbook.Worksheets("pll_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    Else
        doSheetSnap ActiveWorkbook.Worksheets("PLL & DLL"), ActiveWorkbook.Worksheets("pll_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    End If

End Sub
Private Sub snapDLL(ByVal snapnb As Integer, ByVal restore As Boolean)

    'setup variable for Math
    Const nbcol = 2
    startRow = 28
    stopRow = 35
    startSnapCol = nbcol * (snapnb - 1) + 1
    
    Dim cols(0 To nbcol - 1) As String
    
    cols(0) = "B"
    cols(1) = "E"
    
    If restore Then
        doSheetSnapRestore ActiveWorkbook.Worksheets("PLL & DLL"), ActiveWorkbook.Worksheets("dll_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    Else
        doSheetSnap ActiveWorkbook.Worksheets("PLL & DLL"), ActiveWorkbook.Worksheets("dll_snap"), nbcol, _
                startRow, stopRow, startSnapCol, cols
    End If

End Sub
Private Sub snapMisc(ByVal snapnb As Integer, ByVal restore As Boolean)

    snapCol = ColumnLetter(snapnb)
    
    Set snapSheet = ActiveWorkbook.Worksheets("misc_snap")
    Set sumSheet = ActiveWorkbook.Worksheets("User Crypto")
    
    If restore Then
        sumSheet.Range("E12").value = snapSheet.Range(snapCol & "1").value
        sumSheet.Range("F12").value = snapSheet.Range(snapCol & "2").value
    Else
        snapSheet.Range(snapCol & "1").value = sumSheet.Range("E12").value
        snapSheet.Range(snapCol & "2").value = sumSheet.Range("F12").value
    End If

End Sub

Function ColumnLetter(column As Integer) As String
    If column < 1 Then Exit Function
    ColumnLetter = ColumnLetter(Int((column - 1) / 26)) & Chr(((column - 1) Mod 26) + Asc("A"))
End Function
Private Sub snappkg(ByVal snapnb As Integer)
    snapCol = ColumnLetter(snapnb)
    Set snapSheet = ActiveWorkbook.Worksheets("summary_snap")
    Set sumSheet = ActiveWorkbook.Worksheets("Summary")
    
    If snapSheet.Range(snapCol & "3").value = "FULLPKG" Then
        If snapSheet.Range(snapCol & "2").value = "MPF100T" Or snapSheet.Range(snapCol & "2").value = "MPF100TL" Or snapSheet.Range(snapCol & "2").value = "MPF100TS" Or snapSheet.Range(snapCol & "2").value = "MPF100TLS" Then
             sumSheet.Range("D13").value = "FCSG325"
        End If
        If snapSheet.Range(snapCol & "2").value = "MPF200T" Or snapSheet.Range(snapCol & "2").value = "MPF200TL" Or snapSheet.Range(snapCol & "2").value = "MPF200TS" Or snapSheet.Range(snapCol & "2").value = "MPF200TLS" Then
             sumSheet.Range("D13").value = "FCSG325"
        End If
        If snapSheet.Range(snapCol & "2").value = "MPF300T" Or snapSheet.Range(snapCol & "2").value = "MPF300TL" Or snapSheet.Range(snapCol & "2").value = "MPF300TS" Or snapSheet.Range(snapCol & "2").value = "MPF300TLS" Then
             sumSheet.Range("D13").value = "FCG484"
        End If
        If snapSheet.Range(snapCol & "2").value = "MPF500T" Or snapSheet.Range(snapCol & "2").value = "MPF500TL" Or snapSheet.Range(snapCol & "2").value = "MPF500TS" Or snapSheet.Range(snapCol & "2").value = "MPF500TLS" Then
             sumSheet.Range("D13").value = "FCG784"
        End If
    Else
        sumSheet.Range("D13").value = snapSheet.Range(snapCol & "3").value
    End If
    
End Sub
Private Sub snapSummary(ByVal snapnb As Integer, ByVal restore As Boolean)

    snapCol = ColumnLetter(snapnb)
    
    Set snapSheet = ActiveWorkbook.Worksheets("summary_snap")
    Set sumSheet = ActiveWorkbook.Worksheets("Summary")
    
    If restore Then
'        sumSheet.Range("D11:D14").value = snapSheet.Range(snapCol & "1:" & snapCol & "4").value
        sumSheet.Range("D11:D12").value = snapSheet.Range(snapCol & "1:" & snapCol & "2").value
        snappkg snapnb  'snap pkg call to handle FULLPKG
        sumSheet.Range("D14").value = snapSheet.Range(snapCol & "4").value
        If snapSheet.Range(snapCol & "26:" & snapCol & "26").value = "" Then
            snapSheet.Range(snapCol & "26:" & snapCol & "26").value = "1.0 V"
        End If
        If snapSheet.Range(snapCol & "27:" & snapCol & "27").value = "" Then
            snapSheet.Range(snapCol & "27:" & snapCol & "27").value = "Typical"
        End If
        If snapSheet.Range(snapCol & "28:" & snapCol & "28").value = "" Then ' to support in imported snapshots of v2 and v1
            snapSheet.Range(snapCol & "28:" & snapCol & "28").value = "STD"
        End If
        If (snapSheet.Range(snapCol & "28:" & snapCol & "28").value = "STD-LP") And (Right(sumSheet.Range("D12").value, Len(sumSheet.Range("D12").value) - 7) = "L" Or Right(sumSheet.Range("D12").value, Len(sumSheet.Range("D12").value) - 7) = "LS") Then
      
        ElseIf snapSheet.Range(snapCol & "28:" & snapCol & "28").value <> -1 Then
                snapSheet.Range(snapCol & "28:" & snapCol & "28").value = "STD"
        End If
        sumSheet.Range("D15:D16").value = snapSheet.Range(snapCol & "26:" & snapCol & "27").value 'support for voltage,process
        
        Application.EnableEvents = True
        Dim p As String
        p = "tpp555"
        Worksheets("Summary").Unprotect Password:=p
        Application.Calculation = xlCalculationAutomatic
        Application.Calculate

    'Thermal data support
        sumSheet.Range("D25").value = snapSheet.Range(snapCol & "5").value
        If sumSheet.Range("D25").value = "User Entered Tj" Then
            sumSheet.Range("D26").value = snapSheet.Range(snapCol & "6").value
            Call Sheets("Summary").user_entered_tj_select
        Else
            Call Sheets("Summary").estimated_tj_select
            sumSheet.Range("D26").value = snapSheet.Range(snapCol & "6").value
            sumSheet.Range("D27").value = snapSheet.Range(snapCol & "7").value
            sumSheet.Range("D28").value = snapSheet.Range(snapCol & "8").value
            If sumSheet.Range("D27").value = "Custom Theta JA" Then
                Call Sheets("Summary").custom_theta_ja_select
            Else
                Call Sheets("Summary").estimated_theta_ja_select
                sumSheet.Range("D29").value = snapSheet.Range(snapCol & "29").value
                sumSheet.Range("D30").value = snapSheet.Range(snapCol & "30").value
                sumSheet.Range("D31").value = snapSheet.Range(snapCol & "31").value
                sumSheet.Range("D32").value = snapSheet.Range(snapCol & "32").value
            End If
        End If
     
        'check for security block
         If Right(Worksheets("Summary").Range("D12").value, 1) <> "S" Then
            ThisWorkbook.Unprotect Password:="tpp555"
            Worksheets("User Crypto").Visible = xlSheetVeryHidden
            ThisWorkbook.Protect Password:="tpp555", Structure:=True, Windows:=False
         Else
            ThisWorkbook.Unprotect Password:="tpp555"
            Worksheets("User Crypto").Visible = xlSheetVisible
            ThisWorkbook.Protect Password:="tpp555", Structure:=True, Windows:=False
         End If
        
        
        sumSheet.Range("M13:M15").value = snapSheet.Range(snapCol & "9:" & snapCol & "11").value
        sumSheet.Range("N21:N34").value = snapSheet.Range(snapCol & "12:" & snapCol & "25").value
        
        'speed grade "-1" check and support
        If snapSheet.Range(snapCol & "28:" & snapCol & "28").value = -1 Then
            sumSheet.Range("D17").HorizontalAlignment = xlLeft
            sumSheet.Range("D17").value = -1
        Else
            sumSheet.Range("D17:D17").value = snapSheet.Range(snapCol & "28:" & snapCol & "28").value
        End If
            
        Application.Calculation = xlCalculationManual
        Worksheets("Summary").Protect Password:=p, UserInterfaceOnly:=True
        Application.EnableEvents = False
    
        
    
    Else
        snapSheet.Range(snapCol & "1:" & snapCol & "4").value = sumSheet.Range("D11:D14").value
        snapSheet.Range(snapCol & "5:" & snapCol & "8").value = sumSheet.Range("D25:D28").value
        snapSheet.Range(snapCol & "9:" & snapCol & "11").value = sumSheet.Range("M13:M15").value
        snapSheet.Range(snapCol & "12:" & snapCol & "25").value = sumSheet.Range("N21:N34").value
        snapSheet.Range(snapCol & "26:" & snapCol & "28").value = sumSheet.Range("D15:D17").value 'support for voltage,process and speed grade.
        snapSheet.Range(snapCol & "29:" & snapCol & "32").value = sumSheet.Range("D29:D32").value  'Thermal data support.
    End If

End Sub

Private Sub doSnap(ByVal snapnb As Integer, ByVal restore As Boolean)
'    snapSummary snapnb, restore
    snapClock snapnb, restore
    snapLogic snapnb, restore
    snapLsram snapnb, restore
    snapUsram snapnb, restore
    snapMath snapnb, restore
    snapIO snapnb, restore
    snapTransceiver snapnb, restore
    snapPLL snapnb, restore
    snapDLL snapnb, restore
    snapMisc snapnb, restore
    snapSummary snapnb, restore
    
End Sub

Private Sub doSnapResults(ByVal snapnb As Integer)
        
    snapCol = ColumnLetter(2 + snapnb * 3)
    snapcol2 = ColumnLetter(3 + snapnb * 3)
        
    Set snapSheet = ActiveWorkbook.Worksheets("Snapshot")
    Set sumSheet = ActiveWorkbook.Worksheets("Summary")


    snapSheet.Range(snapCol & "13:" & snapCol & "21").value = sumSheet.Range("I11:I19").value
    snapSheet.Range(snapCol & "24:" & snapCol & "27").value = sumSheet.Range("D11:D14").value
    snapSheet.Range(snapCol & "30:" & snapCol & "31").value = sumSheet.Range("D25:D26").value
    
    If sumSheet.Range("D25").value = "Estimated Tj" Then
        snapSheet.Range(snapCol & "32:" & snapCol & "33").value = sumSheet.Range("D27:D28").value
    Else
        Range(snapCol & "33").HorizontalAlignment = xlLeft
        snapSheet.Range(snapCol & "32:" & snapCol & "33").value = "N/A"
    End If
    snapSheet.Range(snapCol & "36:" & snapcol2 & "47").value = sumSheet.Range("I23:J34").value
    
    snapSheet.Range(snapCol & "50:" & snapCol & "63").value = sumSheet.Range("N21:N34").value
    snapSheet.Range(snapcol2 & "50:" & snapcol2 & "63").value = sumSheet.Range("M21:M34").value

End Sub

Private Sub createSnapshot()
    'Find the next free
    
     snapnb = 11
    For i = 1 To 10
        If ActiveWorkbook.Worksheets("Snapshot").Range(ColumnLetter(6 + (10 - i) * 3) & "8").value Then
            snapnb = 10 - i + 1
        End If
    Next i
    
    If snapnb = 11 Then
        MsgBox "Unable to find an unused snapshots. Delete one snapshot before creating a new one.", vbInformation
        Exit Sub
    End If
    
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    ActiveWorkbook.Worksheets("Snapshot").Range(ColumnLetter(3 + snapnb * 3) & "8").value = False
    
    doSnap snapnb, False
    doSnapResults snapnb
    
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    Application.Calculate
    Application.ScreenUpdating = True
    
End Sub

Private Sub doDeleteSnap(ByVal snapnb As Integer)
    ActiveWorkbook.Worksheets("Snapshot").Range(ColumnLetter(3 + snapnb * 3) & "8").value = True
    
    snapCol = ColumnLetter(2 + snapnb * 3)
    snapcol2 = ColumnLetter(3 + snapnb * 3)
    
    ActiveWorkbook.Worksheets("Snapshot").Range(snapCol & "10:" & snapcol2 & "33").ClearContents
    ActiveWorkbook.Worksheets("Snapshot").Range(snapCol & "36:" & snapcol2 & "47").ClearContents
    ActiveWorkbook.Worksheets("Snapshot").Range(snapCol & "50:" & snapcol2 & "63").ClearContents
    Range(snapCol & "33").HorizontalAlignment = xlRight
      
End Sub

Sub doDeleteAllSnap()
    For i = 1 To 10
        doDeleteSnap i
    Next i
End Sub

Private Sub testSnap()
    doSnap 1, True
    doSnap 2, False
    doSnap 4, False
End Sub
Private Sub doRestore(ByVal snapnb As Integer)
    
    If ActiveWorkbook.Worksheets("Snapshot").Range(ColumnLetter(3 + snapnb * 3) & "8").value Then
        MsgBox "This snapshot is empty and cannot be restored", vbInformation
        Exit Sub
    End If
        
    prompt = "Are you sure you want to restore snapshot " & snapnb & ". Unsaved edits will be lost"
    ret = MsgBox(prompt, vbOKCancel)
    If ret = 1 Then
        Application.Calculation = xlCalculationManual
        Application.ScreenUpdating = False
        Application.EnableEvents = False
        
        clear_manage_ip 'to clear manage iP data
        doSnap snapnb, True
        ComputeThermalPower
    End If
    
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    Application.Calculate
    ComputeThermalPower
    Application.ScreenUpdating = True

End Sub
Private Sub doDelete(ByVal snapnb As Integer)
    
    prompt = "Are you sure you want to delete snapshot " & snapnb
    ret = MsgBox(prompt, vbOKCancel)
    If ret = 1 Then
        Application.Calculation = xlCalculationManual
        Application.ScreenUpdating = False
        doDeleteSnap snapnb
    End If
    
    Application.Calculation = xlCalculationAutomatic
    Application.Calculate
    Application.ScreenUpdating = True

End Sub

Private Sub create_snapshot_Click()
    createSnapshot
End Sub

Private Sub delete_1_Click()
    doDelete 1
End Sub

Private Sub delete_2_Click()
    doDelete 2
End Sub

Private Sub delete_3_Click()
    doDelete 3
End Sub

Private Sub delete_4_Click()
    doDelete 4
End Sub

Private Sub delete_5_Click()
    doDelete 5
End Sub

Private Sub delete_6_Click()
    doDelete 6
End Sub

Private Sub delete_7_Click()
    doDelete 7
End Sub

Private Sub delete_8_Click()
    doDelete 8
End Sub

Private Sub delete_9_Click()
    doDelete 9
End Sub

Private Sub delete_10_Click()
    doDelete 10
End Sub
Private Sub restore_1_Click()
    doRestore 1
End Sub

Private Sub restore_2_Click()
    doRestore 2
End Sub

Private Sub restore_3_Click()
    doRestore 3
End Sub

Private Sub restore_4_Click()
    doRestore 4
End Sub

Private Sub restore_5_Click()
    doRestore 5
End Sub

Private Sub restore_6_Click()
    doRestore 6
End Sub

Private Sub restore_7_Click()
    doRestore 7
End Sub

Private Sub restore_8_Click()
    doRestore 8
End Sub

Private Sub restore_9_Click()
    doRestore 9
End Sub

Private Sub restore_10_Click()
    doRestore 10
End Sub
Function Create_snapshot_batch()
    createSnapshot
End Function
Attribute VB_Name = "Sheet30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim ChangeInProgress As Boolean

Private Sub io_advanced_settings_Click()
 
 If io_advanced_settings.value Then
   Range("L16").EntireColumn.Hidden = False
   Range("O16").EntireColumn.Hidden = False
'   Range("W16").EntireColumn.Hidden = False
'   Range("X16").EntireColumn.Hidden = False
'   Range("AC16").EntireColumn.Hidden = False
 Else
    Range("L16").EntireColumn.Hidden = True
    Range("O16").EntireColumn.Hidden = True
'    Range("W16").EntireColumn.Hidden = True
'    Range("X16").EntireColumn.Hidden = True
'    Range("AC16").EntireColumn.Hidden = True
 End If
 
End Sub

Sub LegalizeOneRow(r As Variant)
     
'       If Range("E" & r).value = Range("DL18").value Then ' HSIO Bank Type
'
'         Range("G" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL54:DR108").value, 7, False)).value 'VDDI
'         Range("K" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL54:DR108").value, 6, False)).value 'VCM
'
'         Range("L" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL54:DQ108").value, 2, False)).value
'         Range("M" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL54:DQ108").value, 3, False)).value
'         Range("N" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL54:DQ108").value, 4, False)).value
'         Range("O" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL54:DQ108").value, 5, False)).value
'         Range("S" & r).value = Range("DY4").value  'data rate
'
'       ElseIf Range("E" & r).value = Range("DL19").value Then ' GPIO Bank Type
'
'         Range("G" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL321:DR462").value, 7, False)).value  'VDDI
'         Range("K" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL321:DR462").value, 6, False)).value  'VCM
'
'         Range("L" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL321:DQ462").value, 2, False)).value
'         Range("M" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL321:DQ462").value, 3, False)).value
'         Range("N" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL321:DQ462").value, 4, False)).value
'         Range("O" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL321:DQ462").value, 5, False)).value
'         Range("S" & r).value = Range("DY4").value  'data rate
'
'       Else ' SERDES_REFCLK Bank Type
'
'         Range("G" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL565:DR605").value, 7, False)).value  'VDDI
'         Range("K" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL565:DR605").value, 6, False)).value  'VCM
'
'         Range("L" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL565:DQ605").value, 2, False)).value
'         Range("M" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL565:DQ605").value, 3, False)).value
'         Range("N" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL565:DQ605").value, 4, False)).value
'         Range("O" & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL565:DQ605").value, 5, False)).value
'
'         Range("S" & r).value = Range("DY3").value  'data rate
'       End If
    
        If Range(io_banktype_col & r).value = Range("DL18").value Then ' HSIO Bank Type
        
         Range(io_vddi_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL54:DR108").value, 7, False)).value 'VDDI
         Range(io_vcm_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL54:DR108").value, 6, False)).value 'VCM
        
         Range(io_schmitt_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL54:DQ108").value, 2, False)).value
         Range(io_odt_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL54:DQ108").value, 3, False)).value
         Range(io_drive_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL54:DQ108").value, 4, False)).value
         Range(io_slew_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL54:DQ108").value, 5, False)).value
         Range(io_datarate_col & r).value = Range("DY4").value  'data rate
         
       ElseIf Range(io_banktype_col & r).value = Range("DL19").value Then ' GPIO Bank Type
       
         Range(io_vddi_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL321:DR462").value, 7, False)).value  'VDDI
         Range(io_vcm_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL321:DR462").value, 6, False)).value  'VCM
       
         Range(io_schmitt_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL321:DQ462").value, 2, False)).value
         Range(io_odt_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL321:DQ462").value, 3, False)).value
         Range(io_drive_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL321:DQ462").value, 4, False)).value
         Range(io_slew_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL321:DQ462").value, 5, False)).value
         Range(io_datarate_col & r).value = Range("DY4").value  'data rate
         
       Else ' SERDES_REFCLK Bank Type
       
         Range(io_vddi_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL565:DR605").value, 7, False)).value  'VDDI
         Range(io_vcm_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL565:DR605").value, 6, False)).value  'VCM
         
         Range(io_schmitt_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL565:DQ605").value, 2, False)).value
         Range(io_odt_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL565:DQ605").value, 3, False)).value
         Range(io_drive_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL565:DQ605").value, 4, False)).value
         Range(io_slew_col & r).value = Range(WorksheetFunction.VLookup(Range("F" & r).value, Range("DL565:DQ605").value, 5, False)).value
         Range(io_datarate_col & r).value = Range("DY3").value  'data rate
       End If
    
End Sub

Sub updateLeakageCurrent(r As Variant)

      If Range("E" & r).value = Range("BL18").value Then
         Range("CL11").value = Range("F" & r).value
         Range("CM11").value = Range("N" & r).value
         Range("CN11").value = Range("CL11").value & Range("CM11").value
         Range("CO11").value = Application.Index(Range("CO18:CO66").value, Application.Match(Range("CN11").value, Range("CN18:CN66").value, "0"))
       ElseIf Range("E" & r).value = Range("BL19").value Then
         Range("CL12").value = Range("F" & r).value
         Range("CM12").value = Range("N" & r).value
         Range("CN12").value = Range("CL12").value & Range("CM12").value
         Range("CO12").value = Application.Index(Range("CO89:CO120").value, Application.Match(Range("CN12").value, Range("CN89:CN120").value, "0"))
       Else
         Range("CL13").value = Range("F" & r).value
         Range("CM13").value = Range("N" & r).value
         Range("CN13").value = Range("CL13").value & Range("CM13").value
         Range("CO13").value = Application.Index(Range("CO142:CO183").value, Application.Match(Range("CN13").value, Range("CN142:CN183").value, "0"))
       End If
       
       TotalResistance = Range("W" & r).value + Range("X" & r).value
       Range("CM7").value = TotalResistance

End Sub
Sub updateBasedOnPreEmphasis(r As Variant)

      If Range("E" & r).value = Range("BL19").value Then
         If Range("F" & r).value = Range("BL130").value Or Range("F" & r).value = Range("BL133").value Then
            Range("CL12").value = Range("F" & r).value
            PreEmphasis = Range("O" & r).value
            IOPlusPreEmph = Range("CL12").value & PreEmphasis
            Range("CM12").value = Application.Index(Range("CR110:CR116").value, Application.Match(IOPlusPreEmph, Range("CQ110:CQ116").value, "0"))
            Range("CN12").value = Range("CL12").value & Range("CM12").value
            Range("CO12").value = Application.Index(Range("CO89:CO120").value, Application.Match(Range("CN12").value, Range("CN89:CN120").value, "0"))
            
            TotalResistance = Range("W" & r).value + Range("X" & r).value
            Range("CM7").value = TotalResistance
         End If
       End If

End Sub

Sub updateModelEquation(r As Variant)

        ' Format equation of Y = ax^4+bx^3....
        ' To a format that can be computed in a excel cell
        TotalResistance = Range("CM7").value
        
        If TotalResistance > 0 Then
            ReplaceStr = "*" + str(TotalResistance)
            
            ' select trendline based on I/O type
            If Range("E" & r).value = Range("BL18").value Then
              Trendline = Range("CO11").value
            ElseIf Range("E" & r).value = Range("BL19").value Then
              Trendline = Range("CO12").value
            Else
              Trendline = Range("CO13").value
            End If
            
            ' substitute "x" with resistance to the power off
            Dim pos As Integer
            pos = InStr(Trendline, "x")
            
            If pos >= 1 Then
                Equation = Replace(Trendline, "y =", "=")
                Equation = Replace(Equation, "x6", ReplaceStr + "^6")
                Equation = Replace(Equation, "x5", ReplaceStr + "^5")
                Equation = Replace(Equation, "x4", ReplaceStr + "^4")
                Equation = Replace(Equation, "x3", ReplaceStr + "^3")
                Equation = Replace(Equation, "x2", ReplaceStr + "^2")
                Equation = Replace(Equation, "x", ReplaceStr)
            Else
                Equation = "=" & Trendline
            End If
            
            
            ' Display Chosen equation and results
            Range("CO6").value = Equation
            If Range("E" & r).value = Range("BL18").value Then
              Range("CO5").value = Range("CO11").value
            ElseIf Range("E" & r).value = Range("BL19").value Then
              Range("CO5").value = Range("CO12").value
            Else
              Range("CO5").value = Range("CO13").value
            End If
            
            ' Subtract intrinsic current from LVDS/RSDS/BLVDS/MLVDS/Mini-LVDS
            ' intrinsic current is directly subtracted from data table
            ' Minus_Intrinsic (r)
            
            ' place result in power cell
            ' Current adjusted to mA
            ' Current of one pin * number of o/p pins * output enable
            ' VLOOKUP("VDDI " & BI16,derating_data!$B$5:$G$9,6,FALSE)
            'Dim vddi As String
            'vddi = "VDDI " & Range("BI16")
            'derating = Application.WorksheetFunction.VLookup(vddi, Sheets("derating_data").Range("B5:G9"), 6, False)
            'Range("CO3").value = derating
            
            If pos >= 1 Then
                current_one_pin = Abs(Range("CO6").value) * 1000
                output_pins = current_one_pin * Range("J" & r).value * Range("U" & r).value
                bidirection = current_one_pin * Range("K" & r).value * Range("U" & r).value
                Range("BJ" & r).value = output_pins + bidirection
            Else
                current_one_pin = Range("CO6").value * 1000
                output_pins = current_one_pin * Range("J" & r).value * Range("U" & r).value
                bidirection = current_one_pin * Range("K" & r).value * Range("U" & r).value
                Range("BJ" & r).value = output_pins + bidirection
            End If
        Else
            Range("BJ" & r).value = 0
        End If

End Sub

Private Sub Minus_Intrinsic(r As Variant)

    ' msio intrinsic current = 0.001438636 (A)
    If Range("E" & r).value = Range("BL18").value Then
    
        ' If LVDS33, LVDS, RSDS, MLVDS, BLVDS, Mini-LVDS
        If (Range("F" & r).value = Range("CL51").value) _
            Or (Range("F" & r).value = Range("CL52").value) _
            Or (Range("F" & r).value = Range("CL54").value) _
            Or (Range("F" & r).value = Range("CL55").value) _
            Or (Range("F" & r).value = Range("CL56").value) _
            Or (Range("F" & r).value = Range("CL57").value) Then
    
            Range("CP6").value = Abs(Range("CO6").value)
            Range("CO6").value = Range("CP6").value - 0.001438636
        End If
        
    ' msio intrinsic current = 0.002453 (A)
    ElseIf Range("E" & r).value = Range("BL19").value Then
    
         ' If LVDS, RSDS, Mini-LVDS
         If (Range("F" & r).value = Range("CL52").value) _
            Or (Range("F" & r).value = Range("CL54").value) _
            Or (Range("F" & r).value = Range("CL57").value) Then
            
            Range("CP6").value = Abs(Range("CO6").value)
            Range("CO6").value = Range("CP6").value - 0.002453
        End If
        
    End If


End Sub

Private Sub legalizeSlew(r As Variant)

    If Range("O" & r).value = Range("BO18").value Then
        Range("P" & r).value = Range("BR18").value
    ElseIf Range("O" & r).value = Range("BO19").value Then
        Range("P" & r).value = Range("BR19").value
    ElseIf Range("O" & r).value = Range("BO20").value Then
        Range("P" & r).value = Range("BR20").value
    ElseIf Range("O" & r).value = Range("BO21").value Then
        Range("P" & r).value = Range("BR21").value
    End If
    

End Sub


Private Sub Worksheet_Change(ByVal Target As Range)
    
   If Not ChangeInProgress Then
        ChangeInProgress = True
        Application.ScreenUpdating = False
        Application.Calculation = xlCalculationManual

      ' For showing the default value (LVCMOS18 for all) for Standard when Type is changed
     If (Target.row >= 21 And Target.row <= 721) And Target.column = 5 Then
       'If Range("E" & Target.row).value = Range("DL18").value Then
       If Range(io_banktype_col & Target.row).value = Range("DL18").value Then
         'Range("F" & Target.row).value = Range("DL75").value 'We show LVCMOS18 as default IO Standard
         Range(io_standard_col & Target.row).value = Range("DL75").value 'We show LVCMOS18 as default IO Standard
         LegalizeOneRow Target.row
         'updateLeakageCurrent Target.row
         'updateBasedOnPreEmphasis Target.row
         'updateModelEquation Target.row
       'ElseIf Range("E" & Target.row).value = Range("DL19").value Then
        ElseIf Range(io_banktype_col & Target.row).value = Range("DL19").value Then
         'Range("F" & Target.row).value = Range("DL336").value 'We show LVCMOS18 as default IO Standard
         Range(io_standard_col & Target.row).value = Range("DL336").value 'We show LVCMOS18 as default IO Standard
         LegalizeOneRow Target.row
'         updateLeakageCurrent Target.row
'         updateBasedOnPreEmphasis Target.row
'         updateModelEquation Target.row
       'ElseIf Range("E" & Target.row).value = Range("DL20").value Then
       ElseIf Range(io_banktype_col & Target.row).value = Range("DL20").value Then
         'Range("F" & Target.row).value = Range(Range("DM20").value).value
         Range(io_standard_col & Target.row).value = Range(Range("DM20").value).value
         LegalizeOneRow Target.row
'         updateLeakageCurrent Target.row
'         updateBasedOnPreEmphasis Target.row
'         updateModelEquation Target.row
       End If
     End If
    
     ' For showing the default value of attributes when Standard is changed
     If (Target.row >= 21 And Target.row <= 721) And Target.column = 6 Then
        LegalizeOneRow Target.row
'        updateLeakageCurrent Target.row
'        updateBasedOnPreEmphasis Target.row
'        updateModelEquation Target.row

'            If Range("CE" & Target.row).value = 1 Then
'                Range("J" & Target.row).ClearContents
'                Range("J" & Target.row).Locked = True
'          ElseIf Range("CF" & Target.row).value = 1 Then
'                Range("I" & Target.row).Locked = True
'                Range("I" & Target.row).ClearContents
'          Else
                'Range("H" & Target.row).Locked = False 'added while VDDI and VCM added.
                Range(io_inputpins_col & Target.row).Locked = False 'added while VDDI and VCM added.
                'Range("I" & Target.row).Locked = False
                Range(io_outputpins_col & Target.row).Locked = False
                'Range("J" & Target.row).Locked = False
                
'          End If
          
            
     End If
     
     ' O/P pins effects Termiantion Current
'     If (Target.row >= 16 And Target.row <= 590) And Target.Column = 10 Then
'        updateLeakageCurrent Target.row
'        updateBasedOnPreEmphasis Target.row
'        updateModelEquation Target.row
'     End If
'
'     ' Bidirectional pins effects Termiantion Current
'     If (Target.row >= 16 And Target.row <= 590) And Target.Column = 11 Then
'        updateLeakageCurrent Target.row
'        updateBasedOnPreEmphasis Target.row
'        updateModelEquation Target.row
'     End If
'
'     ' Update leakage current when drive strength changes
'     If (Target.row >= 16 And Target.row <= 590) And Target.Column = 14 Then
'        updateLeakageCurrent Target.row
'        updateBasedOnPreEmphasis Target.row
'        updateModelEquation Target.row
'     End If
'
'     ' MSIOD Mini-LVDS LVDS and RSDS are pre_emphasis dependant. (pre-emphasis determines drive strength)
'     If (Target.row >= 16 And Target.row <= 590) And Target.Column = 15 Then
'        updateLeakageCurrent Target.row
'        updateBasedOnPreEmphasis Target.row
'        updateModelEquation Target.row
'        legalizeSlew Target.row
'     End If
'
'      ' Output Enable effects Termiantion Current
'     If (Target.row >= 16 And Target.row <= 590) And Target.Column = 21 Then
'        updateLeakageCurrent Target.row
'        updateBasedOnPreEmphasis Target.row
'        updateModelEquation Target.row
'     End If
'
'     ' Serial Resistance affect Termination Current
'     If (Target.row >= 16 And Target.row <= 590) And Target.Column = 23 Then
'        updateLeakageCurrent Target.row
'        updateBasedOnPreEmphasis Target.row
'        updateModelEquation Target.row
'     End If
'
'      ' Parallel Resistance affect Termination Current
'     If (Target.row >= 16 And Target.row <= 590) And Target.Column = 24 Then
'        updateLeakageCurrent Target.row
'        updateBasedOnPreEmphasis Target.row
'        updateModelEquation Target.row
'     End If
    If Not IsError(Worksheets("Summary").Range("I11").value) Then
        If Worksheets("dss_data").Range("G19").value <> Worksheets("Summary").Range("I11").value Then
            ComputeThermalPower
            Worksheets("dss_data").Range("G19").value = Worksheets("Summary").Range("I11").value
        End If
    End If
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    ChangeInProgress = False
  End If


End Sub
    
Attribute VB_Name = "Sheet33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Function createsummary()

ActiveSheet.Scenarios.createsummary ReportType:=xlStandardSummary, ResultCells:=Range(Range("D3").value)


End Function
Attribute VB_Name = "Sheet34"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet36"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Change(ByVal Target As Range)

  Dim col As Integer
  If Target.column = 15 And Target.row >= 14 And Target.row <= 37 Then
     ' For showing default value of PCS width when PCS mode is changed.
      'Range("P" & Target.row).value = Range(WorksheetFunction.VLookup(Range("O" & Target.row).value, Range("BM108:BN112").value, 2, False)).value
      Range(xcvr_pcswidth_col & Target.row).value = Range(WorksheetFunction.VLookup(Range(xcvr_pcsmode_col & Target.row).value, Range("BM108:BN112").value, 2, False)).value
  End If
  
  If Target.column = 5 And Target.row >= 14 And Target.row <= 37 Then

      ' For setting the preset values based on protocol
      col = Target.column
      For i = 2 To 12
        col = col + 1
        'If (IsEmpty(Range("E" & Target.row).value)) Then
        If (IsEmpty(Range(xcvr_protocol_col & Target.row).value)) Then
             Worksheets("Transceiver").Cells(Target.row, col).value = WorksheetFunction.VLookup(Range("BM17").value, Range("BM17:BX49").value, i, False)
        Else
             'Worksheets("Transceiver").Cells(Target.row, col).value = WorksheetFunction.VLookup(Range("E" & Target.row).value, Range("BM17:BX49").value, i, False)
             Worksheets("Transceiver").Cells(Target.row, col).value = WorksheetFunction.VLookup(Range(xcvr_protocol_col & Target.row).value, Range("BM17:BX49").value, i, False)
        End If
                
      Next i
  End If
  
  If Target.column = 15 And Target.row >= 14 And Target.row <= 37 Then
     ' For showing default value of PCS width and Hard PCIe when PCS mode is changed.
      'Range("P" & Target.row).value = Range(WorksheetFunction.VLookup(Range("O" & Target.row).value, Range("BM108:BN112").value, 2, False)).value
      'Range("Q" & Target.row).value = Range(WorksheetFunction.VLookup(Range("O" & Target.row).value, Range("BM108:BO112").value, 3, False)).value
      Range(xcvr_pcswidth_col & Target.row).value = Range(WorksheetFunction.VLookup(Range(xcvr_pcsmode_col & Target.row).value, Range("BM108:BN112").value, 2, False)).value
      Range(xcvr_pcie_col & Target.row).value = Range(WorksheetFunction.VLookup(Range(xcvr_pcsmode_col & Target.row).value, Range("BM108:BO112").value, 3, False)).value
  End If
  
  If Worksheets("dss_data").Range("G19").value <> Worksheets("Summary").Range("I11").value Then
        ComputeThermalPower
        Worksheets("dss_data").Range("G19").value = Worksheets("Summary").Range("I11").value
  End If
    
  'DRC on Duplex Mode based on Data rate i.e TX/RX Data rate should be same
    If (Target.column = 7 Or Target.column = 8 Or Target.column = 9) And Target.row >= 14 And Target.row <= 37 Then
        If Worksheets("Transceiver").Cells(Target.row, 7).value = "Duplex" Then
            If Worksheets("Transceiver").Cells(Target.row, 8).value <> Worksheets("Transceiver").Cells(Target.row, 9).value Then
                Worksheets("Transceiver").Cells(Target.row, 7).Interior.Color = RGB(255, 0, 0)
            Else
                Worksheets("Transceiver").Cells(Target.row, 7).Interior.Color = RGB(255, 255, 255)
            End If
        Else
            Worksheets("Transceiver").Cells(Target.row, 7).Interior.Color = RGB(255, 255, 255)
        End If
    End If
        
End Sub



Attribute VB_Name = "Sheet37"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet38"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet39"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet40"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet41"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet42"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet43"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet44"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet45"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet46"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ReturnToSummary, 1, 0, MSForms, CommandButton"
Private Sub ReturnToSummary_Click()
    Sheet2.Select
End Sub

Private Sub Worksheet_Activate()
    
'    Dim StartTime As Double
'    Dim SecondsElapsed As Double
'    StartTime = Timer
    
    oldPower = Range("AG1")
    newPower = Sheet2.Range("I11")
    If newPower <> oldPower Then
        getTemp
        getProcess
        getVDD

        calculatePowerBreakdown
        
        setTemp
        setProcess
        setVDD
        Range("AG1") = Sheet2.Range("I11")
    End If
    
'    SecondsElapsed = Round(Timer - StartTime, 2)
'    MsgBox "This code ran successfully in " & SecondsElapsed & " seconds", vbInformation
    
End Sub
Private Function calculatePowerBreakdown()
    Dim a() As Variant
    
    ThisWorkbook.Application.ScreenUpdating = True
    'Power Breakdown
    a = Sheet2.Range("J23:J34")
    Range("AO3:AO14") = a
    
    'static current by supply
    a = Sheet2.Range("L21:M34")
    Range("AG3:AH16") = a
    
    'on chip typical vs maximum
    
    Application.EnableEvents = False
    
    Sheet2.Range("D26") = 25#
    Worksheets("core_static_data").Range("C9").value = Worksheets("Summary").Range("D26").value
    Sheet2.Range("D16") = "Typical"
    Range("Ak3") = Sheet2.Range("I11")
    Sheet2.Range("D16") = "Maximum"
    Range("Al3") = Sheet2.Range("I11")
    
    Sheet2.Range("D26") = 50#
    Worksheets("core_static_data").Range("C9").value = Worksheets("Summary").Range("D26").value
    Sheet2.Range("D16") = "Typical"
    Range("Ak4") = Sheet2.Range("I11")
    Sheet2.Range("D16") = "Maximum"
    Range("Al4") = Sheet2.Range("I11")
    
    Sheet2.Range("D26") = 100#
    Worksheets("core_static_data").Range("C9").value = Worksheets("Summary").Range("D26").value
    Sheet2.Range("D16") = "Typical"
    Range("Ak5") = Sheet2.Range("I11")
    Sheet2.Range("D16") = "Maximum"
    Range("Al5") = Sheet2.Range("I11")
    'Debug.Print (Sheet2.Range("I11"))
    
    setProcess
    
    'on chip power typical
    Range("AG19") = "On - Chip Power ( " & Range("Ak1") & " )"
    Range("AH20:AN21").NumberFormat = "0.000"
    Sheet2.Range("D26") = 10#
    Worksheets("core_static_data").Range("C9").value = Worksheets("Summary").Range("D26").value
    Range("AH20") = Sheet2.Range("I11")
    'Range("AH21") = staticPower
    Sheet2.Range("D26") = 25#
    Worksheets("core_static_data").Range("C9").value = Worksheets("Summary").Range("D26").value
    Range("AI20") = Sheet2.Range("I11")
    'Range("AI21") = staticPower
    Sheet2.Range("D26") = 40#
    Worksheets("core_static_data").Range("C9").value = Worksheets("Summary").Range("D26").value
    Range("AJ20") = Sheet2.Range("I11")
    'Range("AJ21") = staticPower
    Sheet2.Range("D26") = 55#
    Worksheets("core_static_data").Range("C9").value = Worksheets("Summary").Range("D26").value
    Range("AK20") = Sheet2.Range("I11")
    'Range("AK21") = staticPower
    Sheet2.Range("D26") = 70#
    Worksheets("core_static_data").Range("C9").value = Worksheets("Summary").Range("D26").value
    Range("AL20") = Sheet2.Range("I11")
    'Range("AL21") = staticPower
    Sheet2.Range("D26") = 85#
    Worksheets("core_static_data").Range("C9").value = Worksheets("Summary").Range("D26").value
    Range("AM20") = Sheet2.Range("I11")
    'Range("AM21") = staticPower
    Sheet2.Range("D26") = 100#
    Worksheets("core_static_data").Range("C9").value = Worksheets("Summary").Range("D26").value
    Range("AN20") = Sheet2.Range("I11")
    'Range("AN21") = staticPower
    
    setTemp
    Worksheets("core_static_data").Range("C9").value = Worksheets("Summary").Range("D26").value
    
    'on chip power over VDD
    Range("AH24:Ak25").NumberFormat = "0.000"
    voltage = Sheet2.Range("D15")
    If voltage = "1.0 V" Then
        Range("AH24") = 0.97
        Range("AI24") = 0.99
        Range("AJ24") = 1.01
        Range("AK24") = 1.03
        
        Sheet2.Range("N21") = 0.97
        Range("AH25") = Sheet2.Range("I11")
        Sheet2.Range("N21") = 0.99
        Range("AI25") = Sheet2.Range("I11")
        Sheet2.Range("N21") = 1.01
        Range("AJ25") = Sheet2.Range("I11")
        Sheet2.Range("N21") = 1.03
        Range("AK25") = Sheet2.Range("I11")
        
        setVDD
        
    Else
        Range("AH24") = 1.019
        Range("AI24") = 1.04
        Range("AJ24") = 1.061
        Range("AK24") = 1.082
        
        Sheet2.Range("N21") = 1.019
        Range("AH25") = Sheet2.Range("I11")
        Sheet2.Range("N21") = 1.04
        Range("AI25") = Sheet2.Range("I11")
        Sheet2.Range("N21") = 1.061
        Range("AJ25") = Sheet2.Range("I11")
        Sheet2.Range("N21") = 1.082
        Range("AK25") = Sheet2.Range("I11")
        
        setVDD
        
    End If
    Application.EnableEvents = True
    
End Function
'Private Function totalPower() As Double
'   totalPower = Sheet2.Range("I11")
'End Function
Private Function staticPower() As Double
   staticPower = Sheet2.Range("I12")
End Function
Private Function getTemp()
    getTemp = Sheet2.Range("D26")
    Range("AJ1") = getTemp
End Function
Private Function getProcess()
    getProcess = Sheet2.Range("D16")
    Range("Ak1") = getProcess
End Function
Private Function getVDD()
    getVDD = Sheet2.Range("N21")
    Range("AL1") = getVDD
End Function
Private Function setTemp()
    Sheet2.Range("D26") = Range("AJ1")
End Function
Private Function setProcess()
    Sheet2.Range("D16") = Range("Ak1")
End Function
Private Function setVDD()
    Sheet2.Range("N21") = Range("AL1")
End Function

Attribute VB_Name = "Sheet47"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet48"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet49"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet50"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet51"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet52"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Worksheets("dss_data").Range("G19").value <> Worksheets("Summary").Range("I11").value Then
        ComputeThermalPower
        Worksheets("dss_data").Range("G19").value = Worksheets("Summary").Range("I11").value
    End If
End Sub

Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Worksheets("dss_data").Range("G19").value <> Worksheets("Summary").Range("I11").value Then
        ComputeThermalPower
        Worksheets("dss_data").Range("G19").value = Worksheets("Summary").Range("I11").value
    End If
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Register_Sheet()
  Set sSetting = Application.Worksheets("Device Settings & Summary")
  Set sDesign = Application.Worksheets("Design Settings")
End Sub

Private Sub Workbook_Open()
    Dim w As Worksheet
    For Each w In ThisWorkbook.Worksheets
        w.Protect Password:="tpp555", UserInterfaceOnly:=True
    Next w
    Worksheets("User").Unprotect Password:="tpp555"
    ApplyScrollLock
    
  ' Solution to work for German language SAR
  Worksheets("derating_data").Range("b7").value = "VDDI " & Worksheets("derating_data").Range("a7").value
  Worksheets("derating_data").Range("b8").value = "VDDI " & Worksheets("derating_data").Range("a8").value
  Worksheets("derating_data").Range("b9").value = "VDDI " & Worksheets("derating_data").Range("a9").value
  Worksheets("derating_data").Range("b10").value = "VDDI " & Worksheets("derating_data").Range("a10").value
  Worksheets("derating_data").Range("b11").value = "VDDI " & Worksheets("derating_data").Range("a11").value
  Worksheets("derating_data").Range("b12").value = "VDDI " & Worksheets("derating_data").Range("a12").value
  Worksheets("derating_data").Range("b13").value = "VDDI " & Worksheets("derating_data").Range("a13").value
    
    ' To clear the contents of the File Name Text Box in Import Dialog when you open the work book.
      Worksheets("dss_data").Range("I35").ClearContents
    'To store old total power value
      Worksheets("dss_data").Range("G19").value = Worksheets("Summary").Range("I11").value
       
End Sub

Private Sub ApplyScrollLock()

    Worksheets("Summary").ScrollArea = "A1:V70"
    Worksheets("Clock").ScrollArea = "A1:AA530"
    Worksheets("Logic").ScrollArea = "A1:AK530"
    Worksheets("LSRAM").ScrollArea = "A1:BJ255"
    Worksheets("uSRAM").ScrollArea = "A1:Z255"
    Worksheets("Math Block").ScrollArea = "A1:AM255"
    Worksheets("PLL & DLL").ScrollArea = "A1:P40"
    Worksheets("IO").ScrollArea = "A1:CH730"
    Worksheets("Transceiver").ScrollArea = "A1:BB40"
    Sheet14.ScrollArea = "A1:P40"
    Worksheets("Release").ScrollArea = "A1:T25"
    Worksheets("Snapshot").ScrollArea = "A1:AK70"
    Worksheets("Graphs").ScrollArea = "A1:AC50"

End Sub

Private Sub UnApplyScrollLock()

    Worksheets("Summary").ScrollArea = ""
    Worksheets("Clock").ScrollArea = ""
    Worksheets("Logic").ScrollArea = ""
    Worksheets("LSRAM").ScrollArea = ""
    Worksheets("uSRAM").ScrollArea = ""
    Worksheets("Math Block").ScrollArea = ""
    Worksheets("PLL & DLL").ScrollArea = ""
    Worksheets("IO").ScrollArea = ""
    Worksheets("Transceiver").ScrollArea = ""
    Sheet14.ScrollArea = ""
    Worksheets("Release").ScrollArea = ""
    Worksheets("Snapshot").ScrollArea = ""
    Worksheets("Graphs").ScrollArea = ""

End Sub

Private Sub LockWork()
    Dim w As Worksheet
    Dim sheetname As String
    p = InputBox("Please enter lock password")
    
    For Each w In ThisWorkbook.Worksheets
        w.Unprotect Password:=p
    Next w
    ThisWorkbook.Unprotect Password:=p
    
    ' Unable to call a sub in another work sheet using below
'    For Each w In ActiveWorkbook.Worksheets
'        ThisWorkbook.Worksheets("Intro").Evaluate("LockWork)
'    Next w
    
    'Summary
    Worksheets("Summary").Range("AI:BC").EntireColumn.Hidden = True
    
    'snapshot
    Worksheets("Snapshot").Range("AX:AY").EntireColumn.Hidden = True
    ' Clock
    
    Worksheets("Clock").Range("I:K").EntireColumn.Hidden = True
    Worksheets("Clock").Range("M:V").EntireColumn.Hidden = True
    Worksheets("Clock").Range("AT:AX").EntireColumn.Hidden = True
    Worksheets("clock_data").Visible = xlSheetVeryHidden
    
    ' Logic
    Worksheets("Logic").Range("L:AJ").EntireColumn.Hidden = True
    Worksheets("logic_data").Visible = xlSheetVeryHidden
    
    'LSRAM
    Worksheets("LSRAM").Range("V:CQ").EntireColumn.Hidden = True
    Worksheets("LSRAM").Range("DO:DS").EntireColumn.Hidden = True
    Worksheets("lsram_data").Visible = xlSheetVeryHidden
    
    'uSRAM
    Worksheets("uSRAM").Range("N:T").EntireColumn.Hidden = True
    Worksheets("uSRAM").Range("AP:AQ").EntireColumn.Hidden = True
    Worksheets("uSRAM").Range("BO:BS").EntireColumn.Hidden = True
    Worksheets("usram_data").Visible = xlSheetVeryHidden
    
    'Math Block
    Worksheets("Math Block").Range("M:AM").EntireColumn.Hidden = True
    Worksheets("Math Block").Range("BF:BJ").EntireColumn.Hidden = True
    Worksheets("math_data").Visible = xlSheetVeryHidden
    
    'PLL, DLL and Oscillators
    Worksheets("PLL & DLL").Visible = xlSheetVisible
    Worksheets("PLL & DLL").Range("AP:AQ").EntireColumn.Hidden = True
    Worksheets("pll_dll_osc_data").Visible = xlSheetVeryHidden
    Worksheets("PLL & DLL").Columns("M").EntireColumn.Hidden = True
    
    'I/O
    Worksheets("IO").Visible = xlSheetVisible
    Worksheets("HSIO_input_data").Visible = xlSheetVeryHidden
    Worksheets("HSIO_output_data").Visible = xlSheetVeryHidden
    Worksheets("GPIO_input_data").Visible = xlSheetVeryHidden
    Worksheets("GPIO_output_data").Visible = xlSheetVeryHidden
    
    Worksheets("HSIO_XT_input_data").Visible = xlSheetVeryHidden
    Worksheets("HSIO_XT_output_data").Visible = xlSheetVeryHidden
    Worksheets("GPIO_XT_input_data").Visible = xlSheetVeryHidden
    Worksheets("GPIO_XT_output_data").Visible = xlSheetVeryHidden
    Worksheets("XCVR_REFCLK_XT_input_data").Visible = xlSheetVeryHidden
    
    Worksheets("XCVR_REFCLK_input_data").Visible = xlSheetVeryHidden
    Worksheets("iog_data").Visible = xlSheetVeryHidden
    Worksheets("io_validation").Visible = xlSheetVeryHidden
    Worksheets("IO").Range("AD:CI").EntireColumn.Hidden = True
    Worksheets("IO").Range("DL:FO").EntireColumn.Hidden = True
    Worksheets("IO").Columns("V").EntireColumn.Hidden = True
    
    
   
    'Transceiver
    Worksheets("Transceiver").Visible = xlSheetVisible
    Worksheets("Transceiver").Range("BM:CN").EntireColumn.Hidden = True
    Worksheets("Transceiver_data").Visible = xlSheetVeryHidden
    Worksheets("Transceiver").Range("V:AJ").EntireColumn.Hidden = True
    Worksheets("Transceiver").Range("AK:AZ").EntireColumn.Hidden = True
    
    'Crypto, G5C and uPROM
    Sheet14.Visible = xlSheetVisible
    Sheet30.Visible = xlSheetVeryHidden
    
    
    'Misc
    Worksheets("bank_static_data").Visible = xlSheetVeryHidden
    Worksheets("core_static_data").Visible = xlSheetVeryHidden
    Worksheets("dss_data").Visible = xlSheetVeryHidden
    Worksheets("derating_data").Visible = xlSheetVeryHidden
'    Worksheets("User").Visible = xlSheetVeryHidden
'    Worksheets("Release").Visible = xlSheetVeryHidden

    ' Version Update
     Worksheets("dss_data").Range("J3").value = "v8c"
     
     'Snapshot sheets
      Worksheets("Snapshot").Visible = xlSheetVisible
      Worksheets("summary_snap").Visible = xlSheetVeryHidden
      Worksheets("clock_snap").Visible = xlSheetVeryHidden
      Worksheets("logic_snap").Visible = xlSheetVeryHidden
      Worksheets("lsram_snap").Visible = xlSheetVeryHidden
      Worksheets("usram_snap").Visible = xlSheetVeryHidden
      Worksheets("math_snap").Visible = xlSheetVeryHidden
      Worksheets("io_snap").Visible = xlSheetVeryHidden
      Worksheets("Transceiver_snap").Visible = xlSheetVeryHidden
      Worksheets("pll_snap").Visible = xlSheetVeryHidden
      Worksheets("dll_snap").Visible = xlSheetVeryHidden
      Worksheets("misc_snap").Visible = xlSheetVeryHidden
    
    'DRC
      Worksheets("DRC").Visible = xlSheetVeryHidden
      
    Worksheets("Internal_log_sheet").Visible = xlSheetVeryHidden
    
    ApplyScrollLock
           
    
    For Each w In ThisWorkbook.Worksheets
        w.Protect Password:=p, UserInterfaceOnly:=True
    Next w
    
    ThisWorkbook.Protect Password:=p, Structure:=True, Windows:=False
    
 
End Sub

Private Sub UnlockWork()
    Dim w As Worksheet
  p = InputBox("Please enter Unlock password")
    
   For Each w In ThisWorkbook.Worksheets
        w.Unprotect Password:=p
    Next w
    
    ThisWorkbook.Unprotect Password:=p
       
    'Summary
    Worksheets("Summary").Visible = xlSheetVisible
    Worksheets("Summary").Range("AI:BB").EntireColumn.Hidden = False
    
    'snapshot
    Worksheets("Snapshot").Range("AX:AY").EntireColumn.Hidden = False
          
    ' Clock
    Worksheets("Clock").Range("I:K").EntireColumn.Hidden = False
    Worksheets("Clock").Range("M:V").EntireColumn.Hidden = False
    Worksheets("Clock").Range("AT:AX").EntireColumn.Hidden = False
    Worksheets("clock_data").Visible = xlSheetVisible
    
    ' Logic
    Worksheets("Logic").Range("L:AJ").EntireColumn.Hidden = False
    Worksheets("logic_data").Visible = xlSheetVisible
    
    
    'LSRAM
    Worksheets("LSRAM").Range("V:CQ").EntireColumn.Hidden = False
    Worksheets("LSRAM").Range("DO:DS").EntireColumn.Hidden = False
    Worksheets("lsram_data").Visible = xlSheetVisible
    
    'uSRAM
    Worksheets("uSRAM").Range("N:T").EntireColumn.Hidden = False
    Worksheets("uSRAM").Range("AP:AQ").EntireColumn.Hidden = False
    Worksheets("uSRAM").Range("BO:BS").EntireColumn.Hidden = False
    Worksheets("usram_data").Visible = xlSheetVisible
    
    'Math Block
    Worksheets("Math Block").Range("M:AM").EntireColumn.Hidden = False
    Worksheets("Math Block").Range("BF:BJ").EntireColumn.Hidden = False
    Worksheets("math_data").Visible = xlSheetVisible
    
    'PLL & DLL
    Worksheets("PLL & DLL").Visible = xlSheetVisible
    Worksheets("PLL & DLL").Range("AP:AQ").EntireColumn.Hidden = False
    Worksheets("pll_dll_osc_data").Visible = xlSheetVisible
    Worksheets("PLL & DLL").Columns("M").EntireColumn.Hidden = False
    
    'I/O
     Worksheets("IO").Visible = xlSheetVisible
    Worksheets("HSIO_input_data").Visible = xlSheetVisible
    Worksheets("HSIO_output_data").Visible = xlSheetVisible
    Worksheets("GPIO_input_data").Visible = xlSheetVisible
    Worksheets("GPIO_output_data").Visible = xlSheetVisible
    
    Worksheets("HSIO_XT_input_data").Visible = xlSheetVisible
    Worksheets("HSIO_XT_output_data").Visible = xlSheetVisible
    Worksheets("GPIO_XT_input_data").Visible = xlSheetVisible
    Worksheets("GPIO_XT_output_data").Visible = xlSheetVisible
    Worksheets("XCVR_REFCLK_XT_input_data").Visible = xlSheetVisible
    
    Worksheets("XCVR_REFCLK_input_data").Visible = xlSheetVisible
    Worksheets("iog_data").Visible = xlSheetVisible
    Worksheets("io_validation").Visible = xlSheetVisible
    Worksheets("IO").Range("AD:CI").EntireColumn.Hidden = False
    Worksheets("IO").Range("DL:FO").EntireColumn.Hidden = False
    Worksheets("IO").Columns("V").EntireColumn.Hidden = False
    
    'Transceiver
    Worksheets("Transceiver").Visible = xlSheetVisible
    Worksheets("Transceiver").Range("BM:CN").EntireColumn.Hidden = False
    Worksheets("Transceiver_data").Visible = xlSheetVisible
    Worksheets("Transceiver").Range("V:AJ").EntireColumn.Hidden = False
    Worksheets("Transceiver").Range("AK:AZ").EntireColumn.Hidden = False
    
    'Crypto, G5C and uPROM
    Sheet14.Visible = xlSheetVisible
    Sheet30.Visible = xlSheetVisible
        
    'DRC
      Worksheets("DRC").Visible = xlSheetVisible
    
    'Misc
     Worksheets("bank_static_data").Visible = xlSheetVisible
     Worksheets("core_static_data").Visible = xlSheetVisible
     Worksheets("dss_data").Visible = xlSheetVisible
     Worksheets("derating_data").Visible = xlSheetVisible
     Worksheets("User").Visible = xlSheetVisible
     Worksheets("Release").Visible = xlSheetVisible
     
     
     Worksheets("Internal_log_sheet").Visible = xlSheetVisible
     
     'Snapshot sheets -  Hidding all sheets want to use it uncomment visible lines and comment hidden lines
      'Worksheets("Snapshot").Visible = xlSheetVisible
'      Worksheets("summary_snap").Visible = xlSheetVeryHidden
'      Worksheets("clock_snap").Visible = xlSheetVeryHidden
'      Worksheets("logic_snap").Visible = xlSheetVisible
'      Worksheets("lsram_snap").Visible = xlSheetVeryHidden
'      Worksheets("usram_snap").Visible = xlSheetVeryHidden
'      Worksheets("math_snap").Visible = xlSheetVeryHidden
'      Worksheets("io_snap").Visible = xlSheetVeryHidden
'      Worksheets("Transceiver_snap").Visible = xlSheetVeryHidden
'      Worksheets("pll_snap").Visible = xlSheetVeryHidden
'      Worksheets("dll_snap").Visible = xlSheetVeryHidden
'      Worksheets("misc_snap").Visible = xlSheetVeryHidden

'      Worksheets("Snapshot").Visible = xlSheetVisible
'      Worksheets("summary_snap").Visible = xlSheetVisible
'      Worksheets("clock_snap").Visible = xlSheetVisible
'      Worksheets("logic_snap").Visible = xlSheetVisible
'      Worksheets("lsram_snap").Visible = xlSheetVisible
'      Worksheets("usram_snap").Visible = xlSheetVisible
'      Worksheets("math_snap").Visible = xlSheetVisible
'      Worksheets("io_snap").Visible = xlSheetVisible
'      Worksheets("Transceiver_snap").Visible = xlSheetVisible
'      Worksheets("pll_snap").Visible = xlSheetVisible
'      Worksheets("dll_snap").Visible = xlSheetVisible
'      Worksheets("misc_snap").Visible = xlSheetVisible

     UnApplyScrollLock
    
End Sub
Private Sub factory_reset()
'    Worksheets(2).Range("D11").Value = "M2S005"
'    Worksheets(2).Range("D13").Value = "Commercial"
'
'    Worksheets(2).Range("D15").Value = "Typical"
'
'
'    clear_all
'    estimate_all
'
'    Worksheets(3).Activate
'    Worksheets(3).Range("U3").Value = False
'
'    Worksheets(3).Range("S3").Hyperlinks(1).Follow
'
'    Worksheets(3).Range("A1").Activate
'
'    Worksheets(2).Activate
'    Worksheets(2).Range("A1").Activate
'
'    Worksheets(1).Activate
'    Worksheets(1).Range("A1").Activate
    
    
End Sub
Attribute VB_Name = "add_ddr3"
Attribute VB_Base = "0{B54CAA2C-A5CA-493A-8AF7-CF69F514D418}{B3933ED9-82E0-4841-963E-22ACC9E66C07}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ddr_close_Click()
    Unload Me
End Sub

Private Sub ddr_axi_type_Change()
    
    If ddr_axi_type.value = "Native" Then
        ddr_axi_width.value = ""
        ddr_axi_width.Enabled = False
    Else
        ddr_axi_width.Enabled = True
        If ddr_width.value <> "64" Then
            ddr_axi_width.value = Worksheets("dss_data").Range("O143").value
        Else
            ddr_axi_width.value = Worksheets("dss_data").Range("O146").value
        End If
    End If
End Sub

Private Sub ddr_type_Change()
    
    If ddr_type.value <> "" Then
        ddr_width.Enabled = True
        ddr_odt.Enabled = True
        ddr_ecc.Enabled = True
        ddr_memory_clk.Enabled = True
        ddr_gear_ratio.Enabled = True
        ddr_user_clkfeq.Enabled = True
        ddr_module_name.Enabled = True
        ddr_axi_width.Enabled = True
        ddr_axi_type.Enabled = True
        qdr_add_width.Enabled = False
        Dim io_tech As String
        io_tech = Application.WorksheetFunction.VLookup(ddr_type.value, Worksheets("dss_data").Range("R125:T130"), 2, False)
        Worksheets("dss_data").Range("M138").value = io_tech
        
        ddr_odt.RowSource = "IO!" & Worksheets("IO").Range("DO3").value
        ddr_odt.value = Application.VLookup(ddr_type.value, Worksheets("dss_data").Range("Y162:AG168"), 3, False)
        
        If ddr_type.value = "LPDDR3" Then
            ddr_ecc.Enabled = False
            ddr_ecc.value = False
        End If
        If ddr_type.value = "QDR" Then
            ddr_ecc.Enabled = False
            ddr_ecc.value = False
            
            ddr_axi_type.Enabled = False
            ddr_axi_type.value = Worksheets("dss_data").Range("N144").value
            
            ddr_axi_width.Enabled = False
            ddr_axi_width.value = Worksheets("dss_data").Range("O143").value
            
            qdr_add_width.Enabled = True
            qdr_add_width.value = Worksheets("dss_data").Range("N164").value
        End If
        
        ddr_width.RowSource = "dss_data!" & Application.WorksheetFunction.VLookup(ddr_type.value, Worksheets("dss_data").Range("Y123:AA129"), 2, False)
        ddr_width.value = Application.VLookup(ddr_type.value, Worksheets("dss_data").Range("Y162:AG168"), 2, False)
        
        If ddr_type.value <> "QDR" Then
            ddr_axi_width.RowSource = "dss_data!" & Application.WorksheetFunction.VLookup(ddr_width.value, Worksheets("dss_data").Range("T143:U146"), 2, False)
            ddr_axi_width.value = Application.VLookup(ddr_type.value, Worksheets("dss_data").Range("Y162:AG168"), 5, False)
        
            ddr_axi_type.RowSource = "dss_data!" & Application.WorksheetFunction.VLookup(ddr_type.value, Worksheets("dss_data").Range("Y123:AB129"), 4, False)
            ddr_axi_type.value = Application.VLookup(ddr_type.value, Worksheets("dss_data").Range("Y162:AG168"), 4, False)
        End If
        
        ddr_memory_clk.value = Application.VLookup(ddr_type.value, Sheets("dss_data").Range("Y162:AG168"), 6, False)
        ddr_gear_ratio.RowSource = "dss_data!" & Application.WorksheetFunction.VLookup(ddr_type.value, Worksheets("dss_data").Range("F155:H161"), 3, False)
        ddr_gear_ratio.value = Application.Worksheets("dss_data").Range(WorksheetFunction.VLookup(ddr_type.value, Worksheets("dss_data").Range("F155:H161"), 3, False)).value
    Else
        ddr_width.Enabled = False
        ddr_odt.Enabled = False
        ddr_ecc.Enabled = False
        ddr_memory_clk.Enabled = False
        ddr_gear_ratio.Enabled = False
        ddr_user_clkfeq.Enabled = False
        ddr_module_name.Enabled = False
        ddr_axi_width.Enabled = False
        ddr_axi_type.Enabled = False
        qdr_add_width.Enabled = False
    End If
End Sub
Private Sub ddr_gear_ratio_Change()
    Dim m_s As String
    Dim mult As Double
    Dim memory_clock As Double
    Dim ddr_user_clk As Double
    m_s = ddr_gear_ratio.value
        mult = Application.WorksheetFunction.VLookup(m_s, Worksheets("dss_data").Range("J155:K158"), 2, False)
        memory_clock = Round(ddr_memory_clk.value, 3) 'Memory Clock
        ddr_user_clk = memory_clock * mult ' AXI/AHB Clock
        ddr_user_clkfeq.Caption = ddr_user_clk & " MHz"
        
        If ddr_type.value <> "QDR" Then ' Max allowed freq for DDR3, DDR4, LPDDR3 is 200
            If ddr_user_clk >= 0 And ddr_user_clk <= 200 Then
                'Do nothing
            Else
                MsgBox "User Clock frequency must be between 0 and 200 MHz"
            End If
        Else
            If ddr_user_clk >= 0 And ddr_user_clk <= 166.625 Then
                'Do nothing
            Else
                MsgBox "User Clock frequency must be between 0 and 166.625 MHz"
            End If
        End If
End Sub
Private Sub ddr_memory_clk_Change()
    Dim val As Double
    If IsNumeric(ddr_memory_clk.value) Then
        val = Round(ddr_memory_clk.value, 3)
        ddr_gear_ratio_Change
    End If
End Sub

Private Sub ddr_width_Change()
    If ddr_width.value = "8" Or ddr_width.value = "16" Then
        ddr_ecc.Enabled = False
    Else
        ddr_ecc.Enabled = True
    End If
    If ddr_type.value = "LPDDR3" Or ddr_type.value = "QDR" Then
        ddr_ecc.Enabled = False
        ddr_ecc.value = False
    End If
    If ddr_type.value <> "QDR" Then
        ddr_axi_width.RowSource = "dss_data!" & Application.WorksheetFunction.VLookup(ddr_width.value, Worksheets("dss_data").Range("T143:U146"), 2, False)
    End If
    
    If ddr_axi_type.value <> "Native" Then
        If ddr_width.value = "64" Then
            ddr_axi_width.value = 512
        Else
            ddr_axi_width.value = 64
        End If
    End If
    
End Sub

Private Sub UserForm_Initialize()
    EnableValidation = True
        ddr_hide_notsupported
'        Restore_ddr
    EnableValidation = True
End Sub
Private Sub ddr_hide_notsupported()
   ddr_type_Change
End Sub
Private Sub Restore_ddr()
    EnableValidation = False
    ddr_type.value = Worksheets("dss_data").Range("D132").value
    ddr_width.value = Worksheets("dss_data").Range("D133").value
    ddr_ecc.value = Worksheets("dss_data").Range("D134").value
    If ddr_type.value <> "" Then
        ddr_type_Change
        ddr_odt.value = Worksheets("dss_data").Range("D135").value
    End If
    ddr_memory_clk.value = Worksheets("dss_data").Range("D136").value
    ddr_gear_ratio.value = Worksheets("dss_data").Range("D137").value
    ddr_module_name.value = Worksheets("dss_data").Range("F254").value
    EnableValidation = True
End Sub

Private Sub ddr_create_Click()
    Dim result As Boolean
    result = validate
    'If result Then
        
        Application.Calculation = xlCalculationManual
        Application.ScreenUpdating = False
        Application.EnableEvents = False
        
        Worksheets("dss_data").Range("D252").value = Worksheets("dss_data").Range("D252").value + 1 'Total number of IP created
        SetSystem
        
        If ddr_type.value = "QDR" Then
            ip_code_set 100
        Else
            ip_code_set 0
        End If
        
        Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Application.Calculate
        Application.ScreenUpdating = True
        
        ComputeThermalPower
'        Save_ddr
    
        Unload Me
    'End If
End Sub

Private Function validate() As Boolean
    
    If ddr_type.value <> "" Then
    
        If Not ddr_validation_on_pll Then        'condition to check PLL availability for DDR configurator
                MsgBox "The PLLs count exceeding the maximum available PLLs"
                validate = False
                Exit Function
        End If
        
        If ddr_width.value = "" Then
            MsgBox "Invalid DDR width configuration"
            validate = False
            Exit Function
        End If
        
        If IsNumeric(ddr_memory_clk.value) Then
        Else
            MsgBox "Invalid DDR Memory Clock frequency"
            validate = False
            Exit Function
        End If
        
            
        length = Len(ddr_user_clkfeq.Caption)
        user_clk = Mid(ddr_user_clkfeq.Caption, 1, length - 4)
    
        If user_clk >= 0 And user_clk <= 200 Then
        Else
            MsgBox "User Clock frequency must be between 0 and 200 MHz"
            validate = False
            Exit Function
        End If
        
        'check for module name already present are not- SAR 79858
        If ddr_module_name.value = "" Then
            ddr_module_name.value = ddr_type.value & "_" & ddr_memory_clk.value & "MHz_" & "X" & ddr_width.value
        End If
        If module_name_notused(ddr_module_name.value, "/DDR3_mem") Then
            MsgBox "Unable to create " & """" & ddr_module_name.value & "/DDR3_mem" & """" & vbNewLine _
            & "An IP with that module name already exists."
            validate = False
            ddr_module_name.value = ""
            Exit Function
        End If
        
        If Not validate_free_row_ddr Then
            validate = False
            Exit Function
        End If
        
    Else
        MsgBox "Please select DDR type configuration"
        validate = False
        Exit Function
    End If
    
    validate = True

End Function
Public Function validate_free_row_ddr() As Boolean
    Dim check, res As Integer
    'clock sheet checking
    check = free_row(ActiveWorkbook.Worksheets("Clock"), 12, 511, "L", "Clock")
    If check > 509 Then
        MsgBox "Rows are exhausted to create DDR in Clock sheet."
        validate_free_row_ddr = False
        Exit Function
    End If
    
    'Logic sheet checking
    check = free_row(ActiveWorkbook.Worksheets("Logic"), 9, 508, "J", "Logic")
    If check = 509 Then
        MsgBox "Rows are exhausted to create DDR in Logic sheet."
        validate_free_row_ddr = False
        Exit Function
    End If
    
    'LSRAM sheet checking
    check = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM")
    If check = 251 Then
        MsgBox "Rows are exhausted to create DDR in LSRAM sheet."
        validate_free_row_ddr = False
        Exit Function
    End If
    
    'uSRAM sheet checking
    check = free_row(ActiveWorkbook.Worksheets("uSRAM"), 9, 250, "M", "uSRAM")
    If check = 251 Then
        MsgBox "Rows are exhausted to create DDR in uSRAM sheet."
        validate_free_row_ddr = False
        Exit Function
    End If
    
    'IO sheet checking
    check = free_row(ActiveWorkbook.Worksheets("IO"), 21, 721, "AC", "IO")
    If check > 716 Then
        MsgBox "Rows are exhausted to create DDR in IO sheet."
        validate_free_row_ddr = False
        Exit Function
    End If
    
    validate_free_row_ddr = True
End Function
' It is using Init PE DDR section data present in dss_data sheet
Private Sub Save_ddr()
    Worksheets("dss_data").Range("D132").value = ddr_type.value
    Worksheets("dss_data").Range("D133").value = ddr_width.value
    Worksheets("dss_data").Range("D134").value = ddr_ecc.value
    Worksheets("dss_data").Range("D135").value = ddr_odt.value
    Worksheets("dss_data").Range("D136").value = ddr_memory_clk.value
    Worksheets("dss_data").Range("D137").value = ddr_gear_ratio.value
    Worksheets("dss_data").Range("F254").value = ddr_module_name.value
End Sub
Private Sub SetSystem()

    Dim diff_io_tech As String
    Dim io_tech As String
    Dim regval As Long
    Dim cval As Long
    Dim key_width_axi As String
    
    If ddr_type.value <> "" Then
        
        If ddr_type.value = "LPDDR3" Or ddr_type.value = "QDR" Then
            ddr_ecc.value = False
        End If
        
        
        If ddr_ecc.value Then
            If ddr_width.value = 32 Then
                key_width_axi = ddr_type.value & "_" & ddr_axi_type & "_x" & "40" & "_x" & ddr_axi_width.value
            End If
            If ddr_width.value = 64 Then
                key_width_axi = ddr_type.value & "_" & ddr_axi_type & "_x" & "72" & "_x" & ddr_axi_width.value
            End If
        Else
            If ddr_type.value = "QDR" Then
                key_width_axi = ddr_type.value & "_x" & ddr_width.value
            Else
                key_width_axi = ddr_type.value & "_" & ddr_axi_type & "_x" & ddr_width.value & "_x" & ddr_axi_width.value
            End If
       End If
        

        regval = Application.WorksheetFunction.VLookup(key_width_axi, Worksheets("dss_data").Range("BD81:BH180"), 3, False)

        f_row = free_row(ActiveWorkbook.Worksheets("Clock"), 12, 511, "L", "Clock") 'Get free row to append data
        set_module_table ddr_module_name.value, "Clock", f_row, "/DDR_mem"
        
       'Set Clock Tree Sheet correspoding to DDR
'        Worksheets("Clock").Range("B" & f_row).value = ddr_module_name.value & "/ddr_memory"
'        Worksheets("Clock").Range("E" & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
'        Worksheets("Clock").Range("G" & f_row).value = regval
        Worksheets("Clock").Range(clock_name_str_col & f_row).value = ddr_module_name.value & "/ddr_memory"
        Worksheets("Clock").Range(clock_freq_col & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
        Worksheets("Clock").Range(clock_fanout_col & f_row).value = regval
        'set Two bank clock's in clock sheet
        f_row = f_row + 1
'        Worksheets("Clock").Range("B" & f_row).value = ddr_module_name.value & "/ddr_memory/HS_IO_CLK"
'        Worksheets("Clock").Range("E" & f_row).value = ddr_memory_clk.value
'        Worksheets("Clock").Range("F" & f_row).value = "Bank Clock"
        Worksheets("Clock").Range(clock_name_str_col & f_row).value = ddr_module_name.value & "/ddr_memory/HS_IO_CLK"
        Worksheets("Clock").Range(clock_freq_col & f_row).value = ddr_memory_clk.value
        Worksheets("Clock").Range(clock_clktype_col & f_row).value = "Bank Clock"
        f_row = f_row + 1
'        Worksheets("Clock").Range("B" & f_row).value = ddr_module_name.value & "/ddr_memory/HS_IO_CLK_90"
'        Worksheets("Clock").Range("E" & f_row).value = ddr_memory_clk.value
'        Worksheets("Clock").Range("F" & f_row).value = "Bank Clock"
        Worksheets("Clock").Range(clock_name_str_col & f_row).value = ddr_module_name.value & "/ddr_memory/HS_IO_CLK_90"
        Worksheets("Clock").Range(clock_freq_col & f_row).value = ddr_memory_clk.value
        Worksheets("Clock").Range(clock_clktype_col & f_row).value = "Bank Clock"
               
        ' logic settings
        cval = Application.WorksheetFunction.VLookup(key_width_axi, Worksheets("dss_data").Range("BD81:BH180"), 2, False)
        f_row = free_row(ActiveWorkbook.Worksheets("Logic"), 9, 508, "J", "Logic")
        set_module_table ddr_module_name.value, "Logic", f_row, "/DDR_mem"
        
       'Set Logic Sheet correspoding to DDR
'        Worksheets("Logic").Range("B" & f_row).value = ddr_module_name.value & "/ddr_memory"
'        Worksheets("Logic").Range("E" & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
'        Worksheets("Logic").Range("F" & f_row).value = regval
'        Worksheets("Logic").Range("G" & f_row).value = cval
        Worksheets("Logic").Range(logic_name_str_col & f_row).value = ddr_module_name.value & "/ddr_memory"
        Worksheets("Logic").Range(logic_freq_col & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
        Worksheets("Logic").Range(logic_dff_col & f_row).value = regval
        Worksheets("Logic").Range(logic_lut_col & f_row).value = cval
        
        'lsram settings
        sramval = Application.WorksheetFunction.VLookup(key_width_axi, Worksheets("dss_data").Range("BD81:BH180"), 4, False)
        f_row = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM")
        set_module_table ddr_module_name.value, "LSRAM", f_row, "/DDR_mem"
        
       'Set LSRAM Sheet correspoding to DDR
'        Worksheets("LSRAM").Range("B" & f_row).value = ddr_module_name.value & "/ddr_memory"
'        Worksheets("LSRAM").Range("E" & f_row).value = sramval
'        Worksheets("LSRAM").Range("G" & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
'        Worksheets("LSRAM").Range("M" & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
        Worksheets("LSRAM").Range(lsram_name_str_col & f_row).value = ddr_module_name.value & "/ddr_memory"
        Worksheets("LSRAM").Range(lsram_nblock_col & f_row).value = sramval
        Worksheets("LSRAM").Range(lsram_Aclkfreq_col & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
        Worksheets("LSRAM").Range(lsram_Bclkfreq_col & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
        
        'usram settings
        uramval = Application.WorksheetFunction.VLookup(key_width_axi, Worksheets("dss_data").Range("BD81:BH180"), 5, False)
        f_row = free_row(ActiveWorkbook.Worksheets("uSRAM"), 9, 250, "M", "uSRAM")
        set_module_table ddr_module_name.value, "uSRAM", f_row, "/DDR_mem"
        
       'Set uSRAM Sheet correspoding to DDR
'        Worksheets("uSRAM").Range("B" & f_row).value = ddr_module_name.value & "/ddr_memory"
'        Worksheets("uSRAM").Range("E" & f_row).value = uramval
'        Worksheets("uSRAM").Range("H" & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
'        Worksheets("uSRAM").Range("J" & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
        Worksheets("uSRAM").Range(usram_name_str_col & f_row).value = ddr_module_name.value & "/ddr_memory"
        Worksheets("uSRAM").Range(usram_nblock_col & f_row).value = uramval
        Worksheets("uSRAM").Range(usram_writeclkfreq_col & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
        Worksheets("uSRAM").Range(usram_readclkfreq_col & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
        
        'Set IO correspoding to DDR
        
        Dim m_s As String
        Dim mult As Double
        Dim memory_clk As Double 'DDR Clock
        Dim user_clk As Double 'AXI/AHB Clock
        m_s = ddr_gear_ratio.value
        If m_s <> "" Then
            mult = Application.WorksheetFunction.VLookup(m_s, Worksheets("dss_data").Range("J156:K158"), 2, False)
            memory_clk = Round(ddr_memory_clk.value, 3)
            user_clk = memory_clk * mult
        End If
        
        io_tech = Application.WorksheetFunction.VLookup(ddr_type.value, Worksheets("dss_data").Range("R125:T130"), 2, False)
        diff_io_tech = Application.WorksheetFunction.VLookup(ddr_type.value, Worksheets("dss_data").Range("R125:T130"), 3, False)
        'Currently using the same differential IO tech as other.
        'dqs_io_tech = Application.WorksheetFunction.VLookup(fddr_tech.value, Worksheets("dss_data").Range("R125:U130"), 4, False)
                     
               Dim key, ecc_status As String
               If ddr_ecc.value Then
                 ecc_status = "YES"
               Else
                 ecc_status = "NO"
               End If
                 
               key = ddr_type.value & "_" & ddr_width.value & "_" & ecc_status
               ' There are five categories of IOs identified for MDDR/FDDR. They are : clk, addr/ba/dm, dq, dqs_diff and other
               
               rowInd = free_row(ActiveWorkbook.Worksheets("IO"), 21, 716, "AC", "IO") 'get a free row to append data
               set_module_table ddr_module_name.value, "IO", rowInd, "/DDR_mem"
               'Category 1: Clock (Always Differntial)  ' For QDR clock is single ended std
               
'               Worksheets("IO").Range("B" & rowInd).value = ddr_module_name.value & "/ddr_mem"
'               Worksheets("IO").Range("E" & rowInd).value = "HSIO"
               Worksheets("IO").Range(io_name_str_col & rowInd).value = ddr_module_name.value & "/ddr_mem"
               Worksheets("IO").Range(io_banktype_col & rowInd).value = "HSIO"
               
               If ddr_type.value <> "QDR" Then
                    'Worksheets("IO").Range("F" & rowInd).value = diff_io_tech
                    Worksheets("IO").Range(io_standard_col & rowInd).value = diff_io_tech
               Else
                    'Worksheets("IO").Range("F" & rowInd).value = io_tech
                    Worksheets("IO").Range(io_standard_col & rowInd).value = io_tech
               End If

'               Worksheets("IO").Range("H" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 2, False)
'               Worksheets("IO").Range("I" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 3, False)
'               Worksheets("IO").Range("J" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 4, False)
               Worksheets("IO").Range(io_inputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 2, False)
               Worksheets("IO").Range(io_outputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 3, False)
               Worksheets("IO").Range(io_bidirpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 4, False)
               
               Sheet32.LegalizeOneRow rowInd
               If mult = Worksheets("dss_data").Range("K156").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX4"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX4"
               ElseIf mult = Worksheets("dss_data").Range("K157").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX2"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX2"
               Else
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX1"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX1"
               End If
               
'               Worksheets("IO").Range("R" & rowInd).value = memory_clk
'               Worksheets("IO").Range("S" & rowInd).value = "clock"
'               Worksheets("IO").Range("U" & rowInd).value = 1
               Worksheets("IO").Range(io_clkfreq_col & rowInd).value = memory_clk
               Worksheets("IO").Range(io_datarate_col & rowInd).value = "clock"
               Worksheets("IO").Range(io_enrate_col & rowInd).value = 1
               rowInd = rowInd + 1
               
               ' Category 2: addr/ba/dm (Always Normal).       'For QDR address bits depend on user qdr_add_width.value combo
               
               If ddr_type.value = "QDR" Then
                    add_bits_val = qdr_add_width.value
               Else
                    add_bits_val = 0
               End If
'               Worksheets("IO").Range("B" & rowInd).value = ddr_module_name.value & "/DDR addr/ba"
'               Worksheets("IO").Range("E" & rowInd).value = "HSIO"
'               Worksheets("IO").Range("F" & rowInd).value = io_tech
'               Worksheets("IO").Range("H" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 5, False)
'               Worksheets("IO").Range("I" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 6, False) + add_bits_val
'               Worksheets("IO").Range("J" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 7, False)
               Worksheets("IO").Range(io_name_str_col & rowInd).value = ddr_module_name.value & "/DDR addr/ba"
               Worksheets("IO").Range(io_banktype_col & rowInd).value = "HSIO"
               Worksheets("IO").Range(io_standard_col & rowInd).value = io_tech
               Worksheets("IO").Range(io_inputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 5, False)
               Worksheets("IO").Range(io_outputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 6, False) + add_bits_val
               Worksheets("IO").Range(io_bidirpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 7, False)
               Sheet32.LegalizeOneRow rowInd
               If mult = Worksheets("dss_data").Range("K156").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX4"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX4"
               ElseIf mult = Worksheets("dss_data").Range("K157").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX2"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX2"
               Else
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX1"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX1"
               End If
               
'               Worksheets("IO").Range("R" & rowInd).value = memory_clk
'               Worksheets("IO").Range("S" & rowInd).value = "SDR"
'               Worksheets("IO").Range("T" & rowInd).value = 0.2
               Worksheets("IO").Range(io_clkfreq_col & rowInd).value = memory_clk
               Worksheets("IO").Range(io_datarate_col & rowInd).value = "SDR"
               Worksheets("IO").Range(io_tgrate_col & rowInd).value = 0.2
               Worksheets("IO").Range(io_enrate_col & rowInd).value = 0.5
               rowInd = rowInd + 1
               
               ' Category 3: dq (Always Normal).
               
'               Worksheets("IO").Range("B" & rowInd).value = ddr_module_name.value & "/DDR dq"
'               Worksheets("IO").Range("E" & rowInd).value = "HSIO"
'               Worksheets("IO").Range("F" & rowInd).value = io_tech
'               Worksheets("IO").Range("H" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 8, False)
'               Worksheets("IO").Range("I" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 9, False)
'               Worksheets("IO").Range("J" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 10, False)
               Worksheets("IO").Range(io_name_str_col & rowInd).value = ddr_module_name.value & "/DDR dq"
               Worksheets("IO").Range(io_banktype_col & rowInd).value = "HSIO"
               Worksheets("IO").Range(io_standard_col & rowInd).value = io_tech
               Worksheets("IO").Range(io_inputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 8, False)
               Worksheets("IO").Range(io_outputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 9, False)
               Worksheets("IO").Range(io_bidirpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 10, False)
               Sheet32.LegalizeOneRow rowInd
               If mult = Worksheets("dss_data").Range("K156").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDBX4"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDBX4"
               ElseIf mult = Worksheets("dss_data").Range("K157").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDBX2"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDBX2"
               Else
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDBX1"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDBX1"
               End If
               
'               Worksheets("IO").Range("M" & rowInd).value = ddr_odt.value
'               Worksheets("IO").Range("R" & rowInd).value = memory_clk
'               Worksheets("IO").Range("S" & rowInd).value = "DDR"
'               Worksheets("IO").Range("T" & rowInd).value = 0.35
'               Worksheets("IO").Range("U" & rowInd).value = 0.5
'               Worksheets("IO").Range("V" & rowInd).value = 0.5
               Worksheets("IO").Range(io_odt_col & rowInd).value = ddr_odt.value
               Worksheets("IO").Range(io_clkfreq_col & rowInd).value = memory_clk
               Worksheets("IO").Range(io_datarate_col & rowInd).value = "DDR"
               Worksheets("IO").Range(io_tgrate_col & rowInd).value = 0.35
               Worksheets("IO").Range(io_enrate_col & rowInd).value = 0.5
               Worksheets("IO").Range(io_odtenable_col & rowInd).value = 0.5
               rowInd = rowInd + 1
               

If ddr_type.value <> "QDR" Then        ' For QDR type dqs and dm pins are not supported.
               ' Category 4: dqs_differential
               
'               Worksheets("IO").Range("B" & rowInd).value = ddr_module_name.value & "/DDR dqs"
'               Worksheets("IO").Range("E" & rowInd).value = "HSIO"
'               Worksheets("IO").Range("F" & rowInd).value = diff_io_tech
'               Worksheets("IO").Range("H" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 11, False)
'               Worksheets("IO").Range("I" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 12, False)
'               Worksheets("IO").Range("J" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 13, False)
               Worksheets("IO").Range(io_name_str_col & rowInd).value = ddr_module_name.value & "/DDR dqs"
               Worksheets("IO").Range(io_banktype_col & rowInd).value = "HSIO"
               Worksheets("IO").Range(io_standard_col & rowInd).value = diff_io_tech
               Worksheets("IO").Range(io_inputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 11, False)
               Worksheets("IO").Range(io_outputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 12, False)
               Worksheets("IO").Range(io_bidirpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 13, False)
               Sheet32.LegalizeOneRow rowInd
               If mult = Worksheets("dss_data").Range("K156").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDBX4"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDBX4"
               ElseIf mult = Worksheets("dss_data").Range("K157").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDBX2"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDBX2"
               Else
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDBX1"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDBX1"
               End If
                              
'               Worksheets("IO").Range("M" & rowInd).value = ddr_odt.value
'               Worksheets("IO").Range("R" & rowInd).value = memory_clk
'               Worksheets("IO").Range("S" & rowInd).value = "DDR"
'               Worksheets("IO").Range("T" & rowInd).value = 0.35
'               Worksheets("IO").Range("U" & rowInd).value = 0.5
'               Worksheets("IO").Range("V" & rowInd).value = 0.5
               Worksheets("IO").Range(io_odt_col & rowInd).value = ddr_odt.value
               Worksheets("IO").Range(io_clkfreq_col & rowInd).value = memory_clk
               Worksheets("IO").Range(io_datarate_col & rowInd).value = "DDR"
               Worksheets("IO").Range(io_tgrate_col & rowInd).value = 0.35
               Worksheets("IO").Range(io_enrate_col & rowInd).value = 0.5
               Worksheets("IO").Range(io_odtenable_col & rowInd).value = 0.5
               
               rowInd = rowInd + 1
               
               
               ' Category 5: dm (Always Normal).
               
               
'               Worksheets("IO").Range("B" & rowInd).value = ddr_module_name.value & "/DDR dm"
'               Worksheets("IO").Range("E" & rowInd).value = "HSIO"
'               Worksheets("IO").Range("F" & rowInd).value = io_tech
'               Worksheets("IO").Range("H" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 17, False)
'               Worksheets("IO").Range("I" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 18, False)
'               Worksheets("IO").Range("J" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 19, False)
               Worksheets("IO").Range(io_name_str_col & rowInd).value = ddr_module_name.value & "/DDR dm"
               Worksheets("IO").Range(io_banktype_col & rowInd).value = "HSIO"
               Worksheets("IO").Range(io_standard_col & rowInd).value = io_tech
               Worksheets("IO").Range(io_inputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 17, False)
               Worksheets("IO").Range(io_outputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 18, False)
               Worksheets("IO").Range(io_bidirpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 19, False)
               Sheet32.LegalizeOneRow rowInd
               If mult = Worksheets("dss_data").Range("K156").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX4"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX4"
               ElseIf mult = Worksheets("dss_data").Range("K157").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX2"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX2"
               Else
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX1"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX1"
               End If
               
'               Worksheets("IO").Range("R" & rowInd).value = memory_clk
'               Worksheets("IO").Range("S" & rowInd).value = "DDR"
'               Worksheets("IO").Range("T" & rowInd).value = 0.2
               Worksheets("IO").Range(io_clkfreq_col & rowInd).value = memory_clk
               Worksheets("IO").Range(io_datarate_col & rowInd).value = "DDR"
               Worksheets("IO").Range(io_tgrate_col & rowInd).value = 0.2
               Worksheets("IO").Range(io_enrate_col & rowInd).value = 0.5
               
               rowInd = rowInd + 1
               
End If
                ' Category 5: others (all normal)
               
'               Worksheets("IO").Range("B" & rowInd).value = ddr_module_name.value & "/DDR others"
'               Worksheets("IO").Range("E" & rowInd).value = "HSIO"
'               Worksheets("IO").Range("F" & rowInd).value = io_tech
'               Worksheets("IO").Range("H" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 14, False)
'               Worksheets("IO").Range("I" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 15, False)
'               Worksheets("IO").Range("J" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 16, False)
               Worksheets("IO").Range(io_name_str_col & rowInd).value = ddr_module_name.value & "/DDR others"
               Worksheets("IO").Range(io_banktype_col & rowInd).value = "HSIO"
               Worksheets("IO").Range(io_standard_col & rowInd).value = io_tech
               Worksheets("IO").Range(io_inputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 14, False)
               Worksheets("IO").Range(io_outputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 15, False)
               Worksheets("IO").Range(io_bidirpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 16, False)
               Sheet32.LegalizeOneRow rowInd
               If mult = Worksheets("dss_data").Range("K156").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX4"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX4"
               ElseIf mult = Worksheets("dss_data").Range("K157").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX2"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX2"
               Else
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX1"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX1"
               End If
                              
'               Worksheets("IO").Range("R" & rowInd).value = memory_clk
'               Worksheets("IO").Range("S" & rowInd).value = "SDR"
'               Worksheets("IO").Range("T" & rowInd).value = 0.125
'               Worksheets("IO").Range("U" & rowInd).value = 1
               Worksheets("IO").Range(io_clkfreq_col & rowInd).value = memory_clk
               Worksheets("IO").Range(io_datarate_col & rowInd).value = "SDR"
               Worksheets("IO").Range(io_tgrate_col & rowInd).value = 0.125
               Worksheets("IO").Range(io_enrate_col & rowInd).value = 1
               
               rowInd = rowInd + 1
               
              'Set PLL Sheet correspoding to DDR
                f_row = free_row(ActiveWorkbook.Worksheets("PLL & DLL"), 17, 24, "K", "PLL") 'Get free row to append data
                set_module_table ddr_module_name.value, "PLL & DLL", f_row, "/DDR3_mem"  'setting module table to display in manage IP
        
'                Worksheets("PLL & DLL").Range("B" & f_row).value = ddr_module_name.value & "/ddr_memory"
'                Worksheets("PLL & DLL").Range("E" & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
'                Worksheets("PLL & DLL").Range("F" & f_row).value = ddr_memory_clk.value
'                Worksheets("PLL & DLL").Range("G" & f_row).value = ddr_memory_clk.value
'                Worksheets("PLL & DLL").Range("H" & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
'                Worksheets("PLL & DLL").Range("I" & f_row).value = ""
                Worksheets("PLL & DLL").Range(pll_name_str_col & f_row).value = ddr_module_name.value & "/ddr_memory"
                Worksheets("PLL & DLL").Range(pll_refclk_col & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
                Worksheets("PLL & DLL").Range(pll_out0freq_col & f_row).value = ddr_memory_clk.value
                Worksheets("PLL & DLL").Range(pll_out1freq_col & f_row).value = ddr_memory_clk.value
                Worksheets("PLL & DLL").Range(pll_out2freq_col & f_row).value = Mid(ddr_user_clkfeq.Caption, 1, Len(ddr_user_clkfeq.Caption) - 4)
                Worksheets("PLL & DLL").Range(pll_out3freq_col & f_row).value = ""
                
  End If
  
End Sub

Function MPESETDDR(ByVal d_type As String, ByVal d_width As Integer, ByVal d_clkfreq As Double, ByVal d_odt As String, ByVal d_axitype As String, ByVal d_axiwidth As Integer, ByVal d_logicclkrate As String, ByVal d_ecc As String, ByVal d_module_name As String)
 On Error Resume Next
'validation funtion calling
    Dim valid_res As Boolean
    valid_res = DDR_script_validate(d_type, d_width, d_clkfreq, d_odt, d_axitype, d_axiwidth, d_logicclkrate, d_ecc)
    'If Not valid_res Then
    '    Exit Function
    'End If

' Initializing arugments to DDR dialog objects
    If d_type = "DDR3" Or d_type = "DDR4" Or d_type = "LPDDR3" Then
        ddr_type.value = d_type
        ddr_width.value = d_width
        ddr_memory_clk.value = d_clkfreq
        ddr_odt.value = d_odt
        ddr_axi_type.value = d_axitype
        ddr_axi_width.value = d_axiwidth
        ddr_gear_ratio.value = d_logicclkrate
        If d_ecc = "yes" Or d_ecc = "YES" Then
            ddr_ecc.value = True
        Else
            ddr_ecc.value = False
        End If
    End If
    
    If d_type = "QDR" Then
        ddr_type.value = d_type
        ddr_width.value = d_width
        ddr_memory_clk.value = d_clkfreq
        ddr_odt.value = d_odt
        ddr_gear_ratio.value = d_logicclkrate
        qdr_add_width.value = d_axitype
    End If
    
    'ddr_module_name.value = ddr_type.value & "_" & ddr_memory_clk.value & "MHz_" & "X" & ddr_width.value & "_script."
    ddr_module_name.value = d_module_name
'Setting DDR sub which do Creation of DDR
    ddr_create_Click
        
End Function

Function DDR_script_validate(ByVal d_type As String, ByVal d_width As Integer, ByVal d_clkfreq As Double, ByVal d_odt As String, ByVal d_axitype As String, ByVal d_axiwidth As Integer, ByVal d_logicclkrate As String, ByVal d_ecc As String) As Boolean
    f_row = free_row(ActiveWorkbook.Worksheets("Clock"), 12, 112, "L", "Clock")
''check PLL availability for DDR configurator max available PLLS are 8.
'    If Not ddr_validation_on_pll Then
'        MsgBox "The PLLs count exceeding the maximum available PLLs"
'        DDR_script_validate = False
'        Exit Function
'    End If
    
'1 DDR type validation
    If (d_type = Worksheets("dss_data").Range("Y163").value) Or (d_type = Worksheets("dss_data").Range("Y164").value) Or (d_type = Worksheets("dss_data").Range("Y165").value) Or (d_type = Worksheets("dss_data").Range("Y166").value) Then
    Else
        MsgBox "Invalid DDR type in 1st argument"
        DDR_script_validate = False
        Worksheets("dss_data").Range("D132").Interior.Color = RGB(255, 0, 0)
        'Exit Function
    End If
'2 DDR width validation
    
    '( d_type = DDR3 or d_type=DDR4) and (d_width = 8 or 16 or 32 or 64 )
    If ((d_type = Worksheets("dss_data").Range("Y163").value) Or (d_type = Worksheets("dss_data").Range("Y164").value)) And ((d_width = Worksheets("dss_data").Range("T143").value) Or (d_width = Worksheets("dss_data").Range("T144").value) Or (d_width = Worksheets("dss_data").Range("T145").value) Or (d_width = Worksheets("dss_data").Range("T146").value)) Then
    
    '( d_type = LPDDR3) and (d_width = 16 or 32)
    ElseIf (d_type = Worksheets("dss_data").Range("Y165").value) And ((d_width = Worksheets("dss_data").Range("T144").value) Or (d_width = Worksheets("dss_data").Range("T145").value)) Then
    
    '( d_type = QDR) and (d_width = 8 or 9 or 18 or 36)
    ElseIf (d_type = Worksheets("dss_data").Range("Y166").value) And ((d_width = Worksheets("dss_data").Range("Q147").value) Or (d_width = Worksheets("dss_data").Range("Q148").value) Or (d_width = Worksheets("dss_data").Range("Q149").value) Or (d_width = Worksheets("dss_data").Range("Q150").value)) Then
    Else
        MsgBox "Invalid DDR width in 2nd argument"
        DDR_script_validate = False
        Worksheets("dss_data").Range("D133").Interior.Color = RGB(255, 0, 0)
        'Exit Function
    End If
'7 DDR user logic clk rate validation
    If d_logicclkrate = "Quad" Then
    Else
        MsgBox "Invalid User Logic clock rate in 7th argument"
        DDR_script_validate = False
        Worksheets("dss_data").Range("D137").Interior.Color = RGB(255, 0, 0)
        'Exit Function
    End If
'3 DDR memory clk freq validation
    'for DDR3, DDR4, LPDDR3 allowed freq is 0-800 MHz.
    If ((d_type = Worksheets("dss_data").Range("Y163").value) Or (d_type = Worksheets("dss_data").Range("Y164").value) Or (d_type = Worksheets("dss_data").Range("Y165").value)) Then
        If IsNumeric(d_clkfreq) And (d_logicclkrate = "Quad" And d_clkfreq <= 800) Then
        Else
'            MsgBox "Invalid Memory clock frequency in 3rd argument"
'            DDR_script_validate = False
'            Worksheets("dss_data").Range("D136").Interior.Color = RGB(255, 0, 0)
'            Worksheets("Clock").Range("E" & f_row).Interior.Color = RGB(255, 0, 0)
'            f_row = f_row + 1
'            Worksheets("Clock").Range("E" & f_row).Interior.Color = RGB(255, 0, 0)
'            f_row = f_row + 1
'            Worksheets("Clock").Range("E" & f_row).Interior.Color = RGB(255, 0, 0)
'
'            f_row = free_row(ActiveWorkbook.Worksheets("PLL & DLL"), 17, 24, "K", "PLL")
'            Worksheets("PLL & DLL").Range("E" & f_row).Interior.Color = RGB(255, 0, 0)
'            Worksheets("PLL & DLL").Range("F" & f_row).Interior.Color = RGB(255, 0, 0)
'            Worksheets("PLL & DLL").Range("G" & f_row).Interior.Color = RGB(255, 0, 0)
'
'            f_row = free_row(ActiveWorkbook.Worksheets("Logic"), 9, 258, "J", "Logic")
'            Worksheets("Logic").Range("E" & f_row).Interior.Color = RGB(255, 0, 0)
'
'            f_row = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM")
'            Worksheets("LSRAM").Range("G" & f_row).Interior.Color = RGB(255, 0, 0)
'            Worksheets("LSRAM").Range("M" & f_row).Interior.Color = RGB(255, 0, 0)
'
'            f_row = free_row(ActiveWorkbook.Worksheets("uSRAM"), 9, 250, "M", "uSRAM")
'            Worksheets("uSRAM").Range("H" & f_row).Interior.Color = RGB(255, 0, 0)
'            Worksheets("uSRAM").Range("J" & f_row).Interior.Color = RGB(255, 0, 0)

            MsgBox "Invalid Memory clock frequency in 3rd argument"
            DDR_script_validate = False
            Worksheets("dss_data").Range("D136").Interior.Color = RGB(255, 0, 0)
            Worksheets("Clock").Range(clock_freq_col & f_row).Interior.Color = RGB(255, 0, 0)
            f_row = f_row + 1
            Worksheets("Clock").Range(clock_freq_col & f_row).Interior.Color = RGB(255, 0, 0)
            f_row = f_row + 1
            Worksheets("Clock").Range(clock_freq_col & f_row).Interior.Color = RGB(255, 0, 0)
            
            f_row = free_row(ActiveWorkbook.Worksheets("PLL & DLL"), 17, 24, "K", "PLL")
            Worksheets("PLL & DLL").Range(pll_refclk_col & f_row).Interior.Color = RGB(255, 0, 0)
            Worksheets("PLL & DLL").Range(pll_out0freq_col & f_row).Interior.Color = RGB(255, 0, 0)
            Worksheets("PLL & DLL").Range(pll_out1freq_col & f_row).Interior.Color = RGB(255, 0, 0)
            
            f_row = free_row(ActiveWorkbook.Worksheets("Logic"), 9, 258, "J", "Logic")
            Worksheets("Logic").Range(logic_freq_col & f_row).Interior.Color = RGB(255, 0, 0)
            
            f_row = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM")
            Worksheets("LSRAM").Range(lsram_Aclkfreq_col & f_row).Interior.Color = RGB(255, 0, 0)
            Worksheets("LSRAM").Range(lsram_Bclkfreq_col & f_row).Interior.Color = RGB(255, 0, 0)
            
            f_row = free_row(ActiveWorkbook.Worksheets("uSRAM"), 9, 250, "M", "uSRAM")
            Worksheets("uSRAM").Range(usram_writeclkfreq_col & f_row).Interior.Color = RGB(255, 0, 0)
            Worksheets("uSRAM").Range(usram_readclkfreq_col & f_row).Interior.Color = RGB(255, 0, 0)
            
            'Exit Function
        End If
    End If
    'For QDR allowed freq is 0-166.625 MHz.
    If (d_type = Worksheets("dss_data").Range("Y166").value) Then
        If IsNumeric(d_clkfreq) And (d_logicclkrate = "Quad" And d_clkfreq <= 666.5) Then
        Else
            MsgBox "Invalid Memory clock frequency in 3rd argument"
            DDR_script_validate = False
            Worksheets("dss_data").Range("D136").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
    End If
    
'4 DDR ODT validation
    'ODT values for DDR3--> SSTL15_I i.e NO_ODT 20 30 40 60 120
    If (d_type = Worksheets("dss_data").Range("Y163").value) And (d_odt = "NO_ODT" Or d_odt = "20" Or d_odt = "30" Or d_odt = "40" Or d_odt = "60" Or d_odt = "120") Then
    'ODT values for  DDR4--> POD12_I are same i.e NO_ODT 34, 40, 48, 60, 80, 120 240
    ElseIf (d_type = Worksheets("dss_data").Range("Y164").value) And (d_odt = "NO_ODT" Or d_odt = "34" Or d_odt = "40" Or d_odt = "48" Or d_odt = "60" Or d_odt = "80" Or d_odt = "120" Or d_odt = "240") Then
    'ODT values for LPDDR3 --> HSUL12I i.e. NO_ODT 60, 120 240
    ElseIf (d_type = Worksheets("dss_data").Range("Y165").value) And (d_odt = "NO_ODT" Or d_odt = "60" Or d_odt = "120" Or d_odt = "240") Then
    'ODT values for QDR --> HSTL15DI i.e. NO_ODT 50
    ElseIf (d_type = Worksheets("dss_data").Range("Y166").value) And (d_odt = "NO_ODT" Or d_odt = "50") Then
      
    Else
        MsgBox "Invalid ODT value in 4th argument for DDR type in 1st argument"
        DDR_script_validate = False
        Worksheets("dss_data").Range("D132").Interior.Color = RGB(255, 0, 0)
        Worksheets("dss_data").Range("D135").Interior.Color = RGB(255, 0, 0)
        'Exit Function
    End If
    
'5 DDR AXI type validation
    ' DDR3, DDR4, LPDDR3 has AXI type as AXI3, AXI4.
    If ((d_type = Worksheets("dss_data").Range("Y163").value) Or (d_type = Worksheets("dss_data").Range("Y164").value) Or (d_type = Worksheets("dss_data").Range("Y165").value)) Then
        If (d_axitype = Worksheets("dss_data").Range("N143").value) Or (d_axitype = Worksheets("dss_data").Range("N144").value) Then
        Else
            MsgBox "Invalid AXI type in 5th argument"
            DDR_script_validate = False
            'Exit Function
        End If
    End If
    ' For QDR this is not applicatble to use NA as argument.
    If (d_type = Worksheets("dss_data").Range("Y166").value) Then
        If (d_axitype = "21" Or d_axitype = "20" Or d_axitype = "19" Or d_axitype = "18") Then
            'd_axitype = "AXI3"
        Else
            MsgBox "Invalid AXI type in 5th argument"
            DDR_script_validate = False
            'Exit Function
        End If
    End If
        
'6 DDR AXI width validation
     If (d_type <> Worksheets("dss_data").Range("Y166").value) Then 'If DDR type is not QDR then all these are not supported.
        'ddr_width is 8 then supported AXI width is 64
        If (d_width = Worksheets("dss_data").Range("T143").value) And (d_axiwidth = Worksheets("dss_data").Range("O143").value) Then
        'for 16 AXI width supported is 64,128
        ElseIf (d_width = Worksheets("dss_data").Range("T144").value) And (d_axiwidth = Worksheets("dss_data").Range("O143").value Or d_axiwidth = Worksheets("dss_data").Range("O144").value) Then
        'for 32 AXI width supported is 64,128,256
        ElseIf (d_width = Worksheets("dss_data").Range("T145").value) And (d_axiwidth = Worksheets("dss_data").Range("O143").value Or d_axiwidth = Worksheets("dss_data").Range("O144").value Or d_axiwidth = Worksheets("dss_data").Range("O145").value) Then
        'for 64 AXI width supported is 512
        ElseIf (d_width = Worksheets("dss_data").Range("T146").value) And (d_axiwidth = Worksheets("dss_data").Range("O146").value) Then
        Else
            MsgBox "Invalid AXI width in 6th argument for selected DDR width in 2nd argument"
            DDR_script_validate = False
            'Exit Function
        End If
    Else
        If (d_axiwidth = 0) Then    'For QDR AXI width is NA
            d_axiwidth = "64"
        Else
            MsgBox "Invalid AXI width in 6th argument for selected DDR width in 2nd argument"
            DDR_script_validate = False
            'Exit Function
        End If
    End If
'8 DDR ECC status validation
    ' ECC ON/OFF holdes when DDR width 32/64.
    If d_type = "DDR3" Or d_type = "DDR4" Then
        If (d_width = Worksheets("dss_data").Range("T143").value) And (d_ecc = "no" Or d_ecc = "NO") Then
        ElseIf (d_width = Worksheets("dss_data").Range("T144").value) And (d_ecc = "no" Or d_ecc = "NO") Then
        ElseIf (d_width = Worksheets("dss_data").Range("T145").value) And (d_ecc = "yes" Or d_ecc = "no" Or d_ecc = "YES" Or d_ecc = "NO") Then
        ElseIf (d_width = Worksheets("dss_data").Range("T146").value) And (d_ecc = "yes" Or d_ecc = "no" Or d_ecc = "YES" Or d_ecc = "NO") Then
    
        Else
            MsgBox "Invalid ECC status in 7th argument for selected DDR width in 2nd argument"
            DDR_script_validate = False
            Worksheets("dss_data").Range("D134").Interior.Color = RGB(255, 0, 0)
            Worksheets("dss_data").Range("D133").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
    Else
        If d_ecc = "NA" Then
            d_ecc = "No"
        Else
            MsgBox "Invalid ECC status in 7th argument for selected DDR width in 2nd argument"
            DDR_script_validate = False
            Worksheets("dss_data").Range("D134").Interior.Color = RGB(255, 0, 0)
            Worksheets("dss_data").Range("D133").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
    End If

'if all the 8 arguments are valid then function return True
            DDR_script_validate = True

End Function


Attribute VB_Name = "add_transceiver"
Attribute VB_Base = "0{91214C42-34D4-4235-8E2E-97F95CE9A8CE}{3F1C9C5E-A0AC-47E0-8E17-6483487E69F9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub operation_mode_Change()
    
    If operation_mode.value = "Tx Only" Then
        xcvr_txdata_rate_tb.Enabled = True
        xcvr_rxdata_rate_tb.Enabled = False
    ElseIf operation_mode.value = "Rx Only" Then
        xcvr_txdata_rate_tb.Enabled = False
        xcvr_rxdata_rate_tb.Enabled = True
    Else
        xcvr_txdata_rate_tb.Enabled = True
        xcvr_rxdata_rate_tb.Enabled = True
    End If
        
End Sub

Private Sub pcs_mode_Change()
    pcs_width.RowSource = "Transceiver!" & Application.WorksheetFunction.VLookup(pcs_mode.value, Worksheets("Transceiver").Range("BM108:BN112").value, 2, False)
    hard_pcie.RowSource = "Transceiver!" & Application.WorksheetFunction.VLookup(pcs_mode.value, Worksheets("Transceiver").Range("BM108:BO112").value, 3, False)
    pcs_width.value = "32"
    If pcs_mode.value = "PIPE" Then
        hard_pcie.value = "Yes"
    Else
        hard_pcie.value = "No"
    End If
End Sub

Private Sub protocol_preset_Change()

    If protocol_preset.value <> "   " Then       '3 spaces checking
        xcvr_lanes_tb.Enabled = True
        xcvr_txdata_rate_tb.Enabled = True
        xcvr_rxdata_rate_tb.Enabled = True
        operation_mode.Enabled = True
        pll_used.Enabled = True
        tx_amplitude.Enabled = True
        pcs_mode.Enabled = True
        pcs_width.Enabled = True
        hard_pcie.Enabled = True
        module_name.Enabled = True
        pcs_mode.value = "8b/10b"
        pll_used.RowSource = "Transceiver!" & Application.WorksheetFunction.VLookup(Worksheets("Transceiver").Range("BN4").value, Worksheets("Transceiver").Range("BO61:BP68").value, 2, False)
        pcs_width.RowSource = "Transceiver!" & Application.WorksheetFunction.VLookup(pcs_mode.value, Worksheets("Transceiver").Range("BM108:BN112").value, 2, False)
        hard_pcie.RowSource = "Transceiver!" & Application.WorksheetFunction.VLookup(pcs_mode.value, Worksheets("Transceiver").Range("BM108:BO112").value, 3, False)
            
        preset_for_selectedxcvr        'calling sub which preset values based on selected xcvr.
    Else
        xcvr_lanes_tb.Enabled = False
        xcvr_txdata_rate_tb.Enabled = False
        xcvr_rxdata_rate_tb.Enabled = False
        operation_mode.Enabled = False
        pll_used.Enabled = False
        tx_amplitude.Enabled = False
        pcs_mode.Enabled = False
        pcs_width.Enabled = False
        hard_pcie.Enabled = False
        module_name.Enabled = False
    End If
End Sub
Private Sub preset_for_selectedxcvr()
    sDecimal = Application.International(xlDecimalSeparator)
    xcvr_lanes_tb.value = Application.WorksheetFunction.VLookup(protocol_preset.value, Worksheets("Transceiver").Range("BM18:BX49"), 2, False)
    operation_mode.value = Application.WorksheetFunction.VLookup(protocol_preset.value, Worksheets("Transceiver").Range("BM18:BX49"), 3, False)
    xcvr_txdata_rate_tb.value = Replace(WorksheetFunction.VLookup(protocol_preset.value, Worksheets("Transceiver").Range("BM17:BX49").value, 4, False), ".", sDecimal)
    xcvr_rxdata_rate_tb.value = Replace(WorksheetFunction.VLookup(protocol_preset.value, Worksheets("Transceiver").Range("BM17:BX49").value, 5, False), ".", sDecimal)
    pll_used.value = Application.WorksheetFunction.VLookup(protocol_preset.value, Worksheets("Transceiver").Range("BM18:BX49"), 6, False)
    tx_amplitude.value = Application.WorksheetFunction.VLookup(protocol_preset.value, Worksheets("Transceiver").Range("BM18:BX49"), 10, False)
    pcs_mode.value = Application.WorksheetFunction.VLookup(protocol_preset.value, Worksheets("Transceiver").Range("BM18:BX49"), 11, False)
    pcs_width.value = Application.WorksheetFunction.VLookup(protocol_preset.value, Worksheets("Transceiver").Range("BM18:BX49"), 12, False)
End Sub

Private Sub xcvr_close_button_Click()
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    EnableValidation = True
        protocol_preset_Change
    EnableValidation = True
End Sub
Private Sub SET_TRANSCEIVER()
    Dim ind As Integer
    Dim xcvr_name As String
    sDecimal = Application.International(xlDecimalSeparator)
    sThousand = Application.International(xlThousandsSeparator)
    ind = free_row(ActiveWorkbook.Worksheets("Transceiver"), 14, 37, "U", "Transceiver")
    
    If protocol_preset.value <> Worksheets("Transceiver").Range("BM17").value Then
        If module_name.value = "" Then
            xcvr_name = protocol_preset.value & "/Transceiver_interface"
        Else
            xcvr_name = module_name.value
        End If
        Application.EnableEvents = True
'        Worksheets("Transceiver").Range("B" & ind).value = xcvr_name
'        Worksheets("Transceiver").Range("E" & ind).value = protocol_preset.value
'        Worksheets("Transceiver").Range("F" & ind).value = xcvr_lanes_tb.value
'        Worksheets("Transceiver").Range("G" & ind).value = operation_mode.value
'        ' To convert from German to English notation because VB code will intrepet everything in English
'        Worksheets("Transceiver").Range("H" & ind).value = Replace(xcvr_txdata_rate_tb.value, ",", sThousand)
'        Worksheets("Transceiver").Range("I" & ind).value = pll_used.value
'        Worksheets("Transceiver").Range("N" & ind).value = tx_amplitude.value
'        Worksheets("Transceiver").Range("O" & ind).value = pcs_mode.value
'        Worksheets("Transceiver").Range("P" & ind).value = pcs_width.value
'        Worksheets("Transceiver").Range("Q" & ind).value = hard_pcie.value

        Worksheets("Transceiver").Range(xcvr_name_str_col & ind).value = xcvr_name
        Worksheets("Transceiver").Range(xcvr_protocol_col & ind).value = protocol_preset.value
        Worksheets("Transceiver").Range(xcvr_nlanes_col & ind).value = xcvr_lanes_tb.value
        Worksheets("Transceiver").Range(xcvr_opmode_col & ind).value = operation_mode.value
        ' To convert from German to English notation because VB code will intrepet everything in English
        If operation_mode.value = "Tx Only" Then
            Worksheets("Transceiver").Range(xcv_txdatarate_col & ind).value = Replace(xcvr_txdata_rate_tb.value, ",", sThousand)
            Worksheets("Transceiver").Range(xcvr_rxdatarate_col & ind).ClearContents
        ElseIf operation_mode.value = "Rx Only" Then
            Worksheets("Transceiver").Range(xcvr_rxdatarate_col & ind).value = Replace(xcvr_rxdata_rate_tb.value, ",", sThousand)
            Worksheets("Transceiver").Range(xcv_txdatarate_col & ind).ClearContents
        End If
        
        Worksheets("Transceiver").Range(xcvr_pll_col & ind).value = pll_used.value
        Worksheets("Transceiver").Range(xcvr_txamp_col & ind).value = tx_amplitude.value
        Worksheets("Transceiver").Range(xcvr_pcsmode_col & ind).value = pcs_mode.value
        Worksheets("Transceiver").Range(xcvr_pcswidth_col & ind).value = pcs_width.value
        Worksheets("Transceiver").Range(xcvr_pcie_col & ind).value = hard_pcie.value

        Application.EnableEvents = False
    End If
    
    set_module_table xcvr_name, "Transceiver", ind, ""
    ip_code_set 1
    
End Sub

Private Sub xcvr_create_button_Click()
    Dim result As Boolean
    result = xcvr_validate
    'If result Then
        
        Application.Calculation = xlCalculationManual
        Application.ScreenUpdating = False
        Application.EnableEvents = False
        
        Worksheets("dss_data").Range("D252").value = Worksheets("dss_data").Range("D252").value + 1 'Total number of IP created
        SET_TRANSCEIVER
        
        Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Application.Calculate
        Application.ScreenUpdating = True
        
        ComputeThermalPower
        
        Unload Me
    'End If
End Sub
Private Function xcvr_validate()
    Dim ind As Integer
    sDecimal = Application.International(xlDecimalSeparator)
    sThousand = Application.International(xlThousandsSeparator)
    ind = free_row(ActiveWorkbook.Worksheets("Transceiver"), 14, 37, "U", "Transceiver")
    If protocol_preset.value <> "   " Then
        
        'checking for valid TX data rate
        If IsNumeric(xcvr_txdata_rate_tb.value) And (xcvr_txdata_rate_tb >= 0.5 And xcvr_txdata_rate_tb <= 12.7) Then
        'Worksheets("Transceiver").Range("H" & ind).Interior.Color = RGB(255, 255, 255)
        Worksheets("Transceiver").Range(xcv_txdatarate_col & ind).Interior.Color = RGB(255, 255, 255)
        Else
            MsgBox "Invalid TX Data Rate. It range from 0.5 Gbps upto 12.7 Gbps"
            xcvr_validate = False
            'Worksheets("Transceiver").Range("H" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("Transceiver").Range(xcv_txdatarate_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        'checking for valid RX data rate
        If IsNumeric(xcvr_rxdata_rate_tb.value) And (xcvr_rxdata_rate_tb >= 0.5 And xcvr_rxdata_rate_tb <= 12.7) Then
        'Worksheets("Transceiver").Range("H" & ind).Interior.Color = RGB(255, 255, 255)
        Worksheets("Transceiver").Range(xcv_txdatarate_col & ind).Interior.Color = RGB(255, 255, 255)
        Else
            MsgBox "Invalid RX Data Rate. It range from 0.5 Gbps upto 12.7 Gbps"
            xcvr_validate = False
            'Worksheets("Transceiver").Range("H" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("Transceiver").Range(xcvr_rxdatarate_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
    
        'checking for valid number of lanes
        If IsNumeric(xcvr_lanes_tb.value) And (xcvr_lanes_tb > 0 And xcvr_lanes_tb < 5) Then
        'Worksheets("Transceiver").Range("F" & ind).Interior.Color = RGB(255, 255, 255)
        Worksheets("Transceiver").Range(xcvr_nlanes_col & ind).Interior.Color = RGB(255, 255, 255)
        Else
            MsgBox "Invalid Number of Lanes. It should be with in the range of 1 to 4."
            xcvr_validate = False
            'Worksheets("Transceiver").Range("F" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("Transceiver").Range(xcvr_nlanes_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        'checking for valid free row in Transceiver sheet to append data
        Dim check As Integer
        check = free_row(ActiveWorkbook.Worksheets("Transceiver"), 14, 37, "U", "Transceiver")
        If check = 38 Then
            MsgBox "Rows are exhausted to append data in Transceiver sheet."
            xcvr_validate = False
            'Exit Function
        End If
        
        'checking for dublicate IP name in manage IP list
        If module_name.value = "" Then
            module_name.value = protocol_preset.value & "/Transceiver_interface"
        End If
        If module_name_notused(module_name.value, "") Then
            MsgBox "Unable to create " & """" & module_name.value & """" & vbNewLine _
            & "An IP with that module name already exists."
            xcvr_validate = False
            'Worksheets("Transceiver").Range("B" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("Transceiver").Range(xcvr_name_str_col & ind).Interior.Color = RGB(255, 0, 0)
            'module_name.value = ""
            'Exit Function
        Else
        'Worksheets("Transceiver").Range("B" & ind).Interior.Color = RGB(255, 255, 255)
        Worksheets("Transceiver").Range(xcvr_name_str_col & ind).Interior.Color = RGB(255, 255, 255)
        End If
        
        Else
            MsgBox "Please select a Protocol for Transceiver configuration"
            validate = False
            Exit Function
    End If
    xcvr_validate = True
    
End Function

Private Sub xcvr_txdata_rate_tb_Change()

End Sub
Function MPESETTRANS(ByVal module_name_ As String, ByVal protocol_preset_ As String, ByVal xcvr_lanes_tb_ As Integer, ByVal operation_mode_ As String, ByVal xcvr_txdata_rate_tb_ As Double, ByVal pll_used_ As String, ByVal tx_amplitude_ As String, ByVal pcs_mode_ As String, ByVal pcs_width_ As Integer, ByVal hard_pcie_ As String)
         protocol_preset = protocol_preset_
         xcvr_txdata_rate_tb = xcvr_txdata_rate_tb_
         operation_mode = operation_mode_
         xcvr_lanes_tb = xcvr_lanes_tb_
         pll_used = pll_used_
         tx_amplitude = tx_amplitude_
         pcs_mode = pcs_mode_
         pcs_width = pcs_width_
         hard_pcie = hard_pcie_
         module_name = module_name_
         xcvr_create_button_Click
         
End Function

Private Sub xcvr_lanes_tb_Change()

End Sub

Private Sub xcvr_protocol_lb_Click()

End Sub


Attribute VB_Name = "export_report"
Attribute VB_Base = "0{38F6916B-A456-44B4-9EA1-8CDFE33B5AD0}{E8D746EC-C034-43F4-AEC5-5D8C928290F6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim disable_msg_boolean As Boolean

Private Sub Browse_Click()
     Dim fd As Office.FileDialog

    Set fd = Application.FileDialog(msoFileDialogFolderPicker)

    With fd

      .AllowMultiSelect = False

      ' Set the title of the dialog box.
      .Title = "Please select the file."

      If .Show = True Then
        fileNameBox = .SelectedItems(1) 'replace txtFileName with your textbox

      End If
   End With
End Sub

Private Sub Cancel_Click()
    Unload Me
End Sub

Private Sub Submit_Export_Click()
On Error Resume Next
    disable_msg_boolean = True
    a = ExportPowerReport(power:=P_Summary, BPower:=B_Power, BRail:=B_Rail, Resource:=R_Utilization, Thermal:=Thermal, FileLoc:=fileNameBox)
    If fileNameBox = "" Then
        MsgBox "No File Specified!"
    End If
End Sub

Function ExportPowerReport(Optional power = "False", Optional BPower = "False", Optional BRail = "False", Optional Resource = "False", Optional Thermal = "False", Optional FileLoc = ".")
    
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    Dim oFile As Object
    Version = Worksheets("dss_data").Range("J3")
    If FileLoc = "." Then
        FileLoc = ActiveWorkbook.Path
    End If
    'MsgBox FileLoc
    Set oFile = fso.CreateTextFile(FileLoc & "\MPE_Report.txt")
    
    oFile.WriteLine "Microsemi Power Estimator (MPE) - " & Version & " : " & Worksheets("Summary").Range("D11").value
    oFile.WriteLine ""
    oFile.WriteLine "Vendor: Microsemi Corporation"
    oFile.WriteLine "Date: " & Now
    oFile.WriteLine "Version: " & Version
    
    oFile.WriteLine ""
    
    oFile.WriteLine "Family: " & Space(15) & Worksheets("Summary").Range("D11").value
    oFile.WriteLine "Device: " & Space(15) & Worksheets("Summary").Range("Device").value
    oFile.WriteLine "Package: " & Space(14) & Worksheets("Summary").Range("Package").value
    oFile.WriteLine "Temperature Range: " & Space(4) & Worksheets("Summary").Range("Range").value
    oFile.WriteLine "Core Voltage: " & Space(9) & Worksheets("Summary").Range("D15").value
    oFile.WriteLine "Process: " & Space(14) & Worksheets("Summary").Range("D16").value
    oFile.WriteLine "Speed Grade: " & Space(10) & Worksheets("Summary").Range("D17").value
    oFile.WriteLine "Data State: " & Space(11) & Worksheets("Summary").Range("D18").value
    
    oFile.WriteLine ""
    If power = True Then
    oFile.WriteLine "Power Summary"
    oFile.WriteLine "+-------------------+------------+"
    oFile.WriteLine "|                   | Power (W)  |"
    oFile.WriteLine "+-------------------+------------+"
    oFile.WriteLine "| Total Power       | " & Worksheets("Summary").Range("I11").Text & Space(11 - Len(Worksheets("Summary").Range("I11").Text)) & "|"
    oFile.WriteLine "| Static Power      | " & Worksheets("Summary").Range("I12").Text & Space(11 - Len(Worksheets("Summary").Range("I12").Text)) & "|"
    oFile.WriteLine "| Dynamic Power     | " & Worksheets("Summary").Range("I13").Text & Space(11 - Len(Worksheets("Summary").Range("I13").Text)) & "|"
    oFile.WriteLine "| I/O Power         | " & Worksheets("Summary").Range("I14").Text & Space(11 - Len(Worksheets("Summary").Range("I14").Text)) & "|"
    oFile.WriteLine "| Transceiver Power | " & Worksheets("Summary").Range("I15").Text & Space(11 - Len(Worksheets("Summary").Range("I15").Text)) & "|"
    oFile.WriteLine "+-------------------+------------+"
    
    oFile.WriteLine ""
    End If
    
    If BPower = True Then
    oFile.WriteLine "Breakdown By Power"
    oFile.WriteLine "+-------------------+------------------+---------------+"
    oFile.WriteLine "| Resource          | Percentage (%)   | Power (W)     |"
    oFile.WriteLine "+-------------------+------------------+---------------+"
    Dim i As Integer
    For i = 23 To 23
        oFile.WriteLine "| " & Worksheets("Summary").Range("G" & i).Text & Space(18 - Len(Worksheets("Summary").Range("G" & i).Text)) & "| " & _
                               Worksheets("Summary").Range("I" & i).Text & Space(17 - Len(Worksheets("Summary").Range("I" & i).Text)) & "| " & _
                               Worksheets("Summary").Range("J" & i).Text & Space(14 - Len(Worksheets("Summary").Range("J" & i).Text)) & "|"
    Next
        oFile.WriteLine "| " & Worksheets("Summary").Range("G24").value & "| " & _
                               Worksheets("Summary").Range("I" & i).Text & Space(17 - Len(Worksheets("Summary").Range("I" & i).Text)) & "| " & _
                               Worksheets("Summary").Range("J" & i).Text & Space(14 - Len(Worksheets("Summary").Range("J" & i).Text)) & "|"
    For i = 25 To 31
        oFile.WriteLine "| " & Worksheets("Summary").Range("H" & i).Text & Space(18 - Len(Worksheets("Summary").Range("H" & i).Text)) & "| " & _
                               Worksheets("Summary").Range("I" & i).Text & Space(17 - Len(Worksheets("Summary").Range("I" & i).Text)) & "| " & _
                               Worksheets("Summary").Range("J" & i).Text & Space(14 - Len(Worksheets("Summary").Range("J" & i).Text)) & "|"
    Next
    oFile.WriteLine "| " & Worksheets("Summary").Range("G32").Text & " " & Worksheets("Summary").Range("H32").Text & Space(14 - Len(Worksheets("Summary").Range("H32").Text)) & "| " & _
                               Worksheets("Summary").Range("I32").Text & Space(17 - Len(Worksheets("Summary").Range("I32").Text)) & "| " & _
                               Worksheets("Summary").Range("J32").Text & Space(14 - Len(Worksheets("Summary").Range("J32").Text)) & "|"
    oFile.WriteLine "| " & Worksheets("Summary").Range("G32").Text & " " & Worksheets("Summary").Range("H33").Text & Space(14 - Len(Worksheets("Summary").Range("H33").Text)) & "| " & _
                               Worksheets("Summary").Range("I33").Text & Space(17 - Len(Worksheets("Summary").Range("I33").Text)) & "| " & _
                               Worksheets("Summary").Range("J33").Text & Space(14 - Len(Worksheets("Summary").Range("J33").Text)) & "|"
    oFile.WriteLine "| " & Worksheets("Summary").Range("G34").Text & Space(18 - Len(Worksheets("Summary").Range("G34").Text)) & "| " & _
                               Worksheets("Summary").Range("I34").Text & Space(17 - Len(Worksheets("Summary").Range("I34").Text)) & "| " & _
                               Worksheets("Summary").Range("J34").Text & Space(14 - Len(Worksheets("Summary").Range("J34").Text)) & "|"
                               
    oFile.WriteLine "+-------------------+------------------+---------------+"
    
    oFile.WriteLine ""
    End If
    
    If BRail = True Then
    oFile.WriteLine "Breakdown By Rail"
    oFile.WriteLine "+---------------+---------------+---------------+---------------+"
    oFile.WriteLine "| Rail Name     | Current (A)   | Voltage (V)   | Power (W)     |"
    oFile.WriteLine "+---------------+---------------+---------------+---------------+"
    For i = 21 To 34
        oFile.WriteLine "| " & Worksheets("Summary").Range("L" & i).Text & Space(14 - Len(Worksheets("Summary").Range("L" & i).Text)) & "| " & _
                               Worksheets("Summary").Range("M" & i).Text & Space(14 - Len(Worksheets("Summary").Range("M" & i).Text)) & "| " & _
                               Worksheets("Summary").Range("N" & i).Text & Space(14 - Len(Worksheets("Summary").Range("N" & i).Text)) & "| " & _
                               Worksheets("Summary").Range("O" & i).Text & Space(14 - Len(Worksheets("Summary").Range("O" & i).Text)) & "|"
    Next
    oFile.WriteLine "+---------------+---------------+---------------+---------------+"
    
    oFile.WriteLine ""
    End If
    
    If Resource = True Then
    oFile.WriteLine "Resource Utilization"
    oFile.WriteLine "+-------------------------------+---------------+---------------+----------------+"
    oFile.WriteLine "| Type                          | Used          | Total         | Percentage (%) |"
    oFile.WriteLine "+-------------------------------+---------------+---------------+----------------+"
    For i = 41 To 51
        oFile.WriteLine "| " & Worksheets("Summary").Range("L" & i).Text & Space(30 - Len(Worksheets("Summary").Range("L" & i).Text)) & "| " & _
                               Worksheets("Summary").Range("M" & i).Text & Space(14 - Len(Worksheets("Summary").Range("M" & i).Text)) & "| " & _
                               Worksheets("Summary").Range("N" & i).Text & Space(14 - Len(Worksheets("Summary").Range("N" & i).Text)) & "| " & _
                               Worksheets("Summary").Range("O" & i).Text & Space(15 - Len(Worksheets("Summary").Range("O" & i).Text)) & "|"
    Next
    oFile.WriteLine "+-------------------------------+---------------+---------------+----------------+"
    
    oFile.WriteLine ""
    End If
    
    If Thermal = True Then
    oFile.WriteLine "Thermal Summary"
    oFile.WriteLine "+-------------------------+---------------------------------+"
    oFile.WriteLine "| Junction Temperature is | defined by operating conditions |"
    oFile.WriteLine "+-------------------------+---------------------------------+"
    oFile.WriteLine "| " & "Temperature Range " & Space(6) & "| " & _
                               Worksheets("Summary").Range("D14").Text & Space(32 - Len(Worksheets("Summary").Range("D14").Text)) & "| "
    oFile.WriteLine "| " & "Junction Temperature " & Space(3) & "| " & _
                               Worksheets("Summary").Range("D26").Text & " C" & Space(30 - Len(Worksheets("Summary").Range("D26").Text)) & "|"
    
    Dim TempRange As String
    TempRange = Worksheets("Summary").Range("D14").value
    If TempRange = "Extended" Then
        temp = Worksheets("Summary").Range("D26").value
        If temp >= 0 And temp <= 100 Then
        oFile.WriteLine "| " & "Junction Temperature is " & "| " & _
                               "Within Range Limits" & Space(13) & "|"
        Else
        oFile.WriteLine "| " & "Junction Temperature is " & "| " & _
                               "Out of Range Limits" & Space(13) & "|"
        End If
    End If
    If TempRange = "Industrial" Then
        temp = Worksheets("Summary").Range("D26").value
        If temp >= -40 And temp <= 100 Then
        oFile.WriteLine "| " & "Junction Temperature is " & "| " & _
                               "Within Range Limits" & Space(13) & "|"
        Else
        oFile.WriteLine "| " & "Junction Temperature is " & "| " & _
                               "Out of Range Limits" & Space(13) & "|"
        End If
    End If
    
    oFile.WriteLine "+-------------------------+---------------------------------+"
    
    End If
    
    oFile.Close
    Set fso = Nothing
    Set oFile = Nothing
    If disable_msg_boolean = True Then
        MsgBox "Power Report File Succesfully exported at " & FileLoc & " as MPE_Report.txt"
    End If
    Unload Me
End Function


Attribute VB_Name = "import_mpe"
Attribute VB_Base = "0{F1B0BF77-5722-4567-9250-F6609D7B408A}{DB3F61E7-BF2E-49B9-96C1-4D183FEC94E8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim Erclk_freq As Boolean, Erlog_freq As Boolean, Elsram_PortAclk_freq As Boolean, Elsram_portBclk_freq As Boolean
Dim Eusram_wrtportclk_freq As Boolean, Eusram_rdportclk_freq As Boolean, Emathclk_freq As Boolean, Epll_freq As Boolean, Edll_freq As Boolean, Ecrypto_freq As Boolean
Dim clock_rows_exhaust As Boolean, logic_rows_exhaust As Boolean, Lsram_rows_exhaust As Boolean, usram_rows_exhaust As Boolean, math_rows_exhaust As Boolean
Dim io_rows_exhaust As Boolean, transceiver_rows_exhaust As Boolean, pll_rows_exhaust As Boolean, dll_rows_exhaust As Boolean, crypto_rows_exhaust As Boolean
Dim disable_msg_boolean As Boolean
Dim libero_version As String
'Dim pll_msg_12p0 As Boolean 'This flag is for message on pll data for 12.0 release
Dim device_settings_error As Boolean, thermal_settings_error As Boolean, voltage_source_error As Boolean, clock_error As Boolean, logic_error As Boolean, lsram_error As Boolean
Dim usram_error As Boolean, math_error As Boolean, pll_error As Boolean, dll_error As Boolean, io_error As Boolean, crypto_error As Boolean, transceiver_error As Boolean

Private Sub file_path_Change()

End Sub

Private Sub imp_append_data_Click()
    If imp_append_data.value = True Then
        
        Imp_device_settings.value = False
        Imp_thermal_inputs.value = False
        Imp_voltage_settings.value = False
        
    End If
End Sub

Private Sub imp_overwrite_data_Click()
    If imp_overwrite_data.value = True Then
        Imp_device_settings.value = True
        Imp_thermal_inputs.value = True
        Imp_voltage_settings.value = True
    End If
End Sub

Private Sub UserForm_Initialize()
    estimator_rb.value = True
    smartpower_rb.value = False
    imp_append_data.Enabled = False
    imp_overwrite_data.Enabled = False
     
End Sub
Private Sub smartpower_rb_Click()
    
    If smartpower_rb.value = True Then
        estimator_rb.value = False
        Imp_device_settings.Enabled = True
        Imp_thermal_inputs.Enabled = True
        Imp_voltage_settings.Enabled = True
        Imp_snapshots.Enabled = False
        
        imp_append_data.Enabled = True
        imp_overwrite_data.Enabled = True
        imp_overwrite_data.value = True
    
    End If
End Sub
Private Sub estimator_rb_Click()

    If estimator_rb.value = True Then
        smartpower_rb.value = False
        Imp_device_settings.Enabled = True
        Imp_thermal_inputs.Enabled = True
        Imp_voltage_settings.Enabled = True
        Imp_snapshots.Enabled = True
        
        imp_append_data.Enabled = False
        imp_overwrite_data.Enabled = False
        
        Imp_device_settings.value = True
        Imp_thermal_inputs.value = True
        Imp_voltage_settings.value = True
        
    End If
End Sub
 Private Sub estimator_browse()
     Dim owbn As String                  'owbn -> Old Work Book Name
         With Application.FileDialog(msoFileDialogOpen)
        .AllowMultiSelect = False
        .Filters.Clear
        .Filters.Add "MPE Exchange", "*.xls; *.xlsx; *.xlsm", 1
        .Show
         If .SelectedItems.Count = 1 Then
            owbn = .SelectedItems(1)
          Else
            owbn = ActiveWorkbook.Worksheets("dss_data").Range("I35").value 'click on cancel without selecting file it will take path stored in dss_data and shows in text box
          End If
    End With
    file_path.value = owbn                       'Storing the path of the file that is imported in the Text Box.
 End Sub
 Private Sub smartpower_browse()
    Dim file As String
     With Application.FileDialog(msoFileDialogOpen)
        .AllowMultiSelect = False
        .Filters.Clear
        .Filters.Add "MPE Exchange", "*.xml", 1
        .Show
        If .SelectedItems.Count = 1 Then
            file = .SelectedItems(1)
        End If
      End With
      file_path.value = file
End Sub
 
' sub -> browse_Click
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> click on Browse button it will open a window and allow to search for file which is going to be import.
Private Sub Browse_Click()
   
   If estimator_rb.value = True Then
        estimator_browse
   End If
   
    If smartpower_rb.value = True Then
        smartpower_browse
    End If
   
End Sub
' sub -> cancel_Click
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> click on cancel button it will close the Import dialogue window
Private Sub Cancel_Click()
    Unload Me
End Sub

' sub -> help_Click
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> click on help button it will give some help related to Import Feature
Private Sub help_Click()
    MsgBox Chr(149) & " Import existing Microsemi Power Estimator spreadsheet :" & vbNewLine _
    & "              Replace MPE content with the data from the specified MPE workbook." & vbNewLine _
    & "              Valuable to port your design to the latest available MPE version." & vbNewLine _
    & "              Device, Environment, Voltage and Snapshots information may be selectively included on import." & vbNewLine _
    & "              When importing data form an older device family, unavailable blocks or parameters may be skipped."
 '   & "              When importing data form an older device family, unavailable blocks or parameters may be skipped." & vbNewLine _
 '   & "              " & vbNewLine _
 '   & Chr(149) & "   Import power report from Libero SmartPower :" & vbNewLine _
 '   & "              The .xml file includes device, environment, resource usage, configuration and clock domain activities. " & vbNewLine _
 '   & "              You can select whether to append the imported data to existing data or to replace all MPE data. " & vbNewLine _
 '   & "              Device, Environment and Voltage information may be selectively included on import." & vbNewLine _
 '   & "              Replace MPE content with device utilization and activities extracted in the Libero SmartPower estimation report."
End Sub

' sub -> Import_Click
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> click on Import button it will perform Importing file which we select along with validation checking
Private Sub Import_Click()
    'disable_msg_boolean = False
   If estimator_rb.value = True Then
        import_estimator_click
   End If
   
    If smartpower_rb.value = True Then
        import_smartpower_click
    End If
    
End Sub
Private Sub clear_data_insheets()

    Application.Run "clear_summary"
    Application.Run "clear_clock"
    Application.Run "clear_logic"
    Application.Run "clear_lsram"
    Application.Run "clear_usram"
    Application.Run "clear_mathblock"
    Application.Run "clear_io"
    Application.Run "clear_pll_dll_osc"
    Application.Run "clear_misc"
    Application.Run "clear_Transceiver"
    Application.Run "clear_userfrom_data"
    
End Sub
Private Sub print_msg_and_errors()
    Dim msg As String, tmp As String, strcond As String
    msg = "Importing Smart Power report completed successfully." & vbCrLf
    
    If Erclk_freq Or Erlog_freq Or Elsram_PortAclk_freq Or Elsram_portBclk_freq Or Eusram_wrtportclk_freq Or Eusram_rdportclk_freq Or Emathclk_freq Or Epll_freq Or Edll_freq Or Ecrypto_freq Then
        tmp = vbCrLf & "Observations:" & vbCrLf
        strcond = ""
        
        If Erclk_freq Then
             strcond = "Clock "
             tmp = tmp & strcond
        End If
    
        If Erlog_freq Then
             strcond = "logic "
             tmp = tmp & strcond
        End If
        
        If Elsram_PortAclk_freq Or Elsram_portBclk_freq Then
             strcond = "LSRAM memory "
             tmp = tmp & strcond
        End If
        
        If Eusram_wrtportclk_freq Or Eusram_rdportclk_freq Then
             strcond = "USRAM memory "
             tmp = tmp & strcond
        End If
        
        If Emathclk_freq Then
             strcond = "Math "
             tmp = tmp & strcond
        End If
        
        If Epll_freq Then
             strcond = "PLL "
             tmp = tmp & strcond
        End If
        
        If Edll_freq Then
             strcond = "DLL "
             tmp = tmp & strcond
        End If
        
        If Ecrypto_freq Then
             strcond = "Crypto "
             tmp = tmp & strcond
        End If
        
        tmp = tmp & "frequencies used in the design exceeds allowed frequency values." & vbCrLf
    
        msg_1 = msg & vbCrLf & tmp & vbCrLf
    End If
    
    
    If clock_rows_exhaust Or logic_rows_exhaust Or Lsram_rows_exhaust Or usram_rows_exhaust Or math_rows_exhaust Or io_rows_exhaust Or transceiver_rows_exhaust Or pll_rows_exhaust Or dll_rows_exhaust Or crypto_rows_exhaust Then
        temp2 = vbCrLf & "In "
        strcond = ""
        
        If clock_rows_exhaust Then
             strcond = "Clock "
             temp2 = temp2 & strcond
        End If
        If logic_rows_exhaust Then
             strcond = "Logic "
             temp2 = temp2 & strcond
        End If
        If Lsram_rows_exhaust Then
             strcond = "LSRAM "
             temp2 = temp2 & strcond
        End If
        If usram_rows_exhaust Then
             strcond = "uSRAM "
             temp2 = temp2 & strcond
        End If
        If math_rows_exhaust Then
             strcond = "Math "
             temp2 = temp2 & strcond
        End If
        If io_rows_exhaust Then
             strcond = "IO "
             temp2 = temp2 & strcond
        End If
        If transceiver_rows_exhaust Then
             strcond = "Transceiver "
             temp2 = temp2 & strcond
        End If
        If pll_rows_exhaust Then
             strcond = "PLL "
             temp2 = temp2 & strcond
        End If
        If dll_rows_exhaust Then
             strcond = "DLL "
             temp2 = temp2 & strcond
        End If
        If crypto_rows_exhaust Then
             strcond = "Crypto "
             temp2 = temp2 & strcond
        End If
        
        temp2 = temp2 & "sheets rows are exhausted to append data so data in these sheets are skipped."
        
        msg = msg_1 & temp2 & vbCrLf
    End If
        
    
'    If pll_msg_12p0 Then 'we are not importing PLL data for v12.0 MPE reports due to SAR-104700. So msg for user
'        pll_msg = "Please enter PLL block details. "
'
'        msg = pll_msg & vbCrLf & msg & vbCrLf
'    End If
    
    
    If device_settings_error Or thermal_settings_error Or voltage_source_error Or clock_error Or logic_error Or lsram_error Or usram_error Or math_error Or pll_error Or dll_error Or io_error Or crypto_error Or transceiver_error Then
        
        temp3 = vbCrLf & "Error observed in "
        trcond = ""
        
        If device_settings_error Then
             trcond = "Device settings, "
             temp3 = temp3 & trcond
        End If
        If thermal_settings_error Then
             trcond = "Thermal settings, "
             temp3 = temp3 & trcond
        End If
        If voltage_source_error Then
             trcond = "Voltage settings, "
             temp3 = temp3 & trcond
        End If
        If clock_error Then
             trcond = "Clock, "
             temp3 = temp3 & trcond
        End If
        If logic_error Then
             trcond = "Logic, "
             temp3 = temp3 & trcond
        End If
        If lsram_error Then
             trcond = "LSRAM, "
             temp3 = temp3 & trcond
        End If
        If usram_error Then
             trcond = "uSRAM, "
             temp3 = temp3 & trcond
        End If
        If math_error Then
             trcond = "Math, "
             temp3 = temp3 & trcond
        End If
        If pll_error Then
             trcond = "PLL, "
             temp3 = temp3 & trcond
        End If
        If dll_error Then
             trcond = "DLL, "
             temp3 = temp3 & trcond
        End If
        If io_error Then
             trcond = "IO, "
             temp3 = temp3 & trcond
        End If
        If crypto_error Then
             trcond = "Crypto, "
             temp3 = temp3 & trcond
        End If
        If transceiver_error Then
             trcond = "Transceiver "
             temp3 = temp3 & trcond
        End If
        
        temp3 = temp3 & " so these details are skipped, please enter these details." & vbCrLf
        
         msg = msg & vbCrLf & temp3
        
    End If
    
    If disable_msg_boolean <> True Then
        MsgBox msg
    End If
    
End Sub
Private Sub import_smartpower_click()
    Dim import_status As Boolean
    
    If validate_sp_file Then
               
        Application.ScreenUpdating = False
        Application.DisplayAlerts = False
        ThisWorkbook.Application.EnableEvents = False
        Application.Calculation = xlCalculationManual
        
        
        status = read_sp_file 'read xml file sub and read status
        
        Application.ScreenUpdating = True
        Application.DisplayAlerts = True
        ThisWorkbook.Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Application.Calculate
        
        If status = True Then
            ComputeThermalPower
            print_msg_and_errors
          '  MsgBox "Importing Smart Power report completed successfully." & vbNewLine _
          '   & "    All the clock and resource frequencies exceeding maximum allowed limit are set to maximum frequency value."
            Unload Me
        End If
    End If
    
End Sub
'This sub will check all the validations on the sp exported report file, return true if all conditions are satisfied.
Private Function validate_sp_file() As Boolean
    
    If Dir(file_path.value) = "" Then 'Checking for importing File present in Disk or not
        If disable_msg_boolean <> True Then
            MsgBox "File Not Exists!"
        End If
        validate_sp_file = False
        Exit Function
    End If
    
    If file_path.value = "" Then       'Dir will not check for empty string so checking for importing File empty or not
        If disable_msg_boolean <> True Then
            MsgBox "No File Specified!"
        End If
        validate_sp_file = False
        Exit Function
    End If
    
    validate_sp_file = True
    
End Function
Private Function read_sp_file() As Boolean
    
    Dim txtFileName As String
    Dim txtFileLine As String
    Dim txtFileNumber As Long
    Dim irow As Integer, icol As Integer, hcount As Integer
    Dim headarr() As String, rowarr() As String
        Dim info_header() As String, info_row() As String, devicesettings_header() As String, devicesettings_row() As String, thermal_header() As String, thermal_row() As String
        Dim voltage_header() As String, voltage_row() As String, clock_header() As String, clock_row() As String, logic_header() As String, logic_row() As String
        Dim lsram_header() As String, lsram_row() As String, usram_header() As String, usram_row() As String, math_header() As String, math_row() As String
        Dim pll_header() As String, pll_row() As String, dll_header() As String, dll_row() As String, crypto_header() As String, crypto_row() As String
        Dim io_header() As String, io_row() As String, xcvr_header() As String, xcvr_row() As String
        Dim info_exist As Boolean, devicesettings_exist As Boolean, thermal_exist As Boolean, voltage_exist As Boolean, clock_exist As Boolean, logic_exist As Boolean, lsram_exist As Boolean
        Dim logic_breakdown_exist As Boolean, lsram_breakdown_exist As Boolean, usram_breakdown_exist As Boolean
        Dim usram_exist As Boolean, math_exist As Boolean, pll_exist As Boolean, dll_exist As Boolean, crypto_exist As Boolean, io_exist As Boolean, xcvr_exist As Boolean
    
    On Error GoTo ErrorHandler  'error handler
    
    txtFileNumber = FreeFile
    txtFileName = file_path.value

    Open txtFileName For Input As #txtFileNumber

    Do While Not EOF(txtFileNumber)
        Line Input #txtFileNumber, txtFileLine
        
         If InStr(txtFileLine, "<title>") Then ' checking title of the report
            If InStr(txtFileLine, "Smartpower Settings for Design") Then 'checking for MPE xml or not
            Else
                If disable_msg_boolean <> True Then
                    MsgBox "Invalid file."
                End If
                read_sp_file = False 'status as false for invalid files
                Exit Function
            End If
        End If
        
        If InStr(txtFileLine, "<section><name>") Then
            title_sheet = rem_cell(txtFileLine, "title") ' removing <section><name>
            Line Input #txtFileNumber, txtFileLine
        End If
        
        If txtFileLine = "<table>" Then
            Do While txtFileLine <> "</table>"
                Line Input #txtFileNumber, txtFileLine
                If txtFileLine = "<header>" Then
                    'irow = 0
                    'icol = 0
                    hcount = -1
                    Do While txtFileLine <> "</header>"
                        Line Input #txtFileNumber, txtFileLine
                        
                        If InStr(txtFileLine, "<cell>") Then
                            strng = rem_cell(txtFileLine, "cell") ' removing <cell> & </cell>
                            hcount = hcount + 1
                            ReDim Preserve headarr(hcount)
                            headarr(hcount) = strng
                        'Else
                           ' Exit Do
                        End If
                        'icol = icol + 1
                    Loop
                End If
                
                icol = 0
                
                If hcount = -1 Then
                    If (title_sheet = "Device Settings") Or (title_sheet = "Thermal Settings") Or (title_sheet = "") Then
                        hcount = 1
                    End If
                End If
                
                ReDim Preserve rowarr(hcount, icol)
                    
                Line Input #txtFileNumber, txtFileLine
                Do While txtFileLine <> "</table>"
                If txtFileLine = "<row>" Then
                    irow = 0
                    Line Input #txtFileNumber, txtFileLine
                    Do While txtFileLine <> "</row>"
            
                        If InStr(txtFileLine, "<cell>") Then
                            strng = rem_cell(txtFileLine, "cell")
                            rowarr(irow, icol) = strng
                        End If
                        If irow < hcount + 1 Then irow = irow + 1
                        Line Input #txtFileNumber, txtFileLine
                    Loop
                End If
                Line Input #txtFileNumber, txtFileLine
                If txtFileLine <> "</table>" Then
                    icol = icol + 1
                    ReDim Preserve rowarr(hcount, icol)
                End If
                Loop
                
            Loop
        End If
            
        If (txtFileLine = "</table>") Then
        If (irow <> 0) Then ' irow<>0 condition is to validate a table which has header but not data
  
            Select Case title_sheet
                Case ""
                    info_header = headarr
                    info_row = rowarr
                    info_exist = True
                Case "Device Settings"
                    devicesettings_header = headarr
                    devicesettings_row = rowarr
                    devicesettings_exist = True
                Case "Thermal Settings"
                    thermal_header = headarr
                    thermal_row = rowarr
                    thermal_exist = True
                Case "Voltage Sources"
                    voltage_header = headarr
                    voltage_row = rowarr
                    voltage_exist = True
                Case "Clocks"
                    clock_header = headarr
                    clock_row = rowarr
                    clock_exist = True
                Case "Logic"
                    logic_header = headarr
                    logic_row = rowarr
                    logic_exist = True
                Case "Logic Breakdown"
                    logic_header = headarr
                    logic_row = rowarr
                    logic_breakdown_exist = True
                Case "LSRAM"
                    lsram_header = headarr
                    lsram_row = rowarr
                    lsram_exist = True
                Case "LSRAM Breakdown with Advanced Settings"
                    lsram_header = headarr
                    lsram_row = rowarr
                    lsram_breakdown_exist = True
                Case "uSRAM"
                    usram_header = headarr
                    usram_row = rowarr
                    usram_exist = True
                Case "uSRAM Breakdown with Advanced Settings"
                    usram_header = headarr
                    usram_row = rowarr
                    usram_exist = True
                Case "Math"
                    math_header = headarr
                    math_row = rowarr
                    math_exist = True
                Case "Math Breakdown with Advanced Settings"
                    math_header = headarr
                    math_row = rowarr
                    math_exist = True
                Case "PLL"
                    pll_header = headarr
                    pll_row = rowarr
                    pll_exist = True
                Case "DLL"
                    dll_header = headarr
                    dll_row = rowarr
                    dll_exist = True
                Case "Crypto"
                    crypto_header = headarr
                    crypto_row = rowarr
                    crypto_exist = True
                Case "IO&apos;s"
                    io_header = headarr
                    io_row = rowarr
                    io_exist = True
                Case "Transceivers"
                    xcvr_header = headarr
                    xcvr_row = rowarr
                    xcvr_exist = True
            End Select
          End If
            Erase headarr
            Erase rowarr
            irow = 0
            
        End If


    Loop
    
    'Close txtFileNumber
        
    If txtFileLine = "</doc>" Then
        Close txtFileNumber
        
        'Get the libero_version form the info table.
        libero_version = info_row(1, 2)
        
        If imp_overwrite_data.value = True Then
            clear_data_insheets      ' clear all the data before import if user selected import overwrite option
        End If
        
       If devicesettings_exist Then
            If Imp_device_settings.value = True Then    'check for advance options settings
                res_sum_device = print_sum_devicesettings(devicesettings_header, devicesettings_row)
                    
                    'check for illegal device i.e Not supported device.
                    If res_sum_device = False Then
                        read_sp_file = False 'status as false for invalid files
                        Exit Function
                    End If
            End If
        End If
        If voltage_exist Then
            If Imp_voltage_settings = True Then     'check for advance options settings
                print_sum_voltage voltage_header, voltage_row
            End If
        End If
        If thermal_exist Then
            If Imp_thermal_inputs = True Then       'check for advance options settings
                print_sum_thermal thermal_header, thermal_row
            End If
        End If
        If clock_exist Then
            print_clock clock_header, clock_row
        End If
        If logic_exist Then
            print_logic logic_header, logic_row
        End If
        If logic_breakdown_exist Then
            print_logic_breakdown logic_header, logic_row
        End If
        If lsram_exist Then
            print_lsram lsram_header, lsram_row
        End If
        If lsram_breakdown_exist Then
            print_lsram_breakdown lsram_header, lsram_row
        End If
        If usram_exist Then
            print_usram usram_header, usram_row
        End If
        If math_exist Then
            print_math math_header, math_row
        End If
        If pll_exist Then
            'If InStr(libero_version, "12.500.0") Then 'we are not importing PLL data for v12.0 MPE reports due to SAR-104700
           '     pll_msg_12p0 = True
           ' Else
                print_pll pll_header, pll_row
           ' End If
        End If
        If dll_exist Then
            print_dll dll_header, dll_row
        End If
        If crypto_exist Then
            print_crypto crypto_header, crypto_row
        End If
        If io_exist Then
            print_io io_header, io_row
        End If
        If xcvr_exist Then
            print_xcvr xcvr_header, xcvr_row
        End If
        
        read_sp_file = True 'after successfull importing data send status as true
        Exit Function
    End If
    
    If info_exist = False And devicesettings_exist = False And thermal_exist = False And voltage_exist = False And clock_exist = False And logic_exist = False And lsram_exist = False And usram_exist = False And math_exist = False And pll_exist = False And dll_exist = False And crypto_exist = False And io_exist = False And xcvr_exist = False Then
        If disable_msg_boolean <> True Then
            MsgBox "Invalid file."
        End If
        read_sp_file = False 'status as false for invalid files
        Exit Function
        'Unload Me
    End If
    
ErrorHandler:
        If disable_msg_boolean <> True Then
            out = MsgBox("Something went wrong while importing. So unable to complete import process. Please check the imported file or export the report from Libero-Smartpower and import.", vbCritical, "Error occured while importing:")
        End If
End Function

Public Sub QuickSortArray(ByVal sort_type As String, ByRef SortArray As Variant, Optional lngMin As Long = -1, Optional lngMax As Long = -1, Optional lngColumn As Long = 0)
    On Error Resume Next

     Dim i As Long
    Dim j As Long
    Dim varMid As Variant
    Dim arrRowTemp As Variant
    Dim lngColTemp As Long

    If IsEmpty(SortArray) Then
        Exit Sub
    End If
    If InStr(TypeName(SortArray), "()") < 1 Then  'IsArray() is somewhat broken: Look for brackets in the type name
        Exit Sub
    End If
    If lngMin = -1 Then
        lngMin = LBound(SortArray, 1)
    End If
    If lngMax = -1 Then
        lngMax = UBound(SortArray, 1)
    End If
    If lngMin >= lngMax Then    ' no sorting required
        Exit Sub
    End If

    i = lngMin
    j = lngMax

    varMid = Empty
    varMid = SortArray((lngMin + lngMax) \ 2, lngColumn)

    ' We  send 'Empty' and invalid data items to the end of the list:
    If IsObject(varMid) Then  ' note that we don't check isObject(SortArray(n)) - varMid *might* pick up a valid default member or property
        i = lngMax
        j = lngMin
    ElseIf IsEmpty(varMid) Then
        i = lngMax
        j = lngMin
    ElseIf IsNull(varMid) Then
        i = lngMax
        j = lngMin
    ElseIf varMid = "" Then
        i = lngMax
        j = lngMin
    ElseIf VarType(varMid) = vbError Then
        i = lngMax
        j = lngMin
    ElseIf VarType(varMid) > 17 Then
        i = lngMax
        j = lngMin
    End If

    While i <= j
    If sort_type = "int_sort" Then
        While CLng(SortArray(i, lngColumn)) > varMid And i < lngMax
            i = i + 1
        Wend
        While varMid > CLng(SortArray(j, lngColumn)) And j > lngMin
            j = j - 1
        Wend
    End If
    
    If sort_type = "str_sort" Then
        While LCase(SortArray(i, lngColumn)) < LCase(CStr(varMid)) And i < lngMax
            i = i + 1
        Wend
        While LCase(CStr(varMid)) < LCase(SortArray(j, lngColumn)) And j > lngMin
            j = j - 1
        Wend
    End If
        
        If i <= j Then
            ' Swap the rows
            ReDim arrRowTemp(LBound(SortArray, 2) To UBound(SortArray, 2))
            For lngColTemp = LBound(SortArray, 2) To UBound(SortArray, 2)
                arrRowTemp(lngColTemp) = SortArray(i, lngColTemp)
                SortArray(i, lngColTemp) = SortArray(j, lngColTemp)
                SortArray(j, lngColTemp) = arrRowTemp(lngColTemp)
            Next lngColTemp
            Erase arrRowTemp

            i = i + 1
            j = j - 1
        End If
    Wend

    If (lngMin < j) Then Call QuickSortArray(sort_type, SortArray, lngMin, j, lngColumn)
    If (i < lngMax) Then Call QuickSortArray(sort_type, SortArray, i, lngMax, lngColumn)
'Debug.Print ("Done")
'Range("A14:D17") = SortArray
End Sub

Private Sub print_clock(ByRef arr_header() As String, ByRef arr_row() As String)
    'a = UBound(arr_row, 1)    b = UBound(arr_row, 2)
Dim row As Integer, status As Boolean
Dim temp_arr() As Variant

On Error GoTo CLKErrorsection

    If imp_append_data.value = True Then
        row = free_row(ActiveWorkbook.Worksheets("Clock"), 12, 511, "L", "Clock") 'Get free row to append data in clock sheet
    Else
        row = 12
    End If
    
    temp_arr = Application.WorksheetFunction.Transpose(arr_row)
    
    QuickSortArray "int_sort", temp_arr, , , 4
    
    temp_arr = Application.WorksheetFunction.Transpose(temp_arr)
    
    For i = LBound(temp_arr, 2) To UBound(temp_arr, 2)
        For j = LBound(temp_arr, 1) To UBound(temp_arr, 1)
            'MsgBox arr_row(j, i)
            
            Select Case j
                Case 1
                    clk_name = temp_arr(j, i)
                Case 2
                    clk_freq = temp_arr(j, i)
                Case 3
                    clk_type = temp_arr(j, i)
                Case 4
                    clk_fanout = temp_arr(j, i)
                Case 5
                    clk_enrate = temp_arr(j, i)
            End Select
        Next
        status = clock_validate(clk_freq, clk_type, clk_name, clk_fanout)
        
        If row > 511 Then
            clock_rows_exhaust = True
            Exit Sub
        End If
        
        If status = True Then
'            Worksheets("Clock").Range("B" & row).value = clk_name
'            Worksheets("Clock").Range("E" & row).value = clk_freq
'            clk_type = Application.WorksheetFunction.IfError(Application.VLookup(clk_type, Worksheets("Clock").Range("AT17:AU20").value, 2, False), "Global")
'            Worksheets("Clock").Range("F" & row).value = clk_type
'            Worksheets("Clock").Range("G" & row).value = clk_fanout
'            Worksheets("Clock").Range("H" & row).value = clk_enrate & "%"
            
            Worksheets("Clock").Range(clock_name_str_col & row).value = clk_name
            Worksheets("Clock").Range(clock_freq_col & row).value = clk_freq
            clk_type = Application.WorksheetFunction.IfError(Application.VLookup(clk_type, Worksheets("Clock").Range("AT17:AU20").value, 2, False), "Global")
            Worksheets("Clock").Range(clock_clktype_col & row).value = clk_type
            Worksheets("Clock").Range(clock_fanout_col & row).value = clk_fanout
            Worksheets("Clock").Range(clock_enrate_col & row).value = clk_enrate & "%"
            
            row = row + 1 ' increment row
        End If
    Next
 
 Exit Sub

CLKErrorsection:
        clock_error = True

End Sub
Private Function clock_validate(ByVal clkfreq As Double, ByVal clktype As String, ByVal clkname As String, ByVal clkfanout As Long) As Boolean
    
    If ((clktype = "Global" Or clktype = "Regional (ICLK)" Or clktype = "Regional (LCLK)") And (clkfreq >= 0 And clkfreq <= 550)) Then
        clock_validate = True
        Erclk_freq = False
    ElseIf (clktype = "Bank Clock" And (clkfreq > 0 And clkfreq <= 1250)) Then 'Bank Clock
        clock_validate = True
        Erclk_freq = False
    Else
        clock_validate = True
        Erclk_freq = True
    End If
        
    If clkfanout = 0 Then
        clkname = UCase(clkname)
        If InStr(clkname, "HS_IO_CLK") Or InStr(clkname, "PLL") Or InStr(clkname, "DLL") Or InStr(clkname, "XCVR") Then
            clock_validate = True
        Else
            clock_validate = False
        End If
    Else
        clock_validate = True
    End If
    
End Function
Private Sub print_logic(ByRef arr_header() As String, ByRef arr_row() As String)
    'a = UBound(arr_row, 1)    b = UBound(arr_row, 2)
Dim row As Integer, status As Boolean, log_freq As Double
    If imp_append_data.value = True Then
        row = free_row(ActiveWorkbook.Worksheets("Logic"), 9, 508, "J", "Logic") 'Get free row to append data in logic sheet
    Else
        row = 9
    End If
    
On Error GoTo LogicErrorsection
    
    For i = LBound(arr_row, 2) To UBound(arr_row, 2)
        For j = LBound(arr_row, 1) To UBound(arr_row, 1)
                        
            Select Case j
                Case 0
                    log_name = arr_row(j, i)
                Case 1
                    log_freq = arr_row(j, i)
                Case 2
                    log_dff = arr_row(j, i)
                Case 3
                    log_lut = arr_row(j, i)
                Case 4
                    log_fanout = arr_row(j, i)
                Case 5
                    log_togglerate = arr_row(j, i)
            End Select
        Next
        status = logic_validate(log_freq)
        
        If row > 508 Then
            logic_rows_exhaust = True
            Exit Sub
        End If
        
        If status = True Then
'            Worksheets("Logic").Range("B" & row).value = log_name
'            Worksheets("Logic").Range("E" & row).value = log_freq
'            Worksheets("Logic").Range("F" & row).value = log_dff
'            Worksheets("Logic").Range("G" & row).value = log_lut
'            Worksheets("Logic").Range("H" & row).value = log_fanout
'            Worksheets("Logic").Range("I" & row).value = log_togglerate & "%"
            Worksheets("Logic").Range(logic_name_str_col & row).value = log_name
            Worksheets("Logic").Range(logic_freq_col & row).value = log_freq
            Worksheets("Logic").Range(logic_dff_col & row).value = log_dff
            Worksheets("Logic").Range(logic_lut_col & row).value = log_lut
            Worksheets("Logic").Range(logic_fanout_col & row).value = log_fanout
            Worksheets("Logic").Range(logic_tgrate_col & row).value = log_togglerate & "%"
            
            row = row + 1 ' increment row
        End If
    Next
    
Exit Sub
    
LogicErrorsection:
        logic_error = True
    
End Sub
Private Sub print_logic_breakdown(ByRef arr_header() As String, ByRef arr_row() As String)
    
    Dim row As Integer, status As Boolean, log_freq As Double, log_power As Double
    Dim log_name As String, prev_log_freq As Double, log_togglerate As Double, prev_log_togglerate As Double
    Dim log_resource As String
    Dim log_count As Double, log_fanout As Double, log_f01 As Double, log_fo2 As Double, log_fo3 As Double, log_fo4 As Double, log_fo5 As Double, log_fogt5 As Double
    Dim prev_log_name As String
    Dim logic_coll_fanout As New Collection, logic_coll_count As New Collection, logic_coll_toggle As New Collection
    
On Error GoTo LogicErrorsection
    
    If imp_append_data.value = True Then
        row = free_row(ActiveWorkbook.Worksheets("Logic"), 9, 508, "J", "Logic") 'Get free row to append data in logic sheet
    Else
        row = 9
    End If
    
    prev_log_name = ""
    For i = LBound(arr_row, 2) To UBound(arr_row, 2)
        For j = LBound(arr_row, 1) To UBound(arr_row, 1)
                        
            Select Case j
                Case 0
                    log_name = arr_row(j, i)
                Case 1
                    log_freq = arr_row(j, i)
                Case 2
                    log_power = arr_row(j, i)
                Case 3
                    If arr_row(j, i) = "-nan" Then
                        log_togglerate = 0.125
                    Else
                        log_togglerate = arr_row(j, i)
                    End If
                Case 4
                    log_resource = arr_row(j, i)
                Case 5
                    log_fo1 = arr_row(j, i)
                Case 6
                    log_fo2 = arr_row(j, i)
                Case 7
                    log_fo3 = arr_row(j, i)
                Case 8
                    log_fo4 = arr_row(j, i)
                Case 9
                    log_fo5 = arr_row(j, i)
                Case 10
                    log_fogt5 = arr_row(j, i)
            End Select
        Next
        status = logic_validate(log_freq)
        
        log_count = log_fo1 + log_fo2 + log_fo3 + log_fo4 + log_fo5 + log_fogt5
        If log_count > 0 Then
            log_fanout = (log_fo1 * 1 + log_fo2 * 2 + log_fo3 * 3 + log_fo4 * 4 + log_fo5 * 5 + log_fogt5 * 6) / (log_count)
        Else
            log_fanout = 0
        End If
        
        If i = UBound(arr_row, 2) Then
            logic_coll_fanout.Add Item:=log_fanout, key:=log_resource
            logic_coll_count.Add Item:=log_count, key:=log_resource
            logic_coll_toggle.Add Item:=log_togglerate, key:=log_resource
        End If
        
        If (prev_log_name <> log_name Or i = UBound(arr_row, 2)) Then
            If prev_log_name <> "" Then
                log_lut = logic_coll_count("CFG1") + logic_coll_count("CFG2") + logic_coll_count("CFG3") + logic_coll_count("CFG4") + logic_coll_count("ARI1_CC")
                log_dff = logic_coll_count("DFF")
                If log_lut > 0 Then
                    log_fanout_lut = (logic_coll_count("CFG1") * logic_coll_fanout("CFG1") + logic_coll_count("CFG2") * logic_coll_fanout("CFG2") + logic_coll_count("CFG3") * logic_coll_fanout("CFG3") + logic_coll_count("CFG4") * logic_coll_fanout("CFG4") + logic_coll_count("ARI1_CC") * logic_coll_fanout("ARI1_CC")) / log_lut
                    log_toggle_lut = (logic_coll_count("CFG1") * logic_coll_toggle("CFG1") + logic_coll_count("CFG2") * logic_coll_toggle("CFG2") + logic_coll_count("CFG3") * logic_coll_toggle("CFG3") + logic_coll_count("CFG4") * logic_coll_toggle("CFG4") + logic_coll_count("ARI1_CC") * logic_coll_toggle("ARI1_CC")) / log_lut
                Else
                    log_fanout_lut = 0
                    log_toggle_lut = 0
                End If
                If log_dff > 0 Then
                    log_fanout_dff = logic_coll_fanout("DFF")
                    log_toggle_dff = logic_coll_toggle("DFF")
                Else
                    log_fanout_dff = 0
                    log_toggle_dff = 0
                End If
                
                If row >= 508 Then
                    logic_rows_exhaust = True
                    Exit Sub
                End If
                
                If status = True Then
'                    Worksheets("Logic").Range("B" & row).value = prev_log_name
'                    Worksheets("Logic").Range("E" & row).value = prev_log_freq
'                    Worksheets("Logic").Range("G" & row).value = log_lut
'                    Worksheets("Logic").Range("H" & row).value = log_fanout_lut
'                    Worksheets("Logic").Range("I" & row).value = log_toggle_lut & "%"
'                    row = row + 1 ' increment row
'                    Worksheets("Logic").Range("B" & row).value = prev_log_name
'                    Worksheets("Logic").Range("E" & row).value = prev_log_freq
'                    Worksheets("Logic").Range("F" & row).value = log_dff
'                    Worksheets("Logic").Range("H" & row).value = log_fanout_dff
'                    Worksheets("Logic").Range("I" & row).value = log_toggle_dff & "%"
                    Worksheets("Logic").Range(logic_name_str_col & row).value = prev_log_name
                    Worksheets("Logic").Range(logic_freq_col & row).value = prev_log_freq
                    Worksheets("Logic").Range(logic_lut_col & row).value = log_lut
                    Worksheets("Logic").Range(logic_fanout_col & row).value = log_fanout_lut
                    Worksheets("Logic").Range(logic_tgrate_col & row).value = log_toggle_lut & "%"
                    row = row + 1 ' increment row
                    Worksheets("Logic").Range(logic_name_str_col & row).value = prev_log_name
                    Worksheets("Logic").Range(logic_freq_col & row).value = prev_log_freq
                    Worksheets("Logic").Range(logic_dff_col & row).value = log_dff
                    Worksheets("Logic").Range(logic_fanout_col & row).value = log_fanout_dff
                    Worksheets("Logic").Range(logic_tgrate_col & row).value = log_toggle_dff & "%"
                    
                    row = row + 1 ' increment row
                End If
                
            End If
            Set logic_coll_count = Nothing
            Set logic_coll_fanout = Nothing
            Set logic_coll_toggle = Nothing
        End If
        logic_coll_fanout.Add Item:=log_fanout, key:=log_resource
        logic_coll_count.Add Item:=log_count, key:=log_resource
        logic_coll_toggle.Add Item:=log_togglerate, key:=log_resource
        prev_log_name = log_name
        prev_log_freq = log_freq
        prev_log_togglerate = log_togglerate
        
    Next
    
 Exit Sub
 
LogicErrorsection:
        logic_error = True
    
End Sub
Private Function logic_validate(ByRef logfreq As Double) As Boolean
        
    If Not (logfreq >= 0 And logfreq <= 550) Then
        'logic_validate = False
        Erlog_freq = True
       ' Exit Function
        
    End If
    
    logic_validate = True
    
End Function
Private Sub print_lsram(ByRef arr_header() As String, ByRef arr_row() As String)
    
Dim row As Integer, status As Boolean, lsram_Aclk As Double, lsram_Bclk As Double, lsram_Awidth As Integer, lsram_Bwidth As Integer
    
On Error GoTo LsramErrorsection

    If imp_append_data.value = True Then
        row = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM") 'Get free row to append data in lsram sheet
    Else
        row = 9
    End If
    
    For i = LBound(arr_row, 2) To UBound(arr_row, 2)
        For j = LBound(arr_row, 1) To UBound(arr_row, 1)
            'MsgBox arr_row(j, i)
            
            Select Case j
                Case 0
                    lsram_name = arr_row(j, i)
                Case 1
                    lsram_blocks = arr_row(j, i)
                Case 2
                    lsram_Awidth = arr_row(j, i)
                Case 3
                    lsram_Aclk = arr_row(j, i)
                Case 4
                    lsram_Awrtrate = arr_row(j, i)
                Case 5
                    lsram_Aenrate = arr_row(j, i)
                Case 6
                    lsram_Bwidth = arr_row(j, i)
                Case 7
                    lsram_Bclk = arr_row(j, i)
                Case 8
                    lsram_Bwrtrate = arr_row(j, i)
                Case 9
                    lsram_Benrate = arr_row(j, i)
                Case 10
                    lsram_togglerate = arr_row(j, i)
            End Select
        Next
        status = lsram_validate(lsram_blocks, lsram_Aclk, lsram_Bclk)
        
        If row > 250 Then
            Lsram_rows_exhaust = True
            Exit Sub
        End If
        
        If status = True Then
'            Worksheets("LSRAM").Range("B" & row).value = lsram_name
'            Worksheets("LSRAM").Range("E" & row).value = lsram_blocks
'            lsram_Awidth = Application.WorksheetFunction.IfError(Application.VLookup(lsram_Awidth, Worksheets("LSRAM").Range("DP15:DQ21").value, 2, False), "20")
'            Worksheets("LSRAM").Range("F" & row).value = lsram_Awidth
'            Worksheets("LSRAM").Range("G" & row).value = lsram_Aclk
'            Worksheets("LSRAM").Range("H" & row).value = lsram_Awrtrate & "%"
'            Worksheets("LSRAM").Range("I" & row).value = lsram_Aenrate & "%"
'            lsram_Bwidth = Application.WorksheetFunction.IfError(Application.VLookup(lsram_Bwidth, Worksheets("LSRAM").Range("DP15:DQ21").value, 2, False), "20")
'            Worksheets("LSRAM").Range("J" & row).value = lsram_Bwidth
'            Worksheets("LSRAM").Range("K" & row).value = lsram_Bclk
'            Worksheets("LSRAM").Range("L" & row).value = lsram_Bwrtrate & "%"
'            Worksheets("LSRAM").Range("M" & row).value = lsram_Benrate & "%"
'            Worksheets("LSRAM").Range("N" & row).value = lsram_togglerate & "%"

            Worksheets("LSRAM").Range(lsram_name_str_col & row).value = lsram_name
            Worksheets("LSRAM").Range(lsram_nblock_col & row).value = lsram_blocks
            lsram_Awidth = Application.WorksheetFunction.IfError(Application.VLookup(lsram_Awidth, Worksheets("LSRAM").Range("DP15:DQ21").value, 2, False), "20")
            Worksheets("LSRAM").Range(lsram_Awidth_col & row).value = lsram_Awidth
            Worksheets("LSRAM").Range(lsram_Aclkfreq_col & row).value = lsram_Aclk
            Worksheets("LSRAM").Range(lsram_Amode_col & row).value = lsram_Awrtrate & "%"
            Worksheets("LSRAM").Range(lsram_Awriterate_col & row).value = lsram_Aenrate & "%"
            lsram_Bwidth = Application.WorksheetFunction.IfError(Application.VLookup(lsram_Bwidth, Worksheets("LSRAM").Range("DP15:DQ21").value, 2, False), "20")
            Worksheets("LSRAM").Range(lsram_Areadrate_col & row).value = lsram_Bwidth
            Worksheets("LSRAM").Range(lsram_Aenrate_col & row).value = lsram_Bclk
            Worksheets("LSRAM").Range(lsram_Bwidth_col & row).value = lsram_Bwrtrate & "%"
            Worksheets("LSRAM").Range(lsram_Bclkfreq_col & row).value = lsram_Benrate & "%"
            Worksheets("LSRAM").Range(lsram_Bmode_col & row).value = lsram_togglerate & "%"
            row = row + 1 ' increment row
        End If
    Next
    
Exit Sub

LsramErrorsection:
        lsram_error = True

End Sub
Private Sub print_lsram_breakdown(ByRef arr_header() As String, ByRef arr_row() As String)
    'a = UBound(arr_row, 1)    b = UBound(arr_row, 2)
    Dim row As Integer, status As Boolean, lsram_Aclk As Double, lsram_Bclk As Double, lsram_Awidth As Integer, lsram_Bwidth As Integer
    Dim lsram_pipe As String, lsram_ecc As String
    
On Error GoTo LsramErrorsection

    If imp_append_data.value = True Then
        row = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM") 'Get free row to append data in lsram sheet
    Else
        row = 9
    End If
    
    For i = LBound(arr_row, 2) To UBound(arr_row, 2)
        For j = LBound(arr_row, 1) To UBound(arr_row, 1)
                        
            Select Case j
                Case 0
                    lsram_name = arr_row(j, i)
                Case 2
                    lsram_blocks = arr_row(j, i)
                Case 3
                    lsram_Awidth = arr_row(j, i)
                Case 4
                    lsram_Aclk = arr_row(j, i)
                Case 5
                    lsram_Awrmode = arr_row(j, i)
                Case 6
                    lsram_Awrtrate = arr_row(j, i)
                Case 7
                    lsram_Ardrate = arr_row(j, i)
                Case 8
                    lsram_Aenrate = arr_row(j, i)
                Case 9
                    lsram_Bwidth = arr_row(j, i)
                Case 10
                    lsram_Bclk = arr_row(j, i)
                Case 11
                    lsram_Bwrmode = arr_row(j, i)
                Case 12
                    lsram_Bwrtrate = arr_row(j, i)
                Case 13
                    lsram_Brdrate = arr_row(j, i)
                Case 14
                    lsram_Benrate = arr_row(j, i)
                Case 15
                    lsram_pipe = arr_row(j, i)
                Case 16
                    lsram_ecc = arr_row(j, i)
                Case 17
                    lsram_togglerate = arr_row(j, i)
            End Select
        Next
        status = lsram_validate(lsram_blocks, lsram_Aclk, lsram_Bclk)
        
        If row > 250 Then
            Lsram_rows_exhaust = True
            Exit Sub
        End If
        
        If status = True Then
'            Worksheets("LSRAM").Range("B" & row).value = lsram_name
'            Worksheets("LSRAM").Range("E" & row).value = lsram_blocks
'            lsram_Awidth = Application.WorksheetFunction.IfError(Application.VLookup(lsram_Awidth, Worksheets("LSRAM").Range("DP15:DQ21").value, 2, False), "20")
'            Worksheets("LSRAM").Range("F" & row).value = lsram_Awidth
'            Worksheets("LSRAM").Range("G" & row).value = lsram_Aclk
'
'            lsram_Awrmode = Application.WorksheetFunction.IfError(Application.VLookup(lsram_Awrmode, Worksheets("LSRAM").Range("DP36:DQ38").value, 2, False), "Simple Write")
'            Worksheets("LSRAM").Range("H" & row).value = lsram_Awrmode
'
'            Worksheets("LSRAM").Range("I" & row).value = lsram_Awrtrate & "%"
'            Worksheets("LSRAM").Range("J" & row).value = lsram_Ardrate & "%"
'
'            Worksheets("LSRAM").Range("K" & row).value = lsram_Aenrate & "%"
'            lsram_Bwidth = Application.WorksheetFunction.IfError(Application.VLookup(lsram_Bwidth, Worksheets("LSRAM").Range("DP15:DQ21").value, 2, False), "20")
'
'            Worksheets("LSRAM").Range("L" & row).value = lsram_Bwidth
'            Worksheets("LSRAM").Range("M" & row).value = lsram_Bclk
'
'            lsram_Bwrmode = Application.WorksheetFunction.IfError(Application.VLookup(lsram_Bwrmode, Worksheets("LSRAM").Range("DP36:DQ38").value, 2, False), "Simple Write")
'            Worksheets("LSRAM").Range("N" & row).value = lsram_Bwrmode
'
'            Worksheets("LSRAM").Range("O" & row).value = lsram_Bwrtrate & "%"
'            Worksheets("LSRAM").Range("P" & row).value = lsram_Brdrate & "%"
'            Worksheets("LSRAM").Range("Q" & row).value = lsram_Benrate & "%"
'
'            lsram_pipe = Application.WorksheetFunction.IfError(Application.VLookup(lsram_pipe, Worksheets("LSRAM").Range("DP3:DQ4").value, 2, False), "No")
'            Worksheets("LSRAM").Range("R" & row).value = lsram_pipe
'
'            lsram_ecc = Application.WorksheetFunction.IfError(Application.VLookup(lsram_ecc, Worksheets("LSRAM").Range("DP29:DQ30").value, 2, False), "No")
'            Worksheets("LSRAM").Range("S" & row).value = lsram_ecc
'
'            Worksheets("LSRAM").Range("T" & row).value = lsram_togglerate & "%"

            Worksheets("LSRAM").Range(lsram_name_str_col & row).value = lsram_name
            Worksheets("LSRAM").Range(lsram_nblock_col & row).value = lsram_blocks
            lsram_Awidth = Application.WorksheetFunction.IfError(Application.VLookup(lsram_Awidth, Worksheets("LSRAM").Range("DP15:DQ21").value, 2, False), "20")
            Worksheets("LSRAM").Range(lsram_Awidth_col & row).value = lsram_Awidth
            Worksheets("LSRAM").Range(lsram_Aclkfreq_col & row).value = lsram_Aclk
            
            lsram_Awrmode = Application.WorksheetFunction.IfError(Application.VLookup(lsram_Awrmode, Worksheets("LSRAM").Range("DP36:DQ38").value, 2, False), "Simple Write")
            Worksheets("LSRAM").Range(lsram_Amode_col & row).value = lsram_Awrmode
            
            Worksheets("LSRAM").Range(lsram_Awriterate_col & row).value = lsram_Awrtrate & "%"
            Worksheets("LSRAM").Range(lsram_Areadrate_col & row).value = lsram_Ardrate & "%"
            
            Worksheets("LSRAM").Range(lsram_Aenrate_col & row).value = lsram_Aenrate & "%"
            lsram_Bwidth = Application.WorksheetFunction.IfError(Application.VLookup(lsram_Bwidth, Worksheets("LSRAM").Range("DP15:DQ21").value, 2, False), "20")
            
            Worksheets("LSRAM").Range(lsram_Bwidth_col & row).value = lsram_Bwidth
            Worksheets("LSRAM").Range(lsram_Bclkfreq_col & row).value = lsram_Bclk
            
            lsram_Bwrmode = Application.WorksheetFunction.IfError(Application.VLookup(lsram_Bwrmode, Worksheets("LSRAM").Range("DP36:DQ38").value, 2, False), "Simple Write")
            Worksheets("LSRAM").Range(lsram_Bmode_col & row).value = lsram_Bwrmode
            
            Worksheets("LSRAM").Range(lsram_Bwriterate_col & row).value = lsram_Bwrtrate & "%"
            Worksheets("LSRAM").Range(lsram_Breadrate_col & row).value = lsram_Brdrate & "%"
            Worksheets("LSRAM").Range(lsram_Benrate_col & row).value = lsram_Benrate & "%"
            
            lsram_pipe = Application.WorksheetFunction.IfError(Application.VLookup(lsram_pipe, Worksheets("LSRAM").Range("DP3:DQ4").value, 2, False), "No")
            Worksheets("LSRAM").Range(lsram_pipeline_col & row).value = lsram_pipe
            
            lsram_ecc = Application.WorksheetFunction.IfError(Application.VLookup(lsram_ecc, Worksheets("LSRAM").Range("DP29:DQ30").value, 2, False), "No")
            Worksheets("LSRAM").Range(lsram_ecc_col & row).value = lsram_ecc
            
            Worksheets("LSRAM").Range(lsram_tgrate_col & row).value = lsram_togglerate & "%"

            row = row + 1 ' increment row
        End If
    Next
    
 Exit Sub
    
LsramErrorsection:
        lsram_error = True

End Sub
Private Function lsram_validate(ByVal lsram_blocks As Integer, ByRef lsram_Aclk As Double, ByRef lsram_Bclk As Double) As Boolean
    
    If Not (lsram_blocks > 0) Then
        lsram_validate = False
        Exit Function
    End If
    
    If lsram_Aclk > 450 Then
        Elsram_PortAclk_freq = True
    End If
    
    If lsram_Bclk > 450 Then
        Elsram_portBclk_freq = True
    End If
    
    lsram_validate = True
    
End Function
Private Sub print_usram(ByRef arr_header() As String, ByRef arr_row() As String)
Dim row As Integer, status As Boolean, usram_wrtclkfreq As Double, usram_rdclkfreq As Double
    
On Error GoTo usramErrorsection

    If imp_append_data.value = True Then
        row = free_row(ActiveWorkbook.Worksheets("uSRAM"), 9, 250, "M", "uSRAM") 'Get free row to append data
    Else
        row = 9
    End If
    
    For i = LBound(arr_row, 2) To UBound(arr_row, 2)
        For j = LBound(arr_row, 1) To UBound(arr_row, 1)
            'MsgBox arr_row(j, i)
            
            Select Case j
                Case 0
                    usram_name = arr_row(j, i)
                Case 1
                    If UBound(arr_row, 1) = 8 Then
                        usram_blocks = arr_row(j, i)
                    End If
                Case 2
                    If UBound(arr_row, 1) = 8 Then
                        usram_width = arr_row(j, i)
                    Else
                        usram_blocks = arr_row(j, i)
                    End If
                Case 3
                    If UBound(arr_row, 1) = 8 Then
                        usram_reg = arr_row(j, i)
                    Else
                        usram_width = arr_row(j, i)
                    End If
                Case 4
                    If UBound(arr_row, 1) = 8 Then
                        usram_wrtclkfreq = arr_row(j, i)
                    Else
                        usram_reg = arr_row(j, i)
                    End If
                Case 5
                    If UBound(arr_row, 1) = 8 Then
                        usram_wrtenrate = arr_row(j, i)
                    Else
                        usram_wrtclkfreq = arr_row(j, i)
                    End If
                Case 6
                    If UBound(arr_row, 1) = 8 Then
                        usram_rdclkfreq = arr_row(j, i)
                    Else
                        usram_wrtenrate = arr_row(j, i)
                    End If
                Case 7
                    If UBound(arr_row, 1) = 8 Then
                        usram_rdenrate = arr_row(j, i)
                    Else
                        usram_rdclkfreq = arr_row(j, i)
                    End If
                Case 8
                    If UBound(arr_row, 1) = 8 Then
                        usram_togglerate = arr_row(j, i)
                    Else
                        usram_rdenrate = arr_row(j, i)
                    End If
                Case 9
                    usram_togglerate = arr_row(j, i)
            End Select
        Next
        status = usram_validate(usram_blocks, usram_wrtclkfreq, usram_rdclkfreq)
        
        If row > 250 Then
            usram_rows_exhaust = True
            Exit Sub
        End If
        
        If status = True Then
'            Worksheets("uSRAM").Range("B" & row).value = usram_name
'            Worksheets("uSRAM").Range("E" & row).value = usram_blocks
'            Worksheets("uSRAM").Range("F" & row).value = usram_width
'            usram_reg = Application.WorksheetFunction.IfError(Application.VLookup(usram_reg, Worksheets("uSRAM").Range("AP13:AQ14").value, 2, False), "No")
'            Worksheets("uSRAM").Range("G" & row).value = usram_reg
'            Worksheets("uSRAM").Range("H" & row).value = usram_wrtclkfreq
'            Worksheets("uSRAM").Range("I" & row).value = usram_wrtenrate & "%"
'            Worksheets("uSRAM").Range("J" & row).value = usram_rdclkfreq
'            Worksheets("uSRAM").Range("K" & row).value = usram_rdenrate & "%"
'            Worksheets("uSRAM").Range("L" & row).value = usram_togglerate & "%"

            Worksheets("uSRAM").Range(usram_name_str_col & row).value = usram_name
            Worksheets("uSRAM").Range(usram_nblock_col & row).value = usram_blocks
            Worksheets("uSRAM").Range(usram_width_col & row).value = usram_width
            usram_reg = Application.WorksheetFunction.IfError(Application.VLookup(usram_reg, Worksheets("uSRAM").Range("AP13:AQ14").value, 2, False), "No")
            Worksheets("uSRAM").Range(usram_reg_col & row).value = usram_reg
            Worksheets("uSRAM").Range(usram_writeclkfreq_col & row).value = usram_wrtclkfreq
            Worksheets("uSRAM").Range(usram_writeenrate_col & row).value = usram_wrtenrate & "%"
            Worksheets("uSRAM").Range(usram_readclkfreq_col & row).value = usram_rdclkfreq
            Worksheets("uSRAM").Range(usram_readenrate_col & row).value = usram_rdenrate & "%"
            Worksheets("uSRAM").Range(usram_tgrate_col & row).value = usram_togglerate & "%"
            
            row = row + 1 ' increment row
        End If
    Next
    
 Exit Sub
 
usramErrorsection:
        usram_error = True

End Sub
Private Function usram_validate(ByVal usram_blocks As Integer, ByRef usram_wrclk As Double, ByRef usram_rdclk As Double) As Boolean
    
    If Not (usram_blocks > 0) Then
        usram_validate = False
        Exit Function
    End If
    
    If usram_wrclk > 550 Then
        'usram_wrclk = 550
        Eusram_wrtportclk_freq = True
    End If
    
    If usram_rdclk > 550 Then
        'usram_rdclk = 550
        Eusram_rdportclk_freq = True
    End If
    usram_validate = True
    
End Function
Private Sub print_math(ByRef arr_header() As String, ByRef arr_row() As String)
    
    Dim row As Integer, status As Boolean, math_freq As Double, math_pipe_in As String, math_pipe_out As String
On Error GoTo MathErrorsection

    If imp_append_data.value = True Then
        row = free_row(ActiveWorkbook.Worksheets("Math Block"), 8, 250, "L", "Math Block") 'Get free row to append data in math block sheet
    Else
        row = 8
    End If
    
    For i = LBound(arr_row, 2) To UBound(arr_row, 2)
        For j = LBound(arr_row, 1) To UBound(arr_row, 1)
            
            Select Case j
                Case 0
                    math_name = arr_row(j, i)
                Case 1
                    If UBound(arr_row, 1) = 3 Then
                        math_freq = arr_row(j, i)
                    End If
                Case 2
                    If UBound(arr_row, 1) = 3 Then
                        math_blocks = arr_row(j, i)
                    Else
                        math_freq = arr_row(j, i)
                    End If
                Case 3
                    If UBound(arr_row, 1) = 3 Then
                        math_togglerate = arr_row(j, i)
                    Else
                        math_blocks = arr_row(j, i)
                    End If
                Case 4
                    math_togglerate = arr_row(j, i)
                Case 5
                    math_pipe_in = arr_row(j, i)
                Case 6
                    math_pipe_out = arr_row(j, i)
                Case 7
                    math_mode = arr_row(j, i)
                Case 8
                    math_preadder = arr_row(j, i)
            End Select
        Next
        status = math_validate(math_freq, math_blocks)
        
        If row > 250 Then
            math_rows_exhaust = True
            Exit Sub
        End If
        
        If status = True Then
'            Worksheets("Math Block").Range("B" & row).value = math_name
'            Worksheets("Math Block").Range("E" & row).value = math_freq
'            Worksheets("Math Block").Range("F" & row).value = math_blocks
'            Worksheets("Math Block").Range("G" & row).value = math_togglerate & "%"
'
'            math_mode = Application.WorksheetFunction.IfError(Application.VLookup(math_mode, Worksheets("Math Block").Range("BF3:BG6").value, 2, False), "Normal-Multiplier")
'            Worksheets("Math Block").Range("H" & row).value = math_mode
'
'            math_preadder = Application.WorksheetFunction.IfError(Application.VLookup(math_preadder, Worksheets("Math Block").Range("BF28:BG29").value, 2, False), "No")
'            Worksheets("Math Block").Range("I" & row).value = math_preadder
'
'            math_pipe_in = Application.WorksheetFunction.IfError(Application.VLookup(math_pipe_in, Worksheets("Math Block").Range("BF14:BG15").value, 2, False), "No")
'            Worksheets("Math Block").Range("J" & row).value = math_pipe_in
'
'            math_pipe_out = Application.WorksheetFunction.IfError(Application.VLookup(math_pipe_out, Worksheets("Math Block").Range("BF22:BG23").value, 2, False), "No")
'            Worksheets("Math Block").Range("K" & row).value = math_pipe_out

            Worksheets("Math Block").Range(math_name_str_col & row).value = math_name
            Worksheets("Math Block").Range(math_clkfreq_col & row).value = math_freq
            Worksheets("Math Block").Range(math_nblock_col & row).value = math_blocks
            Worksheets("Math Block").Range(math_tgrate_col & row).value = math_togglerate & "%"
            
            math_mode = Application.WorksheetFunction.IfError(Application.VLookup(math_mode, Worksheets("Math Block").Range("BF3:BG6").value, 2, False), "Normal-Multiplier")
            Worksheets("Math Block").Range(math_mode_col & row).value = math_mode
            
            math_preadder = Application.WorksheetFunction.IfError(Application.VLookup(math_preadder, Worksheets("Math Block").Range("BF28:BG29").value, 2, False), "No")
            Worksheets("Math Block").Range(math_preadder_col & row).value = math_preadder
            
            math_pipe_in = Application.WorksheetFunction.IfError(Application.VLookup(math_pipe_in, Worksheets("Math Block").Range("BF14:BG15").value, 2, False), "No")
            Worksheets("Math Block").Range(math_inputpipe_col & row).value = math_pipe_in
            
            math_pipe_out = Application.WorksheetFunction.IfError(Application.VLookup(math_pipe_out, Worksheets("Math Block").Range("BF22:BG23").value, 2, False), "No")
            Worksheets("Math Block").Range(math_outputpipe_col & row).value = math_pipe_out

            row = row + 1 ' increment row
        End If
    Next
    
Exit Sub
    
MathErrorsection:
        math_error = True
    
End Sub
Private Function math_validate(ByRef mathfreq As Double, ByVal mathblocks As Integer) As Boolean
        
    If Not (mathfreq >= 0 And mathfreq <= 450) Then
        Emathclk_freq = True
    End If
    
    math_validate = True
    
End Function
Private Sub print_pll(ByRef arr_header() As String, ByRef arr_row() As String)

Dim row As Integer, status As Boolean
    If imp_append_data.value = True Then
        row = free_row(ActiveWorkbook.Worksheets("PLL & DLL"), 17, 24, "K", "PLL") 'Get free row to append data in PLL sheet
    Else
        row = 17
    End If

On Error GoTo PLLErrorsection

    For i = LBound(arr_row, 2) To UBound(arr_row, 2)
        For j = LBound(arr_row, 1) To UBound(arr_row, 1)
            
            Select Case j
                Case 0
                    pll_name = arr_row(j, i)
                Case 3
                    pll_ref_clk_freq = arr_row(j, i)
                Case 4
                    pll_freq0 = arr_row(j, i)
                Case 5
                    pll_freq1 = arr_row(j, i)
                Case 6
                    pll_freq2 = arr_row(j, i)
                Case 7
                    pll_freq3 = arr_row(j, i)
                Case 8
                    pll_mode = arr_row(j, i)
            End Select
        Next
        If pll_freq0 = "NA" Then pll_freq0 = "not supported"
        
        If pll_freq1 = "NA" Then pll_freq1 = "not supported"
        
        If pll_freq2 = "NA" Then pll_freq2 = "not supported"
        
        If pll_freq3 = "NA" Then pll_freq3 = "not supported"
        
        status = pll_validate(pll_ref_clk_freq, pll_freq0, pll_freq1, pll_freq2, pll_freq3, pll_mode)
        
        If row > 24 Then
            pll_rows_exhaust = True
            Exit Sub
        End If
        
        If status = True Then
'            Worksheets("PLL & DLL").Range("B" & row).value = pll_name
'            Worksheets("PLL & DLL").Range("E" & row).value = pll_ref_clk_freq
'            If pll_freq0 = "not supported" Then
'                Worksheets("PLL & DLL").Range("F" & row).ClearContents
'            Else
'                Worksheets("PLL & DLL").Range("F" & row).value = pll_freq0
'            End If
'
'            If pll_freq1 = "not supported" Then
'                Worksheets("PLL & DLL").Range("G" & row).ClearContents
'            Else
'                Worksheets("PLL & DLL").Range("G" & row).value = pll_freq1
'            End If
'
'            If pll_freq2 = "not supported" Then
'                Worksheets("PLL & DLL").Range("H" & row).ClearContents
'            Else
'                Worksheets("PLL & DLL").Range("H" & row).value = pll_freq2
'            End If
'
'            If pll_freq3 = "not supported" Then
'                Worksheets("PLL & DLL").Range("I" & row).ClearContents
'            Else
'                Worksheets("PLL & DLL").Range("I" & row).value = pll_freq3
'            End If
'
'            pll_mode = Application.WorksheetFunction.IfError(Application.VLookup(pll_mode, Worksheets("PLL & DLL").Range("AP18:AQ19").value, 2, False), "Low Power")
'            Worksheets("PLL & DLL").Range("J" & row).value = pll_mode
'            row = row + 1 ' increment row

            Worksheets("PLL & DLL").Range(pll_name_str_col & row).value = pll_name
            Worksheets("PLL & DLL").Range(pll_refclk_col & row).value = pll_ref_clk_freq
            If pll_freq0 = "not supported" Then
                Worksheets("PLL & DLL").Range(pll_out0freq_col & row).ClearContents
            Else
                Worksheets("PLL & DLL").Range(pll_out0freq_col & row).value = pll_freq0
            End If
                
            If pll_freq1 = "not supported" Then
                Worksheets("PLL & DLL").Range(pll_out1freq_col & row).ClearContents
            Else
                Worksheets("PLL & DLL").Range(pll_out1freq_col & row).value = pll_freq1
            End If
            
            If pll_freq2 = "not supported" Then
                Worksheets("PLL & DLL").Range(pll_out2freq_col & row).ClearContents
            Else
                Worksheets("PLL & DLL").Range(pll_out2freq_col & row).value = pll_freq2
            End If
            
            If pll_freq3 = "not supported" Then
                Worksheets("PLL & DLL").Range(pll_out3freq_col & row).ClearContents
            Else
                Worksheets("PLL & DLL").Range(pll_out3freq_col & row).value = pll_freq3
            End If
            
            pll_mode = Application.WorksheetFunction.IfError(Application.VLookup(pll_mode, Worksheets("PLL & DLL").Range("AP18:AQ19").value, 2, False), "Low Power")
            Worksheets("PLL & DLL").Range(pll_mode_col & row).value = pll_mode
            row = row + 1 ' increment row

        End If
    Next
Exit Sub

PLLErrorsection:
        pll_error = True
    
End Sub
Private Function pll_validate(ByVal pllrefclk As Double, ByVal pllfreq0 As String, ByVal pllfreq1 As String, ByVal pllfreq2 As String, ByVal pllfreq3 As String, ByVal pllmode As String) As Boolean
    
    If Not (pllrefclk >= 1 And pllrefclk <= 1250) Then
        'pll_validate = False
        Epll_freq = True
       ' Exit Function
    End If
    
    If pllfreq0 <> "not supported" Then
        pllfreq0 = CDbl(pllfreq0)
        If Not (pllfreq0 >= 0.48 And pllfreq0 <= 1250) Then
            Epll_freq = True
        End If
    End If
    
    If pllfreq1 <> "not supported" Then
        pllfreq1 = CDbl(pllfreq1)
        If Not (pllfreq1 >= 0.48 And pllfreq1 <= 1250) Then
            Epll_freq = True
        End If
    End If
    
    If pllfreq2 <> "not supported" Then
        pllfreq2 = CDbl(pllfreq2)
        If Not (pllfreq2 >= 0.48 And pllfreq2 <= 1250) Then
            Epll_freq = True
        End If
    End If
    
    If pllfreq3 <> "not supported" Then
        pllfreq3 = CDbl(pllfreq3)
        If Not (pllfreq3 >= 0.48 And pllfreq3 <= 1250) Then
            Epll_freq = True
        End If
    End If
        
    pll_validate = True
    
End Function
Private Sub print_dll(ByRef arr_header() As String, ByRef arr_row() As String)
    'a = UBound(arr_row, 1)    b = UBound(arr_row, 2)
Dim row As Integer, status As Boolean

On Error GoTo DLLErrorsection

    If imp_append_data.value = True Then
        row = free_row(ActiveWorkbook.Worksheets("PLL & DLL"), 28, 35, "E", "DLL") 'Get free row to append data in DLL sheet
    Else
        row = 28
    End If
    
    For i = LBound(arr_row, 2) To UBound(arr_row, 2)
        For j = LBound(arr_row, 1) To UBound(arr_row, 1)
            'MsgBox arr_row(j, i)
            
            Select Case j
                Case 0
                    dll_name = arr_row(j, i)
                Case 1
                    dll_ref_clk_freq = arr_row(j, i)
            End Select
        Next
        status = dll_validate(dll_ref_clk_freq)
        
        If row > 35 Then
            dll_rows_exhaust = True
            Exit Sub
        End If
        
        If status = True Then
'            Worksheets("PLL & DLL").Range("B" & row).value = dll_name
'            Worksheets("PLL & DLL").Range("E" & row).value = dll_ref_clk_freq
            Worksheets("PLL & DLL").Range(dll_name_str_col & row).value = dll_name
            Worksheets("PLL & DLL").Range(dll_refclk_col & row).value = dll_ref_clk_freq
            row = row + 1 ' increment row
        End If
    Next
    
Exit Sub

DLLErrorsection:
        dll_error = True
    
End Sub
Private Function dll_validate(ByVal dllrefclk As Double) As Boolean
    
    If Not (dllrefclk >= 1 And dllrefclk <= 1250) Then
        Edll_freq = True
    End If
    
    dll_validate = True
    
End Function
Private Sub print_crypto(ByRef arr_header() As String, ByRef arr_row() As String)

Dim row As Integer, status As Boolean
    row = 12
    
On Error GoTo CryptoErrorsection

    For i = LBound(arr_row, 2) To UBound(arr_row, 2)
        For j = LBound(arr_row, 1) To UBound(arr_row, 1)
            
            Select Case j
                Case 0
                    crypto_freq = arr_row(j, i)
                Case 1
                    crypto_toggle = arr_row(j, i)
            End Select
        Next
        status = crypto_validate(crypto_freq)
        
        If row > 12 Then
            crypto_rows_exhaust = True
            Exit Sub
        End If
        
        If status = True Then
'            Worksheets("User Crypto").Range("E" & row).value = crypto_freq
'            Worksheets("User Crypto").Range("F" & row).value = crypto_toggle & "%"
            Worksheets("User Crypto").Range(crypto_clkfreq_col & row).value = crypto_freq
            Worksheets("User Crypto").Range(crypto_tgrate_col & row).value = crypto_toggle & "%"
            row = row + 1 ' increment row
        End If
    Next
    
Exit Sub
    
CryptoErrorsection:
        crypto_error = True
    
End Sub
Private Function crypto_validate(ByVal cryptofre As Double) As Boolean
    
    If Not (cryptofre > 0 And cryptofre <= 250) Then
        Ecrypto_freq = True
    End If
    
    crypto_validate = True
    
End Function
Private Sub print_io(ByRef arr_header() As String, ByRef arr_row() As String)

Dim row As Integer
Dim temp_arr() As Variant
On Error GoTo IOErrorsection

    If imp_append_data.value = True Then
        row = free_row(ActiveWorkbook.Worksheets("IO"), 21, 721, "AC", "IO") 'Get free row to append data in IO sheet
    Else
        row = 21
    End If
    
    temp_arr = Application.WorksheetFunction.Transpose(arr_row)
    
    QuickSortArray "str_sort", temp_arr, , , 1
    
    temp_arr = Application.WorksheetFunction.Transpose(temp_arr)
    
    For i = LBound(temp_arr, 2) To UBound(temp_arr, 2)
        For j = LBound(temp_arr, 1) To UBound(temp_arr, 1)
            
            Select Case j
                Case 1
                    io_name = temp_arr(j, i)
                Case 2
                    io_banktype = temp_arr(j, i)
                Case 3
                    io_standard = temp_arr(j, i)
                Case 4
                    io_direction = temp_arr(j, i)
                Case 5
                    io_isdifferential = temp_arr(j, i)
                Case 6
                    io_clampdiode = temp_arr(j, i) ' currently not using
                Case 7
                    io_impedance = temp_arr(j, i)
                Case 8
                    io_odtvalue = temp_arr(j, i)
                Case 9
                    io_outputdrive = temp_arr(j, i)
                Case 10
                    io_schmitttrigger = temp_arr(j, i)
                Case 11
                    io_slew = temp_arr(j, i)
                Case 12
                    io_sourcetermination = temp_arr(j, i) ' currently not using
                Case 13
                    io_vcmrange = temp_arr(j, i)
                Case 14
                    io_outputload = temp_arr(j, i)
                Case 15
                    io_iog = temp_arr(j, i)
                Case 16
                    io_clkfreq = temp_arr(j, i)
                Case 17
                    io_datarate = temp_arr(j, i)
                Case 18
                    io_togglerate = temp_arr(j, i)
                Case 19
                    io_outputenablerate = temp_arr(j, i)
                Case 20
                    io_vddi = temp_arr(j, i)
            End Select
        Next
        
        If UBound(temp_arr, 1) = 19 Then
            io_vddi = "not supported"
        End If
        
        If row > 721 Then
            io_rows_exhaust = True
            Exit Sub
        End If
        
'        Worksheets("IO").Range("B" & row).value = io_name
'        Worksheets("IO").Range("E" & row).value = io_banktype
        Worksheets("IO").Range(io_name_str_col & row).value = io_name
        Worksheets("IO").Range(io_banktype_col & row).value = io_banktype
        
        If io_isdifferential = True Then
            If io_banktype = "HSIO" Then
                io_standard = Application.VLookup(io_standard, Worksheets("IO").Range("EU4:EV56").value, 2, False)
            Else
                io_standard = Application.VLookup(io_standard, Worksheets("IO").Range("EW4:EX58").value, 2, False)
            End If
        End If
        
'        Worksheets("IO").Range("F" & row).value = io_standard
        Worksheets("IO").Range(io_standard_col & row).value = io_standard
           
        If io_direction = "INPUT" Then
            'Worksheets("IO").Range("H" & row).value = 1
            Worksheets("IO").Range(io_inputpins_col & row).value = 1
        ElseIf io_direction = "OUTPUT" Then
            'Worksheets("IO").Range("I" & row).value = 1
            Worksheets("IO").Range(io_outputpins_col & row).value = 1
        Else
            'Worksheets("IO").Range("J" & row).value = 1
            Worksheets("IO").Range(io_bidirpins_col & row).value = 1
        End If
        
        If io_vcmrange <> "--" Then
            If (io_vcmrange = "OFF") Or (io_vcmrange = "off") Then
                io_vcmrange = "Off"
            ElseIf (io_vcmrange = "MID") Or (io_vcmrange = "mid") Then
                io_vcmrange = "MID"
            ElseIf (io_vcmrange = "LOW") Or (io_vcmrange = "low") Then
                io_vcmrange = "LOW"
            End If
            
            'Worksheets("IO").Range("K" & row).value = io_vcmrange
            Worksheets("IO").Range(io_vcm_col & row).value = io_vcmrange
        End If
        
        'VDDI support
        If io_vddi = "not supported" Then
            If io_banktype = "HSIO" Then
                io_vddi = Application.VLookup(io_standard, Worksheets("IO").Range("EF53:EG106").value, 2, False) 'VDDI
            ElseIf io_banktype = "GPIO" Then
                io_vddi = Application.VLookup(io_standard, Worksheets("IO").Range("EF320:EG474").value, 2, False) 'VDDI
            Else
                io_vddi = Application.VLookup(io_standard, Worksheets("IO").Range("EF564:EG604").value, 2, False) 'VDDI
            End If
            'Worksheets("IO").Range("G" & row).value = io_vddi
            Worksheets("IO").Range(io_vddi_col & row).value = io_vddi
        Else
            'Worksheets("IO").Range("G" & row).value = io_vddi
            Worksheets("IO").Range(io_vddi_col & row).value = io_vddi
        End If
        
        If (io_schmitttrigger = "OFF") Or (io_schmitttrigger = "--") Then
            'Worksheets("IO").Range("L" & row).value = "Off"
            Worksheets("IO").Range(io_schmitt_col & row).value = "Off"
        Else
            'Worksheets("IO").Range("L" & row).value = "On"
            Worksheets("IO").Range(io_schmitt_col & row).value = "On"
        End If
        
        If io_odtvalue <> "--" Then
            'Worksheets("IO").Range("M" & row).value = io_odtvalue
            Worksheets("IO").Range(io_odt_col & row).value = io_odtvalue
        End If
        
        'In report drive and impedance are in different columns but in MPE its in same column
        If io_direction <> "INPUT" Then
            If io_outputdrive = "--" And io_impedance <> "--" Then
                'Worksheets("IO").Range("N" & row).value = io_impedance & " Ohm"
                Worksheets("IO").Range(io_drive_col & row).value = io_impedance & " Ohm"
            ElseIf io_impedance = "--" And io_outputdrive <> "--" Then
                'Worksheets("IO").Range("N" & row).value = io_outputdrive & " mA"
                Worksheets("IO").Range(io_drive_col & row).value = io_outputdrive & " mA"
            End If
            
            If InStr(io_standard, "SHIELD") Then
                'Worksheets("IO").Range("N" & row).value = "MAX"
                Worksheets("IO").Range(io_drive_col & row).value = "MAX"
            End If
        End If
        
        If (io_slew = "OFF") Or (io_slew = "--") Then
            'Worksheets("IO").Range("O" & row).value = "Off"
            Worksheets("IO").Range(io_slew_col & row).value = "Off"
        Else
            'Worksheets("IO").Range("O" & row).value = "On"
            Worksheets("IO").Range(io_slew_col & row).value = "On"
        End If
        
        If io_outputload <> "--" Then ' if "--" in report we are using default value
            'Worksheets("IO").Range("P" & row).value = io_outputload
            Worksheets("IO").Range(io_load_col & row).value = io_outputload
        End If
        
        If io_iog = "No" Then
            'Worksheets("IO").Range("Q" & row).value = "Unused"
            Worksheets("IO").Range(io_iog_col & row).value = "Unused"
        Else
            'check if imported is matching with estimator supported options if not use unused as iog option
            io_iog = Application.WorksheetFunction.IfError(Application.VLookup(io_iog, Worksheets("IO").Range("EZ4:FA67").value, 2, False), "Unused")
            'Worksheets("IO").Range("Q" & row).value = io_iog
            Worksheets("IO").Range(io_iog_col & row).value = io_iog
        End If
        
        'Worksheets("IO").Range("R" & row).value = io_clkfreq
        Worksheets("IO").Range(io_clkfreq_col & row).value = io_clkfreq
        
        If io_datarate <> "CLOCK" Then
            'Worksheets("IO").Range("S" & row).value = io_datarate
            Worksheets("IO").Range(io_datarate_col & row).value = io_datarate
        Else
            'Worksheets("IO").Range("S" & row).value = "clock"
            Worksheets("IO").Range(io_datarate_col & row).value = "clock"
        End If
        
'        Worksheets("IO").Range("T" & row).value = io_togglerate & "%"
'        Worksheets("IO").Range("U" & row).value = io_outputenablerate & "%"
        Worksheets("IO").Range(io_tgrate_col & row).value = io_togglerate & "%"
        Worksheets("IO").Range(io_enrate_col & row).value = io_outputenablerate & "%"
        
        row = row + 1 ' increment row
    Next

Exit Sub

IOErrorsection:
        io_error = True

End Sub
Private Sub print_xcvr(ByRef arr_header() As String, ByRef arr_row() As String)
    
Dim xcvr_datarate As Double
Dim row As Integer

On Error GoTo XCVRErrorsection

    If imp_append_data.value = True Then
        row = free_row(ActiveWorkbook.Worksheets("Transceiver"), 14, 37, "U", "Transceiver")
    Else
        row = 14
    End If
    
    '#####SAR-101271 fix
    'Worksheets("Transceiver").Range("L14:L37").value = WorksheetFunction.VLookup(Worksheets("Transceiver").Range("BN4").value, Worksheets("Transceiver").Range("CM41:CP48").value, 4, False)
    Worksheets("Transceiver").Range(xcvr_ctle_col & "14:" & xcvr_ctle_col & "37").value = WorksheetFunction.VLookup(Worksheets("Transceiver").Range("BN4").value, Worksheets("Transceiver").Range("CM41:CP48").value, 4, False)
    
    For i = LBound(arr_row, 2) To UBound(arr_row, 2)
        For j = LBound(arr_row, 1) To UBound(arr_row, 1)
            
            Select Case j
                Case 0
                    xcvr_name = arr_row(j, i)
                Case 1
                    xcvr_protocol = arr_row(j, i)
                Case 2
                    xcvr_nolanes = arr_row(j, i)
                Case 3
                    xcvr_operationalmode = arr_row(j, i)
                Case 4
                    
                    If UBound(arr_row, 1) = 12 Then
                        xcvr_datarate = arr_row(j, i)
                        xcvr_txplldatarate = arr_row(j, i)
                    Else
                        xcvr_rxdatarate = arr_row(j, i)
                    End If
                    
                Case 5
                    xcvr_pllused = arr_row(j, i)
                Case 6
                    If UBound(arr_row, 1) = 12 Then
                        xcvr_dfe = arr_row(j, i)
                    Else
                        xcvr_txplldatarate = arr_row(j, i)
                    End If
                Case 7
                    If UBound(arr_row, 1) = 12 Then
                        xcvr_eyemonitor = arr_row(j, i)
                    Else
                        xcvr_dfe = arr_row(j, i)
                    End If
                Case 8
                    If UBound(arr_row, 1) = 12 Then
                        xcvr_ctle = arr_row(j, i)
                    Else
                        xcvr_eyemonitor = arr_row(j, i)
                    End If
                Case 9
                    If UBound(arr_row, 1) = 12 Then
                        xcvr_txamp = arr_row(j, i)
                    Else
                        xcvr_ctle = arr_row(j, i)
                    End If
                Case 10
                    If UBound(arr_row, 1) = 12 Then
                        xcvr_pcsmode = arr_row(j, i)
                    Else
                        xcvr_txamp = arr_row(j, i)
                    End If
                Case 11
                    If UBound(arr_row, 1) = 12 Then
                        xcvr_pcswidth = arr_row(j, i)
                    Else
                        xcvr_pcsmode = arr_row(j, i)
                    End If
                Case 12
                    If UBound(arr_row, 1) = 12 Then
                        xcvr_hardpcie = arr_row(j, i)
                    Else
                        xcvr_pcswidth = arr_row(j, i)
                    End If
                Case 13
                    xcvr_hardpcie = arr_row(j, i)
                Case 14
                    If UBound(arr_row, 1) = 14 Then
                        xcvr_txdatarate = arr_row(j, i)
                    Else
                        xcvr_txdatarate = xcvr_rxdatarate
                    End If
            End Select
        Next
        If row > 37 Then
            transceiver_rows_exhaust = True
            Exit Sub
        End If
        
        'Worksheets("Transceiver").Range("B" & row).value = xcvr_name
        Worksheets("Transceiver").Range(xcvr_name_str_col & row).value = xcvr_name
        
        '########## SAR-98007 fix for xcvr_protocol option
                If xcvr_hardpcie = "Yes" Or xcvr_hardpcie = "YES" Then
                    If xcvr_datarate = 2.5 Then
                        xcvr_protocol = "PCIe Gen1"
                    End If
                    If xcvr_datarate = 5 Then
                        xcvr_protocol = "PCIe Gen2"
                    End If
                End If
        
'        xcvr_protocol = Application.WorksheetFunction.IfError(Application.VLookup(xcvr_protocol, Worksheets("Transceiver").Range("CA17:CB21").value, 2, False), "   ")
'        Worksheets("Transceiver").Range("E" & row).value = xcvr_protocol
'
'        Worksheets("Transceiver").Range("F" & row).value = xcvr_nolanes
'        Worksheets("Transceiver").Range("G" & row).value = xcvr_operationalmode
'        Worksheets("Transceiver").Range("H" & row).value = xcvr_datarate
'        Worksheets("Transceiver").Range("I" & row).value = xcvr_pllused
'
'        Worksheets("Transceiver").Range("J" & row).value = xcvr_dfe
'        Worksheets("Transceiver").Range("K" & row).value = xcvr_eyemonitor
'
'        Worksheets("Transceiver").Range("L" & row).value = xcvr_ctle
'
'        xcvr_txamp = Application.WorksheetFunction.IfError(Application.VLookup(xcvr_txamp, Worksheets("Transceiver").Range("CF61:CG89").value, 2, False), "800mV with -6.0dB")
'        Worksheets("Transceiver").Range("N" & row).value = xcvr_txamp
'
'        xcvr_pcsmode = Application.WorksheetFunction.IfError(Application.VLookup(xcvr_pcsmode, Worksheets("Transceiver").Range("BX109:BY113").value, 2, False), "8b/10b")
'        Worksheets("Transceiver").Range("O" & row).value = xcvr_pcsmode
'
'        Worksheets("Transceiver").Range("P" & row).value = xcvr_pcswidth
'
'        xcvr_hardpcie = Application.WorksheetFunction.IfError(Application.VLookup(xcvr_hardpcie, Worksheets("Transceiver").Range("BL131:BM134").value, 2, False), "No")
'        Worksheets("Transceiver").Range("Q" & row).value = xcvr_hardpcie
        
        
        xcvr_protocol = Application.WorksheetFunction.IfError(Application.VLookup(xcvr_protocol, Worksheets("Transceiver").Range("CA17:CB21").value, 2, False), "   ")
        Worksheets("Transceiver").Range(xcvr_protocol_col & row).value = xcvr_protocol
        
        Worksheets("Transceiver").Range(xcvr_nlanes_col & row).value = xcvr_nolanes
        
        xcvr_operationalmode = Application.WorksheetFunction.IfError(Application.VLookup(xcvr_operationalmode, Worksheets("Transceiver").Range("CC27:CD30").value, 2, False), "Duplex")
        Worksheets("Transceiver").Range(xcvr_opmode_col & row).value = xcvr_operationalmode
        
        Worksheets("Transceiver").Range(xcv_txdatarate_col & row).value = xcvr_txdatarate
        Worksheets("Transceiver").Range(xcvr_rxdatarate_col & row).value = xcvr_rxdatarate
        Worksheets("Transceiver").Range(xcvr_pll_col & row).value = xcvr_pllused
        
        Worksheets("Transceiver").Range(xcvr_dfe_col & row).value = xcvr_dfe
        Worksheets("Transceiver").Range(xcvr_eyemonitor_col & row).value = xcvr_eyemonitor
        
        Worksheets("Transceiver").Range(xcvr_ctle_col & row).value = xcvr_ctle
        
        xcvr_txamp = Application.WorksheetFunction.IfError(Application.VLookup(xcvr_txamp, Worksheets("Transceiver").Range("CF61:CG89").value, 2, False), "800mV with -6.0dB")
        Worksheets("Transceiver").Range(xcvr_txamp_col & row).value = xcvr_txamp
        
        xcvr_pcsmode = Application.WorksheetFunction.IfError(Application.VLookup(xcvr_pcsmode, Worksheets("Transceiver").Range("BX109:BY113").value, 2, False), "8b/10b")
        Worksheets("Transceiver").Range(xcvr_pcsmode_col & row).value = xcvr_pcsmode
        
        Worksheets("Transceiver").Range(xcvr_pcswidth_col & row).value = xcvr_pcswidth
        
        xcvr_hardpcie = Application.WorksheetFunction.IfError(Application.VLookup(xcvr_hardpcie, Worksheets("Transceiver").Range("BL131:BM134").value, 2, False), "No")
        Worksheets("Transceiver").Range(xcvr_pcie_col & row).value = xcvr_hardpcie
                
        row = row + 1 ' increment row
    Next
    
Exit Sub
    
XCVRErrorsection:
        transceiver_error = True
    
End Sub

Private Sub print_sum_voltage(ByRef arr_header() As String, ByRef arr_row() As String)
    Dim row As Integer, rail_name As String
    
  On Error GoTo VoltageErrorsection
  
    'dd = LBound(arr_row)
    dasd = UBound(arr_row)
     
    gfd = UBound(arr_row) - LBound(arr_row) + 1
    dsd = LBound(arr_row, 1)
    sdf = UBound(arr_row, 1)
    
    
    For i = LBound(arr_row, 2) To UBound(arr_row, 2)
        For j = LBound(arr_row, 1) To UBound(arr_row, 1)
            
            If j = 0 Then rail_name = arr_row(j, i)
                
            If j = 1 Then
                vol = CDbl(arr_row(j, i))
                
                'vol = CLng(arr_row(j, i))
            End If
        Next
            
            Select Case rail_name
                Case "VDD"
                    Worksheets("Summary").Range("N21").value = vol
                Case "VDD18"
                    Worksheets("Summary").Range("N22").value = vol
                Case "VDDAUX"
                    Worksheets("Summary").Range("N23").value = vol
                Case "VDDI 1.1"
                    Worksheets("Summary").Range("N24").value = vol
                Case "VDDI 1.2"
                    Worksheets("Summary").Range("N25").value = vol
                Case "VDDI 1.35"
                    Worksheets("Summary").Range("N26").value = vol
                Case "VDDI 1.5"
                    Worksheets("Summary").Range("N27").value = vol
                Case "VDDI 1.8"
                    Worksheets("Summary").Range("N28").value = vol
                Case "VDDI 2.5"
                    Worksheets("Summary").Range("N29").value = vol
                Case "VDDI 3.3"
                    Worksheets("Summary").Range("N30").value = vol
                Case "XCVR_VDD_CLK 3.3"
                    Worksheets("Summary").Range("N31").value = vol
                Case "XCVR_VDD_CLK 2.5"
                    Worksheets("Summary").Range("N31").value = vol
                Case "VDD25"
                    Worksheets("Summary").Range("N32").value = vol
                Case "VDDA"
                    Worksheets("Summary").Range("N33").value = vol
                Case "VDDA25"
                    Worksheets("Summary").Range("N34").value = vol
            End Select
            
    Next
    
Exit Sub
    
VoltageErrorsection:
        voltage_source_error = True
    
End Sub
Private Sub print_sum_thermal(ByRef arr_header() As String, ByRef arr_row() As String)
    Dim row As Integer, cal_mode As String
    row = 25
    
    On Error GoTo ThermalErrorsection
    
    For i = LBound(arr_row, 2) To UBound(arr_row, 2)
        For j = LBound(arr_row, 1) To UBound(arr_row, 1)
            
            If j = 0 Then cal_mode = arr_row(j, i)
                
            If j = 1 Then
                vol = arr_row(j, i)
            End If
        Next
            
        Worksheets("Summary").Range("D" & row).value = vol
        row = row + 1
    Next
    
    If Worksheets("Summary").Range("D25").value = Worksheets("Summary").Range("AX31").value Then
       Sheet2.user_entered_tj_select
    End If

Exit Sub
    
ThermalErrorsection:
        thermal_settings_error = True
    
End Sub
'Need to work
Private Function print_sum_devicesettings(ByRef arr_header() As String, ByRef arr_row() As String) As Boolean
    
    On Error GoTo DeviceErrorsection:
    
    Dim row As Integer, parameter As String, setting As String
    row = 0

'ThisWorkbook.Application.EnableEvents = False
    For i = LBound(arr_row, 2) To UBound(arr_row, 2)
        For j = LBound(arr_row, 1) To UBound(arr_row, 1)
            
            If j = 0 Then parameter = arr_row(j, i)
                
            If j = 1 Then
                gset = arr_row(j, i)
            End If
        Next
            
        Select Case parameter
            
            Case "Family:"
                row = 11
                setting = WorksheetFunction.VLookup(gset, Worksheets("derating_data").Range("L83:M84").value, 2, False)
            Case "Device:"
                row = 12
                setting = Application.WorksheetFunction.IfError(Application.VLookup(gset, Worksheets("derating_data").Range("B74:C98").value, 2, False), "NOT_SUPPORTED")
                'checking for "ES" and devices which are not supported in estimator.
                If setting = "NOT_SUPPORTED" Then
                    MsgBox "Import Feature is not supported for the selected device.", vbInformation
                    print_sum_devicesettings = False ' on illegal device send false.
                    Exit Function
                End If
                
            Case "Package:"
                row = 13
                If gset = "Fully Bonded Package" Then
                    setting = Worksheets("derating_data").Range("G89").value
                Else
                    setting = WorksheetFunction.VLookup(gset, Worksheets("derating_data").Range("F74:G85").value, 2, False)
                End If
                
            Case "Temperature Range:"
                row = 14
                setting = WorksheetFunction.VLookup(gset, Worksheets("derating_data").Range("I74:J75").value, 2, False)
            Case "Core Voltage:"
                row = 15
                'setting = WorksheetFunction.VLookup(gset, Worksheets("derating_data").Range("L74:M75").value, 2, True)
                If gset = "1.000" Or gset = "1.00" Or gset = "1.0" Or gset = "1." Or gset = "1" Then
                    setting = Worksheets("Summary").Range("AQ24").value
                ElseIf gset = "1.05" Or gset = "1.050" Or gset = "1.0500" Then
                    setting = Worksheets("Summary").Range("AQ25").value
                Else
                    setting = Worksheets("Summary").Range("AQ24").value
                End If
                
            Case "Process:"
                row = 16
                setting = WorksheetFunction.VLookup(gset, Worksheets("derating_data").Range("P74:Q75").value, 2, False)
            Case "Speed Grade:"
                row = 17
                setting = WorksheetFunction.VLookup(gset, Worksheets("derating_data").Range("P83:Q84").value, 2, False)
        End Select
        If row <> 0 Then
            Worksheets("Summary").Range("D" & row).value = setting
            row = 0
        End If
        
    Next
'ThisWorkbook.Application.EnableEvents = True

    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    ThisWorkbook.Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    Application.Calculate

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    ThisWorkbook.Application.EnableEvents = False
    Application.Calculation = xlCalculationManual

    print_sum_devicesettings = True 'Send true after importing complete device setting
    
Exit Function

DeviceErrorsection:
        device_settings_error = True
        Exit Function
        
End Function
Private Sub arrayprint(ByRef arr_header() As String, ByRef arr_row() As String)
    
    a = UBound(arr_row, 1)
    b = UBound(arr_row, 2)
    'For i = LBound(arr_row, 1) To UBound(arr_row, 1)
    For i = LBound(arr_row, 2) To UBound(arr_row, 2)
        For j = LBound(arr_row, 1) To UBound(arr_row, 1)
        'For j = LBound(arr_row, 2) To UBound(arr_row, 2)
            MsgBox arr_row(j, i)
        Next
    Next
    
End Sub
Function rem_cell(ByVal str As String, ByVal con As String) As String
 Dim s As String, piece As String, i As Long, j As Long
    s = str
    If con = "cell" Then
        i = InStr(s, "<cell>")
        j = InStrRev(s, "</cell>")
        piece = Mid(s, i + 6, j - i - 6)
    ElseIf con = "title" Then
        i = InStr(s, "<section><name>")
        j = InStrRev(s, "</name></section>")
        piece = Mid(s, i + 15, j - i - 15)
    End If
    rem_cell = piece
End Function
Private Sub import_estimator_click()
    If Dir(file_path.value) <> "" Then      'Checking for importing File present in Disk or not
        If file_path.value <> "" Then       'Dir will not check for empty string so checking for importing File empty or not
            Dim owb As Workbook
            Set nwb = ActiveWorkbook
            Application.ScreenUpdating = False
            Application.DisplayAlerts = False
           
            'checking for file status whether file is open or close
            Dim file_status As String
            file_status = IsWorkBookOpen(file_path.value)    'function call to get file status
            If file_status = True Then
                    Dim FileName As String
                    FileName = Right(file_path.value, Len(file_path.value) - InStrRev(file_path.value, "\"))   ' extracting the file name from file path
                    Dim xlApp As Excel.Application
                    Set xlApp = GetObject(file_path.value).Application
                    Set owb = xlApp.Workbooks(FileName)
             Else
                    Set owb = Workbooks.Open(FileName:=file_path.value, ReadOnly:=True) 'if file is not open, open it and getting its workbook
            End If
            
            'Checking for Valid MPE file or not
            Dim issheetexist As Boolean
            issheetexist = WorksheetExists("dss_data", owb)  'function call to check for existence of dss_data sheet
            
            Position = InStrRev(file_path.value, ".")
            extn = Right(file_path.value, Len(file_path.value) - Position)
            Dim extn_chk As Boolean
            If extn = "xls" Or extn = "xlsx" Or extn = "xlsm" Then      'checking for extension of file path
                extn_chk = True
            End If
             
            If issheetexist = True And extn_chk = True Then   'Condition check for Valid MPE
             
                'Checking for family - currently import works for between workbooks (power calcualtors) of the same family.
                Dim old_str As String
                Dim new_str As String
                old_str = owb.Worksheets("dss_data").Range("B2").Text
                new_str = nwb.Worksheets("dss_data").Range("B2").Text
                    If new_str = old_str Then              'Condition check for MPE Family
                        
                        'Checking for the version. It import only from older version to latest version.
                        Dim old_vrtn As String
                        Dim new_vrtn As String
                        old_vrtn = Left(owb.Worksheets("dss_data").Range("J3").value, Len(owb.Worksheets("dss_data").Range("J3").value) - 1)
                        new_vrtn = Left(nwb.Worksheets("dss_data").Range("J3").value, Len(nwb.Worksheets("dss_data").Range("J3").value) - 1)
                        old_vrtn = Right(old_vrtn, Len(old_vrtn) - 1)
                        new_vrtn = Right(new_vrtn, Len(new_vrtn) - 1)
                        Dim old_vrtn_val As Integer
                        Dim new_vrtn_val As Integer
                        old_vrtn_val = CInt(old_vrtn)
                        new_vrtn_val = CInt(new_vrtn)
                            'we should check whether it is version 5 or earlier, the logic should be different
                            'for now we can just always assume it is version 3
                            If new_vrtn_val >= old_vrtn_val Then     'Condition check for Version
                                
                                Dim Imp_snp_support As Boolean     'condition check for ver1 and Imp_snap option selected
                                Imp_snp_support = True
                                If Imp_snapshots.value = True And old_vrtn_val = 1 Then
                                    Imp_snp_support = False
                                End If
                                    
                                If Imp_snp_support Then
                                  
                                        'Calling sub to Import all worksheets
                                        Importsheets owb, nwb, old_vrtn_val
                                    
                                        'If initially importing file is closed then closing the file after import done
                                        If file_status = False Then
                                            owb.Close False
                                        End If
                                    
                                        ' Save the path of successfully imported file in dss_data sheet.
                                        nwb.Worksheets("dss_data").Range("I35").value = file_path.value
                                        Application.ScreenUpdating = True
                                    
                                        Unload Me
                                        If disable_msg_boolean = False Then
                                                MsgBox "Import successfully completed." & vbNewLine _
                                              & "Note: If Import Snapshot Option is enabled then please restore all the imported Snapshots to get the updated power as per the latest data changes.", vbInformation
                                        End If
                            
                                Else
                                        MsgBox "Selected Import Snapshot option in Advance Options is invalid for Importing MPE version."
                                        If file_status = False Then
                                            owb.Close False
                                        End If
                                End If
                            
                            Else
                                ' For all the message boxes, add a title saying error ---> try to do
                                ' Or add a error box, saying the error and the way to overcome that error.
                                MsgBox "Trying to Import new version MPE into old version MPE which is invalid."
                            End If
                    Else
                         If file_status = False Then 'If initially importing file is closed then closing the file after import done
                            owb.Close False
                         End If
                        MsgBox "MPE Family Not Maching!"
                    End If
            Else
                If file_status = False Then 'If initially importing file is closed then closing the file after import done
                    owb.Close False
                End If
                MsgBox "Not a valid MPE!"
            End If
        Else
            MsgBox "No File Specified!"
        End If
    Else
        MsgBox "File Not Exists!"
    End If
 End Sub
' Function -> IsWorkBookOpen
' Inputs -> file Name
' Outputs -> returns TRUE if file is open else FALSE
' Description -> check the status of file whether it is open or not
Private Function IsWorkBookOpen(FileName As String)
    Dim fnum As Integer, ErrNo As Integer
    On Error Resume Next
    fnum = FreeFile()
    Open FileName For Input Lock Read As #fnum
    Close fnum
    ErrNo = Err
    Select Case ErrNo
        Case 0:    IsWorkBookOpen = False
        Case 70:   IsWorkBookOpen = True
    End Select
End Function
' Function -> WorksheetExists
' Inputs -> Worksheet Name and workbook name
' Outputs -> returns TRUE if worksheet exists else FALSE
' Description -> check the existence of dss_data sheet
Private Function WorksheetExists(ByVal WorksheetName As String, ByRef wb As Workbook) As Boolean
    Dim Sht As Worksheet
    For Each Sht In wb.Worksheets
    If Application.Proper(Sht.Name) = Application.Proper(WorksheetName) Then
         WorksheetExists = True
         Exit Function
    End If
    Next Sht
    WorksheetExists = False
End Function
' sub -> Importsheets
' Inputs -> old Workbook name, new Workbook name, old varsion value
' Outputs -> None becuase it is a Sub
' Description -> It clear's initial data present in importing sheets by calling there respective sub's  and then start importing data sheet by sheet by callling there respective sub's
Private Sub Importsheets(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)

                                 ThisWorkbook.Activate
                         ThisWorkbook.Application.EnableEvents = False
                                 
                                 Application.Run "clear_clock"       'calling macros to clear data initially present in sheets
                                 Application.Run "clear_logic"
                                 Application.Run "clear_lsram"
                                 Application.Run "clear_usram"
                                 Application.Run "clear_mathblock"
                                 Application.Run "clear_io"
                                 Application.Run "clear_pll_dll_osc"
                                 Application.Run "clear_misc"
                                 Application.Run "clear_Transceiver"
                                 Application.Run "clear_userfrom_data"
                                 
                                
                                 ImportSummary owb, nwb, old_vrtn_val   'Calling importing funcitons sheet by sheet to copy data
                                 ImportClock owb, nwb
                                 ImportLogic owb, nwb, old_vrtn_val
                                 ImportLSRAM owb, nwb, old_vrtn_val
                                 ImportuSRAM owb, nwb
                                 ImportMath owb, nwb, old_vrtn_val
                                 ImportIO owb, nwb, old_vrtn_val
                                 ImportTransceiver owb, nwb, old_vrtn_val
                                 ImportPLLDLL owb, nwb, old_vrtn_val
                                 ImportMisc owb, nwb, old_vrtn_va
                        
                                'Import snapshot codition
                                If Imp_snapshots.value = True Then
                                    clear_snapshots_and_data
                                    Importshapshot owb, nwb, old_vrtn_val
                                End If
                            
                                ComputeThermalPower
                            
                        ThisWorkbook.Application.EnableEvents = True
                                                     
End Sub
Private Sub import_pkg(ByVal owb As Workbook, ByVal nwb As Workbook)
    Dim ows As Worksheet
    Set ows = owb.Worksheets("Summary")
    Set nws = nwb.Worksheets("Summary")
    If ows.Range("D13").value = "FULLPKG" Then
        If nws.Range("D12").value = "MPF100T" Or nws.Range("D12").value = "MPF100TL" Or nws.Range("D12").value = "MPF100TS" Or nws.Range("D12").value = "MPF100TLS" Then ' to handle fullpkg
            nws.Range("D13").value = "FCSG325"
        End If
        
        If nws.Range("D12").value = "MPF200T" Or nws.Range("D12").value = "MPF200TL" Or nws.Range("D12").value = "MPF200TS" Or nws.Range("D12").value = "MPF200TLS" Then ' to handle fullpkg
            nws.Range("D13").value = "FCSG325"
        End If
        
        If nws.Range("D12").value = "MPF300T" Or nws.Range("D12").value = "MPF300TL" Or nws.Range("D12").value = "MPF300TS" Or nws.Range("D12").value = "MPF300TLS" Then ' to handle fullpkg
            nws.Range("D13").value = "FCG484"
        End If
        
        If nws.Range("D12").value = "MPF500T" Or nws.Range("D12").value = "MPF500TL" Or nws.Range("D12").value = "MPF500TS" Or nws.Range("D12").value = "MPF500TLS" Then ' to handle fullpkg
            nws.Range("D13").value = "FCG784"
        End If
    Else
        nws.Range("D13").value = ows.Range("D13").value
    End If
End Sub
' sub -> ImportSummary
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> copy all the user entry cells from importing summary sheet to corresponding summary sheet in active workbook depend on conditions (Device settings, Thermal settings and voltage settings)
Private Sub ImportSummary(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
    Dim ows As Worksheet
    Set ows = owb.Worksheets("Summary")
    Set nws = nwb.Worksheets("Summary")
    
    'This is used to set thermal data section when user uncheck select thermal data because it is automatic changing beacuse of summay sheet code to avoid that
    Dim cmode, theta_ja As String
    Dim jTemp, effec_thetaja As Integer
    cmode = nws.Range("D25").value
    jTemp = nws.Range("D26").value
    theta_ja = nws.Range("D27").value
    effec_thetaja = nws.Range("D28").value
    
    If Imp_device_settings.value = True Then      'Check Device settings
        nws.Range("D11").value = ows.Range("D11").value
        nws.Range("D12").value = ows.Range("D12").value
            
            'IO sheet changes as per selected die
            If nwb.Worksheets("Summary").Range("D12").value = "MPF300XT" Then
                nwb.Worksheets("IO").Columns("G").EntireColumn.Hidden = True    'VDDI
                nwb.Worksheets("IO").Columns("K").EntireColumn.Hidden = True    'VCM
            Else
                nwb.Worksheets("IO").Columns("G").EntireColumn.Hidden = False    'VDDI
                nwb.Worksheets("IO").Columns("K").EntireColumn.Hidden = False    'VCM
            End If

            'changes in CTLE drive options in XCVR sheet
            key = WorksheetFunction.VLookup(nws.Range("D12").value, nwb.Worksheets("dss_data").Range("B3:D38").value, 3, False)
            nwb.Worksheets("Transceiver").Range("L14:L37").value = WorksheetFunction.VLookup(key, nwb.Worksheets("Transceiver").Range("CM41:CP48").value, 4, False)


        nws.Range("D14").value = ows.Range("D14").value
        nws.Range("D15").value = ows.Range("D15").value
        nws.Range("D16").value = ows.Range("D16").value
        If old_vrtn_val <= 2 Then       'Speed grade support for V1,2
            nws.Range("D17").value = "STD"
        ElseIf old_vrtn_val = 3 Then
            If ows.Range("D17").value = "STD-LP" Then
                dev = ows.Range("D12").value
                nws.Range("D12").value = WorksheetFunction.VLookup(dev, Worksheets("Summary").Range("AP72:AQ79").value, 2, False)
                nws.Range("D17").value = "STD"
            Else
                nws.Range("D17").value = ows.Range("D17").value
            End If
        Else
            nws.Range("D17").value = ows.Range("D17").value
        End If
        import_pkg owb, nwb 'calling pkg sub to handle fullpkg for all devices

    End If
    
      nws.Range("M13:M14").value = ows.Range("M13:M14").value
    
    If Imp_voltage_settings.value = True Then        'Check Voltage settings
         nws.Range("N21:N34").value = ows.Range("N21:N34").value
    End If
    
        If Imp_thermal_inputs.value = True Then     'Check Thermal settings
            If owb.Worksheets("dss_data").Range("J6") <> "not supported" Then
                    
                    If owb.Worksheets("Summary").user_entered_tj.value Then
                        nws.Range("D25").value = "User Entered Tj"
                        Worksheets("dss_data").Range("AC43").value = 1
                    End If
                    If owb.Worksheets("Summary").estimated_tj.value Then
                        nws.Range("D25").value = "Estimated Tj"
                        Worksheets("dss_data").Range("AC43").value = 0
                    End If
                    
                    nws.Range("D26").value = ows.Range("D26").value
                    
                    If owb.Worksheets("Summary").custom_theta_ja.Enabled Then
                        nws.Range("D27").value = "Custom Theta JA"
                    End If
                                        
                    nws.Range("D28").value = ows.Range("D28").value
                    
                Else
                    ThisWorkbook.Application.EnableEvents = True
                    
                    nws.Range("D25").value = ows.Range("D25").value
                    If nws.Range("D25").value = "User Entered Tj" Then
                        Worksheets("dss_data").Range("AC43").value = 1
                    Else
                        Worksheets("dss_data").Range("AC43").value = 0
                    End If
                    nws.Range("D26").value = ows.Range("D26").value
                    
                    If nws.Range("D25").value = "Estimated Tj" Then
                        nws.Range("D27").value = ows.Range("D27").value
                        nws.Range("D28").value = ows.Range("D28").value
                    End If
                    If old_vrtn_val <= 5 And nws.Range("D27").value = "Estimated Theta JA" Then
                        nws.Range("D29").value = ows.Range("D29").value
                        nws.Range("D30").value = ows.Range("D30").value
                        nws.Range("D32").value = ows.Range("D32").value
                    End If
                    
                    ThisWorkbook.Application.EnableEvents = False
            End If
    Else

        nws.Range("D25").value = cmode
        nws.Range("D26").value = jTemp
        If cmode = "Estimated Tj" Then
            nws.Range("D27").value = theta_ja
            nws.Range("D28").value = effec_thetaja
        End If
    End If
    
End Sub
' sub -> ImportClock
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> copy all the user entry cells from importing Clock sheet to corresponding Clock sheet in active workbook
Private Sub ImportClock(ByVal owb As Workbook, ByVal nwb As Workbook)
    Set ows = owb.Worksheets("Clock")
    Set nws = nwb.Worksheets("Clock")
    
    If old_vrtn_val <= 5 Then
        ind = 112
    Else
        ind = 511
    End If
    
     nws.Range("B12:E" & ind).value = ows.Range("B12:E" & ind).value
     nws.Range("F12:F" & ind).value = ows.Range("F12:F" & ind).value
     nws.Range("G12:H" & ind).value = ows.Range("G12:H" & ind).value
    
End Sub
' sub -> ImportLogic
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> copy all the user entry cells from importing Logic sheet to corresponding Logic sheet in active workbook
Private Sub ImportLogic(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
    Set ows = owb.Worksheets("Logic")
    Set nws = nwb.Worksheets("Logic")
    If old_vrtn_val <= 4 Then
        ind = 58
    ElseIf old_vrtn_val = 5 Then
        ind = 258
    Else
        ind = 508
    End If
    
    nws.Range("B9:G" & ind).value = ows.Range("B9:G" & ind).value
    
    If ows.Range("I8").value = "Power (W)" Then
        nws.Range("I9:I" & ind).value = ows.Range("H9:H" & ind).value
    Else
        nws.Range("H9:I" & ind).value = ows.Range("H9:I" & ind).value
    End If
End Sub
' sub -> ImportLSRAM
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> copy all the user entry cells from importing LSRAM sheet to corresponding LSRAM sheet in active workbook
Private Sub ImportLSRAM(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
    Set ows = owb.Worksheets("LSRAM")
    Set nws = nwb.Worksheets("LSRAM")
    nws.Range("B9:E250").value = ows.Range("B9:E250").value         ' copies the LSRAMs names and count
    nws.Range("F9:F250").value = ows.Range("F9:F250").value         ' copies port A width
    nws.Range("G9:G250").value = ows.Range("G9:G250").value         ' copies port A frequency
    If old_vrtn_val < 5 Then ' handle for newly added columns
        
        Dim r As Range, cell As Range, row As Range
        nws.Range("I9:I250").value = ows.Range("H9:H250").value     ' copies port A write rate
        ' read rates are copied as 1-write_rate
        nws.Range("J9:J250").value = ows.Range("H9:H250").value     ' copies port A write rate to read rate
        Set r = nws.Range("J9:J250")
        For Each cell In r
            If cell.value <> 0.125 Then
                cell.value = 1 - cell.value
            End If
        Next
        nws.Range("K9:K250").value = ows.Range("I9:I250").value     ' copies port A enable rate
        nws.Range("L9:L250").value = ows.Range("F9:F250").value     ' copies port B width from port A width
        nws.Range("M9:M250").value = ows.Range("J9:J250").value     ' copies port B frequency
        nws.Range("O9:O250").value = ows.Range("K9:K250").value     ' copies port B write rate
        ' read rates are copied as 1-write_rate
        nws.Range("P9:P250").value = ows.Range("K9:K250").value     ' copies port B write rate to read rate
        Set r = nws.Range("P9:P250")
        For Each cell In r
            If cell.value <> 0.125 Then
                cell.value = 1 - cell.value
            End If
        Next
        nws.Range("Q9:Q250").value = ows.Range("L9:L250").value     ' copies port B enable rate
        nws.Range("T9:T250").value = ows.Range("M9:M250").value     ' copies output toggle rate -- both ports
        
        Set r = nws.Range("F9:J250")
        For Each row In r.Rows
            If row.Cells(1, 1).value = 40 Then
                If row.Cells(1, 4).value = 1 Then
                    row.Cells(1, 5).value = row.Cells(1, 4).value
                Else
                    row.Cells(1, 5).value = 1 - row.Cells(1, 4).value
                End If
                row.Cells(1, 4).value = 0                           ' Port A can not write
            End If
        Next
        Set r = nws.Range("L9:P250")
        For Each row In r.Rows
            If row.Cells(1, 1).value = 40 Then
                row.Cells(1, 5).value = 0                           ' Port B can not read
            End If
        Next
        
    Else
        nws.Range("H9:H250").value = ows.Range("H9:H250").value
        nws.Range("I9:I250").value = ows.Range("I9:I250").value
        nws.Range("J9:J250").value = ows.Range("J9:J250").value
        nws.Range("K9:K250").value = ows.Range("K9:K250").value
        nws.Range("L9:L250").value = ows.Range("L9:L250").value
        nws.Range("M9:M250").value = ows.Range("M9:M250").value
        nws.Range("N9:N250").value = ows.Range("N9:N250").value
        nws.Range("O9:O250").value = ows.Range("O9:O250").value
        nws.Range("P9:P250").value = ows.Range("P9:P250").value
        nws.Range("Q9:Q250").value = ows.Range("Q9:Q250").value
        nws.Range("R9:R250").value = ows.Range("R9:R250").value
        nws.Range("S9:S250").value = ows.Range("S9:S250").value
        nws.Range("T9:T250").value = ows.Range("T9:T250").value
        
    End If
End Sub
' sub -> ImportuSRAM
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> copy all the user entry cells from importing uSRAM sheet to corresponding uSRAM sheet in active workbook
Private Sub ImportuSRAM(ByVal owb As Workbook, ByVal nwb As Workbook)
    Set ows = owb.Worksheets("uSRAM")
    Set nws = nwb.Worksheets("uSRAM")
    nws.Range("B9:F250").value = ows.Range("B9:F250").value
    nws.Range("G9:G250").value = ows.Range("G9:G250").value
    nws.Range("H9:L250").value = ows.Range("H9:L250").value
End Sub
' sub -> ImportMath
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> copy all the user entry cells from importing Math Block sheet to corresponding Math Block sheet in active workbook
Private Sub ImportMath(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
    Set ows = owb.Worksheets("Math Block")
    Set nws = nwb.Worksheets("Math Block")
    nws.Range("B8:G250").value = ows.Range("B8:G250").value
    
    If old_vrtn_val < 5 Then
        'Set inputs/outputs as pipelined
        Dim r As Range, cell As Range
        Set r = nws.Range("J8:J250")
        For Each cell In r
            cell.value = "Yes"
        Next
        Set r = nws.Range("K8:K250")
        For Each cell In r
            cell.value = "Yes"
        Next
    
    Else
        nws.Range("H8:H250").value = ows.Range("H8:H250").value
        nws.Range("I8:I50").value = ows.Range("I8:I250").value
        nws.Range("J8:J250").value = ows.Range("J8:J250").value
        nws.Range("K8:K250").value = ows.Range("K8:K250").value
    End If
    
End Sub
Private Sub ionamechanege(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
    Set ows = owb.Worksheets("IO")
    Set nws = nwb.Worksheets("IO")
    
    If old_vrtn_val <= 4 Then
        nwb.Worksheets("io_validation").Range("AA21:AA591").value = ows.Range("F21:F591").value    'getting updated IO names
        
        nws.Range("F21:F591").value = nwb.Worksheets("io_validation").Range("AB21:AB591").value
    Else
        nws.Range("F21:F721").value = ows.Range("F21:F721").value
    End If
        
End Sub
' sub -> ImportIO
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> copy all the user entry cells from importing IO sheet to corresponding IO sheet in active workbook
Private Sub ImportIO(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
    Dim ind As Integer
    Set ows = owb.Worksheets("IO")
    Set nws = nwb.Worksheets("IO")
    If old_vrtn_val <= 4 Then
        ind = 591
    Else
        ind = 721
    End If
    
    nws.Range("B21:B" & ind).value = ows.Range("B21:B" & ind).value
    nws.Range("E21:E" & ind).value = ows.Range("E21:E" & ind).value
        
    ionamechanege owb, nwb, old_vrtn_val ' sub calling to support IO name changes.
    
    If old_vrtn_val < 7 Then
        nws.Range("H21:J" & ind).value = ows.Range("I21:K" & ind).value
        '-------------------------------------------------------------------------------
        'setting VDDI and VCM options to default
            Set iotype = nwb.Worksheets("IO").Range("E21:K721")
            '1-type, 2-std, 3-vddi, 7-vcm
            For Each row In iotype.Rows
                
                If row.Cells(1, 4).value <> "" Or row.Cells(1, 5).value <> "" Or row.Cells(1, 6).value <> "" Then
                    If row.Cells(1, 1).value = "HSIO" Then
                        row.Cells(1, 3).value = nws.Range((Application.VLookup(row.Cells(1, 2).value, nws.Range("DL54:DR108").value, 7, False))).value 'VDDI
                        row.Cells(1, 7).value = nws.Range((Application.VLookup(row.Cells(1, 2).value, nws.Range("DL54:DR108").value, 6, False))).value 'VCM
                    ElseIf row.Cells(1, 1).value = "GPIO" Then
                        row.Cells(1, 3).value = nws.Range((Application.VLookup(row.Cells(1, 2).value, nws.Range("DL321:DR462").value, 7, False))).value 'VDDI
                        row.Cells(1, 7).value = nws.Range((Application.VLookup(row.Cells(1, 2).value, nws.Range("DL321:DR462").value, 6, False))).value 'VCM
                    Else
                        row.Cells(1, 3).value = nws.Range((Application.VLookup(row.Cells(1, 2).value, nws.Range("DL565:DR605").value, 7, False))).value 'VDDI
                        row.Cells(1, 7).value = nws.Range((Application.VLookup(row.Cells(1, 2).value, nws.Range("DL565:DR605").value, 6, False))).value 'VCM
                    End If
                Else
                    Exit For
                End If
                
            Next
        '-------------------------------------------------------------------------------
    Else
        nws.Range("H21:J" & ind).value = ows.Range("H21:J" & ind).value
    End If
    
    If old_vrtn_val >= 7 Then
        nws.Range("G21:G" & ind).value = ows.Range("G21:G" & ind).value
        nws.Range("K21:K" & ind).value = ows.Range("K21:K" & ind).value
    End If
    
    nws.Range("L21:L" & ind).value = ows.Range("L21:L" & ind).value
    nws.Range("M21:M" & ind).value = ows.Range("M21:M" & ind).value
    nws.Range("N21:N" & ind).value = ows.Range("N21:N" & ind).value
    nws.Range("O21:O" & ind).value = ows.Range("O21:O" & ind).value
    nws.Range("P21:P" & ind).value = ows.Range("P21:P" & ind).value
    nws.Range("Q21:Q" & ind).value = ows.Range("Q21:Q" & ind).value
    nws.Range("R21:R" & ind).value = ows.Range("R21:R" & ind).value
         
     If old_vrtn_val <= 2 Then
        Dim i As Integer
        Dim data_rate As String
        For i = 21 To 591
            data_rate = ows.Cells(i, 19)
            If data_rate = "data" Then
                nws.Cells(i, 19) = "SDR"
            Else
                nws.Cells(i, 19) = ows.Cells(i, 19)
            End If
        Next i
    Else
        nws.Range("S21:S" & ind).value = ows.Range("S21:S" & ind).value
    End If
    
    nws.Range("T21:V" & ind).value = ows.Range("T21:V" & ind).value
End Sub
' sub -> ImportTransceiver
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> copy all the user entry cells from importing Transceiver sheet to corresponding Transceiver sheet in active workbook
Private Sub ImportTransceiver(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
    Set ows = owb.Worksheets("Transceiver")
    Set nws = nwb.Worksheets("Transceiver")
    nws.Range("B14:B37").value = ows.Range("B14:B37").value
    nws.Range("E14:E37").value = ows.Range("E14:E37").value
    nws.Range("F14:F37").value = ows.Range("F14:F37").value
    'nws.Range("G14:G37").value = ows.Range("G14:G37").value
    nws.Range("H14:H37").value = ows.Range("H14:H37").value
    
If old_vrtn_val <= 7 Then

        For i = 14 To 37
            If ows.Cells(i, 7) = "Transmitter" Then
                nws.Cells(i, 7) = "Tx Only"
            ElseIf ows.Cells(i, 7) = "Receiver" Then
                nws.Cells(i, 7) = "Rx Only"
            Else
                nws.Cells(i, 7) = ows.Cells(i, 7)
            End If
        Next i
        
        If old_vrtn_val < 4 Then
            nws.Range("I14:I37").value = ows.Range("I14:I37").value
            nws.Range("J14:J37").value = ows.Range("J14:J37").value
            nws.Range("K14:K37").value = ows.Range("K14:K37").value
            'CTLE changes setting
            Dim ctle_drv As String
            For i = 14 To 37
                ctle_drv = ows.Cells(i, 12)
                If ctle_drv = "0" Then
                    nws.Cells(i, 12) = "No_Peak_+10.7dB"
                ElseIf ctle_drv = "1" Then
                    nws.Cells(i, 12) = "6GHz_+3.0dB_1.7dB"
                ElseIf ctle_drv = "2" Then
                    nws.Cells(i, 12) = "5GHz_+3.0dB_3.3dB"
                ElseIf ctle_drv = "3" Then
                    nws.Cells(i, 12) = "3GHz_+0.8dB_5.4dB"
                End If
            Next i
            'Tx-amplitude changes settings
            Dim tx_amp As String
            For i = 14 To 37
                tx_amp = ows.Cells(i, 14)
                If tx_amp = "147.6" Then
                    nws.Cells(i, 14) = "100mV with 0dB"
                ElseIf tx_amp = "195.3" Then
                    nws.Cells(i, 14) = "200mV with 0dB"
                ElseIf tx_amp = "270" Then
                    nws.Cells(i, 14) = "200mV with 0dB"
                ElseIf tx_amp = "297" Then
                    nws.Cells(i, 14) = "200mV with -4.4dB"
                ElseIf tx_amp = "412.2" Then
                    nws.Cells(i, 14) = "400mV with -4.4dB"
                ElseIf tx_amp = "451.8" Then
                    nws.Cells(i, 14) = "400mV with -4.4dB"
                ElseIf tx_amp = "504" Then
                    nws.Cells(i, 14) = "400mV with 0dB"
                ElseIf tx_amp = "637.2" Then
                    nws.Cells(i, 14) = "500mV with 0dB"
                ElseIf tx_amp = "750.6" Then
                    nws.Cells(i, 14) = "600mV with -3.5dB"
                ElseIf tx_amp = "771.3" Then
                    nws.Cells(i, 14) = "600mV with -3.5dB"
                ElseIf tx_amp = "982.8" Then
                    nws.Cells(i, 14) = "800mV with -6.0dB"
                ElseIf tx_amp = "1026" Then
                    nws.Cells(i, 14) = "1000mV with -6dB"
                End If
            Next i
        ElseIf old_vrtn_val = 5 Then
            nws.Range("I14:I37").value = ows.Range("I14:I37").value
            nws.Range("J14:J37").value = ows.Range("J14:J37").value
            nws.Range("K14:K37").value = ows.Range("K14:K37").value
            'CTLE values are not imported.
            nws.Range("N14:N37").value = ows.Range("N14:N37").value
        ElseIf old_vrtn_val = 6 Or old_vrtn_val = 7 Then
            
            nws.Range("I14:I37").value = ows.Range("H14:H37").value
            nws.Range("J14:J37").value = ows.Range("I14:I37").value
            nws.Range("K14:K37").value = ows.Range("J14:J37").value
            nws.Range("L14:L37").value = ows.Range("K14:K37").value
            nws.Range("M14:M37").value = ows.Range("L14:L37").value
            nws.Range("N14:N37").value = ows.Range("N14:N37").value
        End If
Else
    nws.Range("G14:G37").value = ows.Range("G14:G37").value
    nws.Range("I14:I37").value = ows.Range("I14:I37").value
    nws.Range("J14:J37").value = ows.Range("J14:J37").value
    nws.Range("K14:K37").value = ows.Range("K14:K37").value
    nws.Range("L14:L37").value = ows.Range("L14:L37").value
    nws.Range("M14:M37").value = ows.Range("M14:M37").value
    nws.Range("N14:N37").value = ows.Range("N14:N37").value
End If

    nws.Range("O14:O37").value = ows.Range("O14:O37").value
    nws.Range("P14:P37").value = ows.Range("P14:P37").value
    nws.Range("Q14:Q37").value = ows.Range("Q14:Q37").value
End Sub
' sub -> ImportPLL & DLL
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> copy all the user entry cells from importing PLL & DLL sheet to corresponding PLL & DLL sheet in active workbook
Private Sub ImportPLLDLL(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
    Set ows = owb.Worksheets("PLL & DLL")
    Set nws = nwb.Worksheets("PLL & DLL")
    nws.Range("B17:I24").value = ows.Range("B17:I24").value
    nws.Range("J17:J24").value = ows.Range("J17:J24").value
    '####Max and Min VCO options support.
    If old_vrtn_val <= 7 Then
        Set r = nws.Range("J17:J24")
        For Each cell In r
            If cell.value = "Low Jitter" Then
                cell.value = "Max VCO for Low Jitter"
            ElseIf cell.value = "Low Power" Then
                cell.value = "Min VCO for Low Power"
            End If
        Next
    End If '####
    
    'DLL
    nws.Range("B28:E35").value = ows.Range("B28:E35").value
End Sub
' sub -> ImportMisc
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> copy all the user entry cells from importing "Misc" sheet to corresponding "Misc" sheet in active workbook
Private Sub ImportMisc(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
    If old_vrtn_val = 1 Or old_vrtn_val = 2 Then
        Set ows = owb.Worksheets("Misc (Security)")
    Else
        Set ows = owb.Worksheets("User Crypto")
    End If
    Set nws = nwb.Worksheets("User Crypto")
    nws.Range("E12:F12").value = ows.Range("E12:F12").value
    
End Sub
Private Sub LSRAM_snapshotimport_sub(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
   ' Dim ows As Worksheet
    'Set ows = owb.Worksheets("Snapshot")
   ' Set nws = nwb.Worksheets("Snapshot")
            If old_vrtn_val < 5 Then
                '1st scenario
                nwb.Worksheets("lsram_snap").Range("A1:D260").value = owb.Worksheets("lsram_snap").Range("A1:D260").value ' name, #block, A_width, A_clk
                nwb.Worksheets("lsram_snap").Range("E9:E250").value = "Simple Write"    'A_Write Mode
                nwb.Worksheets("lsram_snap").Range("F1:F260").value = owb.Worksheets("lsram_snap").Range("E1:E260").value ' A_write,
                nwb.Worksheets("lsram_snap").Range("G1:G260").value = owb.Worksheets("lsram_snap").Range("E1:E260").value ' A_write rate copying to A_read rate
                
                Set r = nwb.Worksheets("lsram_snap").Range("G9:G250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("H1:H260").value = owb.Worksheets("lsram_snap").Range("F1:F260").value ' A_Enable
                nwb.Worksheets("lsram_snap").Range("I1:I260").value = owb.Worksheets("lsram_snap").Range("C1:C260").value  'B_width
                nwb.Worksheets("lsram_snap").Range("J1:J260").value = owb.Worksheets("lsram_snap").Range("G1:G260").value 'B_clk
                nwb.Worksheets("lsram_snap").Range("K9:K250").value = "Simple Write"    'B_Write Mode
                nwb.Worksheets("lsram_snap").Range("L1:L260").value = owb.Worksheets("lsram_snap").Range("H1:H260").value 'B_write
                nwb.Worksheets("lsram_snap").Range("M1:M260").value = owb.Worksheets("lsram_snap").Range("H1:H260").value 'B_write rate copying to A_read rate
                
                Set r = nwb.Worksheets("lsram_snap").Range("M9:M250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("N1:N260").value = owb.Worksheets("lsram_snap").Range("I1:I260").value 'B_Enable
                nwb.Worksheets("lsram_snap").Range("O9:O250").value = "No" 'Pipeline
                nwb.Worksheets("lsram_snap").Range("P9:P250").value = "No" 'ECC
                nwb.Worksheets("lsram_snap").Range("Q1:Q260").value = owb.Worksheets("lsram_snap").Range("J1:J260").value 'Toggel rate
            
                '2nd scenario
                nwb.Worksheets("lsram_snap").Range("R1:U260").value = owb.Worksheets("lsram_snap").Range("K1:N260").value
                nwb.Worksheets("lsram_snap").Range("V9:V250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("W1:W260").value = owb.Worksheets("lsram_snap").Range("O1:O260").value
                nwb.Worksheets("lsram_snap").Range("X1:X260").value = owb.Worksheets("lsram_snap").Range("O1:O260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("X9:X250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("Y1:Y260").value = owb.Worksheets("lsram_snap").Range("P1:P260").value
                nwb.Worksheets("lsram_snap").Range("Z1:Z260").value = owb.Worksheets("lsram_snap").Range("M1:M260").value
                nwb.Worksheets("lsram_snap").Range("AA1:AA260").value = owb.Worksheets("lsram_snap").Range("Q1:Q260").value
                nwb.Worksheets("lsram_snap").Range("AB9:AB250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("AC1:AC260").value = owb.Worksheets("lsram_snap").Range("R1:R260").value
                nwb.Worksheets("lsram_snap").Range("AD1:AD260").value = owb.Worksheets("lsram_snap").Range("R1:R260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("AD9:AD250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("AE1:AE260").value = owb.Worksheets("lsram_snap").Range("S1:S260").value
                nwb.Worksheets("lsram_snap").Range("AF9:AF250").value = "No"
                nwb.Worksheets("lsram_snap").Range("AG9:AG250").value = "No"
                nwb.Worksheets("lsram_snap").Range("AH1:AH260").value = owb.Worksheets("lsram_snap").Range("T1:T260").value
            
                '3rd scenario
                nwb.Worksheets("lsram_snap").Range("AI1:AL260").value = owb.Worksheets("lsram_snap").Range("U1:X260").value
                nwb.Worksheets("lsram_snap").Range("AM9:AM250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("AN1:AN260").value = owb.Worksheets("lsram_snap").Range("Y1:Y260").value
                nwb.Worksheets("lsram_snap").Range("AO1:AO260").value = owb.Worksheets("lsram_snap").Range("Y1:Y260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("AO9:AO250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("AP1:AP260").value = owb.Worksheets("lsram_snap").Range("Z1:Z260").value
                nwb.Worksheets("lsram_snap").Range("AQ1:AQ260").value = owb.Worksheets("lsram_snap").Range("W1:W260").value
                nwb.Worksheets("lsram_snap").Range("AR1:AR260").value = owb.Worksheets("lsram_snap").Range("AA1:AA260").value
                nwb.Worksheets("lsram_snap").Range("AS9:AS250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("AT1:AT260").value = owb.Worksheets("lsram_snap").Range("AB1:AB260").value
                nwb.Worksheets("lsram_snap").Range("AU1:AU260").value = owb.Worksheets("lsram_snap").Range("AB1:AB260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("AU9:AU250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("AV1:AV260").value = owb.Worksheets("lsram_snap").Range("AC1:AC260").value
                nwb.Worksheets("lsram_snap").Range("AW9:AW250").value = "No"
                nwb.Worksheets("lsram_snap").Range("AX9:AX250").value = "No"
                nwb.Worksheets("lsram_snap").Range("AY1:AY260").value = owb.Worksheets("lsram_snap").Range("AD1:AD260").value
                
                '4th scenario
                nwb.Worksheets("lsram_snap").Range("AZ1:BC260").value = owb.Worksheets("lsram_snap").Range("AE1:AH260").value
                nwb.Worksheets("lsram_snap").Range("BD9:BD250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("BE1:BE260").value = owb.Worksheets("lsram_snap").Range("AI1:AI260").value
                nwb.Worksheets("lsram_snap").Range("BF1:BF260").value = owb.Worksheets("lsram_snap").Range("AI1:AI260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("BF9:BF250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("BG1:BG260").value = owb.Worksheets("lsram_snap").Range("AJ1:AJ260").value
                nwb.Worksheets("lsram_snap").Range("BH1:BH260").value = owb.Worksheets("lsram_snap").Range("AG1:AG260").value
                nwb.Worksheets("lsram_snap").Range("BI1:BI260").value = owb.Worksheets("lsram_snap").Range("AK1:AK260").value
                nwb.Worksheets("lsram_snap").Range("BJ9:BJ250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("BK1:BK260").value = owb.Worksheets("lsram_snap").Range("AL1:AL260").value
                nwb.Worksheets("lsram_snap").Range("BL1:BL260").value = owb.Worksheets("lsram_snap").Range("AL1:AL260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("BL9:BL250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("BM1:BM260").value = owb.Worksheets("lsram_snap").Range("AM1:AM260").value
                nwb.Worksheets("lsram_snap").Range("BN9:BN250").value = "No"
                nwb.Worksheets("lsram_snap").Range("BO9:BO250").value = "No"
                nwb.Worksheets("lsram_snap").Range("BP1:BP260").value = owb.Worksheets("lsram_snap").Range("AN1:AN260").value
            
                '5th scenario
                nwb.Worksheets("lsram_snap").Range("BQ1:BT260").value = owb.Worksheets("lsram_snap").Range("AO1:AR260").value
                nwb.Worksheets("lsram_snap").Range("BU9:BU250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("BV1:BV260").value = owb.Worksheets("lsram_snap").Range("AS1:AS260").value
                nwb.Worksheets("lsram_snap").Range("BW1:BW260").value = owb.Worksheets("lsram_snap").Range("AS1:AS260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("BW9:BW250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("BX1:BX260").value = owb.Worksheets("lsram_snap").Range("AT1:AT260").value
                nwb.Worksheets("lsram_snap").Range("BY1:BY260").value = owb.Worksheets("lsram_snap").Range("AQ1:AQ260").value
                nwb.Worksheets("lsram_snap").Range("BZ1:BZ260").value = owb.Worksheets("lsram_snap").Range("AU1:AU260").value
                nwb.Worksheets("lsram_snap").Range("CA9:CA250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("CB1:CB260").value = owb.Worksheets("lsram_snap").Range("AV1:AV260").value
                nwb.Worksheets("lsram_snap").Range("CC1:CC260").value = owb.Worksheets("lsram_snap").Range("AV1:AV260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("CC9:CC250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("CD1:CD260").value = owb.Worksheets("lsram_snap").Range("AW1:AW260").value
                nwb.Worksheets("lsram_snap").Range("CE9:CE250").value = "No"
                nwb.Worksheets("lsram_snap").Range("CF9:CF250").value = "No"
                nwb.Worksheets("lsram_snap").Range("CG1:CG260").value = owb.Worksheets("lsram_snap").Range("AX1:AX260").value
            
                '6th scenario
                nwb.Worksheets("lsram_snap").Range("CH1:CK260").value = owb.Worksheets("lsram_snap").Range("AY1:BB260").value
                nwb.Worksheets("lsram_snap").Range("CL9:CL250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("CM1:CM260").value = owb.Worksheets("lsram_snap").Range("BC1:BC260").value
                nwb.Worksheets("lsram_snap").Range("CN1:CN260").value = owb.Worksheets("lsram_snap").Range("BC1:BC260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("CN9:CN250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("CO1:CO260").value = owb.Worksheets("lsram_snap").Range("BD1:BD260").value
                nwb.Worksheets("lsram_snap").Range("CP1:CP260").value = owb.Worksheets("lsram_snap").Range("BA1:BA260").value
                nwb.Worksheets("lsram_snap").Range("CQ1:CQ260").value = owb.Worksheets("lsram_snap").Range("BE1:BE260").value
                nwb.Worksheets("lsram_snap").Range("CR9:CR250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("CS1:CS260").value = owb.Worksheets("lsram_snap").Range("BF1:BF260").value
                nwb.Worksheets("lsram_snap").Range("CT1:CT260").value = owb.Worksheets("lsram_snap").Range("BF1:BF260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("CT9:CT250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("CU1:CU260").value = owb.Worksheets("lsram_snap").Range("BG1:BG260").value
                nwb.Worksheets("lsram_snap").Range("CV9:CV250").value = "No"
                nwb.Worksheets("lsram_snap").Range("CW9:CW250").value = "No"
                nwb.Worksheets("lsram_snap").Range("CX1:CX260").value = owb.Worksheets("lsram_snap").Range("BH1:BH260").value
            
                '7th scenario
                nwb.Worksheets("lsram_snap").Range("CY1:DB260").value = owb.Worksheets("lsram_snap").Range("BI1:BL260").value
                nwb.Worksheets("lsram_snap").Range("DC9:DC250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("DD1:DD260").value = owb.Worksheets("lsram_snap").Range("BM1:BM260").value
                nwb.Worksheets("lsram_snap").Range("DE1:DE260").value = owb.Worksheets("lsram_snap").Range("BM1:BM260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("DE9:DE250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("DF1:DF260").value = owb.Worksheets("lsram_snap").Range("BN1:BN260").value
                nwb.Worksheets("lsram_snap").Range("DG1:DG260").value = owb.Worksheets("lsram_snap").Range("BK1:BK260").value
                nwb.Worksheets("lsram_snap").Range("DH1:DH260").value = owb.Worksheets("lsram_snap").Range("BO1:BO260").value
                nwb.Worksheets("lsram_snap").Range("DI9:DI250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("DJ1:DJ260").value = owb.Worksheets("lsram_snap").Range("BP1:BP260").value
                nwb.Worksheets("lsram_snap").Range("DK1:DK260").value = owb.Worksheets("lsram_snap").Range("BP1:BP260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("DK9:DK250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("DL1:DL260").value = owb.Worksheets("lsram_snap").Range("BQ1:BQ260").value
                nwb.Worksheets("lsram_snap").Range("DM9:DM250").value = "No"
                nwb.Worksheets("lsram_snap").Range("DN9:DN250").value = "No"
                nwb.Worksheets("lsram_snap").Range("DO1:DO260").value = owb.Worksheets("lsram_snap").Range("BR1:BR260").value
            
                '8th scenario
                nwb.Worksheets("lsram_snap").Range("DP1:DS260").value = owb.Worksheets("lsram_snap").Range("BS1:BV260").value
                nwb.Worksheets("lsram_snap").Range("DT9:DT250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("DU1:DU260").value = owb.Worksheets("lsram_snap").Range("BW1:BW260").value
                nwb.Worksheets("lsram_snap").Range("DV1:DV260").value = owb.Worksheets("lsram_snap").Range("BW1:BW260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("DV9:DV250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("DW1:DW260").value = owb.Worksheets("lsram_snap").Range("BX1:BX260").value
                nwb.Worksheets("lsram_snap").Range("DX1:DX260").value = owb.Worksheets("lsram_snap").Range("BU1:BU260").value
                nwb.Worksheets("lsram_snap").Range("DY1:DY260").value = owb.Worksheets("lsram_snap").Range("BY1:BY260").value
                nwb.Worksheets("lsram_snap").Range("DZ9:DZ250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("EA1:EA260").value = owb.Worksheets("lsram_snap").Range("BZ1:BZ260").value
                nwb.Worksheets("lsram_snap").Range("EB1:EB260").value = owb.Worksheets("lsram_snap").Range("BZ1:BZ260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("EB9:EB250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("EC1:EC260").value = owb.Worksheets("lsram_snap").Range("CA1:CA260").value
                nwb.Worksheets("lsram_snap").Range("ED9:ED250").value = "No"
                nwb.Worksheets("lsram_snap").Range("EE9:EE250").value = "No"
                nwb.Worksheets("lsram_snap").Range("EF1:EF260").value = owb.Worksheets("lsram_snap").Range("CB1:CB260").value
            
                '9th scenario
                nwb.Worksheets("lsram_snap").Range("EG1:EJ260").value = owb.Worksheets("lsram_snap").Range("CC1:CF260").value
                nwb.Worksheets("lsram_snap").Range("EK9:EK250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("EL1:EL260").value = owb.Worksheets("lsram_snap").Range("CG1:CG260").value
                nwb.Worksheets("lsram_snap").Range("EM1:EM260").value = owb.Worksheets("lsram_snap").Range("CG1:CG260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("EM9:EM250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("EN1:EN260").value = owb.Worksheets("lsram_snap").Range("CH1:CH260").value
                nwb.Worksheets("lsram_snap").Range("EO1:EO260").value = owb.Worksheets("lsram_snap").Range("CE1:CE260").value
                nwb.Worksheets("lsram_snap").Range("EP1:EP260").value = owb.Worksheets("lsram_snap").Range("CI1:CI260").value
                nwb.Worksheets("lsram_snap").Range("EQ9:EQ250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("ER1:ER260").value = owb.Worksheets("lsram_snap").Range("CJ1:CJ260").value
                nwb.Worksheets("lsram_snap").Range("ES1:ES260").value = owb.Worksheets("lsram_snap").Range("CJ1:CJ260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("ES9:ES250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("ET1:ET260").value = owb.Worksheets("lsram_snap").Range("CK1:CK260").value
                nwb.Worksheets("lsram_snap").Range("EU9:EU250").value = "No"
                nwb.Worksheets("lsram_snap").Range("EV9:EV250").value = "No"
                nwb.Worksheets("lsram_snap").Range("EW1:EW260").value = owb.Worksheets("lsram_snap").Range("CL1:CL260").value
                
                '10th scenario
                nwb.Worksheets("lsram_snap").Range("EX1:FA260").value = owb.Worksheets("lsram_snap").Range("CM1:CP260").value
                nwb.Worksheets("lsram_snap").Range("FB9:FB250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("FC1:FC260").value = owb.Worksheets("lsram_snap").Range("CQ1:CQ260").value
                nwb.Worksheets("lsram_snap").Range("FD1:FD260").value = owb.Worksheets("lsram_snap").Range("CQ1:CQ260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("FD9:FD250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("FE1:FE260").value = owb.Worksheets("lsram_snap").Range("CR1:CR260").value
                nwb.Worksheets("lsram_snap").Range("FF1:FF260").value = owb.Worksheets("lsram_snap").Range("CO1:CO260").value
                nwb.Worksheets("lsram_snap").Range("FG1:FG260").value = owb.Worksheets("lsram_snap").Range("CS1:CS260").value
                nwb.Worksheets("lsram_snap").Range("FH9:FH250").value = "Simple Write"
                nwb.Worksheets("lsram_snap").Range("FI1:FI260").value = owb.Worksheets("lsram_snap").Range("CT1:CT260").value
                nwb.Worksheets("lsram_snap").Range("FJ1:FJ260").value = owb.Worksheets("lsram_snap").Range("CT1:CT260").value
                
                Set r = nwb.Worksheets("lsram_snap").Range("FJ9:FJ250")
                For Each cell In r
                    If cell.value <> 0.125 Then
                        cell.value = 1 - cell.value
                    End If
                Next
                
                nwb.Worksheets("lsram_snap").Range("FK1:FK260").value = owb.Worksheets("lsram_snap").Range("CU1:CU260").value
                nwb.Worksheets("lsram_snap").Range("FL9:FL250").value = "No"
                nwb.Worksheets("lsram_snap").Range("FM9:FM250").value = "No"
                nwb.Worksheets("lsram_snap").Range("FN1:FN260").value = owb.Worksheets("lsram_snap").Range("CV1:CV260").value
        Else
            nwb.Worksheets("lsram_snap").Range("A1:GZ260").value = owb.Worksheets("lsram_snap").Range("A1:GZ260").value
        End If

End Sub
Sub Tx_amp_options_mapsub(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal column As Integer)
    Dim ows As Worksheet
    Set ows = owb.Worksheets("Transceiver_snap")
    Set nws = nwb.Worksheets("Transceiver_snap")
    Dim tx_amp As String
        
        For i = 14 To 37
            tx_amp = ows.Cells(i, column)
            If tx_amp = "147.6" Then
                nws.Cells(i, column) = "100mV with 0dB"
            ElseIf tx_amp = "195.3" Then
                nws.Cells(i, column) = "200mV with 0dB"
            ElseIf tx_amp = "270" Then
                nws.Cells(i, column) = "200mV with 0dB"
            ElseIf tx_amp = "297" Then
                nws.Cells(i, column) = "200mV with -4.4dB"
            ElseIf tx_amp = "412.2" Then
                nws.Cells(i, column) = "400mV with -4.4dB"
            ElseIf tx_amp = "451.8" Then
                nws.Cells(i, column) = "400mV with -4.4dB"
            ElseIf tx_amp = "504" Then
                nws.Cells(i, column) = "400mV with 0dB"
            ElseIf tx_amp = "637.2" Then
                nws.Cells(i, column) = "500mV with 0dB"
            ElseIf tx_amp = "750.6" Then
                nws.Cells(i, column) = "600mV with -3.5dB"
            ElseIf tx_amp = "771.3" Then
                nws.Cells(i, column) = "600mV with -3.5dB"
            ElseIf tx_amp = "982.8" Then
                nws.Cells(i, column) = "800mV with -6.0dB"
            ElseIf tx_amp = "1026" Then
                nws.Cells(i, column) = "1000mV with -6dB"
            End If
        Next i
    
End Sub
Sub CTLE_options_mapsub(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal column As Integer)
    Dim ows As Worksheet
    Set ows = owb.Worksheets("Transceiver_snap")
    Set nws = nwb.Worksheets("Transceiver_snap")
    Dim ctle_drv As String
        For i = 14 To 37
            ctle_drv = ows.Cells(i, column)
            If ctle_drv = "0" Then
                nws.Cells(i, column) = "No_Peak_+10.7dB"
            ElseIf ctle_drv = "1" Then
                nws.Cells(i, column) = "6GHz_+3.0dB_1.7dB"
            ElseIf ctle_drv = "2" Then
                nws.Cells(i, column) = "5GHz_+3.0dB_3.3dB"
            ElseIf ctle_drv = "3" Then
                nws.Cells(i, column) = "3GHz_+0.8dB_5.4dB"
            End If
        Next i
End Sub
Private Sub Transceiver_snapshotimport_sub(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
    Dim ows As Worksheet
    Set ows = owb.Worksheets("Transceiver_snap")
    Set nws = nwb.Worksheets("Transceiver_snap")
            
            If old_vrtn_val <= 3 Then
               nwb.Worksheets("Transceiver_snap").Range("A1:H40").value = owb.Worksheets("Transceiver_snap").Range("A1:H40").value
                CTLE_options_mapsub owb, nwb, 9  'i=9 column
                nwb.Worksheets("Transceiver_snap").Range("J1:J40").value = owb.Worksheets("Transceiver_snap").Range("J1:J40").value
                Tx_amp_options_mapsub owb, nwb, 11     'K=11 column
                nwb.Worksheets("Transceiver_snap").Range("L1:V40").value = owb.Worksheets("Transceiver_snap").Range("L1:V40").value
                CTLE_options_mapsub owb, nwb, 23  'W=23 column
                nwb.Worksheets("Transceiver_snap").Range("X1:X40").value = owb.Worksheets("Transceiver_snap").Range("X1:X40").value
                Tx_amp_options_mapsub owb, nwb, 25    'Y=25 column
                nwb.Worksheets("Transceiver_snap").Range("Z1:AJ40").value = owb.Worksheets("Transceiver_snap").Range("Z1:AJ40").value
                CTLE_options_mapsub owb, nwb, 37 'AK=37 column
                nwb.Worksheets("Transceiver_snap").Range("AL1:AL40").value = owb.Worksheets("Transceiver_snap").Range("AL1:AL40").value
                Tx_amp_options_mapsub owb, nwb, 39    'AM=39 column
                nwb.Worksheets("Transceiver_snap").Range("AN1:AX40").value = owb.Worksheets("Transceiver_snap").Range("AN1:AX40").value
                CTLE_options_mapsub owb, nwb, 51 'AY=51 column
                nwb.Worksheets("Transceiver_snap").Range("AZ1:AZ40").value = owb.Worksheets("Transceiver_snap").Range("AZ1:AZ40").value
                Tx_amp_options_mapsub owb, nwb, 53    'BA=53 column
                nwb.Worksheets("Transceiver_snap").Range("BB1:BL40").value = owb.Worksheets("Transceiver_snap").Range("BB1:BL40").value
                CTLE_options_mapsub owb, nwb, 65  'BM=65 column
                nwb.Worksheets("Transceiver_snap").Range("BN1:BN40").value = owb.Worksheets("Transceiver_snap").Range("BN1:BN40").value
                Tx_amp_options_mapsub owb, nwb, 67    'BO=67 column
                nwb.Worksheets("Transceiver_snap").Range("BP1:BZ40").value = owb.Worksheets("Transceiver_snap").Range("BP1:BZ40").value
                CTLE_options_mapsub owb, nwb, 79 'CA=79 column
                nwb.Worksheets("Transceiver_snap").Range("CB1:CB40").value = owb.Worksheets("Transceiver_snap").Range("CB1:CB40").value
                Tx_amp_options_mapsub owb, nwb, 81    'CC=81 column
                nwb.Worksheets("Transceiver_snap").Range("CD1:CN40").value = owb.Worksheets("Transceiver_snap").Range("CD1:CN40").value
                CTLE_options_mapsub owb, nwb, 93 'CO=93 column
                nwb.Worksheets("Transceiver_snap").Range("CP1:CP40").value = owb.Worksheets("Transceiver_snap").Range("CP1:CP40").value
                Tx_amp_options_mapsub owb, nwb, 95    'CQ=95 column
                nwb.Worksheets("Transceiver_snap").Range("CR1:DB40").value = owb.Worksheets("Transceiver_snap").Range("CR1:DB40").value
                CTLE_options_mapsub owb, nwb, 107  'DC=107 column
                nwb.Worksheets("Transceiver_snap").Range("DD1:DD40").value = owb.Worksheets("Transceiver_snap").Range("DD1:DD40").value
                Tx_amp_options_mapsub owb, nwb, 109    'DE=109 column
                nwb.Worksheets("Transceiver_snap").Range("DF1:DP40").value = owb.Worksheets("Transceiver_snap").Range("DF1:DP40").value
                CTLE_options_mapsub owb, nwb, 121 'DQ=121 column
                nwb.Worksheets("Transceiver_snap").Range("DR1:DR40").value = owb.Worksheets("Transceiver_snap").Range("DR1:DR40").value
                Tx_amp_options_mapsub owb, nwb, 123    'DS=123 column
                nwb.Worksheets("Transceiver_snap").Range("DT1:ED40").value = owb.Worksheets("Transceiver_snap").Range("DT1:ED40").value
                CTLE_options_mapsub owb, nwb, 135 'EE=135 column
                nwb.Worksheets("Transceiver_snap").Range("EF1:EF40").value = owb.Worksheets("Transceiver_snap").Range("EF1:EF40").value
                Tx_amp_options_mapsub owb, nwb, 137    'EG=137 column
                nwb.Worksheets("Transceiver_snap").Range("EH1:EL40").value = owb.Worksheets("Transceiver_snap").Range("EH1:EL40").value
            ElseIf old_vrtn_val = 5 Then
                nwb.Worksheets("Transceiver_snap").Range("A1:H40").value = owb.Worksheets("Transceiver_snap").Range("A1:H40").value
                'I CLTE value
                nwb.Worksheets("Transceiver_snap").Range("I14:I37").value = nwb.Worksheets("Transceiver").Range("L14:L37").value
                nwb.Worksheets("Transceiver_snap").Range("J1:V40").value = owb.Worksheets("Transceiver_snap").Range("J1:V40").value
                'W CTLE value
                nwb.Worksheets("Transceiver_snap").Range("W14:W37").value = nwb.Worksheets("Transceiver").Range("L14:L37").value
                nwb.Worksheets("Transceiver_snap").Range("X1:AJ40").value = owb.Worksheets("Transceiver_snap").Range("X1:AJ40").value
                'AK CTLE value
                nwb.Worksheets("Transceiver_snap").Range("AK14:AK37").value = nwb.Worksheets("Transceiver").Range("L14:L37").value
                nwb.Worksheets("Transceiver_snap").Range("AL1:AX40").value = owb.Worksheets("Transceiver_snap").Range("AL1:AX40").value
                'AY CTLE value
                nwb.Worksheets("Transceiver_snap").Range("AY14:AY37").value = nwb.Worksheets("Transceiver").Range("L14:L37").value
                nwb.Worksheets("Transceiver_snap").Range("AZ1:BL40").value = owb.Worksheets("Transceiver_snap").Range("AZ1:BL40").value
                'BM CTLE Value
                nwb.Worksheets("Transceiver_snap").Range("BM14:BM37").value = nwb.Worksheets("Transceiver").Range("L14:L37").value
                nwb.Worksheets("Transceiver_snap").Range("BN1:BZ40").value = owb.Worksheets("Transceiver_snap").Range("BN1:BZ40").value
                'CA CTLE value
                nwb.Worksheets("Transceiver_snap").Range("CA14:CA37").value = nwb.Worksheets("Transceiver").Range("L14:L37").value
                nwb.Worksheets("Transceiver_snap").Range("CB1:CN40").value = owb.Worksheets("Transceiver_snap").Range("CB1:CN40").value
                'CO CTLE value
                nwb.Worksheets("Transceiver_snap").Range("CO14:CO37").value = nwb.Worksheets("Transceiver").Range("L14:L37").value
                nwb.Worksheets("Transceiver_snap").Range("CP1:DB40").value = owb.Worksheets("Transceiver_snap").Range("CP1:DB40").value
                'DC CTLE value
                nwb.Worksheets("Transceiver_snap").Range("DC14:DC37").value = nwb.Worksheets("Transceiver").Range("L14:L37").value
                nwb.Worksheets("Transceiver_snap").Range("DD1:DP40").value = owb.Worksheets("Transceiver_snap").Range("DD1:DP40").value
                'DQ CTLE value
                nwb.Worksheets("Transceiver_snap").Range("DQ14:DQ37").value = nwb.Worksheets("Transceiver").Range("L14:L37").value
                nwb.Worksheets("Transceiver_snap").Range("DR1:ED40").value = owb.Worksheets("Transceiver_snap").Range("DR1:ED40").value
                'EE CTLE value
                nwb.Worksheets("Transceiver_snap").Range("EE14:EE37").value = nwb.Worksheets("Transceiver").Range("L14:L37").value
                nwb.Worksheets("Transceiver_snap").Range("EF1:EL40").value = owb.Worksheets("Transceiver_snap").Range("EF1:EL40").value
            ElseIf old_vrtn_val = 6 Or old_vrtn_val = 7 Then
                nwb.Worksheets("Transceiver_snap").Range("A1:E40").value = owb.Worksheets("Transceiver_snap").Range("A1:E40").value
                nwb.Worksheets("Transceiver_snap").Range("F1:F40").value = owb.Worksheets("Transceiver_snap").Range("E1:E40").value
                nwb.Worksheets("Transceiver_snap").Range("G1:J40").value = owb.Worksheets("Transceiver_snap").Range("F1:I40").value
                
                nwb.Worksheets("Transceiver_snap").Range("K1:S40").value = owb.Worksheets("Transceiver_snap").Range("K1:S40").value
                nwb.Worksheets("Transceiver_snap").Range("T1:T40").value = owb.Worksheets("Transceiver_snap").Range("S1:S40").value
                nwb.Worksheets("Transceiver_snap").Range("U1:X40").value = owb.Worksheets("Transceiver_snap").Range("T1:W40").value
                
                nwb.Worksheets("Transceiver_snap").Range("Y1:AG40").value = owb.Worksheets("Transceiver_snap").Range("Y1:AG40").value
                nwb.Worksheets("Transceiver_snap").Range("AH1:AH40").value = owb.Worksheets("Transceiver_snap").Range("AG1:AG40").value
                nwb.Worksheets("Transceiver_snap").Range("AI1:AL40").value = owb.Worksheets("Transceiver_snap").Range("AH1:AK40").value
                
                nwb.Worksheets("Transceiver_snap").Range("AM1:AU40").value = owb.Worksheets("Transceiver_snap").Range("AM1:AU40").value
                nwb.Worksheets("Transceiver_snap").Range("AV1:AV40").value = owb.Worksheets("Transceiver_snap").Range("AU1:AU40").value
                nwb.Worksheets("Transceiver_snap").Range("AW1:AZ40").value = owb.Worksheets("Transceiver_snap").Range("AV1:AY40").value
                
                nwb.Worksheets("Transceiver_snap").Range("BA1:BI40").value = owb.Worksheets("Transceiver_snap").Range("BA1:BI40").value
                nwb.Worksheets("Transceiver_snap").Range("BJ1:BJ40").value = owb.Worksheets("Transceiver_snap").Range("BI1:BI40").value
                nwb.Worksheets("Transceiver_snap").Range("BK1:BN40").value = owb.Worksheets("Transceiver_snap").Range("BJ1:BM40").value
                
                nwb.Worksheets("Transceiver_snap").Range("BO1:BW40").value = owb.Worksheets("Transceiver_snap").Range("BO1:BW40").value
                nwb.Worksheets("Transceiver_snap").Range("BX1:BX40").value = owb.Worksheets("Transceiver_snap").Range("BW1:BW40").value
                nwb.Worksheets("Transceiver_snap").Range("BY1:CB40").value = owb.Worksheets("Transceiver_snap").Range("BX1:CA40").value
                
                nwb.Worksheets("Transceiver_snap").Range("CC1:CK40").value = owb.Worksheets("Transceiver_snap").Range("CC1:CK40").value
                nwb.Worksheets("Transceiver_snap").Range("CL1:CL40").value = owb.Worksheets("Transceiver_snap").Range("CK1:CK40").value
                nwb.Worksheets("Transceiver_snap").Range("CM1:CP40").value = owb.Worksheets("Transceiver_snap").Range("CL1:CO40").value
                
                nwb.Worksheets("Transceiver_snap").Range("CQ1:CY40").value = owb.Worksheets("Transceiver_snap").Range("CQ1:CY40").value
                nwb.Worksheets("Transceiver_snap").Range("CZ1:CZ40").value = owb.Worksheets("Transceiver_snap").Range("CY1:CY40").value
                nwb.Worksheets("Transceiver_snap").Range("DA1:DD40").value = owb.Worksheets("Transceiver_snap").Range("CZ1:DC40").value
                
                nwb.Worksheets("Transceiver_snap").Range("DE1:DM40").value = owb.Worksheets("Transceiver_snap").Range("DE1:DM40").value
                nwb.Worksheets("Transceiver_snap").Range("DN1:DN40").value = owb.Worksheets("Transceiver_snap").Range("DM1:DM40").value
                nwb.Worksheets("Transceiver_snap").Range("DO1:DR40").value = owb.Worksheets("Transceiver_snap").Range("DN1:DQ40").value
                
                nwb.Worksheets("Transceiver_snap").Range("DS1:EA40").value = owb.Worksheets("Transceiver_snap").Range("DS1:EA40").value
                nwb.Worksheets("Transceiver_snap").Range("EB1:EB40").value = owb.Worksheets("Transceiver_snap").Range("EA1:EA40").value
                nwb.Worksheets("Transceiver_snap").Range("EC1:EF40").value = owb.Worksheets("Transceiver_snap").Range("EB1:EE40").value
                
                nwb.Worksheets("Transceiver_snap").Range("EG1:EJ40").value = owb.Worksheets("Transceiver_snap").Range("EG1:EJ40").value
                
            Else
                nwb.Worksheets("Transceiver_snap").Range("A1:EL40").value = owb.Worksheets("Transceiver_snap").Range("A1:EL40").value
            End If
            
' In version-8 Operational mode column chaged. So all the version(<=7) need mapping.
' Addressing mapping for this column after imporitng all the data in XCVR snap sheet.
If old_vrtn_val <= 7 Then   '######
        Const nbcol = 10
        Dim cols(0 To nbcol - 1) As String
        cols(0) = "D"
        cols(1) = "R"
        cols(2) = "AF"
        cols(3) = "AT"
        cols(4) = "BH"
        cols(5) = "BV"
        cols(6) = "CJ"
        cols(7) = "CX"
        cols(8) = "DL"
        cols(9) = "DZ"
        For cindex = 0 To nbcol - 1
            c = cols(cindex)
            Set col = nws.Range(c & "14:" & c & "37")
            For Each cell In col
                If cell.value = "Transmitter" Then
                    cell.value = "Tx Only"
                ElseIf cell.value = "Receiver" Then
                    cell.value = "Rx Only"
                End If
            Next
        Next cindex
End If  '######

End Sub
Private Sub IO_snapshotimport_sub(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
    
    If old_vrtn_val <= 4 Then
        '1st scenario
        nwb.Worksheets("io_snap").Range("A1:B600").value = owb.Worksheets("io_snap").Range("A1:B600").value
        
        nwb.Worksheets("io_validation").Range("AE21:AE591").value = owb.Worksheets("io_snap").Range("B21:B591").value '1st scenario mapping
        nwb.Worksheets("io_validation").Range("AF21:AF591").value = owb.Worksheets("io_snap").Range("C21:C591").value '1st scenario mapping
        nwb.Worksheets("io_snap").Range("C21:C591").value = nwb.Worksheets("io_validation").Range("AG21:AG591").value '1st scenario mapping
        'D- VDDI
        
        Set r = Worksheets("io_snap").Range("C21:D591")
        For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 1).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 2).value = vol
        Next
        
        nwb.Worksheets("io_snap").Range("E1:G600").value = owb.Worksheets("io_snap").Range("D1:F600").value
        nwb.Worksheets("io_snap").Range("H21:H600").value = "Off"    'H-VCM
        nwb.Worksheets("io_snap").Range("I1:S600").value = owb.Worksheets("io_snap").Range("G1:Q600").value
        
        '2nd scenario
        nwb.Worksheets("io_snap").Range("T1:U600").value = owb.Worksheets("io_snap").Range("R1:S600").value
        
        nwb.Worksheets("io_validation").Range("AH21:AH591").value = owb.Worksheets("io_snap").Range("S21:S591").value '2nd scenario mapping
        nwb.Worksheets("io_validation").Range("AI21:AI591").value = owb.Worksheets("io_snap").Range("T21:T591").value '2nd scenario mapping
        nwb.Worksheets("io_snap").Range("V21:V591").value = nwb.Worksheets("io_validation").Range("AJ21:AJ591").value '2nd scenario mapping
        'w -VDDI
        
        Set r = Worksheets("io_snap").Range("V21:W591")
        For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 1).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 2).value = vol
        Next
        
        nwb.Worksheets("io_snap").Range("X1:Z600").value = owb.Worksheets("io_snap").Range("U1:W600").value
        nwb.Worksheets("io_snap").Range("AA21:AA600").value = "Off"    'AA-VCM
        nwb.Worksheets("io_snap").Range("AB1:AL600").value = owb.Worksheets("io_snap").Range("X1:AH600").value
        
        '3rd scenario
        nwb.Worksheets("io_snap").Range("AM1:AN600").value = owb.Worksheets("io_snap").Range("AI1:AJ600").value
        
        nwb.Worksheets("io_validation").Range("AK21:AK591").value = owb.Worksheets("io_snap").Range("AJ21:AJ591").value '3rd scenario mapping
        nwb.Worksheets("io_validation").Range("AL21:AL591").value = owb.Worksheets("io_snap").Range("AK21:AK591").value '3rd scenario mapping
        nwb.Worksheets("io_snap").Range("AO21:AO591").value = nwb.Worksheets("io_validation").Range("AM21:AM591").value '3rd scenario mapping
        'AP-VDDI
        
        Set r = Worksheets("io_snap").Range("AO21:AP591")
        For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 1).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 2).value = vol
        Next
        
        nwb.Worksheets("io_snap").Range("AQ1:AS600").value = owb.Worksheets("io_snap").Range("AL1:AN600").value
        nwb.Worksheets("io_snap").Range("AT21:AT600").value = "Off"  'AT-VCM
        nwb.Worksheets("io_snap").Range("AU1:BE600").value = owb.Worksheets("io_snap").Range("AO1:AY600").value
        
        '4th scenario
        nwb.Worksheets("io_snap").Range("BF1:BG600").value = owb.Worksheets("io_snap").Range("AZ1:BA600").value
        
        nwb.Worksheets("io_validation").Range("AN21:AN591").value = owb.Worksheets("io_snap").Range("BA21:BA591").value '4th scenario mapping
        nwb.Worksheets("io_validation").Range("AO21:AO591").value = owb.Worksheets("io_snap").Range("BB21:BB591").value '4th scenario mapping
        nwb.Worksheets("io_snap").Range("BH21:BH591").value = nwb.Worksheets("io_validation").Range("AP21:AP591").value '4th scenario mapping
        'BI-VDDI
        
        Set r = Worksheets("io_snap").Range("BH21:BI591")
        For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 1).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 2).value = vol
        Next
        
        nwb.Worksheets("io_snap").Range("BJ1:BL600").value = owb.Worksheets("io_snap").Range("BC1:BE600").value
        nwb.Worksheets("io_snap").Range("BM21:BM600").value = "Off"  'BM-VCM
        nwb.Worksheets("io_snap").Range("BN1:BX600").value = owb.Worksheets("io_snap").Range("BF1:BP600").value
        
        '5th scenario
        
        nwb.Worksheets("io_snap").Range("BY1:BZ600").value = owb.Worksheets("io_snap").Range("BQ1:BR600").value
        
        nwb.Worksheets("io_validation").Range("AQ21:AQ591").value = owb.Worksheets("io_snap").Range("BR21:BR591").value '5th scenario mapping
        nwb.Worksheets("io_validation").Range("AR21:AR591").value = owb.Worksheets("io_snap").Range("BS21:BS591").value '5th scenario mapping
        nwb.Worksheets("io_snap").Range("CA21:CA591").value = nwb.Worksheets("io_validation").Range("AS21:AS591").value '5th scenario mapping
        'CB-VDDI
        
        Set r = Worksheets("io_snap").Range("CA21:CB591")
        For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 1).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 2).value = vol
        Next
        
        nwb.Worksheets("io_snap").Range("CC1:CE600").value = owb.Worksheets("io_snap").Range("BT1:BV600").value
        nwb.Worksheets("io_snap").Range("CF21:CF600").value = "Off"  'CF-VCM
        nwb.Worksheets("io_snap").Range("CG1:CQ600").value = owb.Worksheets("io_snap").Range("BW1:CG600").value
    
        '6th scenario
        nwb.Worksheets("io_snap").Range("CR1:CS600").value = owb.Worksheets("io_snap").Range("CH1:CI600").value
        
        nwb.Worksheets("io_validation").Range("AT21:AT591").value = owb.Worksheets("io_snap").Range("CI21:CI591").value '6th scenario mapping
        nwb.Worksheets("io_validation").Range("AU21:AU591").value = owb.Worksheets("io_snap").Range("CJ21:CJ591").value '6th scenario mapping
        nwb.Worksheets("io_snap").Range("CT21:CT591").value = nwb.Worksheets("io_validation").Range("AV21:AV591").value '6th scenario mapping
        'CU-VDDI
        
        Set r = Worksheets("io_snap").Range("CT21:CU591")
        For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 1).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 2).value = vol
        Next
        
        nwb.Worksheets("io_snap").Range("CV1:CX600").value = owb.Worksheets("io_snap").Range("CK1:CM600").value
        nwb.Worksheets("io_snap").Range("CY21:CY600").value = "Off"  'CY-VCM
        nwb.Worksheets("io_snap").Range("CZ1:DJ600").value = owb.Worksheets("io_snap").Range("CN1:CX600").value
        
        '7th scenario
        nwb.Worksheets("io_snap").Range("DK1:DL600").value = owb.Worksheets("io_snap").Range("CY1:CZ600").value
        
        nwb.Worksheets("io_validation").Range("AW21:AW591").value = owb.Worksheets("io_snap").Range("CZ21:CZ591").value '7th scenario mapping
        nwb.Worksheets("io_validation").Range("AX21:AX591").value = owb.Worksheets("io_snap").Range("DA21:DA591").value '7th scenario mapping
        nwb.Worksheets("io_snap").Range("DM21:DM591").value = nwb.Worksheets("io_validation").Range("AY21:AY591").value '7th scenario mapping
        'DN-VDDI
        
        Set r = Worksheets("io_snap").Range("DM21:DN591")
        For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 1).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 2).value = vol
        Next
        
        nwb.Worksheets("io_snap").Range("DO1:DQ600").value = owb.Worksheets("io_snap").Range("DB1:DD600").value
        nwb.Worksheets("io_snap").Range("DR21:DR600").value = "Off"  'DR-VCM
        nwb.Worksheets("io_snap").Range("DS1:EC600").value = owb.Worksheets("io_snap").Range("DE1:DO600").value
        
        '8th scenario
        nwb.Worksheets("io_snap").Range("ED1:EE600").value = owb.Worksheets("io_snap").Range("DP1:DQ600").value
        
        nwb.Worksheets("io_validation").Range("AZ21:AZ591").value = owb.Worksheets("io_snap").Range("DQ21:DQ591").value '8th scenario mapping
        nwb.Worksheets("io_validation").Range("BA21:BA591").value = owb.Worksheets("io_snap").Range("DR21:DR591").value '8th scenario mapping
        nwb.Worksheets("io_snap").Range("EF21:EF591").value = nwb.Worksheets("io_validation").Range("BB21:BB591").value '8th scenario mapping
        'EG-VDDI
        
        Set r = Worksheets("io_snap").Range("EF21:EG591")
        For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 1).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 2).value = vol
        Next
        
        nwb.Worksheets("io_snap").Range("EH1:EJ600").value = owb.Worksheets("io_snap").Range("DS1:DU600").value
        nwb.Worksheets("io_snap").Range("EK21:EK600").value = "Off"  'EK-VCM
        nwb.Worksheets("io_snap").Range("EL1:EV600").value = owb.Worksheets("io_snap").Range("DV1:EF600").value
        
        '9th scenario
        
        nwb.Worksheets("io_snap").Range("EW1:EX600").value = owb.Worksheets("io_snap").Range("EG1:EH600").value
        
        nwb.Worksheets("io_validation").Range("BC21:BC591").value = owb.Worksheets("io_snap").Range("EH21:EH591").value '9th scenario mapping
        nwb.Worksheets("io_validation").Range("BD21:BD591").value = owb.Worksheets("io_snap").Range("EI21:EI591").value '9th scenario mapping
        nwb.Worksheets("io_snap").Range("EY21:EY591").value = nwb.Worksheets("io_validation").Range("BE21:BE591").value '9th scenario mapping
        'EZ-VDDI
        
        Set r = Worksheets("io_snap").Range("EY21:EZ591")
        For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 1).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 2).value = vol
        Next
        
        nwb.Worksheets("io_snap").Range("FA1:FC600").value = owb.Worksheets("io_snap").Range("EJ1:EL600").value
        nwb.Worksheets("io_snap").Range("FD21:FD600").value = "Off"  'FD-VCM
        nwb.Worksheets("io_snap").Range("FE1:FO600").value = owb.Worksheets("io_snap").Range("EM1:EW600").value
        
        '10th scenario
        nwb.Worksheets("io_snap").Range("FP1:FQ600").value = owb.Worksheets("io_snap").Range("EX1:EY600").value
        
        nwb.Worksheets("io_validation").Range("BF21:BF591").value = owb.Worksheets("io_snap").Range("EY21:EY591").value '10th scenario mapping
        nwb.Worksheets("io_validation").Range("BG21:BG591").value = owb.Worksheets("io_snap").Range("EZ21:EZ591").value '10th scenario mapping
        nwb.Worksheets("io_snap").Range("FR21:FR591").value = nwb.Worksheets("io_validation").Range("BH21:BH591").value '10th scenario mapping
        'FS-VDDI
        
        Set r = Worksheets("io_snap").Range("FR21:FS591")
        For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 1).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 2).value = vol
        Next
        
        nwb.Worksheets("io_snap").Range("FT1:FV600").value = owb.Worksheets("io_snap").Range("FA1:FC600").value
        nwb.Worksheets("io_snap").Range("FW21:FW600").value = "Off"  'FW-VCM
        nwb.Worksheets("io_snap").Range("FX1:GH600").value = owb.Worksheets("io_snap").Range("FD1:FN600").value
        
        'handelling for extra row added in IO sheet.
        nwb.Worksheets("io_snap").Range("A592:GH721").value = nwb.Worksheets("io_validation").Range("CA1:JH130").value
    
    ElseIf old_vrtn_val >= 4 And old_vrtn_val < 7 Then
        
        '1st scenario
        nwb.Worksheets("io_snap").Range("A1:B721").value = owb.Worksheets("io_snap").Range("A1:B721").value
        nwb.Worksheets("io_snap").Range("C1:C721").value = owb.Worksheets("io_snap").Range("C1:C721").value
        'D- VDDI
        If Worksheets("io_snap").Range("C21").value <> "" Then
            Set r = Worksheets("io_snap").Range("B21:H721")
            For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 2).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 3).value = vol
                
                If row.Cells(1, 1).value = "HSIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL54:DR108").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "GPIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL321:DR462").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "XCVR_REFCLK" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL565:DR605").value, 6, False))).value
                End If
            Next
        End If
        
        nwb.Worksheets("io_snap").Range("E1:G721").value = owb.Worksheets("io_snap").Range("D1:F721").value
       ' nwb.Worksheets("io_snap").Range("H21:H721").value = "Off"    'H-VCM
        nwb.Worksheets("io_snap").Range("I1:S721").value = owb.Worksheets("io_snap").Range("G1:Q721").value
        
        '2nd scenario
        nwb.Worksheets("io_snap").Range("T1:U721").value = owb.Worksheets("io_snap").Range("R1:S721").value
        nwb.Worksheets("io_snap").Range("V1:V721").value = owb.Worksheets("io_snap").Range("T1:T721").value
        'w -VDDI
        If Worksheets("io_snap").Range("V21").value <> "" Then
            Set r = Worksheets("io_snap").Range("U21:AA721")
            For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 2).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 3).value = vol
                
                If row.Cells(1, 1).value = "HSIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL54:DR108").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "GPIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL321:DR462").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "XCVR_REFCLK" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL565:DR605").value, 6, False))).value
                End If
            Next
        End If
        
        nwb.Worksheets("io_snap").Range("X1:Z721").value = owb.Worksheets("io_snap").Range("U1:W721").value
        'nwb.Worksheets("io_snap").Range("AA21:AA721").value = "Off"    'AA-VCM
        nwb.Worksheets("io_snap").Range("AB1:AL721").value = owb.Worksheets("io_snap").Range("X1:AH721").value
    
        '3rd scenario
        nwb.Worksheets("io_snap").Range("AM1:AN721").value = owb.Worksheets("io_snap").Range("AI1:AJ721").value
        nwb.Worksheets("io_snap").Range("AO1:AO721").value = owb.Worksheets("io_snap").Range("AK1:AK721").value
        'AP-VDDI
        If Worksheets("io_snap").Range("AO21").value <> "" Then
            Set r = Worksheets("io_snap").Range("AN21:AT721")
            For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 2).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 3).value = vol
                
                If row.Cells(1, 1).value = "HSIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL54:DR108").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "GPIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL321:DR462").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "XCVR_REFCLK" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL565:DR605").value, 6, False))).value
                End If
            Next
        End If
        
        nwb.Worksheets("io_snap").Range("AQ1:AS721").value = owb.Worksheets("io_snap").Range("AL1:AN721").value
        'nwb.Worksheets("io_snap").Range("AT21:AT721").value = "Off"    'AT-VCM
        nwb.Worksheets("io_snap").Range("AU1:BE721").value = owb.Worksheets("io_snap").Range("AO1:AY721").value
        
        '4th scenario
        nwb.Worksheets("io_snap").Range("BF1:BG721").value = owb.Worksheets("io_snap").Range("AZ1:BA721").value
        nwb.Worksheets("io_snap").Range("BH1:BH721").value = owb.Worksheets("io_snap").Range("BB1:BB721").value
        'BI-VDDI
        If Worksheets("io_snap").Range("BH21").value <> "" Then
            Set r = Worksheets("io_snap").Range("BG21:BM721")
            For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 2).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 3).value = vol
                
                If row.Cells(1, 1).value = "HSIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL54:DR108").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "GPIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL321:DR462").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "XCVR_REFCLK" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL565:DR605").value, 6, False))).value
                End If
            Next
        End If
        
        nwb.Worksheets("io_snap").Range("BJ1:BL721").value = owb.Worksheets("io_snap").Range("BC1:BE721").value
        'nwb.Worksheets("io_snap").Range("BM21:BM721").value = "Off"    'BM-VCM
        nwb.Worksheets("io_snap").Range("BN1:BX721").value = owb.Worksheets("io_snap").Range("BF1:BP721").value
        
        '5th scenario
        nwb.Worksheets("io_snap").Range("BY1:BZ721").value = owb.Worksheets("io_snap").Range("BQ1:BR721").value
        nwb.Worksheets("io_snap").Range("CA1:CA721").value = owb.Worksheets("io_snap").Range("BS1:BS721").value
        'CB-VDDI
        If Worksheets("io_snap").Range("CA21").value <> "" Then
            Set r = Worksheets("io_snap").Range("BZ21:CF721")
            For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 2).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 3).value = vol
                
                If row.Cells(1, 1).value = "HSIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL54:DR108").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "GPIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL321:DR462").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "XCVR_REFCLK" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL565:DR605").value, 6, False))).value
                End If
            Next
        End If
        
        nwb.Worksheets("io_snap").Range("CC1:CE721").value = owb.Worksheets("io_snap").Range("BT1:BV721").value
        'nwb.Worksheets("io_snap").Range("CF21:CF721").value = "Off"    'CF-VCM
        nwb.Worksheets("io_snap").Range("CG1:CQ721").value = owb.Worksheets("io_snap").Range("BW1:CG721").value
        
        '6th scenario
        nwb.Worksheets("io_snap").Range("CR1:CS721").value = owb.Worksheets("io_snap").Range("CH1:CI721").value
        nwb.Worksheets("io_snap").Range("CT1:CT721").value = owb.Worksheets("io_snap").Range("CJ1:CJ721").value
        'CU-VDDI
        If Worksheets("io_snap").Range("CT21").value <> "" Then
            Set r = Worksheets("io_snap").Range("CS21:CY721")
            For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 2).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 3).value = vol
                
                If row.Cells(1, 1).value = "HSIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL54:DR108").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "GPIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL321:DR462").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "XCVR_REFCLK" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL565:DR605").value, 6, False))).value
                End If
            Next
        End If
        
        nwb.Worksheets("io_snap").Range("CV1:CX721").value = owb.Worksheets("io_snap").Range("CK1:CM721").value
        'nwb.Worksheets("io_snap").Range("CY21:CY721").value = "Off"    'CY-VCM
        nwb.Worksheets("io_snap").Range("CZ1:DJ721").value = owb.Worksheets("io_snap").Range("CN1:CX721").value
        
        '7th scenario
        nwb.Worksheets("io_snap").Range("DK1:DL721").value = owb.Worksheets("io_snap").Range("CY1:CZ721").value
        nwb.Worksheets("io_snap").Range("DM1:DM721").value = owb.Worksheets("io_snap").Range("DA1:DA721").value
        'DN-VDDI
        If Worksheets("io_snap").Range("DM21").value <> "" Then
            Set r = Worksheets("io_snap").Range("DL21:DR721")
            For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 2).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 3).value = vol
                
                If row.Cells(1, 1).value = "HSIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL54:DR108").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "GPIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL321:DR462").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "XCVR_REFCLK" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL565:DR605").value, 6, False))).value
                End If
            Next
        End If
        
        nwb.Worksheets("io_snap").Range("DO1:DQ721").value = owb.Worksheets("io_snap").Range("DB1:DD721").value
        'nwb.Worksheets("io_snap").Range("DR21:DR721").value = "Off"    'DR-VCM
        nwb.Worksheets("io_snap").Range("DS1:EC721").value = owb.Worksheets("io_snap").Range("DE1:DO721").value
        
        '8th scenario
        nwb.Worksheets("io_snap").Range("ED1:EE721").value = owb.Worksheets("io_snap").Range("DP1:DQ721").value
        nwb.Worksheets("io_snap").Range("EF1:EF721").value = owb.Worksheets("io_snap").Range("DR1:DR721").value
        'EG-VDDI
        If Worksheets("io_snap").Range("EF21").value <> "" Then
            Set r = Worksheets("io_snap").Range("EE21:EK721")
            For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 2).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 3).value = vol
                
                If row.Cells(1, 1).value = "HSIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL54:DR108").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "GPIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL321:DR462").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "XCVR_REFCLK" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL565:DR605").value, 6, False))).value
                End If
            Next
        End If
        
        nwb.Worksheets("io_snap").Range("EH1:EJ721").value = owb.Worksheets("io_snap").Range("DS1:DU721").value
        'nwb.Worksheets("io_snap").Range("EK21:EK721").value = "Off"    'EK-VCM
        nwb.Worksheets("io_snap").Range("EL1:EV721").value = owb.Worksheets("io_snap").Range("DV1:EF721").value
        
        '9th scenario
        
        nwb.Worksheets("io_snap").Range("EW1:EX721").value = owb.Worksheets("io_snap").Range("EG1:EH721").value
        nwb.Worksheets("io_snap").Range("EY1:EY721").value = owb.Worksheets("io_snap").Range("EI1:EI721").value
        'EZ-VDDI
        If Worksheets("io_snap").Range("EY21").value <> "" Then
            Set r = Worksheets("io_snap").Range("EX21:FD721")
            For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 2).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 3).value = vol
                
                If row.Cells(1, 1).value = "HSIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL54:DR108").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "GPIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL321:DR462").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "XCVR_REFCLK" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL565:DR605").value, 6, False))).value
                End If
            Next
        End If
        
        nwb.Worksheets("io_snap").Range("FA1:FC721").value = owb.Worksheets("io_snap").Range("EJ1:EL721").value
        'nwb.Worksheets("io_snap").Range("FD21:FD721").value = "Off"    'FD-VCM
        nwb.Worksheets("io_snap").Range("FE1:FO721").value = owb.Worksheets("io_snap").Range("EM1:EW721").value
        
        '10th scenario
        nwb.Worksheets("io_snap").Range("FP1:FQ721").value = owb.Worksheets("io_snap").Range("EX1:EY721").value
        nwb.Worksheets("io_snap").Range("FR1:FR721").value = owb.Worksheets("io_snap").Range("EZ1:EZ721").value
        'FS-VDDI
        If Worksheets("io_snap").Range("FR21").value <> "" Then
            Set r = Worksheets("io_snap").Range("FQ21:FW721")
            For Each row In r.Rows
                vol = Application.VLookup(row.Cells(1, 2).value, Worksheets("IO").Range("EU75: EV161"), 2, False)
                row.Cells(1, 3).value = vol
                
                If row.Cells(1, 1).value = "HSIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL54:DR108").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "GPIO" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL321:DR462").value, 6, False))).value
                ElseIf row.Cells(1, 1).value = "XCVR_REFCLK" Then
                    row.Cells(1, 7).value = nwb.Worksheets("IO").Range((Application.VLookup(row.Cells(1, 2).value, nwb.Worksheets("IO").Range("DL565:DR605").value, 6, False))).value
                End If
            Next
        End If
        
        nwb.Worksheets("io_snap").Range("FT1:FV721").value = owb.Worksheets("io_snap").Range("FA1:FC721").value
        'nwb.Worksheets("io_snap").Range("FW21:FW721").value = "Off"    'FW-VCM
        nwb.Worksheets("io_snap").Range("FX1:GH721").value = owb.Worksheets("io_snap").Range("FD1:FN721").value
        
    Else
        nwb.Worksheets("io_snap").Range("A1:GH721").value = owb.Worksheets("io_snap").Range("A1:GH721").value
    End If
   
    
End Sub
Private Sub summary_snapshotimport_sub(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)

    nwb.Worksheets("summary_snap").Range("A1:R27").value = owb.Worksheets("summary_snap").Range("A1:R27").value
    '1st snapshot
    If owb.Worksheets("summary_snap").Range("A28").value = "STD-LP" Then
        nwb.Worksheets("summary_snap").Range("A28").value = "STD"
        dev = owb.Worksheets("summary_snap").Range("A2").value
        nwb.Worksheets("summary_snap").Range("A2").value = WorksheetFunction.VLookup(dev, Worksheets("Summary").Range("AP72:AQ79").value, 2, False)
                
    Else
        nwb.Worksheets("summary_snap").Range("A28").value = owb.Worksheets("summary_snap").Range("A28").value
    End If
    '2nd snapshot
    If owb.Worksheets("summary_snap").Range("B28").value = "STD-LP" Then
        nwb.Worksheets("summary_snap").Range("B28").value = "STD"
        dev = owb.Worksheets("summary_snap").Range("B2").value
        nwb.Worksheets("summary_snap").Range("B2").value = WorksheetFunction.VLookup(dev, Worksheets("Summary").Range("AP72:AQ79").value, 2, False)
    Else
        nwb.Worksheets("summary_snap").Range("B28").value = owb.Worksheets("summary_snap").Range("B28").value
    End If
    '3rd snapshot
    If owb.Worksheets("summary_snap").Range("C28").value = "STD-LP" Then
        nwb.Worksheets("summary_snap").Range("C28").value = "STD"
        dev = owb.Worksheets("summary_snap").Range("C2").value
        nwb.Worksheets("summary_snap").Range("C2").value = WorksheetFunction.VLookup(dev, Worksheets("Summary").Range("AP72:AQ79").value, 2, False)
    Else
        nwb.Worksheets("summary_snap").Range("C28").value = owb.Worksheets("summary_snap").Range("C28").value
    End If
    '4th snapshot
    If owb.Worksheets("summary_snap").Range("D28").value = "STD-LP" Then
        nwb.Worksheets("summary_snap").Range("D28").value = "STD"
        dev = owb.Worksheets("summary_snap").Range("D2").value
        nwb.Worksheets("summary_snap").Range("D2").value = WorksheetFunction.VLookup(dev, Worksheets("Summary").Range("AP72:AQ79").value, 2, False)
    Else
        nwb.Worksheets("summary_snap").Range("D28").value = owb.Worksheets("summary_snap").Range("D28").value
    End If
    '5th snapshot
    If owb.Worksheets("summary_snap").Range("E28").value = "STD-LP" Then
        nwb.Worksheets("summary_snap").Range("E28").value = "STD"
        dev = owb.Worksheets("summary_snap").Range("E2").value
        nwb.Worksheets("summary_snap").Range("E2").value = WorksheetFunction.VLookup(dev, Worksheets("Summary").Range("AP72:AQ79").value, 2, False)
    Else
        nwb.Worksheets("summary_snap").Range("E28").value = owb.Worksheets("summary_snap").Range("E28").value
    End If
    '6th snapshot
    If owb.Worksheets("summary_snap").Range("F28").value = "STD-LP" Then
        nwb.Worksheets("summary_snap").Range("F28").value = "STD"
        dev = owb.Worksheets("summary_snap").Range("F2").value
        nwb.Worksheets("summary_snap").Range("F2").value = WorksheetFunction.VLookup(dev, Worksheets("Summary").Range("AP72:AQ79").value, 2, False)
    Else
        nwb.Worksheets("summary_snap").Range("F28").value = owb.Worksheets("summary_snap").Range("F28").value
    End If
    '7th snapshot
    If owb.Worksheets("summary_snap").Range("G28").value = "STD-LP" Then
        nwb.Worksheets("summary_snap").Range("G28").value = "STD"
        dev = owb.Worksheets("summary_snap").Range("G2").value
        nwb.Worksheets("summary_snap").Range("G2").value = WorksheetFunction.VLookup(dev, Worksheets("Summary").Range("AP72:AQ79").value, 2, False)
    Else
        nwb.Worksheets("summary_snap").Range("G28").value = owb.Worksheets("summary_snap").Range("G28").value
    End If
    '8th snapshot
    If owb.Worksheets("summary_snap").Range("H28").value = "STD-LP" Then
        nwb.Worksheets("summary_snap").Range("H28").value = "STD"
        dev = owb.Worksheets("summary_snap").Range("H2").value
        nwb.Worksheets("summary_snap").Range("H2").value = WorksheetFunction.VLookup(dev, Worksheets("Summary").Range("AP72:AQ79").value, 2, False)
    Else
        nwb.Worksheets("summary_snap").Range("H28").value = owb.Worksheets("summary_snap").Range("H28").value
    End If
    '9th snapshot
    If owb.Worksheets("summary_snap").Range("I28").value = "STD-LP" Then
        nwb.Worksheets("summary_snap").Range("I28").value = "STD"
        dev = owb.Worksheets("summary_snap").Range("I2").value
        nwb.Worksheets("summary_snap").Range("I2").value = WorksheetFunction.VLookup(dev, Worksheets("Summary").Range("AP72:AQ79").value, 2, False)
    Else
        nwb.Worksheets("summary_snap").Range("I28").value = owb.Worksheets("summary_snap").Range("I28").value
    End If
    '10th snapshot
    If owb.Worksheets("summary_snap").Range("J28").value = "STD-LP" Then
        nwb.Worksheets("summary_snap").Range("J28").value = "STD"
        dev = owb.Worksheets("summary_snap").Range("J2").value
        nwb.Worksheets("summary_snap").Range("J2").value = WorksheetFunction.VLookup(dev, Worksheets("Summary").Range("AP72:AQ79").value, 2, False)
    Else
        nwb.Worksheets("summary_snap").Range("J28").value = owb.Worksheets("summary_snap").Range("J28").value
    End If
    
End Sub
Private Sub math_snapshotimport_sub(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
    If old_vrtn_val < 5 Then
    
        '1st snapshot
        nwb.Worksheets("math_snap").Range("A1:D260").value = owb.Worksheets("math_snap").Range("A1:D260").value
        nwb.Worksheets("math_snap").Range("E1:E260").value = "Normal-Multiplier"
        nwb.Worksheets("math_snap").Range("F1:F260").value = "No"
        nwb.Worksheets("math_snap").Range("G1:G260").value = "Yes"
        nwb.Worksheets("math_snap").Range("H1:H260").value = "Yes"
        
        '2nd snapshot
        nwb.Worksheets("math_snap").Range("I1:L260").value = owb.Worksheets("math_snap").Range("E1:H260").value
        nwb.Worksheets("math_snap").Range("M1:M260").value = "Normal-Multiplier"
        nwb.Worksheets("math_snap").Range("N1:N260").value = "No"
        nwb.Worksheets("math_snap").Range("O1:O260").value = "Yes"
        nwb.Worksheets("math_snap").Range("P1:P260").value = "Yes"
        
        '3rd snapshot
        nwb.Worksheets("math_snap").Range("Q1:T260").value = owb.Worksheets("math_snap").Range("I1:L260").value
        nwb.Worksheets("math_snap").Range("U1:U260").value = "Normal-Multiplier"
        nwb.Worksheets("math_snap").Range("V1:V260").value = "No"
        nwb.Worksheets("math_snap").Range("W1:W260").value = "Yes"
        nwb.Worksheets("math_snap").Range("X1:X260").value = "Yes"
        
        '4th snapshot
        nwb.Worksheets("math_snap").Range("Y1:AB260").value = owb.Worksheets("math_snap").Range("M1:P260").value
        nwb.Worksheets("math_snap").Range("AC1:AC60").value = "Normal-Multiplier"
        nwb.Worksheets("math_snap").Range("AD1:AD260").value = "No"
        nwb.Worksheets("math_snap").Range("AE1:AE260").value = "Yes"
        nwb.Worksheets("math_snap").Range("AF1:AF260").value = "Yes"
                
        '5th snapshot
        nwb.Worksheets("math_snap").Range("AG1:AJ260").value = owb.Worksheets("math_snap").Range("Q1:T260").value
        nwb.Worksheets("math_snap").Range("AK1:AK260").value = "Normal-Multiplier"
        nwb.Worksheets("math_snap").Range("AL1:AL260").value = "No"
        nwb.Worksheets("math_snap").Range("AM1:AM260").value = "Yes"
        nwb.Worksheets("math_snap").Range("AN1:AN260").value = "Yes"
        
        '6th snapshot
        nwb.Worksheets("math_snap").Range("AO1:AR260").value = owb.Worksheets("math_snap").Range("U1:X260").value
        nwb.Worksheets("math_snap").Range("AS1:AS260").value = "Normal-Multiplier"
        nwb.Worksheets("math_snap").Range("AT1:AT260").value = "No"
        nwb.Worksheets("math_snap").Range("AU1:AU260").value = "Yes"
        nwb.Worksheets("math_snap").Range("AV1:AV260").value = "Yes"
        
        '7th snapshot
        nwb.Worksheets("math_snap").Range("AW1:AZ260").value = owb.Worksheets("math_snap").Range("Y1:AB260").value
        nwb.Worksheets("math_snap").Range("BA1:BA260").value = "Normal-Multiplier"
        nwb.Worksheets("math_snap").Range("BB1:BB260").value = "No"
        nwb.Worksheets("math_snap").Range("BC1:BC260").value = "Yes"
        nwb.Worksheets("math_snap").Range("BD1:BD260").value = "Yes"
                
        '8th snapshot
        nwb.Worksheets("math_snap").Range("BE1:BH260").value = owb.Worksheets("math_snap").Range("AC1:AF260").value
        nwb.Worksheets("math_snap").Range("BI1:BI260").value = "Normal-Multiplier"
        nwb.Worksheets("math_snap").Range("BJ1:BJ260").value = "No"
        nwb.Worksheets("math_snap").Range("BK1:BK260").value = "Yes"
        nwb.Worksheets("math_snap").Range("BL1:BL260").value = "Yes"
        
        '9th snapshot
        nwb.Worksheets("math_snap").Range("BM1:BP260").value = owb.Worksheets("math_snap").Range("AG1:AJ260").value
        nwb.Worksheets("math_snap").Range("BQ1:BQ260").value = "Normal-Multiplier"
        nwb.Worksheets("math_snap").Range("BR1:BR260").value = "No"
        nwb.Worksheets("math_snap").Range("BS1:BS260").value = "Yes"
        nwb.Worksheets("math_snap").Range("BT1:BT260").value = "Yes"
        
        '10th snapshot
        nwb.Worksheets("math_snap").Range("BU1:BX260").value = owb.Worksheets("math_snap").Range("AK1:AN260").value
        nwb.Worksheets("math_snap").Range("BY1:BY260").value = "Normal-Multiplier"
        nwb.Worksheets("math_snap").Range("BZ1:BZ260").value = "No"
        nwb.Worksheets("math_snap").Range("CA1:CA260").value = "Yes"
        nwb.Worksheets("math_snap").Range("CB1:CB260").value = "Yes"
      
    Else
    
        nwb.Worksheets("math_snap").Range("A1:BZ260").value = owb.Worksheets("math_snap").Range("A1:CZ260").value
    End If
End Sub
Private Sub PLL_snapshotimport_sub(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
    Dim nws As Worksheet
    Set nws = nwb.Worksheets("pll_snap")
    
    nwb.Worksheets("pll_snap").Range("A1:BT30").value = owb.Worksheets("pll_snap").Range("A1:BT30").value
  '######### Supporting Min and Max VCO option changes. #######
    If old_vrtn_val <= 7 Then
        Const nbcol = 10
        Dim cols(0 To nbcol - 1) As String
        cols(0) = "G"
        cols(1) = "N"
        cols(2) = "U"
        cols(3) = "AB"
        cols(4) = "AI"
        cols(5) = "AP"
        cols(6) = "AW"
        cols(7) = "BD"
        cols(8) = "BK"
        cols(9) = "BR"

        For cindex = 0 To nbcol - 1
            c = cols(cindex)
            Set col = nws.Range(c & "17:" & c & "24")
            For Each cell In col
                If cell.value = "Low Power" Then
                    cell.value = "Min VCO for Low Power"
                ElseIf cell.value = "Low Jitter" Then
                    cell.value = "Max VCO for Low Jitter"
                End If
            Next
        Next cindex
    End If    '######
    
End Sub
' sub -> Importshapshot
' Inputs -> None
' Outputs -> None becuase it is a Sub
' Description -> copy all the snapshot sheets data into corresponding snapshot sheets in active workbook.
Private Sub Importshapshot(ByVal owb As Workbook, ByVal nwb As Workbook, ByVal old_vrtn_val As Integer)
    Dim ows As Worksheet
    Set ows = owb.Worksheets("Snapshot")
    Set nws = nwb.Worksheets("Snapshot")
    
    'copy all snap sheets for all sheets.
    If old_vrtn_val = 3 Then
        summary_snapshotimport_sub owb, nwb, old_vrtn_val     'call for summary_sanpshortimport sub to address removal of STD-LP
    Else
        nwb.Worksheets("summary_snap").Range("A1:R40").value = owb.Worksheets("summary_snap").Range("A1:R40").value
    End If
    nwb.Worksheets("clock_snap").Range("A1:BG120").value = owb.Worksheets("clock_snap").Range("A1:BG120").value
    nwb.Worksheets("logic_snap").Range("A1:BP300").value = owb.Worksheets("logic_snap").Range("A1:BP300").value
    'nwb.Worksheets("lsram_snap").Range("A1:CZ260").value = owb.Worksheets("lsram_snap").Range("A1:CZ260").value

    math_snapshotimport_sub owb, nwb, old_vrtn_val    'call for math block import sub to address changes i.e. add of mode and pipeline

    LSRAM_snapshotimport_sub owb, nwb, old_vrtn_val     'call for LSRAM import snapshot sheet to address newly added width column

    nwb.Worksheets("usram_snap").Range("A1:CZ260").value = owb.Worksheets("usram_snap").Range("A1:CZ260").value
    'nwb.Worksheets("math_snap").Range("A1:AS260").value = owb.Worksheets("math_snap").Range("A1:AS260").value


    'nwb.Worksheets("io_snap").Range("A1:FQ600").value = owb.Worksheets("io_snap").Range("A1:FQ600").value

    IO_snapshotimport_sub owb, nwb, old_vrtn_val    'call for IO import snapshot sheet to address IO name changes
    'nwb.Worksheets("Transceiver_snap").Range("A1:EL40").value = owb.Worksheets("Transceiver_snap").Range("A1:EL40").value

    Transceiver_snapshotimport_sub owb, nwb, old_vrtn_val    'call for xcvr import snapshot sheet to address newly changed options for tx amp, CTLE

    'nwb.Worksheets("pll_snap").Range("A1:BT30").value = owb.Worksheets("pll_snap").Range("A1:BT30").value
    PLL_snapshotimport_sub owb, nwb, old_vrtn_val ' call to PLL import snapshot sub to import snapshot PLL data
    
    nwb.Worksheets("dll_snap").Range("A1:V40").value = owb.Worksheets("dll_snap").Range("A1:V40").value
    nwb.Worksheets("misc_snap").Range("A1:L4").value = owb.Worksheets("misc_snap").Range("A1:L4").value

    'copying snapshot sheet.
    nwb.Worksheets("Snapshot").Range("F8:AG8").value = owb.Worksheets("Snapshot").Range("F8:AG8").value
    nwb.Worksheets("Snapshot").Range("E10:AG10").value = owb.Worksheets("Snapshot").Range("E10:AG10").value
    nwb.Worksheets("Snapshot").Range("E13:AG13").value = owb.Worksheets("Snapshot").Range("E13:AG13").value
    nwb.Worksheets("Snapshot").Range("E15:AG33").value = owb.Worksheets("Snapshot").Range("E15:AG33").value

    'checking for "effective theta ja" to set right and left allignment.
     Dim i, colnumb  As Integer
     colnumb = 5
        For i = 1 To 29
            snapCol = ColumnLetter(colnumb)
                If owb.Worksheets("Snapshot").Range(snapCol & "33").value = "N/A" Then
                    nwb.Worksheets("Snapshot").Range(snapCol & "33").HorizontalAlignment = xlLeft
                End If
            colnumb = colnumb + 1
        Next i
    'checking conditions on version-2
    If old_vrtn_val = 2 Then
        'Dim i, colnumb  As Integer
        colnumb = 5
        For i = 1 To 29
            snapCol = ColumnLetter(colnumb)
                If IsEmpty(owb.Worksheets("Snapshot").Range(snapCol & "36").value) <> True Then
                    nwb.Worksheets("Snapshot").Range(snapCol & "36").value = owb.Worksheets("Snapshot").Range(snapCol & "36").value + owb.Worksheets("Snapshot").Range(snapCol & "47").value
                End If
            colnumb = colnumb + 1
        Next i
        snapshot_default_rail_static owb, nwb
        nwb.Worksheets("Snapshot").Range("E38:AG47").value = owb.Worksheets("Snapshot").Range("E37:AG46").value
    Else
        nwb.Worksheets("Snapshot").Range("E36:AG47").value = owb.Worksheets("Snapshot").Range("E36:AG47").value
    End If
    nwb.Worksheets("Snapshot").Range("E50:AG63").value = owb.Worksheets("Snapshot").Range("E50:AG63").value

    'copying Device Static data
    nwb.Worksheets("Snapshot").Range("E14:F14").value = nwb.Worksheets("Snapshot").Range("F36").value
    nwb.Worksheets("Snapshot").Range("H14:I14").value = nwb.Worksheets("Snapshot").Range("I36").value
    nwb.Worksheets("Snapshot").Range("K14:L14").value = nwb.Worksheets("Snapshot").Range("L36").value
    nwb.Worksheets("Snapshot").Range("N14:O14").value = nwb.Worksheets("Snapshot").Range("O36").value
    nwb.Worksheets("Snapshot").Range("Q14:R14").value = nwb.Worksheets("Snapshot").Range("R36").value
    nwb.Worksheets("Snapshot").Range("T14:U14").value = nwb.Worksheets("Snapshot").Range("U36").value
    nwb.Worksheets("Snapshot").Range("W14:X14").value = nwb.Worksheets("Snapshot").Range("X36").value
    nwb.Worksheets("Snapshot").Range("Z14:AA14").value = nwb.Worksheets("Snapshot").Range("AA36").value
    nwb.Worksheets("Snapshot").Range("AC14:AD14").value = nwb.Worksheets("Snapshot").Range("AD36").value
    nwb.Worksheets("Snapshot").Range("AF14:AG14").value = nwb.Worksheets("Snapshot").Range("AG36").value
    
End Sub
Private Sub snapshot_default_rail_static(ByVal owb As Workbook, ByVal nwb As Workbook)
Set ows = owb.Worksheets("Snapshot")
Set nws = nwb.Worksheets("Snapshot")
    Dim i, colnumb  As Integer
    colnumb = 5
    For i = 1 To 29
        snapCol = ColumnLetter(colnumb)
        If IsEmpty(owb.Worksheets("Snapshot").Range(snapCol & "36").value) <> True Then
            nwb.Worksheets("Snapshot").Range(snapCol & "37").value = 0
        End If
        colnumb = colnumb + 1
        Next i
    
End Sub
Function ColumnLetter(column As Integer) As String
    If column < 1 Then Exit Function
    ColumnLetter = ColumnLetter(Int((column - 1) / 26)) & Chr(((column - 1) Mod 26) + Asc("A"))
End Function

Public Sub script_import(ByRef Path As String)
    file_path.value = Path
    smartpower_rb = True
    disable_msg_boolean = True
    import_smartpower_click
End Sub

Public Sub script_import_prev_ver(ByRef Path As String)
    file_path.value = Path
    smartpower_rb = False
    disable_msg_boolean = True
    import_estimator_click
End Sub
Function MPEIMPORTMPE(ByVal estimator_rb_ As String, ByVal smartpower_rb_ As String, ByVal imp_append_data_ As String, ByVal imp_overwrite_data_ As String, ByVal Imp_device_settings_ As String, _
ByVal Imp_thermal_inputs_ As String, ByVal Imp_voltage_settings_ As String, ByVal Imp_snapshots_ As String, ByVal file_path_ As String)
        estimator_rb = estimator_rb_
        smartpower_rb = smartpower_rb_
        imp_append_data = imp_append_data_
        imp_overwrite_data = imp_overwrite_data_
        Imp_device_settings = Imp_device_settings_
        Imp_thermal_inputs = Imp_thermal_inputs_
        Imp_voltage_settings = Imp_voltage_settings_
        Imp_snapshots = Imp_snapshots_
        file_path = file_path_
        disable_msg_boolean = True
        
        Import_Click
         
End Function







Attribute VB_Name = "init_pc"
Attribute VB_Base = "0{CA06A85B-E741-4ABC-87FF-8B2C3E6FDB41}{3543D1E9-20CD-4DE8-B09A-3FF3797ECBF3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim EnableValidation As Boolean
Dim sreg As Long
Dim scomb As Long
Dim ddr_memory_check As Boolean
Dim call_IP As Boolean
Dim reg_call As Boolean
Dim comb_call As Boolean
Dim uram_call As Boolean
Dim lsram_call As Boolean
Dim math_call As Boolean
Dim disable_msg_boolean As Boolean
Private Sub Cancel_button_Click()
    Unload Me
End Sub
Private Sub cb_init_fabric_Change()
    Dim val As String
    val = cb_init_fabric.value
    If val = "25 %" Then
        setFPGADefault 25
    ElseIf val = "50 %" Then
        setFPGADefault 50
    ElseIf val = "75 %" Then
        setFPGADefault 75
    ElseIf val = "100 %" Then
        setFPGADefault 100
    End If
End Sub
Private Sub setFPGADefault(ByVal val As Integer)
    
    fpga_uram_sb.value = val
    fpga_lsram_sb.value = val
    fpga_math_sb.value = val
    fpga_reg_sb.value = val
    fpga_comb_sb.value = val
End Sub
Private Sub default_er_txt_Change()
 Dim val As Integer
  
  If IsNumeric(default_er_txt.value) Then
    val = WorksheetFunction.Round(default_er_txt.value, 0)
    If val >= 0 And val <= 100 Then
      ' Do Nothing
     Else
       MsgBox "The default enable rate must be between 0 and 100%"
    End If
  Else
    MsgBox "The default enable rate must be between 0 and 100%"

  End If
End Sub

Private Sub default_tr_txt_Change()
 Dim val As Integer
  
  If IsNumeric(default_tr_txt.value) Then
    val = WorksheetFunction.Round(default_tr_txt.value, 0)
    If val >= 0 And val <= 100 Then
      ' Do Nothing
     Else
       MsgBox "The default toggle rate must be between 0 and 100%"
    End If
  Else
    MsgBox "The default toggle rate must be between 0 and 100%"
  End If
End Sub

Private Sub fddr_axi_type_Change()
    
    If fddr_axi_type.value = "Native" Then
        fddr_axi_width.value = ""
        fddr_axi_width.Enabled = False
    Else
        fddr_axi_width.Enabled = True
        If fddr_width.value <> "64" Then
            fddr_axi_width.value = Worksheets("dss_data").Range("O143").value
        Else
            fddr_axi_width.value = Worksheets("dss_data").Range("O146").value
        End If
    End If
End Sub

Private Sub fddr_width_Change()
    If fddr_width.value = "8" Or fddr_width.value = "16" Then
        fddr_ecc.Enabled = False
    Else
        fddr_ecc.Enabled = True
    End If
    If fddr_tech.value = "LPDDR3" Or fddr_tech.value = "QDR" Then
        fddr_ecc.Enabled = False
        fddr_ecc.value = False
    End If
    If fddr_tech.value <> "QDR" Then
        fddr_axi_width.RowSource = "dss_data!" & Application.WorksheetFunction.VLookup(fddr_width.value, Worksheets("dss_data").Range("T143:U146"), 2, False)
    End If
    
    If fddr_axi_type.value <> "Native" Then
        If fddr_width.value = "64" Then
            fddr_axi_width.value = 512
        Else
            fddr_axi_width.value = 64
        End If
    End If
    
End Sub

Private Sub gear_ratio_cb_Change()
    Dim m_s As String
    Dim mult As Double
    Dim memory_clock As Double
    Dim fddr_fic_clk As Double
    m_s = gear_ratio_cb.value
        mult = Application.WorksheetFunction.VLookup(m_s, Worksheets("dss_data").Range("J155:K158"), 2, False)
        memory_clock = Round(fddr_clk.value, 3) 'Memory Clock
        fddr_fic_clk = memory_clock * mult ' AXI/AHB Clock
        fddr_fic_clk_freq_lb.Caption = fddr_fic_clk & " MHz"
        
        If fddr_tech.value <> "QDR" Then      'Max allowed freq for DDR3, DDR4, LPDDR3 is 200
            If fddr_fic_clk >= 0 And fddr_fic_clk <= 200 Then
                'Do nothing
            Else
                If EnableValidation Then
                    MsgBox "User Clock frequency must be between 0 and 200 MHz"
                End If
            End If
        Else
            If fddr_fic_clk >= 0 And fddr_fic_clk <= 166.625 Then
                'Do nothing
            Else
                If EnableValidation Then
                    MsgBox "User Clock frequency must be between 0 and 166.625 MHz"
                End If
            End If
        End If
                
End Sub

Private Sub fddr_clk_Change()
    Dim val As Double
    If IsNumeric(fddr_clk.value) Then
        val = Round(fddr_clk.value, 3)
        gear_ratio_cb_Change
        ddr_memory_check = False
    Else
        If EnableValidation Then
            ddr_memory_check = True
            MsgBox "Invalid DDR Memory Clk frequency"
        End If
    End If
End Sub

Private Sub fddr_tech_Change()
    If fddr_tech.value <> "" Then
        fddr_width.Enabled = True
        fddr_ecc.Enabled = True
        fddr_clk.Enabled = True
        gear_ratio_cb.Enabled = True
        fddr_fic_clk_freq_lb.Enabled = True
        fddr_odt.Enabled = True
        fddr_axi_width.Enabled = True
        fddr_axi_type.Enabled = True
        qdr_address_width_cb.Enabled = False
        Dim io_tech As String
        io_tech = Application.WorksheetFunction.VLookup(fddr_tech.value, Worksheets("dss_data").Range("R125:T130"), 2, False)
        Worksheets("dss_data").Range("M138").value = io_tech
                
        fddr_odt.RowSource = "IO!" & Worksheets("IO").Range("DO3").value
        fddr_odt.value = Application.VLookup(fddr_tech.value, Worksheets("dss_data").Range("Y162:AG168"), 3, False)
        
        If fddr_tech.value = "LPDDR3" Then
            fddr_ecc.Enabled = False
            fddr_ecc.value = False
        End If
        If fddr_tech.value = "QDR" Then
            fddr_ecc.Enabled = False
            fddr_ecc.value = False
            
            fddr_axi_type.Enabled = False
            fddr_axi_type.value = Worksheets("dss_data").Range("N144").value
            
            fddr_axi_width.Enabled = False
            fddr_axi_width.value = Worksheets("dss_data").Range("O143").value
            
            qdr_address_width_cb.Enabled = True
            qdr_address_width_cb.value = Worksheets("dss_data").Range("N164").value
            
        End If
        
        fddr_width.RowSource = "dss_data!" & Application.WorksheetFunction.VLookup(fddr_tech.value, Worksheets("dss_data").Range("Y123:AA129"), 2, False)
        fddr_width.value = Application.VLookup(fddr_tech.value, Worksheets("dss_data").Range("Y162:AG168"), 2, False)
        
        If fddr_tech.value <> "QDR" Then
            fddr_axi_width.RowSource = "dss_data!" & Application.WorksheetFunction.VLookup(fddr_width.value, Worksheets("dss_data").Range("T143:U146"), 2, False)
            fddr_axi_width.value = Application.VLookup(fddr_tech.value, Worksheets("dss_data").Range("Y162:AG168"), 5, False)
        
            fddr_axi_type.RowSource = "dss_data!" & Application.WorksheetFunction.VLookup(fddr_tech.value, Worksheets("dss_data").Range("Y123:AB129"), 4, False)
            fddr_axi_type.value = Application.VLookup(fddr_tech.value, Worksheets("dss_data").Range("Y162:AG168"), 4, False)
        End If
        
        fddr_clk.value = Application.VLookup(fddr_tech.value, Worksheets("dss_data").Range("Y162:AG168"), 6, False)
        
        gear_ratio_cb.RowSource = "dss_data!" & Application.WorksheetFunction.VLookup(fddr_tech.value, Worksheets("dss_data").Range("Y123:AA129"), 3, False)
        gear_ratio_cb.value = Application.Worksheets("dss_data").Range(WorksheetFunction.VLookup(fddr_tech.value, Worksheets("dss_data").Range("Y123:AA129"), 3, False)).value
        
        If fddr_width.value = 8 Or 16 Then
            fddr_ecc.Enabled = False
        Else
            fddr_ecc.Enabled = True
        End If
      
    Else
        fddr_width.Enabled = False
        fddr_ecc.Enabled = False
        fddr_clk.Enabled = False
        gear_ratio_cb.Enabled = False
        fddr_fic_clk_freq_lb.Enabled = False
        fddr_odt.Enabled = False
        fddr_axi_width.Enabled = False
        fddr_axi_type.Enabled = False
        qdr_address_width_cb.Enabled = False
    End If
End Sub
Private Function onedecimal(num As Double) As String
   Dim str_num As String
   str_num = num
        If InStr(1, str_num, "E") Then
            str_num = "0.0"
            onedecimal = str_num
            Exit Function
        End If
        If InStr(1, str_num, ".") Then
            str_num = Split(str_num, ".")(0) & "." & Left(Split(str_num, ".")(1), 1)
        Else
            str_num = str_num & ".0"
        End If
    onedecimal = str_num
End Function
Private Sub fpga_reg_txt_Change()
    Dim user_reg As Long
    Dim reg_per As Double
    If IsInteger(fpga_reg_txt.value) Then
        If fpga_reg_txt.value >= 0 And fpga_reg_txt.value <= sreg Then
            user_reg = CLng(fpga_reg_txt.value)
            reg_per = (user_reg / sreg) * 100
            reg_per_txt.Text = onedecimal(reg_per) & " %"
            reg_call = True
            fpga_reg_sb.value = reg_per

     Else
        MsgBox "The Registers count exceeding the maximum available registers"
    End If
  Else
    MsgBox "The Registers count must be a whole number"
  End If
End Sub

Private Sub fpga_reg_sb_Change()
    Dim val As String
    val = WorksheetFunction.Text(sreg * fpga_reg_sb.value / 100, "0")
    
    If call_IP Then
        Dim percentage As Double
        Dim cal_per As Long
        If (fpga_reg_txt.value) = "" Then
            fpga_reg_txt.value = "0"
        End If
        cal_per = CLng(fpga_reg_txt.value)
        percentage = (cal_per / sreg) * 100
        If percentage > 100 Then
            percentage = 100
'            MsgBox "This action will change the selected register and LUT values"
            fpga_reg_txt.value = sreg
        End If
        reg_per_txt.Text = onedecimal(percentage) & " %"
        fpga_reg_sb.value = percentage
        reg_max.value = " / " & sreg & ""
        call_IP = False
    Else
        If Not reg_call Then
            fpga_reg_txt.Text = val
        End If
    End If
    reg_call = False
    reg_max.value = " / " & sreg & ""
End Sub
Private Sub fpga_comb_txt_Change()
   Dim user_comb As Long
   Dim comb_per As Double
    If IsInteger(fpga_comb_txt.value) Then
        If fpga_comb_txt.value >= 0 And fpga_comb_txt.value <= scomb Then
            user_comb = CLng(fpga_comb_txt.value)
            comb_per = (user_comb / scomb) * 100
            comb_per_txt.Text = onedecimal(comb_per) & " %"
            comb_call = True
            fpga_comb_sb.value = comb_per
        Else
            MsgBox "The LUTs count exceeding the maximum available LUTs"
        End If
    Else
        MsgBox "The LUTs count must be a whole number"
    End If
End Sub
Private Sub fpga_comb_sb_Change()
  Dim val As String
  val = WorksheetFunction.Text(scomb * fpga_comb_sb.value / 100, "0")
  
  If call_IP Then
        Dim percentage As Double
        Dim cal_per As Long
        If (fpga_comb_txt.value) = "" Then
            fpga_comb_txt.value = "0"
        End If
        cal_per = CLng(fpga_comb_txt.value)
        percentage = (cal_per / scomb) * 100
        If percentage > 100 Then
            percentage = 100
            fpga_comb_txt.Text = scomb
        End If
        comb_per_txt.Text = onedecimal(percentage) & " %"
        fpga_comb_sb.value = percentage
        comb_max.value = " / " & scomb & ""
        call_IP = False
  Else
        If Not comb_call Then
            fpga_comb_txt.Text = val
        End If
  End If
    comb_call = False
    comb_max.value = " / " & scomb & " "
End Sub
Private Sub fpga_uram_txt_Change()
    Dim user_uram As Long
    Dim uram_per As Double
    Dim val As Long
    If IsInteger(fpga_uram_txt.value) Then
        val = Worksheets("dss_data").Range("P133").value
        If fpga_uram_txt.value >= 0 And fpga_uram_txt.value <= val Then
            user_uram = CLng(fpga_uram_txt.value)
            uram_per = (user_uram / val) * 100
            uram_per_txt.Text = onedecimal(uram_per) & " %"
            uram_call = True
            fpga_uram_sb.value = uram_per
            sreg = Worksheets("dss_data").Range("P131").value - CLng(12 * (Worksheets("dss_data").Range("P133").value * fpga_uram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P134").value * fpga_lsram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P135").value * fpga_math_sb.value / 100))
            scomb = Worksheets("dss_data").Range("P132").value - CLng(12 * (Worksheets("dss_data").Range("P133").value * fpga_uram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P134").value * fpga_lsram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P135").value * fpga_math_sb.value / 100))
            call_IP = True
            fpga_reg_sb_Change
            call_IP = True
            fpga_comb_sb_Change
        Else
            MsgBox "The uSRAM Blocks count exceeding the maximum available uSRAM Blocks"
        End If
    Else
        MsgBox "The uSRAM Blocks count must be a whole number"
    End If
End Sub
Private Sub fpga_uram_sb_Change()
    Dim val As String
        val = WorksheetFunction.Text(Worksheets("dss_data").Range("P133").value * fpga_uram_sb.value / 100, "0")
        If Not uram_call Then
            fpga_uram_txt.Text = val
        End If
        uram_call = False
        uram_max.value = " / " & Worksheets("dss_data").Range("P133").value & ""
'    uram_per_txt.Text = onedecimal(fpga_uram_sb.value) & " %"
End Sub
Private Sub fpga_lsram_txt_Change()
    Dim user_lsram As Long
    Dim lsram_per As Double
    Dim val As Long
    If Worksheets("dss_data").Range("G3").value = Worksheets("dss_data").Range("V123").value Then
        fpga_lsram_txt.MaxLength = 4
    Else
        fpga_lsram_txt.MaxLength = 3
    End If
    
    If IsInteger(fpga_lsram_txt.value) Then
        val = Worksheets("dss_data").Range("P134").value
        If fpga_lsram_txt.value >= 0 And fpga_lsram_txt.value <= val Then
            user_lsram = CLng(fpga_lsram_txt.value)
            lsram_per = (user_lsram / val) * 100
            lsram_per_txt.Text = onedecimal(lsram_per) & " %"
            lsram_call = True
            fpga_lsram_sb.value = lsram_per
            sreg = Worksheets("dss_data").Range("P131").value - CLng(12 * (Worksheets("dss_data").Range("P133").value * fpga_uram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P134").value * fpga_lsram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P135").value * fpga_math_sb.value / 100))
            scomb = Worksheets("dss_data").Range("P132").value - CLng(12 * (Worksheets("dss_data").Range("P133").value * fpga_uram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P134").value * fpga_lsram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P135").value * fpga_math_sb.value / 100))
            call_IP = True
            fpga_reg_sb_Change
            call_IP = True
            fpga_comb_sb_Change
        Else
            MsgBox "The LSRAM Blocks count exceeding the maximum available LSRAM Blocks"
        End If
    Else
        MsgBox "The LSRAM Blocks count must be a whole number"
    End If
End Sub

Private Sub fpga_lsram_sb_Change()
  Dim val As String
  val = WorksheetFunction.Text(Worksheets("dss_data").Range("P134").value * fpga_lsram_sb.value / 100, "0")
  If Not lsram_call Then
        fpga_lsram_txt.Text = val
   End If
   lsram_call = False
  lsram_max.value = " / " & Worksheets("dss_data").Range("P134").value & ""
'  lsram_per_txt.Text = onedecimal(fpga_lsram_sb.value) & " %"
End Sub
Private Sub fpga_math_txt_Change()
    Dim user_math As Long
    Dim math_per As Double
    Dim val As Long
    If Worksheets("dss_data").Range("G3").value = Worksheets("dss_data").Range("V123").value Then
        fpga_math_txt.MaxLength = 4
    Else
        fpga_math_txt.MaxLength = 3
    End If
    
    If IsInteger(fpga_math_txt.value) Then
        val = Worksheets("dss_data").Range("P135").value
        If fpga_math_txt.value >= 0 And fpga_math_txt.value <= val Then
            user_math = CLng(fpga_math_txt.value)
            math_per = (user_math / val) * 100
            math_per_txt.Text = onedecimal(math_per) & " %"
            math_call = True
            fpga_math_sb.value = math_per
            sreg = Worksheets("dss_data").Range("P131").value - CLng(12 * (Worksheets("dss_data").Range("P133").value * fpga_uram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P134").value * fpga_lsram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P135").value * fpga_math_sb.value / 100))
            scomb = Worksheets("dss_data").Range("P132").value - CLng(12 * (Worksheets("dss_data").Range("P133").value * fpga_uram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P134").value * fpga_lsram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P135").value * fpga_math_sb.value / 100))
            call_IP = True
            fpga_reg_sb_Change
            call_IP = True
            fpga_comb_sb_Change
        Else
            MsgBox "The Math Blocks count exceeding the maximum available Math Blocks"
        End If
    Else
        MsgBox "The Math Blocks count must be a whole number"
    End If
End Sub
Private Sub fpga_math_sb_Change()
  Dim val As String
  val = WorksheetFunction.Text(Worksheets("dss_data").Range("P135").value * fpga_math_sb.value / 100, "0")
  If Not math_call Then
        fpga_math_txt.Text = val
   End If
   math_call = False
  math_max.value = " / " & Worksheets("dss_data").Range("P135").value & ""
'  math_per_txt.Text = onedecimal(fpga_math_sb.value) & " %"
End Sub

Private Sub inputs_tb_Change()
  If IsNumeric(inputs_tb.value) Then
  Else
    MsgBox "Only Numericals are permitted"
  End If
End Sub

Private Sub outputs_tb_Change()
  If IsNumeric(outputs_tb.value) Then
  Else
    MsgBox "Only Numericals are permitted"
  End If
End Sub
Private Sub reset_button_Click()
    Reset
End Sub
Private Sub fddr_hide_notsupported()
   fddr_tech_Change
End Sub

Private Sub UserForm_Initialize()
    
    EnableValidation = True
    sreg = Worksheets("dss_data").Range("P131").value - CLng(12 * (Worksheets("dss_data").Range("P133").value * fpga_uram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P134").value * fpga_lsram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P135").value * fpga_math_sb.value / 100))
    scomb = Worksheets("dss_data").Range("P132").value - CLng(12 * (Worksheets("dss_data").Range("P133").value * fpga_uram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P134").value * fpga_lsram_sb.value / 100)) - CLng(36 * (Worksheets("dss_data").Range("P135").value * fpga_math_sb.value / 100))
    
    'User Entered resource data
    fpga_reg_txt.value = Worksheets("dss_data").Range("D158").value
    fpga_comb_txt.value = Worksheets("dss_data").Range("D159").value
    
    
    fpga_reg_sb.value = Worksheets("dss_data").Range("D146").value
    fpga_comb_sb.value = Worksheets("dss_data").Range("D147").value
      
    
    fpga_uram_sb_Change
    fpga_lsram_sb_Change
    fpga_math_sb_Change
    fpga_reg_sb_Change
    fpga_comb_sb_Change
    io_tech.RowSource = "IO!" & Worksheets("IO").Range("DM19").value
    fddr_hide_notsupported
    serdes0_protocol_Change
    serdes1_protocol_Change
    restore
    EnableValidation = True
   ' restore
End Sub

Private Sub Reset()
    Worksheets("dss_data").Range("D125:D162").value = Worksheets("dss_data").Range("C125:C162").value
    restore
End Sub

Private Sub restore()
    EnableValidation = False
    RestoreFDDR
    RestoreFPGA
    RestoreSERDES
    EnableValidation = True
End Sub
Private Sub RestoreFDDR()
    fddr_tech.value = Worksheets("dss_data").Range("D132").value
    If fddr_tech.value <> "" Then
        fddr_tech_Change
        fddr_odt.value = Worksheets("dss_data").Range("D135").value
    End If
    fddr_clk.value = Worksheets("dss_data").Range("D136").value
    gear_ratio_cb.value = Worksheets("dss_data").Range("D137").value
    If fddr_tech.value = "QDR" Then
        fddr_width.RowSource = "dss_data!" & "Q148:Q150"
    ElseIf fddr_tech.value = "LPDDR3" Then
        fddr_width.RowSource = "dss_data!" & "Q144:Q145"
    Else
        fddr_width.RowSource = "dss_data!" & "Q143:Q146"
    End If
    fddr_width.value = Worksheets("dss_data").Range("D133").value
    fddr_ecc.value = Worksheets("dss_data").Range("D134").value
    fddr_axi_width.value = Worksheets("dss_data").Range("D156").value
    fddr_axi_type.value = Worksheets("dss_data").Range("D157").value
End Sub

Private Sub RestoreFPGA()
    
    fpga_sys_clk.value = Worksheets("dss_data").Range("D144").value
    
    cb_init_fabric.value = Worksheets("dss_data").Range("D145").value
    
    fpga_reg_sb.value = Worksheets("dss_data").Range("D146").value
    fpga_comb_sb.value = Worksheets("dss_data").Range("D147").value
    fpga_uram_sb.value = Worksheets("dss_data").Range("D148").value
    fpga_lsram_sb.value = Worksheets("dss_data").Range("D149").value
    fpga_math_sb.value = Worksheets("dss_data").Range("D150").value
    fpga_comb_sb.value = Worksheets("dss_data").Range("D147").value
    fpga_reg_sb.value = Worksheets("dss_data").Range("D146").value
    
    'User Entered resource data
    fpga_comb_txt.value = Worksheets("dss_data").Range("D159").value
    fpga_reg_txt.value = Worksheets("dss_data").Range("D158").value
    fpga_uram_txt.value = Worksheets("dss_data").Range("D160").value
    fpga_lsram_txt.value = Worksheets("dss_data").Range("D161").value
    fpga_math_txt.value = Worksheets("dss_data").Range("D162").value
    
    
    Set c = Worksheets("IO").Range(Worksheets("IO").Range("DM19").value).Find(What:=Worksheets("dss_data").Range("D151").value)
    If c Is Nothing Then
        io_tech.value = Worksheets("dss_data").Range("C151").value
    Else
        io_tech.value = Worksheets("dss_data").Range("D151").value
    End If
    inputs_tb.value = Worksheets("dss_data").Range("D152").value
    outputs_tb.value = Worksheets("dss_data").Range("D153").value
    default_tr_txt.value = CStr(Worksheets("dss_data").Range("D154").value)
    default_er_txt.value = CStr(Worksheets("dss_data").Range("D155").value)
End Sub

Private Sub Save()
    SaveFDDR
    SaveFPGA
    SaveSERDES
End Sub

Private Sub SaveFDDR()
    Worksheets("dss_data").Range("D132").value = fddr_tech.value
    Worksheets("dss_data").Range("D133").value = fddr_width.value
    Worksheets("dss_data").Range("D134").value = fddr_ecc.value
    Worksheets("dss_data").Range("D135").value = fddr_odt.value
    Worksheets("dss_data").Range("D136").value = fddr_clk.value
    Worksheets("dss_data").Range("D137").value = gear_ratio_cb.value
    Worksheets("dss_data").Range("D156").value = fddr_axi_width.value
    Worksheets("dss_data").Range("D157").value = fddr_axi_type.value
End Sub

Private Sub SaveFPGA()
    Worksheets("dss_data").Range("D144").value = fpga_sys_clk.value
    Worksheets("dss_data").Range("D145").value = cb_init_fabric.value
    Worksheets("dss_data").Range("D146").value = fpga_reg_sb.value
    Worksheets("dss_data").Range("D147").value = fpga_comb_sb.value
    Worksheets("dss_data").Range("D148").value = fpga_uram_sb.value
    Worksheets("dss_data").Range("D149").value = fpga_lsram_sb.value
    Worksheets("dss_data").Range("D150").value = fpga_math_sb.value
    Worksheets("dss_data").Range("D151").value = io_tech.value
    Worksheets("dss_data").Range("D152").value = inputs_tb.value
    Worksheets("dss_data").Range("D153").value = outputs_tb.value
    'User Entered resource data
    Worksheets("dss_data").Range("D158").value = CLng(fpga_reg_txt.value)
    Worksheets("dss_data").Range("D159").value = CLng(fpga_comb_txt.value)
    Worksheets("dss_data").Range("D160").value = CLng(fpga_uram_txt.value)
    Worksheets("dss_data").Range("D161").value = CLng(fpga_lsram_txt.value)
    Worksheets("dss_data").Range("D162").value = CLng(fpga_math_txt.value)
    
    Worksheets("dss_data").Range("D154").value = CDbl(default_tr_txt.value)
    Worksheets("dss_data").Range("D155").value = CDbl(default_er_txt.value)
End Sub

Private Sub SetSystem(ByVal code As String)
    Dim ind As Integer
    Dim regval As Long

    Dim cval As Long
    Dim uval As Long
    Dim lval As Long
    Dim mval As Long
    Dim tr As Double
    Dim er As Double
    
    regval = CLng(fpga_reg_txt.value)
    cval = CLng(fpga_comb_txt.value)
    uval = CLng(fpga_uram_txt.value)
    lval = CLng(fpga_lsram_txt.value)
    mval = CLng(fpga_math_txt.value)
    tr = CDbl(default_tr_txt.value) / 100
    er = CDbl(default_er_txt.value) / 100
    
    'Clock Sheet
    If code = "append" Then
        ind = free_row(ActiveWorkbook.Worksheets("Clock"), 12, 511, "L", "Clock") 'Get free row to append data
    Else
        ind = 12 'starting row
    End If
'    Worksheets("Clock").Range("B" & ind).value = "System Clock"
'    Worksheets("Clock").Range("E" & ind).value = fpga_sys_clk.value
'    Worksheets("Clock").Range("G" & ind).value = regval
    Worksheets("Clock").Range(clock_name_str_col & ind).value = "System Clock"
    Worksheets("Clock").Range(clock_freq_col & ind).value = fpga_sys_clk.value
    Worksheets("Clock").Range(clock_fanout_col & ind).value = regval
    
    'Logic Sheet
    If code = "append" Then
        ind = free_row(ActiveWorkbook.Worksheets("Logic"), 9, 508, "J", "Logic") 'Get free row to append data
    Else
        ind = 9 'starting row
    End If
        
'    Worksheets("Logic").Range("B" & ind).value = "System Clock"
'    Worksheets("Logic").Range("E" & ind).value = fpga_sys_clk.value
'    Worksheets("Logic").Range("F" & ind).value = regval
'    Worksheets("Logic").Range("G" & ind).value = cval
'    Worksheets("Logic").Range("I" & ind).value = WorksheetFunction.Text(tr, "0.0%")
    Worksheets("Logic").Range(logic_name_str_col & ind).value = "System Clock"
    Worksheets("Logic").Range(logic_freq_col & ind).value = fpga_sys_clk.value
    Worksheets("Logic").Range(logic_dff_col & ind).value = regval
    Worksheets("Logic").Range(logic_lut_col & ind).value = cval
    Worksheets("Logic").Range(logic_tgrate_col & ind).value = WorksheetFunction.Text(tr, "0.0%")
    
    'LSRAM Sheet
    If code = "append" Then
        ind = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM") 'Get free row to append data
    Else
        ind = 9 'starting row
    End If
    
'    Worksheets("LSRAM").Range("B" & ind).value = "System Clock"
'    Worksheets("LSRAM").Range("E" & ind).value = lval
'    'Port A Settings
'    Worksheets("LSRAM").Range("G" & ind).value = fpga_sys_clk.value
'    Worksheets("LSRAM").Range("K" & ind).value = er
'    'Port B Settings
'    Worksheets("LSRAM").Range("M" & ind).value = fpga_sys_clk.value
'    Worksheets("LSRAM").Range("Q" & ind).value = er
    
    Worksheets("LSRAM").Range(lsram_name_str_col & ind).value = "System Clock"
    Worksheets("LSRAM").Range(lsram_nblock_col & ind).value = lval
    'Port A Settings
    Worksheets("LSRAM").Range(lsram_Aclkfreq_col & ind).value = fpga_sys_clk.value
    Worksheets("LSRAM").Range(lsram_Aenrate_col & ind).value = er
    'Port B Settings
    Worksheets("LSRAM").Range(lsram_Bclkfreq_col & ind).value = fpga_sys_clk.value
    Worksheets("LSRAM").Range(lsram_Benrate_col & ind).value = er
    
    'uSRAM Sheet
    If code = "append" Then
        ind = free_row(ActiveWorkbook.Worksheets("uSRAM"), 9, 250, "M", "uSRAM") 'Get free row to append data
    Else
        ind = 9 'starting row
    End If
'    Worksheets("uSRAM").Range("B" & ind).value = "System Clock"
'    Worksheets("uSRAM").Range("E" & ind).value = uval
'    'Write Port Settings
'    Worksheets("uSRAM").Range("H" & ind).value = fpga_sys_clk.value
'    Worksheets("uSRAM").Range("I" & ind).value = er
'    'Read Port Settings
'    Worksheets("uSRAM").Range("J" & ind).value = fpga_sys_clk.value
'    Worksheets("uSRAM").Range("K" & ind).value = er
    
    Worksheets("uSRAM").Range(usram_name_str_col & ind).value = "System Clock"
    Worksheets("uSRAM").Range(usram_nblock_col & ind).value = uval
    'Write Port Settings
    Worksheets("uSRAM").Range(usram_writeclkfreq_col & ind).value = fpga_sys_clk.value
    Worksheets("uSRAM").Range(usram_writeenrate_col & ind).value = er
    'Read Port Settings
    Worksheets("uSRAM").Range(usram_readclkfreq_col & ind).value = fpga_sys_clk.value
    Worksheets("uSRAM").Range(usram_readenrate_col & ind).value = er
    
    'Math Block Sheet
    If code = "append" Then
        ind = free_row(ActiveWorkbook.Worksheets("Math Block"), 8, 250, "L", "Math Block") 'Get free row to append data
    Else
        ind = 8 'starting row
    End If
'    Worksheets("Math Block").Range("B" & ind).value = "System Clock"
'    Worksheets("Math Block").Range("E" & ind).value = fpga_sys_clk.value
'    Worksheets("Math Block").Range("F" & ind).value = mval
'    Worksheets("Math Block").Range("G" & ind).value = tr
    
    Worksheets("Math Block").Range(math_name_str_col & ind).value = "System Clock"
    Worksheets("Math Block").Range(math_clkfreq_col & ind).value = fpga_sys_clk.value
    Worksheets("Math Block").Range(math_nblock_col & ind).value = mval
    Worksheets("Math Block").Range(math_tgrate_col & ind).value = tr
    
    'IO Sheet
    If code = "append" Then
        ind = free_row(ActiveWorkbook.Worksheets("IO"), 21, 721, "AC", "IO") 'Get free row to append data
    Else
        ind = 21 'starting row
    End If
    Application.EnableEvents = True
'    Worksheets("IO").Range("B" & ind).value = "System Clock"
'    Worksheets("IO").Range("E" & ind).value = Worksheets("IO").Range("DL19").value
'    Worksheets("IO").Range("F" & ind).value = io_tech.value
'
'    If Worksheets("IO").Range("CF" & ind).value = 1 Then 'Output only standard
'        Worksheets("IO").Range("H" & ind).value = ""     'input not supported
'    Else
'        Worksheets("IO").Range("H" & ind).value = inputs_tb.value
'    End If
'
'    If Worksheets("IO").Range("CE" & ind).value = 1 Then 'input only standard
'        Worksheets("IO").Range("I" & ind).value = ""     'Output not supported
'    Else
'        Worksheets("IO").Range("I" & ind).value = outputs_tb.value
'    End If
'
'    Worksheets("IO").Range("R" & ind).value = fpga_sys_clk.value
'    Worksheets("IO").Range("T" & ind).value = tr

    Worksheets("IO").Range(io_name_str_col & ind).value = "System Clock"
    Worksheets("IO").Range(io_banktype_col & ind).value = Worksheets("IO").Range("DL19").value
    Worksheets("IO").Range(io_standard_col & ind).value = io_tech.value
    
    If Worksheets("IO").Range("CF" & ind).value = 1 Then 'Output only standard
        Worksheets("IO").Range(io_inputpins_col & ind).value = ""     'input not supported
    Else
        Worksheets("IO").Range(io_inputpins_col & ind).value = inputs_tb.value
    End If
    
    If Worksheets("IO").Range("CE" & ind).value = 1 Then 'input only standard
        Worksheets("IO").Range(io_outputpins_col & ind).value = ""     'Output not supported
    Else
        Worksheets("IO").Range(io_outputpins_col & ind).value = outputs_tb.value
    End If
    
    Worksheets("IO").Range(io_clkfreq_col & ind).value = fpga_sys_clk.value
    Worksheets("IO").Range(io_tgrate_col & ind).value = tr
    Worksheets("IO").Range(io_enrate_col & ind).value = 0.5
    
    Application.EnableEvents = False

End Sub
    
Private Sub SetFDDR(ByVal code As String)
       
    Dim diff_io_tech As String
    Dim io_tech As String
    Dim start As String
    Dim stp As String
    Dim ddr_name As String
    
    Dim regval As Long
    Dim cval As Long
    Dim key_width_axi As String
        
    
    If fddr_tech.value <> "" Then
        'link with manage ip code i.e. gives module name
        Dim ipn As Integer
        ipn = Worksheets("dss_data").Range("A248").value
        Worksheets("dss_data").Range("D252").value = Worksheets("dss_data").Range("D252").value + 1 'Increase Created IP number
        Worksheets("dss_data").Range("A248").value = Worksheets("dss_data").Range("A248").value + 1 'Increase IP number created by Init PE
        ddr_name = fddr_tech.value & "_" & fddr_clk.value & "MHz_" & "X" & fddr_width.value & "/Init_PE_" & ipn
               
        If fddr_tech.value = "LPDDR3" Or fddr_tech.value = "QDR" Then
            fddr_ecc.value = False
        End If
        If fddr_ecc.value Then
            If fddr_width.value = 32 Then
                key_width_axi = fddr_tech.value & "_" & fddr_axi_type & "_x" & "40" & "_x" & fddr_axi_width.value
            End If
            If fddr_width.value = 64 Then
                key_width_axi = fddr_tech.value & "_" & fddr_axi_type & "_x" & "72" & "_x" & fddr_axi_width.value
            End If
        Else
            If fddr_tech.value = "QDR" Then
                key_width_axi = fddr_tech.value & "_x" & fddr_width.value
            Else
                key_width_axi = fddr_tech.value & "_" & fddr_axi_type & "_x" & fddr_width.value & "_x" & fddr_axi_width.value
            End If
       End If
        
       'This is for DQ width -> 64, ECC enabled and AXI width -> 512 configuration obtained from block synthesis flow in Libero
        regval = Application.WorksheetFunction.VLookup(key_width_axi, Worksheets("dss_data").Range("BD81:BH180"), 3, False)
       'Set Clock Tree Sheet correspoding to DDR
        If code = "append" Then
            ind = free_row(ActiveWorkbook.Worksheets("Clock"), 12, 511, "L", "Clock") 'Get free row to append data
        Else
            ind = 13 '2nd row from starting
        End If
        set_module_table ddr_name, "Clock", ind, ""  'setting module table to display in manage IP
'        Worksheets("Clock").Range("B" & ind).value = ddr_name
'        Worksheets("Clock").Range("E" & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
'        Worksheets("Clock").Range("G" & ind).value = regval
        Worksheets("Clock").Range(clock_name_str_col & ind).value = ddr_name
        Worksheets("Clock").Range(clock_freq_col & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
        Worksheets("Clock").Range(clock_fanout_col & ind).value = regval
        'setting two bank clock's in clock sheet
        ind = ind + 1
'        Worksheets("Clock").Range("B" & ind).value = ddr_name & "/HS_IO_CLK"
'        Worksheets("Clock").Range("E" & ind).value = fddr_clk.value
'        Worksheets("Clock").Range("F" & ind).value = "Bank Clock"
        Worksheets("Clock").Range(clock_name_str_col & ind).value = ddr_name & "/HS_IO_CLK"
        Worksheets("Clock").Range(clock_freq_col & ind).value = fddr_clk.value
        Worksheets("Clock").Range(clock_clktype_col & ind).value = "Bank Clock"
        ind = ind + 1
'        Worksheets("Clock").Range("B" & ind).value = ddr_name & "/HS_IO_CLK_90"
'        Worksheets("Clock").Range("E" & ind).value = fddr_clk.value
'        Worksheets("Clock").Range("F" & ind).value = "Bank Clock"
        Worksheets("Clock").Range(clock_name_str_col & ind).value = ddr_name & "/HS_IO_CLK_90"
        Worksheets("Clock").Range(clock_freq_col & ind).value = fddr_clk.value
        Worksheets("Clock").Range(clock_clktype_col & ind).value = "Bank Clock"
              
       'This is for DQ width -> 64, ECC enabled and AXI width -> 512 configuration obtained from block synthesis flow in Libero
        cval = Application.WorksheetFunction.VLookup(key_width_axi, Worksheets("dss_data").Range("BD81:BH180"), 2, False)
       'Set Logic Sheet correspoding to FDDR
        If code = "append" Then
            ind = free_row(ActiveWorkbook.Worksheets("Logic"), 9, 508, "J", "Logic") 'Get free row to append data
        Else
            ind = 10 '2nd row from starting
        End If
        set_module_table ddr_name, "Logic", ind, ""
'        Worksheets("Logic").Range("B" & ind).value = ddr_name
'        Worksheets("Logic").Range("E" & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
'        Worksheets("Logic").Range("F" & ind).value = regval
'        Worksheets("Logic").Range("G" & ind).value = cval
        Worksheets("Logic").Range(logic_name_str_col & ind).value = ddr_name
        Worksheets("Logic").Range(logic_freq_col & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
        Worksheets("Logic").Range(logic_dff_col & ind).value = regval
        Worksheets("Logic").Range(logic_lut_col & ind).value = cval
        
        'This is for DQ width -> 64, ECC enabled and AXI width -> 512 configuration obtained from block synthesis flow in Libero
         sramval = Application.WorksheetFunction.VLookup(key_width_axi, Worksheets("dss_data").Range("BD81:BH180"), 4, False)
       'Set LSRAM Sheet correspoding to FDDR
        If code = "append" Then
            ind = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM") 'Get free row to append data
        Else
            ind = 10 '2nd row from starting
        End If
        set_module_table ddr_name, "LSRAM", ind, ""
'        Worksheets("LSRAM").Range("B" & ind).value = ddr_name
'        Worksheets("LSRAM").Range("E" & ind).value = sramval
'        Worksheets("LSRAM").Range("G" & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
'        Worksheets("LSRAM").Range("M" & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
        Worksheets("LSRAM").Range(lsram_name_str_col & ind).value = ddr_name
        Worksheets("LSRAM").Range(lsram_nblock_col & ind).value = sramval
        Worksheets("LSRAM").Range(lsram_Aclkfreq_col & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
        Worksheets("LSRAM").Range(lsram_Bclkfreq_col & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
        
        'This is for DQ width -> 64, ECC enabled and AXI width -> 512 configuration obtained from block synthesis flow in Libero
        uramval = Application.WorksheetFunction.VLookup(key_width_axi, Worksheets("dss_data").Range("BD81:BH180"), 5, False)
        
       'Set uSRAM Sheet correspoding to FDDR
        If code = "append" Then
            ind = free_row(ActiveWorkbook.Worksheets("uSRAM"), 9, 250, "M", "uSRAM") 'Get free row to append data
        Else
            ind = 10 '2nd row from starting
        End If
        set_module_table ddr_name, "uSRAM", ind, ""
'        Worksheets("uSRAM").Range("B" & ind).value = ddr_name
'        Worksheets("uSRAM").Range("E" & ind).value = uramval
'        Worksheets("uSRAM").Range("H" & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
'        Worksheets("uSRAM").Range("J" & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
        Worksheets("uSRAM").Range(usram_name_str_col & ind).value = ddr_name
        Worksheets("uSRAM").Range(usram_nblock_col & ind).value = uramval
        Worksheets("uSRAM").Range(usram_writeclkfreq_col & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
        Worksheets("uSRAM").Range(usram_readclkfreq_col & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
        
        'Set IO correspoding to FDDR
        Dim rowInd As Integer
        Dim m_s As String
        Dim mult As Double
        Dim memory_clk As Double 'DDR Clock
        Dim user_clk As Double 'AXI/AHB Clock
        m_s = gear_ratio_cb.value
        If m_s <> "" Then
            mult = Application.WorksheetFunction.VLookup(m_s, Worksheets("dss_data").Range("J156:K158"), 2, False)
            memory_clk = Round(fddr_clk.value, 3)
            user_clk = memory_clk * mult
        End If
        
        io_tech = Application.WorksheetFunction.VLookup(fddr_tech.value, Worksheets("dss_data").Range("R125:T130"), 2, False)
        diff_io_tech = Application.WorksheetFunction.VLookup(fddr_tech.value, Worksheets("dss_data").Range("R125:T130"), 3, False)
        'Currently using the same differential IO tech as other.
                             
               Dim key, ecc_status As String
               If fddr_ecc.value Then
                 ecc_status = "YES"
               Else
                 ecc_status = "NO"
               End If
               key = fddr_tech.value & "_" & fddr_width.value & "_" & ecc_status
             
             
               ' There are five categories of IOs identified for MDDR/FDDR. They are : clk, addr/ba/dm, dq, dqs_diff and other
               
                If code = "append" Then
                    rowInd = free_row(ActiveWorkbook.Worksheets("IO"), 21, 716, "AC", "IO") 'Get free row to append data
                Else
                    rowInd = 22 '2nd row from starting
                End If
                set_module_table ddr_name, "IO", rowInd, ""
               'Category 1: Clock (Always Differntial). But for QDR type it is single ended.
               
'               Worksheets("IO").Range("B" & rowInd).value = ddr_name
'               Worksheets("IO").Range("E" & rowInd).value = "HSIO"
               Worksheets("IO").Range(io_name_str_col & rowInd).value = ddr_name
               Worksheets("IO").Range(io_banktype_col & rowInd).value = "HSIO"
               If fddr_tech.value <> "QDR" Then
'                    Worksheets("IO").Range("F" & rowInd).value = diff_io_tech
                    Worksheets("IO").Range(io_standard_col & rowInd).value = diff_io_tech
               Else
'                    Worksheets("IO").Range("F" & rowInd).value = io_tech
                    Worksheets("IO").Range(io_standard_col & rowInd).value = io_tech
               End If
'               Worksheets("IO").Range("H" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 2, False)
'               Worksheets("IO").Range("I" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 3, False)
'               Worksheets("IO").Range("J" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 4, False)
               Worksheets("IO").Range(io_inputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 2, False)
               Worksheets("IO").Range(io_outputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 3, False)
               Worksheets("IO").Range(io_bidirpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 4, False)
               Sheet32.LegalizeOneRow rowInd
               If mult = Worksheets("dss_data").Range("K156").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX4"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX4"
               ElseIf mult = Worksheets("dss_data").Range("K157").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX2"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX2"
               Else
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX1"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX1"
               End If
               
'               Worksheets("IO").Range("R" & rowInd).value = memory_clk
'               Worksheets("IO").Range("S" & rowInd).value = "clock"
'               Worksheets("IO").Range("U" & rowInd).value = 1
               Worksheets("IO").Range(io_clkfreq_col & rowInd).value = memory_clk
               Worksheets("IO").Range(io_datarate_col & rowInd).value = "clock"
               Worksheets("IO").Range(io_enrate_col & rowInd).value = 1
               
               rowInd = rowInd + 1
               
               ' Category 2: addr/ba/dm (Always Normal).
               'For QDR type address bits are depend on user i.e. qdr_address_width_cb.value combo box
               Dim add_bits As Integer
               If fddr_tech.value = "QDR" Then
                    add_bits = qdr_address_width_cb.value
               Else
                    add_bits = 0
               End If
'               Worksheets("IO").Range("B" & rowInd).value = ddr_name & "/DDR addr/ba"
'               Worksheets("IO").Range("E" & rowInd).value = "HSIO"
'               Worksheets("IO").Range("F" & rowInd).value = io_tech
'               Worksheets("IO").Range("H" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 5, False)
'               Worksheets("IO").Range("I" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 6, False) + add_bits
'               Worksheets("IO").Range("J" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 7, False)
               Worksheets("IO").Range(io_name_str_col & rowInd).value = ddr_name & "/DDR addr/ba"
               Worksheets("IO").Range(io_banktype_col & rowInd).value = "HSIO"
               Worksheets("IO").Range(io_standard_col & rowInd).value = io_tech
               Worksheets("IO").Range(io_inputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 5, False)
               Worksheets("IO").Range(io_outputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 6, False) + add_bits
               Worksheets("IO").Range(io_bidirpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 7, False)
               
               Sheet32.LegalizeOneRow rowInd
               If mult = Worksheets("dss_data").Range("K156").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX4"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX4"
               ElseIf mult = Worksheets("dss_data").Range("K157").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX2"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX2"
               Else
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX1"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX1"
               End If
               
'               Worksheets("IO").Range("R" & rowInd).value = memory_clk
'               Worksheets("IO").Range("S" & rowInd).value = "SDR"
'               Worksheets("IO").Range("T" & rowInd).value = 0.2
               Worksheets("IO").Range(io_clkfreq_col & rowInd).value = memory_clk
               Worksheets("IO").Range(io_datarate_col & rowInd).value = "SDR"
               Worksheets("IO").Range(io_tgrate_col & rowInd).value = 0.2
               Worksheets("IO").Range(io_enrate_col & rowInd).value = 0.5
               
               rowInd = rowInd + 1
               
               ' Category 3: dq (Always Normal).
               
'               Worksheets("IO").Range("B" & rowInd).value = ddr_name & "/DDR dq"
'               Worksheets("IO").Range("E" & rowInd).value = "HSIO"
'               Worksheets("IO").Range("F" & rowInd).value = io_tech
'               Worksheets("IO").Range("H" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 8, False)
'               Worksheets("IO").Range("I" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 9, False)
'               Worksheets("IO").Range("J" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 10, False)
               Worksheets("IO").Range(io_name_str_col & rowInd).value = ddr_name & "/DDR dq"
               Worksheets("IO").Range(io_banktype_col & rowInd).value = "HSIO"
               Worksheets("IO").Range(io_standard_col & rowInd).value = io_tech
               Worksheets("IO").Range(io_inputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 8, False)
               Worksheets("IO").Range(io_outputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 9, False)
               Worksheets("IO").Range(io_bidirpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 10, False)
               
               Sheet32.LegalizeOneRow rowInd
               If mult = Worksheets("dss_data").Range("K156").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDBX4"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDBX4"
               ElseIf mult = Worksheets("dss_data").Range("K157").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDBX2"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDBX2"
               Else
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDBX1"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDBX1"
               End If
               
'               Worksheets("IO").Range("M" & rowInd).value = fddr_odt.value
'               Worksheets("IO").Range("R" & rowInd).value = memory_clk
'               Worksheets("IO").Range("S" & rowInd).value = "DDR"
'               Worksheets("IO").Range("T" & rowInd).value = 0.35
'               Worksheets("IO").Range("U" & rowInd).value = 0.5
'               Worksheets("IO").Range("V" & rowInd).value = 0.5
               Worksheets("IO").Range(io_odt_col & rowInd).value = fddr_odt.value
               Worksheets("IO").Range(io_clkfreq_col & rowInd).value = memory_clk
               Worksheets("IO").Range(io_datarate_col & rowInd).value = "DDR"
               Worksheets("IO").Range(io_tgrate_col & rowInd).value = 0.35
               Worksheets("IO").Range(io_enrate_col & rowInd).value = 0.5
               Worksheets("IO").Range(io_odtenable_col & rowInd).value = 0.5
               
               rowInd = rowInd + 1
               
If fddr_tech.value <> "QDR" Then ' For QDR type dqs and dm pins are not supported.
               
               ' Category 4: dqs_differential
               
'               Worksheets("IO").Range("B" & rowInd).value = ddr_name & "/DDR dqs"
'               Worksheets("IO").Range("E" & rowInd).value = "HSIO"
'               Worksheets("IO").Range("F" & rowInd).value = diff_io_tech
'               Worksheets("IO").Range("H" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 11, False)
'               Worksheets("IO").Range("I" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 12, False)
'               Worksheets("IO").Range("J" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 13, False)
               Worksheets("IO").Range(io_name_str_col & rowInd).value = ddr_name & "/DDR dqs"
               Worksheets("IO").Range(io_banktype_col & rowInd).value = "HSIO"
               Worksheets("IO").Range(io_standard_col & rowInd).value = diff_io_tech
               Worksheets("IO").Range(io_inputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 11, False)
               Worksheets("IO").Range(io_outputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 12, False)
               Worksheets("IO").Range(io_bidirpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 13, False)
               
               Sheet32.LegalizeOneRow rowInd
               If mult = Worksheets("dss_data").Range("K156").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDBX4"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDBX4"
               ElseIf mult = Worksheets("dss_data").Range("K157").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDBX2"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDBX2"
               Else
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDBX1"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDBX1"
               End If
               
'               Worksheets("IO").Range("M" & rowInd).value = fddr_odt.value
'               Worksheets("IO").Range("R" & rowInd).value = memory_clk
'               Worksheets("IO").Range("S" & rowInd).value = "DDR"
'               Worksheets("IO").Range("T" & rowInd).value = 0.35
'               Worksheets("IO").Range("U" & rowInd).value = 0.5
'               Worksheets("IO").Range("V" & rowInd).value = 0.5
               Worksheets("IO").Range(io_odt_col & rowInd).value = fddr_odt.value
               Worksheets("IO").Range(io_clkfreq_col & rowInd).value = memory_clk
               Worksheets("IO").Range(io_datarate_col & rowInd).value = "DDR"
               Worksheets("IO").Range(io_tgrate_col & rowInd).value = 0.35
               Worksheets("IO").Range(io_enrate_col & rowInd).value = 0.5
               Worksheets("IO").Range(io_odtenable_col & rowInd).value = 0.5
               rowInd = rowInd + 1
               
               ' Category 5: dm (Always Normal).
               
'               Worksheets("IO").Range("B" & rowInd).value = ddr_name & "/DDR dm"
'               Worksheets("IO").Range("E" & rowInd).value = "HSIO"
'               Worksheets("IO").Range("F" & rowInd).value = io_tech
'               Worksheets("IO").Range("H" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 17, False)
'               Worksheets("IO").Range("I" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 18, False)
'               Worksheets("IO").Range("J" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 19, False)
               Worksheets("IO").Range(io_name_str_col & rowInd).value = ddr_name & "/DDR dm"
               Worksheets("IO").Range(io_banktype_col & rowInd).value = "HSIO"
               Worksheets("IO").Range(io_standard_col & rowInd).value = io_tech
               Worksheets("IO").Range(io_inputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 17, False)
               Worksheets("IO").Range(io_outputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 18, False)
               Worksheets("IO").Range(io_bidirpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 19, False)
               
               Sheet32.LegalizeOneRow rowInd
               If mult = Worksheets("dss_data").Range("K156").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX4"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX4"
               ElseIf mult = Worksheets("dss_data").Range("K157").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX2"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX2"
               Else
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX1"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX1"
               End If
               
'               Worksheets("IO").Range("R" & rowInd).value = memory_clk
'               Worksheets("IO").Range("S" & rowInd).value = "DDR"
'               Worksheets("IO").Range("T" & rowInd).value = 0.2
               Worksheets("IO").Range(io_clkfreq_col & rowInd).value = memory_clk
               Worksheets("IO").Range(io_datarate_col & rowInd).value = "DDR"
               Worksheets("IO").Range(io_tgrate_col & rowInd).value = 0.2
               Worksheets("IO").Range(io_enrate_col & rowInd).value = 0.5
               rowInd = rowInd + 1
            
End If
                ' Category 6: others (all normal)
               
'               Worksheets("IO").Range("B" & rowInd).value = ddr_name & "/DDR others"
'               Worksheets("IO").Range("E" & rowInd).value = "HSIO"
'               Worksheets("IO").Range("F" & rowInd).value = io_tech
'               Worksheets("IO").Range("H" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 14, False)
'               Worksheets("IO").Range("I" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 15, False)
'               Worksheets("IO").Range("J" & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 16, False)
               Worksheets("IO").Range(io_name_str_col & rowInd).value = ddr_name & "/DDR others"
               Worksheets("IO").Range(io_banktype_col & rowInd).value = "HSIO"
               Worksheets("IO").Range(io_standard_col & rowInd).value = io_tech
               Worksheets("IO").Range(io_inputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 14, False)
               Worksheets("IO").Range(io_outputpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 15, False)
               Worksheets("IO").Range(io_bidirpins_col & rowInd).value = WorksheetFunction.HLookup(key, Worksheets("dss_data").Range("CD11:EW29").value, 16, False)
               
               Sheet32.LegalizeOneRow rowInd
               If mult = Worksheets("dss_data").Range("K156").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX4"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX4"
               ElseIf mult = Worksheets("dss_data").Range("K157").value Then
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX2"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX2"
               Else
                 'Worksheets("IO").Range("Q" & rowInd).value = "DDTX1"
                 Worksheets("IO").Range(io_iog_col & rowInd).value = "DDTX1"
               End If
               
'               Worksheets("IO").Range("R" & rowInd).value = memory_clk
'               Worksheets("IO").Range("S" & rowInd).value = "SDR"
'               Worksheets("IO").Range("T" & rowInd).value = 0.125
'               Worksheets("IO").Range("U" & rowInd).value = 1
               Worksheets("IO").Range(io_clkfreq_col & rowInd).value = memory_clk
               Worksheets("IO").Range(io_datarate_col & rowInd).value = "SDR"
               Worksheets("IO").Range(io_tgrate_col & rowInd).value = 0.125
               Worksheets("IO").Range(io_enrate_col & rowInd).value = 1
               
               rowInd = rowInd + 1
               
            'Set PLL correspoding to FDDR
            
            If code = "append" Then
                ind = free_row(ActiveWorkbook.Worksheets("PLL & DLL"), 17, 24, "K", "PLL") 'Get free row to append data
            Else
                ind = 17 '1st row from starting
            End If
            set_module_table ddr_name, "PLL & DLL", ind, ""  'setting module table to display in manage IP
'            Worksheets("PLL & DLL").Range("B" & ind).value = ddr_name
'            Worksheets("PLL & DLL").Range("E" & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
'            Worksheets("PLL & DLL").Range("F" & ind).value = fddr_clk.value
'            Worksheets("PLL & DLL").Range("G" & ind).value = fddr_clk.value
'            Worksheets("PLL & DLL").Range("H" & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
'            Worksheets("PLL & DLL").Range("I" & ind).value = ""

            Worksheets("PLL & DLL").Range(pll_name_str_col & ind).value = ddr_name
            Worksheets("PLL & DLL").Range(pll_refclk_col & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
            Worksheets("PLL & DLL").Range(pll_out0freq_col & ind).value = fddr_clk.value
            Worksheets("PLL & DLL").Range(pll_out1freq_col & ind).value = fddr_clk.value
            Worksheets("PLL & DLL").Range(pll_out2freq_col & ind).value = Mid(fddr_fic_clk_freq_lb.Caption, 1, Len(fddr_fic_clk_freq_lb.Caption) - 4)
            Worksheets("PLL & DLL").Range(pll_out3freq_col & ind).value = ""
            
            'set code for QDR as 100 and zero for rest
            'this will be used by manage ip to perform delete option
            If fddr_tech.value = "QDR" Then
                ip_code_set 100
            Else
                ip_code_set 0
            End If
  End If
  
End Sub
Public Function validate_free_row() As Boolean
    Dim check, res As Integer
    'clock sheet checking
    check = free_row(ActiveWorkbook.Worksheets("Clock"), 12, 511, "L", "Clock")
    If check = 512 Then
        MsgBox "Rows are exhausted to append data in Clock sheet."
        validate_free_row = False
        Exit Function
    End If
    If check >= 509 And fddr_tech.value <> "" Then
        MsgBox "Rows are exhausted to append data in Clock sheet."
        validate_free_row = False
        Exit Function
    End If

    'Logic sheet checking
    check = free_row(ActiveWorkbook.Worksheets("Logic"), 9, 508, "J", "Logic")
    If check = 509 Then
        MsgBox "Rows are exhausted to append data in Logic sheet."
        validate_free_row = False
        Exit Function
    End If
    If check = 508 And fddr_tech.value <> "" Then
        MsgBox "Rows are exhausted to append data in Logic sheet."
        validate_free_row = False
        Exit Function
    End If
    
    'LSRAM sheet checking
    check = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM")
    If check = 251 Then
        MsgBox "Rows are exhausted to append data in LSRAM sheet."
        validate_free_row = False
        Exit Function
    End If
    If check = 250 And fddr_tech.value <> "" Then
        MsgBox "Rows are exhausted to append data in LSRAM sheet."
        validate_free_row = False
        Exit Function
    End If
    
    'uSRAM sheet checking
    check = free_row(ActiveWorkbook.Worksheets("uSRAM"), 9, 250, "M", "uSRAM")
    If check = 251 Then
        MsgBox "Rows are exhausted to append data in uSRAM sheet."
        validate_free_row = False
        Exit Function
    End If
    If check = 250 And fddr_tech.value <> "" Then
        MsgBox "Rows are exhausted to append data in uSRAM sheet."
        validate_free_row = False
        Exit Function
    End If
    
    'Math Block sheet checking
    check = free_row(ActiveWorkbook.Worksheets("Math Block"), 8, 250, "L", "Math Block")
    If check = 251 Then
        MsgBox "Rows are exhausted to append data in Math Block sheet."
        validate_free_row = False
        Exit Function
    End If
    
    'IO sheet checking
    check = free_row(ActiveWorkbook.Worksheets("IO"), 21, 721, "AC", "IO")
    If check >= 716 And fddr_tech.value <> "" Then
        MsgBox "Rows are exhausted to append data in IO sheet."
        validate_free_row = False
        Exit Function
    End If
    
    check = free_row(ActiveWorkbook.Worksheets("IO"), 21, 721, "AC", "IO")
    If check = 722 Then
        MsgBox "Rows are exhausted to append data in IO sheet."
        validate_free_row = False
        Exit Function
    End If
    
    'Transceiver Block sheet checking
    check = free_row(ActiveWorkbook.Worksheets("Transceiver"), 14, 37, "U", "Transceiver")
    If serdes1_protocol.value <> "   " Or serdes0_protocol.value <> "   " Then  'three spaces are set by default
        If check = 38 Then
            MsgBox "Rows are exhausted to append data in Transceiver sheet."
            validate_free_row = False
            Exit Function
        End If
        
        If check = 37 Then
            If serdes1_protocol.value <> "   " And serdes0_protocol.value <> "   " Then
                MsgBox "Rows are exhausted to append data in Transceiver sheet."
                validate_free_row = False
                Exit Function
            End If
        End If
    End If
    validate_free_row = True
End Function

Private Function validate(ByVal code As String) As Boolean
    Dim res As Boolean
    Dim val As Double
    Dim length As Integer
    Dim fddr_clk As Double
    Dim mddr_clk As Double
    Dim fpga_check As Integer
        
  
    If fddr_tech.value <> "" Then
        
        If code = "append" Then          'condition to check PLL availability for DDR configurator
            If Not ddr_validation_on_pll Then
                MsgBox "The PLLs count exceeding the maximum available PLLs"
                validate = False
                'Exit Function
            End If
        End If
        
        If fddr_width.value = "" Then
            MsgBox "FDDR invalid width configuration"
            validate = False
            Exit Function
        End If
        
        If ddr_memory_check Then
            MsgBox "Invalid DDR Memory Clock frequency"
            validate = False
            Exit Function
        End If
        
        length = Len(fddr_fic_clk_freq_lb.Caption)
        user_clk = Mid(fddr_fic_clk_freq_lb.Caption, 1, length - 4)
    
        If user_clk >= 0 And user_clk <= 200 Then
        Else
            MsgBox "User Clock frequency must be between 0 and 200 MHz"
            validate = False
            Exit Function
        End If
    End If
    


      If serdes0_protocol.value <> Worksheets("Transceiver").Range("BM17").value Then
          If IsNumeric(serdes0_no_of_lanes.value) Then
            If serdes0_no_of_lanes.value >= 1 And serdes0_no_of_lanes.value <= 4 Then
              ' Do Nothing
            Else
               MsgBox "Invalid Number of Lanes. The number of Lanes must be an Integer and should not exceed 4 "
               Exit Function
            End If
          Else
            MsgBox "Invalid Number of Lanes. The number of Lanes must be an Integer and should not exceed 4 "
            Exit Function
          End If
        
        
          If IsNumeric(serdes0_data_rate.value) Then
            If serdes0_data_rate.value >= 0.5 And serdes0_data_rate.value <= 12.7 Then
              ' Do Nothing
            Else
               MsgBox "Invalid Data Rate. Data Rates range from 0.5 Gbps upto 12.7 Gbps."
               Exit Function
            End If
          Else
            MsgBox "Invalid Data Rate. Data Rates range from 0.5 Gbps upto 12.7 Gbps."
            Exit Function
          End If
      End If



      If serdes1_protocol.value <> Worksheets("Transceiver").Range("BM17").value Then
          If IsNumeric(serdes1_no_of_lanes.value) Then
            If serdes1_no_of_lanes.value >= 1 And serdes1_no_of_lanes.value <= 4 Then
              ' Do Nothing
            Else
               MsgBox "Invalid Number of Lanes. The number of Lanes must be an Integer and should not exceed 4 "
               Exit Function
            End If
          Else
            MsgBox "Invalid Number of Lanes. The number of Lanes must be an Integer and should not exceed 4 "
            Exit Function
          End If
        
        
        
          
          If IsNumeric(serdes1_data_rate.value) Then
            If serdes1_data_rate.value >= 0.5 And serdes1_data_rate.value <= 12.7 Then
              ' Do Nothing
            Else
               MsgBox "Invalid Data Rate. Data Rates range from 0.5 Gbps upto 12.7 Gbps."
               Exit Function
            End If
          Else
            MsgBox "Invalid Data Rate. Data Rates range from 0.5 Gbps upto 12.7 Gbps."
            Exit Function
          End If
       End If
      

      If serdes0_protocol.value <> Worksheets("Transceiver").Range("BM17").value And serdes1_protocol.value <> Worksheets("Transceiver").Range("BM17").value Then
        Dim lanecnt As Integer
        lanecnt = CInt(serdes0_no_of_lanes.value) + CInt(serdes1_no_of_lanes.value)
        If lanecnt <= Worksheets("Transceiver_data").Range("C6").value Then
          ' Do Nothing
        Else
           MsgBox lanecnt & " exceeds the available number of channels " & Worksheets("Transceiver_data").Range("C6").value
           Exit Function
        End If
      End If

    
   If IsNumeric(fpga_sys_clk) Then
        val = Round(fpga_sys_clk.value)
        If val >= 0 And val <= 450 Then
        Worksheets("dss_data").Range("D144").Interior.Color = RGB(255, 255, 255)
        If code = "append" Then
                ind = free_row(ActiveWorkbook.Worksheets("Clock"), 12, 112, "L", "Clock") 'Get free row to append data
        Else
                ind = 12 'starting row
        End If
        'Worksheets("Clock").Range("E" & ind).Interior.Color = RGB(255, 255, 255)
        Worksheets("Clock").Range(clock_freq_col & ind).Interior.Color = RGB(255, 255, 255)
        Else
            MsgBox "FPGA System Clock frequency must be between 0 and 450 MHz"
            validate = False
            Worksheets("dss_data").Range("D144").Interior.Color = RGB(255, 0, 0)
            If code = "append" Then
                ind = free_row(ActiveWorkbook.Worksheets("Clock"), 12, 112, "L", "Clock") 'Get free row to append data
            Else
                ind = 12 'starting row
            End If
            'Worksheets("Clock").Range("E" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("Clock").Range(clock_freq_col & ind).Interior.Color = RGB(255, 0, 0)
            
            'Logic Sheet
            If code = "append" Then
                ind = free_row(ActiveWorkbook.Worksheets("Logic"), 9, 258, "J", "Logic") 'Get free row to append data
            Else
                ind = 9 'starting row
            End If
            'Worksheets("Logic").Range("E" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("Logic").Range(logic_freq_col & ind).Interior.Color = RGB(255, 0, 0)
            
            'LSRAM Sheet
            If code = "append" Then
                ind = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM") 'Get free row to append data
            Else
                ind = 9 'starting row
            End If
            
'            Worksheets("LSRAM").Range("E" & ind).value = lval
'            'Port A Settings
'            Worksheets("LSRAM").Range("G" & ind).Interior.Color = RGB(255, 0, 0)
'            'Port B Settings
'            Worksheets("LSRAM").Range("M" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("LSRAM").Range(lsram_nblock_col & ind).value = lval
            'Port A Settings
            Worksheets("LSRAM").Range(lsram_Aclkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            'Port B Settings
            Worksheets("LSRAM").Range(lsram_Bclkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            
            'uSRAM Sheet
            If code = "append" Then
                ind = free_row(ActiveWorkbook.Worksheets("uSRAM"), 9, 250, "M", "uSRAM") 'Get free row to append data
            Else
                ind = 9 'starting row
            End If
'            Worksheets("uSRAM").Range("E" & ind).value = uval
'            'Write Port Settings
'            Worksheets("uSRAM").Range("H" & ind).Interior.Color = RGB(255, 0, 0)
'            'Read Port Settings
'            Worksheets("uSRAM").Range("J" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("uSRAM").Range(usram_nblock_col & ind).value = uval
            'Write Port Settings
            Worksheets("uSRAM").Range(usram_writeclkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            'Read Port Settings
            Worksheets("uSRAM").Range(usram_readclkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            
            'Math Block Sheet
            If code = "append" Then
                ind = free_row(ActiveWorkbook.Worksheets("Math Block"), 8, 250, "L", "Math Block") 'Get free row to append data
            Else
                ind = 8 'starting row
            End If
            'Worksheets("Math Block").Range("E" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("Math Block").Range(math_clkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            
            'IO Sheet
            If code = "append" Then
                ind = free_row(ActiveWorkbook.Worksheets("IO"), 21, 721, "AC", "IO") 'Get free row to append data
            Else
                ind = 21 'starting row
            End If
            'Worksheets("IO").Range("R" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("IO").Range(io_clkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            
            'Exit Function
        End If
    Else
        MsgBox "FPGA System Clock frequency must be between 0 and 450 MHz"
        validate = False
        Worksheets("dss_data").Range("D144").Interior.Color = RGB(255, 0, 0)
        If code = "append" Then
                ind = free_row(ActiveWorkbook.Worksheets("Clock"), 12, 112, "L", "Clock") 'Get free row to append data
            Else
                ind = 12 'starting row
            End If
            'Worksheets("Clock").Range("E" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("Clock").Range(clock_freq_col & ind).Interior.Color = RGB(255, 0, 0)
            
            'Logic Sheet
            If code = "append" Then
                ind = free_row(ActiveWorkbook.Worksheets("Logic"), 9, 258, "J", "Logic") 'Get free row to append data
            Else
                ind = 9 'starting row
            End If
            'Worksheets("Logic").Range("E" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("Logic").Range(logic_freq_col & ind).Interior.Color = RGB(255, 0, 0)
            
            'LSRAM Sheet
            If code = "append" Then
                ind = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM") 'Get free row to append data
            Else
                ind = 9 'starting row
            End If
            
'            Worksheets("LSRAM").Range("E" & ind).value = lval
'            'Port A Settings
'            Worksheets("LSRAM").Range("G" & ind).Interior.Color = RGB(255, 0, 0)
'            'Port B Settings
'            Worksheets("LSRAM").Range("M" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("LSRAM").Range(lsram_nblock_col & ind).value = lval
            'Port A Settings
            Worksheets("LSRAM").Range(lsram_Aclkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            'Port B Settings
            Worksheets("LSRAM").Range(lsram_Bclkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            
            'uSRAM Sheet
            If code = "append" Then
                ind = free_row(ActiveWorkbook.Worksheets("uSRAM"), 9, 250, "M", "uSRAM") 'Get free row to append data
            Else
                ind = 9 'starting row
            End If
'            Worksheets("uSRAM").Range("E" & ind).value = uval
'            'Write Port Settings
'            Worksheets("uSRAM").Range("H" & ind).Interior.Color = RGB(255, 0, 0)
'            'Read Port Settings
'            Worksheets("uSRAM").Range("J" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("uSRAM").Range(usram_nblock_col & ind).value = uval
            'Write Port Settings
            Worksheets("uSRAM").Range(usram_writeclkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            'Read Port Settings
            Worksheets("uSRAM").Range(usram_readclkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            
            'Math Block Sheet
            If code = "append" Then
                ind = free_row(ActiveWorkbook.Worksheets("Math Block"), 8, 250, "L", "Math Block") 'Get free row to append data
            Else
                ind = 8 'starting row
            End If
            'Worksheets("Math Block").Range("E" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("Math Block").Range(math_clkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            
            'IO Sheet
            If code = "append" Then
                ind = free_row(ActiveWorkbook.Worksheets("IO"), 21, 721, "AC", "IO") 'Get free row to append data
            Else
                ind = 21 'starting row
            End If
            'Worksheets("IO").Range("R" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("IO").Range(io_clkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
        
    End If
    
    If IsNumeric(default_tr_txt) Then
        val = Round(default_tr_txt.value)
        If val >= 0 And val <= 100 Then
        Else
            MsgBox "FPGA Default Toggle Rate must be between 0 and 100 %"
            validate = False
            Worksheets("dss_data").Range("D154").Interior.Color = RGB(255, 0, 0)
        End If
    Else
        MsgBox "FPGA Default Toggle Rate must be between 0 and 100 %"
        validate = False
        Worksheets("dss_data").Range("D154").Interior.Color = RGB(255, 0, 0)
    End If
    
    If IsNumeric(default_er_txt) Then
        val = Round(default_er_txt.value)
        If val >= 0 And val <= 100 Then
        Else
            MsgBox "FPGA Default RAM Enable Rate must be between 0 and 100 %"
            validate = False
            Worksheets("dss_data").Range("D155").Interior.Color = RGB(255, 0, 0)
        End If
    Else
        MsgBox "FPGA Default RAM Enable Rate must be between 0 and 100 %"
        validate = False
        Worksheets("dss_data").Range("D155").Interior.Color = RGB(255, 0, 0)
    End If
    
    If IsInteger(inputs_tb.value) Then
    Else
     MsgBox "FPGA #Inputs: Only Positive Integers are permitted"
     validate = False
     'IO Sheet
        If code = "append" Then
            ind = free_row(ActiveWorkbook.Worksheets("IO"), 21, 721, "AC", "IO") 'Get free row to append data
        Else
            ind = 21 'starting row
        End If
        If Worksheets("IO").Range("CF" & ind).value = 1 Then 'Output only standard
            'Worksheets("IO").Range("H" & ind).Interior.Color = RGB(0, 0, 0)
            Worksheets("IO").Range(io_inputpins_col & ind).Interior.Color = RGB(0, 0, 0)
        Else
            'Worksheets("IO").Range("H" & ind).Interior.Color = RGB(255, 0, 0)
            Worksheets("IO").Range(io_inputpins_col & ind).Interior.Color = RGB(255, 0, 0)
        End If
     Exit Function
    End If
    
    If IsInteger(outputs_tb.value) Then
    Else
     MsgBox "FPGA #Outputs: Only Positive Integers are permitted"
     validate = False
     If Worksheets("IO").Range("CE" & ind).value = 1 Then 'input only standard
        'Worksheets("IO").Range("I" & ind).Interior.Color = RGB(0, 0, 0)
        Worksheets("IO").Range(io_outputpins_col & ind).Interior.Color = RGB(0, 0, 0)
     Else
        'Worksheets("IO").Range("I" & ind).Interior.Color = RGB(255, 0, 0)
        Worksheets("IO").Range(io_outputpins_col & ind).Interior.Color = RGB(255, 0, 0)
     End If
     Exit Function
    End If
    '------------------------------------------------------------------------------------------
    'Checking for registers, LUTS, Usram, Lsram, Math Blocks
    If fpga_reg_txt.value > sreg Then
        If fpga_reg_txt.value = "" Then
            MsgBox "The Registers count must be a whole number"
            validate = False
            'Exit Function
        End If
        MsgBox "The Registers count exceeding the maximum available registers"
        validate = False
        Worksheets("dss_data").Range("D158").Interior.Color = RGB(255, 0, 0)
    
    End If
    
    If fpga_comb_txt.value > scomb Then
        If fpga_comb_txt.value = "" Then
            MsgBox "The LUTs count must be a whole number"
            validate = False
            Worksheets("dss_data").Range("D159").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        MsgBox "The LUTs count exceeding the maximum available LUTs"
        validate = False
        Worksheets("dss_data").Range("D159").Interior.Color = RGB(255, 0, 0)
        'Exit Function
    End If
    
    fpga_check = Worksheets("dss_data").Range("P133").value
    If fpga_uram_txt.value > fpga_check Then
        If fpga_uram_txt.value = "" Then
            MsgBox "The uSRAM Blocks count must be a whole number"
            validate = False
            Worksheets("dss_data").Range("D160").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        MsgBox "The uSRAM Blocks count exceeding the maximum available uSRAM Blocks"
        validate = False
        Worksheets("dss_data").Range("D160").Interior.Color = RGB(255, 0, 0)
        'Exit Function
    End If
    
    fpga_check = Worksheets("dss_data").Range("P134").value
    If fpga_lsram_txt.value > fpga_check Then
        If fpga_lsram_txt.value = "" Then
            MsgBox "The LSRAM Blocks count must be a whole number"
            validate = False
            Worksheets("dss_data").Range("D161").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        MsgBox "The LSRAM Blocks count exceeding the maximum available LSRAM Blocks"
        validate = False
        Worksheets("dss_data").Range("D161").Interior.Color = RGB(255, 0, 0)
        'Exit Function
    End If
    
    fpga_check = Worksheets("dss_data").Range("P135").value
    If fpga_math_txt.value > fpga_check Then
        If fpga_math_txt.value = "" Then
            MsgBox "The Math Blocks count must be a whole number"
            validate = False
            Worksheets("dss_data").Range("D162").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        MsgBox "The Math Blocks count exceeding the maximum available Math Blocks"
        validate = False
        Worksheets("dss_data").Range("D162").Interior.Color = RGB(255, 0, 0)
        'Exit Function
    End If
    
    If code = "append" Then
        If Not validate_free_row Then
            validate = False
            Exit Function
        End If
    End If
    validate = True


End Function
Private Sub ok_clear_Click()
    
    Dim rowInd As Integer
    Dim res As Boolean
    
    
    res = validate("clear")
    
    If res Then
        
        If disable_msg_boolean <> True Then
            iRet = MsgBox("This action will reset all the user entry fields, except for device settings and set them to the values specified. Do you want to continue?", vbYesNo, "Reset and set to the values specified")
        End If
        
        If iRet = vbNo Then
          Exit Sub
        Else
        
            Application.Calculation = xlCalculationManual
            Application.ScreenUpdating = False
            Application.EnableEvents = False
        
            clear_all
            rowInd = 21
            SetSystem "clear"
            SetFDDR "clear"
            SetSerdes "clear"
            
       End If
        
        Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Application.Calculate
        Application.ScreenUpdating = True
        
        ComputeThermalPower
        'Save must be after clear_all as clear_all is reseting the save parameter
        Save
    
        Unload Me
    End If
    
End Sub
Private Sub ok_append_Click()
    Dim rowInd As Integer
    Dim res As Boolean
    
    res = validate("append")
    
    'If res Then
        If disable_msg_boolean <> True Then
            iRet = MsgBox("This action will append data for all the user entry fields, except for device settings and set them to the values specified. Do you want to continue?", vbYesNo, "Append and set to the values specified")
        End If
        
        If iRet = vbNo Then
          Exit Sub
        Else
            Application.Calculation = xlCalculationManual
            Application.ScreenUpdating = False
            Application.EnableEvents = False

            SetSystem "append"
            SetFDDR "append"
            SetSerdes "append"
       End If

        Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Application.Calculate
        Application.ScreenUpdating = True
        
        ComputeThermalPower
        'Save must be after clear_all as clear_all is reseting the save parameter
        Save
    
        Unload Me
    'End If
End Sub

'Make public for test only - not updated for G5.
Private Sub scriptSetFDDR(ByVal start As Integer, ByRef Ty As String, ByRef width As String, ByRef ODT As String, ByRef FCLK As String, ByRef fddr_clk As String)
    
    fddr_tech.value = Ty
    fddr_width.value = width
    Application.Calculation = xlCalculationAutomatic
    Application.Calculate
    fddr_tech_Change
    Application.Calculate
    Dim o_list(1 To 1) As String
    o_list(1) = ODT
    
    With fddr_odt
            .Enabled = True
            .RowSource = vbNullString
            .List = o_list
    End With
    
    fddr_odt.value = ODT
    fddr_fic_clk.value = FCLK
    
    If fddr_clk = "1" Then
        fddr_clk_mult.value = Worksheets("dss_data").Range("R125").value
    ElseIf fddr_clk = "2" Then
        fddr_clk_mult.value = Worksheets("dss_data").Range("R126").value
    ElseIf fddr_clk = "3" Then
        fddr_clk_mult.value = Worksheets("dss_data").Range("R127").value
    ElseIf fddr_clk = "4" Then
        fddr_clk_mult.value = Worksheets("dss_data").Range("R128").value
    End If
    
    SetFDDR start
End Sub

Private Function IsInteger(value As String) As Boolean
 Dim re As Object
 Set re = CreateObject("vbscript.RegExp")
 re.Pattern = "^\d+$"
 IsInteger = re.test(value)
 Set re = Nothing
End Function

Private Sub serdes0_protocol_Change()
  
    sDecimal = Application.International(xlDecimalSeparator)
    sThousand = Application.International(xlThousandsSeparator)
    
    If serdes0_protocol.value = Worksheets("Transceiver").Range("BM17").value Then
      serdes0_no_of_lanes.Enabled = False
      serdes0_data_rate.Enabled = False
    Else
      serdes0_no_of_lanes.Enabled = True
      serdes0_data_rate.Enabled = True
      serdes0_no_of_lanes.value = WorksheetFunction.VLookup(serdes0_protocol.value, Worksheets("Transceiver").Range("BM17:BX49").value, 2, False)
      ' To convert from German to English notation because VB code will intrepet everything in English
      serdes0_data_rate.value = Replace(WorksheetFunction.VLookup(serdes0_protocol.value, Worksheets("Transceiver").Range("BM17:BX49").value, 4, False), ".", sDecimal)
    End If
  
End Sub

Private Sub serdes1_protocol_Change()
  
    sDecimal = Application.International(xlDecimalSeparator)
    sThousand = Application.International(xlThousandsSeparator)
    
    If serdes1_protocol.value = Worksheets("Transceiver").Range("BM17").value Then
      serdes1_no_of_lanes.Enabled = False
      serdes1_data_rate.Enabled = False
    Else
      serdes1_no_of_lanes.Enabled = True
      serdes1_data_rate.Enabled = True
      serdes1_no_of_lanes.value = WorksheetFunction.VLookup(serdes1_protocol.value, Worksheets("Transceiver").Range("BM17:BX49").value, 2, False)
      ' To convert from German to English notation because VB code will intrepet everything in English
      serdes1_data_rate.value = Replace(WorksheetFunction.VLookup(serdes1_protocol.value, Worksheets("Transceiver").Range("BM17:BX49").value, 4, False), ".", sDecimal)
    End If
  
End Sub


Private Sub RestoreSERDES()
    
    serdes0_protocol.value = Worksheets("dss_data").Range("D138").value
    serdes0_no_of_lanes.value = Worksheets("dss_data").Range("D139").value
    serdes0_data_rate.value = Worksheets("dss_data").Range("D140").value

    serdes1_protocol.value = Worksheets("dss_data").Range("D141").value
    serdes1_no_of_lanes.value = Worksheets("dss_data").Range("D142").value
    serdes1_data_rate.value = Worksheets("dss_data").Range("D143").value

End Sub

Private Sub SaveSERDES()
    
    Worksheets("dss_data").Range("D138").value = serdes0_protocol.value
    Worksheets("dss_data").Range("D139").value = serdes0_no_of_lanes.value
    Worksheets("dss_data").Range("D140").value = serdes0_data_rate.value

    Worksheets("dss_data").Range("D141").value = serdes1_protocol.value
    Worksheets("dss_data").Range("D142").value = serdes1_no_of_lanes.value
    Worksheets("dss_data").Range("D143").value = serdes1_data_rate.value

End Sub

Private Sub SetSerdes(ByVal code As String)
   Dim ind As Integer
   Dim s As Integer
   Dim xcvr_name As String
    If code = "append" Then
        ind = free_row(ActiveWorkbook.Worksheets("Transceiver"), 14, 37, "U", "Transceiver") 'Get free row to append data
    Else
        ind = 14 'SERDES Starting Row
    End If
   
   sDecimal = Application.International(xlDecimalSeparator)
   sThousand = Application.International(xlThousandsSeparator)
   s = Worksheets("dss_data").Range("A248").value
   
    
   'Set Serdes
   'SERDES 0
    If serdes0_protocol.value <> Worksheets("Transceiver").Range("BM17").value Then
    
        'link with manage IP
        Worksheets("dss_data").Range("D252").value = Worksheets("dss_data").Range("D252").value + 1 'Increase Created IP number
        Worksheets("dss_data").Range("A248").value = Worksheets("dss_data").Range("A248").value + 1 'Increase IP number created by Init PE
        
        xcvr_name = serdes0_protocol.value & "/Init_PE_" & s
        set_module_table xcvr_name, "Transceiver", ind, ""
        Application.EnableEvents = True
        'Worksheets("Transceiver").Range("B" & ind).value = xcvr_name
        Worksheets("Transceiver").Range(xcvr_name_str_col & ind).value = xcvr_name
        'Worksheets("Transceiver").Range("E" & ind).value = serdes0_protocol.value
        Worksheets("Transceiver").Range(xcvr_protocol_col & ind).value = serdes0_protocol.value
        Application.EnableEvents = False
        'Worksheets("Transceiver").Range("F" & ind).value = serdes0_no_of_lanes.value
        Worksheets("Transceiver").Range(xcvr_nlanes_col & ind).value = serdes0_no_of_lanes.value
        ' To convert from German to English notation because VB code will intrepet everything in English
        'Worksheets("Transceiver").Range("H" & ind).value = Replace(serdes0_data_rate.value, ",", sThousand)
        Worksheets("Transceiver").Range(xcv_txdatarate_col & ind).value = Replace(serdes0_data_rate.value, ",", sThousand)
        Worksheets("Transceiver").Range(xcvr_rxdatarate_col & ind).value = Replace(serdes0_data_rate.value, ",", sThousand)
        ind = ind + 1
        
        ip_code_set 1 'set code for xcvr as one this will be used by manage ip to perform delete option
    End If
   

   'SERDES 1
    If serdes1_protocol.value <> Worksheets("Transceiver").Range("BM17").value Then
        'link with manage IP
        Worksheets("dss_data").Range("D252").value = Worksheets("dss_data").Range("D252").value + 1 'Increase Created IP number
        
        xcvr_name = serdes1_protocol.value & "/Init_PE_" & s
        set_module_table xcvr_name, "Transceiver", ind, ""
        Application.EnableEvents = True
        'Worksheets("Transceiver").Range("B" & ind).value = xcvr_name
        Worksheets("Transceiver").Range(xcvr_name_str_col & ind).value = xcvr_name
        'Worksheets("Transceiver").Range("E" & ind).value = serdes1_protocol.value
        Worksheets("Transceiver").Range(xcvr_protocol_col & ind).value = serdes1_protocol.value
        Application.EnableEvents = False
        'Worksheets("Transceiver").Range("F" & ind).value = serdes1_no_of_lanes.value
        Worksheets("Transceiver").Range(xcvr_nlanes_col & ind).value = serdes1_no_of_lanes.value
        ' To convert from German to English notation because VB code will intrepet everything in English
        'Worksheets("Transceiver").Range("H" & ind).value = Replace(serdes1_data_rate.value, ",", sThousand)
        Worksheets("Transceiver").Range(xcv_txdatarate_col & ind).value = Replace(serdes1_data_rate.value, ",", sThousand)
        Worksheets("Transceiver").Range(xcvr_rxdatarate_col & ind).value = Replace(serdes1_data_rate.value, ",", sThousand)
        
        ip_code_set 1 'set code for xcvr as one this will be used by manage ip to perform delete option
    End If

End Sub
Function MPESETINITPC(ByVal fpga_sys_clk_ As String, ByVal cb_init_fabric_ As String, ByVal fpga_reg_txt_ As String, ByVal fpga_comb_txt_ As String, ByVal fpga_uram_txt_ As String, _
ByVal fpga_lsram_txt_ As String, ByVal fpga_math_txt_ As String, ByVal io_tech_ As String, ByVal inputs_tb_ As String, ByVal outputs_tb_ As String, ByVal default_tr_txt_ As String, _
ByVal default_er_txt_ As String, ByVal ok_append_ As String, ByVal ok_clear_ As String, ByVal reset_button_ As String)

        
        fpga_sys_clk = fpga_sys_clk_
        cb_init_fabric = cb_init_fabric_
        fpga_reg_txt = fpga_reg_txt_
        fpga_comb_txt = fpga_comb_txt_
        fpga_uram_txt = fpga_uram_txt_
        fpga_lsram_txt = fpga_lsram_txt_
        fpga_math_txt = fpga_math_txt_
        io_tech = io_tech_
        inputs_tb = inputs_tb_
        outputs_tb = outputs_tb_
        default_tr_txt = default_tr_txt_
        default_er_txt = default_er_txt_
        
        disable_msg_boolean = True
        
        If ok_append_ = "True" Then
            ok_append_Click
        ElseIf ok_clear_ = "True" Then
            ok_clear_Click
        ElseIf reset_button_ = "True" Then
            reset_button_Click
        Else
            MsgBox "Select a Command"
        End If
End Function
Attribute VB_Name = "io_banks"
Attribute VB_Base = "0{A31013C5-67D7-4864-A69B-51BAA9115CB3}{4F65187B-3CA2-4DF1-8D1A-E11BF6487348}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Cancel_Click()
    Unload Me
End Sub
Private Sub OK_Click()
    nbBanks = Worksheets("bank_static_data").Range("AD3").value
    For i = 0 To nbBanks - 1
        Worksheets("bank_static_data").Range("AH" & (23 + i)).value = Controls.Item("voltage_bank" & i).value
    Next i
    Unload Me
End Sub

Private Sub set_all_hsio_button_Click()
    nbBanks = Worksheets("bank_static_data").Range("AD3").value
    For i = 0 To nbBanks - 1
        If Worksheets("bank_static_data").Range("AL" & (23 + i)).value = "hsio" Then
            Controls.Item("voltage_bank" & i).value = set_all_hsio_cb.value
        End If
    Next i
    'UpdateCb
    Worksheets("bank_static_data").Range("AL5").value = set_all_hsio_cb.value
End Sub

Private Sub set_all_gpio_button_Click()
    nbBanks = Worksheets("bank_static_data").Range("AD3").value
    For i = 0 To nbBanks - 1
        If Worksheets("bank_static_data").Range("AL" & (23 + i)).value = "gpio" Then
            Controls.Item("voltage_bank" & i).value = set_all_gpio_cb.value
        End If
    Next i
    'UpdateCb
    Worksheets("bank_static_data").Range("AL4").value = set_all_gpio_cb.value
End Sub

Private Sub UpdateCb()
    nbBanks = Worksheets("bank_static_data").Range("AD3").value
    For i = 0 To nbBanks - 1
        Set vselect = Controls.Item("voltage_bank" & i)
        vselect.value = Worksheets("bank_static_data").Range("AH" & (23 + i))
    Next i
End Sub


Private Sub UserForm_Initialize()
    'Dim lbl As Label
    'Dim vselect As ComboBox
    
    nbBanks = Worksheets("bank_static_data").Range("AD3").value
    
    For i = 0 To nbBanks - 1
        L = "label_bank" & i
        Set lbl = io_banks.Controls.Item(L)
        lbl.Caption = "Bank " & i & " - " & UCase(Worksheets("bank_static_data").Range("AL" & (23 + i)))
        lbl.Enabled = True
        
        Set vselect = Controls.Item("voltage_bank" & i)
        vselect.Enabled = True
        previousVal = Worksheets("bank_static_data").Range("AH" & (23 + i))
        'HSIO or GPIO Voltage Options
        If Worksheets("bank_static_data").Range("AL" & (23 + i)).value = "hsio" Then
            vselect.RowSource = vbNullString
            vselect.List = Worksheets("bank_static_data").Range("$AM$13:$AM$18").value
            vselect.value = previousVal
        Else
            vselect.RowSource = vbNullString
            vselect.List = Worksheets("bank_static_data").Range("$AK$13:$AK$18").value
            vselect.value = previousVal
        End If
     Next i
     
     'This code is for disabling/graying out the unsupported banks
     For i = nbBanks To 7
        Set lbl = Controls.Item("label_bank" & i)
        lbl.Caption = "Bank " & i & " - " & Worksheets("bank_static_data").Range("AL" & (23 + i))
        lbl.Enabled = False
        
        Set vselect = Controls.Item("voltage_bank" & i)
        vselect.Enabled = False
        vselect.value = "N/A"
     Next i
     
     set_all_gpio_cb.value = Worksheets("bank_static_data").Range("AL4").value
     set_all_hsio_cb.value = Worksheets("bank_static_data").Range("AL5").value
End Sub

Attribute VB_Name = "manage_all_ip"
Attribute VB_Base = "0{3BC9FD58-2D06-439D-B7E8-E88A340D18FB}{24B2A159-B440-41FD-88E0-58A7C494B3A3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub close_ip_Click()
    Unload Me
End Sub
Private Sub create_Click()
    If create_ip_list.value = "Memory Interface" Then
        add_ddr3.Show
    ElseIf create_ip_list.value = "Transceiver Interface" Then
        add_transceiver.Show
    ElseIf create_ip_list.value = "Block Memory" Then
        memory_config.Show
    Else
        MsgBox "Please select an IP module first"
    End If
End Sub

Private Sub manage_ip_list_Click()

End Sub

Private Sub UserForm_Initialize()
    If Worksheets("dss_data").Range("D252").value = 0 Then
      MultiPage1.value = 1
    Else
         MultiPage1.value = 0
    End If
End Sub
Private Sub delete_ip_Click()
Dim module_d As String
Dim ref, code As Integer

    
   If manage_ip_list.value <> "" Then
        Application.Calculation = xlCalculationManual
        Application.ScreenUpdating = False
        Application.EnableEvents = False
       
        module_d = manage_ip_list.value
        code = WorksheetFunction.VLookup(module_d, Worksheets("dss_data").Range("D254:F273").value, 3, False)
        
        If code = 0 Or code = 100 Then '100 for QDR 0 for rest ddr types
            delete_ddr_ip code
        End If
        
        If code = 1 Then
            delete_xcvr_ip
        End If
        
        If code = 2 Then
            delete_memory_lsram
        End If
        
        If code = 3 Then
            delete_memory_usram
        End If
        
        ref_decrement_intable manage_ip_list.value 'decrement the references of rows based on module
        d_module_name module_d 'deleting module name and arranging remaining modules
        d_module_tabel module_d, code ' deleting module references present in dss_data sheet
        
        
        Worksheets("dss_data").Range("D252").value = Worksheets("dss_data").Range("D252").value - 1 'Total number of IP created
        
        Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Application.Calculate
        Application.ScreenUpdating = True
        
    Else
        MsgBox "Please select an IP module first"
    End If
    
End Sub
Private Sub delete_ddr_ip(ByVal code As Integer)
Dim ref As Integer
Dim module_d As String
        module_d = manage_ip_list.value
        ref = WorksheetFunction.VLookup(module_d, Worksheets("dss_data").Range("H254:N273").value, 2, False)
        d_clock ref        'deleting seleted IP data
        shift_clock ref    'Shifting data below rows
    
        ref = WorksheetFunction.VLookup(module_d, Worksheets("dss_data").Range("H254:N273").value, 3, False)
        d_logic ref
        shift_logic ref
    
        ref = WorksheetFunction.VLookup(module_d, Worksheets("dss_data").Range("H254:N273").value, 4, False)
        d_lsram ref
        shift_lsram ref
    
        ref = WorksheetFunction.VLookup(module_d, Worksheets("dss_data").Range("H254:N273").value, 5, False)
        d_usram ref
        shift_usram ref
        
        ref = WorksheetFunction.VLookup(module_d, Worksheets("dss_data").Range("H254:M273").value, 6, False)
        'If code = 100 Then
        '    d_qdr_io ref
        '    shift_qdr_io ref
        'Else
            d_io ref, code
            shift_io ref, code
        'End If
        ref = WorksheetFunction.VLookup(module_d, Worksheets("dss_data").Range("H254:N273").value, 7, False)
        d_pll ref
        shift_pll ref

End Sub
Private Sub delete_xcvr_ip()
Dim ref As Integer
Dim module_d As String
        module_d = manage_ip_list.value
        ref = WorksheetFunction.VLookup(module_d, Worksheets("dss_data").Range("H254:O273").value, 8, False)
        d_xcvr ref        'deleting seleted IP data
        shift_xcvr ref    'Shifting data below rows
End Sub
Private Sub delete_memory_lsram()
Dim ref As Integer
Dim module_d As String
        module_d = manage_ip_list.value
        ref = WorksheetFunction.VLookup(module_d, Worksheets("dss_data").Range("H254:P273").value, 9, False)
        d_lsram ref        'deleting seleted IP data
        shift_lsram ref    'Shifting data below rows
End Sub
Private Sub delete_memory_usram()
Dim ref As Integer
Dim module_d As String
        module_d = manage_ip_list.value
        ref = WorksheetFunction.VLookup(module_d, Worksheets("dss_data").Range("H254:Q273").value, 10, False)
        d_usram ref        'deleting seleted IP data
        shift_usram ref    'Shifting data below rows
End Sub
'This sub is used to call sub to decrement the references of row in table based on code
Private Sub ref_decrement_intable(ByVal m_name As String)
    Dim ip_num, code, total_ip As Integer
    ip_num = WorksheetFunction.VLookup(m_name, Worksheets("dss_data").Range("D254:F273").value, 2, False)
    ip_num = 253 + ip_num
    code = WorksheetFunction.VLookup(m_name, Worksheets("dss_data").Range("D254:F273").value, 3, False)
    total_ip = Worksheets("dss_data").Range("D252").value
    
    If code = 0 Then
        ddr_decrement_intable ip_num + 1, total_ip
       ' ddr_rams_dependent_decrement ip_num + 1, total_ip
    End If
    
    If code = 1 Then
        xcvr_decrement_intable ip_num + 1, total_ip
    End If
    
    If code = 2 Then
        memoryLSRAM_decrement_intable ip_num + 1, total_ip
    End If
    
    If code = 3 Then
        memoryUSRAM_decrement_intable ip_num + 1, total_ip
    End If
    
End Sub
' This sub help's to decrement DDR selected ip reference by 1 and IO by 6
Sub ddr_decrement_intable(ByVal start As Integer, ByVal total_ip As Integer)
    Dim ind As Integer
    total_ip = total_ip + 253
    For ind = start To total_ip
        Worksheets("dss_data").Range("I" & ind).value = Worksheets("dss_data").Range("I" & ind).value - 3
        Worksheets("dss_data").Range("J" & ind).value = Worksheets("dss_data").Range("J" & ind).value - 1
        Worksheets("dss_data").Range("K" & ind).value = Worksheets("dss_data").Range("K" & ind).value - 1
        Worksheets("dss_data").Range("L" & ind).value = Worksheets("dss_data").Range("L" & ind).value - 1
        Worksheets("dss_data").Range("M" & ind).value = Worksheets("dss_data").Range("M" & ind).value - 6
        Worksheets("dss_data").Range("N" & ind).value = Worksheets("dss_data").Range("N" & ind).value - 1
        'Ram instantiation dependency rows
        If Worksheets("dss_data").Range("F" & ind).value = 2 Then 'lsram
            Worksheets("dss_data").Range("P" & ind).value = Worksheets("dss_data").Range("P" & ind).value - 1
        End If
        If Worksheets("dss_data").Range("F" & ind).value = 3 Then 'usram
            Worksheets("dss_data").Range("Q" & ind).value = Worksheets("dss_data").Range("Q" & ind).value - 1
        End If
    Next ind
End Sub
Sub xcvr_decrement_intable(ByVal start As Integer, ByVal total_ip As Integer)
    Dim ind As Integer
    total_ip = total_ip + 253
    For ind = start To total_ip
        Worksheets("dss_data").Range("O" & ind).value = Worksheets("dss_data").Range("O" & ind).value - 1
    Next ind
End Sub
Sub memoryLSRAM_decrement_intable(ByVal start As Integer, ByVal total_ip As Integer)
    Dim ind As Integer
    total_ip = total_ip + 253
    For ind = start To total_ip
        Worksheets("dss_data").Range("P" & ind).value = Worksheets("dss_data").Range("P" & ind).value - 1
        'DDR dependency lsram row
        If Worksheets("dss_data").Range("F" & ind).value = 0 Then 'lsram
            Worksheets("dss_data").Range("K" & ind).value = Worksheets("dss_data").Range("K" & ind).value - 1
        End If
    Next ind
End Sub
Sub memoryUSRAM_decrement_intable(ByVal start As Integer, ByVal total_ip As Integer)
    Dim ind As Integer
    total_ip = total_ip + 253
    For ind = start To total_ip
        Worksheets("dss_data").Range("Q" & ind).value = Worksheets("dss_data").Range("Q" & ind).value - 1
        'DDR dependency lsram row
        If Worksheets("dss_data").Range("F" & ind).value = 0 Then 'lsram
            Worksheets("dss_data").Range("L" & ind).value = Worksheets("dss_data").Range("L" & ind).value - 1
        End If
    Next ind
End Sub
'This sub help's to delete module name in sected IP list and moving IP upwords to remove the empty row in list
Private Sub d_module_name(ByVal m_name As String)
Dim ind As Integer
Dim check As String
    ind = 254
    For i = 254 To 273
        check = Worksheets("dss_data").Range("D" & i).value
        If check = m_name Then
            For j = i To 273
                Worksheets("dss_data").Range("D" & j).value = Worksheets("dss_data").Range("D" & j + 1).value
                Worksheets("dss_data").Range("F" & j).value = Worksheets("dss_data").Range("F" & j + 1).value
            Next j
            Exit Sub
        End If
    Next i
    
End Sub

Private Sub d_clock(ByVal ind As Integer)
Dim stp As Integer
    stp = ind + 2
    For i = ind To stp
'        Worksheets("Clock").Range("B" & ind).MergeArea.Cells(1) = ""
        Worksheets("Clock").Range(clock_name_str_col & ind).MergeArea.Cells(1) = ""
'        Worksheets("Clock").Range("E" & ind).ClearContents
        Worksheets("Clock").Range(clock_freq_col & ind).ClearContents
'        Worksheets("Clock").Range("F" & ind).value = "Global"
        Worksheets("Clock").Range(clock_clktype_col & ind).value = "Global"
'        Worksheets("Clock").Range("G" & ind).ClearContents
        Worksheets("Clock").Range(clock_fanout_col & ind).ClearContents
'        Worksheets("Clock").Range("H" & ind).value = 1
        Worksheets("Clock").Range(clock_enrate_col & ind).value = 1
'        Worksheets("Clock").Range("B" & ind, "H" & ind).Interior.Color = RGB(255, 255, 255)
        Worksheets("Clock").Range(clock_name_str_col & ind, clock_enrate_col & ind).Interior.Color = RGB(255, 255, 255)
        ind = ind + 1
    Next i
End Sub
Private Sub d_logic(ByVal ind As Integer)
    'Worksheets("Logic").Range("B" & ind).MergeArea.Cells(1) = ""
    Worksheets("Logic").Range(logic_name_str_col & ind).MergeArea.Cells(1) = ""
    'Worksheets("Logic").Range("E" & ind).ClearContents
    Worksheets("Logic").Range(logic_freq_col & ind).ClearContents
    'Worksheets("Logic").Range("F" & ind).ClearContents
    Worksheets("Logic").Range(logic_dff_col & ind).ClearContents
    'Worksheets("Logic").Range("G" & ind).ClearContents
    Worksheets("Logic").Range(logic_lut_col & ind).ClearContents
    'Worksheets("Logic").Range("H" & ind).value = 3
    Worksheets("Logic").Range(logic_fanout_col & ind).value = 3
    'Worksheets("Logic").Range("I" & ind).value = 0.125
    Worksheets("Logic").Range(logic_tgrate_col & ind).value = 0.125
    'Worksheets("Logic").Range("B" & ind, "I" & ind).Interior.Color = RGB(255, 255, 255)
    Worksheets("Logic").Range(logic_name_str_col & ind, logic_tgrate_col & ind).Interior.Color = RGB(255, 255, 255)
End Sub
Private Sub d_lsram(ByVal ind As Integer)
'    Worksheets("LSRAM").Range("B" & ind).MergeArea.Cells(1) = ""
'    Worksheets("LSRAM").Range("E" & ind).ClearContents
'    Worksheets("LSRAM").Range("F" & ind).value = 20
'    Worksheets("LSRAM").Range("G" & ind).ClearContents
'    Worksheets("LSRAM").Range("H" & ind).value = "Simple Write"
'    Worksheets("LSRAM").Range("I" & ind).value = 0.125
'    Worksheets("LSRAM").Range("J" & ind).value = 0.125
'    Worksheets("LSRAM").Range("k" & ind).value = 0.125
'    Worksheets("LSRAM").Range("L" & ind).value = 20
'    Worksheets("LSRAM").Range("M" & ind).ClearContents
'    Worksheets("LSRAM").Range("N" & ind).value = "Simple Write"
'    Worksheets("LSRAM").Range("O" & ind).value = 0.125
'    Worksheets("LSRAM").Range("P" & ind).value = 0.125
'    Worksheets("LSRAM").Range("Q" & ind).value = 0.125
'    Worksheets("LSRAM").Range("R" & ind).value = "No"
'    Worksheets("LSRAM").Range("S" & ind).value = "No"
'    Worksheets("LSRAM").Range("T" & ind).value = 0.5
'    Worksheets("LSRAM").Range("B" & ind, "T" & ind).Interior.Color = RGB(255, 255, 255)

    Worksheets("LSRAM").Range(lsram_name_str_col & ind).MergeArea.Cells(1) = ""
    Worksheets("LSRAM").Range(lsram_nblock_col & ind).ClearContents
    Worksheets("LSRAM").Range(lsram_Awidth_col & ind).value = 20
    Worksheets("LSRAM").Range(lsram_Aclkfreq_col & ind).ClearContents
    Worksheets("LSRAM").Range(lsram_Amode_col & ind).value = "Simple Write"
    Worksheets("LSRAM").Range(lsram_Awriterate_col & ind).value = 0.125
    Worksheets("LSRAM").Range(lsram_Areadrate_col & ind).value = 0.125
    Worksheets("LSRAM").Range(lsram_Aenrate_col & ind).value = 0.125
    Worksheets("LSRAM").Range(lsram_Bwidth_col & ind).value = 20
    Worksheets("LSRAM").Range(lsram_Bclkfreq_col & ind).ClearContents
    Worksheets("LSRAM").Range(lsram_Bmode_col & ind).value = "Simple Write"
    Worksheets("LSRAM").Range(lsram_Bwriterate_col & ind).value = 0.125
    Worksheets("LSRAM").Range(lsram_Breadrate_col & ind).value = 0.125
    Worksheets("LSRAM").Range(lsram_Benrate_col & ind).value = 0.125
    Worksheets("LSRAM").Range(lsram_pipeline_col & ind).value = "No"
    Worksheets("LSRAM").Range(lsram_ecc_col & ind).value = "No"
    Worksheets("LSRAM").Range(lsram_tgrate_col & ind).value = 0.5
    Worksheets("LSRAM").Range(lsram_name_str_col & ind, lsram_tgrate_col & ind).Interior.Color = RGB(255, 255, 255)

End Sub
Private Sub d_usram(ByVal ind As Integer)
'    Worksheets("uSRAM").Range("B" & ind).MergeArea.Cells(1) = ""
'    Worksheets("uSRAM").Range("E" & ind).ClearContents
'    Worksheets("uSRAM").Range("F" & ind).value = 12
'    Worksheets("uSRAM").Range("G" & ind).value = "No"
'    Worksheets("uSRAM").Range("H" & ind).ClearContents
'    Worksheets("uSRAM").Range("I" & ind).value = 0.125
'    Worksheets("uSRAM").Range("J" & ind).ClearContents
'    Worksheets("uSRAM").Range("K" & ind).value = 0.125
'    Worksheets("uSRAM").Range("L" & ind).value = 0.5
'    Worksheets("uSRAM").Range("B" & ind, "L" & ind).Interior.Color = RGB(255, 255, 255)

    Worksheets("uSRAM").Range(usram_name_str_col & ind).MergeArea.Cells(1) = ""
    Worksheets("uSRAM").Range(usram_nblock_col & ind).ClearContents
    Worksheets("uSRAM").Range(usram_width_col & ind).value = 12
    Worksheets("uSRAM").Range(usram_reg_col & ind).value = "No"
    Worksheets("uSRAM").Range(usram_writeclkfreq_col & ind).ClearContents
    Worksheets("uSRAM").Range(usram_writeenrate_col & ind).value = 0.125
    Worksheets("uSRAM").Range(usram_readclkfreq_col & ind).ClearContents
    Worksheets("uSRAM").Range(usram_readenrate_col & ind).value = 0.125
    Worksheets("uSRAM").Range(usram_tgrate_col & ind).value = 0.5
    Worksheets("uSRAM").Range(usram_name_str_col & ind, usram_tgrate_col & ind).Interior.Color = RGB(255, 255, 255)

End Sub
Private Sub d_io(ByVal ind As Integer, ByVal code As Integer)
Dim stp As Integer
    If code = 100 Then 'for qdr
        stp = ind + 3
    Else
        stp = ind + 5
    End If
    
    For i = ind To stp
'        Worksheets("IO").Range("B" & ind).MergeArea.Cells(1) = ""
'        Worksheets("IO").Range("E" & ind).value = "HSIO"
'        Worksheets("IO").Range("F" & ind).value = "LVCMOS18"
'        Worksheets("IO").Range("H" & ind).ClearContents
'        Worksheets("IO").Range("I" & ind).ClearContents
'        Worksheets("IO").Range("J" & ind).ClearContents
'        Worksheets("IO").Range("K" & ind).value = "Off"
'        Worksheets("IO").Range("L" & ind).value = "Off"
'        Worksheets("IO").Range("M" & ind).value = "NO_ODT"
'        Worksheets("IO").Range("N" & ind).value = "2 mA"
'        Worksheets("IO").Range("O" & ind).value = "Off"
'        Worksheets("IO").Range("P" & ind).value = 5
'        Worksheets("IO").Range("Q" & ind).value = "Unused"
'        Worksheets("IO").Range("R" & ind).ClearContents
'        Worksheets("IO").Range("S" & ind).value = "SDR"
'        Worksheets("IO").Range("T" & ind).value = 0.125
'        Worksheets("IO").Range("U" & ind).value = 0.5
'        Worksheets("IO").Range("V" & ind).value = 1
'        Worksheets("IO").Range("W" & ind).value = ""
'        Worksheets("IO").Range("X" & ind).value = ""
'        Worksheets("IO").Range("CB" & ind).value = ""
'        Worksheets("IO").Range("B" & ind, "CB" & ind).Interior.Color = RGB(255, 255, 255)

        Worksheets("IO").Range(io_name_str_col & ind).MergeArea.Cells(1) = ""
        Worksheets("IO").Range(io_banktype_col & ind).value = "HSIO"
        Worksheets("IO").Range(io_standard_col & ind).value = "LVCMOS18"
        Worksheets("IO").Range(io_inputpins_col & ind).ClearContents
        Worksheets("IO").Range(io_outputpins_col & ind).ClearContents
        Worksheets("IO").Range(io_bidirpins_col & ind).ClearContents
        Worksheets("IO").Range(io_vcm_col & ind).value = "Off"
        Worksheets("IO").Range(io_schmitt_col & ind).value = "Off"
        Worksheets("IO").Range(io_odt_col & ind).value = "NO_ODT"
        Worksheets("IO").Range(io_drive_col & ind).value = "2 mA"
        Worksheets("IO").Range(io_slew_col & ind).value = "Off"
        Worksheets("IO").Range(io_load_col & ind).value = 5
        Worksheets("IO").Range(io_iog_col & ind).value = "Unused"
        Worksheets("IO").Range(io_clkfreq_col & ind).ClearContents
        Worksheets("IO").Range(io_datarate_col & ind).value = "SDR"
        Worksheets("IO").Range(io_tgrate_col & ind).value = 0.125
        Worksheets("IO").Range(io_enrate_col & ind).value = 0.5
        Worksheets("IO").Range(io_odtenable_col & ind).value = 1
        Worksheets("IO").Range("W" & ind).value = ""
        Worksheets("IO").Range("X" & ind).value = ""
        Worksheets("IO").Range("CB" & ind).value = ""
        Worksheets("IO").Range(io_name_str_col & ind, "X" & ind).Interior.Color = RGB(255, 255, 255)

        ind = ind + 1
    Next i
End Sub
Private Sub d_pll(ByVal ind As Integer)
'    Worksheets("PLL & DLL").Range("B" & ind).MergeArea.Cells(1) = ""
'    Worksheets("PLL & DLL").Range("E" & ind).ClearContents
'    Worksheets("PLL & DLL").Range("F" & ind).ClearContents
'    Worksheets("PLL & DLL").Range("G" & ind).ClearContents
'    Worksheets("PLL & DLL").Range("H" & ind).ClearContents
'    Worksheets("PLL & DLL").Range("I" & ind).ClearContents
'    Worksheets("PLL & DLL").Range("J" & ind) = "Low Power"
'    Worksheets("PLL & DLL").Range("B" & ind, "J" & ind).Interior.Color = RGB(255, 255, 255)

    Worksheets("PLL & DLL").Range(pll_name_str_col & ind).MergeArea.Cells(1) = ""
    Worksheets("PLL & DLL").Range(pll_refclk_col & ind).ClearContents
    Worksheets("PLL & DLL").Range(pll_out0freq_col & ind).ClearContents
    Worksheets("PLL & DLL").Range(pll_out1freq_col & ind).ClearContents
    Worksheets("PLL & DLL").Range(pll_out2freq_col & ind).ClearContents
    Worksheets("PLL & DLL").Range(pll_out3freq_col & ind).ClearContents
    Worksheets("PLL & DLL").Range(pll_mode_col & ind) = "Min VCO for Low Power"
    Worksheets("PLL & DLL").Range(pll_name_str_col & ind, pll_mode_col & ind).Interior.Color = RGB(255, 255, 255)

End Sub
Private Sub d_xcvr(ByVal ind As Integer)
'    Worksheets("Transceiver").Range("B" & ind).MergeArea.Cells(1) = ""
'    Worksheets("Transceiver").Range("E" & ind).value = Worksheets("Transceiver").Range("BM17").value
'    Worksheets("Transceiver").Range("F" & ind).ClearContents
'    Worksheets("Transceiver").Range("G" & ind).value = Worksheets("Transceiver").Range("BO17").value
'    Worksheets("Transceiver").Range("H" & ind).ClearContents
'    Worksheets("Transceiver").Range("I" & ind).value = Worksheets("Transceiver").Range("BQ17").value
'    Worksheets("Transceiver").Range("J" & ind).value = Worksheets("Transceiver").Range("BR17").value
'    Worksheets("Transceiver").Range("K" & ind).value = Worksheets("Transceiver").Range("BS17").value
'    Worksheets("Transceiver").Range("L" & ind).value = Worksheets("Transceiver").Range("BT17").value
'    Worksheets("Transceiver").Range("M" & ind).value = Worksheets("Transceiver").Range("BU17").value
'    Worksheets("Transceiver").Range("N" & ind).value = Worksheets("Transceiver").Range("BV17").value
'    Worksheets("Transceiver").Range("O" & ind).value = Worksheets("Transceiver").Range("BW17").value
'    Worksheets("Transceiver").Range("P" & ind).value = Worksheets("Transceiver").Range("BX17").value
'    Worksheets("Transceiver").Range("Q" & ind).value = Worksheets("Transceiver").Range("BM132").value
'    Worksheets("Transceiver").Range("B" & ind, "Q" & ind).Interior.Color = RGB(255, 255, 255)

    Worksheets("Transceiver").Range(xcvr_name_str_col & ind).MergeArea.Cells(1) = ""
    Worksheets("Transceiver").Range(xcvr_protocol_col & ind).value = Worksheets("Transceiver").Range("BM17").value
    Worksheets("Transceiver").Range(xcvr_nlanes_col & ind).ClearContents
    Worksheets("Transceiver").Range(xcvr_opmode_col & ind).value = Worksheets("Transceiver").Range("BO17").value
    Worksheets("Transceiver").Range(xcv_txdatarate_col & ind).ClearContents
    Worksheets("Transceiver").Range(xcvr_rxdatarate_col & ind).ClearContents
    Worksheets("Transceiver").Range(xcvr_pll_col & ind).value = Worksheets("Transceiver").Range("BR17").value
    Worksheets("Transceiver").Range(xcvr_dfe_col & ind).value = Worksheets("Transceiver").Range("BS17").value
    Worksheets("Transceiver").Range(xcvr_eyemonitor_col & ind).value = Worksheets("Transceiver").Range("BT17").value
    Worksheets("Transceiver").Range(xcvr_ctle_col & ind).value = Worksheets("Transceiver").Range("BU17").value
    Worksheets("Transceiver").Range(xcvr_txamp_col & ind).value = Worksheets("Transceiver").Range("BV17").value
    Worksheets("Transceiver").Range(xcvr_pcsmode_col & ind).value = Worksheets("Transceiver").Range("BW17").value
    Worksheets("Transceiver").Range(xcvr_pcswidth_col & ind).value = Worksheets("Transceiver").Range("BX17").value
    Worksheets("Transceiver").Range(xcvr_pcie_col & ind).value = Worksheets("Transceiver").Range("BM132").value
    Worksheets("Transceiver").Range(xcvr_name_str_col & ind, xcvr_pcie_col & ind).Interior.Color = RGB(255, 255, 255)

End Sub
Private Sub shift_clock(ByVal col As Integer)
    For i = col To 508
        s = i + 2
'     Worksheets("Clock").Range("B" & i).value = Worksheets("Clock").Range("B" & s + 1).value
'     Worksheets("Clock").Range("E" & i).value = Worksheets("Clock").Range("E" & s + 1).value
'     Worksheets("Clock").Range("F" & i).value = Worksheets("Clock").Range("F" & s + 1).value
'     Worksheets("Clock").Range("G" & i).value = Worksheets("Clock").Range("G" & s + 1).value
'     Worksheets("Clock").Range("H" & i).value = Worksheets("Clock").Range("H" & s + 1).value
'
'     Worksheets("Clock").Range("B" & i).Interior.Color = Worksheets("Clock").Range("B" & s + 1).Interior.Color
'     Worksheets("Clock").Range("E" & i).Interior.Color = Worksheets("Clock").Range("E" & s + 1).Interior.Color
'     Worksheets("Clock").Range("F" & i).Interior.Color = Worksheets("Clock").Range("F" & s + 1).Interior.Color
'     Worksheets("Clock").Range("G" & i).Interior.Color = Worksheets("Clock").Range("G" & s + 1).Interior.Color
'     Worksheets("Clock").Range("H" & i).Interior.Color = Worksheets("Clock").Range("H" & s + 1).Interior.Color

     Worksheets("Clock").Range(clock_name_str_col & i).value = Worksheets("Clock").Range(clock_name_str_col & s + 1).value
     Worksheets("Clock").Range(clock_freq_col & i).value = Worksheets("Clock").Range(clock_freq_col & s + 1).value
     Worksheets("Clock").Range(clock_clktype_col & i).value = Worksheets("Clock").Range(clock_clktype_col & s + 1).value
     Worksheets("Clock").Range(clock_fanout_col & i).value = Worksheets("Clock").Range(clock_fanout_col & s + 1).value
     Worksheets("Clock").Range(clock_enrate_col & i).value = Worksheets("Clock").Range(clock_enrate_col & s + 1).value
     
     Worksheets("Clock").Range(clock_name_str_col & i).Interior.Color = Worksheets("Clock").Range(clock_name_str_col & s + 1).Interior.Color
     Worksheets("Clock").Range(clock_freq_col & i).Interior.Color = Worksheets("Clock").Range(clock_freq_col & s + 1).Interior.Color
     Worksheets("Clock").Range(clock_clktype_col & i).Interior.Color = Worksheets("Clock").Range(clock_clktype_col & s + 1).Interior.Color
     Worksheets("Clock").Range(clock_fanout_col & i).Interior.Color = Worksheets("Clock").Range(clock_fanout_col & s + 1).Interior.Color
     Worksheets("Clock").Range(clock_enrate_col & i).Interior.Color = Worksheets("Clock").Range(clock_enrate_col & s + 1).Interior.Color
     
    Next i
     d_clock 509 'setting last row to default values
End Sub
Private Sub shift_logic(ByVal col As Integer)
    For i = col To 507
    
'     Worksheets("Logic").Range("B" & i).value = Worksheets("Logic").Range("B" & i + 1).value
'     Worksheets("Logic").Range("E" & i).value = Worksheets("Logic").Range("E" & i + 1).value
'     Worksheets("Logic").Range("F" & i).value = Worksheets("Logic").Range("F" & i + 1).value
'     Worksheets("Logic").Range("G" & i).value = Worksheets("Logic").Range("G" & i + 1).value
'     Worksheets("Logic").Range("H" & i).value = Worksheets("Logic").Range("H" & i + 1).value
'     Worksheets("Logic").Range("I" & i).value = Worksheets("Logic").Range("I" & i + 1).value
'
'     Worksheets("Logic").Range("B" & i).Interior.Color = Worksheets("Logic").Range("B" & i + 1).Interior.Color
'     Worksheets("Logic").Range("E" & i).Interior.Color = Worksheets("Logic").Range("E" & i + 1).Interior.Color
'     Worksheets("Logic").Range("F" & i).Interior.Color = Worksheets("Logic").Range("F" & i + 1).Interior.Color
'     Worksheets("Logic").Range("G" & i).Interior.Color = Worksheets("Logic").Range("G" & i + 1).Interior.Color
'     Worksheets("Logic").Range("H" & i).Interior.Color = Worksheets("Logic").Range("H" & i + 1).Interior.Color
'     Worksheets("Logic").Range("I" & i).Interior.Color = Worksheets("Logic").Range("I" & i + 1).Interior.Color

     Worksheets("Logic").Range(logic_name_str_col & i).value = Worksheets("Logic").Range(logic_name_str_col & i + 1).value
     Worksheets("Logic").Range(logic_freq_col & i).value = Worksheets("Logic").Range(logic_freq_col & i + 1).value
     Worksheets("Logic").Range(logic_dff_col & i).value = Worksheets("Logic").Range(logic_dff_col & i + 1).value
     Worksheets("Logic").Range(logic_lut_col & i).value = Worksheets("Logic").Range(logic_lut_col & i + 1).value
     Worksheets("Logic").Range(logic_fanout_col & i).value = Worksheets("Logic").Range(logic_fanout_col & i + 1).value
     Worksheets("Logic").Range(logic_tgrate_col & i).value = Worksheets("Logic").Range(logic_tgrate_col & i + 1).value
     
     Worksheets("Logic").Range(logic_name_str_col & i).Interior.Color = Worksheets("Logic").Range(logic_name_str_col & i + 1).Interior.Color
     Worksheets("Logic").Range(logic_freq_col & i).Interior.Color = Worksheets("Logic").Range(logic_freq_col & i + 1).Interior.Color
     Worksheets("Logic").Range(logic_dff_col & i).Interior.Color = Worksheets("Logic").Range(logic_dff_col & i + 1).Interior.Color
     Worksheets("Logic").Range(logic_lut_col & i).Interior.Color = Worksheets("Logic").Range(logic_lut_col & i + 1).Interior.Color
     Worksheets("Logic").Range(logic_fanout_col & i).Interior.Color = Worksheets("Logic").Range(logic_fanout_col & i + 1).Interior.Color
     Worksheets("Logic").Range(logic_tgrate_col & i).Interior.Color = Worksheets("Logic").Range(logic_tgrate_col & i + 1).Interior.Color

    Next i
     d_logic 508
End Sub
Private Sub shift_lsram(ByVal col As Integer)
    For i = col To 254
    
'     Worksheets("LSRAM").Range("B" & i).value = Worksheets("LSRAM").Range("B" & i + 1).value
'     Worksheets("LSRAM").Range("E" & i).value = Worksheets("LSRAM").Range("E" & i + 1).value
'     Worksheets("LSRAM").Range("F" & i).value = Worksheets("LSRAM").Range("F" & i + 1).value
'     Worksheets("LSRAM").Range("G" & i).value = Worksheets("LSRAM").Range("G" & i + 1).value
'     Worksheets("LSRAM").Range("H" & i).value = Worksheets("LSRAM").Range("H" & i + 1).value
'     Worksheets("LSRAM").Range("I" & i).value = Worksheets("LSRAM").Range("I" & i + 1).value
'     Worksheets("LSRAM").Range("J" & i).value = Worksheets("LSRAM").Range("J" & i + 1).value
'     Worksheets("LSRAM").Range("K" & i).value = Worksheets("LSRAM").Range("K" & i + 1).value
'     Worksheets("LSRAM").Range("L" & i).value = Worksheets("LSRAM").Range("L" & i + 1).value
'     Worksheets("LSRAM").Range("M" & i).value = Worksheets("LSRAM").Range("M" & i + 1).value
'     Worksheets("LSRAM").Range("N" & i).value = Worksheets("LSRAM").Range("N" & i + 1).value
'     Worksheets("LSRAM").Range("O" & i).value = Worksheets("LSRAM").Range("O" & i + 1).value
'     Worksheets("LSRAM").Range("P" & i).value = Worksheets("LSRAM").Range("P" & i + 1).value
'     Worksheets("LSRAM").Range("Q" & i).value = Worksheets("LSRAM").Range("Q" & i + 1).value
'     Worksheets("LSRAM").Range("R" & i).value = Worksheets("LSRAM").Range("R" & i + 1).value
'     Worksheets("LSRAM").Range("S" & i).value = Worksheets("LSRAM").Range("S" & i + 1).value
'     Worksheets("LSRAM").Range("T" & i).value = Worksheets("LSRAM").Range("T" & i + 1).value
'
'
'     Worksheets("LSRAM").Range("B" & i).Interior.Color = Worksheets("LSRAM").Range("B" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("E" & i).Interior.Color = Worksheets("LSRAM").Range("E" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("F" & i).Interior.Color = Worksheets("LSRAM").Range("F" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("G" & i).Interior.Color = Worksheets("LSRAM").Range("G" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("H" & i).Interior.Color = Worksheets("LSRAM").Range("H" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("I" & i).Interior.Color = Worksheets("LSRAM").Range("I" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("J" & i).Interior.Color = Worksheets("LSRAM").Range("J" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("K" & i).Interior.Color = Worksheets("LSRAM").Range("K" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("L" & i).Interior.Color = Worksheets("LSRAM").Range("L" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("M" & i).Interior.Color = Worksheets("LSRAM").Range("M" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("N" & i).Interior.Color = Worksheets("LSRAM").Range("N" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("O" & i).Interior.Color = Worksheets("LSRAM").Range("O" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("P" & i).Interior.Color = Worksheets("LSRAM").Range("P" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("Q" & i).Interior.Color = Worksheets("LSRAM").Range("Q" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("R" & i).Interior.Color = Worksheets("LSRAM").Range("R" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("S" & i).Interior.Color = Worksheets("LSRAM").Range("S" & i + 1).Interior.Color
'     Worksheets("LSRAM").Range("T" & i).Interior.Color = Worksheets("LSRAM").Range("T" & i + 1).Interior.Color

     Worksheets("LSRAM").Range(lsram_name_str_col & i).value = Worksheets("LSRAM").Range(lsram_name_str_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_nblock_col & i).value = Worksheets("LSRAM").Range(lsram_nblock_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_Awidth_col & i).value = Worksheets("LSRAM").Range(lsram_Awidth_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_Aclkfreq_col & i).value = Worksheets("LSRAM").Range(lsram_Aclkfreq_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_Amode_col & i).value = Worksheets("LSRAM").Range(lsram_Amode_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_Awriterate_col & i).value = Worksheets("LSRAM").Range(lsram_Awriterate_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_Areadrate_col & i).value = Worksheets("LSRAM").Range(lsram_Areadrate_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_Aenrate_col & i).value = Worksheets("LSRAM").Range(lsram_Aenrate_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_Bwidth_col & i).value = Worksheets("LSRAM").Range(lsram_Bwidth_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_Bclkfreq_col & i).value = Worksheets("LSRAM").Range(lsram_Bclkfreq_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_Bmode_col & i).value = Worksheets("LSRAM").Range(lsram_Bmode_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_Bwriterate_col & i).value = Worksheets("LSRAM").Range(lsram_Bwriterate_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_Breadrate_col & i).value = Worksheets("LSRAM").Range(lsram_Breadrate_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_Benrate_col & i).value = Worksheets("LSRAM").Range(lsram_Benrate_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_pipeline_col & i).value = Worksheets("LSRAM").Range(lsram_pipeline_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_ecc_col & i).value = Worksheets("LSRAM").Range(lsram_ecc_col & i + 1).value
     Worksheets("LSRAM").Range(lsram_tgrate_col & i).value = Worksheets("LSRAM").Range(lsram_tgrate_col & i + 1).value
     
     
     Worksheets("LSRAM").Range(lsram_name_str_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_name_str_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_nblock_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_nblock_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_Awidth_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_Awidth_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_Aclkfreq_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_Aclkfreq_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_Amode_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_Amode_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_Awriterate_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_Awriterate_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_Areadrate_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_Areadrate_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_Aenrate_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_Aenrate_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_Bwidth_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_Bwidth_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_Bclkfreq_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_Bclkfreq_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_Bmode_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_Bmode_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_Bwriterate_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_Bwriterate_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_Breadrate_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_Breadrate_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_Benrate_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_Benrate_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_pipeline_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_pipeline_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_ecc_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_ecc_col & i + 1).Interior.Color
     Worksheets("LSRAM").Range(lsram_tgrate_col & i).Interior.Color = Worksheets("LSRAM").Range(lsram_tgrate_col & i + 1).Interior.Color

    Next i
     d_lsram 250
End Sub
Private Sub shift_usram(ByVal col As Integer)
    For i = col To 254
    
'     Worksheets("uSRAM").Range("B" & i).value = Worksheets("uSRAM").Range("B" & i + 1).value
'     Worksheets("uSRAM").Range("E" & i).value = Worksheets("uSRAM").Range("E" & i + 1).value
'     Worksheets("uSRAM").Range("F" & i).value = Worksheets("uSRAM").Range("F" & i + 1).value
'     Worksheets("uSRAM").Range("G" & i).value = Worksheets("uSRAM").Range("G" & i + 1).value
'     Worksheets("uSRAM").Range("H" & i).value = Worksheets("uSRAM").Range("H" & i + 1).value
'     Worksheets("uSRAM").Range("I" & i).value = Worksheets("uSRAM").Range("I" & i + 1).value
'     Worksheets("uSRAM").Range("J" & i).value = Worksheets("uSRAM").Range("J" & i + 1).value
'     Worksheets("uSRAM").Range("K" & i).value = Worksheets("uSRAM").Range("K" & i + 1).value
'     Worksheets("uSRAM").Range("L" & i).value = Worksheets("uSRAM").Range("L" & i + 1).value
'
'     Worksheets("uSRAM").Range("B" & i).Interior.Color = Worksheets("uSRAM").Range("B" & i + 1).Interior.Color
'     Worksheets("uSRAM").Range("E" & i).Interior.Color = Worksheets("uSRAM").Range("E" & i + 1).Interior.Color
'     Worksheets("uSRAM").Range("F" & i).Interior.Color = Worksheets("uSRAM").Range("F" & i + 1).Interior.Color
'     Worksheets("uSRAM").Range("G" & i).Interior.Color = Worksheets("uSRAM").Range("G" & i + 1).Interior.Color
'     Worksheets("uSRAM").Range("H" & i).Interior.Color = Worksheets("uSRAM").Range("H" & i + 1).Interior.Color
'     Worksheets("uSRAM").Range("I" & i).Interior.Color = Worksheets("uSRAM").Range("I" & i + 1).Interior.Color
'     Worksheets("uSRAM").Range("J" & i).Interior.Color = Worksheets("uSRAM").Range("J" & i + 1).Interior.Color
'     Worksheets("uSRAM").Range("K" & i).Interior.Color = Worksheets("uSRAM").Range("K" & i + 1).Interior.Color
'     Worksheets("uSRAM").Range("L" & i).Interior.Color = Worksheets("uSRAM").Range("L" & i + 1).Interior.Color

     Worksheets("uSRAM").Range(usram_name_str_col & i).value = Worksheets("uSRAM").Range(usram_name_str_col & i + 1).value
     Worksheets("uSRAM").Range(usram_nblock_col & i).value = Worksheets("uSRAM").Range(usram_nblock_col & i + 1).value
     Worksheets("uSRAM").Range(usram_width_col & i).value = Worksheets("uSRAM").Range(usram_width_col & i + 1).value
     Worksheets("uSRAM").Range(usram_reg_col & i).value = Worksheets("uSRAM").Range(usram_reg_col & i + 1).value
     Worksheets("uSRAM").Range(usram_writeclkfreq_col & i).value = Worksheets("uSRAM").Range(usram_writeclkfreq_col & i + 1).value
     Worksheets("uSRAM").Range(usram_writeenrate_col & i).value = Worksheets("uSRAM").Range(usram_writeenrate_col & i + 1).value
     Worksheets("uSRAM").Range(usram_readclkfreq_col & i).value = Worksheets("uSRAM").Range(usram_readclkfreq_col & i + 1).value
     Worksheets("uSRAM").Range(usram_readenrate_col & i).value = Worksheets("uSRAM").Range(usram_readenrate_col & i + 1).value
     Worksheets("uSRAM").Range(usram_tgrate_col & i).value = Worksheets("uSRAM").Range(usram_tgrate_col & i + 1).value
     
     Worksheets("uSRAM").Range(usram_name_str_col & i).Interior.Color = Worksheets("uSRAM").Range(usram_name_str_col & i + 1).Interior.Color
     Worksheets("uSRAM").Range(usram_nblock_col & i).Interior.Color = Worksheets("uSRAM").Range(usram_nblock_col & i + 1).Interior.Color
     Worksheets("uSRAM").Range(usram_width_col & i).Interior.Color = Worksheets("uSRAM").Range(usram_width_col & i + 1).Interior.Color
     Worksheets("uSRAM").Range(usram_reg_col & i).Interior.Color = Worksheets("uSRAM").Range(usram_reg_col & i + 1).Interior.Color
     Worksheets("uSRAM").Range(usram_writeclkfreq_col & i).Interior.Color = Worksheets("uSRAM").Range(usram_writeclkfreq_col & i + 1).Interior.Color
     Worksheets("uSRAM").Range(usram_writeenrate_col & i).Interior.Color = Worksheets("uSRAM").Range(usram_writeenrate_col & i + 1).Interior.Color
     Worksheets("uSRAM").Range(usram_readclkfreq_col & i).Interior.Color = Worksheets("uSRAM").Range(usram_readclkfreq_col & i + 1).Interior.Color
     Worksheets("uSRAM").Range(usram_readenrate_col & i).Interior.Color = Worksheets("uSRAM").Range(usram_readenrate_col & i + 1).Interior.Color
     Worksheets("uSRAM").Range(usram_tgrate_col & i).Interior.Color = Worksheets("uSRAM").Range(usram_tgrate_col & i + 1).Interior.Color

    Next i
     d_usram 250
End Sub
Private Sub shift_io(ByVal col As Integer, ByVal code As Integer)
Dim s As Integer
    If code = 100 Then
        sss = 3
    Else
        sss = 5
    End If
    
    For i = col To 715
        
        s = i + sss
'        If i = 586 Then
'            s = 590
'        End If
'        Worksheets("IO").Range("B" & i).value = Worksheets("IO").Range("B" & s + 1).value
'        Worksheets("IO").Range("E" & i).value = Worksheets("IO").Range("E" & s + 1).value
'        Worksheets("IO").Range("F" & i).value = Worksheets("IO").Range("F" & s + 1).value
'        Worksheets("IO").Range("G" & i).value = Worksheets("IO").Range("G" & s + 1).value
'        Worksheets("IO").Range("H" & i).value = Worksheets("IO").Range("H" & s + 1).value
'        Worksheets("IO").Range("I" & i).value = Worksheets("IO").Range("I" & s + 1).value
'        Worksheets("IO").Range("J" & i).value = Worksheets("IO").Range("J" & s + 1).value
'        Worksheets("IO").Range("K" & i).value = Worksheets("IO").Range("K" & s + 1).value
'        Worksheets("IO").Range("L" & i).value = Worksheets("IO").Range("L" & s + 1).value
'        Worksheets("IO").Range("M" & i).value = Worksheets("IO").Range("M" & s + 1).value
'        Worksheets("IO").Range("N" & i).value = Worksheets("IO").Range("N" & s + 1).value
'        Worksheets("IO").Range("O" & i).value = Worksheets("IO").Range("O" & s + 1).value
'        Worksheets("IO").Range("P" & i).value = Worksheets("IO").Range("P" & s + 1).value
'        Worksheets("IO").Range("Q" & i).value = Worksheets("IO").Range("Q" & s + 1).value
'        Worksheets("IO").Range("R" & i).value = Worksheets("IO").Range("R" & s + 1).value
'        Worksheets("IO").Range("S" & i).value = Worksheets("IO").Range("S" & s + 1).value
'        Worksheets("IO").Range("T" & i).value = Worksheets("IO").Range("T" & s + 1).value
'        Worksheets("IO").Range("U" & i).value = Worksheets("IO").Range("U" & s + 1).value
'        Worksheets("IO").Range("V" & i).value = Worksheets("IO").Range("V" & s + 1).value
'        Worksheets("IO").Range("W" & i).value = Worksheets("IO").Range("W" & s + 1).value
'        Worksheets("IO").Range("X" & i).value = Worksheets("IO").Range("X" & s + 1).value
'        Worksheets("IO").Range("CB" & i).value = Worksheets("IO").Range("CB" & s + 1).value
'
'        Worksheets("IO").Range("B" & i).Interior.Color = Worksheets("IO").Range("B" & s + 1).Interior.Color
'        Worksheets("IO").Range("E" & i).Interior.Color = Worksheets("IO").Range("E" & s + 1).Interior.Color
'        Worksheets("IO").Range("F" & i).Interior.Color = Worksheets("IO").Range("F" & s + 1).Interior.Color
'        Worksheets("IO").Range("G" & i).Interior.Color = Worksheets("IO").Range("G" & s + 1).Interior.Color
'        Worksheets("IO").Range("H" & i).Interior.Color = Worksheets("IO").Range("H" & s + 1).Interior.Color
'        Worksheets("IO").Range("I" & i).Interior.Color = Worksheets("IO").Range("I" & s + 1).Interior.Color
'        Worksheets("IO").Range("J" & i).Interior.Color = Worksheets("IO").Range("J" & s + 1).Interior.Color
'        Worksheets("IO").Range("K" & i).Interior.Color = Worksheets("IO").Range("K" & s + 1).Interior.Color
'        Worksheets("IO").Range("L" & i).Interior.Color = Worksheets("IO").Range("L" & s + 1).Interior.Color
'        Worksheets("IO").Range("M" & i).Interior.Color = Worksheets("IO").Range("M" & s + 1).Interior.Color
'        Worksheets("IO").Range("N" & i).Interior.Color = Worksheets("IO").Range("N" & s + 1).Interior.Color
'        Worksheets("IO").Range("O" & i).Interior.Color = Worksheets("IO").Range("O" & s + 1).Interior.Color
'        Worksheets("IO").Range("P" & i).Interior.Color = Worksheets("IO").Range("P" & s + 1).Interior.Color
'        Worksheets("IO").Range("Q" & i).Interior.Color = Worksheets("IO").Range("Q" & s + 1).Interior.Color
'        Worksheets("IO").Range("R" & i).Interior.Color = Worksheets("IO").Range("R" & s + 1).Interior.Color
'        Worksheets("IO").Range("S" & i).Interior.Color = Worksheets("IO").Range("S" & s + 1).Interior.Color
'        Worksheets("IO").Range("T" & i).Interior.Color = Worksheets("IO").Range("T" & s + 1).Interior.Color
'        Worksheets("IO").Range("U" & i).Interior.Color = Worksheets("IO").Range("U" & s + 1).Interior.Color
'        Worksheets("IO").Range("V" & i).Interior.Color = Worksheets("IO").Range("V" & s + 1).Interior.Color
'        Worksheets("IO").Range("W" & i).Interior.Color = Worksheets("IO").Range("W" & s + 1).Interior.Color
'        Worksheets("IO").Range("X" & i).Interior.Color = Worksheets("IO").Range("X" & s + 1).Interior.Color
'        Worksheets("IO").Range("CB" & i).Interior.Color = Worksheets("IO").Range("CB" & s + 1).Interior.Color


        Worksheets("IO").Range(io_name_str_col & i).value = Worksheets("IO").Range(io_name_str_col & s + 1).value
        Worksheets("IO").Range(io_banktype_col & i).value = Worksheets("IO").Range(io_banktype_col & s + 1).value
        Worksheets("IO").Range(io_standard_col & i).value = Worksheets("IO").Range(io_standard_col & s + 1).value
        Worksheets("IO").Range(io_vddi_col & i).value = Worksheets("IO").Range(io_vddi_col & s + 1).value
        Worksheets("IO").Range(io_inputpins_col & i).value = Worksheets("IO").Range(io_inputpins_col & s + 1).value
        Worksheets("IO").Range(io_outputpins_col & i).value = Worksheets("IO").Range(io_outputpins_col & s + 1).value
        Worksheets("IO").Range(io_bidirpins_col & i).value = Worksheets("IO").Range(io_bidirpins_col & s + 1).value
        Worksheets("IO").Range(io_vcm_col & i).value = Worksheets("IO").Range(io_vcm_col & s + 1).value
        Worksheets("IO").Range(io_schmitt_col & i).value = Worksheets("IO").Range(io_schmitt_col & s + 1).value
        Worksheets("IO").Range(io_odt_col & i).value = Worksheets("IO").Range(io_odt_col & s + 1).value
        Worksheets("IO").Range(io_drive_col & i).value = Worksheets("IO").Range(io_drive_col & s + 1).value
        Worksheets("IO").Range(io_slew_col & i).value = Worksheets("IO").Range(io_slew_col & s + 1).value
        Worksheets("IO").Range(io_load_col & i).value = Worksheets("IO").Range(io_load_col & s + 1).value
        Worksheets("IO").Range(io_iog_col & i).value = Worksheets("IO").Range(io_iog_col & s + 1).value
        Worksheets("IO").Range(io_clkfreq_col & i).value = Worksheets("IO").Range(io_clkfreq_col & s + 1).value
        Worksheets("IO").Range(io_datarate_col & i).value = Worksheets("IO").Range(io_datarate_col & s + 1).value
        Worksheets("IO").Range(io_tgrate_col & i).value = Worksheets("IO").Range(io_tgrate_col & s + 1).value
        Worksheets("IO").Range(io_enrate_col & i).value = Worksheets("IO").Range(io_enrate_col & s + 1).value
        Worksheets("IO").Range(io_odtenable_col & i).value = Worksheets("IO").Range(io_odtenable_col & s + 1).value
        Worksheets("IO").Range("W" & i).value = Worksheets("IO").Range("W" & s + 1).value
        Worksheets("IO").Range("X" & i).value = Worksheets("IO").Range("X" & s + 1).value
        Worksheets("IO").Range("CB" & i).value = Worksheets("IO").Range("CB" & s + 1).value
        
        Worksheets("IO").Range(io_name_str_col & i).Interior.Color = Worksheets("IO").Range(io_name_str_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_banktype_col & i).Interior.Color = Worksheets("IO").Range(io_banktype_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_standard_col & i).Interior.Color = Worksheets("IO").Range(io_standard_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_vddi_col & i).Interior.Color = Worksheets("IO").Range(io_vddi_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_inputpins_col & i).Interior.Color = Worksheets("IO").Range(io_inputpins_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_outputpins_col & i).Interior.Color = Worksheets("IO").Range(io_outputpins_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_bidirpins_col & i).Interior.Color = Worksheets("IO").Range(io_bidirpins_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_vcm_col & i).Interior.Color = Worksheets("IO").Range(io_vcm_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_schmitt_col & i).Interior.Color = Worksheets("IO").Range(io_schmitt_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_odt_col & i).Interior.Color = Worksheets("IO").Range(io_odt_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_drive_col & i).Interior.Color = Worksheets("IO").Range(io_drive_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_slew_col & i).Interior.Color = Worksheets("IO").Range(io_slew_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_load_col & i).Interior.Color = Worksheets("IO").Range(io_load_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_iog_col & i).Interior.Color = Worksheets("IO").Range(io_iog_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_clkfreq_col & i).Interior.Color = Worksheets("IO").Range(io_clkfreq_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_datarate_col & i).Interior.Color = Worksheets("IO").Range(io_datarate_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_tgrate_col & i).Interior.Color = Worksheets("IO").Range(io_tgrate_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_enrate_col & i).Interior.Color = Worksheets("IO").Range(io_enrate_col & s + 1).Interior.Color
        Worksheets("IO").Range(io_odtenable_col & i).Interior.Color = Worksheets("IO").Range(io_odtenable_col & s + 1).Interior.Color
        Worksheets("IO").Range("W" & i).Interior.Color = Worksheets("IO").Range("W" & s + 1).Interior.Color
        Worksheets("IO").Range("X" & i).Interior.Color = Worksheets("IO").Range("X" & s + 1).Interior.Color
        Worksheets("IO").Range("CB" & i).Interior.Color = Worksheets("IO").Range("CB" & s + 1).Interior.Color
        
    Next i
     'setting last rows to default values
        If code = 100 Then
            d_io 718, code
        Else
            d_io 716, code
        End If
End Sub
Private Sub shift_pll(ByVal col As Integer)
    For i = col To 23
'     Worksheets("PLL & DLL").Range("B" & i).value = Worksheets("PLL & DLL").Range("B" & i + 1).value
'     Worksheets("PLL & DLL").Range("B" & i).Interior.Color = Worksheets("PLL & DLL").Range("B" & i + 1).Interior.Color
'     Worksheets("PLL & DLL").Range("E" & i).value = Worksheets("PLL & DLL").Range("E" & i + 1).value
'     Worksheets("PLL & DLL").Range("E" & i).Interior.Color = Worksheets("PLL & DLL").Range("E" & i + 1).Interior.Color
'     Worksheets("PLL & DLL").Range("F" & i).value = Worksheets("PLL & DLL").Range("F" & i + 1).value
'     Worksheets("PLL & DLL").Range("F" & i).Interior.Color = Worksheets("PLL & DLL").Range("F" & i + 1).Interior.Color
'     Worksheets("PLL & DLL").Range("G" & i).value = Worksheets("PLL & DLL").Range("G" & i + 1).value
'     Worksheets("PLL & DLL").Range("G" & i).Interior.Color = Worksheets("PLL & DLL").Range("G" & i + 1).Interior.Color
'     Worksheets("PLL & DLL").Range("H" & i).value = Worksheets("PLL & DLL").Range("H" & i + 1).value
'     Worksheets("PLL & DLL").Range("H" & i).Interior.Color = Worksheets("PLL & DLL").Range("H" & i + 1).Interior.Color
'     Worksheets("PLL & DLL").Range("I" & i).value = Worksheets("PLL & DLL").Range("I" & i + 1).value
'     Worksheets("PLL & DLL").Range("I" & i).Interior.Color = Worksheets("PLL & DLL").Range("I" & i + 1).Interior.Color
'     Worksheets("PLL & DLL").Range("J" & i).value = Worksheets("PLL & DLL").Range("J" & i + 1).value
'     Worksheets("PLL & DLL").Range("J" & i).Interior.Color = Worksheets("PLL & DLL").Range("J" & i + 1).Interior.Color

     Worksheets("PLL & DLL").Range(pll_name_str_col & i).value = Worksheets("PLL & DLL").Range(pll_name_str_col & i + 1).value
     Worksheets("PLL & DLL").Range(pll_name_str_col & i).Interior.Color = Worksheets("PLL & DLL").Range(pll_name_str_col & i + 1).Interior.Color
     Worksheets("PLL & DLL").Range(pll_refclk_col & i).value = Worksheets("PLL & DLL").Range(pll_refclk_col & i + 1).value
     Worksheets("PLL & DLL").Range(pll_refclk_col & i).Interior.Color = Worksheets("PLL & DLL").Range(pll_refclk_col & i + 1).Interior.Color
     Worksheets("PLL & DLL").Range(pll_out0freq_col & i).value = Worksheets("PLL & DLL").Range(pll_out0freq_col & i + 1).value
     Worksheets("PLL & DLL").Range(pll_out0freq_col & i).Interior.Color = Worksheets("PLL & DLL").Range(pll_out0freq_col & i + 1).Interior.Color
     Worksheets("PLL & DLL").Range(pll_out1freq_col & i).value = Worksheets("PLL & DLL").Range(pll_out1freq_col & i + 1).value
     Worksheets("PLL & DLL").Range(pll_out1freq_col & i).Interior.Color = Worksheets("PLL & DLL").Range(pll_out1freq_col & i + 1).Interior.Color
     Worksheets("PLL & DLL").Range(pll_out2freq_col & i).value = Worksheets("PLL & DLL").Range(pll_out2freq_col & i + 1).value
     Worksheets("PLL & DLL").Range(pll_out2freq_col & i).Interior.Color = Worksheets("PLL & DLL").Range(pll_out2freq_col & i + 1).Interior.Color
     Worksheets("PLL & DLL").Range(pll_out3freq_col & i).value = Worksheets("PLL & DLL").Range(pll_out3freq_col & i + 1).value
     Worksheets("PLL & DLL").Range(pll_out3freq_col & i).Interior.Color = Worksheets("PLL & DLL").Range(pll_out3freq_col & i + 1).Interior.Color
     Worksheets("PLL & DLL").Range(pll_mode_col & i).value = Worksheets("PLL & DLL").Range(pll_mode_col & i + 1).value
     Worksheets("PLL & DLL").Range(pll_mode_col & i).Interior.Color = Worksheets("PLL & DLL").Range(pll_mode_col & i + 1).Interior.Color
     
    Next i
     d_pll 24
End Sub
Private Sub shift_xcvr(ByVal col As Integer)
    For i = col To 36
    
'    Worksheets("Transceiver").Range("B" & i).value = Worksheets("Transceiver").Range("B" & i + 1).value
'    Worksheets("Transceiver").Range("B" & i).Interior.Color = Worksheets("Transceiver").Range("B" & i + 1).Interior.Color
'    Worksheets("Transceiver").Range("E" & i).value = Worksheets("Transceiver").Range("E" & i + 1).value
'    Worksheets("Transceiver").Range("E" & i).Interior.Color = Worksheets("Transceiver").Range("E" & i + 1).Interior.Color
'    Worksheets("Transceiver").Range("F" & i).value = Worksheets("Transceiver").Range("F" & i + 1).value
'    Worksheets("Transceiver").Range("F" & i).Interior.Color = Worksheets("Transceiver").Range("F" & i + 1).Interior.Color
'    Worksheets("Transceiver").Range("G" & i).value = Worksheets("Transceiver").Range("G" & i + 1).value
'    Worksheets("Transceiver").Range("G" & i).Interior.Color = Worksheets("Transceiver").Range("G" & i + 1).Interior.Color
'    Worksheets("Transceiver").Range("H" & i).value = Worksheets("Transceiver").Range("H" & i + 1).value
'    Worksheets("Transceiver").Range("H" & i).Interior.Color = Worksheets("Transceiver").Range("H" & i + 1).Interior.Color
'    Worksheets("Transceiver").Range("I" & i).value = Worksheets("Transceiver").Range("I" & i + 1).value
'    Worksheets("Transceiver").Range("I" & i).Interior.Color = Worksheets("Transceiver").Range("I" & i + 1).Interior.Color
'    Worksheets("Transceiver").Range("J" & i).value = Worksheets("Transceiver").Range("J" & i + 1).value
'    Worksheets("Transceiver").Range("J" & i).Interior.Color = Worksheets("Transceiver").Range("J" & i + 1).Interior.Color
'    Worksheets("Transceiver").Range("K" & i).value = Worksheets("Transceiver").Range("K" & i + 1).value
'    Worksheets("Transceiver").Range("K" & i).Interior.Color = Worksheets("Transceiver").Range("K" & i + 1).Interior.Color
'    Worksheets("Transceiver").Range("L" & i).value = Worksheets("Transceiver").Range("L" & i + 1).value
'    Worksheets("Transceiver").Range("L" & i).Interior.Color = Worksheets("Transceiver").Range("L" & i + 1).Interior.Color
'    Worksheets("Transceiver").Range("M" & i).value = Worksheets("Transceiver").Range("M" & i + 1).value
'    Worksheets("Transceiver").Range("M" & i).Interior.Color = Worksheets("Transceiver").Range("M" & i + 1).Interior.Color
'    Worksheets("Transceiver").Range("N" & i).value = Worksheets("Transceiver").Range("N" & i + 1).value
'    Worksheets("Transceiver").Range("N" & i).Interior.Color = Worksheets("Transceiver").Range("N" & i + 1).Interior.Color
'    Worksheets("Transceiver").Range("O" & i).value = Worksheets("Transceiver").Range("O" & i + 1).value
'    Worksheets("Transceiver").Range("O" & i).Interior.Color = Worksheets("Transceiver").Range("O" & i + 1).Interior.Color
'    Worksheets("Transceiver").Range("P" & i).value = Worksheets("Transceiver").Range("P" & i + 1).value
'    Worksheets("Transceiver").Range("P" & i).Interior.Color = Worksheets("Transceiver").Range("P" & i + 1).Interior.Color
'    Worksheets("Transceiver").Range("Q" & i).value = Worksheets("Transceiver").Range("Q" & i + 1).value
'    Worksheets("Transceiver").Range("Q" & i).Interior.Color = Worksheets("Transceiver").Range("Q" & i + 1).Interior.Color

    Worksheets("Transceiver").Range(xcvr_name_str_col & i).value = Worksheets("Transceiver").Range(xcvr_name_str_col & i + 1).value
    Worksheets("Transceiver").Range(xcvr_name_str_col & i).Interior.Color = Worksheets("Transceiver").Range(xcvr_name_str_col & i + 1).Interior.Color
    Worksheets("Transceiver").Range(xcvr_protocol_col & i).value = Worksheets("Transceiver").Range(xcvr_protocol_col & i + 1).value
    Worksheets("Transceiver").Range(xcvr_protocol_col & i).Interior.Color = Worksheets("Transceiver").Range(xcvr_protocol_col & i + 1).Interior.Color
    Worksheets("Transceiver").Range(xcvr_nlanes_col & i).value = Worksheets("Transceiver").Range(xcvr_nlanes_col & i + 1).value
    Worksheets("Transceiver").Range(xcvr_nlanes_col & i).Interior.Color = Worksheets("Transceiver").Range(xcvr_nlanes_col & i + 1).Interior.Color
    Worksheets("Transceiver").Range(xcvr_opmode_col & i).value = Worksheets("Transceiver").Range(xcvr_opmode_col & i + 1).value
    Worksheets("Transceiver").Range(xcvr_opmode_col & i).Interior.Color = Worksheets("Transceiver").Range(xcvr_opmode_col & i + 1).Interior.Color
    Worksheets("Transceiver").Range(xcv_txdatarate_col & i).value = Worksheets("Transceiver").Range(xcv_txdatarate_col & i + 1).value
    Worksheets("Transceiver").Range(xcv_txdatarate_col & i).Interior.Color = Worksheets("Transceiver").Range(xcv_txdatarate_col & i + 1).Interior.Color
    Worksheets("Transceiver").Range(xcvr_rxdatarate_col & i).value = Worksheets("Transceiver").Range(xcvr_rxdatarate_col & i + 1).value
    Worksheets("Transceiver").Range(xcvr_rxdatarate_col & i).Interior.Color = Worksheets("Transceiver").Range(xcvr_rxdatarate_col & i + 1).Interior.Color
    Worksheets("Transceiver").Range(xcvr_pll_col & i).value = Worksheets("Transceiver").Range(xcvr_pll_col & i + 1).value
    Worksheets("Transceiver").Range(xcvr_pll_col & i).Interior.Color = Worksheets("Transceiver").Range(xcvr_pll_col & i + 1).Interior.Color
    Worksheets("Transceiver").Range(xcvr_dfe_col & i).value = Worksheets("Transceiver").Range(xcvr_dfe_col & i + 1).value
    Worksheets("Transceiver").Range(xcvr_dfe_col & i).Interior.Color = Worksheets("Transceiver").Range(xcvr_dfe_col & i + 1).Interior.Color
    Worksheets("Transceiver").Range(xcvr_eyemonitor_col & i).value = Worksheets("Transceiver").Range(xcvr_eyemonitor_col & i + 1).value
    Worksheets("Transceiver").Range(xcvr_eyemonitor_col & i).Interior.Color = Worksheets("Transceiver").Range(xcvr_eyemonitor_col & i + 1).Interior.Color
    Worksheets("Transceiver").Range(xcvr_ctle_col & i).value = Worksheets("Transceiver").Range(xcvr_ctle_col & i + 1).value
    Worksheets("Transceiver").Range(xcvr_ctle_col & i).Interior.Color = Worksheets("Transceiver").Range(xcvr_ctle_col & i + 1).Interior.Color
    Worksheets("Transceiver").Range(xcvr_txamp_col & i).value = Worksheets("Transceiver").Range(xcvr_txamp_col & i + 1).value
    Worksheets("Transceiver").Range(xcvr_txamp_col & i).Interior.Color = Worksheets("Transceiver").Range(xcvr_txamp_col & i + 1).Interior.Color
    Worksheets("Transceiver").Range(xcvr_pcsmode_col & i).value = Worksheets("Transceiver").Range(xcvr_pcsmode_col & i + 1).value
    Worksheets("Transceiver").Range(xcvr_pcsmode_col & i).Interior.Color = Worksheets("Transceiver").Range(xcvr_pcsmode_col & i + 1).Interior.Color
    Worksheets("Transceiver").Range(xcvr_pcswidth_col & i).value = Worksheets("Transceiver").Range(xcvr_pcswidth_col & i + 1).value
    Worksheets("Transceiver").Range(xcvr_pcswidth_col & i).Interior.Color = Worksheets("Transceiver").Range(xcvr_pcswidth_col & i + 1).Interior.Color
    Worksheets("Transceiver").Range(xcvr_pcie_col & i).value = Worksheets("Transceiver").Range(xcvr_pcie_col & i + 1).value
    Worksheets("Transceiver").Range(xcvr_pcie_col & i).Interior.Color = Worksheets("Transceiver").Range(xcvr_pcie_col & i + 1).Interior.Color

    Next i
     d_xcvr 37
End Sub
Function MPEDELETEIP(ByVal manage_ip_list_ As String)
         On Error GoTo noip
         manage_ip_list = manage_ip_list_
         delete_ip_Click
         Exit Function
noip:
    Debug.Print ("Please Enter correct IP module")
    MsgBox "Please Enter correct IP module"
End Function

Attribute VB_Name = "memory_config"
Attribute VB_Base = "0{1A9A7F6C-9F98-41AB-A9B2-86C07C3121D0}{B3948B72-FFD3-4F7E-A625-5CF0E346B51F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub memconfig_close_button_Click()
      Unload Me
End Sub

Private Sub memconfig_create_button_Click()
    Dim memory_validate_result As Boolean
    memory_validate_result = memory_validate ' validation function to check user inputs
    'If memory_validate_result Then
        Application.Calculation = xlCalculationManual
        Application.ScreenUpdating = False
        Application.EnableEvents = False
        
        Worksheets("dss_data").Range("D252").value = Worksheets("dss_data").Range("D252").value + 1 'Total number of IP created
        
        If MultiPage1.value = 0 Then
            memory_lsram_create     'LSRAM macro call
            ip_code_set 2
        End If
        If MultiPage1.value = 1 Then
            memory_usram_create     'uSRAM macro call
            ip_code_set 3
        End If
        
        Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Application.Calculate
        Application.ScreenUpdating = True
        
        ComputeThermalPower
        
        Unload Me
        
    'End If
End Sub

Private Sub UserForm_Initialize()
      MultiPage1.value = 0      'To show Add LSRAM UI
End Sub
Private Sub memory_lsram_create()
    Dim lsram_blocks As Long
    Dim lsram_widthA, lsram_widthB As Integer
    Dim ind As Integer
    
   ' get_total_blocks (1)    'call to get #blocks
    lsram_blocks = Worksheets("usram_data").Range("Q108").value
    lsram_widthA = Worksheets("usram_data").Range("N108").value
    lsram_widthB = Worksheets("usram_data").Range("S108").value
    ind = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM")
    
    'All options in lsram sheet need to set as per ind row
    'Worksheets("LSRAM").Range("B" & ind).value = lsram_module_name.value
    Worksheets("LSRAM").Range(lsram_name_str_col & ind).value = lsram_module_name.value
    'Worksheets("LSRAM").Range("E" & ind).value = lsram_blocks
    Worksheets("LSRAM").Range(lsram_nblock_col & ind).value = lsram_blocks
    ' port-A options
'    Worksheets("LSRAM").Range("F" & ind).value = lsram_widthA
    Worksheets("LSRAM").Range(lsram_Awidth_col & ind).value = lsram_widthA
'    Worksheets("LSRAM").Range("G" & ind).value = lsram_portA_clkfrq.value
    Worksheets("LSRAM").Range(lsram_Aclkfreq_col & ind).value = lsram_portA_clkfrq.value
'    Worksheets("LSRAM").Range("I" & ind).value = lsram_portA_writerate.value * 0.01
    Worksheets("LSRAM").Range(lsram_Awriterate_col & ind).value = lsram_portA_writerate.value * 0.01
'    Worksheets("LSRAM").Range("K" & ind).value = lsram_portA_enablerate.value * 0.01
    Worksheets("LSRAM").Range(lsram_Aenrate_col & ind).value = lsram_portA_enablerate.value * 0.01
    
    'port-B options
    'Worksheets("LSRAM").Range("L" & ind).value = lsram_widthB
    Worksheets("LSRAM").Range(lsram_Bwidth_col & ind).value = lsram_widthB
    'Worksheets("LSRAM").Range("M" & ind).value = lsram_portB_clkfrq.value
    Worksheets("LSRAM").Range(lsram_Bclkfreq_col & ind).value = lsram_portB_clkfrq.value
    'Worksheets("LSRAM").Range("O" & ind).value = lsram_portB_writerate.value * 0.01
    Worksheets("LSRAM").Range(lsram_Bwriterate_col & ind).value = lsram_portB_writerate.value * 0.01
    'Worksheets("LSRAM").Range("Q" & ind).value = lsram_portB_enablerate.value * 0.01
    Worksheets("LSRAM").Range(lsram_Benrate_col & ind).value = lsram_portB_enablerate.value * 0.01
    
    
    'Worksheets("LSRAM").Range("T" & ind).value = lsram_togglerate.value * 0.01
    Worksheets("LSRAM").Range(lsram_tgrate_col & ind).value = lsram_togglerate.value * 0.01
    
    'setting reference table in dss_data sheet
    set_module_table lsram_module_name.value, "memory_lsram", ind, ""
    ip_code_set 2
End Sub

Private Sub memory_usram_create()
    Dim ind As Integer
    Dim usram_blocks As Long
    Dim usram_widthA, usram_widthB As Integer
    
   ' get_total_blocks (2)    'call to get #blocks
    usram_blocks = Worksheets("usram_data").Range("Q108").value
    usram_widthA = Worksheets("usram_data").Range("N108").value
    usram_widthB = Worksheets("usram_data").Range("S108").value 'we have only 64X12 memory so always 12 is width
    ind = free_row(ActiveWorkbook.Worksheets("uSRAM"), 9, 250, "M", "uSRAM")
    
    'All options in usram sheet need to set as per ind row
    'Worksheets("uSRAM").Range("B" & ind).value = usram_module_name.value
    Worksheets("uSRAM").Range(usram_name_str_col & ind).value = usram_module_name.value
    'Worksheets("uSRAM").Range("E" & ind).value = usram_blocks
    Worksheets("uSRAM").Range(usram_nblock_col & ind).value = usram_blocks
    'Worksheets("uSRAM").Range("G" & ind).value = usram_useregisters_cb.value
    Worksheets("uSRAM").Range(usram_reg_col & ind).value = usram_useregisters_cb.value
    'Write port options
    'Worksheets("uSRAM").Range("H" & ind).value = usram_writeP_clkfreq.value
    Worksheets("uSRAM").Range(usram_writeclkfreq_col & ind).value = usram_writeP_clkfreq.value
    'Worksheets("uSRAM").Range("I" & ind).value = usram_writeP_enablerate.value * 0.01
    Worksheets("uSRAM").Range(usram_writeenrate_col & ind).value = usram_writeP_enablerate.value * 0.01
    'Read port options
    'Worksheets("uSRAM").Range("J" & ind).value = usram_readP_clkfreq.value
    Worksheets("uSRAM").Range(usram_readclkfreq_col & ind).value = usram_readP_clkfreq.value
    'Worksheets("uSRAM").Range("K" & ind).value = usram_readP_enablerate.value * 0.01
    Worksheets("uSRAM").Range(usram_readenrate_col & ind).value = usram_readP_enablerate.value * 0.01
    
    'Worksheets("uSRAM").Range("L" & ind).value = usram_togglerate.value * 0.01
    Worksheets("uSRAM").Range(usram_tgrate_col & ind).value = usram_togglerate.value * 0.01
    
    'setting reference table in dss_data sheet
    set_module_table usram_module_name.value, "memory_usram", ind, ""
    ip_code_set 3
End Sub

Private Function get_total_blocks(ramtype As Integer) As Integer
    Dim totalblocks As Integer

    If ramtype = 1 Then    'Lsram
        totalblocks = calculate_blocks(1)
    End If

    If ramtype = 2 Then   'usram
        totalblocks = calculate_blocks(2)
    End If

End Function
Private Function calculate_blocks(ramtype As Integer)
    Dim arr_depth() As Variant
    Dim arr_width() As Variant
    Dim trow, config_count As Integer
    config_count = 0
    Dim portA_depth, portA_width, portB_depth, portB_width As Long
    
    If ramtype = 1 Then    'Lsram
        portA_depth = lsram_portA_depth.value
        portA_width = lsram_portA_width.value
        portB_depth = lsram_portB_depth.value
        portB_width = lsram_portB_width.value
        If lsram_operationmode_cb = "Dual Port mode" Then
            arr_depth = Array(1024, 2048, 4096, 8192, 16384)
            arr_width = Array(20, 10, 5, 2, 1)
        End If
        If lsram_operationmode_cb = "Two Port mode" Then
            arr_depth = Array(512, 1024, 2048, 4096, 8192, 16384)
            arr_width = Array(40, 20, 10, 5, 2, 1)
        End If
    End If
    
    If ramtype = 2 Then   'usram
        arr_depth = Array(64)
        arr_width = Array(12)
        portA_width = usram_writeP_width.value
        portB_depth = usram_readP_depth.value
        portB_width = usram_readP_width.value
        portA_depth = usram_writeP_depth.value

    End If
    
    Worksheets("usram_data").Range("B102").value = portA_depth        'in info table
    Worksheets("usram_data").Range("B103").value = portA_width
    Worksheets("usram_data").Range("F102").value = portB_depth
    Worksheets("usram_data").Range("F103").value = portB_width
    
    Dim PortAdepth, PortAwidth, PortBdepth, PortBwidth As Long
    For Var = LBound(arr_depth) To UBound(arr_depth)
        
        PortAdepth = CLng(Application.WorksheetFunction.Ceiling(portA_depth / arr_depth(Var), 1))
        PortAwidth = CLng(Application.WorksheetFunction.Ceiling(portA_width / arr_width(Var), 1))
    
        For Var2 = LBound(arr_depth) To UBound(arr_depth)
            PortBdepth = CLng(Application.WorksheetFunction.Ceiling(portB_depth / arr_depth(Var2), 1))
            PortBwidth = CLng(Application.WorksheetFunction.Ceiling(portB_width / arr_width(Var2), 1))
            If PortAdepth = PortBdepth And PortAwidth = PortBwidth Then
                config_count = config_count + 1
                trow = 107
                trow = trow + config_count
                Worksheets("usram_data").Range("K107").value = config_count     'total count
                Worksheets("usram_data").Range("L" & trow).value = config_count 'count number wise
                'PORT-A details
                Worksheets("usram_data").Range("M" & trow).value = arr_depth(Var)
                Worksheets("usram_data").Range("N" & trow).value = arr_width(Var)
                Worksheets("usram_data").Range("O" & trow).value = PortAdepth
                Worksheets("usram_data").Range("P" & trow).value = PortAwidth
                Worksheets("usram_data").Range("Q" & trow).value = PortAdepth * PortAwidth
                'PORT-B details
                Worksheets("usram_data").Range("R" & trow).value = arr_depth(Var2)
                Worksheets("usram_data").Range("S" & trow).value = arr_width(Var2)
                Worksheets("usram_data").Range("T" & trow).value = PortBdepth
                Worksheets("usram_data").Range("U" & trow).value = PortBwidth
                Worksheets("usram_data").Range("V" & trow).value = PortBdepth * PortBwidth
            End If
        Next Var2
    Next Var
    
    If lsram_optimizemode_cb.value = "Low Power mode" Then
        low_power_mode_logic portA_depth, portB_depth
    End If
    
    If lsram_optimizemode_cb.value = "High Speed mode" Then
        high_speed_mode_logic portA_depth, portB_depth
    End If

End Function
Private Sub high_speed_mode_logic(portA_depth As Variant, portB_depth As Variant)
Dim strDataRange As Range
Dim keyRange As Range
Dim endrow, lowestindex, numberoflowestindex As Integer
' lowest depth, then lowest width for the same lowest depth number
    
    endrow = 107 + Worksheets("usram_data").Range("K107")
    Set strDataRange = Worksheets("usram_data").Range("M108:V" & endrow)
    Set keyRange = Worksheets("usram_data").Range("O108:O" & endrow)       'depth column
        strDataRange.Sort Key1:=keyRange, Order1:=xlAscending
        lowestindex = Worksheets("usram_data").Range("O108")
        numberoflowestindex = CInt(Application.WorksheetFunction.CountIf(keyRange, lowestindex))
        If numberoflowestindex > 1 Then
            endrow = 107 + numberoflowestindex
            Set strDataRange = Worksheets("usram_data").Range("M108:V" & endrow)
            Set keyRange = Worksheets("usram_data").Range("P108:P" & endrow)   'width column
            strDataRange.Sort Key1:=keyRange, Order1:=xlAscending
        Else
            ' we can stright way take the 1st row data as final data in the table
        End If

End Sub

Private Sub low_power_mode_logic(portA_depth As Variant, portB_depth As Variant)
Dim strDataRange As Range
Dim keyRange As Range
Dim endrow, lowestindex, numberoflowestindex As Integer

    If portA_depth = portB_depth Then
        'lowest width, then lowest depth for the same lowest width number
        endrow = 107 + Worksheets("usram_data").Range("K107")
        Set strDataRange = Worksheets("usram_data").Range("M108:V" & endrow)
        Set keyRange = Worksheets("usram_data").Range("P108:P" & endrow)       'width column
        strDataRange.Sort Key1:=keyRange, Order1:=xlAscending
        lowestindex = Worksheets("usram_data").Range("P108")
        numberoflowestindex = CInt(Application.WorksheetFunction.CountIf(keyRange, lowestindex))
        If numberoflowestindex > 1 Then
            endrow = 107 + numberoflowestindex
            Set strDataRange = Worksheets("usram_data").Range("M108:V" & endrow)
            Set keyRange = Worksheets("usram_data").Range("O108:O" & endrow)   'depth column
            strDataRange.Sort Key1:=keyRange, Order1:=xlAscending
        Else
            ' we can stright way take the 1st row data as final data in the table
        End If
        
    Else
        'lowest product, then lowest depth for the same lowest product number
        endrow = 107 + Worksheets("usram_data").Range("K107")
        Set strDataRange = Worksheets("usram_data").Range("M108:V" & endrow)
        Set keyRange = Worksheets("usram_data").Range("Q108:Q" & endrow)    'product column
        strDataRange.Sort Key1:=keyRange, Order1:=xlAscending
        lowestindex = Worksheets("usram_data").Range("Q108")
        numberoflowestindex = CInt(Application.WorksheetFunction.CountIf(keyRange, lowestindex))
        If numberoflowestindex > 1 Then
            endrow = 107 + numberoflowestindex
            Set strDataRange = Worksheets("usram_data").Range("M108:V" & endrow)
            Set keyRange = Worksheets("usram_data").Range("P108:P" & endrow)    'width column
            strDataRange.Sort Key1:=keyRange, Order1:=xlAscending
        Else
            ' we can stright way take the 1st row data as final data in the table
        End If
    End If

End Sub

Private Function memory_validate()
    Dim check As Integer
    Dim ind As Integer
    
    If MultiPage1.value = 0 Then 'LSRAM options validation
        ' operation modes lsram_operationmode_cb
        ind = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM")
        If lsram_operationmode_cb.value <> "" Then
        Else
            MsgBox "Invalid Operation mode."
            memory_validate = False
            Exit Function
        End If
        
        ' Optimize mode  lsram_optimizemode_cb
        If lsram_optimizemode_cb.value <> "" Then
        Else
            MsgBox "Invalid Optimize mode."
            memory_validate = False
            Exit Function
        End If
        
        ' Output toggle rate
        If lsram_togglerate.value >= 0 And lsram_togglerate.value <= 100 Then
        Else
            MsgBox "Invalid Output toggle rate. It must be between 0% to 100%. "
            memory_validate = False
            Worksheets("LSRAM").Range(lsram_tgrate_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        ' Port-A clk freq
        If lsram_portA_clkfrq.value >= 0 And lsram_portA_clkfrq.value <= 450 Then
        Else
            MsgBox "Invalid Port-A Clock Frequency. It should not exceed 450 MHz. "
            memory_validate = False
            Worksheets("LSRAM").Range(lsram_Aclkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
                
        ' Port-A write rate
        If lsram_portA_writerate.value >= 0 And lsram_portA_writerate.value <= 100 Then
        Else
            MsgBox "Invalid Port-A Write rate. It must be between 0% to 100%. "
            memory_validate = False
            Worksheets("LSRAM").Range(lsram_Aclkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        ' Port-A enable rate
        If lsram_portA_enablerate.value >= 0 And lsram_portA_enablerate.value <= 100 Then
        Else
            MsgBox "Invalid Port-A Enable rate. It must be between 0% to 100%. "
            memory_validate = False
            Worksheets("LSRAM").Range(lsram_Aenrate_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        ' Port-B clk freq
        If lsram_portB_clkfrq.value >= 0 And lsram_portB_clkfrq.value <= 450 Then
        Else
            MsgBox "Invalid Port-B Clock Frequency. It should not exceed 450 MHz. "
            memory_validate = False
            Worksheets("LSRAM").Range(lsram_Bclkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        ' Port-B write rate
        If lsram_portB_writerate.value >= 0 And lsram_portB_writerate.value <= 100 Then
        Else
            MsgBox "Invalid Port-B Write rate. It must be between 0% to 100%. "
            memory_validate = False
            Worksheets("LSRAM").Range(lsram_Bwriterate_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        ' Port-B enable rate
        If lsram_portB_enablerate.value >= 0 And lsram_portB_enablerate.value <= 100 Then
        Else
            MsgBox "Invalid Port-B Enable rate. It must be between 0% to 100%. "
            memory_validate = False
            Worksheets("LSRAM").Range(lsram_Benrate_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        'Port- A depth integer check
        ind = free_row(ActiveWorkbook.Worksheets("uSRAM"), 9, 250, "M", "uSRAM")
        If IsInteger(lsram_portA_depth.value) Then
        Else
            MsgBox "Invalid Port-A Depth: It must be a whole number. "
            memory_validate = False
            Worksheets("usram_data").Range("B102").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        'Port-A width interger check
        If IsInteger(lsram_portA_width.value) Then
        Else
            MsgBox "Invalid Port-A Width: It must be a whole number. "
            memory_validate = False
            Worksheets("usram_data").Range("B103").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        'Port-B depth integer check
        If IsInteger(lsram_portB_depth.value) Then
        Else
            MsgBox "Invalid Port-B Depth: It must be a whole number. "
            memory_validate = False
            Worksheets("usram_data").Range("F102").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        'port-B width integer check
        If IsInteger(lsram_portB_width.value) Then
        Else
            MsgBox "Invalid Port-B Width: It must be a whole number. "
            memory_validate = False
            Worksheets("usram_data").Range("F103").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        'Dual port lsram Depth & Width range validation for both ports
        ' Depth =  1 - 524288 . width = 1 - 19040
        If lsram_operationmode_cb.value = Worksheets("dss_data").Range("B394").value Then
            If lsram_portA_depth.value > 0 And lsram_portA_depth.value <= 524288 Then
            Else
                MsgBox "Invalid Port-A Depth: In Dual Port mode legal range for depth is 1 - 524288. "
                memory_validate = False
                Worksheets("usram_data").Range("B102").Interior.Color = RGB(255, 0, 0)
                'Exit Function
            End If
            If lsram_portA_width.value > 0 And lsram_portA_width.value <= 19040 Then
            Else
                MsgBox "Invalid Port-A Width: In Dual Port mode legal range for width is 1 - 19040. "
                memory_validate = False
                Worksheets("usram_data").Range("B103").Interior.Color = RGB(255, 0, 0)
                'Exit Function
            End If
            If lsram_portB_depth.value > 0 And lsram_portB_depth.value <= 524288 Then
            Else
                MsgBox "Invalid Port-B Depth: In Dual Port mode legal range for depth is 1 - 524288. "
                memory_validate = False
                Worksheets("usram_data").Range("F102").Interior.Color = RGB(255, 0, 0)
                'Exit Function
            End If
            If lsram_portB_width.value > 0 And lsram_portB_width.value <= 19040 Then
            Else
                MsgBox "Invalid Port-B Width: In Dual Port mode legal range for width is 1 - 19040. "
                memory_validate = False
                Worksheets("usram_data").Range("F103").Interior.Color = RGB(255, 0, 0)
                'Exit Function
            End If
        End If
        'Two port lsram Depth & Width range validation for both ports
        ' Depth =  1 - 524288 . width = 1 - 38080
        If lsram_operationmode_cb.value = Worksheets("dss_data").Range("B395").value Then
            If lsram_portA_depth.value > 0 And lsram_portA_depth.value <= 524288 Then
            Else
                MsgBox "Invalid Port-A Depth: In Two Port mode legal range for depth is 1 - 524288. "
                memory_validate = False
                Worksheets("usram_data").Range("B102").Interior.Color = RGB(255, 0, 0)
                'Exit Function
            End If
            If lsram_portA_width.value > 0 And lsram_portA_width.value <= 38080 Then
            Else
                MsgBox "Invalid Port-A Width: In Two Port mode legal range for width is 1 - 38080. "
                memory_validate = False
                Worksheets("usram_data").Range("B103").Interior.Color = RGB(255, 0, 0)
                'Exit Function
            End If
            If lsram_portB_depth.value > 0 And lsram_portB_depth.value <= 524288 Then
            Else
                MsgBox "Invalid Port-B Depth: In Two Port mode legal range for depth is 1 - 524288. "
                memory_validate = False
                Worksheets("usram_data").Range("F102").Interior.Color = RGB(255, 0, 0)
                'Exit Function
            End If
            If lsram_portB_width.value > 0 And lsram_portB_width.value <= 38080 Then
            Else
                MsgBox "Invalid Port-B Width: In Two Port mode legal range for width is 1 - 38080. "
                memory_validate = False
                Worksheets("usram_data").Range("F103").Interior.Color = RGB(255, 0, 0)
                'Exit Function
            End If
        End If
        'D*W Product of port-A and port-B should be same
        Dim portA_porduct, portB_porduct As Long
        'portA_porduct = lsram_portA_depth.value * lsram_portA_width.value
        Worksheets("dss_data").Range("J393").value = lsram_portA_depth.value * lsram_portA_width.value
        Worksheets("dss_data").Range("J394").value = lsram_portB_depth.value * lsram_portB_width.value
        'portB_porduct = lsram_portB_depth.value * lsram_portB_width.value
        'If portA_porduct = portB_porduct Then
        If Worksheets("dss_data").Range("J393").value = Worksheets("dss_data").Range("J394").value Then
        Else
            MsgBox "Invalid Configuration: Depth and Width product for Port-A, Port-B is not equal. "
            memory_validate = False
            Worksheets("usram_data").Range("B102").Interior.Color = RGB(255, 0, 0)
            Worksheets("usram_data").Range("F102").Interior.Color = RGB(255, 0, 0)
            Worksheets("usram_data").Range("B103").Interior.Color = RGB(255, 0, 0)
            Worksheets("usram_data").Range("F103").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        'check available blocks for selected device
        ' Call the logic here and check the computed product value with available blocks of selected device.
        calculate_blocks (1) ' calculate blocks for lsram
        Dim available_lsramblocks, cal_lsramblocks As Long
        available_lsramblocks = Worksheets("lsram_data").Range("K3").value
        cal_lsramblocks = Worksheets("usram_data").Range("Q108").value
        If cal_lsramblocks <= available_lsramblocks Then
        Else
            MsgBox "Invalid Configuration: No suitable configuration found. Exceeded available memory on device. "
            memory_validate = False
            Exit Function
        End If
        
        ' Module name    Checking for dublicate IP name in Manage IP list
        If lsram_module_name.value = "" Then
            Dim lsram_operamode As String
            Dim lsram_optimmode As String
            If lsram_operationmode_cb.value = Worksheets("dss_data").Range("B394").value Then
                lsram_operamode = "DPmode"
            End If
            If lsram_operationmode_cb.value = Worksheets("dss_data").Range("B395").value Then
                lsram_operamode = "TPmode"
            End If
            If lsram_optimizemode_cb.value = Worksheets("dss_data").Range("D394").value Then
                lsram_optimmode = "HSmode"
            End If
            If lsram_optimizemode_cb.value = Worksheets("dss_data").Range("D395").value Then
                lsram_optimmode = "LPmode"
            End If
            
            lsram_module_name.value = "LSRAM_" & lsram_operamode & "_" & lsram_optimmode
        End If
        ind = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM")
        If module_name_notused(lsram_module_name.value, "") Then
            MsgBox "Unable to create " & """" & lsram_module_name.value & """" & vbNewLine _
            & "An IP with that module name already exists."
            memory_validate = False
            Worksheets("LSRAM").Range(lsram_name_str_col & ind).Interior.Color = RGB(255, 0, 0)
            'lsram_module_name.value = ""
            'Exit Function
        End If
        
        ' lsram rows exhausted checking in lsram sheet
        check = free_row(ActiveWorkbook.Worksheets("LSRAM"), 9, 250, "U", "LSRAM")
        If check = 251 Then
            MsgBox "Rows are exhausted to create memory in LSRAM sheet."
            memory_validate = False
            Exit Function
        End If
        
    End If
'uSRAM options validation
    If MultiPage1.value = 1 Then 'uSRAM options validation
        ' Optimize mode        usram_optimizemode_cb
        ind = free_row(ActiveWorkbook.Worksheets("uSRAM"), 9, 250, "M", "uSRAM")
        If usram_optimizemode_cb.value <> "" Then
        Else
            MsgBox "Invalid Optimize mode."
            memory_validate = False
            Exit Function
        End If
        
        ' Registers used        usram_useregisters_cb
        
        ' Output toggle rate
        If usram_togglerate.value >= 0 And usram_togglerate.value <= 100 Then
        Else
            MsgBox "Invalid Output toggle rate. It must be between 0% to 100%. "
            memory_validate = False
            Worksheets("uSRAM").Range(usram_tgrate_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        ' Write port clk freq
          If usram_writeP_clkfreq.value >= 0 And usram_writeP_clkfreq.value <= 550 Then
        Else
            MsgBox "Invalid Write Port Clock Frequency. It should not exceed 550 MHz. "
            memory_validate = False
            Worksheets("uSRAM").Range(usram_writeclkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        ' Write port enable rate
        If usram_writeP_enablerate.value >= 0 And usram_writeP_enablerate.value <= 100 Then
        Else
            MsgBox "Invalid Write Port Enable rate. It must be between 0% to 100%. "
            memory_validate = False
            Worksheets("uSRAM").Range(usram_writeenrate_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        ' Read port clk freq
        If usram_readP_clkfreq.value >= 0 And usram_readP_clkfreq.value <= 550 Then
        Else
            MsgBox "Invalid Read Port Clock Frequency. It should not exceed 550 MHz. "
            memory_validate = False
            Worksheets("uSRAM").Range(usram_readclkfreq_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        ' Read port enable rate
        If usram_readP_enablerate.value >= 0 And usram_readP_enablerate.value <= 100 Then
        Else
            MsgBox "Invalid Read Port Enable rate. It must be between 0% to 100%. "
            memory_validate = False
            Worksheets("uSRAM").Range(usram_readenrate_col & ind).Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        'Write port depth integer check
         If IsInteger(usram_writeP_depth.value) Then
         Else
            MsgBox "Invalid Write Port Depth: It must be a whole number. "
            memory_validate = False
            Worksheets("usram_data").Range("B102").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        'write port width integer check
         If Not IsInteger(usram_writeP_width.value) Then
            MsgBox "Invalid Write Port Width: It must be a whole number. "
            memory_validate = False
            Worksheets("usram_data").Range("B103").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        'Read port depth integer check
         If Not IsInteger(usram_readP_depth.value) Then
            MsgBox "Invalid Read Port Depth: It must be a whole number. "
            memory_validate = False
            Worksheets("usram_data").Range("F102").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        'Read port width integer check
         If Not IsInteger(usram_readP_width.value) Then
            MsgBox "Invalid Read Port Width: It must be a whole number. "
            memory_validate = False
            Worksheets("usram_data").Range("F103").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        'usram Depth & Width range validation for both ports
        ' Depth =  1 - 2048 . width = 1 - 33264
        If usram_writeP_depth.value > 0 And usram_writeP_depth.value <= 2048 Then
        Else
            MsgBox "Invalid Write Port Depth: Legal range for depth is 1 - 2048. "
            memory_validate = False
            Worksheets("usram_data").Range("B102").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        If usram_writeP_width.value > 0 And usram_writeP_width.value <= 33264 Then
        Else
            MsgBox "Invalid Write Port Width: Legal range for width is 1 - 33264. "
            memory_validate = False
            Worksheets("usram_data").Range("B103").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        If usram_readP_depth.value > 0 And usram_readP_depth.value <= 2048 Then
        Else
            MsgBox "Invalid Read Port Depth: Legal range for depth is 1 - 2048. "
            memory_validate = False
            Worksheets("usram_data").Range("F102").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        If usram_readP_width.value > 0 And usram_readP_width.value <= 33264 Then
        Else
            MsgBox "Invalid Read Port Width: Legal range for width is 1 - 33264. "
            memory_validate = False
            Worksheets("usram_data").Range("F103").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        'Only same depth and width numbers are allowed for both ports. variable ratio is not allowed
        If usram_writeP_depth.value = usram_readP_depth.value Then
        Else
            MsgBox "Invalid configuration: Write Port depth is not equal to Read Port depth. "
            memory_validate = False
            Worksheets("usram_data").Range("B102").Interior.Color = RGB(255, 0, 0)
            Worksheets("usram_data").Range("F102").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        If usram_writeP_width.value = usram_readP_width.value Then
        Else
            MsgBox "Invalid configuration: Write Port width is not equal to Read Port width. "
            memory_validate = False
            Worksheets("usram_data").Range("B103").Interior.Color = RGB(255, 0, 0)
            Worksheets("usram_data").Range("F103").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        'Porduct should be same for poth ports
        'D*W Product of read port and write port should be same
        Dim writeport_porduct, readport_porduct As Long
        writeport_porduct = usram_writeP_depth.value * usram_writeP_width.value
        readport_porduct = usram_readP_depth.value * usram_readP_width.value
        If writeport_porduct = readport_porduct Then
        Else
            MsgBox "Invalid Configuration: Depth and Width product for Write Port, Read Port is not equal. "
            memory_validate = False
            Worksheets("usram_data").Range("B102").Interior.Color = RGB(255, 0, 0)
            Worksheets("usram_data").Range("F102").Interior.Color = RGB(255, 0, 0)
            Worksheets("usram_data").Range("B103").Interior.Color = RGB(255, 0, 0)
            Worksheets("usram_data").Range("F103").Interior.Color = RGB(255, 0, 0)
            'Exit Function
        End If
        
        'check available blocks for selected device
        ' Call the logic here and check the computed product value with available blocks of selected device.
        calculate_blocks (2) ' calculate blocks for usram
        Dim available_usramblocks, cal_usramblocks As Long
        available_usramblocks = Worksheets("usram_data").Range("K3").value
        cal_usramblocks = Worksheets("usram_data").Range("Q108").value
        If cal_usramblocks <= available_usramblocks Then
        Else
            MsgBox "Invalid Configuration: No suitable configuration found. Exceeded available memory on device. "
            memory_validate = False
            Exit Function
        End If
        
        ' Module name        usram_module_name
        If usram_module_name.value = "" Then
            Dim usram_optimmode As String
            If usram_optimizemode_cb.value = Worksheets("dss_data").Range("D394").value Then
                usram_optimmode = "HSmode"
            End If
            If usram_optimizemode_cb.value = Worksheets("dss_data").Range("D395").value Then
                usram_optimmode = "LPmode"
            End If
            
            usram_module_name.value = "uSRAM_" & usram_optimmode
        End If
        If module_name_notused(usram_module_name.value, "") Then
            MsgBox "Unable to create " & """" & usram_module_name.value & """" & vbNewLine _
            & "An IP with that module name already exists."
            memory_validate = False
            Worksheets("uSRAM").Range(usram_name_str_col & ind).Interior.Color = RGB(255, 0, 0)
            'usram_module_name.value = ""
            'Exit Function
        End If
        
        ' usram rows exhausted checking in usram sheet
        check = free_row(ActiveWorkbook.Worksheets("uSRAM"), 9, 250, "M", "uSRAM")
        If check = 251 Then
            MsgBox "Rows are exhausted to create memory in uSRAM sheet."
            memory_validate = False
            Exit Function
        End If
        
    End If

    memory_validate = True    'if all are validated return true
    Exit Function
End Function

Private Function IsInteger(value As String) As Boolean
 Dim re As Object
 Set re = CreateObject("vbscript.RegExp")
 re.Pattern = "^\d+$"
 IsInteger = re.test(value)
 Set re = Nothing
End Function

Private Sub usram_optimizemode_cb_Change()

End Sub

Private Sub usram_writeP_clkfreq_Change()

End Sub
Function MPESETLSRAM(ByVal lsram_module_name_ As String, ByVal lsram_portA_depth_ As Integer, ByVal lsram_portA_width_ As Integer, ByVal lsram_portA_clkfrq_ As Double, ByVal lsram_portA_writerate_ As String, ByVal lsram_portA_enablerate_ As String, ByVal lsram_portB_depth_ As Integer, ByVal lsram_portB_width_ As Integer, ByVal lsram_portB_clkfrq_ As Double, ByVal lsram_portB_writerate_ As String, ByVal lsram_portB_enablerate_ As String, ByVal lsram_operationmode_cb_ As String, ByVal lsram_togglerate_ As String, ByVal lsram_optimizemode_cb_ As String)
        
        MultiPage1.value = 0
        lsram_module_name = lsram_module_name_
        
        lsram_operationmode_cb = lsram_operationmode_cb_
        lsram_togglerate = lsram_togglerate_
        lsram_optimizemode_cb = lsram_optimizemode_cb_

        lsram_portA_depth = lsram_portA_depth_
        lsram_portA_width = lsram_portA_width_
        lsram_portA_clkfrq = lsram_portA_clkfrq_
        lsram_portA_writerate = lsram_portA_writerate_
        lsram_portA_enablerate = lsram_portA_enablerate_

        lsram_portB_depth = lsram_portB_depth_
        lsram_portB_width = lsram_portB_width_
        lsram_portB_clkfrq = lsram_portB_clkfrq_
        lsram_portB_writerate = lsram_portB_writerate_
        lsram_portB_enablerate = lsram_portB_enablerate_
        
        memconfig_create_button_Click
         
End Function
Function MPESETuSRAM(ByVal usram_module_name_ As String, ByVal usram_writeP_depth_ As Integer, ByVal usram_writeP_width_ As Integer, ByVal usram_writeP_clkfreq_ As Double, ByVal usram_writeP_enablerate_ As String, ByVal usram_readP_depth_ As Integer, ByVal usram_readP_width_ As Integer, ByVal usram_readP_clkfreq_ As Double, ByVal usram_readP_enablerate_ As String, ByVal usram_optimizemode_cb_ As String, ByVal usram_togglerate_ As String, ByVal usram_useregisters_cb_ As String)
        
        MultiPage1.value = 1
        usram_module_name = usram_module_name_
        
        usram_optimizemode_cb = usram_optimizemode_cb_
        usram_togglerate = usram_togglerate_
        usram_useregisters_cb = usram_useregisters_cb_

        usram_writeP_depth = usram_writeP_depth_
        usram_writeP_width = usram_writeP_width_
        usram_writeP_clkfreq = usram_writeP_clkfreq_
        usram_writeP_enablerate = usram_writeP_enablerate_

        usram_readP_depth = usram_readP_depth_
        usram_readP_width = usram_readP_width_
        usram_readP_clkfreq = usram_readP_clkfreq_
        usram_readP_enablerate = usram_readP_enablerate_

        memconfig_create_button_Click
         
End Function


Attribute VB_Name = "reset_form"
Attribute VB_Base = "0{8BFA4F47-F1F4-4218-B7E0-EE291A7755FF}{6DBBB9BF-F55E-47A4-9D8B-848DF77F878C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Sub resetData()
       clear_all
       'Worksheets("Clock").Range("B12:H112").Interior.Color = RGB(255, 255, 255)
       Worksheets("Clock").Range(clock_name_str_col & "12:" & clock_enrate_col & "112").Interior.Color = RGB(255, 255, 255)
       
       'Worksheets("Logic").Range("B9:I258").Interior.Color = RGB(255, 255, 255)
       Worksheets("Logic").Range(logic_name_str_col & "9:" & logic_tgrate_col & "258").Interior.Color = RGB(255, 255, 255)
       
       'Worksheets("LSRAM").Range("B9:T250").Interior.Color = RGB(255, 255, 255)
       Worksheets("LSRAM").Range(lsram_name_str_col & "9:" & lsram_tgrate_col & "250").Interior.Color = RGB(255, 255, 255)
       
       'Worksheets("uSRAM").Range("B9:L250").Interior.Color = RGB(255, 255, 255)
       Worksheets("uSRAM").Range(usram_name_str_col & "9:" & usram_tgrate_col & "250").Interior.Color = RGB(255, 255, 255)
       
       'Worksheets("Math Block").Range("B8:K250").Interior.Color = RGB(255, 255, 255)
       Worksheets("Math Block").Range(math_name_str_col & "8:" & math_outputpipe_col & "250").Interior.Color = RGB(255, 255, 255)
       
       'Worksheets("IO").Range("B21:U721").Interior.Color = RGB(255, 255, 255)
       Worksheets("IO").Range(io_name_str_col & "21:" & io_enrate_col & "721").Interior.Color = RGB(255, 255, 255)
       
       'Worksheets("Transceiver").Range("B14:Q37").Interior.Color = RGB(255, 255, 255)
       Worksheets("Transceiver").Range(xcvr_name_str_col & "14:" & xcvr_pcie_col & "37").Interior.Color = RGB(255, 255, 255)
       
       'Worksheets("PLL & DLL").Range("B17:J24").Interior.Color = RGB(255, 255, 255)
       Worksheets("PLL & DLL").Range(pll_name_str_col & "17:" & pll_mode_col & "24").Interior.Color = RGB(255, 255, 255)
       
       'Worksheets("PLL & DLL").Range("B28:E35").Interior.Color = RGB(255, 255, 255)
       Worksheets("PLL & DLL").Range(dll_name_str_col & "28:" & dll_refclk_col & "35").Interior.Color = RGB(255, 255, 255)
       
       Worksheets("dss_data").Range("D125:D162").Interior.Color = RGB(255, 255, 255)
       Worksheets("usram_data").Range("B102:F103").Interior.Color = RGB(255, 255, 255)
End Sub

Sub resetSummary()
        Application.Run "clear_summary"
End Sub
Sub resetSnapshots()
    clear_snapshots_and_data
End Sub
Private Sub Cancel_Click()
    Unload Me
End Sub

Private Sub OK_Click()
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    If reset_data.value Then
        resetData
    ElseIf reset_settings.value Then
        resetData
        resetSummary
    ElseIf factory_reset.value Then
        resetData
        resetSummary
        resetSnapshots
    End If
    Application.Calculation = xlCalculationAutomatic
    Application.Calculate
    ComputeThermalPower
    Application.ScreenUpdating = True
    Unload Me
End Sub
Function MPE_RESET_DEFAULT(ByVal r_data As String, ByVal r_all_settings As String, ByVal r_all_settings_snapshots As String)
    
    If r_data = "TRUE" Or r_data = "True" Or r_data = "T" Or r_data = "t" Or r_data = "true" Then
        r_data = "TRUE"
    End If
    
    If r_all_settings = "TRUE" Or r_all_settings = "True" Or r_all_settings = "T" Or r_all_settings = "t" Or r_all_settings = "true" Then
        r_all_settings = "TRUE"
    End If
    
    If r_all_settings_snapshots = "TRUE" Or r_all_settings_snapshots = "True" Or r_all_settings_snapshots = "T" Or r_all_settings_snapshots = "t" Or r_all_settings_snapshots = "true" Then
        r_all_settings_snapshots = "TRUE"
    End If
    
    If r_data = "FALSE" Or r_data = "False" Or r_data = "F" Or r_data = "f" Or r_data = "false" Then
        r_data = "FALSE"
    End If
    
    If r_all_settings = "FALSE" Or r_all_settings = "False" Or r_all_settings = "F" Or r_all_settings = "f" Or r_all_settings = "false" Then
        r_all_settings = "FALSE"
    End If
    
    If r_all_settings_snapshots = "FALSE" Or r_all_settings_snapshots = "False" Or r_all_settings_snapshots = "F" Or r_all_settings_snapshots = "f" Or r_all_settings_snapshots = "false" Then
        r_all_settings_snapshots = "FALSE"
    End If
    
    'validation funtion calling
    Dim temp_res As Boolean
    temp_res = reset_script_validate(r_data, r_all_settings, r_all_settings_snapshots)
    If Not temp_res Then
        Exit Function
    End If
    
    If r_data = "TRUE" Then
        reset_data.value = True
    End If
    
    If r_all_settings = "TRUE" Then
        reset_settings.value = True
    End If
    
    If r_all_settings_snapshots = "TRUE" Then
        factory_reset.value = True
    End If
'    MsgBox "Done reset!"
    'Call ok to do reset
    OK_Click
End Function

Function reset_script_validate(ByVal reset_data As String, ByVal reset_all_settings As String, ByVal reset_all_settings_snapshots As String) As Boolean

If reset_data = "TRUE" Or reset_data = "FALSE" Then
Else
    MsgBox "Invalid 1st argument"
    reset_script_validate = False
    Exit Function
End If

If reset_all_settings = "TRUE" Or reset_all_settings = "FALSE" Then
Else
    MsgBox "Invalid 2nd argument"
    reset_script_validate = False
    Exit Function
End If

If reset_all_settings_snapshots = "TRUE" Or reset_all_settings_snapshots = "FALSE" Then
Else
    MsgBox "Invalid 3rd argument"
    reset_script_validate = False
    Exit Function
End If

'if all the 3 arguments are as expected return true
    reset_script_validate = True
End Function



INQUEST-PP=macro
