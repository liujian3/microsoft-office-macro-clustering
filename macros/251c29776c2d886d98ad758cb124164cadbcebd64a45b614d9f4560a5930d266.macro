Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "VersionInfo"
'********************************************************************************************
'*                                                                                          *
'*                              VERSION CONTROL INFORMATION                                 *
'*                                                                                          *
'********************************************************************************************


'   v0.1 - 2018-05-15 - C Wood
'   Rolled over dates from 2017

'   **********Update when done**********
'   v1.0 - 2018-05-15 - C Wood
'   Signed off and released to Live
'   ************************************

'   v0.1 - 2019-05-20 - M Eynon
'   Rolled over from 2018 and amended dates

'   v0.2 - 2019/05/07 - M Eynon
'   removed LAs 835 - 837, replaced with 838 & 839 following LA boundary change

'   v1.0 - 2019/06/03 - M Eynon
'   Signed-off and releaded to Live



Attribute VB_Name = "basExport"
Option Explicit

Public Const lFIRSTPUPILROW As Long = 21
Public Const lLASTPUPILROW As Long = 170
Public Const sVALCOL As String = "M"
Public Const sYEAR As String = "2018"
Public Const sEXT As String = "csv"

Private Function IsCellEmpty(sCellRef As String, ByRef sContainer As String) As Boolean
'Tests to see whether a cell is empty.  If so returns TRUE.
'Otherwise, the second parameter is set to the text of the cell concerned.

Dim bRetVal As Boolean
    bRetVal = False
    If IsEmpty(Range(sCellRef)) Then
        bRetVal = True
    Else
        sContainer = Range(sCellRef).Value
    End If
    IsCellEmpty = bRetVal
End Function


'Ruleset.

'If [a, b, d, e, f] != "" then C required :: #[f6] == #[countif[c21:c170]
'surname [a] as freetext
'forename [b] as freetext
'C must be validated, present, nonduplicated [UPN is missing, incomplete record - complete those fields in red,
'If upn [c] then [g||h] [Enter Result or Absence Code, Enter Check Mark or Check Outcome - Not both,
'Gender [d] = {M||F} [Incorrect gender]
'Year group[f] {1||2}

Public Function FailsValidation(ByRef sSchoolNo As String, ByRef sLEANo As String) As Boolean
'Wrapper for all validation routines. Returns TRUE if the workbook passes validation.  If the workbook fails validation,
'returns True after displaying a dialog to the user showing all issues detected.
    
    Dim sSchName As String
    Dim iNumberPupils As Integer
    Dim bFailsToValidate As Boolean
    Dim sErrMsg As String
    
    bFailsToValidate = False
    sErrMsg = vbNullString
    
    'Check that at least one pupil is recorded
    iNumberPupils = Range("F6").Value
    If iNumberPupils = 0 Then
        sErrMsg = sErrMsg & "You have not entered any pupil details" & vbNewLine
        bFailsToValidate = True
    End If

    'check for Duplicate UPNs
'    If Range("f13").Value > 0 Then
'        sErrMsg = sErrMsg & "Duplicate UPNs have been entered" & vbNewLine
'        bFailsToValidate = True
'    End If
    
    'Get school name
    If IsCellEmpty("B6", sSchName) Then
        sErrMsg = sErrMsg & "You need to enter your School Name" & vbNewLine
        bFailsToValidate = True
    End If

    'Get LA number
    If IsCellEmpty("B7", sLEANo) Then
        sErrMsg = sErrMsg & "You need to enter your LA number" & vbNewLine
        bFailsToValidate = True
    End If

    'Get Estab
    If IsCellEmpty("B8", sSchoolNo) Then
        sErrMsg = sErrMsg & "You need to enter your DfE School Number" & vbNewLine
        bFailsToValidate = True
    End If

    'Check that no pupil details are missing (SS:2016 - separated from formal validation checks for clarity)
    If Range(sVALCOL & "21").Value <> iNumberPupils Then
        If HasEmptyOrInvalidCells(Range("A" & lFIRSTPUPILROW), "You need to add missing surname", vbNullString, sErrMsg) Then
            bFailsToValidate = True
        End If
    End If

    'Missing data check - Forename
    If Range(sVALCOL & "22").Value <> iNumberPupils Then
        If HasEmptyOrInvalidCells(Range("B" & lFIRSTPUPILROW), "You need to add missing forename", vbNullString, sErrMsg) Then
            bFailsToValidate = True
        End If
    End If

    'Missing data check - UPN
    If Range(sVALCOL & "23").Value <> iNumberPupils Then
        If HasEmptyOrInvalidCells(Range("C" & lFIRSTPUPILROW), "You need to add missing UPN", vbNullString, sErrMsg) Then
            bFailsToValidate = True
        End If
    End If

    'Duplicate UPN - notice the double spacing which filters out valid UPNs.
    If Range(sVALCOL & "28").Value <> 0 Then
        If HasEmptyOrInvalidCells(Range("i" & lFIRSTPUPILROW), "You have duplicate UPNs", "  Invalid UPN ", sErrMsg) Then
            bFailsToValidate = True
        End If
    End If

    'Missing data check - Gender (note there is a separate validation for gender further on)
    If Range(sVALCOL & "24").Value <> iNumberPupils Then
        If HasEmptyOrInvalidCells(Range("D" & lFIRSTPUPILROW), "You need to add missing gender", vbNullString, sErrMsg) Then
            bFailsToValidate = True
        End If
    End If

    'Missing data check - DoB
    If Range(sVALCOL & "25").Value <> iNumberPupils Then
        If HasEmptyOrInvalidCells(Range("E" & lFIRSTPUPILROW), "You need to add missing date of birth", vbNullString, sErrMsg) Then
            bFailsToValidate = True
        End If
    End If

    'Invalid UPN check
    If HasInvalidUPNs(Range("C" & lFIRSTPUPILROW), sErrMsg) Then
        bFailsToValidate = True
    End If

    'Invalid Gender check - the double spacing before the first item filters out missing values
    If HasEmptyOrInvalidCells(Range("D" & lFIRSTPUPILROW), "Invalid Gender code - enter M (for a boy) or F (for a girl),", "  M F ", sErrMsg) Then
        bFailsToValidate = True
    End If

    'Both NM and NY submitted check
    If Range(sVALCOL & "31").Value <> 0 Then
        If HasEmptyOrInvalidCells(Range("K" & lFIRSTPUPILROW), "Check mark and check outcome have both been submitted,", " 0 1 ", sErrMsg) Then
            bFailsToValidate = True
        End If
    End If
    
    'Missing NM and NY check
    If Range(sVALCOL & "30").Value <> 0 Then
        If HasEmptyOrInvalidCells(Range("K" & lFIRSTPUPILROW), "Check mark and check outcome are missing,", " 1 2 ", sErrMsg) Then
            bFailsToValidate = True
        End If
    End If

    If bFailsToValidate Then
        MsgBox sErrMsg, vbOKOnly + vbExclamation, "Errors found in the return - cannot proceed"
    End If
    FailsValidation = bFailsToValidate
End Function

Sub CopyToNewWorksheet()
Dim wbkMain As Excel.Workbook
Dim wbkNew As Excel.Workbook
Dim wksNew As Excel.Worksheet
'format date in DOB column
    Range("E21:E170").NumberFormat = "dd/mm/yyyy;@"
    Set wbkMain = ActiveWorkbook
    Set wbkNew = Workbooks.Add
    Set wksNew = wbkNew.Worksheets(1)
    wbkMain.Worksheets("Phonics Screening Check").Range("A19:H170").Copy
    wksNew.Range("D1").PasteSpecial xlPasteValuesAndNumberFormats
    wbkMain.Worksheets("Phonics Screening Check").Range("A6:A8").Copy
    wksNew.Range("A1").PasteSpecial xlPasteValues, , , True
    wbkMain.Worksheets("Phonics Screening Check").Range("B6:B8").Copy
    wksNew.Range(Range("D65535").End(xlUp).Offset(0, -1), "A3").PasteSpecial xlPasteValues, , , True
End Sub


Sub AttemptCSVOutput(sSchoolNo As String, sLEANo As String)

'Tries to write the file as a CSV to the location of a user's choice.  Does not allow modification of the filename as this is not permitted by the KS1 specification.
    
    Dim sFileName As String
    Dim sDirName As String

    sFileName = "PHONICS_" & sLEANo & sSchoolNo & "_" & Right("2018", 2) & "." & sEXT

    If GetFolder(sDirName) Then
        ActiveWorkbook.SaveAs sDirName & sFileName, xlCSV
        MsgBox "File saved as " & sDirName & sFileName & " - click ok to close"
    Else
        MsgBox "User cancelled save operation.  You will need to re-run the code in order to export the data."
    End If
    ActiveWorkbook.Close (False)

End Sub

Public Sub MainExport()
'Main wrapper function.  Used to hold the glue code that didn't logically fit in the subprocesses.
    Dim sSchoolNo As String
    Dim sLEANo As String
    Dim sUIMessage As String
    Dim lResp As VbMsgBoxResult

    sSchoolNo = vbNullString
    sLEANo = vbNullString

    If Not FailsValidation(sSchoolNo, sLEANo) Then
        sUIMessage = "Are you ready to export the data? The next dialog will allow you to save to a location of your choice."
        lResp = MsgBox(sUIMessage, vbYesNo + vbQuestion + vbDefaultButton2)
    
        If lResp = vbYes Then
            UnprotectWB
            CopyToNewWorksheet
'            PrepareForExport
            AttemptCSVOutput sSchoolNo, sLEANo
            ProtectWB
        End If
    End If

End Sub


Attribute VB_Name = "basLibrary"
Option Explicit

Private Const WBPASSWORD As String = "Techman"

Public Sub UnprotectWB()
    ActiveSheet.Unprotect (WBPASSWORD)
End Sub

Public Sub ProtectWB()
    ActiveSheet.Protect (WBPASSWORD)
End Sub

Public Sub Dev()
    UnprotectWB
    Range("U1:AQ1").EntireColumn.Hidden = False
End Sub

Public Sub PFR()
'    Range("U1:AQ1").EntireColumn.Hidden = True
    ProtectWB
End Sub

Public Function GetFolder(ByRef sFoldername As String) As Boolean
'Replaces basSaveFileAs which was an old wrapper for comdlg32.  This wasn't pointer-safe under VBA7
'and thus failed on 64-bit builds of Office.  Now that the functionality is provided by Office VBA we can
'get rid of the old module and use this neater code.

Dim objFileD As office.FileDialog
Dim bRetVal As Boolean
    bRetVal = False
    Set objFileD = Application.FileDialog(msoFileDialogFolderPicker)
    objFileD.Title = "Select directory for output file"
    objFileD.AllowMultiSelect = False
    If objFileD.Show Then
        sFoldername = CStr(objFileD.SelectedItems(1)) & "\"
        bRetVal = True
    End If
    GetFolder = bRetVal
End Function

Public Function RangeHasText(rngCells As Excel.Range) As Boolean
'Selects a number of cells starting from sLocation and tests whether
'any of those in the relevant range have text input within them.
'Added Because Range("A2:F2").text doesn't return anything useful.
Dim vTemp As Variant
Dim bRetVal As Boolean
    bRetVal = False
    For Each vTemp In rngCells
        If Len(vTemp.Text) <> 0 Then
            bRetVal = True
            Exit For
        End If
    Next vTemp
    RangeHasText = bRetVal
End Function

Attribute VB_Name = "basValidate"
Option Explicit

Private Const CHECKVALUES = "ABCDEFGHJKLMNPQRTUVWXYZ"           'Excludes I, O, S to reduce confusion with numeric content in UPNs
Private Const CHECKVALMOD = 23                                  'Number of individual characters in $ above, used as MOD value


Public Function TestUPN(sUPN As String) As Boolean
Dim bRetVal As Boolean
Dim lChecksum As Long
Dim n As Long

' Routine created May 2015 for EYFSP workbook
' Tests UPNs against check digit algorithm.
    Application.Volatile
    
    If Len(sUPN) = 13 Then
        If InStr(Left$(CHECKVALUES, 10), Right$(sUPN, 1)) <> 0 Then  'Temporary UPN
            sUPN = Left$(sUPN, 12) & CStr((InStr(Left$(CHECKVALUES, 10), Right$(sUPN, 1)) - 1))
'            Debug.Print sUPN
        End If
        For n = 2 To 13
            If Mid$(sUPN, n, 1) >= "0" And Mid$(sUPN, n, 1) <= "9" Then
                lChecksum = lChecksum + CInt(Mid$(sUPN, n, 1)) * n
            End If
        Next n
'        Debug.Print lChecksum, lChecksum Mod 23, Mid$(CHECKVALUES, (1 + lChecksum Mod CHECKVALMOD), 1)
        bRetVal = Left$(sUPN, 1) = Mid$(CHECKVALUES, (1 + lChecksum Mod CHECKVALMOD), 1)
    End If
    TestUPN = bRetVal
End Function

Public Function HasInvalidUPNs(rngRef As Excel.Range, ByRef sErrMsg As String) As Boolean
'Cycles through the UPNs in the workbook, testing them one at a time.  Returns TRUE if validation fails.
'Ignores empty cells as this matches the behaviour of the original workbook.

Dim bRetVal As Boolean
Dim bFinished As Boolean
Dim lRow As Long
    bRetVal = False
    bFinished = False
    While Not bFinished
        If Len(rngRef.Text) <> 0 Then
            If TestUPN(rngRef.Text) = False Then
                bFinished = True
                bRetVal = True
                sErrMsg = sErrMsg & "Invalid UPN - enter a valid UPN, starting on row " & rngRef.Row & vbNewLine
            End If
        End If
        
        Set rngRef = rngRef.Offset(1, 0)
        If rngRef.Row = 171 Then
            bFinished = True
        End If
    Wend
    HasInvalidUPNs = bRetVal
End Function

Public Function HasEmptyOrInvalidCells(rngRef As Excel.Range, _
    sCellError As String, _
    sCellCriteria As String, _
    ByRef sErrMsg As String) As Boolean
'The logic held in the previous workbook was: add the contents of columns 1 through 9 of the workbook together.
'If any of these cells contained data, all of them should contain data (acceptably validated).

Dim bRetVal As Boolean
Dim bFinished As Boolean
Dim lRow As Long
    bRetVal = False
    bFinished = False
    While Not bFinished
        lRow = rngRef.Row
        If RangeHasText(Range("A" & lRow & ":I" & lRow)) Then
            If (Len(sCellCriteria) = 0 And Len(rngRef.Text) = 0) Or _
                (Len(sCellCriteria) <> 0 And InStr(sCellCriteria, " " & rngRef.Text & " ") = 0) Then  'Empty, or we have a restricted set of values and the value supplied isn't in the list
                    bFinished = True            'Short-circuit the test as there's been a failure
                    bRetVal = True
                    sErrMsg = sErrMsg & sCellError & " starting on row " & lRow & vbNewLine
            End If
        End If
        Set rngRef = rngRef.Offset(1, 0)
        If rngRef.Row = 171 Then
            bFinished = True
        End If
    Wend
    HasEmptyOrInvalidCells = bRetVal
End Function


' InQuest injected base64 decoded content
' MEV]

INQUEST-PP=macro
