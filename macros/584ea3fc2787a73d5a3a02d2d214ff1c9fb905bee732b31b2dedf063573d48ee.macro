Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Option Explicit

Private Sub CommandButton1_Click()

    UserForm1.Show vbModeless
    
End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{BDBD20C0-3963-419C-BAF1-B215A2566082}{38A055A2-0593-432E-854F-AF500C230CF3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private WithEvents WBx As Excel.Workbook
Attribute WBx.VB_VarHelpID = -1
Private WithEvents XL As Excel.Application
Attribute XL.VB_VarHelpID = -1

Private cf As clsFrmChanger

Private Const cNOT_MONITORED As String = "The active workbook is not being monitored..."
Private Const cWB_NOT_MONITORED As String = "No workbook is currently being monitored..."
Private Const cCLEAR_SELECTIONS As String = "This will clear exisitng selections - Do you want to continue...?"
Private Const cMULTIPLE_CELLS As String = "This procedure only accepts single cell ranges..."
Private Const cALREADY_ADDED As String = "This cell has already been defined..."
Private Const cCONFIRM As String = "Confirm"
Private Const cNO_D_CLICK As String = "Double clicking the list is not being monitored..."
Private Const cNOTHING As String = "Nothing to do"
Private Const cPLEASE_SELECT As String = "Please select..."



Private Sub cboWB_Change()

    SetWB cboWB.List(cboWB.ListIndex)

End Sub

Private Sub cboWB_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)

    If cboWB.ListIndex > 0 Then
        Application.Workbooks(cboWB.List(cboWB.ListIndex)).Activate
    End If

End Sub

Private Sub cboWS_Click()

    WBx.Sheets(cboWS.List(cboWS.ListIndex)).Activate

End Sub

Private Sub cmdExport_Click()

    MsgBox "There is no code here as the output format is not known...", vbInformation, cNOTHING
    
End Sub

Private Sub lst_DblClick(ByVal Cancel As MSForms.ReturnBoolean)

    If chkLClick.Value = True Then
        AddToList ActiveWorkbook.ActiveSheet, ActiveCell
    Else
        MsgBox cNO_D_CLICK, vbInformation, cNOTHING
    End If


End Sub
'
Private Sub UserForm_Initialize()

    Set cf = New clsFrmChanger

    With cf
        Set .Form = Me
        .Sizeable = True
        .SmallCaption = True
        .ShowMaximizeBtn = False
        .ShowMinimizeBtn = False
    End With

    Set XL = Excel.Application
    Set WBx = ActiveWorkbook

    LoadWBs
    cboWB.ListIndex = 0

    Loaditems

End Sub

Private Sub UserForm_Resize()

    On Error GoTo ErrHandler

    If Me.Width > 320 Then
        Me.Width = 320
        Exit Sub
    End If

    fraCell.Move 3, fraCell.Top, Me.InsideWidth - 6, Me.InsideHeight - 3 - fraCell.Top

    With cmdExport
        .Move fraCell.InsideWidth - .Width - 3, fraCell.InsideHeight - .Height - 3
        .Visible = .Left > 0
    End With

    With cboWB
        .Width = fraCell.InsideWidth - .Left
        .Visible = .Width > 9
    End With

    With cboWS
        .Width = cboWB.Width
        .Visible = .Width > 9
    End With

    lblArrow.Move fraCell.InsideWidth - lblArrow.Width - 1, cmdExport.Top + ((cmdExport.Height - lblArrow.Height) \ 2)
    lblArrow.Visible = Not cmdExport.Visible

    lst.Move 3, lst.Top, fraCell.InsideWidth - 6, cmdExport.Top - lst.Top - 4

    Exit Sub

ErrHandler:

    Debug.Assert False

End Sub
Private Sub LoadWBs()

    '// Loads a list of all active workbooks to the drop-down
    Dim Wb As Excel.Workbook

    '// Essential if events are being turned off. Without this, Excel will
    '// not respond to anything - clicks, menu selections, whatever
    On Error GoTo ErrHandler
    Application.EnableEvents = False

    '// Shorthand way to refer to an object over multiple line
    With cboWB

        '// remove everything
        .Clear

        '// A default item
        .AddItem cPLEASE_SELECT

        '// Add each loaded workbook
        For Each Wb In Application.Workbooks
            .AddItem Wb.Name
        Next

    End With

ErrHandler:

    '// Not interested in errors - here to turn EventHandling back on only
    Application.EnableEvents = True

End Sub
Private Sub DeleteWBs(strName As String)

    '// Deletes an item from the list.
    '// simply loops through the dropdown comparing names
    Dim iTemp As Integer

    For iTemp = 0 To lst.ListCount - 1

        If lst.List(iTemp) = strName Then
            lst.RemoveItem (iTemp)
        End If
    Next

End Sub
Private Sub Loaditems()

    '// Loads the list of items to use as heading.
    '// Defined, starting from cell B9, Sheet 1
    '// of this workbook
    Dim r As Excel.Range

    Set r = ThisWorkbook.Sheets("Sheet1").Range("B9")

    '// empty the drop down
    lst.Clear

    '// and simply loop until a blank cell is found
    Do Until r.Value = vbNullString

        lst.AddItem r.Value
        Set r = r.Offset(1)
    Loop

End Sub
Private Sub LoadSheets()

    '// Loads the sheets for the workbook selecte din the Workbook dropdown
    Dim ws As Excel.Worksheet

    cboWS.Clear

    For Each ws In WBx.Worksheets
        cboWS.AddItem ws.Name
    Next
    cboWS.Enabled = True

    SetWSList

End Sub
Private Sub SetWSList()

    '// Sets the worksheet drop down to display the active sheet.
    '// Info only - it doesn't really do anything else
    Dim iTemp As Integer

    '// same as before, must have if events are turned off
    On Error GoTo ErrHandler
    Application.EnableEvents = False

    For iTemp = 0 To cboWS.ListCount - 1

        If cboWS.List(iTemp) = WBx.ActiveSheet.Name Then
            cboWS.ListIndex = iTemp
            Exit For
        End If
    Next

ErrHandler:

    Application.EnableEvents = True

End Sub

Private Function AddToList(Sh As Object, Target As Excel.Range) As Boolean

    '// There is a workbook to monitor
    If Not WBx Is Nothing Then

        '// And it's name is the same as the activeworkbook
        If WBx.Name = Sh.Parent.Name Then

            If Target.Cells.Count = 1 Then

                '// If nothing selected in the list, then
                '// select item 0
                If lst.ListIndex = -1 Then
                    lst.ListIndex = 0
                End If

                '// Check if this cell aready added to list
                If AlreadyAdded(Sh.Name, Target.Address) Then
                    MsgBox cALREADY_ADDED, vbInformation, cNOTHING

                Else
                    '// Add details
                    lst.List(lst.ListIndex, 1) = Sh.Parent.Name
                    lst.List(lst.ListIndex, 2) = Sh.Name
                    lst.List(lst.ListIndex, 3) = Target.Address

                    '// Check if the Export button should be enabled
                    cmdExport.Enabled = ListCount() = lst.ListCount
                    
                    AddToList = True
                    
                End If
            Else
                MsgBox cMULTIPLE_CELLS, vbInformation, cNOTHING
            End If
        Else
            MsgBox cNOT_MONITORED, vbInformation, cNOTHING
        End If
    Else
        MsgBox cWB_NOT_MONITORED, vbInformation, cNOTHING
    End If

End Function
Private Sub SetWB(strName As String)

    If Not WBx Is Nothing Then
        If WBx.Name <> cboWB.List(cboWB.ListIndex) Then

            If ListCount() > 0 Then
                If MsgBox(cCLEAR_SELECTIONS, vbQuestion + vbYesNo + vbDefaultButton2, cCONFIRM) = vbYes Then
                    Loaditems
                End If
            End If

        End If
    End If

    If cboWB.ListIndex > 0 Then
        Set WBx = Application.Workbooks(strName)
        Application.Workbooks(strName).Activate   'WBx.Activate

        LoadSheets

    End If

End Sub

Private Function ListCount() As Long

    Dim iTemp As Integer
    Dim lngResult As Long

    For iTemp = 0 To lst.ListCount - 1
        lngResult = lngResult + IIf(lst.List(iTemp, 1) <> vbNullString, 1, 0)
    Next

    ListCount = lngResult

End Function


Private Sub WBx_SheetActivate(ByVal Sh As Object)

    SetWSList

End Sub

Private Sub XL_NewWorkbook(ByVal Wb As Workbook)

    LoadWBs

End Sub


Private Sub XL_SheetBeforeDoubleClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)

    '// If monitoring double clicks on sheet
    If optDoubleClicks.Value = True Then

        '// But it might also be monitoring Selection changes...
        '// and so the cell might already have been added by that event
        '// So check if it exists in the list
        
        If Not AlreadyAdded(Sh.Name, Target.Address) Then
            '// Added successfully to list
            If AddToList(Sh, Target) Then
    
                '// Move selection to next item ready for
                '// next d/click
                If lst.ListIndex < lst.ListCount - 1 Then
                    lst.ListIndex = lst.ListIndex + 1
                End If
            End If
        Else
            MsgBox cALREADY_ADDED, vbInformation, cNOTHING
            
        End If
    Else
        MsgBox cNOT_MONITORED, vbInformation, cNOTHING
    End If

    '// Cancel the D/Click
    Cancel = True

End Sub

Private Sub XL_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Range)

    If optSelection.Value = True Then
        AddToList Sh, Target
    End If

End Sub

Private Sub XL_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)

    DeleteWBs Wb.Name

End Sub

Private Sub XL_WorkbookOpen(ByVal Wb As Workbook)

    LoadWBs

End Sub
Private Function AlreadyAdded(strWS As String, strAddress As String) As Boolean

    Dim iTemp As Integer

    '// Loop through all items in the list
    For iTemp = 0 To lst.ListCount - 1

        '// if col 2 = sheet name
        If lst.List(iTemp, 2) = strWS Then

            '// If Col 3 = cell address
            If lst.List(iTemp, 3) = strAddress Then

                '// This cell has already been added
                AlreadyAdded = True
                
                Exit For
            End If
        End If
    Next

End Function
Attribute VB_Name = "clsFrmChanger"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Compare Text

'//**************************************************************************
'//
'// MODULE NAME:     USERFORM WINDOW STYLES
'//
'// DESCRIPTION:     Changes userform's window styles to give different visual effects
'//
'// THIS MODULE:     Changes the userform's styles so it can be resized/maximised/minimized, etc.
'//
'// UPDATES:
'//  DATE            COMMENTS
'//  11 Jan 2005     Changed the way 'showInTaskBar'// works, fixing a bug
'//
'//**************************************************************************

'//Windows API calls to do all the dirty work!
Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
Private Declare Function GetSystemMenu Lib "user32" (ByVal hwnd As Long, ByVal bRevert As Long) As Long
Private Declare Function DeleteMenu Lib "user32" (ByVal hMenu As Long, ByVal nPosition As Long, ByVal wFlags As Long) As Long
Private Declare Function ShowWindow Lib "user32" (ByVal hwnd As Long, ByVal nCmdShow As Long) As Long
Private Declare Function EnableWindow Lib "user32" (ByVal hwnd As Long, ByVal fEnable As Long) As Long
Private Declare Function DrawMenuBar Lib "user32" (ByVal hwnd As Long) As Long
Private Declare Function SetFocus Lib "user32" (ByVal hwnd As Long) As Long
Private Declare Function ExtractIcon Lib "shell32.dll" Alias "ExtractIconA" (ByVal hInst As Long, ByVal lpszExeFileName As String, ByVal nIconIndex As Long) As Long
Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Integer, ByVal lParam As Long) As Long
Private Declare Function LockWindowUpdate Lib "user32" (ByVal hWndLock As Long) As Long
Private Declare Function SetWindowPos Lib "user32" (ByVal hwnd As Long, ByVal hWndInsertAfter As Long, ByVal X As Long, ByVal Y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long
Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long

Private Declare Function SetParent Lib "user32" (ByVal hWndChild As Long, ByVal hWndNewParent As Long) As Long

Private Declare Function SetLayeredWindowAttributes Lib "user32" (ByVal hwnd As Long, ByVal crey As Byte, ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long

Private Declare Function ReleaseCapture Lib "user32" () As Long

'//  Constants for SetWindowPos hWndInsertAfter Parameter
Private Const HWND_TOP = 0
Private Const HWND_BOTTOM = 1
Private Const HWND_NOTOPMOST = -2
Private Const HWND_TOPMOST = -1

'// Constants for SetWindowPos wFlags Parameter
Private Const SWP_NOACTIVATE = &H10
Private Const SWP_NOCOPYBITS = &H100
Private Const SWP_NOMOVE = &H2
Private Const SWP_NOOWNERZORDER = &H200
Private Const SWP_NOREDRAW = &H8
Private Const SWP_NOSIZE = &H1
Private Const SWP_SHOWWINDOW = &H40

'//Lots of window styles !!!
Private Const GWL_STYLE                   As Long = (-16)       '//The offset of a window's style
Private Const GWL_EXSTYLE                 As Long = (-20)       '//The offset of a window's extended style
Private Const WS_CAPTION                  As Long = &HC00000    '// style to add a titlebar
Private Const WS_SYSMENU                  As Long = &H80000     '// style to add a system menu
Private Const WS_THICKFRAME               As Long = &H40000     '// style to add a sizable frame
Private Const WS_MINIMIZEBOX              As Long = &H20000     '// style to add a Minimize box on the title bar
Private Const WS_MAXIMIZEBOX              As Long = &H10000     '// style to add a Maximize box to the title bar
Private Const WS_EX_APPWINDOW             As Long = &H40000     '// Application Window: shown on taskbar
Private Const WS_EX_TOOLWINDOW            As Long = &H80        '// Tool Window: small titlebar

'// Window style for transparency
Private Const WS_EX_LAYERED = &H80000
'// Added alpha blend factor flag to control transparency
Private Const LWA_ALPHA = &H2

'// Constants to support captionless drag
Private Const WM_NCLBUTTONDOWN = &HA1                 '//left button down
Private Const WM_NCRBUTTONDOWN = &HA4                 '//right button down
Private Const HTCAPTION = 2

'//Constant to identify the Close menu item
Private Const SC_CLOSE                    As Long = &HF060

'//Constants for hide or show a window
Private Const SW_HIDE                     As Long = 0
Private Const SW_SHOW                     As Long = 5

'//Constants for Windows messages
Private Const WM_SETICON = &H80
'//Variables to store the various selections/options
Dim mbSizeable As Boolean       '// Resizable form
Dim mbCaption As Boolean        '// Show/Hide caption bar
Dim mbIcon As Boolean           '// Icon in title bar/
Dim mbMaximize As Boolean       '// Max button visible
Dim mbMinimize As Boolean       '// Min button visible
Dim mbSysMenu As Boolean        '// System menu visible
Dim mbCloseBtn As Boolean       '// Close button visible
Dim mbAppWindow As Boolean      '// Show App window on Toolbar
Dim mbToolWindow As Boolean     '// Half height caption
Dim mbModal As Boolean          '// Flip Modal/Modeless without unloading
'// Variable to handle opacity
Dim miOpacity                             As Integer

Dim moForm                                As Object
Dim mhWndForm                             As Long

'//Procedure to set the form's icon
Private Sub ChangeIcon()

   Dim hIcon                              As Long

   On Error Resume Next

   If mhWndForm <> 0 Then

'      Err.Clear
'      If msIconPath = "" Then
'         hIcon = 0
'      ElseIf Dir(msIconPath) = "" Then
'         hIcon = 0
'      ElseIf Err.Number <> 0 Then
'         hIcon = 0
'      ElseIf Not mbIcon Then
'         '//Get the icon from the source
'         hIcon = ExtractIcon(0, msIconPath, 0)
'      Else
'         hIcon = 0
'      End If
'
'      'set the big (32x32) and small (16x16) icons
'      SendMessage mhWndForm, WM_SETICON, True, hIcon
'      SendMessage mhWndForm, WM_SETICON, False, hIcon
   End If

End Sub

'set the class's initial properties to be those of a default userform
Private Sub Class_Initialize()
   
   mbCaption = True
   mbSysMenu = True
   mbCloseBtn = True
   '// Window is completely opaque)
'   miOpacity = 255
End Sub

'//Procedure to set or clear a bit from a style flag
Private Sub SetBit(ByRef lStyle As Long, ByVal lBit As Long, ByVal bOn As Boolean)
   If bOn Then
      lStyle = lStyle Or lBit
   Else
      lStyle = lStyle And Not lBit
   End If
End Sub

'//Procedure to set the form's window style
Private Sub SetFormStyle()

   Dim lStyle As Long, hMenu              As Long

   '//Have we got a form to set?
   If mhWndForm = 0 Then Exit Sub

   '//Get the basic window style
   lStyle = GetWindowLong(mhWndForm, GWL_STYLE)

   '//Build up the basic window style flags for the form
   SetBit lStyle, WS_CAPTION, mbCaption
   SetBit lStyle, WS_SYSMENU, mbSysMenu
   SetBit lStyle, WS_THICKFRAME, mbSizeable
   SetBit lStyle, WS_MINIMIZEBOX, mbMinimize
   SetBit lStyle, WS_MAXIMIZEBOX, mbMaximize

   'set the basic window styles
   SetWindowLong mhWndForm, GWL_STYLE, lStyle

   '//Get the extended window style
   lStyle = GetWindowLong(mhWndForm, GWL_EXSTYLE) ' Or WS_EX_LAYERED

   '//Build up and set the extended window style
   SetBit lStyle, WS_EX_APPWINDOW, mbAppWindow
   SetBit lStyle, WS_EX_TOOLWINDOW, mbToolWindow

   SetWindowLong mhWndForm, GWL_EXSTYLE, lStyle
'   SetLayeredWindowAttributes mhWndForm, 0, miOpacity, LWA_ALPHA

   '//Handle the close button differently
   If mbCloseBtn Then
      '//We want it, so reset the control menu
      hMenu = GetSystemMenu(mhWndForm, 1)
   Else
      '//We don'//t want it, so delete it from the control menu
      hMenu = GetSystemMenu(mhWndForm, 0)
      DeleteMenu hMenu, SC_CLOSE, 0&
   End If

   '//Update the window with the changes
   DrawMenuBar mhWndForm
   SetFocus mhWndForm

End Sub
Public Sub FadeIN()
   
   miOpacity = 0
   Dim iTemp As Integer
   
   SetLayeredWindowAttributes mhWndForm, 0, miOpacity, LWA_ALPHA
   
   For iTemp = 0 To 255
      SetLayeredWindowAttributes mhWndForm, 0, CByte(iTemp), LWA_ALPHA
      DoEvents
   Next
   
End Sub
Public Sub ForeGround()

   Dim hwnd                               As Long
   hwnd = FindWindow(vbNullString, moForm.Caption)

   If hwnd > 0 Then
      SetForegroundWindow hwnd
   End If
   
End Sub

'//Allow the calling code to tell us which form to handle
Public Property Set Form(oForm As Object)

'//Get the userform's window handle
   If Val(Application.Version) < 9 Then
      mhWndForm = FindWindow("ThunderXFrame", oForm.Caption)   '//XL97
   Else
      mhWndForm = FindWindow("ThunderDFrame", oForm.Caption)   '//XL2000+
   End If

   '//Remember the form for later
   Set moForm = oForm

   '//set the form's style
   SetFormStyle

   '//Update the form's icon
   ChangeIcon

   '//Update the taskbar visibility
   If mbAppWindow Then ShowTaskBarIcon = True

End Property
Public Property Get Handle() As Long

   Handle = mhWndForm

End Property
'Public Property Get IconPath() As String
'   IconPath = msIconPath
'End Property
'
'Public Property Let IconPath(sNewPath As String)
'   msIconPath = sNewPath
'   ChangeIcon
'   SetFormStyle
'End Property

Public Property Get Modal() As Boolean
   Modal = mbModal
End Property

'//**************************************************************
'// Property procedures to get and set the form's window styles
'//**************************************************************

Public Property Let Modal(bModal As Boolean)
   mbModal = bModal

   '//Make the form modal or modeless by enabling/disabling Excel itself
   EnableWindow FindWindow("XLMAIN", Application.Caption), Abs(CInt(Not mbModal))
   
End Property

Public Function OnTop(bOnTop As Boolean) As Boolean

   Dim hwnd                               As Long
   hwnd = FindWindow(vbNullString, moForm.Caption)

   If hwnd > 0 Then
      If bOnTop Then
         SetWindowPos hwnd, HWND_TOPMOST, 0, 0, 0, 0, _
                      SWP_NOACTIVATE Or SWP_SHOWWINDOW Or SWP_NOMOVE Or SWP_NOSIZE
      Else
         SetWindowPos hwnd, HWND_NOTOPMOST, 0, 0, 0, 0, _
                      SWP_NOACTIVATE Or SWP_SHOWWINDOW Or SWP_NOMOVE Or SWP_NOSIZE
      End If
   Else
      OnTop = False
   End If
End Function

'Public Property Get Opacity() As Integer
'   Opacity = miOpacity
'End Property
'
'Public Property Let Opacity(iOpacity As Integer)
'   miOpacity = iOpacity
'   SetFormStyle
'End Property

'//**************************************************************
'// Private procedures to perform the updates
'//**************************************************************
'// Procedure to make form draggable even without the caption
Public Sub SetDraggable()
   Dim lRetVal                            As Long
   Call ReleaseCapture
   'send a '//left mouse button down on caption'//-message to the form
   lRetVal = SendMessage(mhWndForm, WM_NCLBUTTONDOWN, HTCAPTION, 0)
End Sub

'Public Sub SetOpacity(bytOpacity As Byte)
'
'   Dim hwnd                               As Long
'
'   miOpacity = bytOpacity
'   hwnd = FindWindow("ThunderDFrame", moForm.Caption)
'   Call SetWindowLong(hwnd, GWL_EXSTYLE, GetWindowLong(hwnd, GWL_EXSTYLE) Or WS_EX_LAYERED)
'   Call SetLayeredWindowAttributes(hwnd, 0, bytOpacity, LWA_ALPHA)
'
'End Sub

Public Property Get ShowCaption() As Boolean
   ShowCaption = mbCaption
End Property

Public Property Let ShowCaption(bCaption As Boolean)
   mbCaption = bCaption
   SetFormStyle
End Property

Public Property Get ShowCloseBtn() As Boolean
   ShowCloseBtn = mbCloseBtn
End Property

Public Property Let ShowCloseBtn(bCloseBtn As Boolean)
   mbCloseBtn = bCloseBtn
   SetFormStyle
End Property

Public Property Get ShowIcon() As Boolean
   ShowIcon = (mbIcon <> 1)
End Property

Public Property Let ShowIcon(bIcon As Boolean)
   mbIcon = Not bIcon
   ChangeIcon
   SetFormStyle
End Property

Public Property Get ShowMaximizeBtn() As Boolean
   ShowMaximizeBtn = mbMaximize
End Property

Public Property Let ShowMaximizeBtn(bMaximize As Boolean)
   mbMaximize = bMaximize
   SetFormStyle
End Property

Public Property Get ShowMinimizeBtn() As Boolean
   ShowMinimizeBtn = mbMinimize
End Property

Public Property Let ShowMinimizeBtn(bMinimize As Boolean)
   mbMinimize = bMinimize
   SetFormStyle
End Property

Public Property Get ShowSysMenu() As Boolean
   ShowSysMenu = mbSysMenu
End Property

Public Property Let ShowSysMenu(bSysMenu As Boolean)
   mbSysMenu = bSysMenu
   SetFormStyle
End Property

Public Property Get ShowTaskBarIcon() As Boolean
   ShowTaskBarIcon = mbAppWindow
End Property

Public Property Let ShowTaskBarIcon(bAppWindow As Boolean)

   mbAppWindow = bAppWindow

   '//When showing/hiding the task bar icon, we have to hide and reshow the form
   '//to get Windows to update the task bar
   If mhWndForm <> 0 Then
      '//Freeze the form, to avoid flicker when hiding/showing it
      LockWindowUpdate mhWndForm

      '//Enable the Excel window, so we don'//t lose focus
      EnableWindow FindWindow("XLMAIN", Application.Caption), True

      '//Hide the form
      ShowWindow mhWndForm, SW_HIDE

      '//Update the style bits
      SetFormStyle

      '//Reshow the userform
      ShowWindow mhWndForm, SW_SHOW

      '//Unfreeze the form
      LockWindowUpdate 0&

      'set the Excel window's enablement to the correct choice
      EnableWindow FindWindow("XLMAIN", Application.Caption), Abs(CInt(Not mbModal))
   End If

End Property

Public Property Get Sizeable() As Boolean
   Sizeable = mbSizeable
End Property

Public Property Let Sizeable(bSizeable As Boolean)
   mbSizeable = bSizeable
   SetFormStyle
End Property

Public Property Get SmallCaption() As Boolean
   SmallCaption = mbToolWindow
End Property

Public Property Let SmallCaption(bToolWindow As Boolean)
   mbToolWindow = bToolWindow
   SetFormStyle
End Property

Public Sub Parent()

   SetParent mhWndForm, 0&

End Sub
Public Sub LockUpdate(bLock As Boolean)

   LockWindowUpdate IIf(bLock, mhWndForm, 0)
   
End Sub

' InQuest injected base64 decoded content
' x)br

INQUEST-PP=macro
