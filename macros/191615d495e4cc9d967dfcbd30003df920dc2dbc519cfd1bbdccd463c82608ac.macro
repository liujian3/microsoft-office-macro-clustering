Attribute VB_Name = "Module1"
Public Const FAMILYSEQUENCE As String = "Enrollment Sequence #"
Public Const DOB As String = "DOB"
Public Const SSN As String = "SSN"
Public Const RELATION As String = "Relation"
Public Const HOURSWORKED As String = "Hours Worked Per Week"
Public Const ANNUALSALARY As String = "Annual Salary"
Public Const HIREDATE As String = "Date of Hire"
Public Const FIRSTNAME As String = "First Name"
Public Const LASTNAME As String = "Last Name"
Public Const GENDER As String = "Gender"
Public Const ADDRESS1 As String = "Address1"
Public Const CITY As String = "City"
Public Const STATE As String = "State"
Public Const ZIP As String = "Zip Code"
Public Const ENROLLDATE As String = "Enrollment date*"
Public Const COVERAGEDATE As String = "Proposed Coverage Effective Date"
Public Const FIRSTBILLDATE As String = "First Bill Date"
Public Const SIGNATURESTATE As String = "State of Signature (State enrolled)"
    
'Product
Public Const FACEAMOUNT = "Face Amount"
Public Const MONTHLYPREMIUM = "Monthly Premium Amount"
Public Const BENEFITOPTION = "Benefit Option A*"
Public Const CHILDTERMRIDER = "Child Level Term Rider (CTR)"
Public Const TOBACCO As String = "Used tobacco products*"
Public Const IFAPPLYINGFOR As String = "If applying for spouse and or child*"
Public Const IFYESDISABILITY As String = "If yes answer to disability*"
Public Const RESIDENTSOF As String = "For Residents of*"
Public Const RESIDENTSIN As String = "For Residents in*"
Public Const ASTHEAGENT As String = "As the agent I certify*"

'LTC
Public Const LTCPROTECT As String = "Protection against unintended lapse*"
Public Const LTCDOYOU As String = "Do you have a Long Term Care Policy*"
Public Const LTCDIDYOU As String = "Did you have a Long Term Care Insurance Policy*"
Public Const LTCMEDICAID As String = "*Currently covered by Medicaid*"
Public Const LTCREPLACE As String = "Do you intend to replace*"
Public Const LTCHASANY As String = "*Ever been declined, postponed or offered*"
Public Const LTCICERTIFY As String = "I certify that a life insurance illustration*"

'Beneficiary
Public Const BEN1LASTNAME = "Primary Beneficiary Last Name"
Public Const BEN1FIRSTNAME = "Primary Beneficiary First Name"
Public Const BEN1RELATIONSHIP = "Beneficiary Relationship"

Public familySequenceIndex As Integer
Public dobIndex As Integer
Public relationIndex As Integer
Public ssnIndex As Integer
Public hoursWorkedIndex As Integer
Public annualSalaryIndex As Integer
Public hireDateIndex As Integer
Public firstNameIndex As Integer
Public lastNameIndex As Integer
Public enrollDateIndex As Integer
Public coverageDateIndex As Integer
Public firstBillDateIndex As Integer
Public genderIndex As Integer
Public addressIndex As Integer
Public cityIndex As Integer
Public stateIndex As Integer
Public zipIndex As Integer
Public signatureStateIndex As Integer
Public asTheAgentIndex As Integer

'Product
Public faceAmountIndex As Integer
Public monthlyPremiumIndex As Integer
Public benefitOptionIndex As Integer
Public childTermRiderIndex As Integer
Public tobaccoIndex As Integer
Public ifApplyingForIndex As Integer
Public ifYesDisabilityIndex As Integer
Public residentsOfIndex As Integer
Public residentsInIndex As Integer

Public ltcProtectIndex As Integer
Public ltcDoYouIndex As Integer
Public ltcDidYouIndex As Integer
Public ltcMedicaidIndex As Integer
Public ltcReplaceIndex As Integer
Public ltcHasAnyIndex As Integer
Public ltcICertifyIndex As Integer

'Beneficiary
Public ben1LastNameIndex As Integer
Public ben1FirstNameIndex As Integer
Public ben1RelationshipIndex As Integer


Sub Validate_Click()
    
    If IsSpreadsheetSetupValid("C3") = False Then
       Exit Sub
    End If
    
    If ValidateWorksheet = False Then
        Range("C3").Value = "SPREADSHEET HAS ERRORS"
        Range("C3").Font.Color = vbWhite
        Range("C3:D3").Interior.Color = vbRed
    Else
        MsgBox "Nice work! There are no errors on this spreadsheet.", vbOKOnly & vbInformation, "Clean Spreadsheet"
        Range("C3").Value = "SPREADSHEET IS VALID"
        Range("C3").Font.Color = vbBlack
        Range("C3:D3").Interior.Color = vbGreen
    End If
    
End Sub

Function IsSpreadsheetSetupValid(messageCell As String) As Boolean

    If ActiveSheet.ProtectContents = True Then
        'Cell Formatting must be allowed for Protected Worksheets
        If ActiveSheet.Protection.AllowFormattingCells = False Then
            strMessage = "Validation cannot be performed on this spreadsheet. Please inform your contact at Transamerica." + vbCrLf + vbCrLf + "Error: Cell formatting is locked."
            MsgBox strMessage, vbOKOnly + vbCritical, "Invalid Setup"
            IsSpreadsheetSetupValid = False
            Exit Function
        End If
        
        'The validation cell needs to be Unlocked in order for the "Successful Validation" message to be updated
        If Range(messageCell).Locked = True Then
            strMessage = "Validation message cannot be updated on this spreadsheet. Please inform your contact at Transamerica. Validation will continue." + vbCrLf + vbCrLf + "Error: " + messageCell + " is locked."
            MsgBox strMessage, vbOKOnly + vbInformation, "Invalid Setup"
        End If
    End If
    
    IsSpreadsheetSetupValid = True
    
End Function

Function ValidateWorksheet() As Boolean

    Dim blnRecordsFound As Boolean
    blnRecordsFound = False
    
    Dim familyEmployeeRow As Integer
    Dim familySpouseRow As Integer
    Dim familyDependentRow As Integer
    
    'Find all the columns using their Headers
    FindColumnsByName
    
    'Find the last row with data in Columns A-D
    Dim lastRow As Integer
    Columns("A:D").Select
    lastRow = Selection.Find("*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row
    
    'Verify required header fields
    Dim offeringLTC As String
    If lastRow >= 11 Then
        Range("L4").Select
        If IsEmpty(ActiveCell) Then
            MsgBox "Please select a value for 'Offering LTC'.", vbOKOnly Or vbCritical, "Missing Data"
            ActiveCell.Select
            ValidateWorksheet = False
            Exit Function
        Else
            offeringLTC = ActiveCell.Value
        End If
    End If
    
    Dim domicileState As String
    If lastRow >= 11 Then
        Range("L6").Select
        If IsEmpty(ActiveCell) Then
            MsgBox "Please select a value for 'Domicile State'.", vbOKOnly Or vbCritical, "Missing Data"
            ActiveCell.Select
            ValidateWorksheet = False
            Exit Function
        Else
            domicileState = ActiveCell.Value
        End If
    End If
    
    'Starting point for Employee data
    Range("A11").Select
    
    For I = 11 To lastRow
        'If any of the first four columns have data then process this row
        If Not IsEmpty(ActiveCell) Or _
           Not IsEmpty(ActiveCell.Offset(0, 1).Value) Or _
           Not IsEmpty(ActiveCell.Offset(0, 2).Value) Or _
           Not IsEmpty(ActiveCell.Offset(0, 3).Value) Then

            blnRecordsFound = True
                    
            'Family Sequence Number is required before proceeding
            If IsRequiredFieldPresent(familySequenceIndex - 1, FAMILYSEQUENCE, False) = False Then
                ValidateWorksheet = False
                Exit Function
            End If

            'Find the Employee record for this Family Sequence Number
            familyEmployeeRow = GetFamilyRow(ActiveCell.Value, "E", relationIndex)
            If familyEmployeeRow <= -1 Then
               MsgBox "No Employee was found for '" + FAMILYSEQUENCE + "' " + CStr(ActiveCell.Value) + ".", vbOKOnly Or vbCritical, "Missing Data"
               ActiveCell.Select
               ValidateWorksheet = False
               Exit Function
            End If
                    
            Dim strRelation As String
            strRelation = ActiveCell.Offset(0, relationIndex - 1).Value
            
            'Check for duplicate records for Employee and Spouse
            If UCase(strRelation = "E") Or UCase(strRelation = "S") Then
                If IsDuplicate(ActiveCell.Value, strRelation, relationIndex) = True Then
                    ValidateWorksheet = False
                    Exit Function
                End If
            End If
                    
            'Clean and format fields
            RemoveSpecialCharacters (firstNameIndex - 1)
            RemoveSpecialCharacters (lastNameIndex - 1)
            RemoveSpecialCharacters (addressIndex - 1)
            RemoveSpecialCharacters (cityIndex - 1)
            RemoveSpecialCharacters (ifYesDisabilityIndex - 1)
            RemoveSpecialCharacters (ben1LastNameIndex - 1)
            RemoveSpecialCharacters (ben1FirstNameIndex - 1)
            
            ConvertToUpper (relationIndex - 1)
            ConvertToUpper (genderIndex - 1)
            ConvertToUpper (stateIndex - 1)
            DateAdd1 (coverageDateIndex - 1)
            
            'Verify required fields
            If AreRequiredFieldsPresent() = False Then
                ValidateWorksheet = False
                Exit Function
            End If
                                                                                    
            'Copy data from Employee level to the Spouse and Dependents
            If CopyValuesFromEmployee(strRelation, familyEmployeeRow) = False Then
                ValidateWorksheet = False
                Exit Function
            End If
                                                              
            'Verify fields that are required for Employees only
            If UCase(strRelation) = "E" Then
                If AreEmployeeRequiredFieldsPresent() = False Then
                    ValidateWorksheet = False
                    Exit Function
                End If
            End If
                                                                                         
            'Format fields
            If FormatFields() = False Then
                ValidateWorksheet = False
                Exit Function
            End If
            
            If AreDatesValid(enrollDateIndex - 1, coverageDateIndex - 1) = False Then
                ValidateWorksheet = False
                Exit Function
            End If
            
                        'Verify that Benefit does not excede 5 x salary rule
            If IsBenefitValid(faceAmountIndex - 1) = False Then
                ValidateWorksheet = False
                Exit Function
            End If
                              
            'Validate individual products
            If IsProductValid(domicileState, strRelation) = False Then
                ValidateWorksheet = False
                Exit Function
            End If
            
            If strRelation = "E" Then
                If IsLTCValid(offeringLTC) = False Then
                    ValidateWorksheet = False
                    Exit Function
                End If
            
                If IsBeneficiaryValid() = False Then
                    ValidateWorksheet = False
                    Exit Function
                End If
            End If
        End If
        
       ' Step down 1 row from present location.
       ActiveCell.Offset(1, 0).Select
    Next

    If blnRecordsFound = True Then
        If AreHeaderFieldsValid = False Then
            ValidateWorksheet = False
            Exit Function
        End If
    
        ValidateWorksheet = True
    Else
        MsgBox "No records were found.", vbOKOnly Or vbCritical, "Empty Spreadsheet"
        End
    End If
    
End Function

Function AreHeaderFieldsValid() As Boolean

    'Verify required header fields
    Range("C4").Select
    If IsEmpty(ActiveCell) Then
        MsgBox "Please enter a value for 'Group Name'.", vbOKOnly Or vbCritical, "Missing Data"
        ActiveCell.Select
        AreHeaderFieldsValid = False
        Exit Function
    End If
    
    Range("H4").Select
    If IsEmpty(ActiveCell) Then
        MsgBox "Please enter a value for 'Agent Name'.", vbOKOnly Or vbCritical, "Missing Data"
        ActiveCell.Select
        AreHeaderFieldsValid = False
        Exit Function
    End If
    
    Range("H6").Select
    If IsEmpty(ActiveCell) Then
        MsgBox "Please enter a value for 'Agent Number'.", vbOKOnly Or vbCritical, "Missing Data"
        ActiveCell.Select
        AreHeaderFieldsValid = False
        Exit Function
    End If

    AreHeaderFieldsValid = True
    
End Function

Sub FindColumnsByName()
    familySequenceIndex = GetColumnIndexByName(FAMILYSEQUENCE)
    dobIndex = GetColumnIndexByName(DOB)
    relationIndex = GetColumnIndexByName(RELATION)
    ssnIndex = GetColumnIndexByName(SSN)
    hoursWorkedIndex = GetColumnIndexByName(HOURSWORKED)
    annualSalaryIndex = GetColumnIndexByName(ANNUALSALARY)
    hireDateIndex = GetColumnIndexByName(HIREDATE)
    firstNameIndex = GetColumnIndexByName(FIRSTNAME)
    lastNameIndex = GetColumnIndexByName(LASTNAME)
    enrollDateIndex = GetColumnIndexByName(ENROLLDATE)
    coverageDateIndex = GetColumnIndexByName(COVERAGEDATE)
    firstBillDateIndex = GetColumnIndexByName(FIRSTBILLDATE)
    genderIndex = GetColumnIndexByName(GENDER)
    addressIndex = GetColumnIndexByName(ADDRESS1)
    cityIndex = GetColumnIndexByName(CITY)
    stateIndex = GetColumnIndexByName(STATE)
    zipIndex = GetColumnIndexByName(ZIP)
    signatureStateIndex = GetColumnIndexByName(SIGNATURESTATE)
    asTheAgentIndex = GetColumnIndexByName(ASTHEAGENT)
    
    'Product
    faceAmountIndex = GetColumnIndexByName(FACEAMOUNT)
    monthlyPremiumIndex = GetColumnIndexByName(MONTHLYPREMIUM)
    benefitOptionIndex = GetColumnIndexByName(BENEFITOPTION)
    childTermRiderIndex = GetColumnIndexByName(CHILDTERMRIDER)
    tobaccoIndex = GetColumnIndexByName(TOBACCO)
    ifApplyingForIndex = GetColumnIndexByName(IFAPPLYINGFOR)
    ifYesDisabilityIndex = GetColumnIndexByName(IFYESDISABILITY)
    residentsOfIndex = GetColumnIndexByName(RESIDENTSOF)
    residentsInIndex = GetColumnIndexByName(RESIDENTSIN)

    'LTC
    ltcProtectIndex = GetColumnIndexByName(LTCPROTECT)
    ltcDoYouIndex = GetColumnIndexByName(LTCDOYOU)
    ltcDidYouIndex = GetColumnIndexByName(LTCDIDYOU)
    ltcMedicaidIndex = GetColumnIndexByName(LTCMEDICAID)
    ltcReplaceIndex = GetColumnIndexByName(LTCREPLACE)
    ltcHasAnyIndex = GetColumnIndexByName(LTCHASANY)
    ltcICertifyIndex = GetColumnIndexByName(LTCICERTIFY)

    'Beneficiary
    ben1LastNameIndex = GetColumnIndexByName(BEN1LASTNAME)
    ben1FirstNameIndex = GetColumnIndexByName(BEN1FIRSTNAME)
    ben1RelationshipIndex = GetColumnIndexByName(BEN1RELATIONSHIP)
        
End Sub

Function CopyValuesFromEmployee(ByVal strRelation As String, ByVal familyEmployeeRow As Integer) As Boolean
    If CopyValueFromEmployee(tobaccoIndex - 1, TOBACCO, strRelation, familyEmployeeRow) = False Then
        CopyValuesFromEmployee = False
        Exit Function
    End If
    
    If CopyValueFromEmployee(addressIndex - 1, ADDRESS1, strRelation, familyEmployeeRow) = False Then
        CopyValuesFromEmployee = False
        Exit Function
    End If
           
    If CopyValueFromEmployee(cityIndex - 1, CITY, strRelation, familyEmployeeRow) = False Then
        CopyValuesFromEmployee = False
        Exit Function
    End If
           
    If CopyValueFromEmployee(stateIndex - 1, STATE, strRelation, familyEmployeeRow) = False Then
        CopyValuesFromEmployee = False
        Exit Function
    End If
           
    If CopyValueFromEmployee(zipIndex - 1, ZIP, strRelation, familyEmployeeRow) = False Then
        CopyValuesFromEmployee = False
        Exit Function
    End If
    
    If CopyValueFromEmployee(coverageDateIndex - 1, COVERAGEDATE, strRelation, familyEmployeeRow) = False Then
        CopyValuesFromEmployee = False
        Exit Function
    End If
            
    If CopyValueFromEmployee(firstBillDateIndex - 1, FIRSTBILLDATE, strRelation, familyEmployeeRow) = False Then
        CopyValuesFromEmployee = False
        Exit Function
    End If
            
    If CopyValueFromEmployee(enrollDateIndex - 1, ENROLLDATE, strRelation, familyEmployeeRow) = False Then
        CopyValuesFromEmployee = False
        Exit Function
    End If
            
    If CopyValueFromEmployee(signatureStateIndex - 1, SIGNATURESTATE, strRelation, familyEmployeeRow) = False Then
        CopyValuesFromEmployee = False
        Exit Function
    End If
    
    CopyValuesFromEmployee = True
End Function

Function AreRequiredFieldsPresent() As Boolean
    If IsRequiredFieldPresent(relationIndex - 1, RELATION, False) = False Then
        AreRequiredFieldsPresent = False
        Exit Function
    End If
    
    If IsRequiredFieldPresent(firstNameIndex - 1, FIRSTNAME, False) = False Then
        AreRequiredFieldsPresent = False
        Exit Function
    End If
    
    If IsRequiredFieldPresent(lastNameIndex - 1, LASTNAME, False) = False Then
        AreRequiredFieldsPresent = False
        Exit Function
    End If
    
    If IsRequiredFieldPresent(genderIndex - 1, GENDER, False) = False Then
        AreRequiredFieldsPresent = False
        Exit Function
    End If
    
    If IsRequiredFieldPresent(dobIndex - 1, DOB, False) = False Then
        AreRequiredFieldsPresent = False
        Exit Function
    End If
    
    AreRequiredFieldsPresent = True
End Function

Function AreEmployeeRequiredFieldsPresent() As Boolean
    If IsRequiredFieldPresent(ssnIndex - 1, SSN, True) = False Then
        AreEmployeeRequiredFieldsPresent = False
        Exit Function
    End If

    If IsRequiredFieldPresent(hoursWorkedIndex - 1, HOURSWORKED, True) = False Then
        AreEmployeeRequiredFieldsPresent = False
        Exit Function
    End If
    
    If IsRequiredFieldPresent(annualSalaryIndex - 1, ANNUALSALARY, True) = False Then
        AreEmployeeRequiredFieldsPresent = False
        Exit Function
    End If
    
    If IsRequiredFieldPresent(hireDateIndex - 1, HIREDATE, True) = False Then
        AreEmployeeRequiredFieldsPresent = False
        Exit Function
    End If
    
    If IsRequiredFieldPresent(faceAmountIndex - 1, FACEAMOUNT, True) = False Then
        AreEmployeeRequiredFieldsPresent = False
        Exit Function
    End If
    
    If IsRequiredFieldPresent(monthlyPremiumIndex - 1, MONTHLYPREMIUM, True) = False Then
        AreEmployeeRequiredFieldsPresent = False
        Exit Function
    End If
    
    If IsRequiredFieldPresent(tobaccoIndex - 1, TOBACCO, True) = False Then
        AreEmployeeRequiredFieldsPresent = False
        Exit Function
    End If
    
    If IsRequiredFieldPresent(ben1LastNameIndex - 1, BEN1LASTNAME, True) = False Then
        AreEmployeeRequiredFieldsPresent = False
        Exit Function
    End If
        
    If IsRequiredFieldPresent(asTheAgentIndex - 1, ASTHEAGENT, True) = False Then
        AreEmployeeRequiredFieldsPresent = False
        Exit Function
    End If
                
    AreEmployeeRequiredFieldsPresent = True
End Function

Function IsRequiredFieldPresent(ByVal coloffset As Integer, ByVal strColumnName As String, ByVal blnEmployeeOnly As Boolean)
    Dim strValue As String
    strValue = ActiveCell.Offset(0, coloffset).Value
    If strValue = "" Then
        If (blnEmployeeOnly = True) Then
            MsgBox "'" + strColumnName + "' is a required field for Employees.", vbOKOnly Or vbCritical, "Missing Data"
        Else
            MsgBox "'" + strColumnName + "' is a required field.", vbOKOnly Or vbCritical, "Missing Data"
        End If
        ActiveCell.Offset(0, coloffset).Select
        IsRequiredFieldPresent = False
        Exit Function
    End If
        
    IsRequiredFieldPresent = True
    
End Function

Function IsDependentFieldPresent(ByVal coloffset As Integer, ByVal strColumnName As String, ByVal strDependencyColumn As String, ByVal blnAllowZero As Boolean)
    Dim strValue As String
    strValue = ActiveCell.Offset(0, coloffset).Value
    If strValue = "" Or (blnAllowZero = False And strValue = "0") Then
        MsgBox "'" + strColumnName + "' is required if '" + strDependencyColumn + "' is selected.", vbOKOnly Or vbCritical, "Missing Data"
        ActiveCell.Offset(0, coloffset).Select
        IsDependentFieldPresent = False
        Exit Function
    End If
        
    IsDependentFieldPresent = True
End Function

Function IsCoverageTypeValid(ByVal coloffset As Integer, ByVal relationIndex As Integer)
    
    Dim strValue As String
    strValue = ActiveCell.Offset(0, coloffset).Value
    
    If strValue <> "" And strValue <> "EE" Then
        IsCoverageTypeValid = False 'Default to False
        
        Dim spouseRow As Integer
        Dim dependentRow As Integer
        
        spouseRow = GetFamilyRow(ActiveCell.Value, "S", relationIndex)
        dependentRow = GetFamilyRow(ActiveCell.Value, "D", relationIndex)
    
        Select Case UCase(strValue)
            Case "ES"
                If spouseRow <= -1 Then
                    MsgBox strValue + " is not a valid Coverage Type. This Employee does not have a Spouse.", vbOKOnly Or vbCritical, "Invalid Data"
                Else
                    IsCoverageTypeValid = True
                End If
            Case "EC"
                If dependentRow <= -1 Then
                    MsgBox strValue + " is not a valid Coverage Type. This Employee does not have any Dependents.", vbOKOnly Or vbCritical, "Invalid Data"
                Else
                    IsCoverageTypeValid = True
                End If
            Case "FAM"
                If spouseRow <= -1 Or dependentRow <= -1 Then
                    MsgBox strValue + " is not a valid Coverage Type. This Employee does not have a Spouse and Dependent(s).", vbOKOnly Or vbCritical, "Invalid Data"
                Else
                    IsCoverageTypeValid = True
                End If
            Case Else
                MsgBox strValue + " is not a valid Coverage Type.", vbOKOnly Or vbCritical, "Invalid Data"
                ActiveCell.Offset(0, coloffset).Select
        End Select
        
        If IsCoverageTypeValid = False Then
            ActiveCell.Offset(0, coloffset).Select
        End If
    Else
        IsCoverageTypeValid = True
    End If
    
End Function

Function CopyValueFromEmployee(ByVal coloffset As Integer, ByVal strColumnName As String, ByVal strRelation As String, ByVal familyEmployeeRow As Integer)
    Dim strValue As String
    strValue = ActiveCell.Offset(0, coloffset).Value
    If strValue = "" Then
        If (UCase(strRelation) = "E") Then
            MsgBox "'" + strColumnName + "' is a required field for Employees.", vbOKOnly Or vbCritical, "Missing Data"
            ActiveCell.Offset(0, coloffset).Select
            CopyValueFromEmployee = False
            Exit Function
        Else
            'Copy the value from the Employee for this family sequence number
            ActiveCell.Offset(0, coloffset).Value = Cells(familyEmployeeRow, coloffset + 1).Value
        End If
    End If
        
    CopyValueFromEmployee = True
    
End Function

Function FormatFields() As Boolean
    If FormatDate(enrollDateIndex - 1, ENROLLDATE) = False Then
        FormatFields = False
        Exit Function
    End If
    
    If FormatDate(coverageDateIndex - 1, COVERAGEDATE) = False Then
        FormatFields = False
        Exit Function
    End If

    If FormatDate(firstBillDateIndex - 1, FIRSTBILLDATE) = False Then
        FormatFields = False
        Exit Function
    End If
    
    If FormatDate(dobIndex - 1, DOB) = False Then
        FormatFields = False
        Exit Function
    End If
    
    If FormatDate(hireDateIndex - 1, HIREDATE) = False Then
        FormatFields = False
        Exit Function
    End If
    
    If FormatZip(zipIndex - 1, ZIP) = False Then
        FormatFields = False
        Exit Function
    End If
    
    If FormatSSN(ssnIndex - 1, SSN) = False Then
        FormatFields = False
        Exit Function
    End If

    If FormatDecimal(faceAmountIndex - 1, FACEAMOUNT, True) = False Then
        FormatFields = False
        Exit Function
    End If
    
    If FormatDecimal(monthlyPremiumIndex - 1, MONTHLYPREMIUM, True) = False Then
        FormatFields = False
        Exit Function
    End If
            
    FormatFields = True
End Function

Function FormatDate(ByVal coloffset As Integer, ByVal strColumnName As String) As Boolean
    Dim strDate As String
    strDate = ActiveCell.Offset(0, coloffset).Value
    If strDate <> "" Then
        If IsDate(strDate) Then
            ActiveCell.Offset(0, coloffset).NumberFormat = "mm/dd/yyyy"
        Else
            MsgBox "'" + strColumnName + "' must be in the format mm/dd/yyyy.", vbOKOnly Or vbCritical, "Invalid Data"
            ActiveCell.Offset(0, coloffset).Select
            FormatDate = False
            Exit Function
        End If
    End If
    
    FormatDate = True
End Function

Function FormatZip(ByVal coloffset As Integer, ByVal strColumnName As String) As Boolean
    Dim strZip As String
    strZip = ActiveCell.Offset(0, coloffset).Value
    If strZip <> "" Then
        If IsNumeric(strZip) Then
            ActiveCell.Offset(0, coloffset).NumberFormat = "00000"
        Else
            MsgBox "'" + strColumnName + "' must be numeric.", vbOKOnly Or vbCritical, "Invalid Data"
            ActiveCell.Offset(0, coloffset).Select
            FormatZip = False
            Exit Function
        End If
    End If
    
    FormatZip = True
End Function

Function FormatSSN(ByVal coloffset As Integer, ByVal strColumnName As String) As Boolean
    Dim strSSN As String
    strSSN = Replace(ActiveCell.Offset(0, coloffset).Value, "-", "")
    If strSSN <> "" Then
        If IsNumeric(strSSN) Then
            ActiveCell.Offset(0, coloffset).NumberFormat = "000-00-0000"
        Else
            MsgBox "'" + strColumnName + "' must be numeric.", vbOKOnly Or vbCritical, "Invalid Data"
            ActiveCell.Offset(0, coloffset).Select
            FormatSSN = False
            Exit Function
        End If
    End If
    
    FormatSSN = True
End Function

Function FormatWholeNumber(ByVal coloffset As Integer, ByVal strColumnName As String) As Boolean
    Dim strNumber As String
    strNumber = ActiveCell.Offset(0, coloffset).Value
    If strNumber <> "" Then
        If IsNumeric(strNumber) Then
            ActiveCell.Offset(0, coloffset).NumberFormat = "0"
        Else
            MsgBox "'" + strColumnName + "' must be numeric.", vbOKOnly Or vbCritical, "Invalid Data"
            ActiveCell.Offset(0, coloffset).Select
            FormatWholeNumber = False
            Exit Function
        End If
    End If
    
    FormatWholeNumber = True
End Function

Function FormatDecimal(ByVal coloffset As Integer, ByVal strColumnName As String, ByVal isCurrency As Boolean) As Boolean
    Dim strNumber As String
    strNumber = ActiveCell.Offset(0, coloffset).Value
    If strNumber <> "" Then
        If IsNumeric(strNumber) Then
            If isCurrency Then
                ActiveCell.Offset(0, coloffset).NumberFormat = "$#,##0.00_);[Red]($#,##0.00)"
            Else
                ActiveCell.Offset(0, coloffset).NumberFormat = "0.00"
            End If
        Else
            MsgBox "'" + strColumnName + "' must be numeric.", vbOKOnly Or vbCritical, "Invalid Data"
            ActiveCell.Offset(0, coloffset).Select
            FormatDecimal = False
            Exit Function
        End If
    End If
    
    FormatDecimal = True
End Function

Function AreDatesValid(ByVal enrollOffset As Integer, ByVal coverageOffset As Integer)
    Dim strEnrollDate As String
    Dim strCoverageDate As String
    
    strEnrollDate = ActiveCell.Offset(0, enrollOffset).Value
    strCoverageDate = ActiveCell.Offset(0, coverageOffset).Value
        
    If strEnrollDate <> "" Then
        If CDate(strEnrollDate) > Date Then
            MsgBox "'" + ENROLLDATE + "' cannot be in the future.", vbOKOnly Or vbCritical, "Invalid Data"
            ActiveCell.Offset(0, enrollOffset).Select
            AreDatesValid = False
            Exit Function
        End If
    End If
    
    If strEnrollDate <> "" And strCoverageDate <> "" Then
        If CDate(strEnrollDate) > CDate(strCoverageDate) Then
            MsgBox "'" + ENROLLDATE + "' cannot be after '" + COVERAGEDATE + "'.", vbOKOnly Or vbCritical, "Invalid Data"
            ActiveCell.Offset(0, enrollOffset).Select
            AreDatesValid = False
            Exit Function
        End If
    End If
        
    AreDatesValid = True
    
End Function

Sub RemoveSpecialCharacters(ByVal coloffset As Integer)
    Dim oldValue As String
    Dim singleChar As String
    Dim newValue As String
    
    oldValue = ActiveCell.Offset(0, coloffset).Value
    For I = 1 To Len(oldValue)
        singleChar = Mid(oldValue, I, 1)
        If singleChar Like "[A-Z,a-z,0-9 ]" Then
            newValue = newValue & singleChar
        End If
    Next I
    
    ActiveCell.Offset(0, coloffset).Value = newValue
End Sub

Sub ConvertToUpper(ByVal coloffset As Integer)
    ActiveCell.Offset(0, coloffset).Value = UCase(ActiveCell.Offset(0, coloffset).Value)
End Sub

Private Function GetColumnIndexByName(ByVal strSearch As String) As Integer

    Dim aCell As Range
    
    '10 is the Row where the column headers are
    Set aCell = ActiveSheet.Rows(10).Find(What:=strSearch, LookIn:=xlValues, _
        LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False)
    
    If Not aCell Is Nothing Then
        GetColumnIndexByName = aCell.Column
    Else
        MsgBox "Error: Column header '" + strSearch + "' was not found in Row 10.", vbOKOnly & vbCritical, "Missing Column Header"
        GetColumnIndexByName = -1
        End
    End If

End Function

Private Function GetFamilyRow(ByVal strFamilySequence As String, ByVal searchRelation As String, ByVal relationIndex As Integer) As Integer
    
    Dim aCell As Range
    Dim strRelation As String
    
    'Family sequence is contained in Column 1
    GetFamilyRow = -1
    
    Set aCell = ActiveSheet.Columns(1).Find(What:=strFamilySequence, LookIn:=xlValues, _
    LookAt:=xlWhole, SearchOrder:=xlByColumns, SearchDirection:=xlNext, _
    MatchCase:=False, SearchFormat:=False)
            
    If Not aCell Is Nothing Then
        strRelation = Cells(aCell.Row, relationIndex).Value
        If UCase(strRelation) = UCase(searchRelation) Then
            GetFamilyRow = aCell.Row
        Else
            firstRow = aCell.Row
            Do
                Set aCell = ActiveSheet.Columns(1).FindNext(aCell)
                strRelation = Cells(aCell.Row, relationIndex).Value
                If UCase(strRelation) = UCase(searchRelation) Then
                    GetFamilyRow = aCell.Row
                End If
            Loop While Not aCell Is Nothing And RELATION <> searchRelation And aCell.Row <> firstRow
        End If
    End If

End Function

Private Function IsDuplicate(ByVal strFamilySequence As String, ByVal searchRelation As String, ByVal relationIndex As Integer) As Integer
    
    Dim aCell As Range
    Dim strRelation As String
    Dim relationCount As Integer
    relationCount = 0
    
    'Family sequence is contained in Column 1
    IsDuplicate = False
    
    Set aCell = ActiveSheet.Columns(1).Find(What:=strFamilySequence, LookIn:=xlValues, _
    LookAt:=xlWhole, SearchOrder:=xlByColumns, SearchDirection:=xlNext, _
    MatchCase:=False, SearchFormat:=False)
            
    If Not aCell Is Nothing Then
        strRelation = Cells(aCell.Row, relationIndex).Value
        If strRelation = searchRelation Then
            relationCount = 1
        End If
        
        firstRow = aCell.Row
        Do
            Set aCell = ActiveSheet.Columns(1).FindNext(aCell)
            strRelation = Cells(aCell.Row, relationIndex).Value
            'If a second instance of this record is found then this is a duplicate
            If strRelation = searchRelation And aCell.Row <> firstRow Then
                relationCount = relationCount + 1
            End If
            
            If relationCount > 1 Then
                IsDuplicate = True
                MsgBox "Duplicate '" + searchRelation + "' entry found for " + FAMILYSEQUENCE + " " + strFamilySequence + ".", vbOKOnly Or vbCritical, "Invalid Data"
                ActiveCell.Select
                Exit Function
            End If
        Loop While Not aCell Is Nothing And aCell.Row <> firstRow
    End If

End Function

Function IsProductValid(domicileState As String, strRelation As String) As Boolean
    
    If UCase(strRelation) = "E" Then
        Dim strIfApplyingFor As String
        Dim spouseRow As Integer
        Dim dependentRow As Integer
        spouseRow = GetFamilyRow(ActiveCell.Value, "S", relationIndex)
        dependentRow = GetFamilyRow(ActiveCell.Value, "D", relationIndex)
    
     '*****Removed Disabled Question Requirement... It is now covered in the certification language. 8/15/16 Brandon Hall*********
    
       ' If (spouseRow >= 0 Or dependentRow >= 0) And domicileState <> "VA" Then
       '     strIfApplyingFor = ActiveCell.Offset(0, ifApplyingForIndex - 1).Value
            'If strIfApplyingFor = "" Then
            '    MsgBox "'Currently Disabled' is a required field for Employees with a Spouse and/or Dependents.", vbOKOnly Or vbCritical, "Missing Data"
            '    ActiveCell.Offset(0, ifApplyingForIndex - 1).Select
            '    IsProductValid = False
            '    Exit Function
        '    Else
        '        If UCase(strIfApplyingFor) = "YES" Then
        '            If IsDependentFieldPresent(ifYesDisabilityIndex - 1, "Name of Disabled", "Currently Disabled", False) = False Then
         '               IsProductValid = False
         '               Exit Function
         '           End If
         '       End If
         '   End If
        'End If
        
        'Child Term Rider or Face Amount is required if a Dependent is listed
        
        
       Dim strChildFaceAmt As Long
        If dependentRow >= 0 Then
       strChildFaceAmt = ActiveCell.Offset(dependentRow - ActiveCell.Row, faceAmountIndex - 1).Value
        
        If strChildFaceAmt < 5000 Then
          
        
        If dependentRow >= 0 Then
            Dim strChildTermRider As String
            strChildTermRider = ActiveCell.Offset(0, childTermRiderIndex - 1).Value
            If strChildTermRider = "" Then
                MsgBox "'" + CHILDTERMRIDER + "' or Child Face Amount is required if the Employee has a Dependent.", vbOKOnly Or vbCritical, "Invalid Data"
                ActiveCell.Offset(0, childTermRiderIndex - 1).Select
                Exit Function
            End If
        End If
        End If
        End If
        
        'Ensure one of the Existing Life insurance questions have been answered
        If ActiveCell.Offset(0, residentsOfIndex - 1).Value = "" And ActiveCell.Offset(0, residentsInIndex - 1).Value = "" Then
            MsgBox "Please answer one of the 'Existing Life Insurance' questions.", vbOKOnly Or vbCritical, "Invalid Data"
            ActiveCell.Offset(0, residentsOfIndex - 1).Select
            Exit Function
        End If
        
        'Default Benefit Option to A
        If ActiveCell.Offset(0, benefitOptionIndex - 1).Value = "" Then ActiveCell.Offset(0, benefitOptionIndex - 1).Value = "A"
        
    ElseIf UCase(strRelation) = "S" Then
        If IsRequiredFieldPresent(faceAmountIndex - 1, FACEAMOUNT, False) = False Then
            IsProductValid = False
            Exit Function
        End If
        
        If IsRequiredFieldPresent(monthlyPremiumIndex - 1, MONTHLYPREMIUM, False) = False Then
            IsProductValid = False
            Exit Function
        End If
    End If
    
    IsProductValid = True
    
End Function

Function IsLTCValid(offeringLTC As String) As Boolean

    If UCase(offeringLTC) = "YES" Then
        If IsDependentFieldPresent(ltcProtectIndex - 1, LTCPROTECT, "Offering LTC", False) = False Then
            IsLTCValid = False
            Exit Function
        End If
        
        If IsDependentFieldPresent(ltcDoYouIndex - 1, LTCDOYOU, "Offering LTC", False) = False Then
            IsLTCValid = False
            Exit Function
        End If
    
        If IsDependentFieldPresent(ltcDidYouIndex - 1, LTCDIDYOU, "Offering LTC", False) = False Then
            IsLTCValid = False
            Exit Function
        End If
    
        If IsDependentFieldPresent(ltcMedicaidIndex - 1, LTCMEDICAID, "Offering LTC", False) = False Then
            IsLTCValid = False
            Exit Function
        End If

        If IsDependentFieldPresent(ltcReplaceIndex - 1, LTCREPLACE, "Offering LTC", False) = False Then
            IsLTCValid = False
            Exit Function
        End If
    
        If IsDependentFieldPresent(ltcHasAnyIndex - 1, LTCHASANY, "Offering LTC", False) = False Then
            IsLTCValid = False
            Exit Function
        End If

        If IsDependentFieldPresent(ltcICertifyIndex - 1, LTCICERTIFY, "Offering LTC", False) = False Then
            IsLTCValid = False
            Exit Function
        End If
    End If

    IsLTCValid = True
    
End Function


Function IsBeneficiaryValid() As Boolean

    If IsRequiredFieldPresent(ben1LastNameIndex - 1, BEN1LASTNAME, True) = False Then
        IsBeneficiaryValid = False
        Exit Function
    End If
    
    If IsRequiredFieldPresent(ben1FirstNameIndex - 1, BEN1FIRSTNAME, True) = False Then
        IsBeneficiaryValid = False
        Exit Function
    End If
    
    If IsRequiredFieldPresent(ben1RelationshipIndex - 1, BEN1RELATIONSHIP, True) = False Then
        IsBeneficiaryValid = False
        Exit Function
    End If
    
    IsBeneficiaryValid = True
    
End Function

Sub DateAdd1(ByVal coloffset As Integer)
  If ActiveCell.Offset(0, firstBillDateIndex - 1).Value = "" Then
    ActiveCell.Offset(0, firstBillDateIndex - 1).Value = DateAdd("M", 0, (ActiveCell.Offset(0, coverageDateIndex - 1).Value))
  End If
End Sub

Function IsBenefitValid(ByVal coloffset As Long)

    Dim strBenefitAmount As Long
    Dim strSalary As Long
    Dim strMaxBenefit As Long
    Dim strEEBenefit As Long

    strBenefitAmount = ActiveCell.Offset(0, faceAmountIndex - 1).Value
    strSalary = ActiveCell.Offset(0, annualSalaryIndex - 1).Value
    strMaxBenefit = strSalary * 5
    employeerowindex = GetFamilyRow(ActiveCell.Value, "E", relationIndex)
    spouserowindex = GetFamilyRow(ActiveCell.Value, "S", relationIndex)
    deprowindex = GetFamilyRow(ActiveCell.Value, "D", relationIndex)
    


    If employeerowindex > -1 Then
        If ActiveCell.Offset(0, familySequenceIndex).Value = "E" Then
         If strBenefitAmount > strMaxBenefit Then
            MsgBox "A requested face amount of $" & strBenefitAmount & " exceeds the 5X salary rule. Based on the salary provided, $" & strMaxBenefit & " is the maximum face amount allowed for this employee.", vbOKOnly
            IsBenefitValid = False
            ActiveCell.Offset(0, coloffset).Select
            Exit Function
          End If
        End If
    End If
      
 
        
    IsBenefitValid = True
    
End Function


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' bzWO

INQUEST-PP=macro
