Attribute VB_Name = "AFM"
Option Explicit
Public Function ReadFile() As String

  Dim fso As FileSystemObject           'Verweis: Microsoft Scripting Runtime
  Dim fsof
  Dim strPath As String
  
  strPath = Workbooks("wMBusE-Endtester.xlsm").Path
  Set fso = CreateObject("Scripting.FilesystemObject")
  Set fsof = fso.OpenTextFile(strPath + "\Time.txt", ForReading, TristateFalse)
  ReadFile = fsof.ReadAll
  fsof.Close
  
End Function

Public Function PortTest(intPortID As Integer) As String
  Rem Prozedur Verbindungstest

  Dim lngStatus As Long

  On Error GoTo Fehler

  Rem Open COM port
  lngStatus = CommOpen(intPortID, "COM" & CStr(intPortID), "baud=19200 parity=N data=8 stop=1")
  PortTest = GetSystemMessage(lngStatus)
  
  Call CommClose(intPortID)
  
  Exit Function
  
Fehler:   MsgBox ("Fehler Port Test")

End Function

Public Function UebertragungTest1(strSettings As String, strDaten As String) As String
  
  Dim lngErgebnis       As Long
  Dim strDatenDUT_I     As String, _
      strDatenDUT_II    As String
  Dim intSchritt        As Integer
  
  intSchritt = 2
  
  On Error GoTo Fehler
  
  Call AnzeigeBalken(1 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommOpen(4, "COM4", strSettings)
  Sleep 2000
  
  Call AnzeigeBalken(2 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommOpen(5, "COM5", strSettings)
  Sleep 2000
  
  Call AnzeigeBalken(3 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommOpen(6, "COM6", strSettings)
  Sleep 2000
  
  Call AnzeigeBalken(4 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommWrite(6, strDaten)
  Sleep 2000
  
  Call AnzeigeBalken(5 * intSchritt)
  HPM.Repaint
  strDatenDUT_I = ""
  lngErgebnis = CommRead(4, strDatenDUT_I, 64)
  Sleep 2000
  
  Call AnzeigeBalken(6 * intSchritt)
  HPM.Repaint
  strDatenDUT_II = ""
  lngErgebnis = CommRead(5, strDatenDUT_II, 64)
  Sleep 2000
  
  Debug.Print strDaten
  Debug.Print strDatenDUT_I
  Debug.Print strDatenDUT_II
  
  If strDatenDUT_I = strDaten And strDatenDUT_II = strDaten Then
    UebertragungTest1 = "i.O."
  Else
    UebertragungTest1 = "nicht i.O."
  End If
  
  Call AnzeigeBalken(7 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommClose(4)
  Sleep 2000
  
  Call AnzeigeBalken(8 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommClose(5)
  Sleep 2000
  
  Call AnzeigeBalken(9 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommClose(6)

  Exit Function

Fehler:   MsgBox ("Fehler Daten schreiben!")

End Function

Public Function UebertragungTest2(strSettings As String, strDaten As String) As String
  
  Dim lngErgebnis   As Long
  Dim strDatenEoL   As String
  Dim intSchritt    As Integer
  
  intSchritt = 2
  
  On Error GoTo Fehler
  
  Call AnzeigeBalken(1 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommOpen(4, "COM4", strSettings)
  Sleep 2000
  
  Call AnzeigeBalken(2 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommOpen(6, "COM6", strSettings)
  Sleep 2000
  
  Call AnzeigeBalken(3 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommWrite(4, strDaten)
  Sleep 2000
  
  Call AnzeigeBalken(4 * intSchritt)
  HPM.Repaint
  strDatenEoL = ""
  lngErgebnis = CommRead(6, strDatenEoL, 64)
  Sleep 2000
  
  Debug.Print strDaten
  Debug.Print strDatenEoL
  
  If strDatenEoL = strDaten Then
    UebertragungTest2 = "i.O."
  Else
    UebertragungTest2 = "nicht i.O."
  End If
  
  Call AnzeigeBalken(5 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommClose(4)
  Sleep 2000
  
  Call AnzeigeBalken(6 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommClose(6)

  Exit Function

Fehler: MsgBox ("Fehler Daten schreiben!")

End Function

Public Function UebertragungTest3(strSettings As String, strDaten As String) As String
  
  Dim lngErgebnis   As Long
  Dim strDatenEoL   As String
  Dim intSchritt    As Integer
  
  intSchritt = 2
  
  On Error GoTo Fehler
  
  Call AnzeigeBalken(1 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommOpen(5, "COM5", strSettings)
  Sleep 2000
  
  Call AnzeigeBalken(2 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommOpen(6, "COM6", strSettings)
  Sleep 2000
  
  Call AnzeigeBalken(3 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommWrite(5, strDaten)
  Sleep 2000
  
  Call AnzeigeBalken(4 * intSchritt)
  HPM.Repaint
  strDatenEoL = ""
  lngErgebnis = CommRead(6, strDatenEoL, 64)
  Sleep 2000
  
  Debug.Print strDaten
  Debug.Print strDatenEoL
  
  If strDatenEoL = strDaten Then
    UebertragungTest3 = "i.O."
  Else
    UebertragungTest3 = "nicht i.O."
  End If
  
  Call AnzeigeBalken(5 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommClose(5)
  Sleep 2000
  
  Call AnzeigeBalken(6 * intSchritt)
  HPM.Repaint
  lngErgebnis = CommClose(6)

  Exit Function

Fehler: MsgBox ("Fehler Daten schreiben!")

End Function

Sub PortSchlie|fffd|en()

  Dim lngErgebnis       As Long
  lngErgebnis = CommOpen(5, "COM5", "baud=19200 parity=N data=8 stop=1")
  lngErgebnis = CommClose(5)
End Sub
Attribute VB_Name = "APICOM"
Option Explicit
Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
'-------------------------------------------------------------------------------

'
' This VB module is a collection of routines to perform serial port I/O without
' using the Microsoft Comm Control component.  This module uses the Windows API
' to perform the overlapped I/O operations necessary for serial communications.
'
' The routine can handle up to 4 serial ports which are identified with a
' Port ID.
'
' All routines (with the exception of CommRead and CommWrite) return an error
' code or 0 if no error occurs.  The routine CommGetError can be used to get
' the complete error message.
'-------------------------------------------------------------------------------

'-------------------------------------------------------------------------------
' Public Constants
'-------------------------------------------------------------------------------

' Output Control Lines (CommSetLine)
Const LINE_BREAK = 1
Const LINE_DTR = 2
Const LINE_RTS = 3

' Input Control Lines  (CommGetLine)
Const LINE_CTS = &H10&
Const LINE_DSR = &H20&
Const LINE_RING = &H40&
Const LINE_RLSD = &H80&
Const LINE_CD = &H80&

'-------------------------------------------------------------------------------
' System Constants
'-------------------------------------------------------------------------------
Private Const ERROR_IO_INCOMPLETE = 996&
Private Const ERROR_IO_PENDING = 997
Private Const GENERIC_READ = &H80000000
Private Const GENERIC_WRITE = &H40000000
Private Const FILE_ATTRIBUTE_NORMAL = &H80
Private Const FILE_FLAG_OVERLAPPED = &H40000000
Private Const FORMAT_MESSAGE_FROM_SYSTEM = &H1000
Private Const OPEN_EXISTING = 3

' COMM Functions
Private Const MS_CTS_ON = &H10&
Private Const MS_DSR_ON = &H20&
Private Const MS_RING_ON = &H40&
Private Const MS_RLSD_ON = &H80&
Private Const PURGE_RXABORT = &H2
Private Const PURGE_RXCLEAR = &H8
Private Const PURGE_TXABORT = &H1
Private Const PURGE_TXCLEAR = &H4

' COMM Escape Functions
Private Const CLRBREAK = 9
Private Const CLRDTR = 6
Private Const CLRRTS = 4
Private Const SETBREAK = 8
Private Const SETDTR = 5
Private Const SETRTS = 3

'-------------------------------------------------------------------------------
' System Structures
'-------------------------------------------------------------------------------
Private Type COMSTAT
        fBitFields As Long ' See Comment in Win32API.Txt
        cbInQue As Long
        cbOutQue As Long
End Type

Private Type COMMTIMEOUTS
        ReadIntervalTimeout As Long
        ReadTotalTimeoutMultiplier As Long
        ReadTotalTimeoutConstant As Long
        WriteTotalTimeoutMultiplier As Long
        WriteTotalTimeoutConstant As Long
End Type

'
' The DCB structure defines the control setting for a serial
' communications device.
'
Private Type DCB
        DCBlength As Long
        BaudRate As Long
        fBitFields As Long ' See Comments in Win32API.Txt
        wReserved As Integer
        XonLim As Integer
        XoffLim As Integer
        ByteSize As Byte
        Parity As Byte
        StopBits As Byte
        XonChar As Byte
        XoffChar As Byte
        ErrorChar As Byte
        EofChar As Byte
        EvtChar As Byte
        wReserved1 As Integer 'Reserved; Do Not Use
End Type

Private Type OVERLAPPED
        Internal As Long
        InternalHigh As Long
        offset As Long
        OffsetHigh As Long
        hEvent As Long
End Type

Private Type SECURITY_ATTRIBUTES
        nLength As Long
        lpSecurityDescriptor As Long
        bInheritHandle As Long
End Type

'-------------------------------------------------------------------------------
' System Functions
'-------------------------------------------------------------------------------
'
' Fills a specified DCB structure with values specified in
' a device-control string.
'
Private Declare Function BuildCommDCB Lib "kernel32" Alias "BuildCommDCBA" _
    (ByVal lpDef As String, lpDCB As DCB) As Long
'
' Retrieves information about a communications error and reports
' the current status of a communications device. The function is
' called when a communications error occurs, and it clears the
' device's error flag to enable additional input and output
' (I/O) operations.
'
Private Declare Function ClearCommError Lib "kernel32" _
    (ByVal hFile As Long, lpErrors As Long, lpStat As COMSTAT) As Long
'
' Closes an open communications device or file handle.
'
Private Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long
'
' Creates or opens a communications resource and returns a handle
' that can be used to access the resource.
'
Private Declare Function CreateFile Lib "kernel32" Alias "CreateFileA" _
    (ByVal lpFileName As String, ByVal dwDesiredAccess As Long, _
    ByVal dwShareMode As Long, lpSecurityAttributes As Any, _
    ByVal dwCreationDisposition As Long, ByVal dwFlagsAndAttributes As Long, _
    ByVal hTemplateFile As Long) As Long
'
' Directs a specified communications device to perform a function.
'
Private Declare Function EscapeCommFunction Lib "kernel32" _
    (ByVal nCid As Long, ByVal nFunc As Long) As Long
'
' Formats a message string such as an error string returned
' by anoher function.
'
Private Declare Function FormatMessage Lib "kernel32" Alias "FormatMessageA" _
    (ByVal dwFlags As Long, lpSource As Any, ByVal dwMessageId As Long, _
    ByVal dwLanguageId As Long, ByVal lpBuffer As String, ByVal nSize As Long, _
    Arguments As Long) As Long
'
' Retrieves modem control-register values.
'
Private Declare Function GetCommModemStatus Lib "kernel32" _
    (ByVal hFile As Long, lpModemStat As Long) As Long
'
' Retrieves the current control settings for a specified
' communications device.
'
Private Declare Function GetCommState Lib "kernel32" _
    (ByVal nCid As Long, lpDCB As DCB) As Long
'
' Retrieves the calling thread's last-error code value.
'
Private Declare Function GetLastError Lib "kernel32" () As Long
'
' Retrieves the results of an overlapped operation on the
' specified file, named pipe, or communications device.
'
Private Declare Function GetOverlappedResult Lib "kernel32" _
    (ByVal hFile As Long, lpOverlapped As OVERLAPPED, _
    lpNumberOfBytesTransferred As Long, ByVal bWait As Long) As Long
'
' Discards all characters from the output or input buffer of a
' specified communications resource. It can also terminate
' pending read or write operations on the resource.
'
Private Declare Function PurgeComm Lib "kernel32" _
    (ByVal hFile As Long, ByVal dwFlags As Long) As Long
'
' Reads data from a file, starting at the position indicated by the
' file pointer. After the read operation has been completed, the
' file pointer is adjusted by the number of bytes actually read,
' unless the file handle is created with the overlapped attribute.
' If the file handle is created for overlapped input and output
' (I/O), the application must adjust the position of the file pointer
' after the read operation.
'
Private Declare Function ReadFile Lib "kernel32" _
    (ByVal hFile As Long, ByVal lpBuffer As String, _
    ByVal nNumberOfBytesToRead As Long, ByRef lpNumberOfBytesRead As Long, _
    lpOverlapped As OVERLAPPED) As Long
'
' Configures a communications device according to the specifications
' in a device-control block (a DCB structure). The function
' reinitializes all hardware and control settings, but it does not
' empty output or input queues.
'
Private Declare Function SetCommState Lib "kernel32" _
    (ByVal hCommDev As Long, lpDCB As DCB) As Long
'
' Sets the time-out parameters for all read and write operations on a
' specified communications device.
'
Private Declare Function SetCommTimeouts Lib "kernel32" _
    (ByVal hFile As Long, lpCommTimeouts As COMMTIMEOUTS) As Long
'
' Initializes the communications parameters for a specified
' communications device.
'
Private Declare Function SetupComm Lib "kernel32" _
 (ByVal hFile As Long, ByVal dwInQueue As Long, ByVal dwOutQueue As Long) As Long
'
' Writes data to a file and is designed for both synchronous and a
' synchronous operation. The function starts writing data to the file
' at the position indicated by the file pointer. After the write
' operation has been completed, the file pointer is adjusted by the
' number of bytes actually written, except when the file is opened with
' FILE_FLAG_OVERLAPPED. If the file handle was created for overlapped
' input and output (I/O), the application must adjust the position of
' the file pointer after the write operation is finished.
'
Private Declare Function WriteFile Lib "kernel32" _
    (ByVal hFile As Long, ByVal lpBuffer As String, _
    ByVal nNumberOfBytesToWrite As Long, lpNumberOfBytesWritten As Long, _
    lpOverlapped As OVERLAPPED) As Long


Private Declare Sub AppSleep Lib "kernel32" Alias "Sleep" (ByVal dwMilliseconds As Long)
'-------------------------------------------------------------------------------
' Program Constants
'-------------------------------------------------------------------------------

Private Const MAX_PORTS = 256

'-------------------------------------------------------------------------------
' Program Structures
'-------------------------------------------------------------------------------

Private Type COMM_ERROR
    lngErrorCode As Long
    strFunction As String
    strErrorMessage As String
End Type

Private Type COMM_PORT
    lngHandle As Long
    blnPortOpen As Boolean
    udtDCB As DCB
End Type

 

'-------------------------------------------------------------------------------
' Program Storage
'-------------------------------------------------------------------------------

Private udtCommOverlap As OVERLAPPED
Private udtCommError As COMM_ERROR
Private udtPorts(1 To MAX_PORTS) As COMM_PORT
'-------------------------------------------------------------------------------
' GetSystemMessage - Gets system error text for the specified error code.
'-------------------------------------------------------------------------------
Public Function GetSystemMessage(lngErrorCode As Long) As String
Dim intPos As Integer
Dim strMessage As String, strMsgBuff As String * 256

    Call FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, 0, lngErrorCode, 0, strMsgBuff, 255, 0)

    intPos = InStr(1, strMsgBuff, vbNullChar)
    If intPos > 0 Then
        strMessage = Trim$(Left$(strMsgBuff, intPos - 1))
    Else
        strMessage = Trim$(strMsgBuff)
    End If
    
    GetSystemMessage = strMessage
    
End Function
Public Function PauseApp(PauseInSeconds As Long)
    
    Call AppSleep(PauseInSeconds * 1000)
    
End Function

'-------------------------------------------------------------------------------
' CommOpen - Opens/Initializes serial port.
'
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'   strPort     - COM port name. (COM1, COM2, COM3, COM4)
'   strSettings - Communication settings.
'                 Example: "baud=9600 parity=N data=8 stop=1"
'
' Returns:
'   Error Code  - 0 = No Error.
'
'-------------------------------------------------------------------------------
Public Function CommOpen(intPortID As Integer, strPort As String, _
    strSettings As String) As Long
    
Dim lngStatus       As Long
Dim udtCommTimeOuts As COMMTIMEOUTS

    On Error GoTo Routine_Error
    
    ' See if port already in use.
    If udtPorts(intPortID).blnPortOpen Then
        lngStatus = -1
        With udtCommError
            .lngErrorCode = lngStatus
            .strFunction = "CommOpen"
            .strErrorMessage = "Port in use."
        End With
        
        GoTo Routine_Exit
    End If

    ' Open serial port.
    udtPorts(intPortID).lngHandle = CreateFile(strPort, GENERIC_READ Or _
        GENERIC_WRITE, 0, ByVal 0&, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0)

    If udtPorts(intPortID).lngHandle = -1 Then
        lngStatus = SetCommError("CommOpen (CreateFile)")
        GoTo Routine_Exit
    End If

    udtPorts(intPortID).blnPortOpen = True

    ' Setup device buffers (1K each).
    lngStatus = SetupComm(udtPorts(intPortID).lngHandle, 1024, 1024)
    
    If lngStatus = 0 Then
        lngStatus = SetCommError("CommOpen (SetupComm)")
        GoTo Routine_Exit
    End If

    ' Purge buffers.
    lngStatus = PurgeComm(udtPorts(intPortID).lngHandle, PURGE_TXABORT Or _
        PURGE_RXABORT Or PURGE_TXCLEAR Or PURGE_RXCLEAR)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommOpen (PurgeComm)")
        GoTo Routine_Exit
    End If

    ' Set serial port timeouts.
    With udtCommTimeOuts
        .ReadIntervalTimeout = -1
        .ReadTotalTimeoutMultiplier = 0
        .ReadTotalTimeoutConstant = 1000
        .WriteTotalTimeoutMultiplier = 0
        .WriteTotalTimeoutConstant = 1000
    End With

    lngStatus = SetCommTimeouts(udtPorts(intPortID).lngHandle, udtCommTimeOuts)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommOpen (SetCommTimeouts)")
        GoTo Routine_Exit
    End If

    ' Get the current state (DCB).
    lngStatus = GetCommState(udtPorts(intPortID).lngHandle, _
        udtPorts(intPortID).udtDCB)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommOpen (GetCommState)")
        GoTo Routine_Exit
    End If

    ' Modify the DCB to reflect the desired settings.
    lngStatus = BuildCommDCB(strSettings, udtPorts(intPortID).udtDCB)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommOpen (BuildCommDCB)")
        GoTo Routine_Exit
    End If

    ' Set the new state.
    lngStatus = SetCommState(udtPorts(intPortID).lngHandle, _
        udtPorts(intPortID).udtDCB)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommOpen (SetCommState)")
        GoTo Routine_Exit
    End If

    lngStatus = 0

Routine_Exit:
    CommOpen = lngStatus
    Exit Function

Routine_Error:
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommOpen"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function

Private Function SetCommError(strFunction As String) As Long
    
    With udtCommError
        .lngErrorCode = Err.LastDllError
        .strFunction = strFunction
        .strErrorMessage = GetSystemMessage(.lngErrorCode)
        SetCommError = .lngErrorCode
    End With
    
End Function

Private Function SetCommErrorEx(strFunction As String, lngHnd As Long) As Long
Dim lngErrorFlags As Long
Dim udtCommStat As COMSTAT
    
    With udtCommError
        .lngErrorCode = GetLastError
        .strFunction = strFunction
        .strErrorMessage = GetSystemMessage(.lngErrorCode)
    
        Call ClearCommError(lngHnd, lngErrorFlags, udtCommStat)
    
        .strErrorMessage = .strErrorMessage & "  COMM Error Flags = " & _
                Hex$(lngErrorFlags)
        
        SetCommErrorEx = .lngErrorCode
    End With
    
End Function

'-------------------------------------------------------------------------------
' CommSet - Modifies the serial port settings.
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'   strSettings - Communication settings.
'                 Example: "baud=9600 parity=N data=8 stop=1"
'
' Returns:
'   Error Code  - 0 = No Error.
'-------------------------------------------------------------------------------
Public Function CommSet(intPortID As Integer, strSettings As String) As Long
    
Dim lngStatus As Long
    
    On Error GoTo Routine_Error

    lngStatus = GetCommState(udtPorts(intPortID).lngHandle, _
        udtPorts(intPortID).udtDCB)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommSet (GetCommState)")
        GoTo Routine_Exit
    End If

    lngStatus = BuildCommDCB(strSettings, udtPorts(intPortID).udtDCB)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommSet (BuildCommDCB)")
        GoTo Routine_Exit
    End If

    lngStatus = SetCommState(udtPorts(intPortID).lngHandle, _
        udtPorts(intPortID).udtDCB)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommSet (SetCommState)")
        GoTo Routine_Exit
    End If

    lngStatus = 0

Routine_Exit:
    CommSet = lngStatus
    Exit Function

Routine_Error:
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommSet"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function

'-------------------------------------------------------------------------------
' CommClose - Close the serial port.
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'
' Returns:
'   Error Code  - 0 = No Error.
'-------------------------------------------------------------------------------
Public Function CommClose(intPortID As Integer) As Long
    
Dim lngStatus As Long
    
    On Error GoTo Routine_Error

    If udtPorts(intPortID).blnPortOpen Then
        lngStatus = CloseHandle(udtPorts(intPortID).lngHandle)
    
        If lngStatus = 0 Then
            lngStatus = SetCommError("CommClose (CloseHandle)")
            GoTo Routine_Exit
        End If
    
        udtPorts(intPortID).blnPortOpen = False
    End If

    lngStatus = 0

Routine_Exit:
    CommClose = lngStatus
    Exit Function

Routine_Error:
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommClose"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function

'-------------------------------------------------------------------------------
' CommFlush - Flush the send and receive serial port buffers.
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'
' Returns:
'   Error Code  - 0 = No Error.
'-------------------------------------------------------------------------------
Public Function CommFlush(intPortID As Integer) As Long
    
Dim lngStatus As Long
    
    On Error GoTo Routine_Error

    lngStatus = PurgeComm(udtPorts(intPortID).lngHandle, PURGE_TXABORT Or _
        PURGE_RXABORT Or PURGE_TXCLEAR Or PURGE_RXCLEAR)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommFlush (PurgeComm)")
        GoTo Routine_Exit
    End If

    lngStatus = 0

Routine_Exit:
    CommFlush = lngStatus
    Exit Function

Routine_Error:
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommFlush"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function

'-------------------------------------------------------------------------------
' CommRead - Read serial port input buffer.
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'   strData     - Data buffer.
'   lngSize     - Maximum number of bytes to be read.
'
' Returns:
'   Error Code  - 0 = No Error.
'-------------------------------------------------------------------------------
Public Function CommRead(intPortID As Integer, strData As String, _
    lngSize As Long) As Long

Dim lngStatus As Long
Dim lngRdSize As Long, lngBytesRead As Long
Dim lngRdStatus As Long, strRdBuffer As String * 1024
Dim lngErrorFlags As Long, udtCommStat As COMSTAT
    
    On Error GoTo Routine_Error

    strData = ""
    lngBytesRead = 0
    DoEvents
    
    ' Clear any previous errors and get current status.
    lngStatus = ClearCommError(udtPorts(intPortID).lngHandle, lngErrorFlags, _
        udtCommStat)

    If lngStatus = 0 Then
        lngBytesRead = -1
        lngStatus = SetCommError("CommRead (ClearCommError)")
        GoTo Routine_Exit
    End If
'---------------------------------------------------------------------------------
'    If udtCommStat.cbInQue > 0 Then
'        If udtCommStat.cbInQue > lngSize Then
'            lngRdSize = udtCommStat.cbInQue
'        Else
'            lngRdSize = lngSize
'        End If
'    Else
'        lngRdSize = 0
'    End If
'------------------------------------------------------------------------------------

    lngRdSize = lngSize
    If lngRdSize Then
        lngRdStatus = ReadFile(udtPorts(intPortID).lngHandle, strRdBuffer, _
            lngRdSize, lngBytesRead, udtCommOverlap)

        If lngRdStatus = 0 Then
            lngStatus = GetLastError
            If lngStatus = ERROR_IO_PENDING Then
                ' Wait for read to complete.
                ' This function will timeout according to the
                ' COMMTIMEOUTS.ReadTotalTimeoutConstant variable.
                ' Every time it times out, check for port errors.

                ' Loop until operation is complete.
                While GetOverlappedResult(udtPorts(intPortID).lngHandle, _
                    udtCommOverlap, lngBytesRead, True) = 0
                                    
                    lngStatus = GetLastError
                                        
                    If lngStatus <> ERROR_IO_INCOMPLETE Then
                        lngBytesRead = -1
                        lngStatus = SetCommErrorEx( _
                            "CommRead (GetOverlappedResult)", _
                            udtPorts(intPortID).lngHandle)
                        GoTo Routine_Exit
                    End If
                Wend
            Else
                ' Some other error occurred.
                lngBytesRead = -1
                lngStatus = SetCommErrorEx("CommRead (ReadFile)", _
                    udtPorts(intPortID).lngHandle)
                GoTo Routine_Exit
            
            End If
        End If
    
        strData = Left$(strRdBuffer, lngBytesRead)
    End If

Routine_Exit:
    CommRead = lngBytesRead
    Exit Function

Routine_Error:
    lngBytesRead = -1
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommRead"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function

'-------------------------------------------------------------------------------
' CommWrite - Output data to the serial port.
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'   strData     - Data to be transmitted.
'
' Returns:
'   Error Code  - 0 = No Error.
'-------------------------------------------------------------------------------
Public Function CommWrite(intPortID As Integer, strData As String) As Long
    
Dim i As Integer
Dim lngStatus As Long, lngSize As Long
Dim lngWrSize As Long, lngWrStatus As Long
    
    On Error GoTo Routine_Error
    
    ' Get the length of the data.
    lngSize = Len(strData)

    ' Output the data.
    lngWrStatus = WriteFile(udtPorts(intPortID).lngHandle, strData, lngSize, _
        lngWrSize, udtCommOverlap)

    ' Note that normally the following code will not execute because the driver
    ' caches write operations. Small I/O requests (up to several thousand bytes)
    ' will normally be accepted immediately and WriteFile will return true even
    ' though an overlapped operation was specified.
        
    DoEvents
    
    If lngWrStatus = 0 Then
        lngStatus = GetLastError
        If lngStatus = 0 Then
            GoTo Routine_Exit
        ElseIf lngStatus = ERROR_IO_PENDING Then
            ' We should wait for the completion of the write operation so we know
            ' if it worked or not.
            '
            ' This is only one way to do this. It might be beneficial to place the
            ' writing operation in a separate thread so that blocking on completion
            ' will not negatively affect the responsiveness of the UI.
            '
            ' If the write takes long enough to complete, this function will
            ' timeout
            ' according to the CommTimeOuts.WriteTotalTimeoutConstant variable.
            ' At that time we can check for errors and then wait some more.

            ' Loop until operation is complete.
            While GetOverlappedResult(udtPorts(intPortID).lngHandle, _
                udtCommOverlap, lngWrSize, True) = 0
                                
                lngStatus = GetLastError
                                    
                If lngStatus <> ERROR_IO_INCOMPLETE Then
                    lngStatus = SetCommErrorEx( _
                        "CommWrite (GetOverlappedResult)", _
                        udtPorts(intPortID).lngHandle)
                    GoTo Routine_Exit
                End If
            Wend
        Else
            ' Some other error occurred.
            lngWrSize = -1
                    
            lngStatus = SetCommErrorEx("CommWrite (WriteFile)", _
                udtPorts(intPortID).lngHandle)
            GoTo Routine_Exit
        
        End If
    End If
    
    For i = 1 To 10
        DoEvents
    Next
    
Routine_Exit:
    CommWrite = lngWrSize
    Exit Function

Routine_Error:
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommWrite"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function

'-------------------------------------------------------------------------------
' CommGetLine - Get the state of selected serial port control lines.
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'   intLine     - Serial port line. CTS, DSR, RING, RLSD (CD)
'   blnState    - Returns state of line (Cleared or Set).
'
' Returns:
'   Error Code  - 0 = No Error.
'-------------------------------------------------------------------------------
Public Function CommGetLine(intPortID As Integer, intLine As Integer, _
   blnState As Boolean) As Long
    
Dim lngStatus As Long
Dim lngComStatus As Long, lngModemStatus As Long
    
    On Error GoTo Routine_Error

    lngStatus = GetCommModemStatus(udtPorts(intPortID).lngHandle, lngModemStatus)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommReadCD (GetCommModemStatus)")
        GoTo Routine_Exit
    End If

    If (lngModemStatus And intLine) Then
        blnState = True
    Else
        blnState = False
    End If
        
    lngStatus = 0
        
Routine_Exit:
    CommGetLine = lngStatus
    Exit Function

Routine_Error:
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommReadCD"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function

'-------------------------------------------------------------------------------
' CommSetLine - Set the state of selected serial port control lines.
'
' Parameters:
'   intPortID   - Port ID used when port was opened.
'   intLine     - Serial port line. BREAK, DTR, RTS
'                 Note: BREAK actually sets or clears a "break" condition on
'                 the transmit data line.
'   blnState    - Sets the state of line (Cleared or Set).
'
' Returns:
'   Error Code  - 0 = No Error.
'-------------------------------------------------------------------------------
Public Function CommSetLine(intPortID As Integer, intLine As Integer, _
   blnState As Boolean) As Long
   
Dim lngStatus As Long
Dim lngNewState As Long
    
    On Error GoTo Routine_Error
    
    If intLine = LINE_BREAK Then
        If blnState Then
            lngNewState = SETBREAK
        Else
            lngNewState = CLRBREAK
        End If
    
    ElseIf intLine = LINE_DTR Then
        If blnState Then
            lngNewState = SETDTR
        Else
            lngNewState = CLRDTR
        End If
    
    ElseIf intLine = LINE_RTS Then
        If blnState Then
            lngNewState = SETRTS
        Else
            lngNewState = CLRRTS
        End If
    End If

    lngStatus = EscapeCommFunction(udtPorts(intPortID).lngHandle, lngNewState)

    If lngStatus = 0 Then
        lngStatus = SetCommError("CommSetLine (EscapeCommFunction)")
        GoTo Routine_Exit
    End If

    lngStatus = 0
        
Routine_Exit:
    CommSetLine = lngStatus
    Exit Function

Routine_Error:
    lngStatus = Err.Number
    With udtCommError
        .lngErrorCode = lngStatus
        .strFunction = "CommSetLine"
        .strErrorMessage = Err.Description
    End With
    Resume Routine_Exit
End Function



'-------------------------------------------------------------------------------
' CommGetError - Get the last serial port error message.
'
' Parameters:
'   strMessage  - Error message from last serial port error.
'
' Returns:
'   Error Code  - Last serial port error code.
'-------------------------------------------------------------------------------
Public Function CommGetError(strMessage As String) As Long
    
    With udtCommError
        CommGetError = .lngErrorCode
        strMessage = "Error (" & CStr(.lngErrorCode) & "): " & .strFunction & _
            " - " & .strErrorMessage
    End With
    
End Function






Attribute VB_Name = "APM"
Option Explicit
Public Sub SchrDatei(RxCOM As Integer, TxCOM As Integer, strData As String)
Rem Schreibt eine Zeile in eine Textdatei

  Dim intFF As Integer
  Dim strAblage As String
  Dim strText As String
  
  strAblage = _
  Workbooks("wMBusE-Endtester.xlsm").Path + "\Time.txt"
  intFF = FreeFile
    
  Open strAblage For Output As #intFF                 ' |fffd|ffnet oder erstellt Textdatei
                                                      ' Anstelle von Output kann auch Append stehen
                                                      ' (Output |fffd|berschreibt vorhandene Datei, Append f|fffd|gt eine neue Zeile hinzu)
                                                      
  strText = CStr(RxCOM) + ";" + CStr(TxCOM) + ";" + strData + ";" + CStr(Time)
                                                      
  Print #intFF, strText                               ' Schreibt welcher E/A empf|fffd|ngt bzw. sendet sowie den aktuellen Zeitstempel
  
  Close #intFF
  
End Sub

Public Sub LogDatei(strData As String)
  Rem Schreibt eine Zeile in eine Textdatei
  
  Dim intFF As Integer
  Dim strAblage As String
  Dim strText As String
  Dim strDName As String
  
  strDName = "Log_" + HPM.TB_Etikette
  
  
  strAblage = _
  Workbooks("wMBusE-Endtester.xlsm").Path + "\" + strDName + ".txt"
  intFF = FreeFile
    
  Open strAblage For Append As #intFF                 ' |fffd|ffnet oder erstellt Textdatei
                                                      ' Anstelle von Output kann auch Append stehen
                                                      ' (Output |fffd|berschreibt vorhandene Datei, Append f|fffd|gt eine neue Zeile hinzu)
                                                      
  strText = strData + " " + CStr(Now)
                                                      
  Print #intFF, strText                               ' Schreibt welcher E/A empf|fffd|ngt bzw. sendet sowie den aktuellen Zeitstempel
  
  Close #intFF
  
End Sub

Public Sub AnzeigeStatus(strProzessStatus As String)

  Dim intLIndex As Integer
  Dim intAnzahl As Integer
  
  Rem Anzahl der Prozess-Statusfenster
  intAnzahl = 1
  
  For intLIndex = 1 To intAnzahl
      HPM.Controls("ProzessStatus" & intLIndex).Caption = strProzessStatus
  Next intLIndex

End Sub

Public Sub AnzeigeBalken(lngLIndex)

  Dim intLIndex As Integer
  Dim intAnzahl As Integer
  
  Rem Anzahl der Balkenfenster
  intAnzahl = 1
  
  For intLIndex = 1 To intAnzahl
      HPM.Controls("Balken" & intLIndex).Width = lngLIndex * 2
  Next intLIndex

End Sub

Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Sub workbook_open()

  Call UserForm_Initialize
  Call AnzeigeBalken(0)
  Application.Visible = False
  HPM.Show (vbModeless)
  WertSetzenLong HKEY_LOCAL_MACHINE, "SYSTEM\CurrentControlSet\Control\COM Name Arbiter", "ComDB", &H3DD
  WertSetzenLong HKEY_LOCAL_MACHINE, "SYSTEM\CurrentControlSet\Control\usbflags", "IgnoreHWSerNum04036001", &H1
  
  For Each varPart In Array(4, 5)
    strMessage = PortTest(CInt(varPart))
    If strMessage Like "*erfolgreich*" Then
    Else
      MsgBox ("Der COM-Port " + CStr(varPart) + " steht zur Zeit nicht zur Verf|fffd|gung!" _
      + " Bitte |fffd|berpr|fffd|fen Sie die Verbindung zum Endtester")
      WertSetzenLong HKEY_LOCAL_MACHINE, "SYSTEM\CurrentControlSet\Control\usbflags", "IgnoreHWSerNum04036001", &H0
      WertSetzenLong HKEY_LOCAL_MACHINE, "SYSTEM\CurrentControlSet\Control\COM Name Arbiter", "ComDB", &H3FD
      Unload HPM
      Application.DisplayAlerts = False
      Application.Quit
      Exit Sub
    End If
  Next varPart
  
End Sub
Private Sub UserForm_Initialize()

    With HPM
        .TB_Baudrate = 19200
        .TB_Parity = "None"
        .TB_Stopbits = 1
        .TB_Databits = 8
        .TB_SteckplatzI = 4
        .TB_SteckplatzII = 5
        .TB_DUT = 6
    End With
    
End Sub



Attribute VB_Name = "HPM"
Attribute VB_Base = "0{180BF097-C793-420F-883E-BE38A1929EF8}{2DD0A52C-E63A-4AF4-8A22-9130CFFCF681}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public Sub CB_Ende_Click()

  Unload HPM
  WertSetzenLong HKEY_LOCAL_MACHINE, "SYSTEM\CurrentControlSet\Control\usbflags", "IgnoreHWSerNum04036001", &H0
  WertSetzenLong HKEY_LOCAL_MACHINE, "SYSTEM\CurrentControlSet\Control\COM Name Arbiter", "ComDB", &H3FD
  Application.DisplayAlerts = False
  Application.Quit
  
End Sub

Public Sub CB_Start_Click()
  
  Dim intPortID               As Integer            'COM1 - COM9
  Dim intZ                    As Integer
  Dim lngLIndex               As Long
  Dim strDaten                As String             'ASCII character set
  Dim strTest1                As String, _
      strTest2                As String, _
      strTest3                As String, _
      strPath                 As String, _
      strHex                  As String
  Dim blnEqualCharacterSet    As Boolean
  Dim dblStart                As Double, _
      dblEnd                  As Double
  Dim wsh                     As WshShell           'Verweis: Windows Script Host Object Model
  Dim fso                     As FileSystemObject
  Dim fsof
  Dim varContent              As Variant, _
      varPart                 As Variant
  
  Set wsh = CreateObject("WScript.Shell")
  Set fso = CreateObject("Scripting.FilesystemObject")
    strPath = Workbooks("BridgeConnectorEOL.xlsm").Path
  Set fsof = fso.OpenTextFile(strPath + "\Time.txt", _
    ForReading, TristateFalse)
    
  With HPM
    .L_Ergebnis.Caption = "Testergebnis"
    .TB_Result.Text = ""
    .TB_Etikette.Text = ""
    .TB_Result.BackColor = RGB(255, 255, 255)
  End With
  
  On Error GoTo Fehler
  
  Call AnzeigeBalken(0)
  Call AnzeigeStatus("Pr|fffd|fe Kommunikation RX!")
  
  HPM.Repaint
  
  Rem Last Byte as Random Number ###########
  strHex = "&H" + CStr(41 + Int(Rnd * 9 + 1) Mod 9)
  Rem #####################################
  
  strDaten = Chr(&HC) + Chr(&H8) + Chr(&H0) + Chr(&H41) + Chr(&H42) + _
    Chr(&H43) + Chr(&H44) + Chr(&H45) + Chr(&H46) + Chr(&H47) + _
    Chr(&H48) + Chr(&H49) + Chr(strHex)
  
  strTest1 = UebertragungTest1("baud=19200 parity=N data=8 stop=1", strDaten)
  HPM.TB_Result.Text = strTest1
  HPM.L_Ergebnis.Caption = "Testergebnis RX"
  
  If strTest1 <> "i.O." Then
    HPM.L_Ergebnis.Caption = "Testergebnis"
    Call AnzeigeBalken(0)
    Call AnzeigeStatus("")
    MsgBox "RX Kommunikation f e h l e r h a f t!"
    Exit Sub
  End If
    
  Call AnzeigeBalken(0)
  Call AnzeigeStatus("Pr|fffd|fe Kommunikation TX!")
  HPM.Repaint
  
  strTest2 = UebertragungTest2("baud=19200 parity=N data=8 stop=1", strDaten)
  HPM.TB_Result.Text = strTest2
  HPM.L_Ergebnis.Caption = "Testergebnis TX 1"
  
  strTest3 = UebertragungTest3("baud=19200 parity=N data=8 stop=1", strDaten)
  HPM.TB_Result.Text = strTest3
  HPM.L_Ergebnis.Caption = "Testergebnis TX 2"
  
  Call AnzeigeBalken(0)
  Call AnzeigeStatus("")
  HPM.Repaint
  
  If strTest2 = "i.O." And strTest3 = "i.O." Then
    With HPM
      HPM.L_Ergebnis.Caption = "Testergebnis TX/RX"
      HPM.TB_Result.BackColor = RGB(0, 255, 0)
      Do While .TB_Etikette.Text <> "Passed"
        .TB_Etikette.Text = InputBox("Bitte scannen Sie die " + _
          "- Passed - Etikette ein.", "PASSED ETIKETTE EINLESEN")
      Loop
    End With
  Else
    HPM.TB_Result.Text = "nicht i.O."
    HPM.TB_Result.BackColor = RGB(255, 0, 0)
    HPM.L_Ergebnis.Caption = "Testergebnis"
    Call AnzeigeBalken(0)
    Call AnzeigeStatus("")
    MsgBox "TX Kommunikation f e h l e r h a f t!"
  End If
      
Exit Sub
      
Fehler:   MsgBox ("Fehler bei der |fffd|bertragung")
  
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

  Unload HPM
  WertSetzenLong HKEY_LOCAL_MACHINE, "SYSTEM\CurrentControlSet\Control\usbflags", "IgnoreHWSerNum04036001", 0
  Application.DisplayAlerts = False
  Application.Quit
  
End Sub
  
Attribute VB_Name = "REGM"
Public Const REG_STR                    As Long = 1
Public Const REG_OPTION_NON_VOLATILE    As Long = 0
Public Const REG_SZ                     As Long = 1
Public Const KEY_ALL_ACCESS             As Long = &H3F
Public Const Stringl|fffd|ngeMax             As Long = 200
Public Const ERROR_SUCCESS              As Long = 0&
Public Const ERROR_NO_MORE_ITEMS        As Long = 259&
Public Const REG_EXPAND_SZ              As Long = 2
Public Const REG_BINARY                 As Long = 3
Public Const REG_DWORD                  As Long = 4
Public Const REG_MULTI_SZ               As Long = 5

Public Enum eRegistryPfade
  HKEY_CLASSES_ROOT = &H80000000
  HKEY_CURRENT_USER = &H80000001
  HKEY_LOCAL_MACHINE = &H80000002
  HKEY_USERS = &H80000003
  HKEY_CURRENT_CONFIG = &H80000005
End Enum

Declare Function RegQueryValueEx _
  Lib "advapi32.dll" _
  Alias "RegQueryValueExA" ( _
  ByVal hKey As Long, _
  ByVal lpValueName As String, _
  ByVal lpReserved As Long, _
      lpType As Long, _
  ByVal lpData As Any, _
      lpcbData As Long) As Long
        
Declare Function RegOpenKeyEx _
  Lib "advapi32.dll" _
  Alias "RegOpenKeyExA" ( _
  ByVal hKey As Long, _
  ByVal lpSubKey As String, _
  ByVal ulOptions As Long, _
  ByVal samDesired As Long, _
  phkResult As Long) As Long
    
Declare Function RegCloseKey _
  Lib "advapi32.dll" ( _
  ByVal hKey As Long) As Long
  
Declare Function RegSetValueEx_Str _
  Lib "advapi32.dll" _
  Alias "RegSetValueExA" ( _
  ByVal hKey As Long, _
  ByVal lpValueName As String, _
  ByVal Reserved As Long, _
  ByVal dwType As Long, _
  ByVal lpData As String, _
  ByVal cbData As Long _
) As Long

Declare Function RegSetValueEx _
     Lib "advapi32.dll" _
     Alias "RegSetValueExA" ( _
     ByVal hKey As Long, _
     ByVal lpValueName As String, _
     ByVal Reserved As Long, _
     ByVal dwType As Long, _
     lpData As Any, _
     ByVal cbData As Long _
) As Long
    
Public Function WertLesenString(lngHauptpfad As eRegistryPfade, strPfad As String, strSchluesselname As String) As String

  Dim lngHandle   As Long
  Dim strBuffer   As String
  Dim lngBuffer   As Long
  Dim lngResult   As Long
  
  lngHandle = SchluesselOeffnen(HKEY_LOCAL_MACHINE, strPfad)
  
  If Not lngHandle = 0 Then
    strBuffer = Space(255)
    lngBuffer = Len(strBuffer)
    lngResult = RegQueryValueEx(lngHandle, strSchluesselname, 0&, REG_SZ, ByVal strBuffer, lngBuffer)
    WertLesenString = Left(strBuffer, lngBuffer)
    SchluesselSchliessen lngHandle
  End If

End Function

Public Function SchluesselOeffnen(lngHauptpfad As eRegistryPfade, strPfad As String) As Long

  Dim lngHandle As Long
  
  RegOpenKeyEx lngHauptpfad, strPfad, 0, KEY_ALL_ACCESS, lngHandle
  SchluesselOeffnen = lngHandle

End Function

Public Function SchluesselSchliessen(lngHandle As Long) As Long

  SchluesselSchliessen = RegCloseKey(lngHandle)

End Function

Public Function WertSetzenLong(lngHauptpfad As eRegistryPfade, strPfad As String, strSchluesselname As String, _
  lngSchluesselwert As Long) As Long

  Dim lngHandle As Long
  Dim lngLaenge As Long

  lngLaenge = Len(lngSchluesselwert)

  lngHandle = SchluesselOeffnen(lngHauptpfad, strPfad)

  WertSetzenLong = RegSetValueEx(lngHandle, strSchluesselname, 0&, REG_BINARY, lngSchluesselwert, lngLaenge)

End Function





Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' y:-jT

INQUEST-PP=macro
