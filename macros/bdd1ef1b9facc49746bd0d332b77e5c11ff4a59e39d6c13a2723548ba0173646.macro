Attribute VB_Name = "Mod1Extenso"
'"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
'" FUN|fffd||fffd|O:        fExtenso    (Spell number in Portuguese)
'"
'" AUTOR & DATA:  FRANCISCO ORLANDO MAGALH|fffd|ES FILHO  07 Nov 2002
'"                Microsoft MVP - Excel
'"                Santa Quit|fffd|ria-Ce - Brazil
'"
'" CONTATO:       orlando@cpap.com.br
'" WEB SITE:      http://cpap.com.br/orlando/
'"
'" DESCRI|fffd||fffd|O:     Escreve por extenso em portugu|fffd|s qualquer n|fffd|mero cardinal com
'"                ou sem fra|fffd||fffd|o com ou sem unidade masculina ou feminina. A par-
'"                te fracion|fffd|ria, se houver, pode ser descrita de tr|fffd|s maneiras.
'"
'" ARGUMENTOS:    Num - O n|fffd|mero cardinal com ou sem fra|fffd||fffd|o a descrever;
'"                  Maior n|fffd|mero permitido: 1 trilh|fffd|o menos 0.01 (999.999.999.999,99);
'"                  Menor fra|fffd||fffd|o sens|fffd|vel: 1 trilion|fffd|simo (0,000.000.000.001).
'"                Fra|fffd|Tipo - 1, 2, 3, 4 ou 5 para as maneiras de ler(descrever) a fra|fffd||fffd|o
'"                  (Opcional - 3 padr|fffd|o ou 1 se houver UndNomeSing)
'"                  1 - L|fffd| a fra|fffd||fffd|o em centavos. Ideal para Moeda;
'"                  2 - L|fffd| a v|fffd|rgula decimal, cada zero e o n|fffd|mero restante como
'"                    inteiro. Ideal para percentual;
'"                  3 - L|fffd| a fra|fffd||fffd|o em d|fffd|cimos at|fffd| bilion|fffd|simos. Ideal para n|fffd|mero puro;
'"                  4 - N|fffd|o l|fffd| a fra|fffd||fffd|o por extenso, mas a escreve como uma fra|fffd||fffd|o  com
'"                    denominador de 100, 1000, 1000000... Ideal para  moeda  quando em
'"                    fra|fffd||fffd|es menores do que um centavo;
'"                  5 - L|fffd| a fra|fffd||fffd|o em c|fffd|ntimos. Ideal para moeda Euro, mas centavos
'"                    tamb|fffd|m pode ser usado;
'"                UndNomeSing - Nome da unidade no singular (Opcional - A aus|fffd|ncia
'"                  indica n|fffd|mero puro);
'"                UndNomePlur - Nome da unidade no plural (Opcional - Na aus|fffd|ncia a
'"                  pluraliza|fffd||fffd|o ser|fffd| feita automaticamente a partir de UndNomeSing);
'"                UndMasc - Indica o g|fffd|nero da unidade: Verdadeiro (masculino) ou Falso
'"                  (feminino) (Opcional - Padr|fffd|o Verdadeiro (masculino));
'"                UmMil - Escreve 1.000 completo sem omitir 'um': Verdadeiro (Sim, 'um mil')
'"                  ou Falso (N|fffd|o, 'mil') (Opcional - Padr|fffd|o Verdadeiro (Completo));
'"                VirgEntrMilh - Indica intercala|fffd||fffd|o de v|fffd|rgula entre milhares: Verdadeiro (Sim)
'"                  ou Falso (N|fffd|o) (Opcional - Padr|fffd|o Falso (N|fffd|o intercala));
'"                CaixaAlta - Formata letras em mai|fffd|scalas/min|fffd|sculas (Opcional - Padr|fffd|o 1):
'"                  1 - todas min|fffd|scalas; 2 - Senten|fffd|a inteira (S|fffd| a 1|fffd| mai|fffd|scula);
'"                  3 - Mai|fffd|scala/min|fffd|sculas (1|fffd| Mai|fffd|scula em Cada Palavra); 4 - TODAS MAI|fffd|SCULAS.
'"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Option Explicit

Function fExtenso(Num As Double, Optional Fra|fffd|Tipo As Integer, Optional UndNomeSing As String, _
        Optional UndNomePlur As String, Optional UndMasc As Boolean = True, _
        Optional UmMil As Boolean = True, Optional VirgEntrMilh As Boolean = False, _
        Optional CaixaAlta As Long = 1) As String
    Dim ExtensInt As String
    Dim ExtensFrac As String
    Dim UndNome As String
    Dim FracNome As String
    Dim Signif As Long
    Dim NumText As String

    If Num > 999999999999.99 Or Num < 0 Then
        fExtenso = "Erro! (Valores v|fffd|lidos: >=0 e < 1 trilh|fffd|o)"
        Exit Function
    End If

    'Preparando nome da unidade, singular e plural
    If UndNomePlur = "" Then UndNomePlur = IIf(UndNomeSing = "", "", Pluralizar(UndNomeSing))
    'Se a fun|fffd||fffd|o Pluralizar falhar palavras estrangeiras ou em exce|fffd||fffd|es portuguesas, o argumento UndNomePlur pode ser usado.

    'Extenso parte inteira
    ExtensInt = fExtensoInt(Int(CDec(Num)), UndMasc, UmMil, VirgEntrMilh)

    'Extenso parte fracion|fffd|ria
    If Fra|fffd|Tipo = 0 And UndNomeSing = "" Then Fra|fffd|Tipo = 3
    If Fra|fffd|Tipo = 0 And UndNomeSing <> "" Then Fra|fffd|Tipo = 1
    Select Case Fra|fffd|Tipo
    Case 1, 5   'L|fffd| fra|fffd||fffd|o em centavos ou c|fffd|ntimos. Ideal para Moeda
        Num = Format(Num, "0.00") * 1   'Round(Num,2)
        ExtensFrac = fExtensoInt((Num - Int(CDec(Num))) * 100, True, UmMil, VirgEntrMilh)
        If ExtensInt = "" And ExtensFrac = "" Then ExtensInt = "zero"

        'Nome da unidade no singular ou plural
        UndNome = IIf(Num < 1, IIf(Num = 0, " " & UndNomePlur, ""), IIf(UndNomeSing = "" Or Right(ExtensInt, 1) = " ", "", " ") & IIf(Int(CDec(Num)) = 1, UndNomeSing, UndNomePlur) & IIf(Num = Int(CDec(Num)), "", " e "))
        'Nome da fra|fffd||fffd|o no singular ou plural
        FracNome = IIf(Num = Int(CDec(Num)), "", IIf(Int(CDec(Num * 100)) - Int(CDec(Num)) * 100 = 1, IIf(Fra|fffd|Tipo = 5, " c|fffd|ntimo", " centavo"), IIf(Fra|fffd|Tipo = 5, " c|fffd|ntimos", " centavos")))

        fExtenso = ExtensInt & UndNome & ExtensFrac & FracNome

    Case 2    'L|fffd| a v|fffd|rgula decimal, cada zero e o n|fffd|mero restante como inteiro. Ideal para percentual.
        ExtensFrac = Num - Int(CDec(Num))
        If ExtensFrac = 0 Then
            fExtenso = ExtensInt
        Else
            ExtensFrac = Format(ExtensFrac, "0.############")
            ExtensFrac = Mid(ExtensFrac, 3, 15)
            fExtenso = IIf(ExtensInt = "", "zero", ExtensInt) & " v|fffd|rgula"
            Do While Left(ExtensFrac, 1) = "0"
                fExtenso = fExtenso & " zero"
                ExtensFrac = Mid(ExtensFrac, 2, 15)
            Loop
            fExtenso = fExtenso & " " & fExtensoInt(ExtensFrac * 1, UndMasc, UmMil, VirgEntrMilh)
        End If

        If fExtenso = "" Then fExtenso = "zero"

        fExtenso = fExtenso & IIf(UndNomeSing <> "", " ", "") & IIf(Num = 1, UndNomeSing, UndNomePlur)

    Case 3    'L|fffd| a fra|fffd||fffd|o de d|fffd|cimo a bilion|fffd|simo. Ideal para n|fffd|mero puro.
        ExtensFrac = Num - Int(CDec(Num))
        If ExtensFrac = 0 Then
            ExtensFrac = ""
        Else
            ExtensFrac = Format(ExtensFrac, "0.############")
            Signif = Len(ExtensFrac) - 2
            If Signif > 3 And Signif <> 6 And Signif <> 9 And Signif <> 12 Then Signif = Int(CDec(Signif / 3)) * 3 + 3
            If Signif > 0 Then
                ExtensFrac = Format(ExtensFrac, "0.000000000000")
                ExtensFrac = fExtensoInt(Mid(ExtensFrac, 3, Signif) * 1, True, UmMil, VirgEntrMilh)
                FracNome = Choose(Signif, "d|fffd|cimo", "cent|fffd|simo", "mil|fffd|simo", , , "milion|fffd|simo", , , "bilion|fffd|simo", , , "trilion|fffd|simo")
                FracNome = " " & FracNome & IIf(ExtensFrac = "um", "", "s")
            Else
                ExtensFrac = ""
            End If
        End If

        If ExtensInt = "" And ExtensFrac = "" Then ExtensInt = "zero"

        If UndNomeSing = "" Then
            fExtenso = ExtensInt & IIf(ExtensInt <> "" And ExtensFrac <> "", ", e ", "") & ExtensFrac & FracNome
        Else
            'Nome da unidade no singular ou plural
            UndNome = IIf(Num < 1, IIf(Num = 0, " " & UndNomePlur, ""), IIf(UndNomeSing = "" Or Right(ExtensInt, 1) = " ", "", " ") & IIf(Int(CDec(Num)) = 1, UndNomeSing, UndNomePlur) & IIf(Num = Int(CDec(Num)), "", " e "))
            'Nome da fra|fffd||fffd|o no singular ou plural
            FracNome = IIf(Num = Int(CDec(Num)), "", FracNome & " de " & UndNomeSing)

            fExtenso = ExtensInt & UndNome & ExtensFrac & FracNome
        End If

    Case 4    'N|fffd|o l|fffd| a fra|fffd||fffd|o mas escreve como fra|fffd||fffd|o com um denominador de 100, 1000, 1000000... Ideal para moeda com fra|fffd||fffd|o de mil|fffd|simo
        ExtensFrac = Num - Int(CDec(Num))
        If ExtensFrac = 0 Then
            ExtensFrac = "nenhum/100"
        Else
            ExtensFrac = Format(ExtensFrac, "0.############")
            Signif = Len(ExtensFrac) - 2
            If Signif > 3 And Signif <> 6 And Signif <> 9 And Signif <> 12 Then Signif = Int(CDec(Signif / 3)) * 3 + 3
            If Signif > 1 Then
                ExtensFrac = (Num - Int(CDec(Num))) * 10 ^ Signif
                ExtensFrac = ExtensFrac & "/" & 10 ^ Signif
            Else
                ExtensFrac = (Num - Int(CDec(Num))) * 10 ^ 2
                ExtensFrac = ExtensFrac & "/100"
            End If
        End If

        If ExtensInt = "" Then ExtensInt = "zero"

        'Nome da unidade no singular ou plural
        UndNome = IIf(Int(CDec(Num)) = 1, UndNomeSing, UndNomePlur)

        fExtenso = ExtensInt & " " & UndNome & " e " & ExtensFrac
    End Select

    Select Case CaixaAlta
    Case 1
        fExtenso = LCase(fExtenso)
    Case 2
        fExtenso = UCase(Left(fExtenso, 1)) & Mid(fExtenso, 2)
    Case 3
        fExtenso = StrConv(fExtenso, vbProperCase)
        fExtenso = MyReplace(fExtenso, " E ", " e ")
    Case 4
        fExtenso = StrConv(fExtenso, vbUpperCase)
    End Select

    'Preservar caixa alta de letra antes de ponto em UndNome
    Dim lPos As Long
    Dim lPos1 As Long
    Do While InStr(lPos + 1, UndNome, ".") > 1
        lPos = InStr(lPos + 1, UndNome, ".")
        lPos1 = InStr(lPos1 + 1, fExtenso, ".")
        fExtenso = Left(fExtenso, lPos1 - 2) & Mid(UndNome, lPos - 1, 1) & Mid(fExtenso, lPos1)
    Loop
End Function

Private Function fExtensoInt(Num As Double, UndMasc As Boolean, UmMil As Boolean, VirgEntrMilh As Boolean) As String
'Gram|fffd|tica portuguesa:
'Regra Geral: N|fffd|o se intercala a conjun|fffd||fffd|o 'e' e nem v|fffd|rgula entre posi|fffd||fffd|es de milhar.
'Exce|fffd||fffd|o: Se a milhar posterior for menor que 100 ou for centena inteira (100,200,300...)
'Alguns gram|fffd|ticos n|fffd|o aceitam essa exce|fffd||fffd|o e outros j|fffd| aceitam a v|fffd|rgula.
'A vari|fffd|vel ConjExc ativa/desativa a exce|fffd||fffd|o
'A vari|fffd|vel VirgEntrMilh usa v|fffd|rgula entre milhares

   Dim NumText As String
   Dim Ce As String
   Dim Ma As String
   Dim M|fffd| As String
   Dim Bi As String
   Dim f As String
   Dim ConjExc As Boolean
   ConjExc = True
   If VirgEntrMilh Then ConjExc = False

   If Num = 0 Then
      fExtensoInt = ""
      Exit Function
   End If

   NumText = Format(Num, "000,000,000,000")

   '1|fffd| Posi|fffd||fffd|o de milhar, Centenas
   Ce = Mid(NumText, 13, 3)
   '2|fffd| Posi|fffd||fffd|o de milhar, Milhares
   Ma = Mid(NumText, 9, 3)
   '3|fffd| Posi|fffd||fffd|o de milhar, Milh|fffd|es
   M|fffd| = Mid(NumText, 5, 3)
   '4|fffd| Posi|fffd||fffd|o de milhar, Bilh|fffd|es
   Bi = Mid(NumText, 1, 3)

   f = fMilharText(Bi, UndMasc) & IIf(Bi > 0, IIf(Bi > 1, " bilh|fffd|es", " bilh|fffd|o"), "")

   f = f & IIf(VirgEntrMilh And Bi > 0 And M|fffd| > 0, ", ", IIf(Bi > 0 And M|fffd| > 0, " ", ""))
   f = f & IIf(ConjExc And Bi > 0 And M|fffd| > 0 And (M|fffd| < 100 Or Right(M|fffd|, 2) = "00"), "e ", "")

   f = f & fMilharText(M|fffd|, UndMasc) & IIf(M|fffd| > 0, IIf(M|fffd| > 1, " milh|fffd|es", " milh|fffd|o"), "")

   f = f & IIf(VirgEntrMilh And Bi + M|fffd| > 0 And Ma > 0, ", ", IIf(Bi + M|fffd| > 0 And Ma > 0, " ", ""))
   f = f & IIf(ConjExc And Bi + M|fffd| > 0 And Ma > 0 And (Ma < 100 Or Right(Ma, 2) = "00"), "e ", "")

   f = f & fMilharText(Ma, UndMasc) & IIf(Ma > 0, IIf(Ma > 1, " mil", " mil"), "")
   If Not UmMil Then If f = "um mil" Then f = "mil"  'Omitir 'um' em 'um mil'

   f = f & IIf(VirgEntrMilh And Bi + M|fffd| + Ma > 0 And Ce > 0, ", ", IIf(Bi + M|fffd| + Ma > 0 And Ce > 0, " ", ""))
   f = f & IIf(ConjExc And Bi + M|fffd| + Ma > 0 And Ce > 0 And (Ce < 100 Or Right(Ce, 2) = "00"), "e ", "")

   f = f & fMilharText(Ce, UndMasc) & IIf(Ce > 0, ",", "")

   f = IIf(Right(f, 1) = ",", Mid(f, 1, Len(f) - 1), f)
   f = IIf(Right(f, 2) = "|fffd|o", f & " de", f)
   f = IIf(Right(f, 3) = "|fffd|es", f & " de", f)
   fExtensoInt = f
End Function

Private Function fMilharText(NumText As String, UndMasc As Boolean)
'Gram|fffd|tica portuguesa:
'Regra Geral: Intercala-se a conjun|fffd||fffd|o 'e' entre centenas, dezenas e unidades

   Dim UndText As String
   Dim DezenaText As String
   Dim CentenaText As String
   Const ConjDez_Un = " e "   'Conjun|fffd||fffd|o entre Dezena e Unidade
   Const ConjCen_Dez = " e "   'Conjun|fffd||fffd|o entre Centena e Unidade

   '  Unidade texto
   If Mid(NumText, 2, 1) <> "1" Then
      UndText = Choose(Mid(NumText, 3, 1) + 1, "", IIf(UndMasc, "um", "uma"), _
            IIf(UndMasc, "dois", "duas"), "tr|fffd|s", "quatro", "cinco", "seis", _
            "sete", "oito", "nove")
   Else
      UndText = ""
   End If

   'Dezena texto
   If Mid(NumText, 2, 1) <> "1" Then
      DezenaText = Choose(Mid(NumText, 2, 1) + 1, "", "dez", "vinte", _
            "trinta", "quarenta", "cinquenta", "sessenta", "setenta", _
            "oitenta", "noventa")
   Else
      DezenaText = Choose(Mid(NumText, 3, 1) + 1, "dez", "onze", _
            "doze", "treze", "quatorze", "quinze", "dezesseis", _
            "dezessete", "dezoito", "dezenove")
   End If

   'Centena texto
   If UndMasc Then
      CentenaText = Choose(Mid(NumText, 1, 1) + 1, "", "cento", "duzentos", _
            "trezentos", "quatrocentos", "quinhentos", "seiscentos", _
            "setecentos", "oitocentos", "novecentos")
   Else
      CentenaText = Choose(Mid(NumText, 1, 1) + 1, "", "cento", "duzentas", _
            "trezentas", "quatrocentas", "quinhentas", "seiscentas", _
            "setecentas", "oitocentas", "novecentas")
   End If
   If Mid(NumText, 1, 1) = "1" And Mid(NumText, 2, 2) = "00" Then CentenaText = "cem"

   'Milhar texto
   fMilharText = CentenaText & IIf(Mid(NumText, 2, 2) * 1 > 0 And CentenaText <> "", ConjCen_Dez, "") _
         & DezenaText & IIf(Mid(NumText, 2, 2) * 1 <= 19 Or Right(NumText, 1) = "0", "", ConjDez_Un) _
         & UndText
End Function

Function Pluralizar(Sing As String) As String
   Dim e As String
   
   Dim IsLCase As Boolean
   
   IsLCase = Right(Sing, 1) = LCase(Right(Sing, 1))
   
   'Regra geral:
   Pluralizar = IIf(Sing = "", "", Sing & IIf(IsLCase, "s", "S"))

   'Exce|fffd||fffd|es: (Quase todas)
   ' Nomes terminados em al, el, ol, ul, il
   e = LCase(Right(Sing, 2))
   If e = "al" Or e = "el" Or e = "ol" Or e = "ul" Or e = "il" Then Pluralizar = Left(Sing, Len(Sing) - 1) & IIf(IsLCase, "is", "IS")
   'Nomes terminados em il
   If e = "il" Then Pluralizar = Left(Sing, Len(Sing) - 2) & IIf(IsLCase, "is", "IS")
   ' Nomes terminados em r, s, z
   e = LCase(Right(Sing, 1))
   If e = "r" Or e = "s" Or e = "z" Then Pluralizar = Sing & IIf(IsLCase, "es", "ES")
   ' Nomes terminados em m
   If e = "m" Then Pluralizar = Left(Sing, Len(Sing) - 1) & IIf(IsLCase, "ns", "NS")
   ' Nomes terminados em x
   If e = "x" Then Pluralizar = Sing
End Function

Private Function MyReplace(vText As String, vTxtFind As String, vTxtRep As String)
'Word 6.0 VBA doesn't have Replace function
    Dim lPos As Long
    lPos = 1 - Len(vTxtRep)
vStart:
    lPos = InStr(lPos + Len(vTxtRep), vText, vTxtFind)
    If lPos = 0 Or vTxtFind = "" Then
        MyReplace = vText
        Exit Function
    End If
    vText = Left(vText, lPos - 1) & vTxtRep & Right(vText, Len(vText) - lPos - Len(vTxtFind) + 1)
    GoTo vStart
End Function


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
