Attribute VB_Name = "Module1"
'$Id: generatecsvfile_from_cw.bas,v 1.2 2010/05/12 16:28:45 s.deangelis Exp $
Sub GenerateCSV_Click()
    
    Dim firstRow, lastRow As Integer
    Dim table As String
    Dim sourceAddress As String
    Dim sourceRange As Range
    Dim c As Integer
    Dim r As Long
    Dim IndexA As Integer
    Dim allNull As String
    Dim tLine As String
    Dim checkRowCol As String
    Dim notAllow As Variant
    Dim iRet As Integer
    Dim notAllowList As Variant
    Dim notAllowFields As Variant
    Dim pos As Integer
    Dim headerRowVal As String
    
    table = "IssueTranche"
    
    firstRow = 6
    headerRow = firstRow - 1
    lastRow = 2000
    notAllowList = Array(",")
    notAllowFields = Array("ISSUER CODE", "WARRANT TYPE", "WARRANT STYLE", "STRIKE PRICE CURRENCY", "STRIKE PRICE", "EXPIRY DATE", "SHORT NAME", "LONG NAME", "TRADABLE INSTRUMENT TYPE", "UNDERLYING IDENTIFIER")
   
    sourceAddress = "A" & CStr(firstRow) & ": AO" & CStr(lastRow)
    
    Set sourceRange = Range(sourceAddress)
   
    For IndexA = 1 To lastRow Step 1
        
        allNull = ""
        For c = 1 To sourceRange.Areas(1).Columns.Count
                tLine = ""
                On Error Resume Next
                tLine = sourceRange.Areas(1).Cells(IndexA, c).Value
                'Check on forbidden char
                For Each notAllow In notAllowList
                    headerRowVal = Cells(headerRow, c).Value
                    If (InStr(tLine, notAllow) <> 0) Then
                        pos = Application.Match(headerRowVal, notAllowFields, 0)
                        If Not IsError(pos) And (pos <> 0) Then
                            checkRowCol = "Comma in field " + headerRowVal + " at line " + Str(IndexA + headerRow) + "."
                            iRet = MsgBox(checkRowCol, vbCritical)
                            Exit Sub
                        End If
                    End If
                Next
                allNull = allNull & tLine
                On Error GoTo 0
        Next c
        
        If allNull <> "" Then
            
            r = IndexA + 5
            
            'Check on Mandatory Fields
            
            If ((Range("A" & r).Value = "")) Then
                Range("A" & r).Select
                MsgBox " ISSUER CODE is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("B" & r).Value = "")) Or ((Range("B" & r).Value = Null)) Then
                Range("B" & r).Select
                MsgBox " ADMISSION DATE is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If (Len(Range("C" & r).Value) < 1) Then
                Range("C" & r).Select
                MsgBox " NUMBER ISSUED is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("D" & r).Value = "")) Then
                Range("D" & r).Select
                MsgBox " ISIN is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If (Not (checkIsin(Range("D" & r).Value) = True)) Then
                Range("D" & r).Select
                MsgBox " Only Alphanumeric values are Permitted for ISIN! ", vbCritical
                Exit Sub
            End If
            
            If ((Range("E" & r).Value = "")) Then
                Range("E" & r).Select
                MsgBox " SEDOL is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("F" & r).Value = "")) Then
                Range("F" & r).Select
                MsgBox " TIDM is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("G" & r).Value = "")) Then
                Range("G" & r).Select
                MsgBox " COUNTRY OF REGISTER is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("H" & r).Value = "")) Then
                Range("H" & r).Select
                MsgBox " SEGMENT DESCRIPTION is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("I" & r).Value = "")) Then
                Range("I" & r).Select
                MsgBox " SECTOR DESCRIPTION is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("J" & r).Value = "")) Then
                Range("J" & r).Select
                MsgBox " TRADING CURRENCY is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("K" & r).Value = "")) Then
                Range("K" & r).Select
                MsgBox " FULL NAME OF UNDERLYING is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("L" & r).Value = "")) Then
                Range("L" & r).Select
                MsgBox " UNDERLYING IDENTIFIER is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("M" & r).Value = "")) Then
                Range("M" & r).Select
                MsgBox " UNDERLYING CATEGORY is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("N" & r).Value = "")) Then
                Range("N" & r).Select
                MsgBox " INSTRUMENT TYPE is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("O" & r).Value = "")) Then
                Range("O" & r).Select
                MsgBox " MIFIR IDENTIFIER is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("S" & r).Value = "")) Then
                Range("S" & r).Select
                MsgBox " EMS VALUE is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("AD" & r).Value = "")) Then
                Range("AD" & r).Select
                MsgBox " SETTLEMENT TYPE is Mandatory!", vbCritical
                Exit Sub
            End If
            
            'If ((Range("AC" & r).Value = "")) Then
            '    Range("AC" & r).Select
            '    MsgBox " EXPIRY DATE is Mandatory!", vbCritical
            '    Exit Sub
            'End If
            
            If ((Range("AF" & r).Value = "")) And Not (((Range("I" & r).Value = "Off order book inv. Products")) Or ((Range("I" & r).Value = "Off order book leveraged prdts"))) Then
                Range("AF" & r).Select
                MsgBox " MARKET MAKER MNEMONIC is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("AG" & r).Value = "")) Then
                Range("AG" & r).Select
                MsgBox " INDICATIVE PRICE is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If ((Range("AH" & r).Value = "")) Then
                Range("AH" & r).Select
                MsgBox " SECURITY DESCRIPTION is Mandatory!", vbCritical
                Exit Sub
            End If
            
            If (Len(Range("AI" & r).Value) > 15) Then
                Range("AI" & r).Select
                MsgBox "The Short Name must be less than 15 characters", vbCritical
                Exit Sub
            End If
            
            If (Len(Range("AJ" & r).Value) > 40) Then
                Range("AJ" & r).Select
                MsgBox "The long Name must be less than 40 characters", vbCritical
                Exit Sub
            End If
            
            If (Len(Range("AL" & r).Value) <> "") Then
                If (Not (checkUnderlyingIsin(Range("AL" & r).Value) = True)) Then
                    Range("AL" & r).Select
                    MsgBox "Field Underlying ISIN must be list of valid ISIN comma (,) separed!", vbCritical
                    Exit Sub
                End If
            End If
            
            If ((Range("AM" & r).Value = "")) Then
                Range("AM" & r).Select
                MsgBox " ISSUANCE DATE OF THE BOND is Mandatory!", vbCritical
                Exit Sub
            End If
                
        End If
    Next

    Call generatecsvfile
End Sub

Public Function generatecsvfile()
    Dim sourceRange As Range
    Dim columnNames As New Collection
    Dim sourceAddress As String
    Dim lineString As String
    Dim tLine As String
    Dim targetFile As String
    Dim sc As String * 1
    Dim r As Long
    Dim c As Integer
    Dim fromRow As Integer
    Dim toRow As Integer
    Dim fn As Integer
    Dim IndexA As Integer
    Dim allNull As String
    
    Application.DisplayAlerts = True
    sc = "|"
    targetFile = "_export.csv"
    targetFile = Strings.Mid(ActiveWorkbook.FullName, 1, InStrRev(ActiveWorkbook.FullName, ".") - 1) & targetFile
    
    fromRow = 5
    toRow = 250
    sourceAddress = "A" & CStr(fromRow) & ": AO" & CStr(toRow)
    
    Set sourceRange = Range(sourceAddress)
    On Error GoTo NotAbleToExport
    Set columnNames = New Collection
    fn = FreeFile
    Open targetFile For Output As #fn ' open textfile for new input
    On Error GoTo 0
        
    For IndexA = 1 To sourceRange.Areas.Count
        For r = 1 To sourceRange.Areas(IndexA).Rows.Count
                      
            lineString = ""
            allNull = ""
            For c = 1 To sourceRange.Areas(IndexA).Columns.Count
                    tLine = ""
                    On Error Resume Next
                    If IsDate(sourceRange.Areas(IndexA).Cells(r, c).Value) And Not IsNumeric(sourceRange.Areas(IndexA).Cells(r, c).Value) Then
                        tLine = Format(sourceRange.Areas(IndexA).Cells(r, c).Value, "dd/mm/yyyy")
                    Else
                        tLine = sourceRange.Areas(IndexA).Cells(r, c).Value
                    End If
                    tLine = Replace(tLine, Chr(13), " ")
                    tLine = Replace(tLine, Chr(10), " ")
                    allNull = allNull & tLine
                    On Error GoTo 0
                    lineString = lineString & tLine & sc
            Next c

            If allNull <> "" Then
                Print #fn, lineString
            End If
        Next r
    Next IndexA
        
    Close #fn ' close the textfile
    On Error GoTo 0
    MsgBox ("File saved in " + targetFile)
    GoTo OK
NotAbleToExport:
    Set sourceRange = Nothing
    Application.StatusBar = False
    MsgBox ("Error on write file: " + targetFile)
OK:
End Function

Function checkIsin(strData As String) As String

    Dim RE As Object
    Dim returnValue
    returnValue = False
    
    Set RE = CreateObject("vbscript.regexp")
    With RE
        .MultiLine = False
        .Global = False
        .IgnoreCase = True
        .Pattern = "^[a-zA-Z0-9]+$"
    End With
    
    If RE.Test(strData) Then
        returnValue = True
    End If
    
    checkIsin = returnValue

End Function

Function checkUnderlyingIsin(strData As String) As String

    Dim returnValue
    returnValue = True
    Dim UnderlyingArray() As String
    
    UnderlyingArray() = Split(strData, ",")
    Dim LastNonEmpty As Integer
    Dim i As Integer
    
    For i = LBound(UnderlyingArray) To UBound(UnderlyingArray)
        If UnderlyingArray(i) <> "" Then
            returnValue = returnValue And (checkIsin(UnderlyingArray(i))) = True
        End If
    Next
    
    checkUnderlyingIsin = returnValue

End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
