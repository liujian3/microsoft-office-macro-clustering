Attribute VB_Name = "ApproverF"
Attribute VB_Base = "0{EF2C4D28-8D7A-48D9-8C42-DD5E5F7ABAC2}{E53B4FD6-0E14-4F15-AA90-5FBD13709515}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub OKButton_Click()

If ApproverF.Interim.Value = True Then                          'procedure if Interim report
  pSignature = "interim"
ElseIf ApproverF.RSB.Value = True Then                              'procedure if Adam is approving
  pSignature = "AF"
'ElseIf ApproverF.RSB.Value = True Then                              'procedure if Richard is approving
'  pSignature = "RSB"
'ElseIf ApproverF.RWB.Value = True Then                              'procedure if Rob is approving
'  pSignature = "RWB"
'ElseIf ApproverF.MAH.Value = True Then                              'procedure if Mike is approving
'  pSignature = "MAH"
ElseIf ApproverF.ND.Value = True Then                               'procedure if Neil is approving
  pSignature = "ND"
ElseIf ApproverF.MH.Value = True Then                               'procedure if Lee is approving
  pSignature = "MKH"
End If

Unload ApproverF
End Sub
Attribute VB_Name = "CSV"
' Format: one line per sampnum, dets accross
Function SUEZRRLF_CSV()
  SUEZRR_LF = False
  bSubconFound = False
  bSubconDontAsk = False
  
  sJob = Sheets("Rawdata").Cells(7, 1).Value
  sSite = Sheets("Rawdata").Cells(6, 2).Value 'conttitle
  ' Set other values
  sRecvdte = Sheets("Rawdata").Cells(2, 2).Value
  sCmpdte = Sheets("Rawdata").Cells(10, 2).Value
  ' ? is this correct
  sLabdate = Sheets("Rawdata").Cells(9, 4).Value
  sTurnaround = 10
  'sLabStatus = "OK"
  
  
  iCSVRow = 2
  Call AppChanges(False) 'Prepare environment
  Call NewSheet("_CSV")   'Create a CSV data sheet
' Changes by MM (22 Feb 2019): to produce the correct file format for MonitorPro
  Sheets("_CSV").Range("A1:M1") = Array("Site", "Sample Point", "Date", "Data Source", "Sample Ref", "Lab Ref", "Date Sample Received", "Date Analysis Started", "Date Analysis Complete", "Days Turn Around", "Matrix", "Lab Status", "Lab Temperature")
 
  iCol = pRDFirstDataCol '19 first results col
  iRowC = pRDTestHeaderRow + 1 '28 first result row
  
  'NON SUBCON RESULTS
  Do While Trim(Sheets("Rawdata").Cells(21, iCol).Value) <> "" 'Loop samples
    iRow = iRowC
    Sheets("Rawdata").Select
    aSample = SampleArray(iCol)
   
    Do While Trim(Sheets("Rawdata").Cells(iRow, 1).Value) <> "" 'Loop dets on rawdata
        ' ? Change
        iCSVCol = 14
        If Trim(Sheets("Rawdata").Cells(iRow, 10).Value) <> "T" Then 'not subcon
            Sheets("Rawdata").Select
            aResult = ResultArray(iRow, iCol)
            sReslt = ReplaceStringResult(aResult(9), "M/S ---", "") 'Result
            If aResult(9) = "M/S" Then sMissing = "Yes"
            Sheets("_CSV").Select
                
                bFound = False
                iCSVColB = iCSVCol
                Do While Trim(Cells(1, iCSVColB).Value) <> "" 'Loop detcodes across on CSV sheet
                    If Trim(Cells(1, iCSVColB).Value) = aResult(0) Then 'If the detcode is already present
                        bFound = True
                        Exit Do 'Exit the look up for the det
                    End If
                    iCSVColB = iCSVColB + 1
                Loop
                If bFound = False Then 'Enter the det name on the CSV sheet
                    Cells(1, iCSVColB).Value = aResult(0) 'detname
                    'Cells(3, iCSVColB).Value = aResult(4) 'units
                    'Cells(1, iCSVColB).Value = aResult(10) 'detcode
                End If
              
            
            ' Changes by MM (22 Feb 2019): to produce the correct file format for MonitorPro
            Cells(iCSVRow, iCSVColB).Value = ReplaceStringResult(aResult(9), "T/F ---", "") 'Result
            ' Site
            Cells(iCSVRow, 1).Value = sSite
            ' Sample Point
            Cells(iCSVRow, 2).Value = aSample(3)
            ' Date - sample received
            Cells(iCSVRow, 3).Value = "'" + aSample(2)
            ' Data Source
            Cells(iCSVRow, 4).Value = "DETS"
            ' Sample Ref - sample number
            Cells(iCSVRow, 5).Value = aSample(1)
            ' Lab Ref - job number
            Cells(iCSVRow, 6).Value = sJob
            ' Date Sample Received
            Cells(iCSVRow, 7).Value = sRecvdte
            ' Date Analysis Started - labdate
            Cells(iCSVRow, 8).Value = sLabdate
            ' Date Analysis Complete
            Cells(iCSVRow, 9).Value = sCmpdte
            ' Days Turn Around
            Cells(iCSVRow, 10).Value = sTurnaround
            ' Matrix
            Cells(iCSVRow, 11).Value = sMatrix
            ' Lab Status
            Cells(iCSVRow, 12).Value = ""
            ' Lab Temperature
            Cells(iCSVRow, 13).Value = sLabTemperature
            bdazFound = True
        Else
            bSubconFound = True
        End If
        iRow = iRow + 1 'Next det row
    Loop 'End det loop
    
    If bdazFound = True Then
        iCSVRow = iCSVRow + 1
        bdazFound = False
    End If
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
    

  Call AppChanges(True)
  Call CSVsave(sJob, "CSV")
  
  Sheets("_CSV").Visible = False
  SUEZRRLF_CSV = True
    
End Function


Function Cory_CSV()
  Cory_CSV = False
  bSubconFound = False
  bSubconDontAsk = False
  
  sJob = Sheets("Rawdata").Cells(7, 1).Value
  sSite = Sheets("Rawdata").Cells(6, 2).Value 'conttitle
  iCSVRow = 4
  Call AppChanges(False) 'Prepare environment
  Call NewSheet("_CSV")   'Create a CSV data sheet
  Sheets("_CSV").Range("A2:E2") = Array("site", "sample point", "date", "data source", "Lab Comments")
  
  iCol = pRDFirstDataCol '19 first results col
  iRowC = pRDTestHeaderRow + 1 '28 first result row
  'NON SUBCON RESULTS
  Do While Trim(Sheets("Rawdata").Cells(21, iCol).Value) <> "" 'Loop samples
    iRow = iRowC
    Sheets("Rawdata").Select
    aSample = SampleArray(iCol)
    Do While Trim(Sheets("Rawdata").Cells(iRow, 1).Value) <> "" 'Loop dets on rawdata
        iCSVCol = 6
        If Trim(Sheets("Rawdata").Cells(iRow, 10).Value) <> "T" Then 'not subcon
            Sheets("Rawdata").Select
            aResult = ResultArray(iRow, iCol)
            Sheets("_CSV").Select
            bFound = False
            iCSVColB = iCSVCol
            Do While Trim(Cells(1, iCSVColB).Value) <> "" 'Loop detcodes across on CSV sheet
                If Trim(Cells(1, iCSVColB).Value) = aResult(10) Then 'If the detcode is already present
                    bFound = True
                    Exit Do 'Exit the look up for the det
                End If
                iCSVColB = iCSVColB + 1
            Loop
            If bFound = False Then 'Enter the det name on the CSV sheet
                Cells(2, iCSVColB).Value = aResult(0) 'detname
                Cells(3, iCSVColB).Value = aResult(4) 'units
                Cells(1, iCSVColB).Value = aResult(10) 'detcode
            End If
            
            Cells(iCSVRow, iCSVColB).Value = ReplaceStringResult(aResult(9), "T/F ---", "") 'Result
            Cells(iCSVRow, 1).Value = sSite 'aJobInfo(3) 'Site
            Cells(iCSVRow, 2).Value = aSample(3)  'Sample Point
            Cells(iCSVRow, 3).Value = "'" + aSample(2)  'Date
            Cells(iCSVRow, 4).Value = "DETS" 'Source
            Cells(iCSVRow, 5).Value = aSample(6) 'comment
            bdazFound = True
        Else
            bSubconFound = True
        End If
        iRow = iRow + 1 'Next det row
    Loop 'End det loop
    
    If bdazFound = True Then
        iCSVRow = iCSVRow + 1
        bdazFound = False
    End If
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
    
'SUBCON RESULTS
If bSubconFound = True Then
  iCol = pRDFirstDataCol '19 first results col
  Do While Trim(Sheets("Rawdata").Cells(21, iCol).Value) <> "" 'Loop samples
    iRow = iRowC
    sResults = ""
    Sheets("Rawdata").Select
    aSample = SampleArray(iCol)
    Do While Trim(Sheets("Rawdata").Cells(iRow, 1).Value) <> "" 'Loop dets on rawdata
        iCSVCol = 6
        If Trim(Sheets("Rawdata").Cells(iRow, 10).Value) = "T" Then 'subcon det
            Sheets("Rawdata").Select
            aResult = ResultArray(iRow, iCol)
            Sheets("_CSV").Select
            bFound = False
            iCSVColB = iCSVCol
            Do While Trim(Cells(1, iCSVColB).Value) <> "" 'Loop detcodes across on CSV sheet
                If Trim(Cells(1, iCSVColB).Value) = aResult(10) Then 'If the detcode is already present
                    bFound = True
                    Exit Do 'Exit the look up for the det
                End If
                iCSVColB = iCSVColB + 1
            Loop
            If bFound = False Then 'Enter the det name on the CSV sheet
                Cells(2, iCSVColB).Value = aResult(0) 'detname
                Cells(3, iCSVColB).Value = aResult(4) 'units
                Cells(1, iCSVColB).Value = aResult(10) 'detcode
            End If
            
            sReslt = ReplaceStringResult(aResult(9), "T/F ---", "") 'Result
            If sReslt > "" Then
                Cells(iCSVRow, iCSVColB).Value = ReplaceStringResult(aResult(9), "T/F ---", "") 'sReslt
                Cells(iCSVRow, 1).Value = sSite 'aJobInfo(3) 'Site
                Cells(iCSVRow, 2).Value = aSample(3)  'Sample Point
                Cells(iCSVRow, 3).Value = "'" + aSample(2)  'Date
                If Trim(Sheets("Rawdata").Cells(iRow, 10).Value) = "T" And Cells(iCSVRow, iCSVColB).Value > "" Then
                    If bSubconDontAsk = False Then
                        FrmSubconLab.TextBox2.Value = aSample(1) & " (" & aSample(3) & ") " & aResult(0) & " " & aResult(10)
                        FrmSubconLab.Show
                    End If
                    Cells(iCSVRow, 4).Value = sSubLab 'Source
                End If
                Cells(iCSVRow, 5).Value = aSample(6) 'comment
                bdazFound = True
            End If
        End If
        iRow = iRow + 1 'Next det row
    Loop 'End det loop
    
    If bdazFound = True Then
        iCSVRow = iCSVRow + 1
        bdazFound = False
    End If
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
End If

  Sheets("_CSV").Select
  Rows("1:1").Delete Shift:=xlUp
  Range("A1").Select
  Call AppChanges(True)
  Call CSVsave(sJob, "CSV")
  'Call CSVsave(ClientFileName)
  Sheets("_CSV").Visible = False
  Cory_CSV = True
End Function

Function Enitial_CSV()
  'Date    Site    Sample Point    Variable    Source  Value   Comment Sample Ref  Lab Reference
  '1 row per result
  Enitial_CSV = False

  'aJobInfo = JobArray()
  sJob = Sheets("Rawdata").Cells(7, 1).Value
  sSite = Sheets("Rawdata").Cells(6, 2).Value 'conttitle
  iCSVRow = 2
  
  Call AppChanges(False) 'Prepare environment
  Call NewSheet("_CSV")   'Create a CSV data sheet
  'frmSubconLab.Show      'Set public subcon variable via form interaction
  Sheets("_CSV").Range("A1:I1") = Array("Date", "Site", "Sample Point", "Variable", "Source", "Value", "Comment", "Sample Ref", "Lab Reference")
  
  iCol = pRDFirstDataCol '19 first results col
  iRowC = pRDTestHeaderRow + 1 '28 first result row
  
  Do While Sheets("Rawdata").Cells(21, iCol).Value <> "" 'Loop sampnums accross
    aSample = SampleArray(iCol)
    
    iRow = iRowC
    Do While Sheets("Rawdata").Cells(iRow, 1).Value <> "" 'Loop dets
      aResult = ResultArray(iRow, iCol)
      
      Sheets("_CSV").Select
      If aResult(9) <> "---" And Trim(aResult(9)) <> "" Then 'Ignore unrequired dets
        Cells(iCSVRow, 1).Value = "'" + aSample(2)                'Date
        Cells(iCSVRow, 2).Value = sSite
        Cells(iCSVRow, 3).Value = aSample(3)                      'Sample Point
        Cells(iCSVRow, 4).Value = aResult(0)                      'Variable
        Cells(iCSVRow, 5).Value = SubconLab(aResult(8))           'Source
        Cells(iCSVRow, 6).Value = ReplaceStringResult(aResult(9), "T/F S/C", "Empty") 'Value
        Cells(iCSVRow, 6).Value = ReplaceStringResult(Cells(iCSVRow, 6).Value, "M/S I/S U/S", "")     'Value
        Cells(iCSVRow, 7).Value = aSample(6)                      'Comment
        Select Case aResult(9)
          Case "M/S", "I/S", "U/S"
            Cells(iCSVRow, 7).Value = "Empty"                     'Comment
        End Select
        Cells(iCSVRow, 8).Value = aSample(1)                      'Sample Ref
        Cells(iCSVRow, 9).Value = sJob                     'Lab Reference
      Else 'Unrequired det
        iCSVRow = iCSVRow - 1 'Decrement to prevent blank row on CSV sheet
      End If
      
      Sheets("Rawdata").Select
      iCSVRow = iCSVRow + 1
      iRow = iRow + 1 'Next det row
    Loop 'End det loop
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
  
  Call AppChanges(True)
  Call CSVsave(sJob, "CSV")
  Sheets("_CSV").Visible = False
  Enitial_CSV = True
End Function

Function Impetus_CSV() 'same as Enitial_CSV with UNITS. Units removed 25/2/15, Comment takes cliref
  '1 row per result
  Impetus_CSV = False

  'aJobInfo = JobArray()
  sJob = Sheets("Rawdata").Cells(7, 1).Value
  sContit = Sheets("Rawdata").Cells(6, 2).Value 'conttitle
  sSite = Sheets("Rawdata").Cells(8, 4).Value 'j.site
  If sSite = "" Then sSite = sContit
  sCliRef = Trim(Sheets("Rawdata").Cells(3, 1).Value)
  iCSVRow = 2
  
  Call AppChanges(False) 'Prepare environment
  Call NewSheet("_CSV")   'Create a CSV data sheet
  'frmSubconLab.Show      'Set public subcon variable via form interaction
  Sheets("_CSV").Range("A1:I1") = Array("Date", "Site", "Sample Point", "Variable", "Source", "Value", "Comment", "Sample Ref", "Lab Reference")
  
  iCol = pRDFirstDataCol '19 first results col
  iRowC = pRDTestHeaderRow + 1 '28 first result row
  
  Do While Sheets("Rawdata").Cells(21, iCol).Value <> "" 'Loop sampnums accross
    aSample = SampleArray(iCol)
    
    iRow = iRowC
    Do While Sheets("Rawdata").Cells(iRow, 1).Value <> "" 'Loop dets
      aResult = ResultArray(iRow, iCol)
      
      Sheets("_CSV").Select
      If aResult(9) <> "---" And Trim(aResult(9)) <> "" Then 'Ignore unrequired dets
        Cells(iCSVRow, 1).Value = "'" + aSample(2)                'Date
        Cells(iCSVRow, 2).Value = sSite
        Cells(iCSVRow, 3).Value = aSample(3)                      'Sample Point
        Cells(iCSVRow, 4).Value = aResult(0)                      'Variable
        Cells(iCSVRow, 5).Value = SubconLab(aResult(8))           'Source
        Cells(iCSVRow, 6).Value = ReplaceStringResult(aResult(9), "T/F S/C", "Empty") 'Value
        Cells(iCSVRow, 6).Value = ReplaceStringResult(Cells(iCSVRow, 6).Value, "M/S I/S U/S", "")     'Value
        Cells(iCSVRow, 7).Value = sCliRef                          'Comment (week ref)
        'Select Case aResult(9)
        '  Case "M/S", "I/S", "U/S"
        '    Cells(iCSVRow, 7).Value = "Empty"                     'Comment
        'End Select
        Cells(iCSVRow, 8).Value = aSample(1)                      'Sample Ref
        Cells(iCSVRow, 9).Value = sJob                            'Lab Reference
      Else 'Unrequired det
        iCSVRow = iCSVRow - 1 'Decrement to prevent blank row on CSV sheet
      End If
      
      Sheets("Rawdata").Select
      iCSVRow = iCSVRow + 1
      iRow = iRow + 1 'Next det row
    Loop 'End det loop
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
  
  Call AppChanges(True)
  Call CSVsave(sJob, "CSV")
  Sheets("_CSV").Visible = False
  Impetus_CSV = True
End Function

Function SampleArray(iCol)
    Dim sArray(9) As String
    Dim sDte As String
    sArray(0) = Trim(Cells(20, iCol).Value) 'Sample Type
    sArray(1) = Cells(21, iCol).Value       'Sample Number
    sDte = Trim(Cells(26, iCol).Value)
    sDte = Format(Replace(sDte, "'", ""), "dd/mm/yy")
    sDte = Replace(sDte, "-", "/")
     
    If Len(sDte) < 9 Then
        sDte = left(sDte, 6) & "20" & Right(sDte, 2) 'convert dd/mm/yy to dd/mm/yyyy
    Else
        On Error Resume Next
        sDte = DateValue(sDte)
        sDte = left(sDte, 6) & "20" & Right(sDte, 2) 'convert dd/mm/yy to dd/mm/yyyy
    End If
    
    If IsDateC(sDte) = True Then
      sArray(2) = sDte 'DateValue(sDte) 'Sample Date
    Else
      sArray(2) = "Empty"
    End If
    
    sArray(3) = Trim(Cells(22, iCol).Value) 'Sample Point
    sArray(4) = Trim(Cells(24, iCol).Value) 'Other ID
    sArray(5) = Trim(Cells(23, iCol).Value) 'Depth
    sArray(6) = Replace(Trim(Cells(18, iCol).Value), Chr(13) & Chr(10), " ") 'Sample Comment
    sArray(7) = Trim(Cells(27, iCol).Value) 'Time
    sArray(8) = Trim(Cells(19, iCol).Value) 'xdata1 ] xdata2
    SampleArray = sArray()
End Function

Sub AppChanges(bSetting)
  'Application.ScreenUpdating = bSetting 'Shows the macro in progress
  Application.DisplayAlerts = bSetting 'Shows errors, prompts etc.
End Sub

Sub NewSheet(sName)
    If SheetExists(sName) Then
        Sheets(sName).Visible = True
        Sheets(sName).Delete
    End If
    Sheets.Add After:=Sheets("Rawdata")
    ActiveSheet.Name = sName '"_CSV"
    Sheets("Rawdata").Select
End Sub

Sub NewSheet2(sName, sNa2)
    If SheetExists(sName) Then
        Sheets(sName).Visible = True
        Sheets(sName).Delete
    End If
    Sheets.Add After:=Sheets(sNa2)
    ActiveSheet.Name = sName
    Sheets("Rawdata").Select
End Sub

Function ResultArray(iRow, iCol)
    Dim sArray(14) As String
    sArray(0) = Trim(Cells(iRow, 1).Value) 'Det Name
    sArray(1) = Trim(Cells(iRow, 2).Value) 'Det data Type
    sArray(2) = Trim(Cells(iRow, 6).Value) 'Det Supertype
    sArray(3) = Trim(Cells(iRow, 7).Value) 'Det LOD
    sArray(4) = Trim(Cells(iRow, 4).Value) 'Det Units
    sArray(5) = Trim(Cells(iRow, 5).Value) 'Det Method
    sArray(6) = Trim(Cells(iRow, 8).Value) 'Det Mcerts
    sArray(7) = Trim(Cells(iRow, 9).Value) 'Det UKAS
    sArray(8) = Trim(Cells(iRow, 10).Value) 'Det Subcon
    sArray(9) = Trim(Cells(iRow, iCol).Value) 'Result
    sArray(10) = Trim(Cells(iRow, 3).Value) 'Det code
    sArray(11) = Trim(Cells(iRow, 17).Value) 'test
    sArray(12) = Trim(Cells(iRow, 14).Value) 'cascode
    ResultArray = sArray()
End Function

Function SubconLab(cSubcon) 'Returns a source string for subcon'd work
    If UCase(Trim(cSubcon)) = "T" Then
      SubconLab = p_SubconLab
    Else
      SubconLab = "DETS" 'source
    End If
End Function

Function ReplaceStringResult(sResult, sReplacing, sReplaceWith) 'Swaps a result of T/F, I/S, M/S or U/S with a specified value
    If InStr(1, UCase(sReplacing), UCase(sResult)) > 0 Then
      sReturn = sReplaceWith
    Else
      sReturn = sResult
    End If
    ReplaceStringResult = sReturn
End Function

Function IsDateC(sDate) 'Determines is a string is split by two forward slashes and is numeric
    IsDateC = False
    If Len(sDate) = 10 Then
        sSplit = Split(sDate, "/")
        If UBound(sSplit) = 2 Then
            'For i = 0 To 2
            '    For l = 1 To Len(sSplit(i))
            '        If IsNumeric(Mid(sSplit(i), l, 1)) = False Then Exit Function 'doesn't always work and not really needed, disabled 28/7/17
            '    Next
            'Next
            IsDateC = True
        End If
    End If
End Function

Function IsRowEmpty(iRow, iWidth)
    IsRowEmpty = True
    For iCol = 1 To iWidth
        If Sheets("_CSV").Cells(iRow, iCol).Value <> "" Then
            IsRowEmpty = False
            Exit Function
        End If
    Next
End Function

Function FormatCSVValue(iRow, iCol) 'Determine whether to use AddQuotes or process in particular ways
  'Add client specific formatting here
  'p_Client is upper case
  Select Case sClient 'p_Client
    Case "VEOLIA" 'Exclusively for Veolia reports
      If iRow >= 8 And (iCol = 5 Or iCol = 6) Then 'Analyte column
        FormatCSVValue = AddQuotes(Trim(Sheets("_CSV").Cells(iRow, iCol).Value))
      Else
        FormatCSVValue = Trim(Sheets("_CSV").Cells(iRow, iCol).Value)
      End If
    Case "MOUT"
      If iCol = 2 Or iCol = 3 Then
        FormatCSVValue = AddQuotes(Trim(Sheets("_CSV").Cells(iRow, iCol).Value))
      Else
        FormatCSVValue = Trim(Sheets("_CSV").Cells(iRow, iCol).Value)
      End If
    Case "AUGEAN"
      FormatCSVValue = Trim(Sheets("_CSV").Cells(iRow, iCol).Value)
    Case Else 'Default formatting
      FormatCSVValue = AddQuotes(Trim(Sheets("_CSV").Cells(iRow, iCol).Value))
  End Select
End Function

Function AddQuotes(strText) 'Encapsulates a string with quotation marks (")
    AddQuotes = Chr(34) & strText & Chr(34)
End Function

Function LineColWidth() 'Determines the widest row on the CSV sheets
  iRow = 1
  iWidth = 0
  iRBlank = 0
  
  Do While iRBlank <= 5 '
    If Sheets("_CSV").Cells(iRow, 1).Value <> "" Then
      iRBlank = 0
      iCBlank = 0
      iCol = 1
      Do While iCBlank <= 5
        If Sheets("_CSV").Cells(iRow, iCol).Value = "" Then
          iCBlank = iCBlank + 1
        Else
          iCBlank = 0
        End If
        iCol = iCol + 1
      Loop
      iCol = iCol - iCBlank
      If iCol > iWidth Then iWidth = iCol
    Else
      iRBlank = iRBlank + 1
    End If
    
    iRow = iRow + 1
  Loop
  
  LineColWidth = iWidth
End Function

Function ScottWilson()
'Site Name   Sample Type Sample No   Test    Units   Value
'1 row per result, XLS format
  ScottWilson = False
  Sheets("Rawdata").Visible = True
  sJobSW = Sheets("Rawdata").Cells(7, 1).Value
  sSite = Sheets("Rawdata").Cells(6, 2).Value 'conttitle
  iCSVRow = 2
  Call AppChanges(False)
  Call NewSheet("ScottWilson")   'Create a CSV data sheet
  'frmSubconLab.Show      'Set public subcon variable via form interaction
  
  Sheets("ScottWilson").Range("A1:F1") = Array("Site Name", "Sample Type", "Sample No", "Test", "Units", "Value")
  iCol = pRDFirstDataCol '19 first results col
  iRowC = pRDTestHeaderRow + 1 '28 first result row
  
  Do While Sheets("Rawdata").Cells(21, iCol).Value <> "" 'Loop sampnums accross
    aSample = SampleArray(iCol)
    If aSample(0) = "BALLAST" Or aSample(0) = "CORE" Then
        iRow = iRowC
        Do While Sheets("Rawdata").Cells(iRow, 1).Value <> "" 'Loop dets
            aResult = ResultArray(iRow, iCol)
            Sheets("ScottWilson").Select
            If aResult(9) <> "---" And Trim(aResult(9)) <> "" Then 'Ignore unrequired dets
                Cells(iCSVRow, 1).Value = sSite
                Cells(iCSVRow, 2).Value = aSample(3)                      'samp type
                Cells(iCSVRow, 3).Value = aSample(4)                      'Sample Point
                If InStr(aResult(0), "Arsenic") > 0 And InStr(aResult(0), "Total") > 0 Then
                    Cells(iCSVRow, 4).Value = "Arsenic"                   'Variable
                Else
                    Cells(iCSVRow, 4).Value = aResult(0)                  'Variable
                End If
                Cells(iCSVRow, 5).Value = aResult(4)                      'units
                Cells(iCSVRow, 6).Value = aResult(9)                      'value
                'Cells(iCSVRow, 6).Value = ReplaceStringResult(aResult(9), "T/F S/C", "Empty") 'Value
                'Cells(iCSVRow, 6).Value = ReplaceStringResult(Cells(iCSVRow, 6).Value, "M/S I/S U/S", "")     'Value
                Cells(iCSVRow, 7).Value = aSample(1)                      'Sample Ref
            Else 'Unrequired det
                iCSVRow = iCSVRow - 1 'Decrement to prevent blank row on CSV sheet
            End If
      
            Sheets("Rawdata").Select
            iCSVRow = iCSVRow + 1
            iRow = iRow + 1 'Next det row
        Loop 'End det loop
    End If
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
  
  Call AppChanges(True)
  Sheets("ScottWilson").Select
  nL = FindLastRow("ScottWilson")
  If nL = 1 Then
    nR = MsgBox("No Data for Scott Wilson Ballast/Core CSV report. Report not saved.", vbOKOnly, "Scott Wilson")
  Else
    Call XLSsave(sJobSW)
  End If
  Call AppChanges(False)
  Sheets("ScottWilson").Delete
  Call AppChanges(True)
  ScottWilson = True
End Function

Sub XLSsave(sJob)
    Dim CurWkbook, CalledWkBk As Workbook
    Set CurWkbook = Application.ActiveWorkbook
    Dim fso
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    Sheets("ScottWilson").Range(Columns(1), Columns(6)).Copy
    Workbooks.Add
    Set CalledWkBk = Application.ActiveWorkbook
    'MsgBox CalledWkBk.Name
    Worksheets("Sheet1").Select
    ActiveSheet.Paste
    Worksheets("Sheet1").Name = "ScottWilson"
    Columns("A:F").EntireColumn.AutoFit
    Cells(1, 1).Select
    Application.DisplayAlerts = False
    
    On Error GoTo myerror
    
    'sFldr = "L:\db\reports_test\"
    sFldr = "L:\db\reports\"
    sJob8 = left(Trim(sJob), 8)
    If (fso.folderexists(sFldr & sJob8 & "\reports")) Then sFldr = sFldr & sJob8 & "\reports\"
    sxlFile = Application.GetSaveAsFilename(sFldr & Trim(sJob) & "SW" & ".xls", fileFilter:="Excel Workbook (*.xls), *.xls")
    If sxlFile <> False Then CalledWkBk.SaveAs Filename:=sxlFile, FileFormat:=xlNormal
    CurWkbook.Activate
    Application.DisplayAlerts = True

myerror:
    If Err.Number <> 0 Then
        'MsgBox Err.Number
        CurWkbook.Activate
        'Application.ScreenUpdating = True
        Application.DisplayAlerts = True
        nR = MsgBox("There was a problem saving Scott Wilson Ballast/Core Report as" & Chr(10) & sxlFile & Chr(10) & "Try saving " & CalledWkBk.Name & " manually.", vbOKOnly, "Scott Wilson")
    End If
End Sub

Sub CSVsave(sJob, sExt)
    Dim sSaveAs, iFile, iRow, sLine, iCol, iBlank
    Dim fso
    Set fso = CreateObject("Scripting.FileSystemObject")
        
    'sFldr = "L:\db\reports_test\"
    sFldr = "L:\db\reports\"
    sJob8 = left(Trim(sJob), 8)
    If Not (fso.folderexists(sFldr & sJob8)) Then Set f = fso.CreateFolder(sFldr & sJob8)
    If Not (fso.folderexists(sFldr & sJob8 & "\reports")) Then Set f = fso.CreateFolder(sFldr & sJob8 & "\reports")
    If (fso.folderexists(sFldr & sJob8 & "\reports")) Then sFldr = sFldr & sJob8 & "\reports\"
    
    sFileName = sFldr & Trim(left(Replace(sJob, ",", "_"), 90))
    If sExt = "AIR" Then
        sSaveAs = Application.GetSaveAsFilename(sFileName, fileFilter:="AIR (Text file)(*.AIR), *.AIR")
    Else 'CSV
        sSaveAs = Application.GetSaveAsFilename(sFileName, fileFilter:="CSV (Text file)(*.CSV), *.CSV")
    End If

    On Error GoTo myerror
      
      If sSaveAs = sFileName & "." & sExt Then
        Kill (sSaveAs)
      Else
        sFileName = sSaveAs
      End If
 
    iWidth = LineColWidth 'Determine how much padding (if any) will be required
    iFile = FreeFile 'Get an available file number that is inaccessible by other applications
    Open sFileName For Output As #iFile
    
    iRow = 1
    iBlank = 0
    Do While iBlank <= 5
      bEmpty = False
      If Sheets("_CSV").Cells(iRow, 1).Value = "" Then
        iBlank = iBlank + 1
        bEmpty = IsRowEmpty(iRow, iWidth)
      Else
        iBlank = 0
      End If
      
      If bEmpty = False Then
        sLine = ""
        For iCol = 1 To iWidth - 2 'Add comma to all but last CSV
          sLine = sLine & FormatCSVValue(iRow, iCol) & ","
        Next
        sLine = sLine & FormatCSVValue(iRow, iCol)
      Else
        sLine = ""
      End If
      
      Print #iFile, sLine
      iRow = iRow + 1
    Loop
    Close #iFile

myerror:
    If Err.Number = 1004 Then
        'user cancelled
    End If
End Sub

' File to be saved with ESdat-specific format
Sub ESdatCSVSave()
    Dim sSaveAs, iFile, iRow, sLine, iCol, iBlank
    Dim wb As Workbook
    Dim fso
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set wb = Workbooks.Add
   
    'sFldr = "L:\db\reports_test\"
    sFldr = "L:\db\reports\"
    
    
    If Not (fso.folderexists(sFldr & sJob)) Then Set f = fso.CreateFolder(sFldr & sJob)
    If Not (fso.folderexists(sFldr & sJob & "\reports")) Then Set f = fso.CreateFolder(sFldr & sJob & "\reports")
    If (fso.folderexists(sFldr & sJob & "\reports")) Then sFldr = sFldr & sJob & "\reports\"
    
    ' Add format - differentiate between sample, chemistry etc. (original: sFileName = sFldr & Trim(left(Replace(sJob, ",", "_"), 90))
    If ESdatSample2eCSV = True Then
        sFileName = sFldr & Trim(sCliRef) & "." & cleanedString(Trim(sConTitle) & "." & Trim(sJob) & "." & "Sample2e") & ".csv"
        ESdatSample2eCSV = False
    ElseIf ESdatChemistry2eCSV = True Then
        sFileName = sFldr & Trim(sCliRef) & "." & cleanedString(Trim(sConTitle) & "." & Trim(sJob) & "." & "Chemistry2e") & ".csv"
        ESdatChemistry2eCSV = False
    ElseIf ESdatLabReport2eCSV = True Then
        sFileName = sFldr & Trim(sCliRef) & "." & cleanedString(Trim(sConTitle) & "." & Trim(sJob) & "." & "LabReport2e") & ".csv"
        ESdatLabReport2eCSV = False
    ElseIf ESdatSDG2eCSV = True Then
        sFileName = sFldr & Trim(sCliRef) & "." & cleanedString(Trim(sConTitle) & "." & Trim(sJob) & "." & "SDG2e") & ".csv"
        ESdatSDG2eCSV = False
    ElseIf ESdatHeaderXML = True Then
        sFileName = sFldr & "InterimCSV" & ".csv"
        ESdatHeaderXML = False
    End If
        
    'ThisWorkbook.Sheets("_CSV").Copy Before:=wb.Sheets(1)
    'wb.SaveAs Filename:=sFileName, FileFormat:=xlCSV, CreateBackup:=False
    
    ' This line of code prevents the save file dialog from showing, instead
    ' the ESdat files are overwritten using the same name if the user runs the report for the same job again
    Application.DisplayAlerts = False

    'sFileName = Replace(Replace(Replace(sFileName, ": ", ""), ":", ""), "L\db", "L:\db")
   
    ThisWorkbook.Sheets("_CSV").Copy Before:=wb.Sheets(1)
    wb.SaveAs Filename:=sFileName, FileFormat:=xlCSV, CreateBackup:=False
    
    Application.DisplayAlerts = True
    
      
    On Error GoTo myerror
  
    ' Determining how much padding (if any) will be required
    iWidth = LineColWidth
    ' Getting an available file number that is inaccessible by other applications
    iFile = FreeFile
    
    Open sFileName For Output As #iFile
    
    iRow = 1
    iBlank = 0
    Do While iBlank <= 5
      bEmpty = False
      If Sheets("_CSV").Cells(iRow, 1).Value = "" Then
        iBlank = iBlank + 1
        bEmpty = IsRowEmpty(iRow, iWidth)
      Else
        iBlank = 0
      End If
      
      If bEmpty = False Then
        sLine = ""
        For iCol = 1 To iWidth - 2
          ' Adding comma to all but last CSV
          sLine = sLine & FormatCSVValue(iRow, iCol) & ","
        Next
        sLine = sLine & FormatCSVValue(iRow, iCol)
      Else
        sLine = ""
      End If
      
      Print #iFile, sLine
      iRow = iRow + 1
    Loop
    Close #iFile

myerror:
    ' User cancelled
    If Err.Number = 1004 Then
        
    End If
   
   ThisWorkbook.Activate
   
   wb.Close
     
End Sub

Function Viridor_CSV() '1 line per sampnum, dets accross
  Viridor_CSV = False
  bSubconFound = False
  bSubconDontAsk = False
  
  sJob = Sheets("Rawdata").Cells(7, 1).Value
  sSite = Sheets("Rawdata").Cells(6, 2).Value 'conttitle Sheets("Rawdata").Cells(8, 4).Value
  sRecvdte = Sheets("Rawdata").Cells(2, 2).Value
  sCmpdte = Sheets("Rawdata").Cells(10, 2).Value
  iCSVRow = 4 'data start row
  Call AppChanges(False)
  Call NewSheet("_CSV")
  Sheets("_CSV").Range("A2:L2") = Array("Site", "Sample Point", "Date", "Source", "Sample Ref", "LabRef", "Date Samples Received", "Time", "Date Analysis Complete", "MATRIX", "Lab Comments", "Missing Sample")
  iCol = pRDFirstDataCol '19 first results col
  iRowC = pRDTestHeaderRow + 1 '28 first result row
  
  'NON SUBCON RESULTS
  Do While Trim(Sheets("Rawdata").Cells(21, iCol).Value) <> "" 'Loop samples
    iRow = iRowC
    Sheets("Rawdata").Select
    aSample = SampleArray(iCol)
    If aSample(7) = "" Then
        sRectime = "" '"'00:00"
    Else
        sRectime = Right("0" & aSample(7), 4)
        sRectime = "'" & left(sRectime, 2) & ":" & Right(sRectime, 2)
    End If

    If InStr(aSample(8), "]SU]") > 0 Then
        sMatrix = "Surface water"
    ElseIf InStr(aSample(8), "]GR]") > 0 Then
        sMatrix = "Groundwater"
    ElseIf InStr(aSample(8), "]LL]") > 0 Then
        sMatrix = "Leachate"
    ElseIf InStr(aSample(8), "]SO]") > 0 Then
        sMatrix = "Soil"
    Else
        sMatrix = ""
    End If
    sMissing = ""
    
    Do While Trim(Sheets("Rawdata").Cells(iRow, 1).Value) <> "" 'Loop dets on rawdata
        iCSVCol = 13 'first free col for results
        If Trim(Sheets("Rawdata").Cells(iRow, 10).Value) <> "T" Then 'not subcon
            Sheets("Rawdata").Select
            aResult = ResultArray(iRow, iCol)
            sReslt = ReplaceStringResult(aResult(9), "M/S ---", "") 'Result
            If aResult(9) = "M/S" Then sMissing = "Yes"
            Sheets("_CSV").Select
            
            If sReslt > "" Then 'don't print result or det header if result is M/S or non existant
                bFound = False
                iCSVColB = iCSVCol
                Do While Trim(Cells(1, iCSVColB).Value) <> "" 'Loop detcodes across on CSV sheet
                    If Trim(Cells(1, iCSVColB).Value) = aResult(10) Then 'If the detcode is already present
                        bFound = True
                        Exit Do 'Exit the look up for the det
                    End If
                    iCSVColB = iCSVColB + 1
                Loop
                If bFound = False Then 'Enter the det name on the CSV sheet
                    Cells(2, iCSVColB).Value = aResult(0) 'detname
                    Cells(3, iCSVColB).Value = aResult(4) 'units
                    Cells(1, iCSVColB).Value = aResult(10) 'detcode
                End If
                Cells(iCSVRow, iCSVColB).Value = ReplaceStringResult(aResult(9), "M/S ---", "") 'Result
            End If
            Cells(iCSVRow, 1).Value = sSite 'aJobInfo(3) 'Site
            Cells(iCSVRow, 2).Value = aSample(3)  'Sample Point
            Cells(iCSVRow, 3).Value = "'" + aSample(2)  'sampdate
            Cells(iCSVRow, 4).Value = "DETS" 'Source
            Cells(iCSVRow, 5).Value = aSample(1) 'Sampnum
            Cells(iCSVRow, 6).Value = sJob
            Cells(iCSVRow, 7).Value = sRecvdte 'recdate
            Cells(iCSVRow, 8).Value = sRectime
            Cells(iCSVRow, 9).Value = sCmpdte 'compdate
            Cells(iCSVRow, 10).Value = sMatrix
            Cells(iCSVRow, 11).Value = Trim(left(aSample(6), 200)) 'comment
            Cells(iCSVRow, 12).Value = sMissing
            bdazFound = True
        Else
            bSubconFound = True
        End If
        iRow = iRow + 1 'Next det row
    Loop 'End det loop
    
    If bdazFound = True Then
        iCSVRow = iCSVRow + 1
        bdazFound = False
    End If
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
  
  
'SUBCON RESULTS
If bSubconFound = True Then
  iCol = 19
  Do While Trim(Sheets("Rawdata").Cells(21, iCol).Value) <> "" 'Loop samples
    iRow = iRowC
    sResults = ""
    Sheets("Rawdata").Select
    aSample = SampleArray(iCol)
    If aSample(7) = "" Then
        sRectime = "'00:00"
    Else
        sRectime = Right("0" & aSample(7), 4)
        sRectime = "'" & left(sRectime, 2) & ":" & Right(sRectime, 2)
    End If

    Do While Trim(Sheets("Rawdata").Cells(iRow, 1).Value) <> "" 'Loop dets on rawdata
        iCSVCol = 13
        If Trim(Sheets("Rawdata").Cells(iRow, 10).Value) = "T" Then 'subcon det
            Sheets("Rawdata").Select
            aResult = ResultArray(iRow, iCol)
            sReslt = ReplaceStringResult(aResult(9), "M/S ---", "") 'Result
            If aResult(9) = "M/S" Then sMissing = "Yes"
            Sheets("_CSV").Select
            
            If sReslt > "" Then 'don't print result or det header if result is M/S or non existant
                bFound = False
                iCSVColB = iCSVCol
                Do While Trim(Cells(1, iCSVColB).Value) <> "" 'Loop detcodes across on CSV sheet
                    If Trim(Cells(1, iCSVColB).Value) = aResult(10) Then 'If the detcode is already present
                        bFound = True
                        Exit Do 'Exit the look up for the det
                    End If
                    iCSVColB = iCSVColB + 1
                Loop
                If bFound = False Then 'Enter the det name on the CSV sheet
                    Cells(2, iCSVColB).Value = aResult(0) 'detname
                    Cells(3, iCSVColB).Value = aResult(4) 'units
                    Cells(1, iCSVColB).Value = aResult(10) 'detcode
                End If
                
                Cells(iCSVRow, iCSVColB).Value = ReplaceStringResult(aResult(9), "M/S ---", "") 'sReslt
            End If
            
            Cells(iCSVRow, 1).Value = sSite 'aJobInfo(3) 'Site
            Cells(iCSVRow, 2).Value = aSample(3)  'Sample Point
            Cells(iCSVRow, 3).Value = "'" + aSample(2)  'sampdate
            Cells(iCSVRow, 5).Value = aSample(1) 'Sampnum
            Cells(iCSVRow, 6).Value = sJob
            Cells(iCSVRow, 7).Value = sRecvdte 'recdate
            Cells(iCSVRow, 8).Value = sRectime
            Cells(iCSVRow, 9).Value = sCmpdte 'compdate
            Cells(iCSVRow, 10).Value = sMatrix
            If Trim(Sheets("Rawdata").Cells(iRow, 10).Value) = "T" And Cells(iCSVRow, iCSVColB).Value > "" Then
                If bSubconDontAsk = False Then
                    FrmSubconLab.TextBox2.Value = aSample(1) & " (" & aSample(3) & ") " & aResult(0) & " " & aResult(10)
                    FrmSubconLab.Show
                End If
                Cells(iCSVRow, 4).Value = "DETS - subbed to " & sSubLab 'Source
            End If
            Cells(iCSVRow, 11).Value = Trim(left(aSample(6), 200)) 'comment
            Cells(iCSVRow, 12).Value = sMissing
            bdazFound = True
        End If
        iRow = iRow + 1 'Next det row
    Loop 'End det loop
    
    If bdazFound = True Then
        iCSVRow = iCSVRow + 1
        bdazFound = False
    End If
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
End If

  Sheets("_CSV").Select
  Rows("1:1").Delete Shift:=xlUp
  Range("A1").Select

  Call AppChanges(True)
  Call CSVsave(sJob, "CSV")
  'Call CSVsave(ClientFileName)
  Sheets("_CSV").Visible = False
  Viridor_CSV = True
End Function

Function Augean_CSV() 'tab delimited file
'SITE_ID,DETS_SAMPLE_ID,ALS_LIMS_ID,ANALYSIS_CODE,RESULT,UNIT,REPORTABLE,COMMENTS
'1 row per result
  Augean_CSV = False
  Sheets("Rawdata").Visible = True

  'aJobInfo = JobArray()
  sJob = Sheets("Rawdata").Cells(7, 1).Value
  'sSite = Sheets("Rawdata").Cells(6, 2).Value 'conttitle
  iCSVRow = 2
  Call AppChanges(False) 'Prepare environment
  Call NewSheet("_CSV")   'Create a CSV data sheet
  'frmSubconLab.Show      'Set public subcon variable via form interaction
  
  Sheets("_CSV").Range("A1:H1") = Array("SITE_ID", "DETS_SAMPLE_ID", "ALS_LIMS_ID", "ANALYSIS_CODE", "RESULT", "UNIT", "REPORTABLE", "COMMENTS")
  iCol = pRDFirstDataCol '19 first results col
  iRowC = pRDTestHeaderRow + 1 '28 first result row
  
  Do While Sheets("Rawdata").Cells(21, iCol).Value <> "" 'Loop sampnums accross
    aSample = SampleArray(iCol)
    iRow = iRowC
    Do While Sheets("Rawdata").Cells(iRow, 1).Value <> "" 'Loop dets
      aResult = ResultArray(iRow, iCol)
      AAnalCode = Split(aResult(0), "[") 'AnalCode is in repname in square brackets vis: Zinc Soluble [Zn_Sol]
      If UBound(AAnalCode) > 0 Then
        sAnalCode = Replace(AAnalCode(1), "]", "")
      Else
        sAnalCode = AAnalCode(0)
      End If
      
      If left(aResult(9), 1) = "<" Then
        nRes = 0                'at the request of Shaun Wedgewood, Augean
      Else
        nRes = aResult(9)
      End If
      
      Sheets("_CSV").Select
      If aResult(9) <> "---" And Trim(aResult(9)) <> "" Then 'Ignore unrequired dets
        Cells(iCSVRow, 1).Value = aSample(3)                      'Sample Point eg KCGW03
        Cells(iCSVRow, 2).Value = aSample(1)                      'sampnum
        Cells(iCSVRow, 3).Value = aSample(4)                      'otherid eg AA27915
        Cells(iCSVRow, 4).Value = sAnalCode                       'Variable
        Cells(iCSVRow, 5).Value = nRes                            'result
        Cells(iCSVRow, 6).Value = aResult(4)                      'units
        Cells(iCSVRow, 7).Value = "Y"
        Cells(iCSVRow, 8).Value = aSample(6)                      'Comment
      Else 'Unrequired det
        iCSVRow = iCSVRow - 1 'Decrement to prevent blank row on CSV sheet
      End If
      
      Sheets("Rawdata").Select
      iCSVRow = iCSVRow + 1
      iRow = iRow + 1 'Next det row
    Loop 'End det loop
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
  
  Call AppChanges(True)
  Call TABsave(sJob)
  Sheets("_CSV").Visible = False
  Augean_CSV = True
End Function

Sub TABsave(sJob)
    Dim sSaveAs, iFile, iRow, sLine, iCol, iBlank
    Dim fso
    Set fso = CreateObject("Scripting.FileSystemObject")
        
    'sFldr = "L:\db\reports_test\"
    sFldr = "L:\db\reports\"
    sJob8 = left(Trim(sJob), 8)
    If (fso.folderexists(sFldr & sJob8 & "\reports")) Then sFldr = sFldr & sJob8 & "\reports\"
    sFileName = sFldr & Trim(sJob)
    sSaveAs = Application.GetSaveAsFilename(sFileName, fileFilter:="Text (Tab delimited)(*.txt), *.txt")

    On Error GoTo myerror
      
    If sSaveAs = sFileName & ".txt" Then
      Kill (sSaveAs)
    Else
      sFileName = sSaveAs
    End If
 
    iWidth = LineColWidth 'Determine how much padding (if any) will be required
    iFile = FreeFile 'Get an available file number that is inaccessible by other applications
    Open sFileName For Output As #iFile
    
    iRow = 1
    iBlank = 0
    Do While iBlank <= 5
      bEmpty = False
      If Sheets("_CSV").Cells(iRow, 1).Value = "" Then
        iBlank = iBlank + 1
        bEmpty = IsRowEmpty(iRow, iWidth)
      Else
        iBlank = 0
      End If
      
      If bEmpty = False Then
        sLine = ""
        For iCol = 1 To iWidth - 2 'Add tab to all but last field
          sLine = sLine & FormatCSVValue(iRow, iCol) & Chr(9)
        Next
        sLine = sLine & FormatCSVValue(iRow, iCol)
      Else
        sLine = ""
      End If
      
      Print #iFile, sLine
      iRow = iRow + 1
    Loop
    Close #iFile

myerror:
    If Err.Number = 1004 Then
        'user cancelled
    End If
End Sub

Function EQUIS() '1 row per result, "" around anything witha comma in it
  EQUIS = False
  'aJobInfo = JobArray()
  sJob = Sheets("Rawdata").Cells(7, 1).Value
  sSite = Sheets("Rawdata").Cells(6, 2).Value 'conttitle
  sCmpdte = Sheets("Rawdata").Cells(10, 2).Value
  If Trim(sCmpdte) = "" Then sCmpdte = FormatDateTime(Now, vbShortDate)
  iCSVRow = 2
  Call AppChanges(False) 'Prepare environment
  Call NewSheet("_CSV")   'Create a CSV data sheet
  'frmSubconLab.Show      'Set public subcon variable via form interaction
  
  'Sheets("_CSV").Range("A1:AE1") = Array("sys_sample_code", "lab_anl_method_name", "analysis_date", "total_or_dissolved", "test_type", "lab_matrix_code", "analysis_location", "basis", "dilution_factor", "lab_prep_method_name", "leachate_method", "leachate_date", "leachate_time", "lab_name_code", "lab_sample_id", "cas_rn", "chemical_name", "result_value", "result_unit", "result_type_code", "reportable_result", "detect_flag", "organic_yn", "interpreted_qualifiers", "lab_qualifiers", "reporting_detection_limit", "method_detection_limit", "quantitation_limit", "detection_limit_unit", "tic_retention_time", "result_comment")
  Sheets("_CSV").Range("A1:AC1") = Array("sys_sample_code", "lab_anl_method_name", "analysis_date", "total_or_dissolved", "test_type", "lab_matrix_code", "analysis_location", "basis", "dilution_factor", "lab_prep_method_name", "leachate_method", "leachate_date", "leachate_time", "lab_name_code", "lab_sample_id", "cas_rn", "chemical_name", "result_value", "result_unit", "result_type_code", "reportable_result", "detect_flag", "interpreted_qualifiers", "lab_qualifiers", "reporting_detection_limit", "method_detection_limit", "quantitation_limit", "detection_limit_unit", "result_comment")
  iCol = pRDFirstDataCol '19 first results col
  iRowC = pRDTestHeaderRow + 1 '28 first result row
  
  Do While Sheets("Rawdata").Cells(21, iCol).Value <> "" 'Loop sampnums accross
    aSample = SampleArray(iCol)
    sSmpDte = aSample(2)
    If sSmpDte = "Empty" Then
        sSmpDte = ""
    Else
        If Len(sSmpDte) > 8 Then
            sSmpDte = "-" & left(sSmpDte, 2) & Mid(sSmpDte, 4, 2) & Right(sSmpDte, 2)
        Else
            sSmpDte = ""
        End If
    End If
    
    iRow = iRowC
    Do While Sheets("Rawdata").Cells(iRow, 1).Value <> "" 'Loop dets
      aResult = ResultArray(iRow, iCol)
      
      Sheets("_CSV").Select
      If aResult(9) <> "---" And Trim(aResult(9)) <> "" And InStr(aResult(0), "(TIC)") = 0 And Trim(aResult(3)) <> "" Then 'Ignore unrequired dets and TICS
        sPrefx = ""
        sDetected = "Y"
        If UCase(Trim(aResult(9))) = "NAD" Or UCase(Trim(aResult(9))) = "NONE" Then sDetected = "N"
        If left(aResult(9), 1) = "<" Or left(aResult(9), 1) = ">" Then
            sPrefx = left(aResult(9), 1)
            If sPrefx = "<" Then sDetected = "N"
            sRes = Replace(aResult(9), "<", "")
            sRes = Replace(aResult(9), ">", "")
            sRes = Replace(aResult(9), " ", "")
        Else
            sRes = aResult(9)
        End If
        
        sTotalOrDissolved = "N"
        If Trim(aResult(12)) = "" Then
            sCasCode = "NONE"
            nR = MsgBox("All reported dets must have a CAS Number. Fix and re-run Equis report.", vbOKOnly, "Missing CAS Number")
        Else
            aCasCode = Split(aResult(12), ",") 'TotalOrDissolved is after the comma
            sCasCode = Trim(aCasCode(0))
            If UBound(aCasCode) > 0 Then sTotalOrDissolved = Trim(aCasCode(1))
        End If
    
        Cells(iCSVRow, 1).Value = aSample(3) & sSmpDte  'Sample id
        Cells(iCSVRow, 2).Value = aResult(11)           'test
        Cells(iCSVRow, 3).Value = sCmpdte               'detdate use compdate
        Cells(iCSVRow, 3).NumberFormat = "m/d/yyyy"
        Cells(iCSVRow, 4).Value = sTotalOrDissolved     'total or dissolved or N for NA
        Cells(iCSVRow, 5).Value = "initial"             'test type
        Cells(iCSVRow, 6).Value = aSample(0)            'matrix
        Cells(iCSVRow, 7).Value = "LB"                  'anal locn
        Cells(iCSVRow, 8).Value = "NA"                  'basis
        Cells(iCSVRow, 9).Value = "1"                   'dil factor FIN
        Cells(iCSVRow, 10).Value = ""                   'prep
        Cells(iCSVRow, 11).Value = ""                   'prep
        Cells(iCSVRow, 12).Value = ""                   'prep
        Cells(iCSVRow, 13).Value = ""                   'prep
        Cells(iCSVRow, 14).Value = "DETS"               'lab
        Cells(iCSVRow, 15).Value = aSample(1)           'Sampnum
        Cells(iCSVRow, 16).NumberFormat = "@"
        Cells(iCSVRow, 16).Value = sCasCode             'cas no
        Cells(iCSVRow, 17).Value = aResult(0)           'Variable name
        If sPrefx = "<" Then sRes = ""
        Cells(iCSVRow, 18).Value = sRes                 'result
        Cells(iCSVRow, 19).Value = aResult(4)           'units
        Cells(iCSVRow, 20).Value = "TRG"                'result type code FIN
        Cells(iCSVRow, 21).Value = "Yes"                'reportable
        Cells(iCSVRow, 22).Value = sDetected            'detect flag
        'Cells(iCSVRow, 23).Value = "N"                  'organic yn  FIN
        nCol = 23
        Cells(iCSVRow, nCol).Value = sPrefx               'glt
        nCol = nCol + 1
        Cells(iCSVRow, nCol).Value = sPrefx               'glt
        nCol = nCol + 1
        Cells(iCSVRow, nCol).Value = aResult(3)           'reporting_detection_limit
        nCol = nCol + 1
        Cells(iCSVRow, nCol).Value = aResult(3)           'method_detection_limit
        nCol = nCol + 1
        Cells(iCSVRow, nCol).Value = aResult(3)           'quantitation_limit
        nCol = nCol + 1
        Cells(iCSVRow, nCol).Value = aResult(4)           'units
        nCol = nCol + 1
        'Cells(iCSVRow, nCol).Value = ""                   'tic time
        'nCol = nCol + 1
        Cells(iCSVRow, nCol).Value = aSample(6)           'Comment
      Else 'Unrequired det
        iCSVRow = iCSVRow - 1 'Decrement to prevent blank row on CSV sheet
      End If
      
      Sheets("Rawdata").Select
      iCSVRow = iCSVRow + 1
      iRow = iRow + 1 'Next det row
    Loop 'End det loop
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
  
  Call AppChanges(True)
  Call CSVsave(sJob & "EQUIS", "CSV")
  Sheets("_CSV").Visible = False
  EQUIS = True
End Function

' Certain clients like GEOTECHNICS require two .csv files and one .xml file
Function ESdat_Header_CSVToXML()
 ' Create a sheet first with the right columns then convert that to xml, save it and delete the temporary sheet
       
  ESdatHeaderXML = False
   
  Sheets("Rawdata").Visible = True
  
  sProjectName = Trim(sCliRef) & " (" & Trim(sConTitle) & ")"
  
  sLabSignatory = "Adam Fenwick"
 
  iCSVRow = 2
  
  ' Preparing environment
  Call AppChanges(False)
  ' Creating a CSV data sheet
  Call NewSheet("_CSV")
  
  ' Setting up headers:
  Sheets("_CSV").Range("A1:Q1") = Array("xmlns", "generated", "fileType", "schemaVersion", "LabReport__Lab_Report_Number", _
  "LabReport__Date_Reported", "LabReport__Project_ID", "LabReport__Project_Number", "LabReport__Lab_Contact_Email", "LabReport__Lab_Name", "LabReport__Lab_Signatory", _
  "LabReport__Associated_Files__xmlns", "LabReport__Copies_Sent_To__xmlns", "LabReport__eCoCs__xmlns", "LabReport__eCoCs__eCoC__CoC_Number", _
  "LabReport__eCoCs__eCoC__Lab_Requests__Lab_Request__Number", "LabReport__eCoCs__eCoC__Lab_Requests__Lab_Request__Version")
    
  ' 19: first results column
  iCol = pRDFirstDataCol
  ' 28: first results row
  iRowC = pRDTestHeaderRow + 1
  
  Sheets("Rawdata").Select
  
    aSample = SampleArray(iCol)
    Sheets("_CSV").Select
    sSampDte = Replace(aSample(2), "Empty", "")
    If sSampDte > "" Then sSampDte = "'" & Right("0" & Day(sSampDte), 2) & " " & MonthName(Month(sSampDte), True) & " " & Right(Year(sSampDte), 2)
    sType = aSample(0)
    If InStr("WATERLEACHATETRADE EFF", sType) > 0 Then
        sType = "Water"
    ElseIf sType = "GAS" Then
        sType = "Gas"
    Else
        sType = "Soil"
    End If
    
    ' xmlns
    Cells(iCSVRow, 1).Value = "http://www.escis.com.au/2013/XML"
    ' generated
    Cells(iCSVRow, 2).Value = Now
    ' fileType
    Cells(iCSVRow, 3).Value = "eLabResultsHeader"
    ' schemaVersion
    Cells(iCSVRow, 4).Value = "1.0.1"
    ' LabReport__Lab_Report_Number
    Cells(iCSVRow, 5).Value = sJob
    ' LabReport__Date_Reported - e.g.  01/01/2019
    Cells(iCSVRow, 6).Value = sRepDate
    ' LabReport__Project_ID - client project ID indicated on request
    Cells(iCSVRow, 7).Value = sProjectName
    ' LabReport__Project_Number (lab project number) - job number
    Cells(iCSVRow, 8).Value = sJob
    ' LabReport__Lab_Contact_Email
    Cells(iCSVRow, 9).Value = "Adam.Fenwick@dets.co.uk"
    ' LabReport__Lab_Name
    Cells(iCSVRow, 10).Value = "DETS"
    ' LabReport__Lab_Signatory - name of person who signed off the results
    Cells(iCSVRow, 11).Value = sLabSignatory
    ' LabReport__Associated_Files__xmlns - optional; not sure, so the link is hard coded for now
    Cells(iCSVRow, 12).Value = "http://www.escis.com.au/2013/XML/LabReport"
    ' LabReport__Copies_Sent_To__xmlns - optional; not sure, so the it is left blank for now
    Cells(iCSVRow, 13).Value = "http://www.escis.com.au/2013/XML/LabReport"
    ' LabReport__eCoCs__xmlns -
    Cells(iCSVRow, 14).Value = "http://www.escis.com.au/2013/XML/LabReport"
    ' LabReport__eCoCs__eCoC__CoC_Number - theSDG/COC number indicated on the original request - see coc number field in jobs table
    Cells(iCSVRow, 15).Value = ""
    ' LabReport__eCoCs__eCoC__Lab_Requests__Lab_Request__Number - indicated on the request; normally 1 unless there are additional analyses against the same samples
    Cells(iCSVRow, 16).Value = "1"
    ' LabReport__eCoCs__eCoC__Lab_Requests__Lab_Request__Version - indicated on the request; normally 1 unless the client has made a mistake and wishes to alter the request
    Cells(iCSVRow, 17).Value = "1"
   
   
  Call AppChanges(True)
   
  Sheets("_CSV").Select
    
  ESdatHeaderXML = True
  
  Call ESdatCSVSave
  
  Call ESdat_XML_Generator(sJob)
    
End Function

' This function finds the Interim.csv file and converts it to .xml
Sub ESdat_XML_Generator(sJob)
    Dim Dom As Object
    Dim sCSVFileName As String, sXMLFileName As String
    Dim wb As Workbook
    Set Dom = CreateObject("MSXML2.DOMDocument")
    
    ' Interim .csv file location
    
    ' Live folder path
    sFldr = "L:\db\REPORTS\" & sJob & "\reports\"
   
    ' Test folder path
    'sFldr = "L:\db\REPORTS_Test\" & sJob & "\reports\"
    
    sCSVFileName = "InterimCSV.csv"
    
    'sFileName = sFldr &
    sXMLFileName = sFldr & cleanedString(Trim(sCliRef) & "." & Trim(sConTitle) & "." & Trim(sJob) & "." & "Header") & ".xml"
    
    Set wb = Workbooks.Open(sFldr & sCSVFileName)
    
    With ActiveWorkbook.Worksheets(1)
        lLastRow = .UsedRange.Rows.Count

        For lRow = 2 To lLastRow
            sXMLNS = .Cells(lRow, 1).Value
            sGenerated = .Cells(lRow, 2).Value
            sfileType = .Cells(lRow, 3).Value
            sSchemaVersion = .Cells(lRow, 4).Value
            sLabReportNo = .Cells(lRow, 5).Value
            sDateReported = Format(.Cells(lRow, 6).Value, "yyyy-mm-dd")
            sProjectID = .Cells(lRow, 7).Value
            sProjectNo = .Cells(lRow, 8).Value
            sLabContactEmail = .Cells(lRow, 9).Value
            sLabName = .Cells(lRow, 10).Value
            sLabSignatory = .Cells(lRow, 11).Value
            sAssocFilesXMLNS = .Cells(lRow, 12).Value
            sCopiesSentTo = .Cells(lRow, 13).Value
            sECoCsXMLNS = .Cells(lRow, 14).Value
            eCOCNumber = .Cells(lRow, 15).Value
            eLabRequestNumber = .Cells(lRow, 16).Value
            eLabRequestVersion = .Cells(lRow, 17).Value
    
            With Dom
                With .appendChild(.createElement("ESdat"))
                    .setAttribute "xmlns", sXMLNS
                    .setAttribute "generated", sGenerated
                    .setAttribute "fileType", sfileType
                    .setAttribute "schemaVersion", sSchemaVersion
                    With .appendChild(Dom.createElement("LabReport"))
                        .setAttribute "Lab_Report_Number", sLabReportNo
                        .setAttribute "Date_Reported", sDateReported
                        .setAttribute "Project_ID", sProjectID
                        .setAttribute "Project_Number", sProjectNo
                        .setAttribute "Lab_Contact_Email", sLabContactEmail
                        .setAttribute "Lab_Name", sLabName
                        .setAttribute "Lab_Signatory", sLabSignatory
                        With .appendChild(Dom.createElement("Associated_Files"))
                            .setAttribute "xmlns", sAssocFilesXMLNS
                        End With
                        With .appendChild(Dom.createElement("Copies_Sent_To"))
                            .setAttribute "xmlns", sCopiesSentTo
                        End With
                        With .appendChild(Dom.createElement("eCoCs"))
                            .setAttribute "xmlns", sECoCsXMLNS
                            With .appendChild(Dom.createElement("eCoC"))
                                .setAttribute "CoC_Number", eCOCNumber
                                With .appendChild(Dom.createElement("Lab_Requests"))
                                     With .appendChild(Dom.createElement("Lab_Request"))
                                        .setAttribute "Number", eLabRequestNumber
                                        .setAttribute "Version", eLabRequestVersion
                                     End With
                                End With
                            End With
                        End With
                    End With
                End With
                'MsgBox .XML
            End With
            Dom.Save sXMLFileName
        Next

    End With
    
    ThisWorkbook.Activate

    ' This piece of code attempts to delete the Interim.csv file -
    ' not working properly yet, the macro returns a "Permission denied" message.
    'With New FileSystemObject
    '    If .FileExists(sFldr & sCSVFileName) Then
    '        .DeleteFile sFldr & sCSVFileName
    '    End If
    'End With
   
    wb.Close
    
End Sub

Function AIS_CSV()
  'AIS LIMS results file format for MOUT 1 row per result
  'sampnum,"","det",result
  sJob = Sheets("Rawdata").Cells(7, 1).Value
  AIS_CSV = False
  iCSVRow = 1
  Call AppChanges(False) 'Prepare environment
  Call NewSheet("_CSV")   'Create a CSV data sheet
  iCol = pRDFirstDataCol '19 first results col
  iRowC = pRDTestHeaderRow + 1 '28 first result row
  
  Do While Sheets("Rawdata").Cells(21, iCol).Value <> "" 'Loop sampnums accross
    aSample = SampleArray(iCol)
    
    iRow = iRowC
    Do While Sheets("Rawdata").Cells(iRow, 1).Value <> "" 'Loop dets
      aResult = ResultArray(iRow, iCol)
      
      Sheets("_CSV").Select
      If aResult(9) <> "---" And Trim(aResult(9)) <> "" Then 'Ignore unrequired dets
        AAnalCode = Split(aResult(0), ":") 'AnalCode is in repname after : vis Copper (total):$CuTot_UUW
        If UBound(AAnalCode) > 0 Then
            sAnalCode = Trim(AAnalCode(1))
            sRepname = Trim(AAnalCode(0))
        Else
            sAnalCode = Trim(AAnalCode(0))
            sRepname = sAnalCode
        End If
        Cells(iCSVRow, 1).Value = aSample(3)                'sample_id ie client's sampnum
        Cells(iCSVRow, 2).Value = sRepname
        Cells(iCSVRow, 3).Value = sAnalCode
        Cells(iCSVRow, 4).Value = aResult(9)                'result
        'Cells(iCSVRow, 2).Value = aSample(6)                'Comment
      Else 'Unrequired det
        iCSVRow = iCSVRow - 1 'Decrement to prevent blank row on CSV sheet
      End If
      
      Sheets("Rawdata").Select
      iCSVRow = iCSVRow + 1
      iRow = iRow + 1 'Next det row
    Loop 'End det loop
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
  
  Call AppChanges(True)
  Call CSVsave(sJob, "AIR")
  Sheets("_CSV").Visible = False
  AIS_CSV = True
End Function

Function AIS_CSV2()
    'AIS LIMS results file format for QTSE 1 row per result
    'sampnum,"","det",result
    sJob = Sheets("Rawdata").Cells(7, 1).Value
    AIS_CSV2 = False
    iCSVRow = 1
    Call AppChanges(False) 'Prepare environment
    Call NewSheet("_CSV")   'Create a CSV data sheet
    iCol = pRDFirstDataCol '19 first results col
    iRowC = pRDTestHeaderRow + 1 '28 first result row
  
    Do While Sheets("Rawdata").Cells(21, iCol).Value <> "" 'Loop sampnums accross
      aSample = SampleArray(iCol)
      
      iRow = iRowC
      Do While Sheets("Rawdata").Cells(iRow, 1).Value <> "" 'Loop dets
        aResult = ResultArray(iRow, iCol)
        
        Sheets("_CSV").Select
        If aResult(9) <> "---" And Trim(aResult(9)) <> "" Then 'ignore non-results
            sResult = Trim(aResult(9))
            sDet = Trim(aResult(10))
            sAnalCode = ""
            sAnalCode2 = ""
            sResult2 = ""
            If sDet = "ASB-SOILS" Then
                sAnalCode = "ASB01S"
                sAnalCode2 = "ASB03S"
                sResult2 = sResult
                If sResult = "NAD" Then
                    sResult = "Not Detected"
                    sResult2 = ""
                Else
                    sResult = "Detected"
                End If
            ElseIf sDet = "ASB-MAT" Then
                sAnalCode = "ASB02S"
                sAnalCode2 = "ASBID02B"
                sResult2 = sResult
            ElseIf sDet = "ASB-Q-1S" Then
                sAnalCode = "ASB06S"
                sAnalCode2 = "ASB06Sd"
                sResult2 = sResult
            ElseIf sDet = "ASB-MISCS" Then
                sAnalCode = "ASBID01B"
                If sResult = "NAD" Then sResult = "Not Detected"
                sAnalCode2 = ""
                sResult2 = ""
            ElseIf sDet = "Hg-ps3S" Then
                sAnalCode = "HGTUS"
                sAnalCode2 = ""
                sResult2 = ""
            ElseIf sDet = "Ag-oe3S" Then
                sAnalCode = "AGTS"
                sAnalCode2 = ""
                sResult2 = ""
            ElseIf sDet = "Ag-msS4L" Then
                sAnalCode = "AGDW"
                sAnalCode2 = ""
                sResult2 = ""
            ElseIf sDet = "Ag-msT4L" Then
                sAnalCode = "AGTW"
                sAnalCode2 = ""
                sResult2 = ""
            ElseIf sDet = "Si-oeS3L" Then
                sAnalCode = "SIDW"
                sAnalCode2 = ""
                sResult2 = ""
            ElseIf sDet = "Si-oeT3L" Then
                sAnalCode = "SITW"
                sAnalCode2 = ""
                sResult2 = ""
            ElseIf sDet = "CN-T-LL4L" Then
                sAnalCode = "CNTUW"
                sAnalCode2 = ""
                sResult2 = ""
            ElseIf sDet = "CN-F-LL4L" Then
                sAnalCode = "CNF03W"
                sAnalCode2 = ""
                sResult2 = ""
            ElseIf sDet = "CN-X-LL4L" Then
                sAnalCode = "CNCUW"
                sAnalCode2 = ""
                sResult2 = ""
            End If
            
            'soil
            'Asbestos Screen (Subcon to DETS)                   ASB01S      L   if ASB-SOILS=NAD then Not Detected else Detected
            'Asbestos Matrix                                    ASB02S      C   ASB-MAT
            'Asbestos Type                                      ASB03S      C   ASB-SOILS
            'Asbestos Quantification (Subcon to DETS)           ASB06S      N%  ASB-Q-1S
            'Asbestos Screen + % If Positive (Subcon to DETS)   ASB06Sd     N%  &ASB-Q-1S
            'bulk
            'Asbestos Type (Subcon to DETS)                     ASBID01B    C   if ASB-MISCS=NAD then Not Detected else ASB-MISCS
            'Asbestos Matrix                                    ASBID02B    C   ASB-MAT
            'Mercury            Hg-ps3S     HGTUS   mg/kg
            'Silver             Ag-oe3S     AGTS    mg/kg
            'Silver Dissolved   Ag-msS4L    AGDW    ug/l
            'Silver Total       Ag-msT4L    AGTW    ug/l
            'Silicon Dissolved  Si-oeS3L    SIDW    mg/l
            'Silicon Total      Si-oeT3L    SITW    mg/l
            'Cyanide Total      CN-T-LL4L   CNTUW   ug/l
            'Cyanide Free       CN-F-LL4L   CNF03W  ug/l
            'Cyanide Complex    CN-X-LL4L   CNCUW   ug/l
        
            If sAnalCode > "" Then
                Cells(iCSVRow, 1).Value = aSample(3)                'sample_id ie client's sampnum
                Cells(iCSVRow, 2).Value = ""
                Cells(iCSVRow, 3).Value = sAnalCode
                Cells(iCSVRow, 4).Value = sResult
                If sAnalCode2 > "" Then
                    iCSVRow = iCSVRow + 1
                    Cells(iCSVRow, 1).Value = aSample(3)
                    Cells(iCSVRow, 2).Value = ""
                    Cells(iCSVRow, 3).Value = sAnalCode2
                    Cells(iCSVRow, 4).Value = sResult2
                End If
            Else
                iCSVRow = iCSVRow - 1 'Decrement to prevent blank row on CSV sheet
            End If
        Else 'Unrequired det
            iCSVRow = iCSVRow - 1 'Decrement to prevent blank row on CSV sheet
        End If
        
        Sheets("Rawdata").Select
        iCSVRow = iCSVRow + 1
        iRow = iRow + 1 'Next det row
      Loop 'End det loop
      iCol = iCol + 1 'Next sample column
    Loop 'End sample loop
    
    Call AppChanges(True)
    Call CSVsave(sJob, "AIR")
    Sheets("_CSV").Visible = False
    AIS_CSV2 = True
End Function

Function Highland_CSV() '1 line per sampnum, dets accross
  Viridor_CSV = False
  bSubconFound = False
  bSubconDontAsk = False
  
  sJob = Sheets("Rawdata").Cells(7, 1).Value
  sSite = Sheets("Rawdata").Cells(6, 2).Value 'conttitle 'Sheets("Rawdata").Cells(8, 4).Value '
  sRecvdte = Sheets("Rawdata").Cells(2, 2).Value
  sCmpdte = Sheets("Rawdata").Cells(10, 2).Value
  iCSVRow = 4 'data start row
  Call AppChanges(False)
  Call NewSheet("_CSV")
  'Sheets("_CSV").Range("A2:L2") = Array("Site", "Sample Point", "Date", "Source", "Sample Ref", "LabRef", "Date Samples Received", "Time", "Date Analysis Complete", "MATRIX", "Lab Comments", "Missing Sample")
  Sheets("_CSV").Range("A2:L2") = Array("Site", "Sample Point", "Date", "Source", "Sample Ref", "LabRef", "Lab Comments", "Missing Sample")
  iCol = pRDFirstDataCol '19 first results col
  iRowC = pRDTestHeaderRow + 1 '28 first result row
  
  'NON SUBCON RESULTS
  Do While Trim(Sheets("Rawdata").Cells(21, iCol).Value) <> "" 'Loop samples
    iRow = iRowC
    Sheets("Rawdata").Select
    aSample = SampleArray(iCol)
    If aSample(7) = "" Then
        sRectime = "" '"'00:00"
    Else
        sRectime = Right("0" & aSample(7), 4)
        sRectime = "'" & left(sRectime, 2) & ":" & Right(sRectime, 2)
    End If

    If InStr(aSample(8), "]SU]") > 0 Then
        sMatrix = "Surface water"
    ElseIf InStr(aSample(8), "]GR]") > 0 Then
        sMatrix = "Groundwater"
    ElseIf InStr(aSample(8), "]LL]") > 0 Then
        sMatrix = "Leachate"
    ElseIf InStr(aSample(8), "]SO]") > 0 Then
        sMatrix = "Soil"
    Else
        sMatrix = ""
    End If
    sMissing = ""
    
    Do While Trim(Sheets("Rawdata").Cells(iRow, 1).Value) <> "" 'Loop dets on rawdata
        iCSVCol = 13 'first free col for results
        If Trim(Sheets("Rawdata").Cells(iRow, 10).Value) <> "T" Then 'not subcon
            Sheets("Rawdata").Select
            aResult = ResultArray(iRow, iCol)
            sReslt = ReplaceStringResult(aResult(9), "M/S ---", "") 'Result
            If aResult(9) = "M/S" Then sMissing = "Yes"
            Sheets("_CSV").Select
            
            If sReslt > "" Then 'don't print result or det header if result is M/S or non existant
                bFound = False
                iCSVColB = iCSVCol
                Do While Trim(Cells(1, iCSVColB).Value) <> "" 'Loop detcodes across on CSV sheet
                    If Trim(Cells(1, iCSVColB).Value) = aResult(10) Then 'If the detcode is already present
                        bFound = True
                        Exit Do 'Exit the look up for the det
                    End If
                    iCSVColB = iCSVColB + 1
                Loop
                If bFound = False Then 'Enter the det name on the CSV sheet
                    Cells(2, iCSVColB).Value = aResult(0) 'detname
                    Cells(3, iCSVColB).Value = aResult(4) 'units
                    Cells(1, iCSVColB).Value = aResult(10) 'detcode
                End If
                Cells(iCSVRow, iCSVColB).Value = ReplaceStringResult(aResult(9), "M/S ---", "") 'Result
            End If
            Cells(iCSVRow, 1).Value = sSite 'aJobInfo(3) 'Site
            Cells(iCSVRow, 2).Value = aSample(3)  'Sample Point
            Cells(iCSVRow, 3).Value = "'" + aSample(2)  'sampdate
            Cells(iCSVRow, 4).Value = "DETS" 'Source
            Cells(iCSVRow, 5).Value = aSample(1) 'Sampnum
            Cells(iCSVRow, 6).Value = sJob
            ''Cells(iCSVRow, 7).Value = sRecvdte 'recdate
            ''Cells(iCSVRow, 8).Value = sRectime
            ''Cells(iCSVRow, 9).Value = sCmpdte 'compdate
            ''Cells(iCSVRow, 10).Value = sMatrix
            Cells(iCSVRow, 11).Value = Trim(left(aSample(6), 200)) 'comment
            Cells(iCSVRow, 12).Value = sMissing
            bdazFound = True
        Else
            bSubconFound = True
        End If
        iRow = iRow + 1 'Next det row
    Loop 'End det loop
    
    If bdazFound = True Then
        iCSVRow = iCSVRow + 1
        bdazFound = False
    End If
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
  
  
'SUBCON RESULTS
If bSubconFound = True Then
  iCol = 19
  Do While Trim(Sheets("Rawdata").Cells(21, iCol).Value) <> "" 'Loop samples
    iRow = iRowC
    sResults = ""
    Sheets("Rawdata").Select
    aSample = SampleArray(iCol)
    If aSample(7) = "" Then
        sRectime = "'00:00"
    Else
        sRectime = Right("0" & aSample(7), 4)
        sRectime = "'" & left(sRectime, 2) & ":" & Right(sRectime, 2)
    End If

    Do While Trim(Sheets("Rawdata").Cells(iRow, 1).Value) <> "" 'Loop dets on rawdata
        iCSVCol = 13
        If Trim(Sheets("Rawdata").Cells(iRow, 10).Value) = "T" Then 'subcon det
            Sheets("Rawdata").Select
            aResult = ResultArray(iRow, iCol)
            sReslt = ReplaceStringResult(aResult(9), "M/S ---", "") 'Result
            If aResult(9) = "M/S" Then sMissing = "Yes"
            Sheets("_CSV").Select
            
            If sReslt > "" Then 'don't print result or det header if result is M/S or non existant
                bFound = False
                iCSVColB = iCSVCol
                Do While Trim(Cells(1, iCSVColB).Value) <> "" 'Loop detcodes across on CSV sheet
                    If Trim(Cells(1, iCSVColB).Value) = aResult(10) Then 'If the detcode is already present
                        bFound = True
                        Exit Do 'Exit the look up for the det
                    End If
                    iCSVColB = iCSVColB + 1
                Loop
                If bFound = False Then 'Enter the det name on the CSV sheet
                    Cells(2, iCSVColB).Value = aResult(0) 'detname
                    Cells(3, iCSVColB).Value = aResult(4) 'units
                    Cells(1, iCSVColB).Value = aResult(10) 'detcode
                End If
                
                Cells(iCSVRow, iCSVColB).Value = ReplaceStringResult(aResult(9), "M/S ---", "") 'sReslt
            End If
            
            Cells(iCSVRow, 1).Value = sSite 'aJobInfo(3) 'Site
            Cells(iCSVRow, 2).Value = aSample(3)  'Sample Point
            Cells(iCSVRow, 3).Value = "'" + aSample(2)  'sampdate
            Cells(iCSVRow, 5).Value = aSample(1) 'Sampnum
            Cells(iCSVRow, 6).Value = sJob
            Cells(iCSVRow, 7).Value = sRecvdte 'recdate
            Cells(iCSVRow, 8).Value = sRectime
            Cells(iCSVRow, 9).Value = sCmpdte 'compdate
            Cells(iCSVRow, 10).Value = sMatrix
            If Trim(Sheets("Rawdata").Cells(iRow, 10).Value) = "T" And Cells(iCSVRow, iCSVColB).Value > "" Then
                If bSubconDontAsk = False Then
                    FrmSubconLab.TextBox2.Value = aSample(1) & " (" & aSample(3) & ") " & aResult(0) & " " & aResult(10)
                    FrmSubconLab.Show
                End If
                Cells(iCSVRow, 4).Value = "DETS - subbed to " & sSubLab 'Source
            End If
            Cells(iCSVRow, 11).Value = Trim(left(aSample(6), 200)) 'comment
            Cells(iCSVRow, 12).Value = sMissing
            bdazFound = True
        End If
        iRow = iRow + 1 'Next det row
    Loop 'End det loop
    
    If bdazFound = True Then
        iCSVRow = iCSVRow + 1
        bdazFound = False
    End If
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
End If

  Sheets("_CSV").Select
  Rows("1:1").Delete Shift:=xlUp
  Range("A1").Select

  Call AppChanges(True)
  Call CSVsave(sJob, "CSV")
  'Call CSVsave(ClientFileName)
  Sheets("_CSV").Visible = False
  Viridor_CSV = True
End Function

Function Asbestos_CSV() 'for LIFEENV
    'Project Number  Sample Number   Material    Asbestos Type   Date
    '1 row per result with an extra row for each type of asbestos found if more than 1
    Dim cnn As ADODB.Connection
    Dim rst As ADODB.Recordset
    
    Asbestos_CSV = False
    
    MyConn = SQLDBPath
    Set cnn = New ADODB.Connection
    With cnn
        .Provider = SQLProvider
        .Open MyConn
        .CommandTimeout = 1800
    End With
    
    sJob = Sheets("Rawdata").Cells(7, 1).Value
    sSite = Sheets("Rawdata").Cells(3, 1).Value  'actually want cliref not site 'Sheets("Rawdata").Cells(6, 2).Value 'conttitle
    iCSVRow = 1
    
    Call AppChanges(False) 'Prepare environment
    Sheets("Rawdata").Visible = True
    Call NewSheet("_CSV")   'Create a CSV data sheet
    Sheets("_CSV").Select
    'Sheets("_CSV").Range("A1:E1") = Array("Project Number", "Sample Number", "Material", "Asbestos Type", "Date")
    
    iRowC = 7 'first result row
    iRow = iRowC
    Do While Sheets("Asbestos").Cells(iRow, 2).Value <> "" 'Loop dets
        nSampnu = Sheets("Asbestos").Cells(iRow, 1).Value
        sRes = Trim(Sheets("Asbestos").Cells(iRow, 5).Value)
        aRes = Split(sRes, " ")
        nU = UBound(aRes)
        For rr = 0 To nU
            Cells(iCSVRow, 1).Value = sSite
            Cells(iCSVRow, 2).Value = "'" & Sheets("Asbestos").Cells(iRow, 2).Value
            Cells(iCSVRow, 3).Value = Sheets("Asbestos").Cells(iRow, 4).Value
            Cells(iCSVRow, 4).Value = aRes(rr)
            
            sSql = "select '''' + convert(max(detdate),sql_char) from results where sampnum=" & nSampnu & " and det in ('ASB-MISCS','ASB-MISCSG','ASB-SOILS','ASB-SOILSG') and detorder>0;"
            Set rst = New ADODB.Recordset
            rst.CursorLocation = adUseServer
            rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
            Cells(iCSVRow, 5).CopyFromRecordset rst
            Set rst = Nothing
            If Trim(Cells(iCSVRow, 5).Value) > "" Then Cells(iCSVRow, 5).Value = "'" & Right(Cells(iCSVRow, 5).Value, 2) & "/" & Mid(Cells(iCSVRow, 5).Value, 6, 2) & "/" & left(Cells(iCSVRow, 5).Value, 4)
            'Cells(iCSVRow, 5).Value = "'" + left(Now, 10)
            iCSVRow = iCSVRow + 1
        Next
        iRow = iRow + 1 'Next det row
    Loop 'End det loop
  
    Call AppChanges(True)
    
    Call CSVsave(sJob, "CSV")
    Sheets("_CSV").Visible = False
    Asbestos_CSV = True
End Function

Function ESdat_CSV1() '1 row per sample, no results
'SampleCode  Sampled_Date_Time   Field_ID    Blank1**    Depth   Blank2  Matrix_Type Sample_Type Parent_Sample   Blank3  SDG Lab_Name    Lab_SampleID    Lab_Comments    Lab_Report_Number
  ESdat_CSV1 = False

  Sheets("Rawdata").Visible = True
  sJob = Sheets("Rawdata").Cells(7, 1).Value
  sSite = Sheets("Rawdata").Cells(6, 2).Value 'conttitle
  'sRecDte = Sheets("Rawdata").Cells(2, 2).Value 'Date received
  'If sRecDte > "" Then
  '  sRecDte = FormatDateTime(sRecDte, vbShortDate)
  '  sRecDte = Right("0" & Day(sRecDte), 2) & " " & MonthName(Month(sRecDte), True) & " " & Right(Year(sRecDte), 2)
  'End If
  iCSVRow = 2
  
  Call AppChanges(False) 'Prepare environment
  Call NewSheet("_CSV")   'Create a CSV data sheet
  'frmSubconLab.Show      'Set public subcon variable via form interaction
  Sheets("_CSV").Range("A1:N1") = Array("SampleCode", "Sampled_Date_Time", "Field_ID", "Blank1**", "Depth", "Blank2", "Matrix_Type", "Sample_Type", "Parent_Sample", "SDG", "SDG Lab_Name", "Lab_SampleID", "Lab_Comments", "Lab_Report_Number")
  
  iCol = pRDFirstDataCol '19 first results col
  iRowC = pRDTestHeaderRow + 1 '28 first result row
  
  Do While Sheets("Rawdata").Cells(21, iCol).Value <> "" 'Loop sampnums accross
    aSample = SampleArray(iCol)
    Sheets("_CSV").Select
    sSampDte = Replace(aSample(2), "Empty", "")
    If sSampDte > "" Then sSampDte = "'" & Right("0" & Day(sSampDte), 2) & " " & MonthName(Month(sSampDte), True) & " " & Right(Year(sSampDte), 2)
    sType = aSample(0)
    If InStr("WATERLEACHATETRADE EFF", sType) > 0 Then
        sType = "Water"
    ElseIf sType = "GAS" Then
        sType = "Gas"
    Else
        sType = "Soil"
    End If
    Cells(iCSVRow, 1).Value = aSample(1)                    'SampleCode - sampnum
    Cells(iCSVRow, 2).Value = sSampDte                      'Sampled_Date_Time - sampdate eg 3 Jan 07
    Cells(iCSVRow, 3).Value = Trim(left(aSample(3), 40))    'Field_ID - Sample Point 40
    Cells(iCSVRow, 4).Value = ""                            'Blank1**
    Cells(iCSVRow, 5).Value = aSample(5)                    'Depth - Number or Number - (dash) Number
    Cells(iCSVRow, 6).Value = ""                            'Blank2
    Cells(iCSVRow, 7).Value = sType                         'Matrix_Type - Soil , Water, Gas, SoilGas, Other
    Cells(iCSVRow, 8).Value = "Normal"                      'Sample_Type - Normal,MS (Matrix Spike),MS_D (Matrix Spike Duplicate),LCS_D (LCS Duplicate),LAB_D (Duplicate)
    Cells(iCSVRow, 9).Value = ""                            'Parent_Sample
    Cells(iCSVRow, 10).Value = "DETS " + sRecDate            'SDG
    Cells(iCSVRow, 11).Value = "DETS"                       'Lab_Name - 20
    Cells(iCSVRow, 12).Value = aSample(1)                   'Lab_SampleID - 20
    Cells(iCSVRow, 13).Value = Trim(left(aSample(6), 255))  'Lab_Comments - 255
    Cells(iCSVRow, 14).Value = sJob                         'Lab_Report_Number - job
    Sheets("Rawdata").Select
    iCSVRow = iCSVRow + 1
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
  
  'The records in the file should be sorted by Sample_Type DESC.  A secondary sort should be by Field_ID ASC.
  
  Call AppChanges(True)
  Call CSVsave(sJob & "_Sample2e", "CSV")
  Sheets("_CSV").Visible = False
  ESdat_CSV1 = True
End Function

Function ESdat_CSV2() '1 row per result
'SampleCode  ChemCode    OriginalChemName    Prefix  Result  Result_Unit Total_or_Filtered   Result_type Method_Type Method_Name Extraction_Date Analysed_Date   EQL EQL_Units   Comments    Lab_Qualifier   UCL LCL
  ESdat_CSV2 = False

  Sheets("Rawdata").Visible = True
  sJob = Sheets("Rawdata").Cells(7, 1).Value
  sSite = Sheets("Rawdata").Cells(6, 2).Value 'conttitle
  sLogDate = Sheets("rawdata").Cells(6, 1).Value
  If sLogDate > "" Then
    sLogDate = FormatDateTime(sLogDate, vbShortDate)
    sLogDate = "'" & Right("0" & Day(sLogDate), 2) & " " & MonthName(Month(sLogDate), True) & " " & Right(Year(sLogDate), 2)
  End If
  iCSVRow = 2
  
  Call AppChanges(False) 'Prepare environment
  Call NewSheet("_CSV")   'Create a CSV data sheet
  Sheets("_CSV").Range("A1:N1") = Array("SampleCode", "ChemCode", "OriginalChemName", "Prefix", "Result", "Result_Unit", "Total_or_Filtered", "Result_type", "Method_Type", "Method_Name", "Analysed_Date", "EQL", "EQL_Units", "Comments")
  
  iCol = pRDFirstDataCol '19 first results col
  iRowC = pRDTestHeaderRow + 1 '28 first result row
  
  Do While Sheets("Rawdata").Cells(21, iCol).Value <> "" 'Loop sampnums accross
    aSample = SampleArray(iCol)
    iRow = iRowC
    Do While Sheets("Rawdata").Cells(iRow, 1).Value <> "" 'Loop dets
        aResult = ResultArray(iRow, iCol)
        Sheets("_CSV").Select
        sComment = ""
        sUnits = aResult(4)
        nRes = Replace(aResult(9), " ", "")
        nRes = Replace(nRes, "<", "")
        nRes = Replace(nRes, ">", "")
        
        'Asbestos. non detect result = 0. detect result = 1. Result_Unit = "Detect". The text is inserted into Comments.
        If InStr("ASB-MISCSG ASB-SOILSG", aResult(10)) > 0 Then
            If aResult(9) = "NAD" Then
                nRes = 0
                sComment = "No Asbestos Detected"
            Else
                nRes = 1
                sComment = aResult(9)
            End If
            sUnits = "Detect"
        End If
        
        Select Case aResult(9)
          Case "M/S"
            sComment = "Missing Sample"
            nRes = -999
          Case "I/S"
            sComment = "Insufficient Sample"
            nRes = -999
          Case "U/S"
            sComment = "Unsuitable Sample"
            nRes = -999
        End Select
        sComment = left(Trim(sComment & " " & aSample(6)), 255)
        
        If aResult(9) <> "---" And Trim(aResult(9)) <> "" And IsNumeric(nRes) = True Then 'Ignore non numeric results - there is no slot for them
            'sChemCode = aResult(12) 'cas
            'If sChemCode = "" Or left(sChemCode, 1) = "P" Or IsNumeric(left(sChemCode, 1)) = False Then sChemCode = aResult(10) 'dets.det
            sChemCode = aResult(10) 'dets.det
            sGLThan = left(aResult(9), 1)
            If sGLThan <> "<" And sGLThan <> ">" Then sGLThan = ""
            sTotorFilt = "T"
            If InStr(LCase(aResult(0)), "dissolv") > 0 Or InStr(LCase(aResult(0)), "solub") > 0 Then sTotorFilt = "S"
            sReg = "REG"
            If aSample(0) = "LEACHATE" Then sReg = "leached_REG"
            sMeth = aResult(5)
            If InStr(sMeth, "]") > 0 Then sMeth = Trim(Mid(sMeth, InStr(sMeth, "]") + 1, 100))
            If sMeth = "" Then sMeth = aResult(11)
            
            sMethNa = aResult(5)
            If InStr(sMethNa, "]") > 0 Then
                sMethNa = Trim(left(sMethNa, InStr(sMethNa, "]") - 1))
            Else
                sMethNa = Replace(sMethNa, "]", "")
            End If
            sMethNa = Replace(sMethNa, "*", "")
            sMethNa = Replace(sMethNa, "#", "")
            If sMethNa = "" Then sMethNa = aResult(11)
            
            Cells(iCSVRow, 1).Value = aSample(1)                        'SampleCode - sampnum
            Cells(iCSVRow, 2).Value = sChemCode                         'ChemCode - cas or det 20
            Cells(iCSVRow, 3).Value = aResult(0)                        'OriginalChemName - repname 50
            Cells(iCSVRow, 4).Value = sGLThan                           'Prefix - < or >
            Cells(iCSVRow, 5).Value = nRes                              'Result - result Number
            Cells(iCSVRow, 6).Value = sUnits                            'Result_Unit - units 10
            Cells(iCSVRow, 7).Value = sTotorFilt                        'Total_or_Filtered - T or F tot or filt
            Cells(iCSVRow, 8).Value = sReg                              'Result_Type - REG (regular) or leached_REG (regular leached)
            Cells(iCSVRow, 9).Value = sMeth                             'Method_Type - method desc 50 (suite or test)
            Cells(iCSVRow, 10).Value = sMethNa                          'Method_Name - method or test code 70
            Cells(iCSVRow, 11).Value = sLogDate                         'Analysed_Date - detdate dd mmm yy (eg 3 Jan 07)
            Cells(iCSVRow, 12).Value = aResult(3)                       'EQL - lolod number
            Cells(iCSVRow, 13).Value = sUnits                           'EQL_Units - units 15
            Cells(iCSVRow, 14).Value = sComment                         'Comments 255
      Else 'Unrequired det
        iCSVRow = iCSVRow - 1 'Decrement to prevent blank row on CSV sheet
      End If
      
      Sheets("Rawdata").Select
      iCSVRow = iCSVRow + 1
      iRow = iRow + 1 'Next det row
    Loop 'End det loop
    iCol = iCol + 1 'Next sample column
  Loop 'End sample loop
  
  Call AppChanges(True)
  Call CSVsave(sJob & "_Chemistry2e", "CSV")
  Sheets("_CSV").Visible = False
  ESdat_CSV2 = True
End Function

' Generating the Sample2e.csv file for these clients: SWL (AECOM(Nottingham))
Function ESdat_Sample2e_csv()

  ESdatSample2eCSV = False
   
  Sheets("Rawdata").Visible = True
  
  iCSVRow = 2
  
  ' Preparing environment
  Call AppChanges(False)
  ' Creating a CSV data sheet
  Call NewSheet("_CSV")
  
  ' Setting up headers: SampleCode Sampled_Date_Time Field_ID Blank1** Depth Blank2 Matrix_Type Sample_Type Parent_Sample Blank3 SDG Lab_Name Lab_SampleID Lab_Comments Lab_Report_Number
  Sheets("_CSV").Range("A1:O1") = Array("SampleCode", "Sampled_Date_Time", "Field_ID", "Blank1", "Depth", "Blank2", "Matrix_Type", "Sample_Type", "Parent_Sample", "Blank3", "SDG", "SDG Lab_Name", "Lab_SampleID", "Lab_Comments", "Lab_Report_Number")
  
  ' 19: first results column
  iCol = pRDFirstDataCol
  ' 28: first results row
  iRowC = pRDTestHeaderRow + 1
  
  ' Looping sample numbers accross
  Do While Sheets("Rawdata").Cells(21, iCol).Value <> ""
    aSample = SampleArray(iCol)
    Sheets("_CSV").Select
    sSampDte = Replace(aSample(2), "Empty", "")
    If sSampDte > "" Then sSampDte = "'" & Right("0" & Day(sSampDte), 2) & " " & MonthName(Month(sSampDte), True) & " " & Right(Year(sSampDte), 2)
    sType = aSample(0)
    If InStr("WATERLEACHATETRADE EFF", sType) > 0 Then
        sType = "Water"
    ElseIf sType = "GAS" Then
        sType = "Gas"
    Else
        sType = "Soil"
    End If
    
    ' SampleCode (required, text(40)) - value of Sampnum column
    Cells(iCSVRow, 1).Value = aSample(1)
    ' Sampled_Date_Time (date required, time optional) - value of Sampdate (and Samptime) column e.g. 11/01/2019 (0800)
    Cells(iCSVRow, 2).Value = sSampDte
    ' Field_ID (text(40)) - value of Sample_Id column (sample point)
    Cells(iCSVRow, 3).Value = Trim(left(aSample(3), 40))
    ' Blank1** - empty column
    Cells(iCSVRow, 4).Value = ""
    ' Depth (Number or Number - (dash) Number) - value of Sampdepth column
    Cells(iCSVRow, 5).Value = aSample(5)
    ' Blank2 - empty column
    Cells(iCSVRow, 6).Value = ""
    ' Matrix_Type (Soil , Water, Gas, SoilGas, Other) - value of Type column
    Cells(iCSVRow, 7).Value = sType
    ' Sample_Type - (required, description of sample e.g. Normal, MS (Matrix Spike), MS_D (Matrix Spike Duplicate), Trip_B (Trip Blank), MB (Method Blank),
    ' SB (Storage Blank), LCS (Lab Control Sample), LCS_D (LCS Duplicate), SRM (Standard Reference Material), CRM (Certified Reference Material), LAB_D (Duplicate)
    ' LAB_T (Triplicate), NCP (Non-Client Parent)
    Cells(iCSVRow, 8).Value = "Normal"
    ' Parent_Sample (text(40)) - for duplicates give the SampleCode of the original
    Cells(iCSVRow, 9).Value = ""
    ' Blank3 - empty column
    Cells(iCSVRow, 10).Value = ""
    ' SDG (required, Sample Delivery Group or if not available: Lab Name Date received, text(20)) - e.g. DETS 01/01/2019
    Cells(iCSVRow, 11).Value = "DETS " + sRecDate
    ' Lab Name (required, text(20)) - e.g. DETS
    Cells(iCSVRow, 12).Value = "DETS"
    ' Lab_SampleID (required, text(20)) - value of Sampnum column
    Cells(iCSVRow, 13).Value = aSample(1)
    ' Lab_Comments (optional, text(255)) - ?
    Cells(iCSVRow, 14).Value = Trim(left(aSample(6), 255))
    ' Lab_Report_Number (required, text(255)) - value of Job column
    Cells(iCSVRow, 15).Value = sJob
    
    Sheets("Rawdata").Select
    
    iCSVRow = iCSVRow + 1
    
    ' Next sample column
    iCol = iCol + 1
  ' End of sample loop
  Loop
  
  'The records in the file should be sorted by Sample_Type DESC.  A secondary sort should be by Field_ID ASC.
  ' This is defined within the Run() sub in Dets04 module
  
  Call AppChanges(True)
  
  Sheets("_CSV").Select
  
  ESdatSample2eCSV = True
  
  Call ESdatCSVSave
 
End Function

' Generating the Chemistry2e.csv file for these clients: SWL (AECOM(Nottingham))
Function ESdat_Chemistry2e_csv()

  ESdatChemistry2eCSV = False
   
  Sheets("Rawdata").Visible = True
 
  iCSVRow = 2
  
  ' Preparing environment
  Call AppChanges(False)
  ' Creating a CSV data sheet
  Call NewSheet("_CSV")
  
  ' Setting up headers: SampleCode ChemCode OriginalChemName Prefix Result Result_Unit Total_or_Filtered Result_type Method_Type Method_Name Extraction_Date Analysed_Date EQL EQL_Units Comments Lab_Qualifier UCL LCL
  Sheets("_CSV").Range("A1:R1") = Array("SampleCode", "ChemCode", "OriginalChemName", "Prefix", "Result", "Result_Unit", "Total_or_Filtered", "Result_type", "Method_Type", "Method_Name", "Extraction_Date", "Analysed_Date", "EQL", "EQL_Units", "Comments", "Lab_Qualifier", "UCL", "LCL")
    
  ' 19: first results column
  iCol = pRDFirstDataCol
  ' 28: first results row
  iRowC = pRDTestHeaderRow + 1
  
  ' Looping sample numbers accross
  Do While Sheets("Rawdata").Cells(21, iCol).Value <> ""
    aSample = SampleArray(iCol)
    iRow = iRowC
    
    ' Looping dets
    Do While Sheets("Rawdata").Cells(iRow, 1).Value <> ""
        aResult = ResultArray(iRow, iCol)
        Sheets("_CSV").Select
        sComment = ""
        sUnits = aResult(4)
        nRes = Replace(aResult(9), " ", "")
        nRes = Replace(nRes, "<", "")
        nRes = Replace(nRes, ">", "")
    
        'Asbestos. non detect result = 0. detect result = 1. Result_Unit = "Detect". The text is inserted into Comments.
        If InStr("ASB-MISCSG ASB-SOILSG", aResult(10)) > 0 Then
            If aResult(9) = "NAD" Then
                nRes = 0
                sComment = "No Asbestos Detected"
            Else
                nRes = 1
                sComment = aResult(9)
            End If
            sUnits = "Detect"
        End If
        
        Select Case aResult(9)
          Case "M/S"
            sComment = "Missing Sample"
            nRes = -999
          Case "I/S"
            sComment = "Insufficient Sample"
            nRes = -999
          Case "U/S"
            sComment = "Unsuitable Sample"
            nRes = -999
        End Select
        sComment = left(Trim(sComment & " " & aSample(6)), 255)
        
        ' Ignoring non numeric results - there is no slot for them
        If aResult(9) <> "---" And Trim(aResult(9)) <> "" And IsNumeric(nRes) = True Then
            'sChemCode = aResult(12) 'cas
            'If sChemCode = "" Or left(sChemCode, 1) = "P" Or IsNumeric(left(sChemCode, 1)) = False Then sChemCode = aResult(10) 'dets.det
            'sChemCode = aResult(10) 'dets.det
            
            If aResult(12) = "" Then
                sChemCode = "na"
            Else
                sChemCode = aResult(12) ' cas
            End If
            
            sGLThan = left(aResult(9), 1)
            If sGLThan <> "<" And sGLThan <> ">" Then sGLThan = ""
            sTotorFilt = "T"
            If InStr(LCase(aResult(0)), "dissolv") > 0 Or InStr(LCase(aResult(0)), "solub") > 0 Then sTotorFilt = "S"
            sReg = "REG"
            If aSample(0) = "LEACHATE" Then sReg = "leached_REG"
            sMeth = aResult(5)
            If InStr(sMeth, "]") > 0 Then sMeth = Trim(Mid(sMeth, InStr(sMeth, "]") + 1, 100))
            If sMeth = "" Then sMeth = aResult(11)
            
            sMethNa = aResult(5)
            If InStr(sMethNa, "]") > 0 Then
                sMethNa = Trim(left(sMethNa, InStr(sMethNa, "]") - 1))
            Else
                sMethNa = Replace(sMethNa, "]", "")
            End If
            sMethNa = Replace(sMethNa, "*", "")
            sMethNa = Replace(sMethNa, "#", "")
    
            If sMethNa = "" Then sMethNa = aResult(11)
    
            ' SampleCode (required, text(40)) - value of Sampnum column
            Cells(iCSVRow, 1).Value = aSample(1)
            ' ChemCode (required, text(40) - unique identifier for each analyte (CAS or det)
            Cells(iCSVRow, 2).Value = sChemCode
            ' Original_Chem_Name (required, text(50)) - common name for the analyte (det name)
            Cells(iCSVRow, 3).Value = aResult(0)
            ' Prefix (required if below detection limit e.g. "<" or ">"
            Cells(iCSVRow, 4).Value = sGLThan
            ' Result (required, number - result
            Cells(iCSVRow, 5).Value = nRes
            ' Result_Unit (required, text(10)) - e.g. mg/kg
            Cells(iCSVRow, 6).Value = sUnits
            ' Total_or_Filtered (required - list of T (Total) or F (Filtered)
            Cells(iCSVRow, 7).Value = sTotorFilt
            ' Result_Type (required, restricted to: REG (regular result), leached_REG (regular leached result), SUR (surrogate), SC (spike compound)
            Cells(iCSVRow, 8).Value = sReg
            ' Method_Type (required, text(50) - suite or test
            Cells(iCSVRow, 9).Value = sMeth
            ' Method_Name (required, text(70) - method or test code
            Cells(iCSVRow, 10).Value = sMethNa
            ' Extraction_Date (date - date extracted e.g. 4 Feb 2019)
            Cells(iCSVRow, 11).Value = ""
            ' Analysed_Date (date - date analysed e.g. 3 Jan 2019)
            Cells(iCSVRow, 12).Value = sLogDate
            ' EQL (required, number - lolod number
            Cells(iCSVRow, 13).Value = aResult(3)
            ' EQL_Units (required, text(15) - quantitation limit units)
            Cells(iCSVRow, 14).Value = sUnits
            ' Comments (optional, text(255) - lab comments specific to results)
            Cells(iCSVRow, 15).Value = sComment
            ' Lab_Qualifier (optional, text) - we do not supply this data at the moment
            Cells(iCSVRow, 16).Value = ""
            ' UCL (optional, number) - Upper Confidence Limit used for surrogate recoveries (we do not supply this data at the moment)
            Cells(iCSVRow, 17).Value = ""
            ' LCL (optional, number) - Lower Confidence Limit used for surrogate recoveries (we do not supply this data at the moment)
            Cells(iCSVRow, 18).Value = ""
    ' Unrequired det
    Else
        iCSVRow = iCSVRow - 1 'Decrement to prevent blank row on CSV sheet
    End If
    
    Sheets("Rawdata").Select
    iCSVRow = iCSVRow + 1
    
    ' Next det row
    iRow = iRow + 1
    
    ' End of det loop
    Loop
    ' Next sample column
    iCol = iCol + 1
  ' End of sample loop
  Loop
  
  Call AppChanges(True)
   
  Sheets("_CSV").Select
  
  ESdatChemistry2eCSV = True
  
  Call ESdatCSVSave
  
End Function

' Generating the LabReport2e.csv file for these clients: SWL (AECOM(Nottingham))
Function ESdat_LabReport2e_csv()

  ESdatLabReport2eCSV = False
   
  Sheets("Rawdata").Visible = True
  
  sProjectName = Trim(sCliRef) & " (" & Trim(sConTitle) & ")"
  
  sLabSignatory = "Adam Fenwick"
 
  iCSVRow = 2
  
  ' Preparing environment
  Call AppChanges(False)
  ' Creating a CSV data sheet
  Call NewSheet("_CSV")
  
  ' Setting up headers: Lab_Report_Number Date_Reported Project_Name Lab_Name Lab_Signatory Report_Recipient1 Report_Recipient2 Report_Recipient3
  Sheets("_CSV").Range("A1:H1") = Array("Lab_Report_Number", "Date_Reported", "Project_Name", "Lab_Name", "Lab_Signatory", "Report_Recipient1", "Report_Recipient2", "Report_Recipient3")
    
  ' 19: first results column
  iCol = pRDFirstDataCol
  ' 28: first results row
  iRowC = pRDTestHeaderRow + 1
  
  ' Looping sample numbers accross
  Do While Sheets("Rawdata").Cells(21, iCol).Value <> ""
    aSample = SampleArray(iCol)
    Sheets("_CSV").Select
    sSampDte = Replace(aSample(2), "Empty", "")
    If sSampDte > "" Then sSampDte = "'" & Right("0" & Day(sSampDte), 2) & " " & MonthName(Month(sSampDte), True) & " " & Right(Year(sSampDte), 2)
    sType = aSample(0)
    If InStr("WATERLEACHATETRADE EFF", sType) > 0 Then
        sType = "Water"
    ElseIf sType = "GAS" Then
        sType = "Gas"
    Else
        sType = "Soil"
    End If
    
    ' Lab_Report_Number (required, text(255)) - value of Job column
    Cells(iCSVRow, 1).Value = sJob
    ' Date_Reported (required, date - repdate)
    Cells(iCSVRow, 2).Value = sRepDate
    ' Project_Name - client reference + contract title e.g. 60541293.Woodville
    Cells(iCSVRow, 3).Value = sProjectName
    ' Lab Name (required, text(20)) - e.g. DETS
    Cells(iCSVRow, 4).Value = "DETS"
    ' Lab_Signatory - reported by
    Cells(iCSVRow, 5).Value = sLabSignatory
    ' Report_Recipients1
    Cells(iCSVRow, 6).Value = sReportRecipient
    ' Report_Recipients2
    Cells(iCSVRow, 7).Value = ""
    ' Report_Recipients3
    Cells(iCSVRow, 8).Value = ""
        
    Sheets("Rawdata").Select
    iCSVRow = iCSVRow + 1
    
    ' Next det row
    iRow = iRow + 1
   
    ' Next sample column
    iCol = iCol + 1
  ' End of sample loop
  Loop
  
  Call AppChanges(True)
   
  Sheets("_CSV").Select
  
  ESdatLabReport2eCSV = True
  
  Call ESdatCSVSave
  
End Function

' Generating the SDG2e.csv file for these clients: SWL (AECOM(Nottingham))
Function ESdat_SDG2e_csv()

  ESdatSDG2eCSV = False
   
  Sheets("Rawdata").Visible = True
  
  sProjectName = Trim(sCliRef) & " (" & Trim(sConTitle) & ")"
  
  sLabSignatory = "Adam Fenwick"
 
  iCSVRow = 2
  
  ' Preparing environment
  Call AppChanges(False)
  ' Creating a CSV data sheet
  Call NewSheet("_CSV")
  
  ' Setting up headers:
  Sheets("_CSV").Range("A1:M1") = Array("SDG", "Destination_Laboratory", "Laboratory_Contact", "Date_Sent", "Relinquished_By", "Primary_Contact", "Turnaround_Request", "Special_Instructions", "Cooled", "Lab_Quote_No", "Number_Delivery_Boxes", "Lab_Recipient", "Lab_Login_Date")
    
  ' 19: first results column
  iCol = pRDFirstDataCol
  ' 28: first results row
  iRowC = pRDTestHeaderRow + 1
  
  ' Looping sample numbers accross
  Do While Sheets("Rawdata").Cells(21, iCol).Value <> ""
    aSample = SampleArray(iCol)
    Sheets("_CSV").Select
    sSampDte = Replace(aSample(2), "Empty", "")
    If sSampDte > "" Then sSampDte = "'" & Right("0" & Day(sSampDte), 2) & " " & MonthName(Month(sSampDte), True) & " " & Right(Year(sSampDte), 2)
    sType = aSample(0)
    If InStr("WATERLEACHATETRADE EFF", sType) > 0 Then
        sType = "Water"
    ElseIf sType = "GAS" Then
        sType = "Gas"
    Else
        sType = "Soil"
    End If
    
   ' SDG (required, Sample Delivery Group or if not available: Lab Name Date received, text(20)) - e.g. DETS 01/01/2019
    Cells(iCSVRow, 1).Value = "DETS " + sRecDate
    ' Destination_Laboratory - DETS
    Cells(iCSVRow, 2).Value = "DETS"
    ' Laboratory_Contact - lab signatory
    Cells(iCSVRow, 3).Value = sLabSignatory
    ' Date_Sent
    Cells(iCSVRow, 4).Value = ""
    ' Relinquished_By
    Cells(iCSVRow, 5).Value = ""
    ' Primary_Contact
    Cells(iCSVRow, 6).Value = sReportRecipient
    ' Turnaround_Request
    Cells(iCSVRow, 7).Value = ""
    ' Special_Instructions
    Cells(iCSVRow, 8).Value = "NA"
    ' Cooled - ???
    Cells(iCSVRow, 9).Value = "N"
    ' Lab_Quote_No - ???
    Cells(iCSVRow, 10).Value = sQuote
    ' Number_Delivery_Boxes - ???
    Cells(iCSVRow, 11).Value = ""
    ' Lab_Recipient - ???
    Cells(iCSVRow, 12).Value = ""
    ' Lab_Login_Date - ???
    Cells(iCSVRow, 13).Value = sLogDate
        
    Sheets("Rawdata").Select
    iCSVRow = iCSVRow + 1
    
    ' Next det row
    iRow = iRow + 1
    
   
    ' Next sample column
    iCol = iCol + 1
  ' End of sample loop
  Loop
  
  Call AppChanges(True)
   
  Sheets("_CSV").Select
  
  ESdatSDG2eCSV = True
  
  Call ESdatCSVSave
  
End Function

Function SERT() 'South East Rivers Trust 1 row per result, XLS format
    SERT = False
    If SheetExists("Water") = False Then
      If SheetExists("Leachate") = False Then
          Exit Function
      End If
    End If
    Sheets("Rawdata").Visible = True
    sJobSW = Sheets("Rawdata").Cells(7, 1).Value
    sSite = Sheets("Rawdata").Cells(6, 2).Value 'conttitle
    sLogDate = Sheets("rawdata").Cells(6, 1).Value
    If sLogDate > "" Then
      sLogDate = FormatDateTime(sLogDate, vbShortDate)
      'sLogdate = "'" & Right("0" & Day(sLogdate), 2) & " " & MonthName(Month(sLogdate), True) & " " & Right(Year(sLogdate), 2)
    End If
    iCSVRow = 2
    Call AppChanges(False)
    Call NewSheet2("SERT", "Comments")
    Sheets("SERT").Range("A1:O1") = Array("Site Name", "River", "Grid Reference", "Parameter", "Unique reference", "Date", "Value/ mg l-1", "Value/ |fffd|g l-1", "%", "No/100ml", "Temp/ C", "pH", "Turbidity/NTU ", "Anticedent Weather Conditions", "Notes")
    '    1           2            3               4                5            6          7                 8
    '"Site Name", "River", "Grid Reference", "Parameter", "Unique reference", "Date", "Value/ mg l-1", "Value/ |fffd|g l-1",
    ' 9        10         11      12        13                         14                    15
    '"%", "No/100ml", "Temp/ C", "pH", "Turbidity/NTU ", "Anticedent Weather Conditions", "Notes"
    
    iCol = pRDFirstDataCol '19 first results col
    iRowC = pRDTestHeaderRow + 1 '28 first result row
    
    Do While Sheets("Rawdata").Cells(21, iCol).Value <> "" 'Loop sampnums accross
      aSample = SampleArray(iCol)
      If aSample(0) = "WATER" Or aSample(0) = "LEACHATE" Then
          iRow = iRowC
          Do While Sheets("Rawdata").Cells(iRow, 1).Value <> "" 'Loop dets
              aResult = ResultArray(iRow, iCol)
              Sheets("SERT").Select
              sUnits = LCase(Trim(aResult(4)))
              sDet = Trim(aResult(10))
              nCol = 0
              If sUnits = "mg/l" Then
                  nCol = 7
              ElseIf sUnits = "ug/l" Then
                  nCol = 8
              ElseIf sUnits = "%" Then
                  nCol = 9
              ElseIf left(sDet, 2) = "pH" And sUnits = "" Then
                  nCol = 12
              ElseIf left(sDet, 4) = "TURB" And sUnits = "ntu" Then
                  nCol = 13
              ElseIf left(sDet, 4) = "TEMP" And Right(sUnits, 1) = "c" Then
                  nCol = 11
              ElseIf InStr(LCase(aResult(0)), "coli") > 0 And InStr(sUnits, "100") > 0 And InStr(sUnits, "ml") > 0 Then 'e coli sub
                  nCol = 10
              End If
              If nCol > 0 And aResult(9) <> "---" And Trim(aResult(9)) <> "" Then  'Ignore unrequired dets
                  Cells(iCSVRow, 1).Value = aSample(3)                'Sample Point
                  Cells(iCSVRow, 2).Value = ""
                  Cells(iCSVRow, 3).Value = ""
                  Cells(iCSVRow, 4).Value = aResult(0)                'parameter
                  Cells(iCSVRow, 5).Value = iCSVRow - 1               'unique ref
                  Cells(iCSVRow, 6).Value = sLogDate                  'logdate
                  Cells(iCSVRow, nCol).Value = aResult(9)             'value
                  Cells(iCSVRow, 14).Value = ""
                  Cells(iCSVRow, 15).Value = ""
              Else 'Unrequired det
                  iCSVRow = iCSVRow - 1 'Decrement to prevent blank row on CSV sheet
              End If
              Sheets("Rawdata").Select
              iCSVRow = iCSVRow + 1
              iRow = iRow + 1 'Next det row
          Loop 'End det loop
      End If
      iCol = iCol + 1 'Next sample column
    Loop 'End sample loop
    
    Call AppChanges(True)
    Sheets("SERT").Select
    Cells.Select
    Cells.EntireColumn.AutoFit
    Columns("B:C").ColumnWidth = 4.14
    Columns("E:E").ColumnWidth = 4.43
    Columns("N:O").ColumnWidth = 4.57
    Cells(1, 1).Select
    
    'nL = FindLastRow("SERT")
    'If nL = 1 Then
    '  nR = MsgBox("No Data for SERT report. Report not saved.", vbOKOnly, "SERT")
    'Else
    '  Call XLSsave(sJobSW)
    'End If
    'Call AppChanges(False)
    'Sheets("SERT").Delete
    Call AppChanges(True)
    SERT = True
End Function

Attribute VB_Name = "Dets04"
'sheet bkRawdata must be removed from the template
'DETS 150dpi_cr_54.jpg is used in Letter
'DETS 150dpi_cr_36.jpg used elsewhere
'new 2017 logo - DETSlogo2017_cr.jpg used throughout, at 50% size (70% on letter)
Public pIsMcerts, pHideRawData, bAsbestos, bTextData, bAsbestosNew, bAsbestosOnly, bSubconDontAsk, bNG, bFuel, bPyrite, bWAC, ESdatHeaderXML, ESdatSample2eCSV, ESdatChemistry2eCSV, ESdatLabReport2eCSV, ESdatSDG2eCSV As Boolean
Public pSignature, sClient, sOffice, sJob, sCliRef, sConTitle, sLinkedContacts, sReportRecipient, sRepBy, sSubLab, sLinkedEmails, sLinkedNames, sProjectName, sUser, sSoilTypes, sWaterTypes, sQuote As String
Public bSoil, bWater, bGas, bLeachate, bVOC, bSVOC, bLOI, bForceVOCtab, bForcePortrait, bConcrete, bAsbestosQ, bSplitIntoSingleSamples, bUKWIR, bCombust, bTopsoil, bLOIf, bPAHDP, bSubsoil As Boolean
Public nRDev, pRDVocRow, nSoilVOCSamps, nWaterVOCSamps, nLeachVOCSamps, nSoilSamps, nWaterSamps, nLeachSamps As Integer
Public sRecDate, sLogDate, sRepDate As String
Public sFileName As String
Public SQLDBPath As String
Public SQLProvider As String
Public Const strAlphaNumeric = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ +=-)\(!';><.," ' allowable characters
Public Const pRDTestHeaderRow As Integer = 27   'rawdata data headings row - data starts on next row
Public Const pRDFirstDataCol As Integer = 19    'rawdata 1st sampnum col
Public Const pTestHeaderRow As Integer = 13     '18 report page data headings row - data starts on next row
Public Const pFirstSampleCol As Integer = 7     'report page col for first sample
Public Const sClientsNoMacros As String = " RSRL PETERBRETT CAMPBELL AONE SHANKS BOUY WAKEFIELD WARDARM " 'clients who need report saving as .XLSX to remove macros
Public Const sClientsNoXLs As String = " HIGHLAND SMD SEWATER SCL DAWNUS CHAMBERS TOTALREC AWM TRANSWASTE BULKSERV TAR " 'clients who don't want to be sent Excel reports
Public Const sGlasgowAnalysts As String = "Bill French,Paul Dunn" 'used to set bGlasgow on Asi rpt 13/7/16 MH
Public Const sStringsToNumbersClients As String = " LITHOS AMECEI SHANKS JNP SIRI SRL " 'convert results cells to numbers

Sub Run()

    sUser = LCase(Environ$("username"))
    'SQLDBPath = "L:\TEST DB"
    SQLDBPath = "L:\DB"
    'SQLProvider = "Advantage.OLEDB.1;Data Source=L:\TEST DB;Advantage Server Type=ADS_REMOTE_SERVER;Advantage Table Type=ADS_CDX"
    SQLProvider = "Advantage.OLEDB.1;Data Source=L:\DB;Advantage Server Type=ADS_REMOTE_SERVER;Advantage Table Type=ADS_CDX"
    nRDev = vbNull
    
    ' Code no longer used
    'If nRDev = vbNull And sUser = "darren.iversen" Then
     '   nRDev = MsgBox("Local DB?", vbYesNo)
    '    If nRDev = vbYes Then
    '        SQLDBPath = "C:\Program Files (x86)\AISLIMS\DB"
    '        SQLProvider = "Advantage.OLEDB.1;Data Source=C:\Program Files (x86)\AISLIMS\DB;Advantage Server Type=ADS_LOCAL_SERVER;Advantage Table Type=ADS_CDX"
    '    End If
    'End If

    Application.ScreenUpdating = False
    
    sClient = Trim(Sheets("Rawdata").Cells(3, 4).Value)
    sOffice = Trim(Sheets("Rawdata").Cells(11, 1).Value)
    sJob = Trim(Sheets("Rawdata").Cells(7, 1).Value)
    ' Conttitle
    sSite = Sheets("Rawdata").Cells(6, 2).Value
    sConTitle = Trim(Sheets("Rawdata").Cells(6, 2).Value)
    
    sCliRef = Trim(Sheets("Rawdata").Cells(3, 1).Value)
    sReportRecipient = Trim(Sheets("Rawdata").Cells(5, 2).Value)
    'sRepBy = Trim(Sheets("Rawdata").Cells(10, 3).Value)
    sQuote = Trim(Sheets("Rawdata").Cells(12, 5).Value)
    
    ' Date job was reported
    sRepDate = Sheets("Rawdata").Cells(7, 2).Value
    
    ' Received date
    sRecDate = Sheets("Rawdata").Cells(2, 2).Value
    If sRecDate > "" Then
        sRecDate = FormatDateTime(sRecDate, vbShortDate)
        sRecDate = Right("0" & Day(sRecDate), 2) & " " & MonthName(Month(sRecDate), True) & " " & Right(Year(sRecDate), 2)
    End If
    
    ' Logged date
    sLogDate = Sheets("rawdata").Cells(6, 1).Value
    If sLogDate > "" Then
        sLogDate = FormatDateTime(sLogDate, vbShortDate)
        sLogDate = "'" & Right("0" & Day(sLogDate), 2) & " " & MonthName(Month(sLogDate), True) & " " & Right(Year(sLogDate), 2)
    End If
    
    If UCase(Sheets("Rawdata").Cells(2, 7).Value) = "Y" Then bFuel = True
    bForceVOCtab = False
    If UCase(Sheets("Rawdata").Cells(1, 13).Value) = "Y" Then bForceVOCtab = True
    bForcePortrait = False
    If UCase(Sheets("Rawdata").Cells(2, 13).Value) = "Y" Then bForcePortrait = True
    bSplitIntoSingleSamples = False
    If UCase(Sheets("Rawdata").Cells(2, 10).Value) = "Y" Then bSplitIntoSingleSamples = True
    
    If UCase(Sheets("Rawdata").Cells(4, 19).Value) = "Y" Then bTopsoil = True
    If UCase(Sheets("Rawdata").Cells(8, 19).Value) = "Y" Then bSubsoil = True
    pIsMcerts = False
    pSignature = ""
    pHideRawData = True
    SheetsVisible                                   'expose all sheets, remove unwanted
    If UCase(Sheets("Rawdata").Cells(1, 19).Value) = "Y" Then
        nR = MsgBox("Run custom UKWIR report?", vbYesNo, "UKWIR")
        If nR = vbYes Then
            Call MakeSheet("_P", "UKWIR", "B")
            bUKWIR = True
        End If
    End If
    If Trim(Sheets("Rawdata").Cells(6, 19).Value) = "" Then
        Approver                                    'signatory dialog
    Else
        pSignature = Trim(Sheets("Rawdata").Cells(6, 19).Value)
    End If
    RemoveDuplicates                                'remove duplicates from Rawdata based on DETS.OVERRIDE
    
    ' Defining sample order for certain clients e.g. for ESdat .csv files
    If sClient = "FARM" Or sClient = "ESP" Or sClient = "SWL" Then DetordersCustom
    SpawnSheets                                     'pre-process rawdata, set global booleans, create report sheets
    If bSplitIntoSingleSamples = True Then
        PassDataSingle
    Else
        PassFirst6                                  'copy rawdata columns a,b,d,e,f,g to report sheets
        PassData                                    'passes data to all sheets based on TYPE, formats pages
    End If
    If bPyrite = True Then AddCommentPyrite
    If pIsMcerts = True Then
        PassDescriptions       'passes MCERTs descriptions to descriptions sheet
    Else
        Call DelSheet("_AA")
    End If
    Letter
    CountSampTypes
    If bAsbestos = True Then AsbestosNew
    If bAsbestosQ = True Then ASBQappend
    'If bConcrete = True Then Concrete              not ready yet
    If UCase(Sheets("Rawdata").Cells(1, 7).Value) = "Y" And sClient <> "CORY" Then DetsAccross 'Enitial TEST!
    CommentsPage                                    'deviating sample report
    If bNG = True Then
        Call NG                      'never used - needs redo after Nov 2013 rewrite
    Else
        Call DelSheet("_NGSoil")
        Call DelSheet("_NGWater")
    End If
    'If bFuel = True Then Call Fuel                  'not used but code works
    Call CSV
    If sClient = "CORY" Then
        Call Cory_WetWt
    ElseIf sClient = "SWL" Then
        Call ScottWilson
    'ElseIf sClient = "PETERBRETT" Then 'disabled 5/2/15 (Adam F)
    '    nR = MsgBox("Run EQUIS report?", vbYesNo, "EQUIS")
    '    If nR = vbYes Then Call EQUIS
    ElseIf sClient = "CUCS" Then
        Call CUCSConcrete
    ElseIf sClient = "CURTINS" Then
        Call curtinsbreaches("")
    ElseIf sClient = "MEP" Then
        If SheetExists("SOIL") = True Then
            sLimits = "" 'Trim(Sheets("Rawdata").Cells(5, 19).Value)
            If sLimits = "" Then
                sLimits = InputBox("Which limits checking set should be used?" & Chr(10) & "Input 1 or 2 or 3 or 4" & Chr(10) & "1 = Residential with Gardens" & Chr(10) & "2 = Residential without Gardens" & Chr(10) & "3 = Commercial" & Chr(10) & "4 = do not run limits checking", "Mason Evans Limits Checking")
            End If
            If sLimits = "1" Or sLimits = "2" Or sLimits = "3" Then
                sLimits = "MEP" & sLimits
                Call curtinsbreaches(sLimits)
                Call MEPhighlights(sLimits)
            End If
        End If
    ElseIf sClient = "PATRICK" Then
        If SheetExists("SOIL") = True Then
            sLimits = "" 'Trim(Sheets("Rawdata").Cells(5, 19).Value)
            If sLimits = "" Then
                sMsg = "Which limits checking set should be used?]]]]" _
                & "Input 1 or 2 or 3 or 4 or 5 or 6 or 7]]" _
                & "1 = Residential with Homegrown Produce]]" _
                & "2 = Residential without Homegrown Produce]]" _
                & "3 = Allotments]]" _
                & "4 = Commercial]]" _
                & "5 = Public Open Space Near Residential Housing]]" _
                & "6 = Public Open Space Park]]" _
                & "7 = do not run limits checking"
                sLimits = InputBox(Replace(sMsg, "]]", Chr(10)), "Patrick Parsons Limits Checking")
            End If
            If sLimits = "1" Or sLimits = "2" Or sLimits = "3" Or sLimits = "4" Or sLimits = "5" Or sLimits = "6" Then
                sLimits = "PP" & sLimits
                Call Patrickbreaches(sLimits)
            End If
        End If
    'ElseIf sClient = "COOPERS" Then
    '    Call coopersbreaches 'disabled 12/10/15 AF
    ElseIf sClient = "RPS" Then
        nR = MsgBox("Run custom RPS Excel report?", vbYesNo, "RPS")
        If nR = vbYes Then Call InvokeTemplateRPS
    ElseIf sClient = "CELTEST" And UCase(Sheets("Rawdata").Cells(2, 19).Value) = "Y" Then
        Call CeltestMixWater
    ElseIf sClient = "SERT" Then
        Call SERT
    ElseIf sClient = "PTS" Then
        nR = MsgBox("Run PTS road core breach report?", vbYesNo, "PTS")
        If nR = vbYes Then Call ptsbreaches
    Else
        Call DelSheet("_B") 'breaches sheet
        Call DelSheet("_MW") 'mixing water sheet
    End If
    'If sClient = "BIFFA" Then 'And sOffice = "BIFFAN" Then
    '    nR = MsgBox("Run custom Biffa report?", vbYesNo, "Biffa")
    '    If nR = vbYes Then Call Biffa
    'End If
    If bUKWIR = True Then Call UkWir

    Call Chromatogram
    If bCombust = True Then
        Call Combust '2/6/15 AF
    Else
        Call DelSheet("_Comb")
    End If
    
    If bTopsoil = True Then
        Call Topsoil '23/7/15 RI, 20/1/16 KB
    Else
        Call DelSheet("_TS")
        Call DelSheet("_TV")
    End If
    If bSubsoil = True Then
        Call Subsoil 'march 2017 KB
    Else
        Call DelSheet("_SS")
        Call DelSheet("_SV")
    End If
    If bTopsoil = False And bSubsoil = False Then Call DelSheet("_TC")
    
    If bPAHDP = True And UCase(Sheets("Rawdata").Cells(7, 19).Value) = "Y" Then
        'nR = MsgBox("Create PAH Double Plot Chart?", vbYesNo, "PAH Double Plot")
        nR = vbYes
        If nR = vbYes Then
            Call PAHDP
        Else
            Call DelSheet("_DPData")
            Call DelSheet("_PAHDP")
        End If
    Else
        Call DelSheet("_DPData")
        Call DelSheet("_PAHDP")
    End If
    
    HideSheets
    Finally 'also calls StringsToNumbers for certain clients
    Application.ScreenUpdating = True
End Sub

Sub SheetsVisible()
    Dim i As Integer
    Application.DisplayAlerts = False
    bSomethingDeleted = True
    Do While bSomethingDeleted = True
        bSomethingDeleted = False
        For i = 1 To Application.Sheets.Count
            If SheetExists(i) Then
                Sheets(i).Visible = True
                If left(Sheets(i).Name, 1) <> "_" And Sheets(i).Name <> "Rawdata" Then
                    Sheets(i).Delete
                    bSomethingDeleted = True
                End If
            End If
        Next
    Loop
    Application.DisplayAlerts = True
End Sub

Sub Finally()
    Dim C As Worksheet
    sTitle = ""
    sSoilTypes = Trim(Replace(sSoilTypes, "__", ""))
    sWaterTypes = Trim(Replace(sWaterTypes, "__", ""))
    
    If bSVOC = True Then
        sTitle = "SVOC"
        If bVOC = True Then sTitle = "VOC_SVOC"
    End If
    For Each C In Worksheets
        If C.Visible = True Then
            C.Select
            If Trim(Cells(pTestHeaderRow, 1).Value) = "Test" And Trim(Cells(pTestHeaderRow + 1, 1).Value) = "" _
            And Trim(Cells(6, pFirstSampleCol - 1).Value) = "Lab No" And Trim(Cells(6, pFirstSampleCol).Value) = "" Then
                C.Visible = False
            Else
                If Trim(Cells(pTestHeaderRow, 1).Value) = "Test" Then
                    If InStr(sStringsToNumbersClients, " " & sClient & " ") > 0 Then Call StringsToNumbers
                End If
                If sSoilTypes > "" Then
                    If C.Name = "Soil" Then
                        ActiveSheet.Name = sSoilTypes
                        Cells(2, 1).Value = Replace(sSoilTypes, "_", "/") & " Samples"
                ElseIf sWaterTypes > "" Then
                    ElseIf C.Name = "Water" Then
                        ActiveSheet.Name = sWaterTypes
                        Cells(2, 1).Value = Replace(sWaterTypes, "_", "/") & " Samples"
                    End If
                End If
                If sTitle > "" Then
                    If C.Name = "Soil VOC" Then
                        ActiveSheet.Name = "Soil " & sTitle
                        Cells(2, 1).Value = "Soil " & Replace(sTitle, "_", "/") & " Samples"
                    ElseIf C.Name = "Water VOC" Then
                        ActiveSheet.Name = "Water " & sTitle
                        Cells(2, 1).Value = "Water " & Replace(sTitle, "_", "/") & " Samples"
                    ElseIf C.Name = "Leachate VOC" Then
                        ActiveSheet.Name = "Leachate " & sTitle
                        Cells(2, 1).Value = "Leachate " & Replace(sTitle, "_", "/") & " Samples"
                    End If
                End If
                'Range("a1").Select
                If ActiveSheet.PageSetup.Zoom <> 100 Then '26/10/15 something is messing with the page zoom - stop it
                    If Val(Application.Version) >= 14 Then Application.PrintCommunication = False
                    ActiveSheet.PageSetup.Zoom = 100
                    If Val(Application.Version) >= 14 Then Application.PrintCommunication = True
                End If
                'shade limits breached red for VHE
                If Trim(Sheets("Rawdata").Cells(3, 4).Value) = "VHE" Then Call RedLimits
                
                ActiveWindow.View = xlNormalView 'xlPageLayoutView
                ActiveWindow.Zoom = 100
            End If
        End If
    Next
    Sheets("Letter").Select
    ActiveWindow.Zoom = 90
End Sub

Sub RunDA() 'dets accross
    Sheets("Rawdata").Cells(1, 7).Value = "Y"
    Call Run
End Sub

Sub RemoveDuplicates() 'remove specific inter-test duplicates based on DETS.OVERRIDE
'Remove PAH duplicates from SVOC if both present
'Remove Spec Phenol duplicates from SVOC if both present
'Remove Naphthalene from VOC if Naphthalene PAH present
'Remove Naphthalene from SVOC if Naphthalene VOC present

If Trim(Sheets("Rawdata").Cells(pRDTestHeaderRow + 1, 3).Value) = "" Then
    MsgBox ("The rawdata sheet is empty")
    Stop
End If

If UCase(Trim(Sheets("Rawdata").Cells(1, 10).Value)) = "N" Then 'remove duplicates
    If SheetExists("_bkRawdata") = False Then
        Sheets("Rawdata").Copy After:=Sheets("Rawdata") 'keep a copy of Rawdata
        ActiveSheet.Name = "_bkRawdata"
        Sheets("_bkRawdata").Visible = False
    End If
    
    Sheets("Rawdata").Select
    intLastrow = FindLastRow("Rawdata")
    intLastcol = FindLastColumn("Rawdata")
    sOverdetList = ""
    sOverdetOnThisRptList = ""
    b1found = False
    
    'loop down results, create a single list of overriding dets (from DETS.Override)
    For r = (pRDTestHeaderRow + 1) To intLastrow
        If Trim(Cells(r, 13).Value) > "" Then
            b1found = True
            aO = Split(Cells(r, 15).Value, "[")
            If Trim(aO(3)) > "" Then sOverdetList = sOverdetList & "," & Trim(aO(3))
        End If
    Next
    sOverdetList = sOverdetList & ","
    If b1found = False Then Exit Sub 'no overriding dets on this report
    
    b1found = False
    'loop down results, create a single list of to-be-overidden dets found in this report, with row
    For r = (pRDTestHeaderRow + 1) To intLastrow
        If InStr(sOverdetList, "," & Trim(Cells(r, 3).Value) & ",") > 0 Then
            b1found = True
            sOverdetOnThisRptList = sOverdetOnThisRptList & " , " & Trim(Cells(r, 3).Value) & " ]]" & CStr(r) & "]]"
        End If
    Next
    sOverdetOnThisRptList = sOverdetOnThisRptList & ","
    If b1found = False Then Exit Sub 'no to-be-overidden dets on this report
    
    'loop down results
    For r = (pRDTestHeaderRow + 1) To intLastrow
        aO = Split(Cells(r, 15).Value, "[")
        If UBound(aO) > 2 Then
            If Trim(aO(3)) > "" Then
                aO2 = Split(Trim(aO(3)), ",") 'put list of overriding dets into array
                For o = 0 To UBound(aO2)
                    sOverDet = Trim(aO2(o))
                    If sOverDet > "" Then
                        nI = InStr(sOverdetOnThisRptList, " " & sOverDet & " ")
                        If nI > 0 Then
                            aOverDet = Split(Mid(sOverdetOnThisRptList, nI, 2000), "]]") 'eg SVOC22]]33]]
                            nRw = aOverDet(1) 'override det's row
                            For nc = pRDFirstDataCol To intLastcol
                                If Trim(Cells(nRw, nc).Value) > "" And Trim(Cells(r, nc).Value) > "" Then
                                    'Cells(r, nc).Interior.ColorIndex = 3
                                    Cells(r, nc).Value = "" 'blank result if overriding det has result for this sample
                                End If
                            Next
                            '5/8/15 - next 4 lines are old code that is invalid - you can't just delete all results for that det.
                            'Rows(r).Delete Shift:=xlUp
                            'r = r - 1
                            'intLastrow = intLastrow - 1
                            'exit for
                        End If
                    End If
                Next
            End If
        End If
    Next
Else
    If SheetExists("_bkRawdata") = True Then
        Application.DisplayAlerts = False
        Sheets("Rawdata").Delete
        Sheets("_bkRawdata").Visible = True
        Sheets("_bkRawdata").Copy After:=Sheets("_bkRawdata")
        ActiveSheet.Name = "Rawdata"
        Sheets("Rawdata").Cells(1, 10).Value = "Y"
        Sheets("_bkRawdata").Visible = False
        Application.DisplayAlerts = True
    Else
        MsgBox ("Problem - backup Rawdata not found. Please re-run the report from scratch")
        Stop
    End If
End If
End Sub

Sub DetordersCustom()
    Sheets("Rawdata").Select
    intLastrow = FindLastRow("Rawdata")
    intLastcol = FindLastColumn("Rawdata")
    
    'Sort PAHs on repname for client FARM (PAH total must stay at the end though)
    For rs = (pRDTestHeaderRow + 1) To intLastrow
        nDetorder = Cells(rs, 18).Value
        If nDetorder > 3580 Then Exit Sub
        If nDetorder >= 3400 And nDetorder <= 3580 Then '3599 PAHs excluding totals - these begin at 3581
            nStart = rs
            Do Until nDetorder > 3580 Or Trim(nDetorder) = ""
                rs = rs + 1
                nDetorder = Cells(rs, 18).Value
            Loop
            nEnd = rs - 1
            If nStart >= nEnd Then Exit Sub
            
            'sort on repname
            ActiveWorkbook.Worksheets("Rawdata").Sort.SortFields.Clear
            ActiveWorkbook.Worksheets("Rawdata").Sort.SortFields.Add Key:=Range(Cells(nStart, 1), Cells(nEnd, 1)) _
            , SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            With ActiveWorkbook.Worksheets("Rawdata").Sort
                .SetRange Range(Cells(nStart, 1), Cells(nEnd, intLastcol))
                .Header = xlNo
                .MatchCase = False
                .Orientation = xlTopToBottom
                .SortMethod = xlPinYin
                .Apply
            End With
            
            Exit For
        End If
    Next
End Sub

Sub SpawnSheets() 'pre-process Rawdata and spawn sheets
    Dim intLastrow, intLastcol, cl, nCol As Integer
    Dim sMasterSht, sDet, sTst, sMeth, sType, sDatatype, sBanklod, sUnits, sReslt, sSType As String
    Dim rRange As Range
    Dim C As Range
    
    bSoil = False
    bWater = False
    bGas = False
    bLeachate = False
    bVOC = False
    bSVOC = False
    bAsbestosNew = False
    bAsbestosOnly = True
    bAsbestosQ = False
    bPyrite = False
    bWAC = False
    bCombust = False
    bPAHDP = False
    nPAHDP = 0
    pRDVocRow = 0 'line VOCs/SVOCs begin
    Sheets("Rawdata").Select
    intLastrow = FindLastRow("Rawdata")
    intLastcol = FindLastColumn("Rawdata")
    
    If intLastcol > 256 Then
        nR = MsgBox("IMPORTANT! This Report has more than 238 samples. " & Chr(10) & "You must save as a .XLSM or .XLSX file." & Chr(10) & "Do not save it as a .XLS file, or data will be lost.", vbOKOnly, "IMPORTANT")
    End If
    
    'remove blank dates, shorten year
    Rows("26:26").Replace What:="  /  /    ", Replacement:="n/s", LookAt:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
    Rows("26:26").Replace What:="/201", Replacement:="/1", LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False

    'check for Concrete - NOT READY
    bConcrete = False
'    Set rRange = Range(Cells(pRDTestHeaderRow + 1, 3), Cells(intLastrow, 3)).Find("CEMENTCON", LookIn:=xlValues, LookAt:=xlWhole)
'    If Not rRange Is Nothing Then bConcrete = True

    'loop down rawdata
    Set rRange = Range(Cells(((pRDTestHeaderRow + 1)), 3), Cells(intLastrow, 3))
    For Each C In rRange
        sMeth = Replace(Trim(C.Offset(0, 2).Value), "*", "")
        sMeth = Replace(sMeth, "#", "")
        sTst = Trim(C.Offset(0, 14).Value)
        sSection = Trim(C.Offset(0, 10).Value)
        sType = Trim(C.Offset(0, 3).Value)
        sDet = Trim(C.Text)
        sDatatype = UCase(Trim(C.Offset(0, -1).Value))
        sBanklod = UCase(Trim(C.Offset(0, 9).Value))
        sUnits = Trim(C.Offset(0, 1).Value)
        
        If left(sDet, 4) = "ASB-" Then
            C.Offset(0, 3).Value = "A" 'these will be removed by DelRows
            sType = "A"
            bAsbestos = True
            'If left(sDet, 7) = "ASB-MAT" Or left(sDet, 10) = "ASB-COMMNT" Then bAsbestosNew = True
            If left(sDet, 5) = "ASB-Q" Then bAsbestosQ = True
        Else
            bAsbestosOnly = False
        End If
        
        If sDet = "COMBUST-S" Then bCombust = True
        
        If sSection = "WAC" Then
            C.Offset(0, 3).Value = "WAC" 'these will be removed by DelRows
            bWAC = True
        End If
        If sDet = "PYRITE-1S" Or sDet = "PYRITEB-1S" Then bPyrite = True
        
        If bConcrete = True And InStr("CEMENTCON INSMAT-1S LOI-1S SiO21S CaO1S", sDet) > 0 Then
            C.Offset(0, 3).Value = "O"
            sType = "C"
        End If
        
        If left(sDet, 4) = "LOIf" Then bLOIf = True
        
        If left(sTst, 3) = "PAH" Then
            If Right(sDet, 1) = "S" Then
                If left(sDet, 5) = "FANTH" Or left(sDet, 4) = "PYRE" Or left(sDet, 5) = "BENAA" Or left(sDet, 5) = "CHRYS" Then nPAHDP = nPAHDP + 1
                If nPAHDP > 3 Then bPAHDP = True
            End If
        End If

        If sSection = "SUBCON" Then
            If sType = "" Then
                sSmpTyps = ""
            
                For cl = pRDFirstDataCol To intLastcol
                    If InStr(sSmpTyps, Trim(Cells(20, cl).Value)) = 0 Then sSmpTyps = sSmpTyps & Trim(Cells(20, cl).Value)
                Next

                If sSmpTyps = "WATER" Or sSmpTyps = "LEACHATE" Then
                    sType = "L"
                ElseIf sSmpTyps = "GAS" Then
                    sType = "G"
                ElseIf sSmpTyps = "SOIL" Then
                    sType = "S"
                End If
                
                If sType = "" Then
                    Do Until sType = "W" Or sType = "L" Or sType = "S" Or sType = "G"
                        sType = UCase(InputBox("Subcon det " & sDet & Chr(10) & "Water, Leachate, Soil or Gas?" & Chr(10) & "(Input W or L or S or G)", "Sample type needed", sType))
                    Loop
                    If sType = "W" Then sType = "L"
                End If
                
                If sType > "" Then C.Offset(0, 3).Value = sType
            End If
        End If
        
        If sType = "S" Then
            bSoil = True
        ElseIf sType = "G" Then
            bGas = True
        ElseIf sType = "L" Then
            bWater = True
            If bLeachate = False Then
                For nCol = pRDFirstDataCol To intLastcol 'fixed 8/4/15 intLastrow
                    sSType = UCase(Trim(Cells(20, nCol).Value))
                    If sSType = "LEACHATE" Then
                        bLeachate = True
                        Exit For
                    End If
                Next
            End If
        'ElseIf sMeth = "DETSC 3432" Or sMeth = "DETSC 3431" Then
        '    bVOC = True
        'ElseIf sMeth = "DETS 071" Then
        '    bSVOC = True
        End If
        
        If sDatatype = "C" And sType <> "A" Then bTextData = True
        If sBanklod = "T" Then C.Offset(0, 4).Value = "" 'blanklod: if col L='T' then blank lod in col D
        If sUnits = "" Then C.Offset(0, 1).Value = "" 'ensure units is blank and not a space for AGS rpt
        If InStr(UCase(sDet), "MCERT") > 0 Then
            pIsMcerts = True
            For cl = pRDFirstDataCol To intLastcol
                sReslt = Trim(C.Offset(0, cl - 3).Value) 'Mark Hughes June 2012, only SAND, LOAM, CLAY results are MCERTS accredited
                If InStr(sReslt, "SAND") = 0 And InStr(sReslt, "LOAM") = 0 And InStr(sReslt, "CLAY") = 0 And _
                sReslt <> "---" And sReslt <> "" And sReslt <> "t/f" And InStr(sReslt, "MCERTS scope") = 0 Then
                    C.Offset(0, cl - 3).Value = sReslt & " (sample matrix outside MCERTS scope of accreditation)"
                End If
            Next
        End If
        
        If bNG = True And InStr(C.Offset(0, -2).Value, "]]") = 0 Then C.Offset(0, -2).Value = C.Offset(0, -2).Value & "]]" & sDet
        If bFuel = True And InStr(C.Offset(0, 2).Value, "}}") = 0 Then C.Offset(0, 2).Value = C.Offset(0, 2).Value & "}}" & C.Offset(0, 12).Value
    Next
    
    'prepare report subheadings
    'If InStr(Cells((pRDTestHeaderRow + 1), 5).Value, "]") = 0 Then
        For rs = (pRDTestHeaderRow + 1) To intLastrow
            nDetorder = Cells(rs, 18).Value
            If nDetorder >= 7 And nDetorder <= 199 Then
                sTitle = "]Preparation"
            ElseIf nDetorder >= 200 And nDetorder <= 999 Then
                sTitle = "]Metals"
            ElseIf nDetorder >= 1000 And nDetorder <= 2899 Then
                sTitle = "]Inorganics"
            ElseIf nDetorder >= 2900 And nDetorder <= 2999 Then
                sTitle = "]Calculated Constituent"
            ElseIf nDetorder >= 3000 And nDetorder <= 3399 Then
                sTitle = "]Petroleum Hydrocarbons"
            ElseIf nDetorder >= 3400 And nDetorder <= 3599 Then
                sTitle = "]PAHs"
            ElseIf nDetorder >= 3600 And nDetorder <= 3789 Then
                sTitle = "]PCBs"
            ElseIf nDetorder >= 3790 And nDetorder <= 3799 Then
                sTitle = "]Organics"
            ElseIf nDetorder >= 3800 And nDetorder <= 4099 Then
                sTitle = "]Phenols"
            ElseIf nDetorder >= 4100 And nDetorder <= 4199 Then
                sTitle = "]Organotins"
            ElseIf nDetorder >= 4200 And nDetorder <= 4209 Then
                sTitle = "]Acid Herbicides"
            ElseIf nDetorder >= 4210 And nDetorder <= 4213 Then
                sTitle = "]OCPs"
            ElseIf nDetorder >= 4214 And nDetorder <= 4229 Then
                sTitle = "]OPPs"
            ElseIf nDetorder >= 4230 And nDetorder <= 4232 Then
                sTitle = "]Triazines"
            ElseIf nDetorder >= 4233 And nDetorder <= 4999 Then
                sTitle = "]Organics"
            ElseIf nDetorder >= 5000 And nDetorder <= 5999 Then
                sTitle = "]Subcontracted Analysis"
            ElseIf nDetorder >= 7000 And nDetorder <= 7389 Then
                sTitle = "]Fuel Analyses"
            ElseIf nDetorder >= 7390 And nDetorder <= 7399 Then
                sTitle = "]Ash Melting behaviour"
            ElseIf nDetorder >= 7400 And nDetorder <= 7799 Then
                sTitle = "]XRF"
            ElseIf nDetorder >= 7800 And nDetorder <= 7849 Then
                sTitle = "]PSD"
            ElseIf nDetorder >= 8600 And nDetorder <= 8699 Then
                sTitle = "]Petroleum Hydrocarbons" 'gas
            ElseIf (nDetorder >= 9000 And nDetorder <= 9299) Or nDetorder = 9999998 Then
                sTitle = "]VOCs"
                If nDetorder = 9999998 Then sTitle = "]VOC TICs"
                bVOC = True
                If pRDVocRow = 0 Then pRDVocRow = rs
            ElseIf (nDetorder >= 9300 And nDetorder <= 9900) Or nDetorder = 9999999 Then
                sTitle = "]SVOCs"
                If nDetorder = 9999999 Then sTitle = "]SVOC TICs"
                bVOC = True
                bSVOC = True
                If pRDVocRow = 0 Then pRDVocRow = rs
            Else
                sTitle = "]"
            End If
            If InStr(Cells(rs, 5).Value, "]") = 0 Then Cells(rs, 5).Value = Trim(Cells(rs, 5).Value) & sTitle
        Next
    'End If
    
    Call MakeSheet("_L", "Letter", "B")
    Call MakeSheet("_C", "Comments", "B")
    If pRDVocRow = (pRDTestHeaderRow + 1) Then bVOC = False 'report contains only SVOC/VOC results
    sMasterSht = "_P"
    If bSoil = True Then
        Call MakeSheet(sMasterSht, "Soil", "B")
        If bVOC = True Then Call MakeSheet(sMasterSht, "Soil VOC", "B")
    End If
    If bWater = True Then
        Call MakeSheet(sMasterSht, "Water", "B")
        If bVOC = True Then Call MakeSheet(sMasterSht, "Water VOC", "B")
    End If
    If bLeachate = True Then
        Call MakeSheet(sMasterSht, "Leachate", "B")
        If bVOC = True Then Call MakeSheet(sMasterSht, "Leachate VOC", "B")
    End If
    If bConcrete = True Then Call MakeSheet("_P", "Concrete", "B")
    If bGas = True Then Call MakeSheet(sMasterSht, "Gas", "B")
    If pIsMcerts = True Then
        Call MakeSheet("_AA", "Appendix A", "B")
    End If
End Sub

Sub DelSheet(sMasterSht)
    Application.DisplayAlerts = False
    If SheetExists(sMasterSht) Then
        Sheets(sMasterSht).Visible = True
        Sheets(sMasterSht).Delete
    End If
    Application.DisplayAlerts = True
End Sub

Sub MakeSheet(sMasterSht, sSht, BorA)
    Application.DisplayAlerts = False
    If SheetExists(sSht) Then
        Sheets(sSht).Visible = True
        Sheets(sSht).Delete
    End If
    Sheets(sMasterSht).Visible = True
    If BorA = "B" Then
        Sheets(sMasterSht).Copy Before:=Sheets(sMasterSht)
    Else
        Sheets(sMasterSht).Copy After:=Sheets(sMasterSht)
    End If
    ActiveSheet.Name = sSht
    Application.DisplayAlerts = True
End Sub

Sub MakeSheet2(sMasterSht, sSht, BorA, BorASht)
    Application.DisplayAlerts = False
    If SheetExists(sSht) Then
        Sheets(sSht).Visible = True
        Sheets(sSht).Delete
    End If
    Sheets(BorASht).Visible = True
    Sheets(sMasterSht).Visible = True
    If BorA = "B" Then
        Sheets(sMasterSht).Copy Before:=Sheets(BorASht)
    Else
        Sheets(sMasterSht).Copy After:=Sheets(BorASht)
    End If
    ActiveSheet.Name = sSht
    Application.DisplayAlerts = True
End Sub

Sub PassFirst6() 'pass columns 1,2,4,5,6,7 from rawdata to report sheets.
    Dim lastrow, i As Integer
    
    Sheets("Rawdata").Select
    lastrow = FindLastRow("Rawdata")
    
    Union(Range(Cells((pRDTestHeaderRow + 1), 1), Cells(lastrow, 2)), Range(Cells((pRDTestHeaderRow + 1), 4), Cells(lastrow, 7))).Select
    Selection.Copy
    For Each sSheet In Array("Soil", "UKWIR", "Water", "Leachate", "Gas", "Concrete")
        If SheetExists(sSheet) Then
            Sheets(sSheet).Select
            Cells(pTestHeaderRow + 1, 1).Select
            Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            Range("A1").Select
        End If
    Next
    
    If bVOC = True Then 'if there are 'VOCs copy only 'VOCs
        Sheets("Rawdata").Select
        Union(Range(Cells(pRDVocRow, 1), Cells(lastrow, 2)), Range(Cells(pRDVocRow, 4), Cells(lastrow, 7))).Select
        Selection.Copy
        For Each sSheet In Array("Soil VOC", "Water VOC", "Leachate VOC")
            If SheetExists(sSheet) Then
                Sheets(sSheet).Select
                Cells(pTestHeaderRow + 1, 1).Select
                Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                Range("A1").Select
            End If
        Next
    End If
End Sub

Sub PassData() 'Moves results from rawdata to dest sheet
    Dim lastrow, lastcol, i, j, NextCol, StartCol, StartRow, lastrow2, lastcol2 As Integer
    Dim sSheet, sSType, sFooter As String
    Dim bGo, bBroke As Boolean
    Dim rRange As Range
    Dim ws As Worksheet
    Dim pb As Variant
    
    nSoilSamps = 0
    nWaterSamps = 0
    nLeachSamps = 0
    nSoilVOCSamps = 0
    nWaterVOCSamps = 0
    nLeachVOCSamps = 0
    sSoilTypes = "_"
    sWaterTypes = "_"

    Sheets("Rawdata").Select
    lastcol = FindLastColumn("Rawdata")
    lastrow = FindLastRow("Rawdata")
    
    For Each sSheet In Array("Soil", "Soil VOC", "UKWIR", "Water", "Water VOC", "Leachate", "Leachate VOC", "Gas", "Concrete")
        If SheetExists(sSheet) Then
            bBroke = False
            Sheets("Rawdata").Select
            NextCol = 7 'destination col
            StartRow = 6 'destination Starting row for colums of results
            
            'loop accross rawdata sample columns to gather sampcounts
            For i = pRDFirstDataCol To lastcol
                sSType = Trim(Cells(20, i).Value)
                If left(sSheet, 4) = "Soil" Then
                    If InStr("SOIL BALLAST CONCRETE MISC CORE PAINT POWDER FUEL GEOTECH FERA AGGREGATE SLUDGE FINES GLASS", sSType) > 0 Then
                        nSoilSamps = nSoilSamps + 1
                        If bVOC = True Then 'look for at least 1 'VOC result
                            Set rRange = Range(Cells(pRDVocRow, i), Cells(lastrow, i)).Find("*", LookIn:=xlValues, LookAt:=xlWhole)
                            If Not rRange Is Nothing Then nSoilVOCSamps = nSoilVOCSamps + 1
                        End If
                        If InStr(sSoilTypes, StrConv(sSType, vbProperCase)) = 0 Then sSoilTypes = sSoilTypes & "_" & StrConv(sSType, vbProperCase)
                    End If
                ElseIf left(sSheet, 4) = "Wate" Then
                    If InStr("WATER FUEL TRADE EFF SLUDGE W", sSType) > 0 Then
                        nWaterSamps = nWaterSamps + 1
                        If bVOC = True Then 'look for at least 1 'VOC result
                            Set rRange = Range(Cells(pRDVocRow, i), Cells(lastrow, i)).Find("*", LookIn:=xlValues, LookAt:=xlWhole)
                            If Not rRange Is Nothing Then nWaterVOCSamps = nWaterVOCSamps + 1
                        End If
                        If InStr(sWaterTypes, StrConv(sSType, vbProperCase)) = 0 Then sWaterTypes = sWaterTypes & "_" & StrConv(sSType, vbProperCase)
                    End If
                ElseIf left(sSheet, 4) = "Leac" Then
                    If sSType = "LEACHATE" Then
                        nLeachSamps = nLeachSamps + 1
                        If bVOC = True Then 'look for at least 1 'VOC result
                            Set rRange = Range(Cells(pRDVocRow, i), Cells(lastrow, i)).Find("*", LookIn:=xlValues, LookAt:=xlWhole)
                            If Not rRange Is Nothing Then nLeachVOCSamps = nLeachVOCSamps + 1
                        End If
                    End If
                End If
            Next i
                        
            'dont use separate 'VOC sheets if >80% of all samples have 'VOC results
            bSoilVOCgo = False
            bWaterVOCgo = False
            bLeachVOCgo = False
            If bVOC = True Then
                If nSoilVOCSamps > 0 Then
                    bSoilVOCgo = True
                    If nSoilVOCSamps / nSoilSamps > 0.8 Then bSoilVOCgo = False
                    If bForceVOCtab = True Then bSoilVOCgo = True
                End If
                If nWaterVOCSamps > 0 Then
                    bWaterVOCgo = True
                    If nWaterVOCSamps / nWaterSamps > 0.8 Then bWaterVOCgo = False
                    If bForceVOCtab = True Then bWaterVOCgo = True
                End If
                If nLeachVOCSamps > 0 Then
                    bLeachVOCgo = True
                    If nLeachVOCSamps / nLeachSamps > 0.8 Then bLeachVOCgo = False
                    If bForceVOCtab = True Then bLeachVOCgo = True
                End If
            End If
                                               
            'loop accross rawdata sample columns again to selectively copy/paste to report sheets
            For i = pRDFirstDataCol To lastcol
                bGo = False
                sSType = Trim(Cells(20, i).Value)
                If left(sSheet, 4) = "Soil" Or left(sSheet, 4) = "UKWI" Then
                    If InStr("SOIL BALLAST CONCRETE MISC CORE PAINT POWDER FUEL GEOTECH FERA AGGREGATE SLUDGE FINES GLASS", sSType) > 0 Then bGo = True
                ElseIf left(sSheet, 4) = "Wate" Then
                    If InStr("WATER FUEL TRADE EFF SLUDGE W", sSType) > 0 Then bGo = True
                ElseIf left(sSheet, 4) = "Leac" Then
                    If sSType = "LEACHATE" Then bGo = True
                ElseIf sSheet = "Gas" Then
                    If sSType = "GAS" Then bGo = True
                ElseIf sSheet = "Concrete" Then
                    If InStr("SOIL CONCRETE", sSType) > 0 Then bGo = True
                End If
                
                If bGo = True Then
                    If left(sSheet, 4) = "Soil" And sSType = "FUEL" And bFuel = True Then 'special fuels report
                        sXd1 = UCase(Cells(19, i).Value)
                        If InStr(sXd1, "SRF") > 0 Then
                            Cells(25, i).Value = "SRF"
                        ElseIf InStr(sXd1, "BIO") > 0 Then
                            Cells(25, i).Value = "Solid Biofuel"
                        ElseIf InStr(sXd1, "COAL") > 0 Then
                            Cells(25, i).Value = "Coal/Coke"
                        Else
                            Cells(25, i).Value = "SRF (assumed)"
                        End If
                    ElseIf sSheet = "Soil" And sSType = "CONCRETE" And sClient = "CUCS" Then
                        If InStr(Sheets("Rawdata").Cells(19, i).Value, "]") > 0 Then
                            aR = Split(Sheets("Rawdata").Cells(19, i).Value, "]")
                            Sheets("Rawdata").Cells(19, i).Value = Trim(aR(0))  'xtradata1
                        End If
                        Range(Cells(19, i), Cells(19, i)).Select
                        Selection.Copy
                        Sheets(sSheet).Select
                        Range(Cells(StartRow - 1, NextCol), Cells(StartRow - 1, NextCol)).Select
                        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                        Sheets("Rawdata").Select
                    End If
                    
                    'copy/paste sample details: type, sampnum, sample_id, sampdepth, other_id,agstype,sampdate,samptime
                    If Right(sSheet, 3) <> "VOC" Or (Right(sSheet, 3) = "VOC" And bVOC = True) Then
                        Sheets("Rawdata").Select
                        Range(Cells(20, i), Cells(27, i)).Select
                        Selection.Copy
                        Sheets(sSheet).Select
                        Range(Cells(StartRow - 1, NextCol), Cells(StartRow - 1, NextCol)).Select
                        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                        Sheets("Rawdata").Select
                    End If
                    
                    'copy/paste results column by column
                    bGo2 = True
                    If sSheet = "Soil VOC" Then
                        If bSoilVOCgo = True Then
                            Range(Cells(pRDVocRow, i), Cells(lastrow, i)).Select 'copy 'VOC results
                        Else
                            bGo2 = False
                        End If
                    ElseIf sSheet = "Water VOC" Then
                        If bWaterVOCgo = True Then
                            Range(Cells(pRDVocRow, i), Cells(lastrow, i)).Select 'copy 'VOC results
                        Else
                            bGo2 = False
                        End If
                    ElseIf sSheet = "Leachate VOC" Then
                        If bLeachVOCgo = True Then
                            Range(Cells(pRDVocRow, i), Cells(lastrow, i)).Select 'copy 'VOC results
                        Else
                            bGo2 = False
                        End If
                    ElseIf sSheet = "Soil" Then
                        If bSoilVOCgo = True Then
                            Range(Cells((pRDTestHeaderRow + 1), i), Cells((pRDVocRow - 1), i)).Select 'copy non 'VOC results
                        Else
                            Range(Cells((pRDTestHeaderRow + 1), i), Cells(lastrow, i)).Select 'copy all results
                        End If
                    ElseIf sSheet = "UKWIR" Then
                        Range(Cells((pRDTestHeaderRow + 1), i), Cells(lastrow, i)).Select 'copy all results
                    ElseIf sSheet = "Water" Then
                        If bWaterVOCgo = True Then
                            Range(Cells((pRDTestHeaderRow + 1), i), Cells((pRDVocRow - 1), i)).Select 'copy non 'VOC results
                        Else
                            Range(Cells((pRDTestHeaderRow + 1), i), Cells(lastrow, i)).Select 'copy all results
                        End If
                    ElseIf sSheet = "Leachate" Then
                        If bLeachVOCgo = True Then
                            Range(Cells((pRDTestHeaderRow + 1), i), Cells((pRDVocRow - 1), i)).Select 'copy non 'VOC results
                        Else
                            Range(Cells((pRDTestHeaderRow + 1), i), Cells(lastrow, i)).Select 'copy all results
                        End If
                    Else
                        Range(Cells((pRDTestHeaderRow + 1), i), Cells(lastrow, i)).Select 'copy all results
                    End If
                    If bGo2 = True Then
                        Selection.Copy
                        Sheets(sSheet).Select
                        Range(Cells((pTestHeaderRow + 1), NextCol), Cells((pTestHeaderRow + 1), NextCol)).Select
                        Selection.PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                        Sheets("Rawdata").Select
                    End If
                    NextCol = NextCol + 1
                End If
            Next i
            
            'finish sheet formatting
            Sheets(sSheet).Select
            Set ws = ThisWorkbook.Worksheets(sSheet)
            ws.Activate

            Cells(2, 1).Value = sSheet & " Samples"
            Cells(3, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
            Cells(5, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
            Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
            Rows("7:7").Rows.AutoFit 'row height sample_id
            lastcol2 = FindLastColumn(sSheet)
            lastrow2 = FindLastRow(sSheet)
            
            For j = pFirstSampleCol To lastcol2
                If Cells(10, j).Value = "" Then Cells(10, j).Value = Cells(5, j).Value 'use samples.type if agstype is blank
                Cells(5, j).ClearContents
                If Cells(11, j).Value = "" Then Cells(11, j).Value = "n/s" 'sample date
                If Cells(12, j).Value = "" Then Cells(12, j).Value = "n/s" 'sample time
            Next
            'autofill formats
            If lastcol2 > 7 Then
                Range(Cells(1, pFirstSampleCol), Cells(pTestHeaderRow, pFirstSampleCol)).Select
                Selection.AutoFill Destination:=Range(Cells(1, pFirstSampleCol), Cells(pTestHeaderRow, lastcol2)), Type:=xlFillFormats
            End If
            'autofill formats 2
            'If lastrow2 > pTestHeaderRow + 1 Then
            '    Range(Cells(pTestHeaderRow + 1, 1), Cells(pTestHeaderRow + 1, pFirstSampleCol - 1)).Select
            '    Selection.AutoFill Destination:=Range(Cells(pTestHeaderRow + 1, 1), Cells(lastrow2, pFirstSampleCol - 1)), Type:=xlFillFormats
            'End If
            'det headings down
            Range(Cells(pTestHeaderRow + 1, 1), Cells(lastrow2, pFirstSampleCol - 1)).Select
            Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
            Selection.Borders(xlEdgeTop).Weight = xlThin
            Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
            Selection.Borders(xlEdgeLeft).Weight = xlThin
            Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
            Selection.Borders(xlEdgeRight).Weight = xlThin
            Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
            Selection.Borders(xlEdgeBottom).Weight = xlThin
            Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
            Selection.Borders(xlInsideVertical).Weight = xlHairline
            Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
            Selection.Borders(xlInsideHorizontal).Weight = xlHairline
            Selection.HorizontalAlignment = xlRight
            Selection.Font.Name = "Calibri"
            Selection.Font.Size = 10
            Range(Cells(pTestHeaderRow + 1, 1), Cells(lastrow2, 4)).Select
            Selection.HorizontalAlignment = xlLeft
            Range(Cells(pTestHeaderRow + 1, 4), Cells(lastrow2, 4)).Select
            Selection.Font.Size = 9
           'results area
            Range(Cells(pTestHeaderRow + 1, pFirstSampleCol), Cells(lastrow2, lastcol2)).Select
            Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
            Selection.Borders(xlEdgeTop).Weight = xlThin
            Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
            Selection.Borders(xlEdgeLeft).Weight = xlThin
            Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
            Selection.Borders(xlEdgeRight).Weight = xlThin
            Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
            Selection.Borders(xlEdgeBottom).Weight = xlThin
            Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
            Selection.Borders(xlInsideVertical).Weight = xlHairline
            Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
            Selection.Borders(xlInsideHorizontal).Weight = xlHairline
            Selection.HorizontalAlignment = xlRight
            Selection.Font.Name = "Calibri"
            Selection.Font.Size = 10

            If Trim(Cells(6, 7).Value) = "" Then 'first sampnum
                Application.DisplayAlerts = False
                Sheets(sSheet).Delete
                Application.DisplayAlerts = True
            Else
                Call DelRows(sSheet, lastcol2)
                lastrow2 = FindLastRow(sSheet)
                Call DelCols(lastrow2)
                lastcol2 = FindLastColumn(sSheet)
                If Trim(Cells(6, 7).Value) = "" Then 'first sampnum
                    Application.DisplayAlerts = False
                    Sheets(sSheet).Delete
                    Application.DisplayAlerts = True
                Else
                    'sample heading area border
                    Range(Cells(6, 7), Cells(12, lastcol2)).Select
                    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
                    Selection.Borders(xlEdgeTop).Weight = xlThin
                    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
                    Selection.Borders(xlEdgeLeft).Weight = xlThin
                    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
                    Selection.Borders(xlEdgeRight).Weight = xlThin
                    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
                    Selection.Borders(xlEdgeBottom).Weight = xlThin
                    Range(Cells(6, 6), Cells(12, 6)).Borders(xlEdgeRight).LineStyle = xlContinuous
                    Range(Cells(6, 6), Cells(12, 6)).Borders(xlEdgeRight).Weight = xlThin
                    'det list area border
                    Range(Cells(14, 1), Cells(lastrow2, 6)).Select
                    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
                    Selection.Borders(xlEdgeTop).Weight = xlThin
                    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
                    Selection.Borders(xlEdgeLeft).Weight = xlThin
                    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
                    Selection.Borders(xlEdgeRight).Weight = xlThin
                    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
                    Selection.Borders(xlEdgeBottom).Weight = xlThin
                    'results area border
                    Range(Cells(14, 7), Cells(lastrow2, lastcol2)).Select
                    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
                    Selection.Borders(xlEdgeTop).Weight = xlThin
                    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
                    Selection.Borders(xlEdgeLeft).Weight = xlThin
                    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
                    Selection.Borders(xlEdgeRight).Weight = xlThin
                    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
                    Selection.Borders(xlEdgeBottom).Weight = xlThin
                    Range(Cells(pTestHeaderRow, 1), Cells(pTestHeaderRow, lastcol2)).Borders(xlEdgeBottom).LineStyle = xlContinuous
                    Range(Cells(pTestHeaderRow, 1), Cells(pTestHeaderRow, lastcol2)).Borders(xlEdgeBottom).Weight = xlThin
                    
                    'Call VerticleTitles(lastrow2, lastcol2)
                    Call HorizTitles(sSheet, lastcol2)
                    lastrow2 = FindLastRow(sSheet)
                    bWillFitOnePageLandscape = False
                    If lastrow2 < 30 Then bWillFitOnePageLandscape = True
                    
                    'LANDSCAPE if dets fit on 1 page down and samples need 2+pages accross
                    'colwidth 8 = 10 cols land, 5 port
                    'colwidth 7.43 = 11 cols land, 6 port
                    nCW = 7.14 '8 'results colwidth
                    nCWs = 6.86 '7.57 'results colwidth scrunched to prevent single orphan
                    nP = 6 '5 'number of sample cols Port
                    nL = 11 '10 'number of sample cols Land
                    Range(Columns(pFirstSampleCol), Columns(lastcol2)).ColumnWidth = nCW
                    nSamps = lastcol2 - 6 'no of samples
                    bForceLandscape = False
                    If bWillFitOnePageLandscape = True And nSamps > nP + 1 Then bForceLandscape = True
                    
                    nPgsAccrossPort = Application.WorksheetFunction.RoundUp(nSamps / nP, 0)
                    If bForcePortrait = True Then
                        nZ = nSamps - (Int(nSamps / nPgsAccrossPort) * nPgsAccrossPort)
                        If nZ = 1 Then 'shrink cols to fit 1 more sample
                            Range(Columns(7), Columns(lastcol2)).ColumnWidth = nCWs
                            Columns(2).ColumnWidth = 6.71
                            nColsPerPage = nP + 1
                        Else
                            nColsPerPage = nP
                        End If
                    Else
                        nPgsAccrossLand = Application.WorksheetFunction.RoundUp(nSamps / nL, 0)
                        If bForceLandscape = True Then
                            nZ = nSamps - Application.WorksheetFunction.RoundUp((nPgsAccrossLand - 1) * nL, 0)
                            If nZ = 1 Then 'shrink cols to fit 1 more sample
                                Range(Columns(pFirstSampleCol), Columns(lastcol2)).ColumnWidth = nCWs
                                nColsPerPage = nL + 1
                            Else
                                nColsPerPage = nL
                            End If
                            ActiveSheet.PageSetup.Orientation = xlLandscape
                        Else 'stay portrait
                            nZ = nSamps - (Int(nSamps / nPgsAccrossPort) * nPgsAccrossPort)
                            If nZ = 1 Then 'shrink cols to fit 1 more sample
                                Range(Columns(pFirstSampleCol), Columns(lastcol2)).ColumnWidth = nCWs
                                Columns(2).ColumnWidth = 6.71
                                nColsPerPage = nP + 1
                            Else
                                nColsPerPage = nP
                            End If
                        End If
                    End If
                    
                    'page break right borders
                    nCol3 = pFirstSampleCol - 1 + nColsPerPage
                    Do Until nCol3 >= lastcol2
                        Range(Cells(6, nCol3), Cells(12, nCol3)).Borders(xlEdgeRight).LineStyle = xlContinuous
                        Range(Cells(6, nCol3), Cells(12, nCol3)).Borders(xlEdgeRight).Weight = xlThin
                        Range(Cells(pTestHeaderRow + 1, nCol3), Cells(lastrow2, nCol3)).Borders(xlEdgeRight).LineStyle = xlContinuous
                        Range(Cells(pTestHeaderRow + 1, nCol3), Cells(lastrow2, nCol3)).Borders(xlEdgeRight).Weight = xlThin
                        nCol3 = nCol3 + nColsPerPage
                    Loop
        
                    'fade <lod results
                    Range(Cells(pTestHeaderRow + 1, pFirstSampleCol), Cells(lastrow2, lastcol2)).Select
                    With Application.ReplaceFormat.Font
                        .ThemeColor = xlThemeColorLight1
                        '.TintAndShade = 0.499984740745262
                        .TintAndShade = 0.349986266670736
                    End With
                    Selection.Replace What:="<", Replacement:="", LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
                    
                    'set print area to make HPageBreaks code work
                    'Application.PrintCommunication = False
                    ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(lastrow2, lastcol2)).Address

                    'page break if last row on page is a heading
                    If Right(sSheet, 3) <> "VOC" Then
                        ActiveWindow.View = xlPageBreakPreview
                        On Error Resume Next 'failsafe for buggy HPageBreaks property
                        For Each pb In ws.HPageBreaks
                            If Cells(pb.Location.Row - 1, 4).Value = "" And Cells(pb.Location.Row - 1, 5).Value = "" Then
                                xy = pb.Location.Row
                                ActiveWindow.SelectedSheets.HPageBreaks.Add Before:=Cells(pb.Location.Row - 1, 1)
                            End If
                        Next pb
                        ActiveWindow.View = xlNormalView
                        ActiveWindow.View = xlPageBreakPreview
                        For Each pb In ws.HPageBreaks
                            If Cells(pb.Location.Row - 1, 4).Value = "" And Cells(pb.Location.Row - 1, 5).Value = "" Then
                                ActiveWindow.SelectedSheets.HPageBreaks.Add Before:=Cells(pb.Location.Row - 1, 1)
                            End If
                        Next pb
                         
                        'page break before SVOCs/VOCs (dont break if enough room on current page)
                        If bBroke = False Then
                            bBroke = True
                            nBreakRow = 0
                            For xxx = (pTestHeaderRow + 1) To lastrow2
                                If Cells(xxx, 1).Value = "SVOCs" Or Cells(xxx, 1).Value = "VOCs" Then
                                    nBreakRow = xxx
                                    Exit For
                                End If
                            Next
                            If nBreakRow > 0 Then
                                Worksheets(sSheet).DisplayAutomaticPageBreaks = True
                                nHorizBreaks = Worksheets(sSheet).HPageBreaks.Count
                                If nHorizBreaks > 0 Then
                                    ActiveWindow.View = xlPageBreakPreview
                                    nPg = 1
                                    nPgStart = 1
                                    bPgStart = False
                                    For Each pb In ws.HPageBreaks
                                        nPg = nPg + 1
                                        If bPgStart = False Then
                                            If pb.Location.Row > nBreakRow Then
                                                nPgStart = nPg - 1
                                                bPgStart = True
                                            End If
                                        End If
                                    Next pb
                                    If nPgStart < nHorizBreaks Then
                                        Cells(nBreakRow, 1).Select
                                        ActiveWindow.SelectedSheets.HPageBreaks.Add Before:=ActiveCell
                                    End If
                                End If
                                Worksheets(sSheet).DisplayAutomaticPageBreaks = False
                            End If
                        End If 'page throw
                        On Error GoTo 0
                    End If
 
                    'page borders
                    ActiveWindow.View = xlNormalView
                    ActiveWindow.View = xlPageBreakPreview
                    For Each pb In ws.HPageBreaks
                        Range(Cells(pb.Location.Row - 1, 1), Cells(pb.Location.Row - 1, lastcol2)).Borders(xlEdgeBottom).LineStyle = xlContinuous
                        Range(Cells(pb.Location.Row - 1, 1), Cells(pb.Location.Row - 1, lastcol2)).Borders(xlEdgeBottom).Weight = xlThin
                        Range(Cells(pb.Location.Row, 1), Cells(pb.Location.Row, lastcol2)).Borders(xlEdgeTop).LineStyle = xlContinuous
                        Range(Cells(pb.Location.Row, 1), Cells(pb.Location.Row, lastcol2)).Borders(xlEdgeTop).Weight = xlThin
                    Next pb
                    
                    Call FooterKey(lastrow2, lastcol2, 4)
                    'Application.PrintCommunication = True
                    Cells(pTestHeaderRow, 1).Select
                End If
            End If
        End If
    Next sSheet
    Sheets("Rawdata").Select
    Range("A1").Select
End Sub

Sub AddComment() 'add user text to current tab - called from Add-ins
    sSheet = ActiveSheet.Name
    ActiveSheet.PageSetup.PrintArea = ""
    If sSheet = "Letter" Then
        Rows("26:26").Delete Shift:=xlUp 'last line
        Rows("16:16").Select 'Test Procedures line
        Selection.Copy
        Selection.Insert Shift:=xlDown
        Range("A18").ClearContents 'Notes
        Cells(17, 1).Value = "Notes"
        Range("B17:C17").ClearContents
        Rows("17:17").RowHeight = 12.75
        Range("A17:C17").VerticalAlignment = xlBottom
        Cells(17, 2).Select
    Else
        r = FindLastRow(sSheet) + 1
        Cells(r, 1).Select
        ActiveCell.FormulaR1C1 = "Comments"
        Selection.Font.Bold = True
        Selection.Font.Size = 9
        Range(Cells(r, 1), Cells(r, 6)).Select
        Selection.HorizontalAlignment = xlLeft
        Selection.VerticalAlignment = xlBottom
        Selection.WrapText = False
        Selection.MergeCells = True
        Range(Cells(r + 1, 1), Cells(r + 1, 6)).Select
        Selection.HorizontalAlignment = xlLeft
        Selection.VerticalAlignment = xlBottom
        Selection.WrapText = False
        Selection.MergeCells = True
        Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
        Selection.Borders(xlEdgeLeft).Weight = xlThin
        Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
        Selection.Borders(xlEdgeTop).Weight = xlThin
        Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
        Selection.Borders(xlEdgeBottom).Weight = xlThin
        Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
        Selection.Borders(xlEdgeRight).Weight = xlThin
        Selection.Borders(xlInsideVertical).LineStyle = xlNone
        Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
        Selection.Borders(xlInsideHorizontal).Weight = xlHairline
    End If
End Sub

Sub AddCommentPyrite() '12/3/14
    Sheets("Soil").Select
    Call AddComment
    Selection.WrapText = True
    Selection.RowHeight = 36
    Selection.Value = "In calculating the equivalent pyrite present, it has been assumed that all the sulphur, other than that present as sulphate, is present as pyrite. This may not be the case."
End Sub

Sub RedoBorders(Optional bNoMsg As Boolean)  'redrawn borders for current Chem Report tab - called from Add-ins
    Dim ws As Worksheet
    Dim pb, pbv As Variant
    Dim rRange As Range
    
    If Val(Application.Version) >= 14 Then Application.PrintCommunication = False
    sSheet = ActiveWorkbook.ActiveSheet.Name
    Set ws = ThisWorkbook.Worksheets(sSheet)
    ws.Activate
    If bNoMsg = True Then
        'no interaction
    Else
        If Cells(pTestHeaderRow, 1).Value <> "Test" Or left(ws.Name, 3) = "Asb" Then
            nR = MsgBox("Only for Soil/Water/Leachate Dets-down-Sample-accross type report tabs. Continue?", vbYesNo, "Warning")
            If nR = vbNo Then Exit Sub
        End If
    End If
    If ActiveSheet.PageSetup.Zoom <> 100 Then ActiveSheet.PageSetup.Zoom = 100

    firstrow = Cells.Find(What:="*", After:=[F1], SearchOrder:=xlByColumns, SearchDirection:=xlNext).Row
    lastcol = FindLastColumn(sSheet)
    lastrow = FindLastRow(sSheet)
    Set rRange = Range(Cells(pRDTestHeaderRow + 1, 1), Cells(lastrow, 6)).Find("Comments", LookIn:=xlValues, LookAt:=xlWhole)
    If Not rRange Is Nothing Then
        commentrow = Range(Cells(pRDTestHeaderRow + 1, 1), Cells(lastrow, 6)).Find("Comments", LookIn:=xlValues, LookAt:=xlWhole).Row
        If commentrow < lastrow Then lastrow = commentrow - 1
    End If
    'clear
    'Cells.Select
    Range(Cells(1, 1), Cells(lastrow, lastcol)).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    'redo sample headings accross
    Range(Cells(firstrow, pFirstSampleCol), Cells(pTestHeaderRow - 1, lastcol)).Select
    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
    Selection.Borders(xlEdgeTop).Weight = xlThin
    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
    Selection.Borders(xlEdgeLeft).Weight = xlThin
    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
    Selection.Borders(xlEdgeRight).Weight = xlThin
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlThin
    Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
    Selection.Borders(xlInsideVertical).Weight = xlHairline
    Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
    Selection.Borders(xlInsideHorizontal).Weight = xlHairline
    'redo det headings down
    Range(Cells(pTestHeaderRow + 1, 1), Cells(lastrow, pFirstSampleCol - 1)).Select
    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
    Selection.Borders(xlEdgeTop).Weight = xlThin
    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
    Selection.Borders(xlEdgeLeft).Weight = xlThin
    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
    Selection.Borders(xlEdgeRight).Weight = xlThin
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlThin
    Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
    Selection.Borders(xlInsideVertical).Weight = xlHairline
    Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
    Selection.Borders(xlInsideHorizontal).Weight = xlHairline
    'redo results area
    Range(Cells(pTestHeaderRow + 1, pFirstSampleCol), Cells(lastrow, lastcol)).Select
    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
    Selection.Borders(xlEdgeTop).Weight = xlThin
    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
    Selection.Borders(xlEdgeLeft).Weight = xlThin
    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
    Selection.Borders(xlEdgeRight).Weight = xlThin
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlThin
    Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
    Selection.Borders(xlInsideVertical).Weight = xlHairline
    Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
    Selection.Borders(xlInsideHorizontal).Weight = xlHairline
    'loop down test headings
    For r = (pTestHeaderRow + 1) To lastrow
        If Cells(r, 1).Value > "" And Trim(Cells(r, 4).Value) = "" And Trim(Cells(r, 5).Value) = "" And Trim(Cells(r, 6).Value) = "" Then
            Range(Cells(r, 1), Cells(r, lastcol)).Select
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
            Selection.Borders(xlEdgeTop).Weight = xlThin
        'ElseIf Cells(r, 1).Value = "Comments" Then
        '    Range(Cells(r + 1, 1), Cells(r + 1, 6)).Select
        '    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
        '    Selection.Borders(xlEdgeLeft).Weight = xlThin
        '    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
        '    Selection.Borders(xlEdgeTop).Weight = xlThin
        '    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
        '    Selection.Borders(xlEdgeBottom).Weight = xlThin
        '    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
        '    Selection.Borders(xlEdgeRight).Weight = xlThin
        '    Selection.Borders(xlInsideVertical).LineStyle = xlNone
        '    Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
        '    Selection.Borders(xlInsideHorizontal).Weight = xlHairline
        '    Exit For
        End If
    Next
    ActiveWindow.View = xlNormalView
    ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(lastrow, lastcol)).Address
    ActiveWindow.View = xlPageBreakPreview
    
    'page breaks down
    For Each pb In ws.HPageBreaks
        r = pb.Location.Row
        Range(Cells(r - 1, 1), Cells(r - 1, lastcol)).Borders(xlEdgeBottom).LineStyle = xlContinuous
        Range(Cells(r - 1, 1), Cells(r - 1, lastcol)).Borders(xlEdgeBottom).Weight = xlThin
        Range(Cells(r, 1), Cells(r, lastcol)).Borders(xlEdgeTop).LineStyle = xlContinuous
        Range(Cells(r, 1), Cells(r, lastcol)).Borders(xlEdgeTop).Weight = xlThin
    Next pb
    ActiveWindow.View = xlNormalView
    ActiveWindow.View = xlPageBreakPreview
    'page breaks accross
    For cc = pFirstSampleCol To lastcol
        If Cells(1, cc).EntireColumn.PageBreak <> xlPageBreakNone Then
            'sample header area
            Range(Cells(firstrow, cc - 1), Cells(pTestHeaderRow - 1, cc - 1)).Borders(xlRight).LineStyle = xlContinuous
            Range(Cells(firstrow, cc - 1), Cells(pTestHeaderRow - 1, cc - 1)).Borders(xlRight).Weight = xlThin
            Range(Cells(firstrow, cc), Cells(pTestHeaderRow - 1, cc)).Borders(xlLeft).LineStyle = xlContinuous
            Range(Cells(firstrow, cc), Cells(pTestHeaderRow - 1, cc)).Borders(xlLeft).Weight = xlThin
            'results area
            Range(Cells(pTestHeaderRow + 1, cc - 1), Cells(lastrow, cc - 1)).Borders(xlRight).LineStyle = xlContinuous
            Range(Cells(pTestHeaderRow + 1, cc - 1), Cells(lastrow, cc - 1)).Borders(xlRight).Weight = xlThin
            Range(Cells(pTestHeaderRow + 1, cc), Cells(lastrow, cc)).Borders(xlLeft).LineStyle = xlContinuous
            Range(Cells(pTestHeaderRow + 1, cc), Cells(lastrow, cc)).Borders(xlLeft).Weight = xlThin
        End If
    Next
    ActiveWindow.View = xlNormalView
    
    lastrow = FindLastRow(sSheet)
    Call FooterKey(lastrow, lastcol, 4)
    ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(lastrow, lastcol)).Address
    
    'deal with test headings again - no too difficult
    'For r = (pTestHeaderRow + 1) To lastrow
    '    If Cells(r, 1).Value > "" And Trim(Cells(r, 4).Value) = "" And Trim(Cells(r, 5).Value) = "" And Trim(Cells(r, 6).Value) = "" Then
    '        Range(Cells(r, pFirstSampleCol), Cells(r, pFirstSampleCol)).Borders(xlLeft).LineStyle = xlNone
    '        Range(Cells(r, pFirstSampleCol - 1), Cells(r, pFirstSampleCol - 1)).Borders(xlRight).LineStyle = xlNone
    '    End If
    'Next
    
    'fade <lod results
    Range(Cells(pTestHeaderRow + 1, pFirstSampleCol), Cells(lastrow, lastcol)).Select
    With Application.ReplaceFormat.Font
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0.349986266670736
    End With
    Selection.Replace What:="<", Replacement:="", LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
    
    If ActiveSheet.PageSetup.Zoom <> 100 Then ActiveSheet.PageSetup.Zoom = 100
    If Val(Application.Version) >= 14 Then Application.PrintCommunication = True

    Cells(pTestHeaderRow, 1).Select
End Sub

Sub FooterKey(lastrow2, lastcol2, nMethodCol)
    Dim rRange As Range
    
    sFooter = "Key:"
    Set rRange = Range(Cells(pTestHeaderRow + 1, nMethodCol), Cells(lastrow2, nMethodCol)).Find("~*", LookIn:=xlValues, LookAt:=xlPart)
    If Not rRange Is Nothing Then sFooter = sFooter & " * -not accredited."
    
    Set rRange = Range(Cells(pTestHeaderRow + 1, nMethodCol), Cells(lastrow2, nMethodCol)).Find("#", LookIn:=xlValues, LookAt:=xlPart)
    If Not rRange Is Nothing Then sFooter = sFooter & " # -MCERTS (accreditation only applies if report carries the MCERTS logo)."
    
    Set rRange = Range(Cells(pTestHeaderRow + 1, nMethodCol), Cells(lastrow2, nMethodCol)).Find("$", LookIn:=xlValues, LookAt:=xlPart)
    If Not rRange Is Nothing Then sFooter = sFooter & " $ -subcontracted."
    
    Set rRange = Cells.Find("n/s", LookIn:=xlValues, LookAt:=xlWhole)
    If Not rRange Is Nothing Then sFooter = sFooter & " n/s -not supplied."
    
    Set rRange = Range(Cells(pTestHeaderRow + 1, pFirstSampleCol), Cells(lastrow2, lastcol2)).Find("I/S", LookIn:=xlValues, LookAt:=xlWhole)
    If Not rRange Is Nothing Then sFooter = sFooter & " I/S -insufficient sample."
    
    Set rRange = Range(Cells(pTestHeaderRow + 1, pFirstSampleCol), Cells(lastrow2, lastcol2)).Find("U/S", LookIn:=xlValues, LookAt:=xlWhole)
    If Not rRange Is Nothing Then sFooter = sFooter & " U/S -unsuitable sample."
    
    Set rRange = Range(Cells(pTestHeaderRow + 1, pFirstSampleCol), Cells(lastrow2, lastcol2)).Find("t/f", LookIn:=xlValues, LookAt:=xlWhole)
    If Not rRange Is Nothing Then sFooter = sFooter & " t/f -to follow."
    
    Set rRange = Range(Cells(pTestHeaderRow + 1, pFirstSampleCol), Cells(lastrow2, lastcol2)).Find("nd", LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False)
    If Not rRange Is Nothing Then sFooter = sFooter & " nd -not detected."
    
    If Len(sFooter) > 136 Then
        sFooter = Replace(sFooter, " sample", "") 'beware clash with Page No.
        If Len(sFooter) > 136 Then
            sFooter = Replace(sFooter, " the MCERTS", " MCERTS")
            If Len(sFooter) > 136 Then
                sFooter = Replace(sFooter, "accreditation only applies if report carries", "accredited only if report carries")
                If Len(sFooter) > 136 Then
                    sFooter = Replace(sFooter, "Key: ", "")
                    If Len(sFooter) > 136 Then
                        sFooter = Replace(sFooter, ".", "")
                        If Len(sFooter) > 136 Then
                            sFooter = Replace(sFooter, " (", "(")
                            If Len(sFooter) > 136 Then
                                sFooter = Replace(sFooter, " -", "-")
                                If Len(sFooter) > 136 Then
                                    sFooter = Replace(sFooter, "subcontracted", "subcon")
                                    If Len(sFooter) > 136 Then
                                        sFooter = Replace(sFooter, "insufficient", "insuffic.")
                                        If Len(sFooter) > 136 Then
                                            sFooter = Replace(sFooter, "accredited only", "accred only")
                                            If Len(sFooter) > 136 Then
                                                sFooter = Replace(sFooter, "ited", ".")
                                                If Len(sFooter) > 136 Then
                                                    sFooter = Replace(sFooter, "if report carries ", "w/")
                                                    If Len(sFooter) > 136 Then
                                                        sFooter = Replace(sFooter, ".", "")
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End If
    End If
    ActiveSheet.PageSetup.LeftFooter = "&""-,Regular""&8" & Trim(left(sFooter, 191)) 'footer max 191 chars
End Sub

Sub DelRows(sSheet, lastcol) 'delete water dets from soils tab, soild dets from waters tab etc
    Dim DeleteRow As Boolean
    Dim NextRow, StartRow As Integer
    Dim sDetname, sDatatype, sSupertype As String
      
    StartRow = pTestHeaderRow + 1
    StartColumn = 7 'first sampnum col
    NextRow = StartRow
    
    Do While Trim(Cells(NextRow, 1).Value) > ""
        DeleteRow = False
        sDatatype = Trim(Cells(NextRow, 2).Value)
        sSupertype = Trim(Cells(NextRow, 5).Value)
        If sDatatype = "C" Then
            sDetname = Cells(NextRow, 1).Value
            If InStr(LCase(sDetname), "sample description") > 0 Or sSupertype = "A" Then DeleteRow = True 'del MCERTS, ASB rows
        ElseIf sSupertype = "WAC" Then
            DeleteRow = True
        ElseIf sSheet = "Soil" Then
            If InStr("LGWO", sSupertype) > 0 Then DeleteRow = True
        ElseIf sSheet = "Leachate" Or sSheet = "Water" Then
            If InStr("SGO", sSupertype) > 0 Then DeleteRow = True
        ElseIf sSheet = "Gas" Then
            If InStr("SLWO", sSupertype) > 0 Then DeleteRow = True
        ElseIf sSheet = "Concrete" Then
            If InStr("SLW", sSupertype) > 0 Then DeleteRow = True
        End If
        If DeleteRow = False Then 'del row if no results and no t/fs
            If Application.WorksheetFunction.CountA(Range(Cells(NextRow, StartColumn), Cells(NextRow, lastcol))) = 0 Then DeleteRow = True
            If DeleteRow = False Then 'try again - CountA doesn't always work
                Set rRange = Range(Cells(NextRow, StartColumn), Cells(NextRow, lastcol)).Find("*", LookIn:=xlValues, LookAt:=xlWhole)
                If rRange Is Nothing Then DeleteRow = True
            End If
        End If
        
        If DeleteRow = True Then
            Rows(NextRow).Delete Shift:=xlUp
        Else
            Cells(NextRow, 5).Value = Cells(NextRow, 6).Value 'move LOD to col 5
            Cells(NextRow, 6).Value = Cells(NextRow, 3).Value 'move units to col 6
            Cells(NextRow, 2).Clear
            Cells(NextRow, 3).Clear
            Range(Cells(NextRow, 1), Cells(NextRow, 3)).MergeCells = True
            Range(Cells(NextRow, 1), Cells(NextRow, 3)).ShrinkToFit = True
            Range(Cells(NextRow, 5), Cells(NextRow, 5)).ShrinkToFit = True
        End If
        NextRow = NextRow + IIf(DeleteRow, 0, 1)
    Loop
End Sub

Sub DelCols(lastrow) 'delete columns with no results and no t/fs.
    Dim NextCol, StartRow, StartCol As Integer
    Dim rRange As Range
      
    StartRow = pTestHeaderRow + 1
    StartCol = 7 'first sampnum col
    NextCol = StartCol
    Do While Cells(6, NextCol).Value > "" 'sampnum
        If Application.WorksheetFunction.CountA(Range(Cells(StartRow, NextCol), Cells(lastrow, NextCol))) = 0 Then
            Columns(NextCol).Delete Shift:=xlLeft
        Else 'try again - CountA doesn't always work
            Set rRange = Range(Cells(StartRow, NextCol), Cells(lastrow, NextCol)).Find("*", LookIn:=xlValues, LookAt:=xlWhole)
            If rRange Is Nothing Then
                Columns(NextCol).Delete Shift:=xlLeft
            Else
                NextCol = NextCol + 1
            End If
        End If
    Loop
End Sub

Sub HorizTitles(sSheet, lastcol) 'also adjusts rowheight for long repnames
    Dim NextRow, StartRow, x As Integer
    Dim sMeth, sTitle, sM, sBreak As String
    
    Application.DisplayAlerts = False
    
    NextRow = pTestHeaderRow
    Do While Trim(Cells(NextRow, 1).Value) > ""
        NextRow = NextRow + 1
        nLen = Len(Cells(NextRow, 1).Value)
        If nLen > 40 Then Rows(NextRow).RowHeight = 23
        sMeth = Cells(NextRow, 4).Value
        If InStr(sMeth, "]") > 0 Then
            y = Split(sMeth, "]")
            Cells(NextRow, 4).Value = y(0)
            sTitleLast = sTitle
            sTitle = y(1)
            If sTitleLast <> sTitle Then
                Application.CutCopyMode = False '21/6/17 added to fix bug caused by Excel 12016 build 1705
                Rows(NextRow).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
                Rows(NextRow).RowHeight = 12.75
                Cells(NextRow, 1).Value = sTitle
                Range(Cells(NextRow, 1), Cells(NextRow, 3)).Select
                With Selection.Font
                    .Name = "Calibri"
                    .Size = 10
                    .Bold = True
                End With
                With Selection
                    .ShrinkToFit = False
                    .MergeCells = True
                End With
                Range(Cells(NextRow, 1), Cells(NextRow, lastcol)).Select
                Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
                Selection.Borders(xlEdgeTop).Weight = xlThin
                Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
                Selection.Borders(xlEdgeBottom).Weight = xlHairline
                Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
                Selection.Borders(xlEdgeLeft).Weight = xlThin
                Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
                Selection.Borders(xlEdgeRight).Weight = xlThin
                Selection.Borders(xlInsideVertical).LineStyle = xlNone
                Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
                With Selection.Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .ThemeColor = xlThemeColorDark1
                    .TintAndShade = 0 'white
                    '.TintAndShade = -4.99893185216834E-02 '-0.149998474074526
                    .PatternTintAndShade = 0
                End With
                NextRow = NextRow + 1
            End If
        End If
    Loop
End Sub

Sub VerticleTitles(lastrow, lastcol) 'not used
    Dim NextRow, StartRow, x As Integer
    Dim sMeth, sTitle, sM, sBreak As String
    
    For NextRow = pTestHeaderRow + 1 To lastrow
        sMeth = Cells(NextRow, 4).Value
        If InStr(sMeth, "]") > 0 Then
            y = Split(sMeth, "]")
            Cells(NextRow, 4).Value = y(0)
            sTitleLast = sTitle
            sTitle = y(1)
            Cells(NextRow, 3).Value = sTitle
        End If
    Next
      
    Application.DisplayAlerts = False
    For NextRow = pTestHeaderRow + 1 To lastrow
        StartRow = NextRow
        sTitle = Cells(NextRow, 3).Value
        Do While Cells(NextRow, 3).Value = sTitle And NextRow <= lastrow
            NextRow = NextRow + 1
            If NextRow > lastrow Then Exit Do
        Loop
        'If NextRow - StartRow > 1 Then
            NextRow = NextRow - 1
            Range(Cells(StartRow, 3), Cells(NextRow, 3)).Select 'merge
            With Selection
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlTop
                .Orientation = -90
                .ShrinkToFit = True
                .MergeCells = True
                .Font.Size = 11
            End With
            With Selection.Borders(xlEdgeLeft)
                .Weight = xlHairline
            End With
            With Selection
                .MergeCells = False
            End With
            Range(Cells(StartRow, 1), Cells(NextRow, lastcol)).Select 'border all results
            With Selection.Borders(xlEdgeTop)
                .Weight = xlThin
            End With
            With Selection.Borders(xlEdgeBottom)
                .Weight = xlThin
            End With
            If bBroke = False And (left(sTitle, 3) = "SVO" Or left(sTitle, 3) = "VOC") Then 'page break before
                bBroke = True
                Cells(StartRow, 1).Select
                ActiveWindow.SelectedSheets.HPageBreaks.Add Before:=ActiveCell
            End If
    Next
    
    Application.DisplayAlerts = True
End Sub

Sub PassDescriptions()
    Dim lastrow As Integer
    Dim lastcol As Integer
    Dim LastRowD As Integer
    Dim LastColD As Integer
    Dim i As Integer
    
    Call MakeSheet("_D", "Descriptions", "B")
    Sheets("Rawdata").Select
    lastrow = FindLastRow("Rawdata")
    lastcol = FindLastColumn("Rawdata")
    For i = (pRDTestHeaderRow + 1) To lastrow
        'If Trim(Cells(i, 2).Value) = "C" And Trim(Cells(i, 6).Value) <> "A" And Trim(Cells(i, 6).Value) <> "WAC" Then
        If Trim(Cells(i, 3).Value) = "MCERT" Then
            Range(Cells(21, pRDFirstDataCol), Cells(24, lastcol)).Select
            Selection.Copy
            Sheets("Descriptions").Select
            Range("B8").Select
            Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
            Sheets("Rawdata").Select
    
            Range(Cells(i, pRDFirstDataCol), Cells(i, lastcol)).Select 'results
            Selection.Copy
            Sheets("Descriptions").Select
            Range("F8").Select
            Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
            Sheets("Rawdata").Select
        End If
    Next i

    Sheets("Descriptions").Select
    LastColD = FindLastColumn("Descriptions")
    LastRowD = FindLastRow("Descriptions")
    If LastRowD > 8 Then
        Range(Cells(8, 1), Cells(8, 6)).Select 'autofill
        Selection.AutoFill Destination:=Range(Cells(8, 1), Cells(LastRowD, 6)), Type:=xlFillFormats
    End If

    For i = LastRowD To 8 Step -1
        If IsEmpty(Cells(i, 6).Value) = True Then 'result
           Range(Cells(i, 1), Cells(i, LastColD)).Delete
        Else
            Cells(i, 1).Value = Cells(i, 3).Value
            Cells(i, 3).Value = Cells(i, 4).Value
            Cells(i, 4).Value = Cells(i, 2).Value
            Cells(i, 2).Value = Cells(i, 5).Value
            Cells(i, 5).Value = ""
            If Trim(Sheets("Rawdata").Cells(7, 2).Value) = "" Then
                Cells(i, 5).Value = "'" & FormatDateTime(Now, vbShortDate)
            Else
                Cells(i, 5).Value = "'" & Sheets("Rawdata").Cells(7, 2).Value 'date completed
            End If
        End If
    Next i
    
    'remove unused cols
    LastRowD = FindLastRow("Descriptions")
    bKeepB = False
    bKeepC = False
    For i = 8 To LastRowD
        If Trim(Cells(i, 2).Value) > "" Then bKeepB = True
        If Trim(Cells(i, 3).Value) > "" Then bKeepC = True
        Rows(i).Rows.AutoFit 'row height
    Next i
    nFinalCol = 6
    If bKeepC = False Then
        nW = Columns(3).ColumnWidth
        Columns(3).Delete Shift:=xlLeft
        nFinalCol = nFinalCol - 1
        Columns(nFinalCol).ColumnWidth = Columns(nFinalCol).ColumnWidth + nW
    End If
    If bKeepB = False Then
        nW = Columns(2).ColumnWidth
        Columns(2).Delete Shift:=xlLeft
        nFinalCol = nFinalCol - 1
        Columns(nFinalCol).ColumnWidth = Columns(nFinalCol).ColumnWidth + nW
    End If
    
    Range(Cells(8, 1), Cells(LastRowD, nFinalCol)).Select 'borders
    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
    Selection.Borders(xlEdgeTop).Weight = xlThin
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlThin
    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
    Selection.Borders(xlEdgeLeft).Weight = xlThin
    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
    Selection.Borders(xlEdgeRight).Weight = xlThin
    
    Cells(3, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
    Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
    Cells(5, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
    LastColD = FindLastColumn("Descriptions")
    ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(LastRowD, LastColD)).Address
    Cells(7, 1).Select
End Sub

Sub Concrete()
    Dim r As Integer
    If SheetExists("Concrete") = True Then
        Sheets("Concrete").Select
        lastrow = FindLastRow("Concrete")
        lastcol = FindLastColumn("Concrete")
        'loop down
        For r = (pTestHeaderRow + 1) To lastrow
            If Cells(r, 1).Value = "Inorganics" And Trim(Cells(r, 4).Value) = "" And Trim(Cells(r, 5).Value) = "" And Trim(Cells(r, 6).Value) = "" Then
                'Rows(r).Delete Shift:=xlUp 'delete test headings
                'r = r - 1
                Cells(r, 1).Value = "Constituents"
            ElseIf Cells(r, 1).Value = "Cement Content" Then
                Application.CutCopyMode = False '21/6/17 added to fix bug caused by Excel 12016 build 1705
                Rows(r).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
                Rows(r).RowHeight = 12.75
                Cells(r, 1).Value = "Calculated Constituent"
                Range(Cells(r, 1), Cells(r, 3)).Select
                With Selection.Font
                    .Size = 9
                    .Bold = True
                End With
                With Selection
                    .ShrinkToFit = False
                    .MergeCells = True
                End With
                Range(Cells(r, 1), Cells(r, lastcol)).Select
                Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
                Selection.Borders(xlEdgeTop).Weight = xlThin
                Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
                Selection.Borders(xlEdgeBottom).Weight = xlHairline
                Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
                Selection.Borders(xlEdgeLeft).Weight = xlThin
                Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
                Selection.Borders(xlEdgeRight).Weight = xlThin
                Selection.Borders(xlInsideVertical).LineStyle = xlNone
                Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
                With Selection.Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .ThemeColor = xlThemeColorDark1
                    .TintAndShade = 0 'white
                    .PatternTintAndShade = 0
                End With
            End If
        Next
        lastrow = FindLastRow("Concrete")
        lastcol = FindLastColumn("Concrete")
        ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(lastrow, lastcol)).Address
        Cells(pTestHeaderRow, 1).Select
    End If
End Sub

Sub AsbestosNew() 'copy Asbestos data if present - handles new dets ASB-MAT, ASB-COMMNT
    Dim NextRow, Col, intLastcol, intLastrow, intLastColumn, nFirstRow, i As Integer
    Dim nLenSampLocn, nLenComment, nLenRes, nLenType, nLenSampId As Integer
    Dim rRange As Range
    Dim sBlurb As String
    Dim ws As Worksheet
    Dim pb As Variant
    
    Call MakeSheet("_Asb", "Asbestos", "B")
    nFirstRow = 7
    sAnalyst1 = ""
    sAnalyst2 = ""
    sChecker1 = ""
    sChecker2 = ""
    nLenSampLocn = 0
    nLenComment = 0
    nLenRes = 0
    nLenType = 0
    nLenSampId = 0
    NextRow = pRDTestHeaderRow + 1 'Starting point for data in rawdata
    bKeepColC = False 'sample locn usually removed from Asb Soils Report
    
    'Copy sample header info - type,sampnum,sample_id,sampdepth,other_id
    Sheets("Rawdata").Select
    intLastcol = FindLastColumn("Rawdata")
    Range(Cells(19, pRDFirstDataCol), Cells(24, intLastcol)).Select
    Selection.Copy
    Sheets("Asbestos").Select
    Cells(nFirstRow, 8).Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    
    bMISC = False
    bSoil = False
    bFuel = False
    bGlasgow = False
    bAsbsub = False
    Sheets("Rawdata").Select
    Do While Len(Trim(Cells(NextRow, 1).Value)) <> 0
        If Trim(Cells(NextRow, 6).Value) = "A" Then         'sType = A
            If InStr(Cells(NextRow, 3).Value, "$") > 0 Then bAsbsub = True
            sDet = Replace(Trim(Cells(NextRow, 3).Value), "$", "") '25/5/17 subcon support
            If sDet = "ASB-MISCS" Or sDet = "ASB-MISCSG" Then
                bMISC = True
                If sDet = "ASB-MISCSG" Then bGlasgow = True
                For rawdataCol = pRDFirstDataCol To intLastcol
                    Sheets("Rawdata").Select
                    If Trim(Cells(NextRow, rawdataCol).Value) > "" Then
                        Cells(NextRow, rawdataCol).Copy
                        Sheets("Asbestos").Select
                        Cells(rawdataCol - 12, 16).PasteSpecial Paste:=xlPasteValues
                    End If
                Next
            ElseIf sDet = "ASB-SOILS" Or sDet = "ASB-SOILSG" Then
                bSoil = True
                If sDet = "ASB-SOILSG" Then bGlasgow = True
                For rawdataCol = pRDFirstDataCol To intLastcol
                    Sheets("Rawdata").Select
                    If Trim(Cells(NextRow, rawdataCol).Value) > "" Then
                        Cells(NextRow, rawdataCol).Copy
                        Sheets("Asbestos").Select
                        Cells(rawdataCol - 12, 16).PasteSpecial Paste:=xlPasteValues
                        Cells(rawdataCol - 12, 17).Value = "SOIL"
                    End If
                Next
            ElseIf sDet = "ASB-FUEL" Then '24/2/16 treat same as Soil
                bFuel = True
                For rawdataCol = pRDFirstDataCol To intLastcol
                    Sheets("Rawdata").Select
                    If Trim(Cells(NextRow, rawdataCol).Value) > "" Then
                        Cells(NextRow, rawdataCol).Copy
                        Sheets("Asbestos").Select
                        Cells(rawdataCol - 12, 16).PasteSpecial Paste:=xlPasteValues
                        Cells(rawdataCol - 12, 17).Value = "FUEL/FINES"
                    End If
                Next
            ElseIf sDet = "ASB-MAT" Then
                For rawdataCol = pRDFirstDataCol To intLastcol
                    Sheets("Rawdata").Select
                    If Trim(Cells(NextRow, rawdataCol).Value) > "" Then
                        Cells(NextRow, rawdataCol).Copy
                        Sheets("Asbestos").Select
                        Cells(rawdataCol - 12, 18).PasteSpecial Paste:=xlPasteValues
                    End If
                Next
            Else
                sDetTmp = Replace(Trim(Cells(NextRow, 3).Value), "$", "") '25/5/17 subcon support
                If sDetTmp = "ASB-COMMNT" Or sDetTmp = "ASB-COMM" Then Col = 21 '25/5/17 subcon support
                If sDetTmp = "ASB-ANA" Then
                    Col = 19
                    If bGlasgow = False Then
                        aAna = Split(sGlasgowAnalysts, ",")
                        For aA = 0 To UBound(aAna)
                            Rows(NextRow).Select
                            Set rRange = Selection.Find(Trim(aAna(aA)), After:=ActiveCell, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)
                            If Not rRange Is Nothing Then
                                bGlasgow = True
                                Exit For
                            End If
                        Next
                    End If
                End If
                If sDetTmp = "ASB-CHKR" Then Col = 20
                If sDetTmp = "ASB-COMMNT" Or sDetTmp = "ASB-COMM" Or sDetTmp = "ASB-ANA" Or sDetTmp = "ASB-CHKR" Then
                    Range(Cells(NextRow, 19), Cells(NextRow, intLastcol)).Select
                    Selection.Copy
                    Sheets("Asbestos").Select
                    Cells(nFirstRow, Col).Select
                    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
                End If
            End If
        End If
        Sheets("Rawdata").Select
        NextRow = NextRow + 1
    Loop
    
    Sheets("Asbestos").Select
    Set ws = ThisWorkbook.Worksheets("Asbestos")
    ws.Activate
    intLastColumn = FindLastColumn("Asbestos")
    intLastrow = FindLastRow("Asbestos")
    'autofill formats
    If intLastrow > nFirstRow Then
        Range(Cells(nFirstRow, 1), Cells(nFirstRow, 7)).Select
        Selection.AutoFill Destination:=Range(Cells(nFirstRow, 1), Cells(intLastrow, 7)), Type:=xlFillFormats
    End If
    For i = intLastrow To nFirstRow Step -1
        sRes = Trim(Cells(i, 16).Value)
        If sRes = "" Then
            Rows(i).Delete
        Else
            Cells(i, 1).Value = Cells(i, 10).Value 'sampnum
            Cells(i, 2).Value = Trim(Cells(i, 11).Value) & " " & Trim(Cells(i, 13).Value) & " " & Trim(Cells(i, 12).Value) 'sample id, oid, depth
                nLen = Len(Cells(i, 2).Value)
                If nLen > nLenSampId Then nLenSampId = nLen
            Cells(i, 4).Value = Cells(i, 9).Value
            If Trim(Cells(i, 18).Value) > "" Then Cells(i, 4).Value = Cells(i, 18).Value 'type
                nLen = Len(Cells(i, 4).Value)
                If nLen > nLenType Then nLenType = nLen
            Cells(i, 5).Value = Cells(i, 16).Value 'result
                nLen = Len(Cells(i, 5).Value)
                If nLen > nLenRes Then nLenRes = nLen
            Cells(i, 6).Value = Replace(Cells(i, 21).Value, "na", "none") 'comment
                nLen = Len(Cells(i, 6).Value)
                If nLen > nLenComment Then nLenComment = nLen
            Cells(i, 7).Value = Cells(i, 19).Value 'analyst
            aX = Split(Cells(i, 8).Value, "]") 'xtradata
            If UBound(aX) > 0 Then
                If sClient = "MCP" Then aX(1) = ""
                Cells(i, 3).Value = Trim(Trim(Trim(aX(0)) & " " & Trim(aX(1)))) 'sample location
                nLen = Len(Cells(i, 3).Value)
                If nLen > nLenSampLocn Then nLenSampLocn = nLen
            Else
                Cells(i, 3).Value = ""
            End If
            If Trim(Cells(i, 3).Value) > "" Then bKeepColC = True
            Range(Cells(i, 8), Cells(i, 21)).Clear
        End If
    Next
    
    If bAsbsub = True Then
        sBlurb = "Crocidolite = Blue Asbestos, Amosite = Brown Asbestos, Chrysotile = White Asbestos. Anthophyllite, Actinolite and Tremolite are other forms of Asbestos. Samples are analysed by a subcontractor using polarised light microscopy in accordance with HSG248 and documented in-house methods. NAD = No Asbestos Detected. Where a sample is NAD, the result is based on analysis of at least 2 sub-samples and should be taken to mean 'no asbestos detected in sample'. Key: * -not included in laboratory scope of accreditation."
    Else
        sBlurb = "Crocidolite = Blue Asbestos, Amosite = Brown Asbestos, Chrysotile = White Asbestos. Anthophyllite, Actinolite and Tremolite are other forms of Asbestos. Samples are analysed by DETSC 1101 using polarised light microscopy in accordance with HSG248 and documented in-house methods. NAD = No Asbestos Detected. Where a sample is NAD, the result is based on analysis of at least 2 sub-samples and should be taken to mean 'no asbestos detected in sample'. Key: * -not included in laboratory scope of accreditation."
    End If
    Set rRange = Cells.Find("t/f", LookIn:=xlValues, LookAt:=xlWhole)
    If Not rRange Is Nothing Then sBlurb = sBlurb & " t/f -result to follow."
    'replaced will full addr 27/6/16 MH If bGlasgow = True Then sBlurb = "Analysis was carried out at our Lanarkshire laboratory. " & sBlurb
    If bGlasgow = True Then sBlurb = "Analysis was carried out at our Lanarkshire laboratory. DETS Newhouse Laboratory (BioCity Scotland, Room 1217, Block 41, Bo'Ness Road, Newhouse, Lanarkshire, ML1 5UH.) " & sBlurb
    If bMISC = False Then
        Range("A6:F6").Select
        Selection.Replace What:="Material Type*", Replacement:="Material Type", _
        LookAt:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat _
        :=False, ReplaceFormat:=False
    End If
    
    intLastrow = FindLastRow("Asbestos")
    nBlurbRows = 4
    If bGlasgow = True Then nBlurbRows = 5
    Range(Cells(intLastrow + 1, 1), Cells(intLastrow + nBlurbRows, 7)).Select
    With Selection
      .HorizontalAlignment = xlLeft
      .VerticalAlignment = xlCenter
      .WrapText = True
      .Orientation = 0
      .ShrinkToFit = False
      .MergeCells = True
      .NumberFormat = "General"
      .Font.Size = 8
      .Value = sBlurb
    End With
    
    If intLastrow > nFirstRow Then
        Range(Cells(nFirstRow, 1), Cells(intLastrow, 7)).Select
        Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
        Selection.Borders(xlEdgeTop).Weight = xlThin
        Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
        Selection.Borders(xlEdgeBottom).Weight = xlThin
        Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
        Selection.Borders(xlEdgeLeft).Weight = xlThin
        Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
        Selection.Borders(xlEdgeRight).Weight = xlThin
        Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
        Selection.Borders(xlInsideVertical).Weight = xlHairline
        Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
        Selection.Borders(xlInsideHorizontal).Weight = xlHairline
    End If
    
    'try to optimise col widths
    If nLenComment < 7 Then
        nW = Columns(6).ColumnWidth / 2 '20 to 10
        Columns(6).ColumnWidth = nW
        If nLenSampLocn > 10 Then
            Columns(3).ColumnWidth = Columns(3).ColumnWidth + nW - 1
        Else
            Columns(2).ColumnWidth = Columns(2).ColumnWidth + ((nW - 1) / 3)
            Columns(3).ColumnWidth = Columns(3).ColumnWidth + ((nW - 1) / 3)
            Columns(4).ColumnWidth = Columns(4).ColumnWidth + ((nW - 1) / 3)
        End If
    End If
    If nLenType < 15 And nLenSampId > 23 Then
        Columns(2).ColumnWidth = Columns(2).ColumnWidth + 4
        Columns(3).ColumnWidth = Columns(3).ColumnWidth - 4
    End If
    
    Range(Cells(intLastrow + 1, 1), Cells(intLastrow + nBlurbRows, 7)).Select
    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
    Selection.Borders(xlEdgeTop).Weight = xlThin
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlThin
    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
    Selection.Borders(xlEdgeLeft).Weight = xlThin
    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
    Selection.Borders(xlEdgeRight).Weight = xlThin
       
    'page breaks bottom/top borders (Excel buggy)
    Sheets("Rawdata").Select
    Sheets("Asbestos").Select
    ActiveWindow.View = xlPageBreakPreview
    iLastColumn = FindLastColumn("Asbestos")
    iLastrow = FindLastRow("Asbestos")
    Cells(iLastrow, iLastColumn).Select
    
    ActiveWindow.View = xlNormalView
    ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(iLastrow, iLastColumn)).Address
    ActiveWindow.View = xlPageBreakPreview
    
    For Each pb In ws.HPageBreaks
        r = pb.Location.Row
        Range(Cells(r - 1, 1), Cells(r - 1, 7)).Borders(xlEdgeBottom).LineStyle = xlContinuous
        Range(Cells(r - 1, 1), Cells(r - 1, 7)).Borders(xlEdgeBottom).Weight = xlThin
        Range(Cells(r, 1), Cells(r, 7)).Borders(xlEdgeTop).LineStyle = xlContinuous
        Range(Cells(r, 1), Cells(r, 7)).Borders(xlEdgeTop).Weight = xlThin
    Next pb
    ActiveWindow.View = xlNormalView

    sTitl = ""
    If bMISC = True Then sTitl = "Bulk"
    If bSoil = True Then sTitl = " & Soil"
    If bFuel = True Then sTitl = " & Fuel/Fines"
    If left(sTitl, 2) = " &" Then sTitl = Trim(Mid(sTitl, 3, 50))
    Cells(2, 1).Value = sTitl & " Samples"
    If bMISC = False And (bFuel = True Or bSoil = True) And bKeepColC = False Then
        nW = Columns(3).ColumnWidth
        Columns(3).Delete Shift:=xlToLeft
        Columns(2).ColumnWidth = Columns(2).ColumnWidth + nW / 4
        Columns(3).ColumnWidth = Columns(3).ColumnWidth + nW / 4
        Columns(4).ColumnWidth = Columns(4).ColumnWidth + nW / 4
        Columns(5).ColumnWidth = Columns(5).ColumnWidth + nW / 4
    End If
        
    Cells(3, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
    Cells(5, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
    Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
    intLastColumn = FindLastColumn("Asbestos")
    intLastrow = FindLastRow("Asbestos") + nBlurbRows - 1
    ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(intLastrow, intLastColumn)).Address
    Range("A6").Select
    
    'removed 14/5/15 JC
    'If bAsbestosOnly = True Then
        'Sheets("Letter").Cells(16, 2).Value = "Asbestos Analysis DETSC 1101."
    'Else
        'Sheets("Letter").Cells(16, 2).Value = "Identified by prefix DETSn (details on request), Asbestos Analysis DETSC 1101."
    'End If
End Sub

Sub HideSheets()
    For i = 1 To Application.Sheets.Count
        If left(Sheets(i).Name, 1) = "_" Then Sheets(i).Visible = False
    Next
    If pHideRawData = True Then Sheets("Rawdata").Visible = False
End Sub

Sub Approver() 'produces msg box to request who is approving then adds name to letter
    ApproverF.RSB.Value = True
    ApproverF.Show
End Sub

Sub Letter()
    Dim i, j, nLrow As Integer
    Dim Today As Date
    Dim ArrySig As Variant
    Dim x As Variant
    Dim cStatus, sMissing, sDamaged As String
    Dim StrPic As String
    
    Today = Now
    cStatus = Sheets("Rawdata").Cells(4, 1) 'Job Status
    Sheets("Letter").Select
    If pIsMcerts = False Then Call DeletePicture(Sheets("Letter").Range("A1:Z200"), "Picture 2") 'remove MCerts Logo
    
    If InStr("APPROVED FAILED REPORTED INVOICED COMPLETE", cStatus) > 0 Then
        Cells(3, 1).Value = "Certificate of Analysis"
    Else
        Cells(3, 1).Value = "Interim Report of Analysis"
    End If
    'Cells(5, 1).Value = "Certificate Number " + Sheets("Rawdata").Cells(7, 1).Value 'job
    Cells(5, 2).Value = Sheets("Rawdata").Cells(7, 1).Value 'job
    'nSt = InStr(Cells(5, 3), "-") - 2
    'Cells(5, 3).Characters(Start:=nSt, Length:=8).Font.FontStyle = "Bold"

    nLrow = 6
    'Cells(nLrow, 2).Value = Format(Today, "dddd, mmmm d yyyy")
    Cells(nLrow - 1, 4).Value = Format(Today, "d mmm yy")
    nLrow = nLrow + 1 '7
    Cells(nLrow, 2).Value = Sheets("Rawdata").Cells(2, 1).Value 'cli addr
    nLrow = nLrow + 1 '8
    Cells(nLrow, 2).Value = Sheets("Rawdata").Cells(7, 1).Value 'our ref - job
    nLrow = nLrow + 1 '9
    sCliRf = Trim(Sheets("Rawdata").Cells(3, 1).Value)
    If sCliRf = "" Then
        Cells(nLrow, 2).Value = "(not supplied)"
    Else
        Cells(nLrow, 2).Value = "'" & sCliRf
    End If
    nLrow = nLrow + 1 '10
    sOrdNo = Trim(Sheets("Rawdata").Cells(8, 3).Value) 'order no added 14/10/15
    If sOrdNo = "" Then
        Cells(nLrow, 2).Value = "(not supplied)"
    Else
        Cells(nLrow, 2).Value = "'" & sOrdNo
    End If
    nLrow = nLrow + 1 '11
    If Trim(Sheets("Rawdata").Cells(6, 2).Value) = "" Then
        Cells(nLrow, 2).Value = "(not supplied)"
    Else
        Cells(nLrow, 2).Value = "'" & Sheets("Rawdata").Cells(6, 2).Value 'Contract title
    End If
    nLrow = nLrow + 1 '12
    nCR = InStr(Sheets("Rawdata").Cells(3, 2).Value, Chr(10))
    If nCR < 2 Then
        Rows(nLrow).RowHeight = 20 'from 40
        Rows(4).RowHeight = Rows(4).RowHeight + 10
    End If
    Cells(nLrow, 2).Value = Sheets("Rawdata").Cells(3, 2).Value 'Job description
    Cells(nLrow + 1, 2).Value = Sheets("Rawdata").Cells(2, 2).Value 'Date received
    Cells(nLrow + 2, 2).Value = Sheets("Rawdata").Cells(6, 1).Value 'Date started
    
    nLrow = 15
    If InStr("APPROVED REPORTED INVOICED COMPLETE", cStatus) > 0 Then
        If Trim(Sheets("Rawdata").Cells(10, 2).Value) = "" Then
            Cells(nLrow, 2).Value = FormatDateTime(Now, vbLongDate) 'changed 14/3/14 apprdate always blank
        Else
            'Cells(nLrow, 2).Value = Sheets("Rawdata").Cells(10, 2).Value 'apprdate
            Cells(nLrow, 2).Value = FormatDateTime(Now, vbLongDate) 'changed 9/1/15
        End If
    Else
        Cells(nLrow, 1).Value = ""
        If pSignature <> "interim" Then              '14/10/15
            nR = MsgBox("This job still has outstanding work. It is an Interim Report. Remove Signature?", vbYesNo, "Signature for Interim Report")
            If nR = vbYes Then pSignature = "interim"
        End If
    End If
    ArrySig = GetSignatureDetails()
    StrPic = ArrySig(2)
    If StrPic = "" Then StrPic = "x"
    nLrow = 20
    'Cells(nLrow, 2).Value = ArrySig(0) & ",  " & ArrySig(1)
    'If Trim(Cells(nLrow, 2).Value) = "," Then Cells(nLrow, 2).Value = ""
    Cells(nLrow, 2).Value = ArrySig(0)
    Cells(nLrow + 1, 2).Value = ArrySig(1)
    If pSignature <> "interim" Then
        InsertPicture StrPic, Range("B18"), 100, 40, 0, 0
    End If
    
    'deal with long job lists
    nL = Len(Trim(Cells(5, 2).Value))
    If nL > 44 Then
        Rows(4).RowHeight = Rows(4).RowHeight - 30
        Rows(6).RowHeight = Rows(6).RowHeight + 30
    End If
End Sub

Function GetSignatureDetails()
  Dim arry(3)
  Select Case pSignature
    Case "interim"
      arry(0) = ""
      arry(1) = ""
      arry(2) = ""
    'Case "RSB"
    '  arry(0) = "Richard Bennett"
    '  arry(1) = "Managing Director"
    '  arry(2) = "L:\LOGOS\RSB.BMP"
    Case "RSB"
      arry(0) = "Adam Fenwick"
      arry(1) = "Contracts Manager"
      arry(2) = "L:\LOGOS\AF.JPG"
    'Case "RWB"
    '  arry(0) = "Rob Brown"
    '  arry(1) = "Business Manager"
    '  arry(2) = "L:\LOGOS\RWB.BMP"
    'Case "MAH"
    '  arry(0) = "Mike Hopgood"
    '  arry(1) = "Technical Consultant"
    '  arry(2) = "L:\LOGOS\MAH.BMP"
    Case "ND"
      arry(0) = "Neil Dobinson"
      arry(1) = "Technical Manager"
      arry(2) = "L:\LOGOS\ND.BMP"
    Case "MKH"
      arry(0) = "Mark Hughes"
      arry(1) = "Operations Manager"
      arry(2) = "L:\LOGOS\MKH.BMP"
  End Select
  GetSignatureDetails = arry
End Function

Sub CommentsPage() 'Deviating Sample and Sample Comments report on Comments page
    Dim rRange As Range
    
    Call MakeSheet("_C", "Comments", "B")
    Application.DisplayAlerts = False
    Call SQLContlist
    Call SQLSelectDS
    Sheets("_rawdata2").Select
    If Cells(3, 1).Value = 99999999 And (Cells(4, 1).Value = 99999999 Or Trim(Cells(4, 1).Value) = "") Then
        Sheets("_rawdata2").Visible = False
        Exit Sub
    End If
    Columns("AN:AZ").ClearContents
    Cells(Range("A165000").End(xlUp).Row + 1, 1).Value = 99999999
    pCurrRow = 2
    pSummaryRow = 1
    sContKey = ""

    'SECTION 1 - DEVIATING SAMPLES - always appears
    'create sampnum list and get containerlist and flag if sample is an extra
    While Cells(pCurrRow, 1).Value < 99999999
        nSampnumLast = nSampnum
        sSampIdLast = sSampId
        SampdateLast = sampdate
        SamptimeLast = Samptime
        sTestLast = sTest
        sTypeLast = sType
        pCurrRow = pCurrRow + 1
        nSampnum = Cells(pCurrRow, 1).Value
        sSampId = Trim(Cells(pCurrRow, 2).Value)
        sampdate = Cells(pCurrRow, 4).Value
        Samptime = "'0800" 'Trim(Cells(pCurrRow, 5).Value)
        sTest = Trim(Cells(pCurrRow, 13).Value)
        sType = Trim(Cells(pCurrRow, 3).Value)
        sQty = Trim(Cells(pCurrRow, 20).Value)
        If pCurrRow > 3 And nSampnum <> nSampnumLast Then
            Cells(pSummaryRow, 40).Value = nSampnumLast
            Cells(pSummaryRow, 41).Value = sSampIdLast & " " & sTypeLast
            Cells(pSummaryRow, 42).Value = SampdateLast
            Cells(pSummaryRow, 43).Value = SamptimeLast
            If sTypeLast = "WATER" Or sTypeLast = "TRADE EFF" Or sTypeLast = "GAS" Then
                sDateMsg = "Sample date+time not supplied"
                If Trim(Cells(pSummaryRow, 42).Value) = "" Or Trim(Cells(pSummaryRow, 43).Value) = "" Then Cells(pSummaryRow, 45).Value = sDateMsg
            ElseIf sTypeLast = "FUEL" Then
                'FUEL Excluded by Mark Hughes 16/10/12
            Else
                sDateMsg = "Sample date not supplied"
                If Trim(Cells(pSummaryRow, 42).Value) = "" Then Cells(pSummaryRow, 45).Value = sDateMsg
            End If
            
            Cells(pSummaryRow, 44).Value = "No containers logged"
            If sTypeLast = "LEACHATE" Or sTypeLast = "CONCRETE" Or sTypeLast = "GEOTECH" Or sTypeLast = "FUEL" Then
                Cells(pSummaryRow, 46).Value = "Containers OK"
            End If
            
            r5r = 1
            Do While Cells(r5r, 31).Value > ""
                If nSampnumLast = Cells(r5r, 31).Value Then
                    sTmp = Replace(Cells(r5r, 32).Value, "litre", "Litre")
                    sTmp = Replace(sTmp, " Litre", "L")
                    sTmp = Replace(sTmp, "Litre", "L")
                    sTmp = Replace(sTmp, "Litres", "L")
                    If InStr(sTmp, "Glass") > 0 Then
                        If InStr(sContKey, "Gla") = 0 Then sContKey = sContKey & " G-Glass"
                        sTmp = Replace(sTmp, "Glass ", "G")
                    End If
                    If InStr(sTmp, "Plastic") > 0 Then
                        If InStr(sContKey, "Plas") = 0 Then sContKey = sContKey & " P-Plastic"
                        sTmp = Replace(sTmp, "Plastic ", "P")
                    End If
                    If InStr(sTmp, "Jar") > 0 Then
                        If InStr(sContKey, "Jar") = 0 Then sContKey = sContKey & " J-Jar"
                        sTmp = Replace(sTmp, "Jar", "J")
                    End If
                    If InStr(sTmp, "Bottle") > 0 Then
                        If InStr(sContKey, "Bott") = 0 Then sContKey = sContKey & " B-Bottle"
                        sTmp = Replace(sTmp, "Bottle", "B")
                    End If
                    If InStr(sTmp, "Vial") > 0 Then
                        If InStr(sContKey, "Vial") = 0 Then sContKey = sContKey & " V-Vial"
                        sTmp = Replace(sTmp, "Vial", "V")
                    End If
                    If InStr(sTmp, "Bag") > 0 Then
                        If InStr(sContKey, "Bag") = 0 Then sContKey = sContKey & " G-Bag"
                        sTmp = Replace(sTmp, "Bag", "G")
                    End If
                    If InStr(sTmp, "Tube") > 0 Then
                        If InStr(sContKey, "Tube") = 0 Then sContKey = sContKey & " U-Tube"
                        sTmp = Replace(sTmp, "Tube", "U")
                    End If
                    If InStr(sTmp, "Tub") > 0 Then
                        If InStr(sContKey, "T-Tub") = 0 Then sContKey = sContKey & " T-Tub"
                        sTmp = Replace(sTmp, "Tub", "T")
                    End If
                    Cells(pSummaryRow, 44).Value = sTmp 'Cells(r5r, 32).Value 'containers recvd
                    Exit Do
                End If
                r5r = r5r + 1
            Loop
            If sTestLast = "x" Then Cells(pSummaryRow, 45).Value = "No relevant analysis scheduled"
            pSummaryRow = pSummaryRow + 1
        End If
    Wend

    'next loop - decide if containers are correct
    pSummaryRow = 1
    While Cells(pSummaryRow, 40).Value > ""
        bHeadspace = False
        If Cells(pSummaryRow, 45).Value = "No relevant analysis scheduled" Or Cells(pSummaryRow, 46).Value = "Containers OK" Then
            '
        Else
            If InStr(Cells(pSummaryRow, 44).Value, "Head") > 0 Then bHeadspace = True
            nSampnum = Cells(pSummaryRow, 40).Value
            pCurrRow = 2
            Do Until Cells(pCurrRow, 1).Value = 99999999 Or Cells(pCurrRow - 1, 1).Value = 99999999
                If Cells(pCurrRow, 1).Value = nSampnum Then
                    sContainersBad = ""
                    sHolddaysBad = ""
                    sampdate = Cells(pCurrRow, 4).Value
                    detdate = Cells(pCurrRow, 12).Value
                    recdate = Cells(pCurrRow, 6).Value
                    'new line
                    If IsDate(recdate) Then If IsDate(detdate) Then If recdate < detdate Then detdate = recdate
                    nHeldfor = 9999
                    'If sampdate <> "" And detdate <> "" Then nHeldfor = detdate - sampdate
                    If IsDate(recdate) And IsDate(detdate) Then nHeldfor = detdate - sampdate
                    Do While Cells(pCurrRow, 1).Value = nSampnum
                        nHolddays = Cells(pCurrRow, 16).Value
                        sTest = Trim(Cells(pCurrRow, 13).Value)
                        sTestNa = Trim(Cells(pCurrRow, 14).Value)
                        If sTestNa = "" Then sTestNa = sTest
                        If nHeldfor <> 9999 And nHeldfor > nHolddays Then
                            sTestNaTmp = Trim(Replace(sTestNa, "(calc)", ""))
                            sTestNaTmp = Trim(Replace(sTestNaTmp, "(Calc)", ""))
                            sTestNaTmp = Trim(Replace(sTestNaTmp, "Solid", ""))
                            sTestNaTmp = Trim(Replace(sTestNaTmp, "solid", ""))
                            sTestNaTmp = Trim(Replace(sTestNaTmp, "Water", ""))
                            sTestNaTmp = Trim(Replace(sTestNaTmp, "water", ""))
                            If InStr(sHolddaysBad, sTestNaTmp) = 0 Then sHolddaysBad = sHolddaysBad & sTestNaTmp & " (" & Trim(Str(nHolddays)) & " days), "
                        End If
                        'Headspace report added 07/05/2013
                        If (left(sTest, 3) = "VOC" Or left(sTest, 4) = "BTEX") And bHeadspace = True Then
                            If left(sTest, 3) = "VOC" And InStr(sHeadspace, "VOC") = 0 Then sHeadspace = sHeadspace & "VOC, "
                            If left(sTest, 4) = "BTEX" And InStr(sHeadspace, "BTEX") = 0 Then sHeadspace = sHeadspace & "BTEX, "
                        End If
                        sSampnumTest = Trim(Cells(pCurrRow, 1).Value) & Trim(Cells(pCurrRow, 13).Value)
                        bContainsersOK = False
                        bContainsersBtexVocOK = False
                        bBtexVoc = False
                        'loop down all members of this test to see if any containers are OK for this test
                        Do Until Trim(Cells(pCurrRow, 1).Value) & Trim(Cells(pCurrRow, 13).Value) <> sSampnumTest
                            sContainersAllowed = Replace("," & Trim(Cells(pCurrRow, 15).Value) & ",", ",,", ",")
                            sContainerRevcd = Trim(Cells(pCurrRow, 18).Value) & ","
                            If InStr(sContainersAllowed, sContainerRevcd) > 0 Or InStr(sContainersAllowed, left(sContainerRevcd, 2)) > 0 Then
                                bContainsersOK = True
                                'Next 3 lines - Mark Hughes 21/5/13 - at least 1 container must be exactly right for VOC and BTEX soils
                                If left(sTest, 5) = "VOC_S" Or left(sTest, 6) = "BTEX_S" Then
                                    bBtexVoc = True
                                    If InStr(sContainersAllowed, sContainerRevcd) > 0 Then bContainsersBtexVocOK = True
                                End If
                            End If
                            pCurrRow = pCurrRow + 1
                        Loop
                        If bBtexVoc = True Then bContainsersOK = bContainsersBtexVocOK
                        If bContainsersOK = False Then
                            sTestNa = Trim(Replace(sTestNa, "(calc)", ""))
                            sTestNa = Trim(Replace(sTestNa, "(Calc)", ""))
                            sTestNa = Trim(Replace(sTestNa, "Solid", ""))
                            sTestNa = Trim(Replace(sTestNa, "solid", ""))
                            sTestNa = Trim(Replace(sTestNa, "Water", ""))
                            sTestNa = Trim(Replace(sTestNa, "water", ""))
                            If InStr(sContainersBad, sTestNa) = 0 Then sContainersBad = sContainersBad & sTestNa & ", "
                        End If
                    Loop
                    If sContainersBad > "" Then Cells(pSummaryRow, 46).Value = left(sContainersBad, Len(sContainersBad) - 2)
                    If sHolddaysBad > "" Then
                        If Trim(Cells(pSummaryRow, 45).Value) > "" Then
                            Cells(pSummaryRow, 45).Value = Trim(Cells(pSummaryRow, 45).Value) & ", " & left(sHolddaysBad, Len(sHolddaysBad) - 2)
                        Else
                            Cells(pSummaryRow, 45).Value = left(sHolddaysBad, Len(sHolddaysBad) - 2)
                        End If
                    End If
                 End If
                pCurrRow = pCurrRow + 1
            Loop
        If sHeadspace > "" Then Cells(pSummaryRow, 47).Value = left(sHeadspace, Len(sHeadspace) - 2)
        sHeadspace = ""
        End If
        pSummaryRow = pSummaryRow + 1
    Wend

    'report loop
    pSummaryRow = 1
    pRepRow = 6
    While Cells(pSummaryRow, 40).Value > ""
        pRepRow = pRepRow + 1
        Sheets("Comments").Cells(pRepRow, 1).Value = Cells(pSummaryRow, 40).Value 'nSampnum
        Sheets("Comments").Cells(pRepRow, 2).Value = Cells(pSummaryRow, 41).Value 'sSampId
        Sheets("Comments").Cells(pRepRow, 3).Value = Cells(pSummaryRow, 42).Value 'Sampdate
        Sheets("Comments").Cells(pRepRow, 3).HorizontalAlignment = xlCenter
        Sheets("Comments").Cells(pRepRow, 4).Value = Replace(Cells(pSummaryRow, 44).Value, " ()", "") 'containers recvd
        Sheets("Comments").Cells(pRepRow, 5).Value = Cells(pSummaryRow, 45).Value 'sHolddaysBad
        Sheets("Comments").Cells(pRepRow, 6).Value = Cells(pSummaryRow, 46).Value 'sContainersBad
        Sheets("Comments").Cells(pRepRow, 7).Value = Cells(pSummaryRow, 47).Value 'sHeadspace
        If Sheets("Comments").Cells(pRepRow, 4).Value = "No containers logged" Then Sheets("Comments").Cells(pRepRow, 6).Value = "Cannot evaluate"
        'If Sheets("Comments").Cells(pRepRow, 4).Value = "No containers logged" Then Sheets("Comments").Cells(pRepRow, 4).Value = "No containers loggedNo containers loggedNo containers loggedNo containers loggedNo containers loggedNo containers loggedNo containers loggedNo containers loggedNo containers loggedcontainers loggedcontainers loggedcontainers loggedcontainers loggedcontainers loggedcontainers loggedcontainers logged"
        If Sheets("Comments").Cells(pRepRow, 6).Value = "Containers OK" Then Sheets("Comments").Cells(pRepRow, 6).Value = ""
        If Sheets("Comments").Cells(pRepRow, 5).Value = "No relevant analysis scheduled" Then Sheets("Comments").Cells(pRepRow, 5).Value = ""
        Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, 6)).Font.Size = 8
        Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, 6)).WrapText = True
        Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, 6)).VerticalAlignment = xlTop
        Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, 6)).Rows.AutoFit
        pSummaryRow = pSummaryRow + 1
    Wend
    Sheets("Comments").Select
    nFinalCol = 7
    If Cells(7, 1).Value = "" Then
        Cells(7, 1).Value = "No Sample deviations to report"
    Else
        Set rRange = Range(Cells(7, nFinalCol), Cells(pRepRow, nFinalCol)).Find("*", LookIn:=xlValues, LookAt:=xlWhole)
        If rRange Is Nothing Then 'delete final col if empty
            nW = Columns(nFinalCol).ColumnWidth
            Columns(nFinalCol).Delete Shift:=xlLeft
            Columns(4).ColumnWidth = Columns(4).ColumnWidth + nW / 3.2
            Columns(5).ColumnWidth = Columns(5).ColumnWidth + nW / 3.2
            Columns(6).ColumnWidth = Columns(6).ColumnWidth + nW / 3.2
            nFinalCol = nFinalCol - 1
        End If
        
        'shrink Inappropriate Contaniner col if empty
        nCol = nFinalCol
        If nFinalCol = 7 Then nCol = 6
        nWidthtoPutBack = 0
        Set rRange = Range(Cells(7, nCol), Cells(pRepRow, nCol)).Find("*", LookIn:=xlValues, LookAt:=xlWhole)
        If rRange Is Nothing Then
            Columns(nCol).ColumnWidth = Columns(nCol).ColumnWidth - 10
            nWidthtoPutBack = 10
            Rows(6).RowHeight = 38
        End If
        'shrink Holding Time col if empty
        Set rRange = Range(Cells(7, nCol - 1), Cells(pRepRow, nCol - 1)).Find("*", LookIn:=xlValues, LookAt:=xlWhole)
        If rRange Is Nothing Then
            Columns(nCol - 1).ColumnWidth = Columns(nCol - 1).ColumnWidth - 10
            nWidthtoPutBack = nWidthtoPutBack + 10
            Rows(6).RowHeight = 38
        Else
            Columns(nCol - 1).ColumnWidth = Columns(nCol - 1).ColumnWidth + nWidthtoPutBack
            nWidthtoPutBack = 0
        End If
        'expand Contaniner Recvd col
        If nWidthtoPutBack > 0 Then Columns(nCol - 2).ColumnWidth = Columns(nCol - 2).ColumnWidth + nWidthtoPutBack
   End If
    
    'autofill formats
    If pRepRow > 7 Then
        Range(Cells(7, 1), Cells(7, nFinalCol)).Select
        Selection.AutoFill Destination:=Range(Cells(7, 1), Cells(pRepRow, nFinalCol)), Type:=xlFillFormats
    End If
    'area border
    Range(Cells(7, 1), Cells(pRepRow, nFinalCol)).Select
    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
    Selection.Borders(xlEdgeTop).Weight = xlThin
    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
    Selection.Borders(xlEdgeLeft).Weight = xlThin
    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
    Selection.Borders(xlEdgeRight).Weight = xlThin
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlThin
    
    'SECTION 2 - LOIf deviations if any
    pBlurbsBeginLine = 1
    nStartRowALL = 1
    nStartRow = 0
    If bLOIf = True Then
        Sheets("_rawdata2").Select
        pCurrRow = 2
        Do Until Cells(pCurrRow, 1).Value = 99999999
            pCurrRow = pCurrRow + 1
        Loop
        If Cells(pCurrRow, 3).Value = "LOIf" Then 'check there is at least 1 LOIf comment
            pRepRow = FindLastRow("Comments") + 1
            pBlurbsBeginLine = pRepRow
            nStartRow = pRepRow
            nStartRowALL = nStartRow
            Sheets("_rawdata2").Select
            pCurrRow = pCurrRow + 1
            Sheets("Comments").Cells(pRepRow, 1).Value = "Lab No"
            Sheets("Comments").Cells(pRepRow, 2).Value = "Sample ID"
            Sheets("Comments").Cells(pRepRow, 3).Value = "Comments"
            Range(Sheets("Comments").Cells(pRepRow, 3), Sheets("Comments").Cells(pRepRow, nFinalCol)).MergeCells = True
            Range(Sheets("Comments").Cells(pRepRow, 3), Sheets("Comments").Cells(pRepRow, nFinalCol)).WrapText = True
            Sheets("Comments").Cells(pRepRow, 1).RowHeight = 18
            Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, nFinalCol)).Font.FontStyle = "Bold"
            Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, nFinalCol)).Font.Size = 10
            Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, nFinalCol)).HorizontalAlignment = xlLeft
            Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, nFinalCol)).Borders(xlEdgeBottom).LineStyle = xlContinuous
            Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, nFinalCol)).Borders(xlEdgeBottom).Weight = xlHairline 'xlThin
        
            While Cells(pCurrRow, 1).Value < 99999999
                nSampnum = Cells(pCurrRow, 1).Value
                sComments = Trim(Cells(pCurrRow, 3).Value)
                If left(sComments, 5) = "LOIf " Then
                    pRepRow = pRepRow + 1
                    Sheets("Comments").Cells(pRepRow, 1).Value = nSampnum
                    Sheets("Comments").Cells(pRepRow, 2).Value = Trim(Cells(pCurrRow, 2).Value)
                    Range(Sheets("Comments").Cells(pRepRow, 3), Sheets("Comments").Cells(pRepRow, nFinalCol)).MergeCells = True
                    Range(Sheets("Comments").Cells(pRepRow, 3), Sheets("Comments").Cells(pRepRow, nFinalCol)).WrapText = True
                    Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, nFinalCol)).HorizontalAlignment = xlLeft
                    Sheets("Comments").Cells(pRepRow, 3).Font.Size = 8
                    Sheets("Comments").Cells(pRepRow, 3).Value = Replace(sComments, "LOIf ", "")
                    Rows(pRepRow).Rows.AutoFit 'row height
                End If
                pCurrRow = pCurrRow + 1
            Wend
            Sheets("Comments").Select
            'borders
            Range(Cells(nStartRow + 1, 1), Cells(pRepRow, nFinalCol)).Select
            Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
            Selection.Borders(xlEdgeTop).Weight = xlThin
            Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
            Selection.Borders(xlEdgeLeft).Weight = xlThin
            Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
            Selection.Borders(xlEdgeRight).Weight = xlThin
            Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
            Selection.Borders(xlEdgeBottom).Weight = xlThin
            Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
            Selection.Borders(xlInsideVertical).Weight = xlHairline
            Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
            Selection.Borders(xlInsideHorizontal).Weight = xlHairline
        End If
    End If
    
    'big blurb
    pRepRow = pRepRow + 1
    Range(Cells(pRepRow, 1), Cells(pRepRow, nFinalCol)).MergeCells = True
    Range(Cells(pRepRow, 1), Cells(pRepRow, nFinalCol)).WrapText = True
    sContKey = Trim(sContKey)
    If sContKey > "" Then Cells(pRepRow, 1).Value = "Key: " & sContKey & vbNewLine
    Cells(pRepRow, 1).Value = Cells(pRepRow, 1).Value & "DETS cannot be held responsible for the integrity of samples received whereby the laboratory did not undertake the sampling. In this instance samples received may be deviating. Deviating Sample criteria are based on British and International standards and laboratory trials in conjunction with the UKAS note 'Guidance on Deviating Samples'."
    Cells(pRepRow, 1).Value = Cells(pRepRow, 1).Value & " All samples received are listed above. However, those samples that have additional comments in relation to hold time, inappropriate containers etc are deviating due to the reasons stated. This means that the analysis is accredited where applicable, but results may be compromised due to sample deviations. If no sampled date (soils) or date+time (waters) has been supplied then samples are deviating. However, if you are able to supply a sampled date (and time for waters) this will prevent samples being reported as deviating where specific hold times are not exceeded and where the container supplied is suitable."
    Rows(pRepRow).RowHeight = 68 + 5
    If sContKey > "" Then Rows(pRepRow).RowHeight = Rows(pRepRow).RowHeight + 23
    Range(Cells(pRepRow, 1), Cells(pRepRow, nFinalCol)).VerticalAlignment = xlTop
    Range(Cells(pRepRow, 1), Cells(pRepRow, nFinalCol)).Select
    With Selection.Interior
        .ThemeColor = xlThemeColorDark1 'white
        .TintAndShade = 0
    End With
    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
    Selection.Borders(xlEdgeTop).Weight = xlThin
    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
    Selection.Borders(xlEdgeLeft).Weight = xlThin
    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
    Selection.Borders(xlEdgeRight).Weight = xlThin
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlThin
    Range(Cells(pRepRow - 1, 1), Cells(pRepRow - 1, nFinalCol)).Borders(xlEdgeBottom).LineStyle = xlContinuous
    Range(Cells(pRepRow - 1, 1), Cells(pRepRow - 1, nFinalCol)).Borders(xlEdgeBottom).Weight = xlThin
        
    'insert headers on pages > 1 if any
    If pRepRow > 9 Then
        ActiveWindow.View = xlPageBreakPreview
        For xx = 9 To pRepRow - 2
            If Cells(xx, 1).EntireRow.PageBreak <> xlPageBreakNone Then 'xlPageBreakAutomatic
                Rows(xx).PageBreak = xlNone
                Rows("6:6").Copy
                Rows(xx).Insert Shift:=xlDown
                ActiveWindow.SelectedSheets.HPageBreaks.Add Before:=Cells(xx, 1)
                Range(Cells(xx - 1, 1), Cells(xx - 1, nFinalCol)).Borders(xlEdgeBottom).LineStyle = xlContinuous
                Range(Cells(xx - 1, 1), Cells(xx - 1, nFinalCol)).Borders(xlEdgeBottom).Weight = xlThin
                Range(Cells(xx + 1, 1), Cells(xx + 1, nFinalCol)).Borders(xlEdgeTop).LineStyle = xlContinuous
                Range(Cells(xx + 1, 1), Cells(xx + 1, nFinalCol)).Borders(xlEdgeTop).Weight = xlThin
                xx = xx + 10
                If xx >= pRepRow - 2 Then Exit For
                ActiveWindow.View = xlNormalView
                ActiveWindow.View = xlPageBreakPreview
            End If
        Next
        ActiveWindow.View = xlNormalView
    End If

    
    'SECTION 3 - SAMPLE COMMENTS - does not appear if no comments
    pRepRow = FindLastRow("Comments") + 1
    If pBlurbsBeginLine = 1 Then pBlurbsBeginLine = pRepRow
    Sheets("_rawdata2").Select
    pCurrRow = 2
    Do Until Cells(pCurrRow, 1).Value = 99999999
        pCurrRow = pCurrRow + 1
    Loop
    If Cells(pCurrRow, 2).Value = "comments" Then 'check there is at least 1 comment
        nStartRow = pRepRow
        If nStartRowALL = 1 Then nStartRowALL = nStartRow
        Sheets("_rawdata2").Select
        pCurrRow = pCurrRow + 1
        nSampnum = Cells(pCurrRow, 1).Value
        Sheets("Comments").Cells(pRepRow, 1).Value = "Analytical Comments"
        Sheets("Comments").Cells(pRepRow, 1).Font.FontStyle = "Bold"
        Sheets("Comments").Cells(pRepRow, 1).Font.Size = 12
        Sheets("Comments").Cells(pRepRow, 1).RowHeight = 34
        pRepRow = pRepRow + 1
        Sheets("Comments").Cells(pRepRow, 1).Value = "Lab No"
        Sheets("Comments").Cells(pRepRow, 2).Value = "Sample ID"
        Sheets("Comments").Cells(pRepRow, 3).Value = "Comments"
        Range(Sheets("Comments").Cells(pRepRow, 3), Sheets("Comments").Cells(pRepRow, nFinalCol)).MergeCells = True
        Range(Sheets("Comments").Cells(pRepRow, 3), Sheets("Comments").Cells(pRepRow, nFinalCol)).WrapText = True
        Sheets("Comments").Cells(pRepRow, 1).RowHeight = 18
        Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, nFinalCol)).Font.FontStyle = "Bold"
        Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, nFinalCol)).Font.Size = 10
        Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, nFinalCol)).Borders(xlEdgeBottom).LineStyle = xlContinuous
        Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, nFinalCol)).Borders(xlEdgeBottom).Weight = xlHairline 'xlThin
    
        While Cells(pCurrRow, 1).Value < 99999999
            nSampnum = Cells(pCurrRow, 1).Value
            sComments = Trim(Cells(pCurrRow, 3).Value)
            If nSampnum <> 99999999 And sComments > "" And left(sComments, 5) <> "LOIf " Then
                pRepRow = pRepRow + 1
                Sheets("Comments").Cells(pRepRow, 1).Value = nSampnum
                Sheets("Comments").Cells(pRepRow, 2).Value = Trim(Cells(pCurrRow, 2).Value)
                Range(Sheets("Comments").Cells(pRepRow, 3), Sheets("Comments").Cells(pRepRow, nFinalCol)).MergeCells = True
                Range(Sheets("Comments").Cells(pRepRow, 3), Sheets("Comments").Cells(pRepRow, nFinalCol)).WrapText = True
                Range(Sheets("Comments").Cells(pRepRow, 1), Sheets("Comments").Cells(pRepRow, nFinalCol)).HorizontalAlignment = xlLeft
                Sheets("Comments").Cells(pRepRow, 3).Font.Size = 8
                Sheets("Comments").Cells(pRepRow, 3).Value = sComments
                Rows(pRepRow).Rows.AutoFit 'row height
            End If
            pCurrRow = pCurrRow + 1
        Wend
        Sheets("Comments").Select
        'borders
        Range(Cells(nStartRow + 2, 1), Cells(pRepRow, nFinalCol)).Select
        Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
        Selection.Borders(xlEdgeTop).Weight = xlThin
        Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
        Selection.Borders(xlEdgeLeft).Weight = xlThin
        Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
        Selection.Borders(xlEdgeRight).Weight = xlThin
        Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
        Selection.Borders(xlEdgeBottom).Weight = xlThin
        Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
        Selection.Borders(xlInsideVertical).Weight = xlHairline
        Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
        Selection.Borders(xlInsideHorizontal).Weight = xlHairline
    End If

    'SECTION 3 - NOTES
    Sheets("Comments").Select
    If bSoil = True And bAsbestosOnly = False Then
        pRepRow = FindLastRow("Comments") + 1
        Cells(pRepRow, 1).Value = "Soil Analysis Notes"
        Cells(pRepRow, 1).Select
        With Selection.Font
            .Name = "Calibri"
            .FontStyle = "Bold"
            .Size = 12
        End With
        Cells(pRepRow, 1).RowHeight = 34
        Cells(pRepRow + 1, 1).Value = "Inorganic soil analysis was carried out on a dried sample, crushed to pass a 425|fffd|m sieve, in accordance with BS1377."
        Cells(pRepRow + 2, 1).Value = "Organic soil analysis was carried out on an 'as received' sample. Organics results are corrected for moisture and expressed on a dry weight basis."
        Cells(pRepRow + 3, 1).Value = "The Loss on Drying, used to express organics analysis on an air dried basis, is carried out at a temperature of 28|fffd|C +/-2|fffd|C."
        Range(Cells(pRepRow + 1, 1), Cells(pRepRow + 3, 1)).Select
        With Selection.Font
            .Name = "Calibri"
            .FontStyle = "Regular"
            .Size = 8
        End With
        Range(Cells(pRepRow + 1, 1), Cells(pRepRow + 3, nFinalCol)).Select
        Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
        Selection.Borders(xlEdgeTop).Weight = xlThin
        Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
        Selection.Borders(xlEdgeLeft).Weight = xlThin
        Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
        Selection.Borders(xlEdgeRight).Weight = xlThin
        Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
        Selection.Borders(xlEdgeBottom).Weight = xlThin
        pRepRow = pRepRow + 4
    End If

    If bSoil = False Then pRepRow = FindLastRow("Comments") + 1
    Cells(pRepRow, 1).Value = "Disposal"
    Cells(pRepRow, 1).Select
    With Selection.Font
        .Name = "Calibri"
        .FontStyle = "Bold"
        .Size = 12
    End With
    Cells(pRepRow, 1).RowHeight = 34
    Cells(pRepRow + 1, 1).Value = "From the issue date of this test certificate, samples will be held for the following times prior to disposal :-"
    Cells(pRepRow + 2, 1).Value = "Soils - 1 month, Liquids - 2 weeks, Asbestos (test portion) - 6 months"
    Range(Cells(pRepRow + 1, 1), Cells(pRepRow + 2, 1)).Select
    With Selection.Font
        .Name = "Calibri"
        .FontStyle = "Regular"
        .Size = 8
    End With
    Range(Cells(pRepRow + 1, 1), Cells(pRepRow + 2, nFinalCol)).Select
    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
    Selection.Borders(xlEdgeTop).Weight = xlThin
    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
    Selection.Borders(xlEdgeLeft).Weight = xlThin
    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
    Selection.Borders(xlEdgeRight).Weight = xlThin
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlThin
    
    Range(Cells(nStartRowALL, 1), Cells(pRepRow + 2, nFinalCol)).Select
    With Selection.Interior
        .ThemeColor = xlThemeColorDark1 'white
        .TintAndShade = 0
    End With

    'avoid widow/orphans
    pRepRow = FindLastRow("Comments")
    ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(pRepRow, nFinalCol)).Address
    pBlurblines = pRepRow - pBlurbsBeginLine
    If pBlurblines > 0 Then
        ActiveWindow.View = xlPageBreakPreview
        For xx = pBlurbsBeginLine To pRepRow
            If Cells(xx, 1).EntireRow.PageBreak <> xlPageBreakNone Then
                ActiveWindow.SelectedSheets.HPageBreaks.Add Before:=Cells(pBlurbsBeginLine, 1)
                Exit For
            End If
        Next
        ActiveWindow.View = xlNormalView
    End If

    Cells(2, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
    Cells(3, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
    Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
    Cells(6, 1).Select
    Sheets("_rawdata2").Visible = False
    Application.DisplayAlerts = True
End Sub

Sub SQLContlist()
    Dim r, C, lastrow, lastcol As Integer
    Dim cnn As ADODB.Connection
    Dim rst As ADODB.Recordset
    Dim sSql As String
    
    sJob = Trim(Sheets("Rawdata").Cells(4, 2).Value)
    sSampnumm = Trim(Sheets("Rawdata").Cells(12, 2).Value)
    Sheets("_rawdata2").Visible = True
    Sheets("_rawdata2").Select
    Sheets("_rawdata2").Columns("A:AZ").ClearContents
    MyConn = SQLDBPath
    If sSampnumm > "" Then
        sSql = "select s.sampnum, c.container, t.descriptn, c.amount, count(*) from samples s, containr c, cntrtype t where s.sampnum=c.sampnum and c.container=t.container and s.sampnum in (" & sSampnumm & ") group by 1,2,3,4 order by 1,2;"
    Else
        sSql = "select s.sampnum, c.container, t.descriptn, c.amount, count(*) from samples s, containr c, cntrtype t where s.sampnum=c.sampnum and c.container=t.container and s.job in ('" & Replace(sJob, ",", "','") & "') group by 1,2,3,4 order by 1,2;"
    End If
    Set cnn = New ADODB.Connection
    With cnn
        .Provider = SQLProvider
        .Open MyConn
        .CommandTimeout = 1800
    End With
    Set rst = New ADODB.Recordset
    rst.CursorLocation = adUseServer
    rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
    Sheets("_rawdata2").Range("Z1").CopyFromRecordset rst
    rst.Close
    cnn.Close
    Set rst = Nothing
    Set cnn = Nothing
    
    lastrow = Range("Z165000").End(xlUp).Row + 1
    Cells(lastrow, 26).Value = 99999999
    rwr = 1
    apr = 1
    Do While Cells(rwr, 26).Value > ""
        sSamp = Trim(Str(Cells(rwr, 26).Value))
        
        If rwr > 1 And sSampLast <> sSamp Then
            Cells(apr, 31).Value = sSampLast
            Cells(apr, 32).Value = left(sCntrs, Len(sCntrs) - 2)
            sCntrs = ""
            apr = apr + 1
        End If
        
        sCntr = Trim(Cells(rwr, 28).Value)
        sAmnt = Trim(Cells(rwr, 29).Value)
        If Right(UCase(sAmnt), 1) = "H" Then
            sAmnt = Trim(left(sAmnt, Len(sAmnt) - 1)) & " (Headspace)"
        ElseIf Right(UCase(sAmnt), 2) = "H)" Then
            sAmnt = Trim(left(sAmnt, Len(sAmnt) - 3)) & " (Headspace)"
        End If
        sAmnt = Replace(sAmnt, "(())", "()")
        nCnt = Cells(rwr, 30).Value
        sCntrs = sCntrs & sCntr & " (" & sAmnt & ")"
        If nCnt > 1 Then
            sCntrs = sCntrs & " x" & Trim(Str(nCnt)) & ", "
        Else
            sCntrs = sCntrs & ", "
        End If
        rwr = rwr + 1
        sSampLast = sSamp
    Loop
End Sub

Sub SQLSelectDS() 'Deviating Sample and Sample Comments sql. nb holddays of -1 means dev samp evaluation is not applicable
    Dim cnn As ADODB.Connection
    Dim rst As ADODB.Recordset
    Dim sSql As String
    
    Sheets("_rawdata2").Visible = True
    Sheets("_rawdata2").Columns("A:Y").ClearContents
    Sheets("_rawdata2").Range("A1:U1") = Array("SAMPNUM", "SAMPLE_ID", "TYPE", "SAMPDATE", "SAMPTIME", "RECDATE", "INSDATE", "LOGDATE", "JOB", "SAMPSTATUS", "DAMAGED", "MIN_DETDATE", "TEST", "TEST_NAME", "CONTAINERS", "HOLDDAYS", "SECTION", "CONTAINER", "DESCRIPTN", "AMOUNT")

    sJob = Trim(Sheets("Rawdata").Cells(4, 2).Value)
    sJob = Replace(sJob, " ", "")
    sJob = Replace(sJob, ",", "','")
    sSampnumm = Trim(Sheets("Rawdata").Cells(12, 2).Value)
    '#t1 samples only
    If sSampnumm > "" Then
        'sSql1 = "select s.sampnum,trim(s.sample_id)+' '+trim(sampdepth) as sample_id,s.type,s.sampdate,s.samptime,s.recdate,s.insdate,s.logdate,s.job,s.sampstatus,replace(replace(convert(s.comments,sql_char),char(10),' '),char(13),'') as comments,iif(s.damaged=1,'Damaged','') as damaged,s.sampledby into #t1 from samples s where s.sampnum in (" & sSampnumm & ");"
        sSql1 = "select s.sampnum,trim(s.sample_id)+' '+trim(sampdepth) as sample_id,s.type,s.sampdate,s.samptime,s.recdate,s.insdate,s.logdate,s.job,s.sampstatus,replace(replace(convert(s.comments,sql_char),char(10),' '),char(13),'') as comments,'' as damaged,s.sampledby into #t1 from samples s where s.sampnum in (" & sSampnumm & ");"
    Else
        'sSql1 = "select s.sampnum,trim(s.sample_id)+' '+trim(sampdepth) as sample_id,s.type,s.sampdate,s.samptime,s.recdate,s.insdate,s.logdate,s.job,s.sampstatus,replace(replace(convert(s.comments,sql_char),char(10),' '),char(13),'') as comments,iif(s.damaged=1,'Damaged','') as damaged,s.sampledby into #t1 from samples s where s.job in ('" & sJob & "');"
        sSql1 = "select s.sampnum,trim(s.sample_id)+' '+trim(sampdepth) as sample_id,s.type,s.sampdate,s.samptime,s.recdate,s.insdate,s.logdate,s.job,s.sampstatus,replace(replace(convert(s.comments,sql_char),char(10),' '),char(13),'') as comments,'' as damaged,s.sampledby into #t1 from samples s where s.job in ('" & sJob & "');"
    End If
    '#t2 add min detdate to each sample record
    sSql2 = "select s.sampnum,s.sample_id,s.type,s.sampdate,s.samptime,s.recdate,s.insdate,s.logdate,s.job,s.sampstatus,s.damaged,min(r.detdate) into #t2 from #t1 s LEFT OUTER JOIN results r on s.sampnum=r.sampnum group by 1,2,3,4,5,6,7,8,9,10,11;"
    
    '#t3 results/test containers   deal with dup tests - look at work too if interim report
    sSql3 = "select distinct s.*, t.test,t.test_name,t.containers,t.holddays,t.section into #t3 from #t2 s LEFT OUTER JOIN results r on s.sampnum=r.sampnum, tests t where r.test=t.test and t.containers>' ' and r.det not in (select det from dets where holddays>0 or holddays=-1) "
    sSql3 = sSql3 & " union select distinct s.*, t.test,t.test_name,t.containers,t.holddays,t.section from #t2 s LEFT OUTER JOIN [work] r on s.sampnum=r.sampnum, tests t where r.test=t.test and t.containers>' ' and r.det not in (select det from dets where holddays>0 or holddays=-1) "
    sSql3 = sSql3 & " union select distinct s.*, d.det,d.repname,d.containers,d.holddays,d.section from #t2 s LEFT OUTER JOIN results r on s.sampnum=r.sampnum, dets d where r.det=d.det and d.holddays>0 "
    sSql3 = sSql3 & " union select distinct s.*, d.det,d.repname,d.containers,d.holddays,d.section from #t2 s LEFT OUTER JOIN [work] r on s.sampnum=r.sampnum, dets d where r.det=d.det and d.holddays>0;"
    
    If sClient = "COOPERS" Then
        sSql3 = Replace(sSql3, "r.test=t.test", " r.test=t.test and t.test not like 'PAH%' ")
        sSql3 = Replace(sSql3, "r.det=d.det", " r.det=d.det and d.test not like 'PAH%' ")
        nR = MsgBox("PAH sample deviations (if any) for COOPERS have been excluded, but please double-check on the Comments tab.", vbOKOnly, "Cooper's Deviating Samples Report - Important.")
    End If
    
    'containers rcvd
    sSql4 = "select distinct s.*, c.container,y.descriptn,c.amount from #t3 s LEFT OUTER JOIN containr c ON s.sampnum=c.sampnum LEFT OUTER JOIN cntrtype y ON c.container=y.container union select distinct z.*, 'x','x','x',0,'x','x','x','x' from #t2 z where sampnum not in (select sampnum from #t3) order by s.sampnum,s.test,c.container; "
    'sSql4 = "select distinct s.* from #t1 s; "
    sSql = sSql1 & Chr(10) & sSql2 & Chr(10) & sSql3 & Chr(10) & sSql4
    'sSql = Sheets("config").Cells(2, 5).Value & Chr(10) & Sheets("config").Cells(5, 5).Value & Chr(10) & Sheets("config").Cells(8, 5).Value & Chr(10) & Sheets("config").Cells(14, 5).Value
    
    MyConn = SQLDBPath
    Set cnn = New ADODB.Connection
    With cnn
        .Provider = SQLProvider
        .Open MyConn
        .CommandTimeout = 1800
    End With
    
    Set rst = New ADODB.Recordset
    rst.CursorLocation = adUseServer
    rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
    Sheets("_rawdata2").Cells(3, 1).CopyFromRecordset rst
    rst.Close
    Sheets("_rawdata2").Cells(2, 1).Value = 111111
    Sheets("_rawdata2").Cells(2, 13).Value = "x"
    nLastRow = Sheets("_rawdata2").Range("A165000").End(xlUp).Row
    Sheets("_rawdata2").Cells(nLastRow + 1, 1).Value = 99999999
    Sheets("_rawdata2").Cells(nLastRow + 1, 13).Value = "x"

    sSql = "select sampnum, sample_id, trim(comments) from #t1 where trim(comments) > ' ' order by sampnum;"
    Set rst = New ADODB.Recordset
    rst.CursorLocation = adUseServer
    rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
    Sheets("_rawdata2").Cells(nLastRow + 2, 1).CopyFromRecordset rst
    rst.Close
    If Trim(Sheets("_rawdata2").Cells(nLastRow + 2, 3).Value) > "" Then Sheets("_rawdata2").Cells(nLastRow + 1, 2).Value = "comments"
    
    '11/3/16 LOI fines
    If bLOIf = True Then
        nLastRowL = Sheets("_rawdata2").Range("A165000").End(xlUp).Row
        sSql = "select r.sampnum, trim(s.sample_id)+' '+trim(s.type), 'LOIf Insufficient sample ' + trim(r.[output]) + 'g (<1kg) received for LOI fines analysis' from #t1 s, results r where s.sampnum=r.sampnum and r.det in('P-LOIf-F','P-LOIf-F') and r.result<1000 and r.result<>0 order by r.sampnum;"
        Set rst = New ADODB.Recordset
        rst.CursorLocation = adUseServer
        rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
        Sheets("_rawdata2").Cells(nLastRowL + 1, 1).CopyFromRecordset rst
        rst.Close
        If Trim(Sheets("_rawdata2").Cells(nLastRowL + 1, 3).Value) > "" Then Sheets("_rawdata2").Cells(nLastRow + 1, 3).Value = "LOIf"
    End If
    cnn.Close
    Set rst = Nothing
    Set cnn = Nothing
End Sub

Sub AIS_DeletePics(Target As Range)
  Dim Pic As Picture
  Dim ShpRng As Range
    
    On Error GoTo errorhandler
    For Each Pic In ActiveSheet.Pictures
      With Pic
      MsgBox Pic.Name
      
        Set ShpRng = ActiveSheet.Range(.TopLeftCell.Address, .BottomRightCell.Address)
          If Not Application.Intersect(ShpRng, Target) Is Nothing Then .Delete
      End With
    Next Pic
errorhandler:
End Sub

Sub DeletePicture(Target As Range, sName)
  Dim Pic As Picture
  Dim ShpRng As Range
    
    On Error GoTo errorhandler
    For Each Pic In ActiveSheet.Pictures
      With Pic
        If Pic.Name = sName Then
          Set ShpRng = ActiveSheet.Range(.TopLeftCell.Address, .BottomRightCell.Address)
          If Not Application.Intersect(ShpRng, Target) Is Nothing Then .Delete
        End If
      End With
    Next Pic
errorhandler:
End Sub

Sub InsertPicture(StrPic As String, TargetCell As Range, width As Double, height As Double, topinc As Double, leftinc As Double)
  Dim p As Object
  Dim top, left As Double
  
  On Error GoTo errorhandler
  If Dir(StrPic) = "" Then Exit Sub
  
  Set p = ActiveSheet.Pictures.Insert(StrPic)
  With TargetCell
    top = .top
    left = .left
  End With
  With p
    .top = top + topinc
    .left = left + leftinc
    .width = width
    .height = height
  End With
  Exit Sub
errorhandler:
MsgBox "Signatory was not selected"
End Sub

Sub Printout() 'hide Rawdata if it is visible assuming all other sheets have been hidden then print the entire workbook
Dim is_Visible As Boolean
If Sheets("Rawdata").Visible = True Then
  is_Visible = True
  Sheets("Rawdata").Visible = False
Else
  is_Visible = False
End If
ActiveWorkbook.Printout
If is_Visible = True Then
  Sheets("Rawdata").Visible = True
End If
End Sub

Sub SaveAsPDF(ByVal strFileName As String)
    ActiveWorkbook.ExportAsFixedFormat Type:=xlTypePDF, _
    Filename:=strFileName, _
    Quality:=xlQualityStandard, _
    IncludeDocProperties:=True, _
    IgnorePrintAreas:=False, _
    OpenAfterPublish:=True
End Sub
 
Sub CreatePdf()
    Dim strFile As String
    If SheetExists("SERT") = True Then Sheets("SERT").Visible = False
    strFile = Application.ActiveWorkbook.FullName
    If InStr(strFile, ".") = 0 Then
      strFile = strFile & ".PDF"
    ElseIf InStr(strFile, ".XL") = 0 Then
      strFile = left(strFile, InStr(strFile, ".xl") - 1) & ".PDF"
    Else
      strFile = left(strFile, InStr(strFile, ".XL") - 1) & ".PDF"
    End If
    SaveAsPDF (strFile)
    If SheetExists("SERT") = True Then Sheets("SERT").Visible = True
End Sub

Sub CSV()
    If sClient = "CORY" Then
        nResp = MsgBox("Create Cory CSV Report?", vbYesNo, "CSV Report")
        If nResp = vbYes Then Cory_CSV
    ElseIf sClient = "VIRIDOR" Then
        nResp = MsgBox("Create Viridor CSV Report?", vbYesNo, "CSV Report")
        If nResp = vbYes Then Viridor_CSV
    ElseIf sClient = "SUEZRR" Then
        nResp = MsgBox("Create SUEZ RR Landfill CSV Report?", vbYesNo, "CSV Report")
        If nResp = vbYes Then SUEZRRLF_CSV
    ElseIf sClient = "HIGHLAND" Then
        nResp = MsgBox("Create Highland CSV Report?", vbYesNo, "CSV Report")
        If nResp = vbYes Then Viridor_CSV 'Highland_CSV
    ElseIf sClient = "AUGEAN" Then
        nResp = MsgBox("Create Augean CSV Report?", vbYesNo, "CSV Report")
        If nResp = vbYes Then Augean_CSV
    ElseIf sClient = "MOUT" Then
        nResp = MsgBox("Create CSV Report?", vbYesNo, "CSV Report")
        If nResp = vbYes Then AIS_CSV
    ElseIf sClient = "QTS" Then
        nResp = MsgBox("Create Asbestos CSV Report?", vbYesNo, "CSV Report")
        If nResp = vbYes Then AIS_CSV2
    ElseIf sClient = "IMPETUS" Then
        nResp = MsgBox("Create Impetus CSV Report?", vbYesNo, "CSV Report")
        If nResp = vbYes Then Impetus_CSV
    ElseIf sClient = "LIFE" Then
        nResp = MsgBox("Create CSV Report?", vbYesNo, "CSV Report")
        If nResp = vbYes Then Asbestos_CSV
    ElseIf (sClient = "FARM" And sOffice = "RIV") Or sClient = "SOILUTIONS" Then
        nResp = MsgBox("Create EsDat CSV Reports?" & Chr(10) & "NB! Two reports will be created.", vbYesNo, "EsDat CSV Reports")
        If nResp = vbYes Then
            ESdat_CSV1
            ESdat_CSV2
        End If
    ' Generating four .csv files for SWL (AECOM (Nottinham))
    ' This code will not run if the user requires a combined report i.e. there are more than one job included in the output file.
    ElseIf InStr(Sheets("Rawdata").Cells(7, 1).Value, ",") = 0 And sClient = "SWL" And sOffice = "SWL" Then
        nResp = MsgBox("Create four ESdat CSV Reports?" & Chr(10) & "NB! Four reports will be created.", vbYesNo, "ESdat CSV Reports for SWL (AECOM(Nottingham))")
        If nResp = vbYes Then
            ' Calling the function that generates the Sample2e.csv file
            ESdat_Sample2e_csv
            ' Calling the function that generates the Chemistry2e.csv file
            ESdat_Chemistry2e_csv
            ' Calling the function that generates the LabReport2e.csv file
            ESdat_LabReport2e_csv
            ' Calling the function that generates the SDG2e.csv file
            ESdat_SDG2e_csv
        End If
    ' *********************************************************
    ' Generating two .csv files and a .xml file for GEOTECHNICS (Office: GEOTECHNICS)
    ' This code will not run if the user requires a combined report i.e. there are more than one job included in the output file.
    ElseIf InStr(Sheets("Rawdata").Cells(7, 1).Value, ",") = 0 And sClient = "GEOTECHNICS" Then
        nResp = MsgBox("Create two ESdat CSV files and one ESdat XML file?" & Chr(10) & "NB! Two CSV files and one XML file will be created.", vbYesNo, "ESdat CSV and XML files for GEOTECHNICS)")
        ' Calling the function that generates the Sample2e.csv file
        ESdat_Sample2e_csv
        ' Calling the function that generates the Chemistry2e.csv file
        ESdat_Chemistry2e_csv
        ' Calling the function that generates an interim .csv file then the .xml file as header
        ESdat_Header_CSVToXML
    ' ************************************************************
    ElseIf sClient = "ENITIAL" Or sClient = "WRG" Or sClient = "ALTE" Then
        nResp = MsgBox("Create CSV Report?", vbYesNo, "CSV Reports")
        If nResp = vbYes Then Enitial_CSV
    End If
End Sub

Function FindLastRow(ByVal strSheetName As Variant) As Long
FindLastRow = Sheets(strSheetName).Cells.Find(What:="*", After:=[A1], SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row
End Function

Function FindLastColumn(ByVal strSheetName As Variant) As Long
FindLastColumn = Sheets(strSheetName).Cells.Find(What:="*", After:=[A1], SearchOrder:=xlByColumns, SearchDirection:=xlPrevious).Column
End Function

Function SheetExists(sName, Optional wb) As Boolean
    Dim ws As Worksheet
    If IsMissing(wb) Then
      Set wb = ActiveWorkbook
    End If
    On Error Resume Next
      SheetExists = CBool(Not wb.Sheets(sName) Is Nothing)
    On Error GoTo 0
End Function

Sub DetsAccross()
For Each sSheet In Array("Soil", "Soil VOC", "Water", "Water VOC", "Leachate", "Leachate VOC", "Gas")
    If SheetExists(sSheet) Then
        If Sheets(sSheet).Visible = True Then
            Sheets(sSheet).Select
            nLastRow = FindLastRow(sSheet)
            nLastCol = FindLastColumn(sSheet)
            Range(Cells(6, 1), Cells(nLastRow, nLastCol)).Copy
            Cells(nLastRow + 1, 1).Select
            Selection.PasteSpecial Paste:=xlPasteAllExceptBorders, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
            Range(Rows(6), Rows(nLastRow)).Delete Shift:=xlUp
            
            Columns("A:A").ColumnWidth = 10.29 '9.43
            Columns("B:B").ColumnWidth = 14.71 '15
            Columns("C:C").ColumnWidth = 7 '7.29
            Columns("D:D").ColumnWidth = 7.43
            Columns("E:E").ColumnWidth = 6.86
            Columns("F:F").ColumnWidth = 8.14
            Columns("G:G").ColumnWidth = 6
            Columns("H:H").ColumnWidth = 3
            nLastRow = FindLastRow(sSheet)
            nLastCol = FindLastColumn(sSheet)
            Range(Cells(9, 1), Cells(nLastRow, 7)).Select
            With Selection
                .WrapText = False
                .ShrinkToFit = True
                .MergeCells = False
                .HorizontalAlignment = xlLeft
            End With
            Range(Cells(7, 9), Cells(7, nLastCol)).Select
            With Selection
                .ShrinkToFit = True
            End With

            Rows("14:14").RowHeight = 25.5
            Range(Columns(9), Columns(nLastCol)).ColumnWidth = 8
            Range(Columns(9), Columns(nLastCol)).HorizontalAlignment = xlLeft
            Range("H6:H11").HorizontalAlignment = xlRight
            Range("A11:G11").WrapText = True
            Rows("6:7").Select
            With Selection
                .WrapText = True
                .ShrinkToFit = False
                .MergeCells = False
            End With
            Rows("7:8").Delete Shift:=xlUp
            nLastRow = nLastRow - 2
            Rows("6:6").VerticalAlignment = xlCenter
            Cells(6, 8).WrapText = False
            
            Range(Cells(6, 9), Cells(9, nLastCol)).Select 'col headers
            Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
            Selection.Borders(xlEdgeTop).Weight = xlThin
            Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
            Selection.Borders(xlEdgeLeft).Weight = xlThin
            Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
            Selection.Borders(xlEdgeRight).Weight = xlThin
            Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
            Selection.Borders(xlEdgeBottom).Weight = xlThin
            Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
            Selection.Borders(xlInsideVertical).Weight = xlHairline
            Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
            Selection.Borders(xlInsideHorizontal).Weight = xlHairline
            
            Range(Cells(10, 7), Cells(nLastRow, 8)).Select 'cols GH
            Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
            Selection.Borders(xlEdgeTop).Weight = xlThin
            Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
            Selection.Borders(xlEdgeLeft).Weight = xlHairline
            Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
            Selection.Borders(xlEdgeRight).Weight = xlThin
            Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
            Selection.Borders(xlEdgeBottom).Weight = xlThin
            Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
            Selection.Borders(xlInsideHorizontal).Weight = xlHairline
            
            Range(Cells(10, 9), Cells(nLastRow, nLastCol)).Select 'results area
            Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
            Selection.Borders(xlEdgeTop).Weight = xlThin
            Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
            Selection.Borders(xlEdgeLeft).Weight = xlThin
            Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
            Selection.Borders(xlEdgeRight).Weight = xlThin
            Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
            Selection.Borders(xlEdgeBottom).Weight = xlThin
            Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
            Selection.Borders(xlInsideVertical).Weight = xlHairline
            Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
            Selection.Borders(xlInsideHorizontal).Weight = xlHairline
            
            Range(Cells(10, 1), Cells(nLastRow, 6)).Select 'row headers
            Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
            Selection.Borders(xlEdgeTop).Weight = xlThin
            Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
            Selection.Borders(xlEdgeLeft).Weight = xlThin
            Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
            Selection.Borders(xlEdgeRight).Weight = xlHairline
            Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
            Selection.Borders(xlEdgeBottom).Weight = xlThin
            Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
            Selection.Borders(xlInsideVertical).Weight = xlHairline
            Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
            Selection.Borders(xlInsideHorizontal).Weight = xlHairline
            
            Rows("6:6").Select 'repname
            Selection.Rows.AutoFit
            Range(Cells(7, 9), Cells(7, nLastCol)).Select 'method id
            With Selection
                .ShrinkToFit = True
            End With
            Range(Cells(1, 9), Cells(5, 9)).Select
            Selection.AutoFill Destination:=Range(Cells(1, 9), Cells(5, nLastCol)), Type:=xlFillDefault

            With ActiveSheet.PageSetup
                .PrintTitleRows = "$1:$9"
                .PrintTitleColumns = "$A:$H"
                .Orientation = xlLandscape
            End With
            ActiveSheet.PageSetup.PrintArea = ""
            nLastRow = FindLastRow(sSheet)
            nLastCol = FindLastColumn(sSheet)
            ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(nLastRow, nLastCol)).Address
            Range("A9").Select
        End If
    End If
Next
End Sub

Sub LinkedContacts() 'cf _DETSReporter.xltm LinkedContacts and LinkedContacts2 for info
    Dim cnn As ADODB.Connection
    Dim rst As ADODB.Recordset
    Dim sSql, sSqls As String
    
    Sheets("_rawdata2").Visible = True
    Sheets("_rawdata2").Columns("A:Z").ClearContents
    
    sSuiteList = Sheets("Rawdata").Cells(12, 5).Value
    sSql = ""
    
    'disabled 4/8/16 Rebecca
    'If sClient = "BIFFA" Then
    '    sBiffaQuoteList = "Q15-7119,Q15-7120,Q15-7131,Q15-7115,Q15-7121,Q15-7122,Q15-7128,Q15-7127,Q15-7146,Q15-7117,Q15-7116,Q15-7145,Q15-7118V2,Q15-7123,Q15-7124"
    '    aBiffQ = Split(sBiffaQuoteList, ",")
    '    For nB = 0 To UBound(aBiffQ)
    '        If InStr(sSuiteList, aBiffQ(nB)) > 0 Then
    '            sSql = "select contact,phone,email from contacts where client='BIFFA' and link = '" & aBiffQ(nB) & "' order by 1;"
    '            Exit For
    '        End If
    '    Next
    'End If
    If sSql = "" Then
        sContact = Trim(Sheets("Rawdata").Cells(5, 2).Value)
        'sClient = Trim(Sheets("Rawdata").Cells(3, 4).Value)
        sOffi = Trim(Sheets("Rawdata").Cells(11, 1).Value)
        'sSql = "select contact,phone,email from contacts where client='xCLIx' and contact='xCONTACTx' and office='xOFFx' union select contact,phone,email from contacts where client='xCLIx' and link in (select link from contacts where contact='xCONTACTx' and office='xOFFx') and link>' ' union select contact,phone,email from contacts where client='xCLIx' and ucase(link) like 'ALL%REP%' order by 1;"
        sSqls = "select contact,phone,email from contacts "
        sSql = sSqls & "where (client='xCLIx' or trim(client)='' or client is null) and contact='xCONTACTx' and office='xOFFx' " _
        & "union " & sSqls & "where exclude=0 and client='xCLIx' and link in (select link from contacts where contact='xCONTACTx' and office='xOFFx') and link>' ' " _
        & "union " & sSqls & "where exclude=0 and client='xCLIx' and allrepcli=1 " _
        & "union " & sSqls & "where exclude=0 and (client='xCLIx' or trim(client)='' or client is null) and office='xOFFx' and allrepoff=1 order by 1;"
        
        sSql = Replace(sSql, "xCLIx", sClient)
        sSql = Replace(sSql, "xCONTACTx", Replace(sContact, "'", "''"))
        sSql = Replace(sSql, "xOFFx", sOffi)
    End If

    MyConn = SQLDBPath
    Set cnn = New ADODB.Connection
    With cnn
        .Provider = SQLProvider
        .Open MyConn
        .CommandTimeout = 1800
    End With
    Set rst = New ADODB.Recordset
    rst.CursorLocation = adUseServer
    rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
    Sheets("_rawdata2").Cells(1, 1).CopyFromRecordset rst
    rst.Close
    cnn.Close
    Set rst = Nothing
    Set cnn = Nothing
    
    x = 1
    sLinkedContacts = ""
    If Trim(Sheets("_rawdata2").Cells(x, 3).Value) > "" Then sLinkedEmails = Trim(Sheets("_rawdata2").Cells(x, 3).Value)
    If Trim(Sheets("_rawdata2").Cells(x, 1).Value) > "" Then sLinkedNames = Trim(Sheets("_rawdata2").Cells(x, 1).Value)
    Do While Trim(Sheets("_rawdata2").Cells(x, 1).Value) > ""
        If x > 1 And Trim(Sheets("_rawdata2").Cells(x, 3).Value) > "" And InStr(LCase(sLinkedEmails), LCase(Trim(Sheets("_rawdata2").Cells(x, 3).Value))) = 0 Then sLinkedEmails = sLinkedEmails & ";" & Trim(Sheets("_rawdata2").Cells(x, 3).Value)
        If x > 1 And Trim(Sheets("_rawdata2").Cells(x, 1).Value) > "" And InStr(LCase(sLinkedNames), LCase(Trim(Sheets("_rawdata2").Cells(x, 1).Value))) = 0 Then sLinkedNames = sLinkedNames & ", " & Trim(Sheets("_rawdata2").Cells(x, 1).Value)
        If Trim(Sheets("_rawdata2").Cells(x, 1).Value) <> sContact Then
            If sLinkedContacts = "" Then 'name + email
                sLinkedContacts = Trim(Sheets("_rawdata2").Cells(x, 1).Value) & " " & Trim(Sheets("_rawdata2").Cells(x, 3).Value)
            Else
                sLinkedContacts = sLinkedContacts & ", " & Trim(Sheets("_rawdata2").Cells(x, 1).Value) & " " & Trim(Sheets("_rawdata2").Cells(x, 3).Value)
            End If
        End If
        x = x + 1
    Loop
    Sheets("_rawdata2").Visible = False
End Sub

Sub LinkedContactsSpecial(sLink) 'for Biffa - not currently used
    Dim cnn As ADODB.Connection
    Dim rst As ADODB.Recordset
    Dim sSql As String
    
    Sheets("_rawdata2").Visible = True
    Sheets("_rawdata2").Columns("A:Z").ClearContents
    sContact = Trim(Sheets("Rawdata").Cells(5, 2).Value)
    'sClient = Trim(Sheets("Rawdata").Cells(3, 4).Value)
    sOffi = Trim(Sheets("Rawdata").Cells(11, 1).Value)
    sSql = "select contact,phone,email from contacts where client='xCLIx' and office='xOFFx' and link ='" & sLink & "' order by 1;"
    sSql = Replace(sSql, "xCLIx", sClient)
    'sSql = Replace(sSql, "xCONTACTx", Replace(sContact, "'", "''"))
    sSql = Replace(sSql, "xOFFx", sOffi)
 
    MyConn = SQLDBPath
    Set cnn = New ADODB.Connection
    With cnn
        .Provider = SQLProvider
        .Open MyConn
        .CommandTimeout = 1800
    End With
    Set rst = New ADODB.Recordset
    rst.CursorLocation = adUseServer
    rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
    Sheets("_rawdata2").Cells(1, 1).CopyFromRecordset rst
    rst.Close
    cnn.Close
    Set rst = Nothing
    Set cnn = Nothing
    
    x = 1
    sLinkedContacts = ""
    If Trim(Sheets("_rawdata2").Cells(x, 3).Value) > "" Then sLinkedEmails = Trim(Sheets("_rawdata2").Cells(x, 3).Value)
    If Trim(Sheets("_rawdata2").Cells(x, 1).Value) > "" Then sLinkedNames = Trim(Sheets("_rawdata2").Cells(x, 1).Value)
    Do While Trim(Sheets("_rawdata2").Cells(x, 1).Value) > ""
        If x > 1 And Trim(Sheets("_rawdata2").Cells(x, 3).Value) > "" And InStr(LCase(sLinkedEmails), LCase(Trim(Sheets("_rawdata2").Cells(x, 3).Value))) = 0 Then sLinkedEmails = sLinkedEmails & ";" & Trim(Sheets("_rawdata2").Cells(x, 3).Value)
        If x > 1 And Trim(Sheets("_rawdata2").Cells(x, 1).Value) > "" And InStr(LCase(sLinkedNames), LCase(Trim(Sheets("_rawdata2").Cells(x, 1).Value))) = 0 Then sLinkedNames = sLinkedNames & ", " & Trim(Sheets("_rawdata2").Cells(x, 1).Value)
        If Trim(Sheets("_rawdata2").Cells(x, 1).Value) <> sContact Then
            If sLinkedContacts = "" Then 'name + email
                sLinkedContacts = Trim(Sheets("_rawdata2").Cells(x, 1).Value) & " " & Trim(Sheets("_rawdata2").Cells(x, 3).Value)
            Else
                sLinkedContacts = sLinkedContacts & ", " & Trim(Sheets("_rawdata2").Cells(x, 1).Value) & " " & Trim(Sheets("_rawdata2").Cells(x, 3).Value)
            End If
        End If
        x = x + 1
    Loop
    Sheets("_rawdata2").Visible = False
End Sub

Sub Fuel() 'assumes only 1 sample on this page. Fuels special report is a single sample report.
  If SheetExists("Soil") Then
    If Worksheets("Soil").Visible = True Then
        Worksheets("Soil").Select
        Application.CutCopyMode = False '21/6/17 added to fix bug caused by Excel 12016 build 1705
        Columns("E:E").Select
        'insert Standard Ref col.
        Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
        Range("E13").Value = "Standard Ref"
        Columns("E:E").ColumnWidth = 12
        
        'decide which to use from detsref2(SRF)/detref3(Biofuel)/detref4(coal)
        sXd1 = Cells(10, 8).Value
        nA = 0
        bRename = False
        If left(sXd1, 3) = "SRF" Then
            nA = 0
            bRename = True
        ElseIf left(sXd1, 3) = "Bio" Then
            nA = 1
            bRename = True
        ElseIf left(sXd1, 4) = "Coal" Then
            nA = 2
            bRename = True
       End If
        
        lastrow = FindLastRow("Soil")
        For rr = (pTestHeaderRow + 1) To lastrow
            aA = Split(Cells(rr, 4).Value, "}}")
            If UBound(aA) > 0 Then
                Cells(rr, 4).Value = aA(0)
                sDetrefs = aA(1)
                aB = Split(sDetrefs, "[")
                Cells(rr, 5).Value = aB(nA)
            End If
        Next
'This code disabled as it doesn't work fully but the report isn't used
'        'copy 4 results to Comments page
'        Range("A1:F22").Copy
'        Sheets("Comments").Select
'        Rows("1:1").Select
'        Selection.Insert Shift:=xlDown
'        Columns("A:A").ColumnWidth = 25.71
'        Columns("B:B").ColumnWidth = 6.43
'        Columns("D:D").ColumnWidth = 12.86
'        Columns("B:B").ColumnWidth = 8.86
'        Columns("C:C").ColumnWidth = 9.86
'        Columns("D:D").ColumnWidth = 13
'        Range("A1").Value = "Summary of Key Analysis"
'        Range("A2").Value = "Fuel Samples"
'        Rows("23:23").RowHeight = 28.5
'        Rows("2:2").RowHeight = 16.5
'        Rows("4:10").RowHeight = 12.75
'        Range(Cells(19, 1), Cells(22, 6)).ClearContents
'        Columns("E:F").ColumnWidth = 15.29
'        Rows("30:30").RowHeight = 39.75
'        Range("A1").Select
'        Worksheets("Soil").Select
'        intLastrowf = FindLastRow("Soil")
'        For rf = 18 To intLastrowf
'            If Trim(Sheets("Soil").Cells(rf, 1).Value) = "Total Moisture" Then
'                Range(Cells(rf, 1), Cells(rf, 6)).Copy
'                Sheets("Comments").Select
'                Range("A19").Select
'                ActiveSheet.Paste
'                Worksheets("Soil").Select
'            ElseIf Trim(Sheets("Soil").Cells(rf, 1).Value) = "Net Calorific Value (as received)" Then
'                Range(Cells(rf, 1), Cells(rf, 6)).Copy
'                Sheets("Comments").Select
'                Range("A20").Select
'                ActiveSheet.Paste
'                Worksheets("Soil").Select
'            ElseIf Trim(Sheets("Soil").Cells(rf, 1).Value) = "Ash Content (as received)" Then
'                Range(Cells(rf, 1), Cells(rf, 6)).Copy
'                Sheets("Comments").Select
'                Range("A21").Select
'                ActiveSheet.Paste
'                Worksheets("Soil").Select
'            ElseIf Trim(Sheets("Soil").Cells(rf, 1).Value) = "Chlorine  (dry basis)" Then
'                Range(Cells(rf, 1), Cells(rf, 6)).Copy
'                Sheets("Comments").Select
'                Range("A22").Select
'                ActiveSheet.Paste
'                Worksheets("Soil").Select
'            End If
'        Next
        nLastRow = FindLastRow("Soil")
        nLastCol = FindLastColumn("Soil")
        ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(nLastRow, nLastCol)).Address
        If bRename = True Then
            Sheets("Soil").Name = "Fuel"
            Range("A2").Value = "Fuel Samples"
            Cells(pTestHeaderRow, 1).Select
        End If
    End If
  End If
End Sub

Sub EmailRpt() 'called from added workbook open menu
    sUser = LCase(Environ$("username"))
    'SQLDBPath = "L:\TEST DB"
    SQLDBPath = "L:\DB"
    ' SQLProvider = "Advantage.OLEDB.1;Data Source=L:\TEST DB;Advantage Server Type=ADS_REMOTE_SERVER;Advantage Table Type=ADS_CDX"
    SQLProvider = "Advantage.OLEDB.1;Data Source=L:\DB;Advantage Server Type=ADS_REMOTE_SERVER;Advantage Table Type=ADS_CDX"
    nRDev = vbNull
    ' Code no longer used
    'If nRDev = vbNull And sUser = "darren.iversen" Then
    '    nRDev = MsgBox("Local DB?", vbYesNo)
    '    If nRDev = vbYes Then
    '        SQLDBPath = "C:\Program Files (x86)\AISLIMS\DB"
    '        SQLProvider = "Advantage.OLEDB.1;Data Source=C:\Program Files (x86)\AISLIMS\DB;Advantage Server Type=ADS_LOCAL_SERVER;Advantage Table Type=ADS_CDX"
    '    End If
   ' End If
    
    If Sheets("Rawdata").Cells(12, 1).Value = "Y" Then 'Onstop=Y
        nR = MsgBox("This client is on stop. Do not attach any reports.", vbOKOnly, "On Stop")
    End If
    
    '26/9/16
    If Trim(Sheets("Rawdata").Cells(13, 1).Value) > "" Then
        nR = MsgBox("Remember to send the AGS Report." & Chr(10) & "Version: " & Trim(Sheets("Rawdata").Cells(13, 1).Value), vbOKOnly, "AGS Report")
    End If
    
    Call GetRptlist
    
    sClient = Trim(Sheets("Rawdata").Cells(3, 4).Value)
    If sClient = "BIFFA" Then
        'disabled 11/7/16 nR = MsgBox("Send to Biffa LOI email list?" & Chr(10) & "(No = Email to usual recipients)", vbYesNo, sClient)
        nR = vbNo
        If nR = vbYes Then
            Call LinkedContactsSpecial("LOI")
        Else
            Call LinkedContacts
        End If
    Else
        Call LinkedContacts
    End If
    
    If Sheets("Rawdata").Cells(12, 1).Value = "Y" Then 'Onstop=Y
        Call Send_Email
        Call SetSentDate
    Else
        If Trim(Sheets("Rawdata").Cells(3, 6).Value) = "" Then
            MsgBox ("No Reports Selected")
        Else
            Call Send_Email
            Call SetSentDate
        End If
    End If
End Sub

Sub GetRptlist()
    FrmReports.ListBox1.Clear
    lastcol = Sheets("Rawdata").Cells(3, 250).End(xlToLeft).Column
    If lastcol > 5 Then Range(Sheets("Rawdata").Cells(3, 6), Sheets("Rawdata").Cells(3, lastcol)).Clear

    sJob = Trim(Replace(Sheets("Rawdata").Cells(4, 2).Value, ",", "_"))
    sFldr = Application.ActiveWorkbook.FullName
    nR = InStrRev(sFldr, "\")
    sFldr = left(sFldr, nR)
    
    i = 0
    strFile = Dir(sFldr & "*" & Trim(sJob) & "*.*")
    Do Until strFile = ""
        i = i + 1
        If strFile > "" Then strFile = Dir() 'next
    Loop
    
    ReDim aR(0 To i, 2)
    i = 0
    strFile = Dir(sFldr & "*" & Trim(sJob) & "*.*")
    Do Until strFile = ""
        sDte = FileDateTime(sFldr & strFile)
        aR(i, 0) = strFile
        aR(i, 1) = sDte
        i = i + 1
        If strFile > "" Then strFile = Dir() 'next
    Loop
    'FrmReports.ListBox1.ColumnCount = 2
    'FrmReports.ListBox1.ColumnWidths = "90;60"
    FrmReports.ListBox1.List() = aR
    FrmReports.Show
End Sub

Sub Send_Email()
    Dim Email_Subject, Email_Send_From, Email_Send_To, Email_Body, sAttachment As String
    Dim Mail_Object, Mail_Single As Variant
 
    sClii = Trim(Sheets("Rawdata").Cells(3, 4).Value)
    If InStr(sClientsNoMacros, " " & sClii & " ") > 0 Then
        nR = MsgBox(sClient & " - Please re-save this file as a .XLSX file to remove macros for this client.", vbOKOnly, "Reminder")
    End If
    If InStr(sClientsNoXLs, " " & sClii & " ") > 0 Then
        nR = MsgBox(sClii & " - Do not sent Excel file to this client - only the PDF and CSV.", vbOKOnly, "Reminder")
    End If
 
    'Sheets("Rawdata").Visible = True
    sFldr = Application.ActiveWorkbook.FullName
    nR = InStrRev(sFldr, "\")
    sFldr = left(sFldr, nR)
    sJob = Trim(Replace(Sheets("Rawdata").Cells(4, 2).Value, ",", "_"))
    sCliRef = Trim(Sheets("Rawdata").Cells(3, 1).Value)
    sConTitle = Trim(Sheets("Rawdata").Cells(6, 2).Value)
    If sLinkedEmails > "" Then
       sContactEmail = sLinkedEmails
    Else
       sContactEmail = Trim(Sheets("Rawdata").Cells(11, 3).Value)
    End If
    If sLinkedEmails > "" Then
       sSaluteContact1 = sLinkedNames
    Else
       sSaluteContact1 = Trim(Sheets("Rawdata").Cells(5, 2).Value)
    End If
    lastcol = Sheets("Rawdata").Cells(3, 250).End(xlToLeft).Column
    
    Email_Subject = "DETS Analysis Report " & sJob & " " & sConTitle & " " & sCliRef
    Email_Send_To = sContactEmail
    If sSaluteContact1 = "" Then
       Email_Body = "Dear Client"
    Else
       Email_Body = "Dear " & sSaluteContact1
    End If
    
    'Email_Body = Email_Body & Chr(10) & Chr(10) & "Please find attached your results." & Chr(10) & Chr(10) _
    '& Chr(10) & Chr(10) & "Kind regards" & Chr(10) & "Derwentside Environmental Testing Services" _
    '& Chr(10) & Chr(10) & Chr(10) & "Derwentside Environmental Testing Services" _
    '& Chr(10) & "Unit 2 Park Road Ind Est" & Chr(10) & "Consett" & Chr(10) & "co Durham" & Chr(10) & "DH8 5PY" _
    '& Chr(10) & "Tel: 01207 582333" & Chr(10) & "Fax: 01207 582444" & Chr(10) & "Website: www.dets.co.uk"
    
    If Sheets("Rawdata").Cells(12, 1).Value = "Y" Then
        Email_Body = "<p><font face=""Arial"" size=""2"" color=""black"">" & Email_Body & "<p><p>Your results are ready. However your account is currently on stop. Your report will follow when it is cleared.<p>Kind regards<br>Derwentside Environmental Testing Services"
    Else
        Email_Body = "<p><font face=""Arial"" size=""2"" color=""black"">" & Email_Body & "<p><p>Please find attached your results.<p>Kind regards<br>Derwentside Environmental Testing Services"
    End If
    Email_Body = Email_Body & "<p><p><b>Derwentside Environmental Testing Services</b><br>Unit 2 Park Road Ind Est<br>Consett<br>co Durham<br>DH8 5PY<br>Tel 01207 582333<br>www.dets.co.uk</font></p>"
    'Email_Body = Email_Body & "<br>" & "<img src='cid:xmas2016.png'" & ">"

    On Error GoTo debugs
 
    Set Mail_Object = CreateObject("Outlook.Application")
    Set Mail_Single = Mail_Object.CreateItem(0)
    With Mail_Single
        .Subject = Email_Subject
        .To = Email_Send_To
        .SentOnBehalfOfName = "Dets.Reports@dets.co.uk" 'added 01/9/14
        '.Body = Email_Body
        .HTMLBody = Email_Body
        For cl = 6 To lastcol
            sAttachment = Trim(Sheets("Rawdata").Cells(3, cl).Value)
            If InStr(sAttachment, ".") > 0 Then .Attachments.Add sFldr & sAttachment
        Next
        '.Attachments.Add "L:\INSTALL\AISLIMS\image\xmas2016.png", olByValue, 0
        .display
    End With
debugs:
    If Err.Description <> "" Then MsgBox Err.Description
 End Sub

Sub ASBQappend() 'get Asbestos Quant results from xls
    Dim fso
    Set fso = CreateObject("Scripting.FileSystemObject")
    'sFolder = "L:\AsiQuants_Test\"
    sFolder = "L:\AsiQuants\"
    'sFolder = "\\DETSSHARE\Users$\Darren Iversen\Documents\live\report_redo\asi\"
    CallingFile = ThisWorkbook.Name
    Set CallingWkBk = Application.ActiveWorkbook
    sJobNext = ""
    If sJob = "" Then sJob = Trim(Sheets("Rawdata").Cells(4, 2).Value)
    aJob = Split(sJob, ",")
    nJobs = UBound(aJob)
    nLastColRW = FindLastColumn("Rawdata")
    
For nc = 0 To nJobs
    sJobNext = aJob(nc)
    strFile = Dir(sFolder & Trim(sJobNext) & "*result*.xl*")
    Do Until strFile = ""
        If fso.FileExists(sFolder & strFile) Then
            nR = MsgBox(strFile & Chr(10) & "Import Asbestos Quant Report?", vbYesNo, "Asbestos Quant Report")
            If nR = vbYes Then
                If SheetExists("AQtmp") = False Then
                    Sheets.Add After:=Sheets(Sheets.Count)
                    ActiveSheet.Name = "AQtmp"
                End If
                Sheets("AQtmp").Select
                Cells.Select
                Selection.Clear
                
                Application.DisplayAlerts = False
                Workbooks.Open Filename:=sFolder & strFile
                CalledFile = ActiveWorkbook.Name
                Set CalledWkBk = Application.ActiveWorkbook
                ActiveWorkbook.Sheets("Combined Results").Cells.Copy
        
                Workbooks(CallingFile).Worksheets("AQtmp").Activate
                Cells.Select
                ActiveSheet.Paste
                Cells(1, 1).Select
                If InStr(LCase(Cells(17, 1).Value), "total mass") = 0 Then
                    nR = MsgBox("Total Mass result not found on line 17.", vbOKOnly, "Cannot process.")
                Else
                    nLastColt = FindLastColumn("AQtmp")
                    nLastRowT = FindLastRow("AQtmp")
                    'unmerge any multi column results (some samples have 2 or more results)
                    For ct = 4 To nLastColt
                        Cells(11, ct).Select
                        If (Cells(11, ct).MergeCells) Then Call UnMergeSameCell
                        Cells(17, ct).Select
                        If (Cells(17, ct).MergeCells) Then Call UnMergeSameCell
                        Cells(19, ct).Select
                        If (Cells(19, ct).MergeCells) Then Call UnMergeSameCell
                    Next
                    CalledWkBk.Close (False) 'close the xls with no prompts
                    Application.DisplayAlerts = True
                    
                    'xfer non-sample, non-result data
                    If SheetExists("Asbestos Quant") = False Then
                        Call MakeSheet("_P", "Asbestos Quant", "B")
                        Sheets("Asbestos Quant").Visible = True
                        Sheets("Asbestos Quant").Select
                        nW = Columns("E:E").ColumnWidth
                        Columns("E:E").EntireColumn.Hidden = True
                        Columns("C:C").EntireColumn.Hidden = True
                        Columns("B:B").ColumnWidth = Columns("B:B").ColumnWidth + nW
                        Columns("B:B").ColumnWidth = 30
                        Columns("F:F").ColumnWidth = 7
                        Columns("D:D").ColumnWidth = 8.43
                        Cells(1, 1).Value = "Summary of Asbestos Quantification Analysis"
                        Cells(3, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
                        Cells(5, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
                        Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
                        
                        Sheets("AQtmp").Select
                        Range(Cells(17, 1), Cells(nLastRowT, 1)).Select 'detname col
                        Selection.Copy
                        Sheets("Asbestos Quant").Select
                        Range("A14").Select
                        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                        Sheets("AQtmp").Select
                        Range(Cells(17, 3), Cells(nLastRowT, 3)).Select 'method col
                        Selection.Copy
                        Sheets("Asbestos Quant").Select
                        Range("D14").Select
                        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                        Sheets("AQtmp").Select
                        Range(Cells(17, 2), Cells(nLastRowT, 2)).Select 'units col
                        Selection.Copy
                        Sheets("Asbestos Quant").Select
                        Range("F14").Select
                        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                    End If
                    
                    'xfer sample and result data col by col
                    nLastColq = FindLastColumn("Asbestos Quant") + 1
                    'Stop
                    For ct = 4 To nLastColt
                        Sheets("AQtmp").Select
                        Range(Cells(11, ct), Cells(11, ct)).Copy 'sampnum
                        Sheets("Asbestos Quant").Select
                        Range(Cells(6, nLastColq), Cells(6, nLastColq)).Select
                        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                        Sheets("AQtmp").Select
                        Range(Cells(17, ct), Cells(nLastRowT, ct)).Copy 'results
                        Sheets("Asbestos Quant").Select
                        Range(Cells(14, nLastColq), Cells(14, nLastColq)).Select
                        ActiveSheet.Paste
                        
                        'get sample details from rawdata
                        sSampnum = Trim(Cells(6, nLastColq).Value)
                        sSampnum = CStr(sSampnum)
                        For cR = pRDFirstDataCol To nLastColRW
                            Sheets("Rawdata").Select
                            sSampnum2 = Trim(CStr(Cells(21, cR).Value))
                            If sSampnum2 = sSampnum Then
                                Range(Cells(22, cR), Cells(27, cR)).Select
                                Selection.Copy
                                Sheets("Asbestos Quant").Select
                                Range(Cells(7, nLastColq), Cells(7, nLastColq)).Select
                                Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                                Sheets("Rawdata").Select
                                Range(Cells(20, cR), Cells(20, cR)).Select
                                Selection.Copy
                                Sheets("Asbestos Quant").Select
                                Range(Cells(10, nLastColq), Cells(10, nLastColq)).Select
                                Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                                Exit For
                            End If
                        Next
                        nLastColq = nLastColq + 1
                    Next
                End If
            End If
        End If
        If strFile > "" Then strFile = Dir() 'next
    Loop
Next
If SheetExists("AQtmp") = True Then
    Application.DisplayAlerts = False
    Sheets("AQtmp").Delete
    Application.DisplayAlerts = True
End If
If SheetExists("Asbestos Quant") Then Call AsbestosQ
End Sub

Sub AsbestosQ()
    Sheets("Asbestos Quant").Select
    nLastColq = FindLastColumn("Asbestos Quant")
    nLastRowq = FindLastRow("Asbestos Quant")
    If Trim(left(Cells(36, 1).Value, 9)) = "* Denotes" Then
        nCommentsRowQ = 36 'new report Feb 2014
    Else
        nCommentsRowQ = 29
    End If
    'autofill formats
    If nJobMarker = 0 Then 'this is the last job to be imported
        If nLastColq > 7 Then
            Range(Cells(1, 7), Cells(14, 7)).Select
            Selection.AutoFill Destination:=Range(Cells(1, 7), Cells(14, nLastColq)), Type:=xlFillFormats
        End If
        Range(Cells(14, 1), Cells(14, 6)).Select
        Selection.AutoFill Destination:=Range(Cells(14, 1), Cells(nLastRowq, 6)), Type:=xlFillFormats
    
        For rq = 14 To (nCommentsRowQ - 1)
            If Trim(Cells(rq, 4).Value) = "" And Trim(Cells(rq, 6).Value) = "" And InStr(LCase(Cells(rq, 1).Value), "acms present") = 0 Then 'non-result rows
                Range(Cells(rq, 1), Cells(rq, nLastColq)).Select
                Selection.Borders(xlEdgeLeft).LineStyle = xlNone
                Selection.Borders(xlEdgeTop).LineStyle = xlNone
                Selection.Borders(xlEdgeBottom).LineStyle = xlNone
                Selection.Borders(xlEdgeRight).LineStyle = xlNone
                Selection.Borders(xlInsideVertical).LineStyle = xlNone
                Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
                With Selection.Interior
                    .PatternColorIndex = xlAutomatic
                    .ThemeColor = xlThemeColorDark1
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
            End If
            If InStr(LCase(Cells(rq, 1).Value), "respirable fibre") Or InStr(LCase(Cells(rq, 1).Value), "acms present") > 0 Then
                Range(Cells(rq, 7), Cells(rq, nLastColq)).ShrinkToFit = True
            ElseIf InStr(LCase(Cells(rq, 1).Value), "quantification by phase contrast optical microscopy") > 0 Then
                Range(Cells(rq, 1), Cells(rq, 2)).MergeCells = True
                Range(Cells(rq, 1), Cells(rq, 2)).ShrinkToFit = True
            End If
        Next
        For rq = 14 To (nCommentsRowQ - 1)
            If Trim(Cells(rq, 4).Value) <> "" Or Trim(Cells(rq, 6).Value) <> "" Or InStr(LCase(Cells(rq, 1).Value), "acms present") > 0 Then 'result rows
                Range(Cells(rq, 1), Cells(rq, 1)).Select
                Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
                Selection.Borders(xlEdgeLeft).Weight = xlThin
                Range(Cells(rq, 1), Cells(rq, 6)).Select
                Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
                Selection.Borders(xlEdgeTop).Weight = xlHairline
                Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
                Selection.Borders(xlEdgeBottom).Weight = xlHairline
                Range(Cells(rq, 7), Cells(rq, nLastColq)).Select
                Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
                Selection.Borders(xlEdgeLeft).Weight = xlThin
                Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
                Selection.Borders(xlEdgeTop).Weight = xlHairline
                Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
                Selection.Borders(xlEdgeBottom).Weight = xlHairline
                Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
                Selection.Borders(xlEdgeRight).Weight = xlThin
                Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
                Selection.Borders(xlInsideVertical).Weight = xlHairline
                Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
                Selection.Borders(xlInsideHorizontal).Weight = xlHairline
            End If
        Next
        'comment section
        Range(Cells(nCommentsRowQ, 1), Cells(nLastRowq, 6)).Select
        Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
        Selection.Borders(xlEdgeLeft).Weight = xlThin
        Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
        Selection.Borders(xlEdgeTop).Weight = xlThin
        Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
        Selection.Borders(xlEdgeBottom).Weight = xlThin
        Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
        Selection.Borders(xlEdgeRight).Weight = xlThin
        Selection.Borders(xlInsideVertical).LineStyle = xlNone
        Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
        With Selection.Interior
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With
        'sampnum section
        Range(Cells(6, 7), Cells(12, nLastColq)).Select
        Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
        Selection.Borders(xlEdgeLeft).Weight = xlThin
        Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
        Selection.Borders(xlEdgeRight).Weight = xlThin

        're-merge any multi-part analysed samples
        Application.DisplayAlerts = False
        For cq = pFirstSampleCol To nLastColq
            sSampnum = Cells(6, cq).Value
            cq2 = cq
            Do While Cells(6, cq2).Value = sSampnum
                cq2 = cq2 + 1
                If cq2 > nLastColq Then
                    If cq2 = cq + 1 Then cq2 = cq
                    Exit Do
                End If
            Loop
            If cq2 > cq + 1 Then
                For rq = 6 To 16
                    Range(Cells(rq, cq), Cells(rq, cq2 - 1)).MergeCells = True
                    Range(Cells(rq, cq), Cells(rq, cq2 - 1)).HorizontalAlignment = xlCenter
                Next
            End If
        Next
        'Range(Columns(pFirstSampleCol), Columns(nLastColq)).ColumnWidth = 9.57
        nLastColq = FindLastColumn("Asbestos Quant")
        nLastRowq = FindLastRow("Asbestos Quant")
        ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(nLastRowq, nLastColq)).Address
       Cells(13, 1).Select
    End If
    Application.DisplayAlerts = True
    
    If SheetExists("Asbestos") Then
        If Sheets("Asbestos").Visible = True Then
            Sheets("Asbestos Quant").Select
            Sheets("Asbestos Quant").Move After:=Sheets("Asbestos")
        End If
    End If
End Sub

Sub UnMergeSameCell() 'unmerge cell and put same value in all unmerged cells
    Dim Rng As Range, xCell As Range
    Set WorkRng = Application.Selection
    Application.DisplayAlerts = False
    For Each Rng In WorkRng
        If Rng.MergeCells Then
            With Rng.MergeArea
                .UnMerge
                .Formula = Rng.Formula
            End With
        End If
    Next
    Application.DisplayAlerts = True
End Sub

Sub CountSampTypes()
    Sheets("Rawdata").Select
    nLastColRW = FindLastColumn("Rawdata")
    For cRW = pRDFirstDataCol To nLastColRW 'loop accross samples an count
        If Trim(Cells(20, cRW).Value) = "" Then Cells(20, cRW).Value = "Other"
    Next
    
    If nLastColRW = pRDFirstDataCol Then
        sSampTypes = "One " & StrConv(Trim(Cells(20, pRDFirstDataCol).Value), vbProperCase) & " sample."
    Else
        Range(Cells(20, pRDFirstDataCol), Cells(20, nLastColRW)).Select
        Selection.Copy
        Range(Cells(20, nLastColRW + 1), Cells(20, nLastColRW + 1)).Select
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
        Application.CutCopyMode = False
        ActiveSheet.Range(Cells(20, nLastColRW + 1), Cells(20 + nLastColRW - pRDFirstDataCol, nLastColRW + 1)).RemoveDuplicates Columns:=1, Header:=xlNo
        
        rRW = 20
        Do While Trim(Cells(rRW, nLastColRW + 1).Value) > "" 'loop down de-duped list of samptypes
            nCou = 0
            sTyp = Trim(Cells(rRW, nLastColRW + 1).Value)
            For cRW = pRDFirstDataCol To nLastColRW 'loop accross samples an count
                If Trim(Cells(20, cRW).Value) = sTyp Then nCou = nCou + 1
            Next
            Cells(rRW, nLastColRW + 2).Value = nCou
            rRW = rRW + 1
        Loop
        
        rRW = 20
        Do While Trim(Cells(rRW, nLastColRW + 1).Value) > "" 'loop down de-duped list of samptypes and sort
            sTyp = StrConv(Trim(Cells(rRW, nLastColRW + 1).Value), vbProperCase)
            If sTyp = "Soil" Then
                Cells(rRW, nLastColRW + 1).Value = "1Soil"
            ElseIf sTyp = "Leachate" Then
                Cells(rRW, nLastColRW + 1).Value = "2Leachate"
            ElseIf sTyp = "Water" Then
                Cells(rRW, nLastColRW + 1).Value = "3Water"
            Else
                Cells(rRW, nLastColRW + 1).Value = sTyp
            End If
            rRW = rRW + 1
        Loop
        
        rRW = rRW - 1
        Range(Cells(20, nLastColRW + 1), Cells(rRW, nLastColRW + 2)).Select
        ActiveWorkbook.Worksheets("Rawdata").Sort.SortFields.Clear
        ActiveWorkbook.Worksheets("Rawdata").Sort.SortFields.Add Key:=Range(Cells(20, nLastColRW + 1), Cells(20, nLastColRW + 1)), _
            SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortTextAsNumbers
        With ActiveWorkbook.Worksheets("Rawdata").Sort
            .SetRange Range(Cells(20, nLastColRW + 1), Cells(rRW, nLastColRW + 2))
            .Header = xlNo
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
    
        sSampTypes = ","
        rRW = 20
        Do While Trim(Cells(rRW, nLastColRW + 1).Value) > "" 'loop down totals
            If Cells(rRW, nLastColRW + 2).Value = 1 Then
                sSampTypes = sSampTypes & ", " & Cells(rRW, nLastColRW + 2).Value & " " & Cells(rRW, nLastColRW + 1).Value & " sample"
            Else
                sSampTypes = sSampTypes & ", " & Cells(rRW, nLastColRW + 2).Value & " " & Cells(rRW, nLastColRW + 1).Value & " samples"
            End If
            rRW = rRW + 1
        Loop
        sSampTypes = Replace(sSampTypes & ".", ",, ", "")
        sSampTypes = Replace(sSampTypes, "1S", "S")
        sSampTypes = Replace(sSampTypes, "2L", "L")
        sSampTypes = Replace(sSampTypes, "3W", "W")
        Range(Columns(nLastColRW + 1), Columns(nLastColRW + 2)).ClearContents
    End If
    Sheets("Letter").Cells(12, 2).Value = sSampTypes
End Sub

Sub SortRD() 'sort rawdata samples
    nR = InputBox("1 = Sample_id/depth" & Chr(10) & "2 = Sampnum (LIMS default)", "Sort Samples")
    If nR = "1" Then 'horizontal sort on sample_id, then sampdepth
        Sheets("Rawdata").Select
        nLastColRW = FindLastColumn("Rawdata")
        nLastRowRW = FindLastRow("Rawdata")
        Range(Columns(pRDFirstDataCol), Columns(nLastColRW)).Select
        ActiveWorkbook.Worksheets("Rawdata").Sort.SortFields.Clear
        ActiveWorkbook.Worksheets("Rawdata").Sort.SortFields.Add Key:=Range(Cells(22, pRDFirstDataCol), Cells(22, nLastColRW)) _
            , SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        ActiveWorkbook.Worksheets("Rawdata").Sort.SortFields.Add Key:=Range(Cells(23, pRDFirstDataCol), Cells(23, nLastColRW)) _
            , SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortTextAsNumbers
        With ActiveWorkbook.Worksheets("Rawdata").Sort
            .SetRange Range(Cells(1, pRDFirstDataCol), Cells(23, nLastRowRW))
            .Header = xlGuess
            .MatchCase = False
            .Orientation = xlLeftToRight
            .SortMethod = xlPinYin
            .Apply
        End With
    ElseIf nR = "2" Then 'horizontal sort on sampnum
        Sheets("Rawdata").Select
        nLastColRW = FindLastColumn("Rawdata")
        nLastRowRW = FindLastRow("Rawdata")
        Range(Columns(pRDFirstDataCol), Columns(nLastColRW)).Select
        ActiveWorkbook.Worksheets("Rawdata").Sort.SortFields.Clear
        ActiveWorkbook.Worksheets("Rawdata").Sort.SortFields.Add Key:=Range(Cells(21, pRDFirstDataCol), Cells(21, nLastColRW)) _
            , SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortTextAsNumbers
        With ActiveWorkbook.Worksheets("Rawdata").Sort
            .SetRange Range(Cells(1, pRDFirstDataCol), Cells(23, nLastRowRW))
            .Header = xlGuess
            .MatchCase = False
            .Orientation = xlLeftToRight
            .SortMethod = xlPinYin
            .Apply
        End With
    End If
End Sub

Sub PassDataSingle() 'Moves results from rawdata to dest sheet
    Dim lastrow, lastcol, i, j, NextCol, StartCol, StartRow, lastrow2, lastcol2 As Integer
    Dim sSheet, sSType, sFooter As String
    Dim bGo, bBroke As Boolean
    Dim rRange As Range
    Dim ws As Worksheet
    Dim pb As Variant
    
    Sheets("Rawdata").Select
    lastcol = FindLastColumn("Rawdata")
    lastrow = FindLastRow("Rawdata")
    NextCol = 7 'destination col
    StartRow = 6 'destination Starting row for colums of results
                                           
    'loop accross rawdata sample columns again to selectively copy/paste to report sheets
    For i = pRDFirstDataCol To lastcol
        sSType = Trim(Cells(20, i).Value)
        sSampnum = Trim(Cells(21, i).Value)
        'sSheet = sSType & "_" & sSampnum
        sSheet = sSampnum
        Call MakeSheet("_P", sSheet, "B")
        'from PassFirst5
        Sheets("Rawdata").Select
        Union(Range(Cells((pRDTestHeaderRow + 1), 1), Cells(lastrow, 2)), Range(Cells((pRDTestHeaderRow + 1), 4), Cells(lastrow, 7))).Select
        Selection.Copy
        Sheets(sSheet).Select
        Cells(pTestHeaderRow + 1, 1).Select
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        Range("A1").Select
        
        If sSType = "CONCRETE" And sClient = "CUCS" Then
            If InStr(Sheets("Rawdata").Cells(19, i).Value, "]") > 0 Then
                aR = Split(Sheets("Rawdata").Cells(19, i).Value, "]")
                Sheets("Rawdata").Cells(19, i).Value = Trim(aR(0))  'xtradata1
            End If
            Range(Cells(19, i), Cells(19, i)).Select
            Selection.Copy
            Sheets(sSheet).Select
            Range(Cells(StartRow - 1, NextCol), Cells(StartRow - 1, NextCol)).Select
            Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            Sheets("Rawdata").Select
        End If
            
        'copy/paste sample details: type, sampnum, sample_id, sampdepth, other_id,agstype,sampdate,samptime
        Sheets("Rawdata").Select
        Range(Cells(20, i), Cells(27, i)).Select
        Selection.Copy
        Sheets(sSheet).Select
        Range(Cells(StartRow - 1, NextCol), Cells(StartRow - 1, NextCol)).Select
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        Sheets("Rawdata").Select
        
        'copy/paste results column by column
        Range(Cells((pRDTestHeaderRow + 1), i), Cells(lastrow, i)).Select 'copy all results
        Selection.Copy
        Sheets(sSheet).Select
        Range(Cells((pTestHeaderRow + 1), NextCol), Cells((pTestHeaderRow + 1), NextCol)).Select
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        
        'finish sheet formatting
        Sheets(sSheet).Select
        Set ws = ThisWorkbook.Worksheets(sSheet)
        ws.Activate
    
        Cells(2, 1).Value = "Sample " & sSheet
        Cells(3, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
        Cells(5, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
        Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
        Columns(pFirstSampleCol).ColumnWidth = Columns(pFirstSampleCol).ColumnWidth + 4
        Rows("7:7").Rows.AutoFit 'row height sample_id
        lastcol2 = pFirstSampleCol
        lastrow2 = FindLastRow(sSheet)
        j = lastcol2
        If Cells(10, j).Value = "" Then Cells(10, j).Value = Cells(5, j).Value 'use samples.type if agstype is blank
        Cells(5, j).ClearContents
        If Cells(11, j).Value = "" Then Cells(11, j).Value = "n/s" 'sample date
        If Cells(12, j).Value = "" Then Cells(12, j).Value = "n/s" 'sample time

        'autofill formats 2
        If lastrow2 > 14 Then
            Range(Cells(14, 1), Cells(14, lastcol2)).Select
            Selection.AutoFill Destination:=Range(Cells(14, 1), Cells(lastrow2, lastcol2)), Type:=xlFillFormats
        End If
        
        Call DelRows(sSheet, lastcol2)
        lastrow2 = FindLastRow(sSheet)
        'sample heading area border
        Range(Cells(6, 7), Cells(12, lastcol2)).Select
        Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
        Selection.Borders(xlEdgeLeft).Weight = xlThin
        Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
        Selection.Borders(xlEdgeRight).Weight = xlThin
        Range(Cells(6, 6), Cells(12, 6)).Borders(xlEdgeRight).LineStyle = xlContinuous
        Range(Cells(6, 6), Cells(12, 6)).Borders(xlEdgeRight).Weight = xlThin
            
        'det list area border
        Range(Cells(14, 1), Cells(lastrow2, 6)).Select
'        Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
'        Selection.Borders(xlEdgeLeft).Weight = xlThin
'        Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
'        Selection.Borders(xlEdgeRight).Weight = xlThin
        Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
        Selection.Borders(xlEdgeBottom).Weight = xlThin
        'results area border
        Range(Cells(14, 7), Cells(lastrow2, lastcol2)).Select
'        Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
'        Selection.Borders(xlEdgeLeft).Weight = xlThin
'        Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
'        Selection.Borders(xlEdgeRight).Weight = xlThin
        Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
        Selection.Borders(xlEdgeBottom).Weight = xlThin
        Range(Cells(pTestHeaderRow, 1), Cells(pTestHeaderRow, lastcol2)).Borders(xlEdgeBottom).LineStyle = xlContinuous
        Range(Cells(pTestHeaderRow, 1), Cells(pTestHeaderRow, lastcol2)).Borders(xlEdgeBottom).Weight = xlThin
            
        Call HorizTitles(sSheet, lastcol2)
        lastrow2 = FindLastRow(sSheet)
            
        'fade <lod results
        Range(Cells(pTestHeaderRow + 1, pFirstSampleCol), Cells(lastrow2, lastcol2)).Select
        With Application.ReplaceFormat.Font
            .ThemeColor = xlThemeColorLight1
            .TintAndShade = 0.349986266670736
        End With
        Selection.Replace What:="<", Replacement:="", LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
        
        ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(lastrow2, lastcol2)).Address
            
        'page break if last row on page is a heading
        ActiveWindow.View = xlPageBreakPreview
        For Each pb In ws.HPageBreaks
            If Cells(pb.Location.Row - 1, 4).Value = "" And Cells(pb.Location.Row - 1, 5).Value = "" Then
                xy = pb.Location.Row
                ActiveWindow.SelectedSheets.HPageBreaks.Add Before:=Cells(pb.Location.Row - 1, 1)
            End If
        Next pb
        ActiveWindow.View = xlNormalView
        ActiveWindow.View = xlPageBreakPreview
        For Each pb In ws.HPageBreaks
            If Cells(pb.Location.Row - 1, 4).Value = "" And Cells(pb.Location.Row - 1, 5).Value = "" Then
                ActiveWindow.SelectedSheets.HPageBreaks.Add Before:=Cells(pb.Location.Row - 1, 1)
            End If
        Next pb
         
        'page break before SVOCs/VOCs (dont break if enough room on current page)
        bBroke = False
        If bBroke = False Then
            bBroke = True
            nBreakRow = 0
            For xxx = (pTestHeaderRow + 1) To lastrow2
                If Cells(xxx, 1).Value = "SVOCs" Or Cells(xxx, 1).Value = "VOCs" Then
                    nBreakRow = xxx
                    Exit For
                End If
            Next
            If nBreakRow > 0 Then
                Worksheets(sSheet).DisplayAutomaticPageBreaks = True
                nHorizBreaks = Worksheets(sSheet).HPageBreaks.Count
                If nHorizBreaks > 0 Then
                    ActiveWindow.View = xlPageBreakPreview
                    nPg = 1
                    nPgStart = 1
                    bPgStart = False
                    For Each pb In ws.HPageBreaks
                        nPg = nPg + 1
                        If bPgStart = False Then
                            If pb.Location.Row > nBreakRow Then
                                nPgStart = nPg - 1
                                bPgStart = True
                            End If
                        End If
                    Next pb
                    If nPgStart < nHorizBreaks Then
                        Cells(nBreakRow, 1).Select
                        ActiveWindow.SelectedSheets.HPageBreaks.Add Before:=ActiveCell
                    End If
                End If
                Worksheets(sSheet).DisplayAutomaticPageBreaks = False
            End If
        End If 'page throw

        'page borders
        ActiveWindow.View = xlNormalView
        ActiveWindow.View = xlPageBreakPreview
        For Each pb In ws.HPageBreaks
            Range(Cells(pb.Location.Row - 1, 1), Cells(pb.Location.Row - 1, lastcol2)).Borders(xlEdgeBottom).LineStyle = xlContinuous
            Range(Cells(pb.Location.Row - 1, 1), Cells(pb.Location.Row - 1, lastcol2)).Borders(xlEdgeBottom).Weight = xlThin
            Range(Cells(pb.Location.Row, 1), Cells(pb.Location.Row, lastcol2)).Borders(xlEdgeTop).LineStyle = xlContinuous
            Range(Cells(pb.Location.Row, 1), Cells(pb.Location.Row, lastcol2)).Borders(xlEdgeTop).Weight = xlThin
        Next pb
        
        Call FooterKey(lastrow2, lastcol2, 4)
        Cells(pTestHeaderRow, 1).Select
        Sheets("Rawdata").Select
    Next i
    
    Sheets("Rawdata").Select
    Range("A1").Select
End Sub

Sub Chromatogram() 'insert pictures into report
    Dim cnn As ADODB.Connection
    Dim rst As ADODB.Recordset
    Dim sSql As String
    Dim fso
    Set fso = CreateObject("Scripting.FileSystemObject")
    'sFolder = "L:\Chromatograms_Test\"
    sFolder = "L:\Chromatograms\"
    
    MyConn = SQLDBPath
    Set cnn = New ADODB.Connection
    With cnn
        .Provider = SQLProvider
        .Open MyConn
        .CommandTimeout = 1800
    End With
    
    sSql = "select s.[sampnum],s.[sample_id],s.[other_id],s.[sampdepth],s.[type],s.[sampdate] from samples s, results r where " _
         & "s.sampnum=r.sampnum and r.det in ('CHROMAT-L','CHROMAT-S','CHROMBTEX') and r.result=1 and s.job in ('00-00000') and s.sampnum=999999 order by 1;"
    
    sJob = Trim(Sheets("Rawdata").Cells(4, 2).Value)
    sJob = Replace(sJob, " ", "")
    sJob = Replace(sJob, ",", "','")
    sSampnumm = Trim(Sheets("Rawdata").Cells(12, 2).Value)
    If sSampnumm > "" Then
        sSql = Replace(sSql, "and s.job in ('00-00000')", " ")
        If InStr(sSampnumm, ",") = 0 Then
            sSql = Replace(sSql, "999999", sSampnumm)
        Else
            sSql = Replace(sSql, "and s.sampnum=999999", "and s.sampnum in (" & sSampnumm & ")")
        End If
    Else
        sSql = Replace(sSql, "and s.sampnum=999999", "")
        sSql = Replace(sSql, "00-00000", Replace(sJob, ",", "','"))
    End If
    
    Set rst = New ADODB.Recordset
    rst.CursorLocation = adUseServer
    rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
    If Not rst.EOF Then
        rst.MoveFirst
        Do
            cSampn = Trim(rst![sampnum])
            cSampId = Trim(rst![sample_id])
            cOid = Trim(rst![other_id])
            cDepth = Trim(rst![sampdepth])
            cTyp = Trim(rst![Type])
            cSampdte = Trim(rst![sampdate])
            bStarted = 0
            strFile = Dir(sFolder & "*" & Trim(cSampn) & "*.*")
            Do Until strFile = ""
                If fso.FileExists(sFolder & strFile) Then
                    sFTyp = LCase(Right(strFile, 3))
                    sHeading = ""
                    If sFTyp = "jpg" Or sFTyp = "png" Or sFTyp = "bmp" Then
                        If InStr(LCase(strFile), "tp") > 0 Then
                            sHeading = "TPH 10-40"
                        ElseIf InStr(LCase(strFile), "al") > 0 Then
                            sHeading = "Aliphatics"
                        ElseIf InStr(LCase(strFile), "ar") > 0 Then
                            sHeading = "Aromatics"
                        ElseIf InStr(LCase(strFile), "bt") > 0 Then
                            sHeading = "PRO-BTEX"
                        End If
                        If bStarted = 0 Then
                            'Call MakeSheet("_P", "Chrom_" & cSampn, "B")
                            Call MakeSheet2("_P", "Chrom_" & cSampn, "B", "Comments")
                            Sheets("Chrom_" & cSampn).Select
                            Cells(2, 1).Value = "Chromatograms"
                            Cells(3, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
                            Cells(5, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
                            Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref

                            rD = pTestHeaderRow + 1
                            rD1 = rD
                            Cells(rD, 1).Value = "Petroleum Hydrocarbons"
                            Cells(rD, 1).Font.Bold = True
                            Cells(pTestHeaderRow - 7, pFirstSampleCol).Value = cSampn
                            Cells(pTestHeaderRow - 6, pFirstSampleCol).Value = cSampId
                            Cells(pTestHeaderRow - 5, pFirstSampleCol).Value = cDepth
                            Cells(pTestHeaderRow - 4, pFirstSampleCol).Value = cOid
                            Cells(pTestHeaderRow - 3, pFirstSampleCol).Value = cTyp
                            Cells(pTestHeaderRow - 2, pFirstSampleCol).Value = cSampdte
                            'sample headings accross
                            Range(Cells(pTestHeaderRow - 7, pFirstSampleCol), Cells(pTestHeaderRow - 1, pFirstSampleCol)).Select
                            Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
                            Selection.Borders(xlEdgeLeft).Weight = xlThin
                            Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
                            Selection.Borders(xlEdgeRight).Weight = xlThin
                            bStarted = 1
                            rD2 = rD
                        Else
                            If bStarted > 1 Then
                                rD = rD + 22
                                rD2 = rD2 + 24
                            Else
                                rD = rD + 17
                                rD2 = rD2 + 19
                            End If
                            rD1 = rD + 1
                            bStarted = bStarted + 1
                        End If
                        
                        rD = rD + 1
                        Cells(rD, 1).Value = "Chromatogram: " & sHeading
                        Cells(rD, 4).Value = "*"
                        lastrow = rD2 + 19
                        'body
                        Range(Cells(rD1, 1), Cells(lastrow, pFirstSampleCol + 4)).Select
                        Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
                        Selection.Borders(xlEdgeTop).Weight = xlThin
                        Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
                        Selection.Borders(xlEdgeLeft).Weight = xlThin
                        Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
                        Selection.Borders(xlEdgeRight).Weight = xlThin
                        Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
                        Selection.Borders(xlEdgeBottom).Weight = xlThin
                        Selection.Borders(xlInsideVertical).LineStyle = xlNone
                        Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
                        'loop down test headings
                        For r = (pTestHeaderRow + 1) To lastrow
                            If Cells(r, 1).Value > "" Then
                                Range(Cells(r, 1), Cells(r, pFirstSampleCol + 4)).Select
                                Selection.Borders(xlInsideVertical).LineStyle = xlNone
                                Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
                                Selection.Borders(xlEdgeTop).Weight = xlThin
                                With Selection.Interior
                                    .PatternColorIndex = xlAutomatic
                                    .ThemeColor = xlThemeColorDark1
                                    .TintAndShade = 0
                                    .PatternTintAndShade = 0
                                End With
                             End If
                        Next
                        Range(Cells(1, 1), Cells(lastrow, pFirstSampleCol + 4)).Select
                        With Selection.Interior
                            .PatternColorIndex = xlAutomatic
                            .ThemeColor = xlThemeColorDark1
                            .TintAndShade = 0
                            .PatternTintAndShade = 0
                        End With
                        
                        rD = rD + 1
                        Cells(rD, 1).Select
                        Dim oPicture As Shape
                        MyTop = Range(Cells(rD, 1), Cells(rD, 1)).top
                        Set oPicture = Application.ActiveSheet.Shapes.AddPicture(sFolder & strFile, False, True, 1, MyTop, -1, -1)
                        If oPicture.width / oPicture.height > 3 Then
                            'for letterbox shapped images (typically 1000x300px)
                            oPicture.LockAspectRatio = False
                            oPicture.height = oPicture.height * 0.55
                            oPicture.width = oPicture.width * 0.46
                        Else
                            'for normal images (eg 500x300px)
                            oPicture.LockAspectRatio = False
                            oPicture.width = 440
                        End If
                    Else
                        nR = MsgBox("Cannot find chromatogram for " & sSampNext, vbOKOnly, "Problem")
                    End If
                Else
                    nR = MsgBox("Cannot find chromatogram for " & sSampNext, vbOKOnly, "Problem")
                End If
                If strFile > "" Then strFile = Dir() 'next
            Loop
            
            rst.MoveNext
        Loop Until rst.EOF
    End If
    rst.Close
    Set rst = Nothing
End Sub

Sub Combust() 'add Combustability sheet after Soil sheet
    If SheetExists("Soil") = True Then
        Call MakeSheet2("_Comb", "Combustibility", "A", "Soil")
    Else
        Call MakeSheet2("_Comb", "Combustibility", "B", "Comments")
    End If
End Sub

Sub SetSentDate() 'called after email
    Dim cnn As ADODB.Connection
    
    sJobb = Trim(Sheets("Rawdata").Cells(4, 2).Value)
    If sJobb > "" Then
        nResp = MsgBox("Set Sent Date (to today)?" & Chr(10) & sJobb, vbYesNo, "Sent date")
        If nResp = vbNo Then
            nResp = MsgBox("Cancelled", vbOKOnly, "Cancelled")
            Exit Sub
        End If
    
        sUser = LCase(Environ$("username"))
        'SQLDBPath = "L:\TEST DB"
        SQLDBPath = "L:\DB"
        'SQLProvider = "Advantage.OLEDB.1;Data Source=L:\TEST DB;Advantage Server Type=ADS_REMOTE_SERVER;Advantage Table Type=ADS_CDX"
        SQLProvider = "Advantage.OLEDB.1;Data Source=L:\DB;Advantage Server Type=ADS_REMOTE_SERVER;Advantage Table Type=ADS_CDX"
        nRDev = vbNull
        ' Code no longer used
        'If nRDev = vbNull And sUser = "darren.iversen" Then
        '    nRDev = MsgBox("Local DB?", vbYesNo)
        '    If nRDev = vbYes Then
        '        SQLDBPath = "C:\Program Files (x86)\AISLIMS\DB"
        '        SQLProvider = "Advantage.OLEDB.1;Data Source=C:\Program Files (x86)\AISLIMS\DB;Advantage Server Type=ADS_LOCAL_SERVER;Advantage Table Type=ADS_CDX"
        '    End If
        'End If
        
        sJobb = Replace(sJobb, ",", "','")
        sSql = "update JOBS set sentdate=curdate() where job in ('" & sJobb & "');"
        MyConn = SQLDBPath
        Set cnn = New ADODB.Connection
        With cnn
            .Provider = SQLProvider
            .Open MyConn
            .Execute sSql
            .Close
        End With
        Set cnn = Nothing
        nResp = MsgBox("Done", vbOKOnly, "Done")
    Else
        nResp = MsgBox("No Job found", vbOKOnly, "Try again")
    End If
End Sub

Function cleanedString(ByVal sLine As String) As String
'Public Const strAlphaNumeric = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ +=-)(!';><.," ' allowable characters in filenames

cleanedString = ""
For i = 1 To Len(sLine)
    If InStr(strAlphaNumeric, Mid(sLine, i, 1)) > 0 Then cleanedString = cleanedString & Mid(sLine, i, 1)
    Next

End Function
Attribute VB_Name = "FrmReports"
Attribute VB_Base = "0{619E14D1-BF85-4035-9D6B-65B9DB4F0F23}{89991618-34E0-4C8B-A8A0-781EBF1EA9BB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
    nCol = 6
    For i = 0 To ListBox1.ListCount - 1
        If ListBox1.Selected(i) = True Then
            Sheets("Rawdata").Cells(3, nCol).Value = ListBox1.List(i, 0)
            nCol = nCol + 1
        End If
    Next i
    Unload Me
End Sub
Attribute VB_Name = "FrmSubconLab"
Attribute VB_Base = "0{13BAA8AA-3709-4B01-BE5C-BBD651DD53E8}{3719E308-920F-40C4-B36A-1177C38C2BEA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CheckBox1_Click()
    If CheckBox1.Value = True Then
        bSubconDontAsk = True
    Else
        bSubconDontAsk = False
    End If
End Sub

Private Sub CommandButton1_Click()
    sSubLab = Trim(TextBox1.Value)
    Unload Me
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Private Sub CommandButton1_Click()
  Call SortRD
End Sub
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Private Sub CommandButton1_Click()
  Call SortRD
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Open()
  Dim cb As CommandBar
  Dim cbp As CommandBarPopup
  Dim cbb1, cbb2, cbb3, cbb4, cbb5 As CommandBarButton
  Dim wThis As Workbook
  
  On Error Resume Next
  Application.CommandBars("Worksheet Menu Bar").Controls("&Tools").Controls("Run Report").Delete
  Application.CommandBars("Worksheet Menu Bar").Controls("&Tools").Controls("Print Report").Delete
  Application.CommandBars("Worksheet Menu Bar").Controls("&Tools").Controls("Create PDF").Delete
  Application.CommandBars("Worksheet Menu Bar").Controls("&Tools").Controls("Email").Delete
  Application.CommandBars("Worksheet Menu Bar").Controls("&Tools").Controls("Redo Borders").Delete
  Application.CommandBars("Worksheet Menu Bar").Controls("&Tools").Controls("Add Comment").Delete
   
 'add button under Tools to the Excel menu to execute the add-in
  Set cb = Application.CommandBars("Worksheet Menu Bar")
  Set cbp = cb.Controls("&Tools")
  Set cbb1 = cbp.Controls.Add(Type:=msoControlButton, Temporary:=True)
  Set cbb2 = cbp.Controls.Add(Type:=msoControlButton, Temporary:=True)
  Set cbb3 = cbp.Controls.Add(Type:=msoControlButton, Temporary:=True)
  Set cbb4 = cbp.Controls.Add(Type:=msoControlButton, Temporary:=True)
  Set cbb5 = cbp.Controls.Add(Type:=msoControlButton, Temporary:=True)
  Set wThis = ActiveWorkbook
  With cbb1
    .Caption = "Run Report"
    .BeginGroup = True
    .OnAction = "RUN"
    On Error Resume Next
    .FaceId = 29 '3272
    On Error GoTo 0
  End With
  With cbb2
    .Caption = "Create PDF"
    .BeginGroup = True
    .OnAction = "CREATEPDF"
    On Error Resume Next
    .FaceId = 95
    On Error GoTo 0
  End With
  With cbb3
    .Caption = "Email"
    .BeginGroup = True
    .OnAction = "EmailRpt"
    On Error Resume Next
    .FaceId = 24
    On Error GoTo 0
  End With
  With cbb4
    .Caption = "Redo Borders"
    .BeginGroup = True
    .OnAction = "RedoBorders"
    On Error Resume Next
    .FaceId = 150
    On Error GoTo 0
  End With
  With cbb5
    .Caption = "Add Comment"
    .BeginGroup = True
    .OnAction = "AddComment"
    On Error Resume Next
    .FaceId = 205
    On Error GoTo 0
  End With
  
  Set cbp = Nothing
  Set cbb1 = Nothing
  Set cbb2 = Nothing
  Set cbb3 = Nothing
  Set cbb4 = Nothing
  Set cbb5 = Nothing
  Set cb = Nothing
  Set wThis = Nothing
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
  ' remove items from menu
  On Error Resume Next
  Application.CommandBars("Worksheet Menu Bar").Controls("&Tools").Controls("Run Report").Delete
  Application.CommandBars("Worksheet Menu Bar").Controls("&Tools").Controls("Print Report").Delete
  Application.CommandBars("Worksheet Menu Bar").Controls("&Tools").Controls("Create PDF").Delete
  Application.CommandBars("Worksheet Menu Bar").Controls("&Tools").Controls("Email").Delete
  Application.CommandBars("Worksheet Menu Bar").Controls("&Tools").Controls("Redo Borders").Delete
  Application.CommandBars("Worksheet Menu Bar").Controls("&Tools").Controls("Add Comment").Delete
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    ActiveWorkbook.CheckCompatibility = False
End Sub
Attribute VB_Name = "client_specific"

Sub Cory_WetWt()
    Dim x, y, z, nMoist, nDecimals, pFirstSampCol, nStartRow, nStartCol As Integer
    Dim nResult, nNewResult As Double
    Dim sResult, sDet As String
    nStartRow = pTestHeaderRow + 1 'results start row
    nStartCol = 7 'start col for sampnums

    If SheetExists("Soil") Then
      nR = MsgBox("Run Cory Soil Wet Weight report?", vbYesNo, "Custom Report")
      If nR = vbNo Then Exit Sub
        If Sheets("Soil").Visible = True Then
            Application.DisplayAlerts = False
            Sheets("Soil").Select
            Cells(2, 1).Value = "Soil results expressed as dry & wet weight"
            'scroll accross samples
            y = nStartCol
            While Trim(Cells(6, y).Value) > "" 'sampnum
                If Cells(nStartRow - 1, y).Value <> "(wet weight)" Then 'get Moisture Result
                    x = nStartRow
                    nMoist = 100
                    Do While Trim(Cells(x, 1).Value) > ""
                        If InStr(UCase(Trim(Cells(x, 1).Value)), "MOISTURE") > 0 Then
                            sResult = Trim(Cells(x, y).Value)
                            If left(sResult, 1) = "<" Then
                                nMoist = 0
                            ElseIf sResult = "" Or sResult = "t/f" Or IsNumeric(sResult) = False Then
                                nMoist = "Missing Moisture"
                                nZ = MsgBox("Moisture result missing", vbOKOnly)
                            Else
                                nMoist = CDbl(sResult)
                            End If
                            Exit Do
                        End If
                        x = x + 1
                    Loop
                
                    'insert new column next to current
                    Columns(y).Select
                    Selection.Copy
                    Selection.Insert Shift:=xlToRight
                    Cells(nStartRow - 1, y + 1).Value = "(wet weight)"
                    Cells(nStartRow - 1, y + 1).Font.Bold = False
                    Columns(y).ColumnWidth = 20
                    Columns(y + 1).ColumnWidth = 20
                    
                    'scroll down this sampnum's results
                    x = nStartRow
                    sDet = Trim(Cells(x, 1).Value)
                    While sDet > ""
                        sResult = Trim(Cells(x, y).Value)
                        If left(sResult, 1) = "<" Or IsNumeric(left(sResult, 1)) = False Or _
                        left(sDet, 2) = "pH" Or InStr(UCase(sDet), "MOISTURE") > 0 Then
                            '
                        Else
                            nDecimals = InStrRev(Trim(Cells(x, 6).Value), ".") 'get it from lolod
                            'If nDecimals > 0 Then nDecimals = nDecimals - 1
                            If Cells(x, 6).Value = 0 And nDecimals = 0 Then nDecimals = 1   'if lolod is 0 then dec = 1
                            nResult = CDbl(sResult)
                            nNewResult = Round((nResult * (100 - nMoist)) / 100, nDecimals)
                            'nNewResult = RoundSig(Round((nResult * (100 - nMoist)) / 100, nDecimals), 2)
                            Cells(x, y + 1).Value = nNewResult
                        End If
                        x = x + 1
                        sDet = Trim(Cells(x, 1).Value)
                    Wend
                End If
                y = y + 1
            Wend
            
            'insert 3 new hearder rows
            Rows("6:6").Select
            Selection.Copy
            Selection.Insert Shift:=xlDown
            Application.CutCopyMode = False
            Selection.Copy
            Selection.Insert Shift:=xlDown
            Application.CutCopyMode = False
            Selection.Copy
            Selection.Insert Shift:=xlDown
            Cells(6, 6).Value = "Charge Category"
            Cells(7, 6).Value = "Waste Producer"
            Cells(8, 6).Value = "Waste Description"
            Cells(12, 6).Value = "Ticket No."
            lastcol = FindLastColumn("Soil")
            lastrow = FindLastRow("Soil")
            Range(Cells(6, 7), Cells(15, lastcol)).Borders(xlInsideHorizontal).Weight = xlHairline
            Range(Cells(6, 7), Cells(15, lastcol)).Borders(xlInsideVertical).Weight = xlHairline
            Range(Cells(6, 7), Cells(8, lastcol)).ClearContents
            'results body
            Range(Cells(17, 7), Cells(lastrow, lastcol)).Borders(xlInsideHorizontal).Weight = xlHairline
            Range(Cells(17, 7), Cells(lastrow, lastcol)).Borders(xlInsideVertical).Weight = xlHairline
            For y = 17 To lastrow
                If Cells(y, 1).Value > "" And Cells(y, 4).Value = "" And Cells(y, 5).Value = "" And Cells(y, 6).Value = "" Then
                    Range(Cells(y, 7), Cells(y, lastcol)).Borders(xlInsideVertical).LineStyle = xlNone
                    Range(Cells(y, 7), Cells(y, lastcol)).Borders(xlEdgeTop).Weight = xlThin
                    Range(Cells(y, 7), Cells(y, lastcol)).Borders(xlEdgeBottom).Weight = xlHairline
                    Range(Cells(y, 7), Cells(y, lastcol)).Borders(xlEdgeLeft).LineStyle = xlNone
                    Range(Cells(y, 7), Cells(y, lastcol)).Borders(xlEdgeRight).LineStyle = xlNone
                End If
            Next
            
            'scroll accross samples
            y = nStartCol
            yy = pRDFirstDataCol
            While Trim(Cells(9, y).Value) > ""
                If InStr(Sheets("Rawdata").Cells(19, yy).Value, "]") > 0 Then
                    aR = Split(Sheets("Rawdata").Cells(19, yy).Value, "]")
                    Cells(6, y).Value = Trim(aR(2)) 'charge cat/cliref
                    Cells(7, y).Value = Trim(aR(0)) 'waste producer/xtradata1
                    Cells(8, y).Value = Trim(aR(1)) 'waste desc/xtradata2
                End If
                'scroll down this sampnum's results
                x = nStartRow
                sDet = Trim(Cells(x, 1).Value)
                Do While sDet > ""
                    If left(sDet, 16) = "Soil Description" Or left(sDet, 17) = "Solid Description" Then
                        Range(Cells(x, y), Cells(x, y + 1)).MergeCells = True
                        Range(Cells(x, y), Cells(x, y + 1)).ShrinkToFit = True
                        Exit Do
                    End If
                    x = x + 1
                    sDet = Trim(Cells(x, 1).Value)
                Loop
                y = y + 2
                yy = yy + 1
            Wend
            lastrow2 = FindLastRow("Soil")
            lastcol2 = FindLastColumn("Soil")
            ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(lastrow2, lastcol2)).Address
            Call CoryTranspose
        End If
    End If
    Range("A16").Select
    Application.DisplayAlerts = True
End Sub

Sub CoryTranspose() ' create dets accross version
    Dim nLastCol, nLastRow, x As Integer
        
    Call MakeSheet("Soil", "Soil_Transposed", "A")
    Application.DisplayAlerts = False
    Sheets("Soil_Transposed").Select
    Range("A6").Select
    Range(Selection, ActiveCell.SpecialCells(xlLastCell)).Clear
    
    Sheets("Soil").Select
    nLastCol = FindLastColumn("Soil")
    nLastRow = FindLastRow("Soil")
    Union(Range(Cells(6, 1), Cells(nLastRow, 1)), Range(Cells(6, 4), Cells(nLastRow, nLastCol))).Select
    Selection.Copy
    Sheets("Soil_Transposed").Select
    Range("A6").Select
    Selection.PasteSpecial Paste:=xlPasteAllExceptBorders, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    Range(Columns(11), Columns(nLastCol)).HorizontalAlignment = xlRight
    
    nLastCol = FindLastColumn("Soil_Transposed")
    nLastRw = FindLastRow("Soil_Transposed") 'reposition some columns
    For x = 10 To nLastRw
        sD = Cells(x, 4).Value
        sE = Cells(x, 5).Value
        sF = Cells(x, 6).Value
        Cells(x, 4).Value = Cells(x, 1).Value
        Cells(x, 5).Value = Cells(x, 2).Value
        Cells(x, 6).Value = Cells(x, 3).Value
        Cells(x, 1).Value = sD
        Cells(x, 2).Value = sE
        Cells(x, 3).Value = sF
    Next
    
    'remove det section headings
    StartCol = 12 'first sampnum col
    NextCol = StartCol
    Do While Cells(6, NextCol).Value > "" 'repname
        If Cells(9, NextCol).Value = "" And Cells(10, NextCol).Value = "" And Cells(11, NextCol).Value = "" Then
            Columns(NextCol).Delete Shift:=xlLeft
        Else
            NextCol = NextCol + 1
        End If
    Loop
    
    Columns("A:A").ColumnWidth = 9.57
    Columns("B:B").ColumnWidth = 13.29
    Columns("C:C").ColumnWidth = 7.14
    Columns("D:F").ColumnWidth = 11
    Columns("G:G").ColumnWidth = 7
    Columns("H:K").ColumnWidth = 9
    Range(Cells(10, 1), Cells(10, 10)).WrapText = True
    Range(Cells(6, 11), Cells(7, 11)).MergeCells = True
    nLastCol = FindLastColumn("Soil_Transposed")
    For x = 12 To nLastCol
        Cells(6, x).ShrinkToFit = False
        Cells(6, x).WrapText = True
    Next
    Range(Columns(12), Columns(nLastCol)).ColumnWidth = 9
    Range(Cells(10, 1), Cells(nLastRw, 10)).HorizontalAlignment = xlLeft

    'top heading area border
    Range(Cells(6, 12), Cells(11, nLastCol)).Select
    Selection.Borders(xlEdgeLeft).Weight = xlThin
    Selection.Borders(xlEdgeTop).Weight = xlThin
    Selection.Borders(xlEdgeBottom).Weight = xlThin
    Selection.Borders(xlEdgeRight).Weight = xlThin
    Selection.Borders(xlInsideHorizontal).Weight = xlHairline
    Selection.Borders(xlInsideVertical).Weight = xlHairline
    'side heading area border
    Range(Cells(11, 1), Cells(nLastRw, 10)).Select
    Selection.Borders(xlEdgeLeft).Weight = xlThin
    Selection.Borders(xlEdgeTop).Weight = xlThin
    Selection.Borders(xlEdgeBottom).Weight = xlThin
    Selection.Borders(xlEdgeRight).Weight = xlThin
    Selection.Borders(xlInsideHorizontal).Weight = xlHairline
    Selection.Borders(xlInsideVertical).Weight = xlHairline
    Range(Cells(11, 1), Cells(1, 10)).Select
    Selection.Borders(xlEdgeBottom).Weight = xlThin
    'results area border
    Range(Cells(12, 12), Cells(nLastRw, nLastCol)).Select
    Selection.Borders(xlEdgeLeft).Weight = xlThin
    Selection.Borders(xlEdgeTop).Weight = xlThin
    Selection.Borders(xlEdgeBottom).Weight = xlThin
    Selection.Borders(xlEdgeRight).Weight = xlThin
    Selection.Borders(xlInsideHorizontal).Weight = xlHairline
    Selection.Borders(xlInsideVertical).Weight = xlHairline

    Sheets("Soil_Transposed").PageSetup.PrintTitleRows = "$1:$10"
    Sheets("Soil_Transposed").PageSetup.PrintTitleColumns = "$A:$C"
    Sheets("Soil_Transposed").PageSetup.Orientation = xlLandscape
    lastrow2 = FindLastRow("Soil_Transposed")
    lastcol2 = FindLastColumn("Soil_Transposed")
    ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(lastrow2, lastcol2)).Address

    Range("A10").Select
    Sheets("Soil").Select
    Range("A16").Select
    Application.DisplayAlerts = True
End Sub

Sub NG() 'run at very end
    If SheetExists("Soil") Then
        If Sheets("Soil").Visible = True Then
            Call MakeSheet("_NGSoil", "NGSoil", "B")
            Application.DisplayAlerts = False
            Sheets("Soil").Select 'sampdate
            nLastCol = FindLastColumn("Soil")
            Range(Cells(16, 5), Cells(16, nLastCol)).Copy
            Sheets("NGSoil").Select
            Range("C8").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
           
            Sheets("Soil").Select 'sampnum, sample_id
            Range(Cells(11, 5), Cells(12, nLastCol)).Copy
            Sheets("NGSoil").Select
            Range("C9").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            
            Sheets("Soil").Select 'depth
            Range(Cells(13, 5), Cells(13, nLastCol)).Copy
            Sheets("NGSoil").Select
            Range("C11").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
           
            Sheets("Soil").Select 'results
            nLastRow = FindLastRow("Soil")
            For r = 19 To nLastRow
                Sheets("Soil").Select
                sDetname = Trim(Cells(r, 1).Value)
                sDet = ""
                aD = Split(Trim(Cells(r, 1).Value), "]]") 'detname]detcode
                If UBound(aD) > 0 Then
                    sDet = Trim(aD(1))
                    sDetname = Trim(aD(0)) & " " & Trim(Cells(r, 2).Value)
                    Cells(r, 1).Value = Trim(aD(0))
                End If
                Range(Cells(r, 5), Cells(r, nLastCol)).Copy
                Sheets("NGSoil").Select
                For rD = 14 To 92
                    If Trim(Cells(rD, 2).Value) = sDet Then
                        Cells(rD, 3).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                        Exit For
                    End If
                Next rD
                If rD >= 92 Then 'additional analytes ie non-matches
                    rD = 95
                    Do Until left(Trim(Cells(rD, 1).Value), 7) = "Analyte" Or Trim(Cells(rD, 1).Value) = ""
                        rD = rD + 1
                    Loop
                    Cells(rD, 1).Value = sDetname
                    Cells(rD, 3).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                End If
            Next r
            Sheets("NGSoil").Select
            lastrow2 = FindLastRow("NGSoil")
            lastcol2 = FindLastColumn("NGSoil")
            ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(lastrow2, lastcol2)).Address
        End If
    End If

    If SheetExists("Water") Then
        If Sheets("Water").Visible = True Then
            Call MakeSheet("_NGWater", "NGWater", "B")
            Application.DisplayAlerts = False
            Sheets("Water").Select 'sampdate
            nLastCol = FindLastColumn("Water")
            Range(Cells(16, 5), Cells(16, nLastCol)).Copy
            Sheets("NGWater").Select
            Range("C8").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
           
            Sheets("Water").Select 'sampnum, sample_id
            Range(Cells(11, 5), Cells(12, nLastCol)).Copy
            Sheets("NGWater").Select
            Range("C9").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            
            Sheets("Water").Select 'depth
            Range(Cells(13, 5), Cells(13, nLastCol)).Copy
            Sheets("NGWater").Select
            Range("C11").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
           
            Sheets("Water").Select 'results
            nLastRow = FindLastRow("Water")
            For r = 19 To nLastRow
                Sheets("Water").Select
                sDetname = Trim(Cells(r, 1).Value)
                sDet = ""
                aD = Split(Trim(Cells(r, 1).Value), "]]") 'detname]detcode
                If UBound(aD) > 0 Then
                    sDet = Trim(aD(1))
                    sDetname = Trim(aD(0)) & " " & Trim(Cells(r, 2).Value)
                    Cells(r, 1).Value = Trim(aD(0))
                End If
                Range(Cells(r, 5), Cells(r, nLastCol)).Copy
                Sheets("NGWater").Select
                For rD = 13 To 90
                    If Trim(Cells(rD, 2).Value) = sDet Then
                        Cells(rD, 3).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                        Exit For
                    End If
                Next rD
                If rD >= 90 Then 'additional analytes ie non-matches
                    rD = 93
                    Do Until left(Trim(Cells(rD, 1).Value), 7) = "Analyte" Or Trim(Cells(rD, 1).Value) = ""
                        rD = rD + 1
                    Loop
                    Cells(rD, 1).Value = sDetname
                    Cells(rD, 3).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                End If
            Next r
            Sheets("NGWater").Select
            lastrow2 = FindLastRow("NGWater")
            lastcol2 = FindLastColumn("NGWater")
            ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(lastrow2, lastcol2)).Address

        End If
    End If
    Application.DisplayAlerts = True
End Sub

Sub CUCSConcrete()
    Dim nLastCol, nLastRow, x As Integer
    
    If SheetExists("Soil") = False Then Exit Sub
    If Sheets("Soil").Visible = False Then Exit Sub
    Call MakeSheet("Soil", "Concrete", "A")
    Application.DisplayAlerts = False
    Sheets("Concrete").Select
    Range("A8").Select
    Range(Selection, ActiveCell.SpecialCells(xlLastCell)).ClearContents
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    Cells.NumberFormat = "General"
    
    Sheets("Soil").Select
    nLastCol = FindLastColumn("Rawdata")
    
    nLastRow = 9999
    Do Until Trim(Cells(nLastRow, 1).Value) = "Chloride Acid Soluble"
        If nLastRow < 19 Then
            If SheetExists("Concrete") Then Sheets("Concrete").Delete
            Exit Sub 'AS Cl not found
        End If
        nLastRow = nLastRow - 1
    Loop
            
    Range(Cells(8, 1), Cells(nLastRow, nLastCol)).Copy
    Sheets("Concrete").Select
    Range("A9").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    
    Sheets("Soil").Select
    Range(Cells(nLastRow, 1), Cells(nLastRow, 4)).Copy
    Sheets("Concrete").Select
    Range("A9").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Range(Cells(8, 1), Cells(8, 4)) = Array("Test", "Units", "DETSxx", "LOD")
    Range(Cells(8, 1), Cells(8, 4)).Font.Bold = True
    Call borderz(8, 1, 9, 4)
    Range(Columns(6), Columns(nLastRow - 5)).HorizontalAlignment = xlRight
    
    Sheets("Concrete").Select
    nLastCol = 11
    nCLcol = 1
    While Trim(Cells(9, nLastCol).Value) > ""
        If Trim(Cells(9, nLastCol).Value) = "Chloride Acid Soluble" Then nCLcol = nLastCol
        nLastCol = nLastCol + 1
    Wend
    If nCLcol = 1 Then
        If SheetExists("Concrete") Then Sheets("Concrete").Delete
        Exit Sub 'AS Cl not found
    End If
    
    nLastRw = FindLastRow("Concrete")
    For x = 12 To nLastRw
        Sc = Cells(x, 3).Value 'site
        sD = Cells(x, 4).Value 'sampnum
        sE = Cells(x, 5).Value 'id
        sF = Cells(x, 6).Value 'depth
        sI = Cells(x, 9).Value 'date
        sRes = Cells(x, nCLcol).Value
        Cells(x, 1).Value = Sc 'site
        Cells(x, 2).Value = sF 'depth
        Cells(x, 3).Value = sD 'sampnum
        Cells(x, 4).Value = sE 'id
        Cells(x, 5).Value = sI 'date
        Cells(x, 6).Value = sRes
        Call borderz(x, 2, x, 6)
    Next
    Range(Cells(12, 1), Cells(12, 6)) = Array("Sample Location", "Depth", "Lab No.", "Sample ID", "Sample Date", "Chloride Content as Cl% by mass of dried concrete sample")
    Call borderz(12, 1, 12, 6)
    For C = 7 To nCLcol
        Columns(7).Delete Shift:=xlToLeft
    Next
    
    'insert breaks and remove non-results
    r = 13
    rPrev = r
    sSite = Trim(Cells(r, 1).Value)
    sSiteLast = sSite
    Do While Cells(r, 3).Value > ""
        If Trim(Cells(r, 6).Value) = "" Then
            Rows(r).Delete Shift:=xlUp
            r = r - 1
        End If
        If sSite <> sSiteLast Then
            Rows(r).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
            Call borderzRemove(r, 1, r, 6)
            Call borderz(rPrev, 1, r - 1, 6)
            Range(Cells(rPrev, 1), Cells(r - 1, 1)).Select
            With Selection
                .HorizontalAlignment = xlLeft
                .VerticalAlignment = xlCenter
                .WrapText = True
                .MergeCells = True
            End With
            rPrev = r + 1
        End If
        r = r + 1
        sSiteLast = sSite
        sSite = Trim(Cells(r, 1).Value)
    Loop
    Call borderz(rPrev, 1, r - 1, 6)
    Range(Cells(rPrev, 1), Cells(r - 1, 1)).Select
    With Selection
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlCenter
        .WrapText = True
        .MergeCells = True
    End With
    
    Range("F12").Select
    With Selection
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlBottom
        .WrapText = True
    End With
    Range("A12:F12").Select
    With Selection.Font
        .Name = "Calibri"
        .FontStyle = "Bold"
        .Size = 10
    End With

    Range("A13").Select
    Range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
    With Selection.Font
        .Name = "Calibri"
        .FontStyle = "Regular"
        .Size = 10
    End With
    
    Columns("A:E").EntireColumn.AutoFit
    Columns("F").ColumnWidth = 16
    Range("B:F").HorizontalAlignment = xlCenter
    
    Sheets("Soil").Select
    Range("A1:C5").Copy
    Sheets("Concrete").Select
    Range("A1").Select
    ActiveSheet.Paste
    Cells(2, 1).Value = "Concrete Samples"
    Sheets("Concrete").PageSetup.PrintTitleRows = "$1:$11"
    Sheets("Concrete").PageSetup.PrintTitleColumns = "$A:$C"
    Sheets("Concrete").PageSetup.Orientation = xlLandscape
    lastrow2 = FindLastRow("Concrete")
    lastcol2 = FindLastColumn("Concrete")
    ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(lastrow2, lastcol2)).Address

    Range("A1").Select
    Application.DisplayAlerts = True
End Sub

Sub borderz(r1, c1, r2, c2)
    Range(Cells(r1, c1), Cells(r2, c2)).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With

End Sub

Sub borderzRemove(r1, c1, r2, c2)
    Range(Cells(r1, c1), Cells(r2, c2)).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
End Sub

Sub InvokeTemplateRPS() 'RPS Excel report
    Dim CalledFile, CallingFile
    Dim CalledFilebasename, JobFolder, nResp, JobFile, Currfile
    Dim CalledWkBk As Workbook
    Dim CallingWkBk As Workbook
    Dim fso, f, xx
    
    Sheets("Rawdata").Visible = True
    sJob = Sheets("Rawdata").Cells(7, 1).Value
    Set fso = CreateObject("Scripting.FileSystemObject")
    CallingFile = ThisWorkbook.Name
    Set CallingWkBk = Application.ActiveWorkbook
    On Error GoTo myerror
    'sTemplate = "DETS_RPS_Test.XLTM"
    sTemplate = "DETS_RPS.XLTM"
    'sTemplateDir = "L:\Excel Templates\Macros - Test Versions\"
    sTemplateDir = "L:\DB\Templates\"
    sTemplateFullName = sTemplateDir & sTemplate
    
    If fso.FileExists(sTemplateFullName) Then
        Workbooks.Open Filename:=sTemplateFullName
        CalledFile = ActiveWorkbook.Name
        Set CalledWkBk = Application.ActiveWorkbook
        xx = InStrRev(CalledFile, "\")
        CalledFilebasename = Mid(CalledFile, xx + 1)
        Workbooks(CallingFile).Worksheets("Rawdata").Activate
        Application.DisplayAlerts = False
        Sheets("Rawdata").Select
        Cells.Copy
        Windows(CalledFile).Activate
        Sheets("_rawdata").Select
        Cells(1, 1).Select
        ActiveSheet.Paste
        Cells(1, 1).Select
        Application.DisplayAlerts = True
        sSaveAs = Replace(sJob, ",", "_") & "_RPS"
        Application.Run (ActiveWorkbook.Name & "!RPSMain") 'run the report
        Workbooks(CallingFile).Worksheets("Rawdata").Activate
    Else
        nResp = MsgBox("Cannot find file " & sTemplate, vbOKOnly, "InvokeTemplate")
    End If

    nResp = MsgBox("Save RPS Report (xls)?", vbYesNo, sJob)
    If nResp = vbYes Then
        'sFldr = "L:\db\reports_test\"
        sFldr = "L:\db\reports\"
        sJob8 = left(Trim(sJob), 8)
        If (fso.folderexists(sFldr & sJob8 & "\reports")) Then sFldr = sFldr & sJob8 & "\reports\"
        JobFolder = sFldr & Trim(sSaveAs) & ".XLS"
        JobFile = Application.GetSaveAsFilename(JobFolder, fileFilter:="Excel Workbook (*.xls), *.xls")
        If JobFile <> False Then CalledWkBk.SaveAs Filename:=JobFile, FileFormat:=xlNormal
    End If
    
myerror:
    'If Err.Number <> 0 Then nResp = MsgBox("Error", vbOKOnly, Str(Err.Number))
End Sub

Sub UkWir()
    'If SheetExists("Soil") = False Then Exit Sub
    'If Sheets("Soil").Visible = False Then Exit Sub
    'Call MakeSheet("Soil", "UKWIR", "A")
    If SheetExists("UKWIR") = False Then
        nR = MsgBox("Something when wrong. Are you sure there are soil results?", vbOKOnly, "UKWIR Report")
        Exit Sub
    End If
    Application.DisplayAlerts = False
    Sheets("UKWIR").Select
    ActiveWindow.View = xlNormalView
    lastcol = FindLastColumn("UKWIR")
    nBtexTop = 0
    nPhenTop = 0
    nTicTop = 0

    'loop 1 - copy BTEX VOCs/Phenol SVOCs and certain TICS to bottom of sheet
    r = pTestHeaderRow
    Do While Trim(Cells(r, 1).Value) > ""
        If (left(Cells(r, 1).Value, 3) = "VOC" Or left(Cells(r, 1).Value, 4) = "SVOC") _
        And Trim(Trim(Cells(r, 4).Value) & Trim(Cells(r, 5).Value) & Trim(Cells(r, 6).Value)) = "" Then 'VOC/SVOC section
            nVocTop = r + 1
            rT = nVocTop
            Do Until Trim(Trim(Cells(rT, 4).Value) & Trim(Cells(rT, 5).Value) & Trim(Cells(rT, 6).Value)) = ""
                If (InStr(Cells(rT, 4), "3433") = 0 And Right(Trim(Cells(rT, 1).Value), 5) <> "(TIC)" _
                    And (InStr(Cells(rT, 1).Value, "Benzene") > 0 Or InStr(Cells(rT, 1).Value, "Toluene") > 0 _
                    Or InStr(Cells(rT, 1).Value, "Ethylbenzene") > 0 Or InStr(Cells(rT, 1).Value, "Xylene") > 0 _
                    Or InStr(Cells(rT, 1).Value, "MBTE") > 0)) Then 'BTEX VOCs
                        If nBtexTop = 0 Then
                            nBtexTop = FindLastRow("UKWIR") + 2
                            Cells(nBtexTop - 1, 1).Value = "BTEX"
                            nBtexBot = nBtexTop
                        End If
                        Rows(rT).Select
                        Selection.Copy
                        Rows(nBtexBot).Select
                        ActiveSheet.Paste
                        nBtexBot = nBtexBot + 1
                ElseIf (InStr(Cells(rT, 4), "3433") > 0 And Right(Trim(Cells(rT, 1).Value), 5) <> "(TIC)" And _
                       (InStr(Cells(rT, 1).Value, "Phenol") > 0 Or InStr(Cells(rT, 1).Value, "phenol") > 0)) Then 'Phenol SVOCs
                        If nPhenTop = 0 Then
                            nPhenTop = FindLastRow("UKWIR") + 2
                            Cells(nPhenTop - 1, 1).Value = "PHEN"
                            nPhenBot = nPhenTop
                        End If
                        Rows(rT).Select
                        Selection.Copy
                        Rows(nPhenBot).Select
                        ActiveSheet.Paste
                        nPhenBot = nPhenBot + 1
                        If Trim(Cells(rT, 1).Value) = "Phenol" Then Range(Cells(rT, 1), Cells(rT, 3)).Interior.Color = 65535
                ElseIf Right(Trim(Cells(rT, 1).Value), 5) = "(TIC)" Then    'TICS
                        sDetname = LCase(Trim(Cells(rT, 1).Value))
                        If InStr(sDetname, "ethe") > 0 Or InStr(sDetname, "keton") > 0 _
                        Or InStr(sDetname, "aldehyd") > 0 Or InStr(sDetname, "amin") > 0 Then
                            If InStr(sDetname, "ether") > 0 Or InStr(sDetname, "ketone") > 0 _
                            Or InStr(sDetname, "aldehyde") > 0 Or InStr(sDetname, "amine") > 0 _
                            Or InStr(sDetname, "nitrobenzene") > 0 Then
                                nT = vbYes
                            Else
                                nT = MsgBox(sDetname & Chr(10) & "Is this a an ether/ketone/aldehyde/amine/nitrobenzene?", vbYesNo, "TIC")
                            End If
                            If nT = vbYes Then
                                If nTicTop = 0 Then
                                    nTicTop = FindLastRow("UKWIR") + 2
                                    Cells(nTicTop - 1, 1).Value = "TIC"
                                    nTicBot = nTicTop
                                End If
                                Rows(rT).Select
                                Selection.Copy
                                Rows(nTicBot).Select
                                ActiveSheet.Paste
                                Range(Cells(nTicBot, 1), Cells(nTicBot, 3)).Interior.Color = 65535
                                nTicBot = nTicBot + 1
                            End If
                        End If
                End If
                rT = rT + 1
            Loop
        End If
        r = r + 1
    Loop

    'loop 2 - VOC/SVOC/BTEX/Phenol/TIC totals
    bTICfound = False
    sTitle = "x"
    r = pTestHeaderRow
    Do While Trim(Cells(r, 1).Value) > ""
        'find the header rows
        If (left(Cells(r, 1).Value, 3) = "VOC" Or left(Cells(r, 1).Value, 4) = "SVOC" _
        Or Cells(r, 1).Value = "BTEX" Or Cells(r, 1).Value = "PHEN" Or Cells(r, 1).Value = "TIC") _
        And InStr(Cells(r, 1).Value, "C TIC") = 0 _
        And Trim(Trim(Cells(r, 4).Value) & Trim(Cells(r, 5).Value) & Trim(Cells(r, 6).Value)) = "" Then
            If sTitle = "x" Then
                If left(Cells(r, 1).Value, 1) = "V" And InStr(Cells(r, 1).Value, "TIC") = 0 Then
                    sTitle = "Total VOCs"
                ElseIf left(Cells(r, 1).Value, 1) = "S" Then
                    sTitle = "Total SVOCs"
                ElseIf left(Cells(r, 1).Value, 1) = "B" Then
                    sTitle = "BTEX + MTBE"
                ElseIf left(Cells(r, 1).Value, 1) = "P" Then
                    sTitle = "Cresols and Chlorinated Phenols"
                ElseIf left(Cells(r, 1).Value, 1) = "T" Then
                    sTitle = "TICs (Ethers,Ketones,Aldehydes,Amines,Nitrobenzene)"
                    bTICfound = True
                End If
            End If
            
            nVocTop = r + 1
            rT = nVocTop
            Do Until Trim(Trim(Cells(rT, 4).Value) & Trim(Cells(rT, 5).Value) & Trim(Cells(rT, 6).Value)) = ""
                rT = rT + 1
            Loop
            nVocBot = rT - 1
            
            'convert to numbers
            Application.CutCopyMode = False '21/6/17 added to fix bug caused by Excel 12016 build 1705
            Rows(nVocBot + 1).Select
            Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
            Range(Cells(nVocTop, pFirstSampleCol), Cells(nVocBot + 1, lastcol)).Select
            Selection.NumberFormat = "General"
            With Selection
                Selection.NumberFormat = "General"
                .Value = .Value
            End With
            'For Each xCell In Selection
            '    xCell.Value = CDec(xCell.Value)
            'Next xCell
            'Selection.Copy
            'Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            Application.CutCopyMode = False
            
            For nCol = pFirstSampleCol To lastcol
                Set rRange = Range(Cells(nVocTop, nCol), Cells(nVocBot, nCol)).Find("*", LookIn:=xlValues, LookAt:=xlWhole)
                If Not rRange Is Nothing Then
                    Cells(nVocBot + 1, nCol).Select
                    ActiveCell.FormulaR1C1 = "=SUM(R[-" & nVocBot - nVocTop + 1 & "]C:R[-1]C)"
                End If
            Next
            'Cells(nVocBot + 1, pFirstSampleCol).Select
            'Selection.AutoFill Destination:=Range(Cells(nVocBot + 1, pFirstSampleCol), Cells(nVocBot + 1, lastcol)), Type:=xlFillDefault
            
            Range(Cells(nVocBot + 1, 1), Cells(nVocBot + 1, lastcol)).Select
            Selection.Copy
            Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            ActiveCell.FormulaR1C1 = sTitle
            Range(Cells(nVocBot + 1, 1), Cells(nVocBot + 1, 3)).MergeCells = True
            Range(Cells(nVocBot + 1, 1), Cells(nVocBot + 1, 3)).Interior.Color = 65535
            sTitle = "x"
            Range(Cells(nVocBot, 4), Cells(nVocBot, 6)).Select
            Selection.Copy
            Range(Cells(nVocBot + 1, 4), Cells(nVocBot + 1, 6)).Select
            ActiveSheet.Paste
            sLod = Trim(Cells(nVocBot + 1, 5).Value)
            nLod = Cells(nVocBot + 1, 5).Value
            For cc = pFirstSampleCol To lastcol
                If Cells(nVocBot + 1, cc).Value > "" Then
                    Cells(nVocBot + 1, cc).Value = Round(Cells(nVocBot + 1, cc).Value, 2)
                    If sLod = "" Then
                        If Cells(nVocBot + 1, cc).Value = 0 Then Cells(nVocBot + 1, cc).Value = "nd"
                    Else
                        If Cells(nVocBot + 1, cc).Value < nLod Then Cells(nVocBot + 1, cc).Value = "< " & nLod
                    End If
                End If
            Next
            'Range(Rows(nVocTop - 1), Rows(nVocBot)).Select
            'Selection.Delete Shift:=xlUp
            r = nVocBot
        End If
        r = r + 1
    Loop
    
    'loop 3 - single dets and clean up
    lastrow = FindLastRow("UKWIR")
    r = pTestHeaderRow + 1
    bStop = False
    Do While bStop = False
        If r > lastrow Then bStop = True
        If Cells(r, 1).Interior.Color = 65535 Or Trim(Cells(r, 1).Value) = "Conductivity" _
        Or Trim(Cells(r, 1).Value) = "pH" Or Trim(Cells(r, 1).Value) = "Redox Potential" _
        Or InStr(Cells(r, 1).Value, "EPH (C") > 0 _
        Or Trim(Cells(r, 1).Value) = "" Then
            'If InStr(Cells(r, 1).Value, "(C11-C20)") > 0 Then Cells(r, 1).Value = "Mineral Oil(C11-C20)"
            'If InStr(Cells(r, 1).Value, "(C20-C40)") > 0 Then Cells(r, 1).Value = "Mineral Oil(C20-C40)"
            If InStr(Cells(r, 1).Value, "EPH (C") > 0 Then Cells(r, 1).Value = Replace(Cells(r, 1).Value, "EPH (C", "Mineral Oil(C")
            Cells(r, 1).Interior.Pattern = xlNone
            r = r + 1
        Else
            Rows(r).Select
            Selection.Delete Shift:=xlUp
        End If
    Loop
    
    If bTICfound = False Then
        lastrow = FindLastRow("UKWIR")
        Cells(lastrow + 1, 1).Value = "TICs (Ethers,Ketones,Aldehydes,Amines,Nitrobenzene)"
        Cells(lastrow + 1, 2).Value = 11
        Cells(lastrow + 1, 6).Value = "mg/kg"
        Cells(lastrow + 1, 6).HorizontalAlignment = xlRight
        Range(Cells(lastrow + 1, 1), Cells(lastrow + 1, 3)).ShrinkToFit = True
        nCol = pFirstSampleCol
        Do While Trim(Cells(pTestHeaderRow - 7, nCol).Value) > "" 'loop accross sampnums
            For rw = pTestHeaderRow + 1 To lastrow
                If InStr(Cells(rw, 1).Value, "VOC") > 0 Then
                    If Trim(Cells(rw, nCol).Value) > "" Then
                        Cells(lastrow + 1, nCol).Value = "None"
                        Cells(lastrow + 1, nCol).HorizontalAlignment = xlRight
                        Range(Cells(lastrow + 1, nCol), Cells(lastrow + 1, nCol)).Select
                        With Application.ReplaceFormat.Font
                            .ThemeColor = xlThemeColorLight1
                            .TintAndShade = 0.349986266670736
                        End With
                        Selection.Replace What:="None", Replacement:="", LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
                        Exit For
                    End If
                End If
            Next
            nCol = nCol + 1
        Loop
    End If

    'loop 4 - sort
    r = pTestHeaderRow + 1
    Do While Trim(Cells(r, 1).Value) > ""
        Range(Cells(r, 1), Cells(r, 3)).MergeCells = False
        If InStr(Cells(r, 1).Value, "Condu") > 0 Then
            Cells(r, 2).Value = 1
        ElseIf InStr(Cells(r, 1).Value, "pH") > 0 Then
            Cells(r, 2).Value = 2
        ElseIf InStr(Cells(r, 1).Value, "Redox") > 0 Then
            Cells(r, 2).Value = 3
        'ElseIf InStr(Cells(r, 1).Value, "C11") > 0 Then
        '    Cells(r, 2).Value = 4
        'ElseIf InStr(Cells(r, 1).Value, "C40") > 0 Then
        '    Cells(r, 2).Value = 5
        ElseIf InStr(Cells(r, 1).Value, "Mineral Oil") > 0 Then
            Cells(r, 2).Value = 5
        ElseIf InStr(Cells(r, 1).Value, " VOC") > 0 Then
            Cells(r, 2).Value = 6
        ElseIf InStr(Cells(r, 1).Value, "Phenol") > 0 Then
            Cells(r, 2).Value = 9
        ElseIf InStr(Cells(r, 1).Value, "SVOC") > 0 Then
            Cells(r, 2).Value = 8
        ElseIf InStr(Cells(r, 1).Value, "BTEX") > 0 Then
            Cells(r, 2).Value = 7
        ElseIf InStr(Cells(r, 1).Value, "Cresols") > 0 Then
            Cells(r, 2).Value = 10
        ElseIf InStr(Cells(r, 1).Value, "(TIC") > 0 Then
            Cells(r, 2).Value = 12
        ElseIf InStr(Cells(r, 1).Value, "TIC") > 0 Then
            Cells(r, 2).Value = 11
        End If
        r = r + 1
    Loop
    r = r - 1
    Range(Rows(pTestHeaderRow + 1), Rows(r)).Select
    ActiveWorkbook.Worksheets("UKWIR").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("UKWIR").Sort.SortFields.Add Key:=Range(Cells(pTestHeaderRow + 1, 2), Cells(r, 2)) _
        , SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("UKWIR").Sort
        .SetRange Range(Rows(pTestHeaderRow + 1), Rows(r))
        .Header = xlGuess
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    r = pTestHeaderRow + 1
    Do While Trim(Cells(r, 1).Value) > ""
        Range(Cells(r, 1), Cells(r, 3)).MergeCells = True
        r = r + 1
    Loop
    
    lastrow2 = FindLastRow("UKWIR")
    Call DelCols(lastrow2)
    Call RedoBorders
    nR = MsgBox("Please check UKWIR & Soil tabs before sending to client", vbOKOnly, "UKWir Report Finished")
End Sub

Sub Biffa()
    Dim CalledFile, CallingFile
    Dim CalledFilebasename, JobFolder, nResp, JobFile, Currfile
    Dim CalledWkBk As Workbook
    Dim CallingWkBk As Workbook
    Dim fso, f, xx
    
    Sheets("Rawdata").Visible = True
    sJob = Sheets("Rawdata").Cells(7, 1).Value
    
    sSite = LCase(Trim(Sheets("Rawdata").Cells(6, 2).Value))
    If InStr(sSite, "dew") > 0 And InStr(sSite, "bury") > 0 Then
        sSite = "dewsbury"
    ElseIf InStr(sSite, "barking") > 0 Then
        sSite = "barking"
    ElseIf InStr(sSite, "eversley") > 0 Then
        sSite = "eversley"
    ElseIf InStr(sSite, "nottingham") > 0 Then
        sSite = "nottingham"
    ElseIf InStr(sSite, "helens") > 0 Then
        sSite = "helens"
    ElseIf InStr(sSite, "wembley") > 0 Then
        sSite = "wembley"
    End If
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    CallingFile = ThisWorkbook.Name
    Set CallingWkBk = Application.ActiveWorkbook
    On Error GoTo myerror
    sTemplate = "ResultsHistoryBIFFA.XLTM"
    'sTemplateDir = "L:\Excel Templates\Macros - Test Versions\"
    sTemplateDir = "L:\DB\Templates\"
    sTemplateFullName = sTemplateDir & sTemplate
    
    If fso.FileExists(sTemplateFullName) Then
        Workbooks.Open Filename:=sTemplateFullName
        Cells(3, 6).Value = sSite
        CalledFile = ActiveWorkbook.Name
        Set CalledWkBk = Application.ActiveWorkbook
        xx = InStrRev(CalledFile, "\")
        CalledFilebasename = Mid(CalledFile, xx + 1)
        sSaveAs = Replace(sJob, ",", "_") & "_BIFFA"
        Application.Run (ActiveWorkbook.Name & "!AutorunBiffa") 'run the report
        Workbooks(CallingFile).Worksheets("Rawdata").Activate
    Else
        nResp = MsgBox("Cannot find file " & sTemplate, vbOKOnly, "InvokeTemplate")
    End If

    nResp = MsgBox("Save Biffa Results History Report (xls)?", vbYesNo, sJob)
    If nResp = vbYes Then
        'sFldr = "L:\db\reports_test\"
        sFldr = "L:\db\reports\"
        sJob8 = left(Trim(sJob), 8)
        If (fso.folderexists(sFldr & sJob8 & "\reports")) Then sFldr = sFldr & sJob8 & "\reports\"
        JobFolder = sFldr & Trim(sSaveAs) & ".XLS"
        JobFile = Application.GetSaveAsFilename(JobFolder, fileFilter:="Excel Workbook (*.xls), *.xls")
        If JobFile <> False Then CalledWkBk.SaveAs Filename:=JobFile, FileFormat:=xlNormal
    End If
    
myerror:
    'If Err.Number <> 0 Then nResp = MsgBox("Error", vbOKOnly, Str(Err.Number))
End Sub

Sub StringsToNumbers()
    lastcol = FindLastColumn(ActiveSheet.Name)
    lastrow = FindLastRow(ActiveSheet.Name)
' ***** #This causes problems. It is being removed to see what problems its absence causes ************************
'    Range(Cells(pTestHeaderRow + 1, pFirstSampleCol), Cells(lastrow, lastcol)).Select
'    Selection.NumberFormat = "General"
'    With Selection
'        Selection.NumberFormat = "General"
'        .Value = .Value
'    End With
    Cells(pTestHeaderRow, 1).Select
End Sub

Sub curtinsbreaches(sLimits) 'extra SOM dependent breaches report for CURTINS and MEP
    Dim cnn As ADODB.Connection
    Dim rst As ADODB.Recordset
    
    Call MakeSheet("_B", "Breaches", "B")
    MyConn = SQLDBPath
    Set cnn = New ADODB.Connection
    With cnn
        .Provider = SQLProvider
        .Open MyConn
        .CommandTimeout = 1800
    End With
    nLastRow = 1
        
    'get SOM samples + results
    sSql = "select s.job,s.sampnum,s.sample_id,s.other_id,s.sampdepth,r.det,r.result,iif(r.result<6,'SOM1','SOM6') as message " _
            & "into #s1 from samples s, results r where s.sampnum=r.sampnum and r.det in ('OM-1S','OMMEP-1S') and s.job in ('00-00000') " _
            & "and s.sampstatus<>'WITHDRWN' and s.sampnum=999999; "
    
    sJob = Trim(Sheets("Rawdata").Cells(4, 2).Value)
    sJob = Replace(sJob, " ", "")
    sJob = Replace(sJob, ",", "','")
    sSampnumm = Trim(Sheets("Rawdata").Cells(12, 2).Value)
    If sSampnumm > "" Then
        sSql = Replace(sSql, "and s.job in ('00-00000')", " ")
        If InStr(sSampnumm, ",") = 0 Then
            sSql = Replace(sSql, "999999", sSampnumm)
        Else
            sSql = Replace(sSql, "and s.sampnum=999999", "and s.sampnum in (" & sSampnumm & ")")
        End If
    Else
        sSql = Replace(sSql, "and s.sampnum=999999", "")
        sSql = Replace(sSql, "00-00000", Replace(sJob, ",", "','"))
    End If
    
    If sClient = "" Then sClient = Trim(Sheets("Rawdata").Cells(3, 4).Value)
    
    If sLimits = "" Then
        sLimitsWhere = "l.limits like '" & Trim(sClient) & "%' and "
    Else
        sLimitsWhere = "l.limits like '" & Trim(sLimits) & "%' and "
    End If
    
    If sClient = "CURTINS" Then
        sSql = sSql & "select s.job,s.sampnum,trim(s.sample_id),trim(s.sampdepth),trim(s.other_id),trim(d.repname)" _
                & ",round(r.result,2),l.hispec,l.lospec," _
                & "trim(l.limits)+' '+trim(u.title) as Threshold,s.result as SOMresult,trim(l.message) as SOM1orSOM6 " _
                & "from #s1 s, results r, limits l, dets d, suites u where s.sampnum = r.sampnum and r.det = l.det and " _
                & sLimitsWhere _
                & "l.message=s.message and (r.result<l.lospec or r.result>l.hispec) and r.glthan<>'<' and r.det=d.det and l.limits=u.suite " _
                & "order by l.limits,s.job,s.sampnum,r.det;"
    ElseIf sClient = "MEP" Then
        sSql = sSql & "select s.job,s.sampnum,trim(s.sample_id),trim(s.sampdepth),trim(s.other_id),trim(d.repname)" _
                & ",round(r.result,2),l.hispec,l.lospec," _
                & "trim(l.limits) as Threshold,s.result as SOMresult,trim(l.message) as SOM1orSOM6 " _
                & "from #s1 s, results r, limits l, dets d where s.sampnum = r.sampnum and r.det = l.det and " _
                & sLimitsWhere _
                & "l.message=s.message and (r.result<l.lospec or r.result>l.hispec) and r.glthan<>'<' and r.det=d.det " _
                & "order by l.limits,s.job,s.sampnum,r.det;"
    End If
    
    Sheets("Breaches").Select
    Set rst = New ADODB.Recordset
    rst.CursorLocation = adUseServer
    rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
    Sheets("Breaches").Cells(8, 1).CopyFromRecordset rst
    rst.Close
    cnn.Close
    Set rst = Nothing
    Set cnn = Nothing
    
    Cells(3, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
    Cells(5, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
    Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
    
    If Trim(Cells(8, 1).Value) > "" Then
        firstrow = 7
        lastcol = 12 'FindLastColumn("Breaches")
        lastrow = FindLastRow("Breaches")
        If lastrow > firstrow Then
            Range(Cells(firstrow + 1, 1), Cells(lastrow, lastcol)).Select
            Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
            Selection.Borders(xlEdgeTop).Weight = xlThin
            Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
            Selection.Borders(xlEdgeLeft).Weight = xlThin
            Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
            Selection.Borders(xlEdgeRight).Weight = xlThin
            Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
            Selection.Borders(xlEdgeBottom).Weight = xlThin
            Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
            Selection.Borders(xlInsideVertical).Weight = xlHairline
            Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
            Selection.Borders(xlInsideHorizontal).Weight = xlHairline
            With Selection.Font
                .Name = "Calibri"
                .Size = 8
            End With
            With Selection
                .HorizontalAlignment = xlGeneral
                .VerticalAlignment = xlBottom
            End With
            ActiveWindow.View = xlNormalView
        End If
        With Range("A1")
            .AutoFilter Field:=1, VisibleDropDown:=False
            .AutoFilter Field:=2, VisibleDropDown:=False
            .AutoFilter Field:=3, VisibleDropDown:=False
            .AutoFilter Field:=4, VisibleDropDown:=False
            .AutoFilter Field:=5, VisibleDropDown:=False
            .AutoFilter Field:=6, VisibleDropDown:=False
            .AutoFilter Field:=7, VisibleDropDown:=False
            .AutoFilter Field:=8, VisibleDropDown:=False
            .AutoFilter Field:=9, VisibleDropDown:=False
            .AutoFilter Field:=11, VisibleDropDown:=False
            .AutoFilter Field:=12, VisibleDropDown:=False
       End With
        ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(lastrow, lastcol)).Address
        Cells(7, 1).Select
    Else
        'Application.DisplayAlerts = False
        'Sheets("Breaches").Delete
        'Application.DisplayAlerts = True
        Cells(8, 1).Value = "No Breaches"
    End If
    Sheets("Rawdata").Select
End Sub

Sub MEPhighlights(sLimits) 'for MEP optional run after sub curtinsbreaches
    Dim cnn As ADODB.Connection
    Dim rst As ADODB.Recordset
    
    'SQLDBPath = "C:\Program Files (x86)\AISLIMS\DB"
    'SQLProvider = "Advantage.OLEDB.1;Data Source=C:\Program Files (x86)\AISLIMS\DB;Advantage Server Type=ADS_LOCAL_SERVER;Advantage Table Type=ADS_CDX"
    
    MyConn = SQLDBPath
    Set cnn = New ADODB.Connection
    With cnn
        .Provider = SQLProvider
        .Open MyConn
        .CommandTimeout = 1800
    End With
    
    Sheets("Soil").Select
    'insert new col 7,8
    Application.CutCopyMode = False '21/6/17 added to fix bug caused by Excel 12016 build 1705
    Columns("G:G").Select
    Range("G4").Activate
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    Columns("G:G").Select
    Range("G4").Activate
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    Cells(12, 7).Value = "SOM1"
    Cells(12, 8).Value = "SOM6"
    Cells(13, 7).Value = "Limit"
    Cells(13, 8).Value = "Limit"
    Range("G12:H13").Select
    With Selection
        .HorizontalAlignment = xlCenter
    End With
    
    lastrowS = FindLastRow("Soil")
    lastcolS = FindLastColumn("Soil")
    Range("G6").Select
    
    'list LIMITS in new col 7,8
    If sLimits = "" Then sLimits = "MEP"
    
    sSql = "select distinct r.det into #s1 from samples s, results r where s.sampnum=r.sampnum and s.job in ('00-00000') and s.sampstatus<>'WITHDRWN' and s.sampnum=999999; "
    sJob = Trim(Sheets("Rawdata").Cells(4, 2).Value)
    sJob = Replace(sJob, " ", "")
    sJob = Replace(sJob, ",", "','")
    sSampnumm = Trim(Sheets("Rawdata").Cells(12, 2).Value)
    If sSampnumm > "" Then
        sSql = Replace(sSql, "and s.job in ('00-00000')", " ")
        If InStr(sSampnumm, ",") = 0 Then
            sSql = Replace(sSql, "999999", sSampnumm)
        Else
            sSql = Replace(sSql, "and s.sampnum=999999", "and s.sampnum in (" & sSampnumm & ")")
        End If
    Else
        sSql = Replace(sSql, "and s.sampnum=999999", "")
        sSql = Replace(sSql, "00-00000", Replace(sJob, ",", "','"))
    End If

    sSql = sSql & "select d.repname,d.units,l.hispec,l.message from dets d, limits l, #s1 s where d.det=l.det and d.det=s.det and l.det=s.det and l.limits like '" & sLimits & "%' order by d.detorder;"
    'Sheets("Breaches").Cells(2, 2).Value = sSql
    Set rst = New ADODB.Recordset
    rst.CursorLocation = adUseServer
    rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
    If Not rst.EOF Then
        rst.MoveFirst
        Do
            sRepna = Trim(rst![repname])
            sSom = Trim(rst![Message])
            nHilim = rst![hispec]
            sUnits = Trim(rst![units])
            For rrS = 14 To lastrowS
                If Sheets("Soil").Cells(rrS, 1).Value = sRepna And Sheets("Soil").Cells(rrS, 6).Value = sUnits Then
                    If sSom = "SOM1" Then
                        Cells(rrS, 7).Value = Trim(Cells(rrS, 7).Value & " " & nHilim)
                        Cells(rrS, 7).ShrinkToFit = True
                    Else
                        Cells(rrS, 8).Value = Trim(Cells(rrS, 8).Value & " " & nHilim)
                        Cells(rrS, 8).ShrinkToFit = True
                    End If
                    Exit For
                End If
            Next
            rst.MoveNext
        Loop Until rst.EOF
    End If
    rst.Close

    'green all results for dets in LIMITS
    sSql = "select distinct repname from dets where det in (select distinct det from limits where limits like '" & sLimits & "%') order by detorder;"
    Set rst = New ADODB.Recordset
    rst.CursorLocation = adUseServer
    rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
    If Not rst.EOF Then
        rst.MoveFirst
        Do
            sRepna = Trim(rst![repname])
            For rrS = 14 To lastrowS
                If Sheets("Soil").Cells(rrS, 1).Value = sRepna Then
                    Range(Cells(rrS, 9), Cells(rrS, lastcolS)).Interior.ColorIndex = 4 'green .Color = 5296274
                    'Range(Cells(rrS, 9), Cells(rrS, lastcolS)).Font.ColorIndex = 4
                    Exit For
                End If
            Next
            rst.MoveNext
        Loop Until rst.EOF
    End If
    rst.Close
    cnn.Close
    Set MyConn = Nothing

    'change any breaches from green to red
    Sheets("Breaches").Select
    lastrow = FindLastRow("Breaches")
    If lastrow < 8 Then Exit Sub
    
    For rr = 8 To lastrow
        sRepna = Cells(rr, 6).Value
        nSamp = CStr(Cells(rr, 2).Value)
        For ccS = 9 To lastcolS
            If Sheets("Soil").Cells(6, ccS).Value = nSamp Then
                For rrS = 14 To lastrowS
                    If Sheets("Soil").Cells(rrS, 1).Value = sRepna Then
                        Sheets("Soil").Cells(rrS, ccS).Interior.ColorIndex = 3 'red
                        'Sheets("Soil").Cells(rrS, ccS).Font.ColorIndex = 3
                        Exit For
                    End If
                Next
                Exit For
            End If
        Next
    Next
    Sheets("Soil").Select
    Call RedoBorders(True)
    'Range("G6:H12").Select
    'Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    'Selection.Borders(xlEdgeTop).LineStyle = xlNone
    'Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    'With Selection.Borders(xlEdgeRight)
    '    .LineStyle = xlContinuous
    '    .ColorIndex = xlAutomatic
    '    .TintAndShade = 0
    '    .Weight = xlThin
    'End With
    'Selection.Borders(xlInsideVertical).LineStyle = xlNone
    'Selection.Borders(xlInsideHorizontal).LineStyle = xlNone

End Sub

Sub CeltestMixWater()
    If SheetExists("Water") = False Then Exit Sub
    If Sheets("Water").Visible = False Then Exit Sub
    'nR = MsgBox("Run custom Mixing Water report?", vbYesNo, "CELTEST")
    'If nR = vbNo Then Exit Sub
    Application.DisplayAlerts = False
    
    Sheets("_MW").Visible = True
    Sheets("Water").Select
    lastcol = FindLastColumn("Water")
    lastrow = FindLastRow("Water")
    
    For cc = lastcol To pFirstSampleCol Step -1
        Sheets("Water").Select
        sSamp = Cells(6, cc).Value
        Call MakeSheet("_MW", sSamp, "A")
        Sheets("Water").Select
        Range(Cells(6, cc), Cells(12, cc)).Select
        Selection.Copy
        Sheets(sSamp).Select
        Range(Cells(pTestHeaderRow - 7, pFirstSampleCol), Cells(pTestHeaderRow - 1, pFirstSampleCol)).Select
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        Cells(3, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
        Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
        Cells(5, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
        Cells(pTestHeaderRow, 1).Select
        For rr = 15 To 38
            sDetNa = Trim(Cells(rr, pFirstSampleCol).Value) 'col 7
            If sDetNa > "" Then
                For rrr = pTestHeaderRow + 1 To lastrow
                    If InStr(Sheets("Water").Cells(rrr, 1).Value, sDetNa) > 0 Then
                        Cells(rr, 5).Value = Sheets("Water").Cells(rrr, 4).Value 'detref
                        Cells(rr, pFirstSampleCol).Value = Sheets("Water").Cells(rrr, cc).Value 'result
                        Exit For
                    Else
                        Cells(rr, pFirstSampleCol).Value = ""
                    End If
                Next
            End If
        Next
        Call FooterKey(41, 9, 5)
    Next
    Sheets("_MW").Visible = False
    Sheets("Water").Select
    Application.CutCopyMode = False
    Cells(pTestHeaderRow, 1).Select
    nR = MsgBox("Please check and complete the Sampnum tab(s) before sending to client", vbOKOnly, "Mixing Water Report(s) Finished")
End Sub

Sub coopersbreaches() 'extra report
    Dim cnn As ADODB.Connection
    Dim rst As ADODB.Recordset
    
    Call MakeSheet("_B", "Breaches", "B")
    MyConn = SQLDBPath
    Set cnn = New ADODB.Connection
    With cnn
        .Provider = SQLProvider
        .Open MyConn
        .CommandTimeout = 1800
    End With
    nLastRow = 1
        
    sSql = "select s.job,s.sampnum,trim(s.sample_id),trim(s.sampdepth),trim(s.other_id),trim(d.repname)" _
            & ",r.result,l.hispec,l.lospec,trim(l.message) " _
            & "from samples s, results r, limits l, dets d where s.sampnum = r.sampnum and r.det = l.det and " _
            & "l.limits like 'COOP%' and (r.result<l.lospec or r.result>l.hispec) and r.det=d.det " _
            & "and s.job in ('00-00000') and s.sampstatus<>'WITHDRWN' and s.sampnum=999999 " _
            & "order by s.job,s.sampnum,r.det,l.limits;"
    
    sJob = Trim(Sheets("Rawdata").Cells(4, 2).Value)
    sJob = Replace(sJob, " ", "")
    sJob = Replace(sJob, ",", "','")
    sSampnumm = Trim(Sheets("Rawdata").Cells(12, 2).Value)
    If sSampnumm > "" Then
        sSql = Replace(sSql, "and s.job in ('00-00000')", " ")
        If InStr(sSampnumm, ",") = 0 Then
            sSql = Replace(sSql, "999999", sSampnumm)
        Else
            sSql = Replace(sSql, "and s.sampnum=999999", "and s.sampnum in (" & sSampnumm & ")")
        End If
    Else
        sSql = Replace(sSql, "and s.sampnum=999999", "")
        sSql = Replace(sSql, "00-00000", Replace(sJob, ",", "','"))
    End If
    
    
    Sheets("Breaches").Select
    Set rst = New ADODB.Recordset
    rst.CursorLocation = adUseServer
    rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
    Sheets("Breaches").Cells(8, 1).CopyFromRecordset rst
    rst.Close
    cnn.Close
    Set rst = Nothing
    Set cnn = Nothing
    
    Cells(3, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
    Cells(5, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
    Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
    Cells(7, 11).Value = ""
    Cells(7, 12).Value = ""
    
    If Trim(Cells(8, 1).Value) > "" Then
        firstrow = 7
        lastcol = 12 'FindLastColumn("Breaches")
        lastrow = FindLastRow("Breaches")
        If lastrow > firstrow Then
            Range(Cells(firstrow + 1, 1), Cells(lastrow, lastcol)).Select
            Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
            Selection.Borders(xlEdgeTop).Weight = xlThin
            Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
            Selection.Borders(xlEdgeLeft).Weight = xlThin
            Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
            Selection.Borders(xlEdgeRight).Weight = xlThin
            Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
            Selection.Borders(xlEdgeBottom).Weight = xlThin
            Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
            Selection.Borders(xlInsideVertical).Weight = xlHairline
            Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
            Selection.Borders(xlInsideHorizontal).Weight = xlHairline
            With Selection.Font
                .Name = "Calibri"
                .Size = 8
            End With
            With Selection
                .HorizontalAlignment = xlGeneral
                .VerticalAlignment = xlBottom
            End With
            ActiveWindow.View = xlNormalView
        End If
        With Range("A1")
            .AutoFilter Field:=1, VisibleDropDown:=False
            .AutoFilter Field:=2, VisibleDropDown:=False
            .AutoFilter Field:=3, VisibleDropDown:=False
            .AutoFilter Field:=4, VisibleDropDown:=False
            .AutoFilter Field:=5, VisibleDropDown:=False
            .AutoFilter Field:=6, VisibleDropDown:=False
            .AutoFilter Field:=7, VisibleDropDown:=False
            .AutoFilter Field:=8, VisibleDropDown:=False
            .AutoFilter Field:=9, VisibleDropDown:=False
            .AutoFilter Field:=11, VisibleDropDown:=False
            .AutoFilter Field:=12, VisibleDropDown:=False
       End With
        ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(lastrow, lastcol)).Address
        Cells(7, 1).Select
    Else
        'Application.DisplayAlerts = False
        'Sheets("Breaches").Delete
        'Application.DisplayAlerts = True
        Cells(8, 1).Value = "No Breaches"
    End If
    Sheets("Rawdata").Select
End Sub

Sub Topsoil() 'triggered by sSuite = "BS3882" in _DETSReporter
    If SheetExists("Soil") = False Then Exit Sub
    If Sheets("Soil").Visible = False Then Exit Sub
    'nR = MsgBox("Run custom Topsoil report?", vbYesNo, "Topsoil")
    'If nR = vbNo Then Exit Sub
    Application.DisplayAlerts = False
    
    Call MakeSheet("_TV", "Threshold Values", "A")
    Sheets("_TS").Visible = True
    Sheets("Soil").Select
    lastcol = FindLastColumn("Soil")
    lastrow = FindLastRow("Soil")
    
    For cc = lastcol To pFirstSampleCol Step -1
        bSOILD = True
        Sheets("Soil").Select
        'get SOILD result
        nSOILD = "SOILD not found"
        For rrr = pTestHeaderRow To lastrow
            If Cells(rrr, 1).Value = "Soil Density" Then
                nSOILD = Trim(Cells(rrr, cc).Value)
                If nSOILD = "" Then bSOILD = False
                If left(nSOILD, 1) = "<" Then nSOILD = 0
                Exit For
            End If
        Next
        If bSOILD = True Then
            sSamp = Cells(6, cc).Value
            Call MakeSheet("_TS", sSamp, "A")
            Sheets("Soil").Select
            Range(Cells(6, cc), Cells(12, cc)).Select
            Selection.Copy
            Sheets(sSamp).Select
            Columns("N:Q").Select
            Selection.EntireColumn.Hidden = True
            Range("A3").Select
            Range(Cells(pTestHeaderRow - 7, pFirstSampleCol), Cells(pTestHeaderRow - 1, pFirstSampleCol)).Select
            Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            Cells(3, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
            Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
            Cells(5, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
            Cells(pTestHeaderRow, 1).Select
            For rr = 21 To 43
                If rr = 34 Then 'skip formula
                    sDetNa = ""
                Else
                    sDetNa = Trim(Cells(rr, pFirstSampleCol).Value) 'col 7
                End If
                If sDetNa > "" Then
                    For rrr = pTestHeaderRow + 1 To lastrow
                        If InStr(Sheets("Soil").Cells(rrr, 1).Value, sDetNa) > 0 Then
                            Cells(rr, 5).Value = Sheets("Soil").Cells(rrr, 4).Value 'detref
                            Cells(rr, pFirstSampleCol).Value = Trim(Sheets("Soil").Cells(rrr, cc).Value) 'result (convert to number)
                            If left(Cells(rr, pFirstSampleCol).Value, 1) = "<" Then Cells(rr, pFirstSampleCol).Value = 0
                            If rr = 21 And Cells(rr, pFirstSampleCol).Value >= 20 Then Cells(rr, pFirstSampleCol).Value = ""
                            If rr = 22 And Cells(rr, pFirstSampleCol).Value < 20 Then Cells(rr, pFirstSampleCol).Value = ""
                            If (rr > 30 And rr < 34) Or (rr > 36 And rr < 40) Then
                                If nSOILD = "SOILD not found" Then
                                    Cells(rr, pFirstSampleCol).Value = nSOILD
                                Else
                                    Cells(rr, pFirstSampleCol).Value = Round(Cells(rr, pFirstSampleCol).Value, 1) 'Round(Cells(rr, pFirstSampleCol).Value * nSOILD, 1)
                                End If
                            End If
                            If rr = 42 Then Cells(rr - 1, pFirstSampleCol).Value = Cells(rr, pFirstSampleCol).Value + Cells(rr - 1, pFirstSampleCol).Value
                            Exit For
                        Else
                            If rr <> 34 Then Cells(rr, pFirstSampleCol).Value = ""
                        End If
                    Next
                End If
            Next
            Call FooterKey(41, 9, 5)
            'graph
            Call MakeSheet2("_TC", sSamp & "_TC", "A", sSamp)
            Sheets(sSamp & "_TC").Select
            Cells(2, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
            Cells(3, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
            Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
            
            Cells(8, 1).FormulaR1C1 = "=" & sSamp & "!R[8]C[6]" 'clay
            Cells(8, 2).FormulaR1C1 = "=" & sSamp & "!R[9]C[5]" 'silt
            Cells(8, 3).FormulaR1C1 = "=" & sSamp & "!R[10]C[4]" 'sand
        End If
    Next
    Sheets("_TS").Visible = False
    Sheets("Soil").Select
    Application.CutCopyMode = False
    Cells(pTestHeaderRow, 1).Select
    nR = MsgBox("Please check and complete the Sampnum tab(s) before sending to client", vbOKOnly, "Topsoil Report(s) Finished")
End Sub

Sub Subsoil()
    If SheetExists("Soil") = False Then Exit Sub
    If Sheets("Soil").Visible = False Then Exit Sub
    'nR = MsgBox("Run custom Subsoil report?", vbYesNo, "Subsoil")
    'If nR = vbNo Then Exit Sub
    Application.DisplayAlerts = False
    
    Call MakeSheet("_SV", "Threshold Values", "A")
    Sheets("_SS").Visible = xlSheetVisible
    Sheets("Soil").Select
    lastcol = FindLastColumn("Soil")
    lastrow = FindLastRow("Soil")
    
    For cc = lastcol To pFirstSampleCol Step -1
        bSOILD = True
        Sheets("Soil").Select
        'get SOILD result
        nSOILD = "SOILD not found"
        For rrr = pTestHeaderRow To lastrow
            If Cells(rrr, 1).Value = "Soil Density" Then
                nSOILD = Trim(Cells(rrr, cc).Value)
                If nSOILD = "" Then bSOILD = False
                If left(nSOILD, 1) = "<" Then nSOILD = 0
                Exit For
            End If
        Next
        If bSOILD = True Then
            sSamp = Cells(6, cc).Value
            Call MakeSheet("_SS", sSamp, "A")
            Sheets("Soil").Select
            Range(Cells(6, cc), Cells(12, cc)).Select
            Selection.Copy
            Sheets(sSamp).Select
            Columns("N:Q").Select
            Selection.EntireColumn.Hidden = True
            'Range("A3").Select
            Range(Cells(pTestHeaderRow - 7, pFirstSampleCol), Cells(pTestHeaderRow - 1, pFirstSampleCol)).Select
            Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            Cells(3, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
            Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
            Cells(5, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
            Cells(pTestHeaderRow, 1).Select
            For rr = 21 To 43
                sDetNa = Trim(Cells(rr, pFirstSampleCol).Value) 'col 7
                If sDetNa > "" Then
                    For rrr = pTestHeaderRow + 1 To lastrow
                        If InStr(Sheets("Soil").Cells(rrr, 1).Value, sDetNa) > 0 Then
                            Cells(rr, 5).Value = Sheets("Soil").Cells(rrr, 4).Value 'detref
                            Cells(rr, pFirstSampleCol).Value = Trim(Sheets("Soil").Cells(rrr, cc).Value) 'result (convert to number)
                            If left(Cells(rr, pFirstSampleCol).Value, 1) = "<" Then Cells(rr, pFirstSampleCol).Value = 0
                            If rr > 29 And rr < 33 Then
                                If nSOILD = "not found" Then
                                    Cells(rr, pFirstSampleCol).Value = nSOILD
                                Else
                                    Cells(rr, pFirstSampleCol).Value = Round(Cells(rr, pFirstSampleCol).Value * nSOILD, 1)
                                End If
                            ElseIf rr = 35 Then
                                Cells(rr - 1, pFirstSampleCol).Value = Cells(rr, pFirstSampleCol).Value + Cells(rr - 1, pFirstSampleCol).Value
                            ElseIf rr = 27 Then
                                Cells(rr, pFirstSampleCol).Value = Round(Cells(rr, pFirstSampleCol).Value / 10000, 1) 'NA-EX3S / 10000
                            End If
                            Exit For
                        Else
                            Cells(rr, pFirstSampleCol).Value = ""
                        End If
                    Next
                End If
            Next
            Call FooterKey(41, 9, 5)
            'graph
            Call MakeSheet2("_TC", sSamp & "_TC", "A", sSamp)
            Sheets(sSamp & "_TC").Select
            Cells(1, 1).Value = "BS 8601:2013: Textural Class"
            Cells(44, 1).Value = Replace(Cells(44, 1).Value, "BS3882:2015", "BS8601:2013")
            Cells(2, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
            Cells(3, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
            Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
            
            Cells(8, 1).FormulaR1C1 = "=" & sSamp & "!R[8]C[6]" 'clay
            Cells(8, 2).FormulaR1C1 = "=" & sSamp & "!R[9]C[5]" 'silt
            Cells(8, 3).FormulaR1C1 = "=" & sSamp & "!R[10]C[4]" 'sand
        End If
    Next
    Sheets("_SS").Visible = xlSheetHidden
    Sheets("Soil").Select
    Application.CutCopyMode = False
    Cells(pTestHeaderRow, 1).Select
    nR = MsgBox("Please check and complete the Sampnum tab(s) before sending to client", vbOKOnly, "Subsoil Report(s) Finished")
End Sub

Sub RedLimits() 'shade underlined cells red
    Application.FindFormat.Clear
    Application.ReplaceFormat.Clear
    With Application.FindFormat.Font
        .Subscript = False
        .Underline = xlUnderlineStyleSingle
        .TintAndShade = 0
    End With
    With Application.ReplaceFormat.Interior
        .PatternColorIndex = xlAutomatic
        .Color = 255
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    Cells.Replace What:="", Replacement:="", LookAt:=xlPart, SearchOrder:= _
        xlByRows, MatchCase:=False, SearchFormat:=True, ReplaceFormat:=True
    Application.FindFormat.Clear
    Application.ReplaceFormat.Clear
End Sub

Sub Patrickbreaches(sLimits) 'extra SOM dependent breaches report for PATRICK - based on sub curtinsbreaches
    Dim cnn As ADODB.Connection
    Dim rst As ADODB.Recordset
    
    Call MakeSheet("_B", "Breaches", "B")
    MyConn = SQLDBPath
    Set cnn = New ADODB.Connection
    With cnn
        .Provider = SQLProvider
        .Open MyConn
        .CommandTimeout = 1800
    End With
    nLastRow = 1
        
    'get SOM samples + avg results
    sSql = "select r.det as det, avg(r.result) as somresult into #s0 " _
            & "from samples s, results r where s.sampnum=r.sampnum and r.det='OM-1iS' and s.job in ('00-00000') " _
            & "and s.sampstatus<>'WITHDRWN' and s.sampnum=999999 group by 1; " _
            & "select s.job,s.sampnum,s.sample_id,s.other_id,s.sampdepth,r.det,r.result,a.somresult as somavg, " _
            & "iif(a.somresult<=1.75,'SOM1',iif(a.somresult<=4.25,'SOM2.5','SOM6')) as message into #s1 " _
            & "from samples s, results r, #s0 a where s.sampnum=r.sampnum and r.det=a.det and s.job in ('00-00000') " _
            & "and s.sampstatus<>'WITHDRWN' and s.sampnum=999999; "
    
    sJob = Trim(Sheets("Rawdata").Cells(4, 2).Value)
    sJob = Replace(sJob, " ", "")
    sJob = Replace(sJob, ",", "','")
    sSampnumm = Trim(Sheets("Rawdata").Cells(12, 2).Value)
    If sSampnumm > "" Then
        sSql = Replace(sSql, "and s.job in ('00-00000')", " ")
        If InStr(sSampnumm, ",") = 0 Then
            sSql = Replace(sSql, "999999", sSampnumm)
        Else
            sSql = Replace(sSql, "and s.sampnum=999999", "and s.sampnum in (" & sSampnumm & ")")
        End If
    Else
        sSql = Replace(sSql, "and s.sampnum=999999", "")
        sSql = Replace(sSql, "00-00000", Replace(sJob, ",", "','"))
    End If
        
    sLimitsWhere = "l.limits like '" & Trim(sLimits) & " %' and "
    
    sSql = sSql & "select s.job,s.sampnum,trim(s.sample_id),trim(s.sampdepth),trim(s.other_id),trim(d.repname)" _
            & ",round(r.result,2),l.hispec,l.lospec," _
            & "trim(l.limits) as Threshold,s.somavg as SOMresult,trim(l.message) as SOM1orSOM6 " _
            & "from #s1 s, results r, limits l, dets d where s.sampnum = r.sampnum and r.det = l.det and " _
            & sLimitsWhere _
            & "l.message=s.message and (r.result<l.lospec or r.result>l.hispec) and r.glthan<>'<' and r.det=d.det " _
            & "order by l.limits,s.job,s.sampnum,r.det;"
    
    Sheets("Breaches").Select
    Set rst = New ADODB.Recordset
    rst.CursorLocation = adUseServer
    rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
    Sheets("Breaches").Cells(8, 1).CopyFromRecordset rst
    rst.Close
    cnn.Close
    Set rst = Nothing
    Set cnn = Nothing
    
    Cells(3, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
    Cells(5, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
    Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
    Cells(7, 11).Value = "SOM Avg"
    Cells(7, 12).Value = "SOM Level"
    
    If Trim(Cells(8, 1).Value) > "" Then
        firstrow = 7
        lastcol = 12 'FindLastColumn("Breaches")
        lastrow = FindLastRow("Breaches")
        If lastrow > firstrow Then
            Range(Cells(firstrow + 1, 1), Cells(lastrow, lastcol)).Select
            Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
            Selection.Borders(xlEdgeTop).Weight = xlThin
            Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
            Selection.Borders(xlEdgeLeft).Weight = xlThin
            Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
            Selection.Borders(xlEdgeRight).Weight = xlThin
            Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
            Selection.Borders(xlEdgeBottom).Weight = xlThin
            Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
            Selection.Borders(xlInsideVertical).Weight = xlHairline
            Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
            Selection.Borders(xlInsideHorizontal).Weight = xlHairline
            With Selection.Font
                .Name = "Calibri"
                .Size = 8
            End With
            With Selection
                .HorizontalAlignment = xlGeneral
                .VerticalAlignment = xlBottom
            End With
            ActiveWindow.View = xlNormalView
        End If
        With Range("A1")
            .AutoFilter Field:=1, VisibleDropDown:=False
            .AutoFilter Field:=2, VisibleDropDown:=False
            .AutoFilter Field:=3, VisibleDropDown:=False
            .AutoFilter Field:=4, VisibleDropDown:=False
            .AutoFilter Field:=5, VisibleDropDown:=False
            .AutoFilter Field:=6, VisibleDropDown:=False
            .AutoFilter Field:=7, VisibleDropDown:=False
            .AutoFilter Field:=8, VisibleDropDown:=False
            .AutoFilter Field:=9, VisibleDropDown:=False
            .AutoFilter Field:=11, VisibleDropDown:=False
            .AutoFilter Field:=12, VisibleDropDown:=False
       End With
        ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(lastrow, lastcol)).Address
        Cells(7, 1).Select
        sSomLevel = Trim(Cells(8, 12).Value)
    Else
        'Application.DisplayAlerts = False
        'Sheets("Breaches").Delete
        'Application.DisplayAlerts = True
        Cells(8, 1).Value = "No Breaches"
    End If
    Call Patrickhighlights(sLimits, sSomLevel)
    'Sheets("Rawdata").Select
End Sub

Sub Patrickhighlights(sLimits, sSomLevel)
    Dim cnn As ADODB.Connection
    Dim rst As ADODB.Recordset
    
    MyConn = SQLDBPath
    Set cnn = New ADODB.Connection
    With cnn
        .Provider = SQLProvider
        .Open MyConn
        .CommandTimeout = 1800
    End With
    
    Sheets("Soil").Select
    'insert new col 7
    Columns("G:G").Select
    Range("G4").Activate
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    Cells(12, 7).Value = sSomLevel
    Cells(13, 7).Value = "Limit"
    Range("G12:G13").Select
    With Selection
        .HorizontalAlignment = xlCenter
    End With
    
    lastrowS = FindLastRow("Soil")
    lastcolS = FindLastColumn("Soil")
    Range("G6").Select
    
    'list LIMITS in new col 7
    sSql = "select distinct r.det into #s1 from samples s, results r where s.sampnum=r.sampnum and s.job in ('00-00000') and s.sampstatus<>'WITHDRWN' and s.sampnum=999999; "
    sJob = Trim(Sheets("Rawdata").Cells(4, 2).Value)
    sJob = Replace(sJob, " ", "")
    sJob = Replace(sJob, ",", "','")
    sSampnumm = Trim(Sheets("Rawdata").Cells(12, 2).Value)
    If sSampnumm > "" Then
        sSql = Replace(sSql, "and s.job in ('00-00000')", " ")
        If InStr(sSampnumm, ",") = 0 Then
            sSql = Replace(sSql, "999999", sSampnumm)
        Else
            sSql = Replace(sSql, "and s.sampnum=999999", "and s.sampnum in (" & sSampnumm & ")")
        End If
    Else
        sSql = Replace(sSql, "and s.sampnum=999999", "")
        sSql = Replace(sSql, "00-00000", Replace(sJob, ",", "','"))
    End If

    sSql = sSql & "select d.repname,d.units,l.hispec,l.message from dets d, limits l, #s1 s where d.det=l.det and d.det=s.det and l.det=s.det and l.limits like '" & sLimits & " %' and message='" & sSomLevel & "' order by d.detorder;"
    'Sheets("Breaches").Cells(2, 2).Value = sSql
    Set rst = New ADODB.Recordset
    rst.CursorLocation = adUseServer
    rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
    If Not rst.EOF Then
        rst.MoveFirst
        Do
            sRepna = Trim(rst![repname])
            sSom = Trim(rst![Message])
            nHilim = rst![hispec]
            sUnits = Trim(rst![units])
            For rrS = 14 To lastrowS
                If Sheets("Soil").Cells(rrS, 1).Value = sRepna And Sheets("Soil").Cells(rrS, 6).Value = sUnits Then
                    Cells(rrS, 7).Value = Trim(Cells(rrS, 7).Value & " " & nHilim)
                    Cells(rrS, 7).ShrinkToFit = True
                    Exit For
                End If
            Next
            rst.MoveNext
        Loop Until rst.EOF
    End If
    rst.Close

    'green all results for dets in LIMITS
    sSql = "select distinct repname from dets where det in (select distinct det from limits where limits like '" & sLimits & "%') order by detorder;"
    Set rst = New ADODB.Recordset
    rst.CursorLocation = adUseServer
    rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
    If Not rst.EOF Then
        rst.MoveFirst
        Do
            sRepna = Trim(rst![repname])
            For rrS = 14 To lastrowS
                If Sheets("Soil").Cells(rrS, 1).Value = sRepna Then
                    Range(Cells(rrS, 8), Cells(rrS, lastcolS)).Interior.ColorIndex = 4 'green .Color = 5296274
                    'Range(Cells(rrS, 8), Cells(rrS, lastcolS)).Font.ColorIndex = 4
                    Exit For
                End If
            Next
            rst.MoveNext
        Loop Until rst.EOF
    End If
    rst.Close
    cnn.Close
    Set MyConn = Nothing

    'change any breaches from green to red
    Sheets("Breaches").Select
    lastrow = FindLastRow("Breaches")
    If lastrow < 8 Then Exit Sub
    
    For rr = 8 To lastrow
        sRepna = Cells(rr, 6).Value
        nSamp = CStr(Cells(rr, 2).Value)
        For ccS = 8 To lastcolS
            If Sheets("Soil").Cells(6, ccS).Value = nSamp Then
                For rrS = 14 To lastrowS
                    If Sheets("Soil").Cells(rrS, 1).Value = sRepna Then
                        Sheets("Soil").Cells(rrS, ccS).Interior.ColorIndex = 3 'red
                        'Sheets("Soil").Cells(rrS, ccS).Font.ColorIndex = 3
                        Exit For
                    End If
                Next
                Exit For
            End If
        Next
    Next
    Sheets("Soil").Select
    Call RedoBorders(True)
End Sub

Sub PAHDP() 'double plot
    Dim x As Range
    Dim xpos, ccounter, ccol, rrow, nCollection, ffound As Integer
    Dim dResult As Double
    Dim sResult, sSampnum, sSampleId, sDet, sDetname As String
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    Sheets("_DPData").Visible = True
    Sheets("_DPData").Select
    Columns("D:M").Select
    Selection.ClearContents
    Range("D1").Select
    
    Call MakeSheet2("_PAHDP", "PAH Double Ratio Plot", "B", "Comments")
    Sheets("PAH Double Ratio Plot").Select
    Cells(3, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
    Cells(5, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
    Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
    nCollection = 0
    ccounter = 3 'row on data page
    ccol = pRDFirstDataCol 'first data col 19
    rrow = pRDTestHeaderRow + 1 'first data row 28
    ffound = 0
    
    Sheets("Rawdata").Visible = True
    Sheets("Rawdata").Select
    sSampnum = Trim(Cells(21, ccol).Value)
    sSampleId = Trim(Cells(22, ccol).Value) & Trim(Cells(24, ccol).Value) & Trim(Cells(23, ccol).Value)
    sDet = Trim(Cells(rrow, 3).Value)
    sDetname = Trim(Cells(rrow, 1).Value)
    sTest = Trim(Cells(rrow, 17).Value)
    sType = left(Cells(rrow, 6).Value, 1)
    
    While sSampnum > ""
        While sDet > ""
            If Right(sDet, 1) = "S" And _
            (left(sDet, 5) = "FANTH" Or left(sDet, 4) = "PYRE" Or left(sDet, 5) = "BENAA" Or left(sDet, 5) = "CHRYS") Then
            'If InStr(sTest, "PAH") > 0 And sType = "S" And (sDetname = "Fluoranthene" Or sDetname = "Pyrene" Or _
            'sDetname = "Benzo(a)anthracene" Or sDetname = "Chrysene") Then
                sResult = Trim(Cells(rrow, ccol).Value)
                If InStr("t/f---M/SI/SU/SS/C", sResult) = 0 And sResult > "" Then
                    dResult = Val(sResult)
                    If left(sDet, 5) = "FANTH" Then 'sDetname = "Fluoranthene" Then
                        Sheets("_DPData").Cells(ccounter, 6) = sDetname
                        Sheets("_DPData").Cells(ccounter, 7) = dResult
                        ffound = ffound + 1
                    ElseIf left(sDet, 4) = "PYRE" Then 'sDetname = "Pyrene" Then
                        Sheets("_DPData").Cells(ccounter, 8) = sDetname
                        Sheets("_DPData").Cells(ccounter, 9) = dResult
                        ffound = ffound + 1
                    ElseIf left(sDet, 5) = "BENAA" Then 'sDetname = "Benzo(a)anthracene" Then
                        Sheets("_DPData").Cells(ccounter, 10) = sDetname
                        Sheets("_DPData").Cells(ccounter, 11) = dResult
                        ffound = ffound + 1
                    ElseIf left(sDet, 5) = "CHRYS" Then 'sDetname = "Chrysene" Then
                        Sheets("_DPData").Cells(ccounter, 12) = sDetname
                        Sheets("_DPData").Cells(ccounter, 13) = dResult
                        ffound = ffound + 1
                    End If
                        
                    If ffound = 4 Then
                        ffound = 0
                        Sheets("_DPData").Cells(ccounter, 4) = sSampnum
                        Sheets("_DPData").Cells(ccounter, 5) = sSampleId
                        Sheets("PAH Double Ratio Plot").Select
                        ActiveSheet.ChartObjects("Chart 1").Activate
                        ActiveChart.ChartArea.Select
                        nCollection = nCollection + 1
                        'an odd excel bug requires 2 series to be present in the template else the series label will be wrong for single sample charts.
                        If nCollection > 2 Then
                            ActiveChart.SeriesCollection.NewSeries
                        End If
                        ActiveChart.SeriesCollection(nCollection).Name = "='_DPData'!R" & ccounter & "C3:R" & ccounter & "C3"
                        ActiveChart.SeriesCollection(nCollection).XValues = "='_DPData'!R" & ccounter & "C1:R" & ccounter & "C1"
                        ActiveChart.SeriesCollection(nCollection).Values = "='_DPData'!R" & ccounter & "C2:R" & ccounter & "C2"
                        
                        ActiveChart.SeriesCollection(nCollection).Select
                        With Selection.Border
                            .Weight = xlThin
                            .LineStyle = xlNone
                        End With
                        With Selection
                            .MarkerBackgroundColorIndex = xlAutomatic
                            .MarkerForegroundColorIndex = xlAutomatic
                            .MarkerStyle = xlAutomatic
                            .Smooth = True
                            .MarkerSize = 8
                            .Shadow = False
                        End With
                        
                        Range("A1:A1").Select
                        Sheets("Rawdata").Select
                        ccounter = ccounter + 1
                    End If
                End If
            End If
            rrow = rrow + 1
            sDet = Trim(Cells(rrow, 3).Value)
            sDetname = Trim(Cells(rrow, 1).Value)
            sTest = Trim(Cells(rrow, 17).Value)
            sType = left(Cells(rrow, 6).Value, 1)
        Wend
        rrow = 28
        ccol = ccol + 1
        sSampnum = Trim(Cells(21, ccol).Value)
        sSampleId = Trim(Cells(22, ccol).Value) & Trim(Cells(24, ccol).Value) & Trim(Cells(23, ccol).Value)
        sDet = Trim(Cells(rrow, 3).Value)
        sDetname = Trim(Cells(rrow, 1).Value)
        sTest = Trim(Cells(rrow, 17).Value)
        sType = left(Cells(rrow, 6).Value, 1)
        ffound = 0
    Wend
    
    Sheets("PAH Double Ratio Plot").Select
    ActiveSheet.ChartObjects("Chart 1").Activate
    If nCollection = 1 Then ActiveChart.Legend.LegendEntries(2).Delete
    
    Range("A1:A1").Select
    Sheets("_DPData").Visible = False
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End Sub

Sub ptsbreaches() 'extra report
    Dim cnn As ADODB.Connection
    Dim rst As ADODB.Recordset
    
    Call MakeSheet("_B", "Breaches", "B")
    MyConn = SQLDBPath
    Set cnn = New ADODB.Connection
    With cnn
        .Provider = SQLProvider
        .Open MyConn
        .CommandTimeout = 1800
    End With
    nLastRow = 1
        
    sSql = "select s.job,s.sampnum,trim(s.sample_id),trim(s.sampdepth),trim(s.other_id),trim(d.repname)" _
            & ",r.result,l.hispec,l.lospec,trim(l.message) " _
            & ",iif(r.result>=l.hispec,'FAIL','PASS') " _
            & "from samples s, results r, limits l, dets d where s.sampnum = r.sampnum and r.det = l.det and " _
            & "l.limits = 'PTS' and r.det=d.det " _
            & "and s.job in ('00-00000') and s.sampstatus<>'WITHDRWN' and s.sampnum=999999 " _
            & "order by s.job,s.sampnum,r.det,l.limits;"
    
    sJob = Trim(Sheets("Rawdata").Cells(4, 2).Value)
    sJob = Replace(sJob, " ", "")
    sJob = Replace(sJob, ",", "','")
    sSampnumm = Trim(Sheets("Rawdata").Cells(12, 2).Value)
    If sSampnumm > "" Then
        sSql = Replace(sSql, "and s.job in ('00-00000')", " ")
        If InStr(sSampnumm, ",") = 0 Then
            sSql = Replace(sSql, "999999", sSampnumm)
        Else
            sSql = Replace(sSql, "and s.sampnum=999999", "and s.sampnum in (" & sSampnumm & ")")
        End If
    Else
        sSql = Replace(sSql, "and s.sampnum=999999", "")
        sSql = Replace(sSql, "00-00000", Replace(sJob, ",", "','"))
    End If
    
    
    Sheets("Breaches").Select
    Set rst = New ADODB.Recordset
    rst.CursorLocation = adUseServer
    rst.Open Source:=sSql, ActiveConnection:=cnn, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic
    Sheets("Breaches").Cells(8, 1).CopyFromRecordset rst
    rst.Close
    cnn.Close
    Set rst = Nothing
    Set cnn = Nothing
    
    Cells(3, 2).Value = Trim(Sheets("Rawdata").Cells(4, 2).Value) 'job
    Cells(5, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(6, 2).Value) 'contitle
    Cells(4, 2).Value = "'" & Trim(Sheets("Rawdata").Cells(3, 1).Value) 'cliref
    Cells(7, 11).Value = ""
    Cells(7, 12).Value = ""
    
    'remove autofilter
    Range("A7:L7").Select
    Selection.AutoFilter
    'remove last col
    Columns("L:L").Select
    Selection.Delete Shift:=xlToLeft
    
    'red fails
    Columns("K:K").Select
    Application.FindFormat.Clear
    Application.ReplaceFormat.Clear
    With Application.ReplaceFormat.Font
        .Subscript = False
        .Color = 255
        .TintAndShade = 0
    End With
    Selection.Replace What:="FAIL", Replacement:="FAIL", LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
    Application.FindFormat.Clear
    Application.ReplaceFormat.Clear

    If Trim(Cells(8, 1).Value) > "" Then
        firstrow = 7
        lastcol = 11
        lastrow = FindLastRow("Breaches")
        If lastrow > firstrow Then
            Range(Cells(firstrow + 1, 1), Cells(lastrow, lastcol)).Select
            Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
            Selection.Borders(xlEdgeTop).Weight = xlThin
            Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
            Selection.Borders(xlEdgeLeft).Weight = xlThin
            Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
            Selection.Borders(xlEdgeRight).Weight = xlThin
            Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
            Selection.Borders(xlEdgeBottom).Weight = xlThin
            Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
            Selection.Borders(xlInsideVertical).Weight = xlHairline
            Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
            Selection.Borders(xlInsideHorizontal).Weight = xlHairline
            With Selection.Font
                .Name = "Calibri"
                .Size = 8
            End With
            With Selection
                .HorizontalAlignment = xlGeneral
                .VerticalAlignment = xlBottom
            End With
            ActiveWindow.View = xlNormalView
        End If
        ActiveSheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(lastrow, lastcol)).Address
        Cells(7, 1).Select
    Else
        'Application.DisplayAlerts = False
        'Sheets("Breaches").Delete
        'Application.DisplayAlerts = True
        Cells(8, 1).Value = "No Breaches"
    End If
    
    'red breaches
    If SheetExists("SOIL") = True Then
        If Sheets("SOIL").Visible = True Then
            Sheets("SOIL").Select
            Cells.Select
            Application.FindFormat.Clear
            Application.ReplaceFormat.Clear
            With Application.FindFormat.Font
                .FontStyle = "Bold"
                .Subscript = False
                .Underline = xlUnderlineStyleSingle
                .TintAndShade = 0
            End With
            With Application.ReplaceFormat.Font
                .FontStyle = "Bold"
                .Subscript = False
                .Color = 255
                .TintAndShade = 0
            End With
            Selection.Replace What:="", Replacement:="", LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=True, ReplaceFormat:=True
            Application.FindFormat.Clear
            Application.ReplaceFormat.Clear
        End If
    End If
    
    Sheets("Rawdata").Select
End Sub

' InQuest injected base64 decoded content
' )bz{l
' jwlq
' )^J)
' ZrH+

INQUEST-PP=macro
