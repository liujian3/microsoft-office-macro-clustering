Attribute VB_Name = "CheckFileVersion_v5"
Option Explicit

'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'/////     Version Control                                                                                                   //////
'/////     =============================================================================================================     //////
'/////     v1 - Added Versioning                                                                                             //////
'/////     v2 - Updated "Application.GetSaveAsFilename" function to include 2007 file types - xlsm and xlsx                  //////
'/////     v3 - 2014/01/07 - Updated "Application.GetSaveAsFilename" function fix 2007 issue where initial file type must be //////
'/////                       listed last in the "FileFilter" string in order for it to populate.                             //////
'/////     v4 - 2014/03/19 - Added Dedicated SQL Server Login For ToolVersionCheck Process                                   //////
'/////     v5 - 2014/04/07 - Added Handling for blnClosedByUpgrade Global Variable (Used In GHES User Interaction Tool)      //////
'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'//////////////////////////////////////////////////////
'//////////////////////////////////////////////////////
'/////                                            /////
'/////     Need to Include SendCDOEMailModule     /////
'/////                                            /////
'//////////////////////////////////////////////////////
'//////////////////////////////////////////////////////


'API Function calls used by the Shell Subs
Private Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
Private Declare Function GetExitCodeProcess Lib "kernel32" (ByVal hProcess As Long, lpExitCode As Long) As Long
Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
Private Declare Function GetModuleBaseName Lib "psapi.dll" Alias "GetModuleBaseNameA" (ByVal hProcess As Long, ByVal hModule As Long, ByVal lpBaseName As String, ByVal nSize As Long) As Long

'Constants used by the API Function calls
Private Const WM_CLOSE = &H10
Private Const PROCESS_QUERY_INFORMATION = &H400
Private Const STILL_ACTIVE = &H103

'Global Variable
Public blnClosedByUpgrade As Boolean

'Module Constants
Public Const strToolName As String = "US Inbound Planning Tool"

Function ThisToolsVersion() As Single

    Dim strFileVersion As String

    strFileVersion = ThisWorkbook.Worksheets("Cover").Cells(1, 2).Value
    '    strFileVersion = Trim(Mid(strFileVersion, InStr(1, strFileVersion, "Version") + 7, (Len(strFileVersion) + 1) - (InStr(1, strFileVersion, "Version") + 7)))

    'Convert String To Text
    On Error Resume Next
    Err.Clear
    ThisToolsVersion = CSng(strFileVersion)
    If Err.Number = 13 Then
        Err.Clear
        strFileVersion = Replace(strFileVersion, ".", ",")
        ThisToolsVersion = CSng(strFileVersion)

    End If

    On Error GoTo 0

    If Not Format(ThisToolsVersion, "0.0") = strFileVersion Then
        strFileVersion = Replace(strFileVersion, ".", ",")
        ThisToolsVersion = strFileVersion
    End If

End Function

Function CheckToolVersion() As Boolean

'Returns True if the current version can be used.
'Returns False if the current version cannot be used.

    Dim wbNew As Workbook

    Dim strtemp As String

    Dim strFileVersion As String
    Dim sngFileVersion As Single
    Dim sngCurrentVersion As Single
    Dim sngOldestUsableVersion As Single

    Dim adoDBConn As New ADODB.Connection
    Dim adoRecordset As New ADODB.Recordset

    Dim objShell As wshShell

    Dim sqlString As String

    If Application.Version < 12# Then

        MsgBox ("Please open workbook in Excel 2007+")

        ThisWorkbook.Close (False)
    Else
    End If



    'Establish Error Handler
10  On Error GoTo ErrorHandler

    'Create DB Connection
20  Select Case ConnectToSQLServerDB(adoDBConn, "tool_CheckToolVersion", "CheckToolVersion")
    Case 0
        'Send notice to Robert Bliss
30      strtemp = "Del," & vbCrLf & vbCrLf & _
                  "An attempt to verify the version number of one of our automation tools failed because the Tool was unable to connect to the SQL Server Database." & vbCrLf & vbCrLf & _
                  "Tool Name: " & strToolName & vbCrLf & _
                  "Version Used: " & ThisToolsVersion
40      SendEMailViaCDO "usie.reporting@dhl.com", "", "", "FYI:  Error Occured In Tool Version Check Module", strtemp

        'No Connection
50      CheckToolVersion = True
60      GoTo ExitFunction
70  Case Else
        'Good To Go...
80  End Select
    adoDBConn.CommandTimeout = 15
    
90  sqlString = "SELECT       VERSION, OLDEST_USABLE_VERSION, LINK_TO_FILENAME" & vbCrLf & _
                "FROM         gen_TOOL_VERSION_TRACKING" & vbCrLf & _
                "WHERE        (TOOL_NAME = '" & strToolName & "') AND" & vbCrLf & _
              "             (ACTIVE = 1)" & vbCrLf & _
                "ORDER BY     VERSION DESC"

100 adoRecordset.Open sqlString, adoDBConn, adOpenStatic, adLockReadOnly

110 If adoRecordset.RecordCount = 0 Then
        'Send notice to Robert Bliss
120     strtemp = "Robert," & vbCrLf & vbCrLf & _
                  "An attempt to verify the version number of one of our automation tools failed because the query returned 0 records." & vbCrLf & vbCrLf & _
                  "Tool Name: " & strToolName & vbCrLf & _
                  "Version Used: " & ThisToolsVersion & vbCrLf & _
                  "SQL Query: " & vbCrLf & _
                "     " & Replace(sqlString, vbCrLf, vbCrLf & "     ")
130     SendEMailViaCDO "usie.reporting@dhl.com", "", "", "FYI:  Error Occured In Tool Version Check Module", strtemp

        'Record Not Found.  Allow To Continue
140     CheckToolVersion = True
150     GoTo ExitFunction
160 Else
170     adoRecordset.MoveFirst
180     sngFileVersion = ThisToolsVersion
190     sngCurrentVersion = adoRecordset.Fields("VERSION").Value
200     If IsNull(adoRecordset.Fields("OLDEST_USABLE_VERSION").Value) Then
210         sngOldestUsableVersion = sngCurrentVersion
220     Else
230         sngOldestUsableVersion = adoRecordset.Fields("OLDEST_USABLE_VERSION").Value
240     End If

        'Is this version the current version?
250     If sngFileVersion >= sngCurrentVersion Then
            'Good To Go...
260         CheckToolVersion = True
270         GoTo ExitFunction
280     ElseIf sngFileVersion >= sngOldestUsableVersion Then
            'Can use, but ask user if they want to upgrade...
290         strtemp = "There is a new version of this tool available." & vbCrLf & vbCrLf & _
                      "Do you want to download the new version now?"

300         If MsgBox(strtemp, vbYesNo + vbQuestion, "New Version Available") = vbYes Then
                'Download New Version
310             Select Case Right(adoRecordset.Fields("LINK_TO_FILENAME").Value, (Len(adoRecordset.Fields("LINK_TO_FILENAME").Value) - InStrRev(adoRecordset.Fields("LINK_TO_FILENAME").Value, ".")) + 1)
                Case ".xls"
320                 strtemp = Application.GetSaveAsFilename(ThisWorkbook.Path & "\" & adoRecordset.Fields("LINK_TO_FILENAME").Value, "Excel Files (*.xlsx; *.xlsm; *.xls), *.xlsx; *.xlsm; *.xls", , "Select Location To Save New Version")
330             Case ".xlsm"
340                 strtemp = Application.GetSaveAsFilename(ThisWorkbook.Path & "\" & adoRecordset.Fields("LINK_TO_FILENAME").Value, "Excel Files (*.xls; *.xlsx; *.xlsm), *.xls; *.xlsx; *.xlsm", , "Select Location To Save New Version")
350             Case ".xlsx"
360                 strtemp = Application.GetSaveAsFilename(ThisWorkbook.Path & "\" & adoRecordset.Fields("LINK_TO_FILENAME").Value, "Excel Files (*.xls; *.xlsm; *.xlsx), *.xls; *.xlsm; *.xlsx", , "Select Location To Save New Version")
370             Case Else
380                 strtemp = Right(adoRecordset.Fields("LINK_TO_FILENAME").Value, (Len(adoRecordset.Fields("LINK_TO_FILENAME").Value) - InStrRev(adoRecordset.Fields("LINK_TO_FILENAME").Value, ".")) + 1)
390                 strtemp = Application.GetSaveAsFilename(ThisWorkbook.Path & "\" & adoRecordset.Fields("LINK_TO_FILENAME").Value, "Excel Files (*.xlsx; *.xlsm; *.xls; *" & strtemp & "), *.xlsx; *.xlsm; *.xls; *" & strtemp, , "Select Location To Save New Version")
400             End Select
410             If strtemp = "False" Then
                    'User bailed.  Cancel...
420                 MsgBox "Unable to download new version due to user interferance.  Continuing using this out of date version.", vbCritical + vbOKOnly, "Unable To Download!"
430                 CheckToolVersion = True
440                 GoTo ExitFunction
450             ElseIf FTPDownload("cvgopsnas01.us.dhl.com", "anonymous", "anonymous", "CURRENT_TOOL_VERSIONS/" & adoRecordset.Fields("LINK_TO_FILENAME").Value, Left(strtemp, InStrRev(strtemp, "\") - 1)) = False Then
460                 MsgBox "Unable to download new version.  Please contact usie.reporting@dhl.com for an emailed copy.", vbCritical + vbOKOnly, "Unable To Download!"
470                 CheckToolVersion = True
480                 GoTo ExitFunction
490             Else
500                 MsgBox "Download Successful!  Launching new version!", vbOKOnly + vbInformation, "Launching New Version!"
510                 Set wbNew = Application.Workbooks.Open(strtemp)
520                 wbNew.Worksheets("Cover").Activate

525                 Call CopyEssentialSheets(ThisWorkbook, wbNew)

530                 On Error Resume Next

540                 adoRecordset.Close
550                 adoDBConn.Close

560                 Set adoRecordset = Nothing
570                 Set adoDBConn = Nothing

580                 On Error GoTo ErrorHandler

590                 Set wbNew = Nothing

595                 blnClosedByUpgrade = True
600                 ThisWorkbook.Close (False)
610             End If
620         Else
630             CheckToolVersion = True
640             GoTo ExitFunction
650         End If
660     Else
670         strtemp = "The version of this tool that you are running is out of date, and must be updated before continuing." & vbCrLf & vbCrLf & _
                      "Do you want to download the new version now?"

680         If MsgBox(strtemp, vbYesNo + vbQuestion, "New Version Available") = vbYes Then
                'Download New Version
690             Select Case Right(adoRecordset.Fields("LINK_TO_FILENAME").Value, (Len(adoRecordset.Fields("LINK_TO_FILENAME").Value) - InStrRev(adoRecordset.Fields("LINK_TO_FILENAME").Value, ".")) + 1)
                Case ".xls"
700                 strtemp = Application.GetSaveAsFilename(ThisWorkbook.Path & "\" & adoRecordset.Fields("LINK_TO_FILENAME").Value, "Excel Files (*.xlsx; *.xlsm; *.xls), *.xlsx; *.xlsm; *.xls", , "Select Location To Save New Version")
710             Case ".xlsm"
720                 strtemp = Application.GetSaveAsFilename(ThisWorkbook.Path & "\" & adoRecordset.Fields("LINK_TO_FILENAME").Value, "Excel Files (*.xls; *.xlsx; *.xlsm), *.xls; *.xlsx; *.xlsm", , "Select Location To Save New Version")
730             Case ".xlsx"
740                 strtemp = Application.GetSaveAsFilename(ThisWorkbook.Path & "\" & adoRecordset.Fields("LINK_TO_FILENAME").Value, "Excel Files (*.xls; *.xlsm; *.xlsx), *.xls; *.xlsm; *.xlsx", , "Select Location To Save New Version")
750             Case Else
760                 strtemp = Right(adoRecordset.Fields("LINK_TO_FILENAME").Value, (Len(adoRecordset.Fields("LINK_TO_FILENAME").Value) - InStrRev(adoRecordset.Fields("LINK_TO_FILENAME").Value, ".")) + 1)
770                 strtemp = Application.GetSaveAsFilename(ThisWorkbook.Path & "\" & adoRecordset.Fields("LINK_TO_FILENAME").Value, "Excel Files (*.xlsx; *.xlsm; *.xls; *" & strtemp & "), *.xlsx; *.xlsm; *.xls; *" & strtemp, , "Select Location To Save New Version")
780             End Select
790             If strtemp = "False" Then
                    'User bailed.  Cancel...
800                 MsgBox "You elected not to upgrade at this time.  This version of the tool cannot be used, and will now close.  Thanks!", vbCritical + vbOKOnly, "Closing File"
810                 On Error Resume Next

820                 adoRecordset.Close
830                 adoDBConn.Close

840                 Set adoRecordset = Nothing
850                 Set adoDBConn = Nothing

860                 On Error GoTo ErrorHandler

865                 blnClosedByUpgrade = True
870                 ThisWorkbook.Close (False)
880             ElseIf FTPDownload("cvgopsnas01.us.dhl.com", "anonymous", "anonymous", "CURRENT_TOOL_VERSIONS/" & adoRecordset.Fields("LINK_TO_FILENAME").Value, Left(strtemp, InStrRev(strtemp, "\") - 1)) = False Then
890                 MsgBox "Unable to download new version.  Please contact usie.reporting@dhl.com for an emailed copy.  Your session will be closed.", vbCritical + vbOKOnly, "Unable To Download!"
900                 On Error Resume Next

910                 adoRecordset.Close
920                 adoDBConn.Close

930                 Set adoRecordset = Nothing
940                 Set adoDBConn = Nothing

950                 On Error GoTo ErrorHandler

955                 blnClosedByUpgrade = True
960                 ThisWorkbook.Close (False)
970             Else
980                 MsgBox "Download Successful!  Launching new version!", vbOKOnly + vbInformation, "Launching New Version!"
990                 strtemp = Left(strtemp, InStrRev(strtemp, "\")) & adoRecordset.Fields("LINK_TO_FILENAME").Value
1000                Set wbNew = Application.Workbooks.Open(strtemp)
1010                wbNew.Worksheets("Cover").Activate

1015                Call CopyEssentialSheets(ThisWorkbook, wbNew)

1020                On Error Resume Next

1030                adoRecordset.Close
1040                adoDBConn.Close

1050                Set adoRecordset = Nothing
1060                Set adoDBConn = Nothing

1070                On Error GoTo ErrorHandler

1080                Set wbNew = Nothing

1085                blnClosedByUpgrade = True
1090                ThisWorkbook.Close (False)
1100            End If
1110        Else
1120            MsgBox "You elected not to upgrade at this time.  This version of the tool cannot be used, and will now close.  Thanks!", vbCritical + vbOKOnly, "Closing File"
1130            On Error Resume Next

1140            adoRecordset.Close
1150            adoDBConn.Close

1160            Set adoRecordset = Nothing
1170            Set adoDBConn = Nothing

1180            On Error GoTo ErrorHandler

1185            blnClosedByUpgrade = True
1190            ThisWorkbook.Close (False)
1200        End If
1210    End If
1220 End If


ExitFunction:

1230 On Error Resume Next

1240 adoRecordset.Close
1250 adoDBConn.Close

1260 Set adoRecordset = Nothing
1270 Set adoDBConn = Nothing

1280 Set wbNew = Nothing

1290 On Error GoTo 0

1300 Exit Function

ErrorHandler:

    'Send Owner an Email
1310 strtemp = "Del," & vbCrLf & vbCrLf & _
               "An attempt to verify the version number of one of our automation tools failed because of an unhandled error." & vbCrLf & vbCrLf & _
               "Computer Name: " & Environ("COMPUTERNAME") & vbCrLf & _
               "User LDAP: " & Environ("USERNAME") & vbCrLf & _
               "Tool Name: " & strToolName & vbCrLf & _
               "Version Used: " & ThisToolsVersion & vbCrLf & vbCrLf & _
               "Source Project: " & Err.Source & vbCrLf & _
               "Source Module: CheckFileVersion" & vbCrLf & _
               "Error Line: " & Erl & vbCrLf & _
               "Error Number: " & Err.Number & vbCrLf & _
               "Error Description: " & Err.Description
1320 SendEMailViaCDO "usie.reporting@dhl.com", "", "", "FYI:  Error Occured In Tool Version Check Module", strtemp


1330 CheckToolVersion = True
1340 Resume ExitFunction


End Function



'//////////////////////////////////////
'//////////////////////////////////////
'/////                            /////
'/////        COPY SHEETS         /////
'/////                            /////
'//////////////////////////////////////
'//////////////////////////////////////

Private Sub CopyEssentialSheets(wbThis As Workbook, wbNew As Workbook)
    Application.StatusBar = "Copying sheets to new IPT..."
    
    If SheetExists("Postal Codes", wbThis) Then wbThis.Sheets("Postal Codes").Copy Before:=wbNew.Sheets(wbNew.Sheets.Count - 1)
    If SheetExists("Street", wbThis) Then wbThis.Sheets("Street").Copy Before:=wbNew.Sheets(wbNew.Sheets.Count - 1)
    If SheetExists("SOF", wbThis) Then wbThis.Sheets("SOF").Copy Before:=wbNew.Sheets(wbNew.Sheets.Count - 1)
    If SheetExists("Routes", wbThis) Then wbThis.Sheets("Routes").Copy Before:=wbNew.Sheets(wbNew.Sheets.Count - 1)

    Application.StatusBar = False
End Sub

Function SheetExists(shtName As String, Optional wbThis As Workbook)
    Dim sht As Worksheet
    
    If wbThis Is Nothing Then Set wbThis = ThisWorkbook
    On Error Resume Next
    Set sht = wbThis.Sheets(shtName)
    On Error GoTo 0
    SheetExists = Not sht Is Nothing
End Function



'//////////////////////////////////////
'//////////////////////////////////////
'/////                            /////
'/////          FTP SUBS          /////
'/////                            /////
'//////////////////////////////////////
'//////////////////////////////////////






Private Sub TestFTPDownload()
    Application.StatusBar = "Downloading file from FTP site..."

    If FTPDownload("cvgopsnas01.us.dhl.com", "anonymous", "anonymous", "CURRENT_TOOL_VERSIONS/test.xls") = False Then
        MsgBox "File download unsucessful.", vbCritical, "Error!"
    Else
        MsgBox "FTP File transfer sucessful.", vbOK, "Download complete"
    End If

    Application.StatusBar = False
End Sub


Function FTPDownload(URL As String, LoginID As String, LoginPW As String, _
                     FileToGet As String, Optional OutputPath As String) As Boolean

    Dim strTempDL As String
    Dim strOutput As String
    Dim oFS As Object
    Dim oTS As Object

    FTPDownload = False

    'check for temp directory, create it if neccesary
    strTempDL = Environ("TEMP") & "\FTPTemp"
    If Dir(strTempDL, vbDirectory) = Empty Then MkDir (strTempDL)

    'if target file exists, delete it.
    If Not Dir(strTempDL & "\" & FileToGet) = Empty Then
        Kill strTempDL & "\" & FileToGet

        'if the file is still there, raise error
        If Not Dir(strTempDL & "\" & FileToGet) = Empty Then Exit Function
    End If
    'invoke File System Object
    Set oFS = New FileSystemObject

    'Build new FTP batch file (over-writes the old one):
    Set oTS = oFS.CreateTextFile(strTempDL & "\FTP.bat", True)
    With oTS
        .WriteLine "@echo off"
        .WriteLine "echo."
        .WriteLine "Echo Contacting FTP server"
        .WriteLine "echo."
        .WriteLine "ftp -v -s:" & strTempDL & "\FTP.dat"
        .WriteLine "echo."
        .WriteLine "echo ALL DONE!"
        .WriteLine "echo."
        .WriteLine "exit"
        .WriteLine "pause"
        .Close
    End With
    'Build new FTP .DAT file (over-writes the old one):
    Set oTS = oFS.CreateTextFile(strTempDL & "\FTP.dat", True)
    With oTS
        .WriteLine "open " & URL
        .WriteLine LoginID
        .WriteLine LoginPW
        .WriteLine "verbose"
        .WriteLine "binary"
        .WriteLine "get " & Chr(34) & FileToGet & Chr(34) & " " & Chr(34) & strTempDL & "\" & Right(FileToGet, Len(FileToGet) - InStrRev(FileToGet, "/")) & Chr(34)
        .WriteLine "quit"
        .Close
    End With

    Set oTS = Nothing


    '**run FTP BAT through Shell and wait
    ShellAndWait strTempDL & "\FTP.bat"
    Application.Windows(1).Activate

    'If file was sucessfully DLed, copy it over

    If FileLen(strTempDL & "\" & Right(FileToGet, Len(FileToGet) - InStrRev(FileToGet, "/"))) = 0 Then

        On Error Resume Next
        Kill strTempDL & "\" & FileToGet
        On Error GoTo 0

        FTPDownload = False

    Else

        'get final path for output file
        If OutputPath = Empty Then
            'if none was specified, use the desktop
            strOutput = Environ("USERPROFILE") _
                      & "\Desktop\" & Right(FileToGet, Len(FileToGet) - InStrRev(FileToGet, "/"))
        Else
            If Right(OutputPath, 1) = "\" Then
                strOutput = OutputPath & Right(FileToGet, Len(FileToGet) - InStrRev(FileToGet, "/"))
            Else
                strOutput = OutputPath & "\" & Right(FileToGet, Len(FileToGet) - InStrRev(FileToGet, "/"))
            End If
        End If

        'delete output file (incase its there)
        On Error Resume Next
        Kill (strOutput)
        On Error GoTo 0

        oFS.CopyFile strTempDL & "\" & Right(FileToGet, Len(FileToGet) - InStrRev(FileToGet, "/")), strOutput

        FTPDownload = True

    End If

    'delete temp FTP files
    On Error Resume Next
    Kill (strTempDL & "\FTP.bat")
    Kill (strTempDL & "\FTP.dat")
    Kill (strTempDL & "\" & FileToGet)
    On Error GoTo 0

    Set oFS = Nothing


End Function













'//////////////////////////////////////
'//////////////////////////////////////
'/////                            /////
'/////         Shell SUBS         /////
'/////                            /////
'//////////////////////////////////////
'//////////////////////////////////////







Sub ShellAndWait(PathName As String, Optional WindowState)
'ShellAndWait uses Windows API calls to force Excel to wait
'for the window opened by the Shell command to close before
'continuing to execute the VBA script.
'Window States (Per Help for Shell function):
' 1, 5, 9 Normal with focus.
' 2 Minimized with focus.
' 3 Maximized with focus.
' 4, 8 Normal without focus.
' 6, 7 Minimized without focus.
    Dim hProg As Long
    Dim hProcess As Long
    Dim ExitCode As Long

    'fill in the missing parameter and execute the program
    If IsMissing(WindowState) Then WindowState = 1
    hProg = Shell(PathName, WindowState)
    'hProg is a "process ID under Win32. To get the process handle:
    hProcess = OpenProcess(PROCESS_QUERY_INFORMATION, False, hProg)

    Do
        'populate Exitcode variable
        GetExitCodeProcess hProcess, ExitCode
        DoEvents
    Loop While ExitCode = STILL_ACTIVE


End Sub

Sub ShellAndWait2(PathName As String)
'this version allows for blind FTP of small files
'Really brief FTPs will crash the shell without a wait
    Dim hProg As Long
    Dim hProcess As Long
    Dim ExitCode As Long

    hProg = Shell(PathName, 0)
    'hProg is a "process ID under Win32. To get the process handle:
    hProcess = OpenProcess(PROCESS_QUERY_INFORMATION, False, hProg)

    Application.Wait (Now + TimeValue("0:00:01"))

    Do
        'populate Exitcode variable
        GetExitCodeProcess hProcess, ExitCode
        DoEvents
    Loop While ExitCode = STILL_ACTIVE


End Sub

Sub PartialFTP(InputFN As String, OutputFN As String)
'PartialFTP uses Windows API calls to: run a Shell command, force
'Excel to wait a specified time, then to kill the running FTP
'process, and then to wait for the shell window to close before
'continuing to execute the VBA script.
'InputFN = full name of Batch file that invokes an FTP download
'OutputFN = full name of file being FTPed


'Start running shell routine
    Shell InputFN, 0

    'wait until output file exists before proceeding
    '(ie, wait for FTP transfer to begin)
    Do Until Dir(OutputFN) <> Empty
        'wait in intervals of about a quarter second
        Application.Wait Now + 0.000003
    Loop
    'Let the FTP transfer run for 2 full seconds
    Application.Wait Now + TimeValue("00:00:02")
    'Kill the FTP process.
    '(this returns control to the batch file, which then continues.)
    Kill_ProcByName ("FTP.exe")


End Sub

Sub Kill_ProcByName(NameOfExe As String)

    Dim oProcList As Object
    Dim oWMI As Object
    Dim oProc As Object

    ' step 1: create WMI object instance:
    Set oWMI = GetObject("winmgmts:")
    If IsNull(oWMI) = False Then
        ' step 2: create object collection of Win32 processes:
        Set oProcList = oWMI.InstancesOf("win32_process")
        ' step 3: iterate through the enumerated collection:
        For Each oProc In oProcList
            ' option to close a process:
            If UCase(oProc.Name) = UCase(NameOfExe) Then
                On Error Resume Next
                oProc.Terminate (0)
                On Error GoTo 0
            End If    'IsNullUCase(oProc.Name) = UCase(NameOfExe)
        Next    'oProc In oProcList
    End If    'IsNull(oWMI) = False
    ' step 4: clear out the objects:
    Set oProcList = Nothing
    Set oWMI = Nothing


End Sub


Attribute VB_Name = "Dictionary"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' Dictionary v1.3.0
' (c) Tim Hall - https://github.com/timhall/VBA-Dictionary
'
' Drop-in replacement for Scripting.Dictionary on Mac
'
' @author: tim.hall.engr@gmail.com
' @license: MIT (http://www.opensource.org/licenses/mit-license.php
'
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' --------------------------------------------- '
' Constants and Private Variables
' --------------------------------------------- '

#Const UseScriptingDictionaryIfAvailable = True

#If Mac Or Not UseScriptingDictionaryIfAvailable Then

' dict_KeyValue 0: FormattedKey, 1: OriginalKey, 2: Value
Private dict_pKeyValues As Collection
Private dict_pKeys() As Variant
Private dict_pItems() As Variant
Private dict_pObjectKeys As Collection
Private dict_pCompareMode As CompareMethod

#Else

Private dict_pDictionary As Object

#End If

' --------------------------------------------- '
' Types
' --------------------------------------------- '

Public Enum CompareMethod
    BinaryCompare = VBA.vbBinaryCompare
    TextCompare = VBA.vbTextCompare
    DatabaseCompare = VBA.vbDatabaseCompare
End Enum

' --------------------------------------------- '
' Properties
' --------------------------------------------- '

Public Property Get CompareMode() As CompareMethod
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    CompareMode = dict_pCompareMode
#Else
    CompareMode = dict_pDictionary.CompareMode
#End If
End Property
Public Property Let CompareMode(Value As CompareMethod)
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    If Me.Count > 0 Then
        ' Can't change CompareMode for Dictionary that contains data
        ' http://msdn.microsoft.com/en-us/library/office/gg278481(v=office.15).aspx
        Err.Raise 5 ' Invalid procedure call or argument
    End If

    dict_pCompareMode = Value
#Else
    dict_pDictionary.CompareMode = Value
#End If
End Property

Public Property Get Count() As Long
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Count = dict_pKeyValues.Count
#Else
    Count = dict_pDictionary.Count
#End If
End Property

Public Property Get Item(Key As Variant) As Variant
Attribute Item.VB_UserMemId = 0
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Dim dict_KeyValue As Variant
    dict_KeyValue = dict_GetKeyValue(Key)

    If Not IsEmpty(dict_KeyValue) Then
        If VBA.IsObject(dict_KeyValue(2)) Then
            Set Item = dict_KeyValue(2)
        Else
            Item = dict_KeyValue(2)
        End If
    Else
        ' Not found -> Returns Empty
    End If
#Else
    If VBA.IsObject(dict_pDictionary.Item(Key)) Then
        Set Item = dict_pDictionary.Item(Key)
    Else
        Item = dict_pDictionary.Item(Key)
    End If
#End If
End Property
Public Property Let Item(Key As Variant, Value As Variant)
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    If Me.Exists(Key) Then
        dict_ReplaceKeyValue dict_GetKeyValue(Key), Key, Value
    Else
        dict_AddKeyValue Key, Value
    End If
#Else
    dict_pDictionary.Item(Key) = Value
#End If
End Property
Public Property Set Item(Key As Variant, Value As Variant)
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    If Me.Exists(Key) Then
        dict_ReplaceKeyValue dict_GetKeyValue(Key), Key, Value
    Else
        dict_AddKeyValue Key, Value
    End If
#Else
    Set dict_pDictionary.Item(Key) = Value
#End If
End Property

Public Property Let Key(Previous As Variant, Updated As Variant)
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Dim dict_KeyValue As Variant
    dict_KeyValue = dict_GetKeyValue(Previous)

    If Not VBA.IsEmpty(dict_KeyValue) Then
        dict_ReplaceKeyValue dict_KeyValue, Updated, dict_KeyValue(2)
    End If
#Else
    dict_pDictionary.Key(Previous) = Updated
#End If
End Property

' ============================================= '
' Public Methods
' ============================================= '

''
' Add an item with the given key
'
' @param {Variant} Key
' @param {Variant} Item
' --------------------------------------------- '
Public Sub Add(Key As Variant, Item As Variant)
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    If Not Me.Exists(Key) Then
        dict_AddKeyValue Key, Item
    Else
        ' This key is already associated with an element of this collection
        Err.Raise 457
    End If
#Else
    dict_pDictionary.Add Key, Item
#End If
End Sub

''
' Check if an item exists for the given key
'
' @param {Variant} Key
' @return {Boolean}
' --------------------------------------------- '
Public Function Exists(Key As Variant) As Boolean
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Exists = Not IsEmpty(dict_GetKeyValue(Key))
#Else
    Exists = dict_pDictionary.Exists(Key)
#End If
End Function

''
' Get an array of all items
'
' @return {Variant}
' --------------------------------------------- '
Public Function Items() As Variant
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    If Me.Count > 0 Then
        Items = dict_pItems
    Else
        ' Split("") creates initialized empty array that matches Dictionary Keys and Items
        Items = VBA.Split("")
    End If
#Else
    Items = dict_pDictionary.Items
#End If
End Function

''
' Get an array of all keys
'
' @return {Variant}
' --------------------------------------------- '
Public Function Keys() As Variant
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    If Me.Count > 0 Then
        Keys = dict_pKeys
    Else
        ' Split("") creates initialized empty array that matches Dictionary Keys and Items
        Keys = VBA.Split("")
    End If
#Else
    Keys = dict_pDictionary.Keys
#End If
End Function

''
' Remove an item for the given key
'
' @param {Variant} Key
' --------------------------------------------- '
Public Sub Remove(Key As Variant)
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Dim dict_KeyValue As Variant
    dict_KeyValue = dict_GetKeyValue(Key)

    If Not VBA.IsEmpty(dict_KeyValue) Then
        dict_RemoveKeyValue dict_KeyValue
    Else
        ' Application-defined or object-defined error
        Err.Raise 32811
    End If
#Else
    dict_pDictionary.Remove Key
#End If
End Sub

''
' Remove all items
' --------------------------------------------- '
Public Sub RemoveAll()
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Set dict_pKeyValues = New Collection

    Erase dict_pKeys
    Erase dict_pItems
#Else
    dict_pDictionary.RemoveAll
#End If
End Sub

' ============================================= '
' Private Functions
' ============================================= '

#If Mac Or Not UseScriptingDictionaryIfAvailable Then

Private Function dict_GetKeyValue(dict_Key As Variant) As Variant
    On Error Resume Next
    dict_GetKeyValue = dict_pKeyValues(dict_GetFormattedKey(dict_Key))
    Err.Clear
End Function

Private Sub dict_AddKeyValue(dict_Key As Variant, dict_Value As Variant, Optional dict_Index As Long = -1)
    If Me.Count = 0 Then
        ReDim dict_pKeys(0 To 0)
        ReDim dict_pItems(0 To 0)
    Else
        ReDim Preserve dict_pKeys(0 To UBound(dict_pKeys) + 1)
        ReDim Preserve dict_pItems(0 To UBound(dict_pItems) + 1)
    End If

    Dim dict_FormattedKey As String
    dict_FormattedKey = dict_GetFormattedKey(dict_Key)

    If dict_Index > 0 And dict_Index <= dict_pKeyValues.Count Then
        Dim dict_i As Long
        For dict_i = UBound(dict_pKeys) To dict_Index Step -1
            dict_pKeys(dict_i) = dict_pKeys(dict_i - 1)
            If VBA.IsObject(dict_pItems(dict_i - 1)) Then
                Set dict_pItems(dict_i) = dict_pItems(dict_i - 1)
            Else
                dict_pItems(dict_i) = dict_pItems(dict_i - 1)
            End If
        Next dict_i

        dict_pKeys(dict_Index - 1) = dict_Key
        If VBA.IsObject(dict_Value) Then
            Set dict_pItems(dict_Index - 1) = dict_Value
        Else
            dict_pItems(dict_Index - 1) = dict_Value
        End If

        dict_pKeyValues.Add Array(dict_FormattedKey, dict_Key, dict_Value), dict_FormattedKey, Before:=dict_Index
    Else
        If VBA.IsObject(dict_Key) Then
            Set dict_pKeys(UBound(dict_pKeys)) = dict_Key
        Else
            dict_pKeys(UBound(dict_pKeys)) = dict_Key
        End If
        If VBA.IsObject(dict_Value) Then
            Set dict_pItems(UBound(dict_pItems)) = dict_Value
        Else
            dict_pItems(UBound(dict_pItems)) = dict_Value
        End If

        dict_pKeyValues.Add Array(dict_FormattedKey, dict_Key, dict_Value), dict_FormattedKey
    End If
End Sub

Private Sub dict_ReplaceKeyValue(dict_KeyValue As Variant, dict_Key As Variant, dict_Value As Variant)
    Dim dict_Index As Long
    Dim dict_i As Integer

    dict_Index = dict_GetKeyIndex(dict_KeyValue(1))

    ' Remove existing dict_Value
    dict_RemoveKeyValue dict_KeyValue, dict_Index

    ' Add new dict_Key dict_Value back
    dict_AddKeyValue dict_Key, dict_Value, dict_Index
End Sub

Private Sub dict_RemoveKeyValue(dict_KeyValue As Variant, Optional ByVal dict_Index As Long = -1)
    Dim dict_i As Long
    If dict_Index = -1 Then
        dict_Index = dict_GetKeyIndex(dict_KeyValue(1))
    Else
        dict_Index = dict_Index - 1
    End If

    If dict_Index >= 0 And dict_Index <= UBound(dict_pKeys) Then
        For dict_i = dict_Index To UBound(dict_pKeys) - 1
            dict_pKeys(dict_i) = dict_pKeys(dict_i + 1)

            If VBA.IsObject(dict_pItems(dict_i + 1)) Then
                Set dict_pItems(dict_i) = dict_pItems(dict_i + 1)
            Else
                dict_pItems(dict_i) = dict_pItems(dict_i + 1)
            End If
        Next dict_i

        If UBound(dict_pKeys) = 0 Then
            Erase dict_pKeys
            Erase dict_pItems
        Else
            ReDim Preserve dict_pKeys(0 To UBound(dict_pKeys) - 1)
            ReDim Preserve dict_pItems(0 To UBound(dict_pItems) - 1)
        End If
    End If

    dict_pKeyValues.Remove dict_KeyValue(0)
    dict_RemoveObjectKey dict_KeyValue(1)
End Sub

Private Function dict_GetFormattedKey(dict_Key As Variant) As String
    If VBA.IsObject(dict_Key) Then
        dict_GetFormattedKey = dict_GetObjectKey(dict_Key)
    ElseIf VarType(dict_Key) = VBA.vbBoolean Then
        dict_GetFormattedKey = IIf(dict_Key, "-1__-1", "0__0")
    ElseIf VarType(dict_Key) = VBA.vbString Then
        dict_GetFormattedKey = dict_Key

        If Me.CompareMode = CompareMethod.BinaryCompare Then
            ' Collection does not have method of setting key comparison
            ' So case-sensitive keys aren't supported by default
            ' -> Approach: Append lowercase characters to original key
            '    AbC -> AbC___b_, abc -> abc__abc, ABC -> ABC_____
            Dim dict_Lowercase As String
            dict_Lowercase = ""

            Dim dict_i As Integer
            Dim dict_Char As String
            Dim dict_Ascii As Integer
            For dict_i = 1 To VBA.Len(dict_GetFormattedKey)
                dict_Char = VBA.Mid$(dict_GetFormattedKey, dict_i, 1)
                dict_Ascii = VBA.Asc(dict_Char)
                If dict_Ascii >= 97 And dict_Ascii <= 122 Then
                    dict_Lowercase = dict_Lowercase & dict_Char
                Else
                    dict_Lowercase = dict_Lowercase & "_"
                End If
            Next dict_i

            If dict_Lowercase <> "" Then
                dict_GetFormattedKey = dict_GetFormattedKey & "__" & dict_Lowercase
            End If
        End If
    Else
        ' For numbers, add duplicate to distinguish from strings
        ' ->  123  -> "123__123"
        '    "123" -> "123"
        dict_GetFormattedKey = VBA.CStr(dict_Key) & "__" & CStr(dict_Key)
    End If
End Function

Private Function dict_GetObjectKey(dict_ObjKey As Variant) As String
    Dim dict_i As Integer
    For dict_i = 1 To dict_pObjectKeys.Count
        If dict_pObjectKeys.Item(dict_i) Is dict_ObjKey Then
            dict_GetObjectKey = "__object__" & dict_i
            Exit Function
        End If
    Next dict_i

    dict_pObjectKeys.Add dict_ObjKey
    dict_GetObjectKey = "__object__" & dict_pObjectKeys.Count
End Function

Private Sub dict_RemoveObjectKey(dict_ObjKey As Variant)
    Dim dict_i As Integer
    For dict_i = 1 To dict_pObjectKeys.Count
        If dict_pObjectKeys.Item(dict_i) Is dict_ObjKey Then
            dict_pObjectKeys.Remove dict_i
            Exit Sub
        End If
    Next dict_i
End Sub

Private Function dict_GetKeyIndex(dict_Key As Variant) As Long
    Dim dict_i As Long
    For dict_i = 0 To UBound(dict_pKeys)
        If VBA.IsObject(dict_pKeys(dict_i)) And VBA.IsObject(dict_Key) Then
            If dict_pKeys(dict_i) Is dict_Key Then
                dict_GetKeyIndex = dict_i
                Exit For
            End If
        ElseIf VBA.IsObject(dict_pKeys(dict_i)) Or VBA.IsObject(dict_Key) Then
            ' Both need to be objects to check equality, skip
        ElseIf dict_pKeys(dict_i) = dict_Key Then
            dict_GetKeyIndex = dict_i
            Exit For
        End If
    Next dict_i
End Function

#End If

Private Sub Class_Initialize()
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Set dict_pKeyValues = New Collection

    Erase dict_pKeys
    Erase dict_pItems
    Set dict_pObjectKeys = New Collection
#Else
    Set dict_pDictionary = CreateObject("Scripting.Dictionary")
#End If
End Sub

Private Sub Class_Terminate()
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Set dict_pKeyValues = Nothing
    Set dict_pObjectKeys = Nothing
#Else
    Set dict_pDictionary = Nothing
#End If
End Sub
Attribute VB_Name = "GeoDistance"
Sub GeoDistance()
Attribute GeoDistance.VB_ProcData.VB_Invoke_Func = " \n14"
    
    earth_radius = 3959
    pi = 3.14159265
    deg2rad = pi / 180
    
    lat1 = 38.944989
    lon1 = -84.652371
    lat2 = 39.031934
    lon2 = -84.654186
    
    radLat1 = Application.WorksheetFunction.Radians(lat1)
    radLat2 = Application.WorksheetFunction.Radians(lat2)
    
    dLat = Application.WorksheetFunction.Radians(lat2 - lat1)
    dLon = Application.WorksheetFunction.Radians(lon2 - lon1)
    
    'Compute distance in miles
    a = Sin(dLat / 2) * Sin(dLat / 2) + Cos(deg2rad * lat1) * Cos(deg2rad * lat2) * Sin(dLon / 2) * Sin(dLon / 2)
    c = 2 * WorksheetFunction.Asin(Sqr(a))
    
    dist = earth_radius * c
    dist = Round(dist, 2)
    
    'Compute Azimuth
    dx = Math.Cos(radLat1) * Math.Sin(radLat2) - Math.Sin(radLat1) * Math.Cos(radLat2) * Math.Cos(dLon)
    dy = Math.Cos(radLat2) * Math.Sin(dLon)

    With Application.WorksheetFunction
        Azimuth = .degrees(.Atan2(dx, dy))
        Azimuth = 1 + Abs(Round(Azimuth / 45, 0))
    End With
    
    CompDir = Choose(Azimuth, "N", "NE", "E", "SE", "S", "SW", "W", "NW", "N")
    
    MsgBox dist & " Miles " & CompDir & " Degrees"
    
End Sub
Attribute VB_Name = "IWebAuthenticator"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' IWebAuthenticator v4.0.15
' (c) Tim Hall - https://github.com/VBA-tools/VBA-Web
'
' Interface for creating authenticators for rest client
'
' @class IWebAuthenticator
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' ============================================= '
' Public Methods
' ============================================= '

''
' Hook for taking action before a request is executed
'
' @method BeforeExecute
' @param {WebClient} Client The client that is about to execute the request
' @param in|out {WebRequest} Request The request about to be executed
''
Public Sub BeforeExecute(ByVal Client As WebClient, ByRef request As WebRequest)
    ' e.g Add headers, cookies, etc.
End Sub

''
' Hook for taking action after request has been executed
'
' @method AfterExecute
' @param {WebClient} Client The client that executed request
' @param {WebRequest} Request The request that was just executed
' @param in|out {WebResponse} Response to request
''
Public Sub AfterExecute(ByVal Client As WebClient, ByVal request As WebRequest, ByRef response As WebResponse)
    ' e.g. Handle 401 Unauthorized or other issues
End Sub

''
' Hook for updating http before send
'
' @method PrepareHttp
' @param {WebClient} Client
' @param {WebRequest} Request
' @param in|out {WinHttpRequest} Http
''
Public Sub PrepareHttp(ByVal Client As WebClient, ByVal request As WebRequest, ByRef Http As Object)
    ' e.g. Update option, headers, etc.
End Sub

''
' Hook for updating cURL before send
'
' @method PrepareCurl
' @param {WebClient} Client
' @param {WebRequest} Request
' @param in|out {String} Curl
''
Public Sub PrepareCurl(ByVal Client As WebClient, ByVal request As WebRequest, ByRef Curl As String)
    ' e.g. Add flags to cURL
End Sub
Attribute VB_Name = "Import_manifest"
#If VBA7 Then
    Private Declare PtrSafe Function OpenProcess Lib "kernel32" _
        (ByVal dwDesiredAccess As Long, _
        ByVal bInheritHandle As Long, _
        ByVal dwProcessId As Long) As Long
    
    Private Declare PtrSafe Function GetExitCodeProcess Lib "kernel32" _
        (ByVal hProcess As Long, _
        lpExitCode As Long) As Long
#Else
    Private Declare Function OpenProcess Lib "kernel32" _
        (ByVal dwDesiredAccess As Long, _
        ByVal bInheritHandle As Long, _
        ByVal dwProcessId As Long) As Long
    
    Private Declare Function GetExitCodeProcess Lib "kernel32" _
        (ByVal hProcess As Long, _
        lpExitCode As Long) As Long
#End If


Public Const PROCESS_QUERY_INFORMATION = &H400
Public Const STILL_ACTIVE = &H103

Public Function UrlEncode(StringVal As String, Optional SpaceAsPlus As Boolean = False) As String
  Dim StringLen As Long: StringLen = Len(StringVal)
  
  If StringLen > 0 Then
    ReDim result(StringLen) As String
    Dim i As Long, CharCode As Integer
    Dim Char As String, Space As String
    
    If SpaceAsPlus Then Space = "+" Else Space = "%20"
    
    For i = 1 To StringLen
      Char = Mid$(StringVal, i, 1)
      CharCode = Asc(Char)
        
      Select Case CharCode
      Case 97 To 122, 65 To 90, 48 To 57, 45, 46, 95, 126
        result(i) = Char
      Case 32
        result(i) = Space
      Case 0 To 15
        result(i) = "%0" & Hex(CharCode)
      Case Else
        result(i) = "%" & Hex(CharCode)
      End Select
    Next i
    UrlEncode = Join(result, "")
  End If
End Function
Public Function isIn(stations() As String, Name As String) As Boolean
    
    If UBound(stations) = -1 Then
        isIn = False
        Exit Function
    End If
    
    Dim finalAns As Boolean
    finalAns = False
    
    Dim i As Integer
    For i = 0 To UBound(stations)
        
        If stations(i) = Name Then
            finalAns = True
        End If
        
    Next i
    
    isIn = finalAns
    
End Function

Public Function whereIs(stations() As String, Name As String) As Integer
    
    Dim finalAns As Integer
    
    Dim i As Integer
    For i = 0 To UBound(stations)
        
        If stations(i) = Name Then
            finalAns = i
        End If
        
    Next i
    
    whereIs = finalAns
    
End Function

Function wbkOpen(workbookName As String) As Boolean
    Dim isopen As Boolean
    isopen = False
    
    Dim wbk As Workbook
    For Each wbk In Workbooks
    
        If wbk.Name = workbookName Then
            isopen = True
        End If
        
    Next
    
    wbkOpen = isopen
    
End Function

Function wsOpen(wb As String, worksheetName As String) As Boolean
    Dim isopen As Boolean
    isopen = False
    
    Dim ws As Worksheet
    For Each ws In Workbooks(wb).Worksheets
    
        If ws.Name = worksheetName Then
            isopen = True
        End If
        
    Next
    
    wsOpen = isopen
    
End Function

Public Sub ShellAndWait(ByVal PathName As String, Optional WindowState)
    Dim hProg As Long
    Dim hProcess As Long, ExitCode As Long
    'fill in the missing parameter and execute the program
    If IsMissing(WindowState) Then WindowState = 1
    hProg = Shell(PathName, WindowState)
    'hProg is a "process ID under Win32. To get the process handle:
    hProcess = OpenProcess(PROCESS_QUERY_INFORMATION, False, hProg)
    Do
        'populate Exitcode variable
        GetExitCodeProcess hProcess, ExitCode
        DoEvents
    Loop While ExitCode = STILL_ACTIVE
End Sub

Public Sub ExportRangeToXML()
 
Dim strXML As String
Dim varTable As Variant
Dim intRow As Integer
Dim intCol As Integer
Dim intFileNum As Integer
Dim strFilePath As String
Dim strRowElementName As String
Dim strTableElementName As String
Dim varColumnHeaders As Variant
 
    'Set custom names
    strTableElementName = "Table"
    strRowElementName = "Row"
 
    'Set file path
    'strFilePath = Application.GetSaveAsFilename(, "(*.xml),*.xml", , "Save As...")
    'If strFilePath = vbNullString Then Exit Sub
 
    'Get table data
    varTable = Selection.Value
    varColumnHeaders = Selection.Rows(1).Value
 
    'Build xml
    strXML = "<?xml version=""1.0"" encoding=""utf-8""?>"
    strXML = strXML & "<" & strTableElementName & ">"
    For intRow = 2 To UBound(varTable, 1)
        strXML = strXML & "<" & strRowElementName & ">"
        For intCol = 1 To UBound(varTable, 2)
            strXML = strXML & "<" & varColumnHeaders(1, intCol) & ">" & _
                varTable(intRow, intCol) & "</" & varColumnHeaders(1, intCol) & ">"
        Next
        strXML = strXML & "</" & strRowElementName & ">"
    Next
    strXML = strXML & "</" & strTableElementName & ">"
 
    'Get next file number
    intFileNum = FreeFile
 
    'Open the file, write output, then close file
    Open strFilePath For Output As #intFileNum
    Print #intFileNum, strXML
    Close #intFileNum
 
End Sub




Public Sub Import_manifest()

   
    
    Application.DisplayAlerts = False
    
    Dim customerBook As Workbook
    Dim filter As String
    Dim caption As String
    Dim customerFilename As String
    Dim customerWorkbook As Workbook
    Dim TargetWorkbook As Workbook
    
    Set TargetWorkbook = ThisWorkbook
    
    Dim PathZipProgram As String, NameUnZipFolder As String
    Dim FileNameZip As Variant, ShellStr As String
    
    PathZipProgram = "C:\program files\7-Zip\"
    'If Right(PathZipProgram, 1) <> "\" Then
    '    PathZipProgram = PathZipProgram & "\"
    'End If
    
    If Dir(PathZipProgram & "7z.exe") = "" Then
        PathZipProgram = "C:\Program Files (x86)\7-zip\"
    End If
    
    If Dir(PathZipProgram & "7z.exe") = "" Then
        MsgBox "Please find your copy of 7z.exe and try again"
        Exit Sub
    End If
    
    NameUnZipFolder = Application.DefaultFilePath & "\" & "MSTDXFLIGHT"
    
    If Not Dir(NameUnZipFolder & "\") = "" Then
        On Error Resume Next
        Kill NameUnZipFolder & "\*.*"
        On Error GoTo 0
    End If
    
    'Select the zip file (.zip or .7z files)
    FileNameZip = Application.GetOpenFilename(FileFilter:="Zip Files, *.zip; *.gz, 7z Files, *.7z; *.gz", _
                                              MultiSelect:=True, Title:="Import manifest")

    'Unzip the files/folders from the zip file in the NameUnZipFolder folder
    
    If VarType(FileNameZip) = vbBoolean Then
        Exit Sub
    End If
        'There are a few commands/Switches that you can change in the ShellStr
        'We use x command now to keep the folder stucture, replace it with e if you want only the files
        '-aoa Overwrite All existing files without prompt.
        '-aos Skip extracting of existing files.
        '-aou aUto rename extracting file (for example, name.txt will be renamed to name_1.txt).
        '-aot auto rename existing file (for example, name.txt will be renamed to name_1.txt).
        'Use -r if you also want to unzip the subfolders from the zip file
        'You can add -ppassword if you want to unzip a zip file with password (only 7zip files)
        'Change "*.*" to for example "*.txt" if you only want to unzip the txt files
        'Use "*.xl*" for all Excel files: xls, xlsx, xlsm, xlsb
    Dim i As Integer
    For i = 1 To UBound(FileNameZip)
        ShellStr = PathZipProgram & "7z.exe x -aoa -r" _
                    & " " & Chr(34) & FileNameZip(i) & Chr(34) _
                    & " -o" & Chr(34) & NameUnZipFolder & Chr(34) & " " & "*.*"
    
        ShellAndWait ShellStr, vbHide
        'MsgBox "Look in " & NameUnZipFolder & " for extracted files"
        
        Dim objFSO As Object
        Dim objFolder As Object
        Dim objFile As Object
        
        Set objFSO = CreateObject("Scripting.FileSystemObject")
        Set objFolder = objFSO.GetFolder(NameUnZipFolder)
        
        For Each objFile In objFolder.Files
            customerFilename = objFile.Path
        Next objFile
    
        If wbkOpen(customerFilename) = True Then
            Workbooks(customerFilename).Close
        End If
    
        Set customerWorkbook = Application.Workbooks.Open(customerFilename)
    
        Dim TargetSheet As Worksheet
        Set TargetSheet = TargetWorkbook.Worksheets("Data")
        'targetSheet.Cells.Clear
    
        Dim SourceSheet As Worksheet
        Set SourceSheet = customerWorkbook.ActiveSheet
        
        Dim manRow As Double
        manRow = 1
        
        Dim duplicate As Boolean
        duplicate = False
        
        Do While Sheet2.Cells(manRow, 1).Value <> ""
            If Sheet2.Cells(manRow, 1).Value = "F" Then
                
                Dim tempDup As Boolean
                tempDup = True
                
                Dim manCol As Double
                manCol = 2
                
                Do While manCol < 25 And tempDup = True
                    
                    If SourceSheet.Cells(1, manCol).Value <> Sheet2.Cells(manRow, manCol).Value Then
                        tempDup = False
                    End If
                    
                    manCol = manCol + 1
                Loop
                
                If tempDup = True Then
                    duplicate = True
                End If
                
            End If
            
            manRow = manRow + 1
        Loop
        
        If duplicate = False Then
    
            Dim lastRow As Double
            lastRow = SourceSheet.Cells(SourceSheet.Rows.Count, "B").End(xlUp).row
            
            Dim firstrow As Double
            firstrow = TargetSheet.Cells(TargetSheet.Rows.Count, "A").End(xlUp).row
        
            'sourceSheet.ShowAllData
            SourceSheet.Range("A1:BZ" & lastRow).Copy TargetSheet.Range("A" & firstrow & ":BZ" & lastRow + firstrow)
        
            ' Close customer workbook
            customerWorkbook.Close
            Kill NameUnZipFolder & "\*.*"
            'RmDir NameUnZipFolder & "\"
        Else
            
            customerWorkbook.Close
            Kill NameUnZipFolder & "\*.*"
            RmDir NameUnZipFolder & "\"
            
        End If
    Next i
    
    Dim answer As Long
    answer = MsgBox("Do you have additional alerts to import?", vbYesNo + vbQuestion, "Import manifest")
    
    If answer = vbYes Then
        Import_manifest
    End If
    
    Exit Sub
End Sub

Attribute VB_Name = "JsonConverter"
''
' VBA-JSON v1.0.2
' (c) Tim Hall - https://github.com/VBA-tools/VBA-JSON
'
' JSON Converter for VBA
'
' Errors:
' 10001 - JSON parse error
'
' @class JsonConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
'
' Based originally on vba-json (with extensive changes)
' BSD license included below
'
' JSONLib, http://code.google.com/p/vba-json/
'
' Copyright (c) 2013, Ryo Yokoyama
' All rights reserved.
'
' Redistribution and use in source and binary forms, with or without
' modification, are permitted provided that the following conditions are met:
'     * Redistributions of source code must retain the above copyright
'       notice, this list of conditions and the following disclaimer.
'     * Redistributions in binary form must reproduce the above copyright
'       notice, this list of conditions and the following disclaimer in the
'       documentation and/or other materials provided with the distribution.
'     * Neither the name of the <organization> nor the
'       names of its contributors may be used to endorse or promote products
'       derived from this software without specific prior written permission.
'
' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
' DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
' DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
' (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
' LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
' ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
' SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' === VBA-UTC Headers
#If Mac Then

Private Declare Function utc_popen Lib "libc.dylib" Alias "popen" (ByVal utc_Command As String, ByVal utc_Mode As String) As Long
Private Declare Function utc_pclose Lib "libc.dylib" Alias "pclose" (ByVal utc_File As Long) As Long
Private Declare Function utc_fread Lib "libc.dylib" Alias "fread" (ByVal utc_Buffer As String, ByVal utc_Size As Long, ByVal utc_Number As Long, ByVal utc_File As Long) As Long
Private Declare Function utc_feof Lib "libc.dylib" Alias "feof" (ByVal utc_File As Long) As Long

#ElseIf VBA7 Then

' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724421.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724949.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms725485.aspx
Private Declare PtrSafe Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare PtrSafe Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare PtrSafe Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#Else

Private Declare Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#End If

#If Mac Then

Private Type utc_ShellResult
    utc_Output As String
    utc_ExitCode As Long
End Type

#Else

Private Type utc_SYSTEMTIME
    utc_wYear As Integer
    utc_wMonth As Integer
    utc_wDayOfWeek As Integer
    utc_wDay As Integer
    utc_wHour As Integer
    utc_wMinute As Integer
    utc_wSecond As Integer
    utc_wMilliseconds As Integer
End Type

Private Type utc_TIME_ZONE_INFORMATION
    utc_Bias As Long
    utc_StandardName(0 To 31) As Integer
    utc_StandardDate As utc_SYSTEMTIME
    utc_StandardBias As Long
    utc_DaylightName(0 To 31) As Integer
    utc_DaylightDate As utc_SYSTEMTIME
    utc_DaylightBias As Long
End Type

#End If
' === End VBA-UTC

#If Mac Then
#ElseIf VBA7 Then

Private Declare PtrSafe Sub json_CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (json_MemoryDestination As Any, json_MemorySource As Any, ByVal json_ByteLength As Long)

#Else

Private Declare Sub json_CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (json_MemoryDestination As Any, json_MemorySource As Any, ByVal json_ByteLength As Long)
    
#End If

' ============================================= '
' Public Methods
' ============================================= '

''
' Convert JSON string to object (Dictionary/Collection)
'
' @method ParseJson
' @param {String} json_String
' @return {Object} (Dictionary or Collection)
' @throws 10001 - JSON parse error
''
Public Function ParseJson(ByVal json_String As String, Optional json_ConvertLargeNumbersToString As Boolean = True) As Object
    Dim json_Index As Long
    json_Index = 1
    
    ' Remove vbCr, vbLf, and vbTab from json_String
    json_String = VBA.Replace(VBA.Replace(VBA.Replace(json_String, VBA.vbCr, ""), VBA.vbLf, ""), VBA.vbTab, "")
    
    json_SkipSpaces json_String, json_Index
    Select Case VBA.Mid$(json_String, json_Index, 1)
    Case "{"
        Set ParseJson = json_ParseObject(json_String, json_Index, json_ConvertLargeNumbersToString)
    Case "["
        Set ParseJson = json_ParseArray(json_String, json_Index, json_ConvertLargeNumbersToString)
    Case Else
        ' Error: Invalid JSON string
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '{' or '['")
    End Select
End Function

''
' Convert object (Dictionary/Collection/Array) to JSON
'
' @method ConvertToJson
' @param {Variant} json_DictionaryCollectionOrArray (Dictionary, Collection, or Array)
' @return {String}
''
Public Function ConvertToJson(ByVal json_DictionaryCollectionOrArray As Variant, Optional json_ConvertLargeNumbersFromString As Boolean = True) As String
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    Dim json_Index As Long
    Dim json_LBound As Long
    Dim json_UBound As Long
    Dim json_IsFirstItem As Boolean
    Dim json_Index2D As Long
    Dim json_LBound2D As Long
    Dim json_UBound2D As Long
    Dim json_IsFirstItem2D As Boolean
    Dim json_Key As Variant
    Dim json_Value As Variant
    Dim json_DateStr As String
    
    json_LBound = -1
    json_UBound = -1
    json_IsFirstItem = True
    json_LBound2D = -1
    json_UBound2D = -1
    json_IsFirstItem2D = True

    Select Case VBA.VarType(json_DictionaryCollectionOrArray)
    Case VBA.vbNull, VBA.vbEmpty
        ConvertToJson = "null"
    Case VBA.vbDate
        ' Date
        json_DateStr = ConvertToIso(VBA.CDate(json_DictionaryCollectionOrArray))
        
        ConvertToJson = """" & json_DateStr & """"
    Case VBA.vbString
        ' String (or large number encoded as string)
        If json_ConvertLargeNumbersFromString And json_StringIsLargeNumber(json_DictionaryCollectionOrArray) Then
            ConvertToJson = json_DictionaryCollectionOrArray
        Else
            ConvertToJson = """" & json_Encode(json_DictionaryCollectionOrArray) & """"
        End If
    Case VBA.vbBoolean
        If json_DictionaryCollectionOrArray Then
            ConvertToJson = "true"
        Else
            ConvertToJson = "false"
        End If
    Case VBA.vbArray To VBA.vbArray + VBA.vbByte
        ' Array
        json_BufferAppend json_buffer, "[", json_BufferPosition, json_BufferLength
        
        On Error Resume Next
        
        json_LBound = LBound(json_DictionaryCollectionOrArray, 1)
        json_UBound = UBound(json_DictionaryCollectionOrArray, 1)
        json_LBound2D = LBound(json_DictionaryCollectionOrArray, 2)
        json_UBound2D = UBound(json_DictionaryCollectionOrArray, 2)
        
        If json_LBound >= 0 And json_UBound >= 0 Then
            For json_Index = json_LBound To json_UBound
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                End If
            
                If json_LBound2D >= 0 And json_UBound2D >= 0 Then
                    json_BufferAppend json_buffer, "[", json_BufferPosition, json_BufferLength
                
                    For json_Index2D = json_LBound2D To json_UBound2D
                        If json_IsFirstItem2D Then
                            json_IsFirstItem2D = False
                        Else
                            json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                        End If
                        
                        json_BufferAppend json_buffer, _
                            ConvertToJson(json_DictionaryCollectionOrArray(json_Index, json_Index2D), _
                                json_ConvertLargeNumbersFromString), _
                            json_BufferPosition, json_BufferLength
                    Next json_Index2D
                    
                    json_BufferAppend json_buffer, "]", json_BufferPosition, json_BufferLength
                    json_IsFirstItem2D = True
                Else
                    json_BufferAppend json_buffer, _
                        ConvertToJson(json_DictionaryCollectionOrArray(json_Index), _
                            json_ConvertLargeNumbersFromString), _
                        json_BufferPosition, json_BufferLength
                End If
            Next json_Index
        End If
        
        On Error GoTo 0
        
        json_BufferAppend json_buffer, "]", json_BufferPosition, json_BufferLength
        
        ConvertToJson = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
    
    ' Dictionary or Collection
    Case VBA.vbObject
        ' Dictionary
        If VBA.TypeName(json_DictionaryCollectionOrArray) = "Dictionary" Then
            json_BufferAppend json_buffer, "{", json_BufferPosition, json_BufferLength
            For Each json_Key In json_DictionaryCollectionOrArray.Keys
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                End If
            
                json_BufferAppend json_buffer, _
                    """" & json_Key & """:" & ConvertToJson(json_DictionaryCollectionOrArray(json_Key), json_ConvertLargeNumbersFromString), _
                    json_BufferPosition, json_BufferLength
            Next json_Key
            json_BufferAppend json_buffer, "}", json_BufferPosition, json_BufferLength
        
        ' Collection
        ElseIf VBA.TypeName(json_DictionaryCollectionOrArray) = "Collection" Then
            json_BufferAppend json_buffer, "[", json_BufferPosition, json_BufferLength
            For Each json_Value In json_DictionaryCollectionOrArray
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                End If
            
                json_BufferAppend json_buffer, _
                    ConvertToJson(json_Value, json_ConvertLargeNumbersFromString), _
                    json_BufferPosition, json_BufferLength
            Next json_Value
            json_BufferAppend json_buffer, "]", json_BufferPosition, json_BufferLength
        End If
        
        ConvertToJson = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
    Case Else
        ' Number
        On Error Resume Next
        ConvertToJson = VBA.Replace(json_DictionaryCollectionOrArray, ",", ".")
        On Error GoTo 0
    End Select
End Function

' ============================================= '
' Private Functions
' ============================================= '

Private Function json_ParseObject(json_String As String, ByRef json_Index As Long, Optional json_ConvertLargeNumbersToString As Boolean = True) As Dictionary
    Dim json_Key As String
    Dim json_NextChar As String
    
    Set json_ParseObject = New Dictionary
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "{" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '{'")
    Else
        json_Index = json_Index + 1
        
        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "}" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If
            
            json_Key = json_ParseKey(json_String, json_Index)
            json_NextChar = json_Peek(json_String, json_Index)
            If json_NextChar = "[" Or json_NextChar = "{" Then
                Set json_ParseObject.Item(json_Key) = json_ParseValue(json_String, json_Index, json_ConvertLargeNumbersToString)
            Else
                json_ParseObject.Item(json_Key) = json_ParseValue(json_String, json_Index, json_ConvertLargeNumbersToString)
            End If
        Loop
    End If
End Function

Private Function json_ParseArray(json_String As String, ByRef json_Index As Long, Optional json_ConvertLargeNumbersToString As Boolean = True) As Collection
    Set json_ParseArray = New Collection
    
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "[" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '['")
    Else
        json_Index = json_Index + 1
        
        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "]" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If
            
            json_ParseArray.Add json_ParseValue(json_String, json_Index, json_ConvertLargeNumbersToString)
        Loop
    End If
End Function

Private Function json_ParseValue(json_String As String, ByRef json_Index As Long, Optional json_ConvertLargeNumbersToString As Boolean = True) As Variant
    json_SkipSpaces json_String, json_Index
    Select Case VBA.Mid$(json_String, json_Index, 1)
    Case "{"
        Set json_ParseValue = json_ParseObject(json_String, json_Index)
    Case "["
        Set json_ParseValue = json_ParseArray(json_String, json_Index)
    Case """", "'"
        json_ParseValue = json_ParseString(json_String, json_Index)
    Case Else
        If VBA.Mid$(json_String, json_Index, 4) = "true" Then
            json_ParseValue = True
            json_Index = json_Index + 4
        ElseIf VBA.Mid$(json_String, json_Index, 5) = "false" Then
            json_ParseValue = False
            json_Index = json_Index + 5
        ElseIf VBA.Mid$(json_String, json_Index, 4) = "null" Then
            json_ParseValue = Null
            json_Index = json_Index + 4
        ElseIf VBA.InStr("+-0123456789", VBA.Mid$(json_String, json_Index, 1)) Then
            json_ParseValue = json_ParseNumber(json_String, json_Index, json_ConvertLargeNumbersToString)
        Else
            Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['")
        End If
    End Select
End Function

Private Function json_ParseString(json_String As String, ByRef json_Index As Long) As String
    Dim json_Quote As String
    Dim json_Char As String
    Dim json_Code As String
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    
    json_SkipSpaces json_String, json_Index
    
    ' Store opening quote to look for matching closing quote
    json_Quote = VBA.Mid$(json_String, json_Index, 1)
    json_Index = json_Index + 1
    
    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)
        
        Select Case json_Char
        Case "\"
            ' Escaped string, \\, or \/
            json_Index = json_Index + 1
            json_Char = VBA.Mid$(json_String, json_Index, 1)
            
            Select Case json_Char
            Case """", "\", "/", "'"
                json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "b"
                json_BufferAppend json_buffer, vbBack, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "f"
                json_BufferAppend json_buffer, vbFormFeed, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "n"
                json_BufferAppend json_buffer, vbCrLf, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "r"
                json_BufferAppend json_buffer, vbCr, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "t"
                json_BufferAppend json_buffer, vbTab, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "u"
                ' Unicode character escape (e.g. \u00a9 = Copyright)
                json_Index = json_Index + 1
                json_Code = VBA.Mid$(json_String, json_Index, 4)
                json_BufferAppend json_buffer, VBA.ChrW(VBA.val("&h" + json_Code)), json_BufferPosition, json_BufferLength
                json_Index = json_Index + 4
            End Select
        Case json_Quote
            json_ParseString = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
            json_Index = json_Index + 1
            Exit Function
        Case Else
            json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
            json_Index = json_Index + 1
        End Select
    Loop
End Function

Private Function json_ParseNumber(json_String As String, ByRef json_Index As Long, Optional json_ConvertLargeNumbersToString As Boolean = True) As Variant
    Dim json_Char As String
    Dim json_Value As String
    
    json_SkipSpaces json_String, json_Index
    
    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)
        
        If VBA.InStr("+-0123456789.eE", json_Char) Then
            ' Unlikely to have massive number, so use simple append rather than buffer here
            json_Value = json_Value & json_Char
            json_Index = json_Index + 1
        Else
            ' Excel only stores 15 significant digits, so any numbers larger than that are truncated
            ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
            ' See: http://support.microsoft.com/kb/269370
            '
            ' Fix: Parse -> String, Convert -> String longer than 15 characters containing only numbers and decimal points -> Number
            If json_ConvertLargeNumbersToString And Len(json_Value) >= 16 Then
                json_ParseNumber = json_Value
            Else
                ' VBA.Val does not use regional settings, so guard for comma is not needed
                json_ParseNumber = VBA.val(json_Value)
            End If
            Exit Function
        End If
    Loop
End Function

Private Function json_ParseKey(json_String As String, ByRef json_Index As Long) As String
    ' Parse key with single or double quotes
    json_ParseKey = json_ParseString(json_String, json_Index)
    
    ' Check for colon and skip if present or throw if not present
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> ":" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting ':'")
    Else
        json_Index = json_Index + 1
    End If
End Function

Private Function json_Encode(ByVal json_Text As Variant) As String
    ' Reference: http://www.ietf.org/rfc/rfc4627.txt
    ' Escape: ", \, /, backspace, form feed, line feed, carriage return, tab
    Dim json_Index As Long
    Dim json_Char As String
    Dim json_AscCode As Long
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    
    For json_Index = 1 To VBA.Len(json_Text)
        json_Char = VBA.Mid$(json_Text, json_Index, 1)
        json_AscCode = VBA.AscW(json_Char)
        
        Select Case json_AscCode
        ' " -> 34 -> \"
        Case 34
            json_Char = "\"""
        ' \ -> 92 -> \\
        Case 92
            json_Char = "\\"
        ' / -> 47 -> \/
        Case 47
            json_Char = "\/"
        ' backspace -> 8 -> \b
        Case 8
            json_Char = "\b"
        ' form feed -> 12 -> \f
        Case 12
            json_Char = "\f"
        ' line feed -> 10 -> \n
        Case 10
            json_Char = "\n"
        ' carriage return -> 13 -> \r
        Case 13
            json_Char = "\r"
        ' tab -> 9 -> \t
        Case 9
            json_Char = "\t"
        ' Non-ascii characters -> convert to 4-digit hex
        Case 0 To 31, 127 To 65535
            json_Char = "\u" & VBA.Right$("0000" & VBA.Hex$(json_AscCode), 4)
        End Select
            
        json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
    Next json_Index
    
    json_Encode = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
End Function

Private Function json_Peek(json_String As String, ByVal json_Index As Long, Optional json_NumberOfCharacters As Long = 1) As String
    ' "Peek" at the next number of characters without incrementing json_Index (ByVal instead of ByRef)
    json_SkipSpaces json_String, json_Index
    json_Peek = VBA.Mid$(json_String, json_Index, json_NumberOfCharacters)
End Function

Private Sub json_SkipSpaces(json_String As String, ByRef json_Index As Long)
    ' Increment index to skip over spaces
    Do While json_Index > 0 And json_Index <= VBA.Len(json_String) And VBA.Mid$(json_String, json_Index, 1) = " "
        json_Index = json_Index + 1
    Loop
End Sub

Private Function json_StringIsLargeNumber(json_String As Variant) As Boolean
    ' Check if the given string is considered a "large number"
    ' (See json_ParseNumber)
    
    Dim json_Length As Long
    Dim json_CharIndex As Long
    json_Length = VBA.Len(json_String)
    
    ' Length with be at least 16 characters and assume will be less than 100 characters
    If json_Length >= 16 And json_Length <= 100 Then
        Dim json_CharCode As String
        Dim json_Index As Long
        
        json_StringIsLargeNumber = True
        
        For json_CharIndex = 1 To json_Length
            json_CharCode = VBA.Asc(VBA.Mid$(json_String, json_CharIndex, 1))
            Select Case json_CharCode
            ' Look for .|0-9|E|e
            Case 46, 48 To 57, 69, 101
                ' Continue through characters
            Case Else
                json_StringIsLargeNumber = False
                Exit Function
            End Select
        Next json_CharIndex
    End If
End Function

Private Function json_ParseErrorMessage(json_String As String, ByRef json_Index As Long, ErrorMessage As String)
    ' Provide detailed parse error message, including details of where and what occurred
    '
    ' Example:
    ' Error parsing JSON:
    ' {"abcde":True}
    '          ^
    ' Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['
    
    Dim json_StartIndex As Long
    Dim json_StopIndex As Long
    
    ' Include 10 characters before and after error (if possible)
    json_StartIndex = json_Index - 10
    json_StopIndex = json_Index + 10
    If json_StartIndex <= 0 Then
        json_StartIndex = 1
    End If
    If json_StopIndex > VBA.Len(json_String) Then
        json_StopIndex = VBA.Len(json_String)
    End If

    json_ParseErrorMessage = "Error parsing JSON:" & VBA.vbNewLine & _
                             VBA.Mid$(json_String, json_StartIndex, json_StopIndex - json_StartIndex + 1) & VBA.vbNewLine & _
                             VBA.Space$(json_Index - json_StartIndex) & "^" & VBA.vbNewLine & _
                             ErrorMessage
End Function

Private Sub json_BufferAppend(ByRef json_buffer As String, _
                              ByRef json_Append As Variant, _
                              ByRef json_BufferPosition As Long, _
                              ByRef json_BufferLength As Long)
#If Mac Then
    json_buffer = json_buffer & json_Append
#Else
    ' VBA can be slow to append strings due to allocating a new string for each append
    ' Instead of using the traditional append, allocate a large empty string and then copy string at append position
    '
    ' Example:
    ' Buffer: "abc  "
    ' Append: "def"
    ' Buffer Position: 3
    ' Buffer Length: 5
    '
    ' Buffer position + Append length > Buffer length -> Append chunk of blank space to buffer
    ' Buffer: "abc       "
    ' Buffer Length: 10
    '
    ' Copy memory for "def" into buffer at position 3 (0-based)
    ' Buffer: "abcdef    "
    '
    ' Approach based on cStringBuilder from vbAccelerator
    ' http://www.vbaccelerator.com/home/VB/Code/Techniques/RunTime_Debug_Tracing/VB6_Tracer_Utility_zip_cStringBuilder_cls.asp

    Dim json_AppendLength As Long
    Dim json_LengthPlusPosition As Long
    
    json_AppendLength = VBA.LenB(json_Append)
    json_LengthPlusPosition = json_AppendLength + json_BufferPosition
    
    If json_LengthPlusPosition > json_BufferLength Then
        ' Appending would overflow buffer, add chunks until buffer is long enough
        Dim json_TemporaryLength As Long
        
        json_TemporaryLength = json_BufferLength
        Do While json_TemporaryLength < json_LengthPlusPosition
            ' Initially, initialize string with 255 characters,
            ' then add large chunks (8192) after that
            '
            ' Size: # Characters x 2 bytes / character
            If json_TemporaryLength = 0 Then
                json_TemporaryLength = json_TemporaryLength + 510
            Else
                json_TemporaryLength = json_TemporaryLength + 16384
            End If
        Loop
        
        json_buffer = json_buffer & VBA.Space$((json_TemporaryLength - json_BufferLength) \ 2)
        json_BufferLength = json_TemporaryLength
    End If
    
    ' Copy memory from append to buffer at buffer position
    json_CopyMemory ByVal json_UnsignedAdd(StrPtr(json_buffer), _
                    json_BufferPosition), _
                    ByVal StrPtr(json_Append), _
                    json_AppendLength
    
    json_BufferPosition = json_BufferPosition + json_AppendLength
#End If
End Sub

Private Function json_BufferToString(ByRef json_buffer As String, ByVal json_BufferPosition As Long, ByVal json_BufferLength As Long) As String
#If Mac Then
    json_BufferToString = json_buffer
#Else
    If json_BufferPosition > 0 Then
        json_BufferToString = VBA.Left$(json_buffer, json_BufferPosition \ 2)
    End If
#End If
End Function

#If VBA7 Then
Private Function json_UnsignedAdd(json_Start As LongPtr, json_Increment As Long) As LongPtr
#Else
Private Function json_UnsignedAdd(json_Start As Long, json_Increment As Long) As Long
#End If

    If json_Start And &H80000000 Then
        json_UnsignedAdd = json_Start + json_Increment
    ElseIf (json_Start Or &H80000000) < -json_Increment Then
        json_UnsignedAdd = json_Start + json_Increment
    Else
        json_UnsignedAdd = (json_Start + &H80000000) + (json_Increment + &H80000000)
    End If
End Function

''
' VBA-UTC v1.0.1
' (c) Tim Hall - https://github.com/VBA-tools/VBA-UtcConverter
'
' UTC/ISO 8601 Converter for VBA
'
' Errors:
' 10011 - UTC parsing error
' 10012 - UTC conversion error
' 10013 - ISO 8601 parsing error
' 10014 - ISO 8601 conversion error
'
' @module UtcConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' (Declarations moved to top)

' ============================================= '
' Public Methods
' ============================================= '

''
' Parse UTC date to local date
'
' @method ParseUtc
' @param {Date} UtcDate
' @return {Date} Local date
' @throws 10011 - UTC parsing error
''
Public Function ParseUtc(utc_UtcDate As Date) As Date
    On Error GoTo utc_ErrorHandling
    
#If Mac Then
    ParseUtc = utc_ConvertDate(utc_UtcDate)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_LocalDate As utc_SYSTEMTIME
    
    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_SystemTimeToTzSpecificLocalTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_UtcDate), utc_LocalDate
    
    ParseUtc = utc_SystemTimeToDate(utc_LocalDate)
#End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10011, "UtcConverter.ParseUtc", "UTC parsing error: " & Err.Number & " - " & Err.Description
End Function

''
' Convert local date to UTC date
'
' @method ConvertToUrc
' @param {Date} utc_LocalDate
' @return {Date} UTC date
' @throws 10012 - UTC conversion error
''
Public Function ConvertToUtc(utc_LocalDate As Date) As Date
    On Error GoTo utc_ErrorHandling
    
#If Mac Then
    ConvertToUtc = utc_ConvertDate(utc_LocalDate, utc_ConvertToUtc:=True)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_UtcDate As utc_SYSTEMTIME
    
    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_TzSpecificLocalTimeToSystemTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_LocalDate), utc_UtcDate
    
    ConvertToUtc = utc_SystemTimeToDate(utc_UtcDate)
#End If
    
    Exit Function
    
utc_ErrorHandling:
    Err.Raise 10012, "UtcConverter.ConvertToUtc", "UTC conversion error: " & Err.Number & " - " & Err.Description
End Function

''
' Parse ISO 8601 date string to local date
'
' @method ParseIso
' @param {Date} utc_IsoString
' @return {Date} Local date
' @throws 10013 - ISO 8601 parsing error
''
Public Function ParseIso(utc_IsoString As String) As Date
    On Error GoTo utc_ErrorHandling
    
    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String
    Dim utc_OffsetIndex As Long
    Dim utc_HasOffset As Boolean
    Dim utc_NegativeOffset As Boolean
    Dim utc_OffsetParts() As String
    Dim utc_Offset As Date
    
    utc_Parts = VBA.Split(utc_IsoString, "T")
    utc_DateParts = VBA.Split(utc_Parts(0), "-")
    ParseIso = VBA.DateSerial(VBA.CInt(utc_DateParts(0)), VBA.CInt(utc_DateParts(1)), VBA.CInt(utc_DateParts(2)))
    
    If UBound(utc_Parts) > 0 Then
        If VBA.InStr(utc_Parts(1), "Z") Then
            utc_TimeParts = VBA.Split(VBA.Replace(utc_Parts(1), "Z", ""), ":")
        Else
            utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "+")
            If utc_OffsetIndex = 0 Then
                utc_NegativeOffset = True
                utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "-")
            End If
            
            If utc_OffsetIndex > 0 Then
                utc_HasOffset = True
                utc_TimeParts = VBA.Split(VBA.Left$(utc_Parts(1), utc_OffsetIndex - 1), ":")
                utc_OffsetParts = VBA.Split(VBA.Right$(utc_Parts(1), Len(utc_Parts(1)) - utc_OffsetIndex), ":")
                
                Select Case UBound(utc_OffsetParts)
                Case 0
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), 0, 0)
                Case 1
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), 0)
                Case 2
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), VBA.CInt(utc_OffsetParts(2)))
                End Select
                
                If utc_NegativeOffset Then: utc_Offset = -utc_Offset
            Else
                utc_TimeParts = VBA.Split(utc_Parts(1), ":")
            End If
        End If
        
        Select Case UBound(utc_TimeParts)
        Case 0
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), 0, 0)
        Case 1
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), 0)
        Case 2
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), VBA.CInt(utc_TimeParts(2)))
        End Select
        
        If utc_HasOffset Then
            ParseIso = ParseIso + utc_Offset
        Else
            ParseIso = ParseUtc(ParseIso)
        End If
    End If
    
    Exit Function
    
utc_ErrorHandling:
    Err.Raise 10013, "UtcConverter.ParseIso", "ISO 8601 parsing error for " & utc_IsoString & ": " & Err.Number & " - " & Err.Description
End Function

''
' Convert local date to ISO 8601 string
'
' @method ConvertToIso
' @param {Date} utc_LocalDate
' @return {Date} ISO 8601 string
' @throws 10014 - ISO 8601 conversion error
''
Public Function ConvertToIso(utc_LocalDate As Date) As String
    On Error GoTo utc_ErrorHandling
    
    ConvertToIso = VBA.Format$(ConvertToUtc(utc_LocalDate), "yyyy-mm-ddTHH:mm:ss.000Z")
    
    Exit Function
    
utc_ErrorHandling:
    Err.Raise 10014, "UtcConverter.ConvertToIso", "ISO 8601 conversion error: " & Err.Number & " - " & Err.Description
End Function

' ============================================= '
' Private Functions
' ============================================= '

#If Mac Then

Private Function utc_ConvertDate(utc_Value As Date, Optional utc_ConvertToUtc As Boolean = False) As Date
    Dim utc_ShellCommand As String
    Dim utc_Result As utc_ShellResult
    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String
    
    If utc_ConvertToUtc Then
        utc_ShellCommand = "date -ur `date -jf '%Y-%m-%d %H:%M:%S' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & "' " & _
            " +'%s'` +'%Y-%m-%d %H:%M:%S'"
    Else
        utc_ShellCommand = "date -jf '%Y-%m-%d %H:%M:%S %z' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & " +0000' " & _
            "+'%Y-%m-%d %H:%M:%S'"
    End If
    
    utc_Result = utc_ExecuteInShell(utc_ShellCommand)
    
    If utc_Result.utc_Output = "" Then
        Err.Raise 10015, "UtcConverter.utc_ConvertDate", "'date' command failed"
    Else
        utc_Parts = Split(utc_Result.utc_Output, " ")
        utc_DateParts = Split(utc_Parts(0), "-")
        utc_TimeParts = Split(utc_Parts(1), ":")
        
        utc_ConvertDate = DateSerial(utc_DateParts(0), utc_DateParts(1), utc_DateParts(2)) + _
            TimeSerial(utc_TimeParts(0), utc_TimeParts(1), utc_TimeParts(2))
    End If
End Function

Private Function utc_ExecuteInShell(utc_ShellCommand As String) As utc_ShellResult
    Dim utc_File As Long
    Dim utc_Chunk As String
    Dim utc_Read As Long
    
    On Error GoTo utc_ErrorHandling
    utc_File = utc_popen(utc_ShellCommand, "r")
    
    If utc_File = 0 Then: Exit Function
    
    Do While utc_feof(utc_File) = 0
        utc_Chunk = VBA.Space$(50)
        utc_Read = utc_fread(utc_Chunk, 1, Len(utc_Chunk) - 1, utc_File)
        If utc_Read > 0 Then
            utc_Chunk = VBA.Left$(utc_Chunk, utc_Read)
            utc_ExecuteInShell.utc_Output = utc_ExecuteInShell.utc_Output & utc_Chunk
        End If
    Loop

utc_ErrorHandling:
    utc_ExecuteInShell.utc_ExitCode = utc_pclose(utc_File)
End Function

#Else

Private Function utc_DateToSystemTime(utc_Value As Date) As utc_SYSTEMTIME
    utc_DateToSystemTime.utc_wYear = VBA.Year(utc_Value)
    utc_DateToSystemTime.utc_wMonth = VBA.Month(utc_Value)
    utc_DateToSystemTime.utc_wDay = VBA.Day(utc_Value)
    utc_DateToSystemTime.utc_wHour = VBA.Hour(utc_Value)
    utc_DateToSystemTime.utc_wMinute = VBA.Minute(utc_Value)
    utc_DateToSystemTime.utc_wSecond = VBA.Second(utc_Value)
    utc_DateToSystemTime.utc_wMilliseconds = 0
End Function

Private Function utc_SystemTimeToDate(utc_Value As utc_SYSTEMTIME) As Date
    utc_SystemTimeToDate = DateSerial(utc_Value.utc_wYear, utc_Value.utc_wMonth, utc_Value.utc_wDay) + _
        TimeSerial(utc_Value.utc_wHour, utc_Value.utc_wMinute, utc_Value.utc_wSecond)
End Function

#End If
Attribute VB_Name = "Module1"
Sub AAA()
Attribute AAA.VB_ProcData.VB_Invoke_Func = " \n14"
'
' AAA Macro
'

'
    StationName = Sheets("Setup").Range("C7").Value
    FromRte = "BKEB"
    ToRte = "BKEA"
    
    earth_radius = 3959
    pi = 3.14159265
    deg2rad = pi / 180
    
    Sheets(StationName).Select
    Selection.AutoFilter Field:=2, Criteria1:=FromRte, Operator:=xlOr, Criteria2:=ToRte
    lastRow = Range("A" & Rows.Count).End(xlUp).row
    Range("A1:Z" & lastRow).Copy
    Sheets.Add
    Selection.PasteSpecial Paste:=xlPasteValues
    ActiveSheet.Name = "Temp"
    
    lastRow = Range("A" & Rows.Count).End(xlUp).row
    For row = 2 To lastRow
        Route = Range("B" & row).Value
        LatLon = Range("Z" & row).Value
        LatLonLen = Len(LatLon)
        If Route = FromRte And LatLonLen > 6 Then
            CommaPosit = InStr(LatLon, ",")
            Lat = Left(LatLon, CommaPosit - 1) * 1
            Lon = Mid(LatLon, CommaPosit + 1) * 1
            Range("AA" & row).Value = Lat
            Range("AB" & row).Value = Lon
            LatSumFromRte = LatSumFromRte + Lat
            LonSumFromRte = LonSumFromRte + Lon
            FromRteCounter = FromRteCounter + 1
        End If
        If Route = ToRte And LatLonLen > 6 Then
            CommaPosit = InStr(LatLon, ",")
            Lat = Left(LatLon, CommaPosit - 1) * 1
            Lon = Mid(LatLon, CommaPosit + 1) * 1
            Range("AA" & row).Value = Lat
            Range("AB" & row).Value = Lon
            LatSumToRte = LatSumToRte + Lat
            LonSumToRte = LonSumToRte + Lon
            ToRteCounter = ToRteCounter + 1
        End If
    Next row
    LatMidPtFrom = LatSumFromRte / FromRteCounter
    LonMidPtFrom = LonSumFromRte / FromRteCounter
    LatMidPtTo = LatSumToRte / ToRteCounter
    LonMidPtTo = LonSumToRte / ToRteCounter
    'Range("AC2").Value = LatMidPtFrom
    'Range("AC3").Value = LonMidPtFrom
    'Range("AC4").Value = LatMidPtTo
    'Range("AC5").Value = LonMidPtTo
    
    On Error Resume Next
    For row = 2 To lastRow
        Route = Range("B" & row).Value
        LatLon = Range("Z" & row).Value
        LatLonLen = Len(LatLon)
        If Route = FromRte And LatLonLen > 6 Then
            lat2 = Range("AA" & row).Value
            lon2 = Range("AB" & row).Value
            
            lat1 = LatMidPtTo
            lon1 = LonMidPtTo
            
            radLat1 = Application.WorksheetFunction.Radians(lat1)
            radLat2 = Application.WorksheetFunction.Radians(lat2)
            
            dLat = Application.WorksheetFunction.Radians(lat2 - lat1)
            dLon = Application.WorksheetFunction.Radians(lon2 - lon1)
            
            'Compute distance in miles
            a = Sin(dLat / 2) * Sin(dLat / 2) + Cos(deg2rad * lat1) * Cos(deg2rad * lat2) * Sin(dLon / 2) * Sin(dLon / 2)
            c = 2 * WorksheetFunction.Asin(Sqr(a))
            
            dist = earth_radius * c
            dist = Round(dist, 2)
            
            'Compute Azimuth
            dx = Math.Cos(radLat1) * Math.Sin(radLat2) - Math.Sin(radLat1) * Math.Cos(radLat2) * Math.Cos(dLon)
            dy = Math.Cos(radLat2) * Math.Sin(dLon)
        
            With Application.WorksheetFunction
                Azimuth = .degrees(.Atan2(dx, dy))
                Azimuth = 1 + Abs(Round(Azimuth / 45, 0))
            End With
        
            CompDir = Choose(Azimuth, "N", "NE", "E", "SE", "S", "SW", "W", "NW", "N")
            
            Range("AC" & row).Value = dist
            Range("AD" & row).Value = CompDir
            
        End If
        
        If Route = ToRte And LatLonLen > 6 Then
            lat2 = Range("AA" & row).Value
            lon2 = Range("AB" & row).Value
            
            lat1 = LatMidPtFrom
            lon1 = LonMidPtFrom
            
            radLat1 = Application.WorksheetFunction.Radians(lat1)
            radLat2 = Application.WorksheetFunction.Radians(lat2)
            
            dLat = Application.WorksheetFunction.Radians(lat2 - lat1)
            dLon = Application.WorksheetFunction.Radians(lon2 - lon1)
            
            'Compute distance in miles
            a = Sin(dLat / 2) * Sin(dLat / 2) + Cos(deg2rad * lat1) * Cos(deg2rad * lat2) * Sin(dLon / 2) * Sin(dLon / 2)
            c = 2 * WorksheetFunction.Asin(Sqr(a))
            
            dist = earth_radius * c
            dist = Round(dist, 2)
            
            'Compute Azimuth
            dx = Math.Cos(radLat1) * Math.Sin(radLat2) - Math.Sin(radLat1) * Math.Cos(radLat2) * Math.Cos(dLon)
            dy = Math.Cos(radLat2) * Math.Sin(dLon)
        
            With Application.WorksheetFunction
                Azimuth = .degrees(.Atan2(dx, dy))
                Azimuth = 1 + Abs(Round(Azimuth / 45, 0))
            End With
        
            CompDir = Choose(Azimuth, "N", "NE", "E", "SE", "S", "SW", "W", "NW", "N")
            
            Range("AC" & row).Value = dist
            Range("AD" & row).Value = CompDir
        End If
    Next row
    
End Sub
Attribute VB_Name = "Program"
Private Const strDatabase As String = "US_IE"
Private Const strUser As String = "us_ie_user"
Private Const strPW As String = "usie1234"
Private Const sqlConnectionString As String = "Provider=SQLOLEDB.1;" & _
        "Data Source=sqlserver.dhl.com;" & _
        "Database=" & strDatabase & ";" & _
        "User ID=" & strUser & ";" & _
        "Password=" & strPW & ";"
Private Const sqlFields As String = "strHWB, strROUTE, strPOSITION, strSPECIALINSTRUCTIONS, strDELIVERYINSTRUCTIONS, strORIGIN, strCOUNTRY, strDESTINATION, strPRODUCT" & _
    ", strPIECES, strWEIGHT, strCONTENTS, strVALUE, strCURRENCY, strSHIPPER, strRECEIVER, strCONTACT, strADDRESS1, strADDRESS2, strCITY, strPOSTCODE, strPHONE, strACCOUNT" & _
    ", strEDD, strRESICOMM, strCOORDINATES"
Private Const sqlSizes As String = "10, 10, 5, 50, 50 , 50, 50, 50 , 50, 50, 50, 50, 50, 50, 50, 50, 255, 255, 255, 50, 50, 50, 50, 50, 50, 50"
Private Const zipFields As String = "strIATA, strPostalCode, strRegRoute, charRegQuadrant, strHeavyRoute, charHeavyQuadrant, strPMRoute, charPMQuadrant, strSplit"
Private Const zipSizes As String = "3, 10, 10, 2, 10, 2, 10, 2, 10"
Private Const routeFields As String = "strIATA, strRoute, intMinStops, intMaxStops, charSortInstruction, charPM"
Private Const routeSizes As String = "3, 10, 32, 32, 1, 1"

Public NewRoute As String
Public SortLogic As String

Sub Station()
'
'   Station Macro
'   Macro (originally) recorded 1/11/2013 by James Singel
'
'   Minor updates by Del Shawn Kirksey
'
'   This macro organizes the manifest data in an easy to read/print/use
'   format to be used at any service center in the United States
'


    Dim iata As String
    iata = Sheets("Setup").Range("C7").Value
    
    If Len(iata) = 3 Then
        InsertTransaction strToolName, ThisToolsVersion, Environ("USERNAME"), Environ("COMPUTERNAME"), GetClientIP, "tool_CheckToolVersion", "CheckToolVersion", _
                  iata & ": Start of Day Started", Date, 0, 0, 0, 0, _
                  Environ("OS"), Environ("NUMBER_OF_PROCESSORS"), Environ("PROCESSOR_ARCHITECTURE"), Environ("PROCESSOR_IDENTIFIER"), Environ("PROCESSOR_LEVEL"), Environ("PROCESSOR_REVISION"), Environ("USERDNSDOMAIN"), Environ("USERDOMAIN"), Application.Version
    Else:
        MsgBox "Please enter a valid station IATA on the Setup Sheet", vbOKOnly
        Sheets("Setup").Select
        Sheets("Setup").Range("C7").Select
        Exit Sub
    End If
    
    RefreshWorkbook
    RetrieveAttempts
    Sheets("Cover").Select
    
    MsgBox "Select your Pre-Alerts on the next pop up"
    Import_manifest.Import_manifest
    
    On Error Resume Next 'Delete blank rows
    Sheets("Data").Select
    lastRow = Sheets("Data").UsedRange.Rows.Count
    Range("A1:A" & lastRow).Select
    Selection.SpecialCells(xlCellTypeBlanks).EntireRow.Delete
    On Error GoTo 0

If n = 1 Then

    'Format PID sheet
    Application.StatusBar = "PID to HWB Matching"
    Application.ScreenUpdating = False
    
    Sheets("PID").Visible = True
    Sheets("PID").Select
    Range("A:F").Delete
    
    Sheets("Data").Select
    Rows("1:1").Select
    Selection.AutoFilter
    Selection.AutoFilter Field:=1, Criteria1:="=A", _
        Operator:=xlOr, Criteria2:="=P"
    lastRow = ActiveSheet.UsedRange.Rows.Count
    Range("A1:E" & lastRow).Select
    Selection.SpecialCells(xlCellTypeVisible).Select
    Selection.Copy
    
    Sheets("PID").Select
    Range("A1").Select
    ActiveSheet.Paste
    
    lastRow = ActiveSheet.UsedRange.Rows.Count
    row = 1
    While row < lastRow + 1
        RowID = Range("A" & row).Value
        If RowID = "A" Then
            hwb = Range("E" & row).Value
            Rows(row).EntireRow.Delete
            lastRow = lastRow - 1
        End If
        If RowID = "P" Then
            Range("C" & row).Value = hwb
        End If
        If RowID <> "A" And RowID <> "P" Then
            Rows(row).EntireRow.Delete
            lastRow = lastRow - 1
        End If
        If RowID = "P" Then
            row = row + 1
        End If
    Wend
    
    Range("A:A").Delete
    Sheets("PID").Visible = False
    Sheets("Data").Select
    Rows("1:1").Select
    Selection.AutoFilter
End If
    
    Sheets("Cover").Select
    Application.ScreenUpdating = True
    
    
    If SheetExists(iata) Then Sheets(iata).Delete
    If SheetExists(iata & " Summary") Then Sheets(iata & " Summary").Delete
    If SheetExists("Temp") Then Sheets("Temp").Delete
    If SheetExists("Work") Then Sheets("Work").Delete
    
    Application.ScreenUpdating = False
    Application.Calculation = xlManual
    Application.DisplayAlerts = True
    
    Dim PlanDate As Date
    Dim Temp As String
    Dim EDDType As String
    Dim CheckDate As Boolean
    
    PlanType = Sheets("Setup").Range("PlanType").Value
    PMRoutes = Sheets("Setup").Range("PMRoutes").Value
    FDRoutes = Sheets("Setup").Range("USPSRoute").Value
    CountryPCFrmt = Sheets("Setup").Range("PostCodeFormat").Value
    PlanDate = Date
    
    'Get Country Configurations
    Country = Sheets("Configurations").Range("Country").Value
    PostCodeFrmt = Sheets("Configurations").Range("PCFormat").Value
    EDDType = Sheets("Configurations").Range("EDDType").Value
    EDDComm = Sheets("Configurations").Range("EDDComm").Value
    
    AcctList = Sheets("Configurations").Range("AccActive").Value
    AcctListURL = Sheets("Configurations").Range("AccountList").Value
    OPMSData = Sheets("Configurations").Range("OPMSActive").Value
    OPMSDataURL = Sheets("Configurations").Range("OPMSData").Value
    FinanceList = Sheets("Configurations").Range("FinActive").Value
    FinanceListURL = Sheets("Configurations").Range("FinanceList").Value
    GTWList = Sheets("Configurations").Range("GTWActive").Value
    GTWListURL = Sheets("Configurations").Range("GTWList").Value
    InbondList = 1
    InbondListURL = "ftp://usiptool:yirtUts3@ftp3.dhl.com/in/IPT_Inbond_List.csv"
    NSRData = 1
    NSRDataURL = "ftp://usiptool:yirtUts3@ftp3.dhl.com/in/NsrIPTExtract.txt"
    
    If PlanType = "Custom" Then
        
    End If
    
    PlanDateCorrect = MsgBox("Is your Plan Date " & PlanDate & "?", vbYesNo)
    If PlanDateCorrect = vbNo Then
        Temp = InputBox("Enter Plan Date - D/M/YYYY")
        CheckDate = IsDate(Temp)
        If CheckDate = False Then
            Temp = InputBox("Incorrect date format; try again - D/M/YYYY")
            CheckDate = IsDate(Temp)
            If CheckDate = False Then
                PlanDate = Date
                MsgBox ("Date Format still incorrect; your Plan Date has been set for today - " & PlanDate)
            Else
                PlanDate = Temp
            End If
        Else
            PlanDate = Temp
        End If
    End If
    
    Dim IPTWorkbook As Workbook
    Dim TempWorkbook As Workbook
    Dim TempWorkSheet As Worksheet
    Dim ws As Worksheet
    
    Application.StatusBar = "Importing Daily Reference Files"
'If n = 1 Then
    If AcctList = 1 Then 'Import Acct List
        Set IPTWorkbook = ActiveWorkbook
    
        If SheetExists("Acct_List") = True Then
            Sheets("Acct_List").Delete
        End If
    
        Workbooks.Open (AcctListURL)

        Set TempWorkbook = ActiveWorkbook
        Set TempWorkSheet = ActiveSheet

        TempWorkSheet.Copy After:=IPTWorkbook.Sheets(9)
        IPTWorkbook.Sheets(ActiveSheet.Name).Name = "Acct_List"

        IPTWorkbook.Activate
        TempWorkbook.Close
    End If
    
    If OPMSData = 1 Then 'Import OPMS Data
        Set IPTWorkbook = ActiveWorkbook
    
        If SheetExists("OPMS Data") = True Then
            Sheets("OPMS Data").Delete
        End If
    
        Workbooks.Open (OPMSDataURL)

        Set TempWorkbook = ActiveWorkbook
        Set TempWorkSheet = ActiveSheet

        TempWorkSheet.Copy After:=IPTWorkbook.Sheets(9)
        IPTWorkbook.Sheets(ActiveSheet.Name).Name = "OPMS Data"

        IPTWorkbook.Activate
        TempWorkbook.Close
        
        Columns("A:A").Select
        Selection.TextToColumns Destination:=Range("A1"), DataType:=xlDelimited, _
            TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=False, _
            Semicolon:=False, Comma:=False, Space:=False, Other:=True, OtherChar _
            :="|", FieldInfo:=Array(Array(1, 1), Array(2, 1), Array(3, 1), Array(4, 1)), _
            TrailingMinusNumbers:=True
        
    End If

    If FinanceList = 1 Then 'Import Finance List
        Set IPTWorkbook = ActiveWorkbook
    
        If SheetExists("Finance List") = True Then
            Sheets("Finance List").Delete
        End If
    
        Workbooks.Open (FinanceListURL)

        Set TempWorkbook = ActiveWorkbook
        Set TempWorkSheet = ActiveSheet

        TempWorkSheet.Copy After:=IPTWorkbook.Sheets(9)
        IPTWorkbook.Sheets(ActiveSheet.Name).Name = "Finance List"

        IPTWorkbook.Activate
        TempWorkbook.Close
    End If
    
    If GTWList = 1 Then 'Import GTW List
        Set IPTWorkbook = ActiveWorkbook
    
        If SheetExists("GTW List") = True Then
            Sheets("GTW List").Delete
        End If
    
        Workbooks.Open (GTWListURL)

        Set TempWorkbook = ActiveWorkbook
        Set TempWorkSheet = ActiveSheet

        TempWorkSheet.Copy After:=IPTWorkbook.Sheets(9)
        IPTWorkbook.Sheets(ActiveSheet.Name).Name = "GTW List"

        IPTWorkbook.Activate
        TempWorkbook.Close
    End If
    
    If InbondList = 1 Then 'Import Inbond List
        Set IPTWorkbook = ActiveWorkbook
    
        If SheetExists("Inbond List") = True Then
            Sheets("Inbond List").Delete
        End If
    
        Workbooks.Open (InbondListURL)

        Set TempWorkbook = ActiveWorkbook
        Set TempWorkSheet = ActiveSheet

        TempWorkSheet.Copy After:=IPTWorkbook.Sheets(9)
        IPTWorkbook.Sheets(ActiveSheet.Name).Name = "Inbond List"

        IPTWorkbook.Activate
        TempWorkbook.Close
        
        Columns("A:A").Select
        Selection.TextToColumns Destination:=Range("A1"), DataType:=xlDelimited, _
            TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=False, _
            Semicolon:=False, Comma:=True, Space:=False, Other:=True, OtherChar _
            :="|", FieldInfo:=Array(Array(1, 1), Array(2, 1), Array(3, 1), Array(4, 1)), _
            TrailingMinusNumbers:=True
        
    End If
    
    If NSRData = 1 Then 'Import NSR/SX OPMS Data
        Set IPTWorkbook = ActiveWorkbook
    
        If SheetExists("NSR_Data") = True Then
            Sheets("NSR_Data").Delete
        End If
    
        Workbooks.Open (NSRDataURL)

        Set TempWorkbook = ActiveWorkbook
        Set TempWorkSheet = ActiveSheet

        TempWorkSheet.Copy After:=IPTWorkbook.Sheets(9)
        IPTWorkbook.Sheets(ActiveSheet.Name).Name = "NSR_Data"

        IPTWorkbook.Activate
        TempWorkbook.Close
        
        Columns("A:A").Select
        Selection.TextToColumns Destination:=Range("A1"), DataType:=xlDelimited, _
            TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=False, _
            Semicolon:=False, Comma:=False, Space:=False, Other:=True, OtherChar _
            :="|", FieldInfo:=Array(Array(1, 1), Array(2, 1), Array(3, 1), Array(4, 1)), _
            TrailingMinusNumbers:=True
        
    End If
'End If

    Application.DisplayAlerts = True
    
    Sheets("Data").Select
    Rows("1:1").Select
    Selection.AutoFilter
    Selection.AutoFilter Field:=9, Criteria1:=Sheets("Setup").Range("C7")
    lastRow = ActiveSheet.UsedRange.Rows.Count
    Range("A1:BN" & lastRow).Select
    Selection.SpecialCells(xlCellTypeVisible).Select
    Selection.Copy
    
    Sheets.Add
    ActiveSheet.Paste
    If SheetExists("Temp") Then Sheets("Temp").Delete
    ActiveSheet.Name = "Temp"
    Sheets("Temp").Columns("AK:AK").Copy Sheets("Temp").Range("L1")
    Range("A:D,F:F,Q:Y,AF:AH,AJ:BA,BC:BO").Delete
    Columns("B:B").Select
    Selection.Insert Shift:=xlToRight
    Selection.Insert Shift:=xlToRight
    Selection.Insert Shift:=xlToRight
    Selection.Insert Shift:=xlToRight
    Columns("N:N").ClearContents
    
    ActiveWindow.LargeScroll ToRight:=-1
    
    Cells.RemoveDuplicates Columns:=Array(1, 2, 3, 4, 5, 6, _
        7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33), Header:=xlYes ' Remove Duplicates
        
    If Country = "US" Then ' Smarty Streets Lookup
        Application.StatusBar = "Performing Smarty Streets Lookups"
        SmartyStreets.SmartyStreets
        SmartyStreets1.SmartyStreets2
        'UserForm2.Show 'Address Cleaner
    End If
    
    Dim Route As String  ' Route and Load Position Calculation
    Dim Str As String
    Dim HWBStreet As String
    Dim Posit As String
    Dim Split As String
    Dim Duty As String
    Dim Prod As String
    Dim GTW As String
    Dim Inbond As String
    Dim TDX As String
    Dim AcctFeature As String
    Dim SpecInst As String
    Dim DelInst As String
    Dim PMHWB As Boolean
    Dim FDHWB As Boolean
    Dim IsNumb As Boolean
    Dim Numeric As Boolean
    
    Numeric = IsNumeric(PostCodeFrmt)
    Length = Len(PostCodeFrmt)
    lastRow = ActiveSheet.UsedRange.Rows.Count
    Range("B2").Select
    row = ActiveCell.row
    
    Sheets.Add
    If SheetExists("Work") Then Sheets("Work").Delete
    ActiveSheet.Name = "Work"
    
    Application.StatusBar = "Assigning Route Codes and Special Instructions"
    Sheets("Temp").Select
    While row <> lastRow + 1
        On Error Resume Next
        AcctFeature = ""
        Range("B" & row).Select
        PostCode = Range("U" & row).Value
        hwb = Range("A" & row).Value
        Acct = Range("W" & row).Value
        Prod = Range("I" & row).Value
        Str = Range("U" & row).Value
        StrLen = Len(Str)
        
        'Format postal codes
        If Country <> "US" Then
            PostCode = Left(PostCode, Length)
            If Numeric = "TRUE" Then
                PostCode = PostCode * 1
            End If
            Range("C" & row).Value = PostCode
        Else
            ResiComm = Range("Y" & row).Value 'RDI indicator
            ResiCommLen = Len(ResiComm)
            If ResiCommLen < 8 Then
                Range("Y" & row).Value = "Unknown"
            End If
            If StrLen = 8 Then ' UK Data Quality correction
                PostCode = Left(Str, 4)
                PostCode = PostCode * 1
            
            Else
                If CountryPCFrmt = "ZIP" Then 'ZIP, ZIP + 2 and ZIP + 4 formatting
                    If StrLen > 5 Then
                        PostCode = Left(Str, 10)
                        TestPC = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:B"), 2, 0) 'Check if ZIP + 4 listed in PC sheet
                        If TestPC = vbNullString Then
                            PostCode = Left(Str, 5)
                            PostCode = PostCode * 1
                        End If
                        TestPC = ""
                    End If
                Else
                    If StrLen > 8 Then
                        PostCode = Left(Str, 10)
                        TestPC = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:B"), 2, 0) 'Check if ZIP + 4 listed in PC sheet
                        If TestPC = vbNullString Then
                            PostCode = Left(Str, 8)
                        End If
                        TestPC = ""
                    End If
                End If
            End If
        End If
        
        AcctMaxValue = 9999
        ResiComm = Range("Y" & row).Value
        HWBValue = Range("M" & row).Value
        HWBValue = HWBValue * 1
        Split = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:H"), 8, 0)
        Split = UCase(Split)
        If Prod = "Q" Then 'WMX lookup
            WMXPC = Left(PostCode, 5)
            WMXPC = WMXPC * 1
            TDX = Application.WorksheetFunction.VLookup(WMXPC, Sheets("GREF").Range("A:G"), 7, 0)
        Else
            TDX = Application.WorksheetFunction.VLookup(Prod, Sheets("Products").Range("A:B"), 2, 0)
        End If
        Duty = Application.WorksheetFunction.VLookup(hwb, Sheets("Finance List").Range("A:C"), 3, 0)
        GTW = Application.WorksheetFunction.VLookup(hwb, Sheets("GTW List").Range("A:C"), 3, 0)
        Inbond = Application.WorksheetFunction.VLookup(hwb, Sheets("Inbond List").Range("A:C"), 3, 0)
        AcctFeature = Application.WorksheetFunction.VLookup(Acct, Sheets("Acct_List").Range("A:C"), 3, 0)
        AcctMaxValue = Application.WorksheetFunction.VLookup(Acct, Sheets("Acct_List").Range("A:D"), 4, 0)
        AcctMaxValue = AcctMaxValue * 1
        HWBInst = Application.WorksheetFunction.VLookup(hwb, Sheets("NSR_Data").Range("A:C"), 3, 0)
        If AcctMaxValue = 0 Then
            AcctMaxValue = 9999
        End If
        
        PMHWB = True ' Determine if HWB can be PM eligible
        If AcctFeature = "NSR" Then
            PMHWB = False
        End If
        If AcctFeature = "SDA" Then
            PMHWB = False
        End If
        If TDX <> "" Then
            PMHWB = False
        End If
        If ResiComm <> "Residential" Then
            PMHWB = False
        End If
        
        FDHWB = True ' Determine if HWB can be Split FD/Omaha eligible
        If AcctFeature = "BANK" Then
            FDHWB = False
        End If
        If ResiComm = "Commercial" Then
            FDHWB = False
        End If
        
        If FDRoutes = "Yes" Then ' Assign FD Route and Quadrant
            Route = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:H"), 6, 0)
            Posit = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:H"), 7, 0)
            Posit = UCase(Posit)
            If Posit = "SP" And FDHWB = False Then
                Route = ""
                Posit = ""
            End If
            If Posit <> "SP" Then 'Remove PM route matching
                Route = ""
                Posit = ""
            End If
        End If
    
        If PlanType = "Regular" Or PlanType = "Weekend" Then ' Assign Route and Quadrant
            If PMRoutes = "Yes" And PMHWB = True Then
                Route = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:H"), 6, 0)
                Posit = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:H"), 7, 0)
                Posit = UCase(Posit)
                If FDRoutes = "Yes" And Posit = "SP" And FDHWB = False Then 'Remove Omaha/SP matching
                    Route = ""
                    Posit = ""
                End If
                If Route = vbNullString Then
                    Route = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:C"), 2, 0)
                    Posit = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:C"), 3, 0)
                End If
            Else
                If Route = vbNullString Then
                    Route = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:C"), 2, 0)
                    Posit = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:C"), 3, 0)
                End If
            End If
        Else
            If PMRoutes = "Yes" And PMHWB = True Then
                Route = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:H"), 6, 0)
                Posit = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:H"), 7, 0)
                Posit = UCase(Posit)
                If FDRoutes = "Yes" And Posit = "SP" And FDHWB = False Then 'Remove Omaha/SP matching
                    Route = ""
                    Posit = ""
                End If
                If Route = vbNullString Then
                    Route = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:E"), 4, 0)
                    Posit = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:E"), 5, 0)
                End If
            Else
                If Route = vbNullString Then
                    Route = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:E"), 4, 0)
                    Posit = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:E"), 5, 0)
                End If
            End If
        End If
        If Split = "Y" Then ' Split Postal Code Logic
            Sheets("Street").Select
            Rows("1:1").Select
            Selection.AutoFilter
            Selection.AutoFilter Field:=1, Criteria1:=PostCode
            LastRowSt = ActiveSheet.UsedRange.Rows.Count
            Range("A1:I" & LastRowSt).Select
            Selection.SpecialCells(xlCellTypeVisible).Copy
            Sheets("Work").Select
            Range("A1").Select
            ActiveSheet.Paste
            RowSt = 2
            While RowSt <> LastRowSt + 1
                If Range("D" & RowSt) <> vbNullString Then 'Consignee Name Match
                    Name = Range("D" & RowSt).Value
                    Name = UCase(Name)
                    Sheets("Temp").Select
                    HWBName = Range("P" & row).Value
                    HWBName = UCase(HWBName)
                    Sheets("Work").Select
                    Match = InStr(HWBName, Name)
                    If Match <> 0 Then
                    Route = Range("B" & RowSt).Value
                    Posit = Range("C" & RowSt).Value
                    End If
                End If
                If Range("G" & RowSt) <> vbNullString Then ' Consignee Address Match
                    Street = Range("G" & RowSt).Value
                    Street = UCase(Street)
                    Sheets("Temp").Select
                    HWBStreet = Range("R" & row).Value
                    HWBStreet = UCase(HWBStreet)
                    Sheets("Work").Select
                    If Range("E" & RowSt) <> vbNullString Then ' Define Number Range
                        BeginNumb = Range("E" & RowSt).Value
                        SplitPt = InStr(HWBStreet, " ")
                        HWBNumb = Left(HWBStreet, SplitPt - 1)
                        HWBNumb = HWBNumb * 1
                        IsNumb = IsNumeric(HWBNumb)
                        If IsNumb = False Then
                            SplitPt = InStr(HWBStreet, ",")
                            HWBNumb = Left(HWBStreet, SplitPt - 1)
                            HWBNumb = HWBNumb * 1
                            IsNumb = IsNumeric(HWBNumb)
                        End If
                        If IsNumb = False Then
                            HWBNumb = 0
                        End If
                    End If
                    If Range("F" & RowSt) <> vbNullString Then
                        EndNumb = Range("F" & RowSt).Value
                    Else
                        EndNumb = BeginNumb
                    End If
                    Match = InStr(HWBStreet, Street)
                    If Match <> 0 Then
                        If Range("E" & RowSt) <> vbNullString Then
                            If HWBNumb >= BeginNumb And HWBNumb <= EndNumb Then
                                Route = Range("B" & RowSt).Value
                                Posit = Range("C" & RowSt).Value
                            End If
                        Else
                            Route = Range("B" & RowSt).Value
                            Posit = Range("C" & RowSt).Value
                        End If
                    End If
                End If
                RowSt = RowSt + 1
            Wend
            Sheets("Work").Select
            Range("A1:I" & LastRowSt).Clear
            Sheets("Street").Select
            Selection.AutoFilter
        End If
        
        If PlanType = "Weekend" And ResiComm <> "Residential" Then 'Create upper and lowercase route codes for Weekend plan
            Route = LCase(Route)
            Posit = LCase(Posit)
        Else
            Route = UCase(Route)
            Posit = UCase(Posit)
        End If
        
        Sheets("Temp").Select
        Range("B" & row) = Route
        Range("C" & row) = Posit
        SSAddr = Range("N" & row)
        Rec = Range("P" & row)
        If ResiComm = "Commercial" Then 'Create HWB keys
            Key = Route & Left(SSAddr, 8) & Left(PostCode, 5)
        Else
            If Len(Rec) < 1 Then
                Key = "NoKey"
            Else
                Key = Route & Left(Rec, 6) & Left(PostCode, 5)
            End If
        End If
        Pcs = Range("J" & row).Value 'Calculate pcs
        CharChk = InStr(Pcs, "\")
        Pcs = Left(Pcs, CharChk - 1) * 1
        Range("AA" & row) = Key
        Range("AC" & row) = Pcs
        Range("AH" & row) = Duty
        Range("AI" & row) = GTW
        Range("AD" & row) = TDX
        If HWBValue <= AcctMaxValue Then 'SDA max value test
            Range("AE" & row) = AcctFeature
        End If
        If TDX <> "" Then 'Delivery Instruction Hierarchy
            DelInst = TDX
        Else
            If AcctFeature <> "" Then
                DelInst = AcctFeature
            Else
                If HWBInst <> "" Then
                    DelInst = HWBInst
                Else
                    DelInst = ""
                End If
            End If
        End If
        If Duty <> "" Then 'Special Instruction Hierarchy
            SpecInst = Duty
        Else
            If Inbond <> "" Then
                SpecInst = Inbond
            Else
                If GTW <> "" Then
                    SpecInst = GTW
                Else
                    SpecInst = ""
                End If
            End If
        End If
        Range("D" & row) = SpecInst
        Range("E" & row) = DelInst
        
        Route = ""
        Posit = ""
        Split = ""
        Duty = ""
        GTW = ""
        Inbond = ""
        TDX = ""
        WMXPC = ""
        AcctFeature = ""
        HWBValue = 0
        AcctMaxValue = 9999
        PostCode = 0
        SSAddr = ""
        Rec = ""
        Key = ""
        SpecInst = ""
        HWBInst = ""
        DelInst = ""
        
        row = row + 1
    Wend
    
    Application.DisplayAlerts = False
    Sheets("Work").Delete
    
    Application.StatusBar = "Calculating Station Totals"
    Columns("N:N").Cut
    Columns("T:T").Select
    Selection.Insert Shift:=xlToRight
    'Range("E2").Formula = "=AG2"
    'Range("AA2").Formula = "=IF(Y2 = ""Commercial"", IF(ISNA(CONCATENATE(B2,LEFT(S2,8),LEFT(U2,5))),""NO TAG"",CONCATENATE(B2,LEFT(S2,8),LEFT(U2,5))), IF(ISNA(CONCATENATE(B2,LEFT(O2,6),LEFT(U2,5))),""NO TAG"",CONCATENATE(B2,LEFT(O2,6),LEFT(U2,5))))"
    Range("AB2").Formula = "=1/COUNTIF(AA:AA,AA2)"
    'Range("AC2").Formula = "=LEFT(J2,SEARCH(""\"",J2)-1)*1"
    'Range("AG2").Formula = "=IF(AD2="""",IF(AE2="""",IF(AF2="""","""",AF2),AE2),AD2)"

    Sheets("Routes").Select ' Station Totals
    Rows("1:1").Select
    Selection.AutoFilter
    Selection.AutoFilter Field:=1, Criteria1:=Sheets("Setup").Range("C7")
    Columns("B:B").Select
    Selection.Copy
    Sheets("Temp").Select
    Range("AL1").Select
    ActiveSheet.Paste
    Range("AL1").Select
    ActiveCell.Value = " ROUTE"
    Sheets("Routes").Select
    Columns("C:D").Select
    Application.CutCopyMode = False
    Selection.Copy
    Sheets("Temp").Select
    Range("AQ1").Select
    ActiveSheet.Paste
    Range("AM2").Formula = "=SUMPRODUCT(--(EXACT(B:B,AL2)))"
    Range("AN2").Formula = "=SUMPRODUCT(--(EXACT(B:B,AL2)),AC:AC)"
    Range("AO2").Formula = "=SUMPRODUCT(--(EXACT(B:B,AL2)),K:K)"
    Range("AP2").Formula = "=SUMPRODUCT(--(EXACT(B:B,AL2)),AB:AB)"
    Range("AS2").Formula = "=IF(AP2>AR2,AP2-AR2,IF(AP2<AQ2,AP2-AQ2,""OK""))"
    Range("AT2").Formula = "=IF(COUNTIFS(B:B,AL2,I:I,""L"")+COUNTIFS(B:B,AL2,I:I,""M"")=0,"""",COUNTIFS(B:B,AL2,I:I,""L"")+COUNTIFS(B:B,AL2,I:I,""M""))"
    Range("AU2").Formula = "=IF(COUNTIFS(B:B,AL2,I:I,""T"")+COUNTIFS(B:B,AL2,I:I,""Y"")=0,"""",COUNTIFS(B:B,AL2,I:I,""T"")+COUNTIFS(B:B,AL2,I:I,""Y""))"
    Range("AV2").Formula = "=IFERROR(COUNTIFS(B:B,AL2,Y:Y, ""Residential"")/COUNTIF(B:B,AL2),0)"
        
    Sheets("Routes").Select
    Rows("1:1").Select
    Selection.AutoFilter
    
    Sheets("Temp").Select
    Columns("AL:AL").Select
    lastRow = Cells(Rows.Count, "AL").End(xlUp).row
    Range("AM2:AP2").AutoFill Destination:=Range("AM2:AP" & lastRow)
    Range("AS2:AV2").AutoFill Destination:=Range("AS2:AV" & lastRow)
    
    lastRow = Cells(Rows.Count, "A").End(xlUp).row
    
    'Range("E2:E2").AutoFill Destination:=Range("E2:E" & lastRow)
    Range("AB2:AB2").AutoFill Destination:=Range("AB2:AB" & lastRow)
    Application.Calculation = xlAutomatic
    Range("AB2:AB" & lastRow).Copy
    Range("AB2:AB" & lastRow).PasteSpecial xlPasteValues
    Application.Calculation = xlManual
    'Range("AG2:AG2").AutoFill Destination:=Range("AG2:AG" & lastRow)
 
    Application.StatusBar = "Performing SOF Matching"
    Dim Addr As String  ' SOF Matching
    Dim Receiver As String
    Dim Rec3 As String
    Dim RecSOF As String
    Dim Remark As String
    
    row = 2
    lastRow = ActiveSheet.UsedRange.Rows.Count
    
    Sheets("SOF").Select 'Check if SOF list has data
    SOFRows = ActiveSheet.UsedRange.Rows.Count
    
    If SOFRows > 1 Then
    
    Columns("A:A").Select
    Selection.Insert Shift:=xlToRight
    Selection.Insert Shift:=xlToRight
    While row <> SOFRows
        Str = Range("D" & row).Value
        Str = UCase(Str)
        Addr8 = Left(Str, 8)
        Addr10 = Left(Str, 10)
        Range("A" & row).Value = Addr8
        Range("B" & row).Value = Addr10
        row = row + 1
    Wend
    
    row = 2
    Sheets("Temp").Select
    
    While row <> lastRow
        On Error Resume Next
        Remark = ""
        Match = 0
        RecSOF = ""
        Str = Range("Q" & row).Value
        Str2 = Range("S" & row).Value
        Addr = Left(Str, 8)
        Addr = UCase(Addr)
        AddrSS = Left(Str2, 8)
        AddrSS = UCase(AddrSS)
        Receiver = Range("O" & row).Value
        Receiver = UCase(Receiver)
        Rec3 = Left(Receiver, 3)
        Remark = Application.WorksheetFunction.VLookup(AddrSS, Sheets("SOF").Range("A:G"), 7, 0)
        RecSOF = Application.WorksheetFunction.VLookup(AddrSS, Sheets("SOF").Range("A:C"), 3, 0)
        If Remark = "" Then
            Remark = Application.WorksheetFunction.VLookup(Addr, Sheets("SOF").Range("A:G"), 7, 0)
            RecSOF = Application.WorksheetFunction.VLookup(Addr, Sheets("SOF").Range("A:C"), 3, 0)
        End If
        RecSOF = UCase(RecSOF)
        
        Match = InStr(RecSOF, Rec3) ' Check receiver name
        If Match = 0 Then
            Rec3 = Right(Receiver, 3)
            Match = InStr(RecSOF, Rec3)
            If Match = 0 Then
                Remark = ""
            End If
        End If
        If Remark = "" Then
            Addr = Left(Str, 10)
            Addr = UCase(Addr)
            Remark = Application.WorksheetFunction.VLookup(Addr, Sheets("SOF").Range("B:G"), 6, 0)
            RecSOF = Application.WorksheetFunction.VLookup(Addr, Sheets("SOF").Range("B:C"), 2, 0)
            RecSOF = UCase(RecSOF)
            Match = InStr(RecSOF, Rec3)
            If Match = 0 Then
                Rec3 = Right(Receiver, 3)
                Match = InStr(RecSOF, Rec3)
                If Match = 0 Then
                    Remark = ""
                End If
            End If
        End If

        Range("AF" & row) = Remark
        DelInst = Range("E" & row).Value
        If DelInst = "" Then ' Delivery Instruction Hierarchy
            Range("E" & row) = Remark
        End If
        Remark = ""
        RecSOF = ""
        DelInst = ""
        row = row + 1
    Wend
    
    Sheets("SOF").Select
    Columns("A:B").Delete
    
    End If
    
    Sheets("Temp").Select
    
    If SheetExists(Sheets("Setup").Range("C7")) Then Sheets(Sheets("Setup").Range("C7").Value).Delete
    ActiveSheet.Name = Sheets("Setup").Range("C7") ' Station Formatting
    Range("A1").Value = "HWB"
    Range("B1").Value = "ROUTE"
    Range("C1").Value = "POSIT"
    Range("D1").Value = "SPEC INST"
    Range("E1").Value = "DEL INST"
    Range("F1").Value = "ORG"
    Range("G1").Value = "CTRY"
    Range("H1").Value = "DEST"
    Range("I1").Value = "PROD"
    Range("J1").Value = "PCS"
    Range("K1").Value = "WGT"
    Range("L1").Value = "DESC"
    Range("M1").Value = "VALUE"
    Range("N1").Value = "SHIPPER"
    Range("O1").Value = "RECEIVER"
    Range("P1").Value = "CONTACT"
    Range("Q1").Value = "ADDR1"
    Range("R1").Value = "ADDR2"
    Range("S1").Value = "SS ADDR"
    Range("T1").Value = "CITY"
    Range("U1").Value = "POSTCODE"
    Range("V1").Value = "PHONE"
    Range("W1").Value = "ACCT"
    Range("X1").Value = "START DATE/TIME"
    Range("Y1").Value = "RESI/COMM"
    Range("Z1").Value = "COORDINATES"
    Range("AA1").Value = "Key"
    Range("AB1").Value = "Stops"
    Range("AC1").Value = "Pieces"
    Range("AD1").Value = "TDX"
    Range("AE1").Value = "Del_Inst"
    Range("AF1").Value = "SOF"
    Range("AG1").Value = "Final"
    
    Rows("1:1").EntireRow.Font.Bold = True
    Range("C1").Activate
    ActiveWindow.LargeScroll ToRight:=-1
    Selection.AutoFilter
    Columns("D:E").Select
    Selection.Font.Bold = True
    Selection.Font.ColorIndex = 3
    Columns("J:J").Select
    Selection.NumberFormat = "0.0"
    Columns("A:A").ColumnWidth = 11
    Columns("B:B").ColumnWidth = 6
    Columns("C:C").ColumnWidth = 5
    Columns("D:E").ColumnWidth = 10
    Columns("F:K").ColumnWidth = 5
    Columns("M:N").ColumnWidth = 5
    Columns("O:O").ColumnWidth = 12
    Columns("Q:T").ColumnWidth = 12
    Columns("U:U").ColumnWidth = 10
    Columns("Y:Y").ColumnWidth = 11
    Columns("Z:Z").ColumnWidth = 17
    Columns("AA:AF").ColumnWidth = 0.1

    ActiveWindow.SmallScroll Down:=-18
    Columns("C:I").Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    
    Application.StatusBar = "Creating Station Summary Page"
    Application.Calculation = xlAutomatic
    
    Columns("AL:AV").Select  ' Station Summary Page
    Selection.Copy
    Range("A1").Select
    Sheets.Add
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Rows("1:1").Selection.Font.Bold = True
    Range("B1").Value = "HWB"
    Range("C1").Value = "PCS"
    Range("D1").Value = "WGT"
    Range("E1").Value = "STOPS"
    Range("H1").Value = "DIFF"
    Range("I1").Value = "TDX 1030"
    Range("J1").Value = "TDX 1200"
    Range("K1").Value = "% RESI"
    lastRow = ActiveSheet.UsedRange.Rows.Count
    Range("H2:H" & lastRow).Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="OK"
    Selection.FormatConditions(1).Interior.ColorIndex = 4
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="0"
    Selection.FormatConditions(2).Interior.ColorIndex = 6
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="0"
    Selection.FormatConditions(3).Interior.ColorIndex = 3
    Columns("D:D").NumberFormat = "0"
    Columns("K:K").NumberFormat = "0%"

    ActiveSheet.Name = Sheets("Setup").Range("C7") & " Summary"
    
    Application.StatusBar = "Performing EDD Calculations"
    Dim EDD As String  ' EDD Calculation
    
    Sheets(iata).Select
    lastRow = ActiveSheet.UsedRange.Rows.Count
    Range("X1").Value = "EDD"
    Range("X2").Select
    row = ActiveCell.row
    
    While row <> lastRow + 1
    
        On Error Resume Next
        Range("X" & row).Select
        hwb = Range("A" & row).Value
        If EDDType = "NC" Then
            Column = 4
        Else
            Column = 3
        End If
        EDD = Application.WorksheetFunction.VLookup(hwb, Sheets("OPMS Data").Range("A:D"), Column, 0)
        ActiveCell.Value = EDD
        ActiveCell.NumberFormat = "m/d/yyyy"
        EDD = ""
        ResiComm = Range("Y" & row).Value
        If Country = "US" Then
            If ActiveCell.Value > PlanDate And ResiComm <> "Commercial" And EDDComm = 0 Then
                Range("A" & row, "X" & row).Select
                Selection.Font.Bold = True
                Selection.Font.Italic = True
            Else
                If ActiveCell.Value > PlanDate And EDDComm = 1 Then
                    Range("A" & row, "X" & row).Select
                    Selection.Font.Bold = True
                    Selection.Font.Italic = True
                End If
            End If
        Else
            If ActiveCell.Value > PlanDate Then
                Range("A" & row, "X" & row).Select
                Selection.Font.Bold = True
                Selection.Font.Italic = True
            End If
        End If
        row = row + 1
    Wend
    
    Dim Station As String
    Dim ActiveRoute As String
    
    Sheets("Routes").Select 'Recode over dispatched PM routes
    LastRoute = ActiveSheet.UsedRange.Rows.Count
    CurrentRoute = 2
    Station = Sheets("Setup").Range("C7").Value
    SheetName = Station & " Summary"
    PlanType = Sheets("Setup").Range("C10").Value
    PMRoutes = Sheets("Setup").Range("C13").Value
    
    While CurrentRoute < LastRoute
        ActiveRoute = Range("B" & CurrentRoute).Value
        PMFDRoute = Range("F" & CurrentRoute).Value
        PMFDRoute = UCase(PMFDRoute)
        HWBS = Sheets(SheetName).Range("B" & CurrentRoute).Value
        StopLimit = Sheets(SheetName).Range("G" & CurrentRoute).Value
        
        If PMFDRoute = "PM" And HWBS > StopLimit Then
            Sheets(Station).Select
            lastRow = ActiveSheet.UsedRange.Rows.Count
            
            If ActiveSheet.AutoFilterMode Then
                If ActiveSheet.FilterMode Then
                    ActiveSheet.ShowAllData
                End If
            End If

            Selection.AutoFilter Field:=2, Criteria1:=ActiveRoute
            Range("A2:AS" & lastRow).Sort key1:=Range("C1"), order1:=xlAscending, Header:= _
                xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
                DataOption1:=xlSortNormal
                
            row = 2
            While HWBS > StopLimit - 1
                Rows(row).Select
                If Selection.EntireRow.Hidden = False Then
                    PostCode = Range("U" & row).Value
                    Str = Range("U" & row).Value
                    StrLen = Len(Str)
                    If StrLen = 8 Then ' UK Data Quality correction for post code
                        PostCode = Left(Str, 4)
                    Else
                        If StrLen > 8 Then
                        PostCode = Left(Str, 8)
                        End If
                    End If
                    If PlanType = "Regular" Then ' Assign Route and Quadrant
                        Route = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:C"), 2, 0)
                        Posit = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:C"), 3, 0)
                    Else
                        Route = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:E"), 4, 0)
                        Posit = Application.WorksheetFunction.VLookup(PostCode, Sheets("Postal Codes").Range("A:E"), 5, 0)
                    End If
                    Range("B" & row) = Route
                    Range("C" & row) = Posit
                    HWBS = HWBS - 1
                End If
                row = row + 1
            Wend
            If ActiveSheet.AutoFilterMode Then
                If ActiveSheet.FilterMode Then
                    ActiveSheet.ShowAllData
                End If
            End If
        End If
        CurrentRoute = CurrentRoute + 1
        Sheets("Routes").Select
    Wend
    
    Application.StatusBar = "Refreshing"
    Station = Sheets("Setup").Range("C7").Value ' Refresh Summary page
    SheetName = Station & " Summary"
    Sheets(Station).Select
    If ActiveSheet.AutoFilterMode Then
        If ActiveSheet.FilterMode Then
            ActiveSheet.ShowAllData
        End If
    End If
    lastRow = ActiveSheet.UsedRange.Rows.Count
    Range("A1:AV" & lastRow).Sort key1:=Range("AL1"), order1:=xlAscending, Header:= _
          xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
          DataOption1:=xlSortNormal
    Range("AK1").Select
    ActiveCell = SheetName
    Columns("AL:AV").Select
    Selection.Copy
    
    Sheets(Range("AK1").Value).Select
    Range("A1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Rows("1:1").EntireRow.Font.Bold = True
    Range("B1").Value = "HWB"
    Range("C1").Value = "PCS"
    Range("D1").Value = "WGT"
    Range("E1").Value = "STOPS"
    Range("H1").Value = "DIFF"
    Range("I1").Value = "TDX 1030"
    Range("J1").Value = "TDX 1200"
    Range("K1").Value = "% RESI"
    lastRow = ActiveSheet.UsedRange.Rows.Count
    Range("H2:H" & lastRow).Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="OK"
    Selection.FormatConditions(1).Interior.ColorIndex = 4
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="0"
    Selection.FormatConditions(2).Interior.ColorIndex = 6
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="0"
    Selection.FormatConditions(3).Interior.ColorIndex = 3
    Columns("D:H").Select
    Selection.NumberFormat = "0"
    
    
    Range("A1:K55").Select ' Create table
    ActiveSheet.ListObjects.Add(xlSrcRange, Range("$A$1:$K$" & lastRow), , xlYes).Name = _
        "Table1"
    Range("Table1[#All]").Select
    ActiveSheet.ListObjects("Table1").TableStyle = "TableStyleMedium2"
    
    TableRange = ActiveSheet.Range("B2", Range("B2").End(xlDown))
    Range("B" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("C2", Range("C2").End(xlDown))
    Range("C" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("D2", Range("D2").End(xlDown))
    Range("D" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("E2", Range("E2").End(xlDown))
    Range("E" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("I2", Range("I2").End(xlDown))
    Range("I" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("J2", Range("J2").End(xlDown))
    Range("J" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    Range("A" & lastRow + 1).EntireRow.Font.Bold = True
    Range("A1").Select
    
    Application.Calculation = xlManual
    'Application.ScreenUpdating = True
    'Sheets(SheetName).Select
    'UserForm4.Show 'Route Editor
    'Application.ScreenUpdating = False
    'Application.Calculation = xlAutomatic
    
    Dim HostName As String 'Endicia file creation
    Dim Username As String
    Dim USPSRte As String
    Dim OpeningWorkbook As String: OpeningWorkbook = ThisWorkbook.Name
    
    HostName = Environ$("computername") ' Get Host Name / Get Computer Name
    Username = Environ$("username")     ' Get Current User Name
    
    FDRoutes = Sheets("Setup").Range("USPSRoute").Value
    If FDRoutes = "Yes" Then
    
    Sheets("Routes").Select
    Rte = 1
    LastRte = ActiveSheet.Range("B:B").Cells.SpecialCells(xlCellTypeConstants).Count
    
    While Rte <> LastRte
        Sheets("Routes").Select
        Rte = Rte + 1
        FDRoute = Range("B" & Rte).Value
        PMFDRoute = Range("F" & Rte).Value
        PMFDRoute = UCase(PMFDRoute)
        
        If PMFDRoute = "FD" Then
            Sheets(Station).Select
            Rows("1:1").Select
            Selection.AutoFilter
            Selection.AutoFilter Field:=2, Criteria1:=FDRoute
            lastRow = ActiveSheet.UsedRange.Rows.Count
            Range("A1:Y" & lastRow).Select
            Selection.SpecialCells(xlCellTypeVisible).Select
            Selection.Copy
        
            Workbooks.Add
            ActiveSheet.Paste
            Columns("V:X").Delete
            Sheets("Sheet1").Select
            Range("A1").Select
            Sheets("Sheet1").Name = FDRoute
        
            row = 2
            While row <= lastRow 'Update ZIP Codes to 5 digit
                PostCode = Range("U" & row).Value
                Str = Range("U" & row).Value
                StrLen = Len(Str)
                If StrLen <> 8 Then
                    PostCode = Left(Str, 5)
                Else
                    PostCode = Left(Str, 4)
                End If
                Range("U" & row).Value = PostCode
                
                Str = Range("J" & row).Value 'Multi piece check to Omaha ZIP Codes
                Position = InStr(Str, "\") - 1
                Pcs = Left(Str, Position)
                Posit = Range("C" & row).Value
                If Pcs > 1 And Posit = "SP" Then
                    Range("A" & row & ":V" & row).Interior.ColorIndex = 8
                End If
                row = row + 1
            Wend
        
            Rows("1:1").Select
            Selection.AutoFilter
        
            Application.CutCopyMode = False
            Application.DisplayAlerts = False
            ActiveWorkbook.SaveAs Filename:="C:\Users\" & Username & "\Desktop\FD_" & FDRoute & ".xls", _
                FileFormat:=xlExcel8, Password:="", WriteResPassword:="", _
                ReadOnlyRecommended:=False, CreateBackup:=False
            ActiveWorkbook.Close Saved = False
            Workbooks(OpeningWorkbook).Activate
            
        End If
    Wend
    Selection.AutoFilter Field:=2
    
    End If
    
    If WorksheetFunction.CountIf(Sheets("Configurations").ListObjects("sla_LOCATIONS").ListColumns(1).Range, iata) > 0 Then
        Call IPT2SQL
        'Call Zips2SQL
        Call Routes2SQL
        If Err.Number = 0 Then InsertTransaction strToolName, ThisToolsVersion, Environ("USERNAME"), Environ("COMPUTERNAME"), GetClientIP, "tool_CheckToolVersion", "CheckToolVersion", _
                      Station & ": SMART Label Upload", Date, 0, 0, 0, 0, _
                      Environ("OS"), Environ("NUMBER_OF_PROCESSORS"), Environ("PROCESSOR_ARCHITECTURE"), Environ("PROCESSOR_IDENTIFIER"), Environ("PROCESSOR_LEVEL"), Environ("PROCESSOR_REVISION"), Environ("USERDNSDOMAIN"), Environ("USERDOMAIN"), Application.Version
    End If
    
    Sheets("Data").Select
    Rows("1:1").Select
    Selection.AutoFilter
    Sheets("Setup").Select
    Summary = Range("C7").Value & " Summary"
    
    'SortByRoutesAndPos (iata)
    Sheets("Inbond List").Delete
    Sheets("GTW List").Delete
    Sheets("Finance List").Delete
    Sheets("OPMS Data").Delete
    Sheets("Acct_List").Delete
    Sheets("NSR_Data").Delete
    Sheets(Summary).Select

    Application.ScreenUpdating = True
    Application.Calculation = xlAutomatic
    MsgBox "Start of Day Complete"
    
    If FDRoutes = "Yes" Then
        MsgBox "The USPS Upload files have been saved to the desktop as 'FD_<route>.xls'"
    End If
    
    InsertTransaction strToolName, ThisToolsVersion, Environ("USERNAME"), Environ("COMPUTERNAME"), GetClientIP, "tool_CheckToolVersion", "CheckToolVersion", _
                  iata & ": Start of Day Completed", Date, 0, 0, 0, 0, _
                  Environ("OS"), Environ("NUMBER_OF_PROCESSORS"), Environ("PROCESSOR_ARCHITECTURE"), Environ("PROCESSOR_IDENTIFIER"), Environ("PROCESSOR_LEVEL"), Environ("PROCESSOR_REVISION"), Environ("USERDNSDOMAIN"), Environ("USERDOMAIN"), Application.Version
        
End Sub

Private Function SortByRoutesAndPos(iata As String)
    
    iata = Sheets("Setup").Range("C7").Value
    Sheets(iata).Select
    Sheets(iata).Rows("1:1").Select
    'Selection.AutoFilter

    With Sheets(iata).Sort
        .SortFields.Clear
        .SortFields.Add Range("B1"), slSortOnValues, xlAscending
        .SortFields.Add Range("C1"), slSortOnValues, xlAscending
        .SetRange Range("A1").CurrentRegion
        .Header = xlYes
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Function

Sub RouteEditor()

    Application.ScreenUpdating = True
    Application.Calculation = xlManual
    iata = Sheets("Setup").Range("C7").Value
    SheetName = iata & " Summary"
    Sheets(SheetName).Select
    'Application.ScreenUpdating = False
    UserForm4.Show 'Route Editor
    Application.Calculation = xlAutomatic
    
End Sub

Sub Routes()
'
' Routes Macro
' Macro recorded 1/20/2013 by James Singel
'
'
    Dim RteSheet As String
    
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Sheets("Setup").Select

    Route = Range("I7").Value
    Route = UCase(Route)
    If Route = "ALL" Then
        Sheets("Routes").Select
        Rows("1:1").Select
        lastRow = ActiveSheet.UsedRange.Rows.Count
        Selection.AutoFilter
        Selection.AutoFilter Field:=1, Criteria1:=Sheets("Setup").Range("C7")
        Range("B2:B" & lastRow).Select
        Selection.Copy
        Sheets("Setup").Select
        Range("I7").Select
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
            :=False, Transpose:=False
    End If

    Rte = 0
    LastRte = ActiveSheet.Range("I:I").Cells.SpecialCells(xlCellTypeConstants).Count
    
    PhonesVal = MsgBox("Do you need phone numbers on your loading guides?", vbYesNo)
    DueDateVal = MsgBox("Do you want highlight shipments that are not due?", vbYesNo)
    
    
    While Rte <> LastRte
       
       Sheets("Setup").Select
       Sheets(Range("C7").Value).Select
       If ActiveSheet.AutoFilterMode Then
           If ActiveSheet.FilterMode Then
                ActiveSheet.ShowAllData
           End If
       End If
       RteSheet = Sheets("Setup").Range("I" & Rte + 7).Value
       If SheetExists(RteSheet) = True Then
            Sheets(RteSheet).Delete
       End If
       
       Selection.AutoFilter Field:=2, Criteria1:=Sheets("Setup").Range("I" & Rte + 7)
       FinalRow = ActiveSheet.UsedRange.Rows.Count
       Range("A1:V" & FinalRow).Select
       Selection.SpecialCells(xlCellTypeVisible).Select
       Selection.Copy
       Sheets.Add
       If DueDateVal = vbYes Then
            Selection.PasteSpecial Paste:=xlPasteFormats
            Selection.PasteSpecial Paste:=xlPasteValues
       Else
            Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
                :=False, Transpose:=False
       End If
       
       If SheetExists(Sheets("Setup").Range("I" & Rte + 7), ThisWorkbook) Then Sheets(Sheets("Setup").Range("I" & Rte + 7).Value).Delete
       
       ActiveSheet.Name = Sheets("Setup").Range("I" & Rte + 7) ' Format Sheet
       Columns("A:A").ColumnWidth = 10.86
       Range("B:B,F:H,L:N,P:P,R:S").Delete
       'Application.CutCopyMode = False
    
       'Selection.Delete Shift:=xlToLeft
       'Columns("E:G").Delete
       'Columns("H:K").Delete
       'Columns("I:I").Delete
       'Columns("J:J").Delete
       Columns("B:B").ColumnWidth = 7
       Columns("C:D").ColumnWidth = 12
       Columns("E:E").ColumnWidth = 5.86
       Columns("F:F").ColumnWidth = 4.57
       Columns("G:G").ColumnWidth = 5
       Columns("H:H").ColumnWidth = 20
       Columns("I:I").ColumnWidth = 27
       Columns("J:J").ColumnWidth = 14
       Columns("K:K").ColumnWidth = 12
       Columns("L:L").ColumnWidth = 15
       Columns("G:G").Select
       Selection.NumberFormat = "0.0"
       Columns("B:G").Select
    
       With Selection
          .HorizontalAlignment = xlCenter
          .VerticalAlignment = xlBottom
          .WrapText = False
          .Orientation = 0
          .AddIndent = False
          .IndentLevel = 0
          .ShrinkToFit = False
          .ReadingOrder = xlContext
          .MergeCells = False
       End With
    
       Range("A1:M1").Select
       Selection.AutoFilter
       Selection.Font.Bold = True
       With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
       End With
       
       'Application.Calculation = xlAutomatic
       LastHWB = ActiveSheet.UsedRange.Rows.Count
       hwb = 1
       While hwb < LastHWB + 1
          PostCode = Range("K" & hwb).Value
          TrunPC = Left(PostCode, 5)
          Range("M" & hwb).Value = TrunPC
          hwb = hwb + 1
       Wend
       'Range("M2").Select
       'ActiveCell.FormulaR1C1 = "=LEFT(RC[-2],5)"
       'Range("M2").Select
       'If LastHWB > 2 Then
          'Selection.AutoFill Destination:=Range("M2:M" & LastHWB), Type:=xlFillDefault
       'End If
       'Application.Calculation = xlManual
       
       'Sorting by Consignee Name, Post Code, and Quadrant
       Range("A1:M500").Sort key1:=Range("H1"), order1:=xlAscending, Header:= _
          xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
          DataOption1:=xlSortNormal
       Range("A1:M500").Sort key1:=Range("K1"), order1:=xlAscending, Header:= _
          xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
          DataOption1:=xlSortNormal
       Range("A1:M500").Sort key1:=Range("M1"), order1:=xlAscending, Header:= _
          xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
          DataOption1:=xlSortNormal
       Range("A1:M500").Sort key1:=Range("B1"), order1:=xlAscending, Header:= _
          xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
          DataOption1:=xlSortNormal
       ActiveWindow.SmallScroll Down:=-3
       Columns("M:M").Delete
       
       With Selection.Font
          .Name = "Arial"
          .size = 11
          .Strikethrough = False
          .Superscript = False
          .Subscript = False
          .OutlineFont = False
          .Shadow = False
          .Underline = xlUnderlineStyleNone
          .ColorIndex = xlAutomatic
       End With
       
       Rows("1:1").Select
       Selection.Insert Shift:=xlDown
       Sheets("Setup").Select
       Range("I" & Rte + 7).Select
       Selection.Copy
       a = Worksheets("Setup").Range("I" & Rte + 7).Value
       Worksheets(a).Select
       Range("A1").Select
       Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
          :=False, Transpose:=False
       
       Columns("C:D").Select
       Selection.Font.ColorIndex = 3
       Selection.Font.Bold = True
       
       If PhonesVal = vbYes Then
            Range("A1:L1").Select
       Else
            Columns("L:L").Select
            Selection.Delete Shift:=xlToLeft
            Range("A1:K1").Select
       End If
       With Selection
           .HorizontalAlignment = xlCenter
           .VerticalAlignment = xlBottom
           .WrapText = False
           .Orientation = 0
           .AddIndent = False
           .IndentLevel = 0
           .ShrinkToFit = False
           .ReadingOrder = xlContext
           .MergeCells = True
       End With
       With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
       End With
       
       With Selection.Font
        .Name = "Arial"
        .FontStyle = "Bold"
        .size = 14
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ColorIndex = xlAutomatic
       End With

       ActiveSheet.PageSetup.PrintArea = "" ' Set print area
       With ActiveSheet.PageSetup
        .Orientation = xlLandscape
        .PaperSize = xlPaperLetter
        .BlackAndWhite = False
        .Zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = False
        .PrintErrors = xlPrintErrorsDisplayed
       End With
       
       HWBRow = 3
       FinalHWBRow = ActiveSheet.UsedRange.Rows.Count
       While HWBRow < FinalHWBRow + 5
        If PhonesVal = vbYes Then
            Range("A" & HWBRow, "L" & HWBRow).Select
        Else
            Range("A" & HWBRow, "K" & HWBRow).Select
        End If
        With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
        End With
        HWBRow = HWBRow + 1
       Wend
       Rte = Rte + 1
    Wend
    
    Sheets("Setup").Select
    Sheets(Range("C7").Value).Select
    Selection.AutoFilter Field:=2
    
    
    Sheets("Setup").Select
    If Route = "ALL" Then
        Route = Range("I7").Value
        Range("I7").Value = "ALL"
        Range("I8:I158").Value = ""
    End If
    
    InsertTransaction strToolName, ThisToolsVersion, Environ("USERNAME"), Environ("COMPUTERNAME"), GetClientIP, "tool_CheckToolVersion", "CheckToolVersion", _
                      Sheets("Setup").Range("C7").Value & ": Routes Completed", Date, 0, 0, 0, 0, _
                      Environ("OS"), Environ("NUMBER_OF_PROCESSORS"), Environ("PROCESSOR_ARCHITECTURE"), Environ("PROCESSOR_IDENTIFIER"), Environ("PROCESSOR_LEVEL"), Environ("PROCESSOR_REVISION"), Environ("USERDNSDOMAIN"), Environ("USERDOMAIN"), Application.Version
    
    Sheets(Route).Select
    Application.Calculation = xlAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    MsgBox "Loading Guides Complete"
    
End Sub

Sub Summary_Refresh()
'
' Refresh Summary Macro
' Macro recorded 4/28/2013 by DHL User
'
'
'
    ' Station Summary Page
    
    Application.ScreenUpdating = False
    
    Dim Station As String
    
    Application.StatusBar = "Refreshing"
    Station = Sheets("Setup").Range("C7").Value ' Refresh Summary page
    SheetName = Station & " Summary"
    
    Sheets(SheetName).Select
    lastRow = ActiveSheet.UsedRange.Rows.Count
    Columns("A:K").Select
    Selection.ClearContents
    Rows(lastRow).Delete
    
    Application.Calculation = xlAutomatic
    Sheets(Station).Select
    If ActiveSheet.AutoFilterMode Then
        If ActiveSheet.FilterMode Then
            ActiveSheet.ShowAllData
        End If
    End If
    lastRow = ActiveSheet.UsedRange.Rows.Count
    Range("A1:AV" & lastRow).Sort key1:=Range("AL1"), order1:=xlAscending, Header:= _
          xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
          DataOption1:=xlSortNormal
    Range("AK1").Select
    ActiveCell = SheetName
    Columns("AL:AV").Select
    Selection.Copy
    
    Sheets(Range("AK1").Value).Select
    Range("A1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Rows("1:1").Select
    Selection.Font.Bold = True
    Range("B1").Value = "HWB"
    Range("C1").Value = "PCS"
    Range("D1").Value = "WGT"
    Range("E1").Value = "STOPS"
    Range("H1").Value = "DIFF"
    Range("I1").Value = "TDX 1030"
    Range("J1").Value = "TDX 1200"
    Range("K1").Value = "% RESI"
    lastRow = ActiveSheet.UsedRange.Rows.Count
    Range("H2:H" & lastRow).Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="OK"
    Selection.FormatConditions(1).Interior.ColorIndex = 4
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="0"
    Selection.FormatConditions(2).Interior.ColorIndex = 6
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="0"
    Selection.FormatConditions(3).Interior.ColorIndex = 3
    Columns("D:H").Select
    Selection.NumberFormat = "0"
    Application.ScreenUpdating = True
    
    Range("A1:K55").Select 'Create Table
    ActiveSheet.ListObjects.Add(xlSrcRange, Range("$A$1:$K$" & lastRow), , xlYes).Name = _
        "Table1"
    Range("Table1[#All]").Select
    ActiveSheet.ListObjects("Table1").TableStyle = "TableStyleMedium2"
    
    TableRange = ActiveSheet.Range("B2", Range("B2").End(xlDown))
    Range("B" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("C2", Range("C2").End(xlDown))
    Range("C" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("D2", Range("D2").End(xlDown))
    Range("D" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("E2", Range("E2").End(xlDown))
    Range("E" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("I2", Range("I2").End(xlDown))
    Range("I" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("J2", Range("J2").End(xlDown))
    Range("J" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    Range("A" & lastRow + 1).EntireRow.Font.Bold = True
    Range("A1").Select
    Application.Calculation = xlManual
    
    If WorksheetFunction.CountIf(Sheets("Configurations").ListObjects("sla_LOCATIONS").ListColumns(1).Range, Station) > 0 Then
        If MsgBox("Would you like to upload data for SMART Label? (Recommended after a Summary Refresh)", vbYesNo) = vbYes Then
            Call IPT2SQL
            If Err.Number = 0 Then InsertTransaction strToolName, ThisToolsVersion, Environ("USERNAME"), Environ("COMPUTERNAME"), GetClientIP, "tool_CheckToolVersion", "CheckToolVersion", _
                      Station & ": SMART Label Refresh", Date, 0, 0, 0, 0, _
                      Environ("OS"), Environ("NUMBER_OF_PROCESSORS"), Environ("PROCESSOR_ARCHITECTURE"), Environ("PROCESSOR_IDENTIFIER"), Environ("PROCESSOR_LEVEL"), Environ("PROCESSOR_REVISION"), Environ("USERDNSDOMAIN"), Environ("USERDOMAIN"), Application.Version
        End If
    End If
        
    InsertTransaction strToolName, ThisToolsVersion, Environ("USERNAME"), Environ("COMPUTERNAME"), GetClientIP, "tool_CheckToolVersion", "CheckToolVersion", _
                      Station & ": Summary Refresh", Date, 0, 0, 0, 0, _
                      Environ("OS"), Environ("NUMBER_OF_PROCESSORS"), Environ("PROCESSOR_ARCHITECTURE"), Environ("PROCESSOR_IDENTIFIER"), Environ("PROCESSOR_LEVEL"), Environ("PROCESSOR_REVISION"), Environ("USERDNSDOMAIN"), Environ("USERDOMAIN"), Application.Version
    
End Sub


Sub EOD()
'
' EOD Macro
' Macro recorded 4/30/2013 by James Singel
'

'
    
    Dim HostName As String
    Dim Username As String
    
    HostName = Environ$("computername") ' Get Host Name / Get Computer Name
    Username = Environ$("username")     ' Get Current User Name
    
    Application.ScreenUpdating = False
    Application.Calculation = xlManual
    Application.StatusBar = "Creating PLIB File"
    
    PlanType = Sheets("Setup").Range("PlanType").Value
    Sheets("Setup").Select 'Ckeck and remove autofiltering
    Sheets(Range("C7").Value).Select
    If ActiveSheet.AutoFilterMode Then
        If ActiveSheet.FilterMode Then
             ActiveSheet.ShowAllData
        End If
    End If
    Sheets("EOD").Select
    EODLastrow = Cells(Rows.Count, "A").End(xlUp).row
    If EODLastrow = 1 Then
        EODLastrow = 0
    Else
        Range("B2:B" & EODLastrow).Value = "ok"
    End If
    
    If PlanType = "Weekend" Then 'Get Comm and Unk HWB's
        Sheets("Setup").Select
        Sheets(Range("C7").Value).Select
        lastRow = Cells(Rows.Count, "A").End(xlUp).row
        Range("A1:B" & lastRow).Copy
        Sheets("EOD").Select
        Range("A" & EODLastrow + 1).Select
        ActiveSheet.Paste
        Application.Calculation = xlAutomatic
        Range("C1").Formula = "=EXACT(B1,UPPER(B1))"
        lastRow = Cells(Rows.Count, "A").End(xlUp).row
        Range("C1").AutoFill Destination:=Range("C1:C" & lastRow)
        Application.Calculation = xlManual
        Range("A1:C" & lastRow).Sort key1:=Range("C1"), order1:=xlAscending, Header:= _
                    xlYes, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
                    DataOption1:=xlSortNormal
        Range("A:C").Select
        Selection.AutoFilter Field:=3, Criteria1:="True"
        ActiveSheet.Range("A2:C" & lastRow).SpecialCells _
            (xlCellTypeVisible).EntireRow.Delete
        Selection.AutoFilter
    End If
    
    size = WorksheetFunction.CountA(Worksheets("EOD").Columns(1))
    lastRow = WorksheetFunction.CountA(Worksheets("Data").Columns(1))
    
    Sheets.Add
    If SheetExists("EOD File") Then Sheets("EOD File").Delete
    ActiveSheet.Name = "EOD File"
    
    On Error Resume Next
    For i = 1 To size
        Sheets("EOD").Select
        hwb = Cells(i, 1).Value
        Sheets("Data").Select
        Selection.AutoFilter Field:=5, Criteria1:=hwb
        Range("A2:BO" & lastRow).SpecialCells(xlCellTypeVisible).Copy
        Sheets("EOD File").Select
        Range("A1").Select
        ActiveSheet.Paste
        ActiveCell.EntireRow.Insert
    Next i
    On Error GoTo 0
    
    Sheets("Data").Select
    Selection.AutoFilter
    Sheets("Data").Range("A1:BO1").Copy
    Sheets("EOD File").Select
    Range("A1").Select
    ActiveSheet.Paste
    
    lastRow = ActiveSheet.UsedRange.Rows.Count
    Range("A1:BO" & lastRow).Select
    Selection.Copy
        
    Workbooks.Add ' Create PLIB Workbook
    ActiveSheet.Paste
    Sheets("Sheet1").Select
    Range("A1").Select
    If SheetExists("PLIB") Then Sheets("PLIB").Delete
    Sheets("Sheet1").Name = "PLIB"
    Application.CutCopyMode = False
    Application.DisplayAlerts = False
    ActiveWorkbook.SaveAs Filename:="C:\Users\" & Username & "\Desktop\PLIB.xls", _
        FileFormat:=xlExcel8, Password:="", WriteResPassword:="", _
        ReadOnlyRecommended:=False, CreateBackup:=False
    ActiveWindow.Close
    
    Sheets("EOD File").Delete
    Sheets("EOD").Select
    Range("A:C").Delete
    Sheets("Cover").Select
    
    Application.Calculation = xlAutomatic
    Application.ScreenUpdating = True
    
    MsgBox "End of Day Complete. The carryover file has been saved to the desktop as 'PLIB.xls"


End Sub

Sub GoToSmartLabel()

    Dim Username As String
    Dim SourceWorkbook As Workbook
    Dim TargetWorkbook As Workbook
    Dim TargetSheet As Worksheet
    Dim SourceSheet As Worksheet
    Dim Station As String
    
    AreaPlannerYN = MsgBox("Are you uploading an Route Optimzation manifest file?", vbYesNo)
    
    If AreaPlannerYN = vbYes Then
        Application.ScreenUpdating = False
        Application.DisplayAlerts = False
        Application.Calculation = xlManual
    
        Sheets.Add
        'ActiveSheet.Paste
        If SheetExists("Temp") Then Sheets("Temp").Delete
        ActiveSheet.Name = "Temp"
        
        'Select .csv file
        FileToOpen = Application _
            .GetOpenFilename("CSV Files (*.csv),*.csv,")
        If FileToOpen = False Then
            MsgBox "No Workbook Selected"
            'Exit Sub
        End If
    
        Set TargetWorkbook = ThisWorkbook
        Set SourceWorkbook = Application.Workbooks.Open(FileToOpen)
        Set TargetSheet = TargetWorkbook.Worksheets("Temp")
        Set SourceSheet = SourceWorkbook.ActiveSheet
        
        lastRow = SourceSheet.Cells(SourceSheet.Rows.Count, "A").End(xlUp).row
        SourceSheet.Range("A1:CQ" & lastRow).Copy TargetSheet.Range("A1:CF" & lastRow)
        SourceWorkbook.Close
        
        'Sheets("Temp").Select
        'Range("A:A").EntireColumn.Insert
        'Range("U:U").Copy
        'Range("A1").Select
        'Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
              :=False, Transpose:=False
    
        On Error Resume Next
        iata = Sheets("Setup").Range("C7").Value
        Sheets(iata).Select
        lastRow = ActiveSheet.UsedRange.Rows.Count
        row = 1
        While row < lastRow + 1
            hwb = Range("A" & row).Value
            Route = Application.VLookup(hwb, Sheets("Temp").Range("A:C"), 2, 0)
            Sequence = Application.VLookup(hwb, Sheets("Temp").Range("A:C"), 3, 0)
            If Application.WorksheetFunction.IsNA(Sequence) Then
                Sequence = 0
            End If
            Sequence = Sequence * 1
            If Sequence > 0 Then
                Range("B" & row).Value = Route
                Range("C" & row).Value = Sequence
            End If
            Route = ""
            Sequence = ""
            row = row + 1
        Wend
    
        If SheetExists("Temp") Then Sheets("Temp").Delete
        
        Application.ScreenUpdating = True
        Application.DisplayAlerts = True
        Application.Calculation = xlAutomatic
    
    End If
    
    
    Station = Sheets("Setup").Range("C7").Value
    
    If WorksheetFunction.CountIf(Sheets("Configurations").ListObjects("sla_LOCATIONS").ListColumns(1).Range, Station) > 0 Then
            Call IPT2SQL
            If Err.Number = 0 Then InsertTransaction strToolName, ThisToolsVersion, Environ("USERNAME"), Environ("COMPUTERNAME"), GetClientIP, "tool_CheckToolVersion", "CheckToolVersion", _
                      Station & ": SMART Label Refresh", Date, 0, 0, 0, 0, _
                      Environ("OS"), Environ("NUMBER_OF_PROCESSORS"), Environ("PROCESSOR_ARCHITECTURE"), Environ("PROCESSOR_IDENTIFIER"), Environ("PROCESSOR_LEVEL"), Environ("PROCESSOR_REVISION"), Environ("USERDNSDOMAIN"), Environ("USERDOMAIN"), Application.Version
    End If
    
    Sheets("Label").Activate
    Username = Environ$("username")
    Sheets("Setup").Range("AA3").Value = Username
    Range("E1").Select
        With ActiveSheet.PageSetup
        .PrintTitleRows = ""
        .PrintTitleColumns = ""
    End With
    ActiveSheet.PageSetup.PrintArea = "$D$5:$K$15"
    With ActiveSheet.PageSetup
        .LeftHeader = ""
        .CenterHeader = ""
        .RightHeader = ""
        .LeftFooter = ""
        .CenterFooter = ""
        .RightFooter = ""
        .LeftMargin = Application.InchesToPoints(0)
        .RightMargin = Application.InchesToPoints(0.25)
        .TopMargin = Application.InchesToPoints(0.25)
        .BottomMargin = Application.InchesToPoints(0)
        .HeaderMargin = Application.InchesToPoints(0)
        .FooterMargin = Application.InchesToPoints(0)
        .PrintHeadings = False
        .PrintGridlines = False
        .PrintComments = xlPrintNoComments
        .CenterHorizontally = True
        .CenterVertically = True
        .Orientation = xlPortrait
        .Draft = False
        .FirstPageNumber = xlAutomatic
        .Order = xlDownThenOver
        .BlackAndWhite = False
        .Zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = 2
        .PrintErrors = xlPrintErrorsDisplayed
        .OddAndEvenPagesHeaderFooter = False
        .DifferentFirstPageHeaderFooter = False
        .ScaleWithDocHeaderFooter = False
        .AlignMarginsHeaderFooter = True
        .EvenPage.LeftHeader.Text = ""
        .EvenPage.CenterHeader.Text = ""
        .EvenPage.RightHeader.Text = ""
        .EvenPage.LeftFooter.Text = ""
        .EvenPage.CenterFooter.Text = ""
        .EvenPage.RightFooter.Text = ""
        .FirstPage.LeftHeader.Text = ""
        .FirstPage.CenterHeader.Text = ""
        .FirstPage.RightHeader.Text = ""
        .FirstPage.LeftFooter.Text = ""
        .FirstPage.CenterFooter.Text = ""
        .FirstPage.RightFooter.Text = ""
    End With
    Range("E1").Select
    
    MsgBox "Margins have been set."
    Application.StatusBar = "Ready to Scan"
    
End Sub

Private Sub IPT2SQL()

  Dim thisStation As String
  thisStation = Sheet1.Range("C7").Value
  
  Dim dataWS As Worksheet
  Set dataWS = Sheets(thisStation)
  
  Dim sqlConnection As New ADODB.Connection
  Dim sqlCommand As ADODB.Command
  Dim sqlParameter As ADODB.Parameter
  Dim odConnectionString As String
  Dim sqlStoredProcedure As String
  
  Dim sqlFieldsArray() As String
  Dim sqlSizesArray() As String
  
  sqlStoredProcedure = "InsertIPTData"
  
  sqlFieldsArray = Split(sqlFields, ", ")
  sqlSizesArray = Split(sqlSizes, ", ")
  
  ' Objects needed for iteration
  Dim iRow As Long, lRow As Long, i As Integer
  
  ' Open SQL Connection
  sqlConnection.Open sqlConnectionString
  
AttemptSQL:

  dataWS.Select
  
  iRow = 2
  lRow = dataWS.Range("A1").End(xlDown).row
  
  Do Until dataWS.Cells(iRow, 1) = ""
  
    Application.StatusBar = "Loading " & iRow - 1 & " out of " & lRow - 1 & " Shipments to the database."
    
    '   Define the stored procedure
    Set sqlCommand = New ADODB.Command
    With sqlCommand
      .ActiveConnection = sqlConnection
      
      'Set Criteria
      .CommandText = sqlStoredProcedure
      .CommandType = adCmdStoredProc
      .CommandTimeout = 15
      
      ' Define the input parameters (the for loop iterates through the sqlFields variable and adds a value for each field - separated by a comma)
      For i = 0 To UBound(sqlFieldsArray)
        Set sqlParameter = New ADODB.Parameter
        sqlParameter.Type = adVarChar
        sqlParameter.size = sqlSizesArray(i)
        sqlParameter.Name = sqlFieldsArray(i)
        sqlParameter.Direction = adParamInput
        sqlParameter.Value = VBA.Trim(FormatForSQLInsert(dataWS.Cells(iRow, i + 1), vbString))
        .Parameters.Append sqlParameter
      Next
      
      Err.Clear
      ' On Error Resume Next
      
      ' Insert line into table
      .Execute
      
      On Error GoTo 0
    End With
    
    iRow = iRow + 1
  Loop
  
  sqlConnection.Close
  Set sqlCommand = Nothing
  Set sqlParameter = Nothing
  
  Application.StatusBar = ""
  
End Sub

Private Sub IPTAll2SQL()

  Dim thisWB As Workbook
  Set thisWB = ThisWorkbook
  
  Dim thisStation As String
  thisStation = thisWB.Sheets("Setup").Range("C7").Value
  
  thisWB.Sheets(thisStation).Copy
  
  Dim dataWB As Workbook, dataWS As Worksheet
  Set dataWB = ActiveWorkbook
  Set dataWS = dataWB.ActiveSheet
  
  dataWS.Columns(1).Insert xlShiftToRight
  
  dataWS.Cells(1, 1).Value = "strHWB"
  dataWS.Cells(1, 2).Value = "strROUTE"
  dataWS.Cells(1, 3).Value = "strPOSITION"
  dataWS.Cells(1, 4).Value = "strSPECIALINSTRUCTIONS"
  dataWS.Cells(1, 5).Value = "strDELIVERYINSTRUCTIONS"
  'dataWS.Cells(1, 6).Value = "strORIGIN"
  'dataWS.Cells(1, 7).Value = "strCOUNTRY"
  'dataWS.Cells(1, 8).Value = "strDESTINATION"
  'dataWS.Cells(1, 9).Value = "strPRODUCT"
  dataWS.Cells(1, 6).Value = "strPIECES"
  'dataWS.Cells(1, 11).Value = "strWEIGHT"
  'dataWS.Cells(1, 12).Value = "strCONTENTS"
  'dataWS.Cells(1, 13).Value = "strVALUE"
  'dataWS.Cells(1, 14).Value = "strCURRENCY"
  'dataWS.Cells(1, 15).Value = "strSHIPPER"
  'dataWS.Cells(1, 16).Value = "strRECEIVER"
  'dataWS.Cells(1, 17).Value = "strCONTACT"
  'dataWS.Cells(1, 18).Value = "strADDRESS1"
  'dataWS.Cells(1, 19).Value = "strADDRESS2"
  'dataWS.Cells(1, 20).Value = "strCITY"
  'dataWS.Cells(1, 21).Value = "strPOSTCODE"
  'dataWS.Cells(1, 22).Value = "strPHONE"
  'dataWS.Cells(1, 23).Value = "strACCOUNT"
  dataWS.Cells(1, 7).Value = "strEDD"
  dataWS.Cells(1, 8).Value = "strRESI/COMM"
  'dataWS.Cells(1, 26).Value = "strCOORDINATES"
  dataWS.Cells(1, 9).Value = "dtmUploadDate"

  
  With dataWS
    .Range(Cells(2, 9), Cells(.Range("B1").End(xlDown).row, 1)).Value = Now()
  End With
  
  Dim xlLR As Long
  xlLR = dataWS.Range("A1").End(xlDown).row
  
  Dim xlRng As Range
  Set xlRng = dataWS.Range("A1:I" & xlLR)
  
  Dim result As Integer
  result = ExportRangeToSQL(xlRng, sqlConnectionString, "ipt_Uploads")
  
  dataWB.Close False
  
  Application.StatusBar = ""
  
End Sub

Private Sub Zips2SQL()

  Dim thisWB As Workbook
  Set thisWB = ThisWorkbook
  
  Dim thisStation As String
  thisStation = thisWB.Sheets("Setup").Range("C7").Value
  
  thisWB.Sheets("Postal Codes").Copy
  
  Dim dataWB As Workbook, dataWS As Worksheet
  Set dataWB = ActiveWorkbook
  Set dataWS = dataWB.ActiveSheet
  
  dataWS.Columns(1).Insert xlShiftToRight
  
  dataWS.Cells(1, 1).Value = "strIATA"
  dataWS.Cells(1, 2).Value = "strPostalCode"
  dataWS.Cells(1, 3).Value = "strRegRoute"
  dataWS.Cells(1, 4).Value = "charRegQuadrant"
  dataWS.Cells(1, 5).Value = "strHeavyRoute"
  dataWS.Cells(1, 6).Value = "charHeavyQuadrant"
  dataWS.Cells(1, 7).Value = "strPMRoute"
  dataWS.Cells(1, 8).Value = "charPMQuadrant"
  dataWS.Cells(1, 9).Value = "strSplit"
  
  With dataWS
    .Range(Cells(2, 1), Cells(.Range("B1").End(xlDown).row, 1)).Value = thisStation
  End With
  
  Dim xlLR As Long
  xlLR = dataWS.Range("A1").End(xlDown).row
  
  Dim xlRng As Range
  Set xlRng = dataWS.Range("A1:I" & xlLR)
  
  Dim result As Integer
  result = ExportRangeToSQL(xlRng, sqlConnectionString, "ipt_POSTAL_CODES")
  
  dataWB.Close False
  
  Application.StatusBar = ""
  
End Sub

Private Sub Routes2SQL()

  Dim thisWB As Workbook
  Set thisWB = ThisWorkbook
  
  Dim thisStation As String
  thisStation = thisWB.Sheets("Setup").Range("C7").Value
  
  thisWB.Sheets("Routes").Copy
  
  Dim dataWB As Workbook, dataWS As Worksheet
  Set dataWB = ActiveWorkbook
  Set dataWS = dataWB.ActiveSheet
  
  dataWS.Cells(1, 1).Value = "strIATA"
  dataWS.Cells(1, 2).Value = "strRoute"
  dataWS.Cells(1, 3).Value = "intMinStops"
  dataWS.Cells(1, 4).Value = "intMaxStops"
  dataWS.Cells(1, 5).Value = "charSortInstruction"
  dataWS.Cells(1, 6).Value = "charPM"
  
  Dim xlLR As Long
  xlLR = dataWS.Range("A1").End(xlDown).row
  
  Dim xlRng As Range
  Set xlRng = dataWS.Range("A1:I" & xlLR)
  
  Dim result As Integer
  result = ExportRangeToSQL(xlRng, sqlConnectionString, "ipt_ROUTES")
  
  dataWB.Close False
  
  Application.StatusBar = ""
  
End Sub

Private Sub Attempts2SQL()

  Dim thisWB As Workbook
  Set thisWB = ThisWorkbook

  thisWB.Sheets("EOD File").UsedRange.Replace "'", "''"
        
  thisWB.Sheets("EOD File").Copy
  
  Dim dataWB As Workbook, dataWS As Worksheet
  Set dataWB = ActiveWorkbook
  Set dataWS = dataWB.ActiveSheet
  
  Dim i As Integer
  For i = 1 To 67
    dataWS.Cells(1, i).Value = "F" & i
  Next i
  
  Dim xlLR As Long
  xlLR = dataWS.Range("A1").End(xlDown).row
  
  Dim xlRng As Range
  Set xlRng = dataWS.Range("A1:BO" & xlLR)
  
  Dim result As Integer
  result = ExportRangeToSQL(xlRng, sqlConnectionString, "ipt_ATTEMPTS")
  
  dataWB.Close False
  
  Application.StatusBar = ""
  
End Sub

Private Sub RetrieveAttempts()
    Dim dataWS As Worksheet, dataLR As Long
    Set dataWS = ThisWorkbook.Sheets("Data")
    
    dataLR = dataWS.Range("A1").End(xlDown).row
    
    Dim xlWS As Worksheet, xlLR As Long
    Set xlWS = ThisWorkbook.Sheets("EOD-Server")
    
    xlLR = xlWS.Range("A1").End(xlDown).row
    
    If xlLR > 2 Then
        xlWS.Range("A2:BO" & xlLR).Copy
        dataWS.Range("A" & dataLR + 1).PasteSpecial xlPasteValues
    End If
End Sub

Private Sub RefreshWorkbook()
    ThisWorkbook.RefreshAll
End Sub
Attribute VB_Name = "RangeToSQL"
Private Const strDatabase As String = "US_IE"
Private Const strUser As String = "us_ie_reader"
Private Const strPW As String = "usie1234"
Private Const sqlConnectionString As String = "Provider=SQLOLEDB.1;" & _
        "Data Source=sqlserver.dhl.com;" & _
        "Database=" & strDatabase & ";" & _
        "User ID=" & strUser & ";" & _
        "Password=" & strPW & ";"

Function ExportRangeToSQL(ByVal sourceRange As Range, _
    ByVal conString As String, ByVal table As String, _
    Optional ByVal beforeSQL = "", Optional ByVal afterSQL As String) As Integer

    'On Error Resume Next

    ' Object type and CreateObject function are used instead of ADODB.Connection,
    ' ADODB.Command for late binding without reference to
    ' Microsoft ActiveX Data Objects 2.x Library
    ' ADO API Reference
    ' http://msdn.microsoft.com/en-us/library/ms678086(v=VS.85).aspx
    ' Dim con As ADODB.Connection
    Dim con As Object
    Set con = CreateObject("ADODB.Connection")

    con.ConnectionString = conString
    con.Open

    ' Dim cmd As ADODB.Command
    Dim cmd As Object
    Set cmd = CreateObject("ADODB.Command")

    ' BeginTrans, CommitTrans, and RollbackTrans Methods (ADO)
    ' http://msdn.microsoft.com/en-us/library/ms680895(v=vs.85).aspx
    
    Dim level As Long
    level = con.BeginTrans

    cmd.CommandType = 1             ' adCmdText
    If beforeSQL > "" Then
        cmd.CommandText = beforeSQL
        cmd.ActiveConnection = con
        cmd.Execute
    End If

    ' Dim rst As ADODB.Recordset
    Dim rst As Object
    Set rst = CreateObject("ADODB.Recordset")

    With rst
        Set .ActiveConnection = con
        .Source = "SELECT TOP 1 * FROM " & table
        .CursorLocation = 3         ' adUseClient
        .LockType = 4               ' adLockBatchOptimistic
        .CursorType = 0             ' adOpenForwardOnly
        .Open

        ' Column mappings

        Dim tableFields(100) As Integer
        Dim rangeFields(100) As Integer

        Dim exportFieldsCount As Integer
        exportFieldsCount = 0

        Dim col As Integer
        Dim index As Integer
        Dim colNames() As String
        
        ReDim colNames(.Fields.Count)

        For col = 0 To .Fields.Count - 1
            index = Application.Match(.Fields(col).Name, sourceRange.Rows(1), 0)
            colNames(col) = .Fields(col).Name
            If index > 0 Then
                exportFieldsCount = exportFieldsCount + 1
                tableFields(exportFieldsCount) = col
                rangeFields(exportFieldsCount) = index
            End If
        Next
        
        For col = 0 To UBound(colNames) - 1
            FieldNames = FieldNames & ",[" & colNames(col) & "]"
        Next col

        If exportFieldsCount = 0 Then
            ExportRangeToSQL = 1
            GoTo ConnectionEnd
        End If

        ' Fast read of Excel range values to an array
        ' for further fast work with the array

        Dim arr As Variant
        arr = sourceRange.Value

        ' The range data transfer to the Recordset

        Dim row As Long
        Dim rowCount As Long
        rowCount = UBound(arr, 1)

        Dim val As Variant
        Dim sqlString As String
        
        Dim StartTime As Variant
        Dim EndTime As Variant
        
        StartTime = Timer

        For row = 2 To rowCount
            .AddNew
            
            For col = 1 To exportFieldsCount
                val = arr(row, rangeFields(col))
                If col = 1 Then
                    sqlString = sqlString & "('" & val & "'"
                ElseIf col = exportFieldsCount Then
                    sqlString = sqlString & ",'" & val & "'),"
                Else: sqlString = sqlString & ",'" & val & "'"
                End If
            Next
            
            If row Mod 1000 = 0 Or row = rowCount Then
                sqlString = VBA.Left(sqlString, Len(sqlString) - 1)
                
                sqlString = "INSERT INTO [dbo].[" & table & "]" & _
                    " (" & VBA.Right(FieldNames, Len(FieldNames) - 1) & ") VALUES " & sqlString
                                
                cmd.CommandText = sqlString
                cmd.ActiveConnection = con
                cmd.Execute
                
                sqlString = ""
            End If
                        
              
            
        Next
    End With

    rst.Close
    Set rst = Nothing

    If afterSQL > "" Then
        cmd.CommandText = afterSQL
        cmd.ActiveConnection = con
        cmd.Execute
    End If

    ExportRangeToSQL = 0

ConnectionEnd:
    
    con.CommitTrans
    
    con.Close
    Set cmd = Nothing
    Set con = Nothing

End Function

Function FormatForSQLInsert(ByVal strData As Variant, dType As VbVarType) As Variant

    Err.Clear
    
    On Error Resume Next
    strData = VBA.Trim(strData)
    
    If Err.Number <> 0 Then
        strData = Null
        Err.Clear
        GoTo GetOuttaHere
    End If
    
    On Error GoTo 0
    
    If dType = vbDate Then
        strData = "{d '" & VBA.Format(strData, "YYYY-MM-DD") & "'}"
        GoTo GetOuttaHere
    End If
    
    
    Select Case VarType(strData)
        Case dType
            If dType = vbString Then
                If InStr(1, strData, "'") > 0 Then
                    strData = "'" & Replace(VBA.Trim(strData), "'", "''") & "'"
                End If
            End If
        Case vbString
            If IsNumeric(strData) And dType = vbDouble Then
                strData = CDbl(strData)
            ElseIf IsNumeric(strData) And dType = vbCurrency Then
                strData = CCur(strData)
            Else
                strData = Null
            End If
        Case vbDouble, vbSingle, vbCurrency, vbLong, vbInteger
            strData = CDbl(strData)
        Case vbDate
            strData = VBA.Format(strData, "YYYY-MM-DD")
        Case Else
            strData = Null
    End Select

GetOuttaHere:
    FormatForSQLInsert = strData

End Function

Function Get_Variable_Type(myVar)

' ---------------------------------------------------------------
' Written By Shanmuga Sundara Raman for http://vbadud.blogspot.com
' ---------------------------------------------------------------

    If VarType(myVar) = vbNull Then
        MsgBox "Null (no valid data) "
    ElseIf VarType(myVar) = vbInteger Then
        MsgBox "Integer "
    ElseIf VarType(myVar) = vbLong Then
        MsgBox "Long integer "
    ElseIf VarType(myVar) = vbSingle Then
        MsgBox "Single-precision floating-point number "
    ElseIf VarType(myVar) = vbDouble Then
        MsgBox "Double-precision floating-point number "
    ElseIf VarType(myVar) = vbCurrency Then
        MsgBox "Currency value "
    ElseIf VarType(myVar) = vbDate Then
        MsgBox "Date value "
    ElseIf VarType(myVar) = vbString Then
        MsgBox "String "
    ElseIf VarType(myVar) = vbObject Then
        MsgBox "Object "
    ElseIf VarType(myVar) = vbError Then
        MsgBox "Error value "
    ElseIf VarType(myVar) = vbBoolean Then
        MsgBox "Boolean value "
    ElseIf VarType(myVar) = vbVariant Then
        MsgBox "Variant (used only with arrays of variants) "
    ElseIf VarType(myVar) = vbDataObject Then
        MsgBox "A data access object "
    ElseIf VarType(myVar) = vbDecimal Then
        MsgBox "Decimal value "
    ElseIf VarType(myVar) = vbByte Then
        MsgBox "Byte value "
    ElseIf VarType(myVar) = vbUserDefinedType Then
        MsgBox "Variants that contain user-defined types "
    ElseIf VarType(myVar) = vbArray Then
        MsgBox "Array "
    Else
        MsgBox VarType(myVar)
    End If

' Excel VBA, Visual Basic, Get Variable Type, VarType


End Function
Attribute VB_Name = "Route_Editor"
Attribute VB_Name = "SQLDBInteration_v9"
Option Explicit

'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'/////     Version Control                                                                                                    //////
'/////     =============================================================================================================      //////
'/////     v1 - Added Versioning                                                                                              //////
'/////          Updated DB Connections for new SQL Server (CVGRPS02.us.dhl.com)                                               //////
'/////     v2 - Updated FormatForSQLInsertString Procedure to keep the string ready to insert into query (no comma at end)    //////
'/////          Updated FormatForSQLUpdateString Procedure to keep the string ready to insert into query (no comma at end)    //////
'/////          Added dtExpression to MySQLDataTypes for both FormatForSQLUpdateString and FormatForSQLInsertString Procedure //////
'/////     v3 - Added CheckSQLConn routine to confirm connection still exists                                                 //////
'/////     v4 - Updated FormatForSQLInsertString Procedure to allow for "NOT NULL" type fields                                //////
'/////          Updated FormatForSQLUpdateString Procedure to allow for "NOT NULL" type fields                                //////
'/////          Added dtBoolean to Public Enum MySQLDataTypes to allow for bit types of data to be handled by the tools       //////
'/////     v5 - Updated Server connection string to point to new server name (USCVGWSRPS01.phx-dc.dhl.com)                    //////
'/////          Added Property For Which Database To Connect To                                                               //////
'/////     v6 - Added GetEmailDistribution Function To Module                                                                 //////
'/////     v7 - Updated InsertTransaction Sub to use new Stored Procedure sp_InsertToolUsageInfoIntoLog for data insert       //////
'/////     v8 - Added Brackets To All Field Names In FormatForSQLInsertString and FormatForSQLUpdateString                    //////
'/////     v9 - Updated Bracket handling to first remove brackets if they already exist, then add them to the field name.     //////
'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Public Enum MySQLDataTypes
    dtString = 0
    dtDate = 1
    dtDateTime = 2
    dtNumber = 3
    dtExpression = 4
    dtBoolean = 5
End Enum

Function ConnectToSQLServerDB(ByRef adoDBConnection As ADODB.Connection, ByVal strUser As String, ByVal strPW As String, _
                              Optional ByVal strDatabase As String = "US_QUALITY") As Integer
'Returns 0 if not connected
'Returns 1 if Connected and Idle
'Returns 5 if connected and executing a command (1 + 4)
'Returns 9? if connected and fetching rows (1 + 8?)

    Dim bytConnAttempts As Long
    Dim boolTried As Boolean
    
    boolTried = False
    
    bytConnAttempts = 1
TryConnAgain:

    If Not adoDBConnection Is Nothing Then
        If Not adoDBConnection.State = 0 Then adoDBConnection.Close

        Set adoDBConnection = Nothing
    End If
    Set adoDBConnection = New ADODB.Connection

    adoDBConnection.ConnectionString = _
    "Provider=SQLOLEDB.1;" & _
    "Data Source=sqlserver.dhl.com;" & _
                                       "Database=" & strDatabase & ";" & _
                                       "User ID=" & strUser & ";" & _
                                       "Password=" & strPW & ";"
                                       
    On Error Resume Next
    adoDBConnection.Open
    On Error GoTo 0
    
    Select Case adoDBConnection.State
    Case 0
        'Not Connected.  Why?
        If bytConnAttempts < 6 And boolTried = False Then
            bytConnAttempts = bytConnAttempts + 1
            SQLCustomWait 5
            Set adoDBConnection = Nothing
            boolTried = True    ' Tried once already
            GoTo TryConnAgain
        End If
    Case 1
        'Connected, no problem.
    Case Else
        'What is the connection state?
        'Debug.Assert False
    End Select

    ConnectToSQLServerDB = adoDBConnection.State

End Function

'Function CheckSQLConn(ByRef adoDBConnection As ADODB.Connection) As Integer
'
'    If Not adoDBConnection.State = 1 Then
'        On Error Resume Next
'        adoDBConnection.Close
'        On Error GoTo 0
'        Set adoDBConnection = Nothing
'        CheckSQLConn = ConnectToSQLServerDB(adoDBConnection)
'    Else
'        CheckSQLConn = adoDBConnection.State
'    End If
'
'End Function

Function GetClientIP(Optional ByVal strUserID As String = "GetClientIP") As String

    GetClientIP = ""

End Function

Sub InsertTransaction(ByVal strToolName As String, ByVal sngToolVersion As Single, ByVal strUserLDAP As String, ByVal strSourcePC As String, _
                      ByVal strSourceIP As String, ByVal strSQLSvrUserName As String, ByVal strSQLSvrPassword As String, ByVal sqlQueryString As String, _
                      ByVal dtmQueryExecuteTime As Date, ByVal lngRowsReturned As Long, ByVal lngQueryRuntime As Long, ByVal ToolFetchTime As Long, _
                      ByVal ToolFormatTime As Long, ByVal ToolOs As String, ByVal ToolNumProc As String, ByVal ToolProcArch As String, _
                      ByVal ToolProcIdent As String, ByVal ToolProcLevel As String, ByVal ToolProcRevision As String, ByVal ToolUserDnsDom As String, _
                      ByVal ToolUserDomain As String, ByVal ToolExcelVersion As String)


    Dim adoDBConn As New ADODB.Connection
    Dim adoCMD As New ADODB.Command
    Dim dtmQueryReturnTime As Date
    Dim intQueryReturnMS As Integer
    Dim lngQueryResult As Long


    Select Case ConnectToSQLServerDB(adoDBConn, strSQLSvrUserName, strSQLSvrPassword)
    Case 0
        'No Connection
        Exit Sub
    Case Else
        'Good To Go...
    End Select

    dtmQueryReturnTime = dtmQueryExecuteTime + TimeSerial(0, 0, Int(lngQueryRuntime / 1000))
    intQueryReturnMS = lngQueryRuntime Mod 1000

    With adoCMD
        .ActiveConnection = adoDBConn
        .CommandText = "sp_InsertToolUsageInfoIntoLog"
        .CommandType = adCmdStoredProc
        .Parameters.Append .CreateParameter("@strToolName", adVarChar, adParamInput, 100, Trim(strToolName))
        .Parameters.Append .CreateParameter("@dblToolVersion", adDouble, adParamInput, , sngToolVersion)
        .Parameters.Append .CreateParameter("@strUserLDAP", adVarChar, adParamInput, 100, Trim(strUserLDAP))
        .Parameters.Append .CreateParameter("@strSourcePC", adVarChar, adParamInput, 100, Trim(strSourcePC))
        .Parameters.Append .CreateParameter("@strSourceIP", adVarChar, adParamInput, 100, Trim(strSourceIP))
        .Parameters.Append .CreateParameter("@strSQLServerUserName", adVarChar, adParamInput, 100, Trim(strSQLSvrUserName))
        .Parameters.Append .CreateParameter("@strSQLQuery", adLongVarChar, adParamInput, -1, Trim(sqlQueryString))
        .Parameters.Append .CreateParameter("@dtmQueryExecuted", adDate, adParamInput, , dtmQueryExecuteTime)
        .Parameters.Append .CreateParameter("@dtmQueryReturned", adDate, adParamInput, , dtmQueryReturnTime)
        .Parameters.Append .CreateParameter("@intQueryRowsReturned", adBigInt, adParamInput, , lngRowsReturned)
        .Parameters.Append .CreateParameter("@intQueryRunTimeMS", adInteger, adParamInput, , lngQueryRuntime)
        .Parameters.Append .CreateParameter("@intToolFetchTimeMS", adInteger, adParamInput, , ToolFetchTime)
        .Parameters.Append .CreateParameter("@intToolFormatTimeMS", adInteger, adParamInput, , ToolFormatTime)
        .Parameters.Append .CreateParameter("@strOS", adVarChar, adParamInput, 100, Trim(ToolOs))
        .Parameters.Append .CreateParameter("@strNumOfProc", adVarChar, adParamInput, 100, Trim(ToolNumProc))
        .Parameters.Append .CreateParameter("@strProcArch", adVarChar, adParamInput, 100, Trim(ToolProcArch))
        .Parameters.Append .CreateParameter("@strProcIdent", adVarChar, adParamInput, 100, Trim(ToolProcIdent))
        .Parameters.Append .CreateParameter("@strProcLevel", adVarChar, adParamInput, 100, Trim(ToolProcLevel))
        .Parameters.Append .CreateParameter("@strProcRevision", adVarChar, adParamInput, 100, Trim(ToolProcRevision))
        .Parameters.Append .CreateParameter("@strUserDnsDom", adVarChar, adParamInput, 100, Trim(ToolUserDnsDom))
        .Parameters.Append .CreateParameter("@strUserDomain", adVarChar, adParamInput, 100, Trim(ToolUserDomain))
        .Parameters.Append .CreateParameter("@strExcelVersion", adVarChar, adParamInput, 100, Trim(ToolExcelVersion))

        .Execute lngQueryResult
    End With

    Set adoCMD = Nothing

    If Not lngQueryResult = 1 Then
        'Why???
        'Debug.Assert False
    End If

    'Exit Sub
    On Error Resume Next
    adoDBConn.Close

    Set adoDBConn = Nothing
    On Error GoTo 0

End Sub


Function FormatForSQLInsertString(ByVal strFieldName As String, ByVal strData As String, ByVal enumDataType As MySQLDataTypes, ByRef strFields As String, ByRef strValues As String, Optional ByVal blnAllowNulls As Boolean = True) As Boolean


    FormatForSQLInsertString = False
    strData = Trim(strData)

    'Clean Up Field Name
    strFieldName = Trim(strFieldName)
    Do Until Not Left(strFieldName, 1) = "["
        strFieldName = Trim(Right(strFieldName, Len(strFieldName) - 1))
    Loop

    Do Until Not Right(strFieldName, 1) = "]"
        strFieldName = Trim(Left(strFieldName, Len(strFieldName) - 1))
    Loop


    If enumDataType = dtString Then
        'Add Field Name To Fields List
        If strFields = "" Then
            strFields = "[" & strFieldName & "]"
        Else
            strFields = strFields & ", " & vbCrLf & "[" & strFieldName & "]"
        End If

        'Format Data
        If strData = "" Then
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "''"
            End If
        Else
            strData = "'" & Replace(Trim(strData), "'", "''") & "'"
        End If

        'Add Data To values List
        If strValues = "" Then
            strValues = strData
        Else
            strValues = strValues & ", " & vbCrLf & strData
        End If

        'Return True
        FormatForSQLInsertString = True

    ElseIf enumDataType = dtDate Then
        'Add Field Name To Fields List
        If strFields = "" Then
            strFields = "[" & strFieldName & "]"
        Else
            strFields = strFields & ", " & vbCrLf & "[" & strFieldName & "]"
        End If

        If strData = "" Then
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "CONVERT(date, '1900-01-01')"
            End If
        ElseIf CDate(strData) = 0 Then
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "CONVERT(date, '1900-01-01')"
            End If
        Else
            strData = "CONVERT(date, '" & Format(CDate(strData), "yyyy-mm-dd") & "')"
        End If

        'Add Data To values List
        If strValues = "" Then
            strValues = strData
        Else
            strValues = strValues & ", " & vbCrLf & strData
        End If

        'Return True
        FormatForSQLInsertString = True

    ElseIf enumDataType = dtDateTime Then
        'Add Field Name To Fields List
        If strFields = "" Then
            strFields = "[" & strFieldName & "]"
        Else
            strFields = strFields & ", " & vbCrLf & "[" & strFieldName & "]"
        End If

        If LCase(strData) = "getdate()" Then
            strData = "GETDATE()"
        ElseIf strData = "" Then
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "CONVERT(datetime, '1900-01-01 00:00:00')"
            End If
        ElseIf CDate(strData) = 0 Then
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "CONVERT(datetime, '1900-01-01 00:00:00')"
            End If
        Else
            strData = "CONVERT(datetime, '" & Format(CDate(strData), "yyyy-mm-dd hh:mm:ss") & "')"
        End If

        'Add Data To values List
        If strValues = "" Then
            strValues = strData
        Else
            strValues = strValues & ", " & vbCrLf & strData
        End If

        'Return True
        FormatForSQLInsertString = True

    ElseIf enumDataType = dtNumber Then
        'Add Field Name To Fields List
        If strFields = "" Then
            strFields = "[" & strFieldName & "]"
        Else
            strFields = strFields & ", " & vbCrLf & "[" & strFieldName & "]"
        End If

        If IsNumeric(strData) = False Then
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "0"
            End If
        Else
            If InStr(strData, ".") > 0 Then
                strData = CDbl(strData)
            Else
                strData = CLng(strData)
            End If
        End If

        'Add Data To values List
        If strValues = "" Then
            strValues = strData
        Else
            strValues = strValues & ", " & vbCrLf & strData
        End If

        'Return True
        FormatForSQLInsertString = True
    ElseIf enumDataType = dtExpression Then
        'Add Field Name To Fields List
        If strFields = "" Then
            strFields = "[" & strFieldName & "]"
        Else
            strFields = strFields & ", " & vbCrLf & "[" & strFieldName & "]"
        End If

        If Trim(strData) = "" Then
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "''"
            End If
        Else
            strData = Trim(strData)
        End If

        'Add Data To values List
        If strValues = "" Then
            strValues = strData
        Else
            strValues = strValues & ", " & vbCrLf & strData
        End If

        'Return True
        FormatForSQLInsertString = True
    ElseIf enumDataType = dtBoolean Then
        'Add Field Name To Fields List
        If strFields = "" Then
            strFields = "[" & strFieldName & "]"
        Else
            strFields = strFields & ", " & vbCrLf & "[" & strFieldName & "]"
        End If

        If UCase(Trim(strData)) = "TRUE" Then
            strData = 1
        ElseIf UCase(Trim(strData)) = "FALSE" Then
            strData = 0
        Else
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "0"
            End If
        End If

        'Add Data To values List
        If strValues = "" Then
            strValues = strData
        Else
            strValues = strValues & ", " & vbCrLf & strData
        End If

        'Return True
        FormatForSQLInsertString = True
    Else
        'What was sent?!?
        'Debug.Assert False

    End If

End Function


Function FormatForSQLUpdateString(ByVal strFieldName As String, ByVal strData As String, ByVal enumDataType As MySQLDataTypes, ByRef strSQLUpdate As String, Optional ByVal blnAllowNulls As Boolean = True) As Boolean


    FormatForSQLUpdateString = False

    'Clean Up Field Name
    strFieldName = Trim(strFieldName)
    Do Until Not Left(strFieldName, 1) = "["
        strFieldName = Trim(Right(strFieldName, Len(strFieldName) - 1))
    Loop

    Do Until Not Right(strFieldName, 1) = "]"
        strFieldName = Trim(Left(strFieldName, Len(strFieldName) - 1))
    Loop

    'Trim inbound data
    strData = Trim(strData)

    If enumDataType = dtString Then
        'Format Data
        If strData = "" Then
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "''"
            End If
        Else
            strData = "'" & Replace(Trim(strData), "'", "''") & "'"
        End If

        'Add Field Name and Value To String
        If strSQLUpdate = "" Then
            strSQLUpdate = "[" & strFieldName & "]" & " = " & strData
        Else
            strSQLUpdate = strSQLUpdate & ", " & vbCrLf & "[" & strFieldName & "]" & " = " & strData
        End If

        'Return True
        FormatForSQLUpdateString = True

    ElseIf enumDataType = dtDate Then
        If strData = "" Then
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "CONVERT(date, '1900-01-01')"
            End If
        ElseIf CDate(strData) = 0 Then
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "CONVERT(date, '1900-01-01')"
            End If
        Else
            strData = "CONVERT(date, '" & Format(CDate(strData), "yyyy-mm-dd") & "')"
        End If

        'Add Field Name and Value To String
        If strSQLUpdate = "" Then
            strSQLUpdate = "[" & strFieldName & "]" & " = " & strData
        Else
            strSQLUpdate = strSQLUpdate & ", " & vbCrLf & "[" & strFieldName & "]" & " = " & strData
        End If

        'Return True
        FormatForSQLUpdateString = True

    ElseIf enumDataType = dtDateTime Then
        If LCase(strData) = "getdate()" Then
            strData = "GETDATE()"
        ElseIf strData = "" Then
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "CONVERT(datetime, '1900-01-01 00:00:00')"
            End If
        ElseIf CDate(strData) = 0 Then
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "CONVERT(datetime, '1900-01-01 00:00:00')"
            End If
        Else
            strData = "CONVERT(datetime, '" & Format(CDate(strData), "yyyy-mm-dd hh:mm:ss") & "')"
        End If

        'Add Field Name and Value To String
        If strSQLUpdate = "" Then
            strSQLUpdate = "[" & strFieldName & "]" & " = " & strData
        Else
            strSQLUpdate = strSQLUpdate & ", " & vbCrLf & "[" & strFieldName & "]" & " = " & strData
        End If

        'Return True
        FormatForSQLUpdateString = True

    ElseIf enumDataType = dtNumber Then
        If IsNumeric(strData) = False Then
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "0"
            End If
        Else
            If InStr(strData, ".") > 0 Then
                strData = CDbl(strData)
            Else
                strData = CLng(strData)
            End If
        End If

        'Add Field Name and Value To String
        If strSQLUpdate = "" Then
            strSQLUpdate = "[" & strFieldName & "]" & " = " & strData
        Else
            strSQLUpdate = strSQLUpdate & ", " & vbCrLf & "[" & strFieldName & "]" & " = " & strData
        End If

        'Return True
        FormatForSQLUpdateString = True
    ElseIf enumDataType = dtExpression Then
        If Trim(strData) = "" Then
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "''"
            End If
        Else
            strData = Trim(strData)
        End If

        'Add Field Name and Value To String
        If strSQLUpdate = "" Then
            strSQLUpdate = "[" & strFieldName & "]" & " = " & strData
        Else
            strSQLUpdate = strSQLUpdate & ", " & vbCrLf & "[" & strFieldName & "]" & " = " & strData
        End If

        'Return True
        FormatForSQLUpdateString = True

    ElseIf enumDataType = dtBoolean Then
        If UCase(Trim(strData)) = "TRUE" Then
            strData = 1
        ElseIf UCase(Trim(strData)) = "FALSE" Then
            strData = 0
        Else
            If blnAllowNulls = True Then
                strData = "NULL"
            Else
                strData = "0"
            End If
        End If

        'Add Field Name and Value To String
        If strSQLUpdate = "" Then
            strSQLUpdate = "[" & strFieldName & "]" & " = " & strData
        Else
            strSQLUpdate = strSQLUpdate & ", " & vbCrLf & "[" & strFieldName & "]" & " = " & strData
        End If

        'Return True
        FormatForSQLUpdateString = True
    Else
        'What was sent?!?
        'Debug.Assert False

    End If

End Function


Sub SQLCustomWait(ByVal dblLength As Double)

    Dim StartTime As Double
    Dim EndTime As Double

    StartTime = Timer
    EndTime = StartTime + dblLength

    If EndTime > 86400 Then
        EndTime = EndTime - 86400
        Do Until (Timer < StartTime) And (Timer >= EndTime)
            'Do nothing
        Loop
    Else
        Do Until Timer >= EndTime
            'Do nothing
        Loop
    End If


End Sub


Attribute VB_Name = "SendCDOEmail_v3"
Option Explicit

'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'/////     Version Control                                                                                                   //////
'/////     =============================================================================================================     //////
'/////     v1 - Added Versioning                                                                                             //////
'/////          Added Code To Add two spaces at the beginnibg of each line in plain text emails.  (Outlook Page Break Issue) //////
'/////     v2 - Added AppendSig() Function to append my signature to emails.                                           //////
'/////     v3 - Added error handling for invalid email addresses, or addresses rejected by the server.                       //////
'/////          Added error handling for No Valid Email Address Found In Any To, CC, Or BCC Field.                           //////
'/////          Added support for multiple attachments (semicolon delimited list of paths.)                                  //////
'/////          Added better code for high importance flag                                                                   //////
'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'---------------------------------------------------------------------------------------
' Procedure : SendEMailViaCDO
' Author    : Robert Bliss (Robert.Bliss@dhl.com)
' Date      : 7/7/2011
' Purpose   : To send emails using DHL's SMPT Server, bypassing using Outlook Objects,
'             and ulitmately bypassing Outlooks inherant security features.  To use
'             this method simply call the SendEMailViaCDO routine and pass all of the
'             desired properties through.
'
'             Required elements are:
'               strTo               - Must be passed as a single semicolin delimited
'                                     string (eg. "Al.Smith@dhl.com; Sam.Jones@dhl.com")
'               strCC               - Must be passed as a single semicolin delimited
'                                     string (eg. "Al.Smith@dhl.com; Sam.Jones@dhl.com")
'               strBCC              - Must be passed as a single semicolin delimited
'                                     string (eg. "Al.Smith@dhl.com; Sam.Jones@dhl.com")
'               strSubject          - Simple string translated directly to the subject line
'               strBody             - If sending as HTML, full HTML code should be passed here
'
'             Optional elements are:
'               strFrom             - Defaults to Do-Not-Reply@dhl.com if omitted
'               strReplyTo          - Default is empty string
'               blnSendHTML         - True if email is intended to be viewed as HTML.
'                                     Must pass full HTML code in the strBody property.
'               strAttachmentPath   - Fully Qualified path of a desired attachment.
'                                     Haven 't messed with multiple attachments, so not
'                                     sure how to handle that...  If left empty, then no
'                                     attachment is made.
'               blnHighImportance   - I havent gotten this to work right yet.  Different
'                                     mail clients handle importance differently.  I haven't
'                                     found a method that works for outlook clients yet.
'
'             A sample call would look like the following:
'               SendEMailViaCDO "Robert.Bliss@dhl.com", "", "", "Test Email", _
                '                               "This is a test email.", "CVGHub.Reports@dhl.com", _
                '                               "Robert.Bliss@dhl.com", False, "c:\TestFile.txt", False
'
'---------------------------------------------------------------------------------------
'

Sub SendEMailViaCDO(ByVal strTo As String, _
                    ByVal strCC As String, _
                    ByVal strBCC As String, _
                    ByVal strSubject As String, _
                    ByVal strBody As String, _
                    Optional strFrom As String = "Do-Not-Reply@dhl.com", _
                    Optional strReplyTo As String = "", _
                    Optional blnSendHTML As Boolean = False, _
                    Optional strAttachmentPath As String = "", _
                    Optional blnHighImportance As Boolean = False)

'Current DHL SMPT Server
    Const strDHLSMTPServer As String = "gateway.dhl.com"

    'Place your email address here so the program can send you alerts when unhandled errors occur.
    Const OwnerEmail As String = "Robert.Bliss@dhl.com"

    Dim iMsg As Object
    Dim iConf As Object
    Dim Flds As Variant
    Dim lngCntr1 As Long

    Dim strErrorDesc As String
    Dim strtemp As String

    Dim msgTryAgain As VbMsgBoxResult

    Dim Cntr1 As Long
    Dim varDistributionArray As Variant


    'If Plain Text, add double spaces to each line...
    If blnSendHTML = False Then strBody = "  " & Replace(strBody, vbCrLf, vbCrLf & "  ")

    'Get Neccessary Objects
    Set iMsg = CreateObject("CDO.Message")
    Set iConf = CreateObject("CDO.Configuration")

    iConf.Load -1    ' CDO Source Defaults
    If blnHighImportance = True Then
        'iConf.Fields("urn:schemas:httpmail:importance") = 2
        'iConf.Fields("urn:schemas:mailheader:X-Priority") = 2

        iMsg.Fields.Item("urn:schemas:mailheader:X-MSMail-Priority") = "High"   ' For Outlook 2003
        iMsg.Fields.Item("urn:schemas:mailheader:X-Priority") = 2               ' For Outlook 2003 also
        iMsg.Fields.Item("urn:schemas:httpmail:importance") = 2                 ' For Outlook Express
        iMsg.Fields.Update
    End If

    Set Flds = iConf.Fields
    With Flds
        .Item("http://schemas.microsoft.com/cdo/configuration/sendusing") = 2
        .Item("http://schemas.microsoft.com/cdo/configuration/smtpserver") = strDHLSMTPServer
        .Item("http://schemas.microsoft.com/cdo/configuration/smtpserverport") = 25
        .Update
    End With

    With iMsg
        Set .Configuration = iConf
        .To = strTo
        .CC = strCC
        .BCC = strBCC
        .From = strFrom
        If Not strReplyTo = "" Then .ReplyTo = strReplyTo
        .Subject = strSubject
        If blnSendHTML = False Then
            .TextBody = strBody
        Else
            .HTMLBody = strBody
        End If
        If Not Trim(strAttachmentPath) = "" Then
            On Error Resume Next
            lngCntr1 = FileLen(strAttachmentPath)
            If Err.Number = 0 Then
                On Error GoTo 0
                'Check Attachment Size.  Max Size is 11.5 MB
                If lngCntr1 > 12320768 Then
                    'If greater than max alowable size, ask user if they wish to continue without attachment
                    msgTryAgain = MsgBox("Email Attachment is greater than 11.5 MB and cannot be sent." & Chr(10) & Chr(10) & _
                                         "Do you wish to continue without the attachment?", vbYesNo + vbQuestion, "Unable To Attach File")
                    If msgTryAgain = vbNo Then
                        Exit Sub
                    End If
                Else
                    'If less than Max Size then add attachment
                    On Error Resume Next
                    .AddAttachment strAttachmentPath
                    If Err.Number = -2147024864 Then
                        'Handle "The process cannot access the file because it is being used by another process." Error
                        msgTryAgain = MsgBox("Email Attachment cannot be accessed because" & Chr(10) & _
                                             "it is open or is being used by another process." & Chr(10) & Chr(10) & _
                                             "Do you wish to continue without the attachment?", vbYesNo + vbQuestion, "Unable To Attach File")
                        If msgTryAgain = vbNo Then
                            Exit Sub
                        End If

                    ElseIf Not Err.Number = 0 Then
                        'Break Code To check New Error
                        'Debug.Assert False
                    End If
                End If
            Else
                On Error GoTo 0
                'Handle Missing Attachment Error
                msgTryAgain = MsgBox("Email Attachment cannot be found in the path provided." & Chr(10) & Chr(10) & _
                                     "Do you wish to continue without the attachment?", vbYesNo + vbQuestion, "Unable To Attach File")
                If msgTryAgain = vbNo Then
                    Exit Sub
                End If
            End If
        End If
    End With

    On Error Resume Next
    Err.Clear
TrySendAgain:
    'Attempt to send message
    iMsg.send


    If Err.Number = -2147220973 Then   'This error occures if server cannot be found or has timed out...
        On Error GoTo 0

        '        MsgBox "Unable to establish a connection with the" & Chr(10) & _
                 '               "designated SMPT Server.  Please check the" & Chr(10) & _
                 '               "configuration and try again.", vbOKOnly + vbInformation, "Unable to Connect To Server"
        '        Exit Sub

        'If you want, you can get rid of the message box above, and use the code below to reattempt your message using a backup GMail account.

        'Change designated server to backup Gmail Account if Desired
        With Flds
            .Item("http://schemas.microsoft.com/cdo/configuration/sendusing") = 2
            .Item("http://schemas.microsoft.com/cdo/configuration/smtpserver") = "smtp.gmail.com"
            .Item("http://schemas.microsoft.com/cdo/configuration/smtpauthenticate") = 1
            .Item("http://schemas.microsoft.com/cdo/configuration/sendusername") = "CVGHub.Reports.Backup@gmail.com"
            .Item("http://schemas.microsoft.com/cdo/configuration/sendpassword") = "DHLCVGHub"
            .Item("http://schemas.microsoft.com/cdo/configuration/smtpserverport") = 465
            .Item("http://schemas.microsoft.com/cdo/configuration/smtpusessl") = True
            .Item("http://schemas.microsoft.com/cdo/configuration/smtpconnectiontimeout") = 60
            .Update
        End With
        GoTo TrySendAgain

    ElseIf Err.Number = -2147220977 Then    'This error occures if an email address is found to be invalid.
        'Get Invalid Address
        strErrorDesc = Err.Description
        On Error GoTo 0
        If InStr(1, strErrorDesc, "Address rejected ", vbTextCompare) > 0 Then
            strtemp = Trim(Right(strErrorDesc, Len(strErrorDesc) - InStr(1, strErrorDesc, "Address rejected ", vbTextCompare) - 16))
            strtemp = Left(strtemp, Len(strtemp) - 2)

            MsgBox strtemp & " is not a valid address.  Please try again.", vbOKOnly + vbInformation, "Invalid Email Address"

            Exit Sub

        Else
            'MsgBox "Error detected:  " & strErrorDesc & Chr(10) & Chr(10) & "Please try again.", vbOKOnly + vbInformation, "Error"
            'Debug.Assert False

            'Concatinate Email Lists
            strtemp = Replace(strTo & ";" & strCC & ";" & strBCC, ";;", ";")
            If Left(strtemp, 1) = ";" Then strtemp = Right(strtemp, Len(strtemp) - 1)
            If Right(strtemp, 1) = ";" Then strtemp = Left(strtemp, Len(strtemp) - 1)

            'Send Emails Individually to strTo List
            If IsArray(varDistributionArray) Then Erase varDistributionArray

            'Load Array
            varDistributionArray = Split(strtemp, ";")

            'Did anything load?
            If IsArray(varDistributionArray) Then
                'If Only One Address, then Send notification
                If UBound(varDistributionArray) = 0 Then
                    'Send Owner An Email
                    strBody = "An error occured in the SendEMailViaCDO Subroutine." & vbCrLf & vbCrLf & "     Error Number: " & Err.Number & vbCrLf & "     Error Description: " & Err.Description & vbCrLf & "     To Distribution: " & strTo & vbCrLf & "     CC Distribution: " & strCC & vbCrLf & "     BCC Distribution: " & strBCC & vbCrLf & "     Subject: " & strSubject

                    SendEMailViaCDO OwnerEmail, "", "", "URGENT: Invalid Email Address Used In Tool", strBody

                    Exit Sub

                Else
                    'Cycle through Values of Each Distribution and Send email
                    'strTo
                    If IsArray(varDistributionArray) Then Erase varDistributionArray

                    'Load Array
                    strtemp = strTo
                    If Left(strtemp, 1) = ";" Then strtemp = Right(strtemp, Len(strtemp) - 1)
                    If Right(strtemp, 1) = ";" Then strtemp = Left(strtemp, Len(strtemp) - 1)
                    varDistributionArray = Split(strtemp, ";")

                    For Cntr1 = 0 To UBound(varDistributionArray)
                        SendEMailViaCDO varDistributionArray(Cntr1), "", "", strSubject, strBody, strFrom, strReplyTo, blnSendHTML, strAttachmentPath, blnHighImportance
                    Next Cntr1

                    'strCC
                    If IsArray(varDistributionArray) Then Erase varDistributionArray

                    'Load Array
                    strtemp = strCC
                    If Left(strtemp, 1) = ";" Then strtemp = Right(strtemp, Len(strtemp) - 1)
                    If Right(strtemp, 1) = ";" Then strtemp = Left(strtemp, Len(strtemp) - 1)
                    varDistributionArray = Split(strtemp, ";")

                    For Cntr1 = 0 To UBound(varDistributionArray)
                        SendEMailViaCDO "", varDistributionArray(Cntr1), "", strSubject, strBody, strFrom, strReplyTo, blnSendHTML, strAttachmentPath, blnHighImportance
                    Next Cntr1

                    'strBCC
                    If IsArray(varDistributionArray) Then Erase varDistributionArray

                    'Load Array
                    strtemp = strBCC
                    If Left(strtemp, 1) = ";" Then strtemp = Right(strtemp, Len(strtemp) - 1)
                    If Right(strtemp, 1) = ";" Then strtemp = Left(strtemp, Len(strtemp) - 1)
                    varDistributionArray = Split(strtemp, ";")

                    For Cntr1 = 0 To UBound(varDistributionArray)
                        SendEMailViaCDO "", "", varDistributionArray(Cntr1), strSubject, strBody, strFrom, strReplyTo, blnSendHTML, strAttachmentPath, blnHighImportance
                    Next Cntr1

                End If
            End If
            Exit Sub
        End If
    ElseIf Not Err.Number = 0 Then
        'If other untrapped email occures, then send owner an email and break the code for debugging and additional trapping and handling.
        SendEMailViaCDO OwnerEmail, "", "", "URGENT!! Email Error In CDO Email Tool", strErrorDesc
        'Debug.Assert False
        On Error GoTo 0
    End If

End Sub

Sub TestAttachmentEmail()

    Dim strBody As String
    Dim AttachPath As String


    AttachPath = "C:\Documents and Settings\rbliss\Desktop\TestTextFile.txt"

    strBody = "Test Attachment Size of " & Format(FileLen(AttachPath), "#,##0") & " bytes (" & Format(FileLen(AttachPath) / 1048576, "#,##0.00") & " MB.)"

    SendEMailViaCDO "Robert.Bliss@dhl.com", "", "", "Test Attachment Size Email", strBody, "Robert.Bliss@dhl.com", , False, AttachPath

End Sub

Function AppendSig() As String

    Dim strBody As String

    strBody = _
  "        <br />" & vbCrLf & _
            "        <br />" & vbCrLf & _
            "        <p>Thank you,</p>" & vbCrLf & _
            "        <p>Robert</p>" & vbCrLf & _
            "        <br />" & vbCrLf & _
            "        <p><span style='font-weight: bold;'>Robert Bliss</span><br />" & vbCrLf & _
            "        US Quality </p>" & vbCrLf & _
            "        <p><span style='font-weight: bold;'>DHL Express</span><br />" & vbCrLf & _
            "        236 Wendell H. Ford Blvd.<br />" & vbCrLf & _
            "        Erlanger, KY  41018</p>" & vbCrLf & _
            "        <p>Office&nbsp;&nbsp;&nbsp;(859) 817-8396<br />" & vbCrLf & _
            "        Mobile&nbsp;&nbsp;(849) 443-8059</p>" & vbCrLf & _
            "        <p><a href='http://www.dhl-usa.com' title='http://www.dhl-usa.com/'>www.dhl-usa.com</a></p>" & vbCrLf & _
            "        <p><a href='http://validator.w3.org/check?uri=referer'>" & vbCrLf & _
            "            <img src='http://www.w3.org/Icons/valid-xhtml10' alt='Valid XHTML 1.0 Transitional' height='31' width='88' style='border-style: none;' /></a></p>" & vbCrLf

    AppendSig = strBody

End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)

Application.Calculation = xlAutomatic

    If Target.Address = "$E$1" Then
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    
        Range("E1").Select
        ExecuteExcel4Macro "PRINT(1,,,1,,,,,,,,2,,,TRUE,,FALSE)"
        
    End If
    

End Sub
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SmartyStreets"
Private Const smart_url As String = "https://api.smartystreets.com/street-address?"
Private Const smart_auth_id As String = "auth-id=c1722141-6bd7-473a-af92-47a53d9f91dd"
Private Const smart_auth_token As String = "&auth-token=girF9hsNDbw16T13ZPaV"
'Private Const google_url As String = "https://maps.googleapis.com/maps/api/geocode/json?address="
'Private Const google_key As String = "&key=AIzaSyDl3yL3exuWOZZ6ZNlgLTmEbpURMJOmhP0"
Private Const emptyJSON As String = "[{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}" & _
                                    "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}]"

Sub SmartyStreets()

  Dim rdi As String                         '   RDI Designation String
  Dim i As Long, NumOfAddresses As Long     '   Row & Last Row Variables
  Dim hwb As String                         '   HWB Value Variable
  Dim StartTime As Date, EndTime As Date
  Dim NumOfRequests As Long
  Dim AddressRow As Long
  Dim resultsString As String
  
  Dim xlWS As Worksheet
  Set xlWS = ThisWorkbook.Sheets(ThisWorkbook.Sheets("Temp").Name)
  
  Application.Calculation = xlAutomatic
  
  StartTime = Now()
  UserForm1.Show
  
  i = 1
  NumOfAddresses = xlWS.Range("A108476").End(xlUp).row
  
  xlWS.Range("AU2").Formula = "=IFERROR(LEFT(R2,FIND("" "", R2,FIND("" "", R2, FIND("" "", R2, FIND("" "", R2, 1)+1)+1)+1)),R2)"
  xlWS.Range("AV2").Formula = "=IFERROR(LEFT(R2,FIND("" "", R2,FIND("" "", R2, FIND("" "", R2, 1)+1)+1)),R2)"
  xlWS.Range("AU2:AV2").AutoFill Range("AU2:AV" & NumOfAddresses), xlFillDefault
  
  Application.Calculation = xlManual
  
  NumOfRequests = (NumOfAddresses + 100 - 1) / 100
  
  For i = 1 To NumOfRequests
        '   Grab 100 Addresses
        Dim Json As Object
        Set Json = JsonConverter.ParseJson(emptyJSON)
        
        For j = 1 To 100
            AddressRow = (j + 1 + ((i - 1) * 100))
            Json(j)("input_id") = "" & xlWS.Range("A" & AddressRow).Value & ""
            Json(j)("street") = "" & Application.WorksheetFunction.IfError(xlWS.Range("AU" & AddressRow).Value, "") & ""
            Json(j)("street2") = "" & Application.WorksheetFunction.IfError(xlWS.Range("AV" & AddressRow).Value, "") & ""
            Json(j)("zipcode") = "" & xlWS.Range("U" & AddressRow).Value & ""
            Json(j)("candidates") = 10
            Json(j)("match") = "range"
        Next
        
        Call QuerySmarty(JsonConverter.ConvertToJson(Json), xlWS, resultsString)
        
        UserForm1.Label2.caption = i & "/" & NumOfRequests & " Requests Processed (100/request)"
        progress CInt((i / NumOfRequests) * 100)
NextHWB:
    Next
    
    UserForm1.Label1.Visible = False
    UserForm1.Label2.caption = "Validating Data..."
    Call JsonToRDI(resultsString, xlWS)
    
    EndTime = Now()
    
    xlWS.Range("AU2:AV" & NumOfAddresses).Clear
    

UserForm1.Hide


    
End Sub

Private Sub QuerySmarty(jsonString As String, xlWS As Worksheet, ByRef resultsString As String)

Dim XMLReq As New XMLHTTP60
Dim request As String, status As String

request = smart_url & smart_auth_id & smart_auth_token

XMLReq.Open "POST", request, False
XMLReq.send jsonString
status = XMLReq.status

If status = "200" Then Call ConcatJson(resultsString, XMLReq.responseText)

End Sub

Private Sub DetermineUnknowns(xlWS As Worksheet, lastRow As Long, resultsString As String)

    Dim Json As Object
    Set Json = JsonConverter.ParseJson(emptyJSON)
    
    xlWS.AutoFilter.Sort.SortFields.Clear
    xlWS.AutoFilter.Sort.SortFields.Add Key:=Range("Y1:Y3944"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortTextAsNumbers
    With ActiveWorkbook.Worksheets("LGA").AutoFilter.Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    Dim iRow As Long, i As Integer
    
    For iRow = lastRow To 2 Step -1
        If Not IsEmpty(xlWS.Range("Y" & iRow)) Then
            i = -1
            GoTo FinishUp
        Else
            i = i + 1
            Call QueryGoogle(xlWS.Range("R" & iRow).Value & ", " & xlWS.Range("S" & iRow).Value & ", " & xlWS.Range("U" & iRow).Value, Json, i, xlWS, iRow)
        End If
        
        If i = 100 Or iRow = 2 Then
            Call QuerySmarty(JsonConverter.ConvertToJson(Json), xlWS, resultsString)
            Set Json = JsonConverter.ParseJson(emptyJSON)
            i = 0
        End If
    Next
    
FinishUp:   If i = -1 Then
                Call QuerySmarty(JsonConverter.ConvertToJson(Json), xlWS, resultsString)
                Set Json = JsonConverter.ParseJson(emptyJSON)
            End If

End Sub

Private Function ConcatJson(ByRef results As String, ByRef Json As String)

    Dim rightSide As String
    
    rightSide = Right(results, 10)

    If Len(results) = 0 Then
        results = Json
    ElseIf Len(Json) < 10 Then
        
    Else
        results = Replace(results, "]", ",") + Trim(Mid(Json, 2, Len(Json) - 1))
    End If

End Function

Private Function JsonToRDI(jsonString As String, xlWS As Worksheet)

    Dim Json As Object
    Dim hwb As String, iRow As Long
    Set Json = JsonConverter.ParseJson(jsonString)
    
    Dim vArray As Variant
    vArray = xlWS.Range("A1:A" & Cells(xlWS.Rows.Count, "A").End(xlUp).row).Value
    
    For Each Item In Json
        hwb = Item("input_id")
        iRow = Application.Match(hwb * 1, vArray, 0)
        xlWS.Range("Y" & iRow).Value = Item("metadata")("rdi")
        ScrubAddr = UCase(Item("delivery_line_1"))
        xlWS.Range("N" & iRow).Value = ScrubAddr
        If InStr(1, Right(Item("last_line"), 10), " ") = 0 Then
            xlWS.Range("U" & iRow).Value = Right(Item("last_line"), 10)
        End If
        xlWS.Range("Z" & iRow).Value = Item("metadata")("latitude") & "," & Item("metadata")("longitude")
    Next
    
End Function

Private Function QueryGoogle(uri As String, Json As Object, i As Integer, xlWS As Worksheet, iRow As Long)
    
    Dim httpReq As New XMLHTTP60                      '   HTTP Request Variable
    Dim request As String                           '   Request String
    Dim response(1 To 3) As String

    uri = ReadyURIForGoogle(uri)
    
    request = google_url & uri & google_key
    
    httpReq.Open "GET", request, False
    httpReq.send
    
    If GoodResponse(httpReq) = True Then
        Call ParseGoogle(response, httpReq.responseText)
        Json(i)("input_id") = "" & xlWS.Range("A" & iRow).Value
        Json(i)("street") = "" & response(1)
        Json(i)("city") = "" & response(2)
        Json(i)("zipcode") = "" & response(3)
        Json(i)("candidates") = 10
    Else:
        QueryGoogle = "Unknown"
    End If
    
End Function

Private Function ReadyURIForGoogle(uri As String) As String
    uri = Replace(uri, "&street2=", "")
    uri = Replace(uri, "&street=", "")
    uri = Replace(uri, "&city=", ", ")
    uri = Replace(uri, "&zipcode=", ", ")
    
    ReadyURIForGoogle = uri
End Function

Private Function GoodResponse(WebRequest As XMLHTTP60) As Boolean

    If WebRequest.status = 200 And VBA.Len(WebRequest.responseText) > 60 Then GoodResponse = True
    'GoodResponse = True

End Function

Private Function ParseSmartyStreets(response() As String, JsonResponse As String)
    Dim Json As Object
    Set Json = JsonConverter.ParseJson(JsonResponse)
    
    response(1) = Json(1)("metadata")("rdi")
    response(2) = Json(1)("metadata")("latitude")
    response(3) = Json(1)("metadata")("longitude")
End Function

Private Function ParseGoogle(response() As String, JsonResponse As String)
    Dim Json As Object, formattedAddress As String
    Set Json = JsonConverter.ParseJson(JsonResponse)
    
    formattedAddress = Json("results")(1)("formatted_address")
    
    Dim Address() As String
    Address = Split(formattedAddress, ", ")
    
    response(1) = Address(0)
    For i = UBound(Address) To LBound(Address) Step -1
        If VBA.Len(Address(i)) = 8 And _
        IsLetter(Left(Address(i), 2)) And _
        IsNumeric(Right(Address(i), 5)) Then
            response(3) = Right(Address(i), 5)
        ElseIf IsLetter(Address(i)) Then
            response(2) = Address(i)
        End If
    Next
End Function

Function IsLetter(strValue As String) As Boolean
    Dim intPos As Integer
    For intPos = 1 To Len(strValue)
        Select Case Asc(Mid(strValue, intPos, 1))
            Case 65 To 90, 97 To 122
                IsLetter = True
            Case Else
                IsLetter = False
                Exit For
        End Select
    Next
End Function

Sub progress(pctCompl As Single)

If UserForm1.Label2.Visible = False Then UserForm1.Label2.Visible = True

UserForm1.Label1.caption = pctCompl & "% Completed"
UserForm1.Bar.Width = pctCompl * 2

DoEvents

End Sub


Attribute VB_Name = "SmartyStreets1"
Private Const smart_url As String = "https://api.smartystreets.com/street-address?"
Private Const smart_auth_id As String = "auth-id=c1722141-6bd7-473a-af92-47a53d9f91dd"
Private Const smart_auth_token As String = "&auth-token=girF9hsNDbw16T13ZPaV"
'Private Const google_url As String = "https://maps.googleapis.com/maps/api/geocode/json?address="
'Private Const google_key As String = "&key=AIzaSyDl3yL3exuWOZZ6ZNlgLTmEbpURMJOmhP0"
Private Const emptyJSON As String = "[{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}" & _
                                    "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}]"

Sub SmartyStreets2()

  Dim rdi As String                         '   RDI Designation String
  Dim i As Long, NumOfAddresses As Long     '   Row & Last Row Variables
  Dim hwb As String                         '   HWB Value Variable
  Dim StartTime As Date, EndTime As Date
  Dim NumOfRequests As Long
  Dim AddressRow As Long
  Dim resultsString As String
  
  Dim xlWS As Worksheet
  Set xlWS = ThisWorkbook.Sheets(ThisWorkbook.Sheets("Temp").Name)
  
  Application.Calculation = xlAutomatic
  Columns("A:Z").Sort key1:=Range("Y:Y"), order1:=xlAscending, Header:=xlYes
  
  StartTime = Now()
  UserForm1.Show
  
  i = 1
  NumOfAddresses = xlWS.Range("A108476").End(xlUp).row
  NumOfMatches = xlWS.Range("Y108476").End(xlUp).row
  NumOfNoMatches = NumOfAddresses - NumOfMatches
  
  xlWS.Range("AU2").Formula = "=IFERROR(LEFT(S2,FIND("" "", S2,FIND("" "", S2, FIND("" "", S2, FIND("" "", S2, 1)+1)+1)+1)),S2)"
  xlWS.Range("AV2").Formula = "=IFERROR(LEFT(S2,FIND("" "", S2,FIND("" "", S2, FIND("" "", S2, 1)+1)+1)),S2)"
  xlWS.Range("AU2:AV2").AutoFill Range("AU2:AV" & NumOfAddresses), xlFillDefault
  
  Application.Calculation = xlManual
  
  NumOfRequests = (NumOfNoMatches + 100 - 1) / 100
  
  For i = 1 To NumOfRequests
        '   Grab 100 Addresses
        Dim Json As Object
        Set Json = JsonConverter.ParseJson(emptyJSON)
        
        For j = 1 To 100
            AddressRow = (j + NumOfMatches + 1 + ((i - 1) * 100))
            Json(j)("input_id") = "" & xlWS.Range("A" & AddressRow).Value & ""
            Json(j)("street") = "" & Application.WorksheetFunction.IfError(xlWS.Range("AU" & AddressRow).Value, "") & ""
            Json(j)("street2") = "" & Application.WorksheetFunction.IfError(xlWS.Range("AV" & AddressRow).Value, "") & ""
            Json(j)("zipcode") = "" & xlWS.Range("U" & AddressRow).Value & ""
            Json(j)("candidates") = 10
            Json(j)("match") = "range"
        Next
        
        Call QuerySmarty(JsonConverter.ConvertToJson(Json), xlWS, resultsString)
        
        UserForm1.Label2.caption = i & "/" & NumOfRequests & " Requests Processed (100/request)"
        progress CInt((i / NumOfRequests) * 100)
NextHWB:
    Next
    
    UserForm1.Label1.Visible = False
    UserForm1.Label2.caption = "Validating Data..."
    Call JsonToRDI(resultsString, xlWS)
    
    EndTime = Now()
    
    xlWS.Range("AU2:AV" & NumOfAddresses).Clear

UserForm1.Hide
Columns("A:Z").Sort key1:=Range("U:U"), order1:=xlAscending, Header:=xlYes
Columns("A:Z").Sort key1:=Range("N:N"), order1:=xlAscending, Header:=xlYes

End Sub

Private Sub QuerySmarty(jsonString As String, xlWS As Worksheet, ByRef resultsString As String)

Dim XMLReq As New XMLHTTP60
Dim request As String, status As String

request = smart_url & smart_auth_id & smart_auth_token

XMLReq.Open "POST", request, False
XMLReq.send jsonString
status = XMLReq.status

If status = "200" Then Call ConcatJson(resultsString, XMLReq.responseText)

End Sub

Private Sub DetermineUnknowns(xlWS As Worksheet, lastRow As Long, resultsString As String)

    Dim Json As Object
    Set Json = JsonConverter.ParseJson(emptyJSON)
    
    xlWS.AutoFilter.Sort.SortFields.Clear
    xlWS.AutoFilter.Sort.SortFields.Add Key:=Range("Y1:Y3944"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortTextAsNumbers
    With ActiveWorkbook.Worksheets("LGA").AutoFilter.Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    Dim iRow As Long, i As Integer
    
    For iRow = lastRow To 2 Step -1
        If Not IsEmpty(xlWS.Range("Y" & iRow)) Then
            i = -1
            GoTo FinishUp
        Else
            i = i + 1
            Call QueryGoogle(xlWS.Range("R" & iRow).Value & ", " & xlWS.Range("S" & iRow).Value & ", " & xlWS.Range("U" & iRow).Value, Json, i, xlWS, iRow)
        End If
        
        If i = 100 Or iRow = 2 Then
            Call QuerySmarty(JsonConverter.ConvertToJson(Json), xlWS, resultsString)
            Set Json = JsonConverter.ParseJson(emptyJSON)
            i = 0
        End If
    Next
    
FinishUp:   If i = -1 Then
                Call QuerySmarty(JsonConverter.ConvertToJson(Json), xlWS, resultsString)
                Set Json = JsonConverter.ParseJson(emptyJSON)
            End If

End Sub

Private Function ConcatJson(ByRef results As String, ByRef Json As String)

    Dim rightSide As String
    
    rightSide = Right(results, 10)

    If Len(results) = 0 Then
        results = Json
    ElseIf Len(Json) < 10 Then
        
    Else
        results = Replace(results, "]", ",") + Trim(Mid(Json, 2, Len(Json) - 1))
    End If

End Function

Private Function JsonToRDI(jsonString As String, xlWS As Worksheet)

    Dim Json As Object
    Dim hwb As String, iRow As Long
    Set Json = JsonConverter.ParseJson(jsonString)
    
    Dim vArray As Variant
    vArray = xlWS.Range("A1:A" & Cells(xlWS.Rows.Count, "A").End(xlUp).row).Value
    
    On Error Resume Next
    For Each Item In Json
        hwb = Item("input_id")
        iRow = Application.Match(hwb * 1, vArray, 0)
        xlWS.Range("Y" & iRow).Value = Item("metadata")("rdi")
        ScrubAddr = UCase(Item("delivery_line_1"))
        xlWS.Range("N" & iRow).Value = ScrubAddr
        If InStr(1, Right(Item("last_line"), 10), " ") = 0 Then
            xlWS.Range("U" & iRow).Value = Right(Item("last_line"), 10)
        End If
        xlWS.Range("Z" & iRow).Value = Item("metadata")("latitude") & "," & Item("metadata")("longitude")
    Next
    On Error GoTo 0
    
End Function

Private Function QueryGoogle(uri As String, Json As Object, i As Integer, xlWS As Worksheet, iRow As Long)
    
    Dim httpReq As New XMLHTTP60                      '   HTTP Request Variable
    Dim request As String                           '   Request String
    Dim response(1 To 3) As String

    uri = ReadyURIForGoogle(uri)
    
    request = google_url & uri & google_key
    
    httpReq.Open "GET", request, False
    httpReq.send
    
    If GoodResponse(httpReq) = True Then
        Call ParseGoogle(response, httpReq.responseText)
        Json(i)("input_id") = "" & xlWS.Range("A" & iRow).Value
        Json(i)("street") = "" & response(1)
        Json(i)("city") = "" & response(2)
        Json(i)("zipcode") = "" & response(3)
        Json(i)("candidates") = 10
    Else:
        QueryGoogle = "Unknown"
    End If
    
End Function

Private Function ReadyURIForGoogle(uri As String) As String
    uri = Replace(uri, "&street2=", "")
    uri = Replace(uri, "&street=", "")
    uri = Replace(uri, "&city=", ", ")
    uri = Replace(uri, "&zipcode=", ", ")
    
    ReadyURIForGoogle = uri
End Function

Private Function GoodResponse(WebRequest As XMLHTTP60) As Boolean

    If WebRequest.status = 200 And VBA.Len(WebRequest.responseText) > 60 Then GoodResponse = True
    'GoodResponse = True

End Function

Private Function ParseSmartyStreets(response() As String, JsonResponse As String)
    Dim Json As Object
    Set Json = JsonConverter.ParseJson(JsonResponse)
    
    response(1) = Json(1)("metadata")("rdi")
    response(2) = Json(1)("metadata")("latitude")
    response(3) = Json(1)("metadata")("longitude")
End Function

Private Function ParseGoogle(response() As String, JsonResponse As String)
    Dim Json As Object, formattedAddress As String
    Set Json = JsonConverter.ParseJson(JsonResponse)
    
    formattedAddress = Json("results")(1)("formatted_address")
    
    Dim Address() As String
    Address = Split(formattedAddress, ", ")
    
    response(1) = Address(0)
    For i = UBound(Address) To LBound(Address) Step -1
        If VBA.Len(Address(i)) = 8 And _
        IsLetter(Left(Address(i), 2)) And _
        IsNumeric(Right(Address(i), 5)) Then
            response(3) = Right(Address(i), 5)
        ElseIf IsLetter(Address(i)) Then
            response(2) = Address(i)
        End If
    Next
End Function

Function IsLetter(strValue As String) As Boolean
    Dim intPos As Integer
    For intPos = 1 To Len(strValue)
        Select Case Asc(Mid(strValue, intPos, 1))
            Case 65 To 90, 97 To 122
                IsLetter = True
            Case Else
                IsLetter = False
                Exit For
        End Select
    Next
End Function

Sub progress(pctCompl As Single)

If UserForm1.Label2.Visible = False Then UserForm1.Label2.Visible = True

UserForm1.Label1.caption = pctCompl & "% Completed"
UserForm1.Bar.Width = pctCompl * 2

DoEvents

End Sub


Attribute VB_Name = "Startup"
Sub RunUpdates()
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    InsertTransaction strToolName, ThisToolsVersion, Environ("USERNAME"), Environ("COMPUTERNAME"), GetClientIP, "tool_CheckToolVersion", "CheckToolVersion", _
                      "Workbook Closed", Date, 0, 0, 0, 0, _
                      Environ("OS"), Environ("NUMBER_OF_PROCESSORS"), Environ("PROCESSOR_ARCHITECTURE"), Environ("PROCESSOR_IDENTIFIER"), Environ("PROCESSOR_LEVEL"), Environ("PROCESSOR_REVISION"), Environ("USERDNSDOMAIN"), Environ("USERDOMAIN"), Application.Version
End Sub

Private Sub Workbook_Open()

    InsertTransaction strToolName, ThisToolsVersion, Environ("USERNAME"), Environ("COMPUTERNAME"), GetClientIP, "tool_CheckToolVersion", "CheckToolVersion", _
                      "Workbook Opened", Date, 0, 0, 0, 0, _
                      Environ("OS"), Environ("NUMBER_OF_PROCESSORS"), Environ("PROCESSOR_ARCHITECTURE"), Environ("PROCESSOR_IDENTIFIER"), Environ("PROCESSOR_LEVEL"), Environ("PROCESSOR_REVISION"), Environ("USERDNSDOMAIN"), Environ("USERDOMAIN"), Application.Version
    Call CheckToolVersion
    
    '   Call RunUpdates
End Sub

Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{2ADC94D8-7B9A-4DFD-95B1-7EE4E67581A5}{383DD2A1-526E-4FA0-8AF0-AC2131028CEC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Activate()
    Me.Top = Application.Top + 75
    Me.Left = Application.Left + 75
End Sub

Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{A684E590-BBB3-4DAE-A7B5-C35E9CB174AA}{069EE7B4-B65E-446D-821D-5698A0995C48}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public TotalRows As Integer

Private Sub CommandButton1_Click()

    'Edit and Save
    FirstBlank = Range("N2").End(xlDown).row + 1
    HWBRow = ListBox1.ListIndex
    Sheets("Temp").Range("P" & HWBRow + FirstBlank).Value = UserForm2.TextBox1.Value
    Sheets("Temp").Range("R" & HWBRow + FirstBlank).Value = UserForm2.TextBox2.Value
    Sheets("Temp").Range("S" & HWBRow + FirstBlank).Value = UserForm2.TextBox3.Value
    Sheets("Temp").Range("T" & HWBRow + FirstBlank).Value = UserForm2.TextBox4.Value
    Sheets("Temp").Range("U" & HWBRow + FirstBlank).Value = UserForm2.TextBox5.Value
    
    UserForm_Initialize
    If HWBRow < TotalRows Then 'Check for last row
        ListBox1.ListIndex = HWBRow + 1
    Else
        HWBRow = 1
    End If
    

End Sub

Private Sub CommandButton2_Click()

    'Rerun Smarty Streets
    UserForm2.Hide
    SmartyStreets.SmartyStreets
    SmartyStreets1.SmartyStreets2
    UserForm_Initialize
    UserForm2.Show
    
End Sub

Private Sub CommandButton3_Click()
    
    'Exit
    UserForm2.Hide

End Sub


Private Sub ListBox1_Click()

    For idx = 0 To ListBox1.ListCount
    FirstBlank = Range("N2").End(xlDown).row + 1
    
    If ListBox1.Selected(idx) = True Then
        HWBRow = ListBox1.ListIndex

        UserForm2.TextBox1.Value = Sheets("Temp").Range("P" & HWBRow + FirstBlank).Value
        UserForm2.TextBox2.Value = Sheets("Temp").Range("R" & HWBRow + FirstBlank).Value
        UserForm2.TextBox3.Value = Sheets("Temp").Range("S" & HWBRow + FirstBlank).Value
        UserForm2.TextBox4.Value = Sheets("Temp").Range("T" & HWBRow + FirstBlank).Value
        UserForm2.TextBox5.Value = Sheets("Temp").Range("U" & HWBRow + FirstBlank).Value
        UserForm2.TextBox6.Value = Sheets("Temp").Range("A" & HWBRow + FirstBlank).Value
    End If
Next idx

End Sub

Private Sub TextBox7_Change()

End Sub

Private Sub UserForm_Initialize()

    Dim Data(), FirstBlank As Integer, lastRow As Integer
    Sheets("Temp").Select
    FirstBlank = Range("N2").End(xlDown).row + 1
    lastRow = ActiveSheet.UsedRange.Rows.Count
    row = lastRow - FirstBlank
    ReDim Data(FirstBlank To lastRow, 1 To 6)
    
    For row = FirstBlank To lastRow
        Data(row, 1) = Sheets("Temp").Cells(row, 1)
        Data(row, 2) = Sheets("Temp").Cells(row, 16)
        Data(row, 3) = Sheets("Temp").Cells(row, 18)
        Data(row, 4) = Sheets("Temp").Cells(row, 19)
        Data(row, 5) = Sheets("Temp").Cells(row, 20)
        Data(row, 6) = Sheets("Temp").Cells(row, 21)
    Next row
    ListBox1.ColumnCount = 6
    ListBox1.List = Data
    ListBox1.ListIndex = 0
    TotalRows = lastRow - FirstBlank
    UserForm2.TextBox7.Value = lastRow - FirstBlank
    
End Sub
Attribute VB_Name = "UserForm3"
Attribute VB_Base = "0{E7D6C125-1B59-46E2-B8BB-8320E341BF41}{63EA7C50-0C69-4CD2-A3CD-38420279D679}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton2_Click()

    'Reset to Route Code

    HWBRow = ListBox1.ListIndex
    If HWBRow > 0 Then
        'Sheets("Routes").Range("B" & HWBRow + 1).Value = UserForm3.TextBox1.Value
        Sheets("Routes").Range("G" & HWBRow + 1).Value = UserForm3.TextBox1.Value
        Sheets("Routes").Range("H" & HWBRow + 1).Value = UserForm3.TextBox1.Value
        Sheets("Routes").Range("I" & HWBRow + 1).Value = UserForm3.TextBox1.Value
    
        UserForm_Initialize
        ListBox1.ListIndex = HWBRow + 1
    Else
        MsgBox "Select a route before saving"
    End If

End Sub

Private Sub CommandButton3_Click()

    'Reset All to Route Codes

    HWBRow = ListBox1.ListIndex
    Sheets("Routes").Select
    'FirstBlank = Range("N2").End(xlDown).row + 1
    lastRow = ActiveSheet.UsedRange.Rows.Count
    
    For HWBRow = 1 To lastRow

        Sheets("Routes").Range("G" & HWBRow + 1).Value = Sheets("Routes").Range("B" & HWBRow + 1).Value
        Sheets("Routes").Range("H" & HWBRow + 1).Value = Sheets("Routes").Range("B" & HWBRow + 1).Value
        Sheets("Routes").Range("I" & HWBRow + 1).Value = Sheets("Routes").Range("B" & HWBRow + 1).Value

    Next HWBRow
    
    UserForm_Initialize
    ListBox1.ListIndex = 1
    
End Sub

Private Sub CommandButton4_Click()

    'Reset All to Blank

    HWBRow = ListBox1.ListIndex
    Sheets("Routes").Select
    'FirstBlank = Range("N2").End(xlDown).row + 1
    lastRow = ActiveSheet.UsedRange.Rows.Count
    
    For HWBRow = 1 To lastRow

        Sheets("Routes").Range("G" & HWBRow + 1).Value = ""
        Sheets("Routes").Range("H" & HWBRow + 1).Value = ""
        Sheets("Routes").Range("I" & HWBRow + 1).Value = ""

    Next HWBRow
    
    UserForm_Initialize
    ListBox1.ListIndex = 1

End Sub

Private Sub CommandButton5_Click()

    'Reset All to Resi

    HWBRow = ListBox1.ListIndex
    Sheets("Routes").Select
    'FirstBlank = Range("N2").End(xlDown).row + 1
    lastRow = ActiveSheet.UsedRange.Rows.Count
    
    For HWBRow = 1 To lastRow

        Sheets("Routes").Range("G" & HWBRow + 1).Value = Sheets("Routes").Range("B" & HWBRow + 1).Value
        Sheets("Routes").Range("H" & HWBRow + 1).Value = ""
        Sheets("Routes").Range("I" & HWBRow + 1).Value = ""

    Next HWBRow
    
    UserForm_Initialize
    ListBox1.ListIndex = 1

End Sub

Private Sub CommandButton6_Click()

    'Blank and Save

    HWBRow = ListBox1.ListIndex
    If HWBRow > 0 Then
        'Sheets("Routes").Range("B" & HWBRow + 1).Value = UserForm3.TextBox1.Value
        Sheets("Routes").Range("G" & HWBRow + 1).Value = ""
        Sheets("Routes").Range("H" & HWBRow + 1).Value = ""
        Sheets("Routes").Range("I" & HWBRow + 1).Value = ""
    
    UserForm_Initialize
    ListBox1.ListIndex = HWBRow + 1
    Else
        MsgBox "Select a route before saving"
    End If

End Sub

Private Sub CommandButton7_Click()

    'Resi and Save

    HWBRow = ListBox1.ListIndex
    If HWBRow > 0 Then
        'Sheets("Routes").Range("B" & HWBRow + 1).Value = UserForm3.TextBox1.Value
        Sheets("Routes").Range("G" & HWBRow + 1).Value = UserForm3.TextBox1.Value
        Sheets("Routes").Range("H" & HWBRow + 1).Value = ""
        Sheets("Routes").Range("I" & HWBRow + 1).Value = ""
    
    UserForm_Initialize
    ListBox1.ListIndex = HWBRow + 1
    Else
        MsgBox "Select a route before saving"
    End If

End Sub


Private Sub ListBox1_Click()


    For idx = 1 To ListBox1.ListCount

    
    If ListBox1.Selected(idx) = True Then
        HWBRow = ListBox1.ListIndex

        UserForm3.TextBox1.Value = Sheets("Routes").Range("B" & HWBRow + 1).Value
        UserForm3.TextBox2.Value = Sheets("Routes").Range("G" & HWBRow + 1).Value
        UserForm3.TextBox3.Value = Sheets("Routes").Range("H" & HWBRow + 1).Value
        UserForm3.TextBox4.Value = Sheets("Routes").Range("I" & HWBRow + 1).Value
        If UserForm3.TextBox1.Value <> UserForm3.TextBox2.Value Then
            UserForm3.TextBox2.BackColor = vbYellow
        Else
            UserForm3.TextBox2.BackColor = vbWhite
        End If
        If UserForm3.TextBox1.Value <> UserForm3.TextBox3.Value Then
            UserForm3.TextBox3.BackColor = vbYellow
        Else
            UserForm3.TextBox3.BackColor = vbWhite
        End If
        If UserForm3.TextBox1.Value <> UserForm3.TextBox4.Value Then
            UserForm3.TextBox4.BackColor = vbYellow
        Else
            UserForm3.TextBox4.BackColor = vbWhite
        End If
    End If
    Next idx

End Sub

Private Sub CommandButton1_Click()

    'Edit and Save

    HWBRow = ListBox1.ListIndex
    If HWBRow > 0 Then
        'Sheets("Routes").Range("B" & HWBRow + 1).Value = UserForm3.TextBox1.Value
        Sheets("Routes").Range("G" & HWBRow + 1).Value = UserForm3.TextBox2.Value
        Sheets("Routes").Range("H" & HWBRow + 1).Value = UserForm3.TextBox3.Value
        Sheets("Routes").Range("I" & HWBRow + 1).Value = UserForm3.TextBox4.Value

    UserForm_Initialize
    ListBox1.ListIndex = HWBRow + 1
    Else
        MsgBox "Select a route before saving"
    End If

End Sub

Private Sub UserForm_Initialize()
    
    Dim Data(), FirstBlank As Integer, lastRow As Integer
    Sheets("Routes").Select
    Sheets("Routes").Cells(1, 7) = "RESI"
    Sheets("Routes").Cells(1, 8) = "COMM"
    Sheets("Routes").Cells(1, 9) = "UNK"
    'FirstBlank = Range("N2").End(xlDown).row + 1
    lastRow = ActiveSheet.UsedRange.Rows.Count
    'row = 2
    ReDim Data(1 To lastRow, 1 To 5)
    
    For row = 1 To lastRow
        Data(row, 1) = Sheets("Routes").Cells(row, 2)
        Data(row, 2) = Sheets("Routes").Cells(row, 7)
        Data(row, 3) = Sheets("Routes").Cells(row, 8)
        Data(row, 4) = Sheets("Routes").Cells(row, 9)
        If Data(row, 1) <> Data(row, 3) Or Data(row, 2) <> Data(row, 3) Or Data(row, 1) <> Data(row, 4) Then
            Data(row, 5) = "***UPDATE***"
        End If
        
    Next row
    ListBox1.ColumnCount = 5
    ListBox1.List = Data
    ListBox1.ListIndex = 1
    ListBox1.ColumnWidths = "50;50;50;50;70"
    
End Sub
Attribute VB_Name = "UserForm4"
Attribute VB_Base = "0{EE75CB32-5FE3-475B-BE02-149CD288DA49}{8F352834-4B26-4825-B28E-CC10E135C37C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public StationName As String
Public PageName As String
Public firstrow As Integer
Public RouteSelect As String

Private Sub CommandButton1_Click()
    
    MsgBox "Assisted Realocation is currently deactivated"
    'UserForm5.Show
    Call UserForm_Initialize

End Sub


Private Sub CommandButton2_Click()
    
    'Manual reallocations
    UserForm6.Show
    
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    
    Sheets(StationName).Select
    firstrow = ActiveCell.row()
    For row = 0 To ListBox1.ListCount - 1
        If ListBox1.Selected(row) = True Then
            Sheets(StationName).Cells(firstrow + row, 2) = NewRoute
        End If
    Next row
    Selection.AutoFilter Field:=2
    Columns("A:AG").Sort key1:=Range("B:B"), order1:=xlAscending, Header:=xlYes
    'Application.Calculation = xlAutomatic

    UserForm_Initialize

End Sub

Private Sub CommandButton3_Click()
    
    'Summary Refresh
    Application.Calculation = xlAutomatic
    StationName = Sheets("Setup").Range("C7").Value ' Refresh Summary page
    SheetName = StationName & " Summary"
    
    Sheets(SheetName).Select
    lastRow = ActiveSheet.UsedRange.Rows.Count
    Columns("A:K").Select
    Selection.ClearContents
    Rows(lastRow).Delete
    
    Sheets(StationName).Select
    If ActiveSheet.AutoFilterMode Then
        If ActiveSheet.FilterMode Then
            ActiveSheet.ShowAllData
        End If
    End If
    lastRow = ActiveSheet.UsedRange.Rows.Count
    Range("A1:AV" & lastRow).Sort key1:=Range("AL1"), order1:=xlAscending, Header:= _
          xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
          DataOption1:=xlSortNormal
    Range("AK1").Select
    ActiveCell = SheetName
    Columns("AL:AV").Select
    Selection.Copy
    
    Sheets(Range("AK1").Value).Select
    Range("A1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Rows("1:1").Select
    Selection.Font.Bold = True
    Range("B1").Value = "HWB"
    Range("C1").Value = "PCS"
    Range("D1").Value = "WGT"
    Range("E1").Value = "STOPS"
    Range("H1").Value = "DIFF"
    Range("I1").Value = "TDX 1030"
    Range("J1").Value = "TDX 1200"
    Range("K1").Value = "% RESI"
    lastRow = ActiveSheet.UsedRange.Rows.Count
    Range("H2:H" & lastRow).Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="OK"
    Selection.FormatConditions(1).Interior.ColorIndex = 4
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="0"
    Selection.FormatConditions(2).Interior.ColorIndex = 6
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="0"
    Selection.FormatConditions(3).Interior.ColorIndex = 3
    Columns("D:H").Select
    Selection.NumberFormat = "0"
    Application.ScreenUpdating = True
    
    Range("A1:K55").Select 'Create Table
    ActiveSheet.ListObjects.Add(xlSrcRange, Range("$A$1:$K$" & lastRow), , xlYes).Name = _
        "Table1"
    Range("Table1[#All]").Select
    ActiveSheet.ListObjects("Table1").TableStyle = "TableStyleMedium2"
    
    TableRange = ActiveSheet.Range("B2", Range("B2").End(xlDown))
    Range("B" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("C2", Range("C2").End(xlDown))
    Range("C" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("D2", Range("D2").End(xlDown))
    Range("D" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("E2", Range("E2").End(xlDown))
    Range("E" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("I2", Range("I2").End(xlDown))
    Range("I" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    TableRange = ActiveSheet.Range("J2", Range("J2").End(xlDown))
    Range("J" & lastRow + 1) = WorksheetFunction.Sum(TableRange)
    Range("A" & lastRow + 1).EntireRow.Font.Bold = True
    Range("A1").Select
    
    Application.ScreenUpdating = True
    Sheets(PageName).Select
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    UserForm_Initialize
    
End Sub

Private Sub CommandButton4_Click()

    'Exit
    UserForm4.Hide
    SvcAr = Sheets("Setup").Range("C7").Value
    On Error Resume Next
    Sheets(SvcAr).Select
    ActiveSheet.ShowAllData
    On Error GoTo 0
    'Application.Calculation = xlAutomatic

End Sub



Private Sub ListBox1_Click()

End Sub

Private Sub ListBox2_Click()

    Dim Data(), firstrow As Integer, lastRow As Integer
    Dim Arr1 As Variant
    
    Application.ScreenUpdating = False
    Sheets(StationName).Select
    RteRow = ListBox2.ListIndex
    RouteSelect = Sheets(PageName).Cells(RteRow + 1, 1).Value
    UserForm4.TextBox31.Value = RouteSelect
    Selection.AutoFilter Field:=2, Criteria1:=RouteSelect
    Range("A2", Cells(Rows.Count, "A").End(xlUp)).SpecialCells(xlCellTypeVisible).Cells(1, 1).Select
    firstrow = ActiveCell.row()
    lastRow = Range("A" & Rows.Count).End(xlUp).row
    ReDim Data(firstrow To lastRow, 1 To 11)
    
    On Error Resume Next
    For row = firstrow To lastRow
        Data(row, 1) = Sheets(StationName).Cells(row, 1)
        Data(row, 2) = Sheets(StationName).Cells(row, 29)
        Wgt = Sheets(StationName).Cells(row, 11)
        Arr1 = Split(Wgt, ".")
        Strg1 = Arr1(0)
        Strg2 = Arr1(1)
        Strg2 = Left(Strg2, 1)
        Strg = Strg1 & "." & Strg2
        Data(row, 3) = Strg
        Data(row, 4) = Sheets(StationName).Cells(row, 4)
        Data(row, 5) = Sheets(StationName).Cells(row, 5)
        Data(row, 6) = Sheets(StationName).Cells(row, 15)
        Data(row, 7) = Sheets(StationName).Cells(row, 17)
        Data(row, 8) = Sheets(StationName).Cells(row, 18)
        Data(row, 9) = Sheets(StationName).Cells(row, 20)
        Data(row, 10) = Sheets(StationName).Cells(row, 21)
        Data(row, 11) = Sheets(StationName).Cells(row, 25)
    Next row
    On Error GoTo 0
    
    ListBox1.ColumnCount = 11
    ListBox1.List = Data
    ListBox1.ColumnWidths = "60;18;35;50;63;78;98;80,65,60"
    
    'Populate textbox details for summary
    For idx = 1 To ListBox2.ListCount
    
    If ListBox2.Selected(idx) = True Then
        RouteRow = ListBox2.ListIndex

        UserForm4.TextBox1.Value = Sheets(PageName).Range("A" & RouteRow + 1).Value
        UserForm4.TextBox2.Value = Sheets(PageName).Range("B" & RouteRow + 1).Value
        UserForm4.TextBox3.Value = Sheets(PageName).Range("C" & RouteRow + 1).Value
        Wgt = Sheets(PageName).Range("D" & RouteRow + 1).Value
        Wgt = Round(Wgt, 0)
        UserForm4.TextBox4.Value = Wgt
        Stops = Sheets(PageName).Range("E" & RouteRow + 1).Value
        Stops = Round(Stops, 0)
        UserForm4.TextBox5.Value = Stops
        UserForm4.TextBox6.Value = Sheets(PageName).Range("F" & RouteRow + 1).Value
        UserForm4.TextBox7.Value = Sheets(PageName).Range("G" & RouteRow + 1).Value
        Delta = Sheets(PageName).Range("H" & RouteRow + 1).Value
        UserForm4.TextBox8.BackColor = vbWhite
        If IsNumeric(Delta) = True Then 'Color code stop delta
            Delta = Round(Delta, 0)
            If Delta < 0 Then
                UserForm4.TextBox8.BackColor = vbYellow
            Else
                If Delta > 0 Then
                    UserForm4.TextBox8.BackColor = vbRed
                End If
            End If
        End If
        UserForm4.TextBox8.Value = Delta
        UserForm4.TextBox9.Value = Sheets(PageName).Range("I" & RouteRow + 1).Value
        UserForm4.TextBox10.Value = Sheets(PageName).Range("J" & RouteRow + 1).Value
        
        UserForm4.TextBox11.Value = Sheets(PageName).Range("A" & RouteRow + 2).Value
        UserForm4.TextBox12.Value = Sheets(PageName).Range("B" & RouteRow + 2).Value
        UserForm4.TextBox13.Value = Sheets(PageName).Range("C" & RouteRow + 2).Value
        Wgt = Sheets(PageName).Range("D" & RouteRow + 2).Value
        Wgt = Round(Wgt, 0)
        UserForm4.TextBox14.Value = Wgt
        Stops = Sheets(PageName).Range("E" & RouteRow + 2).Value
        Stops = Round(Stops, 0)
        UserForm4.TextBox15.Value = Stops
        UserForm4.TextBox16.Value = Sheets(PageName).Range("F" & RouteRow + 2).Value
        UserForm4.TextBox17.Value = Sheets(PageName).Range("G" & RouteRow + 2).Value
        Delta = Sheets(PageName).Range("H" & RouteRow + 2).Value
        UserForm4.TextBox18.BackColor = vbWhite
        If IsNumeric(Delta) = True Then 'Color code stop delta
            Delta = Round(Delta, 0)
            If Delta < 0 Then
                UserForm4.TextBox18.BackColor = vbYellow
            Else
                If Delta > 0 Then
                    UserForm4.TextBox18.BackColor = vbRed
                End If
            End If
        End If
        UserForm4.TextBox18.Value = Delta
        UserForm4.TextBox19.Value = Sheets(PageName).Range("I" & RouteRow + 2).Value
        UserForm4.TextBox20.Value = Sheets(PageName).Range("J" & RouteRow + 2).Value
        
        If RouteRow > 1 Then
            UserForm4.TextBox21.Value = Sheets(PageName).Range("A" & RouteRow).Value
            UserForm4.TextBox22.Value = Sheets(PageName).Range("B" & RouteRow).Value
            UserForm4.TextBox23.Value = Sheets(PageName).Range("C" & RouteRow).Value
            Wgt = Sheets(PageName).Range("D" & RouteRow).Value
            Wgt = Round(Wgt, 0)
            UserForm4.TextBox24.Value = Wgt
            Stops = Sheets(PageName).Range("E" & RouteRow).Value
            Stops = Round(Stops, 0)
            UserForm4.TextBox25.Value = Stops
            UserForm4.TextBox26.Value = Sheets(PageName).Range("F" & RouteRow).Value
            UserForm4.TextBox27.Value = Sheets(PageName).Range("G" & RouteRow).Value
            Delta = Sheets(PageName).Range("H" & RouteRow).Value
            UserForm4.TextBox28.BackColor = vbWhite
            If IsNumeric(Delta) = True Then 'Color code stop delta
                Delta = Round(Delta, 0)
                If Delta < 0 Then
                    UserForm4.TextBox28.BackColor = vbYellow
                Else
                    If Delta > 0 Then
                        UserForm4.TextBox28.BackColor = vbRed
                    End If
                End If
            End If
            UserForm4.TextBox28.Value = Delta
            UserForm4.TextBox29.Value = Sheets(PageName).Range("I" & RouteRow).Value
            UserForm4.TextBox30.Value = Sheets(PageName).Range("J" & RouteRow).Value
        Else
            UserForm4.TextBox21.Value = ""
            UserForm4.TextBox22.Value = ""
            UserForm4.TextBox23.Value = ""
            UserForm4.TextBox24.Value = ""
            UserForm4.TextBox25.Value = ""
            UserForm4.TextBox26.Value = ""
            UserForm4.TextBox27.Value = ""
            UserForm4.TextBox28.Value = ""
            UserForm4.TextBox29.Value = ""
            UserForm4.TextBox30.Value = ""
        End If
    End If
    Next idx

    
End Sub

Private Sub UserForm_Initialize()

    Dim Data(), FirstBlank As Integer, lastRow As Integer
    
    Application.Calculation = xlManual
    StationName = Sheets("Setup").Range("C7").Value
    Sheets(StationName).Select
    Columns("A:AG").Sort key1:=Range("U:U"), order1:=xlAscending, Header:=xlYes
    Columns("A:AG").Sort key1:=Range("B:B"), order1:=xlAscending, Header:=xlYes
    PageName = StationName & " Summary"
    Sheets(PageName).Select
    lastRow = ActiveSheet.UsedRange.Rows.Count
    ReDim Data(1 To lastRow - 1, 1 To 4)
    
    For row = 1 To lastRow - 1
        Data(row, 1) = Sheets(PageName).Cells(row, 1)
        Data(row, 2) = Sheets(PageName).Cells(row, 2)
        Data(row, 3) = Sheets(PageName).Cells(row, 3)
        Data(row, 4) = Sheets(PageName).Cells(row, 5)
    Next row
    ListBox2.ColumnCount = 4
    ListBox2.List = Data
    ListBox2.ListIndex = 1
    ListBox2.ColumnWidths = "40;40;40;40"
    Me.StartUpPosition = 0
    Me.Top = Application.Top + 60
    Me.Left = Application.Left + Application.Width - Me.Width - 60
    
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
'CloseMode will be zero if red-X or [Alt]+[F4] is used
    If CloseMode = 0 Then
        Cancel = True
        MsgBox "The X is disabled, please use Exit Button.", vbCritical
    End If
End Sub



Attribute VB_Name = "UserForm6"
Attribute VB_Base = "0{D575F67D-60F2-4585-A923-B8F95403D435}{8E990987-9D66-4BFE-AF47-335244DAE7AB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()

    
    RteRow = ListBox1.ListIndex
    NewRoute = ListBox1.List(RteRow)
    
    UserForm6.Hide
    
    'StationName = Sheets("Setup").Range("C7").Value
    'Sheets(StationName).Select
    'Range("A2", Cells(Rows.Count, "A").End(xlUp)).SpecialCells(xlCellTypeVisible).Cells(1, 1).Select
    'firstrow = ActiveCell.row()
    'lastRow = Range("A" & Rows.Count).End(xlUp).row
    'MsgBox firstrow & " " & lastRow
    'For row = firstrow To lastRow
        'Sheets(StationName).Range("B" & row).Value = NewRoute
    'Next row
    
End Sub


Private Sub CommandButton2_Click()

    UserForm6.Hide

End Sub


Private Sub UserForm_Initialize()

    Dim Data(), FirstBlank As Integer, lastRow As Integer
    
    PageName = Sheets("Setup").Range("C7").Value & " Summary"
    Sheets(PageName).Select
    lastRow = ActiveSheet.UsedRange.Rows.Count
    ReDim Data(2 To lastRow - 1, 1 To 1)
    
    For row = 2 To lastRow - 1
        Data(row, 1) = Sheets(PageName).Cells(row, 1)
    Next row
    ListBox1.ColumnCount = 1
    ListBox1.List = Data
    'ListBox1.ListIndex = 0

End Sub
Attribute VB_Name = "UserForm7"
Attribute VB_Base = "0{272FFDF5-6AA2-4716-A791-BA90A20905B7}{91737C4E-C0D8-4902-BF5D-9C02738AC45F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
    
    If OptionButton1.Value = True Then
        SortLogic = "Regular"
        UserForm7.Hide
    Else
        If OptionButton2.Value = True Then
            SortLogic = "Heavy"
            UserForm7.Hide
        Else
            MsgBox "Select Regular or Heavy Sorting Logic", , "Sorting Logic"
        End If
    End If
    

End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "WebClient"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' WebClient v4.0.15
' (c) Tim Hall - https://github.com/VBA-tools/VBA-Web
'
' `WebClient` executes requests and handles response and is responsible for functionality shared between requests,
'  such as authentication, proxy configuration, and security.
'
' Usage:
'
' ```VB.net
' Dim Client As New WebClient
' Client.BaseUrl = "https://www.example.com/api/"
'
' Dim Auth As New HttpBasicAuthenticator
' Auth.Setup Username, Password
' Set Client.Authenticator = Auth
'
' Dim Request As New WebRequest
' Dim Response As WebResponse
' ' Setup WebRequest...
'
' Set Response = Client.Execute(Request)
' ' -> Uses Http Basic authentication and appends Request.Resource to BaseUrl
' ```
'
' Errors:
' 11010 / 80042b02 / -2147210494 - cURL error in Execute
' 11011 / 80042b03 / -2147210493 - Error in Execute
' 11012 / 80042b04 / -2147210492 - Error preparing http request
' 11013 / 80042b05 / -2147210491 - Error preparing cURL request
'
' @class WebClient
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' --------------------------------------------- '
' Constants and Private Variables
' --------------------------------------------- '

Private Const web_DefaultTimeoutMs As Long = 5000

Private Const web_HttpRequest_SetCredentials_ForServer = 0
Private Const web_HttpRequest_SetCredentials_ForProxy = 1

Private Const web_HttpRequest_ProxySetting_Default = 0
Private Const web_HttpRequest_ProxySetting_PreConfig = 0
Private Const web_HttpRequest_ProxySetting_Direct = 1
Private Const web_HttpRequest_ProxySetting_Proxy = 2

Private Enum web_WinHttpRequestOption
    web_WinHttpRequestOption_UserAgentString = 0
    web_WinHttpRequestOption_URL = 1
    web_WinHttpRequestOption_URLCodePage = 2
    web_WinHttpRequestOption_EscapePercentInURL = 3
    web_WinHttpRequestOption_SslErrorIgnoreFlags = 4
    web_WinHttpRequestOption_SelectCertificate = 5
    web_WinHttpRequestOption_EnableRedirects = 6
    web_WinHttpRequestOption_UrlEscapeDisable = 7
    web_WinHttpRequestOption_UrlEscapeDisableQuery = 8
    web_WinHttpRequestOption_SecureProtocols = 9
    web_WinHttpRequestOption_EnableTracing = 10
    web_WinHttpRequestOption_RevertImpersonationOverSsl = 11
    web_WinHttpRequestOption_EnableHttpsToHttpRedirects = 12
    web_WinHttpRequestOption_EnablePassportAuthentication = 13
    web_WinHttpRequestOption_MaxAutomaticRedirects = 14
    web_WinHttpRequestOption_MaxResponseHeaderSize = 15
    web_WinHttpRequestOption_MaxResponseDrainSize = 16
    web_WinHttpRequestOption_EnableHttp1_1 = 17
    web_WinHttpRequestOption_EnableCertificateRevocationCheck = 18
End Enum

Private web_pProxyServer As String
Private web_pAutoProxyDomain As String

' --------------------------------------------- '
' Properties
' --------------------------------------------- '

''
' Set the base url that is shared by all requests
' and that the request `Resource` is appended to.
'
' @example
' ```VB.net
' ' Desired URLs
' ' https://api.example.com/v1/messages
' ' https://api.example.com/v1/users/id
' '                BaseUrl <- ^ -> Resource
'
' Dim Client As New WebClient
' Client.BaseUrl = "https://api.example.com/v1/"
'
' Dim Request As New WebRequest
' Request.Resource = "messages"
' Request.Resource = "users/{id}"
' ```
'
' @property BaseUrl
' @type String
''
Public BaseUrl As String

''
' Attach an authenticator to the client for authentication requests.
'
' @example
' ```VB.net
' Dim Client As New WebClient
' Dim Auth As New OAuth1Authenticator
' Auth.Setup ...
'
' Set Client.Authenticator = Auth
' ' -> All requests use Auth to add "Authorization" header
' ```
'
' @property Authenticator
' @type IWebAuthenticator
''
Public Authenticator As IWebAuthenticator

''
' Timeout (in milliseconds) to wait for timeout in each request phase
' (Resolve, Connect, Send, Receive).

'
' @property TimeoutMs
' @type Long
' @default 5000
''
Public TimeoutMs As Long

''
' Comma separated list of domains to bypass the proxy.
'
' @property ProxyBypassList
' @type String
''
Public ProxyBypassList As String

''
' Username for proxy.
'
' @property ProxyUsername
' @type String
''
Public ProxyUsername As String

''
' Password for proxy.
'
' @property ProxyPassword
' @type String
''
Public ProxyPassword As String

''
' Load proxy server and bypass list automatically (`False` by default).
'
' @property EnableAutoProxy
' @type Boolean
' @default False
''
Public EnableAutoProxy As Boolean

''
' Turn off SSL validation (`False` by default).
' Useful for self-signed certificates and should only be used with trusted servers.
'
' @property Insecure
' @type Boolean
' @default False
''
Public Insecure As Boolean

''
' Proxy server to pass requests through (except for those that match `ProxyBypassList`).
'
' @property ProxyServer
' @type String
''
Public Property Get ProxyServer() As String
    ProxyServer = web_pProxyServer
End Property
Public Property Let ProxyServer(Value As String)
    Me.EnableAutoProxy = False
    web_pProxyServer = Value
End Property

' ============================================= '
' Public Methods
' ============================================= '

''
' Execute the given request
' (append the request's `FormattedResource` to the `BaseUrl`)
' and return the response.
'
' @example
' ```VB.net
' Dim Client As New WebClient
' Client.BaseUrl = "https://api.example.com/v1/"
'
' Dim Request As New WebRequest
' Request.Resource = "messages/{id}"
' Request.AddUrlSegment "id", 123
'
' ' Add querystring, body, headers, cookies, etc. for request
'
' Dim Response As WebResponse
' Set Response = Client.Execute(Request)
'
' ' -> GET https://api.example/com/v1/messages/123
' '    headers, cookies, and body...
' ```
'
' @method Execute
' @param {WebRequest} request The request to execute
' @return {WebResponse} Wrapper of server response for request
' @throws 11010 / 80042b02 / -2147210494 - cURL error in Execute
' @throws 11011 / 80042b03 / -2147210493 - Error in Execute
''
Public Function Execute(request As WebRequest) As WebResponse
    Dim web_Http As Object
    Dim web_Response As New WebResponse
    
    On Error GoTo web_ErrorHandling
    
#If Mac Then
    Dim web_Curl As String
    Dim web_Result As ShellResult
    
    web_Curl = Me.PrepareCurlRequest(request)
    web_Result = WebHelpers.ExecuteInShell(web_Curl)
    
    ' Handle cURL errors
    If web_Result.ExitCode > 0 Then
        Dim web_ErrorNumber As Long
        Dim web_ErrorMessage As String
        web_ErrorNumber = web_Result.ExitCode / 256
        
        Select Case web_ErrorNumber
        Case 1
            ' 1 = CURLE_UNSUPPORTED_PROTOCOL
            Err.Raise 208614 + vbObjectError, "The URL does not use a recognized protocol (1: CURLE_UNSUPPORTED_PROTOCOL)" & vbNewLine & _
                "URL: " & Me.GetFullUrl(request) & vbNewLine & _
                "Protocol: " & WebHelpers.GetUrlParts(Me.GetFullUrl(request))("Protocol")
        Case 3
            ' 3 = CURLE_URL_MALFORMAT
            Err.Raise 208613 + vbObjectError, "The URL is invalid (3: CURLE_URL_MALFORMAT)" & _
                "URL: " & Me.GetFullUrl(request)
        Case 5, 6, 7
            ' 5 = CURLE_COULDNT_RESOLVE_PROXY
            ' 6 = CURLE_COULDNT_RESOLVE_HOST
            Err.Raise 208615 + vbObjectError, "WebClient.Execute", "The server name or address could not be resolved"
        Case 7
            ' 7 = CURLE_COULDNT_CONNECT
            Err.Raise 208637 + vbObjectError, "WebClient.Execute", "A connection with the server could not be established"
        Case 12, 28
            ' 12 = CURLE_FTP_ACCEPT_TIMEOUT
            ' 28 = CURLE_OPERATION_TIMEDOUT
            Err.Raise 208610 + vbObjectError, "WebClient.Execute", "The operation timed out"
        Case Else
            Err.Raise 11010 + vbObjectError, "WebClient.Execute", "An unknown cURL error occured, #" & web_ErrorNumber & vbNewLine & _
                "Find details at http://curl.haxx.se/libcurl/c/libcurl-errors.html"
        End Select
    End If
    
    web_Response.CreateFromCurl Me, request, web_Result.Output

#Else
    Set web_Http = Me.PrepareHttpRequest(request)
    
    web_Http.send request.Body
    Do While Not web_Http.WaitForResponse(25)
        VBA.DoEvents
    Loop
    
    web_Response.CreateFromHttp Me, request, web_Http
    
#End If

    WebHelpers.LogResponse Me, request, web_Response
    
    If Not Me.Authenticator Is Nothing Then
        Me.Authenticator.AfterExecute Me, request, web_Response
    End If
    
    Set web_Http = Nothing
    Set Execute = web_Response
    Exit Function
    
web_ErrorHandling:

    Set web_Http = Nothing
    Dim web_ErrorDescription As String
    
    Select Case Err.Number - vbObjectError
    Case 208610, 208615, 208637
        ' Return 408
        web_Response.StatusCode = WebStatusCode.RequestTimeout
        web_Response.StatusDescription = "Request Timeout"
        
        WebHelpers.LogResponse Me, request, web_Response
        Set Execute = web_Response
        Err.Clear
    Case Else
        ' Error
        web_ErrorDescription = "An error occurred during execute" & vbNewLine & _
            Err.Number & VBA.IIf(Err.Number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.Number)) & ")", "") & ": " & Err.Description
        
        WebHelpers.LogError web_ErrorDescription, "WebClient.Execute", 11011 + vbObjectError
        Err.Raise 11011 + vbObjectError, "WebClient.Execute", web_ErrorDescription
    End Select
End Function

''
' Get JSON from the given URL
' (with options for Headers, Cookies, QuerystringParams, and UrlSegments).
'
' @example
' ```VB.net
' Dim Client As New WebClient
' Dim Url As String
' Url = "https://api.example.com/v1/messages/1"
'
' Dim Response As WebResponse
' Set Response = Client.GetJson(Url)
'
' Dim Headers As New Collection
' Headers.Add RestHelpers.CreateKeyValue("Authorization", "Bearer ...")
'
' Dim Options As New Dictionary
' Options.Add "Headers", Headers
'
' Set Response = Client.GetJson(Url, Options)
' ```
'
' @method GetJson
' @param {String} Url (appended to `BaseUrl`, if set)
' @param {Dictionary} [Options]
' @param {Collection} [Options.Headers] Collection of `KeyValue`
' @param {Collection} [Options.Cookies] Collection of `KeyValue`
' @param {Collection} [Options.QuerystringParams] Collection of `KeyValue`
' @param {Dictionary} [Options.UrlSegments]
' @return {WebResponse} Response
''
Public Function GetJson(URL As String, Optional Options As Dictionary) As WebResponse
    Dim web_Request As New WebRequest
    web_Request.CreateFromOptions Options
    web_Request.Resource = URL
    web_Request.Format = WebFormat.Json
    web_Request.Method = WebMethod.HttpGet
    
    Set GetJson = Me.Execute(web_Request)
End Function

''
' Post JSON Body (`Array`, `Collection`, `Dictionary`) to the given URL
' (with options for Headers, Cookies, QuerystringParams, and UrlSegments).
'
' @example
' ```VB.net
' Dim Client As New WebClient
' Dim Url As String
' Url = "https://api.example.com/v1/messages/1"
'
' ' Body
' ' Array, Collection, or Dictionary
' Dim Body As New Dictionary
' Body.Add "message", "Howdy!"
'
' Dim Response As WebResponse
' Set Response = Client.PostJson(Url, Body)
'
' Dim Headers As New Collection
' Headers.Add RestHelpers.CreateKeyValue("Authorization", "Bearer ...")
'
' Dim Options As New Dictionary
' Options.Add "Headers", Headers
'
' Set Response = Client.PostJson(Url, Body, Options)
' ```
'
' @method PostJson
' @param {String} Url (appended to `BaseUrl`, if set)
' @param {Dictionary} Body
' @param {Dictionary} [Options]
' @param {Collection} [Options.Headers] Collection of `KeyValue`
' @param {Collection} [Options.Cookies] Collection of `KeyValue`
' @param {Collection} [Options.QuerystringParams] Collection of `KeyValue`
' @param {Dictionary} [Options.UrlSegments]
' @return {WebResponse} Response
''
Public Function PostJson(URL As String, Body As Variant, Optional Options As Dictionary) As WebResponse
    Dim web_Request As New WebRequest
    web_Request.CreateFromOptions Options
    web_Request.Resource = URL
    web_Request.Format = WebFormat.Json
    web_Request.Method = WebMethod.HttpPost
    If VBA.IsObject(Body) Then
        Set web_Request.Body = Body
    Else
        web_Request.Body = Body
    End If
    
    Set PostJson = Me.Execute(web_Request)
End Function

''
' Set proxy for all requests
'
' @example
' ```VB.net
' Dim Client As New RestClient
'
' ' Just Server
' Client.SetProxy "proxy_server:80"
'
' ' Server + Username and Password
' Client.SetProxy "proxy_server:80", "Tim", "Password"
'
' ' Server + Username and Password + BypassList
' Client.SetProxy "proxy_server:80", "Tim", "Password", "<local>,*.bypass.com"
' ```
'
' @method SetProxy
' @param {String} ProxyServer Proxy server to pass requests through
' @param {String} [Username=""] Username for proxy
' @param {String} [Password=""] Password for proxy
' @param {String} [BypassList=""] Comma-separated list of servers that should bypass proxy
''
Public Sub SetProxy(ProxyServer As String, _
    Optional Username As String = "", Optional Password As String = "", Optional BypassList As String = "")
    
    Me.ProxyServer = ProxyServer
    Me.ProxyUsername = Username
    Me.ProxyPassword = Password
    Me.ProxyBypassList = BypassList
End Sub

''
' Get full url by joining given `WebRequest.FormattedResource` and `BaseUrl`.
'
' @method GetFullUrl
' @param {WebRequest} Request
' @return {String}
''
Public Function GetFullUrl(request As WebRequest) As String
    GetFullUrl = WebHelpers.JoinUrl(Me.BaseUrl, request.FormattedResource)
End Function

''
' Prepare Http request for given WebRequest
'
' @internal
' @method PrepareHttpRequest
' @param {WebRequest} Request
' @return {WinHttpRequest}
' @throws 11012 / 80042b04 / -2147210492 - Error preparing http request
''
Public Function PrepareHttpRequest(request As WebRequest, Optional Async As Boolean = True) As Object
    Dim web_Http As Object
    Dim web_KeyValue As Dictionary
    
    On Error GoTo web_ErrorHandling
    
    Set web_Http = CreateObject("WinHttp.WinHttpRequest.5.1")
    
    ' Prepare request (before open)
    web_BeforeExecute request
    
    ' Open http request
    web_Http.Open WebHelpers.MethodToName(request.Method), Me.GetFullUrl(request), Async
    
    ' Set timeouts
    web_Http.SetTimeouts Me.TimeoutMs, Me.TimeoutMs, Me.TimeoutMs, Me.TimeoutMs
    
    ' Load auto-proxy (if needed)
    If Me.EnableAutoProxy Then
        web_LoadAutoProxy request
    End If
    
    ' Setup proxy
    ' See http://msdn.microsoft.com/en-us/library/windows/desktop/aa384059(v=vs.85).aspx for details
    If Me.ProxyServer <> "" Then
        WebHelpers.LogDebug "SetProxy: " & Me.ProxyServer, "WebClient.PrepareHttpRequest"
        web_Http.SetProxy web_HttpRequest_ProxySetting_Proxy, Me.ProxyServer, Me.ProxyBypassList
        
        If Me.ProxyUsername <> "" Then
            WebHelpers.LogDebug "SetProxyCredentials: " & Me.ProxyUsername & ", " & WebHelpers.Obfuscate(Me.ProxyPassword), "WebClient.PrepareHttpRequest"
            web_Http.SetCredentials Me.ProxyUsername, Me.ProxyPassword, web_HttpRequest_SetCredentials_ForProxy
        End If
    Else
        ' Attempt to get proxy setup with Proxycfg.exe, otherwise direct
        web_Http.SetProxy web_HttpRequest_ProxySetting_PreConfig
    End If
    
    ' Setup security
    If Me.Insecure Then
        ' - Disable certifcate revocation check
        ' - Ignore all SSL errors
        '   Unknown certification authority (CA) or untrusted root, 0x0100
        '   Wrong usage, 0x0200
        '   Invalid common name (CN), 0x1000
        '   Invalid date or certificate expired, 0x2000
        '   = 0x3300 = 13056
        ' - Enable redirects
        ' - Enable https-to-http redirects
        web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_EnableCertificateRevocationCheck) = False
        web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_SslErrorIgnoreFlags) = 13056
        web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_EnableRedirects) = True
        web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_EnableHttpsToHttpRedirects) = True
    Else
        ' By default:
        ' - Enable certificate revocation check (especially useful after HeartBleed)
        ' - Ignore no SLL erros
        ' - Disable redirects (matches cURL behavior)
        ' - Disable https-to-http redirects
        web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_EnableCertificateRevocationCheck) = True
        web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_SslErrorIgnoreFlags) = 0
        web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_EnableRedirects) = False
        web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_EnableHttpsToHttpRedirects) = False
    End If
    
    ' Set headers on http request (after open)
    For Each web_KeyValue In request.Headers
        web_Http.SetRequestHeader web_KeyValue("Key"), web_KeyValue("Value")
    Next web_KeyValue
    
    For Each web_KeyValue In request.Cookies
        web_Http.SetRequestHeader "Cookie", web_KeyValue("Key") & "=" & web_KeyValue("Value")
    Next web_KeyValue
    
    ' Give authenticator opportunity to update Http
    If Not Me.Authenticator Is Nothing Then
        Me.Authenticator.PrepareHttp Me, request, web_Http
    End If
    
    ' Log request and return
    WebHelpers.LogRequest Me, request
    Set PrepareHttpRequest = web_Http
    Exit Function
    
web_ErrorHandling:

    Set web_Http = Nothing
    Err.Raise 11012 + vbObjectError, "WebClient.PrepareHttpRequest", _
        "An error occurred while preparing http request" & vbNewLine & _
        Err.Number & VBA.IIf(Err.Number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.Number)) & ")", "") & ": " & Err.Description
End Function

''
' Prepare cURL request for given WebRequest
'
' @internal
' @method PrepareCurlRequest
' @param {WebRequest} Request
' @return {String}
' @throws 11013 / 80042b05 / -2147210491 - Error preparing cURL request
''
Public Function PrepareCurlRequest(request As WebRequest) As String
    Dim web_Curl As String
    Dim web_KeyValue As Dictionary
    Dim web_CookieString As String
    
    On Error GoTo web_ErrorHandling
    
    web_Curl = "curl -i"
    
    ' Setup authenticator
    web_BeforeExecute request
    
    ' Set timeouts
    ' (max time = resolve + sent + receive)
    web_Curl = web_Curl & " --connect-timeout " & Me.TimeoutMs / 1000
    web_Curl = web_Curl & " --max-time " & 3 * Me.TimeoutMs / 1000
    
    ' Setup proxy
    If Me.ProxyServer <> "" Then
        web_Curl = web_Curl & " --proxy " & Me.ProxyServer
        
        If Me.ProxyBypassList <> "" Then
            web_Curl = web_Curl & " --noproxy " & Me.ProxyBypassList
        End If
        If Me.ProxyUsername <> "" Then
            web_Curl = web_Curl & " --proxy-user " & Me.ProxyUsername & ":" & Me.ProxyPassword
        End If
    End If
    
    ' Setup security
    If Me.Insecure Then
        web_Curl = web_Curl & " --insecure"
    End If
    
    ' Set headers and cookies
    For Each web_KeyValue In request.Headers
        web_Curl = web_Curl & " -H '" & web_KeyValue("Key") & ": " & web_KeyValue("Value") & "'"
    Next web_KeyValue
    
    For Each web_KeyValue In request.Cookies
        web_CookieString = web_CookieString & web_KeyValue("Key") & "=" & web_KeyValue("Value") & ";"
    Next web_KeyValue
    If web_CookieString <> "" Then
        web_Curl = web_Curl & " --cookie '" & web_CookieString & "'"
    End If
    
    ' Add method, data, and url
    web_Curl = web_Curl & " -X " & WebHelpers.MethodToName(request.Method)
    web_Curl = web_Curl & " -d '" & request.Body & "'"
    web_Curl = web_Curl & " '" & Me.GetFullUrl(request) & "'"
    
    ' Give authenticator opportunity to update cURL
    If Not Me.Authenticator Is Nothing Then
        Me.Authenticator.PrepareCurl Me, request, web_Curl
    End If
    
    ' Log request and return
    WebHelpers.LogRequest Me, request
    PrepareCurlRequest = web_Curl
    Exit Function
    
web_ErrorHandling:

    Err.Raise 11013 + vbObjectError, "WebClient.PrepareCURLRequest", _
        "An error occurred while preparing cURL request" & vbNewLine & _
        Err.Number & VBA.IIf(Err.Number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.Number)) & ")", "") & ": " & Err.Description
End Function

''
' Clone client
'
' @internal
' @method Clone
' @return {WebClient}
''
Public Function Clone() As WebClient
    Set Clone = New WebClient
    Clone.BaseUrl = Me.BaseUrl
    Clone.ProxyServer = Me.ProxyServer
    Clone.ProxyBypassList = Me.ProxyBypassList
    Clone.ProxyUsername = Me.ProxyUsername
    Clone.ProxyPassword = Me.ProxyPassword
    Clone.EnableAutoProxy = Me.EnableAutoProxy
    Clone.TimeoutMs = Me.TimeoutMs
    Clone.Insecure = Me.Insecure
    Set Clone.Authenticator = Me.Authenticator
End Function

' ============================================= '
' Private Methods
' ============================================= '

Private Sub web_BeforeExecute(web_Request As WebRequest)
    If Not Me.Authenticator Is Nothing Then
        Me.Authenticator.BeforeExecute Me, web_Request
    End If
    
    ' Preparing request includes adding headers
    ' -> Needs to happen after BeforeExecute in case headers were changed
    web_Request.Prepare
End Sub

Private Sub web_LoadAutoProxy(web_Request As WebRequest)
#If Win32 Or Win64 Then
    On Error GoTo web_ErrorHandling
    
    Dim web_Parts As Dictionary
    Dim web_Domain As String
    Dim web_ProxyServer As String
    Dim web_ProxyBypassList As String

    Set web_Parts = WebHelpers.GetUrlParts(Me.GetFullUrl(web_Request))
    web_Domain = VBA.IIf(web_Parts("Protocol") <> "", web_Parts("Protocol") & "://", "") & _
        web_Parts("Host") & ":" & web_Parts("Port")
      
    ' Cache auto-proxy by domain
    If web_Domain <> web_pAutoProxyDomain Then
        ' Cache first to store error as no proxy
        web_pAutoProxyDomain = web_Domain
        
        WebHelpers.GetAutoProxy web_Domain, web_ProxyServer, web_ProxyBypassList
        
        WebHelpers.LogDebug "Loaded auto-proxy for " & web_Domain & ":" & vbNewLine & _
            "Server = " & web_ProxyServer & vbNewLine & _
            "Bypass List = " & web_ProxyBypassList
        
        ' Store proxy server in underlying to avoid turning off auto-proxy
        web_pProxyServer = web_ProxyServer
        Me.ProxyBypassList = web_ProxyBypassList
    End If
       
    Exit Sub
     
web_ErrorHandling:
    
    LogError "An error occurred while loading auto-proxy" & vbNewLine & _
        Err.Number & VBA.IIf(Err.Number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.Number)) & ")", "") & ": " & Err.Description, _
        "WebClient.LoadAutoProxy", Err.Number
#End If
End Sub

Private Sub Class_Initialize()
    Me.TimeoutMs = web_DefaultTimeoutMs
    Me.EnableAutoProxy = False
    Me.Insecure = False
End Sub
Attribute VB_Name = "WebHelpers"
''
' WebHelpers v4.0.15
' (c) Tim Hall - https://github.com/VBA-tools/VBA-Web
'
' Contains general-purpose helpers that are used throughout VBA-Web. Includes:
'
' - Logging
' - Converters and encoding
' - Url handling
' - Object/Dictionary/Collection/Array helpers
' - Request preparation / handling
' - Timing
' - Mac
' - Cryptography
' - Converters (JSON, XML, Url-Encoded)
'
' Errors:
' 11000 - Error during parsing
' 11001 - Error during conversion
' 11002 - No matching converter has been registered
' 11003 - Error while getting url parts
' 11099 - XML format is not currently supported
'
' @module WebHelpers
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' Contents:
' 1. Logging
' 2. Converters and encoding
' 3. Url handling
' 4. Object/Dictionary/Collection/Array helpers
' 5. Request preparation / handling
' 6. Timing
' 7. Mac
' 8. Cryptography
' 9. Converters
' VBA-JSON
' VBA-UTC
' AutoProxy
' --------------------------------------------- '

' Custom formatting uses the standard version of Application.Run,
' which is incompatible with some Office applications (e.g. Word 2011 for Mac)
'
' If you have compilation errors in ParseByFormat or ConvertToFormat,
' you can disable custom formatting by setting the following compiler flag to False
#Const EnableCustomFormatting = True

' === AutoProxy Headers
#If Mac Then
#ElseIf VBA7 Then

Private Declare PtrSafe Sub AutoProxy_CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (ByVal AutoProxy_lpDest As LongPtr, ByVal AutoProxy_lpSource As LongPtr, ByVal AutoProxy_cbCopy As Long)
Private Declare PtrSafe Function AutoProxy_SysAllocString Lib "oleaut32" Alias "SysAllocString" _
    (ByVal AutoProxy_pwsz As LongPtr) As LongPtr
Private Declare PtrSafe Function AutoProxy_GlobalFree Lib "kernel32" Alias "GlobalFree" _
    (ByVal AutoProxy_p As LongPtr) As LongPtr
Private Declare PtrSafe Function AutoProxy_GetIEProxy Lib "WinHTTP.dll" Alias "WinHttpGetIEProxyConfigForCurrentUser" _
    (ByRef AutoProxy_proxyConfig As AUTOPROXY_IE_PROXY_CONFIG) As Long
Private Declare PtrSafe Function AutoProxy_GetProxyForUrl Lib "WinHTTP.dll" Alias "WinHttpGetProxyForUrl" _
    (ByVal AutoProxy_hSession As LongPtr, ByVal AutoProxy_pszUrl As LongPtr, ByRef AutoProxy_pAutoProxyOptions As AUTOPROXY_OPTIONS, ByRef AutoProxy_pProxyInfo As AUTOPROXY_INFO) As Long
Private Declare PtrSafe Function AutoProxy_HttpOpen Lib "WinHTTP.dll" Alias "WinHttpOpen" _
    (ByVal AutoProxy_pszUserAgent As LongPtr, ByVal AutoProxy_dwAccessType As Long, ByVal AutoProxy_pszProxyName As LongPtr, ByVal AutoProxy_pszProxyBypass As LongPtr, ByVal AutoProxy_dwFlags As Long) As LongPtr
Private Declare PtrSafe Function AutoProxy_HttpClose Lib "WinHTTP.dll" Alias "WinHttpCloseHandle" _
    (ByVal AutoProxy_hInternet As LongPtr) As Long

Private Type AUTOPROXY_IE_PROXY_CONFIG
    AutoProxy_fAutoDetect As Long
    AutoProxy_lpszAutoConfigUrl As LongPtr
    AutoProxy_lpszProxy As LongPtr
    AutoProxy_lpszProxyBypass As LongPtr
End Type
Private Type AUTOPROXY_OPTIONS
    AutoProxy_dwFlags As Long
    AutoProxy_dwAutoDetectFlags As Long
    AutoProxy_lpszAutoConfigUrl As LongPtr
    AutoProxy_lpvReserved As LongPtr
    AutoProxy_dwReserved As Long
    AutoProxy_fAutoLogonIfChallenged As Long
End Type
Private Type AUTOPROXY_INFO
    AutoProxy_dwAccessType As Long
    AutoProxy_lpszProxy As LongPtr
    AutoProxy_lpszProxyBypass As LongPtr
End Type

#Else

Private Declare Sub AutoProxy_CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (ByVal AutoProxy_lpDest As Long, ByVal AutoProxy_lpSource As Long, ByVal AutoProxy_cbCopy As Long)
Private Declare Function AutoProxy_SysAllocString Lib "oleaut32" Alias "SysAllocString" _
    (ByVal AutoProxy_pwsz As Long) As Long
Private Declare Function AutoProxy_GlobalFree Lib "kernel32" Alias "GlobalFree" _
    (ByVal AutoProxy_p As Long) As Long
Private Declare Function AutoProxy_GetIEProxy Lib "WinHTTP.dll" Alias "WinHttpGetIEProxyConfigForCurrentUser" _
    (ByRef AutoProxy_proxyConfig As AUTOPROXY_IE_PROXY_CONFIG) As Long
Private Declare Function AutoProxy_GetProxyForUrl Lib "WinHTTP.dll" Alias "WinHttpGetProxyForUrl" _
    (ByVal AutoProxy_hSession As Long, ByVal AutoProxy_pszUrl As Long, ByRef AutoProxy_pAutoProxyOptions As AUTOPROXY_OPTIONS, ByRef AutoProxy_pProxyInfo As AUTOPROXY_INFO) As Long
Private Declare Function AutoProxy_HttpOpen Lib "WinHTTP.dll" Alias "WinHttpOpen" _
    (ByVal AutoProxy_pszUserAgent As Long, ByVal AutoProxy_dwAccessType As Long, ByVal AutoProxy_pszProxyName As Long, ByVal AutoProxy_pszProxyBypass As Long, ByVal AutoProxy_dwFlags As Long) As Long
Private Declare Function AutoProxy_HttpClose Lib "WinHTTP.dll" Alias "WinHttpCloseHandle" _
    (ByVal AutoProxy_hInternet As Long) As Long

Private Type AUTOPROXY_IE_PROXY_CONFIG
    AutoProxy_fAutoDetect As Long
    AutoProxy_lpszAutoConfigUrl As Long
    AutoProxy_lpszProxy As Long
    AutoProxy_lpszProxyBypass As Long
End Type
Private Type AUTOPROXY_OPTIONS
    AutoProxy_dwFlags As Long
    AutoProxy_dwAutoDetectFlags As Long
    AutoProxy_lpszAutoConfigUrl As Long
    AutoProxy_lpvReserved As Long
    AutoProxy_dwReserved As Long
    AutoProxy_fAutoLogonIfChallenged As Long
End Type
Private Type AUTOPROXY_INFO
    AutoProxy_dwAccessType As Long
    AutoProxy_lpszProxy As Long
    AutoProxy_lpszProxyBypass As Long
End Type

#End If

#If Mac Then
#Else
' Constants for dwFlags of AUTOPROXY_OPTIONS
Const AUTOPROXY_AUTO_DETECT = 1
Const AUTOPROXY_CONFIG_URL = 2
 
' Constants for dwAutoDetectFlags
Const AUTOPROXY_DETECT_TYPE_DHCP = 1
Const AUTOPROXY_DETECT_TYPE_DNS = 2
#End If
' === End AutoProxy

' === VBA-JSON Headers
' === VBA-UTC Headers
#If Mac Then

Private Declare Function utc_popen Lib "libc.dylib" Alias "popen" (ByVal utc_Command As String, ByVal utc_Mode As String) As Long
Private Declare Function utc_pclose Lib "libc.dylib" Alias "pclose" (ByVal utc_File As Long) As Long
Private Declare Function utc_fread Lib "libc.dylib" Alias "fread" (ByVal utc_Buffer As String, ByVal utc_Size As Long, ByVal utc_Number As Long, ByVal utc_File As Long) As Long
Private Declare Function utc_feof Lib "libc.dylib" Alias "feof" (ByVal utc_File As Long) As Long

#ElseIf VBA7 Then

' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724421.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724949.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms725485.aspx
Private Declare PtrSafe Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare PtrSafe Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare PtrSafe Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#Else

Private Declare Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#End If

#If Mac Then

Private Type utc_ShellResult
    utc_Output As String
    utc_ExitCode As Long
End Type

#Else

Private Type utc_SYSTEMTIME
    utc_wYear As Integer
    utc_wMonth As Integer
    utc_wDayOfWeek As Integer
    utc_wDay As Integer
    utc_wHour As Integer
    utc_wMinute As Integer
    utc_wSecond As Integer
    utc_wMilliseconds As Integer
End Type

Private Type utc_TIME_ZONE_INFORMATION
    utc_Bias As Long
    utc_StandardName(0 To 31) As Integer
    utc_StandardDate As utc_SYSTEMTIME
    utc_StandardBias As Long
    utc_DaylightName(0 To 31) As Integer
    utc_DaylightDate As utc_SYSTEMTIME
    utc_DaylightBias As Long
End Type

#End If
' === End VBA-UTC

#If Mac Then
#ElseIf VBA7 Then

Private Declare PtrSafe Sub json_CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (json_MemoryDestination As Any, json_MemorySource As Any, ByVal json_ByteLength As Long)

#Else

Private Declare Sub json_CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (json_MemoryDestination As Any, json_MemorySource As Any, ByVal json_ByteLength As Long)
    
#End If
' === End VBA-JSON

#If Mac Then
Private Declare Function web_popen Lib "libc.dylib" Alias "popen" (ByVal Command As String, ByVal mode As String) As Long
Private Declare Function web_pclose Lib "libc.dylib" Alias "pclose" (ByVal File As Long) As Long
Private Declare Function web_fread Lib "libc.dylib" Alias "fread" (ByVal outStr As String, ByVal size As Long, ByVal Items As Long, ByVal stream As Long) As Long
Private Declare Function web_feof Lib "libc.dylib" Alias "feof" (ByVal File As Long) As Long
#End If

Public Const WebUserAgent As String = "VBA-Web v4.0.15 (https://github.com/VBA-tools/VBA-Web)"

' @internal
Public Type ShellResult
    Output As String
    ExitCode As Long
End Type

Private web_pDocumentHelper As Object
Private web_pElHelper As Object
Private web_pConverters As Dictionary

' --------------------------------------------- '
' Types and Properties
' --------------------------------------------- '

''
' Helper for common http status codes. (Use underlying status code for any codes not listed)
'
' @example
' ```VB.net
' Dim Response As WebResponse
'
' If Response.StatusCode = WebStatusCode.Ok Then
'   ' Ok
' ElseIf Response.StatusCode = 418 Then
'   ' I'm a teapot
' End If
' ```
'
' @property WebStatusCode
' @param Ok `200`
' @param Created `201`
' @param NoContent `204`
' @param NotModified `304`
' @param BadRequest `400`
' @param Unauthorized `401`
' @param Forbidden `403`
' @param NotFound `404`
' @param RequestTimeout `408`
' @param UnsupportedMediaType `415`
' @param InternalServerError `500`
' @param BadGateway `502`
' @param ServiceUnavailable `503`
' @param GatewayTimeout `504`
''
Public Enum WebStatusCode
    OK = 200
    Created = 201
    NoContent = 204
    NotModified = 304
    BadRequest = 400
    Unauthorized = 401
    Forbidden = 403
    NotFound = 404
    RequestTimeout = 408
    UnsupportedMediaType = 415
    InternalServerError = 500
    BadGateway = 502
    ServiceUnavailable = 503
    GatewayTimeout = 504
End Enum

''
' @property WebMethod
' @param HttpGet
' @param HttpPost
' @param HttpGet
' @param HttpGet
' @param HttpGet
' @default HttpGet
''
Public Enum WebMethod
    HttpGet = 0
    HttpPost = 1
    HttpPut = 2
    HttpDelete = 3
    HttpPatch = 4
End Enum

''
' @property WebFormat
' @param PlainText
' @param Json
' @param FormUrlEncoded
' @param Xml
' @param Custom
' @default PlainText
''
Public Enum WebFormat
    PlainText = 0
    Json = 1
    FormUrlEncoded = 2
    Xml = 3
    Custom = 9
End Enum

''
' Enable logging of requests and responses and other internal messages from VBA-Web.
' Should be the first step in debugging VBA-Web if something isn't working as expected.
' (Logs display in Immediate Window (`View > Immediate Window` or `ctrl+g`)
'
' @example
' ```VB.net
' Dim Client As New WebClient
' Client.BaseUrl = "https://api.example.com/v1/"
'
' Dim RequestWithTypo As New WebRequest
' RequestWithTypo.Resource = "peeple/{id}"
' RequestWithType.AddUrlSegment "idd", 123
'
' ' Enable logging before the request is executed
' WebHelpers.EnableLogging = True
'
' Dim Response As WebResponse
' Set Response = Client.Execute(Request)
'
' ' Immediate window:
' ' --> Request - (Time)
' ' GET https://api.example.com/v1/peeple/{id}
' ' Headers...
' '
' ' <-- Response - (Time)
' ' 404 ...
' ```
'
' @property EnableLogging
' @type Boolean
' @default False
''
Public EnableLogging As Boolean

''
' Store currently running async requests
'
' @property AsyncRequests
' @type Dictionary
''
Public AsyncRequests As Dictionary

' ============================================= '
' 1. Logging
' ============================================= '

''
' Log message (when logging is enabled with `EnableLogging`)
' with optional location where the message is coming from.
' Useful when writing extensions to VBA-Web (like an `IWebAuthenticator`).
'
' @example
' ```VB.net
' LogDebug "Executing request..."
' ' -> VBA-Web: Executing request...
'
' LogDebug "Executing request...", "Module.Function"
' ' -> Module.Function: Executing request...
' ```
'
' @method LogDebug
' @param {String} Message
' @param {String} [From="VBA-Web"]
''
Public Sub LogDebug(Message As String, Optional From As String = "VBA-Web")
    If EnableLogging Then
        Debug.Print From & ": " & Message
    End If
End Sub

''
' Log warning (even when logging is disabled with `EnableLogging`)
' with optional location where the message is coming from.
' Useful when writing extensions to VBA-Web (like an `IWebAuthenticator`).
'
' @example
' ```VB.net
' WebHelpers.LogWarning "Something could go wrong"
' ' -> WARNING - VBA-Web: Something could go wrong
'
' WebHelpers.LogWarning "Something could go wrong", "Module.Function"
' ' -> WARNING - Module.Function: Something could go wrong
' ```
'
' @method LogWarning
' @param {String} Message
' @param {String} [From="VBA-Web"]
''
Public Sub LogWarning(Message As String, Optional From As String = "VBA-Web")
    Debug.Print "WARNING - " & From & ": " & Message
End Sub

''
' Log error (even when logging is disabled with `EnableLogging`)
' with optional location where the message is coming from and error number.
' Useful when writing extensions to VBA-Web (like an `IWebAuthenticator`).
'
' @example
' ```VB.net
' WebHelpers.LogError "Something went wrong"
' ' -> ERROR - VBA-Web: Something went wrong
'
' WebHelpers.LogError "Something went wrong", "Module.Function"
' ' -> ERROR - Module.Function: Something went wrong
'
' WebHelpers.LogError "Something went wrong", "Module.Function", 100
' ' -> ERROR - Module.Function: 100, Something went wrong
' ```
'
' @method LogError
' @param {String} Message
' @param {String} [From="VBA-Web"]
' @param {Long} [ErrNumber=0]
''
Public Sub LogError(Message As String, Optional From As String = "VBA-Web", Optional ErrNumber As Long = 0)
    Dim web_ErrorValue As String
    If ErrNumber <> 0 Then
        web_ErrorValue = ErrNumber
    
        If ErrNumber < 0 Then
            web_ErrorValue = web_ErrorValue & " (" & (ErrNumber - vbObjectError) & " / " & VBA.LCase$(VBA.Hex$(ErrNumber)) & ")"
        End If
        
        web_ErrorValue = web_ErrorValue & ", "
    End If
    
    Debug.Print "ERROR - " & From & ": " & web_ErrorValue & Message
End Sub

''
' Log details of the request (Url, headers, cookies, body, etc.).
'
' @method LogRequest
' @param {WebClient} Client
' @param {WebRequest} Request
''
Public Sub LogRequest(Client As WebClient, request As WebRequest)
    If EnableLogging Then
        Debug.Print "--> Request - " & Format(Now, "Long Time")
        Debug.Print MethodToName(request.Method) & " " & Client.GetFullUrl(request)
        
        Dim web_KeyValue As Dictionary
        For Each web_KeyValue In request.Headers
            Debug.Print web_KeyValue("Key") & ": " & web_KeyValue("Value")
        Next web_KeyValue
        
        For Each web_KeyValue In request.Cookies
            Debug.Print "Cookie: " & web_KeyValue("Key") & "=" & web_KeyValue("Value")
        Next web_KeyValue
        
        If request.Body <> "" Then
            Debug.Print vbNewLine & request.Body
        End If
        
        Debug.Print
    End If
End Sub

''
' Log details of the response (Status, headers, content, etc.).
'
' @method LogResponse
' @param {WebClient} Client
' @param {WebRequest} Request
' @param {WebResponse} Response
''
Public Sub LogResponse(Client As WebClient, request As WebRequest, response As WebResponse)
    If EnableLogging Then
        Dim web_KeyValue As Dictionary
        
        Debug.Print "<-- Response - " & Format(Now, "Long Time")
        Debug.Print response.StatusCode & " " & response.StatusDescription
        
        For Each web_KeyValue In response.Headers
            Debug.Print web_KeyValue("Key") & ": " & web_KeyValue("Value")
        Next web_KeyValue
        
        For Each web_KeyValue In response.Cookies
            Debug.Print "Cookie: " & web_KeyValue("Key") & "=" & web_KeyValue("Value")
        Next web_KeyValue
        
        Debug.Print vbNewLine & response.Content & vbNewLine
    End If
End Sub

''
' Obfuscate any secure information before logging.
'
' @example
' ```VB.net
' Dim Password As String
' Password = "Secret"
'
' WebHelpers.LogDebug "Password = " & WebHelpers.Obfuscate(Password)
' -> Password = ******
' ```
'
' @param {String} Secure Message to obfuscate
' @param {String} [Character = *] Character to obfuscate with
' @return {String}
''
Public Function Obfuscate(Secure As String, Optional Character As String = "*") As String
    Obfuscate = VBA.String$(VBA.Len(Secure), Character)
End Function

' ============================================= '
' 2. Converters and encoding
' ============================================= '

'
' Parse JSON value to `Dictionary` if it's an object or `Collection` if it's an array.
'
' @method ParseJson
' @param {String} Json JSON value to parse
' @return {Dictionary|Collection}
'
' (Implemented in VBA-JSON embedded below)

'
' Convert `Dictionary`, `Collection`, or `Array` to JSON string.
'
' @method ConvertToJson
' @param {Dictionary|Collection|Array} Obj
' @return {String}
'
' (Implemented in VBA-JSON embedded below)

''
' Parse Url-Encoded value to `Dictionary`.
'
' @method ParseUrlEncoded
' @param {String} UrlEncoded Url-Encoded value to parse
' @return {Dictionary} Parsed
''
Public Function ParseUrlEncoded(Encoded As String) As Dictionary
    Dim web_Items As Variant
    Dim web_i As Integer
    Dim web_Parts As Variant
    Dim web_Key As String
    Dim web_Value As Variant
    Dim web_Parsed As New Dictionary
    
    web_Items = VBA.Split(Encoded, "&")
    For web_i = LBound(web_Items) To UBound(web_Items)
        web_Parts = VBA.Split(web_Items(web_i), "=")
        
        If UBound(web_Parts) - LBound(web_Parts) >= 1 Then
            ' TODO: Handle numbers, arrays, and object better here
            web_Key = UrlDecode(VBA.CStr(web_Parts(LBound(web_Parts))))
            web_Value = UrlDecode(VBA.CStr(web_Parts(LBound(web_Parts) + 1)))
            
            web_Parsed(web_Key) = web_Value
        End If
    Next web_i
    
    Set ParseUrlEncoded = web_Parsed
End Function

''
' Convert `Dictionary`/`Collection` to Url-Encoded string.
'
' @method ConvertToUrlEncoded
' @param {Dictionary|Collection|Variant} Obj Value to convert to Url-Encoded string
' @return {String} UrlEncoded string (e.g. a=123&b=456&...)
''
Public Function ConvertToUrlEncoded(Obj As Variant) As String
    Dim web_Encoded As String

    If TypeOf Obj Is Collection Then
        Dim web_KeyValue As Dictionary
        
        For Each web_KeyValue In Obj
            If VBA.Len(web_Encoded) > 0 Then: web_Encoded = web_Encoded & "&"
            web_Encoded = web_Encoded & web_GetUrlEncodedKeyValue(web_KeyValue("Key"), web_KeyValue("Value"))
        Next web_KeyValue
    Else
        Dim web_Key As Variant
        
        For Each web_Key In Obj.Keys()
            If Len(web_Encoded) > 0 Then: web_Encoded = web_Encoded & "&"
            web_Encoded = web_Encoded & web_GetUrlEncodedKeyValue(web_Key, Obj(web_Key))
        Next web_Key
    End If
    
    ConvertToUrlEncoded = web_Encoded
End Function

''
' Parse XML value to `Dictionary`.
'
' _Note_ Currently, XML is not supported in 4.0.0 due to lack of Mac support.
' An updated parser is being created that supports Mac and Windows,
' but in order to avoid future breaking changes, ParseXml and ConvertToXml are not currently implemented.
'
' See https://github.com/VBA-tools/VBA-Web/wiki/XML-Support-in-4.0 for details on how to use XML in Windows in the meantime.
'
' @param {String} Encoded XML value to parse
' @return {Dictionary|Object} Parsed
' @throws 11099 - XML format is not currently supported
''
Public Function ParseXml(Encoded As String) As Object
    Dim web_ErrorMsg As String
    
    web_ErrorMsg = "XML is not currently supported (An updated parser is being created that supports Mac and Windows)." & vbNewLine & _
        "To use XML parsing for Windows currently, use the instructions found here:" & vbNewLine & _
        vbNewLine & _
        "https://github.com/VBA-tools/VBA-Web/wiki/XML-Support-in-4.0"

    LogError web_ErrorMsg, "WebHelpers.ParseXml", 11099
    Err.Raise 11099, "WebHeleprs.ParseXml", web_ErrorMsg
End Function

''
' Convert `Dictionary` to XML string.
'
' _Note_ Currently, XML is not supported in 4.0.0 due to lack of Mac support.
' An updated parser is being created that supports Mac and Windows,
' but in order to avoid future breaking changes, ParseXml and ConvertToXml are not currently implemented.
'
' See https://github.com/VBA-tools/VBA-Web/wiki/XML-Support-in-4.0 for details on how to use XML in Windows in the meantime.
'
' @param {Dictionary|Variant} XML
' @return {String} XML string
' @throws 11099 / 80042b5b / -2147210405 - XML format is not currently supported
''
Public Function ConvertToXml(Obj As Variant) As String
    Dim web_ErrorMsg As String
    
    web_ErrorMsg = "XML is not currently supported (An updated parser is being created that supports Mac and Windows)." & vbNewLine & _
        "To use XML parsing for Windows currently, use the instructions found here:" & vbNewLine & _
        vbNewLine & _
        "https://github.com/VBA-tools/VBA-Web/wiki/XML-Support-in-4.0"

    LogError web_ErrorMsg, "WebHelpers.ParseXml", 11099 + vbObjectError
    Err.Raise 11099 + vbObjectError, "WebHeleprs.ParseXml", web_ErrorMsg
End Function

''
' Helper for parsing value to given `WebFormat` or custom format.
' Returns `Dictionary` or `Collection` based on given `Value`.
'
' @method ParseByFormat
' @param {String} Value Value to parse
' @param {WebFormat} Format
' @param {String} [CustomFormat=""] Name of registered custom converter
' @param {Variant} [Bytes] Bytes for custom convert (if `ParseType = "Binary"`)
' @return {Dictionary|Collection|Object}
' @throws 11000 - Error during parsing
''
Public Function ParseByFormat(Value As String, Format As WebFormat, _
    Optional CustomFormat As String = "", Optional Bytes As Variant) As Object
    
    On Error GoTo web_ErrorHandling
    
    ' Don't attempt to parse blank values
    If Value = "" And CustomFormat = "" Then
        Exit Function
    End If
    
    Select Case Format
    Case WebFormat.Json
        Set ParseByFormat = ParseJson(Value)
    Case WebFormat.FormUrlEncoded
        Set ParseByFormat = ParseUrlEncoded(Value)
    Case WebFormat.Xml
        Set ParseByFormat = ParseXml(Value)
    Case WebFormat.Custom
#If EnableCustomFormatting Then
        Dim web_Converter As Dictionary
        Dim web_Callback As String
        
        Set web_Converter = web_GetConverter(CustomFormat)
        web_Callback = web_Converter("ParseCallback")
        
        If web_Converter.Exists("Instance") Then
            Dim web_Instance As Object
            Set web_Instance = web_Converter("Instance")
            
            If web_Converter("ParseType") = "Binary" Then
                Set ParseByFormat = VBA.CallByName(web_Instance, web_Callback, VBA.vbMethod, Bytes)
            Else
                Set ParseByFormat = VBA.CallByName(web_Instance, web_Callback, VBA.vbMethod, Value)
            End If
        Else
            If web_Converter("ParseType") = "Binary" Then
                Set ParseByFormat = Application.Run(web_Callback, Bytes)
            Else
                Set ParseByFormat = Application.Run(web_Callback, Value)
            End If
        End If
#Else
    LogWarning "Custom formatting is disabled. To use WebFormat.Custom, enable custom formatting with the EnableCustomFormatting flag in WebHelpers"
#End If
    End Select
    Exit Function
    
web_ErrorHandling:
    
    Dim web_ErrorDescription As String
    web_ErrorDescription = "An error occurred during parsing" & vbNewLine & _
        Err.Number & VBA.IIf(Err.Number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.Number)) & ")", "") & ": " & Err.Description
        
    LogError web_ErrorDescription, "WebHelpers.ParseByFormat", 11000
    Err.Raise 11000, "WebHelpers.ParseByFormat", web_ErrorDescription
End Function

''
' Helper for converting value to given `WebFormat` or custom format.
'
' _Note_ Only some converters handle `Collection` or `Array`.
'
' @method ConvertToFormat
' @param {Dictionary|Collection|Variant} Obj
' @param {WebFormat} Format
' @param {String} [CustomFormat] Name of registered custom converter
' @return {String}
' @throws 11001 - Error during conversion
''
Public Function ConvertToFormat(Obj As Variant, Format As WebFormat, Optional CustomFormat As String = "") As String
    On Error GoTo web_ErrorHandling

    Select Case Format
    Case WebFormat.Json
        ConvertToFormat = ConvertToJson(Obj)
    Case WebFormat.FormUrlEncoded
        ConvertToFormat = ConvertToUrlEncoded(Obj)
    Case WebFormat.Xml
        ConvertToFormat = ConvertToXml(Obj)
    Case WebFormat.Custom
#If EnableCustomFormatting Then
        Dim web_Converter As Dictionary
        Dim web_Callback As String
        
        Set web_Converter = web_GetConverter(CustomFormat)
        web_Callback = web_Converter("ConvertCallback")
        
        If web_Converter.Exists("web_Instance") Then
            Dim web_Instance As Object
            Set web_Instance = web_Converter("web_Instance")
            ConvertToFormat = VBA.CallByName(web_Instance, web_Callback, VBA.vbMethod, Obj)
        Else
            ConvertToFormat = Application.Run(web_Callback, Obj)
        End If
#Else
    LogWarning "Custom formatting is disabled. To use WebFormat.Custom, enable custom formatting with the EnableCustomFormatting flag in WebHelpers"
#End If
    Case Else
        If VBA.VarType(Obj) = vbString Then
            ' Plain text
            ConvertToFormat = Obj
        End If
    End Select
    Exit Function
    
web_ErrorHandling:

    Dim web_ErrorDescription As String
    web_ErrorDescription = "An error occurred during conversion" & vbNewLine & _
        Err.Number & VBA.IIf(Err.Number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.Number)) & ")", "") & ": " & Err.Description
        
    LogError web_ErrorDescription, "WebHelpers.ConvertToFormat", 11001
    Err.Raise 11001, "WebHelpers.ConvertToFormat", web_ErrorDescription
End Function

''
' Encode string for URLs
' Reference: http://www.blooberry.com/indexdot/html/topics/urlencoding.htm
'
' @method UrlEncode
' @param {Variant} Text Text to encode
' @param {Boolean} [SpaceAsPlus = False] `%20` if `False` / `+` if `True`
' @param {Boolean} [EncodeUnsafe = True] Encode characters that could be misunderstood within URLs.
'   (``SPACE, ", <, >, #, %, {, }, |, \, ^, ~, `, [, ]``)
' @return {String} Encoded string
''
Public Function UrlEncode(Text As Variant, Optional SpaceAsPlus As Boolean = False, Optional EncodeUnsafe As Boolean = True) As String
    Dim web_UrlVal As String
    Dim web_StringLen As Long
    
    web_UrlVal = VBA.CStr(Text)
    web_StringLen = VBA.Len(web_UrlVal)
    
    If web_StringLen > 0 Then
        Dim web_Result() As String
        Dim web_i As Long
        Dim web_CharCode As Integer
        Dim web_Char As String
        Dim web_Space As String
        ReDim web_Result(web_StringLen)
        
        ' Set space value
        If SpaceAsPlus Then
            web_Space = "+"
        Else
            web_Space = "%20"
        End If
        
        ' Loop through string characters
        For web_i = 1 To web_StringLen
            ' Get character and ascii code
            web_Char = VBA.Mid$(web_UrlVal, web_i, 1)
            web_CharCode = VBA.Asc(web_Char)
            
            Select Case web_CharCode
            Case 36, 38, 43, 44, 47, 58, 59, 61, 63, 64
                ' Reserved characters
                web_Result(web_i) = "%" & VBA.Hex(web_CharCode)
            Case 32
                web_Result(web_i) = web_Space
            Case 34, 35, 37, 60, 62, 91 To 94, 96, 123 To 126
                ' Unsafe characters
                If EncodeUnsafe Then
                    web_Result(web_i) = "%" & VBA.Hex(web_CharCode)
                Else
                    web_Result(web_i) = web_Char
                End If
            Case Else
                web_Result(web_i) = web_Char
            End Select
        Next web_i
        UrlEncode = VBA.Join$(web_Result, "")
    End If
End Function

''
' Decode Url-encoded string.
'
' @method UrlDecode
' @param {String} Encoded Text to decode
' @param {Boolean} [PlusAsSpace = True] Decode plus as space
'   DEPRECATED: Default = True to align with existing behavior, will be changed to False in v5
' @return {String} Decoded string
''
Public Function UrlDecode(Encoded As String, Optional PlusAsSpace As Boolean = True) As String
    Dim web_StringLen As Long
    web_StringLen = VBA.Len(Encoded)
    
    If web_StringLen > 0 Then
        Dim web_i As Long
        Dim web_Result As String
        Dim web_Temp As String
        
        For web_i = 1 To web_StringLen
            web_Temp = VBA.Mid$(Encoded, web_i, 1)
            
            If web_Temp = "+" And PlusAsSpace Then
                web_Temp = " "
            ElseIf web_Temp = "%" And web_StringLen >= web_i + 2 Then
                web_Temp = VBA.Mid$(Encoded, web_i + 1, 2)
                web_Temp = VBA.Chr(VBA.CInt("&H" & web_Temp))
                
                web_i = web_i + 2
            End If
                
            web_Result = web_Result & web_Temp
        Next web_i
        
        UrlDecode = web_Result
    End If
End Function

''
' Base64-encode text.
'
' @param {Variant} Text Text to encode
' @return {String} Encoded string
''
Public Function Base64Encode(Text As String) As String
#If Mac Then
    Dim web_Command As String
    web_Command = "printf " & PrepareTextForShell(Text) & " | openssl base64"
    Base64Encode = ExecuteInShell(web_Command).Output
#Else
    Dim web_Bytes() As Byte
    
    web_Bytes = VBA.StrConv(Text, vbFromUnicode)
    Base64Encode = web_AnsiBytesToBase64(web_Bytes)
#End If

    Base64Encode = VBA.Replace$(Base64Encode, vbLf, "")
End Function

''
' Decode Base64-encoded text
'
' @param {Variant} Encoded Text to decode
' @return {String} Decoded string
''
Public Function Base64Decode(Encoded As Variant) As String
    ' Add trailing padding, if necessary
    If (VBA.Len(Encoded) Mod 4 > 0) Then
        Encoded = Encoded & VBA.Left("====", 4 - (VBA.Len(Encoded) Mod 4))
    End If

#If Mac Then
    Dim web_Command As String
    web_Command = "echo " & PrepareTextForShell(Encoded) & " | openssl base64 -d"
    Base64Decode = ExecuteInShell(web_Command).Output
#Else
    Dim web_XmlObj As Object
    Dim web_Node As Object
    
    Set web_XmlObj = CreateObject("MSXML2.DOMDocument")
    Set web_Node = web_XmlObj.createElement("b64")
    
    web_Node.DataType = "bin.base64"
    web_Node.Text = Encoded
    Base64Decode = VBA.StrConv(web_Node.nodeTypedValue, vbUnicode)

    Set web_Node = Nothing
    Set web_XmlObj = Nothing
#End If
End Function

''
' Register custom converter for converting request `Body` and response `Content`.
' If the `ConvertCallback` or `ParseCallback` are object methods,
' pass in an object instance.
' If the `ParseCallback` needs the raw binary response value (e.g. file download),
' set `ParseType = "Binary"`, otherwise `"String"` is used.
'
' - `ConvertCallback` signature: `Function ...(Value As Variant) As String`
' - `ParseCallback` signature: `Function ...(Value As String) As Object`
'
' @example
' ```VB.net
' ' 1. Use global module functions for Convert and Parse
' ' ---
' ' Module: CSVConverter
' Function ParseCSV(Value As String) As Object
'   ' ...
' End Function
' Function ConvertToCSV(Value As Variant) As String
'   ' ...
' End Function
'
' WebHelpers.RegisterConverter "csv", "text/csv", _
'   "CSVConverter.ConvertToCSV", "CSVConverter.ParseCSV"
'
' ' 2. Use object instance functions for Convert and Parse
' ' ---
' ' Object: CSVConverterClass
' ' same as above...
'
' Dim Converter As New CSVConverterClass
' WebHelpers.RegisterConverter "csv", "text/csv", _
'   "ConvertToCSV", "ParseCSV", Instance:=Converter
'
' ' 3. Pass raw binary value to ParseCallback
' ' ---
' ' Module: ImageConverter
' Function ParseImage(Bytes As Variant) As Object
'   ' ...
' End Function
' Function ConvertToImage(Value As Variant) As String
'   ' ...
' End Function
'
' WebHelpers.RegisterConverter "image", "image/jpeg", _
'   "ImageConverter.ConvertToImage", "ImageConverter.ParseImage", _
'   ParseType:="Binary"
' ```
'
' @method RegisterConverter
' @param {String} Name
'   Name of converter for use with `CustomRequestFormat` or `CustomResponseFormat`
' @param {String} MediaType
'   Media type to use for `Content-Type` and `Accept` headers
' @param {String} ConvertCallback Global or object function name for converting
' @param {String} ParseCallback Global or object function name for parsing
' @param {Object} [Instance]
'   Use instance methods for `ConvertCallback` and `ParseCallback`
' @param {String} [ParseType="String"]
'   "String"` (default) or `"Binary"` to pass raw binary response to `ParseCallback`
''
Public Sub RegisterConverter( _
    Name As String, MediaType As String, ConvertCallback As String, ParseCallback As String, _
    Optional Instance As Object, Optional ParseType As String = "String")

    Dim web_Converter As New Dictionary
    web_Converter("MediaType") = MediaType
    web_Converter("ConvertCallback") = ConvertCallback
    web_Converter("ParseCallback") = ParseCallback
    web_Converter("ParseType") = ParseType
    
    If Not Instance Is Nothing Then
        Set web_Converter("Instance") = Instance
    End If
    
    If web_pConverters Is Nothing Then: Set web_pConverters = New Dictionary
    Set web_pConverters(Name) = web_Converter
End Sub

' Helper for getting custom converter
' @throws 11002 - No matching converter has been registered
Private Function web_GetConverter(web_CustomFormat As String) As Dictionary
    If web_pConverters.Exists(web_CustomFormat) Then
        Set web_GetConverter = web_pConverters(web_CustomFormat)
    Else
        LogError "No matching converter has been registered for custom format: " & web_CustomFormat, _
            "WebHelpers.web_GetConverter", 11002
        Err.Raise 11002, "WebHelpers.web_GetConverter", _
            "No matching converter has been registered for custom format: " & web_CustomFormat
    End If
End Function

' ============================================= '
' 3. Url handling
' ============================================= '

''
' Join Url with /
'
' @example
' ```VB.net
' Debug.Print WebHelpers.JoinUrl("a/", "/b")
' Debug.Print WebHelpers.JoinUrl("a", "b")
' Debug.Print WebHelpers.JoinUrl("a/", "b")
' Debug.Print WebHelpers.JoinUrl("a", "/b")
' -> a/b
' ```
'
' @param {String} LeftSide
' @param {String} RightSide
' @return {String} Joined url
''
Public Function JoinUrl(LeftSide As String, rightSide As String) As String
    If Left(rightSide, 1) = "/" Then
        rightSide = Right(rightSide, Len(rightSide) - 1)
    End If
    If Right(LeftSide, 1) = "/" Then
        LeftSide = Left(LeftSide, Len(LeftSide) - 1)
    End If
    
    If LeftSide <> "" And rightSide <> "" Then
        JoinUrl = LeftSide & "/" & rightSide
    Else
        JoinUrl = LeftSide & rightSide
    End If
End Function

''
' Get relevant parts of the given url.
' Returns `Protocol`, `Host`, `Port`, `Path`, `Querystring`, and `Hash`
'
' @example
' ```VB.net
' WebHelpers.GetUrlParts "https://www.google.com/a/b/c.html?a=1&b=2#hash"
' ' -> Protocol = "https"
' '    Host = "www.google.com"
' '    Port = "443"
' '    Path = "/a/b/c.html"
' '    Querystring = "a=1&b=2"
' '    Hash = "hash"
'
' WebHelpers.GetUrlParts "localhost:3000/a/b/c"
' ' -> Protocol = ""
' '    Host = "localhost"
' '    Port = "3000"
' '    Path = "/a/b/c"
' '    Querystring = ""
' '    Hash = ""
' ```
'
' @method GetUrlParts
' @param {String} Url
' @return {Dictionary} Parts of url
'   Protocol, Host, Port, Path, Querystring, Hash
' @throws 11003 - Error while getting url parts
''
Public Function GetUrlParts(URL As String) As Dictionary
    Dim web_Parts As New Dictionary
    
    On Error GoTo web_ErrorHandling
    
#If Mac Then
    ' Run perl script to parse url
    
    Dim web_AddedProtocol As Boolean
    Dim web_Command As String
    Dim web_Results As Variant
    Dim web_ResultPart As Variant
    Dim web_EqualsIndex As Long
    Dim web_Key As String
    Dim web_Value As String
    
    ' Add Protocol if missing
    If InStr(1, URL, "://") <= 0 Then
        web_AddedProtocol = True
        If InStr(1, URL, "//") = 1 Then
            URL = "http" & URL
        Else
            URL = "http://" & URL
        End If
    End If
    
    web_Command = "perl -e '{use URI::URL;" & vbNewLine & _
        "$url = new URI::URL """ & URL & """;" & vbNewLine & _
        "print ""Protocol="" . $url->scheme;" & vbNewLine & _
        "print "" | Host="" . $url->host;" & vbNewLine & _
        "print "" | Port="" . $url->port;" & vbNewLine & _
        "print "" | FullPath="" . $url->full_path;" & vbNewLine & _
        "print "" | Hash="" . $url->frag;" & vbNewLine & _
    "}'"

    web_Results = Split(ExecuteInShell(web_Command).Output, " | ")
    For Each web_ResultPart In web_Results
        web_EqualsIndex = InStr(1, web_ResultPart, "=")
        web_Key = Trim(VBA.Mid$(web_ResultPart, 1, web_EqualsIndex - 1))
        web_Value = Trim(VBA.Mid$(web_ResultPart, web_EqualsIndex + 1))
        
        If web_Key = "FullPath" Then
            ' For properly escaped path and querystring, need to use full_path
            ' But, need to split FullPath into Path...?Querystring
            Dim QueryIndex As Integer
            
            QueryIndex = InStr(1, web_Value, "?")
            If QueryIndex > 0 Then
                web_Parts.Add "Path", Mid$(web_Value, 1, QueryIndex - 1)
                web_Parts.Add "Querystring", Mid$(web_Value, QueryIndex + 1)
            Else
                web_Parts.Add "Path", web_Value
                web_Parts.Add "Querystring", ""
            End If
        Else
            web_Parts.Add web_Key, web_Value
        End If
    Next web_ResultPart
    
    If web_AddedProtocol And web_Parts.Exists("Protocol") Then
        web_Parts("Protocol") = ""
    End If
#Else
    ' Create document/element is expensive, cache after creation
    If web_pDocumentHelper Is Nothing Or web_pElHelper Is Nothing Then
        Set web_pDocumentHelper = CreateObject("htmlfile")
        Set web_pElHelper = web_pDocumentHelper.createElement("a")
    End If
    
    web_pElHelper.href = URL
    web_Parts.Add "Protocol", Replace(web_pElHelper.Protocol, ":", "", Count:=1)
    web_Parts.Add "Host", web_pElHelper.HostName
    web_Parts.Add "Port", web_pElHelper.port
    web_Parts.Add "Path", web_pElHelper.PathName
    web_Parts.Add "Querystring", Replace(web_pElHelper.Search, "?", "", Count:=1)
    web_Parts.Add "Hash", Replace(web_pElHelper.Hash, "#", "", Count:=1)
#End If

    If web_Parts("Protocol") = "localhost" Then
        ' localhost:port/... was passed in without protocol
        Dim PathParts As Variant
        PathParts = Split(web_Parts("Path"), "/")
        
        web_Parts("Port") = PathParts(0)
        web_Parts("Protocol") = ""
        web_Parts("Host") = "localhost"
        web_Parts("Path") = Replace(web_Parts("Path"), web_Parts("Port"), "", Count:=1)
    End If
    If Left(web_Parts("Path"), 1) <> "/" Then
        web_Parts("Path") = "/" & web_Parts("Path")
    End If

    Set GetUrlParts = web_Parts
    Exit Function
    
web_ErrorHandling:
    
    Dim web_ErrorDescription As String
    web_ErrorDescription = "An error occurred while getting url parts" & vbNewLine & _
        Err.Number & VBA.IIf(Err.Number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.Number)) & ")", "") & ": " & Err.Description
    
    LogError web_ErrorDescription, "WebHelpers.GetUrlParts", 11003
    Err.Raise 11003, "WebHelpers.GetUrlParts", web_ErrorDescription
End Function

' ============================================= '
' 4. Object/Dictionary/Collection/Array helpers
' ============================================= '

''
' Create a cloned copy of the `Dictionary`.
' This is not a deep copy, so children objects are copied by reference.
'
' @method CloneDictionary
' @param {Dictionary} Original
' @return {Dictionary} Clone
''
Public Function CloneDictionary(Original As Dictionary) As Dictionary
    Dim web_Key As Variant
    
    Set CloneDictionary = New Dictionary
    For Each web_Key In Original.Keys
        CloneDictionary.Add VBA.CStr(web_Key), Original(web_Key)
    Next web_Key
End Function

''
' Create a cloned copy of the `Collection`.
' This is not a deep copy, so children objects are copied by reference.
'
' _Note_ Keys are not transferred to clone
'
' @method CloneCollection
' @param {Collection} Original
' @return {Collection} Clone
''
Public Function CloneCollection(Original As Collection) As Collection
    Dim web_Item As Variant
    
    Set CloneCollection = New Collection
    For Each web_Item In Original
        CloneCollection.Add web_Item
    Next web_Item
End Function

''
' Helper for creating `Key-Value` pair with `Dictionary`.
' Used in `WebRequest`/`WebResponse` `Cookies`, `Headers`, and `QuerystringParams`
'
' @example
' ```VB.net
' WebHelpers.CreateKeyValue "abc", 123
' ' -> {"Key": "abc", "Value": 123}
' ```
'
' @method CreateKeyValue
' @param {String} Key
' @param {Variant} Value
' @return {Dictionary}
''
Public Function CreateKeyValue(Key As String, Value As Variant) As Dictionary
    Dim web_KeyValue As New Dictionary
    
    web_KeyValue("Key") = Key
    web_KeyValue("Value") = Value
    Set CreateKeyValue = web_KeyValue
End Function

''
' Search a `Collection` of `KeyValue` and retrieve the value for the given key.
'
' @example
' ```VB.net
' Dim KeyValues As New Collection
' KeyValues.Add WebHelpers.CreateKeyValue("abc", 123)
'
' WebHelpers.FindInKeyValues KeyValues, "abc"
' ' -> 123
'
' WebHelpers.FindInKeyValues KeyValues, "unknown"
' ' -> Empty
' ```
'
' @method FindInKeyValues
' @param {Collection} KeyValues
' @param {Variant} Key to find
' @return {Variant}
''
Public Function FindInKeyValues(KeyValues As Collection, Key As Variant) As Variant
    Dim web_KeyValue As Dictionary
    
    For Each web_KeyValue In KeyValues
        If web_KeyValue("Key") = Key Then
            FindInKeyValues = web_KeyValue("Value")
            Exit Function
        End If
    Next web_KeyValue
End Function

''
' Helper for adding/replacing `KeyValue` in `Collection` of `KeyValue`
' - Add if key not found
' - Replace if key is found
'
' @example
' ```VB.net
' Dim KeyValues As New Collection
' KeyValues.Add WebHelpers.CreateKeyValue("a", 123)
' KeyValues.Add WebHelpers.CreateKeyValue("b", 456)
' KeyValues.Add WebHelpers.CreateKeyValue("c", 789)
'
' WebHelpers.AddOrReplaceInKeyValues KeyValues, "b", "abc"
' WebHelpers.AddOrReplaceInKeyValues KeyValues, "d", "def"
'
' ' -> [
' '      {"Key":"a","Value":123},
' '      {"Key":"b","Value":"abc"},
' '      {"Key":"c","Value":789},
' '      {"Key":"d","Value":"def"}
' '    ]
' ```
'
' @method AddOrReplaceInKeyValues
' @param {Collection} KeyValues
' @param {Variant} Key
' @param {Variant} Value
' @return {Variant}
''
Public Sub AddOrReplaceInKeyValues(KeyValues As Collection, Key As Variant, Value As Variant)
    Dim web_KeyValue As Dictionary
    Dim web_Index As Long
    Dim web_NewKeyValue As Dictionary
    
    Set web_NewKeyValue = CreateKeyValue(CStr(Key), Value)
    
    web_Index = 1
    For Each web_KeyValue In KeyValues
        If web_KeyValue("Key") = Key Then
            ' Replace existing
            KeyValues.Remove web_Index
            
            If KeyValues.Count = 0 Then
                KeyValues.Add web_NewKeyValue
            ElseIf web_Index > KeyValues.Count Then
                KeyValues.Add web_NewKeyValue, After:=web_Index - 1
            Else
                KeyValues.Add web_NewKeyValue, Before:=web_Index
            End If
            Exit Sub
        End If
        
        web_Index = web_Index + 1
    Next web_KeyValue
    
    ' Add
    KeyValues.Add web_NewKeyValue
End Sub

' ============================================= '
' 5. Request preparation / handling
' ============================================= '

''
' Get the media-type for the given format / custom format.
'
' @method FormatToMediaType
' @param {WebFormat} Format
' @param {String} [CustomFormat] Needed if `Format = WebFormat.Custom`
' @return {String}
''
Public Function FormatToMediaType(Format As WebFormat, Optional CustomFormat As String) As String
    Select Case Format
    Case WebFormat.FormUrlEncoded
        FormatToMediaType = "application/x-www-form-urlencoded;charset=UTF-8"
    Case WebFormat.Json
        FormatToMediaType = "application/json"
    Case WebFormat.Xml
        FormatToMediaType = "application/xml"
    Case WebFormat.Custom
        FormatToMediaType = web_GetConverter(CustomFormat)("MediaType")
    Case Else
        FormatToMediaType = "text/plain"
    End Select
End Function

''
' Get the method name for the given `WebMethod`
'
' @example
' ```VB.net
' WebHelpers.MethodToName WebMethod.HttpPost
' ' -> "POST"
' ```
'
' @method MethodToName
' @param {WebMethod} Method
' @return {String}
''
Public Function MethodToName(Method As WebMethod) As String
    Select Case Method
    Case WebMethod.HttpDelete
        MethodToName = "DELETE"
    Case WebMethod.HttpPut
        MethodToName = "PUT"
    Case WebMethod.HttpPatch
        MethodToName = "PATCH"
    Case WebMethod.HttpPost
        MethodToName = "POST"
    Case WebMethod.HttpGet
        MethodToName = "GET"
    End Select
End Function

' ============================================= '
' 6. Timing
' ============================================= '

''
' Handle timeout timers expiring
'
' @internal
' @method OnTimeoutTimerExpired
' @param {String} RequestId
''
Public Sub OnTimeoutTimerExpired(web_RequestId As String)
    If Not AsyncRequests Is Nothing Then
        If AsyncRequests.Exists(web_RequestId) Then
            Dim web_AsyncWrapper As Object
            Set web_AsyncWrapper = AsyncRequests(web_RequestId)
            web_AsyncWrapper.TimedOut
        End If
    End If
End Sub

' ============================================= '
' 7. Mac
' ============================================= '

''
' Execute the given command
'
' @internal
' @method ExecuteInShell
' @param {String} Command
' @return {ShellResult}
''
Public Function ExecuteInShell(web_Command As String) As ShellResult
#If Mac Then
    Dim web_File As Long
    Dim web_Chunk As String
    Dim web_Read As Long
    
    On Error GoTo web_Cleanup
    
    web_File = web_popen(web_Command, "r")
    
    If web_File = 0 Then
        ' TODO Investigate why this could happen and what should be done if it happens
        Exit Function
    End If
    
    Do While web_feof(web_File) = 0
        web_Chunk = VBA.Space$(50)
        web_Read = web_fread(web_Chunk, 1, Len(web_Chunk) - 1, web_File)
        If web_Read > 0 Then
            web_Chunk = VBA.Left$(web_Chunk, web_Read)
            ExecuteInShell.Output = ExecuteInShell.Output & web_Chunk
        End If
    Loop

web_Cleanup:

    ExecuteInShell.ExitCode = web_pclose(web_File)
#End If
End Function

''
' Prepare text for shell
' - Wrap in "..."
' - Replace ! with '!' (reserved in bash)
' - Escape \, `, $, %, and "
'
' @internal
' @method PrepareTextForShell
' @param {String} Text
' @return {String}
''
Public Function PrepareTextForShell(ByVal web_Text As String) As String
    ' Escape special characters (except for !)
    web_Text = VBA.Replace(web_Text, "\", "\\")
    web_Text = VBA.Replace(web_Text, "`", "\`")
    web_Text = VBA.Replace(web_Text, "$", "\$")
    web_Text = VBA.Replace(web_Text, "%", "\%")
    web_Text = VBA.Replace(web_Text, """", "\""")
    
    ' Wrap in quotes
    web_Text = """" & web_Text & """"
    
    ' Escape !
    web_Text = VBA.Replace(web_Text, "!", """'!'""")
    
    ' Guard for ! at beginning or end (""'!'"..." or "..."'!'"" -> '!'"..." or "..."'!')
    If VBA.Left$(web_Text, 3) = """""'" Then
        web_Text = VBA.Right$(web_Text, VBA.Len(web_Text) - 2)
    End If
    If VBA.Right$(web_Text, 3) = "'""""" Then
        web_Text = VBA.Left$(web_Text, VBA.Len(web_Text) - 2)
    End If
    
    PrepareTextForShell = web_Text
End Function

' ============================================= '
' 8. Cryptography
' ============================================= '

''
' Determine the HMAC for the given text and secret using the SHA1 hash algorithm.
'
' Reference:
' - http://stackoverflow.com/questions/8246340/does-vba-have-a-hash-hmac
'
' @example
' ```VB.net
' WebHelpers.HMACSHA1 "Howdy!", "Secret"
' ' -> c8fdf74a9d62aa41ac8136a1af471cec028fb157
' ```
'
' @method HMACSHA1
' @param {String} Text
' @param {String} Secret
' @param {String} [Format="Hex"] "Hex" or "Base64" encoding for result
' @return {String} HMAC-SHA1
''
Public Function HMACSHA1(Text As String, Secret As String, Optional Format As String = "Hex") As String
#If Mac Then
    Dim web_Command As String
    web_Command = "printf " & PrepareTextForShell(Text) & " | openssl dgst -sha1 -hmac " & PrepareTextForShell(Secret)
    
    If Format = "Base64" Then
        web_Command = web_Command & " -binary | openssl enc -base64"
    End If
    
    HMACSHA1 = VBA.Replace(ExecuteInShell(web_Command).Output, vbLf, "")
#Else
    Dim web_Crypto As Object
    Dim web_TextBytes() As Byte
    Dim web_SecretBytes() As Byte
    Dim web_Bytes() As Byte
    
    web_TextBytes = VBA.StrConv(Text, vbFromUnicode)
    web_SecretBytes = VBA.StrConv(Secret, vbFromUnicode)
    
    Set web_Crypto = CreateObject("System.Security.Cryptography.HMACSHA1")
    web_Crypto.Key = web_SecretBytes
    web_Bytes = web_Crypto.ComputeHash_2(web_TextBytes)
    
    Select Case Format
    Case "Base64"
        HMACSHA1 = web_AnsiBytesToBase64(web_Bytes)
    Case Else
        HMACSHA1 = web_AnsiBytesToHex(web_Bytes)
    End Select
#End If
End Function

''
' Determine the HMAC for the given text and secret using the SHA256 hash algorithm.
'
' @example
' ```VB.net
' WebHelpers.HMACSHA256 "Howdy!", "Secret"
' ' -> fb5d65...
' ```
'
' @method HMACSHA256
' @param {String} Text
' @param {String} Secret
' @param {String} [Format="Hex"] "Hex" or "Base64" encoding for result
' @return {String} HMAC-SHA256
''
Public Function HMACSHA256(Text As String, Secret As String, Optional Format As String = "Hex") As String
#If Mac Then
    Dim web_Command As String
    web_Command = "printf " & PrepareTextForShell(Text) & " | openssl dgst -sha256 -hmac " & PrepareTextForShell(Secret)
    
    If Format = "Base64" Then
        web_Command = web_Command & " -binary | openssl enc -base64"
    End If
    
    HMACSHA256 = VBA.Replace(ExecuteInShell(web_Command).Output, vbLf, "")
#Else
    Dim web_Crypto As Object
    Dim web_TextBytes() As Byte
    Dim web_SecretBytes() As Byte
    Dim web_Bytes() As Byte
    
    web_TextBytes = VBA.StrConv(Text, vbFromUnicode)
    web_SecretBytes = VBA.StrConv(Secret, vbFromUnicode)
    
    Set web_Crypto = CreateObject("System.Security.Cryptography.HMACSHA256")
    web_Crypto.Key = web_SecretBytes
    web_Bytes = web_Crypto.ComputeHash_2(web_TextBytes)
    
    Select Case Format
    Case "Base64"
        HMACSHA256 = web_AnsiBytesToBase64(web_Bytes)
    Case Else
        HMACSHA256 = web_AnsiBytesToHex(web_Bytes)
    End Select
#End If
End Function

''
' Determine the MD5 hash of the given text.
'
' Reference:
' - http://www.di-mgt.com.au/src/basMD5.bas.html
'
' @example
' ```VB.net
' WebHelpers.MD5 "Howdy!"
' ' -> 7105f32280940271293ee00ac97da5a7
' ```
'
' @method MD5
' @param {String} Text
' @param {String} [Format="Hex"] "Hex" or "Base64" encoding for result
' @return {String} MD5 Hash
''
Public Function MD5(Text As String, Optional Format As String = "Hex") As String
#If Mac Then
    Dim web_Command As String
    web_Command = "printf " & PrepareTextForShell(Text) & " | openssl dgst -md5"
    
    If Format = "Base64" Then
        web_Command = web_Command & " -binary | openssl enc -base64"
    End If
    
    MD5 = VBA.Replace(ExecuteInShell(web_Command).Output, vbLf, "")
#Else
    Dim web_Crypto As Object
    Dim web_TextBytes() As Byte
    Dim web_Bytes() As Byte
    
    web_TextBytes = VBA.StrConv(Text, vbFromUnicode)
    
    Set web_Crypto = CreateObject("System.Security.Cryptography.MD5CryptoServiceProvider")
    web_Bytes = web_Crypto.ComputeHash_2(web_TextBytes)
    
    Select Case Format
    Case "Base64"
        MD5 = web_AnsiBytesToBase64(web_Bytes)
    Case Else
        MD5 = web_AnsiBytesToHex(web_Bytes)
    End Select
#End If
End Function

''
' Create random alphanumeric nonce (0-9a-zA-Z)
'
' @method CreateNonce
' @param {Integer} [NonceLength=32]
' @return {String} Randomly generated nonce
''
Public Function CreateNonce(Optional NonceLength As Integer = 32) As String
    Dim web_Str As String
    Dim web_Count As Integer
    Dim web_Result As String
    Dim web_Random As Integer
    
    web_Str = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUIVWXYZ"
    web_Result = ""
    
    For web_Count = 1 To NonceLength
        web_Random = VBA.Int(((VBA.Len(web_Str) - 1) * VBA.Rnd) + 1)
        web_Result = web_Result & VBA.Mid$(web_Str, web_Random, 1)
    Next
    CreateNonce = web_Result
End Function

''
' Convert string to ANSI bytes
'
' @internal
' @method StringToAnsiBytes
' @param {String} Text
' @return {Byte()}
''
Public Function StringToAnsiBytes(web_Text As String) As Byte()
    Dim web_Bytes() As Byte
    Dim web_AnsiBytes() As Byte
    Dim web_ByteIndex As Long
    Dim web_AnsiIndex As Long
    
    If VBA.Len(web_Text) > 0 Then
        ' Take first byte from unicode bytes
        ' VBA.Int is used for floor instead of round
        web_Bytes = web_Text
        ReDim web_AnsiBytes(VBA.Int(UBound(web_Bytes) / 2))
        
        web_AnsiIndex = LBound(web_Bytes)
        For web_ByteIndex = LBound(web_Bytes) To UBound(web_Bytes) Step 2
            web_AnsiBytes(web_AnsiIndex) = web_Bytes(web_ByteIndex)
            web_AnsiIndex = web_AnsiIndex + 1
        Next web_ByteIndex
    End If
    
    StringToAnsiBytes = web_AnsiBytes
End Function

#If Mac Then
#Else
Private Function web_AnsiBytesToBase64(web_Bytes() As Byte)
    ' Use XML to convert to Base64
    Dim web_XmlObj As Object
    Dim web_Node As Object
    
    Set web_XmlObj = CreateObject("MSXML2.DOMDocument")
    Set web_Node = web_XmlObj.createElement("b64")
    
    web_Node.DataType = "bin.base64"
    web_Node.nodeTypedValue = web_Bytes
    web_AnsiBytesToBase64 = web_Node.Text

    Set web_Node = Nothing
    Set web_XmlObj = Nothing
End Function

Private Function web_AnsiBytesToHex(web_Bytes() As Byte)
    Dim web_i As Long
    For web_i = LBound(web_Bytes) To UBound(web_Bytes)
        web_AnsiBytesToHex = web_AnsiBytesToHex & VBA.LCase$(VBA.Right$("0" & VBA.Hex$(web_Bytes(web_i)), 2))
    Next web_i
End Function
#End If

' ============================================= '
' 9. Converters
' ============================================= '

' Helper for url-encoded to create key=value pair
Private Function web_GetUrlEncodedKeyValue(Key As Variant, Value As Variant) As String
    Select Case VBA.VarType(Value)
    Case VBA.vbBoolean
        ' Convert boolean to lowercase
        If Value Then
            Value = "true"
        Else
            Value = "false"
        End If
    Case VBA.vbDate
        ' Use region invariant date (ISO-8601)
        Value = WebHelpers.ConvertToIso(CDate(Value))
    Case VBA.vbDecimal, VBA.vbSingle, VBA.vbDouble, VBA.vbCurrency
        ' Use region invariant number encoding ("." for decimal separator)
        Value = VBA.Replace(VBA.CStr(Value), ",", ".")
    End Select
    
    ' Url encode key and value (using + for spaces)
    web_GetUrlEncodedKeyValue = UrlEncode(Key, SpaceAsPlus:=True) & "=" & UrlEncode(Value, SpaceAsPlus:=True)
End Function

''
' VBA-JSON v1.0.2
' (c) Tim Hall - https://github.com/VBA-tools/VBA-JSON
'
' JSON Converter for VBA
'
' Errors:
' 10001 - JSON parse error
'
' @class JsonConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
'
' Based originally on vba-json (with extensive changes)
' BSD license included below
'
' JSONLib, http://code.google.com/p/vba-json/
'
' Copyright (c) 2013, Ryo Yokoyama
' All rights reserved.
'
' Redistribution and use in source and binary forms, with or without
' modification, are permitted provided that the following conditions are met:
'     * Redistributions of source code must retain the above copyright
'       notice, this list of conditions and the following disclaimer.
'     * Redistributions in binary form must reproduce the above copyright
'       notice, this list of conditions and the following disclaimer in the
'       documentation and/or other materials provided with the distribution.
'     * Neither the name of the <organization> nor the
'       names of its contributors may be used to endorse or promote products
'       derived from this software without specific prior written permission.
'
' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
' DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
' DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
' (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
' LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
' ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
' SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' (Declarations moved to top)

' ============================================= '
' Public Methods
' ============================================= '

''
' Convert JSON string to object (Dictionary/Collection)
'
' @method ParseJson
' @param {String} json_String
' @return {Object} (Dictionary or Collection)
' @throws 10001 - JSON parse error
''
Public Function ParseJson(ByVal json_String As String, Optional json_ConvertLargeNumbersToString As Boolean = True) As Object
    Dim json_Index As Long
    json_Index = 1
    
    ' Remove vbCr, vbLf, and vbTab from json_String
    json_String = VBA.Replace(VBA.Replace(VBA.Replace(json_String, VBA.vbCr, ""), VBA.vbLf, ""), VBA.vbTab, "")
    
    json_SkipSpaces json_String, json_Index
    Select Case VBA.Mid$(json_String, json_Index, 1)
    Case "{"
        Set ParseJson = json_ParseObject(json_String, json_Index, json_ConvertLargeNumbersToString)
    Case "["
        Set ParseJson = json_ParseArray(json_String, json_Index, json_ConvertLargeNumbersToString)
    Case Else
        ' Error: Invalid JSON string
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '{' or '['")
    End Select
End Function

''
' Convert object (Dictionary/Collection/Array) to JSON
'
' @method ConvertToJson
' @param {Variant} json_DictionaryCollectionOrArray (Dictionary, Collection, or Array)
' @return {String}
''
Public Function ConvertToJson(ByVal json_DictionaryCollectionOrArray As Variant, Optional json_ConvertLargeNumbersFromString As Boolean = True) As String
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    Dim json_Index As Long
    Dim json_LBound As Long
    Dim json_UBound As Long
    Dim json_IsFirstItem As Boolean
    Dim json_Index2D As Long
    Dim json_LBound2D As Long
    Dim json_UBound2D As Long
    Dim json_IsFirstItem2D As Boolean
    Dim json_Key As Variant
    Dim json_Value As Variant
    Dim json_DateStr As String
    
    json_LBound = -1
    json_UBound = -1
    json_IsFirstItem = True
    json_LBound2D = -1
    json_UBound2D = -1
    json_IsFirstItem2D = True

    Select Case VBA.VarType(json_DictionaryCollectionOrArray)
    Case VBA.vbNull, VBA.vbEmpty
        ConvertToJson = "null"
    Case VBA.vbDate
        ' Date
        json_DateStr = ConvertToIso(VBA.CDate(json_DictionaryCollectionOrArray))
        
        ConvertToJson = """" & json_DateStr & """"
    Case VBA.vbString
        ' String (or large number encoded as string)
        If json_ConvertLargeNumbersFromString And json_StringIsLargeNumber(json_DictionaryCollectionOrArray) Then
            ConvertToJson = json_DictionaryCollectionOrArray
        Else
            ConvertToJson = """" & json_Encode(json_DictionaryCollectionOrArray) & """"
        End If
    Case VBA.vbBoolean
        If json_DictionaryCollectionOrArray Then
            ConvertToJson = "true"
        Else
            ConvertToJson = "false"
        End If
    Case VBA.vbArray To VBA.vbArray + VBA.vbByte
        ' Array
        json_BufferAppend json_buffer, "[", json_BufferPosition, json_BufferLength
        
        On Error Resume Next
        
        json_LBound = LBound(json_DictionaryCollectionOrArray, 1)
        json_UBound = UBound(json_DictionaryCollectionOrArray, 1)
        json_LBound2D = LBound(json_DictionaryCollectionOrArray, 2)
        json_UBound2D = UBound(json_DictionaryCollectionOrArray, 2)
        
        If json_LBound >= 0 And json_UBound >= 0 Then
            For json_Index = json_LBound To json_UBound
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                End If
            
                If json_LBound2D >= 0 And json_UBound2D >= 0 Then
                    json_BufferAppend json_buffer, "[", json_BufferPosition, json_BufferLength
                
                    For json_Index2D = json_LBound2D To json_UBound2D
                        If json_IsFirstItem2D Then
                            json_IsFirstItem2D = False
                        Else
                            json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                        End If
                        
                        json_BufferAppend json_buffer, _
                            ConvertToJson(json_DictionaryCollectionOrArray(json_Index, json_Index2D), _
                                json_ConvertLargeNumbersFromString), _
                            json_BufferPosition, json_BufferLength
                    Next json_Index2D
                    
                    json_BufferAppend json_buffer, "]", json_BufferPosition, json_BufferLength
                    json_IsFirstItem2D = True
                Else
                    json_BufferAppend json_buffer, _
                        ConvertToJson(json_DictionaryCollectionOrArray(json_Index), _
                            json_ConvertLargeNumbersFromString), _
                        json_BufferPosition, json_BufferLength
                End If
            Next json_Index
        End If
        
        On Error GoTo 0
        
        json_BufferAppend json_buffer, "]", json_BufferPosition, json_BufferLength
        
        ConvertToJson = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
    
    ' Dictionary or Collection
    Case VBA.vbObject
        ' Dictionary
        If VBA.TypeName(json_DictionaryCollectionOrArray) = "Dictionary" Then
            json_BufferAppend json_buffer, "{", json_BufferPosition, json_BufferLength
            For Each json_Key In json_DictionaryCollectionOrArray.Keys
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                End If
            
                json_BufferAppend json_buffer, _
                    """" & json_Key & """:" & ConvertToJson(json_DictionaryCollectionOrArray(json_Key), json_ConvertLargeNumbersFromString), _
                    json_BufferPosition, json_BufferLength
            Next json_Key
            json_BufferAppend json_buffer, "}", json_BufferPosition, json_BufferLength
        
        ' Collection
        ElseIf VBA.TypeName(json_DictionaryCollectionOrArray) = "Collection" Then
            json_BufferAppend json_buffer, "[", json_BufferPosition, json_BufferLength
            For Each json_Value In json_DictionaryCollectionOrArray
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                End If
            
                json_BufferAppend json_buffer, _
                    ConvertToJson(json_Value, json_ConvertLargeNumbersFromString), _
                    json_BufferPosition, json_BufferLength
            Next json_Value
            json_BufferAppend json_buffer, "]", json_BufferPosition, json_BufferLength
        End If
        
        ConvertToJson = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
    Case Else
        ' Number
        On Error Resume Next
        ConvertToJson = VBA.Replace(json_DictionaryCollectionOrArray, ",", ".")
        On Error GoTo 0
    End Select
End Function

' ============================================= '
' Private Functions
' ============================================= '

Private Function json_ParseObject(json_String As String, ByRef json_Index As Long, Optional json_ConvertLargeNumbersToString As Boolean = True) As Dictionary
    Dim json_Key As String
    Dim json_NextChar As String
    
    Set json_ParseObject = New Dictionary
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "{" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '{'")
    Else
        json_Index = json_Index + 1
        
        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "}" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If
            
            json_Key = json_ParseKey(json_String, json_Index)
            json_NextChar = json_Peek(json_String, json_Index)
            If json_NextChar = "[" Or json_NextChar = "{" Then
                Set json_ParseObject.Item(json_Key) = json_ParseValue(json_String, json_Index, json_ConvertLargeNumbersToString)
            Else
                json_ParseObject.Item(json_Key) = json_ParseValue(json_String, json_Index, json_ConvertLargeNumbersToString)
            End If
        Loop
    End If
End Function

Private Function json_ParseArray(json_String As String, ByRef json_Index As Long, Optional json_ConvertLargeNumbersToString As Boolean = True) As Collection
    Set json_ParseArray = New Collection
    
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "[" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '['")
    Else
        json_Index = json_Index + 1
        
        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "]" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If
            
            json_ParseArray.Add json_ParseValue(json_String, json_Index, json_ConvertLargeNumbersToString)
        Loop
    End If
End Function

Private Function json_ParseValue(json_String As String, ByRef json_Index As Long, Optional json_ConvertLargeNumbersToString As Boolean = True) As Variant
    json_SkipSpaces json_String, json_Index
    Select Case VBA.Mid$(json_String, json_Index, 1)
    Case "{"
        Set json_ParseValue = json_ParseObject(json_String, json_Index)
    Case "["
        Set json_ParseValue = json_ParseArray(json_String, json_Index)
    Case """", "'"
        json_ParseValue = json_ParseString(json_String, json_Index)
    Case Else
        If VBA.Mid$(json_String, json_Index, 4) = "true" Then
            json_ParseValue = True
            json_Index = json_Index + 4
        ElseIf VBA.Mid$(json_String, json_Index, 5) = "false" Then
            json_ParseValue = False
            json_Index = json_Index + 5
        ElseIf VBA.Mid$(json_String, json_Index, 4) = "null" Then
            json_ParseValue = Null
            json_Index = json_Index + 4
        ElseIf VBA.InStr("+-0123456789", VBA.Mid$(json_String, json_Index, 1)) Then
            json_ParseValue = json_ParseNumber(json_String, json_Index, json_ConvertLargeNumbersToString)
        Else
            Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['")
        End If
    End Select
End Function

Private Function json_ParseString(json_String As String, ByRef json_Index As Long) As String
    Dim json_Quote As String
    Dim json_Char As String
    Dim json_Code As String
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    
    json_SkipSpaces json_String, json_Index
    
    ' Store opening quote to look for matching closing quote
    json_Quote = VBA.Mid$(json_String, json_Index, 1)
    json_Index = json_Index + 1
    
    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)
        
        Select Case json_Char
        Case "\"
            ' Escaped string, \\, or \/
            json_Index = json_Index + 1
            json_Char = VBA.Mid$(json_String, json_Index, 1)
            
            Select Case json_Char
            Case """", "\", "/", "'"
                json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "b"
                json_BufferAppend json_buffer, vbBack, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "f"
                json_BufferAppend json_buffer, vbFormFeed, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "n"
                json_BufferAppend json_buffer, vbCrLf, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "r"
                json_BufferAppend json_buffer, vbCr, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "t"
                json_BufferAppend json_buffer, vbTab, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "u"
                ' Unicode character escape (e.g. \u00a9 = Copyright)
                json_Index = json_Index + 1
                json_Code = VBA.Mid$(json_String, json_Index, 4)
                json_BufferAppend json_buffer, VBA.ChrW(VBA.val("&h" + json_Code)), json_BufferPosition, json_BufferLength
                json_Index = json_Index + 4
            End Select
        Case json_Quote
            json_ParseString = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
            json_Index = json_Index + 1
            Exit Function
        Case Else
            json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
            json_Index = json_Index + 1
        End Select
    Loop
End Function

Private Function json_ParseNumber(json_String As String, ByRef json_Index As Long, Optional json_ConvertLargeNumbersToString As Boolean = True) As Variant
    Dim json_Char As String
    Dim json_Value As String
    
    json_SkipSpaces json_String, json_Index
    
    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)
        
        If VBA.InStr("+-0123456789.eE", json_Char) Then
            ' Unlikely to have massive number, so use simple append rather than buffer here
            json_Value = json_Value & json_Char
            json_Index = json_Index + 1
        Else
            ' Excel only stores 15 significant digits, so any numbers larger than that are truncated
            ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
            ' See: http://support.microsoft.com/kb/269370
            '
            ' Fix: Parse -> String, Convert -> String longer than 15 characters containing only numbers and decimal points -> Number
            If json_ConvertLargeNumbersToString And Len(json_Value) >= 16 Then
                json_ParseNumber = json_Value
            Else
                ' VBA.Val does not use regional settings, so guard for comma is not needed
                json_ParseNumber = VBA.val(json_Value)
            End If
            Exit Function
        End If
    Loop
End Function

Private Function json_ParseKey(json_String As String, ByRef json_Index As Long) As String
    ' Parse key with single or double quotes
    json_ParseKey = json_ParseString(json_String, json_Index)
    
    ' Check for colon and skip if present or throw if not present
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> ":" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting ':'")
    Else
        json_Index = json_Index + 1
    End If
End Function

Private Function json_Encode(ByVal json_Text As Variant) As String
    ' Reference: http://www.ietf.org/rfc/rfc4627.txt
    ' Escape: ", \, /, backspace, form feed, line feed, carriage return, tab
    Dim json_Index As Long
    Dim json_Char As String
    Dim json_AscCode As Long
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    
    For json_Index = 1 To VBA.Len(json_Text)
        json_Char = VBA.Mid$(json_Text, json_Index, 1)
        json_AscCode = VBA.AscW(json_Char)
        
        Select Case json_AscCode
        ' " -> 34 -> \"
        Case 34
            json_Char = "\"""
        ' \ -> 92 -> \\
        Case 92
            json_Char = "\\"
        ' / -> 47 -> \/
        Case 47
            json_Char = "\/"
        ' backspace -> 8 -> \b
        Case 8
            json_Char = "\b"
        ' form feed -> 12 -> \f
        Case 12
            json_Char = "\f"
        ' line feed -> 10 -> \n
        Case 10
            json_Char = "\n"
        ' carriage return -> 13 -> \r
        Case 13
            json_Char = "\r"
        ' tab -> 9 -> \t
        Case 9
            json_Char = "\t"
        ' Non-ascii characters -> convert to 4-digit hex
        Case 0 To 31, 127 To 65535
            json_Char = "\u" & VBA.Right$("0000" & VBA.Hex$(json_AscCode), 4)
        End Select
            
        json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
    Next json_Index
    
    json_Encode = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
End Function

Private Function json_Peek(json_String As String, ByVal json_Index As Long, Optional json_NumberOfCharacters As Long = 1) As String
    ' "Peek" at the next number of characters without incrementing json_Index (ByVal instead of ByRef)
    json_SkipSpaces json_String, json_Index
    json_Peek = VBA.Mid$(json_String, json_Index, json_NumberOfCharacters)
End Function

Private Sub json_SkipSpaces(json_String As String, ByRef json_Index As Long)
    ' Increment index to skip over spaces
    Do While json_Index > 0 And json_Index <= VBA.Len(json_String) And VBA.Mid$(json_String, json_Index, 1) = " "
        json_Index = json_Index + 1
    Loop
End Sub

Private Function json_StringIsLargeNumber(json_String As Variant) As Boolean
    ' Check if the given string is considered a "large number"
    ' (See json_ParseNumber)
    
    Dim json_Length As Long
    Dim json_CharIndex As Long
    json_Length = VBA.Len(json_String)
    
    ' Length with be at least 16 characters and assume will be less than 100 characters
    If json_Length >= 16 And json_Length <= 100 Then
        Dim json_CharCode As String
        Dim json_Index As Long
        
        json_StringIsLargeNumber = True
        
        For json_CharIndex = 1 To json_Length
            json_CharCode = VBA.Asc(VBA.Mid$(json_String, json_CharIndex, 1))
            Select Case json_CharCode
            ' Look for .|0-9|E|e
            Case 46, 48 To 57, 69, 101
                ' Continue through characters
            Case Else
                json_StringIsLargeNumber = False
                Exit Function
            End Select
        Next json_CharIndex
    End If
End Function

Private Function json_ParseErrorMessage(json_String As String, ByRef json_Index As Long, ErrorMessage As String)
    ' Provide detailed parse error message, including details of where and what occurred
    '
    ' Example:
    ' Error parsing JSON:
    ' {"abcde":True}
    '          ^
    ' Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['
    
    Dim json_StartIndex As Long
    Dim json_StopIndex As Long
    
    ' Include 10 characters before and after error (if possible)
    json_StartIndex = json_Index - 10
    json_StopIndex = json_Index + 10
    If json_StartIndex <= 0 Then
        json_StartIndex = 1
    End If
    If json_StopIndex > VBA.Len(json_String) Then
        json_StopIndex = VBA.Len(json_String)
    End If

    json_ParseErrorMessage = "Error parsing JSON:" & VBA.vbNewLine & _
                             VBA.Mid$(json_String, json_StartIndex, json_StopIndex - json_StartIndex + 1) & VBA.vbNewLine & _
                             VBA.Space$(json_Index - json_StartIndex) & "^" & VBA.vbNewLine & _
                             ErrorMessage
End Function

Private Sub json_BufferAppend(ByRef json_buffer As String, _
                              ByRef json_Append As Variant, _
                              ByRef json_BufferPosition As Long, _
                              ByRef json_BufferLength As Long)
#If Mac Then
    json_buffer = json_buffer & json_Append
#Else
    ' VBA can be slow to append strings due to allocating a new string for each append
    ' Instead of using the traditional append, allocate a large empty string and then copy string at append position
    '
    ' Example:
    ' Buffer: "abc  "
    ' Append: "def"
    ' Buffer Position: 3
    ' Buffer Length: 5
    '
    ' Buffer position + Append length > Buffer length -> Append chunk of blank space to buffer
    ' Buffer: "abc       "
    ' Buffer Length: 10
    '
    ' Copy memory for "def" into buffer at position 3 (0-based)
    ' Buffer: "abcdef    "
    '
    ' Approach based on cStringBuilder from vbAccelerator
    ' http://www.vbaccelerator.com/home/VB/Code/Techniques/RunTime_Debug_Tracing/VB6_Tracer_Utility_zip_cStringBuilder_cls.asp

    Dim json_AppendLength As Long
    Dim json_LengthPlusPosition As Long
    
    json_AppendLength = VBA.LenB(json_Append)
    json_LengthPlusPosition = json_AppendLength + json_BufferPosition
    
    If json_LengthPlusPosition > json_BufferLength Then
        ' Appending would overflow buffer, add chunks until buffer is long enough
        Dim json_TemporaryLength As Long
        
        json_TemporaryLength = json_BufferLength
        Do While json_TemporaryLength < json_LengthPlusPosition
            ' Initially, initialize string with 255 characters,
            ' then add large chunks (8192) after that
            '
            ' Size: # Characters x 2 bytes / character
            If json_TemporaryLength = 0 Then
                json_TemporaryLength = json_TemporaryLength + 510
            Else
                json_TemporaryLength = json_TemporaryLength + 16384
            End If
        Loop
        
        json_buffer = json_buffer & VBA.Space$((json_TemporaryLength - json_BufferLength) \ 2)
        json_BufferLength = json_TemporaryLength
    End If
    
    ' Copy memory from append to buffer at buffer position
    json_CopyMemory ByVal json_UnsignedAdd(StrPtr(json_buffer), _
                    json_BufferPosition), _
                    ByVal StrPtr(json_Append), _
                    json_AppendLength
    
    json_BufferPosition = json_BufferPosition + json_AppendLength
#End If
End Sub

Private Function json_BufferToString(ByRef json_buffer As String, ByVal json_BufferPosition As Long, ByVal json_BufferLength As Long) As String
#If Mac Then
    json_BufferToString = json_buffer
#Else
    If json_BufferPosition > 0 Then
        json_BufferToString = VBA.Left$(json_buffer, json_BufferPosition \ 2)
    End If
#End If
End Function

#If VBA7 Then
Private Function json_UnsignedAdd(json_Start As LongPtr, json_Increment As Long) As LongPtr
#Else
Private Function json_UnsignedAdd(json_Start As Long, json_Increment As Long) As Long
#End If

    If json_Start And &H80000000 Then
        json_UnsignedAdd = json_Start + json_Increment
    ElseIf (json_Start Or &H80000000) < -json_Increment Then
        json_UnsignedAdd = json_Start + json_Increment
    Else
        json_UnsignedAdd = (json_Start + &H80000000) + (json_Increment + &H80000000)
    End If
End Function

''
' VBA-UTC v1.0.1
' (c) Tim Hall - https://github.com/VBA-tools/VBA-UtcConverter
'
' UTC/ISO 8601 Converter for VBA
'
' Errors:
' 10011 - UTC parsing error
' 10012 - UTC conversion error
' 10013 - ISO 8601 parsing error
' 10014 - ISO 8601 conversion error
'
' @module UtcConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' (Declarations moved to top)

' ============================================= '
' Public Methods
' ============================================= '

''
' Parse UTC date to local date
'
' @method ParseUtc
' @param {Date} UtcDate
' @return {Date} Local date
' @throws 10011 - UTC parsing error
''
Public Function ParseUtc(utc_UtcDate As Date) As Date
    On Error GoTo utc_ErrorHandling
    
#If Mac Then
    ParseUtc = utc_ConvertDate(utc_UtcDate)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_LocalDate As utc_SYSTEMTIME
    
    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_SystemTimeToTzSpecificLocalTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_UtcDate), utc_LocalDate
    
    ParseUtc = utc_SystemTimeToDate(utc_LocalDate)
#End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10011, "UtcConverter.ParseUtc", "UTC parsing error: " & Err.Number & " - " & Err.Description
End Function

''
' Convert local date to UTC date
'
' @method ConvertToUrc
' @param {Date} utc_LocalDate
' @return {Date} UTC date
' @throws 10012 - UTC conversion error
''
Public Function ConvertToUtc(utc_LocalDate As Date) As Date
    On Error GoTo utc_ErrorHandling
    
#If Mac Then
    ConvertToUtc = utc_ConvertDate(utc_LocalDate, utc_ConvertToUtc:=True)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_UtcDate As utc_SYSTEMTIME
    
    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_TzSpecificLocalTimeToSystemTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_LocalDate), utc_UtcDate
    
    ConvertToUtc = utc_SystemTimeToDate(utc_UtcDate)
#End If
    
    Exit Function
    
utc_ErrorHandling:
    Err.Raise 10012, "UtcConverter.ConvertToUtc", "UTC conversion error: " & Err.Number & " - " & Err.Description
End Function

''
' Parse ISO 8601 date string to local date
'
' @method ParseIso
' @param {Date} utc_IsoString
' @return {Date} Local date
' @throws 10013 - ISO 8601 parsing error
''
Public Function ParseIso(utc_IsoString As String) As Date
    On Error GoTo utc_ErrorHandling
    
    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String
    Dim utc_OffsetIndex As Long
    Dim utc_HasOffset As Boolean
    Dim utc_NegativeOffset As Boolean
    Dim utc_OffsetParts() As String
    Dim utc_Offset As Date
    
    utc_Parts = VBA.Split(utc_IsoString, "T")
    utc_DateParts = VBA.Split(utc_Parts(0), "-")
    ParseIso = VBA.DateSerial(VBA.CInt(utc_DateParts(0)), VBA.CInt(utc_DateParts(1)), VBA.CInt(utc_DateParts(2)))
    
    If UBound(utc_Parts) > 0 Then
        If VBA.InStr(utc_Parts(1), "Z") Then
            utc_TimeParts = VBA.Split(VBA.Replace(utc_Parts(1), "Z", ""), ":")
        Else
            utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "+")
            If utc_OffsetIndex = 0 Then
                utc_NegativeOffset = True
                utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "-")
            End If
            
            If utc_OffsetIndex > 0 Then
                utc_HasOffset = True
                utc_TimeParts = VBA.Split(VBA.Left$(utc_Parts(1), utc_OffsetIndex - 1), ":")
                utc_OffsetParts = VBA.Split(VBA.Right$(utc_Parts(1), Len(utc_Parts(1)) - utc_OffsetIndex), ":")
                
                Select Case UBound(utc_OffsetParts)
                Case 0
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), 0, 0)
                Case 1
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), 0)
                Case 2
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), VBA.CInt(utc_OffsetParts(2)))
                End Select
                
                If utc_NegativeOffset Then: utc_Offset = -utc_Offset
            Else
                utc_TimeParts = VBA.Split(utc_Parts(1), ":")
            End If
        End If
        
        Select Case UBound(utc_TimeParts)
        Case 0
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), 0, 0)
        Case 1
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), 0)
        Case 2
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), VBA.CInt(utc_TimeParts(2)))
        End Select
        
        If utc_HasOffset Then
            ParseIso = ParseIso + utc_Offset
        Else
            ParseIso = ParseUtc(ParseIso)
        End If
    End If
    
    Exit Function
    
utc_ErrorHandling:
    Err.Raise 10013, "UtcConverter.ParseIso", "ISO 8601 parsing error for " & utc_IsoString & ": " & Err.Number & " - " & Err.Description
End Function

''
' Convert local date to ISO 8601 string
'
' @method ConvertToIso
' @param {Date} utc_LocalDate
' @return {Date} ISO 8601 string
' @throws 10014 - ISO 8601 conversion error
''
Public Function ConvertToIso(utc_LocalDate As Date) As String
    On Error GoTo utc_ErrorHandling
    
    ConvertToIso = VBA.Format$(ConvertToUtc(utc_LocalDate), "yyyy-mm-ddTHH:mm:ss.000Z")
    
    Exit Function
    
utc_ErrorHandling:
    Err.Raise 10014, "UtcConverter.ConvertToIso", "ISO 8601 conversion error: " & Err.Number & " - " & Err.Description
End Function

' ============================================= '
' Private Functions
' ============================================= '

#If Mac Then

Private Function utc_ConvertDate(utc_Value As Date, Optional utc_ConvertToUtc As Boolean = False) As Date
    Dim utc_ShellCommand As String
    Dim utc_Result As utc_ShellResult
    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String
    
    If utc_ConvertToUtc Then
        utc_ShellCommand = "date -ur `date -jf '%Y-%m-%d %H:%M:%S' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & "' " & _
            " +'%s'` +'%Y-%m-%d %H:%M:%S'"
    Else
        utc_ShellCommand = "date -jf '%Y-%m-%d %H:%M:%S %z' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & " +0000' " & _
            "+'%Y-%m-%d %H:%M:%S'"
    End If
    
    utc_Result = utc_ExecuteInShell(utc_ShellCommand)
    
    If utc_Result.utc_Output = "" Then
        Err.Raise 10015, "UtcConverter.utc_ConvertDate", "'date' command failed"
    Else
        utc_Parts = Split(utc_Result.utc_Output, " ")
        utc_DateParts = Split(utc_Parts(0), "-")
        utc_TimeParts = Split(utc_Parts(1), ":")
        
        utc_ConvertDate = DateSerial(utc_DateParts(0), utc_DateParts(1), utc_DateParts(2)) + _
            TimeSerial(utc_TimeParts(0), utc_TimeParts(1), utc_TimeParts(2))
    End If
End Function

Private Function utc_ExecuteInShell(utc_ShellCommand As String) As utc_ShellResult
    Dim utc_File As Long
    Dim utc_Chunk As String
    Dim utc_Read As Long
    
    On Error GoTo utc_ErrorHandling
    utc_File = utc_popen(utc_ShellCommand, "r")
    
    If utc_File = 0 Then: Exit Function
    
    Do While utc_feof(utc_File) = 0
        utc_Chunk = VBA.Space$(50)
        utc_Read = utc_fread(utc_Chunk, 1, Len(utc_Chunk) - 1, utc_File)
        If utc_Read > 0 Then
            utc_Chunk = VBA.Left$(utc_Chunk, utc_Read)
            utc_ExecuteInShell.utc_Output = utc_ExecuteInShell.utc_Output & utc_Chunk
        End If
    Loop

utc_ErrorHandling:
    utc_ExecuteInShell.utc_ExitCode = utc_pclose(utc_File)
End Function

#Else

Private Function utc_DateToSystemTime(utc_Value As Date) As utc_SYSTEMTIME
    utc_DateToSystemTime.utc_wYear = VBA.Year(utc_Value)
    utc_DateToSystemTime.utc_wMonth = VBA.Month(utc_Value)
    utc_DateToSystemTime.utc_wDay = VBA.Day(utc_Value)
    utc_DateToSystemTime.utc_wHour = VBA.Hour(utc_Value)
    utc_DateToSystemTime.utc_wMinute = VBA.Minute(utc_Value)
    utc_DateToSystemTime.utc_wSecond = VBA.Second(utc_Value)
    utc_DateToSystemTime.utc_wMilliseconds = 0
End Function

Private Function utc_SystemTimeToDate(utc_Value As utc_SYSTEMTIME) As Date
    utc_SystemTimeToDate = DateSerial(utc_Value.utc_wYear, utc_Value.utc_wMonth, utc_Value.utc_wDay) + _
        TimeSerial(utc_Value.utc_wHour, utc_Value.utc_wMinute, utc_Value.utc_wSecond)
End Function

#End If

''
' AutoProxy 1.0.2
' (c) Damien Thirion
'
' Auto configure proxy server
'
' Based on code shared by Stephen Sulzer
' https://groups.google.com/d/msg/microsoft.public.winhttp/ZeWN2Xig82g/jgHIBDSfBwsJ
'
' Errors:
' 11020 - Unknown error while detecting proxy
' 11021 - WPAD detection failed
' 11022 - Unable to download proxy auto-config script
' 11023 - Error in proxy auto-config script
' 11024 - No proxy can be located for the specified URL
' 11025 - Specified URL is not valid
'
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

''
' Returns IE proxy settings
' including auto-detection and auto-config scripts results
'
' @param {String} Url
' @param[out] {String} ProxyServer
' @param[out] {String} ProxyBypass
''
Public Sub GetAutoProxy(ByVal URL As String, ByRef ProxyServer As String, ByRef ProxyBypass As String)
#If Mac Then
    ' (Windows only)
#ElseIf VBA7 Then
    Dim AutoProxy_ProxyStringPtr As LongPtr
    Dim AutoProxy_ptr As LongPtr
    Dim AutoProxy_hSession As LongPtr
#Else
    Dim AutoProxy_ProxyStringPtr As Long
    Dim AutoProxy_ptr As Long
    Dim AutoProxy_hSession As Long
#End If
#If Mac Then
#Else
    Dim AutoProxy_IEProxyConfig As AUTOPROXY_IE_PROXY_CONFIG
    Dim AutoProxy_AutoProxyOptions As AUTOPROXY_OPTIONS
    Dim AutoProxy_ProxyInfo As AUTOPROXY_INFO
    Dim AutoProxy_doAutoProxy As Boolean
    Dim AutoProxy_Error As Long
    Dim AutoProxy_ErrorMsg As String
    
    AutoProxy_AutoProxyOptions.AutoProxy_fAutoLogonIfChallenged = 1
    ProxyServer = ""
    ProxyBypass = ""
    
    ' WinHttpGetProxyForUrl returns unexpected errors if Url is empty
    If URL = "" Then URL = " "
    
    On Error GoTo AutoProxy_Cleanup
    
    ' Check IE's proxy configuration
    If (AutoProxy_GetIEProxy(AutoProxy_IEProxyConfig) > 0) Then
        ' If IE is configured to auto-detect, then we will too.
        If (AutoProxy_IEProxyConfig.AutoProxy_fAutoDetect <> 0) Then
            AutoProxy_AutoProxyOptions.AutoProxy_dwFlags = AUTOPROXY_AUTO_DETECT
            AutoProxy_AutoProxyOptions.AutoProxy_dwAutoDetectFlags = _
                AUTOPROXY_DETECT_TYPE_DHCP + AUTOPROXY_DETECT_TYPE_DNS
            AutoProxy_doAutoProxy = True
        End If
     
        ' If IE is configured to use an auto-config script, then
        ' we will use it too
        If (AutoProxy_IEProxyConfig.AutoProxy_lpszAutoConfigUrl <> 0) Then
            AutoProxy_AutoProxyOptions.AutoProxy_dwFlags = _
                AutoProxy_AutoProxyOptions.AutoProxy_dwFlags + AUTOPROXY_CONFIG_URL
            AutoProxy_AutoProxyOptions.AutoProxy_lpszAutoConfigUrl = AutoProxy_IEProxyConfig.AutoProxy_lpszAutoConfigUrl
            AutoProxy_doAutoProxy = True
        End If
    Else
        ' If the IE proxy config is not available, then
        ' we will try auto-detection
        AutoProxy_AutoProxyOptions.AutoProxy_dwFlags = AUTOPROXY_AUTO_DETECT
        AutoProxy_AutoProxyOptions.AutoProxy_dwAutoDetectFlags = _
            AUTOPROXY_DETECT_TYPE_DHCP + AUTOPROXY_DETECT_TYPE_DNS
        AutoProxy_doAutoProxy = True
    End If
    
    If AutoProxy_doAutoProxy Then
        On Error GoTo AutoProxy_TryIEFallback
        
        ' Need to create a temporary WinHttp session handle
        ' Note: Performance of this GetProxyInfoForUrl function can be
        '       improved by saving this AutoProxy_hSession handle across calls
        '       instead of creating a new handle each time
        AutoProxy_hSession = AutoProxy_HttpOpen(0, 1, 0, 0, 0)
     
        If (AutoProxy_GetProxyForUrl( _
            AutoProxy_hSession, StrPtr(URL), AutoProxy_AutoProxyOptions, AutoProxy_ProxyInfo) > 0) Then
            
            AutoProxy_ProxyStringPtr = AutoProxy_ProxyInfo.AutoProxy_lpszProxy
        Else
            AutoProxy_Error = Err.LastDllError
            Select Case AutoProxy_Error
            Case 12180
                AutoProxy_ErrorMsg = "WPAD detection failed"
                AutoProxy_Error = 10021
            Case 12167
                AutoProxy_ErrorMsg = "Unable to download proxy auto-config script"
                AutoProxy_Error = 10022
            Case 12166
                AutoProxy_ErrorMsg = "Error in proxy auto-config script"
                AutoProxy_Error = 10023
            Case 12178
                AutoProxy_ErrorMsg = "No proxy can be located for the specified URL"
                AutoProxy_Error = 10024
            Case 12005, 12006
                AutoProxy_ErrorMsg = "Specified URL is not valid"
                AutoProxy_Error = 10025
            Case Else
                AutoProxy_ErrorMsg = "Unknown error while detecting proxy"
                AutoProxy_Error = 10020
            End Select
        End If
     
        AutoProxy_HttpClose AutoProxy_hSession
        AutoProxy_hSession = 0
    End If
    
AutoProxy_TryIEFallback:
    On Error GoTo AutoProxy_Cleanup
       
    ' If we don't have a proxy server from WinHttpGetProxyForUrl,
    ' then pick one up from the IE proxy config (if given)
    If (AutoProxy_ProxyStringPtr = 0) Then
        AutoProxy_ProxyStringPtr = AutoProxy_IEProxyConfig.AutoProxy_lpszProxy
    End If
    
    ' If there's a proxy string, convert it to a Basic string
    If (AutoProxy_ProxyStringPtr <> 0) Then
        AutoProxy_ptr = AutoProxy_SysAllocString(AutoProxy_ProxyStringPtr)
        AutoProxy_CopyMemory VarPtr(ProxyServer), VarPtr(AutoProxy_ptr), 4
    End If
    
    ' Pick up any bypass string from the IEProxyConfig
    If (AutoProxy_IEProxyConfig.AutoProxy_lpszProxyBypass <> 0) Then
        AutoProxy_ptr = AutoProxy_SysAllocString(AutoProxy_IEProxyConfig.AutoProxy_lpszProxyBypass)
        AutoProxy_CopyMemory VarPtr(ProxyBypass), VarPtr(AutoProxy_ptr), 4
    End If
    
    ' Ensure WinHttp session is closed, an error might have occurred
    If (AutoProxy_hSession <> 0) Then
        AutoProxy_HttpClose AutoProxy_hSession
    End If
    
AutoProxy_Cleanup:
    On Error GoTo 0
    
    ' Free any strings received from WinHttp APIs
    If (AutoProxy_IEProxyConfig.AutoProxy_lpszAutoConfigUrl <> 0) Then
        AutoProxy_GlobalFree AutoProxy_IEProxyConfig.AutoProxy_lpszAutoConfigUrl
        AutoProxy_IEProxyConfig.AutoProxy_lpszAutoConfigUrl = 0
    End If
    If (AutoProxy_IEProxyConfig.AutoProxy_lpszProxy <> 0) Then
        AutoProxy_GlobalFree AutoProxy_IEProxyConfig.AutoProxy_lpszProxy
        AutoProxy_IEProxyConfig.AutoProxy_lpszProxy = 0
    End If
    If (AutoProxy_IEProxyConfig.AutoProxy_lpszProxyBypass <> 0) Then
        AutoProxy_GlobalFree AutoProxy_IEProxyConfig.AutoProxy_lpszProxyBypass
        AutoProxy_IEProxyConfig.AutoProxy_lpszProxyBypass = 0
    End If
    If (AutoProxy_ProxyInfo.AutoProxy_lpszProxy <> 0) Then
        AutoProxy_GlobalFree AutoProxy_ProxyInfo.AutoProxy_lpszProxy
        AutoProxy_ProxyInfo.AutoProxy_lpszProxy = 0
    End If
    If (AutoProxy_ProxyInfo.AutoProxy_lpszProxyBypass <> 0) Then
        AutoProxy_GlobalFree AutoProxy_ProxyInfo.AutoProxy_lpszProxyBypass
        AutoProxy_ProxyInfo.AutoProxy_lpszProxyBypass = 0
    End If
    
    ' Error handling
    If Err.Number <> 0 Then
        ' Unmanaged error
        Err.Raise Err.Number, "AutoProxy:" & Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
    ElseIf AutoProxy_Error <> 0 Then
        Err.Raise AutoProxy_Error, "AutoProxy", AutoProxy_ErrorMsg
    End If
#End If
End Sub
Attribute VB_Name = "WebRequest"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' WebRequest v4.0.15
' (c) Tim Hall - https://github.com/VBA-tools/VBA-Web
'
' `WebRequest` is used to create detailed requests
' (including formatting, querystrings, headers, cookies, and much more).
'
' Usage:
' ```VB.net
' Dim Request As New WebRequest
' Request.Resource = "users/{Id}"
'
' Request.Method = WebMethod.HttpPut
' Request.RequestFormat = WebFormat.UrlEncoded
' Request.ResponseFormat = WebFormat.Json
'
' Dim Body As New Dictionary
' Body.Add "name", "Tim"
' Body.Add "project", "VBA-Web"
' Set Request.Body = Body
'
' Request.AddUrlSegment "Id", 123
' Request.AddQuerystringParam "api_key", "abcd"
' Request.AddHeader "Authorization", "Token ..."
'
' ' -> PUT (Client.BaseUrl)users/123?api_key=abcd
' '    Authorization: Token ...
' '
' '    name=Tim&project=VBA-Web
' ```
'
' Errors:
' 11020 / 80042b0c / -2147210484 - Cannot add body parameter to non-Dictionary
'
' @class WebRequest
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' --------------------------------------------- '
' Constants and Private Variables
' --------------------------------------------- '

Private web_pRequestFormat As WebFormat
Private web_pResponseFormat As WebFormat
Private web_pCustomRequestFormat As String
Private web_pCustomResponseFormat As String
Private web_pBody As Variant
Private web_pConvertedBody As String
Private web_pContentType As String
Private web_pAccept As String
Private web_pContentLength As Long
Private web_pId As String

' --------------------------------------------- '
' Properties
' --------------------------------------------- '

''
' Set the request's portion of the url to be appended to the client's BaseUrl.
' Can include Url Segments for dynamic values
' and Querystring parameters are smart enough to be appended to existing querystring
' (or added to resource if there isn't an existing querystring).
'
' @example
' ```VB.net
' Dim Client As New WebClient
' Client.BaseUrl = "https://api.example.com/"
'
' Dim Request As New WebRequest
' Request.Resource = "messages"
'
' ' -> Url: https://api.example.com/messages
'
' Request.Resource = "messages/{id}?a=1"
' Request.AddUrlSegment "id", 123
' Request.AddQuerystringParam "b", 2
'
' ' -> Url: https://api.example.com/messages/123?a=1&b=2
' ```
'
' @property Resource
' @type String
''
Public Resource As String

''
' Set the HTTP method to be used for the request:
' GET, POST, PUT, PATCH, DELETE
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.Method = WebMethod.HttpGet
' Request.Method = WebMethod.HttpPost
' ' or HttpPut / HttpPatch / HttpDelete
' ```
'
' @property Method
' @type WebMethod
''
Public Method As WebMethod

''
' _Note_ To add headers, use [`AddHeader`](#/WebRequest/AddHeader).
'
' `Collection` of Headers to include with request,
' stored as `KeyValue` (`Dictionary: {Key: "...", Value: "..."}`).
'
' @property Headers
' @type Collection
''
Public Headers As Collection

''
' _Note_ To add querystring parameters, use [`AddQuerystringParam`](#/WebRequest/AddQuerystringParam).
'
' `Collection` of querystring parameters to include with request,
' stored as `KeyValue` (`Dictionary: {Key: "...", Value: "..."}`).
'
' @property QuerystringParams
' @type Collection
''
Public QuerystringParams As Collection

''
' _Note_ To add Url Segments, use [`AddUrlSegment`](#/WebRequest/AddUrlSegment)
'
' Url Segments are used to easily add dynamic values to `Resource`.
' Create a Url Segement in `Resource` with curly brackets and then
' replace with dynamic value with [`AddUrlSegment`](#AddUrlSegment).
'
' @example
' ```VB.net
' Dim Request As New WebRequest
'
' Dim User As String
' Dim Id As Long
' User = "Tim"
' Id = 123
'
' ' OK: Use string concatenation for dynamic values
' Request.Resource = User & "/messages/" & Id
'
' ' BETTER: Use Url Segments for dynamic values
' Request.Resource = "{User}/messages/{Id}"
' Request.AddUrlSegment "User", User
' Request.AddUrlSegment "Id", Id
'
' Request.FormattedResource ' = "Tim/messages/123"
' ```
'
' @property UrlSegments
' @type Dictionary
''
Public UrlSegments As Dictionary

''
' _Note_ To add cookies, use [`AddCookie`](#/WebRequest/AddCookie).
'
' `Collection` of cookies to include with request,
' stored as `KeyValue` (`Dictionary: {Key: "...", Value: "..."}`).
'
' @property Cookies
' @type Collection
''
Public Cookies As Collection

''
' Set `RequestFormat`, `ResponseFormat`, and `Content-Type` and `Accept`
' headers for the `WebRequest`
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.Format = WebFormat.Json
' ' -> Request.RequestFormat = WebFormat.Json
' '    Request.ResponseFormat = WebFormat.Json
' '    (Header) Content-Type: application/json
' '    (Header) Accept: application/json
' ```
'
' @property Format
' @type WebFormat
''
Public Property Get Format() As WebFormat
    Format = RequestFormat
End Property
Public Property Let Format(Value As WebFormat)
    Me.RequestFormat = Value
    Me.ResponseFormat = Value
End Property

''
' Set the format to use for converting the response `Body` to string and for the `Content-Type` header
'
' _Note_ If `WebFormat.Custom` is used, the [`CustomRequestFormat`](#/WebRequest/CustomRequestFormat) must be set.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.Body = Array("A", "B", "C")
'
' Request.RequestFormat = WebFormat.Json
'
' ' -> (Header) Content-Type: application/json
' ' -> Convert Body to JSON string
' Request.Body ' = "["A","B","C"]"
' ```
'
' @property RequestFormat
' @type WebFormat
' @default WebFormat.Json
''
Public Property Get RequestFormat() As WebFormat
    RequestFormat = web_pRequestFormat
End Property
Public Property Let RequestFormat(Value As WebFormat)
    If Value <> web_pRequestFormat Then
        web_pRequestFormat = Value
    
        ' Clear cached converted body
        web_pConvertedBody = ""
    End If
End Property

''
' Set the format to use for converting the response `Content` to `Data` and for the `Accept` header
'
' _Note_ If `WebFormat.Custom` is used, the [`CustomResponseFormat`](#/WebRequest/CustomResponseFormat) must be set.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.ResponseFormat = WebFormat.Json
'
' ' -> (Header) Accept: application/json
'
' Dim Response As WebResponse
' ' ... from Execute
' Response.Content = "{""message"":""Howdy!""}"
'
' ' -> Parse Content to JSON Dictionary
' Debug.Print Response.Data("message") ' -> "Howdy!"
' ```
'
' @property ResponseFormat
' @type WebFormat
' @default WebFormat.Json
''
Public Property Get ResponseFormat() As WebFormat
    ResponseFormat = web_pResponseFormat
End Property
Public Property Let ResponseFormat(Value As WebFormat)
    If Value <> web_pResponseFormat Then
        web_pResponseFormat = Value
        
        ' Clear cached converted body
        web_pConvertedBody = ""
    End If
End Property

''
' Use converter registered with [`WebHelpers.RegisterConverter`](#/WebHelpers/RegisterConverter)
' to convert `Body` to string and set `Content-Type` header.
'
' (Automatically sets `RequestFormat` to `WebFormat.Custom`)
'
' @example
' ```VB.net
' WebHelpers.RegisterConverter "csv", "text/csv", "Module.ConvertToCsv", "Module.ParseCsv"
'
' Dim Request As New WebRequest
' Request.CustomRequestFormat = "csv"
'
' ' -> (Header) Content-Type: text/csv
' ' -> Body converted to string with Module.ConvertToCsv
' ```
'
' @property CustomRequestFormat
' @type String
''
Public Property Get CustomRequestFormat() As String
    CustomRequestFormat = web_pCustomRequestFormat
End Property
Public Property Let CustomRequestFormat(Value As String)
    If Value <> web_pCustomRequestFormat Then
        web_pCustomRequestFormat = Value
        
        ' Clear cached converted body
        web_pConvertedBody = ""
        
        If Value <> "" Then
            web_pRequestFormat = WebFormat.Custom
        End If
    End If
End Property

''
' Use converter registered with [`WebHelpers.RegisterConverter`](#/WebHelpers/RegisterConverter)
' to convert the response `Content` to `Data` and set `Accept` header.
'
' (Automatically sets `ResponseFormat` to `WebFormat.Custom`)
'
' @example
' ```VB.net
' WebHelpers.RegisterConverter "csv", "text/csv", "Module.ConvertToCsv", "Module.ParseCsv"
'
' Dim Request As New WebRequest
' Request.CustomResponseFormat = "csv"
'
' ' -> (Header) Accept: text/csv
' ' -> WebResponse Content converted Data with Module.ParseCsv
' ```
'
' @property CustomResponseFormat
' @type String
''
Public Property Get CustomResponseFormat() As String
    CustomResponseFormat = web_pCustomResponseFormat
End Property
Public Property Let CustomResponseFormat(Value As String)
    If Value <> web_pCustomResponseFormat Then
        web_pCustomResponseFormat = Value
        
        ' Clear cached converted body
        web_pConvertedBody = ""
        
        If Value <> "" Then
            ResponseFormat = WebFormat.Custom
        End If
    End If
End Property

''
' Set automatically from `RequestFormat` or `CustomRequestFormat`,
' but can be overriden to set `Content-Type` header for request.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.ContentType = "text/csv"
'
' ' -> (Header) Content-Type: text/csv
' ```
'
' @property ContentType
' @type String
' @default Media-type of request format
''
Public Property Get ContentType() As String
    If web_pContentType <> "" Then
        ContentType = web_pContentType
    Else
        ContentType = WebHelpers.FormatToMediaType(Me.RequestFormat, Me.CustomRequestFormat)
    End If
End Property
Public Property Let ContentType(Value As String)
    web_pContentType = Value
End Property

''
' Set automatically from `ResponseFormat` or `CustomResponseFormat`,
' but can be overriden to set `Accept` header for request.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.Accept = "text/csv"
'
' ' -> (Header) Accept: text/csv
' ```
'
' @property Accept
' @type String
' @default Media-type of response format
''
Public Property Get Accept() As String
    If web_pAccept <> "" Then
        Accept = web_pAccept
    Else
        Accept = WebHelpers.FormatToMediaType(Me.ResponseFormat, Me.CustomResponseFormat)
    End If
End Property
Public Property Let Accept(Value As String)
    web_pAccept = Value
End Property

''
' Set automatically by length of `Body`,
' but can be overriden to set `Content-Length` header for request.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.ContentLength = 200
'
' ' -> (Header) Content-Length: 200
' ```
'
' @property ContentLength
' @type Long
' @default Length of `Body`
''
Public Property Get ContentLength() As Long
    If web_pContentLength >= 0 Then
        ContentLength = web_pContentLength
    Else
        ContentLength = Len(Me.Body)
    End If
End Property
Public Property Let ContentLength(Value As Long)
    web_pContentLength = Value
End Property

''
' - Get: Body value converted to string using `RequestFormat` or `CustomRequestFormat`
' - Let: Use `String` or `Array` for Body
' - Set: Use `Collection`, `Dictionary`, or `Object` for Body
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.RequestFormat = WebFormat.Json
'
' ' Let: String|Array
' Request.Body = "text"
' Debug.Print Request.Body ' -> "text"
'
' Request.Body = Array("A", "B", "C")
' Debug.Print Request.Body ' -> "["A","B","C"]"
'
' ' Set: Collection|Dictionary|Object
' Dim Body As Object
' Set Body = New Collection
' Body.Add "Howdy!"
' Set Request.Body = Body
' Debug.Print Request.Body ' -> "["Howdy!"]"
'
' Set Body = New Dictionary
' Body.Add "a", 123
' Body.Add "b", 456
' Set Request.Body = Body
' Debug.Print Request.Body ' -> "{"a":123,"b":456}"
' ```
'
' @property Body
' @type String|Array|Collection|Dictionary|Variant
''
Public Property Get Body() As Variant
    If Not VBA.IsEmpty(web_pBody) Then
        If VBA.VarType(web_pBody) = vbString Then
            Body = web_pBody
        ElseIf web_pConvertedBody = "" Then
            ' Convert body and cache
            Body = WebHelpers.ConvertToFormat(web_pBody, Me.RequestFormat, Me.CustomRequestFormat)
            web_pConvertedBody = Body
        Else
            Body = web_pConvertedBody
        End If
    End If
End Property
Public Property Let Body(Value As Variant)
    web_pConvertedBody = ""
    web_pBody = Value
End Property
Public Property Set Body(Value As Variant)
    web_pConvertedBody = ""
    Set web_pBody = Value
End Property

''
' Get `Resource` with Url Segments replaced and Querystring added.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.Resource = "examples/{Id}"
' Request.AddUrlSegment "Id", 123
' Request.AddQuerystringParam "message", "Hello"
'
' Debug.Print Request.FormattedResource ' -> "examples/123?message=Hello"
' ```
'
' @property FormattedResource
' @type String
''
Public Property Get FormattedResource() As String
    Dim web_Segment As Variant
    
    FormattedResource = Me.Resource
    
    ' Replace url segments
    For Each web_Segment In Me.UrlSegments.Keys
        FormattedResource = VBA.Replace(FormattedResource, "{" & web_Segment & "}", WebHelpers.UrlEncode(Me.UrlSegments(web_Segment)))
    Next web_Segment
    
    ' Add querystring
    If Me.QuerystringParams.Count > 0 Then
        If VBA.InStr(FormattedResource, "?") <= 0 Then
            FormattedResource = FormattedResource & "?"
        Else
            FormattedResource = FormattedResource & "&"
        End If
        
        FormattedResource = FormattedResource & WebHelpers.ConvertToUrlEncoded(Me.QuerystringParams)
    End If
End Property

''
' @internal
' @property Id
' @type String
''
Public Property Get Id() As String
    If web_pId = "" Then: web_pId = WebHelpers.CreateNonce
    Id = web_pId
End Property

' ============================================= '
' Public Methods
' ============================================= '

''
' Add header to be sent with request.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.AddHeader "Authentication", "Bearer ..."
'
' ' -> (Header) Authorization: Bearer ...
' ```
'
' @method AddHeader
' @param {String} Key
' @param {Variant} Value
''
Public Sub AddHeader(Key As String, Value As Variant)
    Me.Headers.Add WebHelpers.CreateKeyValue(Key, Value)
End Sub

''
' Add/replace header to be sent with request.
' `SetHeader` should be used for headers that can only be included once with a request
' (e.g. Authorization, Content-Type, etc.).
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.AddHeader "Authorization", "A..."
' Request.AddHeader "Authorization", "B..."
'
' ' -> Headers:
' '    Authorization: A...
' '    Authorization: B...
'
' Request.SetHeader "Authorization", "C..."
'
' ' -> Headers:
' '    Authorization: C...
' ```
'
' @method SetHeader
' @param {String} Key
' @param {Variant} Value
''
Public Sub SetHeader(Key As String, Value As Variant)
    WebHelpers.AddOrReplaceInKeyValues Me.Headers, Key, Value
End Sub

''
' Url Segments are used to easily add dynamic values to `Resource`.
' Create a Url Segement in `Resource` with curly brackets and then
' replace with dynamic value with `AddUrlSegment`.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Dim User As String
' Dim Id As Long
'
' User = "Tim"
' Id = 123
'
' ' OK: Use string concatenation for dynamic values
' Request.Resource = User & "/messages/" & Id
'
' ' BETTER: Use Url Segments for dynamic values
' Request.Resource = "{User}/messages/{Id}"
' Request.AddUrlSegment "User", User
' Request.AddUrlSegment "Id", Id
'
' Debug.Print Request.FormattedResource ' > "Tim/messages/123"
' ```
'
' @method AddUrlSegment
' @param {String} Key
' @param {String} Value
''
Public Sub AddUrlSegment(Segment As String, Value As Variant)
    Me.UrlSegments.Item(Segment) = Value
End Sub

''
' Add querysting parameter to be used in `FormattedResource` for request.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.Resource = "messages"
' Request.AddQuerystringParam "from", "Tim"
'
' Request.FormattedResource ' = "messages?from=Tim"
' ```
'
' @method AddQuerystringParam
' @param {String} Key
' @param {Variant} Value
''
Public Sub AddQuerystringParam(Key As String, Value As Variant)
    Me.QuerystringParams.Add WebHelpers.CreateKeyValue(Key, Value)
End Sub

''
' Add cookie to be sent with request.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.AddCookie "a", "abc"
' Request.AddCookie "b", 123
'
' ' -> (Header) Cookie: a=abc; b=123;
' ```
'
' @method AddCookie
' @param {String} Key
' @param {Variant} Value
''
Public Sub AddCookie(Key As String, Value As Variant)
    Me.Cookies.Add WebHelpers.CreateKeyValue(Key, Value)
End Sub

''
' Add `Key-Value` to `Body`.
' `Body` must be a `Dictionary` (if it's an `Array` or `Collection` an error is thrown)
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.Format = WebFormat.Json
'
' Request.AddBodyParameter "a", 123
' Debug.Print Request.Body ' -> "{"a":123}"
'
' ' Can add parameters to existing Dictionary
' Dim Body As New Dictionary
' Body.Add "a", 123
'
' Set Request.Body = Body
' Request.AddBodyParameter "b", 456
'
' Debug.Print Request.Body ' -> "{"a":123,"b":456}"
' ```
'
' @method AddBodyParameter
' @param {Variant} Key
' @param {Variant} Value
' @throws 11020 / 80042b0c / -2147210484 - Cannot add body parameter to non-Dictionary
''
Public Sub AddBodyParameter(Key As Variant, Value As Variant)
    If VBA.IsEmpty(web_pBody) Then
        Set web_pBody = New Dictionary
    ElseIf Not TypeOf web_pBody Is Dictionary Then
        Dim web_ErrorDescription As String
        web_ErrorDescription = "Cannot add body parameter to non-Dictionary Body (existing Body must be of type Dictionary)"
    
        WebHelpers.LogError web_ErrorDescription, "WebRequest.AddBodyParameter", 11020 + vbObjectError
        Err.Raise 11020 + vbObjectError, "WebRequest.AddBodyParameter", web_ErrorDescription
    End If
    
    If VBA.IsObject(Value) Then
        Set web_pBody(Key) = Value
    Else
        web_pBody(Key) = Value
    End If

    ' Clear cached converted body
    web_pConvertedBody = ""
End Sub

''
' Prepare request for execution
'
' @internal
' @method Prepare
''
Public Sub Prepare()
    ' Add/replace general headers for request
    SetHeader "User-Agent", WebUserAgent
    SetHeader "Content-Type", Me.ContentType
    SetHeader "Accept", Me.Accept
    SetHeader "Content-Length", VBA.CStr(Me.ContentLength)
End Sub

''
' Clone request
'
' @internal
' @method Clone
' @return {WebRequest}
''
Public Function Clone() As WebRequest
    Set Clone = New WebRequest
    
    ' Note: Clone underlying for properties with default values
    Clone.Resource = Me.Resource
    Clone.Method = Me.Method
    Clone.Accept = web_pAccept
    Clone.ContentType = web_pContentType
    Clone.ContentLength = web_pContentLength
    Clone.RequestFormat = Me.RequestFormat
    Clone.ResponseFormat = Me.ResponseFormat
    Clone.CustomRequestFormat = Me.CustomRequestFormat
    Clone.CustomResponseFormat = Me.CustomResponseFormat
    
    Set Clone.Headers = WebHelpers.CloneCollection(Me.Headers)
    Set Clone.QuerystringParams = WebHelpers.CloneCollection(Me.QuerystringParams)
    Set Clone.UrlSegments = WebHelpers.CloneDictionary(Me.UrlSegments)
    Set Clone.Cookies = WebHelpers.CloneCollection(Me.Cookies)
    
    If VBA.IsObject(web_pBody) Then
        Set Clone.Body = web_pBody
    Else
        Clone.Body = web_pBody
    End If
End Function

''
' Create WebRequest from options
'
' @method CreateFromOptions
' @param {Dictionary} Options
' @param {Collection} [Options.Headers] Collection of `KeyValue`
' @param {Collection} [Options.Cookies] Collection of `KeyValue`
' @param {Collection} [Options.QuerystringParams] Collection of `KeyValue`
' @param {Dictionary} [Options.UrlSegments]
''
Public Sub CreateFromOptions(Options As Dictionary)
    If Not Options Is Nothing Then
        If Options.Exists("Headers") Then
            Set Me.Headers = Options("Headers")
        End If
        If Options.Exists("Cookies") Then
            Set Me.Cookies = Options("Cookies")
        End If
        If Options.Exists("QuerystringParams") Then
            Set Me.QuerystringParams = Options("QuerystringParams")
        End If
        If Options.Exists("UrlSegments") Then
            Set Me.UrlSegments = Options("UrlSegments")
        End If
    End If
End Sub

' ============================================= '
' Private Functions
' ============================================= '

Private Sub Class_Initialize()
    ' Set default values
    Me.RequestFormat = WebFormat.Json
    Me.ResponseFormat = WebFormat.Json
    
    Set Me.Headers = New Collection
    Set Me.QuerystringParams = New Collection
    Set Me.UrlSegments = New Dictionary
    Set Me.Cookies = New Collection
    Me.ContentLength = -1
End Sub
Attribute VB_Name = "WebResponse"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' WebResponse v4.0.15
' (c) Tim Hall - https://github.com/VBA-tools/VBA-Web
'
' Wrapper for http/cURL responses that includes parsed Data based on WebRequest.ResponseFormat.
'
' Usage:
' ```VB.net
' Dim Response As WebResponse
' Set Response = Client.Execute(Request)
'
' If Response.StatusCode = WebStatusCode.Ok Then
'   ' Response.Headers, Response.Cookies
'   ' Response.Data -> Parsed Response.Content based on Request.ResponseFormat
'   ' Response.Body -> Raw response bytes
' Else
'   Debug.Print "Error: " & Response.StatusCode & " - " & Response.Content
' End If
' ```
'
' Errors:
' 11030 / 80042b16 / -2147210474 - Error creating from http
' 11031 / 80042b17 / -2147210473 - Error creating from cURL
' 11032 / 80042b18 / -2147210472 - Error extracting headers
'
' @class WebResponse
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' --------------------------------------------- '
' Properties
' --------------------------------------------- '

''
' Status code that the server returned (e.g. 200).
'
' @property StatusCode
' @type WebStatusCode
''
Public StatusCode As WebStatusCode

''
' Status string that the server returned (e.g. `404 -> "Not Found"`)
'
' @property StatusDescription
' @type String
''
Public StatusDescription As String

''
' Content string that the server returned.
'
' @property Content
' @type String
''
Public Content As String

''
' Raw bytes for the response.
'
' @property Body
' @type Byte()
''
Public Body As Variant

''
' Parsed `Content` or `Body` based on the `WebRequest.ResponseFormat`.
'
' @property Data
' @type Dictionary|Collection
''
Public Data As Object

''
' Headers that were included with the response.
' (`Collection` of `KeyValue`)
'
' @property Headers
' @type Collection
''
Public Headers As Collection

''
' Cookies that were included with the response.
' (`Collection` of `KeyValue`)
'
' @property Cookies
' @type Collection
''
Public Cookies As Collection

' ============================================= '
' Public Methods
' ============================================= '

''
' Helper for updating the response with the given updated response values.
' Useful for `ByRef` cases to update response in place.
'
' @method Update
' @param Updated {WebResponse} Updated `WebResponse` to pull updated values from
''
Public Sub Update(Updated As WebResponse)
    Me.StatusCode = Updated.StatusCode
    Me.StatusDescription = Updated.StatusDescription
    Me.Content = Updated.Content
    Me.Body = Updated.Body
    Set Me.Headers = Updated.Headers
    Set Me.Cookies = Updated.Cookies
    Set Me.Data = Updated.Data
End Sub

''
' Create response from http
'
' @internal
' @method CreateFromHttp
' @param {WebClient} Client
' @param {WebRequest} Request
' @param {WinHttpRequest} Http
' @throws 11030 / 80042b16 / -2147210474 - Error creating from http
''
Public Sub CreateFromHttp(Client As WebClient, request As WebRequest, Http As Object)
    On Error GoTo web_ErrorHandling
    
    Me.StatusCode = Http.status
    Me.StatusDescription = Http.StatusText
    Me.Content = Http.responseText
    Me.Body = Http.ResponseBody
    
    web_LoadValues Http.GetAllResponseHeaders, Me.Content, Me.Body, request
    
    Exit Sub

web_ErrorHandling:

    Dim web_ErrorDescription As String
    web_ErrorDescription = "An error occurred while creating response from http" & vbNewLine & _
        Err.Number & VBA.IIf(Err.Number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.Number)) & ")", "") & ": " & Err.Description

    WebHelpers.LogError web_ErrorDescription, "WebResponse.CreateFromHttp", 11030 + vbObjectError
    Err.Raise 11030 + vbObjectError, "WebResponse.CreateFromHttp", web_ErrorDescription
End Sub

''
' Create response from cURL
'
' @internal
' @method CreateFromCurl
' @param {WebClient} Client
' @param {WebRequest} Request
' @param {String} Result
' @throws 11031 / 80042b17 / -2147210473 - Error creating from cURL
''
Public Sub CreateFromCurl(Client As WebClient, request As WebRequest, result As String)
    On Error GoTo web_ErrorHandling
    
    Dim web_Lines() As String
    
    web_Lines = VBA.Split(result, vbCrLf)
    
    Me.StatusCode = web_ExtractStatusFromCurlResponse(web_Lines)
    Me.StatusDescription = web_ExtractStatusTextFromCurlResponse(web_Lines)
    Me.Content = web_ExtractResponseTextFromCurlResponse(web_Lines)
    Me.Body = WebHelpers.StringToAnsiBytes(Me.Content)
    
    web_LoadValues web_ExtractHeadersFromCurlResponse(web_Lines), Me.Content, Me.Body, request
    
    Exit Sub
    
web_ErrorHandling:
    
    Dim web_ErrorDescription As String
    web_ErrorDescription = "An error occurred while creating response from cURL" & vbNewLine & _
        Err.Number & VBA.IIf(Err.Number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.Number)) & ")", "") & ": " & Err.Description
    
    WebHelpers.LogError web_ErrorDescription, "WebResponse.CreateFromCurl", 11031 + vbObjectError
    Err.Raise 11031 + vbObjectError, "WebResponse.CreateFromCurl", web_ErrorDescription
End Sub

''
' Extract headers from response headers
'
' @internal
' @method ExtractHeaders
' @param {String} ResponseHeaders
' @return {Collection} Headers
' @throws 11032 / 80042b18 / -2147210472 - Error extracting headers
''
Public Function ExtractHeaders(ResponseHeaders As String) As Collection
    On Error GoTo web_ErrorHandling
    
    Dim web_Lines As Variant
    Dim web_i As Integer
    Dim web_Headers As New Collection
    Dim web_Header As Dictionary
    Dim web_ColonPosition As Long
    Dim web_Multiline As Boolean
    
    web_Lines = VBA.Split(ResponseHeaders, vbCrLf)
    
    For web_i = LBound(web_Lines) To (UBound(web_Lines) + 1)
        If web_i > UBound(web_Lines) Then
            web_Headers.Add web_Header
        ElseIf web_Lines(web_i) <> "" Then
            web_ColonPosition = VBA.InStr(1, web_Lines(web_i), ":")
            If web_ColonPosition = 0 And Not web_Header Is Nothing Then
                ' Assume part of multi-line header
                web_Multiline = True
            ElseIf web_Multiline Then
                ' Close out multi-line string
                web_Multiline = False
                web_Headers.Add web_Header
            ElseIf Not web_Header Is Nothing Then
                ' Add previous header
                web_Headers.Add web_Header
            End If
            
            If Not web_Multiline Then
                Set web_Header = WebHelpers.CreateKeyValue( _
                    Key:=VBA.Trim(VBA.Mid$(web_Lines(web_i), 1, web_ColonPosition - 1)), _
                    Value:=VBA.Trim(VBA.Mid$(web_Lines(web_i), web_ColonPosition + 1, VBA.Len(web_Lines(web_i)))) _
                )
            Else
                web_Header("Value") = web_Header("Value") & vbCrLf & web_Lines(web_i)
            End If
        End If
    Next web_i
    
    Set ExtractHeaders = web_Headers
    Exit Function
    
web_ErrorHandling:
    
    Dim web_ErrorDescription As String
    web_ErrorDescription = "An error occurred while extracting headers" & vbNewLine & _
        Err.Number & VBA.IIf(Err.Number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.Number)) & ")", "") & ": " & Err.Description
    
    WebHelpers.LogError web_ErrorDescription, "WebResponse.CreateFromCurl", 11032 + vbObjectError
    Err.Raise 11032 + vbObjectError, "WebResponse.CreateFromCurl", web_ErrorDescription
End Function

''
' Extract cookies from response headers
'
' @internal
' @method ExtractCookies
' @param {Collection} Headers
' @return {Collection} Cookies
''
Public Function ExtractCookies(Headers As Collection) As Collection
    Dim web_Header As Dictionary
    Dim web_Cookie As String
    Dim web_Key As String
    Dim web_Value As String
    Dim web_Cookies As New Collection
    
    For Each web_Header In Headers
        If web_Header("Key") = "Set-Cookie" Then
            web_Cookie = web_Header("Value")
            If VBA.InStr(1, web_Cookie, "=") > 0 Then
                web_Key = VBA.Mid$(web_Cookie, 1, VBA.InStr(1, web_Cookie, "=") - 1)
                web_Value = VBA.Mid$(web_Cookie, VBA.InStr(1, web_Cookie, "=") + 1, VBA.Len(web_Cookie))
                
                ' Ignore text after semi-colon
                If VBA.InStr(1, web_Value, ";") > 0 Then
                    web_Value = VBA.Mid$(web_Value, 1, VBA.InStr(1, web_Value, ";") - 1)
                End If
                
                ' Ignore surrounding quotes
                If VBA.Left$(web_Value, 1) = """" Then
                    web_Value = VBA.Mid$(web_Value, 2, VBA.Len(web_Value) - 2)
                End If
                
                web_Cookies.Add WebHelpers.CreateKeyValue(web_Key, WebHelpers.UrlDecode(web_Value, PlusAsSpace:=False))
            Else
                WebHelpers.LogWarning _
                    "Unrecognized cookie format: " & web_Cookie, "WebResponse.ExtractCookies"
            End If
        End If
    Next web_Header
    
    Set ExtractCookies = web_Cookies
End Function

' ============================================= '
' Private Functions
' ============================================= '

Private Sub web_LoadValues(web_Headers As String, web_Content As String, web_Body As Variant, web_Request As WebRequest)
    ' Convert content to data by format
    If web_Request.ResponseFormat <> WebFormat.PlainText Then
        On Error Resume Next
        Set Me.Data = _
            WebHelpers.ParseByFormat(web_Content, web_Request.ResponseFormat, web_Request.CustomResponseFormat, web_Body)
        
        If Err.Number <> 0 Then
            WebHelpers.LogError Err.Description, Err.Source, Err.Number
            Err.Clear
        End If
        On Error GoTo 0
    End If
    
    ' Extract headers
    Set Me.Headers = ExtractHeaders(web_Headers)
    
    ' Extract cookies
    Set Me.Cookies = ExtractCookies(Me.Headers)
End Sub

Private Function web_ExtractStatusFromCurlResponse(web_CurlResponseLines() As String) As Long
    Dim web_StatusLineParts() As String
    
    web_StatusLineParts = VBA.Split(web_CurlResponseLines(web_FindStatusLine(web_CurlResponseLines)), " ")
    web_ExtractStatusFromCurlResponse = VBA.CLng(web_StatusLineParts(1))
End Function

Private Function web_ExtractStatusTextFromCurlResponse(web_CurlResponseLines() As String) As String
    Dim web_StatusLineParts() As String
    Dim web_i As Long
    Dim web_StatusText As String
    
    web_StatusLineParts = VBA.Split(web_CurlResponseLines(web_FindStatusLine(web_CurlResponseLines)), " ", 3)
    web_ExtractStatusTextFromCurlResponse = web_StatusLineParts(2)
End Function

Private Function web_ExtractHeadersFromCurlResponse(web_CurlResponseLines() As String) As String
    Dim web_StatusLineIndex As Long
    Dim web_BlankLineIndex As Long
    Dim web_HeaderLines() As String
    Dim web_WriteIndex As Long
    Dim web_ReadIndex As Long
    
    ' Find status line and blank line before body
    web_StatusLineIndex = web_FindStatusLine(web_CurlResponseLines)
    web_BlankLineIndex = web_FindBlankLine(web_CurlResponseLines)
    
    ' Extract headers string
    ReDim web_HeaderLines(0 To web_BlankLineIndex - 2 - web_StatusLineIndex)
    
    web_WriteIndex = 0
    For web_ReadIndex = (web_StatusLineIndex + 1) To web_BlankLineIndex - 1
        web_HeaderLines(web_WriteIndex) = web_CurlResponseLines(web_ReadIndex)
        web_WriteIndex = web_WriteIndex + 1
    Next web_ReadIndex
    
    web_ExtractHeadersFromCurlResponse = VBA.Join$(web_HeaderLines, vbCrLf)
End Function

Private Function web_ExtractResponseTextFromCurlResponse(web_CurlResponseLines() As String) As String
    Dim web_BlankLineIndex As Long
    Dim web_BodyLines() As String
    Dim web_WriteIndex As Long
    Dim web_ReadIndex As Long
    
    ' Find blank line before body
    web_BlankLineIndex = web_FindBlankLine(web_CurlResponseLines)
    
    ' Extract body string
    ReDim web_BodyLines(0 To UBound(web_CurlResponseLines) - web_BlankLineIndex - 1)
    
    web_WriteIndex = 0
    For web_ReadIndex = web_BlankLineIndex + 1 To UBound(web_CurlResponseLines)
        web_BodyLines(web_WriteIndex) = web_CurlResponseLines(web_ReadIndex)
        web_WriteIndex = web_WriteIndex + 1
    Next web_ReadIndex
    
    web_ExtractResponseTextFromCurlResponse = VBA.Join$(web_BodyLines, vbCrLf)
End Function

Private Function web_FindStatusLine(web_CurlResponseLines() As String) As Long
    If VBA.Split(web_CurlResponseLines(0), " ")(1) = "100" Then
        ' Special case for cURL: 100 Continue is included before final status code
        ' -> ignore 100 and find final status code (next non-blank line)
        For web_FindStatusLine = 1 To UBound(web_CurlResponseLines)
            If VBA.Trim$(web_CurlResponseLines(web_FindStatusLine)) <> "" Then
                Exit Function
            End If
        Next web_FindStatusLine
    Else
        web_FindStatusLine = 0
    End If
End Function

Private Function web_FindBlankLine(web_CurlResponseLines() As String) As Long
    For web_FindBlankLine = (web_FindStatusLine(web_CurlResponseLines) + 1) To UBound(web_CurlResponseLines)
        If VBA.Trim$(web_CurlResponseLines(web_FindBlankLine)) = "" Then
            Exit Function
        End If
    Next web_FindBlankLine
End Function

Private Sub Class_Initialize()
    Set Headers = New Collection
    Set Cookies = New Collection
End Sub

' InQuest injected base64 decoded content
' K+-zd
' I4T	2
' zw(v)

INQUEST-PP=macro
