Attribute VB_Name = "Module1"
' Modified by HuhongYu in 2019/2/21
' changes: use different path to find sheet
' usage notice : 1)All other Excel files MUST to be closed before operation.
'                2)The absolute path and relative path of the file is correct.
'
'
Sub Pre_vs_post_correlate()
   Dim rn As Integer
   Dim cn As Integer
   'Dim rn1 As Integer
   Dim arr1()
   Dim s As New Collection
   Dim l As New Collection
   Dim y As New Collection
   Dim s1 As New Collection
   Dim s2 As New Collection
   Dim s3 As New Collection
   
   Dim dict1 As Object
   Set dict1 = CreateObject("Scripting.Dictionary")
   Dim dict2 As Object
   Set dict2 = CreateObject("Scripting.Dictionary")
   Dim dict3 As Object
   Set dict3 = CreateObject("Scripting.Dictionary")
   Dim dict4 As Object
   Set dict4 = CreateObject("Scripting.Dictionary")
   Dim dict5 As Object
   Set dict5 = CreateObject("Scripting.Dictionary")
   Dim dict6 As Object
   Set dict6 = CreateObject("Scripting.Dictionary")
   Dim dict7 As Object
   Set dict7 = CreateObject("Scripting.Dictionary")
   
   
   
   'test by huhongyu
    Dim SrcexlApp As Excel.Application         'creat SrcexlApp object
    Set SrcexlApp = New Excel.Application      'creat SrcexlApp
    SrcexlApp.Visible = False                  'excelApplilcaionis visable or not
    
    Dim DstexlApp As Excel.Application         'creat DstexlApp object
    Set DstexlApp = New Excel.Application      'creat DstexlApp
    DstexlApp.Visible = False                  'excelApplilcaionis visable or not

    Dim SrcExlBook As New Excel.Workbook       'creat SrcExlBook object
    Dim DstExlBook As New Excel.Workbook       'creat DstExlBook object
    
    Dim CurSrcSheet As New Excel.Worksheet     'creat a CurSrcSheet as a interface
    Dim CurDstSheet As New Excel.Worksheet     'creat a CurDstSheet as a interface

    SrcexlApp.DisplayAlerts = False
    DstexlApp.DisplayAlerts = False
    
    IsSrcExlBookOpen = False                   'judging a Src Excel book is open or not
    DstExlBookOpen = False                     'judging a Dst Excel book is open or not
    
   rn = Sheets("VBA_Macro_Settings").UsedRange.Rows.Count
   'MsgBox ThisWorkbook.Path
   'MsgBox rn
   For uu = 3 To rn
      src_sheetname_value = Trim(Sheets("VBA_Macro_Settings").Cells(uu, 1))          'get information from VBA-Macro sheet
      src_keycolumn_value = Trim(Sheets("VBA_Macro_Settings").Cells(uu, 2))
      src_valuecolumn_value = Trim(Sheets("VBA_Macro_Settings").Cells(uu, 3))
      dst_sheetname_value = Trim(Sheets("VBA_Macro_Settings").Cells(uu, 4))
      dst_keycolumn_value = Trim(Sheets("VBA_Macro_Settings").Cells(uu, 5))
      dst_valuecolumn_value = Trim(Sheets("VBA_Macro_Settings").Cells(uu, 6))
      braket_column_value = Trim(Sheets("VBA_Macro_Settings").Cells(uu, 7))
      comment_column_value = Trim(Sheets("VBA_Macro_Settings").Cells(uu, 8))
      blank_column_value = Trim(Sheets("VBA_Macro_Settings").Cells(uu, 9))
      
                     '''''''''''''''''get CurSrcSheet'''''''''''''''''
      If src_sheetname_value <> "" Then
         If InStr(src_sheetname_value, "->") Then                         'file with path
            src_sheetname_path = Split(src_sheetname_value, "->")(0)
            src_sheetname = Split(src_sheetname_value, "->")(1)
            temp1 = Split(src_sheetname_path, "\")
            Src_workbook_name = temp1(UBound(temp1))
           If InStr(src_sheetname_value, ":") Then                        'absolute path
              IsSrcExlBookOpen = True
              Set SrcExlBook = SrcexlApp.Workbooks.Open(src_sheetname_path)
              Set CurSrcSheet = SrcExlBook.Worksheets(src_sheetname)
           Else                                                           'Relative path
            'MsgBox "Relative path"
             IsSrcExlBookOpen = True
             Set SrcExlBook = SrcexlApp.Workbooks.Open(ThisWorkbook.Path & "\" & src_sheetname_path)
             Set CurSrcSheet = SrcExlBook.Worksheets(src_sheetname)
           End If
        Else
         Set CurSrcSheet = Sheets(src_sheetname_value)
         
        End If
      Else
         src_sheetname_path = ""
         Src_workbook_name = ""
      End If
      
    ''''''''''''''''''''''''''get CurDstSheet'''''''''''''''''''''
    If src_sheetname_value = dst_sheetname_value And src_sheetname_value <> "" Then    'This judgement is necessary ,because same file can be only open just once
      Set CurDstSheet = CurSrcSheet
    Else
      If dst_sheetname_value <> "" Then
         If InStr(dst_sheetname_value, "->") Then                           'file with path
           dst_sheetname_path = Split(dst_sheetname_value, "->")(0)
           dst_sheetname = Split(dst_sheetname_value, "->")(1)
           temp2 = Split(dst_sheetname_path, "\")
           dst_workbook_name = temp2(UBound(temp2))
           If Src_workbook_name = dst_workbook_name And src_sheetname_path = dst_sheetname_path Then
             Set CurDstSheet = SrcExlBook.Worksheets(dst_sheetname)
           Else
             If InStr(dst_sheetname_value, ":") Then                           'absolute path
               DstExlBookOpen = True
               Set DstExlBook = DstexlApp.Workbooks.Open(dst_sheetname_path)
               Set CurDstSheet = DstExlBook.Worksheets(dst_sheetname)
             Else                                       'Relative path
               DstExlBookOpen = True
               Set DstExlBook = DstexlApp.Workbooks.Open(ThisWorkbook.Path & "\" & dst_sheetname_path)
               Set CurDstSheet = DstExlBook.Worksheets(dst_sheetname)
             End If
           End If
         Else
           Set CurDstSheet = Sheets(dst_sheetname_value)
         End If
       Else
         dst_sheetname_path = ""
         dst_workbook_name = ""
     End If
    End If
    
    ''''''''''''''''''''''''''''''''the following is functional code''''''''''''''''''''''''''''''''''''''''''''
    ' CurSrcSheet is interface replacing all "Sheets(src_sheetname_value)"
    ' CurDstSheet is interface replacing all "Sheets(dst_sheetname_value)"
    '
      'MsgBox src_sheetname_value
    If src_sheetname_value <> "" And src_keycolumn_value <> "" And src_valuecolumn_value <> "" And dst_sheetname_value <> "" And dst_keycolumn_value <> "" And dst_valuecolumn_value <> "" Then
        ''''''''''''''''''use <CurSrcSheet> replace all <Sheets"src_sheetname_value">
         'rn1  = CurSrcSheet.UsedRange.Rows.Count
         'MsgBox rn1
         'MsgBox "run to here"
         Rng1 = CurSrcSheet.Range(src_keycolumn_value & "1048576").End(xlUp).Row
         rng2 = CurSrcSheet.Range(src_valuecolumn_value & "1048576").End(xlUp).Row
         rn1 = Application.Max(Rng1, rng2)
         
         'rn1 is src maxline
         Dim arr2() As String
         ReDim arr2(rn1)     'transfor interger rn1 to string
         
         ' Put the keyvalue into y Collection
                
         For k = 1 To rn1
            If Not IsError(CurSrcSheet.Cells(k, src_keycolumn_value)) Then
                If Not IsError(CurSrcSheet.Cells(k, src_valuecolumn_value)) Then
                    value_name = Trim(CurSrcSheet.Cells(k, src_valuecolumn_value))
                Else
                    value_name = "#value!"
                End If
                If Not CurSrcSheet.Rows(k).EntireRow.Hidden = True Then
                
                    If braket_column_value = "Y" Then
                        key_name = Trim(CurSrcSheet.Cells(k, src_keycolumn_value))
                        If InStr(key_name, "(") > 0 Then
                            a1 = Split(key_name, "(")(0)
                            key_name = Trim(a1)
                            'MsgBox key_name
                        Else
                            key_name = Trim(key_name)
                            'MsgBox key_name
                        End If
                    Else
                        key_name = CurSrcSheet.Cells(k, src_keycolumn_value)
                        key_name = Trim(key_name)
                    End If
                    If blank_column_value = "Y" Then
                        If value_name <> "" Then
                            arr2(k) = key_name
                            y.Add key_name
                        End If
                    Else
                        arr2(k) = key_name
                        y.Add key_name
                    End If
                End If
            End If
         Next
         
         ' Duplicate removal
         
         For f = 0 To UBound(arr2)
            dict2(arr2(f)) = ""
         Next f
         
         
         Key = dict2.keys
         Dim arr3() As String
         ReDim arr3(UBound(Key))
         
         For r = 1 To UBound(Key)
            arr3(r) = Key(r)
         Next
         
         ' Put key and value into two-dimensional array
         
         Dim arr9() As String
         ReDim arr9(UBound(Key), 1)
         'MsgBox UBound(arr9)
         For lll = 1 To UBound(Key)
            arr9(lll, 0) = arr3(lll)
            'MsgBox arr9(lll, 0)
         Next
         For hhh = 1 To UBound(arr9)
         
            For ddd = 1 To rn1
            
                If Not CurSrcSheet.Rows(ddd).EntireRow.Hidden = True Then
                    If Not IsError(CurSrcSheet.Cells(ddd, src_keycolumn_value)) Then
                        If braket_column_value = "Y" Then
                            zzz = CurSrcSheet.Cells(ddd, src_keycolumn_value)
                            If InStr(zzz, "(") > 0 Then
                                a2 = Split(zzz, "(")(0)
                                zzz = Trim(a2)
                                'MsgBox zzz
                            Else
                                zzz = Trim(zzz)
                                'MsgBox zzz
                            End If
                        Else
                            zzz = CurSrcSheet.Cells(ddd, src_keycolumn_value)
                            zzz = Trim(zzz)
                        End If
                        If zzz = arr9(hhh, 0) Then
                            If Not IsError(CurSrcSheet.Cells(ddd, src_valuecolumn_value)) Then
                                s3.Add CurSrcSheet.Cells(ddd, src_valuecolumn_value)
                            Else
                                s3.Add "#value!"
                            End If
                        End If
                    End If
                End If
            Next
            Dim arr4() As String
            ReDim arr4(s3.Count)
            For hhhh = 1 To s3.Count
               arr4(hhhh) = s3(hhhh)
            Next
            vv = Join(arr4, ",")
            'MsgBox Mid(vv, 2, Len(vv) - 1)
            arr9(hhh, 1) = Mid(vv, 2, Len(vv) - 1)
            For iiii = 1 To s3.Count

               s3.Remove 1
            Next
            ReDim arr(1)
         Next
         
          
        
        ' Write the two-dimensional array value into dst cells
        'MsgBox "debug is " & dst_keycolumn_value
        rng19 = CurDstSheet.Range(dst_keycolumn_value & "1048576").End(xlUp).Row
        rng20 = CurDstSheet.Range(dst_valuecolumn_value & "1048576").End(xlUp).Row
        'MsgBox rn3
        'MsgBox rn4
        rn5 = Application.Max(rng19, rng20)
        'MsgBox rn5
        
        'rn5 = CurDstSheet.UsedRange.Rows.Count
        
        For index5 = 1 To rn5
           If Not CurDstSheet.Rows(index5).EntireRow.Hidden = True Then
                If CurDstSheet.Cells(index5, dst_valuecolumn_value).Interior.ColorIndex = 8 Then
                    CurDstSheet.Cells(index5, dst_valuecolumn_value).Interior.ColorIndex = 0
                End If
           End If
        Next
        For mm = 1 To UBound(arr9)
            For nn = 1 To rn5
                If Not CurDstSheet.Rows(nn).EntireRow.Hidden = True Then
                    If Not IsError(CurDstSheet.Cells(nn, dst_keycolumn_value)) Then
                        If braket_column_value = "Y" Then
                            key_name2 = CurDstSheet.Cells(nn, dst_keycolumn_value)
                            If InStr(key_name2, "(") > 0 Then
                                a3 = Split(key_name2, "(")(0)
                                key_name2 = Trim(a3)
                    
                                'MsgBox key_name2
                            Else
                                key_name2 = Trim(key_name2)
                                'MsgBox key_name2
                            End If
                        Else
                            key_name2 = CurDstSheet.Cells(nn, dst_keycolumn_value)
                            key_name2 = Trim(key_name2)
                        End If
                    End If
                    If key_name2 = arr9(mm, 0) Then
                        value4 = arr9(mm, 1)
                        If InStr(value4, ",") > 0 Then
                            tuple1 = Split(value4, ",")
                            For vvv = 0 To UBound(tuple1)
                                dict4(tuple1(vvv)) = ""
                            Next
                            key1 = dict4.keys
                            Dim arr12() As String
                            ReDim arr12(UBound(key1))
                            For g = 0 To UBound(key1)
                                arr12(g) = key1(g)
                            Next
                            value4 = Join(arr12, ",")
                        Else
                            value4 = value4
                        End If
                        If Not IsError(CurDstSheet.Cells(nn, dst_valuecolumn_value)) Then
                            If value4 <> Trim(CurDstSheet.Cells(nn, dst_valuecolumn_value)) Then
                                CurDstSheet.Cells(nn, dst_valuecolumn_value).Interior.ColorIndex = 8
                            End If
                            If value4 <> Trim(CurDstSheet.Cells(nn, dst_valuecolumn_value)) And comment_column_value = "Y" Then
                                If CurDstSheet.Cells(nn, dst_valuecolumn_value).Comment Is Nothing Then
                                    text1 = "Old value:" & CurDstSheet.Cells(nn, dst_valuecolumn_value) & ";" & " " & "New value:" & value4
                                    CurDstSheet.Cells(nn, dst_valuecolumn_value).AddComment (text1)
                                Else
                                    CurDstSheet.Cells(nn, dst_valuecolumn_value).ClearComments
                                    text1 = "Old value:" & CurDstSheet.Cells(nn, dst_valuecolumn_value) & ";" & " " & "New value:" & value4
                                    CurDstSheet.Cells(nn, dst_valuecolumn_value).AddComment (text1)
                              
                                End If
                            ElseIf value4 <> Trim(CurDstSheet.Cells(nn, dst_valuecolumn_value)) And comment_column_value <> "Y" Then
                                If CurDstSheet.Cells(nn, dst_valuecolumn_value).Comment Is Nothing Then
                                    text1 = "Old value:" & CurDstSheet.Cells(nn, dst_valuecolumn_value) & ";" & " " & "New value:" & value4
                                    CurDstSheet.Cells(nn, dst_valuecolumn_value).AddComment (text1)
                                Else
                                    text2 = CurDstSheet.Cells(nn, dst_valuecolumn_value).Comment.Text
                                    text1 = text2 & ";" & " " & "Old value:" & CurDstSheet.Cells(nn, dst_valuecolumn_value) & ";" & " " & "New value:" & value4
                                    CurDstSheet.Cells(nn, dst_valuecolumn_value).ClearComments
                                    CurDstSheet.Cells(nn, dst_valuecolumn_value).AddComment (text1)
                                End If
                            End If
                        End If
                        ReDim arr12(1)
                        dict4.RemoveAll
                    End If
                
                    If key_name2 = arr9(mm, 0) Then
                        CurDstSheet.Cells(nn, dst_valuecolumn_value) = arr9(mm, 1)
                        'MsgBox arr9(mm, 1)
                    End If
               End If
            Next
         Next
         For ee = 1 To rn5
            If Not CurDstSheet.Rows(ee).EntireRow.Hidden = True Then
                If Not IsError(CurDstSheet.Cells(ee, dst_valuecolumn_value)) Then
                    value3 = CurDstSheet.Cells(ee, dst_valuecolumn_value)
                Else
                    value3 = "#value!"
                End If
                'MsgBox value3
           
                If InStr(value3, ",") > 0 Then
                    a = Split(value3, ",")
                    'MsgBox UBound(a)
                    'For vvv = 0 To UBound(a)
                    'MsgBox a(vvv)
                    'Next
                    For gg = 0 To UBound(a)
                        dict3(a(gg)) = ""
                    Next gg

                    Key = dict3.keys
                    'MsgBox Join(Key, ",")
                    Dim arr11() As String
                    ReDim arr11(UBound(Key))
         
                    For tt = 0 To UBound(Key)
                        arr11(tt) = Key(tt)
                        'MsgBox arr11(tt)
                    Next
                    'MsgBox UBound(arr11)
              
                    CurDstSheet.Cells(ee, dst_valuecolumn_value) = Join(arr11, ",")
                    'MsgBox Join(arr11, ",")
                    ReDim arr11(1)
                    dict3.RemoveAll
                End If
            End If
         Next
         dict2.RemoveAll
     ElseIf src_sheetname_value <> "" And src_keycolumn_value <> "" And src_valuecolumn_value = "" And dst_sheetname_value <> "" And dst_keycolumn_value <> "" And dst_valuecolumn_value = "" Then
         
         'rn2 = CurSrcSheet.UsedRange.Rows.Count
         'rn3 = CurDstSheet.UsedRange.Rows.Count
         
         rn2 = CurSrcSheet.Range(src_keycolumn_value & "1048576").End(xlUp).Row
         rn3 = CurDstSheet.Range(dst_keycolumn_value & "1048576").End(xlUp).Row
         
         For index3 = 1 To rn3
          If Not CurDstSheet.Rows(index3).EntireRow.Hidden = True Then
             If CurDstSheet.Cells(index3, dst_keycolumn_value).Interior.ColorIndex = 8 Then
                CurDstSheet.Cells(index3, dst_keycolumn_value).Interior.ColorIndex = 0
             End If
          End If
         Next
         
         For m = 1 To rn2
            If Not IsError(CurSrcSheet.Cells(m, src_keycolumn_value)) Then
                value_name = Trim(CurSrcSheet.Cells(m, src_keycolumn_value))
            If Not CurSrcSheet.Rows(m).EntireRow.Hidden = True Then
                If braket_column_value = "Y" Then
                    key_name = CurSrcSheet.Cells(m, src_keycolumn_value)
                    If InStr(key_name, "(") > 0 Then
                        a = Split(key_name, "(")(0)
                        key_name = Trim(a)
                    'MsgBox key_name
                    Else
                        key_name = Trim(key_name)
                        'MsgBox key_name
                    End If
                Else
                   key_name = CurSrcSheet.Cells(m, src_keycolumn_value)
                   key_name = Trim(key_name)
                End If
                If blank_column_value = "Y" Then
                    If value_name <> "" Then
                        dict5(key_name) = ""
                    End If
                Else
                    dict5(key_name) = ""
                End If
            End If
          End If
         Next
         'MsgBox s.Count
         For b = 1 To rn3
            If Not IsError(CurDstSheet.Cells(b, dst_keycolumn_value)) Then
                If Not CurDstSheet.Rows(b).EntireRow.Hidden = True Then
                    num2 = 0
                    If braket_column_value = "Y" Then
                        key_name2 = CurDstSheet.Cells(b, dst_keycolumn_value)
                        If InStr(key_name2, "(") > 0 Then
                            a10 = Split(key_name2, "(")(0)
                            key_name2 = Trim(a10)
                            'MsgBox key_name2
                        Else
                            key_name2 = Trim(key_name2)
                            'MsgBox key_name2
                        End If
                    Else
                        key_name2 = CurDstSheet.Cells(b, dst_keycolumn_value)
                        key_name2 = Trim(key_name2)
                    End If
         
               
                    If Not dict5.exists(key_name2) Then
                        CurDstSheet.Cells(b, dst_keycolumn_value).Interior.ColorIndex = 8
                    End If
                End If
            End If
         Next
         dict5.RemoveAll
    ElseIf src_sheetname_value = "" And src_keycolumn_value = "" And src_valuecolumn_value = "" And dst_sheetname_value <> "" And dst_keycolumn_value <> "" And dst_valuecolumn_value = "" Then

         new_col = Chr(Asc(dst_keycolumn_value) + 1)
         new_col2 = Chr(Asc(dst_keycolumn_value) + 2)
         CurDstSheet.Columns(new_col).Insert shift:=xlToRight
         CurDstSheet.Columns(new_col).Insert shift:=xlToRight
         rn4 = CurDstSheet.Range(dst_keycolumn_value & "1048576").End(xlUp).Row
         
         For h = 1 To rn4
            If Not IsError(CurDstSheet.Cells(h, dst_keycolumn_value)) Then
                value_name = Trim(CurDstSheet.Cells(h, dst_keycolumn_value))
            
                If Not CurDstSheet.Rows(h).EntireRow.Hidden = True Then
                    key_name3 = CurDstSheet.Cells(h, dst_keycolumn_value)
                    'If key_name3 <> "" Then
                    If braket_column_value = "Y" Then
                        key_name3 = CurDstSheet.Cells(h, dst_keycolumn_value)
                        If InStr(key_name3, "(") > 0 Then
                            a4 = Split(key_name3, "(")(0)
                            key_name3 = Trim(a4)
                            'MsgBox key_name3
                        Else
                            key_name3 = Trim(key_name3)
                            'MsgBox key_name3
                        End If
                    Else
                        key_name3 = CurDstSheet.Cells(h, dst_keycolumn_value)
                        key_name3 = Trim(key_name3)
                    End If
                    If blank_column_value = "Y" Then
                        If value_name <> "" Then
                            dict6(key_name3) = 0
                        End If
                    Else
                        dict6(key_name3) = 0
                    End If
                    'End If
                End If
            End If
         Next
         For r = 1 To rn4
          If Not CurDstSheet.Rows(r).EntireRow.Hidden = True Then
            num1 = 0
            If Not IsError(CurDstSheet.Cells(r, dst_keycolumn_value)) Then
                ppp = CurDstSheet.Cells(r, dst_keycolumn_value)
            'For p = 1 To l.Count
                If braket_column_value = "Y" Then
                    If InStr(ppp, "(") > 0 Then
                        a5 = Split(ppp, "(")(0)
                        ppp = Trim(a5)
                        'MsgBox ppp
                    Else
                        ppp = Trim(ppp)
                        'MsgBox ppp
                    End If
                Else
                   ppp = CurDstSheet.Cells(r, dst_keycolumn_value)
                   ppp = Trim(ppp)
                End If
              
               'If l(p) = ppp Then
               'num1 = num1 + 1
               'End If
               If dict6.exists(ppp) Then
                  dict6(ppp) = dict6(ppp) + 1
               End If
            End If
            'CurDstSheet.Cells(r, new_col) = num1
            'CurDstSheet.Cells(r, new_col).Interior.ColorIndex = 0
            'Next
            End If
         Next
         count_key = 0
         For Each element In dict6.keys
            count_key = count_key + 1
            dict7(element) = count_key
         Next
         For aaa = 1 To rn4
           If Not CurDstSheet.Rows(aaa).EntireRow.Hidden = True Then
                num1 = 0
                If Not IsError(CurDstSheet.Cells(aaa, dst_keycolumn_value)) Then
                'For p = 1 To l.Count
                    If braket_column_value = "Y" Then
                        ppp = CurDstSheet.Cells(aaa, dst_keycolumn_value)
                            If InStr(ppp, "(") > 0 Then
                                a5 = Split(ppp, "(")(0)
                                ppp = Trim(a5)
                                'MsgBox ppp
                            Else
                                ppp = Trim(ppp)
                                'MsgBox ppp
                            End If
                    Else
                        ppp = CurDstSheet.Cells(aaa, dst_keycolumn_value)
                        ppp = Trim(ppp)
                    End If
                    CurDstSheet.Cells(aaa, new_col) = dict6(ppp)
                    CurDstSheet.Cells(aaa, new_col2) = dict7(ppp)
                    CurDstSheet.Cells(aaa, new_col).Interior.ColorIndex = 0
                End If
            End If
        Next
        
      End If     'end top If
''''''''''''''''Code about judging a excel workbook is open or not************
      If IsSrcExlBookOpen = True Then
         'MsgBox "Src book is open"
         SrcExlBook.Close True              'file saved and closed
         IsSrcExlBookOpen = False
      End If
      If DstExlBookOpen = True Then
         'MsgBox "dst book is open"
         DstExlBook.Close True              'file saved and closed
         DstExlBookOpen = False
      End If
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
      dict6.RemoveAll
      SrcexlApp.Quit
      DstexlApp.Quit
   Next          'end top For
   
End Sub














Attribute VB_Name = "Module2"
Public dict2 As Object

Sub setdict()
    Dim arr()
    Dim dict1 As Object
    Set dict1 = CreateObject("Scripting.Dictionary")
    Set dict2 = CreateObject("Scripting.Dictionary")
    maxrow = Sheets("regression_csv_result").[A1048576].End(xlUp).Row
    For index = 1 To maxrow
        testname = Trim(Sheets("regression_csv_result").Cells(index, 1))
        countername = Trim(Sheets("regression_csv_result").Cells(index, 1))
        casecounter = testname & countername
        dict1(casecounter) = "0"
        
    Next
    
     
    For index = 1 To maxrow
        testname = Trim(Sheets("regression_csv_result").Cells(index, 1))
        countername = Trim(Sheets("regression_csv_result").Cells(index, 2))
        a = Sheets("regression_csv_result").Cells(index, Columns.Count).End(xlToLeft).Column
        
        ReDim arr(a - 1)
        For i = 2 To a
        arr(i - 2) = Sheets("regression_csv_result").Cells(index, i)
        Next
        
        casecounter = testname & countername
        If dict1.exists(casecounter) Then
            dict1(casecounter) = dict1(casecounter) + 1
        End If
        If dict1(casecounter) = "" Then
            casecounter = casecounter & "_$$0"
        Else
            casecounter = casecounter & "_$$" & dict1(casecounter)
        End If
       
        a = "B" & index & ":" & CNtoW(a) & index
        
        'arr = Sheets("regression_csv_result").Range(a)
        dict2(casecounter) = arr
    Next
   
End Sub

Function CNtoW(ByVal num As Long) As String
    CNtoW = Replace(Cells(1, num).Address(False, False), "1", "")
End Function


Function cc(a As String, b As Integer)
    Dim r%, h1%, h2%, aa$
    Dim arr, brr
    Dim s As New Collection
    Dim test_name_idx As Integer
    
    If InStr(a, "_$$") <= 0 Then
        a = a & "_$$0"
    End If
    
    r = Application.ThisCell.Row()
    test_name_idx = get_column_index("TestName")
    aa = Trim(Sheets(case_list).Cells(r, test_name_idx))

    casecounter = aa & a
    
    cc = dict2(casecounter)(b + 1)
    
End Function


Function pv_sum(c As String, d As Integer)
Dim s As New Collection
Dim s1 As New Collection
Dim s2 As New Collection
Dim s3 As New Collection
Dim s4 As New Collection
Dim b1() As String
Dim index As Integer
If InStr(c, "+") > 0 Or InStr(c, "-") Then

    For i = 1 To Len(c)
        st = Mid(c, i, 1)
        If st = "+" Or st = "-" Then
            s.Add st
        End If
  Next
  
  If s.Count > 0 Then
        s.Add " "
        c = Replace(c, "+", ",")
        c = Replace(c, "-", ",")
        b1() = Split(c, ",")
        Dim c0 As String
        Dim m As Integer
        For m = 0 To d - 1
            For k = 0 To UBound(b1)
                  s4.Add cc(b1(k), m)
            Next
            For u = 1 To s4.Count
                value = value & s4(u) & s(u)
            Next
           s1.Add Application.Evaluate(value)
           'MsgBox Application.Evaluate(Value)
        
           value = ""
           For t = 1 To s4.Count
               s4.Remove 1
           Next
       Next
     pv_sum = 0
    For w = 1 To s1.Count
        pv_sum = pv_sum + s1(w)
    Next
  End If
  

Else
      For index = 0 To d - 1
         pv_sum = pv_sum + cc(c, index)
      Next
End If

End Function


Function pv_max(c As String, d As Integer)

Dim s As New Collection
Dim s1 As New Collection
Dim s2 As New Collection
Dim s3 As New Collection
Dim s4 As New Collection
Dim b1() As String
Dim b2()
Dim index As Integer

If InStr(c, "+") > 0 Or InStr(c, "-") Then
    For i = 1 To Len(c)
        st = Mid(c, i, 1)
        If st = "+" Or st = "-" Then
            s.Add st
        End If
    Next
  
  If s.Count > 0 Then
      s.Add " "
      c = Replace(c, "+", ",")
      c = Replace(c, "-", ",")
      b1() = Split(c, ",")
      Dim c0 As String
      Dim m As Integer
        For m = 0 To d - 1
            For k = 0 To UBound(b1)
              s4.Add cc(b1(k), m)
            Next
        For u = 1 To s4.Count
            value = value & s4(u) & s(u)
       Next
       
       s1.Add Application.Evaluate(value)
       'MsgBox Application.Evaluate(Value)
       
       value = ""
       For t = 1 To s4.Count
           s4.Remove 1
       Next
       ReDim b2(d)
       For w = 1 To s1.Count
            b2(w - 1) = s1(w)
       Next
     Next
     pv_max = Application.Max(b2)
  End If
  
Else
      ReDim b2(d)
      For index = 0 To d - 1
         b2(index) = cc(c, index)
      Next
      pv_max = Application.Max(b2)
End If

End Function


Function pv_min(c As String, d As Integer)

Dim s As New Collection
Dim s1 As New Collection
Dim s2 As New Collection
Dim s3 As New Collection
Dim s4 As New Collection
Dim b1() As String
Dim b2()
Dim index As Integer

If InStr(c, "+") > 0 Or InStr(c, "-") Then
    For i = 1 To Len(c)
        st = Mid(c, i, 1)
        If st = "+" Or st = "-" Then
            s.Add st
        End If
    Next
  
  If s.Count > 0 Then
        s.Add " "
      c = Replace(c, "+", ",")
      c = Replace(c, "-", ",")
      b1() = Split(c, ",")
      Dim c0 As String
      Dim m As Integer
    For m = 0 To d - 1
        For k = 0 To UBound(b1)
              s4.Add cc(b1(k), m)
        Next
        For u = 1 To s4.Count
            value = value & s4(u) & s(u)
       Next
       
       s1.Add Application.Evaluate(value)
       'MsgBox Application.Evaluate(Value)
       
       value = ""
       For t = 1 To s4.Count
           s4.Remove 1
       Next
       ReDim b2(d)
       For w = 1 To s1.Count
            b2(w - 1) = s1(w)
       Next
     Next
     pv_min = Application.Min(b2)
  End If
  

Else
   
      ReDim b2(d)
      For index = 0 To d - 1
         b2(index) = cc(c, index)
      Next
      pv_min = Application.Min(b2)
End If

End Function



Function pv_avg(c As String, d As Integer)

Dim s As New Collection
Dim s1 As New Collection
Dim s2 As New Collection
Dim s3 As New Collection
Dim s4 As New Collection
Dim b1() As String
Dim index As Integer

If InStr(c, "+") > 0 Or InStr(c, "-") Then
    For i = 1 To Len(c)
        st = Mid(c, i, 1)
        If st = "+" Or st = "-" Then
            s.Add st
        End If
    Next
  
  If s.Count > 0 Then
      s.Add " "
      c = Replace(c, "+", ",")
      c = Replace(c, "-", ",")
      b1() = Split(c, ",")
      Dim c0 As String
      Dim m As Integer
    For m = 0 To d - 1
        For k = 0 To UBound(b1)
              s4.Add cc(b1(k), m)
        Next
        For u = 1 To s4.Count
            value = value & s4(u) & s(u)
        Next
       
       s1.Add Application.Evaluate(value)
       'MsgBox Application.Evaluate(Value)
       
       value = ""
       For t = 1 To s4.Count
           s4.Remove 1
       Next
       
       
     Next
     Sum = 0
       For w = 1 To s1.Count
             Sum = Sum + s1(w)
       Next
     pv_avg = Sum / s1.Count
     
  End If
  

Else
      Sum = 0
      For index = 0 To d - 1
         Sum = Sum + cc(c, index)
         s2.Add cc(c, index)
      Next
      pv_avg = Sum / s2.Count
      
End If

End Function




Function pv_sum_div(c As String, e As String, d As Integer)
Dim s As New Collection
Dim s1 As New Collection
Dim s2 As New Collection
Dim s3 As New Collection
Dim s4 As New Collection
Dim s5 As New Collection
Dim s6 As New Collection
Dim s7 As New Collection
Dim b1() As String
Dim b2() As String
Dim index As Integer
Dim index1 As Integer

If InStr(c, "+") > 0 Or InStr(c, "-") > 0 Or InStr(e, "+") > 0 Or InStr(e, "-") > 0 Then
    For i = 1 To Len(c)
        st = Mid(c, i, 1)
        If st = "+" Or st = "-" Then
            s2.Add st
        End If
    Next
  
  
  For j = 1 To Len(e)
    st1 = Mid(e, j, 1)
    If st1 = "+" Or st1 = "-" Then
      s3.Add st1
    End If
  Next
  
  If s2.Count > 0 Or s3.Count > 0 Then
  
    s2.Add " "
    s3.Add " "
    c = Replace(c, "+", ",")
    c = Replace(c, "-", ",")
    e = Replace(e, "+", ",")
    e = Replace(e, "-", ",")
    b1() = Split(c, ",")
    b2() = Split(e, ",")
    Dim c0 As String
    Dim e0 As String
    Dim m As Integer
    For m = 0 To d - 1
        For k = 0 To UBound(b1)
              s4.Add cc(b1(k), m)
        Next
        For u = 1 To s4.Count
            value = value & s4(u) & s2(u)
       Next
       
       s6.Add Application.Evaluate(value)
       'MsgBox Application.Evaluate(Value)
       
       value = ""
        For l = 0 To UBound(b2)
            s5.Add cc(b2(l), m)
        Next
        
        For V = 1 To s5.Count
            Value1 = Value1 & s5(V) & s3(V)
        Next
        s7.Add Application.Evaluate(Value1)
        'MsgBox Application.Evaluate(Value1)
        Value1 = ""
        
        For t = 1 To s4.Count
            s4.Remove 1
        Next
        For r = 1 To s5.Count
            s5.Remove 1
        Next
  Next
  For w = 1 To s7.Count
     If s7(w) <> 0 Then
        pv_sum_div = pv_sum_div + s6(w) / s7(w)
     End If
  Next
  End If
  
  
 
Else
     For index = 0 To d - 1
       If cc(e, index) <> 0 Then
         pv_sum_div = pv_sum_div + cc(c, index) / cc(e, index)
       End If
     Next
End If

   
End Function


Function pv_min_div(c As String, e As String, d As Integer)
Dim s As New Collection
Dim s1 As New Collection
Dim s2 As New Collection
Dim s3 As New Collection
Dim s4 As New Collection
Dim s5 As New Collection
Dim s6 As New Collection
Dim s7 As New Collection
Dim b1() As String
Dim b2() As String
Dim b3()
Dim index As Integer
Dim index1 As Integer

If InStr(c, "+") > 0 Or InStr(c, "-") > 0 Or InStr(e, "+") > 0 Or InStr(e, "-") > 0 Then

  For i = 1 To Len(c)
        st = Mid(c, i, 1)
        If st = "+" Or st = "-" Then
            s2.Add st
        End If
  Next
  For j = 1 To Len(e)
    st1 = Mid(e, j, 1)
    If st1 = "+" Or st1 = "-" Then
      s3.Add st1
    End If
  Next
  
  If s2.Count > 0 Or s3.Count > 0 Then
    s2.Add " "
    s3.Add " "
    c = Replace(c, "+", ",")
    c = Replace(c, "-", ",")
    e = Replace(e, "+", ",")
    e = Replace(e, "-", ",")
    b1() = Split(c, ",")
    b2() = Split(e, ",")
    Dim c0 As String
    Dim e0 As String
    Dim m As Integer
    For m = 0 To d - 1
        For k = 0 To UBound(b1)
              s4.Add cc(b1(k), m)
        Next
        For u = 1 To s4.Count
            value = value & s4(u) & s2(u)
       Next
       
       s6.Add Application.Evaluate(value)
       'MsgBox Application.Evaluate(Value)
       
       value = ""
        For l = 0 To UBound(b2)
            s5.Add cc(b2(l), m)
        Next
    
        For V = 1 To s5.Count
            Value1 = Value1 & s5(V) & s3(V)
        Next
        s7.Add Application.Evaluate(Value1)
        'MsgBox Application.Evaluate(Value1)
        Value1 = ""
        For t = 1 To s4.Count
            s4.Remove 1
        Next
        For r = 1 To s5.Count
            s5.Remove 1
        Next
  Next
  ReDim b3(d)
  For w = 1 To s7.Count
     If s7(w) <> 0 Then
        b3(w - 1) = s6(w) / s7(w)
     End If
  Next
  pv_min_div = Application.Min(b3)
  End If
  

Else
     ReDim b3(d)
     For index = 0 To d - 1
        If cc(e, index) <> 0 Then
          b3(index) = cc(c, index) / cc(e, index)
        End If
     Next
     pv_min_div = Application.Min(b3)
End If

End Function




Function pv_max_div(c As String, e As String, d As Integer)
Dim s As New Collection
Dim s1 As New Collection
Dim s2 As New Collection
Dim s3 As New Collection
Dim s4 As New Collection
Dim s5 As New Collection
Dim s6 As New Collection
Dim s7 As New Collection
Dim b1() As String
Dim b2() As String
Dim b3()
Dim index As Integer
Dim index1 As Integer

If InStr(c, "+") > 0 Or InStr(c, "-") > 0 Or InStr(e, "+") > 0 Or InStr(e, "-") > 0 Then
  For i = 1 To Len(c)
        st = Mid(c, i, 1)
        If st = "+" Or st = "-" Then
            s2.Add st
        End If
  Next
  For j = 1 To Len(e)
    st1 = Mid(e, j, 1)
    If st1 = "+" Or st1 = "-" Then
      s3.Add st1
    End If
  Next
  If s2.Count > 0 Or s3.Count > 0 Then
    s2.Add " "
    s3.Add " "
    c = Replace(c, "+", ",")
    c = Replace(c, "-", ",")
    e = Replace(e, "+", ",")
    e = Replace(e, "-", ",")
    b1() = Split(c, ",")
    b2() = Split(e, ",")
    Dim c0 As String
    Dim e0 As String
    Dim m As Integer
    For m = 0 To d - 1
        For k = 0 To UBound(b1)
              s4.Add cc(b1(k), m)
        Next
        
        For u = 1 To s4.Count
            value = value & s4(u) & s2(u)
       Next
       
       s6.Add Application.Evaluate(value)
       'MsgBox Application.Evaluate(Value)
       
       value = ""
        For l = 0 To UBound(b2)
            s5.Add cc(b2(l), m)
        Next
        
        For V = 1 To s5.Count
            Value1 = Value1 & s5(V) & s3(V)
        Next
        s7.Add Application.Evaluate(Value1)
        'MsgBox Application.Evaluate(Value1)
        Value1 = ""
        For t = 1 To s4.Count
            s4.Remove 1
        Next
        For r = 1 To s5.Count
            s5.Remove 1
        Next
  Next
    ReDim b3(d)
    For w = 1 To s7.Count
       If s7(w) <> 0 Then
          b3(w - 1) = s6(w) / s7(w)
       End If
     Next
  pv_max_div = Application.Max(b3)
  End If
  
  
 
Else

     ReDim b3(d)
     For index = 0 To d - 1
       If cc(e, index) <> 0 Then
         b3(index) = cc(c, index) / cc(e, index)
       End If
     Next
     pv_max_div = Application.Max(b3)
End If

End Function



Function pv_avg_div(c As String, e As String, d As Integer)

Dim s As New Collection
Dim s1 As New Collection
Dim s2 As New Collection
Dim s3 As New Collection
Dim s4 As New Collection
Dim s5 As New Collection
Dim s6 As New Collection
Dim s7 As New Collection
Dim s8 As New Collection
Dim b1() As String
Dim b2() As String
Dim index As Integer
Dim index1 As Integer

If InStr(c, "+") > 0 Or InStr(c, "-") > 0 Or InStr(e, "+") > 0 Or InStr(e, "-") > 0 Then
  For i = 1 To Len(c)
    st = Mid(c, i, 1)
    If st = "+" Or st = "-" Then
      s2.Add st
    End If
  Next
  For j = 1 To Len(e)
    st1 = Mid(e, j, 1)
    If st1 = "+" Or st1 = "-" Then
      s3.Add st1
    End If
  Next
  If s2.Count > 0 Or s3.Count > 0 Then
    s2.Add " "
    s3.Add " "
    c = Replace(c, "+", ",")
    c = Replace(c, "-", ",")
    e = Replace(e, "+", ",")
    e = Replace(e, "-", ",")
    b1() = Split(c, ",")
    b2() = Split(e, ",")
    Dim c0 As String
    Dim e0 As String
    Dim m As Integer
    For m = 0 To d - 1
        For k = 0 To UBound(b1)
              s4.Add cc(b1(k), m)
        Next
        For u = 1 To s4.Count
            value = value & s4(u) & s2(u)
       Next
       s6.Add Application.Evaluate(value)
       'MsgBox Application.Evaluate(Value)
       
       value = ""
        For l = 0 To UBound(b2)
            s5.Add cc(b2(l), m)
        Next
        
        For V = 1 To s5.Count
            Value1 = Value1 & s5(V) & s3(V)
        Next
        s7.Add Application.Evaluate(Value1)
        'MsgBox Application.Evaluate(Value1)
        Value1 = ""
        
        For t = 1 To s4.Count
            s4.Remove 1
        Next
        For r = 1 To s5.Count
            s5.Remove 1
        Next
  Next
  For w = 1 To s7.Count
     If s7(w) <> 0 Then
        Sum = Sum + s6(w) / s7(w)
        s8.Add s7(w)
     End If
  Next
  pv_avg_div = Sum / s8.Count
  End If
  
  
 
Else
     For index = 0 To d - 1
       If cc(e, index) <> 0 Then
         Sum = Sum + cc(c, index) / cc(e, index)
         s8.Add cc(e, index)
       End If
     Next
     pv_avg_div = Sum / s8.Count
End If

End Function






Attribute VB_Name = "Module3"
Sub runmacro()
    Call init_regression_env
    If StrComp(case_list, "case_list", vbTextCompare) <> 0 Then
        Sheets(case_list).Application.CalculateFullRebuild
    End If
End Sub
Attribute VB_Name = "Module4"
Public env As Object
Public case_list As String

Public KEY_CASENAME As String
Public KEY_THEORY_VALUE As String
Public KEY_PRE_SI_VALUE As String
Public KEY_FORMULA As String

Function Key(name As String) As String
    n1 = Replace(name, "\n", "")
    n2 = Replace(n1, " ", "")
    n3 = Replace(n2, Chr(10), "")
    Key = n3
End Function

Function get_column_index(k As String, Optional sh As String = "") As Integer
    Dim aa As String
    Dim bb As String
    Dim cc As Integer
    Dim idx As Integer
    Dim kk As String
    
    kk = Key(k)
    idx = -1
    
    If sh = "" Then
        sh = case_list
    End If
    
    For i = 1 To 100
        aa = Sheets(sh).Cells(1, i)
        bb = Key(aa)
        cc = StrComp(bb, kk, vbTextCompare)
        If cc = 0 Then
          idx = i
          Exit For
        End If
    Next
    get_column_index = idx
End Function

Function get_row_index(name As String, col As Integer, Optional sh As String = "") As Integer
    If sh = "" Then
        sh = case_list
    End If
    
    For i = 1 To 600
        aa = Sheets(sh).Cells(i, col)
        If aa = name Then
            get_row_index = i
            Exit Function
        End If
    Next
    get_row_index = -1
End Function

Function init_regression_env()
    Dim t As String
    Dim V As String
    
    Set env = CreateObject("Scripting.Dictionary")
    env("case_list") = "case_list"
    
    For i = 1 To 100
        title = Sheets("regression_env").Cells(i, 1)
        value = Sheets("regression_env").Cells(i, 2)
        env(title) = value
    Next
    
    case_list = env("case_list")
    
    KEY_CASENAME = Key("TestName")
    KEY_THEORY_VALUE = Key("Theory value")
    KEY_PRE_SI_VALUE = Key("Achieved Perf Value(pre-si)")
    KEY_FORMULA = Key("Formula(Measured perf value)")
End Function

Function RV(name As String)
    Dim n As String
    Dim value As Single
    idx = get_column_index(name)
    r = Application.ThisCell.Row
    value = Sheets(case_list).Cells(r, idx)
    RV = value
End Function

Function XRV(sh As String, name As String)
    Dim test_name As String
    Dim value As String
    Dim sh_tset_c As Integer
    Dim sh_c As Integer
    Dim sh_r As Integer
    
    r = Application.ThisCell.Row
    idx_test_name = get_column_index("TestName")
    test_name = Sheets(case_list).Cells(r, idx_test_name)
    
    sh_tset_c = get_column_index("TestName", sh)
    sh_c = get_column_index(name, sh)
    sh_r = get_row_index(test_name, sh_tset_c, sh)
    value = Sheets(sh).Cells(sh_r, sh_c)
    
    XRV = value
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub Worksheet_SelectionChange(ByVal Target As Range)
    Application.EnableEvents = False
    If StrComp(case_list, "case_list", vbTextCompare) = 0 Then
        Exit Sub
    End If
    Dim casename As String
    Dim index As Integer
    Dim i As Integer
    Dim maxrow As Integer
    Dim testname As String
    
    Dim theory_idx As Integer
    Dim pre_si_idx As Integer
    theory_idx = get_column_index("Measured perf percentage(post-si vs. Theory value)")
    pre_si_idx = get_column_index("Measured perf percentage(post-si vs. pre-si)")
    If Target.Column = theory_idx Then
        casename = Trim(Cells(Target.Row, 4))
        maxrow = Sheets("history_data_VStheory").Range("A655").End(xlUp).Row
        
        For index = 1 To maxrow
            testname = Trim(Sheets("history_data_VStheory").Cells(index, 1))
            If testname = casename Then
                maxcolumn = Sheets("history_data_VStheory").Cells(index, 100).End(xlToLeft).Column
                If ActiveSheet.ChartObjects.Count > 0 Then
                    ActiveSheet.ChartObjects.Delete
                End If
                Range(Cells(index, 2).Address, Cells(index, maxcolumn).Address).Select
                ActiveSheet.Shapes.AddChart2(227, xlLineMarkers).Select
                ActiveChart.SeriesCollection.NewSeries
                ActiveChart.FullSeriesCollection(1).name = "compared to theory value"
                ActiveChart.FullSeriesCollection(1).Values = Sheets("history_data_VStheory").Range(Cells(index, 2).Address, Cells(index, maxcolumn).Address)
                ActiveChart.ChartTitle.Text = testname
                ActiveChart.FullSeriesCollection(1).XValues = Sheets("history_data_VStheory").Range(Cells(1, 2).Address, Cells(1, maxcolumn).Address)
                For i = 2 To ActiveChart.FullSeriesCollection.Count
                    ActiveChart.FullSeriesCollection(2).Delete
                Next
                Exit For
            End If
        Next
    
    ElseIf Target.Column = pre_si_idx Then
        casename = Trim(Cells(Target.Row, 4))
        maxrow = Sheets("history_data_VSpreSi").Range("A655").End(xlUp).Row
        
        For index = 1 To maxrow
            testname = Trim(Sheets("history_data_VSpreSi").Cells(index, 1))
            If testname = casename Then
                maxcolumn = Sheets("history_data_VSpreSi").Cells(index, 100).End(xlToLeft).Column
                If ActiveSheet.ChartObjects.Count > 0 Then
                    ActiveSheet.ChartObjects.Delete
                End If
                Range(Cells(index, 2).Address, Cells(index, maxcolumn).Address).Select
                ActiveSheet.Shapes.AddChart2(227, xlLineMarkers).Select
                ActiveChart.SeriesCollection.NewSeries
                ActiveChart.FullSeriesCollection(1).name = "compared to pre-si value"
                ActiveChart.FullSeriesCollection(1).Values = Sheets("history_data_VSpreSi").Range(Cells(index, 2).Address, Cells(index, maxcolumn).Address)
                ActiveChart.ChartTitle.Text = testname
                ActiveChart.FullSeriesCollection(1).XValues = Sheets("history_data_VSpreSi").Range(Cells(1, 2).Address, Cells(1, maxcolumn).Address)
                For i = 2 To ActiveChart.FullSeriesCollection.Count
                    ActiveChart.FullSeriesCollection(2).Delete
                Next
                Exit For
            End If
        Next
    
    Else
        If ActiveSheet.ChartObjects.Count > 0 Then
            ActiveSheet.ChartObjects.Delete
        End If
    End If
    
    Target.Select
    Application.EnableEvents = True
End Sub






Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub workbook_open()
    Call setdict
    Call runmacro
    ActiveWorkbook.Save
    
End Sub


INQUEST-PP=macro
