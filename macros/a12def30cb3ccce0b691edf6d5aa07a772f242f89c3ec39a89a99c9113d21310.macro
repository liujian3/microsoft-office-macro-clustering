Attribute VB_Name = "GetDirectoryFunction"
'John Walkenbach's code for getting a directory

Option Explicit
Public Type BROWSEINFO
    hOwner As Long
    pidlRoot As Long
    pszDisplayName As String
    lpszTitle As String
    ulFlags As Long
    lpfn As Long
    lParam As Long
    iImage As Long
End Type

'32-bit API declarations
Declare Function SHGetPathFromIDList Lib "shell32.dll" _
  Alias "SHGetPathFromIDListA" (ByVal pidl As Long, ByVal pszPath As String) _
  As Long
Attribute SHGetPathFromIDList.VB_ProcData.VB_Invoke_Func = " \n14"

Declare Function SHBrowseForFolder Lib "shell32.dll" _
Alias "SHBrowseForFolderA" (lpBrowseInfo As BROWSEINFO) As Long
Attribute SHBrowseForFolder.VB_ProcData.VB_Invoke_Func = " \n14"

Function GetDirectory(Optional Msg) As String
Attribute GetDirectory.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bInfo As BROWSEINFO
    Dim Path As String
    Dim r As Long, x As Long, pos As Integer
 
'   Root folder = Desktop
    bInfo.pidlRoot = 0&

'   Title in the dialog
    If IsMissing(Msg) Then
        bInfo.lpszTitle = "Select a folder."
    Else
        bInfo.lpszTitle = Msg
    End If
    
'   Type of directory to return
    bInfo.ulFlags = &H1

'   Display the dialog
    x = SHBrowseForFolder(bInfo)
    
'   Parse the result
    Path = Space$(512)
    r = SHGetPathFromIDList(ByVal x, ByVal Path)
    If r Then
        pos = InStr(Path, Chr$(0))
        GetDirectory = Left(Path, pos - 1)
    Else
        GetDirectory = ""
    End If
End Function


Attribute VB_Name = "Module1"
'|fffd| Mar 2005 Glynn Consulting Ltd
'Do not distribute without prior permission
'Email enquiries@glynnconsulting.co.uk
'Web site - www.glynnconsulting.co.uk

Option Explicit

'Set variables and constants
Dim MyPath As String
Dim DirName As String, NextFile As String, ChangeTo As String
Dim ErrorMsg As String
Dim Path As String, Msg As String
Dim RowCounter As Integer
Dim Unchanged As Integer
Const RenamedColour As Integer = 36
Const ProblemColour As Integer = 40
Const UnchangedColour As Integer = 35

Sub GetSourcePath()
Attribute GetSourcePath.VB_ProcData.VB_Invoke_Func = " \n14"
    ActiveSheet.Unprotect
'Get the path using shell32.dll routine
    Msg = "Select a directory for the file list"
    Path = GetDirectory(Msg)
    If Path <> "" Then Range("Path").Value = Path
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, AllowFormattingCells:=True, AllowInsertingRows:=True, AllowDeletingRows:=True, AllowSorting:=True
End Sub

Sub ListFiles()
Attribute ListFiles.VB_ProcData.VB_Invoke_Func = " \n14"
'Create a list of files
'Run a few checks first...
    ActiveSheet.Unprotect
    ErrorMsg = "Problem creating list - check path."
    'On Error GoTo ErrorHandler
    If Range("Path").Value = "" Then GoTo ErrorHandler
    Application.ScreenUpdating = False
    DirName = Range("Path").Value
    If Right(DirName, 1) <> "\" Then DirName = DirName & "\"
    NextFile = Dir(DirName)
    If NextFile = "" Then MsgBox "Incorrect path specified or no files detected", vbInformation, "List files": Exit Sub
'Clear area for list
    Range("Filelist").Offset(1, 0).Select
    RowCounter = 0
    Range("B" & ActiveCell.Row & ":F65536").ClearContents
    Range("B" & ActiveCell.Row & ":F65536").Interior.ColorIndex = 2
'Loop to insert file name and details
    Do While NextFile <> ""
        ActiveCell.Offset(RowCounter, 0).Value = NextFile
        ActiveCell.Offset(RowCounter, 4).Value = NextFile
        ActiveCell.Offset(RowCounter, 1).Value = FileLen(DirName & NextFile)
        ActiveCell.Offset(RowCounter, 2).Value = FileDateTime(DirName & NextFile)
        NextFile = Dir()
        RowCounter = RowCounter + 1
    Loop
    If ActiveCell.Offset(1, 0).Value = "" Then [A1].Select: Exit Sub
'Sort alphabetically
    Selection.CurrentRegion.Select
    Selection.Sort key1:=Range(ActiveCell.Address), order1:=xlAscending, header:=xlYes
    [A1].Select
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, AllowFormattingCells:=True, AllowInsertingRows:=True, AllowDeletingRows:=True, AllowSorting:=True
    Exit Sub
ErrorHandler:
    MsgBox ErrorMsg, vbInformation, "List files"
    [A1].Select
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, AllowFormattingCells:=True, AllowInsertingRows:=True, AllowDeletingRows:=True, AllowSorting:=True
    Exit Sub
End Sub

Sub FindAndReplace()
Attribute FindAndReplace.VB_ProcData.VB_Invoke_Func = " \n14"
    ActiveSheet.Unprotect
    Range("FileList").Offset(2, 4).Select
    If ActiveCell.Value <> "" Then
        ActiveCell.Offset(-1, 0).Select
        Range(ActiveCell, ActiveCell.End(xlDown)).Select
        Application.Dialogs(xlDialogFormulaReplace).Show
    End If
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, AllowFormattingCells:=True, AllowInsertingRows:=True, AllowDeletingRows:=True, AllowSorting:=True
End Sub

Sub RemoveAllFlags()
Attribute RemoveAllFlags.VB_ProcData.VB_Invoke_Func = " \n14"
    ActiveSheet.Unprotect
    Application.ScreenUpdating = False
    Range("Filelist").Offset(1, 0).Select
    Range("E" & ActiveCell.Row & ":E65536").ClearContents
    Range("B" & ActiveCell.Row & ":F65536").Interior.ColorIndex = 2
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, AllowFormattingCells:=True, AllowInsertingRows:=True, AllowDeletingRows:=True, AllowSorting:=True
End Sub

Sub Removeformulas()
Attribute Removeformulas.VB_ProcData.VB_Invoke_Func = " \n14"
    ActiveSheet.Unprotect
    Application.ScreenUpdating = False
    Range("Filelist").Offset(1, 4).Select
    Range(ActiveCell, "F65536").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlValues
    Range("Filelist").Offset(1, 4).Select
    Application.CutCopyMode = False
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, AllowFormattingCells:=True, AllowInsertingRows:=True, AllowDeletingRows:=True, AllowSorting:=True
End Sub

Sub RenameFiles()
Attribute RenameFiles.VB_ProcData.VB_Invoke_Func = "k\n14"
    ActiveSheet.Unprotect
    Application.ScreenUpdating = False
    Range("Filelist").Offset(1, 0).Select
    RowCounter = 0
    Unchanged = 0
    If ActiveCell.Value = "" Then
        MsgBox "No files detected", vbInformation, "Rename files"
        Exit Sub
    End If
    MyPath = Range("Path").Value
    If MyPath = "" Then
        Application.ScreenUpdating = True
        MsgBox "No Path specified", vbInformation, "Rename files"
        Exit Sub
    End If
    If Right(MyPath, 1) <> "\" Then MyPath = MyPath & "\"
    On Error GoTo BadFile
    Do
        If ActiveCell.Offset(RowCounter, 0).Interior.ColorIndex <> RenamedColour Then
            NextFile = MyPath & ActiveCell.Offset(RowCounter, 0)
            ChangeTo = MyPath & ActiveCell.Offset(RowCounter, 4)
            RowCounter = RowCounter + 1
            If NextFile = ChangeTo Then
                Range("B" & RowCounter + Range("Filelist").Row & ":F" & RowCounter + Range("Filelist").Row).Interior.ColorIndex = UnchangedColour
                Range("E" & RowCounter + Range("Filelist").Row).Value = "U"
                Unchanged = Unchanged + 1
            Else
                Name NextFile As ChangeTo
                Range("B" & RowCounter + Range("Filelist").Row & ":F" & RowCounter + Range("Filelist").Row).Interior.ColorIndex = RenamedColour
                Range("E" & RowCounter + Range("Filelist").Row).Value = "R"
            End If
        Else
            RowCounter = RowCounter + 1
        End If
    Loop Until ActiveCell.Offset(RowCounter, 0).Value = ""
    Application.ScreenUpdating = True
    MsgBox RowCounter - Unchanged & " files renamed" & Chr(13) & Unchanged & " files unchanged", vbInformation, "Rename files"
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, AllowFormattingCells:=True, AllowInsertingRows:=True, AllowDeletingRows:=True, AllowSorting:=True
    Exit Sub
BadFile:
    Range("B" & RowCounter + Range("Filelist").Row & ":F" & RowCounter + Range("Filelist").Row).Interior.ColorIndex = ProblemColour
    Range("E" & RowCounter + Range("Filelist").Row).Value = "P"
    Range("Filelist").Offset(RowCounter, 0).Select
    Application.ScreenUpdating = True
    MsgBox "Problem with file..." & Chr(13) & Chr(13) & NextFile & Chr(13) & Chr(13) & "Error=" & Err.Description, vbCritical, "Rename files"
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, AllowFormattingCells:=True, AllowInsertingRows:=True, AllowDeletingRows:=True, AllowSorting:=True
End Sub

Sub ClearList()
Attribute ClearList.VB_ProcData.VB_Invoke_Func = " \n14"
'Clear file list
    ActiveSheet.Unprotect
    Range("Filelist").Offset(1, 0).Select
    RowCounter = 0
    Range("B" & ActiveCell.Row & ":F65536").ClearContents
    Range("B" & ActiveCell.Row & ":F65536").Interior.ColorIndex = 2
    [A1].Select
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, AllowFormattingCells:=True, AllowInsertingRows:=True, AllowDeletingRows:=True, AllowSorting:=True
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
