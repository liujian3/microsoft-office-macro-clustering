Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Modul1"
' 2011.08.15 V3.01
' Checking CSV format when using QS/QI file
' If file is saved with horizontal format, a message box is displayed and the input will be interrupted
'
' 2011.08.24 V3.01
' If nominal, uppter tolerances or lower tolerances are empty, cells in report are empty too; in prevous version "0"
' was displayed in these cells
'
'2011.11.16 V3.02
'Bugfix of ignoring changed tolerances
'
'2011.11.23 V3.03
'Indication of new part includes checking label, feature and output item (prevously label and feature only was checked)
'
'####################################################################################################################


Const HKEY_CURRENT_USER = &H80000001            '   Constant for reg folder
Const HKEY_LOCAL_MACHINE = &H80000002           '   Constant for reg folder

Global objReg As Object                         '   Reserved for Reg object getting the file name
Global selectDir As Variant                     '   Reserved for reading the the file name from common file dialog
Global FileDlg As FileDialog                    '   Defines the dialog

Global strReport As String                      '   Reserved for the name of this worbook
Global strListChr As String                     '   Defines the list separator
Global strFolderName As String                  '   Defines the folder of the csv file reading from Reg
Global strFileName As String                    '   Defines the file name reading from Reg and also used for save file as
Global intMessage As Integer                    '   Reserved for message box answers
Global strFileText As String                    '   Reads the files text to get the list separator
Global strVal As String                         '   Reseved for building up text bitween list separators
Global lngLoop As Long                          '   Common counter
Global lngA As Long                             '   Common counter
Global lngB As Long                             '   Common counter
Global lngC As Long                             '   Common counter
Global lngD As Long                             '   Common counter
Global lngE As Long                             '   Common counter
Global lngF As Long                             '   Common counter
Global lngCount As Long                         '   Common counter
Global lngCol As Long                           '   Counter for coloumns
Global xlsLineNo As Long                        '   Counter for lines
Global strLabel As String                       '   Reserved for feature label
Global strFeature As String                     '   Reserved for feature type
Global strItem As String                        '   Reserved for output item
Global dblActual As Double                      '   Reserved for actual value
Global dblNominal As Double                     '   Reserved for nominal value
Global strLoTol As String                       '   Reserved for upper tolerance as a string
Global strUpTol As String                       '   Reseved for lower tolerance as a string
Global strNominal As String                     '   Reerved for nominal value as a string
Global dblUpTol As Double                       '   Reserved for upper toleranca as a number
Global dblLoTol As Double                       '   Reserved for lower tolerance as a number
Global strInstVer As String                     '   Defines the installed version of QS/QI reading from Reg to get the right Reg folder
Global strSaveCSV As String                     '   Defines the save type of QS/QI
Global strQSQI As String                        '   Reserved for getting the installed software; whether QS or QI
Global lngSheetQVQS As Long                     '   Defines the page for parameter translation of QS/QI and QV
Global strSoftware As String                    '   Reserved to get the installed Software to handle the data transfer; whether QS/QI or QV
Global strLang As String                        '   Reserved for language of report
Global strInfo1 As String                       '   Message text
Global strInfo2 As String                       '   Message text
Global strInfo3 As String                       '   Message text
Global strInfo4 As String                       '   Message text
Global strFirstItem As String                   '   Reserved for getting the first data set
Global lngDataLine As Long                      '   Counter for line number
Global intTol As Integer                        '   Defines the tolerance type; whether upper/lower or form/position
Global dblMidTol As Double                      '   Defines the middle of tolerance range
Global dblMidNom As Double                      '   Defines the middle of nominal regarding the tolerance range
Global dblActPos As Double                      '   Defines the actual value position regarding the middle nominal value
Global dblTolPos As Double                      '   Defines the deviation inbitween a range of 0 and 1
Global strTolPos As String                      '   Converts the deviation into a graphical view
Global lngCopyRange As Long                     '   Defines the range which is copied below teh actual sheet when its full
Global lngPageNo As Long                        '   Counter for page number
Global lngCountPage As Long                     '   counter for page number
Global lngCountLine As Long                     '   Defines which is the first/next data line in report sheet
Global strPassFail As String                    '   Reserved for indicating good or no good values
Global strSaveTime As String                    '   Defines the time stamp as a part of save file name
Global lngSheetDel As Long                      '   Reserved for the last line number of a report sheet to reset the report
Global lngLastLine As Long                      '   Define the actual last data line in a report sheet
Global lngErr As Long                           '   Reserved for reading out a error number
Global strOutputType As String                  '   Reserved for reading csv data whether from CSVReport (0) or JMPExport (1)

Option Explicit

Sub Auto_Open()

    strReport = ActiveWorkbook.Name
    Workbooks(strReport).Sheets(4).Visible = 0
    Workbooks(strReport).Sheets(5).Visible = 0
    Workbooks(strReport).Sheets(6).Visible = 0
    Workbooks(strReport).Sheets(7).Visible = 0
    ActiveWorkbook.Save


End Sub

Sub SHOW_ALL_SHEETS()

    strReport = ActiveWorkbook.Name
    Workbooks(strReport).Sheets(4).Visible = -1
    Workbooks(strReport).Sheets(5).Visible = -1
    Workbooks(strReport).Sheets(6).Visible = -1
    Workbooks(strReport).Sheets(7).Visible = -1
    ActiveWorkbook.Save


End Sub



' Defines whether data are from QS/QI or QV

Sub IMPORT_CSV_DATA()
    
    strReport = ActiveWorkbook.Name
    strLang = Workbooks(strReport).Sheets(1).listLang.Value
    lngCol = 1
    xlsLineNo = 1
    
    Do
        lngCol = lngCol + 1
    Loop Until Workbooks(strReport).Sheets(4).Cells(xlsLineNo, lngCol).Value = strLang
    
    strInfo1 = Workbooks(strReport).Sheets(4).Cells(20, lngCol).Value
    strInfo2 = Workbooks(strReport).Sheets(4).Cells(21, lngCol).Value
    strInfo3 = Workbooks(strReport).Sheets(4).Cells(22, lngCol).Value
    strInfo4 = Workbooks(strReport).Sheets(4).Cells(26, lngCol).Value
    
    If Workbooks(strReport).Sheets(1).optQV.Value = True Then
        strSoftware = "QV"
    ElseIf Workbooks(strReport).Sheets(1).optQS.Value = True Then
        strSoftware = "QS"
    End If
    
'   Gets the file name from the Reg or from a FileOpenDialog
    
    Select Case Workbooks(strReport).Sheets(1).check_CSV.Value
        Case True
            Call GET_CSV_FILENAME_BY_DIALOG
            
        Case False
            Call GET_CSV_FILENAME_BY_REG
            
    End Select
    
    Call GET_CSV_DATA
    Select Case strSoftware
        Case "QV"
            Call TRANSFER_QV_DATA
        Case "QS"
            Call TRANSFER_QSQI_DATA
    End Select ' strStoftware
    
End Sub ' IMPORT_CSV_DATA


' Opens a dialog to get the csv file name

Sub GET_CSV_FILENAME_BY_DIALOG()
    
    strFileName = ""
    Set FileDlg = Application.FileDialog(msoFileDialogOpen)
    FileDlg.InitialFileName = ""
    FileDlg.Title = strInfo1
    With FileDlg
        FileDlg.Filters.Clear
        FileDlg.Filters.Add strInfo4, "*.*", 1
        FileDlg.Filters.Add strInfo2, "*.csv", 1
        FileDlg.Show
        For Each selectDir In FileDlg.SelectedItems
            strFileName = selectDir
        Next selectDir
    End With
    Set FileDlg = Nothing
        
    If strFileName = "" Then
        Workbooks(strReport).Sheets(1).listLang.Enabled = True
        End
    End If
    
End Sub ' GET_CSV_FILENAME_BY_DIALOG()

Sub GET_CSV_FILENAME_BY_REG()

    Select Case strSoftware
        Case "QV"
            Call GET_FILENAME_QV_CSV
        Case "QS"
            Call GET_FILENAME_QSQI_CSV
    End Select
    
    
End Sub ' GET_CSV_FILENAME_BY_REG()

' Get the csv file name from QVReport Reg

Sub GET_FILENAME_QV_CSV()
    
    If Workbooks(strReport).Sheets(4).Range("B6").Value = "1" Then
        strOutputType = "JMPExportInfo Config"
    Else
        strOutputType = "QVReportCSVInfo Config"
    End If
    
    Set objReg = GetObject("winmgmts:\\.\root\default:StdRegProv")
    objReg.GetStringValue HKEY_CURRENT_USER, "SOFTWARE\Mitutoyo\QVReport\" & strOutputType, "OutputFolder", strFolderName
    objReg.GetStringValue HKEY_CURRENT_USER, "SOFTWARE\Mitutoyo\QVReport\" & strOutputType, "OrgFileName", strFileName
    
    strFileName = strFolderName & strFileName
    
    If Dir(strFileName) = "" Then
        intMessage = MsgBox(strInfo3, vbCritical + vbYesNo, " ")
        If intMessage = 6 Then
            Call GET_CSV_FILENAME_BY_DIALOG
        Else
            Workbooks(strReport).Sheets(1).listLang.Enabled = True
            End
        End If
    End If
    
End Sub ' GET_FILENAME_QV_CSV

' Get the csv file name from QS/QI Reg

Sub GET_FILENAME_QSQI_CSV()
    
    For lngLoop = 1 To 2
        If lngLoop = 1 Then strQSQI = "QSPAK" Else strQSQI = "QIPAK"
        
        On Error Resume Next
        Set objReg = GetObject("winmgmts:\\.\root\default:StdRegProv")
        objReg.GetStringValue HKEY_LOCAL_MACHINE, "SOFTWARE\Mitutoyo\" & strQSQI & "\InstVer", "InstVer", strInstVer
        
        If strInstVer <> "" Then Exit For
    Next
    
    strInstVer = Left(strInstVer, Len(strInstVer) - 2)
    
    For lngLoop = 1 To 3
        If lngLoop = 1 Then strSaveCSV = "CSVDIR"
        If lngLoop = 2 Then strSaveCSV = "CSVRepeatDIR"
        If lngLoop = 3 Then strSaveCSV = "PartproDIR"
    
        On Error Resume Next
        objReg.GetStringValue HKEY_LOCAL_MACHINE, "SOFTWARE\Mitutoyo\" & strQSQI & "\" & strInstVer & "\DIRECTORY", strSaveCSV, strFolderName
        strFileName = strFolderName & Dir(strFolderName & "*.csv")
        If strFileName <> "" Then
            If Right(strFileName, 3) = "csv" Then Exit For
        End If
    Next
    
    If Right(strFileName, 3) <> "csv" And Right(strFileName, 3) <> "CSV" Then
        intMessage = MsgBox(strInfo3, vbCritical + vbYesNo, " ")
        If intMessage = 6 Then Call GET_CSV_FILENAME_BY_DIALOG Else End
    End If
    
End Sub ' GET_FILENAME_QS_CSV

'   Open the csv file to get the list separator

Sub GET_CSV_DATA()
    
    strListChr = ""
    strReport = ActiveWorkbook.Name
    
    Select Case strSoftware
        Case "QV"
            Open strFileName For Input As #1
                Line Input #1, strFileText
            Close #1
    
            For lngLoop = 1 To Len(strFileText)
                If Asc(Mid(strFileText, lngLoop, 1)) = 44 Or Asc(Mid(strFileText, lngLoop, 1)) = 59 Then
                    strListChr = Chr(Asc(Mid(strFileText, lngLoop, 1)))
                    Exit For
                End If
            Next lngLoop
            
        Case "QS"
            Open strFileName For Input As #1
                Line Input #1, strFileText
                strInfo3 = Right(strFileText, 2)
                If strInfo3 = "H," Then
                   
                   lngCol = 1
                    Do
                        lngCol = lngCol + 1
                    Loop Until Workbooks(strReport).Sheets(4).Cells(1, lngCol).Value = strLang
                    
                    strInfo3 = Workbooks(strReport).Sheets(4).Cells(27, lngCol).Value
                    intMessage = MsgBox(strInfo3, vbOKOnly)
                    Call DELETE_DATA
                    
                    End
                End If
                Line Input #1, strFileText
            Close #1
            strListChr = Left(strFileText, 1)
            
    End Select ' strSoftware
    
    
'   Reading the csv file data an d copy it in the sheet "CSV-Orig"
    
    lngCol = 65
    xlsLineNo = 1
    strVal = ""
    
    Open strFileName For Input As #1
        Do
            Line Input #1, strFileText
            For lngLoop = 1 To Len(strFileText)
                If Mid(strFileText, lngLoop, 1) = strListChr Then
                    Workbooks(strReport).Sheets(3).Range(Chr(lngCol) & xlsLineNo).Value = strVal
                    lngCol = lngCol + 1
                    strVal = ""
                ElseIf lngLoop = Len(strFileText) Then
                    strVal = strVal & Mid(strFileText, lngLoop, 1)
                    Workbooks(strReport).Sheets(3).Range(Chr(lngCol) & xlsLineNo).Value = strVal
                    strVal = ""
                Else
                    strVal = strVal & Mid(strFileText, lngLoop, 1)
                End If
            Next lngLoop
            xlsLineNo = xlsLineNo + 1
            lngCol = 65
        Loop Until EOF(1)
    Close #1
    
End Sub ' GET_CSV_DATA

' Transfer QV data from sheet "CSV-Orig" in sheet "CSV-Transfer"

Sub TRANSFER_QV_DATA()
    
    On Error Resume Next
    dblActual = Workbooks(strReport).Sheets(3).Range("E1").Value
    
    lngErr = Err.Number
    If lngErr = 0 Then
        lngA = 1
        lngB = 0
    Else
        lngA = 2
        lngB = 1
    End If
    
    For lngLoop = lngA To xlsLineNo - 1
        strLabel = Workbooks(strReport).Sheets(3).Range("B" & lngLoop).Value
        dblNominal = Workbooks(strReport).Sheets(3).Range("F" & lngLoop).Value
        dblUpTol = Workbooks(strReport).Sheets(3).Range("H" & lngLoop).Value
        dblLoTol = Workbooks(strReport).Sheets(3).Range("I" & lngLoop).Value
        dblActual = Workbooks(strReport).Sheets(3).Range("E" & lngLoop).Value
        strPassFail = Workbooks(strReport).Sheets(3).Range("J" & lngLoop).Value
        strFeature = Workbooks(strReport).Sheets(3).Range("D" & lngLoop).Value
        strItem = strFeature
        
        Call GET_FEATURE
        
        Workbooks(strReport).Sheets(2).Range("A" & lngLoop - lngB).Value = strLabel
        Workbooks(strReport).Sheets(2).Range("B" & lngLoop - lngB).Value = strFeature
        Workbooks(strReport).Sheets(2).Range("C" & lngLoop - lngB).Value = dblNominal
        Workbooks(strReport).Sheets(2).Range("D" & lngLoop - lngB).Value = dblUpTol
        Workbooks(strReport).Sheets(2).Range("E" & lngLoop - lngB).Value = dblLoTol
        Workbooks(strReport).Sheets(2).Range("F" & lngLoop - lngB).Value = dblActual
        If strPassFail <> "" Then
            If dblActual > dblNominal + dblUpTol Or dblActual < dblNominal + dblLoTol Then strPassFail = "NG" Else strPassFail = "G"
            Workbooks(strReport).Sheets(2).Range("G" & lngLoop - lngB).Value = strPassFail
        End If
        
        Workbooks(strReport).Sheets(2).Range("H" & lngLoop - 1).Value = intTol
        Workbooks(strReport).Sheets(2).Range("I" & lngLoop - lngB).Value = strItem
        
    Next lngLoop
    
End Sub ' TRANSFER_QV_DATA

' Transfer QS/QI data from sheet "CSV-Orig" in sheet "CSV-Transfer"

Sub TRANSFER_QSQI_DATA()
    
    
    lngA = 9
    lngB = xlsLineNo - 1
    lngD = 1
    
    Do
        lngA = lngA + 1
    Loop Until Workbooks(strReport).Sheets(3).Cells(5, lngA).Value = ""
    
    For lngC = 9 To lngA - 1
        xlsLineNo = lngB
        For lngLoop = 5 To xlsLineNo
            strLabel = Workbooks(strReport).Sheets(3).Range("H" & lngLoop).Value
            strNominal = Workbooks(strReport).Sheets(3).Range("D" & lngLoop).Value
            strUpTol = Workbooks(strReport).Sheets(3).Range("C" & lngLoop).Value
            strLoTol = Workbooks(strReport).Sheets(3).Range("B" & lngLoop).Value
            dblActual = Workbooks(strReport).Sheets(3).Cells(lngLoop, lngC).Value
            strFeature = Workbooks(strReport).Sheets(3).Range("F" & lngLoop).Value
            strItem = strFeature
            
            Call GET_FEATURE
        
            Workbooks(strReport).Sheets(2).Range("A" & lngD).Value = strLabel
            Workbooks(strReport).Sheets(2).Range("B" & lngD).Value = strFeature
            Workbooks(strReport).Sheets(2).Range("C" & lngD).Value = strNominal
            Workbooks(strReport).Sheets(2).Range("D" & lngD).Value = strUpTol
            Workbooks(strReport).Sheets(2).Range("E" & lngD).Value = strLoTol
            Workbooks(strReport).Sheets(2).Range("F" & lngD).Value = dblActual
        
            If strNominal <> "" And strUpTol <> "" Then
                dblNominal = CDbl(strNominal)
                dblUpTol = CDbl(strUpTol)
                dblLoTol = CDbl(strLoTol)
                If dblActual > dblNominal + dblUpTol Or dblActual < dblNominal + dblLoTol Then strPassFail = "NG" Else strPassFail = "G"
                Workbooks(strReport).Sheets(2).Range("G" & lngD).Value = strPassFail
            End If
            
            Workbooks(strReport).Sheets(2).Range("H" & lngD).Value = intTol
            Workbooks(strReport).Sheets(2).Range("I" & lngD).Value = strItem
            
            lngD = lngD + 1
        Next lngLoop
    Next lngC

End Sub ' TRANSFER_QSQI_DATA

'   Regarding the selected language the feature items will be selected

Sub GET_FEATURE()
    
    strReport = ActiveWorkbook.Name
    strLang = Workbooks(strReport).Sheets(1).listLang.Value
    lngCol = 1
    lngCount = 1
    
    Select Case strSoftware
        Case "QV"
            lngSheetQVQS = 5
        
        Case "QS"
            lngSheetQVQS = 6
    End Select ' strSoftware
    
    Do
        lngCol = lngCol + 1
    Loop Until Workbooks(strReport).Sheets(lngSheetQVQS).Cells(1, lngCol).Value = strLang
    
    Do
        lngCount = lngCount + 1
    Loop Until Workbooks(strReport).Sheets(lngSheetQVQS).Range("A" & lngCount).Value = strFeature
    
    intTol = Workbooks(strReport).Sheets(lngSheetQVQS).Range("B" & lngCount).Value
    strFeature = Workbooks(strReport).Sheets(lngSheetQVQS).Cells(lngCount, lngCol).Value
    
    
End Sub ' GET_FEATURE()
Attribute VB_Name = "Modul2"
Option Explicit

'   data will be transfered from sheet "CSV-Transfer" to sheet "Report"

Sub TRANSFER_DATA_TO_REPORT()
    
    strReport = ActiveWorkbook.Name
    lngPageNo = Workbooks(strReport).Sheets(4).Range("B1").Value
    xlsLineNo = Workbooks(strReport).Sheets(4).Range("B2").Value
    lngCountLine = Workbooks(strReport).Sheets(4).Range("B3").Value
    lngCopyRange = Workbooks(strReport).Sheets(4).Range("B4").Value
    lngSheetDel = Workbooks(strReport).Sheets(4).Range("B5").Value
    strFirstItem = Workbooks(strReport).Sheets(2).Range("A1").Value & Workbooks(strReport).Sheets(2).Range("B1").Value & Workbooks(strReport).Sheets(2).Range("I1").Value
    
    lngDataLine = 1
    
    Do
    
        strLabel = Workbooks(strReport).Sheets(2).Range("A" & lngDataLine).Value
        strFeature = Workbooks(strReport).Sheets(2).Range("B" & lngDataLine).Value
        strNominal = Workbooks(strReport).Sheets(2).Range("C" & lngDataLine).Value
        strUpTol = Workbooks(strReport).Sheets(2).Range("D" & lngDataLine).Value
        strLoTol = Workbooks(strReport).Sheets(2).Range("E" & lngDataLine).Value
        dblActual = Workbooks(strReport).Sheets(2).Range("F" & lngDataLine).Value
        strPassFail = Workbooks(strReport).Sheets(2).Range("G" & lngDataLine).Value
        intTol = Workbooks(strReport).Sheets(2).Range("H" & lngDataLine).Value
        strItem = Workbooks(strReport).Sheets(2).Range("I" & lngDataLine).Value
        
        If lngDataLine > 1 And _
            strLabel & strFeature & strItem = strFirstItem And _
            lngCountLine <> lngLastLine Then
            xlsLineNo = xlsLineNo + 1
            lngCountLine = lngCountLine + 1
        End If
        
        Call fnGET_LAST_LINE(lngPageNo)
        Call COPY_PAGE
    
        
        
        Workbooks(strReport).Sheets(1).Range("B" & xlsLineNo).Value = strLabel
        Workbooks(strReport).Sheets(1).Range("F" & xlsLineNo).Value = strFeature
        
        If strUpTol <> "" Then
            Workbooks(strReport).Sheets(1).Range("P" & xlsLineNo).Value = CDbl(strUpTol)
            dblUpTol = CDbl(strUpTol)
        End If
        
        If strLoTol <> "" Then
            Workbooks(strReport).Sheets(1).Range("T" & xlsLineNo).Value = CDbl(strLoTol)
            dblLoTol = CDbl(strLoTol)
        End If
        
        If strNominal <> "" Then
            Workbooks(strReport).Sheets(1).Range("K" & xlsLineNo).Value = CDbl(strNominal)
            dblNominal = CDbl(strNominal)
        End If
        
        Workbooks(strReport).Sheets(1).Range("V" & xlsLineNo).Value = dblActual
        
        If strPassFail <> "" Then Call SET_TOL
        
        lngDataLine = lngDataLine + 1
        xlsLineNo = xlsLineNo + 1
        lngCountLine = lngCountLine + 1
    
    Loop Until Workbooks(strReport).Sheets(2).Range("B" & lngDataLine).Value = ""
    
    Call SET_PARAMETER
    Call COUNT_PAGE
    Call RENAME_CSV_FILE
    
End Sub ' TRANSFER_DATA_TO_REPORT

Function fnGET_LAST_LINE(lngPageNo As Long)

'   Checking whether the data has to transfer to the first page or to following pages
'   Fisrt page has 30 lines following have 40

    Select Case lngPageNo
        Case 1
            lngLastLine = 31
        Case Else
            lngLastLine = 41
    End Select

End Function ' fnGet_Last_Line(lngPageNo As Long)

Sub COPY_PAGE()

'   If a page is full the sheet "Report(empty)" will be copied below the actual page
'   Printing range will be modified

    If lngCountLine = lngLastLine Then
        lngCountLine = 1
        xlsLineNo = xlsLineNo + 5
        lngPageNo = lngPageNo + 1
                    
        Workbooks(strReport).Sheets(7).Rows("1:" & lngCopyRange).Copy
        Workbooks(strReport).Sheets(1).Activate
        Workbooks(strReport).Sheets(1).Rows((lngCopyRange + 1) & ":" & (lngCopyRange + 1)).Select
        ActiveSheet.Paste
        Application.CutCopyMode = False
        Workbooks(strReport).Sheets(1).PageSetup.PrintArea = "$A$1:$AF$" & lngCopyRange + 45
        Workbooks(strReport).Sheets(1).HPageBreaks.Add Before:=Rows(lngCopyRange + 1 & ":" & lngCopyRange + 1)
        
'       Get new page number, printing range and last sheet position
        
        Workbooks(strReport).Sheets(1).Range("AA" & lngCopyRange + 45).Value = lngPageNo
                    
        lngCopyRange = lngCopyRange + 45
        lngSheetDel = lngSheetDel + 46
        
    End If

End Sub ' CopyPage()



Sub SET_TOL()

'   Middle of tolerance and the according middle of nominal is calculated

    
    If intTol = 1 Then
        dblMidNom = dblNominal + (dblUpTol + dblLoTol) / 2
        dblMidTol = (dblUpTol - dblLoTol) / 2
        dblActPos = dblMidNom - dblActual
    Else
        dblMidNom = 0
        dblMidTol = dblUpTol
        dblActPos = dblActual
    End If
        
'   Graphical view of deviation is displayed in the report
'   Deviation is according to middle of tolerance not to nominal
        
    Select Case strPassFail
        Case "G"
            
            Workbooks(strReport).Sheets(1).Range("B" & xlsLineNo & ":AD" & xlsLineNo).Font.ColorIndex = 1
            
            If dblActual < dblMidNom Then
                dblActPos = dblMidNom - dblActual
                dblTolPos = dblActPos / dblMidTol
        
                If dblTolPos <= 0.25 Then strTolPos = "-"
                If dblTolPos <= 0.5 And dblTolPos >= 0.25 Then strTolPos = "--"
                If dblTolPos <= 0.75 And dblTolPos >= 0.5 Then strTolPos = "---"
                If dblTolPos <= 1 And dblTolPos >= 0.75 Then strTolPos = "----"
                If dblTolPos = 1 Then strTolPos = "----"
            Else
                dblActPos = dblActual - dblMidNom
                dblTolPos = dblActPos / dblMidTol
                
                If dblTolPos <= 0.25 Then strTolPos = "+"
                If dblTolPos <= 0.5 And dblTolPos >= 0.25 Then strTolPos = "++"
                If dblTolPos <= 0.75 And dblTolPos >= 0.5 Then strTolPos = "+++"
                If dblTolPos <= 1 And dblTolPos >= 0.75 Then strTolPos = "++++"
                If dblTolPos = 1 Then strTolPos = "++++"
            End If
            
            Workbooks(strReport).Sheets(1).Range("AB" & xlsLineNo).Value = strTolPos
            
        Case "NG"
            
            Workbooks(strReport).Sheets(1).Range("B" & xlsLineNo & ":AD" & xlsLineNo).Font.ColorIndex = 3
            
            If dblActual < dblMidNom Then strTolPos = "<<--"
            If dblActual > dblMidNom Then strTolPos = "-->>"
            
            Workbooks(strReport).Sheets(1).Range("AD" & xlsLineNo).Value = strTolPos
            
    End Select

End Sub ' SetTol

Sub COUNT_PAGE()

'   Total number pages are updated in report sheets

    xlsLineNo = 46
    For lngCountPage = 1 To lngPageNo
        Workbooks(strReport).Sheets(1).Range("AE" & xlsLineNo).Value = lngPageNo
        xlsLineNo = xlsLineNo + 45
    Next

End Sub ' Count_Page()


Sub SET_PARAMETER()

    Workbooks(strReport).Sheets(4).Range("B1").Value = lngPageNo
    Workbooks(strReport).Sheets(4).Range("B2").Value = xlsLineNo + 1
    Workbooks(strReport).Sheets(4).Range("B3").Value = lngCountLine + 1
    Workbooks(strReport).Sheets(4).Range("B4").Value = lngCopyRange
    Workbooks(strReport).Sheets(4).Range("B5").Value = lngSheetDel

End Sub ' Set_Parameter


Sub RENAME_CSV_FILE()
    
    strSaveTime = Format(Date, "YY-MM-DD") & "_" & Format(Time, "HH-MM-SS")
    Name strFileName As Left(strFileName, Len(strFileName) - 4) & "_" & strSaveTime & ".txt"
    
End Sub ' RENAME_CSV_FILE



Attribute VB_Name = "Modul3"
Option Explicit

'   Report will be saved; file name contains a timp stamp

Sub SAVE_REPORT()
    
    strSaveTime = Format(Date, "YY-MM-DD") & "_" & Format(Time, "HH-MM-SS")
    strFileName = ""
    
    Set FileDlg = Application.FileDialog(msoFileDialogSaveAs)
    FileDlg.InitialFileName = "Report_" & strSaveTime & ".xls"
    
    With FileDlg
        FileDlg.Show
        For Each selectDir In FileDlg.SelectedItems
            strFileName = selectDir
        Next selectDir
    End With
    Set FileDlg = Nothing
        
    If strFileName = "" Then
        End
    Else
        ActiveWorkbook.SaveAs strFileName
    End If

End Sub


'   All data values and additional pages are deleted
'   Parameters are set to their default values

Sub DELETE_DATA()

    strReport = ActiveWorkbook.Name
    lngSheetDel = Workbooks(strReport).Sheets(4).Range("B5").Value
    
    If lngSheetDel > 47 Then
        Workbooks(strReport).Sheets(1).Rows("47:" & lngSheetDel).Delete
    End If
    
    Workbooks(strReport).Sheets(1).Range("B15:AD44").Font.ColorIndex = 1
    Workbooks(strReport).Sheets(1).Range("B15:P44").Value = ""
    Workbooks(strReport).Sheets(1).Range("T15:AD44").Value = ""
    
    Workbooks(strReport).Sheets(2).Cells.Value = ""
    Workbooks(strReport).Sheets(3).Cells.Value = ""
    
    Workbooks(strReport).Sheets(1).Range("AE46").Value = "1"
    Workbooks(strReport).Sheets(4).Range("B1").Value = "1"
    Workbooks(strReport).Sheets(4).Range("B2").Value = "15"
    Workbooks(strReport).Sheets(4).Range("B3").Value = "1"
    Workbooks(strReport).Sheets(4).Range("B4").Value = "46"
    Workbooks(strReport).Sheets(4).Range("B5").Value = "47"
    
    Workbooks(strReport).Sheets(1).listLang.Enabled = True
    
End Sub ' DELETE_DATA

Sub PRINT_REPORT()

    Workbooks(strReport).Sheets(1).PrintOut Copies:=1, Collate:=True

End Sub ' PRINT_REPORT

Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "optFP, 19, 0, MSForms, OptionButton"
Attribute VB_Control = "optQS, 18, 1, MSForms, OptionButton"
Attribute VB_Control = "optQV, 17, 2, MSForms, OptionButton"
Attribute VB_Control = "check_CSV, 15, 3, MSForms, CheckBox"
Attribute VB_Control = "cmd_Daten, 8, 4, MSForms, CommandButton"
Attribute VB_Control = "cmdDel, 27, 5, MSForms, CommandButton"
Attribute VB_Control = "listLang, 22, 7, MSForms, ComboBox"
Attribute VB_Control = "Check_Print, 24, 8, MSForms, CheckBox"
Attribute VB_Control = "cmdSave, 28, 9, MSForms, CommandButton"
'Report_V3 - 13.04.2011

'   Report for QSPak, QIPak and QVPak
'   Variable are listed in Modul 1

Option Explicit



'   Starts the macro to get csv data

Private Sub cmd_Daten_Click()

    strReport = ActiveWorkbook.Name
    Workbooks(strReport).Sheets(1).listLang.Enabled = False
    
    Call IMPORT_CSV_DATA            '   Modul 1
    Call TRANSFER_DATA_TO_REPORT    '   Modul 2
    
    Workbooks(strReport).Sheets(1).Range("B15").Activate
    If Workbooks(strReport).Sheets(1).Check_Print.Value = True Then Call PRINT_REPORT    ' Modul 3
    

End Sub


Private Sub cmdSave_Click()

    Call SAVE_REPORT                '   Modul 3

End Sub

' Updates the language list

Sub listLang_GotFocus()
        
    strReport = ActiveWorkbook.Name
    xlsLineNo = 1
    
    Do
        xlsLineNo = xlsLineNo + 1
    Loop Until Workbooks(strReport).Sheets(4).Range("D" & xlsLineNo).Value = ""
    
    Workbooks(strReport).Sheets(1).listLang.List = Workbooks(strReport).Sheets(4).Range("D2:D" & xlsLineNo - 1).Value
    
 End Sub

Private Sub cmdDel_Click()

    Call DELETE_DATA                '   Modul 3

End Sub

'   Updates the language of text in Report according to selected language

Sub listLang_Change()
    
    strReport = ActiveWorkbook.Name
    xlsLineNo = 1
    
    Do
        xlsLineNo = xlsLineNo + 1
    Loop Until Workbooks(strReport).Sheets(4).Range("D" & xlsLineNo).Value = ""
    
    Workbooks(strReport).Sheets(1).listLang.List = Workbooks(strReport).Sheets(4).Range("D2:D" & xlsLineNo - 1).Value
    
    
    strReport = ActiveWorkbook.Name
    strLang = Workbooks(strReport).Sheets(1).listLang.Value
    lngCol = 1
    xlsLineNo = 1
    
    Do
        lngCol = lngCol + 1
    Loop Until Workbooks(strReport).Sheets(4).Cells(xlsLineNo, lngCol).Value = strLang
    
    Workbooks(strReport).Sheets(1).Range("A2").Value = Workbooks(strReport).Sheets(4).Cells(2, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("B3").Value = Workbooks(strReport).Sheets(4).Cells(3, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("B13").Value = Workbooks(strReport).Sheets(4).Cells(4, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("F13").Value = Workbooks(strReport).Sheets(4).Cells(5, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("K13").Value = Workbooks(strReport).Sheets(4).Cells(6, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("P13").Value = Workbooks(strReport).Sheets(4).Cells(7, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("P14").Value = Workbooks(strReport).Sheets(4).Cells(8, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("T14").Value = Workbooks(strReport).Sheets(4).Cells(9, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("V13").Value = Workbooks(strReport).Sheets(4).Cells(10, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("AB13").Value = Workbooks(strReport).Sheets(4).Cells(11, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("AB14").Value = Workbooks(strReport).Sheets(4).Cells(12, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("AD14").Value = Workbooks(strReport).Sheets(4).Cells(13, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("Y46").Value = Workbooks(strReport).Sheets(4).Cells(14, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("AC46").Value = Workbooks(strReport).Sheets(4).Cells(15, lngCol).Value
    Workbooks(strReport).Sheets(7).Range("B2").Value = Workbooks(strReport).Sheets(4).Cells(4, lngCol).Value
    Workbooks(strReport).Sheets(7).Range("F2").Value = Workbooks(strReport).Sheets(4).Cells(5, lngCol).Value
    Workbooks(strReport).Sheets(7).Range("K2").Value = Workbooks(strReport).Sheets(4).Cells(6, lngCol).Value
    Workbooks(strReport).Sheets(7).Range("P2").Value = Workbooks(strReport).Sheets(4).Cells(7, lngCol).Value
    Workbooks(strReport).Sheets(7).Range("P3").Value = Workbooks(strReport).Sheets(4).Cells(8, lngCol).Value
    Workbooks(strReport).Sheets(7).Range("T3").Value = Workbooks(strReport).Sheets(4).Cells(9, lngCol).Value
    Workbooks(strReport).Sheets(7).Range("V2").Value = Workbooks(strReport).Sheets(4).Cells(10, lngCol).Value
    Workbooks(strReport).Sheets(7).Range("AB2").Value = Workbooks(strReport).Sheets(4).Cells(11, lngCol).Value
    Workbooks(strReport).Sheets(7).Range("AB3").Value = Workbooks(strReport).Sheets(4).Cells(12, lngCol).Value
    Workbooks(strReport).Sheets(7).Range("AD3").Value = Workbooks(strReport).Sheets(4).Cells(13, lngCol).Value
    Workbooks(strReport).Sheets(7).Range("Y45").Value = Workbooks(strReport).Sheets(4).Cells(14, lngCol).Value
    Workbooks(strReport).Sheets(7).Range("AC45").Value = Workbooks(strReport).Sheets(4).Cells(15, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("B9").Value = Workbooks(strReport).Sheets(4).Cells(23, lngCol).Value
    Workbooks(strReport).Sheets(1).Range("B11").Value = Workbooks(strReport).Sheets(4).Cells(24, lngCol).Value
    
    Workbooks(strReport).Sheets(1).check_CSV.Caption = Workbooks(strReport).Sheets(4).Cells(16, lngCol).Value
    Workbooks(strReport).Sheets(1).cmd_Daten.Caption = Workbooks(strReport).Sheets(4).Cells(17, lngCol).Value
    Workbooks(strReport).Sheets(1).cmdSave.Caption = Workbooks(strReport).Sheets(4).Cells(18, lngCol).Value
    Workbooks(strReport).Sheets(1).Check_Print.Caption = Workbooks(strReport).Sheets(4).Cells(19, lngCol).Value
    Workbooks(strReport).Sheets(1).cmdDel.Caption = Workbooks(strReport).Sheets(4).Cells(25, lngCol).Value
    
End Sub

Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserDialog"
Attribute VB_Base = "0{B3670236-0F5A-4CE8-92A4-47630A1B1C89}{44A26980-4BD4-4945-A5B0-131848A847BB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmd_Input_Click()

    Sheets(1).Range("E9").Value = Now
    
    Sheets(1).Range("W9").Value = UserDialog.txt_ArtNo.Text
    Sheets(1).Range("E11").Value = UserDialog.txt_operator.Text
    Sheets(1).Range("W11").Value = UserDialog.txt_charge.Text

    UserDialog.Hide

End Sub

Private Sub cmdCancel_Click()

    UserDialog.Hide
    End

End Sub

Private Sub opt_G_NG_Click()
    
    intTol = 0
    
End Sub

Private Sub opt_graphTol_Click()

    intTol = 1
    
End Sub

Private Sub Check_Print_Click()

    If Check_Print.Value = 1 Then intPrint = 1 Else intPrint = 0

End Sub

Private Sub Check_Save_Click()

    If Check_Save.Value = 1 Then intSave = 1 Else intSave = 0
    
End Sub

Private Sub option_delete_Click()
    
    intDelete = 1
    
End Sub

Private Sub Option_rename_Click()

    intDelete = 0

End Sub


INQUEST-PP=macro
