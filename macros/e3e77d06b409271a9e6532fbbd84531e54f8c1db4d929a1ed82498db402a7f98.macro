Attribute VB_Name = "Module1"
Sub Clear()
Attribute Clear.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Clear Macro
'

'
    Range("B10").Select
    Selection.ClearContents
    Selection.ClearContents
    Range("B11").Select
    Selection.ClearContents
    Range("B13").Select
    Selection.ClearContents
    Range("B14:D14").Select
    Selection.ClearContents
End Sub
Attribute VB_Name = "Module2"
Sub CheckBox256_Click()

End Sub
Attribute VB_Name = "Module3"
Attribute VB_Name = "Module4"
Sub OpenPDF()
    ActiveSheet.OLEObjects("EPForm").Verb xlVerbOpen
End Sub
Attribute VB_Name = "Module5"
Sub Button260_Click()

End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Reset, 251, 0, MSForms, CommandButton"
Option Explicit
Private Const MyPassword = "Buyback1819"

Private Sub Reset_Click()
    Range("B7:D7").Select
    Selection.ClearContents
    Call Clear
    ActiveSheet.CheckBoxes.Value = False
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
Dim rng As Range                    ' Range for the find command
Dim shC As Worksheet                ' Census Worksheet

' Initialize variables
Set shC = Sheets("Census")

' Address the issue when delete is pressed
If Target.Address = "$B$7:$D$7" Then
    UnProtectsheet
    Range("$B$8,$B$9,$B$12,$N$2:$N$5").ClearContents
    Range("$B$8,$B$9,$B$12,$N$2:$N$5").Locked = False
    Range("$B$8").Select
    ProtectSheet
    Exit Sub
End If

' Activate code only when Cell B7 changes

If Target.Address = "$B$7" Then
    ' unlock the sheet
    UnProtectsheet
    
    ' Look for the entered value on the census sheet
    Set rng = shC.Range("Table_School_Data[School]").Find(Target.Value, LookIn:=xlValues, lookat:=xlWhole)
    If rng Is Nothing Then
        ' If it is not found, clear out the cells
        Range("$B$8,$B$9,$B$12,$N$2:$N$5").ClearContents
        ' Unlock the cells
        Range("$B$8,$B$9,$B$12,$N$2:$N$5").Locked = False
        Range("$B$8").Select
    Else
        ' Present the data found
        Range("$B$8") = shC.Cells(rng.Row, "A")
        Range("$B$9") = shC.Cells(rng.Row, "C")
        Range("$B$12") = shC.Cells(rng.Row, "D")
        
        Range("$N$2") = shC.Cells(rng.Row, "B")
        Range("$N$3") = Target.Value
        Range("$N$4") = shC.Cells(rng.Row, "C")
        Range("$N$5") = shC.Cells(rng.Row, "D")
        
        ' Lock the cells
        Range("$B$8,$B$9,$B$12,$N$2:$N$5").Locked = True
    End If
    
    ' Relock the sheet
    ProtectSheet
End If
        
End Sub

Sub ProtectSheet()
ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, Password:=MyPassword
End Sub

Sub UnProtectsheet()
    ActiveSheet.Unprotect Password:=MyPassword
End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
