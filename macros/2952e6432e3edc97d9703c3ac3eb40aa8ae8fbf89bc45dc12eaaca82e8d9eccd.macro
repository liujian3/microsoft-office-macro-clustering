Attribute VB_Name = "ModuleBriefAnalysis"
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub MakePresentation()
    Dim app As Object 'PowerPoint.Application
    Dim pres As Object 'PowerPoint.Presentation
    Dim currSlide As Object 'PowerPoint.Slide
    Dim currShape As Object 'PowerPoint.Shape
    Dim shapesColl As Collection
    Dim funcs() As Variant 'String()
    Dim currLayout As Object 'PowerPoint.Layout
    Dim i As Long
    
    Set shapesColl = New Collection
    Set app = CreateObject("PowerPoint.Application")
    ModuleSettings.StartOptimizingCalculation
    
    funcs = Array( _
        "ModuleBriefAnalysis.CopyGeneralChart", _
        "ModuleBriefAnalysis.CopyUnderOverPaidChart", _
        "ModuleBriefAnalysis.CopyGradesChart", _
        "ModuleBriefAnalysis.AddUnderpaidJobs", _
        "ModuleBriefAnalysis.AddOverpaidJobs", _
        "ModuleBriefAnalysis.AddUnderpaidDeps", _
        "ModuleBriefAnalysis.AddOverpaidDeps")
    
    Set pres = app.Presentations.Add(WithWindow:=msoTrue)
    Set currLayout = AddLayout(pres)
    
    ThisWorkbook.UnprotectSheets
    For i = LBound(funcs) To UBound(funcs) Step 1
        Set currSlide = pres.Slides.AddSlide(pres.Slides.Count + 1, currLayout)
        Set currShape = Application.Run(funcs(i), currSlide)
        
        currSlide.Select
        SetShapeSize currShape
    Next i
    ThisWorkbook.ProtectSheets
    
    ModuleSettings.EndOptimizingCalculation
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Layout |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Presentation - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [PowerPoint.Presentation]
'''
Private Function AddLayout(ByRef Presentation As Object) As Object 'PowerPoint.Layout
    With Presentation.SlideMaster
        .CustomLayouts.Add 1
        .CustomLayouts(1).Name = "MyLayout"
        Set AddLayout = .CustomLayouts(1)
    End With
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Table - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' Slide - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [PowerPoint.Slide]
'''
Private Function AddTableToSlide(ByRef Table As Range, ByRef Slide As Object) As Object 'PowerPoint.Shape
    Dim slideShape As Object 'PowerPoint.Shape
    Table.Copy
    
    Slide.Shapes.Paste
    Set slideShape = Slide.Shapes(Slide.Shapes.Count)
    Set AddTableToSlide = slideShape
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|
''' |fffd||fffd||fffd| 10 |fffd||fffd||fffd||fffd|- |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
''' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 5.OverUnderPaid
'''
''' Table - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' Slide - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| [PowerPoint.Slide]
'''
Private Function AddTop(ByRef Slide As Object, ByVal ColIndex As Long) As Object 'PowerPoint.Shape
    Dim lastRow As Long
    Dim ws As Worksheet
    Dim copyCols As Object 'Scripting.Dictionary
    Dim col As Variant
    
    Set copyCols = CreateObject("Scripting.Dictionary")
    copyCols.Add ColIndex, "Q"
    copyCols.Add ColIndex + 1, "R"
    copyCols.Add ColIndex + 2, "S"
    
    Set ws = SheetTop10
    
    lastRow = ModuleUtils.GetLastRow(ws, ColIndex)
    lastRow = Application.WorksheetFunction.Min(lastRow, 12)
    Do While Application.WorksheetFunction.IsErr(ws.Cells(lastRow, ColIndex + 1))
        lastRow = lastRow - 1
    Loop
    
    ws.Range(ws.Cells(1, ColIndex), ws.Cells(1, ColIndex + 2)).Copy Destination:=ws.Range("Q1")
    
    For Each col In copyCols
        ws.Range(ws.Cells(3, col), ws.Cells(lastRow, col)).Copy
        ws.Range(copyCols(col) & 2).PasteSpecial xlPasteValues
    Next col
    
    Application.CutCopyMode = False
    Set AddTop = AddTableToSlide(ws.Range("Q1:S" & (lastRow - 1)), Slide)
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 10 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Slide - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| [PowerPoint.Slide]
'''
Private Function AddUnderpaidJobs(ByRef Slide As Object) As Object 'PowerPoint.Shape
    SetSlideTitle Slide, ModuleStrings.GetText("MESSAGE_MOST_UNDERPAID_JOBS")
    Set AddUnderpaidJobs = AddTop(Slide, 1)
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 10 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Slide - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| [PowerPoint.Slide]
'''
Private Function AddOverpaidJobs(ByRef Slide As Object) As Object 'PowerPoint.Shape
    SetSlideTitle Slide, ModuleStrings.GetText("MESSAGE_MOST_OVERPAID_JOBS")
    Set AddOverpaidJobs = AddTop(Slide, 5)
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 10 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Slide - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| [PowerPoint.Slide]
'''
Private Function AddUnderpaidDeps(ByRef Slide As Object) As Object 'PowerPoint.Shape
    SetSlideTitle Slide, ModuleStrings.GetText("MESSAGE_MOST_UNDERPAID_DEPS")
    Set AddUnderpaidDeps = AddTop(Slide, 9)
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 10 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Slide - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| [PowerPoint.Slide]
'''
Private Function AddOverpaidDeps(ByRef Slide As Object) As Object 'PowerPoint.Shape
    SetSlideTitle Slide, ModuleStrings.GetText("MESSAGE_MOST_OVERPAID_DEPS")
    Set AddOverpaidDeps = AddTop(Slide, 13)
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd| |fffd||fffd||fffd||fffd||fffd|"
'''
''' Slide - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| [PowerPoint.Slide]
'''
Private Function CopyGeneralChart(ByRef Slide As Object) As Object 'PowerPoint.Shape
    Dim ws As Worksheet
    Dim slideShape As Object 'PowerPoint.Shape
    Set ws = SheetGeneralBar
    
    ws.ChartObjects("GeneralCircle").Activate
    ActiveChart.ChartArea.Copy
    
    Slide.Shapes.PasteSpecial ppPasteShape, Link:=msoFalse
    Set slideShape = Slide.Shapes(Slide.Shapes.Count)
    SetSlideTitle Slide, ModuleStrings.GetText("MESSAGE_GENERAL_CONCLUSION")
    
    Set CopyGeneralChart = slideShape
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Slide - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| [PowerPoint.Slide]
'''
Private Function CopyUnderOverPaidChart(ByRef Slide As Object) As Object 'PowerPoint.Shape
    Dim ws As Worksheet
    Dim slideShape As Object 'PowerPoint.Shape
    
    Set ws = PSheetCompanyBench
    
    ws.ChartObjects("GeneralDiagram").Activate
    ActiveChart.PlotArea.Select
    ActiveChart.ChartArea.Select
    ActiveChart.ChartArea.Copy
    
    Slide.Shapes.PasteSpecial 11, Link:=msoFalse
    Set slideShape = Slide.Shapes(Slide.Shapes.Count)
    SetSlideTitle Slide, ModuleStrings.GetText("MESSAGE_MARKET_DEVIATIONS_ANALYSIS")
    
    Set CopyUnderOverPaidChart = slideShape
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Slide - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| [PowerPoint.Slide]
'''
Private Function CopyGradesChart(ByRef Slide As Object) As Object
    Dim ws As Worksheet
    Dim slideShape As Object 'PowerPoint.Shape
    
    Set ws = ThisWorkbook.Worksheets("CompanyBench")
    
    ws.Shapes.Range(Array("GroupDepGraph")).Select
    Selection.Copy
    
    Slide.Shapes.PasteSpecial 11, Link:=msoFalse
    Set slideShape = Slide.Shapes(Slide.Shapes.Count)
    SetSlideTitle Slide, ModuleStrings.GetText("MESSAGE_COMPARISON_BY_GRADES")
    
    Set CopyGradesChart = slideShape
End Function

'''
''' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Shape - |fffd||fffd||fffd||fffd||fffd||fffd| [PowerPoint.Shape]
'''
Private Sub SetShapeSize(ByRef Shape As Object)
    With Shape
        ' 1 inch == 72 ppt
        .Width = 11.42 * 72
        .Height = 5 * 72
        .Top = 2 * 72
        .Left = 0.9 * 72
    End With
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
'''
''' Slide - |fffd||fffd||fffd||fffd||fffd| [PowerPoint.Slide]
''' Title - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Sub SetSlideTitle(ByRef Slide As Object, ByVal Text As String)
    Dim oShp As Object 'PowerPoint.Shape
    
    For Each oShp In Slide.Shapes
        With oShp
            If .Type = msoPlaceholder Then
                Select Case .PlaceholderFormat.Type
                    Case ppPlaceholderCenterTitle, ppPlaceholderTitle
                        .TextFrame.TextRange.Text = Text
                End Select
            End If
        End With
    Next oShp
End Sub




Attribute VB_Name = "ModuleCollections"
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Create(ParamArray Elements() As Variant) As Collection
    Dim i As Long
    Set Create = New Collection
    For i = LBound(Elements) To UBound(Elements) Step 1
        Create.Add Elements(i)
    Next i
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' coll - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' item - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'''
Public Function IndexOf(ByRef coll As Collection, Item As Variant) As Long
    Dim i As Long
    
    For i = 1 To coll.Count
        Dim currentElem As Variant
        currentElem = coll(i)
        If currentElem = Item Then
            IndexOf = i
            Exit Function
        End If
    Next
    IndexOf = 0
End Function

Public Function StrSplit(ByVal Expression As String, _
                         Optional ByVal Delimiter As String, _
                         Optional ByVal Limit As Long = -1, _
                         Optional ByVal Compare As VbCompareMethod = vbBinaryCompare) As Collection
    Dim spt() As String
    Dim i As Long
    spt() = Split(Expression, Delimiter, Limit, Compare)
    
    Set StrSplit = New Collection
    For i = LBound(spt) To UBound(spt) Step 1
        StrSplit.Add spt(i)
    Next i
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' coll - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' item - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'''
Public Function Contains(ByRef coll As Collection, Item As Variant) As Boolean
    Dim i As Long
    If coll Is Nothing Then
        Contains = False
        Exit Function
    End If
    
    For i = 1 To coll.Count
        If coll(i) = Item Then
            Contains = True
            Exit Function
        End If
    Next
    Contains = False
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' coll - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Public Function Distinct(ByRef coll As Collection) As Collection
    Dim dict As Object 'Scripting.Dictionary
    Dim elem As Variant '*
    
    Set dict = CreateObject("Scripting.Dictionary")
    
    With dict
        For Each elem In coll
            .Item(elem) = elem
        Next elem
        
        Set Distinct = New Collection
        For Each elem In .items
            Distinct.Add elem
        Next elem
    End With
End Function

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Clear(ByRef coll As Collection)
    Do While coll.Count > 0
        coll.Remove coll.Count
    Loop
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' coll       - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' Separator  - |fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''              |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd|.|fffd|)
''' LeftBound  - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' RightBound - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Public Function ToString(ByRef coll As Collection, _
                         Optional ByVal separator As String = " ", _
                         Optional ByVal LeftBound As String = vbNullString, _
                         Optional ByVal RightBound As String = vbNullString)
    
    Dim elems() As String
    Dim elem As Variant
    Dim i As Long
    If coll.Count() < 1 Then
        Exit Function
    End If
    
    ReDim elems(1 To coll.Count())
    
    i = 1
    For Each elem In coll
        If IsObject(elem) Then
            elems(i) = TypeName(elem)
        Else
            elems(i) = CStr(elem)
        End If
        
        i = i + 1
    Next elem
    
    ToString = LeftBound & Join(elems, separator) & RightBound
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| String)
'''
''' Coll       - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' Descending - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Public Function SortAlphabetically(ByRef coll As Collection, _
                                   Optional ByVal Descending As Boolean = False) As Collection
    Dim arrList As Object 'System.Collections.ArrayList
    Dim startElem As Long
    Dim endElem As Long
    Dim Step As Long
    Dim i As Long
    Dim elem As Variant '*
    
    Set arrList = CreateObject("System.Collections.ArrayList")
    
    On Error Resume Next
    For Each elem In coll
        arrList.Add CStr(elem)
    Next elem
    On Error GoTo 0
    
    arrList.Sort
    
    startElem = IIf(Descending, arrList.Count - 1, 0)
    endElem = IIf(Descending, 0, arrList.Count - 1)
    Step = IIf(Descending, -1, 1)
    
    Set SortAlphabetically = New Collection
    For i = startElem To endElem Step Step
        SortAlphabetically.Add arrList.Item(i)
    Next i
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Double)
'''
''' Coll       - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' Descending - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Double, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Public Function SortDouble(ByRef coll As Collection, Optional ByVal Descending As Boolean = False) As Collection
    Dim arrList As Object 'System.Collections.ArrayList
    Dim startElem As Long
    Dim endElem As Long
    Dim Step As Long
    Dim i As Long
    Dim elem As Variant '*
    
    Set arrList = CreateObject("System.Collections.ArrayList")
    For Each elem In coll
        If IsNumeric(elem) Then
            arrList.Add CDbl(elem)
        End If
    Next elem
    
    arrList.Sort
    
    startElem = IIf(Descending, arrList.Count - 1, 0)
    endElem = IIf(Descending, 0, arrList.Count - 1)
    Step = IIf(Descending, -1, 1)
    
    Set SortDouble = New Collection
    For i = startElem To endElem Step Step
        SortDouble.Add arrList.Item(i)
    Next i
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Long)
'''
''' Coll       - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' Descending - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Long, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Public Function SortInt(ByRef coll As Collection, Optional ByVal Descending As Boolean = False) As Collection
    Dim arrList As Object 'System.Collections.ArrayList
    Dim startElem As Long
    Dim endElem As Long
    Dim Step As Long
    Dim i As Long
    Dim elem As Variant '*

    Set arrList = CreateObject("System.Collections.ArrayList")
    For Each elem In coll
        If IsLng(elem) Then
            arrList.Add CLng(elem)
        End If
    Next elem

    arrList.Sort

    startElem = IIf(Descending, arrList.Count - 1, 0)
    endElem = IIf(Descending, 0, arrList.Count - 1)
    Step = IIf(Descending, -1, 1)

    Set SortInt = New Collection
    For i = startElem To endElem Step Step
        SortInt.Add arrList.Item(i)
    Next i
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
'''
''' elem - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Function IsLng(elem) As Boolean
    If Not IsNumeric(elem) Then Exit Function
    
    If TypeName(elem) = "Byte" Or _
       TypeName(elem) = "Long" Or _
       TypeName(elem) = "Integer" Then
       
        IsLng = True
    End If
End Function


Attribute VB_Name = "ModuleCompareTable"
Option Explicit

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'''
''' MarketBenchmark   - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'''                     btAll, btLowerDecile, btFirstQuartile, btMedian, beThirdQuartile,
'''                     btUpperDecile, btAverage
''' RenumerationType  - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'''                     btAll, btMonthlyFixed, btAnnualFixed, btTotalAnnual
''' JobCodes          - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [System.Collections.ArrayList]
'''                     |fffd||fffd||fffd||fffd| NULL, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' Regions           - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [System.Collections.ArrayList]
'''                     |fffd||fffd||fffd||fffd| NULL, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' EnableJobBlending - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Job blending. |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd|, |fffd||fffd||fffd||fffd|
'''                     |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'''                     |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''                     |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'''
Public Sub MakeCompareTable(Optional ByVal MarketBenchmark As Long = btAll, _
                            Optional ByVal RenumerationType As Long = btAll, _
                            Optional ByRef JobCodes As Object = Nothing, _
                            Optional ByRef Regions As Object = Nothing, _
                            Optional ByVal EnableJobBlending As Boolean)
    Dim wb As Workbook
    Dim lastRow As Long
    Dim ws As Worksheet
    
    ModuleSettings.StartOptimizingCalculation
    
    Set wb = Workbooks.Add
    Set ws = wb.Sheets(1)
    
    CopyQuestionaryData Sheet:=ws, _
                        EnableJobBlending:=EnableJobBlending, _
                        RenumerationType:=RenumerationType, _
                        JobCodes:=JobCodes, _
                        Regions:=Regions
    
    lastRow = ModuleUtils.GetLastRow(ws, "D")
    
    MakeCompareTableHeader ws, RenumerationType
    MakeBorders ws, lastRow
    ModuleSettings.EndOptimizingCalculation
    
    AddConditionalFormatting ws, 3, lastRow
    DeleteCols ws, MarketBenchmark
    AddFormatting ws
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
''' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Sheet             - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' FirstRow          - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3
''' EnableJobBlending - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Job blending
''' JobCodes          - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [System.Collections.ArrayList]
''' Regions           - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [System.Collections.ArrayList]
'''
Private Function CopyQuestionaryData(ByRef Sheet As Worksheet, _
                                     Optional ByVal FirstRow As Long = 3, _
                                     Optional ByVal RenumerationType As Long = btAll, _
                                     Optional ByRef JobCodes As Object, _
                                     Optional ByRef Regions As Object, _
                                     Optional ByVal EnableJobBlending As Boolean)
                                     
    Dim qdataLastRow As Long
    Dim qdataSheet As Worksheet
    Dim i As Long               '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Dim j As Long: j = FirstRow '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Dim k As Long
    Dim ln As Long
    Dim outLastRow As Long
    Dim Step As Long
    Dim colors(0 To 2) As Long
    Dim answer As Long
    Dim JbItem As SurveyDataItem
    Dim jbitems As Object 'Scripting.Dictionary
    Dim jbcncl As Object 'Scripting.Dictionary
    Dim err As Boolean
    
    Dim cd As String
    Dim nm As String
    Dim reg As String
    
    colors(0) = RGB(255, 255, 255)
    colors(1) = RGB(245, 245, 245)
    colors(2) = RGB(235, 235, 235)
    
    Set qdataSheet = SheetBenchAnalysis
    Set jbitems = CreateObject("Scripting.Dictionary")
    Set jbcncl = CreateObject("Scripting.Dictionary")
    qdataLastRow = ModuleUtils.GetLastRow(qdataSheet)
    
    If (RenumerationType And btMonthlyFixed) <> 0 Then
        Step = Step + 1
    End If
    
    If (RenumerationType And btAnnualFixed) <> 0 Then
        Step = Step + 1
    End If
    
    If (RenumerationType And btTotalAnnual) <> 0 Then
        Step = Step + 1
    End If
    
    For i = 3 To qdataLastRow Step 1
        cd = qdataSheet.Range("A" & i).Value
        nm = qdataSheet.Range("H" & i).Value
        reg = qdataSheet.Range("F" & i).Value
        
        If Not JobCodes Is Nothing Then
            If Not JobCodes.Contains(cd) Then GoTo continueLoop
        End If
        
        If Not Regions Is Nothing Then
            If Not Regions.Contains(reg) Then GoTo continueLoop
        End If
        
        If Step > 1 Then
            MergeRange Sheet.Range("A" & j & ":A" & (j + Step - 1))
            MergeRange Sheet.Range("B" & j & ":B" & (j + Step - 1)), HorizontalAlignment:=xlLeft
            MergeRange Sheet.Range("C" & j & ":C" & (j + Step - 1)), HorizontalAlignment:=xlLeft
            MergeRange Sheet.Range("Q" & j & ":Q" & (j + Step - 1))
            MergeRange Sheet.Range("R" & j & ":R" & (j + Step - 1))
            MergeRange Sheet.Range("S" & j & ":S" & (j + Step - 1))
        End If
        
        k = 0
        If (qdataSheet.Range("AP" & i).Value = "-" Or qdataSheet.Range("AW" & i).Value = "-") And EnableJobBlending Then
            If jbitems.Exists(cd & reg) Then
                Set JbItem = jbitems(cd & reg)
                GoTo cancelJobBlendingHandler
            End If
            
            If jbcncl.Exists(cd & reg) Then
                Set JbItem = Nothing
                GoTo cancelJobBlendingHandler
            End If
            
            answer = MsgBox(ModuleStrings.GetText("MESSAGE_QSN_JOB_BLENDING", cd), _
                            vbQuestion + vbYesNoCancel + vbDefaultButton1)
                            
            Select Case answer
                Case vbNo
                    jbcncl(cd & reg) = True
                    GoTo cancelJobBlendingHandler
                Case vbCancel
                    EnableJobBlending = False
                    GoTo cancelJobBlendingHandler
            End Select
            
            Set JbItem = ModuleInputBox.RunJobBlending(reg)
            If JbItem.Code = vbNullString Then
                Set JbItem = Nothing
            Else
                Set jbitems(cd & reg) = JbItem
            End If
        End If
        
cancelJobBlendingHandler:
        If JbItem Is Nothing Then
            Sheet.Range("A" & j).Value = cd
            Sheet.Range("B" & j).Value = qdataSheet.Range("B" & i).Value
            Sheet.Range("C" & j).Value = nm
            Sheet.Range("Q" & j).Value = qdataSheet.Range("L" & i).Value
            Sheet.Range("R" & j).Value = qdataSheet.Range("M" & i).Value
            Sheet.Range("S" & j).Value = qdataSheet.Range("C" & i).Value
        Else
            Sheet.Range("A" & j).Value = JbItem.Code
            Sheet.Range("B" & j).Value = qdataSheet.Range("B" & i).Value
            Sheet.Range("C" & j).Value = JbItem.Name
            Sheet.Range("Q" & j).Value = qdataSheet.Range("L" & i).Value
            Sheet.Range("R" & j).Value = qdataSheet.Range("L" & i).Value
            Sheet.Range("S" & j).Value = qdataSheet.Range("C" & i).Value
        End If

        If (RenumerationType And btMonthlyFixed) <> 0 Then
            AddMonthlyFixed Sheet:=Sheet, _
                            QSheet:=qdataSheet, _
                            ResultLine:=k + j, _
                            BenchSheetLine:=i, _
                            JbItem:=JbItem
            
            Sheet.Range("D" & (k + j) & ":P" & (k + j)).Interior.Color = colors(k)
            k = k + 1
        End If
        
        If (RenumerationType And btAnnualFixed) <> 0 Then
            AddAnnualFixed Sheet:=Sheet, _
                           QSheet:=qdataSheet, _
                           ResultLine:=k + j, _
                           BenchSheetLine:=i, _
                           JbItem:=JbItem
            
            Sheet.Range("D" & (k + j) & ":P" & (k + j)).Interior.Color = colors(k)
            k = k + 1
        End If
        
        If (RenumerationType And btTotalAnnual) <> 0 Then
            AddTotalAnnual Sheet:=Sheet, _
                           QSheet:=qdataSheet, _
                           ResultLine:=k + j, _
                           BenchSheetLine:=i, _
                           JbItem:=JbItem
            
            Sheet.Range("D" & (k + j) & ":P" & (k + j)).Interior.Color = colors(k)
            k = k + 1
        End If
        
        j = j + Step
        Set JbItem = Nothing
continueLoop:
    Next i
    
    outLastRow = ModuleUtils.GetLastRow(Sheet, "D")
    Sheet.Range("K" & FirstRow).Formula = "=IFERROR($D" & FirstRow & "/E" & FirstRow & ", ""-"")"
    Sheet.Range("K" & FirstRow).AutoFill Destination:=Sheet.Range("K" & FirstRow & ":P" & FirstRow)
    Sheet.Range("K" & FirstRow & ":P" & FirstRow).AutoFill Destination:=Sheet.Range("K" & FirstRow & ":P" & outLastRow), _
                                                           Type:=xlFillValues
    
    Sheet.Range("1:2").Font.Name = btFontName
    Sheet.UsedRange.Font.Name = btFontName
    Sheet.UsedRange.Font.Size = 9
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Sheet          - |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' QSheet         - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' ResultLine     - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' BenchSheetLine - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''                  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Sub AddMonthlyFixed(ByRef Sheet As Worksheet, _
                            ByRef QSheet As Worksheet, _
                            ByVal ResultLine As Long, _
                            ByVal BenchSheetLine As Long, _
                            Optional ByRef JbItem As SurveyDataItem = Nothing)
    With QSheet
        Sheet.Range("D" & ResultLine).Value = .Range("O" & BenchSheetLine).Value
        
        If JbItem Is Nothing Then
            Sheet.Range("E" & ResultLine).Value = OutNum(.Range("AJ" & BenchSheetLine).Value)
            Sheet.Range("F" & ResultLine).Value = OutNum(.Range("AK" & BenchSheetLine).Value)
            Sheet.Range("G" & ResultLine).Value = OutNum(.Range("AL" & BenchSheetLine).Value)
            Sheet.Range("H" & ResultLine).Value = OutNum(.Range("AM" & BenchSheetLine).Value)
            Sheet.Range("I" & ResultLine).Value = OutNum(.Range("AN" & BenchSheetLine).Value)
            Sheet.Range("J" & ResultLine).Value = OutNum(.Range("AO" & BenchSheetLine).Value)
        Else
            Sheet.Range("E" & ResultLine).Value = OutNum(JbItem.MonthLowerDecile)
            Sheet.Range("F" & ResultLine).Value = OutNum(JbItem.MonthFirstQuartile)
            Sheet.Range("G" & ResultLine).Value = OutNum(JbItem.MonthMedian)
            Sheet.Range("H" & ResultLine).Value = OutNum(JbItem.MonthThirdQuartile)
            Sheet.Range("I" & ResultLine).Value = OutNum(JbItem.MonthUpperDecile)
            Sheet.Range("J" & ResultLine).Value = OutNum(JbItem.MonthAverage)
        End If
    End With
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Sheet          - |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' QSheet         - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' ResultLine     - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' BenchSheetLine - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''                  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Sub AddAnnualFixed(ByRef Sheet As Worksheet, _
                           ByRef QSheet As Worksheet, _
                           ByVal ResultLine As Long, _
                           ByVal BenchSheetLine As Long, _
                           Optional ByRef JbItem As SurveyDataItem = Nothing)
    With QSheet
        Sheet.Range("D" & ResultLine).Value = .Range("O" & BenchSheetLine).Value * 12
        
        Sheet.Range("E" & ResultLine).Value = "-"
        Sheet.Range("F" & ResultLine).Value = "-"
        Sheet.Range("G" & ResultLine).Value = "-"
        Sheet.Range("H" & ResultLine).Value = "-"
        Sheet.Range("I" & ResultLine).Value = "-"
        Sheet.Range("J" & ResultLine).Value = "-"
        
        If JbItem Is Nothing Then
            On Error Resume Next
            Sheet.Range("E" & ResultLine).Value = OutNum(.Range("AJ" & BenchSheetLine).Value * 12)
            Sheet.Range("F" & ResultLine).Value = OutNum(.Range("AK" & BenchSheetLine).Value * 12)
            Sheet.Range("G" & ResultLine).Value = OutNum(.Range("AL" & BenchSheetLine).Value * 12)
            Sheet.Range("H" & ResultLine).Value = OutNum(.Range("AM" & BenchSheetLine).Value * 12)
            Sheet.Range("I" & ResultLine).Value = OutNum(.Range("AN" & BenchSheetLine).Value * 12)
            Sheet.Range("J" & ResultLine).Value = OutNum(.Range("AO" & BenchSheetLine).Value * 12)
            On Error GoTo 0
        Else
            Sheet.Range("E" & ResultLine).Value = OutNum(JbItem.YearLowerDecile)
            Sheet.Range("F" & ResultLine).Value = OutNum(JbItem.YearFirstQuartile)
            Sheet.Range("G" & ResultLine).Value = OutNum(JbItem.YearMedian)
            Sheet.Range("H" & ResultLine).Value = OutNum(JbItem.YearThirdQuartile)
            Sheet.Range("I" & ResultLine).Value = OutNum(JbItem.YearUpperDecile)
            Sheet.Range("J" & ResultLine).Value = OutNum(JbItem.YearAverage)
        End If
    End With
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Sheet          - |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' QSheet         - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' ResultLine     - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' BenchSheetLine - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''                  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Sub AddTotalAnnual(ByRef Sheet As Worksheet, _
                           ByRef QSheet As Worksheet, _
                           ByVal ResultLine As Long, _
                           ByVal BenchSheetLine As Long, _
                           Optional ByRef JbItem As SurveyDataItem = Nothing)
    With QSheet
        Sheet.Range("D" & ResultLine).Value = .Range("O" & BenchSheetLine).Value * 12 + .Range("P" & BenchSheetLine).Value
            
        If JbItem Is Nothing Then
            Sheet.Range("E" & ResultLine).Value = OutNum(.Range("AQ" & BenchSheetLine).Value)
            Sheet.Range("F" & ResultLine).Value = OutNum(.Range("AR" & BenchSheetLine).Value)
            Sheet.Range("G" & ResultLine).Value = OutNum(.Range("AS" & BenchSheetLine).Value)
            Sheet.Range("H" & ResultLine).Value = OutNum(.Range("AT" & BenchSheetLine).Value)
            Sheet.Range("I" & ResultLine).Value = OutNum(.Range("AU" & BenchSheetLine).Value)
            Sheet.Range("J" & ResultLine).Value = OutNum(.Range("AV" & BenchSheetLine).Value)
        Else
            Sheet.Range("E" & ResultLine).Value = OutNum(JbItem.TotalYearLowerDecile)
            Sheet.Range("F" & ResultLine).Value = OutNum(JbItem.TotalYearFirstQuartile)
            Sheet.Range("G" & ResultLine).Value = OutNum(JbItem.TotalYearMedian)
            Sheet.Range("H" & ResultLine).Value = OutNum(JbItem.TotalYearThirdQuartile)
            Sheet.Range("I" & ResultLine).Value = OutNum(JbItem.TotalYearUpperDecile)
            Sheet.Range("J" & ResultLine).Value = OutNum(JbItem.TotalYearAverage)
        End If
    End With
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Sheet         - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' LowerDecile   - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' FirstQuartile - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' Median        - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' ThirdQuartile - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' UpperDecile   - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' Average       - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Sub DeleteCols(ByRef Sheet As Worksheet, _
                       ByVal MarketBenchmark As Long)
    
    Dim cols As Object 'System.Collections.ArrayList
    Dim col As Variant 'Long
    Dim i As Long
    
    Dim textFirst As String
    Dim textSecond As String
    
    textFirst = Sheet.Cells(1, 5).Value
    textSecond = Sheet.Cells(1, 11).Value
    
    Set cols = CreateObject("System.Collections.ArrayList")
    If (MarketBenchmark And btLowerDecile) = 0 Then
        cols.Add 5
        cols.Add 11
        i = i + 1
    End If
    
    If (MarketBenchmark And btFirstQuartile) = 0 Then
        cols.Add 6
        cols.Add 12
        i = i + 1
    End If
    
    If (MarketBenchmark And btMedian) = 0 Then
        cols.Add 7
        cols.Add 13
        i = i + 1
    End If
    
    If (MarketBenchmark And btThirdQuartile) = 0 Then
        cols.Add 8
        cols.Add 14
        i = i + 1
    End If
    
    If (MarketBenchmark And btUpperDecile) = 0 Then
        cols.Add 9
        cols.Add 15
        i = i + 1
    End If
    
    If (MarketBenchmark And btAverage) = 0 Then
        cols.Add 10
        cols.Add 16
        i = i + 1
    End If
    
    cols.Sort
    cols.Reverse
    For Each col In cols
        Sheet.Columns(col).Delete
    Next col
    
    Sheet.Cells(1, 5).Value = textFirst
    Sheet.Cells(1, 11 - i).Value = textSecond
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'''
''' Sheet         - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' LastLineIndex - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Sub MakeBorders(ByRef Sheet As Worksheet, ByVal LastLineIndex As Long)
    Dim bordersTypes() As Variant
    Dim i As Long
    bordersTypes = Array(xlEdgeLeft, xlEdgeRight, xlEdgeBottom, xlEdgeTop, xlInsideHorizontal, xlInsideVertical)
    With Sheet.Range("A1:S" & LastLineIndex)
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        
        For i = LBound(bordersTypes) To UBound(bordersTypes) Step 1
            With .Borders(bordersTypes(i))
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
        Next i
    End With
    
    With Sheet.Range("A1:S2")
        With .Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = -0.349986266670736
            .PatternTintAndShade = 0
        End With
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        
        With .Borders(xlInsideVertical)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
    End With
    
    With Sheet.Range("D1:D2")
        .HorizontalAlignment = xlCenter
        .WrapText = False
        .Orientation = 90
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
    End With
    
    With Sheet.Range("E2:P2")
        .HorizontalAlignment = xlCenter
        .WrapText = False
        .Orientation = 90
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
    End With
    
    With Sheet.Range("A1:S2")
        .HorizontalAlignment = xlCenter
        .WrapText = True
        .AddIndent = False
        .ShrinkToFit = False
        .ReadingOrder = xlContext
    End With
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Sheet - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Sub MakeCompareTableHeader(ByRef Sheet As Worksheet, ByVal RenumerationType As Long)
    Dim rentps As Collection
    Set rentps = New Collection
    With Sheet
        MergeRange .Range("A1:A2")
        MergeRange .Range("B1:B2")
        MergeRange .Range("C1:C2")
        MergeRange .Range("D1:D2")
        MergeRange .Range("E1:J1")
        MergeRange .Range("K1:P1")
        MergeRange .Range("Q1:Q2")
        MergeRange .Range("R1:R2")
        MergeRange .Range("S1:S2")
        
        .Range("A1").Value = ModuleStrings.GetText("MESSAGE_JOB_CODE")
        .Range("A1").ColumnWidth = 15
        .Range("B1").Value = ModuleStrings.GetText("MESSAGE_JOB_TITLE_QSTNR")
        .Range("B1").ColumnWidth = 30
        .Range("C1").Value = ModuleStrings.GetText("MESSAGE_JOB_TITLE_EY")
        .Range("C1").ColumnWidth = 30
        .Range("D1").Value = ModuleStrings.GetText("MESSAGE_QSTNR_DATA")
        
        If (RenumerationType And btMonthlyFixed) <> 0 Then
            rentps.Add ModuleStrings.GetText("MONTHLY_FIXED")
        End If
        
        If (RenumerationType And btAnnualFixed) <> 0 Then
            rentps.Add ModuleStrings.GetText("ANNUAL_FIXED")
        End If
        
        If (RenumerationType And btTotalAnnual) <> 0 Then
            rentps.Add ModuleStrings.GetText("TOTAL_ANNUAL")
        End If
        
        .Range("E1").Value = _
            ModuleStrings.GetText("MESSAGE_SURVEY_DATA") & _
            " (" & _
            ModuleCollections.ToString(rentps, ", ") & _
            ") "
        
        .Range("E2").Value = ModuleStrings.GetText("LOWER_DECILE")
        .Range("F2").Value = ModuleStrings.GetText("FIRST_QUARTILE")
        .Range("G2").Value = ModuleStrings.GetText("MEDIAN")
        .Range("H2").Value = ModuleStrings.GetText("THIRD_QUARTILE")
        .Range("I2").Value = ModuleStrings.GetText("UPPER_DECILE")
        .Range("J2").Value = ModuleStrings.GetText("AVERAGE")
        
        .Range("K1").Value = ModuleStrings.GetText("MESSAGE_COEFFICIENT")
        .Range("K2").Value = ModuleStrings.GetText("LOWER_DECILE")
        .Range("L2").Value = ModuleStrings.GetText("FIRST_QUARTILE")
        .Range("M2").Value = ModuleStrings.GetText("MEDIAN")
        .Range("N2").Value = ModuleStrings.GetText("THIRD_QUARTILE")
        .Range("O2").Value = ModuleStrings.GetText("UPPER_DECILE")
        .Range("P2").Value = ModuleStrings.GetText("AVERAGE")
        
        .Range("Q1").Value = ModuleStrings.GetText("MESSAGE_REGION_QSTNR")
        .Range("Q1").ColumnWidth = 20
        .Range("R1").Value = ModuleStrings.GetText("MESSAGE_REGION_SURVEY")
        .Range("R1").ColumnWidth = 20
        .Range("S1").Value = ModuleStrings.GetText("MESSAGE_LAST_NAME_NUMBER")
        .Range("S1").ColumnWidth = 15
        
        .Activate
        .Range("B3").Select
        ActiveWindow.FreezePanes = True
    End With
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'''
''' Sheet         - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' LastLineIndex - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Sub AddConditionalFormatting(ByRef Sheet As Worksheet, ByVal FirstLine As Long, ByVal LastLine As Long)
    Dim i As Long
    Dim ocl As Object
    Dim cl As Range
    
    For Each ocl In Sheet.Range("K" & FirstLine & ":P" & LastLine).Cells
        Set cl = ocl
        
        If Not IsNumeric(cl.Value) Then
            GoTo continueLoop
        End If
        
        If cl.Value < ModuleSettings.UnderpaimentBorder Then
            cl.Interior.Color = btRedEY
        End If
        
        If cl.Value > ModuleSettings.OverpaimentBorder Then
            cl.Interior.Color = btGreenEY
        End If
continueLoop:
    Next ocl
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Merge |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HorizontalAlignment, VerticalAlignment
'''
''' InputRange          - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' HorizontalAlignment - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' VerticalAlignment   - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Sub MergeRange(ByRef InputRange As Range, _
                       Optional ByVal HorizontalAlignment = xlCenter, _
                       Optional ByVal VerticalAlignment = xlCenter)
    InputRange.Merge
    InputRange.HorizontalAlignment = HorizontalAlignment
    InputRange.VerticalAlignment = VerticalAlignment
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "-", |fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'''
''' Num - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Function OutNum(ByVal Num As Variant) As Variant
    On Error GoTo errorHandler
    If CDbl(Num) <> 0 Then
        OutNum = Num
    Else
        OutNum = "-"
    End If
    Exit Function
errorHandler:
    OutNum = "-"
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
'''
''' Sheet - |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Sub AddFormatting(ByRef Sheet As Worksheet)
    Dim lastRow As Long
    lastRow = ModuleUtils.GetLastRow(Sheet, "D")
    
    With Sheet.Range("A3:S" & lastRow)
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .VerticalAlignment = xlCenter
    End With
    
    With Sheet.Range("D3:J" & lastRow)
        .NumberFormat = "#,##0"
    End With
    
    With Sheet.Range("K3:P" & lastRow)
        .NumberFormat = "0.00"
    End With
    
    With Sheet.Range("D3:P" & lastRow)
        .HorizontalAlignment = xlCenter
    End With
    
    Sheet.Range("S3:S" & lastRow).NumberFormat = "General"
End Sub


Attribute VB_Name = "ModuleConst"
Option Explicit

''' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const btProtectionPassword As String = "E&Ybencht_V2"

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const btFontName As String = "Arial Narrow"
Public Const btFormsFontSize As Long = 9
Public Const btLegendFontSize As Long = 12

''' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const btSalaryGross As String = "GROSS"

''' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const btSalaryNet As String = "NET"

''' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const btMonthlyFixed = 2
Public Const btAnnualFixed = 4
Public Const btTotalAnnual = 8

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const btLowerDecile = 16
Public Const btFirstQuartile = 32
Public Const btMedian = 64
Public Const btThirdQuartile = 128
Public Const btUpperDecile = 256
Public Const btAverage = 512

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const btAll = btMonthlyFixed + btAnnualFixed + btTotalAnnual + btLowerDecile + _
                     btFirstQuartile + btMedian + btThirdQuartile + btUpperDecile + _
                     btAverage


''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| EY
Public Const btBlackEY As Long = 3681838
Public Const btYellowEY As Long = 59135
Public Const btGray01EY As Long = 8418420
Public Const btGray02EY As Long = 13485252
Public Const btWhiteEY As Long = 16777215

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| EY
Public Const btMaroonEY As Long = 9521329
Public Const btRedEY As Long = 6976511
Public Const btOrangeEY As Long = 6993151
Public Const btGreenEY As Long = 8970583
Public Const btTealEY As Long = 14804576
Public Const btBlueEY As Long = 15449678
Public Const btPurpleEY As Long = 12798834

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| PowerPoint Object Library
Public Const ppPlaceholderCenterTitle = 3
Public Const ppPlaceholderTitle = 1
Public Const ppPasteShape = 11

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Microsoft Windows Common Controls Library
Public Const dtpCustom = 3


Attribute VB_Name = "ModuleDataValidation"
Option Explicit

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Number - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Public Function ValidateDecimalNumber(ByVal Number As String) As Boolean
    Dim useSystemSep As Boolean
    Dim regEx As Object 'VBScript.RegExp
    
    useSystemSep = Application.UseSystemSeparators
    Application.UseSystemSeparators = True
    Set regEx = CreateObject("VBScript.RegExp")
    With regEx
        .IgnoreCase = True
        .Pattern = "^[-+]?[0-9]*[" & Application.International(xlDecimalSeparator) & "]?[0-9]+$"
        Application.UseSystemSeparators = useSystemSep
        .Global = False
    End With

    ValidateDecimalNumber = regEx.test(Number)
End Function
Attribute VB_Name = "ModuleDepartmentGraph"
Option Explicit

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Benchmarking_Analysis
'''
Public Sub SortDepartments()
    With SheetDepGraph
        .AutoFilter.Sort.SortFields.Clear
        .AutoFilter.Sort.SortFields.Add Key:=.Range("B:B"), _
                                        SortOn:=xlSortOnValues, _
                                        Order:=xlDescending, _
                                        DataOption:=xlSortNormal
    End With
    
    With SheetDepGraph.AutoFilter.Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd| CompanyBench
'''
Public Sub UpdateChartArea()
    ' |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Dim lastRow As Long
    Dim i As Long
    Dim currLine As Long
    
    lastRow = GetLastRow(SheetDepGraph)
    
    With SheetDepGraph
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If lastRow >= 4 Then
            .Rows("4:" & lastRow).Delete
        End If
        
        Dim departments As Collection
        Set departments = FindDepartments()
        
        Select Case departments.Count()
            Case 0
                FillEntireCompanyData 2
            Case 1
                FillDepartmentData 2, departments(1)
                FillEntireCompanyData 3
            Case Else
                FillDepartmentData 2, departments(1)
                FillDepartmentData 3, departments(2)
                
                For i = 3 To departments.Count() Step 1
                    .Range("A3").EntireRow.Insert Shift:=xlShiftDown
                    FillDepartmentData 3, departments(i)
                Next i
                
                .Range("A3").EntireRow.Insert Shift:=xlShiftDown
                FillEntireCompanyData 3
        End Select

        SortDepartments
    End With
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| DepartmentGraph
'''
''' Row            - |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' DepartmentCode - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Sub FillDepartmentData(ByVal Row As Long, ByVal DepartmentCode As String)
    With SheetDepGraph
        .Range("A" & Row).Value = DepartmentCode
        .Range("C" & Row & ":E" & Row).NumberFormat = "0%"
        
        .Range("B" & Row).Formula = "=IFERROR(VLOOKUP($A" & Row & ", '.Departments'!$A:$B, 2, FALSE), $A" & Row & ")"
        .Range("C" & Row).Formula = "=IF(COUNTIFS(BenchTable[SituationCode], ""SITUATION_UNDERPAID"", BenchTable[Department], $A" & Row & ") <> 0, COUNTIFS(BenchTable[SituationCode], ""SITUATION_UNDERPAID"", BenchTable[Department], $A" & Row & "), NA()) / $F" & Row
        .Range("D" & Row).Formula = "=IF(COUNTIFS(BenchTable[SituationCode], ""SITUATION_INMARKET"",  BenchTable[Department], $A" & Row & ") <> 0, COUNTIFS(BenchTable[SituationCode], ""SITUATION_INMARKET"",  BenchTable[Department], $A" & Row & "), NA()) / $F" & Row
        .Range("E" & Row).Formula = "=IF(COUNTIFS(BenchTable[SituationCode], ""SITUATION_OVERPAID"",  BenchTable[Department], $A" & Row & ") <> 0, COUNTIFS(BenchTable[SituationCode], ""SITUATION_OVERPAID"",  BenchTable[Department], $A" & Row & "), NA()) / $F" & Row
        .Range("F" & Row).Formula = "=IF(COUNTIF(BenchTable[Department], $A" & Row & ") - COUNTIFS(BenchTable[Department], $A" & Row & ", BenchTable[SituationCode], ""-"")<> 0, COUNTIF(BenchTable[Department], $A" & Row & ") - COUNTIFS(BenchTable[Department], $A" & Row & ", BenchTable[SituationCode], ""-""), """")"
    End With
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| DepartmentGraph
'''
''' Row - |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Sub FillEntireCompanyData(ByVal Row As Long)
    With SheetDepGraph
        .Range("A" & Row).Formula = "="" "" & '.Translations'!$B$17"
        .Range("C" & Row & ":E" & Row).NumberFormat = "0%"
        
        .Range("B" & Row).Formula = "="" "" & '.Translations'!$B$17"
        .Range("C" & Row).Formula = "=IF(COUNTIF(BenchTable[SituationCode], ""SITUATION_UNDERPAID"") <> 0, COUNTIF(BenchTable[SituationCode], ""SITUATION_UNDERPAID""), NA()) / $F" & Row & ""
        .Range("D" & Row).Formula = "=IF(COUNTIF(BenchTable[SituationCode], ""SITUATION_INMARKET"") <> 0, COUNTIF(BenchTable[SituationCode], ""SITUATION_INMARKET""), NA()) / $F" & Row & ""
        .Range("E" & Row).Formula = "=IF(COUNTIF(BenchTable[SituationCode], ""SITUATION_OVERPAID"") <> 0, COUNTIF(BenchTable[SituationCode], ""SITUATION_OVERPAID""), NA()) / $F" & Row & ""
        .Range("F" & Row).Formula = "=COUNTIF(BenchTable[SituationCode], ""<>-"")"
    End With
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| BenchmarkingAnalysis |fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Function FindDepartments() As Collection
    Dim unique As Object 'Scripting.Dictionary
    Dim availableStates As Collection
    Dim depCode As String
    Dim i As Long
    Dim Key As Variant
    
    Set unique = CreateObject("Scripting.Dictionary")
    Set availableStates = ModuleCollections.Create("SITUATION_UNDERPAID", "SITUATION_OVERPAID", "SITUATION_INMARKET")
    
    i = 3
    SheetBenchAnalysis.Calculate
    Do While SheetBenchAnalysis.Range("A" & i).Value <> Empty
        depCode = Left(SheetBenchAnalysis.Range("A" & i).Value, 3)
        'Debug.Assert SheetBenchAnalysis.Range("AE" & i).Value = "-"
        If ModuleCollections.Contains(availableStates, SheetBenchAnalysis.Range("AE" & i).Value) Then
            unique(depCode) = True
        End If
        
        i = i + 1
    Loop
    
    Set FindDepartments = New Collection
    For Each Key In unique.Keys
        FindDepartments.Add CStr(Key)
    Next Key
    
    Set unique = Nothing
    Set availableStates = Nothing
End Function

Attribute VB_Name = "ModuleInputBox"
Option Explicit

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Keys       - |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''              |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' Values     - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' Caption    - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' CurrentKey - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' ErrCode    - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''              |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'''
Public Function Choose(ByRef Keys As Collection, _
                       Optional ByRef Values As Collection = Nothing, _
                       Optional ByVal Caption As String = vbNullString, _
                       Optional CurrentKey As Variant = Empty, _
                       Optional ByRef ErrCode As Boolean = False) As Variant
                       
    Dim window As UserFormListChooser
    Set window = New UserFormListChooser
    If Values Is Nothing Then
        window.SetKeysValues Keys, Keys, CurrentKey
    Else
        window.SetKeysValues Keys, Values, CurrentKey
    End If
    window.Caption = vbNullString
    window.Label = Caption
    window.Show
    On Error GoTo errorHandler
    Choose = window.GetChosenKey()
    On Error GoTo 0
    Exit Function
errorHandler:
    Choose = CurrentKey
    ErrCode = True
End Function

''' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function ChooseMarketBenchmark() As String
    Dim currentBenchmark As String
    Dim chosenBenchmark As String
    Dim err As Boolean
    Dim mbKeys As Collection
    Dim mbValues As Collection
    Dim i As Long
    Set mbKeys = New Collection
    Set mbValues = New Collection
    
    With SheetSettings
        For i = 10 To 15 Step 1
            If .Range("D" & i).Value = 0 Then
                mbKeys.Add .Range("B" & i).Value
                mbValues.Add .Range("C" & i).Value
            End If
        Next i
    End With
    
    currentBenchmark = ModuleSettings.MarketBenchmark
    chosenBenchmark = Choose(mbKeys, mbValues, vbNullString, currentBenchmark, err)
    If err Then
        ChooseMarketBenchmark = currentBenchmark
    Else
        ChooseMarketBenchmark = chosenBenchmark
    End If
End Function

''' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function ChooseRenumerationType() As String
    Dim currentType As String
    Dim chosenType As String
    Dim err As Boolean
    Dim rtKeys As Collection
    Dim rtValues As Collection
    Dim i As Long
    Set rtKeys = New Collection
    Set rtValues = New Collection
    
    With SheetSettings
        For i = 19 To 21 Step 1
            If .Range("D" & i).Value = 0 Then
                rtKeys.Add .Range("B" & i).Value
                rtValues.Add .Range("C" & i).Value
            End If
        Next i
    End With
    
    currentType = ModuleSettings.RenumerationType
    chosenType = Choose(rtKeys, rtValues, vbNullString, currentType, err)
    If err Then
        ChooseRenumerationType = currentType
    Else
        ChooseRenumerationType = chosenType
    End If
End Function

''' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function ChooseLanguage() As String
    Dim currentLang As String
    Dim chosenLang As String
    Dim err As Boolean
    Dim lKeys As Collection
    Dim lValues As Collection
    Dim i As Long
    Dim lastRow As Long
    Set lKeys = New Collection
    Set lValues = New Collection
    
    lastRow = ModuleUtils.GetLastRow(SheetLanguage)
    
    With SheetLanguage
        For i = 2 To lastRow Step 1
            If .Range("C" & i).Value = 0 Then
                lKeys.Add .Range("A" & i).Value
                lValues.Add .Cells(i, 3 + i).Value
            End If
        Next i
    End With
    
    currentLang = ModuleSettings.Language
    chosenLang = Choose(lKeys, lValues, vbNullString, currentLang, err)
    If err Then
        ChooseLanguage = currentLang
    Else
        ChooseLanguage = chosenLang
    End If
End Function

'''
''' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
'''
''' Prompt      - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' Caption     - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
''' Message     - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' IsCancelled - |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| True, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'''               |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Public Function InputText(Optional ByVal Prompt As String = "Enter a text: ", _
                          Optional ByVal Caption As String = "Text box", _
                          Optional ByVal Message As String = vbNullString, _
                          Optional ByRef IsCancelled As Boolean = True, _
                          Optional ByVal Multiline As Boolean = False) As String
    
    Dim window As Object 'UserFormInputBox, UserFormInputString
    If Multiline Then
        Set window = New UserFormInputBox
    Else
        Set window = New UserFormInputString
    End If
    
    With window
        .Label = Prompt
        .Caption = Caption
        .Message = Message
        .Show
        On Error GoTo errorHandler
        InputText = .Message
        IsCancelled = .IsCancelled
        Unload window
        On Error GoTo 0
    End With
    Exit Function
errorHandler:
    InputText = Message
    IsCancelled = True
End Function

'''
''' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'''
''' Data         - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
'''                |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [Scripting.Dictionary]
''' Caption      - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
''' LeftCaption  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' RightCaption - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' Default      - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''                |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [System.Collections.ArrayList]
'''
Public Function ChooseMultipleItems(ByVal Data As Object, _
                                    Optional ByVal Caption As String = Empty, _
                                    Optional ByVal LeftCaption As String = Empty, _
                                    Optional ByVal RightCaption As String = Empty, _
                                    Optional ByRef Default As Object = Nothing) As Object 'System.Collections.ArrayList
                                    
    Dim window As UserFormChooseMultipleItems
    Set window = New UserFormChooseMultipleItems
    window.SetData Data:=Data, Caption:=Caption, LeftCaption:=LeftCaption, RightCaption:=RightCaption, DefaultKeys:=Default
    window.Show
    On Error GoTo errorHandler
    Set ChooseMultipleItems = window.GetChosenKeys()
    On Error GoTo 0
    Exit Function
errorHandler:
    Set ChooseMultipleItems = Default
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Default - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [System.Collections.ArrayList]
'''
Public Function ChooseSurveyRegions(Optional ByVal Default As Object = Nothing) As Object 'System.Collections.ArrayList
    Dim regData As Object 'Scripting.Dictionary
    Dim ws As Worksheet
    Dim regWs As Worksheet
    Dim regCode As String
    Dim regName As String
    Dim i As Long
    Dim lastRow As Long
    
    Set regData = CreateObject("Scripting.Dictionary")
    Set ws = SheetSSNepol
    Set regWs = SheetRegions
    lastRow = ModuleUtils.GetLastRow(ws)
    
    For i = 1 To lastRow Step 1
        regCode = ws.Range("K" & i).Value
        If Not regData.Exists(regCode) Then
            regName = ModuleUtils.VLookUp(regCode, regWs.Range("A:B"), 2)
            If regName = vbNullString Then GoTo continueLoop
            
            regData.Add regCode, regName
        End If
continueLoop:
    Next i
    
    Set ChooseSurveyRegions = ModuleInputBox.ChooseMultipleItems(Data:=regData, _
                                                                 Caption:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                                                 LeftCaption:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                                                 RightCaption:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                                                 Default:=Default)
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Default - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [System.Collections.ArrayList]
'''
Public Function ChooseSurveyJobs(Optional ByVal Default As Object = Nothing) As Object 'System.Collections.ArrayList
    Dim jobData As Object 'Scripting.Dictionary
    Dim ws As Worksheet
    Dim jobWs As Worksheet
    Dim jobCode As String
    Dim jobName As String
    Dim i As Long
    Dim lastRow As Long
    
    Set jobData = CreateObject("Scripting.Dictionary")
    Set ws = SheetSSNepol
    Set jobWs = SheetPositions
    lastRow = ModuleUtils.GetLastRow(ws)
    
    For i = 1 To lastRow Step 1
        jobCode = ws.Range("A" & i).Value
        If Not jobData.Exists(jobCode) Then
            jobName = ModuleUtils.VLookUp(jobCode, jobWs.Range("A:B"), 2)
            If jobName = vbNullString Then GoTo continueLoop
            
            jobData.Add jobCode, jobName
        End If
continueLoop:
    Next i
    
    Set ChooseSurveyJobs = ModuleInputBox.ChooseMultipleItems(Data:=jobData, _
                                                              Caption:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                                              LeftCaption:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                                              RightCaption:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                                              Default:=Default)
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Default - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [System.Collections.ArrayList]
'''
Public Function ChooseQstnrRegions(Optional ByVal Default As Object = Nothing) As Object 'System.Collections.ArrayList
    Dim regData As Object 'Scripting.Dictionary
    Dim ws As Worksheet
    Dim regWs As Worksheet
    Dim regCode As String
    Dim regName As String
    Dim i As Long
    Dim lastRow As Long
    
    Set regData = CreateObject("Scripting.Dictionary")
    Set ws = SheetBenchAnalysis
    Set regWs = SheetRegions
    lastRow = ModuleUtils.GetLastRow(ws)
    
    For i = 3 To lastRow Step 1
        regCode = ws.Range("K" & i).Value
        
        If Not regData.Exists(regCode) Then
            regName = ModuleUtils.VLookUp(regCode, regWs.Range("A:B"), 2)
            If regName = vbNullString Then GoTo continueLoop
            
            regData.Add regCode, regName
        End If
continueLoop:
    Next i
    
    Set ChooseQstnrRegions = ModuleInputBox.ChooseMultipleItems(Data:=regData, _
                                                                Caption:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                                                LeftCaption:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                                                RightCaption:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                                                Default:=Default)
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Default - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [System.Collections.ArrayList]
'''
Public Function ChooseQstnrJobs(Optional ByVal Default As Object = Nothing) As Object 'System.Collections.ArrayList
    Dim jobData As Object 'Scripting.Dictionary
    Dim ws As Worksheet
    Dim jobWs As Worksheet
    Dim jobCode As String
    Dim jobName As String
    Dim i As Long
    Dim lastRow As Long
    
    Set jobData = CreateObject("Scripting.Dictionary")
    Set ws = SheetBenchAnalysis
    Set jobWs = SheetPositions
    lastRow = ModuleUtils.GetLastRow(ws)
    
    For i = 3 To lastRow Step 1
        jobCode = ws.Range("A" & i).Value
        If Not jobData.Exists(jobCode) Then
            jobName = ModuleUtils.VLookUp(jobCode, jobWs.Range("A:B"), 2)
            If jobName = vbNullString Then GoTo continueLoop
            
            jobData.Add jobCode, jobName
        End If
continueLoop:
    Next i
    
    Set ChooseQstnrJobs = ModuleInputBox.ChooseMultipleItems(Data:=jobData, _
                                                             Caption:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                                             LeftCaption:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                                             RightCaption:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                                             Default:=Default)
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' RegionCode - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' ErrorCode  - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
'''              |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| True
'''
Public Function ChooseJob(ByVal RegionCode As String, _
                          Optional ByRef ErrorCode As Boolean = False) As SurveyDataItem
                          
    Dim window As UserFormChooseJob
    Set window = New UserFormChooseJob
    ErrorCode = False
    window.SetRegionCode RegionCode
    window.Update
    window.Show
    On Error GoTo errorHandler
    Set ChooseJob = window.GetChosenJob()
    Unload window
    On Error GoTo 0
    Exit Function
errorHandler:
    Set ChooseJob = Nothing
    ErrorCode = True
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Job blending
'''
''' RegionCode - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' ErrorCode  - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
'''              |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| True
'''
Public Function RunJobBlending(ByVal RegionCode As String, _
                               Optional ByRef ErrorCode As Boolean = False) As SurveyDataItem
                               
    Dim window As UserFormJobBlending
    Set window = New UserFormJobBlending
    ErrorCode = False
    window.SetRegion RegionCode
    window.Show
    On Error GoTo errorHandler
    Set RunJobBlending = window.GetResult()
    Unload window
    On Error GoTo 0
    Exit Function
errorHandler:
    Set RunJobBlending = New SurveyDataItem
    ErrorCode = True
End Function
Attribute VB_Name = "ModuleMenu"
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub UploadButtonClick()
    Dim inputFileName As Variant
    Dim fd As FileDialog
    
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    fd.AllowMultiSelect = False
    fd.Filters.Add "Excel files", "*.xls*", 1
    
    If fd.Show = -1 Then
        inputFileName = fd.SelectedItems(1)
        
        If Not ValidateQuestionnaire(inputFileName) Then
            MsgBox ModuleStrings.GetText("MESSAGE_INVALID_QSTNR"), vbCritical
            
            Exit Sub
        End If
        
        ModuleQuestionnaire.UploadQuestionnaire FileName:=inputFileName
    End If
End Sub

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub DeleteButtonClick()
    Dim answer As Long
    answer = MsgBox( _
        Prompt:=ModuleStrings.GetText("MESSAGE_DELETE_APPROVE"), _
        Buttons:=vbYesNo + vbQuestion)
    
    If answer <> vbYes Then
        Exit Sub
    End If
    
    ModuleQuestionnaire.DeleteQuestionnaire
End Sub



Attribute VB_Name = "ModuleQuestionnaire"
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

Private btable As ListObject

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| .BenchmarkingAnalysis
Private Property Get BenchTable() As ListObject
    If btable Is Nothing Then
        Set btable = SheetBenchAnalysis.ListObjects("BenchTable")
    End If
    
    Set BenchTable = btable
End Property

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| True, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| DataSheet
'''
''' FileName - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'''
Public Function ValidateQuestionnaire(ByVal FileName As String) As Boolean
    Dim conn As Object 'ADODB.Connection
    Dim rs As Object 'ADODB.RecordSet
    Dim connStr As String
    
    On Error GoTo errorHandler
    Set conn = CreateObject("ADODB.Connection")
    Set rs = CreateObject("ADODB.RecordSet")
    
    connStr = GetWbConnectionString(FileName)
    conn.Open connStr
    Set rs = conn.Execute("SELECT * FROM [DataSheet$A1:A1]")
    
    rs.Close
    conn.Close
    ValidateQuestionnaire = True
    Exit Function

errorHandler:
    On Error Resume Next
    rs.Close
    conn.Close
    ValidateQuestionnaire = False
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' FileName - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Public Sub UploadQuestionnaire(ByVal FileName As String)
    Dim progBar As UserFormStatusBar
    If ModuleSettings.QuestionnaireUploaded Then
        
        Exit Sub
    End If
    
    Set progBar = New UserFormStatusBar
    With progBar
        .Label = ModuleStrings.GetText("MESSAGE_UPLOAD_PROCESS")
        .Value = 10
        .Show vbModeless
    End With
    
    ThisWorkbook.UnprotectSheets
    ModuleSettings.StartOptimizingCalculation
    DoEvents
    
    FillBenchmarkingAnalysis BookName:=FileName, _
                             ProgressBarForm:=progBar
    
    ModuleSettings.EndOptimizingCalculation
    EnableFilterOnPivots
    ThisWorkbook.RefreshAll
    ModuleSettings.QuestionnaireUploaded = True
    ThisWorkbook.ProtectSheets
    
    Unload progBar
    MsgBox ModuleStrings.GetText("MESSAGE_UPLOAD_COMPLETE"), vbInformation
End Sub

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub DeleteQuestionnaire()
    Dim lastRow As Long
    ' C|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Benchmarking_Analysis
    lastRow = ModuleUtils.GetLastRow(SheetBenchAnalysis)
    If lastRow >= 3 Then
        SheetBenchAnalysis.Range("A3:G" & lastRow).Clear
    End If
    
    If lastRow >= 4 Then
        SheetBenchAnalysis.Range("H4:AY" & lastRow).Clear
    End If
    SheetBenchAnalysis.ListObjects(1).Resize SheetBenchAnalysis.Range("A2:AY3")
    
    ThisWorkbook.UnprotectSheets
    ThisWorkbook.RefreshAll
    ModuleUtils.UpdateCalculation PSheetInstructions
    ThisWorkbook.ProtectSheets
    
    ModuleSettings.QuestionnaireUploaded = False
End Sub

Private Sub DeleteEmpty()
    Dim lastRow As Long
    Dim i As Long
    
    lastRow = ModuleUtils.GetLastRow(SheetBenchAnalysis)
    BenchTable.Sort.SortFields.Clear
    BenchTable.Sort.SortFields.Add _
        Key:=SheetBenchAnalysis.Range("BenchTable[[#All],[PositionName]]"), _
        SortOn:=xlSortOnValues, _
        Order:=xlDescending, _
        DataOption:=xlSortNormal
        
    With BenchTable.Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    i = lastRow
    Do While SheetBenchAnalysis.Range("H" & i).Value = "-" And _
             SheetBenchAnalysis.Range("A" & i).Value = Empty
        
        i = i - 1
    Loop
    
    If i <> lastRow Then
        SheetBenchAnalysis.Rows((1 + i) & ":" & lastRow).Delete
    End If
    
    BenchTable.Sort.SortFields.Clear
End Sub

Private Sub FillBenchmarkingAnalysis(ByVal BookName As String, Optional ByRef ProgressBarForm As UserFormStatusBar = Nothing)
    Dim lastRow As Long
    Dim i As Long
    'Dim regCodes As Object
    
    If Not ProgressBarForm Is Nothing Then
        ProgressBarForm.Value = 20
    End If
    
    lastRow = ModuleUtils.GetLastRow(SheetBenchAnalysis)
    'Set regCodes = GetRegionCodesDictionary()
    
    With SheetBenchAnalysis
        DoEvents
        If lastRow >= 3 Then
            .Range("A3:G" & lastRow).Clear
        End If
        
        DoEvents
        If lastRow >= 4 Then
            .Range("H4:AY" & lastRow).Clear
        End If
        
        DoEvents
        CopyColumn FileName:=BookName, LastRowOutput:=lastRow
        
        'For i = 3 To lastRow Step 1
        '    .Range("F" & i).Value = regCodes(.Range("F" & i).Value)
        'Next i
        
        .ListObjects(1).Resize .Range("A2:AY" & lastRow)
        
        If Not ProgressBarForm Is Nothing Then
            ProgressBarForm.Value = 35
        End If
        
        DoEvents
        DeleteEmpty
        If Not ProgressBarForm Is Nothing Then
            ProgressBarForm.Value = 40
        End If
        
        DoEvents
        lastRow = ModuleUtils.GetLastRow(SheetBenchAnalysis)
        If lastRow > 4 Then
            .Range("H4:AY4").AutoFill Destination:=.Range("H4:AY" & lastRow)
        End If
        
        DoEvents
        If Not ProgressBarForm Is Nothing Then
            ProgressBarForm.Value = 50
        End If
        
        DoEvents
        ' SortDepartments -> moduledepgraph
        
        DoEvents
        ModuleDepartmentGraph.UpdateChartArea
        
        ThisWorkbook.RefreshAll
        If Not ProgressBarForm Is Nothing Then
            ProgressBarForm.Value = 80
        End If
    End With
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| DataSheet |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|
''' |fffd||fffd||fffd||fffd| Benchmarking_Analysis |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.
'''
''' FileName      - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' LastRowOutput - |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
'''                 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| DataSheet |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''                 |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Private Sub CopyColumn(ByVal FileName As String, Optional ByRef LastRowOutput As Long)
    Dim rsCon As Object 'ADODB.Connection
    Dim rsData As Object 'ADODB.RecordSet
    Dim szConnect As String
    Dim szSQL As String
    Dim lCount As Long
    Dim copyFrom As Variant 'String()
    Dim copyTo As Variant 'String()
    Dim i As Long
    Dim j As Long
    Dim lastRow As Long
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim ccMode As Boolean
    Dim tempCalc As Boolean
    Dim lastFilled As Long
    Const maxEmpty As Long = 10000
    
    szConnect = GetWbConnectionString(FileName)
    
    Set rsCon = CreateObject("ADODB.Connection")
    Set rsData = CreateObject("ADODB.Recordset")
    
    ' |fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| Benchmarking_Analysis, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    copyFrom = Array("B", "E", "S", "Y", "D", "R")
    copyTo = Array("A", "C", "D", "E", "B", "G")
    
    rsCon.Open szConnect
    'On Error Resume Next
    
    szSQL = "SELECT * FROM [DataSheet$B:B];"
    rsData.Open szSQL, rsCon, 0, 1, 1
    
    i = 0
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 8-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 7
    For i = 0 To 7 Step 1
        rsData.MoveNext
    Next i
    
    Do
        If rsData.EOF Then GoTo endCount
        
        If IsNull(rsData(0)) Then
            j = j + 1
        ElseIf CStr(rsData(0)) = vbNullString Then
            j = j + 1
        Else
            lastFilled = i
            j = 0
        End If
        
        If j = maxEmpty Then
            GoTo endCount
        End If
        
        i = i + 1
        rsData.MoveNext
    Loop
endCount:
    rsData.Close
    
    lastRow = lastFilled
    LastRowOutput = lastRow
    'lastRow = sh.Cells(sh.Rows.Count, 2).End(xlUp).Row '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Datasheet
    
    For i = 0 To UBound(copyFrom) Step 1
        szSQL = "SELECT * FROM [DataSheet$" & copyFrom(i) & "7:" & copyFrom(i) & lastRow & "]; "
        rsData.Open szSQL, rsCon, 0, 1, 1
        
        If Not rsData.EOF Then
            SheetBenchAnalysis.Cells(3, copyTo(i)).CopyFromRecordset rsData
        Else
            MsgBox "No records returned from : " & FileName, vbCritical
        End If
        rsData.Close
    Next i
    
    'HARDCODE: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| P -> F - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    szSQL = _
        "SELECT * " & _
        "  FROM [DataSheet$P7:P" & lastRow & "]; "
    
    rsData.Open szSQL, rsCon, 0, 1, 1
    If Not rsData.EOF Then
        Temp.Cells.Clear
        Temp.Range("A1").CopyFromRecordset rsData
        lastRow = ModuleUtils.GetLastRow(Temp)
        Temp.Range("B1:B" & lastRow).FormulaR1C1 = "=SWITCH(R[0]C[-1], " & GetRegionsTableQuery() & ")"
        tempCalc = Temp.EnableCalculation
        Temp.EnableCalculation = True
        Temp.EnableCalculation = False
        Temp.Range("B1:B" & lastRow).Copy
        SheetBenchAnalysis.Range("F3").PasteSpecial xlPasteValues
        Application.CutCopyMode = False
        Temp.EnableCalculation = tempCalc
        Temp.Cells.Clear
        'SheetBenchAnalysis.Cells(3, "F").CopyFromRecordset rsData
    Else
        MsgBox "No records returned from : " & FileName, vbCritical
    End If
    rsData.Close
    rsCon.Close
    
    Set rsData = Nothing
    Set rsCon = Nothing
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SQL-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' FileName - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'''
Private Function GetWbConnectionString(ByVal FileName As String) As String
    If Val(Application.Version) < 12 Then
        GetWbConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;" & _
                                "Data Source=" & FileName & ";" & _
                                "Extended Properties=""Excel 8.0;HDR=No"";"
    Else
        GetWbConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                                "Data Source=" & FileName & ";" & _
                                "Extended Properties=""Excel 12.0;HDR=No"";"
    End If
End Function

Private Sub EnableFilterOnPivots()
    Dim ptable As PivotTable
    Dim pfield As PivotField
    Dim pitems As PivotItems
    Dim pitem As PivotItem
    
    On Error Resume Next
    ThisWorkbook.RefreshAll
    
    ' PositionBar: PivotUnderOverpaimentCount, PivotUnderOverpaimentAverage
    Set ptable = SheetPositionBar.PivotTables("PivotUnderOverpaimentCount")
    Set pfield = ptable.PivotFields("SituationCode")
    With pfield
        Set pitems = pfield.PivotItems
        Set pitem = pitems.Item("0")
        pitem.Visible = False
        
        Set pitem = pitems.Item("-")
        pitem.Visible = False
    End With
    
    Set ptable = SheetPositionBar.PivotTables("PivotUnderOverpaimentAverage")
    Set pfield = ptable.PivotFields("SituationCode")
    With pfield
        Set pitems = pfield.PivotItems
        Set pitem = pitems.Item("0")
        pitem.Visible = False
        
        Set pitem = pitems.Item("-")
        pitem.Visible = False
    End With
End Sub

Private Function GetRegionCodesDictionary() As Object 'Scripting.Dictionary
    Dim dict As Object 'Scripting.Dictionary
    Dim i As Long
    Dim j As Long
    Dim lastRow As Long
    Dim langNum As Long
    Dim regName As String
    Dim regCode As String
    
    Set dict = CreateObject("Scripting.Dictionary")
    
    lastRow = GetLastRow(SheetRegions)
    langNum = GetLastRow(SheetLanguage) - 1
    
    For i = 1 To lastRow Step 1
        For j = 3 To 2 + langNum Step 1
            regName = SheetRegions.Cells(i, j).Value
            regCode = SheetRegions.Cells(i, 1).Value
            
            dict(regName) = regCode
        Next j
    Next i
    
    Set GetRegionCodesDictionary = dict
End Function

Private Function GetRegionsTableQuery() As String
    Dim lastRow As Long
    Dim i As Long
    Dim regs As Object 'Scripting.Dictionary
    Dim queryArr() As String
    Dim regName As Variant 'String
    Dim regCode As String
    
    Set regs = GetRegionCodesDictionary()
    ReDim queryArr(1 To regs.Count)
    i = 1
    For Each regName In regs
        regCode = regs(regName)
        queryArr(i) = _
            CForStr(regName) & ", " & CForStr(regCode)
        
        i = i + 1
    Next regName
    queryArr(regs.Count) = "True, ""-"""
    
    Set regs = Nothing
    
    GetRegionsTableQuery = Join(queryArr, ", ")
End Function

Private Function CForStr(ByVal Text As String)
    CForStr = """" & Replace(Text, """", """""") & """"
End Function

Attribute VB_Name = "ModuleSettings"
Option Explicit

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Get CurrentCurrency() As String
    CurrentCurrency = SheetSettings.Range("CURRENCY").Value
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (COUNTRY |fffd||fffd||fffd| CAPITAL)
Public Property Get MarketDataGradingMode() As String
    MarketDataGradingMode = SheetSettings.Range("MARKET_DATA_GRADING").Value
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (COUNTRY |fffd||fffd||fffd| CAPITAL)
Public Property Let MarketDataGradingMode(ByVal Value As String)
    SheetSettings.Range("MARKET_DATA_GRADING").Value = Value
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Let CurrentCurrency(ByVal Value As String)
    SheetSettings.Range("CURRENCY").Value = Value
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Get RenumerationType() As String
    RenumerationType = SheetSettings.Range("RENUMERATION_TYPE").Value
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Let RenumerationType(ByVal Value As String)
    SheetSettings.Range("RENUMERATION_TYPE").Value = Value
    
    ModuleSettings.StartOptimizingCalculation
    ThisWorkbook.UnprotectSheets
    ModuleDepartmentGraph.UpdateChartArea
    ThisWorkbook.RefreshAll
    ThisWorkbook.ProtectSheets
    ModuleSettings.EndOptimizingCalculation
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Get MarketBenchmark() As String
    MarketBenchmark = SheetSettings.Range("MARKET_BENCHMARK").Value
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Let MarketBenchmark(ByVal Value As String)
    SheetSettings.Range("MARKET_BENCHMARK").Value = Value
    
    ModuleSettings.StartOptimizingCalculation
    ThisWorkbook.UnprotectSheets
    ModuleDepartmentGraph.UpdateChartArea
    ThisWorkbook.RefreshAll
    ThisWorkbook.ProtectSheets
    ModuleSettings.EndOptimizingCalculation
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| True, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Get QuestionnaireUploaded() As Boolean
    QuestionnaireUploaded = SheetSettings.Range("QSTNR_UPLOADED").Value
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Let QuestionnaireUploaded(ByVal Value As Boolean)
    SheetSettings.Range("QSTNR_UPLOADED").Value = Value
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public Property Get SalaryType() As String
    SalaryType = SheetSettings.Range("SALARY_TYPE")
End Property

Public Property Let SalaryType(ByVal Value As String)
    SheetSettings.Range("SALARY_TYPE").Value = Value
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|. ENG, RUS, UKR)
Public Property Get Language() As String
    Language = SheetLanguage.Range("LANG_CODE").Value
End Property

Public Property Get LanguageIndex() As Long
    LanguageIndex = SheetLanguage.Range("LANG_INDEX")
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Property Let Language(ByVal Value As String)
    Dim newLineIndex As Long
    Dim lastRow As Long
    Dim i As Long
    Dim rng As Range
    Dim regText As String
    Dim depText As String
    Dim jobText As String
    
    lastRow = ModuleUtils.GetLastRow(SheetLanguage)
    Set rng = SheetLanguage.Range("B2:B" & lastRow)
    
    newLineIndex = ModuleUtils.Match(Value, SheetLanguage.Range("A2:A" & lastRow)) + 1
    
    If newLineIndex < 1 Then
        Exit Property
    End If
    
    rng.Value = 0
    SheetLanguage.Range("B" & newLineIndex).Value = 1
    
    ThisWorkbook.UnprotectSheets
    ThisWorkbook.RefreshAll
    
    regText = ModuleStrings.GetText("MESSAGE_REGION")
    depText = ModuleStrings.GetText("MESSAGE_DEPARTMENT")
    jobText = ModuleStrings.GetText("MESSAGE_JOB_TITLE")
    
    With ThisWorkbook.SlicerCaches
        .Item("Slicer_PositionBenchRegion").Slicers("PositionBenchRegionSlicer").Caption = regText
        .Item("Slicer_ReportRegion").Slicers("ReportRegionSlicer").Caption = regText
        
        .Item("Slicer_PositionBenchDepartment").Slicers("PositionBenchDepartmentSlicer").Caption = depText
        .Item("Slicer_RegionalOverviewDepartment").Slicers("RegionalOverviewDepartmentSlicer").Caption = depText
        .Item("Slicer_ReportDepartment").Slicers("ReportDepartmentSlicer").Caption = depText
        
        .Item("Slicer_PositionBenchPosition").Slicers("PositionBenchPositionSlicer").Caption = jobText
        .Item("Slicer_RegionalOverviewPosition").Slicers("RegionalOverviewPositionSlicer").Caption = jobText
        .Item("Slicer_ReportPosition").Slicers("ReportPositionSlicer").Caption = jobText
    End With
    
    UpdateCommentImage newLineIndex - 1
    ThisWorkbook.ProtectSheets
End Property

Private Sub UpdateCommentImage(ByVal LanguageIndex As Long)
    Dim cmtSheet As Worksheet
    Dim currLang As Long
    Set cmtSheet = ThisWorkbook.Worksheets(".Comments")
    
    With PSheetInstructions.Range("I9")
        If Not .Comment Is Nothing Then
            .Comment.Delete
        End If
        
        
        cmtSheet.Cells(1, LanguageIndex).Copy
        
        .PasteSpecial Paste:=xlPasteComments
        .Comment.Shape.Left = 100
        .Comment.Shape.Width = 550
        .Comment.Shape.Height = 300
    End With
End Sub

'''
''' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Decimal
'''
Public Property Get UnderpaimentBorder() As Variant 'Decimal
    UnderpaimentBorder = CDec(SheetSettings.Range("BORDER_UNDERPAIMENT").Value)
End Property

'''
''' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Decimal
'''
Public Property Get OverpaimentBorder() As Variant 'Decimal
    OverpaimentBorder = CDec(SheetSettings.Range("BORDER_OVERPAIMENT").Value)
End Property

Public Property Get UnderOverpaimentCoef() As Variant 'Decimal
    UnderOverpaimentCoef = CDec(SheetSettings.Range("PERCENT").Value)
End Property

Public Property Let UnderOverpaimentCoef(ByVal Value As Variant)
    Dim ch As Chart
    Dim leg As Legend
    Dim legEntries As LegendEntries
    Dim legEntry As LegendEntry
    Dim legKey As LegendKey
    Dim chArr As Variant 'MSForms.ChartObject()
    Dim chLegPos As Variant 'Long()
    Dim i As Long
        
    SheetSettings.Range("PERCENT").Value = CDec(Value)
    
    ModuleSettings.StartOptimizingCalculation
    ThisWorkbook.UnprotectSheets
    
    chArr = Array( _
        PSheetCompanyBench.ChartObjects("GeneralBar"), _
        PSheetCompanyBench.ChartObjects("ChartDepGraph"), _
        PSheetPositionBench.ChartObjects("ChartPositionBar"))
        
    chLegPos = Array( _
        xlLegendPositionTop, _
        xlLegendPositionTop, _
        xlLegendPositionBottom)
    
    For i = LBound(chArr) To UBound(chArr) Step 1
        Set ch = chArr(i).Chart
        ch.Legend.Delete
        ch.HasLegend = True
        
        With ch.Legend.Format.TextFrame2.TextRange.Font
            .Size = btLegendFontSize
            .Name = btFontName
            .NameFarEast = btFontName
            .NameComplexScript = btFontName
            .Fill.ForeColor.RGB = RGB(99, 99, 99)
        End With
        
        If Value = 0 Then
            ch.Legend.LegendEntries(2).Delete
        End If
        
        ch.Legend.Position = chLegPos(i)
    Next i
    
    ThisWorkbook.RefreshAll
    ThisWorkbook.ProtectSheets
    ModuleSettings.EndOptimizingCalculation
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScreenUpdating, EnableEvents, Calculation
Public Sub StartOptimizingCalculation()
    With SheetSettings
        If Not .Range("C32").Value Then
               .Range("C33").Value = Application.ScreenUpdating
               .Range("C34").Value = Application.EnableEvents
               .Range("C35").Value = Application.Calculation
               .Range("C32").Value = True
            
            Application.ScreenUpdating = False
            Application.EnableEvents = False
            Application.Calculation = xlCalculationManual
        End If
    End With
End Sub

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScreenUpdating, EnableEvents, Calculation
''' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub EndOptimizingCalculation(Optional ByVal SetRightSettings As Boolean = False)
    With SheetSettings
        If .Range("C32").Value Then
            Application.ScreenUpdating = .Range("C33").Value
            Application.EnableEvents = .Range("C34").Value
            Application.Calculation = .Range("C35").Value
            .Range("C32").Value = False
        End If
        
        If SetRightSettings Then
            Application.ScreenUpdating = True
            Application.EnableEvents = True
            Application.Calculation = xlCalculationAutomatic
        End If
    End With
End Sub

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SetDefaultValues()
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    With SheetSettings
        .Range("C33").Value = True
        .Range("C34").Value = True
        .Range("C35").Value = xlCalculationAutomatic
    End With
End Sub

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Get StartDate() As Date
    StartDate = SheetSettings.Range("START_DATE").Value
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Let StartDate(ByVal Value As Date)
    SheetSettings.Range("START_DATE").Value = Value
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Get EndDate() As Date
    EndDate = SheetSettings.Range("END_DATE").Value
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Let EndDate(ByVal Value As Date)
    SheetSettings.Range("END_DATE").Value = Value
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Get BaseRegion() As String
    BaseRegion = SheetSettings.Range("BASE_REGION").Value
End Property

''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Let BaseRegion(ByVal Value As String)
    SheetSettings.Range("BASE_REGION").Value = Value
    
    ModuleSettings.StartOptimizingCalculation
    ThisWorkbook.UnprotectSheets
    ThisWorkbook.RefreshAll
    ThisWorkbook.ProtectSheets
    ModuleSettings.EndOptimizingCalculation
End Property
Attribute VB_Name = "ModuleStrings"
Option Explicit

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
'''
''' Code   - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' Params - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| ~1, ~2, ..., |fffd||fffd|
'''          |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''          [String()]
'''
Public Function GetText(ByVal Code As String, ParamArray Params() As Variant) As String
    Dim rng As Range
    Dim i As Long
    Dim ind As Long
    Set rng = SheetTranslations.Range("A:B")
    
    GetText = ModuleUtils.VLookUp(Code, rng, 2)
    ind = 1
    For i = LBound(Params) To UBound(Params) Step 1
        GetText = Replace(GetText, "~" & ind, Params(i))
        
        ind = ind + 1
    Next i
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| $TEXT_CODE$
''' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|.
'''
''' Text - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'''
Public Function ProcessText(ByVal Text As String) As String
    Dim regEx As Object 'VBScript.RegExp
    Set regEx = CreateObject("vbscript.regexp")
    With regEx
        .IgnoreCase = True
        .Pattern = "\$[A-Za-z\_]+\$"
        .Global = True
    End With
    
    
    Dim allMatches As Object 'VBScript.MatchCollection
    Dim Match As String
    Dim textCode As String
    Dim i As Long
    
    Set allMatches = regEx.Execute(Text)
    For i = 0 To allMatches.Count - 1
        Match = allMatches.Item(i).Value
        textCode = Mid(Match, 2, Len(Match) - 2)
        Text = Replace(Text, Match, ModuleStrings.GetText(textCode))
    Next i
    
    ProcessText = Text
End Function

Attribute VB_Name = "ModuleUtils"
Option Explicit

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Sheet  - |fffd||fffd||fffd||fffd|
''' Column - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|)
'''          [Long, String]
'''
Public Function GetLastRow(ByRef Sheet As Worksheet, Optional ByVal Column As Variant = "A") As Long
    GetLastRow = Sheet.Cells(Sheet.Rows.Count, Column).End(xlUp).Row
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd|
'''
''' Sheet - |fffd||fffd||fffd||fffd|
''' Row   - |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1)
'''
Public Function GetLastCol(ByRef Sheet As Worksheet, Optional ByVal Row As Long = 1) As Long
    GetLastCol = Sheet.Cells(Row, Sheet.Columns.Count).End(xlToLeft).Column
End Function

'''
''' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| ListBox |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| ListBox)
'''
''' Body       - |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
''' Header     - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' ArrHeaders - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| [String()]
'''
Public Sub CreateListBoxHeader(ByRef Body As MSForms.ListBox, ByRef Header As MSForms.ListBox, ParamArray ArrHeaders() As Variant)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Header.ColumnCount = Body.ColumnCount
    Header.ColumnWidths = Body.ColumnWidths

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Header.Clear
    Header.AddItem
    Header.Font.Bold = True
    Dim i As Long
    For i = 0 To UBound(ArrHeaders)
        Header.List(0, i) = ArrHeaders(i)
    Next i

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Body.ZOrder 1
    Header.ZOrder 0
    Header.SpecialEffect = fmSpecialEffectFlat
    Header.BackColor = RGB(200, 200, 200)
    Header.Height = 14
    Header.Locked = True

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Header.Width = Body.Width
    Header.Left = Body.Left
    Header.Top = Body.Top - (Header.Height - 1)
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'''
''' Sheet - |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
Public Sub UpdateCalculation(ByRef Sheet As Worksheet)
    Dim oldVal As Boolean
    
    With Sheet
        oldVal = .EnableCalculation
    
        .EnableCalculation = False
        .EnableCalculation = True
    
        .EnableCalculation = oldVal
    End With
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
''' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SQL-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Text - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'''
Public Sub Clipboard(ByVal Text As String)
    Dim dataobj As MSForms.DataObject
    Set dataobj = New MSForms.DataObject
    dataobj.SetText Text
    dataobj.PutInClipboard
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| VLOOKUP |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:
''' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'''
''' Value        - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
''' SearchRange  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
''' ColumnNumber - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'''
Public Function VLookUp(ByVal Value As Variant, ByRef SearchRange As Range, ByVal ColumnNumber As Long) As Variant
    On Error GoTo errorHandler
    VLookUp = Application.WorksheetFunction.VLookUp(Value, _
                                                    SearchRange, _
                                                    ColumnNumber, _
                                                    False)
    On Error GoTo 0
    Exit Function
errorHandler:
    VLookUp = Empty
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| MATCH |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:
''' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0
'''
''' Value        - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
''' SearchRange  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'''
Public Function Match(ByVal Value As Variant, ByRef SearchRange As Range) As Long
    On Error GoTo errorHandler
    Match = Application.WorksheetFunction.Match(Value, _
                                                SearchRange, _
                                                0)
    On Error GoTo 0
    Exit Function
errorHandler:
    Match = 0
End Function

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Caption |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| $TEXT_CODE$ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'''
''' window - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'''
Public Sub UpdateCaptions(ByRef window As UserForm)
    Dim Control As Object 'MSForms.Control
    On Error Resume Next
    For Each Control In window.Controls
        Control.Caption = ModuleStrings.ProcessText(Control.Caption)
    Next Control
End Sub

'''
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MSForms. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Control - UserForm, Frame |fffd| |fffd|.|fffd|.
'''
''' Control - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| MSForms.Control
'''
Public Sub SetControlsText(ByRef Control As Object)
    Dim ctrl As Object 'MSForms.Control
    
    With Control.Font
        .Bold = False
        .Name = btFontName
        .Size = btFormsFontSize
    End With
    
    On Error GoTo errorHandler
    For Each ctrl In Control.Controls
        SetControlsText ctrl
    Next ctrl
    Exit Sub
errorHandler:
End Sub

Attribute VB_Name = "PSheetCompanyBench"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    Cancel = True
End Sub

Attribute VB_Name = "PSheetInstructions"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private DisableEvents As Boolean

Private scrlRows As Object 'Scripting.Dictionary

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    Cancel = True
End Sub

Public Property Get ScrollRows() As Object 'Scripting.Dictionary
    If scrlRows Is Nothing Then
        Set scrlRows = CreateObject("Scripting.Dictionary")
        
        With scrlRows
            .Add "$L$19:$M$20", 3
            .Add "$L$21:$M$22", 41
            .Add "$L$23:$M$24", 80
            .Add "$L$25:$M$26", 4
            .Add "$L$27:$M$28", 16
            .Add "$L$29:$M$30", 2
            .Add "$L$31:$M$32", 6
        End With
    End If
    
    Set ScrollRows = scrlRows
End Property

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
    Dim newValue As String
    Dim window As UserFormCompareTable
    Select Case Target.Range.Address
        
        ' Choose language hyperlink click handler
        Case "$I$1:$M$1"
            newValue = ModuleInputBox.ChooseLanguage()
            If ModuleSettings.Language <> newValue Then
                ModuleSettings.Language = newValue
            End If
            
        ' Choose market benchmark hyperlink click handler
        Case "$I$9:$M$9"
            newValue = ModuleInputBox.ChooseMarketBenchmark()
            If ModuleSettings.MarketBenchmark <> newValue Then
                ModuleSettings.MarketBenchmark = newValue
            End If
            
        ' Choose renumeration type hyperlink click handler
        Case "$I$10:$M$11"
            newValue = ModuleInputBox.ChooseRenumerationType()
            If ModuleSettings.RenumerationType <> newValue Then
                ModuleSettings.RenumerationType = newValue
            End If
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Case "$I$12:$M$13"
            If ModuleSettings.QuestionnaireUploaded Then
                ModuleMenu.DeleteButtonClick
            Else
                ModuleMenu.UploadButtonClick
            End If
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Case "$L$29:$M$30"
            Set window = New UserFormCompareTable
            window.Show
    End Select
End Sub


Attribute VB_Name = "PSheetPositionBench"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    Cancel = True
End Sub
Attribute VB_Name = "PSheetRegionalOverview"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    Cancel = True
End Sub
Attribute VB_Name = "PSheetReport"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    Cancel = True
End Sub
Attribute VB_Name = "PSheetTest"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub OpenSettings()
    Dim window As UserFormSettings
    Set window = New UserFormSettings
    
    window.Show
End Sub

Public Sub OpenBriefAnalysis()
    ModuleBriefAnalysis.MakePresentation
End Sub

Public Sub OpenCompareTable()
    Dim window As UserFormCompareTable
    Set window = New UserFormCompareTable
    
    window.Show
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetBenchAnalysis"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetCurrencyRate"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetDepGraph"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetDepartments"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetGeneralBar"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetGeneralDiagram"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetGrades"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetGradesChart"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetLanguage"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetNearRegions"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetPositionBar"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetPositions"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetRegCoefs"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetRegCoefsAvg"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetRegCoefsPivot"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetRegionalOverview"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetRegions"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetSSNepol"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetSSPol"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetSettings"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetSurveyName"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetTop10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetTranslations"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SurveyDataItem"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Code As String
Public Name As String
Public Region As String

Public MonthLowerDecile As Double
Public MonthFirstQuartile As Double
Public MonthMedian As Double
Public MonthThirdQuartile As Double
Public MonthUpperDecile As Double
Public MonthAverage As Double

Public YearLowerDecile As Double
Public YearFirstQuartile As Double
Public YearMedian As Double
Public YearThirdQuartile As Double
Public YearUpperDecile As Double
Public YearAverage As Double

Public TotalYearLowerDecile As Double
Public TotalYearFirstQuartile As Double
Public TotalYearMedian As Double
Public TotalYearThirdQuartile As Double
Public TotalYearUpperDecile As Double
Public TotalYearAverage As Double
Attribute VB_Name = "Temp"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Testing"
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub UnprotectSheets()
    Dim osht As Object 'Worksheet
    Dim sht As Worksheet
    
    ThisWorkbook.Unprotect btProtectionPassword
    For Each osht In ThisWorkbook.Sheets
        Set sht = osht
        
        If Left(sht.Name, 1) <> "." Then
            sht.Unprotect btProtectionPassword
        End If
    Next osht
End Sub

Public Sub ProtectSheets()
    Dim osht As Object 'Worksheet
    Dim sht As Worksheet
    
    For Each osht In ThisWorkbook.Sheets
        Set sht = osht
        
        If Left(sht.Name, 1) <> "." Then
            sht.Protect btProtectionPassword, AllowFiltering:=True, AllowUsingPivotTables:=True
        End If
    Next osht
    ThisWorkbook.Protect btProtectionPassword, True, False
End Sub

Public Sub VeryhideAll()
    Dim osht As Object 'Worksheet
    Dim sht As Worksheet
    
    UnprotectSheets
    For Each osht In ThisWorkbook.Sheets
        Set sht = osht
        
        If Left(sht.Name, 1) = "." Then
            sht.Visible = xlSheetVeryHidden
        Else
            sht.Visible = xlSheetVisible
        End If
    Next osht
    
    ProtectSheets
End Sub

Public Sub UnhideAll()
    Dim osht As Object 'Worksheet
    Dim sht As Worksheet
    
    UnprotectSheets
    For Each osht In ThisWorkbook.Sheets
        Set sht = osht
        
        sht.Visible = xlSheetVisible
    Next osht
End Sub

Private Sub Workbook_Open()
    PSheetInstructions.Activate
    ThisWorkbook.UnprotectSheets
    ThisWorkbook.RefreshAll
    ThisWorkbook.ProtectSheets
    
    ModuleSettings.SetDefaultValues
End Sub
Attribute VB_Name = "UserFormChooseJob"
Attribute VB_Base = "0{73FF5650-53E6-4449-ADF7-73453ADB1FA7}{68493357-6AEC-40EC-A596-29FA89750609}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private fJobLines As Collection
Private fJobs As Collection
Private fUsage As Object 'Scripting.Dictionary
Private fFilter As String
Private fRegionCode As String

Private Sub FilterBox_Change()
    fFilter = Trim(UCase(FilterBox.Value))
    Update
End Sub

Private Sub OKButton_Click()
    Hide
End Sub

Private Sub UserForm_Initialize()
    Set fJobLines = New Collection
    Set fJobs = New Collection
    
    ModuleUtils.UpdateCaptions Me
    ModuleUtils.SetControlsText Me
    ModuleUtils.CreateListBoxHeader ListBoxJobs, _
                                    ListBoxHeader, _
                                    ModuleStrings.GetText("MESSAGE_JOB_CODE"), _
                                    ModuleStrings.GetText("MESSAGE_JOB_TITLE_EY")
End Sub

Public Sub Update()
    Dim i As Long
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim sitem As SurveyDataItem
    Dim usg As Object 'Scripting.Dicitonary
    
    Set ws = SheetBenchAnalysis
    lastRow = ModuleUtils.GetLastRow(ws)
    
    Set fJobLines = New Collection
    Set fJobs = New Collection
    ListBoxJobs.Clear
    Set usg = CreateObject("Scripting.Dictionary")
    
    For i = 3 To lastRow Step 1
        If usg.Exists(ws.Range("A" & i).Value) Then
            GoTo continueLoop
        End If
        
        If InStr(1, Trim(UCase(ws.Range("H" & i).Value)), fFilter) < 1 And _
           InStr(1, Trim(UCase(ws.Range("A" & i).Value)), fFilter) < 1 Then
           
            GoTo continueLoop
        End If
        
        If fRegionCode <> vbNullString Then
            If ws.Range("F" & i).Value <> fRegionCode And ws.Range("F" & i).Value <> "-" Then
                GoTo continueLoop
            End If
        End If
        
        fJobLines.Add i
        Set sitem = New SurveyDataItem
        On Error Resume Next
        sitem.Code = ws.Range("A" & i).Value
        sitem.Name = ws.Range("H" & i).Value
        sitem.Region = ws.Range("F" & i).Value
        
        sitem.MonthLowerDecile = ws.Range("AJ" & i).Value
        sitem.MonthFirstQuartile = ws.Range("AK" & i).Value
        sitem.MonthMedian = ws.Range("AL" & i).Value
        sitem.MonthThirdQuartile = ws.Range("AM" & i).Value
        sitem.MonthUpperDecile = ws.Range("AN" & i).Value
        sitem.MonthAverage = ws.Range("AO" & i).Value
        
        sitem.YearLowerDecile = ws.Range("AJ" & i).Value * 12
        sitem.YearFirstQuartile = ws.Range("AK" & i).Value * 12
        sitem.YearMedian = ws.Range("AL" & i).Value * 12
        sitem.YearThirdQuartile = ws.Range("AM" & i).Value * 12
        sitem.YearUpperDecile = ws.Range("AN" & i).Value * 12
        sitem.YearAverage = ws.Range("AO" & i).Value * 12
        
        sitem.TotalYearLowerDecile = ws.Range("AQ" & i).Value
        sitem.TotalYearFirstQuartile = ws.Range("AR" & i).Value
        sitem.TotalYearMedian = ws.Range("AS" & i).Value
        sitem.TotalYearThirdQuartile = ws.Range("AT" & i).Value
        sitem.TotalYearUpperDecile = ws.Range("AU" & i).Value
        sitem.TotalYearAverage = ws.Range("AV" & i).Value
        On Error GoTo 0
        
        usg(sitem.Code) = True
        fJobs.Add sitem
        ListBoxJobs.AddItem
        ListBoxJobs.List(ListBoxJobs.ListCount - 1, 0) = sitem.Code
        ListBoxJobs.List(ListBoxJobs.ListCount - 1, 1) = sitem.Name
continueLoop:
    Next i
End Sub

Public Sub SetRegionCode(ByVal RegionCode As String)
    fRegionCode = RegionCode
End Sub

Public Sub SetFilter(ByVal Filter As String)
    fFilter = Trim(UCase(Filter))
End Sub

Public Function GetChosenJob() As SurveyDataItem
    If ListBoxJobs.ListIndex >= 0 Then
        Set GetChosenJob = fJobs(ListBoxJobs.ListIndex + 1)
    Else
        Set GetChosenJob = New SurveyDataItem
    End If
End Function

Public Function GetBenchSheetLineNum() As Long
    If ListBoxJobs.ListIndex >= 0 Then
        GetBenchSheetLineNum = fJobLines(ListBoxJobs.ListIndex + 1)
    Else
        GetBenchSheetLineNum = 0
    End If
End Function

Attribute VB_Name = "UserFormChooseMultipleItems"
Attribute VB_Base = "0{F97124C8-1901-4355-B0EF-1F2009A5F2A1}{8605E9E4-5598-4B9C-9E7C-E1D4AA4DF386}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private LeftKeys As Object 'System.Collections.ArrayList
Private RightKeys As Object 'System.Collections.ArrayList

Private Sub UserForm_Initialize()
    ModuleUtils.SetControlsText Me
End Sub

Public Sub SetData(ByRef Data As Object, _
                   Optional ByVal Caption As String = Empty, _
                   Optional ByVal LeftCaption As String = Empty, _
                   Optional ByVal RightCaption As String = Empty, _
                   Optional ByRef DefaultKeys As Object = Nothing)
    
    Dim elem As Variant 'String
    Dim defKeys As Object 'System.Collections.ArrayList
    Dim i As Long
    
    Me.Caption = Caption
    LeftLabel.Caption = LeftCaption
    RightLabel.Caption = RightCaption
    
    If DefaultKeys Is Nothing Then
        Set defKeys = CreateObject("System.Collections.ArrayList")
    Else
        Set defKeys = DefaultKeys
    End If
    
    Set LeftKeys = CreateObject("System.Collections.ArrayList")
    Set RightKeys = CreateObject("System.Collections.ArrayList")
    For Each elem In Data.Keys
        If defKeys.Contains(elem) Then
            RightKeys.Add elem
            RightBox.AddItem Data(elem)
        Else
            LeftKeys.Add elem
            LeftBox.AddItem Data(elem)
        End If
    Next elem
    
    Update
End Sub

Private Sub MoveRight(ByVal Index As Long)
    Dim mKey As Variant
    Dim mValue As Variant
    
    mKey = LeftKeys(Index)
    mValue = LeftBox.List(Index, 0)
    
    LeftKeys.RemoveAt Index
    LeftBox.RemoveItem Index
    
    RightKeys.Add mKey
    RightBox.AddItem mValue
    
    Update
End Sub

Private Sub MoveLeft(ByVal Index As Long)
    Dim mKey As Variant
    Dim mValue As Variant
    
    mKey = RightKeys(Index)
    mValue = RightBox.List(Index, 0)
    
    RightKeys.RemoveAt Index
    RightBox.RemoveItem Index
    
    LeftKeys.Add mKey
    LeftBox.AddItem mValue
    
    Update
End Sub

Private Sub ButtonLeft_Click()
    MoveLeft RightBox.ListIndex
End Sub

Private Sub ButtonLeftAll_Click()
    On Error GoTo endHandler
    Do
        MoveLeft 0
    Loop
endHandler:
End Sub

Private Sub ButtonRight_Click()
    MoveRight LeftBox.ListIndex
End Sub

Private Sub ButtonRightAll_Click()
    On Error GoTo endHandler
    Do
        MoveRight 0
    Loop
endHandler:
End Sub

Private Sub LeftBox_Change()
    Update
End Sub

Private Sub RightBox_Change()
    Update
End Sub

Private Sub OKButton_Click()
    Hide
End Sub

Private Sub Update()
    On Error Resume Next
    ButtonLeft.Enabled = RightBox.ListIndex >= 0
    ButtonRight.Enabled = LeftBox.ListIndex >= 0
    ButtonLeftAll.Enabled = RightBox.ListCount > 0
    ButtonRightAll.Enabled = LeftBox.ListCount > 0
    OKButton.Enabled = RightBox.ListCount > 0
End Sub

Public Function GetChosenKeys() As Object 'System.Collections.ArrayList
    Set GetChosenKeys = RightKeys
    Unload Me
End Function


Attribute VB_Name = "UserFormCompareTable"
Attribute VB_Base = "0{58889541-19B4-4842-86EC-0990B404D13D}{61F583B1-BA0B-4B8E-A751-855CCF0F2F49}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private ChosenJobs As Object 'System.Collections.ArrayList
Private ChosenRegions As Object 'System.Collections.ArrayList
Private CompareTableParams As Object

Private Sub CommandButtonOKButton_Click()
    Dim Params As Long
    Params = GetCurrentParameters()
    
    Hide
    ModuleCompareTable.MakeCompareTable MarketBenchmark:=Params, _
                                        RenumerationType:=Params, _
                                        JobCodes:=GetResultJobsList(), _
                                        Regions:=GetResultRegionsList()
    Unload Me
End Sub

Private Function GetCurrentParameters() As Long
    Dim ctrl As Object 'MSForms.Control
    For Each ctrl In CompareTableParams
        If ctrl.Value Then
            GetCurrentParameters = GetCurrentParameters + CompareTableParams(ctrl)
        End If
    Next ctrl
End Function

Private Sub UserForm_Initialize()
    ModuleUtils.UpdateCaptions Me
    SetControlsText Me
    
    Set CompareTableParams = CreateObject("Scripting.Dictionary")
    With CompareTableParams
        .Item(CheckBoxMonthlyFixed) = btMonthlyFixed
        .Item(CheckBoxAnnualFixed) = btAnnualFixed
        .Item(CheckBoxTotalAnnual) = btTotalAnnual
        
        .Item(CheckBoxLowerDecile) = btLowerDecile
        .Item(CheckBoxFirstQuartile) = btFirstQuartile
        .Item(CheckBoxMedian) = btMedian
        .Item(CheckBoxThirdQuartile) = btThirdQuartile
        .Item(CheckBoxUpperDecile) = btUpperDecile
        .Item(CheckBoxAverage) = btAverage
    End With
    
    OptionButtonChooseJob_Change
    OptionButtonChooseRegions_Change
End Sub

Private Sub OptionButtonChooseJob_Change()
    ButtonChooseJobs.Enabled = OptionButtonChooseJob.Value
    If Not OptionButtonChooseJob.Value Then Exit Sub
    
    If ChosenJobs Is Nothing Then
        ChooseJobs
        If ChosenJobs Is Nothing Then
            OptionButtonAllJobs.Value = True
        End If
    End If
End Sub

Private Sub OptionButtonChooseRegions_Change()
    ButtonChooseRegions.Enabled = OptionButtonChooseRegions.Value
    If Not OptionButtonChooseRegions.Value Then Exit Sub
    
    If ChosenRegions Is Nothing Then
        ChooseRegions
        If ChosenRegions Is Nothing Then
            OptionButtonAllRegions.Value = True
        End If
    End If
End Sub

Private Sub ButtonChooseJobs_Click()
    ChooseJobs
End Sub

Private Sub ButtonChooseRegions_Click()
    ChooseRegions
    
    Dim elem As Variant
    For Each elem In ChosenRegions
        MsgBox elem
    Next elem
End Sub

Private Sub ChooseJobs()
    Set ChosenJobs = ModuleInputBox.ChooseQstnrJobs(ChosenJobs)
End Sub

Private Sub ChooseRegions()
    Set ChosenRegions = ModuleInputBox.ChooseQstnrRegions(ChosenRegions)
End Sub

Private Function GetResultJobsList() As Object 'System.Collections.ArrayList
    If OptionButtonAllJobs.Value Then
        Set GetResultJobsList = Nothing
        Exit Function
    End If
    
    Set GetResultJobsList = ChosenJobs
End Function

Private Function GetResultRegionsList() As Object 'System.Collections.ArrayList
    If OptionButtonAllRegions.Value Then
        Set GetResultRegionsList = Nothing
        Exit Function
    End If
    
    Set GetResultRegionsList = ChosenRegions
End Function


Attribute VB_Name = "UserFormInputBox"
Attribute VB_Base = "0{822E89FE-D177-41B2-B064-1DF2BB6FA8E9}{D1E877A5-FBE1-4FEB-B035-4EADE9E216E6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private cancelFlag As Boolean
Private msg As String

Private Sub UserForm_Initialize()
    ModuleUtils.SetControlsText Me
    cancelFlag = True
End Sub

Private Sub OKButton_Click()
    msg = TextBox.Value
    cancelFlag = False
    Hide
End Sub

Private Sub CancelButton_Click()
    cancelFlag = True
    Hide
End Sub

Public Property Get Message() As String
    Message = msg
End Property

Public Property Let Message(ByVal Value As String)
    msg = Value
    TextBox.Value = Value
End Property

Public Property Get IsCancelled() As Boolean
    IsCancelled = cancelFlag
End Property

Public Property Get Label() As String
    Label = TextLabel.Caption
End Property

Public Property Let Label(ByVal Value As String)
    TextLabel.Caption = Value
End Property

Attribute VB_Name = "UserFormInputString"
Attribute VB_Base = "0{1105BF09-E4C9-4A05-8CBF-70610BA468C5}{D14C0786-8C88-4368-BF1B-D4228B65B0AB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private cancelFlag As Boolean
Private msg As String

Private Sub UserForm_Initialize()
    ModuleUtils.SetControlsText Me
    cancelFlag = True
End Sub

Private Sub OKButton_Click()
    msg = TextBox.Value
    cancelFlag = False
    Hide
End Sub

Private Sub CancelButton_Click()
    cancelFlag = True
    Hide
End Sub

Public Property Get Message() As String
    Message = msg
End Property

Public Property Let Message(m As String)
    msg = m
    TextBox.Value = m
End Property

Public Property Get IsCancelled() As Boolean
    IsCancelled = cancelFlag
End Property

Public Property Get Label() As String
    Label = TextLabel.Caption
End Property

Public Property Let Label(m As String)
    TextLabel.Caption = m
End Property


Attribute VB_Name = "UserFormJobBlending"
Attribute VB_Base = "0{C3DF44F7-80DC-467E-8CA9-462BA1038352}{69E1F90A-9EAD-45F7-ABB3-8D407996D35B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Item1 As SurveyDataItem
Private Item2 As SurveyDataItem
Private result As SurveyDataItem
Private CurrentRegion As String

Private Sub UserForm_Initialize()
    ModuleUtils.UpdateCaptions Me
    ModuleUtils.SetControlsText Me
    
    MakeHeader DataBox1, ListBoxHeader1
    MakeHeader DataBox2, ListBoxHeader2
    MakeHeader DataBoxResult, ListBoxHeader3
    
    UpdateLabels
End Sub

Private Sub MakeHeader(ByRef Box As Object, ByRef Header As Object)
    Dim ws As Worksheet
    
    ModuleUtils.CreateListBoxHeader Box, Header, _
                                    ModuleStrings.GetText("LOWER_DECILE"), _
                                    ModuleStrings.GetText("FIRST_QUARTILE"), _
                                    ModuleStrings.GetText("MEDIAN"), _
                                    ModuleStrings.GetText("THIRD_QUARTILE"), _
                                    ModuleStrings.GetText("UPPER_DECILE"), _
                                    ModuleStrings.GetText("AVERAGE")

End Sub

Public Sub SetRegion(ByVal Name As String)
     CurrentRegion = Name
End Sub

Private Sub ButtonChooseJob1_Click()
    Set Item1 = ModuleInputBox.ChooseJob(CurrentRegion)
    If Not Item1 Is Nothing Then
        JobBox1.Value = Item1.Code & " - " & Item1.Name
    End If
    
    ItemToListBox Item1, DataBox1
    SetResult
End Sub

Private Sub ButtonChooseJob2_Click()
    Set Item2 = ModuleInputBox.ChooseJob(CurrentRegion)
    If Not Item1 Is Nothing Then
        JobBox2.Value = Item2.Code & " - " & Item2.Name
    End If
    
    ItemToListBox Item2, DataBox2
    SetResult
End Sub

Private Sub SetResult()
    If Item1 Is Nothing Or Item2 Is Nothing Then
        ItemToListBox Nothing, DataBoxResult
        Exit Sub
    End If
    
    Set result = AverageItems(Item1, Item2)
    
    JobBoxResult.Value = result.Code & " - " & result.Name
    ItemToListBox result, DataBoxResult
End Sub

Public Function GetResult() As SurveyDataItem
    SetResult
    
    Set GetResult = result
End Function

Private Sub OKButton_Click()
    If Item1 Is Nothing Or Item2 Is Nothing Then
        MsgBox ModuleStrings.GetText("MESSAGE_ERROR"), vbCritical
        Exit Sub
    End If
    
    Hide
End Sub

Private Sub ScrollBar1_Change()
    UpdateLabels
    SetResult
End Sub

Private Function FormAvg(ByVal Arg1 As Double, ByVal Arg2 As Double) As Double
    FormAvg = (Percent1 / 100) * Arg1 + (Percent2 / 100) * Arg2
End Function

Private Property Get Percent1() As Double
    Percent1 = ScrollBar1.Value
End Property

Private Property Get Percent2() As Double
    Percent2 = 100 - ScrollBar1.Value
End Property

Private Sub UpdateLabels()
    Label1.Caption = ScrollBar1.Value & "%"
    Label2.Caption = (100 - ScrollBar1.Value) & "%"
End Sub

Private Function AverageItems(ByRef First As SurveyDataItem, ByRef Second As SurveyDataItem) As SurveyDataItem
    Set AverageItems = New SurveyDataItem
    With AverageItems
        If Percent1 = 100 Then
            .Code = First.Code
            .Name = First.Name
        ElseIf Percent2 = 100 Then
            .Code = Second.Code
            .Name = Second.Name
        Else
            .Code = First.Code & " / " & Second.Code
            .Name = First.Name & " / " & Second.Name
        End If
        .Region = First.Region
        
        .MonthLowerDecile = FormAvg(First.MonthLowerDecile, Second.MonthLowerDecile)
        .MonthFirstQuartile = FormAvg(First.MonthFirstQuartile, Second.MonthFirstQuartile)
        .MonthMedian = FormAvg(First.MonthMedian, Second.MonthMedian)
        .MonthThirdQuartile = FormAvg(First.MonthThirdQuartile, Second.MonthThirdQuartile)
        .MonthUpperDecile = FormAvg(First.MonthUpperDecile, Second.MonthUpperDecile)
        .MonthAverage = FormAvg(First.MonthAverage, Second.MonthAverage)
        
        .YearLowerDecile = FormAvg(First.YearLowerDecile, Second.YearLowerDecile)
        .YearFirstQuartile = FormAvg(First.YearFirstQuartile, Second.YearFirstQuartile)
        .YearMedian = FormAvg(First.YearMedian, Second.YearMedian)
        .YearThirdQuartile = FormAvg(First.YearThirdQuartile, Second.YearThirdQuartile)
        .YearUpperDecile = FormAvg(First.YearUpperDecile, Second.YearUpperDecile)
        .YearAverage = FormAvg(First.YearAverage, Second.YearAverage)
        
        .TotalYearLowerDecile = FormAvg(First.TotalYearLowerDecile, Second.TotalYearLowerDecile)
        .TotalYearFirstQuartile = FormAvg(First.TotalYearFirstQuartile, Second.TotalYearFirstQuartile)
        .TotalYearMedian = FormAvg(First.TotalYearMedian, Second.TotalYearMedian)
        .TotalYearThirdQuartile = FormAvg(First.TotalYearThirdQuartile, Second.TotalYearThirdQuartile)
        .TotalYearUpperDecile = FormAvg(First.TotalYearUpperDecile, Second.TotalYearUpperDecile)
        .TotalYearAverage = FormAvg(First.TotalYearAverage, Second.TotalYearAverage)
    End With
End Function

Private Sub ItemToListBox(ByRef Item As SurveyDataItem, ByRef Box As MSForms.ListBox)
    With Box
        .Clear
        
        If Not Item Is Nothing Then
            .AddItem
            .List(0, 0) = Item.MonthLowerDecile
            .List(0, 1) = Item.MonthFirstQuartile
            .List(0, 2) = Item.MonthMedian
            .List(0, 3) = Item.MonthThirdQuartile
            .List(0, 4) = Item.MonthUpperDecile
            .List(0, 5) = Item.MonthAverage
            
            .AddItem
            .List(1, 0) = Item.YearLowerDecile
            .List(1, 1) = Item.YearFirstQuartile
            .List(1, 2) = Item.YearMedian
            .List(1, 3) = Item.YearThirdQuartile
            .List(1, 4) = Item.YearUpperDecile
            .List(1, 5) = Item.YearAverage
            
            .AddItem
            .List(2, 0) = Item.TotalYearLowerDecile
            .List(2, 1) = Item.TotalYearFirstQuartile
            .List(2, 2) = Item.TotalYearMedian
            .List(2, 3) = Item.TotalYearThirdQuartile
            .List(2, 4) = Item.TotalYearUpperDecile
            .List(2, 5) = Item.TotalYearAverage
        End If
    End With
End Sub


Attribute VB_Name = "UserFormListChooser"
Attribute VB_Base = "0{FB8009D6-3CDD-42C2-908C-8843E7A3DFDC}{2CC349EA-2834-45A4-8DB1-A344C41369D0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private fKeys As Collection
Private fValues As Collection
Private fButtons As Collection

Public Sub SetKeysValues(ByRef Keys As Collection, ByRef Values As Collection, ByVal CurrentKey As Variant)
    Dim i As Long
    Dim radioBtn As Object 'MSForms.OptionButton
    
    Set fKeys = New Collection
    Set fValues = New Collection
    Set fButtons = New Collection
    
    FrameList.Controls.Clear
    For i = 1 To Keys.Count Step 1
        fKeys.Add Keys(i)
        fValues.Add Values(i)
        
        Set radioBtn = FrameList.Controls.Add("Forms.OptionButton.1", "Option" & i)
        With radioBtn
            .Caption = Values(i)
            .Enabled = True
            .Value = CurrentKey = Keys(i) And CurrentKey <> Empty
            .Width = 200
            .Left = 10
            .Top = 10 + ((i - 1) * .Height)
            FrameList.Height = 10 + .Top + .Height
        End With
        
        OKButton.Top = FrameList.Top + FrameList.Height + 10
        Me.Height = OKButton.Top + OKButton.Height + 40
        fButtons.Add radioBtn
    Next i
    
    ModuleUtils.SetControlsText Me
End Sub

Public Property Get Label() As String
    Label = FrameList.Caption
End Property

Public Property Let Label(ByVal Value As String)
    FrameList.Caption = Value
End Property

Public Function GetChosenKey() As Variant
    Dim i As Long
    For i = 1 To fButtons.Count Step 1
        If fButtons(i).Value Then
            GetChosenKey = fKeys(i)
            Unload Me
            Exit Function
        End If
    Next i
End Function

Private Sub OKButton_Click()
    Hide
End Sub
Attribute VB_Name = "UserFormSettings"
Attribute VB_Base = "0{788253A1-5C60-4684-BFF7-7CC938F588CC}{F04F6833-F785-4972-807D-390823BA1079}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private regCodes As Collection
Private uoPercent As Variant ' Decimal
Private uoEvents As Boolean
Private brEvents As Boolean

Private Sub UserForm_Initialize()
    Dim i As Long
    Dim langCount As Long
    Dim lastRow As Long
    
    langCount = ModuleUtils.GetLastRow(SheetLanguage) - 1
    For i = 1 To langCount Step 1
        NamesBox.AddItem
        NamesBox.List(i - 1, 0) = SheetLanguage.Cells(i + 1, 4)
        NamesBox.List(i - 1, 1) = SheetSurveyName.Cells(1, i + 2)
    Next i

    ModuleUtils.CreateListBoxHeader NamesBox, _
                                    HeaderBox, _
                                    ModuleStrings.GetText("MESSAGE_LANGUAGE"), _
                                    ModuleStrings.GetText("MESSAGE_NAME")
    
    StartDateBox.Format = dtpCustom
    EndDateBox.Format = dtpCustom
    StartDateBox.CustomFormat = "  yyyy-MM-dd"
    EndDateBox.CustomFormat = "  yyyy-MM-dd"
    
    StartDateBox.Value = ModuleSettings.StartDate
    EndDateBox.Value = ModuleSettings.EndDate
    CurrCodeBox.Value = ModuleSettings.CurrentCurrency
    
    uoEvents = False
    uoPercent = ModuleSettings.UnderOverpaimentCoef * CDec(100)
    UnderOverpaimentPercentBox.Value = uoPercent
    uoEvents = True
    
    SalaryTypeBox.AddItem btSalaryGross
    SalaryTypeBox.AddItem btSalaryNet
    If ModuleSettings.SalaryType = btSalaryGross Then
        SalaryTypeBox.ListIndex = 0
    Else
        SalaryTypeBox.ListIndex = 1
    End If
    
    brEvents = False
    lastRow = ModuleUtils.GetLastRow(SheetRegions)
    Set regCodes = New Collection
    For i = 1 To lastRow Step 1
        regCodes.Add SheetRegions.Range("A" & i).Value
        BaseRegionBox.AddItem SheetRegions.Range("B" & i).Value
        
        If SheetRegions.Range("A" & i).Value = ModuleSettings.BaseRegion Then
            BaseRegionBox.ListIndex = BaseRegionBox.ListCount - 1
        End If
    Next i
    brEvents = True
    
    CheckBoxLangMenuVisible.Value = Not PSheetInstructions.Range("A1").EntireRow.Hidden
    
    ComboBoxGradingMode.AddItem ModuleStrings.GetText("MESSAGE_COUNTRY")
    ComboBoxGradingMode.AddItem ModuleStrings.GetText("MESSAGE_CAPITAL")
    ComboBoxGradingMode.ListIndex = IIf(ModuleSettings.MarketDataGradingMode = "COUNTRY", 0, 1)
    
    ModuleUtils.SetControlsText Me
    ModuleUtils.UpdateCaptions Me
End Sub

Private Sub ComboBoxGradingMode_Change()
    If ComboBoxGradingMode.ListIndex = 0 Then
        ModuleSettings.MarketDataGradingMode = "COUNTRY"
    Else
        ModuleSettings.MarketDataGradingMode = "CAPITAL"
    End If
End Sub

Private Sub CheckBoxLangMenuVisible_Change()
    PSheetInstructions.Unprotect btProtectionPassword
    PSheetInstructions.Range("A1").EntireRow.Hidden = Not CheckBoxLangMenuVisible.Value
    PSheetInstructions.Protect btProtectionPassword
End Sub

Private Sub NamesBox_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim txtValue As String
    Dim err As Boolean
    Dim currLine As Long
    currLine = NamesBox.ListIndex

    txtValue = ModuleInputBox.InputText(Caption:=NamesBox.List(currLine, 0), _
                                        Prompt:=ModuleStrings.GetText("MESSAGE_ENTER_NAME"), _
                                        Message:=NamesBox.List(currLine, 1), _
                                        IsCancelled:=err)
    
    If err Then
        Exit Sub
    End If
    
    NamesBox.List(currLine, 1) = txtValue
    SheetSurveyName.Cells(1, currLine + 3).Value = txtValue
End Sub

Private Sub StartDateBox_Change()
    ModuleSettings.StartDate = StartDateBox.Value
End Sub

Private Sub EndDateBox_Change()
    ModuleSettings.EndDate = EndDateBox.Value
End Sub

Private Sub CurrCodeBox_Change()
    ModuleSettings.CurrentCurrency = CurrCodeBox.Value
End Sub

Private Sub SalaryTypeBox_Change()
    ModuleSettings.SalaryType = SalaryTypeBox.Value
End Sub

Private Sub UnderOverpaimentPercentBox_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If Not uoEvents Then Exit Sub
    
    uoEvents = False
    If Not ValidateDecimalNumber(UnderOverpaimentPercentBox.Value) Then
        Cancel = True
        uoEvents = True
        UnderOverpaimentPercentBox.Value = uoPercent
        
        Exit Sub
    End If
    
    uoPercent = CDec(UnderOverpaimentPercentBox.Value) / CDec(100)
    ModuleSettings.UnderOverpaimentCoef = uoPercent
    uoEvents = True
End Sub

Private Sub BaseRegionBox_Change()
    If Not brEvents Then Exit Sub
    
    ModuleSettings.BaseRegion = regCodes(BaseRegionBox.ListIndex + 1)
End Sub
Attribute VB_Name = "UserFormStatusBar"
Attribute VB_Base = "0{8010646D-03EB-4783-B359-0932DB414994}{212696B1-78CB-4850-84CA-A12F08876009}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub UserForm_Initialize()
    ProgressBar.Min = 0
    ProgressBar.Max = 100
    ModuleUtils.SetControlsText Me
End Sub

Public Property Get Label() As String
    Label = Label1.Caption
End Property

Public Property Let Label(ByVal Text As String)
    Label1.Caption = Text
End Property

Public Property Get Value() As Long
    Value = ProgressBar.Value
End Property

Public Property Let Value(ByVal Number As Long)
    ProgressBar.Value = Number
    DoEvents
End Property

Public Property Get MaxValue() As Long
    MaxValue = ProgressBar.Max
End Property

Public Property Let MaxValue(ByVal Number As Long)
    ProgressBar.Max = Number
End Property

' InQuest injected base64 decoded content
' rRw^
' *'jQh
' zRhl
' *'JX
' =(^z
' *'jS
' V+"nW

INQUEST-PP=macro
