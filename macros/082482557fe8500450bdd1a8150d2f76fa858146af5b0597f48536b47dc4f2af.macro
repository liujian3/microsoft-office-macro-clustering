Attribute VB_Name = "ATTSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public Sub CheckData()
End Sub
Attribute VB_Name = "A_Module"
Option Explicit
Public Const ATT_CODENAME = "ATTSheet"
Public Const ATT_PAGE_NAME = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const PROTECT_PSW_WORK = ""
Public Const MSG_ERR_ATT_NOTFOUND = "Runtime error: att sheet object not found"
Public Const MONTH_01 = "|fffd||fffd||fffd|"
Public Const MONTH_02 = "|fffd||fffd||fffd|"
Public Const MONTH_03 = "|fffd||fffd||fffd|"
Public Const MONTH_04 = "|fffd||fffd||fffd|"
Public Const MONTH_05 = "|fffd||fffd||fffd|"
Public Const MONTH_06 = "|fffd||fffd||fffd|"
Public Const MONTH_07 = "|fffd||fffd||fffd|"
Public Const MONTH_08 = "|fffd||fffd||fffd|"
Public Const MONTH_09 = "|fffd||fffd||fffd|"
Public Const MONTH_10 = "|fffd||fffd||fffd|"
Public Const MONTH_11 = "|fffd||fffd||fffd|"
Public Const MONTH_12 = "|fffd||fffd||fffd|"
Public Const WEEK_DAY_1 = "|fffd||fffd|"
Public Const WEEK_DAY_2 = "|fffd||fffd|"
Public Const WEEK_DAY_3 = "|fffd||fffd|"
Public Const WEEK_DAY_4 = "|fffd||fffd|"
Public Const WEEK_DAY_5 = "|fffd||fffd|"
Public Const WEEK_DAY_6 = "|fffd||fffd|"
Public Const WEEK_DAY_7 = "|fffd||fffd|"
Public sPROTECT_PSW As String
Public sRUN_TIME_ERR As String
Public bProtected As Boolean
Public sMonth(1 To 12) As String
Public sWeekDay(1 To 7) As String
Public MSG_DONE As String
Public INV_MSG_COL_MUST_LT As String
Public INV_MSG_NOT_INSERT_BEFORE_FIRST As String
Public INV_MSG_LINE_NOT_IN_LIST As String
Public INV_MSG_NOT_DELETE_FIRST As String
Public INV_MSG_NOT_DELETE_LAST As String
Public INV_MSG_DELETE_ITEM As String
Public INV_MSG_ERR01 As String
Public INV_MSG_ERR02 As String
Public INV_MSG_ERR03  As String
Public INV_MSG_NOT_PAYBACK As String
Public INV_MSG_RUNTIME_ERR As String
Public INV_MSG_INDICATOR_NAMES As String
Public INV_MSG_INDICATOR_VALUES As String
Public INV_MSG_INDICATOR_ABS_CHANGE As String
Public INV_MSG_INDICATOR_COMP_CHANGE As String
Public INV_MSG_INDICATOR_BASIC As String
Public INV_MSG_SENSITIVITY As String
Public INV_MSG_SAFETY_MARGIN As String
Public SBS_MSG_OUT_LIST As String
Public SBS_MSG_PAGE_EXIST As String
Public SBS_MSG_DEL_PAGE As String
Public SBS_MSG_NOT_DELETE_FIRST
Public SBS_MSG_PRODUCT As String
Public SBS_MSG_DONE As String
Public SBS_MSG_PAGE_NOT_FOUND As String
Public SBS_MSG_RUNTIME_ERR As String
Public OSB_MSG_COL_MUST_LT As String
Public OSB_MSG_NOT_INSERT_BEFORE_FIRST As String
Public OSB_MSG_LINE_NOT_IN_LIST As String
Public OSB_MSG_NOT_DELETE_FIRST As String
Public OSB_MSG_NOT_DELETE_LAST As String
Public OSB_MSG_DELETE_ITEM As String
Public Function Min(x1, x2)
If x1 <= x2 Then
Min = x1
Else
Min = x2
End If
End Function
Public Function Max(x1, x2)
If x1 >= x2 Then
Max = x1
Else
Max = x2
End If
End Function
Public Sub CopySheet()
ActiveSheet.Copy After:=ActiveSheet
MsgBox (MSG_DONE)
End Sub
Public Sub CopySheet_CheckATT()
Call SelectionIsChange(Null)
ActiveSheet.Copy After:=ActiveSheet
MsgBox (MSG_DONE)
End Sub
Public Sub SelectionIsChange(oSelection)
Call PrepData
Call LoadConstants
End Sub
Public Function GetProtectionState()
Call SelectionIsChange(Null)
GetProtectionState = ActiveSheet.ProtectContents
If GetProtectionState Then
ActiveSheet.Unprotect Password:=sPROTECT_PSW
End If
End Function
Public Function GetProtectionStateSheet(sPageName As String)
Dim oPage As Worksheet
Call SelectionIsChange(Null)
Set oPage = ActiveWorkbook.Sheets(sPageName)
GetProtectionStateSheet = oPage.ProtectContents
If GetProtectionStateSheet Then
oPage.Unprotect Password:=sPROTECT_PSW
End If
End Function
Public Function GetTrueRangeName(sRangeName As String) As Variant
Dim lbErr As Label
Dim lbExit As Label
Dim sSheetName As String
Dim sFullRangeName As String
Dim sVar As String
sSheetName = ActiveSheet.Name
sFullRangeName = "'" + sSheetName + "'!" + sRangeName
On Error GoTo lbErr
sVar = ActiveWorkbook.Names(sFullRangeName).Name
On Error GoTo 0
GetTrueRangeName = sFullRangeName
Exit Function
lbErr:
GetTrueRangeName = sRangeName
Resume lbExit
lbExit:
End Function
Public Sub SetProtection(bProtection)
If bProtection Then
ActiveSheet.Protect Password:=sPROTECT_PSW, _
DrawingObjects:=True, _
Contents:=True, _
Scenarios:=True, _
AllowFormattingCells:=True, _
AllowFormattingColumns:=True, _
AllowFormattingRows:=True
ActiveSheet.EnableSelection = xlNoRestrictions
End If
End Sub
Public Sub SetProtectionSheet(sPageName As String, bProtection As Boolean)
Dim oPage As Worksheet
Set oPage = ActiveWorkbook.Sheets(sPageName)
If bProtection Then
oPage.Protect Password:=sPROTECT_PSW, _
DrawingObjects:=True, _
Contents:=True, _
Scenarios:=True, _
AllowFormattingCells:=True, _
AllowFormattingColumns:=True, _
AllowFormattingRows:=True
ActiveSheet.EnableSelection = xlNoRestrictions
End If
End Sub
Public Function GetParentForNames(sName As String) As Variant
Dim lbErr As Label
Dim lbExit As Label
Dim sSheetName As String
Dim sFullName As String
sSheetName = "'" + ActiveSheet.Name + "'"
sFullName = sSheetName + "!" + sName
On Error GoTo lbErr
ActiveSheet.Names (sFullName)
Set GetParentForNames = ActiveSheet
Exit Function
lbErr:
Set GetParentForNames = ActiveWorkbook
Resume lbExit
lbExit:
End Function
Public Function GetPageNameForRange(oRangeName As Range) As Variant
GetPageNameForRange = oRangeName.Parent.Name
End Function
Public Function GetColumnForRange(oRangeName As Range) As Variant
GetColumnForRange = UCase(Chr(65 + oRangeName.Column - 1))
End Function
Public Function myCalc(p As Variant, Optional sReturtValue = "-")
If UCase(TypeName(p)) = "ERROR" Then
myCalc = sReturtValue
Else
myCalc = p
End If
End Function
Public Function myIfEmpty(oCell As Range, Optional sReturtValue = "")
If UCase(TypeName(oCell.Value)) = "EMPTY" Then
myIfEmpty = sReturtValue
Else
myIfEmpty = oCell.Value
End If
End Function
Public Sub mySetFormat(oRng As Range, sFontName As String, iSize As Integer, Optional bBorder As Boolean = True, Optional bBold As Boolean = False)
If oRng Is Nothing Then Exit Sub
With oRng.Font
.Name = sFontName
.Size = iSize
.Bold = bBold
End With
oRng.Borders(xlDiagonalDown).LineStyle = xlNone
oRng.Borders(xlDiagonalUp).LineStyle = xlNone
If bBorder Then
With oRng.Borders(xlEdgeLeft)
.LineStyle = xlContinuous
.Weight = xlThin
.ColorIndex = xlAutomatic
End With
With oRng.Borders(xlEdgeTop)
.LineStyle = xlContinuous
.Weight = xlThin
.ColorIndex = xlAutomatic
End With
With oRng.Borders(xlEdgeBottom)
.LineStyle = xlContinuous
.Weight = xlThin
.ColorIndex = xlAutomatic
End With
With oRng.Borders(xlEdgeRight)
.LineStyle = xlContinuous
.Weight = xlThin
.ColorIndex = xlAutomatic
End With
Else
oRng.Borders(xlEdgeLeft).LineStyle = xlNone
oRng.Borders(xlEdgeTop).LineStyle = xlNone
oRng.Borders(xlEdgeBottom).LineStyle = xlNone
oRng.Borders(xlEdgeRight).LineStyle = xlNone
oRng.Borders(xlInsideVertical).LineStyle = xlNone
oRng.Borders(xlInsideHorizontal).LineStyle = xlNone
End If
End Sub
Public Sub LoadConstants()
Dim iLanguage As Integer
Dim iColLanguage As Integer
On Error GoTo lbExit
iLanguage = ThisWorkBook.Names("ATT_LANGUAGE").RefersToRange.Value
On Error GoTo 0
iColLanguage = iLanguage
On Error Resume Next
Call LoadConstInvest(iColLanguage)
Call LoadConstSBS(iColLanguage)
Call LoadConstOSB(iColLanguage)
lbExit:
End Sub
Public Function LoadConstInvest(iCol As Integer)
Dim Rng As Range
Dim iRowCount As Integer
Dim iRow As Integer
On Error GoTo lbExit
Set Rng = ThisWorkBook.Names("INVEST_STRINGS").RefersToRange
iRow = 1
INV_MSG_COL_MUST_LT = Rng.Cells(1, iCol)
iRow = iRow + 1
INV_MSG_NOT_INSERT_BEFORE_FIRST = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_LINE_NOT_IN_LIST = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_NOT_DELETE_FIRST = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_NOT_DELETE_LAST = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_DELETE_ITEM = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_ERR01 = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_ERR02 = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_ERR03 = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_NOT_PAYBACK = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_RUNTIME_ERR = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_INDICATOR_NAMES = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_INDICATOR_VALUES = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_INDICATOR_ABS_CHANGE = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_INDICATOR_COMP_CHANGE = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_INDICATOR_BASIC = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_SENSITIVITY = Rng.Cells(iRow, iCol)
iRow = iRow + 1
INV_MSG_SAFETY_MARGIN = Rng.Cells(iRow, iCol)
lbExit:
On Error GoTo 0
End Function
Public Function LoadConstSBS(iCol As Integer)
Dim Rng As Range
Dim iRowCount As Integer
Dim iRow As Integer
On Error GoTo lbExit
Set Rng = ThisWorkBook.Names("SBS_STRINGS").RefersToRange
iRow = 1
SBS_MSG_OUT_LIST = Rng.Cells(1, iCol)
iRow = iRow + 1
SBS_MSG_PAGE_EXIST = Rng.Cells(iRow, iCol)
iRow = iRow + 1
SBS_MSG_DEL_PAGE = Rng.Cells(iRow, iCol)
iRow = iRow + 1
SBS_MSG_NOT_DELETE_FIRST = Rng.Cells(iRow, iCol)
iRow = iRow + 1
SBS_MSG_PRODUCT = Rng.Cells(iRow, iCol)
iRow = iRow + 1
SBS_MSG_DONE = Rng.Cells(iRow, iCol)
iRow = iRow + 1
SBS_MSG_PAGE_NOT_FOUND = Rng.Cells(iRow, iCol)
iRow = iRow + 1
SBS_MSG_RUNTIME_ERR = Rng.Cells(iRow, iCol)
lbExit:
On Error GoTo 0
End Function
Public Function LoadConstOSB(iCol As Integer)
Dim Rng As Range
Dim iRowCount As Integer
Dim iRow As Integer
On Error GoTo lbExit
Set Rng = ThisWorkBook.Names("OSB_STRINGS").RefersToRange
iRow = 1
OSB_MSG_COL_MUST_LT = Rng.Cells(1, iCol)
iRow = iRow + 1
OSB_MSG_NOT_INSERT_BEFORE_FIRST = Rng.Cells(iRow, iCol)
iRow = iRow + 1
OSB_MSG_LINE_NOT_IN_LIST = Rng.Cells(iRow, iCol)
iRow = iRow + 1
OSB_MSG_NOT_DELETE_FIRST = Rng.Cells(iRow, iCol)
iRow = iRow + 1
OSB_MSG_NOT_DELETE_LAST = Rng.Cells(iRow, iCol)
iRow = iRow + 1
OSB_MSG_DELETE_ITEM = Rng.Cells(iRow, iCol)
iRow = iRow + 1
MSG_DONE = Rng.Cells(iRow, iCol)
lbExit:
On Error GoTo 0
End Function
Public Function PrepData()
Dim oSheet As Worksheet
For Each oSheet In ThisWorkBook.Worksheets
If oSheet.CodeName = ATT_CODENAME Then GoTo lbExit
Next
MsgBox (MSG_ERR_ATT_NOTFOUND)
ThisWorkBook.Close SaveChanges:=False
lbExit:
Set oSheet = Nothing
End Function
Attribute VB_Name = "Sheet196"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Attribute VB_Name = "Sheet79"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet81"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "btNewMonth, 106, 0, MSForms, CommandButton"
Attribute VB_Control = "btSortDone, 108, 2, MSForms, CommandButton"
Attribute VB_Control = "btClearDone, 109, 3, MSForms, CommandButton"
Attribute VB_Control = "btSortPlan, 110, 4, MSForms, CommandButton"
Attribute VB_Control = "btClearPlan, 111, 5, MSForms, CommandButton"
Attribute VB_Control = "btSortStatABCAsc, 112, 6, MSForms, CommandButton"
Attribute VB_Control = "btSortStatABCDes, 113, 7, MSForms, CommandButton"
Attribute VB_Control = "btSortStatTotAsc, 114, 8, MSForms, CommandButton"
Attribute VB_Control = "btSortStatTotDes, 115, 9, MSForms, CommandButton"
Attribute VB_Control = "btSortStatNAsc, 116, 10, MSForms, CommandButton"
Option Explicit
Private Sub btClearDone_Click()
Call ClearRangeByName("SMB_WorkReg", MSG_CLEAR_DONE)
End Sub
Private Sub btClearPlan_Click()
Call ClearRangeByName("SMB_PlanReg", MSG_CLEAR_PLAN)
End Sub
Private Sub btNewMonth_Click()
MSG_DONE = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Call CopySheet
End Sub
Private Sub btSortDone_Click()
Call SortRangeByName("SMB_WorkReg", 1, "a")
End Sub
Private Sub btSortPlan_Click()
Call SortRangeByName("SMB_PlanReg", 1, "a")
End Sub
Private Sub btSortStatABCAsc_Click()
Call SortRangeByName("SMB_StateReg", NUM_STATE_NAME, "a")
End Sub
Private Sub btSortStatABCDes_Click()
Call SortRangeByName("SMB_StateReg", NUM_STATE_NAME, "d")
End Sub
Private Sub btSortStatNAsc_Click()
Call SortRangeByName("SMB_StateReg", NUM_STATE_NUMER, "a")
End Sub
Private Sub btSortStatTotAsc_Click()
Call SortRangeByName("SMB_StateReg", NUM_TOTAL, "a")
End Sub
Private Sub btSortStatTotDes_Click()
Call SortRangeByName("SMB_StateReg", NUM_TOTAL, "d")
End Sub
Attribute VB_Name = "ThisWorkBook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
Dim iLanguage As Integer
Dim iColLanguage As Integer
sMonth(1) = MONTH_01
sMonth(2) = MONTH_02
sMonth(3) = MONTH_03
sMonth(4) = MONTH_04
sMonth(5) = MONTH_05
sMonth(6) = MONTH_06
sMonth(7) = MONTH_07
sMonth(8) = MONTH_08
sMonth(9) = MONTH_09
sMonth(10) = MONTH_10
sMonth(11) = MONTH_11
sMonth(12) = MONTH_12
sWeekDay(1) = WEEK_DAY_1
sWeekDay(2) = WEEK_DAY_2
sWeekDay(3) = WEEK_DAY_3
sWeekDay(4) = WEEK_DAY_4
sWeekDay(5) = WEEK_DAY_5
sWeekDay(6) = WEEK_DAY_6
sWeekDay(7) = WEEK_DAY_7
sPROTECT_PSW = PROTECT_PSW_WORK
Call PrepData
Call LoadConstants
End Sub
Private Sub Workbook_SheetActivate(ByVal Sh As Object)
Call PrepData
Call LoadConstants
End Sub
Attribute VB_Name = "UDR"
Option Explicit
Public Const NUM_STATE_NAME = 1
Public Const NUM_TOTAL = 31
Public Const NUM_ONDAY = 32
Public Const NUM_STATE_NUMER = 34
Public Const MSG_CLEAR_DONE = "O|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
Public Const MSG_CLEAR_PLAN = "O|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
Const iCOLOR_AQUA_PALE = 34
Const iCOLOR_AQUA = 8
Const iCOLOR_BLUE_PALE = 37
Const iINPUT_BACKGROUND_WORK = iCOLOR_AQUA_PALE
Const iINPUT_BACKGROUND_DEMO = iCOLOR_BLUE_PALE
Public Sub ClearRangeByName(sRangeName As String, sMsg As String)
Dim WRange As Range
Dim iColCount As Integer
Dim iRowCount As Integer
Dim oCell As Variant
If MsgBox(sMsg, vbYesNo, "B|fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") = vbNo Then Exit Sub
Set WRange = ActiveSheet.Names(sRangeName).RefersToRange
bProtected = GetProtectionState()
For Each oCell In WRange
oCell.Select
If oCell.Interior.ColorIndex = iINPUT_BACKGROUND_WORK Then
If Not (oCell.Value = "") Then
oCell.Value = ""
End If
If Not (oCell.Comment Is Nothing) Then
oCell.Comment.Delete
End If
End If
Next oCell
Call SetProtection(bProtected)
WRange.Cells(1, 1).Select
MsgBox ("C|fffd||fffd||fffd||fffd||fffd||fffd|")
End Sub
Public Sub SortRangeByName(sRangeName As String, iSortColNum As Integer, sOrder As String)
Dim WRange As Range
Dim WRange1 As Range
Dim iColCount As Integer
Dim iRowCount As Integer
Dim iOrder As Integer
Set WRange = ActiveSheet.Names(sRangeName).RefersToRange
iColCount = WRange.Columns.Count
iRowCount = WRange.Rows.Count
Set WRange1 = ActiveSheet.Range(WRange.Cells(1, 1), WRange.Cells(iRowCount - 1, iColCount))
Select Case sOrder
Case "a"
iOrder = xlAscending
Case "d"
iOrder = xlDescending
End Select
bProtected = GetProtectionState()
WRange1.Sort Key1:=WRange1.Cells(1, iSortColNum), Order1:=iOrder, Header:=xlNo, _
OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
DataOption1:=xlSortNormal
Call SetProtection(bProtected)
MsgBox ("C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
End Sub
Public Sub ClearDone()
Call ClearRangeByName("SMB_WorkReg", MSG_CLEAR_DONE)
End Sub
Public Sub ClearPlan()
Call ClearRangeByName("SMB_PlanReg", MSG_CLEAR_PLAN)
End Sub
Public Sub NewSheet()
MSG_DONE = "C|fffd||fffd||fffd||fffd||fffd||fffd|"
Call CopySheet
End Sub
Public Sub SortDone()
Call SortRangeByName("SMB_WorkReg", 1, "a")
End Sub
Public Sub SortPlan()
Call SortRangeByName("SMB_PlanReg", 1, "a")
End Sub
Public Sub SortStatABCAsc()
Call SortRangeByName("SMB_StateReg", NUM_STATE_NAME, "a")
End Sub
Public Sub SortStatABCDes()
Call SortRangeByName("SMB_StateReg", NUM_STATE_NAME, "d")
End Sub
Public Sub SortStatNAsc()
Call SortRangeByName("SMB_StateReg", NUM_STATE_NUMER, "a")
End Sub
Public Sub SortStatTotAsc()
Call SortRangeByName("SMB_StateReg", NUM_TOTAL, "a")
End Sub
Public Sub SortStatTotDes()
Call SortRangeByName("SMB_StateReg", NUM_TOTAL, "d")
End Sub


INQUEST-PP=macro
