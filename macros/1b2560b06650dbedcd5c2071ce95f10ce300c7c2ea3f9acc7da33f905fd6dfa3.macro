Attribute VB_Name = "GWXNPSMacro_Main"
' General purpose constants
Public Const EMPTY_STR As String = ""
Const ZERO_STR As String = "0"
Const AGR_NAME_BRACKET As String = "$"      ' The bracket of agregate name in data source

' Consrants defining objects' names inside of symbol
Const CELL As String = "NPS_Cell_"              ' Rectangle as background
Const MNA As String = "NPS_MNA_"                ' MNA status rectangle
Const PNA As String = "NPS_PNA_"                ' PNA status rectangle
Const NPS_STATUS As String = "NPS_Status_"      ' NPS status rectangle
Const NPS_NUMBER As String = "NPS_Number_"      ' NPS number text
Const NPS_ALARM_ALL As String = "NPS_AlarmAll_" ' NPS alarm all status frame
Const IN_OUT As String = "NPS_PIN_POUT_"        ' Pressure at NPS input / output (2 text strings)
Const BACK As String = "NPS_Back_"              ' Back of NPS image
Const NPS_PNA As String = "R_PNA_"              ' The name of dynamic rectangle in PNA subsymbol
Const PNA_IN_DYN As String = "PNA_"             ' Name of PNA in dynamics data sourse
Const MNA_IN_DYN As String = "MNA_"             ' Name of MNA in dynamics data sourse

'
Const MNA_STATE As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| "
Const PNA_STATE As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| "
Const NPS_STATE As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"

' NUmerical constants to form symbol
Const NA_IN_SINGLE_COLUMN As Integer = 5        ' Max number of NA in "signle-column" NPS
Const NA_IN_MULTI_COLUMN As Integer = 4         ' NAs per column in "multi-columns" NPS
Const MIN_ROW As Integer = 4                    ' Minimal addmisible number of rows
Const NPS_STAT_HIGH As Single = 1.5             ' High NPS status rectangle relative to high rows
Const IN_OUT_OFFSET As Single = 12              ' Offset parameters from center to right for aligment
Const NUMBER_OFFSET As Single = 2              ' Offset nubmer NPS from center to right for aligment

' New created symbol parameters
Const NPS_SYMBOL_NAME As String = "NPS_1"
Const NSP_SYMBOL_DESCR As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

' Messages constants
Const ERR_MSG As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"


' **********************************
' NAME          : NPSMacro
' PURPOSE       : Draw NPS having the specified by a user number of agregats
' ARGUMENT      : IN GwxSymbol - Gwx32 symbol reference
' RETURNED VALUE: None
' NOTE          : This function is used in configuration mode as reactor
'                 on double click of the left mouse button. The subroutine's
'                 argument passing here by default is corresponding symbol
'                 reference. If it is necessary to pass any additional argument they
'                 must be specified in the "Custom data" field in Properties
'                 inspector (the are several symbols in standard Gwx32 library
'                 including procedure to parse "command line" including
'                 Parameters=<> substring to specify necessary arguments)
' **********************************
Public Sub NPSMacro(Smb As GwxSymbol)
    Dim n_MNA As Integer, n_PNA As Integer              ' MNA / PNA numbers
    Dim dx_ALARM_ALL As Single, dy_ALARM_ALL As Single  ' NPS AlarmAll status rectangle
    Dim xC As Single, yC As Single                      ' The symbol start (left button coner)
    Dim c_width As Single, c_height As Single
    Dim c_LineWidth As Single
    Dim width As Single, height As Single
    Dim n_col As Integer, n_row As Integer              ' Columns number, NA per column in NPS image
    Dim obj As Object
    Dim Is_MNA_Right As Boolean                         ' Is MNA right or left?
    Dim n_Left As Integer, n_Right As Integer           ' Number of agregates on the left / right
    Dim n_LR As Integer, nA As Integer
    Dim NA_Left As String, NA_Right As String           ' NA status rectangle
    Dim Name As String
    Dim xT As Single, yT As Single                      ' Working cells
    Dim xR As Single, yR As Single                      ' Working cells
    Dim c As Integer, r As Integer, n As Integer
    Dim dx As Single, dy As Single
    Dim max_width
    Dim Vertices(0 To 3) As Single
    
    Err.Clear
    On Error Resume Next
    
    ' Input parameters
    Load GWXNPSMacro_MainForm
    GWXNPSMacro_MainForm.Show
    n_MNA = GWXNPSMacro_MainForm.MNA_NUMBER
    n_PNA = GWXNPSMacro_MainForm.PNA_NUMBER
    Is_MNA_Right = GWXNPSMacro_MainForm.MNA_Right
    Unload GWXNPSMacro_MainForm
    If n_MNA + n_PNA <= 0 Then Exit Sub
    
    ' Set "left / right" parameters
    If Is_MNA_Right Then    ' MNA are on the right, PNA are on the left
        n_Left = n_PNA
        NA_Left = PNA
        n_Right = n_MNA
        NA_Right = MNA
    Else                    ' MNA are on the left, PNA are on the right
        n_Left = n_MNA
        NA_Left = MNA
        n_Right = n_PNA
        NA_Right = PNA
    End If
    
    ' Start to edit "clicked" symbol
    Smb.PushCurrentSymbol
    
    ' Calculate number of columns in NPS image
    If n_MNA + n_PNA <= NA_IN_SINGLE_COLUMN Then
        n_col = 1
        n_row = n_MNA + n_PNA
    Else
        ' Calculate number of columns
        n_col = (n_MNA + n_PNA) \ NA_IN_MULTI_COLUMN
        If ((n_MNA + n_PNA) Mod NA_IN_MULTI_COLUMN) > 0 Then n_col = n_col + 1
        ' Calculate number of rows
        n_row = (n_MNA + n_PNA) \ n_col
        If ((n_MNA + n_PNA) Mod n_col) > 0 Then n_row = n_row + 1
    End If
    If n_row < MIN_ROW Then n_row = MIN_ROW
       
    ' Extract / store cell geometrical parameters
    Set obj = Smb.GetVisibleObjectFromName(CELL)
    obj.GetObjectDimensions xC, yC, c_width, c_height
    c_LineWidth = obj.lineWidth
    
    ' Set the back of the symbol
    Set obj = Smb.GetVisibleObjectFromName(BACK)
    obj.GetObjectDimensions xT, yT, width, height
    obj.SetObjectDimensions xC, yC - c_height * (n_row + NPS_STAT_HIGH), _
                            c_width * n_col, c_height * (n_row + NPS_STAT_HIGH)
    obj.objectName = EMPTY_STR
    
    ' Set NPS AlarmAll status frame
    Set obj = Smb.GetVisibleObjectFromName(NPS_ALARM_ALL)
    obj.GetObjectDimensions xT, yT, width, height
    dx = width - c_width
    dy = height - c_height
    max_width = c_width * n_col + dx
    obj.SetObjectDimensions xC - dx / 2, yC - c_height * (n_row + NPS_STAT_HIGH) - dy / 2 - c_LineWidth, _
                            max_width, c_height * (n_row + NPS_STAT_HIGH) + dy + c_LineWidth
    obj.objectName = EMPTY_STR
     
    ' Distribute NA status rectangles
    Set obj = Smb.GetVisibleObjectFromName(NA_Right)
    Name = obj.objectName               ' Store actual object name
    n_LR = n_Right + n_Left
    obj.GetObjectDimensions xT, yT, width, height
    xT = xC + c_width * (n_col - 1)     ' Coordinates of current new status rectangle
    yT = yC - c_height * n_row
    n = 1
    nA = 1
    For c = 1 To n_col                  ' Loop along columns
        For r = 1 To n_row              ' Loop along rows
            ThisDisplay.DeselectAllObjects      ' Discard all current selections
            ThisDisplay.SetHeadObject (Name)    ' Select initial NA status bar
            ThisDisplay.DuplicateSelection
            Set obj = ThisDisplay.GetHeadObject
            obj.SetObjectDimensions xT, yT, width, height
            EditNADynamic obj, Is_MNA_Right, nA ' Edit dynamics of NA agregates
            obj.objectName = EMPTY_STR
            n = n + 1
            nA = nA + 1                 ' Jump to next NA
            If n = n_Right + 1 Then
                ' Swith from right to left
                Is_MNA_Right = Not Is_MNA_Right
                ThisDisplay.DeleteObject (Name) ' Delete superflouse (initial) object
                Set obj = Smb.GetVisibleObjectFromName(NA_Left)
                Name = obj.objectName           ' Store actual object name
                nA = 1
                ' Check if left agregates can be started since upper row
                If (n_col - c) * n_row >= n_Left Then
                    Exit For ' ==== r = n_row
                End If
            ElseIf n > n_LR Then
                Exit For
            End If
            yT = yT + c_height
        Next r
        If n > n_LR Then Exit For
        xT = xT - c_width
        yT = yC - c_height * n_row
    Next c
    ThisDisplay.DeleteObject (Name)     ' Delete superflouse (initial) object
    
    ' Create cascade for MNA / PNA image from cells
    ThisDisplay.DeselectAllObjects      ' Discard all current selections
    Set obj = Smb.GetVisibleObjectFromName(CELL)
    xT = xC                             ' Coordinates of current new cell
    yT = yC
    ThisDisplay.SetHeadObject (obj.objectName)    ' Select cell
    For c = 1 To n_col                  ' Loop along columns
        For r = 1 To n_row              ' Loop along rows
            ThisDisplay.DuplicateSelection
            Set obj = ThisDisplay.GetHeadObject
            yT = yT - c_height
            obj.SetObjectDimensions xT, yT, c_width, c_height
            obj.objectName = EMPTY_STR
        Next r
        yT = yC
        xT = xT + c_width
    Next c
    
    ' Create cell for NPS status and bold line between it and below objects
    Set obj = Smb.GetVisibleObjectFromName(CELL)
    obj.SetObjectDimensions xC, yC - c_height * (n_row + NPS_STAT_HIGH) - c_LineWidth, _
                            c_width * n_col, c_height * NPS_STAT_HIGH
    Vertices(0) = xC + c_LineWidth / 2#
    Vertices(1) = yC - c_height * (n_row + 1) - c_LineWidth + c_height
    Vertices(2) = xC + c_width * n_col - c_LineWidth / 2#
    Vertices(3) = yC - c_height * (n_row + 1) - c_LineWidth + c_height
    ThisDisplay.CreatePolyline Vertices, False, obj.fillColor, _
                               obj.lineColor, 2 * obj.lineWidth, obj.lineStyle, _
                               False, obj.shadowColor, obj.edgeStyle, False, EMPTY_STR
    obj.objectName = EMPTY_STR
    
                            
    ' Remove IN / OUT pressure text
    Set obj = Smb.GetVisibleObjectFromName(IN_OUT)
    obj.GetObjectDimensions xT, yT, width, height
    xT = xC - IN_OUT_OFFSET - (width - max_width) / 2
    obj.SetObjectDimensions xT, yC, width, height
    obj.objectName = EMPTY_STR
    
    ' Symbol name
    Smb.objectName = NPS_SYMBOL_NAME
    
     ' Remove / resize NPS status rectangle
    Set obj = Smb.GetVisibleObjectFromName(NPS_STATUS)
    obj.GetObjectDimensions xT, yT, width, height
    obj.SetObjectDimensions xC, yC - c_height * (n_row + NPS_STAT_HIGH) - c_LineWidth, _
                            width * n_col + c_LineWidth * (n_col - 1), height * NPS_STAT_HIGH
    obj.UserDescription = NPS_STATE & vbCrLf & obj.UserDescription
    obj.objectName = EMPTY_STR
    
     ' Remove / resize NPS number text
    Set obj = Smb.GetVisibleObjectFromName(NPS_NUMBER)
    obj.GetObjectDimensions xT, yT, width, height
    obj.SetObjectDimensions xC - NUMBER_OFFSET - (width - max_width) / 2, yC - c_height * (n_row + NPS_STAT_HIGH * 1.5) + height / 4, width, height
    obj.UserDescription = NPS_STATE & vbCrLf & obj.UserDescription
    obj.objectName = EMPTY_STR
    
    ' Termination
    Set obj = Nothing
    ThisDisplay.PopAllCurrentSymbol
    Smb.UserCustomData = EMPTY_STR      ' Forbid macro on double click
    Smb.UserDescription = NSP_SYMBOL_DESCR
    'Smb.UserDescription = Smb.objectName & " " & NSP_SYMBOL_DESCR
    'Smb.objectName = EMPTY_STR
 
  
    If Err.Number <> 0 Then MsgBox ERR_MSG
    
End Sub     ' NPSMacro()


' **********************************
' NAME          : AddAgregateNumber
' PURPOSE       : Replace agregate name and operators brackets in the string
'                 specified by agregat name and its number specified
' ARGUMENT      : IN string - string, including agregate name
'                 IN string - agregate name
'                 IN Integer - the agregat number
' RETURNED VALUE: String, including number substituted
' NOTE          : If string doesn't include agregat name, the function returns initial string
' **********************************
Function AddAgregateNumber(str As String, unit As String, Number As Integer) As String
    Dim UName As String, posBeg As Integer
    
    AddAgregateNumber = str
    UName = AGR_NAME_BRACKET + unit + AGR_NAME_BRACKET
    posBeg = -1
    Do
      posBeg = InStr(posBeg + 2, str, UName, vbTextCompare) - 1
      If posBeg <= 0 Then Exit Do
      str = left(str, posBeg) + unit + CStr(Number) + _
                          Mid(str, posBeg + Len(UName) + 1)
    Loop
    AddAgregateNumber = str
End Function    ' AddAgregateNumber()

' **********************************
' NAME          : EditNADynamic
' PURPOSE       : Edit parameters of agregates dynamic
' ARGUMENT      : IN Object  - object = NA status rectangle
'                 IN Boolean - = TRUE - it is MNA, False - it is PNA
'                 IN Integer - the agregat number
' RETURNED VALUE: None
' NOTE          : None
' **********************************
Sub EditNADynamic(obj As Object, IsMNA As Boolean, Num As Integer)
    Dim i As Integer, j As Integer
    Dim subObj As Object, dynObj As Object, subDyn As Object
    Dim str As String
    
    If Not IsMNA Then
        ' Edit dynamics of PNA agregates (it is symbol,
        ' including static line and dynamic rectangle)
        Set subObj = obj.GetVisibleObjectFromName(NPS_PNA)
        For i = 0 To subObj.GetNumberOfDynamics - 1
            ' Loop along dynamics of PNA
            Set dynObj = subObj.GetDynamicObjectFromIndex(i)
            str = dynObj.dataSource
            dynObj.dataSource = AddAgregateNumber(str, PNA_IN_DYN, Num)
            For j = 0 To dynObj.GetNumberOfSubDynamics - 1
                ' Loop along subdynamiccs - change number of NPA in data sources
                Set subDyn = dynObj.GetSubDynamicObjectFromIndex(j)
                str = subDyn.dataSource
                subDyn.dataSource = AddAgregateNumber(str, PNA_IN_DYN, Num)
            Next j
        Next i
subObj.UserDescription = PNA_STATE & CStr(Num) & vbCrLf & subObj.UserDescription
        Set subObj = Nothing
    
    Else
        ' Edit dynamics of MNA agregates (dynamic rectangle)
        For i = 0 To obj.GetNumberOfDynamics - 1
            ' Loop along dynamics of MNA
            Set dynObj = obj.GetDynamicObjectFromIndex(i)
            str = dynObj.dataSource
            dynObj.dataSource = AddAgregateNumber(str, MNA_IN_DYN, Num)
            For j = 0 To dynObj.GetNumberOfSubDynamics - 1
                ' Loop along subdynamiccs - change number of MPA in data sources
                Set subDyn = dynObj.GetSubDynamicObjectFromIndex(j)
                str = subDyn.dataSource
                subDyn.dataSource = AddAgregateNumber(str, MNA_IN_DYN, Num)
            Next j
        Next i
obj.UserDescription = MNA_STATE & CStr(Num) & vbCrLf & obj.UserDescription
    End If

End Sub         ' EditNADynamic()


' END OF GWXNPSMACRO_Main MODULE


Attribute VB_Name = "GwxPanelMA_MainForm"
Attribute VB_Base = "0{5AC7A4A5-1813-4106-BC5D-4D96B1FDE876}{AAEE0C99-6AC1-4ED7-AD5A-78EC85A5D600}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|

Option Explicit

Private Sub CancelButton_Click()
  Unload Me
End Sub

Private Sub DeblockButton_Click()
  Call SynAutoStd.SendTU(DeblockButton)
End Sub

Private Sub OpenButton_Click()
  Call SynAutoStd.SendTU(OpenButton)
End Sub

Private Sub CloseButton_Click()
  Call SynAutoStd.SendTU(CloseButton)
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| InitPanel |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Sub InitPanel(nCount As Integer, ByRef arAliasDef() As String)
  Dim sTagNPS As String, sTagMA As String
  Dim vValue As Variant, wQty As Integer
  
  sTagNPS = arAliasDef(0, 1) + "." + arAliasDef(1, 1)
  sTagMA = sTagNPS + "." + arAliasDef(2, 1)
  
  If SynAutoStd.SyncRead(sTagMA + ".Status.Description", vValue, wQty) Then
     NameLabel = vValue
  Else
     NameLabel = " "
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  
  Call SynAutoStd.SetTUBtn(DeblockButton, sTagNPS + ".TU.Deblock")
  Call SynAutoStd.SetTUBtn(OpenButton, sTagMA + ".TU.ON")
  Call SynAutoStd.SetTUBtn(CloseButton, sTagMA + ".TU.OFF")
End Sub
Attribute VB_Name = "GwxTools"
Option Explicit
Sub getTime()
Dim PPTobj As GwxProcessPoint
Dim pointObj As GwxPoint
Set pointObj = ThisDisplay.GetPointObjectFromName("~~Time~~")
If Not (pointObj Is Nothing) Then
pointObj.Value = Hour(Time)
Set pointObj = Nothing
Set pointObj = ThisDisplay.GetPointObjectFromName("~~button2~~")
pointObj.Value = pointObj.Value + 1
Set pointObj = Nothing
End If
End Sub

' GraphWorX32 usefull routines
' ----------------------------

'
' Parse and compose custom data string
'

' Get all parameters from CustomData field as one string
'
'   The parameters should be in following formar: "... Parameters=<custom_parameters> ..."
'
Function CustomData_GetParameters(ByRef strCustomData As String) As String
    Dim posBeg As Integer, posEnd As Integer, RetVal As String
    
    RetVal = ""
    
    posBeg = InStr(1, strCustomData, "Parameters", vbTextCompare)
    If posBeg > 0 Then
        posBeg = InStr(posBeg, strCustomData, "<", vbTextCompare)
        If posBeg > 0 Then
            posEnd = InStr(posBeg, strCustomData, ">", vbTextCompare)
            If posEnd > posBeg Then
                RetVal = Right(strCustomData, Len(strCustomData) - posBeg)
                RetVal = left(RetVal, posEnd - posBeg - 1)
            End If
        End If
    End If
    
    CustomData_GetParameters = RetVal
End Function

' Replace "... Parameters=<custom_parameters> ..." custom_parameters by custom data
'
'   The parameters should be in following format: "... Parameters=<custom_parameters> ..."
'
Function CustomData_SetParameters(ByRef strCustomData As String, ByRef strNewPar As String) As String
    Dim posBeg As Integer, posEnd As Integer, strOut As String
    
    posBeg = InStr(1, strCustomData, "Parameters", vbTextCompare)
    If posBeg > 0 Then
        posBeg = InStr(posBeg, strCustomData, "<", vbTextCompare)
        If posBeg > 0 Then
            posEnd = InStr(posBeg, strCustomData, ">", vbTextCompare)
            If posEnd > posBeg Then
                strOut = left(strCustomData, posBeg)
                strOut = strOut + strNewPar
                strOut = strOut + Right(strCustomData, Len(strCustomData) - posEnd + 1)
                
                strCustomData = strOut
            End If
        End If
    End If
    CustomData_SetParameters = strCustomData
End Function
'''
Attribute VB_Name = "GwxTools_"
Option Explicit

'-------------------------------------------------------------------------------
' GraphWorX32 public routines to parse and compose parameters from/to CustomData
' (Inserted automatically by Script Wizard when necessary)
'-------------------------------------------------------------------------------

' Get parameters from CustomData in one string. We assume the parameters
' are in following format: "... Parameters=<custom_parameters> ..."
Function GetParametersFromCustomData(ByRef strCustomData As String) As String
    Dim posBeg As Integer, posEnd As Integer, RetVal As String

    RetVal = ""
    posBeg = InStr(1, strCustomData, "Parameters", vbTextCompare)
    If posBeg > 0 Then
        posBeg = InStr(posBeg, strCustomData, "<", vbTextCompare)
        If posBeg > 0 Then
            posEnd = InStr(posBeg, strCustomData, ">", vbTextCompare)
            If posEnd > posBeg Then
                RetVal = Right(strCustomData, Len(strCustomData) - posBeg)
                RetVal = left(RetVal, posEnd - posBeg - 1)
            End If
        End If
    End If

    GetParametersFromCustomData = RetVal
End Function

' Compose new CustomData from given parameters and return as a string.
' This string can be used to assign new value to UserCustomData property.
Function GetCustomDataFromParameters(ByRef strCustomData As String, _
        ByRef strParameters As String) As String
    Dim posBeg As Integer, posEnd As Integer, strOut As String

    posBeg = InStr(1, strCustomData, "Parameters", vbTextCompare)
    If posBeg > 0 Then
        posBeg = InStr(posBeg, strCustomData, "<", vbTextCompare)
        If posBeg > 0 Then
            posEnd = InStr(posBeg, strCustomData, ">", vbTextCompare)
            If posEnd > posBeg Then
                strOut = left(strCustomData, posBeg)
                strOut = strOut + strParameters
                strOut = strOut + Right(strCustomData, Len(strCustomData) - posEnd + 1)

                strCustomData = strOut
            End If
        End If
    End If
    GetCustomDataFromParameters = strCustomData
End Function



' Giving a string with all parameters, return number of parameters
' The delimitier is <space><comma>: ', '
Function GetNumberOfParameters(ByRef strParameters As String) As Integer
    Dim n As Integer, pos As Integer, strDelimit As String

    If Len(strParameters) = 0 Then GetNumberOfParameters = 0 ' return

    strDelimit = ", "
    n = 1
    pos = 0

    Do
        pos = InStr(pos + 1, strParameters, strDelimit, vbTextCompare)
        If pos > 0 Then n = n + 1
    Loop While pos > 0

    GetNumberOfParameters = n
End Function

' From a string with all parameters return a parameter on given position.
Function GetParameterByIndex(ByVal strParameters As String, index As Integer) As String
    Dim i As Integer, n As Integer, pos As Integer, strDelimit As String
    Dim lenDelimit As Integer

    If Len(strParameters) = 0 Then GetParameterByIndex = Empty ' return

    strDelimit = ", "
    lenDelimit = Len(strDelimit)
    pos = 0

    ' Find begin of the parameter
    While i < index
        i = i + 1
        pos = InStr(1, strParameters, strDelimit, vbTextCompare)
        If pos > 0 Then
            strParameters = Right(strParameters, Len(strParameters) - pos - 1)
        Else
            GetParameterByIndex = strParameters             ' return
        End If
    Wend

    ' find end of the parameter
    pos = InStr(1, strParameters, strDelimit, vbTextCompare)
    If pos > 0 Then
        GetParameterByIndex = left(strParameters, pos - 1)  ' return
    Else
        GetParameterByIndex = strParameters                 ' return
    End If

End Function






















Attribute VB_Name = "GwxfixAliases_MainForm"
Attribute VB_Base = "0{B6BA12C2-FF9D-491A-9E6F-E428A315902A}{A6B00A3B-A8D5-4E3C-B9EA-E932A4CC5441}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Dim my_obj As Object
Dim g_numchanges As Integer
Dim proparray(1000, 2) As String
Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" _
    (ByVal hwnd As Long, ByVal wMsg As Long, _
    ByVal wParam As Long, lParam As Any) As Long
Private Sub cmdclose_Click()
  GwxfixAliases_MainForm.Hide
End Sub

Private Sub cmdhelp_Click()
  Dim x As Double
  Open "helplias.txt" For Output As 1
    Print #1, txtaliashelp.Text
  Reset
  x = Shell("notepad helplias.txt", vbNormalFocus)
End Sub

Private Sub cmdload_Click()
  On Error GoTo Showerr
  Dim file_st As String
  Dim alias_item As String
  Dim alias_index As Long
   'txtfilename.Text = ThisDisplay.GetFilePath
   file_st = "objects.txt"
  Open file_st For Input As 1
  While Not (EOF(1))
    Input #1, alias_item
    ComboBox1.AddItem (alias_item)
  Wend
      Close 1
      Exit Sub
Showerr:       MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
End Sub
Sub combobox2_change()
Dim MyPos As Integer
'MyPos = InStr(1, ComboBox1.Text, " ", 0)
'txtnewdef.Text = ComboBox2.Text + "\" + left(ComboBox1.Text, MyPos)
ComboBox1.Clear
Call import_aliases("\txt\" + ComboBox2.Text + ".txt")

End Sub
Sub combobox1_change()
Dim MyPos As Integer
MyPos = InStr(1, ComboBox1.Text, " ", 0)
'txtnewdef.Text = ComboBox2.Text + "\" + left(ComboBox1.Text, MyPos)
txtnewdef.Text = ComboBox1.Text
End Sub
Private Sub cmdset_Click()
  On Error GoTo err1
  Dim res As Boolean
  Dim st As String
  'If IsEmpty(ComboBox2.Text) Then MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?": Exit Sub
  If txtnewdef.Text = "" Then
    MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ...")
  Else
  GwxfixAliases_MainForm.lstvars.SetFocus
  st = extr_alias(GwxfixAliases_MainForm.lstvars.Text)
  st = Mid(st, 3, Len(st) - 4)
  Set vis_ob = ThisDisplay.GetHeadObject
'str_alias = o.GetDataSources(Alias)
'str_alias = vis_ob.GetAliasDefinition("SW_TAG")
    res = vis_ob.SetAliasDefinition(st, txtnewdef.Text)
    If Not (res) Then
      MsgBox ("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
    Else
    lstparallel.Clear
    'ListDescription.Clear
    Call get_defs
     ' For x = 0 To lstvars.ListCount - 1
     '   If lstvars.List(x) = "<<" + txtalias.Text + ">>" Then
     '     lstparallel.List(x) = txtnewdef.Text
     '   End If
     ' Next x
    End If
  End If
  
  If CheckBox1.Value = True Then
  st = ComboBox1.Text
  MyPos = InStr(1, ComboBox1.Text, " ", 0)
  st = Right(ComboBox1.Text, Len(ComboBox1.Text) - MyPos)
  If ObjectArray(GwxfixAliases_MainForm.ListDescription.ListIndex + 1).GetObjectTypeName = "GwxDigitalColorInfo" Then ColorObjectArray(GwxfixAliases_MainForm.ListDescription.ListIndex + 1).UserDescription = st
  If ObjectArray(GwxfixAliases_MainForm.ListDescription.ListIndex + 1).GetObjectTypeName <> "GwxDigitalColorInfo" Then ObjectArray(GwxfixAliases_MainForm.ListDescription.ListIndex + 1).UserDescription = st
  Call LoadDescList
  End If
  Exit Sub
err1:    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
End Sub

'Open the OPC Universal Tag Browser
Private Sub cmdtags_Click()
  Dim tagst As String
  Dim hwnd As Long
  If ThisDisplay.OpenTagBrowser(hwnd, tagst) Then
    txtnewdef.Text = tagst
  End If
End Sub

Private Sub ComboBox1_Click()
Dim str_tag As String
Dim i As Integer
ComboBox1.Locked = False
If ComboBox1.List(ComboBox1.ListIndex) <> "" Then
i = InStr(Trim(ComboBox1.List(ComboBox1.ListIndex)), " ")
'txtnewdef.Text = "Elesy.Vostok\" + Trim(Mid(ComboBox1.List(ComboBox1.ListIndex), 1, i))
End If
End Sub


Private Sub CommandButton2_Click()
Call WriteDescription
'Call LoadDescList
End Sub

Private Sub CommandButton3_Click()
'On Error GoTo err2
Dim NewObjCaption As String
Dim file_st As String
Dim alias_item As String
Dim alias_index As Long
NewObjCaption = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" + Chr(13) + "|fffd||fffd||fffd||fffd||fffd||fffd|:" + Chr(13) + "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|<|fffd||fffd||fffd||fffd||fffd||fffd|>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
  
  
    file_st = ThisDisplay.GetFilePath + "\objects.txt"
  
Open file_st For Append Shared As #1
Print #1, NewObjCaption
Close #1
GwxfixAliases_MainForm.ComboBox1.Clear
  
 Open file_st For Input Shared As #1
 While Not (EOF(1))
   Line Input #1, alias_item
   ComboBox1.AddItem (alias_item)
 Wend
 Close #1
Exit Sub
err2: MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|..."
    
  
  
End Sub



Private Sub CommandButton4_Click()
'On Error GoTo err3
Dim NewObjCaption As String
Dim file_st As String
Dim alias_item As String
Dim alias_index As Long
NewObjCaption = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
  
  
    file_st = ThisDisplay.GetFilePath + "\servers.txt"
  
Open file_st For Append Shared As #4
Print #4, NewObjCaption
Close #4
GwxfixAliases_MainForm.ComboBox1.Clear
  
 Open file_st For Input Shared As #4
 While Not (EOF(4))
   Line Input #4, alias_item
   ComboBox1.AddItem (alias_item)
 Wend
 Close #4
Exit Sub
err3: MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|..."
    
  
End Sub

Private Sub FullDescList_Click()
  GwxfixAliases_MainForm.lstvars.ListIndex = GwxfixAliases_MainForm.FullDescList.ListIndex
    GwxfixAliases_MainForm.lstparallel.ListIndex = GwxfixAliases_MainForm.FullDescList.ListIndex
    GwxfixAliases_MainForm.ListDescription.ListIndex = GwxfixAliases_MainForm.FullDescList.ListIndex
End Sub


Private Sub FullDescList_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Dim CurrentStr As String
Dim dyn_obj As Object  'Gwx Dynamic object
Dim CountObjects As Integer
Dim tmp As Variant
Dim TmpObj As Object

Count = 0
CurrentStr = GwxfixAliases_MainForm.FullDescList.Value
NewStr = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", CurrentStr)
If NewStr = "" Then NewStr = CurrentStr
NumSelectedItem = GwxfixAliases_MainForm.FullDescList.ListIndex
GwxfixAliases_MainForm.lstvars.ListIndex = GwxfixAliases_MainForm.lstvars.ListIndex
GwxfixAliases_MainForm.FullDescList.List(GwxfixAliases_MainForm.lstvars.ListIndex) = NewStr
Set my_obj = ThisDisplay.GetHeadObject
'!!! 'If ObjectArray(NumSelectedItem + 1).Getobjectdatatype = "GwxDigitalColorInfo" Then
'ObjectArray(NumSelectedItem + 1).UserCustomData = NewStr
'Else
'i = count_teg
If ObjectArray(GwxfixAliases_MainForm.lstvars.ListIndex + 1).GetObjectTypeName = "GwxDigitalColorInfo" Then ColorObjectArray(GwxfixAliases_MainForm.lstvars.ListIndex + 1).UserDescription = NewStr
  
If ObjectArray(GwxfixAliases_MainForm.lstvars.ListIndex + 1).GetObjectTypeName <> "GwxDigitalColorInfo" Then ObjectArray(GwxfixAliases_MainForm.lstvars.ListIndex + 1).UserDescription = NewStr
'End If
Call LoadDescList

End Sub

Private Sub ListDescription_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Dim CurrentStr As String
Dim dyn_obj As Object  'Gwx Dynamic object
Dim CountObjects As Integer
Dim tmp As Variant
Dim TmpObj As Object

Count = 0
CurrentStr = GwxfixAliases_MainForm.ListDescription.Value
NewStr = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", CurrentStr)
If NewStr = "" Then NewStr = CurrentStr
NumSelectedItem = GwxfixAliases_MainForm.ListDescription.ListIndex
GwxfixAliases_MainForm.lstvars.ListIndex = NumSelectedItem
GwxfixAliases_MainForm.ListDescription.List(GwxfixAliases_MainForm.lstvars.ListIndex) = NewStr
Set my_obj = ThisDisplay.GetHeadObject
'!!! 'If ObjectArray(NumSelectedItem + 1).Getobjectdatatype = "GwxDigitalColorInfo" Then
'ObjectArray(NumSelectedItem + 1).UserCustomData = NewStr
'Else
'i = count_teg
If ObjectArray(GwxfixAliases_MainForm.lstvars.ListIndex + 1).GetObjectTypeName = "GwxDigitalColorInfo" Then ColorObjectArray(GwxfixAliases_MainForm.lstvars.ListIndex + 1).UserCustomData = NewStr
If ObjectArray(GwxfixAliases_MainForm.lstvars.ListIndex + 1).GetObjectTypeName <> "GwxDigitalColorInfo" Then ObjectArray(GwxfixAliases_MainForm.lstvars.ListIndex + 1).UserCustomData = NewStr
'End If
Call RefreshDesc
End Sub

Private Sub ListDescription_Click()
      GwxfixAliases_MainForm.lstvars.ListIndex = GwxfixAliases_MainForm.ListDescription.ListIndex
      GwxfixAliases_MainForm.FullDescList.ListIndex = GwxfixAliases_MainForm.ListDescription.ListIndex
      GwxfixAliases_MainForm.lstparallel.ListIndex = GwxfixAliases_MainForm.ListDescription.ListIndex
End Sub

Private Sub lstparallel_Click()
      GwxfixAliases_MainForm.lstvars.ListIndex = GwxfixAliases_MainForm.lstparallel.ListIndex
      GwxfixAliases_MainForm.FullDescList.ListIndex = GwxfixAliases_MainForm.lstparallel.ListIndex
      GwxfixAliases_MainForm.ListDescription.ListIndex = GwxfixAliases_MainForm.lstparallel.ListIndex
End Sub

Private Sub lstvars_Click()
  Dim x As Integer
  Dim tempstring As String
  Dim AliasString As String
  Dim str_alias As String
  
  txtnewdef.Text = "" 'by default the definition is null
  AliasString = lstvars.List(lstvars.ListIndex)
  txtalias.Text = ConfigScreen.extr_alias(AliasString)
  txtalias.Text = Mid(txtalias.Text, 3, Len(txtalias.Text) - 4)
  'If lstparallel.List(lstvars.ListIndex) = "" Then lstparallel.List(lstvars.ListIndex) = " "
  txtnewdef.Text = lstparallel.List(lstvars.ListIndex)
 GwxfixAliases_MainForm.ListDescription.ListIndex = GwxfixAliases_MainForm.lstvars.ListIndex
 GwxfixAliases_MainForm.lstparallel.ListIndex = GwxfixAliases_MainForm.lstvars.ListIndex
 GwxfixAliases_MainForm.FullDescList.ListIndex = GwxfixAliases_MainForm.lstvars.ListIndex
 End Sub

Private Sub import_aliases(AliasFile As String)
  On Error GoTo showerror
  Dim file_st As String
  Dim alias_itm As String
  Dim alias_index As Long
    file_st = ThisDisplay.GetFilePath + "\" + AliasFile
  Open file_st For Input Shared As #3
  While Not (EOF(3))
    Line Input #3, alias_itm
    ComboBox1.AddItem (alias_itm)
  Wend
  Close #3
  Exit Sub
showerror:   MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"

End Sub


'Public Sub Get_All_tags1(ByRef V_object As Object)


  'Dim x As Integer
  'Dim y As Integer
  'Dim ndyn As Integer    'number of dynamics in visible
  'Dim dyn_obj As Object  'Gwx Dynamic object
  'Dim sub_dyn As Object
  'Dim test_st As String
  'Dim tag_noalias As String
  'Dim Descr As String
  'Dim itmX As ListItem
  'Const LB_SETHORIZONTALEXTENT = &H194
  'Dim hSize As Long

  'hSize = 350
'  ndyn = V_object.GetNumberOfDynamics
  'For x = 1 To count_teg
  '  Set dyn_obj = ObjectArray(i - 1)
  '  If dyn_obj.dataSource <> "" Then
  '  test_st = ConfigScreen.extr_alias(dyn_obj.dataSource)
  '  tag_noalias = ConfigScreen.extr_noalias(dyn_obj.dataSource)
  '  If (InStr(tag_noalias, "<<") <> 0) Or (InStr(tag_noalias, ">>") <> 0) Then
  '  lstparallel.AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  '  Exit For
  '  End If
  '  test_st = Mid(test_st, 3, Len(test_st) - 4)
  '  End If
  '  If test_st <> "" Then
  '  lstparallel.AddItem (dyn_obj.GetAliasDefinition(test_st))
  '         If BaseDescr.Value = True Then
  ''      Ralias_custom = dyn_obj.UserCustomData
'
   '     If Ralias_custom <> "" Then
''
 ''       Descr = Right(Ralias_custom, Len(Ralias_custom) - k_tag)
  '      End If
  '          If ret = True Then dyn_obj.UserDescription = Descr
  '        ' ListDescription.AddItem (Descr)
  '      Else
  '        '  ListDescription.SetFocus
  '        '  ListDescription.AddItem (dyn_obj.UserDescription)
   '     End If
  '  End If
'  '   For y = 0 To dyn_obj.GetNumberOfSubDynamics - 1
'  '    Set sub_dyn = dyn_obj.GetSubDynamicObjectFromIndex(y)
'  '    If sub_dyn.dataSource <> "" Then
     'test_st = ConfigScreen.extr_alias(sub_dyn.dataSource)
'      tag_noalias = ConfigScreen.extr_noalias(sub_dyn.dataSource)
'      test_st = Mid(test_st, 3, Len(test_st) - 4)
'      End If
''      Call ObjWrite(sub_dyn)
'     If test_st <> "" Then
'      lstparallel.AddItem (sub_dyn.GetAliasDefinition(test_st))
'                If BaseDescr.Value = True Then
'
'        Ralias_custom = dyn_obj.UserCustomData
'        If Ralias_custom <> "" Then
'        Descr = Descr + " " + Right(Ralias_custom, Len(Ralias_custom) - k_tag)
'        End If
'            If ret = True Then dyn_obj.UserDescription = Descr
'            'ListDescription.AddItem (Descr)
'        Else
'           Call SendMessage(132018, LB_SETHORIZONTALEXTENT, hSize, ByVal 0&)
'           ListDescription.SetFocus
''           ListDescription.AddItem (dyn_obj.UserDescription)
 '       End If
 '     End If
 '   Next y
  'Next x
 '
'End Sub
'Public Sub breaksymbol(sim_ob As Object)
'  Dim x As Integer
'  Dim numvis As Integer    'Number of visible objects within the symbol
'  Dim visible_obj As Object 'GWX Visible object
'  numvis = sim_ob.GetNumberOfChildVisibles
'  For x = 1 To numvis
'    Set visible_obj = sim_ob.GetVisibleObjectFromIndex(x - 1)
'    If (visible_obj.Keyword = "#NUMBER") Then
'    visible_obj.Text = label.Text
'     End If
'    If (visible_obj.GetObjectTypeName = "GwxSymbol") Then
'      Call breaksymbol(visible_obj)
'    End If
'    Call Get_All_tags(visible_obj)
'  Next x
'End Sub



Private Sub UserForm_Activate()
 ' On Error GoTo Showerr
  Dim file_st As String
  Dim test_st As String
  Dim alias_item As String
  Dim alias_index As Long
  ' If ListDescription.Text = "" Then Call get_defs
  ' txtfilename.Text = "D:\Work\aliases.txt"
 '   file_st = txtfilename.Text
 ' Open file_st For Input As 1
 ' While Not (EOF(1))
 '   Input #1, alias_item1
 '   ComboBox1.AddItem (alias_item)
 ' Wend
 '     Close 1
  '!!!!!!!!!!!!!!!!!!111
  Call LoadDescList
'  Call import_aliases("Objects.txt")
  Call LoadServerList
  '!!!!!!!!!!!!!!!!!!!!!!!1
GwxfixAliases_MainForm.lstvars.Clear
 For i = 1 To count_teg
   test_st = extr_alias(ConfigScreen.extr_alias(ObjectArray(i).dataSource))
 '  MsgBox (ObjectArray(i).GetObjectTypeName)
   test_st = Mid(test_st, 3, Len(test_st) - 4)
   GwxfixAliases_MainForm.lstparallel.AddItem (ObjectArray(i).GetAliasDefinition(test_st))
   GwxfixAliases_MainForm.lstvars.AddItem (ObjectArray(i).dataSource)
   'GwxfixAliases_MainForm.FullDescList.AddItem (ObjectArray(i).UserDescription)
 Next i
  
  ' For i = 1 To count_teg
 'GwxfixAliases_MainForm.ListDescription.AddItem (ObjectArray(i).UserCustomData)
 ' Next i
      Exit Sub
Showerr:       MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"


End Sub


Private Sub UserForm_Initialize()
Dim str_alias As String
Dim Alias As String
Dim ret As Boolean
Dim AliasDefinition As String
Dim x As Integer
Dim vis_ob As Object
Dim numvisies As Integer
    Set vis_ob = ThisDisplay.GetHeadObject
    If (vis_ob.GetObjectTypeName = "GwxSymbol") Then
      Call ConfigScreen.breaksymbol(vis_ob)
    End If
    Call ConfigScreen.Get_All_tags(vis_ob)
 Call RefreshDesc

End Sub

Attribute VB_Name = "IniFile"
Option Explicit

Private Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" _
            (ByVal lpApplicationName As String, _
            ByVal lpKeyName As Any, _
            ByVal lpDefault As String, _
            ByVal lpReturnedString As String, _
            ByVal nSize As Long, _
            ByVal lpFileName As String) As Long
Private Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" _
            (ByVal lpApplicationName As String, _
            ByVal lpKeyName As Any, _
            ByVal lpString As Any, _
            ByVal lpFileName As String) As Long


'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ini-|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function INIReadStr(FileName As String, Section As String, Key As String) As String
Dim Buffer As String
Dim i As Long

    INIReadStr = ""
    Buffer = Space$(255)
    i = GetPrivateProfileString(Section, Key, "", Buffer, Len(Buffer) - 1, FileName)
    Buffer = Trim$(Buffer)
    INIReadStr = left$(Buffer, Len(Buffer) - 1)
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| ini-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function INIWriteStr(FileName As String, Section As String, Key As String, Value As String) As Long

    INIWriteStr = WritePrivateProfileString(Section, Key, Value, FileName)
End Function


Attribute VB_Name = "IniReg"
Option Explicit

Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" _
(ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulReserved As Long, _
ByVal samDesired As Long, phkResult As Long) As Long

Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" _
(ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulReserved As Long, _
ByVal lpClass As String, ByVal dwOptions As Long, ByVal sameDesired As Long, _
lpSecurityAttributes As Any, phkResult As Long, lpdwDisposition As Long) As Long

Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" _
(ByVal hKey As Long, ByVal lpValueName As String, ByVal ulReserved As Long, _
lpType As Long, lpData As Any, lpcbData As Long) As Long

Declare Function RegSetValueEx Lib "advapi32.dll" Alias "RegSetValueExA" _
(ByVal hKey As Long, ByVal lpValueName As String, ByVal ulReserved As Long, _
ByVal lpType As Long, lpData As Any, ByVal cbData As Long) As Long

Declare Function RegCloseKey Lib "advapi32.dll" _
(ByVal hKey As Long) As Long

Declare Function RegFlushKey Lib "advapi32.dll" _
(ByVal hKey As Long) As Long

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Const cHKEY_CLASSES_ROOT As Long = &H80000000
Const cHKEY_CURRENT_USER As Long = &H80000001
Const cHKEY_LOCAL_MACHINE As Long = &H80000002
Const cHKEY_USERS As Long = &H80000003
Const cHKEY_PERFORMANCE_DATA As Long = &H80000004
Const cHKEY_CURRENT_CONFIG As Long = &H80000005
Const cHKEY_DYN_DATA As Long = &H80000006

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd|)
Const cKEY_ALL_ACCESS As Long = &H2003F
Const cKEY_WRITE As Long = &H20006
Const cKEY_READ = &H20019
Const cKEY_SET_VALUE = &H2
Const cKEY_QUERY_VALUE = &H1

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd|)
Const cREG_SZ = 1
Const cREG_DWORD = 4
Const cREG_BINARY = 3

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Const cERROR_SUCCEESS = 0

Function RegReadNum(Path As String, Key As String) As Long
Dim hKey As Long
Dim lngResult As Long
Dim lngBuffer As Long
Dim cb As Long

RegReadNum = 0
lngResult = RegOpenKeyEx(cHKEY_CURRENT_USER, Path, 0&, cKEY_ALL_ACCESS, hKey)
If lngResult = cERROR_SUCCEESS Then
  cb = Len(lngBuffer)
  lngResult = RegQueryValueEx(hKey, Key, 0&, cREG_DWORD, lngBuffer, cb)
  If lngResult = cERROR_SUCCEESS Then
    RegReadNum = lngBuffer
  End If
End If
lngResult = RegCloseKey(hKey)

End Function

Function RegReadStr(Path As String, Key As String) As String
Dim hKey As Long
Dim lngResult As Long
Dim strBuffer As String
Dim cb As Long

RegReadStr = ""
lngResult = RegOpenKeyEx(cHKEY_CURRENT_USER, Path, 0&, cKEY_ALL_ACCESS, hKey)
If lngResult = cERROR_SUCCEESS Then
  strBuffer = Space(255)
  cb = Len(strBuffer)
  lngResult = RegQueryValueEx(hKey, Key, 0&, cREG_SZ, ByVal strBuffer, cb)
  If lngResult = cERROR_SUCCEESS Then
    RegReadStr = strBuffer
  End If
End If
lngResult = RegCloseKey(hKey)

End Function

Function RegWriteNum(Path As String, Key As String, lngBuffer As Long) As Long
Dim hKey As Long
Dim lngResult As Long
Dim cb As Long
Dim lngDisposition As Long

RegWriteNum = -1
lngResult = RegCreateKeyEx(cHKEY_CURRENT_USER, Path, 0&, "", 0&, cKEY_ALL_ACCESS, ByVal 0&, hKey, lngDisposition)
'lngResult = RegOpenKeyEx(cHKEY_CURRENT_USER, Path, 0&, cKEY_ALL_ACCESS, hKey)
If lngResult = cERROR_SUCCEESS Then
  cb = Len(lngBuffer)
  RegWriteNum = RegSetValueEx(hKey, Key, 0&, cREG_DWORD, lngBuffer, cb)
  'lngResult = RegFlushKey(hKey)
End If
lngResult = RegCloseKey(hKey)

End Function

Function RegWriteStr(Path As String, Key As String, strBuffer As String) As Long
Dim hKey As Long
Dim lngResult As Long
Dim cb As Long
Dim lngDisposition As Long

RegWriteStr = -1
lngResult = RegCreateKeyEx(cHKEY_CURRENT_USER, Path, 0&, "", 0&, cKEY_ALL_ACCESS, ByVal 0&, hKey, lngDisposition)
'lngResult = RegOpenKeyEx(cHKEY_CURRENT_USER, Path, 0&, cKEY_SET_VALUE, hKey)
If lngResult = cERROR_SUCCEESS Then
  cb = Len(strBuffer)
  RegWriteStr = RegSetValueEx(hKey, Key, 0&, cREG_SZ, ByVal strBuffer, cb)
  'lngResult = RegFlushKey(hKey)
End If
lngResult = RegCloseKey(hKey)

End Function


Attribute VB_Name = "Kvitir"
Option Explicit

'Private Declare Function Sleep Lib "Kernel32.dll" (ByVal timeout As Long) As Long

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| GetOPCValue
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| 0 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function GetOPCValue Lib "OPCDualSource.dll" (ByRef a_pvOpcTag As Variant, ByRef a_pvValue As Variant) As Long
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| SetOPCValue
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| 0 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function SetOPCValue Lib "OPCDualSource.dll" (ByRef a_pvOpcTag As Variant, ByRef a_pvValue As Variant) As Long
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| SendTU
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| (1000 - 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|).
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| 0. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| 1, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| 1
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, 1 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function SendTU Lib "OPCDualSource.dll" (ByRef a_pvOTUName As Variant, ByRef a_pvTUName As Variant, ByVal a_dwTimeOut As Long) As Long
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| WaitValue - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| (1000 - 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|).
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, 1 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|  |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function WaitValue Lib "OPCDualSource.dll" (ByRef a_pvTagName As Variant, ByRef a_pvValue As Variant, ByVal a_dwTimeOut As Long) As Long
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| SendAlarm
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| a_pvAlmTagName + ".SeverityAlm" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| a_dwSeverity
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| a_pvAlmTagName + ".On_MessAlm" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| a_pvText
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| a_pvAlmTagName |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| a_pvAlmTagName |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| 0 |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ON:
'    |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    |fffd||fffd||fffd||fffd||fffd| On |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    |fffd||fffd||fffd||fffd||fffd| OFF |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DescriptionAlm = ""
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SeverityAlm |fffd| On_MessAlm |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|
'        |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function SendAlarm Lib "OPCDualSource.dll" (ByRef a_pvAlmTagName As Variant, ByRef a_pvText As Variant, ByVal a_dwSeverity As Long) As Long

Public Const S_OK As Long = 0
Public Ralias As String
Public theCurrentUser As String
Public theCompName As String

Public Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" _
(ByVal lpBuffer As String, nSize As Long) As Long

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| IsObjOK |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function IsObjOK(obj As Object) As Boolean
  IsObjOK = (Not (obj Is Nothing)) And IsObject(obj)
End Function

Public Function ComputerName() As String
    Dim szName As String
    Dim nSize As Long
    Dim lpResult As Long
        nSize = 255
        szName = Space$(nSize)
        lpResult = GetComputerName(ByVal szName, nSize)
        szName = left$(szName, nSize)
        ComputerName = szName
End Function

Public Function CurrentUser(Secserver As SECDual, Name As String) As Boolean
    CurrentUser = False
    On Error GoTo catch
    Secserver.Node = ComputerName()
    Name = Secserver.LoggedIn
    If Name = "" Then
        Name = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
    End If
    CurrentUser = True
    Exit Function
catch:
    MsgBox "|fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd|"
End Function

Sub Kvit_All()
Dim x, z, numvisies, koll_f As Integer
Dim vis_ob As Object
Dim dd As GwxDisplay
Dim Secserver As SECDual
Dim iRet As Long
Dim TheCurrentUserName As String
Dim isLoggedOn As Boolean
  
  koll_f = ThisDisplay.GetOpenPopupCount
  theCompName = ComputerName()
  Set Secserver = New SECDual
  isLoggedOn = CurrentUser(Secserver, TheCurrentUserName)
  Set Secserver = Nothing
  If isLoggedOn Then theCurrentUser = TheCurrentUserName
  For z = 1 To koll_f
    Set dd = ThisDisplay.GetOpenPopupByIndex(z - 1)
    numvisies = dd.GetNumberOfTopLevelVisibles
    For x = 1 To numvisies
      Set vis_ob = dd.GetVisibleObjectFromIndex(x - 1)
      If InStr(vis_ob.objectName, "TI_Symbol_") <> 0 Then
        Set vis_ob = vis_ob.GetVisibleObjectFromName("TI_Data_Text_")
        If IsObjOK(vis_ob) Then Call Get_tags(vis_ob)
      End If
    Next
  Next
  numvisies = ThisDisplay.GetNumberOfTopLevelVisibles
  For x = 1 To numvisies
    Set vis_ob = ThisDisplay.GetVisibleObjectFromIndex(x - 1)
    If InStr(vis_ob.objectName, "TI_Symbol_") <> 0 Then
      Set vis_ob = vis_ob.GetVisibleObjectFromName("TI_Data_Text_")
      If IsObjOK(vis_ob) Then Call Get_tags(vis_ob)
    End If
  Next
End Sub

Sub Kvit(o As GwxPick)
Dim Secserver As SECDual
Dim TheCurrentUserName As String
Dim isLoggedOn As Boolean
    
    theCompName = ComputerName()
    Set Secserver = New SECDual
    isLoggedOn = CurrentUser(Secserver, TheCurrentUserName)
    Set Secserver = Nothing
    If isLoggedOn Then theCurrentUser = TheCurrentUserName
    Call Get_tags(o.GetVisibleObject)
End Sub

Public Sub Get_tags(ByRef v_object As Object)
Dim x, y, ndyn, MyPos As Integer
Dim iRet As Double
Dim nTimeout As Long
Dim dyn_obj, sub_dyn As Object
Dim Newval, Point, szDesc, PointVal, szDescVal, Alm As Variant
Dim RaliasVal As String
    nTimeout = 100
    ndyn = v_object.GetNumberOfDynamics
    For x = 1 To ndyn
        Set dyn_obj = v_object.GetDynamicObjectFromIndex(x - 1)
        If dyn_obj.dataSource <> "" Then
            Ralias = LCase(dyn_obj.dataSource)
            MyPos = InStr(1, Ralias, ".flash")
            If MyPos <> 0 Then
                iRet = GetOPCValue(Ralias, szDesc)
                Point = Ralias
                Newval = 0
                RaliasVal = left(Ralias, MyPos - 1)
                iRet = GetOPCValue(RaliasVal, szDescVal)
                If szDesc <> 0 Then
                    RaliasVal = left(Ralias, MyPos - 1)
                    iRet = GetOPCValue(RaliasVal, szDescVal)
                    iRet = SetOPCValue(Point, 0)   '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Point = Ralias
                    iRet = WaitValue(Point, Newval, nTimeout)
                    If iRet <> S_OK Then
                        Ralias = left(Ralias, MyPos - 1)
                        Point = Ralias + ".Description"
                        iRet = GetOPCValue(Point, szDesc)
                        If Len(szDesc) < 2 Then szDesc = Point
                        Point = szDesc + ". |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                        iRet = SetOPCValue("SERVICE.TU.SWTU.On_MessAlm", Point)
                        If iRet = 0 Then
                            iRet = SetOPCValue("SERVICE.TU.SWTU", 0)
                            iRet = SetOPCValue("SERVICE.TU.SWTU", 1)
                        End If
                    End If
                    Ralias = left(Ralias, MyPos - 1)
                    Point = Ralias + ".Description"
                    iRet = GetOPCValue(Point, szDesc)
                    If Len(szDesc) < 2 Then szDesc = Point
                    Point = szDesc + ". |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " + theCurrentUser + " !!! |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + theCompName + ". |fffd||fffd||fffd|.|fffd||fffd||fffd||fffd|.=" + str(szDescVal)
                    iRet = SetOPCValue("SERVICE.TU.SWTU.On_MessAlm", Point)
                    If iRet = 0 Then
                        iRet = SetOPCValue("SERVICE.TU.SWTU", 0)
                        iRet = SetOPCValue("SERVICE.TU.SWTU", 1)
                    End If
                End If
            End If
        End If
        Set dyn_obj = Nothing
    Next x
End Sub


Attribute VB_Name = "LoadForm"
Option Explicit

Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub OBJ_Setup()
  
  OBJ_Setup_Form.Show
End Sub

Sub LoadPopupForm(o As GwxPick)
Dim parForm As GwxDisplay
Dim popForm As GwxDisplay
Dim headOBJ As Object
Dim i As Long, CntPop As Long
Dim rLeft As Single, rTop As Single, rW As Single, rH As Single
Dim nVisLeft As Long, nVisTop As Long, nVisRight As Long
Dim nLeft As Long, nTop As Long, nW As Long, nH As Long
Dim nL As Long, nT As Long, nW0 As Long, nH0 As Long
Dim iReturn As Boolean
Dim FName As String
Dim TypePos As Integer

TypePos = IniReg.RegReadNum(OBJ_RegPath, "TypePos")

  Set parForm = GetMainWindow
  If Not (parForm Is Nothing) Then
    CntPop = parForm.GetOpenPopupCount
    For i = 0 To CntPop - 1
      Set popForm = parForm.GetOpenPopupByIndex(i)
      FName = UCase(o.UserCustomData)
      If InStr(1, FName, "HTTP:\") > 0 Then
        FName = Mid(FName, 7, Len(FName) - 6)
      ElseIf InStr(1, FName, ".\") > 0 Then
        FName = Mid(FName, 3, Len(FName) - 1)
      End If
      If InStr(1, UCase(popForm.GetFileName), FName) > 0 Then GoTo work
      Set popForm = Nothing
    Next i
work:
    If Not (popForm Is Nothing) Then
    Else
      Set popForm = parForm.OpenPopupWindow(Popup_PathLoad + o.UserCustomData, False, False, True)
    End If
  Else
    Set popForm = parForm.OpenPopupWindow(Popup_PathLoad + o.UserCustomData, False, False, True)
  End If
  Set headOBJ = ThisDisplay.GetHeadObject
  popForm.GetWindowDimensionsPixels nLeft, nTop, nW, nH ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Popup |fffd||fffd||fffd||fffd|
  ThisDisplay.GetClientDimensionsPixels nLeft, nTop, nW0, nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  headOBJ.GetObjectDimensions rLeft, rTop, rW, rH ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set headOBJ = Nothing

If TypePos = 2 Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nVisLeft = rLeft
  nVisTop = rTop
  ThisDisplay.LogicalPointToScreen nVisLeft, nVisTop
  nVisRight = rLeft + rW
  nVisTop = rTop
  ThisDisplay.LogicalPointToScreen nVisRight, nVisTop
  nL = nVisRight + 50  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If (nL + nW) > (nLeft + nW0) Then  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     nL = nVisLeft - nW - 50
     If nL < nLeft Then nL = nLeft
  End If
  nT = nVisTop ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If (nT + nH) > (nTop + nH0) Then   ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     nT = (nTop + nH0) - nH
     If nT < nTop Then nT = nTop
  End If
ElseIf TypePos = 1 Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  nL = nLeft + (nW0 - nW) / 2
  nT = nTop + (nH0 - nH) / 2
Else '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nLeft = 0
  nTop = 0
  nW0 = GetSystemMetrics(SM_CXSCREEN)
  nH0 = GetSystemMetrics(SM_CYSCREEN)
  nL = nLeft + (nW0 - nW) / 2
  nT = nTop + (nH0 - nH) / 2
End If
  popForm.SetWindowDimensionsPixels nL, nT, nW, nH
  iReturn = popForm.SetAliasDefinition("DS", GetTag)
  popForm.ShowWindow
  Set headOBJ = Nothing
  Set popForm = Nothing
  Set parForm = Nothing
End Sub

Function GetMainWindow() As GwxDisplay
Dim parForm, startForm As GwxDisplay

  Set GetMainWindow = ThisDisplay
  Set startForm = ThisDisplay
nextIt:
  Set parForm = startForm.GetParentDisplay
  If Not (parForm Is Nothing) Then
    If InStr(1, UCase(parForm.GetFileName), "MAINWINDOW.GDF") > 0 Then
      Set GetMainWindow = parForm
      Set parForm = Nothing
      Set startForm = Nothing
      Exit Function
    Else
      Set startForm = parForm
      GoTo nextIt
    End If
  End If
  Set parForm = Nothing
  Set startForm = Nothing
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function GetTag()
Dim head_obj, vis_obj, vis_obj_child As Object
Dim DS As String
Dim i, j, Cnt_dyn, Cnt_vis, Cnt_vis_child As Long
Dim objType As Boolean
  
  GetTag = ""
  Set head_obj = ThisDisplay.GetHeadObject
  objType = True
  If (head_obj.GetObjectTypeName = "GwxText") Then objType = False
    Cnt_dyn = head_obj.GetNumberOfDynamics
    If Cnt_dyn > 0 Then
      DS = GetDataSource(head_obj, objType)
      If DS <> "" Then
        GetTag = DS
        GoTo endsub
      End If
    End If
    If (head_obj.GetObjectTypeName = "GwxSymbol") Then
      Cnt_vis = head_obj.GetNumberOfChildVisibles
      If Cnt_vis > 0 Then
        i = 0
        While i <= Cnt_vis - 1
          Set vis_obj = head_obj.GetVisibleObjectFromIndex(i)
          Cnt_dyn = vis_obj.GetNumberOfDynamics
          If Cnt_dyn > 0 Then
            DS = GetDataSource(vis_obj, objType)
            If DS <> "" Then
              GetTag = DS
              GoTo endsub
            End If
          End If
          If (vis_obj.GetObjectTypeName = "GwxSymbol") Then
            Cnt_vis_child = vis_obj.GetNumberOfChildVisibles
            If Cnt_vis_child > 0 Then
              j = 0
              While j <= Cnt_vis_child - 1
                Set vis_obj_child = vis_obj.GetVisibleObjectFromIndex(j)
                Cnt_dyn = vis_obj_child.GetNumberOfDynamics
                If Cnt_dyn > 0 Then
                  DS = GetDataSource(vis_obj_child, objType)
                  If DS <> "" Then
                    GetTag = DS
                    GoTo endsub
                  End If
                End If
                j = j + 1
              Wend
            End If
          End If
          i = i + 1
        Wend
      End If
    End If
endsub:
  Set vis_obj = Nothing
  Set head_obj = Nothing
End Function

Private Function GetDataSource(ByVal h_obj As Object, objectType As Boolean) As String
Dim dyn_obj, subdyn_obj As Object
Dim DS As String
Dim posPoint As Long
Dim i, j, Cnt_dyn, Cnt_subdyn As Long

    Cnt_dyn = h_obj.GetNumberOfDynamics
    i = 0
    While i <= Cnt_dyn - 1
      Set dyn_obj = h_obj.GetDynamicObjectFromIndex(i)
      Cnt_subdyn = dyn_obj.GetNumberOfSubDynamics
      If Cnt_subdyn > 0 Then
        j = 0
        While j <= Cnt_subdyn - 1
          Set subdyn_obj = dyn_obj.GetSubDynamicObjectFromIndex(j)
          DS = subdyn_obj.dataSource
          If (DS <> "") And (Not (InStr(1, UCase(DS), ".OFFLINE") > 0)) Then
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| {{tag}}, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|
            If InStr(1, DS, "{{", 1) > 0 Then DS = Mid(DS, InStr(1, DS, "{{", 1) + 2, Len(DS) - InStr(1, DS, "{{", 1) + 1)
            If InStr(1, DS, "}}", 1) > 0 Then DS = Mid(DS, 1, InStr(1, DS, "}}", 1) - 1)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If objectType Then
              posPoint = 0
              While InStr(posPoint + 1, DS, ".", 1) > 0
                posPoint = InStr(posPoint + 1, DS, ".", 1)
              Wend
              DS = Mid(DS, 1, posPoint - 1)
            End If
            If DS <> "" Then
              GetDataSource = DS
              GoTo endfunc
            End If
          End If
          j = j + 1
        Wend
      Else
        DS = dyn_obj.dataSource
        If (DS <> "") And (Not (InStr(1, UCase(DS), ".OFFLINE") > 0)) Then
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| {{tag}}, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|
          If InStr(1, DS, "{{", 1) > 0 Then DS = Mid(DS, InStr(1, DS, "{{", 1) + 2, Len(DS) - InStr(1, DS, "{{", 1) + 1)
          If InStr(1, DS, "}}", 1) > 0 Then DS = Mid(DS, 1, InStr(1, DS, "}}", 1) - 1)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If objectType Then
            posPoint = 0
            While InStr(posPoint + 1, DS, ".", 1) > 0
              posPoint = InStr(posPoint + 1, DS, ".", 1)
            Wend
            DS = Mid(DS, 1, posPoint - 1)
          End If
          If DS <> "" Then
            GetDataSource = DS
            GoTo endfunc
          End If
        End If
      End If
      i = i + 1
    Wend
endfunc:
  Set subdyn_obj = Nothing
  Set dyn_obj = Nothing
End Function

Attribute VB_Name = "LoadForm_RNU"
Option Explicit
Option Base 1
'version 3.0.2 (21.02.2014 vsto) MaiborodaRO
      
'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Popup-|fffd||fffd||fffd||fffd|
Sub LoadPopupForm(o As GwxPick)
Dim parForm As GwxDisplay
Dim popForm As GwxDisplay
Dim OBJ_head As Object
Dim rLeft As Single, rTop As Single, rW As Single, rH As Single
Dim nVisLeft As Long, nVisTop As Long, nVisRight As Long
Dim nLeft As Long, nTop As Long, nW As Long, nH As Long
Dim cLeft As Long, cTop As Long, cW As Long, cH As Long
Dim frameH As Long, frameW As Long, Coeff As Long
Dim nL As Long, nT As Long, nW0 As Long, nH0 As Long
Dim TypePos As Integer, TypeSize As Integer, SizePrc, ReSizeOn As Integer
Dim RegPath As String, FormCaption As String, Tag As String, altTag As String, FullName As String, ShortName As String
Dim visTU As Boolean, visTR As Boolean, visUST As Boolean, visTUAPS As Boolean
Dim dopTU As Object, dopTR As Object, dopUST As Object, dopTUAPS As Object
Dim dTU As GwxPoint, dTR As GwxPoint, dUST As GwxPoint, dTUAPS As GwxPoint
Dim parTU As Boolean, parTR As Boolean, parUST As Boolean, parTUAPS As Boolean
Dim param() As Variant, NoSound As Variant, iRet As Variant
Dim Proc As Single
Dim SetControl As Byte
Dim SCParam As Object
Dim LocalVar As GwxPoint

    ShortName = o.UserCustomData
    FullName = PathLoadRNU + "Popup\" + ShortName
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    RegPath = ""
    If (InStr(1, UCase(ShortName), "CONTROL_TI") = 1) Or _
    (InStr(1, UCase(ShortName), "CONTROL__TI") = 1) Or _
    (InStr(1, UCase(ShortName), "CONTROL_TIP") = 1) Or _
    (InStr(1, UCase(ShortName), "CONTROL__TIP") = 1) Then
        RegPath = TIobj_RegPath
    ElseIf (InStr(1, UCase(ShortName), "CONTROL_OKP") = 1) Or _
    (InStr(1, UCase(ShortName), "CONTROL__OKP") = 1) Then
        RegPath = OKP_RegPath
    ElseIf InStr(1, UCase(ShortName), "CONTROL_TANK") = 1 Then
        RegPath = TANKobj_RegPath
    ElseIf InStr(1, UCase(ShortName), "INFO_NPS") = 1 Then
        RegPath = INFOobj_RegPath
    Else
        RegPath = OTHERobj_RegPath
    End If
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    TypePos = IniReg.RegReadNum(RegPath, "TypePos")
    TypeSize = IniReg.RegReadNum(RegPath, "TypeSize")
    SizePrc = IniReg.RegReadNum(RegPath, "SizePrc")
    ReSizeOn = IniReg.RegReadNum(RegPath, "ReSizeOn")
    
    Set OBJ_head = ThisDisplay.GetHeadObject
    Tag = GetTag(OBJ_head)
    
    Call GetSecurity(visTU, visTR, visUST, visTUAPS, HMISecurity)
    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~PUnit~~")
    ReDim param(8, 2)
    param(1, 1) = "TAG"
    param(1, 2) = Tag
    param(2, 1) = "~~EnableTU~~"
    param(2, 2) = visTU
    param(3, 1) = "~~EnableTR~~"
    param(3, 2) = visTR
    param(4, 1) = "~~EnableUST~~"
    param(4, 2) = visUST
    param(5, 1) = "~~EnableTUAPS~~"
    param(5, 2) = visTUAPS
    param(8, 1) = "~~PUnit~~"
    param(8, 2) = LocalVar.Value
    
    
    If IniFile.FileExists(GetSysDisk + "Program Files\EleSy\InfinitySuite\InfinityOPCDualSource\OPCDualSource.dll") Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    altTag = left(Tag, InStr(InStr(1, Tag, ".KP") + 1, Tag, "."))
    iRet = GetOPCValue(altTag + "NoSound", NoSound)
    param(6, 1) = "~~NoSound~~"
    param(6, 2) = NoSound
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set SCParam = ThisDisplay.GetVisibleObjectFromName("Set")
    param(7, 1) = "~~NameLU~~"
    param(7, 2) = ""
    If Not (SCParam Is Nothing) Then
        param(7, 2) = CStr(SCParam.UserCustomData)
    End If
    
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| MainWindow
    GetMainWindow parForm, FormCaption
    If StrComp(FormCaption, "Main Window " + SelfNodeRNU, vbTextCompare) = 0 Then
        Set parForm = Nothing
        Set OBJ_head = Nothing
        Call LaterLinkage("LoadPopupForm", FullName, param)
        Exit Sub
    End If
'|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Set popForm = GetForm(parForm, ShortName)
 
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If popForm Is Nothing Then
        Set popForm = parForm.OpenPopupWindow(FullName, False, True, False)
        popForm.HideWindow
        ReSizeOn = 1
    Else
        If InStr(1, popForm.GetFileName, "Control_Tank", vbTextCompare) = 0 Then ReSizeOn = 0
        Set dopTU = popForm.GetDynamicObjectFromName("dopTU")
        If (dopTU Is Nothing) Then
            parTU = visTU
        Else
            Set dTU = dopTU.GetDataSourcePointObject
            parTU = dTU.Value
        End If
        
        Set dopUST = popForm.GetDynamicObjectFromName("dopUst")
        If (dopUST Is Nothing) Then
            parUST = visUST
        Else
            Set dUST = dopUST.GetDataSourcePointObject
            parUST = dUST.Value
        End If
        
        Set dopTR = popForm.GetDynamicObjectFromName("dopTR")
        If (dopTR Is Nothing) Then
            parTR = visTR
        Else
            Set dTR = dopTR.GetDataSourcePointObject
            parTR = dTR.Value
        End If
        
        Set dopTUAPS = popForm.GetDynamicObjectFromName("dopTUAPS")
        If (dopTUAPS Is Nothing) Then
            parTUAPS = visTUAPS
        Else
            Set dTUAPS = dopTUAPS.GetDataSourcePointObject
            parTUAPS = dTUAPS.Value
        End If
            If (visTU <> parTU) Or (visUST <> parUST) Or (visTR <> parTR) Or (visTUAPS <> parTUAPS) Then
                 popForm.CloseWindow
                 Set popForm = parForm.OpenPopupWindow(FullName, False, True, False)
                 popForm.HideWindow
                 ReSizeOn = 1
            End If
     End If
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    popForm.GetWindowDimensionsPixels nLeft, nTop, nW, nH               ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Popup |fffd||fffd||fffd||fffd|
    popForm.GetClientDimensionsPixels cLeft, cTop, cW, cH               ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Popup |fffd||fffd||fffd||fffd|
    frameH = nH - cH
    frameW = nW - cW
    If TypePos = 0 Then
        nW0 = GetSystemMetrics(SM_CXSCREEN)                             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        nH0 = GetSystemMetrics(SM_CYSCREEN)                             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ElseIf TypePos > 0 Then
        parForm.GetClientDimensionsPixels nLeft, nTop, nW0, nH0         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    End If
    
    If TypeSize And ReSizeOn Then
        Dim nHn As Long, cHn As Long
    
        cH = cH + (frameH - 29)                                          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        nHn = (SizePrc * nH0) / 100                                      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        cHn = nHn - frameH                                               ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Proc = cHn / cH                                                  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        nH = nHn
        nW = cW * Proc + frameW
    Else
        nH = nH + frameH - 29
        Proc = 1
    End If
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If TypePos = 3 Then                                                 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        nL = IniReg.RegReadNum(RegPath, "PosX")
        nT = IniReg.RegReadNum(RegPath, "PosY")
    ElseIf TypePos = 2 Then                                             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        OBJ_head.GetObjectDimensions rLeft, rTop, rW, rH                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        nVisLeft = rLeft
        nVisTop = rTop
        ThisDisplay.LogicalPointToScreen nVisLeft, nVisTop
        nVisRight = rLeft + rW
        nVisTop = rTop
        ThisDisplay.LogicalPointToScreen nVisRight, nVisTop
        nL = nVisRight + 50                                             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        If (nL + nW) > (nLeft + nW0) Then                               ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            nL = nVisLeft - nW - 50
            If nL < nLeft Then nL = nLeft
        End If
        nT = nVisTop                                                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        If (nT + nH) > (nTop + nH0) Then                                ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            nT = (nTop + nH0) - nH
            If nT < nTop Then nT = nTop
        End If
    ElseIf TypePos = 1 Then                                             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        nL = nLeft + (nW0 - nW) / 2
        nT = nTop + (nH0 - nH) / 2
    Else                                                                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        nL = (nW0 - nW) / 2
        nT = (nH0 - nH) / 2
    End If
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If ReSizeOn Then
        popForm.SetWindowDimensionsPixels nL, nT, nW, nH                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        If (nH - frameH) <> cH Then
            If InStr(1, popForm.GetFileName, "Control_Tank", vbTextCompare) = 0 Then
                popForm.ViewZoomPercent Proc                            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                popForm.ViewPan -1000000, -1000000                      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            End If
        popForm.SetWindowDimensionsPixels nL, nT, nW + 1, nH
        End If
    End If
    
    Call SetParams(popForm, param)                                      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
    Call popForm.SetAliasDefinition("DS", Tag)                          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
    Call popForm.ShowWindow                                             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Set popForm = Nothing
    Set parForm = Nothing
    Set OBJ_head = Nothing

End Sub

'   |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| MainWindow
Sub GetMainWindow(mainForm As GwxDisplay, captionForm As String)
Dim parForm As GwxDisplay

    Set parForm = ThisDisplay.GetParentDisplay
    Do While Not (parForm Is Nothing)
        Set mainForm = parForm
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        captionForm = String(100, Chr$(0))
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        Call GetWindowText(parForm.GetFrameWindowHandle, captionForm, 100)
        captionForm = left$(captionForm, InStr(captionForm, Chr$(0)) - 1)
        Set parForm = parForm.GetParentDisplay
    Loop
    Set parForm = Nothing
    If InStr(1, captionForm, "Main Window", vbTextCompare) = 0 Then
        If InStr(1, ThisDisplay.GetFileName, "Navigation", vbTextCompare) > 0 Then
            Set mainForm = ThisDisplay.GetParentDisplay
        Else
            Set mainForm = ThisDisplay
        End If
        captionForm = ""
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| GetDataSource
Private Function GetTag(OBJ_head As Object)
Dim OBJ_vis, OBJ_childvis As Object
Dim i, j, Cnt_dyn, Cnt_vis, Cnt_vis_child As Long
Dim objType As Boolean
Dim DS As String
  
    GetTag = ""
    objType = True
    If (OBJ_head.GetObjectTypeName = "GwxText") Then objType = False
    Cnt_dyn = OBJ_head.GetNumberOfDynamics
    If Cnt_dyn > 0 Then
        DS = GetDataSource(OBJ_head, objType)
        If DS <> "" Then
            GetTag = DS
            GoTo endsub
        End If
    End If
    If (OBJ_head.GetObjectTypeName = "GwxSymbol") Then
        Cnt_vis = OBJ_head.GetNumberOfChildVisibles
        If Cnt_vis > 0 Then
            i = 0
            While i <= Cnt_vis - 1
                Set OBJ_vis = OBJ_head.GetVisibleObjectFromIndex(i)
                Cnt_dyn = OBJ_vis.GetNumberOfDynamics
                If Cnt_dyn > 0 Then
                    DS = GetDataSource(OBJ_vis, objType)
                    If DS <> "" Then
                        GetTag = DS
                        GoTo endsub
                    End If
                End If
                If (OBJ_vis.GetObjectTypeName = "GwxSymbol") Then
                    Cnt_vis_child = OBJ_vis.GetNumberOfChildVisibles
                    If Cnt_vis_child > 0 Then
                        j = 0
                        While j <= Cnt_vis_child - 1
                            Set OBJ_childvis = OBJ_vis.GetVisibleObjectFromIndex(j)
                            Cnt_dyn = OBJ_childvis.GetNumberOfDynamics
                            If Cnt_dyn > 0 Then
                                DS = GetDataSource(OBJ_childvis, objType)
                                If DS <> "" Then
                                    GetTag = DS
                                    Set OBJ_childvis = Nothing
                                    GoTo endsub
                                End If
                            End If
                            j = j + 1
                        Wend
                        Set OBJ_childvis = Nothing
                    End If
                End If
                i = i + 1
            Wend
        End If
    End If
endsub:
    Set OBJ_vis = Nothing
End Function

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Function GetDataSource(ByVal OBJ_vis As Object, objectType As Boolean) As String
Dim Obj_dyn, OBJ_subdyn As Object
Dim i, j, Cnt_dyn, Cnt_subdyn, posPoint As Long
Dim DS, DSTU As String

    Cnt_dyn = OBJ_vis.GetNumberOfDynamics
    i = 0
    While i <= Cnt_dyn - 1
        Set Obj_dyn = OBJ_vis.GetDynamicObjectFromIndex(i)
        Cnt_subdyn = Obj_dyn.GetNumberOfSubDynamics
        If Cnt_subdyn > 0 Then
            j = 0
            While j <= Cnt_subdyn - 1
                Set OBJ_subdyn = Obj_dyn.GetSubDynamicObjectFromIndex(j)
                DS = OBJ_subdyn.dataSource
                If InStr(1, DS, "\") > 0 Then
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| {{tag}}, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|
                    If InStr(1, DS, "{{", 1) > 0 Then
                        DS = Mid(DS, InStr(1, DS, "{{", 1) + 2, Len(DS) - InStr(1, DS, "{{", 1) + 1)
                    End If
                    If InStr(1, DS, "}}", 1) > 0 Then
                        DS = Mid(DS, 1, InStr(1, DS, "}}", 1) - 1)
                    End If
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    If objectType Then
                        posPoint = 0
                        While InStr(posPoint + 1, DS, ".", 1) > 0
                            posPoint = InStr(posPoint + 1, DS, ".", 1)
                        Wend
                        DS = Mid(DS, 1, posPoint - 1)
                    End If
                    If DS <> "" Then
                    If InStr(1, DS, "AlarmCvit") > 0 Then
                    DS = Mid(DS, 1, InStr(1, DS, "AlarmCvit", 1) - 2)
                    End If
                        GetDataSource = DS
                        GoTo endfunc
                    End If
                End If
                j = j + 1
            Wend
        Else
            DS = Obj_dyn.dataSource
            If InStr(1, DS, "\") > 0 Then
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| {{tag}}, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|
                If InStr(1, DS, "{{", 1) > 0 Then
                    DS = Mid(DS, InStr(1, DS, "{{", 1) + 2, Len(DS) - InStr(1, DS, "{{", 1) + 1)
                End If
                If InStr(1, DS, "}}", 1) > 0 Then
                    DS = Mid(DS, 1, InStr(1, DS, "}}", 1) - 1)
                End If
                
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If objectType Then
                    posPoint = 0
                    While InStr(posPoint + 1, DS, ".", 1) > 0
                        posPoint = InStr(posPoint + 1, DS, ".", 1)
                    Wend
                    DS = Mid(DS, 1, posPoint - 1)
                End If
                If DS <> "" Then
                    If InStr(1, DS, "AlarmCvit") > 0 Then
                    DS = Mid(DS, 1, InStr(1, DS, "AlarmCvit", 1) - 2)
                    End If
                    GetDataSource = DS
                    GoTo endfunc
                
                End If
            End If
        End If
        i = i + 1
    Wend
endfunc:
    Set OBJ_subdyn = Nothing
    Set Obj_dyn = Nothing
End Function

Sub LoadMainForm(o As GwxPick)
Dim parForm As GwxDisplay
Dim FormCaption As String, FullName As String
Dim visTU As Boolean, visTR As Boolean, visUST As Boolean, visTUAPS As Boolean
Dim param() As Variant

    If InStr(1, ThisDisplay.GetFileName, o.UserCustomData, vbTextCompare) > 0 Then Exit Sub
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| MainWindow
    GetMainWindow parForm, FormCaption
    FullName = o.UserCustomData
    If InStr(1, o.UserCustomData, "HTTP:", vbTextCompare) = 0 Then FullName = PathLoadRNU + o.UserCustomData
    If InStr(1, FormCaption, "Main Window", vbTextCompare) = 1 Then
        Call GetSecurity(visTU, visTR, visUST, visTUAPS, 2)
        ReDim param(4, 2)
        param(1, 1) = "~~EnableTU~~"
        param(1, 2) = visTU
        param(2, 1) = "~~EnableTR~~"
        param(2, 2) = visTR
        param(3, 1) = "~~EnableUST~~"
        param(3, 2) = visUST
        param(4, 1) = "~~EnableTUAPS~~"
        param(4, 2) = visTUAPS
        Call LaterLinkage("LoadMainForm", FullName, param)
    Else
        Call parForm.FileOpen(FullName)
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub LoadNavigation()
Dim parForm As GwxDisplay, navForm As GwxDisplay
Dim dynSERVER, pntLIST, dynLIST, visPARAMS As Object
Dim listNAV As Integer
Dim FormCaption As String
Dim nameSERVER, FullName, ShortName, UpperNode, NavExt As String
Dim param() As Variant
Dim LevelDP As String
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| MainWindow
    GetMainWindow parForm, FormCaption
    UpperNode = Mid(SelfNodeRNU, 1, InStrRev(SelfNodeRNU, ".") - 1)
    If Not ((StrComp(FormCaption, "Main Window " + SelfNodeRNU, vbTextCompare) = 0) Or _
            (StrComp(FormCaption, "Main Window " + UpperNode, vbTextCompare) = 0)) Then
        listNAV = -1
        nameSERVER = "EleSy.DualSource\"
        Set visPARAMS = ThisDisplay.GetVisibleObjectFromName("navPARAMS")
        If Not (visPARAMS Is Nothing) Then
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            LevelDP = UserModule.GetLevelDP
            If LevelDP = "" Or (LevelDP <> "R_Len" And LevelDP <> "R_Ner") Then
                NavName = "Popup\Navigation" + visPARAMS.UserCustomData + Right(parForm.GetFileName, 4)
            Else
                NavName = "Popup\Navigation_" + LevelDP + Right(parForm.GetFileName, 4)
            End If
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Set dynLIST = visPARAMS.GetDynamicObjectFromIndex(0)
            
            If Not (dynLIST Is Nothing) Then
                Set pntLIST = dynLIST.GetDataSourcePointObject
                If Not (pntLIST Is Nothing) Then
                    listNAV = pntLIST.Value
                    Set pntLIST = Nothing
                End If
                Set dynLIST = Nothing
                If listNAV > -1 Then
                    FullName = ThisDisplay.GetFileName
                    If InStrRev(FullName, "\") > 0 Then
                        ShortName = Right$(FullName, Len(FullName) - InStrRev(FullName, "\"))
                    ElseIf InStrRev(FullName, "/") > 0 Then
                        ShortName = Right$(FullName, Len(FullName) - InStrRev(FullName, "/"))
                    End If
                    ReDim param(3, 2)
                    param(2, 1) = "~~nameForm~~"
                    param(2, 2) = UCase(ShortName)
                    param(3, 1) = "~~listNAV~~"
                    param(3, 2) = listNAV
                    Set navForm = OpenPopupInBottom(Nothing, PathLoadRNU + NavName, param)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    If Not (navForm Is Nothing) Then
                        Set dynSERVER = visPARAMS.GetDynamicObjectFromIndex(1)
                        If Not (dynSERVER Is Nothing) Then
                            nameSERVER = dynSERVER.GetAliasDefinition("SERVER")
                            If InStr(1, nameSERVER, "DualSource", vbTextCompare) = 0 Then
                                Call navForm.SetAliasDefinition("SERVER", nameSERVER)
                                Call navForm.SetAliasDefinition("Server", nameSERVER)
                            End If
                            Set dynSERVER = Nothing
                        End If
                    End If
                End If
            End If
        End If
    End If
    Set parForm = Nothing
End Sub

Sub LoadHydrouklon(o As GwxPick)
Dim parForm As GwxDisplay
Dim FormCaption As String, FullName As String
Dim param() As Variant

    FullName = PathLoadRNU + "Popup\Hydrouklon.gdf"
    ReDim param(2, 2)
    param(1, 1) = "~~Section~~"
    param(1, 2) = o.UserCustomData
    param(2, 1) = "~~Host~~"
    param(2, 2) = PathLoadRNU
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| MainWindow
    GetMainWindow parForm, FormCaption
    If InStr(1, FormCaption, "Main Window", vbTextCompare) = 1 Then
        Call LaterLinkage("LoadHydrouklon", FullName, param)
    Else
        Call OpenPopupInBottom(GetForm(parForm, "Hydrouklon.gdf"), FullName, param)
    End If
    Set parForm = Nothing
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Popup-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function OpenPopupInBottom(bottomForm As GwxDisplay, Path As String, Optional param As Variant) As GwxDisplay
Dim fWidth As Long, fHeight As Long
Dim pW As Long, pH As Long, pTopDop, pWidthDop As Long
Dim OldpLeft As Long, OldpTop As Long, OldpWidth As Long, OldpHeight As Long

    If bottomForm Is Nothing Then Set bottomForm = ThisDisplay.OpenEmbeddedWindow(Path, False, False)
    If bottomForm Is Nothing Then Exit Function
    Call SetParams(bottomForm, param)       ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    OldpLeft = Pleft
    OldpTop = pTop
    OldpWidth = pWidth
    OldpHeight = pHeight
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Call bottomForm.GetDisplayDimensions(pW, pH)
    Call ThisDisplay.GetDisplayDimensions(fWidth, fHeight)
    Call ThisDisplay.GetClientDimensionsPixels(Pleft, pTop, pWidth, pHeight)
    pWidthDop = pWidth
    pWidth = fWidth
    pHeight = fHeight
    Call ThisDisplay.LogicalPointToScreen(pWidth, pHeight)
    Pleft = 0
    pTopDop = pTop
    pTop = 0
    Call ThisDisplay.LogicalPointToScreen(Pleft, pTop)
    pTop = pHeight - (pH / pW) * (pWidth - Pleft) - pTopDop
    pHeight = (pH / pW) * (pWidth - Pleft)
    pWidth = pWidth - Pleft
    Pleft = (pWidthDop - pWidth) / 2
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If (OldpLeft <> Pleft) Or (OldpTop <> pTop) Or (OldpWidth <> pWidth) Or (OldpHeight <> pHeight) Then
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Call bottomForm.SetWindowDimensionsPixels(Pleft, pTop, pWidth, pHeight + 3)
        Call bottomForm.ViewFitToWindow
        Call bottomForm.ViewPan(-1000000, -1000000)
        'Call bottomForm.ShowWindow
        Call bottomForm.BringWindowToTop
    End If
    Set OpenPopupInBottom = bottomForm
End Function

Public Sub ResizePopupInBottom()
Static OldWidth As Long
Static OldHeight As Long
Dim ofWidth As Long, ofHeight As Long       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim scW As Long, scH As Long                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

    scW = ofWidth
    scH = ofHeight
    Call ThisDisplay.GetParentDisplay.LogicalPointToScreen(scW, scH)
    If (OldWidth <> scW) Or (OldHeight <> scH) Then
        OldWidth = scW
        OldHeight = scH
        If Not (ThisDisplay Is Nothing) Then
            Call ThisDisplay.ViewFitToWindow
            Call ThisDisplay.ViewPan(-1000000, -1000000)
        End If
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub LaterLinkage(nameProc As String, Optional NameLoadForm As String, Optional AddParam As Variant)

    If nameProc = "LoadMainForm" Then
        If IsArray(AddParam) Then
            Call MainWindow.CommonScript.LoadMainForm(NameLoadForm, AddParam)
        Else
            Call MainWindow.CommonScript.LoadMainForm(NameLoadForm)
        End If
    ElseIf nameProc = "LoadPopupForm" Then
        If IsArray(AddParam) Then
            Call MainWindow.CommonScript.LoadPopupForm(NameLoadForm, AddParam)
        Else
            Call MainWindow.CommonScript.LoadPopupForm(NameLoadForm)
        End If
    ElseIf nameProc = "LoadHydrouklon" Then
        If IsArray(AddParam) Then
            Call MainWindow.CommonScript.LoadHydrouklon(NameLoadForm, AddParam)
        Else
            Call MainWindow.CommonScript.LoadHydrouklon(NameLoadForm)
        End If
    End If
End Sub

Sub SetListNAV()
Dim LocalVar As GwxPoint
Dim NavVar As GwxPoint
Dim parForm As GwxDisplay
Dim navForm As GwxDisplay
Dim FormCaption As String

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| MainWindow
    GetMainWindow parForm, FormCaption
'|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Set navForm = GetForm(parForm, "Navigation.gdf")
    If Not (navForm Is Nothing) Then
        Set LocalVar = ThisDisplay.GetPointObjectFromName("~~listNAV~~")
        Set NavVar = navForm.GetPointObjectFromName("~~listNAV~~")
        If (Not (LocalVar Is Nothing)) And (Not (NavVar Is Nothing)) Then NavVar.Value = LocalVar.Value
        Set NavVar = Nothing
        Set LocalVar = Nothing
    End If
    Set navForm = Nothing
    Set parForm = Nothing
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SetParams(form As GwxDisplay, param As Variant)
Dim lvParam As GwxPoint
Dim i As Integer
 
    If IsArray(param) And (Not (form Is Nothing)) Then
        For i = 2 To UBound(param)
            If (Not IsEmpty(param(i, 1))) And (Not IsEmpty(param(i, 2))) Then
            Set lvParam = form.GetPointObjectFromName(param(i, 1))
            If Not (lvParam Is Nothing) Then
                'If VBA.VarType(lvParam.Value) <> vbDouble Then
                    lvParam.Value = param(i, 2)
                    Set lvParam = Nothing
                End If
            End If
        Next i
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function GetForm(parForm As GwxDisplay, ShortName As String) As GwxDisplay
Dim tmpForm As GwxDisplay
Dim nItem As Integer
    
    For nItem = 0 To parForm.GetOpenPopupCount - 1
        Set tmpForm = parForm.GetOpenPopupByIndex(nItem)
        If InStr(1, tmpForm.GetFileName, ShortName, vbTextCompare) > 0 Then
            Set GetForm = tmpForm
            Set tmpForm = Nothing
            Exit Function
        End If
        Set tmpForm = Nothing
    Next nItem
End Function















































































































































































































Attribute VB_Name = "P_Setup_Form"
Attribute VB_Base = "0{91C11DE7-1630-4D4B-BAEC-26A3BF4B2665}{F44E38BF-24B1-4B9A-96D3-6662189D606B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Private TypePos As Byte

Private Sub btn_Apply_Click()
Dim iRet As Long
Dim P_val As Long

If TypePos_0.Value Then
  P_val = 0
ElseIf TypePos_1.Value Then
  P_val = 1
ElseIf TypePos_2.Value Then
  P_val = 2
End If

iRet = IniReg.RegWriteNum(P_RegPath, "Type", P_val)

P_Setup_Form.Hide
analog_Main.P_Change (P_val)
End Sub

Private Sub Btn_Cancel_Click()
P_Setup_Form.Hide
End Sub

Private Sub UserForm_Initialize()

    TypePos = IniReg.RegReadNum(P_RegPath, "Type")
    If TypePos = 0 Then
    TypePos_0.Value = 1
    ElseIf TypePos = 1 Then
    TypePos_1.Value = 1
    ElseIf TypePos = 2 Then
    TypePos_2.Value = 1
    End If

End Sub
Attribute VB_Name = "TI_Setup_Form"
Attribute VB_Base = "0{F2B0FE0A-C69F-4EF4-86AD-CA9666C53213}{C64CFD97-9E63-40EE-80AE-1DD6153DA6EF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit

Private TypeParams As Byte
Private TypePos As Byte
Private TypeSize As Byte
Private ReSizeOn As Byte
Private SizePrc As Integer

Private Sub btn_Apply_Click()
Dim iRet As Long
'Dim isOpen As Boolean
'Dim secVal As New Collection

If TypePos_0.Value Then
  iRet = IniReg.RegWriteNum(TI_RegPath, "TypePos", 0)
ElseIf TypePos_1.Value Then
  iRet = IniReg.RegWriteNum(TI_RegPath, "TypePos", 1)
ElseIf TypePos_2.Value Then
  iRet = IniReg.RegWriteNum(TI_RegPath, "TypePos", 2)
End If
If TypeSize_0.Value Then
  iRet = IniReg.RegWriteNum(TI_RegPath, "TypeSize", 0)
Else
  iRet = IniReg.RegWriteNum(TI_RegPath, "TypeSize", 1)
End If
If ReSizeOn_0.Value Then
  iRet = IniReg.RegWriteNum(TI_RegPath, "ReSizeOn", 0)
Else
  iRet = IniReg.RegWriteNum(TI_RegPath, "ReSizeOn", 1)
End If
iRet = IniReg.RegWriteNum(TI_RegPath, "SizePrc", CStr(SizePrc))
TI_Setup_Form.Hide
End Sub

Private Sub Btn_Cancel_Click()
TI_Setup_Form.Hide
End Sub

Private Sub PrcInp_Change()
  If PrcInp.Text = "" Then PrcInp.Text = "1"
  If Not IsNumeric(PrcInp.Text) Then
    PrcInp.Text = CStr(SizePrc)
  End If
  If CInt(PrcInp.Text) <= 0 Or CInt(PrcInp.Text) > 100 Then
    PrcInp.Text = CStr(SizePrc)
  End If
  SizePrc = CInt(PrcInp.Text)
  PrcSpin.Value = SizePrc
End Sub

Private Sub PrcSpin_Change()
  SizePrc = PrcSpin.Value
  PrcInp.Text = CStr(SizePrc)
End Sub

Private Sub TypePos_0_Click()
  TypeSizeLabel_1.Caption = "% |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub

Private Sub TypePos_1_Click()
  TypeSizeLabel_1.Caption = "% |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub

Private Sub TypePos_2_Click()
  TypeSizeLabel_1.Caption = "% |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub

Private Sub TypeSize_0_Click()
  PrcInp.Enabled = False
  PrcSpin.Enabled = False
End Sub

Private Sub TypeSize_1_Click()
  PrcInp.Enabled = True
  PrcSpin.Enabled = True
End Sub

Private Sub UserForm_Initialize()
Dim tempSizePrc As Long

TypePos = IniReg.RegReadNum(TI_RegPath, "TypePos")
TypeSize = IniReg.RegReadNum(TI_RegPath, "TypeSize")
ReSizeOn = IniReg.RegReadNum(TI_RegPath, "ReSizeOn")
tempSizePrc = IniReg.RegReadNum(TI_RegPath, "SizePrc")
If tempSizePrc = 0 Then tempSizePrc = 65 '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
PrcInp.Text = CStr(tempSizePrc)
Select Case TypePos
  Case 0
    TypePos_0.Value = True
    TypeSizeLabel_1.Caption = "% |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
  Case 1
    TypePos_1.Value = True
    TypeSizeLabel_1.Caption = "% |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Case 2
    TypePos_2.Value = True
    TypeSizeLabel_1.Caption = "% |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Select
Select Case TypeSize
  Case 0
    TypeSize_0.Value = True
    PrcInp.Enabled = False
    PrcSpin.Enabled = False
  Case 1
    TypeSize_1.Value = True
End Select
Select Case ReSizeOn
  Case 0
    ReSizeOn_0.Value = True
  Case 1
    ReSizeOn_1.Value = True
End Select
End Sub
Attribute VB_Name = "ThisDisplay"
Attribute VB_Base = "0{CA84D600-E21C-11CE-97DA-00608CB87A7C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub GwxDisplay_PostAnimateDisplay()
Call P_Change(0)

End Sub


Attribute VB_Name = "Trend"
Option Explicit

Public Declare Function FindWindow Lib "user32" Alias "FindWindowA" _
    (ByVal lpString As Long, ByVal lpString As String) As Long
Private Declare Function PostMessage Lib "user32" Alias "PostMessageA" _
    (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam _
    As Long) As Long

Private Type PROCESS_INFORMATION
    hProcess As Long
    hThread As Long
    dwProcessId As Long
    dwThreadId As Long
End Type
Private Type STARTUPINFO
    cb As Long
    lpReserved As String
    lpDesktop As String
    lpTitle As String
    dwX As Long
    dwY As Long
    dwXSize As Long
    dwYSize As Long
    dwXCountChars As Long
    dwYCountChars As Long
    dwFillAttribute As Long
    dwFlags As Long
    wShowWindow As Integer
    cbReserved2 As Integer
    lpReserved2 As Long
    hStdInput As Long
    hStdOutput As Long
    hStdError As Long
End Type

Private Declare Function CreateProcess Lib "kernel32" Alias "CreateProcessA" _
    (ByVal lpApplicationName As String, _
    ByVal lpCommandLine As String, _
    lpProcessAttributes As Any, _
    lpThreadAttributes As Any, _
    ByVal bInheritHandles As Long, _
    ByVal dwCreationFlags As Long, _
    lpEnvironment As Any, _
    ByVal lpCurrentDriectory As String, _
    lpStartupInfo As STARTUPINFO, _
    lpProcessInformation As PROCESS_INFORMATION) As Long

Const NORMAL_PRIORITY_CLASS = &H20&
Const WM_QUIT = &H12
Const S_OK As Long = 0

Public RetTrendForm As Boolean

Function TrendViewSignal(SStr As String)
  Dim RetID As Long
  Dim PathTrendFile As String
  
  PathTrendFile = ThisDisplay.GetWorkingDirectory + "\trendsig.sgl"
  Open PathTrendFile For Output As #1
  Print #1, SStr
  Close #1
  RetID = StartTrend(PathTrendFile)

End Function

Sub TrendViewOne(o As GwxPick)
  Dim SStr As String
  Dim Obj_dyn As Object
  Dim pc As Long
  Dim RetID As Long
  
  Set Obj_dyn = GetDynamicFromPick(o)
  SStr = Obj_dyn.dataSource
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  pc = 0
  Do
    pc = InStr(SStr, "\") + 1
    If pc = 1 Then Exit Do
    SStr = Mid(SStr, pc)
  Loop While True

  RetID = TrendViewSignal(SStr)

End Sub

Sub TrendViewAdd(o As GwxPick)
  Dim SStr As String
  Dim Obj_dyn As Object
  Dim pc As Long
  Dim PathTrendFile As String
  Dim RetID As Long
  Dim i As Integer
  
  Set Obj_dyn = GetDynamicFromPick(o)
  SStr = Obj_dyn.dataSource
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  pc = 0
  Do
    pc = InStr(SStr, "\") + 1
    If pc = 1 Then Exit Do
    SStr = Mid(SStr, pc)
  Loop While True

  PathTrendFile = ThisDisplay.GetWorkingDirectory + "\trendsig.sgl"
  Open PathTrendFile For Append As #1
  Print #1, SStr
  Close #1
  
  Trend_MainForm.LB_Signals.Clear
  Open PathTrendFile For Input As #1
  While Not EOF(1)
    Input #1, SStr
    Trend_MainForm.LB_Signals.AddItem SStr
  Wend
  Close #1
  Trend_MainForm.Show
  Open PathTrendFile For Output As #1
  For i = 0 To Trend_MainForm.LB_Signals.ListCount - 1
    Print #1, Trend_MainForm.LB_Signals.List(i, 0)
  Next i
  Close #1
  If RetTrendForm Then
    RetID = StartTrend(PathTrendFile)
  End If

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| WebTrend-|fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function GetWebTrendFileName() As String
  
  GetWebTrendFileName = IniFile.INIReadStr(ThisDisplay.GetWorkingDirectory + "\PROJECT.INI", "Trend", "WebTrend")
  If GetWebTrendFileName = "" Then
    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| INI-|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical + vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd|"
  ElseIf Not FileExists(GetWebTrendFileName) Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| INI-|fffd||fffd||fffd||fffd||fffd|! (" + GetWebTrendFileName + ")", vbCritical + vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| InfinityTrend|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Function StartTrend(PathTrendFile As String) As Long
  Dim pInfo As PROCESS_INFORMATION
  Dim sInfo As STARTUPINFO
  Dim comstr As String
  'Dim sTitle As String
  Dim iHwnd As Long
  Dim PathWebWrend As String
  
  StartTrend = 0
  PathWebWrend = GetWebTrendFileName()
  If PathWebWrend <> "" Then
    'sTitle = "InfinityTrends"
    'iHwnd = FindWindow(0&, sTitle)
    'If iHwnd <> 0 Then iReturn = PostMessage(iHwnd, WM_QUIT, 0&, 0&)
    'Sleep 100
    'RetID = Shell(PathWebWrend + " File=" + PathTrendFile, vbNormalFocus)
    comstr = PathWebWrend + " File=" + PathTrendFile
    sInfo.cb = Len(sInfo)
    StartTrend = CreateProcess(vbNullString, comstr, ByVal 0&, ByVal 0&, 0&, NORMAL_PRIORITY_CLASS, ByVal 0&, vbNullString, sInfo, pInfo)
  End If
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| :)
Private Function GetDynamicFromPick(o As Object) As Object
  Dim OBJ_vis As Object
  Dim Obj_dyn As Object
  Dim i As Integer, num_dyn As Integer
  
  Set OBJ_vis = o.GetVisibleObject
  num_dyn = OBJ_vis.GetNumberOfDynamics
  i = 0
  Do
    Set Obj_dyn = OBJ_vis.GetDynamicObjectFromIndex(i)
    If Obj_dyn.GetObjectTypeName = "GwxProcessPoint" Then Exit Do
    i = i + 1
  Loop While i < num_dyn
  
  If i >= num_dyn Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| GwxProcessPoint."
  
  Set GetDynamicFromPick = Obj_dyn
End Function

Public Function FileExists(strFile As String) As Boolean

    On Error GoTo ErrorHandler
    FileExists = (Len(Dir(strFile)) > 0)
    Exit Function
ErrorHandler:
    FileExists = False
End Function

Attribute VB_Name = "Trend_MainForm"
Attribute VB_Base = "0{1D441224-4F72-4741-B9F5-ADC4565AC5F0}{F2B8857D-5305-4D93-982B-7668262CDFA3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Explicit

Private Sub Btn_Clear_Click()
  LB_Signals.Clear
End Sub

Private Sub CB_Close_Click()
  Trend.RetTrendForm = False
  Hide
End Sub

Private Sub CB_Delete_Click()
  If LB_Signals.ListIndex > -1 Then LB_Signals.RemoveItem LB_Signals.ListIndex
End Sub

Private Sub CB_toTrendView_Click()
  Trend.RetTrendForm = True
  Hide
End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "analog_Main"
Option Explicit


Public Const TI_PathLoad = "http://bmn/sdku/PopUp/bmn_TI.gdf"
Public Const TI_RegPath = "Software\SDKUGWX\analog"
Public Const P_RegPath = "Software\SDKUGWX\analog\P"

Public Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long

Public Const SM_CXSCREEN = 0
Public Const SM_CYSCREEN = 1

Sub TI_LoadPopup(o As GwxPick)
Dim aCommon As String
Dim gfxPopup As GwxDisplay
Dim sAliasCmd As String

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
aCommon = o.GetVisibleObject.GetDynamicObjectFromIndex(0).dataSource
If aCommon = "" Then Exit Sub


sAliasCmd = "DS" + Chr(9) + aCommon + Chr(13) + Chr(10) ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GWX

'Set gfxPopup = ThisDisplay.OpenPopupWinSetAliases(TI_PathLoad, True, True, False, 2, sAliasCmd)
Set gfxPopup = ThisDisplay.OpenPopupWindow(TI_PathLoad, False, True, True)
Call gfxPopup.SetAliasDefinition("DS", aCommon)

If IsObjOK(gfxPopup) Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
   Call TI_SetPopUpPosWindow(gfxPopup, o)
   gfxPopup.ViewFitToWindow
   gfxPopup.ShowWindow
   gfxPopup.ViewShowWholeDisplay ' |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ViewFitToWindow |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End If


Set gfxPopup = Nothing
End Sub

Private Sub TI_SetPopUpPosWindow(objPopup As GwxDisplay, objPick As Object)
Dim nLeft As Long, nTop As Long, nW As Long, nH As Long
Dim nW0 As Long, nH0 As Long
Dim nL As Long, nT As Long
Dim nCorell As Single
Dim nVisLeft As Long, nVisTop As Long, nVisRight As Long
Dim rLeft As Single, rTop As Single, rW As Single, rH As Single
Dim objVis As Object
Dim TypePrarams As Integer
Dim TypePos As Integer, TypeSize As Integer
Dim SizePrc As Integer

On Error GoTo TermProc

TypePos = IniReg.RegReadNum(TI_RegPath, "TypePos")
TypeSize = IniReg.RegReadNum(TI_RegPath, "TypeSize")
SizePrc = IniReg.RegReadNum(TI_RegPath, "SizePrc")

Call objPopup.GetWindowDimensionsPixels(nLeft, nTop, nW, nH) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
nCorell = nW / nH ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Call ThisDisplay.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
If TypePos = 2 Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  Set objVis = objPick.GetVisibleObject
  Call objVis.GetObjectDimensions(rLeft, rTop, rW, rH)
  Set objVis = Nothing
  nVisLeft = rLeft
  nVisTop = rTop
  Call ThisDisplay.LogicalPointToScreen(nVisLeft, nVisTop)
  nVisRight = rLeft + rW
  nVisTop = rTop
  Call ThisDisplay.LogicalPointToScreen(nVisRight, nVisTop)
  nL = nVisRight + 2  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If (nL + nW) > (nLeft + nW0) Then
     ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     nL = nVisLeft - nW - 2
     If nL < nLeft Then nL = nLeft
  End If
  nT = nVisTop  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If (nT + nH) > (nTop + nH0) Then     ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     nT = (nTop + nH0) - nH
     If nT < nTop Then nT = nTop
  End If
ElseIf TypePos = 1 Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  nL = nLeft + (nW0 - nW) / 2
  nT = nTop + (nH0 - nH) / 2
Else '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nLeft = 0
  nTop = 0
  nW0 = GetSystemMetrics(SM_CXSCREEN)
  nH0 = GetSystemMetrics(SM_CYSCREEN)
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  nL = nLeft + (nW0 - nW) / 2
  nT = nTop + (nH0 - nH) / 2
End If
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Popup
  
  Call objPopup.SetWindowDimensionsPixels(nL, nT, nW, nH)
  'Print #1, "objPopup.GetWindowDimensionsPixels: nLeft " + Str(nLeft) + "  nTop" + Str(nTop) + "  nW" + Str(nW) + "  nH" + Str(nH)
  'Call objPopup.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  'msgbox "ThisDisplay.GetClientDimensionsPixels: nLeft " + Str(nLeft) + "n  Top" + Str(nTop) + "  nW0" + Str(nW0) + "  nH0" + Str(nH0)
  'msgbox "objVis.GetObjectDimensions: rLeft " + Str(rLeft) + "  rTop" + Str(rTop) + "  rW" + Str(rW) + "  rH" + Str(rH)
  'Call objPopup.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  'Print #1, "objPopup.GetClientDimensionsPixels: nLeft " + Str(nLeft) + "n  Top" + Str(nTop) + "  nW0" + Str(nW0) + "  nH0" + Str(nH0)
TermProc:

Set objVis = Nothing
  
End Sub

Public Sub TI_Setup()
  TI_Setup_Form.Show
End Sub

Function IsObjOK(obj As Object) As Boolean
  IsObjOK = (Not (obj Is Nothing)) And IsObject(obj)
End Function


Public Sub P_Setup()
  P_Setup_Form.Show
End Sub

Sub P_Change(P_val As Long)
Dim iP As GwxPoint

'Call IniReg.RegWriteNum(P_RegPath, "Type", P_val)
'P_val = IniReg.RegReadNum(P_RegPath, "Type")
'Set iP = ThisDisplay.GetPointObjectFromName("~~P~~")

'iP.Value = P_val
'Set iP = Nothing

End Sub


' InQuest injected base64 decoded content
' )]V+"nW

INQUEST-PP=macro
