Attribute VB_Name = "SheetCD"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandCDStart, 2, 1, MSForms, CommandButton"

Private Sub CommandCDStart_Click()
    ServerCheck
End Sub
Attribute VB_Name = "SheetPC"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandPCStart, 1, 0, MSForms, CommandButton"
Private Sub CommandPCStart_Click()
        PCCheck
End Sub
Attribute VB_Name = "SheetVersion"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "main"
Option Explicit

Private g_row As Integer
Private g_col As Integer
Private g_range As Range

Private g_bexPath As String
Private g_sapPath As String
Private g_mapPath As String
Private g_olapPath As String
Private g_sysPath As String
Private g_frontPath As String
Private g_controlsPath As String
Private g_sapControlsPath As String
    
Private g_bwIndex As Integer
Private g_arcIndex As Integer
Private g_browser12bIndex As Integer
Private g_mapIndex As Integer
Private g_olapIndex As Integer
Private g_bw12bIndex As Integer
Private g_sapIndex As Integer
Private g_addcompIndex As Integer
Private g_msIndex As Integer

Private g_redCount As Integer
Private g_yellowCount As Integer

Private g_bwVersionPrefix As String

Private g_CloseSapbex As Boolean

' exists on all systems
Declare Function GetVersionEx Lib "kernel32" Alias "GetVersionExA" (lpVersionInformation As OSVERSIONINFO) As Long

Private Type OSVERSIONINFO
    dwOSVersionInfoSize As Long
    dwMajorVersion As Long
    dwMinorVersion As Long
    dwBuildNumber As Long
    dwPlatformId As Long
    szCSDVersion As String * 128 ' Maintenance string for PSS usage
 End Type

Sub Auto_open()
' check consistence of sapbexc.xla
    If ThisWorkbook.Worksheets("PC Check").Cells(10, 3).value <> _
        ThisWorkbook.Worksheets("Server Check").Cells(10, 3).value _
        Or ThisWorkbook.Worksheets("PC Check").Cells(10, 3).value <> _
        ThisWorkbook.Worksheets("Version").Cells(10, 2).value Then
        
        MsgBox "Internal Error. Cells C10 not consistent on all three sheet."
    End If
    
' get BW version prefix
    Dim patch As String
    
    patch = ThisWorkbook.Worksheets("PC Check").Cells(10, 3).value
    Select Case Left$(patch, 4)
        Case "2.0B"
            g_bwVersionPrefix = "2020."
        Case "3.0A"
            g_bwVersionPrefix = "3010."
        Case "3.0B"
            g_bwVersionPrefix = "3020."
        Case "3.50"
            g_bwVersionPrefix = "3500."
    End Select
    
    If Mid$(patch, 5, 7) <> " Patch " Then
        MsgBox "Internal Error. Wrong format of cell C10."
    End If
    
    g_bwVersionPrefix = g_bwVersionPrefix + Mid$(patch, 12, Len(patch) - 11)
        
' set server check path
    Dim path As String
    
    With ThisWorkbook.Worksheets("Server Check").Cells(4, 3)
        If .value = "add Installation Server Path here (location of setup.exe)" Or .value = "" Then
            path = ThisWorkbook.fullName
            path = LCase(Left(path, Len(path) - 12))
            
            If Right(path, 3) = "\bw" Then
                .value = Left(path, Len(path) - 3)
            Else
                .value = "add Installation Server Path here (location of setup.exe)"
                ThisWorkbook.Worksheets("Server Check").Cells(5, 3).value = ""
            End If
        End If
    End With
End Sub


Sub ServerCheck()
    Init
    Auto_open
    Set g_range = ThisWorkbook.Worksheets("Server Check").Cells
    
    With g_range.Cells(4, 3)
        If .value = "add Installation Server Path here (location of setup.exe)" Or .value = "" Then
            MsgBox "Please enter Server Path (location of setup.exe)"
            .Activate
            Exit Sub
        End If
        
        Dim nPos As Integer
        nPos = FindRev(.value, "setup.exe")
        If nPos > 0 Then
            .value = Left(.value, nPos - 1)
        End If
        
        
        If Right(.value, 1) <> "\" Then
            .value = .value & "\"
        End If
        
        g_bexPath = .value & "BW\"
        g_sapPath = .value & "Sapgui\"
        g_sapControlsPath = .value & "Sapgui\Controls\"
        g_mapPath = g_bexPath & "MapObjects\"
        g_olapPath = g_bexPath & "OleOlap\"
        g_sysPath = .value & "System\"
        g_controlsPath = .value & "Controls\"
        
        
        Rem Check the sapgui version and then re-assign the values of the controls path

        Dim guifullVersion As String
        Dim guiVersion As String
       
          guifullVersion = getFileVersion(g_sapPath + "saplogon.exe")
          guiVersion = Left(guifullVersion, 4)
          If Val(guiVersion) >= 6400 Then
             g_sapControlsPath = .value & "Sapgui\"
             g_controlsPath = .value & "Sapgui\"
          End If
  

        
    End With
    
    Range("A2").Select
    Selection.Copy
    Range("B12:J150").Select
    Selection.PasteSpecial Paste:=xlFormats, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Application.CutCopyMode = False
    Range("B12:J150").Select
    Selection.ClearComments
    g_range.Range(g_range.Cells(12, 2), g_range.Cells(150, 10)).value = ""
    Range("A2").Select
       
    Dim CheckFileName As String
    Dim myDate As String
    Dim myTime As String
    Dim myResult As String
    myDate = Date
    myTime = Time
    CheckFileName = "sapBEX_Server_" + Mid$(myDate, 4, 2) + Mid$(myDate, 1, 2) + "_" + Mid$(myTime, 1, 2) + Mid$(myTime, 4, 2) + Mid$(myTime, 7, 2) + ".xls"
    outPos 3, 3, 0, tmpPath & CheckFileName
    
    g_range(7, 3).value = ThisWorkbook.Worksheets("Version").Cells(8, 2).value
    
    ' BwComponents
    outXLAfilePos g_bwIndex + 1, False, True, g_bwVersionPrefix            ' sapbex.xla
    outXLAfilePos g_bwIndex + 2, False, True, g_bwVersionPrefix            ' sapbex0.xla
    outXLAfilePos g_bwIndex + 3, True, True, g_bwVersionPrefix             ' sapbexc.xla
    
    ' sapbexs.xla

    outEXEfilePos g_bwIndex + 5, g_bexPath, False, True, "", g_bwVersionPrefix       ' wdba.dll
    outEXEfilePos g_bwIndex + 6, g_bexPath, False, True, "", g_bwVersionPrefix        ' wdbbapp.exe
    outEXEfilePos g_bwIndex + 7, g_bexPath, False, True, "", g_bwVersionPrefix        ' wdbbctrl.ocx
    outEXEfilePos g_bwIndex + 8, g_bexPath, False, True, "", g_bwVersionPrefix        ' wdbbwait.ani
    
    outEXEfilePos g_bwIndex + 10, g_controlsPath, False, True, "", g_bwVersionPrefix       ' wdbcbexc.dll
    outEXEfilePos g_bwIndex + 11, g_controlsPath, False, True, "", g_bwVersionPrefix       ' wdbdapdt.ocx
    outEXEfilePos g_bwIndex + 12, g_controlsPath, False, True, "", g_bwVersionPrefix       ' wdbfodlg.dll
    
    outEXEfilePos g_bwIndex + 14, g_controlsPath, False, True, "", g_bwVersionPrefix       ' wdbmbm2.ocx
    outEXEfilePos g_bwIndex + 15, g_controlsPath, False, True, "", g_bwVersionPrefix       ' wdboobjb.dll
    outEXEfilePos g_bwIndex + 16, g_bexPath, False, True, "", g_bwVersionPrefix            ' wdbpwpub.exe
    
    outEXEfilePos g_bwIndex + 18, g_controlsPath, False, True, "", g_bwVersionPrefix       ' wdbranim.exe
    outEXEfilePos g_bwIndex + 19, g_controlsPath, False, True, "", g_bwVersionPrefix       ' wdbrlog.ocx
    outEXEfilePos g_bwIndex + 20, g_bexPath, False, True, "", g_bwVersionPrefix            ' wdbrlog.exe
'    outEXEfilePos g_bwIndex + 21, g_controlsPath, False, True, "", g_bwVersionPrefix       ' wdbrole.ocx
    outEXEfilePos g_bwIndex + 21, g_controlsPath, False, True, "", g_bwVersionPrefix       ' wdbrtre2.ocx
    outEXEfilePos g_bwIndex + 22, g_controlsPath, False, True, "", g_bwVersionPrefix       ' wdbrprn.ocx
    
    outEXEfilePos g_bwIndex + 24, g_controlsPath, False, True, "", g_bwVersionPrefix       ' wdbspres.dll
    outEXEfilePos g_bwIndex + 25, g_bexPath, False, True, "", g_bwVersionPrefix            ' wdbtask.exe
    outEXEfilePos g_bwIndex + 26, g_controlsPath, False, True, "", g_bwVersionPrefix       ' wdbvVed.dll
    outEXEfilePos g_bwIndex + 27, g_bexPath, False, True, "", g_bwVersionPrefix            ' wdbwpub.ocx
    outEXEfilePos g_bwIndex + 28, g_controlsPath, False, True, "", g_bwVersionPrefix       ' wdbwwiz.dll
    outEXEfilePos g_bwIndex + 29, g_controlsPath, False, True, "", g_bwVersionPrefix       ' wdbz.ocx

    outEXEfilePos g_bwIndex + 31, g_bexPath, False, True            ' bwcrw32.exe

    ' ExtensionForArcView
'    outEXEfilePos g_arcIndex + 1, g_bexPath & "ArcView\", False, True    ' sapext.avx
    
    ' Browser12B
'    outEXEfilePos g_browser12bIndex + 1, g_bexPath & "dswmedia\program\", False, True    ' bxbrowsr.exe
'    outEXEfilePos g_browser12bIndex + 2, g_bexPath & "dswmedia\program\", False, True    ' wbklnch.exe
'    outEXEfilePos g_browser12bIndex + 3, g_bexPath & "dswmedia\", False, True        ' browser.dcr
'    outEXEfilePos g_browser12bIndex + 4, g_bexPath & "dswmedia\", False, True        ' browser2.dcr
'    outEXEfilePos g_browser12bIndex + 5, g_bexPath & "dswmedia\", False, True        ' channel.dcr
'    outEXEfilePos g_browser12bIndex + 6, g_bexPath & "macromed\director\", False, True       ' swdir.dll

    ' MapObjects
    outEXEfilePos g_mapIndex + 1, g_mapPath, False, True       ' af20.dll
    outEXEfilePos g_mapIndex + 2, g_mapPath, False, True       ' aiimage20.dll
    outEXEfilePos g_mapIndex + 3, g_mapPath, False, True       ' dforrt.dll
    outEXEfilePos g_mapIndex + 4, g_mapPath, False, True       ' efileio.dll
    outEXEfilePos g_mapIndex + 5, g_mapPath, False, True       ' elib.dll
    outEXEfilePos g_mapIndex + 6, g_mapPath, False, True       ' ergxlib.dll
    outEXEfilePos g_mapIndex + 7, g_mapPath, False, True       ' ethrlib.dll
    outEXEfilePos g_mapIndex + 8, g_mapPath, False, True       ' iso8211.dll
    outEXEfilePos g_mapIndex + 9, g_mapPath, False, True       ' libtiff.dll
    outEXEfilePos g_mapIndex + 10, g_mapPath, False, True      ' memfile.dll
    outEXEfilePos g_mapIndex + 11, g_mapPath, False, True      ' memtable20.dll
    outEXEfilePos g_mapIndex + 12, g_mapPath, False, True      ' mo20.ocx
    outEXEfilePos g_mapIndex + 13, g_mapPath, False, True      ' mo20.lic
    outEXEfilePos g_mapIndex + 14, g_mapPath, False, True      ' mobase.dll
    outEXEfilePos g_mapIndex + 15, g_mapPath, False, True      ' mofeat.dll
    outEXEfilePos g_mapIndex + 16, g_mapPath, False, True      ' mogridio.dll
    outEXEfilePos g_mapIndex + 17, g_mapPath, False, True      ' mtch.dll
    outEXEfilePos g_mapIndex + 18, g_mapPath, False, True      ' pe.dll
    outEXEfilePos g_mapIndex + 19, g_mapPath, False, True      ' sg.dll
    outEXEfilePos g_mapIndex + 20, g_mapPath, False, True      ' shape20.dll

    ' OleForOlap
    outEXEfilePos g_olapIndex + 1, g_olapPath, False, True     ' mdrmdlg.dll
    outEXEfilePos g_olapIndex + 2, g_olapPath, False, True     ' mdrmsap.dll
    outEXEfilePos g_olapIndex + 3, g_olapPath, False, True     ' mdxpars.dll
    outEXEfilePos g_olapIndex + 4, g_olapPath, False, True     ' saprfc.ini
    outEXEfilePos g_olapIndex + 5, g_olapPath, False, True     ' scerrlkp.dll

    ' BwComponents12B
    ' TODO wdbrprn.ocx
'    outEXEfilePos g_bw12bIndex + 1, g_bexPath, False, True     ' wdbrrb2.ocx
'    outEXEfilePos g_bw12bIndex + 2, g_bexPath, False, True     ' wdbrdlg2.ocx
'    outEXEfilePos g_bw12bIndex + 3, g_bexPath, False, True     ' wdbrfml2.ocx
'    outEXEfilePos g_bw12bIndex + 4, g_bexPath, False, True     ' wdbrdes2.ocx

    ' SapGuiCoreComponents
    outEXEfilePos g_sapIndex + 1, g_controlsPath, True, True, g_sapControlsPath   ' chart.ocx
    outEXEfilePos g_sapIndex + 2, g_controlsPath, True, True, g_sapControlsPath   ' icdataflow.ocx
    outEXEfilePos g_sapIndex + 3, g_controlsPath, True, True, g_sapControlsPath   ' icjoin.ocx
    
    outEXEfilePos g_sapIndex + 5, g_controlsPath, True, True, g_sapControlsPath   ' sapgradp.ocx
    outEXEfilePos g_sapIndex + 6, g_controlsPath, True, True, g_sapControlsPath   ' sapcalen.ocx
    outEXEfilePos g_sapIndex + 7, g_controlsPath, True, True, g_sapControlsPath   ' sapchart.ocx

    outEXEfilePos g_sapIndex + 9, g_sysPath, True, True       ' sapbtmp.dll
    outEXEfilePos g_sapIndex + 10, g_sysPath, True, True       ' librfc32.dll
    outEXEfilePos g_sapIndex + 11, g_sysPath, True, True       ' richtx32.ocx
    
    outEXEfilePos g_sapIndex + 13, g_controlsPath, True, True, g_sapControlsPath  ' wdtlog.ocx
    outEXEfilePos g_sapIndex + 14, g_controlsPath, True, True, g_sapControlsPath  ' wdttree.ocx
    outEXEfilePos g_sapIndex + 15, g_controlsPath, True, True, g_sapControlsPath  ' wdtaocx.ocx
    'outEXEfilePos g_sapIndex + 15, g_controlsPath, True, True, g_sapControlsPath  ' wdtvocx.ocx
    outEXEfilePos g_sapIndex + 16, g_controlsPath, True, True, g_sapControlsPath  ' sapdatap.ocx
    
    outEXEfilePos g_sapIndex + 18, g_sapPath, True, True      ' sapfctrl.dll
    outEXEfilePos g_sapIndex + 19, g_sapPath, True, True      ' sapfcust.exe
    outEXEfilePos g_sapIndex + 20, g_sapPath, True, True      ' sapfdraw.dll
    outEXEfilePos g_sapIndex + 21, g_sapPath, True, True      ' sapfdraw.dll
    outEXEfilePos g_sapIndex + 22, g_sapPath, True, True      ' sapfhook.dll

    ' AdditionalComponents
    outEXEfilePos g_addcompIndex + 1, g_controlsPath, True, True, g_sapControlsPath      ' awkone.ocx
    outEXEfilePos g_addcompIndex + 2, g_controlsPath, True, True, g_sapControlsPath      ' formx.ocx
    outEXEfilePos g_addcompIndex + 3, g_controlsPath, True, True, g_sapControlsPath      ' sizerone.ocx
    outEXEfilePos g_addcompIndex + 4, g_controlsPath, True, True, g_sapControlsPath      ' otxrt.dll
    outEXEfilePos g_addcompIndex + 5, g_controlsPath, True, True, g_sapControlsPath      ' vsflex7l.ocx
    outEXEfilePos g_addcompIndex + 6, g_controlsPath, True, True, g_sapControlsPath      ' vsocx32.ocx
    outEXEfilePos g_addcompIndex + 7, g_controlsPath, True, True, g_sapControlsPath      ' vsocx6.ocx
    
    ' MicrosoftCoreComponents
    outPos g_msIndex + 1, 2, 5, "Should be installed with Internet Explorer"   ' dhtmled.ocx
    'outEXEfilePos g_msIndex + 1, g_sysPath, True, True        ' dhtmled.ocx
    
    Dim myVersion As String
    myVersion = getFileVersion(g_sapPath + "sapfcust.exe")
    If myVersion = "No Version" Then
        myVersion = "6200"
    End If
    If CInt(Left$(myVersion, 4)) >= 6200 Then
        outPos g_msIndex + 2, 2, 5, "Should be installed with Windows"   ' mfc42.dll
        outPos g_msIndex + 3, 2, 5, "Should be installed with Windows"   ' msflxgrd.ocx
        outPos g_msIndex + 4, 2, 5, "Should be installed with Windows"   ' msvcp60.dll
        outPos g_msIndex + 5, 2, 5, "Should be installed with Windows"   ' msvcrt.dll
        outPos g_msIndex + 6, 2, 5, "Should be installed with Windows"   ' msvcrt40.dll
        outPos g_msIndex + 7, 2, 5, "Should be installed with Windows"   ' oleaut32.dll
        outPos g_msIndex + 8, 2, 5, "Should be installed with Windows"   ' olepro32.dll
        outPos g_msIndex + 9, 2, 5, "Should be installed with Windows"   ' stdole2.tlb
        outPos g_msIndex + 10, 2, 5, "Should be installed with Windows"  ' scrrun.dll
    Else
        outEXEfilePos g_msIndex + 2, g_sysPath, True, True        ' mfc42.dll
        outEXEfilePos g_msIndex + 3, g_sysPath, True, True        ' msflxgrd.ocx
        outEXEfilePos g_msIndex + 4, g_sysPath, True, True        ' msvcp60.dll
        outEXEfilePos g_msIndex + 5, g_sysPath, True, True        ' msvcrt.dll
        outEXEfilePos g_msIndex + 6, g_sysPath, True, True        ' msvcrt40.dll
        outEXEfilePos g_msIndex + 7, g_sysPath, True, True        ' oleaut32.dll
        outEXEfilePos g_msIndex + 8, g_sysPath, True, True        ' olepro32.dll
        outEXEfilePos g_msIndex + 9, g_sysPath, True, True        ' stdole2.tlb
        outEXEfilePos g_msIndex + 10, g_sysPath, True, True       ' scrrun.dll
    End If
    outPos g_msIndex + 11, 2, 5, "Should be installed with Internet Explorer"   ' triedit.dll
    'outEXEfilePos g_msIndex + 12, g_sysPath, True, True
    
    g_range.Columns.AutoFit
    g_range.Columns(1).ColumnWidth = 20
    g_range.Columns(2).ColumnWidth = 15
    g_range.Columns(3).ColumnWidth = 15
    g_range.Columns(4).ColumnWidth = 30
    g_range.Columns(5).ColumnWidth = 15
    g_range.Columns(6).ColumnWidth = 15
    
    On Error Resume Next
    Application.Workbooks("sapbex.xla").Close False
    Application.Workbooks("sapbex0.xla").Close False
    Application.CommandBars("xxxSAPBEXxxx").Delete
    On Error GoTo 0
        
    If g_redCount > 0 Or g_yellowCount > 0 Then
        MsgBox g_redCount & " red signed Files found." & Chr(10) _
                & g_yellowCount & " yellow signed Files found." & Chr(10) & Chr(10) _
                & "Please check SAPSETUP.LOG in " & winPath & "." & Chr(10) & Chr(10) _
                & "Please see note 197460 for more details.", vbExclamation
    End If
    
    ThisWorkbook.Worksheets("Server Check").Shapes("CommandCDStart").Cut
    
    On Error Resume Next
    Application.Workbooks(CheckFileName).Close False
    Kill tmpPath & CheckFileName
    ThisWorkbook.Worksheets("Server Check").Copy
    ActiveWorkbook.SaveAs tmpPath & CheckFileName
    ThisWorkbook.Close False
End Sub

Sub PCCheck()
    Init
    
    Set g_range = ThisWorkbook.Worksheets("PC Check").Cells
    
    Dim CheckFileName As String
    Dim myDate As String
    Dim myTime As String
    Dim myResult As String
    myDate = Date
    myTime = Time
    CheckFileName = "sapBEX_PC_" + Mid$(myDate, 4, 2) + Mid$(myDate, 1, 2) + "_" + Mid$(myTime, 1, 2) + Mid$(myTime, 4, 2) + Mid$(myTime, 7, 2) + ".xls"
    outPos 3, 3, 0, tmpPath & CheckFileName
    
    outDateTimePos 4, 3, Now
    outPos 5, 3, 0, Application.version & "  " & Application.Build & Format(Application.International(1), " (000)")
    outPos 6, 3, 0, getOperatingSystem()
    
    g_range(7, 3).value = ThisWorkbook.Worksheets("Version").Cells(8, 2).value
    
    Range("A2").Select
    Selection.Copy
    Range("B12:J150").Select
    Selection.PasteSpecial Paste:=xlFormats, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Application.CutCopyMode = False
    Range("B12:J150").Select
    Selection.ClearComments
    g_range.Range(g_range.Cells(12, 2), g_range.Cells(150, 10)).value = ""
    Range("A2").Select

    Dim frontPath As String
    Dim frontLen As Long: frontLen = 0
    g_bexPath = registryEntry("SAP.BusinessExplorer.Analyzer", "path")
    If g_bexPath = "" Then
        outPos g_bwIndex, 2, 4, "SAP.BusinessExplorer.Analyzer not registered"      ' Error
        outComment g_bwIndex, 152, winPath
    Else
        If Right(g_bexPath, 1) <> "\" Then
            g_bexPath = g_bexPath & "\"
        End If
        frontPath = g_bexPath
        frontPath = Left(frontPath, FindRev(frontPath, "\") - 1)
        frontPath = Left(frontPath, FindRev(frontPath, "\") - 1) & "\sapgui\sapgui.exe"
        On Error Resume Next
        frontLen = FileLen(frontPath)
        On Error GoTo 0
        If frontLen = 0 Then
            g_bexPath = registryEntry("SAPBrowser.SAPBrowserCtrl.1", "clsid")
            If g_bexPath <> "" Then
                g_bexPath = registryEntry("clsid", g_bexPath & "\InProcServer32")
                g_bexPath = Left(g_bexPath, FindRev(g_bexPath, "\") - 1)
                If Right(g_bexPath, 1) <> "\" Then
                    g_bexPath = g_bexPath & "\"
                End If
                frontPath = g_bexPath
                frontPath = Left(frontPath, FindRev(frontPath, "\") - 1)
                frontPath = Left(frontPath, FindRev(frontPath, "\") - 1) & "\sapgui\sapgui.exe"
                On Error Resume Next
                frontLen = FileLen(frontPath)
                On Error GoTo 0
                If frontLen = 0 Then
                    outPos g_bwIndex, 2, 4, "Cannot locate SAP GUI path"            ' Error
                    outComment g_bwIndex, 153
                End If
            Else
                outPos g_bwIndex, 2, 4, "SAPBrowser.SAPBrowserCtrl.1 not registered"             ' Error
                outComment g_bwIndex, 153
            End If
        Else
            g_frontPath = Left(frontPath, FindRev(frontPath, "\"))
        End If
    End If
    
    g_sapPath = registryEntry("SAP.BWTree.1", "clsid")
'    g_sapPath = registryEntry("SAP.TableTreeControl.1", "clsid")
'    g_sapPath = registryEntry("SOFTWARE\SAP\SAP Shared", "SAPSysDir", True)
    If g_sapPath <> "" Then
        g_sapPath = registryEntry("clsid", g_sapPath & "\InProcServer32")
        g_sapPath = Left(g_sapPath, FindRev(g_sapPath, "\") - 1)
        If Right(g_sapPath, 1) <> "\" Then
            g_sapPath = g_sapPath & "\"
        End If
    Else
        outPos g_sapIndex, 2, 4, "SAP.TableTreeControl.1 not registered"            ' Error
    End If
    g_mapPath = registryEntry("MapObjects.MemFile.1", "clsid")
    If g_mapPath <> "" Then
        g_mapPath = registryEntry("clsid", g_mapPath & "\InProcServer32")
        g_mapPath = Left(g_mapPath, FindRev(g_mapPath, "\") - 1)
        If Right(g_mapPath, 1) <> "\" Then
            g_mapPath = g_mapPath & "\"
        End If
    Else
        outPos g_mapIndex, 2, 4, "MapObjects.MemFile.1 not registered"              ' Error
        outComment g_mapIndex, 154
    End If
    g_olapPath = g_bexPath & "OleOlap\"

    outBwComponents
'    outExtensionForArcView
'    outBrowser12B
    outMapObjects
    outOleForOlap
'    outBwComponents12B
    outSapGuiCoreComponents
    outAdditionalComponents
    outMicrosoftCoreComponents

    g_range.Columns.AutoFit
    g_range.Columns(1).ColumnWidth = 20
    g_range.Columns(2).ColumnWidth = 15
    g_range.Columns(3).ColumnWidth = 15
    g_range.Columns(4).ColumnWidth = 30
    g_range.Columns(5).ColumnWidth = 15
    g_range.Columns(6).ColumnWidth = 15

    On Error Resume Next
    If g_CloseSapbex = True Then
        Application.Workbooks("sapbex.xla").Close False
    End If
    Application.Workbooks("sapbex0.xla").Close False
    Application.CommandBars("xxxSAPBEXxxx").Delete
    On Error GoTo 0
    
    If g_redCount > 0 Or g_yellowCount > 0 Then
        MsgBox g_redCount & " red signed Files found." & Chr(10) _
                & g_yellowCount & " yellow signed Files found." & Chr(10) & Chr(10) _
                & "Please check SAPSETUP.LOG in " & winPath & "." & Chr(10) & Chr(10) _
                & "Please see note 197460 for more details.", vbExclamation
    End If
    
    ThisWorkbook.Worksheets("PC Check").Shapes("CommandPCStart").Cut
        
    On Error Resume Next
    Application.Workbooks(CheckFileName).Close False
    Kill tmpPath & CheckFileName
    ThisWorkbook.Worksheets("PC Check").Copy
    ActiveWorkbook.SaveAs tmpPath & CheckFileName
    ThisWorkbook.Close False
End Sub

Private Sub Init()
    g_bwIndex = 12
'    g_browser12bIndex = 45
    g_mapIndex = 45
    g_olapIndex = 67
'    g_bw12bIndex = 72
    g_sapIndex = 74
    g_addcompIndex = 98
    g_msIndex = 107
    
    g_redCount = 0
    g_yellowCount = 0
End Sub

Private Sub outBwComponents()
    g_CloseSapbex = False
    outXLAfilePos g_bwIndex + 1                                         ' sapbex.xla
    outXLAfilePos g_bwIndex + 2                                         ' sapbex0.xla
    outXLAfilePos g_bwIndex + 3, True                                   ' sapbexc.xla
    
    ' sapbexs.xla

    outSystemFilePos g_bwIndex + 5                                      ' wdba.dll
    outEXEfilePos g_bwIndex + 6, g_bexPath                              ' wdbbapp.exe
    outCompPos g_bwIndex + 7, "SAPBROWSER.SAPBrowserCtrl.1"             ' wdbbctrl.ocx
    outEXEfilePos g_bwIndex + 8, g_bexPath                              ' wdbbwait.ani
    
    outCompPos g_bwIndex + 10, "SAPBExCommonResources.BExGlobal"        ' wdbcbexc.dll
    outCompPos g_bwIndex + 11, "SAP.BWAdapter.1"                        ' wdbdapdt.ocx
'    outCompPos g_bwIndex + 12, "SAP.BexHandlerControl.1"                ' wdbex.ocx
    outCompPos g_bwIndex + 12, "SAPBWOpenDialog.BEXOpenDialog"          ' wdbfodlg.ocx

    outCompPos g_bwIndex + 14, "wdbmbm2.BExMap2"                        ' wdbmbm2.ocx
    outCompPos g_bwIndex + 15, "SAPBWObjectBrowser.BEXOpenSaveDialog"   ' wdboobjb.dll
    outEXEfilePos g_bwIndex + 16, g_bexPath                             ' wdbpwpub.exe

    outEXEfilePos g_bwIndex + 18, g_sapPath                             ' wdbranim.exe
    outCompPos g_bwIndex + 19, "SAPRBLogic.SAPRBLog"                    ' wdbrlog.ocx
    outEXEfilePos g_bwIndex + 20, g_bexPath                             ' wdbrlog.exe
'    outCompPos g_bwIndex + 20, "SAPOLEDragDrop.OLEDropOCX"              ' wdbrole.ocx
    outCompPos g_bwIndex + 21, "SAP.BWTree.1"                           ' wdbrtre2.ocx
    outCompPos g_bwIndex + 22, "SAPBWPrintProp.SAPQueryPrnProp"         ' wdbrprn.ocx

    outCompPos g_bwIndex + 24, "SAPBWSelWizard.BWSelectionWizard"       ' wdbspres.dll
    outEXEfilePos g_bwIndex + 25, g_bexPath                             ' wdbtask.exe
    outCompPos g_bwIndex + 26, "SAPVarEditor.BExVarWizard"              ' wdbvved.ocx
    outEXEfilePos g_bwIndex + 27, g_bexPath                             ' wdbwpub.exe
    outCompPos g_bwIndex + 28, "BWWebPubWizard.webpubsh"                ' wdbwwiz.dll
    outCompPos g_bwIndex + 29, "SAP.BIWRFCServerCtrl.1"                 ' wdbz.ocx

    outEXEfilePos g_bwIndex + 31, g_bexPath                             ' bwcrw32.exe
End Sub

Private Sub outExtensionForArcView()
    outEXEfilePos g_arcIndex + 1, g_bexPath & "ArcView\"                ' sapext.avx
End Sub
    
Private Sub outBrowser12B()
'    out 1, "\Gui\Windows\Win32\BW\DswMedia and \Gui\Windows\Win32\BW\DswMedia\Program", 1
    outBRWfilePos g_browser12bIndex + 1, True, False                    ' bxbrowsr.exe
    outBRWfilePos g_browser12bIndex + 2, True, False                    ' wbklnch.exe
    outBRWfilePos g_browser12bIndex + 3, False, False                   ' browser.dcr
    outBRWfilePos g_browser12bIndex + 4, False, False                   ' browser2.dcr
    outBRWfilePos g_browser12bIndex + 5, False, False                   ' channel.dcr
    outBRWfilePos g_browser12bIndex + 6, True, True                     ' swdir.dll
End Sub

Private Sub outMapObjects()
    outEXEfilePos g_mapIndex + 1, g_mapPath                             ' af20.dll
    outEXEfilePos g_mapIndex + 2, g_mapPath                             ' aiimage20.dll
    outEXEfilePos g_mapIndex + 3, g_mapPath                             ' dforrt.dll
    outEXEfilePos g_mapIndex + 4, g_mapPath                             ' efileio.dll
    outEXEfilePos g_mapIndex + 5, g_mapPath                             ' elib.dll
    outEXEfilePos g_mapIndex + 6, g_mapPath                             ' ergxlib.dll
    outEXEfilePos g_mapIndex + 7, g_mapPath                             ' ethrlib.dll
    outEXEfilePos g_mapIndex + 8, g_mapPath                             ' iso8211.dll
    outEXEfilePos g_mapIndex + 9, g_mapPath                             ' libtiff.dll
    outCompPos g_mapIndex + 10, "MapObjects.MemFile.1"                  ' memfile.dll
'    outEXEfilePos g_mapIndex + 10, g_mapPath                            ' memfile.dll
    outEXEfilePos g_mapIndex + 11, g_mapPath                            ' memtable20.dll
    outCompPos g_mapIndex + 12, "MapObjects2.ZRenderer"                 ' mo20.ocx
'    outEXEfilePos g_mapIndex + 12, g_mapPath                            ' mo20.ocx
    outEXEfilePos g_mapIndex + 13, g_mapPath                            ' mo20.lic
    outEXEfilePos g_mapIndex + 14, g_mapPath                            ' mobase.dll
    outEXEfilePos g_mapIndex + 15, g_mapPath                            ' mofeat.dll
    outEXEfilePos g_mapIndex + 16, g_mapPath                            ' mogridio.dll
    outEXEfilePos g_mapIndex + 17, g_mapPath                            ' mtch.dll
    outEXEfilePos g_mapIndex + 18, g_mapPath                            ' pe.dll
    outEXEfilePos g_mapIndex + 19, g_mapPath                            ' sg.dll
    outEXEfilePos g_mapIndex + 20, g_mapPath                            ' shape20.dll
End Sub

Private Sub outOleForOlap()
    outEXEfilePos g_olapIndex + 1, g_olapPath                           ' mdrmdlg.dll
    outEXEfilePos g_olapIndex + 2, g_olapPath                           ' mdrmsap.dll
    outEXEfilePos g_olapIndex + 3, g_olapPath                           ' mdxpars.dll
    outEXEfilePos g_olapIndex + 4, g_olapPath                           ' saprfc.ini
    outEXEfilePos g_olapIndex + 5, g_olapPath                           ' scerrlkp.dll
End Sub

Private Sub outBwComponents12B()
    outCompPos g_bw12bIndex + 1, "SAPRBMain.SAPRBMain2"                 ' wdbrrb2.ocx
    outCompPos g_bw12bIndex + 2, "SAPRBDlg.SAPRBDlg2"                   ' wdbrdlg2.ocx
    outCompPos g_bw12bIndex + 3, "SAPRBFormula.SAPRBFml2"               ' wdbrfml2.ocx
    outCompPos g_bw12bIndex + 4, "SAPRBDescription.SAPRBDesc2"          ' wdbrdes2.ocx
End Sub

Private Sub outSapGuiCoreComponents()
    outEXEfilePos g_sapIndex + 1, g_sapPath                             ' chart.ocx
    outEXEfilePos g_sapIndex + 2, g_sapPath                             ' icdataflow.ocx
    outEXEfilePos g_sapIndex + 3, g_sapPath                             ' icjoin.ocx
    
    outEXEfilePos g_sapIndex + 5, g_sapPath                             ' sapgradp.ocx
    outCompPos g_sapIndex + 6, "SAP.CalendarControl.1"                  ' sapcalen.ocx
    outCompPos g_sapIndex + 7, "SAPGraphics.Chart.1"                    ' sapchart.ocx

    outSystemFilePos g_sapIndex + 9                                     ' sapbtmp.dll
    outSystemFilePos g_sapIndex + 10                                     ' librfc32.dll
    outSystemFilePos g_sapIndex + 11                                     ' richtx32.ocx
    
    
    outCompPos g_sapIndex + 13, "SAP.LogonControl.1"                     ' wdtlog.ocx
    outCompPos g_sapIndex + 14, "SAP.TableTreeControl.1"                ' wdttree.ocx
    outCompPos g_sapIndex + 15, "SAP.TableFactory.1"                    ' wdtaocx.ocx
    'outCompPos g_sapIndex + 15, "SAP.TableViewControl.1"                ' wdtvocx.ocx
    outCompPos g_sapIndex + 16, "SAP.DataProvider.1"                    ' sapdatap.ocx

    outEXEfilePos g_sapIndex + 18, g_frontPath                            ' sapfctrl.dll
    outEXEfilePos g_sapIndex + 19, g_frontPath                            ' sapfcust.exe
    outEXEfilePos g_sapIndex + 20, g_frontPath                            ' sapfdraw.dll
    outEXEfilePos g_sapIndex + 21, g_frontPath                            ' sapfdraw.dll
    outEXEfilePos g_sapIndex + 22, g_frontPath                            ' sapfhook.dll
End Sub

Private Sub outAdditionalComponents()
    ' AdditionalComponents
    outCompPos g_addcompIndex + 1, "vsAwk.vsAwk"                          ' awkone.ocx
    outCompPos g_addcompIndex + 2, "Otx.OtxToolBar.1"                     ' formx.ocx
    outCompPos g_addcompIndex + 3, "TabOne.TabOne"                        ' sizerone.ocx
    outCompPos g_addcompIndex + 4, "otx.CollectionX"                      ' otxrt.dll
    outCompPos g_addcompIndex + 5, "VSFlexGrid.VSFlexGrid"                ' vsflex7l.ocx
    outCompPos g_addcompIndex + 6, "VSOCX.VselasticCtrl.1"                ' vsocx32.ocx
    outCompPos g_addcompIndex + 7, "vsElastic.vsElastic"                  ' vsocx6.ocx
End Sub

Private Sub outMicrosoftCoreComponents()
    outCompPos g_msIndex + 1, "DHTMLEdit.DHTMLEdit"                     ' dhtmled.ocx
    
    outSystemFilePos g_msIndex + 2, True                                ' mfc42.dll
    
    outCompPos g_msIndex + 3, "MSFlexGridLib.MSFlexGrid"                ' msflxgrd.ocx
    
    outSystemFilePos g_msIndex + 4, True                                ' msvcp60.dll
    outSystemFilePos g_msIndex + 5, True                                ' msvcrt.dll
    outSystemFilePos g_msIndex + 6, True                                ' msvcrt40.dll
    
    outSystemFilePos g_msIndex + 7, True                                ' oleaut32.dll
    outSystemFilePos g_msIndex + 8, True                                ' olepro32.dll
    outSystemFilePos g_msIndex + 9, True                                ' stdole2.tlb
'    outSystemFilePos g_msIndex + 10, True                              ' scrrun.dll
    outCompPos g_msIndex + 10, "HTML.HostEncode"                        ' scrrun.dll
    
    outCompPos g_msIndex + 11, "TriEditParse.TriEditParse"              ' triedit.dll
End Sub

Private Sub outEXEfilePos(row As Integer, path As String, Optional system As Boolean, Optional server As Boolean, Optional path2 As String, Optional versionprefix As String)
    Dim myValue As String: myValue = path & ThisWorkbook.Worksheets("Version").Cells(row, 1).value
    Dim myVersion As String
    Dim version As String: version = ThisWorkbook.Worksheets("Version").Cells(row, 2).value
    Dim file As String: file = ThisWorkbook.Worksheets("Version").Cells(row, 1).value
    Dim destPath As String: destPath = ThisWorkbook.Worksheets("Version").Cells(row, 4).value
    Dim sourcePath As String: sourcePath = ThisWorkbook.Worksheets("Version").Cells(row, 5).value
    
    outPos row, 1, 0, file
    
    Dim filelength As Long
    On Error Resume Next
    filelength = FileLen(myValue)
    If filelength = 0 Then
        myValue = path2 & ThisWorkbook.Worksheets("Version").Cells(row, 1).value
    End If
    
    myVersion = getFileVersion(myValue)
    If outLengthDatePos(row, myValue) Then
        If version = "" Then
            outPos row, 2, 5, ""
        Else
            If myVersion = version Then
                outPos row, 2, 5, myVersion
            Else
                If myVersion = "No Version" Then
                    ' check file size
                    If Val(version) = FileLen(myValue) Then
                        outPos row, 2, 5, version
                    Else
                        If system = False Then
                            outPos row, 2, 4, FileLen(myValue)
                            If server = False Then
                                outComment row, 155, file, file, sourcePath, destPath, winPath, file
                            Else
                                outComment row, 172, file
                            End If
                        Else
                            outPos row, 2, 7, FileLen(myValue)
                            If server = False Then
                                outComment row, 156, file, file, sourcePath, destPath, winPath, file
                            Else
                                outComment row, 172, file
                            End If
                        End If
                    End If
                Else
                    If CompareVersion(myVersion, version, versionprefix) = 0 Then
                        outPos row, 2, 5, myVersion
                    Else
                        If CompareVersion(myVersion, version, versionprefix) > 0 Then
                            outPos row, 2, 6, myVersion
                            If server = False Then
                                outComment row, 157, file, file, sourcePath, destPath, winPath, file
                            Else
                                outComment row, 169, file
                            End If
                        Else
                            If system = False Then
                                outPos row, 2, 4, myVersion
                                If server = False Then
                                    outComment row, 158, file, file, sourcePath, destPath, winPath, file
                                Else
                                    outComment row, 170, file
                                End If
                            Else
                                outPos row, 2, 7, myVersion
                                If server = False Then
                                    outComment row, 159, file, file, sourcePath, destPath, winPath, file
                                Else
                                    outComment row, 170, file
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End If
        outPos row, 3, 0, version
        outPos row, 4, 0, path
    Else
        If version = "Should not be installed" Then
            outPos row, 2, 5, version
            If server = False Then
                If ThisWorkbook.Worksheets("Version").Cells(row, 4).value = "X" Then
                    outComment row, 160, file, file, destPath, file, file, destPath
                Else
                    outComment row, 161, file, file, destPath
                End If
            Else
                outComment row, 173, file, file, destPath, file
            End If
        Else
            outPos row, 2, 4, "Not found"
            If server = False Then
                If ThisWorkbook.Worksheets("Version").Cells(row, 4).value = "X" Then
                    outComment row, 160, file, file, destPath, file, file, destPath
                Else
                    outComment row, 161, file, file, destPath
                End If
            Else
                outComment row, 171, file
            End If
        End If
    End If
End Sub

Private Sub outBRWfilePos(row As Integer, isProgram As Boolean, isSystem As Boolean)
    Dim myValue As String
    Dim myVersion As String
    Dim version As String: version = ThisWorkbook.Worksheets("Version").Cells(row, 2).value
    Dim brwPath As String
    Dim file As String: file = ThisWorkbook.Worksheets("Version").Cells(row, 1).value
    Dim destPath As String: destPath = ThisWorkbook.Worksheets("Version").Cells(row, 4).value
    Dim sourcePath As String: sourcePath = ThisWorkbook.Worksheets("Version").Cells(row, 5).value
    
    outPos row, 1, 0, file
    
    brwPath = registryEntry("SAP.BusinessExplorer.Analyzer", "path")
    If Right(brwPath, 1) = "\" Then
        brwPath = brwPath & "DswMedia\"
    Else
        brwPath = brwPath & "\DswMedia\"
    End If
    If (isSystem = True) Then
        myValue = sysPath & "\Macromed\Director\" & ThisWorkbook.Worksheets("Version").Cells(row, 1).value
        brwPath = sysPath & "\Macromed\Director\"
        If outLengthDatePos(row, myValue) = False Then
            myValue = sysPath & "\Macromed6\Director\" & ThisWorkbook.Worksheets("Version").Cells(row, 1).value
            brwPath = sysPath & "\Macromed6\Director\"
        End If
    Else
        myValue = brwPath & IIf(isProgram, "program\", "") & ThisWorkbook.Worksheets("Version").Cells(row, 1).value
    End If
    
    myVersion = getFileVersion(myValue)
    If outLengthDatePos(row, myValue) Then
        If myVersion = version Or isSystem Then
            outPos row, 2, 5, myVersion
        Else
            If myVersion = "No Version" Then
                ' check file size
                If Val(version) = FileLen(myValue) Then
                    outPos row, 2, 5, version
                Else
                    outPos row, 2, 4, FileLen(myValue)
                    outComment row, 155, file, file, sourcePath, destPath, winPath, file
                End If
            Else
                If CompareVersion(myVersion, version) = 0 Then
                    outPos row, 2, 5, myVersion
                Else
                    If CompareVersion(myVersion, version) > 0 Then
                        outPos row, 2, 6, myVersion
                        outComment row, 157, file, file, sourcePath, destPath, winPath, file
                    Else
                        outPos row, 2, 4, myVersion
                        outComment row, 158, file, file, sourcePath, destPath, winPath, file
                    End If
                End If
            End If
        End If
        outPos row, 3, 0, version
        If isProgram = True Then
            outPos row, 4, 0, brwPath & "program\"
        Else
            outPos row, 4, 0, brwPath
        End If
    Else
        outPos row, 2, 4, "Not found"
        If ThisWorkbook.Worksheets("Version").Cells(row, 4).value = "X" Then
            outComment row, 160, file, file, destPath, file, file, destPath
        Else
            outComment row, 161, file, file, destPath
        End If
    End If
End Sub


Private Function outLengthDatePos(row As Integer, fullName As String) As Boolean
    Dim filelength As Long:
    On Error Resume Next
    filelength = FileLen(fullName)
    If filelength = 0 Then
        outPos row, 5, 0, "Not found"
        outPos row, 6, 0, "Not found"
        outLengthDatePos = False
    Else
        outDateTimePos row, 5, FileDateTime(fullName)
        outPos row, 6, 0, filelength, "#,##0 ""Bytes"""
        outLengthDatePos = True
    End If
End Function

Private Sub outPos(row As Integer, col As Integer, style As Byte, myText As Variant, Optional vbFormat As String)
    With g_range(row, col)
        .value = myText
        If style > 0 Then .Font.Bold = True
        If style = 2 Then .Font.Size = 12
        If style = 3 Then .Font.Size = 16
        If style = 4 Then       ' red
            g_redCount = g_redCount + 1
            .Font.ColorIndex = 2
            .Interior.Pattern = xlSolid
            .Interior.Color = RGB(255, 0, 0)    '.ColorIndex = 3
        End If
        If style = 5 Then       ' green
            .Font.ColorIndex = 1
            .Interior.Pattern = xlSolid
            .Interior.Color = RGB(0, 255, 0)    ' Index = 4
        End If
        If style = 6 Then       ' yellow
            g_yellowCount = g_yellowCount + 1
            .Font.ColorIndex = 1
            .Interior.Pattern = xlSolid
            .Interior.Color = RGB(255, 255, 0)      'Index = 6
        End If
        If style = 7 Then       ' blue
            .Font.ColorIndex = 2
            .Interior.Pattern = xlSolid
            .Interior.Color = RGB(0, 0, 255)    'Index = 5
        End If
        If vbFormat <> "" Then .NumberFormat = vbFormat
    End With
End Sub

Private Sub outDateTimePos(row As Integer, col As Integer, ByVal myDate As Date)
    Dim myTime As Date
    myDate = myDate
    myTime = myDate - Int(myDate)
    outPos row, col, 0, Int(myDate) & "   " & myTime   ' & "h:mm"
End Sub

Private Function FindRev(strText As String, strFind As String)
    Dim nCurrentPos As Integer

    nCurrentPos = InStr(strText, strFind)
    While (nCurrentPos <> 0)
        FindRev = nCurrentPos
        nCurrentPos = InStr(nCurrentPos + 1, strText, strFind)
    Wend
End Function

'Private Sub outReferences()
'    out 0, "", 1
'    out 2, "SAPBEX references"
'    Dim myProject As Object
'    On Error Resume Next
'    Set myProject = Application.VBE.VBProjects("SAPBEX")
'    On Error GoTo 0
'    out 0, "", 1
'    If myProject Is Nothing Then
'        out 1, "could not be determined", 1
'    Else
'        out 1, "GUID"
'        out 1, "Path"
'        out 0, ""
'        out 0, ""
'        out 0, ""
'        out 0, ""
'        out 1, "IsBroken?", 1
'        Dim myRef As Object
'        For Each myRef In myProject.references
'            out 0, myRef.Description
'            out 0, myRef.guid
'            out 0, myRef.fullpath
'            out 0, ""
'            out 0, ""
'            out 0, ""
'            If myRef.IsBroken = False Then
'                out 5, myRef.IsBroken, 1
'            Else
'                out 4, myRef.IsBroken, 1
'            End If
'        Next myRef
'    End If
'    out 0, "", 1
'End Sub

Private Sub outCompPos(row As Integer, compName As String)
    Dim fileName As String: fileName = ThisWorkbook.Worksheets("Version").Cells(row, 1).value
    Dim myVersion As String
    Dim version As String: version = ThisWorkbook.Worksheets("Version").Cells(row, 2).value
    Dim file As String: file = ThisWorkbook.Worksheets("Version").Cells(row, 1).value
    Dim destPath As String: destPath = ThisWorkbook.Worksheets("Version").Cells(row, 4).value
    Dim sourcePath As String: sourcePath = ThisWorkbook.Worksheets("Version").Cells(row, 5).value
    
    outPos row, 7, 0, compName
    outPos row, 1, 0, file
    
    Dim myValue As String: myValue = registryEntry(compName, "clsid")
    If myValue = "" Then
        myValue = registryEntry(compName + ".1", "clsid")
    End If
    If myValue = "" Then
        If version = "Should not be installed" Then
            outPos row, 2, 5, version
            outComment row, 165, file, file, file
        Else
            outPos row, 2, 4, "Not registered"
            outComment row, 163, file, file, sourcePath, destPath, file, destPath, file, winPath, file
        End If
    Else
        outPos row, 8, 0, myValue   ' clsid
        myValue = registryEntry("clsid", myValue & "\InProcServer32")
        If myValue = "" Then
            outPos row, 2, 4, "No server registered!?", 1
            outComment row, 164, file, file, sourcePath, destPath, file, destPath, file, winPath, file
        Else
            myVersion = getFileVersion(myValue)
            If outLengthDatePos(row, myValue) Then
                If myVersion = version Then
                    outPos row, 2, 5, myVersion
                Else
                    If CompareVersion(myVersion, version) = 0 Then
                        outPos row, 2, 5, myVersion
                    Else
                        If CompareVersion(myVersion, version) > 0 Then
                            outPos row, 2, 6, myVersion
                            outComment row, 166, file, file, sourcePath, destPath, file, destPath, file, winPath, file
                        Else
                            outPos row, 2, 4, myVersion
                            outComment row, 167, file, file, sourcePath, destPath, file, destPath, file, winPath, file
                        End If
                    End If
                End If
                
                ' check create object
                If compName <> "otx.CollectionX" _
                  And compName <> "BWWebPubWizard.webpubsh" _
                  And compName <> "wdbmbm2.BExMap2" _
                  And compName <> "MSFlexGridLib.MSFlexGrid" _
                  And compName <> "HTML.HostEncode" _
                  And compName <> "TriEditParse.TriEditParse" _
                  And compName <> "SAPBWPrintProp.SAPQueryPrnProp" _
                  And g_range(2, 9).value = "X" Then
                    On Error Resume Next
                    Dim compobj As Object
                    Set compobj = CreateObject(compName)
                    If compobj Is Nothing Then
                        outPos row, 2, 4, "Could not create object"
                        Range("A" & row).ClearComments
                        Range("B" & row).ClearComments
                        outComment row, 174, file, file, sourcePath, destPath, file, destPath, file, winPath, file
                    End If
                    If compName <> "SAPBROWSER.SAPBrowserCtrl.1" Then
                        compobj.Delete
                    End If
                    Set compobj = Nothing
                End If
                
                outPos row, 3, 0, version
                outPos row, 4, 0, Left(myValue, FindRev(myValue, "\") - 1)
            Else
                If version = "Should not be installed" Then
                    outPos row, 2, 4, "Not found"
                        outComment row, 160, file, file, destPath, file, file, destPath
                Else
                    outPos row, 2, 4, "Not found"
                    outComment row, 168, file, destPath, file, sourcePath, destPath, file, destPath, file, winPath
                End If
            End If
        End If
    End If
End Sub

Private Function outXLAfilePos(row As Integer, Optional read As Boolean, Optional server As Boolean, Optional versionprefix As String) As Boolean
    Dim version As String: version = ThisWorkbook.Worksheets("Version").Cells(row, 2).value
    Dim file As String: file = ThisWorkbook.Worksheets("Version").Cells(row, 1).value
    Dim destPath As String: destPath = ThisWorkbook.Worksheets("Version").Cells(row, 4).value
    Dim sourcePath As String: sourcePath = ThisWorkbook.Worksheets("Version").Cells(row, 5).value
    
    outPos row, 1, 0, ThisWorkbook.Worksheets("Version").Cells(row, 1).value
    
    If read = False Then
        Dim fileName As String: fileName = ThisWorkbook.Worksheets("Version").Cells(row, 1).value
        Dim fullName As String: fullName = g_bexPath & fileName
        Dim openWorkbook As Boolean: openWorkbook = False
        On Error Resume Next
        If Workbooks(fileName).fullName <> fullName Then
            Workbooks(fileName).Close
            openWorkbook = True
        End If
        On Error GoTo 0
        If outLengthDatePos(row, fullName) Then
            Dim myWorkbook As Workbook:
            If openWorkbook = True Then
                If fileName = "sapbex.xla" Then
                    g_CloseSapbex = True
                End If
                Set myWorkbook = Application.Workbooks.Open(fullName)
            Else
                Set myWorkbook = Application.Workbooks(fileName)
            End If
            If myWorkbook Is Nothing Then
                outPos row, 1, 4, "Not found", 1
                If server = False Then
                    outComment row, 162, file, destPath, file, sourcePath, destPath, winPath, file
                Else
                    outComment row, 171, file
                End If
                outXLAfilePos = False
            Else
                Dim myVersion As String
                myVersion = "???"
                Dim myProperty As Object
                For Each myProperty In myWorkbook.CustomDocumentProperties
                    If myProperty.Name = "Version" Then myVersion = myProperty.value
                Next myProperty
                
                If myVersion = version Then
                    outPos row, 2, 5, myVersion
                Else
                    If CompareVersion(myVersion, version, versionprefix) = 0 Then
                        outPos row, 2, 5, myVersion
                    Else
                        If CompareVersion(myVersion, version, versionprefix) > 0 Then
                            outPos row, 2, 6, myVersion
                            If server = False Then
                                outComment row, 157, file, file, sourcePath, destPath, winPath, file
                            Else
                                outComment row, 169, file
                            End If
                        Else
                            outPos row, 2, 4, myVersion
                            If server = False Then
                                outComment row, 158, file, file, sourcePath, destPath, winPath, file
                            Else
                                outComment row, 170, file
                            End If
                        End If
                    End If
                End If
                outPos row, 3, 0, version
                outPos row, 4, 0, g_bexPath
                
                outXLAfilePos = True
            End If
        Else
            outPos row, 2, 4, "Not found"
            If server = False Then
                outComment row, 158, file, file, sourcePath, destPath, winPath, file
            Else
                outComment row, 171, file
            End If
        End If
    Else
        ' sapbexc.xla
        Dim fileName1 As String: fileName1 = ThisWorkbook.Worksheets("Version").Cells(row, 1).value
        Dim fullName1 As String: fullName1 = g_bexPath & fileName1
        If outLengthDatePos(row, fullName1) Then
            Dim myVersion1 As String
            myVersion1 = ThisWorkbook.CustomDocumentProperties!version
            If myVersion1 = version Then
                outPos row, 2, 5, myVersion1
            Else
                If CompareVersion(myVersion1, version, versionprefix) > 0 Then
                    outPos row, 2, 6, myVersion1
                    If server = False Then
                        outComment row, 157, file, file, sourcePath, destPath, winPath, file
                    Else
                        outComment row, 169, file
                    End If
                Else
                    outPos row, 2, 4, myVersion1
                    If server = False Then
                        outComment row, 158, file, file, sourcePath, destPath, winPath, file
                    Else
                        outComment row, 170, file
                    End If
                End If
            End If
            outPos row, 3, 0, version
            outPos row, 4, 0, g_bexPath
        End If
        outXLAfilePos = True
    End If
End Function

Private Sub outSystemFilePos(row As Integer, Optional system As Boolean)
    Dim myValue As String: myValue = sysPath & "\" & ThisWorkbook.Worksheets("Version").Cells(row, 1).value
    Dim myVersion As String
    Dim version As String: version = ThisWorkbook.Worksheets("Version").Cells(row, 2).value
    Dim file As String: file = ThisWorkbook.Worksheets("Version").Cells(row, 1).value
    Dim destPath As String: destPath = ThisWorkbook.Worksheets("Version").Cells(row, 4).value
    Dim sourcePath As String: sourcePath = ThisWorkbook.Worksheets("Version").Cells(row, 5).value
    
    outPos row, 1, 0, ThisWorkbook.Worksheets("Version").Cells(row, 1).value
    
    myVersion = getFileVersion(myValue)
    If outLengthDatePos(row, myValue) Then
        If myVersion = version Then
            outPos row, 2, 5, myVersion
        Else
            If CompareVersion(myVersion, version) = 0 Then
                outPos row, 2, 5, myVersion
            Else
                If CompareVersion(myVersion, version) > 0 Then
                    If system = False Then
                        outPos row, 2, 6, myVersion
                        outComment row, 157, file, file, sourcePath, destPath, winPath, file
                    Else
                        outPos row, 2, 7, myVersion
                        outComment row, 157, file, file, sourcePath, destPath, winPath, file
                    End If
                Else
                    If system = False Then
                        outPos row, 2, 4, myVersion
                        outComment row, 158, file, file, sourcePath, destPath, winPath, file
                    Else
                        outPos row, 2, 7, myVersion
                        outComment row, 159, file, file, sourcePath, destPath, winPath, file
                    End If
                End If
            End If
        End If
        outPos row, 3, 0, version
        outPos row, 4, 0, sysPath
    Else
        outPos row, 2, 4, "Not found"
        outComment row, 162, file, destPath, file, sourcePath, destPath, winPath, file
    End If
End Sub

Private Sub outComment(row As Integer, rowComment As Integer, _
                    Optional val1 As String = "", Optional val2 As String = "", _
                    Optional val3 As String = "", Optional val4 As String = "", _
                    Optional val5 As String = "", Optional val6 As String = "", _
                    Optional val7 As String = "", Optional val8 As String = "", _
                    Optional val9 As String = "")
    Dim message As String
    Dim height As Single
    message = ThisWorkbook.Worksheets("Version").Cells(rowComment, 1).value
    If Len(val1) > 0 Then
        message = ReplaceString(message, "%1", val1)
    End If
    If Len(val2) > 0 Then
        message = ReplaceString(message, "%2", val2)
    End If
    If Len(val3) > 0 Then
        message = ReplaceString(message, "%3", val3)
    End If
    If Len(val4) > 0 Then
        message = ReplaceString(message, "%4", val4)
    End If
    If Len(val5) > 0 Then
        message = ReplaceString(message, "%5", val5)
    End If
    If Len(val6) > 0 Then
        message = ReplaceString(message, "%6", val6)
    End If
    If Len(val7) > 0 Then
        message = ReplaceString(message, "%7", val7)
    End If
    If Len(val8) > 0 Then
        message = ReplaceString(message, "%8", val8)
    End If
    If Len(val9) > 0 Then
        message = ReplaceString(message, "%9", val9)
    End If
    height = Len(message) * 0.003
    If height < 1 Then
        height = 1
    End If
    
    Range("A" & row).AddComment
    Range("A" & row).Comment.Visible = True
    Range("A" & row).Comment.Text Text:=message
    Range("A" & row).Comment.Shape.Select True
    Selection.ShapeRange.ScaleHeight height, msoFalse, msoScaleFromTopLeft
    Selection.ShapeRange.ScaleWidth 3, msoFalse, msoScaleFromTopLeft
    Range("A" & row).Comment.Visible = False

    Range("B" & row).AddComment
    Range("B" & row).Comment.Visible = True
    Range("B" & row).Comment.Text Text:=message
    Range("B" & row).Comment.Shape.Select True
    Selection.ShapeRange.ScaleHeight height, msoFalse, msoScaleFromTopLeft
    Selection.ShapeRange.ScaleWidth 3, msoFalse, msoScaleFromTopLeft
    Range("B" & row).Comment.Visible = False
End Sub

Private Function ReplaceString(message As String, placeholder As String, value As String) As String
    Dim nPos As Long
    Dim strLeft As String
    Dim strRight As String
    
    nPos = InStr(message, placeholder)
    If nPos <> 0 Then
        strLeft = Left(message, nPos - 1)
        strRight = Right(message, Len(message) - nPos - Len(placeholder) + 1)
        ReplaceString = strLeft + value + strRight
    Else
        ReplaceString = message
    End If
End Function

Private Function CompareVersion(version1 As String, version2 As String, Optional versionprefix As String) As Integer
    Dim build1 As String
    Dim build2 As String
    Dim rel1 As String
    Dim rel2 As String
    Dim pre1 As String
    
    If versionprefix <> "" Then
        If Left$(version1, Len(versionprefix)) <> versionprefix Then
            CompareVersion = -1
            Exit Function
        End If
    End If
    
    build1 = Right(version1, Len(version1) - FindRev(version1, "."))
    build2 = Right(version2, Len(version2) - FindRev(version2, "."))
    
    rel1 = Left(version1, FindRev(version1, "."))
    rel2 = Left(version2, FindRev(version2, "."))
    
    pre1 = Left(version1, InStr(version1, ".") - 1)         ' 021
    If CInt(pre1) > 1000 Or rel1 = rel2 Then
        On Error GoTo error_end
        If CInt(build1) > CInt(build2) Then
            CompareVersion = 1
        Else
            If CInt(build1) < CInt(build2) Then
                CompareVersion = -1
            Else
                CompareVersion = 0
            End If
        End If
    Else
        If version1 > version2 Then
            CompareVersion = 1
        Else
            If version1 < version2 Then
                CompareVersion = -1
            Else
                CompareVersion = 0
            End If
        End If
    End If
    On Error GoTo 0
    GoTo no_error_end
error_end:
    CompareVersion = 0
no_error_end:
End Function


Private Function getOperatingSystem()
    
    Dim VER_PLATFORM_WIN32s As Integer: VER_PLATFORM_WIN32s = 0
    Dim VER_PLATFORM_WIN32_WINDOWS As Integer: VER_PLATFORM_WIN32_WINDOWS = 1
    Dim VER_PLATFORM_WIN32_NT As Integer: VER_PLATFORM_WIN32_NT = 2
    
    Dim osvi As OSVERSIONINFO
    ' Note: Has to be filled prior to call!
    osvi.dwOSVersionInfoSize = 5 * 4 + 128
    
    Dim res As Integer
    res = GetVersionEx(osvi)
    
    Dim version As String
    Dim CSDVersion As String
    Range("D6").value = osvi.szCSDVersion
    CSDVersion = Range("D6").value
    Range("D6").value = ""
    
    Select Case osvi.dwPlatformId
    Case VER_PLATFORM_WIN32s:           ' Win32s on Windows 3.1
        version = "Win32 on Windows 3.1"
    Case VER_PLATFORM_WIN32_WINDOWS:    ' Windows 95, Windows 98, or Windows Me.
        Select Case osvi.dwMinorVersion
        Case 0:
            version = "Windows 95"
        Case 10:
            version = "Windows 98"
        Case 90:
            version = "Windows Me"
        End Select
        version = getOperatingSystem + " " + CSDVersion + " (" + CStr(osvi.dwBuildNumber) + ")"
    Case VER_PLATFORM_WIN32_NT:         ' Windows NT 3.51, Windows NT 4.0, Windows 2000, Windows XP, or Windows .NET Server.
        Select Case osvi.dwMajorVersion
        Case 3:
            version = "Windows NT 3.51"
        Case 4:
            version = "Windows NT 4.0"
        Case 5:
            Select Case osvi.dwMinorVersion
            Case 0:
                version = "Windows 2000"
            Case 1:
                version = "Windows XP"
            End Select
        End Select
        version = version + " " + CSDVersion + " (" + CStr(osvi.dwBuildNumber) + ")"
    End Select
    getOperatingSystem = version
End Function

Attribute VB_Name = "registry"
Option Explicit
Option Private Module

Private Declare Function GetTempPath Lib "kernel32" Alias "GetTempPathA" _
    (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long

Private Declare Function GetSystemDirectory Lib "kernel32" Alias "GetSystemDirectoryA" _
    (ByVal lpBuffer As String, ByVal nSize As Long) As Long
    
Private Declare Function GetWindowsDirectory Lib "kernel32" Alias "GetWindowsDirectoryA" _
  (ByVal lpBuffer As String, ByVal nSize As Long) As Long
   

Type SECURITY_ATTRIBUTES
    nLength As Long
    lpSecurityDescriptor As Long
    bInheritHandle As Long
End Type
Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" ( _
    ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, _
    ByVal samDesired As Long, phkResult As Long) As Long
Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" ( _
    ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, _
    lpType As Long, lpData As Any, lpcbData As Long) As Long
    ' Note that if you declare the lpData parameter as String, you must pass it ByVal
Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long

Function registryEntry(key1 As String, key2 As String, Optional local_machine As Boolean) As String

    Const HKEY_CLASSES_ROOT = &H80000000
    Const HKEY_LOCAL_MACHINE = &H80000002
    Const KEY_QUERY_VALUE = &H1
    Dim hRegKey As Long
    Dim hRegSubKey As Long
    Dim keyName1 As String * 80: keyName1 = key1 & vbNullChar
    Dim keyName2 As String * 80: keyName2 = key2 & vbNullChar
    Dim itemBuffer As String * 255
    Dim itemLength As Long
   
    If local_machine = False Then
        If RegOpenKeyEx(HKEY_CLASSES_ROOT, keyName1, 0, KEY_QUERY_VALUE, hRegKey) = 0 Then
            If RegOpenKeyEx(hRegKey, keyName2, 0, KEY_QUERY_VALUE, hRegSubKey) = 0 Then
                itemLength = 255
                RegQueryValueEx hRegSubKey, vbNullString, 0, 1, ByVal itemBuffer, itemLength
                RegQueryValueEx hRegSubKey, vbNullString, 0, 1, ByVal itemBuffer, itemLength
                registryEntry = Left(itemBuffer, itemLength - 1)
                RegCloseKey hRegKey
            End If
        End If
    Else
        If RegOpenKeyEx(HKEY_LOCAL_MACHINE, keyName1, 0, KEY_QUERY_VALUE, hRegKey) = 0 Then
            If RegOpenKeyEx(hRegKey, keyName2, 0, KEY_QUERY_VALUE, hRegSubKey) = 0 Then
                itemLength = 255
                RegQueryValueEx hRegSubKey, vbNullString, 0, 1, ByVal itemBuffer, itemLength
                RegQueryValueEx hRegSubKey, vbNullString, 0, 1, ByVal itemBuffer, itemLength
                registryEntry = Left(itemBuffer, itemLength - 1)
                RegCloseKey hRegKey
            End If
        End If
    End If

End Function

Public Function tmpPath() As String
    Dim tempPathBuffer As String * 255
    GetTempPath 255, tempPathBuffer
    tmpPath = nullTrim(tempPathBuffer)
End Function

Public Function sysPath() As String
    Dim sysPathBuffer As String * 255
    GetSystemDirectory sysPathBuffer, 255
    sysPath = nullTrim(sysPathBuffer)
End Function

Public Function winPath() As String
    Dim sysPathBuffer As String * 255
    GetWindowsDirectory sysPathBuffer, 255
    winPath = nullTrim(sysPathBuffer)
End Function

Public Function nullTrim(myString As String) As String
    nullTrim = Left(myString, InStr(myString, vbNullChar) - 1)
End Function

Attribute VB_Name = "version"
Option Explicit
Option Private Module

Type VS_FIXEDFILEINFO
   dwSignature As Long
   dwStrucVersionl As Integer     '  e.g. = &h0000 = 0
   dwStrucVersionh As Integer     '  e.g. = &h0042 = .42
   dwFileVersionMSl As Integer    '  e.g. = &h0003 = 3
   dwFileVersionMSh As Integer    '  e.g. = &h0075 = .75
   dwFileVersionLSl As Integer    '  e.g. = &h0000 = 0
   dwFileVersionLSh As Integer    '  e.g. = &h0031 = .31
   dwProductVersionMSl As Integer '  e.g. = &h0003 = 3
   dwProductVersionMSh As Integer '  e.g. = &h0010 = .1
   dwProductVersionLSl As Integer '  e.g. = &h0000 = 0
   dwProductVersionLSh As Integer '  e.g. = &h0031 = .31
   dwFileFlagsMask As Long        '  = &h3F for version "0.42"
   dwFileFlags As Long            '  e.g. VFF_DEBUG Or VFF_PRERELEASE
   dwFileOS As Long               '  e.g. VOS_DOS_WINDOWS16
   dwFileType As Long             '  e.g. VFT_DRIVER
   dwFileSubtype As Long          '  e.g. VFT2_DRV_KEYBOARD
   dwFileDateMS As Long           '  e.g. 0
   dwFileDateLS As Long           '  e.g. 0
End Type

Declare Function GetFileVersionInfo Lib "Version.dll" Alias _
   "GetFileVersionInfoA" (ByVal lptstrFilename As String, ByVal _
   dwhandle As Long, ByVal dwlen As Long, lpData As Any) As Long
Declare Function GetFileVersionInfoSize Lib "Version.dll" Alias _
   "GetFileVersionInfoSizeA" (ByVal lptstrFilename As String, _
   lpdwHandle As Long) As Long
Declare Function VerQueryValue Lib "Version.dll" Alias _
   "VerQueryValueA" (pBlock As Any, ByVal lpSubBlock As String, _
   lplpBuffer As Any, puLen As Long) As Long
Declare Sub MoveMemory Lib "kernel32" Alias "RtlMoveMemory" _
   (dest As Any, ByVal Source As Long, ByVal length As Long)

Public Function getFileVersion(fileName As String) As String
    
    Dim rc                As Long
    Dim lDummy            As Long
    Dim sBuffer()         As Byte
    Dim lBufferLen        As Long
    Dim lVerPointer       As Long
    Dim udtVerBuffer      As VS_FIXEDFILEINFO
    Dim lVerbufferLen     As Long

    lBufferLen = GetFileVersionInfoSize(fileName, lDummy)
    If lBufferLen < 1 Then
        getFileVersion = "No Version"
        Exit Function
    End If

    ReDim sBuffer(lBufferLen)
    rc = GetFileVersionInfo(fileName, 0&, lBufferLen, sBuffer(0))
    rc = VerQueryValue(sBuffer(0), "\", lVerPointer, lVerbufferLen)
    MoveMemory udtVerBuffer, lVerPointer, Len(udtVerBuffer)

    With udtVerBuffer
        getFileVersion = .dwFileVersionMSh & "." & .dwFileVersionMSl & "." & .dwFileVersionLSh & "." & .dwFileVersionLSl
    End With

End Function



' InQuest injected base64 decoded content
' *+x*&
' *+x*&

INQUEST-PP=macro
