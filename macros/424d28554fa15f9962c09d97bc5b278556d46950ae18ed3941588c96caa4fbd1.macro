Attribute VB_Name = "Blad11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Blad12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Blad3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Module1"

'
' Handly Macro
' 23/03/00 by Ivan Golubev
'
'
Sub Handly()
    Application.ScreenUpdating = False
    I = ActiveCell.Row
    ActiveCell.Offset(3, 0).Rows("1:1").EntireRow.Select
    Selection.Insert Shift:=xlDown
    ActiveCell.Offset(-3, 0).Range("A1").Select
    Selection.AutoFill Destination:=ActiveCell.Range("A1:A2"), Type:= _
        xlFillDefault
    ActiveCell.Range("A1:A2").Select
    ActiveCell.Select
    Selection.Copy
    ActiveCell.Offset(-I + 6, 0).Range("A1").Select
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
    Application.CutCopyMode = False
    Application.Run Macro:=Range("get_data")
    Sheets("Trend").Select
    Rows("6").Select
        Selection.Copy
    Rows(I).Select
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
    Cells(I + 1, 1).Select
    Sheets("trend").Select
    Application.ScreenUpdating = True

End Sub

Attribute VB_Name = "Module2"
Sub consecutive()
Attribute consecutive.VB_Description = "De macro is opgenomen op 23/03/00 door PEN_ROUSSEAU."
Attribute consecutive.VB_ProcData.VB_Invoke_Func = " \n14"
'
' ONE_MONTH Macro
' De macro is opgenomen op 23/03/00 door PEN_ROUSSEAU.
'

'
    Irec = 1
    Do
        Application.Run "Handly"
        Irec = Irec + 1
    Loop Until (Irec = 3)
End Sub


'
' drawcoldSteam by Sebastien Rousseau
'
' cuts the composite_data into segments in order to determine the slopes of cold composite curve
'
Sub drawcoldSteam()
        
    
    Dim NcoldData As Integer
    Dim I As Integer
    
    
    Sheets.Add
    ActiveSheet.Name = "cold_interSteam"

    ' Number of rows in Cold_composite_Data_steam sheet
    Sheets("Cold_composite_Data_steam").Select
    Range("D4").Select
    Selection.End(xlDown).Select
    NcoldData = Selection.Row
    
    'paste temperatures
    Sheets("cold_interSteam").Select
    For I = 4 To NcoldData Step 1
        Cells(I - 3, 1) = Sheets("Cold_composite_Data_steam").Cells(I, 3)
        Cells(I + NcoldData - 6, 1) = Sheets("Cold_composite_Data_steam").Cells(I, 4)
    Next I
    
    'sorts temperatures
    Range(Cells(1, 1), Cells(2 * NcoldData - 6, 1)).Select
        Selection.Sort Key1:=Cells(1, 1), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom

    'deletes temperatures twice written
    Range("A1").Select
    For I = 2 To 2 * NcoldData - 6 Step 1
        If Cells(I, 1).Value = Cells(I - 1, 1).Value Then
        Cells(I, 1).Delete
        End If
    Next I
    
    'determines the new number of cells in cold_interSteam worksheet (segments)
    Range("A1").Select
        Selection.End(xlDown).Select
        ncoldinter = Selection.Row

    lastline = 37
    
        Cells(1, 6) = Cells(1, 1)
        Cells(1, 5).Value = Sheets("Heat recovery steam").Cells(lastline + 3, 8)
        'lastline refers to the last of the first data sheet (Heat recovery steam:name to be changed)
        
        
    'duplicates temperatures to show segmentation
    For I = 1 To ncoldinter - 1
        Cells(I, 2).Value = Cells(I + 1, 1).Value
        Cells(I, 3).Value = 0.5 * (Cells(I, 1).Value + Cells(I, 2).Value)
        ' intermediate temperature to determine which intervals (which Cps) have to be considered
        '
        'Determination of Cp and Duty
        aux = 0
        
        For k = 4 To NcoldData
        If (Cells(I, 3).Value < Sheets("Cold_composite_Data_steam").Cells(k, 4).Value) And (Cells(I, 3).Value > Sheets("Cold_composite_Data_steam").Cells(k, 3).Value) Then
        epsilon = 1
        Else
        epsilon = 0
        End If
        aux = aux + epsilon * Sheets("Cold_composite_Data_steam").Cells(k, 7).Value
        Next k
        Cp = aux
        Cells(I, 4) = Cp
    Next I
      
      For I = 2 To ncoldinter
      Cells(I, 5) = Cells(I - 1, 5) + 0.001 * Cells(I - 1, 4) * (Cells(I - 1, 2) - Cells(I - 1, 1))
      Cells(I, 6) = Cells(I, 1)
      Next I
      
End Sub

'
' drawhotSteam by Sebastien Rousseau
'
' cuts the composite_data into segments in order to determine the slopes of hot composite curve
'
Sub drawhotSteam()
'    type nhotdata As Integer
 '   i As Integer
  '  End Type
    
    Sheets.Add
    ActiveSheet.Name = "hot_interSteam"

    ' Number of rows in Hot_composite_Data_steam sheet
    Sheets("Hot_composite_Data_steam").Select
    Range("D4").Select
    Selection.End(xlDown).Select
    nhotdata = Selection.Row
    
    'paste temperatures
    Sheets("hot_interSteam").Select
    For I = 4 To nhotdata Step 1
        Cells(I - 3, 1) = Sheets("Hot_composite_Data_steam").Cells(I, 3)
        Cells(I + nhotdata - 6, 1) = Sheets("Hot_composite_Data_steam").Cells(I, 4)
    Next I
    
    'sorts temperatures
    Range(Cells(1, 1), Cells(2 * nhotdata - 6, 1)).Select
        Selection.Sort Key1:=Cells(1, 1), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom

    'deletes temperatures twice written
    Range("A1").Select
    For I = 2 To 2 * nhotdata - 6 Step 1
        If Cells(I, 1).Value = Cells(I - 1, 1).Value Then
        Cells(I, 1).Delete
        End If
    Next I
    
    'determines the new number of cells in col_inter worksheet (segments)
    Range("A1").Select
        Selection.End(xlDown).Select
        nhotinter = Selection.Row

    lastline = 37
        Cells(1, 6) = Cells(1, 1)
        Cells(1, 5).Value = 0
        'lastline refers to the last of the first data sheet (Heat recovery steam:name to be changed)
        
        
    'duplicates temperatures to show segmentation
    For I = 1 To nhotinter - 1
        Cells(I, 2).Value = Cells(I + 1, 1).Value
        Cells(I, 3).Value = 0.5 * (Cells(I, 1).Value + Cells(I, 2).Value)
        ' intermediate temperature to determine which intervals (which Cps) have to be considered
        '
        'Determination of Cp and Duty
        aux = 0
        
        For k = 4 To nhotdata
        If (Cells(I, 3).Value > Sheets("Hot_composite_Data_steam").Cells(k, 4).Value) And (Cells(I, 3).Value < Sheets("Hot_composite_Data_steam").Cells(k, 3).Value) Then
        epsilon = 1
        Else
        epsilon = 0
        End If
        aux = aux + epsilon * Sheets("Hot_composite_Data_steam").Cells(k, 7).Value
        Next k
        Cp = aux
        Cells(I, 4) = Cp
    Next I
      
      For I = 2 To nhotinter
      Cells(I, 5) = Cells(I - 1, 5) + 0.001 * Cells(I - 1, 4) * (Cells(I - 1, 2) - Cells(I - 1, 1))
      Cells(I, 6) = Cells(I, 1)
      Next I
      
End Sub

'
'   The same temperatures have to be plotted in Hot and Cold Composite curves Steam (For DTmin)
'
'   drawcoldSteam AND drawhotSteam must have been run before
'

    
       


Sub compocurve_interSteam()
    Sheets("Heat recovery Steam").Select

Application.Run "drawcoldsteam"
Application.Run "drawhotsteam"


Sheets("cold_interSteam").Select

    ncoldinter = lastlijn(1)

Sheets("hot_interSteam").Select
    
    nhotinter = lastlijn(1)
    ntot = ncoldinter + nhotinter
  
    Sheets.Add
    ActiveSheet.Name = "compocurve_interSteam"
    ' columns 1 and 2 for the cold curve; columns 3 and 4 for the hot curve
    '
    Range("A1").Select
    For I = 1 To ncoldinter
        Cells(I, 2) = Sheets("cold_interSteam").Cells(I, 1)
        Cells(I, 1) = Sheets("cold_interSteam").Cells(I, 5)
    Next I
    
    For I = 1 To nhotinter
        Cells(ncoldinter + I, 2) = Sheets("hot_interSteam").Cells(I, 1)
        
    Next I
    
    For I = 1 To nhotinter
        Cells(I, 4) = Sheets("hot_interSteam").Cells(I, 1)
        Cells(I, 3) = Sheets("hot_interSteam").Cells(I, 5)
    Next I
    
    For I = 1 To ncoldinter
        Cells(nhotinter + I, 4) = Sheets("cold_interSteam").Cells(I, 1)
        
    Next I
    
    Range(Cells(1, 1), Cells(ntot, 2)).Select
        Selection.Sort Key1:=Range("B1"), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom

    Range(Cells(1, 3), Cells(ntot, 4)).Select
        Selection.Sort Key1:=Range("D1"), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom
    
    'calculation of the duty for intermediate values of the temperature
    'ncoldfirst and ncoldlast refer to the first and last values of temperatures in cold curve
    'nhotfirst and nhotlast refer to the first and last values of temperatures in hot curve
    
    Range("A1").Select
    I = 0
    Do
    I = I + 1
    Loop Until Trim(Cells(I, 1)) <> ""
'    Loop Until (Cells(I, 1).Value = Empty) = False
    ncoldfirst = I
    
    Range("A1").Select
    I = 0
    Do
    I = I + 1
    Loop Until (Trim(Cells(I, 3)) = "") = False
'    Loop Until (Cells(I, 3).Value = Empty) = False
    nhotfirst = I
    
    Range("A1").Select
    I = ntot + 1
    Do
    I = I - 1
    Loop Until (Cells(I, 1).Value = Empty) = False
    ncoldlast = I
    
    Range("A1").Select
    I = ntot + 1
    Do
    I = I - 1
    Loop Until (Cells(I, 3).Value = Empty) = False
    nhotlast = I
    
    For I = ncoldfirst + 1 To ncoldlast
       If Trim(Cells(I, 1)) = Empty Then
        k = 0
        Do
        k = k + 1
        Loop Until (Cells(I, 2).Value <= Sheets("cold_interSteam").Cells(k, 2)) And (Cells(I, 2).Value >= Sheets("cold_interSteam").Cells(k, 1))
        Cp = Sheets("cold_interSteam").Cells(k, 4)
        Tdown = Cells(I - 1, 2).Value
        Cells(I, 1).Value = Cells(I - 1, 1).Value + Cp / 1000 * (Cells(I, 2) - Tdown)
        End If
    Next I
    
    For I = nhotfirst + 1 To nhotlast
        If Cells(I, 3).Value = Empty Then
        k = 0
        Do
        k = k + 1
        Loop Until (Cells(I, 4).Value <= Sheets("hot_interSteam").Cells(k, 2)) And (Cells(I, 4).Value >= Sheets("hot_interSteam").Cells(k, 1))
        Cp = Sheets("hot_interSteam").Cells(k, 4)
        Tdown = Cells(I - 1, 4).Value
        Cells(I, 3).Value = Cells(I - 1, 3).Value + Cp / 1000 * (Cells(I, 4) - Tdown)
        End If
    Next I

'   In order to draw the two Composite curves Steam on the same sheet, temperatures have to be estimated for the same values of duty

' Cold data:


'nbegin end nend are the extremities of the recovery range
' (where for a given value of the duty, both the cold and hot curves have plots)

    If Cells(nhotfirst, 3) <= Cells(ncoldfirst, 1) Then
    I = nhotfirst - 1
     Do
        I = I + 1
        Loop Until Cells(I, 3).Value >= Cells(ncoldfirst, 1).Value
        nbegin = I
    Else
     I = ncoldfirst - 1
     Do
        I = I + 1
        Loop Until Cells(I, 1).Value >= Cells(nhotfirst, 3).Value
        nbegin = I
    End If
       
    If Cells(ncoldlast, 1) >= Cells(nhotlast, 3) Then
    I = ncoldlast + 1
     Do
        I = I - 1
        Loop Until Cells(I, 1).Value <= Cells(nhotlast, 3).Value
        nend = I
    Else
        I = nhotlast + 1
     Do
        I = I - 1
        Loop Until Cells(I, 3).Value <= Cells(ncoldlast, 1).Value
        nend = I
    End If
    
    'copy duty common values
    For I = 1 To ncoldlast - ncoldfirst + 1
    Cells(I, 5).Value = Cells(I + ncoldfirst - 1, 1)
    Cells(I, 6).Value = Cells(I + ncoldfirst - 1, 2)
    Next I
    
    For I = 1 To nhotlast - nhotfirst + 1
     Cells(I, 7).Value = Cells(I + nhotfirst - 1, 3)
     Cells(I, 8).Value = Cells(I + nhotfirst - 1, 4)
     Next I
    
    If Cells(ncoldlast, 1) >= Cells(nhotlast, 3) Then
        fizz = ncoldlast + nhotlast - ncoldfirst + 2 - nbegin
         For I = ncoldlast - ncoldfirst + 2 To fizz
         Cells(I, 5).Value = Cells(I + nbegin - ncoldlast + ncoldfirst - 2, 3).Value
        Next I
        Else
        For I = ncoldlast - ncoldfirst + 2 To (ncoldlast - ncoldfirst + 3 + ncoldlast - nbegin)
        Cells(I, 5).Value = Cells(I + nbegin - 1 - ncoldlast + ncoldfirst - 2, 3).Value
    ' Not sure of that one
        Next I
    End If
    
    Range(Columns(5), Columns(6)).Select
        Selection.Sort Key1:=Cells(1, 5), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom

        Range("E1").Select
        Selection.End(xlDown).Select
        I = Selection.Row
        co = 0
    Do
        If Trim(Cells(I, 6) = Empty) Then
        I = I - 1
        Else
        co = I
        End If
    Loop Until (co > 0)
        
    For I = 2 To co

'    For I = 2 To ncoldlast - ncoldfirst + 1 + ncoldlast - nbegin
        If Trim(Cells(I, 6)) = "" Then
            k = 0
                Do
                k = k + 1
                Loop Until (Trim(Cells(I + k, 6)) = "") = False
                p = k + I
                r = (Cells(p, 6) - Cells(I - 1, 6)) / (Cells(p, 5) - Cells(I - 1, 5))
                Cells(I, 6).Value = Cells(I - 1, 6) + r * (Cells(I, 5) - Cells(I - 1, 5))
        End If
    Next I
    
                
    If Cells(ncoldfirst, 1) >= Cells(nhotfirst, 3) Then
         For I = nhotlast - nhotfirst + 2 To (nhotlast - nhotfirst + 2 - ncoldfirst + nend)
         Cells(I, 7).Value = Cells(I + nhotfirst - nhotlast + ncoldfirst - 2, 1).Value
        Next I
        Else
        For I = nhotlast - nhotfirst + 2 To (nhotlast - nhotfirst + 3 - nhotlast + nend)
        Cells(I, 7).Value = Cells(I + nend - 1 - nhotlast + nhotfirst - 2, 3).Value
    ' Not sure of that one
        Next I
    End If
    
    Range(Columns(7), Columns(8)).Select
        Selection.Sort Key1:=Cells(1, 7), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom

        Range("G1").Select
        Selection.End(xlDown).Select
        I = Selection.Row
        h0 = 0
      Do
        If Trim(Cells(I, 8) = Empty) Then
        I = I - 1
        Else
        ho = I
        End If
    Loop Until (ho > 0)
        
        
    For I = 2 To ho
   
'    For I = 2 To nhotlast - nhotfirst + 1 - ncoldfirst + nend
        If Trim(Cells(I, 8)) = "" Then
            k = 0
                Do
                k = k + 1
                Loop Until (Trim(Cells(I + k, 8)) = "") = False
                p = k + I
                r = (Cells(p, 8) - Cells(I - 1, 8)) / (Cells(p, 7) - Cells(I - 1, 7))
                Cells(I, 8).Value = Cells(I - 1, 8) + r * (Cells(I, 7) - Cells(I - 1, 7))
        End If
    Next I
        
' All the values of the duty for the cold curve
'        Range("E1").Select
'        Selection.End(xlDown).Select
'        co = Selection.Row
        
'        Range("G1").Select
'        Selection.End(xlDown).Select
'        ho = Selection.Row

        toto = co + ho
        
        For I = co + 1 To toto
            Cells(I, 5) = Cells(I - co, 7)
        Next I
        
        For I = ho + 1 To toto
            Cells(I, 7) = Cells(I - ho, 5)
        Next I
        

    Range(Columns(5), Columns(6)).Select
        Selection.Sort Key1:=Cells(1, 5), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom
    Range(Columns(7), Columns(8)).Select
        Selection.Sort Key1:=Cells(1, 7), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom
        
        Range("E1").Select
        Selection.End(xlDown).Select
        I = Selection.Row
        co2 = 0
        
    Do
        If Trim(Cells(I, 6) = Empty) Then
        I = I - 1
        Else
        co2 = I
        End If
    Loop Until (co2 > 0)
    
   I = 1
   Range("E1").Select
        If (Trim(Cells(I, 6)) = Empty) = False Then
            coInit = 1
            Else
            Do
            I = I + 1
            Loop Until (Trim(Cells(I, 6)) = Empty) = False
            coInit = I
        End If
            
    
    For I = coInit To co2

'    For I = 2 To ncoldlast - ncoldfirst + 1 + ncoldlast - nbegin
        If Trim(Cells(I, 6)) = "" Then
            k = 0
                Do
                k = k + 1
                Loop Until (Trim(Cells(I + k, 6)) = "") = False
                p = k + I
                r = (Cells(p, 6) - Cells(I - 1, 6)) / (Cells(p, 5) - Cells(I - 1, 5))
                Cells(I, 6).Value = Cells(I - 1, 6) + r * (Cells(I, 5) - Cells(I - 1, 5))
        End If
    Next I
    
        Range("G1").Select
        Selection.End(xlDown).Select
        I = Selection.Row
        ho2 = 0
    
     Do
        If Trim(Cells(I, 8) = Empty) Then
        I = I - 1
        Else
        ho2 = I
        End If
    Loop Until (ho2 > 0)
   
    For I = 2 To ho2
   
'    For I = 2 To nhotlast - nhotfirst + 1 - ncoldfirst + nend
        If Trim(Cells(I, 8)) = "" Then
            k = 0
                Do
                k = k + 1
                Loop Until (Trim(Cells(I + k, 8)) = "") = False
                p = k + I
                r = (Cells(p, 8) - Cells(I - 1, 8)) / (Cells(p, 7) - Cells(I - 1, 7))
                Cells(I, 8).Value = Cells(I - 1, 8) + r * (Cells(I, 7) - Cells(I - 1, 7))
        End If
    Next I

    Columns("G:G").Delete

Range("A1").Select
    I = 1
        Do
        If (Trim(Cells(I, 6)) = Empty And Trim(Cells(I, 7)) = Empty) Then
            Rows(I).Delete
        Else
            I = I + 1
        End If
        Loop Until (Trim(Cells(I, 5)) = Empty)
        
'   Determination of DTmin
    
    deltaT = 600    'Initialization
    For I = 1 To toto
        If (Trim(Cells(I, 6)) <> "") And (Trim(Cells(I, 7)) <> "") Then
        DT = Cells(I, 7).Value - Cells(I, 6).Value
            If DT <= deltaT Then
            deltaT = DT
            Idelta = I
            TDTcold = Cells(Idelta, 6)
            TDThot = Cells(Idelta, 7)
            End If
        End If
    Next I

    
    Cells(toto, 1) = deltaT
    Sheets("Heat recovery steam").Select

    Cells(1, 5).Value = deltaT
    Cells(1, 6).Value = Idelta

    Cells(1, 8) = TDTcold

    Cells(1, 10) = TDThot
    
'    For I = 3 To 500
'    If (Cells(I, 4) > TDTcold) And (Cells(I, 3) < TDTcold) Then
'    Cells(1, 11) = Cells(I, 2)
'    Else
'    If (Cells(I, 4) < TDThot) And (Cells(I, 3) > TDThot) Then
'    Cells(1, 12) = Cells(I, 2)
'    End If
'    End If
'   Next I
    
' Chart drawing
    Charts.Add
    ActiveChart.Name = "Composite curves Steam"
    ActiveChart.ChartWizard Source:=Sheets("compocurve_interSteam").Range( _
        "E1:G400"), Gallery:=xlXYScatter, Format:=2, PlotBy:=xlColumns _
        , CategoryLabels:=1, SeriesLabels:=0, HasLegend:=1, Title:= _
        "Composite curves Steam ", CategoryTitle:="Duty Gcal/h", ValueTitle:= _
        "Temperature", ExtraTitle:=""

    ActiveChart.PlotArea.Select
    With Selection.Border
        .ColorIndex = 16
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    Selection.Interior.ColorIndex = xlNone
    ActiveChart.SeriesCollection(2).Select
    With Selection.Border
        .ColorIndex = 3
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = 3
        .MarkerForegroundColorIndex = 3
        .MarkerStyle = xlSquare
        .Smooth = False
    End With
    Sheets("compocurve_interSteam").Select
    Range("A1").Select
    For I = 1 To 400 Step 1
        If (Cells(I, 6) = 0) And (Cells(I, 7) = 0) Then
        Range(Cells(I, 5), Cells(I, 7)).Select
        Selection.Delete Shift:=xlUp
        End If
    Next I
    Sheets("Composite curves Steam").Select
    ActiveChart.ChartArea.Select
    ActiveChart.SeriesCollection(1).Select
    With Selection.Border
        .Weight = xlThin
        .LineStyle = xlAutomatic
    End With
    With Selection
        .MarkerBackgroundColorIndex = xlAutomatic
        .MarkerForegroundColorIndex = xlAutomatic
        .MarkerStyle = xlNone
        .Smooth = False
        .MarkerSize = 5
        .Shadow = False
    End With
    ActiveChart.SeriesCollection(2).Select
    With Selection.Border
        .ColorIndex = 3
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = 3
        .MarkerForegroundColorIndex = 3
        .MarkerStyle = xlNone
        .MarkerSize = 5
        .Shadow = False
    End With
    ActiveChart.SeriesCollection(2).Points(99).Select
    With Selection.Border
        .ColorIndex = 3
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = 3
        .MarkerForegroundColorIndex = 3
        .MarkerStyle = xlNone
        .MarkerSize = 5
        .Shadow = False
    End With
    ActiveChart.SeriesCollection(2).Points(45).Select
    ActiveChart.PlotArea.Select
    ActiveChart.SeriesCollection(2).Select
    With Selection.Border
        .ColorIndex = 3
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = 3
        .MarkerForegroundColorIndex = 3
        .MarkerStyle = xlNone
        .Smooth = False
        .MarkerSize = 5
        .Shadow = False
    End With
    ActiveChart.PlotArea.Select
    ActiveChart.SeriesCollection(1).Name = "=""Cold curve"""
    ActiveChart.SeriesCollection(2).Name = "=""Hot curve"""
    
    Sheets(Array("hot_interSteam", "cold_interSteam")).Select
    Sheets("cold_interSteam").Activate
    ActiveWindow.SelectedSheets.Delete

    
End Sub
Attribute VB_Name = "Module3"

'Option Explicit
    Public lastline As Integer
    Public I As Integer

    
    


'
' Drawcold by Sebastien Rousseau
'
' cuts the composite_data into segments in order to determine the slopes of cold composite curve
'
Sub drawcold()
        
    
    Dim NcoldData As Integer
    Dim I As Integer
    
    
    Sheets.Add
    ActiveSheet.Name = "cold_inter"

    ' Number of rows in Cold_composite_Data sheet
    Sheets("Cold_composite_Data").Select
    Range("D4").Select
    Selection.End(xlDown).Select
    NcoldData = Selection.Row
    
    'paste temperatures
    Sheets("cold_inter").Select
    For I = 4 To NcoldData Step 1
        Cells(I - 3, 1) = Sheets("Cold_composite_Data").Cells(I, 3)
        Cells(I + NcoldData - 6, 1) = Sheets("Cold_composite_Data").Cells(I, 4)
    Next I
    
    'sorts temperatures
    Range(Cells(1, 1), Cells(2 * NcoldData - 6, 1)).Select
        Selection.Sort Key1:=Cells(1, 1), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom

    'deletes temperatures twice written
    Range("A1").Select
    For I = 2 To 2 * NcoldData - 6 Step 1
        If Cells(I, 1).Value = Cells(I - 1, 1).Value Then
        Cells(I, 1).Delete
        End If
    Next I
    
    'determines the new number of cells in cold_inter worksheet (segments)
    Range("A1").Select
        Selection.End(xlDown).Select
        ncoldinter = Selection.Row

    lastline = 36
    
        Cells(1, 6) = Cells(1, 1)
        Cells(1, 5).Value = Sheets("Heat recovery").Cells(lastline + 3, 8)
        'lastline refers to the last of the first data sheet (Heat recovery:name to be changed)
        
        
    'duplicates temperatures to show segmentation
    For I = 1 To ncoldinter - 1
        Cells(I, 2).Value = Cells(I + 1, 1).Value
        Cells(I, 3).Value = 0.5 * (Cells(I, 1).Value + Cells(I, 2).Value)
        ' intermediate temperature to determine which intervals (which Cps) have to be considered
        '
        'Determination of Cp and Duty
        aux = 0
        
        For k = 4 To NcoldData
        If (Cells(I, 3).Value < Sheets("Cold_Composite_Data").Cells(k, 4).Value) And (Cells(I, 3).Value > Sheets("Cold_Composite_Data").Cells(k, 3).Value) Then
        epsilon = 1
        Else
        epsilon = 0
        End If
        aux = aux + epsilon * Sheets("Cold_Composite_Data").Cells(k, 7).Value
        Next k
        Cp = aux
        Cells(I, 4) = Cp
    Next I
      
      For I = 2 To ncoldinter
      Cells(I, 5) = Cells(I - 1, 5) + 0.001 * Cells(I - 1, 4) * (Cells(I - 1, 2) - Cells(I - 1, 1))
      Cells(I, 6) = Cells(I, 1)
      Next I
      
End Sub

'
' Drawhot by Sebastien Rousseau
'
' cuts the composite_data into segments in order to determine the slopes of hot composite curve
'
Sub drawhot()
'    type nhotdata As Integer
 '   i As Integer
  '  End Type
    
    Sheets.Add
    ActiveSheet.Name = "hot_inter"

    ' Number of rows in hot_composite_Data sheet
    Sheets("hot_composite_Data").Select
    Range("D4").Select
    Selection.End(xlDown).Select
    nhotdata = Selection.Row
    
    'paste temperatures
    Sheets("hot_inter").Select
    For I = 4 To nhotdata Step 1
        Cells(I - 3, 1) = Sheets("hot_composite_Data").Cells(I, 3)
        Cells(I + nhotdata - 6, 1) = Sheets("hot_composite_Data").Cells(I, 4)
    Next I
    
    'sorts temperatures
    Range(Cells(1, 1), Cells(2 * nhotdata - 6, 1)).Select
        Selection.Sort Key1:=Cells(1, 1), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom

    'deletes temperatures twice written
    Range("A1").Select
    For I = 2 To 2 * nhotdata - 6 Step 1
        If Cells(I, 1).Value = Cells(I - 1, 1).Value Then
        Cells(I, 1).Delete
        End If
    Next I
    
    'determines the new number of cells in col_inter worksheet (segments)
    Range("A1").Select
        Selection.End(xlDown).Select
        nhotinter = Selection.Row

    lastline = 36
        Cells(1, 6) = Cells(1, 1)
        Cells(1, 5).Value = 0
        'lastline refers to the last of the first data sheet (Heat recovery:name to be changed)
        
        
    'duplicates temperatures to show segmentation
    For I = 1 To nhotinter - 1
        Cells(I, 2).Value = Cells(I + 1, 1).Value
        Cells(I, 3).Value = 0.5 * (Cells(I, 1).Value + Cells(I, 2).Value)
        ' intermediate temperature to determine which intervals (which Cps) have to be considered
        '
        'Determination of Cp and Duty
        aux = 0
        
        For k = 4 To nhotdata
        If (Cells(I, 3).Value > Sheets("hot_Composite_Data").Cells(k, 4).Value) And (Cells(I, 3).Value < Sheets("hot_Composite_Data").Cells(k, 3).Value) Then
        epsilon = 1
        Else
        epsilon = 0
        End If
        aux = aux + epsilon * Sheets("hot_Composite_Data").Cells(k, 7).Value
        Next k
        Cp = aux
        Cells(I, 4) = Cp
    Next I
      
      For I = 2 To nhotinter
      Cells(I, 5) = Cells(I - 1, 5) + 0.001 * Cells(I - 1, 4) * (Cells(I - 1, 2) - Cells(I - 1, 1))
      Cells(I, 6) = Cells(I, 1)
      Next I
      
End Sub

Function lastlijn(q) As Integer

Range("A1").Select
Cells(1, q).Select
    Selection.End(xlDown).Select
    lastlijn = Selection.Row


End Function



'
'   The same temperatures have to be plotted in Hot and Cold composite curves (For DTmin)
'
'   drawcold AND drawhot must have been run before
'

    
       


Sub compocurve_inter()
    Sheets("Heat recovery").Select

    Application.Run "drawcold"
    Application.Run "drawhot"

Sheets("cold_inter").Select
tutu = lastlijn(1)
    ncoldinter = lastlijn(1)
Sheets("hot_inter").Select
    
    nhotinter = lastlijn(1)
    
    ntot = ncoldinter + nhotinter
  
    Sheets.Add
    ActiveSheet.Name = "composite_inter"
    ' columns 1 and 2 for the cold curve; columns 3 and 4 for the hot curve
    '
    Range("A1").Select
    For I = 1 To ncoldinter
        Cells(I, 2) = Sheets("cold_inter").Cells(I, 1)
        Cells(I, 1) = Sheets("cold_inter").Cells(I, 5)
    Next I
    
    For I = 1 To nhotinter
        Cells(ncoldinter + I, 2) = Sheets("hot_inter").Cells(I, 1)
        
    Next I
    
    For I = 1 To nhotinter
        Cells(I, 4) = Sheets("hot_inter").Cells(I, 1)
        Cells(I, 3) = Sheets("hot_inter").Cells(I, 5)
    Next I
    
    For I = 1 To ncoldinter
        Cells(nhotinter + I, 4) = Sheets("cold_inter").Cells(I, 1)
        
    Next I
    
    Range(Cells(1, 1), Cells(ntot, 2)).Select
        Selection.Sort Key1:=Range("B1"), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom

    Range(Cells(1, 3), Cells(ntot, 4)).Select
        Selection.Sort Key1:=Range("D1"), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom
    
    'calculation of the duty for intermediate values of the temperature
    'ncoldfirst and ncoldlast refer to the first and last values of temperatures in cold curve
    'nhotfirst and nhotlast refer to the first and last values of temperatures in hot curve
    
    Range("A1").Select
    I = 0
    Do
    I = I + 1
    Loop Until Trim(Cells(I, 1)) <> ""
'    Loop Until (Cells(I, 1).Value = Empty) = False
    ncoldfirst = I
    
    Range("A1").Select
    I = 0
    Do
    I = I + 1
    Loop Until (Trim(Cells(I, 3)) = "") = False
'    Loop Until (Cells(I, 3).Value = Empty) = False
    nhotfirst = I
    
    Range("A1").Select
    I = ntot + 1
    Do
    I = I - 1
    Loop Until (Cells(I, 1).Value = Empty) = False
    ncoldlast = I
    
    Range("A1").Select
    I = ntot + 1
    Do
    I = I - 1
    Loop Until (Cells(I, 3).Value = Empty) = False
    nhotlast = I
    
    For I = ncoldfirst + 1 To ncoldlast
       If Trim(Cells(I, 1)) = Empty Then
        k = 0
        Do
        k = k + 1
        Loop Until (Cells(I, 2).Value <= Sheets("cold_inter").Cells(k, 2)) And (Cells(I, 2).Value >= Sheets("cold_inter").Cells(k, 1))
        Cp = Sheets("cold_inter").Cells(k, 4)
        Tdown = Cells(I - 1, 2).Value
        Cells(I, 1).Value = Cells(I - 1, 1).Value + Cp / 1000 * (Cells(I, 2) - Tdown)
        End If
    Next I
    
    For I = nhotfirst + 1 To nhotlast
        If Cells(I, 3).Value = Empty Then
        k = 0
        Do
        k = k + 1
        Loop Until (Cells(I, 4).Value <= Sheets("hot_inter").Cells(k, 2)) And (Cells(I, 4).Value >= Sheets("hot_inter").Cells(k, 1))
        Cp = Sheets("hot_inter").Cells(k, 4)
        Tdown = Cells(I - 1, 4).Value
        Cells(I, 3).Value = Cells(I - 1, 3).Value + Cp / 1000 * (Cells(I, 4) - Tdown)
        End If
    Next I

'   In order to draw the two composite curves on the same sheet, temperatures have to be estimated for the same values of duty

' Cold data:


'nbegin end nend are the extremities of the recovery range
' (where for a given value of the duty, both the cold and hot curves have plots)

    If Cells(nhotfirst, 3) <= Cells(ncoldfirst, 1) Then
    I = nhotfirst - 1
     Do
        I = I + 1
        Loop Until Cells(I, 3).Value >= Cells(ncoldfirst, 1).Value
        nbegin = I
    Else
     I = ncoldfirst - 1
     Do
        I = I + 1
        Loop Until Cells(I, 1).Value >= Cells(nhotfirst, 3).Value
        nbegin = I
    End If
       
    If Cells(ncoldlast, 1) >= Cells(nhotlast, 3) Then
    I = ncoldlast + 1
     Do
        I = I - 1
        Loop Until Cells(I, 1).Value <= Cells(nhotlast, 3).Value
        nend = I
    Else
        I = nhotlast + 1
     Do
        I = I - 1
        Loop Until Cells(I, 3).Value <= Cells(ncoldlast, 1).Value
        nend = I
    End If
    
    'copy duty common values
    For I = 1 To ncoldlast - ncoldfirst + 1
    Cells(I, 5).Value = Cells(I + ncoldfirst - 1, 1)
    Cells(I, 6).Value = Cells(I + ncoldfirst - 1, 2)
    Next I
    
    For I = 1 To nhotlast - nhotfirst + 1
     Cells(I, 7).Value = Cells(I + nhotfirst - 1, 3)
     Cells(I, 8).Value = Cells(I + nhotfirst - 1, 4)
     Next I
    
    If Cells(ncoldlast, 1) >= Cells(nhotlast, 3) Then
        fizz = ncoldlast + nhotlast - ncoldfirst + 2 - nbegin
         For I = ncoldlast - ncoldfirst + 2 To fizz
         Cells(I, 5).Value = Cells(I + nbegin - ncoldlast + ncoldfirst - 2, 3).Value
        Next I
        Else
        For I = ncoldlast - ncoldfirst + 2 To (ncoldlast - ncoldfirst + 3 + ncoldlast - nbegin)
        Cells(I, 5).Value = Cells(I + nbegin - 1 - ncoldlast + ncoldfirst - 2, 3).Value
    ' Not sure of that one
        Next I
    End If
    
    Range(Columns(5), Columns(6)).Select
        Selection.Sort Key1:=Cells(1, 5), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom

        Range("E1").Select
        Selection.End(xlDown).Select
        I = Selection.Row
        co = 0
    Do
        If Trim(Cells(I, 6) = Empty) Then
        I = I - 1
        Else
        co = I
        End If
    Loop Until (co > 0)
        
    For I = 2 To co

'    For I = 2 To ncoldlast - ncoldfirst + 1 + ncoldlast - nbegin
        If Trim(Cells(I, 6)) = "" Then
            k = 0
                Do
                k = k + 1
                Loop Until (Trim(Cells(I + k, 6)) = "") = False
                p = k + I
                r = (Cells(p, 6) - Cells(I - 1, 6)) / (Cells(p, 5) - Cells(I - 1, 5))
                Cells(I, 6).Value = Cells(I - 1, 6) + r * (Cells(I, 5) - Cells(I - 1, 5))
        End If
    Next I
    
                
    If Cells(ncoldfirst, 1) >= Cells(nhotfirst, 3) Then
         For I = nhotlast - nhotfirst + 2 To (nhotlast - nhotfirst + 2 - ncoldfirst + nend)
         Cells(I, 7).Value = Cells(I + nhotfirst - nhotlast + ncoldfirst - 2, 1).Value
        Next I
        Else
        For I = nhotlast - nhotfirst + 2 To (nhotlast - nhotfirst + 3 - nhotlast + nend)
        Cells(I, 7).Value = Cells(I + nend - 1 - nhotlast + nhotfirst - 2, 3).Value
    ' Not sure of that one
        Next I
    End If
    
    Range(Columns(7), Columns(8)).Select
        Selection.Sort Key1:=Cells(1, 7), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom

        Range("G1").Select
        Selection.End(xlDown).Select
        I = Selection.Row
        h0 = 0
      Do
        If Trim(Cells(I, 8) = Empty) Then
        I = I - 1
        Else
        ho = I
        End If
    Loop Until (ho > 0)
        
        
    For I = 2 To ho
   
'    For I = 2 To nhotlast - nhotfirst + 1 - ncoldfirst + nend
        If Trim(Cells(I, 8)) = "" Then
            k = 0
                Do
                k = k + 1
                Loop Until (Trim(Cells(I + k, 8)) = "") = False
                p = k + I
                r = (Cells(p, 8) - Cells(I - 1, 8)) / (Cells(p, 7) - Cells(I - 1, 7))
                Cells(I, 8).Value = Cells(I - 1, 8) + r * (Cells(I, 7) - Cells(I - 1, 7))
        End If
    Next I
        
' All the values of the duty for the cold curve
'        Range("E1").Select
'        Selection.End(xlDown).Select
'        co = Selection.Row
        
'        Range("G1").Select
'        Selection.End(xlDown).Select
'        ho = Selection.Row

        toto = co + ho
        
        For I = co + 1 To toto
            Cells(I, 5) = Cells(I - co, 7)
        Next I
        
        For I = ho + 1 To toto
            Cells(I, 7) = Cells(I - ho, 5)
        Next I
        

    Range(Columns(5), Columns(6)).Select
        Selection.Sort Key1:=Cells(1, 5), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom
    Range(Columns(7), Columns(8)).Select
        Selection.Sort Key1:=Cells(1, 7), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom
        
        Range("E1").Select
        Selection.End(xlDown).Select
        I = Selection.Row
        co2 = 0
        
    Do
        If Trim(Cells(I, 6) = Empty) Then
        I = I - 1
        Else
        co2 = I
        End If
    Loop Until (co2 > 0)
    
   I = 1
   Range("E1").Select
        If (Trim(Cells(I, 6)) = Empty) = False Then
            coInit = 1
            Else
            Do
            I = I + 1
            Loop Until (Trim(Cells(I, 6)) = Empty) = False
            coInit = I
        End If
            
    
    For I = coInit To co2

'    For I = 2 To ncoldlast - ncoldfirst + 1 + ncoldlast - nbegin
        If Trim(Cells(I, 6)) = "" Then
            k = 0
                Do
                k = k + 1
                Loop Until (Trim(Cells(I + k, 6)) = "") = False
                p = k + I
                r = (Cells(p, 6) - Cells(I - 1, 6)) / (Cells(p, 5) - Cells(I - 1, 5))
                Cells(I, 6).Value = Cells(I - 1, 6) + r * (Cells(I, 5) - Cells(I - 1, 5))
        End If
    Next I
    
        Range("G1").Select
        Selection.End(xlDown).Select
        I = Selection.Row
        ho2 = 0
    
     Do
        If Trim(Cells(I, 8) = Empty) Then
        I = I - 1
        Else
        ho2 = I
        End If
    Loop Until (ho2 > 0)
   
    For I = 2 To ho2
   
'    For I = 2 To nhotlast - nhotfirst + 1 - ncoldfirst + nend
        If Trim(Cells(I, 8)) = "" Then
            k = 0
                Do
                k = k + 1
                Loop Until (Trim(Cells(I + k, 8)) = "") = False
                p = k + I
                r = (Cells(p, 8) - Cells(I - 1, 8)) / (Cells(p, 7) - Cells(I - 1, 7))
                Cells(I, 8).Value = Cells(I - 1, 8) + r * (Cells(I, 7) - Cells(I - 1, 7))
        End If
    Next I

    Columns("G:G").Delete

Range("A1").Select
    I = 1
        Do
        If (Trim(Cells(I, 6)) = Empty And Trim(Cells(I, 7)) = Empty) Then
            Rows(I).Delete
        Else
            I = I + 1
        End If
        Loop Until (Trim(Cells(I, 5)) = Empty)
        
'   Determination of DTmin
    
    deltaT = 600    'Initialization
    For I = 1 To toto
        If (Trim(Cells(I, 6)) <> "") And (Trim(Cells(I, 7)) <> "") Then
        DT = Cells(I, 7).Value - Cells(I, 6).Value
            If DT <= deltaT Then
            deltaT = DT
            Idelta = I
            TDTcold = Cells(Idelta, 6)
            TDThot = Cells(Idelta, 7)
            End If
        End If
    Next I

    
    Cells(toto, 1) = deltaT
    Sheets("Heat recovery").Select

    Cells(1, 5).Value = deltaT
    Cells(1, 6).Value = Idelta

    Cells(1, 8) = TDTcold

    Cells(1, 10) = TDThot
    
'    For I = 3 To 500
'    If (Cells(I, 4) > TDTcold) And (Cells(I, 3) < TDTcold) Then
'    Cells(1, 11) = Cells(I, 2)
'    Else
'    If (Cells(I, 4) < TDThot) And (Cells(I, 3) > TDThot) Then
'    Cells(1, 12) = Cells(I, 2)
'    End If
'    End If
'   Next I
    
' Chart drawing
    Charts.Add
    ActiveChart.Name = "Composite curves"
    ActiveChart.ChartWizard Source:=Sheets("composite_inter").Range( _
        "E1:G400"), Gallery:=xlXYScatter, Format:=2, PlotBy:=xlColumns _
        , CategoryLabels:=1, SeriesLabels:=0, HasLegend:=1, Title:= _
        "Composite curves ", CategoryTitle:="Duty Gcal/h", ValueTitle:= _
        "Temperature", ExtraTitle:=""

    ActiveChart.PlotArea.Select
    With Selection.Border
        .ColorIndex = 16
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    Selection.Interior.ColorIndex = xlNone
    ActiveChart.SeriesCollection(2).Select
    With Selection.Border
        .ColorIndex = 3
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = 3
        .MarkerForegroundColorIndex = 3
        .MarkerStyle = xlSquare
        .Smooth = False
    End With
    Sheets("composite_inter").Select
    Range("A1").Select
    For I = 1 To 400 Step 1
        If (Cells(I, 6) = 0) And (Cells(I, 7) = 0) Then
        Range(Cells(I, 5), Cells(I, 7)).Select
        Selection.Delete Shift:=xlUp
        End If
    Next I
    Sheets("Composite curves").Select
    ActiveChart.ChartArea.Select
    ActiveChart.SeriesCollection(1).Select
    With Selection.Border
        .Weight = xlThin
        .LineStyle = xlAutomatic
    End With
    With Selection
        .MarkerBackgroundColorIndex = xlAutomatic
        .MarkerForegroundColorIndex = xlAutomatic
        .MarkerStyle = xlNone
        .Smooth = False
        .MarkerSize = 5
        .Shadow = False
    End With
    ActiveChart.SeriesCollection(2).Select
    With Selection.Border
        .ColorIndex = 3
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = 3
        .MarkerForegroundColorIndex = 3
        .MarkerStyle = xlNone
        .MarkerSize = 5
        .Shadow = False
    End With
    ActiveChart.SeriesCollection(2).Points(99).Select
    With Selection.Border
        .ColorIndex = 3
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = 3
        .MarkerForegroundColorIndex = 3
        .MarkerStyle = xlNone
        .MarkerSize = 5
        .Shadow = False
    End With
    ActiveChart.SeriesCollection(2).Points(45).Select
    ActiveChart.PlotArea.Select
    ActiveChart.SeriesCollection(2).Select
    With Selection.Border
        .ColorIndex = 3
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = 3
        .MarkerForegroundColorIndex = 3
        .MarkerStyle = xlNone
        .Smooth = False
        .MarkerSize = 5
        .Shadow = False
    End With
    ActiveChart.PlotArea.Select
    ActiveChart.SeriesCollection(1).Name = "=""Cold curve"""
    ActiveChart.SeriesCollection(2).Name = "=""Hot curve"""

    Sheets(Array("hot_inter", "cold_inter")).Select
    Sheets("cold_inter").Activate
    ActiveWindow.SelectedSheets.Delete

    
End Sub

Sub Gran_compo()
'
' Gran_compo Macro
' De macro is opgenomen op 3/22/00 door PEN_RESBEUT.
'

'
       
    Sheets.Add
    ActiveSheet.Name = "Gran_Comp"
    Range("A1").Select
    
    Sheets("composite_inter").Select
    Range("G1").Select
    Selection.End(xlDown).Select
    ncomp = Selection.Row
    
    d = 1
    Do While Sheets("composite_inter").Cells(d, 6) = ""
        d = d + 1
    Loop
    
    Sheets("gran_comp").Select
    
    For I = 1 To ncomp
        Sheets("gran_comp").Cells(I, 1) = Sheets("composite_inter").Cells(I, 5)
        Sheets("gran_comp").Cells(I, 4) = Sheets("composite_inter").Cells(I, 5)
        Cells(I, 3) = Sheets("composite_inter").Cells(I, 7) - Sheets("Heat recovery Steam").Cells(1, 5) / 2
    Next I
    For I = d To ncomp
        Cells(I, 2) = Sheets("composite_inter").Cells(I, 6) + Sheets("Heat recovery Steam").Cells(1, 5) / 2
    Next I
    
    Range("B1").Select
    ActiveWindow.LargeScroll Down:=-1
    
    dd = ncomp + 1 - d
    
'   Calcul of duty for the cold stream with the temperatures of the hot stream

    j = 1
    
    For I = d To ncomp
        
        Do While Cells(I, 2) > Cells(j, 3)
            j = j + 1
        Loop
        
        Cells(dd + I, 4) = Cells(j - 1, 1) + (Cells(I, 2) - Cells(j - 1, 3)) * _
        (Cells(j, 1) - Cells(j - 1, 1)) / (Cells(j, 3) - Cells(j - 1, 3))
        Cells(dd + I, 3) = Cells(I, 2)
    Next I
    
'   Calcul of duty for the hot stream with the temperatures of the cold stream
    
    k = 1
    Do While Cells(k, 3) < Cells(d, 2)
        Cells(ncomp + k, 1) = Cells(d, 1)
        Cells(ncomp + k, 2) = Cells(k, 3)
        k = k + 1
    Loop
    
    kk = ncomp
    j = d
 
    For I = k To ncomp
       If Cells(I, 3) > Cells(ncomp, 2) Then
       GoTo arrangement
       End If
        Do While Cells(I, 3) > Cells(j, 2)
            j = j + 1
        Loop
        
        Cells(kk + I, 1) = Cells(j - 1, 1) + (Cells(I, 3) - Cells(j - 1, 2)) * _
        (Cells(j, 1) - Cells(j - 1, 1)) / (Cells(j, 2) - Cells(j - 1, 2))
        Cells(kk + I, 2) = Cells(I, 3)
    Next I
    
arrangement:

    For II = I To ncomp
        Cells(kk + II, 2) = Cells(II, 3)
        Cells(kk + II, 1) = Cells(ncomp, 1)
    Next II
  
  
   ncomp2 = 2 * ncomp
    
    Range(Cells(1, 1), Cells(ncomp2, 2)).Select
        Selection.Sort Key1:=Range("B1"), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom

    Range(Cells(1, 3), Cells(ncomp2, 4)).Select
        Selection.Sort Key1:=Range("D1"), Order1:=xlAscending, Header:= _
        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:= _
        xlTopToBottom
        
  '  I = 1
  '  Do While Cells(I, 3) <> Cells(1, 2)
  '      Cells(I, 3) = ""
  '      I = I + 1
  '  Loop
    

    
    Range("B1").Select
    Selection.End(xlDown).Select
    nn = Selection.Row
    
    Range(Cells(nn + 1, 1), Cells(ncomp2, 4)) = ""
    
    For I = 1 To nn
        Cells(I, 5).Value = Cells(I, 1).Value - Cells(I, 4).Value
    Next I
        
    Range(Cells(1, 1), Cells(nn + 1, 1)).Select
    Selection.Font.ColorIndex = 3
    Range(Cells(1, 4), Cells(nn + 1, 4)).Select
    Selection.Font.ColorIndex = 3
    Range(Cells(1, 5), Cells(nn + 1, 5)).Select
    Selection.Font.ColorIndex = 49
    ActiveWindow.Zoom = 85
    
    ' Draw the curve
    
      Range(Cells(1, 3), Cells(nn, 3)).Select
    Selection.Copy
    ActiveWindow.LargeScroll Down:=-2
    Range("F1").Select
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Range("G1").Select
    Application.CutCopyMode = False
    ActiveCell.FormulaR1C1 = ""
    Range(Cells(1, 5), Cells(nn, 6)).Select
    Charts.Add
    ActiveChart.ChartType = xlXYScatterLinesNoMarkers

    ActiveChart.SetSourceData Source:=Sheets("Gran_Comp").Range("E1:F1500"), _
        PlotBy:=xlColumns
    ActiveChart.Location Where:=xlLocationAsNewSheet, Name:="Gran_Comp_Curve"
    With ActiveChart
        .HasTitle = True
        .ChartTitle.Characters.Text = "Grand Composite Curve"
        .Axes(xlCategory, xlPrimary).HasTitle = True
        .Axes(xlCategory, xlPrimary).AxisTitle.Characters.Text = "GCal/Hr"
        .Axes(xlValue, xlPrimary).HasTitle = True
        .Axes(xlValue, xlPrimary).AxisTitle.Characters.Text = "Temperature"
    End With
    ActiveChart.HasLegend = False
    ActiveChart.PlotArea.Select
    With Selection.Border
        .ColorIndex = 16
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    Selection.Interior.ColorIndex = xlNone
    
    Sheets("gran_comp").Select
    Range("A1").Select
  
End Sub



Attribute VB_Name = "Module4"
Sub Macro2()
Attribute Macro2.VB_Description = "De macro is opgenomen op 27/01/03 door PEN_ROUSSEAU."
Attribute Macro2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro2 Macro
' De macro is opgenomen op 27/01/03 door PEN_ROUSSEAU.
'

'
    ActiveCell.FormulaR1C1 = "=R[13]C"
    Range("J5").Select
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' ZrH+

INQUEST-PP=macro
