Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Fact_13"
Option Explicit
Sub Clear_11()
   Range("u8").Select
    ActiveCell.FormulaR1C1 = "0%"
    Range("u8").Select
    Selection.Copy
    Range("u8:v8").Select
    Range(Selection, Selection.End(xlDown)).Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Range("aa1").Select
    MsgBox "Ready", 64, "Ready to Optimize!"
End Sub

Sub ComputeEfficientFrontier_11()
' Needs Tools|References to include solver.xla
    
    Dim i As Integer
    
    Application.Calculation = xlManual    ' turn off automatic recalc
'   Application.ScreenUpdating = False    ' turn off screen update for speed
    
    'optimize each row separately
    For i = 8 To 18
        SolveRow_16 (i)
    Next i
    
    Application.Calculation = xlAutomatic ' turn on automatic recalc
    Calculate                             ' recalc the whole workbook
    MsgBox "Ready", 64, "Efficient Frontier completed!"
End Sub

Sub SolveRow_16(row As Integer)
  
    ' set Solver in defined state
    SolverReset
    
    ' add a constraint
    SolverAdd CellRef:="$x$" & row, Relation:=2, FormulaText:="$t$" & row
    SolverAdd CellRef:="$w$" & row, Relation:=3, FormulaText:="0"
    ' set some options for Solver
    SolverOptions MaxTime:=20, Iterations:=10000, Precision:=0.000001, AssumeLinear _
        :=False, StepThru:=False, Estimates:=1, Derivatives:=1, SearchOption:=1, _
        IntTolerance:=0.01, Scaling:=True, Convergence:=0.000001, AssumeNonNeg:=True
    
    ' define minimization problem
    SolverOk SetCell:=Cells(row, 25), MaxMinVal:=2, ByChange:="$u$" & row & ":$v$" & row
    
    ' run the Solver
    SolverSolve userfinish:=True
    

End Sub
Attribute VB_Name = "Fact_14"
Option Explicit
Sub Clear_12()
    Range("w37").Select
    ActiveCell.FormulaR1C1 = "0%"
    Range("w37").Select
    Selection.Copy
    Range("w37:x47").Select
    Range(Selection, Selection.End(xlDown)).Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Range("v1").Select
    MsgBox "Ready", 64, "Ready to Optimize!"
End Sub

Sub ComputeEfficientFrontier_12()
' Needs Tools|References to include solver.xla
    
    Dim i As Integer
    
    Application.Calculation = xlManual    ' turn off automatic recalc
'   Application.ScreenUpdating = False    ' turn off screen update for speed
    
    'optimize each row separately
    For i = 37 To 47
        SolveRow_17 (i)
    Next i
    
    Application.Calculation = xlAutomatic ' turn on automatic recalc
    Calculate                             ' recalc the whole workbook
    MsgBox "Ready", 64, "Efficient Frontier completed!"
End Sub

Sub SolveRow_17(row As Integer)
  
    ' set Solver in defined state
    SolverReset
    
    ' add a constraint
    SolverAdd CellRef:="$z$" & row, Relation:=2, FormulaText:="$v$" & row
    SolverAdd CellRef:="$y$" & row, Relation:=3, FormulaText:="0"
    ' set some options for Solver
    SolverOptions MaxTime:=20, Iterations:=10000, Precision:=0.000001, AssumeLinear _
        :=False, StepThru:=False, Estimates:=1, Derivatives:=1, SearchOption:=1, _
        IntTolerance:=0.01, Scaling:=True, Convergence:=0.000001, AssumeNonNeg:=True
    
    ' define minimization problem
    SolverOk SetCell:=Cells(row, 27), MaxMinVal:=2, ByChange:="$w$" & row & ":$x$" & row
    
    ' run the Solver
    SolverSolve userfinish:=True
    

End Sub


Attribute VB_Name = "Fact_15"
Option Explicit
Sub Clear_13()
    Range("b110").Select
    ActiveCell.FormulaR1C1 = "0%"
    Range("b110").Select
    Selection.Copy
    Range("b110:h120").Select
    Range(Selection, Selection.End(xlDown)).Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Range("m93").Select
    MsgBox "Ready", 64, "Ready to Optimize!"
End Sub

Sub ComputeEfficientFrontier_13()
' Needs Tools|References to include solver.xla
    
    Dim i As Integer
    
    Application.Calculation = xlManual    ' turn off automatic recalc
'   Application.ScreenUpdating = False    ' turn off screen update for speed
    
    'optimize each row separately
    For i = 110 To 120
        SolveRow_18 (i)
    Next i
    
    Application.Calculation = xlAutomatic ' turn on automatic recalc
    Calculate                             ' recalc the whole workbook
    MsgBox "Ready", 64, "Efficient Frontier completed!"
End Sub

Sub SolveRow_18(row As Integer)
  
    ' set Solver in defined state
    SolverReset
    
    ' add a constraint
    SolverAdd CellRef:="$j$" & row, Relation:=2, FormulaText:="$a$" & row
    SolverAdd CellRef:="$i$" & row, Relation:=3, FormulaText:="0"
    ' set some options for Solver
    SolverOptions MaxTime:=20, Iterations:=10000, Precision:=0.000001, AssumeLinear _
        :=False, StepThru:=False, Estimates:=1, Derivatives:=1, SearchOption:=1, _
        IntTolerance:=0.01, Scaling:=True, Convergence:=0.000001, AssumeNonNeg:=True
    
    ' define minimization problem: cell to optimize, cell(s) to change
    SolverOk SetCell:=Cells(row, 11), MaxMinVal:=2, ByChange:="$b$" & row & ":$h$" & row
    
    ' run the Solver
    SolverSolve userfinish:=True
    

End Sub


Attribute VB_Name = "Formula"
'Prints out formula as text
'taken and modified from Simon Benninga: Financial Modeling ,  3rd ed.
'Oxford University Press, 2008
Function getformula(r As Range) As String
   Application.Volatile
   If r.HasArray Then
   getformula = "<-- " & " {" & r.FormulaLocal & "}"
   Else
   getformula = "<-- " & " " & r.FormulaLocal
   End If
End Function
Attribute VB_Name = "JB_Test"

Function JBTest(ReturnVector, SignificanceLevel)
Attribute JBTest.VB_Description = "Testet auf Normalverteilung"
' Jarque-Bera hypothesis test of normality
' Null Hypothesis: Normal Distribution, Alternative Hypothesis: No Normal Distribution
' Returns Test Result: TRUE for not rejecting Null Hypothesis
'                      FALSE for NO normal distribution
' by Prof. Dr. Thomas Zimmerer

n = WorksheetFunction.Max(ReturnVector.Columns.Count, ReturnVector.Rows.Count)
s = WorksheetFunction.Skew(ReturnVector)
k = WorksheetFunction.Kurt(ReturnVector)

JB = n * ((s ^ 2) / 6 + (k ^ 2) / 24)
pValue = WorksheetFunction.ChiDist(JB, 2)

JBTest = (SignificanceLevel < pValue)

End Function

Function jbpvalue(ReturnVector, SignificanceLevel)
' Jarque-Bera hypothesis test of normality
' Returns p-value, i.e. significance level of test statistic
' by Prof. Dr. Thomas Zimmerer

n = WorksheetFunction.Max(ReturnVector.Columns.Count, ReturnVector.Rows.Count)

s = WorksheetFunction.Skew(ReturnVector)
k = WorksheetFunction.Kurt(ReturnVector)

JB = n * ((s ^ 2) / 6 + (k ^ 2) / 24)
jbpvalue = WorksheetFunction.ChiDist(JB, 2)

End Function
Function jbstat(ReturnVector, SignificanceLevel)
' Jarque-Bera hypothesis test of normality
' Returns test statistic
' by Prof. Dr. Thomas Zimmerer

n = WorksheetFunction.Max(ReturnVector.Columns.Count, ReturnVector.Rows.Count)
s = WorksheetFunction.Skew(ReturnVector)
k = WorksheetFunction.Kurt(ReturnVector)


jbstat = n * ((s ^ 2) / 6 + (k ^ 2) / 24)

End Function




Attribute VB_Name = "Jackson_Staunton"
Option Explicit
Option Base 1
Function PortfolioReturn(retvec, wtsvec)
Attribute PortfolioReturn.VB_Description = "Calculates the portfolio return for any return and weight vector."
Attribute PortfolioReturn.VB_ProcData.VB_Invoke_Func = " \n14"
'   Returns the portfolio return
    If Application.Count(retvec) = Application.Count(wtsvec) Then
        If retvec.Columns.Count <> wtsvec.Columns.Count Then
            wtsvec = Application.Transpose(wtsvec)
        End If
        PortfolioReturn = Application.SumProduct(retvec, wtsvec)
    Else
        PortfolioReturn = -1
    End If
End Function

Function PortfolioVariance(wtsvec, vcvmat)
Attribute PortfolioVariance.VB_Description = "Calculates the portfolio variance for any weight vector and variance covariance matr"
Attribute PortfolioVariance.VB_ProcData.VB_Invoke_Func = " \n14"
'   Returns the portfolio variance
    Dim v0 As Variant, v1 As Variant
    If Application.Count(wtsvec) = vcvmat.Rows.Count Then
        If wtsvec.Columns.Count > wtsvec.Rows.Count Then wtsvec = Application.Transpose(wtsvec)
        v0 = Application.Transpose(wtsvec)
        v1 = Application.MMult(v0, vcvmat)
        PortfolioVariance = Application.SumProduct(v1, v0)
    Else
        PortfolioVariance = -1
    End If
End Function
Function CorrMatrix(retsmat)
Attribute CorrMatrix.VB_Description = "Calculates the correlation matrix for a set of ret"
Attribute CorrMatrix.VB_ProcData.VB_Invoke_Func = " \n14"
'   Returns nxn Correlation Matrix
    Dim i As Integer, j As Integer, k As Integer, nc As Integer, nr As Integer
    Dim r1vec() As Variant, r2vec() As Variant, Cmat() As Variant
    nc = retsmat.Columns.Count
    ReDim Cmat(nc, nc)
    nr = retsmat.Rows.Count
    ReDim r1vec(nr)
    ReDim r2vec(nr)
    For i = 1 To nc
        For k = 1 To nr
            r1vec(k) = retsmat(k, i)
        Next k
            Cmat(i, i) = 1
            For j = i + 1 To nc
                For k = 1 To nr
                    r2vec(k) = retsmat(k, j)
                Next k
                    Cmat(i, j) = Application.Correl(r1vec, r2vec)
                    Cmat(j, i) = Cmat(i, j)
            Next j
    Next i
    CorrMatrix = Cmat
End Function

Function VCVMatrix(retsmat)
Attribute VCVMatrix.VB_Description = "Calculates the variance covariance matrix for a set of return data."
Attribute VCVMatrix.VB_ProcData.VB_Invoke_Func = " \n14"
'   Returns nxn sample Variance-Covariance Matrix
    Dim i As Integer, j As Integer, k As Integer, nc As Integer, nr As Integer
    Dim r1vec() As Variant, r2vec() As Variant, Vmat() As Variant
    nc = retsmat.Columns.Count
    ReDim Vmat(nc, nc)
    nr = retsmat.Rows.Count
    ReDim r1vec(nr)
    ReDim r2vec(nr)
    For i = 1 To nc
        For k = 1 To nr
            r1vec(k) = retsmat(k, i)
        Next k
            Vmat(i, i) = Application.Var(r1vec)
            For j = i + 1 To nc
                For k = 1 To nr
                    r2vec(k) = retsmat(k, j)
                Next k
                    Vmat(i, j) = Application.Covar(r1vec, r2vec) * (nr / (nr - 1))
                    Vmat(j, i) = Vmat(i, j)
            Next j
    Next i
    VCVMatrix = Vmat
End Function
Attribute VB_Name = "Markowitz_Functions"
Function w1_MVP(sig1 As Double, sig2 As Double, corr12 As Double) As Double
Attribute w1_MVP.VB_Description = "Berechnet das Anteilsgewicht von Asset 1 f|fffd|r das Minimum Varianz Portfolio MVP"
Attribute w1_MVP.VB_ProcData.VB_Invoke_Func = " \n14"
'   Minimum Variance Portfolio
'   Returns Weight for Risky Asset 1 when Combined with Risky Asset 2
'   sig1 is smaller than sig2 (Asset 1 is the left lower end of risk return line)
'   by Prof. Dr. Thomas Zimmerer

    If sig1 > sig2 Then
    i = MsgBox("Es muss gelten: Sig2 > Sig1", vbExclamation, "Eingabefehler")
    Else
    End If
    
    cov12 = corr12 * sig1 * sig2
    var1 = sig1 ^ 2
    var2 = sig2 ^ 2
    
    w = (var2 - cov12) / (var1 + var2 - 2 * cov12)
    
    w1_MVP = w

End Function
Function w1_TRP(r1 As Double, r2 As Double, target_r As Double) As Double
Attribute w1_TRP.VB_Description = "Berechnet das Anteilsgewicht von Asset 1 f|fffd|r das Target Return Portfolio TRP bei Vorgabe eines Target Returns"
Attribute w1_TRP.VB_ProcData.VB_Invoke_Func = " \n14"
'   Target Return Portfolio
'   Returns Weight for Risky Asset 1 when Combined with Risky Asset 2
'   r1 is smaller than r2 (Asset 1 is the left lower end of risk return line)
'   by Prof. Dr. Thomas Zimmerer

    If r1 > r2 Then
    i = MsgBox("Es muss gelten: r2 > r1", vbExclamation, "Eingabefehler")
    Else
    End If

    w = (target_r - r2) / (r1 - r2)
    
    w1_TRP = w

End Function

Function w1_TVP(sig1 As Double, sig2 As Double, corr12 As Double, target_vola As Double) As Double
Attribute w1_TVP.VB_Description = "Berechnet das Anteilsgewicht von Asset 1 f|fffd|r das Target Return Portfolio TVP bei Vorgabe einer Target Volatility"
Attribute w1_TVP.VB_ProcData.VB_Invoke_Func = " \n14"
'   Target Volatility Portfolio
'   Returns Weight for Risky Asset 1 when Combined with Risky Asset 2
'   sig1 is smaller than sig2 (Asset 1 is the left lower end of risk return line)
'   by Prof. Dr. Thomas Zimmerer
    
    If sig1 > sig2 Then
    i = MsgBox("Es muss gelten: Sig2 > Sig1", vbExclamation, "Eingabefehler")
    Else
    End If
    
    cov12 = corr12 * sig1 * sig2
    var1 = sig1 ^ 2
    var2 = sig2 ^ 2
    
    a = var1 + var2 - 2 * cov12
    b = 2 * (cov12 - var2)
    c = var2 - target_vola ^ 2
    'implemented version MINUS
    w = (-b - (b ^ 2 - 4 * a * c) ^ 0.5) / (2 * a)
    
    w1_TVP = w

End Function

Function w1_OUP(r1 As Double, r2 As Double, sig1 As Double, sig2 As Double, corr12 As Double, lambda As Double) As Double
Attribute w1_OUP.VB_Description = "Berechnet das Anteilsgewicht von Asset 1 f|fffd|r das Target Return Portfolio OUP bei Vorgabe eines Risikoaversionsparameters"
Attribute w1_OUP.VB_ProcData.VB_Invoke_Func = " \n14"
'   Optimal Utility Portfolio
'   Returns Weight for Risky Asset 1 when Combined with Risky Asset 2
'   r1 is smaller than r2 (Asset 1 is the left lower end of risk return line)
'   by Prof. Dr. Thomas Zimmerer
    
    If sig1 > sig2 Then
    i = MsgBox("Es muss gelten: Sig2 > Sig1", vbExclamation, "Eingabefehler")
    Else
    End If
    
    cov12 = corr12 * sig1 * sig2
    var1 = sig1 ^ 2
    var2 = sig2 ^ 2
    
    a = var1 + var2 - 2 * cov12
    b = 2 * (cov12 - var2)
    
    w = (r1 - r2 - lambda * b) / (2 * lambda * a)
    
    w1_OUP = w

End Function
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "risikofreier_Zins, 1, 0, MSForms, SpinButton"
Attribute VB_Name = "Tabelle12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tobin_Functions"
Function w1_TP(r1, r2, sig1, sig2, corr12, risk_free)
Attribute w1_TP.VB_Description = "Berechnet das Anteilsgewicht von Asset 1 f|fffd|r das Tangentialportfolio TP"
Attribute w1_TP.VB_ProcData.VB_Invoke_Func = " \n14"
'   Tangency Portfolio: is a special case of the Roy Portflio if target_return = risk free rate of return
'   Returns Weight for Risky Asset 1 when Combined with Risky Asset 2
'   r1 is smaller than r2 (Asset 1 is the left lower end of risk return line)
'   by Prof. Dr. Thomas Zimmerer
    
    If sig1 > sig2 Then
    i = MsgBox("Es muss gelten: Sig2 > Sig1", vbExclamation, "Eingabefehler")
    Else
    End If
    
    cov12 = corr12 * sig1 * sig2
    var1 = sig1 ^ 2
    var2 = sig2 ^ 2
    
    a = var1 + var2 - 2 * cov12
    b = (cov12 - var2)
    c = r1 - r2
    d = r2 - risk_free
    
    w = (b * d - c * var2) / (c * b - a * d)
    
    w1_TP = w

End Function

Function a_TRP(target_r As Double, ret_TP As Double, risk_free As Double) As Double
Attribute a_TRP.VB_Description = "Berechnet das Anteilsgewicht des Tangentialportfolios im Mischportfolio TRP"
Attribute a_TRP.VB_ProcData.VB_Invoke_Func = " \n14"
'   Target Return Portfolio: mix portfolio between TP and risk-free asset
'   by Prof. Dr. Thomas Zimmerer
   a_TRP = (target_r - risk_free) / (ret_TP - risk_free)
End Function

Function a_TVP(target_vola As Double, vola_TP As Double) As Double
Attribute a_TVP.VB_Description = "Berechnet das Anteilsgewicht des Tangentialportfolios im Mischportfolio TVP bei Vorgabe einer Target Volatility"
Attribute a_TVP.VB_ProcData.VB_Invoke_Func = " \n14"
'   Target Volatility Portfolio: mix portfolio between TP and risk-free asset
'   by Prof. Dr. Thomas Zimmerer
   a_TVP = target_vola / vola_TP
End Function

Function a_OUP(lambda As Double, ret_TP As Double, vola_TP As Double, risk_free As Double) As Double
Attribute a_OUP.VB_Description = "Berechnet das Anteilsgewicht des Tangentialportfolios im Mischportfolio OUP bei Vorgabe eines Risikoaversionsparameters"
Attribute a_OUP.VB_ProcData.VB_Invoke_Func = " \n14"
'   Optimal Utility Portfolio: mix portfolio between TP and risk-free asset
'   by Prof. Dr. Thomas Zimmerer
   a_OUP = (ret_TP - risk_free) / (2 * lambda * vola_TP ^ 2)
End Function
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{6B6FC546-5FBC-4D1B-A06D-A2D2A4B83A7F}{A3A5FDB2-7652-47D6-8992-E5B79D3EA7DA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "Value_at_Risk"

Function JBTest(ReturnVector, SignificanceLevel)
' Jarque-Bera hypothesis test of normality
' Null Hypothesis: Normal Distribution, Alternative Hypothesis: No Normal Distribution
' Returns Test Result: TRUE for not rejecting Null Hypothesis
'                      FALSE for NO normal distribution
' by Prof. Dr. Thomas Zimmerer

n = WorksheetFunction.Max(ReturnVector.Columns.Count, ReturnVector.Rows.Count)
s = WorksheetFunction.Skew(ReturnVector)
k = WorksheetFunction.Kurt(ReturnVector)

JB = n * ((s ^ 2) / 6 + (k ^ 2) / 24)
pValue = WorksheetFunction.ChiDist(JB, 2)

JBTest = (SignificanceLevel < pValue)

End Function

Function jbpvalue(ReturnVector, SignificanceLevel)
' Jarque-Bera hypothesis test of normality
' Returns p-value, i.e. significance level of test statistic
' by Prof. Dr. Thomas Zimmerer

n = WorksheetFunction.Max(ReturnVector.Columns.Count, ReturnVector.Rows.Count)

s = WorksheetFunction.Skew(ReturnVector)
k = WorksheetFunction.Kurt(ReturnVector)

JB = n * ((s ^ 2) / 6 + (k ^ 2) / 24)
jbpvalue = WorksheetFunction.ChiDist(JB, 2)

End Function
Function jbstat(ReturnVector, SignificanceLevel)
' Jarque-Bera hypothesis test of normality
' Returns test statistic
' by Prof. Dr. Thomas Zimmerer

n = WorksheetFunction.Max(ReturnVector.Columns.Count, ReturnVector.Rows.Count)
s = WorksheetFunction.Skew(ReturnVector)
k = WorksheetFunction.Kurt(ReturnVector)


jbstat = n * ((s ^ 2) / 6 + (k ^ 2) / 24)

End Function






INQUEST-PP=macro
