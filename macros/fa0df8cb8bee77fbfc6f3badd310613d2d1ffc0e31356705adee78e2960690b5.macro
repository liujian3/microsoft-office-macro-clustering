Attribute VB_Name = "AlimTalk"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private params As Dictionary
Private items

Private error_count As Integer           '|fffd||fffd||fffd||fffd| |12b||fffd||fffd||1ae|
Private recipients_count As Integer      '|fffd||fffd||fffd||179||fffd||223| |fffd||fffd|
Private ata_value_data() As String       '|fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private msg_arr() As String              '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||2f8||fffd||fffd||fffd| |fffd||8fed|
Private auth As Authentication           'Authentication |16c||fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private resp As Response                 'Response |16c||fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private Msg As message                   'message |16c||fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private sendObj As mSend                 'send |16c||fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private yellow_ids As Dictionary         'yellow_ids
Private templates As Dictionary          'templates
Private selected_yellow_id As String     'yellow_ids
Private selected_template_code As String 'yellow_ids

'|22d||fffd||9fe1| |fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Sub set_list()
    Dim yellow_id
    Dim yellow_ids_array() As String
    Dim i As Integer
    
    'set yellow_ids and template
    If Not yellow_ids Is Nothing Then
        ReDim yellow_ids_array(yellow_ids.count - 1, 1)
    
        i = 0
        For Each yellow_id In yellow_ids
            yellow_ids_array(i, 0) = yellow_id

            If yellow_ids.Item(yellow_id) = "Y" Then
                Send_form.ComboBox2.value = yellow_id
                Call set_templates(yellow_id, False)
            End If

            i = i + 1
        Next
        
        Send_form.ComboBox2.Clear
        With Send_form.ComboBox2
            .list = yellow_ids_array
        End With
    End If
End Sub

'set templates
Private Sub set_templates(ByVal yellow_id As String, ByVal alert As Boolean)
    Dim i As Integer
    Dim template_names() As String
    
    '|fffd||fffd||fffd||f8||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||678||fffd| alert |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||2f8||fffd||fffd||fffd| |fffd||5b0||173||fffd| |fffd||fffd||fffd||fffd| |fffd||5f3||fffd| |1e5||fffd||fffd| |fffd||fffd||fffd||fffd|
    If templates.Item(yellow_id).count = 0 Then
        '|fffd||2f8||fffd| |fffd||fffd||fffd||fffd|
        If alert = False Then Exit Sub
        
        '|fffd||2f8||fffd| |fffd||fffd||fffd||fffd|
        If MsgBox("|fffd||634||fffd| |fffd||fffd||fffd||3be||fffd||fffd||335||fffd| |fffd||fffd||fffd||f8||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd|." & vbCrLf & "|fffd||fffd||fffd||f8||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||3f7||fffd| |fffd||fffd||fffd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo, "|228||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||6e6e|") = vbYes Then
            ActiveWorkbook.FollowHyperlink "http://www.coolsms.co.kr/AboutAlimTalk"
        End If
        Exit Sub
    End If

    ReDim template_names(templates.Item(yellow_id).count - 1)
    For i = 1 To templates.count
        template_names(i - 1) = templates.Item(yellow_id).Item(i).Item("template_name")
    Next
        
    selected_yellow_id = yellow_id
    
    Send_form.ListBox5.Clear
    With Send_form.ListBox5
        .IntegralHeight = False
        .ColumnHeads = False
        .ColumnCount = templates.Item(yellow_id).count
        .list = template_names
    End With
End Sub

'ata_value |fc||169|
Public Function check_ata_value()
    Dim ValueRange As Range
    Dim ref_name As String
    Dim ata_value_arr, i, row_count, o, cell
    
    ReDim ata_value_data(Send_form.ata_value_count - 1, recipients_count)
    ata_value_arr = Send_form.get_ata_value()
        
    For i = 1 To Send_form.ata_value_count
        ref_name = Send_form.Controls("ref_ata_value_" & i).value
        
        '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||1fe||fffd| |fffd||fffd||fffd||fffd| |fffd||2b4||678||fffd|
        If ref_name = "" Then
            MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||5bc||fffd||fffd||fffd|.", vbCritical
            check_ata_value = False
            Exit Function
        End If
        
        '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||179||fffd||223| |fffd||fffd||fffd||fffd| |fc||169|
        row_count = SendFormHelpers.get_row_count(ref_name)
        If row_count < recipients_count Then
            If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||179||fffd||223||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd|. |fffd||fffd||fffd| |fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo) = vbNo Then
                check_ata_value = False
                Exit Function
            End If
        End If
        
        If row_count > recipients_count Then
            If MsgBox(i & "|fffd||fffd||b0| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||179||fffd||223||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd|. |fffd||fffd||fffd| |fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo) = vbNo Then
                check_ata_value = False
                Exit Function
            End If
        End If
                
        '|fffd||fffd||fffd||179||fffd||223| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||7f2d| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||378||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        o = 0
        
        Set ValueRange = Range(ref_name)
        For Each cell In ValueRange
            '|f3||fffd||fffd| cell|fffd||fffd| |fffd||2b5||fffd||fffd||338||fffd| |fffd||fffd| |fc||169| |fffd||fffd| |fffd||471||fffd|
            If o = 0 Then
                If cell.value = "" Then
                    MsgBox "|fffd||2b5||fffd| |fffd||338||fffd||fffd||fffd| |e3||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
                    check_ata_value = False
                    Exit Function
                End If
                GoTo Continue
            End If
            
            '|fffd||fffd||fffd||179||fffd||223| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f8||fffd| Exit
            If o = recipients_count Then
                Exit For
            End If
            
            '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||5be||fffd||fffd||634||fffd|.
            If cell.value <> "" Then
                ata_value_data(i - 1, o) = cell.value
            Else
                ata_value_data(i - 1, o) = ""
            End If
            
Continue:
            o = o + 1
        Next
    Next
    
    check_ata_value = True
End Function

'|fffd||338||fffd||fffd||fffd||fffd||fffd|
Public Sub preview()
    If Send_form.SenderIdList4.value = "" Then
        MsgBox "|fffd||7fd||fffd||fffd||fffd| |fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
        Exit Sub
    End If
    If Send_form.RefEdit6.value = vbNullString Then
        MsgBox "|fffd||fffd||fffd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
    End If

    If Send_form.TextBox10.value = vbNullString Then
        MsgBox "|fffd||fffd||fffd||f8||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
    End If

    '|fffd||fffd||fffd||179||fffd||223| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    recipients_count = SendFormHelpers.get_row_count(Send_form.RefEdit6.value)
    
    '|fffd||fffd||fffd||fffd| |fc||169|
    If check_ata_value = False Then
        Exit Sub
    End If
    
    'set extension data
    Call set_msg_data
    
    With Send_form.ListBox6
        .Clear
        .list = msg_arr
        .ColumnCount = 4
        .ColumnWidths = "57;99;57;35"
    End With
    
    '|fffd||7f8||fffd||fffd||fffd| |fffd||fffd||fffd||179||fffd||223||fffd||fffd| |fffd||5b4||678||fffd|
    If error_count > 0 Then
        MsgBox error_count & "|fffd||fffd||fffd||fffd| |fffd||7f8||fffd||fffd||fffd| |fffd||fffd||fffd||179||fffd||223||fffd||fffd| |fffd||5bd||fffd||fffd||3f4||fffd|. |fffd||338||fffd||fffd||fffd||fffd||2fe1||fffd||fffd| |22e||fffd||fffd| |fffd||fffd||fffd||5bc||fffd||fffd||fffd|."
    End If
    
    '|fffd||338||fffd||fffd||fffd||fffd||fffd| |fffd||1fc||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||1ae|
    Send_form.Frame20.caption = "|fffd||338||fffd||fffd||fffd||fffd||fffd| (" & recipients_count & "|fffd||fffd|)"
    Send_form.CommandButton20.Enabled = True
End Sub

'add messages |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub set_msg_data()
    Dim row_count, duplicated_count As Long
    Dim i As Integer
    ReDim msg_arr(recipients_count - 2, 4)
    Dim RecipientRange As Range
    Dim cell, num
    Dim recipient_num As String
    Dim checked_numbers As Object
    Dim duplicated_numbers As Object
    Dim duplicated_msg As String
    Dim skip_add_recipients As Boolean
        
    Set duplicated_numbers = CreateObject("Scripting.Dictionary")
    Set checked_numbers = CreateObject("Scripting.Dictionary")
    Set RecipientRange = Range(Send_form.RefEdit6.value)
    
    'get row count
    row_count = SendFormHelpers.get_row_count(Send_form.RefEdit6.value)
    
    i = 0
    recipients_count = 0
    error_count = 0
    duplicated_count = 0
    For Each cell In RecipientRange
        skip_add_recipients = False
        
        '|f9||fffd||fffd||b0| cell|fffd||fffd| |fffd||471||fffd|
        If i = 0 Then
            skip_add_recipients = True
            GoTo ContinueLoop
        End If
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||674||678||fffd||fffd||fffd| Exit
        If row_count = i Then Exit For
        
        recipient_num = cell.value

        '|fffd||fffd||22d||fffd||fffd||223||fffd||fffd| |fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||378||fffd|
        recipient_num = onlyDigits(recipient_num)
        If Mid(recipient_num, 1, 1) = "1" Then
            recipient_num = "0" & recipient_num
        End If
        
        '|fffd||7fa||fffd||fffd||fffd||223||fffd||3fd||fffd| Continue
        If checked_numbers.exists(recipient_num) Then
            If duplicated_numbers.exists(recipient_num) Then
                duplicated_numbers(recipient_num) = duplicated_numbers(recipient_num) + 1
            Else
                duplicated_numbers.Add recipient_num, 1
            End If

            duplicated_count = duplicated_count + 1
            GoTo ContinueLoop
        End If
                
        '|fffd||fffd||fffd||179||fffd||223||fffd||fffd| |fffd||7f8||fffd||fffd||1fe||fffd| |fffd||5b4||678||fffd| error_count |fffd||7f0||fffd|
        If Not is_valid_cellphone(recipient_num) Then error_count = error_count + 1
        
        '|fffd||fffd||223| |fffd||fffd||fffd||fffd|
        checked_numbers.Add recipient_num, i
        recipients_count = recipients_count + 1
        
        
ContinueLoop:
        i = i + 1
    Next
    
    '|fffd||7fa||fffd||fffd||fffd||223| |fffd||2f8||fffd|
    If duplicated_count > 0 Then
        duplicated_msg = "|fffd||1b7||fffd| |fffd||7fa||fffd||fffd||fffd||223| " & duplicated_count & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||1fe||fffd||fffd||fffd||fffd||3f4||fffd|." & vbCrLf
        For Each num In duplicated_numbers
            duplicated_msg = duplicated_msg & "|fffd||fffd||223| : " & num & ", Count : " & duplicated_numbers(num) & vbCrLf
        Next
        MsgBox duplicated_msg
    End If
    
    ReDim msg_arr(recipients_count - 1, 4)
    ReDim REST.recipients_num(recipients_count - 1)
    i = 0
    For Each num In checked_numbers
        REST.recipients_num(i) = num
        
        msg_arr(i, 0) = num '|fffd||fffd||fffd||179||fffd||223|
        msg_arr(i, 1) = get_merge_data(checked_numbers(num)) '|fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        msg_arr(i, 2) = Send_form.SenderIdList4.value '|fffd||7fd||179||fffd||223|
        msg_arr(i, 3) = "ATA" 'Type
        SendFormHelpers.update_progressBar i, recipients_count - 1, 4, "|fffd||63a||fffd||fffd||fffd|..."
        i = i + 1
    Next
    
    SendFormHelpers.update_progressBar 1, 1, 4, "|fffd||63a||fffd||3f7||fffd|"
End Sub

'|fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |121||22f||fffd||3ff||fffd| Return
Private Function get_merge_data(index As Integer)
    Dim template_message, i
    
    template_message = Send_form.TextBox10.value
    For i = 0 To UBound(ata_value_data)
        template_message = SendFormHelpers.replace_word(template_message, ata_value_data(i, index), "#{.*?}")
    Next
    
    get_merge_data = template_message
End Function

'set template content
Public Sub set_template_content()
    Dim list_index As Long
    list_index = Send_form.ListBox5.ListIndex
    
    If selected_yellow_id = "" Then
        MsgBox "|fffd||fffd||fffd||f5||fffd| |fffd||fffd||fffd||3be||fffd||fffd||335||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbExclamation
        Exit Sub
    End If
    
    'set template_code
    selected_template_code = templates.Item(selected_yellow_id).Item(list_index + 1).Item("template_code")
    
    Send_form.ref_ata_value_1.SetFocus
    Send_form.TextBox10.value = templates.Item(selected_yellow_id).Item(list_index + 1).Item("template_content")
    Send_form.CommandButton19.Enabled = True
End Sub

'|fffd||fffd||fffd||fffd||1ae| |fffd||6bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Sub show_content(list_index As Long)
    Dim msgbox_content As String
    msgbox_content = "<""|fffd||fffd||fffd||179||fffd||223|"" : """ & msg_arr(list_index, 0) & """>" & vbCrLf & _
                     "<""|fffd||2f8||fffd||fffd||5cfb||fffd||fffd|"" : """ & msg_arr(list_index, 1) & """>" & vbCrLf & _
                     "<""|fffd||7fd||179||fffd||223|"" : """ & msg_arr(list_index, 2) & """>" & vbCrLf & _
                     "<""|178||fffd||fffd|"" : """ & msg_arr(list_index, 3) & """>" & vbCrLf
    
    MsgBox msgbox_content
End Sub

'|fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Sub send()
    Dim i, balance, j, msg_count, total_charge As Long
    Dim json_string() As String
    Dim result, extension_arr_count As Integer
    Dim group_id, sender_key, template_code As String
    Dim time
    Dim scheduled_msg As String
    
    '|fffd||fffd| |fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 999|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||16d| extension_arr_count |fffd||fffd| |fffd||537||fffd|
    extension_arr_count = Int(UBound(msg_arr) / 999)
    'json_string |fffd||fffd| |fffd||fffd||fffd||fffd| extension_arr_count |fffd||fffd||16d| |fffd||8fed| |fffd||4b4||fffd|
    ReDim json_string(extension_arr_count)
    
    msg_count = UBound(msg_arr) + 1
    scheduled_msg = ""
    
    '|fffd||fffd| |fffd||7bd||fffd||fffd||fffd| json |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - extension |fffd||fffd||fffd||fffd||3f1||2da7||fffd||fffd|
    j = 0
    For i = 0 To UBound(msg_arr)
        If i <> 0 And i Mod 999 = 0 Then
            Debug.Print ("CHECK MSG_ARR INDEX")
            Debug.Print (j)
            Debug.Print (i)
            j = j + 1
        End If
        
        If json_string(j) = "" Then
            json_string(j) = "["
        End If
        
        sender_key = SendFormHelpers.RegKeyRead(cs_SenderKey)
        
        json_string(j) = json_string(j) + "{""to"":" & RestHelpers.ConvertToJSON(msg_arr(i, 0)) & _
                      ", ""text"": " & RestHelpers.ConvertToJSON(msg_arr(i, 1)) & _
                      ", ""from"": " & RestHelpers.ConvertToJSON(msg_arr(i, 2)) & _
                      ", ""type"": " & RestHelpers.ConvertToJSON(msg_arr(i, 3)) & _
                      ", ""sender_key"": " & RestHelpers.ConvertToJSON(sender_key) & _
                      ", ""template_code"": " & RestHelpers.ConvertToJSON(selected_template_code) & "}"

        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3f6||fffd| |f3||fffd||fffd|
        If Send_form.scheduled_message_4 = True Then
            json_string(j) = Left(json_string(j), Len(json_string(j)) - 1)
            json_string(j) = json_string(j) + ", ""datetime"":" & onlyDigits(Send_form.scheduled_date_4) & Send_form.scheduled_hour_4 & Send_form.scheduled_minute_4 & Send_form.scheduled_second_4 & "}"
            scheduled_msg = "|fffd||fffd||fffd||cef||a5| : " & Send_form.scheduled_date_4 & " " & Send_form.scheduled_hour_4 & "|fffd||fffd| " & Send_form.scheduled_minute_4 & "|fffd||fffd| " & Send_form.scheduled_second_4 & "|fffd||fffd|" & vbCrLf
        End If

        json_string(j) = json_string(j) + ","
        total_charge = total_charge + calculate_charge(msg_arr(i, 3))

        SendFormHelpers.update_progressBar i, msg_count, 4, "|fffd||7fc||fffd||fffd||63a||fffd||fffd||fffd|"
        DoEvents
    Next
    
    Exit Sub
    
    '|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||6bf||fffd| |fffd||5b4||fffd| ,(|fffd||7b8||fffd|)|fffd||fffd| "]" |fffd||fffd| |fffd||fffd||fc|
    Dim loc As Long
    For i = 0 To UBound(json_string)
        loc = InStrRev(json_string(i), ",")
        json_string(i) = Left(json_string(i), loc - 1) + "]"
    Next
    
    '|fffd||73e||fffd| |fffd||fffd||fffd||fffd|
    balance = Send_form.getBalance
    
    '|fffd||fffd||fffd||fffd| |fffd||73e||fffd| |fc||169||fffd||3ff||fffd| |fffd||7fc||6f0||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |22e||fffd||fffd|
    If SendFormHelpers.check_avail_balance(balance, total_charge) Then
        '|fffd||7fc||fffd||22e||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||73e||fffd| |fffd||fffd| |fffd||7fc||6f1||77e||fffd| |fffd||fffd||fffd|
        If MsgBox(scheduled_msg & "|fffd||fffd||fffd||fffd| |fffd||73e||fffd||fffd||fffd| " & balance & " |fffd||fffd| |fffd||534||3f4||fffd|." & vbCrLf & _
               "|fffd||fffd||fffd||fffd| |fffd||2f8||fffd||fffd||fffd||fffd||fffd| " & UBound(msg_arr) + 1 & "|fffd||fffd||fffd||534||3f4||fffd|. " & vbCrLf & _
               "|fffd||fffd| |fffd||77e||fffd| : " & total_charge & "|fffd||fffd|" & vbCrLf & _
               "|fffd||7fc||fffd||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|? ", vbYesNo, "|fffd||2f8||fffd||fffd||fffd||7fc||fffd|") = vbYes Then
            SendFormHelpers.reset_progressBar 4
            time = Timer
            
            For i = 0 To extension_arr_count
                SendFormHelpers.update_progressBar i, extension_arr_count, 4, "|fffd||2f8||fffd||fffd||fffd||7fc||fffd||fffd||fffd|..."
                DoEvents
                result = request_send(json_string(i))
            Next
            
            SendFormHelpers.update_progressBar 2, 2, 4, "|fffd||7fc||6ff||3f7||fffd|"
            
            If result Then
                time = Timer - time
                MsgBox "|fffd||fffd| |fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||f0||fffd| : " & time & "|fffd||fffd|" & vbCrLf & "|fffd||fffd||fffd||6ff||3f7||fffd|"
            Else
                MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            End If
        Else
            MsgBox "|fffd||2f8||fffd||fffd||fffd| |fffd||7fc||fffd||fffd||fffd| |fffd||fffd||4b5||1fe||fffd||fffd||fffd||fffd||3f4||fffd|.", vbInformation
        End If
    Else
        '|fffd||73e||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| coolsms |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |22e||fffd||fffd| |fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd|
        MsgBox "|fffd||fffd||fffd||fffd| |fffd||73e||fffd||fffd||fffd| " & balance & "|fffd||534||3f4||fffd|." & vbCrLf & _
               "|fffd||73e||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||574||3f4||fffd|.", vbCritical
        If MsgBox("|fffd||fffd||fffd||fffd||fffd||3f7||fffd| CoolSMS |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||6e6e||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||3f1||fffd|") = vbYes Then
            ActiveWorkbook.FollowHyperlink "http://www.coolsms.co.kr/recharge"
        End If
    End If
    
    SendFormHelpers.reset_progressBar 4
    Send_form.CommandButton20.Enabled = False
    Send_form.ListBox6.Clear
        
    Set resp = Nothing
    Erase msg_arr, ata_value_data
    ReDim merge_word(6)
End Sub

'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||3bc||fffd||fffd||fffd|
Private Function request_send(json_string As String)
    Dim auth As Authentication
    Dim resp As Response
    Dim group_id As String
    Dim result As Integer
    Dim params As Dictionary
        
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set auth = New Authentication
    Set resp = New Response
    Set params = CreateObject("scripting.dictionary")
    
    'group |fffd||fffd||fffd||fffd|
    result = REST.Connect(auth, resp, "new_group")
    If result <> 1 Then
        Exit Function
    End If
    group_id = resp.cs_group_id
    params.Add "group_id", group_id
    params.Add "messages", json_string

    'set params
    REST.set_params params
    
    'add messages
    result = REST.Connect(auth, resp, "add_messages.json")
    If result <> 1 Then
        Exit Function
    End If
    
    params.RemoveAll
    params.Add "group_id", group_id

    'send message
    result = REST.Connect(auth, resp, "group_send")
    If result <> 1 Then
        Exit Function
    End If
    
    request_send = result
End Function

'|fffd||fffd||fffd||3be||fffd||fffd||335||fffd| |fffd||fffd||fffd||fffd||1ae| |fffd||fffd||fffd||fffd|
Public Sub set_alimtalk_yellow_id(yellow_id As String, flag_default As String)
    Set yellow_ids = New Dictionary
    yellow_ids.Add yellow_id, flag_default
End Sub

'|fffd||fffd||fffd||f8||fffd| |fffd||fffd||fffd||fffd||1ae| |fffd||fffd||fffd||fffd|
Public Sub set_alimtalk_templates(yellow_id As String, data As Collection)
    Set templates = New Dictionary
    templates.Add yellow_id, data
End Sub

Attribute VB_Name = "Authentication"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public cs_api_key As String
Public cs_api_secret As String
Public cs_timestamp As String
Public cs_salt As String
Public cs_signature As String
Public cs_encoding As String
Public cs_coolsms_user As String

'Authentication |16c||fffd||fffd||fffd||fffd| constructor
Private Sub Class_Initialize()
    Dim keyword As String
    keyword = REST.cs_isApiKeyApiSecretSaved
    If keyword = vbNullString Then
        CsInitialize
        keyword = REST.cs_isApiKeyApiSecretSaved
    End If
    
    '|fffd||6b5||fffd||fffd||3b1||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fc||169|
    With auth
        If SendFormHelpers.RegKeyRead(keyword) = "True" Then
            cs_api_key = SendFormHelpers.RegKeyRead(cs_ApiKey)
            cs_api_secret = SendFormHelpers.RegKeyRead(cs_ApiSecret)
        Else
            cs_coolsms_user = login_form.txtbox_id.value
            cs_api_secret = MD5(login_form.txtbox_pw.value)
        End If
        cs_encoding = "base64"
        Me.set_signature
    End With
End Sub
'Signature |fffd||fffd||fffd||fffd|
Public Sub set_signature()
    Dim sig_string As String
    'timestamp |fffd||fffd||fffd||fffd|
    cs_timestamp = to_unix_time()
    'salt |fffd||fffd||fffd||fffd| (uniq id)
    cs_salt = create_salt(7)
    'timestamp |fffd||fffd| salt |fffd||fffd||fffd||fffd|
    sig_string = cs_timestamp & cs_salt
    'signature |fffd||fffd||fffd||fffd|
    cs_signature = create_signature(sig_string, cs_api_secret)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| signature |fffd||fffd| + |fffd||fffd| |fffd||fffd||fffd||535||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|.
    '|fffd||5f7||fffd||fffd||1f7||fffd| + |fffd||fffd| |fffd||fffd||fffd||535||fffd| |fffd||fffd||fffd| signature |fffd||67d||fffd| |fffd||fffd||fffd||fffd|
    If Not InStr(cs_signature, "+") = 0 Then
        Me.set_signature
    End If
End Sub

'|fffd||fffd||fffd||fffd| |fffd||f0||fffd| unix |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Function to_unix_time() As Long
    to_unix_time = ((Now - DateSerial(1970, 1, 1)) * 86400) - 32377
End Function

'Salt |fffd||fffd||fffd||fffd|
Public Function create_salt( _
    ByVal Length As Long, _
    Optional charset As String = "abcdefghijklmnopqrstuvwxyz0123456789" _
    ) As String
    Dim chars() As Byte, value() As Byte, chrUprBnd As Long, i As Long
    If Length > 0& Then
        Randomize
        chars = charset
        chrUprBnd = Len(charset) - 1&
        Length = (Length * 2&) - 1&
        ReDim value(Length) As Byte
        For i = 0& To Length Step 2&
            value(i) = chars(CLng(chrUprBnd * Rnd) * 2&)
        Next
    End If
        
    create_salt = value
    
    Randomize
    create_salt = CreateSalt & Round((Rnd * 1000000), 0)
End Function

'Signature |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||575||1f4||fffd| |fffd||53c||fffd|
Public Function create_signature(ByVal sTextToHash As String, ByVal sSecretKey As String) As String

    Dim asc As Object, enc As Object
    Dim TextToHash() As Byte
    Dim SecretKey() As Byte
    Set asc = CreateObject("System.Text.UTF8Encoding")
    Set enc = CreateObject("System.Security.Cryptography.HMACMD5")
    
    TextToHash = asc.Getbytes_4(sTextToHash)
    SecretKey = asc.Getbytes_4(sSecretKey)
    enc.key = SecretKey
    
    Dim bytes() As Byte
    Dim sig As String
    
    bytes = enc.ComputeHash_2((TextToHash))
    create_signature = encode_base64(bytes)
'    Debug.Print "==================Start- CreateSignature=================="
'    Debug.Print "    text : " & sTextToHash
'    Debug.Print "    key : " & sSecretKey
'    Debug.Print "    Signature : " & create_signature
'    Debug.Print "=================END- CreateSignature================"
    
    Set enc = Nothing
    Set asc = Nothing
End Function

'base64 |fffd||fffd||fffd||6b4||fffd|
Private Function encode_base64(ByRef arrData() As Byte) As String
    Dim objXML As MSXML2.DOMDocument
    Dim objNode As MSXML2.IXMLDOMElement
    
    Set objXML = New MSXML2.DOMDocument
    Set objNode = objXML.createElement("b64")
    
    objNode.DataType = "bin.base64"
    objNode.nodeTypedValue = arrData
    encode_base64 = objNode.text

    Set objNode = Nothing
    Set objXML = Nothing
End Function
Attribute VB_Name = "MenuToolBars"
'    Essential Excel Add-In - A collection of different functions.
'    Copyright (C) 2005  S. Towner

'    This program is free software; you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation; either version 2 of the License, or
'    (at your option) any later version.

'    This program is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with this program; if not, write to the Free Software
'    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Option Explicit

Public Function CreateToolBar(ByRef sCommandBarName As String) As CommandBar
    '*****************************************************************************************
    ' Name:      CreateCommandBar.
    ' Purpose:   Creates a command bar (toolbar).
    ' Assumes:   None.
    ' Effects:   Creates a command bar (toolbar).
    ' Inputs:
    '   sCommandBarName:   The name of the command bar to be added.
    ' Returns:   A reference to the command bar.
    '*****************************************************************************************
    
    Dim cbrBar As CommandBar
    
    On Error Resume Next
    ' Return reference to command bar.
    Set cbrBar = Application.CommandBars.Item(sCommandBarName)
    If cbrBar Is Nothing Then
        'Create the command bar
        Set cbrBar = Application.CommandBars.Add(sCommandBarName, MsoBarPosition.msoBarTop, False, Temporary:=False)
        cbrBar.Visible = True
    End If
    
    Set CreateToolBar = cbrBar

End Function

Public Function RemoveToolbar(ByRef sToolbarName As String) As Boolean
    '*****************************************************************************************
    ' Name:      RemoveToolbar.
    ' Purpose:   Removes a toolbar (like Standard, Formatting etc.).
    ' Assumes:   None.
    ' Effects:   Removes a toolbar (like Standard, Formatting etc.).
    ' Inputs:
    '   sToolbarName:   The name of the toolbar to be removed.
    ' Returns:   True if the bar was deleted, false if not.
    '*****************************************************************************************
    
    'Default to bar not being deleted
    RemoveToolbar = False
    
    Dim TempCommandBar As CommandBar
    
    'Determine if selected toolbar exists
    For Each TempCommandBar In Application.CommandBars
        If TempCommandBar.Name = sToolbarName Then
            'Check that there are no controls still on the command bar
            If TempCommandBar.Controls.count = 0 Then
                'Delete the command bar
                Application.CommandBars.Item(sToolbarName).Delete
                'Set that the toolbar was deleted
                RemoveToolbar = True
                'Quit loop
                Exit For
            End If
        End If
    Next TempCommandBar
End Function


Public Function CreateToolBarButton(ByRef sKey As String, ByRef sCaption As String, ByRef sTooltip As String, _
    ByRef sOnAction As String, ByRef cbrCommandBar As CommandBar, _
    Optional ByVal IconOnClipboard As Boolean = False) As CommandBarButton
    '*****************************************************************************************
    ' Name:      CreateCommandBarButton.
    ' Purpose:   Creates a command bar button (toolbar button).
    ' Assumes:   None.
    ' Effects:   Creates a command bar button (toolbar button).
    ' Inputs:
    '   sKey:   The name of the command bar button to be added.
    '   sCaption:   The caption for the button.
    '   sTooltip:   The tooltip for the button.
    '   sOnAction:   The reference to this add-in to capture the user action.
    '   cbrCommandBar:   The command bar to which the button will be added.
    '   IconOnClipboard: Whether there is an icon on the clipboard for the button.
    ' Returns:   A reference to the command bar button.
    '*****************************************************************************************
    
    Dim ctlBtnAddIn As CommandBarButton
    
    Set ctlBtnAddIn = cbrCommandBar.FindControl(Tag:=sKey)
    If ctlBtnAddIn Is Nothing Then
    Set ctlBtnAddIn = cbrCommandBar.Controls.Add(Type:=msoControlButton, Parameter:=sKey, Temporary:=False)
    With ctlBtnAddIn
    .caption = sCaption
    .Tag = sKey
    .TooltipText = sTooltip
    .Style = msoButtonCaption
    If IconOnClipboard Then
        .Style = msoButtonIcon
        .PasteFace
        '.Picture = Icon
        '.Mask = IconMask
        '.Style = msoButtonCaption
        ActiveCell.Copy
        Application.CutCopyMode = False
    End If
    .OnAction = sOnAction
    .Visible = True
    End With
    End If
    
    Set CreateToolBarButton = ctlBtnAddIn

End Function

Public Function RemoveToolBarButton(ByVal sToolbarName As String, ByVal sToolbarButtonCaption As String)
    '*****************************************************************************************
    ' Name:      RemoveToolBarButton.
    ' Purpose:   Removes a toolbar button.
    ' Assumes:   None.
    ' Effects:   Removes a toolbar button.
    ' Inputs:
    '   sToolbarName:   The name of the toolbar that holds the button to be removed.
    '   sToolbarButtonName:   The name of the button to be removed.
    ' Returns:   Nothing.
    '*****************************************************************************************
    
    Dim TempCommandBar As CommandBar
    Dim TempCommandBarControl As CommandBarControl
    
    'Determine if toolbar exists
    For Each TempCommandBar In Application.CommandBars
        If TempCommandBar.Name = sToolbarName Then
            'Go through each button to find the right one
            For Each TempCommandBarControl In TempCommandBar.Controls
                If TempCommandBarControl.caption = sToolbarButtonCaption Then
                    'Remove the button
                    TempCommandBar.Controls.Item(sToolbarButtonCaption).Delete
                    'Quit loop
                    Exit For
                End If
            Next TempCommandBarControl
        End If
    Next TempCommandBar

End Function

Public Function CreateMenu(ByVal sMenuName As String) As CommandBarPopup
    '*****************************************************************************************
    ' Name:      CreateMenu.
    ' Purpose:   Creates a menu group (like File, Edit, View etc.).
    ' Assumes:   None.
    ' Effects:   Creates a menu group (like File, Edit, View etc.).
    ' Inputs:
    '   sMenuName:   The name of the menu group to be added.
    ' Returns:   A reference to the menu group.
    '*****************************************************************************************
    
    Dim cbrMenu As CommandBar
    Dim cbpMenu As CommandBarPopup
    
    On Error Resume Next
    Set cbrMenu = Application.CommandBars("Worksheet Menu Bar")
    Set cbpMenu = cbrMenu.FindControl(Tag:=sMenuName)
    If cbpMenu Is Nothing Then
        Set cbpMenu = cbrMenu.Controls.Add(Type:=msoControlPopup, Parameter:=sMenuName, Temporary:=False)
        cbpMenu.caption = sMenuName
        cbpMenu.Tag = sMenuName
    End If
    
    Set CreateMenu = cbpMenu

End Function

Public Function RemoveMenu(ByVal sMenuName As String) As Boolean
    '*****************************************************************************************
    ' Name:      RemoveMenu.
    ' Purpose:   Removes a menu group (like File, Edit, View etc.).
    ' Assumes:   None.
    ' Effects:   Removes a menu group (like File, Edit, View etc.).
    ' Inputs:
    '   sMenuName:   The name of the menu group to be removed.
    ' Returns:   True if the bar was deleted, false if not.
    '*****************************************************************************************
    
    'Default to bar not being deleted
    RemoveMenu = False
    
    Dim CommandBarControl As CommandBarControl
    
    'Determine if Spreadsheet Compare command bar exists
    For Each CommandBarControl In Application.CommandBars("Worksheet Menu Bar").Controls
        If CommandBarControl.caption = sMenuName Then
            'Check that there are no controls still on the command bar
            If CommandBarControl.Controls.count = 0 Then
                'Delete the command bar
                Application.CommandBars.Item("Worksheet Menu Bar").Controls.Item(sMenuName).Delete
                'Set that the toolbar was deleted
                RemoveMenu = True
                 'Quit loop
                Exit For
            End If
        End If
    Next CommandBarControl
End Function

Public Function CreateMenuItem(ByRef sKey As String, ByRef sCaption As String, ByRef sTooltip As String, _
    ByRef sOnAction As String, ByRef cbpCommandBarPopup As CommandBarPopup) As Office.CommandBarButton
    '*****************************************************************************************
    ' Name:      CreateMenuButton.
    ' Purpose:   Creates a menu button (like Save, Open, Exit etc.).
    ' Assumes:   None.
    ' Effects:   Creates a menu button (like Save, Open, Exit etc.).
    ' Inputs:
    '   sKey:   The name of the menu button to be added.
    '   sCaption:   The caption for the button.
    '   sTooltip:   The tooltip for the button.
    '   sOnAction:   The reference to this add-in to capture the user action.
    '   cbcCommandBar:   The menu command bar control to which the button will be added.
    ' Returns:   A reference to the menu button.
    '*****************************************************************************************
    
    Dim cbrMenu As CommandBar
    Dim ctlMenuAddIn As CommandBarButton
    
    Set ctlMenuAddIn = cbpCommandBarPopup.CommandBar.FindControl(Type:=msoControlButton, Tag:=sKey, Recursive:=True)
    If ctlMenuAddIn Is Nothing Then
        Set ctlMenuAddIn = cbpCommandBarPopup.Controls.Add(Type:=msoControlButton, ID:=1, Temporary:=False)
        With ctlMenuAddIn
            .caption = sCaption
            .Tag = sKey
            .TooltipText = sTooltip
            .Style = msoButtonCaption
            .OnAction = sOnAction
            .Visible = True
        End With
    End If
    
    Set CreateMenuItem = ctlMenuAddIn

End Function

Public Function RemoveMenuItem(ByVal sMenuName As String, ByVal sMenuItemCaption As String)
    '*****************************************************************************************
    ' Name:      RemoveMenuItem.
    ' Purpose:   Removes a menu item.
    ' Assumes:   None.
    ' Effects:   Removes a menu item.
    ' Inputs:
    '   sMenuName:   The name of the menu that holds the item to be removed.
    '   sMenuItemCaption:   The name of the menu to be removed.
    ' Returns:   Nothing.
    '*****************************************************************************************
    
    Dim CommandBarControl As CommandBarControl
    Dim CommandBarControl1 As CommandBarControl
    
    'Determine if toolbar exists
    For Each CommandBarControl In Application.CommandBars("Worksheet Menu Bar").Controls
        If CommandBarControl.caption = sMenuName Then
            'Go through each button to find the right one
            For Each CommandBarControl1 In CommandBarControl.Controls
                If CommandBarControl1.caption = sMenuItemCaption Then
                    'Remove the button
                    CommandBarControl.Controls.Item(sMenuItemCaption).Delete
                    'Quit loop
                    Exit For
                End If
            Next CommandBarControl1
        End If
    Next CommandBarControl

End Function

Public Sub SaveToolbarPosition(ByVal sToolbarName As String, ByVal ProgramName As String)
    '*****************************************************************************************
    ' Name:      SaveToolbarPosition.
    ' Purpose:   Saves the Toolbar Position to the registry.
    ' Assumes:   None.
    ' Effects:   Saves the Toolbar Position to the registry.
    ' Inputs:
    '   sToolbarName:   The toolbar name to be saved.
    '   ProgramName:   The program name for the registry.
    ' Returns:   Nothing.
    '*****************************************************************************************
    
    
    Dim TempCommandBar As CommandBar
    
    'Determine if selected toolbar exists
    For Each TempCommandBar In Application.CommandBars
        If TempCommandBar.Name = sToolbarName Then
            'Save settings to the registry
            SaveSetting ProgramName, "Settings", "Position", CStr(TempCommandBar.position)
            SaveSetting ProgramName, "Settings", "RowIndex", CStr(TempCommandBar.RowIndex)
            SaveSetting ProgramName, "Settings", "Top", CStr(TempCommandBar.Top)
            SaveSetting ProgramName, "Settings", "Left", CStr(TempCommandBar.Left)
        End If
    Next TempCommandBar

End Sub

Public Sub LoadToolbarPosition(ByVal sToolbarName As String, ByVal ProgramName As String)
    '*****************************************************************************************
    ' Name:      LoadToolbarPosition.
    ' Purpose:   Loads the Toolbar Position from the registry.
    ' Assumes:   None.
    ' Effects:   Loads the Toolbar Position from the registry.
    ' Inputs:
    '   sToolbarName:   The toolbar name to be loaded.
    '   ProgramName:   The program name for the registry.
    ' Returns:   Nothing.
    '*****************************************************************************************
    
    Dim TempCommandBar As CommandBar
    
    'Determine if selected toolbar exists
    For Each TempCommandBar In Application.CommandBars
        If TempCommandBar.Name = sToolbarName Then
            'Load form settings from the registry
            TempCommandBar.position = CInt(GetSetting(ProgramName, "Settings", "Position", msoBarFloating))
            TempCommandBar.Top = CInt(GetSetting(ProgramName, "Settings", "Top", "100"))
            TempCommandBar.Left = CInt(GetSetting(ProgramName, "Settings", "Left", "100"))
            TempCommandBar.RowIndex = CInt(GetSetting(ProgramName, "Settings", "RowIndex", "1"))
        End If
    Next TempCommandBar

End Sub




Attribute VB_Name = "Message"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private cs_to As String
Private cs_from As String
Private cs_text As String
Private cs_type As String
Private cs_image As String
Private cs_refname As String
Private cs_country As String
Private cs_datetime As String
Private cs_subject As String
Private cs_charset As String
Private cs_srk As String
Private cs_mode As String
Private cs_extension As String
Private cs_delay As String
Private cs_image_encoding As String
Private cs_scheduled_date As String

'Message Class Constructor
Private Sub Class_Initialize()
    set_type = "SMS"
End Sub

'Receiver number
Public Property Get get_to() As String
get_to = cs_to
End Property

Public Property Let set_to(value As String)
cs_to = value
End Property

'Sender number
Public Property Get get_from() As String
get_from = cs_from
End Property

Public Property Let set_from(value As String)
cs_from = value
End Property

'Message Texts
Public Property Get get_text() As String
get_text = cs_text
End Property

Public Property Let set_text(value As String)
cs_text = value
End Property

'Text Type
Public Property Get get_type() As String
get_type = cs_type
End Property

Public Property Let set_type(value As String)
cs_type = value
End Property

'Text image
Public Property Get get_image() As String
get_image = cs_image
End Property

Public Property Let set_image(value As String)
cs_image = value
End Property

'Reference
Public Property Get get_refname() As String
get_refname = cs_refname
End Property

Public Property Let set_refname(value As String)
cs_refname = value
End Property

'Date info for reserved texts / YYYYMMDDHHMISS format
Public Property Get get_datetime() As String
get_datetime = cs_datetime
End Property

Public Property Let set_datetime(value As String)
cs_datetime = value
End Property

'Country
Public Property Get get_country() As String
get_country = cs_country
End Property

Public Property Let set_country(value As String)
cs_country = value
End Property

'Subject
Public Property Get get_subject() As String
get_subject = cs_subject
End Property

Public Property Let set_subject(value As String)
cs_subject = value
End Property

'Charset
Public Property Get get_charset() As String
get_charset = cs_charset
End Property

Public Property Let set_charset(value As String)
cs_charset = value
End Property

'Mode - 'test'
Public Property Get get_mode() As String
get_mode = cs_mode
End Property

Public Property Let set_mode(value As String)
cs_mode = value
End Property

'SRK - Solution Registration Key
Public Property Get get_srk() As String
get_srk = cs_srk
End Property

Public Property Let set_srk(value As String)
cs_srk = value
End Property

'Extension - JSON format Required
Public Property Get get_extension() As String
get_extension = cs_extension
End Property

Public Property Let set_extension(value As String)
cs_extension = value
End Property

'Delay
Public Property Get get_delay() As String
get_delay = cs_delay
End Property

Public Property Let set_delay(value As String)
cs_delay = value
End Property

'Image_encoding
Public Property Get get_image_encoding() As String
get_image_encoding = cs_image_encoding
End Property

Public Property Let set_image_encoding(value As String)
cs_image_encoding = value
End Property

'scheduled_date
Public Property Get get_scheduled_date() As String
get_scheduled_date = cs_scheduled_date
End Property

Public Property Let set_scheduled_date(value As String)
cs_scheduled_date = value
End Property




Attribute VB_Name = "NormalText"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private recipients_target As String     '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private message_content As String       '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private sender As String                '|fffd||7fd||fffd||fffd||fffd| |fffd||fffd||223|
Private image_path As String            '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private balance As Long                 '|fffd||73e||fffd|
Private total_charge As Long            '|fffd||fffd| |fffd||fffd||fffd||6b1||77e||fffd|
Private msg_count As Long               '|fffd||fffd||fffd||f5||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd|
Private Msg() As message                '|fffd||fffd||fffd||fffd| |fffd||8fed| - |fffd||fffd| |fffd||8fed||fffd||fffd| 1000|fffd||fffd||fffd||fffd| |fffd||4b4||fffd|
Private image                           '|fffd||fffd||fffd||fffd| |fffd||fffd||fc|

'NormalText Class Constructor
Private Sub Class_Initialize()
    recipients_target = Send_form.RefEdit1.value        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    message_content = Send_form.txtbox_msg.value        '|fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    sender = Send_form.SenderIdList1.value              '|fffd||7fd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    balance = Send_form.getBalance                      '|fffd||73e||fffd| |fffd||fffd||fffd||fffd|
    image_path = Send_form.image1_name                  '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Call SendFormHelpers.init
    
    Call send
End Sub

'Send |fffd||7bc||4b5||fffd|
Private Sub send()
    Dim i As Long, result As Integer
    Dim time
    Dim resp As Response
    Dim auth As Authentication
    Dim sendObj As mSend
    Dim scheduled_msg As String
    
    Set auth = New Authentication
    Set resp = New Response
    
    '|fffd||7bd||fffd||fffd||fffd||fffd||fffd| |fffd||2bf||fffd||fffd||fffd| |fffd||fffd| |fffd||2b5||fffd| |fc||169|
    If checkRequiredFields Then
        GoTo gotoEnd
    End If
    
    '|fffd||7fa||fffd||fffd||1fc||fffd| |fc||169|
    If SendFormHelpers.checkDuplicate(recipients_target) Then
        GoTo gotoEnd
    End If
    
    '|fffd||fffd||fffd||f5||fffd| |fffd||7bd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||3f1||fffd|
    msg_count = SendFormHelpers.get_row_count(recipients_target)
    
    '|fffd||fffd||fc| |fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1000|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||16d| |fffd||8fed| |fffd||4b4||fffd|
    ReDim Msg(Int(msg_count / 999))
    
    scheduled_msg = ""
    'msg |fffd||8fed||fffd||fffd| 1000|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||4b4||fffd|
    For i = 0 To UBound(Msg)
        Set Msg(i) = New message
        With Msg(i)
            .set_to = SendFormHelpers.get_recipients_number(recipients_target, i)
            .set_from = sender
            .set_text = message_content
            .set_image = image_path
            .set_image_encoding = "base64"
            .set_type = get_message_type
        End With
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3f6||fffd| |f3||fffd||fffd|
        If Send_form.scheduled_message_1 = True Then
            Msg(i).set_scheduled_date = onlyDigits(Send_form.scheduled_date_1) & Send_form.scheduled_hour_1 & Send_form.scheduled_minute_1 & Send_form.scheduled_second_1
            scheduled_msg = "|fffd||fffd||fffd||cef||a5| : " & Send_form.scheduled_date_1 & " " & Send_form.scheduled_hour_1 & "|fffd||fffd| " & Send_form.scheduled_minute_1 & "|fffd||fffd| " & Send_form.scheduled_second_1 & "|fffd||fffd|" & vbCrLf
        End If
            
        SendFormHelpers.update_progressBar i + 1, UBound(Msg) + 1, 1, "|fffd||7fc||fffd||fffd||63a||fffd||fffd||fffd|..."
        DoEvents
    Next i
    
    '|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||5b4||fffd| |fffd||fffd||fffd||6b0||fffd| |fffd||5b4||fffd||fffd||fffd| |fc||169|
    If SendFormHelpers.total_send_count = 0 Then
        MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||5b4||fffd| |fffd||fffd||fffd||6b0||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
        GoTo gotoEnd
    End If
    
    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    total_charge = SendFormHelpers.calculate_charge(get_message_type()) * SendFormHelpers.total_send_count
    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||77e||5f0||fffd| |fffd||fffd||fffd||fffd| |fffd||73e||fffd| |fffd||fffd||fffd||3ff||fffd| |fffd||7fc||fffd| |fffd||fffd||fffd||fffd| |fc||169||fffd||3f1||fffd|
    If Not SendFormHelpers.check_avail_balance(balance, total_charge) Then
        MsgBox "|fffd||fffd||fffd||fffd| |fffd||73e||fffd||fffd||fffd| " & balance & "|fffd||534||3f4||fffd|." & vbCrLf & _
               "|fffd||73e||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||574||3f4||fffd|.", vbCritical
        If MsgBox("CoolSMS |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||6e6e||fffd||3ff||fffd| |fffd||fffd||fffd||fffd||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||3f1||fffd|") = vbYes Then
            ActiveWorkbook.FollowHyperlink "http://www.coolsms.co.kr/recharge"
        End If
        SendFormHelpers.reset_progressBar (1)
        GoTo gotoEnd
    End If

    '|fffd||7fc||fffd||22e||fffd||fffd|
    If MsgBox(scheduled_msg & "|fffd||fffd||fffd||fffd| |fffd||73e||fffd||fffd||fffd| " & balance & " |fffd||fffd| |fffd||534||3f4||fffd|." & vbCrLf & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b4||fffd| " & (SendFormHelpers.total_send_count) & "|fffd||fffd||fffd||534||3f4||fffd|. " & vbCrLf & "|fffd||fffd| |fffd||77e||fffd| : " & total_charge & "|fffd||fffd|" & vbCrLf & _
                   "|fffd||7fc||fffd||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|? ", vbYesNo, "|fffd||fffd||fffd||6b9||7fc||fffd|") = vbYes Then
        SendFormHelpers.reset_progressBar (1)
        time = Timer
        '|fffd||fffd| msg |fffd||8fed||fffd||fffd| |fffd||fffd||fffd| |fffd||5b4||fffd| |fffd||7bd||fffd||fffd||fffd||fffd||fffd| 1000|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        For i = 0 To UBound(Msg)
            Set sendObj = New mSend
            sendObj.set_message Msg(i)
            result = REST.Connect(auth, resp, sendObj)
            Set auth = Nothing
            Set auth = New Authentication
            SendFormHelpers.update_progressBar i + 1, UBound(Msg) + 1, 1, "|fffd||fffd||fffd||6b9||7fc||fffd||fffd||fffd|..."
            DoEvents
        Next i
        SendFormHelpers.update_progressBar 1, 1, 1, "|fffd||7fc||6ff||3f7||fffd|"
        time = Timer - time
    Else
        MsgBox "|fffd||fffd||fffd||fffd| |fffd||7fc||fffd||fffd||fffd| |fffd||fffd||4b5||1fe||fffd||fffd||fffd||fffd||3f4||fffd|.", vbInformation
        SendFormHelpers.reset_progressBar (1)
        GoTo gotoEnd
    End If

    If result Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||f0||fffd| : " & time & "|fffd||fffd|" & vbCrLf & "|fffd||fffd||fffd||6ff||3f7||fffd|"
    Else
        MsgBox "|fffd||fffd||fffd||6fd||fffd||fffd||fffd|"
    End If
    
gotoEnd:
    Set resp = Nothing
    Set auth = Nothing
    Set sendObj = Nothing
    Erase Msg
End Sub

'|fffd||fffd||fffd||6bf||fffd| |fffd||2bf||fffd||fffd||fffd| |fffd||2b5||fffd| |fc||169| return false if everything is ok, otherwise true
Private Function checkRequiredFields()
    checkRequiredFields = True
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fc||169|
    If recipients_target = vbNullString Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
        Exit Function
    End If
    
    '|fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fc||169|
    If message_content = vbNullString Then
        MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
        Exit Function
    End If
    
    '|fffd||7fd||179||fffd||223| |fc||169|
    If Not Send_form.SenderIdList1.MatchFound Then
        MsgBox "|fffd||7fd||fffd| |fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||2bd||fffd||fffd||3f4||fffd|.", vbCritical
        Exit Function
    End If
    checkRequiredFields = False
End Function

'|fffd||2ebb||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||7bd||fffd||fffd||fffd| |178||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Function get_message_type() As String
    Dim msg_length As Integer
    msg_length = SendFormHelpers.LenMbcs(message_content)
    If Not image_path = vbNullString Then
        get_message_type = "MMS"
    ElseIf msg_length <= 90 Then
        get_message_type = "SMS"
    Else
        get_message_type = "LMS"
    End If
End Function
Attribute VB_Name = "REST"
Option Explicit

Public silence_msgbox As Boolean
Private http_method As String
Private http_field As String
Private MULTIPART_BOUNDARY
Private auth As Authentication
Private resp As Response
Private params As Dictionary

Public recipients_num() As String
Public cs_ApiKey As String
Public cs_ApiSecret As String
Public cs_isApiKeyApiSecretSaved As String
Public cs_isLogin As String
Public cs_SenderKey As String
Public cs_TemplateCode As String

Public Sub CsInitialize()
    'cs_Version = "1.3.1"
    cs_ApiKey = "HKCU\Software\COOLSMS\CSExceller\CS_APIKEY"
    cs_ApiSecret = "HKCU\Software\COOLSMS\CSExceller\CS_APISECRET"
    cs_isApiKeyApiSecretSaved = "HKCU\Software\COOLSMS\CSExceller\isApiKeyApiSecretSaved"
    cs_SenderKey = "HKCU\Software\COOLSMS\CSExceller\CS_SENDERKEY"
    cs_TemplateCode = "HKCU\Software\COOLSMS\CSExceller\CS_TEMPLATECODE"
End Sub

Public Function Connect(auth As Authentication, r As Response, Optional method As Variant) As Integer
    Dim myrequest As Object
    Dim url As String
    Set myrequest = CreateObject("WinHttp.WinHttpRequest.5.1")
    url = REST.create_url(auth, method)
    Debug.Print "URL : " & url
    Set resp = r
    'URL |fffd||fffd||fffd||fffd||fffd||fffd|
    If REST.get_http_method = "GET" Then
        myrequest.Open get_http_method, url & "&" & get_http_field
        myrequest.send
    Else
        myrequest.Open get_http_method, url, False
        myrequest.SetRequestHeader "User-Agent", "Rest API - Excel "
        myrequest.SetRequestHeader "Content-Type", "multipart/form-data; Charset=euckr; boundary=" & MULTIPART_BOUNDARY
        myrequest.SetRequestHeader "Content-Length", Len(get_http_field)
        myrequest.send "" + get_http_field
    End If
    
    process_responseText myrequest
    Connect = check_response
End Function

Public Function create_url(a As Authentication, Optional method As Variant) As String
    Dim method_name, sms_ata_host, ata_host, sms_host As String
    
    sms_host = "https://api.coolsms.co.kr/sms/1.6/"
    sms_ata_host = "https://api.coolsms.co.kr/sms/2/"
    ata_host = "http://14.63.186.175/alimtalk/1/"
    
    method_name = TypeName(method)
    If method_name = "String" Then method_name = method
            
    set_http_method "GET"
    do_authentication a
    
    '|fffd||73e||fffd||fffd||fffd||fffd||fffd|
    If IsMissing(method) Then
        create_url = sms_host & "balance?"
        Exit Function
    End If
        
    '|fffd||fffd||fffd||6b9||7fc||fffd|
    If method_name = "mSend" Then
        create_url = sms_host & "send"
        set_http_method "POST"
        do_authentication a
        send_url method
        Exit Function
    End If
        
    '|fffd||fffd||fffd||6f3||fffd||fffd||fffd|
    If method_name = "mSent" Then
        create_url = sms_host & "sent"
        create_url = sent_url(method, create_url)
        Exit Function
    End If
    
    '|fffd||5f7||fffd||fffd||fffd||fffd|
    If method_name = "new_group" Then
        create_url = sms_ata_host & "new_group"
        create_url = set_get_data(create_url)
        Exit Function
    End If
    
    '|fffd||5f7||cfe1| |fffd||7bd||fffd||fffd||fffd| |fffd||7f0||fffd|
    If method_name = "add_messages.json" Then
        If params.exists("group_id") = False Then
            MsgBox ("group_id is not defind")
            Exit Function
        End If
        create_url = sms_ata_host & "groups/" & params("group_id") & "/add_messages.json"
        set_http_method "POST"
        do_authentication a
        set_post_data
        Exit Function
    End If
    
    '|fffd||5f7||fffd| |fffd||7bd||fffd||fffd||fffd| |fffd||7fc||fffd|
    If method_name = "group_send" Then
        create_url = sms_ata_host & "groups/" & params("group_id") & "/send"
        set_http_method "POST"
        do_authentication a
        set_post_data
        Exit Function
    End If
    
    '|fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||335||fffd| |fffd||fffd||fffd||fffd||1ae|
    If method_name = "ata_list" Then
        create_url = ata_host & "list"
        create_url = set_get_data(create_url)
        Exit Function
    End If
    
    '|fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fffd||f8||fffd| |fffd||fffd||fffd||fffd|
    If method_name = "ata_templates" Then
        If params.exists("yellow_id") = False Then
            MsgBox ("yellow_id is not defind")
            Exit Function
        End If
        
        create_url = ata_host & "templates/" & params("yellow_id")
        create_url = set_get_data(create_url)
        Exit Function
    End If
    
    MsgBox "CreateURL : Invalid method."
    
End Function

'|fffd||fffd||fffd||fffd|
Private Sub do_authentication(auth As Authentication)
    Dim field As String
    Dim data_boundary As String
    
    If get_http_method = "GET" Then
        field = "api_key=" & auth.cs_api_key _
            & "&salt=" & auth.cs_salt _
            & "&timestamp=" & auth.cs_timestamp _
            & "&signature=" & auth.cs_signature
        If Not auth.cs_encoding = "" Then
            field = field & "&encoding=" & auth.cs_encoding
        End If
        If Not auth.cs_coolsms_user = "" Then
            field = field & "&coolsms_user=" & auth.cs_coolsms_user
        End If
    Else
        MULTIPART_BOUNDARY = "--" & auth.cs_salt
        data_boundary = "--" & MULTIPART_BOUNDARY
        
        field = vbCrLf & data_boundary & vbCrLf
        field = field & "Content-Disposition: form-data; name=""api_key""" & vbCrLf & vbCrLf
        field = field & auth.cs_api_key & vbCrLf

        field = field & data_boundary & vbCrLf
        field = field & "Content-Disposition: form-data; name=""salt""" & vbCrLf & vbCrLf
        field = field & auth.cs_salt & vbCrLf

        field = field & data_boundary & vbCrLf
        field = field & "Content-Disposition: form-data; name=""timestamp""" & vbCrLf & vbCrLf
        field = field & auth.cs_timestamp & vbCrLf

        field = field & data_boundary & vbCrLf
        field = field & "Content-Disposition: form-data; name=""signature""" & vbCrLf & vbCrLf
        field = field & auth.cs_signature & vbCrLf

        If Not auth.cs_encoding = "" Then
            field = field & data_boundary & vbCrLf
            field = field & "Content-Disposition: form-data; name=""encoding""" & vbCrLf & vbCrLf
            field = field & auth.cs_encoding & vbCrLf
        End If
        
        If Not auth.cs_coolsms_user = "" Then
            field = field & data_boundary & vbCrLf
            field = field & "Content-Disposition: form-data; name=""coolsms_user""" & vbCrLf & vbCrLf
            field = field & auth.cs_coolsms_user & vbCrLf
        End If
        'field = field & data_boundary & "--" & vbCrLf
    End If
    
set_http_field field
End Sub

'Send |fffd||fffd||fffd||4bd||fffd| |fffd||fffd||fffd||fffd| url |fffd||fffd||fffd||fffd|
Private Sub send_url(s As Variant)
    Dim cs_send As mSend
    Dim Msg As message
    Dim url As String
    Dim data_boundary As String
    
    data_boundary = "--" & MULTIPART_BOUNDARY
    url = get_http_field
    Set cs_send = New mSend
    Set cs_send = s
    Set Msg = New message
    Set Msg = cs_send.get_message
        
    If Not Msg.get_to = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""to""" & vbCrLf & vbCrLf
        url = url & Msg.get_to & vbCrLf
    End If
    
    If Not Msg.get_from = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""from""" & vbCrLf & vbCrLf
        url = url & Msg.get_from & vbCrLf
    End If
    
    If Not Msg.get_text = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""text""" & vbCrLf & vbCrLf
        url = url & Msg.get_text & vbCrLf
    End If
    
    If Not Msg.get_type = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""type""" & vbCrLf & vbCrLf
        url = url & Msg.get_type & vbCrLf
    End If
            
    If Not Msg.get_refname = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""refname""" & vbCrLf & vbCrLf
        url = url & Msg.get_refname & vbCrLf
    End If
    
    If Not Msg.get_country = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""country""" & vbCrLf & vbCrLf
        url = url & Msg.get_country & vbCrLf
    End If
    
    If Not Msg.get_datetime = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""datetime""" & vbCrLf & vbCrLf
        url = url & Msg.get_datetime & vbCrLf
    End If
    
    If Not Msg.get_subject = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""subject""" & vbCrLf & vbCrLf
        url = url & Msg.get_subject & vbCrLf
    End If
    
    If Not Msg.get_image = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""image""; filename=""" & Dir(Msg.get_image) & """" & vbCrLf
        url = url & "Content-Type: image/jpeg" & vbCrLf
        url = url & "Content-Transfer-Encoding: base64" & vbCrLf & vbCrLf
        
        url = url & encode_file(Msg.get_image) & vbCrLf
    End If
    
    If Not Msg.get_image_encoding = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""image_encoding""" & vbCrLf & vbCrLf
        url = url & Msg.get_image_encoding & vbCrLf
    End If
        
    If Not Msg.get_charset = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""charset""" & vbCrLf & vbCrLf
        url = url & Msg.get_charset & vbCrLf
    End If
    
    If Not Msg.get_srk = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""srk""" & vbCrLf & vbCrLf
        url = url & Msg.get_srk & vbCrLf
    End If
    
    If Not Msg.get_mode = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""mode""" & vbCrLf & vbCrLf
        url = url & Msg.get_mode & vbCrLf
    End If
    
    If Not Msg.get_extension = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""extension""" & vbCrLf & vbCrLf
        url = url & Msg.get_extension & vbCrLf
    End If
        
    If Not Msg.get_delay = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""delay""" & vbCrLf & vbCrLf
        url = url & Msg.get_delay & vbCrLf
    End If
    
    If Not Msg.get_scheduled_date = "" Then
        url = url & vbCrLf & data_boundary & vbCrLf
        url = url & "Content-Disposition: form-data; name=""datetime""" & vbCrLf & vbCrLf
        url = url & Msg.get_scheduled_date & vbCrLf
    End If
    
    url = url & post_extra_data(data_boundary)
    
    set_http_field url
End Sub

'Sent |fffd||fffd||fffd||4bd||fffd| |fffd||fffd||fffd||fffd| url |fffd||fffd||fffd||fffd|
Private Function sent_url(s As Variant, url As String)
    Dim cs_sent As mSent
    Set cs_sent = New mSent
    Set cs_sent = s
    url = url & "?" & get_http_field
    
    If Not cs_sent.get_count = "" Then
        url = url & "&count=" & cs_sent.get_count
    End If
    
    If Not cs_sent.get_page = "" Then
        url = url & "&page=" & cs_sent.get_page
    End If
    
    If Not cs_sent.get_rcpt = "" Then
        url = url & "&rcpt=" & cs_sent.get_rcpt
    End If
    
    If Not cs_sent.get_start = "" Then
        url = url & "&start=" & cs_sent.get_start
    End If
    
    If Not cs_sent.get_end = "" Then
        url = url & "&end=" & cs_sent.get_end
    End If
    
    If Not cs_sent.get_status = "" Then
        url = url & "&s_status=" & cs_sent.get_status
    End If
    
    If Not cs_sent.get_resultCode = "" Then
        url = url & "&s_resultcode=" & cs_sent.get_resultCode
    End If
    
    If Not cs_sent.get_mid = "" Then
        url = url & "&mid=" & cs_sent.get_mid
    End If
    
    If Not cs_sent.get_gid = "" Then
        url = url & "&gid=" & cs_sent.get_gid
    End If
    
    sent_url = url
End Function

'Set http method 'POST' data
Private Sub set_post_data()
    Dim i As Integer
    Dim data_boundary, url As String
    Dim keys
    
    data_boundary = "--" & MULTIPART_BOUNDARY
    'params|fffd||fffd| |fffd||fffd||fffd||678||fffd|
    If params Is Nothing Then
        Set params = CreateObject("scripting.dictionary")
    End If

    url = get_http_field
    
    keys = params.keys
    For i = 0 To params.count - 1
        If keys(i) = "image" Then
            url = url & vbCrLf & data_boundary & vbCrLf
            url = url & "Content-Disposition: form-data; name=""image""; filename=""" & Dir(params(keys(i))) & """" & vbCrLf
            url = url & "Content-Type: image/jpeg" & vbCrLf
            url = url & "Content-Transfer-Encoding: base64" & vbCrLf & vbCrLf
            url = url & encode_file(params(keys(i))) & vbCrLf
        Else
            url = url & vbCrLf & data_boundary & vbCrLf
            url = url & "Content-Disposition: form-data; name=""" & keys(i) & """" & vbCrLf & vbCrLf
            url = url & params(keys(i)) & vbCrLf
        End If
    Next i

    url = url & post_extra_data(data_boundary)
        
    set_http_field url
End Sub

' set post extra data
Private Function post_extra_data(data_boundary As Variant)
    Dim url As String
    
    'os_platform added since rest api v1.5
    url = vbCrLf & data_boundary & vbCrLf
    url = url & "Content-Disposition: form-data; name=""os_platform""" & vbCrLf & vbCrLf
    url = url & RestHelpers.getOs & vbCrLf
    'dev_lang added since rest api v1.5
    url = url & vbCrLf & data_boundary & vbCrLf
    url = url & "Content-Disposition: form-data; name=""dev_lang""" & vbCrLf & vbCrLf
    url = url & "excel vba" & vbCrLf
    'sdk_version added since rest api v1.5
    url = url & vbCrLf & data_boundary & vbCrLf
    url = url & "Content-Disposition: form-data; name=""sdk_version""" & vbCrLf & vbCrLf
    url = url & "excel no sdk" & vbCrLf
    'app_version added since rest api v1.5
    url = url & vbCrLf & data_boundary & vbCrLf
    url = url & "Content-Disposition: form-data; name=""app_version""" & vbCrLf & vbCrLf
    url = url & "Excel 3.0" & vbCrLf
    url = url & data_boundary & "--"
    
    post_extra_data = url
End Function

'Set http method 'GET' data
Private Function set_get_data(url As String)
    Dim i As Integer
    Dim keys
    
    'params|fffd||fffd| |fffd||fffd||fffd||678||fffd|
    If params Is Nothing Then
        Set params = CreateObject("scripting.dictionary")
    End If
    
    url = url & "?" & get_http_field
    keys = params.keys
    For i = 0 To params.count - 1
        url = url & "&" & keys(i) & "=" & params(keys(i))
    Next i
    
    set_get_data = url
End Function

'|f7||fffd||3b5||fffd| image |fffd||43e||fffd||fffd||fffd||fffd| function
Public Function encode_file(strPicPath As String) As String
    Const adTypeBinary = 1          ' Binary file is encoded

    ' Variables for encoding
    Dim objXML
    Dim objDocElem
    Dim objStream

    If Not strPicPath = "" Then
        ' Open data stream from picture
        Set objStream = CreateObject("ADODB.Stream")
        objStream.Type = adTypeBinary
        objStream.Open
        objStream.LoadFromFile (strPicPath)
    
        ' Create XML Document object and root node
        ' that will contain the data
        Set objXML = CreateObject("MSXml2.DOMDocument")
        Set objDocElem = objXML.createElement("Base64Data")
        objDocElem.DataType = "bin.base64"
    
        ' Set binary value
        objDocElem.nodeTypedValue = objStream.Read()
    
        ' Get base64 value
        encode_file = objDocElem.text
    
        ' Clean all
        Set objXML = Nothing
        Set objDocElem = Nothing
        Set objStream = Nothing
    Else
        encode_file = ""
    End If

End Function

Public Function process_responseText(ByVal HR As WinHttpRequest)
    Dim result As Object, data_dict As Object
    Dim arrValue, error_msg As String
    Dim key, error_code, b As Variant
    Dim list_count As Integer
    Dim arr_data As Variant
    Dim i, error_count As Integer
    
    Set result = RestHelpers.ParseJSON(HR.ResponseText)
    Debug.Print "RESULT : " & HR.ResponseText
    Set resp.cs_result = result
    
    With resp
        If IsArray(result) Then
            On Error GoTo Continue
            
            i = 0
            error_count = 0
            For Each key In result
                If key("error_count") > 0 Then
                    For Each error_code In key("error_list")
                        error_msg = error_msg & vbCrLf & "|fffd||fffd||fffd||179||fffd||223| : " & recipients_num(i) & " |fffd||fffd||fffd||fffd||fffd||6b5||fffd| : " & error_code
                    Next
                    error_count = error_count + key("error_count")
                End If
                i = i + 1
            Next
            
            error_msg = "|fffd||1b7||fffd| " & error_count & "|fffd||fffd||fffd||fffd| |fffd||7bd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||f3||fffd||fffd| |fffd||1fe||fffd||fffd||fffd||fffd||3f4||fffd|. " & vbCrLf & _
                        "|fffd||fffd||fffd||fffd||fffd||6b5||fffd| |22e||fffd||fffd| : 'http://www.coolsms.co.kr/SMS_API_v2#|fffd||fffd||fffd||6f0||fffd||fffd||fffd||6b5||fffd||1e5|'" & vbCrLf & error_msg
            
            If error_count > 0 Then MsgBox error_msg
            
            GoTo Continue
        End If

        For Each key In result.keys
            'Debug.Print "Key : " & result(Key)
            
            Select Case key
                Case "code":
                    .cs_code = result(key)
                    Debug.Print (silence_msgbox)
                    If silence_msgbox = False Then MsgBox result(key)
                    
                Case "cash":
                    .cs_cash = result(key)
                    
                Case "point":
                    .cs_point = result(key)
                    
                Case "total_count":
                    .cs_total_count = result(key)
                    
                Case "list_count":
                    .cs_list_count = result(key)
                    list_count = result(key)
                    
                Case "page":
                    .cs_page = result(key)
                    
                Case "data":
                    .set_sent_data result(key)
                    
                Case "group_id":
                    .cs_group_id = result(key)
                    
                Case "success_count":
                    .cs_success_count = result(key)
                    
                Case "error_count":
                    .cs_error_count = result(key)
                    
            End Select
        Next
         
Continue:
        .cs_status = HR.Status
        
    End With
End Function

Public Function check_response() As Integer
    If resp.cs_status = "200" Then
        check_response = 1
    Else
        check_response = 0
    End If
End Function

Public Function get_http_method()
    get_http_method = http_method
End Function

Private Sub set_http_method(method As String)
    http_method = RestHelpers.URLEncode(method)
End Sub

Public Function get_http_field()
    get_http_field = http_field
End Function

Private Sub set_http_field(field As String)
    http_field = field
End Sub

Public Sub set_params(data As Dictionary)
    Set params = data
End Sub


'|fffd||3b1||fffd||fffd||fffd|
Public Function process_login() As Boolean
    Dim result As Integer
    Dim auth As Authentication
    Dim resp As Response
    
    Set auth = New Authentication
    Set resp = New Response
    
    If Connect(auth, resp) Then
        process_login = True
    Else
        process_login = False
    End If
    
    Set auth = Nothing
    Set resp = Nothing
End Function


Attribute VB_Name = "Response"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public cs_result As Object
Public cs_source As String
Public cs_status As String
Public cs_total_count As String
Public cs_list_count As String
Public cs_page As String
Private cs_sent_data() As String
Public cs_cash As String
Public cs_point As String
Public cs_code As String
Public cs_message As String
Public cs_group_id As String
Public cs_success_count As String
Public cs_error_count As String

'Sender_id |fffd||7f0||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||4b5||fffd|
Public cs_idno As String
Public cs_phone_number As String
Public cs_flag_default As String
Public cs_updatetime As String
Public cs_regdate As String

Public cs_handle_key As String
Public cs_ars_number As String

Public cs_httpstatus As String
Public cs_httpstatus_text As String

Public Function getBalance() As Long
    getBalance = Val(cs_cash) + Val(cs_point)
End Function

Public Function get_sent_data(Optional opt = False) As String()
    Dim short_sent_data() As String
    If opt Then
        ReDim short_sent_data(Val(cs_list_count) - 1, 5)
        On Error GoTo sentDataEmpty
        For i = 0 To UBound(cs_sent_data)
            short_sent_data(i, 0) = cs_sent_data(i, 2)
            short_sent_data(i, 1) = cs_sent_data(i, 0)
            short_sent_data(i, 2) = cs_sent_data(i, 9)
            short_sent_data(i, 3) = cs_sent_data(i, 7)
            short_sent_data(i, 4) = cs_sent_data(i, 8)
        Next
        get_sent_data = short_sent_data
    Else
        get_sent_data = cs_sent_data
    End If
sentDataEmpty:
End Function

Public Function set_sent_data(value As Object)
    Dim i As Integer
    Dim temp_msg_data() As String
    
    ReDim cs_sent_data(cs_list_count - 1, 12)
    i = 0
    For Each sent_msgs In value
        If i = cs_list_count Then Exit For
        j = 0
        For Each Msg In sent_msgs
            cs_sent_data(i, j) = sent_msgs(Msg)
            j = j + 1
        Next
        i = i + 1
    Next
End Function
Attribute VB_Name = "RestHelpers"
''
' RestHelpers v3.0.7
' (c) Tim Hall - https://github.com/timhall/Excel-REST
'
' Common helpers RestClient
'
' @dependencies: Microsoft Scripting Runtime
' @author: tim.hall.engr@gmail.com
' @license: MIT (http://www.opensource.org/licenses/mit-license.php)
'
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' Declare SetTimer and KillTimer
' See [SetTimer and VBA](http://www.mcpher.com/Home/excelquirks/classeslink/vbapromises/timercallbacks)
' and [MSDN Article](http://msdn.microsoft.com/en-us/library/windows/desktop/ms644906(v=vs.85).aspx)
' --------------------------------------------- '
#If VBA7 And Win64 Then
    ' 64-bit
    Public Declare PtrSafe Function SetTimer Lib "user32" ( _
        ByVal hWnd As LongLong, ByVal nIDEvent As LongLong, _
        ByVal uElapse As LongLong, _
        ByVal lpTimerFunc As LongLong) As LongLong
    Public Declare PtrSafe Function KillTimer Lib "user32" ( _
        ByVal hWnd As LongLong, _
        ByVal nIDEvent As LongLong) As LongLong
       
    '~~ MouseCursor
    Declare PtrSafe Function LoadCursorBynum Lib "user32" Alias "LoadCursorA" _
      (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
    
    Declare PtrSafe Function LoadCursorFromFile Lib "user32" Alias _
      "LoadCursorFromFileA" (ByVal lpFileName As String) As Long
    
    Declare PtrSafe Function SetCursor Lib "user32" _
      (ByVal hCursor As Long) As Long
    '~~ End MouseCursor
    Declare PtrSafe Function GetSystemMetrics32 Lib "user32" _
    Alias "GetSystemMetrics" (ByVal nIndex As Long) As Long
#Else
    '32-bit
    Public Declare Function SetTimer Lib "user32" ( _
        ByVal hWnd As Long, _
        ByVal nIDEvent As Long, _
        ByVal uElapse As Long, _
        ByVal lpTimerFunc As Long) As Long
    Public Declare Function KillTimer Lib "user32" ( _
        ByVal hWnd As Long, _
        ByVal nIDEvent As Long) As Long
  
    '~~ MouseCursor
    Declare Function LoadCursorBynum Lib "user32" Alias "LoadCursorA" _
      (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
    
    Declare Function LoadCursorFromFile Lib "user32" Alias _
      "LoadCursorFromFileA" (ByVal lpFileName As String) As Long
    
    Declare Function SetCursor Lib "user32" _
      (ByVal hCursor As Long) As Long
    '~~ End MouseCursor
    
    Declare Function GetSystemMetrics32 Lib "user32" _
    Alias "GetSystemMetrics" (ByVal nIndex As Long) As Long

#End If

Private Const UserAgent As String = "Excel Client v3.0.7 (https://github.com/timhall/Excel-REST)"
Private DocumentHelper As Object
Private ElHelper As Object

' Moved to top from JSONLib
Private Const INVALID_JSON      As Long = 1
Private Const INVALID_OBJECT    As Long = 2
Private Const INVALID_ARRAY     As Long = 3
Private Const INVALID_BOOLEAN   As Long = 4
Private Const INVALID_NULL      As Long = 5
Private Const INVALID_KEY       As Long = 6

Public Enum StatusCodes
    Ok = 200
    Created = 201
    NoContent = 204
    NotModified = 304
    BadRequest = 400
    Unauthorized = 401
    Forbidden = 403
    NotFound = 404
    RequestTimeout = 408
    UnsupportedMediaType = 415
    InternalServerError = 500
    BadGateway = 502
    ServiceUnavailable = 503
    GatewayTimeout = 504
End Enum

Public EnableLogging As Boolean

' ============================================= '
' Shared Helpers
' ============================================= '

''
' Log helper
'
' @param {String} Message
' @param {String} [From]
' --------------------------------------------- '

Public Sub LogDebug(message As String, Optional from As String = "")
    If EnableLogging Then
        If from = "" Then
            from = "Excel-REST"
        End If
        
        Debug.Print from & ": " & message
    End If
End Sub
Public Sub LogError(message As String, Optional from As String = "", Optional ErrNumber As Long = -1)
    If from = "" Then
        from = "Excel-REST"
    End If
    If ErrNumber >= 0 Then
        from = from & ": " & ErrNumber
    End If
    
    Debug.Print "ERROR - " & from & ": " & ErrNumber & " " & ErrDescription
End Sub
Public Function Obfuscate(Secure As String, Optional Character As String = "*") As String
    Obfuscate = String(Len(Secure), Character)
End Function

''
' Parse given JSON string into object (Dictionary or Collection)
'
' @param {String} JSON
' @return {Object}
' --------------------------------------------- '

Public Function ParseJSON(JSON As String) As Object
    Set ParseJSON = json_parse(JSON)
End Function

''
' Convert object to JSON string
'
' @param {Object}
' @return {String}
' --------------------------------------------- '

Public Function ConvertToJSON(obj As Variant) As String
    ConvertToJSON = json_toString(obj)
End Function

''
' Url Encode the given string
'
' @param {Variant} rawVal The raw string to encode
' @param {Boolean} [spaceAsPlus=False] Use plus sign for encoded spaces (otherwise %20)
' @return {String} Encoded string
' --------------------------------------------- '

Public Function URLEncode(ByVal sURL As String) As String

    Const adTypeBinary      As Long = 1
    Const adTypeText        As Long = 2
    Const adModeReadWrite   As Long = 3
    Dim btUTF8String()      As Byte
    Dim i                   As Long
    Dim sTemp               As String
     
    With CreateObject("ADODB.Stream")
        .charset = "UTF-8"
        .Mode = adModeReadWrite
        .Type = adTypeText
        .Open
        .WriteText sURL
        .flush
        .position = 0
        .Type = adTypeBinary
        .Read 3
        btUTF8String = .Read
        .Close
    End With
     
    For i = 0 To UBound(btUTF8String)
        Select Case btUTF8String(i)
        Case 32
            sTemp = "+"
        Case 48 To 57, 65 To 90, 97 To 122
            sTemp = Chr(btUTF8String(i))
        Case Else
            sTemp = "%" & Hex(btUTF8String(i))
        End Select
         
        URLEncode = URLEncode & sTemp
    Next i

End Function

Public Function UrlDecode(EncodedString As String) As String
    Dim StringLen As Long
    StringLen = Len(EncodedString)
    
    If StringLen > 0 Then
        Dim i As Long
        Dim result As String
        Dim temp As String
        
        For i = 1 To StringLen
            temp = Mid$(EncodedString, i, 1)
            
            If temp = "+" Then
                temp = " "
            ElseIf temp = "%" And StringLen >= i + 2 Then
                temp = Mid$(EncodedString, i + 1, 2)
                temp = Chr(CDec("&H" & temp))
                
                i = i + 2
            End If
                
            result = result & temp
        Next i
        
        UrlDecode = result
    End If
End Function

''
' Join Url with /
'
' @param {String} LeftSide
' @param {String} RightSide
' @return {String} Joined url
' --------------------------------------------- '

Public Function JoinUrl(LeftSide As String, RightSide As String) As String
    If Left(RightSide, 1) = "/" Then
        RightSide = Right(RightSide, Len(RightSide) - 1)
    End If
    If Right(LeftSide, 1) = "/" Then
        LeftSide = Left(LeftSide, Len(LeftSide) - 1)
    End If
    
    If LeftSide <> "" And RightSide <> "" Then
        JoinUrl = LeftSide & "/" & RightSide
    Else
        JoinUrl = LeftSide & RightSide
    End If
End Function

''
' Combine two objects
'
' @param {Dictionary} OriginalObj Original object to add values to
' @param {Dictionary} NewObj New object containing values to add to original object
' @param {Boolean} [OverwriteOriginal=True] Overwrite any values that already exist in the original object
' @return {Dictionary} Combined object
' --------------------------------------------- '

Public Function CombineObjects(ByVal OriginalObj As Dictionary, ByVal NewObj As Dictionary, _
    Optional OverwriteOriginal As Boolean = True) As Dictionary

    Dim Combined As New Dictionary

    Dim OriginalKey As Variant
    Dim key As Variant

    If Not OriginalObj Is Nothing Then
        For Each key In OriginalObj.keys()
            Combined.Add key, OriginalObj(key)
        Next key
    End If
    If Not NewObj Is Nothing Then
        For Each key In NewObj.keys()
            If Combined.exists(key) And OverwriteOriginal Then
                Combined(key) = NewObj(key)
            ElseIf Not Combined.exists(key) Then
                Combined.Add key, NewObj(key)
            End If
        Next key
    End If

    Set CombineObjects = Combined
End Function

''
' Apply whitelist to given object to filter out unwanted key/values
'
' @param {Dictionary} Original model to filter
' @param {Variant} WhiteList Array of values to retain in the model
' @return {Dictionary} Filtered object
' --------------------------------------------- '

'Public Function FilterObject(ByVal Original As Dictionary, Whitelist As Variant) As Dictionary
'    Dim Filtered As New Dictionary
'    Dim i As Integer
'
'    If IsArray(Whitelist) Then
'        For i = LBound(Whitelist) To UBound(Whitelist)
'            If Original.Exists(Whitelist(i)) Then
'                Filtered.Add Whitelist(i), Original(Whitelist(i))
'            End If
'        Next i
'    ElseIf VarType(Whitelist) = vbString Then
'        If Original.Exists(Whitelist) Then
'            Filtered.Add Whitelist, Original(Whitelist)
'        End If
'    End If
'
'    Set FilterObject = Filtered
'End Function

Public Function IsArray(obj As Variant) As Boolean
    If Not IsEmpty(obj) Then
        If VarType(obj) = vbObject Then
            If TypeOf obj Is Collection Then
                IsArray = True
            End If
        ElseIf VarType(obj) = vbArray Or VarType(obj) = 8204 Then
            ' VarType = 8204 seems to arise from Array(...) constructor
            IsArray = True
        End If
    End If
End Function

''
' Convert dictionary to url encoded string
'
' @param {Variant} Obj
' @return {String} UrlEncoded string (e.g. a=123&b=456&...)
' --------------------------------------------- '

Public Function ConvertToUrlEncoded(obj As Variant) As String
    If IsArray(obj) Then
        ' TODO Handle arrays and collections
        Err.Raise vbObjectError + 1, "RestHelpers.ConvertToUrlEncoded", "Arrays are not currently supported by ConvertToUrlEncoded"
    End If
    
    ConvertToUrlEncoded = DictionariesToUrlEncodedString(obj)
End Function
Public Function DictionariesToUrlEncodedString(ParamArray Dictionaries() As Variant) As String
    Dim Encoded As String
    Dim i As Integer
    Dim Combined As Dictionary
    Dim ParameterKey As Variant
    Dim value As Variant
    
    Set Combined = Dictionaries(LBound(Dictionaries))
    For i = LBound(Dictionaries) + 1 To UBound(Dictionaries)
        Set Combined = CombineObjects(Combined, Dictionaries(i))
    Next i
    
    If Not Combined Is Nothing Then
        For Each ParameterKey In Combined.keys()
            If Len(Encoded) > 0 Then: Encoded = Encoded & "&"
            value = Combined(ParameterKey)
            
            ' Convert boolean to lowercase
            If VarType(value) = vbBoolean Then
                If value Then
                    value = "true"
                Else
                    value = "false"
                End If
            End If
            
            Encoded = Encoded & URLEncode(ParameterKey, True) & "=" & URLEncode(value, True)
        Next ParameterKey
    End If
    
    DictionariesToUrlEncodedString = Encoded
End Function

''
' Parse url-encoded string to Dictionary
'
' @param {String} UrlEncoded
' @return {Dictionary} Parsed
' --------------------------------------------- '

Public Function ParseUrlEncoded(Encoded As String) As Dictionary
    Dim items As Variant
    Dim i As Integer
    Dim Parts As Variant
    Dim Parsed As New Dictionary
    Dim key As String
    Dim value As Variant

    items = Split(Encoded, "&")
    For i = LBound(items) To UBound(items)
        Parts = Split(items(i), "=")

        If UBound(Parts) - LBound(Parts) >= 1 Then
            ' TODO: Handle numbers, arrays, and object better here
            key = UrlDecode(CStr(Parts(LBound(Parts))))
            value = UrlDecode(CStr(Parts(LBound(Parts) + 1)))

            If Parsed.exists(key) Then
                Parsed(key) = value
            Else
                Parsed.Add key, value
            End If
        End If
    Next i

    Set ParseUrlEncoded = Parsed
End Function

''
' Check if protocol is included with url
'
' @param {String} Url
' @return {String} Found protocol
' --------------------------------------------- '

Public Function IncludesProtocol(url As String) As String
    Dim Parts As New Dictionary
    Set Parts = UrlParts(url)
    
    If Parts("Protocol") <> "" Then
        IncludesProtocol = Parts("Protocol") & "//"
    End If
End Function

''
' Remove protocol from url (if present)
'
' @param {String} Url
' @return {String} Url without protocol
' --------------------------------------------- '

Public Function RemoveProtocol(url As String) As String
    Dim Protocol As String
    
    RemoveProtocol = url
    Protocol = IncludesProtocol(RemoveProtocol)
    If Protocol <> "" Then
        RemoveProtocol = Replace(RemoveProtocol, Protocol, "")
    End If
End Function

''
' Get Url parts
'
' @param {String} Url
' @return {Dictionary} Parts of url
' --------------------------------------------- '
Public Function UrlParts(url As String) As Dictionary
    Dim Parts As New Dictionary

    ' Create document/element is expensive, cache after creation
    If DocumentHelper Is Nothing Or ElHelper Is Nothing Then
        Set DocumentHelper = CreateObject("htmlfile")
        Set ElHelper = DocumentHelper.createElement("a")
    End If

    ElHelper.href = url
    Parts.Add "Protocol", ElHelper.Protocol
    Parts.Add "Host", ElHelper.host
    Parts.Add "Hostname", ElHelper.hostname
    Parts.Add "Port", ElHelper.port
    Parts.Add "Uri", "/" & ElHelper.pathname
    Parts.Add "Querystring", ElHelper.Search
    Parts.Add "Hash", ElHelper.hash

    If Parts("Protocol") = ":" Or Parts("Protocol") = "localhost:" Then
        Parts("Protocol") = ""
    End If

    Set UrlParts = Parts
End Function

' ======================================================================================== '
'
' Request Preparation / Handling
'
' ======================================================================================== '

''
' Prepare http request for execution
'
' @param {RestRequest} Request
' @param {Integer} TimeoutMS
' @param {Boolean} [UseAsync=False]
' @return {Object} Setup http object
' --------------------------------------------- '

'Public Function PrepareHttpRequest(Request As RestRequest, TimeoutMS As Long, _
'    Optional UseAsync As Boolean = False) As Object
'    Dim Http As Object
'    Set Http = CreateObject("MSXML2.ServerXMLHTTP.6.0")
'
'    ' Set timeouts
'    Http.SetTimeouts TimeoutMS, TimeoutMS, TimeoutMS, TimeoutMS
'
'    ' Add general headers to request
'    Request.AddHeader "User-Agent", UserAgent
'    Request.AddHeader "Content-Type", Request.contentType
'
'    If Request.IncludeContentLength Then
'        Request.AddHeader "Content-Length", Request.ContentLength
'        LogDebug "Content-Length: " & Request.ContentLength, "RestHelpers.PrepareHttpRequest"
'    Else
'        If Request.Headers.Exists("Content-Length") Then
'            Request.Headers.Remove "Content-Length"
'        End If
'    End If
'
'    ' Pass http to request and setup onreadystatechange
'    If UseAsync Then
'        Set Request.HttpRequest = Http
'        Http.onreadystatechange = Request
'    End If
'
'    Set PrepareHttpRequest = Http
'End Function

''
' Set headers to http object for given request
'
' @param {Object} Http request
' @param {RestRequest} Request
' --------------------------------------------- '

'Public Sub SetHeaders(ByRef Http As Object, Request As RestRequest)
'    Dim HeaderKey As Variant
'    For Each HeaderKey In Request.Headers.Keys()
'        Http.SetRequestHeader HeaderKey, Request.Headers(HeaderKey)
'        LogDebug HeaderKey & ": " & Request.Headers(HeaderKey), "RestHelpers.SetHeaders"
'    Next HeaderKey
'
'    Dim CookieKey As Variant
'    For Each CookieKey In Request.Cookies.Keys()
'        Http.SetRequestHeader "Cookie", CookieKey & "=" & Request.Cookies(CookieKey)
'        LogDebug "Cookie: " & CookieKey & "=" & Request.Cookies(CookieKey), "RestHelpers.SetHeaders"
'    Next CookieKey
'End Sub

''
' Prepare proxy for http object
'
' @param {String} ProxyServer
' @param {String} [Username=""]
' @param {String} [Password=""]
' @param {Variant} [BypassList]
' --------------------------------------------- '

Public Sub PrepareProxyForHttpRequest(ByRef http As Object, ProxyServer As String, _
    Optional Username As String = "", Optional Password As String = "", Optional BypassList As Variant)
    
    If ProxyServer <> "" Then
        http.SetProxy 2, ProxyServer, BypassList
        LogDebug "SetProxy: " & ProxyServer & ", " & BypassList, "RestHelpers.PrepareProxyForHttpRequest"
        
        If Username <> "" Then
            http.setProxyCredentials Username, Password
            LogDebug "SetProxyCredentials: " & Username & ", " & Obfuscate(Password), "RestHelpers.PrepareProxyForHttpRequest"
        End If
    End If
End Sub

''
' Execute request synchronously
'
' @param {Object} Http
' @param {RestRequest} Request The request to execute
' @return {RestResponse} Wrapper of server response for request
' --------------------------------------------- '

'Public Function ExecuteRequest(ByRef Http As Object, ByRef Request As RestRequest) As RestResponse
'    On Error GoTo ErrorHandling
'    Dim response As RestResponse
'
'    ' Send the request and handle response
'    Http.Send Request.Body
'    LogDebug "Http.Send: " & Request.Body, "RestHelpers.ExecuteRequest"
'    Set response = RestHelpers.CreateResponseFromHttp(Http, Request.Format)
'
'ErrorHandling:
'
'    If Not Http Is Nothing Then Set Http = Nothing
'    If Err.Number <> 0 Then
'        If InStr(Err.Description, "The operation timed out") > 0 Then
'            ' Return 408
'            Set response = RestHelpers.CreateResponse(StatusCodes.RequestTimeout, "Request Timeout")
'            LogDebug "Timeout: " & Request.FullUrl, "RestHelpers.ExecuteRequest"
'            Err.Clear
'        Else
'            ' Rethrow error
'            LogError Err.Description, "RestHelpers.ExecuteRequest", Err.Number
'            Err.Raise Err.Number, Description:=Err.Description
'        End If
'    End If
'
'    Set ExecuteRequest = response
'End Function

''
' Execute request asynchronously
'
' @param {Object} Http
' @param {RestRequest} Request The request to execute
' @param {String} Callback Name of function to call when request completes (specify "" if none)
' @param {Variant} [CallbackArgs] Variable array of arguments that get passed directly to callback function
' --------------------------------------------- '

'Public Sub ExecuteRequestAsync(ByRef Http As Object, ByRef Request As RestRequest, TimeoutMS As Long, Callback As String, Optional ByVal CallbackArgs As Variant)
'    On Error GoTo ErrorHandling
'
'    Request.Callback = Callback
'    Request.CallbackArgs = CallbackArgs
'
'    ' Send the request
'    Request.StartTimeoutTimer TimeoutMS
'    Http.Send Request.Body
'    LogDebug "Http.Send: " & Request.Body, "RestHelpers.ExecuteRequestAsync"
'
'    Exit Sub
'
'ErrorHandling:
'
'    ' Close http and rethrow error
'    If Not Http Is Nothing Then Set Http = Nothing
'    LogError Err.Description, "RestHelpers.ExecuteRequestAsync", Err.Number
'    Err.Raise Err.Number, Description:=Err.Description
End Sub

''
' Create response for http
' @param {Object} Http
' @param {AvailableFormats} [Format=json]
' @return {RestResponse}
' --------------------------------------------- '

'Public Function CreateResponseFromHttp(ByRef Http As Object, Optional Format As AvailableFormats = AvailableFormats.json) As RestResponse
'    Set CreateResponseFromHttp = New RestResponse
'
'    CreateResponseFromHttp.StatusCode = Http.Status
'    CreateResponseFromHttp.StatusDescription = Http.StatusText
'    CreateResponseFromHttp.Body = Http.ResponseBody
'    CreateResponseFromHttp.Content = Http.ResponseText
'
'    LogDebug "CreateResponse: " & Http.Status & ", " & Left(Http.ResponseText, 100), "RestHelpers.CreateResponseFromHttp"
'
'    ' Convert content to data by format
'    Select Case Format
'    Case AvailableFormats.formurlencoded
'        Set CreateResponseFromHttp.Data = RestHelpers.ParseUrlEncoded(Http.ResponseText)
'    Case AvailableFormats.json
'        Set CreateResponseFromHttp.Data = RestHelpers.ParseJSON(Http.ResponseText)
'    End Select
'
'    ' Extract headers
'    Set CreateResponseFromHttp.Headers = ExtractHeadersFromResponseHeaders(Http.GetAllResponseHeaders)
'
'    ' Extract cookies
'    Set CreateResponseFromHttp.Cookies = ExtractCookiesFromHeaders(CreateResponseFromHttp.Headers)
'End Function

''
' Create simple response
' @param {StatusCodes} StatusCode
' @param {String} StatusDescription
' @return {RestResponse}
' --------------------------------------------- '

'Public Function CreateResponse(StatusCode As StatusCodes, StatusDescription As String) As RestResponse
'    Set CreateResponse = New RestResponse
'    CreateResponse.StatusCode = StatusCode
'    CreateResponse.StatusDescription = StatusDescription
'End Function

''
' Extract cookies from response headers
'
' @param {String} ResponseHeaders
' @return {Dictionary} Cookies
' --------------------------------------------- '

'Public Function ExtractCookiesFromHeaders(Headers As Collection) As Dictionary
'    Dim Cookies As New Dictionary
'    Dim Cookie As String
'    Dim Key As String
'    Dim Value As String
'    Dim Header As Dictionary
'
'    For Each Header In Headers
'        If Header("key") = "Set-Cookie" Then
'            Cookie = Header("value")
'            Key = Mid$(Cookie, 1, InStr(1, Cookie, "=") - 1)
'            Value = Mid$(Cookie, InStr(1, Cookie, "=") + 1, Len(Cookie))
'
'            If InStr(1, Value, ";") Then
'                Value = Mid$(Value, 1, InStr(1, Value, ";") - 1)
'            End If
'
'            If Cookies.Exists(Key) Then
'                Cookies(Key) = UrlDecode(Value)
'            Else
'                Cookies.Add Key, UrlDecode(Value)
'            End If
'        End If
'    Next Header
'
'    Set ExtractCookiesFromHeaders = Cookies
'End Function

''
' Extract headers from response headers
'
' @param {String} ResponseHeaders
' @return {Collection} Headers
' --------------------------------------------- '

Public Function ExtractHeadersFromResponseHeaders(ResponseHeaders As String) As Collection
    Dim Headers As New Collection
    Dim Header As Dictionary
    Dim Multiline As Boolean
    Dim key As String
    Dim value As String
    
    Dim Lines As Variant
    Lines = Split(ResponseHeaders, vbCrLf)
    
    Dim i As Integer
    For i = LBound(Lines) To (UBound(Lines) + 1)
        If i > UBound(Lines) Then
            Headers.Add Header
        ElseIf Lines(i) <> "" Then
            If InStr(1, Lines(i), ":") = 0 And Not Header Is Nothing Then
                ' Assume part of multi-line header
                Multiline = True
            ElseIf Multiline Then
                ' Close out multi-line string
                Multiline = False
                Headers.Add Header
                LogDebug Header("key") & "=" & Header("value"), "RestHelpers.ExtractHeadersFromResponseHeaders"
            ElseIf Not Header Is Nothing Then
                Headers.Add Header
                LogDebug Header("key") & "=" & Header("value"), "RestHelpers.ExtractHeadersFromResponseHeaders"
            End If
            
            If Not Multiline Then
                Set Header = New Dictionary
                Header.Add "key", Trim(Mid$(Lines(i), 1, InStr(1, Lines(i), ":") - 1))
                Header.Add "value", Trim(Mid$(Lines(i), InStr(1, Lines(i), ":") + 1, Len(Lines(i))))
            Else
                Header("value") = Header("value") & vbCrLf & Lines(i)
            End If
        End If
    Next i
    
    Set ExtractHeadersFromResponseHeaders = Headers
End Function

''
' Create request from options
'
' @param {Dictionary} Options
' - Headers
' - Cookies
' - QuerystringParams
' - UrlSegments
' --------------------------------------------- '

'Public Function CreateRequestFromOptions(Options As Dictionary) As RestRequest
'    Dim Request As New RestRequest
'
'    If Not IsEmpty(Options) And Not Options Is Nothing Then
'        If Options.Exists("Headers") Then
'            Set Request.Headers = Options("Headers")
'        End If
'        If Options.Exists("Cookies") Then
'            Set Request.Cookies = Options("Cookies")
'        End If
'        If Options.Exists("QuerystringParams") Then
'            Set Request.QuerystringParams = Options("QuerystringParams")
'        End If
'        If Options.Exists("UrlSegments") Then
'            Set Request.UrlSegments = Options("UrlSegments")
'        End If
'    End If
'
'    Set CreateRequestFromOptions = Request
'End Function

''
' Update response with another response
'
' @param {RestResponse) Original
' @param {RestResponse) Updated
' --------------------------------------------- '

'Public Function UpdateResponse(ByRef Original As RestResponse, Updated As RestResponse) As RestResponse
'    Original.StatusCode = Updated.StatusCode
'    Original.StatusDescription = Updated.StatusDescription
'    Original.Content = Updated.Content
'    Original.Body = Updated.Body
'    Set Original.Headers = Updated.Headers
'    Set Original.Cookies = Updated.Cookies
'
'    If Not IsEmpty(Updated.Data) Then
'        If VarType(Updated.Data) = vbObject Then
'            Set Original.Data = Updated.Data
'        Else
'            Original.Data = Updated.Data
'        End If
'    End If
'
'    Set UpdateResponse = Original
'End Function

' ======================================================================================== '
'
' Timeout Timing
'
' ======================================================================================== '

''
' Start timeout timer for request
'
' @param {RestRequest} Request
' @param {Long} TimeoutMS
' --------------------------------------------- '
'Public Sub StartTimeoutTimer(Request As RestRequest, TimeoutMS As Long)
'    SetTimer Application.HWnd, ObjPtr(Request), TimeoutMS, AddressOf RestHelpers.TimeoutTimerExpired
'End Sub

''
' Stop timeout timer for request
'
' @param {RestRequest} Request
' --------------------------------------------- '
'Public Sub StopTimeoutTimer(Request As RestRequest)
'    KillTimer Application.HWnd, ObjPtr(Request)
'End Sub

''
' Handle timeout timers expiring
'
' See [MSDN Article](http://msdn.microsoft.com/en-us/library/windows/desktop/ms644907(v=vs.85).aspx)
' --------------------------------------------- '
'#If VBA7 And Win64 Then
'Public Sub TimeoutTimerExpired(ByVal HWnd As Long, ByVal Msg As Long, _
'        ByVal Request As RestRequest, ByVal dwTimer As Long)
'#Else
'Sub TimeoutTimerExpired(ByVal HWnd As Long, ByVal uMsg As Long, _
'        ByVal Request As RestRequest, ByVal dwTimer As Long)
'#End If
'
'    StopTimeoutTimer Request
'    LogDebug "Async Timeout: " & Request.FullUrl, "RestHelpers.TimeoutTimerExpired"
'    Request.TimedOut
'End Sub

' ======================================================================================== '
'
' Crytography and encoding
'
' ======================================================================================== '

''
' Generate a keyed hash value using the HMAC method and SHA1 algorithm
' [Does VBA have a Hash_HMAC](http://stackoverflow.com/questions/8246340/does-vba-have-a-hash-hmac)
'
' @param {String} sTextToHash
' @param {String} sSharedSecretKey
' @return {String}
' --------------------------------------------- '

Public Function Base64_HMACSHA1(ByVal sTextToHash As String, ByVal sSharedSecretKey As String) As String
    Dim asc As Object, enc As Object
    Dim TextToHash() As Byte
    Dim SharedSecretKey() As Byte
    Set asc = CreateObject("System.Text.UTF8Encoding")
    Set enc = CreateObject("System.Security.Cryptography.HMACSHA1")

    TextToHash = asc.Getbytes_4(sTextToHash)
    SharedSecretKey = asc.Getbytes_4(sSharedSecretKey)
    enc.key = SharedSecretKey

    Dim bytes() As Byte
    bytes = enc.ComputeHash_2((TextToHash))
    Base64_HMACSHA1 = EncodeBase64(bytes)
    Set asc = Nothing
    Set enc = Nothing
End Function

''
' Base64 encode data
'
' @param {Byte Array} arrData
' @return {String} Encoded string
' --------------------------------------------- '

Public Function EncodeBase64(ByRef data() As Byte) As String
    Dim XML As Object
    Dim Node As Object
    Set XML = CreateObject("MSXML2.DOMDocument")

    ' byte array to base64
    Set Node = XML.createElement("b64")
    Node.DataType = "bin.base64"
    Node.nodeTypedValue = data
    EncodeBase64 = Node.text

    Set Node = Nothing
    Set XML = Nothing
End Function

''
' Base64 encode string value
'
' @param {String} Data
' @return {String} Encoded string
' --------------------------------------------- '

Public Function EncodeStringToBase64(ByVal data As String) As String
    Dim asc As Object
    Dim bytes() As Byte
    Set asc = CreateObject("System.Text.UTF8Encoding")
    bytes = asc.Getbytes_4(data)
    EncodeStringToBase64 = Replace(EncodeBase64(bytes), vbLf, "")
    Set asc = Nothing
End Function

''
' Create random alphanumeric nonce
'
' @param {Integer} [NonceLength=32]
' @return {String} Randomly generated nonce
' --------------------------------------------- '

Public Function CreateNonce(Optional NonceLength As Integer = 32) As String
    Dim str As String
    Dim count As Integer
    Dim result As String
    Dim random As Integer
    
    str = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUIVWXYZ"
    result = ""
    
    For count = 1 To NonceLength
        random = Int(((Len(str) - 1) * Rnd) + 1)
        result = result + Mid$(str, random, 1)
    Next
    CreateNonce = result
End Function

''
' Perform MD5 Hash on string
' Source: http://www.di-mgt.com.au/src/basMD5.bas.html
'
' @param {String} Text
' @return {String} 32-char Hex MD5 Hash
' --------------------------------------------- '

Public Function MD5(text As String) As String
    Dim Encoding As Object
    Dim MD5Crypto As Object
    Set Encoding = CreateObject("System.Text.UTF8Encoding")
    Set MD5Crypto = CreateObject("System.Security.Cryptography.MD5CryptoServiceProvider")
    
    Dim TextBytes() As Byte
    TextBytes = Encoding.Getbytes_4(text)
    
    Dim HashedBytes() As Byte
    HashedBytes = MD5Crypto.ComputeHash_2(TextBytes)
    
    Dim i As Integer
    For i = LBound(HashedBytes) To UBound(HashedBytes)
        MD5 = MD5 & LCase(Right("0" & Hex$(HashedBytes(i)), 2))
    Next i
End Function

''
' Sort dictionary
'
' Source: http://www.cpearson.com/excel/CollectionsAndDictionaries.htm
'         http://www.cpearson.com/excel/SortingArrays.aspx
' --------------------------------------------- '

'Public Function SortDictionary(ByVal Dict As Dictionary, SortByKey As Boolean, _
'    Optional Descending As Boolean = False, Optional CompareMode As VbCompareMethod = vbTextCompare) As Dictionary
'
'    ' TODO
'    Set SortDictionary = Dict
'End Function

' ======================================================================================== '
'
' JSONLib, http://code.google.com/p/vba-json/
'
' Copyright (c) 2013, Ryo Yokoyama
' All rights reserved.
'
' Redistribution and use in source and binary forms, with or without
' modification, are permitted provided that the following conditions are met:
'     * Redistributions of source code must retain the above copyright
'       notice, this list of conditions and the following disclaimer.
'     * Redistributions in binary form must reproduce the above copyright
'       notice, this list of conditions and the following disclaimer in the
'       documentation and/or other materials provided with the distribution.
'     * Neither the name of the <organization> nor the
'       names of its contributors may be used to endorse or promote products
'       derived from this software without specific prior written permission.
'
' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
' DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
' DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
' (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
' LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
' ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
' SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'
' Changes for Excel-REST:
' - Updated json_parseNumber to reduce chance of overflow
' - Swapped Mid for Mid$
' - Handle colon in object key
' - Handle duplicate keys in object parsing
' - Change methods to Private and prefix with json_
'
' ======================================================================================== '

' (Moved to top of file)
'Private Const INVALID_JSON      As Long = 1
'Private Const INVALID_OBJECT    As Long = 2
'Private Const INVALID_ARRAY     As Long = 3
'Private Const INVALID_BOOLEAN   As Long = 4
'Private Const INVALID_NULL      As Long = 5
'Private Const INVALID_KEY       As Long = 6

'
'   parse string and create JSON object (Dictionary or Collection in VB)
'
Private Function json_parse(ByRef str As String) As Object

    Dim index As Long
    index = 1
    
    On Error Resume Next

    Call json_skipChar(str, index)
    Select Case Mid$(str, index, 1)
    Case "{"
        Set json_parse = json_parseObject(str, index)
    Case "["
        Set json_parse = json_parseArray(str, index)
    End Select

End Function

'
'   parse collection of key/value (Dictionary in VB)
'
Private Function json_parseObject(ByRef str As String, ByRef index As Long) As Dictionary

    Set json_parseObject = New Dictionary
    
    ' "{"
    Call json_skipChar(str, index)
    If Mid$(str, index, 1) <> "{" Then Err.Raise vbObjectError + INVALID_OBJECT, Description:="char " & index & " : " & Mid$(str, index)
    index = index + 1
    
    Dim key As String
    
    Do
        Call json_skipChar(str, index)
        If "}" = Mid$(str, index, 1) Then
            index = index + 1
            Exit Do
        ElseIf "," = Mid$(str, index, 1) Then
            index = index + 1
            Call json_skipChar(str, index)
        End If
        
        key = json_parseKey(str, index)
        If Not json_parseObject.exists(key) Then
            json_parseObject.Add key, json_parseValue(str, index)
        Else
            json_parseObject.Item(key) = json_parseValue(str, index)
        End If
    Loop

End Function

'
'   parse list (Collection in VB)
'
Private Function json_parseArray(ByRef str As String, ByRef index As Long) As Collection

    Set json_parseArray = New Collection
    
    ' "["
    Call json_skipChar(str, index)
    If Mid$(str, index, 1) <> "[" Then Err.Raise vbObjectError + INVALID_ARRAY, Description:="char " & index & " : " + Mid$(str, index)
    index = index + 1
    
    Do
        
        Call json_skipChar(str, index)
        If "]" = Mid$(str, index, 1) Then
            index = index + 1
            Exit Do
        ElseIf "," = Mid$(str, index, 1) Then
            index = index + 1
            Call json_skipChar(str, index)
        End If
        
        ' add value
        json_parseArray.Add json_parseValue(str, index)
        
    Loop

End Function

'
'   parse string / number / object / array / true / false / null
'
Private Function json_parseValue(ByRef str As String, ByRef index As Long)

    Call json_skipChar(str, index)
    
    Select Case Mid$(str, index, 1)
    Case "{"
        Set json_parseValue = json_parseObject(str, index)
    Case "["
        Set json_parseValue = json_parseArray(str, index)
    Case """", "'"
        json_parseValue = json_parseString(str, index)
    Case "t", "f"
        json_parseValue = json_parseBoolean(str, index)
    Case "n"
        json_parseValue = json_parseNull(str, index)
    Case Else
        json_parseValue = json_parseNumber(str, index)
    End Select

End Function

'
'   parse string
'
Private Function json_parseString(ByRef str As String, ByRef index As Long) As String

    Dim quote   As String
    Dim Char    As String
    Dim Code    As String
    
    Call json_skipChar(str, index)
    quote = Mid$(str, index, 1)
    index = index + 1
    Do While index > 0 And index <= Len(str)
        Char = Mid$(str, index, 1)
        Select Case (Char)
        Case "\"
            index = index + 1
            Char = Mid$(str, index, 1)
            Select Case (Char)
            Case """", "\", "/" ' Before: Case """", "\\", "/"
                json_parseString = json_parseString & Char
                index = index + 1
            Case "b"
                json_parseString = json_parseString & vbBack
                index = index + 1
            Case "f"
                json_parseString = json_parseString & vbFormFeed
                index = index + 1
            Case "n"
                json_parseString = json_parseString & vbNewLine
                index = index + 1
            Case "r"
                json_parseString = json_parseString & vbCr
                index = index + 1
            Case "t"
                json_parseString = json_parseString & vbTab
                index = index + 1
            Case "u"
                index = index + 1
                Code = Mid$(str, index, 4)
                json_parseString = json_parseString & ChrW(Val("&h" + Code))
                index = index + 4
            End Select
        Case quote
            
            index = index + 1
            Exit Function
        Case Else
            json_parseString = json_parseString & Char
            index = index + 1
        End Select
    Loop

End Function

'
'   parse number
'
Private Function json_parseNumber(ByRef str As String, ByRef index As Long)

    Dim value   As String
    Dim Char    As String
    
    Call json_skipChar(str, index)
    Do While index > 0 And index <= Len(str)
        Char = Mid$(str, index, 1)
        If InStr("+-0123456789.eE", Char) Then
            value = value & Char
            index = index + 1
        Else
            json_parseNumber = Val(value)
            Exit Function
        End If
    Loop


End Function

'
'   parse true / false
'
Private Function json_parseBoolean(ByRef str As String, ByRef index As Long) As Boolean

    Call json_skipChar(str, index)
    If Mid$(str, index, 4) = "true" Then
        json_parseBoolean = True
        index = index + 4
    ElseIf Mid$(str, index, 5) = "false" Then
        json_parseBoolean = False
        index = index + 5
    Else
        Err.Raise vbObjectError + INVALID_BOOLEAN, Description:="char " & index & " : " & Mid$(str, index)
    End If

End Function

'
'   parse null
'
Private Function json_parseNull(ByRef str As String, ByRef index As Long)

    Call json_skipChar(str, index)
    If Mid$(str, index, 4) = "null" Then
        json_parseNull = Null
        index = index + 4
    Else
        Err.Raise vbObjectError + INVALID_NULL, Description:="char " & index & " : " & Mid$(str, index)
    End If

End Function

Private Function json_parseKey(ByRef str As String, ByRef index As Long) As String

    Dim dquote  As Boolean
    Dim squote  As Boolean
    Dim Char    As String
    
    Call json_skipChar(str, index)
    Do While index > 0 And index <= Len(str)
        Char = Mid$(str, index, 1)
        Select Case (Char)
        Case """"
            dquote = Not dquote
            index = index + 1
            If Not dquote Then
                Call json_skipChar(str, index)
                If Mid$(str, index, 1) <> ":" Then
                    Err.Raise vbObjectError + INVALID_KEY, Description:="char " & index & " : " & json_parseKey
                End If
            End If
        Case "'"
            squote = Not squote
            index = index + 1
            If Not squote Then
                Call json_skipChar(str, index)
                If Mid$(str, index, 1) <> ":" Then
                    Err.Raise vbObjectError + INVALID_KEY, Description:="char " & index & " : " & json_parseKey
                End If
            End If
        Case ":"
            If Not dquote And Not squote Then
                index = index + 1
                Exit Do
            Else
                ' Colon in key name
                json_parseKey = json_parseKey & Char
                index = index + 1
            End If
        Case Else
            If InStr(vbCrLf & vbCr & vbLf & vbTab & " ", Char) Then
            Else
                json_parseKey = json_parseKey & Char
            End If
            index = index + 1
        End Select
    Loop

End Function

'
'   skip special character
'
Private Sub json_skipChar(ByRef str As String, ByRef index As Long)

    While index > 0 And index <= Len(str) And InStr(vbCrLf & vbCr & vbLf & vbTab & " ", Mid$(str, index, 1))
        index = index + 1
    Wend

End Sub

Private Function json_toString(ByRef obj As Variant) As String

    Select Case VarType(obj)
        Case vbNull
            json_toString = "null"
        Case vbEmpty
            json_toString = "null"
        Case vbDate
            json_toString = """" & CStr(obj) & """"
        Case vbString
            json_toString = """" & json_encode(obj) & """"
        Case vbObject
            Dim bFI, i
            bFI = True
            If TypeName(obj) = "Dictionary" Then
                json_toString = json_toString & "{"
                Dim keys
                keys = obj.keys
                For i = 0 To obj.count - 1
                    If bFI Then bFI = False Else json_toString = json_toString & ","
                    Dim key
                    key = keys(i)
                    json_toString = json_toString & """" & key & """:" & json_toString(obj(key))
                Next i
                json_toString = json_toString & "}"
            ElseIf TypeName(obj) = "Collection" Then
                json_toString = json_toString & "["
                Dim value
                For Each value In obj
                    If bFI Then bFI = False Else json_toString = json_toString & ","
                    json_toString = json_toString & json_toString(value)
                Next value
                json_toString = json_toString & "]"
            End If
        Case vbBoolean
            If obj Then json_toString = "true" Else json_toString = "false"
        Case vbVariant, vbArray, vbArray + vbVariant
            Dim sEB
            json_toString = json_multiArray(obj, 1, "", sEB)
        Case Else
            json_toString = Replace(obj, ",", ".")
    End Select

End Function

Private Function json_encode(str) As String
    
    Dim i, j, aL1, aL2, c, p

    aL1 = Array(&H22, &H5C, &H2F, &H8, &HC, &HA, &HD, &H9)
    aL2 = Array(&H22, &H5C, &H2F, &H62, &H66, &H6E, &H72, &H74)
    For i = 1 To Len(str)
        p = True
        c = Mid$(str, i, 1)
        For j = 0 To 7
            If c = Chr(aL1(j)) Then
                json_encode = json_encode & "\" & Chr(aL2(j))
                p = False
                Exit For
            End If
        Next

        If p Then
            Dim a
            a = AscW(c)
            If a > 31 And a < 127 Then
                json_encode = json_encode & c
            ElseIf a > -1 Or a < 65535 Then
                json_encode = json_encode & "\u" & String(4 - Len(Hex(a)), "0") & Hex(a)
            End If
        End If
    Next
End Function

Private Function json_multiArray(aBD, iBC, sPS, ByRef sPT)   ' Array BoDy, Integer BaseCount, String PoSition
    Dim iDU, iDL, i ' Integer DimensionUBound, Integer DimensionLBound
    On Error Resume Next
    iDL = LBound(aBD, iBC)
    iDU = UBound(aBD, iBC)
    
    Dim sPB1, sPB2  ' String PointBuffer1, String PointBuffer2
    If Err.number = 9 Then
        sPB1 = sPT & sPS
        For i = 1 To Len(sPB1)
            If i <> 1 Then sPB2 = sPB2 & ","
            sPB2 = sPB2 & Mid$(sPB1, i, 1)
        Next
'        json_multiArray = json_multiArray & json_toString(Eval("aBD(" & sPB2 & ")"))
        json_multiArray = json_multiArray & json_toString(aBD(sPB2))
    Else
        sPT = sPT & sPS
        json_multiArray = json_multiArray & "["
        For i = iDL To iDU
            json_multiArray = json_multiArray & json_multiArray(aBD, iBC + 1, i, sPT)
            If i < iDU Then json_multiArray = json_multiArray & ","
        Next
        json_multiArray = json_multiArray & "]"
        sPT = Left(sPT, iBC - 2)
    End If
    Err.Clear
End Function

Public Function getOs()
    getOs = Application.OperatingSystem
    Debug.Print getOs
End Function
Attribute VB_Name = "RowText"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private image_path As String                '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private msg_count As Long                   '|fffd||fffd||fffd||f5||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd|
Private balance As Long                     '|fffd||73e||fffd|
Private image                               '|fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private time                                '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||f0||fffd|
Private total_charge As Long                '|fffd||fffd| |fffd||fffd||fffd||6b1||77e||fffd|
Private json_string As String               'JSON |fffd||7bd||fffd||fffd||fffd|
Private msg_arr() As String                 '|fffd||7bd||fffd||fffd||fffd| |fffd||8fed|
Private auth As Authentication              'Authentication |16c||fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private resp As Response                    'Response |16c||fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private Msg As New message                  'Message |16c||fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private sendObj As mSend                    'mSend |16c||fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private recipients_addr As String           '|fffd||fffd||fffd||fffd||fffd||6bf||fffd| |fffd||fffd| |fffd||5bc||fffd|
Private message_addr As String              '|fffd||7bd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||5bc||fffd|
Private recipients_range As Range           '|fffd||fffd||fffd||fffd||fffd||6bf||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
Private message_range As Range              '|fffd||7bd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
Private sender As String                    '|fffd||7fd||fffd||fffd||fffd| |fffd||fffd||223|
Private sender_range As Range               '|fffd||7fd||fffd||fffd||fffd| |fffd||fffd||223||fffd||fffd|
Private error_count As Long                 '|fffd||fffd||fffd||fffd| |12b||fffd||fffd||1ae|
Private error_pass As Boolean               '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f0||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

'RowText Class Constructor
Private Sub Class_Initialize()
    recipients_addr = Send_form.RefEdit2.value
    message_addr = Send_form.RefEdit3.value
    image_path = Send_form.image2_name
    Set image = Send_form.Image2
    balance = Send_form.getBalance          '|fffd||73e||fffd| |fffd||fffd||fffd||fffd|
    error_pass = False
    SendFormHelpers.init
    
    Call preview
End Sub


'|fffd||fffd||fffd||6bf||fffd| |fffd||2bf||fffd||fffd||fffd| |fffd||2b5||fffd| |fc||169|
Private Function checkRequiredFields()
    checkRequiredFields = True
    
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||223| |fc||169|
    If recipients_addr = vbNullString Then
        MsgBox "|fffd||fffd||fffd||179||fffd||223||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||3f4||fffd|."
        Exit Function
    ElseIf message_addr = vbNullString Then
    '|fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fc||169|
        MsgBox "|fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||3f4||fffd|."
        Exit Function
    End If
    
    '|fffd||7fd||fffd| |fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fc||169|
    If Send_form.SenderIdList2.value = "" Then
        MsgBox "|fffd||7fd||fffd||fffd||fffd| |fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
        Exit Function
    End If
    
    '|fffd||7fd||179||fffd||223||fffd||fffd| |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||5b4||fffd||fffd||fffd| |22e||fffd||fffd|
    If Not Send_form.SenderIdList2.MatchFound Then
        MsgBox "|fffd||7fd||fffd| |fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||2bd||fffd||fffd||3f4||fffd|.", vbCritical
        Exit Function
    End If
    
    sender = Send_form.SenderIdList2.value
    Set recipients_range = Range(recipients_addr)
    Set message_range = Range(message_addr)
    
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||223||fffd||fffd||fffd||fffd| |fffd||7bd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fc||169|
    If Not SendFormHelpers.get_row_count(recipients_addr) = SendFormHelpers.get_row_count(message_addr) Then
        MsgBox "|fffd||fffd||fffd||f5||fffd| |fffd||fffd||fffd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||2bd||fffd||fffd||3f4||fffd|." & vbCrLf & _
                "|fffd||fffd||fffd||f5||fffd| |fffd||fffd||fffd||179||fffd||223|.count(" & SendFormHelpers.get_row_count(recipients_addr) & ")" & vbCrLf & _
                "|fffd||fffd||fffd||f5||fffd| |fffd||fffd||fffd||fffd||fffd||b3||fffd||fffd||fffd|.count(" & SendFormHelpers.get_row_count(message_addr) & ")", vbCritical
        Exit Function
    End If

    If SendFormHelpers.onlyDigits(recipients_range.Rows.Address) <> SendFormHelpers.onlyDigits(message_range.Rows.Address) Then
        If MsgBox("|fffd||fffd||fffd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||f5||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||2bd||fffd||fffd||3f4||fffd|." & vbCrLf & _
        "|fffd||fffd||fffd||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo) = vbNo Then
            Exit Function
        End If
    End If
    
    checkRequiredFields = False
End Function


'|fffd||338||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
Private Sub preview()
    '|fffd||7bd||fffd||fffd||fffd||fffd||fffd| |fffd||2bf||fffd||fffd||fffd| |fffd||fffd| |fffd||2b5||fffd| |fc||169|
    If checkRequiredFields Then
        Exit Sub
    End If
    
    Call SendFormHelpers.checkDuplicate(recipients_addr)
    
    Dim duplicated_count As Integer
    Dim i As Long, j As Long
    Dim recipient_number As String
    
    msg_count = SendFormHelpers.get_row_count(recipients_addr)
    
    Debug.Print "Msg Count : "
    Debug.Print msg_count
    ReDim msg_arr(msg_count - 2, 4)
    
    duplicated_count = 0
    j = 0
    For i = 2 To msg_count
        recipient_number = SendFormHelpers.onlyDigits(recipients_range.Cells(i, 1))
        'Debug.Print j
        
        '|fffd||fffd||fffd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||47e||ec28|
        If recipient_number = "" Then
            error_count = error_count + 1
            GoTo endLoop
        End If
        
        '|fffd||7fa||fffd| |fffd||fffd||223|
        If SendFormHelpers.skip_duplicate And SendFormHelpers.isDuplicated(recipient_number) Then
            duplicated_count = duplicated_count + 1
            GoTo endLoop
        End If
                
        '|fffd||fffd||fffd||179||fffd||223||fffd||fffd| valid_phone |fffd||fffd| |fffd||1b4||3f8||fffd| |fffd||47e||ec28|
        If Not SendFormHelpers.is_valid_cellphone(recipient_number) Then
            error_count = error_count + 1
            GoTo endLoop
        End If
        
        '|fffd||fffd||fffd||fffd||fffd||6b9||fffd||223| |fffd||fffd||fffd||fffd|
        msg_arr(j, 0) = recipient_number
        
        '|fffd||7bd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        msg_arr(j, 1) = message_range.Cells(i, 1)
        
        '|fffd||7fd||fffd||fffd||fffd| |fffd||fffd||223| |fffd||fffd||fffd||fffd|
        msg_arr(j, 2) = sender
        
        '|fffd||7bd||fffd||fffd||fffd| |178||fffd||fffd| |fffd||fffd||fffd||fffd|
        If Not image.Picture Is Nothing Then
            msg_arr(j, 3) = "MMS"
        ElseIf SendFormHelpers.LenMbcs(msg_arr(j, 1)) > 90 Then
            msg_arr(j, 3) = "LMS"
        Else
            msg_arr(j, 3) = "SMS"
        End If
        
        DoEvents
        j = j + 1
    
    '|fffd||7fc||6f0||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||223| |fffd||fffd||fffd||fffd||16d| j |fffd||fffd| |12b||fffd||fffd||1ae||fffd||3ff||fffd||fffd||fffd||fffd||1f7||fffd|, msg_count |fffd||fffd| j|fffd||fffd| |fffd||fffd||fffd||fffd|
    msg_count = j
    '|fffd||7fc||6f0||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||6b0||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, exit
    If msg_count = 0 Then
        MsgBox "|fffd||7fc||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
        Exit Sub
    End If
    
    If error_pass = False And error_count > 0 Then
        error_pass = True
        If MsgBox("|fffd||537||fffd||fffd||fffd| |fffd||fffd||fffd||179||fffd||223||fffd||fffd| " & error_count & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||1fe||fffd||fffd||fffd||fffd||3f4||fffd|. |fffd||fffd||fffd| |fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo) = vbNo Then
            Call set_preview(msg_arr)
            Exit Sub
        End If
    End If
    
endLoop:
        SendFormHelpers.update_progressBar i, msg_count, 2, "|fffd||338||fffd||fffd||fffd||fffd||fffd| |fffd||63a||fffd||fffd||fffd|..."
    Next
    
    SendFormHelpers.update_progressBar 1, 1, 2, "|fffd||338||fffd||fffd||fffd||fffd||fffd| |fffd||3f7||fffd|"
    
    Send_form.frame8.caption = "|fffd||338||fffd||fffd||fffd||fffd||fffd| (" & msg_count & "|fffd||fffd|)"
    Send_form.CommandButton7.Enabled = True

    '|fffd||338||fffd||fffd||fffd||fffd||2fe1| |fffd||5be||fffd||fffd||634||fffd|.
    If UBound(msg_arr) - error_count - duplicated_count < j Then
        Call set_preview(msg_arr)
        Exit Sub
    End If
End Sub

'array|fffd||fffd| |fffd||338||fffd||fffd||fffd||fffd||2fe1| |fffd||5b1||fffd|
Public Function set_preview(msg_arr)
    With Send_form.ListBox1
        .Clear
        .ColumnHeads = False
        .ColumnCount = 4
        .list = msg_arr
        .ColumnWidths = "57;95;57;35"
    End With
End Function


'Send |fffd||7bc||4b5||fffd|
Public Sub send()
    Dim i As Long, j As Long, result As Integer
    Dim scheduled_msg As String
    Dim msg_arrs() As Variant     '|fffd||7fc||fffd||fffd||fffd| |fffd||7bd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||8fed||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||8fed|
    Set auth = New Authentication
    Set resp = New Response
    Set Msg = New message
    Set sendObj = New mSend
    
    '|fffd||339||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Not image.Picture Is Nothing Then
        Msg.set_image = image_path
        Msg.set_type = "MMS"
        Msg.set_image_encoding = "base64"
    End If
    
    total_charge = 0
    '|fffd||fffd||fc| |fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1000|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||16d| |fffd||8fed| |fffd||4b4||fffd| - (0~999 = 1000|fffd||fffd|)
    ReDim msg_arrs(Int(msg_count / 999))
    Dim position As Long
    position = 0
    Dim ubound_limit As Long
    
    scheduled_msg = ""
    For j = 0 To UBound(msg_arrs)
        'Extension |fffd||fffd||fffd||fffd|
        position = j * 999
        json_string = "["
        ubound_limit = (j + 1) * 999
        
        '1000|fffd||fffd||fffd||33b||fffd||fffd||3f6||fffd| position |fffd||fffd| upbound_limit |fffd||fffd||fffd||fffd||5b1||fffd| (|fffd||337||fffd||fffd||fffd| |fffd||fffd||fffd||3f8||fffd| |fffd||fffd||fffd||6f0||fffd||fffd||fffd| |fffd||fffd||fffd||330||fffd| |fffd||fffd|)
        If ubound_limit > msg_count Then
            ubound_limit = msg_count - 1
            position = position + j
        End If
    
        For i = position To ubound_limit
            json_string = json_string + "{""to"":" & RestHelpers.ConvertToJSON(msg_arr(i, 0)) & _
                          ", ""text"": " & RestHelpers.ConvertToJSON(msg_arr(i, 1)) & _
                          ", ""from"": " & RestHelpers.ConvertToJSON(msg_arr(i, 2)) & _
                          ", ""type"": " & RestHelpers.ConvertToJSON(msg_arr(i, 3)) & "}"
                                            
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3f6||fffd| |f3||fffd||fffd|
            If Send_form.scheduled_message_2 = True Then
                json_string = Left(json_string, Len(json_string) - 1)
                json_string = json_string + ", ""datetime"":" & onlyDigits(Send_form.scheduled_date_2) & Send_form.scheduled_hour_2 & Send_form.scheduled_minute_2 & Send_form.scheduled_second_2 & "}"
                scheduled_msg = "|fffd||fffd||fffd||cef||a5| : " & Send_form.scheduled_date_2 & " " & Send_form.scheduled_hour_2 & "|fffd||fffd| " & Send_form.scheduled_minute_2 & "|fffd||fffd| " & Send_form.scheduled_second_2 & "|fffd||fffd|" & vbCrLf
            End If
        
            '|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|
            total_charge = total_charge + SendFormHelpers.calculate_charge(msg_arr(i, 3))
            If msg_count <> 0 And i <> ubound_limit Then
                json_string = json_string + ","
            End If
            
            'progressBar update
            SendFormHelpers.update_progressBar j * 999, msg_count, 2, "|fffd||7fc||fffd||fffd||63a||fffd||fffd||fffd|..."
            DoEvents
        Next i
        json_string = json_string + "]"
        msg_arrs(j) = json_string
    Next j
    
    '|fffd||73e||fffd| |fc||169|
    If Not SendFormHelpers.check_avail_balance(balance, total_charge) Then
        If MsgBox("|fffd||fffd||fffd||fffd| |fffd||73e||fffd||fffd||fffd| " & balance & "|fffd||534||3f4||fffd|." & vbCrLf & _
        "|fffd||73e||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||574||3f4||fffd|.CoolSMS |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||6e6e||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||3f1||fffd|") = vbYes Then
            ActiveWorkbook.FollowHyperlink "http://www.coolsms.co.kr/recharge"
        End If
        GoTo gotoEnd
    End If
    
    If MsgBox(scheduled_msg + "|fffd||fffd||fffd||fffd| |fffd||73e||fffd||fffd||fffd| " & balance & " |fffd||fffd| |fffd||534||3f4||fffd|." & vbCrLf & _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b4||fffd| " & msg_count & "|fffd||1fc||fffd||fffd||534||3f4||fffd|. " & vbCrLf & _
           "|fffd||fffd| |fffd||77e||fffd| : " & total_charge & "|fffd||fffd|" & vbCrLf & _
           "|fffd||7fc||fffd||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|? ", vbYesNo, "|fffd||fffd||fffd||6b9||7fc||fffd|") = vbYes Then
        SendFormHelpers.reset_progressBar 2
        time = Timer
        
        For i = 0 To UBound(msg_arrs)
            'progressBar update
            SendFormHelpers.update_progressBar i, UBound(msg_arrs), 2, "|fffd||fffd||fffd||6b9||7fc||fffd||fffd||fffd|..."
            DoEvents
            Msg.set_extension = msg_arrs(i)
            sendObj.set_message Msg
            result = REST.Connect(auth, resp, sendObj)
            Set auth = Nothing
            Set auth = New Authentication
        Next i
        SendFormHelpers.update_progressBar 2, 2, 2, "|fffd||7fc||6ff||3f7||fffd|"
        
        If result Then
            time = Timer - time
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||f0||fffd| : " & time & "|fffd||fffd|" & vbCrLf & "|fffd||fffd||fffd||6ff||3f7||fffd|"
        Else
            MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        End If
    Else
        Send_form.frame8.caption = "|fffd||338||fffd||fffd||fffd||fffd||fffd| (  |fffd||fffd|)"
        SendFormHelpers.reset_progressBar (2)
        MsgBox "|fffd||fffd||fffd||fffd| |fffd||7fc||fffd||fffd||fffd| |fffd||fffd||4b5||1fe||fffd||fffd||fffd||fffd||3f4||fffd|.", vbInformation
    End If

gotoEnd:
    Set auth = Nothing
    Set resp = Nothing
    Set Msg = Nothing
    Set sendObj = Nothing
    Erase msg_arrs
End Sub

'|fffd||fffd||fffd||fffd||1ae| |fffd||6bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'msg_arr |fffd||8fed||fffd||fffd| public |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||4bc||fffd| |fffd||fffd||fffd||ef2d| send_form.ListBox1_click |fffd||fffd| rowText |fffd||23f||fffd| |fffd||fffd||fffd||fffd|
Public Sub ShowListboxContent(list_index As Long)
    Dim msgbox_content As String
    If msg_arr(list_index, 0) = "" Or msg_arr(list_index, 1) = "" Or msg_arr(list_index, 2) = "" Then
        Exit Sub
    End If
    msgbox_content = "<""|fffd||fffd||fffd||179||fffd||223|"" : """ & msg_arr(list_index, 0) & """>" & vbCrLf & _
                     "<""|fffd||fffd||fffd||6b3||fffd||fffd||fffd|"" : """ & msg_arr(list_index, 1) & """>" & vbCrLf & _
                     "<""|fffd||7fd||179||fffd||223|"" : """ & msg_arr(list_index, 2) & """>" & vbCrLf & _
                     "<""|fffd||fffd||fffd||fffd||178||fffd||fffd|"" : """ & msg_arr(list_index, 3) & """>" & vbCrLf
    If Not image.Picture Is Nothing Then
        msgbox_content = msgbox_content + "<""image"" : """ & image_path & """>" & vbCrLf
    End If
    MsgBox msgbox_content
End Sub


Attribute VB_Name = "SendFormHelpers"
Option Explicit
'Mouse Cursor
Public Const MOUSE_CLICK As Long = 32649
  
'UI |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||3f6||fffd| |fffd||fffd||fffd||fffd||fffd||1f4||fffd| |fffd||fffd||fffd||fffd|
Public SizeCoefficient As Double

'Message |fffd||fffd||fffd||fffd|
Private checked_numbers As Object       '|fffd||339||fffd| |fffd||7fa||fffd||fffd||2fb||7e26| |fffd||fffd||fffd||fffd| |fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd|
Private sender_msg As String            '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||1fc||fffd| |fffd||2f8||fffd| |fffd||7bd||fffd||fffd||fffd|
Private first_sender_num As String      '|f9||fffd||fffd||b0| |fffd||fffd||fffd||179||fffd||223|
Public skip_duplicate As Boolean        '|fffd||7fa||fffd||fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f0||fffd| |fffd||fffd||fffd||fffd|
Public total_send_count As Long         '|fffd||7fc||6f5||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd|

'Initialize
Public Function init()
    Set checked_numbers = CreateObject("Scripting.Dictionary")
    total_send_count = 0
    first_sender_num = ""
    skip_duplicate = False
End Function

'|fffd||339||fffd| |fffd||7fa||fffd||fc||169||fffd||fffd| |fffd||fffd||fffd||678||fffd| true |fffd||1b4||3f6||fffd||fffd| false
Private Function isAlreadyChecked(number As String) As Boolean
    isAlreadyChecked = True
    number = Trim(number)

    If checked_numbers Is Nothing Then
        Set checked_numbers = CreateObject("Scripting.Dictionary")
    End If

    '|fffd||7fa||fffd||fffd||fffd||223||fffd||fffd| checked_number|fffd||fffd| insert |fffd||fffd| |fffd||7fa||fffd| |12b||fffd||fffd||1ae||fffd||fffd| value|fffd||fffd|
    If Not checked_numbers.exists(number) Then
        checked_numbers.Add number, 1
        isAlreadyChecked = False
    Else
        checked_numbers.Item(number) = checked_numbers.Item(number) + 1
    End If
End Function

'|fffd||7fa||fffd||fc||169|
Public Function checkDuplicate(recipients_target)
    checkDuplicate = True
    
    Dim duplicate_count As Integer
    Dim i As Integer
    Dim row_count As Long
    Dim recipient_range As Range
    Dim c As Range, r As Range
    Dim target_number As String, first_address As String, target_string As String
    
    Set recipient_range = Range(recipients_target)
    Application.ScreenUpdating = False
    
    target_string = recipients_target
    row_count = get_row_count(target_string)
    i = 0
    With recipient_range
        For Each r In recipient_range
            If i = row_count Then
                GoTo ExitLoop
            End If
            
            If Not r = "" Then
                If isAlreadyChecked(r.text) Then
                    duplicate_count = duplicate_count + 1
                End If
            End If
            
            i = i + 1
        Next r
    End With
    
ExitLoop:
    If duplicate_count <> 0 Then
        If MsgBox("|fffd||7fa||fffd||fffd||fffd| |fffd||fffd||fffd||179||fffd||223||fffd||fffd| |fffd||5bd||fffd||fffd||3f4||fffd|. |fffd||7fa||fffd||fffd||fffd| |fffd||fffd||223||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo) = vbYes Then
            skip_duplicate = True
        End If
    End If
    
    Application.ScreenUpdating = True
    checkDuplicate = False
End Function

'|fffd||634||fffd| |fffd||fffd||223||fffd||fffd| |fffd||7fa||fffd||fffd||fffd||fffd||fffd| |22e||fffd||fffd|
Public Function isDuplicated(number As String) As Boolean
    isDuplicated = False
    number = Trim(number)
        
    If checked_numbers Is Nothing Then
        Exit Function
    End If
        
    If checked_numbers.exists(number) And checked_numbers.Item(number) > 1 Then
        checked_numbers.Item(number) = checked_numbers.Item(number) - 1
        isDuplicated = True
    End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|(range)|fffd||fffd| |fffd||537||b5||fffd| |fffd||fffd||223||fffd||fffd| 1000|fffd||fffd||fffd||fffd| |fffd||8fed||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Function get_recipients_number(ref_value As String, ByVal index As Long) As String
    Dim SelRange As Range
    Dim sender_number As String
    Dim error_count As Long, i As Long
    Dim lower_limit As Long, upper_limit As Long, limit As Long
    Dim target As String
    Dim cell

    sender_msg = ""
    i = 0
    error_count = 0
    lower_limit = index * 999
    upper_limit = (index + 1) * 999
    limit = get_row_count(ref_value)
    
    If ref_value = "" Then
        Exit Function
    End If
    
    Set SelRange = Range(ref_value)
    
    For Each cell In SelRange
        If i >= limit Then
            GoTo ExitLoop
        End If
        
        target = onlyDigits(cell.value)
        If i < lower_limit Then
            GoTo ContinueLoop
        ElseIf i >= upper_limit Then
            GoTo ExitLoop
        End If
                
        '|fffd||7fa||fffd| |fffd||fffd||223|
        If skip_duplicate And isDuplicated(target) Then
            GoTo ContinueLoop
        End If
        
        '|fffd||fffd||fffd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||47e||ec28|
        If target = "" Then
            error_count = error_count + 1
            GoTo ContinueLoop
        End If
        
        '|fffd||3f4||fffd| |fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fc||169|
        If Not IsNumeric(target) Then
            error_count = error_count + 1
            GoTo ContinueLoop
        End If
        
        '|fffd||f9||678||fffd| |fffd||fffd||22d||fffd||fffd||223||fffd||fffd||fffd||fffd| |fc||169|
        If Not is_valid_cellphone(target) Then
            error_count = error_count + 1
            GoTo ContinueLoop
        End If
        
        'sender msg |fffd||fffd||fffd||fffd|
        If first_sender_num = "" Then
            first_sender_num = target
        End If
        
        'sender_number |fffd||fffd| |f3||fffd||fffd||fffd||3b0||fffd||cfe1||fffd||fffd| default |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        If sender_number = "" Then
            sender_number = target
            total_send_count = total_send_count + 1
        Else
            sender_number = sender_number & ", " & target
            total_send_count = total_send_count + 1
        End If
ContinueLoop:
        i = i + 1
    Next
ExitLoop:
    'message |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||4b0||fffd||fffd|
    If total_send_count = 0 Then
        sender_msg = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||5b4||fffd| |fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd|."
    ElseIf total_send_count > 1 Then
        sender_msg = first_sender_num & " |fffd||fffd| " & total_send_count - 1 & "|fffd||fffd|"
    Else
        sender_msg = first_sender_num
    End If
    
    get_recipients_number = sender_number
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|(range)|fffd||fffd| |fffd||537||b5||fffd| |fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Function get_recipients(ref_value As String) As String
    Dim msg_count As Integer, i As Integer
    
    msg_count = get_row_count(ref_value)
    msg_count = Int(msg_count / 999)
    
    For i = 0 To msg_count
        Call get_recipients_number(ref_value, i)
    Next i

    get_recipients = sender_msg
End Function

'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||6fd||fffd| |fffd||fffd| |fffd||338||fffd||fffd||fffd||fffd||fffd| |fffd||63a||fffd||ff||fffd| progressBar |fffd||fffd||fffd||fffd||fffd||fffd||1ae| (opt : 1=|fffd||2ebb||fffd||fffd||fffd||fffd|, 2=|fffd||fffd| |fffd||fffd||fffd||fffd|, 3=|121||22f| |fffd||fffd||fffd||fffd|, 4=|fffd||2f8||fffd||fffd||fffd|)
Public Sub update_progressBar(ByVal cur_val As Long, ByVal total_val As Long, opt As Integer, Optional caption As String)
    Dim percent As Single, x As Double
    If cur_val = 0 Then cur_val = 1
    If total_val = 0 Then total_val = 1
    percent = Int((cur_val / total_val) * 100)
    Send_form.Controls("lbl_percent" & opt).caption = percent & " %"
    Send_form.Controls("progressBar" & opt).width = (Send_form.width - 17) / 100 * percent
    Send_form.Controls("progressBar" & opt).BackColor = &HFF0000
    If Not caption = vbNullString Then
        Send_form.Controls("lbl_status" & opt).caption = caption
    Else
        Send_form.Controls("lbl_status" & opt).Visible = False
    End If
End Sub

'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||b9||fffd| |fffd||2b1||fffd||22d|
Public Sub reset_progressBar(opt As Integer)
    Send_form.Controls("lbl_percent" & opt).caption = "0 %"
    Send_form.Controls("progressBar" & opt).width = 306
    Send_form.Controls("progressBar" & opt).BackColor = &H8000000B
    Send_form.Controls("lbl_status" & opt).caption = ""
End Sub

'|fffd||fffd||fffd||fffd| |178||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Function calculate_charge(msg_type As String) As Long
    msg_type = UCase(msg_type)
    Select Case msg_type
        Case "ATA":
            calculate_charge = 15
        Case "SMS":
            calculate_charge = 20
        Case "LMS":
            calculate_charge = 50
        Case "MMS":
            calculate_charge = 200
    End Select
End Function

'|fffd||73e||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||6b8||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||5b4||fffd||fffd||fffd| |22e||fffd||fffd|
Public Function check_avail_balance(ByVal balance As Long, total As Long) As Boolean
    If balance >= total Then
        check_avail_balance = True
    Else
        check_avail_balance = False
    End If
End Function

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||22d||fffd||fffd||223||fffd||fffd||fffd||fffd| |fffd||2fb||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| mdlUtility |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
Function is_valid_cellphone(CellNumber As String)
    Dim Prefix As String
    
    '|fffd||fffd||22d||fffd||fffd||223||fffd||fffd| |fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||378||fffd|
    CellNumber = onlyDigits(CellNumber)
    If Mid(CellNumber, 1, 1) = "1" Then
        CellNumber = "0" & CellNumber
    End If
    '|fffd||fffd||22d||fffd||fffd||223| |fffd||fffd| 4|fffd||6b8||fffd||fffd||fffd| 0504 |fffd||338||9f2d| |fffd||fffd||22d||fffd||fffd||223||fffd||fffd| 10|fffd||6b8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| True
    Prefix = Mid(CellNumber, 1, 4)
    If Prefix = "0504" And Len(CellNumber) >= 10 Then
        is_valid_cellphone = True
    Else
    '|fffd||fffd||22d||fffd||fffd||223| |fffd||fffd| 3|fffd||6b8||fffd||fffd||fffd| |fffd||1b7||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||22d||fffd||fffd||223||fffd||fffd| 10|fffd||6b8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| True
        Prefix = Mid(CellNumber, 1, 3)
        Select Case Prefix
            Case "011", "016", "017", "018", "019", "010", "070", "012"
                If Len(CellNumber) >= 10 Then
                    is_valid_cellphone = True
                End If
            Case Else
                is_valid_cellphone = False
        End Select
    End If
End Function

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||537||b5||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Function MouseCursor(CursorType As Long)
  Dim lngRet As Long
  
  lngRet = LoadCursorBynum(0&, CursorType)
  lngRet = SetCursor(lngRet)
End Function

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||3f7||fffd| |fffd||537||b5||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Function PointM(strPathToCursor As String)
  Dim lngRet As Long
  
  lngRet = LoadCursorFromFile(strPathToCursor)
  lngRet = SetCursor(lngRet)
End Function

'|fffd||537||b5||fffd| |fffd||fffd||1ae||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||6b8||fffd| |fffd||fffd||fffd||378||fffd|
Function onlyDigits(s As String) As String
    Dim retval As String    ' This is the return string.      '
    Dim i As Integer        ' Counter for character position. '
    
    retval = ""
    For i = 1 To Len(s)
        If Mid(s, i, 1) >= "0" And Mid(s, i, 1) <= "9" Then
            retval = retval + Mid(s, i, 1)
        End If
    Next
    onlyDigits = retval
End Function

'|fffd||8fed||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||2fb||fffd|
Public Function IsEmptyArray(InputArray As Variant) As Boolean

   On Error GoTo ErrHandler:
   IsEmptyArray = Not (UBound(InputArray) >= 0)
   Exit Function

ErrHandler:
   IsEmptyArray = True

End Function

'Registry |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||43e||fffd||fffd|
Function RegKeyRead(i_RegKey As String) As String
    Dim myWS As Object

    On Error Resume Next
    Set myWS = CreateObject("WScript.Shell")
    RegKeyRead = myWS.RegRead(i_RegKey)
End Function

'Registry |fffd||fffd| |1af||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub RegKeySave(i_RegKey As String, _
               i_Value As String, _
      Optional i_Type As String = "REG_SZ")
    Dim myWS As Object

    Set myWS = CreateObject("WScript.Shell")
    myWS.RegWrite i_RegKey, i_Value, i_Type
End Sub

'Registry |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |1af||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Function RegKeyDelete(i_RegKey As String) As Boolean
    Dim myWS As Object

    On Error GoTo ErrorHandler
    Set myWS = CreateObject("WScript.Shell")
    myWS.RegDelete i_RegKey
    RegKeyDelete = True
    Exit Function

ErrorHandler:
    RegKeyDelete = False
End Function

'|22d||fffd||fffd||fffd||fffd| |fffd||63b||fffd| |fffd||fffd||fffd||fffd||fffd||37c||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||3f1||fffd|
Public Sub adjust_screen()
    Dim w As Long, h As Long
    w = GetSystemMetrics32(0) ' width in points
    h = GetSystemMetrics32(1) ' height in points
    Debug.Print "width = " & w & "  height = " & h
    If w >= 2560 Then
        SizeCoefficient = 1
    ElseIf w >= 1920 Then
        SizeCoefficient = 1
    ElseIf w >= 1600 Then
        SizeCoefficient = 1
    ElseIf w >= 1440 Then
        SizeCoefficient = 1
    ElseIf w >= 1280 Then
        SizeCoefficient = 1
    End If
    ChangeUserFormAndControlsSize
End Sub


'|fffd||fffd||fffd||fffd||fffd||fffd| |169||fffd||2e38||16d| |fffd||fffd||fffd| UI control |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Sub ChangeUserFormAndControlsSize()
    Dim MyUserform As Object
    Dim ControlOnForm As Object
    Dim NameUserform As String
    'Enter the name of the UserForm
    NameUserform = "send_form"

    'Set MyUserform = ThisWorkbook.VBProject.VBComponents(NameUserform)
    With Send_form
        .height = .height * SizeCoefficient
        .width = .width * SizeCoefficient
    End With

    For Each ControlOnForm In Send_form.Controls
        With ControlOnForm
            .Top = .Top * SizeCoefficient
            .Left = .Left * SizeCoefficient
            .width = .width * SizeCoefficient
            .height = .height * SizeCoefficient
            On Error Resume Next
            .font.Size = .font.Size * SizeCoefficient
            On Error GoTo 0
        End With
    Next ControlOnForm
End Sub

'|fffd||339||fffd||fffd||fffd| |fffd||43e||fffd||fffd||fffd||fffd| - |fffd||2ebb|/|fffd||fffd|/|121||22f| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||339||fffd||fffd||fffd| |fffd||43e||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||3f4||fffd| |fffd||fffd||fffd|
Public Sub readImage(img As Object, txtbox As Object, image_name As String)
    Dim ImgFileFormat As String
    Dim img_path
    '|fffd||fffd||bc21||fffd||fffd||fffd||fffd| |fffd||339||fffd||fffd||fffd| |22e||fffd||fffd||fffd||fffd|
    ImgFileFormat = "Image Files (*.jpg; *.jpeg; *.bmp; *.gif; *.tif; *.tiff ), *.jpg; *.jpeg; *.png; *.bmp; *.gif; *.tif; *.tiff"
        
getFile:
    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |e2| |fffd||fffd||fffd||fffd|
    img_path = Application.GetOpenFilename(ImgFileFormat)
    If Not img_path = False Then
        With img
            .PictureSizeMode = fmPictureSizeModeStretch
            
            '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||ec21| 300kb |fffd||33b||fffd||fffd||fffd||fffd||fffd| |fc||169|
            If FileLen(img_path) > 300000 Then
                MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||ec21| |fffd||2b9||fffd| |16e||fffd||3f4||fffd|. " & vbCrLf & "(MaximumFileSize : 300kb)"
                GoTo getFile
            End If
        
            On Error GoTo errHandle:
            
            .Picture = LoadPicture(img_path)
            .width = Int(.Picture.width / 26.458)
            .height = Int(.Picture.height / 26.458)
            Debug.Print ("width : " & .width & "height : " & .height)
            
            If .width >= 2048 Or .height >= 2048 Then
                MsgBox "|fffd||fffd||fffd||fffd| |fffd||63b||fffd| |fffd||fffd||fffd||fffd||fffd||ec21| |fffd||2b9||fffd| |16e||fffd||3f4||fffd|. " & vbCrLf & "(MaximumResolutionSize : 2048 x 2048)"
                GoTo getFile
            End If
            
errHandle:
            'Check error number
            If Err.number <> 0 Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7f8||fffd| |fffd||1fe||fffd||fffd||fffd||fffd||3f4||fffd|. " & vbCrLf & "|f7||fffd||3b0||fffd||fffd||fffd||fffd||fffd| |fffd||339||fffd||fffd||fffd|(jpg/jpeg/png/bmp/gif/tif/tiff)"
                Resume getFile
            End If
            txtbox.value = Dir(img_path)
            image_name = img_path
        End With
    Else
        'image |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||67d||fffd| image |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||3f4||670||fffd| |fffd||fffd||fffd||fffd||3f8||fffd| |fffd||fffd||fffd||fffd| |fffd||43e||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||338||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|.
        '|fffd||1b7||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||635||fffd| |fffd||fffd||fffd||fffd| |fffd||43e||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||338||fffd||fffd||fffd| |fffd||5f4||fffd||fffd| |fffd||fffd||fffd||fffd|
        If img.Visible = True Then
            With txtbox
                .Visible = True
                .value = Dir(image_name)
                .height = 17
                .MaxLength = 10
                .BackColor = &H8000000B
                .Top = 120
            End With
        End If
    End If
End Sub

'|fffd||3fc||fffd||fffd||fffd| |fffd||471||fffd| |fffd||fffd||fffd||fffd||1ae| |fffd||fffd||fffd| |fffd||471||fffd|-2|fffd||fffd||fffd||fffd||1ae| |fffd||fffd||fffd||fffd| 1|fffd||fffd||fffd||fffd||1ae|
Function LenMbcs(ByVal str As String)
  LenMbcs = LenB(StrConv(str, vbFromUnicode))
End Function

'return row count
Public Function get_row_count(target As String) As Integer
    '|fffd||fffd||fffd||fffd| 2010 cell|fffd||fffd| |fffd||fffd||fc||fffd||fffd||fffd||fffd||fffd||3f8||fffd| Rows.count |fffd||fffd| 104875|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |f3||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||634||fffd|.
    If Range(target).Rows.count < 1048575 Then
        get_row_count = Range(target).Rows.count
        Exit Function
    End If
        
    get_row_count = Range(target).End(xlDown).Row
End Function

'|fffd||fffd||fffd||53d||fffd| |fffd||fffd||fffd||3ff||fffd| |fffd||b4||fffd| |fffd||fffd||fffd||6bf||fffd| |e3||fffd||fffd|
Public Function search_word(patrn, strng)
    Dim regEx, Match, Matches, s, i
    Dim ata_value_arr() As String
        
    ' Create the regular expression.
    Set regEx = New RegExp
    regEx.pattern = patrn
    regEx.IgnoreCase = True
    regEx.Global = True
    regEx.Multiline = True

    ' Do the search.
    Set Matches = regEx.Execute(strng)
    
    If Matches.count = 0 Then
        MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||2bd||fffd||fffd||3f4||fffd|.")
        Exit Function
    End If
    ReDim ata_value_arr(Matches.count - 1)
    
    ' Iterate through the Matches collection.
    s = ""
    i = 0
    For Each Match In Matches
        ata_value_arr(i) = Match.value
        i = i + 1
    Next
    
    search_word = ata_value_arr
End Function

'|fffd||fffd||fffd||53d||fffd| |fffd||fffd||fffd||3ff||fffd| |fffd||b4||fffd| |fffd||fffd||fffd||6bf||fffd| replace
Public Function replace_word(text, word, patrn)
    Dim regEx
    
    Set regEx = New RegExp
    regEx.pattern = patrn
    regEx.IgnoreCase = True
    regEx.Global = False
    regEx.Multiline = True
    
    replace_word = regEx.Replace(text, word)
End Function
Attribute VB_Name = "SendSMS"
Public merge_word() As String

Public Sub Run()
    Load login_form
    login_form.Show
End Sub

Public Function send(receiver As String, message As String, sender As String)
    '|fffd||2b1||2f33||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    CsInitialize
    check = RegKeyRead("HKCU\Software\COOLSMS\CSExceller\isApiKeyApiSecretSaved")
    
    '|fffd||6b5||fffd||fffd||3b1||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fc||169|
    If Not check = "True" Then
        MsgBox "|fffd||3f87d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| send |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||3fd||f7||fffd||fffd||fffd| " & vbCrLf & _
                "|22f||fffd||6f33||fffd||fffd| > |fffd||6b5||fffd||fffd||3b1||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3fc||17e||fffd||fffd||574||3f4||fffd|.", vbInformation
        send = "|fffd||3b1||fffd||fffd||3bf||fffd||fffd||fffd|"
        Load login_form
        login_form.Show
        Exit Function
    End If
    
    Dim Msg As message
    Dim sendObj As mSend
    Dim msg_type As String
    Dim auth As Authentication
    Dim resp As Response
    
    Set Msg = New message
    Set sendObj = New mSend
    Set auth = New Authentication
    Set resp = New Response
    
    '|fffd||7bd||fffd||fffd||fffd| |178||fffd||fffd| |fffd||fffd||fffd||fffd|
    msg_type = "SMS"
    If SendFormHelpers.LenMbcs(message) > 90 Then
        msg_type = "LMS"
    End If
    
    '|fffd||fffd||fffd||fffd| |fffd||73e||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    balance = Send_form.getBalance
    
    With Msg
        .set_to = receiver
        .set_from = sender
        .set_text = message
        .set_type = msg_type
    End With
    
    '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Select Case msg_type
        Case "SMS"
            charge = 20
        Case "LMS"
            charge = 50
    End Select
    Debug.Print reciever & " " & sender & " " & message
    If balance > charge Then
        sendObj.set_message Msg
        send = REST.Connect(auth, resp, sendObj)
        send = "|fffd||fffd||fffd||fffd||7fc||fffd|"
    Else
        send = "|fffd||73e||5fe||fffd||fffd||fffd|"
    End If
    
End Function




Attribute VB_Name = "Send_form"
Attribute VB_Base = "0{2C24CADA-93DB-4E92-ABCE-118D26AA5E96}{D08935BC-4A02-4F26-BD1E-CEE1FD5B14DC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private oNormalText As NormalText               '|fffd||2ebb||fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private oRowText As RowText                     '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private oSubstituteText As SubstituteText       '|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private oAlimtalk As AlimTalk                   '|fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fc|
Private sent_data() As String

Private image_warning_control As Boolean        '|fffd||fffd||fffd||fffd| |f7||fffd||3bd||fffd| MMS |fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||7bd||fffd||fffd||fffd|
Public inc_count As Integer                     '|121||22f||fffd||73e||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public ata_value_count As Integer               '|fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private ata_value_arr() As String               '|fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Array
Public image1_name As String                    '|fffd||2ebb| |fffd||fffd||fffd||6bf||fffd| |f7||fffd||3b5||fffd| |fffd||339||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public image2_name As String                    '|fffd||fffd| |fffd||fffd||fffd||6bf||fffd| |f7||fffd||3b5||fffd| |fffd||339||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public image3_name As String                    '|121||22f| |fffd||fffd||fffd||6bf||fffd| |f7||fffd||3b5||fffd| |fffd||339||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

Public target_list As Object                    '|fffd||7fd||179||fffd||223| |178||fffd||fffd| |fffd||fffd||fffd||fffd||1ae|

Private WithEvents Calendar1 As cCalendar       '|fffd||fffd||fffd||6f0||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7b7||fffd|
Attribute Calendar1.VB_VarHelpID = -1
Private WithEvents Calendar2 As cCalendar       '|fffd||fffd||fffd||6f0||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7b7||fffd|
Attribute Calendar2.VB_VarHelpID = -1
Private current_page As Integer                 '|fffd||fffd||fffd||6f0||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private entered_senderid As String              '|fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

' |fffd||7fd||179||fffd||223| |fffd||7f0||fffd| |fffd||fffd||1b0|
Private Sub senderid_add_btn_Click()
    Set target_list = SenderIdList1
    senderid_help_form.Show
End Sub
Private Sub senderid_add_btn2_Click()
    Set target_list = SenderIdList2
    senderid_help_form.Show
End Sub
Private Sub senderid_add_btn3_Click()
    Set target_list = SenderIdList3
    senderid_help_form.Show
End Sub
Private Sub senderid_add_btn4_Click()
    Set target_list = SenderIdList4
    senderid_help_form.Show
End Sub

Public Sub HandleExit(cbo As MSForms.ComboBox, Cancel As MSForms.ReturnBoolean)
With cbo
    If Not .text = "" Then
        If .MatchFound = False And Send_form.Visible Then
            MsgBox "|fffd||7fd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||f5||fffd||fffd||fffd| |fffd||2be||4b0||173||fffd|, |fffd||7f8||fffd||fffd||fffd| |fffd||fffd||223||fffd||534||3f4||fffd|. '|fffd||7f0||fffd|'|fffd||fffd||1b0||fffd||fffd| |16c||fffd||fffd||fffd||3ff||fffd| |fffd||7fd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||3fd||fffd| |fffd||fffd||22d||fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||3fc||fffd||fffd||fffd|.", vbExclamation
            .text = ""
            Cancel = True
            .SelStart = 0
            .SelLength = Len(.value)
        End If
    End If
End With
End Sub

'|fffd||2ebb||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||f5||fffd| |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub SenderIdList1_Click()
    entered_senderid = SenderIdList1.value
End Sub
'|fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||f5||fffd| |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub SenderIdList2_Click()
    entered_senderid = SenderIdList2.value
End Sub
'|121||22f||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||f5||fffd| |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub SenderIdList3_Click()
    entered_senderid = SenderIdList3.value
End Sub
'|fffd||2f8||fffd||fffd||fffd| - |fffd||fffd||fffd||f5||fffd| |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub SenderIdList4_Click()
    entered_senderid = SenderIdList4.value
End Sub

'|fffd||2ebb| |fffd||fffd||fffd||fffd| - |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd| |22e||fffd||fffd|
Private Sub SenderIdList1_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    HandleExit SenderIdList1, Cancel
End Sub
'|fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd| |22e||fffd||fffd|
Private Sub SenderIdList2_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    HandleExit SenderIdList2, Cancel
End Sub
'|121||22f| |fffd||fffd||fffd||fffd| - |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd| |22e||fffd||fffd|
Private Sub SenderIdList3_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    HandleExit SenderIdList3, Cancel
End Sub
'|fffd||2f8||fffd||fffd||fffd| - |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd| |22e||fffd||fffd|
Private Sub SenderIdList4_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    HandleExit SenderIdList4, Cancel
End Sub

'UserForm activate - debug.print |fffd||6f5||fffd||fffd||fffd||fffd||fffd|
Private Sub UserForm_Activate()
    'SendFormHelpers.adjust_screen
    SendFormHelpers.SizeCoefficient = 1
    '|fffd||6b5||fffd||fffd||3b1||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |22f||fffd||6f33||fffd||fffd||fffd||fffd| apikey & apisecret |fffd||fffd||fffd||fffd|
    If SendFormHelpers.RegKeyRead(cs_isApiKeyApiSecretSaved) = "True" Then
        Label53.caption = SendFormHelpers.RegKeyRead(cs_ApiKey)
        Label54.caption = SendFormHelpers.RegKeyRead(cs_ApiSecret)
        TextBox8.Visible = False
        TextBox9.Visible = False
        Label53.Visible = True
        Label54.Visible = True
        CommandButton14.caption = "|fffd||fffd| |fffd||fffd|"
    End If
    
    Call set_alimtalk_info
    
    'MMS |fffd||339||fffd||fffd||fffd| |fffd||7f0||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |22e||fffd||fffd|
    image_warning_control = True
    
    '|fffd||fffd||fffd||6f0||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| & |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7b7||fffd|
    Set Calendar1 = New cCalendar
    Set Calendar2 = New cCalendar
    Calendar1.Add_Calendar_into_Frame frame_calendar_start
    Calendar2.Add_Calendar_into_Frame frame_calendar_end
    
    '|fffd||fffd||fffd||6f0||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||6b5||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7f0||fffd|
    ComboBox1.AddItem "|fffd||fffd||fc||fffd||fffd||fffd||fffd|", 0
    ComboBox1.AddItem "|fffd||fffd||fffd||6fc||fffd||fffd||fffd|(00)", 1
    ComboBox1.AddItem "|fffd||fffd||fffd||6f0||fffd||3be||fffd||fffd||fffd|(58)", 2
    ComboBox1.AddItem "|fffd||fffd||fffd||6f4||fffd||fffd|(99)", 3
    ComboBox1.AddItem "|fffd||fffd||fffd||6fd||fffd||fffd||fffd|(56)", 4
    ComboBox1.AddItem "|fffd||fffd||fffd||6fd||fffd||fffd||fffd|(57)", 5
    
    '|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |12b||fffd||fffd||1ae|
    If inc_count = 0 Then
        inc_count = 1
    End If
    
    '|fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |12b||fffd||fffd||1ae|
    If ata_value_count = 0 Then
        ata_value_count = 1
    End If
    
    '|fffd||fffd||fffd||e6e||fffd||fffd| |fffd||f0||fffd|,|fffd||fffd|,|fffd||fffd| |fffd||fffd||fffd||fffd||1ae| |fffd||fffd||fffd||fffd|
    Dim hour(22) As String
    Dim min(58) As String
    Dim i As Integer
    
    '|fffd||f0||fffd|
    For i = 0 To 22
        If i < 9 Then
            hour(i) = "0" & i
        Else
            hour(i) = i + 1
        End If
    Next
    
    '|fffd||fffd|, |fffd||fffd|
    For i = 0 To 58
        If i < 9 Then
            min(i) = "0" & i
        Else
            min(i) = i + 1
        End If
    Next
        
    'page1 |fffd||fffd||a5| |fffd||fffd||fffd||fffd|
    Call set_scheduled_date(1)
    
    '|fffd||fffd||fffd||fffd|
    For i = 1 To 4
        Send_form.Controls("scheduled_hour_" & i).list = hour
        Send_form.Controls("scheduled_minute_" & i).list = min
        Send_form.Controls("scheduled_second_" & i).list = min
    Next

    MultiPage1.value = 0
    MultiPage1.TabFixedWidth = 53 * SendFormHelpers.SizeCoefficient
    MultiPage1.TabFixedHeight = 25 * SendFormHelpers.SizeCoefficient
    
    senderID.get_sender_id SenderIdList1
    change_send_form1
End Sub

'|fffd||fffd||fffd||fffd| |fffd||73e||fffd| |22e||fffd||fffd|
Public Function getBalance() As Long
    Dim auth As Authentication
    Dim resp As Response
    Set auth = New Authentication
    Set resp = New Response
    getBalance = 0
    If REST.Connect(auth, resp) Then
        getBalance = resp.getBalance
    End If
    
    Set auth = Nothing
    Set resp = Nothing
End Function

'|fffd||2ebb| |fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||1b0| |16c||fffd||fffd| |fffd||33a||fffd||1ae|
Private Sub btn_send_Click()
    Set oNormalText = New NormalText
    Set oNormalText = Nothing
End Sub

'|fffd||2ebb||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||339||fffd||fffd||fffd| |fffd||43e||fffd||fffd||fffd||fffd| |fffd||fffd||1b0|
Private Sub btn_image_Click()
    Dim width As Long, height As Long
    '|fffd||fffd||fffd||fffd| |f7||fffd||3bd||fffd| |fffd||fffd||fffd||fffd||178||fffd||fffd| MMS |fffd||fffd| |fffd||6b5||fffd||fffd||fffd||22d||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||7bd||fffd||fffd||fffd|
    If image_warning_control Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |f7||fffd||3bd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||6b0||fffd| MMS |fffd||fffd| |fffd||fffd||fffd||6f5||2f4||3f4||fffd|.", vbInformation
        image_warning_control = False
    End If
    '|fffd||339||fffd||fffd||fffd| |fffd||43e||fffd||fffd||fffd||fffd|
    Call SendFormHelpers.readImage(Image1, txtbox_image, image1_name)
    '|fffd||339||fffd||fffd||fffd| |f7||fffd||fffd||22e||fffd||fffd|
    If Image1.Picture Is Nothing Then
        Exit Sub
    End If
    '|fffd||339||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |22e||fffd||fffd| - |fffd||fffd||fffd||338||fffd| 66|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||475||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||b0||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||475||fffd|
    '|fffd||fffd||fffd||fffd| 66|fffd||3f6||fffd||fffd||fffd| |fffd||fffd||fffd||330||fffd| 126|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||338||fffd| 126|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||3f0||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||b0||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    With Image1
        .height = 66
        width = LoadPicture(image1_name).width
        height = LoadPicture(image1_name).height
        .width = .height * (width / height)
        If .width > 126 Then
            .width = 126
            .height = .width * (height / width)
        End If
    End With
    change_send_form1_with_image
    get_message_type
End Sub

'|fffd||2ebb||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||179||fffd||223| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||179||fffd||223| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub RefEdit1_Change()
On Error GoTo gohere
    Call SendFormHelpers.init
    label_selected_numbers.caption = SendFormHelpers.get_recipients(RefEdit1.value)
gohere:
    If Err.number <> 0 Then
        Debug.Print Err.Description
    End If
    Resume Next
End Sub

'|fffd||2ebb||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||537||fffd||fffd||fffd| Byte |fffd||fffd||fffd|
Private Sub txtbox_msg_Change()
    Dim msg_byte As Integer
    msg_byte = SendFormHelpers.LenMbcs(txtbox_msg.text)
    get_message_type
    label_msg_byte.caption = msg_byte & " byte"
End Sub

'|fffd||2ebb| |fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||339||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||1b0| |16c||fffd||fffd||fffd||fffd| |fffd||4b7||fffd||fffd||fffd| |fffd||339||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||475||fffd| send_form |fffd||fffd||fffd||fffd|
Private Sub label_delete_image_Click()
    With Image1
        .Visible = False
        .Picture = LoadPicture("")
    End With
    image1_name = ""
    txtbox_image.Visible = False
    label_delete_image.Visible = False
    change_send_form1
    get_message_type
End Sub

'|fffd||2ebb||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||7bd||fffd||fffd||fffd| |178||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Function get_message_type()
    Dim msg_length As Integer
    msg_length = SendFormHelpers.LenMbcs(txtbox_msg.value)
    If Not Image1.Picture Is Nothing Then
        Send_form.label_msg_type.caption = "|fffd||5e6e| (MMS)"
    ElseIf msg_length <= 90 Then
        Send_form.label_msg_type.caption = "|fffd||739||fffd| (SMS)"
    Else
        Send_form.label_msg_type.caption = "|fffd||5e6e| (LMS)"
    End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||339||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||1b0| |16c||fffd||fffd||fffd||fffd| |fffd||4b7||fffd||fffd||fffd| |fffd||339||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||475||fffd| send_form |fffd||fffd||fffd||fffd|
Private Sub Label18_Click()
    With Image2
        .Visible = False
        .Picture = LoadPicture("")
    End With
    
    TextBox5.Visible = False
    Label18.Visible = False
    ListBox1.Clear
    CommandButton7.Enabled = False          '|fffd||fffd||fffd||6ba||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||1b0| disable
    
    change_send_form2
    get_message_type
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||5b1||fffd| |fffd||fffd||1b0|
Private Sub CommandButton6_Click()
    Dim width As Long, height As Long
    '|fffd||fffd||fffd||fffd| |f7||fffd||3bd||fffd| |fffd||fffd||fffd||fffd||178||fffd||fffd| MMS |fffd||fffd| |fffd||6b5||fffd||fffd||fffd||22d||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||7bd||fffd||fffd||fffd|
    If image_warning_control Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |f7||fffd||3bd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||6b0||fffd| MMS |fffd||fffd| |fffd||fffd||fffd||6f5||2f4||3f4||fffd|.", vbInformation
        image_warning_control = False
    End If
    '|fffd||339||fffd||fffd||fffd| |fffd||43e||fffd||fffd||fffd||fffd|
    Call SendFormHelpers.readImage(Image2, TextBox5, image2_name)
    If Image2.Picture Is Nothing Then
        Exit Sub
    End If
    With Image2
        .height = 66
        width = LoadPicture(image2_name).width
        height = LoadPicture(image2_name).height
        .width = .height * (width / height)
        If .width > 126 Then
            .width = 126
            .height = .width * (height / width)
        End If
        Debug.Print .width & " " & .height & " " & width & " " & height
    End With
    change_send_form2_with_image
    ListBox1.Clear
    CommandButton7.Enabled = False
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||338||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||1b0|
Private Sub btn_preview_row_Click()
    If Not oRowText Is Nothing Then
        Set oRowText = Nothing
    End If
    Set oRowText = New RowText
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||338||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||1ae| |16c||fffd||fffd||fffd||fffd|
Private Sub ListBox1_Click()
    Dim list_index As Long
    list_index = ListBox1.ListIndex
    oRowText.ShowListboxContent (list_index)
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||338||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||1ae| |fffd||fffd||fffd||fffd||16c||fffd||fffd||fffd||fffd|
Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim list_index As Long
    list_index = ListBox1.ListIndex
    oRowText.ShowListboxContent (list_index)
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||6ba||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||1b0|
Private Sub CommandButton7_Click()
    Call oRowText.send
    Set oRowText = Nothing
    CommandButton7.Enabled = False
    ListBox1.Clear
End Sub

'|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||5b1||fffd| |fffd||fffd||1b0|
Private Sub CommandButton10_Click()
    Dim width As Long, height As Long
    '|fffd||fffd||fffd||fffd| |f7||fffd||3bd||fffd| |fffd||fffd||fffd||fffd||178||fffd||fffd| MMS |fffd||fffd| |fffd||6b5||fffd||fffd||fffd||22d||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||7bd||fffd||fffd||fffd|
    If image_warning_control Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |f7||fffd||3bd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||6b0||fffd| MMS |fffd||fffd| |fffd||fffd||fffd||6f5||2f4||3f4||fffd|.", vbInformation
        image_warning_control = False
    End If
    '|fffd||339||fffd||fffd||fffd| |fffd||43e||fffd||fffd||fffd||fffd|
    Call SendFormHelpers.readImage(Image3, TextBox6, image3_name)
    '|fffd||43e||fffd||fffd| |fffd||339||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| sub |fffd||fffd||fffd||fffd|
    If Image3.Picture Is Nothing Then
        Exit Sub
    End If
    
    With Image3
        .height = 66
        width = LoadPicture(image3_name).width
        height = LoadPicture(image3_name).height
        .width = .height * (width / height)
        If .width > 126 Then
            .width = 126
            .height = .width * (height / width)
        End If
        Debug.Print .width & " " & .height & " " & width & " " & height
    End With
            
    '|f7||fffd||3b5||fffd| |fffd||339||fffd||fffd||fffd||fffd||fffd| |fffd||b0||fffd| UserForm |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    change_send_form3_with_image
End Sub

'|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd| - |121||22f||fffd||73e||ef33||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||1b0|
Private Sub CommandButton4_Click()
    Dim inc_size As Integer
    inc_size = 18
    
    '|121||22f||fffd||73e||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||16d| |fffd||fffd||fffd| component |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||121| |fffd||fffd||fffd||fffd|
    If inc_count > 1 Then
        Send_form.height = Send_form.height - inc_size
        MultiPage1.height = MultiPage1.height - inc_size
        Frame6.Top = Frame6.Top - inc_size
        Frame7.height = Frame7.height - inc_size
        CommandButton3.Top = CommandButton3.Top - inc_size
        CommandButton8.Top = CommandButton8.Top - inc_size
        CommandButton9.Top = CommandButton9.Top - inc_size
        lbl_percent3.Top = lbl_percent3.Top - inc_size
        progressBar3.Top = progressBar3.Top - inc_size
        Frame9.Top = Frame9.Top - inc_size
        inc_count = inc_count - 1
        hide_ref_merge
    End If
    
    '|121||22f||fffd||73e||ec21| 1|fffd||fffd||fffd||33b||fffd| 7|fffd||fffd| |fffd||fffd||fffd||3f6||fffd||fffd| "|fffd||fffd||fffd||fffd|"|fffd||fffd||1b0| enable
    If inc_count = 1 Then
        CommandButton4.Enabled = False
    ElseIf inc_count < 7 Then
        CommandButton5.Enabled = True
    Else
        CommandButton4.Enabled = True
    End If
End Sub

'|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd| - |121||22f||fffd||73e||ef33||fffd||fffd| |fffd||7f0||fffd| |fffd||fffd||1b0|
Private Sub CommandButton5_Click()
    Dim inc_size As Integer
    inc_size = 18 * SendFormHelpers.SizeCoefficient
    
    '|121||22f||fffd||73e||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||16d| |fffd||fffd||fffd| component |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||121| |fffd||fffd||fffd||fffd|
    If inc_count < 7 Then
        Send_form.height = Send_form.height + inc_size
        MultiPage1.height = MultiPage1.height + inc_size
        Frame6.Top = Frame6.Top + inc_size
        Frame7.height = Frame7.height + inc_size
        CommandButton3.Top = CommandButton3.Top + inc_size
        CommandButton8.Top = CommandButton8.Top + inc_size
        CommandButton9.Top = CommandButton9.Top + inc_size
        lbl_percent3.Top = lbl_percent3.Top + inc_size
        progressBar3.Top = progressBar3.Top + inc_size
        Frame9.Top = Frame9.Top + inc_size
        inc_count = inc_count + 1
        CommandButton3.Enabled = False
        CommandButton8.Enabled = False
        show_ref_merge
    End If
    
    '|121||22f||fffd||73e||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 1|fffd||fffd||fffd||33b||fffd| 7|fffd||fffd||fffd||33b||fffd||fffd||338||fffd| "|fffd||7f0||fffd|"|fffd||fffd||1b0| enable
    If inc_count = 7 Then
        CommandButton5.Enabled = False
    ElseIf inc_count > 1 Then
        CommandButton4.Enabled = True
    Else
        CommandButton5.Enabled = True
    End If
End Sub

'|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||178||fffd||fffd| |fffd||5b4||fffd| |121||22f||fffd||73e||ee26| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
Private Sub hide_ref_merge()
    Dim i As Integer
    '|121||22f||fffd||73e||fffd| |fffd||fffd||fffd||fffd||16d||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f0||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    For i = inc_count + 1 To inc_count + 1 Step -1
        Send_form.Controls("lbl_merge_" & i).Visible = False
        Send_form.Controls("ref_merge_" & i).value = ""
        Send_form.Controls("ref_merge_" & i).Visible = False
    Next
End Sub

'|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||5b4||fffd| |121||22f||fffd||73e||ee26| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub show_ref_merge()
    Dim i As Integer
    For i = inc_count To 1 Step -1
        Send_form.Controls("lbl_merge_" & i).Visible = True
        Send_form.Controls("ref_merge_" & i).Visible = True
    Next
End Sub

'|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd| - |121||22f| |fffd||73e||fffd| |fffd||fffd||fffd| |fffd||fffd||1b0|
Private Sub CommandButton9_Click()
    If oSubstituteText Is Nothing Then
        Set oSubstituteText = New SubstituteText
    End If
    Call oSubstituteText.checkSubsWords(inc_count)
End Sub

'|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||338||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||1b0|
Private Sub CommandButton3_Click()
    Call oSubstituteText.preview
End Sub

'|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||1b0|
Private Sub CommandButton8_Click()
    Call oSubstituteText.send
End Sub

'|121||22f| |fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||339||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||1b0| |16c||fffd||fffd||fffd||fffd| |fffd||4b7||fffd||fffd||fffd| |fffd||339||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||475||fffd| send_form |fffd||fffd||fffd||fffd|
Private Sub Label28_Click()
    With Image3
        .Visible = False
        .Picture = LoadPicture("")
    End With
    
    TextBox6.Visible = False
    Label28.Visible = False
    CommandButton8.Enabled = False
    change_send_form3
    get_message_type
End Sub

'|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||338||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |16c||fffd||fffd||fffd||fffd|
Private Sub ListBox2_Click()
    oSubstituteText.ShowListboxContent (ListBox2.ListIndex)
End Sub

'|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||338||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||16c||fffd||fffd||fffd||fffd|
Private Sub ListBox2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    oSubstituteText.ShowListboxContent (ListBox2.ListIndex)
End Sub

'|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||3f5||fffd| |121||22f||fffd||73e||ee26| |fffd||fffd||fffd||fffd||16c||fffd||fffd||fffd||fffd| |fffd||6b5||fffd||fffd||fffd||fffd||fffd| |fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||bfe1| |fffd||537||fffd|
Private Sub ListBox3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    oSubstituteText.insertMergeWord
End Sub

'|fffd||2f8||fffd||fffd||fffd| |fffd||fffd| - |fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fb| |fffd||fffd||1b0| |16c||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub CommandButton21_Click()
    ActiveWorkbook.FollowHyperlink "http://www.coolsms.co.kr/AboutAlimTalk"
End Sub

'|fffd||2f8||fffd||fffd||fffd| |fffd||fffd| - |fffd||3f87d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||1fe||fffd||fffd||5b4||678||fffd| |fffd||6b5||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||f8||fffd| |fffd||7bd||fffd||fffd||fffd| & |fffd||fffd||fffd||3be||fffd||fffd||335||fffd| |fffd||fffd||fffd||fffd|
Private Sub set_alimtalk_info()
    Dim auth As Authentication
    Dim resp As Response
    Dim template_resp As Response
    Dim yellow_id_obj
    Dim params As Dictionary
    
    Set params = CreateObject("scripting.dictionary")
    Set auth = New Authentication
    Set resp = New Response
    Set template_resp = New Response
    Set oAlimtalk = New AlimTalk
    
    REST.silence_msgbox = True
    
    '|fffd||634||fffd| |fffd||33f||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||335||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If REST.Connect(auth, resp, "ata_list") Then
        If Not resp.cs_result("list") Is Nothing Then
            CommandButton21.Visible = False
            REST.silence_msgbox = False
            For Each yellow_id_obj In resp.cs_result("list")
                '|fffd||2f8||fffd||fffd||fffd| yellow id |fffd||fffd||fffd||fffd|
                Call oAlimtalk.set_alimtalk_yellow_id(yellow_id_obj.Item("yellow_id"), yellow_id_obj.Item("flag_default"))

                params.RemoveAll
                params.Add "yellow_id", yellow_id_obj.Item("yellow_id")
                params.Add "state", "2"
                REST.set_params params

                '|fffd||634||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||335||fffd||fffd||fffd| |fffd||fffd||fffd||f8||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||37c||fffd| |fffd||fffd||fffd||fffd|
                If REST.Connect(auth, template_resp, "ata_templates") Then
                    'data|fffd||fffd| |fffd||fffd||fffd||678||fffd| Continue
                    If resp.cs_result("list") Is Nothing Then GoTo ContinueLoop
                    
                    Call oAlimtalk.set_alimtalk_templates(yellow_id_obj.Item("yellow_id"), template_resp.cs_result("templates"))
                End If
ContinueLoop:
            Next
        End If
    End If
    
    REST.silence_msgbox = False
    
    '|22d||fffd||9fe1| |fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Call oAlimtalk.set_list
    
    Set auth = Nothing
    Set resp = Nothing
    Set template_resp = Nothing
End Sub

'|fffd||2f8||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||f8||fffd||fffd||6b5||fffd| |16c||fffd||fffd||fffd||fffd| |fffd||6b5||fffd||fffd||fffd||fffd||fffd| |fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||bfe1| |fffd||537||fffd|
Private Sub ListBox5_Click()
    Call oAlimtalk.set_template_content
End Sub

'|fffd||2f8||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||f8||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd|
Private Sub TextBox10_Change()
    Erase ata_value_arr
    ata_value_arr = SendFormHelpers.search_word("#{.*?}", TextBox10.value)
    show_ata_value
End Sub

'|fffd||2f8||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||f8||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||634||fffd|
Public Function get_ata_value()
    get_ata_value = ata_value_arr
End Function

'|fffd||2f8||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||5b1||fffd|
Private Sub show_ata_value()
    Dim inc_size, i As Integer
    
    ata_value_count = UBound(ata_value_arr) + 1
    
    '|fffd||fffd| |fffd||2b1||fffd||22d|
    init_ata_form
    
    '|fffd||fffd||fc| |fffd||fffd||121| |fffd||fffd||fffd||fffd|
    inc_size = 18 * (UBound(ata_value_arr))
    inc_size = inc_size * SendFormHelpers.SizeCoefficient
    Send_form.height = Send_form.height + inc_size
    MultiPage1.height = MultiPage1.height + inc_size
    Frame18.height = Frame18.height + inc_size
    lbl_percent4.Top = lbl_percent4.Top + inc_size
    progressBar4.Top = progressBar4.Top + inc_size
    Frame20.Top = Frame20.Top + inc_size
    CommandButton19.Top = CommandButton19.Top + inc_size
    CommandButton20.Top = CommandButton20.Top + inc_size
      
    '|fffd||2f8||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||5b1||fffd|
    For i = 1 To ata_value_count
        Send_form.Controls("lbl_ata_value_" & i).caption = ata_value_arr(i - 1)
        Send_form.Controls("lbl_ata_value_" & i).Visible = True
        Send_form.Controls("ref_ata_value_" & i).Visible = True
    Next
    
    If ata_value_count > 10 Then
        MsgBox ("10|fffd||fffd||fffd||33b||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||2bd||fffd||fffd||3f4||fffd|.")
    End If
End Sub

'|fffd||2f8||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd| |fffd||fffd||121| |fffd||2b1||fffd||22d|
Private Sub init_ata_form()
    Dim i As Integer
    
    Send_form.height = 540
    MultiPage1.height = 520
    Frame18.height = 60
    lbl_percent4.Top = 470
    progressBar4.Top = 481
    Frame20.Top = 337
    CommandButton19.Top = 451
    CommandButton20.Top = 451
    
    For i = 1 To UBound(ata_value_arr) + 1
        Send_form.Controls("lbl_ata_value_" & i).caption = "|fffd||fffd||fffd||fffd| " & i
        If i <> 1 Then
            Send_form.Controls("lbl_ata_value_" & i).Visible = False
            Send_form.Controls("ref_ata_value_" & i).Visible = False
        End If
    Next
End Sub

'|fffd||2f8||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd|
Private Sub CommandButton20_Click()
    oAlimtalk.send
End Sub

'|fffd||fffd||fffd||6f0||fffd||fffd| |fffd||fffd| - |fffd||2fb||fffd||fffd||fffd| |fffd||7bd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
Private Sub ListBox4_Click()
    Dim list_count As Long
    Dim list_index As Long
    Dim msgbox_content As String
    
    If ListBox4.ListIndex = 38 Then Exit Sub
    list_index = ListBox4.ListIndex
    If sent_data(list_index, 2) <> vbNullString Then
        msgbox_content = "<""|fffd||fffd||fffd||179||fffd||223|"" : """ & sent_data(list_index, 2) & """>" & vbCrLf & _
                         "<""|fffd||fffd||fffd||6b3||fffd||fffd||fffd|"" : """ & sent_data(list_index, 9) & """>" & vbCrLf & _
                         "<""|fffd||fffd||fffd||fffd||178||fffd||fffd|"" : """ & sent_data(list_index, 0) & """>" & vbCrLf & _
                         "<""|fffd||5f7||fffd|ID"" : """ & sent_data(list_index, 3) & """>" & vbCrLf & _
                         "<""|fffd||fffd||fffd||fffd|ID"" : """ & sent_data(list_index, 4) & """>" & vbCrLf & _
                         "<""|fffd||fffd||fffd||6bb||fffd||fffd||fffd|"" : """ & sent_data(list_index, 5) & """>" & vbCrLf & _
                         "<""|fffd||fffd||fffd||fffd||6b5||fffd|"" : """ & sent_data(list_index, 6) & """>" & vbCrLf & _
                         "<""|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"" : """ & sent_data(list_index, 7) & """>" & vbCrLf & _
                         "<""|fffd||fffd||fffd||fffd||fffd||3fd||fffd|"" : """ & sent_data(list_index, 8) & """>" & vbCrLf & _
                         "<""|fffd||fffd||17b||fffd|"" : """ & sent_data(list_index, 10) & """>" & vbCrLf & _
                         "<""|fffd||fffd||fffd||fffd||fffd||3fd||fffd|"" : """ & sent_data(list_index, 11) & """>" & vbCrLf
        MsgBox msgbox_content
    End If
End Sub

'|fffd||2f8||fffd||fffd||fffd| |fffd||fffd| - |fffd||338||fffd||fffd||fffd||fffd||fffd|
Private Sub CommandButton19_Click()
    oAlimtalk.preview
End Sub

'|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||338||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |16c||fffd||fffd||fffd||fffd|
Private Sub ListBox6_Click()
    oAlimtalk.show_content (ListBox6.ListIndex)
End Sub

'|fffd||fffd||fffd||6f0||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||2fb||fffd|
Private Sub CommandButton11_Click()
    If current_page = 0 Then
        current_page = 1
    End If
    current_page = current_page + 1
    show_sent_result (current_page)
End Sub

'|fffd||fffd||fffd||6f0||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||2fb||fffd|
Private Sub CommandButton12_Click()
    current_page = current_page - 1
    show_sent_result (current_page)
End Sub

'|fffd||fffd||fffd||6f0||fffd||fffd| |fffd||fffd| - |fffd||2fb||fffd| |fffd||fffd||1b0|
Private Sub CommandButton13_Click()
    show_sent_result
End Sub

'|fffd||fffd||fffd||6f0||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||2fb||fffd|
Private Sub show_sent_result(Optional page = 1)
    Dim sentObj As mSent
    Dim auth As Authentication
    Dim resp As Response
    Dim Today As String
    Dim total_page As Long, result As Integer, list_count As Long
        
    On Error GoTo loginRequire
        Set resp = New Response
        Set auth = New Authentication
        Set sentObj = New mSent
        With sentObj
            If TextBox7.value <> vbNullString Then
                .set_rcpt = TextBox7.value
            End If
            If SendFormHelpers.onlyDigits(ComboBox1.value) <> vbNullString Then
                .set_resultCode = SendFormHelpers.onlyDigits(ComboBox1.value)
            End If
            
            Today = Format(Now(), "yyyy-MM-dd")
            
            If txtbox_date_start.value <> vbNullString Then
                .set_start = Format(txtbox_date_start.value, "yyyy-MM-dd") & " 00:00:00"
            End If
            If txtbox_date_end.value <> vbNullString Then
                .set_end = Format(txtbox_date_end.value, "yyyy-MM-dd") & " 23:59:59"
            End If
            .set_count = 39
            .set_page = page
        End With
        
        result = REST.Connect(auth, resp, sentObj)
        On Error GoTo sentError
        list_count = Val(resp.cs_list_count)
        If resp.cs_total_count = vbNullString Then
            Exit Sub
        End If
        total_page = Excel.WorksheetFunction.Ceiling(Val(resp.cs_total_count) / list_count, 1)
        
        If page = 1 Then
            current_page = 1
            CommandButton12.Enabled = False
        Else
            CommandButton12.Enabled = True
        End If
        
        If page = total_page Then
            CommandButton11.Enabled = False
        Else
            CommandButton11.Enabled = True
        End If
        
        sent_data = resp.get_sent_data(True)
        If IsEmptyArray(sent_data) Then
            ListBox4.Clear
            Exit Sub
        End If
        
        With ListBox4
            .Clear
            .ColumnCount = 5
            .height = 355
            .list = sent_data
            .ColumnWidths = "67;40;62;63;60"
        End With
      
        sent_data = resp.get_sent_data(False)
        Label29.caption = current_page & " / " & total_page
        Label36.caption = Val(resp.cs_total_count) & " |fffd||fffd|"
        
loginRequire:
        If Err.number <> 0 Then
            MsgBox "|fffd||3b1||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||337||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||2be||4bd||fffd||fffd||3f4||fffd|. "
            Unload Send_form
            Load login_form
            login_form.Show
            Exit Sub
        End If
    
sentError:
        If Err.number <> 0 Then
            MsgBox "|fffd||fffd||fffd||6f0||fffd||fffd||fffd||fffd| |fffd||4b7||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7fb||fffd||fffd||3ff||fffd||fffd||fffd||fffd||3f4||fffd|. " & vbCrLf & Err.Description, vbCritical
            Exit Sub
        End If
        
Set sentObj = Nothing
Set resp = Nothing
'Erase sent_data
End Sub

'|22f||fffd||6f33||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||73e||fffd||fffd||fffd| |fffd||fffd||fffd|
Private Sub update_balance()
    Dim auth As Authentication
    Dim resp As Response
    Set auth = New Authentication
    Set resp = New Response
    If REST.Connect(auth, resp) Then
        Label48.caption = resp.cs_cash & " |fffd||fffd|"
        Label49.caption = resp.cs_point & " |fffd||fffd||fffd||fffd||1ae|"
    End If
    
    Set auth = Nothing
    Set resp = Nothing
End Sub

'|22f||fffd||6f33||fffd||fffd| |fffd||fffd| - |fffd||6b5||fffd||fffd||3b1||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||1b0|
Private Sub CommandButton14_Click()
    Dim apikey As String
    Dim apisecret As String
    Dim auth As Authentication
    Dim resp As Response
    
    If CommandButton14.caption = "|fffd||fffd| |fffd||fffd|" Then
        If MsgBox("|fffd||6b5||fffd||fffd||3b1||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo) = vbYes Then
            SendFormHelpers.RegKeySave cs_isApiKeyApiSecretSaved, "False"
            SendFormHelpers.RegKeySave cs_ApiKey, ""
            SendFormHelpers.RegKeySave cs_ApiSecret, ""
            MsgBox "|fffd||6b5||fffd||fffd||3b1||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||1fe||fffd||fffd||fffd||fffd||3f4||fffd|."
            TextBox8.value = ""
            TextBox9.value = ""
            TextBox8.Visible = True
            TextBox9.Visible = True
            Label53.Visible = False
            Label54.Visible = False
            CommandButton14.caption = "|fffd||fffd| |fffd||fffd|"
            Unload Send_form
            Load login_form
            login_form.Show
        End If
        GoTo gotoEnd
    End If
        
    apikey = TextBox8.value
    apisecret = TextBox9.value
    
    If apikey = vbNullString Then
        MsgBox "API_KEY |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||3f4||fffd|."
        GoTo gotoEnd
    End If
    If apisecret = vbNullString Then
        MsgBox "API_SECRET |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||3f4||fffd|."
        GoTo gotoEnd
    End If
    
    MsgBox "API_KEY |fffd||fffd| API_SECRET |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3fd||f0||fffd| |fffd||1f8||fffd| |fffd||6b5||fffd||fffd||3b1||fffd||fffd||3b5||1f8||fffd|," & vbCrLf & _
            "|fffd||fffd||fffd||fffd|PC|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||3fd||f1||fffd| |fffd||676||fffd||fffd||3f4||fffd|.", vbInformation
            
    Set auth = New Authentication
    Set resp = New Response
    With auth
        .cs_api_key = apikey
        .cs_api_secret = apisecret
        .cs_encoding = "base64"
        .set_signature
        .cs_coolsms_user = ""
    End With
    
    If Connect(auth, resp) Then
        On Error GoTo gotoEnd
        SendFormHelpers.RegKeySave cs_isApiKeyApiSecretSaved, "True"
        SendFormHelpers.RegKeySave cs_ApiKey, apikey
        SendFormHelpers.RegKeySave cs_ApiSecret, apisecret
        MsgBox "|fffd||6b5||fffd||fffd||3b1||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||1fe||fffd||fffd||fffd||fffd||3f4||fffd|."
        Label53.Visible = True
        Label54.Visible = True
        Label53.caption = apikey
        Label54.caption = apisecret
        CommandButton14.caption = "|fffd||fffd| |fffd||fffd|"
        TextBox8.Visible = False
        TextBox9.Visible = False
    Else
        MsgBox "API_KEY |fffd||1f4||fffd| API_SECRET |fffd||fffd| |fffd||fffd||23f||fffd||fffd||fffd||fffd| |fffd||2bd||fffd||fffd||3f4||fffd|.", vbCritical
    End If
gotoEnd:
    If Err.number <> 0 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||7ff||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7fb||fffd||fffd||3ff||fffd||fffd||fffd||fffd||3f4||fffd|." & vbCrLf & Err.Description, vbCritical
    End If
End Sub

'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub MultiPage1_Click(ByVal index As Long)
    Select Case MultiPage1.SelectedItem.Name
        Case "Page1":
                    ' |fffd||fffd||fffd||fffd||7fc||fffd| |fffd||fffd||a5| |fffd||fffd||fffd||fffd|
                    Call set_scheduled_date(1)
                    
                    ' |fffd||fffd||fffd||fffd||fffd| |fffd||7fd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||537||fffd||fffd||fffd||fffd||fffd|
                    If entered_senderid <> "" Then
                        SenderIdList1.Clear
                        ' |fffd||fffd||fffd||fffd| |fffd||537||b5||fffd| |fffd||7fd||179||fffd||223| |fffd||537||fffd|
                        SenderIdList1.value = entered_senderid
                    End If
                    
                    ' |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd||1ae| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    senderID.get_sender_id SenderIdList1
                    
                        
                    If Image1.Picture Is Nothing Then
                        change_send_form1
                    Else
                        change_send_form1_with_image
                    End If
                    
        Case "Page2":
                    ' |fffd||fffd||fffd||fffd||7fc||fffd| |fffd||fffd||a5| |fffd||fffd||fffd||fffd|
                    Call set_scheduled_date(2)
                    
                    ' |fffd||fffd||fffd||fffd||fffd| |fffd||7fd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||537||fffd||fffd||fffd||fffd||fffd|
                    If entered_senderid <> "" Then
                        SenderIdList2.Clear
                        ' |fffd||fffd||fffd||fffd| |fffd||537||b5||fffd| |fffd||7fd||179||fffd||223| |fffd||537||fffd|
                        SenderIdList2.value = entered_senderid
                    End If
                    
                    ' |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd||1ae| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    senderID.get_sender_id SenderIdList2
                    
                    If Image2.Picture Is Nothing Then
                        change_send_form2
                    Else
                        change_send_form2_with_image
                    End If
                        
        Case "Page3":
                    ' |fffd||fffd||fffd||fffd||7fc||fffd| |fffd||fffd||a5| |fffd||fffd||fffd||fffd|
                    Call set_scheduled_date(3)
                    
                    ' |fffd||fffd||fffd||fffd||fffd| |fffd||7fd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||537||fffd||fffd||fffd||fffd||fffd|
                    If entered_senderid <> "" Then
                        SenderIdList3.Clear
                        ' |fffd||fffd||fffd||fffd| |fffd||537||b5||fffd| |fffd||7fd||179||fffd||223| |fffd||537||fffd|
                        SenderIdList3.value = entered_senderid
                    End If
                    
                    ' |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd||1ae| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    senderID.get_sender_id SenderIdList3
                    
                    If Image3.Picture Is Nothing Then
                        change_send_form3
                    Else
                        change_send_form3_with_image
                    End If
                       
        Case "Page4":
                    change_send_form4
                    
        Case "Page5":
                    update_balance
                    change_send_form5
                    
        Case "Page6":
                    ' |fffd||fffd||fffd||fffd||7fc||fffd| |fffd||fffd||a5| |fffd||fffd||fffd||fffd|
                    Call set_scheduled_date(4)
                    
                    ' |fffd||fffd||fffd||fffd||fffd| |fffd||7fd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||537||fffd||fffd||fffd||fffd||fffd|
                    If entered_senderid <> "" Then
                        SenderIdList4.Clear
                        ' |fffd||fffd||fffd||fffd| |fffd||537||b5||fffd| |fffd||7fd||179||fffd||223| |fffd||537||fffd|
                        SenderIdList4.value = entered_senderid
                    End If
                    
                    ' |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd||1ae| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    senderID.get_sender_id SenderIdList4
                    
                    change_send_form6
    End Select
End Sub

'|fffd||2ebb| |fffd||fffd||fffd||fffd||fffd||1ff||fffd| |fffd||2ebb| |fffd||fffd||fffd||fffd|
Private Sub change_send_form1()
    frame15.height = 42 * SendFormHelpers.SizeCoefficient
    frame_image.Top = frame15.height + frame15.Top + 8 * SendFormHelpers.SizeCoefficient
    txtbox_image.Visible = False
    label_delete_image.Visible = False

    Send_form.height = 540 * SendFormHelpers.SizeCoefficient
    MultiPage1.height = 520 * SendFormHelpers.SizeCoefficient

    txtbox_msg.Top = 6
    label_msg_byte.Top = txtbox_msg.Top + txtbox_msg.height + 3 * SendFormHelpers.SizeCoefficient
    label_msg_type.Top = txtbox_msg.Top + txtbox_msg.height + 3 * SendFormHelpers.SizeCoefficient
    frame_sender.Top = frame_image.Top + frame_image.height + 6 * SendFormHelpers.SizeCoefficient
    Label1.Top = 24
    btn_send.Top = 442 * SendFormHelpers.SizeCoefficient
    progressBar1.Top = 481 * SendFormHelpers.SizeCoefficient
    lbl_percent1.Top = 470 * SendFormHelpers.SizeCoefficient
    lbl_status1.Top = 470 * SendFormHelpers.SizeCoefficient
End Sub

'|fffd||2ebb| |fffd||fffd||fffd||fffd||fffd||1ff||fffd| |fffd||339||fffd||fffd||fffd||fffd||fffd| |f7||fffd||3b5||fffd||fffd||5b4||fffd| |fffd||fffd||fffd|
Private Sub change_send_form1_with_image()
    Dim inc_size
    inc_size = Image1.height * SendFormHelpers.SizeCoefficient
    With Image1
            .BorderStyle = fmBorderStyleNone
            .Visible = True
    End With
    
    frame15.height = 42 + Image1.height * SendFormHelpers.SizeCoefficient
    frame_image.Top = frame15.Top + frame15.height + 8 * SendFormHelpers.SizeCoefficient
    
    With txtbox_image
        .Top = Image1.Top + Image1.height * SendFormHelpers.SizeCoefficient
        .Visible = True
        .height = 17 * SendFormHelpers.SizeCoefficient
        .MaxLength = 10
        .BackColor = &H8000000B
        .width = Image1.width
    End With
    
    With label_delete_image
        .Visible = True
        .Left = txtbox_image.width + txtbox_image.Left - 20 * SendFormHelpers.SizeCoefficient
        .Top = Image1.Top + Image1.height + 4 * SendFormHelpers.SizeCoefficient
        .ZOrder
    End With
    
    Send_form.height = (540 + Image1.height) * SendFormHelpers.SizeCoefficient
    MultiPage1.height = (520 + Image1.height) * SendFormHelpers.SizeCoefficient
    
    label_msg_byte.Top = txtbox_msg.Top + txtbox_msg.height + 3 * SendFormHelpers.SizeCoefficient
    With label_msg_type
        get_message_type
        .Top = txtbox_msg.Top + txtbox_msg.height + 3 * SendFormHelpers.SizeCoefficient
    End With
    
    frame_sender.Top = frame_image.Top + frame_image.height + 6 * SendFormHelpers.SizeCoefficient
    btn_send.Top = frame_sender.height + frame_sender.Top + 10 * SendFormHelpers.SizeCoefficient
    progressBar1.Top = btn_send.Top + btn_send.height + 13 * SendFormHelpers.SizeCoefficient
    lbl_percent1.Top = btn_send.Top + btn_send.height + 4 * SendFormHelpers.SizeCoefficient
    lbl_status1.Top = btn_send.Top + btn_send.height + 4 * SendFormHelpers.SizeCoefficient
End Sub

'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||1ff||fffd| |fffd||2ebb| |fffd||fffd||fffd||fffd|
Private Sub change_send_form2()
    Frame4.height = 42 * SendFormHelpers.SizeCoefficient
    Send_form.height = 540 * SendFormHelpers.SizeCoefficient
    MultiPage1.height = 520 * SendFormHelpers.SizeCoefficient

    frame8.Top = 270 * SendFormHelpers.SizeCoefficient
    btn_preview_row.Top = 442 * SendFormHelpers.SizeCoefficient
    CommandButton7.Top = 442 * SendFormHelpers.SizeCoefficient
    get_message_type
    lbl_percent2.Top = 470 * SendFormHelpers.SizeCoefficient
    lbl_status2.Top = 470 * SendFormHelpers.SizeCoefficient
    progressBar2.Top = 481 * SendFormHelpers.SizeCoefficient
End Sub

'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||1ff||fffd| |fffd||339||fffd||fffd||fffd||fffd||fffd| |f7||fffd||3b5||fffd| |fffd||5b4||fffd| |fffd||fffd||fffd|
Private Sub change_send_form2_with_image()
    '~~ |fffd||1b7||fffd||fffd||fffd| image |fffd||fffd| |fffd||4b7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||cfe1| send_form |fffd||fffd| |fffd||fffd||fffd||fffd||1f4||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||534||3f4||fffd|.
    '~~ image file |fffd||338||fffd||fffd||fffd| |fffd||fffd||ec21||fffd||fffd| txtbox
    With Image2
        .Visible = True
        .BorderStyle = fmBorderStyleNone
    End With
    With TextBox5
        .Visible = True
        .value = Dir(image2_name)
        .height = 17 * SendFormHelpers.SizeCoefficient
        .Top = Image2.Top + Image2.height
        .width = Image2.width
        .MaxLength = 10
        .BackColor = &H8000000B
    End With
    '~~ image |fffd||fffd||fffd||fffd| |fffd||fffd||1b0|
    With Label18
        .Visible = True
        .Top = TextBox5.Top + 4
        .Left = TextBox5.width + TextBox5.Left - 20 * SendFormHelpers.SizeCoefficient
    End With
    
    Send_form.height = 540 + Image2.height * SendFormHelpers.SizeCoefficient
    MultiPage1.height = 520 + Image2.height * SendFormHelpers.SizeCoefficient
        
    Frame4.height = 42 + Image2.height * SendFormHelpers.SizeCoefficient
    frame8.Top = Frame4.Top + Frame4.height + 12 * SendFormHelpers.SizeCoefficient
    btn_preview_row.Top = frame8.Top + frame8.height + 12 * SendFormHelpers.SizeCoefficient
    CommandButton7.Top = frame8.Top + frame8.height + 12 * SendFormHelpers.SizeCoefficient
    lbl_percent2.Top = (470 + Image2.height) * SendFormHelpers.SizeCoefficient
    lbl_status2.Top = (470 + Image2.height) * SendFormHelpers.SizeCoefficient
    progressBar2.Top = (481 + Image2.height) * SendFormHelpers.SizeCoefficient

End Sub

'|121||22f| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||2ebb| |fffd||fffd||fffd||fffd|
Private Sub change_send_form3()
    '|fffd||339||fffd||fffd||fffd| frame
    Frame10.height = 33 * SendFormHelpers.SizeCoefficient
    '|121||22f||fffd||73e||fffd| frame
    Frame7.Top = Frame10.Top + Frame10.height + 5 * SendFormHelpers.SizeCoefficient
    '|fffd||7bd||fffd||fffd||fffd| frame
    Frame6.Top = Frame7.Top + Frame7.height + 5 * SendFormHelpers.SizeCoefficient
    '|fffd||338||fffd||fffd||fffd||fffd||fffd| frame
    Frame9.Top = Frame6.Top + Frame6.height + 5 * SendFormHelpers.SizeCoefficient

    If inc_count = 1 Then
        MultiPage1.height = 520 * SendFormHelpers.SizeCoefficient
        Send_form.height = 540 * SendFormHelpers.SizeCoefficient
    Else
        MultiPage1.height = ((inc_count - 1) * 18) + 520 * SendFormHelpers.SizeCoefficient
        Send_form.height = ((inc_count - 1) * 18) + 540 * SendFormHelpers.SizeCoefficient
    End If
    CommandButton3.Top = Frame9.Top + Frame9.height + 5 * SendFormHelpers.SizeCoefficient
    CommandButton8.Top = Frame9.Top + Frame9.height + 5 * SendFormHelpers.SizeCoefficient
    lbl_percent3.Top = Frame9.Top + Frame9.height + 27 * SendFormHelpers.SizeCoefficient
    lbl_status3.Top = Frame9.Top + Frame9.height + 27 * SendFormHelpers.SizeCoefficient
    progressBar3.Top = Frame9.Top + Frame9.height + 38 * SendFormHelpers.SizeCoefficient
End Sub

'|121||22f| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||339||fffd||fffd||fffd||fffd||fffd| |f7||fffd||3b5||fffd||fffd||5b4||fffd| |fffd||fffd||fffd||fffd|
Private Sub change_send_form3_with_image()
    With Image3
        .Visible = True
        .BorderStyle = fmBorderStyleNone
    End With
    'image |fffd||338||fffd|
    With TextBox6
        .Top = Image3.Top + Image3.height * SendFormHelpers.SizeCoefficient
        .Visible = True
        .value = Dir(image3_name)
        .height = 17 * SendFormHelpers.SizeCoefficient
        .width = Image3.width
        .MaxLength = 10
        .BackColor = &H8000000B
    End With
    'image |fffd||338||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||1b0|
    With Label28
        .Top = TextBox6.Top + 4
        .Visible = True
        .Left = TextBox6.Left + TextBox6.width - 20 * SendFormHelpers.SizeCoefficient
    End With
    'image frame
    Frame10.height = (Image3.height + 35) * SendFormHelpers.SizeCoefficient
    
    Frame7.Top = Frame10.Top + Frame10.height + 5 * SendFormHelpers.SizeCoefficient
    Frame6.Top = Frame7.Top + Frame7.height + 5 * SendFormHelpers.SizeCoefficient
    Frame9.Top = Frame6.Top + Frame6.height + 5 * SendFormHelpers.SizeCoefficient
    
    Send_form.height = (540 + Image3.height - 19) * SendFormHelpers.SizeCoefficient + (inc_count * 18)
    MultiPage1.height = (520 + Image3.height - 19) * SendFormHelpers.SizeCoefficient + (inc_count * 18)
    
    CommandButton3.Top = Frame9.Top + Frame9.height + 5 * SendFormHelpers.SizeCoefficient
    CommandButton8.Top = Frame9.Top + Frame9.height + 5 * SendFormHelpers.SizeCoefficient
    lbl_percent3.Top = Frame9.Top + Frame9.height + 24 * SendFormHelpers.SizeCoefficient
    lbl_status3.Top = Frame9.Top + Frame9.height + 24 * SendFormHelpers.SizeCoefficient
    progressBar3.Top = Frame9.Top + Frame9.height + 35 * SendFormHelpers.SizeCoefficient
End Sub

'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||2ebb| |fffd||fffd||fffd||fffd|
Private Sub change_send_form4()
    With Send_form
        .width = 324.75 * SendFormHelpers.SizeCoefficient
        .height = 540 * SendFormHelpers.SizeCoefficient
    End With
    With MultiPage1
        .width = 323 * SendFormHelpers.SizeCoefficient
        .height = 540 * SendFormHelpers.SizeCoefficient
    End With
    With ListBox4
        .width = 305 * SendFormHelpers.SizeCoefficient
        .height = 355 * SendFormHelpers.SizeCoefficient
    End With
End Sub

'|22f||fffd||6f33||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||2ebb| |fffd||fffd||fffd||fffd|
Private Sub change_send_form5()
    Send_form.width = 325 * SendFormHelpers.SizeCoefficient
    Send_form.height = 540 * SendFormHelpers.SizeCoefficient
End Sub

'|fffd||2f8||fffd||fffd||fffd||fffd||fffd| |fffd||2ebb| |fffd||fffd||fffd||fffd|
Private Sub change_send_form6()
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| frame
    Frame19.Top = Frame17.Top + Frame17.height + 78 * SendFormHelpers.SizeCoefficient
    '|fffd||7bd||fffd||fffd||fffd| frame
    Frame18.Top = Frame19.Top + Frame19.height + 6 * SendFormHelpers.SizeCoefficient
    '|fffd||338||fffd||fffd||fffd||fffd||fffd| frame
    Frame20.Top = Frame18.Top + Frame18.height + 7 * SendFormHelpers.SizeCoefficient
    
    If ata_value_count = 1 Then
        MultiPage1.height = 520 * SendFormHelpers.SizeCoefficient
        Send_form.height = 540 * SendFormHelpers.SizeCoefficient
    Else
        MultiPage1.height = ((ata_value_count - 1) * 18) + 520 * SendFormHelpers.SizeCoefficient
        Send_form.height = ((ata_value_count - 1) * 18) + 540 * SendFormHelpers.SizeCoefficient
    End If
    CommandButton19.Top = Frame20.Top + Frame20.height + 5 * SendFormHelpers.SizeCoefficient
    CommandButton20.Top = Frame20.Top + Frame20.height + 5 * SendFormHelpers.SizeCoefficient
    lbl_percent4.Top = Frame20.Top + Frame20.height + 24 * SendFormHelpers.SizeCoefficient
    lbl_status4.Top = Frame20.Top + Frame20.height + 24 * SendFormHelpers.SizeCoefficient
    progressBar4.Top = Frame20.Top + Frame20.height + 35 * SendFormHelpers.SizeCoefficient
End Sub

'|fffd||fffd||fffd||3b1||5f7||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub UserForm_Terminate()
    Unload login_form
    Unload Send_form
End Sub

'|fffd||fffd||fffd||6f0||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7b7||fffd| |16c||fffd||fffd||fffd||fffd|
Private Sub Calendar1_AfterUpdate()
    If frame_calendar_start.Visible = True Then
        txtbox_date_start.value = Calendar1.value
        frame_calendar_start.Visible = False
    End If
End Sub

'|fffd||fffd||fffd||6f0||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7b7||fffd| |16c||fffd||fffd||fffd||fffd|
Private Sub Calendar2_AfterUpdate()
    txtbox_date_end.value = Calendar2.value
    frame_calendar_end.Visible = False
End Sub

'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub Frame14_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    Label52.font.Underline = False
End Sub

'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub Frame4_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    Label18.font.Underline = False
End Sub

'|fffd||339||fffd||fffd||fffd| |16c||fffd||fffd||fffd||fffd| coolsms |fffd||fffd||fffd||fffd||1ae| |fffd||335||fffd|
Private Sub Image4_Click()
    If MsgBox("|fffd||3f87d||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||6e6e||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo, "|228||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||6e6e|") = vbYes Then
        ActiveWorkbook.FollowHyperlink "http://www.coolsms.co.kr"
    End If
End Sub

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd|(|fffd||578||fffd||fffd|) |fffd||fffd||fffd||fffd|
Private Sub Label28_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    Label28.font.Underline = True
    Label28.MousePointer = SendFormHelpers.MouseCursor(MOUSE_CLICK)
End Sub

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd|(|fffd||578||fffd||fffd|) |fffd||fffd||fffd||fffd|
Private Sub Label18_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    Label18.font.Underline = True
    Label18.MousePointer = SendFormHelpers.MouseCursor(MOUSE_CLICK)
End Sub

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd|(|fffd||578||fffd||fffd|) |fffd||fffd||fffd||fffd|
Private Sub Image4_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    Label52.font.Underline = True
    Image4.MousePointer = SendFormHelpers.MouseCursor(MOUSE_CLICK)
End Sub

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd|(|fffd||578||fffd||fffd|) |fffd||fffd||fffd||fffd|
Private Sub label_delete_image_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    label_delete_image.font.Underline = True
    label_delete_image.MousePointer = SendFormHelpers.MouseCursor(MOUSE_CLICK)
End Sub

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd|(|fffd||578||fffd||fffd|) |fffd||fffd||fffd||fffd|
Private Sub CommandButton9_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    CommandButton9.MousePointer = SendFormHelpers.MouseCursor(MOUSE_CLICK)
End Sub

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd|(|fffd||578||fffd||fffd|) |fffd||fffd||fffd||fffd|
Private Sub Frame11_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    frame_calendar_start.Visible = False
    frame_calendar_end.Visible = False
End Sub

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd|(|fffd||578||fffd||fffd|) |fffd||fffd||fffd||fffd|
Private Sub btn_image_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    btn_image.MousePointer = SendFormHelpers.MouseCursor(MOUSE_CLICK)
End Sub

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd|(|fffd||578||fffd||fffd|) |fffd||fffd||fffd||fffd|
Private Sub btn_preview_row_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    btn_preview_row.MousePointer = SendFormHelpers.MouseCursor(MOUSE_CLICK)
End Sub

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd|(|fffd||578||fffd||fffd|) |fffd||fffd||fffd||fffd|
Private Sub btn_send_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    btn_send.MousePointer = SendFormHelpers.MouseCursor(MOUSE_CLICK)
End Sub

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd|(|fffd||578||fffd||fffd|) |fffd||fffd||fffd||fffd|
Private Sub CommandButton6_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    CommandButton6.MousePointer = SendFormHelpers.MouseCursor(MOUSE_CLICK)
End Sub

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd|(|fffd||578||fffd||fffd|) |fffd||fffd||fffd||fffd|
Private Sub CommandButton7_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If CommandButton7.Enabled = True Then
        CommandButton7.MousePointer = SendFormHelpers.MouseCursor(MOUSE_CLICK)
    End If
End Sub

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd|(|fffd||578||fffd||fffd|) |fffd||fffd||fffd||fffd|
Private Sub CommandButton5_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    CommandButton5.MousePointer = SendFormHelpers.MouseCursor(MOUSE_CLICK)
End Sub

'|fffd||fffd||fffd||cf7a| |13f||fffd||fffd|(|fffd||578||fffd||fffd|) |fffd||fffd||fffd||fffd|
Private Sub CommandButton4_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    CommandButton4.MousePointer = SendFormHelpers.MouseCursor(MOUSE_CLICK)
End Sub

'|fffd||fffd||fffd||6f0||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7b7||fffd| |16c||fffd||fffd||fffd||fffd|
Private Sub MonthView1_DateClick(ByVal DateClicked As Date)
    txtbox_date_start.value = MonthView1.value
    MonthView1.Visible = False
End Sub

'|fffd||fffd||fffd||6f0||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7b7||fffd| |16c||fffd||fffd||fffd||fffd|
Private Sub MonthView2_DateClick(ByVal DateClicked As Date)
    txtbox_date_end.value = MonthView2.value
    MonthView2.Visible = False
End Sub

'|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fd||fffd| |fffd||33a||fffd||1ae|
Private Sub OptionButton3_Click()
    If OptionButton3.value Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fd||fffd|, |fffd||fffd||fffd||179||fffd||223| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||1be||fffd||fffd||574||3f4||fffd|. " & vbCrLf & _
               "|fffd||678||fffd||fffd||fffd|, |fffd||7fd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||5b4||fffd| |fffd||fffd||fffd||b7||fffd| |fffd||fffd||fffd||6b0||fffd| |fffd||fffd||fffd||6f5||2f4||3f4||fffd|.", vbInformation
        TextBox4.Visible = False
        RefEdit7.Visible = True
        RefEdit7.SetFocus
    End If
End Sub

'|121||22f||fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||7fd||179||fffd||223| '|fffd||fffd||fffd||fffd||fffd||537||fffd|' |fffd||fffd||fffd||fd||fffd|
Private Sub OptionButton4_Click()
    If OptionButton4.value Then
        TextBox4.Visible = True
        RefEdit7.Visible = False
    End If
End Sub

'|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||179||fffd||223| |fffd||fffd||fffd||fffd||fffd|
Private Sub RefEdit2_Change()
    If CommandButton7.Enabled Then
        ListBox1.Clear
        CommandButton7.Enabled = False
    End If
End Sub

'|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||6b3||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Sub RefEdit3_Change()
    If CommandButton7.Enabled Then
        ListBox1.Clear
        CommandButton7.Enabled = False
    End If
End Sub

Private Sub RefEdit4_Change()
    On Error GoTo gohere
gohere:
    Resume Next
End Sub

Private Sub RefEdit6_Change()
    If CommandButton7.Enabled Then
        CommandButton7.Enabled = False
    End If
End Sub

Private Sub TextBox1_Change()
    If CommandButton7.Enabled Then
        CommandButton7.Enabled = False
    End If
End Sub

Private Sub TextBox2_Change()
    CommandButton8.Enabled = False
End Sub

Private Sub TextBox5_Change()
    If CommandButton7.Enabled Then
        CommandButton7.Enabled = False
    End If
End Sub

'|fffd||fffd||fffd||6f0||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7b7||fffd| |fffd||fffd||fffd|
Private Sub txtbox_date_start_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    frame_calendar_end.Visible = False
    frame_calendar_start.Visible = True
    frame_calendar_start.ZOrder msoBringToFront
End Sub

'|fffd||fffd||fffd||6f0||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7b7||fffd| |fffd||fffd||fffd|
Private Sub txtbox_date_end_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    frame_calendar_start.Visible = False
    frame_calendar_end.Visible = True
    frame_calendar_end.ZOrder msoBringToFront
End Sub

'|fffd||2ebb||fffd||fffd||fffd||fffd| |fffd||fffd| - |f7||fffd||3b5||fffd| |fffd||339||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||1b0||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    label_delete_image.font.Underline = False
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub warning_screen_resolution()
    Dim w As Long, h As Long
    w = GetSystemMetrics32(0) ' width in points
    h = GetSystemMetrics32(1) ' height in points
    If w <= 1600 Then
        MsgBox "|fffd||63b||fffd| 1600x900 |fffd||fffd||fffd||3ff||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||3fa||3b0||fffd| |fffd||23a||fffd||fffd||fffd| |fffd||fffd| |fffd||5bd||fffd||fffd||3f4||fffd|.", vbInformation
    End If
End Sub

'|fffd||2ebb||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|, |121||22f||fffd||fffd||fffd||fffd|, |12b||12b||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||7fc||fffd| |fffd||f0||fffd| |fffd||fffd||fffd||fffd|
Private Sub set_scheduled_date(index As Integer)
    Dim current_date As Date
    current_date = Now()
        
    Send_form.Controls("scheduled_date_" & index).value = current_date
    Send_form.Controls("scheduled_hour_" & index).value = Format(current_date, "Hh")
    Send_form.Controls("scheduled_minute_" & index).value = Format(current_date, "Nn")
    Send_form.Controls("scheduled_second_" & index).value = Format(current_date, "Ss")
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SubstituteText"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private inc_count As Integer                                '|fffd||fffd||3f5||fffd| |121||22f| |fffd||73e||fffd||fffd|
Private merge_word() As String, merge_data() As String      '|121||22f||fffd||73e||fffd|, |fffd||73e||ed65||fffd||fffd||fffd||fffd| |fffd||8fed|
Private msg_arr() As String                                 '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||8fed|
Private merge_word_count As Long                            '|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||179||fffd||223| |fffd||fffd|
Private image                                               '|fffd||339||fffd||fffd||fffd| |fffd||fffd||fc|
Private auth As Authentication                              'Authentication |16c||fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private resp As Response                                    'Response |16c||fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private Msg As message                                      'message |16c||fffd||fffd||fffd||fffd| |fffd||fffd||fc|
Private sendObj As mSend                                    'send |16c||fffd||fffd||fffd||fffd| |fffd||fffd||fc|

Public Sub checkSubsWords(inc As Integer)
    Dim selected_data_count As Long, i As Integer, K As Integer
    Dim set_merge_word As String
    inc_count = inc
    
On Error GoTo gohere
    merge_word_count = SendFormHelpers.get_row_count(Send_form.RefEdit5.value)
    
gohere:
    Resume Next
    '|fffd||fffd||fffd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd| merge_word_count |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||37e||fffd||fffd||fffd|
    If merge_word_count = 0 Then
        MsgBox "|fffd||fffd||fffd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||537||fffd||fffd||3fc||fffd||fffd||fffd|.", vbInformation
        Send_form.RefEdit5.SetFocus
        Exit Sub
    End If
    
    '|121||22f| |fffd||73e||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fc||169| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| count |fffd||fffd| merge_word_count |fffd||fffd| |fffd||fffd|
    For i = 1 To inc_count
        Dim temp_target As String
        Dim order As String
        temp_target = Send_form.Controls("ref_merge_" & i).value
        
        Select Case i
                Case 1: order = "|f9||fffd||fffd||b0|"
                Case 2: order = "|fffd||3b9||fffd||b0|"
                Case 3: order = "|fffd||fffd||fffd||fffd||b0|"
                Case 4: order = "|fffd||5f9||fffd||b0|"
                Case 5: order = "|fffd||67c||fffd||fffd||fffd||b0|"
                Case 6: order = "|fffd||fffd||fffd||fffd||fffd||fffd||b0|"
                Case 7: order = "|fffd||3f0||fffd||fffd||fffd||b0|"
        End Select
        
        If temp_target = vbNullString Then
            MsgBox order & " |121||22f||fffd||73e||ec21| |fffd||fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbExclamation
            Send_form.Controls("ref_merge_" & i).SetFocus
            Exit Sub
        End If
        
        '|121||22f| |fffd||73e||fffd||fffd||fffd| |fffd||fffd||fffd||f5||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| count
        selected_data_count = SendFormHelpers.get_row_count(temp_target)
        If merge_word_count > selected_data_count Then
            MsgBox order & " |121||22f||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||3f4||fffd| |fffd||fffd||fffd||179||fffd||223||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
            Exit Sub
        ElseIf merge_word_count < selected_data_count Then
            If MsgBox(order & " |121||22f||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||3f4||fffd| |fffd||fffd||fffd||179||fffd||223||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd|. |fffd||fffd||fffd||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo) = vbNo Then
                Exit Sub
            End If
        End If
    Next
    
    ReDim merge_word(6)
    
    '|fffd||7f0||fffd||fffd||fffd| |121||22f||fffd||73e||ec21| |fffd||fffd||3f5||fffd| merge_word |fffd||fffd| |fffd||339||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd||fffd||fffd| |fc||169|
    For i = 0 To inc_count
        Dim target As String
        target = Send_form.Controls("ref_merge_" & i + 1).value
        
        If Not target = vbNullString Then
            set_merge_word = "{" & Range(target).Cells(1, 1) & "}"
            
            For K = 0 To inc_count
                Dim target_word As String
                '|178||fffd||fffd| |fffd||73e||fffd| |fffd||fffd||fffd||fffd|
                target_word = merge_word(K)
                '|178||fffd||fffd| |fffd||73e||ec21| |fffd||fffd||fffd||fffd||173||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||73e||fffd||fffd||338||fffd| |fc||169||fffd||fffd| |fffd||2bf||fffd| |fffd||fffd||fffd||fffd|
                '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||73e||ec21| |fffd||7f0||fffd| |fffd||1fe||fffd||fffd||674||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |121||22f||fffd||73e||ec21| |fffd||fffd||fffd||fffd| |fffd||73e||ec21| |fffd||fffd||fffd||fffd||fffd||674||fffd| |fffd||fffd|
                If target_word = "" Or K = 6 Then
                    GoTo gotoNext
                End If
                'Debug.Print "i=" & i & " k=" & k & " merge_word(" & i & ")=" & merge_word(k) & " set_merge_word=" & set_merge_word
                If merge_word(K) = set_merge_word And inc_count > 1 Then
                    If Not i = K Then
                        MsgBox "|fffd||fffd||fffd||fffd| |fffd||338||fffd||fffd||fffd| |121||22f||fffd||73e||ec21| |fffd||339||fffd| |fffd||fffd||fffd||fffd||fffd||574||3f4||fffd|.", vbCritical
                        Send_form.Controls("ref_merge_" & inc_count).value = ""
                        Send_form.Controls("ref_merge_" & inc_count).SetFocus
                        Exit Sub
                    End If
                End If
gotoNext:
            Next
            '|121||22f||fffd||73e||efe1| |fffd||4fd||fffd| |121||22f||fffd||73e||fffd| |fffd||fffd||fffd||fffd|
            merge_word(i) = set_merge_word
        End If
    Next
    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||1b0| enable
    Send_form.CommandButton3.Enabled = True
    set_merge_data
    display_merge_word
End Sub

'|121||22f| |fffd||fffd||fffd||fffd| |fffd||fffd| - |121||22f||fffd||73e||efe1| |fffd||2bf||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||378||fffd| |fffd||8fed||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub set_merge_data()
    Dim j As Long, i As Long
    Dim temp_range As Range
    
    j = 0
    
    For j = 0 To inc_count
        Dim target As String
        target = Send_form.Controls("ref_merge_" & j + 1).value
        
        On Error GoTo errorHandle
        If Not target = vbNullString Then
            Set temp_range = Range(target)
            If j = 0 Then
                ReDim merge_data(inc_count - 1, SendFormHelpers.get_row_count(target) - 1)
            End If
            
            For i = 0 To SendFormHelpers.get_row_count(target) - 1
                merge_data(j, i) = temp_range.Cells(i + 1, 1)
            Next
        End If
errorHandle:
        Resume Next
    Next
End Sub

'|121||22f||fffd||73e||fffd| |fffd||fffd| - |fffd||fffd||3f5||fffd| |123||22f| |fffd||73e||fffd| |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||7f0||fffd|
Private Sub display_merge_word()
    Send_form.ListBox3.Clear
    With Send_form.ListBox3
        .Clear
        .ColumnHeads = False
        .ColumnCount = 1
        .list = merge_word
        .ColumnWidths = "55"
        .height = 72
    End With
End Sub

Public Sub preview()
    Dim entered_msg As String
    entered_msg = Send_form.TextBox2.value
    Set image = Send_form.Image3
    
    '|fffd||fffd||fffd||179||fffd||223| |fc||169|
    If Send_form.RefEdit5.value = vbNullString Then
        MsgBox "|fffd||fffd||fffd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
        Exit Sub
    End If
    '|fffd||7bd||fffd||fffd||fffd| |fc||169|
    If entered_msg = vbNullString Then
        MsgBox "|fffd||7bd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
        Exit Sub
    End If
    '|fffd||fffd||3f5||fffd| |121||22f| |fffd||73e||fffd| |fc||169|
    On Error GoTo errorHandle
    If merge_word(0) = "" Then
        MsgBox "|fffd||fffd||3f5||fffd| |121||22f| |fffd||73e||ec21| |fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
        Exit Sub
    End If
errorHandle:
    If Err.number <> 0 Then
        Call Me.checkSubsWords(inc_count)
    End If
    
    Dim target_string As String, change_string As String, temp_output As String, sender_number As String
    Dim content_arr() As String, message_arr() As String, sender_no_arr() As String
    Dim to_arr As String
    Dim from_range As Range, to_range As Range
    Dim j As Integer, i As Long
    ReDim content_arr(merge_word_count - 1)
        
    If Send_form.SenderIdList3.value = "" Then
        MsgBox "|fffd||7fd||fffd||fffd||fffd| |fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
        Exit Sub
    End If
    
    If Not Send_form.SenderIdList3.MatchFound Then
        MsgBox "|fffd||7fd||fffd| |fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||2bd||fffd||fffd||3f4||fffd|.", vbCritical
        Exit Sub
    End If
    
    '|fffd||7fd||fffd||fffd||fffd| |fffd||fffd||223|
    sender_number = Send_form.SenderIdList3.value
        
    '|fffd||fffd| |fffd||7bd||fffd||fffd||fffd| |fffd||23f||fffd| |fffd||5b4||fffd| target_string(|fffd||fffd|: {|fffd||338||fffd|}, {|fffd||5bc||fffd|}) |fffd||fffd| merge_data |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||377||fffd| |fffd||fffd||22f||fffd||3ff||fffd|
    '|fffd||67d||fffd| content_arr |fffd||8fed||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||474||fffd|.
    For j = 0 To inc_count - 1
        target_string = merge_word(j)
        For i = 1 To merge_word_count - 1
            If content_arr(i - 1) = vbNullString Then
                content_arr(i - 1) = entered_msg
            End If
            change_string = merge_data(j, i)
            content_arr(i - 1) = Replace(content_arr(i - 1), target_string, change_string)
        Next
    Next
    
    Set to_range = Range(Send_form.RefEdit5.value)
    '|fffd||7bd||fffd||fffd||fffd| |fffd||8fed| |fffd||fffd||fffd||fffd|
    ReDim msg_arr(merge_word_count - 2, 6)
    Dim recipient_number As String
    Dim error_count As Integer
            
    '|fffd||7bd||fffd||fffd||fffd| |fffd||8fed||fffd||fffd| |fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    For i = 1 To merge_word_count - 1
        recipient_number = SendFormHelpers.onlyDigits(to_range.Cells(i + 1, 1))
        recipient_number = Trim(recipient_number)
        
        If (Mid(recipient_number, 1, 1)) = "1" Then
            recipient_number = "0" & recipient_number
        End If
        
        '|fffd||fffd||fc||169|, |fffd||f9||678||fffd| |fffd||fffd||22d||fffd||fffd||223||fffd||fffd||fffd||fffd| |fc||169|
        If recipient_number = "" Or Not SendFormHelpers.is_valid_cellphone(recipient_number) Then
            error_count = error_count + 1
        End If
        
        '|fffd||fffd||fffd||179||fffd||223|
        msg_arr(i - 1, 0) = recipient_number
        
        '|fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |121||22f| |fffd||3f7||fffd||fffd| |fffd||7bd||fffd||fffd||fffd|)
        msg_arr(i - 1, 1) = content_arr(i - 1)
        
        '|fffd||7fd||fffd| |fffd||fffd||223| |fffd||fffd||fffd||fffd|
        msg_arr(i - 1, 2) = sender_number
        
        '|fffd||7bd||fffd||fffd||fffd| |178||fffd||fffd| |fffd||fffd||fffd||fffd|
        If Not image.Picture Is Nothing Then
            msg_arr(i - 1, 3) = "MMS"
        ElseIf SendFormHelpers.LenMbcs(msg_arr(i - 1, 1)) > 90 Then
            msg_arr(i - 1, 3) = "LMS"
        Else
            msg_arr(i - 1, 3) = "SMS"
        End If
        
        SendFormHelpers.update_progressBar i, merge_word_count - 1, 3, "|fffd||63a||fffd||fffd||fffd|..."
    Next
        SendFormHelpers.update_progressBar 1, 1, 3, "|fffd||63a||fffd||3f7||fffd|"
        
    '|fffd||338||fffd||fffd||fffd||fffd||fffd|( |fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||1ae|
    Send_form.Frame9.caption = "|fffd||338||fffd||fffd||fffd||fffd||fffd| (" & merge_word_count - 1 & "|fffd||fffd|)"
    
    '|fffd||338||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||8fed| |fffd||fffd||fffd||fffd|(|fffd||fffd||fffd|)
    With Send_form.ListBox2
        .Clear
        .list = msg_arr
        .ColumnCount = 4
        .ColumnWidths = "57;99;57;35"
    End With
    
    If error_count > 0 Then
        MsgBox error_count & "|fffd||fffd||fffd||fffd| |fffd||7f8||fffd||fffd||fffd| |fffd||fffd||fffd||179||fffd||223||fffd||fffd| |fffd||5bd||fffd||fffd||3f4||fffd|. |fffd||338||fffd||fffd||fffd||fffd||2fe1||fffd||fffd| |22e||fffd||fffd| |fffd||fffd||fffd||5bc||fffd||fffd||fffd|."
    End If
    
    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||1b0| enable
    Send_form.CommandButton8.Enabled = True
End Sub

'|fffd||fffd||3f5||fffd| |121||22f||fffd||73e||ee26| |16c||fffd||fffd||fffd||333||fffd| |fffd||fffd||fffd||fffd||16c||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||bfe1| |fffd||7f0||fffd|
Public Sub insertMergeWord()
    Dim list_index As Long
    Dim textbox2_content As String
    list_index = Send_form.ListBox3.ListIndex
    
    Send_form.TextBox2.value = Send_form.TextBox2.value & merge_word(list_index)
    Send_form.TextBox2.SetFocus
End Sub

'Send |fffd||7bc||4b5||fffd|
Public Sub send()
    Dim i As Long, j As Long, msg_count As Long, total_charge As Long
    Dim balance As Long
    Dim json_string() As String
    Dim extension_arr_count As Integer
    Dim time
    Dim scheduled_msg As String
    
    '|fffd||73e||fffd| |fffd||fffd||fffd||fffd|
    balance = Send_form.getBalance
    '|fffd||7bd||fffd||fffd||fffd| & sendObj |fffd||fffd||fc| |fffd||fffd||fffd||fffd|
    Set Msg = New message
    Set sendObj = New mSend
    Set resp = New Response
    Set auth = New Authentication
    
    '|fffd||fffd| |fffd||7bd||fffd||fffd||fffd| |12b||fffd||fffd||1ae|
    msg_count = UBound(msg_arr) + 1
    total_charge = 0
    
    '|fffd||339||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Not Send_form.Image3.Picture Is Nothing Then
        Msg.set_image = Send_form.image3_name
        Msg.set_type = "MMS"
        Msg.set_image_encoding = "base64"
    End If
    '|fffd||fffd| |fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 999|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||16d| extension_arr_count |fffd||fffd| |fffd||537||fffd|
    extension_arr_count = Int(UBound(msg_arr) / 999)
    'json_string |fffd||fffd| |fffd||fffd||fffd||fffd| extension_arr_count |fffd||fffd||16d| |fffd||8fed| |fffd||4b4||fffd|
    ReDim json_string(extension_arr_count)
    
    scheduled_msg = ""
    '|fffd||fffd| |fffd||7bd||fffd||fffd||fffd| json |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - extension |fffd||fffd||fffd||fffd||3f1||2da7||fffd||fffd|
    j = 0
    For i = 0 To UBound(msg_arr)
        If i <> 0 And i Mod 999 = 0 Then
            j = j + 1
        End If
        If json_string(j) = "" Then
            json_string(j) = "["
        End If
        json_string(j) = json_string(j) + "{""to"":" & RestHelpers.ConvertToJSON(msg_arr(i, 0)) & _
                      ", ""text"": " & RestHelpers.ConvertToJSON(msg_arr(i, 1)) & _
                      ", ""from"": " & RestHelpers.ConvertToJSON(msg_arr(i, 2)) & _
                      ", ""type"": " & RestHelpers.ConvertToJSON(msg_arr(i, 3)) & "}"
                      
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3f6||fffd| |f3||fffd||fffd|
        If Send_form.scheduled_message_3 = True Then
            json_string(j) = Left(json_string(j), Len(json_string(j)) - 1)
            json_string(j) = json_string(j) + ", ""datetime"":" & onlyDigits(Send_form.scheduled_date_3) & Send_form.scheduled_hour_3 & Send_form.scheduled_minute_3 & Send_form.scheduled_second_3 & "}"
            scheduled_msg = "|fffd||fffd||fffd||cef||a5| : " & Send_form.scheduled_date_3 & " " & Send_form.scheduled_hour_3 & "|fffd||fffd| " & Send_form.scheduled_minute_3 & "|fffd||fffd| " & Send_form.scheduled_second_3 & "|fffd||fffd|" & vbCrLf
        End If
            
        json_string(j) = json_string(j) + ","
        total_charge = total_charge + calculate_charge(msg_arr(i, 3))
        
        SendFormHelpers.update_progressBar i, msg_count, 3, "|fffd||7fc||fffd||fffd||63a||fffd||fffd||fffd|"
        DoEvents
    Next
    SendFormHelpers.update_progressBar 1, 1, 3, "|fffd||63a||fffd||3f7||fffd|"
    '|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||6bf||fffd| |fffd||5b4||fffd| ,(|fffd||7b8||fffd|)|fffd||fffd| "]" |fffd||fffd| |fffd||fffd||fc|
    Dim loc As Long
    For i = 0 To UBound(json_string)
        loc = InStrRev(json_string(i), ",")
        json_string(i) = Left(json_string(i), loc - 1) + "]"
    Next
    
    '|fffd||fffd||fffd||fffd| |fffd||73e||fffd| |fc||169||fffd||3ff||fffd| |fffd||7fc||6f0||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |22e||fffd||fffd|
    If SendFormHelpers.check_avail_balance(balance, total_charge) Then
        '|fffd||7fc||fffd||22e||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||73e||fffd| |fffd||fffd| |fffd||7fc||6f1||77e||fffd| |fffd||fffd||fffd|
        If MsgBox(scheduled_msg + "|fffd||fffd||fffd||fffd| |fffd||73e||fffd||fffd||fffd| " & balance & " |fffd||fffd| |fffd||534||3f4||fffd|." & vbCrLf & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b4||fffd| " & msg_count & "|fffd||fffd||fffd||534||3f4||fffd|. " & vbCrLf & _
               "|fffd||fffd| |fffd||77e||fffd| : " & total_charge & "|fffd||fffd|" & vbCrLf & _
               "|fffd||7fc||fffd||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|? ", vbYesNo, "|fffd||fffd||fffd||6b9||7fc||fffd|") = vbYes Then
            SendFormHelpers.reset_progressBar 3
            Dim result As Integer
            time = Timer
            For i = 0 To extension_arr_count
                SendFormHelpers.update_progressBar i, extension_arr_count, 3, "|fffd||fffd||fffd||6b9||7fc||fffd||fffd||fffd|..."
                DoEvents
                Msg.set_extension = json_string(i)
                sendObj.set_message Msg
                Set auth = New Authentication
                result = REST.Connect(auth, resp, sendObj)
            Next
            SendFormHelpers.update_progressBar 2, 2, 3, "|fffd||7fc||6ff||3f7||fffd|"
            
            If result Then
                time = Timer - time
                MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||f0||fffd| : " & time & "|fffd||fffd|" & vbCrLf & "|fffd||fffd||fffd||6ff||3f7||fffd|"
            Else
                MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            End If
        Else
            MsgBox "|fffd||fffd||fffd||fffd| |fffd||7fc||fffd||fffd||fffd| |fffd||fffd||4b5||1fe||fffd||fffd||fffd||fffd||3f4||fffd|.", vbInformation
            Send_form.TextBox2.value = ""
            Send_form.ListBox2.Clear
            Send_form.Frame9.caption = "|fffd||338||fffd||fffd||fffd||fffd||fffd| (  |fffd||fffd|)"
            Set Msg = Nothing
            Set sendObj = Nothing
            Set resp = Nothing
            Erase msg_arr, merge_word, merge_data
            ReDim merge_word(6)
        End If
    Else
        '|fffd||73e||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| coolsms |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |22e||fffd||fffd| |fffd||7bd||fffd||fffd||fffd| |fffd||fffd||fffd|
        MsgBox "|fffd||fffd||fffd||fffd| |fffd||73e||fffd||fffd||fffd| " & balance & "|fffd||534||3f4||fffd|." & vbCrLf & _
               "|fffd||73e||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||574||3f4||fffd|.", vbCritical
        If MsgBox("|fffd||fffd||fffd||fffd||fffd||3f7||fffd| CoolSMS |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||6e6e||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||3f1||fffd|") = vbYes Then
            ActiveWorkbook.FollowHyperlink "http://www.coolsms.co.kr/recharge"
        End If
    End If
    SendFormHelpers.reset_progressBar 3
    Send_form.CommandButton8.Enabled = False
    Send_form.ListBox3.Clear
    Send_form.ListBox2.Clear
    Send_form.TextBox2.value = ""
    
    Set Msg = Nothing
    Set sendObj = Nothing
    Set resp = Nothing
    Erase msg_arr, merge_word, merge_data
    ReDim merge_word(6)
End Sub

'|fffd||fffd||fffd||fffd||1ae| |fffd||6bd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Sub ShowListboxContent(list_index As Long)
    Dim msgbox_content As String
    msgbox_content = "<""|fffd||fffd||fffd||179||fffd||223|"" : """ & msg_arr(list_index, 0) & """>" & vbCrLf & _
                     "<""|fffd||fffd||fffd||6b3||fffd||fffd||fffd|"" : """ & msg_arr(list_index, 1) & """>" & vbCrLf & _
                     "<""|fffd||7fd||179||fffd||223|"" : """ & msg_arr(list_index, 2) & """>" & vbCrLf & _
                     "<""|fffd||fffd||fffd||fffd||178||fffd||fffd|"" : """ & msg_arr(list_index, 3) & """>" & vbCrLf
    If Not image.Picture Is Nothing Then
        msgbox_content = msgbox_content + "<""image"" : """ & Send_form.image3_name & """>" & vbCrLf
    End If
    
    MsgBox msgbox_content
End Sub







Attribute VB_Name = "cCalendar"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'#########################
'# Team authors:          #
'# Krisztina Szab|fffd|         #
'# G|fffd|bor Mad|fffd|cs             #
'# Roberto Mensa (nick r)    #
'##############################

'# Event Triggered By Main Object
Public Event AfterUpdate()
Public Event BeforeUpdate(ByRef Cancel As Integer)
Public Event Click()
Public Event DblClick()

'# Members for Main Object
Private WithEvents CBxY As MSForms.ComboBox
Attribute CBxY.VB_VarHelpID = -1
Private WithEvents CBxM As MSForms.ComboBox
Attribute CBxM.VB_VarHelpID = -1

Private CLb As MSForms.Label
Private mDayButtons() As cCalendar
Private mLabelButtons() As cCalendar

Private PTitleNewFont As MSForms.NewFont
Private PDayNewFont As MSForms.NewFont
Private PGridNewFont As MSForms.NewFont
'# Members for Button Object
Private WithEvents CmB As MSForms.CommandButton
Attribute CmB.VB_VarHelpID = -1
Private CmBl As MSForms.Label
Private CmBlNum As MSForms.Label
Private mcMain As cCalendar

'# For Properties
Private lPFontSize As Long
Private lPMonthLength As calMonthLength
Private lPDayLength As Long
Private bPYearFirst As Boolean
Private lPTitleFontColor As Long
Private lPGridFontColor As Long
Private lPDayFontColor As Long
Private lPFirstDay As calDayOfWeek
Private dValue As Date
Private lPBackColor As Long
Private lPMonth As Long
Private lPYear As Long
Private lPDay As Long
Private lPHeaderBackColor As Long
Private lPUseDefaultBackColors  As Boolean
Private bPVisible As Boolean
Private sPHeight As Single
Private sPWidth As Single
Private sPTop As Single
Private sPLeft As Single
Private lPSaturdayBackColor As Long
Private lPSundayBackColor As Long
Private lPSelectedBackColor As Long
Private sPControlTipText As String
Private bPTabStop As Boolean
Private lPTabIndex As Long
Private sPTag As String

Private bPShowDays As Boolean
Private bPShowTitle As Boolean
Private bPShowDateSelectors As Boolean
Private bPValueIsNull As Boolean
Private bPRightToLeft As Boolean

Private bPMACFix As Boolean 'Fix MAC transparency errors

Private Const cDayFontColorSelected As Long = &H80000012 'Button text - Black
Private Const cDayFontColorInactive As Long = &H80000011 'Disabled text - Dark gray
Private Const cDefaultWidth As Single = 216
Private Const cDefaultHeight As Single = 144

Public Enum calDayOfWeek
    dwMonday = 1
    dwTuesday = 2
    dwWednesday = 3
    dwThursday = 4
    dwFriday = 5
    dwSaturday = 6
    dwSunday = 7
End Enum

Public Enum calMonthLength
    mlLocalLong = 0
    mlLocalShort = 1
    mlENLong = 2
    mlENShort = 3
End Enum




'###########################
'# Properties for Main object
Private Sub AAA__Properties_Blank_for_compatibility()
End Sub

Public Property Get GridCellEffect() As Long
'Property Blank - not work
'Determines the effect used to display the grid.
End Property

Public Property Get GridLinesColor() As Long
'Property Blank - not work
'Determines the color used to display the lines in the grid.
End Property

Public Property Get ShowHorizontalGrid() As Boolean
'Property Blank - not work
'Specifies whether the calendar display horizontal gridlines.
End Property

Public Property Get ShowVerticalGrid() As Boolean
'Property Blank - not work
'Specifies whether to display vertical gridlines.
End Property

Public Property Get HelpContextID() As Long
'Property Blank - not work
'Specifies whether to display vertical gridlines.
End Property


'###########################
'# Properties for Main object
Private Sub AAA__Properties_Book()
End Sub

Public Property Get Tag() As String
    Tag = sPTag
End Property

Public Property Let Tag(sTag As String)
    sPTag = sTag
End Property

Public Property Get Parent() As Control
    If bInit Then
        Set Parent = CBxY.Parent.Parent
    Else
        Set Parent = Nothing
    End If
End Property

Public Property Get ValueIsNull() As Boolean
    ValueIsNull = bPValueIsNull
End Property

Public Property Let ValueIsNull(ByVal bValueIsNull As Boolean)
    bPValueIsNull = bValueIsNull
    If bInit Then
        value = value
    End If
End Property

Public Property Get ShowTitle() As Boolean
    ShowTitle = bPShowTitle
End Property

Public Property Let ShowTitle(ByVal bShowTitle As Boolean)
    bPShowTitle = bShowTitle
    If bInit Then
        CLb.Visible = bPShowTitle
        Move
    End If
End Property

Public Property Get ShowDays() As Boolean
    ShowDays = bPShowDays
End Property

Public Property Let ShowDays(ByVal bShowDays As Boolean)
    Dim i As Long
    bPShowDays = bShowDays
    If bInit Then
        For i = 0 To 6
            mLabelButtons(i).Obj_CmBl.Visible = bShowDays
        Next
        Move
    End If
End Property

Public Property Get ShowDateSelectors() As Boolean
    ShowDateSelectors = bPShowDateSelectors
End Property

Public Property Let ShowDateSelectors(ByVal bShowDateSelectors As Boolean)
    bPShowDateSelectors = bShowDateSelectors
    If bInit Then
        CBxY.Visible = bShowDateSelectors
        CBxM.Visible = bShowDateSelectors
        Move
    End If
End Property

Public Property Get TabIndex() As Long
    TabIndex = lPTabIndex
End Property

Public Property Let TabIndex(ByVal lTabIndex As Long)
    lPTabIndex = lTabIndex
    If bInit Then
        CBxY.Parent.TabIndex = lTabIndex
    End If
End Property

Public Property Get TabStop() As Boolean
    TabStop = bPTabStop
End Property

Public Property Let TabStop(ByVal bTabStop As Boolean)
    bPTabStop = bTabStop
    If bInit Then
        CBxY.Parent.TabStop = bTabStop
    End If
End Property

Public Property Get ControlTipText() As String
    ControlTipText = sPControlTipText
End Property

Public Property Let ControlTipText(ByVal sControlTipText As String)
    Dim i As Long
    sPControlTipText = sControlTipText
    If bInit Then
        For i = 0 To 6
            mLabelButtons(i).Obj_CmBl.ControlTipText = sControlTipText
        Next
        For i = 0 To 41
            mDayButtons(i).Obj_Cmb.ControlTipText = sControlTipText
        Next
        CBxM.ControlTipText = sControlTipText
        CBxY.ControlTipText = sControlTipText
        CLb.ControlTipText = sControlTipText
        'CBxY.Parent.ControlTipText = sControlTipText
    End If
End Property

Public Property Get GridFont() As MSForms.NewFont
    Set GridFont = PGridNewFont
End Property

Public Property Set GridFont(ByRef clGridNewFont As MSForms.NewFont)
    Set PGridNewFont = clGridNewFont
End Property

Public Property Get DayFont() As MSForms.NewFont
    Set DayFont = PDayNewFont
End Property

Public Property Set DayFont(ByRef clDayNewFont As MSForms.NewFont)
    Set PDayNewFont = clDayNewFont
End Property

Public Property Get TitleFont() As MSForms.NewFont
    Set TitleFont = PTitleNewFont
End Property

Public Property Set TitleFont(ByRef clTitleNewFont As MSForms.NewFont)
    Set PTitleNewFont = clTitleNewFont
End Property

Public Property Get Visible() As Boolean
    Visible = bPVisible
End Property

Public Property Let Visible(ByVal bVisible As Boolean)
    bPVisible = bVisible
    If bInit Then
        CBxY.Parent.Visible = bVisible
    End If
End Property

Public Property Get Left() As Single
    Left = sPLeft
End Property

Public Property Let Left(ByVal sLeft As Single)
    sPLeft = sLeft
    If bInit Then
        CBxY.Parent.Left = sLeft
    End If
End Property

Public Property Get Top() As Single
    Top = sPTop
End Property

Public Property Let Top(ByVal ssTop As Single)
    sPTop = ssTop
    If bInit Then
        CBxY.Parent.Top = ssTop
    End If
End Property

Public Property Get height() As Single
    height = sPHeight
End Property

Public Property Let height(ByVal sHeight As Single)
    sPHeight = sHeight
    If bInit Then
        CBxY.Parent.height = sHeight
        Move
    End If
End Property


Public Property Get width() As Single
    width = sPWidth
End Property

Public Property Let width(ByVal sWidth As Single)
    'sWidth = Zero_Negative_Value(sWidth)
    sPWidth = sWidth
    If bInit Then
        CBxY.Parent.width = sWidth
        Move
    End If
End Property

Public Property Get BackColor() As Long
    BackColor = lPBackColor
End Property

Public Property Let BackColor(ByVal lBackColor As Long)
    lPBackColor = lBackColor
    If bInit Then
        CBxY.Parent.BackColor = lBackColor
    End If
End Property

Public Property Get HeaderBackColor() As Long
    HeaderBackColor = lPHeaderBackColor
End Property

Public Property Let HeaderBackColor(ByVal lHeaderBackColor As Long)
Dim i As Long
    lPHeaderBackColor = lHeaderBackColor
    UseDefaultBackColors = False
End Property

Public Property Get UseDefaultBackColors() As Boolean
    UseDefaultBackColors = lPUseDefaultBackColors
End Property

Public Property Let UseDefaultBackColors(ByVal lUseDefaultBackColors As Boolean)
    lPUseDefaultBackColors = lUseDefaultBackColors
    If bInit Then
        Refresh
    End If
End Property

Public Property Get SaturdayBackColor() As Long
    SaturdayBackColor = lPSaturdayBackColor
End Property

Public Property Let SaturdayBackColor(ByVal lSaturdayBackColor As Long)
    lPSaturdayBackColor = lSaturdayBackColor
    UseDefaultBackColors = False
End Property

Public Property Get SundayBackColor() As Long
    SundayBackColor = lPSundayBackColor
End Property

Public Property Let SundayBackColor(ByVal lSundayBackColor As Long)
    lPSundayBackColor = lSundayBackColor
    UseDefaultBackColors = False
End Property

Public Property Get SelectedBackColor() As Long
    SelectedBackColor = lPSelectedBackColor
End Property

Public Property Let SelectedBackColor(ByVal lSelectedBackColor As Long)
    lPSelectedBackColor = lSelectedBackColor
    If bInit Then
        Refresh
    End If
End Property

Public Property Get FirstDay() As calDayOfWeek
    FirstDay = lPFirstDay
End Property

Public Property Let FirstDay(ByVal vbFirstDay As calDayOfWeek)
    Dim i As Long, v
    
    Select Case vbFirstDay
        Case 1 To 7
        Case Else
            vbFirstDay = 1
    End Select
    
    lPFirstDay = vbFirstDay
    If bInit Then
        ApplyWeekDayLabelChanges
        Refresh
    End If
End Property

Public Property Get DayFontColor() As Long
    DayFontColor = lPDayFontColor
End Property

Public Property Let DayFontColor(ByVal lFontColor As Long)
    Dim i As Long
    
    lPDayFontColor = lFontColor
    If bInit Then
        For i = 0 To 6
            mLabelButtons(i).Obj_CmBl.ForeColor = lFontColor
        Next
    End If
End Property

Public Property Get GridFontColor() As Long
    GridFontColor = lPGridFontColor
End Property

Public Property Let GridFontColor(ByVal lFontColor As Long)
    Dim i As Long
    lPGridFontColor = lFontColor
    If bInit Then
        Refresh
    End If
End Property

Public Property Let TitleFontColor(ByVal lFontColor As Long)
    lPTitleFontColor = lFontColor
    If bInit Then
        CLb.ForeColor = lFontColor
    End If
End Property

Public Property Get TitleFontColor() As Long
    TitleFontColor = lPTitleFontColor
End Property

Public Property Get Month() As Long
    Month = lPMonth
End Property

Public Property Let Month(ByVal lMonth As Long)
    If lMonth = 0 Then
        value = Empty
    Else
        If lMonth < 0 Then lMonth = lPMonth
        lMonth = fMin(lMonth, 12)
        value = SumMonthsToDate(dValue, lMonth - lPMonth)
    End If
    lPMonth = lMonth
End Property

Public Property Get Year() As Long
    Year = lPYear
End Property

Public Property Let Year(ByVal lYear As Long)
    If lYear = 0 Then
        value = Empty
    Else
        value = VBA.DateSerial(CheckYear(lYear), VBA.Month(dValue), VBA.Day(dValue))
    End If
    lPYear = lYear
End Property

Public Property Get Day() As Long
    Day = lPDay
End Property

Public Property Let Day(ByVal lDay As Long)
    If lDay = 0 Then
        value = Empty
    Else
        If lDay < 0 Then lDay = lPDay
        lDay = fMin(lDay, VBA.Day(VBA.DateSerial(VBA.Year(dValue), VBA.Month(dValue) + 1, 0)))
        value = VBA.DateSerial(VBA.Year(dValue), VBA.Month(dValue), lDay)
    End If
    lPDay = lDay
End Property

Public Property Get value() As Variant
    If bPValueIsNull Then
        value = Empty
    Else
        value = dValue
    End If
End Property

Public Property Let value(ByVal newDate As Variant)
    Dim Cancel As Integer '*** Integer for backward compatibility
    
    If CheckValue(newDate) = False Then newDate = Empty

    RaiseEvent BeforeUpdate(Cancel)
    
    If Cancel = 0 Then 'Not canceled.

        If bInit And Not IsEmpty(newDate) Then
            CBxY.ListIndex = VBA.Year(newDate) - 1904
            CBxM.ListIndex = VBA.Month(newDate) - 1
        End If
        
        If (bPValueIsNull = IsEmpty(newDate)) Or (newDate <> dValue) Then
            If Not IsEmpty(newDate) Then
                dValue = newDate
            End If
            bPValueIsNull = IsEmpty(newDate)
            
            If bInit Then
                Refresh
            End If
        End If
        
        RaiseEvent AfterUpdate
    End If
End Property

Public Property Get DayLength() As calMonthLength
    DayLength = lPDayLength
End Property

Public Property Let DayLength(ByVal bDayLength As calMonthLength)
    Dim i As Long, v

    lPDayLength = bDayLength
    If bInit Then
        ApplyWeekDayLabelChanges
    End If
End Property

Public Property Get MonthLength() As calMonthLength
    MonthLength = lPMonthLength
End Property

Public Property Let MonthLength(ByVal iMonthLength As calMonthLength)
    Dim i As Long, m

    lPMonthLength = iMonthLength

    If bInit Then
        CBxM.list = fMonthName(CLng(iMonthLength))
        value = value
    End If
End Property

Public Property Get YearFirst() As Boolean
    YearFirst = bPYearFirst
End Property

Public Property Let YearFirst(ByVal bYearFirst As Boolean)
    bPYearFirst = bYearFirst
    RenderLabel
End Property


Public Property Get MACFix() As Boolean
    MACFix = bPMACFix
End Property

Public Property Let MACFix(ByVal bMACFix As Boolean)
    bPMACFix = bMACFix
    Refresh
End Property


Public Property Get RightToLeft() As Boolean
    RightToLeft = bPRightToLeft
End Property

Public Property Let RightToLeft(ByVal bRightToLeft As Boolean)
    bPRightToLeft = bRightToLeft
    If bInit Then
        ApplyWeekDayLabelChanges
        Refresh
    End If
End Property


'###########################
'# Properties for Day button objects
Private Sub AAA__Properties_for_Day_button_Book()
End Sub

Public Property Set Main(ByVal theMain As cCalendar)
    Set mcMain = theMain
End Property

Private Property Get Main() As cCalendar
    Set Main = mcMain
End Property

Public Property Get Obj_Cmb() As MSForms.CommandButton
    Set Obj_Cmb = CmB
End Property

Public Property Set Obj_Cmb(ByVal vNewValue As MSForms.CommandButton)
    Set CmB = vNewValue
End Property

Public Property Get Obj_CmBl() As MSForms.Label
    Set Obj_CmBl = CmBl
End Property

Public Property Set Obj_CmBl(ByVal vNewValue As MSForms.Label)
    Set CmBl = vNewValue
End Property

Public Property Set Obj_CmBlNum(ByVal vNewValue As MSForms.Label)
    Set CmBlNum = vNewValue
End Property

Public Property Get Obj_CmBlNum() As MSForms.Label
    Set Obj_CmBlNum = CmBlNum
End Property


'###########################
'# Public Methods
Private Sub AAA_Methods_Book()
End Sub

Public Sub AboutBox()
    MsgBox "Autori: r, Kris, Gabor"
End Sub

Public Sub Add( _
    ByVal fForm As MSForms.UserForm)

    Dim cFrame As MSForms.Frame
    Set cFrame = fForm.Controls.Add("Forms.Frame.1")
    
    With cFrame
        .width = IIf(sPWidth < 0, cDefaultWidth, sPWidth)
        .height = IIf(sPHeight < 0, cDefaultHeight, sPHeight)
    End With
    
    Add_Calendar_into_Frame cFrame
    
End Sub

Public Sub Add_Calendar_into_Frame(ByVal cFrame As MSForms.Frame)
    Dim i As Long
    Dim v(199)
    Dim w
    Dim dTemp As Date
    
    For i = 0 To 199
        v(i) = CStr(1904 + i)
    Next
    
    With cFrame
        .BackColor = BackColor
        .caption = ""
        .SpecialEffect = 0
        '.Top = IIf(sPTop = -1, .Top, sPTop)
        '.Left = IIf(sPLeft = -1, .Left, sPLeft)
        '.Width = IIf(sPWidth < 0, .Width, sPWidth)
        '.Height = IIf(sPHeight < 0, .Height, sPHeight)
        .Visible = bPVisible
        'Top = .Top
        'Left = .Left
        'Width = .Width
        'Height = .Height
    End With
    
    
    'Add this first, for proper taborder (Need TabStop.)
    Set CLb = cFrame.Controls.Add("Forms.Label.1")
    Set CBxY = cFrame.Controls.Add("Forms.ComboBox.1")
    Set CBxM = cFrame.Controls.Add("Forms.ComboBox.1")
    
    ReDim mLabelButtons(6)
    ReDim mDayButtons(41)
    w = fWeekdayName(CInt(lPDayLength))
    
    For i = 0 To 6
        Set mLabelButtons(i) = New cCalendar
        Set mLabelButtons(i).Main = Me
        Set mLabelButtons(i).Obj_CmBl = cFrame.Controls.Add("Forms.Label.1")
        With mLabelButtons(i).Obj_CmBl
            .caption = w(((i + lPFirstDay - 1) Mod 7))
            .ForeColor = DayFontColor
            .TextAlign = fmTextAlignCenter
            .BorderStyle = fmBorderStyleSingle
            .BorderColor = &H80000010 'Button shadow  &H80000015 'Button dark shadow
            '.SpecialEffect = fmSpecialEffectEtched
            If HeaderBackColor = -1 Then
                .BackColor = cDayFontColorSelected 'Dark gray
                .BackStyle = fmBackStyleTransparent
            Else
                .BackColor = HeaderBackColor
                .BackStyle = fmBackStyleOpaque
            End If
        End With
    Next
            
    For i = 0 To 41
        Set mDayButtons(i) = New cCalendar
        Set mDayButtons(i).Main = Me
        
        Set mDayButtons(i).Obj_CmBl = cFrame.Controls.Add("Forms.Label.1")
        With mDayButtons(i).Obj_CmBl 'MAC Fix
            .TextAlign = fmTextAlignCenter
        End With
        
        Set mDayButtons(i).Obj_CmBlNum = cFrame.Controls.Add("Forms.Label.1")
        With mDayButtons(i).Obj_CmBlNum
            .TextAlign = fmTextAlignCenter
            .BackStyle = fmBackStyleTransparent
        End With
        
        Set mDayButtons(i).Obj_Cmb = cFrame.Controls.Add("Forms.CommandButton.1")
        With mDayButtons(i).Obj_Cmb
            .BackStyle = fmBackStyleTransparent 'MAC Problem: No button transparency
        End With
        
        mDayButtons(i).RightToLeft = bPRightToLeft
    Next
    
    With CBxY
        .ListRows = 5
        .list = v
        .ListIndex = VBA.Year(dValue) - 1904
        .ShowDropButtonWhen = fmShowDropButtonWhenFocus
        .font.Bold = True
        .MatchRequired = True
    End With

    With CBxM
        .ListRows = 12
        .list = fMonthName(lPMonthLength)
        .ListIndex = VBA.Month(dValue) - 1
        .ShowDropButtonWhen = fmShowDropButtonWhenFocus
        .font.Bold = True
        .MatchRequired = True
    End With
    
    With CLb
        .ForeColor = TitleFontColor
        .TextAlign = fmTextAlignCenter
        .BackStyle = fmBackStyleTransparent
    End With
    
    ApplyWeekDayLabelChanges
    
    ApplyFontChanges
    
    Refresh_Properities
    
    Move
    
End Sub

Private Sub ApplyWeekDayLabelChanges()
    Dim i As Long
    Dim w
    
    w = fWeekdayName(CInt(lPDayLength))
    For i = 0 To 6
        If bPRightToLeft Then
            mLabelButtons(6 - i).Obj_CmBl.caption = w((i + lPFirstDay - 1) Mod 7)
        Else
            mLabelButtons(i).Obj_CmBl.caption = w((i + lPFirstDay - 1) Mod 7)
        End If
    Next
End Sub

Private Sub ApplyFontChanges()
    Dim font As MSForms.NewFont
    Dim i As Long

    If Not PDayNewFont Is Nothing Then
        For i = 0 To 6
            With mLabelButtons(i).Obj_CmBl
                If .font.Bold <> DayFont.Bold Then _
                    .font.Bold = DayFont.Bold
                If .font.Weight <> DayFont.Weight Then _
                    .font.Weight = DayFont.Weight
                If .font.charset <> DayFont.charset Then _
                    .font.charset = DayFont.charset
                If .font.Italic <> DayFont.Italic Then _
                    .font.Italic = DayFont.Italic
                If .font.Name <> DayFont.Name Then _
                    .font.Name = DayFont.Name
                If .font.Size <> DayFont.Size Then _
                    .font.Size = DayFont.Size
                If DayFont.Strikethrough Then _
                    .font.Strikethrough = True
                If DayFont.Underline Then _
                    .font.Underline = True
            End With
        Next
    End If
            
    If Not PGridNewFont Is Nothing Then
        For i = 0 To 41
            If Not bPMACFix Then
                Set font = mDayButtons(i).Obj_CmBlNum.font
            Else
                Set font = mDayButtons(i).Obj_Cmb.font
            End If
        
            With font
                If .Bold <> GridFont.Bold Then _
                    .Bold = GridFont.Bold
                If .Weight <> GridFont.Weight Then _
                    .Weight = GridFont.Weight
                If .charset <> GridFont.charset Then _
                    .charset = GridFont.charset
                If .Italic <> GridFont.Italic Then _
                    .Italic = GridFont.Italic
                If .Name <> GridFont.Name Then _
                    .Name = GridFont.Name
                If .Size <> GridFont.Size Then _
                    .Size = GridFont.Size
                If GridFont.Strikethrough Then _
                    .Strikethrough = True
                If GridFont.Underline Then _
                    .Underline = True
            End With
        Next
    End If
    
    If Not PTitleNewFont Is Nothing Then
        With CLb
                If .font.Bold <> TitleFont.Bold Then _
                    .font.Bold = TitleFont.Bold
                If .font.Weight <> TitleFont.Weight Then _
                    .font.Weight = TitleFont.Weight
                If .font.charset <> TitleFont.charset Then _
                    .font.charset = TitleFont.charset
                If .font.Italic <> TitleFont.Italic Then _
                    .font.Italic = TitleFont.Italic
                If .font.Name <> TitleFont.Name Then _
                    .font.Name = TitleFont.Name
                If .font.Size <> TitleFont.Size Then _
                    .font.Size = TitleFont.Size
                If TitleFont.Strikethrough Then _
                    .font.Strikethrough = True
                If TitleFont.Underline Then _
                    .font.Underline = True
        End With
    End If

End Sub

Public Sub Move( _
        Optional vLeft, _
        Optional vTop, _
        Optional vWidth, _
        Optional vHeight, _
        Optional vLayout)
        
    Dim i As Long, l As Currency, b As Currency, lc As Currency, bc As Currency
    Dim t As Long, b_ym As Currency, b_combo_m As Currency
    
    Const h_combo As Long = 16
    Const b_combo_y As Long = 42
    b_combo_m = IIf(lPMonthLength = mlENShort Or lPMonthLength = mlLocalShort, 42, 66) '66
    b_ym = b_combo_y + 2 + b_combo_m
    
    If bInit Then
        t = IIf(ShowDays, 7, 6)
        
        With CBxY.Parent 'Frame
            sPTop = IIf(IsMissing(vTop), IIf(Top = -1, .Top, Top), vTop)
            sPLeft = IIf(IsMissing(vLeft), IIf(Left = -1, .Left, Left), vLeft)
            sPHeight = IIf(IsMissing(vHeight), IIf(height = -1, .height, height), vHeight)
            sPWidth = IIf(IsMissing(vWidth), IIf(width = -1, .width, width), vWidth)
            
            l = height
            b = width
            l = Zero_Negative_Value(l - IIf(ShowTitle Or ShowDateSelectors, h_combo, 0) - 1)
            lc = CCur(l / t)
            bc = CCur(b / 7)
            b = bc * 7
            'Debug.Print bc
            'Debug.Print lc
            'Debug.Print b
            'Debug.Print l
            
        End With
        
        If ShowTitle Then
            With CLb
                .width = Zero_Negative_Value(IIf(ShowDateSelectors, b - b_ym, b))
                .height = h_combo
                .Left = 0
            End With
        End If
        
        If ShowDateSelectors Then
            With CBxY
                .width = b_combo_y
                .height = h_combo
                .Left = IIf(ShowTitle, CLb.width, Int((b - b_ym) / 2)) + _
                       IIf(YearFirst, 0, b_combo_m + 2)
            End With
        
            With CBxM
                .width = b_combo_m
                .height = h_combo
                .Left = IIf(ShowTitle, CLb.width, Int((b - b_ym) / 2)) + _
                       IIf(YearFirst, b_combo_y + 2, 0)
            End With
        End If
        If ShowDays Then
            For i = 0 To 6
                With mLabelButtons(i).Obj_CmBl
                    .Top = IIf(ShowTitle Or ShowDateSelectors, h_combo + 2, 0)
                    .Left = (i Mod 7) * bc - IIf(i > 0, 1, 0)
                    .height = lc
                    .width = bc + IIf(i > 0, 1, 0)
                End With
            Next
        End If
        For i = 0 To 41
            With mDayButtons(i).Obj_Cmb
                .Top = Int(i / 7) * lc + _
                       IIf(ShowTitle Or ShowDateSelectors, h_combo + 2, 0) + _
                       IIf(ShowDays, lc, 0)
                .Left = (i Mod 7) * bc
                .height = lc
                .width = bc
            End With
            With mDayButtons(i).Obj_CmBl
                .Top = mDayButtons(i).Obj_Cmb.Top
                .Left = mDayButtons(i).Obj_Cmb.Left
                .height = mDayButtons(i).Obj_Cmb.height
                .width = mDayButtons(i).Obj_Cmb.width
            End With
            
            With mDayButtons(i).Obj_CmBlNum
                .Top = Int(i / 7) * lc + _
                       IIf(ShowTitle Or ShowDateSelectors, h_combo, 0) + _
                       IIf(ShowDays, lc, 0) + 6
                .Left = (i Mod 7) * bc + 3
                .height = Zero_Negative_Value(lc - 6)
                .width = Zero_Negative_Value(bc - 6)
            End With

        Next
        
    Else
        sPHeight = IIf(IsMissing(height), cDefaultHeight, height)
        sPWidth = IIf(IsMissing(width), cDefaultWidth, width)
    End If
End Sub

Public Sub NextDay()
    Dim d As Date
    d = dValue + 1
    d = VBA.DateSerial(CheckYear(VBA.Year(d)), VBA.Month(d), VBA.Day(d))
    value = d
End Sub

Public Sub NextWeek()
    Dim d As Date
    d = dValue + 7
    d = VBA.DateSerial(CheckYear(VBA.Year(d)), VBA.Month(d), VBA.Day(d))
    value = d
End Sub

Public Sub NextMonth()
    value = SumMonthsToDate(dValue, 1)
End Sub

Public Sub NextYear()
    Dim d As Date
    d = VBA.DateSerial(CheckYear(VBA.Year(dValue) + 1), VBA.Month(dValue), VBA.Day(dValue))
    value = d
End Sub

Public Sub PreviousDay()
    Dim d As Date
    d = dValue - 1
    d = VBA.DateSerial(CheckYear(VBA.Year(d)), VBA.Month(d), VBA.Day(d))
    value = d
End Sub

Public Sub PreviousWeek()
    Dim d As Date
    d = dValue - 7
    d = VBA.DateSerial(CheckYear(VBA.Year(d)), VBA.Month(d), VBA.Day(d))
    value = d
End Sub

Public Sub PreviousMonth()
    value = SumMonthsToDate(dValue, -1)
End Sub

Public Sub PreviousYear()
    Dim d As Date
    d = VBA.DateSerial(CheckYear(VBA.Year(dValue) - 1), VBA.Month(dValue), VBA.Day(dValue))
    value = d
End Sub

Public Sub Today()
    value = VBA.Date
End Sub

Public Sub Refresh()
    If bInit Then
        Refresh_Panel VBA.Month(dValue), VBA.Year(dValue)
        ApplyFontChanges
    End If
End Sub


'###########################
Private Sub AAA_Event_Book()
End Sub
'# Events for Main Object Components
'###########################

Private Sub CBxY_Change()
    RenderLabel
    Refresh_Panel CBxM.ListIndex + 1, CBxY.ListIndex + 1904
End Sub

Private Sub CBxM_Change()
    RenderLabel
    Refresh_Panel CBxM.ListIndex + 1, CBxY.ListIndex + 1904
End Sub

Private Sub CmB_Click()
    Main.value = dValue
    Main.Event_click = True
End Sub

Private Sub CmB_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Main.Event_DblClick = True
End Sub


Private Sub CmB_KeyDown( _
    ByVal KeyCode As MSForms.ReturnInteger, _
    ByVal Shift As Integer)
    
    Dim newDate As Date

    '38 Up
    '37 Left
    '39 Right
    '40 Down
    
    newDate = dValue
    
    Select Case KeyCode
    Case 37
        If bPRightToLeft Then
            newDate = newDate + 1
        Else
            newDate = newDate - 1
        End If
    Case 39
        If bPRightToLeft Then
            newDate = newDate - 1
        Else
            newDate = newDate + 1
        End If
    Case 38
        newDate = newDate - 7
    Case 40
        newDate = newDate + 7
    Case 9
    End Select
    
    If newDate <> dValue Then
        Main.value = newDate
        KeyCode = 0
    End If
End Sub


Private Sub Class_Initialize()
    bPShowDays = True
    bPShowTitle = True
    bPShowDateSelectors = True
    dValue = VBA.Date
    lPMonth = VBA.Month(VBA.Date)
    lPYear = VBA.Year(VBA.Date)
    lPDay = VBA.Day(VBA.Date)
    lPFontSize = 8
    lPMonthLength = 1
    lPDayLength = 1
    bPYearFirst = False
    lPTitleFontColor = &HA00000
    lPGridFontColor = &HA00000
    lPDayFontColor = &H0&
    lPFirstDay = 1
    lPBackColor = &H8000000F
    lPHeaderBackColor = 10053171 '&HFFAA99
    lPUseDefaultBackColors = True
    lPSaturdayBackColor = &H80000002
    lPSundayBackColor = &HFFAA99 '&H80000002
    lPSelectedBackColor = &H80000011
    bPVisible = True
    sPHeight = -1
    sPWidth = -1
    sPTop = -1
    sPLeft = -1
    sPControlTipText = ""
    bPRightToLeft = False
    
    Set TitleFont = New MSForms.NewFont
    With TitleFont
        .Name = "Arial"
        .Size = lPFontSize + 4
        .Bold = True
    End With
    
    Set DayFont = New MSForms.NewFont
    With DayFont
        .Name = "Arial"
        .Size = lPFontSize + 2
        .Bold = True
    End With
    
    Set GridFont = New MSForms.NewFont
    With GridFont
        .Name = "Arial"
        .Size = lPFontSize
    End With

End Sub

Private Sub Class_Terminate()
    Erase mDayButtons
    Erase mLabelButtons
    Set mcMain = Nothing
    Set PTitleNewFont = Nothing
    Set PDayNewFont = Nothing
    Set PGridNewFont = Nothing
    Set CBxY = Nothing
    Set CBxM = Nothing
    Set CmB = Nothing
    Set CLb = Nothing
    Set CmBl = Nothing
End Sub

'###########################
'# Private Function
Private Sub AAA_Private_Function_Book()
End Sub

Private Function ArraY_Days(ByVal lMonth As Long, ByVal lYear As Long)
    Dim v(0 To 41) As Date, i As Long, g As Long, l As Long, p As Long, t As Date
    
    i = VBA.DateTime.Weekday( _
        VBA.DateSerial(lYear, lMonth, 1), 1 + lPFirstDay Mod 7) - 1
    
    
    If i = 0 Then i = 7
    
    g = VBA.Day(VBA.DateSerial(lYear, lMonth + 1, 0)) + i
    
    p = 1
    For l = i To 0 Step -1
        v(l) = VBA.DateSerial(lYear, lMonth, p)
        p = p - 1
    Next
    
    p = 0
    For l = i To g
        p = p + 1
        v(l) = VBA.DateSerial(lYear, lMonth, p)
    Next
    
    For l = g To 41
        v(l) = VBA.DateSerial(lYear, lMonth, p)
        p = p + 1
    Next
    
    If bPRightToLeft Then
        For l = 0 To 5
            For i = 0 To 2
                t = v(l * 7 + i)
                v(l * 7 + i) = v(l * 7 + (6 - i))
                v(l * 7 + (6 - i)) = t
            Next
        Next
    End If
    
    ArraY_Days = v
End Function

Private Sub RenderLabel()
    Dim b As Currency, b_ym As Currency, b_combo_m As Long
    
    Const b_combo_y As Long = 42
    b_combo_m = IIf(lPMonthLength = mlENShort Or lPMonthLength = mlLocalShort, 42, 66) '66
    b_ym = b_combo_y + 2 + b_combo_m
    
    If bInit Then
        b = CBxY.Parent.width
        If bPYearFirst Then
            CLb.caption = CBxY.value & " " & CBxM.value
        Else
            CLb.caption = CBxM.value & " " & CBxY.value
        End If
        CLb.width = Zero_Negative_Value(IIf(ShowDateSelectors, b - b_ym, b))
        CBxM.width = b_combo_m
        CBxY.Left = IIf(ShowTitle, CLb.width, CCur((b - b_ym) / 2)) + _
                       IIf(YearFirst, 0, b_combo_m + 2)
        CBxM.Left = IIf(ShowTitle, CLb.width, CCur((b - b_ym) / 2)) + _
                       IIf(YearFirst, b_combo_y + 2, 0)
        'CBxY.Left = IIf(ShowTitle, CLb.Width, IIf(CLb.Width, Int(CLb.Width / 2), 0)) + _
        '           IIf(YearFirst, 0, b_combo_m + 2)
        '
        'CBxM.Left = IIf(ShowTitle, CLb.Width, IIf(CLb.Width, Int(CLb.Width / 2), 0)) + _
        '           IIf(YearFirst, b_combo_y + 2, 0)
    End If
End Sub

Private Function bInit() As Boolean
    If Not CBxY Is Nothing Then bInit = True
End Function


Private Function SumMonthsToDate(dDate As Date, Optional lMonth As Long = 1) As Date
    Dim d As Date
    
    d = VBA.DateSerial( _
            VBA.Year(dDate), _
            VBA.Month(dDate) + lMonth, _
            fMin( _
                VBA.Day(dDate), _
                VBA.Day( _
                    VBA.DateSerial( _
                    VBA.Year(dDate), _
                    VBA.Month(dDate) + 1 + VBA.Abs(lMonth), _
                    0))))
                    
    If d = VBA.DateSerial(CheckYear(VBA.Year(d)), VBA.Month(d), VBA.Day(d)) Then
        SumMonthsToDate = d
    Else
        SumMonthsToDate = dDate
    End If
End Function

Private Function fMin(vFirstValue, ParamArray vValues())
    Dim i As Long
    fMin = vFirstValue
    
    If IsMissing(vValues) = False Then
    For i = 0 To UBound(vValues)
        If fMin > vValues(i) Then
            fMin = vValues(i)
        End If
    Next
    End If
End Function

Private Function fMonthName(lIndex As Long)
    Dim m(11), i As Long, v
    lIndex = lIndex Mod 4
    If Int(lIndex / 2) Then
        If lIndex Mod 2 Then
            v = Array("Jan", "Feb", "Mar", "Apr", "May", _
                "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
        Else
            v = Array("January", "February", "March", _
                "April", "May", "June", "July", "August", _
                "September", "October", "November", "December")
        End If
        fMonthName = v
    Else
        For i = 0 To 11
            m(i) = VBA.Strings.MonthName(i + 1, lIndex Mod 2)
        Next
        fMonthName = m
    End If
End Function


Private Function fWeekdayName(lIndex As Long)
    Dim m(6), i As Long, v
    lIndex = lIndex Mod 4
    If Int(lIndex / 2) Then
        If lIndex Mod 2 Then
            v = Array("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
        Else
            v = Array("Monday", "Tuesday", "Wednesday", _
                "Thursday", "Friday", "Saturday", "Sunday")
        End If
        fWeekdayName = v
    Else
        For i = 0 To 6
            m(i) = VBA.Strings.WeekdayName(i + 1, lIndex Mod 2, vbMonday)
        Next
        fWeekdayName = m
    End If
End Function


Private Function CheckYear(ByVal lYear As Long) As Long
    Select Case lYear
    Case Is < 1904
        CheckYear = 1904
    Case 1904 To 2103
        CheckYear = lYear
    Case Else
        CheckYear = 2103
    End Select
End Function

'###########################
'# Private Sub
Private Sub AAA_Private_Sub_Book()
End Sub

Public Property Let Event_DblClick(ByVal x As Boolean)
    RaiseEvent DblClick
End Property

Private Property Get Event_DblClick() As Boolean
    Event_DblClick = False
End Property


Public Property Let Event_click(ByVal x As Boolean)
    RaiseEvent Click
End Property

Private Property Get Event_click() As Boolean
    Event_click = False
End Property

Private Sub Refresh_Properities()
    With Me
        .BackColor = .BackColor
        .ControlTipText = .ControlTipText
        .DayFontColor = .DayFontColor
        .DayLength = .DayLength
        .GridFontColor = .GridFontColor
        .MonthLength = .MonthLength
        If .UseDefaultBackColors = False Then
            .SaturdayBackColor = .SaturdayBackColor
            .SundayBackColor = .SundayBackColor
            .HeaderBackColor = .HeaderBackColor
        End If
        .ShowDateSelectors = .ShowDateSelectors
        .ShowDays = .ShowDays
        .ShowTitle = .ShowTitle
        .TabIndex = .TabIndex
        .TabStop = .TabStop
        .TitleFontColor = .TitleFontColor
        .ValueIsNull = .ValueIsNull
        .YearFirst = .YearFirst
    End With
End Sub

Private Sub Refresh_Selected_Day(ByVal dValue As Date)
    Dim i As Long, c As MSForms.Label
    For i = 0 To 41
        If mDayButtons(i).value = dValue And Not bPValueIsNull Then
            On Error Resume Next
            mDayButtons(i).Obj_Cmb.SetFocus
            On Error GoTo 0
            If Not bPMACFix Then
                With mDayButtons(i).Obj_CmBl
                    .BackStyle = fmBackStyleOpaque
                    .BackColor = lPSelectedBackColor
                    .ForeColor = cDayFontColorSelected
                End With
            Else
                With mDayButtons(i).Obj_Cmb
                    .BackStyle = fmBackStyleOpaque
                    .BackColor = lPSelectedBackColor
                    .ForeColor = cDayFontColorSelected
                End With
            End If
            lPMonth = VBA.Month(dValue)
            lPYear = VBA.Year(dValue)
            lPDay = VBA.Day(dValue)
        End If
    Next

End Sub

Private Sub Refresh_Panel(ByVal lMonth As Long, ByVal lYear As Long)
    Dim v, i As Long, l As Long
    Dim iDay As Long
    
    If bInit Then
        v = ArraY_Days(lMonth, lYear)
        For i = 0 To 41
            mDayButtons(i).value = v(i)
            If Not bPMACFix Then 'MAC: no label - command button text
                '# Normal mode
                ' Text day label
                With mDayButtons(i).Obj_CmBlNum
                    If .caption <> VBA.Day(v(i)) Then
                        .caption = VBA.Day(v(i))
                    End If
                    If lMonth = VBA.Month(v(i)) Then
                        If .ForeColor <> GridFontColor Then
                            .ForeColor = GridFontColor
                        End If
                    Else
                        If .ForeColor <> cDayFontColorInactive Then
                            .ForeColor = cDayFontColorInactive
                        End If
                    End If
                End With
                ' Day background label
                With mDayButtons(i).Obj_CmBl
                    If .BackStyle = fmBackStyleOpaque Then
                        .BackStyle = fmBackStyleTransparent
                    End If
                    If UseDefaultBackColors = False Then
                        iDay = VBA.DateTime.Weekday(v(i))
                        If iDay = vbSaturday Then
                            If .BackColor <> lPSaturdayBackColor Then
                                .BackColor = lPSaturdayBackColor
                            End If
                            If .BackStyle <> fmBackStyleOpaque Then
                                .BackStyle = fmBackStyleOpaque
                            End If
                        ElseIf iDay = vbSunday Then
                            If .BackColor <> lPSundayBackColor Then
                                .BackColor = lPSundayBackColor
                            End If
                            If .BackStyle <> fmBackStyleOpaque Then
                                .BackStyle = fmBackStyleOpaque
                            End If
                        End If
                    End If
                End With
                ' Button not altered
                With mDayButtons(i).Obj_Cmb
                    If .caption <> "" Then 'After MACFix
                        .caption = ""
                    End If
                End With
            Else
                '# MAC Fix mode
                With mDayButtons(i).Obj_CmBlNum
                    If .caption <> "" Then
                        .caption = ""
                    End If
                End With
                With mDayButtons(i).Obj_CmBl
                    If .BackStyle = fmBackStyleOpaque Then
                        .BackStyle = fmBackStyleTransparent
                    End If
                End With
                With mDayButtons(i).Obj_Cmb
                    If .caption <> VBA.Day(v(i)) Then
                        .caption = VBA.Day(v(i))
                    End If
                    If lMonth = VBA.Month(v(i)) Then
                        If .ForeColor <> GridFontColor Then
                            .ForeColor = GridFontColor
                        End If
                    Else
                        If .ForeColor <> cDayFontColorInactive Then
                            .ForeColor = cDayFontColorInactive
                        End If
                    End If
                    If .BackStyle <> fmBackStyleOpaque Then 'Button visible
                        .BackStyle = fmBackStyleOpaque
                    End If
                    If UseDefaultBackColors = False Then
                        iDay = VBA.DateTime.Weekday(v(i))
                        If iDay = vbSaturday Then
                            If .BackColor <> lPSaturdayBackColor Then
                                .BackColor = lPSaturdayBackColor
                            End If
                        ElseIf iDay = vbSunday Then
                            If .BackColor <> lPSundayBackColor Then
                                .BackColor = lPSundayBackColor
                            End If
                        Else
                            If .BackColor <> BackColor Then
                                .BackColor = BackColor
                            End If
                        End If
                    Else
                        If .BackColor <> BackColor Then
                            .BackColor = BackColor
                        End If
                    End If
                End With
            End If
'            With mDayButtons(i).Obj_CmBl
'                If .BackStyle = fmBackStyleOpaque Then
'                    .BackStyle = fmBackStyleTransparent
'                End If
'                If bPMACFix Then 'MAC: no label - command button text
'                    If .Caption <> VBA.Day(v(i)) Then
'                        .Caption = VBA.Day(v(i))
'                    End If
'                    If lMonth = VBA.Month(v(i)) Then
'                        If .ForeColor <> GridFontColor Then
'                            .ForeColor = GridFontColor
'                        End If
'                    Else
'                        If .ForeColor <> cDayFontColorInactive Then
'                            .ForeColor = cDayFontColorInactive
'                        End If
'                    End If
'                Else
'                    If .Caption <> "" Then
'                        .Caption = ""
'                    End If
'                End If
'                If UseDefaultBackColors = False Then
'                    iDay = VBA.DateTime.Weekday(v(i))
'                    If iDay = vbSaturday Then
'                        If .BackColor <> lPSaturdayBackColor Then
'                            .BackColor = lPSaturdayBackColor
'                        End If
'                        If .BackStyle <> fmBackStyleOpaque Then
'                            .BackStyle = fmBackStyleOpaque
'                        End If
'                    ElseIf iDay = vbSunday Then
'                        If .BackColor <> lPSundayBackColor Then
'                            .BackColor = lPSundayBackColor
'                        End If
'                        If .BackStyle <> fmBackStyleOpaque Then
'                            .BackStyle = fmBackStyleOpaque
'                        End If
'                    End If
'                End If
'            End With
            If CheckValue(v(i)) = False Then
                mDayButtons(i).Obj_Cmb.Locked = True
            Else
                If mDayButtons(i).Obj_Cmb.Locked = True Then
                    mDayButtons(i).Obj_Cmb.Locked = False
                End If
            End If
        Next
        
        If UseDefaultBackColors = False Then
            For l = 0 To 6
                If mLabelButtons(l).Obj_CmBl.BackStyle = fmBackStyleTransparent Then _
                    mLabelButtons(l).Obj_CmBl.BackStyle = fmBackStyleOpaque
                If mLabelButtons(l).Obj_CmBl.BackColor <> lPHeaderBackColor Then _
                    mLabelButtons(l).Obj_CmBl.BackColor = lPHeaderBackColor
            Next
        Else
            For l = 0 To 6
                If mLabelButtons(l).Obj_CmBl.BackStyle = fmBackStyleOpaque Then _
                    mLabelButtons(l).Obj_CmBl.BackStyle = fmBackStyleTransparent
            Next
        End If
        
        If lMonth = VBA.Month(dValue) And lYear = VBA.Year(dValue) Then
            Refresh_Selected_Day dValue
        Else
            lPMonth = 0
            lPYear = 0
            lPDay = 0
        End If
    End If
End Sub

Private Function CheckValue(d) As Boolean
If VarType(d) = vbDate Then
    Select Case d
        Case 1462 To 74510
            CheckValue = CLng(d) = d
    End Select
End If
End Function

Private Function Zero_Negative_Value(sNumber As Single) As Single
If sNumber > 0 Then
    Zero_Negative_Value = sNumber
End If
End Function



Attribute VB_Name = "login_form"
Attribute VB_Base = "0{29B30E23-D463-4F4D-9117-DF13BD3086E4}{9A00D689-969B-482D-92A7-49DF92D632FC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'|fffd||3b1||fffd||fffd||fffd| |fffd||fffd||1b0| |16c||fffd||fffd|
Private Sub btn_login_Click()
    Dim cs_id As String
    Dim cs_pw As String
    
    cs_id = txtbox_id.value
    cs_pw = txtbox_pw.value
    login_form.Hide
    If cs_id = "" Or cs_pw = "" Then
        MsgBox "|fffd||3b1||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||f9||678||fffd||fffd||fffd| |fffd||2bd||fffd||fffd||3f4||fffd|. "
        login_form.Show
        Exit Sub
    End If
    
    If REST.process_login Then
        MsgBox "|fffd||233||fffd||fffd||3fc||fffd||fffd||fffd|!" & vbCrLf & "CoolSMS |fffd||fffd||fffd||335||fffd| " & cs_id & " |fffd||fffd| |fffd||3b1||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        Send_form.Show
        Exit Sub
    Else
        MsgBox "|fffd||3b1||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||f9||678||fffd||fffd||fffd| |fffd||2bd||fffd||fffd||3f4||fffd|."
        login_form.Show
    End If
End Sub

'|fffd||3b1||fffd||fffd||fffd| |fffd||fffd||1b0||fffd||fffd| |fffd||fffd||fffd||cf7a| |fffd||335||fffd||fffd||fffd| |13f||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub btn_login_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    btn_login.font.Bold = True
    btn_login.MousePointer = MouseCursor(MOUSE_CLICK)
End Sub

'CoolSMS |fffd||3b0||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub Frame1_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    Label3.Visible = False
    Label4.font.Underline = False
    Label5.font.Underline = False
    btn_login.font.Bold = False
End Sub

'CoolSMS |fffd||3b0||fffd| |16c||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||335||fffd|
Private Sub img_logo_Click()
    If MsgBox("|fffd||3f87d||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||1ae||fffd||fffd| |fffd||6e6e||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo, "|228||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||6e6e|") = vbYes Then
        ActiveWorkbook.FollowHyperlink "http://www.coolsms.co.kr"
    End If
End Sub

'CoolSMS |fffd||3b0||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||cf7a| |13f||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub img_logo_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    Label3.Visible = True
    img_logo.MousePointer = MouseCursor(MOUSE_CLICK)
End Sub

'|238||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||33a||fffd| |16c||fffd||fffd||fffd||fffd|
Private Sub Label4_Click()
    If MsgBox("|238||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||335||fffd||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo, "Confirm") = vbYes Then
        ActiveWorkbook.FollowHyperlink "https://www.coolsms.co.kr/index.php?l=ko&mid=frontpage&act=dispMemberSignUpForm"
    End If
End Sub

'|238||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||33a||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||cf7a| |13f||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub Label4_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    Label4.font.Underline = True
    Label4.MousePointer = MouseCursor(MOUSE_CLICK)
End Sub

'|fffd||fffd||fffd||335||fffd|/|fffd||fffd||439||fffd||223| |e3||fffd||fffd| |fffd||fffd||fffd||33a||fffd| |16c||fffd||fffd||fffd||fffd|
Private Sub Label5_Click()
    If MsgBox("|fffd||fffd||fffd||335||fffd|/|fffd||fffd||439||fffd||223| |e3||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||335||fffd||fffd||3fd||f0||6bd||fffd||fffd||3f1||fffd|?", vbYesNo, "Confirm") = vbYes Then
        ActiveWorkbook.FollowHyperlink "http://www.coolsms.co.kr/find_password"
    End If
End Sub

'|fffd||fffd||fffd||335||fffd|/|fffd||fffd||439||fffd||223| |e3||fffd||fffd| |fffd||fffd||fffd||33a||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||cf7a| |13f||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub Label5_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    Label5.font.Underline = True
    Label5.MousePointer = MouseCursor(MOUSE_CLICK)
End Sub

'|fffd||fffd||439||fffd||223| txtbox |fffd||fffd||fffd||fffd| Enter |170| |121||fffd||fffd| |fffd||3b1||fffd||fffd||fffd| |fffd||fffd||1b0| |16c||fffd||fffd|
Private Sub txtbox_pw_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        btn_login_Click
    End If
End Sub

'UserForm activate - debug.print |fffd||6f5||fffd||fffd||fffd||fffd||fffd|
Private Sub UserForm_Activate()
    Call CsInitialize
    If RegKeyRead(REST.cs_isApiKeyApiSecretSaved) = "True" Then
        Load Send_form
        Unload login_form
        Send_form.Show
    Else
        Load login_form
    End If
End Sub
Attribute VB_Name = "mSend"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private cs_path As String
Private cs_message As message


Private Sub Class_Initialize()
    cs_path = "send"
End Sub

Public Property Get get_path() As String
    get_path = cs_path
End Property

Public Property Get get_message() As message
    Set get_message = cs_message
End Property

Public Sub set_message(m As message)
    'Set cs_message = New Message
    Set cs_message = m
End Sub

Attribute VB_Name = "mSent"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private cs_count As String
Private cs_page As String
Private cs_rcpt As String
Private cs_start As String
Private cs_end As String
Private cs_status As String
Private cs_resultCode As String
Private cs_mid As String
Private cs_gid As String

Public Property Get get_count() As String
get_count = cs_count
End Property

Public Property Let set_count(value As String)
cs_count = value
End Property

Public Property Get get_page() As String
get_page = cs_page
End Property

Public Property Let set_page(value As String)
cs_page = value
End Property

Public Property Get get_rcpt() As String
get_rcpt = cs_rcpt
End Property

Public Property Let set_rcpt(value As String)
cs_rcpt = value
End Property

Public Property Get get_start() As String
get_start = cs_start
End Property

Public Property Let set_start(value As String)
cs_start = value
End Property

Public Property Get get_end() As String
get_end = cs_end
End Property

Public Property Let set_end(value As String)
cs_end = value
End Property

Public Property Get get_status() As String
get_status = cs_status
End Property

Public Property Let set_status(value As String)
cs_status = value
End Property

Public Property Get get_resultCode() As String
get_resultCode = cs_resultCode
End Property

Public Property Let set_resultCode(value As String)
cs_resultCode = value
End Property

Public Property Get get_mid() As String
get_mid = cs_mid
End Property

Public Property Let set_mid(value As String)
cs_mid = value
End Property

Public Property Get get_gid() As String
get_gid = cs_gid
End Property

Public Property Let set_gid(value As String)
cs_gid = value
End Property



Attribute VB_Name = "senderID"
Option Explicit
Private MULTIPART_BOUNDARY
Private httpResult As Boolean
Private target_list As Object

'
' get sender id |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
Public Function get_sender_id(target As Object) As String
    Dim resp As Response
    Set target_list = target
    Set resp = httpRequest("list", "get")
    get_sender_id = resp.cs_phone_number
End Function

'
' register sender id |fffd||7fd||179||fffd||223| |fffd||7f0||fffd|
'
Public Function register_sender_id(target As Object) As String
    Dim resp As Response
    httpResult = False
    Set target_list = target
    Set resp = httpRequest("register", "post")
    register_sender_id = resp.cs_ars_number
    
    If httpResult Then
        showTimer.StartTimer
    End If
End Function

'
' verify sender id |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd| |22e||fffd||fffd|
'
Public Function verify_sender_id() As String
    Dim resp As Response
    httpResult = False
    Set resp = httpRequest("verify", "post")
    If resp Is Nothing Then
        Exit Function
    End If
    If resp.cs_httpstatus = "200" And resp.cs_httpstatus_text = "OK" Then
        showTimer.Stop_Timer
        MsgBox "|fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3ff||fffd||fffd||fffd||fffd||3f4||fffd|."
        Unload senderid_form
        get_sender_id target_list
    End If
verify_sender_id = resp.cs_httpstatus
Set resp = Nothing
End Function

'
' http request
'
Private Function httpRequest(resource As String, method As String) As Response
    Dim myrequest As Object
    Dim url As String
    Dim field As String
    Dim auth As Authentication
    Dim resp As Response
    Set myrequest = CreateObject("WinHttp.WinHttpRequest.5.1")
    Set auth = New Authentication
    Set resp = New Response
    
    method = UCase(method)
    url = "http://rest1.coolsms.co.kr/senderid/1.1/" & resource
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||2bf||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    field = make_auth_field(auth, method)
    
    ' |fffd||fffd| resource |fffd||fffd| |fffd||fffd||fffd||fffd| post/get field |fffd||fffd||fffd||fffd|
    Select Case resource
        Case "register":
            field = set_register_field(field)
        Case "verify":
            field = set_verify_field(field)
    End Select
    
    ' set_register_field |fffd||1f4||fffd| set_verify_field |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| exit
    If field = "-1" Then
        Exit Function
    End If
    
    ' GET/POST |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If UCase(method) = "GET" Then
        myrequest.Open method, url & "&" & field
        myrequest.send
    Else
        'Debug.Print "Method : " & method & vbCrLf & "Url : " & url & vbCrLf
        myrequest.Open method, url, False
        myrequest.SetRequestHeader "User-Agent", "REST API/Senderid/1.1/ - from Excel"
        myrequest.SetRequestHeader "Content-Type", "multipart/form-data; Charset=euckr; boundary=" & MULTIPART_BOUNDARY
        myrequest.SetRequestHeader "Content-Length", Len(field)
        myrequest.send "" + field
    End If
    
    set_response myrequest, resp
    Set httpRequest = resp
    
    Set resp = Nothing
    Set auth = Nothing
End Function

'
' make auth field |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||2bf||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||47e||fffd||fffd| method |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'
Private Function make_auth_field(auth As Authentication, method As String) As String
    Dim field As String
    Dim data_boundary As String
    
    If UCase(method) = "GET" Then
        field = "api_key=" & auth.cs_api_key _
            & "&salt=" & auth.cs_salt _
            & "&timestamp=" & auth.cs_timestamp _
            & "&signature=" & auth.cs_signature
        If Not auth.cs_encoding = "" Then
            field = field & "&encoding=" & auth.cs_encoding
        End If
        If Not auth.cs_coolsms_user = "" Then
            field = field & "&coolsms_user=" & auth.cs_coolsms_user
        End If
    Else
        MULTIPART_BOUNDARY = "--" & auth.cs_salt
        data_boundary = "--" & MULTIPART_BOUNDARY

        field = vbCrLf & data_boundary & vbCrLf
        field = field & "Content-Disposition: form-data; name=""api_key""" & vbCrLf & vbCrLf
        field = field & auth.cs_api_key & vbCrLf

        field = field & data_boundary & vbCrLf
        field = field & "Content-Disposition: form-data; name=""salt""" & vbCrLf & vbCrLf
        field = field & auth.cs_salt & vbCrLf

        field = field & data_boundary & vbCrLf
        field = field & "Content-Disposition: form-data; name=""timestamp""" & vbCrLf & vbCrLf
        field = field & auth.cs_timestamp & vbCrLf

        field = field & data_boundary & vbCrLf
        field = field & "Content-Disposition: form-data; name=""signature""" & vbCrLf & vbCrLf
        field = field & auth.cs_signature & vbCrLf

        If Not auth.cs_encoding = "" Then
            field = field & data_boundary & vbCrLf
            field = field & "Content-Disposition: form-data; name=""encoding""" & vbCrLf & vbCrLf
            field = field & auth.cs_encoding & vbCrLf
        End If

        If Not auth.cs_coolsms_user = "" Then
            field = field & data_boundary & vbCrLf
            field = field & "Content-Disposition: form-data; name=""coolsms_user""" & vbCrLf & vbCrLf
            field = field & auth.cs_coolsms_user & vbCrLf
        End If
        'field = field & data_boundary & "--" & vbCrLf
    End If
    
make_auth_field = field
End Function

'
' set register field |fffd||7fd||179||fffd||223| |fffd||fffd||3ff||fffd| |fffd||2bf||fffd||fffd||fffd| http field |fffd||fffd||fffd||fffd|
'
Private Function set_register_field(field As String) As String
    Dim phone_number As String
    Dim data_boundary As String
    phone_number = senderid_form.phone_number_txtbox.text
    If phone_number = "" Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||22d||fffd||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
        set_register_field = "-1"
        Exit Function
    End If
    'OPEN BOUNDARY
    data_boundary = "--" & MULTIPART_BOUNDARY
    'PHONE FIELD
    field = field & vbCrLf & data_boundary & vbCrLf
    field = field & "Content-Disposition: form-data; name=""phone""" & vbCrLf & vbCrLf
    field = field & phone_number & vbCrLf
    'CLOSE BOUNDARY
    field = field & data_boundary & "--"
    
set_register_field = field
End Function

'
' set verify field |fffd||7fd||179||fffd||223| |fffd||fffd||fffd||fffd||22e||fffd||3bf||fffd| |fffd||2bf||fffd||fffd||fffd| http field |fffd||fffd||fffd||fffd|
'
Private Function set_verify_field(field As String) As String
    Dim handle_key As String
    Dim data_boundary As String
    handle_key = senderid_form.handle_key_txtbox.text
    If handle_key = "" Then
        MsgBox "handle_key|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||3f4||fffd|.", vbCritical
        set_verify_field = "-1"
        Exit Function
    End If
    'OPEN BOUNDARY
    data_boundary = "--" & MULTIPART_BOUNDARY
    'HANDLE_KEY FIELD
    field = field & vbCrLf & data_boundary & vbCrLf
    field = field & "Content-Disposition: form-data; name=""handle_key""" & vbCrLf & vbCrLf
    field = field & handle_key & vbCrLf
    'CLOSE BOUNDARY
    field = field & data_boundary & "--"
    
set_verify_field = field
End Function

'
' set response HTTP |fffd||fffd||fffd| |fffd||13f||fffd| |fffd||470||73f||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||13d||fffd|
'
Private Function set_response(ByVal HR As WinHttpRequest, ByVal resp As Response)
    Dim result As Object, data_dict As Object, data_result As Object
    Dim Row As Variant, key As Variant, K As Variant
    Dim isListCleared As Boolean
    Set result = RestHelpers.ParseJSON(HR.ResponseText)
    
    'Debug.Print (HR.ResponseText)
    
On Error GoTo errHandle:
    resp.cs_httpstatus = HR.Status
    resp.cs_httpstatus_text = HR.StatusText
    isListCleared = False
        
        For Each Row In result
            If IsObject(Row) Then
                'Set data_result = result(Row)
                With target_list
                    If Not isListCleared Then
                        .Clear
                        isListCleared = True
                    End If
                    
                    For Each key In Row
                        Select Case key
                            Case "phone_number":
                                .AddItem Row(key)
                            
                            Case "flag_default":
                                If Row(key) = "Y" Then .text = Row("phone_number")
                        End Select
                    Next
                End With
                httpResult = True
            Else
                Select Case Row
                     Case "handle_key":
                        senderid_form.handle_key_txtbox.text = result(Row)
                        httpResult = True
                     Case "ars_number":
                        senderid_form.ars_number_txtbox.text = FORMAT_NUMBERS(result(Row))
                        httpResult = True
                     Case "phone_number":
                End Select
            End If
        Next
    
errHandle:
    If Err.number <> 0 Then
        Debug.Print "Error : senderID/set_response -" & Err.Description & vbCrLf & Err.HelpContext
        httpResult = False
    End If
    
End Function

'
' |fffd||fffd||22d||fffd||fffd||223||fffd||fffd| 010xxxxoooo -> 010-xxxx-oooo |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'
Public Function FORMAT_NUMBERS(phone As String)
    FORMAT_NUMBERS = Left(phone, 3) & "-" & Right(Left(phone, 7), 4) & "-" & Right(phone, 4)
End Function
Attribute VB_Name = "senderid_form"
Attribute VB_Base = "0{774388FA-020C-4EEE-9F83-849704FE36CD}{521087AE-DC8F-4A7D-885D-4325B92AA6A9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton2_Click()
    Dim http_status As String
    If Not senderID.verify_sender_id = "200" Then
        MsgBox "|fffd||fffd||fffd||fffd| |fffd||537||fffd||fffd||3fd||fffd| |fffd||7fd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||2be||4bd||fffd||fffd||3f4||fffd|. " & vbCrLf _
        & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||4f5||1f8||fffd| |fffd||3f87d||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||3fd||f1||fffd| |fffd||676||fffd||fffd||3f4||fffd|. "
    End If
End Sub

Private Sub senderid_number_add_btn_Click()
    senderID.register_sender_id Send_form.target_list
End Sub

Private Sub UserForm_Deactivate()
    Debug.Print "deactivate"
End Sub

Private Sub UserForm_Terminate()
    Debug.Print "terminate"
    showTimer.Stop_Timer
End Sub
Attribute VB_Name = "senderid_help_form"
Attribute VB_Base = "0{586B7091-D474-469F-806B-CECDA8193A39}{52B07FBF-1B1E-4691-BA68-57E024E57E32}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub senderid_help_next_btn_Click()
    Unload senderid_help_form
    senderid_form.Show
End Sub
Attribute VB_Name = "showTimer"
Dim TimerActive As Boolean
Dim CurrentCount As Long

Sub StartTimer()
    CurrentCount = 180
    Start_Timer
End Sub

Private Sub Start_Timer()
    TimerActive = True
    Application.OnTime Now() + TimeValue("00:00:01"), "show_timer"
End Sub
 
Public Sub Stop_Timer()
    TimerActive = False
End Sub

Private Sub show_timer()
    If TimerActive And CurrentCount > 0 Then
        '3|fffd||2bf||fffd| |fffd||479||fffd||fffd||fffd| |fffd||7fd||179||fffd||223||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||1b4||fffd||fffd||fffd| |22e||fffd||fffd|
        If CurrentCount Mod 3 = 0 Then
            Debug.Print "Mod 3 is 0!"
            senderID.verify_sender_id
        End If
        
'        '5|fffd||2bf||fffd| |fffd||479||fffd||fffd||fffd| |fffd||277||fffd||fffd||fffd| |fffd||fffd||223||22e||fffd||fffd|
'        If CurrentCount Mod 5 = 0 Then
'            Debug.Print "Mod 5 is 0!"
'            senderID.get_hint
'        End If
        
        senderid_form.timer_label.caption = TimeString(CurrentCount) & " |fffd||f0||fffd| |fffd||23f||fffd| |fffd||fffd||fffd||fffd| ARS |fffd||fffd||223||fffd||fffd| |fffd||fffd||22d||fffd||fffd| |fffd||27e||fffd||fffd||5bc||fffd||fffd||fffd|."
        
        'Debug.Print TimeString(CurrentCount)
        
        Application.OnTime Now() + TimeValue("00:00:01"), "show_timer"
        CurrentCount = CurrentCount - 1
        
    ElseIf CurrentCount < 1 Then
        MsgBox "|fffd||f0||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||1fe||fffd||fffd||fffd||fffd||3f4||fffd|. |fffd||67d||fffd| |fffd||f5||fffd||fffd||3fc||fffd||fffd||fffd|.", vbInformation
        Stop_Timer
        Unload senderid_form
    Else
        Stop_Timer
        Unload senderid_form
    End If
End Sub

Private Function RetTime(IntTime As Long) As Date
    RetTime = TimeSerial(Int(IntTime / 10000), Int((IntTime Mod 10000) / 100), (IntTime Mod 100))
End Function

Private Function TimeString(Seconds As Long, Optional Verbose _
As Boolean = False) As String
    
    'if verbose = false, returns
    'something like
    '02:22.08
    'if true, returns
    '2 hours, 22 minutes, and 8 seconds
    
    Dim lHrs As Long
    Dim lMinutes As Long
    Dim lSeconds As Long
    
    lSeconds = Seconds
    
    lHrs = Int(lSeconds / 3600)
    lMinutes = (Int(lSeconds / 60)) - (lHrs * 60)
    lSeconds = Int(lSeconds Mod 60)
    
    Dim sAns As String
    
    
    If lSeconds = 60 Then
        lMinutes = lMinutes + 1
        lSeconds = 0
    End If
    
    If lMinutes = 60 Then
        lMinutes = 0
        lHrs = lHrs + 1
    End If
    
    'sAns = Format(CStr(lHrs), "#####0") & ":" & _
    '  Format(CStr(lMinutes), "00") & ":" & _
    '  Format(CStr(lSeconds), "00")
    
    sAns = Format(CStr(lMinutes), "00") & ":" & _
      Format(CStr(lSeconds), "00")
    
    
    If Verbose Then sAns = TimeStringtoEnglish(sAns)
    TimeString = sAns

End Function

Private Function TimeStringtoEnglish(sTimeString As String) _
As String

    Dim sAns As String
    Dim sHour, sMin As String, sSec As String
    Dim iTemp As Integer, sTemp As String
    Dim iPos As Integer
    iPos = InStr(sTimeString, ":") - 1
    
    sHour = Left$(sTimeString, iPos)
    If CLng(sHour) <> 0 Then
        sAns = CLng(sHour) & " hour"
        If CLng(sHour) > 1 Then sAns = sAns & "s"
        sAns = sAns & ", "
    End If
    
    sMin = Mid$(sTimeString, iPos + 2, 2)
    
    iTemp = sMin
    
    If sMin = "00" Then
       sAns = IIf(Len(sAns), sAns & "0 minutes, and ", "")
    Else
       sTemp = IIf(iTemp = 1, " minute", " minutes")
       sTemp = IIf(Len(sAns), sTemp & ", and ", sTemp & " and ")
       sAns = sAns & Format$(iTemp, "##") & sTemp
    End If
    
    iTemp = Val(Right$(sTimeString, 2))
    sSec = Format$(iTemp, "#0")
    sAns = sAns & sSec & " second"
    If iTemp <> 1 Then sAns = sAns & "s"
    
    TimeStringtoEnglish = sAns

End Function

Attribute VB_Name = "|fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Const sProgramName As String = "|fffd||3f87d||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Const CBR_TOOLBAR_NAME As String = "|fffd||fffd||fffd||6b8||7bd||fffd||fffd||fffd|"

Public cbToolbar As CommandBar
Public cbbToolbar_Login As CommandBarButton

' |fffd||5b5||fffd||fffd||fffd| |fffd||fffd||121|
Private Sub Workbook_AddinInstall()
    Set cbToolbar = CreateToolBar(CBR_TOOLBAR_NAME)
    Set cbbToolbar_Login = CreateToolBarButton("Run", "|fffd||3f87d||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||3f87d||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "Run", cbToolbar, False)
    LoadToolbarPosition CBR_TOOLBAR_NAME, sProgramName
End Sub

' |fffd||5b5||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub Workbook_AddinUninstall()
    RemoveToolBarButton CBR_TOOLBAR_NAME, "|fffd||3f87d||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub

'|fffd||fffd||fffd||cf7a| |fffd||fffd||fffd||fffd||fffd||fffd| |16c||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||3b1||5f7||fffd| |fffd||fffd||fffd||fffd|
Private Sub CustomRightClick()
    Dim cmdBarCell
    Dim popup
    Dim oPic As stdole.IPictureDisp
    Dim oMask As stdole.IPictureDisp
  
    Set cmdBarCell = Application.CommandBars("cell")
    cmdBarCell.Reset

    Set popup = cmdBarCell.Controls.Add(before:=1, Type:=msoControlButton)
    With popup
        .Visible = True
        .caption = "|fffd||3f87d||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .OnAction = "Run"
        .BeginGroup = True
        .FaceId = 2106
    End With
End Sub

Private Sub RemoveRightClick()
    Dim cmdBarCell
    Set cmdBarCell = Application.CommandBars("cell")
    cmdBarCell.Reset
End Sub
' |fffd||fffd||169||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub Workbook_Open()
    Call Workbook_AddinInstall
    Call CustomRightClick
End Sub

' |fffd||fffd||169||fffd||fffd| |fffd||771||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Call Workbook_AddinUninstall
    Call RemoveRightClick
End Sub


' InQuest injected base64 decoded content
' y+kz
' ~`ZrD

INQUEST-PP=macro
