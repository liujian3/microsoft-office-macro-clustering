Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "mDescriptions"
Option Explicit

Function SheetNames()

Dim NameA() As String, NumSheets As Long, i As Long
On Error Resume Next
NumSheets = Application.Sheets.Count
ReDim NameA(1 To NumSheets - 8, 1 To 2)
For i = 9 To NumSheets
    NameA(i - 8, 1) = i - 8
    NameA(i - 8, 2) = Application.Sheets(i).Name
Next i
SheetNames = NameA
End Function
Attribute VB_Name = "mDocUDF"
Option Explicit

Sub DescribeFunction()
Dim FuncData As Variant
Dim funcname As String
Dim FuncDesc As String
Dim Category As String
Dim ArgDesc(1 To 3) As String

    FuncData = Application.Selection.Value2
    funcname = FuncData(1, 1)    '"EXTRACTELEMENT"
    FuncDesc = FuncData(1, 2)    '"Returns the nth element of a string that uses a separator character"
    Category = 7    'Text category
    ArgDesc(1) = "String that contains the elements"
    ArgDesc(2) = "Element number to return"
    ArgDesc(3) = "Single-character element separator"

    Application.MacroOptions _
            Macro:=funcname, _
            Description:=FuncDesc, _
            Category:=Category, _
            ArgumentDescriptions:=ArgDesc

End Sub

Sub FuncDescriptions()
Dim FunctionA As Variant, NumRows As Long, nl As Long
Dim funcname As String, ErrMess As String
Dim Descript As String, ArgDesc() As String
Dim Cat As Variant
Dim i As Long, j As Long, func As Long, F_1 As Long, F_last As Long, StartEndRows As Variant
    StartEndRows = Range("StartEndRows").Value2
    F_1 = StartEndRows(1, 1)
    F_last = StartEndRows(1, 2)
   
    For func = F_1 To F_last
        nl = 0
        Range("Findx").Value = func
        Application.Calculate
        FunctionA = Range("functionlist").Value
        NumRows = FunctionA(1, 3) 'UBound(FunctionA)
        ReDim ArgDesc(1 To NumRows - 1)
        On Error GoTo errmsg: 'Resume Next
        With Application
            i = 1
            Do While i <= NumRows
    
                If nl = 0 Then
                    funcname = FunctionA(i, 1)
                    Cat = FunctionA(i, 2)
                    Descript = FunctionA(i, 4)
                Else
                    ArgDesc(i - 1) = FunctionA(i, 4)
                End If
                If i < NumRows Then nl = FunctionA(i + 1, 3)
                If nl = 0 Or i = NumRows Then
                    .MacroOptions Macro:=funcname, Description:=Descript, Category:=Cat, HelpFile:="c:\Users\Doug\Documents\SPREAD\ExcelPython\Alglib Spline Functions.chm", ArgumentDescriptions:=ArgDesc
                End If
                i = i + 1
            Loop
        End With
    Next func
    Exit Sub
errmsg:
ErrMess = Err.Description
Range("findx").Value = func
End Sub

Function xl_GetDoc(funcname As String)
Dim RtnTxt As Variant, NumLines As Long, RtnA() As String, i As Long
On Error GoTo rtnerr:
RtnTxt = getdoc(funcname)
NumLines = UBound(RtnTxt, 2) + 1
ReDim RtnA(1 To NumLines, 1 To 1)
For i = 1 To NumLines
    RtnA(i, 1) = Trim(RtnTxt(0, i - 1))
Next i
xl_GetDoc = RtnA
Exit Function
rtnerr:
xl_GetDoc = Err.Description
End Function
Attribute VB_Name = "mXLPYinv"
Option Explicit

Function xl_CallNLP(func As String, ParamArray DRanges() As Variant)
Dim NF As Long, RngA() As Variant, Rng As Variant, i As Long, STime As Double, Res As Variant
    STime = Timer
    NF = UBound(DRanges) + 1
    ReDim RngA(1 To NF)
    i = 1
    For Each Rng In DRanges
        If TypeName(Rng) = "Range" Then
            'AddrA(i, 1) = Rng.Address
            'AddrA(i, 2) = Rng.Worksheet.Index - 1
            RngA(i) = Rng.Value2
        Else
            'AddrA(i, 1) = Rng
           ' AddrA(i, 2) = Application.Caller.Worksheet.Index - 1
        End If
        i = i + 1
    Next Rng
    'Rng = Array(DRanges)
    Res = CallNLP(func, RngA) 'AddrA)
    ' Res(0, 0) = Timer - STime
    xl_CallNLP = Res
End Function

Function xl_CallFuncD(func As String, Optional modname As String = "", Optional args As Variant, Optional out As Long = -1, Optional ConvTup As Boolean) As Variant
Dim result As Variant, Dict As Variant, STime As Double
Const FirstOpt As Long = 1

    On Error GoTo rtnerr
    If IsMissing(args) = False Then
        If TypeName(args) = "Range" Then args = args.Value2
        
        Dict = GetArgDict(args, 1)
    Else
        Dict = ""
    End If
    
        result = CallFuncD(func, modname, Dict, out, ConvTup)

        xl_CallFuncD = result
        Exit Function

rtnerr:
    xl_CallFuncD = Err.Description
    
    
      End Function


Function GetArgDict(args As Variant, FirstArg As Long)
Dim NumA As Long, i As Long, j As Long, k As Long, NumDA As Long, DictArgA As Variant, DictArg As Boolean, ArgA As Variant, ndim As Long
Dim ARows As Long, ACols As Long, TempA As Variant, NumCols As Long

NumA = UBound(args)
NumCols = UBound(args, 2)
For i = FirstArg To NumA
    If IsArray(args(i, 2)) Then
        NumDA = NumDA + 1
    ElseIf (args(i, 2)) <> vbNullString Then
        NumDA = NumDA + 1
    End If
Next i

If NumDA > 0 Then
ReDim DictArgA(1 To 2, 1 To NumDA)
    DictArg = False
    For i = FirstArg To NumA
        If IsArray(args(i, 2)) Then
            DictArg = True
        ElseIf args(i, 2) <> vbNullString Then
            DictArg = True
        End If
        If DictArg Then
            j = j + 1
            DictArgA(1, j) = args(i, 1)
            DictArgA(2, j) = args(i, 2)
            If NumCols > 2 Then
                ndim = args(i, 3)
                If ndim > 0 Then
                    If TypeName(args(i, 2)) = "Range" Then
                        ArgA = args(i, 2).Value2
                    ElseIf TypeName(args(i, 2)) = "String" Then
                        ArgA = Range(args(i, 2)).Value2
                        If ndim = 1 Then
                            ARows = UBound(ArgA)
                            ACols = UBound(ArgA, 2)
                            If ACols > ARows Then
                                ReDim TempA(1 To ACols)
                                For k = 1 To ACols
                                    TempA(k) = ArgA(1, k)
                                Next k
                            Else
                                ReDim TempA(1 To ARows)
                                For k = 1 To ARows
                                    TempA(k) = ArgA(k, 1)
                                Next k
                            End If
                            ArgA = TempA
                        End If
                    Else
                        ArgA = args(i, 2)
                    End If
                    
                    DictArgA(2, j) = ArgA
                End If
                DictArg = False
            End If
        End If
    Next i
    GetArgDict = DictArgA
Else
    GetArgDict = ""
End If
End Function

Function RngAddress(DRange As Range, Optional Sheetname As Boolean = False) As String
Dim Daddress As String
    
    Daddress = DRange.Worksheet.Name
    If Sheetname = False Then
        If Daddress = Application.Caller.Worksheet.Name Then Daddress = ""
    End If
    If Daddress <> "" Then Daddress = Daddress & "!"
    Daddress = Daddress & DRange.AddressLocal
    RngAddress = Replace(Daddress, "$", "")
End Function


'Const modname1 As String = "xllinalgfuncs"
'Const modname2 As String = "xlsparsefuncs"
'Private pyPath1 As String
'
'Public Function Path1() As String
'    If pyPath1 = vbNullString Then pyPath1 = ThisWorkbook.Path
'    Path1 = pyPath1
'End Function
'
'Function xl_Run1A(funcname As String, VA_1 As Range, Optional Modname As String = modname1) As Variant
'Dim methods As Variant, result As Variant, VA_1py As Variant, NumpyArray As Variant, Result_List As Variant
'    On Error GoTo RtnErr
'
'    Set NumpyArray = PyGet(PyModule("numpy"), "array")
'    Set VA_1py = PyCall(NumpyArray, , PyTuple(VA_1.Value2))
'
'    Set methods = PyModule(Modname, AddPath:=Path1)
'    Set result = PyCall(methods, funcname, PyTuple(VA_1py))
'    Set Result_List = PyCall(result, "tolist")
'    xl_Run1A = PyVar(Result_List, 2)
'    Exit Function
'RtnErr:
'    xl_Run1A = Err.Description
'
'End Function
'
'Function xl_Run1s(funcname As String, str1 As String, Optional Modname As String = modname1) As Variant
'Dim methods As Variant, result As Variant
'    On Error GoTo RtnErr
'    Set methods = PyModule(Modname, AddPath:=Path1)
'    Set result = PyCall(methods, funcname, PyTuple(str1))
'    xl_Run1s = PyVar(result, 2)
'    Exit Function
'RtnErr:
'    xl_Run1s = Err.Description
'
'End Function
'
'
'Function xl_Run2L(funcname As String, VA_1 As Range, VA_2 As Range, Optional Modname As String = modname1, Optional RtnDims As Long = 2) As Variant
'Dim methods As Variant, result As Variant, VA_1py As Variant, VA_2py As Variant, Result_List As Variant
'    On Error GoTo RtnErr
'
'    VA_1py = PyVar(VA_1.Value2, 2)
'    VA_2py = PyVar(VA_2.Value2, 2)
'
'    Set methods = PyModule(Modname, AddPath:=Path1)
'    Set result = PyCall(methods, funcname, PyTuple(VA_1py, VA_2py))
'    Set Result_List = PyCall(result, "tolist")
'    xl_Run2L = PyVar(Result_List, RtnDims)
'    Exit Function
'RtnErr:
'    xl_Run2L = Err.Description
'
'End Function
'Function xl_Run2A(funcname As String, VA_1 As Range, VA_2 As Range, Optional Modname As String = modname1, Optional RtnDims As Long = 2) As Variant
'Dim methods As Variant, result As Variant, VA_1py As Variant, VA_2py As Variant, NumpyArray As Variant, Result_List As Variant
'    On Error GoTo RtnErr
'
'    Set NumpyArray = PyGet(PyModule("numpy"), "array")
'    Set VA_1py = PyCall(NumpyArray, , PyTuple(VA_1.Value2))
'    Set VA_2py = PyCall(NumpyArray, , PyTuple(VA_2.Value2))
'
'
'    Set methods = PyModule(Modname, AddPath:=Path1)
'    Set result = PyCall(methods, funcname, PyTuple(VA_1py, VA_2py))
'    Set Result_List = PyCall(result, "tolist")
'    xl_Run2A = PyVar(Result_List, RtnDims)
'    Exit Function
'RtnErr:
'    xl_Run2A = Err.Description
'
'End Function
'
'
'Function xl_Run2_2(funcname As String, VA_1 As Variant, VA_2 As Variant, Float1 As Double, Int1 As Long, Optional Modname As String = modname1, Optional RtnDims As Long = 2) As Variant
'Dim methods As Variant, result As Variant, Result_List As Variant
'    On Error GoTo RtnErr
'    If TypeName(VA_1) = "Range" Then
'        VA_1 = PyVar(VA_1.Value2, 2)
'        VA_2 = PyVar(VA_2.Value2, 2)
'    Else
'        VA_1 = PyVar(VA_1, 2)
'        VA_2 = PyVar(VA_2, 2)
'    End If
'    Set methods = PyModule(Modname, AddPath:=Path1)
'    Set result = PyCall(methods, funcname, PyTuple(VA_1, VA_2, Float1, Int1))
'    Set Result_List = PyCall(result, "tolist")
'    xl_Run2_2 = PyVar(Result_List, RtnDims)
'    Exit Function
'RtnErr:
'    xl_Run2_2 = Err.Description
'
'End Function
'
'
'Function xl_MInv(InvRange As Range) As Variant
'    xl_MInv = xl_Run1A("xl_inv", InvRange)
'End Function
'
'Function xl_MTrans(TransRange As Range) As Variant
'    xl_MTrans = xl_Run1A("xl_trans", TransRange)
'End Function
'
'Function xl_MMult(MultRange1 As Range, MultRange2 As Range) As Variant
'    xl_MMult = xl_Run2A("xl_mmult", MultRange1, MultRange2)
'End Function
'
'Function xl_EigenV(EigRange As Range) As Variant
'    xl_EigenV = xl_Run1A("xl_eigenv", EigRange)
'End Function
'
'Function xl_EigenVect(EigRange As Range) As Variant
'    xl_EigenVect = xl_Run1A("xl_eigenvect", EigRange)
'End Function
'
'Function xl_Solve(SMatrix As Range, SVect As Range, Optional SolveType As Long = 1) As Variant
'Dim funcname As String
'    If SolveType > 0 And SolveType < 5 Then
'        funcname = "xl_solve" & SolveType
'    Else
'        xl_Solve = "Invalid SolveType"
'        Exit Function
'    End If
'    xl_Solve = xl_Run2L(funcname, SMatrix, SVect)
'End Function
'
'
'Function xl_SpSolveCOO(SMatrix As Range, SVect As Range) As Variant
'Dim Rtn As Variant
'    Rtn = xl_Run2A("xl_spsolvecooL", SMatrix, SVect, modname2, 1)
'    If TypeName(Rtn) = "String" Then
'        xl_SpSolveCOO = Rtn
'    Else
'        xl_SpSolveCOO = WorksheetFunction.transpose(Rtn)
'    End If
'End Function
'
'
'Function xl_SpSolveLU(SMatrix As Range, SVect As Range) As Variant
'Dim Rtn As Variant
'    Rtn = xl_Run2L("xl_LUSolve1", SMatrix, SVect, modname2, 1)
'
'    If TypeName(Rtn) = "String" Then
'        xl_SpSolveLU = Rtn
'    Else
'        xl_SpSolveLU = WorksheetFunction.transpose(Rtn)
'    End If
'End Function
'
'Function xl_SpSolveit(SMatrix As Variant, SVect As Variant, Optional tol As Double = 0.000000000001, Optional its As Long = 5000) As Variant
'Dim Rtn As Variant
'    Rtn = xl_Run2_2("xl_ItSolve1", SMatrix, SVect, tol, its, modname2, 1)
'
'    If TypeName(Rtn) = "String" Then
'        xl_SpSolveit = Rtn
'    Else
'        xl_SpSolveit = WorksheetFunction.transpose(Rtn)
'    End If
'End Function
'
Attribute VB_Name = "xlwings_udfs"
'Autogenerated code by xlwings - changes will be lost with next import!
Function ALcallfunc1(c, x, param)
Attribute ALcallfunc1.VB_Description = "Python function 'ALcallfunc1' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute ALcallfunc1.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        ALcallfunc1 = Py.CallUDF("xlAlgLib", "ALcallfunc1", Array(c, x, param), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        ALcallfunc1 = Err.Description
End Function

Function ALcallfunc2(c, x, grad, param)
Attribute ALcallfunc2.VB_Description = "Python function 'ALcallfunc2' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute ALcallfunc2.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        ALcallfunc2 = Py.CallUDF("xlAlgLib", "ALcallfunc2", Array(c, x, grad, param), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        ALcallfunc2 = Err.Description
End Function

Function ALcallfunc3(c, x, grad, hess, param)
Attribute ALcallfunc3.VB_Description = "Python function 'ALcallfunc3' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute ALcallfunc3.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        ALcallfunc3 = Py.CallUDF("xlAlgLib", "ALcallfunc3", Array(c, x, grad, hess, param), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        ALcallfunc3 = Err.Description
End Function

Function ALcallfuncS(func, x)
Attribute ALcallfuncS.VB_Description = "Python function 'ALcallfuncS' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute ALcallfuncS.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        ALcallfuncS = Py.CallUDF("xlAlgLib", "ALcallfuncS", Array(func, x), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        ALcallfuncS = Err.Description
End Function

Function ALcallfuncStats(func, x)
Attribute ALcallfuncStats.VB_Description = "Python function 'ALcallfuncStats' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute ALcallfuncStats.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        ALcallfuncStats = Py.CallUDF("xlAlgLib", "ALcallfuncStats", Array(func, x), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        ALcallfuncStats = Err.Description
End Function

Function ALcallfuncStats0(func)
Attribute ALcallfuncStats0.VB_Description = "Python function 'ALcallfuncStats0' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute ALcallfuncStats0.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        ALcallfuncStats0 = Py.CallUDF("xlAlgLib", "ALcallfuncStats0", Array(func), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        ALcallfuncStats0 = Err.Description
End Function

Function ALcallfuncStats2(func, x, x2)
Attribute ALcallfuncStats2.VB_Description = "Python function 'ALcallfuncStats2' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute ALcallfuncStats2.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        ALcallfuncStats2 = Py.CallUDF("xlAlgLib", "ALcallfuncStats2", Array(func, x, x2), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        ALcallfuncStats2 = Err.Description
End Function

Function ALcallstring(CoeffA, XA_, param)
Attribute ALcallstring.VB_Description = "Python function 'ALcallstring' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute ALcallstring.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        ALcallstring = Py.CallUDF("xlAlgLib", "ALcallstring", Array(CoeffA, XA_, param), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        ALcallstring = Err.Description
End Function

Function ALcallstringA(CoeffA, XA_, param)
Attribute ALcallstringA.VB_Description = "Python function 'ALcallstringA' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute ALcallstringA.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        ALcallstringA = Py.CallUDF("xlAlgLib", "ALcallstringA", Array(CoeffA, XA_, param), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        ALcallstringA = Err.Description
End Function

Function CallFuncD(func, modname, Optional kwargs, Optional out, Optional ConvTup)
Attribute CallFuncD.VB_Description = "Python function 'CallFuncD' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute CallFuncD.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        CallFuncD = Py.CallUDF("xlAlgLib", "CallFuncD", Array(func, modname, kwargs, out, ConvTup), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        CallFuncD = Err.Description
End Function

Function CallNLP(func, func_dat)
Attribute CallNLP.VB_Description = "Python function 'CallNLP' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute CallNLP.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        CallNLP = Py.CallUDF("xlAlgLib", "CallNLP", Array(func, func_dat), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        CallNLP = Err.Description
End Function

Function get_argnames(afunc, modname, Optional FirstArg, Optional numargs)
Attribute get_argnames.VB_Description = "Python function 'get_argnames' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute get_argnames.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        get_argnames = Py.CallUDF("xlAlgLib", "get_argnames", Array(afunc, modname, FirstArg, numargs), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        get_argnames = Err.Description
End Function

Function getdoc(funcname)
Attribute getdoc.VB_Description = "Python function 'getdoc' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute getdoc.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        getdoc = Py.CallUDF("xlAlgLib", "getdoc", Array(funcname), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        getdoc = Err.Description
End Function

Function xl_ALODE(func, y, x, eps, h)
Attribute xl_ALODE.VB_Description = "Python function 'xl_ALODE' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute xl_ALODE.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_ALODE = Py.CallUDF("xlAlgLib", "xl_ALODE", Array(func, y, x, eps, h), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_ALODE = Err.Description
End Function

Function xl_CMatInv(a)
Attribute xl_CMatInv.VB_Description = "\n        Inverse of a complex matrix\n        Matrix to be inverted\n    "
Attribute xl_CMatInv.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_CMatInv = Py.CallUDF("xlAlgLib", "xl_CMatInv", Array(a), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_CMatInv = Err.Description
End Function

Function xl_CallNL(func, args)
Attribute xl_CallNL.VB_Description = "Python function 'xl_CallNL' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute xl_CallNL.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_CallNL = Py.CallUDF("xlAlgLib", "xl_CallNL", Array(func, args), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_CallNL = Err.Description
End Function

Function xl_Callal(func, args)
Attribute xl_Callal.VB_Description = "Python function 'xl_Callal' defined in 'd:\\users\\douga\\documents\\spread\\xlwings\\alglib\\xlAlgLib.py'."
Attribute xl_Callal.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_Callal = Py.CallUDF("xlAlgLib", "xl_Callal", Array(func, args), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_Callal = Err.Description
End Function

Function xl_EigenValR(a, out)
Attribute xl_EigenValR.VB_Description = "\n        Eigenvalues and eigenvectors of a general (unsymmetric) matrix\n        Matrix\n        Output index\n    "
Attribute xl_EigenValR.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_EigenValR = Py.CallUDF("xlAlgLib", "xl_EigenValR", Array(a, out), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_EigenValR = Err.Description
End Function

Function xl_EigenValS(a, isupper, out)
Attribute xl_EigenValS.VB_Description = "\n        Eigenvalues and eigenvectors of a symmetric matrix\n        Matrix\n        Boolean, use upper triangle = True\n        Output index\n    "
Attribute xl_EigenValS.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_EigenValS = Py.CallUDF("xlAlgLib", "xl_EigenValS", Array(a, isupper, out), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_EigenValS = Err.Description
End Function

Function xl_Eval(func, CoeffA, csym)
Attribute xl_Eval.VB_Description = "\n        Evaluate a function passed as text\n        Function name\n        Coefficient values\n        Coefficient symbols\n        X values\n        X symbols\n    "
Attribute xl_Eval.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_Eval = Py.CallUDF("xlAlgLib", "xl_Eval", Array(func, CoeffA, csym), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_Eval = Err.Description
End Function

Function xl_EvalText(func, ParamA, ValueA, XA_)
Attribute xl_EvalText.VB_Description = "\n        Evaluate a function passed as a text string\n        Function text\n        Constant symbols\n        Constant values\n        Variables\n    "
Attribute xl_EvalText.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_EvalText = Py.CallUDF("xlAlgLib", "xl_EvalText", Array(func, ParamA, ValueA, XA_), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_EvalText = Err.Description
End Function

Function xl_MatrixLU(a, Optional out)
Attribute xl_MatrixLU.VB_Description = "\n        LU decomposition of a general real matrix with row pivoting\n        Matrix\n        Output index\n    "
Attribute xl_MatrixLU.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_MatrixLU = Py.CallUDF("xlAlgLib", "xl_MatrixLU", Array(a, out), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_MatrixLU = Err.Description
End Function

Function xl_MatrixLUSolve(a, B, Optional stype, Optional out)
Attribute xl_MatrixLUSolve.VB_Description = "\n        LU solution of a general real matrix equation\n        Matrix\n        Y Vector\n    "
Attribute xl_MatrixLUSolve.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_MatrixLUSolve = Py.CallUDF("xlAlgLib", "xl_MatrixLUSolve", Array(a, B, stype, out), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_MatrixLUSolve = Err.Description
End Function

Function xl_NLFitwFunc(func, x, y, c, Optional out, Optional w, Optional bndl, Optional bndu, Optional defaults, Optional cheapfg)
Attribute xl_NLFitwFunc.VB_Description = "\n        Non-linear least squares fit for a named Python function\n        1, 2 or 3 cell range with the name of a Python function in NLFuncs module and optioanl derivative and Hessian functions\n        X values, 1 column for each basis function\n        Y "
Attribute xl_NLFitwFunc.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_NLFitwFunc = Py.CallUDF("xlAlgLib", "xl_NLFitwFunc", Array(func, x, y, c, out, w, bndl, bndu, defaults, cheapfg), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_NLFitwFunc = Err.Description
End Function

Function xl_NLFitwText(func, XA, YA, CA, sym, Optional w, Optional bndl, Optional bndu, Optional defaults, Optional out)
Attribute xl_NLFitwText.VB_Description = "\n        Non-linear least squares fit for function specified by a text string on the spreadsheet\n        Single cell or a 1 column or 1 row range containing the function and its derivatives\n        X values, 1 column for each basis function\n        Y coor"
Attribute xl_NLFitwText.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_NLFitwText = Py.CallUDF("xlAlgLib", "xl_NLFitwText", Array(func, XA, YA, CA, sym, w, bndl, bndu, defaults, out), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_NLFitwText = Err.Description
End Function

Function xl_PSpline(xy, st, pt, XOut, out1, out2)
Attribute xl_PSpline.VB_Description = "\n        Parametric spline interpolation\n        XY data, two or three column range: X, Y, (Z) values for each point\n        Spline type: 0 = Akima spline; 1 = parabolically terminated Catmull-Rom spline (Tension=0); 2 = parabolically terminated cubic spl"
Attribute xl_PSpline.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_PSpline = Py.CallUDF("xlAlgLib", "xl_PSpline", Array(xy, st, pt, XOut, out1, out2), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_PSpline = Err.Description
End Function

Function xl_PSplineP(xy, st, pt, XOut, out1, out2)
Attribute xl_PSplineP.VB_Description = "\n        Periodic parametric spline interpolation\n        XY data, two or three column range: X, Y, (Z) values for each point\n        Spline type: 0 = Akima spline; 1 = parabolically terminated Catmull-Rom spline (Tension=0); 2 = parabolically terminated "
Attribute xl_PSplineP.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_PSplineP = Py.CallUDF("xlAlgLib", "xl_PSplineP", Array(xy, st, pt, XOut, out1, out2), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_PSplineP = Err.Description
End Function

Function xl_PolyFit(XA, YA, XOut, m, Optional WA, Optional CA, Optional out)
Attribute xl_PolyFit.VB_Description = "\n        Polynomial least squares fit\n        X data, single column or row range\n        Y data, single column or row range\n        X values of interpolation points, single column or row range\n        Number of basis functions (= polynomial_degree + 1), \n"
Attribute xl_PolyFit.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_PolyFit = Py.CallUDF("xlAlgLib", "xl_PolyFit", Array(XA, YA, XOut, m, WA, CA, out), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_PolyFit = Err.Description
End Function

Function xl_RBF_ml(xyf, ndim, xyout, defaults)
Attribute xl_RBF_ml.VB_Description = "\n        Radial Basis Function Interpolation; see Alglib User Guide for more details\n        Data, multi column range; number of columns = NDim + number of dimensions of function value\n        XY(Z) values of required interpolation points; NDim column ran"
Attribute xl_RBF_ml.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_RBF_ml = Py.CallUDF("xlAlgLib", "xl_RBF_ml", Array(xyf, ndim, xyout, defaults), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_RBF_ml = Err.Description
End Function

Function xl_RBF_mlgrid(xyf, XOut, yout, defaults)
Attribute xl_RBF_mlgrid.VB_Description = "\n        RBF-ml interpolation with input data and output points on a regular grid; 2D data with single value function only\n        Data:  X values - Row 1, from Column 2; Y values - Column 1, from Row 2; Function values - from Row2, Column 2\n        Singl"
Attribute xl_RBF_mlgrid.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_RBF_mlgrid = Py.CallUDF("xlAlgLib", "xl_RBF_mlgrid", Array(xyf, XOut, yout, defaults), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_RBF_mlgrid = Err.Description
End Function

Function xl_RMatInv(a)
Attribute xl_RMatInv.VB_Description = "\n        Inverse of a real matrix\n        Matrix to be inverted\n    "
Attribute xl_RMatInv.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_RMatInv = Py.CallUDF("xlAlgLib", "xl_RMatInv", Array(a), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_RMatInv = Err.Description
End Function

Function xl_RMatTriInv(a, isupper)
Attribute xl_RMatTriInv.VB_Description = "\n        Inverse of a real triangular matrix\n        Matrix to be inverted\n        Boolean, use upper triangle = True\n    "
Attribute xl_RMatTriInv.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_RMatTriInv = Py.CallUDF("xlAlgLib", "xl_RMatTriInv", Array(a, isupper), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_RMatTriInv = Err.Description
End Function

Function xl_RatInterp(x, y, XOut, d)
Attribute xl_RatInterp.VB_Description = "\n    Rational interpolation without poles; see Alglib User Guide for more details.\n    X data, single column or row range\n    Y data, single column or row range\n    X values defining position of interpolated points, single column or row range.\n    Degree "
Attribute xl_RatInterp.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_RatInterp = Py.CallUDF("xlAlgLib", "xl_RatInterp", Array(x, y, XOut, d), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_RatInterp = Err.Description
End Function

Function xl_RatInterpXYW(x, y, w, XOut)
Attribute xl_RatInterpXYW.VB_Description = "\n    Weighted rational interpolation without poles; see Alglib User Guide for more details.\n    X data, single column or row range\n    Y data, single column or row range\n    Weights, single column or row range\n    X values defining position of interpolate"
Attribute xl_RatInterpXYW.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_RatInterpXYW = Py.CallUDF("xlAlgLib", "xl_RatInterpXYW", Array(x, y, w, XOut), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_RatInterpXYW = Err.Description
End Function

Function xl_Spline1d(XA, YA, Optional XOut, Optional SplineType, Optional Additional_Data, Optional out, Optional n)
Attribute xl_Spline1d.VB_Description = "\n        Linear and Cubic spline interpolation - 1D\n        X data, single column or row range\n        Y data, single column or row range\n        X values of interpolation points, single column or row range\n        1 = Cubic Spline; 2 = Akima Spline; 3 = "
Attribute xl_Spline1d.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_Spline1d = Py.CallUDF("xlAlgLib", "xl_Spline1d", Array(XA, YA, XOut, SplineType, Additional_Data, out, n), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_Spline1d = Err.Description
End Function

Function xl_Spline1dFitCubic(XA, YA, XOut, m, Optional stype, Optional out)
Attribute xl_Spline1dFitCubic.VB_Description = "\n        Least squares fit of cubic spline\n        X data, single column or row range\n        Y data, single column or row range\n        X values of interpolation points, single column or row range If ""XOut"" is omitted the function returns the cubic coeff"
Attribute xl_Spline1dFitCubic.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_Spline1dFitCubic = Py.CallUDF("xlAlgLib", "xl_Spline1dFitCubic", Array(XA, YA, XOut, m, stype, out), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_Spline1dFitCubic = Err.Description
End Function

Function xl_Spline1dFitCubicwc(XA, YA, XOut, m, w, xc, yc, dc, stype, out)
Attribute xl_Spline1dFitCubicwc.VB_Description = "\n        Weighted and constrained least squares fit of cubic spline\n        X data, single column or row range\n        Y data, single column or row range\n        X values of interpolation points, single column or row range If ""XOut"" is omitted the functio"
Attribute xl_Spline1dFitCubicwc.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_Spline1dFitCubicwc = Py.CallUDF("xlAlgLib", "xl_Spline1dFitCubicwc", Array(XA, YA, XOut, m, w, xc, yc, dc, stype, out), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_Spline1dFitCubicwc = Err.Description
End Function

Function xl_Spline2dCubic(XA, YA, FA, vx, vy, Optional out)
Attribute xl_Spline2dCubic.VB_Description = "\n        Bicubic vector-valued 2D spline\n        Spline abscissas, array[0..N-1]\n        Spline ordinates, array[0..M-1]\n        Function values, N x M range\n        Output abscissa values\n        Output ordinate values\n        Output index: 1 = interpola"
Attribute xl_Spline2dCubic.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_Spline2dCubic = Py.CallUDF("xlAlgLib", "xl_Spline2dCubic", Array(XA, YA, FA, vx, vy, out), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_Spline2dCubic = Err.Description
End Function

Function xl_Spline2dLin(XA, YA, FA, vx, vy)
Attribute xl_Spline2dLin.VB_Description = "\n        Bilinear vector-valued 2D spline\n        Spline abscissas, array[0..N-1]\n        Spline ordinates, array[0..M-1]\n        Function values, N x M range\n        Output abscissa values\n        Output ordinate values\n    "
Attribute xl_Spline2dLin.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_Spline2dLin = Py.CallUDF("xlAlgLib", "xl_Spline2dLin", Array(XA, YA, FA, vx, vy), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_Spline2dLin = Err.Description
End Function

Function xl_Spline3dLin(XA, YA, ZA, FA, vx, vy, vz)
Attribute xl_Spline3dLin.VB_Description = "\n        Trilinear vector-valued 3D spline\n        Spline abscissas, array[0..N-1]\n        Spline ordinates, array[0..M-1]\n        Spline applicates, array[0..L-1]\n        Function values, N x M x L single column range\n        Output abscissa values\n     "
Attribute xl_Spline3dLin.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_Spline3dLin = Py.CallUDF("xlAlgLib", "xl_Spline3dLin", Array(XA, YA, ZA, FA, vx, vy, vz), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_Spline3dLin = Err.Description
End Function

Function xl_SplineDiff(XA, YA, XOut, Optional SplineType, Optional Additional_Data, Optional n)
Attribute xl_SplineDiff.VB_Description = "\n        Differentiation of cubic splines; equivalent to xl_Spline1d with out = 4\n        X data, single column or row range\n        Y data, single column or row range\n        Output x valuess\n        1 = Cubic Spline; 2 = Akima Spline; 3 = Hermite Spline"
Attribute xl_SplineDiff.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_SplineDiff = Py.CallUDF("xlAlgLib", "xl_SplineDiff", Array(XA, YA, XOut, SplineType, Additional_Data, n), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_SplineDiff = Err.Description
End Function

Function xl_SplineInt(XA, YA, IntRange, Optional SplineType, Optional Additional_Data, Optional n)
Attribute xl_SplineInt.VB_Description = "\n        Integration of cubic splines; equivalent to xl_Spline1d with out = 3\n        X data, single column or row range\n        Y data, single column or row range\n        Integration range\n        1 = Cubic Spline; 2 = Akima Spline; 3 = Hermite Spline; 4"
Attribute xl_SplineInt.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_SplineInt = Py.CallUDF("xlAlgLib", "xl_SplineInt", Array(XA, YA, IntRange, SplineType, Additional_Data, n), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_SplineInt = Err.Description
End Function

Function xl_alEval(func, CoeffA, csym, XA_, xsym)
Attribute xl_alEval.VB_Description = "\n        Evaluate a function passed as text\n        Function name\n        Coefficient values\n        Coefficient symbols\n        X values\n        X symbols\n    "
Attribute xl_alEval.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_alEval = Py.CallUDF("xlAlgLib", "xl_alEval", Array(func, CoeffA, csym, XA_, xsym), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_alEval = Err.Description
End Function

Function xl_linfit(YA, FA, Optional WA, Optional CA, Optional out)
Attribute xl_linfit.VB_Description = "\n        Linear least squares fit\n        Y coordinates of the data points\n        Basis function values, 1 column for each basis function\n        Optional single column range with weight applied to each deviation value\n        Optional CMatrix: a table o"
Attribute xl_linfit.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_linfit = Py.CallUDF("xlAlgLib", "xl_linfit", Array(YA, FA, WA, CA, out), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_linfit = Err.Description
End Function

Function xl_minlm_vb(x, xydat, funcname, bndl, bndu, epsx, maxits, Optional out)
Attribute xl_minlm_vb.VB_Description = "\n        Minimise a named function with Alglib minlmcreatev  Levenberg|2013|Marquardt algorithm\n        Initial guess of function parameters, single column range\n        Data to be fitted, two column range\n        Fitting function; a function in NLFuncs.py\n "
Attribute xl_minlm_vb.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_minlm_vb = Py.CallUDF("xlAlgLib", "xl_minlm_vb", Array(x, xydat, funcname, bndl, bndu, epsx, maxits, out), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_minlm_vb = Err.Description
End Function

Function xl_minlm_vbtext(x, xydat, func, csym, bndl, bndu, epsx, maxits, Optional out)
Attribute xl_minlm_vbtext.VB_Description = "\n        Minimise a named function with Alglib minlmcreatev (Levenberg|2013|Marquardt algorithm)\n        Initial guess of function parameters, single column range\n        Data to be fitted, two column range\n        Fitting function; a text string to be evalu"
Attribute xl_minlm_vbtext.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_minlm_vbtext = Py.CallUDF("xlAlgLib", "xl_minlm_vbtext", Array(x, xydat, func, csym, bndl, bndu, epsx, maxits, out), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_minlm_vbtext = Err.Description
End Function

Function xl_minstrinfunc(x, xydat, func, csym)
Attribute xl_minstrinfunc.VB_Description = "\n        Evaluate string function for LM solver\n        Constant values\n        XY data\n        Function string\n        Symbols\n    "
Attribute xl_minstrinfunc.VB_ProcData.VB_Invoke_Func = " \n19"
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xl_minstrinfunc = Py.CallUDF("xlAlgLib", "xl_minstrinfunc", Array(x, xydat, func, csym), ThisWorkbook, Application.Caller)
        Exit Function
failed:
        xl_minstrinfunc = Err.Description
End Function



INQUEST-PP=macro
