Attribute VB_Name = "EBuch"
Public col As Collection
Sub Seitenzahl(control As IRibbonControl) 'F|fffd|gt Klammern f|fffd|r Seitenzahlen ein
    Tags_einfuegen "((", "))", 2
End Sub
Sub Merksatz(control As IRibbonControl) 'F|fffd|gt Merksatz ein
    Tags_einfuegen "<Rahmen> Merksatz:" & Chr(11), Chr(11) & "</Rahmen>" & Chr(13), 11
End Sub
Sub Rahmen(control As IRibbonControl) 'F|fffd|gt Rahmen Tag ein
    Tags_einfuegen "<Rahmen>" & Chr(11), Chr(11) & "</Rahmen>" & Chr(13), 11
End Sub
Sub Anmerkung(control As IRibbonControl) 'F|fffd|gt Anmerkungs Tag ein
    Tags_einfuegen "<Anmerkung> ", "</Anmerkung>", 12
End Sub
Sub Bildbeschreibung(control As IRibbonControl) 'f|fffd|gt Bild Tag ein
    Tags_einfuegen "<Bild> ", "</Bild>" & Chr(13), 8
End Sub
Sub Luecke(control As IRibbonControl) 'F|fffd|gt L|fffd|ckenzeichen ein
    Selection.TypeText Text:="_..._"
End Sub
Sub Lueckentext(control As IRibbonControl) 'F|fffd|gt L|fffd|ckentext-Tag ein
    Tags_einfuegen "<L|fffd|ckentext>" & Chr(11), Chr(11) & "</L|fffd|ckentext>" & Chr(13), 15
End Sub
Sub Zeilennummerierung(control As IRibbonControl) 'F|fffd|gt Zeilennummerierungs-Tag ein
    Tags_einfuegen "<Zeilennummerierung>" & Chr(11), Chr(11) & "</Zeilennummerierung>" & Chr(13), 23
End Sub
Sub Tabelle2(control As IRibbonControl) 'F|fffd|gt Tabellen-Tag ein
    Tags_einfuegen "<Tabelle>", "</Tabelle>" & Chr(13), 11
End Sub
Sub MatheBruch(control As IRibbonControl) 'F|fffd|gt Bruch ein
    Tags_einfuegen "\frac{", "}{}", 3
End Sub
Sub LaTeXTags(control As IRibbonControl) 'LaTeX Tags einf|fffd|gen
    Tags_einfuegen "<L>", "</L>", 4
End Sub
Sub SBTags(control As IRibbonControl) 'sb-Tags einf|fffd|gen
    Tags_einfuegen "<sb>", "</sb>", 5
End Sub
Sub BLTags(control As IRibbonControl) 'bl Tags einf|fffd|gen
    Tags_einfuegen "<bl>", "</bl>", 5
End Sub
Sub Fettdruck()
    Selection.Font.Bold = wdToggle
    Tags_einfuegen "_", "_", 1
End Sub
Sub SeitenzahlenmitReinigung(control As IRibbonControl) 'Entfernt Worttrennungen am Zeilen- und Seitenende und f|fffd|gt Seitenzahlen an Seitenumbr|fffd|chen ein.
Call SeitenUmbruch
Call ZeilenUmbruch
i_start = 0
Call Seitenzahleneinfuegen
If i_start = 0 Then
    GoTo Fehler
End If
Call TextmarkenEntfernen
Fehler:
End Sub
Sub TagsLoeschen(control As IRibbonControl) 'E-Buch Tags l|fffd|schen
    Call Attribute_loeschen
    Call RahmenZeichnen
    Ausdruck_ersetzen "<Bild>", "</Bild>", "Bild:", True
    Ausdruck_ersetzen "<Anmerkung>", "</Anmerkung>", "Anmerkung:", True
    Ausdruck_ersetzen "<Tabelle>", "</Tabelle>", "", False
    Ausdruck_ersetzen "<Rahmen>", "</Rahmen>", "", False
    Ausdruck_ersetzen "<Rahmen Typ=" & Chr(34) & "Merksatz" & Chr(34) & ">", "", "", False
    Ausdruck_ersetzen "<L|fffd|ckentext>", "</L|fffd|ckentext>", "", False
End Sub
Sub Attribute_loeschen()
    fkt_Search_uni 3, "<Rahmen", ">", False
    fkt_Search_uni 3, "<Bild", ">", False
    fkt_Search_uni 3, "<Tabelle", ">", False
    fkt_Search_uni 3, "<Anmerkung", ">", False
    fkt_Search_uni 3, "<L|fffd|ckentext", ">", False
End Sub
Sub RahmenZeichnen() 'Zeichnen eines Rahmens f|fffd|r Sehbehinderte um Rahmen-Tags
    fkt_Search_uni 4, "<Rahmen Typ=" & Chr(34) & "Merksatz" & Chr(34) & ">", "</Rahmen>", False
    fkt_Search_uni 4, "<Rahmen Typ=" & Chr(34) & Chr(34) & ">", "</Rahmen>", False
    fkt_Search_uni 4, "<Rahmen>", "</Rahmen>", False
    fkt_Search_uni 4, "<Rahmen> Merksatz:", "</Rahmen>", False

End Sub
Sub TagsEntfernen(control As IRibbonControl) 'L|fffd|scht die <L> - Filtertags
    Ausdruck_ersetzen "<L>", "</L>", ""
End Sub
Sub BilderEntfernen(control As IRibbonControl) 'L|fffd|scht ggf. Bilder aus dem Dokument
    Ausdruck_ersetzen "^g", "", "", False
End Sub
Sub Blind(control As IRibbonControl) 'alles in sb Tags loeschen, bl tags l|fffd|schen und Inhalt behalten - Version f|fffd|r Blinde
        fkt_Search_uni 1, "<sb>", "</sb>", True
        Ausdruck_ersetzen "<bl>", "</bl>", ""
End Sub
Sub Sehbehindert(control As IRibbonControl) 'alles in bl Tags loeschen, sb tags l|fffd|schen und Inhalt behalten - Version f|fffd|r Sehbehinderte
        fkt_Search_uni 1, "<bl>", "</bl>", True
        Ausdruck_ersetzen "<sb>", "</sb>", "", False
End Sub

Sub Schriftanpassung() 'Anpassung der Schift und der Schriftart
    Dim strSchriftgr|fffd||fffd|e As String
    Dim strSchriftart As String
    Dim eq As OMath
    
    strSchriftgr|fffd||fffd|e = InputBox("Geben Sie die gew|fffd|nschte Schriftgr|fffd||fffd|e ein")
    'strSchriftart = InputBox("Geben Sie die gew|fffd|nschte Schriftart ein. W|fffd|nschen Sie Verdana, k|fffd|nnen Sie das Eingabefeld leer lassen.")
    If strSchriftgr|fffd||fffd|e = "" Then strSchriftgr|fffd||fffd|e = "12"
    If strSchriftart = "" Then strSchriftart = "Verdana"
    With ActiveDocument.Styles("Standard").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e
    End With
    With ActiveDocument.Styles("Kein Leerraum").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e
    End With
    With ActiveDocument.Styles("|fffd|berschrift 1").Font
        .Name = strSchrifart
        .Size = strSchriftgr|fffd||fffd|e + 6
        .Bold = True
        .Italic = False
    End With
    With ActiveDocument.Styles("|fffd|berschrift 2").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e + 4
        .Bold = True
    End With
    With ActiveDocument.Styles("|fffd|berschrift 3").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e + 2
        .Bold = True
    End With
    With ActiveDocument.Styles("|fffd|berschrift 4").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e
        .Bold = True
    End With
    With Selection.ParagraphFormat
        .WidowControl = True
        .KeepWithNext = True
        .KeepTogether = False
   End With
   With Selection
        .WholeStory
        
   End With
   ActiveDocument.OMathJc = wdOMathJcLeft
   For Each eq In ActiveDocument.OMaths
        eq.Range.Select
        With Selection
            .Font.Size = strSchriftgr|fffd||fffd|e + 2
        End With
    Next
End Sub
Sub Formatvorlagensatz(control As IRibbonControl)
'Call Fonts
Dim Objekt
Set col = New Collection
Call CheckQuickStyles("1_5_Arial_Rahmen")
Call CheckQuickStyles("1_5_Arial_gelbblau")
Call CheckQuickStyles("1_5_Arial_blau_Rahmen")
Call CheckQuickStyles("1_5_Arial_ohneFarbe")
Call CheckQuickStyles("Standard_Arial")
Call CheckQuickStyles("1_5_Verdana_Rahmen")
Call CheckQuickStyles("1_5_Verdana_gelbblau")
Call CheckQuickStyles("1_5_Verdana_blau_Rahmen")
Call CheckQuickStyles("1_5_Verdana_ohneFarbe")
Call CheckQuickStyles("Standard_Verdana")
For Each Objekt In col
    If Objekt = "1_5_Arial_Rahmen" Then
    UserForm1.ARahmen.Visible = True
    End If
    If Objekt = "1_5_Arial_gelbblau" Then
    UserForm1.AGelbBlau.Visible = True
    End If
    If Objekt = "1_5_Arial_blau_Rahmen" Then
    UserForm1.Ablau_Rahmen.Visible = True
    End If
    If Objekt = "1_5_Arial_ohneFarbe" Then
    UserForm1.Aohne.Visible = True
    End If
    If Objekt = "1_5_Verdana_Rahmen" Then
    UserForm1.VRahmen.Visible = True
    End If
    If Objekt = "1_5_Verdana_blau_Rahmen" Then
    UserForm1.Vblau_Rahmen.Visible = True
    End If
    If Objekt = "1_5_Verdana_gelbblau" Then
    UserForm1.VGelbBlau.Visible = True
    End If
    If Objekt = "1_5_Verdana_ohneFarbe" Then
    UserForm1.Vohne.Visible = True
    End If
    If Objekt = "Standard_Arial" Then
    UserForm1.AStandard.Visible = True
    End If
    If Objekt = "Standard_Verdana" Then
    UserForm1.VStandard.Visible = True
    End If
Next Objekt
Zahl = col.Count
If Zahl = 0 Then
UserForm1.Label1.Visible = True
UserForm1.Label2.Visible = False
End If
'ActiveDocument.SaveAsQuickStyleSet "Alter_Stil"
UserForm1.Show
End Sub
Sub CheckQuickStyles(ByRef StyleSet_Name As String)
Dim strOrdner As String
Dim Nutzer As String
Dim Test_String As String
    Test_String = ""
    Nutzer = Environ$("USERPROFILE")
    strOrdner = Nutzer & "\AppData\Roaming\Microsoft\QuickStyles\" & StyleSet_Name & ".dotx"
    Test_String = Dir(strOrdner)
    On Error GoTo keinEintrag
    If Test_String = "" Then
    Else
    col.Add (StyleSet_Name)
    End If
keinEintrag:
End Sub

Sub Grossraus(control As IRibbonControl)
Selection.Find.ClearFormatting
    With Selection.Find.Font
        .Bold = True
        .SmallCaps = False
        .AllCaps = True
    End With
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find.Replacement.Font
        .Bold = True
        .SmallCaps = False
        .AllCaps = False
    End With
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
End Sub
Attribute VB_Name = "Funktionen"
Function Ausdruck_ersetzen(strStart As String, strEnd As String, strErsatz As String, Optional ByVal boolFormat As Boolean = False)
Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    If boolFormat = True Then
        Selection.Find.Replacement.Font.Bold = boolFormat
    End If
    With Selection.Find
        .Text = strStart
        .Replacement.Text = strErsatz
        .Forward = True
        .Wrap = wdFindContinue
    End With
    
    Selection.Find.Execute Replace:=wdReplaceAll
If strEnd = "" Then
    Exit Function
Else
    Selection.Find.ClearFormatting
        Selection.Find.Replacement.ClearFormatting
        With Selection.Find
            .Text = strEnd
            .Replacement.Text = ""
            .Forward = True
            .Wrap = wdFindContinue
    End With
End If
    Selection.Find.Execute Replace:=wdReplaceAll
End Function
Function Tags_einfuegen(strStart As String, strEnd As String, intRueck As Integer)
Dim rng As Range
Dim Auswahl As Range
Dim Auswahl_neu As Range
Dim Auswahl_neu2 As Range
Dim rng2 As Range
On Error GoTo ohneMark
Options.PasteSmartCutPaste = False
Set Auswahl = ActiveDocument.Range(Selection.Start, Selection.End)
Set rng = ActiveDocument.Range(Selection.Range.End - 1, Selection.Range.End)
'hier einf|fffd|gen: wenn letztes Zeichen Paragraph, Leerzeichen - Selection.Range -1,
If rng = " " Or rng = Chr(13) Then
    'rng.Delete
    Set Auswahl_neu = ActiveDocument.Range(Auswahl.Start, Auswahl.End - 1)
    Auswahl_neu.Select
    Set rng2 = ActiveDocument.Range(Auswahl_neu.End - 1, Auswahl_neu.End)
        If rng2 = " " Then
        rng2.Delete
        'Set Auswahl_neu2 = ActiveDocument.Range(Auswahl_neu.Start, Auswahl_neu.End - 1)
        'Auswahl_neu2.Select
    End If
End If
'Auswahl_neu.Select

On Error GoTo ohneMark
    With Selection
        .Cut
        .TypeText Text:=strStart & strEnd
        .MoveLeft Unit:=wdCharacter, Count:=intRueck
        .Paste
        .MoveRight Unit:=wdCharacter, Count:=intRueck
    End With
    Exit Function
ohneMark:
    Selection.TypeText Text:=strStart & strEnd
    Selection.MoveLeft Unit:=wdCharacter, Count:=intRueck
End Function
Function Seitenzahl_auslesen(mark As Boolean, fw As Boolean) As String
Dim r As Range
Dim rr As Range
Dim p As Paragraph
Dim Lang As Long
Dim TM As String
Dim strStart As String
Dim strEnd As String
Dim rng As Range
Dim rngText As Range
Dim Auswahl As Range

Set Auswahl = ActiveDocument.Range(Selection.Start, Selection.End)
Selection.MoveLeft Unit:=wdCharacter, Count:=1
strStart = "(("
strEnd = "))"

Set rng = ActiveDocument.Range
Set rngText = ActiveDocument.Range(0, 0)
Do While Not IsNumeric(rngText)
With Selection.Find
 .Format = False
 .Text = strStart
 If fw = False Then
    .Forward = False
    Else
    .Forward = True
 End If
 .Wrap = wdFindContinue
 .Execute
    rngText.SetRange rng.Start, rng.End
    rng.SetRange Selection.End, ActiveDocument.Range.End
End With
With Selection.Find
    .Text = strEnd
    .Forward = True
    .Wrap = wdFindContinue
    .Execute
End With
    rngText.SetRange rng.Start, Selection.Start
    If Not IsNumeric(rngText) Then
        If fw = True Then
            rngText.Select
            Selection.MoveRight Unit:=wdCharacter, Count:=2
        Else
            rngText.Select
            Selection.MoveLeft Selection.MoveRight 'Unit:=wdCharacter, Count:=2
        End If
        If rngText.Text = "" Then
            Exit Function
        End If
    End If
    Loop
If mark = False Then
    Auswahl.Select
    Seitenzahl_auslesen = rngText
Else
    rngText.Select
End If
End Function

Function fkt_Search_uni(Nummer As Integer, strStart As String, strEnd As String, Optional bDelete As Boolean = False)
Dim rng As Range
Dim rngText As Range
Set rng = ActiveDocument.Range
Set rngText = ActiveDocument.Range(0, 0)
rngText.Collapse wdCollapseStart
With rng.Find
 .Format = False
 .Text = strStart
 .Execute
 Do While .Found = True
   rngText.SetRange rng.Start, rng.End
   rng.SetRange rng.End, ActiveDocument.Range.End
   .Execute FindText:=strEnd, Forward:=True
   If .Found = False Then Exit Function
   rngText.SetRange rngText.Start, rng.End
   If bDelete = False Then
   rngText.SetRange rngText.Start + Len(strStart), rngText.End - Len(strEnd)
   rngText.Select
     'If Nummer = 1 Then
        'Call UmwandlungMathML
        'Call Pause
     'End If
     'If Nummer = 2 Then
        'Call UmwandlungMathType
        'Call Pause
     'End If
     If Nummer = 3 Then
        If rngText = " Typ=" & Chr(34) & "Merksatz" & Chr(34) Or rngText = "" Then
        Else
            rngText.Delete
        End If
     End If
     If Nummer = 4 Then
        Call Rahmen_Zeichnen(strStart, rngText)
     End If
    Else
        rngText.Delete
    End If
   rng.Collapse wdCollapseEnd
   .Execute FindText:=strStart, Forward:=True
 Loop
 rng.Collapse wdCollapseEnd
End With
End Function

Private Sub Rahmen_Zeichnen(strStart, rngText)
        If strStart = "<Rahmen> Merksatz:" Then
        rngText.Select
        With Selection.ParagraphFormat
        With .Borders(wdBorderLeft)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = 5287936
        End With
        With .Borders(wdBorderRight)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = 5287936
        End With
        With .Borders(wdBorderTop)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = 5287936
        End With
        With .Borders(wdBorderBottom)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = 5287936
        End With
        .Borders(wdBorderHorizontal).LineStyle = wdLineStyleNone
        With .Borders
            .DistanceFromTop = 1
            .DistanceFromLeft = 4
            .DistanceFromBottom = 1
            .DistanceFromRight = 4
            .Shadow = False
        End With
        End With
        With Selection
            .MoveLeft Unit:=wdCharacter, Count:=11
            .Delete Unit:=wdCharacter, Count:=1
            .TypeText Text:=Chr(11)
        End With
        With Options
            .DefaultBorderLineStyle = wdLineStyleSingle
            .DefaultBorderLineWidth = wdLineWidth300pt
            .DefaultBorderColor = 5287936
        End With
        End If
    If strStart = "<Rahmen Typ=" & Chr(34) & Chr(34) & ">" Or strStart = "<Rahmen>" Then
        rngText.Select
        With Selection.ParagraphFormat
        With .Borders(wdBorderLeft)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = wdColorAutomatic
        End With
        With .Borders(wdBorderRight)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = wdColorAutomatic
        End With
        With .Borders(wdBorderTop)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = wdColorAutomatic
        End With
        With .Borders(wdBorderBottom)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = wdColorAutomatic
        End With
        With .Borders
            .DistanceFromTop = 1
            .DistanceFromLeft = 4
            .DistanceFromBottom = 1
            .DistanceFromRight = 4
            .Shadow = False
        End With
        End With
    End If
End Sub

Attribute VB_Name = "Fussnoten"
Public iSeite As Integer
Public iSeite_alt As Integer
Public iLfdNr As Integer

Sub SprungZieleNummerieren_spezial(control As IRibbonControl)
'Hier werden die Fussnoten unter dem Text durchnummeriert und als Textmarke gesetzt. Zuvor wird die aktuelle Seiten herausgefunden.
Dim r As Range
Dim rr As Range
Dim p As Paragraph
Dim Lang As Long
Dim TM As String
Dim Seitenzahl_akt As String
Dim Auswahl As Range
Set Auswahl = ActiveDocument.Range(Selection.Start, Selection.End)
'Spezial
Seitenzahl_akt = InputBox("Aktuelle Seite")
'Seitenzahl_akt = Seitenzahl_auslesen(False, False)
If Seitenzahl_akt = "" Then
    Seitenzahl_akt = 1
End If
iSeite = Seitenzahl_akt
If iSeite <> iSeite_alt Then
    iSeite_alt = iSeite
    iLfdNr = 0
End If
Auswahl.Select
With Selection.Find 'Falls manuelle Zeilenumbr|fffd|che am Ende stehen, werden diese durch Paragraphen ersetzt
        .Text = "^l"
        .Replacement.Text = "^p"
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
End With
    Selection.Find.Execute Replace:=wdReplaceAll

'Einf|fffd|gen der Textmarken von bei : Z
k = 1
For Each p In Selection.Paragraphs
    Set r = ActiveDocument.Range(p.Range.Start, p.Range.End)
    TM = "^" & k & ": "
    r.InsertBefore TM
    Lang = Len(TM)
    Set rr = ActiveDocument.Range(p.Range.Start + Lang - 2, p.Range.Start + Lang)
    With ActiveDocument.Bookmarks
        .Add Range:=rr, Name:="S" & Seitenzahl_akt & "_" & k & "a"
    End With
    k = k + 1
Next p
'Einf|fffd|gen der Hyperlinks bei ^k
k = 1
For Each Bookmark In Selection.Bookmarks
    BM = "^" & k
    Set rng = ActiveDocument.Range(Bookmark.Start - Len(BM), Bookmark.Start)
    ActiveDocument.Hyperlinks.Add Anchor:=rng, Address:="", _
        SubAddress:="S" & Seitenzahl_akt & "_" & k
    k = k + 1
Next Bookmark
' (Erneutes) Umwandeln der Absatzumbr|fffd|che in Zeilenumbr|fffd|che
With Selection.Find
        .Text = "^p"
        .Replacement.Text = "^l"
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
End With
    Selection.Find.Execute Replace:=wdReplaceAll
End Sub
Sub FNImText(control As IRibbonControl)
MsgBox ("Statt diesen Button zu dr|fffd|cken k|fffd|nnen Sie zum Einf|fffd|gen einer Fu|fffd|note im Text an der gew|fffd|nschten Textstelle die Tastenkombination Alt+F2 dr|fffd|cken")
Call ImText
Call AddKeyBinding
Call AddKeyBinding2
End Sub
Sub ImText()
Dim Seitenzahl_akt
Seitenzahl_akt = Seitenzahl_auslesen(False, False)
If Seitenzahl_akt = "" Then
    Seitenzahl_akt = 1
    Selection.MoveRight Unit:=wdCharacter, Count:=1
End If
iSeite = Seitenzahl_akt
If iSeite <> iSeite_alt Then
    iSeite_alt = iSeite
    iLfdNr = 0
End If
Dim rng As Range
iLfdNr = iLfdNr + 1
Selection.InsertAfter "^" & iLfdNr
Set rng = Selection.Range
With ActiveDocument.Bookmarks
        .Add Range:=rng, Name:="S" & iSeite & "_" & iLfdNr
End With
ActiveDocument.Hyperlinks.Add Anchor:=Selection.Range, Address:="", _
        SubAddress:="S" & iSeite & "_" & iLfdNr & "a"
End Sub
Sub Korrektur(control As IRibbonControl)
UserForm6.Show
End Sub
Attribute VB_Name = "Seitenzahlen"
Public i_start As Integer
Public aktuelle_Seite As Integer
Public Abbruch As Boolean
Sub SeitenUmbruch()
Dim i As Integer
Dim Anzahl As Long
Selection.HomeKey Unit:=wdStory
Anzahl = 0
i = 0
With Selection
    .HomeKey Unit:=wdStory
    With .Find
        .Text = "-^p^m^p"
        .Forward = True
    End With
    Do While .Find.Execute
        Anzahl = Anzahl + 1
    Loop
    .HomeKey Unit:=wdStory
    Do While i < Anzahl
        With .Find
            .Text = "-^p^m^p"
            .Replacement.Text = ""
            .Forward = True
        End With
        .Find.Execute Replace:=wdReplaceOne
        .MoveRight Unit:=wdWord, Count:=1
        .TypeParagraph
        .InsertBreak wdPageBreak
        i = i + 1
    Loop
Tausch "^p^m^p. ", ".^p^m^p"
Tausch "^p^m^p, ", ",^p^m^p"
Tausch "^p^m^p! ", "!^p^m^p"
Tausch "^p^m^p? ", "?^p^m^p"
Tausch "^p^m^p) ", ")^p^m^p"
End With
End Sub
Sub ZeilenUmbruch()
Dim i As Integer
Dim Anzahl As Long
Selection.HomeKey Unit:=wdStory
Anzahl = 0
i = 0
Tausch "^l", "^p"
With Selection
    .HomeKey Unit:=wdStory
    With .Find
        .Text = "-^p"
        .Forward = True
    End With
    Do While .Find.Execute
        Anzahl = Anzahl + 1
    Loop
    .HomeKey Unit:=wdStory
    Do While i < Anzahl
        With .Find
            .Text = "-^p"
            .Replacement.Text = ""
            .Forward = True
        End With
        .Find.Execute Replace:=wdReplaceOne
        .MoveRight Unit:=wdWord, Count:=1
        .TypeText Text:=Chr(13)
        i = i + 1
    Loop
Tausch "^p. ", ".^p"
Tausch "^p, ", ",^p"
Tausch "^p! ", "!^p"
Tausch "^p? ", "?^p"
Tausch "^p) ", ")^p"
Tausch "^p", "^p"
End With
End Sub
Sub TextmarkenEntfernen()
For Each Bookmark In ActiveDocument.Bookmarks
    ActiveDocument.Bookmarks(Bookmark).Delete
Next
End Sub
Private Sub Tausch(A, B)
With Selection.Find
    .Text = A
    .Replacement.Text = B
    .Forward = True
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With
End Sub
Sub Seitenzahleneinfuegen()
Dim i As Integer
Dim Anzahl As Long
UserForm4.Show
Selection.HomeKey Unit:=wdStory
If i_start = 0 Then
    i_start = 1
End If
Selection.Text = "((" & i_start & "))" & vbCrLf
Anzahl = 0
i = i_start + 1
    With Selection
    .HomeKey Unit:=wdStory
        With .Find
            .Text = "^m"
            .Forward = True
        End With
        Do While .Find.Execute
            Anzahl = Anzahl + 1
        Loop
    End With
    MsgBox "Das Dokument hat " & Anzahl + 1 & " Seiten"
    With Selection
        .HomeKey Unit:=wdStory
            Do While i - i_start < Anzahl + 1
            With .Find
                .Text = "^m"
                .Replacement.Text = "^p((" & i & "))^p"
                .Forward = True
                .Wrap = wdFindContinue
            End With
                .Find.Execute Replace:=wdReplaceOne
                .Style = ActiveDocument.Styles("Standard")
                i = i + 1
            Loop
    End With
Exit Sub
Fehler:
    Beep
    MsgBox ("Zahl eingeben!")
End Sub

Sub Seitenzahlen_korrigieren()
Dim rng As Range
Dim rngErsetzen As Range
Dim rngDoc As Range
Dim Auswahl As Range

Set rngDoc = ActiveDocument.Range
Set rng = ActiveDocument.Range(0, 0)
Set rngErsetzen = ActiveDocument.Range(0, 0)
Set Auswahl = ActiveDocument.Range(Selection.Start, Selection.End)
With Selection.Find
        .Text = "((^#))"
        .Forward = True
        .Wrap = wdFindContinue
    End With
If Selection.Find.Execute = False Then
With Selection.Find
        .Text = "((^#^#))"
        .Forward = True
        .Wrap = wdFindContinue
End With
If Selection.Find.Execute = False Then
With Selection.Find
        .Text = "((^#^#^#))"
        .Forward = True
        .Wrap = wdFindContinue
End With
    If Selection.Find.Execute = False Then
With Selection.Find
        .Text = "((^#^#^#^#))"
        .Forward = True
        .Wrap = wdFindContinue
End With
    If Selection.Find.Execute = False Then
    MsgBox "Keine Seiten vorhanden"
    Exit Sub
End If
End If
End If
End If
Auswahl.Select
UserForm5.Show
If Abbruch = True Then
Exit Sub
End If
Seitenzahl_akt = Seitenzahl_auslesen(True, False)
rngErsetzen.SetRange Selection.Start, rngDoc.End
Selection.TypeText aktuelle_Seite
i = 1
Do While Len(rng) < Len(rngErsetzen)
    Seitenzahl_akt = Seitenzahl_auslesen(True, True)
    rng.SetRange Selection.Start, rngDoc.End
    If Len(rng) < Len(rngErsetzen) Then
        Selection.TypeText aktuelle_Seite + i
        i = i + 1
    End If
Loop
Auswahl.Select
End Sub

Attribute VB_Name = "Tastenkombination"
Option Explicit
Sub AddKeyBinding() 'F|fffd|gt Word die Tastenkombination Alt+F2 als Kombination zum Einf|fffd|gen von Fu|fffd|noten hinzu.
    With Application
        .CustomizationContext = NormalTemplate
        .KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyF2), _
        KeyCategory:=wdKeyCategoryCommand, _
        Command:="ImText"
    End With
End Sub
Sub AddKeyBinding2()
    With Application
        .CustomizationContext = NormalTemplate
        .KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyF12), _
        KeyCategory:=wdKeyCategoryCommand, _
        Command:="Fettdruck"
    End With
End Sub


Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{D3EDA5AD-958A-4155-9AF9-EEAB5405EED1}{F886B08B-D895-455B-A07D-F1BD78DB03D2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Auswahl As String
Public Auswahl_Vorher

Private Sub AStandard_Click()
    Auswahl = "Standard_Arial"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub

Private Sub CommandButton1_Click()
    Unload UserForm1
    UserForm2.Show
End Sub

Private Sub AGelbBlau_Click()
    Auswahl = "1_5_Arial_gelbblau"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Private Sub ARahmen_Click()
    Auswahl = "1_5_Arial_Rahmen"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Private Sub Ablau_Rahmen_Click()
    Auswahl = "1_5_Arial_blau_Rahmen"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Private Sub Aohne_Click()
    Auswahl = "1_5_Arial_ohneFarbe"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub

Private Sub Label1_Click()

End Sub

Private Sub Rueckzus_Click()
  If col.Count = 0 Then
    Unload UserForm1
  Else:
    For Each Objekt In col
        If Objekt = "Standard_Arial" Then
        ActiveDocument.ApplyQuickStyleSet2 ("Standard_Arial")
        End If
        If Objekt = "Standard_Verdana" Then
        ActiveDocument.ApplyQuickStyleSet2 ("Standard_Verdana")
        End If
    Next Objekt
  End If
    Unload UserForm1
End Sub

Private Sub UserForm_Click()

End Sub

Private Sub VGelbBlau_Click()
    Auswahl = "1_5_Verdana_gelbblau"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Private Sub VRahmen_Click()
    Auswahl = "1_5_Verdana_Rahmen"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Private Sub Vblau_Rahmen_Click()
    Auswahl = "1_5_Verdana_blau_Rahmen"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Private Sub Vohne_Click()
    Auswahl = "1_5_Verdana_ohneFarbe"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Private Sub VStandard_Click()
    Auswahl = "Standard_Verdana"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{8B54DBC5-24DE-4B3C-BD83-59641586C1E4}{462E6289-F2A3-49A3-B94F-1A124E7EDFEC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public strSchriftart As String


Private Sub CommandButton1_Click()
    Dim strSchriftgr|fffd||fffd|e As String
    Dim strSchriftart As String
    Dim eq As OMath
    
    strSchriftgr|fffd||fffd|e = ComboBox2.Text
    strSchriftart = ComboBox1.Text
    If strSchriftgr|fffd||fffd|e = "" Then strSchriftgr|fffd||fffd|e = "12"
    If strSchriftart = "" Then strSchriftart = "Verdana"
    With ActiveDocument.Styles("Standard").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e
    End With
    With ActiveDocument.Styles("Kein Leerraum").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e
    End With
    With ActiveDocument.Styles("|fffd|berschrift 1").Font
        .Name = strSchrifart
        .Size = strSchriftgr|fffd||fffd|e + 6
        .Bold = True
        .Italic = False
    End With
    With ActiveDocument.Styles("|fffd|berschrift 2").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e + 4
        .Bold = True
    End With
    With ActiveDocument.Styles("|fffd|berschrift 3").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e + 2
        .Bold = True
    End With
    With ActiveDocument.Styles("|fffd|berschrift 4").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e
        .Bold = True
    End With
    With Selection.ParagraphFormat
        .WidowControl = True
        .KeepWithNext = True
        .KeepTogether = False
   End With
   With Selection
        .WholeStory
        
   End With
   ActiveDocument.OMathJc = wdOMathJcLeft
   For Each eq In ActiveDocument.OMaths
        eq.Range.Select
        With Selection
            .Font.Size = strSchriftgr|fffd||fffd|e + 2
        End With
    Next
    Unload UserForm2
End Sub

Private Sub CommandButton2_Click()
    Unload UserForm2
End Sub


Private Sub UserForm_Initialize()
Dim SchName As String
Dim SchrColl As Collection
Dim varItem As Variant
Dim AktFont As String
Dim AktFontgr As String
Set SchrColl = New Collection
For Each varFont In FontNames
    SchrName = varFont
    SchrColl.Add SchrName
Next varFont
For Each varItem In SchrColl
    ComboBox1.AddItem varItem
Next varItem
    ComboBox1.Style = fmStyleDropDownList
'   ComboBox1.BoundColumn = 0
    AktFont = ActiveDocument.Styles("Standard").Font.Name
    ComboBox1.Value = AktFont

'Schriftgr|fffd||fffd|e
ComboBox2.AddItem "8"
ComboBox2.AddItem "10"
ComboBox2.AddItem "12"
ComboBox2.AddItem "13"
ComboBox2.AddItem "14"
ComboBox2.AddItem "15"
ComboBox2.AddItem "16"
ComboBox2.AddItem "17"
ComboBox2.AddItem "18"
ComboBox2.AddItem "19"
ComboBox2.AddItem "20"
ComboBox2.AddItem "22"
ComboBox2.AddItem "24"
ComboBox2.AddItem "26"
ComboBox2.AddItem "28"
ComboBox2.AddItem "32"
ComboBox2.AddItem "36"
ComboBox2.AddItem "48"
ComboBox2.AddItem "72"
ComboBox2.Style = fmStyleDropDownList
'ComboBox2.BoundColumn = 0
'ComboBox2.ListIndex = 0
AktFontgr = ActiveDocument.Styles("Standard").Font.Size
On Error GoTo Test
ComboBox2.Value = AktFontgr
Test: ComboBox2.Value = 12
End Sub
Attribute VB_Name = "UserForm3"
Attribute VB_Base = "0{5EC05AC3-3650-454E-9688-2BD7CE1BC86E}{53376F85-2D37-457A-A92D-15972E6EA4DD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Abbrechen_Click()
Unload Me
End Sub

Private Sub F_Nummer_Change()
If F_Nummer = "" Then
Exit Sub
End If
If Not IsNumeric(F_Nummer.Value) Then
F_Nummer = ""
MsgBox ("Zahl eingeben!")
Exit Sub
Else
Exit Sub
End If
End Sub
Private Sub Ok_1_Click()
iLfdNr = Int(F_Nummer) - 1
Unload Me
End Sub
Attribute VB_Name = "UserForm4"
Attribute VB_Base = "0{32C96344-27B1-4A66-92F8-CB2C00F5E3A1}{144351B6-A9BB-4440-A81B-BD006AB1C16B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
i_start = Int(S_Nummer)
Unload Me
End Sub

Private Sub CommandButton2_Click()
Unload Me
Exit Sub
End Sub

Private Sub S_Nummer_Change()
If S_Nummer = "" Then
Exit Sub
End If
If Not IsNumeric(S_Nummer.Value) Then
S_Nummer = ""
MsgBox ("Zahl eingeben!")
Exit Sub
Else
i_start = S_Nummer
Exit Sub
End If
End Sub


Attribute VB_Name = "UserForm5"
Attribute VB_Base = "0{DB719868-FC41-41C2-BB54-230F29612717}{A50A84FA-6C98-4D5C-9853-8801075BB484}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Abbrechen_Click()
Abbruch = True
Unload Me
End Sub

Private Sub F_Nummer_Change()
If F_Nummer = "" Then
Exit Sub
End If
If Not IsNumeric(F_Nummer.Value) Then
F_Nummer = ""
MsgBox ("Zahl eingeben!")
Exit Sub
Else
Exit Sub
End If
End Sub


Private Sub Ok_1_Click()
Abbruch = False
aktuelle_Seite = Int(F_Nummer)
Unload Me
End Sub

Attribute VB_Name = "UserForm6"
Attribute VB_Base = "0{E222299B-A78F-4916-907A-619FF17E5D0D}{7096A8E7-6FC9-47A0-A4F3-A4ABBD5B96D6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
Seitenzahlen_korrigieren
Unload Me
End Sub

Private Sub CommandButton2_Click()
UserForm3.Show
Unload Me
End Sub
Attribute VB_Name = "Zeilennummern"
Sub Zeilennummern5Einfuegen(control As IRibbonControl)
Dim rng As Range
Dim p As Paragraph
    Selection.Style = ActiveDocument.Styles("Listenfortsetzung")

For Each p In Selection.Paragraphs
    Set rng = ActiveDocument.Range(p.Range.Start, p.Range.End)
    k = k + 1
    If k Mod 5 = 0 Then
        rng.InsertBefore (k & vbTab)
        rng.Style = ActiveDocument.Styles("Liste")
    End If
Next
End Sub
Sub ZeilennummernJedeEinfuegen(control As IRibbonControl)
Dim rng As Range
Dim p As Paragraph
    Selection.Style = ActiveDocument.Styles("Liste")
For Each p In Selection.Paragraphs
    Set rng = ActiveDocument.Range(p.Range.Start, p.Range.End)
    k = k + 1
    rng.InsertBefore (k & vbTab)
Next
End Sub

' InQuest injected base64 decoded content
' +Qz)

INQUEST-PP=macro
