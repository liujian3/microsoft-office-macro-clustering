Attribute VB_Name = "Module2"
Sub CheckForIssues()

Dim LastRow As Long
Dim LastCol As Long
LastRow = ActiveSheet.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
LastCol = ActiveSheet.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns).Column
'MsgBox (Str$(FirstRow) + " = 1st row and " + Str$(LastRow) + " - last row")
Dim Found As Boolean
Dim founddel As Boolean

Found = False
founddel = False
foundbra = False

tmplbr = False
tmpcom = False
tmpbra = False

Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False

FixErrors

For i = 2 To LastRow
 tmplbr = False
 tmpcom = False
 tmpbra = False
 If Application.CountA(Cells(i, 1).EntireRow) = 0 Then GoTo nxt
 For j = 1 To LastCol
  If InStrB(1, Cells(i, j), Chr(10), vbBinaryCompare) Then 'LINE BREAK - preserve
    Cells(i, j) = Replace(Cells(i, j), Chr(10), "xxlnbrliox", 1, , vbBinaryCompare)
  End If
  Cells(i, j) = WorksheetFunction.Clean(Trim(Cells(i, j)))
  If InStr(1, Cells(i, j), "xxlnbrliox", vbBinaryCompare) Then 'LINE BREAK - restore
    Cells(i, j) = Replace(Cells(i, j), "xxlnbrliox", Chr(10), 1, , vbBinaryCompare)
  End If
  If IsEmpty(Cells(i, 1)) = True And IsEmpty(Cells(i, 2)) = True And IsEmpty(Cells(i, 3)) = True Then
   Cells(i, j).EntireRow.Interior.ColorIndex = 0
  End If
  If IsEmpty(Cells(i, j)) = False Then
   If InStr(1, Cells(i, j), ",", vbTextCompare) And j < 4 Then ', ; / \ - light-yellow alert
    Cells(i, j).EntireRow.Interior.ColorIndex = 36
    founddel = True
    tmpcom = True
   End If
   If InStr(1, Cells(i, j), ";", vbTextCompare) And j < 4 Then
    Cells(i, j).EntireRow.Interior.ColorIndex = 36
    founddel = True
    tmpcom = True
   End If
   If InStr(1, Cells(i, j), "/", vbTextCompare) And j < 4 Then
    Cells(i, j).EntireRow.Interior.ColorIndex = 36
    founddel = True
    tmpcom = True
   End If
   If InStr(1, Cells(i, j), "\", vbTextCompare) And j < 4 Then
    Cells(i, j).EntireRow.Interior.ColorIndex = 36
    founddel = True
    tmpcom = True
   End If
   
   If InStr(1, Cells(i, j), "[", vbTextCompare) And j < 4 Then '[ ] ( ) - orange alert
    Cells(i, j).EntireRow.Interior.ColorIndex = 45
    foundbra = True
    tmpbra = True
    GoTo lnb
   End If
   If InStr(1, Cells(i, j), "]", vbTextCompare) And j < 4 Then
    Cells(i, j).EntireRow.Interior.ColorIndex = 45
    foundbra = True
    tmpbra = True
    GoTo lnb
   End If
   If InStr(1, Cells(i, j), "(", vbTextCompare) And j < 4 Then
    Cells(i, j).EntireRow.Interior.ColorIndex = 45
    foundbra = True
    tmpbra = True
    GoTo lnb
   End If
   If InStr(1, Cells(i, j), ")", vbTextCompare) And j < 4 Then
    Cells(i, j).EntireRow.Interior.ColorIndex = 45
    foundbra = True
    tmpbra = True
    GoTo lnb
   End If
   
lnb:
   If InStrB(1, Cells(i, j), Chr(10), vbBinaryCompare) Then 'LINE BREAK - red alert
    Cells(i, j).EntireRow.Interior.ColorIndex = 3
    tmplbr = True
    Found = True
    GoTo nxt
   End If
   
  End If
   
 Next j
 If tmpcom = False And tmpbra = False And tmplbr = False Then
   Cells(i, j).EntireRow.Interior.ColorIndex = 0
 End If
nxt:
Next i

Application.Calculation = xlCalculationAutomatic
Application.ScreenUpdating = True

Dim CRstr As String
Dim Brstr As String
Dim CSSBstr As String

CRstr = "Please check the rows highlighted in red for carriage returns. These entries will cause LTB glossary converter to halt, and no rule will be generated."
Brstr = "Please check the rows highlighted in orange for round and square brackets. These entries will not cause LTB glossary converter to halt, but may contain unnecessary comments that will prevent the terms from matching."
CSSBstr = "Please check the rows highlighted in light-yellow for commas, semicolons, and slashes. These entries will not cause LTB glossary converter to halt, but may generate conditions with several target terms that will never match."


If Found = True And founddel = False And (foundbra = False) Then
MsgBox CRstr
End If
If founddel = True And Found = False And foundbra = False Then
MsgBox CSSBstr
End If
If founddel = False And Found = False And foundbra = True Then
MsgBox Brstr
End If
If founddel = True And Found = False And foundbra = True Then
MsgBox CSSBstr + Chr(10) + Chr(10) + Brstr
End If
If founddel = False And Found = True And foundbra = True Then
MsgBox CRstr + Chr(10) + Chr(10) + Brstr
End If
If founddel = True And Found = True And foundbra = False Then
MsgBox CRstr + Chr(10) + Chr(10) + CSSBstr
End If
If founddel = True And Found = True And foundbra = True Then
MsgBox CRstr + Chr(10) + Chr(10) + CSSBstr + Chr(10) + Chr(10) + Brstr
End If


End Sub

Sub FilterCaMeL()

Dim col As Integer
col = ActiveCell.Column
Dim LRow As Long
LRow = ActiveSheet.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
Dim allcaps As Boolean

For i = 2 To LRow
 allcaps = False
 If IsCamelCheck(Cells(i, 1), allcaps) = True Then
   'Range(Cells(i, 1), Cells(i, 1)).Rows.Hidden = True
  Cells(i, 1).Interior.ColorIndex = 6
 End If
 If allcaps = True Then
   Cells(i, 1).Interior.ColorIndex = 34
 End If
 allcaps = False
 If IsCamelCheck(Cells(i, 2), allcaps) = True Then
  Cells(i, 2).Interior.ColorIndex = 6
 End If
 If allcaps = True Then
   Cells(i, 2).Interior.ColorIndex = 34
 End If
 allcaps = False
 If IsCamelCheck(Cells(i, 3), allcaps) = True Then
  Cells(i, 3).Interior.ColorIndex = 6
 End If
 If allcaps = True Then
   Cells(i, 3).Interior.ColorIndex = 34
 End If
Next i
End Sub

Function IsCamelCheck(ByVal str As String, ByRef allcaps As Boolean)

Dim words() As String
Dim all_caps As Boolean

' Split the string at the space characters.
words() = Split(str)
ret = False

Dim tempStr As String
For i = 0 To UBound(words)
    ' Eliminate punctuation
    tempStr = RemoveNonLetter(words(i))
    all_caps = False
    If Len(tempStr) = 0 Or IsNumeric(tempStr) Then
        ret = False ' 1244 is not a CaMel
    ElseIf CheckWord(tempStr, all_caps) = True Then
        ret = True ' LinguisticToolBox is a CaMel
    Else
        If IsNumeric(Left(tempStr, 1)) = True Then
           ret = True ' 2me is CaMeL, 2WHERE is also a CaMeL
        Else
           ret = False ' home is not a CaMel
           allcaps = all_caps
        End If
    End If
Next

IsCamelCheck = ret
End Function
Function RemoveNonLetter(str As String) As String
RemoveNonLetter = str
On Error GoTo endd
For i = 33 To 47
 str = Replace(str, ChrW(i), "")
Next i

For j = 58 To 64
 str = Replace(str, ChrW(j), "")
Next j

For h = 91 To 96
 str = Replace(str, ChrW(h), "")
Next h

For g = 123 To 191
 str = Replace(str, ChrW(g), "")
Next g

str = Replace(str, ChrW(247), "") ' Division sign
str = Replace(str, ChrW(732), "") ' Tilde
str = Replace(str, ChrW(894), "") ' Greek Question Mark

For t = 1367 To 1376              ' Armenian punctuation
 str = Replace(str, ChrW(t), "")
Next t

str = Replace(str, ChrW(1370), "") 'Armenian Apostrophe
str = Replace(str, ChrW(1417), "") 'Armenian Full Stop
str = Replace(str, ChrW(1418), "") 'Armenian Hyphen
str = Replace(str, ChrW(1523), "") 'Hebrew Punctuation Geresh
str = Replace(str, ChrW(1524), "") 'Hebrew Punctuation Gershayim

For y = 1642 To 1645               ' Arabic Percent Sign, 1642, Arabic Decimal Separator, Arabic Thousands Separator, Arabic Five Pointed Star
 str = Replace(str, ChrW(y), "")
Next y

str = Replace(str, ChrW(8230), "")  'Horizontal Ellipsis

For d = 8241 To 8286
 str = Replace(str, ChrW(d), "")  'Per Mille Sign, 8241 = Per Ten Thousand Sign...
Next d

For w = 12289 To 12320
 str = Replace(str, ChrW(w), "")  '12289 = Ideographic Comma, 12290= Ideographic Full Stop - 12320
Next w

endd:
On Error GoTo 0
RemoveNonLetter = str
End Function

Function CheckWord(ByVal wrd As String, ByRef allcaps As Boolean)

isCapFirst = False
If Left(wrd, 1) = UCase(Left(wrd, 1)) Then isCapFirst = True
lnth = Len(wrd)
cnt = 0
For i = 1 To lnth
 tmp = Mid(wrd, i, 1)
 If tmp = UCase(tmp) Then
  cnt = cnt + 1
 End If
Next i

If cnt > 0 And isCapFirst = False Then
  CheckWord = True
Else
  If cnt > 1 And isCapFirst = True Then
   If cnt = Len(wrd) Then
      allcaps = True
      CheckWord = False ' Change to True if you need to mark words in ALLCAPS
   Else
      CheckWord = True
   End If
  Else
   CheckWord = False
  End If
End If

End Function

Sub RemoveLineBreaks()

Dim LastRow As Long
Dim LastCol As Long
LastRow = ActiveSheet.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
LastCol = ActiveSheet.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns).Column

For i = 2 To LastRow
 If Application.CountA(Cells(i, 1).EntireRow) = 0 Then GoTo nxti3
 For j = 1 To LastCol
  If InStrB(1, Cells(i, j), Chr(10), vbBinaryCompare) Then 'LINE BREAK - remove!
    Cells(i, j) = Replace(Cells(i, j), Chr(10), " / ", 1, , vbBinaryCompare)
  End If
 Next j
nxti3:
Next i
End Sub
Sub FixErrors()
Dim cnt As Long
Dim LastRow As Long
Dim LastCol As Long
LastRow = ActiveSheet.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
LastCol = ActiveSheet.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns).Column
Dim nrows As Long
Dim ncols As Long
nrows = ActiveSheet.UsedRange.Rows.Count
ncols = ActiveSheet.UsedRange.Columns.Count
If ncols > LastCol Then LastCol = ncols
If nrows > LastRow Then LastRow = nrows

For i = 1 To LastRow
 If Application.CountA(Cells(i, 1).EntireRow) = 0 Then GoTo nxti2
 For j = 1 To LastCol
  If IsError(Cells(i, j)) = True Then
     Cells(i, j) = Trim(Mid(Cells(i, j).Formula, 2))
     cnt = cnt + 1
  End If
 Next j
nxti2:
Next i

End Sub
' START - ACRONYM HANDLING MACRO PART
'4.  Prevent handling of entries where there is an acronym and spelled-out term in both source and target.
Sub SplitAcronyms()
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual

Dim countem As Long, acrCnt As Long
Dim srcOpts As New Collection, tgtOpts As New Collection
Dim s As String
Dim srcCol As Long, tgtCol As Long, LastRow As Long, LastCol As Long, IdxStart As Long, IdxEnd As Long
Dim i As Long, k As Long, d As Long, j As Long, cnt As Long, nrows As Long, ncols As Long, posCol As Long

srcCol = 1 ' THE COLUMN WITH SRC TERMS
tgtCol = 2 ' THE COLUMN WITH TGT TERMS
posCol = 5 ' THE PoS COLUMN ID

LastRow = ActiveSheet.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
LastCol = ActiveSheet.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns).Column

nrows = ActiveSheet.UsedRange.Rows.Count
ncols = ActiveSheet.UsedRange.Columns.Count
If ncols > LastCol Then LastCol = ncols
If nrows > LastRow Then LastRow = nrows

countem = 0
i = 2

Do While i <= nrows

   Set srcOpts = New Collection
   Set tgtOpts = New Collection
   cnt = 0
   IsSrc = SplitAcronym(srcOpts, Trim(Cells(i, srcCol)))
   Istgt = SplitAcronym(tgtOpts, Trim(Cells(i, tgtCol)))
   If IsSrc = True Or Istgt = True Then
     If IsSrc = True And Istgt = True Then
       i = i + 1
     Else
       ActiveSheet.Rows(i).EntireRow.Interior.ColorIndex = 24
       acrCnt = acrCnt + 1
       For j = 1 To srcOpts.Count
         For k = 1 To tgtOpts.Count
           countem = countem + 1
           ActiveSheet.Rows(i + 1).Resize(1).Insert ' added rows
           ActiveSheet.Rows(i + 1).EntireRow.Interior.ColorIndex = 20
           ActiveSheet.Cells(i + 1, srcCol) = srcOpts.Item(j)
           ActiveSheet.Cells(i + 1, tgtCol) = tgtOpts.Item(k)
           For d = 3 To ncols
              ActiveSheet.Cells(i + 1, tgtCol + d - 2) = ActiveSheet.Cells(i, tgtCol + d - 2)
           Next d
              ActiveSheet.Cells(i + 1, posCol) = "proper noun"
           cnt = cnt + 1
         Next k
       Next j
       If cnt > 0 Then
       '  ActiveSheet.Cells(i, srcCol).EntireRow.Delete
         i = i + cnt + 1
         nrows = nrows + cnt
       Else
         i = i + 1
       End If
     End If
   Else
       i = i + 1 ' Need to go to the next row
   End If ' end checking if the src and tgt are both spelled out acronyms
Loop

Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
If countem > 0 Then MsgBox Prompt:="Acronym entries found: " & CStr(acrCnt) & ". Added entries: " & CStr(countem), Buttons:=vbOKOnly
End Sub
' 1.  After the split, make sure that both halves are at least 2 characters long.
'If not, then don't add these to Opts and return False
'2.  After the split, make sure that one of the halves contains ZERO spaces, and that
'the other half contains at least one space. If not, then don't add these to Opts and return False
Function SplitAcronym(ByRef Opts As Collection, ByVal s) As Boolean
Dim sr As String, t As String
SplitAcronym = False
   If Right(s, 1) = ")" Then
     IdxStart = InStr(s, "(")
     If IdxStart > 0 And Len(Replace(s, "(", "")) = Len(s) - 1 Then ' we only have 1 (...)
        ' Get the elements
        sr = Trim(Left(s, IdxStart - 1))
        t = Trim(Mid(s, IdxStart + 1, Len(s) - IdxStart - 1))
        If Len(sr) >= 2 And Len(t) >= 2 And isValidEntry(sr, t) Then ' #1 Jon's remark  And isValidEntry(sr, t)
            If (InStr(sr, " ") < 1 And InStr(t, " ") < 1) Or (InStr(sr, " ") > 0 And InStr(t, " ") > 0) Then ' #2  Jon's remark
                ' Do nothing
            Else
                Opts.Add sr
                Opts.Add t
                SplitAcronym = True
            End If
        End If
     End If
   End If
If SplitAcronym = False Then
 Opts.Add s
End If
End Function

' END - ACRONYM HANDLING MACRO PART
Function isValidEntry(ByVal src As String, ByVal tgt As String) As Boolean
If src = UCase(src) Or tgt = UCase(tgt) Then isValidEntry = True
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
Dim FileNameVal As String
Dim version As String
version = Application.version
If CInt(CDbl(Replace(version, ".0", ""))) < 12 Then
 GoTo ende
End If
If SaveAsUI Then
    FileNameVal = Application.GetSaveAsFilename(, "Excel Macro-Enabled Workbook (*.xlsm), *.xlsm")
    Cancel = True
    If FileNameVal = "False" Then 'User pressed cancel
        Exit Sub
    End If
    Application.EnableEvents = False
        If Right(ThisWorkbook.Name, 5) <> ".xlsm" Then
            ThisWorkbook.SaveAs Filename:=Replace(FileNameVal & ".xlsm", ".xlsm.xlsm", ".xlsm"), FileFormat:=xlOpenXMLWorkbookMacroEnabled
        Else
            ThisWorkbook.SaveAs Filename:=FileNameVal, FileFormat:=xlOpenXMLWorkbookMacroEnabled
        End If
    Application.EnableEvents = True
End If
ende:
End Sub



INQUEST-PP=macro
