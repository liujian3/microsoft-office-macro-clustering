Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "modMA"
Option Explicit
Option Private Module

Public Const REG_KEY_COMPANY_ROOT As String = "Payne Consulting Group"
Public Const REG_KEY_APP_NAME As String = "Metadata Assistant"
Public Const REG_KEY_APP_FULL_PATH As String = REG_KEY_COMPANY_ROOT & "\" & REG_KEY_APP_NAME
Public Const REG_APP_SPECIFIC_CURRENTVERSION As String = "XLSavedOptions"

Public Const gszMENU_ITEM As String = "&Metadata Assistant..."
Public Const gszMENU_ITEMCreatePDF As String = "Create PD&F"

Public Const gszMENU_ITEM_NO_ALT As String = "Metadata Assistant..."

Public Const gszENTRY_POINT As String = "MetadataAssistant"
Public Const gszENTRY_POINTCreatePDF As String = "CreatePDF"
 
Private ProcIsRunning As Boolean

'Callback for customButton onAction
Public Sub Callback(control As IRibbonControl)

    Select Case control.ID
        
        Case "MetadataAssistant1"
            MetadataAssistant
        
        Case "MetadataAssistant2"
            CreatePDF
        
        Case "MetadataAssistant3"
            CreatePDFActivesheet
    
    End Select
    
End Sub

'''Sub Auto_Open()
'''
'''    Dim ctlFileMenu As Office.CommandBarControl
'''    Dim ctlMenuItem As Office.CommandBarControl
'''    Dim ctlMenuItemPDF As Office.CommandBarControl
'''
'''    Dim oCommandBar As Office.CommandBar
'''    Dim hWnd As Long
'''    Dim strString As String
'''    Dim strTemp As String
'''
'''    Dim lngPosition As Long
'''    Dim lngRowIndex As Long
'''    Dim lngLeft As Long
'''    Dim lngTop As Long
'''    Dim lngVisible As Long
'''    Dim strPriorValue As String
'''
'''    On Error Resume Next
'''    If Not Application.Visible Then Exit Sub
'''
'''    ''' Worksheet Menu Bar - Tools Menu
'''    Set ctlFileMenu = Application.CommandBars(1).FindControl(, 30002)
'''
'''    ''' Always try to delete any old menu that may have been left behind by a crash.
'''    ctlFileMenu.Controls(gszMENU_ITEM).Delete
'''    ctlFileMenu.Controls(gszMENU_ITEMCreatePDF).Delete
'''    Err.Clear
'''
'''    Set ctlMenuItem = ctlFileMenu.Controls.Add(Type:=msoControlButton, Before:=8)
'''    ctlMenuItem.Caption = gszMENU_ITEM
'''    ctlMenuItem.OnAction = ThisWorkbook.Name & "!" & gszENTRY_POINT
'''
'''
'''    Set ctlMenuItemPDF = ctlFileMenu.Controls.Add(Type:=msoControlButton, Before:=9)
'''    ctlMenuItemPDF.Caption = gszMENU_ITEMCreatePDF
'''    ctlMenuItemPDF.OnAction = ThisWorkbook.Name & "!" & gszENTRY_POINTCreatePDF
'''
'''    Set oCommandBar = Application.CommandBars("Metadata Assistant")
'''
'''    If Not oCommandBar Is Nothing Then
'''
'''        strPriorValue = ProjectGetCurrentUserSetting(, "Visible")
'''
'''        If Len(strPriorValue) > 0 Then
'''
'''            oCommandBar.Visible = CBool(strPriorValue)
'''
'''        Else
'''
'''            lngVisible = ThisWorkbook.CustomDocumentProperties("CommandBarVisible").Value
'''
'''            oCommandBar.Visible = CBool(lngVisible)
'''
'''        End If
'''
'''
'''        If oCommandBar.Visible Then
'''
'''            lngPosition = -1
'''            lngRowIndex = -1
'''            lngTop = -1
'''            lngLeft = -1
'''
'''            lngPosition = ThisWorkbook.CustomDocumentProperties("CommandBarPosition").Value
'''            lngRowIndex = ThisWorkbook.CustomDocumentProperties("CommandBarRowIndex").Value
'''            lngTop = ThisWorkbook.CustomDocumentProperties("CommandBarTop").Value
'''            lngLeft = ThisWorkbook.CustomDocumentProperties("CommandBarLeft").Value
'''
'''            If lngPosition <> -1 Then
'''                oCommandBar.Position = lngPosition
'''
'''                If oCommandBar.Position = msoBarFloating Then
'''
'''                    If lngLeft <> -1 Then
'''                        oCommandBar.Left = lngLeft
'''                    End If
'''                    If lngTop <> -1 Then
'''                        oCommandBar.Top = lngTop
'''                    End If
'''                Else
'''                    If lngRowIndex <> -1 Then
'''                        oCommandBar.RowIndex = lngRowIndex
'''                    End If
'''                    If lngLeft <> -1 Then
'''                        oCommandBar.Left = lngLeft
'''                    End If
'''
'''                End If
'''            Else
'''                oCommandBar.Position = CLng(ProjectGetCurrentUserSetting(, "Position"))
'''
'''                If oCommandBar.Position = msoBarFloating Then
'''                    oCommandBar.Left = ProjectGetCurrentUserSetting(, "Left")
'''                    oCommandBar.Top = ProjectGetCurrentUserSetting(, "Top")
'''                Else
'''
'''                    strTemp = ProjectGetCurrentUserSetting(, "RowIndex")
'''
'''                    If Len(strTemp) > 0 Then
'''
'''                        oCommandBar.RowIndex = CLng(strTemp)
'''
'''                        If oCommandBar.Position = msoBarTop Then
'''                            strTemp = ""
'''                            strTemp = ProjectGetCurrentUserSetting(, "Left")
'''                            If Len(strTemp) > 0 Then
'''                                oCommandBar.Left = CLng(strTemp)
'''                            End If
'''                        End If
'''
'''                    End If
'''
'''                End If
'''
'''            End If
'''
'''        End If
'''
'''    End If
'''
'''    Err.Clear
'''
'''    strString = ThisWorkbook.CustomDocumentProperties("AddIconToMenuItem").Value
'''
'''    If strString = "1" Then
'''
'''        ThisWorkbook.Worksheets(1).Shapes(1).Copy
'''
'''        If Err.Number = 0 Then
'''            ctlMenuItem.PasteFace
'''        End If
'''
'''        Application.CutCopyMode = False
'''
'''    End If
'''
'''End Sub
'''
'''
'''Sub Auto_Close()
'''
'''    Dim ctlFileMenu As Office.CommandBarControl
'''    Dim oCommandBar As Office.CommandBar
'''
'''    On Error Resume Next
'''    ''' Worksheet Menu Bar - Tools Menu
'''    If Not Application.Visible Then Exit Sub
'''
'''
'''    Set ctlFileMenu = Application.CommandBars(1).FindControl(, 30002)
'''    ctlFileMenu.Controls(gszMENU_ITEM).Delete
'''    ctlFileMenu.Controls(gszMENU_ITEMCreatePDF).Delete
'''
'''
'''    If Not oCommandBar Is Nothing Then
'''        ProjectSaveCurrentUserSetting , "Visible", CLng(oCommandBar.Visible)
'''        If oCommandBar.Visible Then
'''            ProjectSaveCurrentUserSetting , "Position", CLng(oCommandBar.Position)
'''            If oCommandBar.Position = msoBarFloating Then
'''                ProjectSaveCurrentUserSetting , "Left", CLng(oCommandBar.Left)
'''                ProjectSaveCurrentUserSetting , "Top", CLng(oCommandBar.Top)
'''            End If
'''        End If
'''    End If
'''
'''    Set oCommandBar = Application.CommandBars("Metadata Assistant")
'''    If Not oCommandBar Is Nothing Then
'''        ProjectSaveCurrentUserSetting , "Visible", CLng(oCommandBar.Visible)
'''        If oCommandBar.Visible Then
'''
'''            ProjectSaveCurrentUserSetting , "Position", CLng(oCommandBar.Position)
'''
'''            If oCommandBar.Position = msoBarFloating Then
'''                ProjectSaveCurrentUserSetting , "Left", CLng(oCommandBar.Left)
'''                ProjectSaveCurrentUserSetting , "Top", CLng(oCommandBar.Top)
'''            Else
'''
'''                If oCommandBar.Position = msoBarTop Then
'''                    ProjectSaveCurrentUserSetting , "RowIndex", CLng(oCommandBar.RowIndex)
'''                    ProjectSaveCurrentUserSetting , "Left", CLng(oCommandBar.Left)
'''                End If
'''            End If
'''        End If
'''        oCommandBar.Delete
'''    End If
'''
'''End Sub

Public Sub MetadataAssistant()
    
    Dim oMetadata As Object  '''MetadataAssistantXL.ExcelStandAlone
    Set oMetadata = CreateObject("MetadataAssistantXL.ExcelStandAlone")
    
    oMetadata.ShowMetaDataAssistant True
    
    Set oMetadata = Nothing
    
End Sub

Public Sub ShowMetaDataAssistant(ByVal strFileOrFolder As String, ByVal strUIChoice As String, ByVal strResult As String, ByVal strResultFile As String)
    Dim oMetadata As Object  '''MetadataAssistantXL.ExcelStandAlone
        
    If ProcIsRunning Then Exit Sub
    ProcIsRunning = True
    
    On Error GoTo ErrorHandler:
    
    Set oMetadata = CreateObject("MetadataAssistantXL.ExcelStandAlone")
        
    oMetadata.ShowMetaDataAssistant True, strFileOrFolder, strUIChoice, strResult, strResultFile

    Set oMetadata = Nothing
    ProcIsRunning = False

    Exit Sub
ErrorHandler:
    ProcIsRunning = False
    MsgBox "An error occurred. : " & Err.Description & vbCr & "Error Number: " & Err.Number, vbCritical, "ShowMetaDataAssistant"

End Sub



Function ProjectSaveCurrentUserSetting(Optional ByVal strSection As String = REG_APP_SPECIFIC_CURRENTVERSION, Optional ByVal strKey As String = "", Optional ByVal strSetting As String = "") As Boolean
    
    On Error Resume Next
    
    VBA.SaveSetting appname:=REG_KEY_APP_FULL_PATH, Section:=strSection, Key:=strKey, setting:=strSetting
    
    If Err.Number = 0 Then
        ProjectSaveCurrentUserSetting = True
    End If

End Function


Function ProjectGetCurrentUserSetting(Optional ByVal strSection As String = REG_APP_SPECIFIC_CURRENTVERSION, Optional ByVal strKey As String = "", Optional ByVal strOptionalDefault As String, Optional ByVal blnUseDefaultIfBlank As Boolean, Optional ByVal blnUseLocalMachineIfNotFound As Boolean, Optional strLocalMachineSection As String = REG_APP_SPECIFIC_CURRENTVERSION) As String

    ''' Wrapper
    On Error Resume Next
    
    ProjectGetCurrentUserSetting = GetSetting(appname:=REG_KEY_APP_FULL_PATH, Section:=strSection, Key:=strKey)     ''', Default:=strOptionalDefault)
    
    Exit Function

End Function

Public Sub ShowEmailIntegration()

    Dim oMetadata As Object  '''MetadataAssistantXL.ExcelStandAlone
    Dim oProcess As Object
    
    If ProcIsRunning Then Exit Sub
    ProcIsRunning = True
    
    On Error GoTo ErrorHandler:
    
    Set oMetadata = CreateObject("MetadataAssistantXL.ExcelStandAlone")
    Set oProcess = CreateObject("MetadataAssistantXL.Process")

    Set oProcess.OfficeApp = Application

    oMetadata.InProcessEmailIntegration
    
    Set oMetadata = Nothing
    Set oProcess = Nothing
    
    ProcIsRunning = False

    Exit Sub
ErrorHandler:
    ProcIsRunning = False
    MsgBox "An error occurred. : " & Err.Description & vbCr & "Error Number: " & Err.Number, vbCritical, "InProcessEmailIntegration"
    
End Sub

Public Sub CreatePDF()

    Dim oProcess As Object '''MetadataAssistantXL.Process
    Dim lngPrior As Long
    
    On Error GoTo ErrorHandler:
    
    Set oProcess = CreateObject("MetadataAssistantXL.Process")   '''New MetadataAssistantXL.Process
    
    Set oProcess.OfficeApp = Application
    
    lngPrior = Application.EnableCancelKey
    Application.EnableCancelKey = xlDisabled
    oProcess.ConvertDocumentDirectlyToPDF ""
    Application.EnableCancelKey = lngPrior
    
    Set oProcess = Nothing
    
    Exit Sub
    
ErrorHandler:
    Application.EnableCancelKey = lngPrior
    ProcIsRunning = False
    MsgBox "An error occurred. : " & Err.Description & vbCr & "Error Number: " & Err.Number, vbCritical, "CreatePDF"
    
End Sub

Public Sub CreatePDFActivesheet()

    Dim oProcess As Object '''MetadataAssistantXL.Process
    Dim lngPrior As Long
    
    On Error GoTo ErrorHandler:
    
    Set oProcess = CreateObject("MetadataAssistantXL.Process")   '''New MetadataAssistantXL.Process
    
    Set oProcess.OfficeApp = Application
    
    lngPrior = Application.EnableCancelKey
    Application.EnableCancelKey = xlDisabled
    oProcess.ConvertActiveSheetDirectlyToPDF
    Application.EnableCancelKey = lngPrior
    
    Set oProcess = Nothing
    
    Exit Sub
    
ErrorHandler:
    Application.EnableCancelKey = lngPrior
    ProcIsRunning = False
    MsgBox "An error occurred. : " & Err.Description & vbCr & "Error Number: " & Err.Number, vbCritical, "CreatePDFActivesheet"
    
End Sub


' InQuest injected base64 decoded content
' y(^z

INQUEST-PP=macro
