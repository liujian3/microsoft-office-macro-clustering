Attribute VB_Name = "AMainModule"
Option Explicit
Public vPoints As Single
Public hPoints As Single
Public PromptResponse As Long
Dim ww As Range
Dim ch As Range
Dim showHold As Boolean
Dim wordCount As Long
Dim stylenoSw As Boolean
Dim ShowAllStylesSw As Boolean
Dim styleEditingSW As Boolean
Dim styleNo As Long
Dim StyleName() As String
Dim StylePrefix() As String
Dim StyleCount() As Long
Dim StyleText() As String
Dim StyleBase() As String
Dim currentList As Long
Dim clearCancel As Boolean
Dim abortDelete As Boolean
Dim cancelOutlineSw As Boolean
Dim allToggle As Boolean
Dim ShowStyleSW As Long

Sub Go_UTILITIES()
  Call GiveScreenPoints(hPoints, vPoints)
  With FirstForm
    .StartUpPosition = 0
    .Top = 0
    .Left = hPoints - .Width - 6
    .Show
  End With
End Sub

Sub OpenStyleUtilities(n As Long)
  Options.Pagination = False
  styleEditingSW = False
  Call GiveScreenPoints(hPoints, vPoints)
  With TrackChangeForm
    .StartUpPosition = 0
    .Top = 0
    .Left = hPoints - .Width - 6
 '   .Height = 148  '515
    .BlankParasCheckBox.Value = False
    '.MoreButton.Caption = "Expand"
    .StyleListBox1.ListIndex = -1
    .StyleListBox1.Clear
    .StyleListBox2.Clear
  '  .ShowUse.Caption = "Style" & " use" & vbCr & "& removal"
    .Show
  End With

  With ClearForm
    .StartUpPosition = 0
    .Top = 180
    .Left = hPoints - 140
  End With
'   TrackChangeForm.ShowStylesButton.Caption = "XX"
 '  TrackChangeForm.IncludeCharsCheckbox.Enabled = True
 '  TrackChangeForm.IncludeCharsCheckbox.Value = False
  stylenoSw = False
  Toggle_ShowAllStyles (2)
'  Toggle_Styles (1)
'  ShowAllStylesSw = False
 
  show_Settings (1)
 ' Get_ShortTitles
 ' TrackChangeForm.Show ' ######################################
End Sub
Sub show_Settings(n As Long)
  With TrackChangeForm
  '  .TCWhileEditing.Value = ActiveDocument.TrackRevisions
  '  .HighlightOnScreen.Value = ActiveDocument.ShowRevisions
  End With
End Sub
Sub toggle_view(n As Integer)
  If ActiveWindow.View.SplitSpecial = wdPaneNone Then
     If ActiveWindow.ActivePane.View.Type = wdNormalView Then
        ActiveWindow.ActivePane.View.Type = wdPrintView
     Else
       ActiveWindow.ActivePane.View.Type = wdNormalView
     End If
  Else
     If ActiveWindow.View.Type = wdNormalView Then
       ActiveWindow.View.Type = wdPrintView
     Else
       ActiveWindow.View.Type = wdNormalView
     End If
  End If
End Sub

Sub Toggle_ShowAllStyles(n As Long) ' n=0 Custom, 1=All styles, 2 =in use
  ShowStyleSW = n
  With TrackChangeForm
'    If .ShowStylesButton.Caption = "Show all available styles" Then
'       ShowAllStylesSw = True
'       .ShowStylesButton.Caption = "Show only styles used"
'       TrackChangeForm.IncludeCharsCheckbox.Enabled = True
'     Else
'       ShowAllStylesSw = False
'        .ShowStylesButton.Caption = "Show all available styles"
'        TrackChangeForm.IncludeCharsCheckbox.Enabled = True
'    End If
    .StyleListBox1.Clear
    .StyleListBox2.Clear
    DoEvents
    Get_Styles
    sort_Styles
    .StyleListBox1.Height = 172  '208.3
    .StyleListBox2.Height = 172  '208.3
     If ShowStyleSW = 0 Then .CountLabel = str(styleNo) & " Custom styles"
     If ShowStyleSW = 1 Then .CountLabel = str(styleNo) & " Available styles"
     If ShowStyleSW = 2 Then .CountLabel = str(styleNo) & " Styles in-use"
   '  If .ShowStylesButton.Caption = "Show all available styles" Then
   '    .CountLabel = str(styleNo) & " paragraph styles in use"
   '  Else
   '    .CountLabel = str(styleNo) & " styles available"
   '  End If
  '  .StyleListBox1.Clear
  '  .StyleListBox2.Clear
    .StyleListBox1.List() = StylePrefix
    .StyleListBox2.List() = StylePrefix
    .StyleListBox1.ListIndex = -1
    .StyleListBox2.ListIndex = -1

  End With
End Sub
Private Sub sort_Styles()
Dim j As Long
Dim k As Long
Dim m As Long
Dim s() As String
Dim strng As String
  If styleNo < 0 Then
    MsgBox "No styles"
    Exit Sub
  End If
  ReDim s(styleNo)
  For j = 0 To styleNo
    s(j) = UCase(StyleName(j))
  Next j
  TrackChangeForm.Mercury.Visible = True
  TrackChangeForm.Mercury.Caption = "Sorting"
  For j = 0 To styleNo - 1
  
   TrackChangeForm.Mercury.Width = j / styleNo * TrackChangeForm.Thermometer.Width
   DoEvents
 '   StyleUsage.Mercury.Visible = True
    For k = j + 1 To styleNo
      If s(j) > s(k) Then
        strng = s(j)
        s(j) = s(k)
        s(k) = strng
        strng = StyleName(j)
        StyleName(j) = StyleName(k)
        StyleName(k) = strng
        strng = StylePrefix(j)
        StylePrefix(j) = StylePrefix(k)
        StylePrefix(k) = strng
        strng = StyleBase(j)
        StyleBase(j) = StyleBase(k)
        StyleBase(k) = strng
        strng = StyleText(j)
        StyleText(j) = StyleText(k)
        StyleText(k) = strng
        m = StyleCount(j)
        StyleCount(j) = StyleCount(k)
        StyleCount(k) = m
      End If
    Next k
  Next j
  ReDim s(0)
  TrackChangeForm.Mercury.Width = 0
End Sub

Sub Toggle_Styles(n As Integer)
  stylenoSw = Not stylenoSw
  With TrackChangeForm
    Get_Styles
    sort_Styles
    .StyleListBox1.List() = StylePrefix
    .StyleListBox2.List() = StylePrefix
   ' .StyleListBox2.ListIndex = -1
  End With
End Sub

Sub ALTQ_key() ' Hot key ALT/Q jumps here. Cannot use hot_Key1 as is is used by button
  hot_Key1 (1)
End Sub
Sub ALTE_key()
  hot_Key2 (1)
End Sub
Sub ALTT_key()
Dim ss As String
  If TrackChangeForm.ALTTtextbox.Text = "" Then
    MsgBox "No style loaded for ALT/T hotkey"
    Exit Sub
  End If
  ss = TrackChangeForm.ALTTtextbox.Text
  Call Hot_Key(Right(ss, Len(ss) - 3), ss)
End Sub
Sub ALTR_key()
Dim ss As String
  If TrackChangeForm.ALTRTextbox.Text = "" Then
    MsgBox "No style loaded for ALT/R hotkey"
    Exit Sub
  End If
  ss = TrackChangeForm.ALTRTextbox.Text
  Call Hot_Key(Right(ss, Len(ss) - 3), ss)
End Sub
Sub ALTY_key()
Dim ss As String
  If TrackChangeForm.ALTYTextbox.Text = "" Then
    MsgBox "No style loaded for ALT/Y hotkey"
    Exit Sub
  End If
  ss = TrackChangeForm.ALTYTextbox.Text
  Call Hot_Key(Right(ss, Len(ss) - 3), ss)
End Sub
Sub ALTU_key()
Dim ss As String
  If TrackChangeForm.ALTUTextbox.Text = "" Then
    MsgBox "No style loaded for ALT/U hotkey"
    Exit Sub
  End If
  ss = TrackChangeForm.ALTUTextbox.Text
  Call Hot_Key(Right(ss, Len(ss) - 3), ss)
End Sub

Sub hot_Key1(n As Long)
Dim sn As Long
  sn = TrackChangeForm.StyleListBox1.ListIndex
  If sn < 0 Then
    hot_message (sn)
    Exit Sub
  End If
  Call Hot_Key(StyleName(sn), StylePrefix(sn))
End Sub

Sub find_style1(n As Long) ' from find button 1
Dim sn As Long
  sn = TrackChangeForm.StyleListBox1.ListIndex
  find_Style (sn)
End Sub
Sub hot_message(sn As Long)
  If sn < 0 Then
    If Not TrackChangeForm.Visible Then
      OpenStyleUtilities (1)
      Toggle_Styles (1)
    End If
    MsgBox "Select a style and repeat hot key"
  End If
End Sub
Sub hot_Key2(n As Long)
Dim sn As Long
  sn = TrackChangeForm.StyleListBox2.ListIndex
  If sn < 0 Then
    hot_message (sn)
    Exit Sub
  End If
  Call Hot_Key(StyleName(sn), StylePrefix(sn))
End Sub
Sub find_style2(n As Integer)
Dim sn As Long
  sn = TrackChangeForm.StyleListBox2.ListIndex
  find_Style (sn)
End Sub
Sub Hot_Key(sty As String, stPrefix As String) ' change styles to StyleName(sn)
Dim rrh As Range
Dim aPara 'As Range
Dim stNew As Style
Dim nextPara  'As Paragraph
Dim charSW As Boolean
Dim pCount As Long
Dim iP As Long
Dim nulPara As Boolean
Dim startRange As Range
'  If sn < 0 Then Exit Sub ' no style selected
'  sty = StyleName(sn)
  If Left(stPrefix, 3) = "(C)" Then
    charSW = True
  Else
    charSW = False
  End If
  Set startRange = Selection.Range
  pCount = Selection.Range.Paragraphs.Count
  Set nextPara = Selection.Range.Paragraphs(pCount)
  If pCount = 1 And Trim(Selection.Range.Paragraphs(1).Range.Text) = vbCr Then '  "" Then
    nulPara = True
  Else
    nulPara = False
  End If
  nextPara.Range.EndOf Unit:=wdParagraph, Extend:=wdMove
  
  On Error GoTo herr
  Set stNew = ActiveDocument.Styles(sty)
  On Error GoTo 0
  Set rrh = Selection.Range
  If charSW Then ' character style
 '   rrh.Start = rrh.Words(1).Start
 '   rrh.End = rrh.Words(rrh.Words.Count).End
    If Right(rrh, 1) = " " Then rrh.MoveEnd Unit:=wdCharacter, Count:=-1
    rrh.Select
    rrh.Style = stNew
    Set startRange = rrh
  Else
    On Error Resume Next
    For Each aPara In rrh.Paragraphs
      aPara.Style = stNew
      If TrackChangeForm.ManualFontCheckbox.Value Then
        aPara.Range.Font.Reset
      End If
    Next aPara
    On Error GoTo 0
  End If
  If TrackChangeForm.BlankParasCheckBox.Value Then ' delete blank paragraphs
    pCount = rrh.Paragraphs.Count
    iP = 1
    Do While iP <= pCount
      If rrh.Paragraphs(iP).Range.Text = vbCr Then
        rrh.Paragraphs(iP).Range.Delete
        iP = iP - 1
        pCount = pCount - 1
      End If
      iP = iP + 1
    Loop
  End If

  If charSW Then  'nulPara Or charSW Then
    startRange.Select
  Else
    nextPara.Range.Select
    Selection.EndOf Unit:=wdParagraph
    Selection.Paragraphs(1).Range.Select
    CentreOnScreen (False)
  End If
  
  Exit Sub
herr:
  On Error GoTo 0
  MsgBox sty & " has a faulty definition"
End Sub

Sub next_Paragraph(forward As Boolean)
  If forward Then
    Selection.Range.Paragraphs(Selection.Range.Paragraphs.Count).Range.Select
    Selection.MoveRight Unit:=wdCharacter, Count:=1, Extend:=wdMove
  Else
    Selection.Range.Paragraphs(1).Range.Select
    Selection.MoveRight Unit:=wdCharacter, Count:=-2, Extend:=wdMove
  End If
  Selection.Paragraphs(1).Range.Select
End Sub
Sub CentreOnScreen(centre As Boolean)
  If centre Then ActiveWindow.ActivePane.LargeScroll
  Application.ActiveWindow.ScrollIntoView Selection.Range
End Sub

Sub find_Style(sn As Long)
Dim stylefind As String
Dim testr As Boolean
Dim nStory As Long
Dim maxStory As Long
Dim n As Long
Dim xrange As Range
Dim stType(20) As Long
Dim isTOC As Boolean
  If sn < 0 Then
    MsgBox "No style selected"
    Exit Sub ' no style selected
  End If
  maxStory = 0
    For Each xrange In ActiveDocument.StoryRanges
      maxStory = maxStory + 1
      stType(maxStory) = xrange.StoryType
    Next xrange
  
  stylefind = StyleName(sn)
  If Left(stylefind, 1) = "(" Then stylefind = Mid(stylefind, 4)
  'maxStory = ActiveDocument.StoryRanges.Count ' is actual number of stories
  n = 0
  Do
    n = n + 1
  Loop Until (stType(n) = Selection.StoryType) Or n > maxStory
  If n > maxStory Then
    MsgBox "Error in finding storey"
    Exit Sub
  End If
  
  If Selection.Information(wdWithInTable) Then
     Set xrange = Selection.Range
     xrange.Start = xrange.End
     xrange.Start = xrange.End + 1
   xrange.Select
  Else
    Selection.StartOf Unit:=wdWord, Extend:=wdExtend ' if selection is in TOC this will select all of TOC
    isTOC = False
    If Selection.Fields.Count > 0 Then
      If Selection.Fields(1).Type = wdFieldTOC Then isTOC = True ' selection is in TOC field. Only works if all of TOC selected
    End If
    If isTOC Then
        Selection.MoveDown
        Set xrange = Selection.Range
        xrange.EndOf Unit:=wdStory, Extend:=wdExtend
    Else
      Set xrange = Selection.Range
      xrange.EndOf Unit:=wdCharacter, Extend:=wdMove
      xrange.Start = xrange.End '+ 1   ????????????????????????
      xrange.EndOf Unit:=wdStory, Extend:=wdExtend
    End If
  End If
  
  Do
    With xrange.Find
      .ClearFormatting
      On Error GoTo ery
      .Style = ActiveDocument.Styles(stylefind)
      On Error GoTo 0
      testr = .Execute(FindText:="", replacewith:="", MatchCase:=False, Wrap:=wdFindStop, _
          MatchWholeWord:=False, forward:=True, Replace:=wdReplaceNone)
      If testr Then
        If xrange.Paragraphs.Count > 1 Then
          'MsgBox "Error in find. multiple paragraphs"
          GoTo erN ' bug in find can give all of remaining document
        End If
        xrange.Select
        CentreOnScreen (True)
        Exit Sub
      End If
erN:
      n = n + 1
      If n > maxStory Then
        MsgBox "Style " & StyleName(sn) & " usage not found forward of current selection" & vbCr & _
               "Note: Headers/footers, endnotes/footnotes and text boxes are not searched."
        Exit Sub
      End If
      On Error GoTo erx
      Set xrange = ActiveDocument.StoryRanges(stType(n)) '.WholeStory
      On Error GoTo 0
      GoTo erl
erx:
      On Error GoTo 0
      MsgBox "No range for story " & n
      GoTo erN
    End With
erl:
 Loop Until n > maxStory
 Exit Sub
ery:
 On Error GoTo 0
 MsgBox stylefind & " has a faulty style definition"
End Sub

Sub ShowStyleCounts(n As Long)  ' from clicking show button
'  If stylenoSw Then
'    stylenoSw = True
'    Toggle_Styles (1)   ' ***************************
'  End If
  TrackChangeForm.IncludeCharsCheckbox.Value = False
  With StyleUsage
    .Width = 263
    .StyleListDisplay.Height = 30
    .Height = 180
    .Show
    .Top = 20
    .StyleListDisplay.Clear
    .StyleListDisplay.AddItem "Please wait"
  End With
  GetCurrentStyles (2)  '(1)
  With StyleUsage
    .StyleListDisplay.Clear
    .StyleListDisplay.ListStyle = 0
    .StyleListDisplay.MultiSelect = 0
    .SelectAllButton.Enabled = False
    .DeleteStylesButton.Enabled = False
    .StyleListDisplay.AddItem "Please wait"
    .AllStyleUsageOption.Value = True ' may trigger double processing
    .Show
'    GetCurrentStyles (True)
    .StyleListDisplay.AddItem "Getting usage"
    .Top = 20
  End With
 TrackChangeForm.Mercury.Width = 0
  
  DisplayCounts
 '     stylenoSw = False
 '  Toggle_Styles (1)
End Sub


Sub LoadCountStyles(YesCount As Boolean, YesCustom As Boolean)
Dim aPara As Paragraph
Dim s As String
Dim aStyle As Style
Dim aStory As Range
Dim k As Long
Dim j As Long
Dim i As Long
Dim L As Long
Dim Ls As Long
Dim astr As String
Dim stCount As Long
  If styleNo < 1 Then
    MsgBox "No styles in style list"
    Exit Sub
  End If
  stCount = 0
  s = ""

  For Each aStory In ActiveDocument.StoryRanges
    With aStory
      k = .Paragraphs.Count
      For j = 1 To k
        s = s & "$" & .Paragraphs(j).Style & "$"
'    s = s & "L" '.Paragraphs(j).Style
      Next j
      StyleUsage.Mercury.Width = j / k * 263
      StyleUsage.Mercury.Caption = "Story" & str(aStory.StoryType)
      StyleUsage.Mercury.Visible = True
    End With
  Next aStory
  For i = 0 To styleNo
    If Left(StyleName(i), 1) = "(" Then
      astr = Mid(StyleName(i), 4)
    Else
      astr = StyleName(i)
    End If
    astr = "$" & astr & "$"
    L = Len(Replace(s, astr, ""))
    L = (Len(s) - L) / Len(astr)
    
    StyleCount(i) = L
  Next i
 
End Sub

Sub load_StyleUsage(dName As String)
Dim i As Long
Dim astr As String
Dim stCount As Long

Call LoadCountStyles(True, True)

Exit Sub

  If styleNo < 1 Then
    MsgBox "No styles in style list"
    Exit Sub
  End If
  stCount = 0
  For i = 0 To styleNo
    stCount = stCount + 1
    If Left(StyleName(i), 1) = "(" Then
      astr = Mid(StyleName(i), 4)
    Else
      astr = StyleName(i)
    End If
    StyleUsage.Mercury.Width = stCount / styleNo * 263
    StyleUsage.Mercury.Visible = True
    DoEvents
    StyleCount(i) = Count_Style_Usage(dName, astr)
  Next i
End Sub

Function Count_Style_Usage(dName As String, sty As String) As Long
Dim testr As Boolean
Dim i As Long
Dim lngJunk As Long
Dim trange As Range
Dim oRange As Range
  If sty = "Default Paragraph Font" Then ' otherwise would count every paragraph
    Count_Style_Usage = 1
    Exit Function
  End If
'  Application.StatusBar = "Counting use of " & sty
  i = 0
  On Error GoTo cserr
  lngJunk = ActiveDocument.Sections(1).Headers(1).Range.StoryType
  For Each oRange In ActiveDocument.StoryRanges
  
   If oRange.StoryType <> 5 Then
    Set trange = oRange.Duplicate 'Windows(dname).Document.Content.Duplicate
  
    With trange.Find
     .ClearFormatting
     .Style = ActiveDocument.Styles(sty)
 '     i = 0
      testr = True
     Do While testr And i < 2000
       testr = .Execute(FindText:="", replacewith:="", MatchCase:=False, Wrap:=wdFindStop, _
          MatchWholeWord:=False, forward:=True, Replace:=wdReplaceNone)
       If testr Then i = i + 1
        
'    If tRange.Information(wdWithInTable) Then
       trange.EndOf Unit:=wdCharacter, Extend:=wdExtend
       trange.Start = trange.End
'    End If

       If trange.End = oRange.End - 1 Then testr = False
     Loop
    End With
    ActiveDocument.UndoClear
   End If
  Next oRange
  Count_Style_Usage = i
  On Error GoTo 0
'  Application.StatusBar = ""
  Exit Function
cserr:
  On Error GoTo 0
  Count_Style_Usage = 1
End Function

Private Sub DisplayCounts()
Dim i As Long
Dim L As Long
Dim h As Long
Dim ak As Single
Dim st As String

  With StyleUsage
    .StyleListDisplay.Height = 30
    .Height = 180
'    .Show
    .Top = 20
'    .Show
  End With

  If styleNo < 0 Then
    GetCurrentStyles (1)
    sort_Styles
  End If
    
  L = 0
  h = 0
  With StyleUsage
     If styleNo > 0 Then .StyleListDisplay.Height = 10.5 * styleNo
     .StyleListDisplay.Clear
     For i = 0 To styleNo
       If StyleCount(i) > 0 Then
         h = h + 1
         st = RightJustify(StyleCount(i), 4) & "  " & StyleName(i) & StyleText(i)
         If Len(st) > L Then L = Len(st)
         .StyleListDisplay.AddItem st
       End If
     Next i
'     .Top = 40
     ak = 10.5 * h + 165
     If ak > 600 Then ak = 600
     .Height = ak
     ak = L * 6 + 15
     If ak < 286 Then ak = 286
     .Width = ak
     .Left = hPoints - .Width - 20
'     .Show
     DoEvents
     .StyleListDisplay.Height = .Height - 140
     ak = L * 6
     If ak < 275 Then ak = 275
     .StyleListDisplay.Width = ak
   
     '.StyleListDisplay.Top = 2
     .Mercury.Width = 0
 '    .Show
 '    .Top = 20
     .AllInDocLabel.Caption = str(ActiveDocument.Styles.Count) & " total styles"
     .CustomStylesLabel.Caption = str(styleNo) & " styles in use"
     .UnusedStylesLabel.Caption = ""
     DoEvents
  End With

End Sub

Sub DisplayUnused(n As Long)
Dim styy As Style
Dim jSyy As Long
Dim k As Long
Dim L As Long
Dim h As Long
Dim ak As Single
Dim sn As Long
  If ShowStyleSW <> 2 Then
    GetCurrentStyles (2)
    sort_Styles
  End If
  L = 0
  h = 0
  allToggle = False
   With StyleUsage
    .StyleListDisplay.Clear
    .StyleListDisplay.ListStyle = 1
    .StyleListDisplay.MultiSelect = 1
    .SelectAllButton.Enabled = True
    .DeleteStylesButton.Enabled = True
  End With
  jSyy = 0
  n = 0
  sn = ActiveDocument.Styles.Count
  StyleUsage.Mercury.Visible = True
  For Each styy In ActiveDocument.Styles
    n = n + 1
    StyleUsage.Mercury.Width = n / sn * StyleUsage.Thermometer.Width
    DoEvents
   With styy
    If Not .BuiltIn And .Type <> wdStyleTypeTable And .Type <> wdStyleTypeList Then
      For k = 0 To styleNo
        If StyleName(k) = styy.NameLocal Then GoTo sjump
      Next k
      jSyy = jSyy + 1

      StyleUsage.StyleListDisplay.AddItem styy.NameLocal
      h = h + 1
      If Len(styy.NameLocal) > L Then L = Len(styy.NameLocal)
    End If
   End With
sjump:
   Next styy
  
  If jSyy = 0 Then StyleUsage.StyleListDisplay.AddItem "No unused Custon styles"
  With StyleUsage
    .Top = 40
    ak = 10.5 * h + 190
    If ak > 600 Then ak = 600
    .Height = ak
    ak = L * 6 + 15
    If ak < 286 Then ak = 286
    .Width = ak
         
    .StyleListDisplay.Height = .Height - 146
    ak = L * 6
    If ak < 275 Then ak = 275
'    .StyleListDisplay.Width = ak
 '   .Top = 20
 '   .Show
    .Top = 20
    .Mercury.Width = 0
    
    .UnusedStylesLabel.Caption = str(jSyy) & " unused custom styles"
  End With
  
End Sub
Sub toggleAll(n As Long)
  allToggle = Not allToggle
  With StyleUsage.StyleListDisplay
    For n = 0 To .ListCount - 1
      .Selected(n) = allToggle
    Next n
  End With
End Sub

Function RightJustify(ByVal n As Integer, k As Integer) As String
Dim st As String
  st = Format(n, "#########0")
  Do While Len(st) < k
    st = " " & st
  Loop
  RightJustify = st
End Function
Private Sub Get_Styles()
'  If ShowAllStylesSw Then
'    GetCurrentStyles (False)
'  Else
'    GetCurrentStyles (True)
'  End If
  GetCurrentStyles (ShowStyleSW)
End Sub

Sub GetCurrentStyles(GetType As Long) 'GetType=0 Custom, 1=All styles, 2 =in use
Dim i As Long
Dim StItem As Style
Dim acceptSW As Boolean
Dim strng As String
Dim str As String
Dim ii As Long
Dim sii As Long
  ShowStyleSW = GetType
  If GetType = 2 Then
    FastGetCurrentStyles
    Exit Sub
  End If
  
'***************************************************
  ii = 0
  sii = ActiveDocument.Styles.Count
 styleNo = -1
  ReDim StyleName(1)
  ReDim StyleCount(1)
  ReDim StyleText(1)
  ReDim StyleBase(1)
  ReDim StylePrefix(1)
  
  For Each StItem In ActiveDocument.Styles
  
    ' can get duplicate normal styles from paste from web
 '   If StItem.NameLocal = "Normal" Then
       On Error Resume Next
         i = StItem.Type
         If Err.Number = 5848 Then
 '           StItem.NameLocal = "NDuplicateNormal"
            
             MsgBox "A duplicate style " & StItem.NameLocal & " has been found." & vbCrLf & _
               "Probably due to inporting text from the web." & vbCrLf & "You will have to manually remove offending style"
       
              Exit Sub
 '            StItem.Delete
             On Error GoTo 0
             
            GoTo ERR1
         End If
       On Error GoTo 0
  '  End If
  
  If GetType = 1 Or (GetType = 0 And StItem.BuiltIn = False) Then
  
 '  If (inuseOnly And StItem.InUse) Or Not inuseOnly Then ' And Stitem.Type = wdStyleTypeParagraph Then
 '    If inuseOnly Then
 '      acceptSW = Check_Use(StItem)
 '    Else
       acceptSW = True
 '    End If
     
     If TrackChangeForm.IncludeCharsCheckbox.Value = False Then
       If StItem.Type = wdStyleTypeCharacter Then acceptSW = False
     End If
          
     If acceptSW Then

     'StyleName(styleNo) = Stitem
      strng = StItem.NameLocal
      str = strng
      With StItem
        If .Type = wdStyleTypeCharacter Then strng = "(C)" & strng
        If .Type = wdStyleTypeTable Then GoTo nextItem 'strng = "(T)" & strng
        If .Type = wdStyleTypeList Then
          GoTo nextItem 'strng = "(L)" & strng
        Else
          If .Type = wdStyleTypeParagraph Then
            If .Linked Then
              strng = "(K)" & strng
            Else
              strng = "(P)" & strng
            End If
          End If
        End If
      End With
      styleNo = styleNo + 1
      ReDim Preserve StyleName(styleNo)
      StyleName(styleNo) = str
      ReDim Preserve StylePrefix(styleNo)
      StylePrefix(styleNo) = strng
      ReDim Preserve StyleCount(styleNo)
      StyleCount(styleNo) = 0
      ReDim Preserve StyleBase(styleNo)
      StyleBase(styleNo) = StItem.BaseStyle
      ReDim Preserve StyleText(styleNo)
      ' ############## this adds font to list ########################
      'StyleText(styleNo) = " (" & Stitem.Font.Name & " " & Stitem.Font.Size & " pt)"
      ' ##############################################################
      If StItem.InUse Then
        StyleText(styleNo) = " (" & StItem.Font.Name & " " & StItem.Font.Size & " pt)"
      Else
        StyleText(styleNo) = ""
      End If
     End If
    End If
    
nextItem:
    ii = ii + 1
    If ii Mod 10 = 0 Then
      TrackChangeForm.Mercury.Width = ii / sii * TrackChangeForm.Thermometer.Width
      DoEvents
    End If
ERR1:
   Next StItem
   TrackChangeForm.Mercury.Width = 0
   DoEvents
End Sub

Private Sub checksStyles(ByVal aRange As Range)
Dim oPara As Paragraph
Dim ii As Long
Dim iimax As Long
Dim j As Long
Dim jj As Long
Dim sty As String
Dim styy As Style
Dim paraCount As Long
Dim bRange As Range
  ii = 0
  paraCount = aRange.Paragraphs.Count
 
  If paraCount > 500 Then
    jj = 50
  Else
    jj = 1
  End If
  iimax = TrackChangeForm.Thermometer.Width
  If aRange.StoryType = 5 Then
     TrackChangeForm.Mercury.Caption = "Textboxes"
  Else
    TrackChangeForm.Mercury.Caption = "Story" & str(aRange.StoryType)
  End If
  For Each oPara In aRange.Paragraphs
    ii = ii + 1
    If ii Mod jj = 0 Then
       TrackChangeForm.Mercury.Width = ii / paraCount * iimax
       DoEvents
    End If

'Set oPara.Style = ActiveDocument.Styles("Body Text") ' wdStyleHeading4 '
  
If Not oPara.Style Is Nothing Then ' ?????????????????????????***** ????///
    sty = oPara.Style.NameLocal
    For j = 0 To UBound(StyleCount)
      If sty = StyleName(j) Then
        StyleCount(j) = StyleCount(j) + 1
        Exit For
      End If
    Next j
End If

  Next oPara
  
  If TrackChangeForm.IncludeCharsCheckbox.Value Then ' check for character styles
    Set bRange = Selection.Range ' to give independant variable
    ii = ActiveDocument.Styles.Count
    jj = 0
    
    For Each styy In ActiveDocument.Styles
      jj = jj + 1
      TrackChangeForm.Mercury.Width = jj / ii * iimax
      DoEvents
      If styy.Type = wdStyleTypeCharacter Then
        bRange.Start = aRange.Start
        bRange.End = aRange.End
        With bRange.Find
          .ClearFormatting
          .Style = styy
          If .Execute(FindText:="", replacewith:="", MatchCase:=False, Wrap:=wdFindStop, _
            MatchWholeWord:=False, forward:=False, Replace:=wdReplaceNone) Then
            For j = 0 To UBound(StyleCount)
              If styy.NameLocal = StyleName(j) Then
                StyleCount(j) = StyleCount(j) + 1
                Exit For
              End If
            Next j
          End If
        End With
      End If
    Next styy
  End If
  
  TrackChangeForm.Mercury.Width = iimax / 4
  DoEvents
End Sub

Sub CountTextboxesInRange(oRange As Range)
Dim aShape As Shape
Dim txtFrame As TextFrame
Dim aRange As Range
    Select Case oRange.StoryType
      Case 6, 7, 8, 9, 10, 11
        For Each aShape In oRange.ShapeRange
          Set txtFrame = aShape.TextFrame
          If Not txtFrame Is Nothing Then
            If txtFrame.HasText Then
              Set aRange = txtFrame.TextRange
              Call checksStyles(aRange)
            End If
          End If
        Next aShape
    End Select
End Sub

Function TOCinRange(r As Range) As Boolean
Dim k As Long
  TOCinRange = True
  k = 1
  Do While k <= r.Fields.Count
    If InStr(r.Fields(k).Code, "TOC") > 0 Then Exit Function
    k = k + 1
  Loop
  TOCinRange = False
End Function

Private Sub FastGetCurrentStyles()
Dim styy As Style
Dim oldRange As Range
Dim pageRange As Range
  Application.ScreenUpdating = True  ' must be true for routine to work
  Options.Pagination = False ' ????
  Set oldRange = Selection.Range ' to return to starting point
  
  ' select whole page test to see if it contains a TOC
  Selection.GoTo What:=wdGoToBookmark, Name:="\Page"
  If TOCinRange(Selection.Range) Then
  ' move to first page
    Set pageRange = Selection.Range
    Selection.Start = ActiveDocument.Range.Start
    Selection.End = Selection.Start
    Selection.GoTo What:=wdGoToBookmark, Name:="\Page" ' select whole of page
    ' if first page contains a TOC then move to last page
    If TOCinRange(Selection.Range) Then
      Selection.End = ActiveDocument.Range.End
      Selection.Start = Selection.End
      Application.ActiveWindow.ScrollIntoView ActiveDocument.Range, False
    End If
  End If
  
  ' temp fix ************************************
   ActiveDocument.Range.Characters(1).Select
   Selection.End = Selection.Start
   

  G0_FastGetCurrentStyles
  Application.ActiveWindow.ScrollIntoView pageRange, True
  Application.ScreenUpdating = True
  oldRange.Select
  Options.Pagination = True
End Sub

Sub setView(vType As Long)
    If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        ActiveWindow.ActivePane.View.Type = vType
    Else
        ActiveWindow.View.Type = vType
    End If
End Sub


Private Sub G0_FastGetCurrentStyles() '  ******??????????????
Dim ii As Long
Dim sRange As Range
Dim aRange As Range
Dim oRange As Range
Dim lngJunk As Long
Dim oPara As Paragraph
Dim stt As String
Dim styy As Style
Dim rStyle As Style
Dim sii As Long
Dim aFootnote As Footnote
Dim aEndnote As Endnote
Dim aSection As Section
Dim aComment As Comment
Dim aHF As HeaderFooter
Dim j As Long
Dim aShape As Shape
Dim txtFrame As TextFrame
Dim ta As Single
Dim iimax As Long
Dim iip As Long
Dim Vhold As Long
  ' to prevent repagination set view to draft
  If ActiveWindow.View.SplitSpecial = wdPaneNone Then
    Vhold = ActiveWindow.ActivePane.View.Type
  Else
    Vhold = ActiveWindow.View.Type
  End If
  setView (wdNormalView)

ta = Timer
  styleNo = -1
  ReDim StyleName(0)
  ReDim StyleCount(0)
  ReDim StyleText(0)
  ReDim StyleBase(0)
  ReDim StylePrefix(0)
'  options.pagination=false will only work in Normal view mode
  Options.Pagination = False
  System.Cursor = wdCursorWait
    
     iimax = TrackChangeForm.Thermometer.Width
     TrackChangeForm.Mercury.Caption = "Initial"
     ii = 0
     iip = ActiveDocument.Styles.Count
     
   j = -1
  For Each styy In ActiveDocument.Styles
    With styy
      If .Type = wdStyleTypeParagraph Or .Type = wdStyleTypeCharacter Then
        j = j + 1
        ReDim Preserve StyleName(j)
        ReDim Preserve StyleCount(j)
        ReDim Preserve StyleText(j)
        ReDim Preserve StyleBase(j)
        ReDim Preserve StylePrefix(j)
        StyleName(j) = .NameLocal
        StyleCount(j) = 0
        
        stt = styy.NameLocal
        With styy
          If .Type = wdStyleTypeCharacter Then stt = "(C)" & stt
          If .Type = wdStyleTypeTable Then stt = "(T)" & stt
          If .Type = wdStyleTypeList Then
             stt = "(L)" & stt
          Else
            If .Type = wdStyleTypeParagraph Then
              If .Linked Then
                stt = "(K)" & stt
              Else
                stt = "(P)" & stt
              End If
            End If
          End If
        End With
        
        StylePrefix(j) = stt
        StyleBase(j) = styy.BaseStyle

        If styy.InUse Then
          StyleText(j) = " (" & styy.Font.Name & " " & styy.Font.Size & " pt)"
        Else
          StyleText(j) = ""
        End If
      End If
    End With
    
    ii = ii + 1
    TrackChangeForm.Mercury.Width = ii / iip * iimax
    DoEvents
   
  Next styy
    
   styleNo = j ' set styleNo
    
'MsgBox "load styles into arrays" & Timer - ta
ta = Timer
  
    For Each sRange In ActiveDocument.StoryRanges
      iimax = TrackChangeForm.Thermometer.Width
      TrackChangeForm.Mercury.Caption = "Story" & str(sRange.StoryType)
      TrackChangeForm.Mercury.Width = iimax / 4
     
      Select Case sRange.StoryType
     ' 1=main, 2=footnotes, 3=endnotes, 4=comments, 5=textframes, 6=even headers
     ' 7=primary header, 8=even footer, 9=primary footer, 10=firstpage header, 11= first footer,
     ' 12=footnote separator, 13=footnote continuation separator, 14=footnote continuation notice,
     ' 15=endnote separator, 16=endnote continuation separator, 17=endnote continuation notice
     
      Case 1 'main, firstpage header, firstpage footer
        Call checksStyles(sRange)
        Set aHF = ActiveDocument.Sections(1).Headers(wdHeaderFooterFirstPage)
        Set aRange = aHF.Range
        If Not aRange Is Nothing Then
            Call checksStyles(aRange)
        End If
        Set aHF = ActiveDocument.Sections(1).Footers(wdHeaderFooterFirstPage)
        Set aRange = aHF.Range
        If Not aRange Is Nothing Then
          Call checksStyles(aRange)
        End If
       
'MsgBox Timer - ta
'ta = Timer
      Case 2 ' footnotes
            Set aRange = ActiveDocument.StoryRanges(2)
            Call checksStyles(aRange)
            Call CountTextboxesInRange(aRange)
      Case 3  ' endnotes
            Set aRange = ActiveDocument.StoryRanges(3)
            Call checksStyles(aRange)
            Call CountTextboxesInRange(aRange)
      Case 4  ' comments.  You may or may not wish to include these
          For Each aComment In ActiveDocument.Comments
            Set aRange = aComment.Range
            Call checksStyles(aRange)
          Next aComment
      Case 6, 7, 8, 9 ' headers and footers except for firstpage.
        For Each aSection In ActiveDocument.Sections
          Set aRange = Nothing
          Select Case sRange.StoryType
            Case 6
              Set aHF = aSection.Headers(wdHeaderFooterEvenPages)
             Case 7
               Set aHF = aSection.Headers(wdHeaderFooterPrimary)
             Case 8
               Set aHF = aSection.Footers(wdHeaderFooterEvenPages)
             Case 9
               Set aHF = aSection.Footers(wdHeaderFooterPrimary)
           End Select
 ' aTest = aHF.LinkToPrevious
'MsgBox aHF.LinkToPrevious
 ' If aTest = False Then Set aRange = aHF.Range
 ' LinkToPrevious gives wrong value for first section
           If aHF.LinkToPrevious = False Or aSection.Index = 1 Then Set aRange = aHF.Range
           If Not aRange Is Nothing Then
             Call checksStyles(aRange)
             ' check if there are any textboxes in header/footers
             If aHF.Shapes.Count > 0 Then
               For j = 1 To aHF.Shapes.Count
                 Set aShape = aHF.Shapes(j)
                 With aShape.TextFrame
                   If .HasText Then
                     Set aRange = aShape.TextFrame.TextRange
                     Call checksStyles(aRange)
                   End If
                 End With
               Next j
             End If
           End If
        Next aSection
  '    Case 5 ' textframes
      
      End Select
         
      For Each aShape In sRange.ShapeRange
          Set txtFrame = Nothing
          On Error Resume Next
          Set txtFrame = aShape.TextFrame
          On Error GoTo 0
          If Not txtFrame Is Nothing Then
           With aShape.TextFrame
             If .HasText Then
               Set aRange = .TextRange
               Call checksStyles(aRange)
             End If
           End With
          End If
      Next aShape
  
  '  TrackChangeForm.Mercury.Width = 0
    DoEvents
  Next sRange
  
       
  ' compact array down to used styles *************
  j = 0
  ii = 0
  TrackChangeForm.Mercury.Caption = "Compacting"
 
  Do
    If StyleCount(j) = 0 Then
      StyleCount(j) = StyleCount(styleNo)
      StyleName(j) = StyleName(styleNo)
      StyleText(j) = StyleText(styleNo)
      StyleBase(j) = StyleBase(styleNo)
      StylePrefix(j) = StylePrefix(styleNo)
      styleNo = styleNo - 1
    Else
      j = j + 1
    End If
    
    ii = ii + 1
    TrackChangeForm.Mercury.Width = ii / styleNo * iimax
    DoEvents
    
  Loop Until j > styleNo
   ReDim Preserve StyleName(styleNo)
   ReDim Preserve StyleCount(styleNo)
   ReDim Preserve StyleText(styleNo)
   ReDim Preserve StyleBase(styleNo)
   ReDim Preserve StylePrefix(styleNo)
  
  System.Cursor = wdCursorNormal
  
'MsgBox "Time=" & Timer - ta
  

  ' ***********************************************
nextOrange:
 
'    ii = ii + 1
'        If Int(ii / 20) * 20 = ii Then
'          TrackChangeForm.Mercury.Width = ii / sii * TrackChangeForm.Thermometer.Width
'          DoEvents
'        End If
 
  On Error GoTo 0
'  TrackChangeForm.Mercury.Width = 0
  DoEvents
 '  TrackChangeForm.Height = 585
   Application.StatusBar = ""
   setView (Vhold) '(wdPrintView)
  Exit Sub

cherr:
  On Error GoTo 0
  setView (wdPrintView)
  If MsgBox("Error possibily document cannot be edited" & _
    vbCrLf & "Do you want to abort?", vbYesNo) = vbNo Then Exit Sub 'GoTo frr
End Sub

Function Check_Use(sty As Style) As Boolean
Dim oRange As Range
Dim aPara As Paragraph
  If sty = "Default Paragraph Font" Then
    Check_Use = True
    Exit Function
  End If
 ' If Not ActiveDocument.Styles(sty).InUse Then
 '   Check_Use = False
 '   Exit Function
 ' End If
  On Error GoTo cherr


  For Each oRange In ActiveDocument.StoryRanges
   Select Case oRange.StoryType
   ' 1=main, 2=footnotes, 3=endnotes, 4=comments, 5=textframes, 6=even headers
   ' 7=primary header, 8=even footer, 9=primary footer, 10=firstpage header, 11= first footer,
   Case 1, 2, 3, 4, 6, 7, 8, 9, 10, 11 ' 5 causes repagination
    With oRange.Find
     .ClearFormatting
     .Style = sty

     If .Execute(FindText:="", replacewith:="", MatchCase:=False, Wrap:=wdFindStop, _
          MatchWholeWord:=False, forward:=False, Replace:=wdReplaceNone) Then
       Check_Use = True
       On Error GoTo 0
       Exit Function
     End If
     ' have not found so check if in first para
     Set aPara = oRange.Paragraphs(1)
     If aPara.Style = sty Then
       'MsgBox "1st para style found"
       Check_Use = True
       Exit Function
     End If
   End With

   Case Else
   End Select
  Next oRange
  Check_Use = False
  On Error GoTo 0
  Exit Function
cherr:
  On Error GoTo 0
  MsgBox "Error due to incompatible style " & sty & vbCr & _
         "Probably due to style created in Word 2007" & vbCr & _
         "Manually delete this style"
  Check_Use = True
End Function
Function Check_UseXX(sty As Style) As Boolean
Dim oRange As Range
Dim lngJunk As Long
  If sty = "Default Paragraph Font" Then
    Check_Use = True
    Exit Function
  End If
 ' If Not ActiveDocument.Styles(sty).InUse Then
 '   Check_Use = False
 '   Exit Function
 ' End If
  On Error GoTo cherr
  Application.StatusBar = "Checking use of " & sty
  lngJunk = ActiveDocument.Sections(1).Headers(1).Range.StoryType
  For Each oRange In ActiveDocument.StoryRanges
   Select Case oRange.StoryType
   ' 1=main, 2=footnotes, 3=endnotes, 4=comments, 5=textframes, 6=even headers
   ' 7=primary header, 8=even footer, 9=primary footer, 10=firstpage header, 11= first footer,
   Case 1, 2, 3, 4, 6, 8, 9, 10, 11 ' 5 causes repagination
    With oRange.Find
     .ClearFormatting
     .Style = sty
     If .Execute(FindText:="", replacewith:="", MatchCase:=False, Wrap:=wdFindStop, _
          MatchWholeWord:=False, forward:=False, Replace:=wdReplaceNone) Then
       Check_Use = True
       On Error GoTo 0
       Exit Function
     End If
   End With
   Case Else
   End Select
  Next oRange
  Check_Use = False
  On Error GoTo 0
  Exit Function
cherr:
  On Error GoTo 0
  MsgBox "Error due to incompatible style " & sty & vbCr & _
         "Probably due to style created in Word 2007" & vbCr & _
         "Manually delete this style"
  Check_Use = True
End Function

Private Sub Styles_in_Shapes()
Dim shp As Shape
Dim aPara As Paragraph
  With ActiveDocument
    If .Shapes.Count = 0 Then Exit Sub
    For Each shp In .Range.ShapeRange
      With shp.TextFrame
        If .HasText Then
          For Each aPara In .TextRange.Paragraphs
            accumulate_Stylecount (aPara.Style)
          Next aPara
        End If
      End With
    Next shp
  End With
End Sub

Sub accumulate_Stylecount(sName As String)
Dim m As Long
  If styleNo < 0 Then Exit Sub
  m = 1
  Do While m < styleNo And StyleName(m) <> sName
    m = m + 1
  Loop
  If m > styleNo Then
    MsgBox "?????" & sName
  Else
    StyleCount(m) = StyleCount(m) + 1
  End If
End Sub

Sub Count_Styles_Usage(sty As String) ' ???????? not called ???
Dim testr As Boolean
Dim i As Long
 With ActiveDocument.Content.Find
   .ClearFormatting
   .Style = ActiveDocument.Styles(sty)
   i = 0
   testr = True
   Do While testr = True
    testr = .Execute(FindText:="", replacewith:="", MatchCase:=False, Wrap:=wdFindStop, _
          MatchWholeWord:=False, forward:=True, Replace:=wdReplaceNone)
    If testr Then i = i + 1
   Loop
    MsgBox i & " instances"
 
 End With
End Sub
Sub Cancel_ShowUsage(n As Integer)
  abortDelete = True
  StyleUsage.hide
End Sub

Sub Delete_Unused_styles(prompt As Boolean) ' temp fix ###################
Dim i As Long
Dim m As Long
Dim stylesDeleted As Long
Dim sty As String
Dim stBased As String
  stylesDeleted = 0
  If StyleUsage.StyleListDisplay.ListCount = 1 Then
    If Left(StyleUsage.StyleListDisplay.List(StyleUsage.StyleListDisplay.ListIndex), 9) = "No unused" Then Exit Sub
  End If
    
  Delete_Unused_Daughters (False)
  
End Sub

Sub Delete_Unused_Daughters(prompt As Boolean)
Dim oStyle As Style
Dim rStyle As Style
Dim StyStr As String
Dim m As Long
Dim stylesDeleted As Long
Dim stMax As Long
Dim stMaxA As Long
Dim stIndex As Long
Dim statusBarStr As String
Dim chunk As Long
Dim k As Long
Dim countBaseInUse As Long
Dim msgStrng As String
Dim baseStyleStr As String
Dim stCount As Long
Dim stMaxHold As Long
Dim docPath As String
'  If ActiveWindow.View.SplitSpecial = wdPaneNone Then
'        ActiveWindow.ActivePane.View.Type = wdNormalView
'  Else
'        ActiveWindow.View.Type = wdNormalView
'  End If
  Options.Pagination = False
  abortDelete = False

  stylesDeleted = 0
  
  
 ' stMax = ActiveDocument.Styles.Count
  stMax = StyleUsage.StyleListDisplay.ListCount - 1 ' list starts at 0

  
  stMaxA = stMax
  chunk = stMax / 100 ' 20
  With StyleUsage.Mercury
    .Width = 1
    .Visible = True
  End With
  statusBarStr = "*"
  Styles_in_Shapes
  stIndex = 0
  countBaseInUse = 0
  baseStyleStr = ""
  stMaxHold = stMax + 1
  stCount = 0
  docPath = ActiveDocument.Path & "\" & ActiveDocument.Name
  Do While stIndex <= stMax
  
    If Not StyleUsage.StyleListDisplay.Selected(stIndex) Then GoTo incrI
  
    If abortDelete Then GoTo stError4
    stCount = stCount + 1
    StyleUsage.Mercury.Width = stCount / stMaxHold * 263 + 1
    StyleUsage.Mercury.Visible = True
    DoEvents
 
    On Error GoTo sterror5
    
    
    Set oStyle = ActiveDocument.Styles(StyleUsage.StyleListDisplay.List(stIndex))
    
    On Error GoTo 0
  '                          For Each oStyle In ActiveDocument.Styles
    If Not oStyle.BuiltIn Then
      StyStr = oStyle.NameLocal
      
   '   check if style stIndex exists
      Set rStyle = Nothing
      On Error Resume Next
      Set rStyle = ActiveDocument.Styles(StyStr)
      On Error GoTo 0
      If rStyle Is Nothing Then GoTo incrI
      
      If ActiveDocument.Styles(StyStr).BuiltIn Then GoTo incrI
      If zeroUse(StyStr, k) Then
       ' Application.StatusBar = StyStr
        If BaseInUse(StyStr) Then
          countBaseInUse = countBaseInUse + 1
          baseStyleStr = baseStyleStr & "  " & StyStr
          GoTo incrI
        End If
        m = vbYes
        If prompt Then 'And Not ActiveDocument.Styles(StyStr).BuiltIn Then
          m = MsgBox("Delete style " & StyStr, vbYesNoCancel, "Deleting unused styles")
          If m = vbCancel Then GoTo stError4
        End If
        If m = vbYes Then
            stylesDeleted = stylesDeleted + 1
            Application.OrganizerDelete Source:=docPath, _
            Name:=StyStr, Object:=wdOrganizerObjectStyles
        End If
      
      End If
    End If
incrI:
    stIndex = stIndex + 1
  Loop
  
stError4:
  StyleUsage.Mercury.Width = 0
   On Error GoTo 0
   msgStrng = str(stylesDeleted) & " styles removed of " & str(stMaxA + 1) & vbCrLf & str(countBaseInUse) & _
   " unused styles not deleted because other styles are based on them"
   If countBaseInUse > 0 Then
      msgStrng = msgStrng & vbCr & "Base styles: " & baseStyleStr & vbCr & _
      "Run again to remove next generation of based styles." & vbCr & _
      "There may be a residual count where the base style is not used but daughter style is used"
   End If
   Call MsgBox(msgStrng, , "Deleted Styles")
   ActiveDocument.UndoClear
 
   If stylesDeleted > 0 Then
     StyleUsage.hide
     ShowAllStylesSw = Not ShowAllStylesSw
     Toggle_ShowAllStyles (ShowStyleSW) ' re-reads styles
   End If
   Exit Sub
sterror5:
  If MsgBox("Cannot delete " & StyStr, , vbOKCancel) = vbCancel Then Exit Sub
  stylesDeleted = stylesDeleted - 1
  stIndex = stIndex + 1
  Resume Next
  
End Sub

Sub delete_Unused_DaughtersOLD(prompt As Boolean)
Dim oStyle As Style
Dim rStyle As Style
Dim StyStr As String
Dim m As Long
Dim stylesDeleted As Long
Dim stMax As Long
Dim stMaxA As Long
Dim stIndex As Long
Dim statusBarStr As String
Dim chunk As Long
Dim k As Long
Dim countBaseInUse As Long
Dim msgStrng As String
Dim baseStyleStr As String
Dim stCount As Long
Dim stMaxHold As Long
  If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        ActiveWindow.ActivePane.View.Type = wdNormalView
  Else
        ActiveWindow.View.Type = wdNormalView
  End If
  Options.Pagination = False
  abortDelete = False

  stylesDeleted = 0
  stMax = ActiveDocument.Styles.Count
  stMaxA = stMax
  chunk = stMax / 100 ' 20
  With StyleUsage.Mercury
    .Width = 1
    .Visible = True
  End With
  statusBarStr = "*"
  Styles_in_Shapes
  stIndex = 1
  countBaseInUse = 0
  baseStyleStr = ""
  stMaxHold = stMax
  stCount = 0
  Do While stIndex < stMax
  
    If abortDelete Then GoTo stError4
    stCount = stCount + 1
    StyleUsage.Mercury.Width = stCount / stMaxHold * 263 + 1
    StyleUsage.Mercury.Visible = True
    DoEvents
 
    On Error GoTo sterror5
    Set oStyle = ActiveDocument.Styles(stIndex)
    On Error GoTo 0
  '                          For Each oStyle In ActiveDocument.Styles
    If Not oStyle.BuiltIn Then
      StyStr = oStyle.NameLocal
      
   '   check if style stIndex exists
      Set rStyle = Nothing
      On Error Resume Next
      Set rStyle = ActiveDocument.Styles(StyStr)
      On Error GoTo 0
      If rStyle Is Nothing Then GoTo incrI
      
      If ActiveDocument.Styles(StyStr).BuiltIn Then GoTo incrI
      If zeroUse(StyStr, k) Then
       ' Application.StatusBar = StyStr
        If BaseInUse(StyStr) Then
          countBaseInUse = countBaseInUse + 1
          baseStyleStr = baseStyleStr & "  " & StyStr
          GoTo incrI
        End If
        m = vbYes
        If prompt Then 'And Not ActiveDocument.Styles(StyStr).BuiltIn Then
          m = MsgBox("Delete style " & StyStr, vbYesNoCancel, "Deleting unused styles")
          If m = vbCancel Then GoTo stError4
        End If
        If m = vbYes Then
            stylesDeleted = stylesDeleted + 1
            If (stylesDeleted \ 30) * 30 = stylesDeleted And Not prompt Then
              If MsgBox("Word can crash if too many style deletions are made in a short time" & vbCr & _
                vbCrLf & "Wait several seconds before continuing. " & str(stylesDeleted) & " deleted to date", vbOKCancel) = vbCancel Then
              GoTo stError4
              End If
            End If
         
          ActiveDocument.Styles(StyStr).Delete
          ActiveDocument.UndoClear
          stMax = ActiveDocument.Styles.Count
          stMax = stMax - 1
          stIndex = stIndex - 1
          If k > -1 Then
            StyleName(k) = ""
            StyleBase(k) = ""
          End If
 'MsgBox StyStr & " Deleted"
        End If
      
      End If
    End If
incrI:
    stIndex = stIndex + 1
   ' ActiveDocument.UndoClear
    
    If Int(stIndex / chunk) * chunk = stIndex Then
 '     statusBarStr = statusBarStr & "*"
 '     Application.StatusBar = statusBarStr
      DoEvents
  '    MsgBox "Another 5% completed"
    End If
    
  Loop
stError4:
   On Error GoTo 0
   msgStrng = str(stylesDeleted) & " styles removed of " & str(stMaxA) & vbCrLf & str(countBaseInUse) & _
   " unused styles not deleted because other styles are based on them"
   If countBaseInUse > 0 Then
      msgStrng = msgStrng & vbCr & "Base styles: " & baseStyleStr & vbCr & _
      "Run again to remove next generation of based styles." & vbCr & _
      "There may be a residual count where the base style is not used but daughter style is used"
   End If
   Call MsgBox(msgStrng, , "Deleted Styles")
   ActiveDocument.UndoClear
 '  StyleUsage.hide
   If stylesDeleted > 0 Then
     ShowAllStylesSw = Not ShowAllStylesSw
     Toggle_ShowAllStyles (1) ' re-reads styles
   End If
   Exit Sub
sterror5:
  If MsgBox("Cannot delete " & StyStr, , vbOKCancel) = vbCancel Then Exit Sub
  stylesDeleted = stylesDeleted - 1
  stIndex = stIndex + 1
  Resume Next
  
End Sub

Function zeroUse(StyStr As String, k As Long) As Boolean
Dim i As Long
  zeroUse = False
  k = -1
  For i = 0 To styleNo  ' ***************
    If StyleName(i) = StyStr Then
      If StyleCount(i) > 0 Then
        k = i
        Exit Function
      Else
        zeroUse = True
        Exit Function
      End If
    End If
  Next i
  zeroUse = True
End Function
Function BaseInUse(StyStr As String) As Boolean ' returns true if other styles are based on StyStr and have counts
Dim i As Long
  ReDim basedCounts(0)
  BaseInUse = True
  For i = 1 To styleNo
    If StyleBase(i) = StyStr Then
      If StyleCount(i) > 0 Then
        Exit Function
      Else
        If thirdBase(StyleName(i)) Then Exit Function ' third level exists. Play safe and don't delete first level
      End If
    End If
  Next i
       

  BaseInUse = False
End Function
Function thirdBase(StyStr As String) As Boolean
Dim i As Long
  thirdBase = True
  For i = 1 To styleNo
    If StyleBase(i) = StyStr Then Exit Function
  Next i
  thirdBase = False
End Function


Function is_BaseStyle(sty As String, ByRef stBased As String) As Boolean
Dim i As Long
  is_BaseStyle = False
  For i = 0 To styleNo
    If StyleBase(i) = ActiveDocument.Styles(sty) Then
      is_BaseStyle = True
      stBased = StyleName(i)
      Exit Function
    End If
  Next i
End Function

Private Sub Global_Change()

'  If MsgBox("Change all instances of style " & """" & StyleName(n1) & """" & " to " & _
'            """" & StyleName(n2) & """", vbYesNo, "Global Change") = vbNo Then Exit Sub
    Selection.Find.ClearFormatting
    Selection.Find.Style = AtoBForm.FromStyleTextbox.Value
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Style = AtoBForm.ToStyleTextbox.Value
    With Selection.Find
        .Text = "^?" ' any character
        .Replacement.Text = ""
        .forward = False
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .Execute Replace:=wdReplaceAll
     End With
     DoEvents
  '   MsgBox "Global changes completed"
  '  Get_Styles
End Sub
Sub Load_ALTR(n As Long)
  If TrackChangeForm.StyleListBox1.ListIndex < 0 Then Exit Sub
  TrackChangeForm.ALTRTextbox.Text = StylePrefix(TrackChangeForm.StyleListBox1.ListIndex)
End Sub
Sub Load_ALTT(n As Long)
  If TrackChangeForm.StyleListBox1.ListIndex < 0 Then Exit Sub
  TrackChangeForm.ALTTtextbox.Text = StylePrefix(TrackChangeForm.StyleListBox1.ListIndex)
End Sub
Sub Load_ALTY(n As Long)
  If TrackChangeForm.StyleListBox1.ListIndex < 0 Then Exit Sub
  TrackChangeForm.ALTYTextbox.Text = StylePrefix(TrackChangeForm.StyleListBox1.ListIndex)
End Sub
Sub Load_ALTU(n As Long)
  If TrackChangeForm.StyleListBox1.ListIndex < 0 Then Exit Sub
  TrackChangeForm.ALTUTextbox.Text = StylePrefix(TrackChangeForm.StyleListBox1.ListIndex)
End Sub

Sub CreateNewStyle(n As Integer)
Dim mystyle
'  Tstr = "TOC " & Trim(str(Tno))
'  Set mystyle = Dialogs(wdDialogFormatStyle)
'  With mystyle
'    .Name = "Normal" 'Tstr
'    .Execute
'  End With
  Dialogs(wdDialogFormatStyle).Show
'  ShowAllStylesSw = False  'Not ShowAllStylesSw
'  TrackChangeForm.ShowStylesButton.Caption = "Show only styles used"
  Toggle_ShowAllStyles (ShowStyleSW)
End Sub
Sub additionalAction(action As Integer)
  AdditionalForm.BulNumLabel.Caption = ""
   makeBulnumEnabled (False)
  Select Case action
    Case 1
      Check_Outline_Seq
    Case 2
      Compare_Between_Docs
    Case 3
      Rationalise_Numbering
    Case 4
      setupNumbering
  End Select
End Sub
Private Sub Check_Outline_Seq()
Dim paraCount As Long
Dim searchRange As Range
Dim masterRange As Range
Dim s As String
Dim st As String
Dim k As Integer
Dim currentSeq As Integer
Dim lastSeq As Integer
Dim ss As String
Dim txt As String
Dim aPara As Paragraph
Dim counter
  cancelOutlineSw = False
  Set searchRange = ActiveDocument.Range
  Set masterRange = ActiveDocument.Range
  paraCount = searchRange.Paragraphs.Count
 
    If searchRange.Paragraphs.Count < 2 Then GoTo Oexit ' should be 1 or last para??
    counter = 0
    For Each aPara In searchRange.Paragraphs
      If cancelOutlineSw Then GoTo Oexit2
      counter = counter + 1
      AdditionalForm.Mercury.Width = counter / paraCount * AdditionalForm.Thermometer.Width
      DoEvents
      ss = aPara.Style
      txt = aPara.Range.Text
      k = aPara.Style.ParagraphFormat.OutlineLevel
      If k > 9 Then k = 0
      If k > 0 Then ' have an outline level style
        currentSeq = k 'Val(Right(ss, 1))
        st = Trim(txt)
        While (Left(st, 1) = Chr(9)) Or (Left(st, 1) = " ")
          st = Mid(st, 2)
        Wend
        If Len(st) = 1 And st = vbCr Then st = ""
        If Len(st) = 0 Then  'And apara.Range.Revisions.Count = 0 Then REVISIONS BUGGERS UP SELECTION
          aPara.Range.Select
          Call MsgBox("BLANK line with style " & ss, , "Sequence checking")
          lastSeq = currentSeq
        End If
           
        If currentSeq - lastSeq > 1 Then
          aPara.Range.Select
          Call MsgBox("WARNING. Out of sequence outline." & vbCrLf & _
             "Previous seq=" & str(lastSeq) & " Current seq=" & str(currentSeq), , "Sequence checking")
          lastSeq = currentSeq
        End If
      End If
    Next aPara
Oexit:
    Call MsgBox("Sequence checking complete", , "")
Oexit2:
    AdditionalForm.Mercury.Width = 0
End Sub
Private Sub Compare_Between_Docs()
Dim StItem As Style
Dim dname1 As String
Dim dname2 As String
Dim st As String, st2 As String
Dim stDescr1 As String
Dim stDescr2 As String
Dim doc1count As Integer
Dim doc2count As Integer
Dim i As Integer, k As Integer
Dim ExistStyleName() As String
Dim ExistStyleCount() As Integer
Dim ExistStyleno As Integer
  cancelOutlineSw = False
  dname1 = ActiveDocument.Name
  ShowAllStylesSw = True
  Toggle_ShowAllStyles (1)
  For i = 0 To styleNo
     ReDim Preserve ExistStyleName(i)
     ExistStyleName(i) = StyleName(i)
     ReDim Preserve ExistStyleCount(i)
     ExistStyleCount(i) = StyleCount(i)
  Next i
  ExistStyleno = styleNo
  st = ActiveDocument.Path
  If Trim(st) <> "" Then Application.ChangeFileOpenDirectory (st)
  Application.Dialogs(wdDialogFileOpen).Show
  ShowAllStylesSw = True
  dname2 = ActiveDocument.Name
  If dname1 <> dname2 Then
    Toggle_ShowAllStyles (1)
    ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
  Else
    Exit Sub
  End If
  i = 0
  
  With CompareStylesList
    .CompareDoc1.Caption = "DOC1 = " & dname1
    .CompareDoc2.Caption = "DOC2 = " & dname2
    .CompareListbox.Clear
    
    While i <= ExistStyleno
    
      AdditionalForm.Mercury.Width = i / ExistStyleno * AdditionalForm.Thermometer.Width
      DoEvents
    
      k = -1
      Do
        k = k + 1
      Loop Until StyleName(k) = ExistStyleName(i) Or k = styleNo
      If StyleName(k) <> ExistStyleName(i) Then
        st = Left(ExistStyleName(i) & "                               ", 35) & " NOT IN DOC2"
      Else
        If ExistStyleCount(i) > 0 Or StyleCount(k) > 0 Then
          st2 = Right("     " & str(ExistStyleCount(i)), 5)
          st = Left(ExistStyleName(i) & "                             ", 35) & st2 & "  "
          st2 = Right("     " & str(StyleCount(k)), 5)
          st = st & st2
          If ExistStyleCount(i) <> StyleCount(k) Then st = st & " ***"
          With ActiveDocument
            If k <= styleNo Then
              stDescr1 = .Styles(Mid(StyleName(k), 4)).Description
            Else
              stDescr1 = ""
            End If
            If i <= ExistStyleno Then
              stDescr2 = .Styles(Mid(ExistStyleName(i), 4)).Description
            Else
              stDescr2 = ""
            End If
            If stDescr1 <> stDescr2 Then
              st = st & " Not same"
            End If
          End With
        End If
      End If
      .CompareListbox.AddItem st
      i = i + 1
    Wend
    k = 0
    While k <= styleNo
      i = -1
      Do
        i = i + 1
      Loop Until StyleName(k) = ExistStyleName(i) Or i = ExistStyleno
      If StyleName(k) <> ExistStyleName(i) Then
        .CompareListbox.AddItem Left(StyleName(k) & "                            ", 35) & " NOT IN DOC1"
      End If
      k = k + 1
    Wend
    
    .CompareListbox.ListIndex = -1
  End With
  CompareStylesList.Show
  ShowAllStylesSw = True
  Toggle_ShowAllStyles (1)
End Sub
Private Sub Setup_Outline_Numbering()
MsgBox "Not enabled. "
End Sub
Sub makeBulnumEnabled(makeVisible As Boolean)
  cancelOutlineSw = True
  With AdditionalForm
    .BulNumSkip.Enabled = makeVisible
    .BulNumClear.Enabled = makeVisible
    .BulnumPara.Enabled = makeVisible
    .OutlineSetupButton.Enabled = makeVisible
 '   .BulNumLabel.Caption = ""
    If Not makeVisible Then .BulCountLabel.Caption = ""
    .Mercury.Width = 0
  End With
End Sub
Private Sub Rationalise_Numbering()
Dim sStyle As String
Dim styleNumbered As Boolean
   makeBulnumEnabled (True)
  With ActiveDocument.Bookmarks ' bookmark position to return to
    .Add Range:=Selection.Range, Name:="returnto"
    .DefaultSorting = wdSortByName
    .ShowHidden = True
  End With
  currentList = 0
  fillReplaceList
  Lists_Next (1)
End Sub
Function advanceToList() As Boolean
Dim aRange As Range
Dim aPara As Paragraph
Dim stest As Boolean
  Set aRange = Selection.Range
  aRange.End = ActiveDocument.Range.End
  For Each aPara In aRange.Paragraphs
    stest = Not aPara.Style.ListTemplate Is Nothing
    If Not stest Then If aPara.Style.ListLevelNumber > 0 Then stest = True
    If stest Then
      aPara.Range.Select
      advanceToList = True
      Exit Function
    End If
  Next aPara
  advanceToList = False
End Function
Private Sub fillReplaceList()
Dim xStyle As Style
Dim ss() As String
  ReDim ss(0)
  For Each xStyle In ActiveDocument.Styles
    If Not xStyle.ListTemplate Is Nothing Then
      ss(UBound(ss)) = xStyle.NameLocal
      ReDim Preserve ss(UBound(ss) + 1)
    End If
  Next xStyle
  AdditionalForm.ReplaceListbox.List() = ss()
  DoEvents
End Sub

Sub BulNum_Action(n As Integer) ' 0=initial, 1=skip, 2=by para, 3=clear list, 4=replace all
  AdditionalForm.ListsCount.Caption = ActiveDocument.ListTemplates.Count & " list templates, " & _
       vbCr & ActiveDocument.Lists.Count & " lists in document"
  If n = 5 Then ' cancel ??
    returnToBookmark (False)
    Exit Sub
  End If
  Lists_Next (n)
End Sub
Sub Lists_Next(nn As Integer)
Dim lcount As Long
Dim rr As Range
Dim aRange As Range
Dim listReplaceStyle As String
Dim i As Long
Dim strng As String
  Select Case nn
    Case 1 ' goto next list
    Case 2 ' by paragraph
     If Not Replace_List(True, listReplaceStyle) Then GoTo list2Exit
     GoTo listrExit
    Case 3 ' clear all bullets & numbering from list
      If Not Clear_All_From_List Then Exit Sub
    Case 4 ' replace all paragraph styles
      If Not Replace_List(False, listReplaceStyle) Then GoTo listrExit
  End Select
  lcount = currentList + 1
  If lcount > ActiveDocument.Lists.Count Then lcount = 1 ' start at beginning again
  currentList = lcount
  While lcount <= ActiveDocument.Lists.Count
    'lcount = lcount + 1
    '  iSearchType = lcount
    AdditionalForm.BulCountLabel.Caption = _
       "List " & str(lcount) & " of " & ActiveDocument.Lists.Count
'If lcount > ActiveDocument.Lists.Count Then GoTo listrExit ' ## bloody Hell ######### needed
    Set rr = ActiveDocument.Lists(lcount).Range
    rr.End = rr.Start
 '   rr.Select
    i = AdditionalForm.ReplaceListbox.ListIndex
    If i < 0 Then
     ' MsgBox "Select a replacement style and try again"
      listReplaceStyle = ""
'      GoTo listrExit
    Else
     listReplaceStyle = AdditionalForm.ReplaceListbox.List(i)
    End If

    ActiveWindow.ActivePane.HorizontalPercentScrolled = 0
    Set aRange = ActiveDocument.Lists(lcount).Range
    aRange.Select
    Application.ActiveWindow.ScrollIntoView Selection.Range ' &&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    DoEvents
    strng = "This list of" & str(ActiveDocument.Lists(lcount).Range.ListParagraphs.Count) & _
    " Paragraphs has " & Give_Listtype(Selection.Range.ListFormat.ListType) & vbCr
    If listReplaceStyle = "" Then
      strng = strng & "No replacement style has been selected"
    Else
      strng = strng & "Replacement style: " & ActiveDocument.Styles(listReplaceStyle).NameLocal
    End If
    AdditionalForm.BulNumLabel = strng

    GoTo list2Exit
  Wend
listrExit:
 ' BulNumForm.hide
  returnToBookmark (True)
list2Exit:
  DoEvents
  AdditionalForm.ListsCount.Caption = ActiveDocument.ListTemplates.Count & " list templates, " & _
       vbCr & ActiveDocument.Lists.Count & " lists in document"
  makeBulnumEnabled (True)

End Sub
Function Replace_List(byPara As Boolean, listReplaceStyle As String) As Boolean
Dim p As Paragraph
Dim r As Range
Dim ync As Long
Dim ttp As Long
Dim s As String
Dim i As Long
  Set r = Selection.Range
  i = AdditionalForm.ReplaceListbox.ListIndex
  If i < 0 Then
    listReplaceStyle = ""
    MsgBox "No replacement style selected. Try again"
    Replace_List = False
    Exit Function
  Else
     listReplaceStyle = AdditionalForm.ReplaceListbox.List(i)
  End If
  
  ClearForm.ClearLabel = "Give list style " & listReplaceStyle & vbCr & _
    "to ad-hoc list"
  ClearForm.Show
  Replace_List = False
  If clearCancel Then Exit Function
  
  For Each p In r.Paragraphs
    ync = vbYes
    p.Range.Select
    ttp = Selection.Range.ListFormat.ListType
    If ttp <> wdListNoNumbering Then
      If ((ClearForm.ClearBulletsOption.Value And ttp = wdListBullet) _
        Or (ClearForm.ClearNumbersOption.Value And ttp <> wdListBullet) _
        Or (ClearForm.ClearBothOption.Value)) _
        And (Selection.Style <> ActiveDocument.Styles(listReplaceStyle)) Then
        
        If byPara = True Then
        
          s = "This paragraph has " & Give_Listtype(Selection.Range.ListFormat.ListType)
          s = s & Chr(13) & "Change the style of this paragraph to " & listReplaceStyle & "?"
          ync = MsgBox(s, vbYesNoCancel, "Change Bullets & Numbering")
        End If
        If ync = vbCancel Then
          Replace_List = False
          r.Select
          Exit Function
        End If
        If ync = vbYes Then
          Selection.Style = ActiveDocument.Styles(listReplaceStyle)
        End If
      End If
    End If
  Next p
  r.Select
  Replace_List = True
End Function
Sub runClear(k As Long)
  If k = 0 Then
    clearCancel = True
  Else
    clearCancel = False
  End If
  ClearForm.hide
End Sub
Function Clear_All_From_List() As Boolean
Dim p As Paragraph
Dim stN As Long
Dim plN As Long
Dim r As Range
Dim k As Long
Dim bnType As Long
  ClearForm.ClearLabel = "Clear para by para in list selected"
  ClearForm.Show
  Clear_All_From_List = False
  If clearCancel Then Exit Function
  
  Set r = Selection.Range
  For Each p In r.Paragraphs
    bnType = p.Range.ListFormat.ListType

    If ClearForm.ClearBulletsOption.Value Then ' bullet, ignore numbererd
      If bnType <> wdListBullet And bnType <> wdListMixedNumbering Then GoTo nextp  ' paragraph is not bulleted
    Else ' want numbered, if bulleted ignore
      If ClearForm.ClearNumbersOption.Value Then ' numbers only
        If bnType = wdListBullet Then GoTo nextp
      Else
        MsgBox "Type of list not selected"
        Exit Function
      End If
    End If
 
    p.Range.Select
    stN = p.Style.ListLevelNumber
    plN = p.Range.ListFormat.ListType
    If (stN > 0 Or plN > 0) And bnType > 0 Then
      k = MsgBox("Clear " & Give_Listtype(bnType) & " on this paragraph", vbYesNoCancel)
      If k = vbCancel Then
        r.Select
        Exit Function
      End If
      If k = vbYes Then
        p.Range.ListFormat.RemoveNumbers NumberType:=wdNumberParagraph
       ' p.Range.ListFormat.ListType = 0
      End If
    End If
nextp:
  Next p
  r.Select
  Clear_All_From_List = True
End Function

Function Give_Listtype(n As Long) As String
Dim ttext As String
  Select Case n
    Case wdListBullet
      ttext = "Bullets only"
    Case wdListListNumOnly
      ttext = "Number Only"
    Case wdListMixedNumbering
      ttext = "Mixed Numbering"
    Case wdListNoNumbering
      ttext = "No Numbering"
    Case wdListOutlineNumbering
      ttext = "Outline Numbering only"
    Case wdListSimpleNumbering
      ttext = "Simple Numbering"
    Case Else
      ttext = "??"
  End Select
  Give_Listtype = ttext
End Function
Sub returnToBookmark(returnToSw As Boolean)
  On Error Resume Next
  If returnToSw Then
    Selection.GoTo What:=wdGoToBookmark, Name:="returnto" ' #####################
    'UserForm1.MarkPage.Caption = ""
  End If
  ActiveDocument.Bookmarks("Returnto").Delete
  On Error GoTo 0
End Sub
Sub remove_list_templates(i As Integer)
' isStyleNumbered = Not listReplaceStyle.ListTemplate Is Nothing
Dim m As Long
Dim j As Long
Dim jj As Long
Dim k As Long
Dim st As String
Dim stt As String
Dim galSt As String
Dim listGal As ListGallery
  k = 0
  For Each listGal In ListGalleries
  k = k + 1
  Select Case k
    Case 1
      stt = "Bulleted template "
    Case 2
      stt = "Numbered template "
    Case 3
      stt = "Outline template "
    Case Else
      stt = "?? template"
  End Select
  For i = 1 To 7
    st = stt & str(i) & vbCr
    jj = listGal.ListTemplates(i).ListLevels.Count
    For j = 1 To jj  ' 9 ?
      If Not listGal.ListTemplates(i).ListLevels(j) Is Nothing Then
        With listGal.ListTemplates(i).ListLevels(j)
        st = st & "Level" & str(j) & "  Linked Style=" & .LinkedStyle & "  Numberformat=" & _
           .NumberFormat & vbCr
        End With
      End If
    Next j
    st = st & vbCr & vbCr & "Do you want to remove this " & stt
    m = MsgBox(st, vbYesNoCancel, "Removing List Templates")
    If m = vbCancel Then GoTo rErr
    If m = vbYes Then
      For j = 1 To jj
        If Not listGal.ListTemplates(i).ListLevels(j) Is Nothing Then
          With listGal.ListTemplates(i).ListLevels(j)
            .NumberFormat = ""
            .LinkedStyle = ""
         End With
        End If
      Next j
    End If
    st = ""
  Next i

  Next listGal
rErr:
DoEvents
AdditionalForm.ListsCount.Caption = ActiveDocument.ListTemplates.Count & " list templates, " & _
       vbCr & ActiveDocument.Lists.Count & " lists in document"
End Sub

Private Sub setupNumbering()
' 1 find an empty template
' 2 select the n styles to be outline numbered - in order
' 3 check that selected styles are not already numbered
' 4 ask for numbering style and and text in the numbering
' 5 use existing font
' 6 create
   With AdditionalForm
     .BulNumSkip.Enabled = False
     .BulnumPara.Enabled = False
     .BulNumClear.Enabled = True
     .OutlineSetupButton.Enabled = True
     .BulNumClear.Caption = "Nul list templates"
     .OutlineSetupButton.Caption = "CREATE OUTLINE NUM"
     .BulNumLabel.Caption = ""
     .Left = hPoints - .Width - TrackChangeForm.Width
   End With
   stylenoSw = False
   ShowAllStylesSw = False
   Toggle_Styles (1)
   
MsgBox "not enabled"
   
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(1)
        .NumberFormat = "%1)"
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleArabic
        .NumberPosition = CentimetersToPoints(0)
        .Alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(0.63)
        .TabPosition = wdUndefined
        .ResetOnHigher = 0
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = wdUndefined
            .Subscript = wdUndefined
            .Superscript = wdUndefined
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = wdUndefined
            .Hidden = wdUndefined
            .Underline = wdUndefined
            .Color = wdUndefined
            .Size = wdUndefined
            .Animation = wdUndefined
            .DoubleStrikeThrough = wdUndefined
            .Name = ""
        End With
        .LinkedStyle = "Heading 1"
    End With
    
  With AdditionalForm
    .BulNumSkip.Enabled = True
    .BulnumPara.Enabled = True
    .BulNumClear.Caption = "Clear bullets or numbers"
    .OutlineSetupButton.Caption = "Setup outine numbering"
    .BulNumLabel.Caption = ""
  End With
End Sub

Sub GO_ChangeAtoB(n As Long)
Dim n1 As Long
Dim n2 As Long
  With AtoBForm
   .GoChangeNormalButton.Enabled = True
    .StartUpPosition = 0
    .Top = 90
    .Left = hPoints - .Width - 20
      n1 = TrackChangeForm.StyleListBox1.ListIndex
      n2 = TrackChangeForm.StyleListBox2.ListIndex
      If n1 < 0 Or n2 < 0 Then
        MsgBox "Need to select both style A and style B"
        Exit Sub
      End If
    .FromStyleTextbox.Value = StyleName(n1) 'ActiveDocument.Styles(StyleName(n1)) '.NameLocal
    .ToStyleTextbox.Value = StyleName(n2) 'ActiveDocument.Styles(StyleName(n2))
    .PromptCheckbox.Value = True
   .Show
  End With
End Sub

Sub ChangeAtoB(n As Long)
Dim fontSize As Single
Dim aRange As Range
Dim aPara As Paragraph
Dim pTest As Boolean
Dim txt As String
Dim aStyle As String
Dim j As Long
Dim jTotal As Long
Dim jChanged As Long
Dim L As Long
  jTotal = 0
  jChanged = 0
  With AtoBForm
    If .SizeOption Then
      If Not IsNumeric(.SizeValueText.Value) Then
        MsgBox "error in font size"
        Exit Sub
      End If
      fontSize = Val(.SizeValueText.Value)
    End If
    If .PlainTextOption Then
      If Not IsNumeric(.PlainSizeValue.Value) Then
        MsgBox "error in font size"
        Exit Sub
      End If
      fontSize = Val(.PlainSizeValue.Value)
    End If
    .GoChangeNormalButton.Enabled = False
  
    aStyle = .ToStyleTextbox.Value
    ' test if valid style   *****
    Set aRange = Selection.Range
    aRange.Start = Selection.Range.Paragraphs(1).Range.Start
    If aRange.Paragraphs.Count = 1 Then
      aRange.End = ActiveDocument.Range.End
    End If
    If .AllParasOption.Value = True Then
      Global_Change
      GoTo XXT
    End If
  
    For Each aPara In aRange.Paragraphs
    
      If aPara.Style = AtoBForm.FromStyleTextbox.Value Then
      
      pTest = True
      If .BoldCheckBox.Value Then If Not aPara.Range.Bold Then pTest = False
      If .ItalicCheckBox.Value Then If Not aPara.Range.Italic Then pTest = False
      If .UnderlinedCheckbox.Value Then If aPara.Range.Underline = wdUnderlineNone Then pTest = False
      If .CapitalsCheckbox.Value Then
        txt = UCase(aPara.Range.Text)
        If Len(txt) > 2 Then If txt <> aPara.Range.Text Then pTest = False
      End If
      
      If .NumberedCheckbox.Value Then
        L = getParaNumbType(aPara)
        If L = 0 Then ' no numbering
          txt = Left(aPara.Range.Text, 1)
          If txt < "0" Or txt > "9" Then pTest = False
        End If
      End If
        
      If .SizeOption.Value Then If aPara.Range.Font.Size <= fontSize Then pTest = False
      
      If .PlainTextOption.Value Then
        If TestPlainText(aPara) = False Then
          pTest = False
        Else
          If aPara.Range.Font.Size <> fontSize Then pTest = False
        End If
      End If
    
    If pTest Then
      If .PromptCheckbox.Value Then
        jTotal = jTotal + 1
        aPara.Range.Select
        j = MsgBox("Change style of this paragraph to " & aStyle, vbYesNoCancel)
        If j = vbCancel Then GoTo XXT
        If j = vbYes Then
          aPara.Style = ActiveDocument.Styles(aStyle)
          jChanged = jChanged + 1
        End If
      Else
        aPara.Style = ActiveDocument.Styles(aStyle)
        jChanged = jChanged + 1
      End If
    End If
   End If
  Next aPara
XXT:
   If .AllParasOption.Value Then
     If .FromStyleTextbox.Value = .ToStyleTextbox.Value Then
       MsgBox .FromStyleTextbox.Value & " style re-applied in whole document"
     Else
       MsgBox "Changes made in whole document"
     End If
   Else
     MsgBox str(jTotal) & " paragraphs found. " & str(jChanged) & " changed"
   End If
   .GoChangeNormalButton.Enabled = True
  End With
End Sub
Sub GotoDocStart(n As Long)
  ActiveDocument.Range.Characters(1).Select
  Selection.Collapse Direction:=wdCollapseStart
End Sub

Function TestPlainText(aPara As Paragraph) As Boolean
Dim txt As String
Dim fontSize As Single
  TestPlainText = False
  With aPara
    If .Range.Bold = -1 Then Exit Function ' partially bold or italic returns 9999999
    If .Range.Italic = -1 Then Exit Function
    fontSize = ChangeAtoBForm.PlainSizeValue.Value
    If .Range.Font.Size <> fontSize Then Exit Function
    If .Range.Underline <> 0 And .Range.Underline < 999999 Then Exit Function ' value gives type of underline
    txt = aPara.Range.Text
    If Len(txt) = 1 Then Exit Function
    If UCase(txt) = aPara.Range.Text Then Exit Function
    If Left(txt, 1) >= "0" And Left(txt, 1) <= "9" Then Exit Function
    If InStr(txt, Chr(9)) > 0 Then Exit Function
    If getParaNumbType(aPara) > 0 Then Exit Function
  End With
  TestPlainText = True
End Function
Function getParaNumbType(aPara As Paragraph) As Long
Dim L As Long
' 0=no bullet, numbering or outline
' 1=listnum fields in body of para
' 2=listbullet
' 3=simple numeric list
' 4=outline list
' 5=mixed list
' 6=picture bulleted
' BUG. a paragraph that has no list numbering applied returns 1  whereas it really ought to return nothing or 0, or 10, or 9999
' Distinguish unnumbered paragraphs from paragraphs which genuinely have a List Level of 1
  L = aPara.Range.ListFormat.ListType
  If L = 1 Then
    If aPara.Range.ListParagraphs.Count <> 1 Then L = 0
  End If
  getParaNumbType = L
End Function

Sub ShowTrees(n As Long)
' requires a user form named "BasedForm" containing a 450 x 450 listbox named "sListbox"
Dim j As Long
Dim j1 As Long
Dim j2 As Long
Dim j3 As Long
Dim j4 As Long
Dim k As Long
Dim bsty As String
Dim sty1 As String
Dim sty2 As String
Dim sty3 As String
Dim sty4 As String
Dim s As String
Dim styleNames() As String
Dim styy As Style
  System.Cursor = wdCursorWait
  j = -1
  ReDim getstylename(0, 0)
  For Each styy In ActiveDocument.Styles
    If styy.Type = wdStyleTypeParagraph And _
     ((styy.BuiltIn And styy.BaseStyle <> "" And styy.BaseStyle <> "Normal") _
       Or Not styy.BuiltIn) Then
      j = j + 1
      ReDim Preserve styleNames(1, j)
      styleNames(0, j) = styy.NameLocal
      styleNames(1, j) = styy.BaseStyle
    End If
  Next styy
  If j < 0 Then
    MsgBox "There are no custom styles"
    Exit Sub
  Else
    j = UBound(styleNames, 2)
  End If
  With BasedForm.sListbox
     .Clear
     .ColumnCount = 4
     .ColumnHeads = False
     .ColumnWidths = "170;100;100;120"
      .AddItem ""
      .List(0, 0) = "Base Style"
      .List(0, 1) = "Second "
      .List(0, 2) = "Third"
      .List(0, 3) = "Fourth"
  k = 0
  For j1 = 0 To j
    bsty = styleNames(1, j1)
    If bsty <> "" Then
      On Error Resume Next
      If ActiveDocument.Styles(bsty).BuiltIn Then bsty = ""
    End If
    On Error GoTo 0
    If bsty = "" Then
      sty1 = styleNames(0, j1)
      .AddItem
      .AddItem
      k = k + 2
      s = styleNames(1, j1)
      If s = "" Then s = "None"
      .List(k, 0) = sty1 & " (" & s & ")"
      sty2 = ""
      For j2 = 0 To j
        If styleNames(1, j2) = sty1 Then
          sty2 = styleNames(0, j2)
          If .List(k, 1) <> "" Then
            .AddItem
            k = k + 1
            .List(k, 0) = "     ditto"
          End If
          .List(k, 1) = sty2
          sty3 = ""
          For j3 = 0 To j
            If styleNames(1, j3) = sty2 Then
              sty3 = styleNames(0, j3)
              If .List(k, 2) <> "" Then
                .AddItem
                k = k + 1
                .List(k, 0) = "     ditto"
                .List(k, 1) = ""
                .List(k, 2) = ""
               End If
               If .List(k, 2) <> sty3 Then _
               .List(k, 2) = sty3
             sty4 = ""
             .List(k, 3) = ""
             For j4 = 0 To j
               If styleNames(1, j4) = sty3 Then
                 sty4 = styleNames(0, j4)
                 If styleNames(1, j4) = sty4 Then sty4 = sty4 & " + more"
               End If
               
               If styleNames(1, j4) = sty3 Then
                 If .List(k, 3) <> "" Then
                   .AddItem
                   k = k + 1
                   .List(k, 0) = "     ditto"
                   .List(k, 1) = ""
                   .List(k, 2) = ""
                   .List(k, 3) = sty4
                 End If
                   If .List(k, 3) <> sty4 Then
                   .List(k, 2) = sty3
                   .List(k, 3) = sty4
                 End If
               End If
             Next j4
           End If
         Next j3
       End If
     Next j2
   End If
  Next j1
 End With
 System.Cursor = wdCursorNormal
 BasedForm.Show
End Sub

Attribute VB_Name = "AtoBForm"
Attribute VB_Base = "0{8FD643C9-6A22-4B45-BF20-574ABB83DFC9}{35399053-8177-4D8E-8761-DC3F0AE614E1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub BoldCheckBox_Click()
  AtoBForm.ParaCriteriaOption.Value = True
End Sub

Private Sub Cancelbutton_Click()
  AtoBForm.hide
End Sub

Private Sub CapitalsCheckbox_Click()
  AtoBForm.ParaCriteriaOption.Value = True
End Sub

Private Sub DocStartButton_Click()
  GotoDocStart (1)
End Sub

Private Sub GoChangeNormalButton_Click()
   ChangeAtoB (1)
End Sub

Private Sub ItalicCheckBox_Click()
  AtoBForm.ParaCriteriaOption.Value = True
End Sub

Private Sub NumberedCheckbox_Click()
  AtoBForm.ParaCriteriaOption.Value = True
End Sub

Private Sub PlainTextOption_Click()
  AtoBForm.ParaCriteriaOption.Value = True
End Sub

Private Sub SizeOption_Click()
  AtoBForm.ParaCriteriaOption.Value = True
End Sub

Private Sub UnderlinedCheckbox_Click()
  AtoBForm.ParaCriteriaOption.Value = True
End Sub
Attribute VB_Name = "BasedForm"
Attribute VB_Base = "0{4976C91A-D2FE-4974-9696-861FCDE8B03B}{79F33154-ADFB-4749-BD28-5B3961FD91E1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub Cancelbutton_Click()
  BasedForm.hide
End Sub

Attribute VB_Name = "ChangeNumbersModule"
Option Explicit
Dim fromStyle As String
Dim toStyle As String
Dim fontMin As Single
Dim fontMax As Single
Dim fontName As String
Dim fontNameSW As Boolean
Dim fontBold As Boolean
Dim fontItalic As Boolean
Dim fontUnderscore As Boolean
Dim manualV As Integer
Dim autoV As Integer
Dim bulletV As Integer
Dim tableV As Integer
Dim blankV As Integer
Dim indentV As Integer
Dim charMin As Long
Dim charMax As Long
Dim noIndent As Boolean
Dim promptParas As Boolean

Sub StyleNumberChanges(n As Long)
  Call GiveScreenPoints(hPoints, vPoints)
  With ChangeParaStylesForm
    .ToStyleTextbox = "Normal"
    .FromStyleTextbox = "Normal"
    .StartUpPosition = 0
    .Top = 0
    .Left = hPoints - .Width - 12
    .Show
  End With
End Sub

Sub browseStyles(n As Long) ' 0 =from style 1=to style
Dim aStyle As Style
With SelectStyleForm
  .StyleListbox.Clear
  For Each aStyle In ActiveDocument.Styles
    If aStyle.InUse And aStyle.Type = wdStyleTypeParagraph Then
      .StyleListbox.AddItem aStyle.NameLocal
    End If
  Next aStyle
  If n = 0 Then
    .Caption = "From style"
  Else
    .Caption = "To style"
  End If
  .Show
End With
End Sub


Sub readParameters(n As Long)
Dim k As Long
  With ChangeParaStylesForm
    fromStyle = Trim(.FromStyleTextbox)
    toStyle = Trim(.ToStyleTextbox)
    If toStyle = "" Then
      MsgBox "ERROR: Cannot have blank 'To Style'"
    End If
    fontMin = Val(.MinFontsizeTextbox)
    fontMax = Val(.MaxFontsizeTextbox)
    fontName = .FontNameTextbox
    fontNameSW = .FontnameCheckBox
    fontBold = .BoldCheckBox
    fontItalic = .ItalicCheckBox
    fontUnderscore = .UnderscoreCheckBox
    promptParas = .PromptParaCheckbox
    If .ManualNumbNotOption Then manualV = 1
    If .ManualNumbOnlyOption Then manualV = 2
    If .ManualNumbIncludeOption Then manualV = 3
    If .AutoNumbNotOption Then autoV = 1
    If .AutoNumbOnlyOption Then autoV = 2
    If .AutoNumbIncludeOption Then autoV = 3
    If .BulletNotOption Then bulletV = 1
    If .BulletOnlyOption Then bulletV = 2
    If .BulletIncludeOption Then bulletV = 3
    If .TableNotOption Then tableV = 1
    If .TableOnlyOption Then tableV = 2
    If .TableIncludeOption Then tableV = 3
    If .BlankNotOption Then blankV = 1
    If .BlankOnlyOption Then blankV = 2
    If .BlankIncludeOption Then blankV = 3
    If .IndentIncludeOption Then indentV = 1
    If .IndentOnlyOption Then indentV = 2
    If .IndentIncludeOption Then indentV = 3
    charMin = Val(.MinCharsTextbox)
    charMax = Val(.MaxCharsTextbox)
  End With
End Sub

Sub SetPromptResponse(n As Long)
  PromptResponse = n
  PromptResponseForm.hide
End Sub

Sub ChangeParaStyles(n As Long)
Dim aPara As Paragraph
Dim stry As Long
Dim testRange As Range
Dim k As Long
  stry = Selection.Range.StoryType
  readParameters (1)
  
    If toStyle = "" Then
      MsgBox "ERROR in style names"
      Exit Sub
    End If
  Set testRange = Selection.Range
  testRange.Start = testRange.End
  testRange.End = ActiveDocument.StoryRanges(stry).End
  If ChangeParaStylesForm.DocStartOption Then
    testRange.Start = ActiveDocument.StoryRanges(stry).Start
  End If
  k = 0
  For Each aPara In testRange.Paragraphs
'aPara.Range.Select
      If testPara(aPara) Then
        If promptParas Then
          aPara.Range.Select
          CentreOnScreen (True)
          PromptResponse = 0
          With PromptResponseForm
            .StartUpPosition = 0
            .Left = hPoints - .Width
            .Top = 100
            .ApplyLabel = "Apply: " & toStyle
            If ActiveDocument.Styles(toStyle).ListLevelNumber = 1 Then
              PromptResponseForm.RestartButton.Enabled = True
            Else
              PromptResponseForm.RestartButton.Enabled = False
            End If
            .Show ' 0=cancel, 1=apply, 2-No, 3=yes and no more prompt, 4=reset numbering
          End With
          
          If PromptResponse = 0 Then
            ChangeParaStylesForm.CursorStartOption.Value = True
            Exit For
          End If
          If PromptResponse = 1 Or PromptResponse = 3 Or PromptResponse = 4 Then
            aPara.Style = toStyle
            k = k + 1
          End If
          If PromptResponse = 3 Then
            ChangeParaStylesForm.PromptParaCheckbox.Value = False
            promptParas = False
          End If
          If PromptResponse = 4 Then
            With ListGalleries(wdNumberGallery).ListTemplates(1).ListLevels(1)
              .StartAt = 1
              .LinkedStyle = toStyle
            End With
            ListGalleries(wdNumberGallery).ListTemplates(1).Name = ""
              Selection.Range.ListFormat.ApplyListTemplateWithLevel ListTemplate:= _
              ListGalleries(wdNumberGallery).ListTemplates(1), ContinuePreviousList:= _
              False, ApplyTo:=wdListApplyToWholeList, DefaultListBehavior:= _
              wdWord10ListBehavior
           ' CommandBars.FindControl(ID:=6125).Execute ' will cancel change. don't activate
          End If
        Else
          aPara.Style = toStyle
          k = k + 1
        End If
      End If
  Next aPara
  With ChangeParaStylesForm
    If .DocStartOption Then Selection.HomeKey Unit:=wdStory
    .PromptParaCheckbox.Value = True
  End With
  MsgBox str(k) & " changes made"
End Sub

Function testPara(aPara As Paragraph) As Boolean
Dim s As String
Dim L As Long
Dim testSw As Boolean
  testPara = False
  s = Trim(ChangeParaStylesForm.FromStyleTextbox)
  If s <> "" Then If aPara.Style.NameLocal <> s Then Exit Function
  L = aPara.Range.Characters.Count
  If L < charMin Or L > charMax Then Exit Function
  
  If aPara.LeftIndent > 0 Or Left(aPara, 1) = " " Or Left(aPara, 1) = Chr(9) Then
    If indentV = 1 Then Exit Function
  Else
    If indentV = 2 Then Exit Function
  End If
    
  With aPara.Range.Font
    If .Size < fontMin Or .Size > fontMax Then Exit Function
    If fontNameSW Then If .Name <> fontName Then Exit Function
    If fontBold Then If Not .Bold Then Exit Function
    If Not fontBold Then If .Bold Then Exit Function
    If fontItalic Then If Not .Italic Then Exit Function
    If Not fontItalic Then If fontItalic Then Exit Function
    If fontUnderscore Then If Not .Underline Then Exit Function
    If Not fontUnderscore Then If .Underline Then Exit Function
  End With
  s = aPara.Range.Text
  If Left(s, 1) >= "0" And Left(s, 1) <= "9" Then testSw = True Else testSw = False
  If manualV = 1 And testSw Then Exit Function
  If manualV = 2 And Not testSw Then Exit Function
  
  L = aPara.Range.ListFormat.ListType
  If L = 1 Then If aPara.Range.ListParagraphs.Count <> 1 Then L = 0
   ' L=2 = bullets, 3=simple numbering, 4=outline numbering etc.
  If autoV = 1 And L <> 2 And L <> 0 Then Exit Function
  If autoV = 2 And L = 0 Then Exit Function
  If bulletV = 1 And L = 2 Then Exit Function
  If bulletV = 2 And L = 0 Then Exit Function
  
  testSw = aPara.Range.Information(wdWithInTable)
  If tableV = 1 And testSw Then Exit Function
  If tableV = 2 And Not testSw Then Exit Function
  
  If blankV = 1 And Len(s) = 1 Then Exit Function
  If blankV = 2 And Len(s) <> 1 Then Exit Function
  
  testPara = True
End Function

Sub ChangeNumbering(n As Long)
Dim aRange As Range
Dim sPara As String
Dim aPara As Paragraph
Dim k As Long
Dim j As Long
Dim testRange As Range
Dim stry As Long
  stry = Selection.Range.StoryType
  readParameters (1)
  blankV = 1
  manualV = 3
  
  Set testRange = Selection.Range
  testRange.Start = testRange.End
  testRange.End = ActiveDocument.StoryRanges(stry).End
  If ChangeParaStylesForm.DocStartOption Then
    testRange.Start = ActiveDocument.StoryRanges(stry).Start
  End If
  
  k = 0
  For Each aPara In testRange.Paragraphs
    If testPara(aPara) Then
      aPara.Range.Select
      sPara = aPara.Range.Text
      j = Len(sPara)
      Call WordBasic.ToolsBulletsNumbers(Replace:=0, Type:=1, Remove:=1)
      j = j - Len(aPara.Range.Text)
      If j > 0 Then ' ***** paragraph has numbering ******
        If promptParas Then
          CentreOnScreen (True)
          With PromptResponseForm
            .StartUpPosition = 0
            .Left = hPoints - .Width
            .Top = 100
            .ApplyLabel = "Remove numbering:" & vbCrLf & Left(sPara, j)
            .Show ' 0=cancel, 1=apply, 2-No, 3=yes and no more prompt
          End With
        
          If PromptResponse = 0 Or PromptResponse = 2 Then ActiveDocument.Undo
          If PromptResponse = 0 Then
            ChangeParaStylesForm.CursorStartOption.Value = True
            Exit For
          End If
         
          If PromptResponse = 1 Or PromptResponse = 3 Then
            aPara.Style = toStyle
            k = k + 1
          End If
          If PromptResponse = 3 Then
             ChangeParaStylesForm.PromptParaCheckbox.Value = False
             promptParas = False
          End If
        Else
           aPara.Style = toStyle
           k = k + 1
        End If
      End If ' *** has numbering end ***
    End If
  
  Next aPara
  With ChangeParaStylesForm
    If .DocStartOption Then Selection.HomeKey Unit:=wdStory
    .PromptParaCheckbox.Value = True
  End With
  MsgBox str(k) & " changes made"
End Sub
Attribute VB_Name = "ChangeParaStylesForm"
Attribute VB_Base = "0{1C9E9F07-CD40-48F4-A526-60F9708E01BC}{45332990-5878-4FC5-9899-68592B1A02C3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub BoldCheckBox_Click()
  readParameters (1)
End Sub

Private Sub Cancelbutton_Click()
  ChangeParaStylesForm.hide
End Sub

Private Sub FontnameCheckBox_Click()
  readParameters (1)
End Sub

Private Sub FontNameTextbox_Change()
  readParameters (1)
End Sub

Private Sub FontsizeCheckbox_Click()
  readParameters (1)
End Sub

Private Sub FromStyleBrowseButton_Click()
  browseStyles (0)
End Sub

Private Sub FromStyleTextbox_Change()
  readParameters (1)
End Sub

Private Sub GoButton_Click()
  readParameters (1)
  ChangeParaStyles (1)
End Sub

Private Sub GoNumberingButton_Click()
  readParameters (1)
  ChangeNumbering (1)
End Sub

Private Sub Help1_Click()
  HelpFormDisplay (2)
End Sub

Private Sub IndentIncludeOption_Click()
  readParameters (1)
End Sub

Private Sub IndentNotOption_Click()
  readParameters (1)
End Sub

Private Sub IndentOnlyOption_Click()
  readParameters (1)
End Sub

Private Sub ItalicCheckBox_Click()
  readParameters (1)
End Sub

Private Sub ManualNumbNotOption_Click()
  readParameters (1)
End Sub

Private Sub ManualNumbOnlyOption_Click()
  readParameters (1)
End Sub

Private Sub MaxFontsizeTextbox_Change()
  readParameters (1)
End Sub

Private Sub MinFontsizeTextbox_Change()
  readParameters (1)
End Sub

Private Sub ToStyleBrowseButton_Click()
  browseStyles (1)
End Sub

Private Sub ToStyleTextbox_Change()
  readParameters (1)
End Sub

Private Sub UnderscoreCheckBox_Click()
  readParameters (1)
End Sub
Attribute VB_Name = "ClearForm"
Attribute VB_Base = "0{1960CE9F-03E6-4697-96E9-F21D6838B395}{DE3FF96B-E393-452E-A651-251A4128B4FC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub CancelClearButton_Click()
  runClear (0)
End Sub

Private Sub ClearGoButton_Click()
  runClear (1)
End Sub
Attribute VB_Name = "CompareStylesList"
Attribute VB_Base = "0{8FB50ED6-F0D3-4032-81B2-D85726023396}{DA7BB150-14A6-4BD1-8FE3-0D4F7381019A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub CompareOK_Click()
  CompareStylesList.hide
End Sub

Attribute VB_Name = "CopyModule"
Option Explicit

Dim fullDocName() As String
Dim errorCount

Sub SetupCopyStyles(n As Long)
Dim docs()
Dim k As Long
Dim j As Long
Dim aDoc As Document
  k = Documents.Count
  If k < 2 Then
    MsgBox "From and to documents must be both open"
    Exit Sub
  End If
  ReDim fullDocName(0)
  With CopyStylesForm
.Show
    If Application.Version = 14 Then
      .Word2010Label = "WARNING. Word2010 has a bug in the Documents collection"
    Else
      .Word2010Label = ""
    End If
    .FromListbox.Clear
    .FromListbox.ColumnWidths = "180"
    .ToListbox.Clear
    .ToListbox.ColumnWidths = "180"
    For j = 1 To k
      Set aDoc = Documents(j)
      ReDim Preserve fullDocName(j)
      fullDocName(j - 1) = aDoc.FullName
      .FromListbox.AddItem aDoc.Name
      .ToListbox.AddItem aDoc.Name
    Next j
    .ParaOptionButton.Value = True
    .Show
  End With
End Sub


Sub Go_Copy(n As Long)
Dim fromDoc As String
Dim toDoc As String
Dim fromDocument As Document
Dim fromStyleName As String
Dim aStyle As Style
Dim copyCount As Long
Dim jWhat As Long
Dim k As Long
Dim j As Long
  With CopyStylesForm
    copyCount = 0
    errorCount = 0
    .ResultLabel = "Nothing was copied"
    k = .FromListbox.ListIndex
    If k < 0 Then
      MsgBox "From document not chosen"
      Exit Sub
    End If
    fromDoc = fullDocName(k)
    j = .ToListbox.ListIndex
    If j < 0 Then
      MsgBox "From document not chosen"
      Exit Sub
    End If
    toDoc = fullDocName(j)
    If fullDocName(k) = fullDocName(j) Then
      MsgBox "ERROR. Same from and to docs chosen"
      Exit Sub
    End If
 
    If .ParaOptionButton.Value Then jWhat = 1
    If .CustonOptionButton.Value Then jWhat = 2
    If .HeadingOptionButton.Value Then jWhat = 3
    If .NormalOptionButton.Value Then jWhat = 4
    If .AllOptionButton.Value Then jWhat = 5
    If .TableStylesOption.Value Then jWhat = 6
  End With
  
  Set fromDocument = Documents(fromDoc)
  fromDocument.Activate
  Select Case jWhat
    Case 1  ' selected paragraph style
 '     fromDocument.Activate
      fromStyleName = Selection.Range.Paragraphs(1).Style.NameLocal
      copyCount = copyCount + copyStyle(fromDocument.Styles(fromStyleName), fromDoc, toDoc)
    Case 2  ' custom styles
      For Each aStyle In fromDocument.Styles
        If Not aStyle.BuiltIn Then
          copyCount = copyCount + copyStyle(aStyle, fromDoc, toDoc)
        End If
      Next aStyle
    Case 3  ' heading styles
      For Each aStyle In fromDocument.Styles
        If InStr(aStyle.NameLocal, "Heading") > 0 Then
          copyCount = copyCount + copyStyle(aStyle, fromDoc, toDoc)
        End If
      Next aStyle
    Case 4  ' Normal style
      copyCount = copyCount + copyStyle(fromDocument.Styles("Normal"), fromDoc, toDoc)
    Case 5  ' All
      For Each aStyle In fromDocument.Styles
        copyCount = copyCount + copyStyle(aStyle, fromDoc, toDoc)
      Next aStyle
    Case 6  ' table styles
      For Each aStyle In fromDocument.Styles
        If aStyle.Type = wdStyleTypeTable Then
          If Not aStyle.BuiltIn Then
            Application.OrganizerCopy Source:=fromDoc, _
            Destination:=toDoc, Name:=aStyle.NameLocal, _
            Object:=wdOrganizerObjectStyles
            copyCount = copyCount + 1
          End If
        End If
      Next aStyle
  End Select

  With CopyStylesForm
  .ResultLabel = Trim(str(copyCount)) & " styles copied from " & _
    .FromListbox.List(k) & " to " & .ToListbox.List(j) & "  " & str(errorCount) & " errors"
  End With
  If errorCount = 0 Then Documents(toDoc).Activate
End Sub

Function copyStyle(ByVal aStyle As Style, frDoc As String, toDoc As String) As Long
Dim sty As String
  copyStyle = 0
  On Error GoTo StERR
  sty = aStyle.NameLocal
  If aStyle.Type <> wdStyleTypeParagraph And Not CopyStylesForm.CharacterCheckbox Then Exit Function
  If Not CopyStylesForm.ParagraphOnlyCheckbox Then
    If Not aStyle.InUse Then
      Selection.GoTo What:=wdGoToBookmark, Name:="\EndofDoc"
      Selection.Text = vbCrLf & "Dummy text"
      Selection.Style = aStyle
      Selection.Delete
    End If
  End If
  Application.OrganizerCopy Source:=frDoc, _
    Destination:=toDoc, Name:=sty, _
    Object:=wdOrganizerObjectStyles
  copyStyle = 1
  Exit Function
StERR:
  errorCount = errorCount + 1
End Function



Attribute VB_Name = "CopyStylesForm"
Attribute VB_Base = "0{DAF14FC2-113A-46B4-ACA6-EF832796AC35}{5D93440D-2909-4D74-B11B-9D5946E946EB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub Closebutton_Click()
  CopyStylesForm.hide
End Sub

Private Sub CopyButton_Click()
  Go_Copy (1)
End Sub



Attribute VB_Name = "FirstForm"
Attribute VB_Base = "0{FCF45D8D-7AB1-4570-817E-0EA34F624563}{B851F79A-3F06-4CC2-B335-329677574406}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub BulkChangeButton_Click()
  FirstForm.hide
  StyleNumberChanges (1)
End Sub

Private Sub CancelActionButton_Click()
  FirstForm.hide
End Sub

Private Sub DisplayStylesButton_Click()
  FirstForm.hide
  OpenStyleUtilities (1)
End Sub

Private Sub HelpFirstformButton_Click()
  HelpFormDisplay (0)
End Sub
Attribute VB_Name = "HelpForm"
Attribute VB_Base = "0{DFB29F8F-A33D-4B7A-A9CE-6FE1C4D3B457}{6A226BA0-3517-4D79-810C-D10C65588840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub HelpCancelButton_Click()
  HelpForm.hide
End Sub

Private Sub URLlabel_Click()
  ActiveDocument.FollowHyperlink HelpForm.URLlabel.Caption
End Sub
Attribute VB_Name = "HelpModule"
Option Explicit
Sub HelpFormDisplay(n As Long)
Dim s As String
 If n = 1 Then
  With HelpForm.Helptxt0
    s = "SHOW STYLES" & vbCrLf
    s = s & "The default for the A and B lists is to show only styles that are actually used in the document. " & _
        "Click 'Show all available styles' to display all inbuilt styles plus user defined styles." & vbCrLf & vbCrLf
    s = s & _
     "ALLOCATE STYLES TO HOT KEYS" & vbCrLf & _
     "Styles can be selected in either the A or B lists and the hot keys ALT/Q and ALT/E apply to these styles. " & _
     "Another four hot keys can be allocated by selecting a style in list A and clicking the adjacent Load button."
    .Caption = s
  End With
  
  With HelpForm.HelpTxt1
    s = "CHANGE PARAGRAPH STYLES" & vbCrLf
    s = s & "Select part of a paragraph or several contiguous paragraphs and press the hotkey or click the button. " & _
        "The style of the paragraphs will be changed and the selection will move to the following paragraph"
    .Caption = s
  End With
  
  With HelpForm.HelpTxt2
    s = "GO TO STYLE" & vbCrLf
    s = s & "The Go to Style buttons will find the next use of the style from the cursor position."
    .Caption = s
  End With
  
  With HelpForm.HelpTxt3
    s = "CHANGE STYLE A TO STYLE B OR RE-APPLY STYLE" & vbCrLf
    s = s & "1.  Change all paragraphs that have style A to style B. If A = B then style is re-applied" & vbCrLf & _
        "2.  Change only selected paragraphs with style A and a combinations of" & vbCrLf & _
        "       bold, capitals, italic, underlined, font size greater than specified or are numbered," & vbCrLf & _
        "       or are plain text style A and with a specified font size but no other attributes." & vbCrLf & _
        "If Delete blank paragraphs is checked then as paragraph styles are changed and blank paragraphs are removed."
    .Caption = s
  End With
  
  With HelpForm.HelpTxt4
    s = "STYLE USEAGE AND REMOVAL" & vbCrLf
    s = s & "Gives counts of the number of times styles are used in the document. " & _
        "The option is given to delete unused user defined styles. Warning - can be slow on large documents"
    .Caption = s
  End With
  With HelpForm.Helptxt5
    s = "REMOVE MANUAL FONT CHANGES" & vbCrLf & _
      "If this is checked then when style changes are made any manual font changes in the paragraph(s) will be removed and the font settings in the style will apply."
    .Caption = s
   End With
 Else
   If n = 0 Then
     With HelpForm.Helptxt0
     s = "DISPLAY & EDIT STYLES." & vbCrLf & _
     "Creates lists of all styles, only styles used in the document or custom styles. Individual styles can edited or deleted or applied to paragraphs in the document."
     s = s & vbCrLf & vbCrLf & "BULK CHANGE PARAGRAPH STYLES" & vbCrLf & _
         "This tool is used to setup styles in a multiple paragraphs. It is particularly useful where the author has used all Normal styles with manual formatting. Also, it will apply numbered styles where there is manual numbering."
     s = s & vbCrLf & ""
    
    .Caption = s
   End With
   With HelpForm.HelpTxt1
    .Caption = ""
   End With
   With HelpForm.HelpTxt2
    .Caption = ""
   End With
   With HelpForm.HelpTxt3
    .Caption = ""
   End With
   With HelpForm.HelpTxt4
    .Caption = ""
   End With
   With HelpForm.Helptxt5
     .Caption = ""
   End With
   
   Else
     With HelpForm.Helptxt0
       s = "BULK CHANGE PARAGRAPH STYLES" & vbCrLf
       s = s & "This tool helps format an unstyled document." & vbCrLf & _
       "It applies a specified style to paragraphs that meet a list of characteristics. "
       s = s & "The tool can also detect paragraphs that have manual numbering, delete the manual numbering and apply a numbered style." & vbCrLf & _
        vbCrLf
      s = s & "GO STYLES ONLY" & vbCrLf & "Applies style to paragraphs that meet specifications"
      .Caption = s
    End With
  
     With HelpForm.HelpTxt1
     s = "GO NUMBERING" & vbCrLf & "Finds manually numbered paragraphs that also meet other specifications, removes the numbering and applies style"
      .Caption = s
     End With
     With HelpForm.HelpTxt2
      .Caption = ""
     End With
    
     With HelpForm.HelpTxt3
       s = "TYPICAL STEPS" & vbCrLf
        s = s & "1. Backup document" & vbCrLf & _
        "2. Copy into document or create desired styles" & vbCrLf & _
        "3. Process headings then body text, manually numbered, bulleted" & vbCrLf & _
        "4. Special paragraphs such as indented, italicised etc." & vbCrLf
        s = s & "5. Short paragraphs, blank lines etc."
      .Caption = s
     End With
      With HelpForm.HelpTxt4
      .Caption = ""
     End With
     With HelpForm.Helptxt5
       .Caption = ""
     End With
   End If
 
 End If
  HelpForm.Show
End Sub
Attribute VB_Name = "PromptResponseForm"
Attribute VB_Base = "0{1789C1CF-7D07-4D9E-BACD-A092763B6925}{DD0B6A6D-86CE-4FA3-9BFE-916C582790BC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub Cancelbutton_Click()
  SetPromptResponse (0)
End Sub

Private Sub YesButton_Click()
  SetPromptResponse (1)
End Sub

Private Sub NoButton_Click()
  SetPromptResponse (2)
End Sub

Private Sub NoPromptbutton_Click()
  SetPromptResponse (3)
End Sub

Private Sub RestartButton_Click()
  SetPromptResponse (4)
End Sub
Attribute VB_Name = "SelectStyleForm"
Attribute VB_Base = "0{563E1540-7179-4A33-A641-074294A007C2}{421A7F3D-FDFA-45A4-8E1C-1DDDE704C263}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub SelectStyleButton_Click()
Dim L As Long
  L = SelectStyleForm.StyleListbox.ListIndex
  If L = -1 Then Exit Sub
  If SelectStyleForm.Caption = "From style" Then
    ChangeParaStylesForm.FromStyleTextbox = SelectStyleForm.StyleListbox.List(L)
  Else
    ChangeParaStylesForm.ToStyleTextbox = SelectStyleForm.StyleListbox.List(L)
  End If
  SelectStyleForm.hide
End Sub

Private Sub SelectStyleCancelButton_Click()
  SelectStyleForm.hide
End Sub
Attribute VB_Name = "StyleUsage"
Attribute VB_Base = "0{88E5FBFC-EC84-4C01-8519-D56F3AF965B9}{17A5DC7E-A699-47C6-BFEF-E580718E48A5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub AllStyleUsageOption_Click()
  ShowStyleCounts (1)
End Sub

Private Sub CancelUsageButton_Click()
  Cancel_ShowUsage (1)
End Sub

Private Sub DeleteStylesButton_Click()
  Delete_Unused_styles (False)
End Sub

Private Sub SelectAllButton_Click()
  toggleAll (1)
End Sub

Private Sub UnusedCustomOption_Click()
  DisplayUnused (1)
End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TrackChangeForm"
Attribute VB_Base = "0{9599F296-B705-45CA-8D92-1546D21DAE3A}{05095AD9-AC74-4DBC-9DAA-5998755B2FD1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit


Private Sub AdditionalButton_Click()
 Show_additional (1)
End Sub


Private Sub ALTEButton_Click()
  hot_Key2 (1)
End Sub

Private Sub ALTQButton_Click()
  hot_Key1 (1)
End Sub

Private Sub Cancelbutton_Click()
  TrackChangeForm.hide
End Sub


Private Sub CommandButton1_Click()
  SetupCopyStyles (1)
End Sub

Private Sub CreateNewStyleButton_Click()
  CreateNewStyle (1)
End Sub

Private Sub Find1Button_Click()
  find_style1 (1)
End Sub

Private Sub Find2Button_Click()
  find_style2 (1)
End Sub

Private Sub GlobalChangeButton_Click()
  GO_ChangeAtoB (1)
End Sub

Private Sub HelpButton_Click()
  HelpFormDisplay (1)
End Sub

Private Sub LoadALTRButton_Click()
  Load_ALTR (1)
End Sub

Private Sub LoadALTTRButton_Click()
  Load_ALTT (1)
End Sub

Private Sub LoadALTUButton_Click()
  Load_ALTU (1)
End Sub

Private Sub LoadALTYButton_Click()
 Load_ALTY (1)
End Sub

Private Sub MoreButton_Click()
  Toggle_Styles (1)
End Sub

Private Sub NextParagraphButton_Click()
  next_Paragraph (True)
End Sub
Private Sub PrevParagraphButtom_Click()
  next_Paragraph (False)
End Sub

Private Sub PaneButton_Click()
  Toggle_Pane (1)
End Sub

Private Sub ShowStylesButton_Click()
  Toggle_ShowAllStyles (1)
End Sub

Private Sub CustomStylesButton_Click()
  Toggle_ShowAllStyles (0)
End Sub

Private Sub ShowInuseButton_Click()
  Toggle_ShowAllStyles (2)
End Sub

Private Sub ShowUse_Click()
  ShowStyleCounts (1)
End Sub

Private Sub StyleListBox1_Click()
  'Loadfornumbering (1)
End Sub

Private Sub StyleTreesButton_Click()
  ShowTrees (1)
End Sub

Private Sub ToggleViewButton_Click()
  toggle_view (1)
End Sub

Private Sub UseRButton_Click()
  ALTR_key
End Sub

Private Sub UseTButton_Click()
  ALTT_key
End Sub

Private Sub UseUbutton_Click()
  ALTU_key
End Sub

Private Sub UseYButton_Click()
  ALTY_key
End Sub
Attribute VB_Name = "UtilityPrograms"
Option Explicit
' can also use #If VBA7 to see if working in VBA 7 environment

#If Win64 Then
  Private Declare PtrSafe Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare PtrSafe Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare PtrSafe Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
 ' MsgBox "64 bit version"
#Else
  Private Declare Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
'MsgBox "32 bit version"
#End If

Const LogpixelsX = 88
Const LogpixelsY = 90
Const TWIPSPerInch = 1440
Private Const SM_CXFullscreen = 16 ' also 0 gives overall screenwidth
Private Const SM_CYFullscreen = 17 ' 1 gives overall, 17 gives useable excluding taskbars

Private Sub ConvertPixelsToPoints(ByRef x As Single, ByRef y As Single)
Dim hDC As Long
Dim RetVal As Long
Dim XPixelsPerInch As Long
Dim YPixelsPerInch As Long
    hDC = GetDC(0)
    XPixelsPerInch = GetDeviceCaps(hDC, LogpixelsX)
    YPixelsPerInch = GetDeviceCaps(hDC, LogpixelsY)
    RetVal = ReleaseDC(0, hDC)
    x = x * TWIPSPerInch / 20 / XPixelsPerInch
    y = y * TWIPSPerInch / 20 / YPixelsPerInch
End Sub
Sub GiveScreenPoints(ByRef scx As Single, ByRef scy As Single)
Dim wt As Single
Dim ht As Single
 wt = GetSystemMetrics(SM_CXFullscreen)
 ht = GetSystemMetrics(SM_CYFullscreen)
 ConvertPixelsToPoints wt, ht
 scx = wt
 scy = ht
End Sub
 
 




INQUEST-PP=macro
