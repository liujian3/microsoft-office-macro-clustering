Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

Dim sh As Worksheet
Dim found As Boolean

    If Target.Column = 11 And (Target.Interior.ColorIndex = 40 Or Target.Interior.ColorIndex = 36) Then
        If InStr(1, ActiveSheet.name, "BES") = 0 Then
            MsgBox "Die Funktion muss aus der Bestelllisten-Tabelle gestartet werden!!", vbOKOnly, "Falsche Tabelle"
            Exit Sub
        End If
        For Each sh In ActiveWorkbook.Sheets
            If sh.name = "TP IL01" Then
                found = True
                Exit For
            End If
        Next sh
        If found = True Then
            Application.Run "SLE_067.xlam!bas_MV.List"
        Else
            Application.Run "bas_MV.List"
        End If
        Cancel = True
    End If
    If Target.Column = 9 And Target.Interior.ColorIndex = 34 Then
        For Each sh In ActiveWorkbook.Sheets
            If sh.name = "TP IL01" Then
                found = True
                Exit For
            End If
        Next sh
        If found = True Then
            Application.Run "SLE_067.xlam!bas_MV.Doks"
        Else
            Application.Run "bas_MV.Doks"
        End If
        Cancel = True
    End If

End Sub
Attribute VB_Name = "Tabelle13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Private Sub CommandButton1_Click()

Columns("Y:AE").Select

If Columns("Y:AE").Hidden = False Then
    
    Selection.EntireColumn.Hidden = True
    
    Else
    
    Selection.EntireColumn.Hidden = False
    
    End If
    
ActiveSheet.Range("A1").Select

If Columns("Y:AE").Hidden = False Then

CommandButton1.BackColor = RGB(146, 208, 80)

Else

CommandButton1.BackColor = RGB(255, 0, 0)

End If
    
End Sub
Attribute VB_Name = "Tabelle16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdDoks, 1, 0, MSForms, CommandButton"
Private Sub cmdDoks_Click()

Dim sh As Worksheet
Dim found As Boolean

    For Each sh In ActiveWorkbook.Sheets
        If sh.name = "Fehlerprotokoll" And Right(ActiveWorkbook.FullName, 8) <> "_FP.xlsb" Then
            found = True
            Exit For
        End If
    Next sh
    If found = True Then
        MsgBox "Der Button funktioniert in dieser Arbeitsmappe nicht. F|fffd|hren Sie bitte die gesamte Dokumentenpr|fffd|fung mit neuem Pfad durch!", vbOKOnly, "Dokumentenpfad"
    Else
        bas_Doks.subDokPath
    End If

End Sub

Private Sub Worksheet_Activate()

Dim dp As Object
        Set dp = ActiveWorkbook.BuiltinDocumentProperties
        dp("Hyperlink base") = Worksheets("Doks").Cells(4, 3).Value

End Sub

Private Sub Worksheet_Deactivate()

Dim dp As Object
        Set dp = ActiveWorkbook.BuiltinDocumentProperties
        dp("Hyperlink base") = ""

End Sub

Attribute VB_Name = "Tabelle17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Activate()

Dim dp As Object
        Set dp = ActiveWorkbook.BuiltinDocumentProperties
        dp("Hyperlink base") = Worksheets("Doks").Cells(4, 3).Value

End Sub

Private Sub Worksheet_Deactivate()

Dim dp As Object
        Set dp = ActiveWorkbook.BuiltinDocumentProperties
        dp("Hyperlink base") = ""

End Sub
Attribute VB_Name = "Tabelle28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

Dim sh As Worksheet
Dim found As Boolean

    If Target.Column = 11 And (Target.Interior.ColorIndex = 40 Or Target.Interior.ColorIndex = 36) Then
        If InStr(1, ActiveSheet.name, "BES") = 0 Then
            MsgBox "Die Funktion muss aus der Bestelllisten-Tabelle gestartet werden!!", vbOKOnly, "Falsche Tabelle"
            Exit Sub
        End If
        For Each sh In ActiveWorkbook.Sheets
            If sh.name = "TP IL01" Then
                found = True
                Exit For
            End If
        Next sh
        If found = True Then
            Application.Run "SLE_067.xlam!bas_MV.List"
        Else
            Application.Run "bas_MV.List"
        End If
        Cancel = True
    End If
    If Target.Column = 9 And Target.Interior.ColorIndex = 34 Then
        For Each sh In ActiveWorkbook.Sheets
            If sh.name = "TP IL01" Then
                found = True
                Exit For
            End If
        Next sh
        If found = True Then
            Application.Run "SLE_067.xlam!bas_MV.Doks"
        Else
            Application.Run "bas_MV.Doks"
        End If
        Cancel = True
    End If

End Sub
'
'Private Sub Worksheet_Change(ByVal Target As Range)
'
'Dim werte
'Dim i As Byte
'Dim j As Byte
'
'    If Target.Column = 11 And Cells(Target.Row, Target.Column) <> "" Then
'        If IsNumeric(Replace(Cells(Target.Row, Target.Column), "/", "")) = True Then
'            If InStr(1, Cells(Target.Row, Target.Column), "/") <> 0 Then
'                werte = Split(Cells(Target.Row, Target.Column), "/")
'                For i = 0 To UBound(werte, 1)
'                    Cells(Target.Row, 27 + i) = CStr(werte(i))
'                    Cells(Target.Row, 27 + i).Interior.ColorIndex = xlNone
'                Next
'                For j = i To 2
'                    Cells(Target.Row, 27 + i).Interior.ColorIndex = 3
'                Next
'            Else
'                Cells(Target.Row, 27) = Cells(Target.Row, Target.Column)
'                Cells(Target.Row, 28).Interior.ColorIndex = 3
'                Cells(Target.Row, 29).Interior.ColorIndex = 3
'            End If
'        Else
'            MsgBox "Es sind nur Zahlen und '/' erlaubt!! Beispiel: 2/1/50", vbOKOnly, "Eingabe fehlerhaft"
'            Cells(Target.Row, Target.Column) = ""
'        End If
'    ElseIf Target.Column = 11 And Cells(Target.Row, Target.Column) = "" Then
'        Cells(Target.Row, 27) = ""
'        Cells(Target.Row, 27).Interior.ColorIndex = xlNone
'        Cells(Target.Row, 28) = ""
'        Cells(Target.Row, 28).Interior.ColorIndex = xlNone
'        Cells(Target.Row, 29) = ""
'        Cells(Target.Row, 29).Interior.ColorIndex = xlNone
'    End If
'
'End Sub
Attribute VB_Name = "Tabelle9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

    If Target.Column = 7 And Cells(Target.Row, Target.Column).Interior.ColorIndex = 34 Then
        If Not Cells(Target.Row, 8).Comment Is Nothing Then
            Cells(Target.Row, 8) = Cells(Target.Row, 8).Comment.text
            Cells(Target.Row, 8).Comment.Delete
        End If
    End If
    Cancel = True

End Sub
Attribute VB_Name = "bas_Doks"
Option Private Module

Sub subDokPath()

Dim strOrdner As String
Dim myLink As Hyperlink
Dim bytDok As Byte
Dim rngFound As Range

    If ActiveWorkbook.name = gMyFileName Then
        MsgBox usrXML.funMSG(15, ""), vbOKOnly, usrXML.funMSGtitle(15, "")
        Exit Sub
    End If

    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Dokumentenpfad"
        .ButtonName = "Auswahl..."
        .InitialView = msoFileDialogViewList
        If .Show = -1 Then
            strOrdner = ActiveSheet.Cells(4, 3)
            ActiveSheet.Cells(4, 3) = .SelectedItems(1) & "\"
            If Right(strOrdner, 1) <> "\" Then strOrdner = strOrdner & "\"
        Else
            strOrdner = ""
        End If
    End With

'Absoluter Hyperlink
Dim dp As Object
    Set dp = ActiveWorkbook.BuiltinDocumentProperties
    dp("Hyperlink base") = strOrdner

    With ActiveSheet
        If strOrdner <> .Cells(4, 3) Then
            For Each myLink In .Hyperlinks
                If Len(.Cells(4, 3) & .Cells(myLink.Range.Row, 4)) < 255 Then
                    myLink.Address = .Cells(4, 3) & .Cells(myLink.Range.Row, 4)
'                    .Cells(myLink.Range.Row, 5) = ""
'                    .Cells(myLink.Range.Row, 5).Interior.ColorIndex = xlNone
                Else
                    myLink.Address = ""
                    .Cells(myLink.Range.Row, 5) = "Dateilink (" & Len(.Cells(4, 3) & .Cells(myLink.Range.Row, 4)) & ", " & Len(.Cells(myLink.Range.Row, 4)) & ") >= 255 Zeichen"
                    .Cells(myLink.Range.Row, 5).Interior.ColorIndex = 3
                End If
            Next
            If TabDa("BES") Then
                bytDok = 0
                Set rngFound = Worksheets("BES").Range("1:1").Find("Doku-Team", LookIn:=xlValues)
                If Not rngFound Is Nothing Then bytDok = 1
                Set rngFound = Nothing
                Worksheets("BES").Cells(1, 36 + bytDok) = .Cells(4, 3)
            End If
            If TabDa("eBES") Then
                bytDok = 0
                Set rngFound = Worksheets("eBES").Range("1:1").Find("Doku-Team", LookIn:=xlValues)
                If Not rngFound Is Nothing Then bytDok = 1
                Set rngFound = Nothing
                Worksheets("eBES").Cells(1, 36 + bytDok) = .Cells(4, 3)
            End If
            If TabDa("fBES") Then
                bytDok = 0
                Set rngFound = Worksheets("fBES").Range("1:1").Find("Doku-Team", LookIn:=xlValues)
                If Not rngFound Is Nothing Then bytDok = 1
                Set rngFound = Nothing
                Worksheets("fBES").Cells(1, 36 + bytDok) = .Cells(4, 3)
            End If
            MsgBox usrXML.funMSG(30, ""), vbOKOnly, usrXML.funMSGtitle(30, "")
        End If
    End With

End Sub

Function TabDa(ByVal Tabelle As String, Optional ByVal wb As String) As Boolean

Dim tbl As Worksheet

    On Error Resume Next
    If wb <> "" Then
        Set tbl = Workbooks(wb).Worksheets(Tabelle)
    Else
        Set tbl = Worksheets(Tabelle)
    End If
    TableExist = Err.Number = 0
    Set tbl = Nothing

 End Function


Attribute VB_Name = "bas_MV"
Option Private Module

Public gstrSLE As String

Public Sub List()

Dim i As Long
Dim listi As Long
Dim slei As Integer
Dim tabe As String

'Dim wb As Workbook

    If ActiveCell.Column = 11 And (ActiveCell.Interior.ColorIndex = 40 Or ActiveCell.Interior.ColorIndex = 36) Then
        If InStr(1, ActiveSheet.name, "BES") = 0 Then
            MsgBox usrXML.funMSG(89, ""), vbOKOnly, usrXML.funMSGtitle(89, "")
            Exit Sub
        End If
        For i = 1 To ActiveSheet.Cells(1, Columns.Count).End(xlToLeft).Column
            If ActiveSheet.Cells(1, i) = "SLE_ID" Then
                slei = i
                Exit For
            End If
        Next
        'Set wb = Workbooks(gMyFileName).VBProject.
        If ActiveSheet.name = "BES" Or ActiveSheet.name = "Delta_BES" Then
            tabe = "ErgAehnlich"
        Else
            tabe = "eErgAehnlich"
        End If
        If Not MVTableExist(tabe) Then
            MsgBox usrXML.funMSG(90, ""), vbOKOnly, usrXML.funMSGtitle(90, "")
            Exit Sub
        End If
        i = 2
        With Worksheets(tabe)
            listi = 0
'            usrMV.lstMV.Clear
            While .Cells(i, 1) <> ""
                If .Cells(i, 2) = ActiveSheet.Cells(ActiveCell.Row, slei) And .Cells(i, 7) <> "" And .Cells(i, 8) <> "" Then
'                    usrMV.lstMV.AddItem
'                    usrMV.lstMV.List(listi, 0) = .Cells(i, 1)
'                    usrMV.lstMV.List(listi, 1) = .Cells(i, 3)
'                    usrMV.lstMV.List(listi, 2) = .Cells(i, 4)
'                    usrMV.lstMV.List(listi, 3) = .Cells(i, 5)
'                    usrMV.lstMV.List(listi, 4) = .Cells(i, 6)
                    usrMV.lstMV2.Rows = usrMV.lstMV2.Rows + 1
                    usrMV.lstMV2.RowHeight(usrMV.lstMV2.Rows - 1) = .Rows(i).RowHeight * 7
                    If usrMV.lstMV2.RowHeight(usrMV.lstMV2.Rows - 1) < 240 Then usrMV.lstMV2.RowHeight(usrMV.lstMV2.Rows - 1) = 240
                    usrMV.lstMV2.TextMatrix(usrMV.lstMV2.Rows - 1, 1) = .Cells(i, 1)
                    usrMV.lstMV2.TextMatrix(usrMV.lstMV2.Rows - 1, 2) = .Cells(i, 4)
                    usrMV.lstMV2.TextMatrix(usrMV.lstMV2.Rows - 1, 3) = .Cells(i, 5)
                    usrMV.lstMV2.TextMatrix(usrMV.lstMV2.Rows - 1, 4) = .Cells(i, 6)
                    usrMV.lstMV2.TextMatrix(usrMV.lstMV2.Rows - 1, 5) = .Cells(i, 3)
                    usrMV.lstMV2.TextMatrix(usrMV.lstMV2.Rows - 1, 6) = .Cells(i, 11)
                    usrMV.lstMV2.TextMatrix(usrMV.lstMV2.Rows - 1, 7) = .Cells(i, 7)
                    usrMV.lstMV2.TextMatrix(usrMV.lstMV2.Rows - 1, 8) = .Cells(i, 8)
                    usrMV.lstMV2.TextMatrix(usrMV.lstMV2.Rows - 1, 9) = .Cells(i, 9)
                    listi = listi + 1
                End If
                i = i + 1
            Wend
        End With
        usrMV.Show 1
    End If

End Sub

Public Sub Doks()

Dim i As Long
Dim listi As Long
Dim slei As Integer
Dim tabe As String

'Dim wb As Workbook

    If ActiveCell.Column = 9 Then
        If InStr(1, ActiveSheet.name, "BES") = 0 Then
            MsgBox usrXML.funMSG(89, ""), vbOKOnly, usrXML.funMSGtitle(89, "")
            Exit Sub
        End If
        For i = 1 To ActiveSheet.Cells(1, Columns.Count).End(xlToLeft).Column
            If ActiveSheet.Cells(1, i) = "SLE_ID" Then
                slei = i
                Exit For
            End If
        Next
        gstrSLE = ActiveSheet.Cells(ActiveCell.Row, slei)
        usrDokAnMat.Show 1
    End If

End Sub

Function MVTableExist(ByVal Tabelle As String, Optional ByVal wb As String) As Boolean

Dim tbl As Worksheet

    On Error Resume Next
    If wb <> "" Then
        Set tbl = Workbooks(wb).Worksheets(Tabelle)
    Else
        Set tbl = Worksheets(Tabelle)
    End If
    MVTableExist = Err.Number = 0
    Set tbl = Nothing

 End Function

Attribute VB_Name = "usrDokAnMat"
Attribute VB_Base = "0{B0E0730C-B560-407A-8B0D-815ED1C864D8}{0EA89EB6-C4C7-455E-B172-5ABCAE56BE87}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub lstJournal_DblClick(ByVal Cancel As MSForms.ReturnBoolean)

Dim rngFound As Range
Dim bytDok As Byte

    bytDok = 0
    Set rngFound = ActiveSheet.Range("1:1").Find("Doku-Team", LookIn:=xlValues)
    If Not rngFound Is Nothing Then bytDok = 1
    Set rngFound = Nothing

    If Dir(ActiveSheet.Cells(1, 36 + bytDok) & lstJournal.List(lstJournal.ListIndex, 2)) <> "" Then
        CreateObject("WScript.Shell").Run """" & ActiveSheet.Cells(1, 36 + bytDok) & lstJournal.List(lstJournal.ListIndex, 2) & """"
    Else
        MsgBox usrXML.funMSG(9, ""), , usrXML.funMSGtitle(9, "")
    End If

End Sub

Private Sub UserForm_Initialize()

Dim i As Long
Dim S As Long
Dim sleid As Long
Dim rngFound As Range
Dim bytDok As Byte

    bytDok = 0
    Set rngFound = ActiveSheet.Range("1:1").Find("Doku-Team", LookIn:=xlValues)
    If Not rngFound Is Nothing Then bytDok = 1
    Set rngFound = Nothing

'    For i = 1 To AddIns.Count
'        If InStr(1, UCase(AddIns(i).name), "SLE") Then
'            If AddIns(i).Installed = True And AddIns(i).IsOpen = True And InStr(1, UCase(AddIns(i).Author), "CONZEN") <> 0 Then
'                gstrFile = AddIns(i).name
'            End If
'        End If
'    Next
'    For i = 1 To ActiveSheet.Cells(1, Columns.Count).End(xlToLeft).Column
'        If ActiveSheet.Cells(1, i) = "SLE_ID" Then
'            sleid = i
'            Exit For
'        End If
'    Next

    If bas_MV.gstrSLE <> "" Then
        With Worksheets("Zuordnungsliste")
            lstJournal.ColumnCount = 3
            lstJournal.ColumnWidths = "60;200;460"
            Set rngFound = .Columns(8).Find(What:=bas_MV.gstrSLE, LookIn:=xlValues, LookAt:=xlWhole)
            If Not rngFound Is Nothing Then
                S = rngFound.Row
                Do
                    If ActiveSheet.Cells(1, 36 + bytDok) <> "" Then
                        lstJournal.AddItem
                        lstJournal.List(lstJournal.ListCount - 1, 0) = .Cells(rngFound.Row, 2) & "\" & .Cells(rngFound.Row, 7)
                        lstJournal.List(lstJournal.ListCount - 1, 1) = .Cells(rngFound.Row, 5)
                        lstJournal.List(lstJournal.ListCount - 1, 2) = .Cells(rngFound.Row, 6)
'                        lstJournal.List(lstJournal.ListCount - 1, 3) = ActiveSheet.Cells(1, 36 + bytDOK) & .Cells(rngfound.Row, 6)
                        Set rngFound = .Columns(8).FindNext(After:=rngFound)
                    End If
                Loop While Not rngFound Is Nothing And S <> rngFound.Row
            End If
        End With
'    Else
'        MsgBox "Es ist keine Datei an diesem Material verlinkt!", , "Dokumentenlinks"
    End If

End Sub
Attribute VB_Name = "usrMV"
Attribute VB_Base = "0{97CA148A-F76E-4760-80C5-6D632EF63F91}{5BBF8E11-469D-49F7-8DE2-65EBCFB79AFF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Declare Function FindWindow _
    Lib "user32" _
        Alias "FindWindowA" ( _
            ByVal lpClassName As String, _
            ByVal lpWindowName As String) _
    As Long

Private Declare Function GetWindowLong _
    Lib "user32" _
        Alias "GetWindowLongA" ( _
            ByVal hwnd As Long, _
            ByVal nIndex As Long) _
    As Long

Private Declare Function SetWindowLong _
    Lib "user32" _
        Alias "SetWindowLongA" ( _
            ByVal hwnd As Long, _
            ByVal nIndex As Long, _
            ByVal dwNewLong As Long) _
    As Long

Private Declare Function DrawMenuBar _
    Lib "user32" ( _
        ByVal hwnd As Long) _
    As Long

Private Const GWL_STYLE As Long = (-16)
Private Const WS_SYSMENU As Long = &H80000
Private Const WS_MINIMIZEBOX As Long = &H20000
Private Const WS_MAXIMIZEBOX As Long = &H10000

Private Const WS_THICKFRAME = &H40000
Private Const GC_CLASSNAMEMSEXCELFORM = "ThunderDFrame"

Private Sub lstMV2_DblClick()

Dim erg As VbMsgBoxResult
Dim tabe As String
Dim T

    If lstMV2.col = 2 Then

        T = Application.International(xlCountrySetting)
        Select Case T
            Case 49
'                strCountry = "DE"
                erg = MsgBox("M|fffd|chten Sie die Sachnummer " & lstMV2.text & " |fffd|bernehmen?", vbYesNo, "SNR-|fffd|bernahme")
            Case 44
'                strCountry = "EN"
                erg = MsgBox("Do you want to take over the item number " & lstMV2.text & " apply?", vbYesNo, "Item number adoption")
            Case 33
'                strCountry = "FR"
                erg = MsgBox("Voulez-vous prendre en charge le num|fffd|ro d'article " & lstMV2.text & " apply?", vbYesNo, "Adoption du num|fffd|ro d'article")
'            Case 36
'                strCountry = "HU"
            Case Else
                strCountry = "EN"
                erg = MsgBox("Do you want to take over the item number " & lstMV2.text & " apply?", vbYesNo, "Item number adoption")
        End Select

'        erg = MsgBox(usrXML.funMSG(11, lstMV2.text), vbYesNo, usrXML.funMSGtitle(11, ""))
        If erg = vbYes Then
            If TableExist("ErgAehnlich") = True Then tabe = "ErgAehnlich"
            If TableExist("eErgAehnlich") = True Then tabe = "eErgAehnlich"
            ActiveSheet.Cells(ActiveCell.Row, ActiveCell.Column - 1) = lstMV2.text
            If lstMV2.TextMatrix(lstMV2.Row, 1) = Worksheets(tabe).Cells(1, 12) Then
                If lstMV2.TextMatrix(lstMV2.Row, 6) = "VB" Then
                    ActiveSheet.Cells(ActiveCell.Row, ActiveCell.Column - 1).Interior.ColorIndex = 4
                Else
                    ActiveSheet.Cells(ActiveCell.Row, ActiveCell.Column - 1).Interior.ColorIndex = 10
                End If
            Else
                ActiveSheet.Cells(ActiveCell.Row, ActiveCell.Column - 1).Interior.ColorIndex = 46
            End If
        End If
        Unload Me
    End If

End Sub

Function TableExist(ByVal Tabelle As String, Optional ByVal wb As String) As Boolean

Dim tbl As Worksheet

    On Error Resume Next
    If wb <> "" Then
        Set tbl = Workbooks(wb).Worksheets(Tabelle)
    Else
        Set tbl = Worksheets(Tabelle)
    End If
    TableExist = Err.Number = 0
    Set tbl = Nothing

End Function

Public Sub UserForm_Initialize()

    lstMV2.ColWidth(0) = 150
    lstMV2.ColWidth(1) = 500
    lstMV2.ColWidth(2) = 1500
    lstMV2.ColWidth(3) = 3500
    lstMV2.ColWidth(4) = 3700
    lstMV2.ColWidth(5) = 250
    lstMV2.ColWidth(6) = 300
    lstMV2.ColWidth(7) = 1500
    lstMV2.ColWidth(8) = 2500
    lstMV2.ColWidth(9) = 850
    lstMV2.TextMatrix(0, 1) = "Werk"
    lstMV2.TextMatrix(0, 2) = "Sachnummer"
    lstMV2.TextMatrix(0, 3) = "Beschreibung"
    lstMV2.TextMatrix(0, 4) = "Langtext"
    lstMV2.TextMatrix(0, 5) = "LV"
    lstMV2.TextMatrix(0, 6) = "DM"
    lstMV2.TextMatrix(0, 7) = "Bestellnummer"
    lstMV2.TextMatrix(0, 8) = "Hersteller"
    lstMV2.TextMatrix(0, 9) = "Erg."
'    UserForm_Resize

End Sub

Private Sub UserForm_Resize()

'F|fffd|r Gr|fffd|sser/Kleiner mit Maus
'    If Height >= ScrollHeight And Width >= ScrollWidth Then
'        ScrollBars = fmScrollBarsNone
'    ElseIf Height >= ScrollHeight And Width < ScrollWidth Then
'        ScrollBars = fmScrollBarsHorizontal
'    ElseIf Height < ScrollHeight And Width >= ScrollWidth Then
'        ScrollBars = fmScrollBarsVertical
'    Else
'        ScrollBars = fmScrollBarsBoth
'    End If

    lstMV2.Height = usrMV.Height - 25
    lstMV2.Width = usrMV.Width - 10

End Sub

Private Sub UserForm_Activate()

'F|fffd|r Min/Max-Button
    Dim Frmhdl As Long
    Dim lStyle As Long
'F|fffd|r Gr|fffd|sser/Kleiner mit Maus
    Dim lngStyle As Long, lngHwnd As Long

'F|fffd|r Min/Max-Button
    Frmhdl = FindWindow(vbNullString, Me.Caption)
    
    lStyle = GetWindowLong(Frmhdl, GWL_STYLE)
    lStyle = lStyle Or WS_SYSMENU
    'lStyle = lStyle Or WS_MINIMIZEBOX
    lStyle = lStyle Or WS_MAXIMIZEBOX
    
    SetWindowLong Frmhdl, GWL_STYLE, (lStyle)
    DrawMenuBar Frmhdl
    
'F|fffd|r Gr|fffd|sser/Kleiner mit Maus
    lngHwnd = FindWindow(GC_CLASSNAMEMSEXCELFORM, Caption)
    lngStyle = GetWindowLong(lngHwnd, GWL_STYLE)
    lngStyle = lngStyle Or WS_THICKFRAME
    Call SetWindowLong(lngHwnd, GWL_STYLE, lngStyle)
    ScrollHeight = Height
    ScrollWidth = Width


End Sub




INQUEST-PP=macro
