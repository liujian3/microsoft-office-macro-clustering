Attribute VB_Name = "AccSaveFuncs"

Option Explicit
Option Private Module


' Saves a string to the customer/supplier record
Public Function SaveAcMiscStr(Company$, AcCode$, AcFlag$, SaveNo%, NewVal$) As String
On Error GoTo SaveAcMiscStr_Error
    Dim StrVal$, IntVal%
       
    StrVal = "Error"
    
    AcFlag$ = UCase(AcFlag$)
    
    If ValidCompany(Company) And ValidCustCode(AcCode$, AcFlag$) Then
        If LocalCheckServer() Then
            Company$ = UCase(Company$)
            AcCode$ = UCase(AcCode$)
                     
            IntVal = EntServer.SaveAcMiscStr(Company$, AcCode$, AcFlag$, SaveNo%, NewVal$)
        
            If (IntVal = 0) Then
                StrVal = "Saved"
            Else
                Error IntVal
            End If
        End If
    End If
      
    GoTo SaveAcMiscStr_Exit
           
SaveAcMiscStr_Error:
    StrVal = GetErrorStr$

SaveAcMiscStr_Exit:
    SaveAcMiscStr = StrVal
End Function


' Saves a Integer to the customer/supplier record
Public Function SaveAcMiscInt(Company$, AcCode$, AcFlag$, SaveNo%, NewInt&) As Variant
On Error GoTo SaveAcMiscInt_Error
    Dim StrVal$, IntVal%
       
    StrVal = "Error"
    
    AcFlag$ = UCase(AcFlag$)
    
    If ValidCompany(Company) And ValidCustCode(AcCode$, AcFlag$) Then
        If LocalCheckServer() Then
            Company$ = UCase(Company$)
            AcCode$ = UCase(AcCode$)
                     
            IntVal = EntServer.SaveAcMiscInt(Company$, AcCode$, AcFlag$, SaveNo%, NewInt&)
        
            If (IntVal = 0) Then
                StrVal = "Saved"
            Else
                Error IntVal
            End If
        End If
    End If
      
    GoTo SaveAcMiscInt_Exit
           
SaveAcMiscInt_Error:
    StrVal = GetErrorStr$

SaveAcMiscInt_Exit:
    SaveAcMiscInt = StrVal
End Function


' Saves a double to the customer/supplier record
Public Function SaveAcMiscVal(Company$, AcCode$, AcFlag$, SaveNo%, NewValue#) As Variant
On Error GoTo SaveAcMiscVal_Error
    Dim StrVal$, IntVal%
       
    StrVal = "Error"
    
    AcFlag$ = UCase(AcFlag$)
    
    If ValidCompany(Company) And ValidCustCode(AcCode$, AcFlag$) Then
        If LocalCheckServer() Then
            Company$ = UCase(Company$)
            AcCode$ = UCase(AcCode$)
                     
            IntVal = EntServer.SaveAcMiscVal(Company$, AcCode$, AcFlag$, SaveNo%, NewValue#)
        
            If (IntVal = 0) Then
                StrVal = "Saved"
            Else
                Error IntVal
            End If
        End If
    End If
      
    GoTo SaveAcMiscVal_Exit
            
SaveAcMiscVal_Error:
    StrVal = GetErrorStr$

SaveAcMiscVal_Exit:
    SaveAcMiscVal = StrVal
End Function


Attribute VB_Name = "AccSaveHist"

Option Explicit


' Saves the Budget back for the specified Customer, year, period, etc
Private Function CustSaveBudget(Mode%, Company As String, TheYear As Integer, ThePeriod As Integer, CustCode As String, NewBudget As Double) As String
On Error GoTo CustSaveBudget_Error
    Dim CompStr$, Ty%, Tp%, Cust$
    Dim StrVal$, IntVal%, NewBudg#
     
    StrVal = "Error"
    
    If ValidCompany(Company) And ValidYear(TheYear) And ValidPeriod(ThePeriod) And ValidCustCode(CustCode, "C") Then
        If LocalCheckServer() Then
            CompStr$ = UCase(Company$)
            Ty% = TheYear%
            Tp% = ThePeriod%
            Cust$ = UCase(CustCode$)
            NewBudg# = NewBudget
            
            IntVal = EntServer.SaveCustValue(Mode%, CompStr$, Ty%, Tp%, Cust$, NewBudg)
        
            If (IntVal = 0) Then
                StrVal = "Saved"
            Else
                Error IntVal%
            End If
        End If
    End If
     
    GoTo CustSaveBudget_Exit
          
CustSaveBudget_Error:
    StrVal = GetErrorStr$

CustSaveBudget_Exit:
    CustSaveBudget = StrVal
End Function


'*******************************************************************************
' Name:        EntCustSaveBudget
' Description: Saves the Budget back for the specified Customer, year, period, etc
'*******************************************************************************
Public Function EntCustSaveBudget(Company As String, TheYear As Integer, ThePeriod As Integer, CustCode As String, NewBudget As Double) As String
Attribute EntCustSaveBudget.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveBudget = CustSaveBudget(1, Company, TheYear, ThePeriod, CustCode, NewBudget)
End Function


'*******************************************************************************
' Name:        EntCustSaveBudget2
' Description: Saves the Revised Budget back for the specified Customer, year, period, etc
'*******************************************************************************
Public Function EntCustSaveBudget2(Company As String, TheYear As Integer, ThePeriod As Integer, CustCode As String, NewBudget As Double) As String
Attribute EntCustSaveBudget2.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveBudget2 = CustSaveBudget(2, Company, TheYear, ThePeriod, CustCode, NewBudget)
End Function


' Saves the Budget back for the specified Supplier, year, period, etc
Private Function SuppSaveBudget(Mode%, Company As String, TheYear As Integer, ThePeriod As Integer, Supplier As String, NewBudget As Double) As String
On Error GoTo SuppSaveBudget_Error
    Dim CompStr$, Ty%, Tp%, Supp$
    Dim StrVal$, IntVal%, NewBudg#
    
    StrVal = "Error"
    
    If ValidCompany(Company) And ValidYear(TheYear) And ValidPeriod(ThePeriod) And ValidCustCode(Supplier, "S") Then
        If LocalCheckServer() Then
            CompStr$ = UCase(Company$)
            Ty% = TheYear%
            Tp% = ThePeriod%
            Supp$ = UCase(Supplier$)
            NewBudg# = NewBudget
            
            IntVal = EntServer.SaveSuppValue(Mode%, CompStr$, Ty%, Tp%, Supp$, NewBudg)
        
            If (IntVal = 0) Then
                StrVal = "Saved"
            Else
                Error IntVal%
            End If
        End If
    End If
     
    GoTo SuppSaveBudget_Exit
          
SuppSaveBudget_Error:
    StrVal = GetErrorStr$

SuppSaveBudget_Exit:
    SuppSaveBudget = StrVal
End Function


'*******************************************************************************
' Name:        EntSuppSaveBudget
' Description: Saves the Budget back for the specified supplier, year, period, etc
'*******************************************************************************
Public Function EntSuppSaveBudget(Company As String, TheYear As Integer, ThePeriod As Integer, Supplier As String, NewBudget As Double) As String
Attribute EntSuppSaveBudget.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveBudget = SuppSaveBudget(1, Company, TheYear, ThePeriod, Supplier, NewBudget)
End Function


'*******************************************************************************
' Name:        EntSuppSaveBudget2
' Description: Saves the Revised Budget back for the specified supplier, year, period, etc
'*******************************************************************************
Public Function EntSuppSaveBudget2(Company As String, TheYear As Integer, ThePeriod As Integer, Supplier As String, NewBudget As Double) As String
Attribute EntSuppSaveBudget2.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveBudget2 = SuppSaveBudget(2, Company, TheYear, ThePeriod, Supplier, NewBudget)
End Function
Attribute VB_Name = "AddNOM"

Option Explicit

Private Const MaxTransHeaderUserFields = 10
Private Const MaxTransLineUserFields = 10

' MH 09/10/2014 v7.0.12 ABSEXCH-15632: Added Auto-Reversing Support
Private Const AutoReversing = True


Public Enum LineUserFieldsLayout
    lufNotSupplied = 0
    lufHorizontal = 1
    lufVertical = 2
End Enum ' LineUserFieldsLayout

'*******************************************************************************
' Name:        EntAddNomTransfer
' Description: Adds a nominal transfer for the specified details
'*******************************************************************************
Public Function EntAddNomTransfer(AddNomTxfrs$, Company$, TheYear%, ThePeriod%, TheCcy%, FromGLCode As Long, ToGLCode As Long, CostCentre$, Dept$, JobCode$, AnalysisCode$, Descr$, NomAmount#) As String
Attribute EntAddNomTransfer.VB_Description = "Adds a nominal transfer for the specified details"
Attribute EntAddNomTransfer.VB_HelpID = 20001
Attribute EntAddNomTransfer.VB_ProcData.VB_Invoke_Func = " \n14"
On Error GoTo EntAddNomTransfer_Error
    Dim CompStr$, Ty%, Tp%, TC%, CC$, Dep$, JC$, AC$, Desc$
    Dim StrVal$, IntVal%, NomAmt#
    
    StrVal = "Error"
    
    ' Check that the function should be added
    If (UCase(Trim(AddNomTxfrs$)) = "YES") Then
        If ValidCompany(Company) And ValidYear(TheYear) And ValidTransactionPeriod(ThePeriod) And ValidCcy(TheCcy%) And ValidGLCode(FromGLCode) And ValidGLCode(ToGLCode) And ValidCCDep(True, CostCentre$) And ValidCCDep(False, Dept$) Then
            If LocalCheckServer() Then
                CompStr$ = UCase(Company$)
                Ty% = TheYear%
                Tp% = ThePeriod%
                TC% = TheCcy%
                CC$ = CostCentre$
                Dep$ = Dept$
                JC$ = UCase(JobCode$)
                AC$ = UCase(AnalysisCode$)
                Desc$ = Descr$
                NomAmt# = NomAmount#
            
                IntVal = EntServer.AddNomTransfer(CompStr$, Ty%, Tp%, TC%, FromGLCode, ToGLCode, CC$, Dep$, JC$, AC$, Desc$, NomAmt#)
    
                If (IntVal = 0) Then
                    StrVal = "Saved"
                Else
                    Error IntVal%
                End If
            End If
        End If
    Else
        StrVal = "Disabled"
    End If
     
    GoTo EntAddNomTransfer_Exit
           
EntAddNomTransfer_Error:
    StrVal = GetErrorStr$
 
EntAddNomTransfer_Exit:
    EntAddNomTransfer = StrVal
End Function


' Base function to add a nominal transfer with multiple lines
Private Function AddNomTxfrLines(Enabled$, Company$, TheYear%, ThePeriod%, TranDesc$, HeaderUDFList As Variant, GLList As Variant, DescList As Variant, _
                                 CurrList As Variant, AmountList As Variant, RateList As Variant, CostCList As Variant, _
                                 DeptList As Variant, JobList As Variant, AnalList As Variant, ResetJCGL$, _
                                 LineUDF1List As Variant, LineUDF2List As Variant, LineUDF3List As Variant, _
                                 LineUDF4List As Variant, LineUDF5List As Variant, LineUDF6List As Variant, _
                                 LineUDF7List As Variant, LineUDF8List As Variant, LineUDF9List As Variant, _
                                 LineUDF10List As Variant) As String
On Error GoTo AddNomTxfrLines_Error

    Dim arrGLCodes As Variant, arrDesc As Variant, arrCcy As Variant
    Dim arrAmount As Variant, arrCC As Variant, arrDp As Variant
    Dim arrJob As Variant, arrAnal As Variant, arrRates As Variant
    Dim arrVATCode As Variant, arrIncVATCode As Variant, arrVATAmt As Variant
    Dim arrHeaderUDF As Variant
    Dim arrLineUDF1 As Variant, arrLineUDF2 As Variant, arrLineUDF3 As Variant, arrLineUDF4 As Variant
    Dim arrLineUDF5 As Variant, arrLineUDF6 As Variant, arrLineUDF7 As Variant
    Dim arrLineUDF8 As Variant, arrLineUDF9 As Variant, arrLineUDF10 As Variant
    Dim CompStr$, Ty%, Tp%, GLCount%, DescStr$, TransDate$, VATCountry$, VATFlag$
    Dim StrVal$, IntVal%
    Dim arrPayRef As Variant

    ' Check that the function should be added
    If (UCase(Trim(Enabled$)) = "YES") Then
        If ValidCompany(Company) And ValidYear(TheYear) And ValidTransactionPeriod(ThePeriod) Then
            If LocalCheckServer() Then
                CompStr$ = UCase(Company$)
                Ty% = TheYear%
                Tp% = ThePeriod%
                DescStr$ = Trim(TranDesc$)
                              
                ' Convert GL Codes into list
                arrGLCodes = GLListToArray(GLList, GLCount%)
                arrDesc = DescListToArray(DescList, GLCount%, 545)
                arrCcy = CurrListToArray(CurrList, GLCount%)
                ' HM 24/07/00: Modified to allow zero amounts
                'arrAmount = AmtListToArray(AmountList, GLCount%, 0, 547, 548)
                arrAmount = AmtListToArray(AmountList, GLCount%, 1, 547, 548)
                arrRates = AmtListToArray(RateList, GLCount%, 1, 554, 555)
                arrCC = DescListToArray(CostCList, GLCount%, 550)
                arrDp = DescListToArray(DeptList, GLCount%, 551)
                arrJob = DescListToArray(JobList, GLCount%, 552)
                arrAnal = DescListToArray(AnalList, GLCount%, 553)
                
                ' HM 02/06/03: Setup dummy fields for EntAddNOMVATLines mods
                TransDate$ = ""
                VATCountry$ = ""
                VATFlag$ = " "  ' N/A
                arrVATCode = BuildStrArray(GLCount%, " ")
                arrIncVATCode = BuildStrArray(GLCount%, " ")
                arrVATAmt = BuildDblArray(GLCount%, 0#)
                arrPayRef = BuildStrArray(GLCount%, " ")
                
                ' MH 31/10/2011 v6.9: Extended to support 10 Header UD Fields
                If Not IsNull(HeaderUDFList) Then
                    arrHeaderUDF = ProcessHeadUDFieldsIntoArray(HeaderUDFList)
                Else
                    arrHeaderUDF = BuildStrArray(10, " ")
                End If
                                                           
                ' MH 18/03/2011 v6.4 ABSEXCH-: Added Line User Defined Fields for Jelf
                If Not IsNull(LineUDF1List) Then
                    arrLineUDF1 = DescListToArray(LineUDF1List, GLCount%, 584)
                Else
                    arrLineUDF1 = BuildStrArray(GLCount%, " ")
                End If
                If Not IsNull(LineUDF2List) Then
                    arrLineUDF2 = DescListToArray(LineUDF2List, GLCount%, 584)
                Else
                    arrLineUDF2 = BuildStrArray(GLCount%, " ")
                End If
                If Not IsNull(LineUDF3List) Then
                    arrLineUDF3 = DescListToArray(LineUDF3List, GLCount%, 584)
                Else
                    arrLineUDF3 = BuildStrArray(GLCount%, " ")
                End If
                If Not IsNull(LineUDF4List) Then
                    arrLineUDF4 = DescListToArray(LineUDF4List, GLCount%, 584)
                Else
                    arrLineUDF4 = BuildStrArray(GLCount%, " ")
                End If
                ' MH 31/10/2011 v6.9: Extended to support 10 Line UD Fields
                If Not IsNull(LineUDF5List) Then
                    arrLineUDF5 = DescListToArray(LineUDF5List, GLCount%, 584)
                Else
                    arrLineUDF5 = BuildStrArray(GLCount%, " ")
                End If
                If Not IsNull(LineUDF6List) Then
                    arrLineUDF6 = DescListToArray(LineUDF6List, GLCount%, 584)
                Else
                    arrLineUDF6 = BuildStrArray(GLCount%, " ")
                End If
                If Not IsNull(LineUDF7List) Then
                    arrLineUDF7 = DescListToArray(LineUDF7List, GLCount%, 584)
                Else
                    arrLineUDF7 = BuildStrArray(GLCount%, " ")
                End If
                If Not IsNull(LineUDF8List) Then
                    arrLineUDF8 = DescListToArray(LineUDF8List, GLCount%, 584)
                Else
                    arrLineUDF8 = BuildStrArray(GLCount%, " ")
                End If
                If Not IsNull(LineUDF9List) Then
                    arrLineUDF9 = DescListToArray(LineUDF9List, GLCount%, 584)
                Else
                    arrLineUDF9 = BuildStrArray(GLCount%, " ")
                End If
                If Not IsNull(LineUDF10List) Then
                    arrLineUDF10 = DescListToArray(LineUDF10List, GLCount%, 584)
                Else
                    arrLineUDF10 = BuildStrArray(GLCount%, " ")
                End If
                                                          
                                                           
                IntVal = EntServer.AddNomLines(CompStr$, TransDate$, Ty%, Tp%, DescStr$, VATCountry$, VATFlag$, _
                                               arrHeaderUDF, arrGLCodes, arrDesc, arrCcy, arrAmount, arrRates, _
                                               arrVATCode, arrIncVATCode, arrVATAmt, _
                                               arrCC, arrDp, arrJob, arrAnal, arrPayRef, ResetJCGL$, _
                                               arrLineUDF1, arrLineUDF2, arrLineUDF3, arrLineUDF4, arrLineUDF5, _
                                               arrLineUDF6, arrLineUDF7, arrLineUDF8, arrLineUDF9, arrLineUDF10)

                If (IntVal = 0) Then
                    StrVal = "Saved"
                Else
                    Error IntVal%
                End If
            End If
        End If
    Else
        StrVal = "Disabled"
    End If
     
    GoTo AddNomTxfrLines_Exit
           
AddNomTxfrLines_Error:
    StrVal = GetErrorStr$
 
AddNomTxfrLines_Exit:
    AddNomTxfrLines = StrVal
    
End Function


'*******************************************************************************
' Name:        EntAddNomTxfrLines
' Description: Adds a nominal transfer with multiple lines
'*******************************************************************************
Public Function EntAddNomTxfrLines(Enabled$, Company$, TheYear%, ThePeriod%, TranDesc$, GLList As Variant, DescList As Variant, _
                                   CurrList As Variant, AmountList As Variant, RateList As Variant, CostCList As Variant, _
                                   DeptList As Variant, JobList As Variant, AnalList As Variant) As String
Attribute EntAddNomTxfrLines.VB_ProcData.VB_Invoke_Func = " \n14"
    EntAddNomTxfrLines = AddNomTxfrLines(Enabled$, Company$, TheYear%, ThePeriod%, TranDesc$, Null, GLList, DescList, _
                                       CurrList, AmountList, RateList, CostCList, DeptList, JobList, AnalList, "Y", _
                                       Null, Null, Null, Null, Null, Null, Null, Null, Null, Null)
End Function


'****************************************************************************************************
' Name:        EntAddNomTxfrLines2
' Description: Adds a nominal transfer with multiple lines (Doesn't reset GL Codes for Job Lines)
'****************************************************************************************************
Public Function EntAddNomTxfrLines2(Enabled$, Company$, TheYear%, ThePeriod%, TranDesc$, GLList As Variant, DescList As Variant, _
                                   CurrList As Variant, AmountList As Variant, RateList As Variant, CostCList As Variant, _
                                   DeptList As Variant, JobList As Variant, AnalList As Variant) As String
Attribute EntAddNomTxfrLines2.VB_ProcData.VB_Invoke_Func = " \n14"
    EntAddNomTxfrLines2 = AddNomTxfrLines(Enabled$, Company$, TheYear%, ThePeriod%, TranDesc$, Null, GLList, DescList, _
                                       CurrList, AmountList, RateList, CostCList, DeptList, JobList, AnalList, "N", _
                                       Null, Null, Null, Null, Null, Null, Null, Null, Null, Null)
End Function


'*****************************************************************************************
' Name:        EntAddNomTxfrLinesUDF
' Description: Adds a nominal transfer with multiple lines and line USer Defined Fields
'*****************************************************************************************
Public Function EntAddNomTxfrLinesUDF(Enabled$, Company$, TheYear%, ThePeriod%, TranDesc$, GLList As Variant, DescList As Variant, _
                                   CurrList As Variant, AmountList As Variant, RateList As Variant, CostCList As Variant, _
                                   DeptList As Variant, JobList As Variant, AnalList As Variant, _
                                   LineUDF1 As Variant, LineUDF2 As Variant, LineUDF3 As Variant, LineUDF4 As Variant) As String
    EntAddNomTxfrLinesUDF = AddNomTxfrLines(Enabled$, Company$, TheYear%, ThePeriod%, TranDesc$, Null, GLList, DescList, _
                                       CurrList, AmountList, RateList, CostCList, DeptList, JobList, AnalList, "Y", _
                                       LineUDF1, LineUDF2, LineUDF3, LineUDF4, Null, Null, Null, Null, Null, Null)
End Function


'*****************************************************************************************
' Name:        EntAddNomTxfrLinesUDF10
' Description: Adds a nominal transfer with multiple lines and Header and Line User Defined Fields
'*****************************************************************************************
Public Function EntAddNomTxfrLinesUDF10(Enabled$, _
                                        Company$, _
                                        TheYear%, _
                                        ThePeriod%, _
                                        TranDesc$, _
                                        HeaderUDFields As Variant, _
                                        GLList As Variant, _
                                        DescList As Variant, _
                                        CurrList As Variant, _
                                        AmountList As Variant, _
                                        RateList As Variant, _
                                        CostCList As Variant, _
                                        DeptList As Variant, _
                                        JobList As Variant, _
                                        AnalList As Variant, _
                                        LineUDFLayout As LineUserFieldsLayout, _
                                        LineUDFields As Variant) As String
On Error GoTo EntAddNomTxfrLinesUDF10_Error

    Dim arrGLCodes As Variant, GLCount As Integer
    Dim arrLineUserFields(1 To 10) As Variant
    Dim ReturnVal As Long
                
    ' Check to see if the function is enabled before processing the UD Field Array
    If (UCase(Trim(Enabled$)) = "YES") Then
        ' Look at the list of GL Codes to determine how many lines have been supplied by the user
        arrGLCodes = GLListToArray(GLList, GLCount%)
        
        ' Declare an array to hold the 10 arrays of User Defined Fields
        ReturnVal = Process2DUserFieldsArray(GLCount%, arrLineUserFields, LineUDFLayout, LineUDFields)
        If (ReturnVal = 0) Then
            EntAddNomTxfrLinesUDF10 = AddNomTxfrLines(Enabled$, Company$, TheYear%, ThePeriod%, TranDesc$, _
                                                      HeaderUDFields, GLList, DescList, CurrList, AmountList, _
                                                      RateList, CostCList, DeptList, JobList, AnalList, _
                                                      "Y", arrLineUserFields(1), arrLineUserFields(2), _
                                                      arrLineUserFields(3), arrLineUserFields(4), _
                                                      arrLineUserFields(5), arrLineUserFields(6), _
                                                      arrLineUserFields(7), arrLineUserFields(8), _
                                                      arrLineUserFields(9), arrLineUserFields(10))
        Else
            Error ReturnVal
        End If ' (ReturnVal = 0)
    Else
        EntAddNomTxfrLinesUDF10 = "Disabled"
    End If ' (UCase(Trim(Enabled$)) = "YES")
    
    Exit Function
           
EntAddNomTxfrLinesUDF10_Error:
    EntAddNomTxfrLinesUDF10 = GetErrorStr$
    
End Function


Private Function Process2DUserFieldsArray(LineCount%, ByRef arrLineUserFields() As Variant, LineUDFLayout As LineUserFieldsLayout, ByRef LineUDFields As Variant) As Long
    Dim LocalUDFieldsVar As Variant
    Dim iField As Integer, iLine As Integer, iNoCols As Integer, iNoRows As Integer, ReturnVal As Long

    ReturnVal = 0

    ' Initialise the destination array for the line UD Fields
    For iField = LBound(arrLineUserFields) To UBound(arrLineUserFields)
        arrLineUserFields(iField) = Null
    Next iField

    ' Check whether user has specified support for User Defined Fields
    If (LineUDFLayout = lufHorizontal) Or (LineUDFLayout = lufVertical) Then
        ' Need to copy Variant into a local variable otherwise the VBA functions crash - class!
        LocalUDFieldsVar = LineUDFields

        If IsArray(LocalUDFieldsVar) Then
            ' Get dimensions of array
            iNoCols = UBound(LocalUDFieldsVar, 2)
            iNoRows = UBound(LocalUDFieldsVar, 1)
'MsgBox "NoCols: " + Str(iNoCols) + "  -  NoRows: " + Str(iNoRows)
                      
            ' Check that the correct number of rows have been supplied
            If (LineUDFLayout = lufHorizontal) And ((LineCount% = iNoRows) Or (iNoRows = 1)) And (iNoCols > 0) And (iNoCols <= MaxTransLineUserFields) Then
                ' User Defined Fields run horizontally across the range with each row representing a nominal line
                For iField = 1 To iNoCols
                    ' Create the array for the current User Defined Field with 1 entry per row supplied
                    arrLineUserFields(iField) = BuildStrArray(LineCount%, "")
                    
                    ' Run through the supplied rows copying the current user defined field value out to the array
                    ' for the current User Defined Field
                    For iLine = 1 To iNoRows
                        arrLineUserFields(iField)(iLine) = CStr(LocalUDFieldsVar(iLine, iField))
                    Next iLine
                Next iField
                
                If (iNoRows = 1) And (LineCount > 1) Then
                    ' Copy the only row of User Defined Fields supplied into all transaction lines
                    For iField = LBound(arrLineUserFields) To iNoCols
                        ' Create the array for the User Defined Fields
                        For iLine = 2 To LineCount
                            arrLineUserFields(iField)(iLine) = arrLineUserFields(iField)(1)
                        Next iLine
                    Next iField
                End If ' (iNoRows = 1) And (LineCount > 1)
            ElseIf (LineUDFLayout = lufVertical) And ((LineCount% = iNoCols) Or (iNoCols = 1)) And (iNoRows > 0) And (iNoRows <= MaxTransLineUserFields) Then
                ' User Defined Fields run vertically down the range with each column representing a nominal line
                For iField = 1 To iNoRows
                    ' Create the array for the current User Defined Field with 1 entry per row supplied
                    arrLineUserFields(iField) = BuildStrArray(LineCount%, "")
                    
                    ' Run through the supplied columns copying the current user defined field value out to the array
                    ' for the current User Defined Field
                    For iLine = 1 To iNoCols
                        arrLineUserFields(iField)(iLine) = CStr(LocalUDFieldsVar(iField, iLine))
                    Next iLine
                Next iField
                
                If (iNoCols = 1) And (LineCount > 1) Then
                    ' Copy the only column of User Defined Fields supplied into all transaction lines
                    For iField = LBound(arrLineUserFields) To iNoRows
                        ' Create the array for the User Defined Fields
                        For iLine = 2 To LineCount
                            arrLineUserFields(iField)(iLine) = arrLineUserFields(iField)(1)
                        Next iLine
                    Next iField
                End If ' (iNoRows = 1) And (LineCount > 1)
            Else
                ReturnVal = 584 ' Invalid User Fields List
            End If ' (LineCount% = VBounds%)
        Else
            ReturnVal = 584 ' Invalid User Fields List
        End If ' IsArray(LocalUDFieldsVar)
    End If ' (LineUDFLayout = lufHorizontal) Or (LineUDFLayout = lufVertical)

    Process2DUserFieldsArray = ReturnVal
End Function

' Base function to add a nominal transfer with multiple lines and optional VAT
' MH 09/10/2014 v7.0.12 ABSEXCH-15632: Added Auto-Reversing Support
Private Function AddNomVATLines(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, _
                                VATCountry$, VATFlag$, _
                                HeaderUDFList As Variant, _
                                GLList As Variant, DescList As Variant, CurrList As Variant, AmountList As Variant, RateList As Variant, _
                                VATCodeList As Variant, IncVATCodeList As Variant, VATAmountList As Variant, _
                                CostCList As Variant, DeptList As Variant, _
                                JobList As Variant, AnalList As Variant, _
                                PayRefList As Variant, _
                                ResetJCGL$, _
                                LineUDF1List As Variant, LineUDF2List As Variant, LineUDF3List As Variant, _
                                LineUDF4List As Variant, LineUDF5List As Variant, LineUDF6List As Variant, _
                                LineUDF7List As Variant, LineUDF8List As Variant, LineUDF9List As Variant, _
                                LineUDF10List As Variant, _
                                IsAutoReversing As Boolean) As String
On Error GoTo AddNomVATLines_Error

    Dim arrGLCodes As Variant, arrDesc As Variant, arrCcy As Variant
    Dim arrAmount As Variant, arrCC As Variant, arrDp As Variant
    Dim arrJob As Variant, arrAnal As Variant, arrRates As Variant
    Dim arrHeaderUDF As Variant
    Dim arrVATCode As Variant, arrIncVATCode As Variant, arrVATAmt As Variant
    Dim arrLineUDF1 As Variant, arrLineUDF2 As Variant, arrLineUDF3 As Variant, arrLineUDF4 As Variant
    Dim arrLineUDF5 As Variant, arrLineUDF6 As Variant, arrLineUDF7 As Variant
    Dim arrLineUDF8 As Variant, arrLineUDF9 As Variant, arrLineUDF10 As Variant
    Dim CompStr$, Ty%, Tp%, GLCount%, DescStr$
    Dim StrVal$, IntVal%
    Dim arrPayRef As Variant

    ' Check that the function should be added
    If (UCase(Trim(Enabled$)) = "YES") Then
        If ValidCompany(Company) And ValidYear(TheYear) And ValidTransactionPeriod(ThePeriod) Then
            If LocalCheckServer() Then
                CompStr$ = UCase(Company$)
                Ty% = TheYear%
                Tp% = ThePeriod%
                DescStr$ = Trim(TranDesc$)
                              
                ' Convert GL Codes into list
                arrGLCodes = GLListToArray(GLList, GLCount%)
                arrDesc = DescListToArray(DescList, GLCount%, 545)
                arrCcy = CurrListToArray(CurrList, GLCount%)
                ' HM 24/07/00: Modified to allow zero amounts
                'arrAmount = AmtListToArray(AmountList, GLCount%, 0, 547, 548)
                arrAmount = AmtListToArray(AmountList, GLCount%, 1, 547, 548)
                arrRates = AmtListToArray(RateList, GLCount%, 1, 554, 555)
                arrCC = DescListToArray(CostCList, GLCount%, 550)
                arrDp = DescListToArray(DeptList, GLCount%, 551)
                arrJob = DescListToArray(JobList, GLCount%, 552)
                arrAnal = DescListToArray(AnalList, GLCount%, 553)
                
                ' HM 02/06/03: Convert VAT fields
                arrVATCode = DescListToArray(VATCodeList, GLCount%, 581)
                arrIncVATCode = DescListToArray(IncVATCodeList, GLCount%, 582)
                arrVATAmt = AmtListToArray(VATAmountList, GLCount%, 1, 578, 579)
                
                If Not IsNull(PayRefList) Then
                  arrPayRef = DescListToArray(PayRefList, GLCount%, 580)
                End If
                
                ' MH 31/10/2011 v6.9: Extended to support 10 Header UD Fields
                If Not IsNull(HeaderUDFList) Then
                    arrHeaderUDF = ProcessHeadUDFieldsIntoArray(HeaderUDFList)
                Else
                    arrHeaderUDF = BuildStrArray(10, "")
                End If
                
                ' MH 31/10/2011 v6.9: Extended to support 10 Line UD Fields
                If Not IsNull(LineUDF1List) Then
                    arrLineUDF1 = DescListToArray(LineUDF1List, GLCount%, 584)
                Else
                    arrLineUDF1 = BuildStrArray(GLCount%, "")
                End If
                If Not IsNull(LineUDF2List) Then
                    arrLineUDF2 = DescListToArray(LineUDF2List, GLCount%, 584)
                Else
                    arrLineUDF2 = BuildStrArray(GLCount%, "")
                End If
                If Not IsNull(LineUDF3List) Then
                    arrLineUDF3 = DescListToArray(LineUDF3List, GLCount%, 584)
                Else
                    arrLineUDF3 = BuildStrArray(GLCount%, "")
                End If
                If Not IsNull(LineUDF4List) Then
                    arrLineUDF4 = DescListToArray(LineUDF4List, GLCount%, 584)
                Else
                    arrLineUDF4 = BuildStrArray(GLCount%, "")
                End If
                If Not IsNull(LineUDF5List) Then
                    arrLineUDF5 = DescListToArray(LineUDF5List, GLCount%, 584)
                Else
                    arrLineUDF5 = BuildStrArray(GLCount%, "")
                End If
                If Not IsNull(LineUDF6List) Then
                    arrLineUDF6 = DescListToArray(LineUDF6List, GLCount%, 584)
                Else
                    arrLineUDF6 = BuildStrArray(GLCount%, "")
                End If
                If Not IsNull(LineUDF7List) Then
                    arrLineUDF7 = DescListToArray(LineUDF7List, GLCount%, 584)
                Else
                    arrLineUDF7 = BuildStrArray(GLCount%, "")
                End If
                If Not IsNull(LineUDF8List) Then
                    arrLineUDF8 = DescListToArray(LineUDF8List, GLCount%, 584)
                Else
                    arrLineUDF8 = BuildStrArray(GLCount%, "")
                End If
                If Not IsNull(LineUDF9List) Then
                    arrLineUDF9 = DescListToArray(LineUDF9List, GLCount%, 584)
                Else
                    arrLineUDF9 = BuildStrArray(GLCount%, " ")
                End If
                If Not IsNull(LineUDF10List) Then
                    arrLineUDF10 = DescListToArray(LineUDF10List, GLCount%, 584)
                Else
                    arrLineUDF10 = BuildStrArray(GLCount%, " ")
                End If

                ' MH 09/10/2014 v7.0.12 ABSEXCH-15632: Added Auto-Reversing Support
                If IsAutoReversing Then
                    IntVal = EntServer.AddNomLines_AutoRev(CompStr$, TransDate$, Ty%, Tp%, DescStr$, VATCountry$, VATFlag$, _
                                                           arrHeaderUDF, arrGLCodes, arrDesc, arrCcy, arrAmount, arrRates, _
                                                           arrVATCode, arrIncVATCode, arrVATAmt, _
                                                           arrCC, arrDp, arrJob, arrAnal, arrPayRef, ResetJCGL$, _
                                                           arrLineUDF1, arrLineUDF2, arrLineUDF3, arrLineUDF4, arrLineUDF5, _
                                                           arrLineUDF6, arrLineUDF7, arrLineUDF8, arrLineUDF9, arrLineUDF10)
                Else
                    IntVal = EntServer.AddNomLines(CompStr$, TransDate$, Ty%, Tp%, DescStr$, VATCountry$, VATFlag$, _
                                                   arrHeaderUDF, arrGLCodes, arrDesc, arrCcy, arrAmount, arrRates, _
                                                   arrVATCode, arrIncVATCode, arrVATAmt, _
                                                   arrCC, arrDp, arrJob, arrAnal, arrPayRef, ResetJCGL$, _
                                                   arrLineUDF1, arrLineUDF2, arrLineUDF3, arrLineUDF4, arrLineUDF5, _
                                                   arrLineUDF6, arrLineUDF7, arrLineUDF8, arrLineUDF9, arrLineUDF10)
                End If
                                               

                If (IntVal = 0) Then
                    StrVal = "Saved"
                Else
                    Error IntVal%
                End If
            End If
        End If
    Else
        StrVal = "Disabled"
    End If
     
    GoTo AddNomVATLines_Exit
           
AddNomVATLines_Error:
    StrVal = GetErrorStr$
 
AddNomVATLines_Exit:
    AddNomVATLines = StrVal
    
End Function


'*******************************************************************************
' Name:        EntAddNomVATLines
' Description: Adds a Nominal Transfer with multiple lines and optional VAT
'*******************************************************************************
Public Function EntAddNomVATLines(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                  GLList As Variant, DescList As Variant, CurrList As Variant, AmountList As Variant, RateList As Variant, _
                                  VATCodeList As Variant, IncVATCodeList As Variant, VATAmountList As Variant, _
                                  CostCList As Variant, DeptList As Variant, JobList As Variant, AnalList As Variant) As String
Attribute EntAddNomVATLines.VB_ProcData.VB_Invoke_Func = " \n14"
    EntAddNomVATLines = AddNomVATLines(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                  Null, GLList, DescList, CurrList, AmountList, RateList, VATCodeList, IncVATCodeList, VATAmountList, _
                                  CostCList, DeptList, JobList, AnalList, Null, "Y", _
                                  Null, Null, Null, Null, Null, Null, Null, Null, Null, Null, Not AutoReversing)
End Function


'*******************************************************************************
' Name:        EntAddNomVATLines2
' Description: Adds a Nominal Transfer with multiple lines and optional VAT
'*******************************************************************************
Public Function EntAddNomVATLines2(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                  GLList As Variant, DescList As Variant, CurrList As Variant, AmountList As Variant, RateList As Variant, _
                                  VATCodeList As Variant, IncVATCodeList As Variant, VATAmountList As Variant, _
                                  CostCList As Variant, DeptList As Variant, JobList As Variant, AnalList As Variant) As String
Attribute EntAddNomVATLines2.VB_ProcData.VB_Invoke_Func = " \n14"
    EntAddNomVATLines2 = AddNomVATLines(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                  Null, GLList, DescList, CurrList, AmountList, RateList, VATCodeList, IncVATCodeList, VATAmountList, _
                                  CostCList, DeptList, JobList, AnalList, Null, "N", _
                                  Null, Null, Null, Null, Null, Null, Null, Null, Null, Null, Not AutoReversing)
End Function

'*******************************************************************************
' Name:        EntAddNomVATLines3
' Description: Adds a Nominal Transfer with multiple lines and optional VAT and PayInRef
'*******************************************************************************
Public Function EntAddNomVATLines3(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                  GLList As Variant, DescList As Variant, CurrList As Variant, AmountList As Variant, RateList As Variant, _
                                  VATCodeList As Variant, IncVATCodeList As Variant, VATAmountList As Variant, _
                                  CostCList As Variant, DeptList As Variant, JobList As Variant, AnalList As Variant, PayRefList As Variant) As String
    EntAddNomVATLines3 = AddNomVATLines(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                  Null, GLList, DescList, CurrList, AmountList, RateList, VATCodeList, IncVATCodeList, VATAmountList, _
                                  CostCList, DeptList, JobList, AnalList, PayRefList, "Y", _
                                  Null, Null, Null, Null, Null, Null, Null, Null, Null, Null, Not AutoReversing)
End Function

'*******************************************************************************
' Name:        EntAddNomVATLines4
' Description: Adds a Nominal Transfer with multiple lines and optional VAT and PayInRef
'*******************************************************************************
Public Function EntAddNomVATLines4(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                  GLList As Variant, DescList As Variant, CurrList As Variant, AmountList As Variant, RateList As Variant, _
                                  VATCodeList As Variant, IncVATCodeList As Variant, VATAmountList As Variant, _
                                  CostCList As Variant, DeptList As Variant, JobList As Variant, AnalList As Variant, PayRefList As Variant) As String
    EntAddNomVATLines4 = AddNomVATLines(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                  Null, GLList, DescList, CurrList, AmountList, RateList, VATCodeList, IncVATCodeList, VATAmountList, _
                                  CostCList, DeptList, JobList, AnalList, PayRefList, "N", _
                                  Null, Null, Null, Null, Null, Null, Null, Null, Null, Null, Not AutoReversing)
End Function

' Description: Adds a Nominal Transfer with multiple lines and optional VAT and PayInRef with full support for
'              10 header and line user defined fields
' MH 09/10/2014 v7.0.12 ABSEXCH-15632: Added Auto-Reversing Support
Private Function AddNomVATLinesUDF10(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                   HeaderUDFields As Variant, _
                                   GLList As Variant, DescList As Variant, CurrList As Variant, AmountList As Variant, RateList As Variant, _
                                   VATCodeList As Variant, IncVATCodeList As Variant, VATAmountList As Variant, _
                                   CostCList As Variant, DeptList As Variant, JobList As Variant, AnalList As Variant, PayRefList As Variant, _
                                   ResetJCGL$, _
                                   LineUDFLayout As LineUserFieldsLayout, _
                                   LineUDFields As Variant, _
                                   IsAutoReversing As Boolean) As String
On Error GoTo AddNomVATLinesUDF10_Error

    Dim arrGLCodes As Variant, GLCount As Integer
    Dim arrLineUserFields(1 To 10) As Variant
    Dim ReturnVal As Long
                
    ' Check to see if the function is enabled before processing the UD Field Array
    If (UCase(Trim(Enabled$)) = "YES") Then
        ' Look at the list of GL Codes to determine how many lines have been supplied by the user
        arrGLCodes = GLListToArray(GLList, GLCount%)
    
        ' Declare an array to hold the 10 arrays of User Defined Fields
        ReturnVal = Process2DUserFieldsArray(GLCount%, arrLineUserFields, LineUDFLayout, LineUDFields)
        If (ReturnVal = 0) Then
            AddNomVATLinesUDF10 = AddNomVATLines(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                          HeaderUDFields, GLList, DescList, CurrList, AmountList, RateList, VATCodeList, IncVATCodeList, VATAmountList, _
                                          CostCList, DeptList, JobList, AnalList, PayRefList, ResetJCGL$, _
                                          arrLineUserFields(1), arrLineUserFields(2), _
                                          arrLineUserFields(3), arrLineUserFields(4), _
                                          arrLineUserFields(5), arrLineUserFields(6), _
                                          arrLineUserFields(7), arrLineUserFields(8), _
                                          arrLineUserFields(9), arrLineUserFields(10), _
                                          IsAutoReversing)
        Else
            Error ReturnVal
        End If ' (ReturnVal = 0)
    Else
        AddNomVATLinesUDF10 = "Disabled"
    End If ' (UCase(Trim(Enabled$)) = "YES")
    
    Exit Function
           
AddNomVATLinesUDF10_Error:
    AddNomVATLinesUDF10 = GetErrorStr$
                                          
End Function

'*******************************************************************************
' Name:        EntAddNomVATLines5
' Description: Adds a Nominal Transfer with multiple lines and optional VAT and
'              PayInRef and full user defined field support (ResetJCGL$ = Y)
'*******************************************************************************
Public Function EntAddNomVATLines5(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                   HeaderUDFields As Variant, _
                                   GLList As Variant, DescList As Variant, CurrList As Variant, AmountList As Variant, RateList As Variant, _
                                  VATCodeList As Variant, IncVATCodeList As Variant, VATAmountList As Variant, _
                                  CostCList As Variant, DeptList As Variant, JobList As Variant, AnalList As Variant, PayRefList As Variant, _
                                   LineUDFLayout As LineUserFieldsLayout, _
                                   LineUDFields As Variant) As String
    EntAddNomVATLines5 = AddNomVATLinesUDF10(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                             HeaderUDFields, _
                                             GLList, DescList, CurrList, AmountList, RateList, _
                                             VATCodeList, IncVATCodeList, VATAmountList, _
                                             CostCList, DeptList, JobList, AnalList, PayRefList, "Y", _
                                             LineUDFLayout, LineUDFields, Not AutoReversing)
End Function

'*******************************************************************************
' Name:        EntAddNomVATLines6
' Description: Adds a Nominal Transfer with multiple lines and optional VAT and
'              PayInRef and full user defined field support (ResetJCGL$ = N)
'*******************************************************************************
Public Function EntAddNomVATLines6(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                   HeaderUDFields As Variant, _
                                   GLList As Variant, DescList As Variant, CurrList As Variant, AmountList As Variant, RateList As Variant, _
                                  VATCodeList As Variant, IncVATCodeList As Variant, VATAmountList As Variant, _
                                  CostCList As Variant, DeptList As Variant, JobList As Variant, AnalList As Variant, PayRefList As Variant, _
                                   LineUDFLayout As LineUserFieldsLayout, _
                                   LineUDFields As Variant) As String
    EntAddNomVATLines6 = AddNomVATLinesUDF10(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                             HeaderUDFields, _
                                             GLList, DescList, CurrList, AmountList, RateList, _
                                             VATCodeList, IncVATCodeList, VATAmountList, _
                                             CostCList, DeptList, JobList, AnalList, PayRefList, "N", _
                                             LineUDFLayout, LineUDFields, Not AutoReversing)
End Function

'**********************************************************************************************
' Name:        EntAddNomVATLines5AR
' Description: Adds an Auto-Reversing Nominal Transfer with multiple lines and optional
'              optional VAT and PayInRef and full user defined field support (ResetJCGL$ = Y)
'**********************************************************************************************
Public Function EntAddNomVATLines5AR(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                   HeaderUDFields As Variant, _
                                   GLList As Variant, DescList As Variant, CurrList As Variant, AmountList As Variant, RateList As Variant, _
                                  VATCodeList As Variant, IncVATCodeList As Variant, VATAmountList As Variant, _
                                  CostCList As Variant, DeptList As Variant, JobList As Variant, AnalList As Variant, PayRefList As Variant, _
                                   LineUDFLayout As LineUserFieldsLayout, _
                                   LineUDFields As Variant) As String
    EntAddNomVATLines5AR = AddNomVATLinesUDF10(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                               HeaderUDFields, _
                                               GLList, DescList, CurrList, AmountList, RateList, _
                                               VATCodeList, IncVATCodeList, VATAmountList, _
                                               CostCList, DeptList, JobList, AnalList, PayRefList, "Y", _
                                               LineUDFLayout, LineUDFields, AutoReversing)
End Function

'**********************************************************************************************
' Name:        EntAddNomVATLines6AR
' Description: Adds a Auto-Reversing Nominal Transfer with multiple lines and optional VAT and
'              PayInRef and full user defined field support (ResetJCGL$ = N)
'**********************************************************************************************
Public Function EntAddNomVATLines6AR(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                   HeaderUDFields As Variant, _
                                   GLList As Variant, DescList As Variant, CurrList As Variant, AmountList As Variant, RateList As Variant, _
                                  VATCodeList As Variant, IncVATCodeList As Variant, VATAmountList As Variant, _
                                  CostCList As Variant, DeptList As Variant, JobList As Variant, AnalList As Variant, PayRefList As Variant, _
                                   LineUDFLayout As LineUserFieldsLayout, _
                                   LineUDFields As Variant) As String
    EntAddNomVATLines6AR = AddNomVATLinesUDF10(Enabled$, Company$, TransDate$, TheYear%, ThePeriod%, TranDesc$, VATCountry$, VATFlag$, _
                                             HeaderUDFields, _
                                             GLList, DescList, CurrList, AmountList, RateList, _
                                             VATCodeList, IncVATCodeList, VATAmountList, _
                                             CostCList, DeptList, JobList, AnalList, PayRefList, "N", _
                                             LineUDFLayout, LineUDFields, AutoReversing)
End Function


' Converts the Variant Array passed in for the GL Codes into an Array of Long and
' returns it as a Variant because the OLE passed the initial Variant Array as an
' OLE Object not a Variant Array (Thank you Bill!) It also returns the number of
' GL Codes in the list so it can be checked against the others
Private Function GLListToArray(GLList As Variant, ByRef cntGL%) As Variant
    Dim arrGL() As Long, ArrElem As Variant, tmpLong&
    
    cntGL% = 0
    
    If IsArray(GLList) Then
        For Each ArrElem In GLList
            ' Process Arrays
            If IsNumeric(ArrElem) Then
                tmpLong& = CLng(ArrElem)
                If (tmpLong& > 0) Then
                    cntGL = cntGL + 1
                    ReDim Preserve arrGL(1 To cntGL) As Long
                    arrGL(cntGL) = tmpLong&
                Else
                    ' Invalid GL Code
                    Error 511
                End If
            Else
                ' Invalid GL Code
                Error 511
            End If
        Next ArrElem
    Else
        ' Invalid GL List
        Error 544
    End If
 
    If (cntGL% = 0) Then
        ' Invalid GL List
        Error 544
    End If

    GLListToArray = arrGL
End Function ' GLListToArray


' Converts the Variant Array passed in for the GL Codes into an Array of Long and
' returns it as a Variant because the OLE passed the initial Variant Array as an
' OLE Object not a Variant Array (Thank you Bill!)
Private Function DescListToArray(DescList As Variant, cntGL%, ErrCode%) As Variant
    Dim arrDesc() As String, ArrElem As Variant, arrCnt%, tmpStr$
    
    ReDim arrDesc(1 To cntGL%) As String
    
    If IsArray(DescList) Then
        arrCnt% = 0
        
        For Each ArrElem In DescList
            ' Process Arrays
            tmpStr$ = CStr(ArrElem)
            arrCnt% = arrCnt% + 1
            arrDesc(arrCnt%) = tmpStr$
        Next ArrElem

        ' check all elements have been specified
        If (arrCnt% <> cntGL%) Then
            ' Invalid Description List
            Error ErrCode%
        End If
    Else
        ' Single Item - Copy into all elements
        tmpStr$ = Trim(DescList)
        
        For arrCnt% = LBound(arrDesc) To UBound(arrDesc)
            arrDesc(arrCnt%) = tmpStr$
        Next arrCnt%
    End If

    DescListToArray = arrDesc
End Function ' DescListToArray


' Converts the Variant Array passed in for the Currencies into an Array of Integer and
' returns it as a Variant because the OLE passed the initial Variant Array as an
' OLE Object not a Variant Array (Thank you Bill!)
Private Function CurrListToArray(CurrList As Variant, cntGL%) As Variant
    Dim arrCurr() As Integer, ArrElem As Variant, arrCnt%, tmpInt%
    
    ReDim arrCurr(1 To cntGL%) As Integer
    
    If IsArray(CurrList) Then
        arrCnt% = 0
        
        For Each ArrElem In CurrList
            ' Process Arrays
            If IsNumeric(ArrElem) Then
                tmpInt% = CInt(ArrElem)
                If (tmpInt% >= 0) And (tmpInt% <= 90) Then
                    arrCnt% = arrCnt% + 1
                    arrCurr(arrCnt%) = tmpInt%
                Else
                    ' Invalid Currency
                    Error 514
                End If
            Else
                ' Invalid Currency
                Error 514
            End If
        Next ArrElem

        ' check all elements have been specified
        If (arrCnt% <> cntGL%) Then
            ' Invalid Currency List
            Error 546
        End If
    Else
        If IsNumeric(CurrList) Then
            ' Single Item - Copy into all elements
            tmpInt% = CInt(CurrList)
        
            For arrCnt% = LBound(arrCurr) To UBound(arrCurr)
                arrCurr(arrCnt%) = tmpInt%
            Next arrCnt%
        Else
            ' Invalid Currency List
            Error 546
        End If
    End If

    CurrListToArray = arrCurr
End Function ' CurrListToArray


' Converts the Variant Array passed in for the Currencies into an Array of Integer and
' returns it as a Variant because the OLE passed the initial Variant Array as an
' OLE Object not a Variant Array (Thank you Bill!)
Private Function AmtListToArray(AmtList As Variant, cntGL%, ValMode%, Err1%, Err2%) As Variant
    Dim arrAmount() As Double, ArrElem As Variant, arrCnt%, tmpDub#
    
    ReDim arrAmount(1 To cntGL%) As Double
    
    If IsArray(AmtList) Then
        arrCnt% = 0
        
        For Each ArrElem In AmtList
            ' Process Arrays
            If IsNumeric(ArrElem) Then
                tmpDub# = CDbl(ArrElem)
                If (ValMode% = 0) Then
                    ' check non-zero
                    If (tmpDub# <> 0#) Then
                        arrCnt% = arrCnt% + 1
                        arrAmount(arrCnt%) = tmpDub#
                    Else
                        ' Invalid Amount
                        Error Err1%
                    End If
                Else
                    ' 0 is OK
                    arrCnt% = arrCnt% + 1
                    arrAmount(arrCnt%) = tmpDub#
                End If
            Else
                ' Invalid Amount/Rate
                Error Err1%
            End If
        Next ArrElem

        ' check all elements have been specified
        If (arrCnt% <> cntGL%) Then
            ' Invalid Amount/Rate List
            Error Err2%
        End If
    Else
        If (ValMode% = 0) Then
            ' Invalid Amount List - Cannot have same amount on each line
            Error Err2%
        Else
            ' Rate List - Can have a single rate
            If IsNumeric(ArrElem) Then
                ' Single Item - Copy into all elements
                tmpDub# = CDbl(ArrElem)
                
                For arrCnt% = LBound(arrAmount) To UBound(arrAmount)
                    arrAmount(arrCnt%) = tmpDub#
                Next arrCnt%
            Else
                ' Invalid Rate
                Error Err1%
            End If
        End If
    End If

    AmtListToArray = arrAmount
End Function ' AmtListToArray


' Builds and returns a Variant String Array
Private Function BuildStrArray(ArrCount%, DefVal$) As Variant
    Dim arrStrings() As String, I%

    ReDim arrStrings(1 To ArrCount%) As String

    For I% = LBound(arrStrings) To UBound(arrStrings)
        arrStrings(ArrCount%) = DefVal$
    Next I%

    BuildStrArray = arrStrings
End Function ' BuildStrArray


' Builds and returns a Variant Double Array
Private Function BuildDblArray(ArrCount%, DefVal#) As Variant
    Dim arrDoubles() As Double, I%

    ReDim arrDoubles(1 To ArrCount%) As Double

    For I% = LBound(arrDoubles) To UBound(arrDoubles)
        arrDoubles(ArrCount%) = DefVal#
    Next I%

    BuildDblArray = arrDoubles
End Function ' BuildDblArray


' Converts the Variant Array passed in for the Header User Defined Fields into an Array of
' strings returns it as a Variant because the OLE passed the initial Variant Array as an
' OLE Object not a Variant Array
Private Function ProcessHeadUDFieldsIntoArray(UDFSource As Variant) As Variant
    Dim arrDesc() As String, ArrElem As Variant, arrCnt%, tmpStr$
    
    ' Declare and initialise the array of 10 Header user defined fields
    ReDim arrDesc(1 To 10) As String
    arrDesc = BuildStrArray(UBound(arrDesc), "")
    
    If IsArray(UDFSource) Then
        ' Array - run through items copying them out into the array - any number
        ' of items up to 10 is OK
        arrCnt% = 0
        For Each ArrElem In UDFSource
            ' Process Arrays
            arrCnt% = arrCnt% + 1
            If (arrCnt% <= UBound(arrDesc)) Then
                tmpStr$ = CStr(ArrElem)
                arrDesc(arrCnt%) = tmpStr$
            Else
                ' Too many items
                Error 584
                Exit For
            End If
        Next ArrElem
    Else
        ' Single Item
        arrDesc(1) = Trim(UDFSource)
    End If

    ProcessHeadUDFieldsIntoArray = arrDesc
End Function ' DescListToArray

Attribute VB_Name = "Common"

'*********************************************************************8
'***
'*    Common Module across ALL Workbooks except EntFuncs.Xls
'***
'*********************************************************************8

Option Explicit
Option Private Module

Global EntServer As Object
Global ServerSet As Boolean


' returns True if the passed Nominal Code is valid
Public Function ValidCompany(Company$) As Boolean
    Company$ = Trim(Company$)
    
    If (Len(Company) > 0) And (Len(Company) <= 6) Then
        ValidCompany = True
    Else
        Error 516
        ValidCompany = False
    End If
End Function
 

' returns True if the passed General Ledger Code is valid
Public Function ValidGLCode(GLCode As Long) As Boolean
    If (GLCode <= 0) Then
        If (GLCode < 0) Then
            Error 511
        End If
        
        ValidGLCode = False
    Else
        ValidGLCode = True
    End If
End Function


' returns True if the passed year is valid
Public Function ValidYear(TheYear%) As Boolean
    If ((TheYear > 1900) And (TheYear < 2100)) Or (TheYear = -99) Then
        ' Actual Year or F6 Year
        ValidYear = True
    Else
        Error 512
        ValidYear = False
    End If
End Function


' returns True if the passed period is valid
Public Function ValidPeriod(ThePeriod%) As Boolean
    If ((ThePeriod >= 0) And (ThePeriod <= 99)) Or (ThePeriod = -99) Or (ThePeriod = -98) Or ((ThePeriod >= 101) And (ThePeriod <= 199)) Then
        ' Actual Period or F6 Period or CTD or CTD Period Offset
        ValidPeriod = True
    Else
        Error 513
        ValidPeriod = False
    End If
End Function

Public Function ValidTransactionPeriod(ThePeriod%) As Boolean
    If (ThePeriod >= 1) And (ThePeriod <= 99) Then
        ' Actual Period or F6 Period or CTD or CTD Period Offset
        ValidTransactionPeriod = True
    Else
        Error 513
        ValidTransactionPeriod = False
    End If
End Function


' returns True if the passed currency is valid
Public Function ValidCcy(TheCcy%) As Boolean
    If (TheCcy < 0) Or (TheCcy > 90) Then
        Error 514
        ValidCcy = False
    Else
        ValidCcy = True
    End If
End Function


' returns true if the passed customer code is valid
Public Function ValidCustCode(CustCode$, CSType$) As Boolean
    CustCode$ = UCase(Trim(CustCode$))

    If (Len(CustCode) > 0) And (Len(CustCode) <= 6) Then
        ValidCustCode = True
    Else
        ValidCustCode = False
        If (CSType$ = "C") Then
            Error 515
        Else
            Error 526
        End If
    End If
End Function

' returns True if the passed Stock Code is valid
Public Function ValidStockCode(StockCode$) As Boolean
    StockCode$ = UCase(Trim(StockCode$))
    
    ValidStockCode = True
End Function

' returns True if the passed Stock Code is valid
Public Function ValidLocation(LocCode$) As Boolean
    LocCode$ = UCase(Trim(LocCode$))
    
    If (Len(LocCode$) > 0) And (Len(LocCode$) <= 3) Then
        ValidLocation = True
    Else
        ValidLocation = False
        Error 527
    End If
End Function

' returns True if the passed Nominal Code is valid
Public Function ValidCCDep(IsCC%, ByRef CCDep$) As Boolean
    CCDep$ = UCase(Trim(CCDep$))

    If (Len(CCDep$) >= 0) And (Len(CCDep$) <= 3) Then
        ValidCCDep = True
    Else
        If IsCC% = True Then
            Error 519
        Else
            Error 520
        End If
        ValidCCDep = False
    End If
End Function


' Returns True if the passed JC Total Type is valid
Public Function ValidTotType(TType%) As Boolean
    If (TType% = 10) Or (TType% = 20) Or (TType% = 30) Or (TType% = 40) Or (TType% = 50) Or (TType% = 60) Or (TType% = 99) Or (TType% = 160) Or (TType% = 170) Or (TType% = 180) Or (TType% = 190) Then
        ValidTotType = True
    Else
        Error 531
        ValidTotType = False
    End If
End Function


' returns True if the passed Stock Code is valid
Public Function ValidJobCode(JobCode$) As Boolean
    JobCode$ = UCase(Trim(JobCode$))
    
    If (Len(JobCode$) > 0) And (Len(JobCode$) <= 10) Then
        ValidJobCode = True
    Else
        ValidJobCode = False
        Error 521
    End If
End Function


' returns True if the passed date is valid
Public Function ValidDate(TheDate$, ActDate As Date, ErrNo%) As Boolean
On Error GoTo ValidDate_Error

    If IsDate(TheDate) Then
        ValidDate = True
        ActDate = CDate(TheDate$)
    Else
        ValidDate = False
        Error ErrNo%
    End If
    
    GoTo ValidDate_Exit
    
ValidDate_Error:
    Error ErrNo%
    ValidDate = False

ValidDate_Exit:
End Function


' Validates the Posted/Committed parameter used in some JC history functions
Public Function ValidPC(PCStr$) As Boolean
    PCStr$ = UCase(PCStr$)
    
    If (Len(PCStr$) = 1) And ((Left$(PCStr$, 1) = "P") Or (Left$(PCStr$, 1) = "C")) Then
        ' 1 Char long and "P" or "C"
        ValidPC = True
    Else
        Error 533       ' Invalid Posted/Commited Flag
        ValidPC = False
    End If
End Function


' returns a formatted error string
Public Function GetErrorStr() As String
    GetErrorStr = "Error (" + Trim(Str(Err)) + "): " + EntErrorStr(Err)
End Function


' returns a formatted error string for number fields
Public Function GetErrorNumStr() As String
    GetErrorNumStr = "#(" + Trim(Str(Err)) + "): " + EntErrorStr(Err)
End Function


' Checks for the local server, and gets the server from EntFuncs.XLA if necessary
Public Function LocalCheckServer() As Boolean
On Error GoTo LocalCheckServer_Error

    If Not ServerSet Then
        ' Server Not Running - Start server
        If ZSYS9194(719, EntServer) Then
            ServerSet = True
        Else
            ServerSet = False
        End If
    End If

    ' Finish procedure without causing an error
    LocalCheckServer = ServerSet
    GoTo LocalCheckServer_Exit
    
LocalCheckServer_Error:
    Error 500
    LocalCheckServer = False

LocalCheckServer_Exit:
End Function

Attribute VB_Name = "CustSave"

Option Explicit


'*******************************************************************************
' Name:        EntCustSaveName
' Description: Saves the name to the specified customer code
'*******************************************************************************
Public Function EntCustSaveName(Company$, CustCode$, NewName$) As String
Attribute EntCustSaveName.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveName = SaveAcMiscStr(Company$, CustCode$, "C", 1, NewName$)
End Function


'*******************************************************************************
' Name:        EntCustSaveAddress
' Description: Saves the address line for the customer
'*******************************************************************************
Public Function EntCustSaveAddress(Company$, CustCode$, LineNo%, NewAddress$) As String
Attribute EntCustSaveAddress.VB_ProcData.VB_Invoke_Func = " \n14"
    If (LineNo% >= 1) And (LineNo% <= 5) Then
        EntCustSaveAddress = SaveAcMiscStr(Company$, CustCode$, "C", 1 + LineNo%, NewAddress$)
    Else
        EntCustSaveAddress = EntErrorStr$(543)
    End If
End Function


'*******************************************************************************
' Name:        EntCustSaveContact
' Description: Saves the contact name for the customer
'*******************************************************************************
Public Function EntCustSaveContact(Company$, CustCode$, NewContact$) As String
Attribute EntCustSaveContact.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveContact = SaveAcMiscStr(Company$, CustCode$, "C", 7, NewContact$)
End Function


'*******************************************************************************
' Name:        EntCustSavePhone
' Description: Saves the Phone Number for the customer
'*******************************************************************************
Public Function EntCustSavePhone(Company$, CustCode$, NewPhone$) As String
Attribute EntCustSavePhone.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSavePhone = SaveAcMiscStr(Company$, CustCode$, "C", 8, NewPhone$)
End Function


'*******************************************************************************
' Name:        EntCustSaveFax
' Description: Saves the Fax Number for the customer
'*******************************************************************************
Public Function EntCustSaveFax(Company$, CustCode$, NewFax$) As String
Attribute EntCustSaveFax.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveFax = SaveAcMiscStr(Company$, CustCode$, "C", 9, NewFax$)
End Function


'*******************************************************************************
' Name:        EntCustSaveMobile
' Description: Saves the Mobile Number for the customer
'*******************************************************************************
Public Function EntCustSaveMobile(Company$, CustCode$, NewPhone$) As String
Attribute EntCustSaveMobile.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveMobile = SaveAcMiscStr(Company$, CustCode$, "C", 10, NewPhone$)
End Function


'*******************************************************************************
' Name:        EntCustSaveUser1
' Description: Saves the User Defined field 1 for the customer
'*******************************************************************************
Public Function EntCustSaveUser1(Company$, CustCode$, NewUser$) As String
Attribute EntCustSaveUser1.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveUser1 = SaveAcMiscStr(Company$, CustCode$, "C", 11, NewUser$)
End Function


'*******************************************************************************
' Name:        EntCustSaveUser2
' Description: Saves the User Defined field 2 for the customer
'*******************************************************************************
Public Function EntCustSaveUser2(Company$, CustCode$, NewUser$) As String
Attribute EntCustSaveUser2.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveUser2 = SaveAcMiscStr(Company$, CustCode$, "C", 12, NewUser$)
End Function


'*******************************************************************************
' Name:        EntCustSaveCC
' Description: Saves the Cost Centre for the customer
'*******************************************************************************
Public Function EntCustSaveCC(Company$, CustCode$, NewCC$) As String
Attribute EntCustSaveCC.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveCC = SaveAcMiscStr(Company$, CustCode$, "C", 13, NewCC$)
End Function


'*******************************************************************************
' Name:        EntCustSaveDept
' Description: Saves the Cost Centre for the customer
'*******************************************************************************
Public Function EntCustSaveDept(Company$, CustCode$, NewDept$) As String
Attribute EntCustSaveDept.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveDept = SaveAcMiscStr(Company$, CustCode$, "C", 14, NewDept$)
End Function


'*******************************************************************************
' Name:        EntCustSaveArea
' Description: Saves the Area for the customer
'*******************************************************************************
Public Function EntCustSaveArea(Company$, CustCode$, NewArea$) As String
Attribute EntCustSaveArea.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveArea = SaveAcMiscStr(Company$, CustCode$, "C", 15, NewArea$)
End Function


'*******************************************************************************
' Name:        EntCustSaveAccType
' Description: Saves the Area for the customer
'*******************************************************************************
Public Function EntCustSaveAccType(Company$, CustCode$, NewAccType$) As String
Attribute EntCustSaveAccType.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveAccType = SaveAcMiscStr(Company$, CustCode$, "C", 16, NewAccType$)
End Function


'*******************************************************************************
' Name:        EntCustSaveCurrency
' Description: Save the Currency for the specified customer
'*******************************************************************************
Public Function EntCustSaveCurrency(Company$, CustCode$, NewCcy&) As Variant
Attribute EntCustSaveCurrency.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveCurrency = SaveAcMiscInt(Company$, CustCode$, "C", 1, NewCcy&)
End Function


'*******************************************************************************
' Name:        EntCustSaveSalesGL
' Description: Save the Sales GL Code for the specified customer
'*******************************************************************************
Public Function EntCustSaveSalesGL(Company$, CustCode$, NewGL&) As Variant
Attribute EntCustSaveSalesGL.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveSalesGL = SaveAcMiscInt(Company$, CustCode$, "C", 2, NewGL&)
End Function


'*******************************************************************************
' Name:        EntCustSaveCostGL
' Description: Save the Cost Of Sales GL Code for the specified customer
'*******************************************************************************
Public Function EntCustSaveCostGL(Company$, CustCode$, NewGL&) As Variant
Attribute EntCustSaveCostGL.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveCostGL = SaveAcMiscInt(Company$, CustCode$, "C", 3, NewGL&)
End Function


'*******************************************************************************
' Name:        EntCustSaveControlGL
' Description: Save the Control GL Code for the specified customer
'*******************************************************************************
Public Function EntCustSaveControlGL(Company$, CustCode$, NewGL&) As Variant
Attribute EntCustSaveControlGL.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveControlGL = SaveAcMiscInt(Company$, CustCode$, "C", 4, NewGL&)
End Function


'*******************************************************************************
' Name:        EntCustSaveCreditLimit
' Description: Saves the customers Credit Limit
'*******************************************************************************
Public Function EntCustSaveCreditLimit(Company$, CustCode$, NewLimit#) As Variant
Attribute EntCustSaveCreditLimit.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveCreditLimit = SaveAcMiscVal(Company$, CustCode$, "C", 1, NewLimit#)
End Function


'*******************************************************************************
' Name:        EntCustSaveDelAddress
' Description: Saves the delivery address line for the customer
'*******************************************************************************
Public Function EntCustSaveDelAddress(Company$, CustCode$, LineNo%, NewAddress$) As String
Attribute EntCustSaveDelAddress.VB_ProcData.VB_Invoke_Func = " \n14"
    If (LineNo% >= 1) And (LineNo% <= 5) Then
        EntCustSaveDelAddress = SaveAcMiscStr(Company$, CustCode$, "C", 16 + LineNo%, NewAddress$)
    Else
        EntCustSaveDelAddress = EntErrorStr$(543)
    End If
End Function


'*******************************************************************************
' Name:        EntCustSaveStatementTo
' Description: Saves the Statement To Account Code for the customer
'*******************************************************************************
Public Function EntCustSaveStatementTo(Company$, CustCode$, NewCode$) As String
Attribute EntCustSaveStatementTo.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveStatementTo = SaveAcMiscStr(Company$, CustCode$, "C", 22, NewCode$)
End Function


'*******************************************************************************
' Name:        EntCustSaveVATCode
' Description: Saves the VAT Code for the customer
'*******************************************************************************
Public Function EntCustSaveVATCode(Company$, CustCode$, NewCode$) As String
Attribute EntCustSaveVATCode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveVATCode = SaveAcMiscStr(Company$, CustCode$, "C", 23, NewCode$)
End Function


'*******************************************************************************
' Name:        EntCustSaveECMember
' Description: Saves the EC Member flag for the customer
'*******************************************************************************
Public Function EntCustSaveECMember(Company$, CustCode$, NewECMember$) As String
Attribute EntCustSaveECMember.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveECMember = SaveAcMiscStr(Company$, CustCode$, "C", 24, NewECMember$)
End Function


'*******************************************************************************
' Name:        EntCustSaveInvoiceTo
' Description: Saves the Invoice To Account Code for the customer
'*******************************************************************************
Public Function EntCustSaveInvoiceTo(Company$, CustCode$, NewUser$) As String
Attribute EntCustSaveInvoiceTo.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveInvoiceTo = SaveAcMiscStr(Company$, CustCode$, "C", 25, NewUser$)
End Function


'*******************************************************************************
' Name:        EntCustSaveUser3
' Description: Saves the User Defined field 3 for the customer
'*******************************************************************************
Public Function EntCustSaveUser3(Company$, CustCode$, NewUser$) As String
Attribute EntCustSaveUser3.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveUser3 = SaveAcMiscStr(Company$, CustCode$, "C", 26, NewUser$)
End Function


'*******************************************************************************
' Name:        EntCustSaveUser4
' Description: Saves the User Defined field 4 for the customer
'*******************************************************************************
Public Function EntCustSaveUser4(Company$, CustCode$, NewUser$) As String
Attribute EntCustSaveUser4.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveUser4 = SaveAcMiscStr(Company$, CustCode$, "C", 27, NewUser$)
End Function


'*******************************************************************************
' Name:        EntCustSaveAltCode
' Description: Saves the Alternate Code for the customer
'*******************************************************************************
Public Function EntCustSaveAltCode(Company$, CustCode$, NewCode$) As String
Attribute EntCustSaveAltCode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveAltCode = SaveAcMiscStr(Company$, CustCode$, "C", 28, NewCode$)
End Function


'*******************************************************************************
' Name:        EntCustSaveLocation
' Description: Saves the Default Location for the customer
'*******************************************************************************
Public Function EntCustSaveLocation(Company$, CustCode$, NewLocation$) As String
Attribute EntCustSaveLocation.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveLocation = SaveAcMiscStr(Company$, CustCode$, "C", 29, NewLocation$)
End Function


'*******************************************************************************
' Name:        EntCustSavePayTerms
' Description: Save the Sales GL Code for the specified customer
'*******************************************************************************
Public Function EntCustSavePayTerms(Company$, CustCode$, NewTerms&) As Variant
Attribute EntCustSavePayTerms.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSavePayTerms = SaveAcMiscInt(Company$, CustCode$, "C", 5, NewTerms&)
End Function


'*******************************************************************************
' Name:        EntCustSaveSettleDays
' Description: Save the Sales GL Code for the specified customer
'*******************************************************************************
Public Function EntCustSaveSettleDays(Company$, CustCode$, NewDays&) As Variant
Attribute EntCustSaveSettleDays.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveSettleDays = SaveAcMiscInt(Company$, CustCode$, "C", 6, NewDays&)
End Function


'*******************************************************************************
' Name:        EntCustSaveFormSet
' Description: Save the Sales GL Code for the specified customer
'*******************************************************************************
Public Function EntCustSaveFormSet(Company$, CustCode$, NewSet&) As Variant
Attribute EntCustSaveFormSet.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveFormSet = SaveAcMiscInt(Company$, CustCode$, "C", 7, NewSet&)
End Function


'*******************************************************************************
' Name:        EntCustSaveDiscount
' Description: Saves the customers Discount%
'*******************************************************************************
Public Function EntCustSaveDiscount(Company$, CustCode$, NewPerc#) As Variant
Attribute EntCustSaveDiscount.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveDiscount = SaveAcMiscVal(Company$, CustCode$, "C", 2, NewPerc#)
End Function


'*******************************************************************************
' Name:        EntCustSavePostCode
' Description: Saves the PostCode for the customer
'*******************************************************************************
Public Function EntCustSavePostCode(Company$, CustCode$, NewCode$) As String
Attribute EntCustSavePostCode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSavePostCode = SaveAcMiscStr(Company$, CustCode$, "C", 30, NewCode$)
End Function


'*******************************************************************************
' Name:        EntCustSaveEmailAddr
' Description: Saves the Email Address to the specified customer code
'*******************************************************************************
Public Function EntCustSaveEmailAddr(Company$, CustCode$, NewEmail$) As String
Attribute EntCustSaveEmailAddr.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveEmailAddr = SaveAcMiscStr(Company$, CustCode$, "C", 31, NewEmail$)
End Function


'*******************************************************************************
' Name:        EntCustSaveSendReader
' Description: Saves the Send Reader flag to the specified customer code
'*******************************************************************************
Public Function EntCustSaveSendReader(Company$, CustCode$, NewYN$) As String
Attribute EntCustSaveSendReader.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveSendReader = SaveAcMiscStr(Company$, CustCode$, "C", 32, NewYN$)
End Function


'*******************************************************************************
' Name:        EntCustSaveZipAttachments
' Description: Saves the ZIP Attachments flag to the specified customer code
'*******************************************************************************
Public Function EntCustSaveZipAttachments(Company$, CustCode$, NewYN$) As String
Attribute EntCustSaveZipAttachments.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveZipAttachments = SaveAcMiscStr(Company$, CustCode$, "C", 33, NewYN$)
End Function


'*******************************************************************************
' Name:        EntCustSaveSendHTML
' Description: Saves the Send HTML flag to the specified customer code
'*******************************************************************************
Public Function EntCustSaveSendHTML(Company$, CustCode$, NewYN$) As String
Attribute EntCustSaveSendHTML.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveSendHTML = SaveAcMiscStr(Company$, CustCode$, "C", 34, NewYN$)
End Function


'*******************************************************************************
' Name:        EntCustSaveWebCatalogs
' Description: Saves the Send HTML flag to the specified customer code
'*******************************************************************************
Public Function EntCustSaveWebCatalogs(Company$, CustCode$, NewCatalogs$) As String
Attribute EntCustSaveWebCatalogs.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveWebCatalogs = SaveAcMiscStr(Company$, CustCode$, "C", 35, NewCatalogs$)
End Function


'*******************************************************************************
' Name:        EntCustSaveSSDDelTerms
' Description: Saves the Send HTML flag to the specified customer code
'*******************************************************************************
Public Function EntCustSaveSSDDelTerms(Company$, CustCode$, NewTerms$) As String
Attribute EntCustSaveSSDDelTerms.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveSSDDelTerms = SaveAcMiscStr(Company$, CustCode$, "C", 37, NewTerms$)
End Function


'*******************************************************************************
' Name:        EntCustSaveSSDTransMode
' Description: Save the Currency for the specified customer
'*******************************************************************************
Public Function EntCustSaveSSDTransMode(Company$, CustCode$, NewMode&) As Variant
Attribute EntCustSaveSSDTransMode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveSSDTransMode = SaveAcMiscInt(Company$, CustCode$, "C", 8, NewMode&)
End Function


'*******************************************************************************
' Name:        EntCustSaveLineDiscount
' Description: Saves the default Line Discount for the customer
'*******************************************************************************
Public Function EntCustSaveLineDiscount(Company$, CustCode$, NewLineDisc$) As String
Attribute EntCustSaveLineDiscount.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveLineDiscount = SaveAcMiscStr(Company$, CustCode$, "C", 38, NewLineDisc$)
End Function


'*******************************************************************************
' Name:        EntCustSaveVATRegNo
' Description: Saves the default Line Discount for the customer
'*******************************************************************************
Public Function EntCustSaveVATRegNo(Company$, CustCode$, NewVATRegNo$) As String
Attribute EntCustSaveVATRegNo.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveVATRegNo = SaveAcMiscStr(Company$, CustCode$, "C", 39, NewVATRegNo$)
End Function


'*******************************************************************************
' Name:        EntCustSaveTradingTerms
' Description: Saves the Trading Terms messages for the specified customer code
'*******************************************************************************
Public Function EntCustSaveTradingTerms(Company$, CustCode$, LineNo%, NewTradeTerm$) As String
Attribute EntCustSaveTradingTerms.VB_ProcData.VB_Invoke_Func = " \n14"
    If (LineNo% = 1) Or (LineNo% = 2) Then
        EntCustSaveTradingTerms = SaveAcMiscStr(Company$, CustCode$, "C", 39 + LineNo%, NewTradeTerm$)
    Else
        ' Invalid Line Number
        EntCustSaveTradingTerms = EntErrorStr$(543)
    End If
End Function


'*******************************************************************************
' Name:        EntCustSavePayType
' Description: Saves the Payment Type (B=BACS/C=Cheque) for the customer
'*******************************************************************************
Public Function EntCustSavePayType(Company$, CustCode$, NewPayType$) As String
Attribute EntCustSavePayType.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSavePayType = SaveAcMiscStr(Company$, CustCode$, "C", 42, NewPayType$)
End Function


'*******************************************************************************
' Name:        EntCustSaveBankAccount
' Description: Saves the Bank Account Number for the customer
'*******************************************************************************
Public Function EntCustSaveBankAccount(Company$, CustCode$, NewBankAccount$) As String
Attribute EntCustSaveBankAccount.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveBankAccount = SaveAcMiscStr(Company$, CustCode$, "C", 43, NewBankAccount$)
End Function


'*******************************************************************************
' Name:        EntCustSaveBankSortCode
' Description: Saves the Bank Sort Code for the customer
'*******************************************************************************
Public Function EntCustSaveBankSortCode(Company$, CustCode$, NewBankSortCode$) As String
Attribute EntCustSaveBankSortCode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveBankSortCode = SaveAcMiscStr(Company$, CustCode$, "C", 44, NewBankSortCode$)
End Function


'*******************************************************************************
' Name:        EntCustSaveBankRef
' Description: Saves the Bank Reference for the customer
'*******************************************************************************
Public Function EntCustSaveBankRef(Company$, CustCode$, NewBankRef$) As String
Attribute EntCustSaveBankRef.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveBankRef = SaveAcMiscStr(Company$, CustCode$, "C", 45, NewBankRef$)
End Function


'*******************************************************************************
' Name:        EntCustSaveDirectDebitMode
' Description: Saves the Direct Debit for the customer
'*******************************************************************************
Public Function EntCustSaveDirectDebitMode(Company$, CustCode$, NewDDMode$) As String
Attribute EntCustSaveDirectDebitMode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveDirectDebitMode = SaveAcMiscStr(Company$, CustCode$, "C", 46, NewDDMode$)
End Function


'*******************************************************************************
' Name:        EntCustSaveInvoiceDeliveryMode
' Description: Saves the Invoice Delivery Mode for the customer
'*******************************************************************************
Public Function EntCustSaveInvoiceDeliveryMode(Company$, CustCode$, NewMode$) As String
Attribute EntCustSaveInvoiceDeliveryMode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveInvoiceDeliveryMode = SaveAcMiscStr(Company$, CustCode$, "C", 48, NewMode$)
End Function


'*******************************************************************************
' Name:        EntCustSaveStatementDeliveryMode
' Description: Saves the Statement Delivery Mode for the customer
'*******************************************************************************
Public Function EntCustSaveStatementDeliveryMode(Company$, CustCode$, NewMode$) As String
Attribute EntCustSaveStatementDeliveryMode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveStatementDeliveryMode = SaveAcMiscStr(Company$, CustCode$, "C", 47, NewMode$)
End Function


'*******************************************************************************
' Name:        EntCustSaveStatus
' Description: Saves the Status for the customer
'*******************************************************************************
Public Function EntCustSaveStatus(Company$, CustCode$, NewStatus$) As String
Attribute EntCustSaveStatus.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveStatus = SaveAcMiscStr(Company$, CustCode$, "C", 49, NewStatus$)
End Function


'*******************************************************************************
' Name:        EntCustSaveTagNo
' Description: Save the Tag Number for the specified customer
'*******************************************************************************
Public Function EntCustSaveTagNo(Company$, CustCode$, NewTag&) As Variant
Attribute EntCustSaveTagNo.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveTagNo = SaveAcMiscInt(Company$, CustCode$, "C", 9, NewTag&)
End Function


'*******************************************************************************
' Name:        EntCustSaveTheirAccount
' Description: Saves the Their A/C for Us field for the specified Customer Code
'*******************************************************************************
Public Function EntCustSaveTheirAccount(Company$, CustCode$, NewAccount$) As String
Attribute EntCustSaveTheirAccount.VB_ProcData.VB_Invoke_Func = " \n14"
    EntCustSaveTheirAccount = SaveAcMiscStr(Company$, CustCode$, "C", 50, NewAccount$)
End Function

'*******************************************************************************
' Name:        EntCustSaveUser5
' Description: Saves the User Defined field 5 for the customer
'*******************************************************************************
Public Function EntCustSaveUser5(Company$, CustCode$, NewUser$) As String
    EntCustSaveUser5 = SaveAcMiscStr(Company$, CustCode$, "C", 51, NewUser$)
End Function
'*******************************************************************************
' Name:        EntCustSaveUser6
' Description: Saves the User Defined field 6 for the customer
'*******************************************************************************
Public Function EntCustSaveUser6(Company$, CustCode$, NewUser$) As String
    EntCustSaveUser6 = SaveAcMiscStr(Company$, CustCode$, "C", 52, NewUser$)
End Function
'*******************************************************************************
' Name:        EntCustSaveUser7
' Description: Saves the User Defined field 7 for the customer
'*******************************************************************************
Public Function EntCustSaveUser7(Company$, CustCode$, NewUser$) As String
    EntCustSaveUser7 = SaveAcMiscStr(Company$, CustCode$, "C", 53, NewUser$)
End Function
'*******************************************************************************
' Name:        EntCustSaveUser8
' Description: Saves the User Defined field 8 for the customer
'*******************************************************************************
Public Function EntCustSaveUser8(Company$, CustCode$, NewUser$) As String
    EntCustSaveUser8 = SaveAcMiscStr(Company$, CustCode$, "C", 54, NewUser$)
End Function
'*******************************************************************************
' Name:        EntCustSaveUser9
' Description: Saves the User Defined field 9 for the customer
'*******************************************************************************
Public Function EntCustSaveUser9(Company$, CustCode$, NewUser$) As String
    EntCustSaveUser9 = SaveAcMiscStr(Company$, CustCode$, "C", 55, NewUser$)
End Function
'*******************************************************************************
' Name:        EntCustSaveUser10
' Description: Saves the User Defined field 10 for the customer
'*******************************************************************************
Public Function EntCustSaveUser10(Company$, CustCode$, NewUser$) As String
    EntCustSaveUser10 = SaveAcMiscStr(Company$, CustCode$, "C", 56, NewUser$)
End Function


'*******************************************************************************
' Name:        EntCustSaveMandateId
' Description: Saves the Mandate ID to the specified customer code
'*******************************************************************************
Public Function EntCustSaveMandateId(Company$, CustCode$, NewMandateId$) As String
    EntCustSaveMandateId = SaveAcMiscStr(Company$, CustCode$, "C", 57, NewMandateId$)
End Function


'*******************************************************************************
' Name:        EntCustSaveMandateDate
' Description: Saves the Mandate Date to the specified customer code
'*******************************************************************************
Public Function EntCustSaveMandateDate(Company$, CustCode$, NewMandateDate$) As String
    EntCustSaveMandateDate = SaveAcMiscStr(Company$, CustCode$, "C", 58, NewMandateDate$)
End Function


'*******************************************************************************
' Name:        EntCustSaveDeliveryPostcode
' Description: Saves the Delivery Postcode to the specified customer code
'*******************************************************************************
Public Function EntCustSaveDeliveryPostcode(Company$, CustCode$, NewPostcode$) As String
    EntCustSaveDeliveryPostcode = SaveAcMiscStr(Company$, CustCode$, "C", 59, NewPostcode$)
End Function


'*******************************************************************************
' Name:        EntCustSaveOrderPaymentFlags
' Description: Save the Allow Order Payments flag and GL Code for the specified customer
'*******************************************************************************
Public Function EntCustSaveOrderPaymentFlags(Company$, CustCode$, AllowOrderPayments$, NewOrderPaymentsGL As Long) As Variant
    Dim Flag$
    
    If (Trim(AllowOrderPayments$) <> "") Then
        Flag$ = UCase(Left(Trim(AllowOrderPayments$), 1))
        If (Flag$ = "Y") Then
            EntCustSaveOrderPaymentFlags = SaveAcMiscInt(Company$, CustCode$, "C", 10, NewOrderPaymentsGL&)
        ElseIf (Flag$ = "N") Then
            EntCustSaveOrderPaymentFlags = SaveAcMiscInt(Company$, CustCode$, "C", 11, NewOrderPaymentsGL&)
        Else
            Error 525 ' Invalid Value
        End If
    Else
        Error 525 ' Invalid Value
    End If
End Function


'*******************************************************************************
' Name:        EntCustSaveCountry
' Description: Saves the Address Country to the specified customer code
'*******************************************************************************
Public Function EntCustSaveCountry(Company$, CustCode$, NewCountry$) As String
    EntCustSaveCountry = SaveAcMiscStr(Company$, CustCode$, "C", 61, NewCountry$)
End Function


'*******************************************************************************
' Name:        EntCustSaveDeliveryCountry
' Description: Saves the Delivery Address Country to the specified customer code
'*******************************************************************************
Public Function EntCustSaveDeliveryCountry(Company$, CustCode$, NewCountry$) As String
    EntCustSaveDeliveryCountry = SaveAcMiscStr(Company$, CustCode$, "C", 62, NewCountry$)
End Function


'*******************************************************************************
' Name:        EntCustSavePPDMode
' Description: Saves the PPD Mode for the specified Customer
'*******************************************************************************
Public Function EntCustSavePPDMode(Company$, CustCode$, NewPPDMode$) As String
    EntCustSavePPDMode = SaveAcMiscStr(Company$, CustCode$, "C", 60, NewPPDMode$)
End Function


'*******************************************************************************
' Name:        EntCustSavePPDDiscount
' Description: Saves the PPD Discount% for the specified Customer
'*******************************************************************************
Public Function EntCustSavePPDDiscount(Company$, CustCode$, NewPerc#) As Variant
    EntCustSavePPDDiscount = SaveAcMiscVal(Company$, CustCode$, "C", 2, NewPerc#)
End Function


'*******************************************************************************
' Name:        EntCustSavePPDDays
' Description: Saves the PPD Days for the specified Customer
'*******************************************************************************
Public Function EntCustSavePPDDays(Company$, CustCode$, NewDays&) As Variant
    EntCustSavePPDDays = SaveAcMiscInt(Company$, CustCode$, "C", 6, NewDays&)
End Function


'*******************************************************************************
' Name:        EntCustSaveDefaultToQR
' Description: Saves the Default to QR setting for the specified Customer
'*******************************************************************************
Public Function EntCustSaveDefaultToQR(Company$, CustCode$, NewDefaultToQR$) As String
    EntCustSaveDefaultToQR = SaveAcMiscStr(Company$, CustCode$, "C", 63, NewDefaultToQR$)
End Function


'*******************************************************************************
' Name:        EntCustSaveUser11
' Description: Saves the User Defined field 11 for the customer
'*******************************************************************************
Public Function EntCustSaveUser11(Company$, CustCode$, NewUser$) As String
    EntCustSaveUser11 = SaveAcMiscStr(Company$, CustCode$, "C", 64, NewUser$)
End Function
'*******************************************************************************
' Name:        EntCustSaveUser12
' Description: Saves the User Defined field 12 for the customer
'*******************************************************************************
Public Function EntCustSaveUser12(Company$, CustCode$, NewUser$) As String
    EntCustSaveUser12 = SaveAcMiscStr(Company$, CustCode$, "C", 65, NewUser$)
End Function
'*******************************************************************************
' Name:        EntCustSaveUser13
' Description: Saves the User Defined field 13 for the customer
'*******************************************************************************
Public Function EntCustSaveUser13(Company$, CustCode$, NewUser$) As String
    EntCustSaveUser13 = SaveAcMiscStr(Company$, CustCode$, "C", 66, NewUser$)
End Function
'*******************************************************************************
' Name:        EntCustSaveUser14
' Description: Saves the User Defined field 14 for the customer
'*******************************************************************************
Public Function EntCustSaveUser14(Company$, CustCode$, NewUser$) As String
    EntCustSaveUser14 = SaveAcMiscStr(Company$, CustCode$, "C", 67, NewUser$)
End Function
'*******************************************************************************
' Name:        EntCustSaveUser15
' Description: Saves the User Defined field 15 for the customer
'*******************************************************************************
Public Function EntCustSaveUser15(Company$, CustCode$, NewUser$) As String
    EntCustSaveUser15 = SaveAcMiscStr(Company$, CustCode$, "C", 68, NewUser$)
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SuppSave"
Option Explicit


'*******************************************************************************
' Name:        EntSuppSaveName
' Description: Saves the name to the specified supplier code
'*******************************************************************************
Public Function EntSuppSaveName(Company$, SuppCode$, NewName$) As String
Attribute EntSuppSaveName.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveName = SaveAcMiscStr(Company$, SuppCode$, "S", 1, NewName$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveAddress
' Description: Saves the address line for the supplier
'*******************************************************************************
Public Function EntSuppSaveAddress(Company$, SuppCode$, LineNo%, NewAddress$) As String
Attribute EntSuppSaveAddress.VB_ProcData.VB_Invoke_Func = " \n14"
    If (LineNo% >= 1) And (LineNo% <= 5) Then
        EntSuppSaveAddress = SaveAcMiscStr(Company$, SuppCode$, "S", 1 + LineNo%, NewAddress$)
    Else
        EntSuppSaveAddress = EntErrorStr$(543)
    End If
End Function


'*******************************************************************************
' Name:        EntSuppSaveContact
' Description: Saves the contact name for the supplier
'*******************************************************************************
Public Function EntSuppSaveContact(Company$, SuppCode$, NewContact$) As String
Attribute EntSuppSaveContact.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveContact = SaveAcMiscStr(Company$, SuppCode$, "S", 7, NewContact$)
End Function


'*******************************************************************************
' Name:        EntSuppSavePhone
' Description: Saves the Phone Number for the supplier
'*******************************************************************************
Public Function EntSuppSavePhone(Company$, SuppCode$, NewPhone$) As String
Attribute EntSuppSavePhone.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSavePhone = SaveAcMiscStr(Company$, SuppCode$, "S", 8, NewPhone$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveFax
' Description: Saves the Fax Number for the supplier
'*******************************************************************************
Public Function EntSuppSaveFax(Company$, SuppCode$, NewFax$) As String
Attribute EntSuppSaveFax.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveFax = SaveAcMiscStr(Company$, SuppCode$, "S", 9, NewFax$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveMobile
' Description: Saves the Mobile Number for the supplier
'*******************************************************************************
Public Function EntSuppSaveMobile(Company$, SuppCode$, NewPhone$) As String
Attribute EntSuppSaveMobile.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveMobile = SaveAcMiscStr(Company$, SuppCode$, "S", 10, NewPhone$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveUser1
' Description: Saves the User Defined field 1 for the supplier
'*******************************************************************************
Public Function EntSuppSaveUser1(Company$, SuppCode$, NewUser$) As String
Attribute EntSuppSaveUser1.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveUser1 = SaveAcMiscStr(Company$, SuppCode$, "S", 11, NewUser$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveUser2
' Description: Saves the User Defined field 2 for the supplier
'*******************************************************************************
Public Function EntSuppSaveUser2(Company$, SuppCode$, NewUser$) As String
Attribute EntSuppSaveUser2.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveUser2 = SaveAcMiscStr(Company$, SuppCode$, "S", 12, NewUser$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveCC
' Description: Saves the Cost Centre for the supplier
'*******************************************************************************
Public Function EntSuppSaveCC(Company$, SuppCode$, NewCC$) As String
Attribute EntSuppSaveCC.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveCC = SaveAcMiscStr(Company$, SuppCode$, "S", 13, NewCC$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveDept
' Description: Saves the Cost Centre for the supplier
'*******************************************************************************
Public Function EntSuppSaveDept(Company$, SuppCode$, NewDept$) As String
Attribute EntSuppSaveDept.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveDept = SaveAcMiscStr(Company$, SuppCode$, "S", 14, NewDept$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveArea
' Description: Saves the Area for the supplier
'*******************************************************************************
Public Function EntSuppSaveArea(Company$, SuppCode$, NewArea$) As String
Attribute EntSuppSaveArea.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveArea = SaveAcMiscStr(Company$, SuppCode$, "S", 15, NewArea$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveAccType
' Description: Saves the Area for the supplier
'*******************************************************************************
Public Function EntSuppSaveAccType(Company$, SuppCode$, NewAccType$) As String
Attribute EntSuppSaveAccType.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveAccType = SaveAcMiscStr(Company$, SuppCode$, "S", 16, NewAccType$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveCurrency
' Description: Save the Currency for the specified supplier
'*******************************************************************************
Public Function EntSuppSaveCurrency(Company$, SuppCode$, NewCcy&) As Variant
Attribute EntSuppSaveCurrency.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveCurrency = SaveAcMiscInt(Company$, SuppCode$, "S", 1, NewCcy&)
End Function


'*******************************************************************************
' Name:        EntSuppSaveSalesGL
' Description: Save the Sales GL Code for the specified supplier
'
' NOTE: This actually saves the Cost GL for Suppliers - too much Copy/Paste :-)
'
'*******************************************************************************
Public Function EntSuppSaveSalesGL(Company$, SuppCode$, NewGL&) As Variant
Attribute EntSuppSaveSalesGL.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveSalesGL = SaveAcMiscInt(Company$, SuppCode$, "S", 2, NewGL&)
End Function
 
 
'*******************************************************************************
' Name:        EntSuppSaveCostGL
' Description: Save the Cost Of Sales GL Code for the specified supplier
'*******************************************************************************
Public Function EntSuppSaveCostGL(Company$, SuppCode$, NewGL&) As Variant
Attribute EntSuppSaveCostGL.VB_ProcData.VB_Invoke_Func = " \n14"
' MH 19/04/06: Modified to point at the Sales GL Code where the Cost GL Code is
'              actually stored for Suppliers
'    EntSuppSaveCostGL = SaveAcMiscInt(Company$, SuppCode$, "S", 3, NewGL&)
    EntSuppSaveCostGL = SaveAcMiscInt(Company$, SuppCode$, "S", 2, NewGL&)
End Function
 

'*******************************************************************************
' Name:        EntSuppSaveControlGL
' Description: Save the Control GL Code for the specified supplier
'*******************************************************************************
Public Function EntSuppSaveControlGL(Company$, SuppCode$, NewGL&) As Variant
Attribute EntSuppSaveControlGL.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveControlGL = SaveAcMiscInt(Company$, SuppCode$, "S", 4, NewGL&)
End Function


'*******************************************************************************
' Name:        EntSuppSaveCreditLimit
' Description: Saves the suppliers Credit Limit
'*******************************************************************************
Public Function EntSuppSaveCreditLimit(Company$, SuppCode$, NewLimit#) As Variant
Attribute EntSuppSaveCreditLimit.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveCreditLimit = SaveAcMiscVal(Company$, SuppCode$, "S", 1, NewLimit#)
End Function


'*******************************************************************************
' Name:        EntSuppSaveDelAddress
' Description: Saves the delivery address line for the customer
'*******************************************************************************
Public Function EntSuppSaveDelAddress(Company$, SuppCode$, LineNo%, NewAddress$) As String
Attribute EntSuppSaveDelAddress.VB_ProcData.VB_Invoke_Func = " \n14"
    If (LineNo% >= 1) And (LineNo% <= 5) Then
        EntSuppSaveDelAddress = SaveAcMiscStr(Company$, SuppCode$, "S", 16 + LineNo%, NewAddress$)
    Else
        EntSuppSaveDelAddress = EntErrorStr$(543)
    End If
End Function


'*******************************************************************************
' Name:        EntSuppSaveStatementTo
' Description: Saves the Statement To Account Code for the Supplier
'*******************************************************************************
Public Function EntSuppSaveStatementTo(Company$, SuppCode$, NewCode$) As String
Attribute EntSuppSaveStatementTo.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveStatementTo = SaveAcMiscStr(Company$, SuppCode$, "S", 22, NewCode$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveVATCode
' Description: Saves the VAT Code for the Supplier
'*******************************************************************************
Public Function EntSuppSaveVATCode(Company$, SuppCode$, NewCode$) As String
Attribute EntSuppSaveVATCode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveVATCode = SaveAcMiscStr(Company$, SuppCode$, "S", 23, NewCode$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveECMember
' Description: Saves the EC Member flag for the Supplier
'*******************************************************************************
Public Function EntSuppSaveECMember(Company$, SuppCode$, NewECMember$) As String
Attribute EntSuppSaveECMember.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveECMember = SaveAcMiscStr(Company$, SuppCode$, "S", 24, NewECMember$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveInvoiceTo
' Description: Saves the Invoice To Account Code for the Supplier
'*******************************************************************************
Public Function EntSuppSaveInvoiceTo(Company$, SuppCode$, NewUser$) As String
Attribute EntSuppSaveInvoiceTo.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveInvoiceTo = SaveAcMiscStr(Company$, SuppCode$, "S", 25, NewUser$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveUser3
' Description: Saves the User Defined field 3 for the Supplier
'*******************************************************************************
Public Function EntSuppSaveUser3(Company$, SuppCode$, NewUser$) As String
Attribute EntSuppSaveUser3.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveUser3 = SaveAcMiscStr(Company$, SuppCode$, "S", 26, NewUser$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveUser4
' Description: Saves the User Defined field 4 for the Supplier
'*******************************************************************************
Public Function EntSuppSaveUser4(Company$, SuppCode$, NewUser$) As String
Attribute EntSuppSaveUser4.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveUser4 = SaveAcMiscStr(Company$, SuppCode$, "S", 27, NewUser$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveAltCode
' Description: Saves the Alternate Code for the Supplier
'*******************************************************************************
Public Function EntSuppSaveAltCode(Company$, SuppCode$, NewCode$) As String
Attribute EntSuppSaveAltCode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveAltCode = SaveAcMiscStr(Company$, SuppCode$, "S", 28, NewCode$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveLocation
' Description: Saves the Default Location for the Supplier
'*******************************************************************************
Public Function EntSuppSaveLocation(Company$, SuppCode$, NewLocation$) As String
Attribute EntSuppSaveLocation.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveLocation = SaveAcMiscStr(Company$, SuppCode$, "S", 29, NewLocation$)
End Function


'*******************************************************************************
' Name:        EntSuppSavePayTerms
' Description: Save the Sales GL Code for the specified Supplier
'*******************************************************************************
Public Function EntSuppSavePayTerms(Company$, SuppCode$, NewTerms&) As Variant
Attribute EntSuppSavePayTerms.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSavePayTerms = SaveAcMiscInt(Company$, SuppCode$, "S", 5, NewTerms&)
End Function


'*******************************************************************************
' Name:        EntSuppSaveSettleDays
' Description: Save the Sales GL Code for the specified Supplier
'*******************************************************************************
Public Function EntSuppSaveSettleDays(Company$, SuppCode$, NewDays&) As Variant
Attribute EntSuppSaveSettleDays.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveSettleDays = SaveAcMiscInt(Company$, SuppCode$, "S", 6, NewDays&)
End Function


'*******************************************************************************
' Name:        EntSuppSaveFormSet
' Description: Save the Sales GL Code for the specified Supplier
'*******************************************************************************
Public Function EntSuppSaveFormSet(Company$, SuppCode$, NewSet&) As Variant
Attribute EntSuppSaveFormSet.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveFormSet = SaveAcMiscInt(Company$, SuppCode$, "S", 7, NewSet&)
End Function


'*******************************************************************************
' Name:        EntSuppSaveDiscount
' Description: Saves the Suppliers Discount%
'*******************************************************************************
Public Function EntSuppSaveDiscount(Company$, SuppCode$, NewPerc#) As Variant
Attribute EntSuppSaveDiscount.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveDiscount = SaveAcMiscVal(Company$, SuppCode$, "S", 2, NewPerc#)
End Function


'*******************************************************************************
' Name:        EntSuppSavePostCode
' Description: Saves the PostCode for the Supplier
'*******************************************************************************
Public Function EntSuppSavePostCode(Company$, SuppCode$, NewCode$) As String
Attribute EntSuppSavePostCode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSavePostCode = SaveAcMiscStr(Company$, SuppCode$, "S", 30, NewCode$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveEmailAddr
' Description: Saves the Email Address to the specified Supplier code
'*******************************************************************************
Public Function EntSuppSaveEmailAddr(Company$, SuppCode$, NewEmail$) As String
Attribute EntSuppSaveEmailAddr.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveEmailAddr = SaveAcMiscStr(Company$, SuppCode$, "S", 31, NewEmail$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveSendReader
' Description: Saves the Send Reader flag to the specified Supplier code
'*******************************************************************************
Public Function EntSuppSaveSendReader(Company$, SuppCode$, NewYN$) As String
Attribute EntSuppSaveSendReader.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveSendReader = SaveAcMiscStr(Company$, SuppCode$, "S", 32, NewYN$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveZipAttachments
' Description: Saves the ZIP Attachments flag to the specified Supplier code
'*******************************************************************************
Public Function EntSuppSaveZipAttachments(Company$, SuppCode$, NewYN$) As String
Attribute EntSuppSaveZipAttachments.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveZipAttachments = SaveAcMiscStr(Company$, SuppCode$, "S", 33, NewYN$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveSendHTML
' Description: Saves the Send HTML flag to the specified Supplier code
'*******************************************************************************
Public Function EntSuppSaveSendHTML(Company$, SuppCode$, NewYN$) As String
Attribute EntSuppSaveSendHTML.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveSendHTML = SaveAcMiscStr(Company$, SuppCode$, "S", 34, NewYN$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveWebCatalogs
' Description: Saves the Send HTML flag to the specified Supplier code
'*******************************************************************************
Public Function EntSuppSaveWebCatalogs(Company$, SuppCode$, NewCatalogs$) As String
Attribute EntSuppSaveWebCatalogs.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveWebCatalogs = SaveAcMiscStr(Company$, SuppCode$, "S", 35, NewCatalogs$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveSSDDelTerms
' Description: Saves the Send HTML flag to the specified Supplier code
'*******************************************************************************
Public Function EntSuppSaveSSDDelTerms(Company$, SuppCode$, NewTerms$) As String
Attribute EntSuppSaveSSDDelTerms.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveSSDDelTerms = SaveAcMiscStr(Company$, SuppCode$, "S", 37, NewTerms$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveSSDTransMode
' Description: Save the Currency for the specified Supplier
'*******************************************************************************
Public Function EntSuppSaveSSDTransMode(Company$, SuppCode$, NewMode&) As Variant
Attribute EntSuppSaveSSDTransMode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveSSDTransMode = SaveAcMiscInt(Company$, SuppCode$, "S", 8, NewMode&)
End Function


'*******************************************************************************
' Name:        EntSuppSaveLineDiscount
' Description: Saves the default Line Discount for the Supplier
'*******************************************************************************
Public Function EntSuppSaveLineDiscount(Company$, SuppCode$, NewLineDisc$) As String
Attribute EntSuppSaveLineDiscount.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveLineDiscount = SaveAcMiscStr(Company$, SuppCode$, "S", 38, NewLineDisc$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveVATRegNo
' Description: Saves the default Line Discount for the Supplier
'*******************************************************************************
Public Function EntSuppSaveVATRegNo(Company$, SuppCode$, NewVATRegNo$) As String
Attribute EntSuppSaveVATRegNo.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveVATRegNo = SaveAcMiscStr(Company$, SuppCode$, "S", 39, NewVATRegNo$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveTradingTerms
' Description: Saves the Trading Terms messages for the specified Supplier
'*******************************************************************************
Public Function EntSuppSaveTradingTerms(Company$, SuppCode$, LineNo%, NewTradeTerm$) As String
Attribute EntSuppSaveTradingTerms.VB_ProcData.VB_Invoke_Func = " \n14"
    If (LineNo% = 1) Or (LineNo% = 2) Then
        EntSuppSaveTradingTerms = SaveAcMiscStr(Company$, SuppCode$, "S", 39 + LineNo%, NewTradeTerm$)
    Else
        ' Invalid Line Number
        EntSuppSaveTradingTerms = EntErrorStr$(543)
    End If
End Function


'*******************************************************************************
' Name:        EntSuppSavePayType
' Description: Saves the Payment Type (B=BACS/C=Cheque) for the Supplier
'*******************************************************************************
Public Function EntSuppSavePayType(Company$, SuppCode$, NewPayType$) As String
Attribute EntSuppSavePayType.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSavePayType = SaveAcMiscStr(Company$, SuppCode$, "S", 42, NewPayType$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveBankAccount
' Description: Saves the Bank Account Number for the Supplier
'*******************************************************************************
Public Function EntSuppSaveBankAccount(Company$, SuppCode$, NewBankAccount$) As String
Attribute EntSuppSaveBankAccount.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveBankAccount = SaveAcMiscStr(Company$, SuppCode$, "S", 43, NewBankAccount$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveBankSortCode
' Description: Saves the Bank Sort Code for the Supplier
'*******************************************************************************
Public Function EntSuppSaveBankSortCode(Company$, SuppCode$, NewBankSortCode$) As String
Attribute EntSuppSaveBankSortCode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveBankSortCode = SaveAcMiscStr(Company$, SuppCode$, "S", 44, NewBankSortCode$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveBankRef
' Description: Saves the Bank Reference for the Supplier
'*******************************************************************************
Public Function EntSuppSaveBankRef(Company$, SuppCode$, NewBankRef$) As String
Attribute EntSuppSaveBankRef.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveBankRef = SaveAcMiscStr(Company$, SuppCode$, "S", 45, NewBankRef$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveInvoiceDeliveryMode
' Description: Saves the Invoice Delivery Mode for the Supplier
'*******************************************************************************
Public Function EntSuppSaveInvoiceDeliveryMode(Company$, SuppCode$, NewMode$) As String
Attribute EntSuppSaveInvoiceDeliveryMode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveInvoiceDeliveryMode = SaveAcMiscStr(Company$, SuppCode$, "S", 48, NewMode$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveRemittanceDeliveryMode
' Description: Saves the Remittance Delivery Mode for the Supplier
'*******************************************************************************
Public Function EntSuppSaveRemittanceDeliveryMode(Company$, SuppCode$, NewMode$) As String
Attribute EntSuppSaveRemittanceDeliveryMode.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveRemittanceDeliveryMode = SaveAcMiscStr(Company$, SuppCode$, "S", 47, NewMode$)
End Function

'*******************************************************************************
' Name:        EntSuppSaveStatus
' Description: Saves the Status for the Supplier
'*******************************************************************************
Public Function EntSuppSaveStatus(Company$, SuppCode$, NewStatus$) As String
Attribute EntSuppSaveStatus.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveStatus = SaveAcMiscStr(Company$, SuppCode$, "S", 49, NewStatus$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveTagNo
' Description: Save the Tag Number for the specified Supplier
'*******************************************************************************
Public Function EntSuppSaveTagNo(Company$, SuppCode$, NewTag&) As Variant
Attribute EntSuppSaveTagNo.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveTagNo = SaveAcMiscInt(Company$, SuppCode$, "S", 9, NewTag&)
End Function


'*******************************************************************************
' Name:        EntSuppSaveTheirAccount
' Description: Saves the Their A/C for Us field for the specified Supplier Code
'*******************************************************************************
Public Function EntSuppSaveTheirAccount(Company$, SuppCode$, NewAccount$) As String
Attribute EntSuppSaveTheirAccount.VB_ProcData.VB_Invoke_Func = " \n14"
    EntSuppSaveTheirAccount = SaveAcMiscStr(Company$, SuppCode$, "S", 50, NewAccount$)
End Function

'*******************************************************************************
' Name:        EntSuppSaveUser5
' Description: Saves the User Defined field 5 for the supplier
'*******************************************************************************
Public Function EntSuppSaveUser5(Company$, SuppCode$, NewUser$) As String
    EntSuppSaveUser5 = SaveAcMiscStr(Company$, SuppCode$, "S", 51, NewUser$)
End Function
'*******************************************************************************
' Name:        EntSuppSaveUser6
' Description: Saves the User Defined field 6 for the supplier
'*******************************************************************************
Public Function EntSuppSaveUser6(Company$, SuppCode$, NewUser$) As String
    EntSuppSaveUser6 = SaveAcMiscStr(Company$, SuppCode$, "S", 52, NewUser$)
End Function
'*******************************************************************************
' Name:        EntSuppSaveUser7
' Description: Saves the User Defined field 7 for the supplier
'*******************************************************************************
Public Function EntSuppSaveUser7(Company$, SuppCode$, NewUser$) As String
    EntSuppSaveUser7 = SaveAcMiscStr(Company$, SuppCode$, "S", 53, NewUser$)
End Function
'*******************************************************************************
' Name:        EntSuppSaveUser8
' Description: Saves the User Defined field 8 for the supplier
'*******************************************************************************
Public Function EntSuppSaveUser8(Company$, SuppCode$, NewUser$) As String
    EntSuppSaveUser8 = SaveAcMiscStr(Company$, SuppCode$, "S", 54, NewUser$)
End Function
'*******************************************************************************
' Name:        EntSuppSaveUser9
' Description: Saves the User Defined field 9 for the supplier
'*******************************************************************************
Public Function EntSuppSaveUser9(Company$, SuppCode$, NewUser$) As String
    EntSuppSaveUser9 = SaveAcMiscStr(Company$, SuppCode$, "S", 55, NewUser$)
End Function
'*******************************************************************************
' Name:        EntSuppSaveUser10
' Description: Saves the User Defined field 10 for the supplier
'*******************************************************************************
Public Function EntSuppSaveUser10(Company$, SuppCode$, NewUser$) As String
    EntSuppSaveUser10 = SaveAcMiscStr(Company$, SuppCode$, "S", 56, NewUser$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveDeliveryPostcode
' Description: Saves the Delivery Postcode to the specified supplier code
'*******************************************************************************
Public Function EntSuppSaveDeliveryPostcode(Company$, SuppCode$, NewPostcode$) As String
    EntSuppSaveDeliveryPostcode = SaveAcMiscStr(Company$, SuppCode$, "S", 59, NewPostcode$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveCountry
' Description: Saves the Address Country to the specified Supplier code
'*******************************************************************************
Public Function EntSuppSaveCountry(Company$, SuppCode$, NewCountry$) As String
    EntSuppSaveCountry = SaveAcMiscStr(Company$, SuppCode$, "S", 61, NewCountry$)
End Function


'*******************************************************************************
' Name:        EntSuppSaveDeliveryCountry
' Description: Saves the Delivery Address Country to the specified Supplier code
'*******************************************************************************
Public Function EntSuppSaveDeliveryCountry(Company$, SuppCode$, NewCountry$) As String
    EntSuppSaveDeliveryCountry = SaveAcMiscStr(Company$, SuppCode$, "S", 62, NewCountry$)
End Function


'*******************************************************************************
' Name:        EntSuppSavePPDMode
' Description: Saves the PPD Mode for the specified Supplier
'*******************************************************************************
Public Function EntSuppSavePPDMode(Company$, SuppCode$, NewPPDMode$) As String
    EntSuppSavePPDMode = SaveAcMiscStr(Company$, SuppCode$, "S", 60, NewPPDMode$)
End Function


'*******************************************************************************
' Name:        EntSuppSavePPDDiscount
' Description: Saves the PPD Discount% for the specified Supplier
'*******************************************************************************
Public Function EntSuppSavePPDDiscount(Company$, SuppCode$, NewPerc#) As Variant
    EntSuppSavePPDDiscount = SaveAcMiscVal(Company$, SuppCode$, "S", 2, NewPerc#)
End Function


'*******************************************************************************
' Name:        EntSuppSavePPDDays
' Description: Saves the PPD Days for the specified Supplier
'*******************************************************************************
Public Function EntSuppSavePPDDays(Company$, SuppCode$, NewDays&) As Variant
    EntSuppSavePPDDays = SaveAcMiscInt(Company$, SuppCode$, "S", 6, NewDays&)
End Function

'*******************************************************************************
' Name:        EntSuppSaveUser11
' Description: Saves the User Defined field 11 for the supplier
'*******************************************************************************
Public Function EntSuppSaveUser11(Company$, SuppCode$, NewUser$) As String
    EntSuppSaveUser11 = SaveAcMiscStr(Company$, SuppCode$, "S", 64, NewUser$)
End Function
'*******************************************************************************
' Name:        EntSuppSaveUser12
' Description: Saves the User Defined field 12 for the supplier
'*******************************************************************************
Public Function EntSuppSaveUser12(Company$, SuppCode$, NewUser$) As String
    EntSuppSaveUser12 = SaveAcMiscStr(Company$, SuppCode$, "S", 65, NewUser$)
End Function
'*******************************************************************************
' Name:        EntSuppSaveUser13
' Description: Saves the User Defined field 13 for the supplier
'*******************************************************************************
Public Function EntSuppSaveUser13(Company$, SuppCode$, NewUser$) As String
    EntSuppSaveUser13 = SaveAcMiscStr(Company$, SuppCode$, "S", 66, NewUser$)
End Function
'*******************************************************************************
' Name:        EntSuppSaveUser14
' Description: Saves the User Defined field 14 for the supplier
'*******************************************************************************
Public Function EntSuppSaveUser14(Company$, SuppCode$, NewUser$) As String
    EntSuppSaveUser14 = SaveAcMiscStr(Company$, SuppCode$, "S", 67, NewUser$)
End Function
'*******************************************************************************
' Name:        EntSuppSaveUser15
' Description: Saves the User Defined field 15 for the supplier
'*******************************************************************************
Public Function EntSuppSaveUser15(Company$, SuppCode$, NewUser$) As String
    EntSuppSaveUser15 = SaveAcMiscStr(Company$, SuppCode$, "S", 68, NewUser$)
End Function

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_AddinInstall()
Dim EFMisc, EFCS, EFSS, EFGLS As String
Dim ECHM As String

ECHM = "enterole.chm"
EFMisc = "User Defined" '"Exchequer Miscellaneous Gets"
EFCS = EFMisc '"Exchequer Customer Saves"
EFSS = EFMisc '"Exchequer Supplier Saves"
EFGLS = EFMisc '"Exchequer General Ledger Saves"

If Application.Version >= 9 Then
    ' Add functions to Exchequer Customer Saves section of Insert Formula
    Application.MacroOptions macro:="EntCustSaveAccType", Description:="This updates a Customer's Account Type to NewAccType", Category:=EFCS, HelpContextID:=20740, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveAddress", Description:="This updates a Customer's Address for the line No specified with NewAddress", Category:=EFCS, HelpContextID:=20193, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveAltCode", Description:="This updates a Customer's Alternate Code to NewAlternateCode", Category:=EFCS, HelpContextID:=20286, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveArea", Description:="This updates a Customer's Area to NewArea", Category:=EFCS, HelpContextID:=20195, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveBankAccount", Description:="This updates a Customer's Bank Account to NewBankAccount", Category:=EFCS, HelpContextID:=20504, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveBankRef", Description:="This updates a Customer's Bank Ref to NewBankRef", Category:=EFCS, HelpContextID:=20505, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveBankSortCode", Description:="This updates a Customer's Bank Sort Code to NewBankSortCode", Category:=EFCS, HelpContextID:=20506, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveBudget", Description:="This updates a Customer's budget for the specified Year and Period to NewBudget", Category:=EFCS, HelpContextID:=20010, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveBudget2", Description:="This updates a Customer's revised budget for the specified Year and Period to NewBudget", Category:=EFCS, HelpContextID:=20692, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveCC", Description:="This updates a Customer's Cost Centre to NewCostCentre", Category:=EFCS, HelpContextID:=20196, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveContact", Description:="This updates a Customer's Contact to NewContact", Category:=EFCS, HelpContextID:=20197, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveControlGL", Description:="This updates a Customer's Control General Ledger Code to NewControlGL", Category:=EFCS, HelpContextID:=20198, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveCostGL", Description:="This updates a Customer's Cost General Ledger Code to NewCostGL", Category:=EFCS, HelpContextID:=20199, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveCreditLimit", Description:="This updates a Customer's Credit Limit to NewCreditLimit", Category:=EFCS, HelpContextID:=20200, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveCurrency", Description:="This updates a Customer's Currency to NewCurrency", Category:=EFCS, HelpContextID:=20201, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveDelAddress", Description:="This saves the specified Delivery Address line for the Customer", Category:=EFCS, HelpContextID:=20265, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveDept", Description:="This updates a Customer's Department to NewDept", Category:=EFCS, HelpContextID:=20202, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveDirectDebitMode", Description:="This updates the Customer's Direct Debit Mode to NewDirectDebitMode", Category:=EFCS, HelpContextID:=20507, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveDiscount", Description:="This updates a Customer's Settlement Discount % to NewDiscount", Category:=EFCS, HelpContextID:=20272, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveECMember", Description:="This updates a Customer's EC Member Flag to NewECMemberFlag (Y or N)", Category:=EFCS, HelpContextID:=20287, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveEmailAddr", Description:="This updates a Customer's Email Address to NewEmailAddress", Category:=EFCS, HelpContextID:=20288, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveFax", Description:="This updates a Customer's Fax Number to NewFax", Category:=EFCS, HelpContextID:=20203, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveFormSet", Description:="This updates a Customer's Form Set to NewFormSet", Category:=EFCS, HelpContextID:=20289, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveInvoiceDeliveryMode", Description:="This updates the method the Customer's Invoices are sent out by", Category:=EFCS, HelpContextID:=20532, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveInvoiceTo", Description:="This updates a Customer's Invoice To Account to NewInvoiceTo Account", Category:=EFCS, HelpContextID:=20290, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveLineDiscount", Description:="This updates a Customer's Discount Band / % from NewLineDiscount", Category:=EFCS, HelpContextID:=20465, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveLocation", Description:="This updates a Customer's Default Location to NewLocation", Category:=EFCS, HelpContextID:=20291, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveMobile", Description:="This updates a Customer's Mobile Number to NewMobile", Category:=EFCS, HelpContextID:=20204, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveName", Description:="This updates a Customer's Name to NewName", Category:=EFCS, HelpContextID:=20205, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSavePayTerms", Description:="This updates a Customer's Pay Terms to NewPayTerms", Category:=EFCS, HelpContextID:=20292, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSavePayType", Description:="This updates the Customer's Pay Type to NewPayType", Category:=EFCS, HelpContextID:=20508, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSavePhone", Description:="This updates a Customer's Phone Number to NewPhone", Category:=EFCS, HelpContextID:=20206, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSavePostCode", Description:="This updates a Customer's Post Code to NewPostCode", Category:=EFCS, HelpContextID:=20293, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveSalesGL", Description:="This updates a Customer's Sales General Ledger Code to NewSalesGL", Category:=EFCS, HelpContextID:=20207, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveSendHTML", Description:="This updates a Customer's Send HTML to NewSendHTML", Category:=EFCS, HelpContextID:=20294, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveSendReader", Description:="This updates a Customer's Send Reader to NewSendReader", Category:=EFCS, HelpContextID:=20295, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveSettleDays", Description:="This updates a Customer's Settle Days to NewSettleDays", Category:=EFCS, HelpContextID:=20296, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveSSDDelTerms", Description:="This updates a Customer's SSDDelTerms to NewSSDDelTerms", Category:=EFCS, HelpContextID:=20297, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveSSDTransMode", Description:="This updates a Customer's SSDTransMode to NewSSDTransMode", Category:=EFCS, HelpContextID:=20298, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveStatementDeliveryMode", Description:="This function updates the method of delivery of the Statement from the Customer Record", Category:=EFCS, HelpContextID:=20533, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveStatementTo", Description:="This updates a Customer's Statement To Account to NewStatementTo Account", Category:=EFCS, HelpContextID:=20299, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveStatus", Description:="This updates the Customer's Account status to NewStatus", Category:=EFCS, HelpContextID:=20548, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveTagNo", Description:="This function updates a Customer's Tag Number to NewTagNumber", Category:=EFCS, HelpContextID:=20684, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveTheirAccount", Description:="This function updates a Customer's Their A/C for us field to NewAccount", Category:=EFCS, HelpContextID:=20669, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveTradingTerms", Description:="This updates a Customer's Trading Terms for the line no specified to NewTradeTerm", Category:=EFCS, HelpContextID:=20468, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveUser1", Description:="This updates a Customer's User 1 field to NewUser1", Category:=EFCS, HelpContextID:=20743, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveUser2", Description:="This updates a Customer's User 2 field to NewUser2", Category:=EFCS, HelpContextID:=20745, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveUser3", Description:="This updates a Customer's User 3 field to NewUser3", Category:=EFCS, HelpContextID:=20300, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveUser4", Description:="This updates a Customer's User 4 field to NewUser4", Category:=EFCS, HelpContextID:=20301, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveUser5", Description:="This updates a Customer's User 5 field to NewUser5", Category:=EFCS, HelpContextID:=20746, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveUser6", Description:="This updates a Customer's User 6 field to NewUser6", Category:=EFCS, HelpContextID:=20747, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveUser7", Description:="This updates a Customer's User 7 field to NewUser7", Category:=EFCS, HelpContextID:=20748, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveUser8", Description:="This updates a Customer's User 8 field to NewUser8", Category:=EFCS, HelpContextID:=20749, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveUser9", Description:="This updates a Customer's User 9 field to NewUser9", Category:=EFCS, HelpContextID:=20750, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveUser10", Description:="This updates a Customer's User 10 field to NewUser10", Category:=EFCS, HelpContextID:=20744, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveVATCode", Description:="This updates a Customer's VAT Code field to VATCode", Category:=EFCS, HelpContextID:=20302, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveVATRegNo", Description:="This updates a Customer's VAT Registration Number field to NewVATRegNo", Category:=EFCS, HelpContextID:=20472, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveWebCatalogs", Description:="This updates a Customer's Web Catalogs field to NewWebCatalogs", Category:=EFCS, HelpContextID:=20303, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveZipAttachments", Description:="This updates a Customer's Zip Attachments field to NewZipAttachments", Category:=EFCS, HelpContextID:=20304, HelpFile:=ECHM
    
    'PL 31/08/2016 2016 R3 ABSEXCH-15847 : Added save functions for UDF 11 to 15 for Customer
    Application.MacroOptions macro:="EntCustSaveUser11", Description:="This updates a Customer's User 11 field to NewUser11", Category:=EFCS, HelpContextID:=20917, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveUser12", Description:="This updates a Customer's User 12 field to NewUser12", Category:=EFCS, HelpContextID:=20918, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveUser13", Description:="This updates a Customer's User 13 field to NewUser13", Category:=EFCS, HelpContextID:=20919, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveUser14", Description:="This updates a Customer's User 14 field to NewUser14", Category:=EFCS, HelpContextID:=20920, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveUser15", Description:="This updates a Customer's User 15 field to NewUser15", Category:=EFCS, HelpContextID:=20921, HelpFile:=ECHM
     
    
    
    ' Add functions to Exchequer Supplier Saves section of Insert Formula
    Application.MacroOptions macro:="EntSuppSaveAccType", Description:="This updates a Supplier's Account Type to NewAccType", Category:=EFSS, HelpContextID:=20226, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveAddress", Description:="This updates a Supplier's Address for the LineNo to NewAddress", Category:=EFSS, HelpContextID:=20227, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveAltCode", Description:="This updates a Supplier's Alternate Code to NewAltCode", Category:=EFSS, HelpContextID:=20403, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveArea", Description:="This updates a Supplier's Area to NewArea", Category:=EFSS, HelpContextID:=20228, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveBankAccount", Description:="This updates a Supplier's Bank Account to NewBankAccount", Category:=EFSS, HelpContextID:=20513, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveBankRef", Description:="This updates a Supplier's Bank Ref to NewBankRef", Category:=EFSS, HelpContextID:=20514, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveBankSortCode", Description:="This updates a Supplier's Bank SortCode to NewBankSortCode", Category:=EFSS, HelpContextID:=20515, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveBudget", Description:="This function sets the Supplier|fffd|s Budget for the specified Year and Period to NewBudget", Category:=EFSS, HelpContextID:=20074, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveBudget2", Description:="This function sets the Supplier|fffd|s revised Budget for the specified Year and Period to NewBudget", Category:=EFSS, HelpContextID:=20693, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveCC", Description:="This updates a Supplier's Cost Centre to NewCC", Category:=EFSS, HelpContextID:=20229, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveContact", Description:="This updates a Supplier's Contact to NewContact", Category:=EFSS, HelpContextID:=20230, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveControlGL", Description:="This updates a Supplier's Control General Ledger Code to NewControlGL", Category:=EFSS, HelpContextID:=20231, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveCostGL", Description:="This Function is no longer available.. Use EntSuppSaveSalesGL for this function", Category:=EFSS, HelpContextID:=20232, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveCreditLimit", Description:="This updates a Supplier's Credit Limit to NewCreditLimit", Category:=EFSS, HelpContextID:=20233, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveCurrency", Description:="This updates a Supplier's Currency to NewCurrency", Category:=EFSS, HelpContextID:=20234, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveDelAddress", Description:="This saves the Delivery Address line for the Supplier", Category:=EFSS, HelpContextID:=20268, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveDept", Description:="This updates a Supplier's Department to NewDept", Category:=EFSS, HelpContextID:=20235, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveDiscount", Description:="This updates a Supplier's Settlement Discount % to NewDiscount", Category:=EFSS, HelpContextID:=20404, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveECMember", Description:="This updates a Supplier's ECMember Flag to NewECMember", Category:=EFSS, HelpContextID:=20405, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveEmailAddr", Description:="This updates a Supplier's Email Address to NewEmailAddr", Category:=EFSS, HelpContextID:=20406, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveFax", Description:="This updates a Supplier's Fax Number to NewFax", Category:=EFSS, HelpContextID:=20236, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveFormSet", Description:="This updates a Supplier's Form Set to NewFormSet", Category:=EFSS, HelpContextID:=20407, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveInvoiceDeliveryMode", Description:="This updates the method the Supplier's Invoices are sent out by", Category:=EFSS, HelpContextID:=20534, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveInvoiceTo", Description:="This updates a Supplier's Invoice To Account to NewInvoiceTo", Category:=EFSS, HelpContextID:=20408, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveLineDiscount", Description:="This updates a Supplier's Discount Band / % from NewLineDiscount", Category:=EFSS, HelpContextID:=20463, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveLocation", Description:="This updates a Supplier's Location to NewLocation", Category:=EFSS, HelpContextID:=20409, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveMobile", Description:="This updates a Supplier's Mobile Number to NewMobile", Category:=EFSS, HelpContextID:=20237, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveName", Description:="This updates a Supplier's Name to NewName", Category:=EFSS, HelpContextID:=20238, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSavePayTerms", Description:="This updates a Supplier's Pay Terms to NewPayTerms", Category:=EFSS, HelpContextID:=20410, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSavePayType", Description:="This updates the Supplier's Pay Type to NewPayType", Category:=EFSS, HelpContextID:=20516, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSavePhone", Description:="This updates a Supplier's Phone Number to NewPhone", Category:=EFSS, HelpContextID:=20239, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSavePostCode", Description:="This updates a Supplier's Post Code to NewPostCode", Category:=EFSS, HelpContextID:=20411, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveRemittanceDeliveryMode", Description:="This updates the method the Supplier's Remittances are sent out by", Category:=EFSS, HelpContextID:=20535, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveSalesGL", Description:="This updates a Supplier's Cost of Sales General Ledger Code to NewSalesGL", Category:=EFSS, HelpContextID:=20240, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveSendHTML", Description:="This updates a Supplier's Send HTML flag to NewSendHTML", Category:=EFSS, HelpContextID:=20412, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveSendReader", Description:="This updates a Supplier's Send Reader flag to NewSendReader", Category:=EFSS, HelpContextID:=20413, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveSettleDays", Description:="This updates a Supplier's Settlement Days to NewSettleDays", Category:=EFSS, HelpContextID:=20414, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveSSDDelTerms", Description:="This updates a Supplier's SSD Delivery Terms to NewSSDDelTerms", Category:=EFSS, HelpContextID:=20415, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveSSDTransMode", Description:="This updates a Supplier's SSD Transport Mode to NewSSDTransMode", Category:=EFSS, HelpContextID:=20416, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveStatementTo", Description:="This updates a Supplier's StatementTo to NewStatementTo", Category:=EFSS, HelpContextID:=20417, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveStatus", Description:="This updates the Supplier's Account Status to NewStatus", Category:=EFSS, HelpContextID:=20550, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveTagNo", Description:="This function updates a Supplier's TagNumber to NewTagNumber", Category:=EFSS, HelpContextID:=20685, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveTheirAccount", Description:="This function updates a Supplier's Their A/C for us field to NewAccount", Category:=EFSS, HelpContextID:=20670, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveTradingTerms", Description:="This updates a Supplier's Trading Terms for the line no specified to NewTradeTerm", Category:=EFSS, HelpContextID:=20470, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveUser1", Description:="This updates a Supplier's User Field 1 to NewUser1", Category:=EFSS, HelpContextID:=20241, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveUser2", Description:="This updates a Supplier's User Field 2 to NewUser2", Category:=EFSS, HelpContextID:=20242, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveUser3", Description:="This updates a Supplier's User Field 3 to NewUser3", Category:=EFSS, HelpContextID:=20418, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveUser4", Description:="This updates a Supplier's User Field 4 to NewUser4", Category:=EFSS, HelpContextID:=20419, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveUser5", Description:="This updates a Supplier's User Field 5 to NewUser5", Category:=EFSS, HelpContextID:=20869, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveUser6", Description:="This updates a Supplier's User Field 6 to NewUser6", Category:=EFSS, HelpContextID:=20870, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveUser7", Description:="This updates a Supplier's User Field 7 to NewUser7", Category:=EFSS, HelpContextID:=20871, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveUser8", Description:="This updates a Supplier's User Field 8 to NewUser8", Category:=EFSS, HelpContextID:=20872, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveUser9", Description:="This updates a Supplier's User Field 9 to NewUser9", Category:=EFSS, HelpContextID:=20873, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveUser10", Description:="This updates a Supplier's User Field 10 to NewUser10", Category:=EFSS, HelpContextID:=20868, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveVATCode", Description:="This updates a Supplier's VAT Code to NewVATCode", Category:=EFSS, HelpContextID:=20420, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveVATRegNo", Description:="This updates a Supplier's VAT Registration Number field to VATRegNo", Category:=EFSS, HelpContextID:=20474, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveWebCatalogs", Description:="This updates a Supplier's User WebCatalogs to NewWebCatalogs", Category:=EFSS, HelpContextID:=20421, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveZipAttachments", Description:="This updates a Supplier's User Zip Attachments to NewZipAttachments", Category:=EFSS, HelpContextID:=20422, HelpFile:=ECHM
    
    'PL 31/08/2016 2016 R3 ABSEXCH-15847 : Added save functions for UDF 11 to 15 for Supplier
    Application.MacroOptions macro:="EntSuppSaveUser11", Description:="This updates a Supplier's User Field 11 to NewUser11", Category:=EFSS, HelpContextID:=20922, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveUser12", Description:="This updates a Supplier's User Field 12 to NewUser12", Category:=EFSS, HelpContextID:=20923, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveUser13", Description:="This updates a Supplier's User Field 13 to NewUser13", Category:=EFSS, HelpContextID:=20924, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveUser14", Description:="This updates a Supplier's User Field 14 to NewUser14", Category:=EFSS, HelpContextID:=20925, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveUser15", Description:="This updates a Supplier's User Field 15 to NewUser15", Category:=EFSS, HelpContextID:=20926, HelpFile:=ECHM

  
    ' Add functions to Exchequer GL Saves section of Insert Formula
    Application.MacroOptions macro:="EntAddNomTransfer", Description:="This function adds a Nominal Transfer between FromGLCode and ToGLCode for Amount with a description of Description", Category:=EFGLS, HelpContextID:=20001, HelpFile:=ECHM
    Application.MacroOptions macro:="EntAddNomTxfrLines", Description:="This function adds Nominal Transfer lines between Codes listed in your spreadsheet", Category:=EFGLS, HelpContextID:=20270, HelpFile:=ECHM
    Application.MacroOptions macro:="EntAddNomTxfrLines2", Description:="This function adds Nominal Transfer lines between Codes listed in your spreadsheet", Category:=EFGLS, HelpContextID:=20694, HelpFile:=ECHM
    Application.MacroOptions macro:="EntAddNomVATLines", Description:="This function adds Nominal Transfer lines with optional VAT between Codes listed in your spreadsheet", Category:=EFGLS, HelpContextID:=20546, HelpFile:=ECHM
    Application.MacroOptions macro:="EntAddNomVATLines2", Description:="This function adds Nominal Transfer lines with optional VAT between Codes listed in your spreadsheet", Category:=EFGLS, HelpContextID:=20695, HelpFile:=ECHM
    Application.MacroOptions macro:="EntAddNomVATLines3", Description:="This function adds Nominal Transfer lines with optional VAT and PayInRef between Codes listed in your spreadsheet", Category:=EFGLS, HelpContextID:=20720, HelpFile:=ECHM
    Application.MacroOptions macro:="EntAddNomVATLines4", Description:="This function adds Nominal Transfer lines with optional VAT and PayInRef between Codes listed in your spreadsheet", Category:=EFGLS, HelpContextID:=20721, HelpFile:=ECHM
    Application.MacroOptions macro:="EntAddNomVATLines5", Description:="This function adds Nominal Transfer lines with optional VAT, PayInRef and User Defined Fields between Codes listed in your spreadsheet", Category:=EFGLS, HelpContextID:=20732, HelpFile:=ECHM
    Application.MacroOptions macro:="EntAddNomVATLines6", Description:="This function adds Nominal Transfer lines with optional VAT, PayInRef and User Defined Fields between Codes listed in your spreadsheet", Category:=EFGLS, HelpContextID:=20733, HelpFile:=ECHM
    Application.MacroOptions macro:="EntAddNomTxfrLinesUDF", Description:="Adds a nominal transfer with multiple lines and line User Defined Fields", Category:=EFGLS, HelpContextID:=20730, HelpFile:=ECHM
    Application.MacroOptions macro:="EntAddNomTxfrLinesUDF10", Description:="Adds a nominal transfer with multiple lines and full User Defined Field support", Category:=EFGLS, HelpContextID:=20731, HelpFile:=ECHM
    
    ' Add functions to Exchequer Miscellaneous Gets section of Insert Formula
    Application.MacroOptions macro:="EntAddInVer2", Description:="Returns the version of the Excel Add-In for Save account functions that you are using", Category:=EFMisc, HelpContextID:=20020, HelpFile:=ECHM
    
    ' MH 10/09/2013 v7.0.6 ABSEXCH-14598: Added Mandate fields
    Application.MacroOptions macro:="EntCustSaveMandateId", Description:="Saves the Mandate ID to the specified customer code", Category:=EFSS, HelpContextID:=20725, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveMandateDate", Description:="Saves the Mandate Date to the specified customer code", Category:=EFSS, HelpContextID:=20724, HelpFile:=ECHM
    
    ' MH 18/10/2013 v7.0.7 ABSEXCH-14703: Added Delivery Postcode
    Application.MacroOptions macro:="EntCustSaveDeliveryPostcode", Description:="Saves the Delivery Postcode to the specified customer code", Category:=EFSS, HelpContextID:=20727, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveDeliveryPostcode", Description:="Saves the Delivery Postcode to the specified supplier code", Category:=EFSS, HelpContextID:=20729, HelpFile:=ECHM
    
    ' MH 09/10/2014 v7.0.12 ABSEXCH-15632: Added Auto-Reversing variants of existing AddNom functions
    Application.MacroOptions macro:="EntAddNomVATLines5AR", Description:="This function adds an Auto-Reversing Nominal Transfer lines with optional VAT, PayInRef and User Defined Fields between Codes listed in your spreadsheet", Category:=EFGLS, HelpContextID:=20722, HelpFile:=ECHM
    Application.MacroOptions macro:="EntAddNomVATLines6AR", Description:="This function adds Auto-Reversing Nominal Transfer lines with optional VAT, PayInRef and User Defined Fields between Codes listed in your spreadsheet", Category:=EFGLS, HelpContextID:=20723, HelpFile:=ECHM
    
    ' MH 22/10/2014: Added Order Payments support
    Application.MacroOptions macro:="EntCustSaveOrderPaymentFlags", Description:="Save the Allow Order Payments flag and GL Code for the specified customer", Category:=EFSS, HelpContextID:=20727, HelpFile:=ECHM
        
    ' MH 04/12/2014: Added Country Code support
    Application.MacroOptions macro:="EntCustSaveCountry", Description:="Saves the Address Country to the specified customer code", Category:=EFSS, HelpContextID:=20741, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSaveDeliveryCountry", Description:="Saves the Delivery Address Country to the specified customer code", Category:=EFSS, HelpContextID:=20742, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveCountry", Description:="Saves the Address Country to the specified Supplier code", Category:=EFSS, HelpContextID:=20866, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSaveDeliveryCountry", Description:="Saves the Delivery Address Country to the specified Supplier code", Category:=EFSS, HelpContextID:=20867, HelpFile:=ECHM
    
    ' MH 20/05/2015 v7.0.14 ABSEXCH-16284: Added PPD OLE Functions
    Application.MacroOptions macro:="EntCustSavePPDMode", Description:="This updates a Customer's PPD Mode to NewPPDMode", Category:=EFGLS, HelpContextID:=20886, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSavePPDDiscount", Description:="This updates a Customer's PPD Discount% to NewPerc", Category:=EFGLS, HelpContextID:=20887, HelpFile:=ECHM
    Application.MacroOptions macro:="EntCustSavePPDDays", Description:="This updates a Customer's PPD Days to NewDays", Category:=EFGLS, HelpContextID:=20888, HelpFile:=ECHM
    
    Application.MacroOptions macro:="EntSuppSavePPDMode", Description:="This updates a Supplier's PPD Mode to NewPPDMode", Category:=EFGLS, HelpContextID:=20889, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSavePPDDiscount", Description:="This updates a Supplier's PPD Discount% to NewPerc", Category:=EFGLS, HelpContextID:=20890, HelpFile:=ECHM
    Application.MacroOptions macro:="EntSuppSavePPDDays", Description:="This updates a Supplier's PPD Days to NewDays", Category:=EFGLS, HelpContextID:=20891, HelpFile:=ECHM
        
    ' PKR 25/01/2016. ABSEXCH-17111. Added Default to QR for Intrastat
    Application.MacroOptions macro:="EntCustSaveDefaultToQR", Description:="Saves the Default to QR setting for the specified customer code", Category:=EFSS, HelpContextID:=20881, HelpFile:=ECHM
End If
End Sub
Attribute VB_Name = "Version"

Option Explicit

' Release Version Number
Const AddInVer = "Exchequer v12.0.0 Build 218"           ' should be incremented for each build


'*******************************************************************************
' Add-In History
'
' Exchequer v12.0.0 Build 218  Updated for v12.0.0 release
'
' Exchequer 2018 R1 Build 217  Updated for 2018-R1 release
'
' v2016R3.216 PL   31/08/2016  Added functions for UDF 11 to 15 for customer and supplier
'
' Build 215   PKR  25/01/2016  Added Save Default to QR for Intrastat
'
' Build 214   MH   28/07/2015  Merged PPD Functions from v7.0.14
'
' v7.1.213    WJ   10/12/2014  Corrected duplicate Help Context Ids
'
' v7.1.212    MH   09/12/2014  Merged Order Payments changes into v7.1
'
' OrdPay.211  MH   22/10/2014  Added EntCustSaveOrderPaymentFlags
'
' v7.0.12.211 MH   09/10/2014  ABSEXCH-15632: Added EntAddNomVATLines5AR/EntAddNomVATLines6AR
'
' v7.0.7.210  MH   18/10/2013  ABSEXCH-14703: Added Delivery PostCode support to Cust/Supp
'
' v7.0.6.209  MH   10/09/2013  ABSEXCH-14598: Added Mandate fields
'
' v7.0.208    MH   10/09/12    Released for v7.0
'
' v6.9.207    MH   01/11/11    Added new NOM functions supporting 10 UDF Header and Line fields
'
'                                EntAddNomTxfrLinesUDF10
'                                EntAddNomVATLines5
'                                EntAddNomVATLines6
'
' v6.9.206    GS   27/10/11    Added read support for UDEFs 6-10
'
' v6.4.205    MH   18/03/11    MH - Added EntAddNomTxfrLinesUDF for Jelf - ABSEXCH-
'
' v6.01.204   PR   28/08/09    MH - Unknown Bug Fix - FR v6.01.258
'
' v6.01.203   PR   30/01/09    Added EntAddNomVatLine3 & EntAddNomVatLine4 -
'                              same as EntAddNomVatLine & EntAddNomVatLine3
'                              but with PayInRefs added
'
' v6.00.202   MH   31/10/07    Rebuilt as lost referencce to EntFuncs.Xla
'
' v6.00.201   MH   23/10/07    Modified use of MacroOptions to get everything working
'
' v6.00.200   MH   16/07/07    Recreated from scratch under XL95 to try and fix help problems in XL2003
'
' v6.00.146   MH   20/06/07    Rebuilt after help stopped working due to an MS Office Update
'
' v6.00.145   MH   14/06/07     Modified to use HTML Help
'
' v5.71.144   MH   06/11/06    Added EntCustSaveTheirAccount and EntSuppSaveTheirAccount for Volac
'
' v5.71.143   MH    19/04/06    Modified EntSuppSaveCostGL to write to the Sales GL Code which for
'                               Suppliers is actually the Cost GL Code - the normal Cost GL Code
'                               if set screws things up!
'
'                               Added EntCustSaveTagNo &
'
' v5.70.142   MH    28/07/05    Rebranded for IRIS Enterprise/Exchequer
'
' v5.61.141   MH    02/02/05    Released for v5.61
'
' b561.141    MH    29/11/04    Modified EntAddNomTxfrLines and EntAddNomVATLines as their period
'                               validation allowed 0 and 101-199 as valid
'
' v5.60.140   HM   14/10/04    Released for v5.60.001
'
' b560.140    Mh    17/06/04    Added EntAddNOMUDFLines
'
' b560.139    Mh    17/06/04    Corrected description for EntCustSaveVATCode
'
' v5.60.138   HM    14/05/04    Released for v5.60
'
' v5.52.138   HM    18/11/03    Released for v5.52
'
' b552.138    HM    18/08/03    Added EntCustSaveStatus and EntSuppSaveStatus
'
' v5.51.137   HM    27/06/03    Released for v5.51
'
' b551.136    HM    04/06/03    Corrected error codes in EntAddNomTxfrLines and EntAddNomVATLines
'
' b551.135    HM    02/06/03    Added EntAddNomVATLines for v5.51
'
' b551.134    HM    23/05/03    Added EntCustSaveInvoiceDeliveryMode, EntCustSaveStatementDeliveryMode,
'                               EntSuppSaveInvoiceDeliveryMode and EntSuppSaveRemittanceDeliveryMode
'
' v5.50.133   HM    24/03/03    Released for v5.50
'
' b550.133    HM    30/01/03    Updated for Enterprise v5.50 Beta CD
'
' v5.01.132   HM    23/10/02    Released for v5.01 - NOTE: Desc+Context Id not set
'                               as Add-In too big - crashes when trying to set them.
'
' b500.132    HM    15/10/02    Added Cust/Supp Bank Detail routines
'
' v5.00.131   HM    02/07/02    Released for v5.00.002 ???
'
' b500.131    HM    25/06.02    Added Cust/Supp Save routines for VAT Reg and TradTerms
'
' v5.00.130   HM    02/04/02    Released for Enterprise v5.00
'
' b500.130    HM    07/09/01    Ported to v5.00
'
' v4.32.115   HM    17/04/01    Updated Version for v4.32
'
' v4.31.114   HM    24/07/00    Changed entAddNomTxfrLines to allow zero value
'                               lines.
'
' v4.31.115   HM    07/11/00    Added EntCustSaveLineDiscount
'
' b000.100    HM    12/10/99    Created from v4.31 OLEWBook.Xls

'*******************************************************************************
' Name:        EntAddInVer2
' Description: Returns the EntFunc2.XLA Add-In Version Number
'*****************************************************************************************
Public Function EntAddInVer2() As String
Attribute EntAddInVer2.VB_Description = "Returns the version information for EntFunc2.Xla"
Attribute EntAddInVer2.VB_HelpID = 20020
Attribute EntAddInVer2.VB_ProcData.VB_Invoke_Func = " \n14"
    EntAddInVer2 = "Exchequer Save Functions - " + AddInVer$
End Function

' InQuest injected base64 decoded content
' bzWl

INQUEST-PP=macro
