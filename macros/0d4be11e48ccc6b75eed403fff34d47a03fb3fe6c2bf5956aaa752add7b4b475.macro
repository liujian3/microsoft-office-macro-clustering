Attribute VB_Name = "Adresser"
Option Explicit
Public Const AE_DEP = 0
Public Const AE_DISPNAME = 1
Public Const AE_ADDRESS = 2
Public Const AE_POSTADR = 3
Public Const AE_VISIT = 4
Public Const AE_VISIT2 = 5
Public Const AE_PHONE = 6
Public Const AE_PHONE2 = 7
Public Const AE_FAX = 8
Public Const AE_EMAIL = 9
Public Const AE_WEB = 10
Public Const AE_LOGO = 11
Public Const AE_MOBILE = 12
Public Const AE_MAX = 51 'NB! This variable is used in frmMain.FillDivisionCombo function as well!

Public Function GetAddressArray() As Variant
    Dim aRetVal(AE_MAX) As Variant
    'loneenheten.bmp
    aRetVal(0) = Array("Administrativt st|fffd|d", "Administrativt st|fffd|d", "", "601 81 Norrk|fffd|ping", "F|fffd|rvaltningshuset Rosen", "", "011-15 00 00", "", "011-15 29 07", "", "www.norrkoping.se", "N_administrativt_stod.jpg", "")
    aRetVal(1) = Array("Arbetsmarknadskontoret", "Arbetsmarknadskontoret", "", "601 81 Norrk|fffd|ping", "Tegel|fffd|ngsgatan 19 A", "", "011-15 00 00", "", "011-13 61 70", "arbetsmarknadskontoret@norrkoping.se", "www.norrkoping.se", "N_arbetsmarknadskontoret.jpg", "")
    aRetVal(2) = Array("Arbetsmarknads- och vuxenutbildningsn|fffd|mnden", "Arbetsmarknads- och vuxenutbildningsn|fffd|mnden", "", "601 81 Norrk|fffd|ping", "Hospitalsgatan 30", "", "011-15 00 00", "", "011-13 61 70", "", "www.norrkoping.se", "N_arbetsmarknads_vuxenutbnamnden.jpg", "")
    aRetVal(3) = Array("Barn- och ungdomsn|fffd|mnden", "Barn- och ungdomsn|fffd|mnden", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-13 77 56", "utbildningskontoret@norrkoping.se", "www.norrkoping.se", "N_barn_ungdomsnamnden.jpg", "")
    aRetVal(4) = Array("Brandf|fffd|rsvaret", "Brandf|fffd|rsvaret", "Albrektsv|fffd|gen 150", "602 39 Norrk|fffd|ping", "Albrektsv|fffd|gen 150", "", "011-15 00 00", "", "011-15 17 79", "brandforsvaret@norrkoping.se", "www.norrkoping.se", "N_brandforsvaret.jpg", "")
    aRetVal(5) = Array("Bygg och milj|fffd|kontoret", "Bygg och milj|fffd|kontoret", "", "601 81 Norrk|fffd|ping", "F|fffd|rvaltningshuset Rosen", "Tr|fffd|dg|fffd|rdsgatan 21", "011-15 13 20 (reception)", "011-15 00 00 (vxl)", "011-15 16 66", "byggomiljokontoret@norrkoping.se", "www.norrkoping.se", "N_byggomiljokontoret.jpg", "")
    aRetVal(6) = Array("Byggnads- och milj|fffd|skyddsn|fffd|mnden", "Byggnads- och milj|fffd|skyddsn|fffd|mnden", "", "601 81 Norrk|fffd|ping", "F|fffd|rvaltningshuset Rosen", "", "011-15 00 00", "", "011-15 16 66", "byggomiljokontoret@norrkoping.se", "www.norrkoping.se", "N_byggnads_miljoskyddsnamnden.jpg", "")
    aRetVal(7) = Array("Ekonomi- och styrningskontoret", "Ekonomi- och styrningskontoret", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-12 51 78", "ekonomistyrning@norrkoping.se", "www.norrkoping.se", "N_ekonomistyrning.jpg", "")
    aRetVal(8) = Array("Familjer|fffd|dgivningen", "Familjer|fffd|dgivningen", "", "602 24 Norrk|fffd|ping", "Nya R|fffd|dstugugatan 3, 3 tr", "", "011-15 00 00", "", "011- 13 01 90", "", "www.norrkoping.se", "N_familjeradgivningen.jpg", "")
    aRetVal(9) = Array("Gymnasieantagningen", "Gymnasieantagningen", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-13 10 50", "", "www.norrkoping.se", "N_gymnasieintagningen.jpg", "")
    aRetVal(10) = Array("Gymnasien|fffd|mnden", "Gymnasien|fffd|mnden", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-13 77 56", "gymnasium.namnd@norrkoping.se", "www.norrkoping.se", "N_gymnasienamnden.jpg", "")
    aRetVal(11) = Array("Informationskontoret", "Informationskontoret", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-18 80 39", "information@norrkoping.se", "www.norrkoping.se", "N_informationskontoret.jpg", "")
    aRetVal(12) = Array("Inkassoenheten", "Inkassoenheten", "", "601 81 Norrk|fffd|ping", "F|fffd|rvaltningshuset Rosen", "Tr|fffd|dg|fffd|rdsgatan 21", "011-15 00 00", "", "011-15 11 06", "inkasso@norrkoping.se", "www.norrkoping.se", "N_inkassoenheten.jpg", "")
    aRetVal(13) = Array("Intagningsn|fffd|mnden", "Intagningsn|fffd|mnden", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-13 10 50", "", "www.norrkoping.se", "N_intagningsnamnden.jpg", "")
    aRetVal(14) = Array("Internbanken", "Internbanken", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-12 51 78", "", "www.norrkoping.se", "N_internbanken.jpg", "")
    aRetVal(15) = Array("IT-enheten", "IT-enheten", "", "601 81 Norrk|fffd|ping", "S:t Persgatan 19", "", "011-15 00 00", "", "011-15 10 90", "it-enheten@norrkoping.se", "www.norrkoping.se", "N_itenheten.jpg", "")
    aRetVal(16) = Array("Kollektivtrafikn|fffd|mnden", "Kollektivtrafikn|fffd|mnden", "", "601 81 Norrk|fffd|ping", "F|fffd|rvaltningshuset Rosen", "Tr|fffd|dg|fffd|rdsgatan 21", "011-15 00 00", "", "011-12 47 90", "kollektivtrafik@norrkoping.se", "www.norrkoping.se", "N_kollektivtrafiknamnden.jpg", "")
    aRetVal(17) = Array("Kommunalr|fffd|dsenheten", "Kommunalr|fffd|dsenheten", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-18 99 07", "kommunalraden@norrkoping.se", "www.norrkoping.se", "N_kommunalradsenheten.jpg", "")
    aRetVal(18) = Array("Kommundirekt|fffd|ren", "Kommundirekt|fffd|ren", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-13 52 10", "kommundirektoren@norrkoping.se", "www.norrkoping.se", "N_kommundirektoren.jpg", "")
    aRetVal(19) = Array("Kommunfullm|fffd|ktige", "Kommunfullm|fffd|ktige", "", "601 81 Norrkoping", "R|fffd|dhuset", "", "011-15 00 00", "", "", "kommunfullmaktige@norrk|fffd|ping.se", "www.norrkoping.se", "N_kommunfullmaktige.jpg", "")
    aRetVal(20) = Array("Kommunrevisionen", "Kommunrevisionen", "Dalsgatan 14", "602 32 Norrk|fffd|ping", "Dalsgatan 14", "", "011-15 00 00", "", "011-15 17 90", "revisionskontoret@norrkoping.se", "www.norrkoping.se/organisation/revision.xml", "N_kommunrevisionen.jpg", "")
    aRetVal(21) = Array("Kommunservice", "Kommunservice", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-13 76 80", "kommunservice@norrkoping.se", "www.norrkoping.se", "N_kommunservice.jpg", "")
    aRetVal(22) = Array("Kommunstyrelsen", "Kommunstyrelsen", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "", "kommunstyrelsen@norrkoping.se", "www.norrkoping.se", "N_kommunstyrelsen.jpg", "")
    aRetVal(23) = Array("Kommunstyrelsens kansli", "Kommunstyrelsens kansli", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-13 52 10", "kommunstyrelsens.kansli@norrkoping.se", "www.norrkoping.se", "N_kommunstyrelsens_kansli.jpg", "")
    aRetVal(24) = Array("Konsument Norrk|fffd|ping", "Konsument Norrk|fffd|ping", "", "601 81 Norrk|fffd|ping", "Nya R|fffd|dstugugatan 14", "", "011-15 00 00", "", "011-15 19 37", "konsument@norrkoping.se", "www.norrkoping.se", "N_konsument_norrkoping.jpg", "")
    aRetVal(25) = Array("Kostenheten", "Kostenheten", "", "601 81 Norrk|fffd|ping", "Hospitalsgatan 11", "", "011-15 00 00", "", "011-15 34 50", "", "www.norrkoping.se", "N_kostenheten.jpg", "")
    aRetVal(26) = Array("Kultur- och fritidskontoret", "Kultur- och fritidskontoret", "", "601 81 Norrk|fffd|ping", "Tr|fffd|dg|fffd|rdsgatan 8", "", "011-15 00 00", "", "011-16 01 71", "kultur.fritid@norrkoping.se", "www.norrkoping.se", "N_kultur_fritidskontoret.jpg", "")
    aRetVal(27) = Array("Kultur- och fritidsn|fffd|mnden", "Kultur- och fritidsn|fffd|mnden", "", "601 81 Norrk|fffd|ping", "Tr|fffd|dg|fffd|rdsgatan 8", "", "011-15 00 00", "", "011-16 01 71", "kultur.fritid@norrkoping.se", "www.norrkoping.se", "N_kultur_fritidsnamnden.jpg", "")
    aRetVal(28) = Array("L|fffd|neenheten", "L|fffd|neenheten", "", "601 81 Norrk|fffd|ping", "Tr|fffd|dg|fffd|rdsgatan 21", "", "011-15 00 00", "", "011-15 29 07", "", "www.norrkoping.se", "N_loneenheten.jpg", "")
    aRetVal(29) = Array("Medborgarservice", "Medborgarservice", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "", "", "www.norrkoping.se", "N_medborgarservice.jpg", "")
    aRetVal(30) = Array("Norrk|fffd|pings kommun", " ", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "", "norrkoping.kommun@norrkoping.se", "www.norrkoping.se", "N_standard.jpg", "")
    aRetVal(31) = Array("N|fffd|ringslivskontoret", "N|fffd|ringslivskontoret", "", "601 81 Norrk|fffd|ping", "N|fffd|ringslivets Hus", "Drottninggatan 24", "011-15 00 00", "", "011-19 44 61", "naringsliv@norrkoping.se", "www.norrkoping.se", "N_naringslivskontoret.jpg", "")
    aRetVal(32) = Array("Oppositionsr|fffd|dsenheten", "Oppositionsr|fffd|dsenheten", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-10 27 92", "", "www.norrkoping.se", "N_oppositionsradsenheten.jpg", "")
    aRetVal(33) = Array("Patientn|fffd|mnden", "Patientn|fffd|mnden", "", "601 81 Norrk|fffd|ping", "Generalsgatan 12", "", "011-15 00 00", "", "", "", "www.norrkoping.se", "N_patientnamnden.jpg", "")
    aRetVal(34) = Array("Personalkontoret", "Personalkontoret", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-15 18 04", "personalkontoret@norrkoping.se", "www.norrkoping.se", "N_personalkontoret.jpg", "")
    aRetVal(35) = Array("Revisionskontoret", "Revisionskontoret", "Dalsgatan 14", "602 32 Norrk|fffd|ping", "Dalsgatan 14", "", "011-15 00 00", "", "011-15 17 90", "revisionskontoret@norrkoping.se", "www.norrkoping.se/organisation/revision.xml", "N_revisonskontoret.jpg", "")
    aRetVal(36) = Array("Socialkontoret", "Socialkontoret", "", "601 81 Norrk|fffd|ping", "Generalsgatan 12", "", "011-15 00 00", "", "011-15 53 00", "socialkontoret@norrkoping.se", "www.norrkoping.se", "N_socialkontoret.jpg", "")
    aRetVal(37) = Array("Socialn|fffd|mnden", "Socialn|fffd|mnden", "", "601 81 Norrk|fffd|ping", "Generalsgatan 12", "", "011-15 00 00", "", "011-15 53 00", "socialnamnden@norrkoping.se", "www.norrkoping.se", "N_socialnamnden.jpg", "")
    aRetVal(38) = Array("Stadsarkivet", "Stadsarkivet", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-15 11 62", "stadsarkivet@norrkoping.se", "www.norrkoping.se", "N_stadsarkivet.jpg", "")
    aRetVal(39) = Array("Stadsbiblioteket", "Stadsbiblioteket", "", "601 81 Norrk|fffd|ping", "S|fffd|dra Promenaden 105", "", "011-15 00 00", "", "011-10 38 45", "stadsbiblioteket@norrkoping.se", "www.norrkoping.se", "N_stadsbiblioteket.jpg", "")
    aRetVal(40) = Array("Stadsbyggnadskontoret", "Stadsbyggnadskontoret", "Tr|fffd|dg|fffd|rdsgatan 21", "601 81 Norrk|fffd|ping", "F|fffd|rvaltningshuset Rosen", "Tr|fffd|dg|fffd|rdsgatan 21", "011-15 00 00", "011-15 00 00 (vxl)", "011-15 16 25", "stadsbyggnadskontoret@norrkoping.se", "www.norrkoping.se", "N_stadsbyggnadskontoret.jpg", "")
    aRetVal(41) = Array("Stadsplaneringsn|fffd|mnden", "Stadsplaneringsn|fffd|mnden", "", "601 81 Norrk|fffd|ping", "F|fffd|rvaltningshuset Rosen", "Tr|fffd|dg|fffd|rdsgatan 21", "011-15 00 00", "", "011-16 89 00", "stadsplaneringsnamnden@norrkoping.se", "www.norrkoping.se", "N_stadsplaneringsnamnden.jpg", "")
    aRetVal(42) = Array("Tekniska kontoret", "Tekniska kontoret", "", "601 81 Norrk|fffd|ping", "F|fffd|rvaltningshuset Rosen", "Tr|fffd|dg|fffd|rdsgatan 21", "011-15 00 00", "", "011-16 21 19", "tekniska.kontoret@norrkoping.se", "www.norrkoping.se", "N_tekniska_kontoret.jpg", "")
    aRetVal(43) = Array("Tekniska n|fffd|mnden", "Tekniska n|fffd|mnden", "", "601 81 Norrk|fffd|ping", "F|fffd|rvaltningshuset Rosen", "Tr|fffd|dg|fffd|rdsgatan 21", "011-15 00 00", "", "011-16 21 19", "tekniska.namnden@norrkoping.se", "www.norrkoping.se", "N_tekniska_namnden.jpg", "")
    aRetVal(44) = Array("Upphandlingsenheten", "Upphandlingsenheten", "", "601 81 Norrk|fffd|ping", "Br|fffd|ddgatan 11", "", "011-15 00 00", "", "011-15 14 10", "upphandlingsenheten@norrkoping.se", "www.norrkoping.se", "N_upphandlingsenheten.jpg", "")
    aRetVal(45) = Array("Utbildningskontoret", "Utbildningskontoret", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-13 77 56", "utbildningskontoret@norrkoping.se", "www.norrkoping.se", "N_utbildningskontoret.jpg", "")
    aRetVal(46) = Array("Valn|fffd|mnden", "Valn|fffd|mnden", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-15 34 80", "", "www.norrkoping.se", "N_valnamnden.jpg", "")
    aRetVal(47) = Array("Valn|fffd|mndens kansli", "Valn|fffd|mndens kansli", "", "601 81 Norrk|fffd|ping", "R|fffd|dhuset", "", "011-15 00 00", "", "011-15 34 80", "", "www.norrkoping.se", "N_valnamndens_kansli.jpg", "")
    aRetVal(48) = Array("V|fffd|rd- och omsorgskontoret", "V|fffd|rd- och omsorgskontoret", "", "601 81 Norrk|fffd|ping", "Lind|fffd|v|fffd|gen 5 A", "", "011-15 00 00", "", "011- 12 38 33", "vardochomsorgskontoret@norrkoping.se", "www.norrkoping.se", "N_vard_omsorgskontoret.jpg", "")
    aRetVal(49) = Array("V|fffd|rd- och omsorgsn|fffd|mnden", "V|fffd|rd- och omsorgsn|fffd|mnden", "", "601 81 Norrk|fffd|ping", "Lind|fffd|v|fffd|gen 5 A", "", "011-15 00 00", "", "011-12 38 33", "vardochomsorgskontoret@norrkoping.se", "www.norrkoping.se", "N_vard_omsorgsnamnden.jpg", "")
    aRetVal(50) = Array("|fffd|verf|fffd|rmyndaren", "|fffd|verf|fffd|rmyndaren", "", "601 81 Norrk|fffd|ping", "Tr|fffd|dg|fffd|rdsgatan 8 A", "", "011-15 00 00", "", "011-10 37 22", "", "www.norrkoping.se", "N_overformyndaren.jpg", "")
    aRetVal(51) = Array("|fffd|verf|fffd|rmyndarens expedition", "|fffd|verf|fffd|rmyndarens expedition", "", "601 81 Norrk|fffd|ping", "Tr|fffd|dg|fffd|rdsgatan 8 A", "", "011-15 00 00", "", "011-10 37 22", "", "www.norrkoping.se", "N_overformyndarens_expediti.jpg", "")

    GetAddressArray = aRetVal
    
End Function


Attribute VB_Name = "CustDocProp"
'
'
'
'   Project:        Macro Lib
'   Customer:
'   ModuleName:     CustDocProp
'
'   Created:        2002-09-23    Lars-Eric Gissl|fffd|n
'   Last Modified:
'
'   Description:    CustomDocumentProperties functions
'
'   Callable functions:
'                   SetCustDocProperty Name, Value
'                   GetCustDocProperty(Name)
'
Option Explicit

Public Sub SetCustDocProperty(ByVal sName As String, ByVal vValue As Variant)
'*************************************************************
'* Sub CustDocProp.SetCustDocProperty
'* Author : Lars-Eric Gissl|fffd|n
'*
'* Purpose: Set a CustomDocumentProperty for the active document.
'*          If the Property doesn't exist it will be created and will be
'*          of the same type as the vValue parameter
'*
'* Parameters:
'*   sName (String)     The name of the CustomDocumentProperty
'*   vValue (Variant)   Value to write to the CustomDocumentProperty
'*
'*------------------------------------------------------------
'* Revision History
'*  2002-09-23 LG: Creatation of Sub
'*************************************************************
    'MsgBox sName
    
    Dim msoType As Long
    
    If Not FindCustDocProperty(sName) Then
        If VarType(vValue) = vbString Then
            msoType = msoPropertyTypeString
        ElseIf VarType(vValue) = vbBoolean Then
            msoType = msoPropertyTypeBoolean
        ElseIf VarType(vValue) = vbDate Then
            msoType = msoPropertyTypeDate
        ElseIf VarType(vValue) = vbInteger Then
            msoType = msoPropertyTypeNumber
        ElseIf VarType(vValue) = vbDecimal Or VarType(vValue) = vbCurrency Or _
                VarType(vValue) = vbDouble Or VarType(vValue) = vbSingle Then
            msoType = msoPropertyTypeFloat
        Else
            msoType = msoPropertyTypeString
            vValue = CStr(vValue)
        End If
        
        ActiveDocument.CustomDocumentProperties.Add _
            Name:=sName, LinkToContent:=False, Value:=vValue, _
            Type:=msoType
    Else
        ActiveDocument.CustomDocumentProperties(sName).Value = vValue
    End If
            
End Sub

Public Function GetCustDocProperty(ByVal sName As String) As Variant
'*************************************************************
'* Function CustDocProp.GetCustDocProperty
'* Author : Lars-Eric Gissl|fffd|n
'*
'* Purpose: Retrieve the value from a CustomDocumentProperty
'*
'* Parameters:
'*   sName (String) Name of the CustomDocumentProperty
'*
'* Returns (Variant): The value of the CustomDocumentProperty
'*          If the DocumentProperty doesn't exist an empty string will be returned
'*
'*------------------------------------------------------------
'* Revision History
'*  2002-09-23 LG: Creatation of Function
'*************************************************************
    
    If Not FindCustDocProperty(sName) Then
        GetCustDocProperty = ""
    Else
        GetCustDocProperty = ActiveDocument.CustomDocumentProperties(sName).Value
    End If
    
End Function
Private Function FindCustDocProperty(sKey As String) As Boolean
'*************************************************************
'* Function CustDocProp.FindCustDocProperty
'* Author : Lars-Eric Gissl|fffd|n
'*
'* Purpose: Tries to find a CustomDocumentProperty in the active document
'*
'* Parameters:
'*   sKey (String)  The name of the CustomDocumentProperty
'*
'* Returns (Boolean): True if the Property was found, otherwise False
'*
'*------------------------------------------------------------
'* Revision History
'*  2002-09-23 LG: Creatation of Function
'*************************************************************
    Dim oCustProp As DocumentProperty
    
    FindCustDocProperty = False
    
    For Each oCustProp In ActiveDocument.CustomDocumentProperties
        If oCustProp.Name = sKey Then
            FindCustDocProperty = True
            Exit For
        End If
    Next
    
End Function

Attribute VB_Name = "ErrorObject"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'**************************************************
'
'
'   Project:        Form Construction
'   Customer:
'   ClassModule:    ErrorObject
'
'   Created:        01-06-18    Lars-Eric Gissl|fffd|n
'
'
'   Description:    Error class holding error information
'

'**************************************
'* Win API Declaration
'**************************************

Private Declare Function ShellExec Lib "shell32.dll" Alias "ShellExecuteA" _
    (ByVal hWnd As Long, ByVal Operation As String, ByVal File As String, _
    ByVal Parameters As String, ByVal Directory As String, ByVal ShowCmd As Long) As Long
    
'**************************************
'* Constants for referensing array
'* elements with error strings
'**************************************
Private Const VBE_CAPTION = 0
Private Const VBE_ERRNUM = 1
Private Const VBE_REASON = 2
Private Const VBE_SOURCE = 3
Private Const VBE_SENDMAIL = 4
Private Const VBE_SITUATION = 5
Private Const VBE_ELEMENTS = 5

Option Explicit

'**************************************
'* Class variables
'**************************************
Private sDescription As String  ' String describing the ErrorNumber
Private nErrorNumber As Long    ' Error number
Private sSituation As String    ' Situation under which the error occured
Private sMacroName  As String   ' Name of the Macro in which the error occured
Private sCaption   As String    ' Caption of the MsgBox
Private sExtra As String        ' Extra info.
Private bSendMail As Boolean    ' Enable sending support mail with error info
Private sCaptions() As String   ' Language specific strings
Private nLangID As Long         ' Numeric language setting in Windows

Public Property Get ErrorNumber() As Long
        ' Retrieve the error number of the Error
    ErrorNumber = nErrorNumber
End Property

Public Property Get Description() As String
        ' Retrieving description corresponding to the ErrorNumber
    Description = sDescription
End Property

Public Sub SetError(ByVal ErrNum As Long)
        ' Assign the Error Number and find the corresponding description
        ' This is for user defined errors like unable to instanciate an ActiveX Server
        ' Using this Sub requires that errors are defined and corresponding error strings
        ' are defined
    nErrorNumber = ErrNum
    SetErrorDescription
    
End Sub

Public Property Let SendMail(bSend As Boolean)
        'Enable/Disable sending error reports via support mail
    bSendMail = bSend
End Property

Public Property Let Situation(ByVal Text As String)
        ' The situation under which the error occured
    sSituation = Text
    
End Property

Property Let MacroName(sName As String)
        ' Set the name of the macro in which the error occured
    sMacroName = sName
    
End Property

Public Property Get Situation() As String
        ' The situation under which the error occured
    Situation = sSituation
    
End Property

Public Property Let Extra(ByVal Text As String)
        ' Extra info, like makro name or other useful info
    sExtra = Text
    
End Property

Public Property Get Extra() As String
        ' Extra info, like makro name or other useful info
    Extra = sExtra
    
End Property

Property Let Caption(DialogCaption As String)
        ' Sets a caption for the MessageBox
        
    sCaption = DialogCaption
    
End Property

Public Sub UseVBErrObject()
        ' Get the error information from the VBA Err Object
        
    nErrorNumber = Err.Number
    sDescription = Err.Description

    
End Sub

Sub Show()
    Dim sMsg As String      ' String to display in the error dialog
    Dim sEmailMsg As String ' Error text to send in email
    Dim sError As String    ' Error number including caption
    Dim sDesc As String     ' Error description including caption
    Dim sMacro As String    ' Macro name including caption
    Dim nReply As Long      ' Response from dialog if email is enabled
    
        ' Set a default dialog caption if missing
    If sCaption = "" Then sCaption = sCaptions(VBE_CAPTION)
    
        ' Build the error strings
    sError = sCaptions(VBE_ERRNUM) + Str(nErrorNumber)
    sMsg = sError + vbCrLf
    sDesc = sCaptions(VBE_REASON) + sDescription
    sMsg = sMsg + sDesc + vbCrLf
    If sMacroName <> "" Then
        sMacro = sCaptions(VBE_SOURCE) + sMacroName
        sMsg = sMsg + sMacro + vbCrLf
    End If
    If sSituation <> "" Then
        sMsg = sMsg + sCaptions(VBE_SITUATION) + sSituation + vbCrLf
    End If
    If sExtra <> "" Then
        sMsg = sMsg + vbCrLf + sExtra + vbCrLf
    End If
        
            ' Check if email is enabled and that the OS is Windows
            ' Sending email will not work on Mac as a WinAPI call is involved
    If (bSendMail = True) And (InStr(LCase(System.OperatingSystem), "win")) Then
        sMsg = sMsg + vbCrLf + sCaptions(VBE_SENDMAIL) ' Text to display in dialog
        nReply = MsgBox(sMsg, vbCritical + vbYesNo, sCaption)
        If nReply = vbYes Then
                ' Build the error info string to send in email
            sEmailMsg = "<<" + sError + ">> <<" + sDesc + ">> <<" + sMacro + _
                        ">> <<" + sSituation + ">> <<" + sExtra + ">>"
            SendSupportMail sEmailMsg
        End If
    Else
            ' No email, just display the error info
        MsgBox sMsg, vbCritical, sCaption
    End If
    
End Sub
Private Sub SendSupportMail(sErrMsg As String)
        ' Send the error information by email
    Dim sBody As String
    Dim sMailTo As String
    Dim nResult As Long
    
    sMailTo = ""
    
        ' Assamble information about the OS and Word version
    sBody = "//***Document***//  "
    sBody = sBody + "<< Title: " + ActiveDocument.BuiltInDocumentProperties("Title").Value + ">>  "
    sBody = sBody + "<< Subject: " + ActiveDocument.BuiltInDocumentProperties("Subject").Value + ">>  "
    sBody = sBody + "<< KeyWords: " + ActiveDocument.BuiltInDocumentProperties("Keywords").Value + ">>  "
    sBody = sBody + "//***Error***// "
    sBody = sBody + sErrMsg
    sBody = sBody + "//***MS Word***//  "
    sBody = sBody + "<< Version: " + Application.Version + ">>  "
    sBody = sBody + "//***Windows***//  " + vbCrLf
    sBody = sBody + "<< OS: " + System.OperatingSystem + ", " + System.Version + ">>  "
    sBody = sBody + "<< Country setting: " + System.LanguageDesignation + ">>  "
    
    

        ' Call WinAPI which in turn will call the default mail application
    
    nResult = ShellExec(0, "open", sMailTo + "?Subject=Macro error&Body=" + sBody, "", "", 0)
    
    If nResult <= 32 Then
        If nLangID = wdSweden Then
            MsgBox "Kunde inte starta standardprogrammet f|fffd|r epost.", vbCritical, "Skicka epost"
        Else
            MsgBox "Unable to call default mail application.", vbCritical, "Send Email"
        End If
    End If

End Sub

Private Sub SetErrorDescription()
        ' Set error message corresponding to error number
        ' Has to be implemented and numeric constants has to be declared
        
End Sub

Function FindCustomDocProperty(sKey As String) As Boolean
        ' Find a custom doc property to avoid runtime error if the property doesn't exist.
    Dim oCustProp As DocumentProperty
    
    FindCustomDocProperty = False
    
    For Each oCustProp In ActiveDocument.CustomDocumentProperties
        If oCustProp.Name = sKey Then
            FindCustomDocProperty = True
            Exit For
        End If
    Next
    
End Function
Private Sub Class_Initialize()
        ' Set defaults on initialization
    Dim sCustProp As String
    ReDim sCaptions(VBE_ELEMENTS)
    
    nLangID = System.Country
    
    If nLangID = wdSweden Then
            ' Set captions to Swedish
        sCaptions(VBE_CAPTION) = "Programfel i makro"
        sCaptions(VBE_ERRNUM) = "Fel nummer "
        sCaptions(VBE_REASON) = "Orsak: "
        sCaptions(VBE_SOURCE) = "K|fffd|lla: "
        sCaptions(VBE_SITUATION) = "Situation: "
        sCaptions(VBE_SENDMAIL) = "Vill du skicka felmeddelandet som epost till support?"
    Else
            ' Other language, set captions to English
        sCaptions(VBE_CAPTION) = "Runtime Error in Macro"
        sCaptions(VBE_ERRNUM) = "Error number "
        sCaptions(VBE_REASON) = "Reason: "
        sCaptions(VBE_SOURCE) = "Source: "
        sCaptions(VBE_SITUATION) = "Situation: "
        sCaptions(VBE_SENDMAIL) = "Would you like to send the error message to support by email?"
    End If
    
    sCustProp = "SupportMail"   ' Name of cust doc prop for enable/disable sending error email
    
        ' Check if the doc prop for sending error info by email exist and is enabled
    If FindCustomDocProperty(sCustProp) Then
        bSendMail = ActiveDocument.CustomDocumentProperties(sCustProp).Value
    End If
    
End Sub


Attribute VB_Name = "FPCopyDocContentToNewDoc"
'
'
'
'   Project:
'   Customer:
'   Macro Name:     CopyContentToNewDoc
'
'   Created:        2004-08-05  Lars-Eric Gissl|fffd|n
'   Last Modified:  xxxx-xx-xx
'
'   Description:    Copy the content of the document to another document
'

Option Explicit

Sub CopyContentToNewDoc()
' Code Header inserted by the Procedure Header Add-In
'*************************************************************
'* Sub FPCopyDocContentToNewDoc.CopyContentToNewDoc
'* Author : Lars-Eric Gissl|fffd|n
'*
'* Purpose: Stub Sub for copying the content to a new document
'*          The functionality may eventually be modified for
'*          different documents.
'*
'* Parameters:
'*
'*
'*------------------------------------------------------------
'* Revision History
'*  2004-08-05 LG: Creatation of Sub
'*************************************************************
' End Code Header block
    Dim oError As ErrorObject
    Dim sSituation As String
    'Dim oDlg As SaveAsDialog
    Dim oActive As Document
    Dim oNew As Document
    Dim oRng As Range
    Dim oRng1 As Range
    Dim oSec As Section
    Dim oStOld As Style
    Dim oStNew As Style
    Dim oProp As DocumentProperty
    Dim oOldProp As DocumentProperty
    Dim oShp As InlineShape
    Dim nReply As Long

    'On Error GoTo ErrorHandler XXX

    Set oActive = ActiveDocument
    Set oNew = Documents.Add
        
    Application.ScreenUpdating = False
    
    'On Error GoTo MoveOn XXX
    
    'Make sure the Normal style will be the same in the new document
    
    sSituation = "Setting Normal Style in new document"
    Set oStNew = oNew.Styles("Normal")
    Set oStOld = oActive.Styles("Normal")
    
    oStNew.Font = oStOld.Font
    oStNew.ParagraphFormat = oStOld.ParagraphFormat
    Set oStNew = Nothing
    Set oStOld = Nothing
    
    'oNew.ActiveWindow.View.Zoom.Percentage = 100
    
MoveOn:
    'On Error GoTo ErrorHandler XXX
    ' Copy the document properties to the new document
    sSituation = "Copying the document properies"
    For Each oProp In oActive.CustomDocumentProperties
        oNew.CustomDocumentProperties.Add _
            Name:=oProp.Name, LinkToContent:=oProp.LinkToContent, Value:=oProp.Value, Type:=oProp.Type
    Next
        
         
    
    
    sSituation = "Copying the story ranges"
    For Each oRng In oActive.StoryRanges
        'Error handling is added for a Word 2003 bug
        
        'Err.Clear
        'On Error Resume Next
                        
        oRng.Copy
        
        oNew.StoryRanges(oRng.StoryType).Select
                       
        Selection.Paste
                
        If Err.Number = 0 Then
            
                ' Delete the ending paragraph mark so no extra lines will remain
                ' between the ranges
                        
            'Else
                            
                Selection.Collapse Direction:=wdCollapseEnd
                Selection.MoveRight Unit:=wdCharacter, Count:=90, Extend:=wdExtend
                
                Selection.Delete
            
                '2008-02-14 start
            
                'Selection.Collapse Direction:=wdCollapseEnd
                'Selection.MoveRight Unit:=wdCharacter, Count:=100, Extend:=wdExtend
                
                'Selection.Delete
            
                '2008-02-14 slut
            
                'nytt
                'Selection.Collapse Direction:=wdCollapseEnd
                'Selection.MoveDown Unit:=wdLine, Count:=4, Extend:=wdExtend
                'Selection.EndKey Unit:=wdLine, Extend:=wdExtend
                'Selection.Delete Unit:=wdCharacter, Count:=1

            
            
            
            'End If
                        
               'dubbel
                        
        Else
                MsgBox Err.Description
                        
        End If
        
    Next
    'Selection.Paste 'dubbel
    
    
    On Error GoTo ErrorHandler
    
    sSituation = "Selecting the Main Story"
    oNew.StoryRanges(wdMainTextStory).Select
    oNew.ActiveWindow.View = wdPageView
    
    ' This code can be useful if the header contains a logo that gets rescaled in the new document
    'If ActiveDocument.StoryRanges(wdFirstPageHeaderStory).InlineShapes.Count > 0 Then
        'Set oShp = ActiveDocument.StoryRanges(wdFirstPageHeaderStory).InlineShapes(1)
        'Set oShp = ActiveDocument.StoryRanges(wdFirstPageHeaderStory).
        'With oShp
            '.ScaleHeight = 21.2
            '.ScaleWidth = 21.8
         '   .ScaleHeight = 100
          '  .ScaleWidth = 100
                
        'End With
    'End If
    
    
    sSituation = "Unlinking the fields in the document"
    For Each oRng In oNew.StoryRanges
        oRng.Fields.Unlink
    Next
    
    nReply = MsgBox("Vill du skydda nya dokumentet s|fffd| att det inte kan redigeras?", vbQuestion + vbYesNo + vbDefaultButton1, "Nytt dokument")
    If nReply = vbYes Then
        sSituation = "Setting Section protections"
        For Each oSec In oNew.Sections
            oSec.ProtectedForForms = True
        Next
        oNew.Protect wdAllowOnlyFormFields, False, "UNzmJz" ' Password for Norrk|fffd|ping
    End If
    
    Application.ScreenUpdating = True
    
    
    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "SOPublish.SOPublish()"
    oError.Situation = sSituation
    oError.Show
End Sub

Attribute VB_Name = "FPViewFrasDlg"
'
'
'
'   Project:
'   Customer:       Norrk|fffd|pings kommun
'   Module Name:    FPViewFrasDlg
'
'   Created:        2004-02-11  Lars-Eric Gissl|fffd|n
'   Last Modified:  xxxx-xx-xx
'
'   Description:
'

Option Explicit

Public Sub ViewFrasDlg()
    Dim oError As ErrorObject
    Dim sSituation As String

    On Error Resume Next
    
    If Dir(sFrasDoc) = "" Then
        MsgBox "Kan inte hitta frasmallen " & sFrasDoc, vbExclamation, "Frasmall"
    Else
        frmViewFras.Show
    End If
    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "FPViewFrasDlg.ViewFrasDlg()"
    oError.Situation = sSituation
    oError.Show
End Sub
Attribute VB_Name = "GetUniqueFilename"
'
'
'
'   Project:        Makro library
'   Customer:
'   Macro Name:     GetUniqueFilename
'
'   Created:        2002-03-22  Lars-Eric Gissl|fffd|n
'   Last Modified:  xxxx-xx-xx
'
'   Description:
'

Declare Function GetTempPath Lib "kernel32" Alias "GetTempPathA" _
        (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long

Declare Function GetTempFileName Lib "kernel32" Alias "GetTempFileNameA" _
        (ByVal lpszPath As String, _
        ByVal lpPrefixString As String, _
        ByVal wUnique As Long, _
        ByVal lpTempFileName As String) As Long
        
Option Explicit

Public Function GetUniqueFilename(Optional sXPath As String) As String
        ' Create a temporary document name
    Dim sPath As String     ' Path returned by GetTempPath
    Dim sTmpFileName As String  ' Temp file name returned by GetTempFileName
    Dim sPreFix As String   ' First three letters of the temp file name
    Dim nPathLen As Long    ' Length of the string passed to API functions
    Dim nResult As Long     ' Return values from API function calls
    
    sPreFix = "SO" ' let all temp file names start with SO....
    nPathLen = 1024
    sPath = Space(nPathLen)
    sTmpFileName = Space(nPathLen)
    
    If sXPath = "" Then
            ' No path specified, get Windows temp directory
        nResult = GetTempPath(nPathLen, sPath)  'Win API
    Else
        nResult = 1
        sPath = sXPath
    End If
    
    If (nResult > 0 And nResult < nPathLen) Then
        nResult = GetTempFileName(sPath, sPreFix, 0, sTmpFileName)   ' Win API
       If nResult <> 0 Then
          GetUniqueFilename = sTmpFileName
       End If
    End If
      
End Function


Attribute VB_Name = "GlobalConstants"
'F|fffd|r test
'Public Const sFrasDoc = "c:\frasmall.doc"
'Public Const sFrasDoc = "\\na1adm-ncp\VOL2\Dokument\Mhkarkiv\Fraser\frasmall.doc"
Public Const sFrasDoc = "L:\MHKARKIV\Fraser\Frasmall.doc"
Attribute VB_Name = "Logotype"
Option Explicit
Public Sub InsertLogotype(ByVal sFileName As String)
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim nCellwidth As Single
    Dim nCellHeight As Single
    Dim nShapeWidth As Single
    Dim nShapeHeight As Single
    Dim nAsp As Single
    Dim nNewAsp As Long
    Dim nHeightAsp As Long
    Dim nWidthAsp As Long
    Dim oShape As InlineShape
    Dim bShapeSizeChange As Boolean

    On Error GoTo ErrorHandler
    
    If Dir(sFileName) = "" Then
        MsgBox sFileName & " |fffd|r inte en giltig s|fffd|kv|fffd|g till bild/logotyp", vbExclamation, "Infoga bild/logotyp"
        Exit Sub
    End If
    
    Set oShape = Selection.InlineShapes.AddPicture(sFileName)
    oShape.LockAspectRatio = msoTrue
    oShape.ScaleHeight = 100
    oShape.ScaleWidth = 100
    If Selection.Information(wdWithInTable) Then
        nShapeWidth = oShape.Width
        nShapeHeight = oShape.Height
        
        nCellwidth = CentimetersToPoints(8)
        nCellHeight = 54
            
        If nShapeWidth > nCellwidth Then
            nAsp = nCellwidth / nShapeWidth
            nWidthAsp = CInt(nAsp * 100)
            nShapeHeight = oShape.Height
            bShapeSizeChange = True
        End If
        If nShapeHeight > nCellHeight Then
            nAsp = nCellHeight / nShapeHeight
            nHeightAsp = CInt(nAsp * 100)
            bShapeSizeChange = True
        End If
        If bShapeSizeChange = True Then
            If nWidthAsp = 0 Then nWidthAsp = nHeightAsp
            If nHeightAsp = 0 Then nHeightAsp = nWidthAsp
            If nWidthAsp > nHeightAsp Then
                nNewAsp = nHeightAsp
            Else
                nNewAsp = nWidthAsp
            End If
            oShape.ScaleHeight = nNewAsp
            oShape.ScaleWidth = nNewAsp
        End If
    End If

    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    With oError
        .UseVBErrObject
        .MacroName = "Logotype.InsertLogotype"
        .Situation = sSituation
        .Show
    End With
End Sub

Attribute VB_Name = "PublicConstants"
Public Const LogoWebPath = "formhotel.accessia.se/NorrkopingLogo/2008/"

Attribute VB_Name = "SFReplaceVBA97"
Function ReplaceVBA97(ByVal sText As String, sSearch As String, sReplace As String) As String
        ' Replace a string within a string with another string
        ' This function is due to missing function in VBA 97 but present in VBA 2000
    Dim nLen        As Long     ' Length of text parameter
    Dim nSearchLen  As Long     ' Length of search string
    Dim nPos        As Long     ' Position of found search string
    Dim i           As Long     ' Offset counter
    Dim oError As ErrorObject
    
    On Error GoTo ErrorHandler
    
    nSearchLen = Len(sSearch)
    
    If Left(sText, nSearchLen) = sSearch Then
        sText = sReplace + Mid(sText, nSearchLen + 1)
    End If
    
    nLen = Len(sText)
    
    If nLen > 1 Then
        i = 1
        While i <= nLen
            If Mid(sText, i, nSearchLen) = sSearch Then
                sText = Left(sText, i - 1) + sReplace + Mid(sText, i + nSearchLen)
                nLen = Len(sText)
                i = i + Len(sReplace) - 1
            Else
                i = i + 1
            End If
        Wend
    End If
    
    ReplaceVBA97 = sText
    
    Exit Function
    
ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "ReplaceVBA97()"
    oError.Show
    
End Function

Attribute VB_Name = "SOAutoMacros"
'
'
'
'   Project:
'   Customer:       Norrk|fffd|pings kommun
'   Macro Name:     SOAutoMacros
'
'   Created:        2002-10-29  Lars-Eric Gissl|fffd|n
'   Last Modified:  xxxx-xx-xx
'
'   Description:
'

Option Explicit

Sub AutoOpen()
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim bShowDialog As Boolean
    Dim bSaved As Boolean
    Dim oDlg As frmMain

    On Error GoTo ErrorHandler
    
    sSituation = "Setting defaults for the document"
    SODefDocSettings.DefaultDocSettings
    
    'SODocProtection.UnprotectDoc
    sSituation = "Checking if document is used or not"
    If SODocVariables.GetDocVariable("Used") <> "Yes" Then
        bShowDialog = True
    End If
    
    sSituation = "Enabling the toolbar in the document"
    ActiveDocument.CommandBars("Rubriker och sidhuvud").Enabled = True
    
    sSituation = "Displaying the dialog"
    If bShowDialog Then
        sSituation = "Displaying the dialog"
        Set oDlg = New frmMain
        oDlg.Show
        Set oDlg = Nothing
    End If

    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "SOAutoMacros()"
    oError.Situation = sSituation
    oError.Show
End Sub
Attribute VB_Name = "SODefDocSettings"
'
'
'
'   Project:        All
'   Customer:       All
'   Macro Name:     SODefDocSettings
'
'   Created:        2003-06-03  Lars-Eric Gissl|fffd|n
'   Last Modified:  xxxx-xx-xx
'
'   Description:    Sets the default settings for documents
'

Option Explicit

Sub DefaultDocSettings()
    Dim oError As ErrorObject
    Dim sSituation As String

    On Error GoTo ErrorHandler
    
    sSituation = "Turning off Auto Hyphenation"
    ActiveDocument.AutoHyphenation = False
    
    sSituation = "Setting view options"
    With ActiveDocument.ActiveWindow
        With .ActivePane.View
            .Zoom.PageFit = wdPageFitBestFit
            .TableGridlines = False
            .ShowBookmarks = False
            .ShowAll = False
            .ShowFieldCodes = False
        End With
        .View.Type = wdPageView
    End With
    
    sSituation = "Setting print options"
    With Options
        .UpdateFieldsAtPrint = True
        .PrintBackground = True
        .PrintFieldCodes = False
        .PrintComments = False
        .PrintHiddenText = False
        .PrintDrawingObjects = True
        .PrintDraft = False
        .MapPaperSize = True
    End With

    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "SODefDocSettings()"
    oError.Situation = sSituation
    oError.Show
End Sub
Attribute VB_Name = "SODocVariables"
'
'
'
'   Project:
'   Customer:
'   Macro Name:     SODocVariable
'
'   Created:        2002-11-04  Lars-Eric Gissl|fffd|n
'   Last Modified:  xxxx-xx-xx
'
'   Description:    Functions for Document Variables
'

Option Explicit

Sub SetDocVariable(ByVal sName As String, ByVal vValue As Variant)
    Dim oError As ErrorObject
    Dim sSituation As String

    On Error GoTo ErrorHandler

    If Not FindDocVariable(sName) Then
        sSituation = "Adding new doc Variable"
        ActiveDocument.Variables.Add Name:=sName, Value:=vValue
    Else
        sSituation = "Adding new value to existing doc Variable"
        ActiveDocument.Variables(sName).Value = vValue
    End If

    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "SODocVariable.SetDocVariable()"
    oError.Situation = sSituation
    oError.Show
End Sub

Public Function GetDocVariable(ByVal sName As String) As Variant
'*************************************************************
'* Function SODocVariable.GetCustDocProperty
'* Author : Lars-Eric Gissl|fffd|n
'*
'* Purpose: Retrieve the value from a Document Variable
'*
'* Parameters:
'*   sName (String) Name of the Document Variable
'*
'* Returns (Variant): The value of the Document Variable
'*          If the Variable doesn't exist an empty string will be returned
'*
'*------------------------------------------------------------
'* Revision History
'*  2002-11-04 LG: Creatation of Function
'*************************************************************
    
    If Not FindDocVariable(sName) Then
        GetDocVariable = ""
    Else
        GetDocVariable = ActiveDocument.Variables(sName).Value
    End If
    
End Function
Private Function FindDocVariable(sName As String) As Boolean
'*************************************************************
'* Function SODocVariable.FindDocVariable
'* Author : Lars-Eric Gissl|fffd|n
'*
'* Purpose: Tries to find a Document Variable in the active document
'*
'* Parameters:
'*   sName (String)  The name of the Document Variable
'*
'* Returns (Boolean): True if the Variable was found, otherwise False
'*
'*------------------------------------------------------------
'* Revision History
'*  2002-11-04 LG: Creatation of Function
'*************************************************************
    Dim oDocVar As Variable
    
    FindDocVariable = False
    
    For Each oDocVar In ActiveDocument.Variables
        If oDocVar.Name = sName Then
            FindDocVariable = True
            Exit For
        End If
    Next
    
End Function


Attribute VB_Name = "SOGetLogotype"
'
'
'
'   Project:        Norrk|fffd|pings Kommun
'   Customer:
'   Macro Name:     SOGetLogotype
'
'   Created:        2003-03-04  Lars-Eric Gissl|fffd|n
'   Last Modified:  xxxx-xx-xx
'
'   Description:
'

Option Explicit

Public Function GetLogotype(ByVal HTTPPath As String, _
                    ByVal FileName As String) As Boolean
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim oWeb As WebHTTP

    On Error GoTo ErrorHandler

    Set oWeb = New WebHTTP
    
    If oWeb.InetError Then
        MsgBox "Kunde inte skapa anslutning till Internet." & vbCrLf & vbCrLf & _
            "Fel: " & oWeb.InetStatus, vbExclamation, "Internetfel"
        Set oWeb = Nothing
        Exit Function
    End If
    
    oWeb.URL = HTTPPath
    oWeb.SaveToFile = FileName
    oWeb.Send
    
    
    If oWeb.InetError Then
        MsgBox "Kunde inte h|fffd|mta logotyp." & vbCrLf & vbCrLf & _
            "Fel: " & oWeb.InetStatus, vbExclamation, "Internetfel"
    Else
        If Left(oWeb.StatusCode, 3) <> "200" Then
            MsgBox "Kunde inte h|fffd|mta logotyp." & vbCrLf & vbCrLf & _
                "Fel: " & oWeb.HTTPStatus, vbExclamation, "Internetfel"
        Else
            GetLogotype = True
        End If
    End If
    
    Set oWeb = Nothing
        
    Exit Function

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "SOGetLogotype.GetLogotype()"
    oError.Situation = sSituation
    oError.Show
End Function
Attribute VB_Name = "SOPrintableString"
'
'
'
'   Project:
'   Customer:
'   Macro Name:     SOPrintableString
'
'   Created:        2002-10-25  Lars-Eric Gissl|fffd|n
'   Last Modified:  xxxx-xx-xx
'
'   Description:    Removes non-printable characters (below ASCII 32) from a string
'

Option Explicit

Public Function PrintableString(ByVal sText As String) As String
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim sResult As String
    Dim sChar As String
    Dim nLen As Long
    Dim i As Long

    On Error GoTo ErrorHandler

    nLen = Len(sText)
    
    For i = 1 To nLen
        sChar = Mid(sText, i, 1)
        If Asc(sChar) > 31 Then
            sResult = sResult & sChar
        End If
    Next

    PrintableString = sResult
    
    Exit Function

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "SOPrintableString.PrintableString()"
    oError.Situation = sSituation
    oError.Show
End Function
Attribute VB_Name = "SOToolBarComboBox"
'
'
'
'   Project:        Macro lib
'   Customer:
'   Macro Name:     SOSetDropDrownToolBar
'
'   Created:        2003-05-08  Lars-Eric Gissl|fffd|n
'   Last Modified:  xxxx-xx-xx
'
'   Description:    The code in this module is just to maintain the
'                   ComboBox in the toolbar. As a ComboBox can't be
'                   added in the GUI it must be inserted by code.
'

Option Explicit
Sub ToolbarComboboxSelect()
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim sCtrlText As String
    Dim sStyle As String
    Dim nIndex As Long
    Dim oCmd As CommandBarComboBox
    Dim sNewLine As String

    On Error GoTo ErrorHandler
    
    If Not Selection.Sections(1).ProtectedForForms Then
        sSituation = "H|fffd|mtar Dropdownlista fr|fffd|n verktygslist"
        Set oCmd = ActiveDocument.CommandBars("Rubriker och sidhuvud").Controls(1)
        sSituation = "H|fffd|mtar textv|fffd|rde fr|fffd|n Dropdownlista"
        sCtrlText = oCmd.Text
        sSituation = "H|fffd|mtar listindex fr|fffd|n Dropdownlista"
        nIndex = oCmd.ListIndex
        If nIndex = 0 Then Exit Sub
        
        With Selection
            Select Case nIndex
                Case 5, 6, 10, 11
                    sStyle = "NKN Rubrik 3"
                    sNewLine = vbNewLine
                Case 12, 13
                    sStyle = "NKN Br|fffd|dtext"
                    sNewLine = Chr(11)
                Case Else
                    sStyle = "NKN Rubrik 2"
                    sNewLine = vbNewLine
            End Select
            sSituation = "S|fffd|tter formatmall till " & sStyle
            .Paragraphs(1).Style = sStyle
            sSituation = "L|fffd|gger in texten " & sCtrlText
            .TypeText sCtrlText
            If sNewLine = vbNewLine Then
                .TypeParagraph
            Else
                .TypeText sNewLine
            End If
        End With
        
        Set oCmd = Nothing
    End If
        
    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "SOToolBarComboBox.ToolbarComboboxSelect()"
    oError.Situation = sSituation
    oError.Show
End Sub

Sub CreateToolBarComboBox()
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim oCmd As CommandBarComboBox

    On Error GoTo ErrorHandler

    Set oCmd = ActiveDocument.CommandBars("Rubriker och sidhuvud").Controls.Add(msoControlComboBox)
    
    With oCmd
            ' Add items to the DropDown list
        .AddItem "F|fffd|rslag till beslut"              'NKN Rubrik 2   (1)
        .AddItem "Sammanfattning"                   'NKN Rubrik 2   (2)
        .AddItem "Sk|fffd|l f|fffd|r det f|fffd|reslagna beslutet" 'NKN Rubrik 2   (3)
        .AddItem "Beskrivning av |fffd|rendet"           'NKN Rubrik 2   (4)
        .AddItem "Konsekvensbeskrivning f|fffd|r h|fffd|llbar utveckling" 'NKN Rubrik 3   (5)
        .AddItem "Kommunikation av f|fffd|rslaget till beslut"       'NKN Rubrik 3   (6)
        .AddItem "Yttrande"                          'NKN Rubrik 2   (7)
        .AddItem "Yrkande"                          'NKN Rubrik 2   (8)
        .AddItem "Sk|fffd|l f|fffd|r beslutet"                  'NKN Rubrik 2   (9)
        .AddItem "Reservationer"                    'NKN Rubrik 3   (10)
        .AddItem "Protokollsanteckningar"                 'NKN Rubrik 3   (11)
        .AddItem "Bilagor:"                                      'NKN Br|fffd|dtext   (12)
        .AddItem "Beslutet skickas till"                          'NKN Br|fffd|dtext   (13)
'        .AddItem "S|fffd|nt till:"
            ' Set properties
        .DropDownLines = 0  ' Visar alla alternativ i listan utan scrollist
        .Width = 220
        .DropDownWidth = 220    ' This value has to tested for each Ctrl
        .OnAction = "ToolbarComboboxSelect"
        .Tag = "Headers"
        .Move Before:=1 ' Sets the position on the toolbar
        .Visible = True
    End With

    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "SOCreateToolBarComboBox.CreateToolBarComboBox()"
    oError.Situation = sSituation
    oError.Show
End Sub

Attribute VB_Name = "SOUpdateHeader"
'
'
'
'   Project:        Norrk|fffd|pings Kommun
'   Customer:
'   Macro Name:     SOUpdateHeader
'
'   Created:        2003-02-21  Lars-Eric Gissl|fffd|n
'   Last Modified:  xxxx-xx-xx
'
'   Description:
'

Option Explicit

Sub SOUpdateHeader()
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim oDlg As frmEditHeader
    Dim headerRange As Range
    

    On Error GoTo ErrorHandler

    Set oDlg = New frmEditHeader
    oDlg.Show
    Set oDlg = Nothing

    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "SOUpdateHeader()"
    oError.Situation = sSituation
    oError.Show
End Sub
Attribute VB_Name = "SetHeaderFooterSubs"
'**************************************************************
'* Copy the needed sub, or subs, to a form or mudule.
'* The Subs are delared as private and are not supposed
'* to be called from another module
'**************************************************************

Private Sub SetHeader()
    Dim sVal As String
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim headerRange As Range
    
    '**************************************
    '* The document must be unprotected
    '* when this is called!!!!!!!
    '**************************************
    
    On Error GoTo ErrorHandler
    
    Application.ScreenUpdating = False
    
    sSituation = "Switching to PageView"
    If ActiveWindow.View.SplitSpecial <> wdPaneNone Then
        ActiveWindow.Panes(2).Close
    End If
    If ActiveWindow.ActivePane.View.Type = wdNormalView Or ActiveWindow. _
        ActivePane.View.Type = wdOutlineView Or ActiveWindow.ActivePane.View.Type _
         = wdMasterView Then
        ActiveWindow.ActivePane.View.Type = wdPageView
    End If
    
    sSituation = "Switching to Header"
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    Selection.WholeStory
    Set headerRange = Selection.Range
    
    sSituation = "Filling Page header"
    
    '**************************************
    '* Do what ever you want with the header
    '*
    '* Dont't forget to change the module name
    '* in the ErrorHandler!!!!!!!!
    '**************************************
    
    sSituation = "Switching main document"
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    sSituation = ""
    
    Application.ScreenUpdating = True
        
    Exit Sub
    
ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "Module/Form.SetHeader()"
    oError.Situation = sSituation
    oError.Show
End Sub

Private Sub SetFooter()
    Dim sVal As String
    Dim oError As ErrorObject
    Dim sSituation As String
    
    '**************************************
    '* The document must be unprotected
    '* when this is called!!!!!!!
    '**************************************
    
    On Error GoTo ErrorHandler
    
    Application.ScreenUpdating = False
    
    sSituation = "Switching to PageView"
    If ActiveWindow.View.SplitSpecial <> wdPaneNone Then
        ActiveWindow.Panes(2).Close
    End If
    If ActiveWindow.ActivePane.View.Type = wdNormalView Or ActiveWindow. _
        ActivePane.View.Type = wdOutlineView Or ActiveWindow.ActivePane.View.Type _
         = wdMasterView Then
        ActiveWindow.ActivePane.View.Type = wdPageView
    End If
    
    sSituation = "Switching to Footer"
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
    
    sSituation = "Filling page footer"
    
    '**************************************
    '* Do what ever you want with the Footer
    '*
    '* Dont't forget to change the module name
    '* in the ErrorHandler!!!!!!!!
    '**************************************
        
    sSituation = "Switching to main document"
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    sSituation = ""
    Application.ScreenUpdating = True
        
    Exit Sub
    
ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "Module/Form.SetFooter()"
    oError.Situation = sSituation
    oError.Show
End Sub


Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True



Attribute VB_Name = "UserRegSettings"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



'
'
'
'   Project:        Macro libary
'   Customer:
'   Class Name:     UserRegSettings
'
'   Created:        2002-05-30  Lars-Eric Gissl|fffd|n
'   Last Modified:  xxxx-xx-xx
'
'   Description:    Class for read/write user information to/from the registry
'


Option Explicit

Dim sAddress1 As String
Dim sAddress2 As String
Dim sAddressPrivate1 As String
Dim sAddressPrivate2 As String
Dim sBankgiro As String
Dim sCity As String
Dim sCityPrivate As String
Dim sCompany As String
Dim sCountry As String
Dim sDepartment As String
Dim sDivision As String
Dim sEmailUser As String
Dim sEmailCompany As String
Dim sFaxCompany As String
Dim sFaxCompanyIntl As String
Dim sFaxDirect As String
Dim sFaxDirectIntl As String
Dim sGroup As String
Dim sHandlingOfficer As String          ' Arbetsledare
Dim sNameFirst As String
Dim sNameLast As String
Dim sOrgNr As String
Dim sPersonNr As String
Dim sPhoneCompany As String
Dim sPhoneCompanyIntl As String
Dim sPhoneConnection As String
Dim sPhoneDirect As String
Dim sPhoneDirectIntl As String
Dim sPhoneMobile As String
Dim sPhoneMobileIntl As String
Dim sPhonePrivate As String
Dim sPostgiro As String
Dim sPostNr As String
Dim sPostNrPrivate As String
Dim sServicelocation As String          ' Tj|fffd|nstest|fffd|lle
Dim sSupervisor As String               ' N|fffd|rmsta chef
Dim sVATNr As String
Dim sWebPage As String
Dim sVisitingaddress As String
Dim sVisitingaddress2 As String
Dim sTitle As String
Dim sEmpNumber As String

' ---- Property Get Methods -----------------------------------------------

Property Get Address1()
    Address1 = sAddress1
End Property
Property Get Address2()
    Address2 = sAddress2
End Property
Property Get AddressPrivate1()
    AddressPrivate1 = sAddressPrivate1
End Property
Property Get AddressPrivate2()
    AddressPrivate2 = sAddressPrivate2
End Property
Property Get Bankgiro()
    Bankgiro = sBankgiro
End Property
Property Get City()
    City = sCity
End Property
Property Get CityPrivate()
    CityPrivate = sCityPrivate
End Property
Property Get Company()
    Company = sCompany
End Property
Property Get Country()
    Country = sCountry
End Property
Property Get Department()
    Department = sDepartment
End Property
Property Get Division()
    Division = sDivision
End Property
Property Get EmailUser()
    EmailUser = sEmailUser
End Property
Property Get EmployeeNumber()
    EmployeeNumber = sEmpNumber
End Property
Property Get EmailCompany()
    EmailCompany = sEmailCompany
End Property
Property Get FaxCompany()
    FaxCompany = sFaxCompany
End Property
Property Get FaxCompanyIntl()
    FaxCompanyIntl = sFaxCompanyIntl
End Property
Property Get FaxDirect()
    FaxDirect = sFaxDirect
End Property
Property Get FaxDirectIntl()
    FaxDirectIntl = sFaxDirectIntl
End Property
Property Get Group()
    Group = sGroup
End Property
Property Get HandlingOfficer()
    HandlingOfficer = sHandlingOfficer
End Property
Property Get NameFirst()
    NameFirst = sNameFirst
End Property
Property Get NameLast()
    NameLast = sNameLast
End Property
Property Get OrgNr()
    OrgNr = sOrgNr
End Property
Property Get PersonNr()
    PersonNr = sPersonNr
End Property
Property Get PhoneCompany()
    PhoneCompany = sPhoneCompany
End Property
Property Get PhoneCompanyIntl()
    PhoneCompanyIntl = sPhoneCompanyIntl
End Property
Property Get PhoneConnection()
    PhoneConnection = sPhoneConnection
End Property
Property Get PhoneDirect()
    PhoneDirect = sPhoneDirect
End Property
Property Get PhoneDirectIntl()
    PhoneDirectIntl = sPhoneDirectIntl
End Property
Property Get PhoneMobile()
    PhoneMobile = sPhoneMobile
End Property
Property Get PhoneMobileIntl()
    PhoneMobileIntl = sPhoneMobileIntl
End Property
Property Get PhonePrivate()
    PhonePrivate = sPhonePrivate
End Property
Property Get Postgiro()
    Postgiro = sPostgiro
End Property
Property Get PostNr()
    PostNr = sPostNr
End Property
Property Get PostNrPrivate()
    PostNrPrivate = sPostNrPrivate
End Property
Property Get Servicelocation()
    Servicelocation = sServicelocation
End Property
Property Get Supervisor()
    Supervisor = sSupervisor
End Property
Property Get VATNr()
    VATNr = sVATNr
End Property
Property Get WebPage()
    WebPage = sWebPage
End Property
Property Get Visitingaddress()
    Visitingaddress = sVisitingaddress
End Property
Property Get Visitingaddress2()
    Visitingaddress2 = sVisitingaddress2
End Property
Property Get Title()
    Title = sTitle
End Property

' ---- Property Let Methods -----------------------------------------------

Property Let Address1(sText)
    sAddress1 = sText
End Property
Property Let Address2(sText)
    sAddress2 = sText
End Property
Property Let AddressPrivate1(sText)
    sAddressPrivate1 = sText
End Property
Property Let AddressPrivate2(sText)
    sAddressPrivate2 = sText
End Property
Property Let Bankgiro(sText)
    sBankgiro = sText
End Property
Property Let City(sText)
    sCity = sText
End Property
Property Let CityPrivate(sText)
    sCityPrivate = sText
End Property
Property Let Company(sText)
    sCompany = sText
End Property
Property Let Country(sText)
    sCountry = sText
End Property
Property Let Department(sText)
    sDepartment = sText
End Property
Property Let Division(sText)
    sDivision = sText
End Property
Property Let EmailUser(sText)
    sEmailUser = sText
End Property
Property Let EmailCompany(sText)
    sEmailCompany = sText
End Property
Property Let EmployeeNumber(sText)
    sEmpNumber = sText
End Property

Property Let FaxCompany(sText)
    sFaxCompany = sText
End Property
Property Let FaxCompanyIntl(sText)
    sFaxCompanyIntl = sText
End Property
Property Let FaxDirect(sText)
    sFaxDirect = sText
End Property
Property Let FaxDirectIntl(sText)
    sFaxDirectIntl = sText
End Property
Property Let Group(sText)
    sGroup = sText
End Property
Property Let HandlingOfficer(sText)
    sHandlingOfficer = sText
End Property
Property Let NameFirst(sText)
    sNameFirst = sText
End Property
Property Let NameLast(sText)
    sNameLast = sText
End Property
Property Let OrgNr(sText)
    sOrgNr = sText
End Property
Property Let PersonNr(sText)
    sPersonNr = sText
End Property
Property Let PhoneCompany(sText)
    sPhoneCompany = sText
End Property
Property Let PhoneCompanyIntl(sText)
    sPhoneCompanyIntl = sText
End Property
Property Let PhoneConnection(sText)
    sPhoneConnection = sText
End Property
Property Let PhoneDirect(sText)
    sPhoneDirect = sText
End Property
Property Let PhoneDirectIntl(sText)
    sPhoneDirectIntl = sText
End Property
Property Let PhoneMobile(sText)
    sPhoneMobile = sText
End Property
Property Let PhoneMobileIntl(sText)
    sPhoneMobileIntl = sText
End Property
Property Let PhonePrivate(sText)
    sPhonePrivate = sText
End Property
Property Let Postgiro(sText)
    sPostgiro = sText
End Property
Property Let PostNr(sText)
    sPostNr = sText
End Property
Property Let PostNrPrivate(sText)
    sPostNrPrivate = sText
End Property
Property Let Servicelocation(sText)
    sServicelocation = sText
End Property
Property Let Supervisor(sText)
    sSupervisor = sText
End Property
Property Let VATNr(sText)
    sVATNr = sText
End Property
Property Let WebPage(sText)
    sWebPage = sText
End Property
Property Let Visitingaddress(sText)
    sVisitingaddress = sText
End Property
Property Let Visitingaddress2(sText)
    sVisitingaddress2 = sText
End Property
Property Let Title(sText)
    sTitle = sText
End Property

Public Sub Save()
        ' Write all keys back to the registry
    Dim oError As ErrorObject
    Dim sSituation As String

    On Error GoTo ErrorHandler
        
    SaveSetting "SignOn", "UserInfo", "Address1", sAddress1
    SaveSetting "SignOn", "UserInfo", "Address2", sAddress2
    SaveSetting "SignOn", "UserInfo", "AddressPrivate1", sAddressPrivate1
    SaveSetting "SignOn", "UserInfo", "AddressPrivate2", sAddressPrivate2
    SaveSetting "SignOn", "UserInfo", "Bankgiro", sBankgiro
    SaveSetting "SignOn", "UserInfo", "City", sCity
    SaveSetting "SignOn", "UserInfo", "CityPrivate", sCityPrivate
    SaveSetting "SignOn", "UserInfo", "Company", sCompany
    SaveSetting "SignOn", "UserInfo", "Country", sCountry
    SaveSetting "SignOn", "UserInfo", "Division", sDivision
    SaveSetting "SignOn", "UserInfo", "Department", sDepartment
    SaveSetting "SignOn", "UserInfo", "EmailUser", sEmailUser
    SaveSetting "SignOn", "UserInfo", "EmailCompany", sEmailCompany
    SaveSetting "SignOn", "UserInfo", "FaxCompany", sFaxCompany
    SaveSetting "SignOn", "UserInfo", "FaxCompanyIntl", sFaxCompanyIntl
    SaveSetting "SignOn", "UserInfo", "FaxDirect", sFaxDirect
    SaveSetting "SignOn", "UserInfo", "FaxDirectIntl", sFaxDirectIntl
    SaveSetting "SignOn", "UserInfo", "Group", sGroup
    SaveSetting "SignOn", "UserInfo", "HandlingOfficer", sHandlingOfficer
    SaveSetting "SignOn", "UserInfo", "NameFirst", sNameFirst
    SaveSetting "SignOn", "UserInfo", "NameLast", sNameLast
    SaveSetting "SignOn", "UserInfo", "OrgNr", sOrgNr
    SaveSetting "SignOn", "UserInfo", "PersonNr", sPersonNr
    SaveSetting "SignOn", "UserInfo", "PhoneCompany", sPhoneCompany
    SaveSetting "SignOn", "UserInfo", "PhoneCompanyIntl", sPhoneCompanyIntl
    SaveSetting "SignOn", "UserInfo", "PhoneConnection", sPhoneConnection
    SaveSetting "SignOn", "UserInfo", "PhoneDirect", sPhoneDirect
    SaveSetting "SignOn", "UserInfo", "PhoneDirectIntl", sPhoneDirectIntl
    SaveSetting "SignOn", "UserInfo", "PhoneMobile", sPhoneMobile
    SaveSetting "SignOn", "UserInfo", "PhoneMobileIntl", sPhoneMobileIntl
    SaveSetting "SignOn", "UserInfo", "PhonePrivate", sPhonePrivate
    SaveSetting "SignOn", "UserInfo", "Postgiro", sPostgiro
    SaveSetting "SignOn", "UserInfo", "PostNr", sPostNr
    SaveSetting "SignOn", "UserInfo", "PostNrPrivate", sPostNrPrivate
    SaveSetting "SignOn", "UserInfo", "Servicelocation", sServicelocation
    SaveSetting "SignOn", "UserInfo", "Supervisor", sSupervisor
    SaveSetting "SignOn", "UserInfo", "VATNr", sVATNr
    SaveSetting "SignOn", "UserInfo", "WebPage", sWebPage
    SaveSetting "SignOn", "UserInfo", "Visitingaddress", sVisitingaddress
    SaveSetting "SignOn", "UserInfo", "Visitingaddress2", sVisitingaddress2
    SaveSetting "SignOn", "UserInfo", "Title", sTitle
    SaveSetting "SignOn", "UserInfo", "EmployeeNumber", sEmpNumber
    
    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "UserRegSettings.Save()"
    oError.Situation = sSituation
    oError.Show
End Sub

Private Sub Class_Initialize()
        ' Read all keys from the registry into class variables
    Dim oError As ErrorObject
    Dim sSituation As String

    On Error GoTo ErrorHandler

        
    sAddress1 = GetSetting("SignOn", "UserInfo", "Address1")
    sAddress2 = GetSetting("SignOn", "UserInfo", "Address2")
    sAddressPrivate1 = GetSetting("SignOn", "UserInfo", "AddressPrivate1")
    sAddressPrivate2 = GetSetting("SignOn", "UserInfo", "AddressPrivate2")
    sBankgiro = GetSetting("SignOn", "UserInfo", "Bankgiro")
    sCity = GetSetting("SignOn", "UserInfo", "City")
    sCityPrivate = GetSetting("SignOn", "UserInfo", "CityPrivate")
    sCompany = GetSetting("SignOn", "UserInfo", "Company")
    sCountry = GetSetting("SignOn", "UserInfo", "Country")
    sDivision = GetSetting("SignOn", "UserInfo", "Division")
    sDepartment = GetSetting("SignOn", "UserInfo", "Department")
    sEmailUser = GetSetting("SignOn", "UserInfo", "EmailUser")
    sEmailCompany = GetSetting("SignOn", "UserInfo", "EmailCompany")
    sFaxCompany = GetSetting("SignOn", "UserInfo", "FaxCompany")
    sFaxCompanyIntl = GetSetting("SignOn", "UserInfo", "FaxCompanyIntl")
    sFaxDirect = GetSetting("SignOn", "UserInfo", "FaxDirect")
    sFaxDirectIntl = GetSetting("SignOn", "UserInfo", "FaxDirectIntl")
    sGroup = GetSetting("SignOn", "UserInfo", "Group")
    sHandlingOfficer = GetSetting("SignOn", "UserInfo", "HandlingOfficer")
    sNameFirst = GetSetting("SignOn", "UserInfo", "NameFirst")
    sNameLast = GetSetting("SignOn", "UserInfo", "NameLast")
    sOrgNr = GetSetting("SignOn", "UserInfo", "OrgNr")
    sPersonNr = GetSetting("SignOn", "UserInfo", "PersonNr")
    sPhoneCompany = GetSetting("SignOn", "UserInfo", "PhoneCompany")
    sPhoneCompanyIntl = GetSetting("SignOn", "UserInfo", "PhoneCompanyIntl")
    sPhoneConnection = GetSetting("SignOn", "UserInfo", "PhoneConnection")
    sPhoneDirect = GetSetting("SignOn", "UserInfo", "PhoneDirect")
    sPhoneDirectIntl = GetSetting("SignOn", "UserInfo", "PhoneDirectIntl")
    sPhoneMobile = GetSetting("SignOn", "UserInfo", "PhoneMobile")
    sPhoneMobileIntl = GetSetting("SignOn", "UserInfo", "PhoneMobileIntl")
    sPhonePrivate = GetSetting("SignOn", "UserInfo", "PhonePrivate")
    sPostgiro = GetSetting("SignOn", "UserInfo", "Postgiro")
    sPostNr = GetSetting("SignOn", "UserInfo", "PostNr")
    sPostNrPrivate = GetSetting("SignOn", "UserInfo", "PostNrPrivate")
    sServicelocation = GetSetting("SignOn", "UserInfo", "Servicelocation")
    sSupervisor = GetSetting("SignOn", "UserInfo", "Supervisor")
    sVATNr = GetSetting("SignOn", "UserInfo", "VATNr")
    sWebPage = GetSetting("SignOn", "UserInfo", "WebPage")
    sVisitingaddress = GetSetting("SignOn", "UserInfo", "Visitingaddress")
    sVisitingaddress2 = GetSetting("SignOn", "UserInfo", "Visitingaddress2")
    sTitle = GetSetting("SignOn", "UserInfo", "Title")
    sEmpNumber = GetSetting("SignOn", "UserInfo", "EmployeeNumber")
    
    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "UserRegSettings.Class_Initialize()"
    oError.Situation = sSituation
    oError.Show
End Sub
Attribute VB_Name = "WebHTTP"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Private hInternetSession As Long
Private hInternetConnect As Long
Private hHttpOpenRequest As Long
Private sUrl As String
Private sFileURL As String
Private sFileName As String
Private sBody As String
Private sHeaderFields As String
Private sHTTPStatus As String
Private sStatusCode As String
Private sResponseHeader As String
Private sContentType As String
Private nContentLength As Long
Private sStatus As String
Private bConnected As Boolean
Private bInetError As Boolean

Option Explicit

Property Let URL(FullUrl As String)
    Dim nPos As Long
    Dim sFile As String
    
    nPos = InStr(FullUrl, "/")
    
    If nPos > 0 Then
        sUrl = Left(FullUrl, nPos - 1)
        sFile = Mid(FullUrl, nPos)
        If Len(sFile) = 1 And sFile = "/" Then
            sFileURL = ""
        Else
            sFileURL = sFile
        End If
    Else
        sUrl = FullUrl
        sFileURL = ""
    End If
    
End Property

Property Let SaveToFile(ByVal sFullFileName As String)
    sFileName = sFullFileName
End Property

Property Get ResponseBody() As String
    ResponseBody = sBody
End Property

Property Get HTTPStatus() As String
    HTTPStatus = sHTTPStatus
End Property

Property Get StatusCode() As String
    StatusCode = sStatusCode
End Property

Property Get ContentType() As String
    ContentType = sContentType
End Property

Property Get ContentLength() As Long
    ContentLength = nContentLength
End Property

Property Get Connected() As Boolean
    Connected = bConnected
End Property

Property Get InetStatus() As String
    InetStatus = sStatus
End Property

Property Get InetError() As Boolean
    InetError = bInetError
End Property
Property Get ResponseHeader() As String
    ResponseHeader = sResponseHeader
End Property

Public Sub AddHeaderField(ByVal FieldName As String, ByVal Value As String)
                    
    sHeaderFields = FieldName & ": " & Value & vbCrLf
    
End Sub

Public Sub Send()
    Dim iRetVal     As Integer
    Dim sBuffer     As String * 1024
    Dim lBufferLen  As Long
    Dim lLength     As Long
    Dim vDllVersion As tWinInetDLLVersion
    
    lBufferLen = Len(sBuffer)
    
    If CBool(hInternetSession) Then
        hInternetConnect = InternetConnect(hInternetSession, sUrl, _
                                INTERNET_DEFAULT_HTTP_PORT, _
                                vbNullString, vbNullString, INTERNET_SERVICE_HTTP, _
                                0, 0)
        If hInternetConnect > 0 Then
            hHttpOpenRequest = HttpOpenRequest(hInternetConnect, "GET", sFileURL, "HTTP/1.1", _
                                vbNullString, 0, INTERNET_FLAG_RELOAD, 0)
            If CBool(hHttpOpenRequest) Then
                If sHeaderFields <> "" Then
                    lLength = Len(sHeaderFields)
                    iRetVal = HttpAddRequestHeaders(hHttpOpenRequest, sHeaderFields, _
                            lLength, HTTP_ADDREQ_FLAG_ADD Or HTTP_ADDREQ_FLAG_REPLACE)
                    sHeaderFields = ""  ' Time to clear this variable
                End If

                iRetVal = HttpSendRequest(hHttpOpenRequest, vbNullString, 0, 0, 0)
                If iRetVal Then
                    sContentType = GetInfo(hHttpOpenRequest, _
                                        HTTP_QUERY_CONTENT_TYPE)
                    nContentLength = Val(GetInfo(hHttpOpenRequest, _
                                            HTTP_QUERY_CONTENT_LENGTH))
                    sStatusCode = GetInfo(hHttpOpenRequest, HTTP_QUERY_STATUS_CODE)
                    sHTTPStatus = GetInfo(hHttpOpenRequest, HTTP_QUERY_STATUS_TEXT)
                    sResponseHeader = GetInfo(hHttpOpenRequest, HTTP_QUERY_RAW_HEADERS_CRLF)
                    If sFileName = "" Then
                        GetBody
                    Else
                        SaveBody
                    End If
                Else
                        ' HttpSendRequest failed
                    sStatus = "HttpSendRequest call failed; Error code: " & Err.LastDllError & "."
                    bInetError = True
                End If
            Else
                    ' HttpOpenRequest failed
                sStatus = "HttpOpenRequest call failed; Error code: " & Err.LastDllError & "."
                bInetError = True
            End If
            InternetCloseHandle hInternetConnect    ' Done, close the handle
        Else
            ' InternetConnect failed
            sStatus = "InternetConnect call failed; Error code: " & Err.LastDllError & "."
            bInetError = True
        End If
    Else
        ' hInternetSession handle not allocated
        sStatus = "InternetOpen call failed: Error code: " & Err.LastDllError & "."
        bInetError = True
    End If
End Sub

Private Sub GetBody()
    Dim bDoLoop             As Boolean
    Dim sReadBuffer         As String * 2048
    Dim lNumberOfBytesRead  As Long
    Dim sBuffer             As String
    
    On Error Resume Next
    
    bDoLoop = True
    
    While bDoLoop
        sReadBuffer = vbNullString
        bDoLoop = InternetReadFile(hHttpOpenRequest, sReadBuffer, _
                            Len(sReadBuffer), lNumberOfBytesRead)
        sBuffer = sBuffer & Left$(sReadBuffer, lNumberOfBytesRead)
        If Not CBool(lNumberOfBytesRead) Then bDoLoop = False
    Wend
    
    sBody = sBuffer
    
End Sub

Private Sub SaveBody()
    Dim oFS As Scripting.FileSystemObject
    Dim oFile As Scripting.TextStream
    Dim bDoLoop             As Boolean
    Dim sReadBuffer         As String * 2048
    Dim lNumberOfBytesRead  As Long
    Dim sBuffer             As String
    
    On Error Resume Next
    
    bDoLoop = True
    
    Set oFS = New Scripting.FileSystemObject
    Set oFile = oFS.CreateTextFile(sFileName)
    
    While bDoLoop
        sReadBuffer = vbNullString
        bDoLoop = InternetReadFile(hHttpOpenRequest, sReadBuffer, _
                            Len(sReadBuffer), lNumberOfBytesRead)
        oFile.Write Left(sReadBuffer, lNumberOfBytesRead)
        If Not CBool(lNumberOfBytesRead) Then bDoLoop = False
    Wend
    
    oFile.Close
    
    sFileName = "" ' Class variable
        
End Sub


Private Function GetInfo(ByVal hHttpRequest As Long, ByVal iInfoLevel As Long) As String
    Dim sBuffer         As String * 1024
    Dim lBufferLength   As Long
    
    lBufferLength = Len(sBuffer)
    GetInfo = CBool(HttpQueryInfo(hHttpRequest, iInfoLevel, _
                ByVal sBuffer, lBufferLength, 0))
    
    GetInfo = sBuffer
    
End Function

Private Sub Class_Initialize()

    hInternetSession = InternetOpen(scUserAgent, INTERNET_OPEN_TYPE_PRECONFIG, _
            vbNullString, vbNullString, 0)
    
    If CBool(hInternetSession) Then
        bConnected = True
        sStatus = ""
    Else
        sStatus = "InternetOpen call failed: Error code: " & Err.LastDllError & "."
    End If
    
End Sub

Private Sub Class_Terminate()
    If hInternetSession > 0 Then
        InternetCloseHandle hInternetSession
    End If
End Sub
Attribute VB_Name = "WinInetAPI"
Option Explicit

    ' Initializes an application's use of the Win32 Internet functions
Public Declare Function InternetOpen Lib "wininet.dll" Alias "InternetOpenA" _
    (ByVal sAgent As String, ByVal lAccessType As Long, ByVal sProxyName As String, _
    ByVal sProxyBypass As String, ByVal lFlags As Long) As Long

    ' Opens a session for a given site.
Public Declare Function InternetConnect Lib "wininet.dll" Alias "InternetConnectA" _
    (ByVal hInternetSession As Long, ByVal sServerName As String, _
    ByVal nServerPort As Integer, ByVal sUserName As String, _
    ByVal sPassword As String, ByVal lService As Long, _
    ByVal lFlags As Long, ByVal lContext As Long) As Long

    ' Queries an Internet option on the specified handle
Public Declare Function InternetQueryOption Lib "wininet.dll" Alias "InternetQueryOptionA" _
    (ByVal hInternet As Long, ByVal lOption As Long, ByRef sBuffer As Any, _
    ByRef lBufferLength As Long) As Integer
    
Public Declare Function InternetGetLastResponseInfo Lib "wininet.dll" Alias "InternetGetLastResponseInfoA" _
    (lpdwError As Long, ByVal lpszBuffer As String, lpdwBufferLength As Long) As Boolean

    ' Returns the version number of Wininet.dll.
Public Const INTERNET_OPTION_VERSION = 40

    ' Contains the version number of the DLL that contains the Windows Internet
    ' functions (Wininet.dll). This structure is used when passing the
    ' INTERNET_OPTION_VERSION flag to the InternetQueryOption function.
Public Type tWinInetDLLVersion
    lMajorVersion As Long
    lMinorVersion As Long
End Type

    ' Brings the data across the wire even if it locally cached.
Public Const INTERNET_FLAG_RELOAD = &H80000000

    ' User agent constant.
Public Const scUserAgent = "MSIE"

    ' Use registry access settings.
Public Const INTERNET_OPEN_TYPE_PRECONFIG = 0

    ' Number of the TCP/IP port on the server to connect to.
Public Const INTERNET_DEFAULT_FTP_PORT = 21
Public Const INTERNET_DEFAULT_GOPHER_PORT = 70
Public Const INTERNET_DEFAULT_HTTP_PORT = 80
Public Const INTERNET_DEFAULT_HTTPS_PORT = 443
Public Const INTERNET_DEFAULT_SOCKS_PORT = 1080

    ' Type of service to access.
Public Const INTERNET_SERVICE_FTP = 1
Public Const INTERNET_SERVICE_GOPHER = 2
Public Const INTERNET_SERVICE_HTTP = 3
Public Const INTERNET_FLAG_PASSIVE = &H8000000            ' used for FTP connections


'***************************
'* FTP
'***************************
Public Const FTP_TRANSFER_TYPE_UNKNOWN = &H0
Public Const FTP_TRANSFER_TYPE_ASCII = &H1
Public Const FTP_TRANSFER_TYPE_BINARY = &H2


Public Declare Function FtpGetFile Lib "wininet.dll" Alias "FtpGetFileA" _
(ByVal hConnect As Long, ByVal lpszRemoteFile As String, ByVal lpszNewFile As String, _
    ByVal fFailIfExists As Long, ByVal dwFlagsAndAttributes As Long, ByVal dwFlags As Long, _
    ByRef dwContext As Long) As Boolean

Public Declare Function FtpPutFile Lib "wininet.dll" Alias "FtpPutFileA" _
    (ByVal hConnect As Long, ByVal lpszLocalFile As String, _
    ByVal lpszNewRemoteFile As String, ByVal dwFlags As Long, _
    ByVal dwContext As Long) As Boolean

'***************************
'* HTTP
'***************************
    ' Opens an HTTP request handle.
Public Declare Function HttpOpenRequest Lib "wininet.dll" Alias "HttpOpenRequestA" _
(ByVal hHttpSession As Long, ByVal sVerb As String, ByVal sObjectName As String, ByVal sVersion As String, _
ByVal sReferer As String, ByVal something As Long, ByVal lFlags As Long, ByVal lContext As Long) As Long

    ' Sends the specified request to the HTTP server.
Public Declare Function HttpSendRequest Lib "wininet.dll" Alias "HttpSendRequestA" (ByVal _
hHttpRequest As Long, ByVal sHeaders As String, ByVal lHeadersLength As Long, sOptional As _
Any, ByVal lOptionalLength As Long) As Integer

    ' Queries for information about an HTTP request.
Public Declare Function HttpQueryInfo Lib "wininet.dll" Alias "HttpQueryInfoA" _
(ByVal hHttpRequest As Long, ByVal lInfoLevel As Long, ByRef sBuffer As Any, _
ByRef lBufferLength As Long, ByRef lIndex As Long) As Integer

' The possible values for the lInfoLevel parameter include:
Public Const HTTP_QUERY_CONTENT_TYPE = 1
Public Const HTTP_QUERY_CONTENT_LENGTH = 5
Public Const HTTP_QUERY_EXPIRES = 10
Public Const HTTP_QUERY_LAST_MODIFIED = 11
Public Const HTTP_QUERY_PRAGMA = 17
Public Const HTTP_QUERY_VERSION = 18
Public Const HTTP_QUERY_STATUS_CODE = 19
Public Const HTTP_QUERY_STATUS_TEXT = 20
Public Const HTTP_QUERY_RAW_HEADERS = 21
Public Const HTTP_QUERY_RAW_HEADERS_CRLF = 22
Public Const HTTP_QUERY_FORWARDED = 30
Public Const HTTP_QUERY_SERVER = 37
Public Const HTTP_QUERY_USER_AGENT = 39
Public Const HTTP_QUERY_SET_COOKIE = 43
Public Const HTTP_QUERY_REQUEST_METHOD = 45

    ' Add this flag to the about flags to get request header.
Public Const HTTP_QUERY_FLAG_REQUEST_HEADERS = &H80000000

    ' Reads data from a handle opened by the HttpOpenRequest function.
Public Declare Function InternetReadFile Lib "wininet.dll" _
(ByVal hFile As Long, ByVal sBuffer As String, ByVal lNumBytesToRead As Long, _
lNumberOfBytesRead As Long) As Integer

    ' Closes a single Internet handle or a subtree of Internet handles.
Public Declare Function InternetCloseHandle Lib "wininet.dll" _
(ByVal hInet As Long) As Integer

    ' Adds one or more HTTP request headers to the HTTP request handle.
Public Declare Function HttpAddRequestHeaders Lib "wininet.dll" Alias "HttpAddRequestHeadersA" _
(ByVal hHttpRequest As Long, ByVal sHeaders As String, ByVal lHeadersLength As Long, _
ByVal lModifiers As Long) As Integer

    ' Adds the header only if it does not already exist; otherwise, an error is returned.
Public Const HTTP_ADDREQ_FLAG_ADD_IF_NEW = &H10000000

    ' Adds the header if it does not exist. Used with REPLACE.
Public Const HTTP_ADDREQ_FLAG_ADD = &H20000000

    ' Replaces or removes a header. If the header value is empty and the header is found,
    ' it is removed. If not empty, the header value is replaced
Public Const HTTP_ADDREQ_FLAG_REPLACE = &H80000000
Attribute VB_Name = "frmEditHeader"
Attribute VB_Base = "0{EC1B8E96-63FF-4791-B361-CCD37951FD21}{69DFA9FA-6E37-4B2E-8BDC-527F9580E2D3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




'
'
'
'   Project:        Norrk|fffd|pings Kommun
'   Customer:
'   Form Name:      frmEditHeader
'
'   Created:        2003-02-21  Lars-Eric Gissl|fffd|n
'   Last Modified:  xxxx-xx-xx
'
'   Description:
'
Dim aDivisions As Variant

Option Explicit

Private Sub cmdOK_Click()
    
    FillDocument

    Unload Me
End Sub
Private Sub cmdCancel_Click()
    Unload Me
End Sub
Private Sub UserForm_Initialize()
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim oStory As Range

    On Error GoTo ErrorHandler
    
    aDivisions = Adresser.GetAddressArray()
    
    FillDivisionCombo
    
    Me.txtDate.Text = GetCustDocProperty("Date")
    Me.txtDiarieNr.Text = GetCustDocProperty("DiarieNr")
    Me.txtDepartment.Text = GetCustDocProperty("Enhet")
    Me.txtDocName.Text = GetCustDocProperty("DocName")
    Me.chkUtkast.Value = GetCustDocProperty("Utkast")
    If Trim(Me.txtDiarieNr.Text) = "" Then
        SetCustDocProperty "DiarieText", " "
    Else
        SetCustDocProperty "DiarieText", "V|fffd|rt diarienummer"
    End If
    
    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmEditHeader.UserForm_Initialize()"
    oError.Situation = sSituation
    oError.Show
End Sub

Private Sub chkChangeLogo_Click()
    If Me.chkChangeLogo.Value Then
        Me.cboDivision.Enabled = True
    Else
        Me.cboDivision.Enabled = False
    End If
End Sub

Private Sub FillDivisionCombo()
    Dim sVal As String
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim nElements As Long
    Dim sTxt As String
    Dim i As Long
        
    On Error GoTo ErrorHandler
    
    nElements = Adresser.AE_MAX
    
    sSituation = "Filling division combobox box"
    For i = 0 To nElements
        Me.cboDivision.AddItem CStr(aDivisions(i)(Adresser.AE_DEP))
    Next
    
    On Error Resume Next
    sTxt = CustDocProp.GetCustDocProperty("SelectedForvaltning")
    If Trim(sTxt) = "" Then
        Me.cboDivision.Text = "Norrk|fffd|pings kommun"
    Else
        Me.cboDivision.Text = sTxt
    End If
    'Me.cboDivision.ListIndex = 0
    
    Exit Sub
    
ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmEditHeader.FillDivisionCombo()"
    oError.Situation = sSituation
    oError.Show
End Sub
Private Sub FillDocument()
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim nItem As Long

    On Error GoTo ErrorHandler
    
    nItem = Me.cboDivision.ListIndex

    SetCustDocProperty "Date", Me.txtDate.Text
    SetCustDocProperty "DiarieNr", Me.txtDiarieNr.Text
    SetCustDocProperty "Enhet", Me.txtDepartment.Text
    SetCustDocProperty "Forvaltning", aDivisions(nItem)(AE_DISPNAME) 'Me.cboDivision.Text
    SetCustDocProperty "SelectedForvaltning", Me.cboDivision.Text
    SetCustDocProperty "DocName", UCase(Me.txtDocName.Text)
    
    If Trim(Me.txtDiarieNr.Text) = "" Then
        SetCustDocProperty "DiarieText", " "
    Else
        SetCustDocProperty "DiarieText", "V|fffd|rt diarienummer"
    End If
    
    If Me.chkChangeLogo.Value Then
        SetCustDocProperty "Forvaltning", aDivisions(nItem)(AE_DISPNAME) 'Me.cboDivision.Text
        SetCustDocProperty "SelectedForvaltning", Me.cboDivision.Text
    End If
    
    UpdateHeader
    
    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmEditHeader.FillDocument"
    oError.Situation = sSituation
    oError.Show

End Sub

Private Sub UpdateHeader()
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim sBM As String
    Dim sFileName As String
    Dim sUrl As String
    Dim sLogoFile As String
    Dim nItem As Long
    Dim oSec As Section
    Dim oHeader As HeaderFooter
    Dim nType As Long
    Dim bLogoExist As Boolean
    Dim headerRange As Range
    

    On Error GoTo ErrorHandler
    
    sBM = "BMTemp"
    
    ActiveDocument.Bookmarks.Add sBM, Selection.Range
    Selection.GoTo what:=wdGoToPage, Which:=wdGoToAbsolute, Count:=1
    
    Application.ScreenUpdating = False
    
    sSituation = "Switching to PageView"
    If ActiveWindow.View.SplitSpecial <> wdPaneNone Then
        ActiveWindow.Panes(2).Close
    End If
    If ActiveWindow.ActivePane.View.Type = wdNormalView Or ActiveWindow. _
        ActivePane.View.Type = wdOutlineView Or ActiveWindow.ActivePane.View.Type _
         = wdMasterView Then
        ActiveWindow.ActivePane.View.Type = wdPageView
    End If
    
    sSituation = "Switching to Header"
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    Selection.WholeStory
    Set headerRange = Selection.Range
    
    sSituation = "Updating Page header"
    
    If Me.chkUtkast.Value Then
        ActiveDocument.Bookmarks("BMUtkast").Range.Text = "Utkast"
    Else
'        ActiveDocument.Bookmarks("BMUtkast").Range.Text = "|fffd|"
                headerRange.Tables(1).Cell(2, 2).Select
                Selection.Delete
    End If
    SetCustDocProperty "Utkast", Me.chkUtkast.Value
    
    If Me.chkChangeLogo.Value Then
        sFileName = GetUniqueFilename.GetUniqueFilename
        nItem = Me.cboDivision.ListIndex
        If aDivisions(nItem)(AE_LOGO) <> "" Then
            sUrl = LogoWebPath & aDivisions(nItem)(AE_LOGO)
            System.Cursor = wdCursorWait
            bLogoExist = GetLogotype(sUrl, sFileName)
            System.Cursor = wdCursorNormal
            If bLogoExist Then
                sSituation = "Replacing logo"
                
                'headerRange.Tables(1).Cell(1, 1).Select
                headerRange.Tables(1).Tables(1).Cell(1, 1).Select
                Selection.Delete
                
                InsertLogotype sFileName
                
'                Selection.InlineShapes.AddPicture FileName:= _
'                    sFileName, LinkToFile:=False, SaveWithDocument:=True
                'With Selection.Tables(1).Table(1).Cell(1, 1).Range.InlineShapes(1)
                    '.ScaleHeight = 21.2
                    '.ScaleWidth = 21.8
                    '.Range.Tables(1).Columns(1).AutoFit
                'End With
                On Error Resume Next
                Kill sFileName
                On Error GoTo ErrorHandler
            End If
        End If
        'ActiveDocument.FormFields("FFEnhet").Result = Me.cboDivision.Text
    End If
    
    Selection.WholeStory
    Selection.Fields.Update

    If Me.chkChangeLogo.Value Then
            ' Update address info in footer
        SetFooter
    End If

    sSituation = "Switching main document"
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    sSituation = ""
    
    For Each oSec In ActiveDocument.Sections
        For Each oHeader In oSec.Headers
            oHeader.Range.Fields.Update
        Next
    Next
    
    
'    For Each oStory In ActiveDocument.StoryRanges
'        nType = oStory.StoryType
'        If nType = wdEvenPagesHeaderStory Or _
'            nType = wdFirstPageHeaderStory Or _
'            nType = wdPrimaryHeaderStory Then
'            ActiveDocument.StoryRanges(nType).Fields.Update
'        End If
'    Next
    
    ActiveDocument.Bookmarks(sBM).Select
    ActiveDocument.Bookmarks(sBM).Delete
    Application.ScreenUpdating = True
    
    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmEditHeader.FillDocument"
    oError.Situation = sSituation
    oError.Show
End Sub

Private Sub SetFooter()
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim nRow As Long
    Dim sTxt As String
    Dim nItem As Long

    sSituation = "Moving to footer"
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
    
    sSituation = "Getting index from Listbox"
    nItem = Me.cboDivision.ListIndex
    
    With Selection.Tables(1)
        sSituation = "Updating table cells"
        nRow = 4
        sTxt = aDivisions(Me.cboDivision.ListIndex)(AE_DISPNAME)
        If Trim(sTxt) <> "" Then
            .Cell(nRow, 1).Range.Text = sTxt
            nRow = nRow + 1
        End If
        If Trim(aDivisions(nItem)(AE_ADDRESS)) <> "" Then
            .Cell(nRow, 1).Range.Text = aDivisions(nItem)(AE_ADDRESS)
            nRow = nRow + 1
            .Cell(nRow, 1).Range.Text = aDivisions(nItem)(AE_POSTADR)
        Else
            .Cell(nRow, 1).Range.Text = aDivisions(nItem)(AE_POSTADR)
        End If
        
        .Cell(nRow + 1, 1).Range.Text = ""
        
        .Cell(3, 2).Range.Text = aDivisions(nItem)(AE_VISIT) 'Me.txtVisit1.Text
        .Cell(4, 2).Range.Text = aDivisions(nItem)(AE_VISIT2) 'Me.txtVisit2.Text
        .Cell(3, 3).Range.Text = aDivisions(nItem)(AE_PHONE) 'Me.txtPhone.Text
        .Cell(4, 3).Range.Text = aDivisions(nItem)(AE_PHONE2) 'Me.txtPhoneVx.Text
        .Cell(5, 3).Range.Text = aDivisions(nItem)(AE_MOBILE) 'Me.txtMobile.Text
        .Cell(3, 4).Range.Text = aDivisions(nItem)(AE_FAX) 'Me.txtFax.Text
        .Cell(3, 5).Range.Text = aDivisions(nItem)(AE_EMAIL) 'Me.txtEMail.Text
        .Cell(5, 5).Range.Text = aDivisions(nItem)(AE_WEB) 'Me.txtInternet.Text
    End With

'    sSituation = "Filling footer controls"
'    Me.txtAddress1.Text = aDivisions(nItem)(AE_ADDRESS)
'    Me.txtPostAdr.Text = aDivisions(nItem)(AE_POSTADR)
'    Me.txtVisit1.Text = aDivisions(nItem)(AE_VISIT)
'    Me.txtVisit2.Text = aDivisions(nItem)(AE_VISIT2)
'    Me.txtPhone.Text = aDivisions(nItem)(AE_PHONE)
'    Me.txtPhoneVx.Text = aDivisions(nItem)(AE_PHONE2)
'    Me.txtFax.Text = aDivisions(nItem)(AE_FAX)
'    Me.txtEMail.Text = aDivisions(nItem)(AE_EMAIL)
'    Me.txtInternet.Text = aDivisions(nItem)(AE_WEB)

    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmEditHeader.SetFooter"
    oError.Situation = sSituation
    oError.Show
End Sub

Attribute VB_Name = "frmMain"
Attribute VB_Base = "0{C0D1E8F4-9B97-49B9-AA4B-A47B216169AF}{6A29C8F1-46CA-4D2D-9F78-086CFAAF6F3A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



'
'
'
'   Project:
'   Customer:       Norrk|fffd|pings kommun
'   Form Name:      frmMain
'
'   Created:        2002-10-29  Lars-Eric Gissl|fffd|n
'   Last Modified:  2004-06-29  Joakim Molin
'                       Added Mobilenumber.
'
'   Description:
'

Option Explicit
Dim bGetFromDocument As Boolean
Dim bInitializing As Boolean
Dim aDivisions As Variant

Private Sub cboDivision_Change()
    If Not bInitializing Then
        UpdateFooterControls
        Me.cmdSaveName.Enabled = True
    End If
End Sub

Private Sub chkOwnFooter_Click()
    UpdateFooterControls
    Me.cmdSaveOwnFooter.Enabled = False
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    System.Cursor = wdCursorWait
    FillDocument
    System.Cursor = wdCursorNormal
    SODocVariables.SetDocVariable "Used", "Yes"
    Unload Me
End Sub

Private Sub cmdSaveName_Click()
    SetUserInfo
    Me.cmdSaveName.Enabled = False
End Sub

Private Sub cmdSaveOwnFooter_Click()

    SaveSetting "SignOn", "UserFooter", "txtAddress1", Me.txtAddress1.Text
    SaveSetting "SignOn", "UserFooter", "txtPostAdr", Me.txtPostAdr.Text
    SaveSetting "SignOn", "UserFooter", "txtVisit1", Me.txtVisit1.Text
    SaveSetting "SignOn", "UserFooter", "txtVisit2", Me.txtVisit2.Text
    SaveSetting "SignOn", "UserFooter", "txtPhone", Me.txtPhone.Text
    SaveSetting "SignOn", "UserFooter", "txtPhoneVx", Me.txtPhoneVx.Text
    SaveSetting "SignOn", "UserFooter", "txtMobile", Me.txtMobile.Text
    SaveSetting "SignOn", "UserFooter", "txtFax", Me.txtFax.Text
    SaveSetting "SignOn", "UserFooter", "txtEMail", Me.txtEMail.Text
    SaveSetting "SignOn", "UserFooter", "txtInternet", Me.txtInternet.Text
    
    Me.cmdSaveOwnFooter.Enabled = False
    
End Sub

Private Sub txtAddress1_Change()
    ToggleSaveFooterButton
End Sub

Private Sub txtDepartment_Change()
    Me.cmdSaveName.Enabled = True
End Sub

Private Sub txtDirectPhone_Change()
    Me.cmdSaveName.Enabled = True
End Sub

Private Sub txtDivision_Change()
    Me.cmdSaveName.Enabled = True
End Sub

Private Sub txtEMail_Change()
    ToggleSaveFooterButton
End Sub

Private Sub txtFax_Change()
    ToggleSaveFooterButton
End Sub

Private Sub txtFirstName_Change()
    Me.cmdSaveName.Enabled = True
End Sub

Private Sub txtInternet_Change()
    ToggleSaveFooterButton
End Sub

Private Sub txtLastName_Change()
    Me.cmdSaveName.Enabled = True
End Sub

Private Sub txtPhone_Change()
    ToggleSaveFooterButton
End Sub

Private Sub txtPhoneVx_Change()
    ToggleSaveFooterButton
End Sub
Private Sub txtMobile_Change()
    ToggleSaveFooterButton
End Sub
Private Sub txtPostAdr_Change()
    ToggleSaveFooterButton
End Sub

Private Sub txtTitle_Change()
    Me.cmdSaveName.Enabled = True
End Sub

Private Sub txtVisit1_Change()
    ToggleSaveFooterButton
End Sub

Private Sub txtVisit2_Change()
    ToggleSaveFooterButton
End Sub

Private Sub UserForm_Initialize()
    Dim oError As ErrorObject
    Dim sSituation As String

    On Error GoTo ErrorHandler
    
    sSituation = "Getting addresses"
    aDivisions = Adresser.GetAddressArray()
    sSituation = ""
    
    bInitializing = True
    FillDivisionCombo
    bInitializing = False
    
    If Not bGetFromDocument Then
        Me.txtDate.Text = Format(Now(), "yyyy-MM-dd")
        GetUserInfo
    Else
        ' Get data from document (to be implemented)
    End If
    
    Me.cmdSaveName.Enabled = False
    
    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmMain.UserForm_Initialize()"
    oError.Situation = sSituation
    oError.Show
End Sub

Private Sub GetUserInfo()
    Dim oUser As UserRegSettings
    Dim oError As ErrorObject
    Dim sSituation As String

    On Error GoTo ErrorHandler

    Set oUser = New UserRegSettings

    On Error Resume Next
    If Trim(oUser.Division) <> "" Then
        Me.cboDivision.Value = oUser.Division
        If Me.cboDivision.ListIndex < 0 Then
            Me.cboDivision.ListIndex = 0
        End If
        UpdateFooterControls
    End If
    On Error GoTo ErrorHandler
    Me.txtDepartment = oUser.Department
    Me.txtFirstName.Text = oUser.NameFirst
    Me.txtLastName.Text = oUser.NameLast
    Me.txtTitle.Text = oUser.Title
    Me.txtDirectPhone = oUser.PhoneDirect
    
    If Me.txtEMail.Text = "" Then
       ' Me.txtEMail.Text = "norrkoping.kommun@norrkoping.se"
    End If
    
    If Me.txtInternet.Text = "" Then
        Me.txtInternet.Text = "www.norrkoping.se"
    End If
    
    Set oUser = Nothing

    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmMain.GetUserInfo"
    oError.Situation = sSituation
    oError.Show

End Sub

Private Sub SetUserInfo()
    Dim oUser As UserRegSettings
    Dim oError As ErrorObject
    Dim sSituation As String

    On Error GoTo ErrorHandler

    Set oUser = New UserRegSettings

    oUser.NameFirst = Me.txtFirstName.Text
    oUser.NameLast = Me.txtLastName.Text
    oUser.Title = Me.txtTitle.Text
    oUser.PhoneDirect = Me.txtDirectPhone
    oUser.Division = Me.cboDivision.Value
    oUser.Department = Me.txtDepartment

    oUser.Save

    Set oUser = Nothing

    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmMain.SetUserInfo"
    oError.Situation = sSituation
    oError.Show

End Sub

Private Sub FillDocument()
    Dim sRecip As String
    Dim sNameTitle As String
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim sFileName As String
    Dim sUrl As String
    Dim nItem As Long
    Dim oFF As FormField
    Dim oStory As Range
    Dim nType As Long
    Dim bLogoExist As Boolean

    On Error GoTo ErrorHandler
    
    sFileName = GetUniqueFilename.GetUniqueFilename
    nItem = Me.cboDivision.ListIndex
    If nItem > -1 Then
        SetCustDocProperty "Forvaltning", aDivisions(nItem)(AE_DISPNAME) 'Me.cboDivision.Text
        If aDivisions(nItem)(AE_LOGO) <> "" Then
            sUrl = LogoWebPath & aDivisions(nItem)(AE_LOGO)
            bLogoExist = GetLogotype(sUrl, sFileName)
            If Not bLogoExist Then sFileName = ""
        End If
    End If
    
    
    sSituation = "Setting document properties"
    SetCustDocProperty "Date", Me.txtDate.Text
    SetCustDocProperty "DiarieNr", Me.txtDiarieNr.Text
    
    SetCustDocProperty "SelectedForvaltning", Me.cboDivision.Text
    SetCustDocProperty "Enhet", Me.txtDepartment.Text
    SetCustDocProperty "DocName", UCase(Me.txtDocName.Text)
    If Trim(Me.txtDiarieNr.Text) = "" Then
        SetCustDocProperty "DiarieText", " "
    Else
        SetCustDocProperty "DiarieText", "V|fffd|rt diarienummer"
    End If
    
    If Trim(Me.txtFirstName) & Trim(Me.txtLastName) = "" Then
        SetCustDocProperty "NameTitle", ""
        
        'SetCustDocProperty "Phone", "" XXX
    End If
        
    
    SetHeader sFileName
    SetFooter
    
    sSituation = "Updating fields"
    ActiveDocument.Fields.Update
    
    For Each oStory In ActiveDocument.StoryRanges
        nType = oStory.StoryType
        If nType = wdEvenPagesHeaderStory Or _
            nType = wdFirstPageHeaderStory Or _
            nType = wdPrimaryHeaderStory Then
            If oStory.Tables.Count > 0 Then
                ActiveDocument.StoryRanges(nType).Fields.Update
            End If
        End If
    Next
    
    sSituation = "Setting recipient"
    sRecip = Me.txtRecName.Text
'    If Trim(Me.txtRecAddress1) <> "" Then
'        sRecip = sRecip & Chr(11) & Me.txtRecAddress1.Text
'    End If
'    If Trim(Me.txtRecAddress2) <> "" Then
'        sRecip = sRecip & Chr(11) & Me.txtRecAddress2.Text
'    End If
'
'    sRecip = sRecip & Chr(11) & Trim(Me.txtRecPostNr) & "  " & UCase(Trim(Me.txtRecPostOrt))
    
    With ActiveDocument
        If Trim(Me.txtFirstName) & Trim(Me.txtLastName) <> "" Then
            sNameTitle = Me.txtFirstName & " " & Me.txtLastName
            If Trim(Me.txtTitle.Text) <> "" Then
                sNameTitle = sNameTitle & ", " & LCase(Me.txtTitle.Text)
            End If
            .FormFields("FFNameTitle").Result = sNameTitle
        
            If Trim(Me.txtDirectPhone.Text) <> "" Then
                .FormFields("FFDirectPhone").Result = Me.txtDirectPhone.Text
            End If
        End If
        .FormFields("FFRecipient").Result = _
                ReplaceVBA97(sRecip, vbCrLf, Chr(11))
    End With
    
    For Each oFF In ActiveDocument.FormFields
        oFF.Range.Fields.Unlink
    Next
    
    
    If ActiveDocument.Bookmarks.Exists("BMStart") Then
        ActiveDocument.Bookmarks("BMStart").Select
    End If
    
    If bLogoExist Then
        On Error Resume Next
        Kill sFileName
    End If
    
    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmMain.FillDocument()"
    oError.Situation = sSituation
    oError.Show
End Sub

Private Sub SetHeader(Optional ByVal sLogoFile As String)
    Dim sVal As String
    Dim oSec As Section
    Dim oHeader As HeaderFooter
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim headerRange As Range
    Dim newLogo As InlineShape
    'On Error GoTo ErrorHandler
    
    Application.ScreenUpdating = False
    
    sSituation = "Switching to PageView"
    If ActiveWindow.View.SplitSpecial <> wdPaneNone Then
        ActiveWindow.Panes(2).Close
    End If
    If ActiveWindow.ActivePane.View.Type = wdNormalView Or ActiveWindow. _
        ActivePane.View.Type = wdOutlineView Or ActiveWindow.ActivePane.View.Type _
         = wdMasterView Then
        ActiveWindow.ActivePane.View.Type = wdPageView
    End If
    
    sSituation = "Switching to Header"
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    Selection.WholeStory
    Set headerRange = Selection.Range
    
    If sLogoFile <> "" Then
        sSituation = "Replacing logo"
        'headerRange.Tables(1).Cell(1, 1).Select
        headerRange.Tables(1).Tables(1).Cell(1, 1).Select
        Selection.Delete
        InsertLogotype sLogoFile
'        Set newLogo = Selection.InlineShapes.AddPicture(FileName:=sLogoFile, LinkToFile:=False, SaveWithDocument:=True)
'        With newLogo
'            '.ScaleHeight = 21.2
'            '.ScaleWidth = 21.8
'            '.Range.Tables(1).Columns(1).AutoFit
'        End With
    End If
    
    If Me.chkUtkast.Value Then
        ActiveDocument.Bookmarks("BMUtkast").Range.Text = "Utkast"
    Else
        ActiveDocument.Bookmarks("BMUtkast").Range.Text = ""
    End If
    SetCustDocProperty "Utkast", Me.chkUtkast.Value
        
    sSituation = "Updating fields"
    headerRange.Tables(1).Range.Fields.Update
    'headerRange.Tables(2).Range.Fields.Update
    headerRange.Tables(1).Tables(1).Range.Fields.Update
    
    sSituation = "Switching main document"
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    sSituation = ""
    
    For Each oSec In ActiveDocument.Sections
        For Each oHeader In oSec.Headers
            oHeader.Range.Fields.Update
        Next
    Next
    
    
    Application.ScreenUpdating = True
        
    Exit Sub
    
ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmMain.SetHeader()"
    oError.Situation = sSituation
    oError.Show
End Sub

Private Sub SetFooter()
    Dim sVal As String
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim sTxt As String
    Dim nRow As Long
    
    'On Error GoTo ErrorHandler
    
    Application.ScreenUpdating = False
    
    sSituation = "Switching to PageView"
    If ActiveWindow.View.SplitSpecial <> wdPaneNone Then
        ActiveWindow.Panes(2).Close
    End If
    If ActiveWindow.ActivePane.View.Type = wdNormalView Or ActiveWindow. _
        ActivePane.View.Type = wdOutlineView Or ActiveWindow.ActivePane.View.Type _
         = wdMasterView Then
        ActiveWindow.ActivePane.View.Type = wdPageView
    End If
    
    sSituation = "Switching to Footer"
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
    
    sSituation = "Filling page footer"
    
    With Selection.Tables(1)
        nRow = 4
        sTxt = aDivisions(Me.cboDivision.ListIndex)(AE_DISPNAME)
        If Trim(sTxt) <> "" Then
            .Cell(nRow, 1).Range.Text = sTxt
            nRow = nRow + 1
        End If
        If Me.txtAddress1.Text <> "" Then
            .Cell(nRow, 1).Range.Text = Me.txtAddress1.Text
            nRow = nRow + 1
            .Cell(nRow, 1).Range.Text = Me.txtPostAdr.Text
        Else
            .Cell(nRow, 1).Range.Text = Me.txtPostAdr.Text
        End If
        .Cell(3, 2).Range.Text = Me.txtVisit1.Text
        .Cell(4, 2).Range.Text = Me.txtVisit2.Text
        .Cell(3, 3).Range.Text = Me.txtPhone.Text
        .Cell(4, 3).Range.Text = Me.txtPhoneVx.Text
        .Cell(5, 3).Range.Text = Me.txtMobile.Text
        .Cell(3, 4).Range.Text = Me.txtFax.Text
        .Cell(3, 5).Range.Text = Me.txtEMail.Text
        .Cell(5, 5).Range.Text = Me.txtInternet.Text
    End With
        
    sSituation = "Switching to main document"
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    sSituation = ""
    Application.ScreenUpdating = True
        
    Exit Sub
    
ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmMain.SetFooter()"
    oError.Situation = sSituation
    oError.Show
End Sub

Private Sub UpdateFooterControls()
    Dim nItem As Long
    Dim oError As ErrorObject
    Dim sSituation As String
    
    On Error GoTo ErrorHandler
    
    nItem = Me.cboDivision.ListIndex
    
    sSituation = "Get selected item in adress list: " & Format(nItem)
    If (nItem < 0) Or (bInitializing = True) Then Exit Sub
    
    sSituation = "Filling footer controls"
    If Me.chkOwnFooter.Value = False Then
        Me.txtAddress1.Text = aDivisions(nItem)(AE_ADDRESS)
        Me.txtPostAdr.Text = aDivisions(nItem)(AE_POSTADR)
        Me.txtVisit1.Text = aDivisions(nItem)(AE_VISIT)
        Me.txtVisit2.Text = aDivisions(nItem)(AE_VISIT2)
        Me.txtPhone.Text = aDivisions(nItem)(AE_PHONE)
        Me.txtPhoneVx.Text = aDivisions(nItem)(AE_PHONE2)
        Me.txtMobile.Text = aDivisions(nItem)(AE_MOBILE)
        Me.txtFax.Text = aDivisions(nItem)(AE_FAX)
        Me.txtEMail.Text = aDivisions(nItem)(AE_EMAIL)
        Me.txtInternet.Text = aDivisions(nItem)(AE_WEB)
    Else
        Me.txtAddress1.Text = GetSetting("SignOn", "UserFooter", "txtAddress1")
        Me.txtPostAdr.Text = GetSetting("SignOn", "UserFooter", "txtPostAdr")
        Me.txtVisit1.Text = GetSetting("SignOn", "UserFooter", "txtVisit1")
        Me.txtVisit2.Text = GetSetting("SignOn", "UserFooter", "txtVisit2")
        Me.txtPhone.Text = GetSetting("SignOn", "UserFooter", "txtPhone")
        Me.txtPhoneVx.Text = GetSetting("SignOn", "UserFooter", "txtPhoneVx")
        Me.txtMobile.Text = GetSetting("SignOn", "UserFooter", "txtMobile")
        Me.txtFax.Text = GetSetting("SignOn", "UserFooter", "txtFax")
        Me.txtEMail.Text = GetSetting("SignOn", "UserFooter", "txtEMail")
        Me.txtInternet.Text = GetSetting("SignOn", "UserFooter", "txtInternet")
    End If
    Exit Sub
    
ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmMain.SetFooter()"
    oError.Situation = sSituation
    oError.Show
End Sub

Private Sub FillDivisionCombo()
    Dim sVal As String
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim nElements As Long
    Dim i As Long
        
    'On Error GoTo ErrorHandler
    
    nElements = Adresser.AE_MAX
    
    sSituation = "Filling division combobox box"
    For i = 0 To nElements
        Me.cboDivision.AddItem CStr(aDivisions(i)(Adresser.AE_DEP))
    Next
    
    Me.cboDivision.ListIndex = 0
    
    Exit Sub
    
ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmMain.FillDivisionCombo()"
    oError.Situation = sSituation
    oError.Show
End Sub

Private Sub ToggleSaveFooterButton()
    
    If Me.chkOwnFooter.Value = False Then
        Exit Sub
    Else
        Me.cmdSaveOwnFooter.Enabled = True
    End If

End Sub
Attribute VB_Name = "frmViewFras"
Attribute VB_Base = "0{48B18350-8F6B-4735-AB88-4F95A88E83B1}{1AD4359D-D104-450F-9184-08F921544842}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



'
'
'
'   Project:
'   Customer:       Norrk|fffd|pings kommun
'   Form Name:      frmViewFras
'
'   Created:        2004-02-11  Lars-Eric Gissl|fffd|n
'   Last Modified:  xxxx-xx-xx
'
'   Description:
'

Option Explicit
Dim oDefDoc As Document
Dim oFrasDoc As Document
Dim bFillingCbo As Boolean


Private Sub cboKategori_Change()
    
    If bFillingCbo Then Exit Sub
    
    FillListbox
End Sub

Private Sub cmdOK_Click()

    FillDocument

    KillFrasDoc
    Unload Me
End Sub
Private Sub cmdCancel_Click()
    KillFrasDoc
    Unload Me
End Sub

Private Sub lbFrasList_Click()
    Dim sText As String
    
    sText = oFrasDoc.Tables(Me.cboKategori.ListIndex + 1).Cell(Me.lbFrasList.ListIndex + 2, 2).Range.Text
    Me.txtFras.Text = Left(sText, Len(sText) - 2)
End Sub

Private Sub UserForm_Initialize()
    Dim oError As ErrorObject
    Dim sSituation As String

    On Error GoTo ErrorHandler
    
    Application.ScreenUpdating = False
    Set oDefDoc = ActiveDocument
    Set oFrasDoc = Documents.Open(sFrasDoc)
    oDefDoc.Activate
    
    LoadKategories
    'FillListbox

    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmViewFras.UserForm_Initialize()"
    oError.Situation = sSituation
    oError.Show
End Sub

Private Sub FillDocument()
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim sText As String
    Dim nReply As Long

    On Error GoTo ErrorHandler
    
    oDefDoc.Activate
    
    If Selection.Information(wdWithInTable) Then
        nReply = MsgBox("Du infogar texten i en tabellcell." & vbCr _
                         & "Texten kan inte infogas formaterad i en tab" _
                         & "ellcell utan enbart som ren text" & vbCr & vbCr _
                         & "Vill du forts|fffd|tta?", vbQuestion + vbYesNo, "Infoga fras")
        If nReply = vbYes Then
            sText = oFrasDoc.Tables(1).Cell(Me.lbFrasList.ListIndex + 2, 2).Range.Text
            Selection.TypeText Left(sText, Len(sText) - 2)
        End If
    Else
        oFrasDoc.Tables(Me.cboKategori.ListIndex + 1).Cell(Me.lbFrasList.ListIndex + 2, 2).Range.Copy
        Selection.Paste
        Selection.MoveUp
        Selection.Tables(1).ConvertToText
    End If

    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmViewFras.FillDocument"
    oError.Situation = sSituation
    oError.Show

End Sub

Private Sub KillFrasDoc()
 
    Dim oError As ErrorObject
    Dim sSituation As String

    On Error GoTo ErrorHandler

    If Not oFrasDoc Is Nothing Then
        sSituation = "St|fffd|nger Frasdokument"
        oFrasDoc.Close SaveChanges:=wdDoNotSaveChanges
        Set oFrasDoc = Nothing
        sSituation = "Aktiverar dokumentet"
        oDefDoc.Activate
    End If
    

    Exit Sub

' Error handling block added by Error Handler Add-In. DO NOT EDIT this block of code.
' Automatic error handler last updated at 02-12-2004 11:16:22   'ErrorHandler:$$D=02-12-2004    'ErrorHandler:$$T=11:16:22
ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmViewFras.KillFrasDoc"  'ErrorHandler:$$N=frmViewFras.KillFrasDoc
    oError.Situation = sSituation
    oError.Show
' End Error handling block.
End Sub

Private Sub UserForm_Terminate()
    If Not oFrasDoc Is Nothing Then
        KillFrasDoc
    End If
End Sub

Private Sub FillListbox()
    Dim nRows As Long
    Dim i As Long
    Dim sText As String
     
    Dim oError As ErrorObject
    Dim sSituation As String

    On Error GoTo ErrorHandler

    With oFrasDoc.Tables(Me.cboKategori.ListIndex + 1)
        nRows = .Rows.Count
        sSituation = "H|fffd|mtar ledtext till fraser (" & Format(nRows - 1) & " fraser)"
        Me.lbFrasList.Clear
        For i = 2 To nRows
            Me.lbFrasList.AddItem SOPrintableString.PrintableString(.Cell(i, 1).Range.Text)
        Next
    End With
    
    If nRows > 1 Then
        sSituation = "Markerar f|fffd|rsta frasen"
        Me.lbFrasList.ListIndex = 0
    End If
            

    Exit Sub

' Error handling block added by Error Handler Add-In. DO NOT EDIT this block of code.
' Automatic error handler last updated at 02-12-2004 11:18:47   'ErrorHandler:$$D=02-12-2004    'ErrorHandler:$$T=11:18:47
ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmViewFras.FillListbox"  'ErrorHandler:$$N=frmViewFras.FillListbox
    oError.Situation = sSituation
    oError.Show
' End Error handling block.
End Sub

Private Sub LoadKategories()
    Dim oError As ErrorObject
    Dim sSituation As String
    Dim oTbl As Table

    On Error GoTo ErrorHandler

    bFillingCbo = True
    
    For Each oTbl In oFrasDoc.Tables
        Me.cboKategori.AddItem SOPrintableString.PrintableString(oTbl.Cell(1, 1).Range.Text)
    Next
    
    bFillingCbo = False

    Exit Sub

ErrorHandler:
    Set oError = New ErrorObject
    oError.UseVBErrObject
    oError.MacroName = "frmViewFras.LoadKategories"  'ErrorHandler:$$N=frmViewFras.KillFrasDoc
    oError.Situation = sSituation
    oError.Show
End Sub


' InQuest injected base64 decoded content
' ezKb
' ~)'ji

INQUEST-PP=macro
