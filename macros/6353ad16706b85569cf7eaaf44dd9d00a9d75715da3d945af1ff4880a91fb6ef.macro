Attribute VB_Name = "Module1"
'This is a macro which is called on clicking paste and ctrl -v
'It paste only contents. Format of the cell is not copied

'Function modified for PR 9871
Sub PasteJustValue()
On Error GoTo label  'its called when nothing is in the buffer (nothing is copied)

Dim col As Integer
Dim row As Integer

col = ActiveCell.Column
row = ActiveCell.row

'Paste values only in unlocked cells.
If Cells(row, col).Locked = False Then
Selection.PasteSpecial Paste:=xlValues
End If
Application.CutCopyMode = False

label:
End Sub

'Function modified for PR 9871, Modified for DTS 7590(Husna)
Sub DisablePaste()
    Dim ctrl As CommandBarControl
    Dim cbar As Integer
    
    On Error Resume Next
    For cbar = 1 To Application.CommandBars.count
       For Each ctrl In Application.CommandBars("Worksheet Menu Bar").Controls
               
          Application.CommandBars("Worksheet Menu Bar").FindControl(ID:=21, Recursive:=True).Enabled = False
          Application.CommandBars("Worksheet Menu Bar").FindControl(ID:=22, Recursive:=True).OnAction = "PasteJustValue"
          Application.CommandBars("Worksheet Menu Bar").FindControl(ID:=755, Recursive:=True).Enabled = False
          Application.CommandBars("Worksheet Menu Bar").FindControl(ID:=925, Recursive:=True).Enabled = False
          Application.CommandBars("Worksheet Menu Bar").FindControl(ID:=443, Recursive:=True).Enabled = False
                         
       Next ctrl
    Next cbar
    'Code moved to function Disable cut (DTS 7590), Husna
End Sub

'PR 9871 - Function added to reset all toolbars when the sheet is deactivated.
Sub ResetAllToolbars()
    For Each tb In CommandBars
        If tb.BuiltIn Then tb.Reset
    Next tb
    Application.CellDragAndDrop = True
End Sub


Sub DisablePasteOld()
'Cut copy through edit command are disabled
Application.CommandBars("Edit").Controls.Item("Cut").Enabled = False
Application.CommandBars("Edit").Controls.Item("Copy").Enabled = True

'Paste calls the function to paste only values
Application.CommandBars("Edit").Controls.Item("Paste").OnAction = "PasteJustValue"

'Disabled buttons
Application.CommandBars("Edit").Controls.Item("Paste Special...").Enabled = False
Application.CommandBars("Edit").Controls.Item("Paste as Hyperlink").Enabled = False
Application.CommandBars("Cell").Enabled = True
Application.CommandBars("Cell").Controls.Item("Paste Special...").Enabled = False
Application.CommandBars("Cell").Controls.Item("Cut").Enabled = False
On Error GoTo label2
Application.CommandBars("View").Controls.Item("Zoom...").Enabled = False

'macro assigned for Ctrl v
Application.OnKey "^{v}", "PasteJustValue"

label2:

End Sub
'Added for DTS 7590 , this will disable the cut and Paste Special option for right click.Disables ctrl+x option and also when ctrl+c is done only the values are pasted(Husna)
Sub DisableOptions()
Application.OnKey "^{v}", "PasteJustValue"
Application.OnKey "^{x}", ""
Application.CommandBars("Cell").FindControl(ID:=21, Recursive:=True).Enabled = False
'Application.CommandBars("Cell").FindControl(ID:=755, Recursive:=True).Enabled = False

End Sub
'Added for DTS 7590, this will reset the menu settings, enable cut and Paste special for Right click and also Ctrl+X option (Husna)
Sub enableOptions()
Application.CommandBars("Worksheet Menu Bar").Enabled = True
Application.CommandBars("Worksheet Menu Bar").Reset
Application.OnKey "^{v}"
Application.OnKey "^{x}"
End Sub





Attribute VB_Name = "Module10"
Attribute VB_Name = "Module2"
Attribute VB_Name = "Module3"
Attribute VB_Name = "Module4"
Attribute VB_Name = "Module5"
Attribute VB_Name = "Module6"
Attribute VB_Name = "Module7"
Attribute VB_Name = "Module8"
Attribute VB_Name = "Module9"
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'CR 17945
'Author: Akshay / Naveen
'Color code for yellow &H99FFFF,grayed out field &H969696, light grey &HE8E8E8 &HE0E0E0

'1> PR 9625 - Code for column autofit was moved from worksheet_selectionchange event
'to worksheet_change event. ValidationPriority method is called twice in
'worksheet_change event instead of calling it in doValidate method

'2>PR 9584 - Weight and Volume fields are changed to text fields.

'3>PR 9663 - weightValidation, VolumeValidation, uld1weightValidation, uld2WeightValidation,
'uld2weightValidation, uld2VolumeValidation functions modified to display proper
'error messages

'4.PR 9729. Formattiong of cell C74 modified.

Private Sub Worksheet_Change(ByVal target As Range)
On Error GoTo ErrorLabel   'In case of any unknown runtime error

Dim firstRow As Integer
Dim lastRow As Integer
Dim mainCount As Integer
Dim endCount As Integer
Dim firstColumn As Integer
Dim rowNum As Integer
Dim startRow As Integer
Dim endRow As Integer
Dim currentRow As Integer

'startrow and endrow specifies the processable booking lines
startRow = 11  'PR 9566
endRow = 260

'Exit conditions. Validations only for D11:AL260
If target.row < startRow Or target.Column < 4 Then
    Exit Sub
End If

If target.row > endRow Or target.Column > 38 Then
    Exit Sub
End If


'MsgBox "test 1"
'If condition for multiple cell changes
If (Selection.count > 1) Then
    firstRow = target.row
    firstColumn = target.Column
    
    'Calling doValidate function to Validate each cell(one by one),in case of multiple selections
    'For loop added for PR 9571
    For countrow = 0 To Selection.Rows.count - 1
      For countcol = 0 To Selection.Columns.count - 1
      
           Call dovalidate(Cells(target.row + countrow, target.Column + countcol), True)
           If target.Column + countcol = 3 Then Exit For
           'PR 9871 - Added if condition to avoid copy paste outside the active sheet range.
           If target.Column + countcol > 38 Or target.row + countrow > endRow Then
                Exit Sub
            End If
            
      Next
    Next
    
    lastRow = target.row + countrow
    mainCount = firstRow
    endCount = lastRow
    
   'Calling ValidationPriority function to find and display the left most error message
    'for all rows copied
    Do While mainCount < endCount
        'calling the method twice (required)
        Call validationPriority(Cells(target.row - currentRow, target.Column))
        Call validationPriority(Cells(target.row - currentRow, target.Column))
        rowNum = target.row - currentRow
        mainCount = mainCount + 1
        currentRow = currentRow - 1
    Loop
    Exit Sub
End If


'Single cell changes
'Autofit. If condition to avoid the flickering of third column
If target.Column <> 3 Then
Sheet1.Columns(target.Column).EntireColumn.AutoFit
End If
Call dovalidate(target, True)
'To display the proper error message . Function is called twice (Required).
Call validationPriority(target)
Call validationPriority(target)
Exit Sub

ErrorLabel:
MsgBox "Runtime Error"
End Sub


Private Sub Worksheet_SelectionChange(ByVal target As Range)
'Column autofit
Sheet1.Columns(3).EntireColumn.AutoFit
Sheet1.Columns(target.Column).EntireColumn.AutoFit
End Sub


'This function is called each time when a modification is done in any of the fields.
'It will validate AWB number.

Private Sub awbValidation(target As Range)

Dim oCell As Range
Dim Flag As Boolean
Dim flag1 As Boolean
Dim cellcount As Integer
Dim temp As String
Dim lastDigit As String
Dim mod7Value As Integer
Dim awbMod7 As Boolean

Flag = True

'To find whether a line is blank or not other than AWB field
For Each oCell In Range(target.Offset(0, 1), target.Offset(0, 34))
If Not IsEmpty(oCell) Then
   Flag = False
   Exit For
   End If
Next

'If AWB is nothing and all other cells are also empty, all cells are restored to
'original colors
'cells 9 to 11, 15 to 17 and 28 to 32 are light grey in color, others in white.

If Flag = True And target.value = "" Then
    target.Interior.Color = vbWhite
    cellcount = 1
    Do While cellcount < 39
    If (cellcount > 8 And cellcount < 12) Or (cellcount > 14 And cellcount < 18) Or (cellcount > 27 And cellcount < 33) Then
         If target.Offset(0, cellcount).Locked = True Then target.Offset(0, cellcount).Locked = False
          target.Offset(0, cellcount).Interior.Color = &HE8E8E8
          target.Offset(0, cellcount).Locked = False
    Else
          If target.Offset(0, cellcount).Locked = True Then target.Offset(0, cellcount).Locked = False
          target.Offset(0, cellcount).Interior.Color = vbWhite
          target.Offset(0, cellcount).Locked = False
    End If
    cellcount = cellcount + 1
    Loop
    Exit Sub
End If
        
'If AWB is missing
If target.value = "" Then
    Call displayValidationError(target, "Error. AWB information missing")
    Exit Sub
End If

'AWB Format check
If Not (target.value Like "###-########[xX]" Or target.value Like "###-########") Then
    Call displayValidationError(target, "Error.AWB Format Is invalid")
    Exit Sub
End If

If Not Left(target.value, 3) Like "020" Then
    'PR 9661 Error message modified
    Call displayValidationError(target, "Error. Only Lufthansa AWB pre-fix is valid")
    Exit Sub
End If

'Following code added for AWB format with mod7
'PR 9598
temp = Mid(target.value, 5, 7)
lastDigit = Mid(target.value, 12, 1)
mod7Value = temp Mod 7
If mod7Value = lastDigit Then
    awbMod7 = True
Else
    awbMod7 = False
End If

If awbMod7 = True Then
    If Not (target.value Like "###-########") And target.value Like "###-########[xX]) " Then
    Call displayValidationError(target, "Error. AWB Format is invalid")
    Exit Sub
    End If
End If

'AWB Format check added for CR283592
If awbMod7 = True Then
    If (target.value Like "###-########[xX]") Then
    Call displayValidationError(target, "Error. Use an AWB number which is not mod7")
    Exit Sub
    End If
End If

If awbMod7 = False Then
    If Not target.value Like "###-########[xX]" Then
    Call displayValidationError(target, "Error. AWB Format is invalid")
    Exit Sub
    End If
End If
   
   target.Interior.Color = vbWhite
   Dim emptyFlagForAwb As Boolean
    emptyFlagForAwb = True
    For Each eachCell In Range(Cells(target.row, 5), Cells(target.row, 38))
    If eachCell <> "" Then
        emptyFlagForAwb = False
        Exit For
    End If
    Next
    Dim emptyFlagForConsolidation As Boolean
    emptyFlagForConsolidation = True
    For Each eachCell In Range(Cells(target.row, 7), Cells(target.row, 38))
    If eachCell <> "" Then
        emptyFlagForConsolidation = False
        Exit For
    End If
    Next
    If emptyFlag = False And Cells(target.row, 5) = "" Then
        If Cells(target.row, 5) = "" And Cells(target.row, 6) = "" Or emptyFlagForConsolidation = False Then
        If target.Offset(0, 3) = "" And target.Offset(0, 3).Locked = False Then target.Offset(0, 3).Interior.Color = &H99FFFF
        If target.Offset(0, 4) = "" And target.Offset(0, 4).Locked = False Then target.Offset(0, 4).Interior.Color = &H99FFFF
        If target.Offset(0, 5) = "" And target.Offset(0, 5).Locked = False Then target.Offset(0, 5).Interior.Color = &H99FFFF
        End If
    End If
   removeValidationError (target.row)

End Sub

'This function is called when there is change in the PBT id column after the
'AWB no is entered

Private Sub pbtIdValidation(target As Range)

'PR 9832 some part of code is removed to avoid converting PBT id to caps

Dim Flag As Boolean
Dim empt As Boolean
Flag = True

' A check is made to ensure all the feild is empty after Delete is used on the cell
' before the other cells are grayed out.
For Each oCell In Range(target.Offset(0, 2), target.Offset(0, 33))
If Not oCell = "" Then
   Flag = False
   Exit For
End If
Next

If target.value = "" Then target.Interior.Color = vbWhite

If target.value = "" And Not Flag Then Exit Sub

'When the PBT id is removed all readonly cells turn writable.
If target.value = "" Then
    target.Interior.Color = vbWhite
    If target.Offset(0, 1) = "" Then target.Offset(0, 1).Interior.Color = vbWhite
    
    Range(target.Offset(0, 2), target.Offset(0, 4)).Interior.Color = vbWhite
    Range(target.Offset(0, 5), target.Offset(0, 7)).Interior.Color = vbWhite
    Range(target.Offset(0, 11), target.Offset(0, 13)).Interior.Color = vbWhite
    Range(target.Offset(0, 17), target.Offset(0, 26)).Interior.Color = vbWhite
    Range(target.Offset(0, 32), target.Offset(0, 33)).Interior.Color = vbWhite
    Range(target.Offset(0, 8), target.Offset(0, 10)).Interior.Color = &HE8E8E8
    Range(target.Offset(0, 14), target.Offset(0, 16)).Interior.Color = &HE8E8E8
    Range(target.Offset(0, 27), target.Offset(0, 31)).Interior.Color = &HE8E8E8
    Range(target.Offset(0, 2), target.Offset(0, 33)).Locked = False
Else
'Validation of Entered PBT id is done. If the validation fails then the cell color changes
'to yellow else  all the cells that needs to be grayed out  and made readonly
    If target.value Like "*[!a-zA-Z0-9]*" Then
            Call displayValidationError(target, "Error. PBT ID format invalid")
        Exit Sub
    Else
        target.Interior.Color = vbWhite
    End If

'All cells from Servicefield are cleared. All old values are erased
    For Each oCell In Range(target.Offset(0, 2), target.Offset(0, 33))
        If Not oCell = "" Then oCell.value = ""
    Next
 
'When a valid PBT is entered, all cells except AWB and LAT Date are grayed out and locked
    Range(target.Offset(0, 2), target.Offset(0, 33)).Interior.Color = &H969696
    Range(target.Offset(0, 2), target.Offset(0, 33)).Locked = True
    target.Offset(0, 1).Interior.Color = &H99FFFF
    target.Offset(0, 1).Locked = False
End If

End Sub


'This function is called when the LateDate column is changed and AWB information is present. If the PBT id is entered the LAT date cell color changes to yellow and the error message is displayed.
'dateValidation is called to validate the date entered.

Private Sub latDateValidation(target As Range)
     
    If target.Locked = True Then Exit Sub
 
    If target.value = "" And target.Offset(0, -1) = "" Then
        target.Interior.Color = vbWhite
        Exit Sub
    End If
    
    If (target = "" And target.Interior.Color = &H99FFFF And target.Offset(0, -1) <> "") Then
        Call displayValidationError(target, "Error. LAT missing") 'PR 9565
        Exit Sub
    End If
    
    If (target <> "" And target.Offset(0, -1) <> "") Then
        target.Interior.Color = vbWhite
    End If
    
    Call dateValidation(target, True, "")
End Sub

'This function is called when the service column is changed and the AWB
'is present

Private Sub serviceValidation(target As Range)

'Added for PR 9832
Dim service1 As Variant
Dim service2 As Variant
service1 = Sheet1.Cells(7, 41).value
service2 = Sheet1.Cells(8, 41).value
service1LCase = StrConv(service1, vbLowerCase)
service2LCase = StrConv(service2, vbLowerCase)

'PR 9593.
If target.Locked = True Then
    target.Interior.Color = &H969696
    If target <> "" Then target = ""
    Range(target.Offset(0, 0), target.Offset(0, 2)).Interior.Color = &H969696
    Range(target.Offset(0, 0), target.Offset(0, 2)).Locked = True
Exit Sub
End If
Dim service
service = LCase(target)

'PR 9625 - Condition added to avoid copy paste of invalid values into service field
'PR 9664
If Not (service = service1LCase Or service = service2LCase Or target = "") Then
If target <> "" Then MsgBox "Invalid Service.   Select service from dropdown menu"
target = ""
End If

If target <> service1 And service = service1LCase Then target = service1
If target <> service2 And service = service2LCase Then target = service2

If target.value = "" And (target.Offset(0, 1) <> "" Or target.Offset(0, 1).Interior.Color = &H99FFFF) Then
Call displayValidationError(target, "Error. Service missing")
Else
target.Interior.Color = vbWhite
End If
End Sub

Private Sub natureOfGoodsValidation(target As Range)

Dim emptyFlag As Boolean
emptyFlag = True
Dim emptyFlag1 As Boolean

'PR 9593 Condition added to avoid dropdown menu in case of excel 2000.
If target.Locked = True Then
    If target <> "" Then target = ""
    Range(target.Offset(0, -1), target.Offset(0, 1)).Interior.Color = &H969696
    Range(target.Offset(0, -1), target.Offset(0, 1)).Locked = True
Exit Sub
End If

'Added for PR 9832
NOG1 = Sheet1.Cells(2, 41).value
NOG2 = Sheet1.Cells(3, 41).value
NOG1LCase = StrConv(NOG1, vbLowerCase)
NOG2LCase = StrConv(NOG2, vbLowerCase)



If Cells(target.row, 5).value <> "" And Cells(target.row, 5).Interior.Color = vbWhite Then
Exit Sub
End If


Dim natureGoods
natureGoods = LCase(target)
'PR 9625 - Condition added to avoid copy paste of invalid values into service field
'PR 9664
If Not (natureGoods = NOG1LCase Or natureGoods = NOG2LCase Or target = "") Then
If target <> "" Then MsgBox "Invalid Nature of goods.  Select Nature of goods from Dropdown menu"
target = ""
End If

If target <> NOG1 And natureGoods = NOG1LCase Then target = NOG1
If target <> NOG2 And natureGoods = NOG2LCase Then target = NOG2

'Flag for full row empty except AWB
emptyFlag1 = True
For Each eachCell In Range(Cells(target.row, 5), Cells(target.row, 38))
    If eachCell <> "" Then
        emptyFlag1 = False
        Exit For
    End If
Next

'Flag for full row empty except AWB,PBT and LAT
Dim emptyflag2 As Boolean
emptyflag2 = True
For Each eachCell In Range(Cells(target.row, 7), Cells(target.row, 38))
    If eachCell <> "" Then
        emptyflag2 = False
        Exit For
    End If
Next

If target.value = "" Then
    
'if LAT date is graed out, it is restored to writable field.
    Range(target.Offset(0, -2), target.Offset(0, -2)).Interior.Color = vbWhite
    Range(target.Offset(0, -2), target.Offset(0, -2)).Locked = False
'if Pieces,weight and volume are graed out, again it is restored as writable field
    Range(target.Offset(0, 16), target.Offset(0, 18)).Locked = False
    'PR 9599
    If target.Offset(0, 16) = "" Then target.Offset(0, 16).Interior.Color = vbWhite
    If target.Offset(0, 17) = "" Then target.Offset(0, 17).Interior.Color = vbWhite
    If target.Offset(0, 18) = "" Then target.Offset(0, 18).Interior.Color = vbWhite
'If ULD fields are grayed out, again it is restored as writable fields
    If target.Offset(0, 19) = "" Then target.Offset(0, 19).Interior.Color = vbWhite
    If target.Offset(0, 20) = "" Then target.Offset(0, 20).Interior.Color = vbWhite
    If target.Offset(0, 21) = "" Then target.Offset(0, 21).Interior.Color = vbWhite
    If target.Offset(0, 22) = "" Then target.Offset(0, 22).Interior.Color = vbWhite
    If target.Offset(0, 23) = "" Then target.Offset(0, 23).Interior.Color = vbWhite
    
    If target.Offset(0, 24) = "" Then target.Offset(0, 24).Interior.Color = &HE8E8E8
    If target.Offset(0, 25) = "" Then target.Offset(0, 25).Interior.Color = &HE8E8E8
    If target.Offset(0, 26) = "" Then target.Offset(0, 26).Interior.Color = &HE8E8E8
    If target.Offset(0, 27) = "" Then target.Offset(0, 27).Interior.Color = &HE8E8E8
    If target.Offset(0, 28) = "" Then target.Offset(0, 28).Interior.Color = &HE8E8E8
    Range(target.Offset(0, 19), target.Offset(0, 28)).Locked = False
'Weight and volume fields turn white
    If target.Offset(0, 18) = "" Then target.Offset(0, 18).Interior.Color = vbWhite
    If target.Offset(0, 17) = "" Then target.Offset(0, 17).Interior.Color = vbWhite
'Allotment id and date field
    If target.Offset(0, 14).value = "" Then
        If target.Offset(0, 15) = "" Then target.Offset(0, 15).Interior.Color = vbWhite
        target.Offset(0, 15).Locked = False
    End If
    
    For Each oCell In Range(Cells(target.row, 7), Cells(target.row, 38))
        If Not IsEmpty(oCell) And oCell.Column <> 8 Then
        emptyFlag = False
        Call displayValidationError(target, "Error. Nature of Goods missing")
        Exit For
        End If
    Next
    If emptyflag2 = False Then
    Call displayValidationError(target, "Error. Nature of Goods missing")
    If target.Offset(0, -1) = "" Then target.Offset(0, -1).Interior.Color = &H99FFFF
    End If
        
    If emptyFlag1 = True Then target.Interior.Color = vbWhite
    Exit Sub
    
    
End If


'Allotment date field is grayed out.
If target.Offset(0, 14).value = "" Then
    target.Offset(0, 15).Interior.Color = &H969696
    If target.Offset(0, 15) <> "" Then target.Offset(0, 15) = ""
    target.Offset(0, 15).Locked = True
End If

If target.value = NOG1 Then
'Weight and volume are made mandatory
    Range(target.Offset(0, 16), target.Offset(0, 18)).Locked = False
    'Range(Target.Offset(0, 16), Target.Offset(0, 18)).Interior.Color = vbWhite
    'PR 9599
    If target.Offset(0, 16) = "" Then target.Offset(0, 16).Interior.Color = vbWhite
    If target.Offset(0, 18) = "" Then target.Offset(0, 18).Interior.Color = &H99FFFF
    If target.Offset(0, 17) = "" Then target.Offset(0, 17).Interior.Color = &H99FFFF
'ULD fields are grayed out.
    'PR 9599
    Range(target.Offset(0, 19), target.Offset(0, 28)).Interior.Color = &H969696
    For Each oCell In Range(target.Offset(0, 19), target.Offset(0, 28))
        If oCell.value <> "" Then oCell.value = ""
    Next
    Range(target.Offset(0, 19), target.Offset(0, 28)).Interior.Color = &H969696
    Range(target.Offset(0, 19), target.Offset(0, 28)).Locked = True
'LAT date is grayed out.
    Range(target.Offset(0, -2), target.Offset(0, -2)).Interior.Color = &H969696
    If target.Offset(0, -2) <> "" Then target.Offset(0, -2) = ""
    Range(target.Offset(0, -2), target.Offset(0, -2)).Locked = True
        
ElseIf (target.value = NOG2) Then
'ULD fields are restored as writable fields, incase if they were grayed out.
    'Range(Target.Offset(0, 19), Target.Offset(0, 23)).Interior.Color = &H99FFFF
    If target.Offset(0, 19) = "" Then target.Offset(0, 19).Interior.Color = &H99FFFF
    If target.Offset(0, 20) = "" Then target.Offset(0, 20).Interior.Color = &H99FFFF
    If target.Offset(0, 21) = "" Then target.Offset(0, 21).Interior.Color = &H99FFFF
    If target.Offset(0, 22) = "" Then target.Offset(0, 22).Interior.Color = &H99FFFF
    If target.Offset(0, 23) = "" Then target.Offset(0, 23).Interior.Color = &H99FFFF
    'Range(Target.Offset(0, 24), Target.Offset(0, 28)).Interior.Color = &HE8E8E8
    If target.Offset(0, 24) = "" Then target.Offset(0, 24).Interior.Color = &HE8E8E8
    If target.Offset(0, 25) = "" Then target.Offset(0, 25).Interior.Color = &HE8E8E8
    If target.Offset(0, 26) = "" Then target.Offset(0, 26).Interior.Color = &HE8E8E8
    If target.Offset(0, 27) = "" Then target.Offset(0, 27).Interior.Color = &HE8E8E8
    If target.Offset(0, 28) = "" Then target.Offset(0, 28).Interior.Color = &HE8E8E8
    Range(target.Offset(0, 19), target.Offset(0, 28)).Locked = False
'LAT date is grayed out.
    Range(target.Offset(0, -2), target.Offset(0, -2)).Interior.Color = &H969696
    If target.Offset(0, -2) <> "" Then target.Offset(0, -2) = ""
    Range(target.Offset(0, -2), target.Offset(0, -2)).Locked = True
'Pieces,weight and volume are grayed out
    For Each oCell In Range(target.Offset(0, 16), target.Offset(0, 18))
        If oCell.value <> "" Then oCell.value = ""
    Next
    Range(target.Offset(0, 16), target.Offset(0, 18)).Interior.Color = &H969696
    Range(target.Offset(0, 16), target.Offset(0, 18)).Locked = True
End If
target.Interior.Color = vbWhite
End Sub

'This function is called when the origin column is changed and
'the AWB inforamtion is present

Private Sub originValidation(target As Range)
Dim org As String
Dim orgUpper As String
Dim i As Integer
Dim sta As String

If target.Locked = True Then Exit Sub
    
Dim emptyFlightSeg As Boolean
emptyFlightSeg = True
For Each eachCell In Range(Cells(target.row, 11), Cells(target.row, 21))
    If eachCell <> "" Then
        emptyFlightSeg = False
        Exit For
    End If
Next

If target = "" And target.Offset(0, -1).Interior.Color = &H99FFFF Then
    target.Interior.Color = &H99FFFF
    Exit Sub
End If

'Error. Origin missing is displayed if the origin is missing when the AWB information is entered
If target.value = "" And target.Offset(0, -1).value <> "" Then
If emptyFlightSeg = True Then
If target.Offset(0, 1) = "" And target.Offset(0, 1).Locked = False Then target.Offset(0, 1).Interior.Color = vbWhite
If target.Offset(0, 2) = "" And target.Offset(0, 2).Locked = False Then target.Offset(0, 2).Interior.Color = vbWhite
If target.Offset(0, 3) = "" And target.Offset(0, 3).Locked = False Then target.Offset(0, 3).Interior.Color = vbWhite
End If
Call displayValidationError(target, "Error. Origin missing")
Exit Sub
End If

'When the origin is deleted then columns destination and flight details are no more mandatory.
If target.value = "" And emptyFlightSeg = True Then
    target.Interior.Color = vbWhite
    
    If target.Offset(0, 1) = "" And target.Offset(0, 1).Locked = False Then target.Offset(0, 1).Interior.Color = vbWhite
    If target.Offset(0, 2) = "" And target.Offset(0, 2).Locked = False Then target.Offset(0, 2).Interior.Color = vbWhite
    If target.Offset(0, 3) = "" And target.Offset(0, 3).Locked = False Then target.Offset(0, 3).Interior.Color = vbWhite
    
    Exit Sub
End If

'Validation of the entered origin is done here
If (Not target.value Like "[A-Za-z][a-zA-Z][a-zA-Z]") Then
    target.Interior.Color = &H99FFFF
    Call displayValidationError(target, "Error. Origin station format is invalid")
Else
'if origin validation passes then the destnation and the flight details are made mandatory.
    If (Not target.value Like "[A-Z][A-Z][A-Z]") Then target.value = StrConv(target.value, vbUpperCase)
    target.Interior.Color = vbWhite
    If (target.Offset(0, 1) = "") Then target.Offset(0, 1).Interior.Color = &H99FFFF
    If (target.Offset(0, 2) = "") Then target.Offset(0, 2).Interior.Color = &H99FFFF
    If target.Offset(0, 3) = "" Then target.Offset(0, 3).Interior.Color = &H99FFFF
End If

End Sub

'This function is called when the destination column is changed

Private Sub destinationValidation(target As Range)

Dim emptyFlightSeg As Boolean

If target.Locked = True Then Exit Sub

emptyFlightSeg = True
For Each eachCell In Range(Cells(target.row, 11), Cells(target.row, 21))
    If eachCell <> "" Then
        emptyFlightSeg = False
        Exit For
    End If
Next


If target.value = "" And target.Offset(0, -1) = "" And emptyFlightSeg = True Then
    target.Interior.Color = vbWhite
    Exit Sub
End If

If target = "" And emptyFlightSeg = False Then
    Call displayValidationError(target, "Error. Destination missing")
    Exit Sub
End If

If emptyFlightSeg = False And target.Offset(0, -1) = "" Then
target.Interior.Color = vbWhite
Exit Sub
End If

'Error message is displayed if the destination is missing after the origin is entered
If target.value = "" And target.Offset(0, -1).value <> "" Then
    Call displayValidationError(target, "Error. Destination missing")
    Exit Sub
End If

'Format Error message is displayed if the destination is invalid after the origin is entered
If (Not target.value Like "[a-zA-Z][a-zA-Z][a-zA-Z]") Then
    target.Interior.Color = &H99FFFF
    Call displayValidationError(target, "Error. Destination station format is invalid")
Else
    target.Interior.Color = vbWhite
    If (Not target.value Like "[A-Z][A-Z][A-Z]") Then target.value = StrConv(target.value, vbUpperCase)
End If
End Sub

'This function is called when the Fight column is changed
'The flag argument specifys the back ground color of the Flight column
'and errmsg is the message thats displayed when the Flight no is missing.

Private Sub flightValidation(target As Range, errMsg As String, Flag As Boolean)

Dim Flight
Dim emptyFlightSeg As Boolean
Flight = target.value

If target.Locked = True Then Exit Sub

emptyFlightSeg = True
For Each eachCell In Range(Cells(target.row, 13), Cells(target.row, 21))
    If eachCell <> "" Then
        emptyFlightSeg = False
        Exit For
    End If
Next


If target = "" And target.Offset(0, -2) = "" And emptyFlightSeg = True Then
target.Interior.Color = vbWhite
Exit Sub
End If

If target = "" And (target.Offset(0, 1) <> "" Or target.Interior.Color = &H99FFFF) Then
Call displayValidationError(target, errMsg)
Exit Sub
End If



If target.value = "" And (target.Offset(0, -2).value <> "") Then
    Call displayValidationError(target, errMsg)
    Exit Sub
End If


'PR 9691 Modified

Dim i As Integer
Dim char As Variant
Dim str As Variant

i = 1
str = ""
charcouhnt = 0
Do While (i <= Len(Flight))
    char = Mid(Flight, i, 1)
    If char Like "[a-z]" Then
        char = StrConv(char, vbUpperCase)
        charcount = charcount + 1
    End If
    str = str & char
    i = i + 1
Loop
If charcount > 0 Then target = str




flightName = target
If Not isValidFlight(flightName) Then
    target.Interior.Color = &H99FFFF
    Call displayValidationError(target, "Error. Flight format is invalid")
Else
    If Flag Then
        target.Interior.Color = vbWhite
    Else
        target.Interior.Color = &HE8E8E8
    End If
    If target.Offset(0, -1) = "" Then target.Offset(0, -1).Interior.Color = &H99FFFF
    If Cells(target.row, 10) = "" Then Cells(target.row, 10).Interior.Color = &H99FFFF
End If

End Sub

'This function is called when the 1st Flight segments FightDate is changed
'and the AWB no is present

Private Sub flight1DateValidation(target As Range)

Dim emptyFlightSeg As Boolean
If target.Locked = True Then Exit Sub

emptyFlightSeg = True
For Each eachCell In Range(Cells(target.row, 13), Cells(target.row, 21))
    If eachCell <> "" Then
        emptyFlightSeg = False
        Exit For
    End If
Next


If target.value = "" And target.Interior.Color = vbWhite Then
    target.Interior.Color = vbWhite
End If

If target = "" And target.Offset(0, -1) = "" And emptyFlightSeg = True And target.Offset(0, -3) = "" Then target.Offset(0, -1).Interior.Color = vbWhite

If target.value = "" And target.Offset(0, -3) = "" And emptyFlightSeg = True Then
target.Interior.Color = vbWhite
Exit Sub
End If

If target.value = "" And target.Offset(0, -3).value <> "" Then
Call displayValidationError(target, "Error. Date in 1st Flight segment missing")
Exit Sub
End If

Call dateValidation(target, True, "Error. Date in 1st Flight segment missing")
If target.Interior.Color <> &H99FFFF And target.Offset(0, -1) = "" Then target.Offset(0, -1).Interior.Color = &H99FFFF
If target.Interior.Color = vbWhite Then
If Cells(target.row, 10) = "" Then Cells(target.row, 10).Interior.Color = &H99FFFF
End If

End Sub

'Fuction is called when any of the trasit station columns are changed,
'the arguments to the method are flag which specifys the background color
'of the cell and the msg string which gives the the no of the flight segment
'eg 2nd, 3rd, etc

Private Sub transitStationValidation(target As Range, Flag As Boolean, msg As String)

    
Dim emptyFlightSeg As Boolean
emptyFlightSeg = True
Dim firstCell As Integer
Dim lastCell As Integer

If target.Locked = True Then Exit Sub

lastCell = 21
If target.Column = 13 Then firstCell = 16
If target.Column = 16 Then firstCell = 19

If target.Column <> 19 Then
For Each eachCell In Range(Cells(target.row, firstCell), Cells(target.row, lastCell))
    If eachCell <> "" Then
        emptyFlightSeg = False
        Exit For
    End If
Next
End If

Dim firstFlightSegEmpty As Boolean
firstFlightSegEmpty = True
For Each eachCell In Range(Cells(target.row, 11), Cells(target.row, 12))
    If eachCell <> "" Then
        firstFlightSegEmpty = False
        Exit For
    End If
Next

Dim secondFlightSegEmpty As Boolean
secondFlightSegEmpty = True
For Each eachCell In Range(Cells(target.row, 13), Cells(target.row, 15))
    If eachCell <> "" Then
        secondFlightSegEmpty = False
        Exit For
    End If
Next

Dim thirdFlightSegEmpty As Boolean
thirdFlightSegEmpty = True
For Each eachCell In Range(Cells(target.row, 16), Cells(target.row, 18))
    If eachCell <> "" Then
        thirdFlightSegEmpty = False
        Exit For
    End If
Next

Dim fourthFlightSegEmpty As Boolean
fourthFlightSegEmpty = True
For Each eachCell In Range(Cells(target.row, 19), Cells(target.row, 21))
    If eachCell <> "" Then
        fourthFlightSegEmpty = False
        Exit For
    End If
Next


If target.Column = 13 And target = "" Then
    If Flag Then
    target.Interior.Color = vbWhite
    Else
    target.Interior.Color = &HE8E8E8
    End If
    
    If (thirdFlightSegEmpty = False Or fourthFlightSegEmpty = False) Then
    Call displayValidationError(target, "Error. Transit in " & msg & "Flight segment missing")
    Exit Sub
    End If
End If
If target.Column = 16 And target = "" Then
    If Flag Then
    target.Interior.Color = vbWhite
    Else
    target.Interior.Color = &HE8E8E8
    End If
    If fourthFlightSegEmpty = False Then
    Call displayValidationError(target, "Error. Transit in " & msg & "Flight segment missing")
    Exit Sub
    End If
End If

If target.Column = 19 And target = "" Then
    If Flag Then
    target.Interior.Color = vbWhite
    Else
    target.Interior.Color = &HE8E8E8
    End If
End If


If target.value = "" And (target.Offset(0, 1) <> "" Or target.Offset(0, 2) <> "") Then
    Call displayValidationError(target, "Error. Transit in " & msg & "Flight segment missing")
    Exit Sub
End If


If target.value = "" And target.Offset(0, 1) = "" And target.Offset(0, 2) = "" Then
If ((firstFlightSegEmpty = True And target.Column = 13) Or (firstFlightSegEmpty = True And secondFlightSegEmpty = True And target.Column = 16) Or (secondFlightSegEmpty = True And thirdFlightSegEmpty = True And target.Column = 19)) And Cells(target.row, 9) = "" Then
    If Cells(target.row, 11).Interior.Color <> &H99FFFF Or Cells(target.row, 11) = "" Then Cells(target.row, 11).Interior.Color = vbWhite
    If Cells(target.row, 12).Interior.Color <> &H99FFFF Or Cells(target.row, 12) = "" Then Cells(target.row, 12).Interior.Color = vbWhite
End If
If (secondFlightSegEmpty = True And target.Column = 16) Or (secondFlightSegEmpty = True And thirdFlightSegEmpty = True And target.Column = 19) Then
    Cells(target.row, 13).Interior.Color = &HE8E8E8
    Cells(target.row, 14).Interior.Color = &HE8E8E8
    Cells(target.row, 15).Interior.Color = &HE8E8E8
End If
If thirdFlightSegEmpty = True And target.Column = 19 Then
    Cells(target.row, 16).Interior.Color = vbWhite
    Cells(target.row, 17).Interior.Color = vbWhite
    Cells(target.row, 18).Interior.Color = vbWhite
End If



If Flag Then
target.Offset(0, 1).Interior.Color = vbWhite
target.Offset(0, 2).Interior.Color = vbWhite

Else
target.Offset(0, 1).Interior.Color = &HE8E8E8
target.Offset(0, 2).Interior.Color = &HE8E8E8
End If
Exit Sub
End If

'Validation of the transit station is done based on which appropriate messages are displayed
If (Not target.value Like "[A-Za-z][A-Za-z][A-Za-z]") Then
  target.Interior.Color = &H99FFFF
  Call displayValidationError(target, "Error. Transit station format is invalid")
Else
 If (Not target.value Like "[A-Z][A-Z][A-Z]") Then target.value = StrConv(target.value, vbUpperCase)
  If Flag Then
  target.Interior.Color = vbWhite
  Else
  target.Interior.Color = &HE8E8E8
  End If
  
  If target.Offset(0, 1).value = "" Then target.Offset(0, 1).Interior.Color = &H99FFFF
  If target.Offset(0, 2).value = "" Then target.Offset(0, 2).Interior.Color = &H99FFFF
  If target.Column = 13 Or target.Column = 16 Or target.Column = 19 Then
        If Cells(target.row, 11) = "" Then Cells(target.row, 11).Interior.Color = &H99FFFF
        If Cells(target.row, 12) = "" Then Cells(target.row, 12).Interior.Color = &H99FFFF
  End If
  If target.Column = 16 Or target.Column = 19 Then
        If Cells(target.row, 13) = "" Then Cells(target.row, 13).Interior.Color = &H99FFFF
        If Cells(target.row, 14) = "" Then Cells(target.row, 14).Interior.Color = &H99FFFF
        If Cells(target.row, 15) = "" Then Cells(target.row, 15).Interior.Color = &H99FFFF
  End If
  If target.Column = 19 Then
        If Cells(target.row, 16) = "" Then Cells(target.row, 16).Interior.Color = &H99FFFF
        If Cells(target.row, 17) = "" Then Cells(target.row, 17).Interior.Color = &H99FFFF
        If Cells(target.row, 18) = "" Then Cells(target.row, 18).Interior.Color = &H99FFFF
  End If
  If Cells(target.row, 10) = "" Then Cells(target.row, 10).Interior.Color = &H99FFFF

  
End If


End Sub

'Fuction is called when any of the trasit flight no columns are changed,
'the arguments to the method are flag which specifys the background color
'of the cell and the msg string which gives the the no of the flight
'segment eg 2nd, 3rd

Private Sub transitFlightValidation(target As Range, msg As String, Flag As Boolean)
Dim errMsg As String
Dim Flight
Flight = target.value
errMsg = "Error. Flight in " & msg & " Flight segment missing"

Dim emptyFlightSeg As Boolean
emptyFlightSeg = True
Dim firstCell As Integer
Dim lastCell As Integer

If target.Locked = True Then Exit Sub

'PR 9691

Dim i As Integer
Dim char As Variant
Dim str As Variant

i = 1
str = ""
charcouhnt = 0
Do While (i <= Len(Flight))
    char = Mid(Flight, i, 1)
    If char Like "[a-z]" Then
        char = StrConv(char, vbUpperCase)
        charcount = charcount + 1
    End If
    str = str & char
    i = i + 1
Loop
If charcount > 0 Then target = str


lastCell = 21
If target.Column = 14 Then firstCell = 16
If target.Column = 17 Then firstCell = 19

If target.Column <> 20 Then
For Each eachCell In Range(Cells(target.row, firstCell), Cells(target.row, lastCell))
    If eachCell <> "" Then
        emptyFlightSeg = False
        Exit For
    End If
Next
End If
Dim firstFlightSegEmpty As Boolean
firstFlightSegEmpty = True
For Each eachCell In Range(Cells(target.row, 11), Cells(target.row, 12))
    If eachCell <> "" Then
        firstFlightSegEmpty = False
        Exit For
    End If
Next

Dim secondFlightSegEmpty As Boolean
secondFlightSegEmpty = True
For Each eachCell In Range(Cells(target.row, 13), Cells(target.row, 15))
    If eachCell <> "" Then
        secondFlightSegEmpty = False
        Exit For
    End If
Next

Dim thirdFlightSegEmpty As Boolean
thirdFlightSegEmpty = True
For Each eachCell In Range(Cells(target.row, 16), Cells(target.row, 18))
    If eachCell <> "" Then
        thirdFlightSegEmpty = False
        Exit For
    End If
Next
Dim fourthFlightSegEmpty As Boolean
fourthFlightSegEmpty = True
For Each eachCell In Range(Cells(target.row, 19), Cells(target.row, 21))
    If eachCell <> "" Then
        fourthFlightSegEmpty = False
        Exit For
    End If
Next

If target.Column = 14 And target = "" Then
    If Flag Then
    target.Interior.Color = vbWhite
    Else
    target.Interior.Color = &HE8E8E8
    End If
    If (thirdFlightSegEmpty = False Or fourthFlightSegEmpty = False) Then
    Call displayValidationError(target, errMsg)
    Exit Sub
    End If
End If
If target.Column = 17 And target = "" Then
    If Flag Then
    target.Interior.Color = vbWhite
    Else
    target.Interior.Color = &HE8E8E8
    End If
    If fourthFlightSegEmpty = False Then
    Call displayValidationError(target, errMsg)
    Exit Sub
    End If
End If

If target.Column = 20 And target = "" Then
    If Flag Then
    target.Interior.Color = vbWhite
    Else
    target.Interior.Color = &HE8E8E8
    End If
End If

If target.value = "" And target.Offset(0, 1) = "" And target.Offset(0, -1) = "" Then
If ((firstFlightSegEmpty = True And target.Column = 14) Or (firstFlightSegEmpty = True And secondFlightSegEmpty = True And target.Column = 17) Or (secondFlightSegEmpty = True And thirdFlightSegEmpty = True And target.Column = 20)) And Cells(target.row, 9) = "" Then
    If Cells(target.row, 11).Interior.Color <> &H99FFFF Or Cells(target.row, 11) = "" Then Cells(target.row, 11).Interior.Color = vbWhite
    
    If Cells(target.row, 12).Interior.Color <> &H99FFFF Or Cells(target.row, 12) = "" Then Cells(target.row, 12).Interior.Color = vbWhite
    
End If
If (secondFlightSegEmpty = True And target.Column = 17) Or (secondFlightSegEmpty = True And thirdFlightSegEmpty = True And target.Column = 20) Then
    Cells(target.row, 13).Interior.Color = &HE8E8E8
    Cells(target.row, 14).Interior.Color = &HE8E8E8
    Cells(target.row, 15).Interior.Color = &HE8E8E8
End If
If thirdFlightSegEmpty = True And target.Column = 20 Then
    Cells(target.row, 16).Interior.Color = vbWhite
    Cells(target.row, 17).Interior.Color = vbWhite
    Cells(target.row, 18).Interior.Color = vbWhite
End If

If Flag Then
target.Offset(0, -1).Interior.Color = vbWhite
target.Offset(0, 1).Interior.Color = vbWhite

Else
target.Offset(0, -1).Interior.Color = &HE8E8E8
target.Offset(0, 1).Interior.Color = &HE8E8E8
End If
Exit Sub
End If


If target.value = "" And target.Offset(0, -1) <> "" Then
    Call displayValidationError(target, errMsg)
    Exit Sub
End If

If Not isValidFlight(target) Then
    target.Interior.Color = &H99FFFF
    Call displayValidationError(target, "Error. Flight format is invalid")
Else
  If Flag Then
    target.Interior.Color = vbWhite
  Else
    target.Interior.Color = &HE8E8E8
  End If
  If target.Offset(0, -1).value = "" Then target.Offset(0, -1).Interior.Color = &H99FFFF
  If target.Offset(0, 1).value = "" Then target.Offset(0, 1).Interior.Color = &H99FFFF
  If target.Column = 14 Or target.Column = 17 Or target.Column = 20 Then
        If Cells(target.row, 11) = "" Then Cells(target.row, 11).Interior.Color = &H99FFFF
        If Cells(target.row, 12) = "" Then Cells(target.row, 12).Interior.Color = &H99FFFF
  End If
  If target.Column = 17 Or target.Column = 20 Then
        If Cells(target.row, 13) = "" Then Cells(target.row, 13).Interior.Color = &H99FFFF
        If Cells(target.row, 14) = "" Then Cells(target.row, 14).Interior.Color = &H99FFFF
        If Cells(target.row, 15) = "" Then Cells(target.row, 15).Interior.Color = &H99FFFF
  End If
  If target.Column = 20 Then
        If Cells(target.row, 16) = "" Then Cells(target.row, 16).Interior.Color = &H99FFFF
        If Cells(target.row, 17) = "" Then Cells(target.row, 17).Interior.Color = &H99FFFF
        If Cells(target.row, 18) = "" Then Cells(target.row, 18).Interior.Color = &H99FFFF
  End If
  If Cells(target.row, 10) = "" Then Cells(target.row, 10).Interior.Color = &H99FFFF
   
      
End If

End Sub

'Fuction is called when any of the trasit date columns are changed, the
'arguments to the method are flag which specifys the background color of the
'cell and the msg string which gives the the no of the flight segment eg 2nd, 3rd

Private Sub flightDateValidation(target As Range, msg As String, Flag As Boolean)
Dim errMsg As String
errMsg = "Error. Flight Date in " & msg & " Flight segment missing"

Dim emptyFlightSeg As Boolean
emptyFlightSeg = True
Dim firstCell As Integer
Dim lastCell As Integer

If target.Locked = True Then Exit Sub

lastCell = 21
If target.Column = 15 Then firstCell = 16
If target.Column = 18 Then firstCell = 19

If target.Column <> 21 Then
For Each eachCell In Range(Cells(target.row, firstCell), Cells(target.row, lastCell))
    If eachCell <> "" Then
        emptyFlightSeg = False
        Exit For
    End If
Next
End If
Dim firstFlightSegEmpty As Boolean
firstFlightSegEmpty = True
For Each eachCell In Range(Cells(target.row, 11), Cells(target.row, 12))
    If eachCell <> "" Then
        firstFlightSegEmpty = False
        Exit For
    End If
Next

Dim secondFlightSegEmpty As Boolean
secondFlightSegEmpty = True
For Each eachCell In Range(Cells(target.row, 13), Cells(target.row, 15))
    If eachCell <> "" Then
        secondFlightSegEmpty = False
        Exit For
    End If
Next

Dim thirdFlightSegEmpty As Boolean
thirdFlightSegEmpty = True
For Each eachCell In Range(Cells(target.row, 16), Cells(target.row, 18))
    If eachCell <> "" Then
        thirdFlightSegEmpty = False
        Exit For
    End If
Next

Dim fourthFlightSegEmpty As Boolean
fourthFlightSegEmpty = True
For Each eachCell In Range(Cells(target.row, 19), Cells(target.row, 21))
    If eachCell <> "" Then
        fourthFlightSegEmpty = False
        Exit For
    End If
Next



If (target.Offset(0, -1) <> "" Or target.Offset(0, -2) <> "") And target = "" Then
    target.Interior.Color = &H99FFFF
    Exit Sub
End If
If target.Column = 15 And target = "" Then
    If Flag Then
    target.Interior.Color = vbWhite
    Else
    target.Interior.Color = &HE8E8E8
    End If
    If (thirdFlightSegEmpty = False Or fourthFlightSegEmpty = False) Then
    Call displayValidationError(target, errMsg)
    Exit Sub
    End If
    
End If

If target.Column = 18 And target = "" Then
    If Flag Then
    target.Interior.Color = vbWhite
    Else
    target.Interior.Color = &HE8E8E8
    End If
    If fourthFlightSegEmpty = False Then
    Call displayValidationError(target, errMsg)
    Exit Sub
    End If
    
End If

If target.Column = 21 And target = "" Then
    If Flag Then
    target.Interior.Color = vbWhite
    Else
    target.Interior.Color = &HE8E8E8
    End If
End If

If target.value = "" And target.Offset(0, -1) = "" And target.Offset(0, -2) = "" Then
If ((firstFlightSegEmpty = True And target.Column = 15) Or (firstFlightSegEmpty = True And secondFlightSegEmpty = True And target.Column = 18) Or (secondFlightSegEmpty = True And thirdFlightSegEmpty = True And target.Column = 21)) And Cells(target.row, 9) = "" Then
    If Cells(target.row, 11).Interior.Color <> &H99FFFF Or Cells(target.row, 11) = "" Then Cells(target.row, 11).Interior.Color = vbWhite
    If Cells(target.row, 12).Interior.Color <> &H99FFFF Or Cells(target.row, 12) = "" Then Cells(target.row, 12).Interior.Color = vbWhite
End If
If (secondFlightSegEmpty = True And target.Column = 18) Or (secondFlightSegEmpty = True And thirdFlightSegEmpty = True And target.Column = 21) Then
    Cells(target.row, 13).Interior.Color = &HE8E8E8
    Cells(target.row, 14).Interior.Color = &HE8E8E8
    Cells(target.row, 15).Interior.Color = &HE8E8E8
End If
If thirdFlightSegEmpty = True And target.Column = 21 Then
    Cells(target.row, 16).Interior.Color = vbWhite
    Cells(target.row, 17).Interior.Color = vbWhite
    Cells(target.row, 18).Interior.Color = vbWhite
End If
If Flag Then
target.Offset(0, -1).Interior.Color = vbWhite
target.Offset(0, -2).Interior.Color = vbWhite

Else
target.Offset(0, -1).Interior.Color = &HE8E8E8
target.Offset(0, -2).Interior.Color = &HE8E8E8
End If
Exit Sub
End If


If target.value = "" And target.Offset(0, -2) <> "" Then
    Call displayValidationError(target, errMsg)
    Exit Sub
End If

Call dateValidation(target, Flag, "")

If target.Interior.Color <> &H99FFFF Then

If target.Offset(0, -2).value = "" Then target.Offset(0, -2).Interior.Color = &H99FFFF
If target.Offset(0, -1).value = "" Then target.Offset(0, -1).Interior.Color = &H99FFFF
If target.Column = 15 Or target.Column = 18 Or target.Column = 21 Then
        If Cells(target.row, 11) = "" Then Cells(target.row, 11).Interior.Color = &H99FFFF
        If Cells(target.row, 12) = "" Then Cells(target.row, 12).Interior.Color = &H99FFFF
  End If
  If target.Column = 18 Or target.Column = 21 Then
        If Cells(target.row, 13) = "" Then Cells(target.row, 13).Interior.Color = &H99FFFF
        If Cells(target.row, 14) = "" Then Cells(target.row, 14).Interior.Color = &H99FFFF
        If Cells(target.row, 15) = "" Then Cells(target.row, 15).Interior.Color = &H99FFFF
  End If
  If target.Column = 21 Then
        If Cells(target.row, 16) = "" Then Cells(target.row, 16).Interior.Color = &H99FFFF
        If Cells(target.row, 17) = "" Then Cells(target.row, 17).Interior.Color = &H99FFFF
        If Cells(target.row, 18) = "" Then Cells(target.row, 18).Interior.Color = &H99FFFF
  End If
  If Cells(target.row, 10) = "" Then Cells(target.row, 10).Interior.Color = &H99FFFF

End If
End Sub

'Method for allotment id validation. Invloked when allotment id field is entered

Private Sub allotmentIdValidation(target As Range)

Dim AllotId
AllotId = target

If target.Locked = True Then Exit Sub

    'If AllotId = "" And Target.Offset(0, -14) = "" Then
    '    Target.Interior.Color = vbWhite
    '    Target.Offset(0, 1).Locked = False
    '    Target.Offset(0, 1).Interior.Color = vbWhite
    '    Exit Sub
    'End If
        
    If AllotId = "" And target.Offset(0, 1).Locked = True Then
    target.Interior.Color = vbWhite
    Exit Sub
    End If
    
   If AllotId = "" Then
   
        target.Interior.Color = vbWhite
        target.Offset(0, 1).value = ""
        'To lock allotment date field
        If Cells(target.row, 8) <> "" Then
        target.Offset(0, 1).Interior.Color = &H969696
        target.Offset(0, 1).Locked = True
        Else
        If target.Offset(0, 1) = "" Then target.Offset(0, 1).Interior.Color = vbWhite
        End If
        Exit Sub
    End If
    
    If (AllotId Like "*[!a-zA-Z0-9]*") Then
        Call displayValidationError(target, "Error. Allotment ID format invalid")
        If target.Offset(0, 1) = "" Then
        target.Offset(0, 1).Interior.Color = &H969696
        target.Offset(0, 1).Locked = True
        End If
    ElseIf AllotId <> "" Then
        target.Interior.Color = vbWhite
    'When allotment id is entered, allotment date is unlocked
        target.Offset(0, 1).Interior.Color = &H99FFFF
        target.Offset(0, 1).Locked = False
    End If
End Sub

'Method for validating date in allotment date field column 23 (W)

Private Sub allotmentDateValidation(target As Range)

   If target = "" And target.Offset(0, -1) = "" And Cells(target.row, 8) = "" Then Exit Sub
   
   If target.Locked = True Then Exit Sub
   
   If (target = "" And target.Offset(0, -1) <> "") Then
        Call displayValidationError(target, "Error. Allotment Date missing")
        Exit Sub
   End If
   
   If (target <> "" And target.Offset(0, -1) <> "") Then
        target.Interior.Color = vbWhite
   End If
   Call dateValidation(target, True, "")
End Sub

'Method for validating pieces field in column 24 (X)
Private Sub piecesValidation(target As Range)

If target.Locked = True Then Exit Sub

    If target.value = "" Then
        target.Interior.Color = vbWhite
        Exit Sub
    End If
    
    If target Like "*.*" Or target Like "*,*" Then
        Call displayValidationError(target, "Error. Only numeric data input")
        Exit Sub
    End If
    
    If IsNumeric(target) And target > 0 Then  'Condition added PR 9601
        target.Interior.Color = vbWhite
    Else
        If target <= 0 Then
        Call displayValidationError(target, "Error. Value should be greater than 0")
        Else
        Call displayValidationError(target, "Error. Only numeric data input")
        End If
    End If
End Sub

'Method for validating Weight field column 25 (Y)

Private Sub weightValidation(target As Range)
    Dim Weight As Variant
    Dim MaxWeight
    Dim natureOfGoods As Variant
    Dim NOG2 As Variant
    MaxWeight = "30000.0" 'for BEEMSR-767462
    NOG2 = Sheet1.Cells(3, 41).value
    If target.Locked = True Then Exit Sub
    
    natureOfGoods = Cells(target.row, target.Column - 17).value
    Weight = Cells(target.row, target.Column).value
    
        
    If (Weight = "") And natureOfGoods = NOG2 Then Exit Sub
    
    If (Weight = "") And natureOfGoods = "" Then
    target.Interior.Color = vbWhite
    Exit Sub
    End If
    
    'If condition as Weight is mandatory in case of consolidation, not restricted
    If (Weight = "") Then
       Call displayValidationError(target, "Error. Weight missing")
       Exit Sub
    End If
    
    weight_rt = Mid(Weight, 2, 5)
    weight_rt = Trim(weight_rt)
    Weight_trim = Trim(Weight)
    If Weight_trim Like "-*" And IsNumeric(weight_rt) And Not weight_rt Like "*,*" Then
        Call displayValidationError(target, "Error. Value should be greater than 0")
        Exit Sub
    End If
        
    If Not Weight Like "*.*" Then
       If Weight Like "#*" And IsNumeric(Weight) And Not Weight Like "*,*" And Not Weight Like "*d*" And Not Weight Like "*e*" Then
            If Len(Weight) <= 5 And Weight <> "0" And Weight <> "00" And Weight <> "000" And Weight <> "0000" And Not Weight Like "*,*" And Not Weight Like "*-*" Then
            target.Interior.Color = vbWhite
            Else
                If Weight = "0" Or Weight = "00" Or Weight = "000" Or Weight = "0000" Then
                Call displayValidationError(target, "Error. Value should be greater than 0")
                Else
                Call displayValidationError(target, "Error. Weight format invalid")
                End If
            End If
       Else
            Call displayValidationError(target, "Error. separator must be a '.'")
       End If
       'PR 9669 If Condition added to display proper error message
       If Not IsNumeric(Weight) Then
        Call displayValidationError(target, "Error. Only numeric data input")
        End If
        Exit Sub
    End If
      
    If Not IsNumeric(Weight) Then
        Call displayValidationError(target, "Error. Only numeric data input")
        Exit Sub
    End If
    
    If Not Weight Like "#*.#" Then
        Call displayValidationError(target, "Error. Weight format invalid")
        Exit Sub
    End If

    If Weight Like ".#" Then
        Call displayValidationError(target, "Error. Separator must be a '.'")
        Exit Sub
    End If

    If Weight Like "*-*" Or Weight Like "*,*" Or Weight Like "*d*" Or Weight Like "*e*" Then
        Call displayValidationError(target, "Error. Weight format invalid")
        Exit Sub
    End If

    If Weight Like "0.0" Or Weight Like "00.0" Or Weight Like "000.0" Or Weight Like "0000.0" Then
        Call displayValidationError(target, "Error. Value should be greater than 0")
        Exit Sub
    End If
target.Interior.Color = vbWhite
    
End Sub

'Method for validating Volume field column 26 (Z)

Private Sub volumeValidation(target As Range)
    Dim Volume As Variant
    Dim natureOfGoods As Variant
    Dim NOG2 As Variant
    NOG2 = Sheet1.Cells(3, 41).value
    If target.Locked = True Then Exit Sub
    
    natureOfGoods = Cells(target.row, target.Column - 18).value
    Volume = Cells(target.row, target.Column).value
    
    If (Volume = "") And natureOfGoods = NOG2 Then Exit Sub
    
    If Volume = "" And natureOfGoods = "" Then
    target.Interior.Color = vbWhite
    Exit Sub
    End If
    
    'If condition as Weight is mandatory in case of consolidation, not restricted
    If (Volume = "") Then
       Call displayValidationError(target, "Error. Volume missing")
       Exit Sub
    End If
    
    'format check
    
    Volume_rt = Mid(Volume, 2, 5)
    Volume_rt = Trim(Volume_rt)
    Volume_trim = Trim(Volume)
    If Volume_trim Like "-*" And IsNumeric(Volume_rt) And Not Volume_rt Like "*,*" Then
        Call displayValidationError(target, "Error. Value should be greater than 0")
        Exit Sub
    End If
    
        
    If Not Volume Like "*.*" Then
        If Volume Like "#*" And IsNumeric(Volume) And Not Volume Like "*,*" And Not Volume Like "*d*" And Not Volume Like "*e*" Then
            If Len(Volume) <= 3 And Volume <> "0" And Volume <> "00" And Volume <> "000" And Not Volume Like "*,*" And Not Volume Like "*-*" Then
            target.Interior.Color = vbWhite
            Else
                If Volume = "0" Or Volume = "00" Or Volume = "000" Or Volume = "0000" Then
                Call displayValidationError(target, "Error. Value should be greater than 0")
                Else
                Call displayValidationError(target, "Error. Volume format invalid")
                End If
            End If
        Else
        Call displayValidationError(target, "Error. separator must be a '.'")
        End If
        'PR 9669 If Condition added to display proper error message
        If Not IsNumeric(Volume) Then
        Call displayValidationError(target, "Error. Only numeric data input")
        End If
        
        Exit Sub
    End If
    
    
    If Not IsNumeric(Volume) Then
        Call displayValidationError(target, "Error. Only numeric data input")
        Exit Sub
    End If
    
    
    
    If Not Volume Like "#*.##" And Not Volume Like "#*.#" Then
        Call displayValidationError(target, "Error. Volume format invalid")
        Exit Sub
    End If
    
    If Volume Like "*-*" Or Volume Like "*,*" Then
        Call displayValidationError(target, "Error. Volume format invalid")
        Exit Sub
    End If
    
    

    If Volume = "0.0" Or Volume = "0.00" Or Volume = "00.00" Or Volume = "000.00" Or Volume = "0000.00" Or Volume = "00000.00" Then
        Call displayValidationError(target, "Error. Value should be greater than 0")
        Exit Sub
    End If
    
    If Volume Like "#*.#" Then
        target = Volume & "0"
    End If


    target.Interior.Color = vbWhite

    
    
End Sub

'method for validating ULD1Number in Column 27 (AA)

Private Sub uld1NumberValidation(target As Range)
Dim uld1Number
uld1Number = target
    If target.Locked = True Then Exit Sub
        
    If target Like "*.*" Then
        Call displayValidationError(target, "Error. Only numeric data input")
        Exit Sub
    End If
        
    If target = "" And target.Offset(0, 1) = "" And target.Offset(0, 2) = "" And target.Offset(0, 3) = "" And target.Offset(0, 4) = "" Then
    If Cells(target.row, 8) = "" Then
        target.Interior.Color = vbWhite
    Else
        Call displayValidationError(target, "Error. Number of ULD missing")
    End If
    Exit Sub
    End If
    
    
    'Format check
    If (Len(uld1Number) > 1) Or uld1Number = 0 Or Not (IsNumeric(uld1Number)) Then
        If uld1Number = 0 Then
        Call displayValidationError(target, "Error. Value should be greater than 0")
        Else
        Call displayValidationError(target, "Error. Only Numeric data input")
        End If
        
    ElseIf (uld1Number <> "") Then
        'Else if for making other fields in ULD field mandatory
        target.Interior.Color = vbWhite
        If (target.Offset(0, 1) = "") Then target.Offset(0, 1).Interior.Color = &H99FFFF
        If (target.Offset(0, 2) = "") Then target.Offset(0, 2).Interior.Color = &H99FFFF
        If (target.Offset(0, 3) = "") Then target.Offset(0, 3).Interior.Color = &H99FFFF
        If (target.Offset(0, 4) = "") Then target.Offset(0, 4).Interior.Color = &H99FFFF
    End If
    
    'In case all any of other fields in ULD is filled, then this field becomes
    'mandatory.   If data is not there in any other field again this field is turned to white
    If (uld1Number = "") Then 'And (Target.Offset(0, 1) <> "" Or Target.Offset(0, 2) <> "" Or Target.Offset(0, 3) <> "" Or Target.Offset(0, 4) <> "") Then
        Call displayValidationError(target, "Error. Number of ULD missing")
    ElseIf (uld1Number = "" And target.Offset(0, 1) = "" And target.Offset(0, 2) = "" And target.Offset(0, 3) = "" And target.Offset(0, 4) = "") Then
        
        If Cells(target.row, 8) = "" Then
        target.Interior.Color = vbWhite
        target.Offset(0, 1).Interior.Color = vbWhite
        target.Offset(0, 2).Interior.Color = vbWhite
        target.Offset(0, 3).Interior.Color = vbWhite
        target.Offset(0, 4).Interior.Color = vbWhite
        End If
        
        
    End If
End Sub



'method for validating ULD1ID in Column 28 (AB)

Private Sub uld1IDValidation(target As Range)
Dim uld1Id
uld1Id = target
    If target.Locked = True Then Exit Sub
    If Not (uld1Id Like "[a-zA-Z]*") Then
        'PR 9603 Error message added
        Call displayValidationError(target, "Error. ULD ID format invalid")
    ElseIf (uld1Id <> "") Then
        target.Interior.Color = vbWhite
        'While converting to upper case if condition is added to avoid multiple calls.
        'PR 9685 Converting to upper case
        If target Like "[a-zA-Z]" Or target Like "[a-zA-Z][a-zA-Z]" Or target Like "[a-zA-Z][a-zA-Z][a-zA-Z]" Then
        If target.value Like "[A-Z]" Or target Like "[A-Z][A-Z]" Or target Like "[A-Z][A-Z][A-Z]" Then
        Else
        target.value = StrConv(target.value, vbUpperCase)
        End If
        End If
        If (target.Offset(0, -1) = "") Then target.Offset(0, -1).Interior.Color = &H99FFFF
        If (target.Offset(0, 1) = "") Then target.Offset(0, 1).Interior.Color = &H99FFFF
        If (target.Offset(0, 2) = "") Then target.Offset(0, 2).Interior.Color = &H99FFFF
        If (target.Offset(0, 3) = "") Then target.Offset(0, 3).Interior.Color = &H99FFFF
    End If
    
    'In case all any of other fields in ULD is filled, then this field becomes
    'mandatory.   If data is not there in any other field again this field is turned to white
    If (uld1Id = "") And (target.Offset(0, -1) <> "" Or target.Offset(0, 1) <> "" Or target.Offset(0, 2) <> "" Or target.Offset(0, 3) <> "") Then
        Call displayValidationError(target, "Error. ULD ID missing")
    ElseIf (uld1Id = "" And target.Offset(0, -1) = "" And target.Offset(0, 1) = "" And target.Offset(0, 2) = "" And target.Offset(0, 3) = "") Then
        
        If Cells(target.row, 8) = "" Then
        target.Interior.Color = vbWhite
        target.Offset(0, -1).Interior.Color = vbWhite
        target.Offset(0, 1).Interior.Color = vbWhite
        target.Offset(0, 2).Interior.Color = vbWhite
        target.Offset(0, 3).Interior.Color = vbWhite
        End If
    End If
End Sub



'method for validating ULD1Volume in Column 29 (AC)

Private Sub uld1VolumeValidation(target As Range)
Dim uld1Volume As String
uld1Volume = target

If target.Locked = True Then Exit Sub
    
'In case all any of other fields in ULD is filled, then this field becomes
'mandatory.   If data is not there in any other field again this field is turned to white
If (uld1Volume = "") And (target.Offset(0, -2) <> "" Or target.Offset(0, -1) <> "" Or target.Offset(0, 1) <> "" Or target.Offset(0, 2) <> "") Then
        Call displayValidationError(target, "Error. ULD Volume missing")
        Exit Sub
ElseIf (uld1Volume = "" And target.Offset(0, -2) = "" And target.Offset(0, -1) = "" And target.Offset(0, 1) = "" And target.Offset(0, 2) = "") Then
        
        If Cells(target.row, 8) = "" Then
        target.Interior.Color = vbWhite
        target.Offset(0, -2).Interior.Color = vbWhite
        target.Offset(0, -1).Interior.Color = vbWhite
        target.Offset(0, 1).Interior.Color = vbWhite
        target.Offset(0, 2).Interior.Color = vbWhite
        Exit Sub
        End If
End If
    
'format check

uld1volume_rt = Mid(uld1Volume, 2, 5)
    uld1volume_rt = Trim(uld1volume_rt)
    uld1volume_trim = Trim(uld1Volume)
    If uld1volume_trim Like "-*" And IsNumeric(uld1volume_rt) And Not uld1volume_rt Like "*,*" Then
        Call displayValidationError(target, "Error. Value should be greater than 0")
        Exit Sub
    End If

If Not uld1Volume Like "*.*" Then
    If uld1Volume Like "#*" And IsNumeric(uld1Volume) And Not uld1Volume Like "*,*" And Not uld1Volume Like "*d*" And Not uld1Volume Like "*e*" Then
        If Len(uld1Volume) <= 3 And uld1Volume <> "0" And uld1Volume <> "00" And uld1Volume <> "000" And Not uld1Volume Like "*,*" And Not uld1Volume Like "*-*" Then
        target.Interior.Color = vbWhite
        Else
            If uld1Volume = "0" Or uld1Volume = "00" Or uld1Volume = "000" Then
            Call displayValidationError(target, "Error. Value should be greater than 0")
            Else
            Call displayValidationError(target, "Error. ULD Volume format invalid")
            End If
        End If
    Else
    Call displayValidationError(target, "Error. Separator must be a '.'")
    End If
    'PR 9669 If Condition added to display proper error message
    If Not IsNumeric(uld1Volume) Then
        Call displayValidationError(target, "Error. Only numeric data input")
    End If
        
    Exit Sub
End If
    

If Not IsNumeric(uld1Volume) Then
    Call displayValidationError(target, "Error. Only numeric data input")
    Exit Sub
End If
    
    
If Not uld1Volume Like "*.#" And Not uld1Volume Like "*.##" Then
    Call displayValidationError(target, "Error. ULD Volume format invalid")
    Exit Sub
End If

If uld1Volume Like ".#*" Then
    Call displayValidationError(target, "Error. ULD Volume format invalid")
    Exit Sub
End If

'PR 9695
If uld1Volume Like "*-*" Or uld1Volume Like "*,*" Or uld1Volume Like "*$*" Then
    Call displayValidationError(target, "Error. ULD Volume format invalid")
    Exit Sub
End If



If uld1Volume Like "0.00" Or uld1Volume Like "00.00" Or uld1Volume Like "000.00" Or uld1Volume Like "0.0" Or uld1Volume Like "00.0" Or uld1Volume Like "000.0" Then
    Call displayValidationError(target, "Error. Value should be greater than 0")
    Exit Sub
End If

If uld1Volume Like "#*.#" Then
    target = uld1Volume & "0"
End If
target.Interior.Color = vbWhite
If (target.Offset(0, -2) = "") Then target.Offset(0, -2).Interior.Color = &H99FFFF
If (target.Offset(0, -1) = "") Then target.Offset(0, -1).Interior.Color = &H99FFFF
If (target.Offset(0, 1) = "") Then target.Offset(0, 1).Interior.Color = &H99FFFF
If (target.Offset(0, 2) = "") Then target.Offset(0, 2).Interior.Color = &H99FFFF

    
    
    
End Sub



'method for validating ULD1Weight in Column 30 (AD)

Private Sub uld1WeightValidation(target As Range)
Dim uld1Weight
uld1Weight = target
If target.Locked = True Then Exit Sub
    
'In case all any of other fields in ULD is filled, then this field becomes
'mandatory.   If data is not there in any other field again this field is turned to white
If (uld1Weight = "") And (target.Offset(0, -3) <> "" Or target.Offset(0, -2) <> "" Or target.Offset(0, -1) <> "" Or target.Offset(0, 1) <> "") Then
        Call displayValidationError(target, "Error. ULD Weight missing")
        Exit Sub
ElseIf (uld1Weight = "" And target.Offset(0, -3) = "" And target.Offset(0, -2) = "" And target.Offset(0, -1) = "" And target.Offset(0, 1) = "") Then
        
        If Cells(target.row, 8) = "" Then
        target.Interior.Color = vbWhite
        target.Offset(0, -3).Interior.Color = vbWhite
        target.Offset(0, -2).Interior.Color = vbWhite
        target.Offset(0, -1).Interior.Color = vbWhite
        target.Offset(0, 1).Interior.Color = vbWhite
        Exit Sub
        End If
End If
    
'format check
uld1weight_rt = Mid(uld1Weight, 2, 5)
    uld1weight_rt = Trim(uld1weight_rt)
    uld1weight_trim = Trim(uld1Weight)
    If uld1weight_trim Like "-*" And IsNumeric(uld1weight_rt) And Not uld1weight_rt Like "*,*" Then
        Call displayValidationError(target, "Error. Value should be greater than 0")
        Exit Sub
    End If

If Not uld1Weight Like "*.*" Then
    If uld1Weight Like "#*" And IsNumeric(uld1Weight) And Not uld1Weight Like "*,*" And Not uld1Weight Like "*d*" And Not uld1Weight Like "*e*" Then
        If Len(uld1Weight) <= 4 And uld1Weight <> "0" And uld1Weight <> "00" And uld1Weight <> "000" And uld1Weight <> "0000" And Not uld1Weight Like "*,*" And Not uld1Weight Like "*-*" Then
        target.Interior.Color = vbWhite
        Else
            If uld1Weight = "0" Or uld1Weight = "00" Or uld1Weight = "000" Or uld1Weight = "0000" Then
            Call displayValidationError(target, "Error. Value should be greater than 0")
            Else
            Call displayValidationError(target, "Error. ULD Weight format invalid")
            End If
        End If
    Else
    Call displayValidationError(target, "Error. Separator must be a '.'")
    End If
    'PR 9669 If Condition added to display proper error message
    If Not IsNumeric(uld1Weight) Then
        Call displayValidationError(target, "Error. Only numeric data input")
    End If
        
    Exit Sub
End If

If Not IsNumeric(uld1Weight) Then
    Call displayValidationError(target, "Error. Only numeric data input")
    Exit Sub
End If



If Not uld1Weight Like "*.#" Then
    Call displayValidationError(target, "Error. ULD Weight format invalid")
    Exit Sub
End If

If uld1Weight Like ".#" Then
    Call displayValidationError(target, "Error. ULD Weight format invalid")
    Exit Sub
End If
'PR 9695
If uld1Weight Like "*-*" Or uld1Weight Like "*,*" Or uld1Weight Like "*$*" Or uld1Weight Like "*d*" Or uld1Weight Like "*e*" Then
    Call displayValidationError(target, "Error. ULD Weight format invalid")
    Exit Sub
End If

If uld1Weight Like "0" Or uld1Weight Like "0.0" Or uld1Weight Like "00.0" Or uld1Weight Like "000.0" Or uld1Weight Like "0000.0" Or uld1Weight Like "00000.0" Then
    Call displayValidationError(target, "Error. Value should be greater than 0")
    Exit Sub
End If


target.Interior.Color = vbWhite
If (target.Offset(0, -3) = "") Then target.Offset(0, -3).Interior.Color = &H99FFFF
If (target.Offset(0, -2) = "") Then target.Offset(0, -2).Interior.Color = &H99FFFF
If (target.Offset(0, -1) = "") Then target.Offset(0, -1).Interior.Color = &H99FFFF
If (target.Offset(0, 1) = "") Then target.Offset(0, 1).Interior.Color = &H99FFFF


    
End Sub

'method for validating ULD1ContourCode in Column 31 (AE)

Private Sub uld1ContourCodeValidation(target As Range)
Dim uld1ContourCode
uld1ContourCode = target
Dim NOG2 As Variant
    NOG2 = Sheet1.Cells(3, 41).value
    If target.Locked = True Then Exit Sub
    
    'In case all any of other fields in ULD is filled, then this field becomes
    'mandatory.   If data is not there in any other field again this field is turned to white
    
    'PR  9662 Error message is added
    If target = "" And target.Offset(0, -23) = NOG2 Then
     Call displayValidationError(target, "Error. ULD Contour Code missing")
    Exit Sub
    End If
    
    If (uld1ContourCode = "") And (target.Offset(0, -4) <> "" Or target.Offset(0, -3) <> "" Or target.Offset(0, -2) <> "" Or target.Offset(0, -1) <> "") Then
        Call displayValidationError(target, "Error. ULD Contour Code missing")
        Exit Sub
    ElseIf (uld1ContourCode = "" And target.Offset(0, -4) = "" And target.Offset(0, -3) = "" And target.Offset(0, -2) = "" And target.Offset(0, -1) = "") Then
        If Cells(target.row, 8) = "" Then
        target.Interior.Color = vbWhite
        target.Offset(0, -4).Interior.Color = vbWhite
        target.Offset(0, -3).Interior.Color = vbWhite
        target.Offset(0, -2).Interior.Color = vbWhite
        target.Offset(0, -1).Interior.Color = vbWhite
        End If
        Exit Sub
    End If
    
    If target = "" And target.Offset(0, -1) = "" And target.Offset(0, -2) = "" And target.Offset(0, -3) = "" And target.Offset(0, -4) = "" Then
    If Cells(target.row, 8) = "" Then
    target.Interior.Color = vbWhite
    Else
    Call displayValidationError(target, "Error. ULD Contour Code missing")
    End If
    Exit Sub
    End If
    
    'format check
    If (uld1ContourCode Like "*[a-zA-Z0-9]*") Then
        'PR 9685 Converting to upper case
        If target Like "[a-zA-Z]" Or target Like "[a-zA-Z][a-zA-Z]" Then
        If target Like "[A-Z]" Or target Like "[A-Z][A-Z]" Then
        Else
        target = StrConv(target.value, vbUpperCase)
        End If
        End If
        target.Interior.Color = vbWhite
        If (target.Offset(0, -4) = "") Then target.Offset(0, -4).Interior.Color = &H99FFFF
        If (target.Offset(0, -3) = "") Then target.Offset(0, -3).Interior.Color = &H99FFFF
        If (target.Offset(0, -2) = "") Then target.Offset(0, -2).Interior.Color = &H99FFFF
        If (target.Offset(0, -1) = "") Then target.Offset(0, -1).Interior.Color = &H99FFFF
    End If
    
    If target.value Like "*[!a-zA-Z0-9]*" Then
        Call displayValidationError(target, "Error. Contour code format invalid")
    End If
    
End Sub


'method for validating ULD2Number in Column 32 (AF)

Private Sub uld2NumberValidation(target As Range)
Dim uld2Number
    uld2Number = target
    
    
    If target.Locked = True Then Exit Sub
    
    'format check
    If (Len(uld2Number) > 1) Or uld2Number = 0 Or Not (IsNumeric(uld2Number)) Then
    If uld2Number = 0 Then
        Call displayValidationError(target, "Error. Value should be greater than 0")
     Else
        Call displayValidationError(target, "Error. Only Numeric data input")
    End If
        
        
    ElseIf (uld2Number <> "") Then
        target.Interior.Color = &HE0E0E0
        If (target.Offset(0, 1) = "") Then target.Offset(0, 1).Interior.Color = &H99FFFF
        If (target.Offset(0, 2) = "") Then target.Offset(0, 2).Interior.Color = &H99FFFF
        If (target.Offset(0, 3) = "") Then target.Offset(0, 3).Interior.Color = &H99FFFF
        If (target.Offset(0, 4) = "") Then target.Offset(0, 4).Interior.Color = &H99FFFF
            
    End If
     
    'In case all any of other fields in ULD is filled, then this field becomes
    'mandatory.   If data is not there in any other field again this field is turned to white
    If (uld2Number = "") And (target.Offset(0, 1) <> "" Or target.Offset(0, 2) <> "" Or target.Offset(0, 3) <> "" Or target.Offset(0, 4) <> "") Then
        Call displayValidationError(target, "Error. Number of ULD missing")
        Exit Sub
    ElseIf (uld2Number = "" And target.Offset(0, 1) = "" And target.Offset(0, 2) = "" And target.Offset(0, 3) = "" And target.Offset(0, 4) = "") Then
        target.Interior.Color = &HE0E0E0
        target.Offset(0, 1).Interior.Color = &HE0E0E0
        target.Offset(0, 2).Interior.Color = &HE0E0E0
        target.Offset(0, 3).Interior.Color = &HE0E0E0
        target.Offset(0, 4).Interior.Color = &HE0E0E0
        
        Exit Sub
    End If
    
    
End Sub



'method for validating ULD2ID in Column 33 (AG)

Private Sub uld2IDValidation(target As Range)
Dim uld2ID
    
    uld2ID = target
    If target.Locked = True Then Exit Sub
    'format check
    If (Not uld2ID Like "[a-zA-Z]*") Then
        'PR 9603 Error message added
        Call displayValidationError(target, "Error. ULD ID format invalid")
    ElseIf (uld2ID <> "") Then
        'PR 9685 Converting to upper case
        If target Like "[a-zA-Z]" Or target Like "[a-zA-Z][a-zA-Z]" Or target Like "[a-zA-Z][a-zA-Z][a-zA-Z]" Then
        If target.value Like "[A-Z]" Or target Like "[A-Z][A-Z]" Or target Like "[A-Z][A-Z][A-Z]" Then
        Else
        target.value = StrConv(target.value, vbUpperCase)
        End If
        End If
        target.Interior.Color = &HE0E0E0
        

        If (target.Offset(0, -1) = "") Then target.Offset(0, -1).Interior.Color = &H99FFFF
        If (target.Offset(0, 1) = "") Then target.Offset(0, 1).Interior.Color = &H99FFFF
        If (target.Offset(0, 2) = "") Then target.Offset(0, 2).Interior.Color = &H99FFFF
        If (target.Offset(0, 3) = "") Then target.Offset(0, 3).Interior.Color = &H99FFFF
        
    End If
    
    'In case all any of other fields in ULD is filled, then this field becomes
    'mandatory.   If data is not there in any other field again this field is turned to white
    If (uld2ID = "") And (target.Offset(0, -1) <> "" Or target.Offset(0, 1) <> "" Or target.Offset(0, 2) <> "" Or target.Offset(0, 3) <> "") Then
        Call displayValidationError(target, "Error. ULD ID missing")
        
    ElseIf (uld2ID = "" And target.Offset(0, -1) = "" And target.Offset(0, 1) = "" And target.Offset(0, 2) = "" And target.Offset(0, 3) = "") Then
        target.Interior.Color = &HE0E0E0
        target.Offset(0, -1).Interior.Color = &HE0E0E0
        target.Offset(0, 1).Interior.Color = &HE0E0E0
        target.Offset(0, 2).Interior.Color = &HE0E0E0
        target.Offset(0, 3).Interior.Color = &HE0E0E0
        
        '
    End If
End Sub



'method for validating ULD2Volume in Column 34 (AH)

Private Sub uld2VolumeValidation(target As Range)
Dim uld2Volume As String
    uld2Volume = target
      
    If target.Locked = True Then Exit Sub
    
    If (uld2Volume = "") And (target.Offset(0, -2) <> "" Or target.Offset(0, -1) <> "" Or target.Offset(0, 1) <> "" Or target.Offset(0, 2) <> "") Then
        target.Interior.Color = &H99FFFF
        target.Offset(0, -31).Interior.Color = &H99FFFF
        target.Offset(0, -31) = "Error. ULD Volume missing"
        Exit Sub
    ElseIf (uld2Volume = "" And target.Offset(0, -1) = "" And target.Offset(0, 1) = "" And target.Offset(0, 2) = "" And target.Offset(0, 3) = "") Then
        target.Interior.Color = &HE0E0E0
        target.Offset(0, -2).Interior.Color = &HE0E0E0
        target.Offset(0, -1).Interior.Color = &HE0E0E0
        target.Offset(0, 1).Interior.Color = &HE0E0E0
        target.Offset(0, 2).Interior.Color = &HE0E0E0
        Exit Sub
        
    End If
    
'format check
uld2volume_rt = Mid(uld2Volume, 2, 5)
    uld2volume_rt = Trim(uld2volume_rt)
    uld2volume_trim = Trim(uld2Volume)
    If uld2volume_trim Like "-*" And IsNumeric(uld2volume_rt) And Not uld2volume_rt Like "*,*" Then
        Call displayValidationError(target, "Error. Value should be greater than 0")
        Exit Sub
    End If




If Not uld2Volume Like "*.*" Then
    If uld2Volume Like "#*" And IsNumeric(uld2Volume) And Not uld2Volume Like "*,*" And Not uld2Volume Like "*d*" And Not uld2Volume Like "*e*" Then
        If Len(uld2Volume) <= 3 And uld2Volume <> "0" And uld2Volume <> "00" And uld2Volume <> "000" And Not uld2Volume Like "*,*" And Not uld2Volume Like "*-*" Then
        target.Interior.Color = &HE8E8E8
        Else
            If uld2Volume = "0" Or uld2Volume = "00" Or uld2Volume = "000" Then
            Call displayValidationError(target, "Error. Value should be greater than 0")
            Else
            Call displayValidationError(target, "Error. ULD Volume format invalid")
            End If
        End If
    Else
    Call displayValidationError(target, "Error. Separator must be a '.'")
    End If
    'PR 9669 If Condition added to display proper error message
    If Not IsNumeric(uld2Volume) Then
        Call displayValidationError(target, "Error. Only numeric data input")
    End If
        
    Exit Sub
End If
    
If Not IsNumeric(uld2Volume) Then
    Call displayValidationError(target, "Error. Only numeric data input")
    Exit Sub
End If
    

    
If Not uld2Volume Like "*.#" And Not uld2Volume Like "*.##" Then
    Call displayValidationError(target, "Error. ULD Volume format invalid")
    Exit Sub
End If

If uld2Volume Like ".#*" Then
    Call displayValidationError(target, "Error. ULD Volume format invalid")
    Exit Sub
End If
'PR 9695
If uld2Volume Like "*-*" Or uld2Volume Like "*,*" Or uld2Volume Like "*$*" Or uld2Volume Like "*e*" Or uld2Volume Like "*d*" Then
    Call displayValidationError(target, "Error. ULD Volume format invalid")
    Exit Sub
End If




If uld2Volume Like "0.00" Or uld2Volume Like "00.00" Or uld2Volume Like "000.00" Or uld2Volume Like "0.0" Or uld2Volume Like "00.0" Or uld2Volume Like "000.0" Then
    Call displayValidationError(target, "Error. Vallue should be greater than 0")
    Exit Sub
End If


If uld2Volume Like "#*.#" Then
    target = uld2Volume & "0"
End If

target.Interior.Color = &HE8E8E8
If (target.Offset(0, -2) = "") Then target.Offset(0, -2).Interior.Color = &H99FFFF
If (target.Offset(0, -1) = "") Then target.Offset(0, -1).Interior.Color = &H99FFFF
If (target.Offset(0, 1) = "") Then target.Offset(0, 1).Interior.Color = &H99FFFF
If (target.Offset(0, 2) = "") Then target.Offset(0, 2).Interior.Color = &H99FFFF


    
End Sub



'method for validating ULD2Weight in Column 35 (AI)

Private Sub uld2WeightValidation(target As Range)
Dim uld2Weight
uld2Weight = target

    If target.Locked = True Then Exit Sub
    
    If (uld2Weight = "") And (target.Offset(0, -3) <> "" Or target.Offset(0, -2) <> "" Or target.Offset(0, -1) <> "" Or target.Offset(0, 1) <> "") Then
        Call displayValidationError(target, "Error. ULD Weight missing")
        Exit Sub
    ElseIf (uld2Weight = "" And target.Offset(0, -3) = "" And target.Offset(0, -2) = "" And target.Offset(0, -1) = "" And target.Offset(0, 1) = "") Then
        target.Interior.Color = &HE0E0E0
        target.Offset(0, -3).Interior.Color = &HE0E0E0
        target.Offset(0, -2).Interior.Color = &HE0E0E0
        target.Offset(0, -1).Interior.Color = &HE0E0E0
        target.Offset(0, 1).Interior.Color = &HE0E0E0
        Exit Sub
        
    End If
    
'format check

uld2weight_rt = Mid(uld2Weight, 2, 5)
    uld2weight_rt = Trim(uld2weight_rt)
    uld2weight_trim = Trim(uld2Weight)
    If uld2weight_trim Like "-*" And IsNumeric(uld2weight_rt) And Not uld2weight_rt Like "*,*" Then
        Call displayValidationError(target, "Error. Value should be greater than 0")
        Exit Sub
    End If


If Not uld2Weight Like "*.*" Then
    If uld2Weight Like "#*" And IsNumeric(uld2Weight) And Not uld2Weight Like "*,*" And Not uld2Weight Like "*d*" And Not uld2Weight Like "*e*" Then
        If Len(uld2Weight) <= 4 And uld2Weight <> "0" And uld2Weight <> "00" And uld2Weight <> "000" And uld2Weight <> "0000" And Not uld2Weight Like "*,*" And Not uld2Weight Like "*-*" Then
        target.Interior.Color = &HE8E8E8
        Else
            If uld2Weight = "0" Or uld2Weight = "00" Or uld2Weight = "000" Or uld2Weight = "0000" Then
            Call displayValidationError(target, "Error. Value should be greater than 0")
            Else
            Call displayValidationError(target, "Error. ULD Weight format invalid")
            End If
        End If
    Else
    Call displayValidationError(target, "Error. Separator must be a '.'")
    End If
    'PR 9669 If Condition added to display proper error message
    If Not IsNumeric(uld2Weight) Then
        Call displayValidationError(target, "Error. Only numeric data input")
    End If
        
    Exit Sub
End If

If Not IsNumeric(uld2Weight) Then
    Call displayValidationError(target, "Error. Only numeric data input")
    Exit Sub
End If



If Not uld2Weight Like "*.#" Then
    Call displayValidationError(target, "Error. ULD Weight format invalid")
    Exit Sub
End If

If uld2Weight Like ".#" Then
    Call displayValidationError(target, "Error. ULD Weight format invalid")
    Exit Sub
End If

'PR 9695
If uld2Weight Like "*-*" Or uld2Weight Like "*,*" Or uld2Weight Like "*$*" Or uld2Weight Like "*e*" Or uld2Weight Like "*d*" Then
    Call displayValidationError(target, "Error. ULD Weight format invalid")
    Exit Sub
End If

If uld2Weight Like "0.0" Or uld2Weight Like "00.0" Or uld2Weight Like "000.0" Or uld2Weight Like "0000.0" Or uld2Weight Like "00000.0" Then
    Call displayValidationError(target, "Error. Value should be greater than 0")
    Exit Sub
End If


target.Interior.Color = &HE8E8E8
If (target.Offset(0, -3) = "") Then target.Offset(0, -3).Interior.Color = &H99FFFF
If (target.Offset(0, -2) = "") Then target.Offset(0, -2).Interior.Color = &H99FFFF
If (target.Offset(0, -1) = "") Then target.Offset(0, -1).Interior.Color = &H99FFFF
If (target.Offset(0, 1) = "") Then target.Offset(0, 1).Interior.Color = &H99FFFF
  
    
End Sub

'method for validating ULD2ContourCode in Column 36 (AJ)

Private Sub uld2ContourCodeValidation(target As Range)
Dim uld2ContourCode
    uld2ContourCode = target
    
    If target.Locked = True Then Exit Sub
    
    If (uld2ContourCode Like "*[a-zA-Z0-9]*") Then
        'PR 9685 Converting to upper case
        If target Like "[a-zA-Z]" Or target Like "[a-zA-Z][a-zA-Z]" Then
        If target Like "[A-Z]" Or target Like "[A-Z][A-Z]" Then
        Else
        target = StrConv(target.value, vbUpperCase)
        End If
        End If
        target.Interior.Color = &HE0E0E0
        If (target.Offset(0, -4) = "") Then target.Offset(0, -4).Interior.Color = &H99FFFF
        If (target.Offset(0, -3) = "") Then target.Offset(0, -3).Interior.Color = &H99FFFF
        If (target.Offset(0, -2) = "") Then target.Offset(0, -2).Interior.Color = &H99FFFF
        If (target.Offset(0, -1) = "") Then target.Offset(0, -1).Interior.Color = &H99FFFF
   End If
    
   If target.value Like "*[!a-zA-Z0-9]*" Then
        Call displayValidationError(target, "Error. Contour code format invalid")
    End If
    
    'PR  9662 Error message is added
    If (uld2ContourCode = "") And (target.Offset(0, -4) <> "" Or target.Offset(0, -3) <> "" Or target.Offset(0, -2) <> "" Or target.Offset(0, -1) <> "") Then
        Call displayValidationError(target, "Error. ULD Contour Code missing")
    ElseIf (uld2ContourCode = "" And target.Offset(0, -4) = "" And target.Offset(0, -3) = "" And target.Offset(0, -2) = "" And target.Offset(0, -1) = "") Then
        target.Interior.Color = &HE0E0E0
        target.Offset(0, -4).Interior.Color = &HE0E0E0
        target.Offset(0, -3).Interior.Color = &HE0E0E0
        target.Offset(0, -2).Interior.Color = &HE0E0E0
        target.Offset(0, -1).Interior.Color = &HE0E0E0
        
        
    End If
End Sub

'method for validating C-Rate in Column 37 (AK)

Private Sub cRateValidation(target As Range)

Dim cRate
    cRate = target
    If target.Locked = True Then Exit Sub
    
    If target = "" Then
        target.Interior.Color = vbWhite
        Exit Sub
    End If
    'PR 9721
    'Exponential and decimal values
    If cRate Like "*d*" Or cRate Like "*e*" Then
        Call displayValidationError(target, "Error. C-Rate format invalid")
        Exit Sub
    End If
       
    If ((Len(cRate) > 4) Or (Not IsNumeric(cRate))) Then
    
      'PR 9605  Error message added
      Call displayValidationError(target, "Error. C-Rate format invalid")
    Else
      target.Interior.Color = vbWhite
    End If
    
End Sub

'method for validating Shipper CDB Number in Column 38 (AK)

Private Sub shipperCDBNumberValidation(target As Range)
Dim shipperCdbNumber
    shipperCdbNumber = target
    
    If target.Locked = True Then Exit Sub
    'Condition added for PR 9608
    If target = "" Then
        target.Interior.Color = vbWhite
        Exit Sub
    End If
    
    'Condition added for PR 9609
    If target Like "*.*" Or target Like "*,*" Then
        Call displayValidationError(target, "Error. Only numeric data input")
        Exit Sub
    End If
    
    If shipperCdbNumber Like "*d*" Or shipperCdbNumber Like "*e*" Then
        Call displayValidationError(target, "Error. Only numeric data input")
    Exit Sub
    End If
    
    If (IsNumeric(shipperCdbNumber) And shipperCdbNumber > 0) Then
      target.Interior.Color = vbWhite
    Else
      Call displayValidationError(target, "Error. Only numeric data input")
    End If
End Sub

'This method is invoked each time a cell value is changed. It navigates through
'all the cells in a row from the left and when it encounters a yellow colored
'field, it handles according the column number. It calls the functin with respect
'to the column number. If no error field is found, it calls function to remove
'validation error

Private Sub validationPriority(target As Range)

  Dim count As Integer
  
  If (target.Column > 3 And target.Column < 39) Then
  count = 4
  
  Do While (count < 39)
    If (target.Offset(0, count - (target.Column)).Interior.Color = &H99FFFF) Then
        
        If count = 4 Then
            
             awbValidation (Cells(target.row, count))
             Exit Sub
        End If
        If count = 5 Then
             pbtIdValidation (Cells(target.row, count))
             Exit Sub
        End If
        If count = 6 Then
            Call latDateValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 7 Then
            Call serviceValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 8 Then
            Call natureOfGoodsValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 9 Then
           Call originValidation(target.Offset(0, count - (target.Column)))
           Exit Sub
        End If
        If count = 10 Then
            Call destinationValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 11 Then
            Call flightValidation(target.Offset(0, count - (target.Column)), "Error. Flight in 1st Flight segment missing", True)
            Exit Sub
        End If
        If count = 12 Then
            Call flight1DateValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 13 Then
            Call transitStationValidation(target.Offset(0, count - (target.Column)), False, "2nd")
            Exit Sub
        End If
        If count = 14 Then
            Call transitFlightValidation(target.Offset(0, count - (target.Column)), "2nd", False)
            Exit Sub
        End If
        If count = 15 Then
            Call flightDateValidation(target.Offset(0, count - (target.Column)), "2nd", False)
            Exit Sub
        End If
         If count = 16 Then
            Call transitStationValidation(target.Offset(0, count - (target.Column)), True, "3rd")
            Exit Sub
        End If
        If count = 17 Then
            Call transitFlightValidation(target.Offset(0, count - (target.Column)), "3rd", True)
            Exit Sub
        End If
        If count = 18 Then
            Call flightDateValidation(target.Offset(0, count - (target.Column)), "3rd", True)
            Exit Sub
        End If
         If count = 19 Then
            Call transitStationValidation(target.Offset(0, count - (target.Column)), False, "4th")
            Exit Sub
        End If
        If count = 20 Then
            Call transitFlightValidation(target.Offset(0, count - (target.Column)), "4th", False)
            Exit Sub
        End If
        If count = 21 Then
            Call flightDateValidation(target.Offset(0, count - (target.Column)), "4th", False)
            Exit Sub
        End If
        If count = 22 Then
            Call allotmentIdValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
       
        If count = 23 Then
           Call allotmentDateValidation(target.Offset(0, count - (target.Column)))
           Exit Sub
        End If
         
        If count = 24 Then
            Call piecesValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        
        If count = 25 Then
            Call weightValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 26 Then
            Call volumeValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 27 Then
            Call uld1NumberValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 28 Then
            Call uld1IDValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 29 Then
            Call uld1VolumeValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 30 Then
            Call uld1WeightValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 31 Then
            Call uld1ContourCodeValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 32 Then
            Call uld2NumberValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 33 Then
            Call uld2IDValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 34 Then
            Call uld2VolumeValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 35 Then
            Call uld2WeightValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 36 Then
            Call uld2ContourCodeValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 37 Then
            Call cRateValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
        If count = 38 Then
            Call shipperCDBNumberValidation(target.Offset(0, count - (target.Column)))
            Exit Sub
        End If
    End If
    count = count + 1
  Loop
  
  End If
  
  'If no yellow coloured field is found, then remove Validation
  If count = 39 Then removeValidationError (target.row)
End Sub

'Functin to find out whether all cells from column 4 to 38 are empty
'This function returns boolean value

Public Function isAllcellsEmpty(target As Range) As Boolean
Dim emptyFlag As Boolean
emptyFlag = True
For Each oCell In Range(Cells(target.row, 4), Cells(target.row, 38))
   If Not IsEmpty(oCell) Then
   emptyFlag = False
   Exit For
   End If
Next
isAllcellsEmpty = emptyFlag
End Function

'Function added for PR 9832

Public Function isValidFlight(Flight As Variant) As Boolean
Dim Flag As Boolean
Dim char As Variant
Flag = False
If Len(Flight) = 5 Then
    If Flight Like "[a-zA-Z][a-zA-Z0-9]###" Then
        Flag = True
    ElseIf Flight Like "[a-zA-Z0-9][a-zA-Z]###" Then
        Flag = True
    End If
ElseIf Len(Flight) = 6 Then
    If Flight Like "[a-zA-Z0-9][a-zA-Z]####" Then Flag = True
    If Flight Like "[a-zA-Z][a-zA-Z0-9]####" Then Flag = True
ElseIf Len(Flight) = 7 Then
    char = Mid(Flight, 6, 1)
    If char Like "[a-zA-Z]" Then
        Flag = False
    ElseIf Flight Like "[a-zA-Z][a-zA-Z0-9]####[a-zA-Z]" Then
        Flag = True
    ElseIf Flight Like "[a-zA-Z0-9][a-zA-Z]####[a-zA-Z]" Then
        Flag = True
    End If
    
End If
isValidFlight = Flag
End Function

'This function handles the function to be called depending on the column\
'number. Along with the target, a boolean is passed to this functin to
'know whether it is a multiple cell change or single cell change

Private Sub dovalidate(target As Range, mulselection As Boolean)

If target.Column = 3 Then Exit Sub

' PR 9668 Added to trim the values entered
If target <> "" And Trim(target) = "" Then
    target = ""
End If
If target <> Trim(target) Then
    target = Trim(target)
End If
'End of 9668

'''Below code commented as the case is handled in pasteJustValue method.
'''Condition to avoid paste on read only cells
''If target <> "" And target.Locked = True Then
''    target.Font.Color = vbBlack
''    target = ""
''    target.Locked = True
''    Exit Sub
''End If

'PR 9666 Condition added to avoid automatic conversion of fields to hyperlinks
Dim value
value = Trim(target.value)
If target <> "" And target Like "*@*" And target.Hyperlinks.count <> 0 Then
    target.Hyperlinks.Delete
    If target.row <> 259 Then
    Cells(259, target.Column).Copy
    target.PasteSpecial Paste:=xlFormats
    Else
    Cells(11, target.Column).Copy
    target.PasteSpecial Paste:=xlFormats
    End If
    target.Locked = False
    target = value
    Exit Sub
End If
'End of 9666
    

If mulselection = True Then
    Dim rowNum As Integer
    Dim rowNum1 As Integer
    Dim eachCell As Range
    Dim emptyFlag As Boolean
    Dim cellcount As Integer
    
    
    emptyFlag = True
    For Each eachCell In Range(Cells(target.row, 4), Cells(target.row, 38))
    If eachCell <> "" Then
        emptyFlag = False
        Exit For
    End If
    Next
  
    Dim emptyFlagForAwb As Boolean
    emptyFlagForAwb = True
    For Each eachCell In Range(Cells(target.row, 5), Cells(target.row, 38))
    If eachCell <> "" Then
        emptyFlagForAwb = False
        Exit For
    End If
    Next
    
    Dim emptyFlagForConsolidation As Boolean
    emptyFlagForConsolidation = True
    For Each eachCell In Range(Cells(target.row, 7), Cells(target.row, 38))
    If eachCell <> "" Then
        emptyFlagForConsolidation = False
        Exit For
    End If
    Next
     
    'Exit sub commented by Ramachandran S since it is not validating the awb number field when the user fills only that field
    If target.Column = 4 And target <> "" And emptyFlagForAwb = True Then Exit Sub
    'Call awbValidation(target.Offset(0, 4 - target.Column))
    'End If
    
    If target.Column > 4 And target.Column < 39 Then
        
        If target <> "" Then
            
            Call awbValidation(target.Offset(0, 4 - target.Column))
        End If
        If target = "" And emptyFlag = True Then
        
            rowNum1 = target.row
            If target.Column <> 3 Then
                Cells(rowNum1, 3).Interior.Color = &HE8E8E8
                Cells(rowNum1, 3).value = ""
            End If
            target.Interior.Color = vbWhite
            cellcount = 4
            Do While cellcount < 39
            If (cellcount > 12 And cellcount < 16) Or (cellcount > 18 And cellcount < 22) Or (cellcount > 31 And cellcount < 37) Then
                If Cells(target.row, cellcount).Locked = True Then Cells(target.row, cellcount).Locked = False
                Cells(target.row, cellcount).Interior.Color = &HE8E8E8
                Cells(target.row, cellcount).Locked = False
            Else
                If Cells(target.row, cellcount).Locked = True Then Cells(target.row, cellcount).Locked = False
                Cells(target.row, cellcount).Interior.Color = vbWhite
                Cells(target.row, cellcount).Locked = False
            End If
            cellcount = cellcount + 1
            Loop
            Cells(target.row, 3).Interior.Color = &HE8E8E8
            removeValidationError (target.row)
        End If
        
        If Cells(target.row, 3) <> "Error. AWB information missing" Then
            If target.Column <> 5 And target.Column <> 6 Then
            If target <> "" And Cells(target.row, 5).value = "" Then
                If Cells(target.row, 7) = "" Then Cells(target.row, 7).Interior.Color = &H99FFFF
                If Cells(target.row, 8) = "" Then Cells(target.row, 8).Interior.Color = &H99FFFF
                If Cells(target.row, 9) = "" Then Cells(target.row, 9).Interior.Color = &H99FFFF
            End If
            End If
            If target = "" And emptyFlagForConsolidation = True And target.Column <> 6 Then
                If Cells(target.row, 7) = "" And Cells(target.row, 7).Locked = False Then Cells(target.row, 7).Interior.Color = vbWhite
                If Cells(target.row, 8) = "" And Cells(target.row, 8).Locked = False Then Cells(target.row, 8).Interior.Color = vbWhite
                If Cells(target.row, 9) = "" And Cells(target.row, 9).Locked = False Then Cells(target.row, 9).Interior.Color = vbWhite
                removeValidationError (target.row)
            End If
        Else
            Exit Sub
        End If
        
        If Cells(target.row, 4) = "" And emptyFlag = True Then
            rowNum1 = target.row
            If target.Column <> 3 Then
                Cells(rowNum1, 3).Interior.Color = &HE8E8E8
                Cells(rowNum1, 3).value = ""
            End If
            target.Interior.Color = vbWhite
            cellcount = 4
            Do While cellcount < 39
            If (cellcount > 12 And cellcount < 16) Or (cellcount > 18 And cellcount < 22) Or (cellcount > 31 And cellcount < 37) Then
                If Cells(target.row, cellcount).Locked = True Then Cells(target.row, cellcount).Locked = False
                Cells(target.row, cellcount).Interior.Color = &HE8E8E8
                Cells(target.row, cellcount).Locked = False
            Else
                If Cells(target.row, cellcount).Locked = True Then Cells(target.row, cellcount).Locked = False
                Cells(target.row, cellcount).Interior.Color = vbWhite
                Cells(target.row, cellcount).Locked = False
            End If
            cellcount = cellcount + 1
            Loop
            Cells(target.row, 3).Interior.Color = &HE8E8E8
            removeValidationError (target.row)
        End If
        If Cells(target.row, 4) = "" Then Exit Sub
    End If

    'PR 9573
    If target.Column = 4 And emptyFlag = True Then
    target.Interior.Color = vbWhite
    removeValidationError (target.row)
    ElseIf target.Column = 4 And emptyFlag = False Then
    Call displayValidationError(target, "Error.AWB information missing")
    End If
    
    If target.Column = 4 And target <> "" And emptyFlagForAwb = False Then
    Dim count As Integer
    count = 1
    For Each oCell In Range(target.Offset(0, 1), target.Offset(0, 34))
    If Not IsEmpty(oCell) Then
        Call dovalidate(target.Offset(0, count), False)
    End If
    count = count + 1
    Next
    End If
    'Call validationPriority(Target)
End If

 Select Case target.Column
 Case 4
 If mulselection = False Then Exit Sub
 Case 5
 Call pbtIdValidation(target)
 Case 6
 Call latDateValidation(target)
 Case 7
 Call serviceValidation(target)
 Case 8
 Call natureOfGoodsValidation(target)
 Case 9
 Call originValidation(target)
 Case 10
 Call destinationValidation(target)
 Case 11
 Call flightValidation(target, "Error. Flight in 1st Flight segment missing", True)
 Case 12
 Call flight1DateValidation(target)
 Case 13
 Call transitStationValidation(target, False, "2nd")
 
 Case 14
 
 Call transitFlightValidation(target, "2nd", False)
 
 Case 15
 
 Call flightDateValidation(target, "2nd", False)
 
 Case 16
 
 Call transitStationValidation(target, True, "3rd")
 
 Case 17
 
 Call transitFlightValidation(target, "3rd", True)
 
 Case 18
 
 Call flightDateValidation(target, "3rd", True)
 
 Case 19
 
 Call transitStationValidation(target, False, "4th")
 
 Case 20
 
 Call transitFlightValidation(target, "4th", False)
 
 Case 21
 
 Call flightDateValidation(target, "4th", False)
 
 Case 22
 Call allotmentIdValidation(target)
 Case 23
 Call allotmentDateValidation(target)
 Case 24
 Call piecesValidation(target)
 Case 25
 Call weightValidation(target)
 Case 26
 Call volumeValidation(target)
 Case 27
 Call uld1NumberValidation(target)
 Case 28
 Call uld1IDValidation(target)
 Case 29
 Call uld1VolumeValidation(target)
 Case 30
 Call uld1WeightValidation(target)
 Case 31
 Call uld1ContourCodeValidation(target)
 Case 32
 Call uld2NumberValidation(target)
 Case 33
 Call uld2IDValidation(target)
 Case 34
 Call uld2VolumeValidation(target)
 Case 35
 Call uld2WeightValidation(target)
 Case 36
 Call uld2ContourCodeValidation(target)
 Case 37
 Call cRateValidation(target)
 Case 38
 Call shipperCDBNumberValidation(target)
End Select
End Sub

'This function is called when an error occurs such as data missing or data invalid.
'Error message is passed to this function.

Private Sub displayValidationError(target As Range, errMsg As String)
  If errMsg <> "AWB" Then target.Interior.Color = &H99FFFF
  If errMsg <> "" And errMsg <> "AWB" Then
  target.Offset(0, (3 - target.Column)).Interior.Color = &H99FFFF
  target.Offset(0, (3 - target.Column)).value = errMsg
  End If
 End Sub

'This function is called to remove error messages in column 3

Private Sub removeValidationError(row As Integer)
 Cells(row, 3).Interior.Color = &HE8E8E8
 Cells(row, 3).value = ""
 End Sub


'This function performs date validations. It checks for the date format (ddMMMyy)
'and whether the date is valid or not.
'In case date is valid field turns white else field turns yellow and error message
'is displayed

Private Sub dateValidation(target As Range, Flag As Boolean, errMsg As String)

Dim maxDt As Integer
Dim dt As String
Dim temp As Integer
Dim mon As String
Dim monthTemp As String

If target.value = "" And errMsg <> "" Then
Call displayValidationError(target, errMsg)
Exit Sub
End If

If target.value Like "#???##" Then
target.value = "0" & target.value
End If

'PR 9602 If condition added to avoid 00 in date.
If target.value Like "00???##" Then
Call displayValidationError(target, "Error. Date format is invalid 1")
Exit Sub
End If

If Not target.value Like "##???##" Then
Call displayValidationError(target, "Error. Date format is invalid 2")
Exit Sub
End If




dt = Left(target.value, 2) & "-" & Mid(target.value, 3, 3) & "-" & Right(target.value, 2)
mon = LCase(Mid(target.value, 3, 3))
'PR 9620
Select Case mon
Case "mrz"
target = Left(target.value, 2) & "mar" & Right(target.value, 2)
Case "okt"
target = Left(target.value, 2) & "oct" & Right(target.value, 2)
Case "dez"
target = Left(target.value, 2) & "dec" & Right(target.value, 2)
Case "mai"
target = Left(target.value, 2) & "may" & Right(target.value, 2)
End Select

Select Case mon
Case "apr", "jun", "sep", "nov"
    maxDt = 30
Case "jan", "jul", "aug"
    maxDt = 31
Case "feb"
    If InStr(Year(dt) / 4, ".") <> 0 Then
    maxDt = 28
    Else
    maxDt = 29
    End If
    
'Special cases for german months with different format
Case "mar", "may", "oct", "dec", "mai", "okt", "dez"
    temp = Left(target.value, 2)
    If temp <= 31 Then
        If Not Mid(target.value, 3, 3) Like "[A-Z][A-Z][A-Z]" Then
            target.value = Left(target.value, 2) & UCase(Mid(target.value, 3, 3)) & Right(target.value, 2) 'PR 9569
        End If
        
        If Flag Then
            target.Interior.Color = vbWhite
        Else
            target.Interior.Color = &HE8E8E8
        End If
    Else
        Call displayValidationError(target, "Error. Date format is invalid 3")
    End If
    Exit Sub

End Select


temp = Left(target.value, 2)

If temp > maxDt Then
Call displayValidationError(target, "Error. Date format is invalid 4 ")
Exit Sub
End If

'added monthTemp for IM12374319, validation for JAN was failing
monthTemp = StrConv(Mid(target.value, 3, 3), vbUpperCase)
If Mid(target.value, 3, 3) Like "JAN" Or Mid(target.value, 3, 3) Like "jan" Then
    dt = Left(target.value, 2) & "-FEB-" & Right(target.value, 2)
End If

If Not IsDate(dt) Then
Call displayValidationError(target, "Error. Date format is invalid 5")
Exit Sub
End If

If monthTemp Like "JAN" Then
    dt = Left(target.value, 2) & "-JAN-" & Right(target.value, 2)
End If


If Flag Then
  If Not Mid(target.value, 3, 3) Like "[A-Z][A-Z][A-Z]" Then
  target.value = Left(target.value, 2) & UCase(Mid(target.value, 3, 3)) & Right(target.value, 2) 'PR 9569
  End If
  target.Interior.Color = vbWhite
Else
  If Not Mid(target.value, 3, 3) Like "[A-Z][A-Z][A-Z]" Then
  target.value = Left(target.value, 2) & UCase(Mid(target.value, 3, 3)) & Right(target.value, 2) 'PR 9569
  End If
  target.Interior.Color = &HE8E8E8
End If
End Sub


''Below code commented as the function is not used.

''Functin to find out whether all cells from column 4 to 38 are empty
''This function returns boolean value

'Public Function isAllcellsEmpty(target As Range) As Boolean
'Dim emptyFlag As Boolean
'emptyFlag = True
'For Each oCell In Range(Cells(target.row, 4), Cells(target.row, 38))
'   If Not IsEmpty(oCell) Then
'   emptyFlag = False
'   Exit For
'   End If
'Next
'isAllcellsEmpty = emptyFlag
'End Function










Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

'This function added to remove Autofilters before close

Private Sub Workbook_BeforeClose(Cancel As Boolean)
Sheet1.Cells(3, 40).value = "FILECLOSED"
Sheet1.AutoFilterMode = False

'PR 9871 - Function is called to reset all toolbars while closing the file.
'Call ResetAllToolbars
Call enableOptions 'Added for DTS 7590 (Husna)

On Error GoTo label1
ActiveWorkbook.Save
label1:
End Sub


'This function is called when the excel sheet is opened.

Private Sub Workbook_Open()

'PR 9871 - Function is called to reset all toolbars while opening the file.
'Call ResetAllToolbars

'To lock the sheet
Sheet1.Protect Password:="asdf12**", userInterfaceOnly:=True
'Grouping buttons (+/-) is enabled and autofilter is enabled
Sheet1.EnableOutlining = True
Sheet1.EnableAutoFilter = True
If Not Sheet1.AutoFilterMode Then Sheet1.Range("a10:al10").AutoFilter
'PR 9670 Scroll Area is limited to 46 columns but columns from 38 to 46
'is made hidden.
Sheet1.ScrollArea = Range(Cells(2, 1), Cells(260, 46)).Address

'Column autofit while opening the sheet
Sheet1.Columns.AutoFit

'To hide the flight segment and ULD fields
Range(Columns(13), Columns(21)).Hidden = True
Range(Columns(32), Columns(36)).Hidden = True

'To hide AN,AM,AO and AP columns
Columns(39).Hidden = True
Columns(40).Hidden = True
Columns(41).Hidden = True
Columns(42).Hidden = True

'PR 9670. Columns are made hidden( while scrolling last field was not visible before)
Columns(43).Hidden = True
Columns(44).Hidden = True
Columns(45).Hidden = True
Columns(46).Hidden = True
Rows(261).Hidden = True
'End or PR 9670


Sheet1.Cells(3, 40).value = "FILEOPEN"

'To place the pointer in the D11 field
Sheet1.Range("d11").Select

'To avoid format changes during copy paste
Call DisablePaste 'DisablePaste function is present in module1
Call DisableOptions 'Added for DTS 7590 (Husna)

On Error GoTo label1
ActiveWorkbook.Save

label1:
End Sub


INQUEST-PP=macro
