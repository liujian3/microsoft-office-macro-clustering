Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Const PARAMDATA = 1
Const WSCOMPARISON = 2

'Criteria labels
Const LBLYEAR = "A4"
Const LBLASSETGRP = "A5"
Const LBLASSETCODE = "A6"
Const LBLCU = "A7"
Const LBLPROJECT = "A8"
Const LBLFISCALGRP = "E5"
Const LBLITEMCODE = "E6"
Const LBLCC = "E7"

'Criteria values
Const VALYEAR = "B4"
Const VALASSETGRP = "B5"
Const VALASSETCODE = "B6"
Const VALCU = "B7"
Const VALPROJECT = "B8"
Const VALFISCALGRP = "F5"
Const VALITEMCODE = "F6"
Const VALCC = "F7"

Const LASTCOLUMN = "Q"

Dim App                             As esl.Application
Dim goCompany                       As esl.COMPANY

'Header column labels - For Grouping sheet
Dim HCELLFISCALGROUP As String
Dim HCELLDESCRIPTION As String
Dim HCELLASSETCODE As String
Dim HCELLASSETDESC As String
Dim HCELLASSETGROUP As String
Dim HCELLITEMCODE As String
Dim HCELLCOSTCENTER As String
Dim HCELLCOSTUNIT As String
Dim HCELLPROJECT As String
Dim HCELLDEPRMETHOD As String
Dim HCELLYEAR As String
Dim HCELLANNUALECODEPR As String
Dim HCELLANNUALFISDEPR As String
Dim HCELLDIFFECOFISDEPR As String
Dim HCELLANNUALECOBV As String
Dim HCELLANNUALFISBV As String
Dim HCELLDIFFECOFISBV As String

''Local variable
Dim Year_From As String
Dim Year_To As String
Dim Year_All As Boolean

Dim AssetGroup_From As String
Dim AssetGroup_To As String
Dim AssetGroup_All As Boolean

Dim FiscalGroup_From As String
Dim FiscalGroup_To As String
Dim FiscalGroup_All As Boolean

Dim AssetCode_From As String
Dim AssetCode_To As String
Dim Assetcode_All As Boolean

Dim ItemCode_From As String
Dim ItemCode_To As String
Dim Itemcode_All As Boolean

Dim CostCenter_From As String
Dim CostCenter_To As String
Dim CostCenter_All As Boolean

Dim CostUnit_From As String
Dim CostUnit_To As String
Dim CostUnit_All As Boolean

Dim Project_From As String
Dim Project_To As String
Dim Project_All As Boolean

Dim stActive As Boolean
Dim stSold As Boolean
Dim stInactive As Boolean
Dim stWriteOff As Boolean

Dim lLastRow As Long
Dim sBookValue As String
Dim vBVRec As Variant

Public Sub OnRefreshInitialize(ByRef poCompany As Object)
    'Create instance
    Set App = New esl.Application
    
    ''BR 30.588.134 - Excel sheet name can only support up to 31 charater, if more will cause error
    ThisWorkbook.Worksheets(WSCOMPARISON).Name = Left$(App.Term.String(35521, "Overview fiscal asset listing"), 31)
    ThisWorkbook.Worksheets(WSCOMPARISON).Range("A2").Value = App.Term.String(35517, "Differences between economic and fiscal depreciation amount")
    
    Set goCompany = New esl.COMPANY
    Debug.Assert Not poCompany Is Nothing
    Set goCompany = poCompany
    
End Sub

Public Sub OnRefreshBeforeReports()
    
    Dim lLastRow As Long
    
    GetSlicData
    InitCol
    
    Worksheets(WSCOMPARISON).Activate
    Call FillColor(WSCOMPARISON)
        
    With ThisWorkbook
        .Colors(1) = RGB(227, 238, 240)
        .Colors(52) = RGB(200, 220, 225)
        .Colors(53) = RGB(173, 190, 201)
        
        ''Year
        If Year_All Then
            Worksheets(WSCOMPARISON).Range(VALYEAR).Value = "'" & App.Term.String(5614, "All")
        Else
            Worksheets(WSCOMPARISON).Range(VALYEAR).Value = "'" & Year_From & " - " & Year_To
        End If
        
        ''Asset group
        If AssetGroup_All Then
            Worksheets(WSCOMPARISON).Range(VALASSETGRP).Value = "'" & App.Term.String(5614, "All")
        Else
            If AssetGroup_From <> "" And AssetGroup_To <> "" Then
                Worksheets(WSCOMPARISON).Range(VALASSETGRP).Value = "'" & AssetGroup_From & " - " & AssetGroup_To
            ElseIf AssetGroup_From <> "" Then
                Worksheets(WSCOMPARISON).Range(VALASSETGRP).Value = "'" & App.Term.String(5007, "From") & " " & AssetGroup_From
            Else
                Worksheets(WSCOMPARISON).Range(VALASSETGRP).Value = "'" & App.Term.String(8165, "To") & " " & AssetGroup_To
            End If
        End If
        
        ''Fiscal group
        If FiscalGroup_All Then
            Worksheets(WSCOMPARISON).Range(VALFISCALGRP).Value = "'" & App.Term.String(5614, "All")
        Else
            If FiscalGroup_From <> "" And FiscalGroup_To <> "" Then
                Worksheets(WSCOMPARISON).Range(VALFISCALGRP).Value = "'" & FiscalGroup_From & " - " & FiscalGroup_To
            ElseIf FiscalGroup_From <> "" Then
                Worksheets(WSCOMPARISON).Range(VALFISCALGRP).Value = "'" & App.Term.String(5007, "From") & " " & FiscalGroup_From
            Else
                Worksheets(WSCOMPARISON).Range(VALFISCALGRP).Value = "'" & App.Term.String(8165, "To") & " " & FiscalGroup_To
            End If
        End If
        
        ''Asset code
        If Assetcode_All Then
            Worksheets(WSCOMPARISON).Range(VALASSETCODE).Value = "'" & App.Term.String(5614, "All")
        Else
            If AssetCode_From <> "" And AssetCode_To <> "" Then
                Worksheets(WSCOMPARISON).Range(VALASSETCODE).Value = "'" & AssetCode_From & " - " & AssetCode_To
            ElseIf AssetCode_From <> "" Then
                Worksheets(WSCOMPARISON).Range(VALASSETCODE).Value = "'" & App.Term.String(5007, "From") & " " & AssetCode_From
            Else
                Worksheets(WSCOMPARISON).Range(VALASSETCODE).Value = "'" & App.Term.String(8165, "To") & " " & AssetCode_To
            End If
        End If
        
        ''Item code
        If Itemcode_All Then
            Worksheets(WSCOMPARISON).Range(VALITEMCODE).Value = "'" & App.Term.String(5614, "All")
        Else
            If ItemCode_From <> "" And ItemCode_To <> "" Then
                Worksheets(WSCOMPARISON).Range(VALITEMCODE).Value = "'" & ItemCode_From & " - " & ItemCode_To
            ElseIf ItemCode_From <> "" Then
                Worksheets(WSCOMPARISON).Range(VALITEMCODE).Value = "'" & App.Term.String(5007, "From") & " " & ItemCode_From
            Else
                Worksheets(WSCOMPARISON).Range(VALITEMCODE).Value = "'" & App.Term.String(8165, "To") & " " & ItemCode_To
            End If
        End If
        
        ''Cost center
        If CostCenter_All Then
            Worksheets(WSCOMPARISON).Range(VALCC).Value = "'" & App.Term.String(5614, "All")
        Else
            If CostCenter_From <> "" And CostCenter_To <> "" Then
                Worksheets(WSCOMPARISON).Range(VALCC).Value = "'" & CostCenter_From & " - " & CostCenter_To
            ElseIf CostCenter_From <> "" Then
                Worksheets(WSCOMPARISON).Range(VALCC).Value = "'" & App.Term.String(5007, "From") & " " & CostCenter_From
            Else
                Worksheets(WSCOMPARISON).Range(VALCC).Value = "'" & App.Term.String(8165, "To") & " " & CostCenter_To
            End If
        End If
        
        ''Cost unit
        If CostUnit_All Then
            Worksheets(WSCOMPARISON).Range(VALCU).Value = "'" & App.Term.String(5614, "All")
        Else
            If CostUnit_From <> "" And CostUnit_To <> "" Then
                Worksheets(WSCOMPARISON).Range(VALCU).Value = "'" & CostUnit_From & " - " & CostUnit_To
            ElseIf CostUnit_From <> "" Then
                Worksheets(WSCOMPARISON).Range(VALCU).Value = "'" & App.Term.String(5007, "From") & " " & CostUnit_From
            Else
                Worksheets(WSCOMPARISON).Range(VALCU).Value = "'" & App.Term.String(8165, "To") & " " & CostUnit_To
            End If
        End If
        
        ''Project
        If Project_All Then
            Worksheets(WSCOMPARISON).Range(VALPROJECT).Value = "'" & App.Term.String(5614, "All")
        Else
            If Project_From <> "" And Project_To <> "" Then
                Worksheets(WSCOMPARISON).Range(VALPROJECT).Value = "'" & Project_From & " - " & Project_To
            ElseIf Project_From <> "" Then
                Worksheets(WSCOMPARISON).Range(VALPROJECT).Value = "'" & App.Term.String(5007, "From") & " " & Project_From
            Else
                Worksheets(WSCOMPARISON).Range(VALPROJECT).Value = "'" & App.Term.String(8165, "To") & " " & Project_To
            End If
        End If
        
    End With
    
    'Define criteria columns
    With Worksheets(WSCOMPARISON)
        .Range(LBLYEAR).Value = App.Term.String(1321, "Year")
        .Range(LBLASSETGRP).Value = App.Term.String(5514, "Asset group")
        .Range(LBLASSETCODE).Value = App.Term.String(6057, "Serial number")
        .Range(LBLITEMCODE).Value = App.Term.String(1102, "Item code")
        .Range(LBLCC).Value = App.Term.String(8494, "Cost center")
        .Range(LBLCU).Value = App.Term.String(1194, "Cost unit")
        .Range(LBLPROJECT).Value = App.Term.String(8657, "Project")
        .Range(LBLFISCALGRP).Value = App.Term.String(30306, "Fiscal group")
    End With
    
    'Generating SQL query dynamically
    Call GenerateSQLQuery(WSCOMPARISON)
    
    'Define grouping header
    With Worksheets(WSCOMPARISON)
        .Range(HCELLFISCALGROUP).Value = App.Term.String(30306, "Fiscal group")
        .Range(HCELLDESCRIPTION).Value = App.Term.String(4243, "Description")
        .Range(HCELLASSETCODE).Value = App.Term.String(6057, "Serial number")
        .Range(HCELLASSETDESC).Value = App.Term.String(4243, "Description")
        .Range(HCELLASSETGROUP).Value = App.Term.String(5514, "Asset group")
        .Range(HCELLITEMCODE).Value = App.Term.String(1102, "Item code")
        .Range(HCELLCOSTCENTER).Value = App.Term.String(8494, "Cost center")
        .Range(HCELLCOSTUNIT).Value = App.Term.String(1194, "Cost unit")
        .Range(HCELLPROJECT).Value = App.Term.String(8657, "Project")
        .Range(HCELLDEPRMETHOD).Value = App.Term.String(6393, "Depreciation method")
        .Range(HCELLYEAR).Value = App.Term.String(1321, "Year")
        .Range(HCELLANNUALECODEPR).Value = App.Term.String(35518, "Annual econ. depr.")
        .Range(HCELLANNUALFISDEPR).Value = App.Term.String(35519, "Annual fiscal depr.")
        .Range(HCELLDIFFECOFISDEPR).Value = App.Term.String(35520, "Differences econ. and fiscal")
        .Range(HCELLANNUALECOBV).Value = App.Term.String(35574, "Annual econ. book value")
        .Range(HCELLANNUALFISBV).Value = App.Term.String(35575, "Annual fiscal book value")
        .Range(HCELLDIFFECOFISBV).Value = App.Term.String(35576, "Diff. econ. and fiscal book value")
        
    End With
        
    'Clear report data
    'Select the last used rows and columns
    lLastRow = Worksheets(WSCOMPARISON).UsedRange.Rows.Count + 1
    Call DeleteCellValue(WSCOMPARISON, lLastRow)
    Worksheets(WSCOMPARISON).Range("A12:A" & lLastRow).NumberFormat = "@" 'G/L account
    
End Sub

Public Sub OnRefreshAfterReports()
    Dim i As Integer
    Dim j As Integer
    Dim iBeforeGroupingLastNr As Integer
    Dim iAfterGroupingLastNr As Integer

    'Check if resultset is empty
    If IsEmpty(Worksheets(WSCOMPARISON).Range("A12").Value) Then
        App.Message 0, App.Term.String(8075, "No data which meets the criteria entered"), App.Term.String(35521, "Overview fiscal asset listing"), edlgInfo
        Application.DisplayAlerts = False
        Application.Quit
        Set App = Nothing
        Exit Sub
    End If
    DoEvents
    
    If lLastRow = 0 Then lLastRow = Worksheets(WSCOMPARISON).UsedRange.Rows.Count + 3
    
    If Not IsEmpty(Worksheets(WSCOMPARISON).Range("A12").Value) Then
        'Clear unnecessary data
        Call FormatReportLayout(WSCOMPARISON, lLastRow)
        ''to manually assign the actual bv
        Call ManualAssignBV(WSCOMPARISON)
        'Include grouping and sorting order
        Call SortAndGrpReport(WSCOMPARISON, lLastRow)
        Call FormatCell(WSCOMPARISON)
    End If
    
    Worksheets(WSCOMPARISON).Activate
    
    Set App = Nothing

End Sub

Sub GetSlicData()
    
    With ThisWorkbook
        Year_All = .Names("YearRange.All").RefersToRange.Value
        Year_From = .Names("YearRange.From").RefersToRange.Value
        Year_To = .Names("YearRange.To").RefersToRange.Value
        
        AssetGroup_All = .Names("AssetGroup.All").RefersToRange.Value
        AssetGroup_From = .Names("AssetGroup.From").RefersToRange.Value
        AssetGroup_To = IIf(InStr(.Names("AssetGroup.To").RefersToRange.Value, Chr(255)) = 1, "", .Names("AssetGroup.To").RefersToRange.Value)
        
        FiscalGroup_All = .Names("FiscalGroup.All").RefersToRange.Value
        FiscalGroup_From = .Names("FiscalGroup.From").RefersToRange.Value
        FiscalGroup_To = IIf(InStr(.Names("FiscalGroup.To").RefersToRange.Value, Chr(255)) = 1, "", .Names("FiscalGroup.To").RefersToRange.Value)
        
        Assetcode_All = .Names("AssetCode.All").RefersToRange.Value
        AssetCode_From = .Names("AssetCode.From").RefersToRange.Value
        AssetCode_To = IIf(InStr(.Names("AssetCode.To").RefersToRange.Value, Chr(255)) = 1, "", .Names("AssetCode.To").RefersToRange.Value)
        
        Itemcode_All = .Names("ItemCode.All").RefersToRange.Value
        ItemCode_From = .Names("ItemCode.From").RefersToRange.Value
        ItemCode_To = IIf(InStr(.Names("ItemCode.To").RefersToRange.Value, Chr(255)) = 1, "", .Names("ItemCode.To").RefersToRange.Value)
        
        CostCenter_All = .Names("CostCenter.All").RefersToRange.Value
        CostCenter_From = .Names("CostCenter.From").RefersToRange.Value
        CostCenter_To = IIf(InStr(.Names("CostCenter.To").RefersToRange.Value, Chr(255)) = 1, "", .Names("CostCenter.To").RefersToRange.Value)
        
        CostUnit_All = .Names("CostUnit.All").RefersToRange.Value
        CostUnit_From = .Names("CostUnit.From").RefersToRange.Value
        CostUnit_To = IIf(InStr(.Names("CostUnit.To").RefersToRange.Value, Chr(255)) = 1, "", .Names("CostUnit.To").RefersToRange.Value)
        
        Project_All = .Names("Project.All").RefersToRange.Value
        Project_From = .Names("Project.From").RefersToRange.Value
        Project_To = IIf(InStr(.Names("Project.To").RefersToRange.Value, Chr(255)) = 1, "", .Names("Project.To").RefersToRange.Value)
        
        stActive = .Names("fipActive").RefersToRange.Value
        stSold = .Names("fipSold").RefersToRange.Value
        stInactive = .Names("fipInactive").RefersToRange.Value
        stWriteOff = .Names("fipWrittenoff").RefersToRange.Value
        
    End With
End Sub

Sub InitCol()
    
    HCELLFISCALGROUP = "A11"
    HCELLDESCRIPTION = "B11"
    HCELLASSETCODE = "C11"
    HCELLASSETDESC = "D11"
    HCELLASSETGROUP = "E11"
    HCELLITEMCODE = "F11"
    HCELLCOSTCENTER = "G11"
    HCELLCOSTUNIT = "H11"
    HCELLPROJECT = "I11"
    HCELLDEPRMETHOD = "J11"
    HCELLYEAR = "K11"
    HCELLANNUALECODEPR = "L11"
    HCELLANNUALFISDEPR = "M11"
    HCELLDIFFECOFISDEPR = "N11"
    HCELLANNUALECOBV = "O11"
    HCELLANNUALFISBV = "P11"
    HCELLDIFFECOFISBV = "Q11"
    
End Sub

Sub FillColor(sWorksheet)
    Dim lCnt As Long
    Dim LastCell As String
    
    LastCell = LASTCOLUMN
    
    Range("A1").Select
    Selection.Interior.Color = RGB(200, 220, 225)
    
    Range("A2").Select
    Selection.Interior.Color = RGB(200, 220, 225)
    
    Range("A11:" & LastCell & "11").Select
    Selection.Interior.Color = RGB(173, 190, 201)
    For lCnt = 1 To 2
        Range("A" & CStr(lCnt) & ":" & LastCell & CStr(lCnt)).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlBottom
            .WrapText = False
            .Orientation = 0
            .AddIndent = False
            .ShrinkToFit = False
            .MergeCells = False
        End With
        Selection.Merge
        With Selection.Interior
            If lCnt = 1 Then
                .Color = RGB(173, 190, 201)
            Else
                .Color = RGB(200, 220, 225)
            End If
            .Pattern = xlSolid
        End With
    Next lCnt
    
End Sub

Sub DeleteCellValue(sWorksheet, lLastRow)
    Dim sLastCell As String
    
    On Error GoTo ErrHdl
    Worksheets(sWorksheet).Activate
    sLastCell = LASTCOLUMN
    
    With Worksheets(sWorksheet)
        .Range("A12:" & sLastCell & "12").Select
        Selection.ClearContents
               
        .Range("A12:" & sLastCell & lLastRow).Select
        Selection.Rows.Ungroup
        Selection.Rows.Ungroup
        Selection.Rows.Ungroup
        
        'unbold all cell
        .Range("A12:" & sLastCell & lLastRow).Font.Bold = False
        
        Cells.Select
        Selection.Delete
        
        'Set focus back to cell
        .Range("A12").Select
    End With

Exit Sub
ErrHdl:
    With Worksheets(sWorksheet)
        'unbold all cell
        .Range("A13:" & sLastCell & lLastRow).Font.Bold = False
        
        'Set focus back to cell
        .Range("A13").Select
        .Range("A13:" & sLastCell & lLastRow).Select
        Selection.Delete
        
        'Set focus back to cell
        .Range("A12").Select
    End With
End Sub

'Define report layout
Sub FormatReportLayout(sWorksheet, lLastRow)
    
    Dim i As Integer
    Dim sFormat As String
    Dim nPrecision As Integer
    nPrecision = goCompany.CurrencyCalculator.CurrencyAmountPrecision(goCompany.CurrencyCalculator.DefaultCurrency)
    sFormat = "#,##0." & String(nPrecision, "0")
    
    'Activate worksheet
    Worksheets(sWorksheet).Activate

    'Disable some stuff:
    With ActiveWindow
        .DisplayWorkbookTabs = True
        .DisplayGridlines = False
        .FreezePanes = False
        .DisplayZeros = True
        .Zoom = 100
    End With

    Application.DisplayFormulaBar = True
    Application.ScreenUpdating = True
    Application.StatusBar = ""
        
    'Define column width:
    With Worksheets(sWorksheet)
        .Columns("A").ColumnWidth = 25# 'fiscal group
        .Columns("B").ColumnWidth = 30# 'desc
        .Columns("C").ColumnWidth = 25# 'serial number
        .Columns("D").ColumnWidth = 30# 'desc
        .Columns("E").ColumnWidth = 25# 'asset group
        .Columns("F").ColumnWidth = 25# 'item code
        .Columns("G").ColumnWidth = 25# 'cost center
        .Columns("H").ColumnWidth = 25# 'cost unit
        .Columns("I").ColumnWidth = 25# 'project
        .Columns("J").ColumnWidth = 25# 'depr method
        .Columns("K").ColumnWidth = 10# 'year
        .Columns("L").ColumnWidth = 18# 'annual eco depr
        .Columns("M").ColumnWidth = 18# 'annual fiscal depr
        .Columns("N").ColumnWidth = 18# 'dif depr
        .Columns("O").ColumnWidth = 18# 'annual eco bv
        .Columns("P").ColumnWidth = 18# 'annual fisac bv
        .Columns("Q").ColumnWidth = 18# 'dif bv
        
        .Range("L12:L" & lLastRow).NumberFormat = sFormat
        .Range("M12:M" & lLastRow).NumberFormat = sFormat
        .Range("N12:N" & lLastRow).NumberFormat = sFormat
        .Range("O12:O" & lLastRow).NumberFormat = sFormat
        .Range("P12:P" & lLastRow).NumberFormat = sFormat
        .Range("Q12:Q" & lLastRow).NumberFormat = sFormat
        
        'Set rowwidth
        .Range("A12").RowHeight = 20#
    End With
    
End Sub

'If duplicate cell value found for G/L or Assetgroup then suppress it
'If subtotal or grandtotal field then bold it

Sub FormatCell(sWorksheet)
    Dim i As Long
    Dim sLastCell As String
    Dim lLastRow As Long
    Dim sSerialNumber As String
    Dim bNewRow As Boolean
    Dim bFlag As Boolean
        
    sLastCell = LASTCOLUMN
    
    Worksheets(sWorksheet).Activate
    lLastRow = Worksheets(sWorksheet).UsedRange.Rows.Count + 1
    With Worksheets(sWorksheet)
        .Range("A4:" & sLastCell & lLastRow).Select
        Selection.Font.Name = "Verdana"
        'Selection.Font.FontStyle = "Normal"
        Selection.Font.Size = 9
        .Range("A12:" & sLastCell & "12").Font.Bold = False
        .Range("A11:" & sLastCell & "11").Font.Bold = True
        
        ''set for the first row
        bNewRow = True
        bFlag = False
        i = 12
        
        Do While bFlag = False
            If .Rows(i).Summary Then
                ''set for the next new row
                bNewRow = True
                
                Rows(i + 1 & ":" & i + 1).Select
                Selection.Insert Shift:=xlDown
                
                Call Insertcolour("A" & i & ":" & sLastCell & i, 52)
                .Range("P" & i & ":" & sLastCell & i).Font.Bold = True
                
                i = i + 1
                
            ElseIf .Range("A" & i).Value = "" Then
                i = i - 2
                Call AdjRowGrdTotal(i)
                Call Insertcolour("A" & i & ":" & sLastCell & i, 53)
                Call DrawLine("A", sLastCell, i)
                .Range("P" & i + 1 & ":" & sLastCell & i + 1).Font.Bold = True
                Exit Do
            Else
                If bNewRow Then
                    ''new row
                    bNewRow = False
                    
                    sSerialNumber = .Range("C" & i).Value
                Else
                    ''subsequent row
                    .Range("A" & i & ":B" & i).Value = ""
                    
                    If sSerialNumber = .Range("C" & i).Value Then
                        .Range("C" & i & ":J" & i).Value = ""
                    Else
                        sSerialNumber = .Range("C" & i).Value
                    End If
                                        
                End If
                
            End If
            
            i = i + 1
        Loop
        
        .Range("A12").Select
    End With

End Sub

Sub Insertcolour(sRow As String, ClrIndex As Integer)
    Range(sRow).Select
    With Selection.Interior
        .ColorIndex = ClrIndex
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
    End With
End Sub

Sub DrawLine(StartCol, EndCol, lRow)
    'draw line
    Range(StartCol & lRow & ":" & EndCol & lRow).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlDouble
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
End Sub

Sub AdjRowGrdTotal(lRow)
''    Rows(lRow & ":" & lRow).Select
''    Selection.Insert Shift:=xlDown
    Rows(lRow & ":" & lRow).Select
    Selection.Interior.ColorIndex = RGB(0, 0, 0)
End Sub

Sub SortAndGrpReport(sWorksheet, lLastRow)
    Dim LastRowNr As Long
    Dim bDummy As Boolean
    Dim i As Long
    Dim tmp As String
    
    Worksheets(sWorksheet).Activate
    With Worksheets(sWorksheet)
        .Range("A12").Select
        
        Selection.SUBTOTAL GroupBy:=1, Function:=xlSum, TotalList:=Array( _
        12, 13, 14), Replace:=False, PageBreaks:=False, SummaryBelowData:=xlSummaryBelow
        
        .Range("A12:" & LASTCOLUMN & lLastRow).Rows.AutoFit
    End With
End Sub

Sub GenerateSQLQuery(sWorksheet As String)

    ''tanj42445 - 20080805 - BR 27.165.315
    ''Issue: The return result is wrong when there is an actual depreciation record
    ''Solution: The whole query have to be reconstruct again in order to retrieve properly the record
    ''          Now the query will be base on a union of 2 query.
    ''          First query is to retrieve the Fiscal report data.
    ''          Second query is to retrieve the actual budget data.
    
    On Error GoTo Failed
    Dim sSqlMain As String
    Dim sSqlSelect As String
    Dim sSqlWhere As String
    Dim sSqlGroup As String
    Dim sSqlOrder As String
    Dim sSqlTable As String
    Dim sSqlUnion1Select As String
    Dim sSqlUnion1Table As String
    Dim sSqlUnion1Where As String
    Dim sSqlUnion1Group As String
    Dim sSqlUnion2Select As String
    Dim sSqlUnion2Table As String
    Dim sSqlUnion2Where As String
    Dim sSqlUnion2Group As String
    Dim sStatus As String
    Dim EdlConn As EdlConnection
    Dim clsGeneral As Easzzptran.clsGeneral
    Dim rngDeprBS As String
    Dim rngAssetAC As String
    Dim vRet As Variant
    Dim sInvestment As String
    Dim sRevaluation As String
    Dim sCurYrDep As String
    Dim sDepreciation As String
    Dim sDisposal As String
    Dim lCnt As Long
    Dim lLngIndex As Long
    
    lLngIndex = goCompany.MultiLang.DefaultIndex
    
    Set EdlConn = goCompany
    
    Set clsGeneral = New clsGeneral
    App.ConnectObject clsGeneral, goCompany, App.Term
    
    sSqlMain = "SELECT DISTINCT fg.deprbs, fg.assetac FROM (SELECT deprbs,assetac FROM fagrp) AS fg"
     'End BR 21.165.796
     
    vRet = EdlConn.Query(sSqlMain, , edlForce2dim)
     
    If Not IsEmpty(vRet) Then
        For lCnt = LBound(vRet) To UBound(vRet)
            'Range DepreBS
            If Len(Trim(vRet(lCnt, 1))) <> 0 Then
                rngDeprBS = ", " & EdlConn.Literal(vRet(lCnt, 1))
            End If
            
            'Range AssetAC
            If Len(Trim(vRet(lCnt, 2))) <> 0 Then
                rngAssetAC = ", " & EdlConn.Literal(vRet(lCnt, 2))
            End If
        Next
        
        If Len(rngDeprBS) > 0 Then rngDeprBS = Mid$(rngDeprBS, 2)
        If Len(rngAssetAC) > 0 Then rngAssetAC = Mid$(rngAssetAC, 2)
    Else
        rngDeprBS = "''"
        rngAssetAC = "''"
    End If
    
    clsGeneral.OverRngDeprBS = rngDeprBS
    clsGeneral.OverRngAssetAC = rngAssetAC
    
    clsGeneral.GetAssetBalanceListQuery sInvestment, sRevaluation, sCurYrDep, _
        sDepreciation, sDisposal, sBookValue, Year_From
    
    ''tanj42445 - 20081006 - BR 28.253.790
    ''Issue: Fiscal group didnt display when there is economic depreciation
    ''Solution: Change the 'MIN' to 'MAX' for FiscalGroupCode, FiscalGroupDescription & FiscalDepreciation
    sSqlSelect = "SELECT MAX(FiscalGroupCode) AS FiscalGroupCode, MAX(FiscalGroupDescription) AS FiscalGroupDescription, FiscalAssetCode, " & vbCrLf _
        & "MIN(Description) AS Description, MIN(AssetGroup) AS AssetGroup, ItemCode, MIN(CostCenter) AS CostCenter, MIN(CostUnit) AS CostUnit, " & vbCrLf _
        & "MIN(Project) AS Project, MAX(FiscalDepreciation) AS FiscalDepreciation, FinancialYear, " & vbCrLf _
        & "SUM(EcoDepr) AS EcoDepr, SUM(RoundedAnnualDepreciation) AS RoundedAnnualDepreciation, " & vbCrLf _
        & "(SUM(RoundedAnnualDepreciation) - SUM(EcoDepr)) AS DiffDepr, " & vbCrLf _
        & "SUM(EcoBV) AS EcoBV, SUM(BookValue) AS BookValue, (SUM(BookValue) - SUM(EcoBV)) AS DiffBV  " & vbCrLf

    ''Construction of the First union query
    sSqlUnion1Select = "SELECT ('''' + fr.FiscalGroupCode) AS FiscalGroupCode, ('''' + fg.Description_" & lLngIndex & ") AS FiscalGroupDescription, " & vbCrLf _
        & "('''' + fr.FiscalAssetCode) AS FiscalAssetCode, ('''' + fa.Description_" & lLngIndex & ") AS Description, " & vbCrLf _
        & "('''' + fa.AssetGroup) AS AssetGroup, ('''' + fr.ItemCode) AS ItemCode, " & vbCrLf _
        & "('''' + fr.CostCenter) AS CostCenter, ('''' + fr.CostUnit) AS CostUnit, " & vbCrLf _
        & "('''' + fr.Project) AS Project, ('''' + fd.Description_" & lLngIndex & ") AS FiscalDepreciation, fr.FinancialYear AS FinancialYear, " & vbCrLf _
        & "0 AS EcoDepr, SUM(fr.RoundedAnnualDepreciation) AS RoundedAnnualDepreciation, " & vbCrLf _
        & "0 AS EcoBV, SUM(fr.BookValue) As BookValue " & vbCrLf
    
    sSqlUnion1Table = "FROM FiscalReports fr " & vbCrLf _
        & "INNER JOIN FiscalGroups fg ON fr.FiscalGroupCode = fg.Code " & vbCrLf _
        & "INNER JOIN FiscalAssets fa ON fr.FiscalAssetCode = fa.Code AND fr.ItemCode = fa.ItemCode " & vbCrLf _
        & "INNER JOIN FiscalDepreciations fd ON fr.FiscalDepreciationCode = fd.Code " & vbCrLf _
        & "INNER JOIN ItemNumbers ac ON  fr.FiscalAssetCode = ac.Number AND fr.ItemCode = ac.ItemCode " & vbCrLf
    
    ''tanj42445 - 20081006 - BR 28.253.790
    ''Issue: Report not display, cause by query error
    ''Solution: Should use language index
    sSqlUnion1Group = " GROUP BY fr.FiscalGroupCode, fg.Description_" & lLngIndex & ", fr.FiscalAssetCode, " & vbCrLf _
        & "fa.Description_" & lLngIndex & ", fa.AssetGroup, fr.ItemCode, fr.CostCenter, fr.CostUnit, " & vbCrLf _
        & "fr.Project , fd.Description_" & lLngIndex & ", fr.FinancialYear " & vbCrLf
    ''End of Construction of the First union query
    
    ''Construction of the Second union query
    ''tanj42445 - 20081006 - BR 28.253.790
    ''Added '-' to FiscalDepreciation
    sSqlUnion2Select = "SELECT '-' AS FiscalGroupCode, '-' AS FiscalGroupDescription, " & vbCrLf _
        & "('''' + gmt.facode) AS FiscalAssetCode, MIN('''' + fa.Description_" & lLngIndex & ") AS Description, " & vbCrLf _
        & "MIN('''' + fa.AssetGroup) AS AssetGroup, ('''' + gmt.artcode) AS ItemCode, " & vbCrLf _
        & "MIN('''' + ac.CostCenter) AS CostCenter, MIN('''' + ac.CostUnit) AS CostUnit, " & vbCrLf _
        & "MIN('''' + ac.projectnr) AS Project, '-' AS FiscalDepreciation, gmt.bkjrcode AS FinancialYear, " & vbCrLf _
        & "(" & sDepreciation & ") AS EcoDepr, " & vbCrLf _
        & "0 AS RoundedAnnualDepreciation, 0 AS EcoBV, 0 AS BookValue " & vbCrLf
    
    sSqlUnion2Table = "FROM gbkmut gmt " & vbCrLf _
        & "INNER JOIN FiscalAssets fa ON gmt.facode = fa.Code AND gmt.artcode = fa.ItemCode " & vbCrLf _
        & "INNER JOIN ItemNumbers ac ON  fa.Code = ac.Number AND fa.ItemCode = ac.ItemCode " & vbCrLf _
        & "INNER JOIN grtbk gbk ON gbk.reknr = gmt.reknr AND gbk.omzrek NOT IN ('D','C','V') AND gbk.bal_vw = 'B' " & vbCrLf
    
    sSqlUnion2Group = " GROUP BY gmt.facode, gmt.artcode, gmt.bkjrcode " & vbCrLf
    
    If Not Year_All Then
        sSqlUnion1Where = " AND fr.FinancialYear BETWEEN " & Year_From & " AND " & Year_To & vbCrLf
        sSqlUnion2Where = " AND gmt.bkjrcode BETWEEN " & Year_From & " AND " & Year_To & vbCrLf
    End If
    ''End of Construction of the First union query
    
    ''Where Clause
    ''Asset group
    If Not AssetGroup_All Then
        If AssetGroup_From <> "" And AssetGroup_To <> "" Then
           sSqlUnion1Where = sSqlUnion1Where & " AND fa.AssetGroup BETWEEN " & EdlConn.LitString(AssetGroup_From) & " AND " & EdlConn.LitString(AssetGroup_To)
        ElseIf AssetGroup_From <> "" Then
           sSqlUnion1Where = sSqlUnion1Where & " AND fa.AssetGroup >= " & EdlConn.LitString(AssetGroup_From)
        Else
           sSqlUnion1Where = sSqlUnion1Where & " AND fa.AssetGroup <= " & EdlConn.LitString(AssetGroup_To)
        End If
    End If
    
    ''fiscal group
    If Not FiscalGroup_All Then
        If FiscalGroup_From <> "" And FiscalGroup_To <> "" Then
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.FiscalGroupCode BETWEEN " & EdlConn.LitString(FiscalGroup_From) & " AND " & EdlConn.LitString(FiscalGroup_To)
        ElseIf FiscalGroup_From <> "" Then
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.FiscalGroupCode >= " & EdlConn.LitString(FiscalGroup_From)
        Else
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.FiscalGroupCode <= " & EdlConn.LitString(FiscalGroup_To)
        End If
    End If
    
    ''Asset Code
    If Not Assetcode_All Then
        If AssetCode_From <> "" And AssetCode_To <> "" Then
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.FiscalAssetCode BETWEEN " & EdlConn.LitString(AssetCode_From) & " AND " & EdlConn.LitString(AssetCode_To)
           sSqlUnion2Where = sSqlUnion2Where & " AND gmt.facode BETWEEN " & EdlConn.LitString(AssetCode_From) & " AND " & EdlConn.LitString(AssetCode_To)
        ElseIf AssetCode_From <> "" Then
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.FiscalAssetCode >= " & EdlConn.LitString(AssetCode_From)
           sSqlUnion2Where = sSqlUnion2Where & " AND gmt.facode >= " & EdlConn.LitString(AssetCode_From)
        Else
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.FiscalAssetCode <= " & EdlConn.LitString(AssetCode_To)
           sSqlUnion2Where = sSqlUnion2Where & " AND gmt.facode <= " & EdlConn.LitString(AssetCode_To)
        End If
    End If
    
    'Item Code
    If Not Itemcode_All Then
        If ItemCode_From <> "" And ItemCode_To <> "" Then
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.ItemCode BETWEEN " & EdlConn.LitString(ItemCode_From) & " AND " & EdlConn.LitString(ItemCode_To)
           sSqlUnion2Where = sSqlUnion2Where & " AND gmt.artcode BETWEEN " & EdlConn.LitString(ItemCode_From) & " AND " & EdlConn.LitString(ItemCode_To)
        ElseIf ItemCode_From <> "" Then
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.ItemCode >= " & EdlConn.LitString(ItemCode_From)
           sSqlUnion2Where = sSqlUnion2Where & " AND gmt.artcode >= " & EdlConn.LitString(ItemCode_From)
        Else
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.ItemCode <= " & EdlConn.LitString(ItemCode_To)
           sSqlUnion2Where = sSqlUnion2Where & " AND gmt.artcode <= " & EdlConn.LitString(ItemCode_To)
        End If
    End If
    
    ''Cost Center
    If Not CostCenter_All Then
        'BR 32.646.892 Filter also in the 2nd sub query
        If CostCenter_From <> "" And CostCenter_To <> "" Then
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.CostCenter BETWEEN " & EdlConn.LitString(CostCenter_From) & " AND " & EdlConn.LitString(CostCenter_To)
           sSqlUnion2Where = sSqlUnion2Where & " AND fa.CostCenter BETWEEN " & EdlConn.LitString(CostCenter_From) & " AND " & EdlConn.LitString(CostCenter_To)
        ElseIf CostCenter_From <> "" Then
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.CostCenter >= " & EdlConn.LitString(CostCenter_From)
           sSqlUnion2Where = sSqlUnion2Where & " AND fa.CostCenter >= " & EdlConn.LitString(CostCenter_From)
        Else
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.CostCenter <= " & EdlConn.LitString(CostCenter_To)
           sSqlUnion2Where = sSqlUnion2Where & " AND fa.CostCenter <= " & EdlConn.LitString(CostCenter_To)
        End If
    End If
    
    ''Cost Unit
    If Not CostUnit_All Then
        'BR 32.646.892 Filter also in the 2nd sub query
        If CostUnit_From <> "" And CostUnit_To <> "" Then
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.CostUnit BETWEEN " & EdlConn.LitString(CostUnit_From) & " AND " & EdlConn.LitString(CostUnit_To)
           sSqlUnion2Where = sSqlUnion2Where & " AND fa.CostUnit BETWEEN " & EdlConn.LitString(CostUnit_From) & " AND " & EdlConn.LitString(CostUnit_To)
        ElseIf CostUnit_From <> "" Then
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.CostUnit >= " & EdlConn.LitString(CostUnit_From)
           sSqlUnion2Where = sSqlUnion2Where & " AND fa.CostUnit >= " & EdlConn.LitString(CostUnit_From)
        Else
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.CostUnit <= " & EdlConn.LitString(CostUnit_To)
           sSqlUnion2Where = sSqlUnion2Where & " AND fa.CostUnit <= " & EdlConn.LitString(CostUnit_To)
        End If
    End If
    
    ''Project
    If Not Project_All Then
        'BR 32.646.892 Filter also in the 2nd sub query
        If Project_From <> "" And Project_To <> "" Then
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.Project BETWEEN " & EdlConn.LitString(Project_From) & " AND " & EdlConn.LitString(Project_To)
           sSqlUnion2Where = sSqlUnion2Where & " AND fa.Project BETWEEN " & EdlConn.LitString(Project_From) & " AND " & EdlConn.LitString(Project_To)
        ElseIf Project_From <> "" Then
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.Project >= " & EdlConn.LitString(Project_From)
           sSqlUnion2Where = sSqlUnion2Where & " AND fa.Project >= " & EdlConn.LitString(Project_From)
        Else
           sSqlUnion1Where = sSqlUnion1Where & " AND fr.Project <= " & EdlConn.LitString(Project_To)
           sSqlUnion2Where = sSqlUnion2Where & " AND fa.Project <= " & EdlConn.LitString(Project_To)
        End If
    End If
    
    If stActive Then sStatus = sStatus & ",'A'"
    If stSold Then sStatus = sStatus & ",'S'"
    If stInactive Then sStatus = sStatus & ",'D'"
    If stWriteOff Then sStatus = sStatus & ",'W'"
    
    If Len(sStatus) > 0 Then
       sSqlUnion1Where = sSqlUnion1Where & " AND fa.Status IN (" & Mid$(sStatus, 2) & ")"
       sSqlUnion2Where = sSqlUnion2Where & " AND fa.Status IN (" & Mid$(sStatus, 2) & ")"
    End If
    
    If Len(sSqlUnion1Where) > 0 Then sSqlUnion1Where = "WHERE " & Mid$(sSqlUnion1Where, 5)
    If Len(sSqlUnion2Where) > 0 Then sSqlUnion2Where = "WHERE " & Mid$(sSqlUnion2Where, 5)
    
    ''Construct the whole query
    sSqlTable = "FROM ( " & vbCrLf _
        & sSqlUnion1Select & sSqlUnion1Table & sSqlUnion1Where & sSqlUnion1Group & vbCrLf _
        & " UNION " & vbCrLf _
        & sSqlUnion2Select & sSqlUnion2Table & sSqlUnion2Where & sSqlUnion2Group & vbCrLf
    
    sSqlMain = sSqlSelect & sSqlTable & " ) AS TMP GROUP BY FiscalAssetCode, ItemCode, FinancialYear "
    
    sSqlMain = "SELECT FiscalGroupCode, FiscalGroupDescription, FiscalAssetCode, " & vbCrLf _
        & "Description, AssetGroup, ItemCode, CostCenter, CostUnit, " & vbCrLf _
        & "Project, FiscalDepreciation, FinancialYear, " & vbCrLf _
        & "EcoDepr, RoundedAnnualDepreciation, " & vbCrLf _
        & "(RoundedAnnualDepreciation - EcoDepr) AS DiffDepr, " & vbCrLf _
        & "EcoBV, BookValue, (BookValue - EcoBV) AS DiffBV " & vbCrLf _
        & "FROM (" & sSqlMain & ") AS MAINQUERY ORDER BY FiscalGroupCode, FiscalAssetCode, ItemCode, FinancialYear "
                   
    'Assign SQL query
    ThisWorkbook.Names("Query").RefersToRange.Value = sSqlMain
    
    Exit Sub
    
Failed:
    App.Message 0, App.Term.String(0, "Error occurred while creating SQL query!"), App.Term.String(35521, "Overview fiscal asset listing"), edlgInfo
    
End Sub

Private Sub GetActualBVRecord()

    On Error GoTo Failed
    Dim sSqlMain As String
    Dim sSqlSelect As String
    Dim sSqlWhere As String
    Dim sSqlGroup As String
    Dim sSqlOrder As String
    Dim sSqlTable As String
    'BR 36.446.861
    Dim sSqlTable1 As String
    Dim sSqlTable2 As String
    Dim sSqlJoin As String
    Dim sStatus As String
    Dim EdlConn As EdlConnection
    
    Set EdlConn = goCompany
    
    sSqlSelect = "SELECT  (" & sBookValue & ") AS BV, gmt.bkjrcode, gmt.facode, gmt.artcode "
    
    'BR 36.446.861, added UNION to get transactions from previous year for book value calculation
    'sSqlTable = "FROM FiscalReports fr " & vbCrLf _
        & "INNER JOIN FiscalAssets fa ON fr.FiscalAssetCode = fa.Code AND fr.ItemCode = fa.ItemCode " & vbCrLf _
        & "INNER JOIN ItemNumbers ac ON  fr.FiscalAssetCode = ac.Number AND fr.ItemCode = ac.ItemCode " & vbCrLf _
        & "LEFT OUTER JOIN (gbkmut gmt INNER JOIN grtbk gbk ON gbk.reknr = gmt.reknr " & vbCrLf _
        & "    AND gbk.omzrek NOT IN ('D','C','V') " & vbCrLf _
        & "    AND gbk.bal_vw = 'B') ON gmt.facode = ac.Number AND gmt.artcode = ac.ItemCode " & vbCrLf _
        & "    AND gmt.transtype IN ('N','C','P') AND gmt.bkjrcode = fr.FinancialYear " & vbCrLf _
        & "    AND gmt.facode IS NOT NULL AND ac.Number IS NOT NULL AND gmt.artcode IS NOT NULL " & vbCrLf _
        & "    AND ac.ItemCode IS NOT NULL " & vbCrLf
        
       
        sSqlTable1 = "FROM( " & vbCrLf _
                    & "SELECT gmt.transtype, gmt.transsubtype, gmt.reknr,gmt.Type,gmt.TransactionGuid, gmt.bdr_hfl,gmt.bkjrcode,fr.FiscalAssetCode,fr.ItemCode,gmt.facode,gmt.artcode " & vbCrLf _
                    & "FROM FiscalReports fr " & vbCrLf _
        & "INNER JOIN FiscalAssets fa ON fr.FiscalAssetCode = fa.Code AND fr.ItemCode = fa.ItemCode " & vbCrLf _
        & "INNER JOIN ItemNumbers ac ON  fr.FiscalAssetCode = ac.Number AND fr.ItemCode = ac.ItemCode " & vbCrLf _
        & "LEFT OUTER JOIN (gbkmut gmt INNER JOIN grtbk gbk ON gbk.reknr = gmt.reknr " & vbCrLf _
        & "AND gbk.omzrek NOT IN ('D','C','V') " & vbCrLf _
        & "AND gbk.bal_vw = 'B') ON gmt.facode = fa.Code AND gmt.artcode = fa.ItemCode " & vbCrLf _
        & "AND gmt.transtype IN ('N','C','P') AND gmt.bkjrcode = fr.FinancialYear " & vbCrLf _
        & "AND gmt.facode IS NOT NULL AND ac.Number IS NOT NULL AND gmt.artcode IS NOT NULL " & vbCrLf _
        & "AND ac.ItemCode IS NOT NULL " & vbCrLf

        

        sSqlTable2 = "UNION " & vbCrLf _
        & "SELECT DISTINCT gmt.transtype, gmt.transsubtype, gmt.reknr,gmt.Type,gmt.TransactionGuid, gmt.bdr_hfl,gmt.bkjrcode,fr.FiscalAssetCode,fr.ItemCode,gmt.facode,gmt.artcode " & vbCrLf _
        & "FROM gbkmut gmt " & vbCrLf _
        & "INNER JOIN FiscalAssets fa ON gmt.facode = fa.Code AND gmt.artcode = fa.ItemCode " & vbCrLf _
        & "INNER JOIN grtbk gbk ON gbk.reknr = gmt.reknr AND gbk.omzrek NOT IN ('D','C','V') AND gbk.bal_vw = 'B' " & vbCrLf _
        & "INNER JOIN FiscalReports fr ON gmt.artcode = fr.ItemCode AND gmt.facode = fr.FiscalAssetCode  AND gmt.bkjrcode < fr.FinancialYear " & vbCrLf _
        & "INNER JOIN ItemNumbers ac ON  fr.FiscalAssetCode = ac.Number AND fr.ItemCode = ac.ItemCode " & vbCrLf _
        & "AND gmt.facode IS NOT NULL AND ac.Number IS NOT NULL AND gmt.artcode IS NOT NULL " & vbCrLf _
        & "AND ac.ItemCode IS NOT NULL " & vbCrLf

    sSqlJoin = "INNER JOIN ItemNumbers ac ON  gmt.facode = ac.Number AND gmt.artcode = ac.ItemCode " & vbCrLf _
                & "AND ac.ItemCode IS NOT NULL " & vbCrLf _
                & "AND ac.Number IS NOT NULL " & vbCrLf
    
    sSqlGroup = " GROUP BY facode, artcode, bkjrcode " & vbCrLf
    
    sSqlOrder = "ORDER BY facode, artCode, bkjrcode "
    
    sSqlWhere = "WHERE fr.Type = 1 "
    
    ''Asset group
    If Not AssetGroup_All Then
        If AssetGroup_From <> "" And AssetGroup_To <> "" Then
           sSqlWhere = sSqlWhere & " AND fa.AssetGroup BETWEEN " & EdlConn.LitString(AssetGroup_From) & " AND " & EdlConn.LitString(AssetGroup_To)
        ElseIf AssetGroup_From <> "" Then
           sSqlWhere = sSqlWhere & " AND fa.AssetGroup >= " & EdlConn.LitString(AssetGroup_From)
        Else
           sSqlWhere = sSqlWhere & " AND fa.AssetGroup <= " & EdlConn.LitString(AssetGroup_To)
        End If
    End If
    
    ''fiscal group
    If Not FiscalGroup_All Then
        If FiscalGroup_From <> "" And FiscalGroup_To <> "" Then
           sSqlWhere = sSqlWhere & " AND fr.FiscalGroupCode BETWEEN " & EdlConn.LitString(FiscalGroup_From) & " AND " & EdlConn.LitString(FiscalGroup_To)
        ElseIf FiscalGroup_From <> "" Then
           sSqlWhere = sSqlWhere & " AND fr.FiscalGroupCode >= " & EdlConn.LitString(FiscalGroup_From)
        Else
           sSqlWhere = sSqlWhere & " AND fr.FiscalGroupCode <= " & EdlConn.LitString(FiscalGroup_To)
        End If
    End If
    
    ''Asset Code
    If Not Assetcode_All Then
        If AssetCode_From <> "" And AssetCode_To <> "" Then
           sSqlWhere = sSqlWhere & " AND fr.FiscalAssetCode BETWEEN " & EdlConn.LitString(AssetCode_From) & " AND " & EdlConn.LitString(AssetCode_To)
        ElseIf AssetCode_From <> "" Then
           sSqlWhere = sSqlWhere & " AND fr.FiscalAssetCode >= " & EdlConn.LitString(AssetCode_From)
        Else
           sSqlWhere = sSqlWhere & " AND fr.FiscalAssetCode <= " & EdlConn.LitString(AssetCode_To)
        End If
    End If
    
    'Item Code
    If Not Itemcode_All Then
        If ItemCode_From <> "" And ItemCode_To <> "" Then
           sSqlWhere = sSqlWhere & " AND fr.ItemCode BETWEEN " & EdlConn.LitString(ItemCode_From) & " AND " & EdlConn.LitString(ItemCode_To)
        ElseIf ItemCode_From <> "" Then
           sSqlWhere = sSqlWhere & " AND fr.ItemCode >= " & EdlConn.LitString(ItemCode_From)
        Else
           sSqlWhere = sSqlWhere & " AND fr.ItemCode <= " & EdlConn.LitString(ItemCode_To)
        End If
    End If
    
    ''Cost Center
    If Not CostCenter_All Then
        If CostCenter_From <> "" And CostCenter_To <> "" Then
           sSqlWhere = sSqlWhere & " AND fr.CostCenter BETWEEN " & EdlConn.LitString(CostCenter_From) & " AND " & EdlConn.LitString(CostCenter_To)
        ElseIf CostCenter_From <> "" Then
           sSqlWhere = sSqlWhere & " AND fr.CostCenter >= " & EdlConn.LitString(CostCenter_From)
        Else
           sSqlWhere = sSqlWhere & " AND fr.CostCenter <= " & EdlConn.LitString(CostCenter_To)
        End If
    End If
    
    ''Cost Unit
    If Not CostUnit_All Then
        If CostUnit_From <> "" And CostUnit_To <> "" Then
           sSqlWhere = sSqlWhere & " AND fr.CostUnit BETWEEN " & EdlConn.LitString(CostUnit_From) & " AND " & EdlConn.LitString(CostUnit_To)
        ElseIf CostUnit_From <> "" Then
           sSqlWhere = sSqlWhere & " AND fr.CostUnit >= " & EdlConn.LitString(CostUnit_From)
        Else
           sSqlWhere = sSqlWhere & " AND fr.CostUnit <= " & EdlConn.LitString(CostUnit_To)
        End If
    End If
    
    ''Project
    If Not Project_All Then
        If Project_From <> "" And Project_To <> "" Then
           sSqlWhere = sSqlWhere & " AND fr.Project BETWEEN " & EdlConn.LitString(Project_From) & " AND " & EdlConn.LitString(Project_To)
        ElseIf Project_From <> "" Then
           sSqlWhere = sSqlWhere & " AND fr.Project >= " & EdlConn.LitString(Project_From)
        Else
           sSqlWhere = sSqlWhere & " AND fr.Project <= " & EdlConn.LitString(Project_To)
        End If
    End If
    
    If stActive Then sStatus = sStatus & ",'A'"
    If stSold Then sStatus = sStatus & ",'S'"
    If stInactive Then sStatus = sStatus & ",'D'"
    If stWriteOff Then sStatus = sStatus & ",'W'"
    
    If Len(sStatus) > 0 Then
       sSqlWhere = sSqlWhere & " AND fa.Status IN (" & Mid$(sStatus, 2) & ")"
    End If
    
    'BR 36.446.861
    'sSqlMain = sSqlSelect & sSqlTable & sSqlWhere & sSqlGroup
    sSqlTable = sSqlTable1 & sSqlWhere & sSqlTable2 & sSqlWhere & ")gmt "
    sSqlTable = sSqlTable & vbCrLf _
                & sSqlJoin
                
    sSqlMain = sSqlSelect & sSqlTable & sSqlGroup
    
    vBVRec = EdlConn.Query(sSqlMain, , edlForce2dim)
    
    Worksheets(1).Range("B30").Value = sSqlMain
    
    Exit Sub
    
Failed:
    App.Message 0, App.Term.String(0, "Error occurred in GetActualBVRecord!"), App.Term.String(35521, "Overview fiscal asset listing"), edlgInfo
    
End Sub

Private Sub ManualAssignBV(sWorksheet)
    
    On Error GoTo Failed
    
    Dim i As Long
    Dim bFlag As Boolean
    
    GetActualBVRecord
    
    Worksheets(sWorksheet).Activate
    With Worksheets(sWorksheet)
        
        ''set for the first row
        bFlag = False
        i = 12
        
        Do While bFlag = False
            If .Range("A" & i).Value = "" Then
                bFlag = True
            Else
                .Range("O" & i).Value = GetBV(.Range("C" & i).Value, .Range("F" & i).Value, .Range("K" & i).Value)
                .Range("Q" & i).Value = .Range("P" & i).Value - .Range("O" & i).Value
            End If
            
            i = i + 1
        Loop
        
    End With
    
    Exit Sub

Failed:
    App.Message 0, App.Term.String(0, "Error occurred in ManualAssignBV!"), App.Term.String(35521, "Overview fiscal asset listing"), edlgInfo
        
End Sub

Private Function GetBV(ByVal sSerialNumber As String, ByVal sItemCode As String, ByVal lYear As Long) As Double

    Dim lCnt As Long
    Dim dTotal As Double
    
    If IsEmpty(vBVRec) = False Then
        
        For lCnt = 1 To UBound(vBVRec)
            If vBVRec(lCnt, 3) = sSerialNumber And vBVRec(lCnt, 4) = sItemCode Then
                If vBVRec(lCnt, 2) <= lYear Then
                    dTotal = dTotal + vBVRec(lCnt, 1)
                ElseIf vBVRec(lCnt, 2) > lYear Then
                    Exit For
                End If
            End If
        Next lCnt
        
        GetBV = dTotal
    End If
    
End Function

' InQuest injected base64 decoded content
' :t^~

INQUEST-PP=macro
