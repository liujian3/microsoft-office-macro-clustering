Attribute VB_Name = "Classify"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private m_Name As String
Private m_Key As String
Private m_Cnt As Integer
Private m_Values() As Variant

Public Property Get Key() As Variant
    Key = m_Key
End Property

Public Property Let Key(ByVal vNewValue As Variant)
    m_Key = vNewValue
End Property

Public Property Get name() As Variant
    name = m_Name
End Property

Public Property Let name(ByVal vNewValue As Variant)
    m_Name = vNewValue
End Property

Public Property Get cnt() As Variant
    cnt = m_Cnt
End Property

Public Sub AddValue(ByVal vNewValue As Variant)
    m_Cnt = m_Cnt + 1
    ReDim Preserve m_Values(1 To m_Cnt)
    m_Values(m_Cnt) = vNewValue
End Sub

Public Property Get Values() As Variant
    Dim i As Long, j As Long
    Dim val() As Variant
    ReDim val(1 To m_Cnt, 1 To 1)
    For i = 1 To m_Cnt
        val(i, 1) = m_Values(i)
    Next i
    Values = val
End Property

Private Sub Class_Initialize()
    m_Cnt = 0
End Sub

Private Sub Class_Terminate()
    ReDim m_Values(0)
End Sub
Attribute VB_Name = "CommMdlA"
'=======================================================
' |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' 2007.1.29 LSQ
'=======================================================
Option Explicit

'
'|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
'
Sub Comm_setChartPosSize(ByVal chartObj As ChartObject, ByVal outGrp As Range, _
    Optional ByVal rowNum As Integer = 0, Optional ByVal colNum As Integer = 0)
    Call Application.Run(GBKNAME_VBACM & "!setChartPosSize", _
                         chartObj, outGrp, rowNum, colNum)
End Sub
'
'cut data linkage
'
Sub Comm_CutDataLink(ByVal bkObj As Workbook, ByVal bkName As String)
    If getExcelVerNo() >= 12 Then
        Application.Run GBKNAME_VBA07 & "!Vba07_cutLink", bkObj, bkName
    End If
End Sub
'
Sub Comm_SetDataLabel(ByVal ser As Series, ByVal namerge As Range, _
                 Optional ByVal fontsize As Integer = 10, _
                 Optional ByVal charcnt As Integer = 32)
    Call Application.Run(GBKNAME_VBACM & "!SetDataLabel", _
                         ser, namerge, fontsize, charcnt)
End Sub

Function Comm_SetDict(ByVal strPara As String) As Object
    Set Comm_SetDict = Application.Run(GBKNAME_VBACM & "!SetDict", strPara)
End Function

Function Comm_GetTmplGrp(ByVal outRge As Range, ByVal strBkName As String, _
                    ByVal strShtName As String, ByVal strGrpName As String) As Chart
    Set Comm_GetTmplGrp = Application.Run(GBKNAME_VBACM & "!GetTmplGrp", outRge, _
                     strBkName, strShtName, strGrpName)
End Function

Function Comm_toXlRCstr(inputFormula As String) As String
    Comm_toXlRCstr = Application.Run(GBKNAME_VBACM & "!toXlRCstr", inputFormula)
End Function

Function Comm_toXlA1str(inputFormula As String) As String
    Comm_toXlA1str = Application.Run(GBKNAME_VBACM & "!toXlA1str", inputFormula)
End Function

Sub Comm_MatchWorkbookFont()
    Call Application.Run(GBKNAME_VBACM & "!MatchWorkbookFont")
End Sub
'
'convert a string to number, e.g. "|fffd|Q" to 2
'return 0 if error
'
'09.1.23 LSQ add
'
Function Comm_CDbl(ByVal Str As String) As Double
    Dim num As Double
    
    On Error Resume Next
    
    num = CDbl(Str)
    Comm_CDbl = IIf(Err.Number <> 0, 0, num)
    
    On Error GoTo 0
End Function

'=== EOF ===
Attribute VB_Name = "Date_check"
'=======================================================
' iSTAT_MTHR Ver1.0 : |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Check|fffd|p
'
' 2008.10 LSQ
'=======================================================
Option Private Module
Option Explicit
'
#If VBA7 Then
Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#Else
Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#End If
Private SErrMsgStr As String

'******************************************
'* |fffd||1bc||fffd||5f2||fffd||781|@|327||fffd||fffd|(ISTAT.INI)|fffd||fffd||fffd||fffd|
'* |fffd||fffd||fffd|t|fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd|A|fffd||fffd||fffd|t|fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd|
'* EXCEL|fffd||fffd||fffd|N|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd|
'* 06.2.15 LSQ mdf : "sub" to "function"
'* return TRUE OK else ERROR
'******************************************
Function user_date_chk() As Boolean
    Dim sIniStr$
    Dim sDate1$
    Dim sDate2$
    Dim ddd As Double
    Dim iRet As Integer
    Dim vDate1, vDate2 As Variant
    Dim sTemp1, sTemp2 As String
    
    'init
    SErrMsgStr = ""
    user_date_chk = False
    sTemp1 = Chr(13)
    
    sIniStr = getTaikouIniStr()     'ISTAT.INI|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||1c2||74f|o|fffd||fffd|
    If SErrMsgStr <> "" Then
        MsgBox SErrMsgStr
        Exit Function
    End If
    
    iRet = StringDecode(sIniStr, sDate1) '|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||256||7c2||fffd|
    If (iRet <> True) Then
        MsgBox MSG_ERR_RSUINIa
        Exit Function
    End If
    
    'iRet = StringEncode(sDate1, sTemp2)
    
    'sDate1 = "1996/10/27"
    If (sDate1 <> "0000/00/00") Then
        If (IsDate(sDate1) = False) Then
            MsgBox MSG_ERR_RSUINIa
            Exit Function
        End If
    
        vDate1 = CDate(sDate1)
        vDate2 = Date
        If (vDate1 < vDate2) Then
            MsgBox GName_Prog & "|fffd||30e||fffd||fffd|p|fffd||fffd||fffd||fffd|[" & sDate1 & "]|fffd||fffd||fffd||7c2||fffd||fffd||702||fffd||fffd||fffd|." & sTemp1 & "|fffd||fffd||fffd||fffd||34f||fffd||fffd|i|fffd||142||fffd||fffd||fffd||fffd|g|fffd|p|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            Exit Function
        End If
    End If
    
    'return error free
    user_date_chk = True

End Function


'******************************************
'* |fffd||1bc||fffd||5f2||fffd||781|@|327||fffd||fffd|(ISTAT.INI)|fffd||fffd||fffd||fffd|
'* |fffd|A|fffd|v|fffd||fffd||fffd|P|fffd|[|fffd|V|fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd|f|fffd|B|fffd||fffd||fffd|N|fffd|g|fffd||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|B
'******************************************
Function getTaikouIniStr() As String
    Dim sGetBuffer$
    Dim lRet As Long
    Dim giRet As Long
    Dim iRet As Long
    Dim sTemp1$
    Dim sIniFileName As String
    sGetBuffer$ = String$(300, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|

    sGetBuffer$ = getPathName() & "\"   'old = gsPrgPath
    sIniFileName$ = sGetBuffer$ & "ISTAT.INI"
    iRet = 0
    
    sGetBuffer$ = String$(256, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    iRet = GetPrivateProfileString(ByVal "Excel", ByVal "MyDate", ByVal "0000000000", sGetBuffer$, CInt(256), ByVal sIniFileName$)
    sTemp1 = Left$(sGetBuffer$, InStr(sGetBuffer$, Chr(0)) - 1)
    If (sTemp1 = "0000000000") Then
        giRet = 0
        SErrMsgStr = MSG_ERR_RSUINIb
        Exit Function   'End
    End If
    getTaikouIniStr = sTemp1
End Function

Function StringDecode(ByVal sInpStr As String, sOutStr As String) As Integer
'sInpStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||9576||fffd||fffd||fffd||fffd|
'sOutStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||9576||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1c2||fffd||fffd||fffd|sOutStr|fffd||255||502||fffd|
    Dim iLengs, iCnt1, iMojiCode0, iMojiCode1, iMojiCode2 As Integer
    Dim vKanjiCode  'As Integer
    Dim iKanjiFlg As Integer
    Dim sMoji, sTempStr As String
    Dim iKanji As Integer
    Dim dTemp1 As Double
    On Error GoTo ErrorHandler:
    sOutStr = ""
    iLengs = Len(sInpStr)
    '|fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|16|fffd|i|fffd||315||fffd||fffd||fffd||fffd||fffd||255||3ca||fffd||fffd||fffd||fffd||fffd|sTempStr|fffd||24a|i|fffd|[
    iKanjiFlg = 0   '|fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    For iCnt1 = 1 To iLengs Step 2
        sMoji = Mid$(sInpStr, iCnt1, 1)         '|fffd|P|fffd||fffd||fffd||fffd||fffd||c2||8e||fffd||fffd|o|fffd||fffd|
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||312|l|fffd||303|`|fffd|F|fffd|b|fffd|N
        If ((Asc(sMoji) < &H3F) Or (Asc(sMoji) > &H4F)) Then
            StringDecode = False
            Exit Function
        End If
        iMojiCode1 = Asc(sMoji) - &H40
        sMoji = Mid$(sInpStr, iCnt1 + 1, 1)
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||312|l|fffd||303|`|fffd|F|fffd|b|fffd|N
        If ((Asc(sMoji) < &H3F) Or (Asc(sMoji) > &H4F)) Then
            StringDecode = False
            Exit Function
        End If
        iMojiCode2 = Asc(sMoji) - &H40
        iMojiCode0 = iMojiCode1 * 16 + iMojiCode2
        
        '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|P|fffd|o|fffd|C|fffd|g|fffd||314||fffd||fffd||fffd|
        If (iMojiCode0 >= &H81 And iMojiCode0 <= &H9F) Or (iMojiCode0 >= &HE0 And iMojiCode0 <= &HFC) Then
            If iKanjiFlg = 0 Then   '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|P|fffd|o|fffd|C|fffd|g|fffd||fffd|
                iKanjiFlg = 1
                vKanjiCode = iMojiCode0 * 256
            Else                    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|Q|fffd|o|fffd|C|fffd|g|fffd||fffd|
                vKanjiCode = vKanjiCode + iMojiCode0
                'sTempStr = "&H" + Hex$(vKanjiCode)
                dTemp1 = CDbl(vKanjiCode)
                If (dTemp1 > 32767) Then
                    iKanji = CInt(dTemp1 - 65536)
                Else
                    iKanji = CInt(dTemp1)
                End If
                'sOutStr = sOutStr + Chr$(Val(sTempStr))
                sOutStr = sOutStr + Chr$(iKanji)
                iKanjiFlg = 0
            End If
        Else
            If iKanjiFlg = 0 Then   'ASC|fffd|R|fffd|[|fffd|h
                sOutStr = sOutStr + Chr$(iMojiCode0)
            Else                    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|Q|fffd|o|fffd|C|fffd|g|fffd||fffd|
                vKanjiCode = vKanjiCode + iMojiCode0
                'sTempStr = "&H" + Hex$(vKanjiCode)
                dTemp1 = CDbl(vKanjiCode)
                If (dTemp1 > 32767) Then
                    iKanji = CInt(dTemp1 - 65536)
                Else
                    iKanji = CInt(dTemp1)
                End If
                'sOutStr = sOutStr + Chr$(Val(sTempStr))
                sOutStr = sOutStr + Chr$(iKanji)
                iKanjiFlg = 0
            End If
        End If
    Next iCnt1
    StringDecode = True
    Exit Function
ErrorHandler:
    StringDecode = False
    Exit Function
End Function

Function StringEncode(ByVal sInpStr As String, sOutStr As String) As Integer
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| sOutStr|fffd||255||502||fffd|
'sInpStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||202||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'sOutStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim iLengs, iCnt1, iMojiCode As Integer
    Dim sMoji, sTempStr As String
    
    sOutStr = ""
    sTempStr = ""
    iLengs = Len(sInpStr)
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|16|fffd|i|fffd||315||fffd||fffd||fffd||fffd||fffd||255||3ca||fffd||fffd||fffd||fffd||fffd|sTempStr|fffd||24a|i|fffd|[
    For iCnt1 = 1 To iLengs Step 1
        sMoji = Mid$(sInpStr, iCnt1, 1)
        iMojiCode = Asc(sMoji)
        sTempStr = sTempStr + Hex$(iMojiCode)
    Next iCnt1
  
    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd||fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
    iLengs = Len(sTempStr)
    For iCnt1 = 1 To iLengs Step 1
        sMoji = Mid$(sTempStr, iCnt1, 1)    '|fffd|l|fffd||fffd||fffd||fffd||fffd||c2||8e||fffd||fffd|o|fffd||fffd|
        Select Case sMoji
            Case "A"
                iMojiCode = 10 + &H40
            Case "B"
                iMojiCode = 11 + &H40
            Case "C"
                iMojiCode = 12 + &H40
            Case "D"
                iMojiCode = 13 + &H40
            Case "E"
                iMojiCode = 14 + &H40
            Case "F"
                iMojiCode = 15 + &H40
            Case Else   '0-9|fffd||310||fffd||fffd||fffd||fffd||30e||fffd|
                iMojiCode = val(sMoji) + &H40       '|fffd|o|fffd||102||fffd||fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|40|fffd||fffd||fffd||fffd|
        End Select
        sOutStr = sOutStr + Chr$(iMojiCode) '|fffd|X|fffd||243|L|fffd||fffd||fffd||fffd||fffd|N|fffd|^|fffd||255||3ca||fffd|
    Next iCnt1

End Function

Function isTrialVer() As Boolean
    Dim sIniStr$
    Dim sDate1$
    Dim sDate2$
    Dim ddd As Double
    Dim iRet As Integer
    Dim vDate1, vDate2 As Variant
    Dim sTemp1, sTemp2 As String
    
    If Not MTHR_USB_VERSION Then
        isTrialVer = True
        Exit Function
    End If
    
    'init
    SErrMsgStr = ""
    isTrialVer = False
    sTemp1 = Chr(13)
    
    sIniStr = getTaikouIniStr()     'ISTAT.INI|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||1c2||74f|o|fffd||fffd|
    If SErrMsgStr <> "" Then
        Exit Function
    End If
    
    iRet = StringDecode(sIniStr, sDate1) '|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||256||7c2||fffd|
    If (iRet <> True) Then
        Exit Function
    End If
    
    'iRet = StringEncode(sDate1, sTemp2)
    
    'sDate1 = "1996/10/27"
    If (sDate1 <> "0000/00/00") Then
        isTrialVer = True
        Exit Function
    End If
    
    'return error free
    isTrialVer = False

End Function
'=== EOF ===

Attribute VB_Name = "M_Thr1"
'=======================================================
' THR2 SSS_SRK Ver3.0
'
' 2006.10 WZH
'=======================================================
Option Private Module
Option Explicit

Type DATAEXP_TBL
    DataRge As String * 256
    cateRge As String * 256
    outRge As String * 256
    Except As Long
    dataTitle As Long
    DataType As Long
End Type

Type TEXTEXP_TBL
    DataRge As String * 256
    outRge As String * 256
    dataTitle As Long
End Type

Private Const INCORRECTRGE As String = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"

#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function fDataExp_VBA Lib "MTHR_E_SR3_64.dll" (ByVal nid As Long, dt As DATAEXP_TBL) As Integer
        Private Declare PtrSafe Function fTextExp_VBA Lib "MTHR_E_SR3_64.dll" (ByVal nid As Long, dt As TEXTEXP_TBL) As Integer
    #Else
        Private Declare Function fDataExp_VBA Lib "MTHR_E_SR3_64.dll" (ByVal nid As Long, dt As DATAEXP_TBL) As Integer
        Private Declare Function fTextExp_VBA Lib "MTHR_E_SR3_64.dll" (ByVal nid As Long, dt As TEXTEXP_TBL) As Integer
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function fDataExp_VBA Lib "MTHR_E_SR3.dll" (ByVal nid As Long, dt As DATAEXP_TBL) As Integer
        Private Declare PtrSafe Function fTextExp_VBA Lib "MTHR_E_SR3.dll" (ByVal nid As Long, dt As TEXTEXP_TBL) As Integer
    #Else
        Private Declare Function fDataExp_VBA Lib "MTHR_E_SR3.dll" (ByVal nid As Long, dt As DATAEXP_TBL) As Integer
        Private Declare Function fTextExp_VBA Lib "MTHR_E_SR3.dll" (ByVal nid As Long, dt As TEXTEXP_TBL) As Integer
    #End If
#End If

Private Function bAllTwoCates(ByVal DataRge As Range) As Boolean
    Dim i As Long, j As Long
    Dim colNum As Long, rowNum As Long
    Dim minCate As Long, maxCate As Long
    Dim r As Range
    colNum = DataRge.Columns.Count
    rowNum = DataRge.Rows.Count
    Set r = DataRge(2, 1).Resize(rowNum - 1, 1)
    minCate = WorksheetFunction.min(r)
    maxCate = WorksheetFunction.max(r)
    bAllTwoCates = False
    If minCate <> 1 Or maxCate <> 2 Then Exit Function
    For i = 2 To colNum
        Set r = DataRge(2, i).Resize(rowNum - 1, 1)
        If minCate <> WorksheetFunction.min(r) Or maxCate <> WorksheetFunction.max(r) Then
            Exit Function
        End If
    Next i
    bAllTwoCates = True
End Function

'data expansion
'

Sub IS_MTHR_EXPtoDumy()
    Dim rtn As Integer
    Dim tmpSht As Worksheet
    Dim dt As DATAEXP_TBL
    Dim dlg As DialogSheet
    Dim actSht As Worksheet
    Dim DataR As Range, CateR As Range, OutR As Range
    Dim nid As Long
    On Error Resume Next
    
    nid = IIf(isTrialVer, 0, 1)
        
    Set dlg = ThisWorkbook.DialogSheets("DlgDataExp")
redisp:
    Set actSht = ActiveSheet
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Set DataR = Range(dlg.EditBoxes("RgeData").Text)
        Set CateR = Range(dlg.EditBoxes("RgeCate").Text)
        Set OutR = Range(dlg.EditBoxes("RgeOut").Text)
        dt.dataTitle = 0 'IIf(dlg.OptionButtons("optTitle") = xlOn, 1, 0)
        'dt.DataType = IIf(dlg.OptionButtons("optDataType1") = xlOn, 1, 2)
        dt.Except = IIf(dlg.OptionButtons("optExcept") = xlOn, 1, 2)
        If DataR Is Nothing Or OutR Is Nothing Then
            MsgBox INCORRECTRGE
            GoTo redisp
        End If
        dt.DataType = IIf(bAllTwoCates(DataR), 1, 2)                        '2013.10.17 added
        
        dt.DataRge = DataR.Worksheet.name & "!" & toXlRCstr(DataR.Address) & vbNullChar
        dt.cateRge = CateR.Worksheet.name & "!" & toXlRCstr(CateR.Address) & vbNullChar
        dt.outRge = OutR.Worksheet.name & "!" & toXlRCstr(OutR.Address) & vbNullChar
        
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = fDataExp_VBA(nid, dt)
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub


Public Function IS_MTHR_EXPtoDumy_Internal(ByVal OutR As Range, ByVal DataR As Range, ByVal CateR As Range) As Integer
    Dim rtn As Integer
    Dim dt As DATAEXP_TBL
    Dim nid As Long
    On Error Resume Next
    nid = IIf(isTrialVer, 0, 1)
    dt.dataTitle = 0
    dt.Except = 1
    dt.DataType = IIf(bAllTwoCates(DataR), 1, 2)
    
    dt.DataRge = DataR.Worksheet.name & "!" & toXlRCstr(DataR.Address) & vbNullChar
    dt.cateRge = CateR.Worksheet.name & "!" & toXlRCstr(CateR.Address) & vbNullChar
    dt.outRge = OutR.Worksheet.name & "!" & toXlRCstr(OutR.Address) & vbNullChar
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    IS_MTHR_EXPtoDumy_Internal = fDataExp_VBA(nid, dt)
    On Error GoTo 0
End Function

'text expansion
'
Sub IS_MTHR_TEXTEXP()
    Dim rtn As Integer
    Dim tmpSht As Worksheet
    Dim dt As TEXTEXP_TBL
    Dim dlg As DialogSheet
    Dim actSht As Worksheet
    Dim DataR As Range, CateR As Range, OutR As Range
    Dim nid As Long
    On Error Resume Next
    
    nid = IIf(isTrialVer, 0, 1)
    Set dlg = ThisWorkbook.DialogSheets("DlgTextExp")
redisp:
    Set actSht = ActiveSheet
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Set DataR = Range(dlg.EditBoxes("RgeData").Text)
        Set OutR = Range(dlg.EditBoxes("RgeOut").Text)
        dt.dataTitle = 0 'IIf(dlg.OptionButtons("optTitle") = xlOn, 1, 0)
        If DataR Is Nothing Or OutR Is Nothing Then
            MsgBox INCORRECTRGE
            GoTo redisp
        End If
        If DataR.Rows.Count < 2 Then
            MsgBox INCORRECTRGE
            GoTo redisp
        End If
        
        dt.DataRge = toXlRCstr(DataR.Address) & vbNullChar
        dt.outRge = toXlRCstr(OutR.Address) & vbNullChar
        
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = fTextExp_VBA(nid, dt)
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub
'=== EOF ===
Attribute VB_Name = "Mdl10toMA"
Option Private Module
Option Explicit

Private Const INCORRECTRGE As String = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"

Private Type DATAEXP_MA
    DataRge As String
    cateRge As String
    outRge As String
    Except As Long
    dataTitle As Long
End Type

Private Function doCalc(dt As DATAEXP_MA) As Boolean
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rowNum As Long, colNum As Long
    Dim prevCate As Long
    Dim maxCateNo As Long
    Dim DataR As Range, CateR As Range, OutR As Range
    Dim v As Variant, datav As Variant
    Dim flgBreak As Boolean
    Dim tmps As String
    On Error Resume Next
    Set DataR = Range(dt.DataRge)
    Set OutR = Range(dt.outRge)
    OutR(1, 1) = "No."
    OutR(1, 2) = "|fffd||fffd||fffd||fffd|"
    rowNum = DataR.Rows.Count
    colNum = DataR.Columns.Count
    v = DataR.Value
    k = 2
    maxCateNo = 1
    For i = 2 To rowNum
        flgBreak = False
        tmps = ""
        For j = 1 To colNum
            If Not IsNumeric(v(i, j)) Or IsEmpty(v(i, j)) Then
                If dt.Except <> 1 Then
                    Exit Function
                Else
                    'flgBreak = True
                    'Exit For
                End If
            Else
                If val(v(i, j)) = 1 Then
                    tmps = tmps & "," & j
                End If
            End If
        Next j
        If Not flgBreak Then
            OutR(k, 1) = i - 1
            OutR(k, 2) = IIf(tmps = "", "-", Mid(tmps, 2))
            k = k + 1
        Else
            OutR(k, 1) = i - 1
            OutR(k, 2) = "-"
            k = k + 1
        End If
    Next i
    
    Call SetRangeBorder(OutR.Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(2, 1).Resize(k - 2, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    
    OutR(k + 1, 2) = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|"
    For i = 1 To colNum
        OutR(k + i + 1, 2) = DataR(1, i)
    Next i
    Call SetRangeBorder(OutR(k + 1, 2), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(k + 2, 2).Resize(colNum, 1), xlThin, xlThin, xlThin, xlThin, xlThin)
    
    OutR.Worksheet.Activate
    OutR.Select
    
    On Error GoTo 0
End Function

Sub IS_MTHR_10toMA()
    Dim rtn As Integer
    Dim tmpSht As Worksheet
    Dim dt As DATAEXP_MA
    Dim dlg As DialogSheet
    Dim actSht As Worksheet
    Dim DataR As Range, CateR As Range, OutR As Range
    Dim nid As Long
    On Error Resume Next
    
    nid = IIf(isTrialVer, 0, 1)
        
    Set dlg = ThisWorkbook.DialogSheets("Dlg10toMA")
redisp:
    Set actSht = ActiveSheet
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Set DataR = Range(dlg.EditBoxes("RgeData").Text)
        Set OutR = Range(dlg.EditBoxes("RgeOut").Text)
        dt.dataTitle = 0 'IIf(dlg.OptionButtons("optTitle") = xlOn, 1, 0)
        dt.Except = IIf(dlg.OptionButtons("optExcept") = xlOn, 1, 2)
        If DataR Is Nothing Or OutR Is Nothing Then
            MsgBox INCORRECTRGE
            GoTo redisp
        End If
        dt.DataRge = DataR.Worksheet.name & "!" & DataR.Address
        dt.outRge = OutR.Worksheet.name & "!" & OutR.Address
        doCalc dt
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub

Attribute VB_Name = "MdlBasicInfo"
'=======================================================
' SR2 for iSTAT_MTHR Ver1.0
'
' 2011.9 WZH LSQ
'=======================================================

Option Private Module
Option Explicit

Type Srk1Para
    RgeInfo As String * 256
    OutSheet As String * 256
    RgeObj As String * 256
    RgeVar As String * 256
    RgeVarKind As String * 256
    rgeClass As String * 256
    RgeSmpName As String * 256
    RgeCateName As String * 256
    RgeYskData As String * 256          'only used for proceeding data
    RgeYskName As String * 256          'only used for proceeding data
    bExcept As Long
    bExcept_n0 As Long
    bYsk As Long                        'only used for proceeding data
    bExtraInfo As Long
    nVarSelMethod As Long
    bSmpName As Long
    bNum2Class As Long
    bCateName As Long
    bPointGrp As Long
    nFuncNo As Long
End Type

Type Srk1Para_Extra
    bTimeLag As Long
    RgeTimeLag As String * 256          'only used for procedding data
    nTimeStyle As Long
    nYear As Long
    nMonth As Long
End Type

Private Const X_MAX As Integer = 30
Private Const CATE_MAX As Integer = 200

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private m_bvarselected As Boolean
Private sr1tbl As Srk1Para
Private sr1Extra As Srk1Para_Extra
#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function sr1_dlg Lib "MTHR_A_ISTA_64.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #Else
        Private Declare Function sr1_dlg Lib "MTHR_A_ISTA_64.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function sr1_dlg Lib "MTHR_A_ISTA.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #Else
        Private Declare Function sr1_dlg Lib "MTHR_A_ISTA.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #End If
#End If

Private Function CountUniqueValues(InputRange As Range) As Long
    Dim cl As Range, UniqueValues As New Collection
    Dim rowNum As Long, colNum As Long
    Dim i As Long, j As Long
    Dim vdata As Variant
    On Error Resume Next
    rowNum = InputRange.Rows.Count
    colNum = InputRange.Columns.Count
    vdata = InputRange.Value
    For i = 1 To rowNum
        For j = 1 To colNum
            UniqueValues.Add vdata(i, j), CStr(vdata(i, j))
        Next j
    Next i
    On Error GoTo 0
    CountUniqueValues = UniqueValues.Count
End Function

'RgeX : |fffd|K|fffd||fffd||fffd|l|fffd|w|fffd||fffd||348||fffd| (formatted)
'RgeCateNum : Item category number (0=numeric item)
'outBgn : category name output begin cell
'
'11.8.21 LSQ
Private Sub nu_makeCateName_forNumItem(ByVal itemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or itemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 1 To itemNum
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            dxHalf = (x2 - x1) / 2
            
            outBgn(1, i) = "|fffd|`" & (x1 + dxHalf)
            For j = 2 To cateN - 1
                outBgn(j, i) = (x1 + dxHalf) & "|fffd|`" & (x2 + dxHalf)
                'next
                x1 = x1 + 2 * dxHalf
                x2 = x2 + 2 * dxHalf
            Next j
            outBgn(cateN, i) = (x2 - dxHalf) & "|fffd|`"
        End If
nextItem:
    Next i
        
End Sub

'2011.12.04 rewritten
Private Sub makeCateName_forNumItem(ByVal itemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or itemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 1 To itemNum
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            
            outBgn(1, i) = "|fffd|`" & x1
            For j = 2 To cateN
                outBgn(j, i) = x1 & "|fffd|`" & x2
                'next
                x1 = RgeX(j + 1, i)
                x2 = RgeX(j + 2, i)
            Next j
        End If
nextItem:
    Next i
        
End Sub
'end rewritten

'11.8.21 LSQ mdf
Private Function handleSr1Data() As Worksheet
    Dim i As Long, j As Long, k As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim rgeClass As Range, RgeVarKind As Range
    Dim RgeSmpName As Range, RgeCateName As Range
    Dim RgeYskData As Range, RgeYskName As Range
    Dim RgeTimeLag As Range
    Dim tmpSht As Worksheet
    Dim sr1obj As Variant, sr1var As Variant, sr1cate As Variant, sr1varkind As Variant, varkind() As Long
    Dim sr1VarSel As Variant
    Dim varTimeLag As Variant
    Dim cateNameRow As Long, varKindRow As Long, classRow As Long
    Dim CateNum As Long, smpNum As Long, itemNum As Long, objSmpNum As Long
    Dim tmpv As Long, totalCateNum As Long
    Dim msgStr As String
    Dim bgnCelCateNm As Range
    
    On Error Resume Next
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    Set RgeVarKind = Range(sr1tbl.RgeVarKind)
    
    If RgeObj Is Nothing Or RgeVar Is Nothing Then Exit Function
    
    '2012.10.22 added
    itemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    
    If RgeVarKind Is Nothing Then
        Set tmpSht = SbkThis.Sheets("TmpSheet")
        tmpSht.Cells.ClearContents
        Set rge = tmpSht.Range("B1")
        For i = 1 To itemNum
            rge(1, i) = 0
        Next i
        Set RgeVarKind = rge.Resize(1, itemNum)
    End If
    'end add
    
    If sr1tbl.bNum2Class = 1 Then
        Set rgeClass = Range(sr1tbl.rgeClass)
    End If
    If sr1tbl.bCateName = 1 Then
        Set RgeCateName = Range(sr1tbl.RgeCateName)
    End If
    If sr1tbl.bSmpName = 1 Then
        Set RgeSmpName = Range(sr1tbl.RgeSmpName)
    End If
    If sr1tbl.bYsk = 1 Then
        Set RgeYskData = Range(sr1tbl.RgeYskData)
        Set RgeYskName = Range(sr1tbl.RgeYskName)
    End If
    If sr1Extra.bTimeLag = 1 Then
        Set RgeTimeLag = Range(sr1Extra.RgeTimeLag)
    End If
    cateNameRow = RgeObj.Rows.Count
    If cateNameRow < RgeVar.Rows.Count Then
        cateNameRow = RgeVar.Rows.Count
    End If
    If cateNameRow < RgeSmpName.Rows.Count Then
        cateNameRow = RgeSmpName.Rows.Count
    End If
    cateNameRow = cateNameRow + 6
    sr1obj = RgeObj.Value
    sr1var = RgeVar.Value
    sr1varkind = RgeVarKind.Value
    CateNum = Application.WorksheetFunction.max(sr1varkind)
    If CateNum = 0 Then CateNum = 1
    classRow = cateNameRow + CateNum + 2
    
    itemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    
    ReDim varkind(1 To 1, 1 To itemNum)
    If itemNum = 1 Then
        varkind(1, 1) = sr1varkind
    Else
        For i = 1 To itemNum
            varkind(1, i) = sr1varkind(1, i)
        Next i
    End If
    
    '2013.11.01 added
    If RgeObj.Columns.Count > 1 Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||341|A|fffd||fffd||fffd||fffd||fffd|w|fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    'end add
    
    If smpNum <> RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If itemNum > X_MAX Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If sr1Extra.bTimeLag = 1 Then
        If RgeTimeLag Is Nothing Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        If RgeTimeLag.Columns.Count <> itemNum Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        varTimeLag = RgeTimeLag.Value
        For i = 1 To itemNum
            If varkind(1, i) = 0 Then
                j = val(varTimeLag(1, i))
                If Abs(j) >= smpNum Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = j
                End If
            Else
                If Not IsEmpty(RgeTimeLag(1, i)) Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = 0
                End If
            End If
        Next i
    End If
    
    Set rge = RgeVar(2, 1).Resize(smpNum - 1, itemNum)
    For i = 1 To itemNum
        If varkind(1, i) > 0 Then
            If Application.WorksheetFunction.max(rge.Columns(i)) <> varkind(1, i) Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                Set handleSr1Data = Nothing
                Exit Function
            End If
            If sr1tbl.bExcept_n0 = 0 Then
                If CountUniqueValues(rge.Columns(i)) <> varkind(1, i) Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||fffd|0|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
            End If
        End If
    Next i
    msgStr = ""
    If RgeObj Is Nothing Then
        msgStr = "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVar Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVarKind Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bNum2Class = 1 And rgeClass Is Nothing) Then
        msgStr = "|fffd||293|I|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bCateName = 1 And RgeCateName Is Nothing) Then
        msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bSmpName = 2 And RgeSmpName Is Nothing) Then
        msgStr = "|fffd||5368e||496||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    'ElseIf CateNum < 2 Then
    '    msgStr = "|fffd||fffd||fffd||343|f|fffd|[|fffd|^|fffd||355|s|fffd||fffd|"
    ElseIf RgeVar.Columns.Count <> RgeVarKind.Columns.Count Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf Not RgeCateName Is Nothing Then
        If (CateNum <> RgeCateName.Rows.Count Or RgeVar.Columns.Count <> RgeCateName.Columns.Count) Then
            msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        End If
    ElseIf sr1tbl.bYsk = 1 And RgeYskData Is Nothing Then
        msgStr = "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If

    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If m_varselect <> "0" Then
        sr1VarSel = Split(m_varselect, ",")
    Else
        ReDim sr1VarSel(0 To RgeVar.Columns.Count) As Long
        sr1VarSel(0) = RgeVar.Columns.Count
        For i = 1 To RgeVar.Columns.Count
            sr1VarSel(i) = i - 1
        Next i
    End If
    
    itemNum = sr1VarSel(0)
    
    totalCateNum = 0
    If sr1tbl.bNum2Class = 1 Then
        If rgeClass.Rows.Count > 31 Then
            MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
            Set handleSr1Data = Nothing
            Exit Function
        Else
            For i = 1 To itemNum
                tmpv = rgeClass(1, sr1VarSel(i) + 1)
                totalCateNum = totalCateNum + tmpv
                If tmpv > 30 Then
                    MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
                'If varkind(1, sr1VarSel(i) + 1) = 0 And tmpv < 1 Then
                '    MsgBox "|fffd||fffd||fffd||28d||fffd||fffd||682||315||fffd||fffd||789||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                '    Set handleSr1Data = Nothing
                '    Exit Function
                'End If
                If tmpv > CateNum Then CateNum = tmpv
            Next i
        End If
    End If
    
    For i = 1 To itemNum
        tmpv = varkind(1, sr1VarSel(i) + 1)
        If tmpv < 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        totalCateNum = totalCateNum + tmpv
    Next i
    
    If totalCateNum > CATE_MAX Then
        MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: |fffd||fffd||fffd|vMAX" & CATE_MAX
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If sr1tbl.bExcept = 0 Then
        Set rge = RgeVar.Offset(1, 0).Resize(smpNum, itemNum)
        For i = 1 To itemNum
            k = sr1VarSel(i) + 1
            sr1var = rge.Columns(k).Value
            If WorksheetFunction.Count(sr1var) <> smpNum - 1 Then
                Set handleSr1Data = Nothing
                Exit Function
            End If
        Next i
    End If
    
    If sr1tbl.bYsk = 1 Then
        cateNameRow = cateNameRow + RgeYskData.Rows.Count
        smpNum = smpNum + RgeYskData.Rows.Count
    End If
    
    Set tmpSht = SbkThis.Sheets("Sr1Data") 'RgeVar.Worksheet.Parent.Sheets.Add
    tmpSht.Cells.ClearContents
    Set rge = tmpSht.Range("$B$1")
    If Not RgeSmpName Is Nothing Then
        RgeSmpName.Copy
        rge(2, 1).PasteSpecial xlValues
    Else
        For i = 1 To cateNameRow - 6 - 1
            rge(i + 1, 1) = i
        Next i
    End If
    
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To itemNum
            k = sr1VarSel(j) + 1
            If i > 1 And sr1Extra.bTimeLag = 1 Then
                If varTimeLag(1, k) >= 0 Then
                    If i - 1 <= varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                Else
                    If i - 1 > smpNum + varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                End If
            Else
                rge(i, j + 2) = RgeVar(i, k)
            End If
        Next j
    Next i
    tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)) = sr1obj
    
    If sr1tbl.bYsk = 1 Then
        If Not RgeYskName Is Nothing Then
            RgeYskName.Copy
            rge(RgeObj.Rows.Count + 1, 1).PasteSpecial xlValues
        Else
            For i = 1 To RgeYskData.Rows.Count
                rge(RgeObj.Rows.Count + i, 1) = i + smpNum
            Next i
        End If
        For i = 1 To RgeYskData.Rows.Count
            For j = 1 To itemNum
                rge(RgeObj.Rows.Count + i, j + 2) = RgeYskData(i, sr1VarSel(j) + 1)
            Next j
        Next i
    End If
    
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, itemNum + 2)).Address & vbNullChar
        
    If Not RgeCateName Is Nothing Then
        CateNum = RgeCateName.Rows.Count
        sr1cate = RgeCateName.Value
        For i = 1 To itemNum
            For j = 1 To CateNum
                If Trim(sr1cate(j, sr1VarSel(i) + 1)) = "" Then
                    rge(cateNameRow + j - 1, i) = "C-" & j
                Else
                    rge(cateNameRow + j - 1, i) = sr1cate(j, sr1VarSel(i) + 1)
                End If
            Next j
        Next i
    Else
        For i = 1 To itemNum
            For j = 1 To CateNum
                rge(cateNameRow + j - 1, i) = "C-" & j
            Next j
        Next i
    End If
    sr1tbl.bCateName = 1
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(RgeSmpName.Rows.Count + 1, 1)).Address & vbNullChar
    
    Set rge = tmpSht.Range(sr1tbl.RgeVar)
    smpNum = rge.Rows.Count
    objSmpNum = RgeObj.Rows.Count
    For i = rge.Rows.Count To 2 Step -1
        sr1var = rge.Rows(i).Value
        If Application.WorksheetFunction.Count(sr1var) <> rge.Columns.Count Or (i <= objSmpNum And Application.WorksheetFunction.Count(RgeObj(i, 1)) <> 1) Then
            If sr1tbl.bExcept = 1 Then
                tmpSht.Rows(i).Delete
                smpNum = smpNum - 1
                cateNameRow = cateNameRow - 1
                objSmpNum = objSmpNum - 1
            Else
                Set handleSr1Data = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = tmpSht.Range("$B$1")
    
    'sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(objSmpNum, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, itemNum + 2)).Address & vbNullChar
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Address & vbNullChar
    
    tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Copy SbkThis.Sheets("Sr1Data").Range("A2")
    For i = 1 To smpNum
        rge(i + 1, 1) = i
    Next i
    
    'Category Name Copy (Category Name for numeric item may be adjusted, if it is categorized)
    Set bgnCelCateNm = SbkThis.Sheets("Sr1Info").Range("B50")
    tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Copy bgnCelCateNm
    
    Call makeCateName_forNumItem(itemNum, rgeClass, RgeVarKind, bgnCelCateNm)  '11.8.21 LSQ
    
    'Item Type
    For i = 1 To itemNum
        rge(i + 1, itemNum + 4) = varkind(1, sr1VarSel(i) + 1)
    Next i
    
    sr1tbl.RgeVarKind = rge(2, itemNum + 4).Resize(itemNum, 1).Address & vbNullChar
    
    'numeric item categorized (|fffd|K|fffd||fffd||fffd|l)
    If Not rgeClass Is Nothing Then
        For i = 1 To itemNum
            rgeClass.Columns(sr1VarSel(i) + 1).Copy rge(classRow, i)
            rge(classRow, i) = CLng(rgeClass.Columns(sr1VarSel(i) + 1).Cells(1, 1))
        Next i
        sr1tbl.rgeClass = rge(classRow, 1).Resize(rgeClass.Rows.Count, itemNum).Address & vbNullChar
    End If
    
    Set handleSr1Data = tmpSht
    On Error GoTo 0
End Function

Private Function checkSr1Data() As Boolean
    Dim RgeObj As Range, RgeVar As Range
    
    On Error Resume Next
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    If RgeObj.Rows.Count > RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        checkSr1Data = False
        Exit Function
    End If
    checkSr1Data = True
End Function

Private Sub SaveBasicInfo(ByVal revisedCateNum As Variant, ByVal NewCates As Variant)
    Dim i As Long, j As Long
    Dim rge As Range, RgeObj As Range, RgeVar As Range, rgeKind As Range
    Set rge = SbkThis.Worksheets("Sr1Info").Range("A1")
    Set RgeObj = Range(toXlA1str(sr1tbl.RgeObj))
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    Set rgeKind = Range(toXlA1str(sr1tbl.RgeVarKind))
    rge.Offset(0, 1) = RgeObj(1, 1)
    rge.Offset(0, 2) = 1
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(7, i) = RgeVar(1, i)
        rge.Offset(8, i + 40) = rgeKind(i, 1)
        rge.Offset(9, i + 40) = NewCates(i)
    Next i
    Set rge = SbkThis.Worksheets("Sr1Data").Range("A1")
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(i, RgeVar.Columns.Count + 4) = revisedCateNum(i)
    Next i
End Sub

Sub IS_MTHR_BASICINFO_VBA()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet, outSht As Worksheet, outShtMid As Worksheet
    Dim RgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    Dim edtObj As EditBox
    Dim bOutMid As Boolean, strBkName As String, bkName As String
    Dim actSht As Worksheet
    Dim nid As Long
    
    'for Debug use (11.8.19 LSQ add)
#If 0 Then
    Call SbkInit
#End If

    On Error Resume Next
    
    Set actSht = ActiveSheet

    ReDim VbaGrp(0)
    
    m_varselect = getDefaultVarSelect(FUNC_NO.FUNC_BASICINFO)
    If bRangeChanged_Frm(FUNC_NO.FUNC_BASICINFO, frmBasicInfo.RgeVar.Text) Then m_varselect = "0"
redisp:
    m_bvarselected = False
    
    frmBasicInfo.bvarselected = m_bvarselected
    frmBasicInfo.VarSelect = m_varselect
    frmBasicInfo.Show
    If Not frmBasicInfo.bOK Then Exit Sub
    
    m_bvarselected = frmBasicInfo.bvarselected
    m_varselect = frmBasicInfo.VarSelect
    
    Call setDefaultAddress(FUNC_NO.FUNC_BASICINFO, getCurrentAddress_Frm(frmBasicInfo.RgeVar.Text))
    Call setDefaultVarSelect(FUNC_NO.FUNC_BASICINFO, m_varselect)
    
    sr1tbl.RgeObj = Trim(frmBasicInfo.RgeObj.Text) & vbNullChar
    sr1tbl.RgeVar = Trim(frmBasicInfo.RgeVar.Text) & vbNullChar
    sr1tbl.RgeVarKind = Trim(frmBasicInfo.RgeVarKind.Text) & vbNullChar
    sr1tbl.bExcept = IIf(frmBasicInfo.optExcept.Value = True, 1, 0)
    sr1tbl.nVarSelMethod = 1
    sr1tbl.bSmpName = 0
    sr1tbl.bYsk = 0
    'If sr1tbl.bYsk = 1 Then
    '    sr1tbl.RgeYskData = Trim(frmBasicInfo.RgeYskData) & vbNullChar
    '    sr1tbl.RgeYskName = Trim(frmBasicInfo.RgeYskName) & vbNullChar
    'End If
    sr1tbl.bExtraInfo = 0 'IIf(frmBasicInfo.optExtraInfoYes.Value = True, 1, 0)
    sr1tbl.bNum2Class = IIf(frmBasicInfo.chkNum2Cate.Value = True, 1, 0)
    If sr1tbl.bNum2Class = 1 Then
        sr1tbl.rgeClass = Trim(frmBasicInfo.RgeNumCate.Text) & vbNullChar
    End If
    'If sr1tbl.bSmpName = 1 Then
    '    sr1tbl.RgeSmpName = Trim(frmBasicInfo.RgeSmpName.Text) & vbNullChar
    'End If
    sr1tbl.bCateName = IIf(frmBasicInfo.chkCateName.Value = True, 1, 0)
    If sr1tbl.bCateName = 1 Then
        sr1tbl.RgeCateName = Trim(frmBasicInfo.RgeCateName.Text) & vbNullChar
    End If
    sr1tbl.bPointGrp = 0 'IIf(frmBasicInfo.chkOutGrp.Value = True, 1, 0)
    sr1tbl.bExcept_n0 = IIf(frmBasicInfo.optExcept_n0.Value = True, 1, 0)
    
#If 0 Then '11.12.2 LSQ mdf
    sr1Extra.bTimeLag = IIf(frmBasicInfo.chkTimeLag.Value = True, 1, 0)
    If sr1Extra.bTimeLag = 1 Then
        sr1Extra.RgeTimeLag = Trim(frmBasicInfo.RgeTimeLag.Text) & vbNullChar
    End If
#Else
    sr1Extra.bTimeLag = 0
    sr1Extra.RgeTimeLag = vbNullChar
#End If

    Set tmpSht = handleSr1Data
    
    If tmpSht Is Nothing Then
        GoTo redisp
    End If
    
    #If 0 Then
    'output sheet
    strBkName = "[" & ActiveWorkbook.name & "]"
    '
    
    Set outSht = ActiveWorkbook.Worksheets.Add
    sr1tbl.OutSheet = strBkName & outSht.name & "!R50C1"
    #End If
    
    'data sheet
    tmpSht.Activate
    
    Dim revisedCateNum() As Long, NewCates() As String
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    ReDim revisedCateNum(1 To RgeVar.Columns.Count + 1)
    ReDim NewCates(1 To RgeVar.Columns.Count + 1)
    Call Remove0Cate(sr1tbl.RgeVarKind, sr1tbl.RgeVar, sr1tbl.RgeCateName, sr1tbl.bExcept_n0 = 0, revisedCateNum, NewCates)
    
    If Not checkSr1Data Then
        GoTo redisp
    End If
    
    SaveBasicInfo revisedCateNum, NewCates
    
    bkName = "[" & SbkThis.name & "]"
    sr1tbl.RgeInfo = bkName & "Sr1Info!R1C1" & vbNullChar
    sr1tbl.OutSheet = bkName & "Sr1Result!R1C1" & vbNullChar
    sr1tbl.RgeObj = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeObj) & vbNullChar
    sr1tbl.RgeVar = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVar) & vbNullChar
    sr1tbl.RgeSmpName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeSmpName) & vbNullChar
    sr1tbl.RgeCateName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeCateName) & vbNullChar
    sr1tbl.RgeVarKind = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVarKind) & vbNullChar
    sr1tbl.rgeClass = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.rgeClass) & vbNullChar
    sr1tbl.OutSheet = Trim(sr1tbl.OutSheet) & vbNullChar
    
    sr1tbl.nFuncNo = FUNC_NO.FUNC_BASICINFO
    
    SbkThis.Sheets("Sr1Result").Cells.Clear    'save calc results from DLL
    
    nid = IIf(isTrialVer, 0, 1)
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = sr1_dlg(nid, sr1tbl)  'do calc
    actSht.Activate
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        Exit Sub
    End If
    
    If rtn = 0 Then 'do output
        Sr1_Output FUNC_NO.FUNC_BASICINFO, actSht.Parent.Sheets.Add, sr1tbl.bPointGrp, True, True
    End If
    On Error GoTo 0
End Sub

Public Sub Sr1DrawDotPlot(ByVal strRgeClass As String, ByVal strRgeData As String, _
                                    ByVal strRgeOut As String, ByVal crossAt As Double)
    Application.Run GxlaBkGraph1 & "!DrawDotPlot_A", toXlA1str(strRgeClass), toXlA1str(strRgeData), _
                                            toXlA1str(strRgeOut), crossAt
End Sub
                          
'=== EOF ===



Attribute VB_Name = "MdlDA"
'=======================================================
' SR2 for iSTAT_MTHR Ver1.0
'
' 2011.8 WZH LSQ
'=======================================================

Option Private Module
Option Explicit

Private Type Srk2Para
    RgeInfo As String * 256
    OutSheet As String * 256
    RgeObj As String * 256
    RgeVar As String * 256
    RgeVarKind As String * 256
    rgeClass As String * 256
    RgeSmpName As String * 256
    RgeCateName As String * 256
    RgeYskData As String * 256          'only used for proceeding data
    RgeYskName As String * 256          'only used for proceeding data
    grpnum As Long
    bExcept As Long
    bExcept_n0 As Long
    bYsk As Long                        'only used for proceeding data
    bExtraInfo As Long
    nVarSelMethod As Long
    bSmpName As Long
    bNum2Class As Long
    bCateName As Long
    bPointGrp As Long
    nXAxis As Long
    nYAxis As Long
    bCateNameDisp As Long
    bSmpNameDisp As Long
    method As Long
End Type

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private m_bvarselected As Boolean
Private sr2tbl As Srk2Para
#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function sr2_dlg Lib "MTHR_A_ISTA_64.dll" (ByVal nid As Long, sr2tbl As Srk2Para) As Integer
    #Else
        Private Declare Function sr2_dlg Lib "MTHR_A_ISTA_64.dll" (ByVal nid As Long, sr2tbl As Srk2Para) As Integer
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function sr2_dlg Lib "MTHR_A_ISTA.dll" (ByVal nid As Long, sr2tbl As Srk2Para) As Integer
    #Else
        Private Declare Function sr2_dlg Lib "MTHR_A_ISTA.dll" (ByVal nid As Long, sr2tbl As Srk2Para) As Integer
    #End If
#End If

#If 0 Then '11.8.19 LSQ : not used ---------------------------

Function ReallocGrp(ByVal n As Long) As Long
    ReDim VbaGrp(1 To n)
    Call InitGrpAry(VbaGrp)
    ReallocGrp = 0
End Function

Private Sub Sr2GetVarSel()
    Dim i As Integer
    Dim dlg As DialogSheet
    Dim rtn As Integer
    Dim RgeVar As Range
    Dim valvar As Variant
    Dim savLabelA As String, savLabelB As String
    
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgSrk2")
    Set RgeVar = Range(dlg.EditBoxes("RgeVar").Text)
    valvar = RgeVar.Value
    If Err.Number <> 0 Then
        Err.Clear
        m_varselect = "0"
        On Error GoTo 0
        Exit Sub
    End If
    For i = 1 To RgeVar.Columns.Count
        m_varselect = m_varselect & "," & valvar(1, i)
    Next i
    'save
    savLabelA = frmVarSel.Label1.Caption
    savLabelB = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = "|fffd|I|fffd||fffd||fffd||142||fffd||fffd||fffd|A|fffd|C|fffd|e|fffd||fffd|"
    frmVarSel.Label2.Caption = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd|"
    m_varselect = VarSelect(Mid(m_varselect, 2))
    'recovery
    frmVarSel.Label1.Caption = savLabelA
    frmVarSel.Label2.Caption = savLabelB
    On Error GoTo 0
End Sub

#End If '11.8.19 LSQ : not used ---------------------------

Private Function CountUniqueValues(InputRange As Range) As Long
    Dim cl As Range, UniqueValues As New Collection
    Dim rowNum As Long, colNum As Long
    Dim i As Long, j As Long
    Dim vdata As Variant
    On Error Resume Next
    rowNum = InputRange.Rows.Count
    colNum = InputRange.Columns.Count
    vdata = InputRange.Value
    For i = 1 To rowNum
        For j = 1 To colNum
            UniqueValues.Add vdata(i, j), CStr(vdata(i, j))
        Next j
    Next i
    On Error GoTo 0
    CountUniqueValues = UniqueValues.Count
End Function

'RgeX : |fffd|K|fffd||fffd||fffd|l|fffd|w|fffd||fffd||348||fffd| (formatted)
'RgeCateNum : Item category number (0=numeric item)
'outBgn : category name output begin cell
'
'11.8.21 LSQ
Private Sub makeCateName_forNumItem(ByVal itemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or itemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 1 To itemNum
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            
            outBgn(1, i) = "|fffd|`" & x1
            For j = 2 To cateN
                outBgn(j, i) = x1 & "|fffd|`" & x2
                'next
                x1 = RgeX(j + 1, i)
                x2 = RgeX(j + 2, i)
            Next j
        End If
nextItem:
    Next i
End Sub

'11.8.21 LSQ mdf
Private Function handleSr2Data() As Worksheet
    Dim i As Long, j As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim rgeClass As Range, RgeVarKind As Range
    Dim RgeSmpName As Range, RgeCateName As Range
    Dim RgeYskData As Range, RgeYskName As Range
    Dim tmpSht As Worksheet
    Dim sr2obj As Variant, sr2var As Variant, sr2cate As Variant, varkind As Variant
    Dim sr2VarSel As Variant
    Dim cateNameRow As Long, varKindRow As Long, classRow As Long
    Dim CateNum As Long, smpNum As Long, itemNum As Long, grpnum As Long
    Dim tmpv As Long, totalCateNum As Long
    Dim msgStr As String
    Dim bgnCelCateNm As Range, tmpi As Long
    
    On Error Resume Next
    Set RgeObj = Range(sr2tbl.RgeObj)
    Set RgeVar = Range(sr2tbl.RgeVar)
    Set RgeVarKind = Range(sr2tbl.RgeVarKind)
    
    '2012.10.22 added
    itemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    
    If RgeVarKind Is Nothing Then
        Set tmpSht = SbkThis.Sheets("TmpSheet")
        tmpSht.Cells.ClearContents
        Set rge = tmpSht.Range("B1")
        For i = 1 To itemNum
            rge(1, i) = 0
        Next i
        Set RgeVarKind = rge.Resize(1, itemNum)
    End If
    'end add
    
    If sr2tbl.bNum2Class = 1 Then
        Set rgeClass = Range(sr2tbl.rgeClass)
    End If
    If sr2tbl.bCateName = 1 Then
        Set RgeCateName = Range(sr2tbl.RgeCateName)
    End If
    If sr2tbl.bSmpName = 1 Then
        Set RgeSmpName = Range(sr2tbl.RgeSmpName)
    End If
    If sr2tbl.bYsk = 1 Then
        Set RgeYskData = Range(sr2tbl.RgeYskData)
        Set RgeYskName = Range(sr2tbl.RgeYskName)
    End If
    cateNameRow = RgeObj.Rows.Count
    If cateNameRow < RgeVar.Rows.Count Then
        cateNameRow = RgeVar.Rows.Count
    End If
    If cateNameRow < RgeSmpName.Rows.Count Then
        cateNameRow = RgeSmpName.Rows.Count
    End If
    cateNameRow = cateNameRow + 6
    sr2obj = RgeObj.Value
    sr2var = RgeVar.Value
    varkind = RgeVarKind.Value
    CateNum = Application.WorksheetFunction.max(varkind)
    If CateNum = 0 Then CateNum = 1
    classRow = cateNameRow + CateNum + 2
    
    itemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    If smpNum <> RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr2Data = Nothing
        Exit Function
    End If
    
    Set rge = RgeObj(2, 1).Resize(smpNum - 1, 1)
    grpnum = CountUniqueValues(rge)
    If Application.WorksheetFunction.max(rge) <> grpnum Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr2Data = Nothing
        Exit Function
    End If
    
    Set rge = RgeVar(2, 1).Resize(smpNum, itemNum)
    If itemNum = 1 Then
        If varkind > 0 Then
            If Application.WorksheetFunction.max(rge.Columns(i)) <> varkind Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                Set handleSr2Data = Nothing
                Exit Function
            End If
            If sr2tbl.bExcept_n0 = 0 Then
                If CountUniqueValues(rge.Columns(i)) <> varkind Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||fffd|0|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
                    Set handleSr2Data = Nothing
                    Exit Function
                End If
            End If
        End If
    Else
        For i = 1 To itemNum
            If varkind(1, i) > 0 Then
                If Application.WorksheetFunction.max(rge.Columns(i)) <> varkind(1, i) Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr2Data = Nothing
                    Exit Function
                End If
                If sr2tbl.bExcept_n0 = 0 Then
                    If CountUniqueValues(rge.Columns(i)) <> varkind(1, i) Then
                        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||fffd|0|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
                        Set handleSr2Data = Nothing
                        Exit Function
                    End If
                End If
            End If
        Next i
    End If
    
    msgStr = ""
    If RgeObj Is Nothing Then
        msgStr = "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVar Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVarKind Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr2tbl.bNum2Class = 1 And rgeClass Is Nothing) Then
        msgStr = "|fffd||293|I|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr2tbl.bCateName = 1 And RgeCateName Is Nothing) Then
        msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr2tbl.bSmpName = 2 And RgeSmpName Is Nothing) Then
        msgStr = "|fffd||5368e||496||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    'ElseIf CateNum < 2 Then
    '    msgStr = "|fffd||fffd||fffd||343|f|fffd|[|fffd|^|fffd||355|s|fffd||fffd|"
    ElseIf RgeVar.Columns.Count <> RgeVarKind.Columns.Count Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf Not RgeCateName Is Nothing Then
        If (CateNum <> RgeCateName.Rows.Count Or RgeVar.Columns.Count <> RgeCateName.Columns.Count) Then
            msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        End If
    ElseIf sr2tbl.bYsk = 1 And RgeYskData Is Nothing Then
        msgStr = "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If

    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set handleSr2Data = Nothing
        Exit Function
    End If
    
    If m_varselect <> "0" Then
        sr2VarSel = Split(m_varselect, ",")
    Else
        ReDim sr2VarSel(0 To RgeVar.Columns.Count) As Long
        sr2VarSel(0) = RgeVar.Columns.Count
        For i = 1 To RgeVar.Columns.Count
            sr2VarSel(i) = i - 1
        Next i
    End If
    
    itemNum = sr2VarSel(0)
    
    totalCateNum = 0
    If sr2tbl.bNum2Class = 1 Then
        If rgeClass.Rows.Count > 31 Then
            MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
            Set handleSr2Data = Nothing
            Exit Function
        Else
            If itemNum = 1 Then
                tmpv = rgeClass(1, sr2VarSel(i) + 1)
                totalCateNum = totalCateNum + tmpv
                If tmpv > 30 Then
                    MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
                    Set handleSr2Data = Nothing
                    Exit Function
                End If
                If varkind = 0 And tmpv < 1 Then
                    MsgBox "|fffd||fffd||fffd||28d||fffd||fffd||682||315||fffd||fffd||789||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr2Data = Nothing
                    Exit Function
                End If
                If tmpv > CateNum Then CateNum = tmpv
            Else
                For i = 1 To itemNum
                    tmpv = rgeClass(1, sr2VarSel(i) + 1)
                    totalCateNum = totalCateNum + tmpv
                    If tmpv > 30 Then
                        MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
                        Set handleSr2Data = Nothing
                        Exit Function
                    End If
                    If varkind(1, sr2VarSel(i) + 1) = 0 And tmpv < 1 Then
                        MsgBox "|fffd||fffd||fffd||28d||fffd||fffd||682||315||fffd||fffd||789||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                        Set handleSr2Data = Nothing
                        Exit Function
                    End If
                    If tmpv > CateNum Then CateNum = tmpv
                Next i
            End If
        End If
    End If
    
    If itemNum = 1 Then
        tmpv = varkind
        If tmpv < 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr2Data = Nothing
            Exit Function
        End If
        totalCateNum = totalCateNum + tmpv
    Else
        For i = 1 To itemNum
            tmpv = varkind(1, sr2VarSel(i) + 1)
            If tmpv < 0 Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                Set handleSr2Data = Nothing
                Exit Function
            End If
            totalCateNum = totalCateNum + tmpv
        Next i
    End If
    
    If totalCateNum > 200 Then
        MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: |fffd||fffd||fffd|vMAX200"
        Set handleSr2Data = Nothing
        Exit Function
    End If
    
    If sr2tbl.bYsk = 1 Then '12.8.27 LSQ mdf
        tmpi = RgeYskData.Rows.Count
        
        cateNameRow = cateNameRow + tmpi
        smpNum = smpNum + tmpi
        classRow = classRow + tmpi
    End If
    
    Set tmpSht = SbkThis.Sheets("Sr2Data") 'RgeVar.Worksheet.Parent.Sheets.Add
    tmpSht.Cells.ClearContents
    Set rge = tmpSht.Range("$B$1")
    If Not RgeSmpName Is Nothing Then
        RgeSmpName.Copy
        rge(2, 1).PasteSpecial xlValues
    Else
        For i = 1 To cateNameRow - 6 - 1
            rge(i + 1, 1) = i
        Next i
    End If
    
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To itemNum
            rge(i, j + 2) = RgeVar(i, sr2VarSel(j) + 1)
        Next j
    Next i
    tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)) = sr2obj
    
    If sr2tbl.bYsk = 1 Then
        If Not RgeYskName Is Nothing Then
            RgeYskName.Copy
            rge(RgeObj.Rows.Count + 1, 1).PasteSpecial xlValues
        Else
            For i = 1 To RgeYskData.Rows.Count
                rge(RgeObj.Rows.Count + i, 1) = i + smpNum
            Next i
        End If
        For i = 1 To RgeYskData.Rows.Count
            For j = 1 To itemNum
                rge(RgeObj.Rows.Count + i, j + 2) = RgeYskData(i, sr2VarSel(j) + 1)
            Next j
        Next i
    End If
    
    sr2tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr2tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, itemNum + 2)).Address & vbNullChar
        
    If Not RgeCateName Is Nothing Then
        CateNum = RgeCateName.Rows.Count
        sr2cate = RgeCateName.Value
        For i = 1 To itemNum
            For j = 1 To CateNum
                rge(cateNameRow + j - 1, i) = sr2cate(j, sr2VarSel(i) + 1)
            Next j
        Next i
    Else
        For i = 1 To itemNum
            For j = 1 To CateNum
                rge(cateNameRow + j - 1, i) = "C-" & j
            Next j
        Next i
    End If
    sr2tbl.bCateName = 1
    sr2tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Address & vbNullChar
    sr2tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(RgeSmpName.Rows.Count + 1, 1)).Address & vbNullChar
    
    Set rge = tmpSht.Range(sr2tbl.RgeVar)
    smpNum = rge.Rows.Count
    For i = rge.Rows.Count To 2 Step -1
        sr2var = rge.Rows(i).Value
        If Application.WorksheetFunction.Count(sr2var) <> rge.Columns.Count Then
            If sr2tbl.bExcept = 1 Then
                tmpSht.Rows(i).Delete
                smpNum = smpNum - 1
                cateNameRow = cateNameRow - 1
            Else
                Set handleSr2Data = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = tmpSht.Range("$B$1")
    
    sr2tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr2tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, itemNum + 2)).Address & vbNullChar
    sr2tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Address & vbNullChar
    sr2tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Address & vbNullChar
    
    tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Copy SbkThis.Sheets("Sr2Data").Range("A2")
    For i = 1 To smpNum
        rge(i + 1, 1) = i
    Next i
    
    'Category Name Copy (Category Name for numeric item may be adjusted, if it is categorized)
    Set bgnCelCateNm = SbkThis.Sheets("Sr2Info").Range("B50")
    tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Copy bgnCelCateNm
    
    Call makeCateName_forNumItem(itemNum, rgeClass, RgeVarKind, bgnCelCateNm)  '11.8.21 LSQ
    
    'Item Type
    If itemNum = 1 Then
        rge(2, itemNum + 4) = varkind
    Else
        For i = 1 To itemNum
            rge(i + 1, itemNum + 4) = varkind(1, sr2VarSel(i) + 1)
        Next i
    End If
    
    sr2tbl.RgeVarKind = rge(2, itemNum + 4).Resize(itemNum, 1).Address & vbNullChar
    
    'numeric item categorized (|fffd|K|fffd||fffd||fffd|l)
    If Not rgeClass Is Nothing Then
        For i = 1 To itemNum
            rgeClass.Columns(sr2VarSel(i) + 1).Copy rge(classRow, i)
        Next i
        sr2tbl.rgeClass = rge(classRow, 1).Resize(rgeClass.Rows.Count, itemNum).Address & vbNullChar
    End If
    
    sr2tbl.grpnum = grpnum
    
    Set handleSr2Data = tmpSht
    On Error GoTo 0
End Function

Private Function checkSr2Data() As Boolean
    Dim RgeObj As Range, RgeVar As Range
    
    On Error Resume Next
    Set RgeObj = Range(sr2tbl.RgeObj)
    Set RgeVar = Range(sr2tbl.RgeVar)
    If RgeObj.Rows.Count > RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        checkSr2Data = False
        Exit Function
    End If
    checkSr2Data = True
End Function

Private Sub SaveBasicInfo()
    Dim i As Long, j As Long
    Dim rge As Range, RgeObj As Range, RgeVar As Range
    Set rge = SbkThis.Worksheets("Sr2Info").Range("A1")
    Set RgeObj = Range(toXlA1str(sr2tbl.RgeObj))
    Set RgeVar = Range(toXlA1str(sr2tbl.RgeVar))
    rge.Offset(0, 1) = RgeObj(1, 1)
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(7, i) = RgeVar(1, i)
    Next i
End Sub

Function IS_MTHR_DA_Atari() As Integer
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet, outSht As Worksheet, outShtMid As Worksheet
    Dim RgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    Dim edtObj As EditBox
    Dim bOutMid As Boolean, strBkName As String, bkName As String
    Dim actSht As Worksheet
    Dim nid As Long
    
    'FUNCNO = FUNC_DA
    
    'for Debug use (11.8.19 LSQ add)
#If 0 Then
    Call SbkInit
#End If

    On Error Resume Next
    
    Set actSht = ActiveSheet

    ReDim VbaGrp(0)
    
    m_varselect = getDefaultVarSelect(FUNC_NO.FUNC_DA)
    If bRangeChanged_Frm(FUNC_NO.FUNC_DA, frmDA.RgeVar.Text) Then m_varselect = "0"
redisp:
    m_bvarselected = False
    
    frmDA.bvarselected = m_bvarselected
    frmDA.VarSelect = m_varselect
    'frmDA.Show
    'If Not frmDA.bOK Then Exit Sub
    
    m_bvarselected = frmDA.bvarselected
    m_varselect = frmDA.VarSelect
    
    Call setDefaultAddress(FUNC_NO.FUNC_DA, getCurrentAddress_Frm(frmDA.RgeVar.Text))
    Call setDefaultVarSelect(FUNC_NO.FUNC_DA, m_varselect)
    
    sr2tbl.RgeObj = Trim(frmDA.RgeObj.Text) & vbNullChar
    sr2tbl.RgeVar = Trim(frmDA.RgeVar.Text) & vbNullChar
    sr2tbl.RgeVarKind = "" 'Trim(frmDA.RgeVarKind.text) & vbNullChar
    sr2tbl.bExcept = IIf(frmDA.optExcept.Value = True, 1, 0)
    sr2tbl.nVarSelMethod = IIf(frmDA.optVarNone.Value = True, 1, 2)
    sr2tbl.bSmpName = IIf(frmDA.optSmpNo.Value = True, 0, 1)
    sr2tbl.bYsk = IIf(frmDA.chkYsk.Value = True, 1, 0)
    If sr2tbl.bYsk = 1 Then
        sr2tbl.RgeYskData = Trim(frmDA.RgeYskData) & vbNullChar
        sr2tbl.RgeYskName = Trim(frmDA.RgeYskName) & vbNullChar
    End If
    sr2tbl.bExtraInfo = True 'IIf(frmDA.optExtraInfoYes.Value = True, 1, 0)
    sr2tbl.bNum2Class = 0 'IIf(frmDA.chkNum2Cate.Value = True, 1, 0)
    'If sr2tbl.bNum2Class = 1 Then
    '    sr2tbl.rgeClass = Trim(frmDA.RgeNumCate.text) & vbNullChar
    'End If
    If sr2tbl.bSmpName = 1 Then
        sr2tbl.RgeSmpName = Trim(frmDA.RgeSmpName.Text) & vbNullChar
    End If
    sr2tbl.bCateName = 0 ' IIf(frmDA.chkCateName.Value = True, 1, 0)
    'If sr2tbl.bCateName = 1 Then
    '    sr2tbl.RgeCateName = Trim(frmDA.RgeCateName.text) & vbNullChar
    'End If
    sr2tbl.bPointGrp = 1 'IIf(frmDA.chkOutGrp.Value = True, 1, 0)
    sr2tbl.bCateNameDisp = 0 'IIf(frmDA.chkNameDisp.Value = True, 1, 0)
    sr2tbl.bSmpNameDisp = 1 'IIf(frmDA.chkNameDispSmp.Value = True, 1, 0)
    sr2tbl.nXAxis = 1 'CLng(frmDA.XAxes.Text)
    sr2tbl.nYAxis = 2 'CLng(frmDA.YAxes.Text)
    sr2tbl.bExcept_n0 = IIf(frmDA.optExcept_n0.Value = True, 1, 0)
    Set tmpSht = handleSr2Data
    
    If tmpSht Is Nothing Then
        GoTo redisp
    End If
    
    #If 0 Then
    'output sheet
    strBkName = "[" & ActiveWorkbook.name & "]"
    '
    
    Set outSht = ActiveWorkbook.Worksheets.Add
    sr2tbl.OutSheet = strBkName & outSht.name & "!R50C1"
    #End If
    
    'data sheet
    tmpSht.Activate
    
    Call Remove0Cate(sr2tbl.RgeVarKind, sr2tbl.RgeVar, sr2tbl.RgeCateName, sr2tbl.bExcept_n0 = 0)
    
    If Not checkSr2Data Then
        GoTo redisp
    End If
    
    SaveBasicInfo
    
    bkName = "[" & SbkThis.name & "]"
    sr2tbl.RgeInfo = bkName & "Sr2Info!R1C1" & vbNullChar
    sr2tbl.OutSheet = bkName & "Sr2Result!R1C1" & vbNullChar
    sr2tbl.RgeObj = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeObj) & vbNullChar
    sr2tbl.RgeVar = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeVar) & vbNullChar
    sr2tbl.RgeSmpName = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeSmpName) & vbNullChar
    sr2tbl.RgeCateName = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeCateName) & vbNullChar
    sr2tbl.RgeVarKind = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeVarKind) & vbNullChar
    sr2tbl.rgeClass = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.rgeClass) & vbNullChar
    sr2tbl.OutSheet = Trim(sr2tbl.OutSheet) & vbNullChar
    
    sr2tbl.method = FUNC_NO.FUNC_DA
    
    SbkThis.Sheets("Sr2Result").Cells.Clear    'save calc results from DLL
    
    nid = IIf(isTrialVer, 0, 1)
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = sr2_dlg(nid, sr2tbl)  'do calc
    actSht.Activate
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        IS_MTHR_DA_Atari = rtn
        Exit Function
    End If
    
    If rtn = 0 Then 'do output
        Sr2_Output FUNC_NO.FUNC_DA, actSht.Parent.Sheets.Add, sr2tbl.bPointGrp, sr2tbl.nXAxis, sr2tbl.nYAxis, sr2tbl.bSmpNameDisp, sr2tbl.bCateNameDisp
    End If
    On Error GoTo 0
    IS_MTHR_DA_Atari = rtn
End Function

Public Sub Sr2DrawDotPlot(ByVal strRgeClass As String, ByVal strRgeData As String, _
                                    ByVal strRgeOut As String, ByVal crossAt As Double)
    Application.Run GxlaBkGraph & "!DrawDotPlot_A", toXlA1str(strRgeClass), toXlA1str(strRgeData), _
                                            toXlA1str(strRgeOut), crossAt
End Sub
                          
'=== EOF ===


Attribute VB_Name = "MdlDebug"
'=======================================================
' Module for Debug
'
' 2011.8.19 LSQ
'=======================================================

Option Private Module
Option Explicit

Dim SbkTemplate As Workbook

Sub SbkInit()
    Set SbkTemplate = Workbooks.Add
    
    ThisWorkbook.Worksheets.Copy After:=SbkTemplate.Worksheets(1)
    
    Windows(SbkTemplate.name).Visible = False
End Sub

Function SbkThis() As Workbook
    If SbkTemplate Is Nothing Then
        Set SbkThis = ThisWorkbook
    Else
        Set SbkThis = SbkTemplate
    End If
End Function

'=== EOF ===
Attribute VB_Name = "MdlExpToDumy_MA"
Option Private Module
Option Explicit

Private Const INCORRECTRGE As String = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"

Private Type DATAEXP_MA
    DataRge As String
    cateRge As String
    outRge As String
    Except As Long
    dataTitle As Long
End Type

Private Sub BubbleSort(MyArray As Variant, Optional ByVal bAsc As Boolean = True)
     
    Dim first           As Integer
    Dim last            As Integer
    Dim i               As Integer
    Dim j               As Integer
    Dim Temp            As Variant
    Dim List            As Variant
     
    first = LBound(MyArray)
    last = UBound(MyArray)
    For i = first To last - 1
        For j = i + 1 To last
            If bAsc Then
                If MyArray(i) > MyArray(j) Then
                    Temp = MyArray(j)
                    MyArray(j) = MyArray(i)
                    MyArray(i) = Temp
                End If
            Else
                If MyArray(i) < MyArray(j) Then
                    Temp = MyArray(j)
                    MyArray(j) = MyArray(i)
                    MyArray(i) = Temp
                End If
            End If
        Next j
    Next i
End Sub

Private Function doCalc(dt As DATAEXP_MA) As Boolean
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rowNum As Long, colNum As Long
    Dim prevCate As Long
    Dim maxCateNo As Long
    Dim DataR As Range, CateR As Range, OutR As Range
    Dim v As Variant, datav As Variant
    Dim flgBreak As Boolean
    On Error Resume Next
    Set DataR = Range(dt.DataRge)
    Set CateR = Range(dt.cateRge)
    Set OutR = Range(dt.outRge)
    OutR(2, 1) = "No."
    rowNum = DataR.Rows.Count
    colNum = DataR.Columns.Count
    v = DataR.Value
    k = 3
    maxCateNo = 1
    For i = 2 To rowNum
        flgBreak = False
        If IsEmpty(v(i, 1)) Then
            If dt.Except <> 1 Then
                Exit Function
            End If
        End If
        datav = Split(v(i, 1), ",")
        For j = LBound(datav) To UBound(datav)
            datav(j) = Format(datav(j), "00000000")
        Next j
        BubbleSort datav
        prevCate = 1
        For j = LBound(datav) To UBound(datav)
            If Not IsNumeric(datav(j)) Or IsEmpty(datav(j)) Then
                If dt.Except <> 1 Then
                    Exit Function
                Else
                    flgBreak = True
                    Exit For
                End If
            Else
                OutR(k, 1) = i - 1
                For l = prevCate To datav(j)
                    OutR(k, l + 1) = 0
                Next l
                prevCate = datav(j) + 1
                OutR(k, datav(j) + 1) = 1
                If datav(j) > maxCateNo Then maxCateNo = datav(j)
            End If
        Next j
        If Not flgBreak Then
            v(k - 2, 1) = prevCate
            k = k + 1
        Else
            OutR(k, 1) = i - 1
            OutR(k, 2) = "-"
            k = k + 1
        End If
    Next i
    For i = 1 To k - 3
        If OutR(i + 2, 2) = "-" Then
            For j = 2 To maxCateNo
                OutR(i + 2, j + 1) = "-"
            Next j
        Else
            For j = v(i, 1) To maxCateNo
                OutR(i + 2, j + 1) = 0
            Next j
        End If
    Next i
    For i = 1 To maxCateNo
        OutR(2, i + 1) = "Yes"
        If Not CateR Is Nothing Then
            OutR(1, i + 1) = IIf(IsEmpty(CateR(i, 1)) Or Trim(CateR(i, 1)) = "", "C-" & i, CateR(i, 1))
        Else
            OutR(1, i + 1) = "C-" & i
        End If
    Next i
    Call SetRangeBorder(OutR.Resize(2, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(1, 2).Resize(2, maxCateNo), xlThin, xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(3, 1).Resize(k - 3, 1), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(3, 2).Resize(k - 3, maxCateNo), xlThin, xlThin, xlThin, xlThin, xlThin)
    OutR.Worksheet.Activate
    OutR.Select
    On Error GoTo 0
End Function

Sub IS_MTHR_EXPtoDumy_MA()
    Dim rtn As Integer
    Dim tmpSht As Worksheet
    Dim dt As DATAEXP_MA
    Dim dlg As DialogSheet
    Dim actSht As Worksheet
    Dim DataR As Range, CateR As Range, OutR As Range
    Dim nid As Long
    On Error Resume Next
    
    nid = IIf(isTrialVer, 0, 1)
        
    Set dlg = ThisWorkbook.DialogSheets("DlgDataExp_MA")
redisp:
    Set actSht = ActiveSheet
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Set DataR = Range(dlg.EditBoxes("RgeData").Text)
        Set CateR = Range(dlg.EditBoxes("RgeCate").Text)
        Set OutR = Range(dlg.EditBoxes("RgeOut").Text)
        dt.dataTitle = 0 'IIf(dlg.OptionButtons("optTitle") = xlOn, 1, 0)
        dt.Except = IIf(dlg.OptionButtons("optExcept") = xlOn, 1, 2)
        If DataR Is Nothing Or OutR Is Nothing Then
            MsgBox INCORRECTRGE
            GoTo redisp
        End If
        dt.DataRge = DataR.Worksheet.name & "!" & DataR.Address
        dt.cateRge = CateR.Worksheet.name & "!" & CateR.Address
        dt.outRge = OutR.Worksheet.name & "!" & OutR.Address
        doCalc dt
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub

Attribute VB_Name = "MdlExtSr1"
'=======================================================
' SR1 for iSTAT_YSK Ver1.0
'
' 2011.11 WZH
'=======================================================

Option Private Module
Option Explicit

Type Srk1Para
    RgeInfo As String * 256
    OutSheet As String * 256
    RgeObj As String * 256
    RgeVar As String * 256
    RgeVarKind As String * 256
    rgeClass As String * 256
    RgeSmpName As String * 256
    RgeCateName As String * 256
    RgeYskData As String * 256          'only used for proceeding data
    RgeYskName As String * 256          'only used for proceeding data
    bExcept As Long
    bExcept_n0 As Long
    bYsk As Long                        'only used for proceeding data
    bExtraInfo As Long
    nVarSelMethod As Long
    bSmpName As Long
    bNum2Class As Long
    bCateName As Long
    bPointGrp As Long
    nFuncNo As Long
End Type

Type Srk1Para_Extra
    bTimeLag As Long
    RgeTimeLag As String * 256          'only used for procedding data
    nTimeStyle As Long
    nYear As Long
    nMonth As Long
End Type

Private Const X_MAX As Integer = 30
Private Const CATE_MAX As Integer = 200

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private m_bvarselected As Boolean
Private sr1tbl As Srk1Para
Private sr1Extra As Srk1Para_Extra

#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function sr1_dlg Lib "MTHR_A_ISTA_64.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #Else
        Private Declare Function sr1_dlg Lib "MTHR_A_ISTA_64.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function sr1_dlg Lib "MTHR_A_ISTA.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #Else
        Private Declare Function sr1_dlg Lib "MTHR_A_ISTA.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #End If
#End If

Private Function CountUniqueValues(InputRange As Range) As Long
    Dim cl As Range, UniqueValues As New Collection
    Dim rowNum As Long, colNum As Long
    Dim i As Long, j As Long
    Dim vdata As Variant
    On Error Resume Next
    rowNum = InputRange.Rows.Count
    colNum = InputRange.Columns.Count
    vdata = InputRange.Value
    For i = 1 To rowNum
        For j = 1 To colNum
            UniqueValues.Add vdata(i, j), CStr(vdata(i, j))
        Next j
    Next i
    On Error GoTo 0
    CountUniqueValues = UniqueValues.Count
End Function

'RgeX : |fffd|K|fffd||fffd||fffd|l|fffd|w|fffd||fffd||348||fffd| (formatted)
'RgeCateNum : Item category number (0=numeric item)
'outBgn : category name output begin cell
'
'11.8.21 LSQ
Private Sub nu_makeCateName_forNumItem(ByVal itemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or itemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 1 To itemNum
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            dxHalf = (x2 - x1) / 2
            
            outBgn(1, i) = "|fffd|`" & (x1 + dxHalf)
            For j = 2 To cateN - 1
                outBgn(j, i) = (x1 + dxHalf) & "|fffd|`" & (x2 + dxHalf)
                'next
                x1 = x1 + 2 * dxHalf
                x2 = x2 + 2 * dxHalf
            Next j
            outBgn(cateN, i) = (x2 - dxHalf) & "|fffd|`"
        End If
nextItem:
    Next i
        
End Sub

'2011.12.04 rewritten
Private Sub makeCateName_forNumItem(ByVal itemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, k As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    Dim sr1VarSel As Variant
    Dim nItemNum As Long
    
    If RgeX Is Nothing Or itemNum < 1 Then Exit Sub    'no number item categorized
    
    If m_varselect <> "0" Then
        sr1VarSel = Split(m_varselect, ",")
    Else
        ReDim sr1VarSel(0 To itemNum) As Long
        sr1VarSel(0) = itemNum
        For i = 1 To itemNum
            sr1VarSel(i) = i - 1
        Next i
    End If
    
    nItemNum = sr1VarSel(0)
    
    For i = 1 To nItemNum
        j = sr1VarSel(i) + 1
        cateN = RgeCateNum(1, j)
        If cateN = 0 Then
            cateN = RgeX(1, j)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, j)
            x2 = RgeX(3, j)
            
            outBgn(1, i) = "|fffd|`" & x1
            For k = 2 To cateN
                outBgn(k, i) = x1 & "|fffd|`" & x2
                'next
                x1 = RgeX(k + 1, j)
                x2 = RgeX(k + 2, j)
            Next k
        End If
nextItem:
    Next i
        
End Sub
'end rewritten

Private Function next_Year_Month(ByVal nTimeStyle As Long, ByRef year As Long, ByRef month As Long) As Boolean
    next_Year_Month = False
    If nTimeStyle = 1 Then
        month = month + 1
    ElseIf nTimeStyle = 2 Then
        month = month + 3
    ElseIf nTimeStyle = 3 Then
        month = month + 12
    ElseIf nTimeStyle = 4 Then
        month = month + 1
    End If
    If month > 12 And nTimeStyle < 4 Or nTimeStyle = 3 Then
        month = month - 12
        year = year + 1
        next_Year_Month = True
    End If
End Function

Private Function handleSr1Data() As Worksheet
    Dim i As Long, j As Long, k As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim rgeClass As Range, RgeVarKind As Range
    Dim RgeSmpName As Range, RgeCateName As Range
    Dim RgeYskData As Range, RgeYskName As Range
    Dim RgeTimeLag As Range
    Dim tmpSht As Worksheet
    Dim sr1obj As Variant, sr1var As Variant, sr1cate As Variant, sr1varkind As Variant, varkind() As Long
    Dim sr1VarSel As Variant
    Dim varTimeLag As Variant
    Dim cateNameRow As Long, varKindRow As Long, classRow As Long
    Dim CateNum As Long, smpNum As Long, itemNum As Long, objSmpNum As Long
    Dim tmpv As Long, totalCateNum As Long
    Dim msgStr As String
    Dim bgnCelCateNm As Range
    Dim nYear As Long, nMonth As Long
    Dim strTime As String
    
    On Error Resume Next
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    Set RgeVarKind = Range(sr1tbl.RgeVarKind)
    
    '2012.10.22 added
    itemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    
    If RgeVarKind Is Nothing Then
        Set tmpSht = SbkThis.Sheets("TmpSheet")
        tmpSht.Cells.ClearContents
        Set rge = tmpSht.Range("B1")
        For i = 1 To itemNum
            rge(1, i) = 0
        Next i
        Set RgeVarKind = rge.Resize(1, itemNum)
    End If
    'end add
    
    If sr1tbl.bNum2Class = 1 Then
        Set rgeClass = Range(sr1tbl.rgeClass)
    End If
    If sr1tbl.bCateName = 1 Then
        Set RgeCateName = Range(sr1tbl.RgeCateName)
    End If
    If sr1tbl.bYsk = 1 Then
        Set RgeYskData = Range(sr1tbl.RgeYskData)
        Set RgeYskName = Range(sr1tbl.RgeYskName)
    End If
    If sr1Extra.bTimeLag = 1 Then
        Set RgeTimeLag = Range(sr1Extra.RgeTimeLag)
    End If
    If sr1tbl.bSmpName = 1 Then
        Set RgeSmpName = Range(sr1tbl.RgeSmpName)
    End If
    cateNameRow = RgeObj.Rows.Count
    If cateNameRow < RgeVar.Rows.Count Then
        cateNameRow = RgeVar.Rows.Count
    End If
    If cateNameRow < RgeSmpName.Rows.Count Then
        cateNameRow = RgeSmpName.Rows.Count
    End If
    cateNameRow = cateNameRow + 6
    sr1obj = RgeObj.Value
    sr1var = RgeVar.Value
    sr1varkind = RgeVarKind.Value
    CateNum = Application.WorksheetFunction.max(sr1varkind)
    If CateNum = 0 Then CateNum = 1
    classRow = cateNameRow + CateNum + 2
    
    itemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    
    ReDim varkind(1 To 1, 1 To itemNum)
    If itemNum = 1 Then
        varkind(1, 1) = sr1varkind
    Else
        For i = 1 To itemNum
            varkind(1, i) = sr1varkind(1, i)
        Next i
    End If
    
    If smpNum <> RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If itemNum > X_MAX Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If sr1Extra.bTimeLag = 1 Then
        If RgeTimeLag Is Nothing Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        If RgeTimeLag.Columns.Count <> itemNum Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        varTimeLag = RgeTimeLag.Value
        For i = 1 To itemNum
            If varkind(1, i) = 0 Then
                j = val(varTimeLag(1, i))
                If Abs(j) >= smpNum Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = j
                End If
            Else
                If Not IsEmpty(RgeTimeLag(1, i)) Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = 0
                End If
            End If
        Next i
    End If
    
    #If 0 Then
    If sr1Extra.nTimeStyle <> 4 Then
        If sr1Extra.nYear < 1900 Or sr1Extra.nYear > 3000 Then
            MsgBox "Invalid year!"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        If sr1Extra.nTimeStyle <> 3 Then
            If sr1Extra.nMonth < 1 Or sr1Extra.nMonth > 12 Then
                MsgBox "Invalid month!"
                Set handleSr1Data = Nothing
                Exit Function
            End If
        End If
    End If
    #End If
    
    Set rge = RgeVar(2, 1).Resize(smpNum - 1, itemNum)
    For i = 1 To itemNum
        If varkind(1, i) > 0 Then
            If Application.WorksheetFunction.max(rge.Columns(i)) <> varkind(1, i) Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                Set handleSr1Data = Nothing
                Exit Function
            End If
            If sr1tbl.bExcept_n0 = 0 Then
                If CountUniqueValues(rge.Columns(i)) <> varkind(1, i) Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||fffd|0|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
            End If
        End If
    Next i
    
    msgStr = ""
    If RgeObj Is Nothing Then
        msgStr = "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVar Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVarKind Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bNum2Class = 1 And rgeClass Is Nothing) Then
        msgStr = "|fffd||293|I|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bCateName = 1 And RgeCateName Is Nothing) Then
        msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bSmpName = 1 And RgeSmpName Is Nothing) Then
        msgStr = "|fffd||5368e||496||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    'ElseIf CateNum < 2 Then
    '    msgStr = "|fffd||fffd||fffd||343|f|fffd|[|fffd|^|fffd||355|s|fffd||fffd|"
    ElseIf RgeVar.Columns.Count <> RgeVarKind.Columns.Count Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf Not RgeCateName Is Nothing Then
        If (CateNum <> RgeCateName.Rows.Count Or RgeVar.Columns.Count <> RgeCateName.Columns.Count) Then
            msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        End If
    ElseIf sr1tbl.bYsk = 1 And RgeYskData Is Nothing Then
        msgStr = "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If

    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If m_varselect <> "0" Then
        sr1VarSel = Split(m_varselect, ",")
    Else
        ReDim sr1VarSel(0 To RgeVar.Columns.Count) As Long
        sr1VarSel(0) = RgeVar.Columns.Count
        For i = 1 To RgeVar.Columns.Count
            sr1VarSel(i) = i - 1
        Next i
    End If
    
    itemNum = sr1VarSel(0)
    
    totalCateNum = 0
    If sr1tbl.bNum2Class = 1 Then
        If rgeClass.Rows.Count > 31 Then
            MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
            Set handleSr1Data = Nothing
            Exit Function
        Else
            For i = 1 To itemNum
                tmpv = rgeClass(1, sr1VarSel(i) + 1)
                totalCateNum = totalCateNum + tmpv
                If tmpv > 30 Then
                    MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
                'If varkind(1, sr1VarSel(i) + 1) = 0 And tmpv < 1 Then
                '    MsgBox "|fffd||fffd||fffd||28d||fffd||fffd||682||315||fffd||fffd||789||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                '    Set handleSr1Data = Nothing
                '    Exit Function
                'End If
                If tmpv > CateNum Then CateNum = tmpv
            Next i
        End If
    End If
    
    For i = 1 To itemNum
        tmpv = varkind(1, sr1VarSel(i) + 1)
        If tmpv < 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        totalCateNum = totalCateNum + tmpv
    Next i
    
    If totalCateNum > CATE_MAX Then
        MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: |fffd||fffd||fffd|vMAX" & CATE_MAX
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If sr1tbl.bExcept = 0 Then
        Set rge = RgeVar.Offset(1, 0).Resize(smpNum, itemNum)
        For i = 1 To itemNum
            k = sr1VarSel(i) + 1
            sr1var = rge.Columns(k).Value
            If WorksheetFunction.Count(sr1var) <> smpNum - 1 Then
                Set handleSr1Data = Nothing
                Exit Function
            End If
        Next i
    End If
    
    If sr1tbl.bYsk = 1 Then '12.8.27 LSQ mdf
        Dim tmpi As Long
        tmpi = RgeYskData.Rows.Count
        
        cateNameRow = cateNameRow + tmpi
        smpNum = smpNum + tmpi
        classRow = classRow + tmpi
    End If
    
    Set tmpSht = SbkThis.Sheets("Sr1Data") 'RgeVar.Worksheet.Parent.Sheets.Add
    tmpSht.Cells.ClearContents
    Set rge = tmpSht.Range("$B$1")
    
    #If 0 Then
    nYear = sr1Extra.nYear
    nMonth = sr1Extra.nMonth
    
    For i = 1 To smpNum 'cateNameRow - 6 - 1
        If sr1Extra.nTimeStyle = 4 Then
            rge(i + 1, 1) = i
        ElseIf sr1Extra.nTimeStyle = 3 Then
            rge(i + 1, 1) = nYear + i - 1
        Else
            If i = 1 Then
                rge(i + 1, 1) = nYear & " " & nMonth
            Else
                If next_Year_Month(sr1Extra.nTimeStyle, nYear, nMonth) Then
                    rge(i + 1, 1) = nYear & " " & nMonth
                Else
                    rge(i + 1, 1) = nMonth
                End If
            End If
        End If
    Next i
    #Else
    If Not RgeSmpName Is Nothing Then
        RgeSmpName.Copy
        rge(2, 1).PasteSpecial xlValues
    Else
        For i = 1 To cateNameRow - 6 - 1
            rge(i + 1, 1) = i
        Next i
    End If
    #End If
    
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To itemNum
            k = sr1VarSel(j) + 1
            If i > 1 And sr1Extra.bTimeLag = 1 Then
                If varTimeLag(1, k) >= 0 Then
                    If i - 1 <= varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                Else
                    If i - 1 > smpNum + varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                End If
            Else
                rge(i, j + 2) = RgeVar(i, k)
            End If
        Next j
    Next i
    tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)) = sr1obj
    
    If sr1tbl.bYsk = 1 Then
        'For i = 1 To RgeYskData.Rows.Count
        '    For j = 1 To ItemNum
        '        rge(RgeObj.Rows.Count + i, j + 2) = RgeYskData(i, sr1VarSel(j) + 1)
        '    Next j
        'Next i
        If Not RgeYskName Is Nothing Then
            RgeYskName.Copy
            rge(RgeObj.Rows.Count + 1, 1).PasteSpecial xlValues
        Else
            For i = 1 To RgeYskData.Rows.Count
                rge(RgeObj.Rows.Count + i, 1) = i + smpNum
            Next i
        End If
        For i = 1 To RgeYskData.Rows.Count
            For j = 1 To itemNum
                rge(RgeObj.Rows.Count + i, j + 2) = RgeYskData(i, sr1VarSel(j) + 1)
            Next j
        Next i
    End If
    
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, itemNum + 2)).Address & vbNullChar
        
    If Not RgeCateName Is Nothing Then
        CateNum = RgeCateName.Rows.Count
        sr1cate = RgeCateName.Value
        For i = 1 To itemNum
            For j = 1 To CateNum
                If Trim(sr1cate(j, sr1VarSel(i) + 1)) = "" Then
                    rge(cateNameRow + j - 1, i) = "C-" & j
                Else
                    rge(cateNameRow + j - 1, i) = sr1cate(j, sr1VarSel(i) + 1)
                End If
            Next j
        Next i
    Else
        For i = 1 To itemNum
            For j = 1 To CateNum
                rge(cateNameRow + j - 1, i) = "C-" & j
            Next j
        Next i
    End If
    sr1tbl.bCateName = 1
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(RgeSmpName.Rows.Count + 1, 1)).Address & vbNullChar
    
    Set rge = tmpSht.Range(sr1tbl.RgeVar)
    smpNum = rge.Rows.Count
    objSmpNum = RgeObj.Rows.Count
    For i = rge.Rows.Count To 2 Step -1
        sr1var = rge.Rows(i).Value
        If Application.WorksheetFunction.Count(sr1var) <> rge.Columns.Count Or (i <= objSmpNum And Application.WorksheetFunction.Count(RgeObj(i, 1)) <> 1) Then
            If sr1tbl.bExcept = 1 Then
                tmpSht.Rows(i).Delete
                smpNum = smpNum - 1
                cateNameRow = cateNameRow - 1
                objSmpNum = objSmpNum - 1
            Else
                Set handleSr1Data = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = tmpSht.Range("$B$1")
    
    'sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(objSmpNum, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, itemNum + 2)).Address & vbNullChar
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Address & vbNullChar
    
    tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Copy SbkThis.Sheets("Sr1Data").Range("A2")
    For i = 1 To smpNum
        rge(i + 1, 1) = i
    Next i
    
    'Category Name Copy (Category Name for numeric item may be adjusted, if it is categorized)
    Set bgnCelCateNm = SbkThis.Sheets("Sr1Info").Range("B50")
    tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Copy bgnCelCateNm
    
    Call makeCateName_forNumItem(itemNum, rgeClass, RgeVarKind, bgnCelCateNm)  '11.8.21 LSQ
    
    'Item Type
    For i = 1 To itemNum
        rge(i + 1, itemNum + 4) = varkind(1, sr1VarSel(i) + 1)
    Next i
    
    sr1tbl.RgeVarKind = rge(2, itemNum + 4).Resize(itemNum, 1).Address & vbNullChar
    
    'numeric item categorized (|fffd|K|fffd||fffd||fffd|l)
    If Not rgeClass Is Nothing Then
        For i = 1 To itemNum
            rgeClass.Columns(sr1VarSel(i) + 1).Copy rge(classRow, i)
            rge(classRow, i) = CLng(rgeClass.Columns(sr1VarSel(i) + 1).Cells(1, 1))
        Next i
        sr1tbl.rgeClass = rge(classRow, 1).Resize(rgeClass.Rows.Count, itemNum).Address & vbNullChar
    End If
    
    Set handleSr1Data = tmpSht
    On Error GoTo 0
End Function

Private Function checkSr1Data() As Boolean
    Dim RgeObj As Range, RgeVar As Range
    
    On Error Resume Next
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    If RgeObj.Rows.Count > RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        checkSr1Data = False
        Exit Function
    End If
    checkSr1Data = True
End Function

Private Sub SaveBasicInfo(ByVal revisedCateNum As Variant, ByVal NewCates As Variant)
    Dim i As Long, j As Long
    Dim rge As Range, RgeObj As Range, RgeVar As Range, rgeKind As Range
    Set rge = SbkThis.Worksheets("Sr1Info").Range("A1")
    Set RgeObj = Range(toXlA1str(sr1tbl.RgeObj))
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    Set rgeKind = Range(toXlA1str(sr1tbl.RgeVarKind))
    rge.Offset(0, 1) = RgeObj(1, 1)
    rge.Offset(0, 2) = 1
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(7, i) = RgeVar(1, i)
        rge.Offset(8, i + 40) = rgeKind(i, 1)
        rge.Offset(9, i + 40) = NewCates(i)
    Next i
    Set rge = SbkThis.Worksheets("Sr1Data").Range("A1")
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(i, RgeVar.Columns.Count + 4) = revisedCateNum(i)
    Next i
End Sub

Sub IS_MTHR_SR1EX()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet, outSht As Worksheet, outShtMid As Worksheet
    Dim RgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    Dim edtObj As EditBox
    Dim bOutMid As Boolean, strBkName As String, bkName As String
    Dim actSht As Worksheet
    Dim nid As Long
    
    'for Debug use (11.8.19 LSQ add)
#If 0 Then
    Call SbkInit
#End If

    On Error Resume Next
    
    Set actSht = ActiveSheet

    ReDim VbaGrp(0)
    
    m_varselect = getDefaultVarSelect(FUNC_NO.FUNC_EXSR1)
    If bRangeChanged_Frm(FUNC_NO.FUNC_EXSR1, frmExtSr1.RgeVar.Text) Then m_varselect = "0"
redisp:
    m_bvarselected = False
    
    frmExtSr1.bvarselected = m_bvarselected
    frmExtSr1.VarSelect = m_varselect
    frmExtSr1.Show
    If Not frmExtSr1.bOK Then Exit Sub
    
    m_bvarselected = frmExtSr1.bvarselected
    m_varselect = frmExtSr1.VarSelect
    
    Call setDefaultAddress(FUNC_NO.FUNC_EXSR1, getCurrentAddress_Frm(frmExtSr1.RgeVar.Text))
    Call setDefaultVarSelect(FUNC_NO.FUNC_EXSR1, m_varselect)
    
    sr1tbl.RgeObj = Trim(frmExtSr1.RgeObj.Text) & vbNullChar
    sr1tbl.RgeVar = Trim(frmExtSr1.RgeVar.Text) & vbNullChar
    sr1tbl.RgeVarKind = Trim(frmExtSr1.RgeVarKind.Text) & vbNullChar
    sr1tbl.bExcept = IIf(frmExtSr1.optExcept.Value = True, 1, 0)
    sr1tbl.nVarSelMethod = IIf(frmExtSr1.optVarNone.Value = True, 1, 2)
    sr1tbl.bSmpName = IIf(frmExtSr1.optSmpNo.Value = True, 0, 1)
    sr1tbl.bYsk = IIf(frmExtSr1.chkYsk.Value = True, 1, 0)
    If sr1tbl.bYsk = 1 Then
        sr1tbl.RgeYskData = Trim(frmExtSr1.RgeYskData) & vbNullChar
        sr1tbl.RgeYskName = Trim(frmExtSr1.RgeYskName) & vbNullChar
    End If
    sr1tbl.bExtraInfo = IIf(frmExtSr1.optExtraInfoYes.Value = True, 1, 0)
    sr1tbl.bNum2Class = IIf(frmExtSr1.chkNum2Cate.Value = True, 1, 0)
    If sr1tbl.bNum2Class = 1 Then
        sr1tbl.rgeClass = Trim(frmExtSr1.RgeNumCate.Text) & vbNullChar
    End If
    If sr1tbl.bSmpName = 1 Then
        sr1tbl.RgeSmpName = Trim(frmExtSr1.RgeSmpName.Text) & vbNullChar
    End If
    sr1tbl.bCateName = IIf(frmExtSr1.chkCateName.Value = True, 1, 0)
    If sr1tbl.bCateName = 1 Then
        sr1tbl.RgeCateName = Trim(frmExtSr1.RgeCateName.Text) & vbNullChar
    End If
    sr1tbl.bPointGrp = 1 'IIf(frmBasicInfo.chkOutGrp.Value = True, 1, 0)
    sr1tbl.bExcept_n0 = IIf(frmExtSr1.optExcept_n0.Value = True, 1, 0)
    sr1Extra.bTimeLag = IIf(frmExtSr1.chkTimeLag.Value = True, 1, 0)
    If sr1Extra.bTimeLag = 1 Then
        sr1Extra.RgeTimeLag = Trim(frmExtSr1.RgeTimeLag.Text) & vbNullChar
    End If
    'sr1Extra.nTimeStyle = IIf(frmExtSr1.optMonth.Value = True, 1, _
    '                    IIf(frmExtSr1.optQuarter.Value = True, 2, _
    '                    IIf(frmExtSr1.optYear.Value = True, 3, 4)))
    'sr1Extra.nYear = val(frmExtSr1.txtYear.Text)
    'sr1Extra.nMonth = val(frmExtSr1.txtMonth.Text)
    
    Set tmpSht = handleSr1Data
    
    If tmpSht Is Nothing Then
        GoTo redisp
    End If
    
    #If 0 Then
    'output sheet
    strBkName = "[" & ActiveWorkbook.name & "]"
    '
    
    Set outSht = ActiveWorkbook.Worksheets.Add
    sr1tbl.OutSheet = strBkName & outSht.name & "!R50C1"
    #End If
    
    'data sheet
    tmpSht.Activate
    
    Dim revisedCateNum() As Long, NewCates() As String
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    ReDim revisedCateNum(1 To RgeVar.Columns.Count + 1)
    ReDim NewCates(1 To RgeVar.Columns.Count + 1)
    Call Remove0Cate(sr1tbl.RgeVarKind, sr1tbl.RgeVar, sr1tbl.RgeCateName, sr1tbl.bExcept_n0 = 0, revisedCateNum, NewCates)
    
    If Not checkSr1Data Then
        GoTo redisp
    End If
    
    SaveBasicInfo revisedCateNum, NewCates
    
    bkName = "[" & SbkThis.name & "]"
    sr1tbl.RgeInfo = bkName & "Sr1Info!R1C1" & vbNullChar
    sr1tbl.OutSheet = bkName & "Sr1Result!R1C1" & vbNullChar
    sr1tbl.RgeObj = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeObj) & vbNullChar
    sr1tbl.RgeVar = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVar) & vbNullChar
    sr1tbl.RgeSmpName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeSmpName) & vbNullChar
    sr1tbl.RgeCateName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeCateName) & vbNullChar
    sr1tbl.RgeVarKind = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVarKind) & vbNullChar
    sr1tbl.rgeClass = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.rgeClass) & vbNullChar
    sr1tbl.OutSheet = Trim(sr1tbl.OutSheet) & vbNullChar
    
    sr1tbl.nFuncNo = FUNC_NO.FUNC_EXSR1
    
    SbkThis.Sheets("Sr1Result").Cells.Clear    'save calc results from DLL
    
    nid = IIf(isTrialVer, 0, 1)
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = sr1_dlg(nid, sr1tbl)  'do calc
    actSht.Activate
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        Exit Sub
    End If
    
    If rtn = 0 Then 'do output
        Sr1_Output FUNC_NO.FUNC_EXSR1, actSht.Parent.Sheets.Add, sr1tbl.bPointGrp, True, True
    End If
    On Error GoTo 0
End Sub

Public Sub Sr1DrawDotPlot(ByVal strRgeClass As String, ByVal strRgeData As String, _
                                    ByVal strRgeOut As String, ByVal crossAt As Double)
    Application.Run GxlaBkGraph1 & "!DrawDotPlot_A", toXlA1str(strRgeClass), toXlA1str(strRgeData), _
                                            toXlA1str(strRgeOut), crossAt
End Sub
                          
'=== EOF ===



Attribute VB_Name = "MdlExtSr2"
'=======================================================
' SR2 for iSTAT_MTHR Ver1.0
'
' 2011.8 WZH LSQ
'=======================================================

Option Private Module
Option Explicit

Type Srk2Para
    RgeInfo As String * 256
    OutSheet As String * 256
    RgeObj As String * 256
    RgeVar As String * 256
    RgeVarKind As String * 256
    rgeClass As String * 256
    RgeSmpName As String * 256
    RgeCateName As String * 256
    RgeYskData As String * 256          'only used for proceeding data
    RgeYskName As String * 256          'only used for proceeding data
    grpnum As Long
    bExcept As Long
    bExcept_n0 As Long
    bYsk As Long                        'only used for proceeding data
    bExtraInfo As Long
    nVarSelMethod As Long
    bSmpName As Long
    bNum2Class As Long
    bCateName As Long
    bPointGrp As Long
    nXAxis As Long
    nYAxis As Long
    bCateNameDisp As Long
    bSmpNameDisp As Long
    method As Long
    nPanDist As Long
End Type

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private m_bvarselected As Boolean
Private sr2tbl As Srk2Para

#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function sr2_dlg Lib "MTHR_A_ISTA_64.dll" (ByVal nid As Long, sr2tbl As Srk2Para) As Integer
    #Else
        Private Declare Function sr2_dlg Lib "MTHR_A_ISTA_64.dll" (ByVal nid As Long, sr2tbl As Srk2Para) As Integer
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function sr2_dlg Lib "MTHR_A_ISTA.dll" (ByVal nid As Long, sr2tbl As Srk2Para) As Integer
    #Else
        Private Declare Function sr2_dlg Lib "MTHR_A_ISTA.dll" (ByVal nid As Long, sr2tbl As Srk2Para) As Integer
    #End If
#End If

#If 0 Then '11.8.19 LSQ : not used ---------------------------

Function ReallocGrp(ByVal n As Long) As Long
    ReDim VbaGrp(1 To n)
    Call InitGrpAry(VbaGrp)
    ReallocGrp = 0
End Function

Private Sub Sr2GetVarSel()
    Dim i As Integer
    Dim dlg As DialogSheet
    Dim rtn As Integer
    Dim RgeVar As Range
    Dim valvar As Variant
    Dim savLabelA As String, savLabelB As String
    
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgSrk2")
    Set RgeVar = Range(dlg.EditBoxes("RgeVar").Text)
    valvar = RgeVar.Value
    If Err.Number <> 0 Then
        Err.Clear
        m_varselect = "0"
        On Error GoTo 0
        Exit Sub
    End If
    For i = 1 To RgeVar.Columns.Count
        m_varselect = m_varselect & "," & valvar(1, i)
    Next i
    'save
    savLabelA = frmVarSel.Label1.Caption
    savLabelB = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = "|fffd|I|fffd||fffd||fffd||142||fffd||fffd||fffd|A|fffd|C|fffd|e|fffd||fffd|"
    frmVarSel.Label2.Caption = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd|"
    m_varselect = VarSelect(Mid(m_varselect, 2))
    'recovery
    frmVarSel.Label1.Caption = savLabelA
    frmVarSel.Label2.Caption = savLabelB
    On Error GoTo 0
End Sub

#End If '11.8.19 LSQ : not used ---------------------------

Private Function CountUniqueValues(InputRange As Range) As Long
    Dim cl As Range, UniqueValues As New Collection
    Dim rowNum As Long, colNum As Long
    Dim i As Long, j As Long
    Dim vdata As Variant
    On Error Resume Next
    rowNum = InputRange.Rows.Count
    colNum = InputRange.Columns.Count
    vdata = InputRange.Value
    For i = 1 To rowNum
        For j = 1 To colNum
            UniqueValues.Add vdata(i, j), CStr(vdata(i, j))
        Next j
    Next i
    On Error GoTo 0
    CountUniqueValues = UniqueValues.Count
End Function

'RgeX : |fffd|K|fffd||fffd||fffd|l|fffd|w|fffd||fffd||348||fffd| (formatted)
'RgeCateNum : Item category number (0=numeric item)
'outBgn : category name output begin cell
'
'11.8.21 LSQ
Private Sub makeCateName_forNumItem(ByVal itemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or itemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 1 To itemNum
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            
            outBgn(1, i) = "|fffd|`" & x1
            For j = 2 To cateN
                outBgn(j, i) = x1 & "|fffd|`" & x2
                'next
                x1 = RgeX(j + 1, i)
                x2 = RgeX(j + 2, i)
            Next j
        End If
nextItem:
    Next i
End Sub

'11.8.21 LSQ mdf
Private Function handleSr2Data() As Worksheet
    Dim i As Long, j As Long, ctDel As Long, yNum As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim rgeClass As Range, RgeVarKind As Range
    Dim RgeSmpName As Range, RgeCateName As Range
    Dim RgeYskData As Range, RgeYskName As Range
    Dim tmpSht As Worksheet
    Dim sr2obj As Variant, sr2var As Variant, sr2cate As Variant, varkind As Variant
    Dim sr2VarSel As Variant
    Dim cateNameRow As Long, varKindRow As Long, classRow As Long
    Dim CateNum As Long, smpNum As Long, itemNum As Long, grpnum As Long
    Dim tmpv As Long, totalCateNum As Long
    Dim msgStr As String
    Dim bgnCelCateNm As Range, tmpi As Long
    
    On Error Resume Next
    Set RgeObj = Range(sr2tbl.RgeObj)
    Set RgeVar = Range(sr2tbl.RgeVar)
    Set RgeVarKind = Range(sr2tbl.RgeVarKind)
    
    '2012.10.22 added
    itemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    
    If RgeVarKind Is Nothing Then
        Set tmpSht = SbkThis.Sheets("TmpSheet")
        tmpSht.Cells.ClearContents
        Set rge = tmpSht.Range("B1")
        For i = 1 To itemNum
            rge(1, i) = 0
        Next i
        Set RgeVarKind = rge.Resize(1, itemNum)
    End If
    'end add
    
    If sr2tbl.bNum2Class = 1 Then
        Set rgeClass = Range(sr2tbl.rgeClass)
    End If
    If sr2tbl.bCateName = 1 Then
        Set RgeCateName = Range(sr2tbl.RgeCateName)
    End If
    If sr2tbl.bSmpName = 1 Then
        Set RgeSmpName = Range(sr2tbl.RgeSmpName)
    End If
    If sr2tbl.bYsk = 1 Then
        Set RgeYskData = Range(sr2tbl.RgeYskData)
        Set RgeYskName = Range(sr2tbl.RgeYskName)
    End If
    cateNameRow = RgeObj.Rows.Count
    If cateNameRow < RgeVar.Rows.Count Then
        cateNameRow = RgeVar.Rows.Count
    End If
    If cateNameRow < RgeSmpName.Rows.Count Then
        cateNameRow = RgeSmpName.Rows.Count
    End If
    cateNameRow = cateNameRow + 6
    sr2obj = RgeObj.Value
    sr2var = RgeVar.Value
    varkind = RgeVarKind.Value
    CateNum = Application.WorksheetFunction.max(varkind)
    If CateNum = 0 Then CateNum = 1
    classRow = cateNameRow + CateNum + 2
    
    itemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    If smpNum <> RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr2Data = Nothing
        Exit Function
    End If
    
    Set rge = RgeObj(2, 1).Resize(smpNum - 1, 1)
    grpnum = CountUniqueValues(rge)
    If Application.WorksheetFunction.max(rge) <> grpnum Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr2Data = Nothing
        Exit Function
    End If
    
    Set rge = RgeVar(2, 1).Resize(smpNum, itemNum)
    For i = 1 To itemNum
        If varkind(1, i) > 0 Then
            If Application.WorksheetFunction.max(rge.Columns(i)) <> varkind(1, i) Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                Set handleSr2Data = Nothing
                Exit Function
            End If
            If sr2tbl.bExcept_n0 = 0 Then
                If CountUniqueValues(rge.Columns(i)) <> varkind(1, i) Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||fffd|0|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
                    Set handleSr2Data = Nothing
                    Exit Function
                End If
            End If
        End If
    Next i
    
    msgStr = ""
    If RgeObj Is Nothing Then
        msgStr = "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVar Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVarKind Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr2tbl.bNum2Class = 1 And rgeClass Is Nothing) Then
        msgStr = "|fffd||293|I|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr2tbl.bCateName = 1 And RgeCateName Is Nothing) Then
        msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr2tbl.bSmpName = 2 And RgeSmpName Is Nothing) Then
        msgStr = "|fffd||5368e||496||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    'ElseIf CateNum < 2 Then
    '    msgStr = "|fffd||fffd||fffd||343|f|fffd|[|fffd|^|fffd||355|s|fffd||fffd|"
    ElseIf RgeVar.Columns.Count <> RgeVarKind.Columns.Count Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf Not RgeCateName Is Nothing Then
        If (CateNum <> RgeCateName.Rows.Count Or RgeVar.Columns.Count <> RgeCateName.Columns.Count) Then
            msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        End If
    ElseIf sr2tbl.bYsk = 1 And RgeYskData Is Nothing Then
        msgStr = "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If

    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set handleSr2Data = Nothing
        Exit Function
    End If
    
    If m_varselect <> "0" Then
        sr2VarSel = Split(m_varselect, ",")
    Else
        ReDim sr2VarSel(0 To RgeVar.Columns.Count) As Long
        sr2VarSel(0) = RgeVar.Columns.Count
        For i = 1 To RgeVar.Columns.Count
            sr2VarSel(i) = i - 1
        Next i
    End If
    
    itemNum = sr2VarSel(0)
    
    totalCateNum = 0
    If sr2tbl.bNum2Class = 1 Then
        If rgeClass.Rows.Count > 31 Then
            MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
            Set handleSr2Data = Nothing
            Exit Function
        Else
            For i = 1 To itemNum
                tmpv = rgeClass(1, sr2VarSel(i) + 1)
                totalCateNum = totalCateNum + tmpv
                If tmpv > 30 Then
                    MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
                    Set handleSr2Data = Nothing
                    Exit Function
                End If
                If varkind(1, sr2VarSel(i) + 1) = 0 And tmpv < 1 Then
                    MsgBox "|fffd||fffd||fffd||28d||fffd||fffd||682||315||fffd||fffd||789||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr2Data = Nothing
                    Exit Function
                End If
                If tmpv > CateNum Then CateNum = tmpv
            Next i
        End If
    End If
    
    For i = 1 To itemNum
        tmpv = varkind(1, sr2VarSel(i) + 1)
        If tmpv < 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr2Data = Nothing
            Exit Function
        End If
        totalCateNum = totalCateNum + tmpv
    Next i
    
    If totalCateNum > 200 Then
        MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: |fffd||fffd||fffd|vMAX200"
        Set handleSr2Data = Nothing
        Exit Function
    End If
    
    If sr2tbl.bYsk = 1 Then '12.8.27 LSQ mdf
        tmpi = RgeYskData.Rows.Count
        
        cateNameRow = cateNameRow + tmpi
        smpNum = smpNum + tmpi
        classRow = classRow + tmpi
    End If
    
    Set tmpSht = SbkThis.Sheets("Sr2Data") 'RgeVar.Worksheet.Parent.Sheets.Add
    tmpSht.Cells.ClearContents
    Set rge = tmpSht.Range("$B$1")
    If Not RgeSmpName Is Nothing Then
        RgeSmpName.Copy
        rge(2, 1).PasteSpecial xlValues
    Else
        For i = 1 To cateNameRow - 6 - 1
            rge(i + 1, 1) = i
        Next i
    End If
    
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To itemNum
            rge(i, j + 2) = RgeVar(i, sr2VarSel(j) + 1)
        Next j
    Next i
    tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)) = sr2obj
    
    If sr2tbl.bYsk = 1 Then
        If Not RgeYskName Is Nothing Then
            RgeYskName.Copy
            rge(RgeObj.Rows.Count + 1, 1).PasteSpecial xlValues
        Else
            For i = 1 To RgeYskData.Rows.Count
                rge(RgeObj.Rows.Count + i, 1) = i + smpNum
            Next i
        End If
        For i = 1 To RgeYskData.Rows.Count
            For j = 1 To itemNum
                rge(RgeObj.Rows.Count + i, j + 2) = RgeYskData(i, sr2VarSel(j) + 1)
            Next j
        Next i
    End If
    
    sr2tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr2tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, itemNum + 2)).Address & vbNullChar
        
    If Not RgeCateName Is Nothing Then
        CateNum = RgeCateName.Rows.Count
        sr2cate = RgeCateName.Value
        For i = 1 To itemNum
            For j = 1 To CateNum
                rge(cateNameRow + j - 1, i) = sr2cate(j, sr2VarSel(i) + 1)
            Next j
        Next i
    Else
        For i = 1 To itemNum
            For j = 1 To CateNum
                rge(cateNameRow + j - 1, i) = "C-" & j
            Next j
        Next i
    End If
    sr2tbl.bCateName = 1
    sr2tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Address & vbNullChar
    sr2tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(RgeSmpName.Rows.Count + 1, 1)).Address & vbNullChar
    
    Set rge = tmpSht.Range(sr2tbl.RgeVar)
    smpNum = rge.Rows.Count
    yNum = RgeObj.Rows.Count '15.9.24 LSQ
    ctDel = 0 '15.9.24 LSQ
    For i = rge.Rows.Count To 2 Step -1
        sr2var = rge.Rows(i).Value
        If Application.WorksheetFunction.Count(sr2var) <> rge.Columns.Count Then
            If sr2tbl.bExcept = 1 Then
                tmpSht.Rows(i).Delete
                'smpNum = smpNum - 1
                'cateNameRow = cateNameRow - 1
                ctDel = ctDel + 1 '15.9.24 LSQ add : count deleted sample
            Else
                Set handleSr2Data = Nothing
                Exit Function
            End If
        End If
    Next i
    
    If ctDel > 0 Then '15.9.24 LSQ add
        smpNum = smpNum - ctDel
        yNum = yNum - ctDel
        cateNameRow = cateNameRow - ctDel
            
        If smpNum < 1 Or yNum < 1 Or cateNameRow < 1 Then
            Set handleSr2Data = Nothing
            Exit Function
        End If
    End If
    
    Set rge = tmpSht.Range("$B$1")
    
    sr2tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(yNum, 2)).Address & vbNullChar
    sr2tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, itemNum + 2)).Address & vbNullChar
    sr2tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Address & vbNullChar
    sr2tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Address & vbNullChar
    
    tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Copy SbkThis.Sheets("Sr2Data").Range("A2")
    For i = 1 To smpNum
        rge(i + 1, 1) = i
    Next i
    
    'Category Name Copy (Category Name for numeric item may be adjusted, if it is categorized)
    Set bgnCelCateNm = SbkThis.Sheets("Sr2Info").Range("B50")
    tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Copy bgnCelCateNm
    
    Call makeCateName_forNumItem(itemNum, rgeClass, RgeVarKind, bgnCelCateNm)  '11.8.21 LSQ
    
    'Item Type
    For i = 1 To itemNum
        rge(i + 1, itemNum + 4) = varkind(1, sr2VarSel(i) + 1)
    Next i
    
    sr2tbl.RgeVarKind = rge(2, itemNum + 4).Resize(itemNum, 1).Address & vbNullChar
    
    'numeric item categorized (|fffd|K|fffd||fffd||fffd|l)
    If Not rgeClass Is Nothing Then
        For i = 1 To itemNum
            rgeClass.Columns(sr2VarSel(i) + 1).Copy rge(classRow, i)
        Next i
        sr2tbl.rgeClass = rge(classRow, 1).Resize(rgeClass.Rows.Count, itemNum).Address & vbNullChar
    End If
    
    sr2tbl.grpnum = grpnum
    
    Set handleSr2Data = tmpSht
    On Error GoTo 0
End Function

Private Function checkSr2Data() As Boolean
    Dim RgeObj As Range, RgeVar As Range
    
    On Error Resume Next
    Set RgeObj = Range(sr2tbl.RgeObj)
    Set RgeVar = Range(sr2tbl.RgeVar)
    If RgeObj.Rows.Count > RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        checkSr2Data = False
        Exit Function
    End If
    checkSr2Data = True
End Function

Private Sub SaveBasicInfo()
    Dim i As Long, j As Long
    Dim rge As Range, RgeObj As Range, RgeVar As Range
    Set rge = SbkThis.Worksheets("Sr2Info").Range("A1")
    Set RgeObj = Range(toXlA1str(sr2tbl.RgeObj))
    Set RgeVar = Range(toXlA1str(sr2tbl.RgeVar))
    rge.Offset(0, 1) = RgeObj(1, 1)
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(7, i) = RgeVar(1, i)
    Next i
End Sub

Sub IS_MTHR_SR2EX()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet, outSht As Worksheet, outShtMid As Worksheet
    Dim RgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    Dim edtObj As EditBox
    Dim bOutMid As Boolean, strBkName As String, bkName As String
    Dim actSht As Worksheet
    Dim nid As Long
    
    'for Debug use (11.8.19 LSQ add)
#If 0 Then
    Call SbkInit
#End If

    On Error Resume Next
    
    Set actSht = ActiveSheet

    ReDim VbaGrp(0)
    
    m_varselect = getDefaultVarSelect(FUNC_NO.FUNC_EXSR2)
    If bRangeChanged_Frm(FUNC_NO.FUNC_EXSR2, frmExtSr2.RgeVar.Text) Then m_varselect = "0"
redisp:
    m_bvarselected = False
    
    frmExtSr2.bvarselected = m_bvarselected
    frmExtSr2.VarSelect = m_varselect
    frmExtSr2.Show
    If Not frmExtSr2.bOK Then Exit Sub
    
    m_bvarselected = frmExtSr2.bvarselected
    m_varselect = frmExtSr2.VarSelect
    
    Call setDefaultAddress(FUNC_NO.FUNC_EXSR2, getCurrentAddress_Frm(frmExtSr2.RgeVar.Text))
    Call setDefaultVarSelect(FUNC_NO.FUNC_EXSR2, m_varselect)
    
    sr2tbl.RgeObj = Trim(frmExtSr2.RgeObj.Text) & vbNullChar
    sr2tbl.RgeVar = Trim(frmExtSr2.RgeVar.Text) & vbNullChar
    sr2tbl.RgeVarKind = Trim(frmExtSr2.RgeVarKind.Text) & vbNullChar
    sr2tbl.bExcept = IIf(frmExtSr2.optExcept.Value = True, 1, 0)
    sr2tbl.nVarSelMethod = IIf(frmExtSr2.optVarNone.Value = True, 1, 2)
    sr2tbl.bSmpName = IIf(frmExtSr2.optSmpNo.Value = True, 0, 1)
    sr2tbl.bYsk = IIf(frmExtSr2.chkYsk.Value = True, 1, 0)
    If sr2tbl.bYsk = 1 Then
        sr2tbl.RgeYskData = Trim(frmExtSr2.RgeYskData) & vbNullChar
        sr2tbl.RgeYskName = Trim(frmExtSr2.RgeYskName) & vbNullChar
    End If
    sr2tbl.bExtraInfo = IIf(frmExtSr2.optExtraInfoYes.Value = True, 1, 0)
    sr2tbl.bNum2Class = IIf(frmExtSr2.chkNum2Cate.Value = True, 1, 0)
    If sr2tbl.bNum2Class = 1 Then
        sr2tbl.rgeClass = Trim(frmExtSr2.RgeNumCate.Text) & vbNullChar
    End If
    If sr2tbl.bSmpName = 1 Then
        sr2tbl.RgeSmpName = Trim(frmExtSr2.RgeSmpName.Text) & vbNullChar
    End If
    sr2tbl.bCateName = IIf(frmExtSr2.chkCateName.Value = True, 1, 0)
    If sr2tbl.bCateName = 1 Then
        sr2tbl.RgeCateName = Trim(frmExtSr2.RgeCateName.Text) & vbNullChar
    End If
    sr2tbl.bPointGrp = IIf(frmExtSr2.chkOutGrp.Value = True, 1, 0)
    sr2tbl.bCateNameDisp = IIf(frmExtSr2.chkNameDisp.Value = True, 1, 0)
    sr2tbl.bSmpNameDisp = IIf(frmExtSr2.chkNameDispSmp.Value = True, 1, 0)
    sr2tbl.nXAxis = CLng(frmExtSr2.XAxes.Text)
    sr2tbl.nYAxis = CLng(frmExtSr2.YAxes.Text)
    sr2tbl.bExcept_n0 = IIf(frmExtSr2.optExcept_n0.Value = True, 1, 0)
    
    '2015.05.12 addded
    sr2tbl.nPanDist = IIf(frmExtSr2.optPanDist1.Value = True, 1, 2)
    'end add
    
    Set tmpSht = handleSr2Data
    
    If tmpSht Is Nothing Then
        GoTo redisp
    End If
    
    #If 0 Then
    'output sheet
    strBkName = "[" & ActiveWorkbook.name & "]"
    '
    
    Set outSht = ActiveWorkbook.Worksheets.Add
    sr2tbl.OutSheet = strBkName & outSht.name & "!R50C1"
    #End If
    
    'data sheet
    tmpSht.Activate
    
    Call Remove0Cate(sr2tbl.RgeVarKind, sr2tbl.RgeVar, sr2tbl.RgeCateName, sr2tbl.bExcept_n0 = 0)
    
    If Not checkSr2Data Then
        GoTo redisp
    End If
    
    SaveBasicInfo
    
    bkName = "[" & SbkThis.name & "]"
    sr2tbl.RgeInfo = bkName & "Sr2Info!R1C1" & vbNullChar
    sr2tbl.OutSheet = bkName & "Sr2Result!R1C1" & vbNullChar
    sr2tbl.RgeObj = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeObj) & vbNullChar
    sr2tbl.RgeVar = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeVar) & vbNullChar
    sr2tbl.RgeSmpName = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeSmpName) & vbNullChar
    sr2tbl.RgeCateName = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeCateName) & vbNullChar
    sr2tbl.RgeVarKind = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeVarKind) & vbNullChar
    sr2tbl.rgeClass = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.rgeClass) & vbNullChar
    sr2tbl.OutSheet = Trim(sr2tbl.OutSheet) & vbNullChar
    
    sr2tbl.method = FUNC_NO.FUNC_EXSR2
    
    SbkThis.Sheets("Sr2Result").Cells.Clear    'save calc results from DLL
    
    nid = IIf(isTrialVer, 0, 1)
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = sr2_dlg(nid, sr2tbl)  'do calc
    actSht.Activate
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        Exit Sub
    End If
    
    If rtn = 0 Then 'do output
        Sr2_Output FUNC_NO.FUNC_EXSR2, actSht.Parent.Sheets.Add, sr2tbl.bPointGrp, sr2tbl.nXAxis, sr2tbl.nYAxis, sr2tbl.bSmpNameDisp, sr2tbl.bCateNameDisp, , sr2tbl.nPanDist
    End If
    On Error GoTo 0
End Sub

Function IS_MTHR_SR2EX_Internal(ByVal funcno As FUNC_NO, sr2Tbl2 As Srk2Para, ByVal varsel As String) As Long
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet, outSht As Worksheet, outShtMid As Worksheet
    Dim RgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    Dim edtObj As EditBox
    Dim bOutMid As Boolean, strBkName As String, bkName As String
    Dim actSht As Worksheet
    Dim nid As Long
    
    Set actSht = ActiveSheet
    
    m_varselect = varsel
    sr2tbl.RgeObj = Trim(sr2Tbl2.RgeObj) & vbNullChar
    sr2tbl.RgeVar = Trim(sr2Tbl2.RgeVar) & vbNullChar
    sr2tbl.RgeVarKind = Trim(sr2Tbl2.RgeVarKind) & vbNullChar
    sr2tbl.bExcept = sr2Tbl2.bExcept
    sr2tbl.nVarSelMethod = sr2Tbl2.nVarSelMethod
    sr2tbl.bSmpName = sr2Tbl2.bSmpName
    sr2tbl.bYsk = sr2Tbl2.bYsk
    If sr2tbl.bYsk = 1 Then
        sr2tbl.RgeYskData = Trim(sr2Tbl2.RgeYskData) & vbNullChar
        sr2tbl.RgeYskName = Trim(sr2Tbl2.RgeYskName) & vbNullChar
    End If
    sr2tbl.bExtraInfo = sr2Tbl2.bExtraInfo
    sr2tbl.bNum2Class = sr2Tbl2.bNum2Class
    If sr2tbl.bNum2Class = 1 Then
        sr2tbl.rgeClass = Trim(sr2Tbl2.rgeClass) & vbNullChar
    End If
    If sr2tbl.bSmpName = 1 Then
        sr2tbl.RgeSmpName = Trim(sr2Tbl2.RgeSmpName) & vbNullChar
    End If
    sr2tbl.bCateName = sr2Tbl2.bCateName
    If sr2tbl.bCateName = 1 Then
        sr2tbl.RgeCateName = Trim(sr2Tbl2.RgeCateName) & vbNullChar
    End If
    sr2tbl.bPointGrp = sr2Tbl2.bPointGrp
    sr2tbl.bCateNameDisp = sr2Tbl2.bCateNameDisp
    sr2tbl.bSmpNameDisp = sr2Tbl2.bSmpNameDisp
    sr2tbl.nXAxis = sr2Tbl2.nXAxis
    sr2tbl.nYAxis = sr2Tbl2.nYAxis
    sr2tbl.bExcept_n0 = sr2Tbl2.bExcept_n0
    
    '2015.05.12 addded
    sr2tbl.nPanDist = sr2Tbl2.nPanDist
    'end add
    
    Set tmpSht = handleSr2Data
    
    If tmpSht Is Nothing Then
        Exit Function
    End If
    
    'data sheet
    tmpSht.Activate
    
    Call Remove0Cate(sr2tbl.RgeVarKind, sr2tbl.RgeVar, sr2tbl.RgeCateName, sr2tbl.bExcept_n0 = 0)
    
    If Not checkSr2Data Then
        Exit Function
    End If
    
    SaveBasicInfo
    
    bkName = "[" & SbkThis.name & "]"
    sr2tbl.RgeInfo = bkName & "Sr2Info!R1C1" & vbNullChar
    sr2tbl.OutSheet = bkName & "Sr2Result!R1C1" & vbNullChar
    sr2tbl.RgeObj = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeObj) & vbNullChar
    sr2tbl.RgeVar = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeVar) & vbNullChar
    sr2tbl.RgeSmpName = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeSmpName) & vbNullChar
    sr2tbl.RgeCateName = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeCateName) & vbNullChar
    sr2tbl.RgeVarKind = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeVarKind) & vbNullChar
    sr2tbl.rgeClass = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.rgeClass) & vbNullChar
    sr2tbl.OutSheet = Trim(sr2tbl.OutSheet) & vbNullChar
    
    sr2tbl.method = funcno
    
    SbkThis.Sheets("Sr2Result").Cells.Clear    'save calc results from DLL
    
    nid = IIf(isTrialVer, 0, 1)
    
    Call changeToSSDir
    'ActiveWorkbook.ActiveSheet.Select
    rtn = sr2_dlg(nid, sr2tbl)  'do calc
    actSht.Activate
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        Exit Function
    End If
    
    If rtn = 0 Then 'do output
        Sr2_Output funcno, actSht.Parent.Sheets.Add, sr2tbl.bPointGrp, sr2tbl.nXAxis, sr2tbl.nYAxis, sr2tbl.bSmpNameDisp, sr2tbl.bCateNameDisp, , sr2tbl.nPanDist
    End If
    On Error GoTo 0
    IS_MTHR_SR2EX_Internal = rtn
End Function

Public Sub Sr2DrawDotPlot(ByVal strRgeClass As String, ByVal strRgeData As String, _
                                    ByVal strRgeOut As String, ByVal crossAt As Double)
    Application.Run GxlaBkGraph & "!DrawDotPlot_A", toXlA1str(strRgeClass), toXlA1str(strRgeData), _
                                            toXlA1str(strRgeOut), crossAt
End Sub
                          
'=== EOF ===


Attribute VB_Name = "MdlMLRA"
'=======================================================
' SR1 for iSTAT_YSK Ver1.0
'
' 2011.11 WZH
'=======================================================

Option Private Module
Option Explicit

Private Type Srk1Para
    RgeInfo As String * 256
    OutSheet As String * 256
    RgeObj As String * 256
    RgeVar As String * 256
    RgeVarKind As String * 256
    rgeClass As String * 256
    RgeSmpName As String * 256
    RgeCateName As String * 256
    RgeYskData As String * 256          'only used for proceeding data
    RgeYskName As String * 256          'only used for proceeding data
    bExcept As Long
    bExcept_n0 As Long
    bYsk As Long                        'only used for proceeding data
    bExtraInfo As Long
    nVarSelMethod As Long
    bSmpName As Long
    bNum2Class As Long
    bCateName As Long
    bPointGrp As Long
    nFuncNo As Long
End Type

Private Type Srk1Para_Extra
    bTimeLag As Long
    RgeTimeLag As String * 256          'only used for procedding data
    nTimeStyle As Long
    nYear As Long
    nMonth As Long
End Type

Private Const X_MAX As Integer = 30
Private Const CATE_MAX As Integer = 200

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private m_bvarselected As Boolean
Private sr1tbl As Srk1Para
Private sr1Extra As Srk1Para_Extra

#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function sr1_dlg Lib "MTHR_A_ISTA_64.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #Else
        Private Declare Function sr1_dlg Lib "MTHR_A_ISTA_64.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function sr1_dlg Lib "MTHR_A_ISTA.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #Else
        Private Declare Function sr1_dlg Lib "MTHR_A_ISTA.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #End If
#End If

Private Function CountUniqueValues(InputRange As Range) As Long
    Dim cl As Range, UniqueValues As New Collection
    Dim rowNum As Long, colNum As Long
    Dim i As Long, j As Long
    Dim vdata As Variant
    On Error Resume Next
    rowNum = InputRange.Rows.Count
    colNum = InputRange.Columns.Count
    vdata = InputRange.Value
    For i = 1 To rowNum
        For j = 1 To colNum
            UniqueValues.Add vdata(i, j), CStr(vdata(i, j))
        Next j
    Next i
    On Error GoTo 0
    CountUniqueValues = UniqueValues.Count
End Function

'RgeX : |fffd|K|fffd||fffd||fffd|l|fffd|w|fffd||fffd||348||fffd| (formatted)
'RgeCateNum : Item category number (0=numeric item)
'outBgn : category name output begin cell
'
'11.8.21 LSQ
Private Sub nu_makeCateName_forNumItem(ByVal itemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or itemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 1 To itemNum
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            dxHalf = (x2 - x1) / 2
            
            outBgn(1, i) = "|fffd|`" & (x1 + dxHalf)
            For j = 2 To cateN - 1
                outBgn(j, i) = (x1 + dxHalf) & "|fffd|`" & (x2 + dxHalf)
                'next
                x1 = x1 + 2 * dxHalf
                x2 = x2 + 2 * dxHalf
            Next j
            outBgn(cateN, i) = (x2 - dxHalf) & "|fffd|`"
        End If
nextItem:
    Next i
        
End Sub

'2011.12.04 rewritten
Private Sub makeCateName_forNumItem(ByVal itemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, k As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    Dim sr1VarSel As Variant
    Dim nItemNum As Long
    
    If RgeX Is Nothing Or itemNum < 1 Then Exit Sub    'no number item categorized
    
    If m_varselect <> "0" Then
        sr1VarSel = Split(m_varselect, ",")
    Else
        ReDim sr1VarSel(0 To itemNum) As Long
        sr1VarSel(0) = itemNum
        For i = 1 To itemNum
            sr1VarSel(i) = i - 1
        Next i
    End If
    
    nItemNum = sr1VarSel(0)
    
    For i = 1 To nItemNum
        j = sr1VarSel(i) + 1
        cateN = RgeCateNum(1, j)
        If cateN = 0 Then
            cateN = RgeX(1, j)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, j)
            x2 = RgeX(3, j)
            
            outBgn(1, i) = "|fffd|`" & x1
            For k = 2 To cateN
                outBgn(k, i) = x1 & "|fffd|`" & x2
                'next
                x1 = RgeX(k + 1, j)
                x2 = RgeX(k + 2, j)
            Next k
        End If
nextItem:
    Next i
        
End Sub
'end rewritten

Private Function next_Year_Month(ByVal nTimeStyle As Long, ByRef year As Long, ByRef month As Long) As Boolean
    next_Year_Month = False
    If nTimeStyle = 1 Then
        month = month + 1
    ElseIf nTimeStyle = 2 Then
        month = month + 3
    ElseIf nTimeStyle = 3 Then
        month = month + 12
    ElseIf nTimeStyle = 4 Then
        month = month + 1
    End If
    If month > 12 And nTimeStyle < 4 Or nTimeStyle = 3 Then
        month = month - 12
        year = year + 1
        next_Year_Month = True
    End If
End Function

Private Function handleSr1Data() As Worksheet
    Dim i As Long, j As Long, k As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim rgeClass As Range, RgeVarKind As Range
    Dim RgeSmpName As Range, RgeCateName As Range
    Dim RgeYskData As Range, RgeYskName As Range
    Dim RgeTimeLag As Range
    Dim tmpSht As Worksheet
    Dim sr1obj As Variant, sr1var As Variant, sr1cate As Variant, sr1varkind As Variant, varkind() As Long
    Dim sr1VarSel As Variant
    Dim varTimeLag As Variant
    Dim cateNameRow As Long, varKindRow As Long, classRow As Long
    Dim CateNum As Long, smpNum As Long, itemNum As Long, objSmpNum As Long
    Dim tmpv As Long, totalCateNum As Long
    Dim msgStr As String
    Dim bgnCelCateNm As Range
    Dim nYear As Long, nMonth As Long
    Dim strTime As String
    
    On Error Resume Next
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    Set RgeVarKind = Range(sr1tbl.RgeVarKind)
    
    '2012.10.22 added
    itemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    objSmpNum = RgeObj.Rows.Count
    
    If RgeVarKind Is Nothing Then
        Set tmpSht = SbkThis.Sheets("TmpSheet")
        tmpSht.Cells.ClearContents
        Set rge = tmpSht.Range("B1")
        For i = 1 To itemNum
            rge(1, i) = 0
        Next i
        Set RgeVarKind = rge.Resize(1, itemNum)
    End If
    'end add
    
    If sr1tbl.bNum2Class = 1 Then
        Set rgeClass = Range(sr1tbl.rgeClass)
    End If
    If sr1tbl.bCateName = 1 Then
        Set RgeCateName = Range(sr1tbl.RgeCateName)
    End If
    If sr1tbl.bYsk = 1 Then
        Set RgeYskData = Range(sr1tbl.RgeYskData)
        Set RgeYskName = Range(sr1tbl.RgeYskName)
    End If
    If sr1Extra.bTimeLag = 1 Then
        Set RgeTimeLag = Range(sr1Extra.RgeTimeLag)
    End If
    If sr1tbl.bSmpName = 1 Then
        Set RgeSmpName = Range(sr1tbl.RgeSmpName)
    End If
    cateNameRow = RgeObj.Rows.Count
    If cateNameRow < RgeVar.Rows.Count Then
        cateNameRow = RgeVar.Rows.Count
    End If
    If cateNameRow < RgeSmpName.Rows.Count Then
        cateNameRow = RgeSmpName.Rows.Count
    End If
    cateNameRow = cateNameRow + 6
    sr1obj = RgeObj.Value
    sr1var = RgeVar.Value
    sr1varkind = RgeVarKind.Value
    CateNum = Application.WorksheetFunction.max(sr1varkind)
    If CateNum = 0 Then CateNum = 1
    classRow = cateNameRow + CateNum + 2
    
    itemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    
    ReDim varkind(1 To 1, 1 To itemNum)
    If itemNum = 1 Then
        varkind(1, 1) = sr1varkind
    Else
        For i = 1 To itemNum
            varkind(1, i) = sr1varkind(1, i)
        Next i
    End If
    
    If smpNum <> RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If itemNum > X_MAX Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If sr1Extra.bTimeLag = 1 Then
        If RgeTimeLag Is Nothing Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        If RgeTimeLag.Columns.Count <> itemNum Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        varTimeLag = RgeTimeLag.Value
        For i = 1 To itemNum
            If varkind(1, i) = 0 Then
                j = val(varTimeLag(1, i))
                If Abs(j) >= smpNum Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = j
                End If
            Else
                If Not IsEmpty(RgeTimeLag(1, i)) Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = 0
                End If
            End If
        Next i
    End If
    
    #If 0 Then
    If sr1Extra.nTimeStyle <> 4 Then
        If sr1Extra.nYear < 1900 Or sr1Extra.nYear > 3000 Then
            MsgBox "Invalid year!"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        If sr1Extra.nTimeStyle <> 3 Then
            If sr1Extra.nMonth < 1 Or sr1Extra.nMonth > 12 Then
                MsgBox "Invalid month!"
                Set handleSr1Data = Nothing
                Exit Function
            End If
        End If
    End If
    #End If
    
    Set rge = RgeVar(2, 1).Resize(smpNum, itemNum)
    For i = 1 To itemNum
        If varkind(1, i) > 0 Then
            If Application.WorksheetFunction.max(rge.Columns(i)) <> varkind(1, i) Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                Set handleSr1Data = Nothing
                Exit Function
            End If
            If sr1tbl.bExcept_n0 = 0 Then
                If CountUniqueValues(rge.Columns(i)) <> varkind(1, i) Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||fffd|0|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
            End If
        End If
    Next i
    
    msgStr = ""
    If RgeObj Is Nothing Then
        msgStr = "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVar Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVarKind Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bNum2Class = 1 And rgeClass Is Nothing) Then
        msgStr = "|fffd||293|I|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bCateName = 1 And RgeCateName Is Nothing) Then
        msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bSmpName = 1 And RgeSmpName Is Nothing) Then
        msgStr = "|fffd||5368e||496||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    'ElseIf CateNum < 2 Then
    '    msgStr = "|fffd||fffd||fffd||343|f|fffd|[|fffd|^|fffd||355|s|fffd||fffd|"
    ElseIf RgeVar.Columns.Count <> RgeVarKind.Columns.Count Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf Not RgeCateName Is Nothing Then
        If (CateNum <> RgeCateName.Rows.Count Or RgeVar.Columns.Count <> RgeCateName.Columns.Count) Then
            msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        End If
    ElseIf sr1tbl.bYsk = 1 And RgeYskData Is Nothing Then
        msgStr = "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If

    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If m_varselect <> "0" Then
        sr1VarSel = Split(m_varselect, ",")
    Else
        ReDim sr1VarSel(0 To RgeVar.Columns.Count) As Long
        sr1VarSel(0) = RgeVar.Columns.Count
        For i = 1 To RgeVar.Columns.Count
            sr1VarSel(i) = i - 1
        Next i
    End If
    
    itemNum = sr1VarSel(0)
    
    totalCateNum = 0
    If sr1tbl.bNum2Class = 1 Then
        If rgeClass.Rows.Count > 31 Then
            MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
            Set handleSr1Data = Nothing
            Exit Function
        Else
            For i = 1 To itemNum
                tmpv = rgeClass(1, sr1VarSel(i) + 1)
                totalCateNum = totalCateNum + tmpv
                If tmpv > 30 Then
                    MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
                'If varkind(1, sr1VarSel(i) + 1) = 0 And tmpv < 1 Then
                '    MsgBox "|fffd||fffd||fffd||28d||fffd||fffd||682||315||fffd||fffd||789||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                '    Set handleSr1Data = Nothing
                '    Exit Function
                'End If
                If tmpv > CateNum Then CateNum = tmpv
            Next i
        End If
    End If
    
    For i = 1 To itemNum
        tmpv = varkind(1, sr1VarSel(i) + 1)
        If tmpv < 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        totalCateNum = totalCateNum + tmpv
    Next i
    
    If totalCateNum > CATE_MAX Then
        MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: |fffd||fffd||fffd|vMAX" & CATE_MAX
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If sr1tbl.bExcept = 0 Then
        Set rge = RgeVar.Offset(1, 0).Resize(smpNum, itemNum)
        For i = 1 To itemNum
            k = sr1VarSel(i) + 1
            sr1var = rge.Columns(k).Value
            If WorksheetFunction.Count(sr1var) <> smpNum - 1 Then
                Set handleSr1Data = Nothing
                Exit Function
            End If
        Next i
    End If
    
    If sr1tbl.bYsk = 1 Then '12.8.27 LSQ mdf
        Dim tmpi As Long
        tmpi = RgeYskData.Rows.Count
        
        cateNameRow = cateNameRow + tmpi
        smpNum = smpNum + tmpi
        classRow = classRow + tmpi
    End If
    
    Set tmpSht = SbkThis.Sheets("Sr1Data") 'RgeVar.Worksheet.Parent.Sheets.Add
    tmpSht.Cells.ClearContents
    Set rge = tmpSht.Range("$B$1")
    
    #If 0 Then
    nYear = sr1Extra.nYear
    nMonth = sr1Extra.nMonth
    
    For i = 1 To smpNum 'cateNameRow - 6 - 1
        If sr1Extra.nTimeStyle = 4 Then
            rge(i + 1, 1) = i
        ElseIf sr1Extra.nTimeStyle = 3 Then
            rge(i + 1, 1) = nYear + i - 1
        Else
            If i = 1 Then
                rge(i + 1, 1) = nYear & " " & nMonth
            Else
                If next_Year_Month(sr1Extra.nTimeStyle, nYear, nMonth) Then
                    rge(i + 1, 1) = nYear & " " & nMonth
                Else
                    rge(i + 1, 1) = nMonth
                End If
            End If
        End If
    Next i
    #Else
    If Not RgeSmpName Is Nothing Then
        RgeSmpName.Copy
        rge(2, 1).PasteSpecial xlValues
    Else
        For i = 1 To cateNameRow - 6 - 1
            rge(i + 1, 1) = i
        Next i
    End If
    #End If
    
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To itemNum
            k = sr1VarSel(j) + 1
            If i > 1 And sr1Extra.bTimeLag = 1 Then
                If varTimeLag(1, k) >= 0 Then
                    If i - 1 <= varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                Else
                    If i - 1 > smpNum + varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                End If
            Else
                rge(i, j + 2) = RgeVar(i, k)
            End If
        Next j
    Next i
    tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)) = sr1obj
    
    If sr1tbl.bYsk = 1 Then
        'For i = 1 To RgeYskData.Rows.Count
        '    For j = 1 To ItemNum
        '        rge(RgeObj.Rows.Count + i, j + 2) = RgeYskData(i, sr1VarSel(j) + 1)
        '    Next j
        'Next i
        If Not RgeYskName Is Nothing Then
            RgeYskName.Copy
            rge(RgeObj.Rows.Count + 1, 1).PasteSpecial xlValues
        Else
            For i = 1 To RgeYskData.Rows.Count
                rge(RgeObj.Rows.Count + i, 1) = i + objSmpNum - 1
            Next i
        End If
        For i = 1 To RgeYskData.Rows.Count
            For j = 1 To itemNum
                rge(RgeObj.Rows.Count + i, j + 2) = RgeYskData(i, sr1VarSel(j) + 1)
            Next j
        Next i
    End If
    
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, itemNum + 2)).Address & vbNullChar
        
    If Not RgeCateName Is Nothing Then
        CateNum = RgeCateName.Rows.Count
        sr1cate = RgeCateName.Value
        For i = 1 To itemNum
            For j = 1 To CateNum
                If Trim(sr1cate(j, sr1VarSel(i) + 1)) = "" Then
                    rge(cateNameRow + j - 1, i) = "|fffd|W|fffd||fffd|" & j
                Else
                    rge(cateNameRow + j - 1, i) = sr1cate(j, sr1VarSel(i) + 1)
                End If
            Next j
        Next i
    Else
        For i = 1 To itemNum
            For j = 1 To CateNum
                rge(cateNameRow + j - 1, i) = ""
            Next j
        Next i
    End If
    sr1tbl.bCateName = 1
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(RgeSmpName.Rows.Count + 1, 1)).Address & vbNullChar
    
    Set rge = tmpSht.Range(sr1tbl.RgeVar)
    smpNum = rge.Rows.Count
    objSmpNum = RgeObj.Rows.Count
    For i = rge.Rows.Count To 2 Step -1
        sr1var = rge.Rows(i).Value
        If i <= RgeObj.Rows.Count Then
            If (IsEmpty(RgeObj(i, 1)) Or (Not IsNumeric(RgeObj(i, 1)))) Or Application.WorksheetFunction.Count(sr1var) <> rge.Columns.Count Then
                If sr1tbl.bExcept = 1 Then
                    tmpSht.Rows(i).Delete
                    smpNum = smpNum - 1
                    cateNameRow = cateNameRow - 1
                    objSmpNum = objSmpNum - 1
                Else
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
            End If
        Else
            If Application.WorksheetFunction.Count(sr1var) <> rge.Columns.Count Then
                If sr1tbl.bExcept = 1 Then
                    tmpSht.Rows(i).Delete
                    smpNum = smpNum - 1
                    cateNameRow = cateNameRow - 1
                Else
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
            End If
        End If
    Next i
    
    If smpNum < 2 Or objSmpNum < 2 Then
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    Set rge = tmpSht.Range("$B$1")
    
    'sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(objSmpNum, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, itemNum + 2)).Address & vbNullChar
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Address & vbNullChar
    
    tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Copy SbkThis.Sheets("Sr1Data").Range("A2")
    For i = 1 To smpNum
        rge(i + 1, 1) = i
    Next i
    
    'Category Name Copy (Category Name for numeric item may be adjusted, if it is categorized)
    Set bgnCelCateNm = SbkThis.Sheets("Sr1Info").Range("B50")
    tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Copy bgnCelCateNm
    
    Call makeCateName_forNumItem(itemNum, rgeClass, RgeVarKind, bgnCelCateNm)  '11.8.21 LSQ
    
    'Item Type
    For i = 1 To itemNum
        rge(i + 1, itemNum + 4) = varkind(1, sr1VarSel(i) + 1)
    Next i
    
    sr1tbl.RgeVarKind = rge(2, itemNum + 4).Resize(itemNum, 1).Address & vbNullChar
    
    'numeric item categorized (|fffd|K|fffd||fffd||fffd|l)
    If Not rgeClass Is Nothing Then
        For i = 1 To itemNum
            rgeClass.Columns(sr1VarSel(i) + 1).Copy rge(classRow, i)
            rge(classRow, i) = CLng(rgeClass.Columns(sr1VarSel(i) + 1).Cells(1, 1))
        Next i
        sr1tbl.rgeClass = rge(classRow, 1).Resize(rgeClass.Rows.Count, itemNum).Address & vbNullChar
    End If
    
    Set handleSr1Data = tmpSht
    On Error GoTo 0
End Function

Private Function checkSr1Data() As Boolean
    Dim RgeObj As Range, RgeVar As Range
    
    On Error Resume Next
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    If RgeObj.Rows.Count > RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        checkSr1Data = False
        Exit Function
    End If
    checkSr1Data = True
End Function

Private Sub SaveBasicInfo(ByVal revisedCateNum As Variant, ByVal NewCates As Variant)
    Dim i As Long, j As Long
    Dim rge As Range, RgeObj As Range, RgeVar As Range, rgeKind As Range
    Set rge = SbkThis.Worksheets("Sr1Info").Range("A1")
    Set RgeObj = Range(toXlA1str(sr1tbl.RgeObj))
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    Set rgeKind = Range(toXlA1str(sr1tbl.RgeVarKind))
    rge.Offset(0, 1) = RgeObj(1, 1)
    rge.Offset(0, 2) = 1
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(7, i) = RgeVar(1, i)
        rge.Offset(8, i + 40) = rgeKind(i, 1)
        rge.Offset(9, i + 40) = NewCates(i)
    Next i
    Set rge = SbkThis.Worksheets("Sr1Data").Range("A1")
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(i, RgeVar.Columns.Count + 4) = revisedCateNum(i)
    Next i
End Sub

Sub IS_MTHR_MLRA()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet, outSht As Worksheet, outShtMid As Worksheet
    Dim RgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    Dim edtObj As EditBox
    Dim bOutMid As Boolean, strBkName As String, bkName As String
    Dim actSht As Worksheet
    Dim nid As Long
    
    'for Debug use (11.8.19 LSQ add)
#If 0 Then
    Call SbkInit
#End If

    On Error Resume Next
    
    Set actSht = ActiveSheet

    ReDim VbaGrp(0)
    
    m_varselect = getDefaultVarSelect(FUNC_NO.FUNC_MLRA)
    If bRangeChanged_Frm(FUNC_NO.FUNC_MLRA, frmMLRA.RgeVar.Text) Then m_varselect = "0"
redisp:
    m_bvarselected = False
    
    frmMLRA.bvarselected = m_bvarselected
    frmMLRA.VarSelect = m_varselect
    frmMLRA.Show
    If Not frmMLRA.bOK Then Exit Sub
    
    m_bvarselected = frmMLRA.bvarselected
    m_varselect = frmMLRA.VarSelect
    
    Call setDefaultAddress(FUNC_NO.FUNC_MLRA, getCurrentAddress_Frm(frmMLRA.RgeVar.Text))
    Call setDefaultVarSelect(FUNC_NO.FUNC_MLRA, m_varselect)
    
    sr1tbl.RgeObj = Trim(frmMLRA.RgeObj.Text) & vbNullChar
    sr1tbl.RgeVar = Trim(frmMLRA.RgeVar.Text) & vbNullChar
    sr1tbl.RgeVarKind = "" 'Trim(frmMLRA.RgeVarKind.text) & vbNullChar
    sr1tbl.bExcept = IIf(frmMLRA.optExcept.Value = True, 1, 0)
    sr1tbl.nVarSelMethod = IIf(frmMLRA.optVarNone.Value = True, 1, 2)
    sr1tbl.bSmpName = IIf(frmMLRA.optSmpNo.Value = True, 0, 1)
    sr1tbl.bYsk = IIf(frmMLRA.chkYsk.Value = True, 1, 0)
    If sr1tbl.bYsk = 1 Then
        sr1tbl.RgeYskData = Trim(frmMLRA.RgeYskData) & vbNullChar
        sr1tbl.RgeYskName = Trim(frmMLRA.RgeYskName) & vbNullChar
    End If
    sr1tbl.bExtraInfo = IIf(frmMLRA.optExtraInfoYes.Value = True, 1, 0)
    sr1tbl.bNum2Class = 0 'IIf(frmMLRA.chkNum2Cate.Value = True, 1, 0)
    'If sr1tbl.bNum2Class = 1 Then
    '    sr1tbl.rgeClass = Trim(frmMLRA.RgeNumCate.text) & vbNullChar
    'End If
    If sr1tbl.bSmpName = 1 Then
        sr1tbl.RgeSmpName = Trim(frmMLRA.RgeSmpName.Text) & vbNullChar
    End If
    sr1tbl.bCateName = 0 'IIf(frmMLRA.chkCateName.Value = True, 1, 0)
    'If sr1tbl.bCateName = 1 Then
    '    sr1tbl.RgeCateName = Trim(frmMLRA.RgeCateName.text) & vbNullChar
    'End If
    sr1tbl.bPointGrp = 1 'IIf(frmBasicInfo.chkOutGrp.Value = True, 1, 0)
    sr1tbl.bExcept_n0 = 0 'IIf(frmMLRA.optExcept_n0.Value = True, 1, 0)
    sr1Extra.bTimeLag = IIf(frmMLRA.chkTimeLag.Value = True, 1, 0)
    If sr1Extra.bTimeLag = 1 Then
        sr1Extra.RgeTimeLag = Trim(frmMLRA.RgeTimeLag.Text) & vbNullChar
    End If
    'sr1Extra.nTimeStyle = IIf(frmExtSr1.optMonth.Value = True, 1, _
    '                    IIf(frmExtSr1.optQuarter.Value = True, 2, _
    '                    IIf(frmExtSr1.optYear.Value = True, 3, 4)))
    'sr1Extra.nYear = val(frmExtSr1.txtYear.Text)
    'sr1Extra.nMonth = val(frmExtSr1.txtMonth.Text)
    
    Set tmpSht = handleSr1Data
    
    If tmpSht Is Nothing Then
        GoTo redisp
    End If
    
    #If 0 Then
    'output sheet
    strBkName = "[" & ActiveWorkbook.name & "]"
    '
    
    Set outSht = ActiveWorkbook.Worksheets.Add
    sr1tbl.OutSheet = strBkName & outSht.name & "!R50C1"
    #End If
    
    'data sheet
    tmpSht.Activate
    
    Dim revisedCateNum() As Long, NewCates() As String
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    ReDim revisedCateNum(1 To RgeVar.Columns.Count + 1)
    ReDim NewCates(1 To RgeVar.Columns.Count + 1)
    Call Remove0Cate(sr1tbl.RgeVarKind, sr1tbl.RgeVar, sr1tbl.RgeCateName, sr1tbl.bExcept_n0 = 0, revisedCateNum, NewCates)
    
    If Not checkSr1Data Then
        GoTo redisp
    End If
    
    SaveBasicInfo revisedCateNum, NewCates
    
    bkName = "[" & SbkThis.name & "]"
    sr1tbl.RgeInfo = bkName & "Sr1Info!R1C1" & vbNullChar
    sr1tbl.OutSheet = bkName & "Sr1Result!R1C1" & vbNullChar
    sr1tbl.RgeObj = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeObj) & vbNullChar
    sr1tbl.RgeVar = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVar) & vbNullChar
    sr1tbl.RgeSmpName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeSmpName) & vbNullChar
    sr1tbl.RgeCateName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeCateName) & vbNullChar
    sr1tbl.RgeVarKind = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVarKind) & vbNullChar
    sr1tbl.rgeClass = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.rgeClass) & vbNullChar
    sr1tbl.OutSheet = Trim(sr1tbl.OutSheet) & vbNullChar
    
    sr1tbl.nFuncNo = FUNC_NO.FUNC_MLRA
    
    SbkThis.Sheets("Sr1Result").Cells.Clear    'save calc results from DLL
    
    nid = IIf(isTrialVer, 0, 1)
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = sr1_dlg(nid, sr1tbl)  'do calc
    actSht.Activate
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        Exit Sub
    End If
    
    If rtn = 0 Then 'do output
        Sr1_Output FUNC_NO.FUNC_MLRA, actSht.Parent.Sheets.Add, sr1tbl.bPointGrp, True, True
    End If
    On Error GoTo 0
End Sub

Public Sub Sr1DrawDotPlot(ByVal strRgeClass As String, ByVal strRgeData As String, _
                                    ByVal strRgeOut As String, ByVal crossAt As Double)
    Application.Run GxlaBkGraph1 & "!DrawDotPlot_A", toXlA1str(strRgeClass), toXlA1str(strRgeData), _
                                            toXlA1str(strRgeOut), crossAt
End Sub
                          
'=== EOF ===



Attribute VB_Name = "MdlNum2Cate"
Option Base 1
Option Explicit

Private Const ERR_NONNUMERIC As String = "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
Private Const ERR_CLASSRANGE As String = "|fffd|K|fffd||fffd||fffd||fffd||fffd||64f||fffd||142||fffd||fffd|B"
Private Const ERR_DATARANGE As String = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||80aa||fffd|K|fffd||602||142||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
Private Const ERR_NAMERANGE As String = "|fffd||fffd||fffd||302||314||348||34e|w|fffd||80aa||fffd|K|fffd||602||142||fffd||fffd||fffd||702||fffd||fffd||fffd|B"

Private Sub BubbleSort(MyArray() As Variant, Optional ByVal bAsc As Boolean = True)
     
    Dim first           As Integer
    Dim last            As Integer
    Dim i               As Integer
    Dim j               As Integer
    Dim Temp            As Variant
    Dim List            As Variant
     
    first = LBound(MyArray)
    last = UBound(MyArray)
    For i = first To last - 1
        For j = i + 1 To last
            If bAsc Then
                If MyArray(i) > MyArray(j) Then
                    Temp = MyArray(j)
                    MyArray(j) = MyArray(i)
                    MyArray(i) = Temp
                End If
            Else
                If MyArray(i) < MyArray(j) Then
                    Temp = MyArray(j)
                    MyArray(j) = MyArray(i)
                    MyArray(i) = Temp
                End If
            End If
        Next j
    Next i
End Sub

#If False Then '10.12.1 LSQ cmt : use SetRangeBorderA() in mdlCommon
Private Sub SetRangeBorderA(ByVal rge As Range, _
                           ByVal wtLeft As XlBorderWeight, ByVal wtTop As XlBorderWeight, _
                           ByVal wtRight As XlBorderWeight, ByVal wtBottom As XlBorderWeight)
    rge.Borders(xlEdgeTop).Weight = wtTop
    rge.Borders(xlEdgeLeft).Weight = wtLeft
    rge.Borders(xlEdgeBottom).Weight = wtBottom
    rge.Borders(xlEdgeRight).Weight = wtRight
End Sub
#End If

'2013.10.17 rewrote
Private Sub subNum2Cate(ByVal bAsc As Boolean, ByVal rgeOutIn As Range, ByVal rgeData As Range, ByVal rgeClass As Range, ByVal rgeName As Range, Optional ByVal bLess As Boolean = True)
    Dim i As Integer, j As Integer, k As Integer
    Dim inx As Integer, itmNum As Integer, smpNum As Integer
    Dim first As Integer, last As Integer
    Dim rge As Range, data As Range, RgeOut As Range, rgeTitle As Range
    Dim arrayContacts() As Variant
    Dim arrayData() As Variant
    Dim aryData() As Variant
    Dim InvalidNum As Integer, MAXCATENUM As Integer
    Set RgeOut = rgeOutIn
    Set rge = rgeClass
    Set data = rgeData
    Set rgeTitle = data.Rows(1)
    Set data = Range(data(2, 1), data(data.Rows.Count, data.Columns.Count))
    itmNum = rge.Columns.Count
    smpNum = data.Rows.Count
    #If 0 Then
    RgeOut = "|fffd||fffd||fffd||fffd||fffd||282||fffd||fffd||fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|"
    For i = 1 To itmNum
        RgeOut(3, i + 1) = rgeTitle.Cells(1, i)
    Next i
    RgeOut(4, 1) = "|fffd|L|fffd||fffd|"
    RgeOut(5, 1) = "|fffd||fffd||fffd||fffd|"
    RgeOut(6, 1) = "|fffd||fffd||fffd|v"
    Set RgeOut = RgeOut(8, 1)
    #End If
    RgeOut = "|fffd||fffd||fffd|f|fffd|[|fffd|^"
    Set RgeOut = RgeOut(2, 1)
    If Not rgeName Is Nothing Then
        arrayData = rgeName.Value
        Range(RgeOut(2, 1), RgeOut(smpNum + 1, 1)).Value = arrayData
    Else
        For i = 1 To smpNum
            RgeOut(i + 1, 1).Value = i
        Next i
    End If
    RgeOut(smpNum + 3, 1) = "|fffd||fffd||fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|"
    Set RgeOut = RgeOut(1, 2)
    MAXCATENUM = 0
    For i = 1 To itmNum
        InvalidNum = 0
        arrayContacts = rge.Columns(i).Value
        first = LBound(arrayContacts)
        last = UBound(arrayContacts)
        ReDim arrayData(first To last)
        inx = 0
        For j = first To last
            If IsNumeric(arrayContacts(j, 1)) And Not IsEmpty(arrayContacts(j, 1)) Then
                arrayData(j) = arrayContacts(j, 1)
                inx = inx + 1
            End If
        Next j
        ReDim Preserve arrayData(1 To inx)
        Call BubbleSort(arrayData, bAsc)
        aryData = data.Columns(i).Value
        first = LBound(aryData)
        last = UBound(aryData)
        For j = first To last
            If IsNumeric(aryData(j, 1)) And Not IsEmpty(aryData(j, 1)) Then
                inx = UBound(arrayData) + 1
                For k = LBound(arrayData) To UBound(arrayData)
                    If bAsc Then
                        If bLess Then
                            If aryData(j, 1) < arrayData(k) Then
                                inx = k
                                Exit For
                            End If
                        Else
                            If aryData(j, 1) <= arrayData(k) Then
                                inx = k
                                Exit For
                            End If
                        End If
                    Else
                        If bLess Then
                            If aryData(j, 1) >= arrayData(k) Then
                                inx = k
                                Exit For
                            End If
                        Else
                            If aryData(j, 1) > arrayData(k) Then
                                inx = k
                                Exit For
                            End If
                        End If
                    End If
                Next k
                aryData(j, 1) = inx
            Else
                aryData(j, 1) = "-"
                InvalidNum = InvalidNum + 1
            End If
        Next j
        rgeOutIn(4, i + 1) = smpNum - InvalidNum
        rgeOutIn(5, i + 1) = InvalidNum
        rgeOutIn(6, i + 1) = smpNum
        RgeOut(1, i) = rgeTitle.Cells(1, i)
        Range(RgeOut(2, i), RgeOut(smpNum + 1, i)).Value = aryData
        RgeOut(smpNum + 4, i) = rgeTitle.Cells(1, i)
        If bAsc Then
            If bLess Then
                For j = LBound(arrayData) To UBound(arrayData) + 1
                    If j = LBound(arrayData) Then
                        RgeOut(smpNum + j + 4, i) = "|fffd||fffd| |fffd||fffd|" & arrayData(j)
                    ElseIf j = UBound(arrayData) + 1 Then
                        RgeOut(smpNum + j + 4, i) = "|fffd||fffd| |fffd||fffd|" & arrayData(j - 1)
                    Else
                        RgeOut(smpNum + j + 4, i) = arrayData(j - 1) & "|fffd||fffd| |fffd||fffd| |fffd||fffd|" & arrayData(j)
                    End If
                Next j
            Else
                For j = LBound(arrayData) To UBound(arrayData) + 1
                    If j = LBound(arrayData) Then
                        RgeOut(smpNum + j + 4, i) = "|fffd||fffd| |fffd||fffd|" & arrayData(j)
                    ElseIf j = UBound(arrayData) + 1 Then
                        RgeOut(smpNum + j + 4, i) = "|fffd||fffd| |fffd||fffd|" & arrayData(j - 1)
                    Else
                        RgeOut(smpNum + j + 4, i) = arrayData(j - 1) & "|fffd||fffd||fffd||fffd||fffd||fffd|" & arrayData(j)
                    End If
                Next j
            End If
        Else
            For j = LBound(arrayData) To UBound(arrayData) + 1
                If j = LBound(arrayData) Then
                    RgeOut(smpNum + j + 4, i) = "|fffd||fffd| |fffd||fffd|" & arrayData(j)
                ElseIf j = UBound(arrayData) + 1 Then
                    RgeOut(smpNum + j + 4, i) = "|fffd||fffd| |fffd||fffd|" & arrayData(j - 1)
                Else
                    RgeOut(smpNum + j + 4, i) = arrayData(j) & "|fffd||fffd||fffd||fffd||fffd||fffd|" & arrayData(j - 1)
                End If
            Next j
       
        End If
        j = UBound(arrayData) - LBound(arrayData) + 1 + 1
        If j > MAXCATENUM Then
            MAXCATENUM = j
        End If
    Next i
    For i = 1 To MAXCATENUM
        RgeOut(smpNum + i + 4, 0) = i
    Next i
    'Set RgeOut = rgeOutIn(3, 1)
    'Call SetRangeBorderA(RgeOut, xlThin, xlThin, xlThin, xlThin)
    'Call SetRangeBorderA(Range(RgeOut, RgeOut(3, 1)), xlThin, xlThin, xlThin, xlThin)
    'Call SetRangeBorderA(RgeOut(4, 1), xlThin, xlThin, xlThin, xlThin)
    'For i = 1 To ItmNum
    '    Call SetRangeBorderA(RgeOut(1, i + 1), IIf(i = 1, xlThin, xlHairline), xlThin, IIf(i = ItmNum, xlThin, xlHairline), xlThin)
    '    Call SetRangeBorderA(Range(RgeOut(2, i + 1), RgeOut(3, i + 1)), IIf(i = 1, xlThin, xlHairline), xlThin, IIf(i = ItmNum, xlThin, xlHairline), xlThin)
    '    Call SetRangeBorderA(RgeOut(4, i + 1), IIf(i = 1, xlThin, xlHairline), xlThin, IIf(i = ItmNum, xlThin, xlHairline), xlThin)
    'Next i
    'Set RgeOut = rgeOutIn(9, 1)
    Set RgeOut = rgeOutIn(2, 1)
    Call SetRangeBorderA(RgeOut, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorderA(Range(RgeOut, RgeOut(smpNum + 1, 1)), xlThin, xlThin, xlThin, xlThin)
    For i = 1 To itmNum
        Call SetRangeBorderA(RgeOut(1, i + 1), IIf(i = 1, xlThin, xlHairline), xlThin, IIf(i = itmNum, xlThin, xlHairline), xlThin)
        Call SetRangeBorderA(Range(RgeOut(2, i + 1), RgeOut(smpNum + 1, i + 1)), IIf(i = 1, xlThin, xlHairline), xlThin, IIf(i = itmNum, xlThin, xlHairline), xlThin)
    Next i
    'Set RgeOut = rgeOutIn(smpNum + 12, 1)
    Set RgeOut = rgeOutIn(smpNum + 5, 1)
    Call SetRangeBorderA(RgeOut, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorderA(Range(RgeOut, RgeOut(MAXCATENUM + 1, 1)), xlThin, xlThin, xlThin, xlThin)
    For i = 1 To itmNum
        Call SetRangeBorderA(RgeOut(1, i + 1), IIf(i = 1, xlThin, xlHairline), xlThin, IIf(i = itmNum, xlThin, xlHairline), xlThin)
        Call SetRangeBorderA(Range(RgeOut(2, i + 1), RgeOut(MAXCATENUM + 1, i + 1)), IIf(i = 1, xlThin, xlHairline), xlThin, IIf(i = itmNum, xlThin, xlHairline), xlThin)
    Next i
End Sub
 
Private Function checkData(ByVal bStop As Boolean, ByVal rgeData As Range, ByVal rgeClass As Range, ByVal rgeName As Range) As Integer
    Dim dataNum As Long
    Dim itmNum As Long, smpNum As Long
    Dim tmpRge As Range
    If rgeData Is Nothing Then
        checkData = -1
        Exit Function
    End If
    If rgeClass Is Nothing Then
        checkData = -2
        Exit Function
    End If
    itmNum = rgeData.Columns.Count
    smpNum = rgeData.Rows.Count
    Set tmpRge = Range(rgeData(2, 1), rgeData(smpNum, itmNum))
    If itmNum <> rgeClass.Columns.Count Then
        checkData = -2
        Exit Function
    End If
    dataNum = Application.WorksheetFunction.Count(tmpRge)
    If dataNum <> itmNum * (smpNum - 1) And bStop Then
        checkData = -3
        Exit Function
    End If
    If Not rgeName Is Nothing Then
        If rgeName.Rows.Count <> smpNum - 1 Or rgeName.Columns.Count <> 1 Then
            checkData = -4
            Exit Function
        End If
    End If
    checkData = 0
End Function

Private Sub setN2CSmpName()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgNum2Cate")
    If dlg.OptionButtons("optSmpNo").Value = xlOn Then
        Call CommSetSmpName(dlg, "RgeSmpName", False)
    Else
        Call CommSetSmpName(dlg, "RgeSmpName", True)
    End If
End Sub

Sub IS_MTHR_Num2Cate()
    Dim bStop As Boolean, bAsc As Boolean, bLess As Boolean
    Dim RgeOut As Range, rgeData As Range, rgeClass As Range, rgeName As Range
    Dim rtn As Integer
    Dim SmpName As Integer
    Dim dlg As DialogSheet
    Dim Ret As Boolean
    
    On Error Resume Next
    Set dlg = ThisWorkbook.Sheets("DlgNum2Cate")
    dlg.OptionButtons("optSmpNo").OnAction = "setN2CSmpName"
    dlg.OptionButtons("optSmpName").OnAction = "setN2CSmpName"
    dlg.OptionButtons("optSmpNo").Value = xlOn
    setN2CSmpName
redisp:
    Set RgeOut = Nothing
    Set rgeData = Nothing
    Set rgeClass = Nothing
    Set rgeName = Nothing
    
    Call SaveDlg(dlg)   '08.12.29 LSQ
    Ret = dlg.Show
    If Ret Then
        Call SaveDlg(dlg)
        Set RgeOut = Range(dlg.EditBoxes("RgeDataOut").Text)
        Set rgeClass = Range(dlg.EditBoxes("RgeClass").Text)
        Set rgeData = Range(dlg.EditBoxes("RgeDataIn").Text)
        SmpName = IIf(dlg.OptionButtons("optSmpNo").Value = xlOn, 1, 2)
        If SmpName = 2 Then
            Set rgeName = Range(dlg.EditBoxes("RgeSmpName").Text)
        Else
            Set rgeName = Nothing
        End If

        bStop = IIf(dlg.OptionButtons("optStop").Value = xlOn, True, False)
        bAsc = True 'IIf(dlg.CheckBoxes("chkAsc").Value = xlOn, False, True)
        bLess = IIf(dlg.OptionButtons("optLess").Value = xlOn, True, False)
        rtn = checkData(bStop, rgeData, rgeClass, rgeName)
        If rtn < 0 Then
            If rtn = -1 Then
                MsgBox ERR_DATARANGE
            ElseIf rtn = -2 Then
                MsgBox ERR_CLASSRANGE
            ElseIf rtn = -3 Then
                MsgBox ERR_NONNUMERIC
            ElseIf rtn = -4 Then
                MsgBox ERR_NAMERANGE
            End If
            GoTo redisp
        Else
            Call subNum2Cate(bAsc, RgeOut, rgeData, rgeClass, rgeName, bLess)
            RgeOut.Worksheet.Activate
            RgeOut.Select
        End If
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
Attribute VB_Name = "MdlSRK3"
'=======================================================
' SR3 for SSS_SRK Ver3.0
'
' 08.12.4 LSQ split from "MdlSRK"
'=======================================================
Option Private Module
Option Explicit

Type paratbl
    '|fffd||348||34e|w|fffd||fffd|
    srcDataRef As String * 256
    objDataRef As String * 256
    srcNameRef As String * 256
    objNameRef As String * 256
    
    '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A
    bSmpScrDisp As Long   '|fffd|\|fffd||fffd|
    bSmpScrYsk As Long    '|fffd|\|fffd||fffd|
    
    'Option
    AxisNum As Double      ' 2<=AxisNum<=|fffd||3d0||fffd|-1
    cateSelect As Long     ' |fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||311|I|fffd||fffd|
    
    '|fffd|_|fffd|O|fffd||fffd||fffd|t
    bTenGrpDisp As Long           '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd|;
    flgTenGrpNum As Long          '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||310||fffd| --- 1(|fffd|P|fffd|})or 2(|fffd|S|fffd|})
    Yoko_Axis As Long             '1<=Yoko_Axis<=AxisNum;
    Tate_Axis As Long             '1<=Tate_Axis<=AxisNum;
    mojiNum As Long               '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||241|A|fffd|_|fffd||fffd||fffd||302||fffd||fffd||fffd||a347||fffd||315||fffd||fffd||fffd||fffd||fffd|
    bGrpCateDisp As Long          '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||243|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O; 08.12.4 LSQ add
  
    '
    bSmpLableNo As Long   ' |fffd||5368e||fffd||fffd||fffd||fffd||642||315|\|fffd||fffd|; TRUE : No.|fffd||155|\|fffd||fffd||fffd|C FALSE : |fffd||5368e||496||fffd||fffd||155|\|fffd||fffd|
    bExcept As Long
    bGrpCateBar As Long
    bGrpCateTen As Long
    bGrpAttrBar As Long
    bGrpAttrTen As Long
    bAttrDisp As Long       '|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|\|fffd||fffd|; 08.12.4 LSQ add
    bAttrCateDisp As Long
    AttrRange As String * 256
    AttrCateRange As String * 256
    VarSelect As String * 256
    bExceptAllZero As Long
    bNegNo As Long
    bLink As Long
    CateNum(1 To 250) As Long
End Type

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private sr3tbl As paratbl
'Dll old name "K_SRK3.dll", 11.8.7 LSQ
#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function sr3_dlg2 Lib "MTHR_E_SR3_64.dll" (ByVal nid As Long, sr3tbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Integer
    #Else
        Private Declare Function sr3_dlg2 Lib "MTHR_E_SR3_64.dll" (ByVal nid As Long, sr3tbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As Long) As Integer
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function sr3_dlg2 Lib "MTHR_E_SR3.dll" (ByVal nid As Long, sr3tbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Integer
    #Else
        Private Declare Function sr3_dlg2 Lib "MTHR_E_SR3.dll" (ByVal nid As Long, sr3tbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As Long) As Integer
    #End If
#End If

'==============================================================================================

Function ReallocGrp(ByVal n As Long) As Long
    ReDim VbaGrp(1 To n)
    Call InitGrpAry(VbaGrp)
    ReallocGrp = 0
End Function

'
'|fffd||3d0||fffd||fffd|I|fffd||fffd|
'08.12.4 LSQ mdf
Private Sub Sr3_GetVarSel()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim RgeVar As Range
    Dim valvar As Variant
    Dim savLabelA As String, savLabelB As String
    
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgSrk3")
    Set RgeVar = Range(dlg.EditBoxes("srcDataRef").Text)
    Set RgeVar = Range(RgeVar(1, 1), RgeVar(1, RgeVar.Columns.Count))
    If Err.Number <> 0 Then
        Err.Clear
        m_varselect = vbNullString
        On Error GoTo 0
        Exit Sub
    End If
    valvar = RgeVar.Value()
    For i = 1 To RgeVar.Columns.Count
        m_varselect = m_varselect & "," & valvar(1, i)
    Next i
        
    'save
    savLabelA = frmVarSel.Label1.Caption
    savLabelB = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = "|fffd|I|fffd||fffd||fffd||142||fffd||fffd||fffd||3d0||fffd|"
    frmVarSel.Label2.Caption = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|"
    
    m_varselect = VarSelect(Mid(m_varselect, 2))
    
    'recovery
    frmVarSel.Label1.Caption = savLabelA
    frmVarSel.Label2.Caption = savLabelB
    
    On Error GoTo 0
End Sub
'
'|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A : |fffd|\|fffd||fffd|
'08.12.19 LSQ mdf
Private Sub Sr3CtrlMacro_SmpScr()
    Dim dlg As DialogSheet
    Dim bOn As Boolean

    Set dlg = ThisWorkbook.DialogSheets("DlgSrk3")
    bOn = True '(dlg.CheckBoxes("bSmpScrDisp") = xlOn)
    
    '08.12.19 LSQ add
    dlg.CheckBoxes("bAttrDisp").Enabled = bOn
    Call Sr3CtrlMacro_AttrDsp

    dlg.CheckBoxes("bTenGrpDisp").Enabled = bOn
    
End Sub
'
'|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A : |fffd|\|fffd||fffd|
Private Sub Sr3CtrlMacro_SmpScrYsk()
    Call CommSetEditBox_byChk("DlgSrk3", "bSmpScrYsk", "YskSmpName")
    Call CommSetEditBox_byChk("DlgSrk3", "bSmpScrYsk", "objDataRef")
End Sub
'
'|fffd||5368e||483||fffd||fffd|x|fffd||fffd||fffd||315|\|fffd||fffd|
Private Sub Sr3CtrlMacro_SmpName()
    Call CommSetEditBox_byOpt("DlgSrk3", "optSmpName", "srcNameRef")
End Sub
'
'|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S : |fffd|\|fffd||fffd|
'08.12.19 LSQ mdf
'11.7.20 LSQ mdf
Private Sub Sr3CtrlMacro_AttrDsp()
    Dim dlg As DialogSheet
    Dim bOn As Boolean, ChkObj As CheckBox
    Dim chkBar As CheckBox, chkTen As CheckBox '11.7.20 LSQ add

    Set dlg = ThisWorkbook.DialogSheets("DlgSrk3")
    Set ChkObj = dlg.CheckBoxes("bAttrDisp")
    bOn = (ChkObj = xlOn And ChkObj.Enabled = True) '08.12.19
    
    'cate name
    Set ChkObj = dlg.CheckBoxes("bAttrCateDisp")
    ChkObj.Enabled = bOn
    dlg.EditBoxes("attrCateRange").Enabled = (bOn And ChkObj = xlOn)
    
    'graph
    Set chkBar = dlg.CheckBoxes("bGrpAttrBar")
    Set chkTen = dlg.CheckBoxes("bGrpAttrTen")
    chkBar.Enabled = bOn
    chkTen.Enabled = bOn
    
    '11.7.20 LSQ add (refer to SSB)
    If (Not bOn And chkBar = xlOn) Then
        chkBar = xlOff
        Call Sr3CtrlMacro_GraphDsp
    End If
    If (Not bOn And chkTen = xlOn) Then
        chkTen = xlOff
        Call Sr3CtrlMacro_GraphDsp
    End If
    
    'data range
    Call CommSetEditBox_byChk("DlgSrk3", "bAttrDisp", "attrRange")
End Sub
'
'|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S : |fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|\|fffd||fffd|
Private Sub Sr3CtrlMacro_AttrCateName()
    Call CommSetEditBox_byChk("DlgSrk3", "bAttrCateDisp", "attrCateRange")
End Sub
'
'1|fffd|} / |fffd|S|fffd|}
Private Sub Sr3CtrlMacro_Graph()
    Call CommSetEditBox_byOpt("DlgSrk3", "flgTenGrpNum", "Tate_Axis")
    Call CommSetEditBox_byOpt("DlgSrk3", "flgTenGrpNum", "Yoko_Axis")
End Sub

Private Sub Sr3CtrlMacro_MojiNum()
    Call CommSetEditBox_byChk("DlgSrk3", "bGrpCateDisp", "mojiNum")
End Sub
'
'Graph display setting
'11.7.20 LSQ add (Refer to SSB)
Private Sub Sr3CtrlMacro_GraphDsp()
    Dim dlg As DialogSheet
    Dim ChkObj1 As CheckBox, ChkObj2 As CheckBox, ChkObj3 As CheckBox, ChkObj4 As CheckBox, ChkObj5 As CheckBox
    Dim bOn1 As Boolean, bOn2 As Boolean, bOn3 As Boolean, bOn4 As Boolean, bOn5 As Boolean
    Dim bOn As Boolean
    
    Set dlg = ThisWorkbook.DialogSheets("DlgSrk3")
    Set ChkObj1 = dlg.CheckBoxes("bGrpCateBar")
    Set ChkObj2 = dlg.CheckBoxes("bGrpCateTen")
    Set ChkObj3 = dlg.CheckBoxes("bTenGrpDisp")
    Set ChkObj4 = dlg.CheckBoxes("bGrpAttrBar")
    Set ChkObj5 = dlg.CheckBoxes("bGrpAttrTen")
    
    bOn = IIf(ChkObj1 = xlOn Or ChkObj2 = xlOn Or ChkObj3 = xlOn Or ChkObj4 = xlOn Or ChkObj5 = xlOn, True, False)
    
    With dlg
        .OptionButtons("flgTenGrpNum").Enabled = bOn
        .OptionButtons("flgTenGrpNumAll").Enabled = bOn
        .EditBoxes("Yoko_Axis").Enabled = bOn
        .EditBoxes("Tate_Axis").Enabled = bOn
        .CheckBoxes("bGrpCateDisp").Enabled = bOn
        .EditBoxes("mojiNum").Enabled = bOn
    End With
 
    Call Sr3CtrlMacro_Graph
    Call Sr3CtrlMacro_MojiNum
    
End Sub

Private Sub SR3_Neg_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    
    Set dlg = ThisWorkbook.DialogSheets("DlgSrk3")
    bOn = (dlg.OptionButtons("bNegYes") = xlOn)
    dlg.EditBoxes("edtCateNameRge").Enabled = bOn
    If bOn Then
        dlg.Focus = "edtCateNameRge"
    End If
End Sub

'
Private Sub SR3_setMacro(ByVal dlg As DialogSheet)
    'var select
    dlg.Buttons("cateSelect").OnAction = "Sr3_GetVarSel"
    
    'sample score
    'dlg.CheckBoxes("bSmpScrDisp").OnAction = "Sr3CtrlMacro_SmpScr"
    dlg.CheckBoxes("bSmpScrYsk").OnAction = "Sr3CtrlMacro_SmpScrYsk"
    
    'sample name
    dlg.OptionButtons("optSmpNo").OnAction = "Sr3CtrlMacro_SmpName"
    dlg.OptionButtons("optSmpName").OnAction = "Sr3CtrlMacro_SmpName"
    
    '|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S
    dlg.CheckBoxes("bAttrDisp").OnAction = "Sr3CtrlMacro_AttrDsp"
    dlg.CheckBoxes("bAttrCateDisp").OnAction = "Sr3CtrlMacro_AttrCateName"
    
    'graph
    dlg.OptionButtons("flgTenGrpNum").OnAction = "Sr3CtrlMacro_Graph"
    dlg.OptionButtons("flgTenGrpNumAll").OnAction = "Sr3CtrlMacro_Graph"
    
    dlg.CheckBoxes("bGrpCateDisp").OnAction = "Sr3CtrlMacro_MojiNum"

    'Graph display;  11.7.20 LSQ (see SSB)
    dlg.CheckBoxes("bGrpCateBar").OnAction = "Sr3CtrlMacro_GraphDsp"
    dlg.CheckBoxes("bGrpCateTen").OnAction = "Sr3CtrlMacro_GraphDsp"
    dlg.CheckBoxes("bTenGrpDisp").OnAction = "Sr3CtrlMacro_GraphDsp"
    dlg.CheckBoxes("bGrpAttrBar").OnAction = "Sr3CtrlMacro_GraphDsp"
    dlg.CheckBoxes("bGrpAttrTen").OnAction = "Sr3CtrlMacro_GraphDsp"
    dlg.OptionButtons("bNegNo").OnAction = "SR3_Neg_Click"
    dlg.OptionButtons("bNegYes").OnAction = "SR3_Neg_Click"
    
    'init
    Call Sr3CtrlMacro_SmpScr
    Call Sr3CtrlMacro_SmpScrYsk
    Call Sr3CtrlMacro_SmpName
    Call Sr3CtrlMacro_AttrDsp
    Call Sr3CtrlMacro_AttrCateName
    Call Sr3CtrlMacro_Graph
    Call Sr3CtrlMacro_MojiNum
    Call Sr3CtrlMacro_GraphDsp  '11.7.20 LSQ (Refer to SSB)
    Call SR3_Neg_Click
End Sub
'
'08.12.4 LSQ add
'return TRUE = OK else ERROR
'
Private Function chkSr3Data() As Boolean
    Dim rgeData As Range, RgeYsk As Range, RgeSmpName As Range, rgeAttr As Range, rgeAttrCateName As Range
    Dim msgStr As String
    Dim tmpi As Long, yokoNo As Long, tateNo As Long
    Dim itemNum As Long
    
    'init
    msgStr = ""

    On Error Resume Next
    Set rgeData = Range(toXlA1str(sr3tbl.srcDataRef))
    Set RgeYsk = Range(toXlA1str(sr3tbl.objDataRef))
    Set RgeSmpName = Range(toXlA1str(sr3tbl.srcNameRef))
    Set rgeAttr = Range(toXlA1str(sr3tbl.AttrRange))
    Set rgeAttrCateName = Range(toXlA1str(sr3tbl.AttrCateRange))
    On Error GoTo 0
    
    If rgeData Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    itemNum = rgeData.Columns.Count
    tmpi = sr3tbl.AxisNum
    yokoNo = sr3tbl.Yoko_Axis
    tateNo = sr3tbl.Tate_Axis
    If (tmpi < 2 Or tmpi >= itemNum) Or _
       ((sr3tbl.flgTenGrpNum = 1) And (yokoNo < 1 Or yokoNo > 5 Or tateNo < 1 Or tateNo > 5)) Then
        msgStr = "|fffd||fffd||fffd|i|fffd||fffd||fffd||310||fffd||fffd|A|fffd|^|fffd|e|fffd||fffd||fffd|A|fffd||fffd||fffd|R|fffd||fffd||fffd|j|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If sr3tbl.bSmpScrYsk = 1 And RgeYsk Is Nothing Then
        msgStr = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If sr3tbl.bSmpLableNo = 0 And RgeSmpName Is Nothing Then
        msgStr = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If sr3tbl.bAttrDisp = 1 And rgeAttr Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If sr3tbl.bAttrCateDisp = 1 And rgeAttrCateName Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    
    '
chkEnd:
    If msgStr <> "" Then
        MsgBox msgStr
        chkSr3Data = False
        Exit Function
    End If
    
    '
    chkSr3Data = True
End Function

Private Function Sr3_DataExp(sr3tbl As paratbl, ByVal strCateR As String) As Worksheet
    Dim i As Long, j As Long, rtn As Long
    Dim smpNum As Long, itmNum As Long, newSmpNum As Long
    Dim objSmpNum As Long, AttrItmNum As Long
    Dim minCate As Long, maxCate As Long
    Dim CateNum As Long
    Dim actSheet As Worksheet
    Set actSheet = ActiveSheet
    Dim rge As Range, r As Range
    Dim DataR As Range, CateR As Range, OutR As Range
    Dim ObjDataR As Range, AttrDataR As Range
    Dim tmpSht As Worksheet
    Dim bAllItemTwoCates As Boolean
    On Error Resume Next
    Set DataR = Range(toXlA1str(sr3tbl.srcDataRef))
    Set CateR = Range(toXlA1str(strCateR))
    If DataR Is Nothing Or CateR Is Nothing Then
        MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        On Error GoTo 0
        Exit Function
    End If
    objSmpNum = 0
    If sr3tbl.bSmpScrYsk Then
        Set ObjDataR = Range(toXlA1str(sr3tbl.objDataRef))
        If ObjDataR Is Nothing Then
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            On Error GoTo 0
            Exit Function
        Else
            objSmpNum = ObjDataR.Rows.Count
        End If
    End If
    smpNum = DataR.Rows.Count
    itmNum = DataR.Columns.Count
    Set rge = DataR(2, 1).Resize(smpNum - 1, itmNum)
    CateNum = 0
    Set tmpSht = rge.Worksheet.Parent.Worksheets.Add
    DataR.Copy tmpSht.Range("A1")
    If sr3tbl.bSmpScrYsk Then
        ObjDataR.Copy tmpSht.Cells(smpNum + 1, 1)
    End If
    newSmpNum = smpNum + 2 + objSmpNum
    CateR.Copy tmpSht.Cells(smpNum + 2 + objSmpNum, 1)
    Set DataR = tmpSht.Cells(1, 1).Resize(smpNum + objSmpNum, itmNum)
    Set CateR = tmpSht.Cells(smpNum + 2 + objSmpNum, 1).Resize(CateR.Rows.Count, CateR.Columns.Count)
    Set OutR = rge.Worksheet.Parent.Worksheets.Add.Range("A1")
    bAllItemTwoCates = True
    For i = 1 To itmNum
        Set r = rge(1, i).Resize(smpNum - 1, 1)
        minCate = WorksheetFunction.min(r)
        maxCate = WorksheetFunction.max(r)
        j = maxCate - minCate + 1
        If j <> 2 And bAllItemTwoCates Then bAllItemTwoCates = False
        CateNum = CateNum + j
    Next i
    If bAllItemTwoCates Then CateNum = itmNum
    actSheet.Activate
    rtn = IS_MTHR_EXPtoDumy_Internal(OutR, DataR, CateR)
    Application.DisplayAlerts = False
    tmpSht.Delete
    Application.DisplayAlerts = True
    Set tmpSht = OutR.Worksheet
    If bAllItemTwoCates Then
        OutR(2, 2).Resize(1, CateNum) = OutR(1, 2).Resize(1, CateNum).Value
    End If
    Set r = OutR(2, 2).Resize(smpNum, CateNum)
    sr3tbl.srcDataRef = toXlRCstr(r.Address) & vbNullChar
    If sr3tbl.bSmpScrYsk Then
        sr3tbl.objDataRef = toXlRCstr(r(smpNum + 1, 1).Resize(objSmpNum, CateNum).Address) & vbNullChar
    End If
    Set tmpSht = OutR.Worksheet
    actSheet.Activate
    If sr3tbl.bSmpLableNo = 0 Then
        Set r = Range(toXlA1str(sr3tbl.srcNameRef))
        smpNum = r.Rows.Count
        Set rge = OutR(1, 1).Resize(smpNum, 1)
        rge.Value = r.Columns(1).Value
        sr3tbl.srcNameRef = toXlRCstr(rge.Address) & vbNullChar
    End If
    If sr3tbl.bSmpScrYsk Then
        Set r = Range(toXlA1str(sr3tbl.objNameRef))
        If Not r Is Nothing Then
            Set rge = OutR(smpNum + 2, 1).Resize(r.Rows.Count, 1)
            rge.Value = r.Columns(1).Value
            sr3tbl.objNameRef = toXlRCstr(rge.Address) & vbNullChar
        End If
    End If
    If sr3tbl.bAttrDisp Then
        Set r = Range(toXlA1str(sr3tbl.AttrRange))
        If Not r Is Nothing Then
            Set rge = OutR(1, 3 + CateNum).Resize(r.Rows.Count, r.Columns.Count)
            rge.Value = r.Value
            sr3tbl.AttrRange = toXlRCstr(rge.Address) & vbNullChar
        End If
    End If
    If sr3tbl.bAttrCateDisp Then
        Set r = Range(toXlA1str(sr3tbl.AttrCateRange))
        If Not r Is Nothing Then
            Set rge = OutR(newSmpNum + 1, 2).Resize(r.Rows.Count, r.Columns.Count)
            rge.Value = r.Value
            sr3tbl.AttrCateRange = toXlRCstr(rge.Address) & vbNullChar
        End If
    End If
    Set Sr3_DataExp = tmpSht
    On Error GoTo 0
End Function


'
'|fffd||fffd||fffd||289||fffd|3|fffd||fffd|
'
'08.12.4 LSQ mdf
Sub IS_MTHR_SR3()
    Dim i As Integer
    'Dim sr3tbl As paratbl  '08.12.4 LSQ cmt
    Dim rtn As Integer
    Dim dlg As DialogSheet, ChkObj As CheckBox
    Dim RgeVar As Range, tmpr As Range, tmpr2 As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim nid As Long
    Dim strCateRef As String
    Dim tmpSht As Worksheet, actSht As Worksheet
    Dim smpNum As Long, itmNum As Long
    
    On Error Resume Next
    
    nid = IIf(isTrialVer, 0, 1)
    
    GVerNoXL = 12                                   'Draw charts as in Excel 2007 to support UNICODE old:   getExcelVerNo()

    ReDim VbaGrp(0)
    
    Set dlg = ThisWorkbook.DialogSheets("DlgSrk3")
    
    Call SR3_setMacro(dlg)  '08.12.4 LSQ add

redisp:
    m_varselect = "0"
    Set actSht = ActiveSheet
    
    Call SaveDlg(dlg)   '08.12.29 LSQ
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        If m_varselect = vbNullString Then
            GoTo redisp
        Else
            sr3tbl.VarSelect = m_varselect & vbNullString
        End If
        sr3tbl.objDataRef = toXlRCstr(Trim(dlg.EditBoxes("objDataRef").Text)) & vbNullChar
        sr3tbl.srcDataRef = toXlRCstr(Trim(dlg.EditBoxes("srcDataRef").Text)) & vbNullChar
        sr3tbl.srcNameRef = toXlRCstr(Trim(dlg.EditBoxes("srcNameRef").Text)) & vbNullChar
        sr3tbl.objNameRef = toXlRCstr(Trim(dlg.EditBoxes("YskSmpName").Text)) & vbNullChar
        Set ChkObj = dlg.CheckBoxes("bAttrDisp")
        sr3tbl.bAttrDisp = IIf(ChkObj = xlOn And ChkObj.Enabled = True, 1, 0) '08.12.4 LSQ add, 08.12.19 LSQ mdf
        sr3tbl.AttrCateRange = toXlRCstr(Trim(dlg.EditBoxes("attrCateRange").Text)) & vbNullChar
        sr3tbl.AttrRange = toXlRCstr(Trim(dlg.EditBoxes("attrRange").Text)) & vbNullChar
        '
        sr3tbl.AxisNum = val(dlg.EditBoxes("axisNum").Text)
        sr3tbl.bExcept = IIf(dlg.OptionButtons("bExcept") = xlOn, 1, 0)
        
        If sr3tbl.bAttrDisp = 1 Then '08.12.4 LSQ
            sr3tbl.bAttrCateDisp = IIf(dlg.CheckBoxes("bAttrCateDisp") = xlOn, 1, 0)
            sr3tbl.bGrpAttrBar = IIf(dlg.CheckBoxes("bGrpAttrBar") = xlOn, 1, 0)
            sr3tbl.bGrpAttrTen = IIf(dlg.CheckBoxes("bGrpAttrTen") = xlOn, 1, 0)
        Else
            sr3tbl.bAttrCateDisp = 0
            sr3tbl.bGrpAttrBar = 0
            sr3tbl.bGrpAttrTen = 0
        End If
        
        sr3tbl.bGrpCateBar = IIf(dlg.CheckBoxes("bGrpCateBar") = xlOn, 1, 0)
        sr3tbl.bGrpCateTen = IIf(dlg.CheckBoxes("bGrpCateTen") = xlOn, 1, 0)
        sr3tbl.bGrpCateDisp = IIf(sr3tbl.bGrpCateTen = 1 And dlg.CheckBoxes("bGrpCateDisp") = xlOn, 1, 0) '08.12.4 LSQ add
        '
        sr3tbl.bSmpLableNo = IIf(dlg.OptionButtons("optSmpNo") = xlOn, 1, 0)
        sr3tbl.bSmpScrDisp = 1 'IIf(dlg.CheckBoxes("bSmpScrDisp") = xlOn, 1, 0)
        sr3tbl.bSmpScrYsk = IIf(dlg.CheckBoxes("bSmpScrYsk") = xlOn, 1, 0)
        '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|_|fffd|O|fffd||fffd||fffd|t
        sr3tbl.bTenGrpDisp = IIf(sr3tbl.bSmpScrDisp = 1 And dlg.CheckBoxes("bTenGrpDisp") = xlOn, 1, 0) '08.12.4 LSQ mdf
        
        sr3tbl.cateSelect = 0
        sr3tbl.flgTenGrpNum = IIf(dlg.OptionButtons("flgTenGrpNum") = xlOn, 1, 2)
        sr3tbl.mojiNum = val(dlg.EditBoxes("mojiNum").Text)

        sr3tbl.Tate_Axis = val(dlg.EditBoxes("Tate_Axis").Text)
        sr3tbl.Yoko_Axis = val(dlg.EditBoxes("Yoko_Axis").Text)
        sr3tbl.bExceptAllZero = IIf(dlg.OptionButtons("bAllZeroExcept") = xlOn, 1, 0)
        sr3tbl.bNegNo = IIf(dlg.OptionButtons("bNegNo") = xlOn, 1, 0)
        If sr3tbl.bNegNo = 0 Then
            Set actSht = ActiveSheet
            sr3tbl.bNegNo = 1
            strCateRef = toXlRCstr(dlg.EditBoxes("edtCateNameRge").Text)
            smpNum = Range(toXlA1str(sr3tbl.srcDataRef)).Rows.Count
            itmNum = Range(toXlA1str(sr3tbl.srcDataRef)).Columns.Count
            Set tmpSht = Sr3_DataExp(sr3tbl, strCateRef)
            If tmpSht Is Nothing Then GoTo redisp
        Else
            Set tmpSht = Nothing
        End If
        'check; 08.12.4 LSQ add
        If chkSr3Data() = False Then
            GoTo redisp
        End If
        
        sr3tbl.bLink = 0
        
        Call changeToSSDir
        tmpSht.Activate                     'ActiveWorkbook.ActiveSheet.Select
        
        rtn = sr3_dlg2(nid, sr3tbl, CInt(GVerNoXL), VbaGrp(), AddressOf ReallocGrp)
        If rtn = 0 And GVerNoXL >= 12 Then
            ActiveSheet.Columns(256).ClearContents
            Application.ScreenUpdating = False
            For i = 1 To UBound(VbaGrp)
                If VbaGrp(i).Type <> 0 Then
                    If ConvToBSTR(VbaGrp(i)) = False Then
                        MsgBox ERR_COMMC_GENERAL
                        Exit Sub
                    End If
                    If VbaGrp(i).Type = 1 Then
                        Application.Run GxlaBkGraph2 & "!DrawSr3CateBar", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    ElseIf VbaGrp(i).Type = 2 Then
                        Application.Run GxlaBkGraph2 & "!DrawSr3CateScore", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    ElseIf VbaGrp(i).Type = 3 Then
                        Application.Run GxlaBkGraph2 & "!DrawSr3SmpScore1", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    ElseIf VbaGrp(i).Type = 4 Then
                        Application.Run GxlaBkGraph2 & "!DrawSr3SmpScore2", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    ElseIf VbaGrp(i).Type = 5 Then
                        VbaGrp(i).grpPara = VbaGrp(i).grpPara & "&flgFrom=2"
                        Application.Run GxlaBkGraph2 & "!DrawSr3AttrBar", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    ElseIf VbaGrp(i).Type = 6 Then
                        VbaGrp(i).grpPara = VbaGrp(i).grpPara & "&flgFrom=2"
                        Application.Run GxlaBkGraph2 & "!DrawSr3AttrScore", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    End If
                End If
            Next i
            Application.ScreenUpdating = True
        End If
        If Not tmpSht Is Nothing Then
            Application.DisplayAlerts = False
            tmpSht.Delete
            Application.DisplayAlerts = True
        End If
        Call Comm_CutDataLink(ActiveWorkbook, GxlaBkGraph2)
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub


'
'=== EOF ===

Attribute VB_Name = "MdlSdskd"
'=======================================================
' |fffd|o|fffd||38e||693|x|fffd|@
'
' 2009.03 WZH
'=======================================================
Option Private Module
Option Explicit

Type SdskdPara
    RgeVar As String * 256
    AxisNum As Long
    bAllZeroFlg As Long
    bBarChart As Long
    bSameChart As Long           '
    bOtherChart As Long            '
    Yoko_Axis As Long             ' 1<=Yoko_Axis<=AxisNum;
    Tate_Axis As Long             ' 1<=Tate_Axis<=AxisNum;
    bCateNameDisp As Long     '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||243|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O
    mojiNum As Long               ' |fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||241|A|fffd|_|fffd||fffd||fffd||302||fffd||fffd||fffd||a347||fffd||315||fffd||fffd||fffd||fffd||fffd|
End Type

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private Sdskdtbl As SdskdPara
'Dll old name "K_SRK3.dll", 11.8.7 LSQ
#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function sdskd_dlg2 Lib "MTHR_E_SR3_64.dll" (Sdskdtbl As SdskdPara, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Integer
    #Else
        Private Declare Function sdskd_dlg2 Lib "MTHR_E_SR3_64.dll" (Sdskdtbl As SdskdPara, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As Long) As Integer
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function sdskd_dlg2 Lib "MTHR_E_SR3.dll" (Sdskdtbl As SdskdPara, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Integer
    #Else
        Private Declare Function sdskd_dlg2 Lib "MTHR_E_SR3.dll" (Sdskdtbl As SdskdPara, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As Long) As Integer
    #End If
#End If

Function ReallocGrp(ByVal n As Long) As Long
    ReDim VbaGrp(1 To n)
    Call InitGrpAry(VbaGrp)
    ReallocGrp = 0
End Function

Private Function handleSdskdData() As Worksheet
    Dim i As Long, j As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim RgeSmpName As Range, RgeCateName As Range
    Dim tmpSht As Worksheet
    Dim sdskdobj As Variant, sdskdvar As Variant, sdskdcate As Variant
    Dim cateNameRow As Long, smpNum As Long
    Dim msgStr As String
    
    On Error Resume Next
    Set RgeVar = Range(Sdskdtbl.RgeVar)
    sdskdvar = RgeVar.Value
    
    'check; 08.12.4 LSQ add -- bgn --
    msgStr = ""
    If RgeVar Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (Sdskdtbl.bSameChart = 1 Or Sdskdtbl.bOtherChart = 1) And (Sdskdtbl.Tate_Axis < 1 Or Sdskdtbl.Yoko_Axis < 1) Then
        msgStr = "|fffd||fffd||fffd|i|fffd|^|fffd|e|fffd||fffd||fffd|A|fffd||fffd||fffd|R|fffd||fffd||fffd|j|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set tmpSht = Nothing
        Exit Function
    End If
    
    Set tmpSht = RgeVar.Worksheet.Parent.Sheets.Add
    Set rge = tmpSht.Range("$A$1")
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To RgeVar.Columns.Count
            rge(i, j) = RgeVar(i, j)
        Next j
    Next i
    Sdskdtbl.RgeVar = Range(rge(1, 1), rge(RgeVar.Rows.Count, RgeVar.Columns.Count)).Address & vbNullChar

    Set rge = Range(Sdskdtbl.RgeVar)
    smpNum = rge.Rows.Count
       
    Set rge = tmpSht.Range("$A$1")
    
    Sdskdtbl.RgeVar = Range(rge(1, 1), rge(smpNum, RgeVar.Columns.Count)).Address & vbNullChar
    
    Set handleSdskdData = tmpSht
    On Error GoTo 0
End Function

'10.07.29 DZH add
Private Sub Sdskd_setMacro(ByVal dlg As DialogSheet)
    dlg.CheckBoxes("chkSameChart").OnAction = "SDSKD_SetChart"
    dlg.CheckBoxes("chkOtherChart").OnAction = "SDSKD_SetChart"
    dlg.CheckBoxes("chkCateName").OnAction = "SDSKD_CateName"
    
End Sub

'10.07.29 DZH add
'open/close graph setting option
Private Sub SDSKD_SetChart()
    Dim dlg As DialogSheet
    Dim bOn As Boolean, bSame As Boolean, bOther As Boolean
    
    Set dlg = ThisWorkbook.DialogSheets("DlgSdskd")
    bSame = (dlg.CheckBoxes("chkSameChart").Value = xlOn)
    bOther = (dlg.CheckBoxes("chkOtherChart").Value = xlOn)
    
    bOn = (bSame Or bOther)
    dlg.EditBoxes("Tate_Axis").Enabled = bOn
    dlg.EditBoxes("Yoko_Axis").Enabled = bOn
    dlg.CheckBoxes("chkCateName").Enabled = bOn
    
    dlg.EditBoxes("mojiNum").Enabled = IIf(bOn And dlg.CheckBoxes("chkCateName").Value = xlOn, xlOn, False)
  
    If bSame Then Call CommSetEditBox_byChk("DlgSdskd", "chkSameChart", "Yoko_Axis")
    If bOther Then Call CommSetEditBox_byChk("DlgSdskd", "chkOtherChart", "Yoko_Axis")

End Sub

'10.07.29 DZH add
'open/close category name option and set category name length
Private Sub SDSKD_CateName()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    
    Set dlg = ThisWorkbook.DialogSheets("DlgSdskd")
    
    bOn = (dlg.CheckBoxes("chkCateName").Value = xlOn)
    dlg.EditBoxes("mojiNum").Enabled = bOn
    
    Call CommSetEditBox_byChk("DlgSdskd", "chkCateName", "mojiNum")
End Sub

Sub IS_MTHR_CORR()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet, groupArry(1 To 2) As Shape
    Dim tmpSht As Worksheet
    Dim RgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    
    On Error Resume Next
    
    GVerNoXL = 12 '10.7.30 LSQ : use Excel2007 Graph; old : getExcelVerNo()
    ReDim VbaGrp(0)
    
    Set dlg = ThisWorkbook.DialogSheets("DlgSdskd")
    
    Call Sdskd_setMacro(dlg)        '10.07.29 DZH add
    
    Call SDSKD_SetChart     '10.07.29 DZH add
    Call SDSKD_CateName     '10.07.29 DZH add
   
redisp:
   
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Sdskdtbl.RgeVar = (dlg.EditBoxes("edtDataRef").Text) & vbNullChar
        Sdskdtbl.AxisNum = val(dlg.EditBoxes("edtAxisNum").Text)
        Sdskdtbl.bAllZeroFlg = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 0)
        Sdskdtbl.bCateNameDisp = IIf(dlg.CheckBoxes("chkCateName").Value = xlOn, 1, 0)
        Sdskdtbl.bBarChart = 1 ' IIf(dlg.CheckBoxes("chkBarChart").Value = xlOn, 1, 0)
        Sdskdtbl.bSameChart = IIf(dlg.CheckBoxes("chkSameChart").Value = xlOn, 1, 0)
        Sdskdtbl.bOtherChart = IIf(dlg.CheckBoxes("chkOtherChart").Value = xlOn, 1, 0)
        Sdskdtbl.Tate_Axis = val(dlg.EditBoxes("Tate_Axis").Text)
        Sdskdtbl.Yoko_Axis = val(dlg.EditBoxes("Yoko_Axis").Text)
        Sdskdtbl.mojiNum = val(dlg.EditBoxes("mojiNum").Text)
        
        Set tmpSht = handleSdskdData

        If tmpSht Is Nothing Then
            GoTo redisp
        End If

        Sdskdtbl.RgeVar = toXlRCstr(Sdskdtbl.RgeVar) & vbNullChar
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = sdskd_dlg2(Sdskdtbl, CInt(GVerNoXL), VbaGrp(), AddressOf ReallocGrp)
        If rtn = 0 And GVerNoXL >= 12 Then
            For i = 1 To UBound(VbaGrp)
                If VbaGrp(i).Type <> 0 Then
                    If ConvToBSTR(VbaGrp(i)) = False Then
                        MsgBox ERR_COMMC_GENERAL
                        Exit Sub
                    End If
                    If VbaGrp(i).Type = 1 Then
                        Application.Run GxlaBkGraph2 & "!DrawSdsCateBar", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    ElseIf VbaGrp(i).Type = 2 Then
                        Application.Run GxlaBkGraph2 & "!DrawSdsCateScore", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    End If
                End If
            Next i
        End If
        Call Comm_CutDataLink(ActiveWorkbook, GxlaBkGraph2)
        
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub

'=== EOF ===

Attribute VB_Name = "MdlSr1"
'=======================================================
' SR1 for iSTAT_YSK Ver1.0
'
' 2011.11 WZH
'=======================================================

Option Private Module
Option Explicit

Private Type Srk1Para
    RgeInfo As String * 256
    OutSheet As String * 256
    RgeObj As String * 256
    RgeVar As String * 256
    RgeVarKind As String * 256
    rgeClass As String * 256
    RgeSmpName As String * 256
    RgeCateName As String * 256
    RgeYskData As String * 256          'only used for proceeding data
    RgeYskName As String * 256          'only used for proceeding data
    bExcept As Long
    bExcept_n0 As Long
    bYsk As Long                        'only used for proceeding data
    bExtraInfo As Long
    nVarSelMethod As Long
    bSmpName As Long
    bNum2Class As Long
    bCateName As Long
    bPointGrp As Long
    nFuncNo As Long
End Type

Private Type Srk1Para_Extra
    bTimeLag As Long
    RgeTimeLag As String * 256          'only used for procedding data
    nTimeStyle As Long
    nYear As Long
    nMonth As Long
End Type

Private Const X_MAX As Integer = 30
Private Const CATE_MAX As Integer = 200

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private m_bvarselected As Boolean
Private sr1tbl As Srk1Para
Private sr1Extra As Srk1Para_Extra

#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function sr1_dlg Lib "MTHR_A_ISTA_64.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #Else
        Private Declare Function sr1_dlg Lib "MTHR_A_ISTA_64.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function sr1_dlg Lib "MTHR_A_ISTA.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #Else
        Private Declare Function sr1_dlg Lib "MTHR_A_ISTA.dll" (ByVal nid As Long, sr1tbl As Srk1Para) As Integer
    #End If
#End If

Private Function CountUniqueValues(InputRange As Range) As Long
    Dim cl As Range, UniqueValues As New Collection
    Dim rowNum As Long, colNum As Long
    Dim i As Long, j As Long
    Dim vdata As Variant
    On Error Resume Next
    rowNum = InputRange.Rows.Count
    colNum = InputRange.Columns.Count
    vdata = InputRange.Value
    For i = 1 To rowNum
        For j = 1 To colNum
            UniqueValues.Add vdata(i, j), CStr(vdata(i, j))
        Next j
    Next i
    On Error GoTo 0
    CountUniqueValues = UniqueValues.Count
End Function

'RgeX : |fffd|K|fffd||fffd||fffd|l|fffd|w|fffd||fffd||348||fffd| (formatted)
'RgeCateNum : Item category number (0=numeric item)
'outBgn : category name output begin cell
'
'11.8.21 LSQ
Private Sub nu_makeCateName_forNumItem(ByVal itemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or itemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 1 To itemNum
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            dxHalf = (x2 - x1) / 2
            
            outBgn(1, i) = "|fffd|`" & (x1 + dxHalf)
            For j = 2 To cateN - 1
                outBgn(j, i) = (x1 + dxHalf) & "|fffd|`" & (x2 + dxHalf)
                'next
                x1 = x1 + 2 * dxHalf
                x2 = x2 + 2 * dxHalf
            Next j
            outBgn(cateN, i) = (x2 - dxHalf) & "|fffd|`"
        End If
nextItem:
    Next i
        
End Sub

'2011.12.04 rewritten
Private Sub makeCateName_forNumItem(ByVal itemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, k As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    Dim sr1VarSel As Variant
    Dim nItemNum As Long
    
    If RgeX Is Nothing Or itemNum < 1 Then Exit Sub    'no number item categorized
    
    If m_varselect <> "0" Then
        sr1VarSel = Split(m_varselect, ",")
    Else
        ReDim sr1VarSel(0 To itemNum) As Long
        sr1VarSel(0) = itemNum
        For i = 1 To itemNum
            sr1VarSel(i) = i - 1
        Next i
    End If
    
    nItemNum = sr1VarSel(0)
    
    For i = 1 To nItemNum
        j = sr1VarSel(i) + 1
        cateN = RgeCateNum(1, j)
        If cateN = 0 Then
            cateN = RgeX(1, j)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, j)
            x2 = RgeX(3, j)
            
            outBgn(1, i) = "|fffd|`" & x1
            For k = 2 To cateN
                outBgn(k, i) = x1 & "|fffd|`" & x2
                'next
                x1 = RgeX(k + 1, j)
                x2 = RgeX(k + 2, j)
            Next k
        End If
nextItem:
    Next i
        
End Sub
'end rewritten

Private Function next_Year_Month(ByVal nTimeStyle As Long, ByRef year As Long, ByRef month As Long) As Boolean
    next_Year_Month = False
    If nTimeStyle = 1 Then
        month = month + 1
    ElseIf nTimeStyle = 2 Then
        month = month + 3
    ElseIf nTimeStyle = 3 Then
        month = month + 12
    ElseIf nTimeStyle = 4 Then
        month = month + 1
    End If
    If month > 12 And nTimeStyle < 4 Or nTimeStyle = 3 Then
        month = month - 12
        year = year + 1
        next_Year_Month = True
    End If
End Function

Private Function handleSr1Data() As Worksheet
    Dim i As Long, j As Long, k As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim rgeClass As Range, RgeVarKind As Range
    Dim RgeSmpName As Range, RgeCateName As Range
    Dim RgeYskData As Range, RgeYskName As Range
    Dim RgeTimeLag As Range
    Dim tmpSht As Worksheet
    Dim sr1obj As Variant, sr1var As Variant, sr1cate As Variant, sr1varkind As Variant, varkind() As Long
    Dim sr1VarSel As Variant
    Dim varTimeLag As Variant
    Dim cateNameRow As Long, varKindRow As Long, classRow As Long
    Dim CateNum As Long, smpNum As Long, itemNum As Long, objSmpNum As Long
    Dim tmpv As Long, totalCateNum As Long
    Dim msgStr As String
    Dim bgnCelCateNm As Range
    Dim nYear As Long, nMonth As Long
    Dim strTime As String
    
    On Error Resume Next
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    Set RgeVarKind = Range(sr1tbl.RgeVarKind)
    
    '2012.10.22 added
    itemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    
    If RgeVarKind Is Nothing Then
        Set tmpSht = SbkThis.Sheets("TmpSheet")
        tmpSht.Cells.ClearContents
        Set rge = tmpSht.Range("B1")
        For i = 1 To itemNum
            rge(1, i) = 0
        Next i
        Set RgeVarKind = rge.Resize(1, itemNum)
    End If
    'end add
    
    If sr1tbl.bNum2Class = 1 Then
        Set rgeClass = Range(sr1tbl.rgeClass)
    End If
    If sr1tbl.bCateName = 1 Then
        Set RgeCateName = Range(sr1tbl.RgeCateName)
    End If
    If sr1tbl.bYsk = 1 Then
        Set RgeYskData = Range(sr1tbl.RgeYskData)
        Set RgeYskName = Range(sr1tbl.RgeYskName)
    End If
    If sr1Extra.bTimeLag = 1 Then
        Set RgeTimeLag = Range(sr1Extra.RgeTimeLag)
    End If
    If sr1tbl.bSmpName = 1 Then
        Set RgeSmpName = Range(sr1tbl.RgeSmpName)
    End If
    cateNameRow = RgeObj.Rows.Count
    If cateNameRow < RgeVar.Rows.Count Then
        cateNameRow = RgeVar.Rows.Count
    End If
    If cateNameRow < RgeSmpName.Rows.Count Then
        cateNameRow = RgeSmpName.Rows.Count
    End If
    cateNameRow = cateNameRow + 6
    sr1obj = RgeObj.Value
    sr1var = RgeVar.Value
    sr1varkind = RgeVarKind.Value
    CateNum = Application.WorksheetFunction.max(sr1varkind)
    If CateNum = 0 Then CateNum = 1
    classRow = cateNameRow + CateNum + 2
    
    itemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    
    ReDim varkind(1 To 1, 1 To itemNum)
    If itemNum = 1 Then
        varkind(1, 1) = sr1varkind
    Else
        For i = 1 To itemNum
            varkind(1, i) = sr1varkind(1, i)
        Next i
    End If
    
    If smpNum <> RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If itemNum > X_MAX Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If sr1Extra.bTimeLag = 1 Then
        If RgeTimeLag Is Nothing Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        If RgeTimeLag.Columns.Count <> itemNum Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        varTimeLag = RgeTimeLag.Value
        For i = 1 To itemNum
            If varkind(1, i) = 0 Then
                j = val(varTimeLag(1, i))
                If Abs(j) >= smpNum Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = j
                End If
            Else
                If Not IsEmpty(RgeTimeLag(1, i)) Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = 0
                End If
            End If
        Next i
    End If
    
    #If 0 Then
    If sr1Extra.nTimeStyle <> 4 Then
        If sr1Extra.nYear < 1900 Or sr1Extra.nYear > 3000 Then
            MsgBox "Invalid year!"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        If sr1Extra.nTimeStyle <> 3 Then
            If sr1Extra.nMonth < 1 Or sr1Extra.nMonth > 12 Then
                MsgBox "Invalid month!"
                Set handleSr1Data = Nothing
                Exit Function
            End If
        End If
    End If
    #End If
    
    Set rge = RgeVar(2, 1).Resize(smpNum - 1, itemNum)
    For i = 1 To itemNum
        If varkind(1, i) > 0 Then
            If Application.WorksheetFunction.max(rge.Columns(i)) <> varkind(1, i) Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                Set handleSr1Data = Nothing
                Exit Function
            End If
            If sr1tbl.bExcept_n0 = 0 Then
                If CountUniqueValues(rge.Columns(i)) <> varkind(1, i) Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||fffd|0|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
            End If
        End If
    Next i
    
    msgStr = ""
    If RgeObj Is Nothing Then
        msgStr = "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVar Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVarKind Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bNum2Class = 1 And rgeClass Is Nothing) Then
        msgStr = "|fffd||293|I|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bCateName = 1 And RgeCateName Is Nothing) Then
        msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bSmpName = 1 And RgeSmpName Is Nothing) Then
        msgStr = "|fffd||5368e||496||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    'ElseIf CateNum < 2 Then
    '    msgStr = "|fffd||fffd||fffd||343|f|fffd|[|fffd|^|fffd||355|s|fffd||fffd|"
    ElseIf RgeVar.Columns.Count <> RgeVarKind.Columns.Count Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf Not RgeCateName Is Nothing Then
        If (CateNum <> RgeCateName.Rows.Count Or RgeVar.Columns.Count <> RgeCateName.Columns.Count) Then
            msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        End If
    ElseIf sr1tbl.bYsk = 1 And RgeYskData Is Nothing Then
        msgStr = "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If

    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If m_varselect <> "0" Then
        sr1VarSel = Split(m_varselect, ",")
    Else
        ReDim sr1VarSel(0 To RgeVar.Columns.Count) As Long
        sr1VarSel(0) = RgeVar.Columns.Count
        For i = 1 To RgeVar.Columns.Count
            sr1VarSel(i) = i - 1
        Next i
    End If
    
    itemNum = sr1VarSel(0)
    
    totalCateNum = 0
    If sr1tbl.bNum2Class = 1 Then
        If rgeClass.Rows.Count > 31 Then
            MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
            Set handleSr1Data = Nothing
            Exit Function
        Else
            For i = 1 To itemNum
                tmpv = rgeClass(1, sr1VarSel(i) + 1)
                totalCateNum = totalCateNum + tmpv
                If tmpv > 30 Then
                    MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
                'If varkind(1, sr1VarSel(i) + 1) = 0 And tmpv < 1 Then
                '    MsgBox "|fffd||fffd||fffd||28d||fffd||fffd||682||315||fffd||fffd||789||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                '    Set handleSr1Data = Nothing
                '    Exit Function
                'End If
                If tmpv > CateNum Then CateNum = tmpv
            Next i
        End If
    End If
    
    For i = 1 To itemNum
        tmpv = varkind(1, sr1VarSel(i) + 1)
        If tmpv < 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        totalCateNum = totalCateNum + tmpv
    Next i
    
    If totalCateNum > CATE_MAX Then
        MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: |fffd||fffd||fffd|vMAX" & CATE_MAX
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If sr1tbl.bExcept = 0 Then
        Set rge = RgeVar.Offset(1, 0).Resize(smpNum, itemNum)
        For i = 1 To itemNum
            k = sr1VarSel(i) + 1
            sr1var = rge.Columns(k).Value
            If WorksheetFunction.Count(sr1var) <> smpNum - 1 Then
                Set handleSr1Data = Nothing
                Exit Function
            End If
        Next i
    End If
    
    If sr1tbl.bYsk = 1 Then '12.8.27 LSQ mdf
        Dim tmpi As Long
        tmpi = RgeYskData.Rows.Count
        
        cateNameRow = cateNameRow + tmpi
        smpNum = smpNum + tmpi
        classRow = classRow + tmpi
    End If
    
    Set tmpSht = SbkThis.Sheets("Sr1Data") 'RgeVar.Worksheet.Parent.Sheets.Add
    tmpSht.Cells.ClearContents
    Set rge = tmpSht.Range("$B$1")
    
    #If 0 Then
    nYear = sr1Extra.nYear
    nMonth = sr1Extra.nMonth
    
    For i = 1 To smpNum 'cateNameRow - 6 - 1
        If sr1Extra.nTimeStyle = 4 Then
            rge(i + 1, 1) = i
        ElseIf sr1Extra.nTimeStyle = 3 Then
            rge(i + 1, 1) = nYear + i - 1
        Else
            If i = 1 Then
                rge(i + 1, 1) = nYear & " " & nMonth
            Else
                If next_Year_Month(sr1Extra.nTimeStyle, nYear, nMonth) Then
                    rge(i + 1, 1) = nYear & " " & nMonth
                Else
                    rge(i + 1, 1) = nMonth
                End If
            End If
        End If
    Next i
    #Else
    If Not RgeSmpName Is Nothing Then
        RgeSmpName.Copy
        rge(2, 1).PasteSpecial xlValues
    Else
        For i = 1 To cateNameRow - 6 - 1
            rge(i + 1, 1) = i
        Next i
    End If
    #End If
    
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To itemNum
            k = sr1VarSel(j) + 1
            If i > 1 And sr1Extra.bTimeLag = 1 Then
                If varTimeLag(1, k) >= 0 Then
                    If i - 1 <= varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                Else
                    If i - 1 > smpNum + varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                End If
            Else
                rge(i, j + 2) = RgeVar(i, k)
            End If
        Next j
    Next i
    tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)) = sr1obj
    
    If sr1tbl.bYsk = 1 Then
        'For i = 1 To RgeYskData.Rows.Count
        '    For j = 1 To ItemNum
        '        rge(RgeObj.Rows.Count + i, j + 2) = RgeYskData(i, sr1VarSel(j) + 1)
        '    Next j
        'Next i
        If Not RgeYskName Is Nothing Then
            RgeYskName.Copy
            rge(RgeObj.Rows.Count + 1, 1).PasteSpecial xlValues
        Else
            For i = 1 To RgeYskData.Rows.Count
                rge(RgeObj.Rows.Count + i, 1) = i + smpNum
            Next i
        End If
        For i = 1 To RgeYskData.Rows.Count
            For j = 1 To itemNum
                rge(RgeObj.Rows.Count + i, j + 2) = RgeYskData(i, sr1VarSel(j) + 1)
            Next j
        Next i
    End If
    
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, itemNum + 2)).Address & vbNullChar
        
    If Not RgeCateName Is Nothing Then
        CateNum = RgeCateName.Rows.Count
        sr1cate = RgeCateName.Value
        For i = 1 To itemNum
            For j = 1 To CateNum
                If Trim(sr1cate(j, sr1VarSel(i) + 1)) = "" Then
                    rge(cateNameRow + j - 1, i) = "C-" & j
                Else
                    rge(cateNameRow + j - 1, i) = sr1cate(j, sr1VarSel(i) + 1)
                End If
            Next j
        Next i
    Else
        For i = 1 To itemNum
            For j = 1 To CateNum
                rge(cateNameRow + j - 1, i) = "C-" & j
            Next j
        Next i
    End If
    sr1tbl.bCateName = 1
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(RgeSmpName.Rows.Count + 1, 1)).Address & vbNullChar
    
    Set rge = tmpSht.Range(sr1tbl.RgeVar)
    smpNum = rge.Rows.Count
    objSmpNum = RgeObj.Rows.Count
    For i = rge.Rows.Count To 2 Step -1
        sr1var = rge.Rows(i).Value
        If Application.WorksheetFunction.Count(sr1var) <> rge.Columns.Count Or (i <= objSmpNum And Application.WorksheetFunction.Count(RgeObj(i, 1)) <> 1) Then
            If sr1tbl.bExcept = 1 Then
                tmpSht.Rows(i).Delete
                smpNum = smpNum - 1
                cateNameRow = cateNameRow - 1
                objSmpNum = objSmpNum - 1
            Else
                Set handleSr1Data = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = tmpSht.Range("$B$1")
    
    'sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(objSmpNum, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, itemNum + 2)).Address & vbNullChar
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Address & vbNullChar
    
    tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Copy SbkThis.Sheets("Sr1Data").Range("A2")
    For i = 1 To smpNum
        rge(i + 1, 1) = i
    Next i
    
    'Category Name Copy (Category Name for numeric item may be adjusted, if it is categorized)
    Set bgnCelCateNm = SbkThis.Sheets("Sr1Info").Range("B50")
    tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Copy bgnCelCateNm
    
    Call makeCateName_forNumItem(itemNum, rgeClass, RgeVarKind, bgnCelCateNm)  '11.8.21 LSQ
    
    'Item Type
    For i = 1 To itemNum
        rge(i + 1, itemNum + 4) = varkind(1, sr1VarSel(i) + 1)
    Next i
    
    sr1tbl.RgeVarKind = rge(2, itemNum + 4).Resize(itemNum, 1).Address & vbNullChar
    
    'numeric item categorized (|fffd|K|fffd||fffd||fffd|l)
    If Not rgeClass Is Nothing Then
        For i = 1 To itemNum
            rgeClass.Columns(sr1VarSel(i) + 1).Copy rge(classRow, i)
            rge(classRow, i) = CLng(rgeClass.Columns(sr1VarSel(i) + 1).Cells(1, 1))
        Next i
        sr1tbl.rgeClass = rge(classRow, 1).Resize(rgeClass.Rows.Count, itemNum).Address & vbNullChar
    End If
    
    Set handleSr1Data = tmpSht
    On Error GoTo 0
End Function

Private Function checkSr1Data() As Boolean
    Dim RgeObj As Range, RgeVar As Range
    
    On Error Resume Next
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    If RgeObj.Rows.Count > RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        checkSr1Data = False
        Exit Function
    End If
    checkSr1Data = True
End Function

Private Sub SaveBasicInfo(ByVal revisedCateNum As Variant, ByVal NewCates As Variant)
    Dim i As Long, j As Long
    Dim rge As Range, RgeObj As Range, RgeVar As Range, rgeKind As Range
    Set rge = SbkThis.Worksheets("Sr1Info").Range("A1")
    Set RgeObj = Range(toXlA1str(sr1tbl.RgeObj))
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    Set rgeKind = Range(toXlA1str(sr1tbl.RgeVarKind))
    rge.Offset(0, 1) = RgeObj(1, 1)
    rge.Offset(0, 2) = 1
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(7, i) = RgeVar(1, i)
        rge.Offset(8, i + 40) = rgeKind(i, 1)
        rge.Offset(9, i + 40) = NewCates(i)
    Next i
    Set rge = SbkThis.Worksheets("Sr1Data").Range("A1")
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(i, RgeVar.Columns.Count + 4) = revisedCateNum(i)
    Next i
End Sub

Sub IS_MTHR_SR1()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet, outSht As Worksheet, outShtMid As Worksheet
    Dim RgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    Dim edtObj As EditBox
    Dim bOutMid As Boolean, strBkName As String, bkName As String
    Dim actSht As Worksheet
    Dim nid As Long
    
    'for Debug use (11.8.19 LSQ add)
#If 0 Then
    Call SbkInit
#End If

    On Error Resume Next
    
    Set actSht = ActiveSheet

    ReDim VbaGrp(0)
    
    m_varselect = getDefaultVarSelect(FUNC_NO.FUNC_SR1)
    If bRangeChanged_Frm(FUNC_NO.FUNC_SR1, frmSr1.RgeVar.Text) Then m_varselect = "0"
redisp:
    m_bvarselected = False
    
    frmSr1.bvarselected = m_bvarselected
    frmSr1.VarSelect = m_varselect
    frmSr1.Show
    If Not frmSr1.bOK Then Exit Sub
    
    m_bvarselected = frmSr1.bvarselected
    m_varselect = frmSr1.VarSelect
    
    Call setDefaultAddress(FUNC_NO.FUNC_SR1, getCurrentAddress_Frm(frmSr1.RgeVar.Text))
    Call setDefaultVarSelect(FUNC_NO.FUNC_SR1, m_varselect)
    
    sr1tbl.RgeObj = Trim(frmSr1.RgeObj.Text) & vbNullChar
    sr1tbl.RgeVar = Trim(frmSr1.RgeVar.Text) & vbNullChar
    sr1tbl.RgeVarKind = Trim(frmSr1.RgeVarKind.Text) & vbNullChar
    sr1tbl.bExcept = IIf(frmSr1.optExcept.Value = True, 1, 0)
    sr1tbl.nVarSelMethod = IIf(frmSr1.optVarNone.Value = True, 1, 2)
    sr1tbl.bSmpName = IIf(frmSr1.optSmpNo.Value = True, 0, 1)
    sr1tbl.bYsk = IIf(frmSr1.chkYsk.Value = True, 1, 0)
    If sr1tbl.bYsk = 1 Then
        sr1tbl.RgeYskData = Trim(frmSr1.RgeYskData) & vbNullChar
        sr1tbl.RgeYskName = Trim(frmSr1.RgeYskName) & vbNullChar
    End If
    sr1tbl.bExtraInfo = IIf(frmSr1.optExtraInfoYes.Value = True, 1, 0)
    sr1tbl.bNum2Class = 0 'IIf(frmSr1.chkNum2Cate.Value = True, 1, 0)
    'If sr1tbl.bNum2Class = 1 Then
    '    sr1tbl.rgeClass = Trim(frmSr1.RgeNumCate.text) & vbNullChar
    'End If
    If sr1tbl.bSmpName = 1 Then
        sr1tbl.RgeSmpName = Trim(frmSr1.RgeSmpName.Text) & vbNullChar
    End If
    sr1tbl.bCateName = IIf(frmSr1.chkCateName.Value = True, 1, 0)
    If sr1tbl.bCateName = 1 Then
        sr1tbl.RgeCateName = Trim(frmSr1.RgeCateName.Text) & vbNullChar
    End If
    sr1tbl.bPointGrp = 1 'IIf(frmBasicInfo.chkOutGrp.Value = True, 1, 0)
    sr1tbl.bExcept_n0 = IIf(frmSr1.optExcept_n0.Value = True, 1, 0)
    sr1Extra.bTimeLag = 0 'IIf(frmSr1.chkTimeLag.Value = True, 1, 0)
    'If sr1Extra.bTimeLag = 1 Then
    '    sr1Extra.RgeTimeLag = Trim(frmSr1.RgeTimeLag.text) & vbNullChar
    'End If
    'sr1Extra.nTimeStyle = IIf(frmExtSr1.optMonth.Value = True, 1, _
    '                    IIf(frmExtSr1.optQuarter.Value = True, 2, _
    '                    IIf(frmExtSr1.optYear.Value = True, 3, 4)))
    'sr1Extra.nYear = val(frmExtSr1.txtYear.Text)
    'sr1Extra.nMonth = val(frmExtSr1.txtMonth.Text)
    
    Set tmpSht = handleSr1Data
    
    If tmpSht Is Nothing Then
        GoTo redisp
    End If
    
    #If 0 Then
    'output sheet
    strBkName = "[" & ActiveWorkbook.name & "]"
    '
    
    Set outSht = ActiveWorkbook.Worksheets.Add
    sr1tbl.OutSheet = strBkName & outSht.name & "!R50C1"
    #End If
    
    'data sheet
    tmpSht.Activate
    
    Dim revisedCateNum() As Long, NewCates() As String
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    ReDim revisedCateNum(1 To RgeVar.Columns.Count + 1)
    ReDim NewCates(1 To RgeVar.Columns.Count + 1)
    Call Remove0Cate(sr1tbl.RgeVarKind, sr1tbl.RgeVar, sr1tbl.RgeCateName, sr1tbl.bExcept_n0 = 0, revisedCateNum, NewCates)
    
    If Not checkSr1Data Then
        GoTo redisp
    End If
    
    SaveBasicInfo revisedCateNum, NewCates
    
    bkName = "[" & SbkThis.name & "]"
    sr1tbl.RgeInfo = bkName & "Sr1Info!R1C1" & vbNullChar
    sr1tbl.OutSheet = bkName & "Sr1Result!R1C1" & vbNullChar
    sr1tbl.RgeObj = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeObj) & vbNullChar
    sr1tbl.RgeVar = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVar) & vbNullChar
    sr1tbl.RgeSmpName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeSmpName) & vbNullChar
    sr1tbl.RgeCateName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeCateName) & vbNullChar
    sr1tbl.RgeVarKind = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVarKind) & vbNullChar
    sr1tbl.rgeClass = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.rgeClass) & vbNullChar
    sr1tbl.OutSheet = Trim(sr1tbl.OutSheet) & vbNullChar
    
    sr1tbl.nFuncNo = FUNC_NO.FUNC_SR1
    
    SbkThis.Sheets("Sr1Result").Cells.Clear    'save calc results from DLL
    
    nid = IIf(isTrialVer, 0, 1)
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = sr1_dlg(nid, sr1tbl)  'do calc
    actSht.Activate
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        Exit Sub
    End If
    
    If rtn = 0 Then 'do output
        Sr1_Output FUNC_NO.FUNC_SR1, actSht.Parent.Sheets.Add, sr1tbl.bPointGrp, True, True
    End If
    On Error GoTo 0
End Sub

Public Sub Sr1DrawDotPlot(ByVal strRgeClass As String, ByVal strRgeData As String, _
                                    ByVal strRgeOut As String, ByVal crossAt As Double)
    Application.Run GxlaBkGraph1 & "!DrawDotPlot_A", toXlA1str(strRgeClass), toXlA1str(strRgeData), _
                                            toXlA1str(strRgeOut), crossAt
End Sub
                          
'=== EOF ===



Attribute VB_Name = "MdlSr2"
'=======================================================
' SR2 for iSTAT_MTHR Ver1.0
'
' 2011.8 WZH LSQ
'=======================================================

Option Private Module
Option Explicit

Private Type Srk2Para
    RgeInfo As String * 256
    OutSheet As String * 256
    RgeObj As String * 256
    RgeVar As String * 256
    RgeVarKind As String * 256
    rgeClass As String * 256
    RgeSmpName As String * 256
    RgeCateName As String * 256
    RgeYskData As String * 256          'only used for proceeding data
    RgeYskName As String * 256          'only used for proceeding data
    grpnum As Long
    bExcept As Long
    bExcept_n0 As Long
    bYsk As Long                        'only used for proceeding data
    bExtraInfo As Long
    nVarSelMethod As Long
    bSmpName As Long
    bNum2Class As Long
    bCateName As Long
    bPointGrp As Long
    nXAxis As Long
    nYAxis As Long
    bCateNameDisp As Long
    bSmpNameDisp As Long
    method As Long
    nPanDist As Long
End Type

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private m_bvarselected As Boolean
Private sr2tbl As Srk2Para
Private m_gcode() As Long

#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function sr2_dlg Lib "MTHR_A_ISTA_64.dll" (ByVal nid As Long, sr2tbl As Srk2Para) As Integer
    #Else
        Private Declare Function sr2_dlg Lib "MTHR_A_ISTA_64.dll" (ByVal nid As Long, sr2tbl As Srk2Para) As Integer
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function sr2_dlg Lib "MTHR_A_ISTA.dll" (ByVal nid As Long, sr2tbl As Srk2Para) As Integer
    #Else
        Private Declare Function sr2_dlg Lib "MTHR_A_ISTA.dll" (ByVal nid As Long, sr2tbl As Srk2Para) As Integer
    #End If
#End If

#If 0 Then '11.8.19 LSQ : not used ---------------------------

Function ReallocGrp(ByVal n As Long) As Long
    ReDim VbaGrp(1 To n)
    Call InitGrpAry(VbaGrp)
    ReallocGrp = 0
End Function

Private Sub Sr2GetVarSel()
    Dim i As Integer
    Dim dlg As DialogSheet
    Dim rtn As Integer
    Dim RgeVar As Range
    Dim valvar As Variant
    Dim savLabelA As String, savLabelB As String
    
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgSrk2")
    Set RgeVar = Range(dlg.EditBoxes("RgeVar").Text)
    valvar = RgeVar.Value
    If Err.Number <> 0 Then
        Err.Clear
        m_varselect = "0"
        On Error GoTo 0
        Exit Sub
    End If
    For i = 1 To RgeVar.Columns.Count
        m_varselect = m_varselect & "," & valvar(1, i)
    Next i
    'save
    savLabelA = frmVarSel.Label1.Caption
    savLabelB = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = "|fffd|I|fffd||fffd||fffd||142||fffd||fffd||fffd|A|fffd|C|fffd|e|fffd||fffd|"
    frmVarSel.Label2.Caption = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd|"
    m_varselect = VarSelect(Mid(m_varselect, 2))
    'recovery
    frmVarSel.Label1.Caption = savLabelA
    frmVarSel.Label2.Caption = savLabelB
    On Error GoTo 0
End Sub

#End If '11.8.19 LSQ : not used ---------------------------

Private Function CountUniqueValues(InputRange As Range) As Long
    Dim cl As Range, UniqueValues As New Collection
    Dim rowNum As Long, colNum As Long
    Dim i As Long, j As Long
    Dim vdata As Variant
    On Error Resume Next
    rowNum = InputRange.Rows.Count
    colNum = InputRange.Columns.Count
    vdata = InputRange.Value
    For i = 1 To rowNum
        For j = 1 To colNum
            UniqueValues.Add vdata(i, j), CStr(vdata(i, j))
        Next j
    Next i
    On Error GoTo 0
    ReDim m_gcode(1 To UniqueValues.Count)
    For i = 1 To UniqueValues.Count
        m_gcode(i) = UniqueValues.Item(i)
    Next i
    CountUniqueValues = UniqueValues.Count
End Function

'RgeX : |fffd|K|fffd||fffd||fffd|l|fffd|w|fffd||fffd||348||fffd| (formatted)
'RgeCateNum : Item category number (0=numeric item)
'outBgn : category name output begin cell
'
'11.8.21 LSQ
Private Sub makeCateName_forNumItem(ByVal itemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or itemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 1 To itemNum
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            
            outBgn(1, i) = "|fffd|`" & x1
            For j = 2 To cateN
                outBgn(j, i) = x1 & "|fffd|`" & x2
                'next
                x1 = RgeX(j + 1, i)
                x2 = RgeX(j + 2, i)
            Next j
        End If
nextItem:
    Next i
End Sub

'11.8.21 LSQ mdf
'15.9.30 LSQ mdf
Private Function handleSr2Data() As Worksheet
    Dim i As Long, j As Long, ctDel As Long, yNum As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim rgeClass As Range, RgeVarKind As Range
    Dim RgeSmpName As Range, RgeCateName As Range
    Dim RgeYskData As Range, RgeYskName As Range
    Dim tmpSht As Worksheet
    Dim sr2obj As Variant, sr2var As Variant, sr2cate As Variant, varkind As Variant
    Dim sr2VarSel As Variant
    Dim cateNameRow As Long, varKindRow As Long, classRow As Long
    Dim CateNum As Long, smpNum As Long, itemNum As Long, grpnum As Long
    Dim tmpv As Long, totalCateNum As Long
    Dim msgStr As String
    Dim bgnCelCateNm As Range, tmpi As Long
    
    On Error Resume Next
    Set RgeObj = Range(sr2tbl.RgeObj)
    Set RgeVar = Range(sr2tbl.RgeVar)
    Set RgeVarKind = Range(sr2tbl.RgeVarKind)
    
    '2012.10.22 added
    itemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    
    If RgeVarKind Is Nothing Then
        Set tmpSht = SbkThis.Sheets("TmpSheet")
        tmpSht.Cells.ClearContents
        Set rge = tmpSht.Range("B1")
        For i = 1 To itemNum
            rge(1, i) = 0
        Next i
        Set RgeVarKind = rge.Resize(1, itemNum)
    End If
    'end add
    
    If sr2tbl.bNum2Class = 1 Then
        Set rgeClass = Range(sr2tbl.rgeClass)
    End If
    If sr2tbl.bCateName = 1 Then
        Set RgeCateName = Range(sr2tbl.RgeCateName)
    End If
    If sr2tbl.bSmpName = 1 Then
        Set RgeSmpName = Range(sr2tbl.RgeSmpName)
    End If
    If sr2tbl.bYsk = 1 Then
        Set RgeYskData = Range(sr2tbl.RgeYskData)
        Set RgeYskName = Range(sr2tbl.RgeYskName)
    End If
    cateNameRow = RgeObj.Rows.Count
    If cateNameRow < RgeVar.Rows.Count Then
        cateNameRow = RgeVar.Rows.Count
    End If
    If cateNameRow < RgeSmpName.Rows.Count Then
        cateNameRow = RgeSmpName.Rows.Count
    End If
    cateNameRow = cateNameRow + 6
    sr2obj = RgeObj.Value
    sr2var = RgeVar.Value
    varkind = RgeVarKind.Value
    CateNum = Application.WorksheetFunction.max(varkind)
    If CateNum = 0 Then CateNum = 1
    classRow = cateNameRow + CateNum + 2
    
    itemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    If smpNum <> RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr2Data = Nothing
        Exit Function
    End If
    
    Set rge = RgeObj(2, 1).Resize(smpNum - 1, 1)
    grpnum = CountUniqueValues(rge)
    If Application.WorksheetFunction.max(rge) <> grpnum Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr2Data = Nothing
        Exit Function
    End If
    
    Set rge = RgeVar(2, 1).Resize(smpNum, itemNum)
    For i = 1 To itemNum
        If varkind(1, i) > 0 Then
            If Application.WorksheetFunction.max(rge.Columns(i)) <> varkind(1, i) Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                Set handleSr2Data = Nothing
                Exit Function
            End If
            If sr2tbl.bExcept_n0 = 0 Then
                If CountUniqueValues(rge.Columns(i)) <> varkind(1, i) Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||fffd|0|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
                    Set handleSr2Data = Nothing
                    Exit Function
                End If
            End If
        End If
    Next i
    
    msgStr = ""
    If RgeObj Is Nothing Then
        msgStr = "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVar Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVarKind Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr2tbl.bNum2Class = 1 And rgeClass Is Nothing) Then
        msgStr = "|fffd||293|I|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr2tbl.bCateName = 1 And RgeCateName Is Nothing) Then
        msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr2tbl.bSmpName = 2 And RgeSmpName Is Nothing) Then
        msgStr = "|fffd||5368e||496||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    'ElseIf CateNum < 2 Then
    '    msgStr = "|fffd||fffd||fffd||343|f|fffd|[|fffd|^|fffd||355|s|fffd||fffd|"
    ElseIf RgeVar.Columns.Count <> RgeVarKind.Columns.Count Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf Not RgeCateName Is Nothing Then
        If (CateNum <> RgeCateName.Rows.Count Or RgeVar.Columns.Count <> RgeCateName.Columns.Count) Then
            msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        End If
    ElseIf sr2tbl.bYsk = 1 And RgeYskData Is Nothing Then
        msgStr = "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If

    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set handleSr2Data = Nothing
        Exit Function
    End If
    
    If m_varselect <> "0" Then
        sr2VarSel = Split(m_varselect, ",")
    Else
        ReDim sr2VarSel(0 To RgeVar.Columns.Count) As Long
        sr2VarSel(0) = RgeVar.Columns.Count
        For i = 1 To RgeVar.Columns.Count
            sr2VarSel(i) = i - 1
        Next i
    End If
    
    itemNum = sr2VarSel(0)
    
    totalCateNum = 0
    If sr2tbl.bNum2Class = 1 Then
        If rgeClass.Rows.Count > 31 Then
            MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
            Set handleSr2Data = Nothing
            Exit Function
        Else
            For i = 1 To itemNum
                tmpv = rgeClass(1, sr2VarSel(i) + 1)
                totalCateNum = totalCateNum + tmpv
                If tmpv > 30 Then
                    MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
                    Set handleSr2Data = Nothing
                    Exit Function
                End If
                If varkind(1, sr2VarSel(i) + 1) = 0 And tmpv < 1 Then
                    MsgBox "|fffd||fffd||fffd||28d||fffd||fffd||682||315||fffd||fffd||789||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr2Data = Nothing
                    Exit Function
                End If
                If tmpv > CateNum Then CateNum = tmpv
            Next i
        End If
    End If
    
    For i = 1 To itemNum
        tmpv = varkind(1, sr2VarSel(i) + 1)
        If tmpv < 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr2Data = Nothing
            Exit Function
        End If
        totalCateNum = totalCateNum + tmpv
    Next i
    
    If totalCateNum > 200 Then
        MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: |fffd||fffd||fffd|vMAX200"
        Set handleSr2Data = Nothing
        Exit Function
    End If
    
    If sr2tbl.bYsk = 1 Then '12.8.27 LSQ mdf
        tmpi = RgeYskData.Rows.Count
        
        cateNameRow = cateNameRow + tmpi
        smpNum = smpNum + tmpi
        classRow = classRow + tmpi
    End If
    
    Set tmpSht = SbkThis.Sheets("Sr2Data") 'RgeVar.Worksheet.Parent.Sheets.Add
    tmpSht.Cells.ClearContents
    Set rge = tmpSht.Range("$B$1")
    If Not RgeSmpName Is Nothing Then
        RgeSmpName.Copy
        rge(2, 1).PasteSpecial xlValues
    Else
        For i = 1 To cateNameRow - 6 - 1
            rge(i + 1, 1) = i
        Next i
    End If
    
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To itemNum
            rge(i, j + 2) = RgeVar(i, sr2VarSel(j) + 1)
        Next j
    Next i
    tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)) = sr2obj
    
    If sr2tbl.bYsk = 1 Then
        If Not RgeYskName Is Nothing Then
            RgeYskName.Copy
            rge(RgeObj.Rows.Count + 1, 1).PasteSpecial xlValues
        Else
            For i = 1 To RgeYskData.Rows.Count
                rge(RgeObj.Rows.Count + i, 1) = i + smpNum
            Next i
        End If
        For i = 1 To RgeYskData.Rows.Count
            For j = 1 To itemNum
                rge(RgeObj.Rows.Count + i, j + 2) = RgeYskData(i, sr2VarSel(j) + 1)
            Next j
        Next i
    End If
    
    sr2tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr2tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, itemNum + 2)).Address & vbNullChar
        
    If Not RgeCateName Is Nothing Then
        CateNum = RgeCateName.Rows.Count
        sr2cate = RgeCateName.Value
        For i = 1 To itemNum
            For j = 1 To CateNum
                rge(cateNameRow + j - 1, i) = sr2cate(j, sr2VarSel(i) + 1)
            Next j
        Next i
    Else
        For i = 1 To itemNum
            For j = 1 To CateNum
                rge(cateNameRow + j - 1, i) = "C-" & j
            Next j
        Next i
    End If
    sr2tbl.bCateName = 1
    sr2tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Address & vbNullChar
    sr2tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(RgeSmpName.Rows.Count + 1, 1)).Address & vbNullChar
    
    Set rge = tmpSht.Range(sr2tbl.RgeVar)
    smpNum = rge.Rows.Count
    yNum = RgeObj.Rows.Count '15.9.30 LSQ
    ctDel = 0 '15.9.30 LSQ
    For i = rge.Rows.Count To 2 Step -1
        sr2var = rge.Rows(i).Value
        If Application.WorksheetFunction.Count(sr2var) <> rge.Columns.Count Then
            If sr2tbl.bExcept = 1 Then
                tmpSht.Rows(i).Delete
                'smpNum = smpNum - 1
                'cateNameRow = cateNameRow - 1
                ctDel = ctDel + 1 '15.9.30 LSQ add : count deleted sample
            Else
                Set handleSr2Data = Nothing
                Exit Function
            End If
        End If
    Next i
    
    If ctDel > 0 Then '15.9.30 LSQ add
        smpNum = smpNum - ctDel
        cateNameRow = cateNameRow - ctDel
        yNum = yNum - ctDel
        
        If smpNum < 1 Or yNum < 1 Or cateNameRow < 1 Then
            Set handleSr2Data = Nothing
            Exit Function
        End If
    End If
    
    Set rge = tmpSht.Range("$B$1")
    
    sr2tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(yNum, 2)).Address & vbNullChar '15.9.30 LSQ mdf
    sr2tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, itemNum + 2)).Address & vbNullChar
    sr2tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Address & vbNullChar
    sr2tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Address & vbNullChar
    
    tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Copy SbkThis.Sheets("Sr2Data").Range("A2")
    For i = 1 To smpNum
        rge(i + 1, 1) = i
    Next i
    
    'Category Name Copy (Category Name for numeric item may be adjusted, if it is categorized)
    Set bgnCelCateNm = SbkThis.Sheets("Sr2Info").Range("B50")
    tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, itemNum)).Copy bgnCelCateNm
    
    Call makeCateName_forNumItem(itemNum, rgeClass, RgeVarKind, bgnCelCateNm)  '11.8.21 LSQ
    
    'Item Type
    For i = 1 To itemNum
        rge(i + 1, itemNum + 4) = varkind(1, sr2VarSel(i) + 1)
    Next i
    
    sr2tbl.RgeVarKind = rge(2, itemNum + 4).Resize(itemNum, 1).Address & vbNullChar
    
    'numeric item categorized (|fffd|K|fffd||fffd||fffd|l)
    If Not rgeClass Is Nothing Then
        For i = 1 To itemNum
            rgeClass.Columns(sr2VarSel(i) + 1).Copy rge(classRow, i)
        Next i
        sr2tbl.rgeClass = rge(classRow, 1).Resize(rgeClass.Rows.Count, itemNum).Address & vbNullChar
    End If
    
    sr2tbl.grpnum = grpnum
    
    Set handleSr2Data = tmpSht
    On Error GoTo 0
End Function

Private Function checkSr2Data() As Boolean
    Dim RgeObj As Range, RgeVar As Range
    
    On Error Resume Next
    Set RgeObj = Range(sr2tbl.RgeObj)
    Set RgeVar = Range(sr2tbl.RgeVar)
    If RgeObj.Rows.Count > RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        checkSr2Data = False
        Exit Function
    End If
    checkSr2Data = True
End Function

Private Sub SaveBasicInfo()
    Dim i As Long, j As Long
    Dim rge As Range, RgeObj As Range, RgeVar As Range
    Set rge = SbkThis.Worksheets("Sr2Info").Range("A1")
    Set RgeObj = Range(toXlA1str(sr2tbl.RgeObj))
    Set RgeVar = Range(toXlA1str(sr2tbl.RgeVar))
    rge.Offset(0, 1) = RgeObj(1, 1)
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(7, i) = RgeVar(1, i)
    Next i
    For i = 1 To UBound(m_gcode)
        rge.Offset(0, i + 1) = m_gcode(i)
    Next i
    Erase m_gcode
End Sub

Sub IS_MTHR_SR2()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet, outSht As Worksheet, outShtMid As Worksheet
    Dim RgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    Dim edtObj As EditBox
    Dim bOutMid As Boolean, strBkName As String, bkName As String
    Dim actSht As Worksheet
    Dim nid As Long
    Dim dWidth As Double
    
    'for Debug use (11.8.19 LSQ add)
#If 0 Then
    Call SbkInit
#End If

    On Error Resume Next
    
    Set actSht = ActiveSheet

    ReDim VbaGrp(0)
    
    m_varselect = getDefaultVarSelect(FUNC_NO.FUNC_SR2)
    If bRangeChanged_Frm(FUNC_NO.FUNC_SR2, frmSr2.RgeVar.Text) Then m_varselect = "0"
redisp:
    m_bvarselected = False
    
    frmSr2.bvarselected = m_bvarselected
    frmSr2.VarSelect = m_varselect
    frmSr2.Show
    If Not frmSr2.bOK Then Exit Sub
    
    m_bvarselected = frmSr2.bvarselected
    m_varselect = frmSr2.VarSelect
    
    Call setDefaultAddress(FUNC_NO.FUNC_SR2, getCurrentAddress_Frm(frmSr2.RgeVar.Text))
    Call setDefaultVarSelect(FUNC_NO.FUNC_SR2, m_varselect)
    
    sr2tbl.RgeObj = Trim(frmSr2.RgeObj.Text) & vbNullChar
    sr2tbl.RgeVar = Trim(frmSr2.RgeVar.Text) & vbNullChar
    sr2tbl.RgeVarKind = Trim(frmSr2.RgeVarKind.Text) & vbNullChar
    sr2tbl.bExcept = IIf(frmSr2.optExcept.Value = True, 1, 0)
    sr2tbl.nVarSelMethod = IIf(frmSr2.optVarNone.Value = True, 1, 2)
    sr2tbl.bSmpName = IIf(frmSr2.optSmpNo.Value = True, 0, 1)
    sr2tbl.bYsk = IIf(frmSr2.chkYsk.Value = True, 1, 0)
    If sr2tbl.bYsk = 1 Then
        sr2tbl.RgeYskData = Trim(frmSr2.RgeYskData) & vbNullChar
        sr2tbl.RgeYskName = Trim(frmSr2.RgeYskName) & vbNullChar
    End If
    sr2tbl.bExtraInfo = IIf(frmSr2.optExtraInfoYes.Value = True, 1, 0)
    sr2tbl.bNum2Class = 0 ' IIf(frmSr2.chkNum2Cate.Value = True, 1, 0)
    'If sr2tbl.bNum2Class = 1 Then
    '    sr2tbl.rgeClass = Trim(frmSr2.RgeNumCate.text) & vbNullChar
    'End If
    If sr2tbl.bSmpName = 1 Then
        sr2tbl.RgeSmpName = Trim(frmSr2.RgeSmpName.Text) & vbNullChar
    End If
    sr2tbl.bCateName = IIf(frmSr2.chkCateName.Value = True, 1, 0)
    If sr2tbl.bCateName = 1 Then
        sr2tbl.RgeCateName = Trim(frmSr2.RgeCateName.Text) & vbNullChar
    End If
    sr2tbl.bPointGrp = IIf(frmSr2.chkOutGrp.Value = True, 1, 0)
    sr2tbl.bCateNameDisp = IIf(frmSr2.chkNameDisp.Value = True, 1, 0)
    sr2tbl.bSmpNameDisp = IIf(frmSr2.chkNameDispSmp.Value = True, 1, 0)
    sr2tbl.nXAxis = CLng(frmSr2.XAxes.Text)
    sr2tbl.nYAxis = CLng(frmSr2.YAxes.Text)
    sr2tbl.bExcept_n0 = IIf(frmSr2.optExcept_n0.Value = True, 1, 0)
    
    '2015.05.12 addded
    sr2tbl.nPanDist = IIf(frmSr2.optPanDist1.Value = True, 1, 2)
    'end add
    
    dWidth = val(frmSr2.txtClassWidth.Text)
    If dWidth < 0.05 Or dWidth > 1 Then
        MsgBox "|fffd|K|fffd||fffd||fffd||310||752||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo redisp
    End If
    
    Set tmpSht = handleSr2Data
    
    If tmpSht Is Nothing Then
        GoTo redisp
    End If
    
    #If 0 Then
    'output sheet
    strBkName = "[" & ActiveWorkbook.name & "]"
    '
    
    Set outSht = ActiveWorkbook.Worksheets.Add
    sr2tbl.OutSheet = strBkName & outSht.name & "!R50C1"
    #End If
    
    'data sheet
    tmpSht.Activate
    
    Call Remove0Cate(sr2tbl.RgeVarKind, sr2tbl.RgeVar, sr2tbl.RgeCateName, sr2tbl.bExcept_n0 = 0)
    
    If Not checkSr2Data Then
        GoTo redisp
    End If
    
    SaveBasicInfo
    
    bkName = "[" & SbkThis.name & "]"
    sr2tbl.RgeInfo = bkName & "Sr2Info!R1C1" & vbNullChar
    sr2tbl.OutSheet = bkName & "Sr2Result!R1C1" & vbNullChar
    sr2tbl.RgeObj = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeObj) & vbNullChar
    sr2tbl.RgeVar = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeVar) & vbNullChar
    sr2tbl.RgeSmpName = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeSmpName) & vbNullChar
    sr2tbl.RgeCateName = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeCateName) & vbNullChar
    sr2tbl.RgeVarKind = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.RgeVarKind) & vbNullChar
    sr2tbl.rgeClass = bkName & "Sr2Data!" & toXlRCstr(sr2tbl.rgeClass) & vbNullChar
    sr2tbl.OutSheet = Trim(sr2tbl.OutSheet) & vbNullChar
    sr2tbl.method = FUNC_NO.FUNC_SR2
    
    SbkThis.Sheets("Sr2Result").Cells.Clear    'save calc results from DLL
    
    nid = IIf(isTrialVer, 0, 1)
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = sr2_dlg(nid, sr2tbl)  'do calc
    actSht.Activate
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        Exit Sub
    End If
    
    If rtn = 0 Then 'do output
        Sr2_Output FUNC_NO.FUNC_SR2, actSht.Parent.Sheets.Add, sr2tbl.bPointGrp, sr2tbl.nXAxis, sr2tbl.nYAxis, sr2tbl.bSmpNameDisp, sr2tbl.bCateNameDisp, dWidth, sr2tbl.nPanDist
    End If
    On Error GoTo 0
End Sub

Public Sub Sr2DrawDotPlot(ByVal strRgeClass As String, ByVal strRgeData As String, _
                                    ByVal strRgeOut As String, ByVal crossAt As Double)
    Application.Run GxlaBkGraph & "!DrawDotPlot_A", toXlA1str(strRgeClass), toXlA1str(strRgeData), _
                                            toXlA1str(strRgeOut), crossAt
End Sub
                          
'=== EOF ===


Attribute VB_Name = "MdlTableSr1"
Option Explicit
Option Private Module

Const MAX_XNUM As Long = 30

Const SHT_INF As String = "Sr1Info"
Const SHT_TMP As String = "TemplateTableSr1"
Const SHT_RST As String = "Sr1Result"

Const INF_BGN As String = "A1"

Public Const TBLID_SR1_CATEAVG As Integer = 1
Public Const TBLID_SR1_OBJECTIVECORR As Integer = 2
Public Const TBLID_SR1_CROSSTABLE As Integer = 3
Public Const TBLID_SR1_CATECORR As Integer = 4
Public Const TBLID_SR1_ACCURACY As Integer = 5
Public Const TBLID_SR1_AOV As Integer = 6
Public Const TBLID_SR1_CATESCORE As Integer = 7
Public Const TBLID_SR1_CRAM As Integer = 8
Public Const TBLID_SR1_ITEMCORR As Integer = 9
Public Const TBLID_SR1_OBJECTIVEITEM As Integer = 10
Public Const TBLID_SR1_SMPSCORE As Integer = 11
Public Const TBLID_SR1_EXTRAINFO As Integer = 12
Public Const TBLID_SR1_CATEITEMINFO1 As Integer = 13
Public Const TBLID_SR1_CATEITEMINFO2 As Integer = 14
Public Const TBLID_SR1_NUMITEMINFO As Integer = 15
Public Const TBLID_SR1_CATEITEMCORR_TITLE As Integer = 16
Public Const TBLID_SR1_CATEITEMCORR_STAT As Integer = 17
Public Const TBLID_SR1_CATEITEMCORR_PVAL As Integer = 18
Public Const TBLID_SR1_CATEITEMCORR_JUDGE As Integer = 19
Public Const TBLID_SR1_CATENUMCORR_TITLE As Integer = 20
Public Const TBLID_SR1_CATENUMCORR_STAT As Integer = 21
Public Const TBLID_SR1_CATENUMCORR_PVAL As Integer = 22
Public Const TBLID_SR1_CATENUMCORR_JUDGE As Integer = 23
Public Const TBLID_SR1_NUMITEMCORR_TITLE As Integer = 24
Public Const TBLID_SR1_NUMITEMCORR_STAT As Integer = 25
Public Const TBLID_SR1_NUMITEMCORR_PVAL As Integer = 26
Public Const TBLID_SR1_NUMITEMCORR_JUDGE As Integer = 27
Public Const TBLID_SR1_ITEMSCORE As Integer = 28
Public Const TBLID_SR1_CORR As Integer = 29

Public Const TBLID_SR1_ATARI_CMB1 As Integer = 30
Public Const TBLID_SR1_ATARI_CMB2 As Integer = 31
Public Const TBLID_SR1_ATARI_CMB3 As Integer = 32
Public Const TBLID_SR1_ATARI_CMB3_ITM As Integer = 33
Public Const TBLID_SR1_ATARI_CMB3_AXIS As Integer = 34
Public Const TBLID_SR1_ATARI_CMB3_CATE As Integer = 35

Const TMP_INUM As Integer = 2 'template table's item number
Const TMP_CNUM As Integer = 2 'template table's category number
Const TMP_CNUM_ATARI As Integer = 3  '11.8.19 LSQ add; |fffd|c|fffd||fffd||fffd||fffd||fffd|r|fffd||fffd|Wrong, if use 2, when realCateNum > 2
Const TMP_GNUM As Integer = 3 'template table's group number
Const TMP_ANUM As Integer = 2 'template table's axis number

Const ROWNUM_CRAM As Integer = 4   '11.8.20 LSQ add

Type Category
    id As Long
    Code As String
    name As String
End Type

Type Sr1_Item
    id As Long
    kind As Long
    name As String
    CateNum As Long
    NumCate As Long
    Cate() As Category
    NewCates As Variant
    NewCateNum As Long
End Type

Type Sr1_Grp
    bShowGrp As Boolean
    nXAxis As Long
    nYAxis As Long
    bSmpName As Boolean
    bCateName As Boolean
End Type

Type BasInfo
    nFuncId As Long
    ObjVarName As String
    nGrp As Long
    nSmpNum As Long
    nVarSmpNum As Long
    nItm As Long     'total item number (category + numeric)
    nItmCat As Long  'cate item number
    nItmNum As Long  'numeric item number
    aryCate(1 To MAX_XNUM) As Long
    nTotalCateNum As Integer
    items() As Sr1_Item
    bNumCate As Boolean
    bExtraInfo As Boolean
    nVarMethod As Long
    sr1Grp As Sr1_Grp
End Type

Function ReadInfo() As BasInfo
    
    Dim info As BasInfo
    Dim rge As Range
    Dim i As Long, j As Long
    Dim cat As Long
    Dim realNItm As Long
    
    Set rge = SbkThis.Worksheets(SHT_INF).Range(INF_BGN)
    
    With info
        .nFuncId = rge.Offset(0, 2)
        .ObjVarName = rge.Offset(0, 1)
        .nGrp = rge.Offset(1, 1)
        .nSmpNum = rge.Offset(3, 1)
        .nVarSmpNum = rge.Offset(3, 2)
        .nItm = rge.Offset(6, 1)
        .bNumCate = IIf(rge.Offset(13, 1) = 1, True, False)
        .bExtraInfo = IIf(rge.Offset(12, 1) = 1, True, False)
        .nVarMethod = rge.Offset(11, 1)
        
        ReDim .items(1 To .nItm)
        realNItm = 0
        .nTotalCateNum = 0
        For i = 1 To .nItm
            cat = rge.Offset(8, i + 40)
            .items(i).NewCates = Split(rge.Offset(9, i + 40), ",")
            .items(i).NewCateNum = UBound(.items(i).NewCates) + 1
            .items(i).id = i
            .items(i).name = rge.Offset(7, i)
            If cat > 0 Then
                realNItm = realNItm + 1
                .aryCate(realNItm) = cat
                .nTotalCateNum = .nTotalCateNum + cat
                .items(i).CateNum = cat
                .items(i).kind = 2
                ReDim .items(i).Cate(1 To cat)
                For j = 1 To cat
                    .items(i).Cate(j).id = j
                    .items(i).Cate(j).name = rge.Offset(48 + j, i)
                Next j
            Else
                .nTotalCateNum = .nTotalCateNum + 1
                .items(i).CateNum = 1
                .items(i).kind = 3
                If (.bNumCate) Then
                    .items(i).NumCate = rge.Offset(17, i)
                    ReDim .items(i).Cate(1 To .items(i).NumCate)
                    For j = 1 To .items(i).NumCate
                        .items(i).Cate(j).id = j
                        .items(i).Cate(j).Code = rge.Offset(17 + j, i)
                        .items(i).Cate(j).name = rge.Offset(48 + j, i)
                    Next j
                Else
                    .items(i).NumCate = 1
                    ReDim .items(i).Cate(1 To 1)
                    .items(i).Cate(1).id = 1
                    .items(i).Cate(1).Code = 1
                    .items(i).Cate(1).name = rge.Offset(49, i)
                End If
            End If
        Next i
        
        .nItmCat = realNItm
        .nItmNum = .nItm - .nItmCat
    End With
    
    ReadInfo = info
    
End Function

Sub Sr1_Output(ByVal kind As Long, ByVal oSheet As Worksheet, _
               ByVal bShowGrp As Boolean, ByVal bSmpName As Boolean, ByVal bCateName As Boolean, Optional ByVal outRge As Range = Nothing)
    Dim i As Long, j As Long
    Dim dataInfo As BasInfo
    Dim rge As Range, grpRge As Range, bgnCel As Range
    Dim rge1 As Range
    dataInfo = ReadInfo()
    
    dataInfo.sr1Grp.bShowGrp = bShowGrp
    dataInfo.sr1Grp.bSmpName = bSmpName
    dataInfo.sr1Grp.bCateName = bCateName
    
    If outRge Is Nothing Then
        Set bgnCel = oSheet.Range("B1") 'begin output position
    Else
        Set bgnCel = outRge
    End If
    
    Set rge = bgnCel
    
    If kind = FUNC_NO.FUNC_BASICINFO Then
        Set rge = MakeCateItemInfo(rge, dataInfo)
        Set rge = MakeNumItemInfo(rge.Offset(rge.Rows.Count + 1, 0), dataInfo)
        rge(1, 1) = "|fffd||293|I|fffd|f|fffd|[|fffd|^|fffd||30a||fffd|{|fffd|W|fffd|v"
        If dataInfo.nItmCat > 0 Or dataInfo.bNumCate Then
            Set rge = MakeCateAvg(rge.Offset(rge.Rows.Count + 1, 0), dataInfo)
            rge(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        End If
        Set rge = MakeObjectiveCorr(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        rge(1, 1) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||196||693|I|fffd||3d0||fffd||fffd||182||30a||58c|W"
        rge(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        If dataInfo.nItmCat > 0 Then
            Set rge = MakeCrossTable(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            rge(1, 1) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|i|fffd||fffd||fffd|I|fffd|f|fffd|[|fffd|^|fffd|j|fffd||fffd||fffd||742||303|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd|\"
            rge(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        End If
        If dataInfo.nItmCat > 0 Or dataInfo.bNumCate Then
            Set rge = MakeCateCorr(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            rge(1, 1) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|i1,0|fffd|f|fffd|[|fffd|^|fffd|j|fffd||fffd||fffd||742||312|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
            rge(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        End If
        Set rge = MakeCateItemCorr(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        rge(1, 1) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|i|fffd||fffd||fffd|I|fffd|f|fffd|[|fffd|^|fffd|j|fffd||fffd||fffd||742||311||fffd||fffd||58c|W|fffd||fffd|"
        rge(2, 1) = "|fffd|N|fffd||fffd||fffd||fffd||fffd|[|fffd||fffd||fffd|A|fffd||58c|W|fffd||fffd|"
        Set rge = MakeCateNumCorr(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        rge(1, 1) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|i|fffd||fffd||fffd|I|fffd|f|fffd|[|fffd|^|fffd||197||293|I|fffd|f|fffd|[|fffd|^|fffd|j|fffd||fffd||fffd||742||311||fffd||fffd||58c|W|fffd||fffd|"
        Set rge = MakeNumItemCorr(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        rge(1, 1) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|i|fffd||293|I|fffd|f|fffd|[|fffd|^|fffd|j|fffd||fffd||fffd||742||311||fffd||fffd||58c|W|fffd||fffd|"
        rge(2, 1) = "|fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
    ElseIf kind = FUNC_NO.FUNC_EXSR1 Then
        If dataInfo.nVarMethod = 2 Then
            Set rge = MakeItemScore(rge, dataInfo)
            Set rge = MakeCateScore(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeAccuracy(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeAOV(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.bExtraInfo Then
                Set rge = MakeExtraInfo(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            End If
            Set rge = MakeSmpScore(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.sr1Grp.bShowGrp Then
                Set grpRge = rge(2, 1).Resize(rge.Rows.Count - 1, rge.Columns.Count)
                'DrawSr1LogGrp grpRge.Offset(1, 7), grpRge.Offset(2, 3), dataInfo
                Sr1Chart grpRge, grpRge.Offset(1, 7), True, dataInfo
            End If
        Else
            Set rge = MakeATARICMB1(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeATARICMB2(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeATARICMB3(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        End If
    ElseIf kind = FUNC_NO.FUNC_MLRA Then
        If dataInfo.nVarMethod = 2 Then
            Set rge = MakeItemScore(rge, dataInfo, kind)
            'Set rge = MakeCateScore(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeAccuracy(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeAOV(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.bExtraInfo Then
                Set rge = MakeExtraInfo(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            End If
            Set rge = MakeSmpScore(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.sr1Grp.bShowGrp Then
                Set grpRge = rge(2, 1).Resize(rge.Rows.Count - 1, rge.Columns.Count)
                'DrawSr1LogGrp grpRge.Offset(1, 7), grpRge.Offset(2, 3), dataInfo
                Sr1Chart grpRge, grpRge.Offset(1, 7), True, dataInfo
            End If
        Else
            Set rge = MakeATARICMB1(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            rge.Columns(3).Delete Shift:=xlToLeft
            For i = 1 To rge.Rows.Count - 2
                rge(2 + i, 1) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd|" & i
            Next i
            Set rge = MakeATARICMB2(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set bgnCel = rge(1, 1).Offset(-1, 9 + dataInfo.nItmNum)
            bgnCel = "|fffd||fffd||fffd||fffd|"
            For i = 1 To 5
                bgnCel.Offset(1, i - 1) = rge(1, 1 + i)
                For j = 1 To rge.Rows.Count - 1
                    bgnCel.Offset(j + 1, i - 1) = WorksheetFunction.Rank(rge(j + 1, i + 1), rge(2, i + 1).Resize(rge.Rows.Count - 1, 1), 1)
                Next j
            Next i
            Call SetRangeBorder(rge(2, 1).Resize(rge.Rows.Count - 1, rge.Columns.Count), xlThin, xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(bgnCel.Resize(1, 5), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(bgnCel.Offset(1, 0).Resize(1, 5), xlThin, xlThin, xlThin, xlThin, xlHairline)
            Call SetRangeBorder(bgnCel.Offset(2, 0).Resize(rge.Rows.Count - 1, 5), xlThin, xlThin, xlThin, xlThin, xlHairline)
            
            Set rge = MakeATARICMB3(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = rge(1, 1).Resize(rge.Rows.Count, rge.Columns.Count + dataInfo.nItmNum)
            rge(1, 4) = "|fffd||fffd|A|fffd|W|fffd||fffd|"
            rge(1, 4 + dataInfo.nItmNum + 1) = "VIF"
            Call SetRangeBorder(rge(1, 4).Resize(1, dataInfo.nItmNum + 1), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(rge(1, 4 + dataInfo.nItmNum + 1).Resize(1, dataInfo.nItmNum), xlThin, xlThin, xlThin, xlThin)
            rge(2, 2) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||310||fffd|"
            rge.Select
            rge(4, 1).Resize(rge.Rows.Count, rge.Columns.Count).Copy rge(3, 1)
            rge(1, 4).Resize(rge.Rows.Count, dataInfo.nItmNum * 2 + 5).Copy rge(1, 3)
            For i = 1 To dataInfo.nItmNum
                rge(2, 3 + dataInfo.nItmNum + i) = "|fffd|W|fffd||fffd|" & i
            Next i
            rge(3, 4 + dataInfo.nItmNum).Resize(rge.Rows.Count - 3, dataInfo.nItmNum).NumberFormat = "0.000"
            Call SetRangeBorder(rge(2, 3).Resize(1, dataInfo.nItmNum * 2 + 1), xlThin, xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(rge(3, 3).Resize(rge.Rows.Count - 3, dataInfo.nItmNum * 2 + 1), xlThin, xlThin, xlThin, xlThin, xlThin)
        End If
    ElseIf kind = FUNC_NO.FUNC_SR1 Then
        If dataInfo.nVarMethod = 2 Then
            Set rge = MakeItemScore(rge, dataInfo)
            rge(2, 2) = "|fffd||157|L|fffd|x|fffd|N|fffd|g|fffd||fffd|"
            rge.Columns(3).Delete Shift:=xlToLeft
            Call SetRangeBorder(rge(2, 2), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(rge(3, 2).Resize(rge.Rows.Count - 2, 1), xlThin, xlThin, xlThin, xlThin)
            Set rge = MakeCateScore(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeAccuracy(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeAOV(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.bExtraInfo Then
                Set rge = MakeExtraInfo(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            End If
            Set rge = MakeSmpScore(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.sr1Grp.bShowGrp Then
                Set grpRge = rge(2, 1).Resize(rge.Rows.Count - 1, rge.Columns.Count)
                'DrawSr1LogGrp grpRge.Offset(1, 7), grpRge.Offset(2, 3), dataInfo
                Sr1Chart grpRge, grpRge.Offset(1, 7), True, dataInfo
            End If
        Else
            Set rge = MakeATARICMB1(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeATARICMB2(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeATARICMB3(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        End If
    End If
    rge.Worksheet.Activate
    
    With ActiveWindow
        .ScrollRow = bgnCel.Row
        .DisplayGridlines = False
    End With
    bgnCel.Select
    
End Sub

'
Function Sr1Chart(ByVal rgeData As Range, ByVal rgeChartBgn As Range, ByVal bMonthly As Boolean, dataInfo As BasInfo) As Long
    Dim nRtn As Long, nGrpRowNum As Long, nDist As Long
    Dim maxVal As Double
    Dim ser As Series
    Dim cht As Chart
    Dim rge As Range
    nDist = forcIIf(bMonthly, 10, 0)
    nRtn = COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rgeChartBgn, rgeData.Columns("A"), Union(rgeData.Columns("B").Resize(dataInfo.nSmpNum + 1, 1), rgeData.Columns("C")), _
           "", "", , , , nDist, , cht)
    If Not cht Is Nothing Then
        With cht.Axes(xlCategory)
            .CrossesAt = 1
            .TickLabelSpacing = 1
            .TickMarkSpacing = 1
            .AxisBetweenCategories = False
            .ReversePlotOrder = False
            .TickLabels.Orientation = 45
        End With
        #If 0 Then                                          '2013.10.17 mdf
        If dataInfo.nSmpNum < dataInfo.nVarSmpNum Then
            Set rge = rgeData.Columns(2).Range("A2")
            Set rge = rge.Resize(dataInfo.nSmpNum, 2)
            maxVal = CDbl(Application.max(rge))
            Set ser = cht.SeriesCollection.NewSeries
            ser.Border.colorIndex = 1
            ser.Border.Weight = xlThin
            ser.ChartType = xlXYScatterLinesNoMarkers
            ser.XValues = "={" & dataInfo.nSmpNum + 1 & "," & dataInfo.nSmpNum + 1 & "}"
            ser.Values = "={0," & CStr(maxVal) & "}"
            cht.Legend.LegendEntries(3).Delete
        End If
        #End If
    End If
    nGrpRowNum = nRtn + 1
    Sr1Chart = nGrpRowNum
End Function

'
'|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||3d2|l|fffd|\
'
Function MakeCateAvg(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rge As Range
    Dim aryCate(1 To MAX_XNUM) As Long
    Dim v As Variant
    
    If dataInfo.nItmCat < 1 And Not dataInfo.bNumCate Then
        Set MakeCateAvg = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATEAVG)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    If dataInfo.bNumCate Then
        Set rge = AdjustTableByItm(TBLID_SR1_CATEAVG, rge, dataInfo.nItm)
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 2 Then
                aryCate(i) = dataInfo.items(i).CateNum
            ElseIf dataInfo.items(i).kind = 3 Then
                If dataInfo.bNumCate Then
                    aryCate(i) = dataInfo.items(i).NumCate
                Else
                    aryCate(i) = 1
                End If
            End If
        Next i
        Set rge = AdjustTableByCat(TBLID_SR1_CATEAVG, rge, aryCate, dataInfo.nItm)
        l = 4
        For i = 1 To dataInfo.nItm
            'If dataInfo.items(i).kind = 2 Then
                rge(l, 1) = dataInfo.items(i).name
                For j = 1 To aryCate(i)
                    rge(l, 2) = dataInfo.items(i).Cate(j).name
                    l = l + 1
                Next j
            'End If
        Next i
    Else
        Set rge = AdjustTableByItm(TBLID_SR1_CATEAVG, rge, dataInfo.nItmCat)
        Set rge = AdjustTableByCat(TBLID_SR1_CATEAVG, rge, dataInfo.aryCate, dataInfo.nItmCat)
        l = 4
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 2 Then
                rge(l, 1) = dataInfo.items(i).name
                For j = 1 To dataInfo.items(i).CateNum
                    rge(l, 2) = dataInfo.items(i).Cate(j).name
                    l = l + 1
                Next j
            End If
        Next i
    End If
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||3d2|l|fffd|\")
    #If 0 Then
    rge(2, 1).Resize(l - 4 + 1, 3).Copy
    outBgn(3, 3).PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    #Else
        outBgn(3, 3) = rge(2, 1)
        outBgn(3, 4) = rge(2, 2)
        outBgn(3, 5) = rge(2, 3)
        l = 4
        If dataInfo.bNumCate Then
            For i = 1 To dataInfo.nItm
                If dataInfo.items(i).kind = 2 Then
                    l = l + dataInfo.items(i).NewCateNum
                ElseIf dataInfo.items(i).kind = 3 Then
                    If dataInfo.bNumCate Then
                        l = l + dataInfo.items(i).NumCate
                    Else
                        l = l + 1
                    End If
                End If
            Next i
        Else
            For i = 1 To dataInfo.nItm
                If dataInfo.items(i).kind = 2 Then
                    l = l + dataInfo.items(i).NewCateNum
                End If
            Next i
        End If
        v = rge(2, 1).Resize(l - 4 + 1, 3).Value
        l = 1
        k = 1
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 2 Then
                For j = 1 To dataInfo.items(i).CateNum
                    outBgn(2 + l + j, 3) = 0 ' "|fffd|G|fffd||fffd||fffd|["
                    outBgn(2 + l + j, 4) = 0 '"|fffd|G|fffd||fffd||fffd|["
                    outBgn(2 + l + j, 5) = "|fffd|G|fffd||fffd||fffd|["
                Next j
                For j = 1 To dataInfo.items(i).NewCateNum
                    outBgn(2 + l + dataInfo.items(i).NewCates(j - 1), 3) = v(k + j, 1)
                    outBgn(2 + l + dataInfo.items(i).NewCates(j - 1), 4) = v(k + j, 2)
                    outBgn(2 + l + dataInfo.items(i).NewCates(j - 1), 5) = v(k + j, 3)
                Next j
                l = l + dataInfo.items(i).CateNum
                k = k + dataInfo.items(i).NewCateNum
            ElseIf dataInfo.bNumCate Then
                For j = 1 To dataInfo.items(i).NumCate
                    outBgn(2 + l + j, 3) = v(k + j, 1)
                    outBgn(2 + l + j, 4) = v(k + j, 2)
                    outBgn(2 + l + j, 5) = v(k + j, 3)
                Next j
                l = l + dataInfo.items(i).NumCate
                k = k + dataInfo.items(i).NumCate
            End If
        Next i
    #End If
    
    Set MakeCateAvg = outBgn
    
End Function

Function MakeObjectiveCorr(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rge As Range
    Dim aryData(1) As Long
    
    'If dataInfo.nItmCat < 1 And Not dataInfo.bNumCate Then
    '    Set MakeObjectiveCorr = outBgn
    '    Exit Function
    'End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_OBJECTIVECORR)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    aryData(1) = dataInfo.nItm
    Set rge = AdjustTableByCat(TBLID_SR1_OBJECTIVECORR, rge, aryData, 1)
    
    Application.CutCopyMode = False
    Set outBgn = rge
    l = 3
    For i = 1 To dataInfo.nItm
        rge(l, 1) = dataInfo.items(i).name
        If dataInfo.items(i).kind = 2 Then
            rge(l, 2) = "|fffd||fffd||fffd||594||fffd|"
        Else
            rge(l, 2) = "|fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
        End If
        l = l + 1
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||693|I|fffd||3d0||fffd||fffd||182||311||fffd||fffd||fffd|")
    rge(2, 1).Resize(dataInfo.nItm, 3).Copy
    outBgn(3, 3).PasteSpecial xlPasteValues
    outBgn(2, 3) = "|fffd||fffd||fffd||fffd|"
    
    Application.CutCopyMode = False
        
    Set MakeObjectiveCorr = outBgn
End Function
'
'|fffd|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd|\
'
Function MakeCrossTable(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim ii As Long, jj As Long, kk As Long, ll As Long
    Dim rge As Range
    Dim aryCate(1 To MAX_XNUM) As Integer
    Dim itmCnt As Long
    Dim v As Variant
    If dataInfo.nItmCat < 1 Then
        Set MakeCrossTable = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CROSSTABLE)
    rge.Copy outBgn
    
    itmCnt = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            aryCate(itmCnt) = dataInfo.items(i).CateNum
            itmCnt = itmCnt + 1
        ElseIf dataInfo.items(i).kind = 3 And dataInfo.bNumCate Then
            aryCate(itmCnt) = dataInfo.items(i).NumCate
            itmCnt = itmCnt + 1
        End If
    Next i
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CROSSTABLE, rge, itmCnt - 1) 'dataInfo.nItmCat)
    Set rge = AdjustTableByCat(TBLID_SR1_CROSSTABLE, rge, aryCate, itmCnt - 1) 'dataInfo.aryCate, dataInfo.nItmCat)
    
    Application.CutCopyMode = False
    
    l = 4
    k = 3
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            rge(l, 1) = dataInfo.items(i).name
            rge(2, k) = dataInfo.items(i).name
            For j = 1 To dataInfo.items(i).CateNum
                rge(l, 2) = dataInfo.items(i).Cate(j).name
                rge(3, k) = dataInfo.items(i).Cate(j).name
                l = l + 1
                k = k + 1
            Next j
        ElseIf dataInfo.items(i).kind = 3 And dataInfo.bNumCate Then
            rge(l, 1) = dataInfo.items(i).name
            rge(2, k) = dataInfo.items(i).name
            For j = 1 To dataInfo.items(i).NumCate
                rge(l, 2) = dataInfo.items(i).Cate(j).name
                rge(3, k) = dataInfo.items(i).Cate(j).name
                l = l + 1
                k = k + 1
            Next j
        End If
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd|\")
    #If 0 Then
    rge(2, 1).Resize(l - 5 + 1, l - 5 + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    #Else
    l = 4
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            l = l + dataInfo.items(i).NewCateNum
        ElseIf dataInfo.items(i).kind = 3 And dataInfo.bNumCate Then
            l = l + dataInfo.items(i).NumCate
        End If
    Next i
    k = l
    v = rge(2, 1).Resize(l - 5 + 1, l - 5 + 1).Value
    l = 2
    k = 3
    ll = 1
    kk = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For ii = 1 To dataInfo.items(i).CateNum
                ll = 1
                l = 2
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Then
                        For jj = 1 To dataInfo.items(j).CateNum
                            If i <> j Or (i = j And ii = jj) Then
                                outBgn(k + ii, l + jj) = 0 '"|fffd|G|fffd||fffd||fffd|["
                            End If
                        Next jj
                        l = l + dataInfo.items(j).CateNum
                    ElseIf dataInfo.bNumCate Then
                        For jj = 1 To dataInfo.items(j).NumCate
                            If i <> j Or (i = j And ii = jj) Then
                                outBgn(k + ii, l + jj) = 0 '"|fffd|G|fffd||fffd||fffd|["
                            End If
                        Next jj
                        l = l + dataInfo.items(j).NumCate
                    End If
                Next j
                kk = kk + 1
            Next ii
            k = k + dataInfo.items(i).CateNum
        ElseIf dataInfo.bNumCate Then
            For ii = 1 To dataInfo.items(i).NumCate
                ll = 1
                l = 2
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Then
                        For jj = 1 To dataInfo.items(j).CateNum
                            If i <> j Or (i = j And ii = jj) Then
                                outBgn(k + ii, l + jj) = 0 '"|fffd|G|fffd||fffd||fffd|["
                            End If
                        Next jj
                        l = l + dataInfo.items(j).CateNum
                    ElseIf dataInfo.bNumCate Then
                        For jj = 1 To dataInfo.items(j).NumCate
                            If i <> j Or (i = j And ii = jj) Then
                                outBgn(k + ii, l + jj) = 0 '"|fffd|G|fffd||fffd||fffd|["
                            End If
                        Next jj
                        l = l + dataInfo.items(j).NumCate
                    End If
                Next j
                kk = kk + 1
            Next ii
            k = k + dataInfo.items(i).NumCate
        End If
    Next i
    l = 2
    k = 3
    ll = 1
    kk = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For ii = 1 To dataInfo.items(i).NewCateNum
                ll = 1
                l = 2
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Then
                        For jj = 1 To dataInfo.items(j).NewCateNum
                            outBgn(k + dataInfo.items(i).NewCates(ii - 1), l + dataInfo.items(j).NewCates(jj - 1)) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).CateNum
                    ElseIf dataInfo.bNumCate Then
                        For jj = 1 To dataInfo.items(j).NumCate
                            outBgn(k + dataInfo.items(i).NewCates(ii - 1), l + jj) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).NumCate
                    End If
                Next j
                kk = kk + 1
            Next ii
            k = k + dataInfo.items(i).CateNum
        ElseIf dataInfo.bNumCate Then
            For ii = 1 To dataInfo.items(i).NumCate
                ll = 1
                l = 2
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Then
                        For jj = 1 To dataInfo.items(j).NewCateNum
                            outBgn(k + ii, l + dataInfo.items(j).NewCates(jj - 1)) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).CateNum
                    ElseIf dataInfo.bNumCate Then
                        For jj = 1 To dataInfo.items(j).NumCate
                            outBgn(k + ii, l + jj) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).NumCate
                    End If
                Next j
                kk = kk + 1
            Next ii
            k = k + dataInfo.items(i).NumCate
        End If
    Next i
    #End If
    Set MakeCrossTable = outBgn
    
End Function

Function MakeCateCorr(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim ii As Long, jj As Long, kk As Long, ll As Long
    Dim rge As Range
    Dim aryCate(1 To MAX_XNUM) As Long
    Dim v As Variant
    
    If dataInfo.nItmCat < 1 And Not dataInfo.bNumCate Then
        Set MakeCateCorr = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATECORR)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CATECORR, rge, dataInfo.nItm)
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            aryCate(i) = dataInfo.items(i).CateNum
        ElseIf dataInfo.items(i).kind = 3 Then
            If dataInfo.bNumCate Then
                aryCate(i) = dataInfo.items(i).NumCate
            Else
                aryCate(i) = 1
            End If
        End If
    Next i
    Set rge = AdjustTableByCat(TBLID_SR1_CATECORR, rge, aryCate, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    l = 4
    k = 3
    For i = 1 To dataInfo.nItm
        rge(l, 1) = dataInfo.items(i).name
        rge(2, k) = dataInfo.items(i).name
        For j = 1 To aryCate(i)
            rge(l, 2) = dataInfo.items(i).Cate(j).name
            rge(3, k) = dataInfo.items(i).Cate(j).name
            l = l + 1
            k = k + 1
        Next j
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||502||312|P|fffd||fffd||fffd||58c|W|fffd||fffd|")
#If 0 Then
    rge(2, 1).Resize(l - 5 + 1, l - 5 + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues
#Else
    For i = 1 To l - 4
        For j = 1 To l - 4
            outBgn(3 + i, 2 + j) = "|fffd|G|fffd||fffd||fffd|["
        Next j
    Next i
    l = 4
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            l = l + dataInfo.items(i).NewCateNum
        ElseIf dataInfo.items(i).kind = 3 Then
            If dataInfo.bNumCate Then
                l = l + dataInfo.items(i).NumCate
            Else
                l = l + 1
            End If
        End If
    Next i
    k = l
    v = rge(2, 1).Resize(l - 5 + 1, l - 5 + 1).Value
    l = 2
    k = 3
    ll = 1
    kk = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For ii = 1 To dataInfo.items(i).NewCateNum
                ll = 1
                l = 2
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Then
                        For jj = 1 To dataInfo.items(j).NewCateNum
                            outBgn(k + dataInfo.items(i).NewCates(ii - 1), l + dataInfo.items(j).NewCates(jj - 1)) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).CateNum
                    ElseIf dataInfo.bNumCate Then
                        For jj = 1 To dataInfo.items(j).NumCate
                            outBgn(k + dataInfo.items(i).NewCates(ii - 1), l + jj) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).NumCate
                    Else
                        outBgn(k + dataInfo.items(i).NewCates(ii - 1), l + 1) = v(kk, ll)
                        l = l + 1
                    End If
                Next j
                kk = kk + 1
            Next ii
            k = k + dataInfo.items(i).CateNum
        ElseIf dataInfo.bNumCate Then
            For ii = 1 To dataInfo.items(i).NumCate
                ll = 1
                l = 2
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Then
                        For jj = 1 To dataInfo.items(j).NewCateNum
                            outBgn(k + ii, l + dataInfo.items(j).NewCates(jj - 1)) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).CateNum
                    ElseIf dataInfo.bNumCate Then
                        For jj = 1 To dataInfo.items(j).NumCate
                            outBgn(k + ii, l + jj) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).NumCate
                    Else
                        outBgn(k + ii, l + 1) = v(kk, ll)
                        l = l + 1
                    End If
                Next j
                kk = kk + 1
            Next ii
            k = k + dataInfo.items(i).NumCate
        Else
            ll = 1
            l = 2
            For j = 1 To dataInfo.nItm
                If dataInfo.items(j).kind = 2 Then
                    For jj = 1 To dataInfo.items(j).NewCateNum
                        outBgn(k + 1, l + dataInfo.items(j).NewCates(jj - 1)) = v(kk, ll)
                        ll = ll + 1
                    Next jj
                    l = l + dataInfo.items(j).CateNum
                ElseIf dataInfo.bNumCate Then
                    For jj = 1 To dataInfo.items(j).NumCate
                        outBgn(k + 1, l + jj) = v(kk, ll)
                        ll = ll + 1
                    Next jj
                    l = l + dataInfo.items(j).NumCate
                Else
                    outBgn(k + 1, l + 1) = v(kk, ll)
                    l = l + 1
                End If
            Next j
            kk = kk + 1
            k = k + 1
        End If
    Next i
#End If
    Set MakeCateCorr = outBgn
    
End Function
'
'|fffd|N|fffd||fffd||fffd||fffd||fffd|[|fffd||fffd||fffd||318|A|fffd||58c|W|fffd||fffd|
'11.8.20 LSQ mdf : add "|fffd|J|fffd|C|fffd||fffd||fffd||fffd|l"
Function MakeCRAM(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long, ct As Long
    Dim rge As Range
    
    If dataInfo.nItmCat < 1 Then
        Set MakeCRAM = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CRAM)
    rge.Copy outBgn
    
    j = 0
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            j = j + 1
        ElseIf dataInfo.bNumCate Then
            j = j + 1
        End If
    Next i
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CRAM, rge, j)
    
    Application.CutCopyMode = False
    
    rge(2, 1) = "|fffd||fffd||fffd||fffd| " & dataInfo.nSmpNum
    l = ROWNUM_CRAM + 6
    k = 2
    
    '|fffd||693|I|fffd||3d0||fffd|

    ct = 0
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Or dataInfo.bNumCate Then
            rge(l, 1) = dataInfo.items(i).name
            rge(ROWNUM_CRAM + 5, k) = dataInfo.items(i).name
            
            ct = ct + 1
            l = l + ROWNUM_CRAM
            k = k + 1
        End If
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||502||318|A|fffd||58c|W|fffd||fffd|")
    rge(2, 1).Resize(ct * ROWNUM_CRAM, ct).Copy
    outBgn(ROWNUM_CRAM + 6, 2).PasteSpecial xlPasteValues

    Set MakeCRAM = outBgn
    
End Function
'
'|fffd||fffd||fffd||594||fffd|
'
Function MakeCORR(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rge As Range
    
    Exit Function
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_CORR)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CORR, rge, dataInfo.nItmNum)
    
    Application.CutCopyMode = False
    
    rge(2, 1) = "|fffd||fffd||fffd||fffd| " & dataInfo.nSmpNum
    l = 8
    k = 2
    rge(9, 1) = dataInfo.ObjVarName
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 3 Then
            rge(8, k) = dataInfo.items(i).name
            k = k + 1
        End If
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd||594||fffd|")
    rge(2, 1).Resize(3, k - 2).Copy
    outBgn(9, 2).PasteSpecial xlPasteValues
    
    Set MakeCORR = outBgn
    
End Function

Function MakeCateItemCorr(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Integer, ll As Long
    Dim ct As Long
    Dim rge As Range, rgeData As Range, RgeOut As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATEITEMCORR_TITLE)
    rge.Copy outBgn
    If dataInfo.nItmCat > 0 Or dataInfo.bNumCate Then
        ct = 0
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 2 Then
                ct = ct + 1
            ElseIf dataInfo.bNumCate Then
                ct = ct + 1
            End If
        Next i
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATEITEMCORR_STAT)
        rge.Copy outBgn(2, 1)
        outBgn(4, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = outBgn(2, 1).Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_CATEITEMCORR_STAT, rge, ct)
        rge(2, 2) = dataInfo.nSmpNum
        Set RgeOut = rge.Offset(rge.Rows.Count + 1, 0)
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATEITEMCORR_PVAL)
        rge.Copy RgeOut
        RgeOut(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = RgeOut.Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_CATEITEMCORR_PVAL, rge, ct)
        Set RgeOut = rge.Offset(rge.Rows.Count + 1, 0)
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATEITEMCORR_JUDGE)
        rge.Copy RgeOut
        RgeOut(1, 1) = "|fffd|J|fffd|C|fffd||fffd||631f||fffd||fffd||242||fffd||953b||fffd||fffd|"
        RgeOut(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = RgeOut.Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_CATEITEMCORR_JUDGE, rge, ct)
        Set rgeData = SbkThis.Worksheets(SHT_RST).Columns("B")
        Set rgeData = rgeData.Find("|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||502||318|A|fffd||58c|W|fffd||fffd|")
        l = 1
        k = 0
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 2 Or dataInfo.bNumCate Then
                ll = 1
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Or dataInfo.bNumCate Then
                        If i = j Then
                            outBgn(4, 1 + ll) = dataInfo.items(j).name
                            outBgn(4 + ct + 3, 1 + ll) = dataInfo.items(j).name
                            outBgn(4 + 2 * (ct + 3), 1 + ll) = dataInfo.items(j).name
                            outBgn(4 + l, 1) = dataInfo.items(i).name
                            outBgn(4 + l + ct + 3, 1) = dataInfo.items(i).name
                            outBgn(4 + l + 2 * (ct + 3), 1) = dataInfo.items(i).name
                            outBgn(4 + l, 1 + ll) = "-"
                            outBgn(4 + l + ct + 3, 1 + ll) = "-"
                            outBgn(4 + l + 2 * (ct + 3), 1 + ll) = "-"
                        Else
                            outBgn(4 + l, 1 + ll) = rgeData(k + 3, ll)
                            outBgn(4 + l + ct + 3, 1 + ll) = rgeData(k + 4, ll)
                            outBgn(4 + l + 2 * (ct + 3), 1 + ll) = rgeData(k + 5, ll)
                        End If
                        ll = ll + 1
                    End If
                Next j
                l = l + 1
                k = k + ROWNUM_CRAM
            End If
        Next i
        Set MakeCateItemCorr = outBgn(1, 1).Resize(4 + l + 2 * (ct + 3) - 1, 1 + ll) 'rge
    Else
        outBgn(2, 1) = "|fffd|Y|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||202||fffd|"
        Set MakeCateItemCorr = outBgn(1, 1).Resize(2, 1)
    End If
End Function

Function MakeCateNumCorr(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long, ll As Long
    Dim ct As Long
    Dim rge As Range, rgeData As Range, RgeOut As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATENUMCORR_TITLE)
    rge.Copy outBgn
    If dataInfo.nItmNum > 0 And dataInfo.nItmCat > 0 Then
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATENUMCORR_STAT)
        rge.Copy outBgn(2, 1)
        outBgn(4, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = outBgn(2, 1).Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_CATENUMCORR_STAT, rge, dataInfo.nItmCat)
        Set rge = AdjustTableByGrp(TBLID_SR1_CATENUMCORR_STAT, rge, dataInfo.nItmNum)
        rge(2, 2) = dataInfo.nSmpNum
        Set RgeOut = rge.Offset(rge.Rows.Count + 1, 0).Range("A1")
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATENUMCORR_PVAL)
        rge.Copy RgeOut
        RgeOut(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = RgeOut.Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_CATENUMCORR_PVAL, rge, dataInfo.nItmCat)
        Set rge = AdjustTableByGrp(TBLID_SR1_CATENUMCORR_STAT, rge, dataInfo.nItmNum)
        Set RgeOut = rge.Offset(rge.Rows.Count + 1, 0).Range("A1")
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATENUMCORR_JUDGE)
        rge.Copy RgeOut
        RgeOut(1, 1) = "F|fffd||fffd||fffd||fffd||242||fffd||953b||fffd||fffd|"
        RgeOut(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = RgeOut.Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_CATENUMCORR_JUDGE, rge, dataInfo.nItmCat)
        Set rge = AdjustTableByGrp(TBLID_SR1_CATENUMCORR_STAT, rge, dataInfo.nItmNum)
        Set rgeData = SbkThis.Worksheets(SHT_RST).Columns("B")
        Set rgeData = rgeData.Find("|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|i|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|f|fffd|[|fffd|^|fffd||190||fffd||fffd||283|f|fffd|[|fffd|^|fffd|j|fffd||fffd||fffd||742||311||fffd||fffd||58c|W|fffd||fffd|")
        'rgeData(2, 1).Resize(ct * ROWNUM_CRAM, ct).Copy
        l = 1
        k = 0
        ct = dataInfo.nItmCat
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 2 Then
                ll = 1
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 3 Then
                        outBgn(4, 1 + ll) = dataInfo.items(j).name
                        outBgn(4 + ct + 3, 1 + ll) = dataInfo.items(j).name
                        outBgn(4 + 2 * (ct + 3), 1 + ll) = dataInfo.items(j).name
                        outBgn(4 + l, 1) = dataInfo.items(i).name
                        outBgn(4 + l + ct + 3, 1) = dataInfo.items(i).name
                        outBgn(4 + l + 2 * (ct + 3), 1) = dataInfo.items(i).name
                        outBgn(4 + l, 1 + ll) = rgeData(k + 3, ll)
                        outBgn(4 + l + ct + 3, 1 + ll) = rgeData(k + 4, ll)
                        outBgn(4 + l + 2 * (ct + 3), 1 + ll) = rgeData(k + 5, ll)
                        ll = ll + 1
                    End If
                Next j
                l = l + 1
                k = k + ROWNUM_CRAM
            End If
        Next i
        Set MakeCateNumCorr = outBgn(1, 1).Resize(4 + l + 2 * (ct + 3) - 1, 1 + ll) 'rge
    Else
        outBgn(2, 1) = "|fffd||fffd||fffd||58c|W|fffd||fffd|"
        outBgn(3, 1) = "|fffd|Y|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||202||fffd|"
        Set MakeCateNumCorr = outBgn(1, 1).Resize(3, 1)
    End If
End Function

Function MakeNumItemCorr(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long, ll As Long
    Dim ct As Long
    Dim rge As Range, rgeData As Range, RgeOut As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_NUMITEMCORR_TITLE)
    rge.Copy outBgn
    If dataInfo.nItmNum > 1 Then
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_NUMITEMCORR_STAT)
        rge.Copy outBgn(2, 1)
        outBgn(4, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = outBgn(2, 1).Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_NUMITEMCORR_STAT, rge, dataInfo.nItmNum)
        Set rge = AdjustTableByGrp(TBLID_SR1_NUMITEMCORR_STAT, rge, dataInfo.nItmNum)
        rge(2, 2) = dataInfo.nSmpNum
        Set RgeOut = rge.Offset(rge.Rows.Count + 1, 0).Range("A1")
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_NUMITEMCORR_PVAL)
        rge.Copy RgeOut
        RgeOut(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = RgeOut.Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_NUMITEMCORR_PVAL, rge, dataInfo.nItmNum)
        Set rge = AdjustTableByGrp(TBLID_SR1_NUMITEMCORR_STAT, rge, dataInfo.nItmNum)
        Set RgeOut = rge.Offset(rge.Rows.Count + 1, 0).Range("A1")
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_NUMITEMCORR_JUDGE)
        rge.Copy RgeOut
        RgeOut(1, 1) = "|fffd||fffd||fffd||fffd||fffd||582||30c||fffd||fffd||fffd||242||fffd||953b||fffd||fffd|"
        RgeOut(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = RgeOut.Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_NUMITEMCORR_JUDGE, rge, dataInfo.nItmNum)
        Set rge = AdjustTableByGrp(TBLID_SR1_NUMITEMCORR_STAT, rge, dataInfo.nItmNum)
        Set rgeData = SbkThis.Worksheets(SHT_RST).Columns("B")
        Set rgeData = rgeData.Find("|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|i|fffd||fffd||fffd||283|f|fffd|[|fffd|^|fffd|j|fffd||fffd||fffd||742||311||fffd||fffd||58c|W|fffd||fffd|")
        l = 1
        k = 0
        ct = dataInfo.nItmNum
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 3 Then
                ll = 1
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 3 Then
                        If i = j Then
                            outBgn(4 + l, 1 + ll) = "-"
                            outBgn(4 + l + ct + 3, 1 + ll) = "-"
                            outBgn(4 + l + 2 * (ct + 3), 1 + ll) = "-"
                        Else
                            outBgn(4, 1 + ll) = dataInfo.items(j).name
                            outBgn(4 + ct + 3, 1 + ll) = dataInfo.items(j).name
                            outBgn(4 + 2 * (ct + 3), 1 + ll) = dataInfo.items(j).name
                            outBgn(4 + l, 1) = dataInfo.items(i).name
                            outBgn(4 + l + ct + 3, 1) = dataInfo.items(i).name
                            outBgn(4 + l + 2 * (ct + 3), 1) = dataInfo.items(i).name
                            outBgn(4 + l, 1 + ll) = rgeData(k + 3, ll)
                            outBgn(4 + l + ct + 3, 1 + ll) = rgeData(k + 4, ll)
                            outBgn(4 + l + 2 * (ct + 3), 1 + ll) = rgeData(k + 5, ll)
                        End If
                        ll = ll + 1
                    End If
                Next j
                l = l + 1
                k = k + ROWNUM_CRAM
            End If
        Next i
        Set MakeNumItemCorr = outBgn(1, 1).Resize(4 + l + 2 * (ct + 3) - 1, 1 + ll) 'rge
    Else
        outBgn(2, 1) = "|fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
        outBgn(3, 1) = "|fffd|Y|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||202||fffd|"
        Set MakeNumItemCorr = outBgn(1, 1).Resize(3, 1)
    End If
End Function

Function MakeItemScore(ByVal outBgn As Range, dataInfo As BasInfo, Optional ByVal nFuncId As Long = 1) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rge As Range
    Dim v As Variant
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_ITEMSCORE)
    rge.Copy outBgn
    
    l = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            l = l + dataInfo.items(i).NewCateNum - 1
        Else
            l = l + 1
        End If
    Next i
        
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_ITEMSCORE, rge, l)
    
    Set outBgn = rge
    
    k = 3
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).NewCateNum - 1
                outBgn(k, 1) = dataInfo.items(i).Cate(dataInfo.items(i).NewCates(j - 1)).name
                k = k + 1
            Next j
        Else
            outBgn(k, 1) = dataInfo.items(i).name
            k = k + 1
        End If
    Next i
    
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd|X|fffd|R|fffd|A")
    #If 1 Then
    If nFuncId = FUNC_NO.FUNC_MLRA Then
        rge(2, 1).Resize(l, 6).Copy
        outBgn(3, 2).PasteSpecial xlPasteValues
        outBgn(2, 4) = "F|fffd|l"
        outBgn(2, 5) = "p|fffd|l"
        outBgn(2, 6) = "|fffd||fffd||fffd||fffd|"
        outBgn(2, 7) = "|fffd|W|fffd||fffd||fffd||b377|"
        Call SetRangeBorder(outBgn(2, 4).Resize(1, 4), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outBgn(3, 4).Resize(l, 4), xlThin, xlThin, xlThin, xlThin, xlHairline)
        outBgn(3, 4).Resize(l, 2).NumberFormat = "0.000"
        outBgn(3, 7).Resize(l, 1).NumberFormat = "0.000"
    Else
        rge(2, 1).Resize(l, 2).Copy
        outBgn(3, 2).PasteSpecial xlPasteValues
    End If
    'If dataInfo.nFuncId = 3 And dataInfo.nSmpNum < g_aDialog.dlgGs.nLmtSmp1 Then
    '    outBgn.Worksheet.Rows(outBgn.Row + 3).Delete
    'End If
    #Else
    l = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            l = l + dataInfo.items(i).NewCateNum - 1
        Else
            l = l + 1
        End If
    Next i
    v = rge(2, 1).Resize(l, 2).Value
    k = 2
    l = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).NewCateNum - 1
                outBgn(k + dataInfo.items(i).NewCates(j - 1), 2) = v(l, 1)
                outBgn(k + dataInfo.items(i).NewCates(j - 1), 3) = v(l, 2)
                k = k + 1
                l = l + 1
            Next j
        Else
            outBgn(k, 2) = v(l, 1)
            outBgn(k, 3) = v(l, 2)
            k = k + 1
            l = l + 1
        End If
    Next i
    outBgn(k, 2) = v(l, 1)
    outBgn(k, 3) = v(l, 2)
    #End If
    Set MakeItemScore = outBgn
End Function

Function MakeCateScore(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rge As Range
    Dim aryCate(1 To MAX_XNUM) As Long
    Dim v As Variant
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATESCORE)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CATESCORE, rge, dataInfo.nItm)
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            aryCate(i) = dataInfo.items(i).CateNum
        ElseIf dataInfo.items(i).kind = 3 Then
            If dataInfo.bNumCate Then
                aryCate(i) = dataInfo.items(i).NumCate
            Else
                aryCate(i) = 1
            End If
        End If
    Next i
    Set rge = AdjustTableByCat(TBLID_SR1_CATESCORE, rge, aryCate, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    l = 3
    For i = 1 To dataInfo.nItm
        rge(l, 1) = dataInfo.items(i).name
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).CateNum
                rge(l, 2) = dataInfo.items(i).Cate(j).name
                l = l + 1
            Next j
        Else
            If dataInfo.bNumCate Then
                For j = 1 To dataInfo.items(i).NumCate
                    rge(l, 2) = dataInfo.items(i).Cate(j).name
                    l = l + 1
                Next j
            Else
                rge(l, 2) = dataInfo.items(i).Cate(1).name
                l = l + 1
            End If
        End If
        'l = l + IIf(dataInfo.items(i).kind = 2, dataInfo.items(i).CateNum, dataInfo.items(i).NumCate)
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd|f|fffd||fffd||fffd||fffd|")
    #If 0 Then
    rge(3, 1).Resize(l - 2, 3).Copy
    outBgn(3, 3).PasteSpecial xlPasteValues

    'If dataInfo.nFuncId = 3 And dataInfo.nSmpNum < g_aDialog.dlgGs.nLmtSmp1 Then
    '    outBgn.Worksheet.Rows(outBgn.Row + 3).Delete
    '    l = l - 1
    'End If
    #Else
    l = 3
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            l = l + dataInfo.items(i).NewCateNum
        Else
            If dataInfo.bNumCate Then
                l = l + dataInfo.items(i).NumCate
            Else
                l = l + 1
            End If
        End If
    Next i
    v = rge(3, 1).Resize(l - 2, 3).Value
    l = 3
    k = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).CateNum
                outBgn(l - 1 + j, 3) = "|fffd|G|fffd||fffd||fffd|["
                outBgn(l - 1 + j, 4) = "|fffd|G|fffd||fffd||fffd|["
                outBgn(l - 1 + j, 5) = "|fffd|G|fffd||fffd||fffd|["
            Next j
            For j = 1 To dataInfo.items(i).NewCateNum
                outBgn(l - 1 + dataInfo.items(i).NewCates(j - 1), 3) = v(k, 1)
                outBgn(l - 1 + dataInfo.items(i).NewCates(j - 1), 4) = v(k, 2)
                outBgn(l - 1 + dataInfo.items(i).NewCates(j - 1), 5) = v(k, 3)
                k = k + 1
            Next j
            l = l + dataInfo.items(i).CateNum
        Else
            If dataInfo.bNumCate Then
                For j = 1 To dataInfo.items(i).NumCate
                    outBgn(l - 1 + j, 3) = "|fffd|G|fffd||fffd||fffd|["
                    outBgn(l - 1 + j, 4) = "|fffd|G|fffd||fffd||fffd|["
                    outBgn(l - 1 + j, 5) = "|fffd|G|fffd||fffd||fffd|["
                Next j
                For j = 1 To dataInfo.items(i).NumCate
                    outBgn(l - 1 + j, 3) = v(k, 1)
                    outBgn(l - 1 + j, 4) = v(k, 2)
                    outBgn(l - 1 + j, 5) = v(k, 3)
                    k = k + 1
                Next j
                l = l + dataInfo.items(i).NumCate
            Else
                'outBgn(l, 3) = "|fffd|G|fffd||fffd||fffd|["
                'outBgn(l, 4) = "|fffd|G|fffd||fffd||fffd|["
                'outBgn(l, 5) = "|fffd|G|fffd||fffd||fffd|["
                outBgn(l, 3) = v(k, 1)
                outBgn(l, 4) = v(k, 2)
                outBgn(l, 5) = v(k, 3)
                l = l + 1
                k = k + 1
            End If
        End If
    Next i
    outBgn(l, 3) = v(k, 1)
    outBgn(l, 4) = v(k, 2)
    #End If
    
    DrawSr1CateScore outBgn(2, 8), outBgn(3, 1).Resize(l - 3, 3), dataInfo
    
    If outBgn.Rows.Count < 17 Then
        Set outBgn = outBgn(1, 1).Resize(17, outBgn.Columns.Count)
    End If
    
    Set MakeCateScore = outBgn
    
End Function

Function MakeSmpScore(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rge As Range
    Dim ctNew(1) As Long
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_SMPSCORE)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    ctNew(1) = dataInfo.nVarSmpNum
    Set rge = AdjustTableByCat(TBLID_SR1_SMPSCORE, rge, ctNew, 1)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge

    For i = 1 To dataInfo.nVarSmpNum
        outBgn(2 + i, 1) = SbkThis.Sheets("Sr1Data").Cells(i + 1, 1)
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\")
    rge(3, 2).Resize(dataInfo.nVarSmpNum, 4).Copy
    outBgn(3, 2).PasteSpecial xlPasteValues
    outBgn(1, 1) = "|fffd|\|fffd||fffd||fffd|\"
    outBgn(2, 1) = "No." '"|fffd||fffd||fffd||fffd|", 12.12.10 LSQ mdf
    outBgn(2, 3) = "|fffd|\|fffd||fffd||fffd|l"
    Application.CutCopyMode = False
    
    Set MakeSmpScore = outBgn
End Function

Function MakeObjectiveItem(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_OBJECTIVEITEM)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_OBJECTIVEITEM, rge, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    
    For i = 1 To dataInfo.nItm
        outBgn(2 + i, 1) = dataInfo.items(i).name
    Next i
    
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd||fffd||fffd|W|fffd|E|fffd||693|I|fffd||3d0||fffd||fffd||183|A|fffd|C|fffd|e|fffd||fffd||fffd||311||fffd||fffd||58c|W|fffd||fffd|")
    rge(2, 2).Resize(dataInfo.nItm, 6).Copy
    outBgn(3, 2).PasteSpecial xlPasteValues

    Application.CutCopyMode = False
    
    For i = 1 To dataInfo.nItm
        If IsNumeric(outBgn(2 + i, 2)) Then
            outBgn(2 + i, 3) = WorksheetFunction.Rank(outBgn(2 + i, 2), outBgn(3, 2).Resize(dataInfo.nItm, 1)) & "|fffd||fffd|"
        End If
        outBgn(2 + i, 5) = WorksheetFunction.Rank(outBgn(2 + i, 4), outBgn(3, 4).Resize(dataInfo.nItm, 1)) & "|fffd||fffd|"
        outBgn(2 + i, 7) = WorksheetFunction.Rank(outBgn(2 + i, 6), outBgn(3, 6).Resize(dataInfo.nItm, 1)) & "|fffd||fffd|"
    Next i
    Set MakeObjectiveItem = outBgn
End Function

Function MakeItemCorr(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_ITEMCORR)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_ITEMCORR, rge, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    
    For i = 1 To dataInfo.nItm
        outBgn(2, i + 2) = dataInfo.items(i).name
        outBgn(3 + (i - 1) * 3, 1) = dataInfo.items(i).name
    Next i
    
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||511||fffd||fffd||742||312|P|fffd||fffd||fffd||58c|W|fffd||fffd|")
    rge(2, 1).Resize(dataInfo.nItm * 3, dataInfo.nItm).Copy
    outBgn(3, 3).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    For i = 1 To dataInfo.nItm
        outBgn(3 + (i - 1) * 3, 2 + i).NumberFormatLocal = "0"
    Next i
    
    Set MakeItemCorr = outBgn
End Function

Function MakeAccuracy(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_ACCURACY)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd||350||fffd||fffd|x")
    rge(2, 1).Resize(5, 1).Copy
    outBgn(2, 2).PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    
    Set MakeAccuracy = outBgn
End Function

Function MakeAOV(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_AOV)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_AOV, rge, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    
    For i = 1 To dataInfo.nItm
        outBgn(3 + i, 1) = dataInfo.items(i).name
    Next i
    
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd|U|fffd||fffd||fffd||355|\")
    rge(2, 1).Resize(dataInfo.nItm + 3, 6).Copy
    outBgn(3, 2).PasteSpecial xlPasteValues

    'If dataInfo.nFuncId = 3 And dataInfo.nSmpNum < g_aDialog.dlgGs.nLmtSmp1 Then
    '    outBgn.Worksheet.Rows(outBgn.Row + 4).Delete
    'End If
    
    Application.CutCopyMode = False
    
    Set MakeAOV = outBgn
End Function

Function MakeCateItemInfo1(ByVal itemNo As Long, ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    Dim v As Variant
    Dim NewCateNum As Long
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATEITEMINFO1)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CATEITEMINFO1, rge, dataInfo.items(itemNo).CateNum)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    outBgn(1, 1) = dataInfo.items(itemNo).name
    For i = 1 To dataInfo.items(itemNo).CateNum
        outBgn(1, 2 + i) = dataInfo.items(itemNo).Cate(i).name
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("CateItemInfo" & itemNo)
    'rge(2, 1).Resize(2, dataInfo.items(itemNo).CateNum + 1).Copy
    'outBgn(2, 3).PasteSpecial xlPasteValues
    'Application.CutCopyMode = False
    v = rge(2, 1).Resize(2, dataInfo.items(itemNo).CateNum + 1).Value
    For i = 1 To dataInfo.items(itemNo).CateNum
        outBgn(2, 2 + i) = 0
        outBgn(3, 2 + i) = 0
    Next i
    NewCateNum = dataInfo.items(itemNo).NewCateNum
    For i = 1 To NewCateNum
        outBgn(2, 2 + dataInfo.items(itemNo).NewCates(i - 1)) = v(1, i)
        outBgn(3, 2 + dataInfo.items(itemNo).NewCates(i - 1)) = v(2, i)
    Next i
    outBgn(2, 2 + dataInfo.items(itemNo).CateNum + 1) = v(1, 1 + NewCateNum)
    outBgn(3, 2 + dataInfo.items(itemNo).CateNum + 1) = v(2, 1 + NewCateNum)
    
    Set MakeCateItemInfo1 = outBgn
End Function

Function MakeCateItemInfo2(ByVal itemNo As Long, ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATEITEMINFO2)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CATEITEMINFO2, rge, dataInfo.items(itemNo).NumCate)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    outBgn(1, 1) = dataInfo.items(itemNo).name
    For i = 1 To dataInfo.items(itemNo).NumCate
        outBgn(1, 2 + i) = dataInfo.items(itemNo).Cate(i).Code
        outBgn(2, 2 + i) = dataInfo.items(itemNo).Cate(i).name
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("CateItemInfo" & itemNo)
    rge(2, 1).Resize(2, dataInfo.items(itemNo).NumCate + 1).Copy
    outBgn(3, 3).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    Set MakeCateItemInfo2 = outBgn
End Function

Function MakeCateItemInfo(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range, RgeOut As Range
    
    outBgn(1, 1) = "|fffd||fffd||fffd|I|fffd|f|fffd|[|fffd|^|fffd||30a||fffd|{|fffd|W|fffd|v"
    outBgn(1, 1).Font.Bold = True
    If dataInfo.nItmCat > 0 Or dataInfo.bNumCate Then
        Set rge = outBgn(1, 1)
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 2 Then
                Set RgeOut = rge.Range("A1").Offset(rge.Rows.Count + 1, 0)
                Set rge = MakeCateItemInfo1(i, RgeOut, dataInfo)
            ElseIf dataInfo.bNumCate Then
                Set RgeOut = rge.Range("A1").Offset(rge.Rows.Count + 1, 0)
                Set rge = MakeCateItemInfo2(i, RgeOut, dataInfo)
            End If
        Next i
        
        Set MakeCateItemInfo = rge
    Else
        outBgn(2, 1) = "|fffd|Y|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||202||fffd|"
        Set MakeCateItemInfo = outBgn(1, 1).Resize(2, 1)
    End If
End Function

Function MakeNumItemInfo(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_NUMITEMINFO)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_NUMITEMINFO, rge, dataInfo.nItmNum + 1)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge

    outBgn(2, 2) = dataInfo.ObjVarName
    j = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 3 Then
            outBgn(2, 2 + j) = dataInfo.items(i).name
            j = j + 1
        End If
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd||283|f|fffd|[|fffd|^|fffd||30a||fffd|{|fffd|W|fffd|v")
    rge(2, 1).Resize(19, dataInfo.nItmNum + 1).Copy
    outBgn(3, 2).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    Set MakeNumItemInfo = outBgn
End Function

Function MakeExtraInfo(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    Dim ctNew(1) As Variant

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_EXTRAINFO)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    ctNew(1) = dataInfo.nItm
    Set rge = AdjustTableByItm(TBLID_SR1_EXTRAINFO, rge, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge

    For i = 1 To dataInfo.nItm
        outBgn(2 + i, 1) = dataInfo.items(i).name
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||1c9||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|")
    rge(2, 2).Resize(ctNew(1), 6).Copy
    outBgn(3, 2).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    Set MakeExtraInfo = outBgn
End Function

Function MakeATARICMB1(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    Dim ctNew(1) As Variant

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_ATARI_CMB1)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    ctNew(1) = dataInfo.nItm
    Set rge = AdjustTableByCat(TBLID_SR1_ATARI_CMB1, rge, ctNew, 1)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    outBgn(2, 2) = dataInfo.ObjVarName
    outBgn(2, 3) = ""
    For i = 1 To dataInfo.nItm
        outBgn(2 + i, 1) = "|fffd|A|fffd|C|fffd|e|fffd||fffd|" & i
        outBgn(2 + i, 2) = dataInfo.items(i).name
        outBgn(2 + i, 3) = IIf(dataInfo.items(i).kind = 2, dataInfo.items(i).CateNum, 0)
    Next i
    Set MakeATARICMB1 = outBgn
End Function

Function MakeATARICMB2(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    Dim ctNew(1) As Variant

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_ATARI_CMB2)
    rge.Copy outBgn
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    ctNew(1) = WorksheetFunction.Power(2, dataInfo.nItm) - 1
    Set rge = AdjustTableByCat(TBLID_SR1_ATARI_CMB2, rge, ctNew, 1)
    Set rge = AdjustTableByItm(TBLID_SR1_ATARI_CMB2, rge, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge

    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd|v|fffd||fffd|-ATARI")
    rge(3, 1).Resize(ctNew(1), 9 + dataInfo.nItm).Copy
    outBgn(2, 1).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    Set MakeATARICMB2 = outBgn
End Function

Function MakeATARICMB3(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    Dim ctNew() As Variant

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_ATARI_CMB3)
    rge.Copy outBgn
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    l = WorksheetFunction.Power(2, dataInfo.nItm) - 1
    ReDim ctNew(1 To 1)
    ctNew(1) = l
    'Set rge = AdjustTableByItm(TBLID_SR1_ATARI_CMB3, rge, l)
    Set rge = AdjustTableByCat(TBLID_SR1_ATARI_CMB3, rge, ctNew, 1)
    Set rge = AdjustTableByItm(TBLID_SR1_ATARI_CMB3_ITM, rge, dataInfo.nItm)

    ReDim ctNew(1 To dataInfo.nItm)
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            ctNew(i) = dataInfo.items(i).CateNum
        ElseIf dataInfo.items(i).kind = 3 Then
            If dataInfo.bNumCate Then
                ctNew(i) = dataInfo.items(i).NumCate
            Else
                ctNew(i) = 1
            End If
        End If
    Next i
    Set rge = AdjustTableByCat(TBLID_SR1_ATARI_CMB3_CATE, rge, ctNew, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    l = 5
    For i = 1 To dataInfo.nItm
        outBgn(2, l) = dataInfo.items(i).name
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).CateNum
                outBgn(3, l) = dataInfo.items(i).Cate(j).name
                l = l + 1
            Next j
        Else
            If dataInfo.bNumCate Then
                For j = 1 To dataInfo.items(i).NumCate
                    outBgn(3, l) = dataInfo.items(i).Cate(j).name
                    l = l + 1
                Next j
            Else
                outBgn(3, l) = dataInfo.items(i).Cate(1).name
                l = l + 1
            End If
        End If
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|X|fffd|R|fffd|A-ATARI")
    l = WorksheetFunction.Power(2, dataInfo.nItm) - 1
    rge(3, 1).Resize(l, 100).Copy
    outBgn(4, 1).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    Set MakeATARICMB3 = outBgn
End Function

Sub DrawSr1CateScore(ByVal oRge As Range, ByVal DataRge As Range, dataInfo As BasInfo)
    Dim i As Long
    Dim tmpstr As String
    Dim XAxis As Long, YAxis As Long, NameDisp As Long
    Dim tmpRge As Range
    NameDisp = IIf(dataInfo.sr1Grp.bCateName, 1, 0)
    tmpstr = vbNullString
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            tmpstr = tmpstr & "," & dataInfo.items(i).CateNum
        Else
            If dataInfo.bNumCate Then
                tmpstr = tmpstr & "," & dataInfo.items(i).NumCate
            Else
                tmpstr = tmpstr & "," & 1
            End If
        End If
    Next i
    tmpstr = Mid(tmpstr, 2)
    Set tmpRge = DataRge(1, 2).Resize(DataRge.Rows.Count, DataRge.Columns.Count - 1)
    Application.Run GxlaBkGraph2 & "!DrawSr2CateScore1", oRge.Worksheet.name, _
                        Comm_toXlRCstr(oRge.Address), _
                        Comm_toXlRCstr(tmpRge.Columns(3).Address), _
                        "XRge=" & Comm_toXlRCstr(tmpRge.Columns(1).Address) & _
                        "&AxesNo=" & 1 & "&Rows=16&Cols=8&Cates=" & tmpstr & "&GrpType=1"
    Set oRge = oRge.Offset(0, 9)
End Sub

Sub DrawSr1LogGrp(ByVal oRge As Range, ByVal DataRge As Range, dataInfo As BasInfo)
    Dim i As Long
    Dim tmpstr As String
    Dim XAxis As Long, YAxis As Long, NameDisp As Long
    Dim tmpRge As Range
    Set tmpRge = DataRge(1, 1).Resize(dataInfo.nSmpNum, 1)
    Application.Run GxlaBkGraph2 & "!DrawSr1LogGrp", oRge.Worksheet.name, _
                        Comm_toXlRCstr(oRge.Range("A1").Address), _
                        Comm_toXlRCstr(tmpRge.Address), _
                        "SmpNum=" & dataInfo.nSmpNum
    Set oRge = oRge.Offset(0, 9)
End Sub

Private Function AdjustTableByItm(tblId As Long, ByVal tblRge As Range, xNew As Long) As Range
    
    Dim rowCnt As Long, colCnt As Long, rowCntNew As Long, colCntNew As Long
    Dim dx As Long, cnt As Long
    Dim tmpRge As Range
    Dim height As Long, tmpi As Long
    Dim i As Long
    
    rowCnt = tblRge.Rows.Count
    colCnt = tblRge.Columns.Count
    dx = xNew - TMP_INUM
    
    Select Case tblId
    
        Case TBLID_SR1_CATEAVG
            
            height = TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew + 1).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_CROSSTABLE, TBLID_SR1_CATECORR
            
            height = TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
                Call doInsRowCol(False, tblRge.Columns(colCnt - 1).Resize(rowCntNew, height), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
                tblRge.Columns(colCntNew).Resize(rowCntNew, Abs(cnt)).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_SR1_CRAM
            
            height = ROWNUM_CRAM 'old: 3, 11.8.20 LSQ mdf
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = IIf(dx > 0, xNew + 1, 4)
            
            'table without legend
            tmpi = ROWNUM_CRAM + 4
            rowCnt = rowCnt - tmpi
            colCnt = colCnt - 1
            
            Set tmpRge = tblRge.Offset(tmpi, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - ROWNUM_CRAM + 1).Resize(height, colCnt), dx)
                Call doInsRowCol(False, tmpRge.Resize(rowCnt + cnt, colCnt).Columns(colCnt - 1), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
                tmpRge.Columns(2).Resize(rowCnt, 1).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_SR1_OBJECTIVEITEM
            
            cnt = dx
            rowCntNew = rowCnt + dx
            colCntNew = colCnt
            If dx > 0 Then
                For i = 1 To dx
                    tblRge.Rows(rowCnt).Resize(1, colCnt).Insert Shift:=xlDown
                Next i
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew + 1).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
            End If
        
        Case TBLID_SR1_ITEMCORR
            
            height = 3
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt + dx
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 2).Resize(height, colCnt), dx)
                Call doInsRowCol(False, tblRge.Columns(colCnt - 1).Resize(rowCntNew, 1), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew + 1).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
                tblRge.Columns(colCntNew + 1).Resize(rowCntNew, Abs(cnt)).Delete Shift:=xlToLeft
            End If

        Case TBLID_SR1_AOV
            
            height = 1
            cnt = dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 2).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(5).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_CORR
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dx
            
            Set tmpRge = tblRge.Offset(7, 0).Resize(rowCnt - 7, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(False, tmpRge.Columns(2), dx)
            ElseIf dx < 0 Then
                tmpRge.Columns(2).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_EIGEN
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_CATESCORE
            
            height = TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 2).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_ITEMSCORE
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1), dx, False)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCnt - 1).Delete Shift:=xlUp
            End If
            
        Case TBLID_NUMCATE
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_EXTRAINFO
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_CATEITEMINFO1
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(False, tblRge.Columns(3), dx)
            ElseIf dx < 0 Then
                tblRge.Columns(2).Delete Shift:=xlToLeft
            End If
        
        Case TBLID_SR1_CATEITEMINFO2
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(False, tblRge.Columns(3), dx)
            ElseIf dx < 0 Then
                tblRge.Columns(3).Delete Shift:=xlToLeft
            End If
           
        Case TBLID_SR1_NUMITEMINFO
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(False, tblRge.Columns(2), dx, False)
            ElseIf dx < 0 Then
                tblRge.Columns(2).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_SR1_OBJECTIVECORR
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(3).Resize(height, colCnt).Delete Shift:=xlUp
            End If
        
        Case TBLID_SR1_EXTRAINFO
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
        
        Case TBLID_SR1_CATEITEMCORR_STAT
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx, False)
                Call doInsRowCol(False, tblRge.Columns(2), dx, False)
            ElseIf dx < 0 Then
                tblRge.Rows(4).Resize(height, colCnt).Delete Shift:=xlUp
                tblRge.Columns(2).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_SR1_CATEITEMCORR_PVAL
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx, False)
                Call doInsRowCol(False, tblRge.Columns(2), dx, False)
            ElseIf dx < 0 Then
                tblRge.Rows(3).Resize(height, colCnt).Delete Shift:=xlUp
                tblRge.Columns(2).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_SR1_CATEITEMCORR_JUDGE
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx, False)
                Call doInsRowCol(False, tblRge.Columns(2), dx, False)
            ElseIf dx < 0 Then
                tblRge.Rows(3).Resize(height, colCnt).Delete Shift:=xlUp
                tblRge.Columns(2).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_SR1_CATENUMCORR_STAT, TBLID_SR1_CATENUMCORR_PVAL, TBLID_SR1_CATENUMCORR_JUDGE
            dx = xNew - 1
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx, False)
            ElseIf dx < 0 Then
                tblRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_NUMITEMCORR_STAT, TBLID_SR1_NUMITEMCORR_PVAL, TBLID_SR1_NUMITEMCORR_JUDGE
            dx = xNew - 1
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx, False)
            ElseIf dx < 0 Then
                tblRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_ATARI_CMB2
            rowCntNew = rowCnt
            colCntNew = colCnt + dx
            
            
            If dx > 0 Then
                Call doInsRowCol(False, tblRge.Columns(10), dx, False)
            ElseIf dx < 0 Then
                tblRge(1, 11) = tblRge(1, 10)
                tblRge.Columns(10).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_SR1_ATARI_CMB3
            
            height = 1
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 2).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew + 1).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_ATARI_CMB3_ITM
            
            height = TMP_CNUM_ATARI 'TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(False, tblRge.Columns(colCnt - TMP_CNUM_ATARI + 1).Resize(rowCntNew, height), dx)
            ElseIf dx < 0 Then
                tblRge.Columns(colCntNew).Resize(rowCntNew, Abs(cnt)).Delete Shift:=xlToLeft
            End If
            
        Case Else
            
            rowCntNew = rowCnt
            colCntNew = colCnt
            
    End Select
    
    Set AdjustTableByItm = tblRge.Resize(rowCntNew, colCntNew)
    
End Function

Private Function AdjustTableByCat(tblId As Long, ByVal tblRge As Range, ctNew As Variant, cnt As Long) As Range
    
    Dim rowCnt As Long, colCnt As Long, rowCntNew As Long, colCntNew As Long
    Dim vPos() As Long, vChg() As Long
    Dim chg As Long
    Dim change As Long
    Dim i As Long
    
    rowCnt = tblRge.Rows.Count
    colCnt = tblRge.Columns.Count
    ReDim vPos(1 To cnt)
    ReDim vChg(1 To cnt)
    
    Select Case tblId
    
        Case TBLID_SR1_CATEAVG
            
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 5, 4) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_SR1_CROSSTABLE, TBLID_SR1_CATECORR
                        
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 4, 3) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt + change
            
            Set tblRge = tblRge.Offset(1, 0).Resize(rowCnt - 1, colCnt)
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            Set tblRge = tblRge.Resize(rowCntNew - 1, colCnt)
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            Set tblRge = tblRge.Offset(-1, 0)
            
        Case TBLID_SR1_CATESCORE
            
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 4, 3) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_SR1_SMPSCORE
            
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 4, 3) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_SR1_ATARI_CMB1
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 4, 3) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_SR1_ATARI_CMB2
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 3, 2) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_SR1_ATARI_CMB3
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 5, 4) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_SR1_ATARI_CMB3_CATE
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM_ATARI
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 6, 5) + TMP_CNUM_ATARI * (i - 1)
            Next i
            
            rowCntNew = rowCnt
            colCntNew = colCnt + change
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_SR1_OBJECTIVECORR
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 4, 3) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
        Case Else
            
            rowCntNew = rowCnt
            colCntNew = colCnt
            
    End Select
    
    Set AdjustTableByCat = tblRge.Resize(rowCntNew, colCntNew)
    
End Function

Function AdjustTableByGrp(tblId As Long, ByVal tblRge As Range, gNew As Long) As Range
    
    Dim rowCnt As Long, colCnt As Long, rowCntNew As Long, colCntNew As Long
    Dim vPos(1 To 3) As Long, vChg(1 To 3) As Long
    Dim dg As Long
    Dim i As Long
    
    rowCnt = tblRge.Rows.Count
    colCnt = tblRge.Columns.Count
    dg = gNew - TMP_GNUM
    
    Select Case tblId
    
        Case TBLID_SR1_CATEAVG
            
            rowCntNew = rowCnt
            colCntNew = colCnt + 3 * dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = dg
            
            vPos(1) = 4: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_MODEL
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 4: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_NUMCATE
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = dg
            
            vPos(1) = 6: If dg > 0 Then vPos(1) = 6 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_EXTRAINFO
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 3: If dg > 0 Then vPos(1) = 3 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_SMPSCORE
            
            rowCntNew = rowCnt
            colCntNew = colCnt + 2 * dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = 0
            
            vPos(1) = 2: If dg > 0 Then vPos(1) = 1 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_NTABLE, TBLID_HTABLE, TBLID_VTABLE
            rowCntNew = rowCnt + dg
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 5: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 6: If dg > 0 Then vPos(1) = 5 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_EIGEN
            rowCntNew = rowCnt
            colCntNew = colCnt + dg - 1
            vChg(1) = dg - 1
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 4: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
        
        Case TBLID_ASR
            rowCntNew = rowCnt + dg
            colCntNew = colCnt
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 5: If dg > 0 Then vPos(1) = 5 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_BARY
            rowCntNew = rowCnt + dg
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 2: If dg > 0 Then vPos(1) = 1 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 3: If dg > 0 Then vPos(1) = 3 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_ATARI_CMB2
            rowCntNew = rowCnt
            colCntNew = colCnt + 2 * dg
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = 0
            
            vPos(1) = 5: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 5
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_SR1_CATENUMCORR_STAT, TBLID_SR1_CATENUMCORR_PVAL, TBLID_SR1_CATENUMCORR_JUDGE
            
            dg = gNew - 1
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = dg
            
            vPos(1) = 2: If dg > 0 Then vPos(1) = 2
            vPos(2) = vPos(1) + 1
            vPos(3) = vPos(2) + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_SR1_NUMITEMCORR_STAT, TBLID_SR1_NUMITEMCORR_PVAL, TBLID_SR1_NUMITEMCORR_JUDGE
            
            dg = gNew - 1
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = dg
            
            vPos(1) = 2: If dg > 0 Then vPos(1) = 2
            vPos(2) = vPos(1) + 1
            vPos(3) = vPos(2) + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case Else
            
            rowCntNew = rowCnt
            colCntNew = colCnt
            
    End Select
    
    Set AdjustTableByGrp = tblRge.Resize(rowCntNew, colCntNew)
    
End Function

'
'adjust rows or columns
'11.8.14 LSQ
'
Private Sub doInsRowCol(ByVal bRow As Boolean, ByVal rge As Range, ByVal cnt As Long, Optional ByVal bCopy As Boolean = True)
    
    Dim rowCnt As Long, colCnt As Long
    
    rowCnt = rge.Rows.Count
    colCnt = rge.Columns.Count
    
    If bCopy Then rge.Copy
    
    If bRow Then
        rge.Offset(rowCnt, 0).Resize(rowCnt * cnt, colCnt).Insert Shift:=xlDown
    Else
        rge.Offset(0, colCnt).Resize(rowCnt, colCnt * cnt).Insert Shift:=xlToRight
    End If
    
    Application.CutCopyMode = False
    
End Sub

Function AdjustRows(ByVal rge As Range, vPos As Variant, vChg As Variant) As Range
    
    Set AdjustRows = AdjustRowCol(True, rge, vPos, vChg)
    
End Function

Function AdjustCols(ByVal rge As Range, vPos As Variant, vChg As Variant) As Range
    
    Set AdjustCols = AdjustRowCol(False, rge, vPos, vChg)
    
End Function
'
'Insert or Delete rows or columns
'Used mainly in category adjustment
'
'bRow : True = Row operation, False = Column operation
'
Private Function AdjustRowCol(ByVal bRow As Boolean, ByVal rge As Range, vPos As Variant, vChg As Variant) As Range
    
    Dim rowNum As Long, colNum As Long, rowNumNew As Long, colNumNew As Long
    Dim strAddr As String
    Dim pos As Long, chg As Long
    Dim change As Long
    Dim i As Long
    
    strAddr = rge.Range("A1").Address
    rowNum = rge.Rows.Count
    colNum = rge.Columns.Count
    change = 0
    
    For i = UBound(vPos) To LBound(vPos) Step -1
        pos = vPos(i)
        chg = vChg(i)
        change = change + chg
        
        If bRow Then
            If chg > 0 Then
                rge.Rows(pos).Resize(chg, colNum).Insert Shift:=xlDown
            ElseIf chg < 0 Then
                rge.Rows(pos).Resize(-chg, colNum).Delete Shift:=xlUp
                If Abs(chg) = 1 Then
                    rge.Rows(pos).Resize(1, colNum).Borders(xlEdgeTop).Weight = xlThin
                End If
            End If
        Else
            If chg > 0 Then
                rge.Columns(pos).Resize(rowNum, chg).Insert Shift:=xlToRight
            ElseIf chg < 0 Then
                rge.Columns(pos).Resize(rowNum, -chg).Delete Shift:=xlToLeft
                If Abs(chg) = 1 Then
                    rge.Columns(pos).Resize(rowNum, 1).Borders(xlEdgeLeft).Weight = xlThin
                End If
            End If
        End If
    Next i
    
    If bRow Then
        rowNumNew = rowNum + change
        colNumNew = colNum
    Else
        rowNumNew = rowNum
        colNumNew = colNum + change
    End If
    
    Set AdjustRowCol = rge.Worksheet.Range(strAddr).Resize(rowNumNew, colNumNew)
    
End Function

Attribute VB_Name = "MdlTableSr1A"
'=======================================================
' Sub of make table
'
' 2011.8 LSQ
'=======================================================
Option Explicit
Option Private Module

Function TMPRGE_SR1_CATEAVG() As String
    TMPRGE_SR1_CATEAVG = findAddr_TBL(TBLID_SR1_CATEAVG)
End Function

Function TMPRGE_SR1_OBJECTIVECORR() As String
    TMPRGE_SR1_OBJECTIVECORR = findAddr_TBL(TBLID_SR1_OBJECTIVECORR)
End Function

Function TMPRGE_SR1_CROSSTABLE() As String
    TMPRGE_SR1_CROSSTABLE = findAddr_TBL(TBLID_SR1_CROSSTABLE)
End Function

Function TMPRGE_SR1_CATECORR() As String
    TMPRGE_SR1_CATECORR = findAddr_TBL(TBLID_SR1_CATECORR)
End Function

Function TMPRGE_SR1_ACCURACY() As String
    TMPRGE_SR1_ACCURACY = findAddr_TBL(TBLID_SR1_ACCURACY)
End Function

Function TMPRGE_SR1_AOV() As String
    TMPRGE_SR1_AOV = findAddr_TBL(TBLID_SR1_AOV)
End Function

Function TMPRGE_SR1_CATESCORE() As String
    TMPRGE_SR1_CATESCORE = findAddr_TBL(TBLID_SR1_CATESCORE)
End Function

Function TMPRGE_SR1_CRAM() As String
    TMPRGE_SR1_CRAM = findAddr_TBL(TBLID_SR1_CRAM)
End Function

Function TMPRGE_SR1_ITEMCORR() As String
    TMPRGE_SR1_ITEMCORR = findAddr_TBL(TBLID_SR1_ITEMCORR)
End Function

Function TMPRGE_SR1_OBJECTIVEITEM() As String
    TMPRGE_SR1_OBJECTIVEITEM = findAddr_TBL(TBLID_SR1_OBJECTIVEITEM)
End Function

Function TMPRGE_SR1_SMPSCORE() As String
    TMPRGE_SR1_SMPSCORE = findAddr_TBL(TBLID_SR1_SMPSCORE)
End Function

Function TMPRGE_SR1_EXTRAINFO() As String
    TMPRGE_SR1_EXTRAINFO = findAddr_TBL(TBLID_SR1_EXTRAINFO)
End Function

Function TMPRGE_SR1_CATEITEMINFO1() As String
    TMPRGE_SR1_CATEITEMINFO1 = findAddr_TBL(TBLID_SR1_CATEITEMINFO1)
End Function

Function TMPRGE_SR1_CATEITEMINFO2() As String
    TMPRGE_SR1_CATEITEMINFO2 = findAddr_TBL(TBLID_SR1_CATEITEMINFO2)
End Function

Function TMPRGE_SR1_NUMITEMINFO() As String
    TMPRGE_SR1_NUMITEMINFO = findAddr_TBL(TBLID_SR1_NUMITEMINFO)
End Function

Function TMPRGE_SR1_CATEITEMCORR_TITLE() As String
    TMPRGE_SR1_CATEITEMCORR_TITLE = findAddr_TBL(TBLID_SR1_CATEITEMCORR_TITLE)
End Function

Function TMPRGE_SR1_CATEITEMCORR_STAT() As String
    TMPRGE_SR1_CATEITEMCORR_STAT = findAddr_TBL(TBLID_SR1_CATEITEMCORR_STAT)
End Function

Function TMPRGE_SR1_CATEITEMCORR_PVAL() As String
    TMPRGE_SR1_CATEITEMCORR_PVAL = findAddr_TBL(TBLID_SR1_CATEITEMCORR_PVAL)
End Function

Function TMPRGE_SR1_CATEITEMCORR_JUDGE() As String
    TMPRGE_SR1_CATEITEMCORR_JUDGE = findAddr_TBL(TBLID_SR1_CATEITEMCORR_JUDGE)
End Function

Function TMPRGE_SR1_CATENUMCORR_TITLE() As String
    TMPRGE_SR1_CATENUMCORR_TITLE = findAddr_TBL(TBLID_SR1_CATENUMCORR_TITLE)
End Function

Function TMPRGE_SR1_CATENUMCORR_STAT() As String
    TMPRGE_SR1_CATENUMCORR_STAT = findAddr_TBL(TBLID_SR1_CATENUMCORR_STAT)
End Function

Function TMPRGE_SR1_CATENUMCORR_PVAL() As String
    TMPRGE_SR1_CATENUMCORR_PVAL = findAddr_TBL(TBLID_SR1_CATENUMCORR_PVAL)
End Function

Function TMPRGE_SR1_CATENUMCORR_JUDGE() As String
    TMPRGE_SR1_CATENUMCORR_JUDGE = findAddr_TBL(TBLID_SR1_CATENUMCORR_JUDGE)
End Function

Function TMPRGE_SR1_NUMITEMCORR_TITLE() As String
    TMPRGE_SR1_NUMITEMCORR_TITLE = findAddr_TBL(TBLID_SR1_NUMITEMCORR_TITLE)
End Function

Function TMPRGE_SR1_NUMITEMCORR_STAT() As String
    TMPRGE_SR1_NUMITEMCORR_STAT = findAddr_TBL(TBLID_SR1_NUMITEMCORR_STAT)
End Function

Function TMPRGE_SR1_NUMITEMCORR_PVAL() As String
    TMPRGE_SR1_NUMITEMCORR_PVAL = findAddr_TBL(TBLID_SR1_NUMITEMCORR_PVAL)
End Function

Function TMPRGE_SR1_NUMITEMCORR_JUDGE() As String
    TMPRGE_SR1_NUMITEMCORR_JUDGE = findAddr_TBL(TBLID_SR1_NUMITEMCORR_JUDGE)
End Function

Function TMPRGE_SR1_ITEMSCORE() As String
    TMPRGE_SR1_ITEMSCORE = findAddr_TBL(TBLID_SR1_ITEMSCORE)
End Function

Function TMPRGE_SR1_ATARI_CMB1() As String
    TMPRGE_SR1_ATARI_CMB1 = findAddr_TBL(TBLID_SR1_ATARI_CMB1)
End Function

Function TMPRGE_SR1_ATARI_CMB2() As String
    TMPRGE_SR1_ATARI_CMB2 = findAddr_TBL(TBLID_SR1_ATARI_CMB2)
End Function

Function TMPRGE_SR1_ATARI_CMB3() As String
    TMPRGE_SR1_ATARI_CMB3 = findAddr_TBL(TBLID_SR1_ATARI_CMB3)
End Function

Private Function findAddr_TBL(ByVal tblId As Integer) As String
    Dim sht As Worksheet, nmStr As String
    Dim rge As Range
    
    Set sht = SbkThis.Worksheets("TemplateTableSr1")
    nmStr = strStDefName(tblId)
    Set rge = getRange_FromStDefName(sht, nmStr)
    
    findAddr_TBL = ""
    If rge Is Nothing = False Then
        findAddr_TBL = rge.Address
    End If
End Function

Private Function strStDefName(ByVal tblId As String) As String
    strStDefName = ""
    Select Case tblId
        Case TBLID_SR1_CATEAVG: strStDefName = "SR1_CATEAVG"
        Case TBLID_SR1_OBJECTIVECORR: strStDefName = "SR1_OBJECTIVECORR"
        Case TBLID_SR1_CROSSTABLE: strStDefName = "SR1_CROSSTABLE"
        Case TBLID_SR1_CATECORR: strStDefName = "SR1_CATECORR"
        Case TBLID_SR1_ACCURACY: strStDefName = "SR1_ACCURACY"
        Case TBLID_SR1_AOV: strStDefName = "SR1_AOV"
        Case TBLID_SR1_CATESCORE: strStDefName = "SR1_CATESCORE"
        Case TBLID_SR1_CRAM: strStDefName = "SR1_CRAM"
        Case TBLID_SR1_ITEMCORR: strStDefName = "SR1_ITEMCORR"
        Case TBLID_SR1_OBJECTIVECORR: strStDefName = "SR1_OBJECTIVECORR"
        Case TBLID_SR1_OBJECTIVEITEM: strStDefName = "SR1_OBJECTIVEITEM"
        Case TBLID_SR1_SMPSCORE: strStDefName = "SR1_SAMSCORE"
        Case TBLID_SR1_EXTRAINFO: strStDefName = "SR1_EXTRAINFO"
        Case TBLID_SR1_CATEITEMINFO1: strStDefName = "SR1_CATEITEMINFO1"
        Case TBLID_SR1_CATEITEMINFO2: strStDefName = "SR1_CATEITEMINFO2"
        Case TBLID_SR1_NUMITEMINFO: strStDefName = "SR1_NUMITEMINFO"
        Case TBLID_SR1_CATEITEMCORR_TITLE: strStDefName = "SR1_CATEITEMCORR_TITLE"
        Case TBLID_SR1_CATEITEMCORR_STAT: strStDefName = "SR1_CATEITEMCORR_STAT"
        Case TBLID_SR1_CATEITEMCORR_PVAL: strStDefName = "SR1_CATEITEMCORR_PVAL"
        Case TBLID_SR1_CATEITEMCORR_JUDGE: strStDefName = "SR1_CATEITEMCORR_JUDGE"
        Case TBLID_SR1_CATENUMCORR_TITLE: strStDefName = "SR1_CATENUMCORR_TITLE"
        Case TBLID_SR1_CATENUMCORR_STAT: strStDefName = "SR1_CATENUMCORR_STAT"
        Case TBLID_SR1_CATENUMCORR_PVAL: strStDefName = "SR1_CATENUMCORR_PVAL"
        Case TBLID_SR1_CATENUMCORR_JUDGE: strStDefName = "SR1_CATENUMCORR_JUDGE"
        Case TBLID_SR1_NUMITEMCORR_TITLE: strStDefName = "SR1_NUMITEMCORR_TITLE"
        Case TBLID_SR1_NUMITEMCORR_STAT: strStDefName = "SR1_NUMITEMCORR_STAT"
        Case TBLID_SR1_NUMITEMCORR_PVAL: strStDefName = "SR1_NUMITEMCORR_PVAL"
        Case TBLID_SR1_NUMITEMCORR_JUDGE: strStDefName = "SR1_NUMITEMCORR_JUDGE"
        Case TBLID_SR1_ITEMSCORE: strStDefName = "SR1_ITEMSCORE"
        Case TBLID_SR1_ATARI_CMB1: strStDefName = "SR1_ATARI_CMB1"
        Case TBLID_SR1_ATARI_CMB2: strStDefName = "SR1_ATARI_CMB2"
        Case TBLID_SR1_ATARI_CMB3: strStDefName = "SR1_ATARI_CMB3"
    End Select

End Function
'
'|fffd|V|fffd|[|fffd|g|fffd||303|Z|fffd||fffd||fffd||348||342||30b||fffd||fffd||fffd|
'11.8.20 LSQ mdf from subdsn.xls
'
Private Function getRange_FromStDefName(ByVal stObj As Worksheet, stDefName As String) As Range
    Dim RgeObj As Range
    
    On Error Resume Next
    
    Set RgeObj = stObj.Range(stObj.Names(stDefName))
    If Err.Number <> 0 Then     'ERROR
        Set RgeObj = Nothing
        Err.Clear
    End If
    
    Set getRange_FromStDefName = RgeObj
    
    On Error GoTo 0

End Function


'=== EOF ===
Attribute VB_Name = "MdlTableSr2"
Option Explicit
Option Private Module

Const MAX_GNUM As Integer = 10
Const MAX_XNUM As Integer = 30

Const SHT_INF As String = "Sr2Info"
Const SHT_TMP As String = "TemplateTableSr2"
Const SHT_RST As String = "Sr2Result"

Const INF_BGN As String = "A1"

Public Const TBLID_GCRS As Integer = 1
Public Const TBLID_XCRS As Integer = 2
Public Const TBLID_CRAM As Integer = 3
Public Const TBLID_CORR As Integer = 4
Public Const TBLID_EIGEN As Integer = 5
Public Const TBLID_MODEL As Integer = 6
Public Const TBLID_NUMCATE As Integer = 7
Public Const TBLID_EXTRAINFO As Integer = 8
Public Const TBLID_SMPSCORE As Integer = 9
Public Const TBLID_NTABLE As Integer = 10
Public Const TBLID_HTABLE As Integer = 11
Public Const TBLID_VTABLE As Integer = 12
Public Const TBLID_BARY As Integer = 13
Public Const TBLID_ASR As Integer = 14
Public Const TBLID_ATARI_CMB1 As Integer = 15
Public Const TBLID_ATARI_CMB2 As Integer = 16
Public Const TBLID_ATARI_CMB3 As Integer = 17
Public Const TBLID_ATARI_CMB3_ITM As Integer = 18
Public Const TBLID_ATARI_CMB3_AXIS As Integer = 19
Public Const TBLID_ATARI_CMB3_CATE As Integer = 20

Const TMP_INUM As Integer = 2 'template table's item number
Const TMP_CNUM As Integer = 2 'template table's category number
Const TMP_CNUM_ATARI As Integer = 3  '11.8.19 LSQ add; |fffd|c|fffd||fffd||fffd||fffd||fffd|r|fffd||fffd|Wrong, if use 2, when realCateNum > 2
Const TMP_GNUM As Integer = 3 'template table's group number
Const TMP_ANUM As Integer = 2 'template table's axis number

Const ROWNUM_CRAM As Integer = 4   '11.8.20 LSQ add

Type Category
    id As Integer
    Code As Long
    name As String
End Type

Type Sr2_Item
    id As Integer
    kind As Integer
    name As String
    CateNum As Integer
    NumCate As Integer
    Cate() As Category
End Type

Type Sr2_Grp
    bShowGrp As Boolean
    nXAxis As Integer
    nYAxis As Integer
    bSmpName As Boolean
    bCateName As Boolean
End Type

Type BasInfo
    ObjVarName As String
    nGrp As Integer
    nSmpNum As Integer
    nVarSmpNum As Integer
    nItm As Integer     'total item number (category + numeric)
    nItmCat As Integer  'cate item number
    nItmNum As Integer  'numeric item number
    aryCate(1 To MAX_XNUM) As Integer
    nTotalCateNum As Integer
    items() As Sr2_Item
    bNumCate As Boolean
    bExtraInfo As Boolean
    nVarMethod As Integer
    sr2Grp As Sr2_Grp
End Type

Type NTABLE
    total As Long
    dHittingRatio As Double
    table(0 To 2, 0 To 2) As Long
End Type

Function ReadInfo() As BasInfo
    
    Dim info As BasInfo
    Dim rge As Range
    Dim i As Integer, j As Integer
    Dim cat As Integer
    Dim realNItm As Integer
    
    Set rge = SbkThis.Worksheets(SHT_INF).Range(INF_BGN)
    
    With info
        .ObjVarName = rge.Offset(0, 1)
        .nGrp = rge.Offset(1, 1)
        .nSmpNum = rge.Offset(3, 1)
        .nVarSmpNum = rge.Offset(3, 2)
        .nItm = rge.Offset(6, 1)
        .bNumCate = IIf(rge.Offset(13, 1) = 1, True, False)
        .bExtraInfo = IIf(rge.Offset(12, 1) = 1, True, False)
        .nVarMethod = rge.Offset(11, 1)
        
        ReDim .items(1 To .nItm)
        realNItm = 0
        .nTotalCateNum = 0
        For i = 1 To .nItm
            cat = rge.Offset(8, i)
            .items(i).id = i
            .items(i).name = rge.Offset(7, i)
            If cat > 0 Then
                realNItm = realNItm + 1
                .aryCate(realNItm) = cat
                .nTotalCateNum = .nTotalCateNum + cat
                .items(i).CateNum = cat
                .items(i).kind = 2
                ReDim .items(i).Cate(1 To cat)
                For j = 1 To cat
                    .items(i).Cate(j).id = j
                    .items(i).Cate(j).name = rge.Offset(48 + j, i)
                Next j
            Else
                .nTotalCateNum = .nTotalCateNum + 1
                .items(i).CateNum = 1
                .items(i).kind = 3
                If (.bNumCate) Then
                    .items(i).NumCate = rge.Offset(17, i)
                    ReDim .items(i).Cate(1 To .items(i).NumCate)
                    For j = 1 To .items(i).NumCate
                        .items(i).Cate(j).id = j
                        .items(i).Cate(j).Code = rge.Offset(17 + j, i)
                        .items(i).Cate(j).name = rge.Offset(48 + j, i)
                    Next j
                Else
                    .items(i).NumCate = 1
                    ReDim .items(i).Cate(1 To 1)
                    .items(i).Cate(1).id = 1
                    .items(i).Cate(1).Code = 1
                    .items(i).Cate(1).name = rge.Offset(49, i)
                End If
            End If
        Next i
        
        .nItmCat = realNItm
        .nItmNum = .nItm - .nItmCat
    End With
    
    ReadInfo = info
    
End Function

Sub test()
    
    Dim dataInfo As BasInfo
    Dim rge As Range
    
    dataInfo = ReadInfo()
    
    Set rge = Worksheets("Out").Range("A1:Z100")
    rge.Clear
    
    Set rge = MakeGCRS(Worksheets("Out").Range("C3"), dataInfo)
    Set rge = MakeXCRS(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
    Set rge = MakeCRAM(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
    Set rge = MakeCORR(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
    
    rge.Worksheet.Activate
    
End Sub

Sub Sr2_Output(ByVal kind As Long, ByVal oSheet As Worksheet, _
               ByVal bShowGrp As Boolean, ByVal nXAxis As Integer, ByVal nYAxis As Integer, ByVal bSmpName As Boolean, ByVal bCateName As Boolean, _
               Optional ByVal dWidth As Double = 0.5, Optional ByVal nPanDist As Long = 1)
    
    Dim dataInfo As BasInfo
    Dim rge As Range, grpRge As Range, bgnCel As Range, saveRge As Range, rgeCp As Range
    Dim csGrade As Double
    Dim NTable_CP As NTABLE, NTable_Sign As NTABLE
    
    dataInfo = ReadInfo()
    
    dataInfo.sr2Grp.bShowGrp = bShowGrp
    dataInfo.sr2Grp.nXAxis = nXAxis
    dataInfo.sr2Grp.nYAxis = nYAxis
    dataInfo.sr2Grp.bSmpName = bSmpName
    dataInfo.sr2Grp.bCateName = bCateName
    
    Set bgnCel = oSheet.Range("B1") 'begin output position
    Set rge = bgnCel
    
    If kind = FUNC_NO.FUNC_EXSR2 Then
        If dataInfo.nItmCat > 0 Then
            Set rge = MakeGCRS(rge, dataInfo)
            Set rge = MakeXCRS(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeCRAM(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = rge.Offset(rge.Rows.Count + 1, 0)
        End If
        If dataInfo.nItmNum > 0 Then
            Set rge = MakeCORR(rge.Range("A1"), dataInfo)
        Else
            Set rge = rge.Range("A1")
        End If
        If dataInfo.nVarMethod = 2 Then
            Set rge = MakeEIGEN(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeMODEL(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.bNumCate Then
                Set rge = MakeNumCate(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            End If
            If dataInfo.bExtraInfo Then
                Set rge = MakeExtraInfo(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            End If
            Set grpRge = rge
            Set rge = MakeSmpScore_EXSR2(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo, nPanDist)
            Set rge = MakeBARY(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.sr2Grp.bShowGrp Then
                If dataInfo.nGrp > 2 Then
                    DrawSr2TenGrp grpRge.Offset(grpRge.Rows.Count + 4, dataInfo.nGrp * 3 + 4), dataInfo
                'ElseIf dataInfo.nGrp = 2 Then
                '    DrawSr2DotPlot grpRge.Offset(grpRge.Rows.Count + 4, dataInfo.nGrp * 2 + 4), dataInfo
                End If
            End If
            Set rge = MakeNTABLE(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeHTABLE(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeVTABLE(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeASR(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        Else
            Set rge = MakeATARICMB1(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeATARICMB2(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeATARICMB3(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        End If
    ElseIf kind = FUNC_NO.FUNC_DA2 Then
        If dataInfo.nVarMethod = 2 Then
            Set rge = MakeSmpScore_DA2(rge, dataInfo)
        Else
            Set rge = MakeATARICMB2(rge, dataInfo)
            Set rge = MakeATARICMB3(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        End If
    ElseIf kind = FUNC_NO.FUNC_DA Then
        If dataInfo.nItmCat > 0 Then
            Set rge = MakeGCRS(rge, dataInfo)
            Set rge = MakeXCRS(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeCRAM(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = rge.Offset(rge.Rows.Count + 1, 0)
        End If
        If dataInfo.nItmNum > 0 Then
            Set rge = MakeCORR(rge.Range("A1"), dataInfo)
        Else
            Set rge = rge.Range("A1")
        End If
        If dataInfo.nVarMethod = 2 Then
            Set rge = MakeEIGEN(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            'Set rge = MakeMODEL(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            rge(1, 1) = "|fffd||fffd||fffd||28c|W|fffd||fffd|"
            If dataInfo.bNumCate Then
                Set rge = MakeNumCate(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            End If
            If dataInfo.bExtraInfo Then
                Set rge = MakeExtraInfo(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            End If
            Set grpRge = rge
            Set rge = MakeSmpScore(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Call MakeProb(rge.Offset(2, rge.Columns.Count + 1).Range("A1"), dataInfo)
            Set rge = MakeBARY(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.sr2Grp.bShowGrp Then
                If dataInfo.nGrp > 2 Then
                    DrawSr2TenGrp grpRge.Offset(grpRge.Rows.Count + 4, dataInfo.nGrp * 3 + 5), dataInfo
                'ElseIf dataInfo.nGrp = 2 Then
                '    DrawSr2DotPlot grpRge.Offset(grpRge.Rows.Count + 4, dataInfo.nGrp * 2 + 4), dataInfo
                End If
            End If
            Set rge = MakeNTABLE(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeHTABLE(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeVTABLE(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeASR(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        Else
            Set rge = MakeATARICMB1(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeATARICMB2(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeATARICMB3(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            rge(1, 1) = "|fffd||fffd||fffd||28c|W|fffd||fffd|"
            Call SetRangeBorder(rge(1, 4).Resize(1, dataInfo.nItmNum), xlNone, xlNone, xlNone, xlThin)
        End If
    ElseIf kind = FUNC_NO.FUNC_SR2 Then
        If dataInfo.nItmCat > 0 Then
            Set rge = MakeGCRS(rge, dataInfo)
            Set rge = MakeXCRS(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeCRAM(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = rge.Offset(rge.Rows.Count + 1, 0)
        End If
        If dataInfo.nItmNum > 0 Then
            Set rge = MakeCORR(rge.Range("A1"), dataInfo)
        Else
            Set rge = rge.Range("A1")
        End If
        If dataInfo.nVarMethod = 2 Then
            Set rge = MakeEIGEN(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.nGrp = 2 Then
                Set rge = MakeMODEL_2Grp(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo, dWidth, csGrade)
            Else
                Set rge = MakeMODEL(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            End If
            If dataInfo.bNumCate Then
                Set rge = MakeNumCate(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            End If
            If dataInfo.bExtraInfo Then
                Set rge = MakeExtraInfo(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            End If
            Set grpRge = rge
            Set rge = MakeSmpScore_SR2(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo, nPanDist)
            If dataInfo.nGrp = 2 Then
                Call MakeProb(rge.Offset(2, dataInfo.nGrp + 2).Range("A1"), dataInfo)
                Set rgeCp = MakeCentralPoint(grpRge.Offset(grpRge.Rows.Count + 1, dataInfo.nGrp + 7).Range("A1"), dataInfo, csGrade, dWidth, NTable_CP)
                Call MakeSignDist(grpRge.Offset(grpRge.Rows.Count + 1, dataInfo.nGrp + 10).Range("A1"), dataInfo, NTable_Sign)
            Else
                Call MakeProb(rge.Offset(2, rge.Columns.Count + 1).Range("A1"), dataInfo)
            End If
            Set rge = MakeBARY(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.sr2Grp.bShowGrp Then
                If dataInfo.nGrp > 2 Then
                    DrawSr2TenGrp grpRge.Offset(grpRge.Rows.Count + 4, dataInfo.nGrp * 3 + 5), dataInfo
                'ElseIf dataInfo.nGrp = 2 Then
                '    DrawSr2DotPlot grpRge.Offset(grpRge.Rows.Count + 4, dataInfo.nGrp * 2 + 4), dataInfo
                End If
            End If
            If dataInfo.nGrp = 2 Then
                Set saveRge = rge
                Set rge = MakeNTABLE(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
                Call MakeNTABLE_2Grp(saveRge.Offset(saveRge.Rows.Count + 1, 6).Range("A1"), dataInfo, "|fffd||fffd||fffd||293|I|fffd||fffd||fffd|_|fffd||242||fffd||953b||fffd||fffd|", NTable_CP)
                Call MakeNTABLE_2Grp(saveRge.Offset(saveRge.Rows.Count + 1, 12).Range("A1"), dataInfo, "|fffd||fffd||fffd||fffd||fffd||242||fffd||953b||fffd||fffd|", NTable_Sign)
            Else
                Set rge = MakeNTABLE(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
                Set rge = MakeHTABLE(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
                Set rge = MakeVTABLE(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            End If
            Set rge = MakeASR(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.nGrp = 2 Then
                Set rge = MakeFreqTable(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo, rgeCp, csGrade, dWidth)
            End If
        Else
            Set rge = MakeATARICMB1(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeATARICMB2(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeATARICMB3(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        End If
    End If
    rge.Worksheet.Activate
    
    With ActiveWindow
        .ScrollRow = bgnCel.Row
        .DisplayGridlines = False
    End With
    bgnCel.Select
    
End Sub

'
'|fffd|Q|fffd||28f|W|fffd|v|fffd|\
'
Function MakeGCRS(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    
    If dataInfo.nItmCat < 1 Then
        Set MakeGCRS = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_GCRS)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_GCRS, rge, dataInfo.nItmCat)
    Set rge = AdjustTableByCat(TBLID_GCRS, rge, dataInfo.aryCate, dataInfo.nItmCat)
    Set rge = AdjustTableByGrp(TBLID_GCRS, rge, dataInfo.nGrp)
        
    l = 5
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            rge(l, 1) = dataInfo.items(i).name
            For j = 1 To dataInfo.items(i).CateNum
                rge(l, 2) = dataInfo.items(i).Cate(j).name
                l = l + 1
            Next j
        End If
    Next i
    
    For i = 1 To dataInfo.nGrp
        rge(3, i + 3) = "|fffd|Q" & i
        rge(3, i + 4 + dataInfo.nGrp) = "|fffd|Q" & i
        rge(3, i + 5 + 2 * dataInfo.nGrp) = "|fffd|Q" & i
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|Q|fffd||28f|W|fffd|v|fffd|\")
    rge(2, 1).Resize(l - 5 + 1, dataInfo.nGrp + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues
    
    For i = 1 To l - 5 + 1
        outBgn(i + 3, 3 + dataInfo.nGrp + 1) = 1
        For j = 1 To dataInfo.nGrp
            outBgn(i + 3, 3 + dataInfo.nGrp + 1 + j) = outBgn(i + 3, 3 + j) / outBgn(i + 3, 3)
        Next j
        For j = 1 To dataInfo.nGrp + 1
            outBgn(i + 3, 3 + 2 * (dataInfo.nGrp + 1) + j - 1) = outBgn(i + 3, 3 + j - 1) / outBgn(4, 3 + j - 1)
        Next j
    Next i
    
    Application.CutCopyMode = False
    
    Set MakeGCRS = outBgn
    
End Function
'
'|fffd|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd|\
'
Function MakeXCRS(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    
    If dataInfo.nItmCat < 1 Then
        Set MakeXCRS = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_XCRS)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_XCRS, rge, dataInfo.nItmCat)
    Set rge = AdjustTableByCat(TBLID_XCRS, rge, dataInfo.aryCate, dataInfo.nItmCat)
    
    Application.CutCopyMode = False
    
    l = 4
    k = 3
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            rge(l, 1) = dataInfo.items(i).name
            rge(2, k) = dataInfo.items(i).name
            For j = 1 To dataInfo.items(i).CateNum
                rge(l, 2) = dataInfo.items(i).Cate(j).name
                rge(3, k) = dataInfo.items(i).Cate(j).name
                l = l + 1
                k = k + 1
            Next j
        End If
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd|\")
    rge(2, 1).Resize(l - 5 + 1, l - 5 + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues
    
    Set MakeXCRS = outBgn
    
End Function
'
'|fffd|N|fffd||fffd||fffd||fffd||fffd|[|fffd||fffd||fffd||318|A|fffd||58c|W|fffd||fffd|
'11.8.20 LSQ mdf : add "|fffd|J|fffd|C|fffd||fffd||fffd||fffd|l"
Function MakeCRAM(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer, ct As Integer
    Dim rge As Range
    
    If dataInfo.nItmCat < 1 Then
        Set MakeCRAM = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_CRAM)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_CRAM, rge, dataInfo.nItmCat + 1)
    
    Application.CutCopyMode = False
    
    rge(2, 1) = "|fffd||fffd||fffd||fffd| " & dataInfo.nSmpNum
    l = ROWNUM_CRAM + 6
    k = 2
    
    '|fffd||693|I|fffd||3d0||fffd|
    rge(l, 1) = dataInfo.ObjVarName
    rge(ROWNUM_CRAM + 5, k) = dataInfo.ObjVarName
    l = l + ROWNUM_CRAM
    k = k + 1
    
    ct = 0
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            rge(l, 1) = dataInfo.items(i).name
            rge(ROWNUM_CRAM + 5, k) = dataInfo.items(i).name
            
            ct = ct + 1
            l = l + ROWNUM_CRAM
            k = k + 1
        End If
    Next i
    ct = ct + 1
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|N|fffd||fffd||fffd||fffd||fffd|[|fffd||fffd||fffd||318|A|fffd||58c|W|fffd||fffd|")
    rge(2, 1).Resize(ct * ROWNUM_CRAM, ct).Copy
    outBgn(ROWNUM_CRAM + 6, 2).PasteSpecial xlPasteValues

    Set MakeCRAM = outBgn
    
End Function
'
'|fffd||fffd||fffd||594||fffd|
'
Function MakeCORR(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_CORR)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_CORR, rge, dataInfo.nItmNum)
    
    Application.CutCopyMode = False
    
    rge(2, 1) = "|fffd||fffd||fffd||fffd| " & dataInfo.nSmpNum
    l = 8
    k = 2
    rge(9, 1) = dataInfo.ObjVarName
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 3 Then
            rge(8, k) = dataInfo.items(i).name
            k = k + 1
        End If
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd||594||fffd|")
    rge(2, 1).Resize(3, k - 2).Copy
    outBgn(9, 2).PasteSpecial xlPasteValues
    
    Set MakeCORR = outBgn
    
End Function

Function MakeEIGEN(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_EIGEN)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    l = 0
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            l = l + dataInfo.items(i).CateNum - 1
        Else
            l = l + 1
        End If
    Next i
    Set rge = AdjustTableByItm(TBLID_EIGEN, rge, l + 1)
    Set rge = AdjustTableByGrp(TBLID_EIGEN, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For i = 1 To dataInfo.nGrp - 1
        outBgn(2, 2 + i) = "|fffd||fffd|" & i
    Next i
    For i = 1 To l - 1
        outBgn(4 + i, 1) = ""
    Next i
    outBgn(4 + l, 1) = "|fffd||8414||fffd||fffd|"
    outBgn(4 + l, 2) = ""
    l = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).CateNum - 1
                outBgn(3 + l, 2) = dataInfo.items(i).name & "-" & dataInfo.items(i).Cate(j).name
                l = l + 1
            Next j
        ElseIf dataInfo.items(i).kind = 3 Then
            outBgn(3 + l, 2) = dataInfo.items(i).name       ' & "-" & dataInfo.items(i).Cate(1).Name
            l = l + 1
        End If
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||157|L|fffd|x|fffd|N|fffd|g|fffd||fffd|")
    rge(3, 2).Resize(l + 1, dataInfo.nGrp - 1).Copy
    outBgn(3, 3).PasteSpecial xlPasteValues
    
    Call SetRangeBorder(outBgn(2, 3).Resize(2, dataInfo.nGrp - 1), xlThin, xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(4, 3).Resize(l, dataInfo.nGrp - 1), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(4 + l - 1, 1).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(4 + l - 1, 3).Resize(1, dataInfo.nGrp - 1), xlThin, xlThin, xlThin, xlThin, xlThin)
    
    Set MakeEIGEN = outBgn
    
End Function

Function MakeMODEL(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    Dim aryCate(1 To MAX_XNUM) As Integer
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_MODEL)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_MODEL, rge, dataInfo.nItm)
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            aryCate(i) = dataInfo.items(i).CateNum
        ElseIf dataInfo.items(i).kind = 3 Then
            If dataInfo.bNumCate Then
                aryCate(i) = dataInfo.items(i).NumCate
            Else
                aryCate(i) = 1
            End If
        End If
    Next i
    Set rge = AdjustTableByCat(TBLID_MODEL, rge, aryCate, dataInfo.nItm)
    Set rge = AdjustTableByGrp(TBLID_MODEL, rge, dataInfo.nGrp - 1)
    
    Application.CutCopyMode = False
    
    rge(2, 4) = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|X|fffd|R|fffd|A"
    For i = 1 To dataInfo.nGrp - 1
        rge(3, 3 + i) = i & "|fffd||fffd|"
    Next i
    
    l = 4
    For i = 1 To dataInfo.nItm
        rge(l, 1) = dataInfo.items(i).name
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).CateNum
                rge(l, 2) = dataInfo.items(i).Cate(j).name
                l = l + 1
            Next j
        Else
            For j = 1 To dataInfo.items(i).NumCate
                rge(l, 2) = dataInfo.items(i).Cate(j).name
                l = l + 1
            Next j
        End If
        'l = l + IIf(dataInfo.items(i).kind = 2, dataInfo.items(i).CateNum, dataInfo.items(i).NumCate)
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd|f|fffd||fffd||fffd||fffd|")
    rge(3, 1).Resize(l - 4, dataInfo.nGrp).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues

    DrawSr2CateScore outBgn(2, dataInfo.nGrp + 5), outBgn(3, 1).Resize(l - 3, dataInfo.nGrp + 2), dataInfo
    
    If outBgn.Rows.Count < 17 Then
        Set outBgn = outBgn(1, 1).Resize(17, outBgn.Columns.Count)
    End If
    
    Set MakeMODEL = outBgn
    
End Function

Function MakeNumCate(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range, rtnRge As Range
    
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 3 Then
            Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_NUMCATE)
            rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
            
            Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
            Set rge = AdjustTableByItm(TBLID_NUMCATE, rge, dataInfo.items(i).NumCate)
            Set rge = AdjustTableByGrp(TBLID_NUMCATE, rge, dataInfo.nGrp - 1)
            Set outBgn = rge
            'If rtnRge Is Nothing Then Set rtnRge = outBgn
            outBgn(1, 1) = dataInfo.items(i).name & "|fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|X|fffd|R|fffd|A"
            For j = 1 To dataInfo.nGrp - 1
                outBgn(2, 5 + j) = "|fffd||fffd|" & j
            Next j
            Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
            Set rge = rge.Find("NumCateScore" & i)
            rge(2, 1).Resize(dataInfo.items(i).NumCate + 1, dataInfo.nGrp + 4).Copy
            outBgn(3, 1).PasteSpecial xlPasteValues
            Set outBgn = outBgn(3 + dataInfo.items(i).NumCate + 2, 1)
            
            Application.CutCopyMode = False
            
        End If
    Next i
    Set MakeNumCate = outBgn.Offset(-1, 0)
End Function

Function MakeExtraInfo(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_EXTRAINFO)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_EXTRAINFO, rge, dataInfo.nItm)
    Set rge = AdjustTableByGrp(TBLID_EXTRAINFO, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For j = 1 To dataInfo.nGrp - 1
        outBgn(3, 2 + j) = "|fffd||fffd||fffd||594||43b2|" & j
    Next j
    For i = 1 To dataInfo.nItm
        outBgn(4 + i, 1) = dataInfo.items(i).name
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||1c9||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|")
    rge(3, 1).Resize(dataInfo.nItm + 1, 8).Copy
    outBgn(4, 2).PasteSpecial xlPasteValues

    Application.CutCopyMode = False
    
    Set MakeExtraInfo = outBgn
End Function

Function MakeSmpScore(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    Dim ctNew(1) As Integer
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SMPSCORE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    'Set rge = AdjustTableByItm(TBLID_SMPSCORE, rge, dataInfo.nVarSmpNum)
    ctNew(1) = dataInfo.nVarSmpNum
    Set rge = AdjustTableByCat(TBLID_SMPSCORE, rge, ctNew, 1)
    Set rge = AdjustTableByGrp(TBLID_SMPSCORE, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    outBgn(3, dataInfo.nGrp + 1) = "|fffd|}|fffd|n|fffd||fffd||fffd|m|fffd|r|fffd|X|fffd||10b||fffd||fffd||fffd|"
    For j = 1 To dataInfo.nGrp
        If dataInfo.nGrp > 2 Then
            If j < dataInfo.nGrp Then
                outBgn(4, 1 + j) = j & "|fffd||fffd|"
            End If
        ElseIf dataInfo.nGrp = 2 Then
            outBgn(4, 2) = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A"
        End If
        outBgn(4, dataInfo.nGrp + j) = "|fffd|Q" & j & "|fffd||30b||fffd||fffd||fffd|"
    Next j
    For i = 1 To dataInfo.nVarSmpNum
        outBgn(4 + i, 1) = SbkThis.Sheets("Sr2Data").Cells(i + 1, 1)
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\")
    rge(3, 2).Resize(dataInfo.nVarSmpNum + 2, 2 * dataInfo.nGrp + 2).Copy
    outBgn(5, 2).PasteSpecial xlPasteValues

    Application.CutCopyMode = False
    
    Call SetRangeBorder(outBgn(5, 1).Resize(dataInfo.nSmpNum, 2 * dataInfo.nGrp + 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    If dataInfo.nVarSmpNum > dataInfo.nSmpNum Then
        Call SetRangeBorder(outBgn(dataInfo.nSmpNum + 5, 1).Resize(dataInfo.nVarSmpNum - dataInfo.nSmpNum, 2 * dataInfo.nGrp + 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    End If
    
    If dataInfo.nGrp = 2 Then
        outBgn(3, 3 + dataInfo.nGrp).Resize(dataInfo.nVarSmpNum + 2, 1).Insert Shift:=xlToRight
        outBgn(3, 3 + dataInfo.nGrp).Resize(dataInfo.nVarSmpNum + 2, 1).Insert Shift:=xlToRight
        Call SetRangeBorder(outBgn(3, 3 + dataInfo.nGrp).Resize(1, dataInfo.nGrp), xlThin, xlThin, xlThin, xlThin)
        outBgn(3, 5 + dataInfo.nGrp) = "|fffd||fffd||fffd||fffd|"
    End If
    Set MakeSmpScore = outBgn
End Function

Function MakeSmpScore_SR2(ByVal outBgn As Range, dataInfo As BasInfo, Optional ByVal nPanDist As Long = 1) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    Dim ctNew(1) As Integer
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SMPSCORE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    'Set rge = AdjustTableByItm(TBLID_SMPSCORE, rge, dataInfo.nVarSmpNum)
    ctNew(1) = dataInfo.nVarSmpNum
    Set rge = AdjustTableByCat(TBLID_SMPSCORE, rge, ctNew, 1)
    Set rge = AdjustTableByGrp(TBLID_SMPSCORE, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    outBgn(3, dataInfo.nGrp + 1) = IIf(nPanDist = 1, "|fffd|}|fffd|n|fffd||fffd||fffd|m|fffd|r|fffd|X|fffd||10b||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||3d0||fffd|1,0|fffd|f|fffd|[|fffd|^|fffd|j", "|fffd|}|fffd|n|fffd||fffd||fffd|m|fffd|r|fffd|X|fffd||10b||fffd||fffd||fffd|(|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|K|fffd|p|fffd|j")
    For j = 1 To dataInfo.nGrp
        If dataInfo.nGrp > 2 Then
            If j < dataInfo.nGrp Then
                outBgn(4, 1 + j) = j & "|fffd||fffd|"
            End If
        ElseIf dataInfo.nGrp = 2 Then
            outBgn(4, 2) = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A"
        End If
        outBgn(4, dataInfo.nGrp + j) = "|fffd|Q" & j & "|fffd||30b||fffd||fffd||fffd|"
    Next j
    For i = 1 To dataInfo.nVarSmpNum
        outBgn(4 + i, 1) = SbkThis.Sheets("Sr2Data").Cells(i + 1, 1)
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\")
    rge(3, 2).Resize(dataInfo.nVarSmpNum + 2, 2 * dataInfo.nGrp + 2).Copy
    outBgn(5, 2).PasteSpecial xlPasteValues

    Application.CutCopyMode = False
    
    Call SetRangeBorder(outBgn(5, 1).Resize(dataInfo.nSmpNum, 2 * dataInfo.nGrp + 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    If dataInfo.nVarSmpNum > dataInfo.nSmpNum Then
        Call SetRangeBorder(outBgn(dataInfo.nSmpNum + 5, 1).Resize(dataInfo.nVarSmpNum - dataInfo.nSmpNum, 2 * dataInfo.nGrp + 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    End If
    
    If dataInfo.nGrp = 2 Then
        outBgn(3, 3 + dataInfo.nGrp).Resize(dataInfo.nVarSmpNum + 2, 1).Insert Shift:=xlToRight
        outBgn(3, 3 + dataInfo.nGrp).Resize(dataInfo.nVarSmpNum + 2, 1).Insert Shift:=xlToRight
        Call SetRangeBorder(outBgn(3, 3 + dataInfo.nGrp).Resize(1, dataInfo.nGrp), xlThin, xlThin, xlThin, xlThin)
        outBgn(3, 5 + dataInfo.nGrp) = "|fffd||fffd||fffd||fffd|"
    End If
    Set MakeSmpScore_SR2 = outBgn
End Function

Function MakeSmpScore_EXSR2(ByVal outBgn As Range, dataInfo As BasInfo, Optional ByVal nPanDist As Long = 1) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    Dim ctNew(1) As Integer
    Dim v As Variant
    Dim tmpv() As Double, dblSum As Double
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SMPSCORE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    'Set rge = AdjustTableByItm(TBLID_SMPSCORE, rge, dataInfo.nVarSmpNum)
    ctNew(1) = dataInfo.nVarSmpNum
    Set rge = AdjustTableByCat(TBLID_SMPSCORE, rge, ctNew, 1)
    Set rge = AdjustTableByGrp(TBLID_SMPSCORE, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    outBgn(3, dataInfo.nGrp + 1) = IIf(nPanDist = 1, "|fffd|}|fffd|n|fffd||fffd||fffd|m|fffd|r|fffd|X|fffd||10b||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||3d0||fffd|1,0|fffd|f|fffd|[|fffd|^|fffd|j", "|fffd|}|fffd|n|fffd||fffd||fffd|m|fffd|r|fffd|X|fffd||10b||fffd||fffd||fffd|(|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|K|fffd|p|fffd|j")
    For j = 1 To dataInfo.nGrp
        If dataInfo.nGrp > 2 Then
            If j < dataInfo.nGrp Then
                outBgn(4, 1 + j) = j & "|fffd||fffd|"
            End If
        ElseIf dataInfo.nGrp = 2 Then
            outBgn(4, 2) = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A"
        End If
        outBgn(4, dataInfo.nGrp + j) = "|fffd|Q" & j '& "|fffd||30b||fffd||fffd||fffd|"
    Next j
    For i = 1 To dataInfo.nVarSmpNum
        outBgn(4 + i, 1) = SbkThis.Sheets("Sr2Data").Cells(i + 1, 1)
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\")
    rge(3, 2).Resize(dataInfo.nVarSmpNum + 2, 2 * dataInfo.nGrp + 2).Copy
    outBgn(5, 2).PasteSpecial xlPasteValues

    Application.CutCopyMode = False
    
    outBgn(5 + dataInfo.nVarSmpNum, 1).Resize(2, dataInfo.nGrp).Clear
    Call SetRangeBorder(outBgn(5, 1).Resize(dataInfo.nSmpNum, 2 * dataInfo.nGrp + 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    If dataInfo.nVarSmpNum > dataInfo.nSmpNum Then
        Call SetRangeBorder(outBgn(dataInfo.nSmpNum + 5, 1).Resize(dataInfo.nVarSmpNum - dataInfo.nSmpNum, 2 * dataInfo.nGrp + 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    End If
    
    'If dataInfo.nGrp = 2 Then
    '    outBgn(3, 3 + dataInfo.nGrp).Resize(dataInfo.nVarSmpNum + 2, 1).Insert Shift:=xlToRight
    '    outBgn(3, 3 + dataInfo.nGrp).Resize(dataInfo.nVarSmpNum + 2, 1).Insert Shift:=xlToRight
    '    Call SetRangeBorder(outBgn(3, 3 + dataInfo.nGrp).Resize(1, dataInfo.nGrp), xlThin, xlThin, xlThin, xlThin)
    '    outBgn(3, 5 + dataInfo.nGrp) = "|fffd||fffd||fffd||fffd|"
    'End If
    ReDim tmpv(1 To dataInfo.nGrp)
    v = outBgn(5, dataInfo.nGrp + 1).Resize(dataInfo.nVarSmpNum, dataInfo.nGrp).Value
    For i = 1 To dataInfo.nGrp
        outBgn(3, dataInfo.nGrp * 2 + 1).Resize(dataInfo.nVarSmpNum + 2, 1).Insert Shift:=xlToRight
    Next i
    outBgn(3, dataInfo.nGrp * 2 + 1) = "|fffd|m|fffd||fffd|"
    Call SetRangeBorder(outBgn(3, dataInfo.nGrp * 2 + 1).Resize(1, dataInfo.nGrp), xlThin, xlThin, xlThin, xlThin)
    outBgn(3, dataInfo.nGrp * 3 + 1) = "|fffd||fffd||fffd||fffd|"
    Call SetRangeBorder(outBgn(3, dataInfo.nGrp * 3 + 1).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
    For i = 1 To dataInfo.nGrp
        outBgn(4, dataInfo.nGrp * 2 + i) = "|fffd|Q" & i
    Next i
    For i = 1 To dataInfo.nVarSmpNum
        dblSum = 0
        For j = 1 To dataInfo.nGrp
            tmpv(j) = Exp(-0.5 * v(i, j))
            dblSum = dblSum + tmpv(j)
        Next j
        For j = 1 To dataInfo.nGrp
            tmpv(j) = tmpv(j) / dblSum
            outBgn(4 + i, dataInfo.nGrp * 2 + j) = tmpv(j)
        Next j
    Next i
    outBgn(5, dataInfo.nGrp * 2 + 1).Resize(dataInfo.nVarSmpNum, dataInfo.nGrp).NumberFormat = "0.0%"
    Erase tmpv

    Set MakeSmpScore_EXSR2 = outBgn(1, 1).Resize(outBgn.Rows.Count - 2, outBgn.Columns.Count + dataInfo.nGrp)
End Function

Function MakeSmpScore_DA2(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    Dim ctNew(1) As Integer
    Dim rowNum As Long
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SMPSCORE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    'Set rge = AdjustTableByItm(TBLID_SMPSCORE, rge, dataInfo.nVarSmpNum)
    ctNew(1) = dataInfo.nVarSmpNum
    Set rge = AdjustTableByCat(TBLID_SMPSCORE, rge, ctNew, 1)
    Set rge = AdjustTableByGrp(TBLID_SMPSCORE, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    rowNum = rge.Rows.Count
    rge.Rows(rowNum).Delete
    rge.Rows(rowNum - 1).Delete
    
    Set outBgn = rge
    outBgn(3, 2) = "|fffd|}|fffd|n|fffd||fffd||fffd|m|fffd|r|fffd|X|fffd||10b||fffd||fffd||fffd|"
    outBgn(3, 2 + dataInfo.nGrp) = "|fffd|m|fffd||fffd|"
    outBgn(3, 1 + dataInfo.nGrp) = ""
    Call SetRangeBorder(outBgn(3, 2).Resize(1, dataInfo.nGrp), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(3, 2 + dataInfo.nGrp).Resize(1, dataInfo.nGrp), xlThin, xlThin, xlThin, xlThin)
    
    For j = 1 To dataInfo.nGrp
        outBgn(4, 1 + j) = "|fffd|Q" & j & "|fffd||30b||fffd||fffd||fffd|"
        outBgn(4, 1 + j + dataInfo.nGrp) = "|fffd|Q" & j & "|fffd||30b||fffd||fffd||fffd|"
    Next j
    outBgn(3, 2 + 2 * dataInfo.nGrp) = "|fffd||fffd||fffd||fffd|Q"
    outBgn(3, 3 + 2 * dataInfo.nGrp) = "|fffd||fffd||fffd||44c|Q"
    outBgn(4, 2 + 2 * dataInfo.nGrp) = ""
    outBgn(4, 3 + 2 * dataInfo.nGrp) = ""
    Call SetRangeBorder(outBgn(3, 2 + 2 * dataInfo.nGrp).Resize(2, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(3, 3 + 2 * dataInfo.nGrp).Resize(2, 1), xlThin, xlThin, xlThin, xlThin)
    For i = 1 To dataInfo.nVarSmpNum
        outBgn(4 + i, 1) = SbkThis.Sheets("Sr2Data").Cells(i + 1, 1)
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\")
    rge(3, 2).Resize(dataInfo.nVarSmpNum, 2 * dataInfo.nGrp + 2).Copy
    outBgn(5, 2).PasteSpecial xlPasteValues

    Application.CutCopyMode = False
    
    Call SetRangeBorder(outBgn(5, 1).Resize(dataInfo.nSmpNum, 2 * dataInfo.nGrp + 3), xlThin, xlThin, xlThin, xlThin, xlThin)
    If dataInfo.nVarSmpNum > dataInfo.nSmpNum Then
        Call SetRangeBorder(outBgn(dataInfo.nSmpNum + 5, 1).Resize(dataInfo.nVarSmpNum - dataInfo.nSmpNum, 2 * dataInfo.nGrp + 3), xlThin, xlThin, xlThin, xlThin, xlThin)
    End If
    outBgn(5, 2 + dataInfo.nGrp).Resize(dataInfo.nVarSmpNum, dataInfo.nGrp).NumberFormat = "0.0%"
    
    'If dataInfo.nGrp = 2 Then
        'outBgn(3, 3 + dataInfo.nGrp).Resize(dataInfo.nVarSmpNum + 2, 1).Insert Shift:=xlToRight
        'outBgn(3, 3 + dataInfo.nGrp).Resize(dataInfo.nVarSmpNum + 2, 1).Insert Shift:=xlToRight
        'Call SetRangeBorder(outBgn(3, 3 + dataInfo.nGrp).Resize(1, dataInfo.nGrp), xlThin, xlThin, xlThin, xlThin)
        'outBgn(3, 5 + dataInfo.nGrp) = "|fffd||fffd||fffd||fffd|"
    'End If
    Set MakeSmpScore_DA2 = outBgn
End Function

Function MakeProb(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    Dim v As Variant
    Dim dblSum As Double
    
    Set rge = outBgn.Resize(dataInfo.nVarSmpNum + 1, dataInfo.nGrp + 1)
    Set outBgn = rge
    outBgn(1, 1) = "|fffd|m|fffd||fffd|"
    For j = 1 To dataInfo.nGrp
        outBgn(2, j) = "|fffd|Q" & j
    Next j
    If dataInfo.nGrp > 2 Then
        outBgn(2, dataInfo.nGrp + 1) = "|fffd||fffd||fffd||fffd|Q"
    Else
        outBgn(2, dataInfo.nGrp + 2) = "|fffd||fffd||fffd||fffd|Q"
    End If
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\")

    v = rge(3, dataInfo.nGrp + 1).Resize(dataInfo.nVarSmpNum, dataInfo.nGrp + 2).Value
    For i = 1 To dataInfo.nVarSmpNum
        dblSum = 0
        For j = 1 To dataInfo.nGrp
            v(i, j) = Exp(-0.5 * v(i, j))
            dblSum = dblSum + v(i, j)
        Next j
        For j = 1 To dataInfo.nGrp
            outBgn(i + 2, j) = v(i, j) / dblSum
        Next j
        If dataInfo.nGrp > 2 Then
            outBgn(i + 2, dataInfo.nGrp + 1) = v(i, dataInfo.nGrp + 2)
        Else
            outBgn(i + 2, dataInfo.nGrp + 2) = v(i, dataInfo.nGrp + 2)
        End If
    Next i
    outBgn(3, 1).Resize(dataInfo.nVarSmpNum, dataInfo.nGrp).NumberFormatLocal = "0.0%"
    Call SetRangeBorder(outBgn(2, 1).Resize(1, dataInfo.nGrp + 1), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(3, 1).Resize(dataInfo.nSmpNum, dataInfo.nGrp + 1), xlThin, xlThin, xlThin, xlThin, xlThin)
    If dataInfo.nVarSmpNum > dataInfo.nSmpNum Then
        Call SetRangeBorder(outBgn(dataInfo.nSmpNum + 3, 1).Resize(dataInfo.nVarSmpNum - dataInfo.nSmpNum, dataInfo.nGrp + 1), xlThin, xlThin, xlThin, xlThin, xlThin)
    End If
    Set MakeProb = outBgn
End Function

Function MakeBARY(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range, outRge As Range

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_BARY)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)

    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByGrp(TBLID_BARY, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For i = 1 To dataInfo.nGrp
        If i < dataInfo.nGrp Then
            outBgn(2, i + 1) = i & "|fffd||fffd|"
        End If
        outBgn(2 + i, 1) = "|fffd|Q" & i
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|d|fffd|S|fffd||fffd||fffd|W")
    rge(3, 2).Resize(dataInfo.nGrp, dataInfo.nGrp - 1).Copy
    outBgn(3, 2).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    Set MakeBARY = outBgn
End Function

Function MakeNTABLE(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    Dim ratio As Double
    
    outBgn(1, 1) = "|fffd|}|fffd|n|fffd||fffd||fffd|m|fffd|r|fffd|X|fffd||10b||fffd||fffd||fffd||fffd||30a|m|fffd||fffd||fffd||242||fffd||953b||fffd||fffd|"
    Set outBgn = outBgn(2, 1)
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_NTABLE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByGrp(TBLID_NTABLE, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For j = 1 To dataInfo.nGrp
        outBgn(3, 3 + j) = j
        outBgn(4 + j, 2) = j
    Next j
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("n|fffd|\")
    rge(4, 3).Resize(dataInfo.nGrp + 1, dataInfo.nGrp + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues

    Application.CutCopyMode = False
    
    If dataInfo.nGrp = 2 Then
        ratio = (rge(5, 4) + rge(6, 5)) / rge(4, 3)
        outBgn(8, 1) = "|fffd||fffd||fffd||293|I|fffd||fffd||fffd||fffd|"
        outBgn(9, 1) = ratio
        outBgn(9, 1).NumberFormatLocal = "0.0%"
        Call SetRangeBorder(outBgn(9, 1), xlThin, xlThin, xlThin, xlThin)
    Else
        'ratio = (rge(5, 4) + rge(6, 5)) / rge(4, 3)
        ratio = 0
        For i = 1 To dataInfo.nGrp
            ratio = ratio + rge(i + 4, i + 3)
        Next i
        ratio = ratio / rge(4, 3)
        outBgn(5, dataInfo.nGrp + 5) = "|fffd||fffd||fffd||293|I|fffd||fffd||fffd||fffd|"
        outBgn(6, dataInfo.nGrp + 5) = ratio
        outBgn(6, dataInfo.nGrp + 5).NumberFormatLocal = "0.0%"
        Call SetRangeBorder(outBgn(5, dataInfo.nGrp + 5).Resize(2, 1), xlThin, xlThin, xlThin, xlThin, , xlThin)
    End If
    
    Set MakeNTABLE = outBgn.Range("A1").Resize(outBgn.Rows.Count + 3, outBgn.Columns.Count)
End Function

Function MakeHTABLE(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_HTABLE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByGrp(TBLID_HTABLE, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For j = 1 To dataInfo.nGrp
        outBgn(3, 3 + j) = j
        outBgn(4 + j, 2) = j
    Next j
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("n|fffd|\")
    rge(4, 3).Resize(dataInfo.nGrp + 1, dataInfo.nGrp + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    For i = 1 To dataInfo.nGrp + 1
        For j = 1 To dataInfo.nGrp
            If outBgn(3 + i, 3) > 0 Then
                outBgn(3 + i, 3 + j) = 100 * outBgn(3 + i, 3 + j) / outBgn(3 + i, 3)
            Else
                outBgn(3 + i, 3 + j) = "-"
            End If
        Next j
        If outBgn(3 + i, 3) > 0 Then
            outBgn(3 + i, 3) = 100
        Else
            outBgn(3 + i, 3) = "-"
        End If
    Next i
    Set MakeHTABLE = outBgn
End Function

Function MakeVTABLE(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_VTABLE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByGrp(TBLID_VTABLE, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For j = 1 To dataInfo.nGrp
        outBgn(3, 3 + j) = j
        outBgn(4 + j, 2) = j
    Next j
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("n|fffd|\")
    rge(4, 3).Resize(dataInfo.nGrp + 1, dataInfo.nGrp + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    For i = 1 To dataInfo.nGrp
        For j = 1 To dataInfo.nGrp + 1
            If outBgn(4, 2 + j) > 0 Then
                outBgn(4 + i, 2 + j) = 100 * outBgn(4 + i, 2 + j) / outBgn(4, 2 + j)
            Else
                outBgn(4 + i, 2 + j) = "-"
            End If
        Next j
    Next i
    For i = 1 To dataInfo.nGrp + 1
        If outBgn(4, 2 + i) > 0 Then
            outBgn(4, 2 + i) = 100
        Else
            outBgn(4, 2 + i) = "-"
        End If
    Next i
    Set MakeVTABLE = outBgn
End Function

Function MakeASR(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range, outRge As Range
    
    For i = 1 To dataInfo.nGrp - 1
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_ASR)
        rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)

        Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByGrp(TBLID_ASR, rge, dataInfo.nGrp)
        
        Application.CutCopyMode = False
    
        Set outRge = rge
        If i = 1 Then Set MakeASR = outRge
        outRge(1, 1) = i & "|fffd||fffd|"
        For j = 1 To dataInfo.nGrp
            outRge(3 + j, 1) = "|fffd|Q" & j
        Next j
        Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
        Set rge = rge.Find("ASR" & i)
        rge(4, 2).Resize(dataInfo.nGrp + 5, 3).Copy
        outRge(4, 2).PasteSpecial xlPasteValues
        
        Application.CutCopyMode = False
    
        Set outBgn = outBgn(1, 6)
    Next i
    'Set MakeASR = outBgn
End Function

Function MakeATARICMB1(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    Dim ctNew(1) As Variant

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_ATARI_CMB1)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    ctNew(1) = dataInfo.nItm
    Set rge = AdjustTableByCat(TBLID_ATARI_CMB1, rge, ctNew, 1)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    outBgn(2, 2) = dataInfo.ObjVarName
    outBgn(2, 3) = dataInfo.nGrp
    For i = 1 To dataInfo.nItm
        outBgn(2 + i, 1) = "|fffd|A|fffd|C|fffd|e|fffd||fffd|" & i
        outBgn(2 + i, 2) = dataInfo.items(i).name
        outBgn(2 + i, 3) = IIf(dataInfo.items(i).kind = 2, dataInfo.items(i).CateNum, 0)
    Next i
    Set MakeATARICMB1 = outBgn
End Function

Function MakeATARICMB2(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    Dim ctNew(1) As Variant

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_ATARI_CMB2)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    ctNew(1) = WorksheetFunction.Power(2, dataInfo.nItm) - 1
    Set rge = AdjustTableByCat(TBLID_ATARI_CMB2, rge, ctNew, 1)
    Set rge = AdjustTableByGrp(TBLID_ATARI_CMB2, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For i = 1 To dataInfo.nGrp - 1
        outBgn(2, i + 3) = "|fffd||fffd||fffd||594||fffd|" & i
        outBgn(2, i + dataInfo.nGrp + 8) = "|fffd||fffd||fffd||594||fffd|" & i
        outBgn(3, i + 3) = "|fffd||fffd|2_" & i
        outBgn(3, i + dataInfo.nGrp + 8) = "|fffd||fffd|2_" & i
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd|v|fffd||fffd|-ATARI")
    rge(3, 1).Resize(ctNew(1), dataInfo.nGrp + 8).Copy
    outBgn(4, 1).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    For i = 1 To ctNew(1)
        For j = 1 To dataInfo.nGrp + 5
            outBgn(3 + i, j + dataInfo.nGrp + 8) = WorksheetFunction.Rank(outBgn(3 + i, 3 + j), outBgn(4, 3 + j).Resize(ctNew(1), 1), IIf(j < dataInfo.nGrp, 0, 1))
        Next j
    Next i
    Set MakeATARICMB2 = outBgn
End Function

Function MakeATARICMB3(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    Dim ctNew() As Variant

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_ATARI_CMB3)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    l = WorksheetFunction.Power(2, dataInfo.nItm) - 1
    Set rge = AdjustTableByItm(TBLID_ATARI_CMB3, rge, l)
    Set rge = AdjustTableByItm(TBLID_ATARI_CMB3_ITM, rge, dataInfo.nItm)
    ReDim ctNew(1 To l)
    For i = 1 To l
        ctNew(i) = dataInfo.nGrp - 1
    Next i
    Set rge = AdjustTableByCat(TBLID_ATARI_CMB3, rge, ctNew, l)
    ReDim ctNew(1 To dataInfo.nItm)
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            ctNew(i) = dataInfo.items(i).CateNum
        ElseIf dataInfo.items(i).kind = 3 Then
            If dataInfo.bNumCate Then
                ctNew(i) = dataInfo.items(i).NumCate
            Else
                ctNew(i) = 1
            End If
        End If
    Next i
    Set rge = AdjustTableByCat(TBLID_ATARI_CMB3_CATE, rge, ctNew, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    l = 4
    For i = 1 To dataInfo.nItm
        outBgn(2, l) = dataInfo.items(i).name
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).CateNum
                outBgn(3, l) = dataInfo.items(i).Cate(j).name
                l = l + 1
            Next j
        Else
            If dataInfo.bNumCate Then
                For j = 1 To dataInfo.items(i).NumCate
                    outBgn(3, l) = dataInfo.items(i).Cate(j).name
                    l = l + 1
                Next j
            Else
                outBgn(3, l) = dataInfo.items(i).Cate(1).name
                l = l + 1
            End If
        End If
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|X|fffd|R|fffd|A-ATARI")
    l = WorksheetFunction.Power(2, dataInfo.nItm) - 1
    rge(3, 1).Resize(l * (dataInfo.nGrp - 1), 100).Copy
    outBgn(4, 1).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    Set MakeATARICMB3 = outBgn
End Function

Sub DrawSr2TenGrp(ByVal oRge As Range, dataInfo As BasInfo)
    Dim i As Integer
    Dim XAxis As Integer, YAxis As Integer, SmpName As Integer
    Dim rge As Range, ClsRge As Range
    Dim bPredict As Boolean
    
    bPredict = IIf(dataInfo.nSmpNum < dataInfo.nVarSmpNum, True, False)
    XAxis = dataInfo.sr2Grp.nXAxis
    YAxis = dataInfo.sr2Grp.nYAxis
    SmpName = IIf(dataInfo.sr2Grp.bSmpName, 1, 0)
    SbkThis.Sheets("Sr2Data").Range("A2").Resize(dataInfo.nVarSmpNum, 1).Copy
    oRge.Worksheet.Activate
    oRge(2, 1).PasteSpecial xlPasteValues
    For i = 1 To dataInfo.nGrp
        oRge(i + dataInfo.nVarSmpNum + 1, 1) = "|fffd|Q" & i
    Next i
    oRge(1, 2) = XAxis & "|fffd||fffd|"
    oRge(1, 3) = YAxis & "|fffd||fffd|"
    oRge(1, 4) = "|fffd|Q"
    Set oRge = oRge.Offset(1, 0)
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\")
    rge(3, 1 + XAxis).Resize(dataInfo.nVarSmpNum, 1).Copy
    oRge(1, 2).PasteSpecial xlPasteValues
    rge(3, 1 + YAxis).Resize(dataInfo.nVarSmpNum, 1).Copy
    oRge(1, 3).PasteSpecial xlPasteValues
    rge(3, 2 + 2 * dataInfo.nGrp - 1).Resize(dataInfo.nVarSmpNum, 1).Copy
    oRge(1, 4).PasteSpecial xlPasteValues
    For i = 1 To dataInfo.nVarSmpNum
        If Not IsNumeric(oRge(i, 4)) Then
            oRge(i, 4) = dataInfo.nGrp + 1
        End If
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|d|fffd|S|fffd||fffd||fffd|W")
    rge(3, 1 + XAxis).Resize(dataInfo.nGrp, 1).Copy
    oRge(dataInfo.nVarSmpNum + 1, 2).PasteSpecial xlPasteValues
    rge(3, 1 + YAxis).Resize(dataInfo.nGrp, 1).Copy
    oRge(dataInfo.nVarSmpNum + 1, 3).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    For i = 1 To dataInfo.nGrp
        oRge(dataInfo.nVarSmpNum + i, 4) = dataInfo.nGrp + IIf(bPredict, 2, 1)
    Next i
    Application.Run GxlaBkGraph & "!drawTenGrp", toXlRCstr(oRge(0, 3).Resize(dataInfo.nVarSmpNum + 1 + dataInfo.nGrp, 1).Address), _
                    toXlRCstr(oRge(0, 2).Resize(dataInfo.nVarSmpNum + 1 + dataInfo.nGrp, 1).Address), _
                    toXlRCstr(oRge(0, 4).Resize(dataInfo.nVarSmpNum + 1 + dataInfo.nGrp, 1).Address), _
                    toXlRCstr(oRge(0, 1).Address), _
                    toXlRCstr(oRge(1, 1).Resize(dataInfo.nVarSmpNum + 1 + dataInfo.nGrp, 1).Address), _
                    "Marker=0&Width=9&Height=25&HasLegend=1&SmpName=" & SmpName & "&ChartTitle=|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|_|fffd|O|fffd||fffd||fffd|t"
    If bPredict Then
        oRge(1, dataInfo.nGrp + 3) = "|fffd|\|fffd||fffd|"
        oRge(1, dataInfo.nGrp + 4) = "|fffd|d|fffd|S|fffd||fffd||fffd|W"
    Else
        oRge(1, dataInfo.nGrp + 3) = "|fffd|d|fffd|S|fffd||fffd||fffd|W"
    End If
End Sub

Sub DrawSr2DotPlot(ByVal oRge As Range, dataInfo As BasInfo)
    Dim i As Integer
    Dim XAxis As Integer, YAxis As Integer, SmpName As Integer
    Dim rge As Range, ClsRge As Range
    Dim bPredict As Boolean
    
    Application.Run GxlaBkGraph & "!drawDotPlot_A", _
                    (oRge(1, -2).Resize(dataInfo.nVarSmpNum + 1, 1).Address), _
                    (oRge(1, -6).Resize(dataInfo.nVarSmpNum + 1, 1).Address), _
                    (oRge(0, 0).Address), 0
End Sub

Sub DrawSr2CateScore(ByVal oRge As Range, ByVal DataRge As Range, dataInfo As BasInfo)
    Dim i As Integer
    Dim tmpstr As String
    Dim XAxis As Integer, YAxis As Integer, NameDisp As Integer
    Dim tmpRge As Range
    XAxis = dataInfo.sr2Grp.nXAxis
    YAxis = dataInfo.sr2Grp.nYAxis
    NameDisp = IIf(dataInfo.sr2Grp.bCateName, 1, 0)
    tmpstr = vbNullString
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            tmpstr = tmpstr & "," & dataInfo.items(i).CateNum
        Else
            If dataInfo.bNumCate Then
                tmpstr = tmpstr & "," & dataInfo.items(i).NumCate
            Else
                tmpstr = tmpstr & "," & 1
            End If
        End If
    Next i
    tmpstr = Mid(tmpstr, 2)
    Set tmpRge = DataRge(1, 2).Resize(DataRge.Rows.Count, DataRge.Columns.Count - 1)
    For i = 1 To dataInfo.nGrp - 1
        Application.Run GxlaBkGraph & "!DrawSr2CateScore1", oRge.Worksheet.name, _
                        toXlRCstr(oRge.Address), _
                        toXlRCstr(tmpRge.Columns(2 + i).Address), _
                        "XRge=" & toXlRCstr(tmpRge.Columns(1).Address) & _
                        "&AxesNo=" & i & "&Rows=16&Cols=8&Cates=" & tmpstr & "&GrpType=2"
        Set oRge = oRge.Offset(0, 9)
    Next i
    If dataInfo.nGrp > 2 Then
        tmpRge(1, 2 + XAxis).Resize(tmpRge.Rows.Count, 1).Copy oRge(1, 1)
        tmpRge(1, 2 + YAxis).Resize(tmpRge.Rows.Count, 1).Copy oRge(1, 2)
        Application.Run GxlaBkGraph & "!DrawSr2CateScore2", oRge.Worksheet.name, _
                    toXlRCstr(oRge.Address), _
                    toXlRCstr(oRge.Resize(DataRge.Rows.Count, 2).Address), _
                    "NameRange=" & toXlRCstr(DataRge.Columns(1).Address) & _
                    "&Cor=0.000&NameDisp=" & NameDisp & "&AxisXName=" & XAxis & " Axis&AxisYName=" & YAxis & " Axis&Rows=17&Cols=8&GrpType=2"
    End If
End Sub

Function AdjustTableByItm(tblId As Integer, ByVal tblRge As Range, xNew As Integer) As Range
    
    Dim rowCnt As Integer, colCnt As Integer, rowCntNew As Integer, colCntNew As Integer
    Dim dx As Integer, cnt As Integer
    Dim tmpRge As Range
    Dim height As Integer, tmpi As Integer
    
    rowCnt = tblRge.Rows.Count
    colCnt = tblRge.Columns.Count
    dx = xNew - TMP_INUM
    
    Select Case tblId
    
        Case TBLID_GCRS
            
            height = TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew + 1).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_XCRS
            
            height = TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
                Call doInsRowCol(False, tblRge.Columns(colCnt - 1).Resize(rowCntNew, height), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew + 1).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
                tblRge.Columns(colCntNew + 1).Resize(rowCntNew, Abs(cnt)).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_CRAM
            
            height = ROWNUM_CRAM 'old: 3, 11.8.20 LSQ mdf
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = IIf(dx > 0, xNew + 1, 4)
            
            'table without legend
            tmpi = ROWNUM_CRAM + 4
            rowCnt = rowCnt - tmpi
            colCnt = colCnt - 1
            
            Set tmpRge = tblRge.Offset(tmpi, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - ROWNUM_CRAM + 1).Resize(height, colCnt), dx)
                Call doInsRowCol(False, tmpRge.Resize(rowCnt + cnt, colCnt).Columns(colCnt - 1), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
                tmpRge.Columns(2).Resize(rowCnt, 1).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_CORR
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dx
            
            Set tmpRge = tblRge.Offset(7, 0).Resize(rowCnt - 7, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(False, tmpRge.Columns(2), dx)
            ElseIf dx < 0 Then
                tmpRge.Columns(2).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_EIGEN
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_MODEL
            
            height = TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 2).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_NUMCATE
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_EXTRAINFO
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SMPSCORE
            #If 0 Then
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 3).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(5).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            #Else
                
            #End If
            
        Case TBLID_ATARI_CMB3
            
            height = TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 3).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew + 1).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_ATARI_CMB3_ITM
            
            height = TMP_CNUM_ATARI 'TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(False, tblRge.Columns(colCnt - TMP_CNUM_ATARI + 1).Resize(rowCntNew, height), dx)
            ElseIf dx < 0 Then
                tblRge.Columns(colCntNew + 1).Resize(rowCntNew, Abs(cnt)).Delete Shift:=xlToLeft
            End If
            
        Case Else
            
            rowCntNew = rowCnt
            colCntNew = colCnt
            
    End Select
    
    Set AdjustTableByItm = tblRge.Resize(rowCntNew, colCntNew)
    
End Function

Function AdjustTableByCat(tblId As Integer, ByVal tblRge As Range, ctNew As Variant, cnt As Integer) As Range
    
    Dim rowCnt As Integer, colCnt As Integer, rowCntNew As Integer, colCntNew As Integer
    Dim vPos() As Integer, vChg() As Integer
    Dim chg As Integer
    Dim change As Integer
    Dim i As Integer
    
    rowCnt = tblRge.Rows.Count
    colCnt = tblRge.Columns.Count
    ReDim vPos(1 To cnt)
    ReDim vChg(1 To cnt)
    
    Select Case tblId
    
        Case TBLID_GCRS
            
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 6, 5) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_XCRS
                        
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 4, 3) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt + change
            
            Set tblRge = tblRge.Offset(1, 0).Resize(rowCnt - 1, colCnt)
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            Set tblRge = tblRge.Resize(rowCntNew - 1, colCnt)
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            Set tblRge = tblRge.Offset(-1, 0)
            
        Case TBLID_MODEL
            
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 5, 4) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_SMPSCORE
            
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 6, 5) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_ATARI_CMB1
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 4, 3) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_ATARI_CMB2
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 5, 4) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_ATARI_CMB3
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 5, 4) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_ATARI_CMB3_CATE
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM_ATARI
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 5, 4) + TMP_CNUM_ATARI * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case Else
            
            rowCntNew = rowCnt
            colCntNew = colCnt
            
    End Select
    
    Set AdjustTableByCat = tblRge.Resize(rowCntNew, colCntNew)
    
End Function

Function AdjustTableByGrp(tblId As Integer, ByVal tblRge As Range, gNew As Integer) As Range
    
    Dim rowCnt As Integer, colCnt As Integer, rowCntNew As Integer, colCntNew As Integer
    Dim vPos(1 To 3) As Integer, vChg(1 To 3) As Integer
    Dim dg As Integer
    Dim i As Integer
    
    rowCnt = tblRge.Rows.Count
    colCnt = tblRge.Columns.Count
    dg = gNew - TMP_GNUM
    
    Select Case tblId
    
        Case TBLID_GCRS
            
            rowCntNew = rowCnt
            colCntNew = colCnt + 3 * dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = dg
            
            vPos(1) = 4: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_MODEL
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 4: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_NUMCATE
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = dg
            
            vPos(1) = 6: If dg > 0 Then vPos(1) = 6 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_EXTRAINFO
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 3: If dg > 0 Then vPos(1) = 3 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_SMPSCORE
            
            rowCntNew = rowCnt
            colCntNew = colCnt + 2 * dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = 0
            
            vPos(1) = 2: If dg > 0 Then vPos(1) = 1 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_NTABLE, TBLID_HTABLE, TBLID_VTABLE
            rowCntNew = rowCnt + dg
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 5: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 6: If dg > 0 Then vPos(1) = 5 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_EIGEN
            rowCntNew = rowCnt
            colCntNew = colCnt + dg - 1
            vChg(1) = dg - 1
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 4: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
        
        Case TBLID_ASR
            rowCntNew = rowCnt + dg
            colCntNew = colCnt
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 5: If dg > 0 Then vPos(1) = 5 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_BARY
            rowCntNew = rowCnt + dg
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 2: If dg > 0 Then vPos(1) = 1 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 3: If dg > 0 Then vPos(1) = 3 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_ATARI_CMB2
            rowCntNew = rowCnt
            colCntNew = colCnt + 2 * dg
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = 0
            
            vPos(1) = 5: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 5
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case Else
            
            rowCntNew = rowCnt
            colCntNew = colCnt
            
    End Select
    
    Set AdjustTableByGrp = tblRge.Resize(rowCntNew, colCntNew)
    
End Function

'
'adjust rows or columns
'11.8.14 LSQ
'
Private Sub doInsRowCol(ByVal bRow As Boolean, ByVal rge As Range, ByVal cnt As Integer)
    
    Dim rowCnt As Long, colCnt As Long
    
    rowCnt = rge.Rows.Count
    colCnt = rge.Columns.Count
    
    rge.Copy
    
    If bRow Then
        rge.Offset(rowCnt, 0).Resize(rowCnt * cnt, colCnt).Insert Shift:=xlDown
    Else
        rge.Offset(0, colCnt).Resize(rowCnt, colCnt * cnt).Insert Shift:=xlToRight
    End If
    
    Application.CutCopyMode = False
    
End Sub

Function AdjustRows(ByVal rge As Range, vPos As Variant, vChg As Variant) As Range
    
    Set AdjustRows = AdjustRowCol(True, rge, vPos, vChg)
    
End Function

Function AdjustCols(ByVal rge As Range, vPos As Variant, vChg As Variant) As Range
    
    Set AdjustCols = AdjustRowCol(False, rge, vPos, vChg)
    
End Function
'
'Insert or Delete rows or columns
'Used mainly in category adjustment
'
'bRow : True = Row operation, False = Column operation
'
Private Function AdjustRowCol(ByVal bRow As Boolean, ByVal rge As Range, vPos As Variant, vChg As Variant) As Range
    
    Dim rowNum As Integer, colNum As Integer, rowNumNew As Integer, colNumNew As Integer
    Dim strAddr As String
    Dim pos As Integer, chg As Integer
    Dim change As Integer
    Dim i As Integer
    
    strAddr = rge.Range("A1").Address
    rowNum = rge.Rows.Count
    colNum = rge.Columns.Count
    change = 0
    
    For i = UBound(vPos) To LBound(vPos) Step -1
        pos = vPos(i)
        chg = vChg(i)
        change = change + chg
        
        If bRow Then
            If chg > 0 Then
                rge.Rows(pos).Resize(chg, colNum).Insert Shift:=xlDown
            ElseIf chg < 0 Then
                rge.Rows(pos).Resize(-chg, colNum).Delete Shift:=xlUp
            End If
        Else
            If chg > 0 Then
                rge.Columns(pos).Resize(rowNum, chg).Insert Shift:=xlToRight
            ElseIf chg < 0 Then
                rge.Columns(pos).Resize(rowNum, -chg).Delete Shift:=xlToLeft
            End If
        End If
    Next i
    
    If bRow Then
        rowNumNew = rowNum + change
        colNumNew = colNum
    Else
        rowNumNew = rowNum
        colNumNew = colNum + change
    End If
    
    Set AdjustRowCol = rge.Worksheet.Range(strAddr).Resize(rowNumNew, colNumNew)
    
End Function

Function MakeMODEL_2Grp(ByVal outBgn As Range, dataInfo As BasInfo, ByVal dWidth As Double, ByRef csGrade As Double) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    Dim aryCate(1 To MAX_XNUM) As Integer
    Dim totalMaxCate As Double, tmpd As Double
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_MODEL)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_MODEL, rge, dataInfo.nItm)
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            aryCate(i) = dataInfo.items(i).CateNum
        ElseIf dataInfo.items(i).kind = 3 Then
            If dataInfo.bNumCate Then
                aryCate(i) = dataInfo.items(i).NumCate
            Else
                aryCate(i) = 1
            End If
        End If
    Next i
    Set rge = AdjustTableByCat(TBLID_MODEL, rge, aryCate, dataInfo.nItm)
    Set rge = AdjustTableByGrp(TBLID_MODEL, rge, dataInfo.nGrp - 1)
    
    Application.CutCopyMode = False
    
    rge(2, 4) = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|X|fffd|R|fffd|A"
    For i = 1 To dataInfo.nGrp - 1
        rge(3, 3 + i) = i & "|fffd||fffd|"
    Next i
    
    l = 4
    For i = 1 To dataInfo.nItm
        rge(l, 1) = dataInfo.items(i).name
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).CateNum
                rge(l, 2) = dataInfo.items(i).Cate(j).name
                l = l + 1
            Next j
        Else
            For j = 1 To dataInfo.items(i).NumCate
                rge(l, 2) = dataInfo.items(i).Cate(j).name
                l = l + 1
            Next j
        End If
        'l = l + IIf(dataInfo.items(i).kind = 2, dataInfo.items(i).CateNum, dataInfo.items(i).NumCate)
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd|f|fffd||fffd||fffd||fffd|")
    rge(3, 1).Resize(l - 4, dataInfo.nGrp).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues

    l = 3
    totalMaxCate = 0
    For i = 1 To dataInfo.nItm
        tmpd = 0
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).CateNum
                If tmpd < Abs(rge(l, 2)) Then tmpd = Abs(rge(l, 2))
                l = l + 1
            Next j
        Else
            For j = 1 To dataInfo.items(i).NumCate
                If tmpd < Abs(rge(l, 2)) Then tmpd = Abs(rge(l, 2))
                l = l + 1
            Next j
        End If
        totalMaxCate = totalMaxCate + tmpd
        'l = l + IIf(dataInfo.items(i).kind = 2, dataInfo.items(i).CateNum, dataInfo.items(i).NumCate)
    Next i
    
    csGrade = Int(totalMaxCate / dWidth) + 1
    csGrade = csGrade * dWidth
    
    DrawSr2CateScore outBgn(2, dataInfo.nGrp + 5), outBgn(3, 1).Resize(l - 2, dataInfo.nGrp + 2), dataInfo
    
    If outBgn.Rows.Count < 17 Then
        Set outBgn = outBgn(1, 1).Resize(17, outBgn.Columns.Count)
    End If
    
    Set MakeMODEL_2Grp = outBgn
    
End Function

Private Function GetCheckpoint(ByVal r1 As Range, ByVal r2 As Range, ByVal csGrade As Double, ByVal dWidth As Double) As Double
    Dim ssGradeTotal(0 To 1, 0 To 120) As Double
    Dim csIndex
    Dim i As Long, j As Long
    Dim dt1 As Double, dt2 As Double, dt3 As Double, dt4 As Double
    Dim s1 As Double, s2 As Double, total1 As Double, total2 As Double
    Dim dCheckpoint As Double
    For i = 1 To r1.Rows.Count
        csIndex = Int((r1(i, 1) + csGrade + dWidth / 2) / dWidth)
        If r2(i, 1) = 1 Then
            total1 = total1 + 1
        ElseIf r2(i, 1) = 2 Then
            total2 = total2 + 1
        End If
        For j = 0 To 120
            If j <= csIndex And val(r2(i, 1)) = 1 Then
                ssGradeTotal(0, j) = ssGradeTotal(0, j) + 1
            End If
            If j > csIndex And val(r2(i, 1)) = 2 Then
                ssGradeTotal(1, j) = ssGradeTotal(1, j) + 1
            End If
        Next j
    Next i
    dt1 = 0
    dt2 = 0
    For i = 0 To 120
        dt3 = dt1
        dt4 = dt2
        dt1 = ssGradeTotal(0, i) / total1
        dt2 = ssGradeTotal(1, i) / total2
        If (dt2 >= dt1) Then
            Exit For
        End If
    Next i
    s1 = -1 * csGrade - dWidth / 2
    s1 = s1 + dWidth * i
    s2 = s1 - dWidth
    dt3 = dt3 - dt4
    dt2 = dt2 - dt1
    dCheckpoint = dt3 * s1 + dt2 * s2
    dCheckpoint = dCheckpoint / (dt3 + dt2)
    GetCheckpoint = dCheckpoint
End Function

Function MakeCentralPoint(ByVal outBgn As Range, dataInfo As BasInfo, ByVal csGrade As Double, ByVal dWidth As Double, nt As NTABLE) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range, r1 As Range, r2 As Range
    Dim dCheckpoint As Double
    Dim v1 As Variant, v2 As Variant
    Dim gcode() As Long
    
    ReDim gcode(1 To dataInfo.nGrp)
    For i = 1 To dataInfo.nGrp
        gcode(i) = SbkThis.Worksheets("Sr2Info").Cells(1, 2 + i)
    Next i
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SMPSCORE)
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set outBgn = rge
    outBgn(1, 1) = "|fffd||fffd||fffd||293|I|fffd||fffd||fffd|_|fffd||242||fffd||953b||fffd||fffd|"
    outBgn(2, 1) = "|fffd||fffd||fffd||293|I|fffd||fffd||fffd|_"
    
    For i = 1 To dataInfo.nVarSmpNum
        outBgn(4 + i, 1) = SbkThis.Sheets("Sr2Data").Cells(i + 1, 1)
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\")
    Set r1 = rge(3, 2).Resize(dataInfo.nSmpNum, 1)
    Set r2 = rge(3, 3 + dataInfo.nGrp).Resize(dataInfo.nSmpNum, 1)
    dCheckpoint = GetCheckpoint(r1, r2, csGrade, dWidth)
    Set r1 = rge(3, 2).Resize(dataInfo.nVarSmpNum, 1)
    Set r2 = rge(3, 3 + dataInfo.nGrp).Resize(dataInfo.nVarSmpNum, 1)
    v1 = r1.Value
    v2 = r2.Value
    outBgn(2, 2) = dCheckpoint
    outBgn(4, 1) = "|fffd||5368e||496||fffd|"
    outBgn(4, 2) = "|fffd||fffd||fffd||fffd|Q"

    nt.total = dataInfo.nSmpNum
    nt.table(0, 0) = dataInfo.nSmpNum
    nt.dHittingRatio = 0
    For i = 1 To dataInfo.nVarSmpNum
        If v1(i, 1) > dCheckpoint Then
            outBgn(4 + i, 2) = gcode(1) '1
            If i <= dataInfo.nSmpNum Then
                If v2(i, 1) = gcode(1) Then
                    nt.table(gcode(1), gcode(1)) = nt.table(gcode(1), gcode(1)) + 1
                    nt.dHittingRatio = nt.dHittingRatio + 1
                Else
                    nt.table(gcode(1), gcode(2)) = nt.table(gcode(1), gcode(2)) + 1
                End If
            End If
        Else
            outBgn(4 + i, 2) = gcode(2) '2
            If i <= dataInfo.nSmpNum Then
                If v2(i, 1) = gcode(1) Then
                    nt.table(gcode(2), gcode(1)) = nt.table(gcode(2), gcode(1)) + 1
                Else
                    nt.table(gcode(2), gcode(2)) = nt.table(gcode(2), gcode(2)) + 1
                    nt.dHittingRatio = nt.dHittingRatio + 1
                End If
            End If
        End If
    Next i
    
    Erase gcode
    
    nt.table(0, 1) = nt.table(1, 1) + nt.table(2, 1)
    nt.table(0, 2) = nt.table(1, 2) + nt.table(2, 2)
    nt.table(1, 0) = nt.table(1, 1) + nt.table(1, 2)
    nt.table(2, 0) = nt.table(2, 1) + nt.table(2, 2)
    nt.dHittingRatio = nt.dHittingRatio / nt.total
    Call SetRangeBorder(outBgn(2, 1).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(4, 1).Resize(1, dataInfo.nGrp), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(5, 1).Resize(dataInfo.nSmpNum, dataInfo.nGrp), xlThin, xlThin, xlThin, xlThin, xlThin)
    If dataInfo.nVarSmpNum > dataInfo.nSmpNum Then
        Call SetRangeBorder(outBgn(dataInfo.nSmpNum + 5, 1).Resize(dataInfo.nVarSmpNum - dataInfo.nSmpNum, dataInfo.nGrp), xlThin, xlThin, xlThin, xlThin, xlThin)
    End If
    Set MakeCentralPoint = outBgn.Resize(dataInfo.nVarSmpNum + 4, 2)
End Function

Function MakeSignDist(ByVal outBgn As Range, dataInfo As BasInfo, nt As NTABLE) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range, r1 As Range, r2 As Range
    Dim dCheckpoint As Double
    Dim v1 As Variant, v2 As Variant
    Dim gcode() As Long
    
    ReDim gcode(1 To dataInfo.nGrp)
    For i = 1 To dataInfo.nGrp
        gcode(i) = SbkThis.Worksheets("Sr2Info").Cells(1, 2 + i)
    Next i
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SMPSCORE)
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set outBgn = rge
    outBgn(1, 1) = "|fffd||fffd||fffd||fffd||fffd||242||fffd||953b||fffd||fffd|"
    outBgn(2, 1) = "|fffd||fffd||fffd||293|I|fffd||fffd||fffd|_"
    
    For i = 1 To dataInfo.nVarSmpNum
        outBgn(4 + i, 1) = SbkThis.Sheets("Sr2Data").Cells(i + 1, 1)
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\")
    dCheckpoint = 0
    outBgn(2, 2) = dCheckpoint
    outBgn(4, 1) = "|fffd||5368e||496||fffd|"
    outBgn(4, 2) = "|fffd||fffd||fffd||fffd|Q"
    Set r1 = rge(3, 2).Resize(dataInfo.nVarSmpNum, 1)
    Set r2 = rge(3, 3 + dataInfo.nGrp).Resize(dataInfo.nVarSmpNum, 1)
    v1 = r1.Value
    v2 = r2.Value
    nt.total = dataInfo.nSmpNum
    nt.table(0, 0) = dataInfo.nSmpNum
    For i = 1 To dataInfo.nVarSmpNum
        If v1(i, 1) > dCheckpoint Then
            outBgn(4 + i, 2) = gcode(1) '1
            If i <= dataInfo.nSmpNum Then
                If v2(i, 1) = gcode(1) Then
                    nt.table(gcode(1), gcode(1)) = nt.table(gcode(1), gcode(1)) + 1
                    nt.dHittingRatio = nt.dHittingRatio + 1
                Else
                    nt.table(gcode(1), gcode(2)) = nt.table(gcode(1), gcode(2)) + 1
                End If
            End If
        Else
            outBgn(4 + i, 2) = gcode(2) '2
            If i <= dataInfo.nSmpNum Then
                If v2(i, 1) = gcode(1) Then
                    nt.table(gcode(2), gcode(1)) = nt.table(gcode(2), gcode(1)) + 1
                Else
                    nt.table(gcode(2), gcode(2)) = nt.table(gcode(2), gcode(2)) + 1
                    nt.dHittingRatio = nt.dHittingRatio + 1
                End If
            End If
        End If
    Next i
    
    Erase gcode
    
    nt.table(0, 1) = nt.table(1, 1) + nt.table(2, 1)
    nt.table(0, 2) = nt.table(1, 2) + nt.table(2, 2)
    nt.table(1, 0) = nt.table(1, 1) + nt.table(1, 2)
    nt.table(2, 0) = nt.table(2, 1) + nt.table(2, 2)
    nt.dHittingRatio = nt.dHittingRatio / nt.total
    Call SetRangeBorder(outBgn(2, 1).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(4, 1).Resize(1, dataInfo.nGrp), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(5, 1).Resize(dataInfo.nSmpNum, dataInfo.nGrp), xlThin, xlThin, xlThin, xlThin, xlThin)
    If dataInfo.nVarSmpNum > dataInfo.nSmpNum Then
        Call SetRangeBorder(outBgn(dataInfo.nSmpNum + 5, 1).Resize(dataInfo.nVarSmpNum - dataInfo.nSmpNum, dataInfo.nGrp), xlThin, xlThin, xlThin, xlThin, xlThin)
    End If
    Set MakeSignDist = outBgn
End Function

Function MakeNTABLE_2Grp(ByVal outBgn As Range, dataInfo As BasInfo, ByVal strTitle As String, nt As NTABLE) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    
    outBgn(1, 1) = strTitle
    Set outBgn = outBgn(2, 1)
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_NTABLE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByGrp(TBLID_NTABLE, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For j = 1 To dataInfo.nGrp
        outBgn(3, 3 + j) = j
        outBgn(4 + j, 2) = j
    Next j

    For i = 0 To 2
        For j = 0 To 2
            outBgn(4 + i, 3 + j) = nt.table(i, j)
        Next j
    Next i
    
    outBgn(8, 1) = "|fffd||fffd||fffd||293|I|fffd||fffd||fffd||fffd|"
    outBgn(9, 1) = nt.dHittingRatio
    outBgn(9, 1).NumberFormatLocal = "0.0%"
    
    Call SetRangeBorder(outBgn(9, 1), xlThin, xlThin, xlThin, xlThin)
        
    Set MakeNTABLE_2Grp = outBgn.Range("A1").Resize(outBgn.Rows.Count + 3, outBgn.Columns.Count)
End Function

Private Function find_MinMaxKaikyuChi(ByVal bgnv As Double, ByRef minv As Double, ByRef maxv As Double, ByVal dx As Double) As Long
    Dim xa As Double, xb As Double
    Dim dmaxmin As Double
    Dim i As Long, n As Long
    dmaxmin = maxv - minv
    'dx = 0.5
    'bgnv = -3.5
    xa = bgnv
    While xa + 1.5 * dx < minv
        xa = xa + dx
    Wend
    n = 1
    xb = xa
    While xb - 0.5 * dx < maxv
        xb = xb + dx
        n = n + 1
    Wend
    minv = xa
    maxv = xb
    find_MinMaxKaikyuChi = n
End Function

 Function find_Id(ByVal smpScr As Double, ByVal minx As Double, ByVal dx As Double) As Long
    Dim i As Long, n As Long
    n = 0
    While minx + 0.5 * dx < smpScr
        minx = minx + dx
        n = n + 1
    Wend
    find_Id = n
End Function

Private Function DECIMAL2(ByVal x As Double) As Long
    DECIMAL2 = Int(((x + 0.005) * 100)) Mod 100
End Function

Private Function makeRange2(ByVal maxv As Double, ByVal lenv As Double) As String
    Dim rmax As Double, rmin As Double
    Dim imin As Long, jmin As Long, imax As Long, jmax As Long
    Dim isign As String, jsign As String
    rmin = maxv
    If rmin < 0 Then
        isign = "-"
        rmin = -1 * rmin
    Else
        isign = ""
    End If
    imin = Int(rmin)
    jmin = DECIMAL2(rmin)
    rmax = lenv
    If rmax < 0 Then
        jsign = "-"
        rmax = -1 * rmax
    Else
        jsign = ""
    End If
    imax = Int(rmax)
    jmax = DECIMAL2(rmax)
    makeRange2 = isign & imin & "." & jmin & "|fffd|`" & jsign & imax & "." & jmax
End Function

Function MakeFreqTable(ByVal outBgn As Range, dataInfo As BasInfo, ByVal rgeCp As Range, ByVal csGrade As Double, ByVal dx As Double) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    Dim v1 As Variant, v2 As Variant
    Dim dblSum As Double
    Dim kkNum As Long, sid As Long, gid As Long
    Dim tbl() As Double
    Dim minv As Double, maxv As Double, tmpv As Double
    Dim total1 As Long, total2 As Long
    
    Set rge = outBgn.Resize(dataInfo.nVarSmpNum + 1, dataInfo.nGrp + 1)
    Set outBgn = rge
    outBgn(1, 1) = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|K|fffd||fffd||fffd||293|x|fffd||fffd||fffd|\"
    outBgn(1, 1).Font.Bold = True
    outBgn(2, 1) = "|fffd|K|fffd||fffd|"
    outBgn(2, 3) = "n"
    outBgn(2, 6) = "|fffd|c|fffd||fffd|"
    outBgn(2, 8) = "|fffd||fffd||fffd||fffd|"
    outBgn(3, 1) = "|fffd|K|fffd||fffd||fffd||fffd|"
    outBgn(3, 2) = "|fffd|K|fffd||fffd||fffd|l"
    outBgn(3, 3) = "|fffd|S|fffd||fffd|"
    outBgn(3, 4) = "|fffd|Q1"
    outBgn(3, 5) = "|fffd|Q2"
    outBgn(3, 6) = "|fffd|Q1"
    outBgn(3, 7) = "|fffd|Q2"
    outBgn(3, 8) = "|fffd|Q1"
    outBgn(3, 9) = "|fffd|Q2"

    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\")
    v1 = rge(3, 2).Resize(dataInfo.nSmpNum, 1).Value
    v2 = rge(3, 5).Resize(dataInfo.nSmpNum, 1).Value
    minv = WorksheetFunction.min(v1)
    maxv = WorksheetFunction.max(v1)
    kkNum = find_MinMaxKaikyuChi(-csGrade, minv, maxv, dx)
    ReDim tbl(0 To 2, 0 To kkNum - 1)
    total1 = 0
    total2 = 0
    For i = 1 To dataInfo.nSmpNum
        sid = find_Id(v1(i, 1), minv, dx)
        If sid >= 0 And sid < kkNum Then
            tbl(v2(i, 1), sid) = tbl(v2(i, 1), sid) + 1
            tbl(0, sid) = tbl(0, sid) + 1
            If v2(i, 1) = 1 Then
                total1 = total1 + 1
            Else
                total2 = total2 + 1
            End If
        End If
    Next i
    
    For i = 0 To kkNum - 1
        tmpv = minv + i * dx
        outBgn(4 + i, 1) = (tmpv - dx * 0.5) & "|fffd|`" & (tmpv + dx * 0.5)
        outBgn(4 + i, 2) = tmpv
        outBgn(4 + i, 3) = tbl(0, i)
        outBgn(4 + i, 4) = tbl(1, i)
        outBgn(4 + i, 5) = tbl(2, i)
        outBgn(4 + i, 6) = tbl(1, i) / total1
        outBgn(4 + i, 7) = tbl(2, i) / total2
        If (tbl(1, i) + tbl(2, i)) <> 0 Then
            outBgn(4 + i, 8) = tbl(1, i) / (tbl(1, i) + tbl(2, i))
            outBgn(4 + i, 9) = tbl(2, i) / (tbl(1, i) + tbl(2, i))
        Else
            outBgn(4 + i, 8) = 0
            outBgn(4 + i, 9) = 0
        End If
        tbl(1, i) = tbl(1, i) / total1
        tbl(2, i) = tbl(2, i) / total2
    Next i
    outBgn(4 + kkNum, 2) = "|fffd||fffd||fffd|v"
    outBgn(4 + kkNum, 3) = dataInfo.nSmpNum
    outBgn(4 + kkNum, 4) = total1
    outBgn(4 + kkNum, 5) = total2
    outBgn(4 + kkNum, 6) = 1
    outBgn(4 + kkNum, 7) = 1
    
    outBgn(4, 2).Resize(kkNum, 1).NumberFormatLocal = "0.00"
    outBgn(4, 6).Resize(kkNum + 2, 2).NumberFormatLocal = "0.0%"
    outBgn(4, 8).Resize(kkNum, 2).NumberFormatLocal = "0.0%"
    
    Call SetRangeBorder(outBgn(2, 1).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(2, 3).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(2, 6).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(2, 8).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(3, 1).Resize(1, 9), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(4, 1).Resize(kkNum, 9), xlThin, xlThin, xlThin, xlThin, xlThin)
    
    'draw graph"
    
    
    Set rge = outBgn
    
    Set outBgn = outBgn(6 + kkNum, 1)
    outBgn = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd||750||3d3|x|fffd||fffd||fffd|\"
    outBgn(1, 1).Font.Bold = True
    outBgn(2, 2) = "|fffd|Q1"
    outBgn(2, 4) = "|fffd|Q2"
    outBgn(3, 1) = "|fffd||690||fffd|"
    outBgn(3, 2) = "|fffd||348||fffd|"
    outBgn(3, 3) = "|fffd|Q1|fffd||750||3c1||fffd|"
    outBgn(3, 4) = "|fffd||348||fffd|"
    outBgn(3, 5) = "|fffd|Q2|fffd||750||3c1||fffd|"
    
    Dim dataSizeSAdj As Long, ctd As Double, Row As Long
    Dim di As Double, d1 As Double, d2 As Double
    
    i = 0
    Row = 4
    ctd = -csGrade
    minv = WorksheetFunction.min(v1)
    maxv = WorksheetFunction.max(v1)
    d1 = 1# - tbl(1, 0)
    d2 = 0
    While ctd < csGrade + 0.001
        If (ctd + 1.5 * dx) >= minv And (ctd - 1.5 * dx) <= maxv Then
            di = ctd - dx * 0.5
            If di > -0.001 And di < 0.001 Then di = 0
            outBgn(Row, 1) = di
            outBgn(Row, 2) = makeRange2(csGrade + 0.5 * dx, di)
            outBgn(Row, 3) = d1
            d1 = d1 - tbl(1, i)
            outBgn(Row, 4) = makeRange2(-csGrade - 0.5 * dx, di)
            outBgn(Row, 5) = d2
            d2 = d2 + tbl(2, i)
            Row = Row + 1
            i = i + 1
        End If
        ctd = ctd + dx
    Wend
    outBgn(4, 3).Resize(Row - 4, 5).NumberFormatLocal = "0.0%"
    outBgn(4, 5).Resize(Row - 4, 5).NumberFormatLocal = "0.0%"
    Call SetRangeBorder(outBgn(2, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(2, 2).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(2, 4).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(3, 1).Resize(1, 5), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(outBgn(4, 1).Resize(Row - 4, 5), xlThin, xlThin, xlThin, xlThin, xlThin)
    
    Application.Run GxlaBkGraph2 & "!DrawSr2SmpScore1", outBgn.Worksheet.name, toXlRCstr(outBgn(Row + 2, 1).Address), toXlRCstr(rge(3, 6).Resize(kkNum + 1, 2).Address), "XRge=" & toXlRCstr(rge(3, 2).Resize(kkNum + 1, 1).Address) & "&AxesNo=1&Rows=20&Cols=10&GrpType=1"
    Application.Run GxlaBkGraph2 & "!DrawSr2SmpScore2", outBgn.Worksheet.name, toXlRCstr(outBgn(Row + 2, 12).Address), toXlRCstr(outBgn(3, 1).Resize(Row - 3, 1).Address), "YRge1=" & toXlRCstr(outBgn(3, 3).Resize(Row - 3, 1).Address) & "&YRge2=" & toXlRCstr(outBgn(3, 5).Resize(Row - 3, 1).Address) & "&Rows=20&Cols=10&GrpType=1"
    
    Set MakeFreqTable = outBgn(1, 1).Resize(Row, 9)
End Function
Attribute VB_Name = "MdlTableSr2A"
'=======================================================
' Sub of make table
'
' 2011.8 LSQ
'=======================================================
Option Explicit
Option Private Module

Function TMPRGE_GCRS() As String
    TMPRGE_GCRS = findAddr_TBL(TBLID_GCRS)
End Function

Function TMPRGE_XCRS() As String
    TMPRGE_XCRS = findAddr_TBL(TBLID_XCRS)
End Function

Function TMPRGE_CRAM() As String
    TMPRGE_CRAM = findAddr_TBL(TBLID_CRAM)
End Function

Function TMPRGE_CORR() As String
    TMPRGE_CORR = findAddr_TBL(TBLID_CORR)
End Function

Function TMPRGE_EIGEN() As String
    TMPRGE_EIGEN = findAddr_TBL(TBLID_EIGEN)
End Function

Function TMPRGE_MODEL() As String
    TMPRGE_MODEL = findAddr_TBL(TBLID_MODEL)
End Function

Function TMPRGE_NUMCATE() As String
    TMPRGE_NUMCATE = findAddr_TBL(TBLID_NUMCATE)
End Function

Function TMPRGE_EXTRAINFO() As String
    TMPRGE_EXTRAINFO = findAddr_TBL(TBLID_EXTRAINFO)
End Function

Function TMPRGE_SMPSCORE() As String
    TMPRGE_SMPSCORE = findAddr_TBL(TBLID_SMPSCORE)
End Function

Function TMPRGE_BARY() As String
    TMPRGE_BARY = findAddr_TBL(TBLID_BARY)
End Function

Function TMPRGE_NTABLE() As String
    TMPRGE_NTABLE = findAddr_TBL(TBLID_NTABLE)
End Function

Function TMPRGE_HTABLE() As String
    TMPRGE_HTABLE = findAddr_TBL(TBLID_HTABLE)
End Function

Function TMPRGE_VTABLE() As String
    TMPRGE_VTABLE = findAddr_TBL(TBLID_VTABLE)
End Function

Function TMPRGE_ASR() As String
    TMPRGE_ASR = findAddr_TBL(TBLID_ASR)
End Function

Function TMPRGE_ATARI_CMB1() As String
    TMPRGE_ATARI_CMB1 = findAddr_TBL(TBLID_ATARI_CMB1)
End Function

Function TMPRGE_ATARI_CMB2() As String
    TMPRGE_ATARI_CMB2 = findAddr_TBL(TBLID_ATARI_CMB2)
End Function

Function TMPRGE_ATARI_CMB3() As String
    TMPRGE_ATARI_CMB3 = findAddr_TBL(TBLID_ATARI_CMB3)
End Function

Private Function findAddr_TBL(ByVal tblId As Integer) As String
    Dim sht As Worksheet, nmStr As String
    Dim rge As Range
    
    Set sht = SbkThis.Worksheets("TemplateTableSr2")
    nmStr = strStDefName(tblId)
    Set rge = getRange_FromStDefName(sht, nmStr)
    
    findAddr_TBL = ""
    If rge Is Nothing = False Then
        findAddr_TBL = rge.Address
    End If
End Function

Private Function strStDefName(ByVal tblId As String) As String
    strStDefName = ""
    Select Case tblId
        Case TBLID_GCRS: strStDefName = "NMTBL1_GCRS"
        Case TBLID_XCRS: strStDefName = "NMTBL2_XCRS"
        Case TBLID_CRAM: strStDefName = "NMTBL3_CRAM"
        Case TBLID_CORR: strStDefName = "NMTBL4_CORR"
        Case TBLID_EIGEN: strStDefName = "NMTBL5_EIGEN"
        Case TBLID_MODEL: strStDefName = "NMTBL6_MODEL"
        Case TBLID_NUMCATE: strStDefName = "NMTBL7_NUMCATE"
        Case TBLID_EXTRAINFO: strStDefName = "NMTBL8_EXTRAINFO"
        Case TBLID_SMPSCORE: strStDefName = "NMTBL9_SMPSCORE"
        Case TBLID_BARY: strStDefName = "NMTBL10_BARY"
        Case TBLID_NTABLE: strStDefName = "NMTBL11_NTABLE"
        Case TBLID_HTABLE: strStDefName = "NMTBL12_HTABLE"
        Case TBLID_VTABLE: strStDefName = "NMTBL13_VTABLE"
        Case TBLID_ASR: strStDefName = "NMTBL14_ASR"
        Case TBLID_ATARI_CMB1: strStDefName = "NMTBL15_ATARI_CMB1"
        Case TBLID_ATARI_CMB2: strStDefName = "NMTBL16_ATARI_CMB2"
        Case TBLID_ATARI_CMB3: strStDefName = "NMTBL17_ATARI_CMB3"
    End Select

End Function
'
'|fffd|V|fffd|[|fffd|g|fffd||303|Z|fffd||fffd||fffd||348||342||30b||fffd||fffd||fffd|
'11.8.20 LSQ mdf from subdsn.xls
'
Private Function getRange_FromStDefName(ByVal stObj As Worksheet, stDefName As String) As Range
    Dim RgeObj As Range
    
    On Error Resume Next
    
    Set RgeObj = stObj.Range(stObj.Names(stDefName))
    If Err.Number <> 0 Then     'ERROR
        Set RgeObj = Nothing
        Err.Clear
    End If
    
    Set getRange_FromStDefName = RgeObj
    
    On Error GoTo 0

End Function


'=== EOF ===
Attribute VB_Name = "MdlTenGrp"
'=======================================================
' Graph for Sss_Use06 (Ten Graph)
'
' 2008.04 WZH
'=======================================================

Option Explicit

Type mhbtsj_tengrp
    grpno As Long
    name As String
    n As Long
    x As Double
    y As Double
End Type

Private Const ERR_NULLRGE As String = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||80aa||fffd|K|fffd||602||142||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
Private Const ERR_NUMDATA As String = "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
Private Dict_Cate As Object

Private Sub DrawTenBorder(ByVal rgeData As Range)
    rgeData.Borders(xlDiagonalDown).LineStyle = xlNone
    rgeData.Borders(xlDiagonalUp).LineStyle = xlNone
    With rgeData.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorIndex = xlAutomatic
    End With
    With rgeData.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorIndex = xlAutomatic
    End With
    With rgeData.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorIndex = xlAutomatic
    End With
    With rgeData.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorIndex = xlAutomatic
    End With
End Sub

Private Function ProcData(ByVal bContinue As Boolean, ByRef bTitle As Boolean, ByRef nCateNum As Integer, ByRef sht As Worksheet, _
                          ByRef RgeNameData As Range, ByRef RgeClsData As Range, _
                          ByRef RgeXData As Range, ByRef RgeYData As Range) As Integer
    Dim rge As Range, rgeFiltered As Range
    Dim i, nSmpNum As Integer
    nSmpNum = RgeYData.Rows.Count
    If nSmpNum < RgeXData.Rows.Count Then
        nSmpNum = RgeXData.Rows.Count
    End If
    If Not RgeClsData Is Nothing Then
        If nSmpNum < RgeClsData.Rows.Count Then
            nSmpNum = RgeClsData.Rows.Count
        End If
    End If
    'Set sht = RgeClsData.Worksheet.Parent.Worksheets.Add
    'Set sht = ThisWorkbook.Worksheets("TempSht")
    Set rge = sht.Range("A1")
    rge(1, 1) = "|fffd||91||316||fffd||fffd||fffd|"
    If Not bTitle Then
        rge(1, 2) = "CLASS"
        rge(1, 3) = "X"
        rge(1, 4) = "Y"
        'Set rge = rge(2, 1)
        nSmpNum = nSmpNum + 1
    End If
    If Not RgeNameData Is Nothing Then
        Call RgeNameData.Columns(1).Copy
        rge(2, 1).PasteSpecial xlPasteValues
    Else
        For i = 2 To nSmpNum
            rge(i, 1) = i - 1
        Next i
    End If
    If RgeClsData Is Nothing Then
        rge(1, 2) = "CLASS"
        For i = 2 To nSmpNum
            rge(i, 2) = 1
        Next i
    Else
        RgeClsData.Columns(1).Copy
        rge(1 + IIf(bTitle, 0, 1), 2).PasteSpecial xlPasteValues
    End If
    RgeXData.Columns(1).Copy
    rge(1 + IIf(bTitle, 0, 1), 3).PasteSpecial xlPasteValues
    RgeYData.Columns(1).Copy
    rge(1 + IIf(bTitle, 0, 1), 4).PasteSpecial xlPasteValues
    '2010.05.27 mdf:
    #If 0 Then
        rge(1, 6) = ""
        rge(1, 7) = ""
        rge(1, 8) = ""
        rge(2, 6).FormulaR1C1 = "=VALUE(RC[-4])"
        rge(2, 7).FormulaR1C1 = ">=0" '"=VALUE(RC[-4])"
        rge(2, 8).FormulaR1C1 = ">=0" '"=VALUE(RC[-4])"
        Set rge = Range(rge(1, 1), rge(nSmpNum, 4))
        rge.AdvancedFilter xlFilterCopy, sht.Range("$E$1:$H$2"), sht.Range("$J$1"), False
        Set rge = sht.Range("$J$1")
    #Else
        Set rge = Range(rge(2, 2), rge(nSmpNum, 4))
        For i = rge.Rows.Count To 1 Step -1
            'If Application.WorksheetFunction.Count(rge.Rows(i)) <> 3 Then
            If Trim(rge(i, 1)) = "-" Or Trim(rge(i, 1)) = vbNullString Or Trim(rge(i, 2)) = vbNullString Or Trim(rge(i, 3)) = vbNullString _
              Or Not IsNumeric(rge(i, 2)) Or Not IsNumeric(rge(i, 3)) Then
                If bContinue Then
                    Application.CutCopyMode = False
                    sht.Rows(rge.Rows(i).Row).Delete Shift:=xlUp
                    nSmpNum = nSmpNum - 1
                Else
                    ProcData = -2
                    Exit Function
                End If
            End If
        Next i
        '2011.01.21 mdf
        'Set rge = Range(rge(2, 1), rge(nSmpNum, 4))
        Set rge = Range("A2").Resize(nSmpNum - 1, 4)
        'end mdf
        rge.Sort Key1:=Range("B2")
        Set rge = sht.Range("A1")
    #End If
    'end mdf
    nSmpNum = sht.Range(rge(1, 2), rge(1, 2).End(xlDown)).Rows.Count
    Set rge = sht.Range(rge, rge(nSmpNum, 1))
    Set RgeNameData = sht.Range(rge(1, 1), rge(nSmpNum, 1))
    Set RgeClsData = sht.Range(rge(1, 2), rge(nSmpNum, 2))
    Set RgeXData = sht.Range(rge(1, 3), rge(nSmpNum, 3))
    Set RgeYData = sht.Range(rge(1, 4), rge(nSmpNum, 4))
    bTitle = True
    'nCateNum = Application.WorksheetFunction.max(RgeClsData)
    On Error Resume Next
    Set Dict_Cate = CreateObject("Scripting.Dictionary")
    For i = 1 To nSmpNum - 1
        Dict_Cate.Add Trim(RgeClsData(i + 1, 1)), Dict_Cate.Count + 1
    Next i
    nCateNum = Dict_Cate.Count
    On Error GoTo 0
    If nSmpNum < 1 Then 'Or Application.WorksheetFunction.min(RgeClsData) <> 1 Then
        ProcData = -1
    Else
        ProcData = 0
    End If
End Function

Private Sub SmpName_Click()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgTenGrp")
    dlg.EditBoxes("RgeNameData").Enabled = (dlg.CheckBoxes("chkSmpName").Value = xlOn)
End Sub

Private Sub CateName_Click()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgTenGrp")
    dlg.EditBoxes("RgeCateData").Enabled = (dlg.CheckBoxes("chkCateName").Value = xlOn)
End Sub

Private Sub SetMacro_TEN()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgTenGrp")
    dlg.CheckBoxes("chkSmpName").OnAction = "SmpName_Click"
    dlg.CheckBoxes("chkCateName").OnAction = "CateName_Click"
    SmpName_Click
    CateName_Click
End Sub

Public Sub THR7_GRP_TEN()
    Dim i, j, k As Integer
    Dim ii As Integer, jj As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim RgeYData As Range, RgeXData As Range, RgeClsData As Range
    Dim RgeOut As Range, RgeNameData As Range, RgeCateData As Range
    Dim xrge As Range, yrge As Range, ClsRge As Range, namerge As Range
    Dim RgeTmp As Range
    Dim bSmpName As Boolean
    Dim bCateName As Boolean
    Dim bOutYes As Boolean
    Dim bDataTitle As Boolean, bContinue As Boolean
    Dim oRow As Integer, oCol As Integer
    Dim nSmpNum As Integer, nCateNum As Integer
    Dim strXTitle As String, strYTitle As String
    Dim tmpSht As Worksheet
    Dim xData() As Variant, yData() As Variant
    Dim tmpVal As Double
    Dim colorIndex() As Variant
    Dim cht As Chart
    Dim bNoClsData As Boolean
    
    colorIndex() = Array(5, 7, 10, 3, 1, 45, 8, 54, 4)
    
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgTenGrp")
    SetMacro_TEN
redisp:

    Set RgeYData = Nothing
    Set RgeXData = Nothing
    Set RgeClsData = Nothing
    Set RgeOut = Nothing
    Set RgeNameData = Nothing
    Set RgeCateData = Nothing
    Application.ScreenUpdating = True
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Set RgeYData = Range(toXlA1str(dlg.EditBoxes("RgeYData").Text)) '07.2.9 LSQ add "toXlA1()", |fffd||209||fffd||fffd||fffd|
        Set RgeXData = Range(toXlA1str(dlg.EditBoxes("RgeXData").Text))
        'Set rgeOut = Range(toXlA1str(dlg.EditBoxes("RgeOut").Text))
         If Err.Number <> 0 Then
            MsgBox ERR_NULLRGE
            GoTo redisp
        End If
        Set RgeClsData = Range(toXlA1str(dlg.EditBoxes("RgeClsData").Text))
        If RgeClsData Is Nothing Then
            bNoClsData = True
        Else
            bNoClsData = False
        End If
        Err.Clear
        
        bDataTitle = True 'IIf(dlg.OptionButtons("optTitle").Value = xlOn, True, False)
        bContinue = IIf(dlg.OptionButtons("optExcept").Value = xlOn, True, False)
        
        bSmpName = IIf(dlg.CheckBoxes("chkSmpName").Value = xlOn, True, False)
        If bSmpName Then
            Set RgeNameData = Range(toXlA1str(dlg.EditBoxes("RgeNameData").Text))
            Set namerge = Range(toXlA1str(dlg.EditBoxes("RgeNameData").Text))
        End If
        bCateName = IIf(dlg.CheckBoxes("chkCateName").Value = xlOn, True, False)
        If bCateName Then
            Set RgeCateData = Range(toXlA1str(dlg.EditBoxes("RgeCateData").Text))
        End If
        bOutYes = IIf(dlg.OptionButtons("optOutYes").Value = xlOn, True, False)
        
        Set yrge = Range(toXlA1str(dlg.EditBoxes("RgeYData").Text)) '07.2.9 LSQ add "toXlA1()", |fffd||209||fffd||fffd||fffd|
        Set xrge = Range(toXlA1str(dlg.EditBoxes("RgeXData").Text))
        Set ClsRge = Range(toXlA1str(dlg.EditBoxes("RgeClsData").Text))
        If yrge.Columns.Count * xrge.Columns.Count > 25 Then
            MsgBox "|fffd|O|fffd||fffd||fffd|t|fffd||fffd|25|fffd||82||702||142||142||fffd||fffd|B", vbOKOnly Or vbExclamation
            GoTo redisp
        End If
        Set tmpSht = yrge.Worksheet.Parent.Worksheets.Add
        Set RgeOut = tmpSht.Range("A2")
        yrge.Worksheet.Activate
        For ii = 1 To xrge.Columns.Count
        nSmpNum = xrge.Rows.Count - 1
        Set RgeXData = xrge.Worksheet.Range(xrge(1, ii), xrge(nSmpNum + 1, ii))
        For jj = 1 To yrge.Columns.Count
        Set RgeClsData = Nothing
        Set RgeXData = xrge.Worksheet.Range(xrge(1, ii), xrge(nSmpNum + 1, ii))
        Set RgeYData = yrge.Worksheet.Range(yrge(1, jj), yrge(nSmpNum + 1, jj))
        Set RgeClsData = ClsRge.Worksheet.Range(ClsRge(1, 1), ClsRge(nSmpNum + 1, 1))
        If bSmpName Then
            Set RgeNameData = namerge.Worksheet.Range(namerge(1, 1), namerge(nSmpNum + 1, 1))
        Else
            Set RgeNameData = Nothing
        End If
        Set tmpSht = RgeOut.Worksheet.Parent.Worksheets.Add
        
        Set Dict_Cate = Nothing
        rtn = ProcData(bContinue, bDataTitle, nCateNum, tmpSht, RgeNameData, RgeClsData, RgeXData, RgeYData)
        If rtn < 0 Or Dict_Cate Is Nothing Then
            Application.DisplayAlerts = False
            tmpSht.Delete
            Application.DisplayAlerts = True
            If rtn = -2 Then MsgBox ERR_NUMDATA
            GoTo redisp
        End If
        
        nSmpNum = RgeXData.Rows.Count - 1
        
        Application.ScreenUpdating = False
        RgeOut.Worksheet.Activate
        RgeOut.Activate
        oRow = 1
        oCol = 1
        RgeOut(oRow, oCol) = "|fffd|O|fffd||fffd||fffd|t|fffd|p|fffd|f|fffd|[|fffd|^"
        oRow = oRow + 1
        RgeOut(oRow, oCol) = "|fffd||91||316||fffd||fffd||fffd|"
        If bDataTitle Then
            RgeOut(oRow, oCol + 1) = RgeXData(1, 1)
            strXTitle = RgeXData(1, 1).Text
            strYTitle = RgeYData(1, 1).Text
            'Set RgeXData = Range(RgeXData(2, 1), RgeXData(nSmpNum + 1, 1))
            'Set RgeYData = Range(RgeYData(2, 1), RgeYData(nSmpNum + 1, 1))
            Set RgeClsData = RgeClsData.Worksheet.Range(RgeClsData(1, 1), RgeClsData(nSmpNum + 1, 1))
            Set RgeNameData = RgeNameData.Worksheet.Range(RgeNameData(1, 1), RgeNameData(nSmpNum + 1, 1))
            'nSmpNum = nSmpNum - 1
        Else
            RgeOut(oRow, oCol + 1) = "X"
            strXTitle = "X"
            strYTitle = "Y"
        End If
        If bCateName And Not RgeCateData Is Nothing Then
            For i = 1 To nCateNum
                RgeOut(oRow, oCol + i + 1) = RgeCateData(i, 1)
            Next i
        Else
            For i = 1 To nCateNum
                RgeOut(oRow, oCol + i + 1) = i
            Next i
        End If
        'oRow = oRow + 1
        For i = 1 To nSmpNum
            If bSmpName Then
                RgeOut(oRow + i, oCol) = RgeNameData(i + 1, 1)
            Else
                RgeOut(oRow + i, oCol) = i
            End If
            RgeOut(oRow + i, oCol + 1) = RgeXData(i + 1, 1)
            'rgeOut(oRow + i, oCol + val(RgeClsData(i, 1).Value) + 1) = RgeYData(i + 1, 1)
            RgeOut(oRow + i, oCol + Dict_Cate(Trim(RgeClsData(i + 1, 1))) + 1) = RgeYData(i + 1, 1)
        Next i
        Set RgeTmp = Range(RgeOut(2, 1), RgeOut(nSmpNum + 2, nCateNum + 2))
        For i = 1 To nCateNum + 2
            Call DrawTenBorder(RgeTmp.Columns(i))
            Call DrawTenBorder(RgeTmp(1, i))
        Next i
        If nSmpNum > 1 Then
            Set RgeTmp = Range(RgeOut(3, 2), RgeOut(nSmpNum + 2, nCateNum + 2))
        Else
            Set RgeTmp = Range(RgeOut(3, 2), RgeOut(nSmpNum + 3, nCateNum + 2))
        End If
        'ThisWorkbook.Worksheets("tmplTenGrp").ChartObjects("grpTen").Copy
        RgeOut.Worksheet.Activate
        RgeOut(1, 1).Activate
        'ActiveSheet.Paste
        Set cht = Comm_GetTmplGrp(RgeOut(1, 1), GxlaBkGraph, "tmplTenGrp", "grpTen") '11.5.31 mdf : GxlaTai5BkGraph
        Call ActiveChart.SetSourceData(RgeTmp, xlByColumns)
        Err.Clear
        If Not bNoClsData Then
            ActiveChart.Legend.Position = xlLegendPositionRight
        Else
            ActiveChart.HasLegend = False
        End If
        For i = nCateNum To 1 Step -1
            'ActiveChart.SeriesCollection(i).XValues = "='" & RgeTmp.Worksheet.Name & "'!" & toXlRCstr(RgeTmp.Columns(1).Address)
            'ActiveChart.SeriesCollection(i).Values = "='" & RgeTmp.Worksheet.Name & "'!" & toXlRCstr(RgeTmp.Columns(i + 1).Address)
            ActiveChart.SeriesCollection(i).name = "='" & RgeTmp.Worksheet.name & "'!" & toXlRCstr(RgeOut(2, i + 2).Address)
            If Err.Number > 0 Then
                ActiveChart.Legend.LegendEntries(i).Delete
                Err.Clear
            End If
        Next i
        ActiveChart.Axes(xlValue).AxisTitle.Characters.Text = strYTitle
        ActiveChart.Axes(xlCategory).AxisTitle.Characters.Text = strXTitle
        If Not bSmpName Then
            For i = 1 To nCateNum
                ActiveChart.SeriesCollection(i).ApplyDataLabels Type:=xlDataLabelsShowNone, LegendKey:=False
            Next i
        Else
            For i = 1 To nCateNum
                ActiveChart.SeriesCollection(i).ApplyDataLabels Type:=xlDataLabelsShowLabel, LegendKey:=False
                For j = 1 To ActiveChart.SeriesCollection(i).Points.Count
                    If ActiveChart.SeriesCollection(i).Points(j).HasDataLabel Then
                        ActiveChart.SeriesCollection(i).Points(j).DataLabel.Text = RgeNameData(j + 1, 1)
                    End If
                Next j
            Next i
        End If
        For i = 1 To nCateNum
            With ActiveChart.SeriesCollection(i)
                .MarkerBackgroundColorIndex = colorIndex((i - 1) Mod 9)
                .MarkerForegroundColorIndex = .MarkerBackgroundColorIndex
                .MarkerStyle = xlCircle
                .Smooth = False
                .MarkerSize = 6
                .Shadow = False
                .Border.LineStyle = xlNone
            End With
        Next i
        ActiveChart.ChartArea.Select
        Call MatchWorkbookFont
        If bOutYes Then
            Set RgeTmp = RgeOut(nSmpNum + 4, 1)
            If RgeTmp.Row < ActiveChart.Parent.BottomRightCell.Row Then
                Set RgeTmp = RgeOut.Worksheet.Cells(ActiveChart.Parent.BottomRightCell.Row + 1, ActiveChart.Parent.TopLeftCell.Column)
            End If
            RgeTmp(1, 1) = "|fffd||fffd||fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
            Set RgeTmp = RgeTmp(2, 1)
            If Not bNoClsData Then
                For i = 1 To nCateNum
                    RgeTmp(i, 1) = RgeOut(2, i + 2)
                    k = 0
                    For j = 1 To nSmpNum
                        If val(RgeClsData(j + 1, 1)) = i Then
                            k = k + 1
                            ReDim Preserve xData(1 To k)
                            ReDim Preserve yData(1 To k)
                            xData(k) = RgeXData(j + 1, 1)
                            yData(k) = RgeYData(j + 1, 1)
                        End If
                    Next j
                    If k > 1 Then
                        tmpVal = Application.WorksheetFunction.Correl(xData, yData)
                        RgeTmp(i, 2) = tmpVal
                    Else
                        RgeTmp(i, 2) = "-"
                    End If
                Next i
                RgeTmp(nCateNum + 1, 1) = "|fffd|S|fffd||fffd|"
                RgeTmp(nCateNum + 1, 2) = Application.WorksheetFunction.Correl(RgeXData, RgeYData)
                Call DrawTenBorder(Range(RgeTmp(1, 1), RgeTmp(nCateNum, 1)))
                Call DrawTenBorder(Range(RgeTmp(1, 2), RgeTmp(nCateNum, 2)))
                Call DrawTenBorder(RgeTmp(nCateNum + 1, 1))
                Call DrawTenBorder(RgeTmp(nCateNum + 1, 2))
            Else
                RgeTmp(1, 1) = "|fffd|S|fffd||fffd|"
                RgeTmp(1, 2) = Application.WorksheetFunction.Correl(RgeXData, RgeYData)
                Call DrawTenBorder(RgeTmp(1, 1))
                Call DrawTenBorder(RgeTmp(1, 2))
                nCateNum = 0
            End If
        End If
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
        RgeOut.Worksheet.Activate
        RgeOut.Activate
        If nSmpNum > 22 Then
            Set RgeOut = RgeOut(nSmpNum + 7, 1)
        Else
            Set RgeOut = RgeOut(24, 1)
        End If
        If bOutYes Then
            Set RgeOut = RgeOut(nCateNum + 3, 1)
        End If
        Next jj
        Next ii
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub

Public Sub drawTenGrp(ByVal yrge As String, ByVal xrge As String, ByVal ClsRge As String, _
                          ByVal outRge As String, ByVal namerge As String, ByVal strPara As String)
    Dim i, j, k As Integer
    Dim rtn As Integer
    Dim RgeYData As Range, RgeXData As Range, RgeClsData As Range
    Dim RgeOut As Range, RgeNameData As Range, RgeCateData As Range
    Dim RgeTmp As Range
    Dim bSmpName As Boolean
    Dim bCateName As Boolean
    Dim bOutYes As Boolean
    Dim bDataTitle As Boolean, bContinue As Boolean
    Dim bHasLegend As Boolean
    Dim oRow As Integer, oCol As Integer
    Dim nSmpNum As Integer, nCateNum As Integer
    Dim strXTitle As String, strYTitle As String, strChtTitle  As String
    Dim tmpSht As Worksheet
    Dim xData() As Variant, yData() As Variant
    Dim tmpVal As Double
    Dim colorIndex() As Variant
    Dim cht As Chart
    Dim para As Object
    Dim grpWidth As Integer, grpHeight As Integer
    Dim flgMarker As Integer
    
    colorIndex() = Array(5, 7, 10, 3, 1, 45, 8, 54, 4)
    
    On Error Resume Next
redisp:

    Set RgeYData = Nothing
    Set RgeXData = Nothing
    Set RgeClsData = Nothing
    Set RgeOut = Nothing
    Set RgeNameData = Nothing
    
    If 1 Then
        Set RgeYData = Range(toXlA1str(yrge)) '07.2.9 LSQ add "toXlA1()", |fffd||209||fffd||fffd||fffd|
        Set RgeXData = Range(toXlA1str(xrge))
        Set RgeClsData = Range(toXlA1str(ClsRge))
        Set RgeOut = Range(toXlA1str(outRge))
        Set para = Comm_SetDict(strPara)
        If para.exists("Marker") Then
            flgMarker = para("Marker")
        Else
            flgMarker = 0
        End If
        If para.exists("Width") Then
            grpWidth = para("Width")
        Else
            grpWidth = 0
        End If
        If para.exists("Height") Then
            grpHeight = para("Height")
        Else
            grpHeight = 0
        End If
        
        bDataTitle = True
        bContinue = True
        
        If para.exists("SmpName") Then
            bSmpName = (para("SmpName") = 1)
        Else
            bSmpName = True
        End If
        If bSmpName Then
            Set RgeNameData = Range(toXlA1str(namerge))
        End If
        If para.exists("CateName") Then
            bCateName = (para("CateName") = 1)
        Else
            bCateName = False
        End If
        If bCateName Then
            If para.exists("CateRange") Then
                Set RgeCateData = Range(toXlA1str(para("CateRange")))
                If RgeCateData Is Nothing Then
                    bCateName = False
                End If
            Else
                bCateName = False
            End If
        End If

        If para.exists("HasLegend") Then
            bHasLegend = (para("HasLegend") = 1)
        Else
            bHasLegend = False
        End If
        
        If para.exists("ChartTitle") Then
            strChtTitle = para("ChartTitle")
        Else
            strChtTitle = vbNullString
        End If
        
        bOutYes = False
        
        nSmpNum = RgeXData.Rows.Count - 1
        
        If Err.Number <> 0 Then
            Exit Sub
        End If
        
        Set tmpSht = RgeOut.Worksheet.Parent.Worksheets.Add
        
        Set Dict_Cate = Nothing
        rtn = ProcData(bContinue, bDataTitle, nCateNum, tmpSht, RgeNameData, RgeClsData, RgeXData, RgeYData)
        If rtn < 0 Or Dict_Cate Is Nothing Then Exit Sub
        nSmpNum = RgeXData.Rows.Count - 1
        
        Application.ScreenUpdating = False
        RgeOut.Worksheet.Activate
        RgeOut.Select
        oRow = 1
        oCol = 1
        RgeOut(oRow, oCol) = "|fffd|O|fffd||fffd||fffd|t|fffd|p|fffd|f|fffd|[|fffd|^"
        oRow = oRow + 1
        RgeOut(oRow, oCol) = "|fffd||91||316||fffd||fffd||fffd|"
        If bDataTitle Then
            RgeOut(oRow, oCol + 1) = RgeXData(1, 1)
            strXTitle = RgeXData(1, 1).Text
            strYTitle = RgeYData(1, 1).Text
            Set RgeXData = Range(RgeXData(2, 1), RgeXData(nSmpNum + 1, 1))
            Set RgeYData = Range(RgeYData(2, 1), RgeYData(nSmpNum + 1, 1))
            Set RgeClsData = Range(RgeClsData(2, 1), RgeClsData(nSmpNum + 1, 1))
            Set RgeNameData = Range(RgeNameData(2, 1), RgeNameData(nSmpNum + 1, 1))
            'nSmpNum = nSmpNum - 1
        Else
            RgeOut(oRow, oCol + 1) = "X"
            strXTitle = "X"
            strYTitle = "Y"
        End If
        If bCateName Then
            For i = 1 To nCateNum
                RgeOut(oRow, oCol + i + 1) = RgeCateData(i, 1)
            Next i
        Else
            For i = 1 To nCateNum
                RgeOut(oRow, oCol + i + 1) = i
            Next i
        End If
        'oRow = oRow + 1
        RgeOut(oRow + 1, oCol).Resize(nSmpNum, 4).ClearContents         '2013.10.18 added
        For i = 1 To nSmpNum
            If bSmpName Then
                RgeOut(oRow + i, oCol) = RgeNameData(i, 1)
            Else
                RgeOut(oRow + i, oCol) = i
            End If
            RgeOut(oRow + i, oCol + 1) = RgeXData(i, 1)
            'rgeOut(oRow + i, oCol + val(RgeClsData(i, 1).Value) + 1) = RgeYData(i, 1)
            RgeOut(oRow + i, oCol + Dict_Cate(Trim(RgeClsData(i, 1))) + 1) = RgeYData(i, 1)
        Next i
        Set RgeTmp = Range(RgeOut(2, 1), RgeOut(nSmpNum + 2, nCateNum + 2))
        For i = 1 To nCateNum + 2
            Call DrawTenBorder(RgeTmp.Columns(i))
            Call DrawTenBorder(RgeTmp(1, i))
        Next i
        If nSmpNum > 1 Then
            Set RgeTmp = Range(RgeOut(3, 2), RgeOut(nSmpNum + 2, nCateNum + 2))
        Else
            Set RgeTmp = Range(RgeOut(3, 2), RgeOut(nSmpNum + 3, nCateNum + 2))
        End If
        'ThisWorkbook.Worksheets("tmplTenGrp").ChartObjects("grpTen").Copy
        RgeOut.Worksheet.Activate
        RgeOut(1, 1).Select
        'ActiveSheet.Paste
        Set cht = Comm_GetTmplGrp(RgeOut(1, 1), GxlaBkGraph, "tmplTenGrp", "grpTen") '11.5.31 mdf : GxlaTai5BkGraph
        Call ActiveChart.SetSourceData(RgeTmp)
        Err.Clear
        ActiveChart.Legend.Position = xlLegendPositionRight
        For i = nCateNum To 1 Step -1
            'ActiveChart.SeriesCollection(i).XValues = "='" & RgeTmp.Worksheet.Name & "'!" & toXlRCstr(RgeTmp.Columns(1).Address)
            'ActiveChart.SeriesCollection(i).Values = "='" & RgeTmp.Worksheet.Name & "'!" & toXlRCstr(RgeTmp.Columns(i + 1).Address)
            ActiveChart.SeriesCollection(i).name = "='" & RgeTmp.Worksheet.name & "'!" & toXlRCstr(RgeOut(2, i + 2).Address)
            If Err.Number > 0 Then
                ActiveChart.Legend.LegendEntries(i).Delete
                Err.Clear
            End If
        Next i
        ActiveChart.Axes(xlValue).HasTitle = True
        ActiveChart.Axes(xlCategory).HasTitle = True
        ActiveChart.Axes(xlValue).AxisTitle.Characters.Text = strYTitle
        ActiveChart.Axes(xlCategory).AxisTitle.Characters.Text = strXTitle
        ActiveChart.Axes(xlValue).AxisTitle.Orientation = xlHorizontal
        ActiveChart.Axes(xlValue).AxisTitle.Top = 6
        ActiveChart.Axes(xlValue).MajorGridlines.Delete
        ActiveChart.Axes(xlCategory).MajorGridlines.Delete
        If strChtTitle <> vbNullString Then
            ActiveChart.chartTitle.Characters.Text = strChtTitle
        End If
        If Not bSmpName Then
            For i = 1 To nCateNum
                ActiveChart.SeriesCollection(i).ApplyDataLabels Type:=xlDataLabelsShowNone, LegendKey:=False
            Next i
        Else
            For i = 1 To nCateNum
                ActiveChart.SeriesCollection(i).ApplyDataLabels Type:=xlDataLabelsShowLabel, LegendKey:=False
                For j = 1 To ActiveChart.SeriesCollection(i).Points.Count
                    If ActiveChart.SeriesCollection(i).Points(j).HasDataLabel Then
                        ActiveChart.SeriesCollection(i).Points(j).DataLabel.Text = RgeNameData(j, 1)
                    End If
                Next j
            Next i
        End If
        For i = 1 To nCateNum
            With ActiveChart.SeriesCollection(i)
                .MarkerBackgroundColorIndex = colorIndex((i - 1) Mod 9)
                .MarkerForegroundColorIndex = .MarkerBackgroundColorIndex
                If flgMarker = 0 Then
                .MarkerStyle = IIf(i = 1, xlCircle, xlDiamond)
                Else
                .MarkerStyle = IIf(flgMarker = 1, xlCircle, xlDiamond)
                End If
                .Smooth = False
                .MarkerSize = 6
                .Shadow = False
            End With
        Next i
        ActiveChart.HasLegend = bHasLegend
        Call Comm_setChartPosSize(ActiveChart.Parent, RgeOut(1, 1), grpHeight, grpWidth)
        ActiveChart.ChartArea.Select
        Call MatchWorkbookFont
        If bOutYes Then
            Set RgeTmp = RgeOut.Worksheet.Cells(ActiveChart.Parent.BottomRightCell.Row + 1, ActiveChart.Parent.TopLeftCell.Column)
            RgeTmp(1, 1) = "|fffd||fffd||fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
            Set RgeTmp = RgeTmp(2, 1)
            For i = 1 To nCateNum
                RgeTmp(i, 1) = RgeOut(2, i + 2)
                k = 0
                For j = 1 To nSmpNum
                    If val(RgeClsData(j, 1)) = i Then
                        k = k + 1
                        ReDim Preserve xData(1 To k)
                        ReDim Preserve yData(1 To k)
                        xData(k) = RgeXData(j, 1)
                        yData(k) = RgeYData(j, 1)
                    End If
                Next j
                If k > 1 Then
                    tmpVal = Application.WorksheetFunction.Correl(xData, yData)
                    RgeTmp(i, 2) = tmpVal
                Else
                    RgeTmp(i, 2) = "-"
                End If
            Next i
            RgeTmp(nCateNum + 1, 1) = "|fffd|S|fffd||fffd|"
            RgeTmp(nCateNum + 1, 2) = Application.WorksheetFunction.Correl(RgeXData, RgeYData)
            Call DrawTenBorder(Range(RgeTmp(1, 1), RgeTmp(nCateNum, 1)))
            Call DrawTenBorder(Range(RgeTmp(1, 2), RgeTmp(nCateNum, 2)))
            Call DrawTenBorder(RgeTmp(nCateNum + 1, 1))
            Call DrawTenBorder(RgeTmp(nCateNum + 1, 2))
        End If
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
        RgeOut.Activate
    End If
    On Error GoTo 0
End Sub

Public Sub drawTenGrp_mhbtsj(ByVal yrge As String, ByVal xrge As String, ByVal ClsRge As String, _
                          ByVal outRge As String, ByVal namerge As String, ByVal strPara As String)
    Dim i, j, k As Integer
    Dim rtn As Integer
    Dim RgeYData As Range, RgeXData As Range, RgeClsData As Range
    Dim RgeOut As Range, RgeNameData As Range, RgeCateData As Range
    Dim RgeTmp As Range
    Dim bSmpName As Boolean
    Dim bCateName As Boolean
    Dim bOutYes As Boolean
    Dim bDataTitle As Boolean, bContinue As Boolean
    Dim bHasLegend As Boolean
    Dim oRow As Integer, oCol As Integer
    Dim nSmpNum As Integer, nCateNum As Integer
    Dim strXTitle As String, strYTitle As String, strChtTitle  As String
    Dim tmpSht As Worksheet
    Dim xData() As Variant, yData() As Variant
    Dim tmpVal As Double
    Dim colorIndex() As Variant
    Dim cht As Chart
    Dim para As Object
    Dim grpWidth As Integer, grpHeight As Integer
    Dim flgMarker As Integer
    
    colorIndex() = Array(5, 7, 10, 3, 9, 45, 8, 54, 4)
    
    On Error Resume Next
redisp:

    Set RgeYData = Nothing
    Set RgeXData = Nothing
    Set RgeClsData = Nothing
    Set RgeOut = Nothing
    Set RgeNameData = Nothing
    
    If 1 Then
        Set RgeYData = Range(toXlA1str(yrge)) '07.2.9 LSQ add "toXlA1()", |fffd||209||fffd||fffd||fffd|
        Set RgeXData = Range(toXlA1str(xrge))
        Set RgeClsData = Range(toXlA1str(ClsRge))
        Set RgeOut = Range(toXlA1str(outRge))
        Set para = Comm_SetDict(strPara)
        If para.exists("Marker") Then
            flgMarker = para("Marker")
        Else
            flgMarker = 0
        End If
        If para.exists("Width") Then
            grpWidth = para("Width")
        Else
            grpWidth = 0
        End If
        If para.exists("Height") Then
            grpHeight = para("Height")
        Else
            grpHeight = 0
        End If
        
        bDataTitle = True
        bContinue = True
        
        If para.exists("SmpName") Then
            bSmpName = (para("SmpName") = 1)
        Else
            bSmpName = True
        End If
        If bSmpName Then
            Set RgeNameData = Range(toXlA1str(namerge))
        End If
        If para.exists("CateName") Then
            bCateName = (para("CateName") = 1)
        Else
            bCateName = False
        End If
        If bCateName Then
            If para.exists("CateRange") Then
                Set RgeCateData = Range(toXlA1str(para("CateRange")))
                If RgeCateData Is Nothing Then
                    bCateName = False
                End If
            Else
                bCateName = False
            End If
        End If

        If para.exists("HasLegend") Then
            bHasLegend = False '(para("HasLegend") = 1)
        Else
            bHasLegend = False
        End If
        
        If para.exists("ChartTitle") Then
            strChtTitle = para("ChartTitle")
        Else
            strChtTitle = vbNullString
        End If
        
        bOutYes = False
        
        nSmpNum = RgeXData.Rows.Count - 1
        
        If Err.Number <> 0 Then
            Exit Sub
        End If
        
        Set tmpSht = RgeOut.Worksheet.Parent.Worksheets.Add

        nSmpNum = RgeXData.Rows.Count - 1
        nCateNum = RgeCateData.Rows.Count
        
        Application.ScreenUpdating = False
        RgeOut.Worksheet.Activate
        RgeOut.Select
        oRow = 1
        oCol = 1
        RgeOut(oRow, oCol) = "|fffd|O|fffd||fffd||fffd|t|fffd|p|fffd|f|fffd|[|fffd|^"
        oRow = oRow + 1
        RgeOut(oRow, oCol) = "|fffd||91||316||fffd||fffd||fffd|"
        If bDataTitle Then
            RgeOut(oRow, oCol + 1) = RgeXData(1, 1)
            strXTitle = RgeXData(1, 1).Text
            strYTitle = RgeYData(1, 1).Text
            Set RgeXData = Range(RgeXData(2, 1), RgeXData(nSmpNum + 1, 1))
            Set RgeYData = Range(RgeYData(2, 1), RgeYData(nSmpNum + 1, 1))
            Set RgeClsData = Range(RgeClsData(2, 1), RgeClsData(nSmpNum + 1, 1))
            Set RgeNameData = Range(RgeNameData(1, 1), RgeNameData(nSmpNum + 2, 1))
            'nSmpNum = nSmpNum - 1
        Else
            RgeOut(oRow, oCol + 1) = "X"
            strXTitle = "X"
            strYTitle = "Y"
        End If
        RgeOut(oRow, oCol + 1) = strXTitle
        RgeOut(oRow, oCol + 2) = strYTitle
        'oRow = oRow + 1
        Dim mhbtgrp() As mhbtsj_tengrp
        ReDim mhbtgrp(1 To nCateNum)
        
        RgeOut(oRow + 1, oCol).Resize(nSmpNum, 4).ClearContents         '2013.10.18 added
        For i = 1 To nSmpNum
            If bSmpName Then
                RgeOut(oRow + i, oCol) = RgeNameData(i, 1)
            Else
                RgeOut(oRow + i, oCol) = i
            End If
            RgeOut(oRow + i, oCol + 1) = RgeXData(i, 1)
            RgeOut(oRow + i, oCol + 2) = RgeYData(i, 1)
            For j = 1 To nCateNum
                If Trim(RgeClsData(i, 1)) = Trim(RgeCateData(j, 1)) Then
                    Exit For
                End If
            Next j
            RgeOut(oRow + i, oCol + 3) = j
            If j <= nCateNum Then
                mhbtgrp(j).grpno = nCateNum + 2
                mhbtgrp(j).name = Trim(RgeClsData(i, 1))
                mhbtgrp(j).n = mhbtgrp(j).n + 1
                mhbtgrp(j).x = mhbtgrp(j).x + RgeXData(i, 1)
                mhbtgrp(j).y = mhbtgrp(j).y + RgeYData(i, 1)
            End If
        Next i
        For i = 1 To nCateNum
            RgeOut(oRow + i + nSmpNum, oCol) = mhbtgrp(i).name
            RgeOut(oRow + i + nSmpNum, oCol + 1) = mhbtgrp(i).x / mhbtgrp(i).n
            RgeOut(oRow + i + nSmpNum, oCol + 2) = mhbtgrp(i).y / mhbtgrp(i).n
            RgeOut(oRow + i + nSmpNum, oCol + 3) = mhbtgrp(i).grpno
        Next i
        Set RgeNameData = RgeOut(oRow + 1, oCol).Resize(nSmpNum - 1 + nCateNum, 1)
        Set RgeTmp = Range(RgeOut(2, 1), RgeOut(nSmpNum + 2 + nCateNum, 3))
        For i = 1 To 4
            Call DrawTenBorder(RgeTmp.Columns(i))
            Call DrawTenBorder(RgeTmp(1, i))
        Next i
        If nSmpNum > 1 Then
            Set RgeTmp = Range(RgeOut(3, 2), RgeOut(nSmpNum + 2 + nCateNum, 3))
        Else
            Set RgeTmp = Range(RgeOut(3, 2), RgeOut(nSmpNum + 3 + nCateNum, 3))
        End If
        'ThisWorkbook.Worksheets("tmplTenGrp").ChartObjects("grpTen").Copy
        RgeOut.Worksheet.Activate
        RgeOut(1, 1).Select
        'ActiveSheet.Paste
        Set cht = Comm_GetTmplGrp(RgeOut(1, 1), GxlaBkGraph, "tmplTenGrp", "grpTen") '11.5.31 mdf : GxlaTai5BkGraph
        Call ActiveChart.SetSourceData(RgeTmp)
        Err.Clear
        ActiveChart.Legend.Position = xlLegendPositionRight
        For i = nCateNum To 1 Step -1
            'ActiveChart.SeriesCollection(i).XValues = "='" & RgeTmp.Worksheet.Name & "'!" & toXlRCstr(RgeTmp.Columns(1).Address)
            'ActiveChart.SeriesCollection(i).Values = "='" & RgeTmp.Worksheet.Name & "'!" & toXlRCstr(RgeTmp.Columns(i + 1).Address)
            ActiveChart.SeriesCollection(i).name = "='" & RgeTmp.Worksheet.name & "'!" & toXlRCstr(RgeOut(2, i + 2).Address)
            If Err.Number > 0 Then
                ActiveChart.Legend.LegendEntries(i).Delete
                Err.Clear
            End If
        Next i
        ActiveChart.Axes(xlValue).HasTitle = True
        ActiveChart.Axes(xlCategory).HasTitle = True
        ActiveChart.Axes(xlValue).AxisTitle.Characters.Text = strYTitle
        ActiveChart.Axes(xlCategory).AxisTitle.Characters.Text = strXTitle
        ActiveChart.Axes(xlValue).AxisTitle.Orientation = xlHorizontal
        ActiveChart.Axes(xlValue).AxisTitle.Top = 6
        ActiveChart.Axes(xlValue).MajorGridlines.Delete
        ActiveChart.Axes(xlCategory).MajorGridlines.Delete
        If strChtTitle <> vbNullString Then
            ActiveChart.chartTitle.Characters.Text = strChtTitle
        End If
        If Not bSmpName Then
            For i = 1 To nCateNum
                ActiveChart.SeriesCollection(i).ApplyDataLabels Type:=xlDataLabelsShowNone, LegendKey:=False
            Next i
        Else
            For i = 1 To nCateNum
                ActiveChart.SeriesCollection(i).ApplyDataLabels Type:=xlDataLabelsShowLabel, LegendKey:=False
                For j = 1 To ActiveChart.SeriesCollection(i).Points.Count
                    If ActiveChart.SeriesCollection(i).Points(j).HasDataLabel Then
                        ActiveChart.SeriesCollection(i).Points(j).DataLabel.Text = RgeNameData(j, 1)
                    End If
                Next j
            Next i
        End If
        For i = 1 To nCateNum
            With ActiveChart.SeriesCollection(i)
                For j = 1 To .Points.Count
                    k = RgeOut(j + 2, 4)
                    .Points(j).MarkerBackgroundColorIndex = IIf(k = nCateNum + 2, 1, colorIndex((k - 1) Mod 9)) 'IIf(k <= nCateNum, colorIndex((k - 1) Mod 9), xlNone)
                    .Points(j).MarkerForegroundColorIndex = IIf(k = nCateNum + 2, 1, .Points(j).MarkerBackgroundColorIndex) 'IIf(k <= nCateNum, .MarkerBackgroundColorIndex, 11)
                    If flgMarker = 0 Then
                    .Points(j).MarkerStyle = xlDiamond ' IIf(k = 1 Or k > nCateNum, xlCircle, xlDiamond)
                    Else
                    .Points(j).MarkerStyle = xlDiamond ' IIf(flgMarker = 1 Or k > nCateNum, xlCircle, xlDiamond)
                    End If
                    .Points(j).Smooth = False
                    .Points(j).MarkerSize = 6
                    .Points(j).Shadow = False
                Next j
            End With
        Next i
        ActiveChart.HasLegend = bHasLegend
        Call Comm_setChartPosSize(ActiveChart.Parent, RgeOut(1, 1), grpHeight, grpWidth)
        ActiveChart.ChartArea.Select
        Call MatchWorkbookFont
        If bOutYes Then
            Set RgeTmp = RgeOut.Worksheet.Cells(ActiveChart.Parent.BottomRightCell.Row + 1, ActiveChart.Parent.TopLeftCell.Column)
            RgeTmp(1, 1) = "|fffd||fffd||fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
            Set RgeTmp = RgeTmp(2, 1)
            For i = 1 To nCateNum
                RgeTmp(i, 1) = RgeOut(2, i + 2)
                k = 0
                For j = 1 To nSmpNum
                    If val(RgeClsData(j, 1)) = i Then
                        k = k + 1
                        ReDim Preserve xData(1 To k)
                        ReDim Preserve yData(1 To k)
                        xData(k) = RgeXData(j, 1)
                        yData(k) = RgeYData(j, 1)
                    End If
                Next j
                If k > 1 Then
                    tmpVal = Application.WorksheetFunction.Correl(xData, yData)
                    RgeTmp(i, 2) = tmpVal
                Else
                    RgeTmp(i, 2) = "-"
                End If
            Next i
            RgeTmp(nCateNum + 1, 1) = "|fffd|S|fffd||fffd|"
            RgeTmp(nCateNum + 1, 2) = Application.WorksheetFunction.Correl(RgeXData, RgeYData)
            Call DrawTenBorder(Range(RgeTmp(1, 1), RgeTmp(nCateNum, 1)))
            Call DrawTenBorder(Range(RgeTmp(1, 2), RgeTmp(nCateNum, 2)))
            Call DrawTenBorder(RgeTmp(nCateNum + 1, 1))
            Call DrawTenBorder(RgeTmp(nCateNum + 1, 2))
        End If
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
        RgeOut.Activate
    End If
    On Error GoTo 0
End Sub


'=== EOF ===
Attribute VB_Name = "PDF_EXE"
Option Explicit
'
' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||58c|W|fffd||fffd|Windows API|fffd||fffd||933e||fffd||fffd||fffd||fffd|
'
'|fffd||fffd||fffd||30d||14c||fffd||fffd||fffd||fffd|DebugTxt|fffd||fffd||fffd||82||fffd|

Private Const HKEY_CLASSES_ROOT = &H80000000
Private Const HKEY_CURRENT_USER = &H80000001
Private Const HKEY_LOCAL_MACHINE = &H80000002
Private Const HKEY_USERS = &H80000003
Private Const ERROR_SUCCESS = 0&
Private Const ERROR_NO_MORE_ITEMS = 259&

Private Const REG_SZ = 1
Private Const REG_BINARY = 3
Private Const REG_DWORD = 4


'Private Const HKEY_LOCAL_MACHINE = &H80000002
'Private Const HKEY_CLASSES_ROOT = &H80000000
'Private Const REG_SZ = 1

Private Const STANDARD_RIGHTS_ALL = &H1F0000
Private Const KEY_QUERY_VALUE = &H1
Private Const KEY_ENUMERATE_SUB_KEYS = &H8
Private Const KEY_NOTIFY = &H10
Private Const SYNCHRONIZE = &H100000

Private Const READ_CONTROL = &H20000
Private Const STANDARD_RIGHTS_READ = (READ_CONTROL)

Private Const KEY_READ = ((STANDARD_RIGHTS_READ Or KEY_QUERY_VALUE Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY) And (Not SYNCHRONIZE))
Private Const KEY_EXECUTE = (KEY_READ)

'---------
Private Const KEY_SET_VALUE = &H2
Private Const KEY_CREATE_SUB_KEY = &H4
'Public Const KEY_ENUMERATE_SUB_KEYS = &H8
'Public Const KEY_NOTIFY = &H10
Private Const KEY_CREATE_LINK = &H20
'Public Const SYNCHRONIZE = &H100000
Private Const KEY_ALL_ACCESS = ((STANDARD_RIGHTS_ALL Or KEY_QUERY_VALUE Or KEY_SET_VALUE Or KEY_CREATE_SUB_KEY Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY Or KEY_CREATE_LINK) And (Not SYNCHRONIZE))

Private Const REG_OPTION_VOLATILE = 1            ' Key is not preserved when system is rebooted
Private Const REG_OPTION_NON_VOLATILE = 0        ' Key is preserved when system is rebooted

Type SECURITY_ATTRIBUTES
        nLength As Long
        lpSecurityDescriptor As Long
        bInheritHandle As Boolean
End Type
'-------

#If VBA7 Then
    Private Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" (ByVal hkey As LongPtr) As Long
    Private Declare PtrSafe Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, phkResult As LongPtr) As Long
    Private Declare PtrSafe Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, phkResult As Long) As Long
    Private Declare PtrSafe Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
    Private Declare PtrSafe Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
    Private Declare PtrSafe Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hkey As LongPtr, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long          ' Note that if you declare the lpData parameter as String, you must pass it By Value.
    Private Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As LongPtr) As Long
    Private Declare PtrSafe Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String) As Long
    Private Declare PtrSafe Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hkey As LongPtr, ByVal lpValueName As String) As Long
    
    'Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As SECURITY_ATTRIBUTES, phkResult As Long, lpdwDisposition As Long) As Long
    Private Declare PtrSafe Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As Long, phkResult As LongPtr, lpdwDisposition As Long) As Long
    
    '2006.5.25 added wzh for missed definition of OSRegSetValueEx
    Private Declare PtrSafe Function OSRegSetValueEx Lib "advapi32.dll" Alias _
           "RegSetValueExA" (ByVal hkey As LongPtr, ByVal lpValueName As String, _
           ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal _
           cbData As Long) As Long
    '
    
    '--------------
    Private Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
    Private Declare PtrSafe Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
    Private Declare PtrSafe Function CopyFile Lib "kernel32" Alias "CopyFileA" (ByVal lpExistingFileName As String, ByVal lpNewFileName As String, ByVal bFailIfExists As Long) As Long
#Else
    Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hkey As Long) As Long
    Private Declare Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
    Private Declare Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
    Private Declare Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
    Private Declare Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
    Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hkey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
    Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
    Private Declare Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hkey As Long, ByVal lpSubKey As String) As Long
    Private Declare Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hkey As Long, ByVal lpValueName As String) As Long
    
    'Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As SECURITY_ATTRIBUTES, phkResult As Long, lpdwDisposition As Long) As Long
    Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As Long, phkResult As Long, lpdwDisposition As Long) As Long
    
    '2006.5.25 added wzh for missed definition of OSRegSetValueEx
    Private Declare Function OSRegSetValueEx Lib "advapi32.dll" Alias _
           "RegSetValueExA" (ByVal hkey As Long, ByVal lpValueName As String, _
           ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal _
           cbData As Long) As Long
    '
    
    '--------------
    Private Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
    Private Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
    Private Declare Function CopyFile Lib "kernel32" Alias "CopyFileA" (ByVal lpExistingFileName As String, ByVal lpNewFileName As String, ByVal bFailIfExists As Long) As Long
#End If

Sub tetetet()
Attribute tetetet.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim iRet As Integer
    Dim sTemp As String
    

    iRet = iExt_App_Search(".pdf", 1, sTemp)
    MsgBox sTemp

    iRet = iExt_App_Search(".pdf", 2, sTemp)
    MsgBox sTemp
End Sub


Function iExt_App_Search(sExt_str As String, iMode As Integer, ByRef sPrg_path As String) As Integer
Attribute iExt_App_Search.VB_ProcData.VB_Invoke_Func = " \n14"
'----------------------------------------
'|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|N|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd|v|fffd||fffd||fffd||303|p|fffd|X|fffd||12c82||5c2||fffd|
'sPrg_path|fffd||243|p|fffd|X|fffd||292|u|fffd||fffd||fffd|i|fffd|[|fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd|
'|fffd|@sExt_str       |fffd||fffd||fffd||5c2||fffd||fffd||fffd||fffd|g|fffd||fffd||fffd|q(|fffd|s|fffd||fffd||fffd|I|fffd|h|fffd|t|fffd||fffd|)|fffd|@|fffd|y|fffd||fffd|z|fffd|@".PDF"
'  iMode          |fffd|f|fffd|[|fffd|^|fffd||64fe||fffd||fffd||fffd|[|fffd|h
'       1:|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||303|t|fffd||fffd||fffd|p|fffd|X|fffd||302||741|@|fffd|y|fffd||fffd|z|fffd|@|fffd|u"c:\acrobat\reader.exe"|fffd|v
'       2:|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||308||fffd||fffd||fffd||fffd||fffd||fffd|S|fffd||fffd|  |fffd|y|fffd||fffd|z|fffd|@|fffd|u"c:\acrobat\reader.exe""%1"|fffd|v
'|fffd|@sPrg_path      |fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|p|fffd|X|fffd||30a|i|fffd|[|fffd|G|fffd||fffd||fffd|A|fffd|@|fffd|y|fffd||fffd|z|fffd|@"c:\acrobat\reader.exe"
'|fffd||7c2||fffd|l
'  |fffd||fffd||fffd||fffd|I|fffd||fffd||fffd|F 1
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-1|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-2|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|A|fffd|v|fffd||fffd||fffd|P|fffd|[|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-3|fffd|i|fffd||fffd||fffd|[|fffd|h|fffd||fffd|1,2|fffd||20a|O|fffd||fffd||fffd|w|fffd||80b3||fffd||a0bd||fffd|j
'--------------------------

    Dim iRet1 As Integer
    Dim sReg_Path As String
    Dim sApp_Path As String
    Dim sKey1  As String
    Dim sTemp1 As String
    Dim sTemp2 As String
    Dim sTemp3 As String
    Dim iLengs As Integer
    Dim iCnt1 As Integer
    Dim iEndCnt As Integer

    sKey1 = "\shell\open\command"
    
    '|fffd||fffd||fffd|}|fffd||302||60a4||fffd||203|A|fffd|v|fffd||fffd||fffd||302||182||fffd|
    sTemp1 = sExt_str & sKey1
    iRet1 = iGet_reg_string(1, sTemp1, "", sApp_Path) '|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||70cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||64fe|
    If (iRet1 <> 1) Then
        '|fffd|s|fffd|V|fffd||1c2||fffd||fffd|A|fffd|v|fffd||fffd||fffd||302||182||fffd|
        iRet1 = iGet_reg_string(1, sExt_str, "", sReg_Path) '|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||70cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||64fe|
        If (iRet1 <> 1) Then
            iExt_App_Search = -1
            Exit Function
        End If
    
        sTemp1 = sReg_Path & sKey1
        iRet1 = iGet_reg_string(1, sTemp1, "", sApp_Path) '|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||70cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||64fe|
        If (iRet1 <> 1) Then
            iExt_App_Search = -2
            Exit Function
        End If
    End If
    
    
    Select Case iMode
        Case 1 '|fffd|t|fffd||fffd||fffd|p|fffd|X|fffd||302||742||fffd||502||fffd|
            iLengs = Len(sApp_Path)
            sTemp1 = Mid(sApp_Path, 1, 1)
            iEndCnt = 0
            If (sTemp1 = Chr$(34)) Then
                '|fffd||14f||fffd||fffd||315||fffd||fffd||fffd||fffd||42a81|u"|fffd|v|fffd||302||182||fffd||fffd||34f|I|fffd||fffd||fffd||301|u"|fffd|v|fffd||292|u|fffd||702||14e||64fe|
                For iCnt1 = 2 To iLengs
                    sTemp2 = Mid(sApp_Path, iCnt1, 1)
                    If (sTemp2 = Chr$(34)) Then
                        iEndCnt = iCnt1
                        Exit For
                    End If
                Next iCnt1
                sTemp3 = Mid(sApp_Path, 1, iEndCnt)
            Else
                '|fffd||14f||fffd||fffd||315||fffd||fffd||fffd||fffd||42a81|u"|fffd|v|fffd||20a|O|fffd||302||182||fffd||fffd||341|u%|fffd|v|fffd||30e||fffd|O|fffd||292|u|fffd||702||14e||64fe|
                For iCnt1 = 1 To iLengs
                    sTemp2 = Mid(sApp_Path, iCnt1, 1)
                    If (sTemp2 = "%") Then
                        iEndCnt = iCnt1
                        Exit For
                    End If
                Next iCnt1
                sTemp3 = Mid(sApp_Path, 1, iEndCnt - 1)
            End If
            sPrg_path = sTemp3
            iExt_App_Search = 1
    
        Case 2 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||311|S|fffd||102||fffd||502||fffd|
            sPrg_path = sApp_Path
            iExt_App_Search = 1
        Case Else
            sPrg_path = ""
            iExt_App_Search = -3
    End Select
    
End Function


'--------------
Function iSet_reg_string(iRegMode As Integer, sRegPATH As String, sRegItem As String, sItemStr As String)
Attribute iSet_reg_string.VB_ProcData.VB_Invoke_Func = " \n14"
'--------------------------
'|fffd||fffd||fffd||442||302||fffd||fffd||fffd||6bc||7bd||fffd||60f||fffd||fffd||fffd||752||80b7||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@iRegMode:1|fffd|`4|fffd||310||fffd||fffd||fffd|
'   1:HKEY_CLASSES_ROOT
'   2:HKEY_CURRENT_USER
'   3:HKEY_LOCAL_MACHINE
'   4:HKEY_USERS
'|fffd|@sRegPath:|6bc||7bd||fffd||fffd| |fffd||7fd||fffd||fffd||fffd||fffd||fffd||fffd|
'  sRegItem:|6bc||7bd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||217||fffd||fffd||fffd|)
'  sItemStr:|6bc||7bd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||7c2||fffd|l|fffd|F
'  |fffd||fffd||fffd||fffd|I|fffd||fffd||fffd|F1
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-1(|6bc||7bd||fffd||fffd||4f0||fffd||782||310||752||80aa||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|F1|fffd|`4|fffd||20a|O)
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-2(|6bc||7bd||fffd||637||fffd||fffd||313|o|fffd|^|fffd||fffd||fffd|s)
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-3(|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||313|o|fffd|^|fffd||fffd||fffd|s)
'--------------------------
    Dim CurForm As Object
    Dim AppName As String
    Dim Entry As String
   
    Dim Index As Integer
    Dim Value As String
    Dim KeyValue As String
    #If VBA7 Then
    Dim keyhandle As LongPtr
    #Else
    Dim keyhandle As Long
    #End If
    Dim Ret As Long
    Dim KeyValueLength As Long
    Dim sKeyTemp As String
    Dim bRet As Boolean '
    Dim Ret2 As Long
        
     
    ' |fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||c2bc2||fffd||302||24f|\|fffd||fffd||fffd||203|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||182||fffd||fffd||115||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||181|A|fffd||fffd||295||6cc||fffd||153d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '
    Value = Space(512)
    '
    ' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||211|O|fffd||303|T|fffd|C|fffd|Y|fffd||188||292|u|fffd||30f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    '
   
    KeyValue = Space(512)
    KeyValueLength = Len(KeyValue)
    
    '|fffd||fffd||fffd|[|fffd|h|fffd||242||fffd||fffd||fffd||115||3c2||fffd||fffd|
    
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If (sRegItem = "") Then
        Select Case iRegMode
            Case 1
                Ret = RegCreateKey(HKEY_CLASSES_ROOT, sRegPATH, keyhandle)
            Case 2
                Ret = RegCreateKey(HKEY_CURRENT_USER, sRegPATH, keyhandle)
            Case 3
                Ret = RegCreateKey(HKEY_LOCAL_MACHINE, sRegPATH, keyhandle)
            Case 4
                Ret = RegCreateKey(HKEY_USERS, sRegPATH, keyhandle)
            Case Else
                iSet_reg_string = -1
                Exit Function
        End Select
    
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||939e|
    Else
        Select Case iRegMode
            Case 1
                Ret = RegCreateKeyEx(HKEY_CLASSES_ROOT, sRegPATH, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, keyhandle, Ret2)
            Case 2
                Ret = RegCreateKeyEx(HKEY_CURRENT_USER, sRegPATH, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, keyhandle, Ret2)
            Case 3
                Ret = RegCreateKeyEx(HKEY_LOCAL_MACHINE, sRegPATH, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, keyhandle, Ret2)
            Case 4
                Ret = RegCreateKeyEx(HKEY_USERS, sRegPATH, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, keyhandle, Ret2)
            Case Else
                iSet_reg_string = -1
                Exit Function
        End Select
    End If
    
    If Ret <> 0 Then
        iSet_reg_string = -2
        Exit Function
    End If
    
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If (sRegItem = "") Then
        'Ret = RegSetValue(KeyHandle, "", REG_SZ, sItemStr, Len(sItemStr) + 1)
        
        If (sItemStr = "") Then
            Select Case iRegMode
                Case 1
                    Ret = RegDeleteKey(HKEY_CLASSES_ROOT, sRegPATH)
                Case 2
                    Ret = RegDeleteKey(HKEY_CURRENT_USER, sRegPATH)
                Case 3
                    Ret = RegDeleteKey(HKEY_LOCAL_MACHINE, sRegPATH)
                Case 4
                    Ret = RegDeleteKey(HKEY_USERS, sRegPATH)
                Case Else
                    iSet_reg_string = -1
                    Exit Function
            End Select
        Else
            Ret = RegSetValue(keyhandle, "", REG_SZ, sItemStr, Len(sItemStr) + 1)
        End If
        
        'Ret = RegSetValue(KeyHandle, "", REG_SZ, sItemStr, Len(sItemStr) + 1)
        If (Ret <> 0) Then
            iSet_reg_string = -3
        Else
            iSet_reg_string = 1
        End If
     
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Else
        
        'Ret = OSRegSetValueEx(KeyHandle, sRegItem, 0&, REG_SZ, ByVal sItemStr, Len(sItemStr) + 1)
        If (sItemStr = "") Then
            Ret = RegDeleteValue(keyhandle, sRegItem)
        Else
            'Ret = OSRegSetValueEx(KeyHandle, sRegItem, 0&, REG_SZ, ByVal sItemStr, Len(sItemStr) + 1)
            Ret = OSRegSetValueEx(keyhandle, sRegItem, 0&, REG_SZ, ByVal sItemStr, LenB(sItemStr) + 1)
        End If
        
        If (Ret <> 0) Then
            iSet_reg_string = -3
        Else
            iSet_reg_string = 1
        End If
    End If
    RegCloseKey (keyhandle)
End Function

Private Function iGet_reg_string(iRegMode As Integer, sRegPATH As String, sRegItem As String, ByRef sRegItemStr As String) As Integer
'--------------------------
'|fffd||fffd||fffd||442||302||fffd||fffd||fffd||6bc||7bd||fffd||60f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@iRegMode:1|fffd|`4|fffd||310||fffd||fffd||fffd|
'   1:HKEY_CLASSES_ROOT
'   2:HKEY_CURRENT_USER
'   3:HKEY_LOCAL_MACHINE
'   4:HKEY_USERS
'|fffd|@sRegPath:|6bc||7bd||fffd||fffd| |fffd||7fd||fffd||fffd||fffd||fffd||fffd||fffd|
'  sRegItem:|6bc||7bd||fffd||fffd| |fffd||fffd||fffd||455||fffd||fffd||fffd||fffd||fffd|(|fffd||217||fffd||fffd||fffd|)
'|fffd||7c2||fffd|l|fffd|F
'  |fffd||fffd||fffd||fffd|I|fffd||fffd||fffd|F 1
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-1|fffd|i|6bc||7bd||fffd||603||fffd||fffd|[|fffd|h|fffd||fffd||fffd||642||202||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-2|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-3|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
'--------------------------
    Dim CurForm As Object
    Dim AppName As String
    Dim Entry As String
   
    Dim Index As Integer
    Dim Value As String
    'Dim KeyName As String
    Dim KeyValue As String
    #If VBA7 Then
    Dim keyhandle As LongPtr
    #Else
    Dim keyhandle As Long
    #End If
    Dim Ret As Long
    Dim KeyValueLength As Long
    Dim sKeyTemp As String
    Dim bRet As Boolean '
    ' |fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||c2bc2||fffd||302||24f|\|fffd||fffd||fffd||203|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||182||fffd||fffd||115||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||181|A|fffd||fffd||295||6cc||fffd||153d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '
    Value = Space(512)
    '
    ' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||211|O|fffd||303|T|fffd|C|fffd|Y|fffd||188||292|u|fffd||30f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    '
   
    KeyValue = Space(512)
    KeyValueLength = Len(KeyValue)
    
    '|fffd||fffd||fffd|[|fffd|h|fffd||242||fffd||fffd||fffd||115||3c2||fffd||fffd|
    Select Case iRegMode
        Case 1
            Ret = RegOpenKeyEx(HKEY_CLASSES_ROOT, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case 2
            Ret = RegOpenKeyEx(HKEY_CURRENT_USER, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case 3
            Ret = RegOpenKeyEx(HKEY_LOCAL_MACHINE, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case 4
            Ret = RegOpenKeyEx(HKEY_USERS, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case Else
            sRegItemStr = ""
            iGet_reg_string = -1
            Exit Function
    End Select
    
    If Ret <> 0 Then
        sRegItemStr = ""
        iGet_reg_string = -2
        Exit Function
    End If

    
    sKeyTemp = sRegItem '|fffd|n|fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||752||80b7||fffd||fffd|
    bRet = RegQueryStringValue(keyhandle, sKeyTemp, Value)
    
    If bRet = False Then
        Ret = RegCloseKey(keyhandle)
        sRegItemStr = ""
        iGet_reg_string = -3
        Exit Function
    End If

    Ret = RegCloseKey(keyhandle)
    'Value = Trim(Left(KeyValue, KeyValueLength))
    iGet_reg_string = 1
    sRegItemStr = Value
End Function


Private Function iSet_Ini_String(sIniFileName As String, sSectionName As String, sKeyName As String, sKeyStr As String) As Integer
'--------------------------
'INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||243|f|fffd|[|fffd|^|fffd||fffd||752||80b7||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@sIniFileName:|fffd||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||7fd||fffd|t|fffd||fffd||fffd|j
'|fffd|@sSectionName:|fffd|Z|fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'  sKeyName:    |fffd|L|fffd|[|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'  sKeyStr:     |fffd|L|fffd|[|fffd||fffd||fffd|e|fffd||315||fffd||fffd||fffd||fffd||fffd|
'|fffd||7c2||fffd|l|fffd|F
'  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||750||fffd||fffd||fffd||fffd||30f||a347||fffd|F1
'  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-1
'--------------------------
    Dim lRet As Long
        
    lRet = WritePrivateProfileString(ByVal sSectionName, ByVal sKeyName, ByVal sKeyStr, ByVal sIniFileName)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||743|f|fffd|[|fffd|^|fffd||30a|m|fffd|F
    If (lRet = 0) Then
        iSet_Ini_String = -1
        Exit Function
    End If
    iSet_Ini_String = 1
End Function



Private Function iGet_Ini_String(sIniFileName As String, sSectionName As String, sKeyName As String, ByRef sKeyStr As String) As Integer
'--------------------------
'INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||243|f|fffd|[|fffd|^|fffd||fffd||752||80b7||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@sIniFileName:|fffd||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||7fd||fffd|t|fffd||fffd||fffd|j
'|fffd|@sSectionName:|fffd|Z|fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'  sKeyName:    |fffd|L|fffd|[|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'|fffd|@sKeyStr:     |fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||30a|i|fffd|[|fffd||a3ca|
'|fffd||7c2||fffd|l|fffd|F
'|fffd|@sKeyStr:     |fffd||1cd||fffd||fffd||42f95||fffd||fffd||fffd||fffd||fffd|
'  |fffd||1cd||fffd||fffd||750||fffd||fffd||fffd||fffd||30f||a347||fffd|F1
'  |fffd||1cd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-1(|fffd|Y|fffd||fffd||fffd||fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'  |fffd||1cd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-2(|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||58c|W|fffd||303|G|fffd||fffd||fffd|[|fffd|j
'--------------------------
Dim iRet As Long
Dim sGetBuffer As String
Dim sTemp1 As String
    On Error GoTo ERR_OUT
    
    sGetBuffer$ = String(512, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    iRet = GetPrivateProfileString(ByVal sSectionName, ByVal sKeyName, ByVal "0000000000", sGetBuffer, CInt(512), ByVal sIniFileName)
    sTemp1 = Left$(sGetBuffer, InStr(sGetBuffer, Chr(0)) - 1)
    If (sTemp1 = "0000000000") Then
        sKeyStr = ""
        iGet_Ini_String = -1
    Else
        sKeyStr = sTemp1
        iGet_Ini_String = 1
    End If
    Exit Function
    
ERR_OUT:
    iGet_Ini_String = -1
    sKeyStr = ""

End Function

#If VBA7 Then
Private Function RegQueryStringValue(ByVal hkey As LongPtr, ByVal strValueName As String, strData As String) As Boolean
'--------------------------------------------------------------
' FUNCTION: RegQueryStringValue
'
' |fffd|o|fffd|^|fffd||fffd||fffd||fffd||fffd||141|A|fffd||fffd||fffd||fffd||316||fffd||fffd|O (strValueName = name)
' |fffd||702||fffd||fffd||356||fffd||fffd|O|fffd||302||202||fffd| (strValueName = "") |fffd|l|fffd||315||fffd||fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||85bc||fffd||312|l|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||90aa||fffd|A|fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||342||202||fffd||fffd||a347||fffd||341|A|fffd||fffd||fffd||30a||590||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd|B
'
' |fffd||7c2||fffd|l: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||fffd| True|fffd|A|fffd||fffd||fffd||fffd||20a|O|fffd||30f||a347||fffd||fffd| False |fffd||fffd||fffd||502||fffd||fffd||fffd||702||fffd||fffd|B
'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||341|A|fffd||fffd||fffd||fffd||fffd||fffd|^|fffd||fffd||fffd||7b0||fffd||fffd|l|fffd||fffd| strData |fffd||fffd||fffd||752||80b3||fffd||fffd||702||fffd||fffd|B
'--------------------------------------------------------------
    Dim lResult As Long
    Dim lValueType As Long
    Dim strBuf As String
    Dim lDataBufSize As Long
    
    RegQueryStringValue = False
    On Error GoTo 0
    ' |fffd||fffd||fffd||fffd|/|fffd||7b0||fffd||fffd||30e||fffd||782||fffd||fffd||64fe||fffd||fffd||fffd||702||fffd||fffd|B
    lResult = RegQueryValueEx(hkey, strValueName, 0&, lValueType, ByVal 0&, lDataBufSize)
    If lResult = ERROR_SUCCESS Then
        If lValueType = REG_SZ Then
            strBuf = String(lDataBufSize, " ")
            lResult = RegQueryValueEx(hkey, strValueName, 0&, 0&, ByVal strBuf, lDataBufSize)
            If lResult = ERROR_SUCCESS Then
                RegQueryStringValue = True
                strData = StripTerminator(strBuf)
            End If
        End If
    End If
End Function
#Else
Private Function RegQueryStringValue(ByVal hkey As Long, ByVal strValueName As String, strData As String) As Boolean
'--------------------------------------------------------------
' FUNCTION: RegQueryStringValue
'
' |fffd|o|fffd|^|fffd||fffd||fffd||fffd||fffd||141|A|fffd||fffd||fffd||fffd||316||fffd||fffd|O (strValueName = name)
' |fffd||702||fffd||fffd||356||fffd||fffd|O|fffd||302||202||fffd| (strValueName = "") |fffd|l|fffd||315||fffd||fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||85bc||fffd||312|l|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||90aa||fffd|A|fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||342||202||fffd||fffd||a347||fffd||341|A|fffd||fffd||fffd||30a||590||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd|B
'
' |fffd||7c2||fffd|l: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||fffd| True|fffd|A|fffd||fffd||fffd||fffd||20a|O|fffd||30f||a347||fffd||fffd| False |fffd||fffd||fffd||502||fffd||fffd||fffd||702||fffd||fffd|B
'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||341|A|fffd||fffd||fffd||fffd||fffd||fffd|^|fffd||fffd||fffd||7b0||fffd||fffd|l|fffd||fffd| strData |fffd||fffd||fffd||752||80b3||fffd||fffd||702||fffd||fffd|B
'--------------------------------------------------------------
    Dim lResult As Long
    Dim lValueType As Long
    Dim strBuf As String
    Dim lDataBufSize As Long
    
    RegQueryStringValue = False
    On Error GoTo 0
    ' |fffd||fffd||fffd||fffd|/|fffd||7b0||fffd||fffd||30e||fffd||782||fffd||fffd||64fe||fffd||fffd||fffd||702||fffd||fffd|B
    lResult = RegQueryValueEx(hkey, strValueName, 0&, lValueType, ByVal 0&, lDataBufSize)
    If lResult = ERROR_SUCCESS Then
        If lValueType = REG_SZ Then
            strBuf = String(lDataBufSize, " ")
            lResult = RegQueryValueEx(hkey, strValueName, 0&, 0&, ByVal strBuf, lDataBufSize)
            If lResult = ERROR_SUCCESS Then
                RegQueryStringValue = True
                strData = StripTerminator(strBuf)
            End If
        End If
    End If
End Function
#End If

Private Function StripTerminator(ByVal strString As String) As String
'-----------------------------------------------------------
' FUNCTION: StripTerminator
'
' |fffd||fffd||fffd||fffd||fffd||fffd||316||fffd||fffd||fffd||fffd||fffd||fffd||7576||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||101|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||502||fffd||fffd||702||fffd||fffd|B
' |fffd||fffd||fffd| Windows API |fffd||102||44f|o|fffd||fffd||fffd||155||502||fffd||fffd||a0bd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||38f||6c2||24e|g|fffd|p|fffd||fffd||fffd||702||fffd||fffd|B
'
' |fffd||fffd||fffd||348||fffd||fffd||fffd|: [strString] - |fffd|I|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||9576||fffd||fffd||fffd||fffd|
'
' |fffd||7c2||fffd|l: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||7576||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'-----------------------------------------------------------
    Dim intZeroPos As Integer

    intZeroPos = InStrT(strString, Chr$(0))
    If intZeroPos > 0 Then
        StripTerminator = Left$(strString, intZeroPos - 1)
    Else
        StripTerminator = strString
    End If
End Function

Private Function InStrT(arg1, arg2, Optional arg3, Optional arg4)
    If IsMissing(arg4) Then
        If IsMissing(arg3) Then
            InStrT = InStr(1, UCase(arg1), UCase(arg2), 0)
        Else
            InStrT = InStr(arg1, UCase(arg2), UCase(arg3), 0)
        End If
    Else
        If arg4 = 0 Then
            InStrT = InStr(arg1, arg2, arg3, 0)
        Else
            InStrT = InStr(arg1, UCase(arg2), UCase(arg3), 0)
        End If
    End If
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SokanZu1Mdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd|U|fffd|z|fffd|}1
'
'Sep 2003, PYJ
'=================================================
Option Explicit

Type TYTenGraph1
    startShtName As String

    tateDataRge As String
    yokoDataRge As String
    outRge As String
    namerge As String
    
    flgName As Integer      '1=Yes 2=No
    mjNum As Integer        '
    ftSize As Integer       '
    
    flgSkn As Integer       '1=Yes 2=No
    
    flgDir As Integer       '1=Col 2=Row
    flgNotData As Integer   '1=Skip 2=Stop
    flgTitle As Integer     '1=Title 2=Data
End Type

#If Win64 Then
    #If VBA7 Then
        Declare PtrSafe Function TenGrp1_ExtCall Lib "MTHR_B_ISTD_64.dll" (ByVal nid As Long, aTenGraph As TYTenGraph1, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
    #Else
        Declare Function TenGrp1_ExtCall Lib "MTHR_B_ISTD_64.dll" (ByVal nid As Long, aTenGraph As TYTenGraph1, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
    #End If
#Else
    #If VBA7 Then
        Declare PtrSafe Function TenGrp1_ExtCall Lib "MTHR_B_ISTD.dll" (ByVal nid As Long, aTenGraph As TYTenGraph1, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
    #Else
        Declare Function TenGrp1_ExtCall Lib "MTHR_B_ISTD.dll" (ByVal nid As Long, aTenGraph As TYTenGraph1, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
    #End If
#End If

Sub IS_MTHR_SokanZu1_VBA()
Attribute IS_MTHR_SokanZu1_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean
    Dim rtn
    Dim aDlgSht As DialogSheet
    Dim aTenGraph As TYTenGraph1
    Dim grp(1 To 1) As VBAGRAPH '2007.1.13 PYJ
    Dim nExcelVer As Integer
    Dim nid As Long
    
    Set aDlgSht = ThisWorkbook.DialogSheets("SokanZu1Dlg")
    
    Do
        bRtn = aDlgSht.Show
        If Not bRtn Then Exit Do    'Cancel
        
        bRtn = GetSknzu1DlgInp(aDlgSht, aTenGraph)
    Loop Until bRtn
    
    If bRtn Then
        aTenGraph.startShtName = ActiveSheet.name
'H15.11.3 LSQ cmt
'        aTenGraph.tateDataRge = FormulaA1_R1C1(aTenGraph.tateDataRge)
'        aTenGraph.yokoDataRge = FormulaA1_R1C1(aTenGraph.yokoDataRge)
'        aTenGraph.nameRge = FormulaA1_R1C1(aTenGraph.nameRge)
'        aTenGraph.outRge = FormulaA1_R1C1(aTenGraph.outRge)
        
        Call changeToSSDir
        '2005.1.13 PYJ
        Call InitGrpAry(grp)
        nExcelVer = 12 'getExcelVerNo()
        nid = IIf(isTrialVer, 0, 1)
        rtn = TenGrp1_ExtCall(nid, aTenGraph, nExcelVer, grp)
        
        If rtn = -100 Then
            MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
            Exit Sub
        End If
    
        If rtn = 0 And nExcelVer >= 12 And grp(1).Type <> 0 Then
            Call ConvToBSTR(grp(1))
            Application.Run GxlaBkGraph1 & "!TenGrp1", grp(1).sheetName, grp(1).grpOut, grp(1).grpData, grp(1).grpPara, _
                (aTenGraph.flgSkn = 1), (aTenGraph.flgName = 1), aTenGraph.mjNum, aTenGraph.ftSize
        End If
        'old:
        'rtn = TenGrp1_ExtCall(aTenGraph)
        Call Error_Display(rtn)
    End If
End Sub

'H15.11.3 LSQ mdf : ReferenceStyle:=xlR1C1 added
Private Function GetSknzu1DlgInp(ByVal aDlgSht As DialogSheet, aTenGraph As TYTenGraph1) As Boolean
    Dim strTmp As String
    Dim RgeTmp As Range, rgeTmp1 As Range
    Dim bRtn As Boolean
    
    GetSknzu1DlgInp = False
    
    '|fffd|^|fffd|e|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||34e|w|fffd||fffd|
    strTmp = aDlgSht.EditBoxes("editY").Text
    If GetInputRange(strTmp, RgeTmp) = False Then
        MsgBox "|fffd|^|fffd|e|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    aTenGraph.tateDataRge = "[" & RgeTmp.Worksheet.Parent.name & "]" & RgeTmp.Worksheet.name & "!" & RgeTmp.Address(ReferenceStyle:=xlR1C1)
    
    '|fffd||fffd||fffd|R|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||34e|w|fffd||fffd|
    strTmp = aDlgSht.EditBoxes("editX").Text
    If GetInputRange(strTmp, RgeTmp) = False Then
        MsgBox "|fffd||fffd||fffd|R|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    aTenGraph.yokoDataRge = "[" & RgeTmp.Worksheet.Parent.name & "]" & RgeTmp.Worksheet.name & "!" & RgeTmp.Address(ReferenceStyle:=xlR1C1)
    
    '|fffd||91||316||fffd||fffd||315|\|fffd||fffd|
    If aDlgSht.CheckBoxes("chk1") = xlOn Then
        aTenGraph.flgName = 1      'Yes
        bRtn = GetNameInfo(aDlgSht, aTenGraph)
        If Not bRtn Then Exit Function
    Else
        aTenGraph.flgName = 2   'No
    End If
    '|fffd|t|fffd|H|fffd||fffd||fffd|g
    aTenGraph.ftSize = val(aDlgSht.EditBoxes("editFontSize").Text)
    
    '|fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|
    If aDlgSht.OptionButtons("optSkn1") = xlOn Then aTenGraph.flgSkn = 2 Else aTenGraph.flgSkn = 1
    
    '|fffd|f|fffd|[|fffd|^|fffd|n|fffd||fffd||30c||fffd||fffd||fffd|
    'If aDlgSht.OptionButtons("optDiret1") = xlOn Then aTenGraph.flgDir = 1 Else aTenGraph.flgDir = 2
    aTenGraph.flgDir = 1
    
    '1|fffd|s|fffd||fffd||682||30d||fffd||fffd||68e||fffd||fffd|
    'If aDlgSht.OptionButtons("optData1") = xlOn Then aTenGraph.flgTitle = 1 Else aTenGraph.flgTitle = 2
    aTenGraph.flgTitle = 1
    
    '|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|
    If aDlgSht.OptionButtons("optSkip") = xlOn Then aTenGraph.flgNotData = 1 Else aTenGraph.flgNotData = 2
    
    '|fffd||fffd||fffd||28f|o|fffd||354||348||fffd|
    Set rgeTmp1 = GetOutputRgeBgn(aDlgSht, RgeTmp)
    If Not (rgeTmp1 Is Nothing) Then
        aTenGraph.outRge = "[" & rgeTmp1.Worksheet.Parent.name & "]" & rgeTmp1.Worksheet.name & "!" & rgeTmp1.Address(ReferenceStyle:=xlR1C1)
        GetSknzu1DlgInp = True
    End If
End Function

'|fffd||91||316||fffd||fffd||315|\|fffd||fffd|
Private Function GetNameInfo(ByVal aDlgSht As DialogSheet, aTenGraph As TYTenGraph1) As Boolean
    Dim strTmp As String
    Dim RgeTmp As Range
    Dim tmp1
    Dim nTmp1 As Integer
    
    GetNameInfo = False
    
    '|fffd||fffd||fffd||314||348||fffd|
    strTmp = aDlgSht.EditBoxes("editName").Text
    If GetInputRange(strTmp, RgeTmp) = False Then
        MsgBox "|fffd||91||316||fffd||fffd||316||fffd||fffd||314||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    aTenGraph.namerge = "[" & RgeTmp.Worksheet.Parent.name & "]" & RgeTmp.Worksheet.name & "!" & RgeTmp.Address(ReferenceStyle:=xlR1C1)
    
    '|fffd||fffd||fffd||fffd||fffd||fffd|
    tmp1 = aDlgSht.EditBoxes("editMjNum").Text: nTmp1 = val(tmp1)
    If Not IsNumeric(tmp1) Or nTmp1 < 1 Or nTmp1 > 50 Then
        MsgBox "|fffd||91||316||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    aTenGraph.mjNum = nTmp1

    GetNameInfo = True
End Function

'=== EOF ===

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "commCheck"
 '=======================================================
' iSTAT_MTHR Ver1.0 : Check Update User
'
' 2008.10 LSQ
'=======================================================
Option Explicit
Option Private Module

Public GVerMsg As String

Const csTKVer6_INI_Sect As String = "iSTAT"           '|fffd||fffd||fffd||fffd|INI-Section|fffd||fffd|
Const csTKVer6_INI_Key  As String = "VerMsg"          '|fffd||fffd||fffd||fffd|INI-Key|fffd||fffd|
Const MSG_NOT_UPDATED As String = "|fffd||211|O|fffd||303|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd||fffd||fffd|""|fffd|\|fffd|t|fffd|g""|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd| " & vbCrLf & _
                              "|fffd||211|O|fffd||fffd|""|fffd|\|fffd|t|fffd|g""|fffd||24f||33d1||fffd||fffd||fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Const MSG_NO_INIFILE As String = "|fffd||fffd||fffd||fffd||fffd||752||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd| " & vbCrLf & _
                                GName_Prog & "|fffd||fffd||fffd||103|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
         
#If VBA7 Then
Private Declare PtrSafe Function GetIniKey Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#Else
Private Declare Function GetIniKey Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#End If

'
'return TRUE OK else Illegal user
'
Function UpdateUserCheck() As Boolean
    Dim sInI_Path As String
    Dim iRet As Integer
    
    sInI_Path = getPathName()
    iRet = SubUserCheck(sInI_Path)
    
    If iRet > 0 Then    'OK
        UpdateUserCheck = True
    Else                'FAILED
        MsgBox MSG_NO_INIFILE      'old : MSG_NOT_UPDATED
        UpdateUserCheck = False
    End If
    
End Function
'
'return the length of the KEY VALUE
'
Private Function SubUserCheck(ByVal IniPath As String) As Long
    Dim tmpstr As String
    tmpstr = Space$(1024)
    SubUserCheck = GetIniKey(csTKVer6_INI_Sect, _
                      csTKVer6_INI_Key, _
                      "", tmpstr, 1024, _
                      IniPath & "\" & "MTHR01.ini")
    '
    GVerMsg = tmpstr
End Function

'=== EOF ===
Attribute VB_Name = "commChk"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||28a||590||fffd|
'
'03.8 LSQ
'=================================================
Option Explicit

'
'|fffd|u|fffd|b|fffd|N|fffd||311||fffd||fffd||742||fffd||fffd||1c2||fffd||fffd||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd||fffd|
'
Function isBookExist(ByVal bkName As String) As Boolean
Attribute isBookExist.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bk As Workbook
    
    isBookExist = False
    
    If Workbooks.Count = 0 Then Exit Function
    
    For Each bk In Workbooks
        If UCase(Trim(bkName)) = UCase(Trim(bk.name)) Then
            isBookExist = True
            Exit Function
        End If
    Next
    
End Function
'
Function isCellEmpty(ByVal theCell As Range) As Boolean
Attribute isCellEmpty.VB_ProcData.VB_Invoke_Func = " \n14"
    isCellEmpty = (theCell = Empty)
End Function
'
Function isCellNotEmpty(ByVal theCell As Range) As Boolean
Attribute isCellNotEmpty.VB_ProcData.VB_Invoke_Func = " \n14"
    isCellNotEmpty = (theCell <> Empty)
End Function

'=== EOF ===

Attribute VB_Name = "commConst"
'===================================================
' iSTAT_MTHR Ver1.0 : |fffd||8414|
'
' 2006.8 by LSQ
'===================================================
Option Explicit
'
'-- XLA File Name --
Public Const menuName_HLP As String = "|fffd|w|fffd||fffd||fffd|v(&H)"
Public Const menuName_XLHLP As String = "Help(&H)" 'For use in English Version of Excel; old : "|fffd||fffd||fffd||fffd|(&H)"

Public Const GName_Prog As String = "|fffd|}|fffd||fffd||fffd|`|fffd||fffd||fffd||3d7||289||fffd||fffd|"" "

Public Const GBKNAME_VBACM As String = "VBACOM.xla"   '"SSSVBACM.xla"  'Common Macros Valid for Excel >= 2000
Public Const GBKNAME_VBA07 As String = "VBACOM.xla"   '"SSSVBA07.xla"  'Common Macros Valid for Excel2007 but not Excel2000

Public Const GxlaBkGraph As String = "MTHR_Grp.xla"
Public Const GxlaBkGraph1 As String = "MTHR_GrpA.xla"
Public Const GxlaBkGraph2 As String = "MTHR_GrpB.xla"
Public Const RibbonMenu As String = "MTHR_Ribbon.xlam"        '2010.10 LSQ add
Public Const GxlaBkDllR As String = "MTHR_DLLR.xla"

'--- workSheet name ---
Public Const G_StName_Info As String = "Info"

Public Const MTHR_USB_VERSION As Boolean = True

Enum FUNC_NO
    FUNC_BASICINFO
    FUNC_EXSR1
    FUNC_EXSR2
    FUNC_SR1
    FUNC_SR2
    FUNC_MLRA
    FUNC_DA
    FUNC_DA2
End Enum
'=== EOF ===
Attribute VB_Name = "commGraph"
'2006.11.23 copied from Mac_TK1
Option Explicit

Private Function decNumKeta(ByVal diff As Double) As Integer
    diff = Abs(diff)
    
    If (diff >= 10) Then decNumKeta = 0: Exit Function
    If (diff >= 1) Then decNumKeta = 1: Exit Function
    If (diff >= 0.1) Then decNumKeta = 2: Exit Function
    If (diff >= 0.01) Then decNumKeta = 3: Exit Function
    If (diff >= 0.001) Then decNumKeta = 4: Exit Function
    decNumKeta = 5
    
End Function

Sub adjustMinMax(ByRef minv As Double, ByRef maxv As Double)
    Dim keta As Integer
    Dim tmpd As Double, min As Double, max As Double
    
    tmpd = (maxv - minv) / 20
    keta = decNumKeta(maxv - minv)
    max = maxv + tmpd
    min = minv - tmpd
    maxv = Application.Round(max, keta)
    minv = Application.Round(min, keta)
End Sub

'Axes Setting for value primary axes
'06.12.12 LSQ add
Sub AxesSetting_VPrimary(ByVal cht As Chart, _
    ByVal dMin As Double, ByVal dMax As Double, _
    ByVal bShow As Boolean, ByVal nDecNum As Integer)
    cht.Axes(xlValue, xlPrimary).MinimumScale = dMin
    cht.Axes(xlValue, xlPrimary).MaximumScale = dMax
    cht.Axes(xlValue, xlPrimary).CrossesAt = dMin
'    If bShow Then '|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd||752||fffd|; for future use
'        cht.Axes(xlValue, xlPrimary).TickLabels.NumberFormatLocal = FormatNumber(0, nDecNum)
'    End If
End Sub

Sub setChartPosSize(ByVal chartObj As ChartObject, ByVal outGrp As Range, _
    Optional ByVal rowNum As Integer = 0, Optional ByVal colNum As Integer = 0)
    Dim oldzoom As Integer
    If rowNum <= 0 Then rowNum = 17
    If colNum <= 0 Then colNum = 8
    On Error Resume Next
    chartObj.Parent.Activate
    oldzoom = ActiveWindow.Zoom
    ActiveWindow.Zoom = 100
    chartObj.Left = outGrp.Left   '+ 10
    chartObj.Top = outGrp.Top     '+ 10
    chartObj.Width = outGrp.Offset(0, colNum).Left - outGrp.Left
    chartObj.height = outGrp.Offset(rowNum, 0).Top - outGrp.Top
    ActiveWindow.Zoom = oldzoom
    On Error GoTo 0
End Sub
'=== EOF ===

Attribute VB_Name = "commMdl"
'=======================================================
' iSTAT_MTHR Ver1.0 : |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' 2K.4 by LSQ
'=======================================================
Option Explicit

Public GVerNoXL As Integer

Function IsVer95() As Boolean
    If val(Application.Version) < 8 Then    'Excel 95
        IsVer95 = True
    Else
        IsVer95 = False
    End If
End Function

Sub changeToSSDir()
    Dim pathName As String, driveName As String
        
    pathName = getPathName()
    driveName = Left(pathName, 1)
    If driveName <> "\" Then
        ChDrive driveName
    End If
    ChDir pathName
End Sub

Function getPathName() As String
    getPathName = ThisWorkbook.Path     'Workbooks(GbookNameXla).Path
End Function
'
'H12.8.28 mdf LSQ : on error added
'
Function toXlRCstr(inputFormula As String) As String
    On Error Resume Next
    
    toXlRCstr = Application.ConvertFormula( _
                Formula:=inputFormula, _
                fromReferenceStyle:=xlA1, _
                toReferenceStyle:=xlR1C1)
    
    If Err.Number <> 0 Then
        toXlRCstr = inputFormula
        Err.Clear
    End If
    
    On Error GoTo 0
End Function
'
'07.2.9 LSQ copied from SRK2P5
'
Function toXlA1str(inputFormula As String) As String
    On Error Resume Next
    
    toXlA1str = Application.ConvertFormula( _
                Formula:=inputFormula, _
                fromReferenceStyle:=xlR1C1, _
                toReferenceStyle:=xlA1)
    
    If Err.Number <> 0 Then
        toXlA1str = inputFormula
        Err.Clear
    End If
    
    On Error GoTo 0
End Function
'
'|fffd||fffd||fffd||fffd||fffd||42a42||fffd|u|fffd|b|fffd|N|fffd|A|fffd|V|fffd|[|fffd|g|fffd||183|Z|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd||15a97||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd|:
'   rgeStr = "'[toukeidt.xls]temp'!$A$1:$B$2" or "'temp'!$A$1:$B$2"
'
'|fffd|o|fffd||fffd|:
'   bkName = |fffd|u|fffd|b|fffd|N|fffd||fffd|; |fffd||fffd|, "toukeidt.xls" or ActiveWorkbook.Name (|fffd|K|fffd||fffd||fffd||fffd||fffd||fffd|)
'   stName = |fffd|V|fffd|[|fffd|g|fffd||fffd|; |fffd||fffd|, "temp"
'   ceName = |fffd|Z|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd| (A1|fffd||30c|`|fffd||fffd|); |fffd||fffd|, "$A$1:$B$2"
'
'|fffd||fffd||fffd||30a||590||fffd||fffd||34a|e|fffd||fffd||fffd||3d7||282||182||fffd||fffd||fffd||fffd||fffd|
'H12.3.16 LSQ
'H19.1.29 LSQ mdf
'
Function getRangeInfo(ByVal rgeStr As String, bkName As String, stName As String, ceName As String) As Boolean
    Dim wkstr As String, posBk As Long, posSt As Long, pos As Long
    Dim RgeObj As Range
    
    On Error Resume Next
    
    Set RgeObj = Range(rgeStr)
    ceName = RgeObj.Address
    stName = RgeObj.Worksheet.name
    bkName = RgeObj.Worksheet.Parent.name
        
    getRangeInfo = IIf(Err.Number <> 0, False, True)
    
    On Error GoTo 0
    
'--- the following are not used ---
'07.1.29 LSQ
#If False Then
    '|fffd||7af||fffd||fffd||fffd||fffd||30e||64fe|
    wkstr = rgeStr
    
    bkName = ActiveWorkbook.name    'default
    pos = InStr(wkstr, "]")
    
#If True Then  '07.1.29; 05.12.17
    If pos > 2 Then 'point to other book
        bkName = Mid(wkstr, 2, pos - 2)
    End If
#Else
    If pos > 2 Then 'point to other book
        MsgBox "|fffd||283|u|fffd|b|fffd|N|fffd||314||348||342||34e|w|fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
        getRangeInfo = False
        Exit Function
    End If
#End If

    '|fffd|-|116||fffd||fffd||30e||64fe|
    wkstr = Mid(wkstr, pos + 1)
    
    stName = ActiveSheet.name   'default
    pos = InStr(wkstr, "!")
    If pos > 1 Then stName = Mid(wkstr, 1, pos - 1)
    
    '|fffd||654||348||342||30e||64fe|
    ceName = Trim(Mid(wkstr, pos + 1))
    
    If ceName = Empty Or ceName = "" Then
        MsgBox MSG_ERR_DATARAGE
        getRangeInfo = False
        Exit Function
    End If
    
    If Application.ReferenceStyle = xlR1C1 Then     '|fffd|Q|fffd||18c|`|fffd||fffd||fffd||314||fffd||fffd||fffd| and R1C1|fffd||fffd|A1
        ceName = Application.ConvertFormula(Formula:=ceName, _
            fromReferenceStyle:=xlR1C1, _
            toReferenceStyle:=xlA1)
    End If
    
    getRangeInfo = True
#End If

End Function
'
'|fffd|u|fffd|b|fffd|N|fffd||311||fffd||fffd||742||fffd||fffd||1c2||fffd||fffd||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd||fffd|
'
Function isBookExist(ByVal bkName As String) As Boolean
    Dim bksObj As Workbooks, bk As Workbook
    Set bksObj = Workbooks
    If bksObj.Count = 0 Then isBookExist = False: Exit Function

    For Each bk In bksObj
        If UCase(Trim(bkName)) = UCase(Trim(bk.name)) Then
            isBookExist = True
            Exit Function
        End If
    Next
    isBookExist = False
End Function

Function WorkBookOpen(ByVal fName As String, Optional ByVal bReadOnly As Boolean = True) As Workbook
    Dim bkObj As Workbook
    On Error Resume Next
    'Check
    If isBookExist(fName) Then
        Set WorkBookOpen = Workbooks(fName)
        Exit Function
    End If
    
    Set bkObj = Nothing
    
    Application.ScreenUpdating = False
    
    Call changeToSSDir
    
    Workbooks.Open filename:=fName, updatelinks:=1, ReadOnly:=bReadOnly
    
    Application.ScreenUpdating = True
    
    Set bkObj = Workbooks(fName)
    If bkObj Is Nothing Then
        MsgBox MSG_CANTOPEN_FILE(fName)
        Exit Function
    End If
    
    Set WorkBookOpen = bkObj
    On Error GoTo 0
End Function

Sub WorkBookClose(ByVal fName As String)
    Application.DisplayAlerts = False
    
    Workbooks(fName).Close saveChanges:=False
    
    Application.DisplayAlerts = True
End Sub

Function MSG_CANTOPEN_FILE(ByVal fName As String) As String
    MSG_CANTOPEN_FILE = fName & "|fffd|I|fffd|[|fffd|v|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
End Function

'Change the font of selection to match font of the workbook
'(06.11.23 copied from Sss32grp.xla @ TKVer6)
Function MatchWorkbookFont()
    On Error Resume Next
    
    Selection.Font.name = ActiveWorkbook.Styles("Normal").Font.name
    Selection.Font.Size = ActiveWorkbook.Styles("Normal").Font.Size
    Selection.AutoScaleFont = True  '2005.12.22
    
    On Error GoTo 0 '05.12.17 LSQ
End Function

Function WorkBookOpen_SetOpenNum(ByVal xlaFName As String) As Workbook
    Dim bkObj As Workbook
    
    Set bkObj = WorkBookOpen(xlaFName)
    If Not (bkObj Is Nothing) Then
        Application.Run (xlaFName & "!CallNum_AddOne")
    End If
    
    Set WorkBookOpen_SetOpenNum = bkObj
End Function

Sub WorkBookClose_OnOpenNum(ByVal xlaFName As String)
    Dim cnt As Integer
    cnt = Application.Run(xlaFName & "!CallNum_DecOne")
    If cnt <= 0 Then
        Call WorkBookClose(xlaFName)
    End If
End Sub

Function getExcelVerNo() As Integer
    getExcelVerNo = CInt(Application.Run(GBKNAME_VBACM & "!getExcelVerNo"))
End Function

Function forcIIf(ByVal bCond As Boolean, ByVal valForTrue, ByVal valForFalse)
    If bCond Then
        forcIIf = valForTrue
    Else
        forcIIf = valForFalse
    End If
End Function

Function CharNoAutoFont()
    ActiveChart.ChartArea.AutoScaleFont = False
End Function

'common chart Font |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & Ticks
Sub SetCommChart(ByVal strGrpName As String, ByVal num As Integer)
    ActiveSheet.ChartObjects(strGrpName).Activate
    If Not IsVer95() Then    'Excel 97 -
        Call CharNoAutoFont
    End If
    ActiveChart.PlotArea.Interior.colorIndex = xlNone
    ActiveChart.Axes(xlCategory).Select
    With Selection
        .CrossesAt = 1
        If IsVer95() Then .TickLabelSpacing = Int(num / 6 + 0.999)
        '.TickMarkSpacing = .TickLabelSpacing
        .AxisBetweenCategories = False
        .ReversePlotOrder = False
    End With
End Sub

'
'nWidth: chart width, if nWidth=0 used the width of rgeChart
'nRowNum: row number the chart will occupied, if nRowNum=0 the row number of rgeChart will be used
'nXDist: the distance between chart and rgeChart left edge
'return row number used
'
'H15.10.1 LSQ mdf
Function COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(ByVal rgeChart As Range, ByVal rgeCate As Range, ByVal rgeData As Range, _
        ByVal strTitle As String, ByVal strXTitle As String, Optional ByVal strGrpName, _
        Optional ByVal nWidth, Optional ByVal nRowNum, _
        Optional ByVal nXDist, Optional ByVal strPara, Optional ByRef cht As Chart) As Integer
    Dim dXPos As Double, dYPos As Double, dHeight As Double
    Dim dMinVal As Double, dMaxVal As Double
    Dim num As Integer
    Dim tmpRge As Range
    Dim bHasLegend As Boolean
    Dim dict As Object
    Dim nColNum As Long
    
    If UCase(TypeName(strGrpName)) = "ERROR" Then strGrpName = ""
    If UCase(TypeName(nWidth)) = "ERROR" Then nWidth = 400
    If UCase(TypeName(nRowNum)) = "ERROR" Then nRowNum = 15
    If UCase(TypeName(nXDist)) = "ERROR" Then nXDist = 10
    If UCase(TypeName(strPara)) = "ERROR" Then strPara = "HasLegend=1&ColNum=0"
    Set dict = Comm_SetDict(strPara)
    bHasLegend = IIf(dict("HasLegend") = 1, True, False)
    nColNum = dict("ColNum")
    Set dict = Nothing
    rgeChart.Worksheet.Activate
    dXPos = rgeChart.Left + nXDist
    dYPos = rgeChart.Top
    If nWidth = 0 Then nWidth = rgeChart.Width
    If nRowNum = 0 Then nRowNum = rgeChart.Rows.Count
    dHeight = rgeChart.Range("A1:A" & nRowNum).height
    
    '|fffd|O|fffd||fffd||fffd|t|fffd||1c9||fffd|
    ActiveSheet.ChartObjects.Add(dXPos, dYPos, nWidth, dHeight).Select
       
    ActiveChart.ChartWizard Source:=Union(rgeCate, rgeData), Gallery _
        :=xlLine, Format:=2, PlotBy:=xlColumns, CategoryLabels:=1, _
        SeriesLabels:=1, HasLegend:=IIf(bHasLegend, 1, 0), Title:=strTitle, _
        CategoryTitle:=strXTitle, ValueTitle:="", ExtraTitle:=""
    For num = 1 To rgeData.Areas.Count
        Set tmpRge = rgeData.Areas(num)
        ActiveChart.SeriesCollection(num).name = "='" & rgeData.Worksheet.name & "'!" & Comm_toXlRCstr(tmpRge(1, 1).Address)
        Set tmpRge = tmpRge(2, 1).Resize(tmpRge.Rows.Count - 1, 1)
        ActiveChart.SeriesCollection(num).Values = "='" & rgeData.Worksheet.name & "'!" & Comm_toXlRCstr(tmpRge.Address)
        ActiveChart.SeriesCollection(num).XValues = "='" & rgeCate.Worksheet.name & "'!" & Comm_toXlRCstr(rgeCate.Range("A2").Resize(rgeCate.Rows.Count - 1, 1).Address)
    Next num
    
    If nColNum <> 0 Then Call Comm_setChartPosSize(ActiveChart.Parent, rgeChart, nRowNum, nColNum)
    
    '|fffd|O|fffd||fffd||fffd|t|fffd||fffd||fffd||fffd|t|fffd||fffd|
    num = ActiveSheet.ChartObjects.Count
    If Trim(strGrpName) <> "" Then
        ActiveSheet.ChartObjects(num).name = strGrpName
    Else
        strGrpName = ActiveSheet.ChartObjects(num).name
    End If
    
    '|fffd|I|fffd|[|fffd|v|fffd|V|fffd||fffd||fffd||fffd||fffd||752||fffd|
    num = rgeCate.Rows.Count - 1
    Call SetCommChart(strGrpName, num)     'Oct 2003, PYJ  old:
    
    '|fffd|w|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Selection.TickLabels.Orientation = xlHorizontal
    ActiveChart.Axes(xlCategory).Select
    With Selection
        .MajorTickMark = xlInside
        .MinorTickMark = xlInside
        .TickLabelPosition = xlNextToAxis
    End With
    
    '|fffd||fffd||fffd||fffd|max & min|fffd||752||fffd|
    dMaxVal = Application.max(rgeData)
    dMinVal = Application.min(rgeData)
    Call adjustMinMax(dMinVal, dMaxVal)
    ActiveChart.Axes(xlValue).Select
    With ActiveChart.Axes(xlValue)
        .MinimumScale = dMinVal
        .MaximumScale = dMaxVal
        '.MinimumScaleIsAuto = True
        '.MaximumScaleIsAuto = True
        .MinorUnitIsAuto = True
        .MajorUnitIsAuto = True
        .Crosses = xlAutomatic
        .ReversePlotOrder = False
        .ScaleType = False
    End With
    
    '|fffd||690||fffd||fffd||fffd||fffd||fffd||310||752||fffd|
    With ActiveChart.Axes(xlCategory)
        .HasMajorGridlines = False
        .HasMinorGridlines = False
    End With
    With ActiveChart.Axes(xlValue)
        .HasMajorGridlines = True
        .HasMinorGridlines = False
    End With
    ActiveChart.Axes(xlValue).MajorGridlines.Select
    With Selection.Border
        .colorIndex = 1
        .Weight = xlHairline
        .LineStyle = xlDot
    End With
    
    '|fffd||fffd||516||682||310||fffd||fffd||fffd||fffd||fffd||fffd||fffd||381|A|fffd||502||242||fffd||fffd||fffd|
    num = ActiveChart.SeriesCollection.Count
    If num >= 2 Then
        ActiveChart.SeriesCollection(2).Select
        With Selection.Border
            .colorIndex = 3
            .Weight = xlThin
            .LineStyle = xlContinuous
        End With
    End If
    ActiveChart.Axes(xlCategory).TickMarkSpacing = ActiveChart.Axes(xlCategory).TickLabelSpacing
    
    Set cht = ActiveChart
    
    '|fffd|J|fffd|[|fffd|\|fffd||fffd||fffd||308||292|u
    rgeChart.Worksheet.Activate
    rgeChart.Range("A1").Select
    COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t = nRowNum
End Function


'
'
'transfer formula string from A1 format to R1C1 format or vise verse
'return the formula string
'
'bOutA1: True--Get A1 format; False--Get R1C1 format
'Sep 2003, PYJ
Function FormulaA1_R1C1(ByVal strFormulaIn As String, Optional ByVal bOutA1) As String
    Dim nStyleFrom As Integer, nStyleTo As Integer
    Dim bErr As Boolean
    
    If UCase(TypeName(bOutA1)) = "ERROR" Then bOutA1 = False
    
    If bOutA1 Then
        nStyleFrom = xlR1C1
        nStyleTo = xlA1
    Else
        nStyleFrom = xlA1
        nStyleTo = xlR1C1
    End If
    '
    On Error Resume Next
    
    FormulaA1_R1C1 = Application.ConvertFormula( _
                Formula:=strFormulaIn, _
                fromReferenceStyle:=nStyleFrom, _
                toReferenceStyle:=nStyleTo)
    
    If Err <> 0 Then    'Oct 2003, PYJ  old:bErr
        'for all version; Err.Number <> 0 & Err.Clear can not be used in Excel 95
        'Err can be cleared afterstatement "On Error GoTo 0"
        FormulaA1_R1C1 = strFormulaIn
    End If
    
    On Error GoTo 0
    
End Function

'get the range from a dialog box input range string
'strRge: "[toukeidt.xls]temp!$A$1:$B$2" or "temp!$A$1:$B$2"
Function GetInputRange(ByVal strRge As String, ByRef rgeRtn As Range) As Boolean
    Dim str1 As String, pos As Integer
    Dim wbk As Workbook, sht As Worksheet
    
    'get the workbook
    pos = InStr(strRge, "]")
    If pos > 2 Then
        str1 = Mid(strRge, 2, pos - 2)
        Set wbk = Workbooks(str1)
    Else
        Set wbk = ActiveWorkbook
    End If
    
    'get the worksheet
    strRge = Mid(strRge, pos + 1)
    pos = InStr(strRge, "!")
    If pos > 1 Then
        str1 = Mid(strRge, 1, pos - 1)
        Set sht = wbk.Worksheets(str1)
    Else
        Set sht = wbk.ActiveSheet
    End If
    
    'get the range
    str1 = Trim(Mid(strRge, pos + 1))
    If str1 = Empty Or str1 = "" Then
        GetInputRange = False
        Exit Function
    End If
    
    Set rgeRtn = sht.Range(FormulaA1_R1C1(str1, True))     'Sep 2003, PYJ
    
    GetInputRange = True
End Function

'|fffd||fffd||fffd||28f|o|fffd||354||348||fffd|
'return Nothing on error
Function GetOutputRgeBgn(ByVal aDlgSht As DialogSheet, ByVal rgeDataIn As Range) As Range
    Dim strTmp As String, RgeTmp As Range
    Dim shtTmp As Worksheet
    
    Set GetOutputRgeBgn = Nothing
    If aDlgSht.OptionButtons("optOut2") = xlOn Then
        strTmp = aDlgSht.EditBoxes("editOutput").Text
        If GetInputRange(strTmp, RgeTmp) = False Then
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd|o|fffd||354||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
            Exit Function
        End If
        Set GetOutputRgeBgn = RgeTmp
    Else
        Set shtTmp = rgeDataIn.Worksheet.Parent.Worksheets.Add
        Set RgeTmp = shtTmp.Range("B2")
        Set GetOutputRgeBgn = RgeTmp
        rgeDataIn.Worksheet.Activate
    End If
End Function
'=== EOF ====
Attribute VB_Name = "commSelMdl"
'===================================================
' Sony Stat : |fffd||3d0||fffd||fffd||fffd|Visual|fffd|w|fffd||fffd|
'
' 2K.4 -- 2K.7.18 by LSQ
'===================================================
Option Explicit

Public Const MSG_SETUNUM_LESS2 As String = "|fffd|w|fffd||80b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30c||90||fffd||fffd||fffd|1|fffd||209||fffd||fffd||142||fffd||fffd|B"
Public GxNoArray() As Integer   '|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||50d||fffd||fffd||315||6d1||fffd||fffd|z|fffd||fffd| (Temp|fffd|g|fffd|p)
Public GActShtObj As Worksheet
Public GbgnCel As Range
Public GedtRge As Object
Public GoptData As Object
Public GoptLabel As Object
Public GdlgObj As Object

Private SNameDlg As String  'dsnSelDlg or varSelDlg
Private SNameSht As String  'dsnSelSht or thrSelSht
'
Dim SsumNum As Integer, SselNum As Integer  '|fffd|I|fffd||fffd||fffd||142||fffd||fffd||9414||fffd|A|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||fffd|
Dim SdlgObj As Object, Slboxa As Object, Slboxb As Object

'========================================================
'
'DialogSheet|fffd||fffd| |fffd||fffd| Template Sheet|fffd||fffd||fffd||30e|w|fffd||fffd|
'
'flg : |fffd||fffd||fffd|@|fffd|t|fffd||fffd||fffd|O; 1=for DSN, 2=for THR, 3=for SRK (THR|fffd|U)
'
'H12.7.18 SRK added by LSQ
'
Function InitVarSel() As Boolean
    InitVarSel = True
    SNameDlg = "dlgVarSel": SNameSht = "SelSht"
End Function

'
'|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd| :
'   1) SNameDlg, SNameSht |fffd||312|l|fffd||fffd||752||80b7||fffd||fffd|B
'   2) SNameSht |fffd|V|fffd|[|fffd|g|fffd||fffd|A2, A3:Bm; C2, C3:Cn|fffd||fffd||fffd|w|fffd||80b5||fffd||101|A|fffd||fffd||fffd||fffd||3f8||6c2||fffd||fffd||102||44f|o|fffd||fffd||fffd|B
'
Function Comm_VarSel()
    Dim stObj As Worksheet
        
    'Object|fffd|w|fffd||fffd|
    Set SdlgObj = getDlgObj_CommSel()
    Set Slboxa = getItemObj(1)
    Set Slboxb = getItemObj(2)
    Set stObj = getShtObj_CommSel()
        
    SsumNum = getListNum_CommSel(1)     '|fffd|w|fffd||fffd||142||fffd||fffd||9414|(|fffd||3d7||fffd|)
    SselNum = getListNum_CommSel(2)     '|fffd|w|fffd||80b5||fffd||fffd||fffd||fffd|(|fffd||3d7||fffd|)
    
    If SsumNum < 1 Then SsumNum = 0
    If SselNum < 1 Then SselNum = 0
    
    '|fffd|`|fffd|F|fffd|b|fffd|N
    If SsumNum = 0 And SselNum = 0 Then
        Slboxa.ListFillRange = ""
        Slboxb.ListFillRange = ""
        
        Comm_VarSel = False
        Exit Function
    End If
    
    getItemObj(3).OnAction = "doBtnSel"
    getItemObj(4).OnAction = "doBtnDeSel"
    
    Slboxa.ListFillRange = listLinkStr(1, SsumNum)
    Slboxb.ListFillRange = listLinkStr(2, SselNum)
    If Slboxa.ListCount > 0 Then Slboxa.Value = 0
    If Slboxb.ListCount > 0 Then Slboxb.Value = 0
    
    'H12.8.10 LSQ add
    'SdlgObj.Labels("lblA").Text = GlblA
    'SdlgObj.Labels("lblB").Text = GlblB
    
    Comm_VarSel = SdlgObj.Show  'rtn
    
End Function
'
Function getShtObj_CommSel() As Worksheet
    Set getShtObj_CommSel = ThisWorkbook.Worksheets(SNameSht)
End Function
'
'flg : 1=listA, 2=listB;
'num : |fffd||fffd||fffd|X|fffd|g|fffd||331||fffd||fffd||44c||90||fffd||fffd|G
'
Private Function listLinkStr(flg As Integer, num As Integer) As String
    Dim listStr As String
    
    listStr = ""
    
    If num > 0 Then
        If flg = 1 Then listStr = SNameSht & "!A3:A" & (num + 2)
        If flg = 2 Then listStr = SNameSht & "!C3:C" & (num + 2)
    End If
    
    listLinkStr = listStr

End Function
'
Function getDlgObj_CommSel() As Object
    Set getDlgObj_CommSel = ThisWorkbook.DialogSheets(SNameDlg)
End Function
'
Private Function getItemObj(flg As Integer) As Object
    Set getItemObj = Nothing
    '
    Select Case flg
        Case 1: Set getItemObj = getDlgObj_CommSel().ListBoxes("lstA")
        Case 2: Set getItemObj = getDlgObj_CommSel().ListBoxes("lstB")
        Case 3: Set getItemObj = getDlgObj_CommSel().Buttons("btnSel")
        Case 4: Set getItemObj = getDlgObj_CommSel().Buttons("btnDeSel")
    End Select
End Function
'
'flg : 1 or 2 (see getCellObj())
'
Sub setListNum_CommSel(flg As Integer, num As Integer)
    getCellObj(flg) = num
End Sub
'
'flg : 1 or 2 (see getCellObj())
'
Function getListNum_CommSel(flg As Integer) As Integer
    getListNum_CommSel = val(getCellObj(flg).Text)
End Function
'
'flg : 1 or 2;
'
Function getCellObj(flg As Integer) As Range
    Set getCellObj = Nothing
    '
    Select Case flg
        Case 1: Set getCellObj = getShtObj_CommSel().Range("A2")    'Number
        Case 2: Set getCellObj = getShtObj_CommSel().Range("C2")    'Number
    End Select
End Function
'
Sub doBtnSel()
    Dim i As Integer, ct As Integer
    Dim listStr As String
    Dim newNum As Integer, newNumSel As Integer
    Dim stObj As Worksheet, cellObjA As Range, cellObjb As Range
    
    Set SdlgObj = getDlgObj_CommSel()
    Set Slboxa = getItemObj(1)
    Set Slboxb = getItemObj(2)
    Set stObj = getShtObj_CommSel()
    Set cellObjA = getCellObj(1)
    Set cellObjb = getCellObj(2)
    
    SsumNum = Slboxa.ListCount
    SselNum = Slboxb.ListCount
    
    If SsumNum = 0 Then Exit Sub
    
    ct = 0
    For i = 1 To SsumNum
        If Slboxa.Selected(i) = True Then
            ct = ct + 1
                        
            stObj.Activate
            cellObjA.Offset(i, 0).Range("A1:B1").Select
            Selection.Cut
            cellObjb.Offset(SselNum + ct, 0).Select
            ActiveSheet.Paste
        End If
    Next i
    If ct = 0 Then Exit Sub
    
    newNum = SsumNum - ct
    newNumSel = SselNum + ct
    
    '|fffd||fffd||fffd||fffd||fffd||fffd|
    stObj.Activate
    cellObjA.Offset(1, 0).Range("A1:B" & SsumNum).Select
    Selection.SortSpecial SortMethod:=xlSyllabary, Key1:=cellObjA.Offset(1, 1), _
        Order1:=xlAscending, Header:=xlGuess, OrderCustom:=1, _
        MatchCase:=False, Orientation:=xlTopToBottom
    
    cellObjb.Offset(1, 0).Range("A1:B" & newNumSel).Select
    Selection.SortSpecial SortMethod:=xlSyllabary, Key1:=cellObjb.Offset(1, 1), _
        Order1:=xlAscending, Header:=xlGuess, OrderCustom:=1, _
        MatchCase:=False, Orientation:=xlTopToBottom
        
    '|fffd||90||fffd||fffd||fffd||fffd||fffd|
    SsumNum = newNum
    SselNum = newNumSel
    
    Call setListNum_CommSel(1, SsumNum)
    Call setListNum_CommSel(2, SselNum)
    
    Slboxa.ListFillRange = listLinkStr(1, SsumNum)
    Slboxb.ListFillRange = listLinkStr(2, SselNum)
    
    'Display Selected Item Number; H17.5.25 LSQ add
    Call dispSelItemNum(newNumSel)
    
End Sub

Sub doBtnDeSel()
    Dim i As Integer, ct As Integer
    Dim listStr As String
    Dim newNum As Integer, newNumSel As Integer
    Dim stObj As Worksheet, cellObjA As Range, cellObjb As Range
    
    Set SdlgObj = getDlgObj_CommSel()
    Set Slboxa = getItemObj(1)
    Set Slboxb = getItemObj(2)
    Set stObj = getShtObj_CommSel()
    Set cellObjA = getCellObj(1)
    Set cellObjb = getCellObj(2)
    
    SsumNum = Slboxa.ListCount
    SselNum = Slboxb.ListCount
    
    If SselNum = 0 Then Exit Sub
    
    ct = 0
    For i = 1 To SselNum
        If Slboxb.Selected(i) = True Then
            ct = ct + 1
                        
            stObj.Activate
            cellObjb.Offset(i, 0).Range("A1:B1").Select
            Selection.Cut
            cellObjA.Offset(SsumNum + ct, 0).Select
            ActiveSheet.Paste
        End If
    Next i
    If ct = 0 Then Exit Sub
    
    newNum = SsumNum + ct
    newNumSel = SselNum - ct
    
    '|fffd||fffd||fffd||fffd||fffd||fffd|
    stObj.Activate
    cellObjb.Offset(1, 0).Range("A1:B" & SselNum).Select
    Selection.SortSpecial SortMethod:=xlSyllabary, Key1:=cellObjb.Offset(1, 1), _
        Order1:=xlAscending, Header:=xlGuess, OrderCustom:=1, _
        MatchCase:=False, Orientation:=xlTopToBottom
    
    cellObjA.Offset(1, 0).Range("A1:B" & newNum).Select
    Selection.SortSpecial SortMethod:=xlSyllabary, Key1:=cellObjA.Offset(1, 1), _
        Order1:=xlAscending, Header:=xlGuess, OrderCustom:=1, _
        MatchCase:=False, Orientation:=xlTopToBottom
        
    '|fffd||90||fffd||fffd||fffd||fffd||fffd|
    SsumNum = newNum
    SselNum = newNumSel
    
    Call setListNum_CommSel(1, SsumNum)
    Call setListNum_CommSel(2, SselNum)
    
    Slboxa.ListFillRange = listLinkStr(1, SsumNum)
    Slboxb.ListFillRange = listLinkStr(2, SselNum)

    'Display Selected Item Number; H17.5.25 LSQ add
    Call dispSelItemNum(newNumSel)
    
End Sub
'
'Display Selected Item Number in the DialogBox
'
'H17.5.25 LSQ add
Private Sub dispSelItemNum(ByVal selNum As Integer)

    Select Case UCase(SdlgObj.name)
        Case UCase("dsnSelDlg"):
        SdlgObj.Labels("lblB").Text = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||fffd||fffd||74d||fffd|p (" & selNum & ")"
    End Select
    
End Sub

'=== EOF ===


Attribute VB_Name = "commText"
'=======================================================
' iSTAT_MTHR Ver1.0 : |fffd||fffd||fffd||283|e|fffd|L|fffd|X|fffd|g
'
' H13.5.16 by LSQ
'=======================================================
Option Explicit

Public Const MSG_ERR_RSUINIa As String = "ISTAT.INI|327||fffd||642||fffd||fffd|j|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd|." & GName_Prog & "|fffd||fffd||fffd||103|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const MSG_ERR_RSUINIb As String = "ISTAT.INI|327||fffd||642||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|." & GName_Prog & "|fffd||fffd||fffd||103|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const MSG_EXCEED_DATE As String = GName_Prog & "|fffd||302||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||502||fffd||fffd||7c2||fffd||fffd||702||fffd||fffd||fffd|."

Public Const MSG_ERR_DATARAGE As String = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
Public Const MSG_ERR_DATE As String = "|fffd||752||fffd||fffd||fffd|t|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|"
Public Const ERR_COMM_ITEM_SMP As String = "|fffd||348||34e|w|fffd||80aa||fffd|A|fffd|u|fffd|I|fffd||fffd||fffd||fffd||fffd||5c2||fffd||fffd||fffd||30c||90||fffd||fffd||12d09||7c2||fffd||fffd||102||fffd||fffd||fffd|v|fffd||202||1c1|A|fffd|K|fffd||602||142||342||202||fffd||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B\n|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd|Q|fffd||182||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
Public Const ERR_COMMB_NUMBER As String = "|fffd|u|fffd|f|fffd|[|fffd|^|fffd||30c||90||fffd||fffd|v|fffd|u|fffd|I|fffd||fffd||fffd||fffd||fffd||5c2||fffd||fffd||fffd||30c||90||fffd||fffd|v|fffd|un|fffd||312|l|fffd|v|fffd||202||1c2||256||fffd||fffd||302||fffd||fffd||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B\n|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd|Q|fffd||182||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
Public Const ERR_COMMC_GENERAL As String = "|fffd|G|fffd||fffd||fffd|[|fffd||142||fffd||fffd|B"

Public Const MSG_GRP_DATA_ERR As String = "Graph data error"
'=== EOF ===
Attribute VB_Name = "dispMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: Error Display
'
'1997.7.17 by SJY
'2002.7.10 LSQ mdf
'=================================================
Option Explicit

'
'1=screen display true
'2=screen display false
'0=not specified
'
'H14.7.9 LSQ
Sub Msgbox_ScrnOption(ByVal msgStr As String, Optional ByVal flgScrn)
    Dim savScrn As Boolean
    
    If UCase(TypeName(flgScrn)) = "ERROR" Then flgScrn = 1
    savScrn = Application.ScreenUpdating
    
    If flgScrn = 1 Then Application.ScreenUpdating = True
    If flgScrn = 2 Then Application.ScreenUpdating = False
    
    MsgBox msgStr
    
    Application.ScreenUpdating = savScrn
    
End Sub

Sub Error_Display(no)
Attribute Error_Display.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim b_code As Integer
    Dim msgStr As String
    
    If no = 0 Then Exit Sub
    
    b_code = no - (CInt(no / 100)) * 100
    Select Case b_code
        Case 1
            msgStr = "[ERROR:" & no & "]" & "|fffd|G|fffd||fffd||fffd|[|fffd||142||fffd||fffd|I"
        Case 2
            msgStr = "[ERROR:" & no & "]" & "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 3
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 4
            msgStr = "[ERROR:" & no & "]" & "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 5
            msgStr = "[ERROR:" & no & "]" & "|fffd|o|fffd||354||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 6
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|[|fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 7
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd||142||fffd||fffd||9340||fffd||690||fffd||fffd||341|A|fffd|R|fffd|O|fffd||fffd||fffd||688||213||fffd||fffd||142||fffd||fffd|I"
        Case 8
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||80b7||fffd||9340||fffd||690||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|I"
        Case 9
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 10
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|I"
        Case 11
            msgStr = "[ERROR:" & no & "]" & "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 12
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd|r|fffd|l|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 13
            msgStr = "[ERROR:" & no & "]" & "|fffd||590||fffd||fffd||fffd||fffd||310||fffd||fffd||341|A|fffd|U|fffd||209||fffd||fffd||142||fffd||fffd|I"
        Case 14
            msgStr = "[ERROR:" & no & "]" & "|fffd||590||fffd||fffd||fffd||fffd||34e|w|fffd||80b3||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 15
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd|l|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 16
            msgStr = "[ERROR:" & no & "]" & "|fffd|T|fffd|C|fffd|N|fffd||fffd||fffd||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 17
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 18
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||310||fffd||fffd||341|A|fffd|Q|fffd|O|fffd||209||fffd||fffd||142||fffd||fffd|I"
        Case 19
            msgStr = "[ERROR:" & no & "]" & "|fffd|v|fffd|Z|fffd|p|fffd|s|fffd||42a8d||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 20
            msgStr = "[ERROR:" & no & "]" & "|fffd||3d0||fffd||fffd||fffd||fffd||742||151||fffd||fffd||582||30d||fffd||fffd||fffd||fffd||fffd||fffd||682||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||30e||fffd|@|fffd||142||349||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 21
            msgStr = "[ERROR:" & no & "]" & "F-in |fffd||fffd| F-out|fffd||fffd||83ec||fffd||fffd||fffd||fffd||fffd|I"
        Case 22
            msgStr = "[ERROR:" & no & "]" & "F-in |fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 23
            msgStr = "[ERROR:" & no & "]" & "F-out |fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 24
            msgStr = "[ERROR:" & no & "]" & "F-in |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 25
            msgStr = "[ERROR:" & no & "]" & "F-out |fffd||fffd||50ab||fffd||fffd||fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 26
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||835e||fffd||795||3d0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 27
            msgStr = "[ERROR:" & no & "]" & "|fffd|[|fffd||fffd||fffd||702||fffd||fffd||355||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd|@|fffd||fffd||fffd|f|fffd||fffd||fffd||fffd||fffd|g|fffd|p|fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 28
            msgStr = "[ERROR:" & no & "]" & "|fffd|v|fffd|Z|fffd||fffd||fffd||243|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|I"
        Case 29
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||80b5||fffd||fffd||fffd||fffd||fffd||308||a554||fffd||24c|v|fffd|Z|fffd||fffd||fffd||243|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|I"
        Case 30
            msgStr = "[ERROR:" & no & "]" & "|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||30e|w|fffd||fffd||fffd||fffd|i|fffd|O|fffd|`|fffd|Q|fffd|O|fffd|O|fffd|j|fffd||213||fffd||fffd||250||752||80b5||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 31
            msgStr = "[ERROR:" & no & "]" & "|fffd|J|fffd|n|fffd|N|fffd||fffd||fffd||313||fffd||fffd||342||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
    End Select
    '
    Msgbox_ScrnOption msgStr
    '
End Sub
'
Function MSG_CANTOPEN_FILE(ByVal fName As String) As String
Attribute MSG_CANTOPEN_FILE.VB_ProcData.VB_Invoke_Func = " \n14"
    MSG_CANTOPEN_FILE = fName & "|fffd|I|fffd|[|fffd|v|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
End Function
'
'---------------------------------------
'Message|fffd||315|\|fffd||fffd||fffd|G
'---------------------------------------
Sub DispMsg(ByVal msg As String, Optional ByVal bEcho)
Attribute DispMsg.VB_ProcData.VB_Invoke_Func = " \n14"
    If UCase(TypeName(bEcho)) = "ERROR" Then bEcho = True
    
    Application.ScreenUpdating = bEcho
    MsgBox msg, , GName_Prog
    
End Sub
'
'|fffd|V|fffd|[|fffd|g|fffd||318|g|fffd||fffd||fffd||315|`|fffd||fffd|
'
Sub setSheetWakusen(ByVal bOnOff As Boolean)
Attribute setSheetWakusen.VB_ProcData.VB_Invoke_Func = " \n14"
    ActiveWindow.DisplayGridlines = bOnOff
End Sub

'=== EOF ===

Attribute VB_Name = "frmAboutMe"
Attribute VB_Base = "0{314213F1-0AD6-428A-AA1A-1FBFE63E46F7}{97125758-DDC1-4E17-BF5B-B85D2FF917A4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




'=== BOF ===

Private Sub cmdOK_Click()
    frmAboutMe.Hide
End Sub

Private Sub Label11_Click()

End Sub

Private Sub Label14_Click()
    Dim Link As String
    Link = Label14.Caption
    On Error GoTo NoCanDo
    ActiveWorkbook.FollowHyperlink Address:=Link, NewWindow:=True
    Unload Me
    Exit Sub
NoCanDo:
    MsgBox "Cannot open " & Link
End Sub

'=== EOF===
Private Sub Label9_Click()

End Sub
Attribute VB_Name = "frmBasicInfo"
Attribute VB_Base = "0{0F84747D-CB76-4033-983C-515B22C46D59}{12158CA3-2162-4554-ABC5-3DF5AA07306F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

'Object variable to trigger application events
Private WithEvents XLApp As Excel.Application
Attribute XLApp.VB_VarHelpID = -1
#If VBA7 Then
    Dim mXLHwnd As LongPtr    'Excel's window handle
    Dim mhwndForm As LongPtr  'The userform's window handle
    Private Declare PtrSafe Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
#Else
    Dim mXLHwnd As Long    'Excel's window handle
    Dim mhwndForm As Long  'The userform's window handle
    Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
#End If

Const GWL_HWNDPARENT As Long = -8

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub chkCateName_Click()
    RgeCateName.Enabled = chkCateName.Value
    If RgeCateName.Enabled Then
        RgeCateName.SetFocus
    End If
End Sub

Private Sub chkNum2Cate_Click()
    RgeNumCate.Enabled = chkNum2Cate.Value
    If RgeNumCate.Enabled Then
        RgeNumCate.SetFocus
    End If
End Sub

#If 0 Then  '11.12.2 LSQ cmt
Private Sub chkTimeLag_Click()
    RgeTimeLag.Enabled = chkTimeLag.Value
    If RgeTimeLag.Enabled Then
        RgeTimeLag.SetFocus
    End If
End Sub
#End If

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub RefEdit1_BeforeDragOver(Cancel As Boolean, ByVal data As MSForms.DataObject, ByVal x As stdole.OLE_XPOS_CONTAINER, ByVal y As stdole.OLE_YPOS_CONTAINER, ByVal DragState As MSForms.fmDragState, Effect As MSForms.fmDropEffect, ByVal Shift As Integer)

End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(2, frmBasicInfo.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get VarSelect() As String
    VarSelect = m_varselect
End Property

Public Property Let VarSelect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub

Private Sub UserForm_Initialize()
    If val(Application.Version) >= 15 Then        'Only makes sense on Excel 2013 and up
        Set XLApp = Application
        mhwndForm = FindWindowA("ThunderDFrame", Caption)
    End If
End Sub

Private Sub XLApp_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If val(Application.Version) >= 15 And mhwndForm <> 0 Then  'Basear o form na janela ativa do Excel.
        mXLHwnd = Application.hwnd    'Always get because in Excel 15 SDI each wb has its window with different handle.
        SetWindowLongA mhwndForm, GWL_HWNDPARENT, mXLHwnd
        SetForegroundWindow mhwndForm
    End If
End Sub

Private Sub XLApp_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)
    SetWindowLongA mhwndForm, GWL_HWNDPARENT, 0&
End Sub

Attribute VB_Name = "frmDA"
Attribute VB_Base = "0{F5463C4B-F9D5-4C8F-AAB1-B45085255C34}{9E5885B8-EF66-45AD-BE5E-762D4C487BED}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

'Object variable to trigger application events
Private WithEvents XLApp As Excel.Application
Attribute XLApp.VB_VarHelpID = -1
#If VBA7 Then
    Dim mXLHwnd As LongPtr    'Excel's window handle
    Dim mhwndForm As LongPtr  'The userform's window handle
    Private Declare PtrSafe Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
#Else
    Dim mXLHwnd As Long    'Excel's window handle
    Dim mhwndForm As Long  'The userform's window handle
    Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
#End If

Const GWL_HWNDPARENT As Long = -8

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    If bRangeChanged_Frm(FUNC_NO.FUNC_DA, Me.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub SmpNameOnOff()
    RgeSmpName.Enabled = optSmpName.Value
    If RgeSmpName.Enabled Then
        RgeSmpName.SetFocus
    End If
End Sub

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub optSmpName_Click()
    SmpNameOnOff
End Sub

Private Sub optSmpNo_Click()
    SmpNameOnOff
End Sub

Private Sub RefEdit1_BeforeDragOver(Cancel As Boolean, ByVal data As MSForms.DataObject, ByVal x As stdole.OLE_XPOS_CONTAINER, ByVal y As stdole.OLE_YPOS_CONTAINER, ByVal DragState As MSForms.fmDragState, Effect As MSForms.fmDropEffect, ByVal Shift As Integer)

End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(FUNC_NO.FUNC_DA, Me.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get VarSelect() As String
    VarSelect = m_varselect
End Property

Public Property Let VarSelect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub

Private Sub UserForm_Initialize()
    If val(Application.Version) >= 15 Then        'Only makes sense on Excel 2013 and up
        Set XLApp = Application
        mhwndForm = FindWindowA("ThunderDFrame", Caption)
    End If
End Sub

Private Sub XLApp_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If val(Application.Version) >= 15 And mhwndForm <> 0 Then  'Basear o form na janela ativa do Excel.
        mXLHwnd = Application.hwnd    'Always get because in Excel 15 SDI each wb has its window with different handle.
        SetWindowLongA mhwndForm, GWL_HWNDPARENT, mXLHwnd
        SetForegroundWindow mhwndForm
    End If
End Sub

Private Sub XLApp_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)
    SetWindowLongA mhwndForm, GWL_HWNDPARENT, 0&
End Sub

Attribute VB_Name = "frmDA2"
Attribute VB_Base = "0{7EB5F07C-8AA6-4E68-8EDD-8F32132B1CFD}{023E7650-4096-44FE-B8E0-44C41A29B393}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

'Object variable to trigger application events
Private WithEvents XLApp As Excel.Application
Attribute XLApp.VB_VarHelpID = -1
#If VBA7 Then
    Dim mXLHwnd As LongPtr    'Excel's window handle
    Dim mhwndForm As LongPtr  'The userform's window handle
    Private Declare PtrSafe Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
#Else
    Dim mXLHwnd As Long    'Excel's window handle
    Dim mhwndForm As Long  'The userform's window handle
    Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
#End If

Const GWL_HWNDPARENT As Long = -8

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub SmpNameOnOff()
    RgeSmpName.Enabled = optSmpName.Value
    If RgeSmpName.Enabled Then
        RgeSmpName.SetFocus
    End If
End Sub

Private Sub chkOutGrp_Click()
    XAxes.Enabled = chkOutGrp.Value
    YAxes.Enabled = chkOutGrp.Value
End Sub

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub optSmpName_Click()
    SmpNameOnOff
End Sub

Private Sub optSmpNo_Click()
    SmpNameOnOff
End Sub

Private Sub RefEdit1_BeforeDragOver(Cancel As Boolean, ByVal data As MSForms.DataObject, ByVal x As stdole.OLE_XPOS_CONTAINER, ByVal y As stdole.OLE_YPOS_CONTAINER, ByVal DragState As MSForms.fmDragState, Effect As MSForms.fmDropEffect, ByVal Shift As Integer)

End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(4, frmExtSr2.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get VarSelect() As String
    VarSelect = m_varselect
End Property

Public Property Let VarSelect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub

Private Sub UserForm_Initialize()
    If val(Application.Version) >= 15 Then        'Only makes sense on Excel 2013 and up
        Set XLApp = Application
        mhwndForm = FindWindowA("ThunderDFrame", Caption)
    End If
End Sub

Private Sub XLApp_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If val(Application.Version) >= 15 And mhwndForm <> 0 Then  'Basear o form na janela ativa do Excel.
        mXLHwnd = Application.hwnd    'Always get because in Excel 15 SDI each wb has its window with different handle.
        SetWindowLongA mhwndForm, GWL_HWNDPARENT, mXLHwnd
        SetForegroundWindow mhwndForm
    End If
End Sub

Private Sub XLApp_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)
    SetWindowLongA mhwndForm, GWL_HWNDPARENT, 0&
End Sub


Attribute VB_Name = "frmExtSr1"
Attribute VB_Base = "0{495C21B7-E367-4A4C-96F4-4412F0E38687}{00FF651B-EEA1-4E3B-A761-A1217F21CB34}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

'Object variable to trigger application events
Private WithEvents XLApp As Excel.Application
Attribute XLApp.VB_VarHelpID = -1
#If VBA7 Then
    Dim mXLHwnd As LongPtr    'Excel's window handle
    Dim mhwndForm As LongPtr  'The userform's window handle
    Private Declare PtrSafe Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
#Else
    Dim mXLHwnd As Long    'Excel's window handle
    Dim mhwndForm As Long  'The userform's window handle
    Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
#End If

Const GWL_HWNDPARENT As Long = -8

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub chkCateName_Click()
    RgeCateName.Enabled = chkCateName.Value
    If RgeCateName.Enabled Then
        RgeCateName.SetFocus
    End If
End Sub

Private Sub chkNum2Cate_Click()
    RgeNumCate.Enabled = chkNum2Cate.Value
    If RgeNumCate.Enabled Then
        RgeNumCate.SetFocus
    End If
End Sub

Private Sub chkTimeLag_Click()
    RgeTimeLag.Enabled = chkTimeLag.Value
    If RgeTimeLag.Enabled Then
        RgeTimeLag.SetFocus
    End If
End Sub

Private Sub chkYsk_Click()
    RgeYskData.Enabled = chkYsk.Value
    If RgeYskData.Enabled Then
        RgeYskData.SetFocus
    End If
End Sub

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub optSmpName_Click()
    RgeSmpName.Enabled = True
    If RgeSmpName.Enabled Then
        RgeSmpName.SetFocus
    End If
End Sub

Private Sub optSmpNo_Click()
    RgeSmpName.Enabled = False
    If RgeSmpName.Enabled Then
        RgeSmpName.SetFocus
    End If
End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(5, frmExtSr1.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get VarSelect() As String
    VarSelect = m_varselect
End Property

Public Property Let VarSelect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub TextBox1_Change()

End Sub

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub

Private Sub UserForm_Initialize()
    If val(Application.Version) >= 15 Then        'Only makes sense on Excel 2013 and up
        Set XLApp = Application
        mhwndForm = FindWindowA("ThunderDFrame", Caption)
    End If
End Sub

Private Sub XLApp_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If val(Application.Version) >= 15 And mhwndForm <> 0 Then  'Basear o form na janela ativa do Excel.
        mXLHwnd = Application.hwnd    'Always get because in Excel 15 SDI each wb has its window with different handle.
        SetWindowLongA mhwndForm, GWL_HWNDPARENT, mXLHwnd
        SetForegroundWindow mhwndForm
    End If
End Sub

Private Sub XLApp_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)
    SetWindowLongA mhwndForm, GWL_HWNDPARENT, 0&
End Sub


Attribute VB_Name = "frmExtSr2"
Attribute VB_Base = "0{907BDCAE-AA17-441B-AB8C-5B0B62F1B9BF}{3AE6A89D-C5B2-4681-A5E8-EBF5C2A16B2B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

'Object variable to trigger application events
Private WithEvents XLApp As Excel.Application
Attribute XLApp.VB_VarHelpID = -1
#If VBA7 Then
    Dim mXLHwnd As LongPtr    'Excel's window handle
    Dim mhwndForm As LongPtr  'The userform's window handle
    Private Declare PtrSafe Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
#Else
    Dim mXLHwnd As Long    'Excel's window handle
    Dim mhwndForm As Long  'The userform's window handle
    Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
#End If

Const GWL_HWNDPARENT As Long = -8

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub SmpNameOnOff()
    RgeSmpName.Enabled = optSmpName.Value
    If RgeSmpName.Enabled Then
        RgeSmpName.SetFocus
    End If
End Sub

Private Sub chkCateName_Click()
    RgeCateName.Enabled = chkCateName.Value
    If RgeCateName.Enabled Then
        RgeCateName.SetFocus
    End If
End Sub

Private Sub chkNum2Cate_Click()
    RgeNumCate.Enabled = chkNum2Cate.Value
    If RgeNumCate.Enabled Then
        RgeNumCate.SetFocus
    End If
End Sub

Private Sub chkOutGrp_Click()
    XAxes.Enabled = chkOutGrp.Value
    YAxes.Enabled = chkOutGrp.Value
End Sub

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub optSmpName_Click()
    SmpNameOnOff
End Sub

Private Sub optSmpNo_Click()
    SmpNameOnOff
End Sub

Private Sub RefEdit1_BeforeDragOver(Cancel As Boolean, ByVal data As MSForms.DataObject, ByVal x As stdole.OLE_XPOS_CONTAINER, ByVal y As stdole.OLE_YPOS_CONTAINER, ByVal DragState As MSForms.fmDragState, Effect As MSForms.fmDropEffect, ByVal Shift As Integer)

End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(4, frmExtSr2.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get VarSelect() As String
    VarSelect = m_varselect
End Property

Public Property Let VarSelect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub

Private Sub UserForm_Initialize()
    If val(Application.Version) >= 15 Then        'Only makes sense on Excel 2013 and up
        Set XLApp = Application
        mhwndForm = FindWindowA("ThunderDFrame", Caption)
    End If
End Sub

Private Sub XLApp_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If val(Application.Version) >= 15 And mhwndForm <> 0 Then  'Basear o form na janela ativa do Excel.
        mXLHwnd = Application.hwnd    'Always get because in Excel 15 SDI each wb has its window with different handle.
        SetWindowLongA mhwndForm, GWL_HWNDPARENT, mXLHwnd
        SetForegroundWindow mhwndForm
    End If
End Sub

Private Sub XLApp_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)
    SetWindowLongA mhwndForm, GWL_HWNDPARENT, 0&
End Sub


Attribute VB_Name = "frmMLRA"
Attribute VB_Base = "0{73FF5179-68CC-40C8-8313-F689AF755A7C}{7967E7A3-E7EE-4C41-BF11-0A28AEC306E7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

'Object variable to trigger application events
Private WithEvents XLApp As Excel.Application
Attribute XLApp.VB_VarHelpID = -1
#If VBA7 Then
    Dim mXLHwnd As LongPtr    'Excel's window handle
    Dim mhwndForm As LongPtr  'The userform's window handle
    Private Declare PtrSafe Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
#Else
    Dim mXLHwnd As Long    'Excel's window handle
    Dim mhwndForm As Long  'The userform's window handle
    Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
#End If

Const GWL_HWNDPARENT As Long = -8

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub chkTimeLag_Click()
    RgeTimeLag.Enabled = chkTimeLag.Value
    If RgeTimeLag.Enabled Then
        RgeTimeLag.SetFocus
    End If
End Sub

Private Sub chkYsk_Click()
    RgeYskData.Enabled = chkYsk.Value
    If RgeYskData.Enabled Then
        RgeYskData.SetFocus
    End If
End Sub

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub optSmpName_Click()
    RgeSmpName.Enabled = True
    If RgeSmpName.Enabled Then
        RgeSmpName.SetFocus
    End If
End Sub

Private Sub optSmpNo_Click()
    RgeSmpName.Enabled = False
    If RgeSmpName.Enabled Then
        RgeSmpName.SetFocus
    End If
End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(5, frmExtSr1.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get VarSelect() As String
    VarSelect = m_varselect
End Property

Public Property Let VarSelect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub TextBox1_Change()

End Sub

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub

Private Sub UserForm_Initialize()
    If val(Application.Version) >= 15 Then        'Only makes sense on Excel 2013 and up
        Set XLApp = Application
        mhwndForm = FindWindowA("ThunderDFrame", Caption)
    End If
End Sub

Private Sub XLApp_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If val(Application.Version) >= 15 And mhwndForm <> 0 Then  'Basear o form na janela ativa do Excel.
        mXLHwnd = Application.hwnd    'Always get because in Excel 15 SDI each wb has its window with different handle.
        SetWindowLongA mhwndForm, GWL_HWNDPARENT, mXLHwnd
        SetForegroundWindow mhwndForm
    End If
End Sub

Private Sub XLApp_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)
    SetWindowLongA mhwndForm, GWL_HWNDPARENT, 0&
End Sub


Attribute VB_Name = "frmSr1"
Attribute VB_Base = "0{128A149C-27CB-4BBB-9F8B-83B34C67CF40}{EE851B1C-6C52-43EB-B954-AE656E24C0FA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

'Object variable to trigger application events
Private WithEvents XLApp As Excel.Application
Attribute XLApp.VB_VarHelpID = -1
#If VBA7 Then
    Dim mXLHwnd As LongPtr    'Excel's window handle
    Dim mhwndForm As LongPtr  'The userform's window handle
    Private Declare PtrSafe Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
#Else
    Dim mXLHwnd As Long    'Excel's window handle
    Dim mhwndForm As Long  'The userform's window handle
    Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
#End If

Const GWL_HWNDPARENT As Long = -8

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub chkCateName_Click()
    RgeCateName.Enabled = chkCateName.Value
    If RgeCateName.Enabled Then
        RgeCateName.SetFocus
    End If
End Sub

'Private Sub chkNum2Cate_Click()
'    RgeNumCate.Enabled = chkNum2Cate.Value
'    If RgeNumCate.Enabled Then
'        RgeNumCate.SetFocus
'    End If
'End Sub

'Private Sub chkTimeLag_Click()
'    RgeTimeLag.Enabled = chkTimeLag.Value
'    If RgeTimeLag.Enabled Then
'        RgeTimeLag.SetFocus
'    End If
'End Sub

Private Sub chkYsk_Click()
    RgeYskData.Enabled = chkYsk.Value
    If RgeYskData.Enabled Then
        RgeYskData.SetFocus
    End If
End Sub

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub optSmpName_Click()
    RgeSmpName.Enabled = True
    If RgeSmpName.Enabled Then
        RgeSmpName.SetFocus
    End If
End Sub

Private Sub optSmpNo_Click()
    RgeSmpName.Enabled = False
    If RgeSmpName.Enabled Then
        RgeSmpName.SetFocus
    End If
End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(5, frmExtSr1.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get VarSelect() As String
    VarSelect = m_varselect
End Property

Public Property Let VarSelect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub TextBox1_Change()

End Sub

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub

Private Sub UserForm_Initialize()
    If val(Application.Version) >= 15 Then        'Only makes sense on Excel 2013 and up
        Set XLApp = Application
        mhwndForm = FindWindowA("ThunderDFrame", Caption)
    End If
End Sub

Private Sub XLApp_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If val(Application.Version) >= 15 And mhwndForm <> 0 Then  'Basear o form na janela ativa do Excel.
        mXLHwnd = Application.hwnd    'Always get because in Excel 15 SDI each wb has its window with different handle.
        SetWindowLongA mhwndForm, GWL_HWNDPARENT, mXLHwnd
        SetForegroundWindow mhwndForm
    End If
End Sub

Private Sub XLApp_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)
    SetWindowLongA mhwndForm, GWL_HWNDPARENT, 0&
End Sub


Attribute VB_Name = "frmSr2"
Attribute VB_Base = "0{48B2323E-4FEA-4D3E-8102-C869659A6E5E}{B24D29A6-FE50-4235-9C5D-29CA54736CEA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

'Object variable to trigger application events
Private WithEvents XLApp As Excel.Application
Attribute XLApp.VB_VarHelpID = -1
#If VBA7 Then
    Dim mXLHwnd As LongPtr    'Excel's window handle
    Dim mhwndForm As LongPtr  'The userform's window handle
    Private Declare PtrSafe Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
#Else
    Dim mXLHwnd As Long    'Excel's window handle
    Dim mhwndForm As Long  'The userform's window handle
    Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
#End If

Const GWL_HWNDPARENT As Long = -8

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub SmpNameOnOff()
    RgeSmpName.Enabled = optSmpName.Value
    If RgeSmpName.Enabled Then
        RgeSmpName.SetFocus
    End If
End Sub

Private Sub chkCateName_Click()
    RgeCateName.Enabled = chkCateName.Value
    If RgeCateName.Enabled Then
        RgeCateName.SetFocus
    End If
End Sub

'Private Sub chkNum2Cate_Click()
'    RgeNumCate.Enabled = chkNum2Cate.Value
'    If RgeNumCate.Enabled Then
'        RgeNumCate.SetFocus
'    End If
'End Sub

Private Sub chkOutGrp_Click()
    XAxes.Enabled = chkOutGrp.Value
    YAxes.Enabled = chkOutGrp.Value
End Sub

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub optSmpName_Click()
    SmpNameOnOff
End Sub

Private Sub optSmpNo_Click()
    SmpNameOnOff
End Sub

Private Sub RefEdit1_BeforeDragOver(Cancel As Boolean, ByVal data As MSForms.DataObject, ByVal x As stdole.OLE_XPOS_CONTAINER, ByVal y As stdole.OLE_YPOS_CONTAINER, ByVal DragState As MSForms.fmDragState, Effect As MSForms.fmDropEffect, ByVal Shift As Integer)

End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(4, frmExtSr2.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get VarSelect() As String
    VarSelect = m_varselect
End Property

Public Property Let VarSelect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub

Private Sub UserForm_Initialize()
    If val(Application.Version) >= 15 Then        'Only makes sense on Excel 2013 and up
        Set XLApp = Application
        mhwndForm = FindWindowA("ThunderDFrame", Caption)
    End If
End Sub

Private Sub XLApp_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If val(Application.Version) >= 15 And mhwndForm <> 0 Then  'Basear o form na janela ativa do Excel.
        mXLHwnd = Application.hwnd    'Always get because in Excel 15 SDI each wb has its window with different handle.
        SetWindowLongA mhwndForm, GWL_HWNDPARENT, mXLHwnd
        SetForegroundWindow mhwndForm
    End If
End Sub

Private Sub XLApp_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)
    SetWindowLongA mhwndForm, GWL_HWNDPARENT, 0&
End Sub


Attribute VB_Name = "frmVarSel"
Attribute VB_Base = "0{6C35D01F-9156-498A-B1C3-13EFE1C8F3CE}{6620A195-4635-4B2D-88E2-4B776CB3E1D7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'=======================================================
' Variable Selection
'
' 2008.06 WZH
'=======================================================
Option Explicit

Private m_Variables As String
Private m_Dict
Private m_DictUnsel
Private m_bIsOK As Boolean
Private m_VarList() As Long

'Object variable to trigger application events
Private WithEvents XLApp As Excel.Application
Attribute XLApp.VB_VarHelpID = -1
#If VBA7 Then
    Dim mXLHwnd As LongPtr    'Excel's window handle
    Dim mhwndForm As LongPtr  'The userform's window handle
    Private Declare PtrSafe Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
#Else
    Dim mXLHwnd As Long    'Excel's window handle
    Dim mhwndForm As Long  'The userform's window handle
    Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
#End If

Const GWL_HWNDPARENT As Long = -8

Private Function GetListInx(ByVal strText As String, lb As MSForms.ListBox) As Long
    Dim i As Long, loc As Long
    Dim tmpInx As Long, nInx As Long
    If lb.ListCount = 0 Then
        GetListInx = 0
        Exit Function
    End If
    nInx = CInt(m_Dict(strText))
    loc = lb.ListCount
    For i = 0 To lb.ListCount - 1
        tmpInx = CInt(m_Dict(lb.List(i)))
        If nInx < tmpInx Then
            loc = i
            Exit For
        End If
    Next i
    GetListInx = loc
End Function

Public Property Get bIsOk() As Boolean
    bIsOk = m_bIsOK
End Property

Public Property Get VarSelected() As String
    Dim i As Long, j As Long
    j = 0
    For i = 0 To lbSelected.ListCount - 1
        'm_VarList(m_Dict(lbSelected.List(i))) = i
        m_VarList(j) = m_Dict(lbSelected.List(i))
        j = j + 1
    Next i
    For i = 0 To lbUnselected.ListCount - 1
        'm_VarList(m_Dict(lbUnselected.List(i))) = lbSelected.ListCount + i
        m_VarList(j) = m_Dict(lbUnselected.List(i))
        j = j + 1
    Next i
    VarSelected = lbSelected.ListCount
    For i = LBound(m_VarList) To UBound(m_VarList)
        VarSelected = VarSelected & "," & m_VarList(i)
    Next i
End Property

Public Property Let Variables(ByVal vNewValue As String)
    Dim i As Long
    Dim varList As Variant
    m_bIsOK = False
    m_Variables = vNewValue
    varList = Split(m_Variables, ",")
    lbSelected.Clear
    lbUnselected.Clear
    Set m_Dict = Nothing
    Set m_Dict = New Collection
    ReDim m_VarList(LBound(varList) To UBound(varList))
    For i = LBound(varList) To UBound(varList)
        'lbSelected.AddItem varList(i)
        'm_Dict.Add varList(i), i
        m_Dict.Add i, varList(i)
        m_VarList(i) = i
    Next i
End Property

Public Sub InitVarSelected(ByVal strVarSelected As String)
    Dim var As Variant
    Dim n As Long, sn As Long, un As Long, i As Long
    Dim vs As Variant
    var = Split(m_Variables, ",")
    lbSelected.Clear
    lbUnselected.Clear
    If strVarSelected = "0" Then
        For i = LBound(var) To UBound(var)
            lbSelected.AddItem var(i)
        Next i
    Else
        vs = Split(strVarSelected, ",")
        n = UBound(vs)
        sn = val(vs(0))
        un = n - sn
        For i = 1 To sn
            lbSelected.AddItem var(vs(i))
        Next i
        For i = 1 To un
            lbUnselected.AddItem var(vs(i + sn))
        Next i
    End If
End Sub

Private Sub btnAdd_Click()
    Dim i As Long
    If lbUnselected.ListCount = 0 Then Exit Sub
    For i = lbUnselected.ListCount - 1 To 0 Step -1
        If lbUnselected.Selected(i) Then
            lbSelected.AddItem lbUnselected.List(i), GetListInx(lbUnselected.List(i), lbSelected)
            lbUnselected.RemoveItem i
        End If
    Next i
End Sub

Private Sub btnCancel_Click()
    m_bIsOK = False
    Me.Hide
End Sub

Private Sub btnOK_Click()
    m_bIsOK = True
    Me.Hide
End Sub

Private Sub UserForm_Terminate()
    Set m_Dict = Nothing
    Set m_DictUnsel = Nothing
    m_bIsOK = False
End Sub

Private Sub btnRemove_Click()
    Dim i As Long
    Dim strText As String
    If lbSelected.ListCount = 0 Then Exit Sub
    For i = lbSelected.ListCount - 1 To 0 Step -1
        If lbSelected.Selected(i) Then
            strText = lbSelected.List(i)
            lbUnselected.AddItem strText, GetListInx(strText, lbUnselected)
            lbSelected.RemoveItem i
        End If
    Next i
End Sub

Private Sub UserForm_Initialize()
    Set m_Dict = New Collection 'CreateObject("Scripting.Dictionary")
    Set m_DictUnsel = New Collection 'CreateObject("Scripting.Dictionary")
    m_bIsOK = False
    
    '11.7.5 LSQ (static text NG in MAC)
    btnAdd.Caption = "|fffd||fffd|"
    btnRemove.Caption = "|fffd||fffd|"
    If val(Application.Version) >= 15 Then        'Only makes sense on Excel 2013 and up
        Set XLApp = Application
        mhwndForm = FindWindowA("ThunderDFrame", Caption)
    End If
End Sub

Private Sub XLApp_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If val(Application.Version) >= 15 And mhwndForm <> 0 Then  'Basear o form na janela ativa do Excel.
        mXLHwnd = Application.hwnd    'Always get because in Excel 15 SDI each wb has its window with different handle.
        SetWindowLongA mhwndForm, GWL_HWNDPARENT, mXLHwnd
        SetForegroundWindow mhwndForm
    End If
End Sub

Private Sub XLApp_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)
    SetWindowLongA mhwndForm, GWL_HWNDPARENT, 0&
End Sub

Attribute VB_Name = "helpMdl"
'===================================================
' iSTAT_MTHR Ver1.0 : Help
'
' 2008.10 LSQ
'===================================================
Option Explicit
Option Private Module

Sub fHelp_iSTAT_MTHRV1()
    Dim textMsg As String
    
    textMsg = GVerMsg
    
    If UCase(Left(textMsg, 5)) = "DUMMY" Then   'default = blank
        textMsg = ""
    End If

    frmAboutMe.lblVerMsg.Caption = textMsg
    frmAboutMe.Show

End Sub

'***********************
Function sTAHEN_Path() As String
    sTAHEN_Path = getPathName() & "\"
End Function

Function iFile_Check(sFileName As String) As Integer
'*************************
'|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||742||12c82||5c2||fffd|
'|fffd||fffd||fffd||742||fffd||fffd||fffd||182||fffd|=1
'|fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||182||fffd|=0
'*************************
    Dim iRet
    Dim vTemp As Variant
    iRet = 0
    On Error Resume Next
    vTemp = FileDateTime(sFileName)
    If (vTemp = "") Then '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||182||fffd|
        iRet = 0
    Else
        If (vTemp <> "") Then
            iRet = 1
        End If
    End If
    iFile_Check = iRet
End Function

Sub fOnlineManual_iSTAT_MTHRV1()
    Call Comm_LoadPdf("MTHR_HLP.pdf", "|fffd|I|fffd||fffd||fffd||fffd||fffd|C|fffd||fffd||fffd|w|fffd||fffd||fffd|v|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|")
End Sub

'09.2.13 LSQ add
Sub fExplain_iSTAT_MTHRV1()
    Call Comm_LoadPdf("MTHR_DOC.PDF", "|fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|")
End Sub

'09.2.13 LSQ mdf
Private Sub Comm_LoadPdf(ByVal fName As String, ByVal errMsg As String)
    Dim sPDF_Path As String
    Dim sTemp As String
    Dim vRet As Variant
    Dim iLen As Integer
    Dim sTemp2 As String
    Dim sTemp1 As String
    Dim iRet As Integer
    
    sTemp = ""
    sTemp2 = sTAHEN_Path()
    iRet = iExt_App_Search(".pdf", 1, sTemp)
    If (sTemp = "") Then
        iRet = iExt_App_Search("Acrabet", 1, sTemp)
    End If
    If (sTemp = "") Then
        MsgBox "PDF|fffd|{|fffd||fffd||fffd|p|fffd|\|fffd|t|fffd|g|fffd||fffd||fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|"
        Exit Sub
    Else
        sPDF_Path = sTemp
        sTemp1 = sTemp2 & fName
    '---------------------------------------------------------------------
        iRet = iFile_Check(sTemp1)
        If (iRet = 1) Then
           ' -----2007/09/03 |fffd|\|fffd|t|fffd|g|fffd||302||fffd||fffd||fffd|p|fffd|X|fffd||fffd||fffd||243|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd|--------
           'sTemp = sPDF_Path & " " & sTemp2 & fName
            sTemp = sPDF_Path & " " & Chr(34) & sTemp2 & fName & Chr(34)
           '-----------------------------------------------------------------------------
            vRet = Shell(sTemp, 4)
        Else
            MsgBox errMsg, vbExclamation + vbOKOnly, GName_Prog
        End If
    End If
End Sub

'=== EOF ===
Attribute VB_Name = "mdlCallMe"
'=======================================================
' Variable Selection
'
' 2008.06 WZH
'=======================================================
Option Explicit

Function getDefaultAddress(ByVal flgType As Long) As String
    Dim tmpRge As Range
    Set tmpRge = SbkThis.Worksheets("TempVarSelect").Range("B2")
    If flgType > 0 Then
        getDefaultAddress = tmpRge(flgType, 2)
    Else
        getDefaultAddress = ""
    End If
End Function

Function getDefaultVarSelect(ByVal flgType As Long) As String
    Dim tmpRge As Range
    Set tmpRge = SbkThis.Worksheets("TempVarSelect").Range("B2")
    If flgType > 0 Then
        getDefaultVarSelect = tmpRge(flgType, 3)
    Else
        getDefaultVarSelect = ""
    End If
    If getDefaultVarSelect = vbNullString Then getDefaultVarSelect = "0"
End Function

Sub setDefaultAddress(ByVal flgType As Long, ByVal strVarAddr As String)
    Dim tmpRge As Range
    Set tmpRge = SbkThis.Worksheets("TempVarSelect").Range("B2")
    If flgType > 0 Then
        tmpRge(flgType, 2) = strVarAddr
    End If
End Sub

Sub setDefaultVarSelect(ByVal flgType As Long, ByVal strVarSelect As String)
    Dim tmpRge As Range
    Set tmpRge = SbkThis.Worksheets("TempVarSelect").Range("B2")
    If flgType > 0 Then
        tmpRge(flgType, 3) = strVarSelect
    End If
End Sub

Function getCurrentAddress(ByVal dlg As DialogSheet, ByVal strVarRge As String) As String
    Dim RgeVar As Range
    On Error Resume Next
    Set RgeVar = Range(dlg.EditBoxes(strVarRge).Text)
    If Err.Number <> 0 Then
        On Error GoTo 0
        getCurrentAddress = ""
    Else
        getCurrentAddress = "[" & RgeVar.Worksheet.Parent.name & "]" & RgeVar.Worksheet.name & "!" & RgeVar.AddressLocal
    End If
    On Error GoTo 0
End Function

Function bRangeChanged(ByVal flgType As Long, ByVal dlg As DialogSheet, ByVal strVarRge As String) As Boolean
    Dim oldAddress As String
    oldAddress = getDefaultAddress(flgType)
    bRangeChanged = Not (oldAddress = getCurrentAddress(dlg, strVarRge))
End Function

Function getCurrentAddress_Frm(ByVal strRangeAddress As String) As String
    Dim RgeVar As Range
    On Error Resume Next
    Set RgeVar = Range(strRangeAddress)
    If Err.Number <> 0 Then
        On Error GoTo 0
        getCurrentAddress_Frm = ""
    Else
        getCurrentAddress_Frm = "[" & RgeVar.Worksheet.Parent.name & "]" & RgeVar.Worksheet.name & "!" & RgeVar.AddressLocal
    End If
    On Error GoTo 0
End Function

Function bRangeChanged_Frm(ByVal flgType As Long, ByVal strRangeAddress As String) As Boolean
    Dim oldAddress As String
    oldAddress = getDefaultAddress(flgType)
    bRangeChanged_Frm = Not (oldAddress = getCurrentAddress_Frm(strRangeAddress))
End Function

'Set a dictionary for parameters string whick is divided by '&', e.g. 'GrpType=2&FontSize=10'
Function SetDict(ByVal strPara As String) As Object
    Dim arys() As String, subarys() As String
    Dim s As String
    Dim i As Integer, j As Integer
    Dim dict As Collection
    Set SetDict = Nothing
    On Error Resume Next
    arys = Split(strPara, "&")
    Set dict = New Collection
    For i = 0 To UBound(arys)
        subarys = Split(arys(i), "=")
        dict.Add subarys(1), subarys(0)
    Next i
    Set SetDict = dict
exitit:
    Set dict = Nothing
    On Error GoTo 0
End Function

Function VarSelect(ByVal strVarList As String, Optional ByVal strSelected As String = "0") As String
    Dim rtnStr As String
    Application.ScreenUpdating = True
    If Trim(strVarList) = vbNullString Then
        VarSelect = "ERROR"
        Exit Function
    End If
    frmVarSel.Variables = strVarList
    frmVarSel.InitVarSelected strSelected
    frmVarSel.Show
    If frmVarSel.bIsOk Then
        rtnStr = frmVarSel.VarSelected
    Else
        rtnStr = strSelected '"0"
    End If
    DoEvents
    Unload frmVarSel
    VarSelect = rtnStr
End Function

Function GetVarSel(ByVal dlg As DialogSheet, ByVal strVarRge As String, _
                                 Optional ByVal strlabel1 As String = "|fffd||d3dc||fffd||fffd||fffd||fffd|A|fffd|C|fffd|e|fffd||fffd|", _
                                 Optional ByVal strLabel2 As String = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd|", _
                                 Optional ByVal strSelected As String = "0") As String
    Dim i As Integer
    Dim rtn As Integer
    Dim RgeVar As Range
    Dim valvar As Variant
    Dim strVarSelect As String
    Dim saveLabel1 As String, saveLabel2 As String
    strVarSelect = vbNullString
    On Error GoTo err_handler
    If Trim(strSelected) = vbNullString Then
        strSelected = "0"
    End If
    saveLabel1 = frmVarSel.Label1.Caption
    saveLabel2 = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = strlabel1
    frmVarSel.Label2.Caption = strLabel2
    Set RgeVar = Range(dlg.EditBoxes(strVarRge).Text)
    valvar = RgeVar.Value
    For i = 1 To RgeVar.Columns.Count
        strVarSelect = strVarSelect & "," & valvar(1, i)
    Next i
    strVarSelect = VarSelect(Mid(strVarSelect, 2), strSelected)
exit_function:
    frmVarSel.Label1.Caption = saveLabel1
    frmVarSel.Label2.Caption = saveLabel2
    GetVarSel = strVarSelect
    On Error GoTo 0
    Exit Function
err_handler:
    strVarSelect = "0"
    Resume exit_function
End Function

Function GetVarSel_Frm(ByVal dlg As UserForm, ByVal strVarRge As String, _
                                 Optional ByVal strlabel1 As String = "|fffd||d3dc||fffd||fffd||fffd||fffd|A|fffd|C|fffd|e|fffd||fffd|", _
                                 Optional ByVal strLabel2 As String = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd|", _
                                 Optional ByVal bFirstColTitle As Boolean = False, _
                                 Optional ByVal strSelected As String = "0") As String
    Dim i As Long
    Dim rtn As Integer
    Dim itemNum As Long, smpNum As Long
    Dim RgeVar As Range
    Dim valvar As Variant
    Dim strVarSelect As String
    Dim saveLabel1 As String, saveLabel2 As String
    strVarSelect = vbNullString
    On Error GoTo err_handler
    If Trim(strSelected) = vbNullString Then
        strSelected = "0"
    End If
    saveLabel1 = frmVarSel.Label1.Caption
    saveLabel2 = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = strlabel1
    frmVarSel.Label2.Caption = strLabel2
    Set RgeVar = Range(dlg.Controls(strVarRge).Text)
    itemNum = RgeVar.Columns.Count
    smpNum = RgeVar.Rows.Count
    If bFirstColTitle Then
        itemNum = itemNum - 1
        Set RgeVar = RgeVar.Range("B1").Resize(smpNum, itemNum)
    End If
    valvar = RgeVar.Value
    For i = 1 To RgeVar.Columns.Count
        strVarSelect = strVarSelect & "," & valvar(1, i)
    Next i
    strVarSelect = VarSelect(Mid(strVarSelect, 2), strSelected)
exit_function:
    frmVarSel.Label1.Caption = saveLabel1
    frmVarSel.Label2.Caption = saveLabel2
    GetVarSel_Frm = strVarSelect
    On Error GoTo 0
    Exit Function
err_handler:
    strVarSelect = "0"
    Resume exit_function
End Function

Function nu_toXlRCstr(inputFormula As String) As String
    On Error Resume Next
    
    nu_toXlRCstr = Application.ConvertFormula( _
                Formula:=inputFormula, _
                fromReferenceStyle:=xlA1, _
                toReferenceStyle:=xlR1C1)
    
    If Err.Number <> 0 Then
        nu_toXlRCstr = inputFormula
        Err.Clear
    End If
    
    On Error GoTo 0
End Function

Function nu_toXlA1str(inputFormula As String) As String
    On Error Resume Next
    
    nu_toXlA1str = Application.ConvertFormula( _
                Formula:=inputFormula, _
                fromReferenceStyle:=xlR1C1, _
                toReferenceStyle:=xlA1)
    
    If Err.Number <> 0 Then
        nu_toXlA1str = inputFormula
        Err.Clear
    End If
    
    On Error GoTo 0
End Function

Function VarRows(ByVal strData As String, ByVal strCriteria As String) As Integer
    Dim rngData As Range, rngCriteria As Range
    Dim rtnRows As Integer
    Set rngData = Range(toXlA1str(strData))
    Set rngCriteria = Range(toXlA1str(strCriteria))
    rngData.AdvancedFilter Action:=xlFilterInPlace, criteriarange:=rngCriteria, unique:=True
    rtnRows = rngData.Columns(2).SpecialCells(xlCellTypeVisible).Count - 1
    rngData.Worksheet.ShowAllData
    VarRows = rtnRows
End Function

Function ArrangeXRange(ByVal xRange As Range, ByVal VarSelect As String) As Range
    Dim itemNum As Long, smpNum As Long, i As Long
    Dim tmpRge As Range
    Dim stObj As Worksheet
    Dim v As Variant
    Set tmpRge = xRange.Range("A1")
    Set stObj = xRange.Worksheet
    If VarSelect <> "0" Then
        v = Split(VarSelect, ",")
        itemNum = v(0)
        smpNum = xRange.Rows.Count
        For i = 1 To itemNum
            tmpRge.Range(stObj.Cells(1, i), stObj.Cells(smpNum, i)) = xRange.Columns(val(v(i)) + 1).Value
        Next i
        Set ArrangeXRange = tmpRge.Resize(smpNum, itemNum)
    Else
        Set ArrangeXRange = xRange
    End If
End Function
'===== EOF =====
Attribute VB_Name = "mdlCluster"
Option Explicit

Private Type CLUSTERVBA
    DataRge As String * 256                          '|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    outRge As String * 256                             '|fffd||fffd||fffd||28f|o|fffd||354||348||fffd|
    ClusterType As Long                       '|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||30e|w|fffd||fffd|
    ClusterNum As Long                        '|fffd||5fd||fffd||fffd||fffd||fffd|
    method As Long                             '|fffd|v|fffd|Z|fffd||fffd||fffd|@
    DistanceType As Long                     '|fffd||fffd||fffd||fffd||fffd||fffd||30b||fffd||fffd||fffd||fffd|v|fffd|Z
    ODistanceType As Long                   '|fffd||fffd||fffd||7b0||fffd||fffd||30b||fffd||fffd||fffd||fffd|v|fffd|Z
    dummy As Long
    Multiple As Double                         '|fffd||fffd||fffd||7b0||fffd||fffd||fffd||fffd||7b7||fffd||fffd|i0.01|fffd|`0.9|fffd|j
    StartPoint As Long                         '|fffd||fffd||fffd|_|fffd||fffd||fffd||4c3|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||c42c||fffd||fffd||fffd||fffd|
    Stop As Long                                '|fffd||fffd||fffd|l|fffd||20a|O|fffd||fffd||fffd||7b0||fffd||fffd||fffd||fffd||fffd|
    DataOri As Long                            '|fffd|f|fffd|[|fffd|^|fffd|n|fffd||fffd||30c||fffd||fffd||fffd|
    GrpShow As Long                          '|fffd|O|fffd||fffd||fffd|t|fffd||315|\|fffd||fffd|
    fontsize As Long                           '|32b||fffd||102||33b||fffd||fffd|
    GrpRows As Long                           '|fffd||fffd||fffd||302||33b||fffd||fffd|
    GrpCols As Long                            '|fffd||fffd||fffd||302||33b||fffd||fffd|
    RowFirst As Long                            '|fffd||fffd|s|fffd||682||fffd||fffd||7b0||fffd||fffd||fffd||fffd|
    ColFirst As Long                            '|fffd||fffd||fffd||682||fffd||fffd||7b0||fffd||fffd||fffd||fffd|
End Type

Private m_varselect As String
Private clusterTbl As CLUSTERVBA

#If Win64 Then
    #If VBA7 Then
        Declare PtrSafe Function clust_vba Lib "MTHR_D_CLST_64.dll" (ByVal nid As Long, clusterpara As CLUSTERVBA, ByVal ExcelVerNo As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Long
    #Else
        Declare Function clust_vba Lib "MTHR_D_CLST_64.dll" (ByVal nid As Long, clusterpara As CLUSTERVBA, ByVal ExcelVerNo As Long, grp() As VBAGRAPH, ByVal callback As Long) As Long
    #End If
#Else
    #If VBA7 Then
        Declare PtrSafe Function clust_vba Lib "MTHR_D_CLST.dll" (ByVal nid As Long, clusterpara As CLUSTERVBA, ByVal ExcelVerNo As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Long
    #Else
        Declare Function clust_vba Lib "MTHR_D_CLST.dll" (ByVal nid As Long, clusterpara As CLUSTERVBA, ByVal ExcelVerNo As Long, grp() As VBAGRAPH, ByVal callback As Long) As Long
    #End If
#End If


'|fffd||3d0||fffd||fffd|I|fffd||fffd|
Private Sub ClusterGetVarSel()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim RgeVar As Range
    Dim valvar As Variant
    Dim savLabelA As String, savLabelB As String
    Dim bColTitle As Boolean, bRowTitle As Boolean
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgCluster")
    Set RgeVar = Range(dlg.EditBoxes("edtDataRge").Text)
    bColTitle = False '(dlg.OptionButtons("optCTitle").Value = xlOn)
    bRowTitle = True 'True '(dlg.OptionButtons("optRTitle").Value = xlOn)
    If bColTitle Then
        Set RgeVar = Range(RgeVar(1, 2), RgeVar(1, RgeVar.Columns.Count))
    Else
        Set RgeVar = Range(RgeVar(1, 1), RgeVar(1, RgeVar.Columns.Count))
    End If
    If Err.Number <> 0 Then
        Err.Clear
        m_varselect = vbNullString
        On Error GoTo 0
        Exit Sub
    End If
    valvar = RgeVar.Value()
    If bRowTitle Then
        For i = 1 To RgeVar.Columns.Count
            m_varselect = m_varselect & "," & valvar(1, i)
        Next i
    Else
        For i = 1 To RgeVar.Columns.Count
            m_varselect = m_varselect & "," & "Item " & i
        Next i
    End If
    'save
    savLabelA = frmVarSel.Label1.Caption
    savLabelB = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|"
    frmVarSel.Label2.Caption = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|"
    
    m_varselect = VarSelect(Mid(m_varselect, 2))
    
    'recovery
    frmVarSel.Label1.Caption = savLabelA
    frmVarSel.Label2.Caption = savLabelB
    
    If bColTitle Then
        valvar = Split(m_varselect, ",")
        m_varselect = CStr(valvar(0) + 1) & ",0"
        For i = 1 To valvar(0)
            m_varselect = m_varselect & "," & valvar(i) + 1
        Next i
    End If
    
    On Error GoTo 0
End Sub

Private Sub Cluster_ODistance()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgCluster")
    bOn = dlg.OptionButtons("optODistance2").Value = xlOn
    dlg.EditBoxes("edtMultiple").Enabled = bOn
End Sub

Private Sub Cluster_GrpShow()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgCluster")
    bOn = (dlg.CheckBoxes("chkGrpShow").Value = xlOn)
    dlg.EditBoxes("edtFontSize").Enabled = bOn
    dlg.OptionButtons("optGrpOri1").Enabled = bOn
    dlg.OptionButtons("optGrpOri2").Enabled = bOn
End Sub

Private Sub ClusterDataType()
    Dim bEnabled As Boolean
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgCluster")
    bEnabled = IIf(dlg.OptionButtons("optSamples").Value = xlOn, True, False)
    dlg.OptionButtons("optDistance1").Enabled = True
    dlg.OptionButtons("optDistance2").Enabled = True
    dlg.OptionButtons("optDistance3").Enabled = True
    dlg.OptionButtons("optDistance4").Enabled = True
    dlg.OptionButtons("optDistance5").Enabled = True
    dlg.OptionButtons("optODistance1").Enabled = bEnabled
    dlg.OptionButtons("optODistance2").Enabled = bEnabled
    dlg.OptionButtons("optODistance3").Enabled = bEnabled
    dlg.OptionButtons("optODistance4").Enabled = bEnabled
    dlg.CheckBoxes("chkStartPoint").Enabled = bEnabled
    dlg.EditBoxes("edtMultiple").Enabled = (dlg.OptionButtons("optODistance2").Enabled And dlg.OptionButtons("optODistance2").Value = xlOn)
End Sub

Private Sub Cluster_SetMacro(ByVal dlg As DialogSheet)
    'var select
    dlg.Buttons("btnVarSelect").OnAction = "ClusterGetVarSel"
    dlg.OptionButtons("optSamples").OnAction = "ClusterDataType"
    dlg.OptionButtons("optItems").OnAction = "ClusterDataType"
    dlg.OptionButtons("optODistance1").OnAction = "Cluster_ODistance"
    dlg.OptionButtons("optODistance2").OnAction = "Cluster_ODistance"
    dlg.OptionButtons("optODistance3").OnAction = "Cluster_ODistance"
    dlg.OptionButtons("optODistance4").OnAction = "Cluster_ODistance"
    dlg.CheckBoxes("chkGrpShow").OnAction = "Cluster_GrpShow"
    ClusterDataType
    Cluster_ODistance
    Cluster_GrpShow
End Sub
'
'return TRUE = OK else ERROR
'
Private Function chkClusterData(ByVal bMultiCluster As Boolean, ByVal BgnNo As Long, ByVal EndNo As Long) As Boolean
    Dim rgeData As Range, RgeOut As Range
    Dim msgStr As String
    Dim tmpi As Long
    Dim itemNum As Long
    
    'init
    msgStr = ""

    On Error Resume Next
    Set rgeData = Range(clusterTbl.DataRge)
    Set RgeOut = Range(clusterTbl.outRge)
    On Error GoTo 0
    
    If rgeData Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    'If RgeOut Is Nothing Then
    '    msgStr = "|fffd||fffd||fffd||28f|o|fffd||354||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    '    GoTo chkEnd
    'End If
    
    itemNum = rgeData.Columns.Count
    If clusterTbl.ColFirst = 1 Then itemNum = itemNum - 1
    If bMultiCluster Then
        If clusterTbl.ClusterType = 2 And (BgnNo > EndNo Or BgnNo < 2 Or EndNo < 2 Or BgnNo > itemNum Or EndNo > itemNum) Then
            msgStr = "|fffd||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            GoTo chkEnd
        End If
    Else
        tmpi = clusterTbl.ClusterNum
        If clusterTbl.ClusterType = 2 And (tmpi < 2 Or tmpi > itemNum) Then
            msgStr = "|fffd||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            GoTo chkEnd
        End If
    End If
    '
    If clusterTbl.ODistanceType = 2 Then
        If clusterTbl.Multiple < 0.01 Or clusterTbl.Multiple > 0.9 Then
            msgStr = "0.01|fffd|`0.9|fffd||30a||502||312|l|fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
            GoTo chkEnd
        End If
    End If
    
    If clusterTbl.GrpShow = 1 Then
        If clusterTbl.fontsize < 4 Or clusterTbl.fontsize > 20 Then
            msgStr = "|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|T|fffd|C|fffd|Y|fffd||341|A4|fffd|`20|fffd||142||fffd||fffd|B"
            GoTo chkEnd
        End If
        If clusterTbl.GrpRows < 8 Or clusterTbl.GrpRows > 30 Then
            msgStr = "|fffd|O|fffd||fffd||fffd|t|fffd||30d|s|fffd||fffd||fffd||fffd|8|fffd|`30|fffd||142||fffd||fffd|B"
            GoTo chkEnd
        End If
        If clusterTbl.GrpCols < 8 Or clusterTbl.GrpCols > 30 Then
            msgStr = "|fffd|O|fffd||fffd||fffd|t|fffd||317||50502||341|A4|fffd|`12|fffd||142||fffd||fffd|B"
            GoTo chkEnd
        End If
    End If

chkEnd:
    If msgStr <> "" Then
        MsgBox msgStr
        chkClusterData = False
        Exit Function
    End If
    
    '
    chkClusterData = True
End Function

Private Function handleClusterData(ByVal RgeSmpName As Range) As Worksheet
    Dim i As Long, j As Long, l As Long
    Dim rgeSrc As Range, rge As Range
    Dim tmpRge As Range
    Dim tmpSht As Worksheet
    Dim clusterVarSel As Variant
    Dim smpNum As Long, itemNum As Long
    Dim msgStr As String
    
    On Error Resume Next
    Set rgeSrc = Range(clusterTbl.DataRge)
    smpNum = rgeSrc.Rows.Count
    itemNum = rgeSrc.Columns.Count
    Set tmpSht = rgeSrc.Worksheet.Parent.Sheets.Add
    Set rge = tmpSht.Range("$A$3")
    
    If m_varselect <> "0" Then
        clusterVarSel = Split(m_varselect, ",")
    Else
        ReDim clusterVarSel(0 To itemNum) As Long
        clusterVarSel(0) = itemNum
        For i = 1 To itemNum
            clusterVarSel(i) = i - 1
        Next i
    End If
    
    itemNum = clusterVarSel(0)

    For i = 1 To smpNum
        If clusterTbl.ColFirst = 2 Then
            If RgeSmpName Is Nothing Then
                rge(i + 1, 1) = i
            Else
                rge(i + 1, 1) = RgeSmpName(i, 1)
            End If
        End If
        For j = 1 To itemNum
            rge(i, j + 1) = rgeSrc(i, clusterVarSel(j) + 1)
        Next j
    Next i
    If clusterTbl.ColFirst = 2 Then
        clusterTbl.DataRge = toXlRCstr(Range(rge(1, 1), rge(smpNum, itemNum + 1)).Address) & vbNullChar
        clusterTbl.ColFirst = 1
    Else
        clusterTbl.DataRge = toXlRCstr(Range(rge(1, 2), rge(smpNum, itemNum + 1)).Address) & vbNullChar
    End If
    clusterTbl.DataRge = tmpSht.name & "!" & clusterTbl.DataRge & vbNullChar
    
    Set handleClusterData = tmpSht
    On Error GoTo 0
End Function

Sub IS_MTHR_CLST()
    Dim i As Integer, k As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet, ChkObj As CheckBox
    Dim RgeVar As Range, RgeSmpName As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim tmpSht As Worksheet
    Dim grpType0 As Integer
    Dim chartName As String, grpData0 As String
    Dim para As Object
    Dim chartTitle As String
    Dim txtLen As Integer
    Dim fontsize As Integer
    Dim bSmpName As Integer
    Dim predictNum As Integer
    Dim actCell As Range
    Dim cht As Chart
    Dim VerNoXL As Integer
    Dim actSht As Worksheet, ResultSht As Worksheet
    Dim bMultiCluster As Boolean
    Dim BgnNo As Long, EndNo As Long
    Dim GrpOri As Long
    Dim TextNum As Long
    Dim nid As Long
    
    On Error Resume Next
    
    nid = IIf(isTrialVer, 0, 1)
    
    VerNoXL = 12    '09.6 PYJ old:getExcelVerNo()
    ReDim VbaGrp(0)
    
    Set dlg = ThisWorkbook.DialogSheets("DlgCluster")
    
    Call Cluster_SetMacro(dlg)
    
redisp:
    m_varselect = "0"
    Set actSht = ActiveSheet
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        If m_varselect = vbNullString Then
            GoTo redisp
        End If
        clusterTbl.DataRge = dlg.EditBoxes("edtDataRge").Text & vbNullChar
        'clusterTbl.OutRge = dlg.EditBoxes("edtOutRge").Text & vbNullChar
        clusterTbl.ClusterType = IIf(dlg.OptionButtons("optSamples").Value = xlOn, 1, 2)
        clusterTbl.ClusterNum = val(dlg.EditBoxes("edtClusterNum").Text)
        clusterTbl.method = 2 'IIf(dlg.OptionButtons("optMethod1").Value = xlOn, 1, 2)
        clusterTbl.DistanceType = IIf(dlg.OptionButtons("optDistance1").Value = xlOn, 1, _
                                       IIf(dlg.OptionButtons("optDistance2").Value = xlOn, 2, _
                                       IIf(dlg.OptionButtons("optDistance3").Value = xlOn, 3, _
                                       IIf(dlg.OptionButtons("optDistance4").Value = xlOn, 4, 5))))
        clusterTbl.ODistanceType = IIf(dlg.OptionButtons("optODistance1").Value = xlOn, 1, _
                                       IIf(dlg.OptionButtons("optODistance2").Value = xlOn, 2, _
                                       IIf(dlg.OptionButtons("optODistance3").Value = xlOn, 3, 4)))
        If clusterTbl.ODistanceType = 2 Then
            clusterTbl.Multiple = val(dlg.EditBoxes("edtMultiple").Text)
        End If
        clusterTbl.StartPoint = IIf(dlg.OptionButtons("optSPYes").Value = xlOn, 1, 0) 'IIf(dlg.CheckBoxes("chkStartPoint").Value = xlOn, 1, 0)
        clusterTbl.Stop = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 0, 1)
        clusterTbl.DataOri = 1 'IIf(dlg.OptionButtons("optByCol").Value = xlOn, 1, 2)
        clusterTbl.GrpShow = IIf(dlg.CheckBoxes("chkGrpShow").Value = xlOn, 1, 0)
        clusterTbl.fontsize = 10 'val(dlg.EditBoxes("edtFontSize").Text)
        clusterTbl.GrpRows = 20 'val(dlg.EditBoxes("edtGrpRows").Text)
        clusterTbl.GrpCols = 8 'val(dlg.EditBoxes("edtGrpCols").Text)
        clusterTbl.RowFirst = 1 'IIf(dlg.OptionButtons("optRTitle").Value = xlOn, 1, 2)
        clusterTbl.ColFirst = 2 'IIf(dlg.OptionButtons("optCTitle").Value = xlOn, 1, 2)
        bMultiCluster = 0 ' IIf(dlg.OptionButtons("optSingle").Value = xlOn, 0, 1)
        If bMultiCluster Then
            'BgnNo = val(dlg.EditBoxes("edtBgnNo").text)
            'EndNo = val(dlg.EditBoxes("edtEndNo").text)
        Else
            BgnNo = clusterTbl.ClusterNum
            EndNo = BgnNo
        End If
        GrpOri = IIf(dlg.OptionButtons("optGrpOri1").Value = xlOn, 2, 1)
        TextNum = val(dlg.EditBoxes("edtFontSize").Text)
        bSmpName = IIf(dlg.OptionButtons("optSmpName").Value = xlOn, True, False)
        Set RgeSmpName = Nothing
        If bSmpName Then
            Set RgeSmpName = Range(dlg.EditBoxes("edtSmpNameRge").Text)
            If RgeSmpName Is Nothing Then
                MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                GoTo redisp
            End If
        End If
        If chkClusterData(bMultiCluster, BgnNo, EndNo) = False Then
            GoTo redisp
        End If
        
        Set tmpSht = handleClusterData(RgeSmpName)
        If tmpSht Is Nothing Then GoTo redisp
        
        For k = BgnNo To EndNo
            actSht.Activate
            Call changeToSSDir
            ActiveWorkbook.ActiveSheet.Select
            Set ResultSht = ActiveWorkbook.Worksheets.Add
            clusterTbl.outRge = toXlRCstr(ResultSht.name & "!$A$2") & vbNullChar
            clusterTbl.ClusterNum = k
            rtn = clust_vba(nid, clusterTbl, VerNoXL, G_VbaGrp, CallBackPtr)
            Application.ScreenUpdating = True
            If (rtn = 0 And VerNoXL >= 12) Then
                Set actCell = ActiveCell
                #If 0 Then
                For i = 1 To UBound(G_VbaGrp)
                    If ConvToBSTR(G_VbaGrp(i)) Then
                        If VbaGrp(i).Type > 0 Then
                            Set cht = DrawClusterGrp(G_VbaGrp(i).sheetName, G_VbaGrp(i).grpOut, G_VbaGrp(i).grpData, G_VbaGrp(i).grpPara, cht)
                        End If
                    End If
                Next i
                #Else
                    If ConvToBSTR(G_VbaGrp(1)) Then
                        If VbaGrp(1).Type > 0 Then
                            Set cht = DrawClusterGrp(G_VbaGrp(1).sheetName, G_VbaGrp(1).grpOut, G_VbaGrp(1).grpData, G_VbaGrp(1).grpPara, clusterTbl.DataRge, clusterTbl.ClusterType, GrpOri, TextNum)
                        End If
                    End If
                #End If
                actCell.Worksheet.Activate
                actCell.Select
            End If
            ReDim G_VbaGrp(0)

            'Call Comm_CutDataLink(ActiveWorkbook, GxlaBkGraph) 'GxlaTai5BkGraph)
            actCell.Select
            If bMultiCluster Then
                ActiveSheet.name = k & "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||142||30c||fffd||fffd||fffd|"
            End If
            ActiveSheet.Cells.ColumnWidth = 9
        Next k
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub
'

Attribute VB_Name = "mdlClusterGrp"
Option Explicit

Private ClusterCht As Chart
Private rgeTitle As Range
Private TextLen As Long
Private b50 As Long

' |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|
Function DrawClusterGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                      ByVal strGrpData As String, ByVal strPara As String, ByVal strTitle As String, _
                      ByVal ClusterType As Long, ByVal Ori As Long, ByVal TextNum As Long) As Chart
    Dim nc As Long, clsNum As Long
    Dim r As Range, RgeOut As Range
    Dim para As Object
    Dim wrksht As Worksheet, wrkbk As Workbook
    On Error Resume Next
    Set para = Comm_SetDict(strPara)
    If para Is Nothing Then
        GoTo exitit
    End If
    Set wrksht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set wrkbk = wrksht.Parent
    If wrksht Is Nothing Or wrkbk Is Nothing Then
        GoTo exitit
    End If
    Set RgeOut = wrksht.Range(Comm_toXlA1str(strGrpOut))
    Set r = wrksht.Range(Comm_toXlA1str(strGrpData))
    Set rgeTitle = Range(Comm_toXlA1str(strTitle))
    If RgeOut Is Nothing Or r Is Nothing Or rgeTitle Is Nothing Then
        GoTo exitit
    End If
    On Error GoTo 0
    
    nc = CLng(para("SmpNum"))
    clsNum = CLng(para("ClsNum"))
    b50 = CLng(para("b50"))
    TextLen = TextNum
    Set para = Nothing
    Set ClusterCht = Nothing
    If ClusterType = 1 Then
        Set rgeTitle = rgeTitle(2, 1).Resize(nc, 1)
    Else
        Set rgeTitle = rgeTitle(1, 2).Resize(1, nc)
    End If
    Application.ScreenUpdating = False
    DrawGrp nc, clsNum, r, Ori
    If Ori = 2 Then
        Call Comm_setChartPosSize(ClusterCht.Parent, RgeOut, 20, 8)
    Else
        'Call Comm_setChartPosSize(ClusterCht.Parent, rgeOut, nc + clsNum + 5, 8)
        Call Comm_setChartPosSize(ClusterCht.Parent, RgeOut, 25, 6)
    End If
    ClusterCht.ChartArea.Select
    Call MatchWorkbookFont
exitit:
    Set DrawClusterGrp = ClusterCht
End Function

Sub DrawGrp(ByVal nc As Long, ByVal clsNum As Long, ByVal r As Range, ByVal Ori As Long)
    Dim kgg() As Long
    Dim pair1() As Long, pair2() As Long
    Dim dist() As Double
    Dim v As Variant
    Dim i As Long
    ReDim kgg(0 To nc)
    ReDim pair1(0 To nc)
    ReDim pair2(0 To nc)
    ReDim dist(0 To nc)
    v = r.Value
    For i = 1 To nc
        kgg(i - 1) = v(i, 1) - 1
    Next i
    For i = 1 To nc
        pair1(i) = v(i, 2) - 1
    Next i
    For i = 1 To nc
        pair2(i) = v(i, 3) - 1
    Next i
    For i = 1 To nc
        dist(i) = v(i, 4)
    Next i
    Call fullgra(Ori, nc, clsNum, dist, kgg, pair1, pair2, r(1, 1).Row - 1, r(1, 4).Column + 1)
End Sub

Function fullgra(Ori As Long, nc As Long, clsNum As Long, dist() As Double, _
        kgg() As Long, pair1() As Long, pair2() As Long, _
        Row As Long, col As Long)
    Dim i As Long, j As Long, widthx As Long
    Dim CasePos() As Double, NodePos() As Double
    Dim DistLen As Double
    Dim offsety As Double, offsetx As Double, factorx As Double, delta As Double, x As Double
    Dim rng As Range

    ReDim CasePos(nc)
    ReDim NodePos(nc)

    DistLen = dist(nc - 1)

    Set rng = Range(Cells(Row + 1, col + 1), Cells(Row + 1, col + 1))
   
    Row = Row + 1
    For i = 0 To nc - 1
        For j = 0 To nc - 1
            If kgg(i) = j Then
                Exit For
            End If
        Next j
        NodePos(j) = 0
        CasePos(j) = i + 1
        If b50 = 0 Then
            If rgeTitle.Columns.Count = 1 Then
                Cells(Row, col) = MidB(rgeTitle(kgg(i) + 1, 1), 1, TextLen)
            Else
                Cells(Row, col) = MidB(rgeTitle(1, kgg(i) + 1), 1, TextLen)
            End If
        Else
            Cells(Row, col) = kgg(i) + 1
        End If
        Cells(Row, col + 1) = IIf(Ori = 2 Or Application.Version >= 12, 0, 1)
        Row = Row + 1
    Next i
   
    Charts.Add
    ActiveChart.Location Where:=xlLocationAsObject, name:=rng.Parent.name
    Set ClusterCht = ActiveChart
    With ClusterCht
        .HasTitle = True
        .chartTitle.Characters.Text = "|fffd||fffd||fffd|`|fffd|}"
    End With
    For i = 1 To ClusterCht.SeriesCollection.Count
        ClusterCht.SeriesCollection(1).Delete
    Next i
    Dim maxDiff As Double
    maxDiff = 0
    For i = 1 To nc - 1
        Dim Case1 As Double, Node1 As Double, Case2 As Double, Node2 As Double, NodeN As Double
        Case1 = CasePos(pair1(i))
        Node1 = NodePos(pair1(i))
        Case2 = CasePos(pair2(i))
        Node2 = NodePos(pair2(i))
        NodeN = i 'dist(i) ' i
        gline Ori, Node1, Case1, NodeN, Case1
        gline Ori, Node2, Case2, NodeN, Case2
        gline Ori, NodeN, Case1, NodeN, Case2
        CasePos(pair1(i)) = (Case1 + Case2) * 0.5
        NodePos(pair1(i)) = NodeN
        If dist(i + 1) - dist(i) > maxDiff Then maxDiff = dist(i + 1) - dist(i)
        If i = nc - clsNum Then
            gline Ori, NodeN + 0.5, 1, NodeN + 0.5, nc, 3
            'gline Ori, NodeN + (dist(i + 1) - dist(i)) / 2, 1, NodeN + (dist(i + 1) - dist(i)) / 2, nc, 3
        End If
        If i = nc - 1 Then
            gline Ori, NodeN, (Case1 + Case2) / 2, NodeN + 1, (Case1 + Case2) / 2
            'gline Ori, NodeN, (Case1 + Case2) / 2, NodeN + maxDiff / 2, (Case1 + Case2) / 2
        End If
    Next i
    AddLabels Ori, nc, rng
    If Ori = 2 Then
        SetChartProps2
    Else
        SetChartProps nc
    End If
End Function

Sub gline(ByVal Ori As Long, ByVal x1 As Double, ByVal y1 As Double, ByVal x2 As Double, ByVal y2 As Double, Optional ByVal Color As Long = 1)
    Dim Index As Long
    Dim XValues As String, YValues As String
    If Ori = 2 Then
        YValues = "{" & x1 & "," & x2 & "}"
        XValues = "{" & y1 & "," & y2 & "}"
    Else
        XValues = "{" & x1 & "," & x2 & "}"
        YValues = "{" & y1 & "," & y2 & "}"
    End If
    With ClusterCht.SeriesCollection.NewSeries
        Index = ClusterCht.SeriesCollection.Count
      .Formula = "=SERIES(," + XValues + "," + YValues + "," + CStr(Index - 1) + ")"
      .name = "Cluster" + CStr(Index)
      .ChartType = xlXYScatterLinesNoMarkers
      .Border.colorIndex = Color
      .Border.Weight = xlThin
      .Border.LineStyle = xlContinuous
      .AxisGroup = xlPrimary
    End With
End Sub

Sub AddLabels(ByVal Ori As Long, ByVal nc As Long, ByVal r As Range)
    Dim LabelsAddress As String, ZerosAddress
    If Ori = 1 Then
        LabelsAddress = r(1, 0).Resize(nc + 1, 1).Address
        ZerosAddress = r(1, 1).Resize(nc + 1, 1).Address
    Else
        LabelsAddress = r(1, 0).Resize(nc, 1).Address
        ZerosAddress = r(1, 1).Resize(nc, 1).Address
    End If
    With ClusterCht.SeriesCollection.NewSeries
      .Formula = "=SERIES(," + "'" & r.Parent.name & "'!" & LabelsAddress + "," + "'" & r.Parent.name & "'!" & ZerosAddress + ",1)"
      .ChartType = IIf(Ori = 2, xlColumnClustered, xlBarClustered)
      .AxisGroup = IIf(Ori = 2, xlPrimary, xlSecondary)
      .name = "Labels"
    End With
End Sub

Sub SetChartProps(ByVal nc As Long)
    ClusterCht.Legend.Delete
    ClusterCht.Axes(xlValue).Select
    With Selection.Border
        .Weight = xlHairline
        .LineStyle = xlNone
    End With
    With Selection
        .MajorTickMark = xlNone
        .MinorTickMark = xlNone
        .TickLabelPosition = xlNone
    End With
    With ClusterCht.Axes(xlValue)
        .MinimumScale = 1
        .MaximumScale = nc + 1
        .MinorUnitIsAuto = True
        .MajorUnit = 1
        .Crosses = xlAutomatic
        .ReversePlotOrder = True
        .ScaleType = xlLinear
        .DisplayUnit = xlNone
    End With
    ClusterCht.PlotArea.Select
    With ClusterCht
        .HasAxis(xlCategory, xlPrimary) = True
        .HasAxis(xlCategory, xlSecondary) = True
        .HasAxis(xlValue, xlPrimary) = True
        .HasAxis(xlValue, xlSecondary) = True
    End With
    ClusterCht.Axes(xlCategory, xlPrimary).CategoryType = xlAutomatic
    ClusterCht.Axes(xlCategory, xlSecondary).CategoryType = xlAutomatic
    ClusterCht.Axes(xlCategory, xlSecondary).Select
    With Selection.Border
        .Weight = xlHairline
        .LineStyle = xlNone
    End With
    With Selection
        .MajorTickMark = xlNone
        .MinorTickMark = xlNone
        .TickLabelPosition = xlLow
    End With
    With ClusterCht.Axes(xlCategory, xlSecondary)
        .Crosses = xlMaximum
        .TickLabelSpacing = 1
        .TickMarkSpacing = 1
        .AxisBetweenCategories = False
        .ReversePlotOrder = True
    End With
    ClusterCht.Axes(xlValue, xlSecondary).Select
    With ClusterCht.Axes(xlValue, xlSecondary)
        .MinimumScale = 0
        .MaximumScale = 1
        .MinorUnitIsAuto = True
        .MajorUnitIsAuto = True
        .Crosses = xlCustom
        .CrossesAt = 1
        .ReversePlotOrder = False
        .ScaleType = xlLinear
        .DisplayUnit = xlNone
    End With
    ClusterCht.Axes(xlValue, xlSecondary).Delete
    ClusterCht.Axes(xlCategory).Select
    With Selection.Border
        .Weight = xlHairline
        .LineStyle = xlNone
    End With
    With Selection
        .MajorTickMark = xlNone
        .MinorTickMark = xlNone
        .TickLabelPosition = xlNone
    End With
    ClusterCht.Axes(xlValue).HasMajorGridlines = False
    ClusterCht.PlotArea.Select
    With Selection.Border
        .Weight = xlThin
        .LineStyle = xlNone
    End With
    Selection.Interior.colorIndex = xlNone
End Sub

Sub SetChartProps2()
    ClusterCht.Legend.Delete
    ClusterCht.PlotArea.Select
    ClusterCht.PlotArea.ClearFormats
    ClusterCht.Axes(xlValue).MajorGridlines.Delete
    ClusterCht.Axes(xlValue).Delete
    ClusterCht.Axes(xlCategory).TickLabels.Orientation = xlVertical
    With ActiveChart.Axes(xlCategory)
        .MajorTickMark = xlNone
        .TickLabels.Orientation = xlVertical
        .CrossesAt = 1
        .TickLabelSpacing = 1
        .TickMarkSpacing = 1
        .AxisBetweenCategories = True
        .ReversePlotOrder = False
        .Border.LineStyle = xlNone
    End With
End Sub
Attribute VB_Name = "mdlCommon"
'=======================================================
Option Private Module
Option Explicit

Private dlgcontants As Object

Private Function CollectionSort(ByRef oCollection As Collection, Optional bSortAscending As Boolean = True) As Long
    Dim lSort1 As Long, lSort2 As Long
    Dim vTempItem1 As Variant, vTempItem2 As Variant, bSwap As Boolean
    
    On Error GoTo ErrFailed
    For lSort1 = 1 To oCollection.Count - 1
        For lSort2 = lSort1 + 1 To oCollection.Count
            If bSortAscending Then
                If oCollection(lSort1) > oCollection(lSort2) Then
                    bSwap = True
                Else
                    bSwap = False
                End If
            Else
                If oCollection(lSort1) < oCollection(lSort2) Then
                    bSwap = True
                Else
                    bSwap = False
                End If
            End If
            If bSwap Then
                'Store the items
                If VarType(oCollection(lSort1)) = vbObject Then
                    Set vTempItem1 = oCollection(lSort1)
                Else
                    vTempItem1 = oCollection(lSort1)
                End If
                
                If VarType(oCollection(lSort2)) = vbObject Then
                    Set vTempItem2 = oCollection(lSort2)
                Else
                    vTempItem2 = oCollection(lSort2)
                End If
                
                'Swap the items over
                oCollection.Add vTempItem1, , lSort2
                oCollection.Add vTempItem2, , lSort1
                'Delete the original items
                oCollection.Remove lSort1 + 1
                oCollection.Remove lSort2 + 1
            End If
        Next
    Next
    Exit Function

ErrFailed:
    CollectionSort = Err.Number
    On Error GoTo 0
End Function

Function Remove0CateA(rgeDataIn As String, rgeCateIn As String) As Integer
    Dim i As Long, j As Long, k As Long
    Dim itmNum As Long, smpNum As Long, CateNum As Long
    Dim strCate As String
    Dim rgeData As Range, rgeCate As Range
    Dim varData As Variant, Cate As Variant
    Dim cateCol As Collection
    On Error Resume Next
    Set rgeData = Range(toXlA1str(rgeDataIn))
    Set rgeCate = Range(toXlA1str(rgeCateIn))
    varData = rgeData.Value
    Cate = rgeCate.Value
    itmNum = rgeData.Columns.Count
    smpNum = rgeData.Rows.Count - 1
    CateNum = rgeCate.Rows.Count
    For i = 1 To itmNum
        Set cateCol = New Collection
        For j = 1 To smpNum
            strCate = CStr(varData(j + 1, i))
            If cateCol.Item(strCate) = 0 Then
                cateCol.Add varData(j + 1, i), strCate
            End If
        Next j
        CollectionSort cateCol, True
        For j = 1 To smpNum
            strCate = CStr(varData(j + 1, i))
            For k = 1 To cateCol.Count
                If varData(j + 1, i) = cateCol(k) Then
                    varData(j + 1, i) = k
                    Exit For
                End If
            Next k
        Next j
        If CateNum >= cateCol.Count Then
            For k = 1 To cateCol.Count
                Cate(k, i) = Cate(cateCol(k), i)
            Next k
        End If
        Set cateCol = Nothing
    Next i
    rgeData.Value = varData
    rgeCate.Value = Cate
    Set cateCol = Nothing
    Remove0CateA = 0
    On Error GoTo 0
End Function

Function Remove0Cate(ByVal RgeVarKind As String, rgeDataIn As String, rgeCateIn As String, ByVal bStop_n0 As Boolean, Optional ByRef rtnVal As Variant, Optional ByRef NewCates As Variant) As Integer
    Dim i As Long, j As Long, k As Long
    Dim itmNum As Long, smpNum As Long, CateNum As Long
    Dim strCate As String
    Dim rgeData As Range, rgeCate As Range, rgeKind As Range
    Dim varData As Variant, Cate As Variant
    Dim cateCol As Collection
    Dim tmpstr As String
    On Error Resume Next
    Set rgeData = Range(toXlA1str(rgeDataIn))
    Set rgeCate = Range(toXlA1str(rgeCateIn))
    Set rgeKind = Range(toXlA1str(RgeVarKind))
    
    varData = rgeData.Value
    Cate = rgeCate.Value
    itmNum = rgeData.Columns.Count
    smpNum = rgeData.Rows.Count - 1
    CateNum = rgeCate.Rows.Count
    For i = 1 To itmNum
        If rgeKind(i, 1) > 0 Then
            Set cateCol = New Collection
            For j = 1 To smpNum
                strCate = CStr(varData(j + 1, i))
                If cateCol.Item(strCate) = 0 Then
                    cateCol.Add varData(j + 1, i), strCate
                End If
            Next j
            CollectionSort cateCol, True
            For j = 1 To smpNum
                strCate = CStr(varData(j + 1, i))
                For k = 1 To cateCol.Count
                    If varData(j + 1, i) = cateCol(k) Then
                        varData(j + 1, i) = k
                        Exit For
                    End If
                Next k
            Next j
            If CateNum >= cateCol.Count Then
                For k = 1 To cateCol.Count
                    Cate(k, i) = Cate(cateCol(k), i)
                Next k
            End If
            If Not IsMissing(rtnVal) Then
                rtnVal(i) = cateCol.Count
            End If
            If Not IsMissing(NewCates) Then
                tmpstr = ""
                For k = 1 To cateCol.Count
                    tmpstr = tmpstr & "," & cateCol(k)
                Next k
                NewCates(i) = Mid(tmpstr, 2)
            End If
            Set cateCol = Nothing
        End If
    Next i
    rgeData.Value = varData
    rgeCate.Value = Cate
    Set cateCol = Nothing
    Remove0Cate = 0
    On Error GoTo 0
End Function

'----- dialogBox control common module ----- bgn ------

Sub CommSetSmpName(ByVal dlg As DialogSheet, ByVal strSmpName As String, ByVal bEnabled As Boolean)
    dlg.EditBoxes(strSmpName).Enabled = bEnabled
    If bEnabled Then
        On Error Resume Next    '09.1.22 LSQ add "on error" : avoid focus setting unreasonable error (in SR2)
    
        'dlg.EditBoxes("RgeSmpName").SetFocus
        dlg.Focus = dlg.EditBoxes(strSmpName).name
        
        On Error GoTo 0
    End If
End Sub

'08.12.4 LSQ add : firstly used in SR3
Sub CommSetEditBox_byChk(ByVal dlgName As String, ByVal chkName As String, ByVal edtName As String)
    Dim dlg As DialogSheet, ChkObj As CheckBox
    Dim bOn As Boolean

    Set dlg = ThisWorkbook.DialogSheets(dlgName)
    Set ChkObj = dlg.CheckBoxes(chkName)
    bOn = (ChkObj = xlOn And ChkObj.Enabled)
    
    Call CommSetSmpName(dlg, edtName, bOn)
End Sub
'
'08.12.4 LSQ add : firstly used in SR3
Sub CommSetEditBox_byOpt(ByVal dlgName As String, ByVal optName As String, ByVal edtName As String)
    Dim dlg As DialogSheet, optObj As OptionButton
    Dim bOn As Boolean

    Set dlg = ThisWorkbook.DialogSheets(dlgName)
    Set optObj = dlg.OptionButtons(optName)
    bOn = (optObj = xlOn And optObj.Enabled)
    
    Call CommSetSmpName(dlg, edtName, bOn)
End Sub
'
'----- dialogBox control common module ----- end ------
'
Sub SaveDlg(ByVal dlg As DialogSheet)
    Dim part As Shape
    On Error Resume Next
    Set dlgcontants = Nothing
    Set dlgcontants = CreateObject("Scripting.Dictionary")
    dlgcontants("SSS_SRKV3_DLGNAME") = dlg.name
    For Each part In dlg.Shapes
        If part.FormControlType = xlEditBox Then
            dlgcontants(part.name) = part.DrawingObject.Text
        ElseIf part.FormControlType = xlOptionButton Or part.FormControlType = xlCheckBox Then
            dlgcontants(part.name) = CStr(part.DrawingObject.Value)
        End If
    Next part
    On Error GoTo 0
End Sub

Sub RestoreDlg(ByVal dlg As DialogSheet)
    Dim part As Shape
    Dim keys
    Dim i
    If dlgcontants Is Nothing Then Exit Sub
    On Error Resume Next
    If dlgcontants("SSS_SRKV3_DLGNAME") <> dlg.name Then
        On Error GoTo 0
        Exit Sub
    End If
    keys = dlgcontants.keys
    dlg.Unprotect
    For i = 0 To dlgcontants.Count - 1
        Set part = dlg.Shapes(keys(i))
        If part.FormControlType = xlEditBox Then
            part.DrawingObject.Text = dlgcontants(keys(i))
        ElseIf part.FormControlType = xlOptionButton Or part.FormControlType = xlCheckBox Then
            part.DrawingObject.Value = CDbl(dlgcontants(keys(i)))
        End If
    Next i
    dlg.Protect
    On Error GoTo 0
End Sub

Function PasteRange(ByVal srcRge As Range, ByVal dstRge As Range, ByVal pasteType As XlPasteType) As Range
        srcRge.Worksheet.Activate
        srcRge.Copy
        dstRge.Worksheet.Activate
        dstRge.Select
        dstRge.PasteSpecial pasteType
        Set PasteRange = Selection
End Function

Sub SetRangeBorder(ByVal rge As Range, _
                                    ByVal leftWgt As XlBorderWeight, _
                                    ByVal topWgt As XlBorderWeight, _
                                    ByVal rightWgt As XlBorderWeight, _
                                    ByVal bottomWgt As XlBorderWeight, _
                                    Optional ByVal vWgt As XlBorderWeight = xlNone, _
                                    Optional ByVal hWgt As XlBorderWeight = xlNone)
    Dim i As Long
    rge.Borders(xlDiagonalDown).LineStyle = xlNone
    rge.Borders(xlDiagonalUp).LineStyle = xlNone
    With rge.Borders(xlEdgeLeft)
        If leftWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = leftWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeTop)
        If topWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = topWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeBottom)
        If bottomWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = bottomWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeRight)
        If rightWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = rightWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlInsideVertical)
        If vWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = vWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlInsideHorizontal)
        If hWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = hWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
End Sub
'set border
'
'10.12.1 LSQ based on mdlSeparation (also used in MdlNum2Cate, mdlCrsTbl)
'code may diff between Excel Versions
'10.12.7 LSQ add "Public"
'
Public Sub SetRangeBorderA(ByVal rge As Range, _
                           ByVal wtLeft As XlBorderWeight, ByVal wtTop As XlBorderWeight, _
                           ByVal wtRight As XlBorderWeight, ByVal wtBottom As XlBorderWeight)
    If getExcelVerNo() >= 12 Then 'for Excel2010, Excel2007
        rge.Select
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .colorIndex = 0
            .TintAndShade = 0
            .Weight = wtTop
        End With
        
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .colorIndex = 0
            .TintAndShade = 0
            .Weight = wtLeft
        End With
        
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .colorIndex = 0
            .TintAndShade = 0
            .Weight = wtBottom
        End With
        
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .colorIndex = 0
            .TintAndShade = 0
            .Weight = wtRight
        End With
    Else 'sometimes error 1004 when Run on Excel2010, Excel2007
        rge.Borders(xlEdgeTop).Weight = wtTop
        rge.Borders(xlEdgeLeft).Weight = wtLeft
        rge.Borders(xlEdgeBottom).Weight = wtBottom
        rge.Borders(xlEdgeRight).Weight = wtRight
    End If
End Sub
'=== EOF ===
Attribute VB_Name = "mdlCrsTbl"
'=======================================================
' SSS_SRK Ver3.0 (Cross Tabulation Table)
'
' 2008.07 WZH
'=======================================================
Option Explicit

Private Const MAXITEMNUM As Integer = 50
Private Const MAXCATENUM As Integer = 200
Private Const MINCLSSMPNUM As Integer = 2

Private Const ERR_NULLOUT As String = "|fffd|o|fffd||354||348||34e|w|fffd||80aa||fffd||d74c2||142||fffd||fffd|B"
Private Const ERR_OVERITEMNUM As String = "|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B "
Private Const ERR_OVERCATENUM As String = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
Private Const ERR_NUMDATA As String = "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
Private Const ERR_CLSSMPNUM As String = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||702||fffd|"
Private Const ERR_INPUTVAL  As String = "|fffd||fffd||fffd||352|l|fffd||fffd||fffd||64f||fffd||142||fffd||fffd|B"
Private Const ERR_INTERNAL As String = "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd|N|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B"

Private Const DATA_UNCERTAIN    As String = "-"
Private Const STR_UNCERTAIN As String = "|fffd|s|fffd||fffd|"

Type CrsTbl_T
    rgeClass As Range
    rgeItem As Range
    RgeCateName As Range
    RgeOut As Range
    bNewSheet As Boolean
    bOutNTbl As Boolean
    bOutHTbl As Boolean
    bOutVTbl As Boolean
    bOutUnk As Boolean
    bOutAll As Boolean
    bMA As Boolean
    ClassCol As Collection
    ItemCol() As Collection
    UniqueCount As Collection
    maxClsCnt As Integer
    minClsCnt As Integer
    itemCnt() As Integer
End Type

Private Function MoveUnknown(ByRef oCollection As Collection) As Long
    Dim i As Long, lInx As Long, lLast As Long
    Dim vTempItem As Variant
    
    On Error GoTo ErrFailed
    lLast = oCollection.Count
    lInx = 1
    For i = 1 To oCollection.Count
        'If oCollection(lInx).Key = DATA_UNCERTAIN Then
        If Not IsNumeric(oCollection(lInx).Key) Then
            'Store the items
            If VarType(oCollection(lInx)) = vbObject Then
                Set vTempItem = oCollection(lInx)
            Else
                vTempItem = oCollection(lInx)
            End If
            
            'Swap the items over
            oCollection.Add vTempItem, , , lLast '10.11.30 DZH mdf,old: oCollection.Add vTempItem, , lLast
            'Delete the original items
            oCollection.Remove lInx               '10.11.30 DZH mdf,old:oCollection.Remove lInx + 1
        Else
            lInx = i + 1
        End If
    Next
    Exit Function

ErrFailed:
    MoveUnknown = Err.Number
    On Error GoTo 0
End Function

Private Function CollectionSort(ByRef oCollection As Collection, Optional bSortAscending As Boolean = True) As Long
    Dim lSort1 As Long, lSort2 As Long
    Dim vTempItem1 As Variant, vTempItem2 As Variant, bSwap As Boolean
    Dim v1 As Double, v2 As Double
    
    On Error GoTo ErrFailed
    For lSort1 = 1 To oCollection.Count - 1
        For lSort2 = lSort1 + 1 To oCollection.Count
            If IsNumeric(oCollection(lSort1).name) And IsNumeric(oCollection(lSort2).name) Then
                v1 = val(oCollection(lSort1).name)
                v2 = val(oCollection(lSort2).name)
                If bSortAscending Then
                    If v1 > v2 Then
                        bSwap = True
                    Else
                        bSwap = False
                    End If
                Else
                    If v1 < v2 Then
                        bSwap = True
                    Else
                        bSwap = False
                    End If
                End If
            Else
                If bSortAscending Then
                    If oCollection(lSort1).name > oCollection(lSort2).name Then
                        bSwap = True
                    Else
                        bSwap = False
                    End If
                Else
                    If oCollection(lSort1).name < oCollection(lSort2).name Then
                        bSwap = True
                    Else
                        bSwap = False
                    End If
                End If
            End If
            If bSwap Then
                'Store the items
                If VarType(oCollection(lSort1)) = vbObject Then
                    Set vTempItem1 = oCollection(lSort1)
                Else
                    vTempItem1 = oCollection(lSort1)
                End If
                
                If VarType(oCollection(lSort2)) = vbObject Then
                    Set vTempItem2 = oCollection(lSort2)
                Else
                    vTempItem2 = oCollection(lSort2)
                End If
                
                'Swap the items over
                oCollection.Add vTempItem1, , lSort2
                oCollection.Add vTempItem2, , lSort1
                'Delete the original items
                oCollection.Remove lSort1 + 1
                oCollection.Remove lSort2 + 1
            End If
        Next
    Next
    Exit Function

ErrFailed:
    CollectionSort = Err.Number
    On Error GoTo 0
End Function

Private Sub SetMem(crstbl As CrsTbl_T, itemNum As Integer)
    Dim i As Integer
    Set crstbl.ClassCol = New Collection
    ReDim crstbl.ItemCol(1 To itemNum)
    For i = 1 To itemNum
        Set crstbl.ItemCol(i) = New Collection
    Next i
    Set crstbl.UniqueCount = New Collection
    ReDim crstbl.itemCnt(1 To itemNum)
End Sub

Private Sub FreeMem(crstbl As CrsTbl_T)
    Dim i As Integer
    Set crstbl.ClassCol = Nothing
    For i = 1 To UBound(crstbl.ItemCol)
        Set crstbl.ItemCol(i) = Nothing
    Next i
    ReDim crstbl.ItemCol(0)
    Set crstbl.UniqueCount = Nothing
    ReDim crstbl.itemCnt(0)
End Sub

'get category count
Private Function GetUniqueCount(crstbl As CrsTbl_T) As Integer
    Dim rgeClass As Range, rge As Range
    Dim r As Range, o As Range
    Dim t As Integer
    Dim tt As Classify
    Dim maxCnt  As Long, minCnt  As Long, catCnt As Long
    Dim i As Integer, j As Integer
    Dim k As Long, l As Long
    Dim dataClass As Variant, dataItem As Variant
    Dim Str As String, strClass As String, strItem As String, strKey As String, strClassKey As String
    Dim ClassCol, ItemCol, UniqueCount As Collection
    Dim v As Variant
    
    Set rgeClass = crstbl.rgeClass
    Set ClassCol = crstbl.ClassCol
    Set UniqueCount = crstbl.UniqueCount
    
    Application.Volatile
    On Error Resume Next
    Set rge = Range(rgeClass(2, 1), rgeClass(rgeClass.Rows.Count, rgeClass.Columns.Count))
    dataClass = rge.Value
    Set rgeClass = crstbl.rgeItem
    Set rge = Range(rgeClass.Range("A1")(2, 1), rgeClass.Range("A1")(rgeClass.Rows.Count, crstbl.rgeItem.Columns.Count))
    dataItem = rge.Value
    
    For i = 1 To rgeClass.Rows.Count - 1
        strClass = Trim(CStr(dataClass(i, 1)))
        If strClass <> "" And (IsNumeric(strClass) Or crstbl.bOutUnk) Then              '2013.10.17 added <> ""
            Str = strClass
            strClassKey = strClass
            'If strClass = DATA_UNCERTAIN Then
            '    strClass = STR_UNCERTAIN
            'End If
            For j = 1 To crstbl.rgeItem.Columns.Count
                Set ItemCol = crstbl.ItemCol(j)
                strItem = Trim(CStr(dataItem(i, j)))
                If crstbl.bMA Then
                    v = Split(strItem, ",")
                Else
                    v = Array(strItem)
                End If
                For k = LBound(v) To UBound(v)
                    strItem = v(k)
                    If strItem <> "" And (IsNumeric(strItem) Or crstbl.bOutUnk) Then    '2013.10.17 added <> ""
                        If k = LBound(v) Then
                            Set tt = ClassCol.Item(strClassKey)
                            If tt Is Nothing Then
                                Set tt = New Classify
                                tt.Key = strClassKey
                                tt.name = strClass
                                Call tt.AddValue(i)
                                ClassCol.Add tt, strClassKey
                            Else
                                Call tt.AddValue(i)
                            End If
                        End If
                        
                        'If strItem = DATA_UNCERTAIN Then
                        '    strItem = STR_UNCERTAIN
                        '    strKey = DATA_UNCERTAIN
                        'Else
                            strKey = strItem
                        'End If
    
                        Set tt = Nothing
                        Set tt = ItemCol.Item(strKey)
                        If tt Is Nothing Then
                            Set tt = New Classify
                            tt.Key = strKey
                            tt.name = strItem
                            Call tt.AddValue(i)
                            ItemCol.Add tt, strKey
                        Else
                            Call tt.AddValue(i)
                        End If
                        Set tt = Nothing
                        Str = j & "-" & strClassKey & strKey
                        Set tt = UniqueCount.Item(Str)
                        If tt Is Nothing Then
                            Set tt = New Classify
                            tt.Key = Str
                            tt.name = Str
                            Call tt.AddValue(i)
                            UniqueCount.Add tt, Str
                        Else
                            Call tt.AddValue(i)
                        End If
                        Set tt = Nothing
                    End If
                Next k
                crstbl.itemCnt(j) = ItemCol.Count
            Next j
        End If
    Next i
    
    minCnt = UniqueCount(1).cnt
    maxCnt = minCnt
    For i = 2 To UniqueCount.Count
        Set tt = UniqueCount(i)
        If tt.cnt > maxCnt Then maxCnt = tt.cnt
        If tt.cnt < minCnt Then minCnt = tt.cnt
    Next i
    
    crstbl.maxClsCnt = maxCnt
    crstbl.minClsCnt = minCnt
    For i = 1 To UBound(crstbl.ItemCol)
        catCnt = catCnt + crstbl.ItemCol(i).Count
    Next i
    CollectionSort crstbl.ClassCol
    MoveUnknown crstbl.ClassCol
    For i = 1 To UBound(crstbl.ItemCol)
        CollectionSort crstbl.ItemCol(i)
        MoveUnknown crstbl.ItemCol(i)
    Next i
    GetUniqueCount = catCnt
    On Error GoTo 0
End Function

'check input
Private Function checkData(crstbl As CrsTbl_T) As Boolean
    Dim itemNum As Integer, smpNum As Integer, minClsCnt As Integer
    Dim newSht As Worksheet
    Dim rge As Range
    Dim i, j As Integer
    If crstbl.rgeItem Is Nothing Then
       checkData = False
       Exit Function
    End If
    itemNum = crstbl.rgeItem.Columns.Count
    smpNum = crstbl.rgeItem.Rows.Count
    If itemNum > MAXITEMNUM Then
        checkData = False
        Call MsgBox(ERR_OVERITEMNUM & MAXITEMNUM, vbCritical, "Error")
        Exit Function
    End If
    
    Set rge = Range(crstbl.rgeItem.Range("A1")(2, 1), crstbl.rgeItem.Range("A1")(smpNum, itemNum))
    If crstbl.bNewSheet Then
        Set newSht = crstbl.rgeItem.Worksheet.Parent.Worksheets.Add
        Set crstbl.RgeOut = newSht.Range("A1")
    ElseIf crstbl.RgeOut Is Nothing Then
        checkData = False
        Call MsgBox(ERR_NULLOUT, vbCritical, "Error")
        Exit Function
    End If
    Call SetMem(crstbl, itemNum)
    If Not crstbl.rgeClass Is Nothing Then
        itemNum = GetUniqueCount(crstbl)
        minClsCnt = crstbl.minClsCnt
        If itemNum > MAXCATENUM Or itemNum < 1 Or minClsCnt < 0 Then
            If crstbl.bNewSheet Then
                Application.DisplayAlerts = False
                crstbl.RgeOut.Worksheet.Delete
                crstbl.rgeItem.Cells(1, 1).Select
                Application.DisplayAlerts = True
            End If
            Call FreeMem(crstbl)
            
            checkData = False
            If itemNum < 1 Then
                Call MsgBox(ERR_NUMDATA, vbCritical, "Error")
            ElseIf itemNum > MAXCATENUM Then
                Call MsgBox(ERR_OVERCATENUM & MAXCATENUM, vbCritical, "Error")
            Else
                Call MsgBox(ERR_CLSSMPNUM & MINCLSSMPNUM, vbCritical, "Error")
            End If
            Exit Function
        End If
    End If
    checkData = True
End Function

#If False Then '10.12.1 LSQ cmt : use SetRangeBorderA() in mdlCommon
Private Sub SetRangeBorderA(ByVal rge As Range, _
                           ByVal wtLeft As XlBorderWeight, ByVal wtTop As XlBorderWeight, _
                           ByVal wtRight As XlBorderWeight, ByVal wtBottom As XlBorderWeight)
    rge.Borders(xlEdgeTop).Weight = wtTop
    rge.Borders(xlEdgeLeft).Weight = wtLeft
    rge.Borders(xlEdgeBottom).Weight = wtBottom
    rge.Borders(xlEdgeRight).Weight = wtRight
End Sub
#End If

Private Sub OutSide(ByVal flg As Integer, ByVal bOutAll As Boolean, ByVal RgeOut As Range, crstbl As CrsTbl_T)
    Dim i, j As Integer
    Dim scol As Long, srow As Long
    Dim added As Integer
    Dim totalcnt As Integer
    If bOutAll Then
        scol = 3
        srow = 4
        added = 1
    Else
        scol = 2
        added = 0
        srow = 3
    End If
    If flg = 1 Then
        RgeOut(1, 1) = "|fffd||fffd|n|fffd|\"
        RgeOut(srow + 1, 1) = crstbl.rgeClass(1, 1)
        If bOutAll Then
            RgeOut(srow, 2) = "|fffd|c|fffd|v"
            RgeOut(3, scol) = "|fffd||fffd||fffd|v"
        End If
    ElseIf flg = 2 Then
        RgeOut(1, 1) = "|fffd||fffd|%|fffd|\"
        RgeOut(srow + 1, 1) = crstbl.rgeClass(1, 1)
        If bOutAll Then
            RgeOut(srow, 2) = "|fffd|c|fffd|v"
            RgeOut(3, scol) = "|fffd||fffd||fffd|v"
        End If
    ElseIf flg = 3 Then
            RgeOut(1, 1) = "|fffd||fffd||fffd|c%|fffd|\"
            RgeOut(srow + 1, 1) = crstbl.rgeClass(1, 1)
            If bOutAll Then
                RgeOut(srow, 2) = "|fffd|c|fffd|v"
                RgeOut(3, scol) = "|fffd||fffd||fffd|v"
            End If
    End If
    
    totalcnt = 0
    For i = 1 To crstbl.ClassCol.Count
        totalcnt = totalcnt + crstbl.ClassCol.Item(i).cnt
    Next i
    
    If bOutAll Then RgeOut(srow, 3) = IIf(flg = 1, totalcnt, 100#)
    For i = 1 To crstbl.ClassCol.Count
        If IsNumeric(crstbl.ClassCol.Item(i).name) And Not crstbl.RgeCateName Is Nothing Then
            RgeOut(i + srow, 2) = crstbl.RgeCateName(val(crstbl.ClassCol.Item(i).name), 1)
        Else
            RgeOut(i + srow, 2) = crstbl.ClassCol.Item(i).name
        End If
        If bOutAll Then
             If flg = 1 Then
                  RgeOut(i + srow, 3) = crstbl.ClassCol.Item(i).cnt
             ElseIf flg = 2 Then
                  RgeOut(i + srow, 3) = 100#
             ElseIf flg = 3 Then
                  RgeOut(i + srow, 3) = crstbl.ClassCol.Item(i).cnt * 100# / totalcnt
             End If
        End If
    Next i
    If flg <> 1 Then 'not n table
        Range(RgeOut(srow, 3), RgeOut(srow + crstbl.ClassCol.Count, 3)).NumberFormatLocal = "0.0"
    End If

    For i = 1 To crstbl.ClassCol.Count + 1 + added
        For j = 1 To 2
            Call SetRangeBorderA(RgeOut(2 + i, j + 1), xlThin, xlThin, xlThin, xlThin)
        Next j
    Next i
    Call SetRangeBorderA(Range(RgeOut(srow + 1, 1), RgeOut(srow + 1 + crstbl.ClassCol.Count - 1, 1)), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorderA(Range(RgeOut(2, 1), RgeOut(srow, scol)), xlThin, xlThin, xlThin, xlThin)
End Sub

Private Sub OutCrsTbl(ByVal itemInx As Long, ByVal flg As Integer, ByVal bOutAll As Boolean, ByVal RgeOut As Range, crstbl As CrsTbl_T)
    Dim i, j, k As Long
    Dim scol As Long, srow As Long
    Dim Str As String
    Dim cnt As Long, totalcnt As Long
    Dim added As Integer
    Dim bkRge As Range
    On Error Resume Next
    Set bkRge = RgeOut
    If bOutAll Then
        scol = 0
        srow = 4
        added = 1
    Else
        scol = 0
        added = 0
        srow = 3
    End If
    Set RgeOut = RgeOut(1, scol + added + 3)
    ReDim classSum(1 To crstbl.ClassCol.Count)
    For k = 1 To crstbl.rgeItem.Columns.Count
        If Not crstbl.bOutUnk Then
            Call crstbl.ItemCol(k).Remove(STR_UNCERTAIN)
            Err.Clear
        End If
        If flg = 1 Then
            RgeOut(2, scol + 1) = crstbl.rgeItem.Range("A1")(1, k)
            totalcnt = 0
            For i = 1 To crstbl.ClassCol.Count
                For j = 1 To crstbl.ItemCol(k).Count
                    If IsNumeric(crstbl.ItemCol(k).Item(j).name) And Not crstbl.RgeCateName Is Nothing Then
                        RgeOut(3, j + scol) = crstbl.RgeCateName(val(crstbl.ItemCol(k).Item(j).name), itemInx + 1)
                    Else
                        RgeOut(3, j + scol) = crstbl.ItemCol(k).Item(j).name
                    End If
                    If bOutAll Then
                        RgeOut(srow, j + scol) = crstbl.ItemCol(k).Item(j).cnt
                    End If
                    Str = k & "-" & crstbl.ClassCol.Item(i).Key & crstbl.ItemCol(k).Item(j).Key
                    cnt = crstbl.UniqueCount.Item(Str).cnt
                    If Err.Number <> 0 Then
                        Err.Clear
                        cnt = 0
                    End If
                    RgeOut(i + srow, j + scol) = cnt
                    totalcnt = totalcnt + cnt
                Next j
            Next i
        ElseIf flg = 2 Then
            RgeOut(2, scol + 1) = crstbl.rgeItem.Range("A1")(1, k)
            totalcnt = 0
            For i = 1 To crstbl.ClassCol.Count
                For j = 1 To crstbl.ItemCol(k).Count
                    If IsNumeric(crstbl.ItemCol(k).Item(j).name) And Not crstbl.RgeCateName Is Nothing Then
                        RgeOut(3, j + scol) = crstbl.RgeCateName(val(crstbl.ItemCol(k).Item(j).name), itemInx + 1)
                    Else
                        RgeOut(3, j + scol) = crstbl.ItemCol(k).Item(j).name
                    End If
                    Str = k & "-" & crstbl.ClassCol.Item(i).Key & crstbl.ItemCol(k).Item(j).Key
                    cnt = crstbl.UniqueCount.Item(Str).cnt
                    If Err.Number <> 0 Then
                        Err.Clear
                        cnt = 0
                    End If
                    RgeOut(i + srow, j + scol) = 100# * cnt / crstbl.ClassCol.Item(i).cnt
                Next j
                totalcnt = totalcnt + crstbl.ClassCol.Item(i).cnt
            Next i
            If bOutAll Then
                For i = 1 To crstbl.ItemCol(k).Count
                    RgeOut(srow, i + scol) = 100# * crstbl.ItemCol(k).Item(i).cnt / totalcnt
                Next i
            End If
        ElseIf flg = 3 Then
            RgeOut(2, scol + 1) = crstbl.rgeItem.Range("A1")(1, k)
            totalcnt = 0
            For i = 1 To crstbl.ClassCol.Count
                For j = 1 To crstbl.ItemCol(k).Count
                    If IsNumeric(crstbl.ItemCol(k).Item(j).name) And Not crstbl.RgeCateName Is Nothing Then
                        RgeOut(3, j + scol) = crstbl.RgeCateName(val(crstbl.ItemCol(k).Item(j).name), itemInx + 1)
                    Else
                        RgeOut(3, j + scol) = crstbl.ItemCol(k).Item(j).name
                    End If
                    If bOutAll Then
                        RgeOut(srow, j + scol) = 100#
                    End If
                    Str = k & "-" & crstbl.ClassCol.Item(i).Key & crstbl.ItemCol(k).Item(j).Key
                    cnt = crstbl.UniqueCount.Item(Str).cnt
                    If Err.Number <> 0 Then
                        Err.Clear
                        cnt = 0
                    End If
                    RgeOut(i + srow, j + scol) = 100# * cnt / crstbl.ItemCol(k).Item(j).cnt
                    totalcnt = totalcnt + cnt
                Next j
            Next i
        End If
        For i = 1 To crstbl.ClassCol.Count + 1 + added
            For j = 1 To crstbl.ItemCol(k).Count
                Call SetRangeBorderA(RgeOut(2 + i, j), xlThin, xlThin, xlThin, xlThin)
            Next j
        Next i
        Call SetRangeBorderA(Range(RgeOut(2, scol + 1), RgeOut(2, scol + 1 + crstbl.ItemCol(k).Count - 1)), xlThin, xlThin, xlThin, xlThin)
        If flg = 1 Then
            Range(RgeOut(4, scol + 1), RgeOut(srow + 1 + crstbl.ClassCol.Count - 1, scol + 1 + crstbl.ItemCol(k).Count - 1)).NumberFormat = "General"
        Else
            Range(RgeOut(4, scol + 1), RgeOut(srow + 1 + crstbl.ClassCol.Count - 1, scol + 1 + crstbl.ItemCol(k).Count - 1)).NumberFormatLocal = "0.0"
        End If
        Set RgeOut = RgeOut(1, crstbl.ItemCol(k).Count + 1)
    Next k
    Call OutSide(flg, bOutAll, bkRge, crstbl)
    On Error GoTo 0
End Sub

Private Sub SetUnknown()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.Sheets("DlgCrsTab")
    If dlg.CheckBoxes("chkHTbl").Value = xlOn Then
        dlg.CheckBoxes("chkUnk").Enabled = True
    Else
        dlg.CheckBoxes("chkUnk").Value = xlOff
        dlg.CheckBoxes("chkUnk").Enabled = False
    End If
End Sub

'main entrance for procedure
Sub IS_MTHR_CRSTBL_VBA()
    Dim crstbl As CrsTbl_T
    Dim rge As Range, rgeGrp As Range, rgeItem As Range, RgeOut As Range
    Dim OutR As Range, RgeCateName As Range
    Dim cht As Chart
    Dim itemCnt As Long, smpCnt As Long
    Dim i As Long, j As Long
    Dim dlg As DialogSheet
    Dim Ret As Boolean
    Dim Str As String
    Dim cnt As Long, totalcnt As Long
    
    On Error Resume Next
    Set dlg = ThisWorkbook.Sheets("DlgCrsTab")
    dlg.CheckBoxes("chkHTbl").OnAction = "SetUnknown"
    SetUnknown
redisp:
    Set crstbl.rgeClass = Nothing
    Set crstbl.rgeItem = Nothing
    Set crstbl.RgeOut = Nothing
    
    Call SaveDlg(dlg)   '08.12.29 LSQ
    Ret = dlg.Show
    If Ret Then
        Call SaveDlg(dlg)
        Set crstbl.rgeClass = Range(dlg.EditBoxes("RgeClassData").Text)
        Set crstbl.rgeItem = Range(dlg.EditBoxes("RgeItemData").Text)
        Set crstbl.RgeCateName = Range(dlg.EditBoxes("RgeCateName").Text)
        Set crstbl.RgeOut = Range(dlg.EditBoxes("RgeDataOut").Text)
        crstbl.bNewSheet = IIf(dlg.OptionButtons("optNewSheet").Value = xlOn, True, False)
        crstbl.bOutNTbl = True 'IIf(dlg.CheckBoxes("chkNTbl").Value = xlOn, True, False)
        crstbl.bOutHTbl = True 'IIf(dlg.CheckBoxes("chkHTbl").Value = xlOn, True, False)
        crstbl.bOutVTbl = False 'crstbl.bOutHTbl 'IIf(dlg.CheckBoxes("chkVTbl").Value = xlOn, True, False)
        crstbl.bOutUnk = IIf(dlg.OptionButtons("optInclude").Value = xlOn, True, False)
        crstbl.bOutAll = IIf(dlg.CheckBoxes("chkAll").Value = xlOn, False, True)
        crstbl.bMA = IIf(dlg.OptionButtons("optMA").Value = xlOn, True, False)
        If Not crstbl.rgeClass Is Nothing Then
            If crstbl.rgeClass.Columns.Count > 1 Then
                MsgBox "|fffd|\|fffd||fffd||fffd||fffd||fffd||682||341|A|fffd||fffd||fffd||fffd||fffd|w|fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
                GoTo redisp
            End If
        End If
        Set rgeItem = crstbl.rgeItem
        Set RgeOut = crstbl.RgeOut
        For i = 1 To rgeItem.Columns.Count
            Set crstbl.rgeItem = rgeItem.Columns(i)
            'Set crstbl.rgeOut = rgeOut
            Ret = checkData(crstbl)
            If Not Ret Then
                GoTo redisp
            End If
            Set rge = crstbl.RgeOut(1, 1)
            rge.Worksheet.Activate
            Set OutR = rge
            If crstbl.bOutNTbl Then
                Call OutCrsTbl(i, 1, crstbl.bOutAll, OutR, crstbl)
                'Set rge = rge.Offset(crstbl.ClassCol.Count + IIf(crstbl.bOutAll, 5, 4), 0)
                Set OutR = OutR.Offset(0, crstbl.ItemCol(1).Count + IIf(crstbl.bOutAll, 4, 3))
            End If
            If crstbl.bOutHTbl Then
                Call OutCrsTbl(i, 2, crstbl.bOutAll, OutR, crstbl)
                'Set rge = rge.Offset(crstbl.ClassCol.Count + IIf(crstbl.bOutAll, 5, 4), 0)
                Set OutR = OutR.Offset(0, crstbl.ItemCol(1).Count + IIf(crstbl.bOutAll, 4, 3))
            End If
            If crstbl.bOutVTbl Then
                Call OutCrsTbl(i, 3, crstbl.bOutAll, OutR, crstbl)
                'Set rge = rge.Offset(crstbl.ClassCol.Count + IIf(crstbl.bOutAll, 5, 4), 0)
                Set OutR = OutR.Offset(0, crstbl.ItemCol(1).Count + IIf(crstbl.bOutAll, 4, 3))
            End If
            'crstbl.rgeOut(1, 1).Select
            Set rge = rge.Offset(crstbl.ClassCol.Count + IIf(crstbl.bOutAll, 5, 4), 0)
            Set crstbl.RgeOut = rge
            Call FreeMem(crstbl)
        Next i
        RgeOut.Select
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
Attribute VB_Name = "mdlFile"
Option Explicit

Const ForReading = 1
Const ForWriting = 2
Const ForAppending = 8
Const TristateUseDefault = -2
Const TristateTrue = -1
Const TristateFalse = 0

Function bFileExist(sFilePathAndName) As Boolean
    Dim fso, s
    Set fso = CreateObject("Scripting.FileSystemObject")
    s = fso.FileExists(sFilePathAndName)
    Set fso = Nothing
    bFileExist = s
End Function

Function ShowExtensionName(fileSpec) As String
    Dim fso, s
    Set fso = CreateObject("Scripting.FileSystemObject")
    s = fso.GetExtensionName(fileSpec)
    Set fso = Nothing
    ShowExtensionName = s
End Function

Sub WriteFile(sFilePathAndName, sFileContents)
#If 1 Then
    Dim oFS
    Dim oFSFile
    
    Set oFS = CreateObject("Scripting.FileSystemObject")
    Set oFSFile = oFS.OpenTextFile(sFilePathAndName, ForWriting, True, TristateTrue)
    
    oFSFile.Write (sFileContents)
    oFSFile.Close
    
    Set oFSFile = Nothing
    Set oFS = Nothing
#Else
   Dim bytes() As Byte
   Dim fnum As Integer
   With CreateObject("ADODB.Stream")
        .Open
        .Type = 2
        .Charset = "UTF-8"
        .WriteText sFileContents
        '.SaveToFile sFilePathAndName, 2
        .Position = 0
        .Type = 1
        .Position = 2
        bytes = .Read()
        .Close
    End With
    bytes(0) = &H20
    ' Open the file.
    fnum = FreeFile
    Open sFilePathAndName For Binary Access Write As #fnum
    Put #fnum, 1, bytes
    Close fnum
#End If
End Sub

Function ReadFile(sFilePathAndName, Optional ByVal bUnicode As Integer = TristateTrue)

    Dim sFileContents
    
#If 1 Then
    Dim oFS
    Dim oFSFile
    
    Set oFS = CreateObject("Scripting.FileSystemObject")
    
    If oFS.FileExists(sFilePathAndName) = True Then
       Set oFSFile = oFS.OpenTextFile(sFilePathAndName, ForReading, False, bUnicode)
       
       sFileContents = oFSFile.ReadAll
       oFSFile.Close
       
       Set oFSFile = Nothing
       Set oFS = Nothing
    End If
    
    Set oFS = Nothing
#Else
    With CreateObject("ADODB.Stream")
        .Open
        .Type = 2
       ' .Charset = IIf(bUnicode = TristateTrue, "unicode", "iso-8859-1")
        .Charset = IIf(bUnicode = TristateTrue, "unicode", "Shift_JIS")
        .LoadFromFile sFilePathAndName
        sFileContents = .ReadText '
        .Close
    End With
#End If

    ReadFile = sFileContents
       
End Function

Sub DeleteFile(sFilePathAndName)
    Dim oFS
  
    Set oFS = CreateObject("Scripting.FileSystemObject")
    If oFS.FileExists(sFilePathAndName) = True Then
        Call oFS.DeleteFile(sFilePathAndName, True)
    End If
    
    Set oFS = Nothing
End Sub

Function bFolderExist(sFolderName As String) As Boolean
    Dim fso, s
    Set fso = CreateObject("Scripting.FileSystemObject")
    s = fso.FolderExists(sFolderName)
    Set fso = Nothing
    bFolderExist = s
End Function

Function bFolderWriteable(sFolderName As String) As Boolean
    Dim tmpfile As String
    If bFolderExist(sFolderName) Then
        On Error Resume Next
        tmpfile = sFolderName & "\writeable"
        WriteFile tmpfile, "just test"
        If Err.Number <> 0 Then
            bFolderWriteable = False
        Else
            bFolderWriteable = True
            DeleteFile tmpfile
        End If
    Else
        bFolderWriteable = False
    End If
End Function

Function ConvToUTF8(ByVal Str As String) As Byte()
    Dim dst
    Dim bytes() As Byte
    Set dst = CreateObject("ADODB.Stream")
    With dst
        .Open
        .Type = 2
        .Charset = "UTF-8"
        .WriteText Str
        .Position = 0
        .Type = 1
        .Position = 2
        bytes = .Read()
    End With
    bytes(0) = &H20
    ConvToUTF8 = bytes
    dst.Close
    Set dst = Nothing
End Function

Function bValidFileName(ByVal sFilePathAndName As String) As Boolean
    Dim fso, s
    On Error GoTo err_handler
    Set fso = CreateObject("Scripting.FileSystemObject")
    s = fso.GetFileName(sFilePathAndName)
    bValidFileName = fso.FolderExists(Mid(sFilePathAndName, 1, InStrRev(sFilePathAndName, s) - 1))
exit_func:
    Set fso = Nothing
    Exit Function
err_handler:
    bValidFileName = False
    Resume exit_func
End Function

Function SaveBinaryData(filename, ByteArray)
  Const adTypeBinary = 1
  Const adSaveCreateOverWrite = 2
  
  'Create Stream object
  Dim BinaryStream
  Set BinaryStream = CreateObject("ADODB.Stream")
  
  'Specify stream type - binary data.
  BinaryStream.Type = adTypeBinary
  
  'Open the stream and write binary data to the object
  BinaryStream.Open
  BinaryStream.Write ByteArray
  
  'Save binary data to disk
  BinaryStream.SaveToFile filename, adSaveCreateOverWrite
End Function

Attribute VB_Name = "mdlInsi"
'=======================================================
' |fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|
'
' 09.04 WZH
'=======================================================
Option Private Module
Option Explicit

Type paratbl
    DataRge As String * 256
    Except As Long
    FactorNum As Long
    method As Long
    InitValue As Long
    Repeat As Long
    Rotation As Long
    KValue As Double
    ScoreShow As Long
    ScoreMethod As Long
    Predict As Long
    PredictRge As String * 256
    SmpName As Long
    SmpNameRge As String * 256
    FactorLoad As Double
    OrderAsc As Long
    AttrShow As Long
    AttrDataRge As String * 256
    CateName As Long
    AttrCateRge As String * 256
    ScoreGrp As Long
    XAxis As Long
    YAxis As Long
    GrpCateDisp As Long
    GrpSmpNameDisp As Long
    txtLen As Long
End Type

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private insitbl As paratbl

#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function fMinsi_vba Lib "MTHR_C_ISTC_64.dll" (ByVal nid As Long, insitbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #Else
        Private Declare Function fMinsi_vba Lib "MTHR_C_ISTC_64.dll" (ByVal nid As Long, insitbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function fMinsi_vba Lib "MTHR_C_ISTC.dll" (ByVal nid As Long, insitbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #Else
        Private Declare Function fMinsi_vba Lib "MTHR_C_ISTC.dll" (ByVal nid As Long, insitbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #End If
#End If

'|fffd||3d0||fffd||fffd|I|fffd||fffd|
Private Sub InsiGetVarSel()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim RgeVar As Range
    Dim valvar As Variant
    Dim savLabelA As String, savLabelB As String
    
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgInsi")
    Set RgeVar = Range(dlg.EditBoxes("edtDataRge").Text)
    Set RgeVar = Range(RgeVar(1, 1), RgeVar(1, RgeVar.Columns.Count))
    If Err.Number <> 0 Then
        Err.Clear
        m_varselect = vbNullString
        On Error GoTo 0
        Exit Sub
    End If
    valvar = RgeVar.Value()
    For i = 1 To RgeVar.Columns.Count
        m_varselect = m_varselect & "," & valvar(1, i)
    Next i
        
    'save
    savLabelA = frmVarSel.Label1.Caption
    savLabelB = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|"
    frmVarSel.Label2.Caption = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|"
    
    m_varselect = VarSelect(Mid(m_varselect, 2))
    
    'recovery
    frmVarSel.Label1.Caption = savLabelA
    frmVarSel.Label2.Caption = savLabelB
    
    On Error GoTo 0
End Sub
'
'|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A : |fffd|\|fffd||fffd|
Private Sub InsiCtrlMacro_ScorePredict()
    Call CommSetEditBox_byChk("DlgInsi", "chkPredict", "objDataRef")
    Call CommSetEditBox_byChk("DlgInsi", "chkPredict", "edtPredictRge")
End Sub
'
'|fffd||5368e||483||fffd||fffd|x|fffd||fffd||fffd||315|\|fffd||fffd|
Private Sub InsiCtrlMacro_SmpName()
    Call CommSetEditBox_byOpt("DlgInsi", "optSmpName", "edtSmpNameRge")
End Sub
'
'|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S : |fffd|\|fffd||fffd|
Private Sub InsiCtrlMacro_AttrDsp()
    Dim dlg As DialogSheet
    Dim bOn As Boolean, ChkObj As CheckBox

    Set dlg = ThisWorkbook.DialogSheets("DlgInsi")
    Set ChkObj = dlg.CheckBoxes("chkAttrShow")
    bOn = (ChkObj = xlOn)
    
    'cate name
    Set ChkObj = dlg.CheckBoxes("chkCateName")
    ChkObj.Enabled = bOn
    dlg.EditBoxes("edtAttrCate").Enabled = (bOn And ChkObj = xlOn)
       
    'data range
    Call CommSetEditBox_byChk("DlgInsi", "chkAttrShow", "edtAttrData")
End Sub
'
'|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S : |fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|\|fffd||fffd|
Private Sub InsiCtrlMacro_AttrCateName()
    Call CommSetEditBox_byChk("DlgInsi", "chkCateName", "edtAttrCate")
End Sub
'
'
Private Sub InsiCtrlMacro_ScoreShow()
    Dim dlg As DialogSheet
    Dim bOn As Boolean

    Set dlg = ThisWorkbook.DialogSheets("DlgInsi")
    bOn = (dlg.CheckBoxes("chkScoreShow") = xlOn)
    
    dlg.CheckBoxes("chkPredict").Enabled = bOn
    dlg.OptionButtons("optScoreMethod1").Enabled = bOn
    dlg.OptionButtons("optScoreMethod2").Enabled = bOn
End Sub
'
'
Private Sub InsiCtrlMacro_ScoreGrp()
    Dim dlg As DialogSheet
    Dim bOn As Boolean

    Set dlg = ThisWorkbook.DialogSheets("DlgInsi")
    bOn = (dlg.CheckBoxes("chkScoreGrp") = xlOn)
    
    dlg.CheckBoxes("chkGrpCateDisp").Enabled = bOn
    dlg.CheckBoxes("chkGrpSmpNameDisp").Enabled = bOn
    dlg.EditBoxes("edtXAxis").Enabled = bOn
    dlg.EditBoxes("edtYAxis").Enabled = bOn
    dlg.EditBoxes("edtTxtLen").Enabled = bOn
End Sub
'
'
Private Sub Insi_setMacro(ByVal dlg As DialogSheet)
    'var select
    dlg.Buttons("btnVarSelect").OnAction = "InsiGetVarSel"
    
    'factor score
    dlg.CheckBoxes("chkScoreShow").OnAction = "InsiCtrlMacro_ScoreShow"
    dlg.CheckBoxes("chkPredict").OnAction = "InsiCtrlMacro_ScorePredict"
    
    'sample name
    dlg.OptionButtons("optSmpNo").OnAction = "InsiCtrlMacro_SmpName"
    dlg.OptionButtons("optSmpName").OnAction = "InsiCtrlMacro_SmpName"
    
    '|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S
    dlg.CheckBoxes("chkAttrShow").OnAction = "InsiCtrlMacro_AttrDsp"
    dlg.CheckBoxes("chkCateName").OnAction = "InsiCtrlMacro_AttrCateName"
    
    'Graph
    dlg.CheckBoxes("chkScoreGrp").OnAction = "InsiCtrlMacro_ScoreGrp"
End Sub

'
'return TRUE = OK else ERROR
'
Private Function chkInsiData() As Boolean
    Dim rgeData As Range, rgePredict As Range, RgeSmpName As Range, rgeAttr As Range, rgeAttrCateName As Range
    Dim msgStr As String
    Dim tmpi As Long, yokoNo As Long, tateNo As Long
    Dim itemNum As Long
    
    'init
    msgStr = ""

    On Error Resume Next
    Set rgeData = Range(insitbl.DataRge)
    Set rgePredict = Range(insitbl.PredictRge)
    Set RgeSmpName = Range(insitbl.SmpNameRge)
    Set rgeAttr = Range(insitbl.AttrDataRge)
    Set rgeAttrCateName = Range(insitbl.AttrCateRge)
    On Error GoTo 0
    
    If rgeData Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    itemNum = rgeData.Columns.Count
    tmpi = insitbl.FactorNum
    yokoNo = insitbl.XAxis
    tateNo = insitbl.YAxis
    If (tmpi < 2 Or tmpi > 16) Then
        msgStr = "|fffd||fffd||fffd|q|fffd||310||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If insitbl.Predict = 1 And rgePredict Is Nothing Then
        msgStr = "|fffd||fffd||fffd|q|fffd||fffd||fffd|_|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    
    '
    If insitbl.SmpName = 1 And RgeSmpName Is Nothing Then
        msgStr = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If insitbl.AttrShow = 1 And rgeAttr Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If insitbl.CateName = 1 And rgeAttrCateName Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    
    If insitbl.txtLen < 1 Or insitbl.txtLen > 128 Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|128|fffd||209||fffd||fffd||242||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
        GoTo chkEnd
    End If
    
    '
chkEnd:
    If msgStr <> "" Then
        MsgBox msgStr
        chkInsiData = False
        Exit Function
    End If
    
    '
    chkInsiData = True
End Function

Private Function SetValues(ByVal outRge As Range, ByVal Values As Variant) As Range
    Dim i As Long, j As Long, l As Long
    l = 1
    If IsArray(Values) Then
        For i = LBound(Values) To UBound(Values)
            For j = LBound(Values, 2) To UBound(Values, 2)
                outRge(l, 1).Value = Values(i, j)
                l = l + 1
            Next j
        Next i
    Else
        outRge(l, 1) = Values
        l = l + 1
    End If
    Set SetValues = Range(outRge, outRge(l - 1, 1))
End Function

Private Function handleInsiData(ByVal YskSmpName As Range) As Worksheet
    Dim i As Long, j As Long, l As Long
    Dim rgeSrc As Range, RgeObj As Range, rge As Range
    Dim RgeSmpName As Range, rgeAttrData As Range, rgeAttrName As Range
    Dim tmpRge As Range
    Dim tmpSht As Worksheet
    Dim insiobj As Variant, insivar As Variant, insicate As Variant
    Dim insiVarSel As Variant
    Dim cateNameRow As Long, CateNum As Long, smpNum As Long, itemNum As Long
    Dim attrColNum As Long
    Dim msgStr As String
    
    On Error Resume Next
    Set rgeSrc = Range(insitbl.DataRge)
    If insitbl.Predict = 1 Then
        Set RgeObj = Range(insitbl.PredictRge)
    End If
    If insitbl.SmpName = 1 Then
        Set RgeSmpName = Range(insitbl.SmpNameRge)
    End If
    If insitbl.AttrShow = 1 Then
        Set rgeAttrData = Range(insitbl.AttrDataRge)
    End If
    If insitbl.CateName = 1 Then
        Set rgeAttrName = Range(insitbl.AttrCateRge)
    End If
    smpNum = rgeSrc.Rows.Count
    itemNum = rgeSrc.Columns.Count
    Set tmpSht = rgeSrc.Worksheet.Parent.Sheets.Add
    Set rge = tmpSht.Range("$A$1")
    If RgeSmpName Is Nothing Then
        For i = 1 To smpNum - 1
            rge(i + 1, 1).Value = i
        Next i
        Set tmpRge = Range(rge(2, 1), rge(smpNum, 1))
        insitbl.SmpNameRge = toXlRCstr(tmpRge.Address & vbNullChar) & vbNullChar
    Else
        insivar = RgeSmpName.Value
        Set tmpRge = SetValues(rge(2, 1), insivar)
        insitbl.SmpNameRge = toXlRCstr(tmpRge.Address & vbNullChar) & vbNullChar
    End If
    
    If insitbl.Predict = 1 Then
        If Not YskSmpName Is Nothing Then
            SetValues rge(smpNum + 1, 1), YskSmpName.Value
            insitbl.SmpNameRge = toXlRCstr(Range(rge(2, 1), rge(smpNum + YskSmpName.Rows.Count, 1)).Address) & vbNullChar
        Else
            For i = 1 To RgeObj.Rows.Count
                rge(smpNum + i, 1) = "|fffd|\|fffd||fffd|" & i
            Next i
            insitbl.SmpNameRge = toXlRCstr(Range(rge(2, 1), rge(smpNum + RgeObj.Rows.Count, 1)).Address) & vbNullChar
        End If
    End If
    
    insitbl.SmpName = 1

    If m_varselect <> "0" Then
        insiVarSel = Split(m_varselect, ",")
    Else
        ReDim insiVarSel(0 To itemNum) As Long
        insiVarSel(0) = itemNum
        For i = 1 To itemNum
            insiVarSel(i) = i - 1
        Next i
    End If
    
    itemNum = insiVarSel(0)

    For i = 1 To smpNum
        For j = 1 To itemNum
            rge(i, j + 1) = rgeSrc(i, insiVarSel(j) + 1)
        Next j
    Next i
    insitbl.DataRge = toXlRCstr(Range(rge(1, 2), rge(smpNum, itemNum + 1)).Address & vbNullChar) & vbNullChar
    
    If Not RgeObj Is Nothing Then
        For i = 1 To RgeObj.Rows.Count
            For j = 1 To itemNum
                rge(i + smpNum, j + 1) = RgeObj(i, insiVarSel(j) + 1)
            Next j
        Next i
        insitbl.PredictRge = toXlRCstr(Range(rge(smpNum + 1, 2), rge(smpNum + RgeObj.Rows.Count, itemNum + 1)).Address & vbNullChar) & vbNullChar
    End If
    
    If Not rgeAttrData Is Nothing Then
        Set tmpRge = PasteRange(rgeAttrData, rge(1, itemNum + 2), xlPasteValues)
        insitbl.AttrDataRge = toXlRCstr(tmpRge.Address & vbNullChar) & vbNullChar
        attrColNum = tmpRge.Columns.Count
    End If
    If Not rgeAttrName Is Nothing Then
        Set tmpRge = PasteRange(rgeAttrName, rge(1, itemNum + 2 + attrColNum), xlPasteValues)
        insitbl.AttrCateRge = toXlRCstr(tmpRge.Address & vbNullChar) & vbNullChar
    End If
    Set handleInsiData = tmpSht
    On Error GoTo 0
End Function

Sub IS_MTHR_INSI()
    Dim rtn As Integer, i As Integer, grpType0 As Integer
    Dim grp(1 To maxGrpNum) As VBAGRAPH
    Dim chartName As String, grpData0 As String
    Dim para As Object
    Dim chartTitle As String
    Dim txtLen As Integer
    Dim fontsize As Integer
    Dim bSmpName As Integer
    Dim predictNum As Integer
    Dim nExcelVer As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet
    Dim nid As Long
    Dim YskSmpName As Range
    
    On Error Resume Next
    
    nid = IIf(isTrialVer, 0, 1)
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    Call InitGrpAry(grp())
    nExcelVer = 12  '09.6 PYJ old:getExcelVerNo()
    
    Set dlg = ThisWorkbook.DialogSheets("DlgInsi")
    
    Call Insi_setMacro(dlg)
    
    'init
    Call InsiCtrlMacro_SmpName
    Call InsiCtrlMacro_AttrDsp
    Call InsiCtrlMacro_AttrCateName
    Call InsiCtrlMacro_ScoreShow
    Call InsiCtrlMacro_ScorePredict
    Call InsiCtrlMacro_ScoreGrp
    
redisp:
    m_varselect = "0"
    
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        If m_varselect = vbNullString Then
            GoTo redisp
        End If
        insitbl.DataRge = dlg.EditBoxes("edtDataRge").Text & vbNullChar
        insitbl.Except = IIf(dlg.OptionButtons("optExcept") = xlOn, 1, 0)
        insitbl.FactorNum = val(dlg.EditBoxes("edtFactorNum").Text)
        insitbl.method = IIf(dlg.OptionButtons("optMethod1") = xlOn, 1, _
                            IIf(dlg.OptionButtons("optMethod2") = xlOn, 2, 3))
        insitbl.InitValue = IIf(dlg.OptionButtons("optInitVal1") = xlOn, 1, _
                              IIf(dlg.OptionButtons("optInitVal2") = xlOn, 2, 3))
        insitbl.Repeat = IIf(dlg.CheckBoxes("chkRepeat") = xlOn, 1, 0)
        insitbl.Rotation = IIf(dlg.OptionButtons("optRotation1") = xlOn, 1, _
                             IIf(dlg.OptionButtons("optRotation2") = xlOn, 2, 3))
        insitbl.KValue = val(dlg.EditBoxes("edtKVal").Text)
        insitbl.ScoreShow = IIf(dlg.CheckBoxes("chkScoreShow") = xlOn, 1, 0)
        insitbl.ScoreMethod = IIf(dlg.OptionButtons("optScoreMethod1") = xlOn, 1, 2)
        insitbl.Predict = IIf(dlg.CheckBoxes("chkPredict") = xlOn, 1, 0)
        insitbl.PredictRge = dlg.EditBoxes("edtPredictRge").Text & vbNullChar
        insitbl.SmpName = IIf(dlg.OptionButtons("optSmpNo") = xlOn, 0, 1)
        insitbl.SmpNameRge = dlg.EditBoxes("edtSmpNameRge").Text & vbNullChar
        insitbl.FactorLoad = val(dlg.EditBoxes("edtLoad").Text)
        insitbl.OrderAsc = IIf(dlg.CheckBoxes("chkOrdAsc") = xlOn, 1, 0)
        insitbl.AttrShow = IIf(dlg.CheckBoxes("chkAttrShow") = xlOn, 1, 0)
        insitbl.AttrDataRge = dlg.EditBoxes("edtAttrData").Text & vbNullChar
        insitbl.CateName = IIf(dlg.CheckBoxes("chkCateName") = xlOn, 1, 0)
        insitbl.AttrCateRge = dlg.EditBoxes("edtAttrCate").Text & vbNullChar
        insitbl.ScoreGrp = IIf(dlg.CheckBoxes("chkScoreGrp") = xlOn, 1, 0)
        insitbl.XAxis = val(dlg.EditBoxes("edtXAxis").Text)
        insitbl.YAxis = val(dlg.EditBoxes("edtYAxis").Text)
        insitbl.GrpCateDisp = IIf(dlg.CheckBoxes("chkGrpCateDisp") = xlOn, 1, 0)
        insitbl.GrpSmpNameDisp = IIf(dlg.CheckBoxes("chkGrpSmpNameDisp") = xlOn, 1, 0)
        insitbl.txtLen = val(dlg.EditBoxes("edtTxtLen").Text)
        Set YskSmpName = Range(dlg.EditBoxes("objDataRef").Text)
        
        If chkInsiData() = False Then
            GoTo redisp
        End If
        
        Set tmpSht = handleInsiData(YskSmpName)
        
        rtn = fMinsi_vba(nid, insitbl, nExcelVer, grp())
        If rtn = 0 And nExcelVer >= 12 Then
            grpType0 = 0
            For i = 1 To maxGrpNum
                If grp(i).Type <> 0 Then
                    Call ConvToBSTR(grp(i))
                    On Error Resume Next
                    Set para = Comm_SetDict(grp(i).grpPara)
                    On Error GoTo 0
                    If para Is Nothing Then Exit Sub
                    chartTitle = para("chartTitle")
                    txtLen = CInt(para("txtLen"))
                    bSmpName = CInt(para("bSmpName"))
                    fontsize = CInt(para("fontSize"))
                    predictNum = CInt(para("predictNum"))
                    Set para = Nothing
                    chartName = IIf(grp(i).Type = 1, "Th2BarChart", "Th2PointChart")
                    If grp(i).Type <> grpType0 Then
                        grpType0 = grp(i).Type
                        If grp(i).Type <> 1 Then grpData0 = grp(i).grpData
                    End If
                    Application.Run GxlaBkGraph2 & "!" & chartName, grp(i).sheetName, grp(i).grpOut, _
                        grp(i).grpData, grpData0, chartTitle, txtLen, fontsize, _
                        bSmpName, predictNum
                End If
            Next i
        End If
        Call Comm_CutDataLink(ActiveWorkbook, GxlaBkGraph2)
        Cells(1, 1).Select
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub
Attribute VB_Name = "mdlKMeans"
Option Explicit

Type kmnsTbl
    DataRge As String * 256
    outRge As String * 256
    bColTitle As Long
    bExcept As Long
    ClusterNum As Long
    ExceptNum As Long
End Type

Private m_varselect As String
Private m_kmnsTbl As kmnsTbl

#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function kmns_XL Lib "MTHR_D_CLST_64.dll" (ByVal nid As Long, kmnsTbl As kmnsTbl) As Long
    #Else
        Private Declare Function kmns_XL Lib "MTHR_D_CLST_64.dll" (ByVal nid As Long, kmnsTbl As kmnsTbl) As Long
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function kmns_XL Lib "MTHR_D_CLST.dll" (ByVal nid As Long, kmnsTbl As kmnsTbl) As Long
    #Else
        Private Declare Function kmns_XL Lib "MTHR_D_CLST.dll" (ByVal nid As Long, kmnsTbl As kmnsTbl) As Long
    #End If
#End If

'|fffd||3d0||fffd||fffd|I|fffd||fffd|
Private Sub KmnsGetVarSel()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim RgeVar As Range
    Dim valvar As Variant
    Dim savLabelA As String, savLabelB As String
    
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgKMeans")
    Set RgeVar = Range(dlg.EditBoxes("RgeDataIn").Text)
    If dlg.OptionButtons("optTitle") = xlOn Then
        Set RgeVar = Range(RgeVar(1, 2), RgeVar(1, RgeVar.Columns.Count))
    Else
        Set RgeVar = Range(RgeVar(1, 1), RgeVar(1, RgeVar.Columns.Count))
    End If
    If Err.Number <> 0 Then
        Err.Clear
        m_varselect = vbNullString
        On Error GoTo 0
        Exit Sub
    End If
    valvar = RgeVar.Value()
    For i = 1 To RgeVar.Columns.Count
        m_varselect = m_varselect & "," & valvar(1, i)
    Next i
        
    'save
    savLabelA = frmVarSel.Label1.Caption
    savLabelB = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|"
    frmVarSel.Label2.Caption = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|"
    
    m_varselect = VarSelect(Mid(m_varselect, 2))
    
    'recovery
    frmVarSel.Label1.Caption = savLabelA
    frmVarSel.Label2.Caption = savLabelB
    
    On Error GoTo 0
End Sub

Private Function chkKmnsData(ByVal BgnNo As Integer, ByVal EndNo As Integer) As Boolean
    Dim rgeData As Range
    Dim msgStr As String
    Dim tmpi As Long
    Dim itemNum As Long, smpNum As Long
    
    'init
    msgStr = ""

    On Error Resume Next
    Set rgeData = Range(m_kmnsTbl.DataRge)
    On Error GoTo 0
    
    If rgeData Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    itemNum = rgeData.Columns.Count
    smpNum = rgeData.Rows.Count
    tmpi = m_kmnsTbl.ClusterNum
    If (tmpi < 2 Or BgnNo < 2 Or EndNo < 2 Or BgnNo > EndNo Or tmpi > smpNum) Then
        msgStr = "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||310||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
chkEnd:
    If msgStr <> "" Then
        MsgBox msgStr
        chkKmnsData = False
        Exit Function
    End If
    '
    chkKmnsData = True
End Function

Private Function handleKmnsData(ByVal bStdData As Boolean) As Worksheet
    Dim i As Long, j As Long, l As Long
    Dim rgeSrc As Range, rge As Range
    Dim tmpRge As Range
    Dim tmpSht As Worksheet, dataSht As Worksheet
    Dim kmnsVarSel As Variant, tmpVar As Variant
    Dim smpNum As Long, itemNum As Long
    Dim msgStr As String
    Dim dAvg As Double, dStdev As Double
    
    On Error Resume Next
    Set rgeSrc = Range(m_kmnsTbl.DataRge)
    Set dataSht = rgeSrc.Worksheet
    smpNum = rgeSrc.Rows.Count
    itemNum = rgeSrc.Columns.Count
    Set tmpSht = rgeSrc.Worksheet.Parent.Sheets.Add
    Set rge = tmpSht.Range("$A$1")
    If m_kmnsTbl.bColTitle = 0 Then
        For i = 1 To smpNum - 1
            rge(i + 1, 1).Value = i
        Next i
        Set rge = rge(1, 2)
    Else
'10.12.14 DZH mdf
#If 0 Then
        rge.Range(Cells(1, 1), Cells(smpNum, 1)) = rgeSrc.Columns(1).Value
        Set rgeSrc = rgeSrc.Range("B1").Range(dataSht.Cells(1, 1), dataSht.Cells(smpNum, itemNum - 2))
        Set rge = rge(1, 2)
        itemNum = itemNum - 1
#Else
        rge.Range(Cells(1, 1), Cells(smpNum, 1)) = rgeSrc.Columns(1).Value
        Set rge = rge(1, 2)
        
        itemNum = itemNum - 1
        If itemNum < 1 Then
            MsgBox "|fffd||fffd||fffd||690||fffd||fffd||fffd||fffd|O|fffd||142||fffd||fffd|B"
            handleKmnsData = Nothing
            Exit Function
        End If
        Set rgeSrc = rgeSrc.Range("B1").Range(dataSht.Cells(1, 1), dataSht.Cells(smpNum, itemNum))
#End If
'
    End If

    If m_varselect <> "0" Then
        kmnsVarSel = Split(m_varselect, ",")
    Else
        ReDim kmnsVarSel(0 To itemNum) As Long
        kmnsVarSel(0) = itemNum
        For i = 1 To itemNum
            kmnsVarSel(i) = i - 1
        Next i
    End If
    
    itemNum = kmnsVarSel(0)

    For i = 1 To itemNum
            rge.Range(Cells(1, i), Cells(smpNum, i)) = rgeSrc.Columns(val(kmnsVarSel(i)) + 1).Value
    Next i
    
    i = 2
    m_kmnsTbl.ExceptNum = 0
    While i <= smpNum
        If Application.WorksheetFunction.Count(rge.Range(tmpSht.Cells(i, 1), tmpSht.Cells(i, itemNum))) <> itemNum Then
            If m_kmnsTbl.bExcept = 0 Then
                Application.DisplayAlerts = False
                tmpSht.Delete
                Application.DisplayAlerts = True
                MsgBox "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
                handleKmnsData = Nothing
                Exit Function
            End If
            Rows(i).Delete
            smpNum = smpNum - 1
            m_kmnsTbl.ExceptNum = m_kmnsTbl.ExceptNum + 1
        Else
            i = i + 1
        End If
    Wend
    
    Set rge = tmpSht.Range("$A$1")
    If bStdData Then
        For i = 1 To itemNum
            Set tmpRge = rge(2, i + 1).Resize(smpNum - 1, 1)
            tmpVar = tmpRge
            dAvg = Application.WorksheetFunction.Average(tmpVar)
            dStdev = Application.WorksheetFunction.StDev(tmpVar)
            For j = 1 To smpNum - 1
                tmpVar(j, 1) = (tmpVar(j, 1) - dAvg) / dStdev
            Next j
            tmpRge.Value = tmpVar
        Next i
    End If
    m_kmnsTbl.DataRge = toXlRCstr(Range(rge(1, 1), rge(smpNum, itemNum + 1)).Address) & vbNullChar
    m_kmnsTbl.bColTitle = 1
    m_kmnsTbl.bExcept = 1
    Set handleKmnsData = tmpSht
    
    On Error GoTo 0
End Function

Sub IS_MTHR_CLST_Kmeans()
    Dim rtn As Integer, i As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet, outSht As Worksheet
    Dim bMultiCluster As Boolean, bStdData As Boolean
    Dim BgnNo As Long, EndNo As Long
    Dim nid As Long
    
    nid = IIf(isTrialVer, 0, 1)
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    
    Set dlg = ThisWorkbook.DialogSheets("DlgKMeans")
    dlg.Buttons("btnVarSelect").OnAction = "KmnsGetVarSel"
   
redisp:
    m_varselect = "0"
    
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        If m_varselect = vbNullString Then
            GoTo redisp
        End If
        m_kmnsTbl.DataRge = dlg.EditBoxes("RgeDataIn").Text & vbNullChar
        m_kmnsTbl.bExcept = IIf(dlg.OptionButtons("bExcept") = xlOn, 1, 0)
        m_kmnsTbl.ClusterNum = val(dlg.EditBoxes("edtClusterNum").Text)
        m_kmnsTbl.bColTitle = IIf(dlg.OptionButtons("optTitle") = xlOn, 1, 0)
        bStdData = IIf(dlg.OptionButtons("optOriData") = xlOn, False, True)
        bMultiCluster = IIf(dlg.OptionButtons("optSingle").Value = xlOn, 0, 1)
        If bMultiCluster Then
            BgnNo = val(dlg.EditBoxes("edtBgnNo").Text)
            EndNo = val(dlg.EditBoxes("edtEndNo").Text)
        Else
            BgnNo = m_kmnsTbl.ClusterNum
            EndNo = BgnNo
        End If
        If chkKmnsData(BgnNo, EndNo) = False Then
            GoTo redisp
        End If
        Set tmpSht = handleKmnsData(bStdData)
        If tmpSht Is Nothing Then
            GoTo redisp
        End If
        For i = BgnNo To EndNo
            Set outSht = tmpSht.Parent.Sheets.Add
            m_kmnsTbl.outRge = outSht.name & "!R2C1" & vbNullChar
            tmpSht.Activate
            m_kmnsTbl.ClusterNum = i
            rtn = kmns_XL(nid, m_kmnsTbl)
            outSht.Activate
            If bMultiCluster Then
                On Error Resume Next
                ActiveSheet.name = i & "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||142||30c||fffd||fffd||fffd|"
                On Error GoTo 0
            End If
        Next i
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
End Sub

Attribute VB_Name = "mdlMhbt"
Option Private Module
Option Explicit
    
Type HBT_TBL
    objRge As String
    varRge As String
    outRge As String
    bNewSheet As Long
    Except As Long
    method As Long
    FIn As Double
    FOut As Double
    GroupMerge As Long
    GroupCode As Long
    Code1 As Long
    Code2 As Long
    Code3 As Long
    OutMid As Long
    SmpTitle As Long
    SmpNameRge As String
    DpScore As Long
    flgPull As Long
    GrpNameRge As String
    flgGrpOut As Long
End Type

Private Type HBT_EXTRA
    bYskYes As Boolean
    yskRge As String
    yskNameRge As String
End Type

Private m_varselect As String
Private m_bvarselected As Boolean
Private Const HBT_ERR_SMP As String = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||202||fffd|"

#If Win64 Then
    #If VBA7 Then
        Declare PtrSafe Function fTH1_Hanbetsu_vba Lib "MTHR_H_THR1_64.dll" (mhbt As HBT_TBL, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #Else
        Declare Function fTH1_Hanbetsu_vba Lib "MTHR_H_THR1_64.dll" (mhbt As HBT_TBL, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #End If
#Else
    #If VBA7 Then
        Declare PtrSafe Function fTH1_Hanbetsu_vba Lib "MTHR_H_THR1.dll" (mhbt As HBT_TBL, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #Else
        Declare Function fTH1_Hanbetsu_vba Lib "MTHR_H_THR1.dll" (mhbt As HBT_TBL, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #End If
#End If

Private Function handleHbtData(HbtTbl As HBT_TBL, ByVal bAuto As Boolean, HbtExtra As HBT_EXTRA) As Worksheet
    Dim i As Long, j As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim RgeSmpName As Range, RgeCateName As Range, rgeGrpName As Range
    Dim RgeYsk As Range, RgeYskName As Range
    Dim tmpSht As Worksheet
    Dim hbtobj As Variant, hbtvar As Variant
    Dim hbtVarSel As Variant
    Dim cateNameRow As Long, smpNum As Long, itmNum As Long, objSmpNum As Long
    Dim msgStr As String
    Dim tmpi As Long
    Dim dict As Object, dict2 As Object
    Dim v As Variant
    Dim maxGrpCode As Integer
    
    On Error Resume Next
    Set RgeObj = Range(HbtTbl.objRge)
    Set RgeVar = Range(HbtTbl.varRge)
    Set rgeGrpName = Range(HbtTbl.GrpNameRge)
    Set RgeYsk = Range(HbtExtra.yskRge)
    Set RgeYskName = Range(HbtExtra.yskNameRge)
    If HbtTbl.SmpTitle = 2 Then
        Set RgeSmpName = Range(HbtTbl.SmpNameRge)
    End If
    
    hbtvar = RgeVar.Value
    
    msgStr = ""
    If RgeVar Is Nothing Or RgeObj Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set handleHbtData = Nothing
        Exit Function
    End If
    
    If HbtTbl.SmpTitle = 2 And RgeSmpName Is Nothing Then
        MsgBox "|fffd||5368e||496||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleHbtData = Nothing
        Exit Function
    End If
    
    If Not rgeGrpName Is Nothing And Not bAuto Then
        maxGrpCode = IIf(HbtTbl.Code1 > HbtTbl.Code2, HbtTbl.Code1, HbtTbl.Code2)
        If rgeGrpName.Rows.Count < maxGrpCode Then
            MsgBox "|fffd|Q|fffd||fffd||fffd||302||303|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|", vbOKOnly Or vbInformation
            Set handleHbtData = Nothing
            Exit Function
        End If
    End If
    
    If HbtExtra.bYskYes Then
        If RgeYsk Is Nothing Then
            MsgBox "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleHbtData = Nothing
            Exit Function
        End If
    End If
    
    If RgeVar.Rows.Count <> RgeObj.Rows.Count Then
        MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleHbtData = Nothing
        Exit Function
    End If
    
    Set tmpSht = RgeVar.Worksheet.Parent.Sheets.Add
    Set rge = tmpSht.Range("$A$2")
    If HbtTbl.SmpTitle = 2 Then
        Call PasteRange(RgeSmpName, rge, xlPasteValues)
    Else
        For i = 1 To RgeVar.Rows.Count - 1
            rge(i, 1) = i
        Next i
    End If
    smpNum = RgeVar.Rows.Count - 1
    If HbtExtra.bYskYes Then
        If Not RgeYskName Is Nothing Then
            For i = 1 To RgeYskName.Rows.Count
                rge(i + smpNum, 1) = RgeYskName(i, 1)
            Next i
            If RgeYskName.Rows.Count < RgeYsk.Rows.Count Then
                For i = RgeYskName.Rows.Count + 1 To RgeYsk.Rows.Count
                    rge(i + smpNum, 1) = i + smpNum
                Next i
            End If
        Else
            For i = 1 To RgeYsk.Rows.Count
                rge(i + smpNum, 1) = i + smpNum
            Next i
        End If
    End If

    Set rge = tmpSht.Range("$C$1")
    Call PasteRange(RgeObj, rge, xlPasteValues)
    
    If m_varselect <> "0" Then
        hbtVarSel = Split(m_varselect, ",")
    Else
        ReDim hbtVarSel(0 To RgeVar.Columns.Count) As Long
        hbtVarSel(0) = RgeVar.Columns.Count
        For i = 1 To RgeVar.Columns.Count
            hbtVarSel(i) = i - 1
        Next i
    End If
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To hbtVarSel(0)
            rge(i, j + 1) = RgeVar(i, hbtVarSel(j) + 1)
        Next j
    Next i
    smpNum = RgeVar.Rows.Count
    If HbtExtra.bYskYes Then
        For i = 1 To RgeYsk.Rows.Count
            For j = 1 To hbtVarSel(0)
                rge(i + smpNum, j + 1) = RgeYsk(i, hbtVarSel(j) + 1)
            Next j
        Next i
        smpNum = smpNum + RgeYsk.Rows.Count
    End If
    HbtTbl.varRge = Range(rge(1, 2), rge(smpNum, hbtVarSel(0) + 1)).Address

    Set rge = Range(HbtTbl.varRge)
    smpNum = rge.Rows.Count
    
    Set rge = Range("C1")
    objSmpNum = RgeObj.Rows.Count
    itmNum = hbtVarSel(0)
    '2011.01.28 added
    If itmNum > 200 Then
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleHbtData = Nothing
        Exit Function
    End If
    'end add
    Set rge = Range(rge(1, 1), rge(objSmpNum, 1))
    For i = objSmpNum To 2 Step -1
        If Trim(rge(i, 1)) = vbNullString Then
            If HbtTbl.Except = 1 Then
                tmpSht.Rows(rge.Rows(i).Row).Delete
                smpNum = smpNum - 1
                objSmpNum = objSmpNum - 1
            Else
                Application.DisplayAlerts = False
                tmpSht.Delete
                Application.DisplayAlerts = True
                MsgBox "|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|"
                Set handleHbtData = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = Range("D1")
    itmNum = hbtVarSel(0)
    Set rge = Range(rge(1, 1), rge(smpNum, itmNum))
    For i = smpNum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) <> itmNum Then
            If HbtTbl.Except = 1 Then
                tmpSht.Rows(rge.Rows(i).Row).Delete
                smpNum = smpNum - 1
                objSmpNum = objSmpNum - 1
            Else
                Application.DisplayAlerts = False
                tmpSht.Delete
                Application.DisplayAlerts = True
                MsgBox "|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|"
                Set handleHbtData = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = Range("C1")
    If objSmpNum >= 2 Then
        Set rge = Range(rge(1, 1), rge(objSmpNum, itmNum + 1))
        Set dict = CreateObject("Scripting.Dictionary")
        Set dict2 = CreateObject("Scripting.Dictionary")
        If bAuto Then
            HbtTbl.Code1 = 1
            HbtTbl.Code2 = 2
            j = 1
            For i = 2 To objSmpNum
                v = rge(i, 1).Value
                If Not dict.exists(v) Then
                    dict.Add v, j
                    dict2.Add j, v
                    If j = 1 Or j = 2 Then
                        rge(i, 1) = j
                    Else
                        rge(i, 1) = vbNullString
                    End If
                    j = j + 1
                Else
                    If dict(v) = 1 Or dict(v) = 2 Then
                        rge(i, 1) = dict(v)
                    Else
                        rge(i, 1) = vbNullString
                    End If
                End If
            Next i
            If dict.Count < 2 Then
                Set dict = Nothing
                Set dict2 = Nothing
                Application.DisplayAlerts = False
                tmpSht.Delete
                Application.DisplayAlerts = True
                Set handleHbtData = Nothing
                MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|", vbInformation
                Exit Function
            End If
        Else
            dict2.Add 1, HbtTbl.Code1
            dict2.Add 2, HbtTbl.Code2
        End If
        For i = objSmpNum To 2 Step -1
            tmpi = 0                                        '2011.01.25
            If Not IsNumeric(rge(i, 1)) Then
                tmpi = CInt(StrConv(rge(i, 1), vbNarrow))
            Else
                tmpi = CInt(rge(i, 1))
            End If
            If tmpi <> HbtTbl.Code1 And tmpi <> HbtTbl.Code2 Then
                tmpSht.Rows(rge.Rows(i).Row).Delete
                smpNum = smpNum - 1
                objSmpNum = objSmpNum - 1
                'rge(i, 1) = vbNullString
            Else
                If tmpi = HbtTbl.Code1 Then
                    rge(i, 1) = 1
                Else
                    rge(i, 1) = 2
                End If
            End If
        Next i
    Else
        MsgBox HBT_ERR_SMP, vbCritical Or vbOKOnly
        Set handleHbtData = Nothing
        Exit Function
    End If
    
    HbtTbl.Code1 = 1
    HbtTbl.Code2 = 2
    
    If smpNum < 2 Or objSmpNum < 2 Then
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
        MsgBox HBT_ERR_SMP, vbCritical Or vbOKOnly
        Set handleHbtData = Nothing
        Exit Function
    End If
    
    Set rge = tmpSht.Range("$B$1")
    If Not rgeGrpName Is Nothing And Not bAuto Then
        'Call PasteRange(rgeGrpName, rge, xlPasteValues)
        For i = 1 To 2
            rge(i, 1) = rgeGrpName(dict2(i), 1)
        Next i
    Else
        For i = 1 To 2
            rge(i, 1) = dict2(i)
        Next i
    End If
    
    Set rge = tmpSht.Range("$A$2")
    HbtTbl.SmpTitle = 2
    HbtTbl.SmpNameRge = Range(rge(1, 1), rge(smpNum - 1, 1)).Address
    HbtTbl.SmpNameRge = tmpSht.name & "!" & HbtTbl.SmpNameRge
     
    Set rge = tmpSht.Range("$B$1")
    HbtTbl.GrpNameRge = Range(rge(1, 1), rge(2, 1)).Address
    HbtTbl.GrpNameRge = tmpSht.name & "!" & HbtTbl.GrpNameRge
    
    Set rge = tmpSht.Range("$C$1")
    HbtTbl.objRge = Range(rge(1, 1), rge(objSmpNum, 1)).Address
    HbtTbl.objRge = tmpSht.name & "!" & HbtTbl.objRge
    
    HbtTbl.varRge = Range(rge(1, 2), rge(smpNum, hbtVarSel(0) + 1)).Address
    HbtTbl.varRge = tmpSht.name & "!" & HbtTbl.varRge
    
    Set handleHbtData = tmpSht
    Set dict = Nothing
    Set dict2 = Nothing
    On Error GoTo 0
End Function

Sub HbtGetVarSelect()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbt")
    m_varselect = GetVarSel(dlg, "edtVarRge", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|")
End Sub

Private Sub HbtSign_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbt")
    bOn = (dlg.OptionButtons("optProb").Value = xlOn)
    dlg.CheckBoxes("chkPull").Enabled = bOn
    dlg.CheckBoxes("chkGrpOut").Enabled = Not bOn
End Sub

Private Sub HbtAuto_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbt")
    bOn = (dlg.OptionButtons("optAuto").Value = xlOn)
    dlg.EditBoxes("edtCode1").Enabled = Not bOn
    dlg.EditBoxes("edtCode2").Enabled = Not bOn
    dlg.EditBoxes("edtGrpName").Enabled = Not bOn
End Sub

Private Sub HbtMethod_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbt")
    bOn = (dlg.OptionButtons("optMethod5").Value = xlOn)
    dlg.OptionButtons("optSmpNo").Enabled = Not bOn
    dlg.OptionButtons("optSmpName").Enabled = Not bOn
    dlg.EditBoxes("edtSmpName").Enabled = Not bOn
    dlg.CheckBoxes("chkGrpOut").Enabled = Not bOn
    bOn = (dlg.OptionButtons("optMethod5").Value = xlOn Or dlg.OptionButtons("optMethod1").Value = xlOn)
    dlg.CheckBoxes("chkOutMid").Enabled = Not bOn
    dlg.EditBoxes("edtFIn").Enabled = Not bOn
    dlg.EditBoxes("edtFOut").Enabled = Not bOn
End Sub

Private Sub HbtSmpName_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbt")
    bOn = (dlg.OptionButtons("optSmpName").Value = xlOn And dlg.OptionButtons("optSmpNo").Enabled)
    dlg.EditBoxes("edtSmpName").Enabled = bOn
End Sub

Private Sub HbtSetMacro()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbt")
    dlg.OptionButtons("optSign").OnAction = "HbtSign_Click"
    dlg.OptionButtons("optProb").OnAction = "HbtSign_Click"
    dlg.Buttons("btnVarSel").OnAction = "HbtGetVarSelect"
    dlg.OptionButtons("optAuto").OnAction = "HbtAuto_Click"
    dlg.OptionButtons("optCustom").OnAction = "HbtAuto_Click"
    dlg.OptionButtons("optMethod1").OnAction = "HbtMethod_Click"
    dlg.OptionButtons("optMethod2").OnAction = "HbtMethod_Click"
    dlg.OptionButtons("optMethod3").OnAction = "HbtMethod_Click"
    dlg.OptionButtons("optMethod4").OnAction = "HbtMethod_Click"
    dlg.OptionButtons("optMethod5").OnAction = "HbtMethod_Click"
    dlg.OptionButtons("optMethod6").OnAction = "HbtMethod_Click"
    dlg.OptionButtons("optSmpNo").OnAction = "HbtSmpName_Click"
    dlg.OptionButtons("optSmpName").OnAction = "HbtSmpName_Click"
    HbtSign_Click
    HbtAuto_Click
    HbtMethod_Click
    HbtSmpName_Click
End Sub

Sub IS_MTHR_DA() '|fffd||fffd||fffd||295||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim titleStr As String      '2007.1.16 PYJ
    Dim nExcelVer As Integer
    Dim tmpSht As Worksheet, tmpSht2 As Worksheet
    Dim mhbt As HBT_TBL
    Dim mhbtExtra As HBT_EXTRA
    Dim actSht As Worksheet
    Dim grp(1 To 1) As VBAGRAPH
    Dim bAuto As Boolean
    Dim r As Range, vdata As Variant, rdata As Range
    Dim vMean1 As Variant, vMean2 As Variant, v1 As Variant, v2 As Variant
    Dim dScoreStd As Double, nSmpNum As Long, nCombNum As Long, itemNum As Long
    Dim i As Long, j As Long
    
    On Error Resume Next
    
    Set actSht = ActiveSheet

    ReDim VbaGrp(0)
    
    m_varselect = getDefaultVarSelect(FUNC_NO.FUNC_DA)
    If bRangeChanged_Frm(FUNC_NO.FUNC_DA, frmDA.RgeVar.Text) Then m_varselect = "0"
redisp:
    m_bvarselected = False
    
    frmDA.bvarselected = m_bvarselected
    frmDA.VarSelect = m_varselect
    frmDA.Show
    m_varselect = "0"
    If Not frmDA.bOK Then Exit Sub
    
    m_bvarselected = frmDA.bvarselected
    m_varselect = frmDA.VarSelect
    
    Call setDefaultAddress(FUNC_NO.FUNC_DA, getCurrentAddress_Frm(frmDA.RgeVar.Text))
    Call setDefaultVarSelect(FUNC_NO.FUNC_DA, m_varselect)
    
    mhbt.objRge = (frmDA.RgeObj.Text)
    mhbt.varRge = (frmDA.RgeVar.Text)
    'mhbt.OutRge = (dlg.EditBoxes("edtOutRge").Text)
    'mhbt.GrpNameRge = (dlg.EditBoxes("edtGrpName").text)
    mhbt.bNewSheet = 1 'IIf(dlg.OptionButtons("optNewSheet").Value = xlOn, 1, 0)
    mhbt.method = 1 'IIf(frmDA.optVarNone, 1, 5)
    'If mhbt.method = 5 Then
    '    IS_MTHR_DA_Atari
    '    Exit Sub
    'End If
    mhbt.OutMid = 0
    mhbt.FIn = 0
    mhbt.FOut = 0
    bAuto = True
    'mhbt.GroupMerge = IIf(dlg.CheckBoxes("chkGroupMerge").Value = xlOn, 1, 0)
    mhbt.GroupCode = 1 'IIf(dlg.OptionButtons("optGroup12").Value = xlOn, 1, 2)
    mhbt.Code1 = 1
    mhbt.Code2 = 2
    'mhbt.Code3 = val(dlg.EditBoxes("edtCode3").Text)
    'If IsEmpty(dlg.EditBoxes("edtCode3").Text) Then
    '    mhbt.GroupCode = 1
    'End If
    mhbt.Except = IIf(frmDA.optExcept = True, 1, 2)
    mhbt.DpScore = 1
    mhbt.flgPull = 1
    mhbt.SmpTitle = IIf(frmDA.optSmpNo = True, 1, 2)
    If mhbt.SmpTitle = 2 Then
        mhbt.SmpNameRge = frmDA.RgeSmpName.Text
    End If
    mhbt.flgGrpOut = IIf(frmDA.optVarNone, 1, 0)
    
    mhbtExtra.bYskYes = frmDA.chkYsk
    mhbtExtra.yskRge = frmDA.RgeYskData
    mhbtExtra.yskNameRge = frmDA.RgeYskName
    
    Set tmpSht = handleHbtData(mhbt, bAuto, mhbtExtra)
    If tmpSht Is Nothing Then
        GoTo redisp
    End If
    
    mhbt.objRge = toXlRCstr(mhbt.objRge)
    mhbt.varRge = toXlRCstr(mhbt.varRge)
    mhbt.outRge = toXlRCstr(mhbt.outRge)
    mhbt.GrpNameRge = toXlRCstr(mhbt.GrpNameRge)
    mhbt.SmpNameRge = toXlRCstr(mhbt.SmpNameRge)
    
    'mhbt.objRge = Replace(mhbt.objRge, "|fffd|f|fffd|f", "|fffd|f")
    'mhbt.varRge = Replace(mhbt.varRge, "|fffd|f|fffd|f", "|fffd|f")
    'mhbt.OutRge = Replace(mhbt.OutRge, "|fffd|f|fffd|f", "|fffd|f")
    'mhbt.GrpNameRge = Replace(mhbt.GrpNameRge, "|fffd|f|fffd|f", "|fffd|f")
    'mhbt.SmpNameRge = Replace(mhbt.SmpNameRge, "|fffd|f|fffd|f", "|fffd|f")
    
    actSht.Activate
    
    Set rdata = Range(toXlA1str(mhbt.varRge))
    itemNum = rdata.Columns.Count
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    Call InitGrpAry(grp)
    nExcelVer = 12
    rtn = fTH1_Hanbetsu_vba(mhbt, nExcelVer, grp)
    If rtn Then
        If frmDA.optVarNone Then
            If grp(1).Type <> 0 Then
                Call ConvToBSTR(grp(1))
                If grp(1).Type = 1 Then
#If 0 Then  '11.1.9 LSQ
                    Application.Run GxlaBkGraph & "!MhbtGrp", grp(1).sheetName, grp(1).grpOut, grp(1).grpData
#Else
                    Call MTHR_HBTGrp(grp(1).sheetName, grp(1).grpOut, grp(1).grpData)
#End If
                End If
            End If
        Else
            Set tmpSht2 = ActiveSheet
            '2018.03.09 added
            Set r = ActiveSheet.Columns(1).Find("|fffd||fffd|{|fffd||fffd||fffd|v|fffd||fffd|")
            If Not r Is Nothing Then
                Set r = r.Offset(3, 3).Resize(itemNum, 2)
                vMean1 = r.Columns(1).Value
                vMean2 = r.Columns(2).Value
                For i = 1 To itemNum
                    vMean1(i, 1) = vMean1(i, 1) - vMean2(i, 1)
                Next i
            End If
            Set r = ActiveSheet.Columns(1).Find("|fffd||fffd||fffd|U|fffd||fffd||fffd||fffd||fffd|U|fffd|s|fffd||fffd|")
            If Not r Is Nothing Then
                Set r = r.Offset(2 + itemNum, 2).Resize(itemNum, itemNum)
                v1 = r.Value
                v2 = r.Offset(itemNum, 0).Value
                For i = 1 To itemNum
                    For j = 1 To itemNum
                        v1(i, j) = v1(i, j) + v2(i, j)
                    Next j
                Next i
            End If
            'end add
            Set r = ActiveSheet.Columns(3).Find("|fffd|S|fffd||fffd|")
            If Not r Is Nothing Then
                nSmpNum = r.Offset(1, 0)
                Set r = ActiveSheet.Columns(3).Find("|fffd||fffd||fffd||fffd||fffd||242||fffd||953b||fffd||fffd|")
                If Not r Is Nothing Then
                    Set r = r.Offset(2, -1)
                    dScoreStd = WorksheetFunction.StDevP(r.Resize(nSmpNum, 1))
                    actSht.Activate
                    rtn = IS_MTHR_DA_Atari
                    If rtn = 0 Then
                        Set r = ActiveSheet.Columns(2).Find("|fffd||fffd||fffd||28c|W|fffd||fffd|")
                        If Not r Is Nothing Then
                            If r.Offset(1, 0) <> "|fffd|g|fffd||74d||fffd||fffd||d0b9|" Then
                                r = "objitemname"
                                Set r = ActiveSheet.Columns(2).Find("|fffd||fffd||fffd||28c|W|fffd||fffd|")
                            End If
                            If r.Offset(4, 0) <> "" Then
                                Set r = Range(r.Offset(3, 0), r.Offset(3, 0).End(xlDown).End(xlToRight))
                            Else
                                Set r = Range(r.Offset(3, 0), r.Offset(3, 0).End(xlToRight))
                            End If
                            nCombNum = r.Rows.Count
                            '2018.03.09 mdf:
                            #If 0 Then
                            vdata = r.Value
                            For i = 1 To r.Rows.Count
                                For j = 4 To r.Columns.Count
                                    If Not IsEmpty(vdata(i, j)) Then
                                        vdata(i, j) = vdata(i, j) * dScoreStd
                                    End If
                                Next j
                            Next i
                            r.Value = vdata
                            #Else
                            For i = 1 To r.Rows.Count
                                Call CalcLDA(r.Rows(i), vMean1, v1)
                            Next i
                            #End If
                            'end mdf
                            Set r = ActiveSheet.Columns(2).Find("|fffd||fffd||fffd||28c|W|fffd||fffd|").Offset(2, 0).Resize(1, r.Columns.Count)
                            r.Select
                            Selection.Delete Shift:=xlUp
                            Set r = Selection
                            Call SetRangeBorder(r, xlThin, xlThin, xlThin, IIf(nCombNum > 1, xlHairline, xlThin), xlThin)
                            Set r = ActiveSheet.Columns(2).Find("objitemname")
                            If Not r Is Nothing Then
                                r = "|fffd||fffd||fffd||28c|W|fffd||fffd|"
                            End If
                            Cells(1, 2).Select
                        End If
                    End If
                End If
            End If
            Application.DisplayAlerts = False
            tmpSht2.Delete
            Application.DisplayAlerts = True
        End If
    End If
    Application.DisplayAlerts = False
    tmpSht.Delete
    Application.DisplayAlerts = True
End Sub

Private Sub MTHR_HBTGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, ByVal strGrpData As String)
'11.1.9 LSQ add : |fffd||fffd||fffd||293||fffd||fffd|_|fffd|}
'old version: see, MhbtGrp @THR6_Graph.xla
'
    Dim wrkbk As Workbook
    Dim wrksht As Worksheet
    Dim DataRge As Range, outRge As Range
    Dim cht As Chart
    
    On Error Resume Next
    Set wrkbk = Range("'" & strWrkSht & "'!$A$1").Worksheet.Parent
    Set wrksht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outRge = wrksht.Range(Comm_toXlA1str(strGrpOut)).Range("A1")
    Set DataRge = wrksht.Range(Comm_toXlA1str(strGrpData)).Resize(, 4)
    On Error GoTo 0
    If outRge Is Nothing Or DataRge Is Nothing Then
        Exit Sub
    End If
                       
    Set cht = Application.Run(GxlaBkGraph & "!DrawDotPlot", outRge, DataRge)
            
    'graph settings
    cht.chartTitle.Text = DataRge.Offset(-1, 0).Range("A1")
    
    Application.ScreenUpdating = True
    
    cht.Axes(xlValue).CrossesAt = 0 '|fffd||fffd||fffd||28a||e3c0| = |fffd||fffd||fffd||fffd|
    Call SetMarkers(cht)
    cht.Axes(xlCategory).CategoryNames = Array(DataRge(1, 1), DataRge(1, 2))
    With cht.PlotArea.Border
        .colorIndex = 1
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    
    If getExcelVerNo() < 12 Then 'Excel2007 size adjustment --> added horizontal dot-line sometimes disapear
        Call Comm_setChartPosSize(cht.Parent, outRge, 20, 6)
    End If
    
    outRge.Select

End Sub

'modify series marker
'11.1.9 LSQ -- mdf from sss32grp.xla ! mdlDotPlot.bas
'
Private Sub SetMarkers(ByVal cht As Chart)
    Dim i As Integer, serCnt As Integer, mkCnt As Integer
    Dim ser As Series
    
    On Error Resume Next
    serCnt = cht.SeriesCollection.Count
    For i = 1 To serCnt
        Set ser = cht.SeriesCollection.Item(i)
        ser.MarkerSize = 6
        ser.Border.LineStyle = xlNone
        With ser
            .MarkerBackgroundColorIndex = 1
            .MarkerForegroundColorIndex = 1
            .MarkerStyle = xlDiamond
            .MarkerSize = 6
            .Border.LineStyle = xlNone
        End With
    Next i
    On Error GoTo 0
End Sub

'2018.03.09 added
Private Function CalcLDA(Row As Range, vMean As Variant, vCov As Variant)
    Dim i As Long, j As Long, cnt As Long
    Dim itNo As Variant, tmpv As Variant, vRow As Variant
    Dim mean() As Double, cov() As Double
    Dim s As String
    cnt = 0
    s = ""
    vRow = Row.Value
    For i = 4 To Row.Columns.Count
        If Not IsEmpty(vRow(1, i)) Then
            s = s & "," & i - 3
            cnt = cnt + 1
        End If
    Next i
    ReDim mean(1 To cnt, 1 To 1)
    ReDim cov(1 To cnt, 1 To cnt)
    itNo = Split(Mid(s, 2), ",")
    For i = 1 To cnt
        mean(i, 1) = vMean(itNo(i - 1), 1)
        For j = 1 To cnt
            cov(i, j) = vCov(itNo(i - 1), itNo(j - 1))
        Next j
    Next i
    tmpv = WorksheetFunction.MInverse(cov)
    tmpv = WorksheetFunction.MMult(tmpv, mean)
    For i = 1 To cnt
        If cnt > 1 Then
            vRow(1, CInt(itNo(i - 1)) + 3) = tmpv(i, 1) * 2
        Else
            vRow(1, CInt(itNo(i - 1)) + 3) = tmpv(i) * 2
        End If
    Next i
    Row = vRow
    Erase mean
    Erase cov
End Function
'end add

'=== EOF ===

Attribute VB_Name = "mdlMhbtsj"
Option Private Module
Option Explicit
    
Type HBTSJ_TBL
    objRge As String
    varRge As String
    outRge As String
    bNewSheet As Long
    Except As Long
    method As Long
    Level As Double
    FValue As Double
    GroupNum As Long
    Codes(1 To 10) As Long
    SmpNameRge As String
    GrpNameRge As String
    bShowGrp As Long
    nXAxis As Long
    nYAxis As Long
    bShowCateName As Long
    bShowSmpName As Long
End Type

Private Type HBT_EXTRA
    bYskYes As Boolean
    yskRge As String
    yskNameRge As String
    bExtraInfo As Long
    bExceptN0 As Long
End Type

Private m_varselect As String
Private m_bvarselected As Boolean
Private Const HBTSJ_ERR_SMP As String = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||202||fffd|"

#If Win64 Then
    #If VBA7 Then
        Declare PtrSafe Function fTH1_HanbetsuSj_vba Lib "MTHR_H_THR1_64.dll" (mhbt As HBTSJ_TBL) As Integer
    #Else
        Declare Function fTH1_HanbetsuSj_vba Lib "MTHR_H_THR1_64.dll" (mhbt As HBTSJ_TBL) As Integer
    #End If
#Else
    #If VBA7 Then
        Declare PtrSafe Function fTH1_HanbetsuSj_vba Lib "MTHR_H_THR1.dll" (mhbt As HBTSJ_TBL) As Integer
    #Else
        Declare Function fTH1_HanbetsuSj_vba Lib "MTHR_H_THR1.dll" (mhbt As HBTSJ_TBL) As Integer
    #End If
#End If

Private Function getCodeInx(ByVal grpCode As Integer, grpCodes() As Integer) As Integer
    Dim i As Integer
    For i = 1 To 10
        If grpCode = grpCodes(i) Then
            getCodeInx = i
            Exit Function
        End If
    Next i
    getCodeInx = 0
End Function

Private Function GetGrpCodes(HbtsjTbl As HBTSJ_TBL) As Long
    Dim i As Long, j As Long
    Dim rge As Range
    Dim v As Variant
    Dim dict As Object
    Set rge = Range(HbtsjTbl.objRge)
    Set dict = CreateObject("Scripting.Dictionary")
    j = 1
    For i = 2 To rge.Rows.Count
        v = rge(i, 1).Value
        If Not dict.exists(v) Then
            dict.Add v, j
            HbtsjTbl.Codes(j) = v
            j = j + 1
        End If
    Next i
    Set dict = Nothing
End Function

Private Function handleHbtsjData(HbtsjTbl As HBTSJ_TBL, HbtExtra As HBT_EXTRA) As Worksheet
    Dim i As Long, j As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim RgeSmpName As Range, rgeGrpName As Range
    Dim RgeYsk As Range, RgeYskName As Range
    Dim tmpSht As Worksheet
    Dim hbtsjobj As Variant, hbtsjvar As Variant
    Dim hbtsjVarSel As Variant
    Dim cateNameRow As Long, smpNum As Long, itmNum As Long, objSmpNum As Long
    Dim msgStr As String
    Dim grpFlgs(1 To 10) As Boolean
    Dim grpCodes(1 To 10) As Integer
    Dim tmpi As Integer
    Dim maxGrpCode As Integer
    
    On Error Resume Next
    GetGrpCodes HbtsjTbl
    j = 0
    maxGrpCode = 0
    For i = 1 To 10
        If HbtsjTbl.Codes(i) >= 1 And HbtsjTbl.Codes(i) <= 10 Then
            If grpFlgs(HbtsjTbl.Codes(i)) Then
                MsgBox "|fffd|Q|fffd|R|fffd|[|fffd|h|fffd||fffd||fffd|K|fffd||602||142||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
                Set handleHbtsjData = Nothing
                Exit Function
            End If
            grpFlgs(HbtsjTbl.Codes(i)) = True
            j = j + 1
            grpCodes(j) = HbtsjTbl.Codes(i)
            If grpCodes(j) > maxGrpCode Then maxGrpCode = grpCodes(j)
        End If
    Next i
    HbtsjTbl.GroupNum = j
    If j < 2 Then
            MsgBox "|fffd|Q|fffd|Q|fffd||20f||fffd||30c|Q|fffd|R|fffd|[|fffd|h|fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly Or vbInformation
            Set handleHbtsjData = Nothing
            Exit Function
    End If
    Set RgeObj = Range(HbtsjTbl.objRge)
    Set RgeVar = Range(HbtsjTbl.varRge)
    Set RgeSmpName = Range(HbtsjTbl.SmpNameRge)
    Set rgeGrpName = Range(HbtsjTbl.GrpNameRge)
    Set RgeYsk = Range(HbtExtra.yskRge)
    Set RgeYskName = Range(HbtExtra.yskNameRge)
    hbtsjvar = RgeVar.Value
    
    If Not rgeGrpName Is Nothing Then
        If rgeGrpName.Rows.Count < maxGrpCode Then
            MsgBox "|fffd|Q|fffd||fffd||fffd||302||303|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|", vbOKOnly Or vbInformation
            Set handleHbtsjData = Nothing
            Exit Function
        End If
    End If
    
    msgStr = ""
    If RgeVar Is Nothing Or RgeObj Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set handleHbtsjData = Nothing
        Exit Function
    End If
       
    If HbtExtra.bYskYes Then
        If RgeYsk Is Nothing Then
            MsgBox "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleHbtsjData = Nothing
            Exit Function
        End If
    End If
    
    smpNum = RgeVar.Rows.Count
    
    Set tmpSht = RgeVar.Worksheet.Parent.Sheets.Add
    Set rge = tmpSht.Range("$A$1")
    If RgeSmpName Is Nothing Then
        For i = 2 To smpNum
            rge(i, 1) = i - 1
        Next i
    Else
        Call PasteRange(RgeSmpName, rge(2, 1), xlPasteValues)
    End If
    smpNum = RgeVar.Rows.Count
    If HbtExtra.bYskYes Then
        If Not RgeYskName Is Nothing Then
            For i = 1 To RgeYskName.Rows.Count
                rge(i + smpNum, 1) = RgeYskName(i, 1)
            Next i
            If RgeYskName.Rows.Count < RgeYsk.Rows.Count Then
                For i = RgeYskName.Rows.Count + 1 To RgeYsk.Rows.Count
                    rge(i + smpNum, 1) = i + smpNum
                Next i
            End If
        Else
            For i = 1 To RgeYsk.Rows.Count
                rge(i + smpNum, 1) = i + smpNum
            Next i
        End If
    End If
        
    Set rge = tmpSht.Range("$C$1")
    Call PasteRange(RgeObj, rge, xlPasteValues)
    If m_varselect <> "0" Then
        hbtsjVarSel = Split(m_varselect, ",")
    Else
        ReDim hbtsjVarSel(0 To RgeVar.Columns.Count) As Long
        hbtsjVarSel(0) = RgeVar.Columns.Count
        For i = 1 To RgeVar.Columns.Count
            hbtsjVarSel(i) = i - 1
        Next i
    End If
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To hbtsjVarSel(0)
            rge(i, j + 1) = RgeVar(i, hbtsjVarSel(j) + 1)
        Next j
    Next i
    smpNum = RgeVar.Rows.Count
    If HbtExtra.bYskYes Then
        For i = 1 To RgeYsk.Rows.Count
            For j = 1 To hbtsjVarSel(0)
                rge(i + smpNum, j + 1) = RgeYsk(i, hbtsjVarSel(j) + 1)
            Next j
        Next i
        smpNum = smpNum + RgeYsk.Rows.Count
    End If
    HbtsjTbl.varRge = Range(rge(1, 2), rge(smpNum, hbtsjVarSel(0) + 1)).Address
      
    Set rge = Range("C1")
    objSmpNum = RgeObj.Rows.Count
    itmNum = hbtsjVarSel(0)
    '2011.01.28 added
    If itmNum > 200 Then
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleHbtsjData = Nothing
        Exit Function
    End If
    'end add
    Set rge = Range(rge(1, 1), rge(objSmpNum, itmNum + 1))
    For i = objSmpNum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) <> itmNum + 1 Then
            If HbtsjTbl.Except = 1 Then
                tmpSht.Rows(rge.Rows(i).Row).Delete
                smpNum = smpNum - 1
                objSmpNum = objSmpNum - 1
            Else
                Application.DisplayAlerts = False
                tmpSht.Delete
                Application.DisplayAlerts = True
                MsgBox "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
                Set handleHbtsjData = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = Range("D1")
    itmNum = hbtsjVarSel(0)
    Set rge = Range(rge(1, 1), rge(smpNum, itmNum))
    For i = smpNum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) <> itmNum Then
            If HbtsjTbl.Except = 1 Then
                tmpSht.Rows(rge.Rows(i).Row).Delete
                smpNum = smpNum - 1
            Else
                Application.DisplayAlerts = False
                tmpSht.Delete
                Application.DisplayAlerts = True
                MsgBox "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
                Set handleHbtsjData = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = tmpSht.Range("$C$1")
    For i = objSmpNum To 2 Step -1
        tmpi = 0
        If Not IsNumeric(rge(i, 1)) Then
            tmpi = CInt(StrConv(rge(i, 1), vbNarrow))
        Else
            tmpi = CInt(rge(i, 1))
        End If
        tmpi = getCodeInx(tmpi, grpCodes)
        If tmpi = 0 Then
            'rge(i, 1) = vbNullString
            tmpSht.Rows(rge.Rows(i).Row).Delete
            smpNum = smpNum - 1
            objSmpNum = objSmpNum - 1
        Else
            rge(i, 1) = tmpi
        End If
    Next i
    
    If smpNum < 2 Or objSmpNum < 2 Then
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
        MsgBox HBTSJ_ERR_SMP, vbCritical Or vbOKOnly
        Set handleHbtsjData = Nothing
        Exit Function
    End If
    
    Set rge = tmpSht.Range("$A$1")
    HbtsjTbl.SmpNameRge = Range(rge(2, 1), rge(smpNum, 1)).Address
    If rgeGrpName Is Nothing Then
        For i = 1 To HbtsjTbl.GroupNum
            rge(i, 2) = "|fffd|Q" & grpCodes(i)
        Next i
    Else
        'Call PasteRange(rgeGrpName, rge(1, 2), xlPasteValues)
        For i = 1 To HbtsjTbl.GroupNum
            rge(i, 2) = rgeGrpName(grpCodes(i), 1)
        Next i
    End If
    
    Set rge = tmpSht.Range("$A$2")
    HbtsjTbl.SmpNameRge = Range(rge(1, 1), rge(smpNum - 1, 1)).Address
    HbtsjTbl.SmpNameRge = tmpSht.name & "!" & HbtsjTbl.SmpNameRge
     
    Set rge = tmpSht.Range("$B$1")
    HbtsjTbl.GrpNameRge = Range(rge(1, 1), rge(HbtsjTbl.GroupNum, 1)).Address
    HbtsjTbl.GrpNameRge = tmpSht.name & "!" & HbtsjTbl.GrpNameRge
    
    Set rge = tmpSht.Range("$C$1")
    HbtsjTbl.objRge = Range(rge(1, 1), rge(objSmpNum, 1)).Address
    HbtsjTbl.objRge = tmpSht.name & "!" & HbtsjTbl.objRge
    
    HbtsjTbl.varRge = Range(rge(1, 2), rge(smpNum, hbtsjVarSel(0) + 1)).Address
    HbtsjTbl.varRge = tmpSht.name & "!" & HbtsjTbl.varRge
    
    Set handleHbtsjData = tmpSht
    On Error GoTo 0
End Function

Sub HbtsjGetVarSelect()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbtsj")
    m_varselect = GetVarSel(dlg, "edtVarRge", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|")
End Sub

Private Sub HbtsjMethod_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbtsj")
    bOn = (dlg.OptionButtons("optMethod3").Value = xlOn)
    dlg.CheckBoxes("chkScoreGrp").Enabled = Not bOn
    dlg.EditBoxes("edtXAxis").Enabled = (Not bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
    dlg.EditBoxes("edtYAxis").Enabled = (Not bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
    dlg.CheckBoxes("chkGrpCateDisp").Enabled = (Not bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
    dlg.CheckBoxes("chkGrpSmpNameDisp").Enabled = (Not bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
    bOn = (dlg.OptionButtons("optMethod2").Value = xlOn)
    dlg.EditBoxes("edtLevel").Enabled = bOn
    dlg.EditBoxes("edtFValue").Enabled = bOn
End Sub

Private Sub HbtsjShowGrp_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbtsj")
    bOn = (dlg.CheckBoxes("chkScoreGrp").Value = xlOn)
    dlg.EditBoxes("edtXAxis").Enabled = (bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
    dlg.EditBoxes("edtYAxis").Enabled = (bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
    dlg.CheckBoxes("chkGrpCateDisp").Enabled = (bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
    dlg.CheckBoxes("chkGrpSmpNameDisp").Enabled = (bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
End Sub

Private Sub HbtsjSmpName_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbtsj")
    bOn = (dlg.OptionButtons("optSmpName").Value = xlOn)
    dlg.EditBoxes("edtSmpName").Enabled = bOn
End Sub

Private Sub SetHbtsjMacro()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbtsj")
    dlg.Buttons("btnVarSel").OnAction = "HbtsjGetVarSelect"
    dlg.OptionButtons("optMethod1").OnAction = "HbtsjMethod_Click"
    dlg.OptionButtons("optMethod2").OnAction = "HbtsjMethod_Click"
    dlg.OptionButtons("optMethod3").OnAction = "HbtsjMethod_Click"
    dlg.OptionButtons("optSmpName").OnAction = "HbtsjSmpName_Click"
    dlg.OptionButtons("optSmpNo").OnAction = "HbtsjSmpName_Click"
    dlg.CheckBoxes("chkScoreGrp").OnAction = "HbtsjShowGrp_Click"
    HbtsjMethod_Click
    HbtsjSmpName_Click
    HbtsjShowGrp_Click
End Sub

Sub IS_MTHR_DA2() '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||295||fffd||fffd||fffd|
    Dim rtn As Integer, i As Long, j As Long, k As Long
    Dim titleStr As String
    Dim nExcelVer As Integer
    Dim tmpSht As Worksheet, tmpSht2 As Worksheet
    Dim mhbt As HBTSJ_TBL
    Dim mhbtExtra As HBT_EXTRA
    Dim actSht As Worksheet
    Dim rge As Range, r1 As Range, r2 As Range
    Dim itemNum As Long, rowNum As Long
    Dim dblScores() As Double
    
    On Error Resume Next
    
    Set actSht = ActiveSheet
    
    m_varselect = getDefaultVarSelect(FUNC_NO.FUNC_DA2)
    If bRangeChanged_Frm(FUNC_NO.FUNC_DA2, frmDA.RgeVar.Text) Then m_varselect = "0"
redisp:
    m_bvarselected = False
    
    frmDA2.bvarselected = m_bvarselected
    frmDA2.VarSelect = m_varselect
    frmDA2.Show
    m_varselect = "0"
    If Not frmDA2.bOK Then Exit Sub
    
    m_bvarselected = frmDA2.bvarselected
    m_varselect = frmDA2.VarSelect
    
    Call setDefaultAddress(FUNC_NO.FUNC_DA2, getCurrentAddress_Frm(frmDA.RgeVar.Text))
    Call setDefaultVarSelect(FUNC_NO.FUNC_DA2, m_varselect)
    
    mhbt.method = 1
do_DA2:
    mhbt.objRge = frmDA2.RgeObj.Text
    mhbt.varRge = frmDA2.RgeVar.Text
    mhbt.outRge = ""
    mhbt.bNewSheet = 1 'IIf(dlg.OptionButtons("optNewSheet").Value = xlOn, 1, 0)
    'mhbt.method = IIf(frmDA2.optVarNone = True, 1, 3)
    mhbt.Level = 0.15
    mhbt.FValue = 2
    'mhbt.GroupNum = val(dlg.EditBoxes("edtGroupNum").Text)
    mhbt.Codes(1) = 0
    mhbt.Codes(2) = 0
    mhbt.Codes(3) = 0
    mhbt.Codes(4) = 0
    mhbt.Codes(5) = 0
    mhbt.Codes(6) = 0
    mhbt.Codes(7) = 0
    mhbt.Codes(8) = 0
    mhbt.Codes(9) = 0
    mhbt.Codes(10) = 0
    mhbt.Except = IIf(frmDA2.optExcept = True, 1, 2)
    If (frmDA2.optSmpNo) Then
        mhbt.SmpNameRge = vbNullString
    Else
        mhbt.SmpNameRge = Trim(frmDA2.RgeSmpName.Text)
    End If
    mhbt.GrpNameRge = ""
    mhbt.bShowGrp = IIf(frmDA2.chkOutGrp = True, 1, 0)
    mhbt.nXAxis = val(frmDA2.XAxes.Text)
    mhbt.nYAxis = val(frmDA2.YAxes.Text)
    mhbt.bShowCateName = 1
    mhbt.bShowSmpName = IIf(frmDA2.chkNameDispSmp = True, 1, 0)
    
    mhbtExtra.bYskYes = frmDA2.chkYsk
    mhbtExtra.yskRge = frmDA2.RgeYskData
    mhbtExtra.yskNameRge = frmDA2.RgeYskName
    mhbtExtra.bExtraInfo = IIf(frmDA2.optExtraInfoYes = True, 1, 0)
    mhbtExtra.bExceptN0 = IIf(frmDA2.optExcept_n0 = True, 1, 0)
    
    Set rge = Range(mhbt.varRge)
    itemNum = rge.Columns.Count

    If itemNum <= 30 Then
        rtn = do_SR2EX_Internal(mhbt, mhbtExtra)
        If rtn = 0 Then Set tmpSht2 = ActiveSheet
    Else
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||310||fffd||fffd||fffd|30|fffd||12d02||fffd||fffd||fffd||181|A""|fffd|}|fffd|n|fffd||fffd||fffd|m|fffd|r|fffd|X|fffd||10b||fffd||fffd||fffd|""|fffd||fffd|""|fffd|m|fffd||fffd|""|fffd||30c|v|fffd|Z|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
        rtn = 0
        Set tmpSht2 = Nothing
    End If
    If rtn = 0 Then
        Set tmpSht = handleHbtsjData(mhbt, mhbtExtra)
        If tmpSht Is Nothing Then
            If Not tmpSht2 Is Nothing Then
                Application.DisplayAlerts = False
                tmpSht2.Delete
                Application.DisplayAlerts = True
            End If
            GoTo redisp
        End If
        
        mhbt.objRge = toXlRCstr(mhbt.objRge)
        mhbt.varRge = toXlRCstr(mhbt.varRge)
        'mhbt.outRge = toXlRCstr(mhbt.outRge)
        mhbt.SmpNameRge = toXlRCstr(mhbt.SmpNameRge)
        mhbt.GrpNameRge = toXlRCstr(mhbt.GrpNameRge)
        
        actSht.Activate
        
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = fTH1_HanbetsuSj_vba(mhbt)
        If rtn = 1 And itemNum <= 30 Then
            If mhbt.method = 1 Then
                Set rge = ActiveSheet.Columns("A")
                Set r1 = rge.Find("|fffd||fffd||fffd||294||fffd||fffd||293||fffd||fffd|_|fffd||fffd||fffd||fffd|")
                If Not r1 Is Nothing Then
                    Set r1 = r1(mhbt.GroupNum + 4, 1)
                    Set r2 = rge.Find("|fffd||fffd||fffd||283|N|fffd||fffd||fffd|X|fffd|\", r1)
                    If Not r2 Is Nothing Then
                        For i = 1 To mhbt.GroupNum
                            r2.Resize(1, mhbt.GroupNum + 6).Insert xlDown
                        Next i
                        #If 1 Then
                        Set r2 = r2.Offset(-2, 0)
                        Set r1 = Range(r1(1, 1), r2(1, 1))
                        Set r2 = r1(1, 1)
                        For i = 1 To mhbt.GroupNum * 2 + 4
                            r1.Insert xlToRight
                        Next i
                        For i = 1 To mhbt.GroupNum
                            r1.Columns(mhbt.GroupNum + 1).Delete
                        Next i
                        Set r1 = tmpSht2.UsedRange
                        If Not r1 Is Nothing Then
                            r1(3, 1).Resize(r1.Rows.Count - 2, r1.Columns.Count).Copy rge.Find("|fffd||fffd||fffd||294||fffd||fffd||293||fffd||fffd|_|fffd||fffd||fffd||fffd|")(mhbt.GroupNum + 4, 1)
                        End If
                        #End If
                        If Not frmDA2.optVarNone Then
                            rowNum = Range("C4")
                            Set r1 = ActiveSheet.Columns(mhbt.GroupNum * 2 + 5).Find("|fffd||fffd||fffd||293||fffd||fffd|_")
                            If Not r1 Is Nothing Then
                                ReDim dblScores(1 To mhbt.GroupNum - 1)
                                For i = 1 To mhbt.GroupNum - 1
                                    dblScores(i) = WorksheetFunction.StDevP(r1(3, i + 1).Resize(rowNum, 1))
                                Next i
                                Application.DisplayAlerts = False
                                ActiveSheet.Delete
                                If Not tmpSht2 Is Nothing Then
                                    tmpSht2.Delete
                                End If
                                tmpSht.Delete
                                Application.DisplayAlerts = True
                                mhbt.method = 3
                                GoTo do_DA2
                            End If
                        End If
                    End If
                End If
            Else
                Set rge = ActiveSheet.Columns("A")
                Set r1 = rge.Find("|fffd|g|fffd||74d||fffd||fffd||d0b9||fffd||50d||fffd|")
                Set r1 = rge.Find("|fffd|g|fffd||74d||fffd||fffd||d0b9|", r1)
                rowNum = Range(r1(2, 1), r1(2, 1).End(xlDown)).Rows.Count
                Set r1 = r1.Offset(-2, 0)
                Set r2 = tmpSht2.UsedRange
                r2.Copy r1
                r1.Resize(1, (mhbt.GroupNum - 1) * 2 + 15).Insert xlDown
                Set r1 = rge.Find("|fffd|g|fffd||74d||fffd||fffd||d0b9|", r1.Offset(3, 0))
                If Not r1 Is Nothing Then
                    Set r2 = Range(r1(1, 1), r1(1, 1).End(xlToRight))
                    itemNum = r2.Columns.Count
                    Call SetRangeBorder(r1.Offset(-1, 0).Resize(1, r2.Columns.Count), xlNone, xlNone, xlNone, xlThin)
                    r1.Offset(1, 0).Resize(1, itemNum).Delete Shift:=xlUp
                    For i = 1 To rowNum * (mhbt.GroupNum - 1) Step (mhbt.GroupNum - 1)
                        For j = 1 To itemNum
                            For k = 1 To mhbt.GroupNum - 1
                                If r1(i + k, j + 3) <> "" Then
                                    r1(i + k, j + 3) = r1(i + k, j + 3) * dblScores(k)
                                End If
                            Next k
                        Next j
                    Next i
                End If
            End If
        End If
        Application.DisplayAlerts = False
        If Not tmpSht2 Is Nothing Then
            tmpSht2.Delete
        End If
        tmpSht.Delete
        Application.DisplayAlerts = True
    End If
    On Error GoTo 0
End Sub

Private Function do_SR2EX_Internal(mhbt As HBTSJ_TBL, HbtExtra As HBT_EXTRA) As Long
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet, outSht As Worksheet, outShtMid As Worksheet
    Dim RgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    Dim edtObj As EditBox
    Dim bOutMid As Boolean, strBkName As String, bkName As String
    Dim actSht As Worksheet
    Dim nid As Long
    Dim sr2tbl As Srk2Para
    
    With mhbt
        sr2tbl.RgeObj = .objRge
        sr2tbl.RgeVar = .varRge
        sr2tbl.RgeVarKind = ""
        sr2tbl.bExcept = .Except
        sr2tbl.nVarSelMethod = IIf(.method = 1, 1, 2)
        sr2tbl.bSmpName = .bShowSmpName
        sr2tbl.bYsk = IIf(HbtExtra.bYskYes, 1, 0)
        If sr2tbl.bYsk = 1 Then
            sr2tbl.RgeYskData = HbtExtra.yskRge
            sr2tbl.RgeYskName = HbtExtra.yskNameRge
        End If
        sr2tbl.bExtraInfo = HbtExtra.bExtraInfo
        sr2tbl.bNum2Class = 0
        If sr2tbl.bSmpName = 1 Then
            sr2tbl.RgeSmpName = .SmpNameRge
        End If
        sr2tbl.bCateName = 0
        sr2tbl.bPointGrp = .bShowGrp
        sr2tbl.bCateNameDisp = .bShowCateName
        sr2tbl.bSmpNameDisp = .bShowSmpName
        sr2tbl.nXAxis = .nXAxis
        sr2tbl.nYAxis = .nYAxis
        sr2tbl.bExcept_n0 = HbtExtra.bExceptN0
    End With
    do_SR2EX_Internal = IS_MTHR_SR2EX_Internal(FUNC_NO.FUNC_DA2, sr2tbl, m_varselect)
End Function
Attribute VB_Name = "mdlMssb"
'=======================================================
' |fffd||542c||fffd||fffd||fffd||fffd||fffd||fffd|
'
' 09.03 WZH
'=======================================================
Option Private Module
Option Explicit

Type paratbl
    '|fffd||348||34e|w|fffd||fffd|
    srcDataRef As String * 256
    objDataRef As String * 256
    srcNameRef As String * 256

    '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A
    bSmpScrDisp As Long   '|fffd|\|fffd||fffd|
    bSmpScrYsk As Long    '|fffd|\|fffd||fffd|
    
    'Option
    cateSelect As Long     ' |fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||311|I|fffd||fffd|
    SsbNum As Long      ' 2<=SsbNum<=|fffd||3d0||fffd|-1

    '|fffd|_|fffd|O|fffd||fffd||fffd|t
    bTenGrpDisp As Long           '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd|;
    flgTenGrpNum As Long          '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||310||fffd| --- 1(|fffd|P|fffd|})or 2(|fffd|S|fffd|})
    Yoko_Axis As Long             '1<=Yoko_Axis<=AxisNum;
    Tate_Axis As Long             '1<=Tate_Axis<=AxisNum;
    mojiNum As Long               '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||241|A|fffd|_|fffd||fffd||fffd||302||fffd||fffd||fffd||a347||fffd||315||fffd||fffd||fffd||fffd||fffd|
    bGrpCateDisp As Long          '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||243|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O;
  
    '
    bSmpLableNo As Long   ' |fffd||5368e||fffd||fffd||fffd||fffd||642||315|\|fffd||fffd|; TRUE : No.|fffd||155|\|fffd||fffd||fffd|C FALSE : |fffd||5368e||496||fffd||fffd||155|\|fffd||fffd|
    bExcept As Long
    bGrpCateBar As Long
    bGrpCateTen As Long
    bGrpAttrBar As Long
    bGrpAttrTen As Long
    bAttrDisp As Long       '|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|\|fffd||fffd|;
    bAttrCateDisp As Long
    AttrRange As String * 256
    AttrCateRange As String * 256
    VarSelect As String * 256
    DataType As Long
    AnaMode As Long
End Type

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private ssbtbl As paratbl, ssbtry As paratbl
#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function ssb_vba Lib "MTHR_F_THR2_64.dll" (ssbtbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
        Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
                                           (Destination As Any, Source As Any, ByVal Length As Long)
    #Else
        Private Declare Function ssb_vba Lib "MTHR_F_THR2_64.dll" (ssbtbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
        Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
                   (Destination As Any, Source As Any, ByVal Length As Long)
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function ssb_vba Lib "MTHR_F_THR2.dll" (ssbtbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
        Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
                                           (Destination As Any, Source As Any, ByVal Length As Long)
    #Else
        Private Declare Function ssb_vba Lib "MTHR_F_THR2.dll" (ssbtbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
        Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
                   (Destination As Any, Source As Any, ByVal Length As Long)
    #End If
#End If

'==============================================================================================

Function ReallocGrp(ByVal n As Long) As Long
    ReDim VbaGrp(1 To n)
    Call InitGrpAry(VbaGrp)
    ReallocGrp = 0
End Function
'
'|fffd||3d0||fffd||fffd|I|fffd||fffd|
Private Sub SsbGetVarSel()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim RgeVar As Range
    Dim valvar As Variant
    Dim savLabelA As String, savLabelB As String
    
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgMssb")
    Set RgeVar = Range(dlg.EditBoxes("srcDataRef").Text)
    Set RgeVar = Range(RgeVar(1, 1), RgeVar(1, RgeVar.Columns.Count))
    If Err.Number <> 0 Then
        Err.Clear
        m_varselect = vbNullString
        On Error GoTo 0
        Exit Sub
    End If
    valvar = RgeVar.Value()
    For i = 1 To RgeVar.Columns.Count
        m_varselect = m_varselect & "," & valvar(1, i)
    Next i
        
    'save
    savLabelA = frmVarSel.Label1.Caption
    savLabelB = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|"
    frmVarSel.Label2.Caption = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|"
    
    m_varselect = VarSelect(Mid(m_varselect, 2))
    
    'recovery
    frmVarSel.Label1.Caption = savLabelA
    frmVarSel.Label2.Caption = savLabelB
    
    On Error GoTo 0
End Sub
'
'|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A : |fffd|\|fffd||fffd|
Private Sub SsbCtrlMacro_SmpScr()
    Dim dlg As DialogSheet
    Dim bOn As Boolean

    Set dlg = ThisWorkbook.DialogSheets("DlgMssb")
    bOn = (dlg.CheckBoxes("bSmpScrDisp") = xlOn)
    
    dlg.CheckBoxes("bAttrDisp").Enabled = bOn
    Call SsbCtrlMacro_AttrDsp

    dlg.CheckBoxes("bTenGrpDisp").Enabled = bOn
    
End Sub
'
'|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A : |fffd|\|fffd||fffd|
Private Sub SsbCtrlMacro_SmpScrYsk()
    Call CommSetEditBox_byChk("DlgMssb", "bSmpScrYsk", "YskSmpName")
    Call CommSetEditBox_byChk("DlgMssb", "bSmpScrYsk", "objDataRef")
End Sub
'
'|fffd||5368e||483||fffd||fffd|x|fffd||fffd||fffd||315|\|fffd||fffd|
Private Sub SsbCtrlMacro_SmpName()
    Call CommSetEditBox_byOpt("DlgMssb", "optSmpName", "srcNameRef")
End Sub
'
'|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S : |fffd|\|fffd||fffd|
Private Sub SsbCtrlMacro_AttrDsp()
    Dim dlg As DialogSheet
    Dim bOn As Boolean, ChkObj As CheckBox
    
    Set dlg = ThisWorkbook.DialogSheets("DlgMssb")
    Set ChkObj = dlg.CheckBoxes("bAttrDisp")
    bOn = (ChkObj = xlOn And ChkObj.Enabled = True)
    
    'cate name
    Set ChkObj = dlg.CheckBoxes("bAttrCateDisp")
    ChkObj.Enabled = bOn
    dlg.EditBoxes("attrCateRange").Enabled = (bOn And ChkObj = xlOn)
    
    'graph
    dlg.CheckBoxes("bGrpAttrBar").Enabled = bOn
    dlg.CheckBoxes("bGrpAttrTen").Enabled = bOn
    
    '10.12.20 DZH add
    If (Not bOn And dlg.CheckBoxes("bGrpAttrBar") = xlOn) Then
        dlg.CheckBoxes("bGrpAttrBar") = xlOff
        Call SsbCtrlMacro_GraphDsp
    End If
    If (Not bOn And dlg.CheckBoxes("bGrpAttrTen") = xlOn) Then
        dlg.CheckBoxes("bGrpAttrTen") = xlOff
        Call SsbCtrlMacro_GraphDsp
    End If
    
    'data range
    Call CommSetEditBox_byChk("DlgMssb", "bAttrDisp", "attrRange")
End Sub
'
'|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S : |fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|\|fffd||fffd|
Private Sub SsbCtrlMacro_AttrCateName()
    Call CommSetEditBox_byChk("DlgMssb", "bAttrCateDisp", "attrCateRange")
End Sub
'
'1|fffd|} / |fffd|S|fffd|}
Private Sub SsbCtrlMacro_Graph()
    Call CommSetEditBox_byOpt("DlgMssb", "flgTenGrpNum", "Tate_Axis")
    Call CommSetEditBox_byOpt("DlgMssb", "flgTenGrpNum", "Yoko_Axis")
End Sub

'|fffd||3d0||fffd||fffd||fffd||fffd||189||5368e||483||fffd||fffd|x|fffd||fffd||fffd||fffd| |fffd|\|fffd||fffd|
Private Sub SsbCtrlMacro_CateDisp()
    Call CommSetEditBox_byChk("DlgMssb", "bGrpCateDisp", "mojiNum")
End Sub

'Graph display setting
'10.12.20 DZH
Sub SsbCtrlMacro_GraphDsp()
    Dim dlg As DialogSheet
    Dim ChkObj1 As CheckBox, ChkObj2 As CheckBox, ChkObj3 As CheckBox, ChkObj4 As CheckBox, ChkObj5 As CheckBox
    Dim bOn1 As Boolean, bOn2 As Boolean, bOn3 As Boolean, bOn4 As Boolean, bOn5 As Boolean
    Dim bOn As Boolean
    
    Set dlg = ThisWorkbook.DialogSheets("DlgMssb")
    Set ChkObj1 = dlg.CheckBoxes("bGrpCateBar")
    Set ChkObj2 = dlg.CheckBoxes("bGrpCateTen")
    Set ChkObj3 = dlg.CheckBoxes("bTenGrpDisp")
    Set ChkObj4 = dlg.CheckBoxes("bGrpAttrBar")
    Set ChkObj5 = dlg.CheckBoxes("bGrpAttrTen")
    
    bOn = IIf(ChkObj1 = xlOn Or ChkObj2 = xlOn Or ChkObj3 = xlOn Or ChkObj4 = xlOn Or ChkObj5 = xlOn, True, False)
    
    With dlg
        .OptionButtons("flgTenGrpNum").Enabled = bOn
        .OptionButtons("flgTenGrpNumAll").Enabled = bOn
        .EditBoxes("Yoko_Axis").Enabled = bOn
        .EditBoxes("Tate_Axis").Enabled = bOn
        .CheckBoxes("bGrpCateDisp").Enabled = bOn
        .EditBoxes("mojiNum").Enabled = bOn
    End With
 
    Call SsbCtrlMacro_Graph
    Call SsbCtrlMacro_CateDisp
    
End Sub

'
Private Sub SSB_setMacro(ByVal dlg As DialogSheet)
    'var select
    dlg.Buttons("cateSelect").OnAction = "SsbGetVarSel"
    
    'sample score
    'dlg.CheckBoxes("bSmpScrDisp").OnAction = "SsbCtrlMacro_SmpScr"
    dlg.CheckBoxes("bSmpScrYsk").OnAction = "SsbCtrlMacro_SmpScrYsk"
    
    'sample name
    dlg.OptionButtons("optSmpNo").OnAction = "SsbCtrlMacro_SmpName"
    dlg.OptionButtons("optSmpName").OnAction = "SsbCtrlMacro_SmpName"
    
    '|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S
    dlg.CheckBoxes("bAttrDisp").OnAction = "SsbCtrlMacro_AttrDsp"
    dlg.CheckBoxes("bAttrCateDisp").OnAction = "SsbCtrlMacro_AttrCateName"
    
    'graph
    dlg.OptionButtons("flgTenGrpNum").OnAction = "SsbCtrlMacro_Graph"
    dlg.OptionButtons("flgTenGrpNumAll").OnAction = "SsbCtrlMacro_Graph"
    '|fffd||3d0||fffd||fffd||fffd||fffd||189||5368e||483||fffd||fffd|x|fffd||fffd||fffd||fffd| |fffd|\|fffd||fffd|
    dlg.CheckBoxes("bGrpCateDisp").OnAction = "SsbCtrlMacro_CateDisp"
    
    'Graph display;  10.12.20 DZH
    dlg.CheckBoxes("bGrpCateBar").OnAction = "SsbCtrlMacro_GraphDsp"
    dlg.CheckBoxes("bGrpCateTen").OnAction = "SsbCtrlMacro_GraphDsp"
    dlg.CheckBoxes("bTenGrpDisp").OnAction = "SsbCtrlMacro_GraphDsp"
    dlg.CheckBoxes("bGrpAttrBar").OnAction = "SsbCtrlMacro_GraphDsp"
    dlg.CheckBoxes("bGrpAttrTen").OnAction = "SsbCtrlMacro_GraphDsp"
        
End Sub
'
'return TRUE = OK else ERROR
'
Private Function chkSsbData() As Boolean
    Dim rgeData As Range, RgeYsk As Range, RgeSmpName As Range, rgeAttr As Range, rgeAttrCateName As Range
    Dim msgStr As String
    Dim tmpi As Long, yokoNo As Long, tateNo As Long
    Dim itemNum As Long
    
    'init
    msgStr = ""

    On Error Resume Next
    Set rgeData = Range((ssbtbl.srcDataRef))
    Set RgeYsk = Range((ssbtbl.objDataRef))
    Set RgeSmpName = Range((ssbtbl.srcNameRef))
    Set rgeAttr = Range((ssbtbl.AttrRange))
    Set rgeAttrCateName = Range((ssbtbl.AttrCateRange))
    On Error GoTo 0
    
    If rgeData Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    itemNum = rgeData.Columns.Count
    tmpi = ssbtbl.SsbNum
    yokoNo = ssbtbl.Yoko_Axis
    tateNo = ssbtbl.Tate_Axis
    If (tmpi < 2 Or tmpi > itemNum) Or _
       ((ssbtbl.flgTenGrpNum = 1) And (yokoNo < 1 Or yokoNo > 5 Or tateNo < 1 Or tateNo > 5)) Then
        msgStr = "|fffd||fffd||fffd|i|fffd||fffd||fffd||310||fffd||fffd|A|fffd|^|fffd|e|fffd||fffd||fffd|A|fffd||fffd||fffd|R|fffd||fffd||fffd|j|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If ssbtbl.bSmpScrYsk = 1 And RgeYsk Is Nothing Then
        msgStr = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    
    If ssbtbl.bSmpScrYsk = 1 And Not RgeYsk Is Nothing Then
        If RgeYsk.Columns.Count <> itemNum Then
            msgStr = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            GoTo chkEnd
        End If
    End If
    
    '
    If ssbtbl.bSmpLableNo = 0 And RgeSmpName Is Nothing Then
        msgStr = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If ssbtbl.bAttrDisp = 1 And rgeAttr Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If ssbtbl.bAttrCateDisp = 1 And rgeAttrCateName Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    
    If ssbtbl.mojiNum < 1 Or ssbtbl.mojiNum > 128 Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|128|fffd||209||fffd||fffd||242||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
        GoTo chkEnd
    End If
    
    '
chkEnd:
    If msgStr <> "" Then
        MsgBox msgStr
        chkSsbData = False
        Exit Function
    End If
    
    '
    chkSsbData = True
End Function

Private Function SetValues(ByVal outRge As Range, ByVal Values As Variant) As Range
    Dim i As Long, j As Long, l As Long
    l = 1
    If IsArray(Values) Then
        For i = LBound(Values) To UBound(Values)
            For j = LBound(Values, 2) To UBound(Values, 2)
                outRge(l, 1).Value = Values(i, j)
                l = l + 1
            Next j
        Next i
    Else
        outRge(l, 1) = Values
        l = l + 1
    End If
    Set SetValues = Range(outRge, outRge(l - 1, 1))
End Function

Private Function handleSsbData(ByVal RgeYskSmpName As Range) As Worksheet
    Dim i As Long, j As Long, l As Long
    Dim rgeSrc As Range, RgeObj As Range, rge As Range
    Dim RgeSmpName As Range, rgeAttrData As Range, rgeAttrName As Range
    Dim tmpRge As Range
    Dim tmpSht As Worksheet
    Dim ssbobj As Variant, ssbvar As Variant, ssbcate As Variant
    Dim ssbVarSel As Variant
    Dim cateNameRow As Long, CateNum As Long, smpNum As Long, itemNum As Long
    Dim attrColNum As Long
    Dim msgStr As String
    
    On Error Resume Next
    Set rgeSrc = Range(ssbtbl.srcDataRef)
    If ssbtbl.bSmpScrDisp = 1 Then
        Set RgeObj = Range(ssbtbl.objDataRef)
    End If
    If ssbtbl.bSmpLableNo = 0 Then
        Set RgeSmpName = Range(ssbtbl.srcNameRef)
    End If
    If ssbtbl.bAttrDisp = 1 Then
        Set rgeAttrData = Range(ssbtbl.AttrRange)
    End If
    If ssbtbl.bAttrCateDisp = 1 Then
        Set rgeAttrName = Range(ssbtbl.AttrCateRange)
    End If
    smpNum = rgeSrc.Rows.Count
    itemNum = rgeSrc.Columns.Count
    Set tmpSht = rgeSrc.Worksheet.Parent.Sheets.Add
    Set rge = tmpSht.Range("$A$1")
    If RgeSmpName Is Nothing Then
        For i = 1 To smpNum - 1
            rge(i + 1, 1).Value = "|fffd||5368e||fffd|" & i
        Next i
        ssbtbl.srcNameRef = toXlRCstr(Range(rge(2, 1), rge(smpNum, 1)).Address) & vbNullChar
    Else
        ssbvar = RgeSmpName.Value
        Set tmpRge = SetValues(rge(2, 1), ssbvar)
        ssbtbl.srcNameRef = toXlRCstr(tmpRge.Address) & vbNullChar
    End If
    
    If ssbtbl.bSmpScrYsk = 1 Then
        If Not RgeYskSmpName Is Nothing Then
            SetValues rge(smpNum + 1, 1), RgeYskSmpName.Value
            ssbtbl.srcNameRef = toXlRCstr(Range(rge(2, 1), rge(smpNum + RgeYskSmpName.Rows.Count, 1)).Address) & vbNullChar
        Else
            For i = 1 To RgeObj.Rows.Count
                rge(smpNum + i, 1) = "|fffd|\|fffd||fffd|" & i
            Next i
            ssbtbl.srcNameRef = toXlRCstr(Range(rge(2, 1), rge(smpNum + RgeObj.Rows.Count, 1)).Address) & vbNullChar
        End If
    End If
    
    If m_varselect <> "0" Then
        ssbVarSel = Split(m_varselect, ",")
    Else
        ReDim ssbVarSel(0 To itemNum) As Long
        ssbVarSel(0) = itemNum
        For i = 1 To itemNum
            ssbVarSel(i) = i - 1
        Next i
    End If
    
    itemNum = ssbVarSel(0)

    For i = 1 To smpNum
        For j = 1 To itemNum
            rge(i, j + 1) = rgeSrc(i, ssbVarSel(j) + 1)
        Next j
    Next i
    ssbtbl.srcDataRef = toXlRCstr(Range(rge(1, 2), rge(smpNum, itemNum + 1)).Address) & vbNullChar
    
    If Not RgeObj Is Nothing Then
        For i = 1 To RgeObj.Rows.Count
            For j = 1 To itemNum
                rge(i + smpNum, j + 1) = RgeObj(i, ssbVarSel(j) + 1)
            Next j
        Next i
        ssbtbl.objDataRef = toXlRCstr(Range(rge(smpNum + 1, 2), rge(smpNum + RgeObj.Rows.Count, itemNum + 1)).Address) & vbNullChar
    End If
    
    If Not rgeAttrData Is Nothing Then
        Set tmpRge = PasteRange(rgeAttrData, rge(1, itemNum + 2), xlPasteValues)
        ssbtbl.AttrRange = toXlRCstr(tmpRge.Address) & vbNullChar
        attrColNum = tmpRge.Columns.Count
    End If
    If Not rgeAttrName Is Nothing Then
        Set tmpRge = PasteRange(rgeAttrName, rge(1, itemNum + 2 + attrColNum), xlPasteValues)
        ssbtbl.AttrCateRange = toXlRCstr(tmpRge.Address) & vbNullChar
    End If
    ssbtbl.bSmpLableNo = 0
    Set handleSsbData = tmpSht
    On Error GoTo 0
End Function
'
Sub IS_MTHR_PCA()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet, ChkObj As CheckBox
    Dim RgeVar As Range, RgeYskSmpName As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim tmpSht As Worksheet
    Dim grpType0 As Integer
    Dim chartName As String, grpData0 As String
    Dim para As Object
    Dim chartTitle As String
    Dim txtLen As Integer
    Dim fontsize As Integer
    Dim bSmpName As Integer
    Dim predictNum As Integer
    Dim GDataSheet As String
    Dim VerNoXL As Integer
    Dim r As Range, rTry As Range, actSht As Worksheet
    Dim chtObj As ChartObject
    Dim v As Variant
    
    On Error Resume Next
    
    Set actSht = ActiveSheet
    
    '2009.06.03 mdf for the UNICODE text cannot be shown in a chart created by C
    'Drawing a chart in VBA is OK
    VerNoXL = 12 'getExcelVerNo()
    'end mdf
    
    ReDim VbaGrp(1 To maxGrpNum)
    Call InitGrpAry(VbaGrp)
    
    Set dlg = ThisWorkbook.DialogSheets("DlgMssb")
    
    Call SSB_setMacro(dlg)
    
    'init
    Call SsbCtrlMacro_SmpScr
    Call SsbCtrlMacro_SmpScrYsk
    Call SsbCtrlMacro_SmpName
    Call SsbCtrlMacro_AttrDsp
    Call SsbCtrlMacro_AttrCateName
    Call SsbCtrlMacro_Graph
    Call SsbCtrlMacro_CateDisp
    Call SsbCtrlMacro_GraphDsp  '10.12.20 DZH
    
redisp:
    m_varselect = "0"
    
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        If m_varselect = vbNullString Then
            GoTo redisp
        Else
            ssbtbl.VarSelect = m_varselect
        End If
        ssbtbl.objDataRef = (dlg.EditBoxes("objDataRef").Text) & vbNullChar
        ssbtbl.srcDataRef = (dlg.EditBoxes("srcDataRef").Text) & vbNullChar
        ssbtbl.srcNameRef = (dlg.EditBoxes("srcNameRef").Text) & vbNullChar
        Set ChkObj = dlg.CheckBoxes("bAttrDisp")
        ssbtbl.bAttrDisp = IIf(ChkObj = xlOn And ChkObj.Enabled = True, 1, 0)
        ssbtbl.AttrCateRange = (dlg.EditBoxes("attrCateRange").Text) & vbNullChar
        ssbtbl.AttrRange = (dlg.EditBoxes("attrRange").Text) & vbNullChar
        '
        ssbtbl.SsbNum = val(dlg.EditBoxes("edtSsbNum").Text)
        ssbtbl.bExcept = IIf(dlg.OptionButtons("bExcept") = xlOn, 1, 0)
        
        If ssbtbl.bAttrDisp = 1 Then
            ssbtbl.bAttrCateDisp = IIf(dlg.CheckBoxes("bAttrCateDisp") = xlOn, 1, 0)
            ssbtbl.bGrpAttrBar = IIf(dlg.CheckBoxes("bGrpAttrBar") = xlOn, 1, 0)
            ssbtbl.bGrpAttrTen = IIf(dlg.CheckBoxes("bGrpAttrTen") = xlOn, 1, 0)
        Else
            ssbtbl.bAttrCateDisp = 0
            ssbtbl.bGrpAttrBar = 0
            ssbtbl.bGrpAttrTen = 0
        End If
        
        ssbtbl.bGrpCateBar = IIf(dlg.CheckBoxes("bGrpCateBar") = xlOn, 1, 0)
        ssbtbl.bGrpCateTen = IIf(dlg.CheckBoxes("bGrpCateTen") = xlOn, 1, 0)
        ssbtbl.bGrpCateDisp = IIf(ssbtbl.bGrpCateTen = 1 And dlg.CheckBoxes("bGrpCateDisp") = xlOn, 1, 0)
        '
        ssbtbl.bSmpLableNo = IIf(dlg.OptionButtons("optSmpNo") = xlOn, 1, 0)
        ssbtbl.bSmpScrDisp = 1 'IIf(dlg.CheckBoxes("bSmpScrDisp") = xlOn, 1, 0)
        ssbtbl.bSmpScrYsk = IIf(dlg.CheckBoxes("bSmpScrYsk") = xlOn, 1, 0)
        If ssbtbl.bSmpScrYsk = 1 Then
            Set RgeYskSmpName = Range(dlg.EditBoxes("YskSmpName").Text)
        Else
            Set RgeYskSmpName = Nothing
        End If
        '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|_|fffd|O|fffd||fffd||fffd|t
        ssbtbl.bTenGrpDisp = IIf(ssbtbl.bSmpScrDisp = 1 And dlg.CheckBoxes("bTenGrpDisp") = xlOn, 1, 0)
        
        ssbtbl.cateSelect = 0
        ssbtbl.flgTenGrpNum = IIf(dlg.OptionButtons("flgTenGrpNum") = xlOn, 1, 2)
        ssbtbl.mojiNum = val(dlg.EditBoxes("mojiNum").Text)

        ssbtbl.Tate_Axis = val(dlg.EditBoxes("Tate_Axis").Text)
        ssbtbl.Yoko_Axis = val(dlg.EditBoxes("Yoko_Axis").Text)
        ssbtbl.DataType = IIf(dlg.OptionButtons("optRele") = xlOn, 1, 2)
        ssbtbl.AnaMode = 2 'IIf(dlg.OptionButtons("optModeVect") = xlOn, 1, 2)
        
        If chkSsbData() = False Then
            GoTo redisp
        End If
        
        Set tmpSht = handleSsbData(RgeYskSmpName)
        If tmpSht Is Nothing Then GoTo redisp
        
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        
        rtn = ssb_vba(ssbtbl, CInt(VerNoXL), VbaGrp())
                
        If rtn = 0 And VerNoXL >= 12 Then
            grpType0 = 0
            Set chtObj = Nothing
            For i = 1 To maxGrpNum
                If VbaGrp(i).Type <> 0 Then
                    Call ConvToBSTR(VbaGrp(i))
                    If VbaGrp(i).Type = 5 Then
                        VbaGrp(i).grpPara = VbaGrp(i).grpPara & "&flgFrom=1"
                        Application.Run GxlaBkGraph2 & "!DrawSr3AttrBar", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    ElseIf VbaGrp(i).Type = 6 Then
                        Application.Run GxlaBkGraph2 & "!DrawSr3AttrScore", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    Else
                        On Error Resume Next
                        Set para = Comm_SetDict(VbaGrp(i).grpPara)
                        On Error GoTo 0
                        If para Is Nothing Then Exit Sub
                        chartTitle = para("chartTitle")
                        txtLen = CLng(para("txtLen"))
                        bSmpName = CInt(para("bSmpName"))
                        fontsize = CInt(para("fontSize"))
                        predictNum = CInt(para("predictNum"))
                        GDataSheet = para("GDataSheet")
                        If GDataSheet <> vbNullString Then
                            GDataSheet = GDataSheet & "!"
                        End If
                        Set para = Nothing
                        chartName = IIf(VbaGrp(i).Type = 1, "Th2BarChart", "Th2PointChart")
                        If VbaGrp(i).Type <> grpType0 Then
                            grpType0 = VbaGrp(i).Type
                            If VbaGrp(i).Type <> 1 Then grpData0 = VbaGrp(i).grpData
                        End If
                        
                        '11.6.1 LSQ mdf GxlaThGraph
                        Application.Run GxlaBkGraph2 & "!" & chartName, VbaGrp(i).sheetName, VbaGrp(i).grpOut, _
                            GDataSheet & VbaGrp(i).grpData, GDataSheet & grpData0, chartTitle, txtLen, fontsize, _
                            bSmpName, predictNum
                        If chartName = "Th2PointChart" And ssbtbl.bTenGrpDisp And ActiveSheet.ChartObjects.Count > 0 Then
                            Set chtObj = ActiveSheet.ChartObjects(ActiveSheet.ChartObjects.Count)
                        End If
                    End If
                End If
            Next i
        
            With ssbtbl
                .bAttrCateDisp = 0
                .bAttrDisp = 0
                .bGrpAttrBar = 0
                .bGrpAttrTen = 0
                .bGrpCateBar = 0
                .bGrpCateDisp = 0
                .bGrpCateTen = 0
                .bTenGrpDisp = 0
                .AnaMode = 1
            End With
            Set actSht = ActiveSheet
            
            Call changeToSSDir
            tmpSht.Select 'ActiveWorkbook.ActiveSheet.Select
            rtn = ssb_vba(ssbtbl, CInt(VerNoXL), VbaGrp())
             
            If rtn = 0 Then
                Dim smpNum As Long
                Set r = actSht.Columns("A")
                Set r = r.Find("|fffd||542c||fffd||fffd||fffd||fffd||fffd|_")
                Set rTry = ActiveSheet.Columns("A")
                Set rTry = rTry.Find("|fffd||542c||fffd||fffd||fffd||fffd||fffd|_")
                If Not rTry Is Nothing Then
                    rTry(2, 1) = "No."
                    smpNum = Range(rTry, rTry.End(xlDown)).Rows.Count
                    rTry(1, 1).Resize(smpNum, ssbtbl.SsbNum + 1).Copy r(1, 2 * ssbtbl.SsbNum + 5)
                    r(1, 2 * ssbtbl.SsbNum + 5) = "|fffd||542c||fffd||fffd||fffd||fffd||fffd|_|fffd|\(|fffd||157|L|fffd|x|fffd|N|fffd|g|fffd||fffd||fffd|j"
                    v = r(1, 2 * ssbtbl.SsbNum + 5).Resize(smpNum, ssbtbl.SsbNum + 1).Value
                    r(1, 2 * ssbtbl.SsbNum + 5).Resize(smpNum, ssbtbl.SsbNum + 1).Value = r(1, ssbtbl.SsbNum + 3).Resize(smpNum, ssbtbl.SsbNum + 1).Value
                    r(1, ssbtbl.SsbNum + 3).Resize(smpNum, ssbtbl.SsbNum + 1).Value = r(1, 1).Resize(smpNum, ssbtbl.SsbNum + 1).Value
                    r(1, 1).Resize(smpNum, ssbtbl.SsbNum + 1).Value = v
                End If
                If Not chtObj Is Nothing Then
                    Call Comm_setChartPosSize(chtObj, r(1, 3 * (ssbtbl.SsbNum + 1) + 4), 17, 8)
                End If
                actSht.Select
                Cells(1, 1).Select
                ActiveWindow.LargeScroll down:=-60000
                Application.DisplayAlerts = False
                rTry.Worksheet.Delete
                Application.DisplayAlerts = True
            End If
        End If
        Call Comm_CutDataLink(ActiveWorkbook, GxlaBkGraph2)
        Cells(1, 1).Select
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub
'
'=== EOF ===


Attribute VB_Name = "mdlRegistry"
'=================================================
'Registry Access
'=================================================
Option Explicit

'reads the value for the registry key i_RegKey
'if the key cannot be found, the return value is ""
Function RegKeyRead(i_RegKey As String) As String
    Dim myWS As Object
    On Error Resume Next
    'access Windows scripting
    Set myWS = CreateObject("WScript.Shell")
    'read key from registry
    RegKeyRead = myWS.RegRead(i_RegKey)
End Function


'returns True if the registry key i_RegKey was found
'and False if not
Function RegKeyExists(i_RegKey As String) As Boolean
    Dim myWS As Object
    On Error GoTo ErrorHandler
    'access Windows scripting
    Set myWS = CreateObject("WScript.Shell")
    'try to read the registry key
    myWS.RegRead i_RegKey
    'key was found
    RegKeyExists = True
    Exit Function
    
ErrorHandler:
    'key was not found
    RegKeyExists = False
End Function

'sets the registry key i_RegKey to the
'value i_Value with type i_Type
'if i_Type is omitted, the value will be saved as string
'if i_RegKey wasn't found, a new registry key will be created
Sub RegKeySave(i_RegKey As String, _
               i_Value As String, _
               Optional i_Type As String = "REG_SZ")
      
    Dim myWS As Object
    'access Windows scripting
    Set myWS = CreateObject("WScript.Shell")
    'write registry key
    myWS.RegWrite i_RegKey, i_Value, i_Type

End Sub


'deletes i_RegKey from the registry
'returns True if the deletion was successful,
'and False if not (the key couldn't be found)
Function RegKeyDelete(i_RegKey As String) As Boolean
    Dim myWS As Object
    On Error GoTo ErrorHandler
    'access Windows scripting
    Set myWS = CreateObject("WScript.Shell")
    'delete registry key
    myWS.RegDelete i_RegKey
    'deletion was successful
    RegKeyDelete = True
    Exit Function
    
ErrorHandler:
    'deletion wasn't successful
    RegKeyDelete = False
End Function

Attribute VB_Name = "mdlVbaGrp"
'=======================================================
' Common interface for getting graphic data from C
'
' 2009.4 LSQ
'=======================================================
Option Explicit

Private Const BUF_SIZE As Integer = 256
Public Const maxGrpNum As Integer = 255

Type VBAGRAPH
    no As Long
    Type As Long                    'Graphic type based on each method; 0 is for no graphic
    sheetName As String             'worksheet name of data and output; must set
    grpData As String               'graphic data source              ; must set
    grpOut As String                'graphic output range             ; must set
    grpPara As String               'parameters for drawing a graphic, the division is '&'
End Type

Public G_VbaGrp() As VBAGRAPH

#If VBA7 Then
Private Function GetAddr(ByVal addr As LongPtr) As LongPtr
    GetAddr = addr
End Function

Public Function CallBackPtr() As LongPtr
    CallBackPtr = GetAddr(AddressOf ReallocGrp)
End Function

#Else
Private Function GetAddr(ByVal addr As Long) As Long
    GetAddr = addr
End Function

Public Function CallBackPtr() As Long
    CallBackPtr = GetAddr(AddressOf ReallocGrp)
End Function
#End If

Function ReallocGrp(ByVal n As Long) As Long
    ReDim G_VbaGrp(1 To n)
    Call InitGrpAry(G_VbaGrp)
    ReallocGrp = 0
End Function

'change a string returned by C to a basic string(BSTR)
Private Function CtoBSTR(ByVal strAnsi As String) As String
    Dim tmpstr As String
    On Error Resume Next
    tmpstr = StrConv(strAnsi, vbUnicode)
    If tmpstr <> vbNullString Then
        tmpstr = (Mid(tmpstr, 1, InStr(1, tmpstr, Chr(0)) - 1))
    End If
    CtoBSTR = IIf(Err.Number <> 0, vbNullString, tmpstr)
    On Error GoTo 0
End Function

'initialize graphic array
Function InitGrpAry(grp() As VBAGRAPH) As Boolean
    Dim dimen As Long
    Dim i As Long
    On Error Resume Next
    dimen = UBound(grp)
    For i = 1 To dimen
        grp(i).no = 0
        grp(i).Type = 0
        grp(i).sheetName = Space(BUF_SIZE)
        grp(i).grpData = Space(BUF_SIZE)
        grp(i).grpOut = Space(BUF_SIZE)
        grp(i).grpPara = Space(BUF_SIZE)
    Next i
    InitGrpAry = IIf(Err.Number = 0, True, False)
    On Error GoTo 0
End Function

'convert all C strings to Basic strings
Function ConvToBSTR(grp As VBAGRAPH) As Boolean
    On Error Resume Next
    grp.sheetName = CtoBSTR(grp.sheetName)
    grp.grpData = CtoBSTR(grp.grpData)
    grp.grpOut = CtoBSTR(grp.grpOut)
    grp.grpPara = CtoBSTR(grp.grpPara)
    ConvToBSTR = grp.sheetName <> vbNullString _
             And grp.grpData <> vbNullString _
             And grp.grpOut <> vbNullString
    On Error GoTo 0
End Function

'=== EOF ===
Attribute VB_Name = "mdlWorkFolder"
'=======================================================
' Set working folder
'=======================================================
Option Explicit

Private Const STR_FOLDERKEY As String = "HKEY_CURRENT_USER\Software\Esumi\Taikou\V6\Wrkpath"
Private Const STR_SUBFOLDER As String = "\SRKTEMP\"

Function GetMyDocumentsPath() As String
    Dim sFolder As String
    Dim objFolders As Object
    'sFolder = Environ$("USERPROFILE") & "\My Documents" & STR_SUBFOLDER
    Set objFolders = CreateObject("WScript.Shell").SpecialFolders
    sFolder = objFolders("mydocuments")
    sFolder = sFolder & STR_SUBFOLDER
    If Not bFolderExist(sFolder) Then Call MkDir(sFolder)
    GetMyDocumentsPath = sFolder
End Function

Private Function bValidFolder(ByVal strFolderName As String) As Boolean
    If bFolderExist(strFolderName) Then
        If bFolderWriteable(strFolderName) Then
            bValidFolder = True
            Exit Function
        End If
    End If
    bValidFolder = False
End Function

Private Function getValidWrkPath() As String
    Dim strWrkPath As String
    If RegKeyExists(STR_FOLDERKEY) Then
        strWrkPath = RegKeyRead(STR_FOLDERKEY)
        If bValidFolder(strWrkPath) Then
            getValidWrkPath = strWrkPath
            Exit Function
        End If
    End If
    strWrkPath = GetMyDocumentsPath
    If bValidFolder(strWrkPath) Then
        getValidWrkPath = strWrkPath
        Exit Function
    Else
        strWrkPath = ThisWorkbook.Path & STR_SUBFOLDER
        If Not bFolderExist(strWrkPath) Then
            Call MkDir(strWrkPath)
        End If
        If bValidFolder(strWrkPath) Then
            getValidWrkPath = strWrkPath
            Exit Function
        End If
    End If
    getValidWrkPath = vbNullString
End Function

Public Sub ShowInvalidWrkPath()
    MsgBox "|fffd||fffd||197|p|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||c42c||fffd||142||fffd||fffd||702||fffd||fffd||fffd|" & vbCrLf & _
           "|fffd|u|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd|/|fffd|I|fffd||fffd||fffd|v|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd||fffd|u|fffd||fffd||197|p|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||752||fffd|v" & vbCrLf & _
           "|fffd||242||10d||fffd||197|p|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||752||80b5||fffd||202||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation Or vbOKOnly, "EXCEL|fffd|\|fffd||fffd|V3 |fffd||8b||fffd||fffd||752||fffd|"
End Sub

Function bValidWrkPath() As Boolean
    Dim strWrkPath As String
    strWrkPath = getValidWrkPath
    bValidWrkPath = Not (strWrkPath = vbNullString)
    If bValidWrkPath Then ThisWorkbook.Worksheets("Info").Range("J3") = strWrkPath
End Function

Public Function GetFolderName() As String
    Dim tmpstr As String
    tmpstr = ThisWorkbook.Worksheets("Info").Range("J3")
    If Right(tmpstr, 1) <> "\" Then tmpstr = tmpstr & "\"   '13.1.28 LSQ add
    GetFolderName = tmpstr
End Function

Function SetWrkPath(ByVal strPath As String) As String
    Dim tmpstr As String
    tmpstr = GetFolderName
    If bValidFolder(strPath) Then
        SetWrkPath = strPath
    Else
        ShowInvalidWrkPath
        SetWrkPath = tmpstr
    End If
End Function

Private Function RemoveLastSlash(ByVal pName As String) As String
    Dim l As Long
    l = Len(pName)
    If l > 0 Then
        If Right(pName, 2) = "\\" Then
            RemoveLastSlash = Mid(pName, 1, l - 2)
        ElseIf Mid(pName, l, 1) = "\" Then
            RemoveLastSlash = Mid(pName, 1, l - 1)
        Else
            RemoveLastSlash = pName
        End If
    Else
        RemoveLastSlash = pName
    End If
End Function

'========EOF========
Attribute VB_Name = "menuBarMdl"
'===================================================
' iSTAT_MTHR Ver1.0 : |fffd||fffd||fffd|j|fffd||fffd||fffd|[ System (CommandBar)
'
' 2008.10 LSQ
'===================================================
Option Explicit
Option Private Module

Public Const BARNAME_iSTAT_MTHRV1 As String = "|fffd|}|fffd||fffd||fffd|`|fffd||fffd||fffd||3d7||289||fffd||fffd| (Ver.1.1)"

Sub make_MenuBar()
    Dim menuBar As CommandBar           'menu bar
    Dim popMenu As CommandBarControl    'menu
    Dim submn As CommandBarControl      'sub menu
    Dim submnA As CommandBarControl     'sub menu
    Dim iconMenuName As String

    'delete old one if any
    Call delete_MenuBar(BARNAME_iSTAT_MTHRV1)

    Set menuBar = CommandBars.Add(name:=BARNAME_iSTAT_MTHRV1)  ', Temporary:=True', MenuBar:=True)
    menuBar.Position = msoBarTop
    
    '---|fffd|f|fffd|[|fffd|^|fffd||3ca||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd|f|fffd|[|fffd|^|fffd||3ca||fffd|", "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|f|fffd|[|fffd|^|fffd||fffd| |fffd|E|fffd|E|fffd|E")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "IS_MTHR_EXPtoDumy", "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|0,1|fffd||fffd|") '
    Call addItemToPopMenu(popMenu, "IS_MTHR_EXPtoDumy_MA", "|fffd||fffd||fffd||fffd||fffd||53683|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|1,0|fffd|f|fffd|[|fffd|^|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_MTHR_10toMA", "1,0|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||7561||fffd||fffd||fffd||53683|f|fffd|[|fffd|^|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_MTHR_Num2Cate", "|fffd||fffd||fffd|l|fffd||fffd||fffd||fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_MTHR_CRSTBL_VBA", "|fffd||91||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|X|fffd|\|fffd||fffd|")
    
    '---|fffd||fffd|{|fffd||fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd||fffd|{|fffd||fffd||fffd|", "|fffd||fffd|{|fffd||fffd||fffd|v|fffd||281|E|fffd||fffd||fffd||581|A|fffd||fffd||fffd||590|}")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "IS_MTHR_BASICINFO_VBA", "|fffd||fffd|{|fffd||fffd||fffd|v|fffd||281|E|fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_MTHR_SokanZu1_VBA", "|fffd||fffd||fffd||590|}")


    Set popMenu = makePopMenu(menuBar, "|fffd||fffd||fffd||3d7||289||fffd||342|P", "|fffd||fffd||fffd||3d7||281|E|fffd||fffd||fffd||289||fffd||fffd||fffd||fffd|_|fffd|E|fffd|E|fffd|E")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "IS_MTHR_MLRA", "|fffd|d|fffd||fffd|A|fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_MTHR_SR1", "|fffd||fffd||fffd||289||fffd|1|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_MTHR_SR1EX", "|fffd|g|fffd||fffd||fffd|^|fffd||fffd||fffd||289||fffd|1|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_MTHR_DA", "|fffd||fffd||fffd||295||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_MTHR_DA2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||295||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_MTHR_SR2", "|fffd||fffd||fffd||289||fffd|2|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_MTHR_SR2EX", "|fffd|g|fffd||fffd||fffd|^|fffd||fffd||fffd||289||fffd|2|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_MTHR_LOG", "|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N|fffd||fffd|A")
    
    Set popMenu = makePopMenu(menuBar, "|fffd||fffd||fffd||3d7||289||fffd||342|Q", "|fffd||fffd||fffd||3d7||281|E|fffd||fffd||fffd||289||fffd||fffd||fffd||fffd|_|fffd|E|fffd|E|fffd|E")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "IS_MTHR_PCA", "|fffd||542c||fffd||fffd||fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_MTHR_INSI", "|fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_MTHR_SR3", "|fffd||fffd||fffd||289||fffd|3|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_MTHR_CORR", "|fffd|R|fffd||fffd||fffd|X|fffd|||fffd||fffd||fffd|f|fffd||fffd||fffd|X")
    'Set submn = popMenu.Controls.Add(Type:=msoControlPopup)
    'submn.Caption = "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|"
    'Call addItemToPopMenu(submn, "IS_MTHR_CLST", "|fffd|K|fffd|w|fffd|^")
    'Call addItemToPopMenu(submn, "IS_MTHR_CLST_Kmeans", "K-|fffd||fffd||fffd||3d6|@")
    Call addItemToPopMenu(popMenu, "IS_MTHR_CLST", "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|")
    
    
    Set popMenu = makePopMenu(menuBar, "|fffd||fffd||fffd||fffd||fffd|n|fffd||202||fffd|", "")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "IS_MTHR_Th1Lftbl", "|fffd|J|fffd|v|fffd||fffd||fffd||fffd||fffd|}|fffd|C|fffd||fffd||fffd|[|fffd|@")
    Call addItemToPopMenu(popMenu, "IS_MTHR_Th1Cox", "Cox|fffd||314||fffd||fffd|n|fffd|U|fffd|[|fffd|h|fffd||fffd||fffd|f|fffd||fffd|")
    
    '---|fffd|u|fffd|I|fffd||fffd||fffd|v|fffd||202||fffd| ---
    Set popMenu = makePopMenu(menuBar, "|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd|/|fffd|I|fffd||fffd|", "|fffd|w|fffd||fffd||fffd|v|fffd|E|fffd|I|fffd||fffd|")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "fOnlineManual_iSTAT_MTHRV1", "|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "fExplain_iSTAT_MTHRV1", "|fffd||fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "fHelp_iSTAT_MTHRV1", "|fffd||fffd||fffd||303|\|fffd|t|fffd|g|fffd||242||82||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "fExit_iSTAT_MTHRV1", "|fffd|}|fffd||fffd||fffd|`|fffd||fffd|A|fffd||fffd||fffd||342||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|")
    
    'display menubar
    menuBar.Visible = True
End Sub
'
Private Function makePopMenu(mnBar As CommandBar, ByVal capName As String, _
    Optional ByVal toolTipStr As String = "") As CommandBarControl
    Set makePopMenu = mnBar.Controls.Add(Type:=msoControlPopup)
    makePopMenu.Caption = capName
    makePopMenu.TooltipText = toolTipStr
End Function
'
Private Sub addItemToPopMenu(ByVal popMenu As CommandBarControl, _
    ByVal macroName As String, ByVal capName As String, _
    Optional ByVal bSeper As Boolean = False, _
    Optional ByVal iconMenuName As String = "", _
    Optional ByVal iconBtnName As String = "")
    Dim barBtn As CommandBarButton
    '
    Dim iconBar As CommandBar
    Dim iconMenu As CommandBarPopup
    Dim iconBtn As CommandBarButton
    
    'Buttons
    Set barBtn = popMenu.Controls.Add(Type:=msoControlButton)
    barBtn.OnAction = macroName
    barBtn.Caption = capName
    'If faceIdNum <> 0 Then barBtn.FaceId = faceIdNum 'not used
    If bSeper Then barBtn.BeginGroup = True
    
    'Icon Attached
    'nothing
    
End Sub
'
'|fffd||fffd||fffd|j|fffd||fffd||fffd|[Bar|fffd||30d||d3dc||fffd|B
'
Sub delete_MenuBar(ByVal barName As String)
    If isMenuBarExist(barName) = True Then
        CommandBars(barName).Delete
    End If
End Sub
'
Private Function isMenuBarExist(ByVal barName As String) As Boolean
    Dim B As CommandBar
    
    isMenuBarExist = False
    
    For Each B In CommandBars
        If UCase(B.name) = UCase(barName) Then
            isMenuBarExist = True
            Exit Function
        End If
    Next B

End Function

'=== EOF ===
Attribute VB_Name = "menuBarRB"
'
'Ribbon Interface
'
Option Explicit

Sub IS_MTHR_EXPtoDumy_RB(control As Object)
    Call IS_MTHR_EXPtoDumy
End Sub

Sub IS_MTHR_EXPtoDumy_MA_RB(control As Object)
    Call IS_MTHR_EXPtoDumy_MA
End Sub

Sub IS_MTHR_10toMA_RB(control As Object)
    Call IS_MTHR_10toMA
End Sub

Sub IS_MTHR_Num2Cate_RB(control As Object)
    Call IS_MTHR_Num2Cate
End Sub

Sub IS_MTHR_CRSTBL_VBA_RB(control As Object)
    Call IS_MTHR_CRSTBL_VBA
End Sub

Sub IS_MTHR_MLRA_RB(control As Object)
    Call IS_MTHR_MLRA
End Sub

Sub IS_MTHR_SR1_RB(control As Object)
    Call IS_MTHR_SR1
End Sub

Sub IS_MTHR_DA_RB(control As Object)
    Call IS_MTHR_DA
End Sub

Sub IS_MTHR_DA2_RB(control As Object)
    Call IS_MTHR_DA2
End Sub

Sub IS_MTHR_SR2_RB(control As Object)
    Call IS_MTHR_SR2
End Sub

Sub IS_MTHR_LOG_RB(control As Object)
    Call IS_MTHR_LOG
End Sub

Sub IS_MTHR_PCA_RB(control As Object)
    Call IS_MTHR_PCA
End Sub

Sub IS_MTHR_CORR_RB(control As Object)
    Call IS_MTHR_CORR
End Sub

Sub IS_MTHR_BASICINFO_VBA_RB(control As Object)
    Call IS_MTHR_BASICINFO_VBA
End Sub

Sub IS_MTHR_SokanZu1_VBA_RB(control As Object)
    Call IS_MTHR_SokanZu1_VBA
End Sub

Sub IS_MTHR_SR1EX_RB(control As Object)
    Call IS_MTHR_SR1EX
End Sub

Sub IS_MTHR_SR2EX_RB(control As Object)
    Call IS_MTHR_SR2EX
End Sub

Sub IS_MTHR_SR3_RB(control As Object)
    Call IS_MTHR_SR3
End Sub

'"|fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|"
Sub IS_MTHR_INSI_RB(control As Object)
    Call IS_MTHR_INSI
End Sub

'"|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|"--"|fffd|K|fffd|w|fffd|^"
Sub IS_MTHR_CLST_RB(control As Object)
    Call IS_MTHR_CLST
End Sub

'"|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|"--"K-|fffd||fffd||fffd||3d6|@"
Sub IS_MTHR_CLST_Kmeans_RB(control As Object)
    Call IS_MTHR_CLST_Kmeans
End Sub

Sub IS_MTHR_Th1Cox_RB(control As Object)
    Call IS_MTHR_Th1Cox
End Sub

Sub IS_MTHR_Th1Lftbl_RB(control As Object)
    Call IS_MTHR_Th1Lftbl
End Sub

Sub fOnlineManual_iSTAT_MTHRV1_RB(control As Object)
    Call fOnlineManual_iSTAT_MTHRV1
End Sub

Sub fExplain_iSTAT_MTHRV1_RB(control As Object)
    Call fExplain_iSTAT_MTHRV1
End Sub

Sub fHelp_iSTAT_MTHRV1_RB(control As Object)
    Call fHelp_iSTAT_MTHRV1
End Sub

Sub fExit_iSTAT_MTHRV1_RB(control As Object)
    Call fExit_iSTAT_MTHRV1
End Sub

'==== EOF ====





Attribute VB_Name = "sssJsk"
'=======================================================
' SSS|fffd||fffd||fffd|vVer6 : DLL JSK
'
' 2005.9 LSQ
'=======================================================
Option Private Module
Option Explicit

Type DLG_IN
    sRngDep As String       '|fffd||693|I|fffd||3d0||fffd|
    sRngInd As String       '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||fffd|
    sRngT_Name As String    '|fffd||fffd||fffd|_|fffd||3d0||fffd||fffd||348||fffd| or |fffd||fffd||fffd||303|f|fffd|[|fffd|^|fffd||348||fffd|(|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N|fffd||fffd|A|fffd||fffd||fffd||fffd|)
    bTitle As Integer
    bStop As Integer
    
    '|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N|fffd||fffd|A|fffd||fffd||fffd||fffd| only
    dBase As Double         '|fffd||fffd||fffd||283|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd|\|fffd||30a||e3c0|
    bName As Integer        '|fffd||91||316||fffd|
    bSatari As Integer      '|fffd||3d0||fffd||fffd|I|fffd||fffd|@|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    strDead As String
    strAlive As String
    fmt As Integer
    cutval1 As Double
    cutval2 As Double
    cutval3 As Double
End Type

Private Type EXTRA_JSK
    DataType As Long
    ClsData(1 To 2) As Long
    ClsName(1 To 2) As String
    DivPoint As Double
End Type

Private m_varselect As String

#If Win64 Then
    #If VBA7 Then
        Declare PtrSafe Function cLJkk Lib "MTHR_G_JSK_64.dll" (adlgin As DLG_IN) As Integer
        Declare PtrSafe Function cCox Lib "MTHR_G_JSK_64.dll" (adlgin As DLG_IN, xVarArray() As Integer) As Integer
    #Else
        Declare Function cLJkk Lib "MTHR_G_JSK_64.dll" (adlgin As DLG_IN) As Integer
        Declare Function cCox Lib "MTHR_G_JSK_64.dll" (adlgin As DLG_IN, xVarArray() As Integer) As Integer
    #End If
#Else
    #If VBA7 Then
        Declare PtrSafe Function cLJkk Lib "MTHR_G_JSK.dll" (adlgin As DLG_IN) As Integer
        Declare PtrSafe Function cCox Lib "MTHR_G_JSK.dll" (adlgin As DLG_IN, xVarArray() As Integer) As Integer
    #Else
        Declare Function cLJkk Lib "MTHR_G_JSK.dll" (adlgin As DLG_IN) As Integer
        Declare Function cCox Lib "MTHR_G_JSK.dll" (adlgin As DLG_IN, xVarArray() As Integer) As Integer
    #End If
#End If

Private Function handleJskData(JskTbl As DLG_IN, extraInfo As EXTRA_JSK) As Worksheet
    Dim i As Long, j As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim RgeSmpName As Range
    Dim tmpSht As Worksheet
    Dim Jskobj As Variant, Jskvar As Variant, JskName As Variant
    Dim JskVarSel As Variant
    Dim NameRow As Long, smpNum As Long, objSmpNum As Long
    Dim msgStr As String
    Dim objSmp(1 To 2) As Long
    Dim tmpv
    
    On Error Resume Next
    Set RgeObj = Range(JskTbl.sRngDep)
    Set RgeVar = Range(JskTbl.sRngInd)
    If JskTbl.bName Then
        Set RgeSmpName = Range(JskTbl.sRngT_Name)
    End If
    Jskvar = RgeVar.Value
    
    msgStr = ""
    If RgeVar Is Nothing Or RgeObj Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set tmpSht = Nothing
        Exit Function
    End If
    
    Set tmpSht = RgeVar.Worksheet.Parent.Sheets.Add
    Set rge = tmpSht.Range("$A$2")
    If JskTbl.bName Then
        Call PasteRange(RgeSmpName, rge, xlPasteValues)
        NameRow = RgeSmpName.Rows.Count * RgeSmpName.Columns.Count
    Else
        NameRow = RgeObj.Rows.Count
        For i = 1 To NameRow
            rge(i, 1) = i
        Next i
    End If
    Set rge = tmpSht.Range("$B$1")
    Call PasteRange(RgeObj, rge, xlPasteValues)
    If m_varselect <> "0" Then
        JskVarSel = Split(m_varselect, ",")
    Else
        ReDim JskVarSel(0 To RgeVar.Columns.Count) As Long
        JskVarSel(0) = RgeVar.Columns.Count
        For i = 1 To RgeVar.Columns.Count
            JskVarSel(i) = i - 1
        Next i
    End If
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To JskVarSel(0)
            rge(i, j + 1) = RgeVar(i, JskVarSel(j) + 1)
        Next j
    Next i
    JskTbl.sRngInd = Range(rge(1, 2), rge(RgeVar.Rows.Count, JskVarSel(0) + 1)).Address

    Set rge = Range(JskTbl.sRngInd)
    smpNum = rge.Rows.Count
       
    Set rge = Range("B1")
    objSmpNum = RgeObj.Rows.Count
    Set rge = Range(rge(1, 1), rge(objSmpNum, JskVarSel(0) + 1))
    objSmp(1) = 0
    objSmp(2) = 0
    For i = objSmpNum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) < rge.Columns.Count Then
            If JskTbl.bStop <> 1 Then
                tmpSht.Rows(rge.Rows(i).Row).Delete xlUp
                smpNum = smpNum - 1
                objSmpNum = objSmpNum - 1
            Else
                Application.DisplayAlerts = False
                tmpSht.Delete
                Application.DisplayAlerts = True
                Set handleJskData = Nothing
                MsgBox "|fffd|w|fffd||fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|||fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|||fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|", vbInformation
                Exit Function
            End If
        Else
            tmpv = val(rge(i, 1))
            If extraInfo.DataType = 1 Then
                If tmpv <> extraInfo.ClsData(1) And tmpv <> extraInfo.ClsData(2) Then
                    If JskTbl.bStop <> 1 Then
                        tmpSht.Rows(rge.Rows(i).Row).Delete xlUp
                        smpNum = smpNum - 1
                        objSmpNum = objSmpNum - 1
                    Else
                        Application.DisplayAlerts = False
                        tmpSht.Delete
                        Application.DisplayAlerts = True
                        Set handleJskData = Nothing
                        MsgBox "|fffd|w|fffd||fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|||fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|||fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|", vbInformation
                        Exit Function
                    End If
                Else
                    If tmpv = extraInfo.ClsData(1) Then
                        rge(i, 1) = 1
                        objSmp(1) = objSmp(1) + 1
                    Else
                        rge(i, 1) = 0
                        objSmp(2) = objSmp(2) + 1
                    End If
                End If
            Else
                If tmpv >= extraInfo.DivPoint Then         '2013.10.17 mdf old: <=
                    rge(i, 1) = 1
                    objSmp(1) = objSmp(1) + 1
                Else
                    rge(i, 1) = 0
                    objSmp(2) = objSmp(2) + 1
                End If
            End If
        End If
    Next i
    
    If objSmpNum < 2 Or objSmp(1) < 1 Or objSmp(2) < 1 Then
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
        Set handleJskData = Nothing
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||242||202||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||102||fffd||fffd||702||fffd|", vbInformation
        Exit Function
    End If
    Set rge = Range("C1")
    Set rge = Range(rge(1, 1), rge(smpNum, JskVarSel(0)))
    For i = smpNum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) < rge.Columns.Count Then
            If JskTbl.bStop <> 1 Then
                tmpSht.Rows(rge.Rows(i).Row).Delete xlUp
                smpNum = smpNum - 1
            Else
                Application.DisplayAlerts = False
                tmpSht.Delete
                Application.DisplayAlerts = True
                Set handleJskData = Nothing
                MsgBox "|fffd|w|fffd||fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|||fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|||fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|", vbInformation
                Exit Function
            End If
        End If
    Next i
    
    Set rge = tmpSht.Range("$A$2")
    
    JskTbl.sRngT_Name = Range(rge(1, 1), rge(NameRow, 1)).Address
    JskTbl.sRngT_Name = tmpSht.name & "!" & JskTbl.sRngT_Name
    
    Set rge = tmpSht.Range("$B$1")
    
    JskTbl.sRngDep = Range(rge(1, 1), rge(objSmpNum, 1)).Address
    JskTbl.sRngDep = tmpSht.name & "!" & JskTbl.sRngDep
    
    JskTbl.sRngInd = Range(rge(1, 2), rge(smpNum, JskVarSel(0) + 1)).Address
    JskTbl.sRngInd = tmpSht.name & "!" & JskTbl.sRngInd
    
    JskTbl.fmt = 1
    JskTbl.cutval1 = 1
    JskTbl.cutval2 = 0
    
    Set handleJskData = tmpSht
    On Error GoTo 0
End Function

Sub JskGetVarSelect()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgLjkk")
    m_varselect = GetVarSel(dlg, "edtVarRge", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|")
End Sub

Public Sub LjkkDrawDotPlot(ByVal strRgeClass As String, ByVal strRgeData As String, _
                                    ByVal strRgeOut As String, ByVal crossAt As Double, ByVal strPara As String)
    Call Application.Run(GxlaBkGraph & "!DrawDotPlot_A", toXlA1str(strRgeClass), toXlA1str(strRgeData), _
                                            toXlA1str(strRgeOut), crossAt, strPara)
End Sub

Private Function GetRangeByString(ByVal tmpSht As Worksheet, ByVal strName As String) As Range
    Dim r As Range
    Set r = tmpSht.Columns("A")
    Set r = r.Find(strName)
    Set GetRangeByString = r
End Function

Private Sub OutputLOG(adlgin As DLG_IN)
    Dim i As Long, j As Long
    Dim r As Range, OutR As Range
    Dim tmpSht As Worksheet, outSht As Worksheet
    Dim nItemNum As Long, nSmpNum As Long, nXSmpNum As Long
    Dim v As Variant
    Dim maxNum As Long, deadNum As Long, aliveNum As Long
    Dim strObjName As String
    On Error Resume Next
    Set tmpSht = ActiveSheet
    Set outSht = tmpSht.Parent.Sheets.Add
    Set OutR = outSht.Range("A1")
    tmpSht.Activate
    Set r = GetRangeByString(tmpSht, "ItemNum")
    nItemNum = r(1, 2)
    Set r = GetRangeByString(tmpSht, "SmpNum")
    nSmpNum = r(1, 2)
    Set r = GetRangeByString(tmpSht, "XSmpNum")
    nXSmpNum = r(1, 2)
    Set r = GetRangeByString(tmpSht, "ObjName")
    strObjName = r(1, 2)
    OutR(1, 1) = "[|fffd||693|I|fffd||3d0||fffd|]" & strObjName
    OutR(1, 1).Font.Bold = True
    OutR(2, 1) = adlgin.strDead
    Set r = GetRangeByString(tmpSht, "DeadNum")
    deadNum = r(1, 2)
    OutR(2, 2) = deadNum
    Set r = GetRangeByString(tmpSht, "AliveNum")
    aliveNum = r(1, 2)
    OutR(3, 1) = adlgin.strAlive
    OutR(3, 2) = aliveNum
    Call SetRangeBorder(OutR(2, 1).Resize(2, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    
    Set OutR = OutR(5, 1)
    OutR(1, 1) = "|fffd||fffd||fffd|f|fffd||fffd||fffd||313|K|fffd||fffd||fffd||fffd||fffd|"
    OutR(1, 1).Font.Bold = True
    OutR(3, 1) = "|fffd||fffd||fffd|f|fffd||fffd||fffd||313|K|fffd||fffd||fffd||fffd||fffd|"
    Set r = GetRangeByString(tmpSht, "|fffd||793|x|fffd||431f||fffd||fffd|")
    OutR(2, 2).Resize(2, 4).Value = r(2, 1).Resize(2, 4).Value
    Call SetRangeBorder(OutR(2, 1).Resize(2, 1), xlThin, xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(2, 2).Resize(2, 4), xlThin, xlThin, xlThin, xlThin, xlHairline, xlThin)
    OutR(3, 2).NumberFormat = "0.00"
    OutR(3, 4).NumberFormat = "0.000"
    
    Set OutR = OutR(5, 1)
    OutR(1, 1) = "|fffd|K|fffd||fffd||fffd|x"
    OutR(1, 1).Font.Bold = True
    OutR(2, 2) = "|fffd||fffd||fffd|v|fffd||fffd|"
    OutR(2, 3) = "|fffd||fffd||fffd|R|fffd|x"
    OutR(2, 4) = "p|fffd|l"
    OutR(2, 5) = "|fffd||fffd||fffd||fffd|"
    OutR(3, 1) = "|fffd|s|fffd|A|fffd|\|fffd||fffd||fffd|c|fffd||fffd|"
    OutR(4, 1) = "|fffd||fffd|E|fffd|x"
    Set r = GetRangeByString(tmpSht, "PearsonStat")
    OutR(3, 2) = r(1, 2)
    OutR(3, 3) = nSmpNum - nItemNum - 1
    OutR(3, 4) = WorksheetFunction.ChiDist(OutR(3, 2), OutR(3, 3))
    OutR(3, 5) = IIf(OutR(3, 4) < 0.01, "[**]", IIf(OutR(3, 4) < 0.05, "[ *]", "[  ]"))
    Set r = GetRangeByString(tmpSht, "|fffd||fffd||fffd||350||fffd||fffd|x")
    OutR(4, 2) = r(2, 2)
    OutR(4, 3) = nSmpNum - nItemNum - 1
    OutR(4, 4) = WorksheetFunction.ChiDist(OutR(4, 2), OutR(4, 3))
    OutR(4, 5) = IIf(OutR(4, 4) < 0.01, "[**]", IIf(OutR(4, 4) < 0.05, "[ *]", "[  ]"))
    Call SetRangeBorder(OutR(2, 1), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(3, 1).Resize(2, 1), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(2, 2).Resize(1, 4), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(OutR(3, 2).Resize(2, 4), xlThin, xlThin, xlThin, xlThin, xlHairline)
    OutR(3, 2).Resize(2, 1).NumberFormat = "0.00"
    OutR(3, 4).Resize(2, 1).NumberFormat = "0.000"
    
    Set OutR = OutR(6, 1)
    OutR(1, 1) = "|fffd||fffd||fffd||350||fffd||fffd|x"
    OutR(1, 1).Font.Bold = True
    OutR(2, 1) = "AIC"
    OutR(2, 2) = r(3, 2)
    OutR(3, 1) = "|fffd||fffd|^|fffd||fffd|"
    OutR(3, 2) = r(4, 2)
    Call SetRangeBorder(OutR(2, 1).Resize(2, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    OutR(2, 2).NumberFormat = "0.00"
    OutR(3, 2).NumberFormat = "0.000"
    
    Set OutR = OutR(5, 1)
    Set r = GetRangeByString(tmpSht, "|fffd||fffd|A|fffd||fffd||fffd||183|I|fffd|b|fffd|Y|fffd||fffd|")
    OutR(1, 1) = "[|fffd||fffd|A|fffd||fffd|]"
    OutR(1, 1).Font.Bold = True
    OutR(2, 1) = "|fffd||3d0||fffd||fffd||fffd|"
    OutR(2, 2) = "|fffd||fffd|A|fffd|W|fffd||fffd|"
    OutR(2, 3) = "|fffd|W|fffd||fffd||fffd||b377|"
    OutR(2, 4) = "Wald-square"
    OutR(2, 5) = "p|fffd|l"
    OutR(2, 6) = "|fffd||fffd||fffd||fffd|"
    OutR(2, 7) = "|fffd|W|fffd||fffd||fffd||fffd|A|fffd|W|fffd||fffd|"
    For i = 1 To nItemNum
        OutR(2 + i, 1) = r(2 + i, 1)
        OutR(2 + i, 2) = r(2 + i, 2)
        OutR(2 + i, 3) = r(2 + i, 4)
        OutR(2 + i, 4) = r(2 + i, 5)
        
    Next i
    OutR(3, 1).Resize(nItemNum + 1, 2).Value = r(3, 1).Resize(nItemNum + 1, 2).Value
    OutR(3, 3).Resize(nItemNum + 1, 5).Value = r(3, 4).Resize(nItemNum + 1, 5).Value
    Call SetRangeBorder(OutR(2, 1).Resize(1, 7), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(3, 1).Resize(nItemNum + 1, 7), xlThin, xlThin, xlThin, xlThin, xlThin)
    OutR(3, 2).Resize(nItemNum + 1, 6).NumberFormat = "0.0000"
    
    Set OutR = OutR(nItemNum + 5, 1)
    OutR(1, 1) = "[|fffd|I|fffd|b|fffd|Y|fffd||fffd|]"
    OutR(1, 1).Font.Bold = True
    OutR(1, 3) = "95%|fffd|M|fffd||fffd||fffd||fffd||fffd|"
    OutR(1, 5) = "99%|fffd|M|fffd||fffd||fffd||fffd||fffd|"
    OutR(2, 1) = "|fffd||3d0||fffd||fffd||fffd|"
    OutR(2, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|I|fffd|b|fffd|Y|fffd||fffd|"
    OutR(2, 3) = "|fffd||fffd||fffd||fffd|"
    OutR(2, 4) = "|fffd||fffd||fffd|"
    OutR(2, 5) = "|fffd||fffd||fffd||fffd|"
    OutR(2, 6) = "|fffd||fffd||fffd|"
    OutR(3, 1).Resize(nItemNum + 1, 1).Value = r(3, 1).Resize(nItemNum + 1, 1).Value
    OutR(3, 2).Resize(nItemNum + 1, 5).Value = r(3, 8).Resize(nItemNum + 1, 5).Value
    Call SetRangeBorder(OutR(1, 3).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(1, 5).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(2, 1).Resize(1, 6), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(3, 1).Resize(nItemNum + 1, 6), xlThin, xlThin, xlThin, xlThin, xlThin)
    OutR(3, 2).Resize(nItemNum + 1, 5).NumberFormat = "0.0000"
    
    Set OutR = OutR(nItemNum + 5, 1)
    OutR(1, 1) = "|fffd||fffd||fffd||fffd|"
    OutR(1, 1).Font.Bold = True
    Set r = GetRangeByString(tmpSht, "|fffd|m|fffd||fffd||fffd||195||fffd||fffd||fffd|")
    OutR(2, 1) = "No."
    OutR(2, 2) = "|fffd|m|fffd||fffd|(" & strObjName & "-" & adlgin.strDead & ")"
    OutR(2, 3) = "|fffd|m|fffd||fffd|(" & strObjName & "-" & adlgin.strAlive & ")"
    OutR(2, 4) = "|fffd||fffd||fffd||fffd|"
    OutR(2, 5) = "|fffd||fffd||fffd||fffd||fffd|l"
    OutR(3, 1).Resize(nXSmpNum, 1).Value = r(3, 1).Resize(nXSmpNum, 1).Value
    v = r(3, 3).Resize(nXSmpNum, 1).Value
    OutR(3, 2).Resize(nXSmpNum, 1).Value = v
    For i = 1 To nXSmpNum
        v(i, 1) = 1 - v(i, 1)
    Next i
    OutR(3, 3).Resize(nXSmpNum, 1).Value = v
    v = r(3, 4).Resize(nXSmpNum, 1).Value
    For i = 1 To nXSmpNum
        If Not IsEmpty(v(i, 1)) Then
            If v(i, 1) = 1 Then
                v(i, 1) = adlgin.strDead
            ElseIf v(i, 1) = 0 Then
                v(i, 1) = adlgin.strAlive
            End If
        End If
    Next i
    OutR(3, 4).Resize(nXSmpNum, 1).Value = v
    v = r(3, 2).Resize(nXSmpNum, 1).Value
    For i = 1 To nXSmpNum
        If Not IsEmpty(v(i, 1)) Then
            If v(i, 1) = 1 Then
                v(i, 1) = adlgin.strDead
            ElseIf v(i, 1) = 0 Then
                v(i, 1) = adlgin.strAlive
            End If
        End If
    Next i
    OutR(3, 5).Resize(nXSmpNum, 1).Value = v
    Call SetRangeBorder(OutR(2, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(2, 2).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(OutR(2, 4).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(3, 1).Resize(nXSmpNum, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(3, 2).Resize(nXSmpNum, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(OutR(3, 4).Resize(nXSmpNum, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    OutR(3, 2).Resize(nXSmpNum, 2).NumberFormat = "0.0%"
    
    maxNum = IIf(deadNum < aliveNum, aliveNum, deadNum)
    OutR(1, 8).Resize(maxNum + 2, 4).Value = r(2, 12).Resize(maxNum + 2, 4).Value
    tmpSht.Activate
    tmpSht.ChartObjects("SR2DotPlot").ChartArea.Copy
    outSht.Select
    OutR(1, 8).Select
    outSht.Paste
    
    ActiveChart.SeriesCollection(1).XValues = "={""" & adlgin.strDead & """,""" & adlgin.strAlive & """}"
    ActiveChart.SeriesCollection(1).Values = "=" & outSht.name & "!" & toXlRCstr(OutR(2, 10).Resize(1, 2).Address)
    ActiveChart.SeriesCollection(2).XValues = "=" & outSht.name & "!" & toXlRCstr(OutR(3, 11).Resize(maxNum, 1).Address)
    ActiveChart.SeriesCollection(2).Values = "=" & outSht.name & "!" & toXlRCstr(OutR(3, 9).Resize(maxNum, 1).Address)
    ActiveChart.SeriesCollection(3).XValues = "=" & outSht.name & "!" & toXlRCstr(OutR(3, 10).Resize(maxNum, 1).Address)
    ActiveChart.SeriesCollection(3).Values = "=" & outSht.name & "!" & toXlRCstr(OutR(3, 8).Resize(maxNum, 1).Address)
    
    Call Comm_setChartPosSize(ActiveChart.Parent, OutR(1, 8), 20, 5)
    
    Set OutR = OutR(nXSmpNum + 4, 1)
    Set r = GetRangeByString(tmpSht, "|fffd||fffd||fffd||283|N|fffd||fffd||fffd|X|fffd|\")
    OutR(1, 1) = "|fffd||fffd||fffd||283|N|fffd||fffd||fffd|X|fffd|\"
    OutR(1, 1).Font.Bold = True
    OutR(2, 1) = "n|fffd|\"
    OutR(5, 1) = "|fffd||fffd||fffd||fffd|"
    OutR(3, 3) = "|fffd||fffd||fffd||fffd||fffd|l"
    OutR(4, 2).Resize(4, 4).Value = r(3, 1).Resize(4, 4).Value
    OutR(4, 3) = adlgin.strDead
    OutR(4, 4) = adlgin.strAlive
    Call SetRangeBorder(OutR(3, 1).Resize(2, 2), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(3, 3).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(4, 3).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(OutR(4, 5), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(5, 1).Resize(3, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(5, 2).Resize(2, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(7, 2), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(5, 3).Resize(2, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(OutR(5, 5).Resize(2, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutR(7, 3).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(OutR(7, 5), xlThin, xlThin, xlThin, xlThin)
    
    Set r = GetRangeByString(tmpSht, "|fffd||fffd||fffd||293|I|fffd||fffd||fffd||fffd|")
    OutR(3, 7) = "|fffd||fffd||fffd||293|I|fffd||fffd||fffd||fffd|"
    OutR(1, 1).Font.Bold = True
    OutR(4, 7) = r(1, 2)
    Call SetRangeBorder(OutR(4, 7), xlThin, xlThin, xlThin, xlThin)
    OutR(4, 7).NumberFormat = "0.0%"
    Application.DisplayAlerts = False
    tmpSht.Delete
    Application.DisplayAlerts = True
    outSht.Activate
    Range("A1").Select
    ActiveWindow.DisplayGridlines = False
    On Error GoTo 0
End Sub

'---------------------------------------------------------------
Sub IS_MTHR_LOG()          '|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N|fffd||fffd|A|fffd||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim adlgin As DLG_IN
    Dim ActShtObj As Worksheet, tmpSht As Worksheet
    Dim dlg As Object
    Dim extraInfo As EXTRA_JSK
    Dim r As Range
    
    '|fffd|J|fffd|n|fffd|V|fffd|[|fffd|g|fffd||315||6d1||fffd|
    Set ActShtObj = ActiveSheet
    
    '|fffd||fffd||fffd||fffd||fffd||752||fffd|
    Set dlg = ThisWorkbook.DialogSheets("DlgLjkk")
    dlg.Buttons("btnVarSel").OnAction = "JskGetVarSelect"

    'DialogBox|fffd||315|\|fffd||fffd|
redisp:
    ActShtObj.Activate
    m_varselect = "0"
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
       
        adlgin.sRngDep = Trim((dlg.EditBoxes("edtObjRge").Text))
        adlgin.sRngInd = Trim((dlg.EditBoxes("edtVarRge").Text))
        adlgin.bName = IIf(dlg.OptionButtons("optSmpName") = xlOn, 1, 0)
        If adlgin.bName Then
            adlgin.sRngT_Name = Trim((dlg.EditBoxes("edtNameRge").Text))
        End If
        If adlgin.sRngDep = "" Or adlgin.sRngInd = "" Or (adlgin.bName And adlgin.sRngT_Name = "") Then
            MsgBox MSG_ERR_DATARAGE
            GoTo redisp
        End If
        adlgin.bTitle = IIf(dlg.OptionButtons("optTitle") = xlOn, 1, 0)
        adlgin.bStop = IIf(dlg.OptionButtons("optStop") = xlOn, 1, 0)
        adlgin.bSatari = IIf(dlg.OptionButtons("optSatari") = xlOn, 1, 0)
        adlgin.dBase = val(dlg.EditBoxes("edtBase").Text)
        If adlgin.dBase < 0 Or adlgin.dBase > 1 Then
            MsgBox MSG_ERR_DATARAGE
            GoTo redisp
        End If
        
        extraInfo.DataType = IIf(dlg.OptionButtons("optDataType1") = xlOn, 1, 2)
        If extraInfo.DataType = 1 Then
            extraInfo.ClsData(1) = val(dlg.EditBoxes("edtClsData1").Text)
            extraInfo.ClsData(2) = val(dlg.EditBoxes("edtClsData2").Text)
            extraInfo.ClsName(1) = Trim(dlg.EditBoxes("edtClsName1").Text)
            extraInfo.ClsName(2) = Trim(dlg.EditBoxes("edtClsName2").Text)
        Else
            extraInfo.DivPoint = val(dlg.EditBoxes("edtDivPoint").Text)
            extraInfo.ClsName(1) = Trim(dlg.EditBoxes("edtDivName1").Text)
            extraInfo.ClsName(2) = Trim(dlg.EditBoxes("edtDivName2").Text)
        End If
        adlgin.fmt = IIf(dlg.OptionButtons("optDataType1") = xlOn, 1, 2)
        If adlgin.fmt = 1 Then
            adlgin.cutval1 = 1 'val(dlg.EditBoxes("edtClsData1").Text)
            adlgin.cutval2 = 0 'val(dlg.EditBoxes("edtClsData2").Text)
            adlgin.strDead = Trim(dlg.EditBoxes("edtClsName1").Text)
            adlgin.strAlive = Trim(dlg.EditBoxes("edtClsName2").Text)
        Else
            adlgin.cutval3 = val(dlg.EditBoxes("edtDivPoint").Text)
            adlgin.strDead = Trim(dlg.EditBoxes("edtClsName1").Text)
            adlgin.strAlive = Trim(dlg.EditBoxes("edtClsName2").Text)
        End If
        
        adlgin.sRngDep = " " & adlgin.sRngDep
        adlgin.sRngInd = " " & adlgin.sRngInd
        If (adlgin.bName) Then
            adlgin.sRngT_Name = " " & adlgin.sRngT_Name
        End If
        
        Set tmpSht = handleJskData(adlgin, extraInfo)
        If tmpSht Is Nothing Then
            GoTo redisp
        End If
        
        adlgin.sRngDep = toXlRCstr(adlgin.sRngDep)
        adlgin.sRngInd = toXlRCstr(adlgin.sRngInd)
        adlgin.sRngT_Name = toXlRCstr(adlgin.sRngT_Name)
        
        Call changeToSSDir
        ActShtObj.Activate
        rtn = cLJkk(adlgin)
        If rtn = 0 And adlgin.bSatari <> 1 Then
            Call OutputLOG(adlgin)
            Call Comm_CutDataLink(ActiveWorkbook, GxlaBkGraph)
        End If
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
End Sub

Sub IS_MTHR_Th1Cox()          '|fffd|b|fffd||fffd||fffd||fffd||fffd||314||fffd||fffd|n|fffd|U|fffd|[|fffd|h|fffd||fffd||fffd|f|fffd||fffd|
    Dim rtn As Integer
    Dim adlgin As DLG_IN
    
    #If 0 Then
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllJsk_Main(3)
    #Else
    Dim dlg As Object
    '|fffd|J|fffd|n|fffd|V|fffd|[|fffd|g|fffd||315||6d1||fffd|
    Set GActShtObj = ActiveSheet
    
    '|fffd||fffd||fffd||fffd||fffd||752||fffd|
    Call InitVarSel_TK(3) '|fffd|S|fffd||1d5||3d0||fffd||fffd||18f||fffd||fffd||fffd||fffd|l
    Call setMacro_Tk("set_XInfo_fromXRgeStr")
    Set dlg = GdlgObj
    
    'DialogBox|fffd||315|\|fffd||fffd|
redisp:
    GActShtObj.Activate
    rtn = dlg.Show
    If rtn = False Then Exit Sub
    If SetXnoArray("") = False Then GoTo redisp
    
    adlgin.sRngDep = Trim(toXlRCstr(dlg.EditBoxes("edtObjVar").Text))
    adlgin.sRngT_Name = Trim(toXlRCstr(dlg.EditBoxes("edtTDVar").Text))
    adlgin.sRngInd = Trim(toXlRCstr(dlg.EditBoxes("edtSpeVar").Text))
    If adlgin.sRngDep = "" Or adlgin.sRngT_Name = "" Or adlgin.sRngInd = "" Then
        MsgBox MSG_ERR_DATARAGE
        GoTo redisp
    End If
    adlgin.bTitle = 1 'IIf(dlg.OptionButtons("optTitle") = xlOn, 1, 0)
    adlgin.bStop = 1 'IIf(dlg.OptionButtons("optStop") = xlOn, 1, 0)
    
    '2005.12.21 WZH Added
    adlgin.sRngDep = " " & adlgin.sRngDep
    adlgin.sRngT_Name = " " & adlgin.sRngT_Name
    adlgin.sRngInd = " " & adlgin.sRngInd
    
    Call changeToSSDir
    GActShtObj.Activate
    rtn = cCox(adlgin, GxNoArray)
    ReDim GxNoArray(0) As Integer   'free memory
    
    #End If
End Sub
Attribute VB_Name = "sssKm"
'=======================================================
' SSS|fffd||fffd||fffd|vVer7 : DLL JSK
'
' 2005.9 LSQ
'=======================================================
Option Private Module
Option Explicit

Type DLG_IN_KM
    sRngDep As String       '|fffd||693|I|fffd||3d0||fffd|
    sRngInd As String       '|fffd||fffd||fffd|_|fffd||3d0||fffd||fffd||348||fffd|
    sRngGrp As String       '|fffd|Q|fffd||3d0||fffd||fffd||348||fffd|
    bStop As Integer
End Type

Type OBJSELECTIVE
    firstNo As Integer
    firstName As String
    secondNo As Integer
    secondName As String
End Type

Private objSelect As OBJSELECTIVE
Private VbaGrp() As VBAGRAPH

#If Win64 Then
    #If VBA7 Then
        Declare PtrSafe Function KM2P5 Lib "MTHR_G_JSK_64.dll" (adlgin As DLG_IN_KM, grp() As VBAGRAPH, ByVal callback As LongPtr) As Integer
    #Else
        Declare Function KM2P5 Lib "MTHR_G_JSK_64.dll" (adlgin As DLG_IN_KM, grp() As VBAGRAPH, ByVal callback As Long) As Integer
    #End If
#Else
    #If VBA7 Then
        Declare PtrSafe Function KM2P5 Lib "MTHR_G_JSK.dll" (adlgin As DLG_IN_KM, grp() As VBAGRAPH, ByVal callback As LongPtr) As Integer
    #Else
        Declare Function KM2P5 Lib "MTHR_G_JSK.dll" (adlgin As DLG_IN_KM, grp() As VBAGRAPH, ByVal callback As Long) As Integer
    #End If
#End If

Function ReallocGrp(ByVal n As Long) As Long
    ReDim VbaGrp(1 To n)
    Call InitGrpAry(VbaGrp)
    ReallocGrp = 0
End Function
    
Private Function handleKMData(JskTbl As DLG_IN_KM, objSelect As OBJSELECTIVE) As Worksheet
    Dim i As Long, j As Long
    Dim RgeObj As Range, RgeVar As Range, rgeGrp As Range, rge As Range
    Dim RgeSmpName As Range
    Dim tmpSht As Worksheet
    Dim Jskobj As Variant, Jskvar As Variant, JskName As Variant
    Dim JskVarSel As Variant
    Dim NameRow As Long, smpNum As Long, objSmpNum As Long
    Dim msgStr As String
    Dim ValidNum As Long
    Dim bGrpIn As Boolean
    
    On Error Resume Next
    Set RgeObj = Range(JskTbl.sRngDep)
    Set RgeVar = Range(JskTbl.sRngInd)
    Set rgeGrp = Range(JskTbl.sRngGrp)
    
    If rgeGrp Is Nothing Then
        JskTbl.sRngGrp = ""
        bGrpIn = False
    Else
        bGrpIn = True
    End If
    
    Jskvar = RgeVar.Value
    
    msgStr = ""
    If RgeVar Is Nothing Or RgeObj Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set tmpSht = Nothing
        Exit Function
    End If
    
    Set tmpSht = RgeVar.Worksheet.Parent.Sheets.Add
    Set rge = tmpSht.Range("$A$1")
    If bGrpIn Then
        Call PasteRange(rgeGrp.Columns(1), rge, xlPasteValues)
    Else
        For i = 1 To RgeVar.Rows.Count
            rge(i, 1) = 1
        Next i
    End If
    Set rge = tmpSht.Range("$B$1")
    Call PasteRange(RgeObj, rge, xlPasteValues)
    ReDim JskVarSel(0 To RgeVar.Columns.Count) As Long
    JskVarSel(0) = RgeVar.Columns.Count
    For i = 1 To RgeVar.Columns.Count
        JskVarSel(i) = i - 1
    Next i
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To JskVarSel(0)
            rge(i, j + 1) = RgeVar(i, JskVarSel(j) + 1)
        Next j
    Next i
    JskTbl.sRngInd = Range(rge(1, 2), rge(RgeVar.Rows.Count, JskVarSel(0) + 1)).Address

    Set rge = Range(JskTbl.sRngInd)
    smpNum = rge.Rows.Count
    
    objSmpNum = RgeObj.Rows.Count
    Set rge = Range("B1")
    Set rge = Range(rge(1, 1), rge(objSmpNum, 1))
    j = 1
    For i = objSmpNum To 2 Step -1
        If Not (rge(i, 1) = objSelect.firstNo Or rge(i, 1) = objSelect.secondNo) Then
            rge(i, 1) = "-"
        Else
            If rge(i, 1) = objSelect.firstNo Then
                rge(i, 1) = 1
            Else
                rge(i, 1) = 0
            End If
        End If
    Next i
    
    Set rge = Range("B1")
    Set rge = Range(rge(1, 1), rge(objSmpNum, JskVarSel(0) + 1))
    For i = objSmpNum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) < rge.Columns.Count Then
            If JskTbl.bStop <> 1 Then
                tmpSht.Rows(rge.Rows(i).Row).Delete xlUp
                smpNum = smpNum - 1
                objSmpNum = objSmpNum - 1
            Else
                Application.DisplayAlerts = False
                tmpSht.Delete
                Application.DisplayAlerts = True
                Set handleKMData = Nothing
                MsgBox "|fffd|w|fffd||fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|||fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|||fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|", vbInformation
                Exit Function
            End If
        End If
    Next i
    
    Set rge = Range("C1")
    Set rge = Range(rge(1, 1), rge(smpNum, JskVarSel(0)))
    For i = smpNum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) < rge.Columns.Count Then
            If JskTbl.bStop <> 1 Then
                tmpSht.Rows(rge.Rows(i).Row).Delete xlUp
                smpNum = smpNum - 1
            Else
                Application.DisplayAlerts = False
                tmpSht.Delete
                Application.DisplayAlerts = True
                Set handleKMData = Nothing
                MsgBox "|fffd|w|fffd||fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|||fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|||fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|", vbInformation
                Exit Function
            End If
        End If
    Next i
       
    Set rge = tmpSht.Range("$A$1")
    
    JskTbl.sRngGrp = Range(rge(1, 1), rge(smpNum, 1)).Address
    JskTbl.sRngGrp = tmpSht.name & "!" & JskTbl.sRngGrp
    
    Set rge = tmpSht.Range("$B$1")
    
    JskTbl.sRngDep = Range(rge(1, 1), rge(objSmpNum, 1)).Address
    JskTbl.sRngDep = tmpSht.name & "!" & JskTbl.sRngDep
    
    JskTbl.sRngInd = Range(rge(1, 2), rge(smpNum, JskVarSel(0) + 1)).Address
    JskTbl.sRngInd = tmpSht.name & "!" & JskTbl.sRngInd
       
    Set handleKMData = tmpSht
    On Error GoTo 0
End Function

'---------------------------------------------------------------
Sub IS_MTHR_Th1Lftbl()          '|fffd|J|fffd|v|fffd||fffd||fffd||fffd||fffd|}|fffd|C|fffd||fffd||fffd|[|fffd|@
    Dim rtn As Integer
    Dim adlgin As DLG_IN_KM
    Dim ActShtObj As Worksheet, tmpSht As Worksheet
    Dim dlg As Object
    Dim rge As Range, rge2 As Range
    Dim i As Long, j As Long
    Dim para As Object
    Dim grpnum As Integer
    Dim r As Range
    On Error Resume Next
    '|fffd|J|fffd|n|fffd|V|fffd|[|fffd|g|fffd||315||6d1||fffd|
    Set ActShtObj = ActiveSheet
    
    '|fffd||fffd||fffd||fffd||fffd||752||fffd|
    Set dlg = ThisWorkbook.DialogSheets("DlgKm")

    'DialogBox|fffd||315|\|fffd||fffd|
redisp:
    ActShtObj.Activate
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
       
        adlgin.sRngDep = Trim((dlg.EditBoxes("edtObjRge").Text))
        adlgin.sRngInd = Trim((dlg.EditBoxes("edtVarRge").Text))
        adlgin.sRngGrp = Trim(dlg.EditBoxes("edtGrpRge").Text)
        If adlgin.sRngDep = "" Or adlgin.sRngInd = "" Then
            MsgBox MSG_ERR_DATARAGE
            GoTo redisp
        End If
        adlgin.bStop = IIf(dlg.OptionButtons("optStop") = xlOn, 1, 0)
    
        adlgin.sRngDep = adlgin.sRngDep
        adlgin.sRngInd = adlgin.sRngInd
        adlgin.sRngGrp = adlgin.sRngGrp
        
        objSelect.firstNo = val(dlg.EditBoxes("edtFirstNo").Text)
        objSelect.secondNo = val(dlg.EditBoxes("edtSecondNo").Text)
        objSelect.firstName = Trim(dlg.EditBoxes("edtFirstName").Text)
        objSelect.secondName = Trim(dlg.EditBoxes("edtSecondName").Text)
        If objSelect.firstNo < 0 Or objSelect.secondNo < 0 Then
            GoTo redisp
        End If
        
        Set tmpSht = handleKMData(adlgin, objSelect)
        If tmpSht Is Nothing Then
            GoTo redisp
        End If
        
        adlgin.sRngDep = toXlRCstr(adlgin.sRngDep)
        adlgin.sRngInd = toXlRCstr(adlgin.sRngInd)
        adlgin.sRngGrp = toXlRCstr(adlgin.sRngGrp)
        
        Call changeToSSDir
        ActShtObj.Activate
        rtn = KM2P5(adlgin, VbaGrp, AddressOf ReallocGrp)
        If rtn = 0 Then
            For i = 1 To UBound(VbaGrp)
                If VbaGrp(i).Type <> 0 Then
                    If ConvToBSTR(VbaGrp(i)) Then
                        Set para = Comm_SetDict(VbaGrp(i).grpPara)
                        grpnum = CInt(para("GroupNum"))
                        If grpnum > 1 Then
                            For j = 1 To grpnum
                                Set r = ActiveSheet.Columns(1).Find("|fffd||fffd||fffd|Q" & j & "|fffd||310||fffd||fffd||fffd||fffd||fffd||fffd||190|M|fffd||fffd||fffd||fffd||fffd|")
                                If j < grpnum Then
                                    Set rge2 = ActiveSheet.Columns(1).Find("|fffd||fffd||fffd|Q" & j + 1 & "|fffd||310||fffd||fffd||fffd||fffd||fffd||fffd||190|M|fffd||fffd||fffd||fffd||fffd|")
                                Else
                                    Set rge2 = ActiveSheet.Columns(1).Find("|fffd||fffd||fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd||fffd|")
                                End If
                                Set r = Range(r(3, 1), rge2(-1, 2))
                                VbaGrp(i).grpPara = VbaGrp(i).grpPara & "&GrpInfo" & j & "=" & toXlRCstr(r.Address)
                            Next j
                        Else
                            Set r = ActiveSheet.Columns(1).Find("|fffd||fffd||fffd|Q1|fffd||310||fffd||fffd||fffd||fffd||fffd||fffd||190|M|fffd||fffd||fffd||fffd||fffd|")
                            Set r = Range(r(3, 1), r.End(xlDown))
                            Set r = r.Range("A1").Resize(r.Rows.Count, 2)
                            VbaGrp(i).grpPara = VbaGrp(i).grpPara & "&GrpInfo1=" & toXlRCstr(r.Address)
                        End If
                        Application.Run GxlaBkGraph & "!DrawKMGrp", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                        Call Comm_CutDataLink(ActiveWorkbook, GxlaBkGraph)
                    End If
                End If
            Next i
            ActiveWindow.DisplayGridlines = False
        End If
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub

Attribute VB_Name = "startEnd"
'=======================================================
' iSTAT_MTHR Ver1.0 : |fffd|X|fffd|^|fffd|[|fffd|g & |fffd|N|fffd||fffd||fffd|[|fffd|Y |fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd|
'
' 2011.9
'=======================================================
Option Explicit


Sub Auto_open()
    Dim nbk As Integer
    Dim iconBar As CommandBar
    Dim rtn As Long
    
    'Excel|fffd||30a||8b||fffd||fffd||6d1||fffd| & |fffd|\|fffd||fffd||fffd|I|fffd|v|fffd|V|fffd||fffd||fffd||fffd||fffd||310||752||fffd|
    Call Environment_SAVE
    
    '|fffd||fffd||fffd|t|fffd||fffd|check
    If user_date_chk() = False Then 'Check ISTAT.INI
        Call fExit_iSTAT_MTHRV1
    End If
    
    '
    If UpdateUserCheck() = False Then 'Check MTHR01.ini
        Call fExit_iSTAT_MTHRV1
    End If

    '|fffd|V|fffd|[|fffd|g|fffd||315|\|fffd||fffd||fffd||602||fffd||582||fffd|OFF
    Application.ScreenUpdating = False
    
    Call changeToSSDir
    nbk = Workbooks.Count
    If (nbk = 0) Then
        Workbooks.Add
    End If
    
     'XLA Program Open
    Call WorkBookOpen_SetOpenNum(GBKNAME_VBACM) 'firstly open COMMON file
    Call WorkBookOpen(GxlaBkGraph)
    Call WorkBookOpen(GxlaBkGraph1)
    Call WorkBookOpen(GxlaBkGraph2)
    If Not MTHR_USB_VERSION Then
        Call WorkBookOpen(GxlaBkDllR, False)
        CheckTrial
        rtn = GetRgeInfo
        If rtn = -1 Then
            'MsgBox "This trial application is expired, and it will exit.", vbOKOnly
            MsgBox "|fffd||fffd||fffd|p|fffd||fffd||fffd||502||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||143|\|fffd|t|fffd|g|fffd||242||82||fffd||fffd||fffd|"
            Call fExit_iSTAT_MTHRV1
        ElseIf rtn = -2 Then
            Call fExit_iSTAT_MTHRV1
        End If
    End If
    '
#If 0 Then
    If getExcelVerNo() >= 12 Then
        Call WorkBookOpen_SetOpenNum(GBKNAME_VBA07)
    End If
#End If

    If getExcelVerNo() < 12 Then
        Call make_MenuBar
    Else
        WorkBookOpen (RibbonMenu)
    End If
End Sub

Sub Auto_Close()
    Call fExit_iSTAT_MTHRV1
End Sub

Sub fExit_iSTAT_MTHRV1()
    
    On Error Resume Next
    
    Application.CutCopyMode = xlCopy
    
    '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||d3dc|
    'If getExcelVerNo() < 12 Then '10.10.22 LSQ mdf
        Call delete_MenuBar(BARNAME_iSTAT_MTHRV1)
    'End If
    
'    '|fffd|u|fffd|b|fffd|N|fffd||303|N|fffd||fffd||fffd|[|fffd|Y

    'Book Close
    Call WorkBookClose(GxlaBkGraph)
    Call WorkBookClose(GxlaBkGraph1)
    Call WorkBookClose(GxlaBkGraph2)
    If Not MTHR_USB_VERSION Then
        Call WorkBookClose(GxlaBkDllR)
    End If
    If getExcelVerNo() >= 12 Then
        Call WorkBookClose(RibbonMenu)
    End If
#If 0 Then
    If getExcelVerNo() >= 12 Then
        Call WorkBookClose_OnOpenNum(GBKNAME_VBA07)
    End If
#End If

    '
    Call WorkBookClose_OnOpenNum(GBKNAME_VBACM) 'at last close COMMON file

    Application.ScreenUpdating = True '|fffd||fffd||295|\|fffd||fffd|ON
    Application.DisplayAlerts = True '|fffd||6d1||fffd||fffd||fffd|
    
    On Error GoTo 0

    ThisWorkbook.Close saveChanges:=False

End Sub

Private Sub Environment_SAVE()
    Environment_Sub (True)
End Sub
'
Private Sub Environment_RECV()
    Environment_Sub (False)
End Sub
'
'save & recovery
'
Private Sub Environment_Sub(ByVal bSave As Boolean)
    Dim i As Integer, barNum As Integer, tmpstr As String, tmpCel As Range
    Dim savBgn As Range
    Set savBgn = ThisWorkbook.Worksheets(G_StName_Info).Range("I3")
    '
    Application.ScreenUpdating = False
    
    If bSave Then   'save and setting
'        savBgn(1, 1) = Application.DisplayFormulaBar
'        savBgn(2, 1) = Application.DisplayStatusBar
        savBgn(3, 1) = Application.ReferenceStyle
        savBgn(4, 1) = Application.DefaultFilePath
        
        savBgn(5, 1) = Application.StandardFont
        savBgn(6, 1) = Application.StandardFontSize
        
'        Application.DisplayFormulaBar = False
'        Application.DisplayStatusBar = False
        'Application.ReferenceStyle = xlR1C1
        
        '2015.05.19 cmt:
        'Application.StandardFont = "|fffd|l|fffd|r |fffd||fffd||fffd||fffd|"
        'Application.StandardFontSize = "12"
        'end cmt
        
'        barNum = Toolbars.Count
'        savBgn(10, 1) = barNum
'
'        For i = 1 To barNum
'            savBgn(i + 10, 1) = Toolbars(i).Visible: Toolbars(i).Visible = False
'        Next
    Else    'recovery
'        Set tmpCel = savBgn(1, 1)
'        If isCellNotEmpty(tmpCel) Then
'            Application.DisplayFormulaBar = tmpCel
'        End If
'
'        Set tmpCel = savBgn(2, 1)
'        If isCellNotEmpty(tmpCel) Then
'            Application.DisplayStatusBar = tmpCel
'        End If
        
        Set tmpCel = savBgn(3, 1)
        If isCellNotEmpty(tmpCel) Then
            Application.ReferenceStyle = tmpCel
        End If
        
        tmpstr = CStr(savBgn(4, 1))
        If Trim(tmpstr) <> "" Then
            Application.DefaultFilePath = savBgn(4, 1)
        End If
        
        '2015.05.19 cmt:
        'Set tmpCel = savBgn(5, 1)
        'If isCellNotEmpty(tmpCel) Then
        '    Application.StandardFont = tmpCel
        'End If
        '
        'Set tmpCel = savBgn(6, 1)
        'If isCellNotEmpty(tmpCel) Then
        '    Application.StandardFontSize = tmpCel
        'End If
        'end cmt
'        barNum = Val(savBgn(10, 1))
'
'        For i = 1 To barNum
'            Toolbars(i).Visible = savBgn(i + 10, 1)
'        Next
    End If
    
End Sub

 Sub CheckTrial()
    Dim nRtn As Long
    nRtn = Application.Run(GxlaBkDllR & "!CheckRegInfo", "111", "MTHR", 30, -1)
    ThisWorkbook.Worksheets(G_StName_Info).Range("A1") = nRtn
End Sub

Function GetRgeInfo() As Long
    GetRgeInfo = CLng(ThisWorkbook.Worksheets(G_StName_Info).Range("A1"))
End Function
'=== EOF ===
Attribute VB_Name = "varSelMdl"
'========================================================
' |fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e|w|fffd||fffd|AcommSelMdl|fffd||18d||fffd||fffd||d0b9||fffd||10e|g|fffd|p
'
' 2005.12.07
'========================================================
Option Explicit

'
'|fffd||3d0||fffd||fffd|I|fffd||fffd|
'
Sub doSelX()
    Dim rtn
    Dim actSht As Worksheet
    '
    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||316||fffd||fffd||302||194||50d||fffd||fffd||752||fffd|
    If trans_WorkRange(1) = False Then Exit Sub
    '
    rtn = Comm_VarSel()
    
    '|fffd|w|fffd||830b||fffd||282||fffd|Save
    If rtn <> False Then
        trans_WorkRange (2)
    End If
    
    '|fffd|J|fffd|n|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd|A|fffd|N|fffd|e|fffd|B|fffd|u
    Set actSht = GActShtObj
    actSht.Activate

End Sub
'
'|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||316||fffd||fffd||302||194||50d||fffd||fffd||fffd||fffd||fffd||18b||fffd||fffd||593|]|fffd||fffd|
'flg: 1=from save area to work area, 2=the reverse
'
Private Function trans_WorkRange(flg As Integer) As Boolean
    Dim ANum As Integer, BNum As Integer, varNum As Integer
    Dim FrmCell As Range, ToCell As Range
    
    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30c||90||fffd|
    If flg = 1 Then
        ANum = NkrVarNum()
        BNum = SelVarNum()
        Set FrmCell = GbgnCel
        Set ToCell = getCellObj(1)  'Number
    Else
        ANum = getListNum_CommSel(1)
        BNum = getListNum_CommSel(2)
        Set FrmCell = getCellObj(1)  'Number
        Set ToCell = GbgnCel
    End If
    If ANum <= 0 Then ANum = 0
    If BNum <= 0 Then BNum = 0
    varNum = ANum + BNum
    '
    If varNum = 0 Then
        trans_WorkRange = False
        Exit Function
    End If
    
    '|fffd||fffd||fffd|e|fffd||303|R|fffd|s|fffd|[
    FrmCell.Worksheet.Activate
    FrmCell.Offset(0, 0).Range("A1:D" & (varNum + 1)).Copy
    ToCell.Worksheet.Activate
    ToCell.Select
    ActiveSheet.Paste
    
    trans_WorkRange = True
   
End Function

'
'|fffd||348||355||fffd||fffd||fffd||fffd||42a42||fffd||3d0||fffd||fffd||313||fffd||fffd|e|fffd||fffd||752||fffd|
'
'|fffd|g|fffd|p|fffd||fffd||fffd||fffd||fffd|F
'   |fffd||3d0||fffd||fffd|I|fffd||fffd||fffd||24a||582||fffd||fffd||fffd|S|fffd||1d5||3d0||fffd||fffd||752||fffd||3c2||fffd|
'
Sub set_XInfo_fromXRgeStr()
    Call set_XInfo_Sub(0)
End Sub
'
'
'callFlg : 0=Normal
'2K.9.27 mdf by LSQ
'
Private Sub set_XInfo_Sub(callFlg As Integer)
    Dim rtn
    Dim i As Integer, xNum As Integer
    Dim bColAdj As Boolean, bSmpDt_ColAdj As Boolean, bCrsDt_ColAdj As Boolean, bOneRow As Boolean
    Dim xRgeStr As String, dirflg As Integer, firstFlg As Integer, firstFlgA As Integer, smpItmFlg As Integer
    Dim bkName As String, stName As String, rgStr As String
    Dim xRgeObj As Range, frmCel As Range, toCel As Range
    Dim actSht As Worksheet
    
    Dim edtRge As EditBox, optData As OptionButton
    
    'DialogBox|fffd||30e|w|fffd||fffd||fffd||fffd|e
    Set edtRge = GedtRge
    Set optData = GoptData

    xRgeStr = Trim(edtRge.Text)
    firstFlg = objOnFlgEq2(optData) 'old : objOnFlg(); 2K.9.28 LSQ
    
    If getRangeInfo(xRgeStr, bkName, stName, rgStr) = False Then Exit Sub
    On Error Resume Next    '2005.12.21 PYJ
    Set xRgeObj = Workbooks(bkName).Worksheets(stName).Range(rgStr)  '|fffd||3d0||fffd||fffd||fffd||fffd||348||fffd|
    'Add: 2005.12.21 PYJ
    On Error GoTo 0
    If xRgeObj Is Nothing Then
        MsgBox "|fffd||348||34e|w|fffd||80aa||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"
        Exit Sub
    End If
    'End Add
    
    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30c||90||fffd|
    xNum = xRgeObj.Columns.Count
    
    If xNum < 1 Then Exit Sub
    
    '|fffd|V|fffd|[|fffd|g|fffd||313||fffd||fffd||fffd||292|u|fffd||fffd|
    Set toCel = GbgnCel
    Set toCel = toCel.Offset(1, 2)  '|fffd||fffd||fffd||302||30a|J|fffd|n|fffd|Z|fffd||fffd|
    
    If firstFlg = 1 Then    'Title
        xRgeObj.Worksheet.Activate
        For i = 0 To xNum - 1
            Set frmCel = xRgeObj.Range("A1").Offset(0, i).Range("A1") '2006.1.13 mdf
            toCel.Offset(i, 0) = frmCel.Text
            toCel.Offset(i, 1) = i + 1
        Next i
    Else    'No Title
        For i = 0 To xNum - 1
            toCel.Offset(i, 0) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd|" & (i + 1)
            toCel.Offset(i, 1) = i + 1
        Next i
    End If
   
    '|fffd||90||fffd||fffd||752||fffd|
    Set toCel = GbgnCel
    toCel = 0                 'un-selected
    toCel.Offset(0, 2) = xNum 'selected
   
    '|fffd|J|fffd|n|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd|A|fffd|N|fffd|e|fffd|B|fffd|u
    Set actSht = GActShtObj
    actSht.Activate    'H12.6.27 cmt by LSQ

End Sub
'
'|fffd|c|fffd||fffd||3d0||fffd||fffd||30c||90||fffd|
'H12.7.18 mdf : chaged to private
'
Private Function NkrVarNum() As Integer
    Dim bgnCel As Range
    Set bgnCel = GbgnCel
    
    NkrVarNum = Int(val(bgnCel.Text))
End Function
'
'|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd||fffd||30c||90||fffd|
'H12.7.18 mdf : chaged to private
'
Private Function SelVarNum() As Integer
    Dim bgnCel As Range
    Set bgnCel = GbgnCel
    
    SelVarNum = Int(val(bgnCel.Offset(0, 2).Text))
End Function
'
'|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||64fe|
'
Function SetXnoArray(Optional ByVal sMsg As String = "") As Boolean '2005.6 PYJ  old:
'Function SetXnoArray() As Boolean
    Dim i As Integer, xNum As Integer
    Dim bgnCel As Range
    
    ThisWorkbook.Activate
    
    xNum = SelVarNum()
    If xNum < 1 Then
        '2005.6 PYJ
        If sMsg = "" Then
            MsgBox MSG_SETUNUM_LESS2
        Else
            MsgBox sMsg, vbInformation
        End If
        'add end  old
        'MsgBox MSG_SETUNUM_LESS2
        SetXnoArray = False
        Exit Function
    End If
    '
    ReDim GxNoArray(0 To xNum) As Integer
    
    Set bgnCel = GbgnCel
    Set bgnCel = bgnCel.Offset(1, 3)
    
    For i = 0 To xNum - 1
        GxNoArray(i) = Int(val(bgnCel.Offset(i, 0).Text))
    Next i
        
    SetXnoArray = True
    
End Function
'
'return "" = ERROR else OK
'H12.7.18 LSQ moved from subthr.xls
'
Function getChkRgeStr(dlg As Object, edtName As String, errMsg As String) As String
    Dim tmpstr As String
    getChkRgeStr = ""
    
    tmpstr = Trim(dlg.EditBoxes(edtName).Text)
    If tmpstr = "" Then
        MsgBox errMsg
        Exit Function
    End If
    
    getChkRgeStr = tmpstr
    
End Function
'
'dlgItemObj = xlOn --> return 2 else 1;
'
Function objOnFlg(dlgItemObj As Object) As Integer
    objOnFlg = 1    'default
    If dlgItemObj Is Nothing Then Exit Function
    If dlgItemObj = xlOn Then objOnFlg = 2
End Function
'
'dlgItemObj = xlOn --> return 2 else 1;
'
Function objOnFlgEq2(dlgItemObj As Object) As Integer
    objOnFlgEq2 = 1    'default
    If dlgItemObj Is Nothing Then Exit Function
    If dlgItemObj = xlOn Then objOnFlgEq2 = 2
End Function
'
'return 1 or 2
'
Function objOnFlgEq1(dlgItemObj As Object) As Integer
    objOnFlgEq1 = 2   'default
    If dlgItemObj Is Nothing Then Exit Function
    If dlgItemObj = xlOn Then objOnFlgEq1 = 1
End Function
'
'|fffd|}|fffd|N|fffd||fffd||fffd||752||fffd|
'
'|fffd||752||fffd||38f||6c1|F
'   |fffd||3d0||fffd||fffd|I|fffd||fffd|Button |fffd||fffd|
'   |fffd||fffd||fffd||354||348||fffd|EditBox|fffd|A|fffd||fffd|sOptionButton|fffd|A|fffd||fffd||fffd|x|fffd||fffd||fffd|f|fffd|[|fffd|^OptionButton
'|fffd||fffd||fffd||fffd|:
'   |fffd||3d0||fffd||fffd|I|fffd||fffd||fffd||24a||582||fffd||fffd||fffd|S|fffd||1d5||3d0||fffd||fffd||752||fffd||3c2||fffd| (see, i.e., InitVarSel_Thr)
'H12.6.24 -- H12.7.18 LSQ
'
Private Sub setMacro_ToDlgItems(macroStr As String)
    Dim dlg As Object
    Set dlg = GdlgObj
    
    dlg.Buttons("btnSelX").OnAction = "doSelX"
    
    GedtRge.OnAction = macroStr
    If Not GoptLabel Is Nothing Then
        GoptLabel.OnAction = macroStr
    End If
    If Not GoptData Is Nothing Then
        GoptData.OnAction = macroStr
    End If
End Sub

Sub setMacro_Tk(macroStr As String)
    Call setMacro_ToDlgItems(macroStr)
End Sub
'
'CommSelMdl|fffd||30f||fffd||fffd||fffd||fffd||fffd|
'|fffd||3d0||fffd||fffd|I|fffd||fffd||fffd||24a||582||fffd||fffd||fffd|S|fffd||1d5||3d0||fffd||fffd||310||752||fffd|
'H12.6.24 LSQ
'
Sub InitVarSel_TK(method As Integer)
    Dim stObj As Worksheet
    
    ThisWorkbook.Activate   'H12.6.27 LSQ
    
    InitVarSel

    Set stObj = ThisWorkbook.Worksheets("SelSht")
    Select Case method
        Case 1:
            Set GdlgObj = ThisWorkbook.DialogSheets("dlgLjkk")
            Set GbgnCel = stObj.Range("F2")
        Case 2:
            Set GdlgObj = ThisWorkbook.DialogSheets("dlgWeibullRate")
            Set GbgnCel = stObj.Range("J2")
        Case 3:
            Set GdlgObj = ThisWorkbook.DialogSheets("dlgCox")
            Set GbgnCel = stObj.Range("N2")
    End Select
    'GlblA = TEXT_VAR_lblA
    'GlblB = TEXT_VAR_lblB
    
    Set GedtRge = GdlgObj.EditBoxes("edtSpeVar")
    Set GoptLabel = Nothing 'GdlgObj.OptionButtons("optTitle")
    Set GoptData = Nothing 'GdlgObj.OptionButtons("optData")
    
    '|fffd||fffd||fffd||d0b9||fffd||fffd|
    If SelVarNum() = 0 Then
        GedtRge.Text = ""
    End If
    
End Sub

'=== EOF ===



' InQuest injected base64 decoded content
' ZrH+

INQUEST-PP=macro
