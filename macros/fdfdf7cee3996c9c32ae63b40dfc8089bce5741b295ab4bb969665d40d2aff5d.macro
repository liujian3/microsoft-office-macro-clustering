Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Option Explicit

Private myWordEvents As WordEvents
Dim WithEvents App As Application
Attribute App.VB_VarHelpID = -1

Private Sub Document_New()
    Document_Open
End Sub

' ########################################################################
' DOCUMENT EVENTS
' ########################################################################

Private Sub Document_Open()
    CheckProperty
    
    Set App = Application
    MsgBox "Required Fields:" & vbNewLine & "Performer" & vbNewLine & "Start Mission Date" & vbNewLine & "End Mission Date" & vbNewLine & vbNewLine & "Those  fields, cannot exceed 250 characters:" & vbNewLine & "Organisation" & vbNewLine & "Mission Report Title" & vbNewLine & "MIPS" & vbNewLine & "Keywords", vbInformation, "INFORMATION"
    Set myWordEvents = New WordEvents
    'global variables for parameters
    usersNamespace = "http://ec.europa.eu/research/openxml/missionreport/users"
    usersXPath = "/PREFIX:users/PREFIX:user"
    
    'getting controls
    Set ddContentControlPerformer = ContentControlGet("ddPerformer")
    Set ptContentControlPerformerCount = ContentControlGet("ptPerformerCount")
    Set ptContentControlDirectorate = ContentControlGet("ptDirectorate")
    Set ptContentControlUnit = ContentControlGet("ptUnit")
    Set ddContentControlCountry = ContentControlGet("ddCountry")
    Set ptContentControlAddNewCountry = ContentControlGet("ptAddNewCountry")
    Set ptContentControlPerformerLogin = ContentControlGet("ptPerformerLogin")
    Set ddContentControlStartMissionDate = ContentControlGet("dpStartMissionDate")
    Set ddContentControlEndMissionDate = ContentControlGet("dpEndMissionDate")
    
    Dim startMissionDate As ContentControl
    Dim endMissionDate As ContentControl
    
    Set startMissionDate = ContentControlGet("dpStartMissionDate")
    Set endMissionDate = ContentControlGet("dpEndMissionDate")
    
    'ContentControlDateSet startMissionDate
    'ContentControlDateSet endMissionDate
    
    'initializing controls
    'If ptContentControlAddNewCountry.PlaceholderText = "" Then
    '    ptContentControlAddNewCountry.SetPlaceholderText , , "(add new country)"
    'End If
    
    'filling performer control
    Dim itemsTotal As Long
    ContentControlFill ddContentControlPerformer, usersNamespace, usersXPath, "", itemsTotal
    ContentControlSetValue ptContentControlPerformerCount, Replace(PerformerCountText, "[itemsTotal]", CStr(itemsTotal))
    
    Application.ScreenRefresh
    
    Application.OnTime Now + TimeSerial(0, 0, 0.001), "modRTDFrameworkOnChange.StartMonitoring"
End Sub

Private Sub Document_Close()
    Set App = Application
   
    Application.OnTime Now + TimeSerial(0, 0, 0.001), "modRTDFrameworkOnChange.StopMonitoring"
End Sub



' ########################################################################
' CONTENT CONTROL EVENTS
' ########################################################################

Private Sub Document_ContentControlOnEnter(ByVal ContentControl As ContentControl)
    
    If ContentControl.Tag = "ptAddNewCountry" Then
        ContentControlAddNewCountryProcessOnEnter ContentControl
    End If
    
    If ContentControl.Tag = "ptPerformerCount" Then
        ddContentControlPerformer.Range.Select                      'somehow user selected the counting content control, move him back to performer
    End If
    
End Sub

Private Sub Document_ContentControlOnExit(ByVal ContentControl As ContentControl, Cancel As Boolean)
    
    If ContentControl.Tag = "ddPerformer" Then
        ContentControlPerformerProcess ContentControl, True
    End If
    
End Sub

Public Sub CheckProperty()
    Dim prop As DocumentProperty
    If (ActiveDocument.CustomDocumentProperties.Count > 0) Then
        For Each prop In ActiveDocument.CustomDocumentProperties
            If prop.Name = "ContentTypeId" Or prop.Name = "Unit" Or prop.Name = "Legacy" Or prop.Name = "SubmitedToAres" Then
            prop.Delete
            End If
    Next
    End If
End Sub
Attribute VB_Name = "WordEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private WithEvents myWordApplication As Word.Application
Attribute myWordApplication.VB_VarHelpID = -1

Private Sub Class_Initialize()
    Set myWordApplication = Word.Application
End Sub

Private Sub myWordApplication_DocumentBeforePrint(ByVal Doc As Document, Cancel As Boolean)
    Debug.Print "event: DocumentBeforePrint"
    
    'adds a space so does not print anything
    ContentControlSetValue ptContentControlAddNewCountry, " "
    ContentControlSetValue ptContentControlPerformerCount, " "
End Sub

Private Sub myWordApplication_DocumentBeforeSave(ByVal Doc As Document, SaveAsUI As Boolean, Cancel As Boolean)
    If Not SaveAsUI Then
    
    Else
         
         If Not validate() Then
            MsgBox "The following fields are required:" & vbNewLine & "-Performer" & vbNewLine & "-Start Mission Date" & vbNewLine & "-End Mission Date", vbExclamation, "Required Fields are Missing"
            Cancel = True
         Else
            With Application.FileDialog(msoFileDialogSaveAs)
                .InitialFileName = "http://collab.rtd.cec.eu.int/activities/MissionReports/Mission%20Reports/" & Replace(Doc.Name, "%", " ")
                .FilterIndex = 2
                .Show
                .Execute
            End With
            Cancel = True
    End If
    End If
End Sub

Private Sub myWordApplication_WindowActivate(ByVal Doc As Document, ByVal Wn As Window)
    Debug.Print "event: WindowActivate"
End Sub

Private Sub myWordApplication_WindowDeactivate(ByVal Doc As Document, ByVal Wn As Window)
    Debug.Print "event: WindowDeactivate"
End Sub

Private Sub myWordApplication_WindowSelectionChange(ByVal Sel As Selection)
    Debug.Print "event: WindowSelectionChange"
    
    'writes back the PlaceholderText after printing...
    If ptContentControlAddNewCountry.Range.Text = " " Then
        ContentControlSetValue ptContentControlAddNewCountry, ""
    End If
End Sub


Attribute VB_Name = "modExecuteOnceHelperFunctions"
Option Explicit


Private Sub ContentControlSetPlaceholderText()
    
    Dim myContentControl As ContentControl
    
    'set ptAddNewCountry PlaceholderText
    Set myContentControl = ContentControlGet("ptAddNewCountry")
    myContentControl.SetPlaceholderText , , AddNewCountryPlaceholderText

    Set myContentControl = ContentControlGet("ddPerformer")
    myContentControl.SetPlaceholderText , , PerformerPlaceholderText

End Sub

    
    
Attribute VB_Name = "modRTDFramework"
Option Explicit


' ########################################################################
' CARLA ROGADO - VBA - RTD FRAMEWORK
' code reuse...
' ########################################################################


' ########################################################################
' Content Controls Functions
' ########################################################################

Public Sub ContentControlSmartText(theContentControl As ContentControl, onExitEvent As Boolean, namespace As String, xPath As String, ByRef itemsLong As Long)
    
    Static contentControlLastText As String
    Static selectedTextLength As Long
    
    theContentControl.Range.Text = UCase(theContentControl.Range.Text)
    
    itemsLong = 0
    
    Dim contentControlText As String
    contentControlText = theContentControl.Range.Text
    
    Dim exactMatch As Boolean
    exactMatch = False
    
    Dim matchID As Long
    If Len(contentControlText) = 0 Then
        matchID = ContentControlFill(theContentControl, namespace, xPath, "", itemsLong)
    Else
        matchID = ContentControlFill(theContentControl, namespace, xPath, contentControlText, itemsLong)
        
        If matchID > 0 Then
            exactMatch = True
        End If
        
        If (onExitEvent) Then
            If exactMatch Then
                theContentControl.DropdownListEntries(matchID).Select
            Else
                theContentControl.Range.Text = ""
                ContentControlFill theContentControl, namespace, xPath, "", itemsLong
            End If
        Else
            If Len(contentControlText) = Len(contentControlLastText) - selectedTextLength Then
                'user presses delete... don't do anything
            Else
                'If theContentControl.DropdownListEntries.Count > 0 Then
                    If exactMatch Then
                        theContentControl.DropdownListEntries(matchID).Select
                    ElseIf (theContentControl.DropdownListEntries.Count = 1) Then       'BEN request
                        ' OR for continuous suggestion: Else
                        'else the first entry is suggested to the user...
                        theContentControl.DropdownListEntries(1).Select
                    End If
                    
                    Debug.Print "------------------------"
                    Debug.Print "contentControlText before: " + contentControlText
                    Debug.Print "theContentControl.Range.Text: " + theContentControl.Range.Text
                    Debug.Print "contentControlLastText: " + contentControlLastText
                    Debug.Print "selectedTextLength: " + CStr(selectedTextLength)
                    
                    Dim myRange As Range
                    Set myRange = theContentControl.Range
                    myRange.MoveStart wdCharacter, Len(contentControlText)
                    myRange.Select
                    selectedTextLength = Len(myRange.Text)
                    Application.ScreenRefresh
                    contentControlText = theContentControl.Range.Text           'without this line delete does not work...
                    
                    Debug.Print "contentControlText after: " + contentControlText
                    Debug.Print "------------------------"
                    
                'End If
            End If
        End If
    End If
    
    contentControlLastText = contentControlText
End Sub

Public Function ContentControlGet(controlTag As String) As ContentControl
    
    'This function receives a Tag name and returns a ContentControl
    'Example on how to use it:
    '    Dim ddPerformer As ContentControl
    '    Set ddPerformer = ContentControlGet("ddPerformer")
    
    Dim result As ContentControl
    
    Dim resultTemp As ContentControl, i As Integer
    
    For i = 1 To ThisDocument.ContentControls.Count
        Set resultTemp = ThisDocument.ContentControls.Item(i)
        If (resultTemp.Tag = controlTag) Then
            Set result = ThisDocument.ContentControls.Item(i)
            Exit For
        End If
    Next i
    
    Set ContentControlGet = result

End Function

Public Sub ContentControlSetValue(theContentControl As ContentControl, value As String)
    
    'This function sets the value of a ContentControl
    'Example on how to use it:
    '    ContentControlSetValue ptContentControlUnit, "R.3"
    
    Dim currentLockState As Boolean
    currentLockState = theContentControl.LockContents
    
    theContentControl.LockContents = False
    theContentControl.Range.Text = value
    theContentControl.LockContents = currentLockState
    
End Sub

Public Function ContentControlFill(theContentControl As ContentControl, namespace As String, xPath As String, filter As String, ByRef itemsTotal As Long) As Long

    'This function receives a control, a namespace and a xPath string and fills the Content Control with the XML data
    ' if filter finds a match then the funtion return the index of that match, else it returns 0
    ' xPath should be something like: "/PREFIX:users/PREFIX:user"
    ' if a filter is defined only the records containing that string are added to the Content Control
    ' the last argument is passed ByRef and returns the number of items added to the ContentControl
    'Example on how to use it:
    '    Dim matchID As Long, itemsTotal As Long
    '    matchID = ContentControlFill(ddContentControlPerformer, "http://ec.europa.eu/research/openxml/missionreport/users", "/PREFIX:users/PREFIX:user", "", itemsTotal)
    
    itemsTotal = 0
    
    Dim result As Long, i As Long, nodeText As String, nodeTextNoAccent As String, filterNoAccent As String
    
    theContentControl.DropdownListEntries.Clear
    
    Dim myCustomXMLParts As CustomXMLParts, myCustomXMLPart As CustomXMLPart
    Dim myCustomXMLNodes As CustomXMLNodes, myCustomXMLNode As CustomXMLNode
    Dim NSCustom As String, NS As String, NSPrefix As String
    NSCustom = namespace
    
    Set myCustomXMLParts = ThisDocument.CustomXMLParts
    For Each myCustomXMLPart In myCustomXMLParts
        NS = myCustomXMLPart.NamespaceURI
        
        If StrComp(NS, NSCustom, vbTextCompare) = 0 Then
        
            NSPrefix = myCustomXMLPart.NamespaceManager.LookupPrefix(NS)
            xPath = Replace(xPath, "PREFIX", NSPrefix)
            Set myCustomXMLNodes = myCustomXMLPart.SelectNodes(xPath)
            
            For Each myCustomXMLNode In myCustomXMLNodes
                
                If (Len(filter) = 0) Then
                    
                    'Add all records
                    theContentControl.DropdownListEntries.Add myCustomXMLNode.Text
                    itemsTotal = itemsTotal + 1
                    
                Else
                    
                    filter = UCase(filter)
                    filterNoAccent = StringAccentRemoval(filter)
                    nodeText = UCase(myCustomXMLNode.Text)
                    nodeTextNoAccent = StringAccentRemoval(nodeText)
                    
                    'If (InStr(nodeTextNoAccent, filterNoAccent) > 0) Then        --- how to use contains? I did not find a good answer for this when using SmartText suggestion...
                    If (InStr(nodeTextNoAccent, filterNoAccent) = 1) Then
                        theContentControl.DropdownListEntries.Add nodeText
                        itemsTotal = itemsTotal + 1
                        i = i + 1
                    End If
                    
                    If (nodeTextNoAccent = filterNoAccent) Then
                        result = i
                    End If
                    
                End If
            Next
            
            Exit For
            
        End If
    Next
    
    If theContentControl.DropdownListEntries.Count = 1 Then
        result = 1
    End If
    
    ContentControlFill = result
End Function



' ########################################################################
' String Functions
' ########################################################################

Public Function StringAccentRemoval(value As String) As String
    
    Dim result As String
    result = value
    
    'upper and lower case
    'Dim accentCharacters As String
    'accentCharacters = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    'Dim nonAccentCharacters As String
    'nonAccentCharacters = "SZszYAAAAAACEEEEIIIIDNOOOOOUUUUYaaaaaaceeeeiiiidnooooouuuuyy"

    'only upper case - that's what we need now in Mission Report
    Dim accentCharacters As String
    accentCharacters = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Dim nonAccentCharacters As String
    nonAccentCharacters = "SZYAAAAAACEEEEIIIIDNOOOOOUUUUY"

    Dim i As Integer
    For i = 1 To Len(accentCharacters)
        result = Replace(result, Mid(accentCharacters, i, 1), Mid(nonAccentCharacters, i, 1))
    Next
    
    StringAccentRemoval = result
    
    'Debug.Print "'" + value + "' updated to '" + result + "'"
End Function



' ########################################################################
' CustomXMLPart Functions
' ########################################################################

Public Function CustomXMLPartAttributesGet(namespace As String, xPath) As String
    
    Dim result As String
    
    Dim myCustomXMLParts As CustomXMLParts, myCustomXMLPart As CustomXMLPart
    Dim myCustomXMLNodes As CustomXMLNodes, myCustomXMLNode As CustomXMLNode
    Dim NSCustom As String, NS As String, NSPrefix As String
    NSCustom = namespace
    
    Set myCustomXMLParts = ThisDocument.CustomXMLParts
    For Each myCustomXMLPart In myCustomXMLParts
        NS = myCustomXMLPart.NamespaceURI
        
        If StrComp(NS, NSCustom, vbTextCompare) = 0 Then
        
            NSPrefix = myCustomXMLPart.NamespaceManager.LookupPrefix(NS)
            xPath = Replace(xPath, "PREFIX", NSPrefix)
            
            Set myCustomXMLNode = myCustomXMLPart.SelectSingleNode(xPath)
            
            If myCustomXMLNode Is Nothing Then
                Exit For
            Else
                Dim i As Integer
                For i = 1 To myCustomXMLNode.attributes.Count
                    'result = result + myCustomXMLNode.attributes(i).BaseName + "=" + myCustomXMLNode.attributes(i).Text + "#"
                    result = result + myCustomXMLNode.attributes(i).Text + "#"
                Next i
                
                If Len(result) > 0 Then
                    result = Left(result, Len(result) - 1)
                    Exit For
                End If
            End If
        End If
    Next
    
    CustomXMLPartAttributesGet = result
End Function

Attribute VB_Name = "modRTDFrameworkOnChange"
Option Explicit

' SET YOUR CUSTOMIZED CODE IN FUNCTION CC_Actionables_Manager !!!

' FRAMEWORK USED FOR EVENTS: OnEnter, OnExit and OnChange

' CODE FROM: https://gregmaxey.com/word_tip_pages/content_control_custom_events.html

' Document_ContentControlMonitor() -> has the loop that identifies where the user is and if it's a control calls an event (OnEnter, OnExit and OnChange):
            'Custom_ContentControlOnEnter(oCC_Monitored)
            'Custom_ContentControlOnExit(oCC_Monitored)
            'Custom_ContentControlOnChange(oCC_Monitored)
                'All these custom events call CC_Actionables_Manager
    ' GetCC_OfInterest_IfExist() -> identifies the control (if control then it goes on... if not gets out...)

' Auxiliar variables
Private bMonitoring  As Boolean
Private pMonitoredText As String

Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal ms As LongPtr)
Private Declare PtrSafe Function GetKeyState Lib "user32" (ByVal nVirtKey As LongPtr) As Integer
'Private Declare Sub Sleep Lib "kernel32" (ByVal ms as Long)
'Private Declare Function GetKeyState Lib "user32" (ByVal nVirtKey As Long) As Integer

Public Enum GotFocusHow
  TabKey = 1
  ShiftTabKeys = 4
  LeftMouseBtn = 3
  AltKey = 2
End Enum

'The monitroed event
Public Enum EventType
  OnChange = 1
  OnEnter = 2
  OnExit = 3
End Enum



' SET YOUR CUSTOMIZED CODE IN FUNCTION CC_Actionables_Manager !!! HERE BELOW !!!

'Purpose: 1. Defines what we do with the CC of interest and related linked controls and evaluate success.
Public Function CC_Actionables_Manager(oCC_InEvent As ContentControl, Optional lngEventType As EventType = OnChange) As Boolean
    'Inputs:  1. The content control in focus.
    '         2. Type of actionable event.
    'Returns  1. True\False on event completion.
    
    CC_Actionables_Manager = True
    
    Select Case lngEventType
        Case 1                                                    'OnChange directives
            Select Case oCC_InEvent.Tag
                Case "ddPerformer"
                    ContentControlPerformerProcess oCC_InEvent, False
                    'I've had some problems loosing placeholder text between Word intances. Force a rebuild.
                    'oCC_InEvent.SetPlaceholderText , , PerformerPlaceholderText
                
                Case "ddCountry1", "ddCountry2", "ddCountry3", "ddCountry4"
                    If (oCC_InEvent.Range.Text = "(remove this country)") Then
                        ContentControlDeleteCountryControl oCC_InEvent
                    End If
                    
                Case "dpEndMissionDate"
                    ContentControlMissionDatesValidation oCC_InEvent
                    'ContentControlDateSet oCC_InEvent
                    
                Case "dpStartMissionDate"
                    ContentControlMissionDatesValidation oCC_InEvent
                    'ContentControlDateSet oCC_InEvent
                    
                Case Else
                'Do nothing.
                
            End Select
        
'        Case 2                                                    'OnEnter directives
'            Select Case oCC_InEvent.Tag
'                Case "blabla"
'                    'do something...
'                Case Else
'                    'Do nothing
'            End Select
'
'        Case 3                                                    'OnExit directives
'            Select Case oCC_InEvent.Tag
'                Case "ddPerformer"
'                    'ContentControlSmartText oCC_InEvent, True, usersNamespace, usersXPath
'                    'Update: Directorate and Unit
'                    'DirectorateUnitFill
'
'                Case Else
'                'Do nothing.
'
'            End Select
'
'        Case Else
'            'There is no case else.
    
    End Select
    
    Application.ScreenRefresh
    
End Function


' FRAMEWORK STARTS HERE:

'A custom document event.  Fired by the ContentControlMonitor.
'Pass the CC changed and event to our consolidated CC events manager.
Private Sub Custom_ContentControlOnChange(oCC_Changed As ContentControl)
    CC_Actionables_Manager oCC_Changed, OnChange
End Sub

' #############################
' Removed from this framework! Uses the standard: Document_ContentControlOnEnter out-of-the-box!
' #############################
''A custom built-in document event.  Fires when a CC is entered.
'Sub Custom_ContentControlOnEnter(ByVal oCC_Entered As ContentControl)
'    Dim bClickEntry As Boolean
'    'A click entry (via mouse) in a checkbox CC triggers an automatic state change a tab entry from another CC does not.
'    'Therefore:
'    'Check CC type.
'    'Compare type using index vice constant wdContentControlCheckBox to avoid error in Word2007
'    If oCC_Entered.Type = 8 Then
'      'Find out how checkbox got focus.
'      bClickEntry = fcn_HowGotFocus
'      If bClickEntry Then
'        'Trigger change event. Pass the CC changed and event to our consolidated CC events manager.
'        CC_Actionables_Manager oCC_Entered, OnChange
'      End If
'    End If
'    'Pass the CC entered and event to our consolidated CC events manager.
'    CC_Actionables_Manager oCC_Entered, OnEnter
'End Sub

' #############################
' Removed from this framework! Uses the standard: Document_ContentControlOnExit out-of-the-box!
' #############################
''A custom document event that fires when a CC is exited.
'Function Custom_ContentControlOnExit(ByVal oCC_Exited As ContentControl) As Boolean
'    Custom_ContentControlOnExit = True
'    'Pass the CC exited and event to our consolidated CC events manager.
'    If Not CC_Actionables_Manager(oCC_Exited, OnExit) Then
'      'Stay in control. This is a work around for the missing built-in Cancel parameter
'      Custom_ContentControlOnExit = False
'      oCC_Exited.Range.Select
'    End If
'End Function

'Determine how content control focus was achieved, and set the appropriate flag
Private Function fcn_HowGotFocus() As Boolean
    Dim lngRet As GotFocusHow
    If GetKeyState(vbKeyTab) < 0 Then
      If (GetKeyState(vbKeyShift) < 0) Then
        'Shift-Tab key is pressed
        lngRet = ShiftTabKeys
      Else
        'Tab key is pressed
        lngRet = TabKey
      End If
    ElseIf GetKeyState(vbKeyMenu) < 0 Then
      'Alt key is pressed (hotkey activation)
      lngRet = AltKey
    ElseIf GetKeyState(vbKeyLButton) < 0 Then
      'Mouse left button is pressed
      lngRet = LeftMouseBtn
    End If
    'Set the flag here
    Select Case lngRet
      Case TabKey, ShiftTabKeys
        fcn_HowGotFocus = False
      Case Else
        fcn_HowGotFocus = True
    End Select
End Function

'Starts Monitoring... called from DocumentOpen...
Public Sub StartMonitoring()
    Document_ContentControlMonitor
End Sub

'Stops Monitoring... called from DocumentClose...
Public Sub StopMonitoring()
    bMonitoring = False
End Sub

'Monitors for user actions that select a CC and monitors the selected CC for change.
Private Sub Document_ContentControlMonitor()
    Dim oCC_OfInterest  As ContentControl
    Dim oCC_Monitored As ContentControl
    'Dim bProcessEntryCC_Collection As Boolean 'Used to detect and process CC entry from _
    '                                           regular document text (i.e., click from document text into a CC range).
    Dim bExit_CC_Collection As Boolean

    'Set initial states
    'bProcessEntryCC_Collection = True
    bExit_CC_Collection = False
    bMonitoring = True
    
    While bMonitoring
    
    
        ''TESTING PRINT PREVIEW MONITORING...
        'If ThisDocument.Application.PrintPreview Then                                           'ALWAYS FALSE :-(
        '    If ptContentControlAddNewCountry.PlaceholderText = "(add new country)" Then
        '        ptContentControlAddNewCountry.SetPlaceholderText , , ""
        '    End If
        'Else
        '    If ptContentControlAddNewCountry.PlaceholderText = "" Then
        '        ptContentControlAddNewCountry.SetPlaceholderText , , "(add new country)"
        '    End If
        'End If
        
    
        'Call a function to determine the CC that has the focus if any.
        Set oCC_OfInterest = GetCC_OfInterest_IfExist
        
        If Not oCC_OfInterest Is Nothing Then
            'If a CC has focus then it is the one we will monitor.
            Set oCC_Monitored = oCC_OfInterest
            'Get its current text and selection length
            pMonitoredText = oCC_Monitored.Range.Text
            
            'This loops runs to detect changes in the monitored CC text. ' and user actions that change the selection.
            Do While oCC_Monitored.Range.Text = pMonitoredText
            
                'Did we just start the monitor or enter the monitored CC via "select/click" from any point external to the document CC collection?
                'If bProcessEntryCC_Collection = True Then
                '   'Trigger the OnEnter event.
                '   Call Custom_ContentControlOnEnter(oCC_Monitored)
                '   bProcessEntryCC_Collection = False
                'End If
              
                'Pause for air ;-)
                Sleep 1
                DoEvents
              
                'Stop the monitor if user closes documents or stops monitoring.
                If Not bMonitoring Then
                    Exit Sub
                End If
              
                On Error GoTo Err_Handler
                
                'Check if user clicked or tabbbed out of the monitored CC during monitor loop?
                Set oCC_OfInterest = GetCC_OfInterest_IfExist
                
                If Not oCC_OfInterest Is Nothing Then
                    
                    'See if user tabbed to or selected a different CC
                    If oCC_Monitored.ID <> oCC_OfInterest.ID Then
                
                        On Error GoTo 0
                        ''Since the user has moved to a different CC we trigger an OnExit\OnEnter event pair
                        'If Custom_ContentControlOnExit(oCC_Monitored) = True Then
                        '   'If exit was permit then
                        '   Call Custom_ContentControlOnEnter(oCC_OfInterest)
                        'End If
                        
                        'Set the new CC for monitoring
                        Set oCC_Monitored = oCC_OfInterest
                        pMonitoredText = oCC_Monitored.Range.Text
                    End If
                    
                    bExit_CC_Collection = False
                    
                Else
                    'User has selected a text area in the document.
                    'Flag exit from CC collection.
                    bExit_CC_Collection = True
                
                    'Call Custom_ContentControlOnExit(oCC_Monitored)
                
                    'bProcessEntryCC_Collection = True
                    Exit Do
                End If
            Loop
            
            'Process change.
            If Not bExit_CC_Collection Then
              Call Custom_ContentControlOnChange(oCC_Monitored)
            End If
            
            'Redefine the monitored text.
            pMonitoredText = oCC_Monitored.Range.Text
            
            'lngSelection = Len(Selection.Range.Text)
            
        End If
      
Err_ReEntry:
    Wend
    
    Exit Sub

Err_Handler:
    Select Case Err.number
        Case 5825 'User has deleted the monitored CC.
            Set oCC_OfInterest = Nothing
            'Return to monitor loop.
            Resume Err_ReEntry
        Case Else
            MsgBox Err.number & " " & Err.Description
    End Select
End Sub

'Returns a single content control based on the following criteria:
'a) Returns the content control that is physically selected by tab.
'b) Returns the single content that contains the insertion point or entire selected range.
'   Note: For documents with CCs nested in group or richtext controls, returns the deepest nested CC meeting criteria b)
Private Function GetCC_OfInterest_IfExist() As ContentControl
    Dim oRng As Word.Range
    Dim objCC As ContentControl
    Dim oCCNest As ContentControl
    Dim oCCNested As ContentControl
    Dim oRngCheck As Word.Range
    Set GetCC_OfInterest_IfExist = Nothing
    DoEvents
    'set our focus flag
    'SetHowCCGotFocusFlag
    'The selection is (A) a singe stand alone CC is selected (e.g. user selects tab) or (B) the visible selection spans a CC range
    'and other text or includes regular text and part of a CC range.
    If Selection.Range.ContentControls.Count = 1 Then
      Set objCC = Selection.Range.ContentControls(1)
      If (Selection.Start = objCC.Range.Start - 1) And (Selection.End = objCC.Range.End + 1) Then
        Set GetCC_OfInterest_IfExist = Selection.Range.ContentControls(1)
        Exit Function
      Else
        If Selection.Start + 1 = objCC.Range.Start And Selection.End = objCC.Range.End Then
          Set GetCC_OfInterest_IfExist = Selection.Range.ContentControls(1)
          Exit Function
        ElseIf Selection.Start + 1 = objCC.Range.Start And Selection.End = objCC.Range.End + 2 Then
          Set GetCC_OfInterest_IfExist = Selection.Range.ContentControls(1)
          Exit Function
        End If
      End If
      Set objCC = Selection.Range.ContentControls(1).ParentContentControl
      If Not objCC Is Nothing Then
        Set GetCC_OfInterest_IfExist = objCC
        Exit Function
      End If
    ElseIf Selection.Range.ContentControls.Count > 1 Then
      'Condition A:
      Set GetCC_OfInterest_IfExist = Selection.ContentControls(1).ParentContentControl
      If Not GetCC_OfInterest_IfExist Is Nothing Then
        Exit Function
      Else
        'Check for Condition B:
        Set oRngCheck = Selection.Range.Duplicate
        oRngCheck.MoveStart wdCharacter, 1
        oRngCheck.MoveEnd wdCharacter, -1
        If oRngCheck.InRange(Selection.Range.ContentControls(1).Range) Then
          'Condition B:  A singe CC tab was selected. This is the CC of interest
          Set GetCC_OfInterest_IfExist = Selection.Range.ContentControls(1)
        Else
         'Condition A: Now see if the CC is a nested control in a parent richtext control.  Returns nothing if not.
         Set GetCC_OfInterest_IfExist = Selection.Range.ContentControls(1).ParentContentControl
        End If
        Exit Function
      End If
    ElseIf Selection.Range.ContentControls.Count = 0 Then
      'The selection is (A) in a CC range or (B) not in a CC range
      'Expand a range to look for CCs
      'Set oRng = Selection.Range.Paragraphs(1).Range
      Set oRng = ThisDocument.StoryRanges(Selection.Range.StoryType)
      For Each objCC In oRng.ContentControls
        'Evaluate CCs in the range
        DoEvents
        'Is the selection in the objCC
        If Selection.InRange(objCC.Range) Or objCC.Range.End = Selection.Range.End Or objCC.Range.Start = Selection.Range.Start Then
Recursive:
          Set GetCC_OfInterest_IfExist = objCC
          'Does the CC being evaluated contain nested CCs
          If objCC.Range.ContentControls.Count > 0 Then
            Set oCCNest = objCC
            'Evaluate CCs in the nest
            For Each oCCNested In oCCNest.Range.ContentControls
              DoEvents
              If Selection.InRange(oCCNested.Range) Or oCCNested.Range.End = Selection.Range.End Or oCCNested.Range.Start = Selection.Range.Start Then
                Set objCC = oCCNested
                GoTo Recursive
              End If
            Next oCCNested
          Else
            'The objCC is the CC of interest
            Exit Function
          End If
        Else
          'Condition B: There is no active CC.
          Set GetCC_OfInterest_IfExist = Nothing
        End If
      Next objCC
    End If
End Function

Attribute VB_Name = "modRTDMissionReport"
Option Explicit

Public usersNamespace As String
Public usersXPath As String

Public ddContentControlPerformer As ContentControl
Public ptContentControlPerformerCount As ContentControl
Public ptContentControlDirectorate As ContentControl
Public ptContentControlUnit As ContentControl
Public ddContentControlCountry As ContentControl
Public ptContentControlPerformerLogin As ContentControl
Public ptContentControlAddNewCountry As ContentControl
Public ddContentControlStartMissionDate As ContentControl
Public ddContentControlEndMissionDate As ContentControl


Public Const PerformerPlaceholderText = "Type or choose a performer."
Public Const PerformerCountText = "( [itemsTotal] performers to choose from in the list )"
Public Const AddNewCountryPlaceholderText = "      [click here to add a new country...]"
Public Const CountryPlaceholderText = "Choose a country."



'
' Validates Mission End and Start dates
'
Public Sub ContentControlMissionDatesValidation(ByVal ContentControl As ContentControl)

    Dim sStart As String
    Dim sEnd As String
    
    sStart = ddContentControlStartMissionDate.Range.Text
    If sStart = "Click here to enter a start date." Then
        sStart = ""
    End If
    
    sEnd = ddContentControlEndMissionDate.Range.Text
    If sEnd = "Click here to enter an end date." Then
        sEnd = ""
    End If
    
    If sStart <> "" Then
        If sEnd = "" Then
            sEnd = sStart
        End If
    End If
    
    If ((Len(sStart) > 0) And (Len(sEnd) > 0)) Then
        If DateDiff("d", sStart, sEnd) < 0 Then
            MsgBox "Mission start date must be before mission end date."
            ContentControl.Range.Text = ""
        End If
    End If
    
End Sub

'
' Set Content Control Date
'
Public Sub ContentControlDateSet(ByVal ContentControl As ContentControl)

    Dim today As Date
    today = Now()
   ddContentControlStartMissionDate.Range.Text = today
   ddContentControlEndMissionDate.Range.Text = today
    
End Sub



'
' Content Control Add New Country Process On Enter
'
Public Sub ContentControlDeleteCountryControl(ByVal ContentControl As ContentControl)

    Dim myRange As Range
    Set myRange = ContentControl.Range.Previous.Previous
    myRange.Text = ""
    Set myRange = ContentControl.Range.Previous.Previous
    myRange.Text = ""
    Set myRange = ContentControl.Range.Previous.Previous
    myRange.Text = ""
    
    Dim tagName As String
    tagName = ContentControl.Tag
    ContentControl.LockContentControl = False
    ContentControl.Delete True
    
    ContentControlCountryLabelSetLabel
    
    ContentControlCountryAddRemoveEntry tagName
    
End Sub

Public Sub ContentControlAddNewCountryProcessOnEnter(ByVal ContentControl As ContentControl)
    
    If ContentControl Is Nothing Then
        Debug.Print "IMPORTANT: ContentControl Is Nothing in ContentControlAddNewCountryProcessOnEnter!"
        Exit Sub
    End If

    ' if ddCountry4 exists then 5 countries already in the document
    Dim myContentControlCountry5 As ContentControl
    Set myContentControlCountry5 = ContentControlGet("ddCountry4")
    If myContentControlCountry5 Is Nothing Then
        'OK
    Else
        MsgBox "You can not add more than 5 countries.", vbOKOnly
        Exit Sub
    End If
    
    Dim response As Integer
    response = MsgBox("Do you want to add a new country?", vbYesNo)
    
    If response = vbYes Then
        
        Dim countryControlNumber As Integer
        countryControlNumber = ContentControlCountryNumber()
        
        Dim myRange As Range
        Set myRange = ContentControl.Range.Previous.Previous
        myRange.Text = " , . "
        myRange.Select
        
        Dim myRangeForContentControl As Range
        Set myRangeForContentControl = ThisDocument.Range(myRange.End - 2, myRange.End - 1)
        myRangeForContentControl.Select
        
        Debug.Print "text is """ + myRangeForContentControl.Text + """"
        
        myRangeForContentControl.Text = ""
        
        Dim myContentControl As ContentControl, i As Integer
        Set myContentControl = ThisDocument.ContentControls.Add(wdContentControlDropdownList, myRangeForContentControl)
        myContentControl.Tag = "ddCountry" + CStr(countryControlNumber)
        myContentControl.LockContentControl = True
        myContentControl.SetPlaceholderText , , CountryPlaceholderText
        myContentControl.DropdownListEntries.Add "(remove this country)"
         
        For i = 1 To ddContentControlCountry.DropdownListEntries.Count
            myContentControl.DropdownListEntries.Add ddContentControlCountry.DropdownListEntries(i)
        Next
        
        'Delete "(remove this country)" from the previous country control
        If countryControlNumber > 1 Then
            ContentControlCountryDeleteRemoveEntry countryControlNumber - 1
        End If
        
        ContentControlCountryLabelSetLabel
    End If
End Sub

Public Sub ContentControlCountryLabelSetLabel()
    'Check if there's one or more country controls and set label accordingly
    Dim myContentControlCountryLabel As ContentControl
    Set myContentControlCountryLabel = ContentControlGet("ptCountryLabel")
    
    Dim myContentControlCountry2 As ContentControl
    Set myContentControlCountry2 = ContentControlGet("ddCountry1")
    If myContentControlCountry2 Is Nothing Then
        ContentControlSetValue myContentControlCountryLabel, "Country"
    Else
        ContentControlSetValue myContentControlCountryLabel, "Countries"
    End If
End Sub

Public Function ContentControlCountryNumber() As Integer
    'which control are we going to create? 1, 2, 3 or 4?
    
    Dim myContentControlCountry2 As ContentControl, myContentControlCountry3 As ContentControl, myContentControlCountry4 As ContentControl, myContentControlCountry5 As ContentControl
    Set myContentControlCountry2 = ContentControlGet("ddCountry1")
    If myContentControlCountry2 Is Nothing Then
        ContentControlCountryNumber = 1
        Exit Function
    Else
        Set myContentControlCountry3 = ContentControlGet("ddCountry2")
        If myContentControlCountry3 Is Nothing Then
            ContentControlCountryNumber = 2
            Exit Function
        Else
            Set myContentControlCountry4 = ContentControlGet("ddCountry3")
            If myContentControlCountry4 Is Nothing Then
                ContentControlCountryNumber = 3
                Exit Function
            Else
                Set myContentControlCountry5 = ContentControlGet("ddCountry4")
                If myContentControlCountry5 Is Nothing Then
                    ContentControlCountryNumber = 4
                    Exit Function
                Else
                    ContentControlCountryNumber = 0
                End If
            End If
        End If
    End If
End Function

Public Sub ContentControlCountryDeleteRemoveEntry(ByVal number As Integer)
    Dim myContentControlCountry As ContentControl
    Set myContentControlCountry = ContentControlGet("ddCountry" + CStr(number))
    myContentControlCountry.DropdownListEntries.Item(myContentControlCountry.DropdownListEntries.Count).Delete
End Sub

Public Sub ContentControlCountryAddRemoveEntry(ByVal tagName As String)
    Dim number As Integer
    number = CInt(Right(tagName, 1))
    
    If (number > 1) Then
        Dim myContentControlCountry As ContentControl
        Set myContentControlCountry = ContentControlGet("ddCountry" + CStr(number - 1))
        myContentControlCountry.DropdownListEntries.Add "(remove this country)"
    End If
End Sub

'
' Content Control Add New Country Process On Enter
'
Public Sub ContentControlPerformerProcess(ByVal ContentControl As ContentControl, ByVal OnExit As Boolean)
    
    If ContentControl Is Nothing Then
        Debug.Print "IMPORTANT: ContentControl Is Nothing in ContentControlPerformerProcess!"
        Exit Sub
    ElseIf ptContentControlPerformerCount Is Nothing Then
        Debug.Print "IMPORTANT: ptContentControlPerformerCount Is Nothing in ContentControlPerformerProcess!"
        Exit Sub
    End If
    
    Dim itemsTotal As Long
    
    ContentControlSmartText ContentControl, OnExit, usersNamespace, usersXPath, itemsTotal
    If (itemsTotal > 1) Then
        ContentControlSetValue ptContentControlPerformerCount, Replace(PerformerCountText, "[itemsTotal]", CStr(itemsTotal))
    Else
        ContentControlSetValue ptContentControlPerformerCount, " "
    End If
    
    'Update: Directorate and Unit
    DirectorateUnitLoginFill
    
End Sub


'
'In this document Directorate and Unit are filled automatically when chosing a performer
'
Public Sub DirectorateUnitLoginFill()
    
    Dim performerName As String, attributes As String, xPath As String
    performerName = ddContentControlPerformer.Range.Text
    
    If performerName = PerformerPlaceholderText Then
        performerName = ""
    End If
    
    If performerName = "" Then
        ContentControlSetValue ptContentControlDirectorate, ""
        ContentControlSetValue ptContentControlUnit, ""
        ContentControlSetValue ptContentControlPerformerLogin, ""
        
    Else
        xPath = "/PREFIX:users/PREFIX:user[text()=""" + performerName + """]"   'example: "users/user[text() = 'ADAM Florence (RTD)']"
        attributes = CustomXMLPartAttributesGet(usersNamespace, xPath)          'returns: "Attribute1Value#Attribute2Value#..."
        
        If (Len(attributes) = 0) Then
            ContentControlSetValue ptContentControlDirectorate, ""
            ContentControlSetValue ptContentControlUnit, ""
            ContentControlSetValue ptContentControlPerformerLogin, ""
            
            Debug.Print "CustomXMLPartAttributesGet returned empty string for performer: " + performerName
            
        Else
            Dim attributesArray() As String
            attributesArray() = Split(attributes, "#")
            
            Dim stringDirectorate As String, stringUnit As String, stringPerformerLogin As String
            stringDirectorate = attributesArray(4) + " - " + attributesArray(3)
            stringUnit = attributesArray(2) + " - " + attributesArray(1)
            stringPerformerLogin = attributesArray(0)
            
            ContentControlSetValue ptContentControlDirectorate, "Directorate: " + stringDirectorate
            If (Len(stringUnit) > 3) Then
                ContentControlSetValue ptContentControlUnit, "Unit: " + stringUnit
            Else
                ContentControlSetValue ptContentControlUnit, ""
            End If
            ContentControlSetValue ptContentControlPerformerLogin, stringPerformerLogin
        End If
    End If
    
End Sub

Function validate() As Boolean
  Dim ret As Boolean
  Dim performerName As String, startDate As String, endDate As String
    
  performerName = ddContentControlPerformer.Range.Text
  startDate = ddContentControlStartMissionDate.Range.Text
  endDate = ddContentControlEndMissionDate.Range.Text
  If performerName = "Choose a performer from the list." Or startDate = "Click here to enter a start date." Or endDate = "Click here to enter an end date." Then
    ret = False
  Else
    ret = True
  End If
  validate = ret
End Function

' InQuest injected base64 decoded content
' QL1kjg
' '.+-
' zj/xI

INQUEST-PP=macro
