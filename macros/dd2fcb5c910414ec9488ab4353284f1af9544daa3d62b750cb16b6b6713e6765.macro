Attribute VB_Name = "DMactions"
Option Explicit
Private objDM As GSI_DM.DMAction
Private ServerConnected As Boolean
Private gWindowsUserName As String
Private MaxParms As Integer
Private DMUserLoc As String
Private gEmailServer As Integer
Private gEnhancedLogging As Boolean
Private gSaveBeforeDistribute As Boolean
Private Messenger As Object
Private ErrorsEncountered As Boolean
Public Sub ConvertTree()
If Application.ActiveSheet Is Nothing Then
   Exit Sub
End If
Call objDM.ConvertTree
End Sub
Public Sub CreateNewControl()
If Application.ActiveSheet Is Nothing Then
   Exit Sub
End If
If objDM.CreateNewControl = "OK" Then
   DMSpecs
End If
End Sub
Public Sub UnhideZeroLines()
Dim I As Integer, SheetNum As Integer
Dim C As Long
Dim R As Long
Dim MaxCols As Long
Dim Rows As Long, MaxRows As Long
Dim S As String
Dim StartAddress As String
Dim Pos As Integer
Dim ContainsGX As Boolean
Dim SheetName As String
Dim LastRow As Long, LastCol As Integer

On Local Error GoTo UnhideZeroLinesError:

SheetName = ActiveWindow.ActiveSheet.Name

Worksheets(SheetName).Select
LastRow = 0
LastRow = Worksheets(SheetName).Cells.Find(What:="*", LookIn:=xlFormulas, _
  SearchDirection:=xlPrevious, _
  SearchOrder:=xlByRows).Row
LastCol = 0
LastCol = Worksheets(SheetName).Cells.Find(What:="*", LookIn:=xlFormulas, _
  SearchDirection:=xlPrevious, _
  SearchOrder:=xlByColumns).Column
StartAddress = "$A$1"
R = 1
MaxRows = LastRow
MaxCols = LastCol
If LastCol > 0 And LastRow > 0 Then
   For Rows = 1 To MaxRows
       ContainsGX = False
       StartAddress = "$A$" & Val(R)
       For C = 0 To MaxCols - 1
           Worksheets(SheetName).Range(StartAddress).Select
           If ActiveCell.Offset(0, C).HasFormula Then
               If InStr(UCase(ActiveCell.Offset(0, C).Formula), "FXA") Or _
                  InStr(UCase(ActiveCell.Offset(0, C).Formula), "GXA") Or _
                  InStr(UCase(ActiveCell.Offset(0, C).Formula), "GXL") Or _
                  InStr(UCase(ActiveCell.Offset(0, C).Formula), "GXR") Or _
                  InStr(UCase(ActiveCell.Offset(0, C).Formula), "GXU") Or _
                  InStr(UCase(ActiveCell.Offset(0, C).Formula), "GXAB") Or _
                  InStr(UCase(ActiveCell.Offset(0, C).Formula), "GXBM") _
                  Then
                   ContainsGX = True
               End If
           End If
       Next C
       If ContainsGX = True Then
           ActiveCell.Rows.Hidden = False
       End If
       R = R + 1
   Next Rows
End If

Exit Sub

UnhideZeroLinesError:
Select Case Err
    Case 53
        Resume Next
    Case 1004 'for Office 97
        LastRow = 1000
        LastCol = 15
        Resume Next
    Case Else
        Resume Next
End Select
End Sub
Public Sub HideZeroLines()
Dim I As Integer, SheetNum As Integer
Dim C As Long
Dim R As Long
Dim MaxCols As Long
Dim Rows As Long, MaxRows As Long
Dim S As String
Dim StartAddress As String
Dim Pos As Integer
Dim ContainsGX As Boolean
Dim GXAmountZerosCount As Integer
Dim SheetName As String
Dim LastRow As Long, LastCol As Integer

On Local Error GoTo HideZeroLinesError:

SheetName = ActiveWindow.ActiveSheet.Name
Worksheets(SheetName).Select

LastRow = 0
LastRow = Worksheets(SheetName).Cells.Find(What:="*", LookIn:=xlFormulas, _
  SearchDirection:=xlPrevious, _
  SearchOrder:=xlByRows).Row
LastCol = 0
LastCol = Worksheets(SheetName).Cells.Find(What:="*", LookIn:=xlFormulas, _
  SearchDirection:=xlPrevious, _
  SearchOrder:=xlByColumns).Column
StartAddress = "$A$1"
R = 1
MaxRows = LastRow
MaxCols = LastCol
If LastCol > 0 And LastRow > 0 Then
   For Rows = 1 To MaxRows
       GXAmountZerosCount = 0
       ContainsGX = False
       StartAddress = "$A$" & Val(R)
       For C = 0 To MaxCols - 1
           Worksheets(SheetName).Range(StartAddress).Select
           If ActiveCell.Offset(0, C).HasFormula Then
               If InStr(UCase(ActiveCell.Offset(0, C).Formula), "FXA") Or _
                  InStr(UCase(ActiveCell.Offset(0, C).Formula), "GXA") Or _
                  InStr(UCase(ActiveCell.Offset(0, C).Formula), "GXL") Or _
                  InStr(UCase(ActiveCell.Offset(0, C).Formula), "GXR") Or _
                  InStr(UCase(ActiveCell.Offset(0, C).Formula), "GXU") Or _
                  InStr(UCase(ActiveCell.Offset(0, C).Formula), "GXAB") Or _
                  InStr(UCase(ActiveCell.Offset(0, C).Formula), "GXBM") _
                  Then
                   ContainsGX = True
               End If
               If ContainsGX = True Then
                  If ActiveCell.Offset(0, C).Errors(1) = False Then
                     If ActiveCell.Offset(0, C).Value <> 0 Then
                        GXAmountZerosCount = GXAmountZerosCount + 1
                     End If
                  End If
               End If
           End If
       Next C
       If ContainsGX = True Then
          If GXAmountZerosCount = 0 Then
             ActiveCell.Rows.Hidden = True
          Else
             ActiveCell.Rows.Hidden = False
          End If
       End If
       R = R + 1
   Next Rows
End If

Exit Sub

HideZeroLinesError:
Select Case Err
    Case 53
        Resume Next
    Case 1004 'for Office 97
        LastRow = 1000
        LastCol = 15
        Resume Next
    Case Else
        Resume Next
End Select
End Sub
Private Sub ConvertFormulas(CVT As String)
Dim S As String, I As Integer, I2 As Integer
Dim R As Long, C As Long
Dim LastRow As Long, LastCol As Integer
Dim SourceAddress As String

If CVT = "Global Only" Then
   Dim WBLinks As Variant
   On Error GoTo ConvertEnd 'There may be several Global addins used in a single workbook
   WBLinks = ActiveWorkbook.LinkSources(Type:=1)
   
   ' BreakLink: Converts formulas linked to other Microsoft Excel sources or OLE sources to values.
   Dim linkcount As Integer
   If IsEmpty(WBLinks) Then
      GoTo ConvertEnd
   End If
   linkcount = UBound(WBLinks)
   For linkcount = 0 To UBound(WBLinks) - 1
      If (InStr(UCase(WBLinks(linkcount + 1)), "GXB.XLA") > 0) Then
      Else
        ActiveWorkbook.BreakLink Name:=WBLinks(linkcount + 1), Type:=1
      End If
   Next
ConvertEnd:
   On Error GoTo Err_ConvertFormulas
   Err.Clear
Else
   For I = 1 To Worksheets.Count
      Application.Worksheets(I).Activate
      LastRow = 0
      On Error Resume Next
      LastRow = Application.Worksheets(I).Cells.Find(What:="*", LookIn:=xlFormulas, _
      SearchDirection:=2, _
      SearchOrder:=1).Row
      If Err.Number <> 0 Then 'empty sheet
         Err.Clear
         SourceAddress = "A1:A1"
      Else
         On Error GoTo Err_ConvertFormulas
         LastCol = 0
         LastCol = Application.Worksheets(I).Cells.Find(What:="*", LookIn:=xlFormulas, _
         SearchDirection:=2, _
         SearchOrder:=2).Column
         S = Application.Worksheets(I).Cells(LastRow, LastCol).Address
         SourceAddress = ""
         For I2 = 1 To Len(S)
            If Mid$(S, I2, 1) <> "$" Then
               SourceAddress = SourceAddress & Mid$(S, I2, 1)
            End If
         Next I2
         SourceAddress = "A1:" & SourceAddress
      End If
      
      If SourceAddress <> "A1:A1" Then
         Dim sourcerange 'As Excel.Range
         Set sourcerange = Application.Worksheets(I).Range(SourceAddress)
         With sourcerange
            Dim rRange 'As Excel.Range
            Dim cCell 'As Excel.Range
            Set rRange = Application.Worksheets(I).Range(SourceAddress)
               
            If CVT <> "Global Only (Excel2000)" Then
               'Convert all formulas
               'Try to do newer convert all if error then run cell by cell
               On Error Resume Next
               Err.Clear
               Application.Worksheets(I).Range(SourceAddress).Copy
               Application.Worksheets(I).Range(SourceAddress).PasteSpecial 12
               If Err.Number = 0 Then
                  GoTo EndConvert
               End If
               Err.Clear
               On Error GoTo Err_ConvertFormulas
               For R = 1 To .Rows.Count
                  For C = 1 To .Columns.Count
                     If .Cells(R, C).HasFormula Then
                        S = .Cells(R, C).Formula
                        On Error Resume Next
                        Err.Clear
                        .Cells(R, C).Copy
                        .Cells(R, C).PasteSpecial 12 '-4163 'xlPasteValues
                        If Err.Number <> 0 Then
                           On Error GoTo Err_ConvertFormulas
                           .Cells(R, C).Copy
                           .Cells(R, C).PasteSpecial -4163
                        End If
                     End If
                  Next C
               Next R
            Else
               'Convert Global Only (Excel 2000) cell by cell
               Err.Clear
               On Error GoTo Err_ConvertFormulas
               For R = 1 To .Rows.Count
                  For C = 1 To .Columns.Count
                     If .Cells(R, C).HasFormula Then
                        S = .Cells(R, C).Formula
                        If InStr(UCase$(S), "FXA") > 0 Or _
                           InStr(UCase$(S), "GXA") > 0 Or _
                           InStr(UCase$(S), "GXL") > 0 Or _
                           InStr(UCase$(S), "GXR") > 0 Or _
                           InStr(UCase$(S), "GXU") > 0 Or _
                           InStr(UCase$(S), "GXAB") > 0 Or _
                           InStr(UCase$(S), "GXBM") > 0 Or _
                           InStr(UCase$(S), "GXD") > 0 Or _
                           InStr(UCase$(S), "GXE") > 0 Or _
                           InStr(UCase$(S), "GXECC") > 0 Or _
                           InStr(UCase$(S), "BUDESC") > 0 Or _
                           InStr(UCase$(S), "CODESC") > 0 Or _
                           InStr(UCase$(S), "GXSALE") > 0 Or _
                           InStr(UCase$(S), "SSLDESC") > 0 Or _
                           InStr(UCase$(S), "GXC") > 0 Or _
                           InStr(UCase$(S), "EXQ") > 0 Or _
                           InStr(UCase$(S), "EXD") > 0 Or _
                           InStr(UCase$(S), "EXI") > 0 Or _
                           InStr(UCase$(S), "EXS") > 0 _
                           Then
                           On Error Resume Next
                           Err.Clear
                           .Cells(R, C).Copy
                           .Cells(R, C).PasteSpecial 12 '-4163 'xlPasteValues
                           If Err.Number <> 0 Then
                              On Error GoTo Err_ConvertFormulas
                              .Cells(R, C).Copy
                              .Cells(R, C).PasteSpecial -4163
                           End If
                        End If
                     End If
                  Next C
               Next R
            End If
         End With
EndConvert:
         If SourceAddress <> "A1:A1" Then
            On Error GoTo Err_ConvertFormulas
         End If
         Range("A1").Select
      End If
   Next I
End If

Exit Sub
Err_ConvertFormulas:
    S = "A critical error has occured while attempting to convert formulas for this workbook: " & vbCrLf
    S = S & vbCrLf & "The error code / description is: " & vbCrLf
    S = S & vbCrLf & Err & "  " & Error
    MsgBox S
    Exit Sub
End Sub

Public Sub DMSpecs()
Dim I As Integer
Dim DMSpec As String, DMSheets As String
Dim R As Long
Dim ReturnAddress As String

If Application.ActiveSheet Is Nothing Then
   Exit Sub
End If
Application.ScreenUpdating = False
Application.EnableEvents = False
ReturnAddress = ActiveCell.Address
R = ActiveCell.Row
If UCase$(Range("A" & CStr(R)).Value) = "DMSPECS>" Then
   DMSpec = GetDMSpecsSelected
Else
   DMSpec = ""
End If
DMSheets = ""
For I = 1 To Worksheets.Count
   If DMSheets <> "" Then
      DMSheets = DMSheets & "!"
   End If
   DMSheets = DMSheets & Worksheets(I).Name
Next
Call objDM.UnloadSpecMaint
Call objDM.DoMaint(DMSpec, DMSheets)
Application.ScreenUpdating = True
Application.EnableEvents = True
End Sub
Public Sub DMToolbar()
Dim mycommandbar As CommandBar
Dim returnbar As CommandBarControls
Dim cbar As CommandBar
Dim allbars As CommandBar
Dim barcount As Integer
Dim Ledgertype As Integer

On Error GoTo finishBar
Set cbar = Application.CommandBars.Add("Distribution Manager", msoBarTop, False, True)
'msoBarFloating= 4
'3=msoBarBottom
cbar.Visible = True
'cbar.Width = 350
 
If objDM Is Nothing Then
   Exit Sub
End If

Dim S As String
On Error GoTo finishBar

Dim lb1 As CommandBarButton
Set lb1 = cbar.Controls.Add(Type:=1)  'msoControlButton)
lb1.Caption = "DM:"
lb1.Style = 2  'msoButtonCaption
             
On Error GoTo finishBar

Dim lb2 As CommandBarButton
Set lb2 = cbar.Controls.Add(Type:=1)  ' msoControlButton)
lb2.Caption = "Distribute All"
lb2.Style = 1 ' msoButtonIcon
lb2.FaceId = 216
lb2.OnAction = "DMactions.DistributeAll"
        
finishBar:
On Error Resume Next

Dim lbSettings As CommandBarButton
Set lbSettings = cbar.Controls.Add(Type:=1)  ' msoControlButton)
lbSettings.Caption = "DM Settings"
lbSettings.Style = 1 ' msoButtonIcon
lbSettings.FaceId = 277
lbSettings.OnAction = "DMactions.ShowDMSettings"

Dim lbDMSpecs As CommandBarButton
Set lbDMSpecs = cbar.Controls.Add(Type:=1)  ' msoControlButton)
lbDMSpecs.Caption = "Maintain DM Specs"
lbDMSpecs.Style = 1 ' msoButtonIcon
lbDMSpecs.FaceId = 35
lbDMSpecs.OnAction = "DMactions.DMSpecs"
      
End Sub
Public Sub DistributeSelected()
Dim DMSpec As String
Dim EditResult As Boolean

DMSpec = GetDMSpecsSelected

If DMSpec = "" Then
    Exit Sub
End If

If EditSpecs(DMSpec) = True Then
   DistributeSpecs DMSpec
End If


End Sub
Public Sub DistributeAll()
Dim DMSpec As String
DMSpec = GetDMSpecsAll

If DMSpec = "" Then
    Exit Sub
End If

If EditSpecs(DMSpec) = True Then
   DistributeSpecs DMSpec
End If

End Sub
Public Sub DistributeSpecs(DS As String)
Dim S As String, I As Integer, WSindex As Integer
Dim sSheet As String, sCell As String, sValue As String
Dim NewWorkbookName As String, FileBuild As String
Dim SheetNames() As String, MaxSheets As Integer
Dim Specs() As String
Dim Spec As Variant
Dim SpecParms() As String
Dim SpecParm As Variant
Dim CellParms() As String
Dim CellParm As Variant
Dim SpecifySheets() As String
Dim SpecifySheet As Variant
Dim Attachments() As String
Dim Attachment As Variant
Dim bFound As Boolean
Dim ExcelType As String
Dim StartedTime As Date
Dim EndedTime As Date

Dim SaveWBname As String
Dim SaveWBpath As String
Dim SaveWBext As String

Dim SpecSource As String
Dim SpecSpecifySheets As String
Dim SpecCellParms As String
Dim SpecDestination As String
Dim SpecDestinationType As String
Dim SpecFileName As String
Dim SpecFileType As String
Dim SpecZip As String
Dim SpecConvert As String
Dim SpecEmailSubject As String
Dim SpecEmailBody As String
Dim SpecHideZeroLines As String
Dim SpecCalcBeforeSend As String
Dim SpecGenGXE As String
Dim SpecGenEXD As String
Dim SpecMacro As String
Dim SpecPassOpen As String
Dim SpecPassModify As String
Dim SpecAttachments As String
Dim SaveCalcSetting As Long

ErrorsEncountered = False

Call objDM.UnloadSpecMaint

If Application.ActiveWorkbook.Path = "" Then
   MsgBox "Workbook must be saved prior to distributing"
   Exit Sub
End If

If gSaveBeforeDistribute = True Then
   ActiveWorkbook.Save
End If

StartedTime = Now

Application.Cursor = xlWait

SaveCalcSetting = Application.Calculation
Application.DisplayAlerts = False
Application.EnableEvents = False
Application.ScreenUpdating = False
Application.AskToUpdateLinks = False
Application.Calculation = xlCalculationManual
Application.CalculateBeforeSave = False

SaveWBname = Application.ActiveWorkbook.Name
SaveWBpath = Application.ActiveWorkbook.Path
SaveWBext = UCase$(Mid$(SaveWBname, InStrRev(SaveWBname, ".")))

On Local Error GoTo DistributeSpecsError:

Call objDM.ClearSavedDocuments
Call objDM.ClearEmailCache

Specs = Split(DS, "><")
For Each Spec In Specs
'   Call objDM.ClearSavedDocuments
   SpecParms = Split(Spec, "<>")
   SpecSource = SpecParms(0)
   
   Application.StatusBar = "DM: " & SpecSource & " - initiating"
   
   If gEnhancedLogging Then
      Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "0", "DISTRIBUTION", "Started")
   End If
   
   DoEvents
   
   SpecDestinationType = Trim$(SpecParms(1))
   SpecDestination = Trim$(SpecParms(2))
   SpecFileName = Trim$(SpecParms(3))
   SpecFileType = Trim$(SpecParms(4))
   SpecConvert = Trim$(SpecParms(5))
   SpecCellParms = Trim$(SpecParms(6))
   SpecSpecifySheets = Trim$(SpecParms(7))
   SpecZip = Trim$(SpecParms(8))
   SpecHideZeroLines = Trim$(SpecParms(9))
   SpecGenGXE = Trim$(SpecParms(10))
   SpecGenEXD = Trim$(SpecParms(11))
   SpecEmailSubject = Trim$(SpecParms(12))
   SpecEmailBody = Trim$(SpecParms(13))
   SpecMacro = Trim$(SpecParms(14))
   SpecPassOpen = Trim$(SpecParms(15))
   SpecPassModify = Trim$(SpecParms(16))
   SpecAttachments = Trim$(SpecParms(17))
   SpecCalcBeforeSend = Trim$(SpecParms(18))
   If SpecCalcBeforeSend = "" Then
      SpecCalcBeforeSend = "NO"
   End If
   
   If SpecCellParms <> "" Then
      Application.StatusBar = "DM: " & SpecSource & " - setting parameter cell values"
      DoEvents
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "set parameter cell values", "Started")
      End If
      
      CellParms = Split(SpecCellParms, ",")
      For Each CellParm In CellParms
         If gEnhancedLogging Then
            Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "about to set parameter cell value", CStr(CellParm))
         End If
         sSheet = ""
         sCell = ""
         sValue = ""
         I = InStr(CellParm, ":")
         If I > 0 Then
            sCell = Trim$(Left$(CellParm, I - 1))
            sValue = Replace(Trim$(Mid$(CellParm, I + 1)), "/\", ",")
            I = InStr(sCell, "!")
            If I > 0 Then
               sSheet = Trim$(Left$(sCell, I - 1))
               sCell = Trim$(Mid$(sCell, I + 1))
               Range("'" & sSheet & "'!" & sCell).Value = sValue
               If gEnhancedLogging Then
                  Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "'" & sSheet & "'!" & sCell & " being set to", sValue)
               End If
               If gEnhancedLogging Then
                  Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "value at '" & sSheet & "'!" & sCell & " is now", Range("'" & sSheet & "'!" & sCell).Value)
               End If
            End If
         End If
      Next
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "set parameter cell values", "Ended")
      End If
      DoEvents
   End If
   If SpecGenGXE = "YES" Or SpecGenEXD = "YES" Then
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "generate GXE or EXD detected, calculation", "Started")
      End If
      Application.Calculate
      DoEvents
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "generate GXE or EXD detected, calculation", "Ended")
      End If
   End If
   If SpecGenGXE = "YES" Then
      Application.StatusBar = "DM: " & SpecSource & " - generating all GXEs"
      DoEvents
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "generate all GXEs", "Started")
      End If
      Application.Run "ExpandDetailReports"
      Application.DisplayAlerts = False
      Application.EnableEvents = False
      Application.ScreenUpdating = False
      Application.AskToUpdateLinks = False
      Application.Cursor = xlWait
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "generate all GXEs", "Ended")
      End If
      DoEvents
   End If
   If SpecGenEXD = "YES" Then
      Application.StatusBar = "DM: " & SpecSource & " - generating all EXDs"
      DoEvents
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "generate all EXDs", "Started")
      End If
      Application.Run "GenAllQueryDetail"
      Application.DisplayAlerts = False
      Application.EnableEvents = False
      Application.ScreenUpdating = False
      Application.AskToUpdateLinks = False
      Application.Cursor = xlWait
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "generate all EXDs", "Ended")
      End If
      DoEvents
   End If
   If SpecCellParms <> "" Or SpecCalcBeforeSend = "YES" Or SpecGenGXE = "YES" Or SpecGenEXD = "YES" Then
      Application.StatusBar = "DM: " & SpecSource & " - recalculating"
      DoEvents
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "recalculate", "Started")
      End If
      DoEvents
      'Application.Run "ClearCache"
      Application.Calculate
      DoEvents
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "recalculate", "Ended")
      End If
      DoEvents
   End If
   
   If SpecMacro <> "" Then
      S = SpecMacro
      If InStr(S, "!") = 0 Then
         S = "'" & Application.ActiveWorkbook.Name & "'!" & SpecMacro
      End If
      Application.StatusBar = "DM: " & SpecSource & " - Executing Macro: " & S
      DoEvents
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "Executing Macro: " & S, "Started")
      End If
      DoEvents
            
      Application.Run S
      
      Application.DisplayAlerts = False
      Application.EnableEvents = False
      Application.ScreenUpdating = False
      Application.AskToUpdateLinks = False
      Application.Cursor = xlWait
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "Executing Macro: " & S, "Ended")
      End If
      DoEvents
      
   End If
   
   If SpecHideZeroLines = "YES" Then
      Application.StatusBar = "DM: " & SpecSource & " - hiding zero lines"
      DoEvents
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "hide zero lines", "Started")
      End If
      DoEvents
      
      If SpecSpecifySheets = "" Then 'all sheets
         For I = 1 To Worksheets.Count
            If Application.Worksheets(I).Visible = True Then
               Application.Worksheets(I).Select
               UnhideZeroLines
               HideZeroLines
            End If
         Next
      Else
         SpecifySheets = Split(SpecSpecifySheets, ",")
         For Each SpecifySheet In SpecifySheets
            For I = 1 To Worksheets.Count
               If UCase$(Trim$(SpecifySheet)) = UCase$(Worksheets(I).Name) Then
                  If Application.Worksheets(I).Visible = True Then 'Application.ActiveSheet.Visible = xlSheetVisible Then
                     Application.Worksheets(I).Select
                     UnhideZeroLines
                     HideZeroLines
                  End If
               End If
            Next
         Next
      End If
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "hide zero lines", "Ended")
      End If
      DoEvents
      
   End If
   
   If SpecSpecifySheets <> "" Then
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "manage worksheets", "Started")
      End If
      DoEvents
   
      Application.StatusBar = "DM: " & SpecSource & " - managing worksheets"
      DoEvents
      SpecifySheets = Split(SpecSpecifySheets, ",")
      For I = 1 To Worksheets.Count
         bFound = False
         For Each SpecifySheet In SpecifySheets
            If UCase$(Trim$(SpecifySheet)) = UCase$(Trim$(Worksheets(I).Name)) Then
               bFound = True
               Exit For
            End If
         Next
         If bFound = False Then
            Application.Worksheets(I).Visible = xlVeryHidden
         End If
      Next
         
      ReplaceUnspecifiedSheetsReferences
      
      MaxSheets = Worksheets.Count
      ReDim SheetNames(MaxSheets)
      SpecifySheets = Split(SpecSpecifySheets, ",")
      For I = 1 To MaxSheets
         bFound = False
         For Each SpecifySheet In SpecifySheets
            If UCase$(Trim$(SpecifySheet)) = UCase$(Worksheets(I).Name) Then
               bFound = True
               Exit For
            End If
         Next
         If bFound = False Then
            SheetNames(I) = Worksheets(I).Name
         Else
            SheetNames(I) = ""
         End If
      Next
      For I = 1 To MaxSheets
         If SheetNames(I) <> "" Then
            Worksheets(SheetNames(I)).Visible = xlSheetVisible
            Worksheets(SheetNames(I)).Delete
         End If
      Next
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "manage worksheets", "Ended")
      End If
      DoEvents
      
   End If
   
'********************
   
   If SpecConvert <> "None (No Conversion)" Then
      Application.StatusBar = "DM: " & SpecSource & " - converting formulas to values"
      DoEvents
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "convert formulas to values", "Started")
      End If
      DoEvents
      
      ConvertFormulas SpecConvert
      DoEvents
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "convert formulas to values", "Ended")
      End If
      DoEvents
      
   End If
   
   If SpecDestinationType = "Print" Then
      If SpecSpecifySheets = "" Then 'all sheets
         Application.StatusBar = "DM: " & SpecSource & " - printing workbook"
         DoEvents
         If gEnhancedLogging Then
            Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "print workbook", "Started")
         End If
         DoEvents
         
         For I = 1 To Worksheets.Count
            If Application.Worksheets(I).Visible = True Then
               Application.Worksheets(I).PrintOut
            End If
         Next
         If gEnhancedLogging Then
            Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "print workbook", "Ended")
         End If
         DoEvents
         
      Else
         SpecifySheets = Split(SpecSpecifySheets, ",")
         For Each SpecifySheet In SpecifySheets
            For I = 1 To Worksheets.Count
               If UCase$(Trim$(SpecifySheet)) = UCase$(Worksheets(I).Name) Then
                  If Application.Worksheets(I).Visible = True Then 'Application.ActiveSheet.Visible = xlSheetVisible Then
                     Application.StatusBar = "DM: " & SpecSource & " - printing worksheet: " & Application.Worksheets(I).Name
                     DoEvents
                     
                     Application.Worksheets(I).PrintOut
                     
                     If gEnhancedLogging Then
                        Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "print worksheet: " & Application.Worksheets(I).Name, "Ended")
                     End If
                     DoEvents

                  End If
               End If
            Next
         Next
      End If
   End If
   
   If SpecDestinationType <> "Print" Then
      'build filespec
      If SpecFileName <> "" Then
         NewWorkbookName = SpecFileName & SaveWBext
      Else
         NewWorkbookName = Application.ActiveWorkbook.Name
      End If
      FileBuild = DMUserLoc & "\Save\" & NewWorkbookName
      
      If (LenB(SpecPassOpen) > 0 Or LenB(SpecPassModify) > 0) And SpecFileType = "Excel" Then
         Application.StatusBar = "DM: " & SpecSource & " - Saving workbook with Password Encryption"
         DoEvents
         If gEnhancedLogging Then
            Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "save workbook with Password Encryption", "Started")
         End If
         DoEvents
         
         ActiveWorkbook.SetPasswordEncryptionOptions PasswordEncryptionProvider:= _
             "Microsoft Strong Cryptographic Provider", PasswordEncryptionAlgorithm:="RC4", _
             PasswordEncryptionKeyLength:=128, PasswordEncryptionFileProperties:=True
         ActiveWorkbook.SaveAs Filename:= _
             FileBuild, FileFormat:=xlNormal, _
             Password:=SpecPassOpen, WriteResPassword:=SpecPassModify, ReadOnlyRecommended:=False, _
             CreateBackup:=False
             
         If gEnhancedLogging Then
            Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "save workbook with Password Encryption", "Ended")
         End If
         DoEvents
             
      Else
         Application.StatusBar = "DM: " & SpecSource & " - Saving workbook"
         DoEvents
         ActiveWorkbook.SaveAs Filename:=FileBuild
         If gEnhancedLogging Then
            Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "save workbook", "Ended")
         End If
         DoEvents
         
      End If
      
      Application.DisplayAlerts = False
      Application.EnableEvents = False
      Application.ScreenUpdating = False
      Application.AskToUpdateLinks = False
      Application.Calculation = xlCalculationManual
      Application.CalculateBeforeSave = False
         
      If SpecFileType = "PDF" And SpecSpecifySheets <> "" And SpecFileName <> "" Then
         Application.StatusBar = "DM: " & SpecSource & " - converting to PDF"
         DoEvents
         If gEnhancedLogging Then
            Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "convert to PDF", "Started")
         End If
         DoEvents
         
         If objDM.ConvertToPDF(FileBuild) = True Then
            FileBuild = Replace(UCase(FileBuild), SaveWBext, ".PDF")
            If gEnhancedLogging Then
               Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "convert to PDF", "Ended")
            End If
            DoEvents
         Else
            ErrorsEncountered = True
            If gEnhancedLogging Then
               Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "convert to PDF", "FAILED - NOT CONVERTED")
            End If
            DoEvents
         End If
      End If
      
      If SpecFileType = "HTML" And SpecSpecifySheets <> "" And SpecFileName <> "" Then
         Application.StatusBar = "DM: " & SpecSource & " - converting to HTML"
         DoEvents
         If gEnhancedLogging Then
            Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "convert to HTML", "Started")
         End If
         DoEvents
         
         On Local Error Resume Next
         S = DMUserLoc & "\Save\" & SpecFileName & ".htm"
         'Convert to HTML:
         With ActiveWorkbook.PublishObjects.Add(xlSourceSheet, _
             S, SpecSpecifySheets, "", xlHtmlStatic, _
             "", "")
             .Publish (True)
             '.AutoRepublish = False 'compile error for Excel 2000
         End With
         If Err = 0 Then
            FileBuild = S
            If gEnhancedLogging Then
               Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "convert to HTML", "Ended")
            End If
            DoEvents
         Else
            ErrorsEncountered = True
            If gEnhancedLogging Then
               Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "convert to HTML", "FAILED - NOT CONVERTED")
            End If
            DoEvents
         End If
         On Local Error GoTo DistributeSpecsError:
      End If
      
      Application.ActiveWorkbook.Close SaveChanges:=False
      
      If SpecZip = "YES" Then
         Application.StatusBar = "DM: " & SpecSource & " - creating ZIP file"
         DoEvents
         If gEnhancedLogging Then
            Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "convert to ZIP", "Started")
         End If
         DoEvents

         S = "ERROR"
         S = objDM.ZipIt(FileBuild, SpecAttachments)
         If S <> "ERROR" Then
            FileBuild = S
         Else
            Application.StatusBar = "DM: " & SpecSource & " - Error encountered during Zip process"
            'MsgBox "DM: " & vbCrLf & SpecSource & vbCrLf & " - Error encountered during Zip process"
            ErrorsEncountered = True
            If gEnhancedLogging Then
               Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "convert to ZIP", "FAILED - NOT CONVERTED")
            End If
            DoEvents
            
            GoTo ResetToParent
         End If
      End If
      
      If SpecDestinationType = "File Save" Then
         Application.StatusBar = "DM: " & SpecSource & " - saving file to destination folder"
         DoEvents
         If gEnhancedLogging Then
            Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "save file to destination", "Started")
         End If
         DoEvents

         'build new destination
         S = FileBuild
         I = InStrRev(S, "\")
         S = Mid$(S, I)
         S = SpecDestination & S
         If objDM.CopyToDestination(FileBuild, S) = True Then
            FileBuild = S
            If gEnhancedLogging Then
               Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "save file to destination", "Ended")
            End If
            DoEvents
         Else
            ErrorsEncountered = True
            If gEnhancedLogging Then
               Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "save file to destination", "FAILED - FILES NOT COPIED TO DESTINATION")
            End If
            DoEvents
         End If
         If SpecAttachments <> "" And SpecZip <> "YES" Then
            Attachments = Split(SpecAttachments, "!")
            For Each Attachment In Attachments
               S = CStr(Trim$(Attachment))
               S = Mid$(S, InStrRev(S, "\"))
               S = SpecDestination & S
               If gEnhancedLogging Then
                  Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "copy Additional Attachment to destination", "Started")
               End If
               DoEvents
               If objDM.CopyToDestination(CStr(Trim$(Attachment)), S) = True Then
                  Application.StatusBar = "DM: " & SpecSource & " - copying Additional Attachment file " & CStr(Trim$(Attachment)) & " to destination folder"
                  DoEvents
                  If gEnhancedLogging Then
                     Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "copy Additional Attachment to destination", "Ended")
                  End If
                  DoEvents
               Else
                  ErrorsEncountered = True
                  If gEnhancedLogging Then
                     Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "copy Additional Attachment to destination", "FAILED - ADDITIONAL ATTACHMENT NOT COPIED")
                  End If
                  DoEvents
               End If
            Next
         End If
      End If
   Else
      Application.ActiveWorkbook.Close SaveChanges:=False
   End If
   
   If SpecDestinationType = "Email" Then
      Application.StatusBar = "DM: " & SpecSource & " - caching Email"
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "cache Emails", "Started")
      End If
      DoEvents
      
      S = FileBuild
      If SpecAttachments <> "" And SpecZip <> "YES" Then
         S = S & "!" & SpecAttachments
      End If
      'Call objDM.DoEmails(SpecDestination, SpecEmailSubject, SpecEmailBody, S)
      Call objDM.CacheEmails(SpecDestination, SpecEmailSubject, SpecEmailBody, S)
      If gEnhancedLogging Then
         Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "cache Emails", "Ended")
      End If
      DoEvents
      
   End If
   
   Application.StatusBar = "DM: " & SpecSource & " - distribution complete"
   DoEvents
   If gEnhancedLogging Then
      Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "0", "DISTRIBUTION", "Ended")
   End If
ResetToParent:
   'reset to parent distribution workbook
   Application.Workbooks.Open Filename:=SaveWBpath & "\" & SaveWBname
   Application.DisplayAlerts = False
   Application.EnableEvents = False
   Application.ScreenUpdating = False
   Application.AskToUpdateLinks = False
   Application.Calculation = xlCalculationManual
   Application.CalculateBeforeSave = False
   DoEvents
Next

Application.StatusBar = "DM: Processing cached Emails"
DoEvents
Call objDM.DoEmails

Application.Calculation = SaveCalcSetting
Application.DisplayAlerts = True
Application.EnableEvents = True
Application.ScreenUpdating = True
Application.AskToUpdateLinks = True
Application.Cursor = xlDefault
EndedTime = Now
Application.StatusBar = "DM: " & "Distribution started: " & StartedTime & "  ended: " & EndedTime

If Not Messenger Is Nothing Then
   If ErrorsEncountered Then
      Messenger.SendMessage "ERR|Errors encountered during the Distribution Process. Please review the Distribution Log"
   Else
      Messenger.SendMessage "MDG|Distribution started: " & StartedTime & "  ended: " & EndedTime
   End If
Else
   'MsgBox "Distribution started: " & StartedTime & "  ended: " & EndedTime
End If
ErrorsEncountered = False
For I = 0 To 32000
   DoEvents
Next
For I = 0 To 32000
   DoEvents
Next
For I = 0 To 32000
   DoEvents
Next
Application.StatusBar = False
Exit Sub

DistributeSpecsError:
Select Case Err
    Case 53
        Resume Next
    Case Else
         If gEnhancedLogging Then
            Call objDM.LogEntry(SaveWBpath & "\" & SaveWBname, SpecSource, "1", "save workbook", "FAILED: " & Err.Description)
         End If
         DoEvents
        Resume Next
End Select
End Sub
Function FindAll(SearchRange As Range, FindWhat As Variant, _
    Optional LookIn As XlFindLookIn = xlValues, Optional LookAt As XlLookAt = xlWhole, _
    Optional SearchOrder As XlSearchOrder = xlByRows, _
    Optional MatchCase As Boolean = False) As Range
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' FindAll
' This returns a Range object that contains all the cells in SearchRange in which FindWhat
' was found. The parameters to the function have the same meaning as they do for the
' Find method of the Range object. If no cells were found, the result of this function
' is Nothing.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Dim FoundCell As Range
Dim FoundCells As Range
Dim LastCell As Range
Dim FirstAddr As String
With SearchRange
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' In order to have Find search for the FindWhat value
    ' starting at the first cell in the SearchRange, we
    ' have to find the last cell in SearchRange and use
    ' that as the cell after which the Find will search.
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''
    Set LastCell = .Cells(.Cells.Count)
End With

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Do the initial Find. If we don't find FindWhat in the first Find,
' we won't even go into the code which searches for subsequent
' occurances.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Set FoundCell = SearchRange.Find(What:=FindWhat, After:=LastCell, _
    LookIn:=LookIn, LookAt:=LookAt, SearchOrder:=SearchOrder, MatchCase:=MatchCase)
If Not FoundCell Is Nothing Then
    ''''''''''''''''''''''''''''''
    ' Set the FoundCells range
    ' to the first FoundCell.
    ''''''''''''''''''''''''''''''
    Set FoundCells = FoundCell
    ''''''''''''''''''''''''''''
    ' FirstAddr will contain the
    ' address of the first found
    ' cell. We test each FoundCell
    ' to this address to prevent
    ' the Find from looping back
    ' through the range it has
    ' already searched.
    ''''''''''''''''''''''''''''
    FirstAddr = FoundCell.Address
    Do
        ''''''''''''''''''''''''''''''''
        ' Loop calling FindNext until
        ' FoundCell is nothing or
        ' we wrap around the first
        ' found cell (address is in
        ' FirstAddr).
        '''''''''''''''''''''''''''''''
        Set FoundCells = Application.Union(FoundCells, FoundCell)
        Set FoundCell = SearchRange.FindNext(After:=FoundCell)
    Loop Until (FoundCell Is Nothing) Or (FoundCell.Address = FirstAddr)
End If

''''''''''''''''''''
' Return the result.
''''''''''''''''''''
If FoundCells Is Nothing Then
    Set FindAll = Nothing
Else
    Set FindAll = FoundCells
End If
End Function
Sub ReplaceUnspecifiedSheetsReferences()
Dim SearchRange As Range
Dim FoundCells As Range
Dim FoundCell As Range
Dim FindWhat As Variant
Dim MatchCase As Boolean
Dim LookIn As XlFindLookIn
Dim LookAt As XlLookAt
Dim SearchOrder As XlSearchOrder
Dim SheetName As String
Dim SheetNum As Integer, SheetNameNum As Integer
Dim LastRow As Long, LastCol As Integer

On Local Error GoTo ReplaceUnspecifiedSheetsReferencesEnd

For SheetNameNum = 1 To Worksheets.Count
   If Worksheets(SheetNameNum).Visible = xlVeryHidden Then
      SheetName = Worksheets(SheetNameNum).Name
      
      For SheetNum = 1 To Worksheets.Count
         If Worksheets(SheetNum).Name <> SheetName And Worksheets(SheetNum).Visible = xlSheetVisible Then
            LastRow = 0
            LastRow = Worksheets(SheetNum).Cells.Find(What:="*", LookIn:=xlFormulas, _
              SearchDirection:=xlPrevious, LookAt:=xlPart, _
              SearchOrder:=xlByRows).Row
            LastCol = 0
            LastCol = Worksheets(SheetNum).Cells.Find(What:="*", LookIn:=xlFormulas, _
              SearchDirection:=xlPrevious, LookAt:=xlPart, _
              SearchOrder:=xlByColumns).Column
            If LastCol > 0 And LastRow > 0 Then
            
               ''''''''''''''''''''''''''
               ' Set the variables to the
               ' appropriate values.
               ''''''''''''''''''''''''''
               Set SearchRange = Worksheets(SheetNum).Range(Cells(1, 1).Address, Cells(LastRow, LastCol).Address)
               FindWhat = SheetName
               LookIn = xlFormulas
               LookAt = xlPart
               SearchOrder = xlByRows
               MatchCase = False
         
               '''''''''''''''''''
               ' Search the range.
               '''''''''''''''''''
               Set FoundCells = FindAll(SearchRange:=SearchRange, FindWhat:=FindWhat, _
                   LookIn:=LookIn, LookAt:=LookAt, SearchOrder:=SearchOrder, MatchCase:=MatchCase)
         
               ''''''''''''''''''''''
               ' Process results.
               ''''''''''''''''''''''
               If Not FoundCells Is Nothing Then
                  For Each FoundCell In FoundCells.Cells
                      FoundCell.Copy
                      FoundCell.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
                          :=False, Transpose:=False
         '             ActiveSheet.Paste
                      Application.CutCopyMode = False
                  Next FoundCell
               End If
            End If
         End If
      Next SheetNum
      'Worksheets(SheetNameNum).Name
   End If
Next SheetNameNum
ReplaceUnspecifiedSheetsReferencesEnd:
End Sub
Public Function EditSpecs(DMSpecs As String) As Boolean
Dim S As String, I As Integer, bFound As Boolean
Dim Specs() As String
Dim Spec As Variant
Dim SpecParms() As String
Dim SpecParm As Variant
Dim SpecSource As String
Dim SpecSpecifySheets As String
Dim SpecDestination As String
Dim SpecDestinationType As String
Dim SpecFileName As String
Dim SpecFileType As String
Dim SpecZip As String
Dim SpecConvert As String
Dim SpecHideZeroLines As String
Dim SpecCalcBeforeSend As String
Dim SpecGenGXE As String
Dim SpecGenEXD As String
Dim SpecErrors As String
Dim SpecAttachments() As String
Dim SpecAttachment As Variant
Dim DefPrinter As String

EditSpecs = False

Call objDM.UnloadSpecMaint

SpecErrors = ""
Specs = Split(DMSpecs, "><")
For Each Spec In Specs
   SpecParms = Split(Spec, "<>")
   SpecSource = SpecParms(0)
'   If UBound(SpecParms) < MaxParms Then
'      If SpecErrors <> "" Then
'         SpecErrors = SpecErrors & "><"
'      End If
'      SpecErrors = SpecErrors & SpecSource & "<>" & _
'          "Missing spec parms. Expected " & CStr(MaxParms) & _
'          ". Retrieved only " & CStr(UBound(SpecParms)) & "."
'   Else
      'combo values
      SpecDestinationType = Trim$(SpecParms(1))
      SpecFileName = Trim$(SpecParms(3))
      SpecFileType = Trim$(SpecParms(4))
      SpecConvert = Trim$(SpecParms(5))
      SpecSpecifySheets = Trim$(SpecParms(7))
      SpecZip = Trim$(SpecParms(8))
      SpecHideZeroLines = Trim$(SpecParms(9))
      SpecGenGXE = Trim$(SpecParms(10))
      SpecGenEXD = Trim$(SpecParms(11))
      SpecCalcBeforeSend = Trim$(SpecParms(18))
      If SpecCalcBeforeSend = "" Then
         SpecCalcBeforeSend = "NO"
      End If
      Select Case SpecDestinationType
         Case "File Save", "Print", "Email"
         Case Else
            If SpecErrors <> "" Then
               SpecErrors = SpecErrors & "><"
            End If
            SpecErrors = SpecErrors & SpecSource & "<>" & _
                "Invalid value for Destination Type"
      End Select
      Select Case SpecFileType
         Case "Excel", "HTML", "PDF"
         Case Else
            If SpecErrors <> "" Then
               SpecErrors = SpecErrors & "><"
            End If
            SpecErrors = SpecErrors & SpecSource & "<>" & _
                "Invalid value for Destination File Type"
      End Select
'      If SpecFileType = "PDF" Then
'         If objDM.CheckAdobePrinter = False Then
'            If SpecErrors <> "" Then
'               SpecErrors = SpecErrors & "><"
'            End If
'            SpecErrors = SpecErrors & SpecSource & "<>" & _
'                "Destination File Type of PDF requires default Windows printer be set to Adobe PDF"
'         End If
'      End If
      If SpecFileType = "HTML" Then
         If SpecSpecifySheets = "" Then
            If SpecErrors <> "" Then
               SpecErrors = SpecErrors & "><"
            End If
            SpecErrors = SpecErrors & SpecSource & "<>" & _
                "Destination File Type of HTML requires specification of a Worksheet"
         End If
         If SpecFileName = "" Then
            If SpecErrors <> "" Then
               SpecErrors = SpecErrors & "><"
            End If
            SpecErrors = SpecErrors & SpecSource & "<>" & _
                "Destination File Type of HTML requires a Destination Name"
         End If
      End If
      Select Case SpecConvert
         Case "None (No Conversion)", "All Formulas", "Global Only", "Global Only (Excel2000)"
         Case Else
            If SpecErrors <> "" Then
               SpecErrors = SpecErrors & "><"
            End If
            SpecErrors = SpecErrors & SpecSource & "<>" & _
                "Invalid value for Convert Formulas"
      End Select
      Select Case SpecZip
         Case "YES", "NO"
         Case Else
            If SpecErrors <> "" Then
               SpecErrors = SpecErrors & "><"
            End If
            SpecErrors = SpecErrors & SpecSource & "<>" & _
                "Invalid value for Zip Destination"
      End Select
      Select Case SpecCalcBeforeSend
         Case "YES", "NO"
         Case Else
            If SpecErrors <> "" Then
               SpecErrors = SpecErrors & "><"
            End If
            SpecErrors = SpecErrors & SpecSource & "<>" & _
                "Invalid value for Calc Before Send"
      End Select
      Select Case SpecHideZeroLines
         Case "YES", "NO"
         Case Else
            If SpecErrors <> "" Then
               SpecErrors = SpecErrors & "><"
            End If
            SpecErrors = SpecErrors & SpecSource & "<>" & _
                "Invalid value for Hide Zero Lines"
      End Select
      Select Case SpecGenGXE
         Case "YES", "NO"
         Case Else
            If SpecErrors <> "" Then
               SpecErrors = SpecErrors & "><"
            End If
            SpecErrors = SpecErrors & SpecSource & "<>" & _
                "Invalid value for Generate All GXEs"
      End Select
      Select Case SpecGenEXD
         Case "YES", "NO"
         Case Else
            If SpecErrors <> "" Then
               SpecErrors = SpecErrors & "><"
            End If
            SpecErrors = SpecErrors & SpecSource & "<>" & _
                "Invalid value for Generate All EXDs"
      End Select
'      'Source Worksheet
'      SpecSpecifySheets = Trim$(SpecParms(7))
'      If SpecSpecifySheets <> "" Then
'         bFound = False
'         For I = 1 To Worksheets.Count
'            If UCase$(SpecSpecifySheets) = UCase$(Worksheets(I).Name) Then
'               bFound = True
'               Exit For
'            End If
'         Next
'         If bFound = False Then
'            If SpecErrors <> "" Then
'               SpecErrors = SpecErrors & "><"
'            End If
'            SpecErrors = SpecErrors & SpecSource & "<>" & _
'                "Source worksheet " & SpecSpecifySheets & _
'                " is not in this workbook"
'         End If
'      End If
      
      'Destination Folder/Email Address
      If SpecDestinationType <> "Print" And SpecDestinationType <> "" Then
         SpecDestination = Trim$(SpecParms(2))
         If SpecDestination = "" Then
            If SpecErrors <> "" Then
               SpecErrors = SpecErrors & "><"
            End If
            SpecErrors = SpecErrors & SpecSource & "<>" & _
                "Destination Folder/Email Address is missing for Destination Type: " & _
                SpecDestinationType
         Else
            If SpecDestinationType = "File Save" Then
               S = ActiveWorkbook.Path
               If UCase$(SpecDestination) <> UCase$(ActiveWorkbook.Path) Then
                  If objDM.DoesFolderExist(SpecDestination) = False Then
                     If SpecErrors <> "" Then
                        SpecErrors = SpecErrors & "><"
                     End If
                     SpecErrors = SpecErrors & SpecSource & "<>" & _
                         "Destination Folder: " & SpecDestination & _
                         " does not exist"
                  End If
                  SpecFileName = Trim$(SpecParms(3))
                  If SpecSpecifySheets <> "" Then
                     If SpecFileName = "" Then
                        If SpecErrors <> "" Then
                           SpecErrors = SpecErrors & "><"
                        End If
                        SpecErrors = SpecErrors & SpecSource & "<>" & _
                            "File Name spec is missing for Destination Type: " & _
                            SpecDestinationType
                     End If
                  End If
               Else
                  If SpecErrors <> "" Then
                     SpecErrors = SpecErrors & "><"
                  End If
                  SpecErrors = SpecErrors & SpecSource & "<>" & _
                      "Destination Folder: " & SpecDestination & _
                      " cannot be the same location as the source workbook"
               End If
            End If
            If Trim$(SpecParms(17)) <> "" Then
               SpecAttachments = Split(Trim$(SpecParms(17)), "!")
               For Each SpecAttachment In SpecAttachments
                  If objDM.DoesFileExist(CStr(SpecAttachment)) = False Then
                     If SpecErrors <> "" Then
                        SpecErrors = SpecErrors & "><"
                     End If
                     SpecErrors = SpecErrors & SpecSource & "<>" & _
                         "Additional Attachment: " & SpecAttachment & _
                         " does not exist"
                  End If
               Next
            End If
         End If
      End If
   'End If
Next
If SpecErrors <> "" Then
   objDM.DisplaySpecErrors SpecErrors
Else
   EditSpecs = True
End If
End Function
Public Function GetDMSpecsSelected() As String
Dim I As Integer, SheetNum As Integer
Dim C As Long
Dim R As Long
Dim MaxCols As Long
Dim Rows As Long, MaxRows As Long
Dim S As String
Dim StartAddress As String
Dim ReturnAddress As String
Dim StartCol As String
Dim Pos As Integer
Dim SaveSheetNum As Integer
Dim DMSpec As String
Dim StartRow As Long, LastRow As Long
Dim CellRange As String

On Local Error GoTo GetDMSpecsSelectedError:
GetDMSpecsSelected = ""
Application.ScreenUpdating = False
Application.EnableEvents = False
Application.Cursor = xlWait
ReturnAddress = ActiveCell.Address
DMSpec = ""

MaxCols = MaxParms + 1

CellRange = ActiveWindow.RangeSelection.Address
If InStr(CellRange, ",") > 0 Or InStr(CellRange, ":") > 0 Then
   If InStr(CellRange, ":") > 0 Then
      If ActiveWindow.RangeSelection.Rows.Count > 1 Then
         StartRow = ActiveWindow.RangeSelection.Rows(1).Row
         LastRow = ActiveWindow.RangeSelection.Rows(ActiveWindow.RangeSelection.Rows.Count).Row
         For R = StartRow To LastRow
             StartAddress = "$A$" & Val(R)
             Range(StartAddress).Select
             If InStr(UCase(ActiveCell.Offset(0, 0).Value), "DMSPECS>") Then
               If DMSpec <> "" Then
                 DMSpec = DMSpec & "><"
               End If
               DMSpec = DMSpec & ActiveSheet.Name & "." & ActiveCell.Address
               For C = 1 To MaxCols - 1
                   DMSpec = DMSpec & "<>" & Trim$(ActiveCell.Offset(0, C).Value) & " "
               Next C
             End If
         Next R
      End If
   End If
Else
   StartAddress = "A" & ActiveCell.Row
   Range(StartAddress).Select
   If InStr(UCase(ActiveCell.Offset(0, 0).Value), "DMSPECS>") Then
     If DMSpec <> "" Then
       DMSpec = DMSpec & "><"
     End If
     DMSpec = DMSpec & Worksheets(ActiveWindow.ActiveSheet.index).Name & "." & ActiveCell.Address
     For C = 1 To MaxCols - 1
         DMSpec = DMSpec & "<>" & Trim$(ActiveCell.Offset(0, C).Value) & " "
     Next C
   End If
End If

Range(ReturnAddress).Select

Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Cursor = xlDefault

GetDMSpecsSelected = DMSpec

Exit Function

GetDMSpecsSelectedError:
Select Case Err
    Case 53
        Resume Next
    Case Else
        Resume Next
End Select
End Function
Public Function GetDMSpecsAll() As String
Dim I As Integer, SheetNum As Integer
Dim C As Long
Dim R As Long
Dim MaxCols As Long
Dim Rows As Long, MaxRows As Long
Dim S As String
Dim StartAddress As String
Dim ReturnAddress As String
Dim StartCol As String
Dim Pos As Integer
Dim SaveSheetNum As Integer
Dim DMSpec As String
Dim LastRow As Long

On Local Error GoTo GetDMSpecsAllError:
GetDMSpecsAll = ""
Application.ScreenUpdating = False
Application.EnableEvents = False
Application.Cursor = xlWait
SaveSheetNum = ActiveWindow.ActiveSheet.index
ReturnAddress = ActiveCell.Address
DMSpec = ""
For SheetNum = 1 To Worksheets.Count
   Worksheets(SheetNum).Select
   LastRow = 0
   LastRow = Worksheets(SheetNum).Cells.Find(What:="*", LookIn:=xlFormulas, _
     SearchDirection:=xlPrevious, _
     SearchOrder:=xlByRows).Row
     
   StartAddress = "$A$1"
   R = 1
   MaxRows = LastRow
   MaxCols = MaxParms + 1
   If LastRow > 0 Then
      For Rows = 1 To MaxRows
          StartAddress = "$A$" & Val(R)
          Worksheets(SheetNum).Range(StartAddress).Select
          If ActiveCell.Offset(0, C).HasFormula = False Then
            If InStr(UCase(ActiveCell.Offset(0, 0).Value), "DMSPECS>") Then
                If DMSpec <> "" Then
                  DMSpec = DMSpec & "><"
                End If
                DMSpec = DMSpec & Worksheets(SheetNum).Name & "." & ActiveCell.Address
                For C = 1 To MaxCols - 1
                    DMSpec = DMSpec & "<>" & Trim$(ActiveCell.Offset(0, C).Value) & " "
                Next C
            End If
          End If
          R = R + 1
      Next Rows
   End If
Next SheetNum

Worksheets(SaveSheetNum).Select
Range(ReturnAddress).Select

Application.ScreenUpdating = True
Application.EnableEvents = True
Application.Cursor = xlDefault

GetDMSpecsAll = DMSpec

Exit Function

GetDMSpecsAllError:
Select Case Err
    Case 53
        Resume Next
    Case Else
        Resume Next
End Select
End Function
Public Function ColNo2ColRef(ColNo As Integer) As String
'This function converts a number between 1 and 256 to a column reference between A and IV
If ColNo < 1 Or ColNo > 256 Then
    ColNo2ColRef = "#VALUE!"
    Exit Function
End If
ColNo2ColRef = Cells(1, ColNo).Address(True, False, xlA1)
ColNo2ColRef = Left(ColNo2ColRef, InStr(1, ColNo2ColRef, "$") - 1)
End Function
Function ColRef2ColNo(ColRef As String) As Integer
'This function converts a column reference (A - IV) to a column number between 1 and 256:
ColRef2ColNo = 0
On Local Error Resume Next
ColRef2ColNo = Range(ColRef & "1").Column
End Function

Private Function GetComplexRange(sRange As String) As String
Dim tmpCol() As Variant
Dim N As Long
Dim x As Long
Dim sText As String
Dim sResult As String

   x = 1
   sText = sRange
      
   'Strip out any +'s
   Do
      x = InStr(x, sText, "+")
      If x > 0 Then
         sText = Left$(sText, x - 1) & Right$(sText, Len(sText) - x)
      End If
   Loop Until x = 0

   'Parse out range in case there are more than
   'one concatenated. (Separetd by &'s)
   Do
      x = InStr(1, sText, "&")
      If x Then
         
         ReDim Preserve tmpCol(N)
         tmpCol(N) = Left(sText, x - 1)
         sText = Right$(sText, Len(sText) - x)
         N = N + 1
      End If
     
   Loop Until x = 0
   
   If Len(sText) Then
      ReDim Preserve tmpCol(N)
      tmpCol(N) = sText
   End If

   If UBound(tmpCol) >= 0 Then
        For x = LBound(tmpCol) To UBound(tmpCol)
            sResult = sResult & ActiveSheet.Cells(ActiveCell.Row, Range(tmpCol(x)).Column)
        Next x
   End If

    If Len(Trim$(sResult)) > 0 Then
        GetComplexRange = sResult
    Else
        GetComplexRange = ""
    End If
End Function

Private Function ParseArray(ByVal Text As String, Optional Delimitor As String = ",") As Variant
Dim tmpCol() As Variant
Dim x As Long
Dim N As Long

   Do
      x = InStr(1, Text, Delimitor)
      If x Then
         
         ReDim Preserve tmpCol(N)
         tmpCol(N) = Left(Text, x - 1)
         Text = Right$(Text, Len(Text) - x)
         N = N + 1
      End If
     
   Loop Until x = 0
   
   If Len(Text) Then
      ReDim Preserve tmpCol(N)
      tmpCol(N) = Text
   End If

  ParseArray = tmpCol

End Function

Public Sub TestDataValidation()
Range("D13").Select
With Selection.Validation
    .Delete
    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
    xlBetween, Formula1:="xxx,yyy,zzz"
    .IgnoreBlank = True
    .InCellDropdown = True
    .InputTitle = ""
    .ErrorTitle = ""
    .InputMessage = ""
    .ErrorMessage = ""
    .ShowInput = True
    .ShowError = True
End With
Selection.Value = "yyy"
End Sub
Public Sub ShowDMSettings()
Call objDM.UnloadSpecMaint
Call objDM.ShowSettings
Call StartDMServer
End Sub
Public Sub ShowAbout()
Call objDM.UnloadSpecMaint
Call objDM.ShowAbout
End Sub
Public Sub StartupDM()
On Error Resume Next
ServerConnected = False
Set objDM = Nothing
Set objDM = New GSI_DM.DMAction
If Err Then
   MsgBox "Error: " & Err.Number & " " & Err.Description & vbNewLine & vbNewLine & " Could not Create DM for Excel (GSI_DM.DMAction)"
   ServerConnected = False
   Exit Sub
End If
MaxParms = 18
Call RemoveDMMenus
Call DMToolbar
Call AddDMMenus
Call StartDMServer

' Start and initialize Messaging
If Messenger Is Nothing Then
   On Error Resume Next
   Set Messenger = CreateObject("DASMessenger.MSGServer")
   Messenger.StartMessaging
End If
End Sub
Private Sub StartDMServer()
ServerConnected = False
If objDM.StartDM <> "ERROR" Then
    ServerConnected = True
    DMUserLoc = objDM.GetDMUserLoc
    gSaveBeforeDistribute = objDM.GetSaveBeforeDistribute
    gEnhancedLogging = objDM.GetEnhancedLogging
End If
End Sub

Public Sub Auto_Open()
Call StartupDM
End Sub
Public Sub Auto_Close()
Call RemoveDMMenus
On Local Error Resume Next
If Not Messenger Is Nothing Then
   Messenger.EndMessaging
   Set Messenger = Nothing
End If
End Sub
Private Sub RemoveDMMenus()
Dim mycommandbar As CommandBar
Dim returnbar As CommandBarControls
Dim index As Integer
On Local Error Resume Next

Set mycommandbar = Application.CommandBars("Worksheet Menu Bar")
Set returnbar = mycommandbar.Controls
index = 1

Do
   If index <= returnbar.Count Then
       If InStr(returnbar.Item(index).Caption, "Dist") Then
          returnbar.Item(index).Delete
       End If
   index = index + 1
   Else
      Exit Do
   End If
Loop

Set mycommandbar = Application.CommandBars("Cell")
Set returnbar = mycommandbar.Controls
index = 1
Do
   If index <= returnbar.Count Then
     If Left$(returnbar.Item(index).Caption, 11) = "Maintain DM" Then
        returnbar.Item(index).Delete
        'Exit Do
     End If
     index = index + 1
   Else
      Exit Do
   End If
Loop
index = 1
Do
   If index <= returnbar.Count Then
     If Left$(returnbar.Item(index).Caption, 19) = "Distribute Selected" Then
        returnbar.Item(index).Delete
        'Exit Do
     End If
     index = index + 1
   Else
      Exit Do
   End If
Loop
End Sub
Public Sub AddDMMenus()
Dim mycommandbar As CommandBar
Dim NewCommandBarButton As CommandBarButton
Dim newPopup As CommandBarPopup
Dim returnbar As CommandBarControls
Dim index As Integer
Dim I As Boolean

Set mycommandbar = Application.CommandBars("Worksheet Menu Bar")
Set returnbar = mycommandbar.Controls
index = 1

Do
   If index <= returnbar.Count Then
       If InStr(returnbar.Item(index).Caption, "Dist") > 0 Then
          returnbar.Item(index).Delete
       End If
   index = index + 1
   Else
      Exit Do
   End If
Loop

Set newPopup = mycommandbar.Controls.Add(Type:=msoControlPopup)
newPopup.Caption = "Dist&Mgr"

Set NewCommandBarButton = newPopup.Controls.Add(Type:=msoControlButton)
NewCommandBarButton.Caption = "&About Distribution Manager for Excel"
NewCommandBarButton.OnAction = "DMactions.ShowAbout"

Set NewCommandBarButton = newPopup.Controls.Add(Type:=msoControlButton)
NewCommandBarButton.Caption = "S&ettings"
NewCommandBarButton.OnAction = "DMactions.ShowDMSettings"

Set NewCommandBarButton = newPopup.Controls.Add(Type:=msoControlButton)
NewCommandBarButton.Caption = "Create &New Distribution Control Worksheet"
NewCommandBarButton.OnAction = "DMactions.CreateNewControl"

Set NewCommandBarButton = newPopup.Controls.Add(Type:=msoControlButton)
NewCommandBarButton.Caption = "Convert Distribution Manager &Tree"
NewCommandBarButton.OnAction = "DMactions.ConvertTree"

Set NewCommandBarButton = newPopup.Controls.Add(Type:=msoControlButton)
NewCommandBarButton.Caption = "&Distribute All"
NewCommandBarButton.OnAction = "DMactions.DistributeAll"

I = False
Set mycommandbar = Application.CommandBars("Cell")
Set returnbar = mycommandbar.Controls
index = 1
Do
   If index <= returnbar.Count Then
     If Left$(returnbar.Item(index).Caption, 17) = "Maintain DM Specs" Then
        I = True
        Exit Do
     End If
     index = index + 1
   Else
      Exit Do
   End If
Loop
If I = False Then 'Drill Down menu item not in popup
   Set NewCommandBarButton = returnbar.Add(Type:=msoControlButton)
   NewCommandBarButton.Caption = "Maintain DM Specs"
   NewCommandBarButton.BeginGroup = True
   NewCommandBarButton.OnAction = "DMactions.DMSpecs"
End If

I = False
Set mycommandbar = Application.CommandBars("Cell")
Set returnbar = mycommandbar.Controls
index = 1
Do
   If index <= returnbar.Count Then
     If Left$(returnbar.Item(index).Caption, 19) = "Distribute Selected" Then
        I = True
        Exit Do
     End If
     index = index + 1
   Else
      Exit Do
   End If
Loop
If I = False Then 'Drill Down menu item not in popup
   Set NewCommandBarButton = returnbar.Add(Type:=msoControlButton)
   NewCommandBarButton.Caption = "Distribute Selected"
   NewCommandBarButton.OnAction = "DMactions.DistributeSelected"
End If

End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Calculate()

End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Calculate()

End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Open()

End Sub

Private Sub Workbook_SheetCalculate(ByVal Sh As Object)
End Sub

' InQuest injected base64 decoded content
' C1*^r

INQUEST-PP=macro
