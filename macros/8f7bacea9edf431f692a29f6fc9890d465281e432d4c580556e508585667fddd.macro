Attribute VB_Name = "Module2"
Sub IAEG_EULA()
Dim aPrompt As String
Dim bPrompt As String
Dim cPrompt As String
Dim dPrompt As String
Dim ePrompt As String
Dim aReturn As Integer
Dim bReturn As Integer
Dim cReturn As Integer
Dim dReturn As Integer
Dim eReturn As Integer
'#### First Page EULA too big!!!

aPrompt = "Except as provided in the next sentence, with respect to the information and data provided in a Substance Declaration under IPC-1754 Materials Declaration Standard for Aerospace and Defense, the terms and conditions stated elsewhere in this contract governing protection of proprietary or confidential information shall not apply, and shall be replaced by the Terms of Use stated in this addendum."
aPrompt = aPrompt & vbNewLine & vbNewLine & "This Addendum shall not apply with respect to any information or data that is Export Controlled or Classified.  In the event Export Controlled or Classified Data is included in a Substance Declaration, the Declarants and Recipients shall make a separate, written agreement that protects any data to be exchanged in the standard format ('Proprietary Data Rider').  In such a case, Declarants (as defined below) must mark any information or data provided to identify its Export Controlled or  Classified."
aPrompt = aPrompt & vbNewLine & vbNewLine & "Except when a Proprietary Data Rider has been approved by all parties, "
aPrompt = aPrompt & vbNewLine & vbNewLine & "Click on OK to proceed to Page 2"
aReturn = MsgBox(aPrompt, vbOKOnly + vbInformation, "IAEG(tm) Materials Declaration - Terms of Use Statement - Page 1 ")


'If nReturn = vbOK Then

bPrompt = "by using the Declarable Substance Standard, users of the Declarable Substance Standard agree to be bound by the following terms of use"
bPrompt = bPrompt & vbNewLine & vbNewLine & "a.  The information or data provided pursuant to the Declarable Substance Standard (hereafter, the 'Declaration') is provided with the following assurances by the entity providing the Declaration (hereafter, 'the Declarant'): "
bPrompt = bPrompt & vbNewLine & vbNewLine & "(i) the Declarant has such rights as are necessary to provide the Declaration to the recipient of the Declaration (hereafter, the 'Recipient') pursuant to these terms of use;"
bPrompt = bPrompt & vbNewLine & vbNewLine & "(ii)  to the Declarant's best knowledge based on reasonable inquiry of available information and data ,  the Declaration does not infringe any patent, copyright, trademark, or other proprietary right of any third-party or misappropriate any Trade Secret of any third party.  For the purposes of this standard, 'Trade Secret' is as defined in the Uniform Trade Secrets Act  ;"
bPrompt = bPrompt & vbNewLine & vbNewLine & "Click on OK to proceed to Page 3"
bReturn = MsgBox(bPrompt, vbOKOnly + vbInformation, "IAEG(tm) Materials Declaration - Terms of Use Statement - Page 2 ")

'End If

'If nReturn = vbOK Then

cPrompt = cPrompt & "(iii) the Declaration does not include information or data that is subject to any export control laws ('Export Controlled');"
cPrompt = cPrompt & vbNewLine & vbNewLine & "(iv) the Declaration does not include classified or controlled information or data that a government body claims is sensitive information requiring protection and which has taken measures by means of law or regulation to protect by restricting access ('Classified'); and"
cPrompt = cPrompt & vbNewLine & vbNewLine & "(v) the Declaration is complete and accurate to the Declarant's best knowledge based on the version of the aerospace and defense declarable substances list ('AD-DSL') in effect on the date of the Declaration taking into account all information reasonably available to and ascertainable by the Declarant after diligent inquiry."
cPrompt = cPrompt & vbNewLine & vbNewLine & "Click on OK to proceed to Page 4"
cReturn = MsgBox(cPrompt, vbOKOnly + vbInformation, "IAEG(tm) Materials Declaration - Terms of Use Statement - Page 3")


dPrompt = dPrompt & "b.  The Declarant grants Recipient a non-exclusive, royalty-free, irrevocable, world-wide license to use and disclose the information and data in its Declaration in accordance with the following restrictions and obligations:"
dPrompt = dPrompt & vbNewLine & vbNewLine & "1.  The information and data included in a Declaration shall be used only for the following purposes: (i) to track and manage the chemical content of the products and services supplied by the Recipient; and (ii) to inform Recipient's customers and/or if so required any governmental entity of the presence (including the identity and quantity) of chemical substances in a product or service supplied by the Recipient. Recipient shall be permitted to share with its contractors and agents the information and data provided in a Declaration or Declarations, but only in support of and consistent with any of the foregoing uses"
dPrompt = dPrompt & vbNewLine & vbNewLine & "Click on OK to proceed to Page 5"
dReturn = MsgBox(dPrompt, vbOKOnly + vbInformation, "IAEG(tm) Materials Declaration - Terms of Use Statement - Page 4")

ePrompt = ePrompt & "2.      Except with respect to the uses authorized in Section (b)1 above or as otherwise agreed in writing between the Declarant and Recipient, and except as may be required by law or regulation, Recipient will not publicly disclose or make available to any third-party the Declaration  nor will it use the Declaration for the following purposes: (i) The Recipient will not use the Declaration to reverse engineer the design of the products or services provided by Declarant; and (ii) the Recipient will not use the Declaration to evaluate or calculate the cost of producing products or services by Declarant."
ePrompt = ePrompt & vbNewLine & vbNewLine & "3.  If Recipient provides the information and data from the Declaration to a third party, Recipient shall require that such third party agree to be bound by provisions no less stringent than those included in this 'Terms of Use for Declarable Substance Standard.' The intent of this provision is to ensure that the Recipient shall similarly bind all future recipients up or down the supply chain.)"
eReturn = MsgBox(ePrompt, vbOKOnly + vbInformation, "IAEG(tm) Materials Declaration - Terms of Use Statement - Page 5")





End Sub


Function IsGoodAscii(aString As String) As Boolean ' this scrip detects if a non-ascii char is present
Dim i As Long
Dim iLim As Long
i = 1
iLim = Len(aString)

While i <= iLim
    If Asc(Mid(aString, i, 1)) > 127 Then
        IsGoodAscii = False
        Exit Function
    End If
    i = i + 1
Wend

IsGoodAscii = True
End Function

Function IsEmailValid(strEmail)
    Dim strArray As Variant
    Dim strItem As Variant
    Dim i As Long, c As String, blnIsItValid As Boolean
    blnIsItValid = True
     
    i = Len(strEmail) - Len(Application.Substitute(strEmail, "@", ""))
    If i <> 1 Then IsEmailValid = False: Exit Function
    ReDim strArray(1 To 2)
    strArray(1) = Left(strEmail, InStr(1, strEmail, "@", 1) - 1)
    strArray(2) = Application.Substitute(Right(strEmail, Len(strEmail) - Len(strArray(1))), "@", "")
    For Each strItem In strArray
        If Len(strItem) <= 0 Then
            blnIsItValid = False
            IsEmailValid = blnIsItValid
            Exit Function
        End If
        For i = 1 To Len(strItem)
            c = LCase(Mid(strItem, i, 1))
            If InStr("abcdefghijklmnopqrstuvwxyz_-.", c) <= 0 And Not IsNumeric(c) Then
                blnIsItValid = False
                IsEmailValid = blnIsItValid
                Exit Function
            End If
        Next i
        If Left(strItem, 1) = "." Or Right(strItem, 1) = "." Then
            blnIsItValid = False
            IsEmailValid = blnIsItValid
            Exit Function
        End If
    Next strItem
    If InStr(strArray(2), ".") <= 0 Then
        blnIsItValid = False
        IsEmailValid = blnIsItValid
        Exit Function
    End If
    i = Len(strArray(2)) - InStrRev(strArray(2), ".")
    If i <> 2 And i <> 3 Then
        blnIsItValid = False
        IsEmailValid = blnIsItValid
        Exit Function
    End If
    If InStr(strEmail, "..") > 0 Then
        blnIsItValid = False
        IsEmailValid = blnIsItValid
        Exit Function
    End If
    IsEmailValid = blnIsItValid
    
End Function



Attribute VB_Name = "Plan3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()

    Dim FileName As Variant
    Dim Sep As String
    FileName = Application.GetOpenFilename(FileFilter:="Text File (*.txt),*.txt")
    If FileName = False Then
        ''''''''''''''''''''''''''
        ' user cancelled, get out
        ''''''''''''''''''''''''''
        Exit Sub
    End If
    Sep = Application.InputBox("Enter a separator character.", Type:=2)
    If Sep = vbNullString Then
        ''''''''''''''''''''''''''
        ' user cancelled, get out
        ''''''''''''''''''''''''''
        Exit Sub
    End If
    Debug.Print "FileName: " & FileName, "Separator: " & Sep
    ImportTextFile FName:=CStr(FileName), Sep:=CStr(Sep)
End Sub
    
Public Sub ImportTextFile(FName As String, Sep As String)

Dim RowNdx As Long
Dim ColNdx As Integer
Dim TempVal As Variant
Dim WholeLine As String
Dim Pos As Integer
Dim NextPos As Integer
Dim SaveColNdx As Integer

Application.ScreenUpdating = False
'On Error GoTo EndMacro:

SaveColNdx = ActiveCell.column
RowNdx = ActiveCell.Row

Open FName For Input Access Read As #1

While Not EOF(1)
    Line Input #1, WholeLine
    If Right(WholeLine, 1) <> Sep Then
        WholeLine = WholeLine & Sep
    End If
    ColNdx = SaveColNdx
    Pos = 1
    NextPos = InStr(Pos, WholeLine, Sep)
    While NextPos >= 1
        TempVal = Mid(WholeLine, Pos, NextPos - Pos)
        Cells(RowNdx, ColNdx).Value = TempVal
        Pos = NextPos + 1
        ColNdx = ColNdx + 1
        NextPos = InStr(Pos, WholeLine, Sep)
    Wend
    RowNdx = RowNdx + 1
Wend

EndMacro:
On Error GoTo 0
Application.ScreenUpdating = True

Close #1



End Sub


Private Sub Worksheet_Change(ByVal Target As Range)
    
    
    Application.EnableEvents = False
    
    On Error GoTo EH
    
    Application.Worksheets("7.Supplier-Acceptance").CheckButton.BackColor = &H8000000F
    Target.Offset(0, 27 - Target.column).Copy
    Target.PasteSpecial Paste:=xlFormats
    Application.CutCopyMode = False
    
    Application.EnableEvents = True

EH:
Application.EnableEvents = True

End Sub

Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()
Rows(16).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton2_Click()
Rows(16).EntireRow.Delete
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    
    Application.Worksheets("7.Supplier-Acceptance").CheckButton.BackColor = &H8000000F
    
End Sub

Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CheckButton, 19, 0, MSForms, CommandButton2"
Private Sub DeleteARow_Click()

End Sub

Private Sub AddARowInProduct_Click()
Rows(96).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton1_Click()
Rows(70).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton10_Click()

'*
'* Insert file(s) as icon(s) on the sheet
'* Select an empty cell and call the macro,
'*  the icons of the selected files will be distributed vertically.
'*
    Const csPDFIconFile As String = "pdf.ico"
    Const csExcelIconFile As String = "xls.ico"
    Const csWordIconFile As String = "doc.ico"

    Dim vSelectedFile As Variant
    Dim lRow As Long
    Dim sFileExt As String, sIconFile As String, sFileName As String
    Dim oFile As Object

    With Application.FileDialog(msoFileDialogFilePicker)
        .AllowMultiSelect = True
        .Filters.Add "My Files", "*.pdf; *.doc*; *.xls*"
        If .Show = -1 Then
            For Each vSelectedFile In .SelectedItems
                sFileExt = Right(vSelectedFile, Len(vSelectedFile) - InStrRev(vSelectedFile, "."))
                Select Case LCase(Left(sFileExt, 3))
                    Case "pdf"
                        sIconFile = ThisWorkbook.Path + "\" + csPDFIconFile

                    Case "xls"
                        sIconFile = ThisWorkbook.Path + "\" + csExcelIconFile

                    Case "doc"
                        sIconFile = ThisWorkbook.Path + "\" + csWordIconFile

                    Case Else
                        ' sIconFile = Default icon, if required
                End Select
                '*
                '* File name for IconLabel
                sFileName = Mid(vSelectedFile, InStrRev(vSelectedFile, "\") + 1)
                sFileName = Mid(sFileName, 1, Len(sFileName) - Len(sFileExt) - 1)
                '*
                '* Insert selected file
                Set oFile = ActiveSheet.OLEObjects.Add(FileName:=vSelectedFile, _
                    Link:=False, _
                    DisplayAsIcon:=True, _
                    IconFileName:=sIconFile, _
                    IconIndex:=0, _
                    IconLabel:=sFileName)
                '*
                '* Advance to the cell below the inserted icon
                lRow = 1
                Do
                    If ActiveCell.Offset(lRow).Top > oFile.Top + oFile.Height Then
                        ActiveCell.Offset(lRow).Select
                        Exit Do
                    End If
                    lRow = lRow + 1
                Loop
            Next vSelectedFile
        End If
    End With



End Sub

Private Sub CommandButton2_Click()
Rows(70).EntireRow.Delete
End Sub

Private Sub CommandButton3_Click()

If CommandButton3.Caption = "Hide Optional Sections in Substance Declarations" Then
  Worksheets("Substance-In-Part").Columns("L:R").Hidden = True
  Worksheets("Substance-In-Process").Columns("F:J").Hidden = True
''  Worksheets("Substance-In-Process").Columns("S").Hidden = True
  'Worksheets("Substance-In-Maintenance").Visible = False
  'Sheets("Substance-In-Process").Range("G:O").EntireColumn.Hidden = True
  Sheets("Substance-In-Maintenance").Range("D:F").EntireColumn.Hidden = True
  CommandButton3.Caption = "Show Optional Sections in Substance Declarations"
Else
  Worksheets("Substance-In-Part").Columns("L:R").Hidden = False
  Worksheets("Substance-In-Process").Columns("F:J").Hidden = False
  Sheets("Substance-In-Maintenance").Range("D:F").EntireColumn.Hidden = False
 ' Worksheets("Substance-In-Process").Columns("F:J").Hidden = False
  'Worksheets("Substance-In-Maintenance").Visible = True
  'Sheets("Substance-In-Process").Range("G:O").EntireColumn.Hidden = False
 ' Sheets("Substance-In-Maintenance").Range("D:F").EntireColumn.Hidden = False
  CommandButton3.Caption = "Hide Optional Sections in Substance Declarations"
End If
End Sub



Private Sub CommandButton5_Click()
Rows(122).EntireRow.Delete
End Sub

Private Sub CommandButton6_Click()
Rows(122).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton7_Click()
Rows(107).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A107]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Process Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG AD-DSL List
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Private Sub CommandButton8_Click()
Rows(79).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A78]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG AD-DSL List
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Private Sub CommandButton9_Click()
Rows(123).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A120]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG AD-DSL List
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Option Explicit
Private Sub OptionButton1_Click()

End Sub

Private Sub OptionButton2_Click()

End Sub

Private Sub RequestorTerms_Change()

End Sub



Private Sub DeleteLastRowSubstanceInPart_Click()
ows(96).EntireRow.Delete
End Sub



Private Sub CheckButton_Click()

    Dim field As String
    Dim tabs As String
    Dim errorfield As String
    Dim column As Range
    Dim columncount As Integer
    Dim columncount2 As Integer
    Dim columncount3 As Integer
    Dim columncount4 As Integer
    Dim columncount_max As Integer
    'Dim columncount_tab3 As Integer
    Dim query_answer1 As Boolean
    Dim query_answer2 As Boolean
    Dim row_number As Integer
    Dim mode As String
    Dim charphone As String
    Dim cell_column As Integer
    Dim cell_row As Integer
    
    query_answer1 = False
    query_answer2 = False
    cell_column = 1
    cell_row = 1
    
    tabs = "1.Requester-Supplier"
    mode = Worksheets("1.Requester-Supplier").Cells(13, 7)
    
    If Trim(Worksheets("1.Requester-Supplier").Cells(3, 3)) = "" And mode = "Request/Reply" Then 'Requester Contact - Company Name
        field = "Requester Contact - Company Name"
        cell_column = 3
        cell_row = 3
        GoTo Message3
    End If
    
    'If Trim(Worksheets("1.Requester-Supplier").Cells(7, 3)) = "" Then 'Requester Contact - Street
    '    field = "Requester Contact - Street"
    '    GoTo Message3
    'End If
    
    'If Trim(Worksheets("1.Requester-Supplier").Cells(8, 3)) = "" Then 'Requester Contact - City
    '    field = "Requester Contact - Street"
    '    GoTo Message3
    'End If
    
    'If Trim(Worksheets("1.Requester-Supplier").Cells(10, 3)) = "" Then 'Requester Contact - Country
    '    field = "Requester Contact - Country"
    '    GoTo Message3
    'End If
    
    'If Trim(Worksheets("1.Requester-Supplier").Cells(11, 3)) = "" Then 'Requester Contact - Zip Code
    '    field = "Requester Contact - Zip Code"
    '    GoTo Message3
    'End If
    
    If Trim(Worksheets("1.Requester-Supplier").Cells(3, 7)) = "" And mode = "Request/Reply" Then 'Requester Contact - Requester Name
        field = "Requester Contact - Requester Contact Name"
        cell_row = 3
        cell_column = 7
        GoTo Message3
    End If
    
    If Trim(Worksheets("1.Requester-Supplier").Cells(4, 7)) = "" And mode = "Request/Reply" Then 'Requester Contact - Requester Phone
        field = "Requester Contact - Requester Phone"
        cell_row = 4
        cell_column = 7
        GoTo Message3
    End If
    
    strPhone = Worksheets("1.Requester-Supplier").Cells(4, 7) 'Check if is a valid phone number
    For i = 1 To Len(strPhone)
        If (Mid(strPhone, i, 1)) = "+" Or (Mid(strPhone, i, 1)) = "(" Or (Mid(strPhone, i, 1)) = ")" Or (Mid(strPhone, i, 1)) = "-" Or (Mid(strPhone, i, 1)) = " " Then
            'MsgBox ("(, ( ou +")
        Else
            If Not (IsNumeric(Mid(strPhone, i, 1))) Then
                field = "Authorizer Phone"
                charphone = Mid(strPhone, i, 1)
                cell_row = 4
                cell_column = 7
                GoTo Message12
            End If
        End If
    Next
    
    If Trim(Worksheets("1.Requester-Supplier").Cells(5, 7)) = "" And mode = "Request/Reply" Then 'Requester Contact - Requester Email
        field = "Requester Contact - Requester E-mail"
        cell_row = 5
        cell_column = 7
        GoTo Message3
    End If
    
    If Not IsEmailValid(Worksheets("1.Requester-Supplier").Cells(5, 7)) And mode = "Request/Reply" Then 'Requester Contact - Requester Email
        field = "Requester Contact - Requester E-mail"
        cell_row = 5
        cell_column = 7
        GoTo Message4
    End If
    
    If ((Trim(Worksheets("1.Requester-Supplier").Cells(10, 7)) = "") Or _
    (IsDate(Worksheets("1.Requester-Supplier").Cells(10, 7)) = False)) And mode = "Request/Reply" Then   'Requester Contact - Request Date
        field = "Requester Contact - Request Date"
        cell_row = 10
        cell_column = 7
        GoTo Message5
    End If
    
    If (Trim(Worksheets("1.Requester-Supplier").Cells(11, 7)) <> "") And (mode = "Request/Reply") Then
        If IsDate(Worksheets("1.Requester-Supplier").Cells(11, 7)) = False Then    'Requester Contact - Respond by Date
            field = "Requester Contact - Respond by Date"
            cell_row = 11
            cell_column = 7
            GoTo Message5
        End If
    End If
    
    If (Trim(Worksheets("1.Requester-Supplier").Cells(11, 7)) <> "") And mode = "Request/Reply" Then
        If (Worksheets("1.Requester-Supplier").Cells(10, 7)) > (Worksheets("1.Requester-Supplier").Cells(11, 7)) Then 'Comparing dates
            MsgBox ("Please, review the fields 'Request Date' and 'Respond by Date'" & vbNewLine & _
            "at the 1.Requester-Supplier tab:" & vbNewLine & vbNewLine & _
            "The 'Request Date' shall not be after 'Respond by Date'.")
            CheckButton.BackColor = &H8000000F
            cell_row = 11
            cell_column = 7
            ThisWorkbook.Sheets(tabs).Activate
            ActiveSheet.Cells(cell_row, cell_column).Select
            Exit Sub
        End If
    End If
    
    If Trim(Worksheets("1.Requester-Supplier").Cells(15, 3)) = "" Then 'Supplier Contact - Supplier Company Name
        field = "Supplier Contact - Supplier Company Name"
        cell_row = 15
        cell_column = 3
        GoTo Message3
    End If
    
    'If Trim(Worksheets("1.Requester-Supplier").Cells(19, 3)) = "" Then 'Supplier Contact - Street
    '    field = "Supplier Contact - Street"
    '    GoTo Message3
    'End If
    
    'If Trim(Worksheets("1.Requester-Supplier").Cells(20, 3)) = "" Then 'Supplier Contact - City
    '    field = "Supplier Contact - City"
    '    GoTo Message3
    'End If
    
    'If Trim(Worksheets("1.Requester-Supplier").Cells(22, 3)) = "" Then 'Supplier Contact - Country
    '    field = "Supplier Contact - Country"
    '    GoTo Message3
    'End If
    
    'If Trim(Worksheets("1.Requester-Supplier").Cells(23, 3)) = "" Then 'Supplier Contact - Zip Code
    '    field = "Supplier Contact - Zip Code"
    '    GoTo Message3
    'End If
    
    If Trim(Worksheets("1.Requester-Supplier").Cells(15, 7)) = "" Then 'Supplier Contact - Supplier Contact Name
        field = "Supplier Contact - Supplier Contact Name"
        cell_row = 15
        cell_column = 7
        GoTo Message3
    End If
    
    If Trim(Worksheets("1.Requester-Supplier").Cells(16, 7)) = "" Then 'Supplier Contact - Supplier Contact Phone
        field = "Supplier Contact - Supplier Contact Phone"
        cell_row = 16
        cell_column = 7
        GoTo Message3
    End If
    
    strPhone = Worksheets("1.Requester-Supplier").Cells(16, 7) 'Check if is a valid phone number
    For i = 1 To Len(strPhone)
        If (Mid(strPhone, i, 1)) = "+" Or (Mid(strPhone, i, 1)) = "(" Or (Mid(strPhone, i, 1)) = ")" Or (Mid(strPhone, i, 1)) = "-" Or (Mid(strPhone, i, 1)) = " " Then
            'MsgBox ("(, ( ou +")
        Else
            If Not (IsNumeric(Mid(strPhone, i, 1))) Then
                field = "Supplier Contact - Supplier Contact Phone"
                charphone = Mid(strPhone, i, 1)
                cell_row = 16
                cell_column = 7
                GoTo Message12
            End If
        End If
    Next
    
    If Trim(Worksheets("1.Requester-Supplier").Cells(17, 7)) = "" Then 'Supplier Contact - Email
        field = "Supplier Contact - Email"
        cell_row = 17
        cell_column = 7
        GoTo Message3
    End If
    
    If Not IsEmailValid(Worksheets("1.Requester-Supplier").Cells(17, 7)) Then 'Supplier Contact - Email
        field = "Supplier Contact - E-mail"
        cell_row = 17
        cell_column = 7
        GoTo Message4
    End If
    
    'If Trim(Worksheets("1.Requester-Supplier").Cells(18, 7)) = "" Then 'Supplier Contact - Job Title
    '    field = "Supplier Contact - Job Title"
    '    GoTo Message3
    'End If
    
    If (Trim(Worksheets("1.Requester-Supplier").Cells(22, 7)) = "") Or _
    (IsDate(Worksheets("1.Requester-Supplier").Cells(22, 7)) = False) Then   'Supplier Declaration Date
        field = "Supplier Contact - Supplier Declaration Date"
        cell_row = 22
        cell_column = 7
        GoTo Message5
    End If
    
    If IsGoodAscii(Worksheets("1.Requester-Supplier").Cells(5, 3)) = False Then 'Company ID Number
        field = "Requester Contact - Requester Company ID Number"
        errorfield = Worksheets("1.Requester-Supplier").Cells(5, 3)
        cell_row = 5
        cell_column = 3
        GoTo Message
    End If
    
    If IsGoodAscii(Worksheets("1.Requester-Supplier").Cells(11, 3)) = False Then 'Zip Code
        field = "Requester Contact - Zip Code"
        errorfield = Worksheets("1.Requester-Supplier").Cells(11, 3)
        cell_row = 11
        cell_column = 3
        GoTo Message
    End If
    
    If IsGoodAscii(Worksheets("1.Requester-Supplier").Cells(4, 7)) = False Then 'Requester Phone
         field = "Requester Contact - Requester Contact Phone"
         errorfield = Worksheets("1.Requester-Supplier").Cells(4, 7)
         cell_row = 4
         cell_column = 7
         GoTo Message
    End If
    
    If IsGoodAscii(Worksheets("1.Requester-Supplier").Cells(5, 7)) = False Then 'Requester Email
        field = "Requester Contact - Requester Contact Email"
        errorfield = Worksheets("1.Requester-Supplier").Cells(5, 7)
        cell_row = 5
        cell_column = 7
        GoTo Message
    End If
    
    If IsGoodAscii(Worksheets("1.Requester-Supplier").Cells(9, 7)) = False Then 'Requester Document ID
        field = "Requester Contact - Requester Document ID"
        errorfield = Worksheets("1.Requester-Supplier").Cells(9, 7)
        cell_row = 9
        cell_column = 7
        GoTo Message
    End If
    
    If IsGoodAscii(Worksheets("1.Requester-Supplier").Cells(10, 7)) = False Then 'Request Date
        field = "Requester Contact - Request Date"
        errorfield = Worksheets("1.Requester-Supplier").Cells(10, 7)
        cell_row = 10
        cell_column = 7
        GoTo Message
    End If
    
    If IsGoodAscii(Worksheets("1.Requester-Supplier").Cells(11, 7)) = False Then 'Respond by Date
        field = "Requester Contact - Request Respond by Date"
        errorfield = Worksheets("1.Requester-Supplier").Cells(11, 7)
        cell_row = 11
        cell_column = 7
        GoTo Message
    End If
    
    If IsGoodAscii(Worksheets("1.Requester-Supplier").Cells(17, 3)) = False Then 'Supplier Company ID Number
       field = "Supplier Contact - Supplier Company ID Number"
       errorfield = Worksheets("1.Requester-Supplier").Cells(17, 3)
       cell_row = 17
       cell_column = 3
       GoTo Message
    End If
    
    If IsGoodAscii(Worksheets("1.Requester-Supplier").Cells(23, 3)) = False Then 'Zip Code
        field = "Supplier Contact - Zip Code"
        errorfield = Worksheets("1.Requester-Supplier").Cells(23, 3)
        cell_row = 23
        cell_column = 3
        GoTo Message
    End If
    
    If IsGoodAscii(Worksheets("1.Requester-Supplier").Cells(16, 7)) = False Then 'Supplier Contact Phone
        field = "Supplier Contact - Supplier Contact Phone"
        errorfield = Worksheets("1.Requester-Supplier").Cells(16, 7)
        cell_row = 16
        cell_column = 7
        GoTo Message
    End If
    
    If IsGoodAscii(Worksheets("1.Requester-Supplier").Cells(17, 7)) = False Then 'Supplier Contact Email
        field = "Supplier Contact - Supplier Contact Email"
        errorfield = Worksheets("1.Requester-Supplier").Cells(17, 7)
        cell_row = 17
        cell_column = 7
        GoTo Message
    End If
    
    If IsGoodAscii(Worksheets("1.Requester-Supplier").Cells(22, 7)) = False Then 'Supplier Response Date
        field = "Supplier Contact - Supplier Declaration Date"
        errorfield = Worksheets("1.Requester-Supplier").Cells(22, 7)
        cell_row = 22
        cell_column = 7
        GoTo Message
    End If


    
    '--------------------------------------------------------------------------------------------------
    tabs = "2.Product-Group"
    
    
    Set column = Sheets("2.Product-Group").Range("A:A") 'Product Group ID
    columncount = ThisWorkbook.Worksheets("2.Product-Group").Cells(ThisWorkbook.Worksheets("2.Product-Group").Rows.Count, "A").End(xlUp).Row 'get the last used row
    For i = 3 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Product Group ID"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 1
            GoTo Message
        End If
    Next
    
    Set column = Sheets("2.Product-Group").Range("B:B") 'Product Group Description
    columncount = ThisWorkbook.Worksheets("2.Product-Group").Cells(ThisWorkbook.Worksheets("2.Product-Group").Rows.Count, "B").End(xlUp).Row 'get the last used row
    For i = 3 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Product Group Description"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 2
            GoTo Message
        End If
    Next
    
    
    Set column = Sheets("2.Product-Group").Range("D:D") 'Product Number
    columncount = ThisWorkbook.Worksheets("2.Product-Group").Cells(ThisWorkbook.Worksheets("2.Product-Group").Rows.Count, "D").End(xlUp).Row 'get the last used row
    For i = 3 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Product Number"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 4
            GoTo Message
        End If
    Next
        
    Set column = Sheets("2.Product-Group").Range("E:E") 'Product Description
    columncount = ThisWorkbook.Worksheets("2.Product-Group").Cells(ThisWorkbook.Worksheets("2.Product-Group").Rows.Count, "E").End(xlUp).Row 'get the last used row
    For i = 3 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Product Description"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 5
            GoTo Message
        End If
    Next
    
    Set column = Sheets("2.Product-Group").Range("F:F") 'Product Revision
    columncount = ThisWorkbook.Worksheets("2.Product-Group").Cells(ThisWorkbook.Worksheets("2.Product-Group").Rows.Count, "F").End(xlUp).Row 'get the last used row
    For i = 3 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Product Revision"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 6
            GoTo Message
        End If
    Next
    
    'adicionar Requester Product Number
    'adicionar Requester Product Description
    'adicionar Requester Product Revision
    
    'Set column = Sheets("2.Product-Group").Range("J:J") 'Product Manufacturing Location
    'columncount = ThisWorkbook.Worksheets("2.Product-Group").Cells(ThisWorkbook.Worksheets("2.Product-Group").Rows.Count, "J").End(xlUp).Row 'get the last used row
    'For i = 3 To (columncount)
    '    If IsGoodAscii(column.Cells(i, 1)) = False Then
    '        field = "Product Manufacturing Location"
    '        errorfield = column.Cells(i, 1)
    '        GoTo Message
    '    End If
    'Next
    
    Set column = Sheets("2.Product-Group").Range("K:K") 'Mass
    columncount = ThisWorkbook.Worksheets("2.Product-Group").Cells(ThisWorkbook.Worksheets("2.Product-Group").Rows.Count, "H").End(xlUp).Row 'get the last used row
    For i = 3 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Mass"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 10
            GoTo Message
        End If
    Next
    
    'adicionar UoM
    
    '--------------------------------------------------------------------------------------------------
    
     
    tabs = "3.Product-Statement"
      
    columncount = ThisWorkbook.Worksheets("3.Product-Statement").Cells(ThisWorkbook.Worksheets("3.Product-Statement").Rows.Count, "I").End(xlUp).Row 'get the last used row
    columncount2 = ThisWorkbook.Worksheets("3.Product-Statement").Cells(ThisWorkbook.Worksheets("3.Product-Statement").Rows.Count, "J").End(xlUp).Row 'get the last used row
    columncount3 = ThisWorkbook.Worksheets("3.Product-Statement").Cells(ThisWorkbook.Worksheets("3.Product-Statement").Rows.Count, "A").End(xlUp).Row 'get the last used row
    columncount4 = ThisWorkbook.Worksheets("3.Product-Statement").Cells(ThisWorkbook.Worksheets("3.Product-Statement").Rows.Count, "D").End(xlUp).Row 'get the last used row
    columncount_max = WorksheetFunction.Max(columncount3, columncount4)
    
    'columncount_tab3 = columncount



    Set column = Sheets("3.Product-Statement").Range("A:A")
    For i = 4 To (columncount)
        If (column.Cells(i, 9) = "Yes") Or (column.Cells(i, 9) = "yes") Then
            query_answer1 = True
        End If
    Next
    
    
    For i = 4 To (columncount)
        If column.Cells(i, 9) <> "" Then
            If column.Cells(i, 1) = "" And column.Cells(i, 4) = "" Then
                row_number = i
                cell_row = i
                cell_column = 1
                GoTo Message7
                Exit Sub
            End If
        End If
    Next
    
    For i = 4 To (columncount2)
        If column.Cells(i, 10) <> "" Then
            If column.Cells(i, 1) = "" And column.Cells(i, 4) = "" Then
                row_number = i
                cell_row = i
                cell_column = 1
                GoTo Message7
                Exit Sub
            End If
        End If
    Next

    For i = 4 To (columncount_max)
            If column.Cells(i, 9) = "" Or column.Cells(i, 10) = "" Or column.Cells(i, 11) = "" Or column.Cells(i, 12) = "" Or column.Cells(i, 13) = "" Then
                row_number = i
                cell_row = i
                cell_column = 9
                GoTo Message9
                Exit Sub
            End If
    Next
    
    'Set column = Sheets("3.Product-Statement").Range("A:A") 'Requester Product Number
    'If (Application.WorksheetFunction.CountA(column) - 3) = 0 Then 'Requester Product Number - Check if there is at least one item.
    '    field = "Requester Product Number"
    '    GoTo Message3
    'End If
    
    
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Requester Product Number"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 1
            GoTo Message
        End If
    Next
    
    Set column = Sheets("3.Product-Statement").Range("B:B") 'Requester Product Description
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Requester Product Description"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 2
            GoTo Message
        End If
    Next
    
    Set column = Sheets("3.Product-Statement").Range("C:C") 'Requester Product Revision
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Requester Product Revision"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 3
            GoTo Message
        End If
    Next
    
    Set column = Sheets("3.Product-Statement").Range("D:D") 'Supplier Product Number or Products group ID - Check if there is at least one item.
    'If (Application.WorksheetFunction.CountA(column) - 2) = 0 Then
    '    field = "Supplier Product Number or Products group ID"
    '    GoTo Message3
    'End If
    
    For i = 4 To (columncount) 'Supplier Product Number or Products group ID
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Supplier Product Number or Products group ID"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 4
            GoTo Message
        End If
    Next
    
    'Set column = Sheets("3.Product-Statement").Range("E:E") 'Supplier Product Description - Check if there is at least one item.
    'If (Application.WorksheetFunction.CountA(column) - 1) = 0 Then
    '    field = "Supplier Product Description"
    '    GoTo Message3
    'End If
    
    Set column = Sheets("3.Product-Statement").Range("E:E") 'Supplier Product Description
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Supplier Product Description"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 5
            GoTo Message
        End If
    Next
    
    Set column = Sheets("3.Product-Statement").Range("F:F") 'Supplier Product Revision
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Supplier Product Revision"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 6
            GoTo Message
        End If
    Next
    
    Set column = Sheets("3.Product-Statement").Range("I:I") 'Product Statement Q1 - Check if there is at least one item.
    If (Application.WorksheetFunction.CountA(column) - 3) = 0 Then
        field = "Product Statement - Q1"
        cell_row = i
        cell_column = 9
        GoTo Message3
    End If
    
    Set column = Sheets("3.Product-Statement").Range("J:J")
    For i = 4 To (columncount2) 'If the answer is YES than it is expect to declare at least one product at tab5
        If (column.Cells(i, 1) = "Yes") Or (column.Cells(i, 1) = "yes") Then
            query_answer2 = True
        End If
    Next
    
    If (Application.WorksheetFunction.CountA(column) - 1) = 0 Then 'Product Statement Q2 - Check if there is at least one item.
        field = "Product Statement - Q2"
        cell_row = i
        cell_column = 10
        GoTo Message3
    End If
    
    Set column = Sheets("3.Product-Statement").Range("K:K") 'Product Statement Q3 - Check if there is at least one item.
    If (Application.WorksheetFunction.CountA(column) - 2) = 0 Then
        field = "Product Statement - Q3"
        cell_row = i
        cell_column = 11
        GoTo Message3
    End If
    
    Set column = Sheets("3.Product-Statement").Range("L:L") 'Product Statement Q4 - Check if there is at least one item.
    If (Application.WorksheetFunction.CountA(column) - 1) = 0 Then
        field = "Product Statement - Q4"
        cell_row = i
        cell_column = 12
        GoTo Message3
    End If

    Set column = Sheets("3.Product-Statement").Range("M:M") 'Product Statement Q5 - Check if there is at least one item.
    If (Application.WorksheetFunction.CountA(column) - 2) = 0 Then
        field = "Product Statement - Q5"
        cell_row = i
        cell_column = 13
        GoTo Message3
    End If


    Set column = Sheets("3.Product-Statement").Range("O:O") 'Comments (for information)
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Comments (for information)"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 15
            GoTo Message
        End If
    Next
    
    '--------------------------------------------------------------------------------------------------
    tabs = "4.Substance-in-Product"
    columncount = ThisWorkbook.Worksheets("4.Substance-in-Product").Cells(ThisWorkbook.Worksheets("4.Substance-in-Product").Rows.Count, "Z").End(xlUp).Row 'As the number of CAS always will be bigger or at least equal to any other fields, this a column parameter.
    Set column = Sheets("4.Substance-in-Product").Range("B:B") 'Product BOM Level
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Product BOM Level"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 2
            GoTo Message
        End If
    Next
    
    
    Set column = Sheets("4.Substance-in-Product").Range("C:C") 'Supplier Product Number
    'columncount_tab3 = ThisWorkbook.Worksheets("3.Product-Statement").Cells(ThisWorkbook.Worksheets("3.Product-Statement").Rows.Count, "I").End(xlUp).Row 'counts the number of answers to Q3
    
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Supplier Product Number or Product Group ID"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 3
            GoTo Message
        End If
    Next
    
    If ((Application.WorksheetFunction.CountA(column) - 1) = 0) And (query_answer1 = True) Then 'if answer to Q1 was 'YES' and no declaration is present
        cell_row = 4
        cell_column = 3
        GoTo Message8
    End If
    
    Set column = Sheets("4.Substance-in-Product").Range("D:D") 'Supplier Product Description
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Supplier Product Description"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 4
            GoTo Message
        End If
    Next
    
    Set column = Sheets("4.Substance-in-Product").Range("E:E") 'Supplier Product Revision
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Supplier Product Revision"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 5
            GoTo Message
        End If
    Next
    
    'Set column = Sheets("4.Substance-in-Product").Range("G:G") 'Manufacturing Site
    'For i = 4 To (columncount)
    '    If IsGoodAscii(column.Cells(i, 1)) = False Then
    '        field = "Manufacturing Site"
    '        errorfield = column.Cells(i, 1)
    '        GoTo Message
    '    End If
    'Next
    
    Set column = Sheets("4.Substance-in-Product").Range("K:K") '# of Instances
    For i = 4 To (columncount)
        If IsNumeric(column.Cells(i, 1)) = False And (Trim(column.Cells(i, 1)) <> "") Then
            field = "# of Instances"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 11
            GoTo Message2
        End If
    Next
    
    Set column = Sheets("4.Substance-in-Product").Range("M:M") 'Mass
    For i = 4 To (columncount)
        If IsNumeric(column.Cells(i, 1)) = False And (Trim(column.Cells(i, 1)) <> "") Then
            field = "Mass"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 13
            GoTo Message2
        End If
    Next
    
    Set column = Sheets("4.Substance-in-Product").Range("O:O") 'Mass Variation (+/- %)
    For i = 4 To (columncount)
        If IsNumeric(column.Cells(i, 1)) = False And (Trim(column.Cells(i, 1)) <> "") Then
            field = "Mass Variation (+/- %)"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 15
            GoTo Message2
        End If
    Next
    
    Set column = Sheets("4.Substance-in-Product").Range("Q:Q") 'Standard Material Number / symbol(else "Unknown")
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Standard Material Number / symbol"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 17
            GoTo Message
        End If
    Next
    
    Set column = Sheets("4.Substance-in-Product").Range("R:R") 'Material Name /  Formulation Trade Name / Description
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Material Name /  Formulation Trade Name / Description"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 18
            GoTo Message
        End If
    Next
   
    'Set column = Sheets("4.Substance-in-Product").Range("S:S") 'Manufacturer
    'For i = 4 To (columncount)
    '    If IsGoodAscii(column.Cells(i, 1)) = False Then
    '        field = "Manufacturer"
    '        errorfield = column.Cells(i, 1)
    '        GoTo Message
    '    End If
    'Next
    
    Set column = Sheets("4.Substance-in-Product").Range("T:T") 'Material Use Description
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Material Use Description"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 20
            GoTo Message
        End If
    Next
   
   Set column = Sheets("4.Substance-in-Product").Range("U:U") 'Specification / Standard
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Specification / Standard"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 21
            GoTo Message
        End If
    Next
   
    Set column = Sheets("4.Substance-in-Product").Range("V:V") 'Mass
    For i = 4 To (columncount)
        If IsNumeric(column.Cells(i, 1)) = False And (Trim(column.Cells(i, 1)) <> "") Then
            field = "Mass"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 22
            GoTo Message2
        End If
    Next
    
    Set column = Sheets("4.Substance-in-Product").Range("AA:AA") 'Substance Id. - EC Number
     For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "EC Number"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 27
            GoTo Message
        End If
    Next
    
    'Set column = Sheets("4.Substance-in-Product").Range("AC:AC") 'Substance Id. - Name
    ' For i = 4 To (columncount)
    '    If IsGoodAscii(column.Cells(i, 1)) = False Then
    '        field = "Substance Id. - Name"
    '        errorfield = column.Cells(i, 1)
    '        GoTo Message
    '    End If
    'Next
    
    Set column = Sheets("4.Substance-in-Product").Range("AD:AD") 'Synonym
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Synonym"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 30
            GoTo Message
        End If
    Next
    
    Set column = Sheets("4.Substance-in-Product").Range("AF:AF") 'Substance Mass - Minimum
    For i = 4 To (columncount)
        If (IsNumeric(column.Cells(i, 1))) = False And (Trim(column.Cells(i, 1)) <> "") Then
            field = "Substance Mass - Minimum"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 32
            GoTo Message2
        End If
    Next
    
    Set column = Sheets("4.Substance-in-Product").Range("AG:AG") 'Substance Mass - Maximum
    For i = 4 To (columncount)
        If IsNumeric(column.Cells(i, 1)) = False And (Trim(column.Cells(i, 1)) <> "") Then
            field = "Substance Mass - Maximum"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 33
            GoTo Message2
        End If
    Next
    
    Set column = Sheets("4.Substance-in-Product").Range("AH:AH") 'Substance Mass - Nominal
    For i = 4 To (columncount)
        If IsNumeric(column.Cells(i, 1)) = False And (Trim(column.Cells(i, 1)) <> "") Then
            field = "Substance Mass - Nominal"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 34
            GoTo Message2
        End If
    Next
    
    '--------------------------------------------------------------------------------------------------
    tabs = "5.Substance-in-Process"
    columncount = ThisWorkbook.Worksheets("5.Substance-in-Process").Cells(ThisWorkbook.Worksheets("5.Substance-in-Process").Rows.Count, "N").End(xlUp).Row 'As the number of CAS always will be bigger or at least equal to any other fields, this a column parameter.
    columncount2 = ThisWorkbook.Worksheets("5.Substance-in-Process").Cells(ThisWorkbook.Worksheets("5.Substance-in-Process").Rows.Count, "A").End(xlUp).Row
    columncount3 = ThisWorkbook.Worksheets("5.Substance-in-Process").Cells(ThisWorkbook.Worksheets("5.Substance-in-Process").Rows.Count, "G").End(xlUp).Row
    columncount_max = WorksheetFunction.Max(columncount2, columncount3)
    
    Set column = Sheets("5.Substance-in-Process").Range("A:A") 'Supplier Product Number
    'columncount_tab3 = ThisWorkbook.Worksheets("3.Product-Statement").Cells(ThisWorkbook.Worksheets("3.Product-Statement").Rows.Count, "I").End(xlUp).Row 'counts the number of answers to Q3
    
    For i = 4 To (columncount_max)
        If column.Cells(i, 1) <> "" Then
            If column.Cells(i, 7) = "" Then
                row_number = i
                errorfield = column.Cells(i, 1)
                cell_row = i
                cell_column = 1
                GoTo Message10
                Exit Sub
            End If
        End If
    Next
    
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Supplier Product Number or Product Group ID"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 1
            GoTo Message
        End If
    Next
    
    If (Application.WorksheetFunction.CountA(column) - 2) = 0 And (query_answer2 = True) Then  'if answer to Q2 was 'YES' and no declaration is present
        ThisWorkbook.Sheets(tabs).Activate
        cell_row = 4
        cell_column = 1
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("The answer for Q2 at tab 3.Product-Statement was 'Yes'" & vbNewLine & _
        "and no Substance in process at tab 5 was declared."), , ("Warning")
        tabs = "7.Supplier-Acceptance"
        ThisWorkbook.Sheets(tabs).Activate
        tabs = "5.Substance-in-Process"
    End If
    
    Set column = Sheets("5.Substance-in-Process").Range("B:B") 'Supplier Product Description
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Supplier Product Name/Description"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 2
            GoTo Message
        End If
    Next
    
    Set column = Sheets("5.Substance-in-Process").Range("C:C") 'Supplier Product Revision
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Supplier Product Revision"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 3
            GoTo Message
        End If
    Next
    
    Set column = Sheets("5.Substance-in-Process").Range("E:E") 'Process Name
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Process Name"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 5
            GoTo Message
        End If
    Next
    
    Set column = Sheets("5.Substance-in-Process").Range("F:F") 'Process Classification
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Process Classification"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 6
            GoTo Message
        End If
    Next
    
    Set column = Sheets("5.Substance-in-Process").Range("I:I") 'Standard Material Number/Symbol
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Standard Material Number/Symbol"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 9
            GoTo Message
        End If
    Next
    
    Set column = Sheets("5.Substance-in-Process").Range("J:J") 'Material Name/Formulation trade name/Description
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Material Name/Formulation Trade Name/Description"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 10
            GoTo Message
        End If
    Next
    
    'Set column = Sheets("5.Substance-in-Process").Range("K:K") 'Manufacturer
    'For i = 4 To (columncount)
    '    If IsGoodAscii(column.Cells(i, 1)) = False Then
    '        field = "Manufacturer"
    '        errorfield = column.Cells(i, 1)
    '        GoTo Message
    '    End If
    'Next
    
    Set column = Sheets("5.Substance-in-Process").Range("M:M") 'Material Specification/Standard
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Material Specification/Standard"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 13
            GoTo Message
        End If
    Next
    
    Set column = Sheets("5.Substance-in-Process").Range("O:O") 'Substance Id. - EC Number
     For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "EC Number"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 15
            GoTo Message
        End If
    Next
    
    'Set column = Sheets("5.Substance-in-Process").Range("Q:Q") 'Substance Id. - Name
    ' For i = 4 To (columncount)
    '    If IsGoodAscii(column.Cells(i, 1)) = False Then
    '        field = "Substance Id. - Name"
    '        errorfield = column.Cells(i, 1)
    '        GoTo Message
    '    End If
    'Next
    
    Set column = Sheets("5.Substance-in-Process").Range("R:R")  'Synonym
    For i = 4 To (columncount)
        If IsGoodAscii(column.Cells(i, 1)) = False Then
            field = "Synonym"
            errorfield = column.Cells(i, 1)
            cell_row = i
            cell_column = 18
            GoTo Message
        End If
    Next
    '--------------------------------------------------------------------------------------------------
    
    tabs = "7.Supplier-Acceptance"
    
    'If IsGoodAscii(Worksheets("7.Supplier-Acceptance").Cells(7, 3)) = False Then 'Authorizer Company Name
    '    field = "Authorizer Company Name"
    '    errorfield = Worksheets("7.Supplier-Acceptance").Cells(7, 3)
    '    GoTo Messagead
    'End If
    
    If Trim(Worksheets("7.Supplier-Acceptance").Cells(5, 3)) = "" Then 'Authorizer Company Name
        field = "Authorizer Company Name"
        cell_row = 5
        cell_column = 3
        GoTo Message3
    End If
    
    If Trim(Worksheets("7.Supplier-Acceptance").Cells(5, 7)) = "" Then 'Authorizer Name
        field = "Authorizer Name"
        cell_row = 5
        cell_column = 7
        GoTo Message3
    End If
    
    If Trim(Worksheets("7.Supplier-Acceptance").Cells(6, 7)) = "" Then 'Authorizer Phone
        field = "Authorizer Phone"
        cell_row = 6
        cell_column = 7
        GoTo Message3
    End If
    
    strPhone = Worksheets("7.Supplier-Acceptance").Cells(6, 7) 'Check if is a valid phone number
    For i = 1 To Len(strPhone)
        If (Mid(strPhone, i, 1)) = "+" Or (Mid(strPhone, i, 1)) = "(" Or (Mid(strPhone, i, 1)) = ")" Or (Mid(strPhone, i, 1)) = "-" Or (Mid(strPhone, i, 1)) = " " Then
            'MsgBox ("(, ( ou +")
        Else
            If Not (IsNumeric(Mid(strPhone, i, 1))) Then
                field = "Authorizer Phone"
                charphone = Mid(strPhone, i, 1)
                cell_row = 6
                cell_column = 7
                GoTo Message12
            End If
        End If
    Next
 
    
    If IsGoodAscii(Worksheets("7.Supplier-Acceptance").Cells(6, 7)) = False Then 'Authorizer Phone
        field = "Authorizer Phone"
        errorfield = Worksheets("7.Supplier-Acceptance").Cells(6, 7)
        cell_row = 6
        cell_column = 7
        GoTo Message
    End If
    
    'If Trim(Worksheets("7.Supplier-Acceptance").Cells(7, 7)) = "" Then 'Authorizer Email
    '    field = "Authorizer Company Name"
    '    GoTo Message3
    'End If
    
    If Not IsEmailValid(Worksheets("7.Supplier-Acceptance").Cells(7, 7)) Then 'Authorizer Email
        field = "Requester Contact - Requester E-mail"
        cell_row = 7
        cell_column = 7
        GoTo Message4
    End If
    
    'If Trim(Worksheets("7.Supplier-Acceptance").Cells(8, 7)) = "" Then 'Authorizer Title
    '    field = "Authorizer Title"
    '    GoTo Message3
    'End If
    
    If Trim(Worksheets("7.Supplier-Acceptance").Cells(17, 3)) = "" Then 'Authorizer Acceptance
        field = "Authorizer Acceptance"
        cell_row = 17
        cell_column = 3
        GoTo Message3
    End If
    
     If (Worksheets("7.Supplier-Acceptance").Cells(17, 3)) = "No" Or (Worksheets("7.Supplier-Acceptance").Cells(17, 3)) = "False" Then  'Authorizer Acceptance
        field = Worksheets("7.Supplier-Acceptance").Cells(17, 3)
        cell_row = 17
        cell_column = 3
        MsgBox ("The answer for Authorizer Acceptance was '" & field & "'." & vbNewLine & _
        "Please, confirm it before send the declaration."), , ("Warning")
    End If
    
    If Trim(Worksheets("7.Supplier-Acceptance").Cells(17, 7)) = "" Then 'Statement Type
        field = "Statement Type"
        cell_row = 17
        cell_column = 7
        GoTo Message11
    End If
    
    If Trim(Worksheets("7.Supplier-Acceptance").Cells(19, 7)) = "" Then 'Authorization Statement
        field = "Authorization Statement"
        cell_row = 19
        cell_column = 7
        GoTo Message3
    End If
    
    'If IsGoodAscii(Worksheets("7.Supplier-Acceptance").Cells(13, 3)) = False Then 'Zip Code
    '    field = "Zip Code"
    '    errorfield = Worksheets("7.Supplier-Acceptance").Cells(13, 3)
    '    GoTo Message
    'End If
    
    If Trim(Worksheets("7.Supplier-Acceptance").Cells(21, 3)) = "" Or _
    IsDate(Worksheets("7.Supplier-Acceptance").Cells(21, 3)) = False Then   'Authorizer Signed Date
        field = "Authorizer Signed Date"
        cell_row = 21
        cell_column = 3
        GoTo Message5
    End If
    


    MsgBox ("Data Check OK"), , ("Data check have been finished")
    CheckButton.BackColor = &HC000&
    ThisWorkbook.Sheets(tabs).Activate
    Range("A1").Select
    'Export_Button.Activate
    Exit Sub
    
    
Message:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("Please, review the field '" & field & "'" & vbNewLine & _
        "at the '" & tabs & "' tab:" & vbNewLine & vbNewLine & _
        errorfield & vbNewLine & vbNewLine & _
        "It is not allowed accented and some special characters."), , ("Error")
        CheckButton.BackColor = &H8000000F
        
      
        
        Exit Sub
    
Message2:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("Please, review the field '" & field & "'" & vbNewLine & _
        "at the '" & tabs & "' tab:" & vbNewLine & vbNewLine & _
        errorfield & vbNewLine & vbNewLine & _
        "It shall be a numeric value."), , ("Error")
        CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        Exit Sub

Message3:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("Please, review the field '" & field & "'" & vbNewLine & _
        "at the '" & tabs & "' tab:" & vbNewLine & vbNewLine & _
        "It is a mandatory field."), , ("Error")
        CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        Exit Sub

Message4:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("Please, review the field '" & field & "'" & vbNewLine & _
        "at the '" & tabs & "' tab:" & vbNewLine & vbNewLine & _
        "It is not a valid e-mail address."), , ("Error")
        CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        Exit Sub
        
Message5:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("Please, review the field '" & field & "'" & vbNewLine & _
        "at the '" & tabs & "' tab:" & vbNewLine & vbNewLine & _
        "It is not a valid date."), , ("Error")
        CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        Exit Sub
        
'Message6:
        'ThisWorkbook.Sheets(tabs).Activate
        
         'MsgBox ("Warning: the answer for Q2 at tab 3.Product-Statement was 'Yes'" & vbNewLine & _
        "and no Substance in process at tab 5 was declared."), , ("Warning")
              
        'CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        
Message7:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("Please, fill the field 'Requester Product Number'" & vbNewLine & _
        "or 'Supplier Product Number or Products Group ID'" & vbNewLine & _
        "at the row '" & row_number & "'" & " at the tab '" & tabs & "'"), , ("Error")
        CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        Exit Sub
        
Message8:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("The answer for Q1 at tab 3.Product-Statement was 'Yes':" & vbNewLine & vbNewLine & _
        "It is necessary to declare at least one product at the tab #4."), , ("Error")
        CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        Exit Sub
        
Message9:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("Please, answer all questions (Q1-Q5) for the 'Requester" & vbNewLine & _
        "Product Number' or 'Supplier Product Number or Products" & vbNewLine & _
        "Group ID' at the row '" & row_number & "'" & " at the tab '" & tabs & "'"), , ("Error")
        CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        Exit Sub

Message10:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("Please, fill the field 'Process Stage' for the 'Supplier Product Number" & vbNewLine & _
        " or Product Group ID': " & errorfield & " at the row " & row_number & "'" & " at the tab '" & tabs & "'"), , ("Error")
        CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        Exit Sub
        
Message11:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("Please, choose the Statement Type at the tab '" & tabs & "'"), , ("Error")
        CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        Exit Sub
        
Message12:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("Please, review the field '" & field & "'" & vbNewLine & _
        "at the '" & tabs & "' tab:" & vbNewLine & vbNewLine & _
        "It is not a valid phone number due to this char ' " & charphone & " '"), , ("Error")
        CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        Exit Sub
        
        

End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
    
    Dim Ident As Range
    Dim Stat As Range
    Dim Answer As String
    Dim tabs As String
    Dim cell_row As Integer
    Dim cell_column As Integer
    CheckButton.BackColor = &H8000000F
    
    
    cell_row = 1
    cell_column = 1
    
    Set Ident = Range("C3") 'MACRO PARAMETER: 'Cell of "Identical to Supplier Contact Information" answer
    tabs = "1.Requester-Supplier"
    
    If Not Application.Intersect(Ident, Range(Target.Address)) Is Nothing Then 'Script starts if the answer has changed
        Answer = Cells(3, 3)
            If Answer = "Yes" Or Answer = "yes" Then
                
                Cells(6, 3) = ThisWorkbook.Sheets("1.Requester-Supplier").Range("C16").Value 'Authorizer Company ID Type
                Cells(7, 3) = ThisWorkbook.Sheets("1.Requester-Supplier").Range("C17").Value 'Authorizer Company ID Number
                Cells(9, 3) = ThisWorkbook.Sheets("1.Requester-Supplier").Range("C19").Value 'Authorizer Address - Street
                Cells(10, 3) = ThisWorkbook.Sheets("1.Requester-Supplier").Range("C20").Value 'Authorizer Address - City
                Cells(11, 3) = ThisWorkbook.Sheets("1.Requester-Supplier").Range("C21").Value 'Authorizer Address - State
                Cells(12, 3) = ThisWorkbook.Sheets("1.Requester-Supplier").Range("C22").Value 'Authorizer Address - Country
                Cells(13, 3) = ThisWorkbook.Sheets("1.Requester-Supplier").Range("C23").Value 'Authorizer Address - ZIP
                Cells(8, 7) = ThisWorkbook.Sheets("1.Requester-Supplier").Range("G18").Value 'Authorizer Title
                
                If Trim(Worksheets("1.Requester-Supplier").Cells(15, 3)) = "" Then 'Supplier Contact - Supplier Company Name
                    field = "Supplier Contact - Supplier Company Name"
                    Cells(3, 3) = ""
                    cell_row = 15
                    cell_column = 3
                    GoTo Message3
                End If
                
                Cells(5, 3) = ThisWorkbook.Sheets("1.Requester-Supplier").Range("C15").Value 'Authorizer Company Name
                
                
                If Trim(Worksheets("1.Requester-Supplier").Cells(15, 7)) = "" Then 'Supplier Contact - Supplier Contact Name
                    field = "Supplier Contact - Supplier Contact Name"
                    Cells(3, 3) = ""
                    cell_row = 15
                    cell_column = 7
                    GoTo Message3
                End If
                
                Cells(5, 7) = ThisWorkbook.Sheets("1.Requester-Supplier").Range("G15").Value 'Authorizer Contact Name
                
                If Trim(Worksheets("1.Requester-Supplier").Cells(16, 7)) = "" Then 'Supplier Contact - Supplier Contact Phone
                    field = "Supplier Contact - Supplier Contact Phone"
                    Cells(3, 3) = ""
                    cell_row = 16
                    cell_column = 7
                    GoTo Message3
                End If
                
                strPhone = Worksheets("1.Requester-Supplier").Cells(16, 7) 'Check if is a valid phone number
                For i = 1 To Len(strPhone)
                    If (Mid(strPhone, i, 1)) = "+" Or (Mid(strPhone, i, 1)) = "(" Or (Mid(strPhone, i, 1)) = ")" Or (Mid(strPhone, i, 1)) = "-" Or (Mid(strPhone, i, 1)) = " " Then
                        'MsgBox ("(, ) ou +")
                    Else
                        If Not (IsNumeric(Mid(strPhone, i, 1))) Then
                            field = "Supplier Contact - Supplier Contact Phone"
                            charphone = Mid(strPhone, i, 1)
                            cell_row = 16
                            cell_column = 7
                            GoTo Message12
                        End If
                    End If
                Next
                
                If IsGoodAscii(Worksheets("1.Requester-Supplier").Cells(16, 7)) = False Then 'Supplier Contact Phone
                    field = "Supplier Contact Phone"
                    errorfield = Worksheets("1.Requester-Supplier").Cells(16, 7)
                    Cells(3, 3) = ""
                    cell_row = 16
                    cell_column = 7
                    GoTo Message
                End If
                
                Cells(6, 7) = ThisWorkbook.Sheets("1.Requester-Supplier").Range("G16").Value 'Authorizer Phone
                
                If Trim(Worksheets("1.Requester-Supplier").Cells(17, 7)) = "" Then 'Supplier Contact - Email
                    field = "Supplier Contact - Email"
                    Cells(3, 3) = ""
                    cell_row = 17
                    cell_column = 7
                    GoTo Message3
                End If
    
                If Not IsEmailValid(Worksheets("1.Requester-Supplier").Cells(17, 7)) Then 'Supplier Contact - Email
                    field = "Supplier Contact - E-mail"
                    Cells(3, 3) = ""
                    cell_row = 17
                    cell_column = 7
                    GoTo Message4
                End If
                
                Cells(7, 7) = ThisWorkbook.Sheets("1.Requester-Supplier").Range("G17").Value 'Authorizer Email
                
            Else
                Cells(5, 3) = ""
                Cells(6, 3) = ""
                Cells(7, 3) = ""
                Cells(9, 3) = ""
                Cells(10, 3) = ""
                Cells(11, 3) = ""
                Cells(12, 3) = ""
                Cells(13, 3) = ""
                Cells(5, 7) = ""
                Cells(6, 7) = ""
                Cells(7, 7) = ""
                Cells(8, 7) = ""
            End If
    End If

    Set Stat = Range("G17") 'MACRO PARAMETER: 'Cell of "Statament Type" answer
    If Not Application.Intersect(Stat, Range(Target.Address)) Is Nothing Then 'Script starts if the answer has changed
    Answer = Cells(17, 7)
        
        If Answer = "Default" Then
            Cells(19, 7) = "I confirm that this declaration has been completed to the best of our knowledge acting in due diligence."
        End If
        
        If Answer = "Custom" Then
            Cells(19, 7) = ""
        End If
        
        If Answer = "" Then
            Cells(19, 7) = ""
        End If
        
    End If

Exit Sub
    
Message:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("Please, review the field '" & field & "'" & vbNewLine & _
        "at the '" & tabs & "' tab:" & vbNewLine & vbNewLine & _
        errorfield & vbNewLine & vbNewLine & _
        "It is not allowed accented and some special characters." & vbNewLine & _
        "After this, answer 'Yes' again" & vbNewLine), , ("Error")
        CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        Exit Sub

Message3:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("Please, review the field '" & field & "'" & vbNewLine & _
        "at the '" & tabs & "' tab:" & vbNewLine & vbNewLine & _
        "It is a mandatory field." & vbNewLine & vbNewLine & _
        "After this, answer 'Yes' again"), , ("Error")
        CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        Exit Sub

Message4:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("Please, review the field '" & field & "'" & vbNewLine & _
        "at the '" & tabs & "' tab:" & vbNewLine & vbNewLine & _
        "It is not a valid e-mail address." & vbNewLine & vbNewLine & _
        "After this, answer 'Yes' again"), , ("Error")
        CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        Exit Sub
        
Message12:
        ThisWorkbook.Sheets(tabs).Activate
        ActiveSheet.Cells(cell_row, cell_column).Select
        MsgBox ("Please, review the field '" & field & "'" & vbNewLine & _
        "at the '" & tabs & "' tab:" & vbNewLine & vbNewLine & _
        "It is not a valid phone number due to this char ' " & charphone & " '"), , ("Error")
        CheckButton.BackColor = &H8000000F
        'Range("A1").Select
        Exit Sub


    
    
    
End Sub


Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton21, 1, 0, MSForms, CommandButton2"
Private Sub CommandButton21_Click()

'*
'* Insert file(s) as icon(s) on the sheet
'* Select an empty cell and call the macro,
'*  the icons of the selected files will be distributed vertically.
'*
    Const csPDFIconFile As String = "pdf.ico"
    Const csExcelIconFile As String = "xls.ico"
    Const csWordIconFile As String = "doc.ico"

    Dim vSelectedFile As Variant
    Dim lRow As Long
    Dim sFileExt As String, sIconFile As String, sFileName As String
    Dim oFile As Object

    With Application.FileDialog(msoFileDialogFilePicker)
        .AllowMultiSelect = True
        .Filters.Add "My Files", "*.pdf; *.doc*; *.xls*"
        If .Show = -1 Then
            For Each vSelectedFile In .SelectedItems
                sFileExt = Right(vSelectedFile, Len(vSelectedFile) - InStrRev(vSelectedFile, "."))
                Select Case LCase(Left(sFileExt, 3))
                    Case "pdf"
                        sIconFile = ThisWorkbook.Path + "\" + csPDFIconFile

                    Case "xls"
                        sIconFile = ThisWorkbook.Path + "\" + csExcelIconFile

                    Case "doc"
                        sIconFile = ThisWorkbook.Path + "\" + csWordIconFile

                    Case Else
                        ' sIconFile = Default icon, if required
                End Select
                '*
                '* File name for IconLabel
                sFileName = Mid(vSelectedFile, InStrRev(vSelectedFile, "\") + 1)
                sFileName = Mid(sFileName, 1, Len(sFileName) - Len(sFileExt) - 1)
                '*
                '* Insert selected file
                ActiveSheet.Unprotect
                Set oFile = ActiveSheet.OLEObjects.Add(FileName:=vSelectedFile, _
                    Link:=False, _
                    DisplayAsIcon:=True, _
                    IconFileName:=sIconFile, _
                    IconIndex:=0, _
                    IconLabel:=sFileName)
                '*
                '* Advance to the cell below the inserted icon
                ActiveSheet.Protect DrawingObjects:=False, contents:=True, Scenarios:=True, AllowFormattingRows:=True
                lRow = 1
                Do
                    If ActiveCell.Offset(lRow).Top > oFile.Top + oFile.Height Then
                        ActiveCell.Offset(lRow).Select
                        Exit Do
                    End If
                    lRow = lRow + 1
                Loop
            Next vSelectedFile
        End If
    End With


End Sub

Private Sub CommandButton2_Click()
Rows(41).EntireRow.Delete
End Sub

Private Sub CommandButton3_Click()
Rows(110).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton4_Click()
Rows(109).EntireRow.Delete
End Sub

Private Sub CommandButton5_Click()
Rows(122).EntireRow.Delete
End Sub

Private Sub CommandButton6_Click()
Rows(122).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton7_Click()
Rows(107).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A107]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Process Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG AD-DSL List
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Private Sub CommandButton8_Click()
Rows(79).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A78]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG AD-DSL List
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Private Sub CommandButton9_Click()
Rows(123).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A120]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG AD-DSL List
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Private Sub OptionButton1_Click()

End Sub

Private Sub OptionButton2_Click()

End Sub

Private Sub RequestorTerms_Change()

End Sub



Private Sub DeleteLastRowSubstanceInPart_Click()
Rows(96).EntireRow.Delete
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub


Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub ImportData()

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Substances List'!A1]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please choose a IAEG AD-DSL File to Import (Download from IAEG.com)", _
FileFilter:="IAEG AD-DSL File *.xlsx (*.xlsx),")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
wb2.Sheets("Intro & Terms").Delete
wb2.Sheets("AD-DSL Groups").Delete
wb2.Sheets("Revision Log").Delete
Application.DisplayAlerts = False

'#### Copies required IAEG AD-DSL List
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
        End With
    Next Sheet

End If

    wb2.Close

End Sub


Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub DeleteARow_Click()

End Sub

Private Sub AddARowInProduct_Click()
Rows(96).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton1_Click()
Rows(70).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton10_Click()

'*
'* Insert file(s) as icon(s) on the sheet
'* Select an empty cell and call the macro,
'*  the icons of the selected files will be distributed vertically.
'*
    Const csPDFIconFile As String = "pdf.ico"
    Const csExcelIconFile As String = "xls.ico"
    Const csWordIconFile As String = "doc.ico"

    Dim vSelectedFile As Variant
    Dim lRow As Long
    Dim sFileExt As String, sIconFile As String, sFileName As String
    Dim oFile As Object

    With Application.FileDialog(msoFileDialogFilePicker)
        .AllowMultiSelect = True
        .Filters.Add "My Files", "*.pdf; *.doc*; *.xls*"
        If .Show = -1 Then
            For Each vSelectedFile In .SelectedItems
                sFileExt = Right(vSelectedFile, Len(vSelectedFile) - InStrRev(vSelectedFile, "."))
                Select Case LCase(Left(sFileExt, 3))
                    Case "pdf"
                        sIconFile = ThisWorkbook.Path + "\" + csPDFIconFile

                    Case "xls"
                        sIconFile = ThisWorkbook.Path + "\" + csExcelIconFile

                    Case "doc"
                        sIconFile = ThisWorkbook.Path + "\" + csWordIconFile

                    Case Else
                        ' sIconFile = Default icon, if required
                End Select
                '*
                '* File name for IconLabel
                sFileName = Mid(vSelectedFile, InStrRev(vSelectedFile, "\") + 1)
                sFileName = Mid(sFileName, 1, Len(sFileName) - Len(sFileExt) - 1)
                '*
                '* Insert selected file
                Set oFile = ActiveSheet.OLEObjects.Add(FileName:=vSelectedFile, _
                    Link:=False, _
                    DisplayAsIcon:=True, _
                    IconFileName:=sIconFile, _
                    IconIndex:=0, _
                    IconLabel:=sFileName)
                '*
                '* Advance to the cell below the inserted icon
                lRow = 1
                Do
                    If ActiveCell.Offset(lRow).Top > oFile.Top + oFile.Height Then
                        ActiveCell.Offset(lRow).Select
                        Exit Do
                    End If
                    lRow = lRow + 1
                Loop
            Next vSelectedFile
        End If
    End With



End Sub

Private Sub CommandButton2_Click()
Rows(70).EntireRow.Delete
End Sub

Private Sub CommandButton3_Click()

If CommandButton3.Caption = "Hide Optional Sections in Substance Declarations" Then
  Worksheets("Substance-In-Part").Columns("L:R").Hidden = True
  Worksheets("Substance-In-Process").Columns("F:J").Hidden = True
''  Worksheets("Substance-In-Process").Columns("S").Hidden = True
  'Worksheets("Substance-In-Maintenance").Visible = False
  'Sheets("Substance-In-Process").Range("G:O").EntireColumn.Hidden = True
  Sheets("Substance-In-Maintenance").Range("D:F").EntireColumn.Hidden = True
  CommandButton3.Caption = "Show Optional Sections in Substance Declarations"
Else
  Worksheets("Substance-In-Part").Columns("L:R").Hidden = False
  Worksheets("Substance-In-Process").Columns("F:J").Hidden = False
  Sheets("Substance-In-Maintenance").Range("D:F").EntireColumn.Hidden = False
 ' Worksheets("Substance-In-Process").Columns("F:J").Hidden = False
  'Worksheets("Substance-In-Maintenance").Visible = True
  'Sheets("Substance-In-Process").Range("G:O").EntireColumn.Hidden = False
 ' Sheets("Substance-In-Maintenance").Range("D:F").EntireColumn.Hidden = False
  CommandButton3.Caption = "Hide Optional Sections in Substance Declarations"
End If
End Sub

Private Sub CommandButton4_Click()





End Sub

Private Sub CommandButton5_Click()
Rows(122).EntireRow.Delete
End Sub

Private Sub CommandButton6_Click()
Rows(122).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton7_Click()
Rows(107).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A107]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Process Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG AD-DSL List
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Private Sub CommandButton8_Click()
Rows(79).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A78]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG AD-DSL List
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Private Sub CommandButton9_Click()
Rows(123).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A120]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG AD-DSL List
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Private Sub OptionButton1_Click()

End Sub

Private Sub OptionButton2_Click()

End Sub

Private Sub RequestorTerms_Change()

End Sub



Private Sub DeleteLastRowSubstanceInPart_Click()
ows(96).EntireRow.Delete
End Sub


Private Sub Worksheet_Change(ByVal Target As Range)
    
    Application.EnableEvents = False
    On Error GoTo EH
    Dim mode As Range
    Dim Answer As String
    Dim question As Integer
    Application.Worksheets("7.Supplier-Acceptance").CheckButton.BackColor = &H8000000F
    
    Set mode = Range("G13") 'MACRO PARAMETER: 'Cell of "Mode: Request or Distribute" answer
    
    If Not Application.Intersect(mode, Range(Target.Address)) Is Nothing Then 'Script starts if the answer has changed
        Answer = Cells(13, 7)
            If Answer = "Request/Reply" Then
               
               Expand_All
                
            Else
                If Answer = "Distribute" Then
                    question = MsgBox("Distribute mode cannot contain Requester Contact Data. Do you want to empty it?", vbYesNo + vbQuestion, "Empty Requester Contact Data?")
                        If question = vbYes Then
                            Cells(3, 3) = ""
                            Cells(4, 3) = ""
                            Cells(5, 3) = ""
                            Cells(7, 3) = ""
                            Cells(8, 3) = ""
                            Cells(9, 3) = ""
                            Cells(10, 3) = ""
                            Cells(11, 3) = ""
                            Cells(3, 7) = ""
                            Cells(4, 7) = ""
                            Cells(5, 7) = ""
                            Cells(6, 7) = ""
                            Cells(7, 7) = ""
                            Cells(9, 7) = ""
                            Cells(10, 7) = ""
                            Cells(11, 7) = ""
                            Collapse_All
                        Else
                            Cells(13, 7) = "Request/Reply"
                            Expand_All
                        End If
                Else
                    Cells(13, 7) = "Request/Reply"
                    Expand_All
                End If
            
            End If
    End If

EH:
Application.EnableEvents = True

End Sub
Sub Collapse_All()
    ActiveSheet.Outline.ShowLevels RowLevels:=1, ColumnLevels:=1
End Sub

Sub Expand_All()
    ActiveSheet.Outline.ShowLevels RowLevels:=2, ColumnLevels:=2
End Sub


Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public RowsCount As Long ' Variable to track number of rows used in sheet


Private Sub DeleteARow_Click()

End Sub

Private Sub AddARowInProduct_Click()
Rows(96).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton1_Click()
Rows(30).EntireRow.Delete
End Sub

Private Sub CommandButton10_Click()

'*
'* Insert file(s) as icon(s) on the sheet
'* Select an empty cell and call the macro,
'*  the icons of the selected files will be distributed vertically.
'*
    Const csPDFIconFile As String = "pdf.ico"
    Const csExcelIconFile As String = "xls.ico"
    Const csWordIconFile As String = "doc.ico"

    Dim vSelectedFile As Variant
    Dim lRow As Long
    Dim sFileExt As String, sIconFile As String, sFileName As String
    Dim oFile As Object

    With Application.FileDialog(msoFileDialogFilePicker)
        .AllowMultiSelect = True
        .Filters.Add "My Files", "*.pdf; *.doc*; *.xls*"
        If .Show = -1 Then
            For Each vSelectedFile In .SelectedItems
                sFileExt = Right(vSelectedFile, Len(vSelectedFile) - InStrRev(vSelectedFile, "."))
                Select Case LCase(Left(sFileExt, 3))
                    Case "pdf"
                        sIconFile = ThisWorkbook.Path + "\" + csPDFIconFile

                    Case "xls"
                        sIconFile = ThisWorkbook.Path + "\" + csExcelIconFile

                    Case "doc"
                        sIconFile = ThisWorkbook.Path + "\" + csWordIconFile

                    Case Else
                        ' sIconFile = Default icon, if required
                End Select
                '*
                '* File name for IconLabel
                sFileName = Mid(vSelectedFile, InStrRev(vSelectedFile, "\") + 1)
                sFileName = Mid(sFileName, 1, Len(sFileName) - Len(sFileExt) - 1)
                '*
                '* Insert selected file
                Set oFile = ActiveSheet.OLEObjects.Add(FileName:=vSelectedFile, _
                    Link:=False, _
                    DisplayAsIcon:=True, _
                    IconFileName:=sIconFile, _
                    IconIndex:=0, _
                    IconLabel:=sFileName)
                '*
                '* Advance to the cell below the inserted icon
                lRow = 1
                Do
                    If ActiveCell.Offset(lRow).Top > oFile.Top + oFile.Height Then
                        ActiveCell.Offset(lRow).Select
                        Exit Do
                    End If
                    lRow = lRow + 1
                Loop
            Next vSelectedFile
        End If
    End With



End Sub

Private Sub CommandButton2_Click()
Rows(30).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton3_Click()
Rows(110).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton4_Click()
Rows(109).EntireRow.Delete
End Sub

Private Sub CommandButton5_Click()
Rows(122).EntireRow.Delete
End Sub

Private Sub CommandButton6_Click()
Rows(122).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton7_Click()
Rows(107).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A107]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Process Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG Substances List (AD-DSL)
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Private Sub CommandButton8_Click()
Rows(79).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A78]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG Substances List (AD-DSL)
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Private Sub CommandButton9_Click()
Rows(123).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A120]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG Substances List (AD-DSL)
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Private Sub OptionButton1_Click()

End Sub

Private Sub OptionButton2_Click()

End Sub

Private Sub RequestorTerms_Change()

End Sub

Public Sub Worksheet_Activate()

    RowsCount = Me.UsedRange.Rows.Count
    
End Sub


Private Sub DeleteLastRowSubstanceInPart_Click()
Rows(96).EntireRow.Delete
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
   
    Application.EnableEvents = False
    
    Dim KeyCells As Range
    Dim KeyCellsSub As Range
    Dim CAS_find As Variant
    Dim Substance_row As Variant
    Dim CAS_row As Variant
    Dim Substance_name As Variant
    Dim CAS As String
    Dim CAS_nohyp As String
    Dim Checksum As Double
    Dim i As Integer
    Dim j As Integer
    Set KeyCells = Range("Z:Z") 'MACRO PARAMETER: Column of CAS Number in the Template Tool
    Set KeyCellsSub = Range("AC:AC") 'MACRO PARAMETER: Column of Substance Name in the Template Tool
    Dim Check As Integer
    Dim Hyp As Integer
    Dim Digit As Integer
    Dim Poshyp1 As Integer
    Dim Poshyp2 As Integer
    'Dim celula As Integer
    'Dim celula2 As Integer
    
    On Error GoTo EH
    Application.Worksheets("7.Supplier-Acceptance").CheckButton.BackColor = &H8000000F
    'celula = ActiveCell.column 'this register the next cell address
    'celula2 = ActiveCell.Row
    Target.Offset(0, 50).Copy
    'Target.PasteSpecial Paste:=xlFormats 'this was used to paste the SRT format to the previous cell. In the end of script, the active cell will be the next one (this script was also canceled)
    ActiveCell.PasteSpecial Paste:=xlFormats
    Application.CutCopyMode = False
        
    If Target.Columns.Count = Me.Columns.Count Then 'Script for add new rows using the same SRT format
         'Detect Extra Row
        If RowsCount = Me.UsedRange.Rows.Count - 1 Then
            ' Copy Formulas and Format new row
            If Target.Row > 1 Then
                Target.Offset(-1, 0).Copy
                Target.PasteSpecial xlPasteFormulas, xlPasteSpecialOperationNone, False, False
                Target.PasteSpecial xlPasteFormats, xlPasteSpecialOperationNone, False, False
                Application.CutCopyMode = False
            End If
        End If
        RowsCount = Me.UsedRange.Rows.Count
        Application.EnableEvents = True
        Exit Sub 'if a new row is inserted, to avoid many loops related to the code below, the sub exits
    End If
    
    If Not Application.Intersect(KeyCellsSub, Range(Target.Address)) Is Nothing Then 'Script starts if the field "Substance Name" has changed
        
        For Each KeyCellsSub In Target
            Substance_name = Cells(KeyCellsSub.Row, Target.column)
            Substance_row = Application.Match(Substance_name, Sheets("DSL").Range("D:D"), 0)
        
            If Not IsError(Substance_row) Then 'if the var "Substance_row" is not and error, i.e. a substance was found on the AD-DSL, this scrip starts
                CAS = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:E"), Substance_row, 1)
                Cells(KeyCellsSub.Row, Target.column - 3) = CAS
                Cells(KeyCellsSub.Row, Target.column - 2) = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:B"), Substance_row, 2) 'EC Number
                Cells(KeyCellsSub.Row, Target.column - 1) = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:C"), Substance_row, 3) 'IAEG ID
                Cells(KeyCellsSub.Row, Target.column + 1) = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:E"), Substance_row, 5) 'Synonym
            End If
        
            If (Substance_name = "") Then 'The user has deleted the substance name
                Cells(KeyCellsSub.Row, Target.column - 3) = "" 'CAS
                Cells(KeyCellsSub.Row, Target.column - 2) = "" 'EC Number
                Cells(KeyCellsSub.Row, Target.column - 1) = "" 'IAEG ID
                Cells(KeyCellsSub.Row, Target.column + 1) = "" 'Synonym
            End If
        
        Next KeyCellsSub
        
    End If
    
    If Not Application.Intersect(KeyCells, Range(Target.Address)) Is Nothing Then 'Script starts if the field "CAS" has changed
    
        For Each KeyCells In Target
            CAS_find = Cells(KeyCells.Row, Target.column)
            CAS_row = Application.Match(CAS_find, Sheets("DSL").Range("A:A"), 0)
            
            If (CAS_find <> "-") Then
                Cells(KeyCells.Row, Target.column + 1) = "" 'empty the cells related to the new CAS number
                Cells(KeyCells.Row, Target.column + 2) = ""
                Cells(KeyCells.Row, Target.column + 3) = ""
                Cells(KeyCells.Row, Target.column + 4) = ""
            End If
                
            If (CAS_find <> "" And CAS_find <> "-") Then
            
                If Not IsError(CAS_row) Then ''if the var "CAS_row" is not and error, i.e. a CAS# was found on the AD-DSL, this scrip starts
                    Cells(KeyCells.Row, Target.column + 4) = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:E"), CAS_row, 5) 'Synonym
                    Cells(KeyCells.Row, Target.column + 3) = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:D"), CAS_row, 4) 'Substance Name
                    Cells(KeyCells.Row, Target.column + 2) = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:C"), CAS_row, 3) 'IAEG ID
                    Cells(KeyCells.Row, Target.column + 1) = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:B"), CAS_row, 2) 'EC Number
            
                Else 'it means the CAS number was not found in the DSL
                    Checksum = 0 'receive the sum to calculate mod 10 (necessary for CAS digit validation)
                    j = 1
                    CAS_nohyp = Replace(CAS_find, "-", "") 'remove the hyphens of CAS number
                    Poshyp1 = InStr(CAS_find, "-")
                    Poshyp2 = InStr(Poshyp1 + 1, CAS_find, "-")
                    Hyp = Len(CAS_find) - Len(CAS_nohyp) 'it shall be equal to 2, since 2 are the max number of hyphens in a CASn
                
                    If IsNumeric(CAS_nohyp) And _
                    (Poshyp1 = Len(CAS_find) - 4) And _
                    (Poshyp2 = Len(CAS_find) - 1) And _
                    (Hyp = 2) Then 'Four different conditions necessary to be a valid CAS number
                    
                        For i = (Len(CAS_nohyp) - 1) To 1 Step -1 'capture number by number and perform math operations to check if is a valid CAS number
                            Checksum = (Mid(CAS_nohyp, i, 1) * j) + Checksum
                            j = j + 1
                        Next i
                    
                    Check = (Checksum Mod 10)
                    Digit = (Right(CAS_nohyp, 1)) 'the last CAS digit
                    
                        If (Check <> Digit) Then
                            MsgBox ("'" & CAS_find & "' is not a valid CAS number." & vbNewLine & _
                            "The last digit (-" & Digit & ") is not valid."), , ("Error")
                            Cells(KeyCells.Row, Target.column) = "" 'empty the cells related to the CAS number, since it is not a valid one
                            Cells(KeyCells.Row, Target.column + 1) = ""
                            Cells(KeyCells.Row, Target.column + 2) = ""
                            Cells(KeyCells.Row, Target.column + 3) = ""
                            Cells(KeyCells.Row, Target.column + 4) = ""
                        End If
                    
                    Else
                        MsgBox ("'" & CAS_find & "' is not a valid CAS number."), , ("Error")
                        Cells(KeyCells.Row, Target.column) = "" 'empty the cells related to the CAS number, since it is not a valid one
                        Cells(KeyCells.Row, Target.column + 1) = ""
                        Cells(KeyCells.Row, Target.column + 2) = ""
                        Cells(KeyCells.Row, Target.column + 3) = ""
                        Cells(KeyCells.Row, Target.column + 4) = ""
                    End If
                
                End If
        
            Else
            
                If (CAS_find = "") Then 'The user has deleted the CAS number
                    Cells(KeyCells.Row, Target.column + 1) = ""
                    Cells(KeyCells.Row, Target.column + 2) = ""
                    Cells(KeyCells.Row, Target.column + 3) = ""
                    Cells(KeyCells.Row, Target.column + 4) = ""
                End If
            End If
    
        Next KeyCells
    
    Set KeyCells = Nothing 'reset all variables
    Set KeyCellsSub = Nothing
    CAS_find = 0
    CAS_row = 0
    CAS_nohyp = 0
    Checksum = 0
    i = 0
    j = 0
    Digit = 0
    Poshyp1 = 0
    Poshyp2 = 0
    
    End If
     
'ActiveSheet.Cells(celula2, celula).Select

EH:
Application.EnableEvents = True
    
End Sub


Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton9, 19, 16, MSForms, CommandButton"
Option Explicit
Public RowsCount As Long ' Variable to track number of rows used in sheet

Private Sub DeleteARow_Click()

End Sub

Private Sub AddARowInProduct_Click()
Rows(16).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton1_Click()
Rows(41).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton10_Click()

'*
'* Insert file(s) as icon(s) on the sheet
'* Select an empty cell and call the macro,
'*  the icons of the selected files will be distributed vertically.
'*
    Const csPDFIconFile As String = "pdf.ico"
    Const csExcelIconFile As String = "xls.ico"
    Const csWordIconFile As String = "doc.ico"

    Dim vSelectedFile As Variant
    Dim lRow As Long
    Dim sFileExt As String, sIconFile As String, sFileName As String
    Dim oFile As Object

    With Application.FileDialog(msoFileDialogFilePicker)
        .AllowMultiSelect = True
        .Filters.Add "My Files", "*.pdf; *.doc*; *.xls*"
        If .Show = -1 Then
            For Each vSelectedFile In .SelectedItems
                sFileExt = Right(vSelectedFile, Len(vSelectedFile) - InStrRev(vSelectedFile, "."))
                Select Case LCase(Left(sFileExt, 3))
                    Case "pdf"
                        sIconFile = ThisWorkbook.Path + "\" + csPDFIconFile

                    Case "xls"
                        sIconFile = ThisWorkbook.Path + "\" + csExcelIconFile

                    Case "doc"
                        sIconFile = ThisWorkbook.Path + "\" + csWordIconFile

                    Case Else
                        ' sIconFile = Default icon, if required
                End Select
                '*
                '* File name for IconLabel
                sFileName = Mid(vSelectedFile, InStrRev(vSelectedFile, "\") + 1)
                sFileName = Mid(sFileName, 1, Len(sFileName) - Len(sFileExt) - 1)
                '*
                '* Insert selected file
                Set oFile = ActiveSheet.OLEObjects.Add(FileName:=vSelectedFile, _
                    Link:=False, _
                    DisplayAsIcon:=True, _
                    IconFileName:=sIconFile, _
                    IconIndex:=0, _
                    IconLabel:=sFileName)
                '*
                '* Advance to the cell below the inserted icon
                lRow = 1
                Do
                    If ActiveCell.Offset(lRow).Top > oFile.Top + oFile.Height Then
                        ActiveCell.Offset(lRow).Select
                        Exit Do
                    End If
                    lRow = lRow + 1
                Loop
            Next vSelectedFile
        End If
    End With



End Sub

Private Sub CommandButton2_Click()
Rows(41).EntireRow.Delete
End Sub

Private Sub CommandButton3_Click()
Rows(16).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton4_Click()
Rows(16).EntireRow.Delete
End Sub

Private Sub CommandButton5_Click()
Rows(122).EntireRow.Delete
End Sub

Private Sub CommandButton6_Click()
Rows(122).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Private Sub CommandButton7_Click()
Rows(107).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A107]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Process Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG AD-DSL List
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Private Sub CommandButton8_Click()
Rows(79).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A78]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG AD-DSL List
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Private Sub CommandButton9_Click()
Rows(123).Select
Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

Dim wb1 As Workbook
Dim wb2 As Workbook
Dim Sheet As Worksheet
Dim PasteStart As Range

Set wb1 = ActiveWorkbook
Set PasteStart = ['Single Declaration'!A120]

'### Select File to Open
FileToOpen = Application.GetOpenFilename _
(Title:="Please select your local file containing Declarable Substance Data")

If FileToOpen = False Then
    MsgBox "No File Specified.", vbExclamation, "ERROR"
    Exit Sub
Else
    Set wb2 = Workbooks.Open(FileName:=FileToOpen)

'#### Opens Up Spreadsheet and deletes un-needed sheets
Application.DisplayAlerts = False
Application.DisplayAlerts = False

'#### Copies required IAEG AD-DSL List
    For Each Sheet In wb2.Sheets
        With Sheet.UsedRange
            .Copy PasteStart
            Set PasteStart = PasteStart.Offset(.Rows.Count)
            ActiveCell.Offset(1).EntireRow.Insert
                End With
            Next Sheet
   
End If
    
    wb2.Close
End Sub

Private Sub OptionButton1_Click()

End Sub

Private Sub OptionButton2_Click()

End Sub

Private Sub RequestorTerms_Change()

End Sub

Public Sub Worksheet_Activate()
    
    RowsCount = Me.UsedRange.Rows.Count
    
End Sub

Private Sub DeleteLastRowSubstanceInPart_Click()
Rows(96).EntireRow.Delete
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
        
    Application.EnableEvents = False
    
    Dim KeyCells As Range
    Dim KeyCellsSub As Range
    Dim CAS_find As Variant
    Dim Substance_row As Variant
    Dim CAS_row As Variant
    Dim Substance_name As Variant
    Dim CAS As String
    Dim CAS_nohyp As String
    Dim Checksum As Double
    Dim i As Integer
    Dim j As Integer
    Set KeyCells = Range("N:N") 'MACRO PARAMETER: Column of CAS Number in the Template Tool
    Set KeyCellsSub = Range("Q:Q") 'MACRO PARAMETER: Column of Substance Name in the Template Tool
    Dim Check As Integer
    Dim Hyp As Integer
    Dim Digit As Integer
    Dim Poshyp1 As Integer
    Dim Poshyp2 As Integer
    'Dim celula As Integer
    'Dim celula2 As Integer
    
    
    On Error GoTo EH
    Application.Worksheets("7.Supplier-Acceptance").CheckButton.BackColor = &H8000000F
    'celula = ActiveCell.column
    'celula2 = ActiveCell.Row
    
    Target.Offset(0, 30).Copy
    'Target.PasteSpecial Paste:=xlFormats
    ActiveCell.PasteSpecial Paste:=xlFormats
    
    Application.CutCopyMode = False
    
    
       
    If Target.Columns.Count = Me.Columns.Count Then 'Script for add new rows using the same SRT format
        If RowsCount = Me.UsedRange.Rows.Count - 1 Then 'Detect Extra Row
        
            If Target.Row > 1 Then ' Copy Formulas and Format new row
                Target.Offset(-1, 0).Copy
                Target.PasteSpecial xlPasteFormulas, xlPasteSpecialOperationNone, False, False
                Target.PasteSpecial xlPasteFormats, xlPasteSpecialOperationNone, False, False
                Application.CutCopyMode = False
            End If
            
        End If
        
        RowsCount = Me.UsedRange.Rows.Count
        Application.EnableEvents = True
        Exit Sub 'if a new row is inserted, to avoid many loops related to the code below, the sub exits
        
    End If
    
    
    If Not Application.Intersect(KeyCellsSub, Range(Target.Address)) Is Nothing Then
    
        For Each KeyCellsSub In Target
            Substance_name = Cells(KeyCellsSub.Row, Target.column)
            Substance_row = Application.Match(Substance_name, Sheets("DSL").Range("D:D"), 0)
        
            If Not IsError(Substance_row) Then
                CAS = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:E"), Substance_row, 1)
                Cells(KeyCellsSub.Row, Target.column - 3) = CAS
                Cells(KeyCellsSub.Row, Target.column - 2) = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:B"), Substance_row, 2) 'EC Number
                Cells(KeyCellsSub.Row, Target.column - 1) = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:C"), Substance_row, 3) 'IAEG ID
                Cells(KeyCellsSub.Row, Target.column + 1) = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:E"), Substance_row, 5) 'Synonym
            End If
            
            If (Substance_name = "") Then 'The user has deleted the substance name
                Cells(KeyCellsSub.Row, Target.column - 3) = "" 'CAS
                Cells(KeyCellsSub.Row, Target.column - 2) = "" 'EC Number
                Cells(KeyCellsSub.Row, Target.column - 1) = "" 'IAEG ID
                Cells(KeyCellsSub.Row, Target.column + 1) = "" 'Synonym
            End If
        
        Next KeyCellsSub
        
    End If
    
    If Not Application.Intersect(KeyCells, Range(Target.Address)) Is Nothing Then
        
        For Each KeyCells In Target
            CAS_find = Cells(KeyCells.Row, Target.column) '14 |fffd| o CAS, ou seja, o target.column
            CAS_row = Application.Match(CAS_find, Sheets("DSL").Range("A:A"), 0)
                
            If (CAS_find <> "-") Then
                Cells(KeyCells.Row, Target.column + 4) = "" 'empty the cells related to the new CAS number
                Cells(KeyCells.Row, Target.column + 2) = ""
                Cells(KeyCells.Row, Target.column + 1) = ""
                Cells(KeyCells.Row, Target.column + 3) = ""
            End If
        
            If (CAS_find <> "" And CAS_find <> "-") Then
            
                If Not IsError(CAS_row) Then 'it means the CAS number was successfully found on DSL list
                    Cells(KeyCells.Row, Target.column + 4) = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:E"), CAS_row, 5) 'Synonym
                    Cells(KeyCells.Row, Target.column + 2) = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:C"), CAS_row, 3) 'IAEG ID
                    Cells(KeyCells.Row, Target.column + 1) = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:B"), CAS_row, 2) 'EC Number
                    Cells(KeyCells.Row, Target.column + 3) = Application.WorksheetFunction.Index(Sheets("DSL").Range("A:D"), CAS_row, 4) 'Substance Name
                    Set KeyCells = Nothing 'reset all variables
            
                Else 'it means the CAS number was not found in the DSL
                    Checksum = 0 'receive the sum to calculate mod 10 (necessary for CAS digit validation)
                    j = 1
                    CAS_nohyp = Replace(CAS_find, "-", "") 'remove the hyphens of CAS number
                    Poshyp1 = InStr(CAS_find, "-")
                    Poshyp2 = InStr(Poshyp1 + 1, CAS_find, "-")
                    Hyp = Len(CAS_find) - Len(CAS_nohyp) 'it shall be equal to 2, since 2 are the max number of hyphens in a CASn
                
                    If IsNumeric(CAS_nohyp) And _
                        (Poshyp1 = Len(CAS_find) - 4) And _
                        (Poshyp2 = Len(CAS_find) - 1) And _
                        (Hyp = 2) Then 'Four different conditions necessary to be a valid CAS number
                    
                        For i = (Len(CAS_nohyp) - 1) To 1 Step -1 'capture number by number and perform math operations to check if is a valid CAS number
                            Checksum = (Mid(CAS_nohyp, i, 1) * j) + Checksum
                            j = j + 1
                        Next i
                    
                        Check = (Checksum Mod 10)
                        Digit = (Right(CAS_nohyp, 1)) 'the last CAS digit
                        
                        If (Check <> Digit) Then
                            MsgBox ("'" & CAS_find & "' is not a valid CAS number." & vbNewLine & _
                            "The last digit (-" & Digit & ") is not valid."), , ("Error")
                            Cells(KeyCells.Row, Target.column + 4) = "" 'empty the cells related to the CAS number, since it is not a valid one
                            Cells(KeyCells.Row, Target.column + 2) = ""
                            Cells(KeyCells.Row, Target.column + 1) = ""
                            Cells(KeyCells.Row, Target.column) = ""
                            Cells(KeyCells.Row, Target.column + 3) = ""
                        End If
                    
                    Else
                        MsgBox ("'" & CAS_find & "' is not a valid CAS number."), , ("Error")
                        Cells(KeyCells.Row, Target.column + 4) = "" 'empty the cells related to the CAS number, since it is not a valid one
                        Cells(KeyCells.Row, Target.column + 2) = ""
                        Cells(KeyCells.Row, Target.column + 1) = ""
                        Cells(KeyCells.Row, Target.column) = ""
                        Cells(KeyCells.Row, Target.column + 3) = ""
                    End If
                
                End If
        
            Else
                If (CAS_find = "") Then
                    Cells(KeyCells.Row, Target.column + 4) = ""
                    Cells(KeyCells.Row, Target.column + 2) = ""
                    Cells(KeyCells.Row, Target.column + 1) = ""
                    Cells(KeyCells.Row, Target.column + 3) = ""
                End If
            End If
   
        Next KeyCells

    Set KeyCells = Nothing 'reset all variables
    Set KeyCellsSub = Nothing
    CAS_find = 0
    CAS_row = 0
    CAS_nohyp = 0
    Checksum = 0
    i = 0
    j = 0
    Digit = 0
    Poshyp1 = 0
    Poshyp2 = 0
       
    End If

'ActiveSheet.Cells(celula2, celula).Select

EH:
Application.EnableEvents = True

End Sub


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    
    With Worksheets("Instructions")
       .Protect _
        Password:="IAEG2018", _
        userInterfaceOnly:=True, _
        AllowInsertingRows:=True, _
        AllowDeletingRows:=True, _
        AllowFormattingColumns:=True
        .EnableOutlining = True
    End With
    
    With Worksheets("1.Requester-Supplier") 'The Protect Method allows to protect the spreadsheet and has some arguments
        .Protect _
        Password:="IAEG2018", _
        userInterfaceOnly:=True, _
        AllowInsertingRows:=True, _
        AllowDeletingRows:=True, _
        AllowFormattingColumns:=True
        .EnableOutlining = True
    End With

    With Worksheets("3.Product-Statement")
       .Protect _
        Password:="IAEG2018", _
        userInterfaceOnly:=True, _
        AllowInsertingRows:=True, _
        AllowDeletingRows:=True, _
        AllowFormattingColumns:=True
        .EnableOutlining = True
    End With

    With Worksheets("2.Product-Group")
       .Protect _
        Password:="IAEG2018", _
        userInterfaceOnly:=True, _
        AllowInsertingRows:=True, _
        AllowDeletingRows:=True, _
        AllowFormattingColumns:=True
        .EnableOutlining = True
    End With

    With Worksheets("4.Substance-in-Product")
         .Protect _
         Password:="IAEG2018", _
         userInterfaceOnly:=True, _
         AllowInsertingRows:=True, _
         AllowDeletingRows:=True, _
         AllowFormattingColumns:=True
         .EnableOutlining = True
    End With
        

    With Worksheets("5.Substance-in-Process")
         .Protect _
         Password:="IAEG2018", _
         userInterfaceOnly:=True, _
         AllowInsertingRows:=True, _
         AllowDeletingRows:=True, _
         AllowFormattingColumns:=True
         .EnableOutlining = True
    End With
    
    With Worksheets("6.Attachment")
        .Protect _
        Password:="IAEG2018", _
       userInterfaceOnly:=True, _
        AllowInsertingRows:=True, _
        AllowDeletingRows:=True, _
        AllowFormattingColumns:=True
        .EnableOutlining = True
    End With


    With Worksheets("7.Supplier-Acceptance")
        .Protect _
        Password:="IAEG2018", _
        userInterfaceOnly:=True, _
        AllowInsertingRows:=True, _
        AllowDeletingRows:=True, _
        AllowFormattingColumns:=True
        .EnableOutlining = True
    End With
        
    With Worksheets("-Parameters-")
        .Protect _
        Password:="IAEG2018", _
        userInterfaceOnly:=True, _
        AllowInsertingRows:=True, _
        AllowDeletingRows:=True, _
        AllowFormattingColumns:=True
        .EnableOutlining = True
    End With
   
   
End Sub


'Private Sub Workbook_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Range)
'    On Error Resume Next
'    Target.PasteSpecial xlPasteValues
'    Application.CutCopyMode = True
'End Sub


'Private Sub Workbook_Activate()
'Application.OnKey "^v", "MyCtrlV"
'End Sub

'Private Sub Workbook_Deactivate()
'Application.OnKey "^v"
'End Sub

'Private Sub Workbook_BeforeClose(Cancel As Boolean)
'Application.OnKey "^v"
'End Sub

 'Application.OnKey "^v", "MyCtrlV"
    
    'On Error Resume Next 'This is due an Excel bug: if the workbook is open and the Substance-in-Product or in-Process tab is open, the script of activate is not executed.
    'Call ActiveSheet.Worksheet_Activate
    'On Error GoTo 0
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{B12397BA-6EC6-4A4C-9D40-C91B2FC8907E}{72926724-9631-4AB4-BF3B-9D3D8327353F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub TextBox1_Change()

Dim line1 As String
Dim line2 As String
Dim line3 As String


line1 = "Except as provided in the next sentence, with respect to the information and data provided in a Substance Declaration under IAEG Standard xxxx, the terms and conditions stated elsewhere in this contract governing protection of proprietary or confidential information shall not apply, and shall be replaced by the Terms of Use stated in this addendum."
line2 = "This Addendum shall not apply with respect to any information or data that is Export Controlled or Classified.  In the event Export Controlled or Classified Data is included in a Substance Declaration, the Declarants and Recipients shall make a separate, written agreement that protects any data to be exchanged in the standard format ('Proprietary Data Rider').  In such a case, Declarants (as defined below) must mark any information or data provided to identify its Export Controlled or  Classified."
line3 = "Except when a Proprietary Data Rider has been approved by all parties, by using the Declarable Substance Standard, users of the Declarable Substance Standard agree to be bound by the following terms of use:"

TextBox1.Text = line1



End Sub



INQUEST-PP=macro
