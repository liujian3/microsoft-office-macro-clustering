Attribute VB_Name = "Admin_Macros"
Option Explicit

Sub ShowPayPeriodForm()
CreatePayPeriod.Show
End Sub
Sub CreatePayPeriods()
Dim PayrollQty As Long
Dim StartRow As Long
Dim FormulaRow As Long
Dim StartDate As Date
Dim NextDate As Date
Dim Frequency As String
With Sheet4
If .Range("B4").Value = Empty Or .Range("B5").Value = Empty Or .Range("B6").Value = Empty Then
    MsgBox "Please make sure that all fields have been filled in before Creating Pay Periods"
    Exit Sub
End If
CreatePayPeriod.Hide
Frequency = .Range("B4").Value 'Frequency
StartDate = .Range("B5").Value 'Start Date
PayrollQty = .Range("B6").Value 'Payroll Qty

Select Case Frequency
    Case Is = "Weekly"
    FormulaRow = 15
    Case Is = "Bi-Weekly"
    FormulaRow = 17
    Case Is = "Semi-Monthly"
    FormulaRow = 19
    Case Is = "Monthly"
    FormulaRow = 21
End Select

If .Range("B7").Value = True Then 'New List
    .Range("D209:F304").ClearContents
    StartRow = 209
Else:
    StartRow = .Range("D304").End(xlUp).Row + 1  'First Available Row
End If
.Range("E" & StartRow).Value = StartDate

        .Range("B" & FormulaRow).Copy
        .Range("F" & StartRow & ":F" & StartRow + PayrollQty - 1).PasteSpecial xlPasteFormulas
        .Range("A" & FormulaRow + 1).Copy
        .Range("E" & StartRow + 1 & ":E" & StartRow + PayrollQty - 1).PasteSpecial xlPasteFormulas
        .Range("B14").Copy
        .Range("D" & StartRow & ":D" & StartRow + PayrollQty - 1).PasteSpecial xlPasteFormulas 'Create Pay Period Names
   End With
Application.CutCopyMode = False
End Sub
 
Sub BrowseEmployeeFolder()
Dim EmpFldr As FileDialog
Dim strPath As String
Set EmpFldr = Application.FileDialog(msoFileDialogFolderPicker)
With EmpFldr
    .Title = "Select a Folder"
    .AllowMultiSelect = False
    '.InitialFileName = strPath
    If .Show <> -1 Then GoTo NoSelection
    Sheet4.Range("EmplAttachFolder").Value = .SelectedItems(1)
End With
NoSelection:
End Sub
Attribute VB_Name = "Admin_Tabs"
Option Explicit

Sub Admin_SwitchHorizontalTabs()
Dim SelCol As Long
Dim FirstRow As Long
StopCalc
With Sheet4
SelCol = .Range("B3").Value
If SelCol = 6 Then .Shapes("CreatePayPeriodBtn").Visible = msoCTrue Else: .Shapes("CreatePayPeriodBtn").Visible = msoFalse
If SelCol = 4 Then .Shapes("BrowseFolderBtn").Visible = msoCTrue Else: .Shapes("BrowseFolderBtn").Visible = msoFalse
.Range("5:504").EntireRow.Hidden = True
FirstRow = 5 + ((SelCol - 4) * 100)
.Range(FirstRow & ":" & FirstRow + 99).EntireRow.Hidden = False
End With
ResetCalc
End Sub
Attribute VB_Name = "AutoTab_Macros"
Sub SetOnkey(ByVal state As Boolean)
'Compiled By Randy Austin
'Workbook Provided By www.ExcelForFreelancers.com
    If state Then
        With Application
            .OnKey "{TAB}", "'TabRange xlNext'"
            .OnKey "~", "'TabRange xlNext'"
            .OnKey "{ENTER}", "'TabRange xlNext'"
            .OnKey "{RIGHT}", "'TabRange xlNext'"
            .OnKey "{LEFT}", "'TabRange xlPrevious'"
            .OnKey "+{TAB}", "'TabRange xlPrevious'"
            .OnKey "{DOWN}", "'UpOrDownArrow xlDown'"
            .OnKey "{UP}", "'UpOrDownArrow xlUp'"
        End With
    Else
    'reset keys
        With Application
            .OnKey "{ENTER}"
            .OnKey "{TAB}"
            .OnKey "~"
            .OnKey "+{TAB}"
            .OnKey "{RIGHT}"
            .OnKey "{LEFT}"
            .OnKey "{DOWN}"
            .OnKey "{UP}"
        End With
    End If
End Sub

Sub do_nothing()
'nothing to do
End Sub


Function GetTabOrder() As Variant
'--set the tab order of input cells - change ranges as required
'  don't include "$" in these cell references
    If ActiveSheet.CodeName = "Sheet1" Then 'For Employee Mgr Sheet
        If ActiveCell.Row < 19 Then GetTabOrder = Array("F6", "I6", "F8", "F10", "I10", "F12", "H12", "F14", "H14", "K14", "F16", "H16", "K16")
        If ActiveCell.Row = 26 Then GetTabOrder = Array("F26", "I26", "K26")
        If ActiveCell.Row = 46 Then GetTabOrder = Array("F46", "I46", "K46")
        If ActiveCell.Row > 65 And ActiveCell.Row < 76 Then GetTabOrder = Array("G66", "J66", "G68", "J68", "G70", "J70", "G73", "J73", "G75", "J75")
        If ActiveCell.Row > 164 And ActiveCell.Row < 184 Then GetTabOrder = Array("G182", "I182", "K182")
    End If

  '  If ActiveCell.Row > 18 Then SetOnkey (False)    'GetTabOrder = Array("")
End Function

Sub TabRange(Optional iDirection As Integer = xlNext)
    
Dim vTabOrder As Variant, m As Variant
Dim lItems As Long, iAdjust As Long
On Error GoTo ExitSub
'--get the tab order from shared function
vTabOrder = GetTabOrder
lItems = UBound(vTabOrder) - LBound(vTabOrder) + 1

On Error Resume Next
m = Application.Match(ActiveCell.Address(0, 0), vTabOrder, False)
    

'--if activecell is not in Tab Order return to the first cell
If IsError(m) Then
   m = 1
Else
   '--get adjustment to index
   iAdjust = IIf(iDirection = xlPrevious, -1, 1)

   '--calculate new index wrapping around list
   m = (m + lItems + iAdjust - 1) Mod lItems + 1
End If

'--select cell adjusting for Option Base 0 or 1
Application.EnableEvents = False
Range(vTabOrder(m + (LBound(vTabOrder) = 0))).Select

ExitSub:
   Application.EnableEvents = True
   

End Sub

Sub UpOrDownArrow(Optional iDirection As Integer = xlUp)

Dim vTabOrder As Variant
Dim lRowClosest As Long, lRowTest As Long
Dim i As Long, iSign As Integer

Dim sActiveCol As String
Dim bFound As Boolean

'--get the tab order from shared function
vTabOrder = GetTabOrder
On Error Resume Next
If vTabOrder = Empty Then Exit Sub
'--find TabCells in same column as ActiveCell in iDirection
'--  rTest will include ActiveCell

sActiveCol = GetColLtr(ActiveCell.Address(0, 0))

iSign = IIf(iDirection = xlDown, -1, 1)
lRowClosest = IIf(iDirection = xlDown, Rows.Count + 1, 0)

For i = LBound(vTabOrder) To UBound(vTabOrder)
   If GetColLtr(CStr(vTabOrder(i))) = sActiveCol Then
      lRowTest = Range(CStr(vTabOrder(i))).Row

   '--find closest cell to ActiveCell in rTest
      If iSign * lRowTest > iSign * lRowClosest And _
         iSign * lRowTest < iSign * ActiveCell.Row Then
         '--at least one cell in iDirection of same columnn
         bFound = True
         lRowClosest = lRowTest
      End If
   End If
Next i

If bFound Then
   Application.EnableEvents = False
   Cells(lRowClosest, ActiveCell.Column).Select
   Application.EnableEvents = True
End If
End Sub


Private Function GetColLtr(sAddr As String) As String
Dim iPos As Long, sTest As String
Do While iPos < 3
   iPos = iPos + 1
   If IsNumeric(Mid(sAddr, iPos, 1)) Then
      Exit Do
   Else
      sTest = sTest & Mid(sAddr, iPos, 1)
   End If
Loop
GetColLtr = sTest
End Function

Attribute VB_Name = "CodeReset_Macs"
Option Explicit

Sub StopCalc()
    With Application
        .EnableEvents = False
        .Calculation = xlCalculationManual
        .ScreenUpdating = False
    End With
End Sub
Sub ResetCalc()
    With Application
        .EnableEvents = True
        .Calculation = xlCalculationAutomatic
        .ScreenUpdating = True
    End With
End Sub

Attribute VB_Name = "CreatePayPeriod"
Attribute VB_Base = "0{76307FEC-BECC-4257-9A1E-F6F760E81529}{346003A1-3F4A-4B4F-A0D4-672F484CF79D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub ClsBtn_Click()
CreatePayPeriod.Hide
End Sub

Private Sub CancelBtn_Click()
CreatePayPeriod.Hide
End Sub

Private Sub CreateBtn_Click()
CreatePayPeriods
End Sub

Attribute VB_Name = "Empl_Attach"
Option Explicit

Sub Attach_Add()
Dim FileFldr As FileDialog
Dim FileName, OrigFilePath, FileType, DestFileFolder, DestFilePath, EmpID, EmpName As String
Dim LastAttRow As Long
DestFileFolder = Sheet4.Range("EmplAttachFolder").Value
    If DestFileFolder = "" Then 'If user has not added a main folder yet
        MsgBox "Before attaching any files for this Employee, please select a dedicated" & vbCrLf & "folder to store the individual Employee Attachments"
        Exit Sub
    End If
EmpID = Sheet1.Range("J2").Value  'Employee ID
EmpName = Replace(Replace(Sheet1.Range("F2").Value, ",", "_"), " ", "") 'Employee Name
Set FileFldr = Application.FileDialog(msoFileDialogFilePicker)
With FileFldr
    .Title = "Select file to attach"
   .Filters.Add "All Files", "*.*"
    If .Show <> -1 Then GoTo NoSelection
    OrigFilePath = .SelectedItems(1)
    FileName = Dir(OrigFilePath)
    
   FileType = Right(FileName, 5 - InStr(1, Right(FileName, 5), "."))
End With


'Check if Employee Folder exists, if not, add it.
If Len(Dir(DestFileFolder & "\" & EmpName, vbDirectory)) = 0 Then
On Error GoTo BadFolder
MkDir DestFileFolder & "\" & EmpName
End If
DestFilePath = DestFileFolder & "\" & EmpName & "\" & FileName
FileCopy OrigFilePath, DestFilePath  'Copy user selected file into appropriate Employee folder
'Kill (OrigFilePath) 'If you want to delete the original file in the original location

With Sheet3
    LastAttRow = .Range("D9999").End(xlUp).Row + 1  'First Avail. Attachment Row
    .Range("D" & LastAttRow).Value = EmpID 'EmployeID
    .Range("E" & LastAttRow).Value = Sheet1.Range("F2").Value 'Employee Name
    .Range("F" & LastAttRow).Value = FileName
    .Range("G" & LastAttRow).Value = FileType
    .Range("H" & LastAttRow).Value = DestFilePath
    .Range("I" & LastAttRow).Value = Application.UserName
    .Range("J" & LastAttRow).Value = Now
    .Range("K" & LastAttRow).Value = "=Row()"
End With

Attach_Refresh 'Refresh List To Display New Attachment
Sheet1.Range("E19").Select 'Select First Item to Display Thumbnail (if any)
Attach_DisplayThumbnail
NoSelection:
Exit Sub
BadFolder:
MsgBox "Please select a correct folder to add attachments"
Sheet4.Activate
BrowseEmployeeFolder
End Sub

Sub Attach_Refresh()
Dim EmpID, AttRow, LastAttRow, LastFiltRow, FiltRow As Long

EmpID = Sheet1.Range("J2").Value 'Empoyee ID
Sheet1.Range("E19:J24").ClearContents 'Clear Old Attachemets
AttRow = 19 'Set Starting Attachments Row
With Sheet3
        .Range("AA2:AH2,AA4:AH9999").ClearContents 'Clear Prev Adv. Filter
        .Range("AA2").Value = EmpID 'Set Empl. ID as Filter
        LastAttRow = .Range("D9999").End(xlUp).Row
         If LastAttRow < 5 Then GoTo NoData
        .Range("D4:K" & LastAttRow).AdvancedFilter xlFilterCopy, CriteriaRange:=.Range("AA1:AH2"), CopyToRange:=.Range("AA3:AG3"), Unique:=True
        LastFiltRow = .Range("AA9999").End(xlUp).Row  'Last Filtered Row
        If LastFiltRow < 4 Then Exit Sub 'If no Attach. found then Exit
        For FiltRow = LastFiltRow To 4 Step -1 'Use Reverse For next to put most recent Attach. First
            Sheet1.Range("E" & AttRow & ":J" & AttRow).Value = .Range("AB" & FiltRow & ":AG" & FiltRow).Value 'Copy Over Attachment Info
            AttRow = AttRow + 1
            If AttRow = 25 Then Exit Sub 'Exit If Table is Full
        Next FiltRow
End With
NoData:

End Sub

Sub Attach_DisplayThumbnail()
Dim AttRow As Long
Dim AttTableRow As Long
Dim FileType, FilePath, ThumbType As String
With Sheet1
On Error Resume Next
.Shapes("AttachThumb").Delete
On Error GoTo 0
If .Range("B7").Value = Empty Then Exit Sub 'Exit on No AttachmentRow
AttRow = .Range("B7").Value 'Set Attachment Row
FileType = LCase(.Range("F" & AttRow).Value)
AttTableRow = .Range("J" & AttRow).Value 'Attachement Table Row
FilePath = .Range("G" & AttRow).Value 'Full File Path
If FileType = "jpg" Or FileType = "png" Or FileType = "gif" Or FileType = "jpeg" Or FileType = "bmp" Then 'Picture Types
On Error GoTo NoAttach
        .Pictures.Insert(FilePath).Name = "AttachThumb"
         With .Shapes("AttachThumb")
        .Visible = msoCTrue
        .LockAspectRatio = True
        .Left = Sheet1.Range("J19").Left
        .Top = Sheet1.Range("J19").Top
        If .Width > .Height Then .Width = 90 Else: .Height = 80
        .IncrementLeft 30
        .IncrementTop 2
    End With
'On Word, Excel or PDF Section
ElseIf FileType = "docx" Or FileType = "pdf" Or FileType = "doc" Then
            On Error Resume Next
            .OLEObjects.Add(FileName:=FilePath, Link:=False, DisplayAsIcon:=False).Name = "AttachThumb"
            On Error GoTo NoAttach
             With .Shapes("AttachThumb")
              .LockAspectRatio = True
        .Left = Sheet1.Range("L4").Left
        .Top = Sheet1.Range("L4").Top
        If .Width > .Height Then .Width = 300 Else: .Height = 500
        .IncrementLeft 35
        .IncrementTop 2
         .Visible = msoCTrue
    End With

    End If

End With
NoAttach:
End Sub
Sub Attach_Open()
With Sheet1
    Dim AttRow As Long
    If .Range("B7").Value = Empty Then
        MsgBox "Please select an attachment to open"
        Exit Sub
    End If
    AttRow = .Range("B7").Value 'Attachment Row
    ThisWorkbook.FollowHyperlink (.Range("G" & AttRow).Value)
End With
End Sub
Sub Attach_Delete()
Dim EmpID, AttRow As Long
If Sheet1.Range("J" & ActiveCell.Row).Value = Empty Then
    MsgBox "Please select an Attachment to delete first"
    Exit Sub
End If
On Error Resume Next
Sheet1.Shapes("AttachThumb").Delete
On Error GoTo 0

AttRow = Sheet1.Range("J" & ActiveCell.Row).Value 'Attachement Row
Sheet3.Range(AttRow & ":" & AttRow).EntireRow.Delete
Attach_Refresh
Sheet1.Range("E19").Select
Attach_DisplayThumbnail
End Sub


Sub Attach_ShowAll()
Sheet3.Range("D3").Value = Sheet1.Range("J2").Value  'Employee ID
End Sub
Sub Attach_Filter()
Dim LastAttRow As Long
With Sheet3
    .Activate
    .Range("AA2:AH2").ClearContents 'Clear Old Criteria
    If .Range("D3").Value <> "Enter ID:" And .Range("D3").Value <> Empty Then .Range("AA2").Value = .Range("D3").Value Else: .Range("AA2").ClearContents 'Employee ID
    If .Range("E3").Value <> "Enter Name:" And .Range("E3").Value <> Empty Then .Range("AB2").Value = "*" & .Range("E3").Value & "*" Else: .Range("AB2").ClearContents 'Employee Name
    LastAttRow = .Range("D9999").End(xlUp).Row
    If LastAttRow < 5 Then GoTo NoData
    .Range("D4:K" & LastAttRow).AdvancedFilter xlFilterInPlace, CriteriaRange:=.Range("AA1:AH2"), Unique:=True
NoData:
End With
End Sub

Sub Attach_FilterClear()
With Sheet3
On Error Resume Next
.ShowAllData
On Error GoTo 0
.Range("B3").Value = True 'Set Filter to True
.Range("D3").Value = "Enter ID:"
.Range("E3").Value = "Enter Name:"
.Range("B3").Value = False  'Set Filter to False
.Range("D5:D99999").EntireRow.Hidden = False
End With
End Sub
Attribute VB_Name = "Empl_Misc"
Option Explicit

Sub Empl_Load()
Dim EmpRow As Long
Dim EmpCol As Long
With Sheet1
    If .Range("B5").Value = Empty Then
        MsgBox "Please enter a valid Employee from the drop down list"
        Exit Sub
    End If
    StopCalc
    .Range("B1").Value = True 'Set Employee Load To True
    EmpRow = .Range("B5").Value
        .Range("J2,F6:G6,I6,F8:I8,F10:G10,I10,K10,F12,H12:I12,F14,H14:I14,K14,F16,H16:I16,K16,G66,J66,G68,J68,G70,J70,G73,J73,G75,J75,G86,J86,G88,J88,G182,I182,K182,E183").ClearContents
        .Range("F26:G26,I26,K26,E19:K24,E28:L44,F46:G46,I46,K46,E48:L64,G93:K104,G108:K119,G128:K139,F148:J154,L148:L154,E168:H179,L168:HL179,E188:K204").ClearContents
    For EmpCol = 1 To 33
        .Range(Sheet2.Cells(1, EmpCol).Value).Value = Sheet2.Cells(EmpRow, EmpCol).Value
    Next EmpCol
    .Shapes("NewEmpGrp").Visible = msoFalse
    .Shapes("ExistEmpGrp").Visible = msoCTrue
     
      .Range("B6").Value = False 'Set New Employee To False
      .Range("E4").Select 'Load General Info Tab
      If .Range("B2").Value = 5 Then Show_EmplPic 'Only when First Tab is selected
      Attach_Refresh
      Empl_EventsRefresh 'Refresh Employee Events
      Empl_TimeclockRefresh 'Refresh Time Clock Entries
      Empl_LeaveRefresh 'Refresh Employee Leave Items
      .Range("B1").Value = False 'Set Employee Load To False
End With
ResetCalc
End Sub

Sub Empl_New()
With Sheet1
.Range("B1").Value = True  'Set Employee Load To False
        .Shapes("NewEmpGrp").Visible = msoCTrue
        .Shapes("ExistEmpGrp").Visible = msoFalse
        .Shapes("DefaultPicture").Visible = msoCTrue
        On Error Resume Next
        .Shapes("EmplPic").Delete
        On Error GoTo 0
   .Range("F2:G2,J2,F6:G6,I6,F8:I8,F10:G10,I10,K10,F12,H12:I12,F14,H14:I14,K14,F16,H16:I16,K16,G66,J66,G68,J68,G70,J70,G73,J73,G75,J75,G86,J86,G88,J88,G182,I182,K182,E183").ClearContents
        .Range("F26:G26,I26,K26,E19:K24,E28:L44,F46:G46,I46,K46,E48:L64,G93:K104,G108:K119,G128:K139,F148:J154,L148:L154,E168:H179,L168:HL179,E188:K204").ClearContents
        
'Add New Employee Default Values

        .Range("B6").Value = True 'Set New Employee To True
        .Range("E4").Select 'Selects General Info Tab
        .Range("F6").Select 'Select Last Name Field

.Range("B1").Value = False 'Set Employee Load To False

End With
End Sub

Sub Emp_SaveNew()
Dim EmpRow As Long
Dim EmpCol As Long
With Sheet1
If .Range("F6").Value = Empty Then
    MsgBox "Please enter a Last Name for the Employee"
    .Range("F6").Select
    Exit Sub
End If
EmpRow = Sheet2.Range("A99999").End(xlUp).Row + 1   'First Avail Row
Sheet2.Range("A" & EmpRow).Value = Application.WorksheetFunction.Max(Sheet2.Range("EmployeeID")) + 1
For EmpCol = 2 To 33
Sheet2.Cells(EmpRow, EmpCol).Value = .Range(Sheet2.Cells(1, EmpCol).Value).Value
Next EmpCol
.Range("F2").Value = .Range("F6").Value & ", " & .Range("I6").Value 'Add in Last Name, First Name

    .Shapes("NewEmpGrp").Visible = msoFalse
    .Shapes("ExistEmpGrp").Visible = msoCTrue
    .Range("B1").Value = False 'Set Empl Load To False
    .Range("B6").Value = False 'Set New Employee To False
End With
'Sort Employee List
With Sheet2
.Sort.SortFields.Clear
 .Sort.SortFields.Add Key:=.Range("B4"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With .Sort
        .SetRange Range("A4:AB" & EmpRow)
        .Apply
    End With
End With
End Sub


Sub Empl_CancelNew()
Sheet1.Range("F2").Value = Sheet2.Range("BC4").Value 'Reset to display First Employee
End Sub

Sub Empl_Archive()
Dim EmplRow As Long
Dim ArchiveRow As Long
Dim EmplName As String
If MsgBox("Are you sure you want to Archive this employee?" & vbCrLf & "Their name will no longer be available in the drop down list", vbYesNo, "Archive Employee") = vbNo Then Exit Sub
With Sheet1
    If .Range("B4").Value = Empty Then
        MsgBox "Please select an employee to Archive"
        Exit Sub
    End If
    EmplName = .Range("F2").Value 'Employee Name
    EmplRow = .Range("B4").Value 'Employee Row
    ArchiveRow = Sheet6.Range("A99999").End(xlUp).Row + 1  'First Available Archive Row
    .Range("H14").Value = "Inactive" 'You can change this to whatever you want
    Sheet6.Range("A" & ArchiveRow & ":AG" & ArchiveRow).Value = Sheet2.Range("A" & EmplRow & ":AG" & EmplRow).Value 'Copy Over Employee Data
    Sheet2.Range(EmplRow & ":" & EmplRow).EntireRow.Delete
    Sheet1.Range("F2").Value = Sheet2.Range("BC4").Value 'Reset to display First Employee
    MsgBox EmplName & " has been archived"
End With
End Sub

Sub Empl_EventsRefresh()
Dim LastEventRow As Long
Dim LastFiltRow As Long
With Sheet1
'Load Events List Into Events Sheet Using Advanced Filter & Sort
    Sheet7.Range("BA2:BK2,BA5:BK99999").ClearContents 'Clear any Previous Results
    Sheet7.Range("BA2").Value = .Range("J2").Value 'Emloyee ID
    LastEventRow = Sheet7.Range("A99999").End(xlUp).Row
    On Error GoTo NoEvents
    Sheet7.Range("A4:W" & LastEventRow).AdvancedFilter xlFilterCopy, CriteriaRange:=Sheet7.Range("BA1:BA2"), CopyToRange:=Sheet7.Range("BA4:BK4"), Unique:=True
    LastFiltRow = Sheet7.Range("BA99999").End(xlUp).Row
    If LastFiltRow < 5 Then GoTo NoEvents
    'Sort events from Newest To Oldest
    Sheet7.Sort.SortFields.Clear
     Sheet7.Sort.SortFields.Add Key:=.Range("BD5"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal
    With Sheet7.Sort
        .SetRange Range("BA5:BK" & LastFiltRow)
        .Apply
    End With
    If LastFiltRow > 21 Then LastFiltRow = 21 'Set Maximum of 17 Rows
    .Range("E188:H" & LastFiltRow + 183).Value = Sheet7.Range("BB5:BE" & LastFiltRow).Value 'Copy First Section
    .Range("AE188:AF188").Copy 'Copy Formulas To Combine Frequency & Start On Fields
    .Range("I188:J" & LastFiltRow + 183).PasteSpecial xlPasteFormulas 'Paste Down Formulas
    .Range("K188:L" & LastFiltRow + 183).Value = Sheet7.Range("BJ5:BK" & LastFiltRow).Value 'Copy Last Section
    Application.CutCopyMode = xlCopy
NoEvents:
End With
End Sub


Sub Empl_TimeclockRefresh()
Dim LastTimeclockRow As Long
Dim LastFiltRow As Long
With Sheet1
    Sheet9.Range("AA3:AI3,AA5:AAI99999").ClearContents 'Clear any Previous Results
    Sheet9.Range("AB3").Value = .Range("J2").Value 'Emloyee ID
    LastTimeclockRow = Sheet9.Range("A99999").End(xlUp).Row
    Sheet9.Range("A4:I" & LastTimeclockRow).AdvancedFilter xlFilterCopy, CriteriaRange:=Sheet9.Range("AA2:AA3"), CopyToRange:=Sheet9.Range("AA4:AF4"), Unique:=True
    LastFiltRow = Sheet9.Range("AA99999").End(xlUp).Row
    If LastFiltRow < 5 Then GoTo NoTimeclock
    'Sort TimeClock Entries Newest To Oldest
        Sheet9.Sort.SortFields.Clear
     Sheet9.Sort.SortFields.Add Key:=.Range("AB5"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal
    With Sheet9.Sort
        .SetRange Range("AA5:AI" & LastFiltRow)
        .Apply
    End With
    If LastFiltRow > 21 Then LastFiltRow = 21 'Set Maximum of 17 Rows
    StopCalc
    Sheet9.Range("AG1:AI1").Copy
    Sheet9.Range("AG5:AI" & LastFiltRow).PasteSpecial xlPasteFormulas
    ResetCalc
    .Range("E28:G" & LastFiltRow + 23).Value = Sheet9.Range("AA5:AC" & LastFiltRow).Value 'Copy Date, Start & End Times
    .Range("H28:J" & LastFiltRow + 23).Value = Sheet9.Range("AG5:AI" & LastFiltRow).Value 'Copy Total Break, Reg. Hours & OT Hours
    .Range("K28:K" & LastFiltRow + 23).Value = Sheet9.Range("AF5:AG" & LastFiltRow).Value 'Copy Notes
    Application.CutCopyMode = xlCopy
NoTimeclock:
End With
End Sub


Sub Empl_LeaveRefresh()
Dim LastLeaveRow As Long
Dim LastFiltRow As Long
With Sheet1
    Sheet11.Range("AA3,AA5:ADI99999").ClearContents 'Clear any Previous Results
    Sheet11.Range("AA3").Value = .Range("J2").Value 'Emloyee ID
    LastLeaveRow = Sheet11.Range("A99999").End(xlUp).Row
    Sheet11.Range("A4:H" & LastLeaveRow).AdvancedFilter xlFilterCopy, CriteriaRange:=Sheet11.Range("AA2:AA3"), CopyToRange:=Sheet11.Range("AA4:AE4"), Unique:=True
    LastFiltRow = Sheet11.Range("AA99999").End(xlUp).Row
    If LastFiltRow < 5 Then GoTo NoLeave

    If LastFiltRow > 16 Then LastFiltRow = 16 'Set Maximum of 12 Rows
    .Range("E168:H" & LastFiltRow + 163).Value = Sheet11.Range("AA5:AD" & LastFiltRow).Value 'Copy Date, Start & End Times ' Add in Leave Type, Paid, Carryover, Allowance
     .Range("L168:L" & LastFiltRow + 163).Value = Sheet11.Range("AE5:AE" & LastFiltRow).Value  'Copy Date, Start & End Times 'Add In Row #'s
NoLeave:
End With
End Sub



Attribute VB_Name = "Empl_PicsMacs"
Option Explicit

Sub Add_EmplPic()
Dim PicFile As FileDialog
Dim FileName, OrigFilePath, DestFileFolder, DestFilePath, EmpName As String
With Sheet1
EmpName = Replace(Replace(.Range("F2").Value, ",", "_"), " ", "") 'Get Clean Employee Name without commas or spaces
Set PicFile = Application.FileDialog(msoFileDialogFilePicker) 'Open File Dialog
With PicFile
    .Title = "Select an Employee Picture"
    .Filters.Add "All Picture Files", "*.jpg,*jpeg,*.gif,*.png,*.gif,*bmp,*.tiff"
    If .Show <> -1 Then GoTo NoSelection
    OrigFilePath = .SelectedItems(1)
End With
DestFileFolder = Sheet4.Range("EmplAttachFolder").Value 'Get Main Folder for Employee pictuers and attachments
    If DestFileFolder = "" Then 'If user has not added a main folder yet
        MsgBox "Before adding an Employee Picture, please select a dedicated" & vbCrLf & "folder to store the individual Employee Attachments"
        Exit Sub
    End If
FileName = Dir(OrigFilePath)
'Check if Employee Folder exists, if not, add it.
    If Len(Dir(DestFileFolder & "\" & EmpName, vbDirectory)) = 0 Then
        MkDir DestFileFolder & "\" & EmpName 'Create Directory if it does not exist
    End If
    DestFilePath = DestFileFolder & "\" & EmpName & "\" & FileName
    FileCopy OrigFilePath, DestFilePath  'Copy user selected file into appropriate Employee folder
    'Kill (OrigFilePath) 'If you want to delete the original file in the original location
    Sheet1.Range("K10").Value = DestFilePath 'Put File Name in K10
    Show_EmplPic
NoSelection:
End With
End Sub


Sub Show_EmplPic()
Dim PicPath As String
With Sheet1
On Error Resume Next
.Shapes("EmplPic").Delete 'Delete Picture if it exists
On Error GoTo 0
PicPath = .Range("K10").Value 'Path of the picture
If PicPath = Empty Then
    .Shapes("DefaultPicture").Visible = msoCTrue
    Exit Sub
End If
.Shapes("DefaultPicture").Visible = msoFalse
On Error GoTo DefaultPic
With .Pictures.Insert(PicPath)
    With .ShapeRange
        .LockAspectRatio = msoTrue
        .Height = 95
        .Name = "EmplPic"
    End With 'Shape Range
End With 'Pictures

With .Shapes("EmplPic")
    .Left = Sheet1.Range("J5").Left
    .Top = Sheet1.Range("J5").Top
    .IncrementLeft 40
    .IncrementTop 10
End With
Exit Sub:
DefaultPic:
.Shapes("DefaultPicture").Visible = msoCTrue
End With 'Sheet 1

End Sub
Attribute VB_Name = "Empl_Tabs"
Option Explicit

Sub Empl_SwitchHorizontalTabs()
Dim SelCol As Long
Dim FirstRow As Long
StopCalc
With Sheet1
SelCol = .Range("B2").Value

If SelCol > 8 Then SelCol = SelCol + 3
.Range("5:204").EntireRow.Hidden = True
FirstRow = 5 + ((SelCol - 5) * 20)
.Range(FirstRow & ":" & FirstRow + 19).EntireRow.Hidden = False
If SelCol <> 5 Then
    On Error Resume Next
    .Shapes("GenInfoGrp").Visible = msoFalse
     On Error GoTo 0
    .Shapes("DefaultPicture").Visible = msoFalse
    On Error Resume Next
    .Shapes("EmplPic").Visible = msoFalse
    On Error GoTo 0
     On Error Resume Next
    .Shapes("AttachThumb").Visible = msoFalse
    On Error GoTo 0
Else:
    On Error Resume Next
    .Shapes("GenInfoGrp").Visible = msoCTrue
    On Error GoTo 0
    If .Range("K10").Value = Empty Then .Shapes("DefaultPicture").Visible = msoCTrue Else: Show_EmplPic
End If
If SelCol = 8 Then .Range("B3").Value = 66
'Select First Cell in Tab
If .Range("B2").Value = 5 Then .Range("F6").Select
If .Range("B2").Value = 6 Then .Range("F26").Select
If .Range("B2").Value = 7 Then .Range("F46").Select
If .Range("B2").Value = 8 Then .Range("G66").Select
If .Range("B2").Value = 9 Then .Range("F148").Select
If .Range("B2").Value = 10 Then .Range("E168").Select
If .Range("B2").Value = 11 Then .Range("E188").Select

End With
ResetCalc
End Sub


Sub SwitchVerticalTabs()
Dim SelRow As Long
Dim FirstRow As Long
SelRow = Right(ActiveCell.Row, 1) - 5
With Sheet1
.Range("65:144").EntireRow.Hidden = True
FirstRow = 65 + ((SelRow - 1) * 20)
.Range(FirstRow & ":" & FirstRow + 19).EntireRow.Hidden = False
.Range("B3").Value = SelRow + FirstRow
.Range("F2").Select
End With
End Sub

Sub EmpTab_GenInfo()
Attribute EmpTab_GenInfo.VB_ProcData.VB_Invoke_Func = "g\n14"
   If ActiveSheet.CodeName = "Sheet1" Then Sheet1.Range("E4").Select
End Sub
Sub EmpTab_TimeClock()
Attribute EmpTab_TimeClock.VB_ProcData.VB_Invoke_Func = "t\n14"
 If ActiveSheet.CodeName = "Sheet1" Then Sheet1.Range("F4").Select
End Sub
Sub EmpTab_PayHistory()
Attribute EmpTab_PayHistory.VB_ProcData.VB_Invoke_Func = "h\n14"
 If ActiveSheet.CodeName = "Sheet1" Then Sheet1.Range("G4").Select
End Sub
Sub EmpTab_PayDetails()
Attribute EmpTab_PayDetails.VB_ProcData.VB_Invoke_Func = "t\n14"
 If ActiveSheet.CodeName = "Sheet1" Then Sheet1.Range("H4").Select
End Sub
Sub EmpTab_Scheduling()
Attribute EmpTab_Scheduling.VB_ProcData.VB_Invoke_Func = "u\n14"
 If ActiveSheet.CodeName = "Sheet1" Then Sheet1.Range("I4").Select
End Sub
Sub EmpTab_Leave()
Attribute EmpTab_Leave.VB_ProcData.VB_Invoke_Func = "l\n14"
 If ActiveSheet.CodeName = "Sheet1" Then Sheet1.Range("J4").Select
End Sub
Sub EmpTab_Events()
Attribute EmpTab_Events.VB_ProcData.VB_Invoke_Func = "e\n14"
 If ActiveSheet.CodeName = "Sheet1" Then Sheet1.Range("K4").Select
End Sub
Attribute VB_Name = "Events_Misc"
Option Explicit
Dim EventRow As Long
Dim EventCol As Long
Dim MapRng As String
Sub Event_SaveNew()
With Sheet7
'Check for Required Fields
If Sheet5.Range("E4").Value = Empty Or Sheet5.Range("H4").Value = Empty Then
    MsgBox "Event Name and Event Type are required fields for Events"
    Exit Sub
End If
EventRow = .Range("A99999").End(xlUp).Row + 1 'First Available Event List Row
.Cells(EventRow, 1).Value = Sheet5.Range("B7").Value 'New Event ID
For EventCol = 2 To 23
        If EventCol = 8 Or EventCol = 15 Then  'Reminders & Recurring Options
            If InStr(Sheet5.Range(.Cells(1, EventCol).Value).Value, "|fffd|") > 0 Then .Cells(EventRow, EventCol).Value = "Yes" Else: .Cells(EventRow, EventCol).Value = "No"
        Else:
        .Cells(EventRow, EventCol).Value = Sheet5.Range(.Cells(1, EventCol).Value).Value 'Event Field
        End If
Next EventCol
End With
With Sheet5
    .Shapes("NewEventGrp").Visible = msoFalse
    .Shapes("ExistEventGrp").Visible = msoTrue
    .Range("B2").Value = False 'Set New Event To False
    .Range("B4").Value = Sheet7.Cells(EventRow, 1).Value 'New Event ID
Event_Refresh ' Reload Events
End With
End Sub
Sub Event_AddNew()
With Sheet5
.Range("B1").Value = True 'Set Event Load To True
.Range("B2").Value = True 'Set New Event To True
.Range("B4,B6,E4,H4,K4,E6:N8,F10,G10,J10,L10,N10,J11,L11,F13,G13,N13,F15:I15,K15,M15,F16:M16,F17:N17,F18:N21").ClearContents
.Shapes("NewEventGrp").Visible = msoCTrue
.Shapes("ExistEventGrp").Visible = msoFalse
.Range("N4").Value = Now 'Set Current Time & Date
.Range("B1").Value = False 'Set Event Load To False
.Range("E4").Select
End With
End Sub


Sub Event_Load()
Dim SelRow As Long
With Sheet5
SelRow = .Range("B10").Value
If .Range("B3").Value = Empty Then
    MsgBox "Please select on an Event to display the Event details"
    Exit Sub
End If
StopCalc
.Range("B1").Value = True 'Set Event Load To True
EventRow = .Range("B3").Value

For EventCol = 1 To 26
    MapRng = Sheet7.Cells(1, EventCol).Value
    If MapRng = "D10" Or MapRng = "D13" Then 'For Recurring & Reminders
            If MapRng = "D10" Then
                If Sheet7.Cells(EventRow, EventCol).Value = "Yes" Then .Range(MapRng).Value = "|fffd|      Recurring" Else:  .Range(MapRng).Value = "o      Recurring"
                .Range(MapRng).Characters(Start:=1, Length:=1).Font.Name = "Wingdings"
                .Range(MapRng).Characters(Start:=2, Length:=16).Font.Name = "Calibri"
            End If
            If MapRng = "D13" Then
                If Sheet7.Cells(EventRow, EventCol).Value = "Yes" Then .Range(MapRng).Value = "|fffd|    Reminders" Else:  .Range(MapRng).Value = "o    Reminders"
                .Range(MapRng).Characters(Start:=1, Length:=1).Font.Name = "Wingdings"
                .Range(MapRng).Characters(Start:=2, Length:=15).Font.Name = "Calibri"
            End If
    Else: 'For All other fields
         .Range(MapRng).Value = Sheet7.Cells(EventRow, EventCol).Value 'Add Mapped Values
    End If
Next EventCol
    If .Range("D13").Value = "|fffd|    Reminders" Then .Shapes("EventRemindIcons").Visible = msoCTrue Else .Shapes("EventRemindIcons").Visible = msoFalse 'Show Hide Reminder Icon Group
    .Shapes("NewEventGrp").Visible = msoFalse
    .Shapes("ExistEventGrp").Visible = msoTrue
    .Range("B2").Value = False 'Set New Event To False
     .Range("B1").Value = False 'Set Event Load To False
ResetCalc
End With
End Sub

Sub Event_Delete()
If MsgBox("Are you sure you want to delete this event?", vbYesNo, "Delete Event") = vbNo Then Exit Sub
With Sheet5
    If .Range("B3").Value = Empty Then Exit Sub
    EventRow = .Range("B3").Value  'Event Row
    Sheet7.Range(EventRow & ":" & EventRow).EntireRow.Delete
    Event_Refresh 'Refresh Events
End With
End Sub

Sub Event_Refresh()
Dim LastEventRow As Long
Dim LastFiltRow As Long
With Sheet5
StopCalc
'Load Events List Into Events Sheet Using Advanced Filter & Sort
    .Range("D27:O99999").ClearContents 'Clear Existing Events list
    Sheet7.Range("AD5:AQ99999").ClearContents 'Clear any Previous Results
    LastEventRow = Sheet7.Range("A99999").End(xlUp).Row
    DeleteFilters
    
    Sheet7.Range("A4:AA" & LastEventRow).AdvancedFilter xlFilterCopy, , CopyToRange:=Sheet7.Range("AD4:AQ4"), Unique:=True
    LastFiltRow = Sheet7.Range("AD99999").End(xlUp).Row
    If LastFiltRow < 5 Then GoTo NoEvent
        'Sort Events From Newest To Oldest
    Sheet7.Sort.SortFields.Clear
     Sheet7.Sort.SortFields.Add Key:=.Range("AF5"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal
    With Sheet7.Sort
        .SetRange Range("AD5:AQ" & LastFiltRow)
        .Apply
    End With
    .Range("D27:I" & LastFiltRow + 22).Value = Sheet7.Range("AD5:AI" & LastFiltRow).Value 'Copy First Section
    .Range("A27:B27").Copy 'Copy Formulas To Combine Frequency & Start On Fields
    .Range("J27:K" & LastFiltRow + 22).PasteSpecial xlPasteFormulas 'Paste Down Formulas
    .Range("L27:O" & LastFiltRow + 22).Value = Sheet7.Range("AN5:AQ" & LastFiltRow).Value 'Copy Second Section
    Application.CutCopyMode = xlCopy
 .Range("D27").Select
NoEvent:
ResetCalc
End With
End Sub
Sub Event_CancelNew()
Sheet5.Range("D27").Select
End Sub

Sub Event_AddEmailAttach()
Dim FileFldr As FileDialog
Set FileFldr = Application.FileDialog(msoFileDialogFilePicker)
With FileFldr
    .Title = "Select file to attach"
   .Filters.Add "All Files", "*.*"
    If .Show <> -1 Then GoTo NoSelection
    Sheet5.Range("F16").Value = .SelectedItems(1)
End With
NoSelection:
End Sub

Sub DeleteFilters()
    On Error Resume Next
    Sheet7.Names("Criteria").Delete
    Sheet7.Names("Extract").Delete
    On Error GoTo 0
End Sub
Attribute VB_Name = "FadeOutMessage"
Option Explicit


Sub EmployIDNotFound()
Dim i As Integer
Dim delay As Double
Dim StartTime As Double
With ActiveSheet.Shapes("IDNotFound")
.Visible = True
  For i = 1 To 150
  .Fill.Transparency = i / 150
    delay = 0.009
    StartTime = Timer
    Do
    DoEvents
    Loop While Timer - StartTime < delay
  Next i
.Visible = False
End With
End Sub


Attribute VB_Name = "FolderPickMac"
Option Explicit
Sub GetFolder()
Dim PDFFldr As FileDialog
Dim sItem As String
Dim strPath As String
Set PDFFldr = Application.FileDialog(msoFileDialogFolderPicker)
With PDFFldr
    .Title = "Select a Folder"
    .AllowMultiSelect = False
    .InitialFileName = strPath
    If .Show <> -1 Then GoTo NextCode
    sItem = .SelectedItems(1)
End With
Sheet1.Range("S3").Value = sItem
NextCode:
'GetFolder = sItem
Set PDFFldr = Nothing
End Sub

Sub MailToSelected()
Dim SelRow As Long
Dim BeregnerNm As String
Dim EmailAdd As String
Dim BeregnerRng As Range
Dim FoundBeregner As Range
SelRow = ActiveCell.Row
BeregnerNm = Sheet1.Range("D" & SelRow).Value
Set BeregnerRng = Sheet2.Range("O4:O9999") 'Not sure what row this starts on
Set FoundBeregner = BeregnerRng.Find(BeregnerNm, , xlValues, xlWhole)
If Not FoundBeregner Is Nothing Then EmailAdd = Sheet2.Range("P" & FoundBeregner.Row).Value

'Add the rest of your email code here
End Sub



Attribute VB_Name = "LoginForm"
Attribute VB_Base = "0{22597A3D-3E4D-4084-A6DC-E65F3479363E}{2A16B541-2B72-4039-BBE3-3C0025FD36F7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub ToggleButton1_Click()
CheckUser
End Sub
Attribute VB_Name = "PopUp_Calendar"
Dim SelCell As Range
Dim DayName As String
Sub ShowSettings()
'Show or Hide Calendar Settings Panel
If ActiveSheet.Shapes.Range(Array("Settings")).Visible = True Then
    ActiveSheet.Shapes.Range(Array("Settings", "CalCol1", "CalCol2", "CalCol3", "CalCol4", "CalCol5", "CalCol6", "CalCol7", "CalCol8", "CalCol9")).Visible = False
  Else:
    ActiveSheet.Shapes.Range(Array("Settings", "CalCol1", "CalCol2", "CalCol3", "CalCol4", "CalCol5", "CalCol6", "CalCol7", "CalCol8", "CalCol9")).Visible = True
End If
End Sub
Sub CalendarHide()
Dim DayNum As Long
'Hide Calendar, Reset Day Colors
On Error GoTo NoCal
ActiveSheet.Shapes("Calendar").Visible = msoFalse
Sheets("CalPopUp").Range("A7").Value = ""
If Sheets("CalPopUp").Range("A20").Value <> Empty Then
For DayNum = 1 To 42
DayName = DayNum & "Day"
 With ActiveSheet.Shapes(DayName)
        .Fill.ForeColor.RGB = RGB(255, 255, 255)
        .TextFrame2.TextRange.Font.Bold = msoFalse
End With
Next DayNum
End If
Exit Sub
NoCal: 'If calendar has been removed by accident, paste in backup calendar from  CalPopUp Sheet
End Sub

Sub CalendarShow()
With ActiveSheet
    Set SelCell = Selection
    'Check if active cell is a valid date
    If IsDate(SelCell.Value) = True Then
        Sheets("CalPopUp").Range("A1").Value = SelCell.Value
        Else: 'If No Date or incorrect Date user current date
        Sheets("CalPopUp").Range("A1").Value = "=Today()"
    End If
        Sheets("CalPopUp").Range("A3").Value = Month(Sheets("CalPopUp").Range("A1").Value) 'Set Month
        Sheets("CalPopUp").Range("A2").Value = Year(Sheets("CalPopUp").Range("A1").Value) 'Set Year
        DayName = Sheets("CalPopUp").Range("A20").Value & "Day"
        UnGroupCal
         If InStr(.Shapes("NextTri").OnAction, "!") <> 0 Or InStr(.Shapes("1Day").DrawingObject.Formula, "]") <> 0 Then   'Run Workbook Link Remover and Cell Link Replacement
            MacroLinkRemover
            CalFormulaReplacement
         End If
        GroupCal
        On Error GoTo NoCal
        With ActiveSheet.Shapes(DayName)
        .Fill.ForeColor.RGB = RGB(252, 213, 180)
        .TextFrame2.TextRange.Font.Bold = msoTrue
        End With
       On Error GoTo NoCal
    .Shapes("Calendar").Visible = msoCTrue
    .Shapes.Range(Array("Settings", "CalCol1", "CalCol2", "CalCol3", "CalCol4", "CalCol5", "CalCol6", "CalCol7", "CalCol8", "CalCol9")).Visible = False '
    .Shapes("Calendar").Left = SelCell.Left
    .Shapes("Calendar").Top = SelCell.Offset(1, 0).Top
        If Sheets("CalPopUp").Range("A6").Value > 0 Then
            .Shapes.Range(Array("36Day", "37Day", "38Day", "39Day", "40Day", "41Day", "42Day")).Visible = True
            Else:
            .Shapes.Range(Array("36Day", "37Day", "38Day", "39Day", "40Day", "41Day", "42Day")).Visible = False
        End If
    Sheets("CalPopUp").Range("A7").Value = SelCell.Address
     ActiveCell.Select
End With
Exit Sub
NoCal:
MsgBox "The Pop-up Calendar does not exist on this worksheet. Please copy the calendar over from another sheet and paste into this sheet"
End Sub
Sub PrevMonth()
'Previous Month Button
If Sheets("CalPopUp").Range("A20").Value <> Empty Then
DayName = Sheets("CalPopUp").Range("A20").Value & "Day"
    With ActiveSheet.Shapes(DayName)
            .Fill.ForeColor.RGB = RGB(255, 255, 255)
            .TextFrame2.TextRange.Font.Bold = msoFalse
    End With
End If
With Sheets("CalPopUp")
If .Range("A3").Value = 1 Then
    .Range("A3").Value = 12
    .Range("A2").Value = .Range("A2").Value - 1
Else:
    .Range("A3").Value = .Range("A3").Value - 1
End If
 If .Range("A6").Value > 0 Then
    ActiveSheet.Shapes.Range(Array("36Day", "37Day", "38Day", "39Day", "40Day", "41Day", "42Day")).Visible = True
    Else:
    ActiveSheet.Shapes.Range(Array("36Day", "37Day", "38Day", "39Day", "40Day", "41Day", "42Day")).Visible = False
End If
End With
End Sub
Sub NextMonth()
'Next Month button
If Sheets("CalPopUp").Range("A20").Value <> Empty Then
DayName = Sheets("CalPopUp").Range("A20").Value & "Day"
    With ActiveSheet.Shapes(DayName)
            .Fill.ForeColor.RGB = RGB(255, 255, 255)
            .TextFrame2.TextRange.Font.Bold = msoFalse
    End With
End If
With Sheets("CalPopUp")
If .Range("A3").Value = 12 Then
    .Range("A3").Value = 1
    .Range("A2").Value = .Range("A2").Value + 1
Else:
    .Range("A3").Value = .Range("A3").Value + 1
End If
If .Range("A6").Value > 0 Then
    ActiveSheet.Shapes.Range(Array("36Day", "37Day", "38Day", "39Day", "40Day", "41Day", "42Day")).Visible = True
    Else:
    ActiveSheet.Shapes.Range(Array("36Day", "37Day", "38Day", "39Day", "40Day", "41Day", "42Day")).Visible = False
End If
End With
End Sub

''''''''''''''''''''''''''''''''''''''
'''''Individual Day Selection Buttons
''''''''''''''''''''''''''''''''''''''

Sub DayBtn1()
With Sheets("CalPopUp")
If .Range("B1").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("B1").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn2()
With Sheets("CalPopUp")
If .Range("C1").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("C1").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn3()
With Sheets("CalPopUp")
If .Range("D1").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("D1").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn4()
With Sheets("CalPopUp")
If .Range("E1").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("E1").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn5()
With Sheets("CalPopUp")
If .Range("F1").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("F1").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn6()
With Sheets("CalPopUp")
If .Range("G1").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("G1").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn7()
With Sheets("CalPopUp")
If .Range("H1").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("H1").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn8()
With Sheets("CalPopUp")
If .Range("B2").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("B2").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn9()
With Sheets("CalPopUp")
If .Range("C2").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("C2").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn10()
With Sheets("CalPopUp")
If .Range("D2").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("D2").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn11()
With Sheets("CalPopUp")
If .Range("E2").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("E2").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn12()
With Sheets("CalPopUp")
If .Range("F2").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("F2").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn13()
With Sheets("CalPopUp")
If .Range("G2").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("G2").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn14()
With Sheets("CalPopUp")
If .Range("H2").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("H2").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn15()
With Sheets("CalPopUp")
If .Range("B3").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("B3").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn16()
With Sheets("CalPopUp")
If .Range("C3").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("C3").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn17()
With Sheets("CalPopUp")
If .Range("D3").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("D3").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn18()
With Sheets("CalPopUp")
If .Range("E3").Value <> Empty And .Range("A7").Value <> Empty Then
   ActiveSheet.Range(.Range("A7").Value).Value = .Range("E3").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn19()
With Sheets("CalPopUp")
If .Range("F3").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("F3").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn20()
With Sheets("CalPopUp")
If .Range("G3").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("G3").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn21()
With Sheets("CalPopUp")
If .Range("H3").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("H3").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn22()
With Sheets("CalPopUp")
If .Range("B4").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("B4").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn23()
With Sheets("CalPopUp")
If .Range("C4").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("C4").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn24()
With Sheets("CalPopUp")
If .Range("D4").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("D4").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn25()
With Sheets("CalPopUp")
If .Range("E4").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("E4").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn26()
With Sheets("CalPopUp")
If .Range("F4").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("F4").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn27()
With Sheets("CalPopUp")
If .Range("G4").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("G4").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn28()
With Sheets("CalPopUp")
If .Range("H4").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("H4").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn29()
With Sheets("CalPopUp")
If .Range("B5").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("B5").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn30()
With Sheets("CalPopUp")
If .Range("C5").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("C5").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn31()
With Sheets("CalPopUp")
If .Range("D5").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("D5").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn32()
With Sheets("CalPopUp")
If .Range("E5").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("E5").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn33()
With Sheets("CalPopUp")
If .Range("F5").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("F5").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn34()
With Sheets("CalPopUp")
If .Range("G5").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("G5").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn35()
With Sheets("CalPopUp")
If .Range("H5").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("H5").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn36()
With Sheets("CalPopUp")
If .Range("B6").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("B6").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn37()
With Sheets("CalPopUp")
If .Range("C6").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("C6").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn38()
With Sheets("CalPopUp")
If .Range("D6").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("D6").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn39()
With Sheets("CalPopUp")
If .Range("E6").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("E6").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn40()
With Sheets("CalPopUp")
If .Range("F6").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("F6").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn41()
With Sheets("CalPopUp")
If .Range("G6").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("G6").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub
Sub DayBtn42()
With Sheets("CalPopUp")
If .Range("H6").Value <> Empty And .Range("A7").Value <> Empty Then
    ActiveSheet.Range(.Range("A7").Value).Value = .Range("H6").Value
End If
ActiveSheet.Shapes("Calendar").Visible = msoFalse
ActiveCell.Offset(0, 1).Select
End With
End Sub

'''''''''''''''''Color Calendar Background''''''''''''''''''''''
Sub CalCol1()
With ActiveSheet.Shapes.Range(Array("CalBack", "Settings")).Select
    With Selection.ShapeRange.Fill
    .ForeColor.RGB = RGB(234, 234, 234)
    End With
    ActiveSheet.Range(Sheets("CalPopUp").Range("A7").Value).Select
End With
End Sub
Sub CalCol2()
With ActiveSheet.Shapes.Range(Array("CalBack", "Settings")).Select
    With Selection.ShapeRange.Fill
    .ForeColor.RGB = RGB(197, 190, 151)
    End With
    ActiveSheet.Range(Sheets("CalPopUp").Range("A7").Value).Select
End With
End Sub
Sub CalCol3()
With ActiveSheet.Shapes.Range(Array("CalBack", "Settings")).Select
    With Selection.ShapeRange.Fill
    .ForeColor.RGB = RGB(141, 180, 227)
    End With
    ActiveSheet.Range(Sheets("CalPopUp").Range("A7").Value).Select
End With
End Sub
Sub CalCol4()
With ActiveSheet.Shapes.Range(Array("CalBack", "Settings")).Select
    With Selection.ShapeRange.Fill
    .ForeColor.RGB = RGB(184, 204, 228)
    End With
    ActiveSheet.Range(Sheets("CalPopUp").Range("A7").Value).Select
End With
End Sub
Sub CalCol5()
With ActiveSheet.Shapes.Range(Array("CalBack", "Settings")).Select
    With Selection.ShapeRange.Fill
    .ForeColor.RGB = RGB(230, 185, 184)
    End With
    ActiveSheet.Range(Sheets("CalPopUp").Range("A7").Value).Select
End With
End Sub
Sub CalCol6()
With ActiveSheet.Shapes.Range(Array("CalBack", "Settings")).Select
    With Selection.ShapeRange.Fill
    .ForeColor.RGB = RGB(215, 228, 188)
    End With
    ActiveSheet.Range(Sheets("CalPopUp").Range("A7").Value).Select
End With
End Sub
Sub CalCol7()
With ActiveSheet.Shapes.Range(Array("CalBack", "Settings")).Select
    With Selection.ShapeRange.Fill
    .ForeColor.RGB = RGB(204, 192, 218)
    End With
    ActiveSheet.Range(Sheets("CalPopUp").Range("A7").Value).Select
End With
End Sub
Sub CalCol8()
With ActiveSheet.Shapes.Range(Array("CalBack", "Settings")).Select
    With Selection.ShapeRange.Fill
    .ForeColor.RGB = RGB(182, 221, 232)
    End With
    ActiveSheet.Range(Sheets("CalPopUp").Range("A7").Value).Select
End With
End Sub
Sub CalCol9()
With ActiveSheet.Shapes.Range(Array("CalBack", "Settings")).Select
    With Selection.ShapeRange.Fill
    .ForeColor.RGB = RGB(252, 213, 180)
    End With
    ActiveSheet.Range(Sheets("CalPopUp").Range("A7").Value).Select
End With
End Sub

'Create Calendar Sheet on First Run of Calendar
Sub CreateCalSht()
Dim ColCnt, RowCnt, DayCnt, CalCol As Long
Dim ws, ActSht As Worksheet
Set ActSht = ActiveSheet
'On Error GoTo NoCal
ActiveSheet.Shapes("Calendar").Copy
Set ws = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
ws.Name = "CalPopUp"
ActSht.Activate

'Reassign Shape Links & Macros
With ActiveSheet
UnGroupCal
    '.Unprotect
    .Shapes("NextRec").OnAction = "'" & ActiveWorkbook.Name & "'!NextMonth"
    .Shapes("NextTri").OnAction = "'" & ActiveWorkbook.Name & "'!NextMonth"
    .Shapes("PrevRec").OnAction = "'" & ActiveWorkbook.Name & "'!PrevMonth"
    .Shapes("PrevTri").OnAction = "'" & ActiveWorkbook.Name & "'!PrevMonth"
    .Shapes("SetBtn").OnAction = "'" & ActiveWorkbook.Name & "'!ShowSettings"
    .Shapes("MonthYear").DrawingObject.Formula = "=CalPopUp!A5"
    DayCnt = 1
    For RowCnt = 1 To 6
        For ColCnt = 2 To 8
                .Shapes(DayCnt & "Day").DrawingObject.Formula = "=CalPopUp!" & .Cells(RowCnt, ColCnt).Address 'Assigned Linked Cell
                .Shapes(DayCnt & "Day").OnAction = "'" & ActiveWorkbook.Name & "'!DayBtn" & DayCnt 'Assign Macro
                DayCnt = DayCnt + 1
        Next ColCnt
    Next RowCnt
    
    'Assign Color Macros
    For CalCol = 1 To 9
     .Shapes("CalCol" & CalCol).OnAction = "'" & ActiveWorkbook.Name & "'!CalCol" & CalCol
    Next CalCol
End With

With Sheets("CalPopUp")
    .Paste
        .Visible = xlSheetHidden
    
    'Add in Formulas and Details
        .Range("A4").Value = "=INDEX(CalMonths,A3,)"
        .Range("A5").Value = "=A4&" & Chr(34) & " " & Chr(34) & "&CalYear"
        .Range("A6").Value = "=SUM(B6:H6)"
        .Range("A8").Value = "January"
        .Range("A8").AutoFill Destination:=.Range("A8:A19"), Type:=xlFillDefault
        .Range("A20").Value = "=IFERROR(INDIRECT(ADDRESS(SUMPRODUCT((B1:H6=A1)*ROW(B1:H6))+6,SUMPRODUCT((B1:H6=A1)*COLUMN(B1:H6)),1,1))," & Chr(34) & Chr(34) & ")"
    'Set Defined Names
    ActiveWorkbook.Names.Add Name:="CalMonths", RefersTo:="=CalPopUp!$A$8:$A$19"
    ActiveWorkbook.Names.Add Name:="CalYear", RefersTo:="=CalPopUp!$A$2"
    
    'Add in Calendar Formulas
        .Range("B1").Value = "=IF(WEEKDAY(DATE(CalYear,MATCH($A$4,CalMonths,0),1))=1,DATE(CalYear,MATCH($A$4,CalMonths,0),1)," & Chr(34) & Chr(34) & ")"
        .Range("C1").Value = "=IF(B1<>" & Chr(34) & Chr(34) & ",B1+1,IF(WEEKDAY(DATE(CalYear,MATCH($A$4,CalMonths,0),1))=2,DATE(CalYear,MATCH($A$4,CalMonths,0),1)," & Chr(34) & Chr(34) & "))"
        .Range("D1").Value = "=IF(C1<>" & Chr(34) & Chr(34) & ",C1+1,IF(WEEKDAY(DATE(CalYear,MATCH($A$4,CalMonths,0),1))=3,DATE(CalYear,MATCH($A$4,CalMonths,0),1)," & Chr(34) & Chr(34) & "))"
        .Range("E1").Value = "=IF(D1<>" & Chr(34) & Chr(34) & ",D1+1,IF(WEEKDAY(DATE(CalYear,MATCH($A$4,CalMonths,0),1))=4,DATE(CalYear,MATCH($A$4,CalMonths,0),1)," & Chr(34) & Chr(34) & "))"
        .Range("F1").Value = "=IF(E1<>" & Chr(34) & Chr(34) & ",E1+1,IF(WEEKDAY(DATE(CalYear,MATCH($A$4,CalMonths,0),1))=5,DATE(CalYear,MATCH($A$4,CalMonths,0),1)," & Chr(34) & Chr(34) & "))"
        .Range("G1").Value = "=IF(F1<>" & Chr(34) & Chr(34) & ",F1+1,IF(WEEKDAY(DATE(CalYear,MATCH($A$4,CalMonths,0),1))=6,DATE(CalYear,MATCH($A$4,CalMonths,0),1)," & Chr(34) & Chr(34) & "))"
        .Range("H1").Value = "=IF(G1<>" & Chr(34) & Chr(34) & ",G1+1,IF(WEEKDAY(DATE(CalYear,MATCH($A$4,CalMonths,0),1))=7,DATE(CalYear,MATCH($A$4,CalMonths,0),1)," & Chr(34) & Chr(34) & "))"
        .Range("B2").Value = "=H1+1"
        .Range("C2").Value = "=B2+1"
        .Range("C2").AutoFill Destination:=.Range("C2:H2"), Type:=xlFillDefault
        .Range("B2:H2").AutoFill Destination:=.Range("B2:H4"), Type:=xlFillDefault
        .Range("B5").Value = "=IF(OR(H4=" & Chr(34) & Chr(34) & ",MONTH(H4+1)<>$A$3)," & Chr(34) & Chr(34) & ",H4+1)"
        .Range("C5").Value = "=IFERROR(IF(MONTH(B5+1)<>$A$3," & Chr(34) & Chr(34) & ",B5+1)," & Chr(34) & Chr(34) & ")"
        .Range("B6").Value = "=IFERROR(IF(OR(H5=" & Chr(34) & Chr(34) & ",MONTH(H5+1)<>$A$3)," & Chr(34) & Chr(34) & ",H5+1)," & Chr(34) & Chr(34) & ")"
        .Range("C6").Value = "=IFERROR(F(MONTH(I5+1)<>$A$3," & Chr(34) & Chr(34) & ",I5+1)," & Chr(34) & Chr(34) & ")"
        .Range("C5:C6").AutoFill Destination:=.Range("C5:H6"), Type:=xlFillDefault
        
        'Set format to Single Day
        .Range("B1:H6").NumberFormat = "d"
        
        'Add in relative Day #'s
        .Range("B7").Value = "1"
        .Range("C7").Value = "2"
        .Range("B8").Value = "8"
        .Range("C8").Value = "9"
        .Range("B7:C8").AutoFill Destination:=.Range("B7:H8"), Type:=xlFillDefault
        .Range("B7:H8").AutoFill Destination:=.Range("B7:H12"), Type:=xlFillDefault
    GroupCal
End With
Exit Sub
NoCal:
MsgBox "The Pop-up Calendar does not exist on this worksheet. Please copy the calendar over from another sheet and paste into this sheet"
End Sub

Sub CheckForSheet()
'Checks for existance of Calendar Pop-up Worksheet
Dim ws As Worksheet
On Error GoTo CreateWS
Set ws = ActiveWorkbook.Sheets("CalPopUp")
Exit Sub
CreateWS:
CreateCalSht
End Sub

Sub MacroLinkRemover()
'PURPOSE: Remove an external workbook reference from all shapes triggering macros
'Source: www.ExcelForFreelancers.com
Dim shp As Shape
Dim MacroLink, NewLink As String
Dim SplitLink As Variant

  For Each shp In ActiveSheet.Shapes 'Loop through each shape in worksheet
  
    'Grab current macro link (if available)
    On Error GoTo NextShp
      MacroLink = shp.OnAction
    
    'Determine if shape was linking to a macro
      If MacroLink <> "" And InStr(MacroLink, "!") <> 0 Then
        'Split Macro Link at the exclaimation mark (store in Array)
          SplitLink = Split(MacroLink, "!")
        
        'Pull text occurring after exclaimation mark
          NewLink = SplitLink(1)
        
        'Remove any straggling apostrophes from workbook name
            If Right(NewLink, 1) = "'" Then
              NewLink = Left(NewLink, Len(NewLink) - 1)
            End If
        
        'Apply New Link
          shp.OnAction = NewLink
      End If
NextShp:
  Next shp
End Sub
Sub CalFormulaReplacement()
With ActiveSheet
Dim DayNum, ColNum, RowNum As Long
Dim shp As Shape
ColNum = 2
RowNum = 1
For DayNum = 1 To 42
 .Shapes(DayNum & "Day").DrawingObject.Formula = "=CalPopUp!" & .Cells(RowNum, ColNum).Address
 ColNum = ColNum + 1
 If ColNum = 9 Then
    ColNum = 2
    RowNum = RowNum + 1
 End If
 Next DayNum
 .Shapes("MonthYear").DrawingObject.Formula = "=CalPopUp!$A$5"
End With
End Sub

Sub UnGroupCal()
On Error Resume Next
ActiveSheet.Shapes("Calendar").Ungroup
ActiveSheet.Shapes("NextMonth").Ungroup
ActiveSheet.Shapes("PrevMonth").Ungroup
On Error GoTo 0
End Sub
Sub GroupCal()
ActiveSheet.Shapes.Range(Array("NextTri", "NextRec")).Group.Select
Selection.ShapeRange.Name = "NextMonth"
ActiveSheet.Shapes.Range(Array("PrevTri", "PrevRec")).Group.Select
Selection.ShapeRange.Name = "PrevMonth"
    ActiveSheet.Shapes.Range(Array("Settings", "40Day", "41Day", "39Day", "38Day" _
        , "42Day", "37Day", "36Day", "CalBack", "MonthYear", "CalBorder", "1Day", _
        "3Day", "14Day", "7Day", "4Day", "2Day", "5Day", "8Day", "10Day", "6Day", _
        "13Day", "11Day", "9Day", "12Day", "15Day", "17Day", "20Day", "21Day", "18Day" _
        , "16Day", "19Day", "22Day", "24Day", "26Day", "27Day", "25Day", "23Day", _
        "28Day", "29Day", "31Day", "34Day", "35Day", "32Day", "30Day", "33Day", "Sa", _
        "Fr", "Th", "We", "Tu", "Mo", "Su", "SetBtn", "CalCol1", "CalCol2", "CalCol3", _
        "CalCol4", "CalCol5", "CalCol6", "CalCol7", "CalCol8", "CalCol9", "PrevMonth", _
        "NextMonth")).Visible = msoCTrue
        ActiveSheet.Shapes.Range(Array("Settings", "40Day", "41Day", "39Day", "38Day" _
        , "42Day", "37Day", "36Day", "CalBack", "MonthYear", "CalBorder", "1Day", _
        "3Day", "14Day", "7Day", "4Day", "2Day", "5Day", "8Day", "10Day", "6Day", _
        "13Day", "11Day", "9Day", "12Day", "15Day", "17Day", "20Day", "21Day", "18Day" _
        , "16Day", "19Day", "22Day", "24Day", "26Day", "27Day", "25Day", "23Day", _
        "28Day", "29Day", "31Day", "34Day", "35Day", "32Day", "30Day", "33Day", "Sa", _
        "Fr", "Th", "We", "Tu", "Mo", "Su", "SetBtn", "CalCol1", "CalCol2", "CalCol3", _
        "CalCol4", "CalCol5", "CalCol6", "CalCol7", "CalCol8", "CalCol9", "PrevMonth", _
        "NextMonth")).Select
    Selection.ShapeRange.Group.Select
    Selection.ShapeRange.Name = "Calendar"
    Selection.Name = "Calendar"
    Selection.Placement = xlMove
    ActiveSheet.Shapes("Calendar").Placement = 2
End Sub







Attribute VB_Name = "RightClick_Menu"
Option Explicit
Dim SelLeaveRow As Long

Sub RightClick_CallEvents()
Dim LastLeaveTypeRow As Long
Dim LeaveTypeRow As Long
Dim LeaveBtn As CommandBarPopup
With Sheet4
LastLeaveTypeRow = .Range("G24").End(xlUp).Row
 On Error Resume Next
        With Application
            .CommandBars("Cell").Controls("Add Leave Event").Delete
            Set LeaveBtn = .CommandBars("Cell").Controls.Add(Before:=1, Type:=msoControlPopup)
        End With
        With LeaveBtn
            .Caption = "Add Leave Event"
            For LeaveTypeRow = 7 To LastLeaveTypeRow
                    With .Controls.Add(Type:=msoControlButton)
                        .Caption = Sheet4.Range("G" & LeaveTypeRow).Value
                        .FaceId = 612
                         .OnAction = "CreateLeaveEvent" & LeaveTypeRow
                    End With
            Next LeaveTypeRow
        End With
End With
End Sub
Sub RightClick_Cancel()
    On Error Resume Next
            With Application
                 .CommandBars("Cell").Controls("Add Leave Event").Delete
            End With
    On Error GoTo 0
End Sub
Sub CreateLeaveEvent()
Dim SelRow As Long
Dim SelCol As Long
Dim SelColumns As Long
Dim DateRow As Long
Dim EmpRow As Long
SelRow = ActiveCell.Row
SelCol = ActiveCell.Column
SelColumns = Selection.Columns.Count
If SelCol < 40 Then DateRow = 4 Else: DateRow = 5
EmpRow = ActiveCell.Row - 4 'Set Employee Row
With Sheet5
    .Activate
    Event_AddNew 'Set Events To Add New
    .Range("E4").Value = Sheet2.Range("C" & EmpRow).Value & " " & Sheet4.Range("G" & SelLeaveRow).Value & " Leave" 'Build Event Leave Name
    .Range("H4").Value = "Leave"
    .Range("K4").Value = Sheet8.Range("D" & SelRow).Value 'Full Name
    .Range("J10").Value = Sheet8.Cells(DateRow, SelCol).Value 'Start Date
    .Range("J11").Value = Sheet8.Cells(DateRow, SelCol + SelColumns - 1).Value 'Set Ending On Date
    .Range("N10").Value = Sheet4.Range("G" & SelLeaveRow).Value   'Leave Type
    .Range("E6").Select
End With
End Sub
Sub CreateLeaveEvent7()
SelLeaveRow = 7
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent8()
SelLeaveRow = 8
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent9()
SelLeaveRow = 9
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent10()
SelLeaveRow = 10
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent11()
SelLeaveRow = 11
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent12()
SelLeaveRow = 12
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent13()
SelLeaveRow = 13
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent14()
SelLeaveRow = 14
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent15()
SelLeaveRow = 15
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent16()
SelLeaveRow = 16
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent17()
SelLeaveRow = 17
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent18()
SelLeaveRow = 18
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent19()
SelLeaveRow = 19
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent20()
SelLeaveRow = 20
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent21()
SelLeaveRow = 21
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent22()
SelLeaveRow = 22
CreateLeaveEvent
End Sub
Sub CreateLeaveEvent23()
SelLeaveRow = 23
CreateLeaveEvent
End Sub


Attribute VB_Name = "Scheduling_Macs"
Option Explicit
Sub Sched_ShowHideCapacity()
If Sheet8.Range("B7").Value = True Then Sheet8.Range("7:7").EntireRow.Hidden = False Else: Sheet8.Range("7:7").EntireRow.Hidden = True
End Sub
Sub Sched_ScrollToRow()
ActiveWindow.ScrollRow = Sheet8.Range("B3").Value
End Sub
Sub Sched_Refresh()
With Sheet8
    StopCalc
    .Range("F6:FO6").Copy
    .Range("F8:FO314").PasteSpecial xlPasteFormulas
    .Calculate
    .Range("F8:FO314").Copy
    .Range("F8:FO314").PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    .Range("E2").Select
      .Range("F8:DG314").ClearComments 'Clear All Comments
    ResetCalc
End With
End Sub
Sub Sched_WeekView()
With Sheet8
    StopCalc
    .Shapes("MonthGrp").Visible = msoFalse
    .Shapes("WeekGrp").Visible = msoCTrue
    .Range("F:CZ").EntireColumn.Hidden = True
    .Range("DA:FP").EntireColumn.Hidden = False
    ActiveWindow.FreezePanes = False
    Range("DA8").Select
    ActiveWindow.FreezePanes = True
    .Range("F8:DG309").ClearComments 'Clear All Comments
    ResetCalc
End With
End Sub

Sub Sched_MonthView()
With Sheet8
    StopCalc
    .Shapes("MonthGrp").Visible = msoCTrue
    .Shapes("WeekGrp").Visible = msoFalse
    .Range("F:CZ").EntireColumn.Hidden = False
    .Range("DA:FP").EntireColumn.Hidden = True
    ActiveWindow.FreezePanes = False
    Range("F8").Select
    ActiveWindow.FreezePanes = True

    ResetCalc
End With
End Sub

Sub Sched_PrevWeek()
With Sheet8
.Range("B2").Value = .Range("B2").Value - 7
If Year(.Range("B2").Value) <> .Range("E2").Value Then .Range("E2").Value = .Range("E2").Value - 1
  .Range("F8:DG314").ClearComments 'Clear All Comments
Sched_Refresh
End With
End Sub

Sub Sched_NextWeek()
With Sheet8
.Range("B2").Value = .Range("B2").Value + 7
If Year(.Range("B2").Value) <> .Range("E2").Value Then .Range("E2").Value = .Range("E2").Value + 1
  .Range("F8:DG314").ClearComments 'Clear All Comments
Sched_Refresh
End With
End Sub

Sub Sched_ThisWeek()
Sheet8.Range("B2").Value = Sheet8.Range("A11").Value
Sched_Refresh
End Sub

Sub Sched_ThisMonth()
Sheet8.Range("E2").Value = Year(Now)
Sheet8.Range("B1").Value = Month(Now)
Sched_Refresh
End Sub

Sub Sched_PrevMonth()
With Sheet8
.Range("F8:AK314").ClearComments 'Clear All Comments
If .Range("B1").Value = 1 Then
.Range("E2").Value = .Range("E2").Value - 1
.Range("B1").Value = 12
Else: .Range("B1").Value = .Range("B1").Value - 1
End If
End With
Sched_Refresh
End Sub

Sub Sched_NextMonth()
With Sheet8
.Range("F8:AK314").ClearComments 'Clear All Comments
If .Range("B1").Value = 12 Then
.Range("E2").Value = .Range("E2").Value + 1
.Range("B1").Value = 1
Else: .Range("B1").Value = .Range("B1").Value + 1
End If
End With
Sched_Refresh
End Sub

Sub Sched_AddComment_Event()
Dim ActRow As Long
Dim ActCol As Long
Dim EventID As Long
Dim EventRow As Long
Dim EventIDRng, FoundEventIDRng As Range
Dim EventName, EventType, EventEmpl As String
Dim EventNotes, EventRecur, EventRecQty, EventRecFreq As String
Dim EventCreatedOn, StartOn, EndOn As Date
Dim EventComment As String
With Sheet8
.Range("F8:DG314").ClearComments 'Clear All Comments
ActRow = ActiveCell.Row
ActCol = ActiveCell.Column
If .Cells(ActRow, ActCol + 60).Value = Empty Then Exit Sub
EventID = .Cells(ActRow, ActCol + 60).Value
Set EventIDRng = Sheet7.Range("EventID")
Set FoundEventIDRng = EventIDRng.Find(EventID, , xlValues, xlWhole)
If Not FoundEventIDRng Is Nothing Then
        EventRow = FoundEventIDRng.Row
        EventName = Sheet7.Range("B" & EventRow).Value 'Event Name
        EventType = Sheet7.Range("C" & EventRow).Value 'Event Type
        EventEmpl = Sheet7.Range("D" & EventRow).Value 'Event Employee
        EventNotes = Sheet7.Range("G" & EventRow).Value 'Event Notes
        EventRecur = Sheet7.Range("H" & EventRow).Value 'Recurring Option
        EventRecQty = Sheet7.Range("I" & EventRow).Value 'Recurring Qty
        EventRecFreq = Sheet7.Range("J" & EventRow).Value 'Recurring Frequency
        EventCreatedOn = Sheet7.Range("F" & EventRow).Value 'Event Created On Date & Time
        StartOn = Sheet7.Range("K" & EventRow).Value + Sheet7.Range("L" & EventRow).Value  'Event Start On Date & Time
        EndOn = Sheet7.Range("M" & EventRow).Value + Sheet7.Range("N" & EventRow).Value  'Event End On Date & Time
        EventComment = "Event Name: " & EventName & vbCrLf & "Created On: " & EventCreatedOn & vbCrLf _
        & "Type: " & EventType & vbCrLf & "Employee: " & EventEmpl & vbCrLf & "Event Notes: " & EventNotes & vbCrLf
        'If Recurring Add in Details
         If EventRecur = "Yes" Then EventComment = EventComment & "Recurs Every: " & EventRecQty & " " & EventRecFreq & vbCrLf 'Add On Recurring
         EventComment = EventComment & "Start On: " & StartOn & vbCrLf & "End On: " & EndOn
                    ActiveCell.ClearComments
                     With ActiveCell.AddComment
                    With ActiveCell.Comment
                        .Shape.Width = 240
                        .Shape.Height = 200
                        .Shape.AutoShapeType = msoShapeRoundedRectangle
                        .Shape.TextFrame.Characters.Font.Name = "Tahoma"
                        .Shape.TextFrame.Characters.Font.Size = 11
                        .Shape.TextFrame.Characters.Font.Bold = False
                        .Shape.TextFrame.Characters.Font.ColorIndex = 2
                        .Shape.Line.ForeColor.RGB = RGB(0, 0, 0)
                        .Shape.Line.BackColor.RGB = RGB(255, 255, 255)
                        .Shape.Fill.Visible = msoTrue
                        .Shape.Fill.ForeColor.RGB = RGB(58, 82, 184)
                        .Shape.Fill.OneColorGradient msoGradientDiagonalUp, 1, 0.23
                        .Text Text:=EventComment
                    End With
                End With
End If
    ActiveCell.Comment.Visible = True
End With
End Sub

Sub Sched_AddComment_Holiday()
Dim HolidayDt As Date
Dim HolidayRow As Long
Dim HolidayName As String
Dim HolDtRng As Range
Dim FoundHolDtRng As Range
Set HolDtRng = Sheet4.Range("Holiday_Dates")
HolidayDt = Sheet8.Cells(4, ActiveCell.Column).Value 'Holiday Date
Set FoundHolDtRng = HolDtRng.Find(HolidayDt, , xlValues, xlWhole)
If Not FoundHolDtRng Is Nothing Then
    Sheet8.Range("F8:AK314").ClearComments 'Clear All Comments
    HolidayRow = FoundHolDtRng.Row
    HolidayName = Sheet4.Range("D" & HolidayRow).Value
                    ActiveCell.ClearComments
                With ActiveCell.AddComment
            With ActiveCell.Comment
                .Shape.Width = 200
                .Shape.Height = 20
                .Shape.AutoShapeType = msoShapeRoundedRectangle
                .Shape.TextFrame.Characters.Font.Name = "Tahoma"
                .Shape.TextFrame.Characters.Font.Size = 11
                .Shape.TextFrame.Characters.Font.Bold = False
                .Shape.TextFrame.Characters.Font.ColorIndex = 2
                .Shape.Line.ForeColor.RGB = RGB(0, 0, 0)
                .Shape.Line.BackColor.RGB = RGB(255, 255, 255)
                .Shape.Fill.Visible = msoTrue
                .Shape.Fill.ForeColor.RGB = RGB(102, 0, 204)
                .Shape.Fill.OneColorGradient msoGradientDiagonalUp, 1, 0.23
                .Text Text:="Holiday: " & HolidayName
            End With
        End With
End If
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
SetOnkey (True)
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
Dim EmpRow As Long
Dim PayPeriod As Range
Dim FoundPayPeriod As Range
'On Employee Name Change
If Not Intersect(Target, Range("F2")) Is Nothing Then
    If Range("F2").Value <> Empty And Range("B5").Value <> Empty Then Empl_Load
End If

'Employee ID Change
If Not Intersect(Target, Range("J2")) Is Nothing And Range("B1").Value = False Then 'On change of Employee ID but NOT on Employee Load
    If Range("J2").Value <> Empty And Range("B4").Value <> Empty Then 'Employee ID Found
        Range("F2").Value = Sheet2.Range("BC" & Range("B4").Value).Value
    Else: 'Employee iD Not Found, Return to original
        Range("F2").Value = Sheet2.Range("BC" & Range("B5").Value).Value 'Add Old Employee Name using Old Emoloyee Name Row
        EmployIDNotFound 'Run Fade Out Message Alert
    End If
End If

'On Employee Information Change
If Not Intersect(Target, Range("E6:K24,E182:K182")) Is Nothing And Range("B1").Value = False Then 'On Cell change but not on Employee load
If Range("B4").Value = Empty Or Cells(Target.Row, Target.Column + 22).Value = Empty Or IsNumeric(Cells(Target.Row, Target.Column + 22).Value) = False Then Exit Sub
EmpRow = Range("B4").Value 'Employee Row
Sheet2.Cells(EmpRow, Cells(Target.Row, Target.Column + 22).Value).Value = Target.Value
End If

'On Date Range History Change
If Not Intersect(Target, Range("F26, F46")) Is Nothing And Range("F" & Target.Row).Value <> Empty Then
    Set PayPeriod = Sheet4.Range("PayPeriod")
    Sheet4.Range("209:304").EntireRow.Hidden = False
    Set FoundPayPeriod = PayPeriod.Find(Target.Value, , xlValues, xlWhole)
    If Not FoundPayPeriod Is Nothing Then
        Target.Offset(0, 2).Value = Sheet4.Range("E" & FoundPayPeriod.Row).Value 'From Date
        Target.Offset(0, 4).Value = Sheet4.Range("F" & FoundPayPeriod.Row).Value 'To Date
    End If
        Sheet4.Range("209:304").EntireRow.Hidden = True
End If

'On Employee Leave Change, Update Database Table, but not on Employee Load
If Not Intersect(Target, Range("E168:H179")) Is Nothing And Range("B1").Value = False Then
    Dim LeaveRow As Long
    Dim LeaveID As Long
    Dim LeaveListID As Range
    Set LeaveListID = Sheet11.Range("LeaveList_ID")
        If Range("L" & Target.Row).Value = Empty Then 'New Employee Leave Item
            LeaveRow = Sheet11.Range("A99999").End(xlUp).Row + 1
            LeaveID = Application.WorksheetFunction.Max(LeaveListID) + 1
            Range("L" & Target.Row).Value = LeaveRow
            Sheet11.Range("A" & LeaveRow).Value = LeaveID
            Sheet11.Range("B" & LeaveRow).Value = Range("J2").Value 'Employee ID
            Sheet11.Range("C" & LeaveRow).Value = Range("F2").Value 'Employee Name
            Sheet11.Range("H" & LeaveRow).Value = "=Row()" 'Set Row
        Else:
            LeaveRow = Range("L" & Target.Row).Value
        End If
    Sheet11.Cells(LeaveRow, Target.Column - 1).Value = Target.Value
    End If
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
If Target.Count > 1 Then Exit Sub
    Dim Cal As Shape 'Calendar
    On Error Resume Next
    Set Cal = Shapes("Calendar")
    On Error GoTo 0
    If Cal Is Nothing Then 'Shape Deleted
        Application.EnableEvents = False
         On Error Resume Next
        Application.Undo
        On Error GoTo 0
        Application.EnableEvents = True
    End If
    If Not Intersect(Target, Range("K16,I26,K26,I46,K46")) Is Nothing Then 'Change this to any cell (or cells) you would like to have the Pop-Up Calendar Appear
        CheckForSheet
        CalendarShow
     Else:
        CheckForSheet
        CalendarHide
    End If


'Switching Horizontal Tabs in Row 4
If Not Intersect(Target, Range("E4:K4")) Is Nothing Then
    Range("B2").Value = Target.Column
    Empl_SwitchHorizontalTabs
End If

'Switching Vertical Tabs in Column E
If Not Intersect(Target, Range("E66:E129")) Is Nothing Then
    If Target.Value = Empty Or Target.Value = "Select Option" Then Exit Sub
    SwitchVerticalTabs
End If
If Not Intersect(Target, Range("E19:I24")) Is Nothing Then
    Range("B7").Value = Target.Row
    If Range("J" & Target.Row).Value <> Empty Then Attach_DisplayThumbnail
Else: Range("B7").ClearContents
End If

End Sub
Private Sub Worksheet_Deactivate()
SetOnkey (False)
Dim Cal As Shape
On Error Resume Next
Set Cal = Shapes("Calendar")
On Error GoTo 0
If Cal Is Nothing Then 'Shape Deleted
    Application.EnableEvents = False
    On Error Resume Next
    Application.Undo
    On Error GoTo 0
    Application.EnableEvents = True
End If
End Sub
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Change(ByVal Target As Range)
If Not Intersect(Target, Range("J13")) Is Nothing And Range("J13").Value <> Empty Then Timeclock_EnterID
End Sub


Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
If Not Intersect(Target, Range("D3:E3")) Is Nothing And Range("B3").Value = False Then Attach_Filter
End Sub

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
On Error Resume Next
If Not Intersect(Target, Range("G108:G111")) Is Nothing Then 'On Change Of Custom Field Time
Dim FieldTypeNumber As Long
    FieldTypeNumber = Application.WorksheetFunction.Match(Target.Value, Sheet4.Range("FieldTypes"), 0)
    If FieldTypeNumber <> 0 Then
            If FieldTypeNumber <> 5 Then
                        Sheet1.Range(Sheet4.Range("B" & Target.Row).Value).Validation.Delete 'Delete Any possible Data validation
                         Sheet1.Range(Sheet4.Range("B" & Target.Row).Value).NumberFormat = Sheet4.Range("B" & 119 + FieldTypeNumber).Value
            Else:
                        With Sheet1.Range(Sheet4.Range("B" & Target.Row).Value).Validation
                            .Delete
                            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=CustomList" & Target.Row - 107
                            .IgnoreBlank = True
                            .InCellDropdown = True
                            .ShowInput = True
                            .ShowError = True
                        End With
            End If
    End If
End If
End Sub

Private Sub Worksheet_Deactivate()
Range("B3").Value = 4
Admin_SwitchHorizontalTabs
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
If Target.Count > 1 Then Exit Sub
If Not Intersect(Target, Range("D4:K4")) Is Nothing Then
    Range("B3").Value = Target.Column
    Range("F2").Select
    Admin_SwitchHorizontalTabs
End If
End Sub
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
Dim MapRng As Range
Dim FoundMapRng As Range
Dim CellAdd As String
Dim SelRow As Long
If Not Intersect(Target, Range("L13")) Is Nothing Then
    If Target.Value = "Yes" Then Range("14:21").EntireRow.Hidden = False Else: Range("14:21").EntireRow.Hidden = True
End If
'On Any Existing Event Change Update Event List Table AND Selected Item in List below Events, But not on Event Load
If Not Intersect(Target, Range("D4:N21")) Is Nothing And Range("B2").Value = False And Range("B1").Value = False And IsNumeric(Cells(Target.Row, Target.Column + 23).Value) = True And Cells(Target.Row, Target.Column + 23).Value <> Empty Then
    If Not Intersect(Target, Range("F13:G13")) Is Nothing Then Sheet7.Range("AA" & Range("B3").Value).Value = Range("J10").Value + Range("L10").Value - Range("B11").Value 'Update Reminder On Date & Time
    If Target.Column = 4 Then 'Reminders & Recurring Options
        If InStr(Target.Value, "|fffd|") > 0 Then
        Sheet7.Cells(Range("B3").Value, Cells(Target.Row, Target.Column + 23).Value).Value = "Yes"
        Sheet7.Range("AA" & Range("B3").Value).Value = Range("J10").Value + Range("L10").Value - Range("B11").Value 'Set Reminder On Date & Time
        Else: Sheet7.Cells(Range("B3").Value, Cells(Target.Row, Target.Column + 23).Value).Value = "No"
        End If
    Else: 'All Other fields
       Sheet7.Cells(Range("B3").Value, Cells(Target.Row, Target.Column + 23).Value).Value = Target.Value
    End If
    'Update Table Below
    CellAdd = Target.Address
    SelRow = Range("B10").Value
    Set MapRng = Sheet5.Range("EventDataMap")
    Set FoundMapRng = MapRng.Find(CellAdd, , xlValues, xlWhole)
    If Not FoundMapRng Is Nothing Then Cells(SelRow, FoundMapRng.Column).Value = Sheet7.Cells(Range("B3").Value, Cells(Target.Row, Target.Column + 23).Value).Value
End If
'On change of employee, update Employee ID and Email Address, but not on Event Load
If Not Intersect(Target, Range("K4")) Is Nothing And Range("B5").Value <> Empty And Range("B1").Value = False Then
    Range("F15").Value = Sheet2.Range("M" & Range("B5").Value).Value 'Add Employee Email
    Range("B6").Value = Sheet2.Range("A" & Range("B5").Value).Value
    If Range("B3").Value <> Empty Then Sheet7.Range("E" & Range("B3").Value).Value = Range("B6").Value  'Update Employee ID on Employee Change
End If
End Sub

Private Sub Worksheet_Deactivate()
Dim TP As Shape
On Error Resume Next
Set TP = Shapes("TimePickGrp")
On Error GoTo 0
If TP Is Nothing Then 'Shape Deleted
    Application.EnableEvents = False
    On Error Resume Next
    Application.Undo
    Application.EnableEvents = True
End If
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
If Target.Count > 1 Then Exit Sub
'For Pop-up Calendar
    Dim Cal As Shape 'Calendar
    On Error Resume Next
    Set Cal = Shapes("Calendar")
    On Error GoTo 0
    If Cal Is Nothing Then 'Shape Deleted
        Application.EnableEvents = False
         On Error Resume Next
        Application.Undo
        On Error GoTo 0
        Application.EnableEvents = True
    End If
    If Not Intersect(Target, Range("J10,J11")) Is Nothing Then 'Change this to any cell (or cells) you would like to have the Pop-Up Calendar Appear
        CheckForSheet
        CalendarShow
     Else:
        CheckForSheet
        CalendarHide
    End If
    
'For Pop-up Date Picker
Dim TP As Shape 'Time Picker
On Error Resume Next
Set TP = Shapes("TimePickGrp")
On Error GoTo 0
If TP Is Nothing Then 'Shape Deleted
    Application.EnableEvents = False
    On Error Resume Next
    Application.Undo
    On Error GoTo 0
    Application.EnableEvents = True
End If
If Not Intersect(Target, Range("L10,L11")) Is Nothing Then
'If Sheet is Protected, add Unprotect Code here such as ActiveSheet.Unprotect "Password"
    TPShow
 Else:
    Shapes("TimePickGrp").Visible = msoFalse
End If

'On Table Selection
If Not Intersect(Target, Range("D27:N9999")) Is Nothing And Range("D" & Target.Row).Value <> Empty Then
    Range("B10").Value = Target.Row 'Add in Selected Row
    Range("B4").Value = Range("O" & Target.Row).Value 'Add In Event ID
    Event_Load
End If

'On Recurring Selection
If Not Intersect(Target, Range("D10")) Is Nothing Then
With ActiveCell
If .Value = "|fffd|      Recurring" Then .Value = "o      Recurring" Else: .Value = "|fffd|      Recurring"
.Characters(Start:=1, Length:=1).Font.Name = "Wingdings"
.Characters(Start:=2, Length:=16).Font.Name = "Calibri"
End With
Range("F11").Select
End If

'On Reminders selection
If Not Intersect(Target, Range("D13")) Is Nothing Then
With ActiveCell
If .Value = "|fffd|    Reminders" Then .Value = "o    Reminders" Else: .Value = "|fffd|    Reminders"
.Characters(Start:=1, Length:=1).Font.Name = "Wingdings"
.Characters(Start:=2, Length:=15).Font.Name = "Calibri"
If .Value = "|fffd|    Reminders" Then
    Sheet5.Shapes("EventRemindIcons").Visible = msoCTrue
Else:
Sheet5.Shapes("EventRemindIcons").Visible = msoFalse
Range("L13").Value = "No"
End If
End With
Range("I13").Select
End If
End Sub


Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
Sched_Refresh
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
'Clear Comments on Year Change
If Not Intersect(Target, Range("E2")) Is Nothing Then Range("F3:DG309").ClearComments 'Clear All Comments
If Not Intersect(Target, Range("D3")) Is Nothing Then
    If Range("B3").Value <> Empty Then Sched_ScrollToRow Else: ActiveWindow.ScrollRow = 7
End If
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
If Target.Count > 5 Then Exit Sub
If Not Intersect(Target, Range("F2")) Is Nothing Then Sched_WeekView
If Not Intersect(Target, Range("DB2")) Is Nothing Then Sched_MonthView
If Not Intersect(Target, Range("F7:DG309")) Is Nothing Then
If Cells(Target.Row, Target.Column + 60).Value <> Empty Then Sched_AddComment_Event
If Cells(5, Target.Column).Value = "H" Then Sched_AddComment_Holiday
Application.DisplayCommentIndicator = xlCommentIndicatorOnly
End If
End Sub
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Activate()
If ActiveSheet.CodeName = "Sheet1" Then SetOnkey (True) Else: SetOnkey (False)
End Sub

Private Sub Workbook_Deactivate()
SetOnkey (False)
End Sub

Private Sub Workbook_SheetBeforeRightClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)
On Error Resume Next
Application.CommandBars("Cell").Controls("Add Leave Event").Delete
On Error GoTo 0
If ActiveSheet.CodeName = "Sheet8" Then RightClick_CallEvents
End Sub
Attribute VB_Name = "TimeClock_Macros"

Option Explicit
Dim RunClk As Boolean
Dim EmpRow As Long


Sub Timeclock_EnterID()
Dim TimeClockRow As Long
Dim MessRow As Long
Dim TimeRow As Long
Dim EmpID As String
Dim EmpName As String
Dim TimeClockID As String
Dim TimeClockID_Prev As String
Dim EntryType As String
Dim TimeClockIDRng As Range
Dim FoundTimeClockIDRng As Range
Dim FoundPrevTimeClockIDRng As Range
Dim DayThreshold As Double
Dim BreakThreshold As Double
Dim TotalHours As Double
Dim TotalBreakHours As Double

With Sheet12

'Hide Any Remaining Pop-Up Messages
.Shapes("IDNotFound").Visible = msoFalse
.Shapes("AlreadyEntered").Visible = msoFalse
.Shapes("TimeclockMessage").Visible = msoFalse

.Range("J13").Select 'Select Employee ID Cell to get ready for next entry

        'Check For Proper Employee ID
        If .Range("B24").Value = Empty Then
            .Range("J13").ClearContents
            Timeclock_IDNotFound
            Exit Sub
        End If
        DayThreshold = Sheet4.Range("DayThreshold").Value
        BreakThreshold = Sheet4.Range("BreakThreshold").Value
        
        'Determine Clock In or Clock Out
       
        EmpID = .Range("J13").Value
        EmpName = .Range("B25").Value 'Employee Name
        EmpRow = .Range("B24").Value 'Employee Row
End With
With Sheet9
        'Build Timeclock ID's
        TimeClockID = Year(Now) & "_" & Month(Now) & "_" & Day(Now) & "_" & EmpID 'Set Time Clock ID for Current Day
        TimeClockID_Prev = Year(Now) & "_" & Month(Now) & "_" & Day(Now - 1) & "_" & EmpID 'Set Time Clock ID for Previous Day
        Set TimeClockIDRng = .Range("TimeClockList_ID")
        Set FoundTimeClockIDRng = TimeClockIDRng.Find(TimeClockID, , xlValues, xlWhole)
        
        If FoundTimeClockIDRng Is Nothing Then 'ID Not found
        
                'Before Adding a New Row, Double Check that Employee is Not working overnight shift and clocked in the night before
                    Set FoundPrevTimeClockIDRng = TimeClockIDRng.Find(TimeClockID_Prev, , xlValues, xlWhole)
                    If Not FoundPrevTimeClockIDRng Is Nothing Then 'Previous ID Found
                                TimeClockRow = FoundPrevTimeClockIDRng.Row 'Previous Day TimeClock Row
                                
                                 'Clock Out For Break On Specific 3 Conditions (Clock Out Break Must Be Empty, Admin Enabled Breaks, Under Day Threshold)
                                If .Range("E" & TimeClockRow).Value = Empty And Sheet4.Range("BreakOption").Value = "Yes" And (Now - .Range("D" & TimeClockRow).Value) * 24 < DayThreshold Then
                                    .Range("E" & TimeClockRow).Value = Now 'Add Clock Out From Break
                                    EntryType = "BreakOut"
                                    GoTo EntryAdded
                                End If
                                
                                'Clock In From Break On Specific  4  Conditions (Clock Out For Break is Not Empty, Clock In From Break is Empty, Admin Enabled Breaks, and Under Break Threshold )
                                If .Range("E" & TimeClockRow).Value <> Empty And .Range("F" & TimeClockRow).Value = Empty And Sheet4.Range("BreakOption").Value = "Yes" And (Now - .Range("E" & TimeClockRow).Value) * 24 < BreakThreshold Then
                                    .Range("F" & TimeClockRow).Value = Now 'Add Clock In From Break
                                    EntryType = "BreakIn"
                                    GoTo EntryAdded
                                End If
                                
                                'Clock Out For the Day On Certain 2 Conditions (Clock Out is Empty and Under Day Threshold)
                                If .Range("G" & TimeClockRow).Value = Empty And (Now - .Range("D" & TimeClockRow).Value) * 24 < DayThreshold Then
                                    .Range("G" & TimeClockRow).Value = Now
                                    EntryType = "DayOut"
                                    GoTo EntryAdded
                                End If
                    End If 'End Previous ID found

                'ID Not Found So Add New ID and Clock In Employee
                TimeClockRow = .Range("A999999").End(xlUp).Row + 1  'First Available Row
                .Range("A" & TimeClockRow).Value = TimeClockID
                .Range("B" & TimeClockRow).Value = EmpID 'Employee ID
                .Range("C" & TimeClockRow).Value = EmpName 'Employee Name
                .Range("D" & TimeClockRow).Value = Now 'Clock in current Time & Date
                .Range("I" & TimeClockRow).Value = "=Row()" 'Set Row Formula
                EntryType = "DayIn"
                GoTo EntryAdded 'Skip All Other Options
        
        Else ' TimeClock ID Found
            TimeClockRow = FoundTimeClockIDRng.Row 'Set row of Found Time clock
                
        
            'Clock Out For Break On Certain 3 Conditions (Clock Out Break Must Be Empty, Admin Enabled Breaks, Under Day Threshold)
            If .Range("E" & TimeClockRow).Value = Empty And Sheet4.Range("BreakOption").Value = "Yes" And (Now - .Range("D" & TimeClockRow).Value) * 24 < DayThreshold Then
                 .Range("E" & TimeClockRow).Value = Now 'Add Clock Out From Break
                    EntryType = "BreakOut"
                    GoTo EntryAdded
            End If
            
           'Clock In From Break On Certain 4  Conditions (Clock Out For Break is Not Empty, Clock In From Break is Empty, Admin Enabled Breaks, and Under Break Threshold )
           If .Range("E" & TimeClockRow).Value <> Empty And .Range("F" & TimeClockRow).Value = Empty And Sheet4.Range("BreakOption").Value = "Yes" And (Now - .Range("E" & TimeClockRow).Value) * 24 < BreakThreshold Then
                    .Range("F" & TimeClockRow).Value = Now 'Add Clock In From Break
                    EntryType = "BreakIn"
                    GoTo EntryAdded
            End If
            
            'Clock Out For the Day On Certain 2 Conditions (Clock Out is Empty and Under Day Threshold)
             If .Range("G" & TimeClockRow).Value = Empty And (Now - .Range("D" & TimeClockRow).Value) * 24 < DayThreshold Then
                .Range("G" & TimeClockRow).Value = Now
                EntryType = "DayOut"
                GoTo EntryAdded
             End If
        
        End If ' End If Timeclock ID Found
If EntryType = Empty Then GoTo EntryAddedAlready
EntryAdded:
'Check For Completed Shift
If Sheet9.Range("F" & TimeClockRow).Value <> Empty Then TotalBreakHours = (Sheet9.Range("F" & TimeClockRow).Value - Sheet9.Range("E" & TimeClockRow).Value) * 24
If TotalBreakHours < 0 Then TotalBreakHours = 0
If Sheet9.Range("G" & TimeClockRow).Value <> Empty Then TotalHours = ((Sheet9.Range("G" & TimeClockRow).Value - Sheet9.Range("D" & TimeClockRow).Value) * 24) - TotalBreakHours

If EntryType = "DayIn" Then 'Set Time Row
        If TimeValue(Now) < Sheet4.Range("E408").Value Then TimeRow = 1
        If TimeValue(Now) > Sheet4.Range("E410").Value Then TimeRow = 3
        If TimeRow = 0 Then TimeRow = 2
End If
If EntryType = "DayOut" Then 'Set Time Row
        If TimeValue(Now) < Sheet4.Range("E413").Value Then TimeRow = 1
        If TimeValue(Now) > Sheet4.Range("E415").Value Then TimeRow = 3
        If TimeRow = 0 Then TimeRow = 2
End If

Select Case EntryType
     Case Is = "BreakOut"
        MessRow = 418
    Case Is = "BreakIn"
        MessRow = 419
    Case Is = "DayIn"
        MessRow = 407 + TimeRow
    Case Is = "DayOut"
        MessRow = 412 + TimeRow
End Select

Sheet12.Range("B26").Value = Replace(Replace(Replace(Replace(Sheet4.Range("F" & MessRow).Value, "[Employee Name]", EmpName), "[Time]", TimeValue(Now)), "[Total Hours]", Round(TotalHours, 2)), "[Total Break]", Round(TotalBreakHours, 2))
'Get Employee Picture if Applicable

ActiveSheet.Shapes("TimeclockMessage").Visible = msoCTrue
If Sheet4.Range("PictureOption").Value = "Yes" And Sheet2.Range("AC" & EmpRow).Value <> Empty Then Timeclock_DisplayPicture
Application.ScreenUpdating = True
Application.Wait Now + 0.00007
ActiveSheet.Shapes("TimeclockMessage").Visible = msoFalse
On Error Resume Next
ActiveSheet.Shapes("EmplPic").Visible = msoFalse
On Error GoTo 0
Sheet12.Range("J13").ClearContents
RunClk = False
Timeclock_StartStop
End With
Exit Sub
EntryAddedAlready:
Timeclock_AlreadyEntered
End Sub

Sub Timeclock_IDNotFound()
Dim i As Integer
Dim delay As Double
Dim StartTime As Double
With ActiveSheet.Shapes("IDNotFound")
.Visible = True
  For i = 1 To 300
  .Fill.Transparency = i / 300
    delay = 0.00004
    StartTime = Timer
    Do
    DoEvents
    Loop While Timer - StartTime < delay
  Next i
.Visible = False
End With
End Sub
Sub Timeclock_AlreadyEntered()
Dim i As Integer
Dim delay As Double
Dim StartTime As Double
With ActiveSheet.Shapes("AlreadyEntered")
.Visible = True
  For i = 1 To 350
  .Fill.Transparency = i / 350
    delay = 0.00003
    StartTime = Timer
    Do
    DoEvents
    Loop While Timer - StartTime < delay
  Next i
.Visible = False
End With
End Sub
Sub Timeclock_DisplayPicture()
Dim PicPath As String
With Sheet12
On Error Resume Next
.Shapes("EmplPic").Delete 'Delete Picture if it exists
On Error GoTo 0
PicPath = Sheet2.Range("AC" & EmpRow).Value 'Path of the picture
On Error GoTo NoPic
With .Pictures.Insert(PicPath)
    With .ShapeRange
        .LockAspectRatio = msoTrue
        .Height = 125
        .Name = "EmplPic"
    End With 'Shape Range
End With 'Pictures

With .Shapes("EmplPic")
    .Left = Sheet12.Range("K15").Left
    .Top = Sheet12.Range("K15").Top
    .IncrementLeft 20
    .IncrementTop 10
    .SoftEdge.Type = msoSoftEdgeType4
End With
NoPic:
End With 'Sheet 1

End Sub
Sub Timeclock_StartStop()
With Sheet12
.Range("J13").Select
    RunClk = Not (RunClk)
    Do While RunClk = True
        DoEvents
        .Range("A29") = TimeValue(Now)
        DoEvents
        .Range("A30") = Now()
        Loop
End With
End Sub

Attribute VB_Name = "Time_Picker_Macros"
Option Explicit
Sub UnProtTP()
On Error Resume Next
ActiveSheet.Shapes("TimePickGrp").Ungroup
On Error GoTo 0
 'Add in any Unprotect sheet code here such as ActiveSheet.Unprotect "Password"
'Application.ScreenUpdating = False
End Sub
Sub ProtTP()
Dim GrpRange, GrpShapes
On Error GoTo ExitSub
 Set GrpShapes = ActiveSheet.Shapes.Range(Array("MainBack", "BackCircle", "HrsGrp", "8Sel", _
        "9Sel", "10Sel", "11Sel", "12Sel", "1Sel", "2Sel", "3Sel", "4Sel", "5Sel", _
        "HrsDisp", "Colon", "MinDisp", "AMPM", "AMAct", "PMInact", "DivLine", "DoneBtn" _
        , "SettingsBtn", "6Sel", "7Sel", "MinGrp", "PMAct", "AMInact", "00MSel", _
        "05MSel", "10MSel", "15MSel", "20MSel", "25MSel", "30MSel", "35MSel", "40MSel", _
        "45MSel", "50MSel", "55MSel", "SetGrp"))
      Set GrpRange = GrpShapes.Group
      GrpRange.Name = "TimePickGrp"
      ActiveSheet.Shapes("TimePickGrp").Placement = 2
ExitSub:
'Add in any Protect sheet code here such as ActiveSheet.Protect "Password"
'Application.ScreenUpdating = True
End Sub
Sub TPShow()
Dim SelCell As Range
Dim Hr As Long
'On Error GoTo NoTP
 'If Sheet is Protected, add Unprotect Code here such as ActiveSheet.Unprotect "Password"
With ActiveSheet.Shapes("TimePickGrp")
Set SelCell = Selection
    .Visible = msoCTrue
   ' On Error Resume Next
    .Left = SelCell.Left
    .Top = SelCell.Offset(1, 0).Top
  ' On Error GoTo 0
End With
UnProtTP
HideHrSel
HideMinSel
'Check for Links from another workbook
UnGrpSet
If InStr(ActiveSheet.Shapes("5Pie1").OnAction, "!") <> 0 Then  'Run Workbook Link Remover
    UnGrpHrs
    UnGrpMin
    MacroLinkRemover
    GrpHrs
    GrpMin
    GrpSet
Else:
GrpSet
End If
If ActiveCell.Value <> Empty Then Hr = Format(ActiveCell.Value, "hh")
If Hr >= 13 Then Hr = Hr - 12
If Hr = 0 Then Hr = 12

If ActiveCell.Value <> Empty Then ActiveSheet.Shapes("HrsDisp").TextFrame.Characters.Text = Hr
If ActiveCell.Value <> Empty Then ActiveSheet.Shapes("MInDisp").TextFrame.Characters.Text = Right(Format(ActiveCell.Value, "h:mm"), 2)
If ActiveCell.Value <> Empty Then ActiveSheet.Shapes("AMPM").TextFrame.Characters.Text = Format(ActiveCell.Value, "AM/PM")
ActiveSheet.Shapes("SetGrp").Visible = msoFalse
HoursDisplay
ProtTP
 'If Sheet is Protected, Add Protection Code here such as ActiveSheet.Protect "Password"
Exit Sub
NoTP:
MsgBox "The Time Picker has been removed from this sheet. Please copy the entire Time Picker from another sheet and paste it into this sheet"
 'If Sheet is Protected, Add Protection Code here such as ActiveSheet.Protect "Password"
End Sub
Sub HoursDisplay()
Dim Siz, CurLeft, CurTop As Long
With ActiveSheet
UnProtTP
HideMinSel
HideHrSel
.Shapes("MinDisp").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
.Shapes("HrsDisp").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 0, 0)
If ActiveCell.Value = Empty Then 'Set Default TIme to 12PM
    .Shapes("HrsDisp").TextFrame.Characters.Text = "12"
    .Shapes("MinDisp").TextFrame.Characters.Text = "00"
    .Shapes("AMPM").TextFrame.Characters.Text = "PM"
End If
.Shapes("MinGrp").Visible = False
    With .Shapes("HrsGrp")
    .Visible = True
    CurLeft = .Left
    CurTop = .Top
            For Siz = 180 To 152 Step -4
                .Width = Siz
                .Height = Siz
                .Left = 152 - Siz + CurLeft
                .Top = 152 - Siz + CurTop
                Application.Wait (Now + 0#)
            Next Siz
    End With
On Error Resume Next
.Shapes(.Shapes("HrsDisp").TextFrame.Characters.Text & "Sel").Visible = True
On Error GoTo 0
ProtTP
End With
End Sub
Sub MinDisplay()
Dim Siz, CurLeft, CurTop As Long
Dim Inter As String
Dim Intg5, Intg10, Intg15 As Integer
With ActiveSheet
UnProtTP
Intg5 = .Shapes("5MinTxt").Fill.Visible
Intg10 = .Shapes("10MinTxt").Fill.Visible
Intg15 = .Shapes("15MinTxt").Fill.Visible
If Intg5 = -1 Then Inter = "5M"
If Intg10 = -1 Then Inter = "10M"
If Intg15 = -1 Then Inter = "15M"

HideHrSel
.Shapes("HrsDisp").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
.Shapes("MInDisp").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 0, 0)
.Shapes("HrsGrp").Visible = False
.Shapes("MinGrp").Visible = True
If Inter = "10M" Or Inter = "15M" Then .Shapes("05Min").Visible = False
If Inter = "15M" Then .Shapes("10Min").Visible = False
If Inter = "10M" Then .Shapes("15Min").Visible = False
If Inter = "15M" Then .Shapes("20Min").Visible = False
If Inter = "10M" Or Inter = "15M" Then .Shapes("25Min").Visible = False
If Inter = "10M" Or Inter = "15M" Then .Shapes("35Min").Visible = False
If Inter = "15M" Then .Shapes("40Min").Visible = False
If Inter = "10M" Then .Shapes("45Min").Visible = False
If Inter = "15M" Then .Shapes("50Min").Visible = False
If Inter = "10M" Or Inter = "15M" Then .Shapes("55Min").Visible = False
    With .Shapes("MinGrp")
'    .Visible = True
    CurLeft = .Left
    CurTop = .Top
            For Siz = 126 To 152 Step 2
                .Width = Siz
                .Height = Siz
                .Left = 152 - Siz + CurLeft
                .Top = 152 - Siz + CurTop
                Application.Wait (Now + 0#)
            Next Siz
    End With
On Error Resume Next
.Shapes(.Shapes("MinDisp").TextFrame.Characters.Text & "MSel").Visible = True
On Error GoTo 0
ProtTP
End With
End Sub
Sub HideHrSel()
With ActiveSheet
.Shapes("1Sel").Visible = False
.Shapes("2Sel").Visible = False
.Shapes("3Sel").Visible = False
.Shapes("4Sel").Visible = False
.Shapes("5Sel").Visible = False
.Shapes("6Sel").Visible = False
.Shapes("7Sel").Visible = False
.Shapes("8Sel").Visible = False
.Shapes("9Sel").Visible = False
.Shapes("10Sel").Visible = False
.Shapes("11Sel").Visible = False
.Shapes("12Sel").Visible = False
End With
End Sub
Sub HideMinSel()
With ActiveSheet
.Shapes("05MSel").Visible = False
.Shapes("10MSel").Visible = False
.Shapes("15MSel").Visible = False
.Shapes("20MSel").Visible = False
.Shapes("25MSel").Visible = False
.Shapes("30MSel").Visible = False
.Shapes("35MSel").Visible = False
.Shapes("40MSel").Visible = False
.Shapes("45MSel").Visible = False
.Shapes("50MSel").Visible = False
.Shapes("55MSel").Visible = False
.Shapes("00MSel").Visible = False
End With
End Sub
Sub AMPMSel()
If ActiveSheet.Shapes("AMPM").TextFrame.Characters.Text = "AM" Then PMSel Else: AMSel
End Sub
Sub AMSel()
UnProtTP
With ActiveSheet
.Shapes("AMPM").TextFrame.Characters.Text = "AM"
.Shapes("AMAct").Visible = True
.Shapes("AMInact").Visible = False
.Shapes("PMAct").Visible = False
.Shapes("PMInact").Visible = True
End With
ProtTP
End Sub
Sub PMSel()
UnProtTP
With ActiveSheet
.Shapes("AMPM").TextFrame.Characters.Text = "PM"
.Shapes("AMAct").Visible = False
.Shapes("AMInact").Visible = True
.Shapes("PMAct").Visible = True
.Shapes("PMInact").Visible = False
End With
ProtTP
End Sub

Sub Select1()
UnProtTP
HideHrSel
With ActiveSheet
.Shapes("1Sel").Visible = True
.Shapes("HrsDisp").TextFrame.Characters.Text = "1"
MinDisplay
End With
ProtTP
End Sub
Sub Select2()
UnProtTP
HideHrSel
With ActiveSheet
.Shapes("2Sel").Visible = True
.Shapes("HrsDisp").TextFrame.Characters.Text = "2"
If .Shapes("HrsGrp").Visible = True Then MinDisplay
End With
ProtTP
End Sub
Sub Select3()
UnProtTP
HideHrSel
With ActiveSheet
.Shapes("3Sel").Visible = True
.Shapes("HrsDisp").TextFrame.Characters.Text = "3"
MinDisplay
End With
ProtTP
End Sub
Sub Select4()
UnProtTP
HideHrSel
With ActiveSheet
.Shapes("4Sel").Visible = True
.Shapes("HrsDisp").TextFrame.Characters.Text = "4"
MinDisplay
End With
ProtTP
End Sub
Sub Select5()
UnProtTP
HideHrSel
With ActiveSheet
.Shapes("5Sel").Visible = True
.Shapes("HrsDisp").TextFrame.Characters.Text = "5"
MinDisplay
End With
ProtTP
End Sub
Sub Select6()
UnProtTP
HideHrSel
With ActiveSheet
.Shapes("6Sel").Visible = True
.Shapes("HrsDisp").TextFrame.Characters.Text = "6"
MinDisplay
End With
ProtTP
End Sub
Sub Select7()
UnProtTP
HideHrSel
With ActiveSheet
.Shapes("7Sel").Visible = True
.Shapes("HrsDisp").TextFrame.Characters.Text = "7"
MinDisplay
End With
ProtTP
End Sub
Sub Select8()
UnProtTP
HideHrSel
With ActiveSheet
.Shapes("8Sel").Visible = True
.Shapes("HrsDisp").TextFrame.Characters.Text = "8"
MinDisplay
End With
ProtTP
End Sub
Sub Select9()
UnProtTP
HideHrSel
With ActiveSheet
.Shapes("9Sel").Visible = True
.Shapes("HrsDisp").TextFrame.Characters.Text = "9"
MinDisplay
End With
ProtTP
End Sub
Sub Select10()
UnProtTP
HideHrSel
With ActiveSheet
.Shapes("10Sel").Visible = True
.Shapes("HrsDisp").TextFrame.Characters.Text = "10"
MinDisplay
End With
ProtTP
End Sub
Sub Select11()
UnProtTP
HideHrSel
With ActiveSheet
.Shapes("11Sel").Visible = True
.Shapes("HrsDisp").TextFrame.Characters.Text = "11"
MinDisplay
End With
ProtTP
End Sub
Sub Select12()
UnProtTP
HideHrSel
With ActiveSheet
.Shapes("12Sel").Visible = True
.Shapes("HrsDisp").TextFrame.Characters.Text = "12"
MinDisplay
End With
ProtTP
End Sub
Sub SelectM00()
UnProtTP
HideMinSel
With ActiveSheet
.Shapes("00MSel").Visible = True
.Shapes("MinDisp").TextFrame.Characters.Text = "00"
End With
ProtTP
End Sub
Sub SelectM05()
UnProtTP
HideMinSel
With ActiveSheet
.Shapes("05MSel").Visible = True
.Shapes("MinDisp").TextFrame.Characters.Text = "05"
End With
ProtTP
End Sub
Sub SelectM10()
UnProtTP
HideMinSel
With ActiveSheet
.Shapes("10MSel").Visible = True
.Shapes("MinDisp").TextFrame.Characters.Text = "10"
End With
ProtTP
End Sub
Sub SelectM15()
UnProtTP
HideMinSel
With ActiveSheet
.Shapes("15MSel").Visible = True
.Shapes("MinDisp").TextFrame.Characters.Text = "15"
End With
ProtTP
End Sub
Sub SelectM20()
UnProtTP
HideMinSel
With ActiveSheet
.Shapes("20MSel").Visible = True
.Shapes("MinDisp").TextFrame.Characters.Text = "20"
End With
ProtTP
End Sub
Sub SelectM25()
UnProtTP
HideMinSel
With ActiveSheet
.Shapes("25MSel").Visible = True
.Shapes("MinDisp").TextFrame.Characters.Text = "25"
End With
ProtTP
End Sub
Sub SelectM30()
UnProtTP
HideMinSel
With ActiveSheet
.Shapes("30MSel").Visible = True
.Shapes("MinDisp").TextFrame.Characters.Text = "30"
End With
ProtTP
End Sub
Sub SelectM35()
UnProtTP
HideMinSel
With ActiveSheet
.Shapes("35MSel").Visible = True
.Shapes("MinDisp").TextFrame.Characters.Text = "35"
End With
ProtTP
End Sub
Sub SelectM40()
UnProtTP
HideMinSel
With ActiveSheet
.Shapes("40MSel").Visible = True
.Shapes("MinDisp").TextFrame.Characters.Text = "40"
End With
ProtTP
End Sub
Sub SelectM45()
UnProtTP
HideMinSel
With ActiveSheet
.Shapes("45MSel").Visible = True
.Shapes("MinDisp").TextFrame.Characters.Text = "45"
End With
ProtTP
End Sub
Sub SelectM50()
UnProtTP
HideMinSel
With ActiveSheet
.Shapes("50MSel").Visible = True
.Shapes("MinDisp").TextFrame.Characters.Text = "50"
End With
ProtTP
End Sub
Sub SelectM55()
UnProtTP
HideMinSel
With ActiveSheet
.Shapes("55MSel").Visible = True
.Shapes("MinDisp").TextFrame.Characters.Text = "55"
End With
ProtTP
End Sub

Sub DoneBtn()
With ActiveSheet
    ActiveCell.Value = .Shapes("HrsDisp").TextFrame.Characters.Text & ":" & .Shapes("MinDisp").TextFrame.Characters.Text & " " & .Shapes("AMPM").TextFrame.Characters.Text
    .Shapes("TimePickGrp").Visible = False
    'SetHideShow
End With
End Sub

Sub SetHideShow()
With ActiveSheet
UnProtTP
If .Shapes("SetGrp").Visible = False Then
.Shapes("SetGrp").Visible = msoCTrue
Else
.Shapes("SetGrp").Visible = False
End If
End With

ProtTP
End Sub
Sub Set5MinInt()
 With ActiveSheet
    .Shapes("5MinTxt").Fill.ForeColor.RGB = RGB(140, 58, 58)
    .Shapes("5MinTxt").Fill.Visible = msoCTrue
    .Shapes("10MinTxt").Fill.Visible = msoFalse
    .Shapes("15MinTxt").Fill.Visible = msoFalse
 End With
 MinDisplay
 SelectM00
End Sub

Sub Set10MinInt()
 With ActiveSheet
    .Shapes("10MinTxt").Fill.ForeColor.RGB = RGB(140, 58, 58)
    .Shapes("10MinTxt").Fill.Visible = msoCTrue
    .Shapes("5MinTxt").Fill.Visible = msoFalse
    .Shapes("15MinTxt").Fill.Visible = msoFalse
 End With
 MinDisplay
 SelectM00
End Sub

Sub Set15MinInt()
 With ActiveSheet
    .Shapes("15MinTxt").Fill.ForeColor.RGB = RGB(140, 58, 58)
    .Shapes("15MinTxt").Fill.Visible = msoCTrue
    .Shapes("10MinTxt").Fill.Visible = msoFalse
    .Shapes("5MinTxt").Fill.Visible = msoFalse
 End With
 MinDisplay
 SelectM00
End Sub

Sub SetThm1()
ActiveSheet.Shapes.Range(Array("SetBack", "MainBack")).Fill.ForeColor.RGB = RGB(64, 64, 64)
ActiveSheet.Shapes("BackCircle").Fill.ForeColor.RGB = RGB(54, 54, 54)
End Sub
Sub SetThm2()
ActiveSheet.Shapes.Range(Array("SetBack", "MainBack")).Fill.ForeColor.RGB = RGB(55, 96, 146)
ActiveSheet.Shapes("BackCircle").Fill.ForeColor.RGB = RGB(37, 64, 97)
End Sub
Sub SetThm3()
ActiveSheet.Shapes.Range(Array("SetBack", "MainBack")).Fill.ForeColor.RGB = RGB(119, 147, 60)
ActiveSheet.Shapes("BackCircle").Fill.ForeColor.RGB = RGB(79, 98, 40)
End Sub
Sub SetThm4()
ActiveSheet.Shapes.Range(Array("SetBack", "MainBack")).Fill.ForeColor.RGB = RGB(96, 74, 123)
ActiveSheet.Shapes("BackCircle").Fill.ForeColor.RGB = RGB(64, 49, 82)
End Sub
Sub SetThm5()
ActiveSheet.Shapes.Range(Array("SetBack", "MainBack")).Fill.ForeColor.RGB = RGB(49, 133, 156)
ActiveSheet.Shapes("BackCircle").Fill.ForeColor.RGB = RGB(33, 89, 104)
End Sub

Sub UnGrpHrs()
On Error Resume Next
ActiveSheet.Shapes("HrsGrp").Ungroup
On Error GoTo 0
End Sub
Sub GrpHrs()
Dim GrpRange, GrpShapes
On Error GoTo ExitSub
 Set GrpShapes = ActiveSheet.Shapes.Range(Array("1Hr", "2Hr", "3Hr", "4Hr", "5Hr", "6Hr", "7Hr", "8Hr", "9Hr", "10Hr", "11Hr", "12Hr"))
      Set GrpRange = GrpShapes.Group
      GrpRange.Name = "HrsGrp"
ExitSub:
End Sub

Sub UnGrpMin()
On Error Resume Next
ActiveSheet.Shapes("MinGrp").Ungroup
On Error GoTo 0
End Sub
Sub GrpMin()
Dim GrpRange, GrpShapes
On Error GoTo ExitSub
 Set GrpShapes = ActiveSheet.Shapes.Range(Array("00Min", "05Min", "10Min", "15Min", "20Min", "25Min", "30Min", "35Min", "40Min", "45Min", "50Min", "55Min"))
      Set GrpRange = GrpShapes.Group
      GrpRange.Name = "MinGrp"
ExitSub:
End Sub
Sub UnGrpSet()
On Error Resume Next
ActiveSheet.Shapes("SetGrp").Ungroup
ActiveSheet.Shapes("5Thm").Ungroup
ActiveSheet.Shapes("4Thm").Ungroup
ActiveSheet.Shapes("3Thm").Ungroup
ActiveSheet.Shapes("2Thm").Ungroup
ActiveSheet.Shapes("1Thm").Ungroup
ActiveSheet.Shapes("5MinGrp").Ungroup
ActiveSheet.Shapes("10MinGrp").Ungroup
ActiveSheet.Shapes("15MinGrp").Ungroup
On Error GoTo 0
End Sub
Sub GrpSet()
Dim GrpRange, GrpShapes
On Error GoTo ExitSub
 Set GrpShapes = ActiveSheet.Shapes.Range(Array("5Pie1", "5Pie2"))
      Set GrpRange = GrpShapes.Group
      GrpRange.Name = "5Thm"
Set GrpShapes = ActiveSheet.Shapes.Range(Array("4Pie1", "4Pie2"))
      Set GrpRange = GrpShapes.Group
      GrpRange.Name = "4Thm"
 Set GrpShapes = ActiveSheet.Shapes.Range(Array("3Pie1", "3Pie2"))
      Set GrpRange = GrpShapes.Group
      GrpRange.Name = "3Thm"
 Set GrpShapes = ActiveSheet.Shapes.Range(Array("2Pie1", "2Pie2"))
      Set GrpRange = GrpShapes.Group
      GrpRange.Name = "2Thm"
 Set GrpShapes = ActiveSheet.Shapes.Range(Array("1Pie1", "1Pie2"))
      Set GrpRange = GrpShapes.Group
      GrpRange.Name = "1Thm"
 Set GrpShapes = ActiveSheet.Shapes.Range(Array("5MinPie", "5MinTxt"))
      Set GrpRange = GrpShapes.Group
      GrpRange.Name = "5MinGrp"
 Set GrpShapes = ActiveSheet.Shapes.Range(Array("10MinPie", "10MinTxt"))
      Set GrpRange = GrpShapes.Group
      GrpRange.Name = "10MinGrp"
 Set GrpShapes = ActiveSheet.Shapes.Range(Array("15MinPie", "15MinTxt"))
      Set GrpRange = GrpShapes.Group
      GrpRange.Name = "15MinGrp"
 Set GrpShapes = ActiveSheet.Shapes.Range(Array("SetBack", "1Thm", "2Thm", "3Thm", "4Thm", "5Thm", "IntTxt", "ThmTxt", "5MinGrp", "10MinGrp", "15MinGrp"))
      Set GrpRange = GrpShapes.Group
      GrpRange.Name = "SetGrp"
ExitSub:
End Sub
Sub MacroLinkRemover()
'PURPOSE: Remove an external workbook reference from all shapes triggering macros
'Source: www.ExcelForFreelancers.com
Dim shp As Shape
Dim MacroLink, NewLink As String
Dim SplitLink As Variant

  For Each shp In ActiveSheet.Shapes 'Loop through each shape in worksheet
  
    'Grab current macro link (if available)
    On Error GoTo NextShp
      MacroLink = shp.OnAction
    
    'Determine if shape was linking to a macro
      If MacroLink <> "" And InStr(MacroLink, "!") <> 0 Then
        'Split Macro Link at the exclaimation mark (store in Array)
          SplitLink = Split(MacroLink, "!")
        
        'Pull text occurring after exclaimation mark
          NewLink = SplitLink(1)
        
        'Remove any straggling apostrophes from workbook name
            If Right(NewLink, 1) = "'" Then
              NewLink = Left(NewLink, Len(NewLink) - 1)
            End If
        
        'Apply New Link
          shp.OnAction = NewLink
      End If
NextShp:
  Next shp
End Sub






' InQuest injected base64 decoded content
' x)hrB

INQUEST-PP=macro
