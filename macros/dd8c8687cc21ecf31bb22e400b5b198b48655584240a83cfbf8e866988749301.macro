Attribute VB_Name = "Modul1"
Public Function Create_dataSheet()
   Dim I As Integer
   Dim II As Integer
   Dim III As Integer
   Dim intMax As Integer
   Dim strRange As String
   Dim strModel As String
   Dim strMauFacType As String
   Dim strDESC As String
   Dim strSR As String
   Dim strSRService_side As String
   Dim pos As Integer
   
   I = 2
   III = 2
   With ThisWorkbook.Sheets("Component and Equipment list")
    Do
    
    If Sheets("DATA").Range("E" & CStr(I)) = "" Then
    Else
        .Range("A" & CStr(III)) = Sheets("DATA").Range("C" & CStr(I)) 'PLANT_CODE
        .Range("B" & CStr(III)) = Sheets("DATA").Range("D" & CStr(I)) 'PID_DOC_NAME
        .Range("C" & CStr(III)) = Sheets("DATA").Range("BP" & CStr(I)) 'Equipment ID
        .Range("D" & CStr(III)) = Sheets("DATA").Range("E" & CStr(I)) 'Equipment type
        
        strDESC = Sheets("DATA").Range("E" & CStr(I)) 'Equipment type
        
        pos = InStr(Sheets("DATA").Range("BG" & CStr(I)), "MCG") 'If Mechanical connection is a gasket, pos > 0 then GASKET
        
        Select Case strDESC
        Case "Sensor"
            .Range("E" & CStr(III)) = Sheets("DATA").Range("BN" & CStr(I)) 'Sensor get Measuring type value
        Case "Mechanical connection"
            If pos > 0 Then 'If pos > 0 Then GASKET
            .Range("E" & CStr(III)) = Sheets("DATA").Range("BT" & CStr(I)) 'Construction type (MC Gasket)
            Else
            .Range("E" & CStr(III)) = Sheets("DATA").Range("AR" & CStr(I)) & "/" & Sheets("DATA").Range("BT" & CStr(I))
            End If
        Case Else
            .Range("E" & CStr(III)) = Sheets("DATA").Range("AR" & CStr(I)) 'Others get Construction type
        End Select
        
        Select Case strDESC
        Case "Mechanical connection"
            If pos > 0 Then
                .Range("F" & CStr(III)) = Sheets("DATA").Range("BU" & CStr(I)) 'VENDOR
            Else
                .Range("F" & CStr(III)) = Sheets("DATA").Range("F" & CStr(I)) & "/" & Sheets("DATA").Range("BU" & CStr(I)) 'VENDOR
            End If
        Case Else
            .Range("F" & CStr(III)) = Sheets("DATA").Range("F" & CStr(I)) 'VENDOR
        End Select
        
        Select Case strDESC
        Case "Valve", "Safety valve", "Check valve", "Rupture disc", "Sensor"
            .Range("G" & CStr(III)) = Sheets("DATA").Range("G" & CStr(I)) 'MANUFACT
        Case "Mechanical connection"
            If pos > 0 Then
            .Range("G" & CStr(III)) = Sheets("DATA").Range("I" & CStr(I)) 'MANUFACT_mc_gasket
            Else
            .Range("G" & CStr(III)) = Sheets("DATA").Range("G" & CStr(I)) & "/" & Sheets("DATA").Range("I" & CStr(I))
            End If
        Case Else
            .Range("G" & CStr(III)) = Sheets("DATA").Range("G" & CStr(I)) 'MANUFACT
        End Select
        
        
        Select Case strDESC
        Case "Valve", "Safety valve", "Check valve", "Rupture disc", "Sensor"
    
            strMauFacType = Sheets("DATA").Range("J" & CStr(I)) 'MANUFACT_TYPE_NO
            strModel = Sheets("DATA").Range("K" & CStr(I)) 'MODEL
            
            If strModel = "" Then
                .Range("H" & CStr(III)) = strMauFacType
            Else
                .Range("H" & CStr(III)) = strModel & " " & strMauFacType
            End If
        Case "Mechanical connection"
            If pos > 0 Then
                .Range("H" & CStr(III)) = Sheets("DATA").Range("L" & CStr(I)) 'Gasket Manufacturer type no
            Else
                .Range("H" & CStr(III)) = Sheets("DATA").Range("J" & CStr(I)) & "/" & Sheets("DATA").Range("L" & CStr(I))
            End If
        Case Else
            .Range("H" & CStr(III)) = Sheets("DATA").Range("J" & CStr(I)) 'Manufacturer type no
        End Select
            '.Range("H" & CStr(III)) = Sheets("DATA").Range("M" & CStr(I)) '_DESCRIPTION
        
        'Relief pressure [barg]
        Select Case strDESC
        Case "Pressure reduction"
            .Range("I" & CStr(III)) = Sheets("DATA").Range("BS" & CStr(I))
        Case Else
            .Range("I" & CStr(III)) = Sheets("DATA").Range("BJ" & CStr(I))
        End Select
        
        
        ''Process conn.
        Select Case strDESC
         Case "Heat exchanger"
            .Range("J" & CStr(III)) = Sheets("DATA").Range("AM" & CStr(I)) & Chr(13) & Chr(10) & Sheets("DATA").Range("AS" & CStr(I))   'MECH_CONNECTION_SECONDARY_MEDIA
         Case "Mechanical connection"
            If pos > 0 Then
                .Range("J" & CStr(III)) = Sheets("DATA").Range("U" & CStr(I)) & "; " & Sheets("DATA").Range("AJ" & CStr(I)) 'Dimension
            Else
                .Range("J" & CStr(III)) = Sheets("DATA").Range("Q" & CStr(I)) & "; " & Sheets("DATA").Range("AJ" & CStr(I)) 'Dimension & Type (Mech Conn)
            End If
         Case Else
            .Range("J" & CStr(III)) = Sheets("DATA").Range("AM" & CStr(I))
        End Select
        
      ''Equipment dimension
        Select Case strDESC
         Case "Heat exchanger"
            .Range("K" & CStr(III)) = "n/a"
            '.Range("I" & CStr(III)) = Sheets("DATA").Range("R" & CStr(I)) & Chr(13) & Chr(10) & Sheets("DATA").Range("S" & CStr(I))   'MECH_CONNECTION_SECONDARY_MEDIA
        Case "Filter"
            .Range("K" & CStr(III)) = Sheets("DATA").Range("T" & CStr(I)) 'FILTER_HOUSE_DIM
        Case "Compensator", "Flame Arrestor", "Orifice", "Pressure reduction", "Control Valve", "Spray Nozzle", "Static Mixer", "Steam Trap"
            .Range("K" & CStr(III)) = Sheets("DATA").Range("O" & CStr(I)) 'MECH_CONNECTION_DIM
        Case "Hose", "Spool piece"
            .Range("K" & CStr(III)) = Sheets("DATA").Range("BK" & CStr(I)) 'Length
        Case "Crane"
            .Range("K" & CStr(III)) = Sheets("DATA").Range("BL" & CStr(I)) 'CAPACITY
         Case "Sigth glass", "Sight glass"
            .Range("K" & CStr(III)) = Sheets("DATA").Range("P" & CStr(I)) 'DIMENSION
        Case "Check Valve", "Mechanical Connection", "Rupture Disc", "Safety valve", "Valve"
            .Range("K" & CStr(III)) = Sheets("DATA").Range("Q" & CStr(I)) 'DN
        Case Else
            .Range("K" & CStr(III)) = "n/a"
        End Select
        
        
        ''Wetted non-polymer
           Select Case strDESC
         Case "Heat exchanger"
            .Range("L" & CStr(III)) = Sheets("DATA").Range("AK" & CStr(I)) & Chr(13) & Chr(10) & Sheets("DATA").Range("AU" & CStr(I))  'non polymer
         Case "Mechanical connection"
            If pos > 0 Then
                .Range("L" & CStr(III)) = Sheets("DATA").Range("AO" & CStr(I)) 'Non-polymer (MC Gasket)
            Else
                .Range("L" & CStr(III)) = Sheets("DATA").Range("BW" & CStr(I)) & "/" & Sheets("DATA").Range("AO" & CStr(I))
            End If
         Case Else
            .Range("L" & CStr(III)) = Sheets("DATA").Range("AK" & CStr(I))
         End Select
         
         
         ''Wetted polymer
                 
           Select Case strDESC
         Case "Heat exchanger"
             .Range("M" & CStr(III)) = Sheets("DATA").Range("AL" & CStr(I)) & Chr(13) & Chr(10) & Sheets("DATA").Range("AT" & CStr(I))  'non polymer
         Case "Mechanical connection"
            If pos > 0 Then
                .Range("M" & CStr(III)) = Sheets("DATA").Range("AN" & CStr(I)) 'Polymer (MC Gasket)
            Else
                .Range("M" & CStr(III)) = Sheets("DATA").Range("BV" & CStr(I)) & "/" & Sheets("DATA").Range("AN" & CStr(I)) 'Polymer/Polymer (MC Gasket)
            End If
         Case Else
            .Range("M" & CStr(III)) = Sheets("DATA").Range("AL" & CStr(I)) 'Polymer
        End Select
        
        'liquids
        Select Case strDESC
         Case "Check Valve", "Mechanical Connection", "Rupture Disc", "Safety valve", "Valve", "Block valve", "Top work", "Sensor"
            If Sheets("DATA").Range("AB" & CStr(I)) = "" Then
                .Range("N" & CStr(III)) = "n/a"
            Else
                .Range("N" & CStr(III)) = Sheets("DATA").Range("AB" & CStr(I))
            End If
            Case "Agitator/mixer", "Centrifuge", "Column", "Compressor", "Filter", "Functional unit", "Gear", "Pressure reduction", "Pump", "Control valve", "Heat Exchanger"
                .Range("N" & CStr(III)) = Sheets("DATA").Range("AB" & CStr(I))
            Case "Compensator", "Crane", "Flame arrestor", "Hose", "Spool piece", "Motor", "Orifice", "Sigth glass", "Spray nozzle", "Static mixer", "Steam trap", "Tank", "Check valve", "Rupture disc", "Mechanical connection", "Heat exchanger"
                .Range("N" & CStr(III)) = "n/a"
        End Select
        
         ''Media classification
        Select Case strDESC
         Case "Heat exchanger"
            .Range("O" & CStr(III)) = Sheets("DATA").Range("Z" & CStr(I)) '' Chr(13) & Chr(10) & Sheets("DATA").Range("AS" & CStr(I))   'MECH_CONNECTION_SECONDARY_MEDIA
         Case Else
            .Range("O" & CStr(III)) = Sheets("DATA").Range("Z" & CStr(I))
        End Select
        
        
        ''Surface Roughness (EQ)
        If Sheets("DATA").Range("BH" & CStr(I)) = "True" Then
            strSR = "n/a"
        Else
            strSR = Sheets("DATA").Range("AP" & CStr(I))
        End If
                
        Select Case strDESC
                 
        Case "Heat exchanger"
                If Sheets("DATA").Range("BI" & CStr(I)) = "True" Then
                    strSRService_side = "n/a"
                Else
                    strSRService_side = Sheets("DATA").Range("AW" & CStr(I))
                End If
        
             .Range("P" & CStr(III)) = strSR & Chr(13) & Chr(10) & strSRService_side
        
        Case "Spray nozzle"
            If Sheets("DATA").Range("BH" & CStr(I)) = "True" Then
                .Range("P" & CStr(III)) = strSR
            Else
                strSR_outer = Sheets("DATA").Range("BR" & CStr(I))
                
                .Range("P" & CStr(III)) = strSR & Chr(13) & Chr(10) & strSR_outer
            End If
            
        
        Case "Mechanical connection"
            If pos > 0 Then
                If Sheets("DATA").Range("BH" & CStr(I)) = "True" Then
                    strSR = "n/a"
                Else
                    strSR = Sheets("DATA").Range("AP" & CStr(I))
                End If
            Else
                If Sheets("DATA").Range("BX" & CStr(I)) = "True" Then
                    strSR = "n/a"
                Else
                    strSR = Sheets("DATA").Range("BY" & CStr(I))
                End If
            End If
            .Range("P" & CStr(III)) = strSR 'REQ_SURFACE_ROUGHNESS
        Case Else
            .Range("P" & CStr(III)) = strSR 'REQ_SURFACE_ROUGHNESS
        End Select
        
        
        
        
        ''CE comments
        Select Case strDESC
        Case "Agitator/Mixer", "Filter", "Functional Unit", "Crane", "Centrifuge", "Colomn", "Gear", "Pump"
            .Range("Q" & CStr(III)) = Sheets("DATA").Range("Y" & CStr(I)) 'CE_MACHINERY_DIRECTIVE
         Case Else
            .Range("Q" & CStr(III)) = "n/a" 'CE_MACHINERY_DIRECTIVE
         End Select
        .Range("R" & CStr(III)) = Sheets("DATA").Range("AA" & CStr(I)) 'ATEX Code (Manufacturer label)
        .Range("S" & CStr(III)) = Sheets("DATA").Range("AC" & CStr(I)) 'Valve Actuating (EQ)
        
        'ACTUATOR_TYPE_EQ_CALC FOR CATALOGUE COMPONENTS - ACTUATOR_MANUFACTURER_TYPE_NO FOR OTHER
        .Range("T" & CStr(III)) = Sheets("DATA").Range("AQ" & CStr(I)) 'Actuator Fail safe function (EQ Calc)
        .Range("U" & CStr(III)) = Sheets("DATA").Range("AD" & CStr(I)) & Sheets("DATA").Range("BQ" & CStr(I)) 'Actuator manufacturer type no
        .Range("V" & CStr(III)) = Sheets("DATA").Range("AE" & CStr(I)) 'Feed back Manufacturer Type
        .Range("W" & CStr(III)) = Sheets("DATA").Range("AX" & CStr(I)) 'Tag status index
        .Range("X" & CStr(III)) = Sheets("DATA").Range("AY" & CStr(I)) 'EQ Status Inde
        
        .Range("Y" & CStr(III)) = Sheets("DATA").Range("AZ" & CStr(I)) 'Media Spec
        .Range("Z" & CStr(III)) = Sheets("DATA").Range("BA" & CStr(I)) 'Pipe Spec
        .Range("AA" & CStr(III)) = Sheets("DATA").Range("AG" & CStr(I)) 'CR No
        .Range("AB" & CStr(III)) = Sheets("DATA").Range("AF" & CStr(I)) 'I protocol
        .Range("AC" & CStr(III)) = Sheets("DATA").Range("BB" & CStr(I)) 'Internal order no
        .Range("AD" & CStr(III)) = Sheets("DATA").Range("BC" & CStr(I)) 'Project price
        .Range("AE" & CStr(III)) = Sheets("DATA").Range("BD" & CStr(I)) 'Delivery date
        .Range("AF" & CStr(III)) = Sheets("DATA").Range("BE" & CStr(I)) 'Comment on order
        .Range("AG" & CStr(III)) = Sheets("DATA").Range("BF" & CStr(I)) 'Rec insp.
        .Range("AH" & CStr(III)) = Sheets("DATA").Range("BG" & CStr(I)) 'Catalogue ID
        .Range("AI" & CStr(III)) = Sheets("DATA").Range("BM" & CStr(I)) 'Valve Block Designations
        .Range("AJ" & CStr(III)) = Sheets("DATA").Range("BO" & CStr(I)) 'Room no
        
        III = III + 1
    End If
        
    I = I + 1
    
    Loop Until "" = Sheets("DATA").Range("A" & CStr(I))
   End With
    ActiveWorkbook.Sheets("Component and Equipment list").Select
End Function





Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "moRemoveDuplicates"


INQUEST-PP=macro
