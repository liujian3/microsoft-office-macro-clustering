Attribute VB_Name = "ParusModule"
Option Explicit

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| FIELD |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'  Context.SelectSingleNode("//MASTER/" & Field).Text
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Detail
'  Context.FirstChild.SelectNodes("//DETAIL").Length
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| N-|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| detail
'  Context.FirstChild.SelectNodes("//DETAIL/" & FIELD).Item(N).Text
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| DETAIL, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| FIELD |fffd||fffd||fffd||fffd||fffd| VALUE
' Context.FirstChild.SelectNodes("//DETAIL[" & FIELD & "= """ & VALUE & """]")
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| MASTER (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Detail)
' Context.FirstChild.FirstChild.ChildNodes.Length - 1
'|fffd||fffd||fffd| N-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| MASTER
' Context.FirstChild.FirstChild.ChildNodes.Item(N).TagName
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Detail
' Context.FirstChild.SelectSingleNode("//DETAIL").ChildNodes.Length
'|fffd||fffd||fffd| N-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| DETAIL
' Context.FirstChild.SelectSingleNode("//DETAIL").ChildNodes.Item(N).TagName
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel:
'
'|fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'For i = 0 To Context.FirstChild.FirstChild.ChildNodes.Length - 2
'  FieldName = Context.FirstChild.FirstChild.ChildNodes.Item(i).TagName
'  Cells(1, i + 1).Value = FieldName
'  Cells(2, i + 1).Value = Context.SelectSingleNode("//MASTER/" & FieldName).Text
'Next

'Detail
'|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'For i = 0 To Context.FirstChild.SelectSingleNode("//DETAIL").ChildNodes.Length - 1
'FieldName = Context.FirstChild.SelectSingleNode("//DETAIL").ChildNodes.Item(i).TagName
'Cells(3, i + 1).Value = FieldName
'  |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'  For j = 0 To Context.FirstChild.SelectNodes("//DETAIL").Length - 1
'   Cells(j + 4, i + 1).Value = Context.FirstChild.SelectNodes("//DETAIL/" & FieldName).Item(j).Text
'Next j, i

Dim Company As String         '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim UnitCode As String        '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim XMLContext As String      'XML |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim ParusCommunicator As Object
Const Reserved As String = "%s"
Private Const CCharCount = 26
Private Const CStartChar = 64
Private Const CEndRow = 0
Private Const CBeginRow = 1
Private Const CRowCount = 2
Private Const CEndColumn = 3
Private Const CBeginColumn = 4
Private Const CColumnCount = 5


#If Win64 Then
Private Declare PtrSafe Function GetTempFileName Lib "kernel32" Alias "GetTempFileNameA" (ByVal lpszPath As String, ByVal lpPrefixString As String, ByVal wUnique As Long, ByVal lpTempFileName As String) As Long
Private Declare PtrSafe Function GetTempPath Lib "kernel32" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
#Else
Private Declare Function GetTempFileName Lib "kernel32" Alias "GetTempFileNameA" (ByVal lpszPath As String, ByVal lpPrefixString As String, ByVal wUnique As Long, ByVal lpTempFileName As String) As Long
Private Declare Function GetTempPath Lib "kernel32" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
#End If
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub InitConnection(Optional ACompany As String, Optional AUnitCode As String, Optional AReadHandle As Long, Optional AWriteHandle As Long, Optional AProcessHandle As Long, Optional AXMLContext As String)
  Dim I As Integer
  Dim Found As Integer
  Dim R As Object
  Dim Sheet As Object
  UnitCode = AUnitCode
  Company = ACompany
  XMLContext = AXMLContext

  On Error GoTo Err_Create

  Set ParusCommunicator = CreateObject("P8Proxy.Pipes")
  ParusCommunicator.ReadHandle = AReadHandle
  ParusCommunicator.WriteHandle = AWriteHandle
  ParusCommunicator.ProcessHandle = AProcessHandle

  I = 1

  While I <= ThisWorkBook.VBProject.References.Count
     Set R = ThisWorkBook.VBProject.References(I)
     If R.IsBroken Then ThisWorkBook.VBProject.References.Remove R Else I = I + 1
  Wend
Err_Create:
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
Private Function ParusQuery(ByVal aCommand As String) As String
  If ParusCommunicator Is Nothing Then
    ParusQuery = ""
  Else
    ParusQuery = ParusCommunicator.ParusQuery(aCommand)
  End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub CheckForString(ByRef v As Variant)
   If IsError(v) Or IsMissing(v) Or IsNull(v) Then
     v = ""
   End If
End Sub

Public Sub CheckForNumber(v As Variant)
Dim Dl As String, aPos As Long
   If IsNumeric(v) Then
     v = Format$(v, "0.00")
     Dl = Format$(0, ".")
     aPos = InStr(1, v, Dl)
     If aPos > 0 Then
       Mid$(v, aPos, 1) = "."
     End If
   Else
     v = ""
   End If
End Sub

Public Sub CheckForDate(ByRef v As Variant)
   If IsDate(v) Then
     v = Format$(v, "d/m/yyyy")
   Else
     v = ""
   End If
End Sub

Public Function StrToFloat(ByVal Str As String, Optional FuncName As Variant) As Double
      StrToFloat = CDbl(Str)
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function TRDBS(Optional AccDebit As Variant, Optional BUDebit As Variant, Optional AccCredit As Variant, Optional BUCredit As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant) As Double
   Dim AData, ASep As String
   CheckForString AccDebit
   CheckForString BUDebit
   CheckForString AccCredit
   CheckForString BUCredit
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   ASep = """" + ";" + """"
   AData = "TRDBS;" + """" + CStr(AccDebit) + ASep + CStr(BUDebit) + """" + ";;;;;;" + """" + CStr(AccCredit) + ASep + CStr(BUCredit) + """" + ";;;;;;" + """" + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + """"
   TRDBS = StrToFloat(ParusQuery(AData), "TRDBS")
End Function

Public Function TRCRS(Optional AccDebit As Variant, Optional BUDebit As Variant, Optional AccCredit As Variant, Optional BUCredit As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString AccDebit
   CheckForString BUDebit
   CheckForString AccCredit
   CheckForString BUCredit
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   ASep = """" + ";" + """"
   AData = "TRCRS;" + """" + CStr(AccCredit) + ASep + CStr(BUCredit) + """" + ";;;;;;" + """" + CStr(AccDebit) + ASep + CStr(BUDebit) + """" + ";;;;;;" + """" + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + """"
   TRCRS = StrToFloat(ParusQuery(AData), "TRCRS")
End Function

Public Function R_RA(Optional BalUnit As Variant, Optional BalElem As Variant, Optional Account As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional RemnType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString BalUnit
   CheckForString BalElem
   CheckForString Account
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString AccType
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString RemnType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "R_RA;" + """" + CStr(BalUnit) + ASep + CStr(BalElem) + ASep + CStr(Account) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + RemnType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   R_RA = StrToFloat(ParusQuery(AData), "R_RA")
End Function

Public Function R_RM(Optional BalUnit As Variant, Optional BalElem As Variant, Optional Account As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional RemnType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString BalUnit
   CheckForString BalElem
   CheckForString Account
   CheckForString AccType
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString RemnType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "R_RM;" + """" + CStr(BalUnit) + ASep + CStr(BalElem) + ASep + CStr(Account) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + RemnType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   R_RM = StrToFloat(ParusQuery(AData), "R_RM")
End Function

Public Function R_RS(Optional BalUnit As Variant, Optional BalElem As Variant, Optional Account As Variant, Optional AgnGrp As Variant, Optional Agent As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional RemnType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                     Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                     Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString BalUnit
   CheckForString BalElem
   CheckForString Account
   CheckForString AgnGrp
   CheckForString Agent
   CheckForString AccType
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString RemnType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "R_RS;" + """" + CStr(BalUnit) + ASep + CStr(BalElem) + ASep + CStr(Account) + ASep + CStr(AgnGrp) + ASep + CStr(Agent) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + RemnType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   R_RS = StrToFloat(ParusQuery(AData), "R_RS")
End Function

Public Function R_RSA(Optional BalUnit As Variant, Optional BalElem As Variant, Optional Account As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional AgnGrp As Variant, Optional Agent As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional RemnType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                      Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                      Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString BalUnit
   CheckForString BalElem
   CheckForString Account
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString AgnGrp
   CheckForString Agent
   CheckForString AccType
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString RemnType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay
   ASep = """" + ";" + """"
   AData = "R_RSA;" + """" + CStr(BalUnit) + ASep + CStr(BalElem) + ASep + CStr(Account) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(AgnGrp) + ASep + CStr(Agent) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + RemnType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   R_RSA = StrToFloat(ParusQuery(AData), "R_RSA")
End Function

Public Function R_RV(Optional BalUnit As Variant, Optional BalElem As Variant, Optional Account As Variant, Optional AgnGrp As Variant, Optional Agent As Variant, Optional NomGrp As Variant, Optional Nomen As Variant, Optional NomPart As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional RemnType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString BalUnit
   CheckForString BalElem
   CheckForString Account
   CheckForString AgnGrp
   CheckForString Agent
   CheckForString NomGrp
   CheckForString Nomen
   CheckForString NomPart
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString AccType
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString RemnType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "R_RV;" + """" + CStr(BalUnit) + ASep + CStr(BalElem) + ASep + CStr(Account) + ASep + CStr(AgnGrp) + ASep + CStr(Agent) + ASep + CStr(NomGrp) + ASep + CStr(Nomen) + ASep + CStr(NomPart) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + RemnType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   R_RV = StrToFloat(ParusQuery(AData), "R_RV")
End Function

Public Function R_RVQ(Optional BalUnit As Variant, Optional BalElem As Variant, Optional Account As Variant, Optional AgnGrp As Variant, Optional Agent As Variant, Optional NomGrp As Variant, Optional Nomen As Variant, Optional NomPart As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional QuantType As Variant, Optional RemnType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString BalUnit
   CheckForString BalElem
   CheckForString Account
   CheckForString AgnGrp
   CheckForString Agent
   CheckForString NomGrp
   CheckForString Nomen
   CheckForString NomPart
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString AccType
   CheckForString Curr
   CheckForDate DateOf
   CheckForString QuantType
   CheckForString RemnType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "R_RVQ;" + """" + CStr(BalUnit) + ASep + CStr(BalElem) + ASep + CStr(Account) + ASep + CStr(AgnGrp) + ASep + CStr(Agent) + ASep + CStr(NomGrp) + ASep + CStr(Nomen) + ASep + CStr(NomPart) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + DateOf + ASep + QuantType + ASep + RemnType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   R_RVQ = StrToFloat(ParusQuery(AData), "R_RVQ")
End Function

Public Function R_T(Optional BalUnit As Variant, Optional BalElem As Variant, Optional Account As Variant, Optional AgnGrp As Variant, Optional Agent As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional TurnType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString BalUnit
   CheckForString BalElem
   CheckForString Account
   CheckForString AgnGrp
   CheckForString Agent
   CheckForString AccType
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString TurnType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "R_T;" + """" + CStr(BalUnit) + ASep + CStr(BalElem) + ASep + CStr(Account) + ASep + CStr(AgnGrp) + ASep + CStr(Agent) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + TurnType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   R_T = StrToFloat(ParusQuery(AData), "R_T")
End Function

Public Function R_TA(Optional BalUnit As Variant, Optional BalElem As Variant, Optional Account As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional AgnGrp As Variant, Optional Agent As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional TurnType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString BalUnit
   CheckForString BalElem
   CheckForString Account
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString AgnGrp
   CheckForString Agent
   CheckForString AccType
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString TurnType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "R_TA;" + """" + CStr(BalUnit) + ASep + CStr(BalElem) + ASep + CStr(Account) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(AgnGrp) + ASep + CStr(Agent) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + TurnType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   R_TA = StrToFloat(ParusQuery(AData), "R_TA")
End Function

Public Function R_TAV(Optional BalUnit As Variant, Optional BalElem As Variant, Optional Account As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional AgnGrp As Variant, Optional Agent As Variant, Optional NomGrp As Variant, Optional Nomen As Variant, Optional NomPart As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional TurnType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString BalUnit
   CheckForString BalElem
   CheckForString Account
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString AgnGrp
   CheckForString Agent
   CheckForString NomGrp
   CheckForString Nomen
   CheckForString NomPart
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString AccType
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString TurnType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "R_TAV;" + """" + CStr(BalUnit) + ASep + CStr(BalElem) + ASep + CStr(Account) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(AgnGrp) + ASep + CStr(Agent) + ASep + CStr(NomGrp) + ASep + CStr(Nomen) + ASep + CStr(NomPart) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + TurnType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   R_TAV = StrToFloat(ParusQuery(AData), "R_TAV")
End Function

Public Function R_TAVQ(Optional BalUnit As Variant, Optional BalElem As Variant, Optional Account As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional AgnGrp As Variant, Optional Agent As Variant, Optional NomGrp As Variant, Optional Nomen As Variant, Optional NomPart As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional QuantType As Variant, Optional TurnType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString BalUnit
   CheckForString BalElem
   CheckForString Account
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString AgnGrp
   CheckForString Agent
   CheckForString NomGrp
   CheckForString Nomen
   CheckForString NomPart
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString AccType
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString QuantType
   CheckForString TurnType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "R_TAVQ;" + """" + CStr(BalUnit) + ASep + CStr(BalElem) + ASep + CStr(Account) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(AgnGrp) + ASep + CStr(Agent) + ASep + CStr(NomGrp) + ASep + CStr(Nomen) + ASep + CStr(NomPart) + ASep + DateIn + ASep + DateOut + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + QuantType + ASep + TurnType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   R_TAVQ = StrToFloat(ParusQuery(AData), "R_TAVQ")
End Function

Public Function R_TN(Optional BUDebit As Variant, Optional BEDebit As Variant, Optional AccDebit As Variant, Optional AgnGrpTo As Variant, Optional AgentTo As Variant, Optional BUCredit As Variant, Optional BECredit As Variant, Optional AccCredit As Variant, Optional AgnGrpFrom As Variant, Optional AgentFrom As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString BUDebit
   CheckForString BEDebit
   CheckForString AccDebit
   CheckForString AgnGrpTo
   CheckForString AgentTo
   CheckForString BUCredit
   CheckForString BECredit
   CheckForString AccCredit
   CheckForString AgnGrpFrom
   CheckForString AgentFrom
   CheckForString AccType
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "R_TN;" + """" + CStr(BUDebit) + ASep + CStr(BEDebit) + ASep + CStr(AccDebit) + ASep + CStr(AgnGrpTo) + ASep + CStr(AgentTo) + ASep + CStr(BUCredit) + ASep + CStr(BECredit) + ASep + CStr(AccCredit) + ASep + CStr(AgnGrpFrom) + ASep + CStr(AgentFrom) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   R_TN = StrToFloat(ParusQuery(AData), "R_TN")
End Function

Public Function R_TNA(Optional BUDebit As Variant, Optional BEDebit As Variant, Optional AccDebit As Variant, Optional AnlDb1 As Variant, Optional AnlDb2 As Variant, Optional AnlDb3 As Variant, Optional AnlDb4 As Variant, Optional AnlDb5 As Variant, Optional AgnGrpTo As Variant, Optional AgentTo As Variant, Optional BUCredit As Variant, Optional BECredit As Variant, Optional AccCredit As Variant, Optional AnlCr1 As Variant, Optional AnlCr2 As Variant, Optional AnlCr3 As Variant, Optional AnlCr4 As Variant, Optional AnlCr5 As Variant, Optional AgnGrpFrom As Variant, Optional AgentFrom As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString BUDebit
   CheckForString BEDebit
   CheckForString AccDebit
   CheckForString AnlDb1
   CheckForString AnlDb2
   CheckForString AnlDb3
   CheckForString AnlDb4
   CheckForString AnlDb5
   CheckForString AgnGrpTo
   CheckForString AgentTo
   CheckForString BUCredit
   CheckForString BECredit
   CheckForString AccCredit
   CheckForString AnlCr1
   CheckForString AnlCr2
   CheckForString AnlCr3
   CheckForString AnlCr4
   CheckForString AnlCr5
   CheckForString AgnGrpFrom
   CheckForString AgentFrom
   CheckForString AccType
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "R_TNA;" + """" + CStr(BUDebit) + ASep + CStr(BEDebit) + ASep + CStr(AccDebit) + ASep + CStr(AnlDb1) + ASep + CStr(AnlDb2) + ASep + CStr(AnlDb3) + ASep + CStr(AnlDb4) + ASep + CStr(AnlDb5) + ASep + CStr(AgnGrpTo) + ASep + CStr(AgentTo) + ASep + CStr(BUCredit) + ASep + CStr(BECredit) + ASep + CStr(AccCredit) + ASep + CStr(AnlCr1) + ASep + CStr(AnlCr2) + ASep + CStr(AnlCr3) + ASep + CStr(AnlCr4) + ASep + CStr(AnlCr5) + ASep + CStr(AgnGrpFrom) + ASep + CStr(AgentFrom) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   R_TNA = StrToFloat(ParusQuery(AData), "R_TNA")
End Function

'Public Function R_TNAV(Optional BUDebit As Variant, Optional BEDebit As Variant, Optional AccDebit As Variant, Optional AnlDb1 As Variant, Optional AnlDb2 As Variant, Optional AnlDb3 As Variant, Optional AnlDb4 As Variant, Optional AnlDb5 As Variant, Optional AgnGrpTo As Variant, Optional AgentTo As Variant, Optional BUCredit As Variant, Optional BECredit As Variant, Optional AccCredit As Variant, Optional AnlCr1 As Variant, Optional AnlCr2 As Variant, Optional AnlCr3 As Variant, _
'                       Optional AnlCr4 As Variant, Optional AnlCr5 As Variant, Optional AgnGrpFrom As Variant, Optional AgentFrom As Variant, Optional NomGrp As Variant, Optional Nomen As Variant, Optional NomPart As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
'Dim AData, ASep As String
'   CheckForString BUDebit
'   CheckForString BEDebit
'   CheckForString AccDebit
'   CheckForString AnlDb1
'   CheckForString AnlDb2
'   CheckForString AnlDb3
'   CheckForString AnlDb4
'   CheckForString AnlDb5
'   CheckForString AgnGrpTo
'   CheckForString AgentTo
'   CheckForString BUCredit
'   CheckForString BECredit
'   CheckForString AccCredit
'   CheckForString AnlCr1
'   CheckForString AnlCr2
'   CheckForString AnlCr3
'   CheckForString AnlCr4
'   CheckForString AnlCr5
'   CheckForString AgnGrpFrom
'   CheckForString AgentFrom
'   CheckForString NomGrp
'   CheckForString Nomen
'   CheckForString NomPart
'   CheckForDate DateIn
'   CheckForDate DateOut
'   CheckForString AccType
'   CheckForString Curr
'   CheckForDate BegDate
'   CheckForDate EndDate
'   CheckForString SumType
'   CheckForString Company
'   CheckForString JurPers
'   ASep = """" + ";" + """"
'   AData = "R_TNAV;" + """" + CStr(BUDebit) + ASep + CStr(BEDebit) + ASep + CStr(AccDebit) + ASep + CStr(AnlDb1) + ASep + CStr(AnlDb2) + ASep + CStr(AnlDb3) + ASep + CStr(AnlDb4) + ASep + CStr(AnlDb5) + ASep + CStr(AgnGrpTo) + ASep + CStr(AgentTo) + ASep + CStr(BUCredit) + ASep + CStr(BECredit) + ASep + CStr(AccCredit) + ASep + CStr(AnlCr1) + ASep + CStr(AnlCr2) + ASep + CStr(AnlCr3) + ASep + CStr(AnlCr4) + ASep + CStr(AnlCr5) + ASep + CStr(AgnGrpFrom) + ASep + _
'           CStr(AgentFrom) + ASep + CStr(NomGrp) + ASep + CStr(Nomen) + ASep + CStr(NomPart) + ASep + DateIn + ASep + DateOut + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
'   R_TNAV = StrToFloat(ParusQuery(AData), "R_TNAV")
'End Function

'Public Function R_TNAVQ(Optional BUDebit As Variant, Optional BEDebit As Variant, Optional AccDebit As Variant, Optional AnlDb1 As Variant, Optional AnlDb2 As Variant, Optional AnlDb3 As Variant, Optional AnlDb4 As Variant, Optional AnlDb5 As Variant, Optional AgnGrpTo As Variant, Optional AgentTo As Variant, Optional BUCredit As Variant, Optional BECredit As Variant, Optional AccCredit As Variant, Optional AnlCr1 As Variant, Optional AnlCr2 As Variant, _
'                        Optional AnlCr3 As Variant, Optional AnlCr4 As Variant, Optional AnlCr5 As Variant, Optional AgnGrpFrom As Variant, Optional AgentFrom As Variant, Optional NomGrp As Variant, Optional Nomen As Variant, Optional NomPart As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
'Dim AData, ASep As String
'   CheckForString BUDebit
'   CheckForString BEDebit
'   CheckForString AccDebit
'   CheckForString AnlDb1
'   CheckForString AnlDb2
'   CheckForString AnlDb3
'   CheckForString AnlDb4
'   CheckForString AnlDb5
'   CheckForString AgnGrpTo
'   CheckForString AgentTo
'   CheckForString BUCredit
'   CheckForString BECredit
'   CheckForString AccCredit
'   CheckForString AnlCr1
'   CheckForString AnlCr2
'   CheckForString AnlCr3
'   CheckForString AnlCr4
'   CheckForString AnlCr5
'   CheckForString AgnGrpFrom
'   CheckForString AgentFrom
'   CheckForString NomGrp
'   CheckForString Nomen
'   CheckForString NomPart
'   CheckForDate DateIn
'   CheckForDate DateOut
'   CheckForString AccType
'   CheckForString Curr
'   CheckForDate BegDate
'   CheckForDate EndDate
'   CheckForString QuantType
'   CheckForString Company
'   CheckForString JurPers
'   ASep = """" + ";" + """"
'   AData = "R_TNAVQ;" + """" + CStr(BUDebit) + ASep + CStr(BEDebit) + ASep + CStr(AccDebit) + ASep + CStr(AnlDb1) + ASep + CStr(AnlDb2) + ASep + CStr(AnlDb3) + ASep + CStr(AnlDb4) + ASep + CStr(AnlDb5) + ASep + CStr(AgnGrpTo) + ASep + CStr(AgentTo) + ASep + CStr(BUCredit) + ASep + CStr(BECredit) + ASep + CStr(AccCredit) + ASep + CStr(AnlCr1) + ASep + CStr(AnlCr2) + ASep + CStr(AnlCr3) + ASep + CStr(AnlCr4) + ASep + CStr(AnlCr5) + ASep + _
'           CStr(AgnGrpFrom) + ASep + CStr(AgentFrom) + ASep + CStr(NomGrp) + ASep + CStr(Nomen) + ASep + CStr(NomPart) + ASep + DateIn + ASep + DateOut + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
'   R_TNAVQ = StrToFloat(ParusQuery(AData), "R_TNAVQ")
'End Function

Public Function R_TNV(Optional BUDebit As Variant, Optional BEDebit As Variant, Optional AccDebit As Variant, Optional AgnGrpTo As Variant, Optional AgentTo As Variant, Optional BUCredit As Variant, Optional BECredit As Variant, Optional AccCredit As Variant, Optional AgnGrpFrom As Variant, Optional AgentFrom As Variant, Optional NomGrp As Variant, Optional Nomen As Variant, Optional NomPart As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString BUDebit
   CheckForString BEDebit
   CheckForString AccDebit
   CheckForString AgnGrpTo
   CheckForString AgentTo
   CheckForString BUCredit
   CheckForString BECredit
   CheckForString AccCredit
   CheckForString AgnGrpFrom
   CheckForString AgentFrom
   CheckForString NomGrp
   CheckForString Nomen
   CheckForString NomPart
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString AccType
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "R_TNV;" + """" + CStr(BUDebit) + ASep + CStr(BEDebit) + ASep + CStr(AccDebit) + ASep + CStr(AgnGrpTo) + ASep + CStr(AgentTo) + ASep + CStr(BUCredit) + ASep + CStr(BECredit) + ASep + CStr(AccCredit) + ASep + CStr(AgnGrpFrom) + ASep + CStr(AgentFrom) + ASep + CStr(NomGrp) + ASep + CStr(Nomen) + ASep + CStr(NomPart) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   R_TNV = StrToFloat(ParusQuery(AData), "R_TNV")
End Function

Public Function R_TNVQ(Optional BUDebit As Variant, Optional BEDebit As Variant, Optional AccDebit As Variant, Optional AgnGrpTo As Variant, Optional AgentTo As Variant, Optional BUCredit As Variant, Optional BECredit As Variant, Optional AccCredit As Variant, Optional AgnGrpFrom As Variant, Optional AgentFrom As Variant, Optional NomGrp As Variant, Optional Nomen As Variant, Optional NomPart As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString BUDebit
   CheckForString BEDebit
   CheckForString AccDebit
   CheckForString AgnGrpTo
   CheckForString AgentTo
   CheckForString BUCredit
   CheckForString BECredit
   CheckForString AccCredit
   CheckForString AgnGrpFrom
   CheckForString AgentFrom
   CheckForString NomGrp
   CheckForString Nomen
   CheckForString NomPart
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString AccType
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "R_TNVQ;" + """" + CStr(BUDebit) + ASep + CStr(BEDebit) + ASep + CStr(AccDebit) + ASep + CStr(AgnGrpTo) + ASep + CStr(AgentTo) + ASep + CStr(BUCredit) + ASep + CStr(BECredit) + ASep + CStr(AccCredit) + ASep + CStr(AgnGrpFrom) + ASep + CStr(AgentFrom) + ASep + CStr(NomGrp) + ASep + CStr(Nomen) + ASep + CStr(NomPart) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   R_TNVQ = StrToFloat(ParusQuery(AData), "R_TNVQ")
End Function

Public Function R_TS(Optional BUDebit As Variant, Optional BEDebit As Variant, Optional AccDebit As Variant, Optional BUCredit As Variant, Optional BECredit As Variant, Optional AccCredit As Variant, Optional AgnGrp As Variant, Optional Agent As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional TurnType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                     Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                     Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString BUDebit
   CheckForString BEDebit
   CheckForString AccDebit
   CheckForString BUCredit
   CheckForString BECredit
   CheckForString AccCredit
   CheckForString AgnGrp
   CheckForString Agent
   CheckForString AccType
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString TurnType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "R_TS;" + """" + CStr(BUDebit) + ASep + CStr(BEDebit) + ASep + CStr(AccDebit) + ASep + CStr(BUCredit) + ASep + CStr(BECredit) + ASep + CStr(AccCredit) + ASep + CStr(AgnGrp) + ASep + CStr(Agent) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + TurnType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   R_TS = StrToFloat(ParusQuery(AData), "R_TS")
End Function

Public Function R_TSA(Optional BUDebit As Variant, Optional BEDebit As Variant, Optional AccDebit As Variant, Optional AnlDb1 As Variant, Optional AnlDb2 As Variant, Optional AnlDb3 As Variant, Optional AnlDb4 As Variant, Optional AnlDb5 As Variant, Optional BUCredit As Variant, Optional BECredit As Variant, Optional AccCredit As Variant, Optional AnlCr1 As Variant, Optional AnlCr2 As Variant, Optional AnlCr3 As Variant, Optional AnlCr4 As Variant, Optional AnlCr5 As Variant, Optional AgnGrp As Variant, Optional Agent As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional TurnType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                      Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                      Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString BUDebit
   CheckForString BEDebit
   CheckForString AccDebit
   CheckForString AnlDb1
   CheckForString AnlDb2
   CheckForString AnlDb3
   CheckForString AnlDb4
   CheckForString AnlDb5
   CheckForString BUCredit
   CheckForString BECredit
   CheckForString AccCredit
   CheckForString AnlCr1
   CheckForString AnlCr2
   CheckForString AnlCr3
   CheckForString AnlCr4
   CheckForString AnlCr5
   CheckForString AgnGrp
   CheckForString Agent
   CheckForString AccType
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString TurnType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "R_TSA;" + """" + CStr(BUDebit) + ASep + CStr(BEDebit) + ASep + CStr(AccDebit) + ASep + CStr(AnlDb1) + ASep + CStr(AnlDb2) + ASep + CStr(AnlDb3) + ASep + CStr(AnlDb4) + ASep + CStr(AnlDb5) + ASep + CStr(BUCredit) + ASep + CStr(BECredit) + ASep + CStr(AccCredit) + ASep + CStr(AnlCr1) + ASep + CStr(AnlCr2) + ASep + CStr(AnlCr3) + ASep + CStr(AnlCr4) + ASep + CStr(AnlCr5) + ASep + CStr(AgnGrp) + ASep + CStr(Agent) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + TurnType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   R_TSA = StrToFloat(ParusQuery(AData), "R_TSA")
End Function

Public Function R_TV(Optional BalUnit As Variant, Optional BalElem As Variant, Optional Account As Variant, Optional AgnGrp As Variant, Optional Agent As Variant, Optional NomGrp As Variant, Optional Nomen As Variant, Optional NomPart As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional TurnType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString BalUnit
   CheckForString BalElem
   CheckForString Account
   CheckForString AgnGrp
   CheckForString Agent
   CheckForString NomGrp
   CheckForString Nomen
   CheckForString NomPart
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString AccType
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString TurnType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "R_TV;" + """" + CStr(BalUnit) + ASep + CStr(BalElem) + ASep + CStr(Account) + ASep + CStr(AgnGrp) + ASep + CStr(Agent) + ASep + CStr(NomGrp) + ASep + CStr(Nomen) + ASep + CStr(NomPart) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + TurnType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   R_TV = StrToFloat(ParusQuery(AData), "R_TV")
End Function

Public Function R_TVQ(Optional BalUnit As Variant, Optional BalElem As Variant, Optional Account As Variant, Optional AgnGrp As Variant, Optional Agent As Variant, Optional NomGrp As Variant, Optional Nomen As Variant, Optional NomPart As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional AccType As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional QuantType As Variant, Optional TurnType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString BalUnit
   CheckForString BalElem
   CheckForString Account
   CheckForString AgnGrp
   CheckForString Agent
   CheckForString NomGrp
   CheckForString Nomen
   CheckForString NomPart
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString AccType
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString QuantType
   CheckForString TurnType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "R_TVQ;" + """" + CStr(BalUnit) + ASep + CStr(BalElem) + ASep + CStr(Account) + ASep + CStr(AgnGrp) + ASep + CStr(Agent) + ASep + CStr(NomGrp) + ASep + CStr(Nomen) + ASep + CStr(NomPart) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(AccType) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + QuantType + ASep + TurnType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   R_TVQ = StrToFloat(ParusQuery(AData), "R_TVQ")
End Function

Public Function RAS(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   ASep = """" + ";" + """"
   AData = "RAS;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + """"
   RAS = StrToFloat(ParusQuery(AData), "RAS")
End Function

Public Function RADBS(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   ASep = """" + ";" + """"
   AData = "RADBS;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + """"
   RADBS = StrToFloat(ParusQuery(AData), "RADBS")
End Function

Public Function RACRS(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   ASep = """" + ";" + """"
   AData = "RACRS;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + """"
   RACRS = StrToFloat(ParusQuery(AData), "RACRS")
End Function

Public Function RM(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RM;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RM = StrToFloat(ParusQuery(AData), "RM")
End Function

Public Function RE(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RE = StrToFloat(ParusQuery(AData), "RE")
End Function

Public Function RA(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RA;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RA = StrToFloat(ParusQuery(AData), "RA")
End Function

Public Function RAE(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAE = StrToFloat(ParusQuery(AData), "RAE")
End Function

Public Function RAD(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAD;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAD = StrToFloat(ParusQuery(AData), "RAD")
End Function

Public Function RADN(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RADN;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RADN = StrToFloat(ParusQuery(AData), "RADN")
End Function

Public Function RADE(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RADE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RADE = StrToFloat(ParusQuery(AData), "RADE")
End Function

Public Function RADNE(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RADNE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RADNE = StrToFloat(ParusQuery(AData), "RADNE")
End Function

Public Function RAC(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAC;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAC = StrToFloat(ParusQuery(AData), "RAC")
End Function

Public Function RACN(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RACN;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RACN = StrToFloat(ParusQuery(AData), "RACN")
End Function

Public Function RACE(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RACE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RACE = StrToFloat(ParusQuery(AData), "RACE")
End Function

Public Function RACNE(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RACNE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RACNE = StrToFloat(ParusQuery(AData), "RACNE")
End Function

Public Function RV(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RV;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RV = StrToFloat(ParusQuery(AData), "RV")
End Function

Public Function RAV(Optional Account As Variant, Optional BalUnit As Variant, Optional ANALITIC1 As Variant, Optional ANALITIC2 As Variant, Optional ANALITIC3 As Variant, Optional ANALITIC4 As Variant, Optional ANALITIC5 As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString ANALITIC1
   CheckForString ANALITIC2
   CheckForString ANALITIC3
   CheckForString ANALITIC4
   CheckForString ANALITIC5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAV;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(ANALITIC1) + ASep + CStr(ANALITIC2) + ASep + CStr(ANALITIC3) + ASep + CStr(ANALITIC4) + ASep + CStr(ANALITIC5) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAV = StrToFloat(ParusQuery(AData), "RAV")
End Function

Public Function RVQ(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RVQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RVQ = StrToFloat(ParusQuery(AData), "RVQ")
End Function

Public Function RAVQ(Optional Account As Variant, Optional BalUnit As Variant, Optional ANALITIC1 As Variant, Optional ANALITIC2 As Variant, Optional ANALITIC3 As Variant, Optional ANALITIC4 As Variant, Optional ANALITIC5 As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString ANALITIC1
   CheckForString ANALITIC2
   CheckForString ANALITIC3
   CheckForString ANALITIC4
   CheckForString ANALITIC5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAVQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(ANALITIC1) + ASep + CStr(ANALITIC2) + ASep + CStr(ANALITIC3) + ASep + CStr(ANALITIC4) + ASep + CStr(ANALITIC5) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAVQ = StrToFloat(ParusQuery(AData), "RAVQ")
End Function

Public Function RVE(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RVE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RVE = StrToFloat(ParusQuery(AData), "RVE")
End Function

Public Function RAVE(Optional Account As Variant, Optional BalUnit As Variant, Optional ANALITIC1 As Variant, Optional ANALITIC2 As Variant, Optional ANALITIC3 As Variant, Optional ANALITIC4 As Variant, Optional ANALITIC5 As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString ANALITIC1
   CheckForString ANALITIC2
   CheckForString ANALITIC3
   CheckForString ANALITIC4
   CheckForString ANALITIC5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAVE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(ANALITIC1) + ASep + CStr(ANALITIC2) + ASep + CStr(ANALITIC3) + ASep + CStr(ANALITIC4) + ASep + CStr(ANALITIC5) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAVE = StrToFloat(ParusQuery(AData), "RAVE")
End Function

Public Function RVEQ(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RVEQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RVEQ = StrToFloat(ParusQuery(AData), "RVEQ")
End Function

Public Function RAVEQ(Optional Account As Variant, Optional BalUnit As Variant, Optional ANALITIC1 As Variant, Optional ANALITIC2 As Variant, Optional ANALITIC3 As Variant, Optional ANALITIC4 As Variant, Optional ANALITIC5 As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString ANALITIC1
   CheckForString ANALITIC2
   CheckForString ANALITIC3
   CheckForString ANALITIC4
   CheckForString ANALITIC5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAVEQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(ANALITIC1) + ASep + CStr(ANALITIC2) + ASep + CStr(ANALITIC3) + ASep + CStr(ANALITIC4) + ASep + CStr(ANALITIC5) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAVEQ = StrToFloat(ParusQuery(AData), "RAVEQ")
End Function

Public Function RVD(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RVD;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RVD = StrToFloat(ParusQuery(AData), "RVD")
End Function

Public Function RAVD(Optional Account As Variant, Optional BalUnit As Variant, Optional ANALITIC1 As Variant, Optional ANALITIC2 As Variant, Optional ANALITIC3 As Variant, Optional ANALITIC4 As Variant, Optional ANALITIC5 As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString ANALITIC1
   CheckForString ANALITIC2
   CheckForString ANALITIC3
   CheckForString ANALITIC4
   CheckForString ANALITIC5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAVD;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(ANALITIC1) + ASep + CStr(ANALITIC2) + ASep + CStr(ANALITIC3) + ASep + CStr(ANALITIC4) + ASep + CStr(ANALITIC5) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAVD = StrToFloat(ParusQuery(AData), "RAVD")
End Function

Public Function RVDQ(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RVDQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RVDQ = StrToFloat(ParusQuery(AData), "RVDQ")
End Function

Public Function RAVDQ(Optional Account As Variant, Optional BalUnit As Variant, Optional ANALITIC1 As Variant, Optional ANALITIC2 As Variant, Optional ANALITIC3 As Variant, Optional ANALITIC4 As Variant, Optional ANALITIC5 As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString ANALITIC1
   CheckForString ANALITIC2
   CheckForString ANALITIC3
   CheckForString ANALITIC4
   CheckForString ANALITIC5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAVDQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(ANALITIC1) + ASep + CStr(ANALITIC2) + ASep + CStr(ANALITIC3) + ASep + CStr(ANALITIC4) + ASep + CStr(ANALITIC5) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAVDQ = StrToFloat(ParusQuery(AData), "RAVDQ")
End Function

Public Function RVDE(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RVDE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RVDE = StrToFloat(ParusQuery(AData), "RVDE")
End Function

Public Function RAVDE(Optional Account As Variant, Optional BalUnit As Variant, Optional ANALITIC1 As Variant, Optional ANALITIC2 As Variant, Optional ANALITIC3 As Variant, Optional ANALITIC4 As Variant, Optional ANALITIC5 As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString ANALITIC1
   CheckForString ANALITIC2
   CheckForString ANALITIC3
   CheckForString ANALITIC4
   CheckForString ANALITIC5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAVDE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(ANALITIC1) + ASep + CStr(ANALITIC2) + ASep + CStr(ANALITIC3) + ASep + CStr(ANALITIC4) + ASep + CStr(ANALITIC5) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAVDE = StrToFloat(ParusQuery(AData), "RAVDE")
End Function

Public Function RVDEQ(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RVDEQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RVDEQ = StrToFloat(ParusQuery(AData), "RVDEQ")
End Function

Public Function RAVDEQ(Optional Account As Variant, Optional BalUnit As Variant, Optional ANALITIC1 As Variant, Optional ANALITIC2 As Variant, Optional ANALITIC3 As Variant, Optional ANALITIC4 As Variant, Optional ANALITIC5 As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString ANALITIC1
   CheckForString ANALITIC2
   CheckForString ANALITIC3
   CheckForString ANALITIC4
   CheckForString ANALITIC5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAVDEQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(ANALITIC1) + ASep + CStr(ANALITIC2) + ASep + CStr(ANALITIC3) + ASep + CStr(ANALITIC4) + ASep + CStr(ANALITIC5) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAVDEQ = StrToFloat(ParusQuery(AData), "RAVDEQ")
End Function

Public Function RVC(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RVC;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RVC = StrToFloat(ParusQuery(AData), "RVC")
End Function

Public Function RAVC(Optional Account As Variant, Optional BalUnit As Variant, Optional ANALITIC1 As Variant, Optional ANALITIC2 As Variant, Optional ANALITIC3 As Variant, Optional ANALITIC4 As Variant, Optional ANALITIC5 As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString ANALITIC1
   CheckForString ANALITIC2
   CheckForString ANALITIC3
   CheckForString ANALITIC4
   CheckForString ANALITIC5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAVC;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(ANALITIC1) + ASep + CStr(ANALITIC2) + ASep + CStr(ANALITIC3) + ASep + CStr(ANALITIC4) + ASep + CStr(ANALITIC5) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAVC = StrToFloat(ParusQuery(AData), "RAVC")
End Function

Public Function RVCQ(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RVCQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RVCQ = StrToFloat(ParusQuery(AData), "RVCQ")
End Function

Public Function RAVCQ(Optional Account As Variant, Optional BalUnit As Variant, Optional ANALITIC1 As Variant, Optional ANALITIC2 As Variant, Optional ANALITIC3 As Variant, Optional ANALITIC4 As Variant, Optional ANALITIC5 As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString ANALITIC1
   CheckForString ANALITIC2
   CheckForString ANALITIC3
   CheckForString ANALITIC4
   CheckForString ANALITIC5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAVCQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(ANALITIC1) + ASep + CStr(ANALITIC2) + ASep + CStr(ANALITIC3) + ASep + CStr(ANALITIC4) + ASep + CStr(ANALITIC5) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAVCQ = StrToFloat(ParusQuery(AData), "RAVCQ")
End Function

Public Function RVCE(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RVCE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RVCE = StrToFloat(ParusQuery(AData), "RVCE")
End Function

Public Function RAVCE(Optional Account As Variant, Optional BalUnit As Variant, Optional ANALITIC1 As Variant, Optional ANALITIC2 As Variant, Optional ANALITIC3 As Variant, Optional ANALITIC4 As Variant, Optional ANALITIC5 As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString ANALITIC1
   CheckForString ANALITIC2
   CheckForString ANALITIC3
   CheckForString ANALITIC4
   CheckForString ANALITIC5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAVCE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(ANALITIC1) + ASep + CStr(ANALITIC2) + ASep + CStr(ANALITIC3) + ASep + CStr(ANALITIC4) + ASep + CStr(ANALITIC5) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAVCE = StrToFloat(ParusQuery(AData), "RAVCE")
End Function

Public Function RVCEQ(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RVCEQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RVCEQ = StrToFloat(ParusQuery(AData), "RVCEQ")
End Function

Public Function RAVCEQ(Optional Account As Variant, Optional BalUnit As Variant, Optional ANALITIC1 As Variant, Optional ANALITIC2 As Variant, Optional ANALITIC3 As Variant, Optional ANALITIC4 As Variant, Optional ANALITIC5 As Variant, Optional Agent As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString ANALITIC1
   CheckForString ANALITIC2
   CheckForString ANALITIC3
   CheckForString ANALITIC4
   CheckForString ANALITIC5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate DateOf
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RAVCEQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(ANALITIC1) + ASep + CStr(ANALITIC2) + ASep + CStr(ANALITIC3) + ASep + CStr(ANALITIC4) + ASep + CStr(ANALITIC5) + ASep + CStr(Agent) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + CStr(Curr) + ASep + DateOf + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RAVCEQ = StrToFloat(ParusQuery(AData), "RAVCEQ")
End Function

Public Function TN(Optional AccDebit As Variant, Optional BUDebit As Variant, Optional AgentTo As Variant, Optional AccCredit As Variant, Optional BUCredit As Variant, Optional AgentFrom As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString AccDebit
   CheckForString BUDebit
   CheckForString AgentTo
   CheckForString AccCredit
   CheckForString BUCredit
   CheckForString AgentFrom
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TN;" + """" + CStr(AccDebit) + ASep + CStr(BUDebit) + ASep + CStr(AgentTo) + ASep + CStr(AccCredit) + ASep + CStr(BUCredit) + ASep + CStr(AgentFrom) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TN = StrToFloat(ParusQuery(AData), "TN")
End Function

Public Function TD(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TD;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TD = StrToFloat(ParusQuery(AData), "TD")
End Function

Public Function TC(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TC;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TC = StrToFloat(ParusQuery(AData), "TC")
End Function

Public Function TA(Optional AccDebit As Variant, Optional BUDebit As Variant, Optional AnlDb1 As Variant, Optional AnlDb2 As Variant, Optional AnlDb3 As Variant, Optional AnlDb4 As Variant, Optional AnlDb5 As Variant, Optional AgentTo As Variant, Optional AccCredit As Variant, Optional BUCredit As Variant, Optional AnlCr1 As Variant, Optional AnlCr2 As Variant, Optional AnlCr3 As Variant, Optional AnlCr4 As Variant, Optional AnlCr5 As Variant, Optional AgentFrom As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString AccDebit
   CheckForString BUDebit
   CheckForString AnlDb1
   CheckForString AnlDb2
   CheckForString AnlDb3
   CheckForString AnlDb4
   CheckForString AnlDb5
   CheckForString AgentTo
   CheckForString AccCredit
   CheckForString BUCredit
   CheckForString AnlCr1
   CheckForString AnlCr2
   CheckForString AnlCr3
   CheckForString AnlCr4
   CheckForString AnlCr5
   CheckForString AgentFrom
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TA;" + """" + CStr(AccDebit) + ASep + CStr(BUDebit) + ASep + CStr(AnlDb1) + ASep + CStr(AnlDb2) + ASep + CStr(AnlDb3) + ASep + CStr(AnlDb4) + ASep + CStr(AnlDb5) + ASep + CStr(AgentTo) + ASep + CStr(AccCredit) + ASep + CStr(BUCredit) + ASep + CStr(AnlCr1) + ASep + CStr(AnlCr2) + ASep + CStr(AnlCr3) + ASep + CStr(AnlCr4) + ASep + CStr(AnlCr5) + ASep + CStr(AgentFrom) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TA = StrToFloat(ParusQuery(AData), "TA")
End Function

Public Function TAD(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Agent
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TAD;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TAD = StrToFloat(ParusQuery(AData), "TAD")
End Function

Public Function TAC(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Agent
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TAC;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TAC = StrToFloat(ParusQuery(AData), "TAC")
End Function

Public Function TV(Optional AccDebit As Variant, Optional BUDebit As Variant, Optional AgentTo As Variant, Optional AccCredit As Variant, Optional BUCredit As Variant, Optional AgentFrom As Variant, Optional Curr As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString AccDebit
   CheckForString BUDebit
   CheckForString AgentTo
   CheckForString AccCredit
   CheckForString BUCredit
   CheckForString AgentFrom
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TV;" + """" + CStr(AccDebit) + ASep + CStr(BUDebit) + ASep + CStr(AgentTo) + ASep + CStr(AccCredit) + ASep + CStr(BUCredit) + ASep + CStr(AgentFrom) + ASep + CStr(Curr) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TV = StrToFloat(ParusQuery(AData), "TV")
End Function

Public Function TVQ(Optional AccDebit As Variant, Optional BUDebit As Variant, Optional AgentTo As Variant, Optional AccCredit As Variant, Optional BUCredit As Variant, Optional AgentFrom As Variant, Optional Curr As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString AccDebit
   CheckForString BUDebit
   CheckForString AgentTo
   CheckForString AccCredit
   CheckForString BUCredit
   CheckForString AgentFrom
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TVQ;" + """" + CStr(AccDebit) + ASep + CStr(BUDebit) + ASep + CStr(AgentTo) + ASep + CStr(AccCredit) + ASep + CStr(BUCredit) + ASep + CStr(AgentFrom) + ASep + CStr(Curr) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + BegDate + ASep + EndDate + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TVQ = StrToFloat(ParusQuery(AData), "TVQ")
End Function

Public Function TVD(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TVD;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TVD = StrToFloat(ParusQuery(AData), "TVD")
End Function

Public Function TVDQ(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TVDQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + BegDate + ASep + EndDate + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TVDQ = StrToFloat(ParusQuery(AData), "TVDQ")
End Function

Public Function TVC(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TVC;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TVC = StrToFloat(ParusQuery(AData), "TVC")
End Function

Public Function TVCQ(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TVCQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(DateIn) + ASep + CStr(DateOut) + ASep + BegDate + ASep + EndDate + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TVCQ = StrToFloat(ParusQuery(AData), "TVCQ")
End Function

Public Function TAV(Optional AccDebit As Variant, Optional BUDebit As Variant, Optional AnlDb1 As Variant, Optional AnlDb2 As Variant, Optional AnlDb3 As Variant, Optional AnlDb4 As Variant, Optional AnlDb5 As Variant, Optional AgentTo As Variant, Optional AccCredit As Variant, Optional BUCredit As Variant, Optional AnlCr1 As Variant, Optional AnlCr2 As Variant, Optional AnlCr3 As Variant, Optional AnlCr4 As Variant, Optional AnlCr5 As Variant, Optional AgentFrom As Variant, Optional Curr As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString AccDebit
   CheckForString BUDebit
   CheckForString AnlDb1
   CheckForString AnlDb2
   CheckForString AnlDb3
   CheckForString AnlDb4
   CheckForString AnlDb5
   CheckForString AgentTo
   CheckForString AccCredit
   CheckForString BUCredit
   CheckForString AnlCr1
   CheckForString AnlCr2
   CheckForString AnlCr3
   CheckForString AnlCr4
   CheckForString AnlCr5
   CheckForString AgentFrom
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TAV;" + """" + CStr(AccDebit) + ASep + CStr(BUDebit) + ASep + CStr(AnlDb1) + ASep + CStr(AnlDb2) + ASep + CStr(AnlDb3) + ASep + CStr(AnlDb4) + ASep + CStr(AnlDb5) + ASep + CStr(AgentTo) + ASep + CStr(AccCredit) + ASep + CStr(BUCredit) + ASep + CStr(AnlCr1) + ASep + CStr(AnlCr2) + ASep + CStr(AnlCr3) + ASep + CStr(AnlCr4) + ASep + CStr(AnlCr5) + ASep + CStr(AgentFrom) + ASep + CStr(Curr) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + DateIn + ASep + DateOut + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TAV = StrToFloat(ParusQuery(AData), "TAV")
End Function

Public Function TAVQ(Optional AccDebit As Variant, Optional BUDebit As Variant, Optional AnlDb1 As Variant, Optional AnlDb2 As Variant, Optional AnlDb3 As Variant, Optional AnlDb4 As Variant, Optional AnlDb5 As Variant, Optional AgentTo As Variant, Optional AccCredit As Variant, Optional BUCredit As Variant, Optional AnlCr1 As Variant, Optional AnlCr2 As Variant, Optional AnlCr3 As Variant, Optional AnlCr4 As Variant, Optional AnlCr5 As Variant, Optional AgentFrom As Variant, Optional Curr As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString AccDebit
   CheckForString BUDebit
   CheckForString AnlDb1
   CheckForString AnlDb2
   CheckForString AnlDb3
   CheckForString AnlDb4
   CheckForString AnlDb5
   CheckForString AgentTo
   CheckForString AccCredit
   CheckForString BUCredit
   CheckForString AnlCr1
   CheckForString AnlCr2
   CheckForString AnlCr3
   CheckForString AnlCr4
   CheckForString AnlCr5
   CheckForString AgentFrom
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TAVQ;" + """" + CStr(AccDebit) + ASep + CStr(BUDebit) + ASep + CStr(AnlDb1) + ASep + CStr(AnlDb2) + ASep + CStr(AnlDb3) + ASep + CStr(AnlDb4) + ASep + CStr(AnlDb5) + ASep + CStr(AgentTo) + ASep + CStr(AccCredit) + ASep + CStr(BUCredit) + ASep + CStr(AnlCr1) + ASep + CStr(AnlCr2) + ASep + CStr(AnlCr3) + ASep + CStr(AnlCr4) + ASep + CStr(AnlCr5) + ASep + CStr(AgentFrom) + ASep + CStr(Curr) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + DateIn + ASep + DateOut + ASep + BegDate + ASep + EndDate + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TAVQ = StrToFloat(ParusQuery(AData), "TAVQ")
End Function

Public Function TAVD(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TAVD;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + DateIn + ASep + DateOut + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TAVD = StrToFloat(ParusQuery(AData), "TAVD")
End Function

Public Function TAVDQ(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TAVDQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + DateIn + ASep + DateOut + ASep + BegDate + ASep + EndDate + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TAVDQ = StrToFloat(ParusQuery(AData), "TAVDQ")
End Function

Public Function TAVC(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TAVD;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + DateIn + ASep + DateOut + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TAVC = StrToFloat(ParusQuery(AData), "TAVD")
End Function

Public Function TAVCQ(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional Group As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional DateIn As Variant, Optional DateOut As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional QuantType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Agent
   CheckForString Group
   CheckForString Nomen
   CheckForString Bath
   CheckForDate DateIn
   CheckForDate DateOut
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString QuantType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "TAVCQ;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + CStr(Group) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + DateIn + ASep + DateOut + ASep + BegDate + ASep + EndDate + ASep + QuantType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   TAVCQ = StrToFloat(ParusQuery(AData), "TAVCQ")
End Function

Public Function TSD(Optional AccDebit As Variant, Optional BUDebit As Variant, Optional AccCredit As Variant, Optional BUCredit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                   Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                   Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString AccDebit
   CheckForString BUDebit
   CheckForString AccCredit
   CheckForString BUCredit
   CheckForString Agent
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "TSD;" + """" + CStr(AccDebit) + ASep + CStr(BUDebit) + ASep + CStr(AccCredit) + ASep + CStr(BUCredit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   TSD = StrToFloat(ParusQuery(AData), "TSD")
End Function

Public Function TSC(Optional AccCredit As Variant, Optional BUCredit As Variant, Optional AccDebit As Variant, Optional BUDebit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                    Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                    Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString AccCredit
   CheckForString BUCredit
   CheckForString AccDebit
   CheckForString BUDebit
   CheckForString Agent
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "TSC;" + """" + CStr(AccCredit) + ASep + CStr(BUCredit) + ASep + CStr(AccDebit) + ASep + CStr(BUDebit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   TSC = StrToFloat(ParusQuery(AData), "TSC")
End Function

Public Function TSAD(Optional AccDebit As Variant, Optional AnlDb1 As Variant, Optional AnlDb2 As Variant, Optional AnlDb3 As Variant, Optional AnlDb4 As Variant, Optional AnlDb5 As Variant, Optional BUDebit As Variant, Optional AccCredit As Variant, Optional AnlCr1 As Variant, Optional AnlCr2 As Variant, Optional AnlCr3 As Variant, Optional AnlCr4 As Variant, Optional AnlCr5 As Variant, Optional BUCredit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                     Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                     Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString AccDebit
   CheckForString AnlDb1
   CheckForString AnlDb2
   CheckForString AnlDb3
   CheckForString AnlDb4
   CheckForString AnlDb5
   CheckForString BUDebit
   CheckForString AccCredit
   CheckForString AnlCr1
   CheckForString AnlCr2
   CheckForString AnlCr3
   CheckForString AnlCr4
   CheckForString AnlCr5
   CheckForString BUCredit
   CheckForString Agent
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "TSAD;" + """" + CStr(AccDebit) + ASep + CStr(AnlDb1) + ASep + CStr(AnlDb2) + ASep + CStr(AnlDb3) + ASep + CStr(AnlDb4) + ASep + CStr(AnlDb5) + ASep + CStr(BUDebit) + ASep + CStr(AccCredit) + ASep + CStr(AnlCr1) + ASep + CStr(AnlCr2) + ASep + CStr(AnlCr3) + ASep + CStr(AnlCr4) + ASep + CStr(AnlCr5) + ASep + CStr(BUCredit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   TSAD = StrToFloat(ParusQuery(AData), "TSAD")
End Function

Public Function TSAC(Optional AccCredit As Variant, Optional AnlCr1 As Variant, Optional AnlCr2 As Variant, Optional AnlCr3 As Variant, Optional AnlCr4 As Variant, Optional AnlCr5 As Variant, Optional BUCredit As Variant, Optional AccDebit As Variant, Optional AnlDb1 As Variant, Optional AnlDb2 As Variant, Optional AnlDb3 As Variant, Optional AnlDb4 As Variant, Optional AnlDb5 As Variant, Optional BUDebit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                     Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                     Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString AccCredit
   CheckForString AnlCr1
   CheckForString AnlCr2
   CheckForString AnlCr3
   CheckForString AnlCr4
   CheckForString AnlCr5
   CheckForString BUCredit
   CheckForString AccDebit
   CheckForString AnlDb1
   CheckForString AnlDb2
   CheckForString AnlDb3
   CheckForString AnlDb4
   CheckForString AnlDb5
   CheckForString BUDebit
   CheckForString Agent
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "TSAC;" + """" + CStr(AccCredit) + ASep + CStr(AnlCr1) + ASep + CStr(AnlCr2) + ASep + CStr(AnlCr3) + ASep + CStr(AnlCr4) + ASep + CStr(AnlCr5) + ASep + CStr(BUCredit) + ASep + CStr(AccDebit) + ASep + CStr(AnlDb1) + ASep + CStr(AnlDb2) + ASep + CStr(AnlDb3) + ASep + CStr(AnlDb4) + ASep + CStr(AnlDb5) + ASep + CStr(BUDebit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   TSAC = StrToFloat(ParusQuery(AData), "TSAC")
End Function

Public Function MKIND(Optional ARecalcCurr As Variant, Optional AStartDate As Variant, Optional AEndDate As Variant, Optional AState As Variant, Optional ASubdiv As Variant, _
Optional ABusUnit As Variant, Optional AIeelement As Variant, Optional AActtype As Variant, Optional AFlowType As Variant, _
Optional AFltype As Variant, Optional ADebStart As Variant, Optional ADebEnd As Variant, Optional ARespManager As Variant, _
Optional ALiabType As Variant, Optional AFinOper As Variant, Optional AStoreOper As Variant, Optional ATypeOper As Variant, _
Optional APaytool As Variant, Optional AToolType As Variant, Optional APayType As Variant, Optional ADebState As Variant, _
Optional ADebFlowType As Variant, Optional ADebType As Variant, Optional ASource As Variant, Optional AAgtype As Variant, _
Optional ADefl As Variant, Optional ASubSys As Variant, Optional AJurpers As Variant) As Double

Dim AData, ASep As String
   CheckForString ARecalcCurr
   CheckForDate AStartDate
   CheckForDate AEndDate
   CheckForString AState
   CheckForString ASubdiv
   CheckForString ABusUnit
   CheckForString AIeelement
   CheckForString AActtype
   CheckForString AFlowType
   CheckForString AFltype
   CheckForDate ADebStart
   CheckForDate ADebEnd
   CheckForString ARespManager
   CheckForString ALiabType
   CheckForString AFinOper
   CheckForString AStoreOper
   CheckForString ATypeOper
   CheckForString APaytool
   CheckForString AToolType
   CheckForString APayType
   CheckForString ADebState
   CheckForString ADebFlowType
   CheckForString ADebType
   CheckForString ASource
   CheckForString AAgtype
   CheckForString ADefl
   CheckForString ASubSys
   CheckForString AJurpers
   ASep = """" + ";" + """"
   AData = "MKIND;" + """" + ARecalcCurr + ASep + AStartDate + ASep + _
   AEndDate + ASep + AState + ASep + ASubdiv + ASep + ABusUnit + ASep + _
   AIeelement + ASep + AActtype + ASep + AFlowType + ASep + AFltype + ASep + _
   ADebStart + ASep + ADebEnd + ASep + ARespManager + ASep + ALiabType + ASep + _
   AFinOper + ASep + AStoreOper + ASep + ATypeOper + ASep + APaytool + ASep + _
   AToolType + ASep + APayType + ASep + ADebState + ASep + ADebFlowType + ASep + _
   ADebType + ASep + ASource + ASep + AAgtype + ASep + ADefl + _
   ASep + ASubSys + ASep + AJurpers + """"
   MKIND = StrToFloat(ParusQuery(AData), "MKIND")
End Function

Public Function MKFACC(Optional ARecalcCurr As Variant, Optional AStartDate As Variant, Optional AEndDate As Variant, _
Optional ANumber As Variant, Optional AFaceAcc As Variant, Optional ATypeOper As Variant, Optional APrefix As Variant, _
Optional AOper As Variant, Optional AState As Variant, Optional ASubdiv As Variant, Optional ARespManager As Variant, _
Optional AIeelement As Variant, Optional ASource As Variant, Optional APaytool As Variant, _
Optional AAgent As Variant, Optional APayer As Variant, Optional AFaceAcc_Agent As Variant, _
Optional AJur_Pers As Variant, Optional ANoTax As Variant, Optional ACatalog As Variant, _
Optional ACurrentCur As Variant, Optional ACurrentSDate As Variant, Optional ACurrentEDate As Variant, _
Optional ACurrentTool As Variant, Optional ASumType As Variant, Optional AFinOpDirect As Variant, _
Optional AFinOpRetSign As Variant) As Double

Dim AData, ASep As String

   CheckForString ARecalcCurr
   CheckForDate AStartDate
   CheckForDate AEndDate
   CheckForString ANumber
   CheckForString AFaceAcc
   CheckForString ATypeOper
   CheckForString APrefix
   CheckForString AOper
   CheckForString AState
   CheckForString ASubdiv
   CheckForString ARespManager
   CheckForString AIeelement
   CheckForString ASource
   CheckForString APaytool
   CheckForString AAgent
   CheckForString APayer
   CheckForString AFaceAcc_Agent
   CheckForString AJur_Pers
   CheckForString ANoTax
   CheckForString ACatalog
   CheckForString ACurrentCur
   CheckForDate ACurrentSDate
   CheckForDate ACurrentEDate
   CheckForString ACurrentTool
   CheckForString ASumType
   CheckForString AFinOpDirect
   CheckForString AFinOpRetSign

   ASep = """" + ";" + """"
   AData = "MKFACC;" + """" + ARecalcCurr + ASep + AStartDate + ASep + _
   AEndDate + ASep + ANumber + ASep + AFaceAcc + ASep + ATypeOper + ASep + _
   APrefix + ASep + AOper + ASep + AState + ASep + ASubdiv + ASep + _
   ARespManager + ASep + AIeelement + ASep + ASource + ASep + APaytool + ASep + _
   AAgent + ASep + APayer + ASep + AFaceAcc_Agent + ASep + AJur_Pers + ASep + ANoTax + ASep + ACatalog + ASep + _
   ACurrentCur + ASep + ACurrentSDate + ASep + ACurrentEDate + ASep + ACurrentTool + ASep + ASumType + ASep + _
   AFinOpDirect + ASep + AFinOpRetSign + """"
   MKFACC = StrToFloat(ParusQuery(AData), "MKFACC")
End Function

Public Function FINCC(Optional ACfrom As Variant, Optional ACto As Variant, Optional ADate As Variant, _
Optional ASumfrom As Variant, Optional APlan As Variant) As Double

Dim AData, ASep As String

   CheckForString ACfrom
   CheckForString ACto
   CheckForDate ADate
   CheckForString ASumfrom
   CheckForString APlan
   ASep = """" + ";" + """"
   AData = "FINCC;" + """" + ACfrom + ASep + ACto + ASep + _
   ADate + ASep + ASumfrom + ASep + APlan + """"
   FINCC = StrToFloat(ParusQuery(AData), "FINCC")
End Function

Public Function MCOST(Optional ADateBegin As Variant, Optional ADateEnd As Variant, Optional AType As Variant, _
Optional ACostArticle As Variant, Optional ACalcArticle As Variant, Optional AIEArticle As Variant, _
Optional ASubdiv As Variant, Optional ANomen As Variant, Optional AModif As Variant, Optional AProdMDL As Variant, _
Optional AProdOrder As Variant, Optional AParty As Variant, Optional APrevArticle As Variant, _
Optional ALostDefl As Variant, Optional ACurrency As Variant, _
Optional ACostPlace As Variant, Optional AResNomen As Variant, Optional AResModif As Variant, Optional AManPow As Variant, _
Optional AEquipment As Variant) As Double
Dim AData, ASep As String
  CheckForDate ADateBegin
  CheckForDate ADateEnd
  CheckForString AType
  CheckForString ACostArticle
  CheckForString ACalcArticle
  CheckForString AIEArticle
  CheckForString ASubdiv
  CheckForString ANomen
  CheckForString AModif
  CheckForString AProdMDL
  CheckForString AProdOrder
  CheckForString AParty
  CheckForString APrevArticle
  CheckForString ALostDefl
  CheckForString ACurrency
  CheckForString ACostPlace
  CheckForString AResNomen
  CheckForString AResModif
  CheckForString AManPow
  CheckForString AEquipment
  ASep = """" + ";" + """"
  AData = "MCOST;" + """" + ADateBegin + ASep + ADateEnd + ASep + CStr(AType) + ASep + CStr(ACostArticle) + ASep + _
  CStr(ACalcArticle) + ASep + CStr(AIEArticle) + ASep + CStr(ASubdiv) + ASep + CStr(ANomen) + ASep + CStr(AModif) + ASep + _
  CStr(AProdMDL) + ASep + CStr(AProdOrder) + ASep + CStr(AParty) + ASep + CStr(APrevArticle) + ASep + CStr(ALostDefl) + ASep + CStr(ACurrency) + ASep + _
  CStr(ACostPlace) + ASep + CStr(AResNomen) + ASep + CStr(AResModif) + ASep + CStr(AManPow) + ASep + CStr(AEquipment) + """"
  MCOST = StrToFloat(ParusQuery(AData), "MCOST")
End Function

Public Function MVOL(Optional ANomen As Variant, Optional AModif As Variant, Optional ADateBegin As Variant, Optional ADateEnd As Variant, Optional AType As Variant, Optional ASubdiv As Variant, Optional AProdMDL As Variant, Optional AProdOrder As Variant, Optional AParty As Variant, Optional ASubDivTo As Variant) As Double
Dim AData, ASep As String
  CheckForString ANomen
  CheckForString AModif
  CheckForDate ADateBegin
  CheckForDate ADateEnd
  CheckForString AType
  CheckForString ASubdiv
  CheckForString AProdMDL
  CheckForString AProdOrder
  CheckForString AParty
  CheckForString ASubDivTo
  ASep = """" + ";" + """"
  AData = "MVOL;" + """" + CStr(ANomen) + ASep + CStr(AModif) + ASep + ADateBegin + ASep + ADateEnd + ASep + CStr(AType) + ASep + CStr(ASubdiv) + ASep + CStr(AProdMDL) + ASep + CStr(AProdOrder) + ASep + CStr(AParty) + ASep + CStr(ASubDivTo) + """"
  MVOL = StrToFloat(ParusQuery(AData), "MVOL")
End Function


Public Function MREQ(Optional AResType As Variant, Optional ADateBegin As Variant, Optional ADateEnd As Variant, Optional AType As Variant, Optional AResCode As Variant, Optional AResModif As Variant, Optional ASubdiv As Variant, Optional AProdMDL As Variant, Optional AProdOrder As Variant, Optional AParty As Variant, Optional ANomen As Variant, Optional AModif As Variant) As Double
Dim AData, ASep As String
  CheckForString AResType
  CheckForDate ADateBegin
  CheckForDate ADateEnd
  CheckForString AType
  CheckForString AResCode
  CheckForString AResModif
  CheckForString ASubdiv
  CheckForString AProdMDL
  CheckForString AProdOrder
  CheckForString AParty
  CheckForString ANomen
  CheckForString AModif
  ASep = """" + ";" + """"
  AData = "MREQ;" + """" + CStr(AResType) + ASep + ADateBegin + ASep + ADateEnd + ASep + CStr(AType) + ASep + CStr(AResCode) + ASep + CStr(AResModif) + ASep + CStr(ASubdiv) + ASep + CStr(AProdMDL) + ASep + CStr(AProdOrder) + ASep + CStr(AParty) + CStr(ANomen) + ASep + CStr(AModif) + """"
  MREQ = StrToFloat(ParusQuery(AData), "MREQ")
End Function

Public Function INV(Optional AAccount As Variant, Optional AAnalytic1 As Variant, _
  Optional AAnalytic2 As Variant, Optional AAnalytic3 As Variant, Optional AAnalytic4 As Variant, _
  Optional AAnalytic5 As Variant, Optional ABalunit As Variant, Optional ASubdiv As Variant, _
  Optional AMol As Variant, Optional AMolGroup As Variant, Optional ACurrency As Variant, _
  Optional ANomen As Variant, Optional ANomenGroup As Variant, Optional AOkof As Variant, _
  Optional AAccUseMin As Variant, Optional AAccUseMax As Variant, Optional ATaxUseMin As Variant, _
  Optional ATaxUseMax As Variant, Optional ATaxGroup As Variant, Optional ADate As Variant, _
  Optional AAccType As Variant, Optional ASumType As Variant, Optional AResType As Variant, _
  Optional ADateAmort As Variant, Optional ACompany As Variant, Optional AJurpers As Variant, Optional ASource As Variant) As Double

Dim AData, ASep As String

   CheckForString AAccount
   CheckForString AAnalytic1
   CheckForString AAnalytic2
   CheckForString AAnalytic3
   CheckForString AAnalytic4
   CheckForString AAnalytic5
   CheckForString ABalunit
   CheckForString ASubdiv
   CheckForString AMol
   CheckForString AMolGroup
   CheckForString ACurrency
   CheckForString ANomen
   CheckForString ANomenGroup
   CheckForString AOkof
   CheckForString AAccUseMin
   CheckForString AAccUseMax
   CheckForString ATaxUseMin
   CheckForString ATaxUseMax
   CheckForString ATaxGroup
   CheckForDate ADate
   CheckForString AAccType
   CheckForString ASumType
   CheckForString AResType
   CheckForDate ADateAmort
   CheckForString ACompany
   CheckForString AJurpers
   CheckForString ASource

   ASep = """" + ";" + """"
   AData = "INV;" + """" + AAccount + ASep + AAnalytic1 + ASep + AAnalytic2 + ASep + AAnalytic3 + _
     ASep + AAnalytic4 + ASep + AAnalytic5 + ASep + ABalunit + ASep + ASubdiv + ASep + AMol + _
     ASep + AMolGroup + ASep + ACurrency + ASep + ANomen + ASep + ANomenGroup + ASep + AOkof + _
     ASep + AAccUseMin + ASep + AAccUseMax + ASep + ATaxUseMin + ASep + ATaxUseMax + ASep + ATaxGroup + _
     ASep + ADate + ASep + AAccType + ASep + ASumType + ASep + AResType + ASep + ADateAmort + _
     ASep + ACompany + ASep + AJurpers + ASep + ASource + """"
   INV = StrToFloat(ParusQuery(AData), "INV")
End Function

Public Function RSC(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                    Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                    Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "RSC;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   RSC = StrToFloat(ParusQuery(AData), "RSC")
End Function

Public Function RSCE(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                     Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                     Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "RSCE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   RSCE = StrToFloat(ParusQuery(AData), "RSCE")
End Function

Public Function RSD(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                    Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                    Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "RSD;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   RSD = StrToFloat(ParusQuery(AData), "RSD")
End Function

Public Function RSDE(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                     Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                     Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "RSDE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   RSDE = StrToFloat(ParusQuery(AData), "RSDE")
End Function


Public Function RC_(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RC;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RC_ = StrToFloat(ParusQuery(AData), "RC")
End Function

Public Function RC(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
   On Error GoTo Exception_handler
   RC = RC_(Account, BalUnit, Curr, DateOf, SumType, Company, JurPers)
   Exit Function
Exception_handler:
   MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| RC_ |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel"
End Function

Public Function RCN_(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RCN;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RCN_ = StrToFloat(ParusQuery(AData), "RCN")
End Function

Public Function RCN(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
   On Error GoTo Exception_handler
   RCN = RCN_(Account, BalUnit, Curr, DateOf, SumType, Company, JurPers)
   Exit Function
Exception_handler:
   MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| RCN_ |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel"
End Function

Public Function RD(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RD;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RD = StrToFloat(ParusQuery(AData), "RD")
End Function

Public Function RDN(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RDN;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RDN = StrToFloat(ParusQuery(AData), "RDN")
End Function

Public Function RDE(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RDE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RDE = StrToFloat(ParusQuery(AData), "RDE")
End Function

Public Function RDNE(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RDNE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RDNE = StrToFloat(ParusQuery(AData), "RDNE")
End Function

Public Function RCE(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RCE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RCE = StrToFloat(ParusQuery(AData), "RCE")
End Function

Public Function RCNE(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   ASep = """" + ";" + """"
   AData = "RCNE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"
   RCNE = StrToFloat(ParusQuery(AData), "RCNE")
End Function

Public Function RCU(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company
   ASep = """" + ";" + """"
   AData = "RCU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"
   RCU = StrToFloat(ParusQuery(AData), "RCU")
End Function

Public Function RCEU(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RCEU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RCEU = StrToFloat(ParusQuery(AData), "RCEU")
End Function

Public Function RDU(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, _
    Optional SumType As Variant, Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RDU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RDU = StrToFloat(ParusQuery(AData), "RDU")
End Function

Public Function RDEU(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, Optional DateOf As Variant, _
    Optional SumType As Variant, Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RDEU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RDEU = StrToFloat(ParusQuery(AData), "RDEU")
End Function

Public Function RSCU(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, _
    Optional SumType As Variant, Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RSCU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RSCU = StrToFloat(ParusQuery(AData), "RSCU")
End Function

Public Function RSCEU(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, _
    Optional SumType As Variant, Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RSCEU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RSCEU = StrToFloat(ParusQuery(AData), "RSCEU")
End Function

Public Function RSDU(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, _
   Optional SumType As Variant, Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RSDU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RSDU = StrToFloat(ParusQuery(AData), "RSDU")
End Function

Public Function RSDEU(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, _
   Optional SumType As Variant, Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RSDEU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RSDEU = StrToFloat(ParusQuery(AData), "RSDEU")
End Function

Public Function RMU(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, _
  Optional DateOf As Variant, Optional SumType As Variant, _
  Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RMU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RMU = StrToFloat(ParusQuery(AData), "RMU")
End Function

Public Function REU(Optional Account As Variant, Optional BalUnit As Variant, Optional Curr As Variant, _
  Optional DateOf As Variant, Optional SumType As Variant, _
  Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "REU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   REU = StrToFloat(ParusQuery(AData), "REU")
End Function

Public Function RAU(Optional Account As Variant, Optional BalUnit As Variant, _
                    Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, _
                    Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                    Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RAU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RAU = StrToFloat(ParusQuery(AData), "RAU")
End Function

Public Function RAEU(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                    Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RAEU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RAEU = StrToFloat(ParusQuery(AData), "RAEU")
End Function

Public Function RADU(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                    Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RADU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RADU = StrToFloat(ParusQuery(AData), "RADU")
End Function

Public Function RADEU(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                      Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RADEU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RADEU = StrToFloat(ParusQuery(AData), "RADEU")
End Function

Public Function RACU(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                     Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RACU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RACU = StrToFloat(ParusQuery(AData), "RACU")
End Function

Public Function RACEU(Optional Account As Variant, Optional BalUnit As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                     Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RACEU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RACEU = StrToFloat(ParusQuery(AData), "RACEU")
End Function

Public Function RS(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                   Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                   Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "RS;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   RS = StrToFloat(ParusQuery(AData), "RS")
End Function

Public Function RSA(Optional Account As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                   Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                   Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "RSA;" + """" + CStr(Account) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   RSA = StrToFloat(ParusQuery(AData), "RSA")
End Function

Public Function RSAC(Optional Account As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                     Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                     Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "RSAC;" + """" + CStr(Account) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   RSAC = StrToFloat(ParusQuery(AData), "RSAC")
End Function

Public Function RSACE(Optional Account As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                      Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                      Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "RSACE;" + """" + CStr(Account) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   RSACE = StrToFloat(ParusQuery(AData), "RSACE")
End Function

Public Function RSAD(Optional Account As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                     Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                     Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "RSAD;" + """" + CStr(Account) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   RSAD = StrToFloat(ParusQuery(AData), "RSAD")
End Function

Public Function RSADE(Optional Account As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                      Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                      Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "RSADE;" + """" + CStr(Account) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   RSADE = StrToFloat(ParusQuery(AData), "RSADE")
End Function

Public Function RSAE(Optional Account As Variant, Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                     Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                     Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "RSAE;" + """" + CStr(Account) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   RSAE = StrToFloat(ParusQuery(AData), "RSAE")
End Function

Public Function RSE(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant, _
                    Optional SpecMark As Variant, Optional BlcBegFrom As Variant, Optional BlcBegTo As Variant, Optional BlcEndFrom As Variant, Optional BlcEndTo As Variant, Optional VDocType As Variant, Optional VDocNumb As Variant, Optional VDocDateFrom As Variant, _
                    Optional VDocDateTo As Variant, Optional EsDocType As Variant, Optional EsDocNumb As Variant, Optional EsDocDateFrom As Variant, Optional EsDocDateTo As Variant, Optional ClosePay As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers
   CheckForString SpecMark
   CheckForDate BlcBegFrom
   CheckForDate BlcBegTo
   CheckForDate BlcEndFrom
   CheckForDate BlcEndTo
   CheckForString VDocType
   CheckForString VDocNumb
   CheckForDate VDocDateFrom
   CheckForDate VDocDateTo
   CheckForString EsDocType
   CheckForString EsDocNumb
   CheckForDate EsDocDateFrom
   CheckForDate EsDocDateTo
   CheckForNumber ClosePay

   ASep = """" + ";" + """"
   AData = "RSE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + _
   ASep + SpecMark + ASep + BlcBegFrom + ASep + BlcBegTo + ASep + BlcEndFrom + ASep + BlcEndTo + ASep + VDocType + ASep + VDocNumb + ASep + VDocDateFrom + ASep + VDocDateTo + _
   ASep + EsDocType + ASep + EsDocNumb + ASep + EsDocDateFrom + ASep + EsDocDateTo + ASep + CStr(ClosePay) + """"

   RSE = StrToFloat(ParusQuery(AData), "RSE")
End Function

Public Function RSU(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                    Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RSU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RSU = StrToFloat(ParusQuery(AData), "RSU")
End Function

Public Function RSEU(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                     Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "RSEU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   RSEU = StrToFloat(ParusQuery(AData), "RSEU")
End Function

Public Function TNU(Optional AccDebit As Variant, Optional BUDebit As Variant, Optional AgentTo As Variant, _
                   Optional AccCredit As Variant, Optional BUCredit As Variant, Optional AgentFrom As Variant, _
                   Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, _
                   Optional SumType As Variant, _
                   Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString AccDebit
   CheckForString BUDebit
   CheckForString AgentTo
   CheckForString AccCredit
   CheckForString BUCredit
   CheckForString AgentFrom
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "TNU;" + """" + CStr(AccDebit) + ASep + CStr(BUDebit) + ASep + CStr(AgentTo) + ASep + CStr(AccCredit) + ASep + CStr(BUCredit) + ASep + CStr(AgentFrom) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   TNU = StrToFloat(ParusQuery(AData), "TNU")
End Function

Public Function TDU(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, _
                    Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, _
                    Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "TDU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   TDU = StrToFloat(ParusQuery(AData), "TDU")
End Function

Public Function TCU(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, _
                    Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, _
                    Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "TCU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   TCU = StrToFloat(ParusQuery(AData), "TCU")
End Function

Public Function TAU(Optional AccDebit As Variant, Optional BUDebit As Variant, _
                   Optional AnlDb1 As Variant, Optional AnlDb2 As Variant, Optional AnlDb3 As Variant, Optional AnlDb4 As Variant, Optional AnlDb5 As Variant, _
                   Optional AgentTo As Variant, Optional AccCredit As Variant, Optional BUCredit As Variant, _
                   Optional AnlCr1 As Variant, Optional AnlCr2 As Variant, Optional AnlCr3 As Variant, Optional AnlCr4 As Variant, Optional AnlCr5 As Variant, _
                   Optional AgentFrom As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, _
                   Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString AccDebit
   CheckForString BUDebit
   CheckForString AnlDb1
   CheckForString AnlDb2
   CheckForString AnlDb3
   CheckForString AnlDb4
   CheckForString AnlDb5
   CheckForString AgentTo
   CheckForString AccCredit
   CheckForString BUCredit
   CheckForString AnlCr1
   CheckForString AnlCr2
   CheckForString AnlCr3
   CheckForString AnlCr4
   CheckForString AnlCr5
   CheckForString AgentFrom
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "TAU;" + """" + CStr(AccDebit) + ASep + CStr(BUDebit) + ASep + CStr(AnlDb1) + ASep + CStr(AnlDb2) + ASep + CStr(AnlDb3) + ASep + CStr(AnlDb4) + ASep + CStr(AnlDb5) + ASep + CStr(AgentTo) + CStr(AccCredit) + ASep + CStr(BUCredit) + ASep + CStr(AnlCr1) + ASep + CStr(AnlCr2) + ASep + CStr(AnlCr3) + ASep + CStr(AnlCr4) + ASep + CStr(AnlCr5) + ASep + CStr(AgentFrom) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   TAU = StrToFloat(ParusQuery(AData), "TAU")
End Function

Public Function TADU(Optional Account As Variant, Optional BalUnit As Variant, _
                     Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, _
                     Optional Agent As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, _
                     Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Agent
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "TADU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   TADU = StrToFloat(ParusQuery(AData), "TADU")
End Function

Public Function TACU(Optional Account As Variant, Optional BalUnit As Variant, _
                     Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, _
                     Optional Agent As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, _
                     Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Agent
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "TACU;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   TACU = StrToFloat(ParusQuery(AData), "TACU")
End Function

Public Function TSDU(Optional AccDebit As Variant, Optional BUDebit As Variant, _
                     Optional AccCredit As Variant, Optional BUCredit As Variant, _
                     Optional Agent As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, _
                     Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString AccDebit
   CheckForString BUDebit
   CheckForString AccCredit
   CheckForString BUCredit
   CheckForString Agent
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "TSDU;" + """" + CStr(AccDebit) + ASep + CStr(BUDebit) + ASep + CStr(AccCredit) + ASep + CStr(BUCredit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   TSDU = StrToFloat(ParusQuery(AData), "TSDU")
End Function

Public Function TSCU(Optional AccDebit As Variant, Optional BUDebit As Variant, _
                     Optional AccCredit As Variant, Optional BUCredit As Variant, _
                     Optional Agent As Variant, Optional Curr As Variant, Optional BegDate As Variant, Optional EndDate As Variant, Optional SumType As Variant, _
                     Optional CompanyUnion As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString AccDebit
   CheckForString BUDebit
   CheckForString AccCredit
   CheckForString BUCredit
   CheckForString Agent
   CheckForString Curr
   CheckForDate BegDate
   CheckForDate EndDate
   CheckForString SumType
   CheckForString CompanyUnion
   CheckForString Company

   ASep = """" + ";" + """"
   AData = "TSCU;" + """" + CStr(AccDebit) + ASep + CStr(BUDebit) + ASep + CStr(AccCredit) + ASep + CStr(BUCredit) + ASep + CStr(Agent) + ASep + CStr(Curr) + ASep + BegDate + ASep + EndDate + ASep + SumType + ASep + _
   CStr(CompanyUnion) + ASep + CStr(Company) + """"

   TSCU = StrToFloat(ParusQuery(AData), "TSCU")
End Function

Public Function VPA(Optional BalUnit As Variant, Optional Nomen As Variant, _
                    Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                    Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Nomen
   CheckForString BalUnit
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers

   ASep = """" + ";" + """"
   AData = "VPA;" + """" + CStr(BalUnit) + ASep + CStr(Nomen) + ASep + _
   CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"

   VPA = StrToFloat(ParusQuery(AData), "VPA")
End Function

Public Function VPM(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Nomen As Variant, _
                    Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                    Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Nomen
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers

   ASep = """" + ";" + """"
   AData = "VPM;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Nomen) + ASep + _
   CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"

   VPM = StrToFloat(ParusQuery(AData), "VPM")
End Function

Public Function VAPM(Optional Account As Variant, Optional BalUnit As Variant, _
                     Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, _
                     Optional Agent As Variant, Optional Nomen As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                     Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Nomen
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers

   ASep = """" + ";" + """"
   AData = "VAPM;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + _
   CStr(Agent) + ASep + CStr(Nomen) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"

   VAPM = StrToFloat(ParusQuery(AData), "VAPM")
End Function

Public Function VPME(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Nomen As Variant, _
                    Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                    Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Nomen
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers

   ASep = """" + ";" + """"
   AData = "VPME;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Nomen) + ASep + _
   CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"

   VPME = StrToFloat(ParusQuery(AData), "VPME")
End Function

Public Function VAPME(Optional Account As Variant, Optional BalUnit As Variant, _
                      Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, _
                      Optional Agent As Variant, Optional Nomen As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                      Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Nomen
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers

   ASep = """" + ";" + """"
   AData = "VAPME;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + _
   CStr(Agent) + ASep + CStr(Nomen) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"

   VAPME = StrToFloat(ParusQuery(AData), "VAPME")
End Function

Public Function VPP(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Nomen As Variant, Optional Bath As Variant, _
                    Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                    Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Nomen
   CheckForString Bath
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers

   ASep = """" + ";" + """"
   AData = "VPP;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + _
   CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"

   VPP = StrToFloat(ParusQuery(AData), "VPP")
End Function

Public Function VAPP(Optional Account As Variant, Optional BalUnit As Variant, _
                     Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, _
                     Optional Agent As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional Curr As Variant, Optional DateOf As Variant, _
                     Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Nomen
   CheckForString Bath
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers

   ASep = """" + ";" + """"
   AData = "VAPP;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + _
   CStr(Agent) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"

   VAPP = StrToFloat(ParusQuery(AData), "VAPP")
End Function

Public Function VPPE(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Nomen As Variant, Optional Bath As Variant, _
                    Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                    Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Nomen
   CheckForString Bath
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers

   ASep = """" + ";" + """"
   AData = "VPPE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + _
   CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"

   VPPE = StrToFloat(ParusQuery(AData), "VPPE")
End Function

Public Function VAPPE(Optional Account As Variant, Optional BalUnit As Variant, _
                      Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, _
                      Optional Agent As Variant, Optional Nomen As Variant, Optional Bath As Variant, Optional Curr As Variant, Optional DateOf As Variant, _
                      Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Nomen
   CheckForString Bath
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers

   ASep = """" + ";" + """"
   AData = "VAPPE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + _
   CStr(Agent) + ASep + CStr(Nomen) + ASep + CStr(Bath) + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"

   VAPPE = StrToFloat(ParusQuery(AData), "VAPPE")
End Function

Public Function VPD(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Nomen As Variant, Optional DateIn As Variant, _
                    Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                    Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Nomen
   CheckForDate DateIn
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers

   ASep = """" + ";" + """"
   AData = "VPD;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Nomen) + ASep + DateIn + ASep + _
   CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"

   VPD = StrToFloat(ParusQuery(AData), "VPD")
End Function

Public Function VAPD(Optional Account As Variant, Optional BalUnit As Variant, _
                     Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, _
                     Optional Agent As Variant, Optional Nomen As Variant, Optional DateIn As Variant, Optional Curr As Variant, Optional DateOf As Variant, _
                     Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Nomen
   CheckForDate DateIn
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers

   ASep = """" + ";" + """"
   AData = "VAPD;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + _
   CStr(Agent) + ASep + CStr(Nomen) + ASep + DateIn + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"

   VAPD = StrToFloat(ParusQuery(AData), "VAPD")
End Function

Public Function VPDE(Optional Account As Variant, Optional BalUnit As Variant, Optional Agent As Variant, Optional Nomen As Variant, Optional DateIn As Variant, _
                    Optional Curr As Variant, Optional DateOf As Variant, Optional SumType As Variant, _
                    Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Nomen
   CheckForDate DateIn
   CheckForString Account
   CheckForString BalUnit
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers

   ASep = """" + ";" + """"
   AData = "VPDE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Agent) + ASep + CStr(Nomen) + ASep + DateIn + ASep + _
   CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"

   VPDE = StrToFloat(ParusQuery(AData), "VPDE")
End Function

Public Function VAPDE(Optional Account As Variant, Optional BalUnit As Variant, _
                      Optional Anl1 As Variant, Optional Anl2 As Variant, Optional Anl3 As Variant, Optional Anl4 As Variant, Optional Anl5 As Variant, _
                      Optional Agent As Variant, Optional Nomen As Variant, Optional DateIn As Variant, Optional Curr As Variant, Optional DateOf As Variant, _
                      Optional SumType As Variant, Optional Company As Variant, Optional JurPers As Variant) As Double
Dim AData, ASep As String
   CheckForString Nomen
   CheckForDate DateIn
   CheckForString Account
   CheckForString BalUnit
   CheckForString Anl1
   CheckForString Anl2
   CheckForString Anl3
   CheckForString Anl4
   CheckForString Anl5
   CheckForString Agent
   CheckForString Curr
   CheckForDate DateOf
   CheckForString SumType
   CheckForString Company
   CheckForString JurPers

   ASep = """" + ";" + """"
   AData = "VAPDE;" + """" + CStr(Account) + ASep + CStr(BalUnit) + ASep + CStr(Anl1) + ASep + CStr(Anl2) + ASep + CStr(Anl3) + ASep + CStr(Anl4) + ASep + CStr(Anl5) + ASep + _
   CStr(Agent) + ASep + CStr(Nomen) + ASep + DateIn + ASep + CStr(Curr) + ASep + DateOf + ASep + SumType + ASep + CStr(Company) + ASep + CStr(JurPers) + """"

   VAPDE = StrToFloat(ParusQuery(AData), "VAPDE")
End Function

Public Function CC(Optional Curr As Variant, Optional DateOf As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Curr
   CheckForDate DateOf
   CheckForString Company
   ASep = """" + ";" + """"
   AData = "CC;" + """" + CStr(Curr) + ASep + DateOf + ASep + CStr(Company) + """"
   CC = StrToFloat(ParusQuery(AData), "CC")
End Function

Public Function CCA(Optional Curr As Variant, Optional DateBeg As Variant, Optional DateEnd As Variant, Optional Company As Variant) As Double
Dim AData, ASep As String
   CheckForString Curr
   CheckForDate DateBeg
   CheckForDate DateEnd
   CheckForString Company
   ASep = """" + ";" + """"
   AData = "CCA;" + """" + CStr(Curr) + ASep + DateBeg + ASep + DateEnd + ASep + CStr(Company) + """"
   CCA = StrToFloat(ParusQuery(AData), "CCA")
End Function

Public Function R_CC(Optional Company As Variant, Optional Curr As Variant, Optional DateOf As Variant, Optional AccType As Variant) As Double
Dim AData, ASep As String
   CheckForString Company
   CheckForString Curr
   CheckForDate DateOf
   CheckForString AccType
   ASep = """" + ";" + """"
   AData = "R_CC;" + """" + CStr(Company) + ASep + CStr(Curr) + ASep + DateOf + ASep + CStr(AccType) + """"
   R_CC = StrToFloat(ParusQuery(AData), "R_CC")
End Function

Public Function R_CCA(Optional Company As Variant, Optional Curr As Variant, Optional DateBeg As Variant, Optional DateEnd As Variant, Optional AccType As Variant) As Double
Dim AData, ASep As String
   CheckForString Company
   CheckForString Curr
   CheckForDate DateBeg
   CheckForDate DateEnd
   CheckForString AccType
   ASep = """" + ";" + """"
   AData = "R_CCA;" + """" + CStr(Company) + ASep + CStr(Curr) + ASep + DateBeg + ASep + DateEnd + ASep + CStr(AccType) + """"
   R_CCA = StrToFloat(ParusQuery(AData), "R_CCA")
End Function

Public Function R_CCE(Optional Company As Variant, Optional CurrencyFrom As Variant, Optional CurrencyTo As Variant, Optional DateOf As Variant, Optional AccType As Variant, Optional UseSign As Variant) As Double
Dim AData, ASep As String
   CheckForString Company
   CheckForString CurrencyFrom
   CheckForString CurrencyTo
   CheckForDate DateOf
   CheckForString AccType
   CheckForString UseSign
   ASep = """" + ";" + """"
   AData = "R_CCE;" + """" + CStr(Company) + ASep + CStr(CurrencyFrom) + ASep + CStr(CurrencyTo) + ASep + DateOf + ASep + CStr(AccType) + ASep + CStr(UseSign) + """"
   R_CCE = StrToFloat(ParusQuery(AData), "R_CCE")
End Function

Public Function R_CCAE(Optional Company As Variant, Optional CurrencyFrom As Variant, Optional CurrencyTo As Variant, Optional DateBeg As Variant, Optional DateEnd As Variant, Optional AccType As Variant, Optional UseSign As Variant) As Double
Dim AData, ASep As String
   CheckForString Company
   CheckForString CurrencyFrom
   CheckForString CurrencyTo
   CheckForDate DateBeg
   CheckForDate DateEnd
   CheckForString AccType
   CheckForString UseSign
   ASep = """" + ";" + """"
   AData = "R_CCAE;" + """" + CStr(Company) + ASep + CStr(CurrencyFrom) + ASep + CStr(CurrencyTo) + ASep + DateBeg + ASep + DateEnd + ASep + CStr(AccType) + ASep + CStr(UseSign) + """"
   R_CCAE = StrToFloat(ParusQuery(AData), "R_CCAE")
End Function

Public Sub RunReport()
On Error GoTo Default
  Application.Run (UnitCode)
  Exit Sub
Default:
  ShowContext
End Sub

Sub ShowContext()
Dim I, J As Integer
Dim FieldName, Value As String
Dim Context As Object
Set Context = CreateObject("Microsoft.XMLDOM")
Context.loadXML (XMLContext)
For I = 0 To Context.FirstChild.FirstChild.childNodes.Length - 2
  FieldName = Context.FirstChild.FirstChild.childNodes.Item(I).TagName
  Cells(1, I + 1).Value = FieldName
  Cells(2, I + 1).Value = Context.selectSingleNode("//MASTER/" & FieldName).Text
Next
For I = 0 To Context.FirstChild.selectSingleNode("//DETAIL").childNodes.Length - 1
FieldName = Context.FirstChild.selectSingleNode("//DETAIL").childNodes.Item(I).TagName
Cells(4, I + 1).Value = FieldName
  For J = 0 To Context.FirstChild.selectNodes("//DETAIL").Length - 1
   Cells(J + 5, I + 1).Value = Context.FirstChild.selectNodes("//DETAIL/" & FieldName).Item(J).Text
Next J, I
'Set Context = Empty
End Sub

Public Sub Preview()
  ActiveSheet.PrintPreview
End Sub

Public Sub BankDocuments()
Preview
End Sub

Private Function UFInner(ByVal Arg) As String
Dim CurVal As Variant, I As Integer
    CurVal = Arg
    If IsArray(CurVal) Then
      For I = LBound(CurVal) To UBound(CurVal)
        UFInner = UFInner + UFInner(CurVal(I))
      Next
    Else
      Select Case VarType(CurVal)
        Case vbDate
          CheckForDate CurVal
          UFInner = ";" + Chr(34) + CurVal + Chr(34)
        Case vbInteger To vbCurrency
          CheckForNumber CurVal
          UFInner = ";" + CurVal
        Case Else
          CheckForString CurVal
          UFInner = ";" + Chr(34) + CurVal + Chr(34)
      End Select
    End If
End Function

Public Function PrUFStr(ByVal FuncName As String, ParamArray Args()) As String
Dim ParamStr As String, I As Integer
    ParamStr = ""
    For I = LBound(Args) To UBound(Args)
      ParamStr = ParamStr + UFInner(Args(I))
    Next
    PrUFStr = ParusQuery(FuncName + ParamStr)
End Function

Public Function PrUF(ByVal FuncName As String, ParamArray Args()) As Double
Dim ParamStr As String, CurVal As Variant, I As Integer
    ParamStr = ""
    For I = LBound(Args) To UBound(Args)
      ParamStr = ParamStr + UFInner(Args(I))
    Next
    PrUF = StrToFloat(ParusQuery(FuncName + ParamStr))
End Function

Public Function PrA(ParamArray Args()) As Variant
Dim AParams() As Variant, I As Integer
  ReDim Preserve AParams(UBound(Args))
  For I = LBound(Args) To UBound(Args)
    If IsError(Args(I)) Then
      AParams(I) = ""
    Else
      AParams(I) = Args(I)
    End If
  Next
  PrA = AParams
End Function

Public Function GD(Optional GdType As Variant, Optional CustCode As Variant, _
  Optional AcceptDate As Variant, Optional GdNumb As Variant, _
  Optional BordCustAgent As Variant, Optional ParName As Variant) As Variant
Dim AData, ASep As String
   CheckForNumber GdType
   CheckForString CustCode
   CheckForDate AcceptDate
   CheckForString GdNumb
   CheckForString BordCustAgent
   CheckForString ParName
   ASep = """;"""
   AData = "GD;" + CStr(GdType) + ";""" + CustCode + ASep + _
     AcceptDate + ASep + GdNumb + ASep + BordCustAgent + ASep + ParName + """"
   GD = ParusQuery(AData)
End Function

Public Function GDS(Optional GdType As Variant, Optional CustCode As Variant, _
  Optional AcceptDate As Variant, Optional GdNumb As Variant, _
  Optional BordCustAgent As Variant, Optional Numb As Variant, _
  Optional ParName As Variant) As Variant
Dim AData, ASep As String
   CheckForNumber GdType
   CheckForString CustCode
   CheckForDate AcceptDate
   CheckForString GdNumb
   CheckForString BordCustAgent
   CheckForNumber Numb
   CheckForString ParName
   ASep = """;"""
   AData = "GDS;" + CStr(GdType) + ";""" + CustCode + ASep + _
     AcceptDate + ASep + GdNumb + ASep + BordCustAgent + """;" + CStr(Numb) + _
     ";""" + ParName + """"
   GDS = ParusQuery(AData)
End Function

Public Function SMETA_EX(Optional CondSign As Variant, Optional OutType As Variant, _
  Optional Period As Variant, Optional BudgExpend As Variant, _
  Optional BudgExpend_Sp As Variant, Optional RegYear As Variant, _
  Optional ExpStruct As Variant, Optional EconClass As Variant, _
  Optional Curr As Variant, Optional BalUnit As Variant, _
  Optional JurPers As Variant, Optional FaceAcc As Variant, _
  Optional Agent As Variant, Optional FinOper As Variant, _
  Optional PayTool As Variant, Optional Company As Variant) As Variant
Dim AData, ASep As String
   CheckForNumber CondSign
   CheckForNumber OutType
   CheckForNumber Period
   CheckForString BudgExpend
   CheckForString BudgExpend_Sp
   CheckForString RegYear
   CheckForString ExpStruct
   CheckForString EconClass
   CheckForString Curr
   CheckForString BalUnit
   CheckForString JurPers
   CheckForString FaceAcc
   CheckForString Agent
   CheckForString FinOper
   CheckForString PayTool
   CheckForString Company
   ASep = """;"""
   AData = "SMETA_EX;" + CStr(CondSign) + ";" + CStr(OutType) + ";" + _
     CStr(Period) + ";""" + BudgExpend + ASep + BudgExpend_Sp + ASep + _
     RegYear + ASep + ExpStruct + ASep + EconClass + ASep + Curr + ASep + _
     BalUnit + ASep + JurPers + ASep + FaceAcc + ASep + Agent + ASep + _
     FinOper + ASep + PayTool + ASep + Company + """"
   SMETA_EX = ParusQuery(AData)
End Function

Private Function ColumnAddress(ByVal ANumber As Integer)
  If (ANumber < 1) Then
    Err.Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - " + CStr(ANumber)
    Err.Raise (vbObjectError)
  End If
  If ANumber <= CCharCount Then
    ColumnAddress = Chr(CStartChar + ANumber)
  Else
    ColumnAddress = Chr(CStartChar + (ANumber - 1) \ CCharCount) + Chr(CStartChar + ((ANumber - 1) Mod CCharCount) + 1)
  End If
End Function

Private Function ParseAddress(ARange As Range)
  Dim LAddress, Result, LPosR, LPosC, LPosDelim, LEnd
  LAddress = ARange.AddressLocal(True, True, xlR1C1)
  Result = Array(0, 0, 0, 0, 0, 0)
  If ARange.Areas.Count > 1 Then
    Err.Description = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + LAddress + " |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    Err.Raise (vbObjectError)
  End If
  
  LPosR = InStr(LAddress, "R")
  LPosC = InStr(LAddress, "C")
  LPosDelim = InStr(LAddress, ":")

  If LPosR > 0 Then
    If LPosC > 0 Then
      LEnd = LPosC - 1
    Else
      If LPosDelim > 0 Then
        LEnd = LPosDelim - 1
      Else
        LEnd = Len(LAddress)
      End If
    End If
    Result(CBeginRow) = CLng(Mid(LAddress, LPosR + 1, LEnd - LPosR))
  End If

  If LPosC > 0 Then
    If LPosDelim > 0 Then
      LEnd = LPosDelim - 1
    Else
      LEnd = Len(LAddress)
    End If
    Result(CBeginColumn) = CLng(Mid(LAddress, LPosC + 1, LEnd - LPosC))
  End If
  
  If LPosDelim > 0 Then
    LAddress = Mid(LAddress, LPosDelim + 1)
    LPosR = InStr(LAddress, "R")
    LPosC = InStr(LAddress, "C")
    If LPosR > 0 Then
      If LPosC > 0 Then
        LEnd = LPosC - 1
      Else
        LEnd = Len(LAddress)
      End If
      Result(CEndRow) = CLng(Mid(LAddress, LPosR + 1, LEnd - LPosR))
    Else
      Result(CEndRow) = Result(CBeginRow)
    End If

    If LPosC > 0 Then
      Result(CEndColumn) = CLng(Mid(LAddress, LPosC + 1, Len(LAddress) - LPosC))
    Else
      Result(CEndColumn) = Result(CBeginColumn)
    End If
  Else
    Result(CEndRow) = Result(CBeginRow)
    Result(CEndColumn) = Result(CBeginColumn)
  End If
  
  If Result(CBeginRow) > 0 Then
    Result(CRowCount) = Result(CEndRow) - Result(CBeginRow) + 1
  End If
  If Result(CBeginColumn) > 0 Then
    Result(CColumnCount) = Result(CEndColumn) - Result(CBeginColumn) + 1
  End If
  ParseAddress = Result
End Function

Private Function ParseRelativeAddress(ARange As Range, ARelationRange As Range)
  Dim Result, LAddress, LPosR, LPosC, LPosDelim, LEnd
  Result = Array(0, 0, 0, 0, 0, 0)

  LAddress = ARange.AddressLocal(False, False, xlR1C1, False, ARelationRange)
  If (ARange.Areas.Count > 1) Or (ARelationRange.Areas.Count > 1) Then
    Err.Description = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + LAddress + " |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    Err.Raise (vbObjectError)
  End If
  
  
  LAddress = Replace(LAddress, "[", "")
  LAddress = Replace(LAddress, "]", "")
  
  LPosR = InStr(LAddress, "R")
  LPosC = InStr(LAddress, "C")
  LPosDelim = InStr(LAddress, ":")

  If LPosR > 0 Then
    If LPosC > 0 Then
      LEnd = LPosC - 1
    Else
      If LPosDelim > 0 Then
        LEnd = LPosDelim - 1
      Else
        LEnd = Len(LAddress)
      End If
    End If
    If LEnd > LPosR Then
      Result(CBeginRow) = CLng(Mid(LAddress, LPosR + 1, LEnd - LPosR)) + 1
    Else
      Result(CBeginRow) = 1
    End If
  End If
  
  If LPosC > 0 Then
    If LPosDelim > 0 Then
      LEnd = LPosDelim - 1
    Else
      LEnd = Len(LAddress)
    End If
    If LEnd > LPosC Then
      Result(CBeginColumn) = CLng(Mid(LAddress, LPosC + 1, LEnd - LPosC)) + 1
    Else
      Result(CBeginColumn) = 1
    End If
  End If
  
  If LPosDelim > 0 Then
    LAddress = Mid(LAddress, LPosDelim + 1)
    LPosR = InStr(LAddress, "R")
    LPosC = InStr(LAddress, "C")
    If LPosR > 0 Then
      If LPosC > 0 Then
        LEnd = LPosC - 1
      Else
        LEnd = Len(LAddress)
      End If
      If LEnd > LPosR Then
        Result(CEndRow) = CLng(Mid(LAddress, LPosR + 1, LEnd - LPosR)) + 1
      Else
        Result(CEndRow) = Result(CBeginRow)
      End If
    End If
    If (LPosC > 0) And (Len(LAddress) > LPosC) Then
      Result(CEndColumn) = CLng(Mid(LAddress, LPosC + 1, Len(LAddress) - LPosC)) + 1
    End If
  Else
    Result(CEndRow) = Result(CBeginRow)
    Result(CEndColumn) = Result(CBeginColumn)
  End If
  
  If Not ((Result(CBeginRow) > 0) And (Result(CBeginColumn) > 0) And (Result(CEndRow) > 0) And (Result(CEndColumn) > 0)) Then
    Err.Description = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + ARange.AddressLocal(True, True, xlR1C1) + " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + ARelationRange.AddressLocal(True, True, xlR1C1)
    Err.Raise (vbObjectError)
  End If
  ParseRelativeAddress = Result
End Function

Private Function GetRelativeAddress(ARange As Range, ARelationRange As Range)
  Dim LAddress
  LAddress = ParseRelativeAddress(ARange, ARelationRange)
  GetRelativeAddress = ColumnAddress(LAddress(CBeginColumn)) + _
    CStr(LAddress(CBeginRow)) + ":" + _
    ColumnAddress(LAddress(CEndColumn)) + CStr(LAddress(CEndRow))
End Function

Private Function GetCrossAddress(ARowRange As Range, AColumnRange As Range)
  Dim LRowAddress, LColumnAddress
  LRowAddress = ParseAddress(ARowRange)
  LColumnAddress = ParseAddress(AColumnRange)
  GetCrossAddress = ColumnAddress(LColumnAddress(CBeginColumn)) + _
    CStr(LRowAddress(CBeginRow)) + ":" + _
    ColumnAddress(LColumnAddress(CEndColumn)) + _
    CStr(LRowAddress(CEndRow))
End Function

Sub CorrectHeight()
  Dim Tmp2, LHeight, LWidth, LOldWidth, a1, a2, chr0, paddings, LRowDiff
  If Selection.WrapText And Selection.MergeCells Then
    LOldWidth = Selection.Width
    Set Tmp2 = Selection.Cells(1)
    LHeight = Tmp2.RowHeight
    LRowDiff = Selection.Height - LHeight
    Tmp2.MergeCells = False
    LWidth = Tmp2.ColumnWidth
    Tmp2.ColumnWidth = 1
    a1 = Tmp2.Width
    Tmp2.ColumnWidth = 2
    a2 = Tmp2.Width
    chr0 = a2 - a1
    paddings = a1 - chr0
    Tmp2.ColumnWidth = Application.WorksheetFunction.Min((LOldWidth - paddings) / chr0, 254)
    Tmp2.Rows(1).AutoFit
    If Tmp2.RowHeight < LRowDiff Then
      Tmp2.RowHeight = 0
    Else
      Tmp2.RowHeight = Application.WorksheetFunction.Min(Tmp2.RowHeight - LRowDiff, 409)
    End If
    If Tmp2.RowHeight < LHeight Then
      Tmp2.RowHeight = LHeight
    End If
    Selection.Merge
    Tmp2.ColumnWidth = LWidth
  End If
End Sub

Sub SetValueToSelection(AValue)
  If Application.Selection.HasFormula = False Then
    Application.Selection.Value = AValue
    Call CorrectHeight
  End If
End Sub

Private Function decodeBase64(ByVal strData As String) As Byte()
    Dim objXML
    Dim objNode

    Set objXML = CreateObject("Msxml2.DOMDocument.3.0")
    Set objNode = objXML.createElement("b64")
    objNode.DataType = "bin.base64"
    objNode.Text = strData
    decodeBase64 = objNode.nodeTypedValue

    Set objNode = Nothing
    Set objXML = Nothing
End Function

Function FileGetTempName(Optional sFilePrefix As String = "TMP") As String
  Dim sTemp As String * 260, lngLen As Long
  Static ssTempPath As String

  If LenB(ssTempPath) = 0 Then
      'Get the temporary path
      lngLen = GetTempPath(260, sTemp)
      'strip the rest of the buffer
      ssTempPath = Left$(sTemp, lngLen)
      If Right$(ssTempPath, 1) <> "\" Then
          ssTempPath = ssTempPath & "\"
      End If
  End If

  'Get a temporary filename
  lngLen = GetTempFileName(ssTempPath, sFilePrefix, 0, sTemp)
  'Remove all the unnecessary chr$(0)'s
  FileGetTempName = Left$(sTemp, InStr(1, sTemp, Chr$(0)) - 1)
End Function

Sub WriteToFile(Var() As Byte, FileSpec As String)
  Dim lngFN As Long

  lngFN = FreeFile()
  Open FileSpec For Binary Access Write As #lngFN
  Put #lngFN, , Var
  Close #lngFN
End Sub

Sub DeleteFile(ByVal FileToDelete As String)
  If (Dir(FileToDelete) <> "") Then
    SetAttr FileToDelete, vbNormal
    Kill FileToDelete
  End If
End Sub

Sub SetImageToSelection(AValue As String)
  Dim FileName As String
  Dim Left, Top As Variant

  Left = Selection.Left
  Top = Selection.Top

  FileName = FileGetTempName("p8t")
  Call WriteToFile(decodeBase64(AValue), FileName)

  With ActiveSheet.Shapes.AddPicture(FileName, msoFalse, msoTrue, Left, Top, 0, 0)
    .ScaleHeight 1, msoTrue
    .ScaleWidth 1, msoTrue
    .LockAspectRatio = msoTrue
  End With

  DeleteFile (FileName)
End Sub

Private Sub SelectionSetAttributes(AAttribute As String, AValue As String)

  Select Case UCase(AAttribute)

'>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| RowHeight

    Case "ROWHEIGHT":
      If IsNumeric(AValue) Then
        Application.Selection.RowHeight = Val(AValue)
      End If
  
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ColumnWidth - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Width
  
    Case "COLUMNWIDTH":
      If IsNumeric(AValue) Then
        Application.Selection.ColumnWidth = Val(AValue)
      End If
  
  ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| BORDERS   xlEdgeBottom, xlEdgeTop, xlEdgeLeft, xlEdgeRight, xlInsideVertical, xlInsideHorizontal
  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| LineStyle xlContinuous, xlDash, xlDashDot, xlDashDotDot, xlDot, xlDouble, xlSlantDashDot, and xlLineStyleNone
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| xlHairline, xlThin, xlMedium, xlThick
  ' ColorIndex
  
  '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  
    Case "BORDERS(XLEDGEBOTTOM).LINESTYLE"
      Select Case UCase(AValue)
        Case "XLCONTINUOUS": Application.Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
        Case "XLDASH": Application.Selection.Borders(xlEdgeBottom).LineStyle = xlDash
        Case "XLDASHDOT": Application.Selection.Borders(xlEdgeBottom).LineStyle = xlDashDot
        Case "XLDASHDOTDOT": Application.Selection.Borders(xlEdgeBottom).LineStyle = xlDashDotDot
        Case "XLDOT": Application.Selection.Borders(xlEdgeBottom).LineStyle = xlDot
        Case "XLDOUBLE": Application.Selection.Borders(xlEdgeBottom).LineStyle = xlDouble
        Case "XLSLANTDASHDOT": Application.Selection.Borders(xlEdgeBottom).LineStyle = xlSlantDashDot
        Case Else: Application.Selection.Borders(xlEdgeBottom).LineStyle = xlLineStyleNone
      End Select
    
    Case "BORDERS(XLEDGETOP).LINESTYLE"
      Select Case UCase(AValue)
        Case "XLCONTINUOUS": Application.Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
        Case "XLDASH": Application.Selection.Borders(xlEdgeTop).LineStyle = xlDash
        Case "XLDASHDOT": Application.Selection.Borders(xlEdgeTop).LineStyle = xlDashDot
        Case "XLDASHDOTDOT": Application.Selection.Borders(xlEdgeTop).LineStyle = xlDashDotDot
        Case "XLDOT": Application.Selection.Borders(xlEdgeTop).LineStyle = xlDot
        Case "XLDOUBLE": Application.Selection.Borders(xlEdgeTop).LineStyle = xlDouble
        Case "XLSLANTDASHDOT": Application.Selection.Borders(xlEdgeTop).LineStyle = xlSlantDashDot
        Case Else:  Application.Selection.Borders(xlEdgeTop).LineStyle = xlLineStyleNone
      End Select
    
    Case "BORDERS(XLEDGELEFT).LINESTYLE"
      Select Case UCase(AValue)
        Case "XLCONTINUOUS": Application.Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
        Case "XLDASH": Application.Selection.Borders(xlEdgeLeft).LineStyle = xlDash
        Case "XLDASHDOT": Application.Selection.Borders(xlEdgeLeft).LineStyle = xlDashDot
        Case "XLDASHDOTDOT": Application.Selection.Borders(xlEdgeLeft).LineStyle = xlDashDotDot
        Case "XLDOT": Application.Selection.Borders(xlEdgeLeft).LineStyle = xlDot
        Case "XLDOUBLE": Application.Selection.Borders(xlEdgeLeft).LineStyle = xlDouble
        Case "XLSLANTDASHDOT": Application.Selection.Borders(xlEdgeLeft).LineStyle = xlSlantDashDot
        Case Else:  Application.Selection.Borders(xlEdgeLeft).LineStyle = xlLineStyleNone
      End Select
    
    Case "BORDERS(XLEDGERIGHT).LINESTYLE"
      Select Case UCase(AValue)
        Case "XLCONTINUOUS": Application.Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
        Case "XLDASH": Application.Selection.Borders(xlEdgeRight).LineStyle = xlDash
        Case "XLDASHDOT": Application.Selection.Borders(xlEdgeRight).LineStyle = xlDashDot
        Case "XLDASHDOTDOT": Application.Selection.Borders(xlEdgeRight).LineStyle = xlDashDotDot
        Case "XLDOT": Application.Selection.Borders(xlEdgeRight).LineStyle = xlDot
        Case "XLDOUBLE": Application.Selection.Borders(xlEdgeRight).LineStyle = xlDouble
        Case "XLSLANTDASHDOT": Application.Selection.Borders(xlEdgeRight).LineStyle = xlSlantDashDot
        Case Else:  Application.Selection.Borders(xlEdgeRight).LineStyle = xlLineStyleNone
      End Select
    
    Case "BORDERS(XLINSIDEVERTICAL).LINESTYLE"
      Select Case UCase(AValue)
        Case "XLCONTINUOUS": Application.Selection.Borders(xlInsideVertical).LineStyle = xlContinuous
        Case "XLDASH": Application.Selection.Borders(xlInsideVertical).LineStyle = xlDash
        Case "XLDASHDOT": Application.Selection.Borders(xlInsideVertical).LineStyle = xlDashDot
        Case "XLDASHDOTDOT": Application.Selection.Borders(xlInsideVertical).LineStyle = xlDashDotDot
        Case "XLDOT": Application.Selection.Borders(xlInsideVertical).LineStyle = xlDot
        Case "XLDOUBLE": Application.Selection.Borders(xlInsideVertical).LineStyle = xlDouble
        Case "XLSLANTDASHDOT": Application.Selection.Borders(xlInsideVertical).LineStyle = xlSlantDashDot
        Case Else:  Application.Selection.Borders(xlInsideVertical).LineStyle = xlLineStyleNone
      End Select
  
    Case "BORDERS(XLINSIDEHORIZONTAL).LINESTYLE"
      Select Case UCase(AValue)
        Case "XLCONTINUOUS": Application.Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
        Case "XLDASH": Application.Selection.Borders(xlInsideHorizontal).LineStyle = xlDash
        Case "XLDASHDOT": Application.Selection.Borders(xlInsideHorizontal).LineStyle = xlDashDot
        Case "XLDASHDOTDOT": Application.Selection.Borders(xlInsideHorizontal).LineStyle = xlDashDotDot
        Case "XLDOT": Application.Selection.Borders(xlInsideHorizontal).LineStyle = xlDot
        Case "XLDOUBLE": Application.Selection.Borders(xlInsideHorizontal).LineStyle = xlDouble
        Case "XLSLANTDASHDOT": Application.Selection.Borders(xlInsideHorizontal).LineStyle = xlSlantDashDot
        Case Else:  Application.Selection.Borders(xlInsideHorizontal).LineStyle = xlLineStyleNone
      End Select
  
    Case "BORDERS(XLDIAGONALDOWN).LINESTYLE"
      Select Case UCase(AValue)
        Case "XLCONTINUOUS": Application.Selection.Borders(xlDiagonalDown).LineStyle = xlContinuous
        Case "XLDASH": Application.Selection.Borders(xlDiagonalDown).LineStyle = xlDash
        Case "XLDASHDOT": Application.Selection.Borders(xlDiagonalDown).LineStyle = xlDashDot
        Case "XLDASHDOTDOT": Application.Selection.Borders(xlDiagonalDown).LineStyle = xlDashDotDot
        Case "XLDOT": Application.Selection.Borders(xlDiagonalDown).LineStyle = xlDot
        Case "XLDOUBLE": Application.Selection.Borders(xlDiagonalDown).LineStyle = xlDouble
        Case "XLSLANTDASHDOT": Application.Selection.Borders(xlDiagonalDown).LineStyle = xlSlantDashDot
        Case Else:  Application.Selection.Borders(xlDiagonalDown).LineStyle = xlLineStyleNone
      End Select
  
    Case "BORDERS(XLDIAGONALUP).LINESTYLE"
      Select Case UCase(AValue)
        Case "XLCONTINUOUS": Application.Selection.Borders(xlDiagonalUp).LineStyle = xlContinuous
        Case "XLDASH": Application.Selection.Borders(xlDiagonalUp).LineStyle = xlDash
        Case "XLDASHDOT": Application.Selection.Borders(xlDiagonalUp).LineStyle = xlDashDot
        Case "XLDASHDOTDOT": Application.Selection.Borders(xlDiagonalUp).LineStyle = xlDashDotDot
        Case "XLDOT": Application.Selection.Borders(xlDiagonalUp).LineStyle = xlDot
        Case "XLDOUBLE": Application.Selection.Borders(xlDiagonalUp).LineStyle = xlDouble
        Case "XLSLANTDASHDOT": Application.Selection.Borders(xlDiagonalUp).LineStyle = xlSlantDashDot
        Case Else:  Application.Selection.Borders(xlDiagonalUp).LineStyle = xlLineStyleNone
      End Select
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  xlHairline, xlThin, xlMedium, xlThick
    Case "BORDERS(XLEDGEBOTTOM).WEIGHT"
      Select Case UCase(AValue)
        Case "XLHAIRLINE": Application.Selection.Borders(xlEdgeBottom).Weight = xlHairline
        Case "XLTHIN": Application.Selection.Borders(xlEdgeBottom).Weight = xlThin
        Case "XLMEDIUM": Application.Selection.Borders(xlEdgeBottom).Weight = xlMedium
        Case "XLTHICK": Application.Selection.Borders(xlEdgeBottom).Weight = xlThick
        Case Else
          If IsNumeric(AValue) Then
            Application.Selection.Borders(xlEdgeBottom).Weight = Val(AValue)
          End If
        End Select
    Case "BORDERS(XLEDGETOP).WEIGHT"
      Select Case UCase(AValue)
        Case "XLHAIRLINE": Application.Selection.Borders(xlEdgeTop).Weight = xlHairline
        Case "XLTHIN": Application.Selection.Borders(xlEdgeTop).Weight = xlThin
        Case "XLMEDIUM": Application.Selection.Borders(xlEdgeTop).Weight = xlMedium
        Case "XLTHICK": Application.Selection.Borders(xlEdgeTop).Weight = xlThick
        Case Else
          If IsNumeric(AValue) Then
            Application.Selection.Borders(xlEdgeBottom).Weight = Val(AValue)
          End If
      End Select
    Case "BORDERS(XLEDGELEFT).WEIGHT"
      Select Case UCase(AValue)
        Case "XLHAIRLINE": Application.Selection.Borders(xlEdgeLeft).Weight = xlHairline
        Case "XLTHIN": Application.Selection.Borders(xlEdgeLeft).Weight = xlThin
        Case "XLMEDIUM": Application.Selection.Borders(xlEdgeLeft).Weight = xlMedium
        Case "XLTHICK": Application.Selection.Borders(xlEdgeLeft).Weight = xlThick
        Case Else
          If IsNumeric(AValue) Then
            Application.Selection.Borders(xlEdgeBottom).Weight = Val(AValue)
          End If
      End Select
    Case "BORDERS(XLEDGERIGHT).WEIGHT"
      Select Case UCase(AValue)
        Case "XLHAIRLINE": Application.Selection.Borders(xlEdgeRight).Weight = xlHairline
        Case "XLTHIN": Application.Selection.Borders(xlEdgeRight).Weight = xlThin
        Case "XLMEDIUM": Application.Selection.Borders(xlEdgeRight).Weight = xlMedium
        Case "XLTHICK": Application.Selection.Borders(xlEdgeRight).Weight = xlThick
        Case Else
          If IsNumeric(AValue) Then
            Application.Selection.Borders(xlEdgeBottom).Weight = Val(AValue)
          End If
      End Select
    Case "BORDERS(XLINSIDEVERTICAL).WEIGHT"
      Select Case UCase(AValue)
        Case "XLHAIRLINE": Application.Selection.Borders(xlInsideVertical).Weight = xlHairline
        Case "XLTHIN": Application.Selection.Borders(xlInsideVertical).Weight = xlThin
        Case "XLMEDIUM": Application.Selection.Borders(xlInsideVertical).Weight = xlMedium
        Case "XLTHICK": Application.Selection.Borders(xlInsideVertical).Weight = xlThick
        Case Else
          If IsNumeric(AValue) Then
            Application.Selection.Borders(xlEdgeBottom).Weight = Val(AValue)
          End If
      End Select
    Case "BORDERS(XLINSIDEHORIZONTAL).WEIGHT"
      Select Case UCase(AValue)
        Case "XLHAIRLINE": Application.Selection.Borders(xlInsideHorizontal).Weight = xlHairline
        Case "XLTHIN": Application.Selection.Borders(xlInsideHorizontal).Weight = xlThin
        Case "XLMEDIUM": Application.Selection.Borders(xlInsideHorizontal).Weight = xlMedium
        Case "XLTHICK": Application.Selection.Borders(xlInsideHorizontal).Weight = xlThick
        Case Else
          If IsNumeric(AValue) Then
            Application.Selection.Borders(xlEdgeBottom).Weight = Val(AValue)
          End If
      End Select
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| , |fffd||fffd||fffd||fffd|  - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ColorIndex
    Case "BORDERS(XLEDGEBOTTOM).COLORINDEX"
      If IsNumeric(AValue) Then
        Application.Selection.Borders(xlEdgeBottom).ColorIndex = Val(AValue)
      Else
        Application.Selection.Borders(xlEdgeBottom).ColorIndex = xlColorIndexAutomatic
      End If
    Case "BORDERS(XLEDGETOP).COLORINDEX"
      If IsNumeric(AValue) Then
        Application.Selection.Borders(xlEdgeTop).ColorIndex = Val(AValue)
      Else
        Application.Selection.Borders(xlEdgeTop).ColorIndex = xlColorIndexAutomatic
      End If
    Case "BORDERS(XLEDGELEFT).COLORINDEX"
      If IsNumeric(AValue) Then
        Application.Selection.Borders(xlEdgeLeft).ColorIndex = Val(AValue)
      Else
        Application.Selection.Borders(xlEdgeLeft).ColorIndex = xlColorIndexAutomatic
      End If
    Case "BORDERS(XLEDGERIGHT).COLORINDEX"
      If IsNumeric(AValue) Then
        Application.Selection.Borders(xlEdgeRight).ColorIndex = Val(AValue)
      Else
        Application.Selection.Borders(xlEdgeRight).ColorIndex = xlColorIndexAutomatic
      End If
    Case "BORDERS(XLINSIDEVERTICAL).COLORINDEX"
      If IsNumeric(AValue) Then
        Application.Selection.Borders(xlInsideVertical).ColorIndex = Val(AValue)
      Else
        Application.Selection.Borders(xlInsideVertical).ColorIndex = xlColorIndexAutomatic
      End If
    Case "BORDERS(XLINSIDEHORIZONTAL).COLORINDEX"
      If IsNumeric(AValue) Then
        Application.Selection.Borders(xlInsideHorizontal).ColorIndex = Val(AValue)
      Else
        Application.Selection.Borders(xlInsideHorizontal).ColorIndex = xlColorIndexAutomatic
      End If
';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    Case "HORIZONTALALIGNMENT": _
      Select Case UCase(AValue)
        Case "XLHALIGNCENTER": Application.Selection.HorizontalAlignment = xlHAlignCenter
        Case "XLHALIGNRIGHT": Application.Selection.HorizontalAlignment = xlHAlignRight
        Case Else: Application.Selection.HorizontalAlignment = xlHAlignLeft
      End Select
    Case "VERTICALALIGNMENT": _
      Select Case UCase(AValue)
        Case "XLVALIGNCENTER": Application.Selection.VerticalAlignment = xlVAlignCenter
        Case "XLVALIGNTOP": Application.Selection.VerticalAlignment = xlVAlignTop
        Case Else: Application.Selection.VerticalAlignment = xlVAlignBottom
      End Select
    Case "WRAPTEXT": Application.Selection.WrapText = UCase(AValue) = "TRUE"
    Case "FONT.FONTSTYLE": _
      Application.Selection.Font.Bold = InStr(1, AValue, "bold") > 0
      Application.Selection.Font.Italic = InStr(1, AValue, "italic") > 0
    Case "FONT.NAME": Application.Selection.Font.Name = AValue
    Case "FONT.SIZE": If IsNumeric(AValue) Then Application.Selection.Font.Size = Val(AValue)
    Case "FONT.UNDERLINE": _
      Select Case UCase(AValue)
        Case "XLUNDERLINESTYLENONE": Application.Selection.Font.Underline = xlUnderlineStyleNone
        Case "XLUNDERLINESTYLEDOUBLE": Application.Selection.Font.Underline = xlUnderlineStyleDouble
        Case Else: Application.Selection.Font.Underline = xlUnderlineStyleSingle
      End Select
    Case "FONT.COLORINDEX":
      If UCase(AValue) = "XLCOLORINDEXAUTOMATIC" Then
        Application.Selection.Font.ColorIndex = xlColorIndexAutomatic
      Else
        If IsNumeric(AValue) Then
          Application.Selection.Font.ColorIndex = Val(AValue)
        End If
      End If
    Case "INTERIOR.COLORINDEX":
      If UCase(AValue) = "XLCOLORINDEXAUTOMATIC" Then
        Application.Selection.Interior.ColorIndex = xlColorIndexAutomatic
      Else
        If IsNumeric(AValue) Then
          Application.Selection.Interior.ColorIndex = Val(AValue)
        End If
      End If
  End Select
End Sub

Private Sub CopyAttributes(ByRef AFrom As Range, ByRef ATo As Range, AAttribute As String)
  Select Case UCase(AAttribute)
    Case "HORIZONTALALIGNMENT": ATo.HorizontalAlignment = AFrom.HorizontalAlignment
    Case "VERTICALALIGNMENT": ATo.VerticalAlignment = AFrom.VerticalAlignment
    Case "WRAPTEXT": ATo.WrapText = AFrom.WrapText
    Case "FONT.FONTSTYLE": ATo.Font.FontStyle = AFrom.Font.FontStyle
    Case "FONT.NAME": ATo.Font.Name = AFrom.Font.Name
    Case "FONT.SIZE": ATo.Font.Size = AFrom.Font.Size
    Case "FONT.UNDERLINE": ATo.Font.Underline = AFrom.Font.Underline
    Case "FONT.COLORINDEX": ATo.Font.ColorIndex = AFrom.Font.ColorIndex
    Case "INTERIOR.COLORINDEX": ATo.Interior.ColorIndex = AFrom.Interior.ColorIndex
  End Select
End Sub

Sub TransferParams(ParamFile As String)
  Dim xmlDoc, xmlNode, param, xmlParams, I, xmlParam, J, xmlSubParam, LAddress, LRow, LRowCount, _
    LStr, sColumnFrom, LColumnCount, SColumnTo, LStrEx, LPasteType
  Dim LRFrom As Range, LRTo As Range
  Dim LAfterSheet As Worksheet
  Dim LSheet As Worksheet
  Dim LCalculation
  Set xmlDoc = CreateObject("Msxml2.DOMDocument.3.0")
  xmlDoc.Load (ParamFile)
  Set xmlNode = xmlDoc.selectSingleNode("params")
  Set xmlParams = xmlNode.childNodes
  Set param = CreateObject("Scripting.Dictionary")
  Application.ScreenUpdating = False
  LCalculation = Application.Calculation
  Application.Calculation = xlManual

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set LSheet = ActiveSheet
  For I = 1 To Sheets.Count
    If Sheets(I).Visible = xlSheetVisible Then
      Sheets(I).Activate
      ActiveWindow.View = xlNormalView
    End If
  Next
  If Not LSheet Is Nothing Then
    LSheet.Activate
  End If

  For I = 0 To xmlParams.Length - 1
    Set xmlParam = xmlParams.Item(I)
    param.RemoveAll
    For J = 0 To xmlParam.childNodes.Length - 1
      Set xmlSubParam = xmlParam.childNodes(J)
      param.Add xmlSubParam.nodeName, xmlSubParam.Attributes.getNamedItem("value").Value
    Next J
    Set LSheet = Sheets(param.Item("SSHEET_NAME"))
    Select Case param.Item("SCOMMAND")
      Case "APPEND_MACROS"
        Dim MacrosFileName As String
        MacrosFileName = FileGetTempName("p8t")
        Call WriteToFile(decodeBase64(CStr(param.Item("DATA"))), MacrosFileName)
        ThisWorkBook.VBProject.VBComponents(param.Item("SARGUMENT1")).CodeModule.AddFromFile (MacrosFileName)
        DeleteFile (MacrosFileName)
      Case "EXECUTE_MACROS"
        Application.Run (param.Item("SARGUMENT1"))
      Case "DELETE_NAME"
        Application.Names(param.Item("SARGUMENT1")).Delete
      Case "SHEET_PAGE_SETUP"
        Select Case param.Item("SARGUMENT1")
          Case "LEFTHEADER"
            LSheet.PageSetup.LeftHeader = param.Item("SARGUMENT2")
          Case "CENTERHEADER"
            LSheet.PageSetup.CenterHeader = param.Item("SARGUMENT2")
          Case "RIGHTHEADER"
            LSheet.PageSetup.RightHeader = param.Item("SARGUMENT2")
          Case "LEFTFOOTER"
            LSheet.PageSetup.LeftFooter = param.Item("SARGUMENT2")
          Case "CENTERFOOTER"
            LSheet.PageSetup.CenterFooter = param.Item("SARGUMENT2")
          Case "RIGHTFOOTER"
            LSheet.PageSetup.RightFooter = param.Item("SARGUMENT2")
        End Select
      Case "SHEET_COPY":
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|1 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|2 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|3 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| 0 - |fffd||fffd||fffd|, 1 - |fffd||fffd|
       If param.Item("SARGUMENT2") <> "" Then
         LSheet.Copy Before:=Sheets(param.Item("SARGUMENT2"))
       Else
         If param.Item("SARGUMENT3") = "1" Then
           Set LAfterSheet = Sheets(Sheets.Count)
         Else
           Set LAfterSheet = LSheet
         End If
         LSheet.Copy After:=LAfterSheet
       End If
       ActiveSheet.Name = param.Item("SARGUMENT1")
      Case "SHEET_DELETE":
        Application.DisplayAlerts = False
        LSheet.Delete
        Application.DisplayAlerts = True
      Case "LINE_APPEND":
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|1 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|2 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|3 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        LAddress = ParseAddress(Range(param.Item("SARGUMENT1")))
        LRow = LAddress(CBeginRow) + LAddress(CRowCount)
        LAddress = ParseAddress(Range(param.Item("SARGUMENT3")))
        LRowCount = LAddress(CRowCount)
        LSheet.Range(param.Item("SARGUMENT3")).Copy
        LStr = CStr(LRow) + ":" + CStr(LRow)
        LSheet.Rows(LStr).Insert
        LStr = CStr(LRow) + ":" + CStr(LRow + LRowCount - 1)
        LSheet.Rows(LStr).Name = param.Item("SARGUMENT2")
      Case "COLUMN_APPEND":
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|1 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|2 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|3 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        LAddress = ParseAddress(Range(param.Item("SARGUMENT1")))
        Dim LColumn As Integer
        LColumn = LAddress(CBeginColumn) + LAddress(CColumnCount)
        sColumnFrom = ColumnAddress(LColumn)
        LAddress = ParseAddress(Range(param.Item("SARGUMENT3")))
        LColumnCount = LAddress(CColumnCount)
        LSheet.Range(param.Item("SARGUMENT3")).Copy
        LStr = sColumnFrom + ":" + sColumnFrom
        LSheet.Columns(LStr).Insert
        SColumnTo = ColumnAddress(LColumn + LColumnCount - 1)
        LStr = sColumnFrom + ":" + SColumnTo
        LSheet.Columns(LStr).Name = param.Item("SARGUMENT2")
      Case "LINE_DELETE", "COLUMN_DELETE":
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|1 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        LSheet.Range(param.Item("SARGUMENT1")).Delete
      Case "CELL_NAME", "CELL_VALUE_WRITE", "CELL_VALUE_DELETE", _
        "CELL_FORMULA_WRITE", "CELL_FORMULA_DELETE", "CELL_ATTRIBUTE_SET":
        If (param.Item("SARGUMENT2") = "") Or (param.Item("SARGUMENT4") = "") Then
          LStr = ""
        Else
          LStrEx = GetCrossAddress(Range(param.Item("SARGUMENT3")), Range(param.Item("SARGUMENT5")))
          LStr = GetRelativeAddress(Range(param.Item("SARGUMENT1")), Range(LStrEx))
          LStrEx = GetCrossAddress(Range(param.Item("SARGUMENT2")), Range(param.Item("SARGUMENT4")))
        End If
        
        LSheet.Select
        If LStr = "" Then
          LSheet.Range(param.Item("SARGUMENT1")).Select
        Else
          LSheet.Range(LStrEx).Range(LStr).Select
        End If
        
        If InStr(UCase(param.Item("SCOMMAND")), "ATTRIBUTE_SET") > 0 Then
          Call SelectionSetAttributes(param.Item("SARGUMENT6"), param.Item("SARGUMENT7"))
        Else
          If InStr(UCase(param.Item("SCOMMAND")), "NAME") > 0 Then
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|6 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Application.Selection.Name = param.Item("SARGUMENT6")
          Else
            If InStr(UCase(param.Item("SCOMMAND")), "VALUE_WRITE") > 0 Then
              Select Case param.Item("NDATA_TYPE")
                Case 0: Call SetValueToSelection(CStr(param.Item("DATA")))
                Case 1: Call SetValueToSelection(CVar(param.Item("DATA")))
                Case 2: Call SetValueToSelection(CDate(param.Item("DATA")))
                Case 3: Call SetImageToSelection(CStr(param.Item("DATA")))
              End Select
            Else
              If InStr(UCase(param.Item("SCOMMAND")), "VALUE_DELETE") > 0 Then
                Application.Selection.ClearContents
              Else
                If InStr(UCase(param.Item("SCOMMAND")), "FORMULA_WRITE") > 0 Then
                  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|6 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  Application.Selection.FormulaLocal = param.Item("SARGUMENT6")
                Else
                  If InStr(UCase(param.Item("SCOMMAND")), "FORMULA_DELETE") > 0 Then
                    Application.Selection.FormulaLocal = ""
                  End If
                End If
              End If
            End If
          End If
        End If
      Case "CELL_VALUE_COPY", "CELL_FORMULA_COPY", "CELL_ATTRIBUTE_COPY", "CELL_MERGE":
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|1  - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|2  - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|3  - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|4  - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|5  - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|6  - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|7  - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|8  - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|9  - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|10 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If InStr(UCase(param.Item("SCOMMAND")), "VALUE") > 0 Then
          LPasteType = xlPasteValues
        Else
          LPasteType = xlPasteFormulas
        End If

        If (Not param.Exists("SARGUMENT2")) Or (Not param.Exists("SARGUMENT4")) Then
          Set LRFrom = LSheet.Range(param.Item("SARGUMENT1"))
        Else
          LStrEx = GetCrossAddress(Range(param.Item("SARGUMENT3")), Range(param.Item("SARGUMENT5")))
          LStr = GetRelativeAddress(Range(param.Item("SARGUMENT1")), Range(LStrEx))
          LStrEx = GetCrossAddress(Range(param.Item("SARGUMENT2")), Range(param.Item("SARGUMENT4")))
          Set LRFrom = LSheet.Range(LStrEx).Range(LStr)
        End If

        If (Not param.Exists("SARGUMENT7")) Or (Not param.Exists("SARGUMENT9")) Then
          Set LRTo = LSheet.Range(param.Item("SARGUMENT6"))
        Else
          LStrEx = GetCrossAddress(Range(param.Item("SARGUMENT8")), Range(param.Item("SARGUMENT10")))
          LStr = GetRelativeAddress(Range(param.Item("SARGUMENT6")), Range(LStrEx))
          LStrEx = GetCrossAddress(Range(param.Item("SARGUMENT7")), Range(param.Item("SARGUMENT9")))
          Set LRTo = LSheet.Range(LStrEx).Range(LStr)
        End If

        If InStr(UCase(param.Item("SCOMMAND")), "MERGE") > 0 Then
          Application.DisplayAlerts = False
          Range(LRFrom.Address, LRTo.Address).Merge (False)
          Application.DisplayAlerts = True
        Else
          If InStr(UCase(param.Item("SCOMMAND")), "ATTRIBUTE_COPY") > 0 Then
            Call CopyAttributes(LRFrom, LRTo, param.Item("SARGUMENT11"))
          Else
            LRFrom.Copy
            LRTo.PasteSpecial (LPasteType)
          End If
        End If
      Case "LINE_CELL_NAME", "LINE_CELL_VALUE_WRITE", "LINE_CELL_VALUE_DELETE", _
        "LINE_CELL_FORMULA_WRITE", "LINE_CELL_FORMULA_DELETE", "COLUMN_CELL_NAME", _
        "COLUMN_CELL_VALUE_WRITE", "COLUMN_CELL_VALUE_DELETE", "COLUMN_CELL_FORMULA_WRITE", _
        "COLUMN_CELL_FORMULA_DELETE", "LINE_CELL_ATTRIBUTE_SET", "COLUMN_CELL_ATTRIBUTE_SET":
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|1 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|2 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|3 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        LStr = GetRelativeAddress(Range(param.Item("SARGUMENT2")), Range(param.Item("SARGUMENT3")))
        LSheet.Select
        LSheet.Range(param.Item("SARGUMENT1")).Range(LStr).Select
        
        If InStr(UCase(param.Item("SCOMMAND")), "ATTRIBUTE_SET") > 0 Then
          Call SelectionSetAttributes(param.Item("SARGUMENT4"), param.Item("SARGUMENT5"))
        Else
          If InStr(UCase(param.Item("SCOMMAND")), "NAME") > 0 Then
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|4 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Application.Selection.Name = param.Item("SARGUMENT4")
          Else
            If InStr(UCase(param.Item("SCOMMAND")), "VALUE_WRITE") > 0 Then
              Select Case param.Item("NDATA_TYPE")
                Case 0: Call SetValueToSelection(CStr(param.Item("DATA")))
                Case 1: Call SetValueToSelection(CVar(param.Item("DATA")))
                Case 2: Call SetValueToSelection(CDate(param.Item("DATA")))
                Case 3: Call SetImageToSelection(CStr(param.Item("DATA")))
              End Select
            Else
              If InStr(UCase(param.Item("SCOMMAND")), "VALUE_DELETE") > 0 Then
                Application.Selection.ClearContents
              Else
                If InStr(UCase(param.Item("SCOMMAND")), "FORMULA_WRITE") > 0 Then
                  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|4 -|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                  Application.Selection.FormulaLocal = param.Item("SARGUMENT4")
                Else
                  If InStr(UCase(param.Item("SCOMMAND")), "FORMULA_DELETE") > 0 Then
                    Application.Selection.FormulaLocal = ""
                  End If
                End If
              End If
            End If
          End If
        End If
      Case "LINE_CELL_VALUE_COPY", "LINE_CELL_FORMULA_COPY", "COLUMN_CELL_VALUE_COPY", _
        "COLUMN_CELL_FORMULA_COPY", "LINE_CELL_ATTRIBUTE_COPY", "COLUMN_CELL_ATTRIBUTE_COPY", _
        "LINE_CELL_MERGE", "COLUMN_CELL_MERGE":
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|1 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|2 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|3 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|4 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|5 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|6 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If InStr(UCase(param.Item("SCOMMAND")), "VALUE") > 0 Then
          LPasteType = xlPasteValues
        Else
          LPasteType = xlPasteFormulas
        End If
      
        If (Not param.Exists("SARGUMENT2")) Or (Not param.Exists("SARGUMENT4")) Then
          Set LRFrom = LSheet.Range(param.Item("SARGUMENT1"))
        Else
          Set LRFrom = LSheet.Range(param.Item("SARGUMENT2")).Range( _
            GetRelativeAddress(Range(param.Item("SARGUMENT1")), Range(param.Item("SARGUMENT3"))))
        End If

        If (Not param.Exists("SARGUMENT5")) Then
          Set LRTo = LSheet.Range(param.Item("SARGUMENT4"))
        Else
          Set LRTo = LSheet.Range(param.Item("SARGUMENT5")).Range( _
            GetRelativeAddress(Range(param.Item("SARGUMENT4")), _
              Range(param.Item("SARGUMENT6"))))
        End If

        If InStr(UCase(param.Item("SCOMMAND")), "ATTRIBUTE_COPY") > 0 Then
          Call CopyAttributes(LRFrom, LRTo, param.Item("SARGUMENT7"))
        Else
          If InStr(UCase(param.Item("SCOMMAND")), "MERGE") > 0 Then
            Application.DisplayAlerts = False
            Range(LRFrom.Address, LRTo.Address).Merge (False)
            Application.DisplayAlerts = True
          Else
            LRFrom.Copy
            LRTo.PasteSpecial (LPasteType)
          End If
        End If
      Case "CELL_SELECT"
        LSheet.Select
        LSheet.Range(param.Item("SARGUMENT1")).Select
      Case "LINE_PAGE_BREAK"
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|1 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        LSheet.Select
        LSheet.Range(param.Item("SARGUMENT1")).Select
        ActiveCell.AddComment ("$ParusPageBreak")
      Case Else
        Err.Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + param.Item("SCOMMAND")
        Err.Raise (vbObjectError)
    End Select
  Next I

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| PageBreak
  Dim LCell As Range
  For I = 1 To Sheets.Count
    Set LCell = Sheets(I).UsedRange.Find("$ParusPageBreak", LookIn:=xlComments, LookAt:=xlPart)
    If Not LCell Is Nothing Then
      Do
        If LCell.Row > 1 Then
          Sheets(I).HPageBreaks.Add Before:=LCell
        End If
        LCell.Comment.Delete
        Set LCell = Sheets(I).UsedRange.FindNext
      Loop While Not LCell Is Nothing
    End If
  Next

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If Sheets.Count > 0 Then
    Set LCell = Sheets(1).Cells.Find(What:="", LookIn:=xlFormulas)
  End If

  Application.Calculation = LCalculation
  Application.ScreenUpdating = True
End Sub



Sub TransferParams_SRV(ParamFile As String)
  On Error GoTo Err_Transfer

  ThisWorkBook.BuiltinDocumentProperties.Item(5) = ""
  TransferParams (ParamFile)
  Exit Sub

Err_Transfer:
  Application.CutCopyMode = False
  ThisWorkBook.BuiltinDocumentProperties.Item(5) = "|fffd||fffd||fffd||fffd||fffd||fffd| #" & Str(Err.Number) & " |fffd| " & Err.Source & ". " & Err.Description
End Sub

Function GetFolderPath(Optional ByVal Title As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", _
                       Optional ByVal InitialPath As String = "c:\") As String
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Title,
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| InitialPath
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim PS As String: PS = Application.PathSeparator
  With Application.FileDialog(msoFileDialogFolderPicker)
    If Not Right$(InitialPath, 1) = PS Then InitialPath = InitialPath & PS
    .ButtonName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|":
    .Title = Title:
    .InitialFileName = InitialPath
    If .Show <> -1 Then Exit Function
    GetFolderPath = .SelectedItems(1)
    If Not Right$(GetFolderPath, 1) = PS Then GetFolderPath = GetFolderPath & PS
  End With
End Function
Attribute VB_Name = "ParusReportTools"
Option Explicit
Private g_currentPage, g_tblDelim, g_areaEmpCell, g_tblEmpCell, g_tblMissEmptyStr
Private oExcel, SC, script_functions
Private Sub AddScriptFunction(AHeader, ABody)
  script_functions = script_functions & "function " & AHeader & Chr(13) & Chr(10) & ABody & _
    "end function" & Chr(13) & Chr(10)
End Sub
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
Public Sub textOut(ByVal cFName As String, ByRef oSheet As Worksheet, ByVal nCol As Integer)
  Dim cEL, oParser, oNode, FileSystem, File
  g_currentPage = ""
  g_tblDelim = "|"
  g_areaEmpCell = "-"
  g_tblEmpCell = "0"
  g_tblMissEmptyStr = "1"
  Set oExcel = oSheet.Application
  Dim cScript, cFStr
  Dim I, ss1, nn1, nCChar, nLen1, cCCar, nBeg
  cEL = Chr(13) + Chr(10)
  oNode = Null
  cScript = ""
  cFStr = ""
  Set oParser = CreateObject("msxml2.DomDocument.4.0")
  Set SC = CreateObject("MSScriptControl.ScriptControl")
  SC.Language = "VBScript"
  Call AddScriptFunction("allt(p)", "allt=trim(p)")
  Call AddScriptFunction("padr(p1,p2,p3)", "padr=p1&string(p2-len(p1),p3)")
  Call AddScriptFunction("strtran(p1,p2,p3)", "strtran=replace(p1,p2,p3)")
  Call AddScriptFunction("substr(p1,p2,p3)", "substr=mid(p1,p2,p3)")
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
  I = 1
  nn1 = 0
  Do While nn1 < 5
    ss1 = oSheet.Cells(I, nCol).Text
    cScript = cScript + ss1 + cEL
    nn1 = IIf(Trim(ss1) = "", nn1 + 1, 0)
    I = I + 1
  Loop
  cScript = Left(cScript, Len(cScript) - 12)
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| >> cFStr.
  nCChar = 1
  nBeg = 1
  nLen1 = Len(cScript)
  Do While nCChar <= nLen1
    cCCar = Mid(cScript, nCChar, 1)
    Select Case cCCar
      Case "<"
        cFStr = cFStr + Mid(cScript, nBeg, nCChar - nBeg)
        nBeg = nCChar + 1
        Set oNode = Nothing
        nn1 = getXMLEl(oParser, cScript, nCChar, oNode)
        If nn1 > nCChar And nn1 <= nLen1 Then
          If Not oNode Is Nothing Then
            nCChar = nn1
            ss1 = calcXML(oNode)
            Set oNode = Nothing
            If ss1 = "\" Then
              If Mid(cScript, nCChar + 1, 2) = cEL Then
                nCChar = nCChar + 2
              End If
            Else
              cFStr = cFStr + ss1
            End If
            nBeg = nCChar + 1
          Else
            nCChar = nn1 + 1
            If Mid(cScript, nCChar, 2) = cEL Then
              nCChar = nCChar + 1
            End If
            nBeg = nCChar + 1
          End If
        Else
          cFStr = cFStr + cCCar
        End If
      Case "'", """"
        cFStr = cFStr + Mid(cScript, nBeg, nCChar - nBeg)
        nBeg = nCChar + 1

        nn1 = getQuotedStr(cScript, nCChar)
        If nn1 > nCChar Then
          nCChar = nn1
          cFStr = cFStr + Mid(cScript, nBeg, nCChar - nBeg + 1)
          nBeg = nCChar + 1
        Else
          cFStr = cFStr + cCCar
        End If
      Case "\"
        cFStr = cFStr + Mid(cScript, nBeg, nCChar - nBeg)
        cFStr = cFStr + Mid(cScript, nCChar + 1, 1)
        nCChar = nCChar + 1
        nBeg = nCChar + 1
    End Select
    nCChar = nCChar + 1
  Loop
  cFStr = cFStr + Mid(cScript, nBeg, nCChar - nBeg)
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|.
  Set FileSystem = CreateObject("Scripting.FileSystemObject")
  Set File = FileSystem.OpenTextFile(cFName, 2, True)
  File.Write (cFStr)
  File.Close
End Sub
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
Public Function getXMLEl(ByRef xmlDoc, AStr, ByVal nPos, xmlNode)
  Dim nStrLen, cMarkupSymb, nElems, cElStat
  Dim I, nn1, ss1, cErrScript, cErrScript2
  getXMLEl = nPos
  If Mid(AStr, nPos, 1) <> "<" Then
    Exit Function
  End If
  If Mid(AStr, nPos + 1, 3) = "!--" Then
    nn1 = InStr(AStr, "-->")
    getXMLEl = IIf(nn1 > 0, nn1 + 2, nPos)
    Exit Function
  End If
  ss1 = Mid(AStr, nPos, 30)
  cErrScript = ss1 + IIf(Len(ss1) > 30, "", " ...")
  cErrScript2 = ""
  nStrLen = Len(AStr)
  I = nPos + 1
  nElems = 1
  cElStat = "OB"  ' Open Begin
                  ' 'OE' Open  End
                  ' 'CB' Close Begin
                  ' 'EE' Element closEd
  Do While nElems > 0 And I <= nStrLen
    nn1 = 0
    cMarkupSymb = getMarkupSymb(AStr, I, nn1)
    ss1 = Mid(AStr, I, 30)
    cErrScript2 = ss1 + IIf(Len(ss1) > 30, "", " ...")
    If cMarkupSymb = "<!" Or cMarkupSymb = "<?" Then
      I = IIf((nn1 > 0 And nn1 <> I), nn1, I) + 1
      nn1 = 0
      cMarkupSymb = getMarkupSymb(AStr, I, nn1)
      ss1 = Mid(AStr, I, 30)
      cErrScript2 = ss1 + IIf(Len(ss1) > 30, "", " ...")
      If cMarkupSymb <> ">" Then
        Err.Raise Number:=vbObjectError + 513, Source:="getXMLEl", _
          Description:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| CDATA |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!" & Chr(13) & _
          "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| """ & cErrScript & """, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| """ & cErrScript2 & """"
      Else
        I = IIf((nn1 > 0 And nn1 <> I), nn1, I) + 1
      End If
    Else
      Select Case cElStat
        Case "OB"
          If nn1 = I Or Left(cMarkupSymb, 1) = "<" Then
            Err.Raise Number:=vbObjectError + 513, Source:="getXMLEl", _
              Description:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!" & Chr(13) & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| """ & cErrScript & """, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| """ & cErrScript2 & """"
          ElseIf cMarkupSymb = "/>" Then
            cElStat = "EE"
            nElems = nElems - 1
          ElseIf cMarkupSymb = ">" Then
            cElStat = "OE"
          End If
        Case "OE"
          If nn1 = I Or Right(cMarkupSymb, 1) = ">" Then
            Err.Raise Number:=vbObjectError + 513, Source:="getXMLEl", _
              Description:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!" & Chr(13) & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| """ & cErrScript & """, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| """ & cErrScript2 & """"
          ElseIf cMarkupSymb = "<" Then
            cElStat = "OB"
            nElems = nElems + 1
          ElseIf cMarkupSymb = "</" Then
            cElStat = "CB"
          End If
        Case "CB"
          If cMarkupSymb = ">" Then
            cElStat = "EE"
            nElems = nElems - 1
          Else
            Err.Raise Number:=vbObjectError + 513, Source:="getXMLEl", _
              Description:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!" & Chr(13) & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| """ & cErrScript & """, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| """ & cErrScript2 & """"
          End If
        Case "EE"
          If nElems > 0 Then
            If cMarkupSymb = "<" Then
              cElStat = "OB"
              nElems = nElems + 1
            ElseIf cMarkupSymb = "</" Then
              cElStat = "CB"
            Else
              Err.Raise Number:=vbObjectError + 513, Source:="getXMLEl", _
                Description:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!" & Chr(13) & _
                "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| """ & cErrScript & """, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| """ & cErrScript2 & """"
            End If
          End If
      End Select
      I = IIf((nn1 > 0 And nn1 <> I), nn1, I) + 1
    End If
  Loop
  getXMLEl = I - 1
  If nElems > 0 Then
    Err.Raise Number:=vbObjectError + 513, Source:="getXMLEl", _
      Description:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, (|fffd||fffd||fffd|)|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: """ & cErrScript & """"
  End If
  
  ss1 = Mid(AStr, nPos, getXMLEl - nPos + 1)
  xmlDoc.loadXML ("<?xml version=""1.0"" encoding=""windows-1251""?>" & ss1)
  If xmlDoc.parseError.errorCode <> 0 Then
    Err.Raise Number:=vbObjectError + 513, Source:="getXMLEl", _
      Description:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & _
      xmlDoc.parseError.reason & " - " & xmlDoc.parseError.srcText
  Else
    Set xmlNode = xmlDoc.LastChild
  End If
End Function
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
Private Function getMarkupSymb(ByVal AStr, ByVal nPos, ByRef nMSPos)
  Dim nn1, nStrLen, cCCar2
  getMarkupSymb = ""
  nStrLen = Len(AStr)
  Do While getMarkupSymb = "" And nPos <= nStrLen
    cCCar2 = Mid(AStr, nPos + 1, 1)
    Select Case Mid(AStr, nPos, 1)
      Case "<"
        If InStr("/!?", cCCar2) > 0 Then
          getMarkupSymb = "<" + cCCar2
          nPos = nPos + 1
        Else
          getMarkupSymb = "<"
        End If
      Case "/"
        If cCCar2 = ">" Then
          getMarkupSymb = "/>"
          nPos = nPos + 1
        End If
      Case ">"
        getMarkupSymb = ">"
      Case "'", """"
        nPos = getQuotedStr(AStr, nPos)
    End Select
    nPos = nPos + 1
  Loop
  nMSPos = nPos - 1
End Function
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
Private Function getQuotedStr(AStr, nPos)
  Dim cQuote, nn1
  cQuote = Mid(AStr, nPos, 1)
  nn1 = InStr(nPos + 1, AStr, cQuote)
  getQuotedStr = IIf(nn1 > 0, nn1, nPos)
End Function
Public Function GetValue(ANode, AName, Optional ByVal ADefault As String = "")
  Dim LNode
  Set LNode = ANode.selectSingleNode(AName)
  If Not LNode Is Nothing Then
    GetValue = LNode.nodeValue
  Else
    GetValue = ADefault
  End If
End Function
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
Private Function calcXML(xmlNode)
  Dim cElName, oNode1, cPage, ss1
  calcXML = xmlNode.XML
  cElName = xmlNode.nodeName
  Select Case cElName
    Case "c"
      Set oNode1 = xmlNode.selectSingleNode("@name")
      If Not oNode1 Is Nothing Then
        ss1 = oNode1.nodeValue
        If ss1 <> "" Then
          calcXML = oExcel.Worksheets(GetValue(xmlNode, "@page", g_currentPage)).Range(ss1).Text
        End If
      End If
    Case "cnc"
      calcXML = "\"
    Case "set"
      calcXML = "\"
      g_currentPage = GetValue(xmlNode, "@page", g_currentPage)
      g_tblDelim = GetValue(xmlNode, "@tblDelim", g_tblDelim)
      g_areaEmpCell = GetValue(xmlNode, "@areaEmptyCell", g_areaEmpCell)
      g_tblEmpCell = GetValue(xmlNode, "@tblEmptyCell", g_tblEmpCell)
      g_tblMissEmptyStr = GetValue(xmlNode, "@tblMissEmptyStr", g_tblMissEmptyStr)
    Case "tbl"
      calcXML = calcTbl(xmlNode)
      If calcXML = "" Then
        calcXML = "\"
      End If
  End Select
End Function
Public Function ascan(AData, AVal)
  Dim I
  ascan = Null
  For I = LBound(AData) To UBound(AData)
    If AData(I) = AVal Then
      ascan = I
      Exit Function
    End If
  Next
End Function
Private Function eval(ByVal ACode As String, ByRef ACell As Range) As Variant
  Dim R
  SC.Reset
  R = SC.AddObject("oCell", ACell)
  SC.AddCode (script_functions)
  eval = SC.eval(Replace(ACode, "'", """"))
End Function
Private Sub CopyArrays(ByRef AFrom, ByRef ATo)
  Dim I, J
  For I = LBound(AFrom, 1) To UBound(AFrom, 1)
    For J = LBound(AFrom, 2) To UBound(AFrom, 2)
      ATo(I, J) = AFrom(I, J)
    Next
  Next
End Sub
Public Function FindTableRect(ByRef AWorksheet, ByVal ATableName, ByRef ALeftTop, ByRef ARightBottom)
  Dim x1, y1, x2, y2, J, Tmp
  ALeftTop = "": ARightBottom = ""
  x1 = Empty: y1 = Empty: x2 = Empty: y2 = Empty
  For J = 1 To AWorksheet.Parent.Names.Count
    With AWorksheet.Parent.Names.Item(J)
      If InStr(.Name, ATableName) = 1 Then
        Set Tmp = Nothing
        On Error Resume Next
        Set Tmp = .RefersToRange
        On Error GoTo 0
        If Not (Tmp Is Nothing) Then
          With Tmp.Cells(1)
            If .Row < y1 Or IsEmpty(y1) Then
              y1 = .Row
            End If
            If .Column < x1 Or IsEmpty(x2) Then
              x1 = .Column
            End If
          End With
          With Tmp.Cells(Tmp.Count)
            If .Row > y2 Or IsEmpty(y2) Then
              y2 = .Row
            End If
            If .Column > x2 Or IsEmpty(x2) Then
              x2 = .Column
            End If
          End With
        End If
      End If
    End With
  Next
  If (Not IsEmpty(x1)) And (Not IsEmpty(y1)) And _
     (Not IsEmpty(x2)) And (Not IsEmpty(y2)) _
  Then
    ALeftTop = AWorksheet.Cells(y1, x1).Address
    ARightBottom = AWorksheet.Cells(y2, x2).Address
    FindTableRect = True
  Else
    FindTableRect = False
  End If
End Function
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.
Private Function calcTbl(oXMLNode)
  Dim I, J, Tmp, aTmp() As String, sTmp, cTblDelim, cTblEmpCell, cTblMissEmptyStr
  Dim k, h, l, ss1, nn1, nn2, nIxCol
  Dim oNode1, oAreas, oArea, oAreaCols, oCell
  Dim nTRows, nTCols, nAtTblRow, nAtTblCol, nDimRow, nDimCol
  Dim nCurrRow, nCurrCol
  Dim cNameLT, cNameRB
  Dim nSheetLTRow, nSheetLTCol, nSheetRBRow, nSheetRBCol
  Dim aMissed(1)
  Dim nColToIns
  Dim aTbl() As Variant, aTbl2() As Variant, aCols(), aColsExpr(), aERows(), aECols(), aMissEmptyStr()
  
  cTblDelim = GetValue(oXMLNode, "@delim", g_tblDelim)
  cTblEmpCell = GetValue(oXMLNode, "@emptyCell", g_tblEmpCell)
  cTblMissEmptyStr = GetValue(oXMLNode, "@missEmptyStr", g_tblMissEmptyStr)
  nTRows = Val(GetValue(oXMLNode, "@nRows", "0"))
  nTCols = Val(GetValue(oXMLNode, "@nCols", "0"))
  
  If nTRows > 0 And nTCols > 0 Then
    ReDim aTbl(1 To nTRows, 1 To nTCols)
    nDimRow = nTRows
    nDimCol = nTCols
  Else
    ReDim aTbl(1 To 1, 1 To 1)
    nDimRow = 1
    nDimCol = 1
  End If

  Set oAreas = oXMLNode.selectNodes("area")
  nCurrRow = 1
  For I = 0 To (oAreas.Length - 1)
    Set oArea = oAreas.Item(I)
    nAtTblRow = nCurrRow
    nAtTblCol = 1
    aMissed(0) = 0
    aMissed(1) = 0
    nColToIns = 0
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
    Set oAreaCols = oArea.selectNodes("column")
    If oAreaCols.Length > 0 Then
      ReDim aCols(oAreaCols.Length), aColsExpr(oAreaCols.Length, 2)
      For J = 1 To oAreaCols.Length
        Set Tmp = oAreaCols.Item(J - 1)
        nn1 = Int(Val(GetValue(Tmp, "@index", "0")))
        nn2 = Int(Val(GetValue(Tmp, "@insBefore", "0")))
        ss1 = GetValue(Tmp, "@expr", "")
        If Not ((nn1 = 0 And nn2 = 0) Or ss1 = "") Then
          aCols(J) = IIf(nn1 <> 0, nn1, nn2)
          aColsExpr(J, 1) = ss1
          aColsExpr(J, 2) = nn1 <> 0
          nColToIns = nColToIns + IIf(nn1 = 0, 1, 0)
        End If
      Next
    Else
      ReDim aCols(1), aColsExpr(1, 2)
    End If
      
    Set oNode1 = oArea.selectSingleNode("@tblRow")
    If Not oNode1 Is Nothing Then
      nAtTblRow = IIf(oNode1.nodeValue = "last", nAtTblRow, Int(Val(oNode1.nodeValue)))
    End If
    Set oNode1 = oArea.selectSingleNode("@tblCol")
    If Not oNode1 Is Nothing Then
      nAtTblCol = IIf(oNode1.nodeValue = "last", nAtTblCol, Int(Val(oNode1.nodeValue)))
    End If
    
    nn1 = GetValue(oArea, "@t")
    If nn1 = "" Then
      cNameLT = oArea.selectSingleNode("@nameLT").nodeValue
      cNameRB = oArea.selectSingleNode("@nameRB").nodeValue
    Else
      nn1 = "T_" & nn1 & "_"
      If Not FindTableRect(oExcel.Worksheets(g_currentPage), nn1, cNameLT, cNameRB) Then
        cNameLT = ""
        cNameRB = ""
      End If
    End If
    If cNameLT <> "" And cNameRB <> "" Then
      nSheetLTRow = oExcel.Worksheets(g_currentPage).Range(cNameLT).Row + _
        Int(Val(GetValue(oArea, "@offsLTRow", "0")))
      nSheetLTCol = oExcel.Worksheets(g_currentPage).Range(cNameLT).Column + _
        Int(Val(GetValue(oArea, "@offsLTCol", "0")))
      nSheetRBRow = oExcel.Worksheets(g_currentPage).Range(cNameRB).Row + _
        Int(Val(GetValue(oArea, "@offsRBRow", "0")))
      nSheetRBCol = oExcel.Worksheets(g_currentPage).Range(cNameRB).Column + _
        Int(Val(GetValue(oArea, "@offsRBCol", "0")))

      nSheetRBRow = IIf(nSheetLTRow > nSheetRBRow, nSheetLTRow, nSheetRBRow)
      nSheetRBCol = IIf(nSheetLTCol > nSheetRBCol, nSheetLTCol, nSheetRBCol)

      Tmp = GetValue(oArea, "@exclRows")
      If Tmp <> "" Then
        aTmp = Split(Tmp, ",")
        ReDim aERows(UBound(aTmp) + 1)
        For J = LBound(aTmp) To UBound(aTmp)
          If IsNumeric(aTmp(J)) Then
            aERows(J + 1) = Int(Val(aTmp(J)))
          Else
            aERows(J + 1) = oExcel.Worksheets(g_currentPage).Range(aTmp(J)).Row
          End If
        Next
      Else
        ReDim aERows(1)
      End If
      Tmp = GetValue(oArea, "@exclCols")
      If Tmp <> "" Then
        aTmp = Split(Tmp, ",")
        ReDim aECols(UBound(aTmp) + 1)
        For J = LBound(aTmp) To UBound(aTmp)
          If IsNumeric(aTmp(J)) Then
            aECols(J + 1) = Int(Val(aTmp(J)))
          Else
            aECols(J + 1) = oExcel.Worksheets(g_currentPage).Range(aTmp(J)).Column
          End If
        Next
      Else
        ReDim aECols(1)
      End If

      nCurrRow = nAtTblRow
      nCurrCol = nAtTblCol
      nDimRow = nCurrRow + nSheetRBRow - nSheetLTRow
      nDimCol = nCurrCol + nSheetRBCol - nSheetLTCol + nColToIns
      
      ReDim aTbl2(LBound(aTbl, 1) To UBound(aTbl, 1), LBound(aTbl, 2) To UBound(aTbl, 2))
      Call CopyArrays(aTbl, aTbl2)
      If UBound(aTbl, 1) < nDimRow Then
        ReDim aTbl(1 To nDimRow, 1 To UBound(aTbl, 2))
      End If
      If UBound(aTbl, 2) < nDimCol Then
        ReDim aTbl(1 To UBound(aTbl, 1), 1 To nDimCol)
      End If
      Call CopyArrays(aTbl2, aTbl)
      
      
      For k = nSheetLTRow To nSheetRBRow
        If Not IsNull(ascan(aERows, k)) Then
          aMissed(0) = aMissed(0) + 1
        Else
          For h = nSheetLTCol To nSheetRBCol
            nIxCol = h - nSheetLTCol + 1
            If Not IsNull(ascan(aECols, nIxCol)) Then
              If k = nSheetLTRow Then
                aMissed(1) = aMissed(1) + 1
              End If
            Else
              If Not (oAreaCols.Length > 0) Then ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
                Set oCell = oExcel.Worksheets(g_currentPage).Cells(k, h)
                aTbl(nCurrRow, nCurrCol) = oCell.Value
                nCurrCol = nCurrCol + 1
              Else
                nn1 = ascan(aCols, nIxCol)
                If Not IsNull(nn1) Then
                  If aColsExpr(nn1, 1) <> "" Then
                    If Not aColsExpr(nn1, 2) Then
                      aTbl(nCurrRow, nCurrCol) = eval(aColsExpr(nn1, 1), _
                        oExcel.Worksheets(g_currentPage).Cells(k, h))
                      nCurrCol = nCurrCol + 1
                    Else
                      For l = nn1 To UBound(aCols)
                        If aCols(l) <> nIxCol Then
                          Exit For
                        End If
                        aTbl(nCurrRow, nCurrCol) = eval(aColsExpr(l, 1), _
                          oExcel.Worksheets(g_currentPage).Cells(k, h))
                        nCurrCol = nCurrCol + 1
                      Next
                    End If
                  End If
                Else
                  Set oCell = oExcel.Worksheets(g_currentPage).Cells(k, h)
                  aTbl(nCurrRow, nCurrCol) = oCell.Value
                  nCurrCol = nCurrCol + 1
                End If
              End If
            End If
          Next
          nCurrRow = nCurrRow + 1
          nCurrCol = 1
        End If
      Next
    End If
  Next
  calcTbl = ""
  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
  If cTblMissEmptyStr <> "" Then
    aTmp = Split(cTblMissEmptyStr, ",")
    ReDim aMissEmptyStr(UBound(aTmp))
    For J = LBound(aTmp) To UBound(aTmp)
      aMissEmptyStr(J) = Int(Val(aTmp(J)))
    Next
  Else
    ReDim aMissEmptyStr(0)
    aMissEmptyStr(0) = Null
  End If
  For k = 1 To UBound(aTbl, 1) - aMissed(0)
    nn1 = 0
    sTmp = ""
    For h = 1 To UBound(aTbl, 2) - aMissed(1)
      l = VarType(aTbl(k, h))
      Tmp = IIf(cTblMissEmptyStr <> "", IsNull(ascan(aMissEmptyStr, h)), False)
      If l = vbEmpty Then
        ss1 = cTblEmpCell
      ElseIf l = vbInteger Or l = vbDouble Or l = vbSingle Or l = vbLong Then
        If aTbl(k, h) = 0 Then
          ss1 = cTblEmpCell
        Else
          ss1 = Replace(Trim(FormatNumber(aTbl(k, h), 2, vbTrue, vbUseDefault, vbFalse)), ",", ".")
          nn1 = nn1 + IIf(Tmp, 1, 0)
        End If
      Else
        If aTbl(k, h) = "" Or Trim(aTbl(k, h)) = g_areaEmpCell Then
          ss1 = cTblEmpCell
        Else
          ss1 = aTbl(k, h)
          nn1 = nn1 + IIf(Tmp, 1, 0)
        End If
      End If
      sTmp = sTmp & ss1 & cTblDelim
    Next
    If cTblMissEmptyStr = "" Or nn1 > 0 Then
      calcTbl = calcTbl + sTmp + Chr(13) + Chr(10)
    End If
  Next
  On Error Resume Next
  calcTbl = Left(calcTbl, Len(calcTbl) - 2)
  On Error GoTo 0
End Function
Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' )^J)

INQUEST-PP=macro
