Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()

End Sub

Private Sub Worksheet_Deactivate()

End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim JustOpened As Boolean

Private Sub Workbook_Activate()
If JustOpened = True Then
    JustOpened = False
    Worksheets("Start").Unprotect (SheetPassword)
    Worksheets("Start").Range("H6:R22").Interior.Color = Worksheets("Start").Range("A1").Interior.Color
    Worksheets("Start").Protect (SheetPassword)
    frmHiltiStart.Show 1
    
End If
End Sub

Private Sub Workbook_Open()


If Worksheets("settings").Range("a1") = "1" Then
    Application.ScreenUpdating = False
    Call FirstTemplate
    Application.ScreenUpdating = True
ElseIf Worksheets("settings").Range("a1") = "2" Then
    Application.ScreenUpdating = True
    Call SecondTemplate
    Application.ScreenUpdating = False
Else
    JustOpened = True
End If

End Sub
Attribute VB_Name = "frmHiltiStart"
Attribute VB_Base = "0{6AEC0BAA-6E98-4A00-9DFA-91FE06509256}{3C998D7B-4A72-4B5D-8914-77E9466BD126}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim lbClose As Boolean


Private Sub cmdPI_Click()

On Error GoTo ErrorHandler

lbClose = True
Application.ScreenUpdating = False
'Calling first time; send parameter 1 as it has to write the template number
Call FirstTemplate(1)
ActiveWorkbook.Sheets("Settings").Activate
Application.ScreenUpdating = True
Unload Me

Exit Sub
ErrorHandler:
lbClose = True
End Sub

Private Sub cmdTotalBOM_Click()

On Error GoTo ErrorHandler

lbClose = True

Application.ScreenUpdating = False

Call SecondTemplate(1)

Call TotalBOM2PISheets
ActiveWorkbook.Sheets("Settings").Activate

Application.ScreenUpdating = True

Unload Me
Exit Sub
ErrorHandler:
lbClose = True
End Sub
Private Sub TotalBOM2PISheets()

On Error GoTo ErrorHandler

Dim losheet As Object

'Worksheet Integrity Check, if not proper exit
If CheckStructure = False Then
     GoTo ErrorHandler
End If

'--- Check if the Total BOM Sheet Exists, if not create it from TB Template
If WorkSheetExists("Total BOM") = False Then

    If WorkSheetExists("TB") = True Then

        'Set the worksheet to TB
        Set losheet = ActiveWorkbook.Sheets("TB")
        
        losheet.Visible = xlSheetVisible
        
        'Copy the sheet after the active sheet
        losheet.Copy After:=ActiveWorkbook.Sheets("Settings")
        
        'set the copied sheet as the active sheet
        ActiveSheet.Name = "Total BOM"
        
        ActiveSheet.Unprotect (SheetPassword)
        
        ActiveSheet.Range("A5").Select
        
        losheet.Visible = xlSheetHidden
        
    Else
        'Show message and go to failure point
        MsgBox "The Total BOM { TB } Template is Missing" & vbCrLf & vbCrLf & "Total BOM Sheet cannot be created"
        GoTo ErrorHandler
    End If

End If


Exit Sub

ErrorHandler:


End Sub

Private Sub imgBack_Click()

End Sub

Private Sub UserForm_Activate()

'Load the form with the proper message

Dim ls As String



imgBack.Width = Me.Width
imgBack.Height = Me.Height
imgBack.Top = 0
imgBack.Left = 0

ls = "Welcome to The Hilti QA Sheet Program!"

ls = ls & vbCrLf & vbCrLf & "Quality Assurance Sheet supports two types of templates:"

ls = ls & vbCrLf & vbCrLf & "Template 1: Starts with Individual Production and Inspection Sheet"

ls = ls & vbCrLf & vbCrLf & "Template 2: Starts with Total BOM Sheet"

ls = ls & vbCrLf & vbCrLf & "Please select the appropriate Template.  You may not be able to change this template later."

lblHelp.Caption = ls

End Sub

Private Sub UserForm_Initialize()

'Load the screen on the center of the application
Call CenterScreen(Me)

End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

If lbClose = False Then
    MsgBox "The Program is going to load the default Template" & vbCrLf & vbCrLf & "Template 2: Start with Total BOM Sheet"
    Application.ScreenUpdating = False
    Call SecondTemplate(1)
    Call TotalBOM2PISheets
    ActiveWorkbook.Sheets("Settings").Activate
    Application.ScreenUpdating = True
End If

ErrorHandler:
Err.Clear
End Sub
Attribute VB_Name = "frmPrint"
Attribute VB_Base = "0{F2818DB1-56D7-4188-BD34-CC7D8BEA6B9D}{8ADDFE21-62E2-4991-B3D8-EDF91E1858E5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub chkWorkPreparation_Click()

End Sub

Private Sub cmdCancel_Click()
Unload Me
End Sub

Private Sub cmdPrint_Click()



Dim lbDeselect As Boolean
Dim liCounter As Integer
Dim myArray() As Variant
Dim lsSheetName As String
Dim lbPrint As Boolean
On Error GoTo ErrorHandler

lbDeselect = True

Unload Me

If chkTotalBOM.Value = True Then
    If WorkSheetExists("Total BOM") = True Then
        lbPrint = True
        If lbDeselect = True Then
            Sheets("Total BOM").Select True
            lbDeselect = False
        Else
            Sheets("Total BOM").Select False
        End If
    End If
End If
If chkCuttingTracking.Value = True Then
    If WorkSheetExists("Cutting Tracking") = True Then
        lbPrint = True
        If lbDeselect = True Then
            Sheets("Cutting Tracking").Select True
            lbDeselect = False
        Else
            Sheets("Cutting Tracking").Select False
        End If
    End If
End If

If chkDeliveryRelease.Value = True Then
    If WorkSheetExists("Delivery Release") = True Then
        lbPrint = True
        If lbDeselect = True Then
            Sheets("Delivery Release").Select True
            lbDeselect = False
        Else
            Sheets("Delivery Release").Select False
        End If
    End If
End If
If chkPI.Value = True Then

    'Read the PI_Table for the PI Sheets
    liCounter = GetTableInfoFromSettings(myArray)
    
    If liCounter = 1 Then
       
       
        For liCounter = 1 To UBound(myArray, 2)
        
            'Check if the P & I Item Number is not blank
            If Len(Trim(myArray(2, liCounter))) > 0 Then
                
                'Set the sheet name (Sample Format = "PI-3456789")
                lsSheetName = "PI-" & myArray(2, liCounter)
                
                'If sheet exists, skip that sheet
                If WorkSheetExists(lsSheetName) = True Then
                    lbPrint = True
                    If lbDeselect = True Then
                        Sheets(lsSheetName).Select True
                        lbDeselect = False
                    Else
                        Sheets(lsSheetName).Select False
                    End If

                End If
                
            End If
        
        Next liCounter
       
    End If

End If

If chkWorkPreparation.Value = True Then
    If WorkSheetExists("Work Preparation") = True Then
        lbPrint = True
        If lbDeselect = True Then
            Sheets("Work Preparation").Select True
            lbDeselect = False
        Else
            Sheets("Work Preparation").Select False
        End If
    End If
End If

If lbPrint = True Then
    'ActiveWindow.SelectedSheets.PrintOut , , , yes
    ActiveWindow.SelectedSheets.PrintPreview
Else
    MsgBox "No Pages to Print. Please Check"
End If
Exit Sub

ErrorHandler:

End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()

'Center the Printer Form
Call CenterScreen(Me)

End Sub

Attribute VB_Name = "modHiltiPI"
Option Explicit
Public Const SheetPassword As String = "0000"

Public Sub CenterScreen(frm As Object)
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : CenterScreen
'DEVELOPER'S NAME  : JS
'DATE OF CREATION  : 15-Mar-2019
'VERSION           : 1.0
'DESCRIPTION       : Load the frm (form) in the center of the application
'
'------------------------------------------------------------------------------------------

On Error GoTo ErrorHandler

frm.Top = Application.Top + (Application.Height - frm.Height) / 2
frm.Left = Application.Left + (Application.Width - frm.Width) / 2

Exit Sub

ErrorHandler:

Err.Clear
End Sub

Public Sub PrintSheets()
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : PrintSheets
'DEVELOPER'S NAME  : JS
'DATE OF CREATION  : 25-Mar-2019
'VERSION           : 1.0
'DESCRIPTION       : Load the Printing Dialog
'
'------------------------------------------------------------------------------------------

frmPrint.Show 1

End Sub

'End Sub
Public Sub FirstTemplate(Optional piFirst As Integer)
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : FirstTemplate
'DEVELOPER'S NAME  : JS
'DATE OF CREATION  : 15-Mar-2019
'VERSION           : 1.0
'DESCRIPTION       : Setting First Template (PI Sheets to Total BOM)
'
'------------------------------------------------------------------------------------------
On Error GoTo ErrorHandler



ActiveWorkbook.Sheets("Settings").Visible = xlSheetVisible
ActiveWorkbook.Sheets("Output Calculator").Visible = xlSheetVisible
ActiveWorkbook.Sheets("Master List").Visible = xlSheetVisible

Worksheets("Start").Unprotect (SheetPassword)
Worksheets("Start").Range("H6:R22").Interior.Color = RGB(255, 255, 255)
Worksheets("Start").Protect (SheetPassword)

ActiveWorkbook.Sheets("Start").Visible = xlSheetHidden
ActiveWorkbook.Sheets("Settings").Activate

If piFirst = 1 Then 'Write the Template selected in A1
    ActiveWorkbook.Sheets("Settings").Unprotect (SheetPassword)
    ActiveWorkbook.Sheets("Settings").Range("A1") = 1
    ActiveWorkbook.Sheets("Settings").Protect (SheetPassword)
End If


'First Template Instructions
Worksheets("settings").Shapes(3).Visible = msoCTrue
'Second Template Instructions
Worksheets("settings").Shapes(4).Visible = msoFalse
'Hilti Image
Worksheets("settings").Shapes(1).Visible = msoCTrue
'Printer Icon
Worksheets("settings").Shapes(2).Visible = msoTrue
    


Exit Sub

ErrorHandler:
MsgBox Err.Description & vbCrLf & vbCrLf & "FirstTemplate Procedure"
End Sub

Public Sub SecondTemplate(Optional piFirst As Integer)
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : SecondTemplate
'DEVELOPER'S NAME  : JS
'DATE OF CREATION  : 15-Mar-2019
'VERSION           : 1.0
'DESCRIPTION       : Setting Second Template (Total BOM to PI Sheets)
'
'------------------------------------------------------------------------------------------
On Error GoTo ErrorHandler



ActiveWorkbook.Sheets("Settings").Visible = xlSheetVisible
ActiveWorkbook.Sheets("Output Calculator").Visible = xlSheetVisible
ActiveWorkbook.Sheets("Master List").Visible = xlSheetVisible

Worksheets("Start").Unprotect (SheetPassword)
Worksheets("Start").Range("H6:R22").Interior.Color = RGB(255, 255, 255)
Worksheets("Start").Protect (SheetPassword)

ActiveWorkbook.Sheets("Start").Visible = xlSheetHidden
ActiveWorkbook.Sheets("Settings").Activate

If piFirst = 1 Then 'Write the Template selected in A1
    ActiveWorkbook.Sheets("Settings").Unprotect (SheetPassword)
    ActiveWorkbook.Sheets("Settings").Range("A1") = 2
    ActiveWorkbook.Sheets("Settings").Protect (SheetPassword)
End If


'First Template Instructions
Worksheets("settings").Shapes(3).Visible = msoFalse
'Second Template Instructions
Worksheets("settings").Shapes(4).Visible = msoCTrue
'Hilti Image
Worksheets("settings").Shapes(1).Visible = msoCTrue
'Printer Icon
Worksheets("settings").Shapes(2).Visible = msoCTrue



Exit Sub

ErrorHandler:
MsgBox Err.Description & vbCrLf & vbCrLf & "FirstTemplate Procedure"
End Sub


Sub Create_PI_Sheets_From_BOM()
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : Create_PI_Sheets_From_BOM
'DEVELOPER'S NAME  : JS
'DATE OF CREATION  : 15-Mar-2019
'VERSION           : 1.0
'DESCRIPTION       : Create PI Sheets from Total BOM Sheet
'
'------------------------------------------------------------------------------------------

On Error GoTo ErrorHandler

Dim llArrayCounter As Long
Dim liUniqueItem As Integer
Dim liTotalBOMItems As Integer
Dim lvSettingsArray() As Variant
Dim lvSettingsTransposedArray() As Variant
Dim loRange As Range
Dim lsRange As String
Dim loWorkSheet As Worksheet
Dim lvTempArray() As Variant
Dim lvBOMArray() As Variant
Dim lsLastItem As String
Dim liArrayCounter As Integer
Dim loHyperLinks As Object
Dim loChannels As Object
Dim lvPISheetsArray() As Variant
Dim liCounter As Long
Dim lsSheetName As String
Dim liNumOfPISheets As Integer
Dim lsSource As String
Dim lsDestination As String
Dim lvFinalArray() As Variant
Dim liSheetCounter As Integer
Dim losheet As Worksheet
Dim loQty As Object
Dim lsItem As String
Dim lsMaterial As Variant
Dim lbFailed As Boolean

'Set this to reduce the flickering
Application.ScreenUpdating = False

'Worksheet Integrity Check, if not proper exit
If CheckStructure = False Then GoTo FAILURE

'Check if Total BOM sheet is there
If WorkSheetExists("Total BOM") = False Then
    MsgBox "The Total BOM Sheet is Missing!" & vbCrLf & vbCrLf & "This program cannot continue"
    GoTo FAILURE
End If


'Get the Hyperlinks and Channels in dictionary objects
liArrayCounter = GetMasterObjects(loHyperLinks, loChannels)

'If the Master List missing or if the reading fails then exit
If liArrayCounter = -1 Then

    MsgBox "The Master List Sheet Missing!" & vbCrLf & vbCrLf & "Sheets Cannot be Created"
    GoTo FAILURE
    
ElseIf liArrayCounter = 0 Then

    MsgBox "Error! Please close and open the workbook and try again."
    GoTo FAILURE
    
End If

'START: Create Empty PI Sheets ----------------------------------------------------------

'Read the PI_Table for the PI Sheets
liCounter = GetTableInfoFromSettings(lvPISheetsArray)

If liCounter = -1 Then
    MsgBox "Please follow the Step 1" & vbCrLf & vbCrLf & "Step 1 will fill the Production and Inspection Table on the right"
    GoTo FAILURE
ElseIf liCounter = 0 Then
    MsgBox "Error! Please close and open the workbook and try again."
    GoTo FAILURE
End If

'Ensure all the Qty are entered on the Production and Inspection Table on the Right
For liCounter = 1 To UBound(lvPISheetsArray, 2)
    If lvPISheetsArray(5, liCounter) = "" Then
        lbFailed = True
        Exit For
    End If
Next liCounter

If lbFailed = True Then
    MsgBox "One or more Qty is empty on the Production and Inspection Table on the right" & vbCrLf & vbCrLf & "Please enter the missing Qty entries"
    GoTo FAILURE
End If

'Set the Worksheet
Set loWorkSheet = Worksheets("Total BOM")

'Set the Range
Set loRange = loWorkSheet.Range("$A$5:$K$4098")

'Assign to the Array
lvTempArray() = loRange
      
'Convert from vertical to horizontal array list
lvBOMArray = Application.Transpose(lvTempArray)

'Erase the temp array
Erase lvTempArray

'Set the counter to Zero
liCounter = 0

'Trim the array to have only non-empty items
For llArrayCounter = 1 To UBound(lvBOMArray, 2)
    'First array element is the item # of the item, which cannot be blank
    If Len(Trim(lvBOMArray(1, llArrayCounter))) > 0 Then
        liCounter = liCounter + 1
    Else
        If liCounter > 0 Then
            ReDim Preserve lvBOMArray(1 To 11, 1 To liCounter)
            Exit For
        Else
            MsgBox "The Total BOM Sheet is either empty or not proper.  Please Check."
            GoTo FAILURE
        End If
    End If
Next llArrayCounter


'Set the worksheet to PI
Set losheet = ActiveWorkbook.Sheets("PI")

losheet.Visible = xlSheetVisible

losheet.Unprotect (SheetPassword)

'total number of PI sheets
liNumOfPISheets = UBound(lvPISheetsArray, 2)

 'set the copied sheet as the active sheet
ActiveWorkbook.Sheets("Total BOM").Activate

' Loop through all the pages and if not exists, create them
For liCounter = 1 To liNumOfPISheets
    
    'Check if the P & I Item Number is not blank
    If Len(Trim(lvPISheetsArray(2, liCounter))) > 0 Then
        
        'Set the sheet name (Sample Format = "PI-3456789")
        lsSheetName = "PI-" & lvPISheetsArray(2, liCounter)
        
        'If sheet exists, skip that sheet
        If WorkSheetExists(lsSheetName) = False Then
            
            'Copy the sheet after the active sheet
            losheet.Copy After:=ActiveWorkbook.Sheets(ActiveSheet.Name)
            
            'set the copied sheet as the active sheet
            ActiveSheet.Name = lsSheetName
            
            'ActiveSheet.Unprotect (SheetPassword)
            
            '---- Assign other values ---
            'C3 = Item (Second Column)
            Worksheets(lsSheetName).Range("C3") = lvPISheetsArray(2, liCounter)
            'G2 = Hilti Drawing Number & Index (Fourth Column)
            Worksheets(lsSheetName).Range("G2") = lvPISheetsArray(4, liCounter)
            'g3 = Item Designation acc. Drawing (Third Column)
            Worksheets(lsSheetName).Range("G3") = lvPISheetsArray(3, liCounter)
            'J3 = Qty(Fifth Column)
            Worksheets(lsSheetName).Range("J3") = lvPISheetsArray(5, liCounter)
        Else
             '---- Assign other values ---
            'C3 = Item (Second Column)
            Worksheets(lsSheetName).Range("C3") = lvPISheetsArray(2, liCounter)
            'G2 = Hilti Drawing Number & Index (Fourth Column)
            Worksheets(lsSheetName).Range("G2") = lvPISheetsArray(4, liCounter)
            'g3 = Item Designation acc. Drawing (Third Column)
            Worksheets(lsSheetName).Range("G3") = lvPISheetsArray(3, liCounter)
            'J3 = Qty(Fifth Column)
            Worksheets(lsSheetName).Range("J3") = lvPISheetsArray(5, liCounter)
        End If
        
    End If
    
Next liCounter

'Protect the sheet
losheet.Protect (SheetPassword)

'Make PI Template hidden
losheet.Visible = xlSheetHidden

'END: Create Empty PI Sheets ------------------------------------

'Total BOM Sheet Columns
'Item Number - on March 25 order changed ..this is new order of columns
'Item Designation - on March 25 order changed ..this is new order of columns
'Pos.
'L
'Mat.Nr.
'Material Description
'Qty [pcs.]
'Length L [mm]
'Cutting Type
'Total Qty[pcs]
'Relevant IFUs"


'Sort the array by the item #
Call BOMSorting(lvBOMArray, 1, True)

'Column Positions in PI sheets
'1. Position
'2. Material Number
'3. Material Description
'4. Qty
'5. Length
'6. Cutting Type
'7. Total Qty (Calculation Formula is there)
'8. Relevant IFUs (8 and 9 cols combined)
'10.For Kitting Service: Completeness Test (10 and 11 combined)

liTotalBOMItems = UBound(lvBOMArray, 2)

'Set the Unique Item count to zero
liUniqueItem = 0

'Loop through the items in the lvBOMArray (BOM items)
For llArrayCounter = 1 To liTotalBOMItems

    'First array element is the item # of the item, which cannot be blank
    If Len(Trim(lvBOMArray(1, llArrayCounter))) > 0 Then
    
        If lsLastItem <> Trim(lvBOMArray(1, llArrayCounter)) Then
            
            'liUniqueItem > 0 means it is not the first row and is a item change trigger
            If liUniqueItem > 0 Then
                
                'create the sheet
                GoSub CREATE_SHEET
                
            End If
            
            'Starting of a new sheet
            liUniqueItem = 1
            
            'Store the item as last item
            lsLastItem = Trim(lvBOMArray(1, llArrayCounter))
        Else
            liUniqueItem = liUniqueItem + 1
        End If
        
        'store the required elements from BOM for PI sheet
        ReDim Preserve lvSettingsArray(1 To 6, 1 To liUniqueItem)
        lvSettingsArray(1, liUniqueItem) = lvBOMArray(3, llArrayCounter)
        lvSettingsArray(2, liUniqueItem) = lvBOMArray(5, llArrayCounter)
        lvSettingsArray(3, liUniqueItem) = lvBOMArray(6, llArrayCounter)
        lvSettingsArray(4, liUniqueItem) = lvBOMArray(7, llArrayCounter)
        lvSettingsArray(5, liUniqueItem) = lvBOMArray(8, llArrayCounter)
        lvSettingsArray(6, liUniqueItem) = lvBOMArray(9, llArrayCounter)
    Else
        Exit For
    End If
Next llArrayCounter

'Create the last sheet, all sheets are created in the loop except the last one
GoSub CREATE_SHEET


'Item Designation Object
Set loQty = CreateObject("Scripting.Dictionary")

For llArrayCounter = 1 To UBound(lvPISheetsArray, 2)
    If loQty.exists(lvPISheetsArray(2, llArrayCounter)) = False Then
        loQty.Add CStr(lvPISheetsArray(2, llArrayCounter)), CStr(lvPISheetsArray(5, llArrayCounter))
    End If

Next llArrayCounter


'Setting the start and end position on the Total BOM sheet.  Row # start from 5 to number of rows + 4
liTotalBOMItems = liTotalBOMItems + 4

'Update the IFUs and Total Qty for the Total BOM Sheet
For llArrayCounter = 5 To liTotalBOMItems

    'Material #
    lsSource = "E" & llArrayCounter
    lsMaterial = Worksheets("Total BOM").Range(lsSource)


    'Check if the Material Number is not blank
    If Len(lsMaterial) > 0 Then
    
        'If Hyperlink Exists for the material
        If loHyperLinks.exists(lsMaterial) Then

            lsSource = "K" & llArrayCounter

            'lsDestination = loHyperLinks(lvBOMArray(5, llArrayCounter))
            lsDestination = loHyperLinks.Item(lsMaterial)
            
            If Left(lsDestination, 10) = "HYPERLINK:" Then

                lsDestination = "C" & Mid(lsDestination, 11)
                Worksheets("Total BOM").Range(lsSource).Hyperlinks.Add Worksheets("Total BOM").Range(lsSource), Worksheets("Master List").Range(lsDestination).Hyperlinks(1).Address, , , Worksheets("Master List").Range(lsDestination).Text
            
            Else
                
                lsDestination = "C" & lsDestination
                Worksheets("Total BOM").Range(lsSource) = Worksheets("Master List").Range(lsDestination)
            
            End If

        End If
        
        
        'Update the total quantity table
        lsDestination = "J" & llArrayCounter
        lsSource = "G" & llArrayCounter
        lsItem = "A" & llArrayCounter
        lsItem = Worksheets("Total BOM").Range(lsItem)
        lsItem = loQty.Item(lsItem)
        
        Worksheets("Total BOM").Range(lsDestination) = Val(Worksheets("Total BOM").Range(lsSource)) * Val(lsItem)
        
        
    End If

Next llArrayCounter


'Fix the IFUs in Individual PI Sheets
For liSheetCounter = 1 To liNumOfPISheets
    'Set the Worksheet
    Set loWorkSheet = Worksheets("PI-" & lvPISheetsArray(2, liSheetCounter))
    
     'Set the Range
    Set loRange = loWorkSheet.Range("PI_Data")
    
    'Assign to the Array
    lvTempArray() = loRange
      
    'Convert from vertical to horizontal array list
    lvFinalArray = Application.Transpose(lvTempArray)
    
    For llArrayCounter = 1 To UBound(lvFinalArray, 2)

        If Len(Trim(lvFinalArray(2, llArrayCounter))) > 0 Then
    
            If loHyperLinks.exists(lvFinalArray(2, llArrayCounter)) Then
    
                lsSource = "H" & (4 + llArrayCounter)
    
                lsDestination = loHyperLinks(lvFinalArray(2, llArrayCounter))
    
                If Left(lsDestination, 10) = "HYPERLINK:" Then
    
                    lsDestination = "C" & Mid(lsDestination, 11)
                    loWorkSheet.Range(lsSource).Hyperlinks.Add loWorkSheet.Range(lsSource), Worksheets("Master List").Range(lsDestination).Hyperlinks(1).Address, , , Worksheets("Master List").Range(lsDestination).Text
                
                Else
                    
                    lsDestination = "C" & lsDestination
                    loWorkSheet.Range(lsSource) = Worksheets("Master List").Range(lsDestination)
                
                End If
    
            End If
    
        End If

    Next llArrayCounter

    
Next liSheetCounter


'-------------------------------------------------------------------------------------------------
Dim loHeader As Object
Dim loItemDesignation As Object
Dim lvCuttingArray() As Variant
Dim liCuttingCounter As Integer
Dim lsHeader As String
Dim llTotal As Long
Dim lvTransposedArray() As Variant
Dim lss As String
Dim liSummaryRow As Integer



'--- Check if the Cutting Tracking Sheet Exists, if not create it from CT Template
If WorkSheetExists("Cutting Tracking") = False Then

    If WorkSheetExists("CT") = True Then

        'Set the worksheet to CT
        Set losheet = ActiveWorkbook.Sheets("CT")
        
        losheet.Visible = xlSheetVisible
        
        'Copy the sheet after the active sheet
        losheet.Copy After:=ActiveWorkbook.Sheets("Total BOM")
        
        'set the copied sheet as the active sheet
        ActiveSheet.Name = "Cutting Tracking"
        
        ActiveSheet.Unprotect (SheetPassword)
        
        losheet.Visible = xlSheetHidden
        
    Else
        'Show message and go to failure point
        MsgBox "The Cutting Tracking { CT } Template is Missing" & vbCrLf & vbCrLf & "Cutting Tracking Sheet cannot be created"
        
        GoTo FAILURE
        
    End If

End If

'--- Check if the Input Calculator Sheet Exists, if not create it from IC Template
If WorkSheetExists("Input Calculator") = False Then

    If WorkSheetExists("IC") = True Then

        'Set the worksheet to IC
        Set losheet = ActiveWorkbook.Sheets("IC")
        
        losheet.Visible = xlSheetVisible
        
        'Copy the sheet after the active sheet
        losheet.Copy Before:=ActiveWorkbook.Sheets("Output Calculator")
        
        'set the copied sheet as the active sheet
        ActiveSheet.Name = "Input Calculator"
        
        ActiveSheet.Unprotect (SheetPassword)
        
        losheet.Visible = xlSheetHidden
        
    Else
        
        'Show message and go to failure point
        MsgBox "The Input Calculator { IC } Template is Missing" & vbCrLf & vbCrLf & "Total BOM Sheet cannot be created"
        
        GoTo FAILURE
        
    End If

End If

'Read Total BOM once again as the qty got updated in this routine

'Set the Worksheet
Set loWorkSheet = Worksheets("Total BOM")

'Set the Range
Set loRange = loWorkSheet.Range("$A$5:$K$4098")

'Assign to the Array
lvTempArray() = loRange
      
'Convert from vertical to horizontal array list
lvBOMArray = Application.Transpose(lvTempArray)

'Erase the temp array
Erase lvTempArray

'Set the counter to Zero
liCounter = 0

'Trim the array to have only non-empty items
For llArrayCounter = 1 To UBound(lvBOMArray, 2)
    'First array element is the item # of the item, which cannot be blank
    If Len(Trim(lvBOMArray(1, llArrayCounter))) > 0 Then
        liCounter = liCounter + 1
    Else
        ReDim Preserve lvBOMArray(1 To 11, 1 To liCounter)
        Exit For
    End If
Next llArrayCounter


'Sort the array by the item #
Call BOMSorting(lvBOMArray, 1, True)


'Create the Cutting Tracking Sheet from loChannels
'Create an array only with the Channel type


ReDim lvItemDesignation(1 To UBound(lvPISheetsArray, 2))

For liArrayCounter = 1 To UBound(lvPISheetsArray, 2)
    lvItemDesignation(liArrayCounter) = lvPISheetsArray(2, liArrayCounter)
Next liArrayCounter



Set loHeader = CreateObject("Scripting.Dictionary")
'Item Designation Object
Set loItemDesignation = CreateObject("Scripting.Dictionary")

'Sort the item designations
Call SingleSorting(lvItemDesignation)

'Set the Item Designation Number differently so that descending sort returns them ascending; This is required for BOMSort Below
For liArrayCounter = 1 To UBound(lvItemDesignation)
    
    If loItemDesignation.exists(lvItemDesignation(liArrayCounter)) = False Then
        loItemDesignation.Add lvItemDesignation(liArrayCounter), (9999 - liArrayCounter)
    End If
    
Next liArrayCounter


ReDim lvCuttingArray(1 To 15, 1 To 1)


For liArrayCounter = 1 To UBound(lvBOMArray, 2)

    If loChannels.exists(lvBOMArray(5, liArrayCounter)) = True Then
    
        liCuttingCounter = liCuttingCounter + 1
        
        ReDim Preserve lvCuttingArray(1 To 15, 1 To liCuttingCounter)
        'Item Description
        lvCuttingArray(1, liCuttingCounter) = lvBOMArray(2, liArrayCounter)
        
        'Position
        lvCuttingArray(2, liCuttingCounter) = lvBOMArray(3, liArrayCounter)
        
        'Material #
        lvCuttingArray(3, liCuttingCounter) = lvBOMArray(5, liArrayCounter)
        
        'Material Description
        lvCuttingArray(4, liCuttingCounter) = lvBOMArray(6, liArrayCounter)
        
        'Cutting Type
        lvCuttingArray(5, liCuttingCounter) = lvBOMArray(9, liArrayCounter) 'lvCuttingTypeArray(liArrayCounter)
        
        'Total Quantity
        lvCuttingArray(6, liCuttingCounter) = lvBOMArray(10, liArrayCounter)
        
        'Length
        lvCuttingArray(7, liCuttingCounter) = lvBOMArray(8, liArrayCounter) '* 1000
        
         'Sorting # for item designation
        lvCuttingArray(8, liCuttingCounter) = loItemDesignation.Item(lvBOMArray(1, liArrayCounter))
    
        
        'Check if the header row is unique else add a header row
        lsHeader = Right("000000000000" & lvBOMArray(8, liArrayCounter), 12) & Right("000000000000" & lvBOMArray(5, liArrayCounter), 12)
        
        If loHeader.exists(lsHeader) = False Then
        
            liCounter = liCounter + 1
            
            loHeader.Add lsHeader, liCounter
            
            liCuttingCounter = liCuttingCounter + 1
            
            ReDim Preserve lvCuttingArray(1 To 15, 1 To liCuttingCounter)
            'Item Designation
            lvCuttingArray(1, liCuttingCounter) = ""
            
            'Position
            lvCuttingArray(2, liCuttingCounter) = ""
            
            'Material #
            lvCuttingArray(3, liCuttingCounter) = lvBOMArray(5, liArrayCounter)
            
            'Material Description
            lvCuttingArray(4, liCuttingCounter) = lvBOMArray(6, liArrayCounter)
            
            'Cutting Type
            lvCuttingArray(5, liCuttingCounter) = lvBOMArray(9, liArrayCounter) 'lvCuttingTypeArray(liArrayCounter)
            
            'Total Quantity
            lvCuttingArray(6, liCuttingCounter) = ""
            
            'Length
            lvCuttingArray(7, liCuttingCounter) = lvBOMArray(8, liArrayCounter) '* 1000 removed as Total BOM also is in mm now 20/Mar/2019
            
             'Sorting # for item designation
            lvCuttingArray(8, liCuttingCounter) = "9999"
            
        End If
        
    End If

Next liArrayCounter


'Sort the array
If BOMSorting(lvCuttingArray) = False Then

    MsgBox "Error! Please close and open the workbook and try again."
    GoTo FAILURE
    
End If


'Process the lvcutting array and make Summary Rows and Detailed Rows
For liArrayCounter = UBound(lvCuttingArray, 2) To 1 Step -1
    
    'Detailed rows will not have 9999
    If lvCuttingArray(8, liArrayCounter) <> "9999" Then
       
        'Add to the Material Totals
        llTotal = llTotal + lvCuttingArray(6, liArrayCounter)
        
        'Blank the detailed rows; Details shown only in the header rows
        lvCuttingArray(3, liArrayCounter) = ""
        lvCuttingArray(4, liArrayCounter) = ""
        lvCuttingArray(5, liArrayCounter) = ""
        lvCuttingArray(7, liArrayCounter) = ""
        
    Else 'Summary Row will have 9999; Assign Totals and do not clear the details
        lvCuttingArray(6, liArrayCounter) = llTotal

        llTotal = 0
    End If

Next liArrayCounter


'Convert from vertical to horizontal array list
lvTransposedArray = Application.Transpose(lvCuttingArray)

'Clear any entry in Cutting Tracking Sheet
Worksheets("Cutting Tracking").Range("A8:O5000").Clear

'Assign the contents of the array to the Cutting Tracking sheet from cell A8
Worksheets("Cutting Tracking").[A8].Resize(UBound(lvCuttingArray, 2), 7) = lvTransposedArray

lss = "A8:M" & UBound(lvCuttingArray, 2) + 8
Worksheets("Cutting Tracking").Range(lss).Borders.LineStyle = xlContinuous
Worksheets("Cutting Tracking").Range(lss).HorizontalAlignment = xlCenter
Worksheets("Cutting Tracking").Range(lss).VerticalAlignment = xlCenter


For liArrayCounter = 1 To UBound(lvCuttingArray, 2)

    If lvCuttingArray(1, liArrayCounter) = "" Then
        'Row number is array number + 7 fixed rows
        liSummaryRow = 7 + liArrayCounter
        lss = "C" & liSummaryRow & ":G" & liSummaryRow
        Worksheets("Cutting Tracking").Range(lss).Font.Bold = True
        Worksheets("Cutting Tracking").Range(lss).Interior.Color = RGB(255, 200, 100)

    End If

Next liArrayCounter

With Worksheets("Cutting Tracking").Range(lss).Interior
    .Pattern = xlSolid
End With


'*********************  CREATING INPUT CALCULATOR SHEET ****************************

'Collect the data for
'1.  Material Number
'2.  Material Description
'3.  Type (Not filled by the program, leave blank)
'4.  Size (Not filled by the program, leave blank)
'5.  Extra (Not filled by the program, leave blank)
'6.  Material / Coating (Not filled by the program, leave blank)
'7.  Cutting Type
'8.  Nominal Length (mm)
'9.  Qty(pcs)
'10. Deviating Tolerance (|fffd|mm) (Not filled by the program, leave blank)
'11. Hilti Std.Tolerance (Not filled by the program, leave blank)

ReDim lvInputCalculator(1 To 11, 1 To 1)
liCuttingCounter = 0
For liArrayCounter = 1 To UBound(lvCuttingArray, 2)

    If lvCuttingArray(1, liArrayCounter) = "" Then
    
        liCuttingCounter = liCuttingCounter + 1
        
        ReDim Preserve lvInputCalculator(1 To 11, 1 To liCuttingCounter)
        
        'Material Number
        lvInputCalculator(1, liCuttingCounter) = lvCuttingArray(3, liArrayCounter)
        
        ' Material Description
        lvInputCalculator(2, liCuttingCounter) = lvCuttingArray(4, liArrayCounter)
        
        ' Cutting Type
        lvInputCalculator(7, liCuttingCounter) = lvCuttingArray(5, liArrayCounter)
        
        ' Nominal Length (mm)
        lvInputCalculator(8, liCuttingCounter) = lvCuttingArray(7, liArrayCounter)
        
        ' Qty(pcs)
        lvInputCalculator(9, liCuttingCounter) = lvCuttingArray(6, liArrayCounter)

    End If

Next liArrayCounter

'Clear the Array before storing the transposed array
Erase lvTransposedArray

'transpose the array to assign the array to a range
lvTransposedArray = Application.Transpose(lvInputCalculator)

'Clear any entry in Input Calculator Sheet
Worksheets("Input Calculator").Range("A2:K5000").Clear

'Assign the contents of the array to the Input Calculator sheet from cell A2
Worksheets("Input Calculator").[A2].Resize(liCuttingCounter, 11) = lvTransposedArray

'Set the Border
lss = "A2:K" & liCuttingCounter + 1
Worksheets("Input Calculator").Range(lss).Borders.LineStyle = xlContinuous

'------------------------------------------------------------------------------------------------

'Success Message
MsgBox "Production & Inspection, Cutting Tracking and Input Calculator Sheets have been created successfully"

Application.ScreenUpdating = True

'Set the settings sheet as the active sheet
ActiveWorkbook.Sheets("Settings").Activate

'All Good.  Exit the function.
Exit Sub

FAILURE:

'Set the settings sheet as the active sheet
ActiveWorkbook.Sheets("Settings").Activate

Application.ScreenUpdating = True

Exit Sub

CREATE_SHEET:
'Set the sheet name (Sample Format = "PI-3456789")
lsSheetName = "PI-" & lsLastItem

For liCounter = 1 To liUniqueItem

    '---- Assign other values ---
    'Col A = Position
    lsRange = "A" & (liCounter + 4)
    Worksheets(lsSheetName).Range(lsRange) = lvSettingsArray(1, liCounter)
    'Col B = Material Number
    lsRange = "B" & (liCounter + 4)
    Worksheets(lsSheetName).Range(lsRange) = lvSettingsArray(2, liCounter)
    'Col C = Material Description
    lsRange = "C" & (liCounter + 4)
    Worksheets(lsSheetName).Range(lsRange) = lvSettingsArray(3, liCounter)
    'Col D = Qty
    lsRange = "D" & (liCounter + 4)
    Worksheets(lsSheetName).Range(lsRange) = lvSettingsArray(4, liCounter)
    'Col E = Length
    lsRange = "E" & (liCounter + 4)
    Worksheets(lsSheetName).Range(lsRange) = lvSettingsArray(5, liCounter)
    'Col F = Cutting Type
    lsRange = "F" & (liCounter + 4)
    Worksheets(lsSheetName).Range(lsRange) = lvSettingsArray(6, liCounter)

Next liCounter

Return

ErrorHandler:

'Call Error Message
Call DisplayError(Err)

'Clear the error object
Err.Clear

End Sub
Sub Create_Settings_Table()
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : Create_Settings_Table
'DEVELOPER'S NAME  : JS
'DATE OF CREATION  : 15-Mar-2019
'VERSION           : 1.0
'DESCRIPTION       : Create Setting Table in Settings Sheet from Total BOM Sheets
'
'------------------------------------------------------------------------------------------

On Error GoTo ErrorHandler

Dim llArrayCounter As Long
Dim liUniqueItem As Integer
Dim loUniqueItems As Object
Dim lvSettingsArray() As Variant
Dim lvSettingsTransposedArray() As Variant
Dim loRange As Range
Dim loWorkSheet As Worksheet
Dim lvTempArray() As Variant
Dim lvBOMArray() As Variant


'Set this to reduce the flickering
Application.ScreenUpdating = False

'Item Designation Object
Set loUniqueItems = CreateObject("Scripting.Dictionary")

'Worksheet Integrity Check, if not proper exit
If CheckStructure = False Then GoTo FAILURE

'Check if Total BOM sheet is there
If WorkSheetExists("Total BOM") = False Then
    MsgBox "The Total BOM Sheet is Missing!" & vbCrLf & vbCrLf & "This program cannot continue"
    GoTo FAILURE
End If


'Set the Worksheet
Set loWorkSheet = Worksheets("Total BOM")

'Set the Range
Set loRange = loWorkSheet.Range("$A$5:$K$4098")

'Assign to the Array
lvTempArray() = loRange
      
'Convert from vertical to horizontal array list
lvBOMArray = Application.Transpose(lvTempArray)

'Erase the temp array
Erase lvTempArray


'Loop through the items in the lvFinalarray (BOM items) to identify the unique Items and Item Designations
For llArrayCounter = LBound(lvBOMArray, 2) To UBound(lvBOMArray, 2)

    'First array element is the item # of the item, which cannot be blank
    If Len(Trim(lvBOMArray(1, llArrayCounter))) > 0 Then
    
        'Check if this item has already been added to the array by checking with the dictionary object
        If loUniqueItems.exists(lvBOMArray(1, llArrayCounter)) = False Then
            
            'One more item found
            liUniqueItem = liUniqueItem + 1
            
            'Add the item to the dictionary
            loUniqueItems.Add lvBOMArray(1, llArrayCounter), liUniqueItem
            
            'populate the array
            ReDim Preserve lvSettingsArray(1 To 2, 1 To liUniqueItem)
            lvSettingsArray(1, liUniqueItem) = lvBOMArray(1, llArrayCounter)
            lvSettingsArray(2, liUniqueItem) = lvBOMArray(2, llArrayCounter)
        
        End If
        
    Else
        Exit For
    End If
Next llArrayCounter

'Erase the BOM Array
Erase lvBOMArray

If liUniqueItem = 0 Then
    MsgBox "The Total BOM Sheet is not proper!" & vbCrLf & vbCrLf & "This program cannot continue"
    GoTo FAILURE
End If


If Len(Trim(Worksheets("Settings").Range("C13"))) > 0 Then
    If MsgBox("The Production and Inspection Table on the right is not empty" & vbCrLf & vbCrLf & "Are you sure you want to continue with Step 1?", vbYesNo + vbDefaultButton2) = vbNo Then
        GoTo FAILURE
    End If
End If


'Transpose the array list
lvSettingsTransposedArray = Application.Transpose(lvSettingsArray)

'Clear any entry in Total Bom Sheet
Worksheets("Settings").Range("C13:F37") = ""

'Assign the contents of the array to the Total BOM sheet from cell A5
Worksheets("Settings").[C13].Resize(liUniqueItem, 2) = lvSettingsTransposedArray

'Success Message
MsgBox "The Production and Inspection Table has been updated successfully." & vbCrLf & vbCrLf & "Please continue with Step 2"

Application.ScreenUpdating = True

'Set the settings sheet as the active sheet
ActiveWorkbook.Sheets("Settings").Activate

'All Good.  Exit the function.
Exit Sub

FAILURE:

'Set the settings sheet as the active sheet
ActiveWorkbook.Sheets("Settings").Activate

Application.ScreenUpdating = True

Exit Sub

ErrorHandler:

'Call Error Message
Call DisplayError(Err)

'Clear the error object
Err.Clear

End Sub

Public Function WorkSheetExists(pvSheetName As Variant) As Boolean
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : WorkSheetExists
'DEVELOPER'S NAME  : JS
'DATE OF CREATION  : 12-Feb-2019
'VERSION           : 1.0
'DESCRIPTION       : Functions tries to set an object to the given name.
'                  : If the sheet does not exist, it throws an error
'------------------------------------------------------------------------------------------
Dim objExcel As Object

'Resume next on error to trap the error
On Error Resume Next

'Set the object to an instance of the given sheet
Set objExcel = ActiveWorkbook.Sheets(pvSheetName)

'If No error, sheet exists else sheet does not exist
If Err.Number = 0 Then
    WorkSheetExists = True
Else
    WorkSheetExists = False
End If

'Clear the error
Err.Clear

'set the object to nothing
Set objExcel = Nothing

End Function

Public Function GetTableInfoFromSettings(pvArray() As Variant) As Integer
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : GetTableInfoFromSettings
'DEVELOPER'S NAME  : JS
'DATE OF CREATION  : 12-Feb-2019
'VERSION           : 1.0
'DESCRIPTION       : Read the user entered settings for the Production and Inspection Sheets (PI sheets)
'                  : From the table
'------------------------------------------------------------------------------------------

On Error GoTo ErrorHandler

Dim lvLocalSettingsArray() As Variant
Dim lvTempArray() As Variant
Dim loTable As ListObject
Dim loWorkSheet As Worksheet
Dim liArrayDimension As Integer
Dim liCounter As Integer


'Set the return value to False
GetTableInfoFromSettings = 0

'set the worksheet to settings sheet
Set loWorkSheet = Worksheets("Settings")

'Set path for Table variable
Set loTable = loWorkSheet.ListObjects("PI_Table")

'Create Array List from Table
lvTempArray = loTable.DataBodyRange.Columns()
  
'Transpose the Array
lvLocalSettingsArray = Application.Transpose(lvTempArray)

'Loop through the items in the array to redimension the array, remove the blanks.
liArrayDimension = 0

'Loop through the array and keep only the non-blanks, redimension the array accordingly
For liCounter = LBound(lvLocalSettingsArray, 2) To UBound(lvLocalSettingsArray, 2)
    
    'Check for the non-blanks, only the second column (Item) is considered for this
    If Len(Trim(lvLocalSettingsArray(2, liCounter))) > 0 Then
        liArrayDimension = liArrayDimension + 1
    Else
        'Exit the loop as soon as the first blank appears
        Exit For
    End If
    
Next liCounter

'If the table is empty return -1
If liArrayDimension < 1 Then
    GetTableInfoFromSettings = -1
    Exit Function
End If

'Redimension the array to have only the non-blanks
ReDim Preserve lvLocalSettingsArray(1 To 5, 1 To liArrayDimension)

'Assign the array to the return
pvArray = lvLocalSettingsArray

'All Good; set the return value to TRUE
GetTableInfoFromSettings = 1

Exit Function

ErrorHandler:

GetTableInfoFromSettings = 0
'Call Error Message
Call DisplayError(Err)

'Clear the error object
Err.Clear


End Function

Sub Create_PI_Sheets()
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : Create_PI_Sheets
'DEVELOPER'S NAME  : JS
'DATE OF CREATION  : 14-Feb-2019
'VERSION           : 1.0
'DESCRIPTION       : Create PI sheets based on the info from settings sheet, also fill the 4 cells with the infol
'
'------------------------------------------------------------------------------------------
On Error GoTo ErrorHandler

Dim myArray() As Variant
Dim liCounter As Long
Dim lsSheetName As String
Dim losheet As Worksheet

'Worksheet Integrity Check
If CheckStructure = False Then Exit Sub

'Read the PI_Table for the PI Sheets
liCounter = GetTableInfoFromSettings(myArray)

If liCounter = -1 Then
    MsgBox "Please enter the Production & Inspection Sheet details" & vbCrLf & vbCrLf & "The PI Sheet details must be entered in the table"
    Exit Sub
ElseIf liCounter = 0 Then
    MsgBox "Error! Please close and open the workbook and try again."
    Exit Sub
End If

'Set the screen update to false to avoid screen blinking
Application.ScreenUpdating = False

'Set the worksheet to PI
Set losheet = ActiveWorkbook.Sheets("PI")

losheet.Visible = xlSheetVisible

' Loop through all the pages and if not exists, create them
For liCounter = 1 To UBound(myArray, 2)
    
    'Check if the P & I Item Number is not blank
    If Len(Trim(myArray(2, liCounter))) > 0 Then
        
        'Set the sheet name (Sample Format = "PI-3456789")
        lsSheetName = "PI-" & myArray(2, liCounter)
        
        'If sheet exists, skip that sheet
        If WorkSheetExists(lsSheetName) = False Then
            
            'Copy the sheet after the active sheet
            losheet.Copy After:=ActiveWorkbook.Sheets(ActiveSheet.Name)
            
            'set the copied sheet as the active sheet
            ActiveSheet.Name = lsSheetName
            
            ActiveSheet.Unprotect (SheetPassword)
            
            '---- Assign other values ---
            'C3 = Item (Second Column)
            Worksheets(lsSheetName).Range("C3") = myArray(2, liCounter)
            'G2 = Hilti Drawing Number & Index (Fourth Column)
            Worksheets(lsSheetName).Range("G2") = myArray(4, liCounter)
            'g3 = Item Designation acc. Drawing (Third Column)
            Worksheets(lsSheetName).Range("G3") = myArray(3, liCounter)
            'J3 = Qty(Fifth Column)
            Worksheets(lsSheetName).Range("J3") = myArray(5, liCounter)
        Else
            '---- Assign other values ---
            'C3 = Item (Second Column)
            Worksheets(lsSheetName).Range("C3") = myArray(2, liCounter)
            'G2 = Hilti Drawing Number & Index (Fourth Column)
            Worksheets(lsSheetName).Range("G2") = myArray(4, liCounter)
            'g3 = Item Designation acc. Drawing (Third Column)
            Worksheets(lsSheetName).Range("G3") = myArray(3, liCounter)
            'J3 = Qty(Fifth Column)
            Worksheets(lsSheetName).Range("J3") = myArray(5, liCounter)
        End If
        
    End If
    
Next liCounter

losheet.Visible = xlSheetHidden

'Set the settings sheet as the active sheet
ActiveWorkbook.Sheets("Settings").Activate

'Set the Screen Updating
Application.ScreenUpdating = True
    
'All good. Exit
Exit Sub

ErrorHandler:

'Call Error Message
Call DisplayError(Err)

'Clear the error object
Err.Clear

End Sub
Sub DisplayError(pErr As ErrObject)
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : DisplayError
'DEVELOPER'S NAME  : JS
'DATE OF CREATION  : 14-Feb-2019
'VERSION           : 1.0
'DESCRIPTION       : Display Error from the Error Object.  This Sub to be called in all error handlers
'
'------------------------------------------------------------------------------------------

'Show the Error to the user
MsgBox pErr.Number & "  " & pErr.Description

'Set the Screen Updating
Application.ScreenUpdating = True

End Sub

Sub Create_BOM_Sheet()
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : Create_BOM_Sheet
'DEVELOPER'S NAME  : JS
'DATE OF CREATION  : 22-Feb-2019
'VERSION           : 1.0
'DESCRIPTION       : Create BOM sheet and Cutting Tracking Sheet from individual PI sheets
'
'------------------------------------------------------------------------------------------

On Error GoTo ErrorHandler

Dim liArrayCounter As Long
Dim liBOMCounter As Integer
Dim liCounter As Integer
Dim liCuttingCounter As Integer
Dim liItemDesignationCounter As Integer
Dim liSheetCounter As Integer
Dim liSummaryRow As Integer

Dim llTotal As Long

Dim loChannels As Object
Dim loHeader As Object
Dim loHyperLinks As Object
Dim loItemDesignation As Object

Dim loRange As Range

Dim losheet As Worksheet
Dim loWorkSheet As Worksheet

Dim ls As String
Dim ls2 As String
Dim lsHeader As String
Dim lss As String

Dim lvBOMArray() As Variant
Dim lvCuttingArray() As Variant
Dim lvCuttingTypeArray() As Variant
Dim lvFinalArray() As Variant
Dim lvHyper() As Variant
Dim lvInputCalculator() As Variant
Dim lvItemDesignation() As Variant
Dim lvSettingsArray() As Variant
Dim lvSheetNames() As Variant
Dim lvTempArray() As Variant
Dim lvTransposedArray() As Variant


'Set this to reduce the flickering
Application.ScreenUpdating = False

'Item Designation Object
Set loItemDesignation = CreateObject("Scripting.Dictionary")

'Worksheet Integrity Check, if not proper exit
If CheckStructure = False Then GoTo FAILURE


'Set the Function as False
ReDim lvBOMArray(1 To 11, 1 To 1)

'Populate the array with the Table! Data from the settings worksheet
liCounter = GetTableInfoFromSettings(lvSettingsArray)

'Check if the table has info from Row 1.
If liCounter = -1 Then
    
    MsgBox "Production and Inspection Sheet Table not proper." & vbCrLf & vbCrLf & _
    "The PI Sheet details must be entered from the first row in that table and follow Step 1"
    GoTo FAILURE
    
ElseIf liCounter = 0 Then

    MsgBox "Error! Please close and open the workbook and try again."
    GoTo FAILURE
    
End If

'loop through all the table entries where item is non-blank, exits the loop at the first blank
For liCounter = 1 To UBound(lvSettingsArray, 2)
    
    If Len(Trim(lvSettingsArray(2, liCounter))) > 0 Then
        'Redimension the array
        ReDim Preserve lvSheetNames(1 To liCounter)
        'format the name and assign to the array
        lvSheetNames(liCounter) = "PI-" & lvSettingsArray(2, liCounter)
        
        'Check if file exists, else exit
        If WorkSheetExists(lvSheetNames(liCounter)) = False Then
        
            MsgBox lvSheetNames(liCounter) & " Sheet is missing!" & vbCrLf & vbCrLf & "Please Check"
            GoTo FAILURE
            
        End If
        
    Else
        Exit For
    End If
    
Next liCounter


'Get the Hyperlinks and Channels in dictionary objects
liArrayCounter = GetMasterObjects(loHyperLinks, loChannels)

'If the Master List missing or if the reading fails then exit
If liArrayCounter = -1 Then

    MsgBox "Master List Sheet Missing!" & vbCrLf & vbCrLf & "Sheets Cannot be Created"
    GoTo FAILURE
    
ElseIf liArrayCounter = 0 Then

    MsgBox "Error! Please close and open the workbook and try again."
    GoTo FAILURE
    
End If


'Set the item Designation dictionary
ReDim lvItemDesignation(1 To UBound(lvSheetNames))

'Loop through all the sheets to get the data from the sheets
For liSheetCounter = 1 To UBound(lvSheetNames)

    'Set the Worksheet
    Set loWorkSheet = Worksheets(lvSheetNames(liSheetCounter))
    
    'Set the Range
    Set loRange = loWorkSheet.Range("PI_Data")
    
    'Assign to the Array
    lvTempArray() = loRange
      
    'Convert from vertical to horizontal array list
    lvFinalArray = Application.Transpose(lvTempArray)
    
    'If any Production and Inspection Sheet is empty, do not proceed
    If Len(Trim(lvFinalArray(2, 1))) = 0 Then
    
        MsgBox "Production and Inspection Sheet: " & lvSheetNames(liSheetCounter) & " is either empty or not proper." & vbCrLf & vbCrLf & "Please Check All the PI Sheets!"
        GoTo FAILURE
        
    End If
    
    'Get the item  in an array
    lvItemDesignation(liSheetCounter) = loWorkSheet.Range("C3")
    
    'Loop through the items in the array to redimension the array, remove the blanks.

    For liArrayCounter = LBound(lvFinalArray, 2) To UBound(lvFinalArray, 2)
    
        'Second array element is the name of the item, which cannot be blank
        If Len(Trim(lvFinalArray(2, liArrayCounter))) > 0 Then
        
            'Increment the counter by one as the record is non-blank
            liBOMCounter = liBOMCounter + 1
            
            'Redimension the array for the new entry
            ReDim Preserve lvBOMArray(1 To 11, 1 To liBOMCounter)
            ReDim Preserve lvCuttingTypeArray(1 To liBOMCounter)
            
            'Item Number = comes from the sheet, C3 cell
            lvBOMArray(1, liBOMCounter) = loWorkSheet.Range("C3")
            
            'Item Designation = comes from the sheet, G3 cell
            lvBOMArray(2, liBOMCounter) = loWorkSheet.Range("G3")
            
            'Pos. (element 1)
            lvBOMArray(3, liBOMCounter) = lvFinalArray(1, liArrayCounter)
            
            'Filling L
            lvBOMArray(4, liBOMCounter) = "L"
            
            'Mat.Nr (element 2)
            lvBOMArray(5, liBOMCounter) = lvFinalArray(2, liArrayCounter)
            
            'Material Description (element 3)
            lvBOMArray(6, liBOMCounter) = lvFinalArray(3, liArrayCounter)
            
            'Quantity (element 4)
            lvBOMArray(7, liBOMCounter) = lvFinalArray(4, liArrayCounter)
            
            'Length (element 5)
            lvBOMArray(8, liBOMCounter) = lvFinalArray(5, liArrayCounter)
            
            'Cutting Type
            lvBOMArray(9, liBOMCounter) = lvFinalArray(6, liArrayCounter)
            
            'Total Quantity of component (element 7)
            lvBOMArray(10, liBOMCounter) = lvFinalArray(7, liArrayCounter)
            
            'Relevant IFUs (element 8)
            lvBOMArray(11, liBOMCounter) = lvFinalArray(8, liArrayCounter)
            
            'Cutting type for Cutting type sheet (Not removing this even though Cutting Type is added to Total BOM in Phase 2.
            lvCuttingTypeArray(liBOMCounter) = lvFinalArray(6, liArrayCounter)
            
        Else
            Exit For
        End If
    Next liArrayCounter
        
Next liSheetCounter


If liBOMCounter = 0 Then

    MsgBox "All the Production and Inspection Sheets are empty" & vbCrLf & vbCrLf & "Sheets Cannot be Created"
    GoTo FAILURE
    
End If

'--- Check if the Total BOM Sheet Exists, if not create it from TB Template
If WorkSheetExists("Total BOM") = False Then

    If WorkSheetExists("TB") = True Then

        'Set the worksheet to TB
        Set losheet = ActiveWorkbook.Sheets("TB")
        
        losheet.Visible = xlSheetVisible
        
        'Copy the sheet after the active sheet
        losheet.Copy After:=ActiveWorkbook.Sheets("Settings")
        
        'set the copied sheet as the active sheet
        ActiveSheet.Name = "Total BOM"
        
        ActiveSheet.Unprotect (SheetPassword)
        
        losheet.Visible = xlSheetHidden
        
    Else
        
        'Show message and go to failure point
        MsgBox "The Total BOM { TB } Template is Missing" & vbCrLf & vbCrLf & "Total BOM Sheet cannot be created"
        
        GoTo FAILURE
        
    End If

End If

'--- Check if the Cutting Tracking Sheet Exists, if not create it from CT Template
If WorkSheetExists("Cutting Tracking") = False Then

    If WorkSheetExists("CT") = True Then

        'Set the worksheet to CT
        Set losheet = ActiveWorkbook.Sheets("CT")
        
        losheet.Visible = xlSheetVisible
        
        'Copy the sheet after the active sheet
        losheet.Copy After:=ActiveWorkbook.Sheets("Total BOM")
        
        'set the copied sheet as the active sheet
        ActiveSheet.Name = "Cutting Tracking"
        
        ActiveSheet.Unprotect (SheetPassword)
        
        losheet.Visible = xlSheetHidden
        
    Else
        'Show message and go to failure point
        MsgBox "The Cutting Tracking { CT } Template is Missing" & vbCrLf & vbCrLf & "Cutting Tracking Sheet cannot be created"
        
        GoTo FAILURE
        
    End If

End If

'--- Check if the Input Calculator Sheet Exists, if not create it from IC Template
If WorkSheetExists("Input Calculator") = False Then

    If WorkSheetExists("IC") = True Then

        'Set the worksheet to IC
        Set losheet = ActiveWorkbook.Sheets("IC")
        
        losheet.Visible = xlSheetVisible
        
        'Copy the sheet after the active sheet
        losheet.Copy Before:=ActiveWorkbook.Sheets("Output Calculator")
        
        'set the copied sheet as the active sheet
        ActiveSheet.Name = "Input Calculator"
        
        ActiveSheet.Unprotect (SheetPassword)
        
        losheet.Visible = xlSheetHidden
        
    Else
        
        'Show message and go to failure point
        MsgBox "The Input Calculator { IC } Template is Missing" & vbCrLf & vbCrLf & "Total BOM Sheet cannot be created"
        
        GoTo FAILURE
        
    End If

End If
'Transpose the array list
lvFinalArray = Application.Transpose(lvBOMArray)

'Clear any entry in Total Bom Sheet
Worksheets("Total BOM").Range("A5:K5000").Clear

'Assign the contents of the array to the Total BOM sheet from cell A5
Worksheets("Total BOM").[A5].Resize(liBOMCounter, 11) = lvFinalArray

'Set the Border
lss = "A5:K" & liBOMCounter + 4
Worksheets("Total BOM").Range(lss).Borders.LineStyle = xlContinuous


''Fix the IFU Links
For liArrayCounter = 1 To liBOMCounter
    'Check if the Material Number is not blank
    If Len(Trim(lvBOMArray(5, liArrayCounter))) > 0 Then
    
        'If Hyperlink Exists for the material
        If loHyperLinks.exists(lvBOMArray(5, liArrayCounter)) Then

            ls = "K" & (4 + liArrayCounter)

            ls2 = loHyperLinks(lvBOMArray(5, liArrayCounter))

            If Left(ls2, 10) = "HYPERLINK:" Then

                ls2 = "C" & Mid(ls2, 11)
                Worksheets("Total BOM").Range(ls).Hyperlinks.Add Worksheets("Total BOM").Range(ls), Worksheets("Master List").Range(ls2).Hyperlinks(1).Address, , , Worksheets("Master List").Range(ls2).Text
            
            Else
                
                ls2 = "C" & ls2
                Worksheets("Total BOM").Range(ls) = Worksheets("Master List").Range(ls2)
            
            End If

        End If

    End If

Next liArrayCounter


'Fix the IFUs in Individual PI Sheets
For liSheetCounter = 1 To UBound(lvSheetNames)

    'Set the Worksheet
    Set loWorkSheet = Worksheets(lvSheetNames(liSheetCounter))
    
     'Set the Range
    Set loRange = loWorkSheet.Range("PI_Data")
    
    'Assign to the Array
    lvTempArray() = loRange
      
    'Convert from vertical to horizontal array list
    lvFinalArray = Application.Transpose(lvTempArray)
    
    For liArrayCounter = 1 To UBound(lvFinalArray, 2)

        If Len(Trim(lvFinalArray(2, liArrayCounter))) > 0 Then
    
            If loHyperLinks.exists(lvFinalArray(2, liArrayCounter)) Then
    
                ls = "H" & (4 + liArrayCounter)
    
                ls2 = loHyperLinks(lvFinalArray(2, liArrayCounter))
    
                If Left(ls2, 10) = "HYPERLINK:" Then
    
                    ls2 = "C" & Mid(ls2, 11)
                    loWorkSheet.Range(ls).Hyperlinks.Add loWorkSheet.Range(ls), Worksheets("Master List").Range(ls2).Hyperlinks(1).Address, , , Worksheets("Master List").Range(ls2).Text
                
                Else
                    
                    ls2 = "C" & ls2
                    loWorkSheet.Range(ls) = Worksheets("Master List").Range(ls2)
                
                End If
    
            End If
    
        End If

    Next liArrayCounter

    
Next liSheetCounter



'Create the Cutting Tracking Sheet from loChannels
'Create an array only with the Channel type

ReDim lvCuttingArray(1 To 15, 1 To 1)

Set loHeader = CreateObject("Scripting.Dictionary")


'Sort the item designations
Call SingleSorting(lvItemDesignation)

'Set the Item Designation Number differently so that descending sort returns them ascending; This is required for BOMSort Below
For liArrayCounter = 1 To UBound(lvItemDesignation)
    
    If loItemDesignation.exists(lvItemDesignation(liArrayCounter)) = False Then
        loItemDesignation.Add lvItemDesignation(liArrayCounter), (9999 - liArrayCounter)
    End If
    
Next liArrayCounter

For liArrayCounter = 1 To liBOMCounter

    If loChannels.exists(lvBOMArray(5, liArrayCounter)) = True Then
    
        liCuttingCounter = liCuttingCounter + 1
        
        ReDim Preserve lvCuttingArray(1 To 15, 1 To liCuttingCounter)
        'Item Designation
        lvCuttingArray(1, liCuttingCounter) = lvBOMArray(2, liArrayCounter)
        
        'Position
        lvCuttingArray(2, liCuttingCounter) = lvBOMArray(3, liArrayCounter)
        
        'Material #
        lvCuttingArray(3, liCuttingCounter) = lvBOMArray(5, liArrayCounter)
        
        'Material Description
        lvCuttingArray(4, liCuttingCounter) = lvBOMArray(6, liArrayCounter)
        
        'Cutting Type
        lvCuttingArray(5, liCuttingCounter) = lvBOMArray(9, liArrayCounter) 'lvCuttingTypeArray(liArrayCounter)
        
        'Total Quantity
        lvCuttingArray(6, liCuttingCounter) = lvBOMArray(10, liArrayCounter)
        
        'Length
        lvCuttingArray(7, liCuttingCounter) = lvBOMArray(8, liArrayCounter) '* 1000
        
         'Sorting # for item designation
        lvCuttingArray(8, liCuttingCounter) = loItemDesignation(lvBOMArray(1, liArrayCounter))
    
        
        'Check if the header row is unique else add a header row
        lsHeader = Right("000000000000" & lvBOMArray(8, liArrayCounter), 12) & Right("000000000000" & lvBOMArray(5, liArrayCounter), 12)
        
        If loHeader.exists(lsHeader) = False Then
        
            liCounter = liCounter + 1
            
            loHeader.Add lsHeader, liCounter
            
            liCuttingCounter = liCuttingCounter + 1
            
            ReDim Preserve lvCuttingArray(1 To 15, 1 To liCuttingCounter)
            'Item Designation
            lvCuttingArray(1, liCuttingCounter) = ""
            
            'Position
            lvCuttingArray(2, liCuttingCounter) = ""
            
            'Material #
            lvCuttingArray(3, liCuttingCounter) = lvBOMArray(5, liArrayCounter)
            
            'Material Description
            lvCuttingArray(4, liCuttingCounter) = lvBOMArray(6, liArrayCounter)
            
            'Cutting Type
            lvCuttingArray(5, liCuttingCounter) = lvBOMArray(9, liArrayCounter) 'lvCuttingTypeArray(liArrayCounter)
            
            'Total Quantity
            lvCuttingArray(6, liCuttingCounter) = ""
            
            'Length
            lvCuttingArray(7, liCuttingCounter) = lvBOMArray(8, liArrayCounter) '* 1000 removed as Total BOM also is in mm now 20/Mar/2019
            
             'Sorting # for item designation
            lvCuttingArray(8, liCuttingCounter) = "9999"
            
        End If
        
    End If

Next liArrayCounter


'Sort the array
If BOMSorting(lvCuttingArray) = False Then

    MsgBox "Error! Please close and open the workbook and try again."
    GoTo FAILURE
    
End If


'Process the lvcutting array and make Summary Rows and Detailed Rows
For liArrayCounter = UBound(lvCuttingArray, 2) To 1 Step -1
    
    'Detailed rows will not have 9999
    If lvCuttingArray(8, liArrayCounter) <> "9999" Then
       
        'Add to the Material Totals
        llTotal = llTotal + lvCuttingArray(6, liArrayCounter)
        
        'Blank the detailed rows; Details shown only in the header rows
        lvCuttingArray(3, liArrayCounter) = ""
        lvCuttingArray(4, liArrayCounter) = ""
        lvCuttingArray(5, liArrayCounter) = ""
        lvCuttingArray(7, liArrayCounter) = ""
        
    Else 'Summary Row will have 9999; Assign Totals and do not clear the details
        lvCuttingArray(6, liArrayCounter) = llTotal

        llTotal = 0
    End If

Next liArrayCounter


'Convert from vertical to horizontal array list
lvTransposedArray = Application.Transpose(lvCuttingArray)

'Clear any entry in Cutting Tracking Sheet
Worksheets("Cutting Tracking").Range("A8:O5000").Clear

'Assign the contents of the array to the Cutting Tracking sheet from cell A8
Worksheets("Cutting Tracking").[A8].Resize(UBound(lvCuttingArray, 2), 7) = lvTransposedArray

lss = "A8:M" & UBound(lvCuttingArray, 2) + 8
Worksheets("Cutting Tracking").Range(lss).Borders.LineStyle = xlContinuous
Worksheets("Cutting Tracking").Range(lss).HorizontalAlignment = xlCenter
Worksheets("Cutting Tracking").Range(lss).VerticalAlignment = xlCenter


For liArrayCounter = 1 To UBound(lvCuttingArray, 2)

    If lvCuttingArray(1, liArrayCounter) = "" Then
        'Row number is array number + 7 fixed rows
        liSummaryRow = 7 + liArrayCounter
        lss = "C" & liSummaryRow & ":G" & liSummaryRow
        Worksheets("Cutting Tracking").Range(lss).Font.Bold = True
        Worksheets("Cutting Tracking").Range(lss).Interior.Color = RGB(255, 200, 100)

    End If

Next liArrayCounter

With Worksheets("Cutting Tracking").Range(lss).Interior
    .Pattern = xlSolid
End With


'*********************  CREATING INPUT CALCULATOR SHEET ****************************

'Collect the data for
'1.  Material Number
'2.  Material Description
'3.  Type (Not filled by the program, leave blank)
'4.  Size (Not filled by the program, leave blank)
'5.  Extra (Not filled by the program, leave blank)
'6.  Material / Coating (Not filled by the program, leave blank)
'7.  Cutting Type
'8.  Nominal Length (mm)
'9.  Qty(pcs)
'10. Deviating Tolerance (|fffd|mm) (Not filled by the program, leave blank)
'11. Hilti Std.Tolerance (Not filled by the program, leave blank)

ReDim lvInputCalculator(1 To 11, 1 To 1)
liCuttingCounter = 0
For liArrayCounter = 1 To UBound(lvCuttingArray, 2)

    If lvCuttingArray(1, liArrayCounter) = "" Then
    
        liCuttingCounter = liCuttingCounter + 1
        
        ReDim Preserve lvInputCalculator(1 To 11, 1 To liCuttingCounter)
        
        'Material Number
        lvInputCalculator(1, liCuttingCounter) = lvCuttingArray(3, liArrayCounter)
        
        ' Material Description
        lvInputCalculator(2, liCuttingCounter) = lvCuttingArray(4, liArrayCounter)
        
        ' Cutting Type
        lvInputCalculator(7, liCuttingCounter) = lvCuttingArray(5, liArrayCounter)
        
        ' Nominal Length (mm)
        lvInputCalculator(8, liCuttingCounter) = lvCuttingArray(7, liArrayCounter)
        
        ' Qty(pcs)
        lvInputCalculator(9, liCuttingCounter) = lvCuttingArray(6, liArrayCounter)

    End If

Next liArrayCounter

'Clear the Array before storing the transposed array
Erase lvTransposedArray

'transpose the array to assign the array to a range
lvTransposedArray = Application.Transpose(lvInputCalculator)

'Clear any entry in Input Calculator Sheet
Worksheets("Input Calculator").Range("A2:K5000").Clear

'Assign the contents of the array to the Input Calculator sheet from cell A2
Worksheets("Input Calculator").[A2].Resize(liCuttingCounter, 11) = lvTransposedArray

'Set the Border
lss = "A2:K" & liCuttingCounter + 1
Worksheets("Input Calculator").Range(lss).Borders.LineStyle = xlContinuous


'Success Message
MsgBox "Total BOM, Cutting Tracking and Input Calculator Sheets have been created successfully"


Application.ScreenUpdating = True

'Set the settings sheet as the active sheet
ActiveWorkbook.Sheets("Settings").Activate


'All Good.  Exit the function.
Exit Sub

FAILURE:

'Set the settings sheet as the active sheet
ActiveWorkbook.Sheets("Settings").Activate

Application.ScreenUpdating = True

Exit Sub

ErrorHandler:

'Call Error Message
Call DisplayError(Err)

'Clear the error object
Err.Clear

End Sub
Sub CreateWork_Preparation()
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : CreateWork_Preparation
'DEVELOPER'S NAME  : JS
'DATE OF CREATION  : 01-March-2019
'VERSION           : 1.0
'DESCRIPTION       : Create Work Preparation from BOM Sheet and Output Calculator
'
'------------------------------------------------------------------------------------------

On Error GoTo ErrorHandler

Dim liChannelCounter        As Integer
Dim liExistingNum           As Integer
Dim liIncrement             As Integer
Dim liLastRow               As Integer
Dim liNotFoundinBOM         As Integer
Dim liNotFoundInBOMLoc      As Integer
Dim liUniqueChannel         As Integer
Dim liUniqueMaterial        As Integer

Dim llArrayCounter          As Long

Dim loItemTypes             As Object
Dim loMasterAll             As Object
Dim loMaterial              As Object
Dim loUniqueChannelBOM      As Object
Dim loUniqueWork            As Object

Dim loRange         As Range
Dim Search          As Range
Dim SearchRange     As Range
Dim Source          As Range

Dim lsTempRange     As String
Dim lsRange         As String

Dim lvaNonChannelTrans()    As Variant
Dim lvaWorkPreparation()    As Variant
Dim lvBOMArray()            As Variant
Dim lvChannelArray()        As Variant
Dim lvFinalArray()          As Variant
Dim lvMasterAll()           As Variant
Dim lvNotFoundinBOM()       As Variant
Dim lvTempArray()           As Variant
Dim myArray()               As Variant
Dim lvIFUArray()              As Variant

Dim losheet         As Worksheet
Dim loWorkSheet     As Worksheet


'-------------------------------------

'Worksheet Integrity Check
If CheckStructure = False Then Exit Sub

'Check if Total BOM sheet is there
If WorkSheetExists("Total BOM") = False Then
    MsgBox "The Total BOM Sheet is Missing!" & vbCrLf & vbCrLf & "Please complete Step 2 before using Step 3"
    GoTo FAILURE
End If

'Check if Total BOM sheet is there
If WorkSheetExists("Cutting Tracking") = False Then
    MsgBox "The Cutting Tracking Sheet is Missing!" & vbCrLf & vbCrLf & "Please complete Step 2 before using Step 3"
    GoTo FAILURE
End If

'Check if Total BOM sheet is there
If WorkSheetExists("Input Calculator") = False Then
    MsgBox "The Input Calculator Sheet is Missing!" & vbCrLf & vbCrLf & "Please complete Step 2 before using Step 3"
    GoTo FAILURE
End If

'Set it to failure value
llArrayCounter = 0

'Read all Master Sheet Details
llArrayCounter = GetMasterArray(loMasterAll, lvMasterAll)

'Check the success of Master Array
If llArrayCounter = -1 Then
    MsgBox "Master List Sheet is Missing!" & vbCrLf & vbCrLf & "Sheets Cannot be Created"
    GoTo FAILURE
ElseIf llArrayCounter = 0 Then
    MsgBox "Master List is empty!" & vbCrLf & vbCrLf & "Sheets Cannot be Created"
    GoTo FAILURE
End If

'Set it to failure value
llArrayCounter = 0

'Read the PI_Table for the PI Sheets (for Delivery Release Sheet)
llArrayCounter = GetTableInfoFromSettings(myArray)

'If Table in Settings Sheet has issues, show message and exit
If llArrayCounter = -1 Then
    MsgBox "Please enter the Production & Inspection Sheet details" & vbCrLf & vbCrLf & "The PI Sheet details must be entered in the table"
    GoTo FAILURE
ElseIf llArrayCounter = 0 Then
    MsgBox "Error! Please close and open the workbook and try again."
    GoTo FAILURE
End If


'Set the Worksheet
Set loWorkSheet = Worksheets("Total BOM")

'Set the Range
Set loRange = loWorkSheet.Range("$A$5:$K$4098")

'Assign to the Array
lvTempArray() = loRange
      
'Convert from vertical to horizontal array list
lvBOMArray = Application.Transpose(lvTempArray)

'Erase the temp array
Erase lvTempArray

'This dictionary object holds all the unique entries from Total BOM sheet
Set loUniqueWork = CreateObject("Scripting.Dictionary")
Set loUniqueChannelBOM = CreateObject("Scripting.Dictionary")

'Loop through the items in the lvFinalarray (BOM items),
For llArrayCounter = LBound(lvBOMArray, 2) To UBound(lvBOMArray, 2)

    'First array element is the name of the item, which cannot be blank
    If Len(Trim(lvBOMArray(1, llArrayCounter))) > 0 Then
        
        'Check if this item is present in the Master Array
        If loMasterAll.exists(lvBOMArray(5, llArrayCounter)) = True Then
            
            'Channel Type come from calculator, so do not add that to the list, all non-channel types are added to the array from BOM Sheet
            If UCase(Trim(lvMasterAll(4, loMasterAll(lvBOMArray(5, llArrayCounter))))) <> "CHANNEL" Then
            
                If loUniqueWork.exists(lvBOMArray(5, llArrayCounter)) = True Then
                    
                    liExistingNum = CInt(loUniqueWork(lvBOMArray(5, llArrayCounter)))
                    
                    lvaWorkPreparation(4, liExistingNum) = lvaWorkPreparation(4, liExistingNum) + lvBOMArray(10, llArrayCounter)
                    

                Else
                    liUniqueMaterial = liUniqueMaterial + 1
                    
                    loUniqueWork.Add (lvBOMArray(5, llArrayCounter)), liUniqueMaterial
                    
                    ReDim Preserve lvaWorkPreparation(1 To 5, 1 To liUniqueMaterial)
                    'Material #
                    lvaWorkPreparation(1, liUniqueMaterial) = lvBOMArray(5, llArrayCounter)
                    'Material Description
                    lvaWorkPreparation(2, liUniqueMaterial) = lvBOMArray(6, llArrayCounter)
                    'Item Type
                    lvaWorkPreparation(3, liUniqueMaterial) = lvMasterAll(4, loMasterAll(lvBOMArray(5, llArrayCounter)))
                    'Qty
                    lvaWorkPreparation(4, liUniqueMaterial) = lvBOMArray(10, llArrayCounter)
                    
                    lvaWorkPreparation(5, liUniqueMaterial) = ""
                End If
            Else 'Channel Type add to the BOM Channels Dictionary
            
                If loUniqueChannelBOM.exists(lvBOMArray(5, llArrayCounter)) = False Then
                    liUniqueChannel = liUniqueChannel + 1
                    loUniqueChannelBOM.Add (lvBOMArray(5, llArrayCounter)), liUniqueChannel
                End If

            End If
        End If
    Else
        
        Exit For
    End If
Next llArrayCounter

If liUniqueChannel = 0 And liUniqueMaterial = 0 Then
    MsgBox "The Total BOM Sheet is either empty or not proper.  Please Check."
    GoTo FAILURE
End If

Erase lvFinalArray

'----------------------------------------------------------------
' Read Output Calculator for Channel type items
Set loWorkSheet = Nothing
Set loWorkSheet = Worksheets("Output Calculator")
Set SearchRange = loWorkSheet.Range("A2:F20")
Set Source = SearchRange(1, 1)

lsRange = ""

For Each Source In SearchRange
    If UCase(Source.Value) = "SAP NO." Then
       lsRange = Chr(64 + Source.Column) & (Source.Row + 1) & ":" & Chr(64 + Source.Column + 1) & (Source.Row + 1000)
        Exit For
    End If
Next Source

If lsRange = "" Then
    MsgBox "The Output Calculator Sheet is not proper!" & vbCrLf & vbCrLf & "Work Preparation and Delivery Release Sheets Cannot be Created"
    GoTo FAILURE
End If

'Assign to the Array
lvTempArray() = loWorkSheet.Range(lsRange)

'Loop through the items in the lvFinalarray (BOM items),
For llArrayCounter = LBound(lvTempArray, 1) To UBound(lvTempArray, 1)

        If lvTempArray(llArrayCounter, 1) <> "" Then
        
            If loUniqueChannelBOM.exists(lvTempArray(llArrayCounter, 1)) = True Then
        
                liUniqueMaterial = liUniqueMaterial + 1
                            
                ReDim Preserve lvaWorkPreparation(1 To 5, 1 To liUniqueMaterial)
                
                lvaWorkPreparation(1, liUniqueMaterial) = lvTempArray(llArrayCounter, 1)
                
                lvaWorkPreparation(2, liUniqueMaterial) = lvMasterAll(2, loMasterAll(lvTempArray(llArrayCounter, 1)))
                
                lvaWorkPreparation(3, liUniqueMaterial) = lvMasterAll(4, loMasterAll(lvTempArray(llArrayCounter, 1)))
                
                lvaWorkPreparation(4, liUniqueMaterial) = lvTempArray(llArrayCounter, 2)
                
                lvaWorkPreparation(5, liUniqueMaterial) = lvTempArray(llArrayCounter, 2) * lvMasterAll(5, loMasterAll(lvTempArray(llArrayCounter, 1)))
            Else
                liNotFoundinBOM = liNotFoundinBOM + 1
                            
                ReDim Preserve lvNotFoundinBOM(1 To 5, 1 To liNotFoundinBOM)
                
                lvNotFoundinBOM(1, liNotFoundinBOM) = lvTempArray(llArrayCounter, 1)
                
                lvNotFoundinBOM(2, liNotFoundinBOM) = lvMasterAll(2, loMasterAll(lvTempArray(llArrayCounter, 1)))
                
                lvNotFoundinBOM(3, liNotFoundinBOM) = lvMasterAll(4, loMasterAll(lvTempArray(llArrayCounter, 1)))
                
                lvNotFoundinBOM(4, liNotFoundinBOM) = lvTempArray(llArrayCounter, 2)
                
                lvNotFoundinBOM(5, liNotFoundinBOM) = lvTempArray(llArrayCounter, 2) * lvMasterAll(5, loMasterAll(lvTempArray(llArrayCounter, 1)))
            
            
            End If
        
        
        Else
            Exit For
        End If
        

Next llArrayCounter


'Add to the end
If liNotFoundinBOM > 0 Then
    
        liUniqueMaterial = liUniqueMaterial + 1
        
        liNotFoundInBOMLoc = liUniqueMaterial + 6
                                    
        ReDim Preserve lvaWorkPreparation(1 To 5, 1 To liUniqueMaterial)
        
        lvaWorkPreparation(1, liUniqueMaterial) = "NOT IN ORIGINAL BOM, BUT RESULT OF THE CALCULATOR"
        
    
    For llArrayCounter = 1 To liNotFoundinBOM
    
        liUniqueMaterial = liUniqueMaterial + 1
                                    
        ReDim Preserve lvaWorkPreparation(1 To 5, 1 To liUniqueMaterial)
        
        lvaWorkPreparation(1, liUniqueMaterial) = lvNotFoundinBOM(1, llArrayCounter)
        
        lvaWorkPreparation(2, liUniqueMaterial) = lvNotFoundinBOM(2, llArrayCounter)
        
        lvaWorkPreparation(3, liUniqueMaterial) = lvNotFoundinBOM(3, llArrayCounter)
        
        lvaWorkPreparation(4, liUniqueMaterial) = lvNotFoundinBOM(4, llArrayCounter)
        
        lvaWorkPreparation(5, liUniqueMaterial) = lvNotFoundinBOM(5, llArrayCounter)
        
    Next llArrayCounter


End If


'Set the screen update to false to avoid screen blinking
Application.ScreenUpdating = False

'If "Work Preparation" Sheet not found, copy from the template
If WorkSheetExists("Work Preparation") = False Then

    If WorkSheetExists("WP") = True Then
    
        'Set the worksheet to PI
        Set losheet = ActiveWorkbook.Sheets("WP")
        
        losheet.Visible = xlSheetVisible
        
        'Copy the sheet after the active sheet
        losheet.Copy After:=ActiveWorkbook.Sheets("Cutting Tracking")
        
        'set the copied sheet as the active sheet
        ActiveSheet.Name = "Work Preparation"
        
        ActiveSheet.Unprotect (SheetPassword)
        
        losheet.Visible = xlSheetHidden
        
        If liUniqueMaterial < 25 Then
            lsRange = "A8:K35"
            liLastRow = 35
        Else
            lsRange = "A8:K" & (liUniqueMaterial + 6)
            liLastRow = liUniqueMaterial + 6
        End If
        
        ActiveSheet.Range("A7:K7").Select
        Selection.Copy
        ActiveSheet.Range(lsRange).Select
        ActiveSheet.Paste
        ActiveSheet.Range("A7").Select
        
        lsRange = "A" & (liLastRow + 3)
        
        Worksheets("Work Preparation").Range(lsRange).Font.Bold = True
        Worksheets("Work Preparation").Range(lsRange) = "Operator: "
        
        lsRange = "B" & (liLastRow + 3)
        Worksheets("Work Preparation").Range(lsRange) = "______________________________________"

    Else
        MsgBox "The Work Preparation { WP } Template is Missing" & vbCrLf & vbCrLf & "Work Preparation Sheet cannot be created"
        GoTo FAILURE
    End If

End If
'-------------------------------------------------------------------------------------

'Transpose the array list
lvaNonChannelTrans = Application.Transpose(lvaWorkPreparation)

'Assign the contents of the array to the Total BOM sheet from cell A9
Worksheets("Work Preparation").[A7].Resize(liUniqueMaterial, 5) = lvaNonChannelTrans


lsRange = "A" & liNotFoundInBOMLoc & ":E" & liNotFoundInBOMLoc
Worksheets("Work Preparation").Range(lsRange).Font.Color = vbRed
Worksheets("Work Preparation").Range(lsRange).Font.Bold = True
Worksheets("Work Preparation").Range(lsRange).Merge


'Creation of Delivery Release

If WorkSheetExists("Delivery Release") = False Then

    If WorkSheetExists("DR") = True Then
    
        'Set the worksheet to PI
        Set losheet = ActiveWorkbook.Sheets("DR")
        
        losheet.Visible = xlSheetVisible
        
        'Copy the sheet after the active sheet
        losheet.Copy After:=ActiveWorkbook.Sheets("Work Preparation")
        
        'set the copied sheet as the active sheet
        ActiveSheet.Name = "Delivery Release"
        
        ActiveSheet.Unprotect (SheetPassword)
        
        losheet.Visible = xlSheetHidden
        
        
    Else
        MsgBox "The Delivery Release { DR } Template is Missing" & vbCrLf & vbCrLf & "Delivery Release Sheet cannot be created"
        GoTo FAILURE
    End If

End If


'Set the worksheet to PI
Set losheet = ActiveWorkbook.Sheets("Delivery Release")

'Clear the Cells
losheet.Range("A5:G40") = ""

liIncrement = 4

'Entering the values in the left table
For llArrayCounter = 1 To UBound(myArray, 2)
    
    'Check if the P & I Item Number is not blank
    If Len(Trim(myArray(2, llArrayCounter))) > 0 Then
    
       liIncrement = liIncrement + 1
       
       lsRange = "A" & liIncrement
       losheet.Range(lsRange) = myArray(2, llArrayCounter)
      
        lsRange = "C" & liIncrement
        losheet.Range(lsRange) = myArray(3, llArrayCounter)
        
        lsRange = "E" & liIncrement
        losheet.Range(lsRange) = myArray(5, llArrayCounter)
        
    End If
    
Next llArrayCounter

'Erase the array to be used in BOM Links
Erase myArray

'Set the IFUs from BOM
'Clear the Cells
If GetBOMLinks(lvIFUArray) = -1 Then
    
    For llArrayCounter = 5 To 40
    
        losheet.Range("I" & llArrayCounter).Hyperlinks.Delete
        losheet.Range("I" & llArrayCounter) = ""
        losheet.Range("I" & llArrayCounter & ":L" & llArrayCounter).Borders.LineStyle = xlContinuous
    
    Next llArrayCounter
    
    
    For llArrayCounter = 1 To UBound(lvIFUArray, 2)
        
        lsTempRange = "I" & llArrayCounter + 4
        losheet.Range(lsTempRange).Hyperlinks.Add losheet.Range(lsTempRange), Worksheets("Total BOM").Range(lvIFUArray(1, llArrayCounter)).Hyperlinks(1).Address, , , Worksheets("Total BOM").Range(lvIFUArray(1, llArrayCounter)).Text & " (" & lvIFUArray(2, llArrayCounter) & ")"
    
        
    Next llArrayCounter
    
End If

'Show success message
MsgBox "Work Preparation and Delivery Release Sheets have been created successfully"

'Reset the screen updating back
Application.ScreenUpdating = True

'Set the settings sheet as the active sheet
ActiveWorkbook.Sheets("Settings").Activate


'All good, exit the routine
Exit Sub

FAILURE:

'Set the settings sheet as the active sheet
ActiveWorkbook.Sheets("Settings").Activate

'Set the screen updating back to True
Application.ScreenUpdating = True

Exit Sub

ErrorHandler:

'Turn on ScreenUpdating
Application.ScreenUpdating = True

'Call Error Message
Call DisplayError(Err)

'Clear the error object
Err.Clear


End Sub
'Sub CreateDeliveryReleaseSheet()
''------------------------------------------------------------------------------------------
''PROCEDURE NAME    : CreateDeliveryReleaseSheet
''DEVELOPER'S NAME  : Jagannathan Srinivasamurthy
''DATE OF CREATION  : 14-Feb-2019
''VERSION           : 1.0
''DESCRIPTION       : Create Delivery Release Sheet from Setting Sheet and BOM
''
''------------------------------------------------------------------------------------------
'On Error GoTo ErrorHandler
'
'Dim myArray() As Variant
'Dim liCounter As Long
'Dim lsSheetName As String
'Dim loSheet As Worksheet
'Dim lvDeliveryRelease() As Variant
'Dim liIncrement As Integer
'Dim lsRange As String
'
''----------------------------
'Application.ScreenUpdating = False
'
'If WorkSheetExists("Delivery Release") = False Then
'
'    If WorkSheetExists("DR") = True Then
'
'        'Set the worksheet to PI
'        Set loSheet = ActiveWorkbook.Sheets("DR")
'
'        loSheet.Visible = xlSheetVisible
'
'        'Copy the sheet after the active sheet
'        loSheet.Copy After:=ActiveWorkbook.Sheets("Work Preparation")
'
'        'set the copied sheet as the active sheet
'        ActiveSheet.Name = "Delivery Release"
'
'        ActiveSheet.Unprotect (SheetPassword)
'
'        loSheet.Visible = xlSheetHidden
'
'
'    Else
'        MsgBox "Delivery Release { DR } Template is Missing" & vbCrLf & vbCrLf & "Delivery Release Sheet cannot be created"
'
'        'Set the settings sheet as the active sheet
'        ActiveWorkbook.Sheets("Settings").Activate
'
'        Application.ScreenUpdating = True
'
'        Exit Sub
'    End If
'
'End If
'
'
'
''Read the PI_Table for the PI Sheets
'If GetTableInfoFromSettings(myArray) = False Then
'    Exit Sub
'End If
'
''Set the worksheet to PI
'Set loSheet = ActiveWorkbook.Sheets("Delivery Release")
'
''Clear the Cells
'loSheet.Range("A5:G30") = ""
'
'liIncrement = 4
'
'' Loop through all the pages and if not exists, create them
'For liCounter = 1 To UBound(myArray, 2)
'
'    'Check if the P & I Item Number is not blank
'    If Len(Trim(myArray(2, liCounter))) > 0 Then
'
'       liIncrement = liIncrement + 1
'
'       lsRange = "A" & liIncrement
'       loSheet.Range(lsRange) = myArray(2, liCounter)
'
'        lsRange = "C" & liIncrement
'        loSheet.Range(lsRange) = myArray(3, liCounter)
'
'        lsRange = "E" & liIncrement
'        loSheet.Range(lsRange) = myArray(5, liCounter)
'
'    End If
'
'Next liCounter
'
'Erase myArray
'
'
''Set the IFUs from BOM
''Clear the Cells
'loSheet.Range("H5:K30") = ""
'
'Call GetBOMLinks(myArray)
'
'loSheet.Range("I5:K30") = myArray
'
'
''Set the settings sheet as the active sheet
'ActiveWorkbook.Sheets("Settings").Activate
'
''Set the Screen Updating
'Application.ScreenUpdating = True
'
''All good. Exit
'Exit Sub
'
'ErrorHandler:
'
''Set the Screen Updating
'Application.ScreenUpdating = True
'
''Call Error Message
'Call DisplayError(Err)
'
''Clear the error object
'Err.Clear
'
'End Sub
'''Function CreateSheetNames(pvSheetNames As Variant) As Integer
''''------------------------------------------------------------------------------------------
''''   PROCEDURE NAME    : CreateSheetNames
''''   DEVELOPER'S NAME  : JS
''''   DATE OF CREATION  : 18-Feb-2019
''''   VERSION           : 1.0
''''   DESCRIPTION       : Reads the settings from the settings sheet using GetTableInfoFromSettings
''''                     : then creates the actual sheet names from the "Item".  Sheetname is PI-X(where x is item)
''''
''''------------------------------------------------------------------------------------------
'''On Error GoTo ErrorHandler
'''
'''Dim lvSettingsArray() As Variant
'''Dim liCounter As Integer
'''
'''
''''Populate the array with the Table! Data from the settings worksheet
'''liCounter = GetTableInfoFromSettings(lvSettingsArray)
'''
'''If liCounter = -1 Then
'''    CreateSheetNames = -1
'''    Exit Function
'''End If
'''
''''loop through all the table entries where item is non-blank, exits the loop at the first blank
'''For liCounter = 1 To UBound(lvSettingsArray, 2)
'''
'''    If Len(Trim(lvSettingsArray(2, liCounter))) > 0 Then
'''        'Redimension the array
'''        ReDim Preserve pvSheetNames(1 To liCounter)
'''        'format the name and assign to the array
'''        pvSheetNames(liCounter) = "PI-" & lvSettingsArray(2, liCounter)
'''    Else
'''        Exit For
'''    End If
'''
'''Next liCounter
'''
'''CreateSheetNames = 1
''''All good, exit the routine
'''Exit Function
'''
'''ErrorHandler:
'''
''''Call Error Message
'''Call DisplayError(Err)
'''
''''Clear the error object
'''Err.Clear
'''
'''CreateSheetNames = 0
'''End Function
Function GetMasterObjects(poHyperlinks As Object, poChannels As Object) As Integer
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : GetMasterObjects
'DEVELOPER'S NAME  : JS
'DATE OF CREATION  : 19-Feb-2019
'VERSION           : 1.0
'DESCRIPTION       : Copy Hyperlinks from another cell
'
'------------------------------------------------------------------------------------------
On Error GoTo ErrorHandler

Dim rngHyperlinks As Range
Dim rngMaterialNumber As Range
Dim rngItemType As Range

Dim wksht As Worksheet
Dim liCounter As Integer

'Create Array List from Table

If WorkSheetExists("Master list") = False Then
    GetMasterObjects = -1
    Exit Function
End If


Set wksht = Worksheets("Master list")
Set rngMaterialNumber = wksht.Range("A2:A5000")
Set rngHyperlinks = wksht.Range("C2:C5000")
Set rngItemType = wksht.Range("D2:D5000")

Set poHyperlinks = CreateObject("Scripting.Dictionary")

Set poChannels = CreateObject("Scripting.Dictionary")



For liCounter = 1 To 4999
    
    If Len(Trim(rngMaterialNumber(liCounter).Value)) > 0 Then
        
        If poHyperlinks.exists(rngMaterialNumber(liCounter).Value) = False Then
            If rngHyperlinks(liCounter).Hyperlinks.Count > 0 Then
                poHyperlinks.Add (rngMaterialNumber(liCounter).Value), "HYPERLINK:" & liCounter + 1
            Else
                poHyperlinks.Add (rngMaterialNumber(liCounter).Value), (liCounter + 1)
            End If
        End If
        
        If UCase(rngItemType(liCounter)) = "CHANNEL" Then
        
            If poChannels.exists(rngMaterialNumber(liCounter).Value) = False Then
            
                poChannels.Add (rngMaterialNumber(liCounter).Value), (liCounter + 1)
                
            End If
        
        End If
    End If
Next liCounter

GetMasterObjects = 1

Exit Function
ErrorHandler:

GetMasterObjects = 0

'Set the Screen Updating
Application.ScreenUpdating = True

'Call Error Message
Call DisplayError(Err)

'Clear the error object
Err.Clear

End Function
Function GetMasterArray(poMaster As Object, poMasterArray() As Variant) As Integer
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : GetMasterArray
'DEVELOPER'S NAME  : JS
'DATE OF CREATION  : 02-Mar-2019
'VERSION           : 1.0
'DESCRIPTION       : Get all the Master Data in an array and poMaster object to get the array index given material number
'
'------------------------------------------------------------------------------------------

On Error GoTo ErrorHandler

Dim loWorkSheet As Worksheet
Dim liCounter As Integer
Dim lvMasterAll() As Variant
Dim liIncrement As Integer


If WorkSheetExists("Master list") = False Then
    GetMasterArray = -1
    Exit Function
End If


Set loWorkSheet = Worksheets("Master list")
lvMasterAll = loWorkSheet.Range("A1:E5000")

Set poMaster = CreateObject("Scripting.Dictionary")

ReDim poMasterArray(1 To 5, 1 To 1)

For liCounter = 2 To 5000
    If Len(Trim(lvMasterAll(liCounter, 1))) > 0 Then
        If poMaster.exists(lvMasterAll(liCounter, 1)) = False Then
        
        
            liIncrement = liIncrement + 1
            
            poMaster.Add lvMasterAll(liCounter, 1), liIncrement
            ReDim Preserve poMasterArray(1 To 5, 1 To liIncrement)
            poMasterArray(1, liIncrement) = lvMasterAll(liCounter, 1)
            poMasterArray(2, liIncrement) = lvMasterAll(liCounter, 2)
            poMasterArray(3, liIncrement) = lvMasterAll(liCounter, 3)
            poMasterArray(4, liIncrement) = lvMasterAll(liCounter, 4)
            poMasterArray(5, liIncrement) = lvMasterAll(liCounter, 5)
            
        End If
    Else
        Exit For
    
    End If

Next liCounter

If liIncrement = 0 Then
GetMasterArray = 0

Else
GetMasterArray = 1

End If


Exit Function
ErrorHandler:

GetMasterArray = 0

'Set the Screen Updating
Application.ScreenUpdating = True

'Call Error Message
Call DisplayError(Err)

'Clear the error object
Err.Clear

End Function

 Function BOMSorting(psaBOM() As Variant, Optional piCustom As Integer, Optional piAsc As Boolean) As Boolean
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : BOMSorting
'DEVELOPER'S NAME  : Jagannathan Srinivasamurthy
'DATE OF CREATION  : 28-Feb-2019
'VERSION           : 1.0
'DESCRIPTION       : Sorting BOM Array Descending by Length, Material Number and then Designation
'
'------------------------------------------------------------------------------------------
On Error GoTo ErrorHandler

Dim liFirst As Integer      'For loop
Dim liSecond As Integer     'For loop
Dim liThird As Integer      'For loop
Dim liOuter As Integer
Dim liInner As Integer
Dim lsTemp As Variant   'For Swapping the string
Dim lsaSort() As String 'Array for sorting
ReDim lsaSort(1 To UBound(psaBOM(), 2))

'Get the number of array elements into an array
liOuter = UBound(psaBOM(), 2)
liInner = UBound(psaBOM(), 1)

If piCustom = 0 Then
    'Making of Array for sorting, concatenate length (format with 0000), material number and then Item Designation
    For liFirst = 1 To liOuter
        lsaSort(liFirst) = Right("000000000000" & psaBOM(7, liFirst), 12) & Right("000000000000" & psaBOM(3, liFirst), 12) & Right("0000" & psaBOM(8, liFirst), 4)
    Next liFirst
ElseIf piCustom = 1 Then
    For liFirst = 1 To liOuter
        lsaSort(liFirst) = psaBOM(2, liFirst)
    Next liFirst
End If

''Sub BubbleSort(list())
'''   Sorts an array using bubble sort algorithm
''    Dim First As Integer, Last As Long
''    Dim i As Long, j As Long
''    Dim Temp As String
''
''    First = LBound(list)
''    Last = UBound(list)
''    For i = First To Last - 1
''        For j = i + 1 To Last
''            If list(i) < list(j) Then
''                Temp = list(j)
''                list(j) = list(i)
''                list(i) = Temp
''            End If
''        Next j
''    Next i
''End Sub


'Sorts the array by Bubble Sort
If piAsc = True Then
    For liFirst = 1 To liOuter - 1
        For liSecond = liFirst + 1 To liOuter
        
            If UCase(lsaSort(liFirst)) > UCase(lsaSort(liSecond)) Then
            
                'Swapping the Array Contents for Array for Sorting
                lsTemp = lsaSort(liSecond)
                lsaSort(liSecond) = lsaSort(liFirst)
                lsaSort(liFirst) = lsTemp
                
                'Actual array Swapping
                For liThird = 1 To liInner
                    lsTemp = psaBOM(liThird, liSecond)
                    psaBOM(liThird, liSecond) = psaBOM(liThird, liFirst)
                    psaBOM(liThird, liFirst) = lsTemp
                Next liThird
            End If
        Next liSecond
    Next liFirst
Else 'Descending Sort
    For liFirst = 1 To liOuter - 1
        For liSecond = liFirst + 1 To liOuter
        
            If UCase(lsaSort(liFirst)) < UCase(lsaSort(liSecond)) Then
            
                'Swapping the Array Contents for Array for Sorting
                lsTemp = lsaSort(liSecond)
                lsaSort(liSecond) = lsaSort(liFirst)
                lsaSort(liFirst) = lsTemp
                
                'Actual array Swapping
                For liThird = 1 To liInner
                    lsTemp = psaBOM(liThird, liSecond)
                    psaBOM(liThird, liSecond) = psaBOM(liThird, liFirst)
                    psaBOM(liThird, liFirst) = lsTemp
                Next liThird
            End If
        Next liSecond
    Next liFirst
End If

'''Sorts the array by Bubble Sort
''For liFirst = 1 To liOuter - 1
''    For liSecond = 1 To liOuter - 1
''        If UCase(lsaSort(liSecond)) >= _
''               UCase(lsaSort(liSecond + 1)) Then
''            GoTo LOOP2
''        Else
''            'Swapping the Array Contents for Array for Sorting
''            lsTemp = lsaSort(liSecond)
''            lsaSort(liSecond) = lsaSort(liSecond + 1)
''            lsaSort(liSecond + 1) = lsTemp
''
''            'Actual array Swapping
''            For liThird = 1 To liInner
''                lsTemp = psaBOM(liThird, liSecond)
''                psaBOM(liThird, liSecond) = _
''                              psaBOM(liThird, liSecond + 1)
''                psaBOM(liThird, liSecond + 1) = lsTemp
''            Next liThird
''
''        End If
''LOOP2:
''    Next liSecond
''Next liFirst


BOMSorting = True
Exit Function

ErrorHandler:
BOMSorting = False

'Call Error Message
Call DisplayError(Err)

'Clear the error object
Err.Clear
End Function

Sub SingleSorting(psaSingleDimensionArray() As Variant)
'********************************************************************************************
'*  PROCEDURE NAME        :  Sorting
'*  DEVELOPER'S NAME      :  S.JAGANNATH
'*  VERSION               :  1.0
'*  DESCRIPTION           :  sorts the data in 4 ways
'*  DATE OF CREATION      :  16th july 1999
'********************************************************************************************

Dim liFirstCounter As Integer      'For loop
Dim liSecondCounter As Integer     'For loop
Dim lsTemporaryStorage As Variant   'For Swapping the string


'Sorts the array by Bubble Sort
For liFirstCounter = 1 To UBound(psaSingleDimensionArray()) - 1
    For liSecondCounter = 1 To UBound(psaSingleDimensionArray()) - 1
        If UCase(psaSingleDimensionArray(liSecondCounter)) <= _
               UCase(psaSingleDimensionArray(liSecondCounter + 1)) Then
            GoTo LOOP2
        Else
            lsTemporaryStorage = psaSingleDimensionArray(liSecondCounter)
            psaSingleDimensionArray(liSecondCounter) = psaSingleDimensionArray(liSecondCounter + 1)
            psaSingleDimensionArray(liSecondCounter + 1) = lsTemporaryStorage
        End If
LOOP2:
    Next liSecondCounter
Next liFirstCounter
End Sub
Function GetBOMLinks(psaBOMLinks() As Variant) As Integer
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : GetBOMLinks
'DEVELOPER'S NAME  : Jagannathan Srinivasamurthy
'DATE OF CREATION  : 02-Mar-2019
'VERSION           : 1.0
'DESCRIPTION       : Get all unique IFU links from BOM Sheet
'
'------------------------------------------------------------------------------------------
On Error GoTo ErrorHandler

Dim lvArray() As Variant
Dim lvMaterial() As Variant

Dim loWorkSheet As Worksheet
Dim loHyperLinks As Object
Dim liCounter As Integer
Dim liIncrement As Integer

'Create Array List from Table
Set loWorkSheet = Worksheets("Total BOM")
lvArray = loWorkSheet.Range("K1:K5000")
lvMaterial = loWorkSheet.Range("A1:A5000")
Set loHyperLinks = CreateObject("Scripting.Dictionary")


For liCounter = 5 To 5000
    
    If liIncrement = 25 Then Exit For
    
    If Len(Trim(lvMaterial(liCounter, 1))) > 0 Then
        If Len(Trim(lvArray(liCounter, 1))) > 0 Then
            If loHyperLinks.exists(lvArray(liCounter, 1)) = False Then
                liIncrement = liIncrement + 1
                loHyperLinks.Add lvArray(liCounter, 1), liIncrement
                ReDim Preserve psaBOMLinks(1 To 2, 1 To liIncrement)
                psaBOMLinks(1, liIncrement) = "K" & liCounter
                psaBOMLinks(2, liIncrement) = 1
            Else
                psaBOMLinks(2, loHyperLinks(lvArray(liCounter, 1))) = psaBOMLinks(2, loHyperLinks(lvArray(liCounter, 1))) + 1
            End If
    
        End If
    Else
        Exit For
    End If
Next liCounter

If liIncrement > 0 Then
    GetBOMLinks = -1
Else
    GetBOMLinks = 0
End If

Exit Function
ErrorHandler:

GetBOMLinks = 0

'Call Error Message
Call DisplayError(Err)

'Clear the error object
Err.Clear

End Function

Public Function CheckStructure() As Boolean
'------------------------------------------------------------------------------------------
'PROCEDURE NAME    : CheckStructure
'DEVELOPER'S NAME  : Jagannathan Srinivasamurthy
'DATE OF CREATION  : 02-Mar-2019
'VERSION           : 1.0
'DESCRIPTION       : Check if the structure of the excel is intact
'
'------------------------------------------------------------------------------------------
On Error GoTo ErrorHandler

Dim lsSheet As String
    
If WorkSheetExists("Settings") = False Then
    lsSheet = "Settings WorkSheet"
    GoTo FAILURE
End If

If WorkSheetExists("PI") = False Then
    lsSheet = "Production & Inspection {PI} Template"
    GoTo FAILURE
End If

If WorkSheetExists("TB") = False Then
    lsSheet = "Total BOM {TB} Template"
    GoTo FAILURE
End If

If WorkSheetExists("CT") = False Then
    lsSheet = "Cutting Tracking {CT} Template"
    GoTo FAILURE
End If

If WorkSheetExists("WP") = False Then
    lsSheet = "Work Preparation {CT} Template"
    GoTo FAILURE
End If

If WorkSheetExists("DR") = False Then
    lsSheet = "Delivery Release {DR} Template"
    GoTo FAILURE
End If

If WorkSheetExists("Master List") = False Then
    lsSheet = "Master List WorkSheet"
    GoTo FAILURE
End If

If WorkSheetExists("IC") = False Then
    lsSheet = "Input Calculator {IC} Template"
    GoTo FAILURE
End If

CheckStructure = True

Exit Function

FAILURE:

MsgBox "The " & lsSheet & " is Missing" & vbCrLf & vbCrLf & "This excel workbook cannot be used"
CheckStructure = False
Exit Function

ErrorHandler:

CheckStructure = False

'Call Error Message
Call DisplayError(Err)

'Clear the error object
Err.Clear

End Function

' InQuest injected base64 decoded content
' "-z`
' y(^z
' x%x8

INQUEST-PP=macro
