Attribute VB_Name = "Api"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'==================
' local constants
'==================
Const STR_CONNECTION_CLOSED = "Connection to TWS is closed"

' data members
Private WithEvents m_Tws As TWSLib.Tws
Attribute m_Tws.VB_VarHelpID = -1
'Attribute m_Tws.VB_VarHelpID = -1
Private m_orderId As Long

'===============
' constructor
'===============
Private Sub Class_Initialize()
    Set m_Tws = New TWSLib.Tws
   
    general.SetDisconnected
End Sub

'===============
' destructor
'===============
Private Sub Class_Terminate()
    Set m_Tws = Nothing
End Sub

Public Property Get Tws() As TWSLib.Tws
    Set Tws = m_Tws
End Property

Public Property Get NextOrderId() As Long
    NextOrderId = m_orderId
    m_orderId = m_orderId + 1
End Property


'=======================================
' TWS Control - Events generated by ActiveX TWS control
'=======================================
' connection closed
Private Sub m_Tws_connectionClosed()
    general.SetDisconnected
End Sub




' error
Private Sub m_Tws_errMsg(ByVal id As Long, ByVal errorCode As Long, ByVal errorMsg As String)
    On Error Resume Next
    If id > ID_CAL_UNDLCONID And id < ID_CAL_UNDLCONID + ID_STEP Then
        mCalendar.ErrorUndlConId id, errorCode, errorMsg
    ElseIf id > ID_STDL_UNDLCONID And id < ID_STDL_UNDLCONID + ID_STEP Then
        mStraddle.ErrorUndlConId id, errorCode, errorMsg
    ElseIf id > ID_WLC_UNDLCONID And id < ID_WLC_UNDLCONID + ID_STEP Then
        mWlCalendar.ErrorUndlConId id, errorCode, errorMsg
    ElseIf id > ID_WLS_UNDLCONID And id < ID_WLS_UNDLCONID + ID_STEP Then
        mWlStraddle.ErrorUndlConId id, errorCode, errorMsg
    End If
    
   
    ' log error message
    log.LogMessage id, errorCode, errorMsg
    
    If errorCode = 504 Then
        ' not connected
        general.SetDisconnected

    End If

End Sub





' next valid Id
Private Sub m_Tws_nextValidId(ByVal id As Long)
    On Error Resume Next
    general.SetConnected
    If id < ORDER_ID_BASE Then
        m_orderId = ORDER_ID_BASE
    Else
        m_orderId = id
    End If
End Sub






Private Sub m_Tws_securityDefinitionOptionParameter(ByVal reqId As Long, ByVal exchange As String, ByVal underlyingConId As Long, ByVal tradingClass As String, ByVal multiplier As String, ByVal expirations As String, ByVal strikes As String)
    On Error Resume Next
    
    If reqId >= ID_CAL_OPCHAINOV And reqId < ID_CAL_OPCHAINOV + ID_STEP Then
        mCalendar.OpChainOverview_updateSecDefOP _
            reqId, _
            exchange, _
            underlyingConId, _
            tradingClass, _
            multiplier, _
            expirations, _
            strikes
    ElseIf reqId >= ID_STDL_OPCHAINOV And reqId < ID_STDL_OPCHAINOV + ID_STEP Then
        mStraddle.OpChainOverview_updateSecDefOP _
            reqId, _
            exchange, _
            underlyingConId, _
            tradingClass, _
            multiplier, _
            expirations, _
            strikes
    ElseIf reqId >= ID_WLC_OPCHAINOV And reqId < ID_WLC_OPCHAINOV + ID_STEP Then
        mWlCalendar.OpChainOverview_updateSecDefOP _
            reqId, _
            exchange, _
            underlyingConId, _
            tradingClass, _
            multiplier, _
            expirations, _
            strikes
    
    ElseIf reqId >= ID_WLS_OPCHAINOV And reqId < ID_WLS_OPCHAINOV + ID_STEP Then
        mWlStraddle.OpChainOverview_updateSecDefOP _
            reqId, _
            exchange, _
            underlyingConId, _
            tradingClass, _
            multiplier, _
            expirations, _
            strikes
    End If
    
End Sub



Private Sub m_Tws_securityDefinitionOptionParameterEnd(ByVal reqId As Long)
    On Error Resume Next
    
    If reqId >= ID_CAL_OPCHAINOV And reqId < ID_CAL_OPCHAINOV + ID_STEP Then
        mCalendar.OpChainOverview_updateSecDefOPEnd reqId
    ElseIf reqId >= ID_STDL_OPCHAINOV And reqId < ID_STDL_OPCHAINOV + ID_STEP Then
        mStraddle.OpChainOverview_updateSecDefOPEnd reqId
    ElseIf reqId >= ID_WLC_OPCHAINOV And reqId < ID_WLC_OPCHAINOV + ID_STEP Then
        mWlCalendar.OpChainOverview_updateSecDefOPEnd reqId
    ElseIf reqId >= ID_WLS_OPCHAINOV And reqId < ID_WLS_OPCHAINOV + ID_STEP Then
        mWlStraddle.OpChainOverview_updateSecDefOPEnd reqId
    End If
    
End Sub



Private Sub m_Tws_tickOptionComputation(ByVal id As Long, ByVal tickType As Long, ByVal impliedVol As Double, ByVal delta As Double, ByVal optPrice As Double, ByVal pvDividend As Double, ByVal gamma As Double, ByVal vega As Double, ByVal theta As Double, ByVal undPrice As Double)
    'update Tickers sheet with new data
    On Error Resume Next
    If id >= ID_WLC_OPSNAPSHOT And id < ID_WLC_OPSNAPSHOT + ID_STEP Then
        mWlCalendar.OpSnapshot_updateOpCalc id, tickType, impliedVol, delta, optPrice, pvDividend, gamma, vega, theta, undPrice
    ElseIf id >= ID_WLS_OPSNAPSHOT And id < ID_WLS_OPSNAPSHOT + ID_STEP Then
        mWlStraddle.OpSnapshot_updateOpCalc id, tickType, impliedVol, delta, optPrice, pvDividend, gamma, vega, theta, undPrice
    End If
End Sub

Private Sub m_Tws_tickPrice(ByVal id As Long, ByVal tickType As Long, ByVal price As Double, ByVal CanAutoExecute As Boolean, ByVal PastLimit As Boolean, ByVal PreOpen As Boolean)
    'update Tickers sheet with new price
    On Error Resume Next
    
    If id >= ID_WLC_OPSNAPSHOT And id < ID_WLC_OPSNAPSHOT + ID_STEP Then
        mWlCalendar.OpSnapshot_updatePrice id, tickType, price, CanAutoExecute, PastLimit, PreOpen
    ElseIf id >= ID_WLC_UNDLSNAPSHOT And id < ID_WLC_UNDLSNAPSHOT + ID_STEP Then
        mWlCalendar.UndlSnapshot_updatePrice id, tickType, price, CanAutoExecute, PastLimit, PreOpen
    ElseIf id >= ID_WLS_OPSNAPSHOT And id < ID_WLS_OPSNAPSHOT + ID_STEP Then
        mWlStraddle.OpSnapshot_updatePrice id, tickType, price, CanAutoExecute, PastLimit, PreOpen
    ElseIf id >= ID_WLS_UNDLSNAPSHOT And id < ID_WLS_UNDLSNAPSHOT + ID_STEP Then
        mWlStraddle.UndlSnapshot_updatePrice id, tickType, price, CanAutoExecute, PastLimit, PreOpen
    End If
End Sub

Private Sub m_Tws_tickSize(ByVal id As Long, ByVal tickType As Long, ByVal size As Long)
    'update Tickers sheet with new size
    On Error Resume Next
    
    If id >= ID_WLC_OPSNAPSHOT And id < ID_WLC_OPSNAPSHOT + ID_STEP Then
        mWlCalendar.OpSnapshot_updateSize id, tickType, size
    ElseIf id >= ID_WLC_UNDLSNAPSHOT And id < ID_WLC_UNDLSNAPSHOT + ID_STEP Then
        mWlCalendar.UndlSnapshot_updateSize id, tickType, size
    ElseIf id >= ID_WLS_OPSNAPSHOT And id < ID_WLS_OPSNAPSHOT + ID_STEP Then
        mWlStraddle.OpSnapshot_updateSize id, tickType, size
    ElseIf id >= ID_WLS_UNDLSNAPSHOT And id < ID_WLS_UNDLSNAPSHOT + ID_STEP Then
        mWlStraddle.UndlSnapshot_updateSize id, tickType, size
    End If
End Sub



Private Sub m_Tws_tickString(ByVal id As Long, ByVal tickType As Long, ByVal value As String)
    'update Tickers sheet with new string
    On Error Resume Next
    
    If id >= ID_WLC_OPSNAPSHOT And id < ID_WLC_OPSNAPSHOT + ID_STEP Then
       mWlCalendar.OpSnapshot_updateString id, tickType, value
    ElseIf id >= ID_WLC_UNDLSNAPSHOT And id < ID_WLC_UNDLSNAPSHOT + ID_STEP Then
        mWlCalendar.UndlSnapshot_updateString id, tickType, value
    ElseIf id >= ID_WLS_OPSNAPSHOT And id < ID_WLS_OPSNAPSHOT + ID_STEP Then
        mWlStraddle.OpSnapshot_updateString id, tickType, value
    ElseIf id >= ID_WLS_UNDLSNAPSHOT And id < ID_WLS_UNDLSNAPSHOT + ID_STEP Then
        mWlStraddle.UndlSnapshot_updateString id, tickType, value
    End If
End Sub





'-----------------------------
' historical data events
'-----------------------------
Private Sub m_Tws_historicalData(ByVal reqId As Long, ByVal histDate As String, ByVal histOpen As Double, ByVal histHigh As Double, ByVal histLow As Double, ByVal histClose As Double, ByVal histVolume As Long, ByVal barCount As Long, ByVal WAP As Double, ByVal hasGaps As Long)
    On Error Resume Next
    
    If reqId >= ID_CAL_OPBARS And reqId < ID_CAL_OPBARS + ID_STEP Then
        mCalendar.OpBars_UpdateHistoricalData reqId, histDate, histOpen, histHigh, histLow, histClose, histVolume, barCount, WAP, hasGaps
    ElseIf reqId >= ID_CAL_UNDLBARS And reqId < ID_CAL_UNDLBARS + ID_STEP Then
        mCalendar.UndlBars_UpdateHistoricalData reqId, histDate, histOpen, histHigh, histLow, histClose, histVolume, barCount, WAP, hasGaps
    ElseIf reqId >= ID_STDL_OPBARS And reqId < ID_STDL_OPBARS + ID_STEP Then
        mStraddle.OpBars_UpdateHistoricalData reqId, histDate, histOpen, histHigh, histLow, histClose, histVolume, barCount, WAP, hasGaps
    ElseIf reqId >= ID_STDL_UNDLBARS And reqId < ID_STDL_UNDLBARS + ID_STEP Then
        mStraddle.UndlBars_UpdateHistoricalData reqId, histDate, histOpen, histHigh, histLow, histClose, histVolume, barCount, WAP, hasGaps
    End If
    
End Sub

Private Sub m_Tws_historicalDataEnd(ByVal reqId As Long, ByVal startDate As String, ByVal endDate As String)
    On Error Resume Next
    
    If reqId >= ID_CAL_OPBARS And reqId < ID_CAL_OPBARS + ID_STEP Then
        mCalendar.OpBars_UpdateHistoricalDataEnd reqId, startDate, endDate
    ElseIf reqId >= ID_CAL_UNDLBARS And reqId < ID_CAL_UNDLBARS + ID_STEP Then
        mCalendar.UndlBars_UpdateHistoricalDataEnd reqId, startDate, endDate
    ElseIf reqId >= ID_STDL_OPBARS And reqId < ID_STDL_OPBARS + ID_STEP Then
        mStraddle.OpBars_UpdateHistoricalDataEnd reqId, startDate, endDate
    ElseIf reqId >= ID_STDL_UNDLBARS And reqId < ID_STDL_UNDLBARS + ID_STEP Then
        mStraddle.UndlBars_UpdateHistoricalDataEnd reqId, startDate, endDate
    End If
End Sub


Private Sub m_Tws_contractDetailsEx(ByVal reqId As Long, ByVal conDetails As TWSLib.IContractDetails)
    On Error Resume Next
    
    If reqId >= ID_CAL_CHAINSTRIKES And reqId < ID_CAL_CHAINSTRIKES + ID_STEP Then
        mCalendar.ChainStrikes_UpdateConDet reqId, conDetails
    ElseIf reqId >= ID_CAL_UNDLCONID And reqId < ID_CAL_UNDLCONID + ID_STEP Then
        mCalendar.UpdateUndlConId reqId, conDetails
    ElseIf reqId >= ID_STDL_CHAINSTRIKES And reqId < ID_STDL_CHAINSTRIKES + ID_STEP Then
        mStraddle.ChainStrikes_UpdateConDet reqId, conDetails
    ElseIf reqId >= ID_STDL_UNDLCONID And reqId < ID_STDL_UNDLCONID + ID_STEP Then
        mStraddle.UpdateUndlConId reqId, conDetails
    ElseIf reqId >= ID_WLC_CHAINSTRIKES And reqId < ID_WLC_CHAINSTRIKES + ID_STEP Then
        mWlCalendar.ChainStrikes_UpdateConDet reqId, conDetails
    ElseIf reqId >= ID_WLC_UNDLCONID And reqId < ID_WLC_UNDLCONID + ID_STEP Then
        mWlCalendar.UpdateUndlConId reqId, conDetails
    ElseIf reqId >= ID_WLS_CHAINSTRIKES And reqId < ID_WLS_CHAINSTRIKES + ID_STEP Then
        mWlStraddle.ChainStrikes_UpdateConDet reqId, conDetails
    ElseIf reqId >= ID_WLS_UNDLCONID And reqId < ID_WLS_UNDLCONID + ID_STEP Then
        mWlStraddle.UpdateUndlConId reqId, conDetails
    End If
        
End Sub

Private Sub m_Tws_contractDetailsEnd(ByVal reqId As Long)
    On Error Resume Next
    
    If reqId >= ID_CAL_CHAINSTRIKES And reqId < ID_CAL_CHAINSTRIKES + ID_STEP Then
        mCalendar.ChainStrikes_UpdateConDetEnd reqId
    ElseIf reqId >= ID_CAL_UNDLCONID And reqId < ID_CAL_UNDLCONID + ID_STEP Then
        mCalendar.UpdateUndlConIdEnd reqId
    ElseIf reqId >= ID_STDL_CHAINSTRIKES And reqId < ID_STDL_CHAINSTRIKES + ID_STEP Then
        mStraddle.ChainStrikes_UpdateConDetEnd reqId
    ElseIf reqId >= ID_STDL_UNDLCONID And reqId < ID_STDL_UNDLCONID + ID_STEP Then
        mStraddle.UpdateUndlConIdEnd reqId
    ElseIf reqId >= ID_WLC_CHAINSTRIKES And reqId < ID_WLC_CHAINSTRIKES + ID_STEP Then
        mWlCalendar.ChainStrikes_UpdateConDetEnd reqId
    ElseIf reqId >= ID_WLC_UNDLCONID And reqId < ID_WLC_UNDLCONID + ID_STEP Then
        mWlCalendar.UpdateUndlConIdEnd reqId
    ElseIf reqId >= ID_WLS_CHAINSTRIKES And reqId < ID_WLS_CHAINSTRIKES + ID_STEP Then
        mWlStraddle.ChainStrikes_UpdateConDetEnd reqId
    ElseIf reqId >= ID_WLS_UNDLCONID And reqId < ID_WLS_UNDLCONID + ID_STEP Then
        mWlStraddle.UpdateUndlConIdEnd reqId
    End If
End Sub






'-----------------------------
' current time events
'-----------------------------
Private Sub m_Tws_currentTime(ByVal time As Long)
    On Error Resume Next
    general.UpdateCurrentTime time
End Sub








Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Open()
    Main.InitialiseMain
End Sub


Attribute VB_Name = "Main"
Option Explicit

Private mIsInitialised As Boolean
Public WbIsProtected As Boolean
Private sheetPw As String
Public ChafOk As Boolean
Private Chafkey As String
Private ChafLastDl
Public Api As Api
Public IsConnected As Boolean

Public Sub InitialiseMain()
    If mIsInitialised Then Exit Sub
    Call InitialiseMain_sub
End Sub



Public Sub InitialiseMain_sub()
    sheetPw = "w9ViLqC7YVHGiheCzWiIvh5vWl93BITYCCk7GmY8"
    WbIsProtected = True
    
    Set Api = New Api
    ChafOk = Util.CheckChaf()
    general.Initialise
    watchlist.Initialise
    mWlStraddle.Initialise
    mWlCalendar.Initialise
    mStraddle.Initialise
    mCalendar.Initialise
    log.Initialise
   
    ' clear log
    log.ClearLog_Click
    
    mIsInitialised = True
End Sub

' delete TWSControl
Sub DeleteTWSControl()
    Set Api = Nothing
End Sub


Public Sub SheetProtect(ByRef sh As Worksheet)
    If WbIsProtected Then
        sh.Protect Password:=sheetPw, DrawingObjects:=True, Contents:=True, Scenarios:=True, _
        UserInterfaceOnly:=True, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
        AllowFormattingRows:=True, AllowInsertingColumns:=False, AllowInsertingRows:=False, _
        AllowInsertingHyperlinks:=True, AllowDeletingColumns:=False, AllowDeletingRows:=False, _
        AllowSorting:=False, AllowFiltering:=False, AllowUsingPivotTables:=False
    End If
    Application.ScreenUpdating = True
End Sub

Public Sub SheetUnprotect(ByRef sh As Worksheet)
    On Error Resume Next
    Application.ScreenUpdating = False
    sh.Unprotect Password:=sheetPw
End Sub




Public Function Load_ltd() As Boolean

    On Error GoTo DownloadError


    Dim rg As Range, Key As String, Url As String, req As Variant, i As Long
    Set rg = ThisWorkbook.Worksheets(STR_SHEET_LTD).Range("A1")
    ThisWorkbook.Worksheets(STR_SHEET_LTD).Range(rg, rg.End(xlDown)).Resize(, 5).ClearContents

    Key = ThisWorkbook.Worksheets(STR_SHEET_GENERAL).Range(RG_GENERAL_CHAFKEY).value

    Url = "https://www.chartaffair.com/aot_vba/bkwflle9z4e.php?key=" & Key & "&arg1=" & Round(Rnd() * 100, 0)
    
    Set req = CreateObject("WinHttp.WinHttpRequest.5.1")
    With req
        .Open "GET", Url, False
        .setTimeouts 60000, 60000, 60000, 60000     ' SetTimeouts(resolveTimeout, ConnectTimeout, SendTimeout, ReceiveTimeout)
        .Option(0) = "Echovoice VBA HTTP Bot v0.1"
        .Option(6) = False ' set redirects
        .Option(12) = True ' allow http to redirect to https
        .send
    End With
    
    Dim out() As String, ar() As String, ai() As String

    ar = Split(req.responseText, ";")
    
    For i = 0 To UBound(ar)
        If Len(ar(i)) > 0 Then
            ReDim Preserve out(4, i)
            ai = Split(ar(i), ",")
            out(0, i) = ai(0)
            out(1, i) = ai(1)
            out(2, i) = ai(2)
            out(3, i) = ai(3)
            out(4, i) = ai(4)
        End If
    Next
    
    ThisWorkbook.Worksheets(STR_SHEET_LTD).Range("A1").Resize(UBound(out, 2) + 1, UBound(out, 1) + 1).value = Application.Transpose(out)
    ThisWorkbook.Worksheets(STR_SHEET_LTD).Range(RG_LTD_LASTDATE).value = Local2GMT(Now)     'actual date and time in UTC
    Load_ltd = True
    Exit Function

DownloadError:
    Load_ltd = False

End Function



Attribute VB_Name = "Util"
Option Explicit

#If Win64 = 1 And VBA7 = 1 Then
    Private Declare PtrSafe Sub GetSystemTime Lib "kernel32" (ByRef lpSystemTime As SYSTEMTIME)
    Private Declare PtrSafe Function GetTimeZoneInformation Lib "kernel32" (lpTimeZoneInformation As TIME_ZONE_INFORMATION) As LongPtr
    Public Declare PtrSafe Function GetTickCount Lib "kernel32" () As LongLong
#Else
    Private Declare Sub GetSystemTime Lib "kernel32" (ByRef lpSystemTime As SYSTEMTIME)
    Private Declare Function GetTimeZoneInformation Lib "kernel32" (lpTimeZoneInformation As TIME_ZONE_INFORMATION) As Long
    Public Declare Function GetTickCount Lib "kernel32" () As Long
#End If




Private Type SYSTEMTIME
    wYear           As Integer
    wMonth          As Integer
    wDayOfWeek      As Integer
    wDay            As Integer
    wHour           As Integer
    wMinute         As Integer
    wSecond         As Integer
    wMilliseconds   As Integer
End Type

Private Type TIME_ZONE_INFORMATION
    Bias As Long
    StandardName(31) As Integer
    StandardDate As SYSTEMTIME
    StandardBias As Long
    DaylightName(31) As Integer
    DaylightDate As SYSTEMTIME
    DaylightBias As Long
End Type






Public Enum Wls_Symbol_Straddle
    Col_USR_SYMBOLSTATUS = -1
    Col_USR_SYMBOL
    Col_USR_LTD
    Col_USR_LTDCONF
    Col_USR_LONGNAME
    Col_USR_PRICE
    Col_USR_PSOURCE
    Col_USR_UPDATETIME_UNDL
    Col_USR_EMPTY1
    Col_USR_EMPTY2
    Col_USR_EXPIRYTOQUERY
    Col_USR_STRIKETOQUERY
    Col_USR_RVPREV
    Col_USR_RV
    Col_USR_PPUT
    Col_USR_PCALL
    Col_USR_UPDATETIME
End Enum

Public Enum Wls_Symbol_Calendar
    Col_CAL_SYMBOLSTATUS = -1
    Col_CAL_SYMBOL
    Col_CAL_LTD
    Col_CAL_LTDCONF
    Col_CAL_LONGNAME
    Col_CAL_PRICE
    Col_CAL_PSOURCE
    Col_CAL_UPDATETIME_UNDL
    Col_CAL_PUTCALL
    Col_CAL_EXPIRYTOQUERY_SHORT
    Col_CAL_EXPIRYTOQUERY_LONG
    Col_CAL_STRIKETOQUERY
    Col_CAL_RVPREV
    Col_CAL_RV
    Col_CAL_PSHORT
    Col_CAL_PLONG
    Col_CAL_UPDATETIME
End Enum

Public Enum Straddle_Symbol
    Row_STDL_STATUS = -3
    Row_STDL_EMPTY1
    Row_STDL_EMPTY2
    Row_STDL_SYMBOL
    Row_STDL_EMPTY3
    Row_STDL_NAME
    Row_STDL_EMPTY4
    Row_STDL_LTD
    Row_STDL_LTDCONF
    Row_STDL_EMPTY5
    Row_STDL_EXPIRY
    Row_STDL_EMPTY6
    Row_STDL_EXPIRIES
End Enum

Public Enum Calendar_Symbol
    Row_CAL_STATUS = -3
    Row_CAL_EMPTY1
    Row_CAL_EMPTY2
    Row_CAL_SYMBOL
    Row_CAL_EMPTY3
    Row_CAL_NAME
    Row_CAL_EMPTY4
    Row_CAL_LTD
    Row_CAL_LTDCONF
    Row_CAL_EMPTY5
    Row_CAL_PUTCALL
    Row_CAL_EXPIRYSHORT
    Row_CAL_EXPIRYLONG
    Row_CAL_EMPTY6
    Row_CAL_EXPIRIES
End Enum


Public Const ID_STEP = 1000000
Public Const ID_WLS_UNDLCONID = 30000000
Public Const ID_WLS_OPCHAINOV = 31000000
Public Const ID_WLS_UNDLSNAPSHOT = 32000000
Public Const ID_WLS_CHAINSTRIKES = 33000000
Public Const ID_WLS_OPSNAPSHOT = 34000000

Public Const ID_WLC_UNDLCONID = 40000000
Public Const ID_WLC_OPCHAINOV = 41000000
Public Const ID_WLC_UNDLSNAPSHOT = 42000000
Public Const ID_WLC_CHAINSTRIKES = 43000000
Public Const ID_WLC_OPSNAPSHOT = 44000000

Public Const ID_STDL_UNDLCONID = 50000000
Public Const ID_STDL_OPCHAINOV = 51000000
Public Const ID_STDL_UNDLBARS = 52000000
Public Const ID_STDL_CHAINSTRIKES = 53000000
Public Const ID_STDL_OPBARS = 54000000

Public Const ID_CAL_UNDLCONID = 60000000
Public Const ID_CAL_OPCHAINOV = 61000000
Public Const ID_CAL_UNDLBARS = 62000000
Public Const ID_CAL_CHAINSTRIKES = 63000000
Public Const ID_CAL_OPBARS = 64000000

' order id base
Public Const ORDER_ID_BASE = &H70000000


' global string constants
Public Const STR_TWS_CONTROL_ALREADY_CONNECTED = "TWS Control is already connected"
Public Const STR_TWS_CONTROL_NOT_CONNECTED = "TWS Control is not connected"
Public Const STR_TWS_CONTROL_INIT_ERROR = "Cannot initialize TWS Control"
Public Const STR_CHAF_INVALID_KEY = "Your Chartaffair.com key is not valid. This tool will work but you will not have access to chartaffair data. Please check your subscription status."
Public Const STR_NOT_AVAILABLE = "N/A"
Public Const STR_EMPTY = ""
Public Const STR_FORMAT_NUMBER = "0.0000"
Public Const STR_POINT = "."
Public Const STR_COMMA = ","
Public Const STR_SEMICOLON = ";"
Public Const STR_UNDERSCORE = "_"
Public Const STR_EQUALSSIGN = "="
Public Const STR_COLON = ":"
Public Const STR_SPACE = " "

Public Const STR_EXCHANGE_SMART = "SMART"
Public Const STR_STYPE_STK = "STK"
Public Const STR_STYPE_OPT = "OPT"
Public Const STR_CURR_USD = "USD"
Public Const STR_WHATTOSHOW_BIDASK = "BID_ASK"
Public Const STR_WHATTOSHOW_MIDPOINT = "MIDPOINT"

'Public Const TWB = "delevop.xlsm"
Public Const STR_SHEET_GENERAL = "General"
Public Const STR_SHEET_WATCHLIST = "Watchlist"
Public Const STR_SHEET_STRADDLE = "straddle"
Public Const STR_SHEET_CALENDAR = "calendar"
Public Const STR_SHEET_LTD = "ltd"
'Public Const STR_SHEET_CACHE = "cache"
'Public Const STR_SHEET_CACHEWL = "cachewl"

Public Const RG_GENERAL_CHAFKEY = "$C$10"

Public Const RG_WATCHLISTSTRADDLE_INPUT = "$C$9"
Public Const RG_WATCHLISTCALENDAR_INPUT = "$C$24"
Public Const RG_WATCHLIST_ACTIVEMSG = "$P$3"
Public Const RG_WLS_SPARKLINEDATA = "$AU$8"
Public Const RG_WLC_SPARKLINEDATA = "$BQ$8"

Public Const RG_STRADDLE_SYMBOL = "$T$10"
Public Const RG_STRADDLE_BARDURATION = "$S$4"
Public Const RG_STRADDLE_FRONTDATA = "$AD$6"
Public Const RG_STRADDLE_HISTCALCSTATUS = "$T$2"

Public Const RG_CALENDAR_SYMBOL = "$T$10"
Public Const RG_CALENDAR_BARDURATION = "$S$4"
Public Const RG_CALENDAR_FRONTDATA = "$AD$6"
Public Const RG_CALENDAR_HISTCALCSTATUS = "$T$2"


Public Const RG_LTD_LASTDATE = "$H$1"
Public Const RG_LTD_CHAFOK = "$H$2"
Public Const RG_CACHE_REQID = "$M$1"







Public Const C_CNTROWS_WATCHLISTSTRADDLES = 10
Public Const C_CNTROWS_WATCHLISTCALENDAR = 10
Public Const C_WLS_LEN_SPARLINEDATAFIELD = 200
Public Const C_WLS_WID_SPARLINEDATAFIELD = 2
Public Const C_WLC_LEN_SPARLINEDATAFIELD = 200
Public Const C_WLC_WID_SPARLINEDATAFIELD = 2
Public Const C_STDL_FRONTDATA_MAXHEIGHT = 400
Public Const C_CAL_FRONTDATA_MAXHEIGHT = 400
Public Const C_STDL_CHARTSPAD = 0.002
Public Const C_CAL_CHARTSPAD = 0.002

Public Const C_ARLEN_OPSNAPSHOT = 100







Function Local2GMT(dtLocalDate As Date) As Date
    Local2GMT = DateAdd("s", -GetLocalToGMTDifference(), dtLocalDate)
End Function

Function GMT2Local(gmtTime As Date) As Date
    GMT2Local = DateAdd("s", GetLocalToGMTDifference(), gmtTime)
End Function




Function GetLocalToGMTDifference() As Long
    Const TIME_ZONE_ID_INVALID& = &HFFFFFFFF
    Const TIME_ZONE_ID_STANDARD& = 1
    Const TIME_ZONE_ID_UNKNOWN& = 0
    Const TIME_ZONE_ID_DAYLIGHT& = 2
    Dim TimeZoneInf As TIME_ZONE_INFORMATION
    Dim Ret As Long
    Dim Diff As Long
    Ret = GetTimeZoneInformation(TimeZoneInf)
    Diff = -TimeZoneInf.Bias * 60
    GetLocalToGMTDifference = Diff
    If Ret = TIME_ZONE_ID_DAYLIGHT& Then
        If TimeZoneInf.DaylightDate.wMonth <> 0 Then
            GetLocalToGMTDifference = Diff - TimeZoneInf.DaylightBias * 60
        End If
    End If
End Function



Public Function CheckChaf() As Boolean

    Dim dlDateTimeUtc As Date, dlDateUtc As Date, dlTimeUtc As Date, dateUtc As Date, cutoffTimeUtc As Date, dlStatus As Variant
    dlDateTimeUtc = ThisWorkbook.Worksheets(STR_SHEET_LTD).Range(RG_LTD_LASTDATE).value
    dlStatus = ThisWorkbook.Worksheets(STR_SHEET_LTD).Range(RG_LTD_CHAFOK).value
    
    dateUtc = CDate(Int(Local2GMT(Now))) 'Date part of "now" in utc time
    dlDateUtc = CDate(Int(dlDateTimeUtc))
    dlTimeUtc = dlDateTimeUtc - CDate(Int(dlDateTimeUtc))

    cutoffTimeUtc = CDate("13:00:00") ' time in utc where we have updated earnigns dates of chartaffair -> make dl when later than that
    
    If (dlDateUtc < dateUtc) _
        Or (dlDateUtc = dateUtc And dlTimeUtc < cutoffTimeUtc) _
        Or (dlDateUtc > dateUtc) _
        Or dlStatus = 0 Then
    
        If Main.Load_ltd() Then
            CheckChaf = True
            ThisWorkbook.Worksheets(STR_SHEET_LTD).Range(RG_LTD_CHAFOK).value = 1
        Else
            CheckChaf = False
            ThisWorkbook.Worksheets(STR_SHEET_LTD).Range(RG_LTD_CHAFOK).value = 0
            MsgBox STR_CHAF_INVALID_KEY
        End If
    Else
        CheckChaf = True
    End If

End Function






Function COLHEADS_STDL_FRONTDATA()
    COLHEADS_STDL_FRONTDATA = Array("Stdl_Ts", "Stdl_UndlO", "Stdl_undlH", "Stdl_undlL", "Stdl_UndlC", "Stdl_AtmStrike", "Stdl_AtmDist" _
    , "Stdl_PutBid", "Stdl_PutAsk", "Stdl_PutMid", "Stdl_CallBid", "Stdl_CallAsk", "Stdl_CallMid" _
    , "Stdl_StdlBid", "Stdl_StdlAsk", "Stdl_StdlMid", "Stdl_RvBid", "Stdl_RvAsk", "Stdl_RvMid")
End Function


Function COLHEADS_CAL_FRONTDATA()
    COLHEADS_CAL_FRONTDATA = Array("Cal_Ts", "Cal_UndlO", "Cal_undlH", "Cal_undlL", "Cal_UndlC", "Cal_AtmStrike", "Cal_AtmDist" _
    , "Cal_ShortBid", "Cal_ShortAsk", "Cal_ShortMid", "Cal_LongBid", "Cal_LongAsk", "Cal_LongMid" _
    , "Cal_CalBid", "Cal_CalAsk", "Cal_CalMid", "Cal_RvBid", "Cal_RvAsk", "Cal_RvMid")
End Function


Public Function CheckConnected() As Boolean
    If Not IsConnected Then
        CheckConnected = False
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLIST_ACTIVEMSG).Interior.ColorIndex = 15
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLIST_ACTIVEMSG).value = ""
        MsgBox STR_TWS_CONTROL_NOT_CONNECTED
    Else
        CheckConnected = True
    End If
End Function





Public Function IncrementReqId(sheetId As Long)
    Dim rg As Range
    Set rg = ThisWorkbook.Worksheets(STR_SHEET_LTD).Range(RG_CACHE_REQID).Offset(sheetId, 0)
    If rg.value < 999 Then
        rg.value = rg.value + 1
    Else
        rg.value = 1
    End If
    IncrementReqId = rg.value
End Function


Public Sub TakeNap(ByRef milliSeconds)
    
    Dim StartTick As Long
    Dim CurrTick As Long
    Dim EndTick As Long
    
    On Error GoTo ErrHandler
    Application.EnableCancelKey = xlErrorHandler
    StartTick = GetTickCount
    EndTick = GetTickCount + (milliSeconds)
    Do
        CurrTick = GetTickCount
        DoEvents
    Loop Until CurrTick >= EndTick
    Exit Sub
ErrHandler:
    ' Break Key Pressed
    EndTick = 0
End Sub


' convert long value to date
Public Function ConvertLongToDateStr(ByVal lSec As Long) As String
    Dim tz As TIME_ZONE_INFORMATION
    
    If lSec > 0 Then
        ConvertLongToDateStr = Str(DateAdd("s", -(tz.Bias + tz.DaylightBias * IIf(GetTimeZoneInformation(tz) = 2, 1, 0)) * 60, DateAdd("s", lSec, DateSerial(1970, 1, 1))))
    Else
        ConvertLongToDateStr = STR_EMPTY
    End If
End Function





Function FindTheClosestStrike(price As Double, strikes() As Variant) As Double
      
    Dim closestStrike As Double, length As Long, midpoint As Long, i As Long
    
    
    ' Find closest strike
    ' ===================
    ' price should be around the middle of all strikes,
    ' let's start looking there
    
    
    Call QuickSort(strikes, LBound(strikes), UBound(strikes))
    
    
    length = UBound(strikes) - LBound(strikes) + 1
    midpoint = Round(length / 2, 0)
    
    If price > strikes(midpoint) Then
    
        ' look only at upper half of strikes, move from middle down to lowest
        For i = midpoint To UBound(strikes)
            If strikes(i) > price Then
                Exit For
            End If
        Next
        
        If i < UBound(strikes) Then
            
            If Abs(price - strikes(i - 1)) < Abs(price - strikes(i)) Then
                closestStrike = strikes(i - 1)
            Else
                closestStrike = strikes(i)
            End If
        
        Else
            closestStrike = strikes(UBound(strikes))
        End If
    
    Else
        ' look only at lower half of strikes, move from middle down to lowest
        For i = midpoint To LBound(strikes) Step -1
            If strikes(i) < price Then
                Exit For
            End If
        Next
        
        If i > LBound(strikes) Then
            
            If Abs(price - strikes(i + 1)) < Abs(price - strikes(i)) Then
                closestStrike = strikes(i + 1)
            Else
                closestStrike = strikes(i)
            End If
        
        Else
            closestStrike = strikes(LBound(strikes))
        End If
    
    End If

    FindTheClosestStrike = closestStrike

End Function



Public Function CommonStrikesPutCall(ByVal dput As Scripting.Dictionary, ByVal dcall As Scripting.Dictionary) As Variant

    Dim d As Scripting.Dictionary, i As Long, sk As Object, s As Variant
    Dim PutCallStrikes() As Variant
    
    Set d = New Scripting.Dictionary
    
    For i = 0 To 1
    
        If i = 0 Then
            Set sk = dput
        Else
            Set sk = dcall
        End If
        
        For Each s In sk.keys
            If d.Exists(s) Then
                d.Item(s) = d.Item(s) + 1
            Else
                d.Add s, 1
            End If
        Next
    Next
    
    
    i = 0
    For Each s In d.keys
        If d(s) > 1 Then
            ReDim Preserve PutCallStrikes(0 To i)
            PutCallStrikes(i) = s
            i = i + 1
        End If
    Next
    
    Call QuickSort(PutCallStrikes, LBound(PutCallStrikes), UBound(PutCallStrikes))

    CommonStrikesPutCall = PutCallStrikes

End Function




Function UniqueArrayValues(MyArray() As Variant) As Variant

    Dim d As New Scripting.Dictionary, i As Long
    
    With d
        For i = LBound(MyArray) To UBound(MyArray)
            If IsMissing(MyArray(i)) = False Then
                .Item(MyArray(i)) = 1
            End If
        Next
        UniqueArrayValues = .keys
    End With
End Function

'https://stackoverflow.com/questions/152319/vba-array-sort-function
Public Sub QuickSort(vArray As Variant, inLow As Long, inHi As Long)
  Dim pivot   As Variant
  Dim tmpSwap As Variant
  Dim tmpLow  As Long
  Dim tmpHi   As Long

  tmpLow = inLow
  tmpHi = inHi

  pivot = vArray((inLow + inHi) \ 2)

  While (tmpLow <= tmpHi)
     While (vArray(tmpLow) < pivot And tmpLow < inHi)
        tmpLow = tmpLow + 1
     Wend

     While (pivot < vArray(tmpHi) And tmpHi > inLow)
        tmpHi = tmpHi - 1
     Wend

     If (tmpLow <= tmpHi) Then
        tmpSwap = vArray(tmpLow)
        vArray(tmpLow) = vArray(tmpHi)
        vArray(tmpHi) = tmpSwap
        tmpLow = tmpLow + 1
        tmpHi = tmpHi - 1
     End If
  Wend

  If (inLow < tmpHi) Then QuickSort vArray, inLow, tmpHi
  If (tmpLow < inHi) Then QuickSort vArray, tmpLow, inHi
End Sub

Public Function IsArrayAllocated(Arr As Variant) As Boolean
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' IsArrayAllocated
    ' Returns TRUE if the array is allocated (either a static array or a dynamic array that has been
    ' sized with Redim) or FALSE if the array is not allocated (a dynamic that has not yet
    ' been sized with Redim, or a dynamic array that has been Erased). Static arrays are always
    ' allocated.
    '
    ' The VBA IsArray function indicates whether a variable is an array, but it does not
    ' distinguish between allocated and unallocated arrays. It will return TRUE for both
    ' allocated and unallocated arrays. This function tests whether the array has actually
    ' been allocated.
    '
    ' This function is just the reverse of IsArrayEmpty.
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    
    
    Dim n As Long
    On Error Resume Next
    
    ' if Arr is not an array, return FALSE and get out.
    If IsArray(Arr) = False Then
        IsArrayAllocated = False
        Exit Function
    End If
    
    ' Attempt to get the UBound of the array. If the array has not been allocated,
    ' an error will occur. Test Err.Number to see if an error occurred.
    n = UBound(Arr, 1)
    If (Err.Number = 0) Then
        ''''''''''''''''''''''''''''''''''''''
        ' Under some circumstances, if an array
        ' is not allocated, Err.Number will be
        ' 0. To acccomodate this case, we test
        ' whether LBound <= Ubound. If this
        ' is True, the array is allocated. Otherwise,
        ' the array is not allocated.
        '''''''''''''''''''''''''''''''''''''''
        If LBound(Arr) <= UBound(Arr) Then
            ' no error. array has been allocated.
            IsArrayAllocated = True
        Else
            IsArrayAllocated = False
        End If
    Else
        ' error. unallocated array
        IsArrayAllocated = False
    End If

End Function



Public Function RoundChartMin(ByRef d As Double) As Double
    'always round after the leftmost three digits
    
    Dim x As Double
    
    If d > 1000 Then
        x = Int(d / 10) * 10 '1398.7 -> 1390
    ElseIf d > 100 Then
        x = Int(d)
    ElseIf d > 10 Then
        x = Int(d * 10) / 10
    ElseIf d > 1 Then
        x = Int(d * 100) / 100
    ElseIf d > 0.1 Then
        x = Int(d * 1000) / 1000
    ElseIf d > 0.01 Then
        x = Int(d * 10000) / 10000
    ElseIf d > 0.001 Then
        x = Int(d * 100000) / 100000
    ElseIf d > 0.0001 Then
        x = Int(d * 1000000) / 1000000
    Else
        x = d
    End If
    
    RoundChartMin = x
    
End Function


Attribute VB_Name = "calendar"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBox1, 1, 0, MSForms, ComboBox"



Option Explicit



Public Sub ChkbBarTimeAverage_Click()
    If ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Shapes("Check Box 6").ControlFormat.value = xlOn Then
        Call mCalendar.SetBarTimeAverage(1)
    Else
        Call mCalendar.SetBarTimeAverage(0)
    End If
End Sub




Private Sub Worksheet_Change(ByVal Target As Range)
    
    Dim KeyCells As Range
        
    If Target.Rows.Count = 1 And Target.Columns.Count = 1 Then
        If Not Target.value = "" Then

            Set KeyCells = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
            
            If Not Application.Intersect(KeyCells, Range(Target.Address)) Is Nothing Then
                If ActiveSheet.Name = ThisWorkbook.Sheets(STR_SHEET_CALENDAR).Name Then
                    'Make sure we do not copy an interrupted request from Watchlist to there
                    Call mCalendar.SetIsWatchlistRequest(0)
                End If
                PasteLtd (Target.Address)
                Call mCalendar.ReqUndlConId(0)
            End If
        End If
    End If
End Sub

Private Sub ComboBox1_Change()
    Call mCalendar.BarDurationDropdownChange
End Sub

Sub PasteLtd(ByRef Cell_str As String)

    Dim FindString As String
    Dim Rng As Range
    Dim rgIn As Range
    Dim rgSymbol As Range
    
    
    'ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(Cell_str).Offset(0, Col_USR_SYMBOLSTATUS).value = "Retrieving symbol info"
    
    If ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(Cell_str).Rows.Count > 1 Then
        Exit Sub
    End If
    
    
    Set rgIn = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(Cell_str)
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
    
    FindString = rgIn.value
    
    If Trim(FindString) <> "" Then
        With Sheets("ltd").Range("A:A")
            Set Rng = .Find(What:=FindString, _
                            After:=.Cells(1), _
                            LookIn:=xlValues, _
                            LookAt:=xlWhole, _
                            SearchOrder:=xlByRows, _
                            SearchDirection:=xlNext, _
                            MatchCase:=False)
            If Not Rng Is Nothing Then
                'Application.Goto Rng, True
                'Paste ltd and confirmed yes/no
                
                
                
                rgSymbol.Offset(Row_STDL_LTD, 0).value = Rng.Offset(0, 1).value
                
                'rgIn.Offset(0, 1).value = Rng.Offset(0, 1).value
                If Rng.Offset(0, 2).value = 1 Then
                    rgSymbol.Offset(Row_STDL_LTDCONF, 0).value = "yes"
                Else
                    rgSymbol.Offset(Row_STDL_LTDCONF, 0).value = "no"
                End If
            Else
                rgSymbol.Offset(Row_STDL_LTD, 0).value = ""
                rgSymbol.Offset(Row_STDL_LTDCONF, 0).value = ""
            End If
        End With
    Else
        rgSymbol.Offset(Row_STDL_LTD, 0).value = ""
        rgSymbol.Offset(Row_STDL_LTDCONF, 0).value = ""
    End If

    'ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(Cell_str).Offset(0, Col_USR_SYMBOLSTATUS).value = "Symbol ok"

End Sub


Public Sub BtnRunCalendar()
    Call mCalendar.RunCalendar
End Sub



Public Sub BtnRunNumber_Click()
    Dim nbr
    nbr = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range("$L$7")
    
    Select Case nbr
        Case 0
            Call RunCalendar
        Case 1
            Call mCalendar.OpChainOverview_reqSecDefOP
        Case 2
            Call mCalendar.UndlBars_reqBars
        Case 3
            Call mCalendar.FindExpiryToQuery
        Case 4
            Call mCalendar.ChainStrikes_reqCons
        Case 5
            Call mCalendar.FindStrikesToQuery
        Case 6
            Call mCalendar.OpBars_reqBars
        Case 7
            Call mCalendar.CalcRV
        Case 8
            Call mCalendar.DisplayFrontendData
    End Select

End Sub









Attribute VB_Name = "general"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


' table constants
Const CELL_CONNECTION_HOST = "C7"
Const CELL_CONNECTION_PORT = "E7"
Const CELL_CLIENT_ID = "G7"
Const CELL_SERVER_LOG_LEVEL = "I7"
Const CELL_CURRENT_TIME = "D22"
Const CELL_CONNECTION_STATUS = "E14"

'other constants
Const INCORRECT_HOST_PORT_STR = "You should enter valid Connection Host, Connection Port and Client ID"
Const CONNECTING_STR = "Connecting"
Const CONNECTED_STR = "Connected"
Const NOT_CONNECTED_STR = "Not connected"


Private Sub Worksheet_Activate()
    Main.InitialiseMain
End Sub

Public Sub Initialise()
    'SetDisconnected
End Sub


' connecting to TWS application
Public Sub ConnectToTWS_Click()



    If IsConnected Then
        MsgBox STR_TWS_CONTROL_ALREADY_CONNECTED
        Exit Sub
    End If
    
      
    Dim connectionHost As String, connectionPort As Long, clientId As Long

    ' load connectionHost, connectionPort and clientID from worksheet
    connectionHost = Range(CELL_CONNECTION_HOST).value
    connectionPort = Range(CELL_CONNECTION_PORT).value
    clientId = Range(CELL_CLIENT_ID).value
    
    If connectionPort Like STR_EMPTY Or clientId Like STR_EMPTY Then
        MsgBox INCORRECT_HOST_PORT_STR
    Else
        SetConnecting
        Api.Tws.Connect connectionHost, connectionPort, clientId, False
    End If

    
End Sub

' disconnecting from TWS application
Public Sub DisconnectFromTWS_Click()
    If Not CheckConnected Then Exit Sub
    

    Api.Tws.Disconnect
    SetDisconnected

End Sub







' request current time
Public Sub RequestCurrentTime_Click()
    If Not CheckConnected Then Exit Sub
    Api.Tws.reqCurrentTime
End Sub

Public Sub UpdateCurrentTime(ByVal time As Long)
    Range(CELL_CURRENT_TIME).value = Util.ConvertLongToDateStr(time)
End Sub



' set server log level
Public Sub SetServerLogLevel_Click()
    If Not CheckConnected Then Exit Sub
    Api.Tws.setServerLogLevel Range(CELL_SERVER_LOG_LEVEL).value
End Sub

' request new initialisation
Public Sub ForceInitialiseMain_Click()
    If Range(CELL_CONNECTION_STATUS).value = CONNECTED_STR Then
        RequestGlobalCancel
    End If
    'Call SheetUnprotect(ThisWorkbook.Sheets(STR_SHEET_GENERAL))
    Main.InitialiseMain_sub
    Range(CELL_CLIENT_ID).value = Range(CELL_CLIENT_ID).value + 1
    'Call SheetProtect(ThisWorkbook.Sheets(STR_SHEET_GENERAL))
End Sub

' request global cancel
Public Sub RequestGlobalCancel()
    If Not CheckConnected Then Exit Sub
    Api.Tws.reqGlobalCancel
End Sub

' color flags
Public Sub SetDisconnected()
    Call SheetUnprotect(ThisWorkbook.Sheets(STR_SHEET_GENERAL))
    Range(CELL_CONNECTION_STATUS).value = NOT_CONNECTED_STR
    Range(CELL_CONNECTION_STATUS).Interior.Color = RGB(255, 0, 0)
    IsConnected = False
    Call SheetProtect(ThisWorkbook.Sheets(STR_SHEET_GENERAL))
End Sub

Public Sub SetConnected()
    Call SheetUnprotect(ThisWorkbook.Sheets(STR_SHEET_GENERAL))
    Range(CELL_CONNECTION_STATUS).value = CONNECTED_STR
    Range(CELL_CONNECTION_STATUS).Interior.Color = RGB(0, 255, 0)
    IsConnected = True
    Call SheetProtect(ThisWorkbook.Sheets(STR_SHEET_GENERAL))
End Sub

Public Sub SetConnecting()
    Call SheetUnprotect(ThisWorkbook.Sheets(STR_SHEET_GENERAL))
    Range(CELL_CONNECTION_STATUS).value = CONNECTING_STR
    Range(CELL_CONNECTION_STATUS).Interior.Color = RGB(255, 220, 20)
    IsConnected = False
    Call SheetProtect(ThisWorkbook.Sheets(STR_SHEET_GENERAL))
End Sub




Attribute VB_Name = "log"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ClearLog, 1, 0, MSForms, CommandButton"
Option Explicit

'=================
' local constants
'=================


Private Enum LogTableColumns
    Col_MSGID = 1
    Col_MSGCODE
    Col_MSGTIME
    Col_MSGTEXT
End Enum

Private rowId As Long

Private logTable As Range

'=================
' methods
'=================
' log message
Public Sub LogMessage(ByVal id As Long, ByVal errorCode As Long, ByVal errorMsg As String)
    logTable(rowId, Col_MSGID).value = id
    logTable(rowId, Col_MSGCODE).value = errorCode
    logTable(rowId, Col_MSGTEXT).value = errorMsg
    
    ' current time
    logTable(rowId, Col_MSGTIME).value = Now
    
    rowId = rowId + 1
    
    If rowId = logTable.Rows.Count Then rowId = 1
End Sub

Public Sub ClearLog_Click()
    rowId = 1
    logTable.ClearContents
End Sub

Public Sub Initialise()
    Set logTable = Range("$A6:$D65536")
End Sub


Private Sub Worksheet_Activate()
    Main.InitialiseMain
End Sub

Attribute VB_Name = "ltd"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "mCalendar"
Option Explicit

Private sheetId As Long
Private doDebug As Boolean
Private DropDown_BarSizesIB() As Variant
Private DropDown_BarSizesDisplay As Variant
Private DropDown_BarDurationsIB() As Variant
Private DropDown_BarDurationsDisplayBox As Variant
Private SymbolConid() As Variant
Private OvExpiriesStrikes() As Variant
Private UndlBars As Scripting.Dictionary
Private ChainStrikes() As Variant
Private AtmStrikes As Scripting.Dictionary
Private AtmStrikesUnique() As Variant
Private AtmStrikesDlCount() As Variant
Private OpBars_short As Scripting.Dictionary
Private OpBars_long As Scripting.Dictionary
Private RvData() As Variant
Private ChartsMinMax() As Double
Private IsWatchlistRequest As Long
Private BarTimeAverage As Boolean








Public Sub Initialise()
    doDebug = False
    sheetId = 4
    IsWatchlistRequest = 0
    ReDim SymbolConid(0 To 1)
    ReDim OvExpiriesStrikes(0 To 3)
    ReDim ChainStrikes(0 To 8)
    ReDim AtmStrikesDlCount(0 To 2)
    ReDim RvData(0 To 19)
    ReDim ChartsMinMax(0 To 4, 0 To 1)
    DropDown_BarSizesIB = Array("1 min", "2 mins", "5 mins", "10 mins")
    DropDown_BarSizesDisplay = Array("1 min. (2 days)", "2 mins (2 days)", "5 mins (1 week)", "10 mins (1 week)")
    DropDown_BarDurationsIB = Array("2 D", "2 D", "1 W", "1 W")
    DropDown_BarDurationsDisplayBox = Array("1 min. -> 2 days", "2 min. -> 2 days", "5 min -> 1 week", "10 mins -> 1 week")
    Call InitBarDurationDropdown
    Call InitBarTimeAverage
End Sub

Sub InitBarTimeAverage()
    BarTimeAverage = True
    ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Shapes("Check Box 3").ControlFormat.value = xlOn
End Sub



Public Sub SetBarTimeAverage(ByRef v As Long)
    If v = 1 Then
        BarTimeAverage = True
    Else
        BarTimeAverage = False
    End If
End Sub

Sub InitBarDurationDropdown()
    On Error Resume Next
    Dim idx As Long
    idx = 1
    Worksheets(STR_SHEET_CALENDAR).ComboBox1.List = DropDown_BarSizesDisplay
    ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).ComboBox1.ListIndex = idx
    ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_BARDURATION).value = DropDown_BarDurationsDisplayBox(idx)
End Sub

Public Sub BarDurationDropdownChange()

    Dim idx As Long
    
    idx = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).ComboBox1.ListIndex
    
    'Dim s As String
    's = DropDown_BarDurationsDisplayText(idx)
    ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_BARDURATION).value = DropDown_BarDurationsDisplayBox(idx)

End Sub


Public Sub SetIsWatchlistRequest(ByRef nbr As Long)
    IsWatchlistRequest = nbr
End Sub







'=========================================
' Request contract details for underlying
'=========================================

Public Sub ReqUndlConId(ByRef triggerRun As Long)

    On Error Resume Next
    If Not CheckConnected Then Exit Sub
    'Call CheckChaf

    Dim reqId As Long, symbol As String, exchange As String, stype As String, curr As String
    Dim rgSymbol As Range, rgIn As Range
    Dim rg As Range
    
        
    
    'Set rgIn = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(Cell_str)
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
    
    
    If rgSymbol.Offset(Row_CAL_SYMBOL, 0).value = "" Then
        'rgSymbol.Offset(Row_CAL_PUTCALL, 0).ClearContents
        rgSymbol.Offset(Row_CAL_EXPIRYSHORT, 0).ClearContents
        rgSymbol.Offset(Row_CAL_EXPIRYLONG, 0).ClearContents
        rgSymbol.Offset(Row_CAL_STATUS, 0).ClearContents
        
        'rgSymbol.Offset(0, Row_CAL_UNDLPRICE).ClearContents
        'rgSymbol.Offset(0, Row_CAL_UNDLDATETIME).ClearContents
        'rgSymbol.Offset(0, Row_CAL_ATM).ClearContents
        'rgSymbol.Offset(0, Row_CAL_PPUT).ClearContents
        'rgSymbol.Offset(0, Row_CAL_PCALL).ClearContents
        'rgSymbol.Offset(0, Row_CAL_RV).ClearContents
        'rgSymbol.Offset(0, Row_CAL_LASTUPDATE).ClearContents

        Set rg = rgSymbol.Offset(Row_CAL_EXPIRIES, 0)
        'ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(rg, rg.Offset(24, 0)).ClearContents
        Exit Sub
    End If
    
   
    rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Retrieving symbol info"
    
    ' delete old values
    'If IsWatchlistRequest = 0 Then
        'rgSymbol.Offset(Row_CAL_PUTCALL, 0).ClearContents
        'rgSymbol.Offset(Row_CAL_EXPIRYSHORT, 0).ClearContents
        'rgSymbol.Offset(Row_CAL_EXPIRYLONG, 0).ClearContents
        rgSymbol.Offset(Row_CAL_STATUS, 0).ClearContents
        'rgSymbol.Offset(0, Row_CAL_UNDLPRICE).ClearContents
        'rgSymbol.Offset(0, Row_CAL_UNDLDATETIME).ClearContents
        'rgSymbol.Offset(0, Row_CAL_ATM).ClearContents
        'rgSymbol.Offset(0, Row_CAL_PPUT).ClearContents
        'rgSymbol.Offset(0, Row_CAL_PCALL).ClearContents
        'rgSymbol.Offset(0, Row_CAL_RV).ClearContents
        'rgSymbol.Offset(0, Row_CAL_LASTUPDATE).ClearContents
    'End If
    
    Set rg = rgSymbol.Offset(Row_CAL_EXPIRIES, 0)
    'ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(rg, rg.Offset(24, 0)).ClearContents
        
        
    reqId = ID_CAL_UNDLCONID + triggerRun * 100000 + Util.IncrementReqId(sheetId)
    'reqId = ID_CAL_UNDLCONID + Util.IncrementReqId(sheetId)
    
    'get contract details from sheet
    symbol = rgSymbol.Offset(Row_CAL_SYMBOL, 0).value
    exchange = STR_EXCHANGE_SMART
    stype = STR_STYPE_STK
    curr = STR_CURR_USD

    
    ' create contract structure
    Dim lContractInfo As TWSLib.IContract
    Set lContractInfo = Api.Tws.createContract()
    
    With lContractInfo
        .symbol = UCase(symbol)
        .secType = UCase(stype)
        '.lastTradeDateOrContractMonth = contractTable(id, Col_LASTTRADEDATE).value
        '.strike = contractTable(id, Col_STRIKE).value
        '.right = UCase(contractTable(id, Col_RIGHT).value)
        '.multiplier = UCase(contractTable(id, Col_MULTIPLIER).value)
        .exchange = UCase(exchange)
        '.primaryExchange = UCase(contractTable(id, Col_PRIMEXCH).value)
        .currency = UCase(curr)
        '.localSymbol = UCase(contractTable(id, Col_LOCALSYMBOL).value)
        '.conId = contractTable(id, Col_CONID).value
        '.includeExpired = queryTable(id, Col_INCLUDEEXPIRED).value
    End With
    
    Api.Tws.reqContractDetailsEx reqId, lContractInfo
   
End Sub

Public Sub UpdateUndlConId(ByVal reqId As Long, ByVal ContractDetails As TWSLib.IContractDetails)

    Dim ws As Worksheet, rg As Range
    Dim contract As TWSLib.IContract
    Dim rgSymbol As Range
    Dim symbolId As Long
    
    On Error Resume Next

    'symbolid = CLng(Mid(reqId, 4, 2))
    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
    Set contract = ContractDetails.contract
    
    ' write to watchlist sheet
    rgSymbol.Offset(Row_CAL_NAME, 0).value = StrConv(ContractDetails.longName, vbProperCase)
    SymbolConid(0) = contract.symbol
    SymbolConid(1) = contract.conid
    
    ' write conId to cachewl sheet
    'Set rg = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolid)
    'rg.Offset(Row_SYMBOL, 1).value = contract.symbol
    'rg.Offset(Row_STYPE, 1).value = contract.secType
    'rg.Offset(Row_EXCHANGE, 1).value = contract.exchange
    'rg.Offset(Row_PRIMEXCHANGE, 1).value = contract.primaryExchange
    'rg.Offset(Row_CURRENCY, 1).value = contract.currency
    'rg.Offset(Row_CONID, 1).value = contract.conid
    
    'rgSymbol.Offset(0, -2).value = rgSymbol.Offset(0, -2).value + 1
End Sub

Public Sub UpdateUndlConIdEnd(ByVal reqId)

    Dim rgSymbol As Range, triggerRun As Long
    
    On Error Resume Next

    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
    rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Symbol ok"

    triggerRun = CLng(Mid(reqId, 3, 1))
    
    If triggerRun = 1 Or IsWatchlistRequest > 0 Then
        Call RunCalendar
    End If

End Sub

Public Sub ErrorUndlConId(ByVal id As Long, ByVal errorCode As Long, ByVal errorMsg As String)

    Dim rgSymbol As Range
    Dim symbolId As Long
    
    On Error Resume Next

    symbolId = CLng(Mid(id, 4, 2))
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
    rgSymbol.Offset(Row_CAL_NAME, 0).value = ""
    rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Symbol invalid"
End Sub














Public Sub RunCalendar()

    'read contract data
    'Dim ws As Worksheet, rg As Range
    Dim expiryStrikeDate As Date, expiryStrikeSymbol As String
    'Dim reqId As Long, conid As Long, rg_conid As Range, rg_symbol As Range
    Dim symbol As String, putCall As Long 'exchange As String, stype As String, cur As String
    Dim rgSymbol As Range
    Dim status As String
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub

    
    If Not IsArrayAllocated(SymbolConid) Then
        Initialise
    End If
    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL).Offset(Row_CAL_SYMBOL)
    status = rgSymbol.Offset(Row_CAL_STATUS).value
    
    If status = "Retrieving symbol info" Then
        Exit Sub
    End If
    
    If status = "" Then
        Call watchlist.PasteLtd(rgSymbol.Address, True)
        Call ReqUndlConId(1)
        Exit Sub
    End If
    
    If IsEmpty(SymbolConid(0)) Then
        Call ReqUndlConId(1)
        Exit Sub
    End If
    
    Call PropagateStatus
    
    ' treat unknown number of options contrats and hence unknown status message for that case
    If Left(status, 20) = "Waiting for prices: " Then
        status = "Waiting for prices: x contracts"
    End If
    
    
    Select Case status
    
        Case "Symbol ok", "RV updated", "Short expiry does not exist", _
            "Long expiry does not exist", _
            "Opt. type invalid (put or call)", "Waiting for prices: x contracts" _
        
            'new start: get download date of expiries and strikes
            
                ' symbol changed? Expiries we have are from today?
                expiryStrikeSymbol = OvExpiriesStrikes(0)
                expiryStrikeDate = OvExpiriesStrikes(1)
            
                If Not expiryStrikeSymbol = rgSymbol.value Or CDate(Int(expiryStrikeDate)) < Date Then
                    Call OpChainOverview_reqSecDefOP
                    Exit Sub
                Else
                    rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Options chains complete"
                    Call RunCalendar
                    Exit Sub
                End If
            
            
        Case "Options chains complete"
            Call UndlBars_reqBars
            Exit Sub
            
        Case "Underlying complete"
            Call FindExpiryToQuery
            Exit Sub
            
            
        Case "Options expiries complete"

            If UCase(Left(rgSymbol.Offset(Row_CAL_PUTCALL, 0).value, 1)) = "P" Then
                putCall = 0
            ElseIf UCase(Left(rgSymbol.Offset(Row_CAL_PUTCALL, 0).value, 1)) = "C" Then
                putCall = 1
            Else
                rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Opt. type invalid (put or call)"
                Exit Sub
            End If
        
            If Not ChainStrikes(2) = rgSymbol.Offset(Row_CAL_EXPIRYSHORT, 0).value _
                Or Not ChainStrikes(3) = rgSymbol.Offset(Row_CAL_EXPIRYLONG, 0).value _
                Or Not putCall = ChainStrikes(4) _
                Or Not ChainStrikes(5) = rgSymbol.value _
                Or CDate(Int(ChainStrikes(6))) < Date _
                Or IsEmpty(ChainStrikes(0)) _
                Or IsEmpty(ChainStrikes(1)) Then
                    Call ChainStrikes_reqCons
                    Exit Sub
            Else
                rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Options contracts received"
                Call RunCalendar
                Exit Sub
            End If
            
            
        Case "Options contracts received"
            Call FindStrikesToQuery
            Exit Sub
                             
        Case "ATM strikes complete"
            Call OpBars_reqBars
            Exit Sub
            
        Case "Options prices received"
            Call CalcRV
            Exit Sub
            
        Case "RV calculated"
            Call DisplayFrontendData
            Exit Sub
            
            
        Case "Data sent to Frontend"
            If IsWatchlistRequest = 0 Then
                rgSymbol.Offset(Row_CAL_STATUS, 0).value = "RV updated"
                Exit Sub
            Else
                Call watchlist.DeleteSparklineDatafield(0, IsWatchlistRequest)
                CopyCalendarRvToSparkline (IsWatchlistRequest)
                rgSymbol.Offset(Row_CAL_STATUS, 0).value = "RV updated"
                Call PropagateStatus
                IsWatchlistRequest = 0
            End If
            
            
        Case "Retrieving symbol info", "Symbol invalid", "No options available"
            'new start: but Ib does not have that symbol in its db
            Exit Sub

            
        'When one of the procs is running at the moment, just abort here
        Case "Requesting options chains", "Requesting underlying price", "Calculate expiry", _
                "Requesting available strikes", "Awaiting 2 options contracts", "Awaiting 1 options contract", _
                "Calculate strike", "Requesting options prices", _
                "Calculating RV", "RV calculated"
            Exit Sub
            
            
        Case Else
            'MsgBox ("status not handled in RunCalendar: " & status)
            
    End Select
    

    
    
End Sub
    

'======================================================
' Get options chains expiries and strikes
' (not all strikes might be available for all expiries)
'======================================================


Public Sub OpChainOverview_reqSecDefOP()

    
    'Dim wsUser As Worksheet, wsCache As Worksheet, rg As Range,
    Dim conid As Long, symbol As String, stype As String, reqId As Long
    Dim rgSymbol As Range, rg As Range
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub


    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
    
    'status
    rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Requesting options chains"
    
    'delete old values
    OvExpiriesStrikes(0) = Empty
    OvExpiriesStrikes(1) = Empty
    OvExpiriesStrikes(2) = Empty
    OvExpiriesStrikes(3) = Empty
    
    Set rg = rgSymbol.Offset(Row_CAL_EXPIRIES)
    ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(rg, rg.Offset(24, 0)).ClearContents
    
    
  
    reqId = ID_CAL_OPCHAINOV + Util.IncrementReqId(sheetId)
        
    conid = SymbolConid(1)
    symbol = SymbolConid(0)
    stype = STR_STYPE_STK

    Api.Tws.reqSecDefOptParams reqId, symbol, "", stype, conid

End Sub

Public Sub OpChainOverview_updateSecDefOP(reqId As Long, _
                          exchange As String, _
                          undrlyingConId As Long, _
                          tradingClass As String, _
                          multiplier As String, _
                          expirationsList As String, _
                          strikesList As String)


    On Error Resume Next


    If exchange = "SMART" Then

        Dim rgSymbol As Range
        Dim expiries_str() As String, strikes_str() As String, xp() As Variant, st() As Variant
        'Dim symbolid As Long
        Dim i As Long
        Dim s As String
        
        
        'symbolid = CLng(Mid(CStr(reqId), 4, 2))
        
        'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolid)
        
        Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
        
        expiries_str() = Split(expirationsList, ";")
        strikes_str() = Split(strikesList, ";")
        
        ReDim xp(UBound(expiries_str))
        ReDim st(UBound(strikes_str))
        
        For i = 0 To UBound(expiries_str)
            s = expiries_str(i) '20210115
            xp(i) = DateSerial(Left(s, 4), Mid(s, 5, 2), right(s, 2))
            'SHEETOUTPUT
            'rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES + i, 0).value = xp(i)
        Next
        
        For i = 0 To UBound(strikes_str)
            st(i) = CDbl(strikes_str(i))
            'SHEETOUTPUT
            'rgCacheSymbol.Offset(Row_EXPIRYSTRIKE + i, 0).value = st(i)
        Next


        OvExpiriesStrikes(0) = SymbolConid(0)
        OvExpiriesStrikes(1) = Now()
        OvExpiriesStrikes(2) = xp
        OvExpiriesStrikes(3) = st
        'SHEETOUTPUT
        'rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_DATES, 0).value = Now()
        
        'write expiries to Calendar page
        rgSymbol.Offset(Row_CAL_EXPIRIES).Resize(UBound(xp), 1).value = Application.Transpose(xp)
        
    End If
    
    
    

    
    If doDebug Then
        ' DEBUG
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_opov").Range("A12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
        With rg
            .Offset(0, 0).value = Now()
            .Offset(0, 1).value = reqId
            .Offset(0, 2).value = exchange
            .Offset(0, 3).value = undrlyingConId
            .Offset(0, 4).value = tradingClass
            .Offset(0, 5).value = multiplier
            .Offset(0, 6).value = expirationsList
            .Offset(0, 7).value = strikesList
        End With
    End If
    
    
End Sub
           
Public Sub OpChainOverview_updateSecDefOPEnd(reqId As Long)

    Dim rgSymbol As Range
    ', symbolid As Long
    'symbolid = CLng(Mid(CStr(reqId), 4, 2))

    On Error Resume Next


    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)

    'status
    If IsEmpty(OvExpiriesStrikes(2)) Then
        rgSymbol.Offset(Row_CAL_STATUS, 0).value = "No options available"
    Else
        rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Options chains complete"
    End If
    
    Call RunCalendar

End Sub









'======================================================
' Get historical underlying prices
'======================================================

Public Sub UndlBars_reqBars()

    ' Fetch 5 min bars
    ' request historical data (reqType: 0 - historical data, 1 - historical ticks)
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub


    
    'Dim ws As Worksheet, rg As Range
    Dim rgSymbol As Range
    Dim reqId As Long, conid As Long, rg_conid As Range, rg_symbol As Range, whatToShow As String
    Dim symbol As String, exchange As String, stype As String, cur As String
    
    
    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
    
    
      
    
    rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Requesting underlying prices"
    
    
    Set UndlBars = New Scripting.Dictionary
    'Set UndlBars = New Scripting.Dictionary
    
    
    ' delete existing values for expiries/strikes
    'Set ws = ThisWorkbook.Worksheets(STR_SHEET_CACHE): Set rg = ws.Range(RG_CACHE_UNDLHISTPRICES)
    'ws.Range(rg, rg.End(xlDown)).Resize(, 5).ClearContents
        
        
        
    reqId = ID_CAL_UNDLBARS + Util.IncrementReqId(sheetId)
    
        
    symbol = SymbolConid(0)
    conid = SymbolConid(1)
    stype = STR_STYPE_STK
    exchange = STR_EXCHANGE_SMART
    cur = STR_CURR_USD
    
    
    ' get desired bar size and duration
    Dim idx As Long, barSizeStr As String, barDurationStr As String
    
    idx = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).ComboBox1.ListIndex
    barSizeStr = DropDown_BarSizesIB(idx)
    barDurationStr = DropDown_BarDurationsIB(idx)
    
    
    
    ' create and fill contract
    Dim lContractInfo As TWSLib.IContract
    Set lContractInfo = Api.Tws.createContract()
    
    ' fill contract structure
    With lContractInfo
        .symbol = UCase(symbol)
        .secType = UCase(stype)
        .exchange = UCase(exchange)
        .currency = UCase(cur)
        .conid = conid
    End With
    
    ' for underlying use only mid point, else the candle stick chart will look funny with open=AvBid and close=AvAsk
    whatToShow = STR_WHATTOSHOW_MIDPOINT
    'If BarTimeAverage Then
    '    whatToShow = STR_WHATTOSHOW_MIDPOINT
    'Else
    '    whatToShow = STR_WHATTOSHOW_BIDASK
    'End If
    

    ' query to ib api
    Dim endDateTime As String, duration As String, barSize As String
    Dim useRTH As Long, formatDate As Long, keepUpToDate As Boolean
    
    endDateTime = STR_EMPTY
    duration = barDurationStr
    barSize = barSizeStr
    useRTH = 1
    formatDate = 1
    keepUpToDate = False
    
    ' chart options
    Dim chartOptions As TWSLib.ITagValueList
    Set chartOptions = Api.Tws.createTagValueList()


    rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Waiting for underlying prices"
    Call PropagateStatus
    Api.Tws.reqHistoricalDataEx reqId, lContractInfo, endDateTime, duration, barSize, whatToShow, useRTH, formatDate, keepUpToDate, chartOptions
    
End Sub



Public Sub UndlBars_UpdateHistoricalData(reqId As Long, histDate As String, histOpen As Double, histHigh As Double, histLow As Double, histClose As Double, histVolume As Long, barCount As Long, WAP As Double, hasGaps As Long)
   
    
    ' check if array has been allocated already, adjust new upper bound accordingly
    
    On Error Resume Next

    If histClose > 0 Then
        UndlBars.Add histDate, Array(histOpen, histHigh, histLow, histClose, histVolume, barCount, WAP, hasGaps)
    End If
    
    

    'Dim s As String
    's = histDate
    'o = CDate(histDate)
    'DateSerial(Left(c, 4), mid(c, 5, 2), Right(c, 2))
    'o = CDate(Left(s, 4) & "-" & Mid(s, 5, 2) & "-" & Mid(s, 7, 2) & " " & Right(s, 8))
    'UndlHisData(1, newUpBound) = CDate(Left(s, 4) & "-" & Mid(s, 5, 2) & "-" & Mid(s, 7, 2) & " " & right(s, 8))
    
    
    If doDebug Then
        ' DEBUG
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_undlBars").Range("A12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg 'sheet.Rows(rowId)
            .Offset(0, 0).value = Now
            .Offset(0, 1).value = histDate
            .Offset(0, 2).value = histOpen
            .Offset(0, 3).value = histHigh
            .Offset(0, 4).value = histLow
            .Offset(0, 5).value = histClose
            .Offset(0, 6).value = histVolume
            .Offset(0, 7).value = barCount
            .Offset(0, 8).value = WAP
            .Offset(0, 9).value = hasGaps
        End With
    End If
    
End Sub

Public Sub UndlBars_UpdateHistoricalDataEnd(reqId As Long, startDate As String, endDate As String)

    Dim ws As Worksheet, rg As Range
    Dim rgSymbol As Range
    
    On Error Resume Next

    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
    
    rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Underlying complete"
    
    Call RunCalendar

End Sub










'======================
' Expiry for RV options
'======================


Public Sub FindExpiryToQuery()

    Dim rgSymbol As Range, i As Long
    Dim expiry As Variant
    Dim xp() As Variant, ltd As Date, expiryToQueryShort As Variant, expiryToQueryLong As Variant
    
    On Error Resume Next

    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolid)
        
    rgSymbol.Offset(Row_CAL_STATUS) = "Calculate expiry"

    
    xp = OvExpiriesStrikes(2)
        



    'If IsWatchlistRequest <> 0 Then
    '    expiryToQueryShort = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(IsWatchlistRequest, Col_CAL_EXPIRYTOQUERY_SHORT).value
    '    expiryToQueryLong = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(IsWatchlistRequest, Col_CAL_EXPIRYTOQUERY_LONG).value
    '    rgSymbol.Offset(Row_CAL_EXPIRYSHORT, 0).value = expiryToQueryShort
    '    rgSymbol.Offset(Row_CAL_EXPIRYLONG, 0).value = expiryToQueryLong
    'Else
        expiryToQueryShort = rgSymbol.Offset(Row_CAL_EXPIRYSHORT, 0).value
        expiryToQueryLong = rgSymbol.Offset(Row_CAL_EXPIRYLONG, 0).value
    'End If




    If Not expiryToQueryShort = "" And Not expiryToQueryLong = "" Then
    
        ' does it exist
        For i = 0 To UBound(xp)
            If xp(i) >= expiryToQueryShort Then
                Exit For
            End If
        Next
        
        If i > UBound(xp) Or Not expiryToQueryShort = xp(i) Then
            rgSymbol.Offset(Row_CAL_STATUS, 0) = "Short expiry does not exist"
            Exit Sub
        End If
    
        For i = 0 To UBound(xp)
            If xp(i) >= expiryToQueryLong Then
                Exit For
            End If
        Next
        
        If i > UBound(xp) Or Not expiryToQueryLong = xp(i) Then
            rgSymbol.Offset(Row_CAL_STATUS, 0) = "Long expiry does not exist"
            Exit Sub
        End If
    
    Else

        ' calculate both expiries
        ltd = rgSymbol.Offset(Row_CAL_LTD, 0).value
        
    
    
        For i = 0 To UBound(xp) - 1
            If xp(i) > ltd Then
                expiryToQueryShort = xp(i)
                Exit For
            End If
        Next
        
        If expiryToQueryShort = Empty Then
            MsgBox ("Could not locate two expiries after earnings date. Please enter expiries yourself in the blue fields")
            Exit Sub
        End If
        
        expiryToQueryLong = xp(i + 1)
        
        If Not rgSymbol.Offset(Row_CAL_EXPIRYSHORT, 0).value = expiryToQueryShort Then
            rgSymbol.Offset(Row_CAL_EXPIRYSHORT, 0).value = expiryToQueryShort
        End If
        
        If Not rgSymbol.Offset(Row_CAL_EXPIRYLONG, 0).value = expiryToQueryLong Then
            rgSymbol.Offset(Row_CAL_EXPIRYLONG, 0).value = expiryToQueryLong
        End If
        
    End If
    rgSymbol.Offset(Row_CAL_STATUS, 0) = "Options expiries complete"
    
    Call RunCalendar
    
End Sub

















'======================
' Strikes for RV options
'======================

Public Sub ChainStrikes_reqCons()

    On Error Resume Next
    If Not CheckConnected Then Exit Sub


    Dim rgSymbol As Range, rg As Range, right As String, reqId As Long
    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)

    rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Requesting available strikes"

    'Dim right As Variant, oid As Long, reqId As Long,
    Dim expiryToQueryShort As Date, expiryToQueryLong As Date
    
    expiryToQueryShort = rgSymbol.Offset(Row_CAL_EXPIRYSHORT, 0).value
    expiryToQueryLong = rgSymbol.Offset(Row_CAL_EXPIRYLONG, 0).value


    'delete old values
    ChainStrikes(0) = Empty
    ChainStrikes(1) = Empty
    ChainStrikes(2) = expiryToQueryShort
    ChainStrikes(3) = expiryToQueryLong
    ChainStrikes(4) = Empty
    ChainStrikes(5) = SymbolConid(0)
    ChainStrikes(6) = Empty
    ChainStrikes(7) = Empty
    ChainStrikes(8) = Empty


    If UCase(Left(rgSymbol.Offset(Row_CAL_PUTCALL, 0).value, 1)) = "P" Then
        right = "Put"
        ChainStrikes(4) = 0
    ElseIf UCase(Left(rgSymbol.Offset(Row_CAL_PUTCALL, 0).value, 1)) = "C" Then
        right = "Call"
        ChainStrikes(4) = 1
    Else
        rgSymbol.Offset(Row_CAL_STATUS) = "Opt. type invalid (put or call)"
        Exit Sub
    End If


    Dim expiry As Variant, expNbr As Long
    
    expNbr = 0
    For Each expiry In Array(expiryToQueryShort, expiryToQueryLong)
        
        'reqid
        reqId = ID_CAL_CHAINSTRIKES + expNbr * 100000 + Util.IncrementReqId(sheetId)
        ChainStrikes(7 + expNbr) = reqId
            
        ' create contract structure
        Dim lContractInfo As TWSLib.IContract
        Set lContractInfo = Api.Tws.createContract()
        
        With lContractInfo
            .symbol = SymbolConid(0)
            .secType = STR_STYPE_OPT
            .exchange = STR_EXCHANGE_SMART
            .currency = STR_CURR_USD
            .lastTradeDateOrContractMonth = Format(expiry, "yyyymmdd")
            '.strike = strike
            .right = right
            '.multiplier = UCase(contractTable(id, Col_MULTIPLIER).value)
            '.primaryExchange = UCase(contractTable(id, Col_PRIMEXCH).value)
            '.localSymbol = UCase(contractTable(id, Col_LOCALSYMBOL).value)
            '.conid = contractTable(id, Col_CONID).value
            '.includeExpired = queryTable(id, Col_INCLUDEEXPIRED).value
        End With

        Api.Tws.reqContractDetailsEx reqId, lContractInfo
        
        If expNbr = 0 Then
            Call Util.TakeNap(100)
        End If
        'Exit For
    
        expNbr = expNbr + 1
    Next

    rgSymbol.Offset(Row_CAL_STATUS) = "Awaiting 2 options contracts"
    Call PropagateStatus

End Sub


Public Sub ChainStrikes_UpdateConDet(ByVal reqId As Long, ByVal ContractDetails As TWSLib.IContractDetails)
    
    Dim contract As TWSLib.IContract
    Dim dic As Scripting.Dictionary
    Dim expNbr As Long
    
    On Error Resume Next

    If reqId = ChainStrikes(7) Or reqId = ChainStrikes(8) Then
        expNbr = CLng(Mid(CStr(reqId), 3, 1))
        Set contract = ContractDetails.contract
        
        If IsEmpty(ChainStrikes(expNbr)) Then
            Set dic = New Scripting.Dictionary
        Else
            Set dic = ChainStrikes(expNbr)
        End If
        
        'dic.Add contract.strike, contract.conid
        dic.Item(contract.strike) = contract.conid
         
        Set ChainStrikes(expNbr) = dic
    End If
End Sub


Public Sub ChainStrikes_UpdateConDetEnd(ByVal reqId)

    Dim rgStatus As Range
    
    On Error Resume Next

    ChainStrikes(6) = Now()
    
    Set rgStatus = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL).Offset(Row_CAL_STATUS, 0)
    
    
    If ChainStrikes(7) = reqId Then
        ChainStrikes(7) = "ok"
    ElseIf ChainStrikes(8) = reqId Then
        ChainStrikes(8) = "ok"
    End If
    
    If ChainStrikes(7) = "ok" And ChainStrikes(8) = "ok" Then
        rgStatus.value = "Options contracts received"
        Call RunCalendar
    ElseIf ChainStrikes(7) = "ok" Or ChainStrikes(8) = "ok" Then
        rgStatus.value = "Awaiting 1 options contract"
        Call PropagateStatus
    End If

End Sub







Public Sub FindStrikesToQuery()



    Dim rgSymbol As Range
    Dim commonStrikes() As Variant, keys() As Variant, keysSorted() As Variant
    Dim ts As Variant, ohlc() As Variant
    Dim strikes() As Variant

    On Error Resume Next

    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
    rgSymbol.Offset(Row_CAL_STATUS, 0) = "Calculate ATM strikes"
    'Set AtmStrikes = CreateObject("Scripting.Dictionary")
    Set AtmStrikes = New Scripting.Dictionary

    'get common strikes from put and call
    commonStrikes = Util.CommonStrikesPutCall(ChainStrikes(0), ChainStrikes(1))
    
    'get all timestamps from undlbars
    keys = UndlBars.keys()
    Call Util.QuickSort(keys, LBound(keys), UBound(keys))
    
    'for each timestamp: get closest strike, plug to dict
    For Each ts In keys
        ohlc = UndlBars(ts)
        AtmStrikes.Item(ts) = Util.FindTheClosestStrike(CDbl(ohlc(3)), commonStrikes)
    Next
    'get unique strikes to query
    strikes = AtmStrikes.Items()
    AtmStrikesUnique = UniqueArrayValues(strikes)

    rgSymbol.Offset(Row_CAL_STATUS, 0) = "ATM strikes complete"
    
    Call RunCalendar

End Sub









'======================================================
' Get historical underlying prices
'======================================================

Public Sub OpBars_reqBars()
    
    Dim rgSymbol As Range
    Dim reqId As Long, reqIdTail As Long, expiry As Variant
    Dim symbol As String, exchange As String, stype As String, cur As String, expiryShort As Date, expiryLong As Date
    Dim uniqueStrikeNbr As Long, useRTH As Integer, formatDate As Integer, keepUpToDate As Boolean
    Dim endDateTime As String, duration As String, barSize As String, whatToShow As String
    Dim lContractInfo As TWSLib.IContract, idx As Long, strike As Variant, expNbr As Long, right As String
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub

    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)

    rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Requesting options prices"

    
    Set OpBars_short = New Scripting.Dictionary
    Set OpBars_long = New Scripting.Dictionary
    reqIdTail = Util.IncrementReqId(sheetId)
    
    AtmStrikesDlCount(0) = 0
    AtmStrikesDlCount(1) = 0
    AtmStrikesDlCount(2) = reqIdTail
    
    symbol = SymbolConid(0)
    stype = STR_STYPE_OPT
    exchange = STR_EXCHANGE_SMART
    cur = STR_CURR_USD
      
    expiryShort = rgSymbol.Offset(Row_CAL_EXPIRYSHORT, 0).value
    expiryLong = rgSymbol.Offset(Row_CAL_EXPIRYLONG, 0).value
    

    
    If ChainStrikes(4) = 0 Then
        right = "Put"
    ElseIf ChainStrikes(4) = 1 Then
        right = "Call"
    End If
  
    If BarTimeAverage Then
        whatToShow = STR_WHATTOSHOW_BIDASK
    Else
        whatToShow = STR_WHATTOSHOW_MIDPOINT
    End If
    
        
    ' get desired bar size and duration
    idx = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).ComboBox1.ListIndex
    endDateTime = STR_EMPTY
    duration = DropDown_BarDurationsIB(idx)
    barSize = DropDown_BarSizesIB(idx)
    useRTH = 1
    formatDate = 1
    keepUpToDate = False
    
    ' chart options
    Dim chartOptions As TWSLib.ITagValueList
    Set chartOptions = Api.Tws.createTagValueList()
 
    uniqueStrikeNbr = 0
    For Each strike In AtmStrikesUnique
    
        expNbr = 0
        For Each expiry In Array(expiryShort, expiryLong)

            reqId = ID_CAL_OPBARS + expNbr * 100000 + uniqueStrikeNbr * 1000 + reqIdTail
            Set lContractInfo = Api.Tws.createContract()
    
            With lContractInfo
                .symbol = SymbolConid(0)
                .secType = STR_STYPE_OPT
                .exchange = STR_EXCHANGE_SMART
                .currency = STR_CURR_USD
                .lastTradeDateOrContractMonth = Format(expiry, "yyyymmdd")
                .strike = strike
                .right = right
            End With
        
            AtmStrikesDlCount(0) = AtmStrikesDlCount(0) + 1
            Api.Tws.reqHistoricalDataEx reqId, lContractInfo, endDateTime, duration, barSize, whatToShow, useRTH, formatDate, keepUpToDate, chartOptions
            
            
            If doDebug Then
                ' DEBUG
                Dim rg As Range
                Set rg = ThisWorkbook.Worksheets("dump_OpBars").Range("A12")
                While rg.value <> ""
                    Set rg = rg.Offset(1, 0)
                Wend
            
                With rg 'sheet.Rows(rowId)
                    .Offset(0, 0).value = Now
                    .Offset(0, 1).value = reqId
                    .Offset(0, 2).value = SymbolConid(0)
                    .Offset(0, 3).value = stype
                    .Offset(0, 4).value = Format(expiry, "yyyymmdd")
                    .Offset(0, 5).value = strike
                    .Offset(0, 6).value = right
                End With
            End If
            
                        
            If expNbr = 0 Then
                Call Util.TakeNap(100)
            End If
            expNbr = expNbr + 1
        Next
        uniqueStrikeNbr = uniqueStrikeNbr + 1
    Next

    rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Waiting for prices: " & CStr(AtmStrikesDlCount(0)) & " contracts"
    Call PropagateStatus
    
End Sub



Public Sub OpBars_UpdateHistoricalData(reqId As Long, histDate As String, histOpen As Double, histHigh As Double, histLow As Double, histClose As Double, histVolume As Long, barCount As Long, WAP As Double, hasGaps As Long)
   
    'doDebug = True
    Dim reqIdTail As Long, expNbr As Long, uniqueStrikeNbr As Long
    Dim dic As Scripting.Dictionary, strike As Variant
    
    
    On Error Resume Next

    reqIdTail = CLng(right(CStr(reqId), 3))
    expNbr = CLng(Mid(CStr(reqId), 3, 1))
    uniqueStrikeNbr = CLng(Mid(CStr(reqId), 4, 2))
    
    If reqIdTail = AtmStrikesDlCount(2) Then
    
        strike = AtmStrikesUnique(uniqueStrikeNbr)
        If expNbr = 0 Then
            
            If IsEmpty(OpBars_short(strike)) Then
                Set dic = New Scripting.Dictionary
            Else
                Set dic = OpBars_short(strike)
            End If
            
            dic.Item(histDate) = Array(histOpen, histHigh, histLow, histClose, histVolume, barCount, WAP, hasGaps)
            Set OpBars_short(strike) = dic
            'OpBars_short.Item(strike) = dic
        Else
            If IsEmpty(OpBars_long(strike)) Then
                Set dic = New Scripting.Dictionary
            Else
                Set dic = OpBars_long(strike)
            End If
            
            dic.Item(histDate) = Array(histOpen, histHigh, histLow, histClose, histVolume, barCount, WAP, hasGaps)
            Set OpBars_long(strike) = dic
            'OpBars_long.Item(strike) = dic
        End If
    End If
    
    
    
    If doDebug Then
        ' DEBUG
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_OpBars").Range("I12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg 'sheet.Rows(rowId)
            .Offset(0, 0).value = Now
            .Offset(0, 1).value = reqId
            .Offset(0, 2).value = histDate
            .Offset(0, 3).value = histOpen
            .Offset(0, 4).value = histHigh
            .Offset(0, 5).value = histLow
            .Offset(0, 6).value = histClose
            .Offset(0, 7).value = histVolume
            .Offset(0, 8).value = barCount
            .Offset(0, 9).value = WAP
            .Offset(0, 10).value = hasGaps
        End With
    End If
    
End Sub

Public Sub OpBars_UpdateHistoricalDataEnd(reqId As Long, startDate As String, endDate As String)

    'Dim ws As Worksheet, rg As Range
    Dim rgSymbol As Range, stillToDl As Long
    
    
    On Error Resume Next

    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
    
    AtmStrikesDlCount(1) = AtmStrikesDlCount(1) + 1
    
    If AtmStrikesDlCount(0) = AtmStrikesDlCount(1) Then
        rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Options prices received"
        Call RunCalendar
    Else
        stillToDl = AtmStrikesDlCount(0) - AtmStrikesDlCount(1)
        rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Waiting for prices: " & stillToDl & " contracts"
        Call PropagateStatus
    End If

End Sub

Public Sub CalcRV()

    Dim a() As Variant, u() As Variant, o() As Variant
    Dim strike As Variant, ohlc As Variant
    Dim ts As Variant
    Dim rgSymbol As Range
    Dim d As Scripting.Dictionary
    Dim p As Scripting.Dictionary
    Dim c As Scripting.Dictionary
    
    On Error Resume Next

    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
    rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Calculating RV"
    
    
    'ReDim RvData(0 To UBound(UndBars.keys()), 0 To 18)
    ' initialise min and max values
    ChartsMinMax(0, 0) = 1.79769313486231E+308
    ChartsMinMax(1, 0) = 1.79769313486231E+308
    ChartsMinMax(2, 0) = 1.79769313486231E+308
    ChartsMinMax(3, 0) = 1.79769313486231E+308
    ChartsMinMax(4, 0) = 1.79769313486231E+308
    ChartsMinMax(0, 1) = -1.79769313486231E+308
    ChartsMinMax(1, 1) = -1.79769313486231E+308
    ChartsMinMax(2, 1) = -1.79769313486231E+308
    ChartsMinMax(3, 1) = -1.79769313486231E+308
    ChartsMinMax(4, 1) = -1.79769313486231E+308
    
    
    ReDim a(0 To UBound(UndlBars.keys()), 0 To 18)
    Dim i As Long
    i = 0
    For Each ts In UndlBars.keys()
        
        strike = AtmStrikes(ts)
        
        Set p = OpBars_short(strike)
        Set c = OpBars_long(strike)
            
        If Not IsEmpty(p(ts)) And Not IsEmpty(c(ts)) Then
        
            a(i, 0) = ts
    
            u = UndlBars(ts)
            
            a(i, 1) = u(0) 'open
            a(i, 2) = u(1) 'high
            a(i, 3) = u(2) 'low
            a(i, 4) = u(3) 'close
            
            If ChartsMinMax(1, 0) > u(2) Then ChartsMinMax(1, 0) = u(2)
            If ChartsMinMax(1, 1) < u(1) Then ChartsMinMax(1, 1) = u(1)
            
            
            a(i, 5) = strike 'strike
            If ChartsMinMax(3, 0) > strike Then ChartsMinMax(3, 0) = strike
            If ChartsMinMax(3, 1) < strike Then ChartsMinMax(3, 1) = strike
            
            a(i, 6) = Abs(u(3) - strike) 'distancee
            If ChartsMinMax(4, 0) > a(i, 6) Then ChartsMinMax(4, 0) = a(i, 6)
            If ChartsMinMax(4, 1) < a(i, 6) Then ChartsMinMax(4, 1) = a(i, 6)
            
            'short
            ohlc = p(ts)
            If BarTimeAverage Then
                a(i, 7) = ohlc(0) 'avg bid
                a(i, 8) = ohlc(3) 'avg ask
                a(i, 9) = (a(i, 7) + a(i, 8)) / 2
            Else
                a(i, 7) = ohlc(2) 'lowest mid
                a(i, 8) = ohlc(1) 'highest mid
                a(i, 9) = ohlc(3) 'last mid
            End If
            
            'long
            ohlc = c(ts)
            If BarTimeAverage Then
                a(i, 10) = ohlc(0) 'avg bid
                a(i, 11) = ohlc(3) 'avg ask
                a(i, 12) = (a(i, 10) + a(i, 11)) / 2
            Else
                a(i, 10) = ohlc(2) 'lowest mid
                a(i, 11) = ohlc(1) 'highest mid
                a(i, 12) = ohlc(3) 'last mid
            End If
            
                
                
            'Calendar
            If BarTimeAverage Then
                a(i, 13) = a(i, 10) - a(i, 8) 'bid calendar: + k long -> bid, - vk short -> ask (avg bid - avg ask)
                a(i, 14) = a(i, 11) - a(i, 7) 'ask calendar: - vk long -> ask, + k short -> bid (avg ask - avg bid)
                a(i, 15) = (a(i, 13) + a(i, 14)) / 2
            Else
                a(i, 13) = a(i, 10) - a(i, 8) 'low calendar: lowest mid long - highest mid short
                a(i, 14) = a(i, 11) - a(i, 7) 'high calendar: highest mid long - lowest mid short
                a(i, 15) = a(i, 12) - a(i, 9) 'close calendar: last mid put - last mid call
            End If
            
            
            
            If ChartsMinMax(2, 0) > a(i, 13) Then ChartsMinMax(2, 0) = a(i, 13)
            If ChartsMinMax(2, 1) < a(i, 14) Then ChartsMinMax(2, 1) = a(i, 14)
            
            'rv
            If BarTimeAverage Then
                a(i, 16) = a(i, 13) / a(i, 4) 'bid
                a(i, 17) = a(i, 14) / a(i, 4) 'ask
                a(i, 18) = (a(i, 16) + a(i, 17)) / 2
            Else
                a(i, 16) = a(i, 13) / a(i, 4) 'lowest mid straddle/ last mid undl
                a(i, 17) = a(i, 14) / a(i, 4) 'highest mid straddle / last mid undl
                a(i, 18) = a(i, 15) / a(i, 4) 'close straddle/ last mid undl
            End If
            
            If ChartsMinMax(0, 0) > a(i, 16) Then ChartsMinMax(0, 0) = a(i, 16)
            If ChartsMinMax(0, 1) < a(i, 17) Then ChartsMinMax(0, 1) = a(i, 17)
            
            i = i + 1
                
        End If
        
    Next

    RvData = a

    rgSymbol.Offset(Row_CAL_STATUS, 0).value = "RV calculated"
    
    Call RunCalendar

End Sub





Public Sub DisplayFrontendData()
    Dim rg As Range, rgSymbol As Range
    Dim d As Range, c As ChartObject, symLen As Integer
    
    On Error Resume Next

    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL)
    Set rg = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_FRONTDATA)
    
    rg.Offset(-2, 1).value = SymbolConid(0)
    
    ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(rg, rg.End(xlDown)).Resize(, UBound(RvData, 2) + 1).ClearContents
    
    'rg.Resize(UBound(RvData, 2) + 1, UBound(RvData, 1) + 1).value = Application.Transpose(RvData)
    Set rg = rg.Resize(UBound(RvData, 1) + 1, UBound(RvData, 2) + 1)
    rg.value = RvData
    
    
    
    'set headline in RV chart, with bold symbol
    symLen = Len(SymbolConid(0))
    Set c = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).ChartObjects("Cal_Rv")
    With c.Chart.ChartTitle
        .Text = "Calendar RV " & SymbolConid(0)
        .Characters(Start:=13, length:=symLen).Font.FontStyle = "Bold"
    End With
    

    'Adjust min and max x-values for each chart
    Set c = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).ChartObjects("Cal_Rv")
    With c.Chart.Axes(xlValue)
        .MinimumScale = Util.RoundChartMin(ChartsMinMax(0, 0)) ' * (1 - C_CAL_CHARTSPAD)
        .MaximumScale = ChartsMinMax(0, 1) * (1 + C_CAL_CHARTSPAD)
    End With
    
    Set c = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).ChartObjects("Cal_Undl")
    With c.Chart.Axes(xlValue)
        .MinimumScale = Util.RoundChartMin(ChartsMinMax(1, 0)) ' * (1 - C_CAL_CHARTSPAD)
        .MaximumScale = ChartsMinMax(1, 1) * (1 + C_CAL_CHARTSPAD)
    End With
    
    Set c = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).ChartObjects("Cal_Cal")
    With c.Chart.Axes(xlValue)
        .MinimumScale = Util.RoundChartMin(ChartsMinMax(2, 0)) ' * (1 - C_CAL_CHARTSPAD)
        .MaximumScale = ChartsMinMax(2, 1) * (1 + C_CAL_CHARTSPAD)
    End With
    
    Set c = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).ChartObjects("Cal_AtmStrike")
    With c.Chart.Axes(xlValue)
        .MinimumScale = Util.RoundChartMin(ChartsMinMax(3, 0)) ' * (1 - C_CAL_CHARTSPAD)
        .MaximumScale = ChartsMinMax(3, 1) * (1 + C_CAL_CHARTSPAD)
    End With
    
    Set c = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).ChartObjects("Cal_AtmDist")
    With c.Chart.Axes(xlValue)
        .MinimumScale = 0 'ChartsMinMax(4, 0) * (1 - C_CAL_CHARTSPAD)
        .MaximumScale = ChartsMinMax(4, 1) + 0.1 '* (1 + 3 * C_CAL_CHARTSPAD)
    End With
    
    rgSymbol.Offset(Row_CAL_STATUS, 0).value = "Data sent to Frontend"
    
    Call RunCalendar
    
End Sub



Sub CopyCalendarRvToSparkline(ByRef symbolId As Long)

    Dim rg As Range, rgRvIn As Range, rgTsIn As Range
    
    On Error Resume Next

    
    
    Set rg = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range("Cal_RvMid")
    
    If rg.Rows.Count > C_WLC_LEN_SPARLINEDATAFIELD Then
        'copy only what fits into sprkline data field from end
        
        'rv data
        Set rgRvIn = rg.Offset(rg.Rows.Count - C_WLC_LEN_SPARLINEDATAFIELD, 0).Resize(C_WLC_LEN_SPARLINEDATAFIELD, 1)
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLC_SPARKLINEDATA).Offset(0, C_WLC_WID_SPARLINEDATAFIELD * symbolId + 1).Resize(rgRvIn.Rows.Count, 1).value = rgRvIn.value
        
        'datetime
        Set rg = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range("Cal_Ts")
        Set rgTsIn = rg.Offset(rg.Rows.Count - C_WLC_LEN_SPARLINEDATAFIELD, 0).Resize(C_WLC_LEN_SPARLINEDATAFIELD, 1)
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLC_SPARKLINEDATA).Offset(0, C_WLC_WID_SPARLINEDATAFIELD * symbolId).Resize(rgTsIn.Rows.Count, 1).value = rgTsIn.value
    Else
        Set rgRvIn = rg
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLC_SPARKLINEDATA).Offset(0, C_WLC_WID_SPARLINEDATAFIELD * symbolId + 1).Resize(rgRvIn.Rows.Count, 1).value = rgRvIn.value
        
        Set rgTsIn = ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range("Cal_Ts")
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLC_SPARKLINEDATA).Offset(0, C_WLC_WID_SPARLINEDATAFIELD * symbolId).Resize(rgTsIn.Rows.Count, 1).value = rgTsIn.value
    
    
    
    
    End If
End Sub


Private Sub PropagateStatus()

    On Error Resume Next


    If IsWatchlistRequest > 0 Then
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_CALENDAR_HISTCALCSTATUS).value = _
            ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL).Offset(Row_CAL_STATUS, 0).value
    End If
End Sub






Attribute VB_Name = "mStraddle"
Option Explicit

Private sheetId As Long
Private doDebug As Boolean
Private DropDown_BarSizesIB() As Variant
Private DropDown_BarSizesDisplay() As Variant
Private DropDown_BarDurationsIB() As Variant
Private DropDown_BarDurationsDisplayBox As Variant
Private SymbolConid() As Variant
Private OvExpiriesStrikes() As Variant
Private UndlBars As Scripting.Dictionary
Private ChainStrikes() As Variant
Private AtmStrikes As Scripting.Dictionary
Private AtmStrikesUnique() As Variant
Private AtmStrikesDlCount() As Variant
Private OpBars_put As Scripting.Dictionary
Private OpBars_call As Scripting.Dictionary
Private RvData() As Variant
Private ChartsMinMax() As Double
Private IsWatchlistRequest As Long
Private BarTimeAverage As Boolean








Public Sub Initialise()
    doDebug = False
    sheetId = 3
    IsWatchlistRequest = 0
    
    
    ReDim SymbolConid(0 To 1)
    ReDim OvExpiriesStrikes(0 To 3)
    ReDim ChainStrikes(0 To 6)
    ReDim AtmStrikesDlCount(0 To 2)
    ReDim RvData(0 To 19)
    ReDim ChartsMinMax(0 To 4, 0 To 1)
    DropDown_BarSizesIB = Array("1 min", "2 mins", "5 mins", "10 mins")
    DropDown_BarSizesDisplay = Array("1 min. (2 days)", "2 mins (2 days)", "5 mins (1 week)", "10 mins (1 week)")
    DropDown_BarDurationsIB = Array("2 D", "2 D", "1 W", "1 W")
    DropDown_BarDurationsDisplayBox = Array("1 min. -> 2 days", "2 min. -> 2 days", "5 min -> 1 week", "10 mins -> 1 week")
    Call InitBarDurationDropdown
    Call InitBarTimeAverage
End Sub


' Legal ones are: 1 secs, 5 secs, 10 secs, 15 secs, 30 secs, 1 min, 2 mins, 3 mins, 5 mins, 10 mins, 15 mins, 20 mins, 30 mins, 1 hour, 2 hours, 3 hours, 4 hours, 8 hours, 1 day, 1W, 1M

Sub InitBarTimeAverage()
    BarTimeAverage = True
    'ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).ChkbBarTimeAverage.value = True
    ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Shapes("Check Box 3").ControlFormat.value = xlOn
End Sub




Public Sub SetBarTimeAverage(ByRef v As Long)
    If v = 1 Then
        BarTimeAverage = True
    Else
        BarTimeAverage = False
    End If
End Sub



Sub InitBarDurationDropdown()
    On Error Resume Next
    Dim idx As Long
    idx = 1
    Worksheets(STR_SHEET_STRADDLE).ComboBox1.List = DropDown_BarSizesDisplay()
    ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).ComboBox1.ListIndex = idx
    ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_BARDURATION).value = DropDown_BarDurationsDisplayBox(idx)
End Sub

Public Sub BarDurationDropdownChange()

    Dim idx As Long
    
    idx = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).ComboBox1.ListIndex
    
    'Dim s As String
    's = DropDown_BarDurationsDisplayBox(idx)
    ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_BARDURATION).value = DropDown_BarDurationsDisplayBox(idx)

End Sub


Public Sub SetIsWatchlistRequest(ByRef nbr As Long)
    IsWatchlistRequest = nbr
End Sub








'=========================================
' Request contract details for underlying
'=========================================

Public Sub ReqUndlConId(ByRef triggerRun As Long)

    Dim reqId As Long, symbol As String, exchange As String, stype As String, curr As String
    Dim rgSymbol As Range, rgIn As Range
    Dim rg As Range
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub
    'Call CheckChaf
    
    'Set rgIn = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(Cell_str)
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
    
    
    If rgSymbol.Offset(Row_STDL_SYMBOL, 0).value = "" Then
        rgSymbol.Offset(Row_STDL_EXPIRY, 0).ClearContents
        rgSymbol.Offset(Row_STDL_STATUS, 0).ClearContents
        'rgSymbol.Offset(0, Row_STDL_UNDLPRICE).ClearContents
        'rgSymbol.Offset(0, Row_STDL_UNDLDATETIME).ClearContents
        'rgSymbol.Offset(0, Row_STDL_ATM).ClearContents
        'rgSymbol.Offset(0, Row_STDL_PPUT).ClearContents
        'rgSymbol.Offset(0, Row_STDL_PCALL).ClearContents
        'rgSymbol.Offset(0, Row_STDL_RV).ClearContents
        'rgSymbol.Offset(0, Row_STDL_LASTUPDATE).ClearContents

        Set rg = rgSymbol.Offset(Row_STDL_EXPIRIES, 0)
        ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(rg, rg.Offset(24, 0)).ClearContents
        Exit Sub
    End If
    
   
    rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Retrieving symbol info"
    
    ' delete old values
    'If IsWatchlistRequest = 0 Then
        'rgSymbol.Offset(Row_STDL_EXPIRY, 0).ClearContents
        rgSymbol.Offset(Row_STDL_STATUS, 0).ClearContents
        'rgSymbol.Offset(0, Row_STDL_UNDLPRICE).ClearContents
        'rgSymbol.Offset(0, Row_STDL_UNDLDATETIME).ClearContents
        'rgSymbol.Offset(0, Row_STDL_ATM).ClearContents
        'rgSymbol.Offset(0, Row_STDL_PPUT).ClearContents
        'rgSymbol.Offset(0, Row_STDL_PCALL).ClearContents
        'rgSymbol.Offset(0, Row_STDL_RV).ClearContents
        'rgSymbol.Offset(0, Row_STDL_LASTUPDATE).ClearContents
    'End If

    Set rg = rgSymbol.Offset(Row_STDL_EXPIRIES, 0)
    
    'ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(rg, rg.Offset(24, 0)).ClearContents
        
        
    reqId = ID_STDL_UNDLCONID + triggerRun * 100000 + Util.IncrementReqId(sheetId)
    'reqId = ID_STDL_UNDLCONID + Util.IncrementReqId(sheetId)
    
    'get contract details from sheet
    symbol = rgSymbol.Offset(Row_STDL_SYMBOL, 0).value
    exchange = STR_EXCHANGE_SMART
    stype = STR_STYPE_STK
    curr = STR_CURR_USD

    
    ' create contract structure
    Dim lContractInfo As TWSLib.IContract
    Set lContractInfo = Api.Tws.createContract()
    
    With lContractInfo
        .symbol = UCase(symbol)
        .secType = UCase(stype)
        '.lastTradeDateOrContractMonth = contractTable(id, Col_LASTTRADEDATE).value
        '.strike = contractTable(id, Col_STRIKE).value
        '.right = UCase(contractTable(id, Col_RIGHT).value)
        '.multiplier = UCase(contractTable(id, Col_MULTIPLIER).value)
        .exchange = UCase(exchange)
        '.primaryExchange = UCase(contractTable(id, Col_PRIMEXCH).value)
        .currency = UCase(curr)
        '.localSymbol = UCase(contractTable(id, Col_LOCALSYMBOL).value)
        '.conId = contractTable(id, Col_CONID).value
        '.includeExpired = queryTable(id, Col_INCLUDEEXPIRED).value
    End With
    
    Api.Tws.reqContractDetailsEx reqId, lContractInfo
   
End Sub

Public Sub UpdateUndlConId(ByVal reqId As Long, ByVal ContractDetails As TWSLib.IContractDetails)

    Dim ws As Worksheet, rg As Range
    Dim contract As TWSLib.IContract
    Dim rgSymbol As Range
    Dim symbolId As Long
    
    On Error Resume Next

    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
    Set contract = ContractDetails.contract
    
    ' write to watchlist sheet
    rgSymbol.Offset(Row_STDL_NAME, 0).value = StrConv(ContractDetails.longName, vbProperCase)
    SymbolConid(0) = contract.symbol
    SymbolConid(1) = contract.conid
    
    ' write conId to cachewl sheet
    'Set rg = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolid)
    'rg.Offset(Row_SYMBOL, 1).value = contract.symbol
    'rg.Offset(Row_STYPE, 1).value = contract.secType
    'rg.Offset(Row_EXCHANGE, 1).value = contract.exchange
    'rg.Offset(Row_PRIMEXCHANGE, 1).value = contract.primaryExchange
    'rg.Offset(Row_CURRENCY, 1).value = contract.currency
    'rg.Offset(Row_CONID, 1).value = contract.conid
    
    'rgSymbol.Offset(0, -2).value = rgSymbol.Offset(0, -2).value + 1
End Sub

Public Sub UpdateUndlConIdEnd(ByVal reqId)

    Dim rgSymbol As Range, triggerRun As Long
    
    On Error Resume Next

    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
    rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Symbol ok"

    triggerRun = CLng(Mid(reqId, 3, 1))
    
    If triggerRun = 1 Or IsWatchlistRequest > 0 Then
        Call RunStraddle
    End If

End Sub

Public Sub ErrorUndlConId(ByVal id As Long, ByVal errorCode As Long, ByVal errorMsg As String)

    Dim rgSymbol As Range
    Dim symbolId As Long
    
    On Error Resume Next

    symbolId = CLng(Mid(id, 4, 2))
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
    rgSymbol.Offset(Row_STDL_NAME, 0).value = ""
    rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Symbol invalid"
End Sub














Public Sub RunStraddle()

    'read contract data
    Dim ws As Worksheet, rg As Range
    Dim expiryStrikeDate As Date, expiryStrikeSymbol As String
    Dim reqId As Long, conid As Long, rg_conid As Range, rg_symbol As Range
    Dim symbol As String, exchange As String, stype As String, cur As String
    Dim rgSymbol As Range
    Dim status As String
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub
    'Call CheckChaf
    
    If Not IsArrayAllocated(SymbolConid) Then
        Initialise
    End If
    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL).Offset(Row_STDL_SYMBOL)
    status = rgSymbol.Offset(Row_STDL_STATUS).value
    
    If status = "Retrieving symbol info" Then
        'ReqUndlConId is working, escape circular calling
        Exit Sub
    End If
    
    If status = "" Then
        Call watchlist.PasteLtd(rgSymbol.Address, False)
        Call ReqUndlConId(1)
        Exit Sub
    End If
    
    If IsEmpty(SymbolConid(0)) Then
        Call ReqUndlConId(1)
        Exit Sub
    End If
    
    Call PropagateStatus
    
    ' treat unknown number of options contrats and hence unknown status message for that case
    If Left(status, 20) = "Waiting for prices: " Then
        status = "Waiting for prices: x contracts"
    End If
    
    
    Select Case status
    
        Case "Symbol ok", "RV updated", "Expiry does not exist" _
                , "Waiting for prices: x contracts"
            'new start: get download date of expiries and strikes
            
                ' symbol changed? Expiries we have are from today?
                expiryStrikeSymbol = OvExpiriesStrikes(0)
                expiryStrikeDate = OvExpiriesStrikes(1)
            
                If Not expiryStrikeSymbol = rgSymbol.value Or CDate(Int(expiryStrikeDate)) < Date Then
                    'download expiries
                    Call OpChainOverview_reqSecDefOP
                    Exit Sub
                Else
                    'use the data we have and continue with next step
                    rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Options chains complete"
                    Call RunStraddle
                    Exit Sub
                End If
            
            
        Case "Options chains complete"
            Call UndlBars_reqBars
            Exit Sub
            
        Case "Underlying complete"
            Call FindExpiryToQuery
            Exit Sub
            
            
        Case "Options expiry complete"
            '(symbolId)
            
            'check if we can use the strikes already queried: symbol changed? Strikes we have are from today?
        
            If Not ChainStrikes(2) = rgSymbol.value _
                Or Not ChainStrikes(3) = rgSymbol.Offset(0, Row_STDL_EXPIRY).value _
                Or CDate(Int(ChainStrikes(4))) < Date _
                Or IsEmpty(ChainStrikes(0)) _
                Or IsEmpty(ChainStrikes(1)) Then
                    Call ChainStrikes_reqCons
                    Exit Sub
            Else
                'use the data we have and continue with next step
                rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Options contracts received"
                Call RunStraddle
                Exit Sub
            End If
            
            
        Case "Options contracts received"
            Call FindStrikesToQuery
            Exit Sub
                             
        Case "ATM strikes complete"
            Call OpBars_reqBars
            Exit Sub
            
        Case "Options prices received"
            Call CalcRV
            Exit Sub
            
        Case "RV calculated"
            Call DisplayFrontendData
            Exit Sub
            
            
        Case "Data sent to Frontend"
            If IsWatchlistRequest = 0 Then
                rgSymbol.Offset(Row_STDL_STATUS, 0).value = "RV updated"
                Exit Sub
            Else
                Call watchlist.DeleteSparklineDatafield(0, IsWatchlistRequest)
                CopyStraddleRvToSparkline (IsWatchlistRequest)
                rgSymbol.Offset(Row_STDL_STATUS, 0).value = "RV updated"
                Call PropagateStatus
                IsWatchlistRequest = 0
            End If
            
            
        Case "Retrieving symbol info", "Symbol invalid", "No options available"
            'new start: but Ib does not have that symbol in its db
            Exit Sub

            
        'When one of the procs is running at the moment, just abort here
        Case "Requesting options chains", "Requesting underlying price", "Calculate expiry", _
                "Requesting available strikes", "Awaiting 2 options contracts", "Awaiting 1 options contract", _
                "Calculate strike", "Requesting options prices", _
                "Waiting for prices: 2 contracts", "Waiting for prices: 1 contract", "Calculating RV", _
 _
                "RV calculated"
            Exit Sub
            
            
        Case Else
            'MsgBox ("status not handled in RunStraddle: " & status)
            
    End Select
    

    
    
End Sub
    

'======================================================
' Get options chains expiries and strikes
' (not all strikes might be available for all expiries)
'======================================================


Public Sub OpChainOverview_reqSecDefOP()


    
    'Dim wsUser As Worksheet, wsCache As Worksheet, rg As Range,
    Dim conid As Long, symbol As String, stype As String, reqId As Long
    Dim rgSymbol As Range, rg As Range
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub


    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
    
    'status
    rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Requesting options chains"
    
    'delete old values
    OvExpiriesStrikes(0) = Empty
    OvExpiriesStrikes(1) = Empty
    OvExpiriesStrikes(2) = Empty
    OvExpiriesStrikes(3) = Empty
    
    Set rg = rgSymbol.Offset(Row_STDL_EXPIRIES)
    ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(rg, rg.Offset(24, 0)).ClearContents
    
    
    'SHEETOUTPUT: delete old values for expiries/strikes
    'wsCache.Range(rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 0), rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 0).End(xlDown)).ClearContents 'expiries
    'wsCache.Range(rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 1), rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 1).End(xlDown)).ClearContents 'strikes
    
    reqId = ID_STDL_OPCHAINOV + Util.IncrementReqId(sheetId)
        
    conid = SymbolConid(1)
    symbol = SymbolConid(0)
    stype = STR_STYPE_STK

    Api.Tws.reqSecDefOptParams reqId, symbol, "", stype, conid

End Sub

Public Sub OpChainOverview_updateSecDefOP(reqId As Long, _
                          exchange As String, _
                          undrlyingConId As Long, _
                          tradingClass As String, _
                          multiplier As String, _
                          expirationsList As String, _
                          strikesList As String)

    On Error Resume Next


    If exchange = "SMART" Then

        Dim rgSymbol As Range
        Dim expiries_str() As String, strikes_str() As String, xp() As Variant, st() As Variant
        'Dim symbolid As Long
        Dim i As Long
        Dim s As String
        
        
        'symbolid = CLng(Mid(CStr(reqId), 4, 2))
        
        'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolid)
        
        Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
        
        expiries_str() = Split(expirationsList, ";")
        strikes_str() = Split(strikesList, ";")
        
        ReDim xp(UBound(expiries_str))
        ReDim st(UBound(strikes_str))
        
        For i = 0 To UBound(expiries_str)
            s = expiries_str(i) '20210115
            xp(i) = DateSerial(Left(s, 4), Mid(s, 5, 2), right(s, 2))
            'SHEETOUTPUT
            'rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES + i, 0).value = xp(i)
        Next
        
        For i = 0 To UBound(strikes_str)
            st(i) = CDbl(strikes_str(i))
            'SHEETOUTPUT
            'rgCacheSymbol.Offset(Row_EXPIRYSTRIKE + i, 0).value = st(i)
        Next


        OvExpiriesStrikes(0) = SymbolConid(0)
        OvExpiriesStrikes(1) = Now()
        OvExpiriesStrikes(2) = xp
        OvExpiriesStrikes(3) = st
        'SHEETOUTPUT
        'rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_DATES, 0).value = Now()
        
        'write expiries to straddle page
        rgSymbol.Offset(Row_STDL_EXPIRIES).Resize(UBound(xp), 1).value = Application.Transpose(xp)
        
    End If
    
    
    

    
    If doDebug Then
        ' DEBUG
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_opov").Range("A12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
        With rg
            .Offset(0, 0).value = Now()
            .Offset(0, 1).value = reqId
            .Offset(0, 2).value = exchange
            .Offset(0, 3).value = undrlyingConId
            .Offset(0, 4).value = tradingClass
            .Offset(0, 5).value = multiplier
            .Offset(0, 6).value = expirationsList
            .Offset(0, 7).value = strikesList
        End With
    End If
    
    
End Sub
           
Public Sub OpChainOverview_updateSecDefOPEnd(reqId As Long)

    Dim rgSymbol As Range
    ', symbolid As Long
    'symbolid = CLng(Mid(CStr(reqId), 4, 2))

    On Error Resume Next


    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)

    'status
    If IsEmpty(OvExpiriesStrikes(2)) Then
        rgSymbol.Offset(Row_STDL_STATUS, 0).value = "No options available"
    Else
        rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Options chains complete"
    End If
    
    Call RunStraddle

End Sub









'======================================================
' Get historical underlying prices
'======================================================

Public Sub UndlBars_reqBars()

    ' Fetch 5 min bars
    ' request historical data (reqType: 0 - historical data, 1 - historical ticks)
    
    'If Not CheckConnected Then Exit Sub
    
    'Dim ws As Worksheet, rg As Range
    Dim rgSymbol As Range
    Dim reqId As Long, conid As Long, rg_conid As Range, rg_symbol As Range, whatToShow As String
    Dim symbol As String, exchange As String, stype As String, cur As String
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub

    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
    
    
      
    
    rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Requesting underlying prices"
    
    
    Set UndlBars = New Scripting.Dictionary
    'Set UndlBars = New Scripting.Dictionary
    
    
    ' delete existing values for expiries/strikes
    'Set ws = ThisWorkbook.Worksheets(STR_SHEET_CACHE): Set rg = ws.Range(RG_CACHE_UNDLHISTPRICES)
    'ws.Range(rg, rg.End(xlDown)).Resize(, 5).ClearContents
        
        
        
    reqId = ID_STDL_UNDLBARS + Util.IncrementReqId(sheetId)
    
        
    symbol = SymbolConid(0)
    conid = SymbolConid(1)
    stype = STR_STYPE_STK
    exchange = STR_EXCHANGE_SMART
    cur = STR_CURR_USD
    
    
    ' get desired bar size and duration
    Dim idx As Long, barSizeStr As String, barDurationStr As String
    
    idx = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).ComboBox1.ListIndex
    barSizeStr = DropDown_BarSizesIB(idx)
    barDurationStr = DropDown_BarDurationsIB(idx)
    
    
    
    ' create and fill contract
    Dim lContractInfo As TWSLib.IContract
    Set lContractInfo = Api.Tws.createContract()
    
    ' fill contract structure
    With lContractInfo
        .symbol = UCase(symbol)
        .secType = UCase(stype)
        .exchange = UCase(exchange)
        .currency = UCase(cur)
        .conid = conid
    End With
    
    ' for underlying use only mid point, else the candle stick chart will look funny with open=AvBid and close=AvAsk
    whatToShow = STR_WHATTOSHOW_MIDPOINT
    'If BarTimeAverage Then
    '    whatToShow = STR_WHATTOSHOW_MIDPOINT
    'Else
    '    whatToShow = STR_WHATTOSHOW_BIDASK
    'End If

    

    ' query to ib api
    Dim endDateTime As String, duration As String, barSize As String
    Dim useRTH As Long, formatDate As Long, keepUpToDate As Boolean
    
    endDateTime = STR_EMPTY
    duration = barDurationStr
    barSize = barSizeStr
    useRTH = 1
    formatDate = 1
    keepUpToDate = False
    
    ' chart options
    Dim chartOptions As TWSLib.ITagValueList
    Set chartOptions = Api.Tws.createTagValueList()


    rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Waiting for underlying prices"
    Call PropagateStatus
    Api.Tws.reqHistoricalDataEx reqId, lContractInfo, endDateTime, duration, barSize, whatToShow, useRTH, formatDate, keepUpToDate, chartOptions
    
End Sub



Public Sub UndlBars_UpdateHistoricalData(reqId As Long, histDate As String, histOpen As Double, histHigh As Double, histLow As Double, histClose As Double, histVolume As Long, barCount As Long, WAP As Double, hasGaps As Long)
   
    
    ' check if array has been allocated already, adjust new upper bound accordingly
    
    On Error Resume Next


    If histClose > 0 Then
        UndlBars.Add histDate, Array(histOpen, histHigh, histLow, histClose, histVolume, barCount, WAP, hasGaps)
    End If
    
    

    'Dim s As String
    's = histDate
    'o = CDate(histDate)
    'DateSerial(Left(c, 4), mid(c, 5, 2), Right(c, 2))
    'o = CDate(Left(s, 4) & "-" & Mid(s, 5, 2) & "-" & Mid(s, 7, 2) & " " & Right(s, 8))
    'UndlHisData(1, newUpBound) = CDate(Left(s, 4) & "-" & Mid(s, 5, 2) & "-" & Mid(s, 7, 2) & " " & right(s, 8))
    
    
    If doDebug Then
        ' DEBUG
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_undlBars").Range("A12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg 'sheet.Rows(rowId)
            .Offset(0, 0).value = Now
            .Offset(0, 1).value = histDate
            .Offset(0, 2).value = histOpen
            .Offset(0, 3).value = histHigh
            .Offset(0, 4).value = histLow
            .Offset(0, 5).value = histClose
            .Offset(0, 6).value = histVolume
            .Offset(0, 7).value = barCount
            .Offset(0, 8).value = WAP
            .Offset(0, 9).value = hasGaps
        End With
    End If
    
End Sub

Public Sub UndlBars_UpdateHistoricalDataEnd(reqId As Long, startDate As String, endDate As String)

    Dim ws As Worksheet, rg As Range
    Dim rgSymbol As Range
    
    On Error Resume Next

    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
    
    rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Underlying complete"
    
    Call RunStraddle

End Sub










'======================
' Expiry for RV options
'======================


Public Sub FindExpiryToQuery()

    Dim rgSymbol As Range, xp() As Variant, i As Long
    Dim expiry As Variant
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolid)
        
    On Error Resume Next

        
        
    rgSymbol.Offset(Row_STDL_STATUS) = "Calculate expiry"
    'rgSymbol.Offset(0, Row_STDL_EXPIRYTOQUERY).ClearContents
    

    'DEBUG:
    ' read in underlying last prices and strikes available for underlying manually
    'Dim ws As Worksheet, rg As Range, expiries() As Variant, tmparr() As Variant
    'ReDim expiries(0 To C_CNTROWS_WATCHLISTSTRADDLES)
    'Set ws = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL): Set rg = ws.Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(Row_EXPIRYSTRIKE, C_CNTCOLS_WLOP * symbolId)
    'tmparr = ws.Range(rg, rg.End(xlDown)).value
    'expiries(symbolId) = Application.Transpose(Application.index(tmparr, 0, 1))


    'check if an expiry is already present (check its existence)
    
    
    xp = OvExpiriesStrikes(2)
    
    'If IsWatchlistRequest <> 0 Then
    '    expiry = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(IsWatchlistRequest, Col_USR_EXPIRYTOQUERY).value
    '    rgSymbol.Offset(Row_STDL_EXPIRY, 0).value = expiry
    'Else
    expiry = rgSymbol.Offset(Row_STDL_EXPIRY, 0)
    'End If
    
    
    If Not expiry = "" Then
    
        ' does it exist
        For i = 0 To UBound(xp)
            If xp(i) >= expiry Then
                Exit For
            End If
        Next
        
        If Not expiry = xp(i) Then
            rgSymbol.Offset(Row_STDL_STATUS, 0) = "Expiry does not exist"
            Call PropagateStatus
            Exit Sub
        End If
    
    
    Else

        'load (user manipulatable) last trade date
        Dim ltd As Date, ExpiryToQuery As Date
        ltd = rgSymbol.Offset(Row_STDL_LTD, 0).value
        
    

        
        For i = 0 To UBound(xp) - 1
            If xp(i) > ltd Then
                ExpiryToQuery = xp(i)
                Exit For
            End If
        Next
        
        If ExpiryToQuery = Empty Then
            MsgBox ("Could not locate an expiry after earnings date. Please chose closer earnings date")
            Exit Sub
        End If
        
        rgSymbol.Offset(Row_STDL_EXPIRY, 0).value = ExpiryToQuery
        'rgCacheSymbol.Offset(Row_EXPIRYTOQUERY, 1).value = ExpiryToQuery

    End If
    
        rgSymbol.Offset(Row_STDL_STATUS, 0) = "Options expiry complete"
    
    Call RunStraddle
    
End Sub

















'======================
' Strikes for RV options
'======================

Public Sub ChainStrikes_reqCons()




    Dim rgSymbol As Range, rg As Range
    
    
    On Error Resume Next

    
    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolid)

    rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Requesting available strikes"


    'delete old values
    ChainStrikes(0) = Empty
    ChainStrikes(1) = Empty
    ChainStrikes(2) = Empty
    ChainStrikes(3) = Empty
    ChainStrikes(4) = Empty
    ChainStrikes(5) = Empty
    ChainStrikes(6) = Empty
    
    'put strikes
    'Set rg = rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 1)
    'ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(rg, rg.End(xlDown)).ClearContents
    
    'call strikes
    'Set rg = rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 2)
    'ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(rg, rg.End(xlDown)).ClearContents
    
    'ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(Row_EXPIRYSTRIKE_DATES, C_CNTCOLS_WLOP * symbolid + 1).value = ""
    
    
    Dim expiry As Date, right As Variant, oid As Long, reqId As Long
    
    expiry = rgSymbol.Offset(Row_STDL_EXPIRY).value
    
    ChainStrikes(2) = expiry
    
    'If expiry = "" Then
    '    MsgBox ("Expiry field of that security is empty")
    '    Exit Sub
    'End If

    For Each right In Array("Put", "Call")
        
        If right = "Put" Then oid = 0 Else oid = 1
        
        'reqid
        reqId = ID_STDL_CHAINSTRIKES + oid * 100000 + Util.IncrementReqId(sheetId)
        ChainStrikes(5 + oid) = reqId
            
        ' create contract structure
        Dim lContractInfo As TWSLib.IContract
        Set lContractInfo = Api.Tws.createContract()
        
        With lContractInfo
            .symbol = SymbolConid(0)
            .secType = STR_STYPE_OPT
            .exchange = STR_EXCHANGE_SMART
            .currency = STR_CURR_USD
            .lastTradeDateOrContractMonth = Format(expiry, "yyyymmdd")
            '.strike = strike
            .right = right
            '.multiplier = UCase(contractTable(id, Col_MULTIPLIER).value)
            '.primaryExchange = UCase(contractTable(id, Col_PRIMEXCH).value)
            '.localSymbol = UCase(contractTable(id, Col_LOCALSYMBOL).value)
            '.conid = contractTable(id, Col_CONID).value
            '.includeExpired = queryTable(id, Col_INCLUDEEXPIRED).value
        End With

        Api.Tws.reqContractDetailsEx reqId, lContractInfo
        'Exit For
    Next
    'Exit For

    rgSymbol.Offset(Row_STDL_STATUS, 0) = "Awaiting 2 options contracts"
    Call PropagateStatus

End Sub


Public Sub ChainStrikes_UpdateConDet(ByVal reqId As Long, ByVal ContractDetails As TWSLib.IContractDetails)
    
    Dim contract As TWSLib.IContract
    Dim putCall As Long
    Dim dic As Scripting.Dictionary
    
    On Error Resume Next

    If reqId = ChainStrikes(5) Or reqId = ChainStrikes(6) Then
        putCall = CLng(Mid(CStr(reqId), 3, 1))
        
        Set contract = ContractDetails.contract
        
        If IsEmpty(ChainStrikes(putCall)) Then
            Set dic = New Scripting.Dictionary
        Else
            Set dic = ChainStrikes(putCall)
        End If
        
        dic.Add contract.strike, contract.conid
        Set ChainStrikes(putCall) = dic
    End If
    
End Sub


Public Sub ChainStrikes_UpdateConDetEnd(ByVal reqId)

    Dim rgStatus As Range, symbolId As Long
    
    
    On Error Resume Next

    ChainStrikes(2) = SymbolConid(0)
    ChainStrikes(4) = Now()
    
    
    'ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(Row_EXPIRYSTRIKE_DATES, C_CNTCOLS_WLOP * symbolid + 1).value = Now()
    
    ' set status
    Set rgStatus = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL).Offset(Row_STDL_STATUS, 0)
    
    
    If ChainStrikes(5) = reqId Then
        ChainStrikes(5) = "ok"
    ElseIf ChainStrikes(6) = reqId Then
        ChainStrikes(6) = "ok"
    End If
    'ChainStrikes(symbolId, 5 + putCall) = "ok"
    
    If ChainStrikes(5) = "ok" And ChainStrikes(6) = "ok" Then
        rgStatus.value = "Options contracts received"
        Call RunStraddle
    ElseIf ChainStrikes(5) = "ok" Or ChainStrikes(6) = "ok" Then
        rgStatus.value = "Awaiting 1 options contract"
        Call PropagateStatus
    End If
    
    
    '####
    'If rgStatus.value = "Awaiting 2 options contracts" Then
    '    rgStatus.value = "Awaiting 1 options contract"
    'ElseIf rgStatus.value = "Awaiting 1 options contract" Then
    '    rgStatus.value = "Options contracts received"
    '    'Call RunStraddle(symbolid)
    'End If

End Sub







Public Sub FindStrikesToQuery()



    Dim rgSymbol As Range
    Dim commonStrikes() As Variant, keys() As Variant, keysSorted() As Variant
    Dim ts As Variant, ohlc() As Variant
    Dim strikes() As Variant

    On Error Resume Next

    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
    rgSymbol.Offset(Row_STDL_STATUS, 0) = "Calculate ATM strikes"
    'Set AtmStrikes = CreateObject("Scripting.Dictionary")
    Set AtmStrikes = New Scripting.Dictionary

    'get common strikes from put and call
    commonStrikes = Util.CommonStrikesPutCall(ChainStrikes(0), ChainStrikes(1))
    
    'get all timestamps from undlbars
    keys = UndlBars.keys()
    Call Util.QuickSort(keys, LBound(keys), UBound(keys))
    
    'for each timestamp: get closest strike, plug to dict
    For Each ts In keys
        ohlc = UndlBars(ts)
        AtmStrikes.Item(ts) = Util.FindTheClosestStrike(CDbl(ohlc(3)), commonStrikes)
    Next
    'get unique strikes to query
    strikes = AtmStrikes.Items()
    AtmStrikesUnique = UniqueArrayValues(strikes)

    rgSymbol.Offset(Row_STDL_STATUS, 0) = "ATM strikes complete"
    
    Call RunStraddle

End Sub









'======================================================
' Get historical underlying prices
'======================================================

Public Sub OpBars_reqBars()
    
    'doDebug = True
    
    'If Not CheckConnected Then Exit Sub
    
    Dim rgSymbol As Range
    Dim reqId As Long
    Dim symbol As String, exchange As String, stype As String, cur As String, expiry As Date
    Dim reqIdTail As Long, uniqueStrikeNbr As Long, useRTH As Integer, formatDate As Integer, keepUpToDate As Boolean
    Dim endDateTime As String, duration As String, barSize As String, whatToShow As String
    Dim lContractInfo As TWSLib.IContract, idx As Long, strike As Variant, putCall As Variant, oid As Integer
    
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub

    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)

    rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Requesting options prices"

    
    Set OpBars_put = New Scripting.Dictionary
    Set OpBars_call = New Scripting.Dictionary
    reqIdTail = Util.IncrementReqId(sheetId)
    

    
    AtmStrikesDlCount(0) = 0
    AtmStrikesDlCount(1) = 0
    AtmStrikesDlCount(2) = reqIdTail
    
    symbol = SymbolConid(0)
    stype = STR_STYPE_OPT
    exchange = STR_EXCHANGE_SMART
    cur = STR_CURR_USD
    expiry = rgSymbol.Offset(Row_STDL_EXPIRY, 0)
    
    
    'DropDown_BarSizesIB = Array("2 mins", "5 mins", "10 mins")
    'DropDown_BarDurationsIB= Array("2 D", "1 W", "1 W")
    'DropDown_BarDurationsDisplayBox = Array("2 days (390 bars)", "1 week (390 bars)", "1 week (156 bars)")
    
    If BarTimeAverage Then
        whatToShow = STR_WHATTOSHOW_BIDASK
    Else
        whatToShow = STR_WHATTOSHOW_MIDPOINT
    End If
    
    
    ' get desired bar size and duration
    idx = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).ComboBox1.ListIndex
    endDateTime = STR_EMPTY
    duration = DropDown_BarDurationsIB(idx)
    barSize = DropDown_BarSizesIB(idx)
    useRTH = 1
    formatDate = 1
    keepUpToDate = False
    
    ' chart options
    Dim chartOptions As TWSLib.ITagValueList
    Set chartOptions = Api.Tws.createTagValueList()
    
    uniqueStrikeNbr = 0
    
    For Each strike In AtmStrikesUnique
    
        For Each putCall In Array("Put", "Call")
        
            If putCall = "Put" Then oid = 0 Else oid = 1

            reqId = ID_STDL_OPBARS + oid * 100000 + uniqueStrikeNbr * 1000 + reqIdTail
            
            Set lContractInfo = Api.Tws.createContract()
    
            With lContractInfo
                .symbol = SymbolConid(0)
                .secType = STR_STYPE_OPT
                .exchange = STR_EXCHANGE_SMART
                .currency = STR_CURR_USD
                .lastTradeDateOrContractMonth = Format(expiry, "yyyymmdd")
                .strike = strike
                .right = putCall
            End With
        
            AtmStrikesDlCount(0) = AtmStrikesDlCount(0) + 1
            Api.Tws.reqHistoricalDataEx reqId, lContractInfo, endDateTime, duration, barSize, whatToShow, useRTH, formatDate, keepUpToDate, chartOptions
            
            
            If doDebug Then
                ' DEBUG
                Dim rg As Range
                Set rg = ThisWorkbook.Worksheets("dump_OpBars").Range("A12")
                While rg.value <> ""
                    Set rg = rg.Offset(1, 0)
                Wend
            
                With rg 'sheet.Rows(rowId)
                    .Offset(0, 0).value = Now
                    .Offset(0, 1).value = reqId
                    .Offset(0, 2).value = SymbolConid(0)
                    .Offset(0, 3).value = stype
                    .Offset(0, 4).value = Format(expiry, "yyyymmdd")
                    .Offset(0, 5).value = strike
                    .Offset(0, 6).value = putCall
                End With
            End If
            
            
            
            
            Call Util.TakeNap(100)
        Next
        uniqueStrikeNbr = uniqueStrikeNbr + 1
    Next

    
    rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Waiting for prices: " & CStr(AtmStrikesDlCount(0)) & " contracts"
    Call PropagateStatus
    
    

End Sub



Public Sub OpBars_UpdateHistoricalData(reqId As Long, histDate As String, histOpen As Double, histHigh As Double, histLow As Double, histClose As Double, histVolume As Long, barCount As Long, WAP As Double, hasGaps As Long)
   
    'doDebug = True
    Dim reqIdTail As Long, putCall As Long, uniqueStrikeNbr As Long
    Dim dic As Scripting.Dictionary, strike As Variant
    
    
    On Error Resume Next
    
    reqIdTail = CLng(right(CStr(reqId), 3))
    putCall = CLng(Mid(CStr(reqId), 3, 1))
    uniqueStrikeNbr = CLng(Mid(CStr(reqId), 4, 2))
    
    If reqIdTail = AtmStrikesDlCount(2) Then
    
        strike = AtmStrikesUnique(uniqueStrikeNbr)
        If putCall = 0 Then
            
            If IsEmpty(OpBars_put(strike)) Then
                Set dic = New Scripting.Dictionary
            Else
                Set dic = OpBars_put(strike)
            End If
            
            dic.Item(histDate) = Array(histOpen, histHigh, histLow, histClose, histVolume, barCount, WAP, hasGaps)
            Set OpBars_put(strike) = dic
        Else
            If IsEmpty(OpBars_call(strike)) Then
                Set dic = New Scripting.Dictionary
            Else
                Set dic = OpBars_call(strike)
            End If
            
            dic.Item(histDate) = Array(histOpen, histHigh, histLow, histClose, histVolume, barCount, WAP, hasGaps)
            Set OpBars_call(strike) = dic
        End If
    End If
    
    
    
    If doDebug Then
        ' DEBUG
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_OpBars").Range("I12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg 'sheet.Rows(rowId)
            .Offset(0, 0).value = Now
            .Offset(0, 1).value = reqId
            .Offset(0, 2).value = histDate
            .Offset(0, 3).value = histOpen
            .Offset(0, 4).value = histHigh
            .Offset(0, 5).value = histLow
            .Offset(0, 6).value = histClose
            .Offset(0, 7).value = histVolume
            .Offset(0, 8).value = barCount
            .Offset(0, 9).value = WAP
            .Offset(0, 10).value = hasGaps
        End With
    End If
    
End Sub

Public Sub OpBars_UpdateHistoricalDataEnd(reqId As Long, startDate As String, endDate As String)

    'Dim ws As Worksheet, rg As Range
    Dim rgSymbol As Range, stillToDl As Long
    
    On Error Resume Next

    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
    
    AtmStrikesDlCount(1) = AtmStrikesDlCount(1) + 1
    
    If AtmStrikesDlCount(0) = AtmStrikesDlCount(1) Then
        rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Options prices received"
        'Dim a As Scripting.Dictionary, c() As Variant
        'Set a = OpBars_put(50): c = a.Items()(1) '("20190930 16:55:00")
        
        Call RunStraddle
    Else
        stillToDl = AtmStrikesDlCount(0) - AtmStrikesDlCount(1)
        rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Waiting for prices: " & stillToDl & " contracts"
        Call PropagateStatus
    End If

    
End Sub

Public Sub CalcRV()

    Dim a() As Variant, u() As Variant, o() As Variant
    Dim strike As Variant, ohlc As Variant
    Dim ts As Variant
    Dim rgSymbol As Range
    Dim d As Scripting.Dictionary
    Dim p As Scripting.Dictionary
    Dim c As Scripting.Dictionary
    
    On Error Resume Next

    
    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
    rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Calculating RV"
    
    
    'ReDim RvData(0 To UBound(UndBars.keys()), 0 To 18)
    ' initialise min and max values
    ChartsMinMax(0, 0) = 1.79769313486231E+308
    ChartsMinMax(1, 0) = 1.79769313486231E+308
    ChartsMinMax(2, 0) = 1.79769313486231E+308
    ChartsMinMax(3, 0) = 1.79769313486231E+308
    ChartsMinMax(4, 0) = 1.79769313486231E+308
    ChartsMinMax(0, 1) = -1.79769313486231E+308
    ChartsMinMax(1, 1) = -1.79769313486231E+308
    ChartsMinMax(2, 1) = -1.79769313486231E+308
    ChartsMinMax(3, 1) = -1.79769313486231E+308
    ChartsMinMax(4, 1) = -1.79769313486231E+308
    
    
    ReDim a(0 To UBound(UndlBars.keys()), 0 To 18)
    Dim i As Long
    i = 0
    For Each ts In UndlBars.keys()
        
        strike = AtmStrikes(ts)
        
        Set p = OpBars_put(strike)
        Set c = OpBars_call(strike)
            
        If Not IsEmpty(p(ts)) And Not IsEmpty(c(ts)) Then
        
            a(i, 0) = ts
    
            u = UndlBars(ts)
            'always OHLC with mid prices, no matter what BarTimeAverage is set to
            a(i, 1) = u(0) 'open
            a(i, 2) = u(1) 'high
            a(i, 3) = u(2) 'low
            a(i, 4) = u(3) 'close
            
            If ChartsMinMax(1, 0) > u(2) Then ChartsMinMax(1, 0) = u(2)
            If ChartsMinMax(1, 1) < u(1) Then ChartsMinMax(1, 1) = u(1)
            
            
            a(i, 5) = strike 'strike
            If ChartsMinMax(3, 0) > strike Then ChartsMinMax(3, 0) = strike
            If ChartsMinMax(3, 1) < strike Then ChartsMinMax(3, 1) = strike
            
            a(i, 6) = Abs(u(3) - strike) 'distancee
            If ChartsMinMax(4, 0) > a(i, 6) Then ChartsMinMax(4, 0) = a(i, 6)
            If ChartsMinMax(4, 1) < a(i, 6) Then ChartsMinMax(4, 1) = a(i, 6)
            
            'put
            ohlc = p(ts)
            If BarTimeAverage Then
                a(i, 7) = ohlc(0) 'avg bid
                a(i, 8) = ohlc(3) 'avg ask
                a(i, 9) = (a(i, 7) + a(i, 8)) / 2
            Else
                a(i, 7) = ohlc(2) 'lowest mid
                a(i, 8) = ohlc(1) 'highest mid
                a(i, 9) = ohlc(3) 'last mid
            End If
            
            'call
            ohlc = c(ts)
            If BarTimeAverage Then
                a(i, 10) = ohlc(0) 'avg bid
                a(i, 11) = ohlc(3) 'avg ask
                a(i, 12) = (a(i, 10) + a(i, 11)) / 2
            Else
                a(i, 10) = ohlc(2) 'lowest mid
                a(i, 11) = ohlc(1) 'highest mid
                a(i, 12) = ohlc(3) 'last mid
            End If
                
                
            'straddle
            If BarTimeAverage Then
                a(i, 13) = a(i, 7) + a(i, 10) 'bid straddle: avg bid put + avg bid call
                a(i, 14) = a(i, 8) + a(i, 11) 'ask straddle: avg ask put + avg ask call
                a(i, 15) = (a(i, 13) + a(i, 14)) / 2
            Else
                a(i, 13) = a(i, 7) + a(i, 10) 'low straddle: lowest mid put + lowest mid call
                a(i, 14) = a(i, 8) + a(i, 11) 'high straddle: highest mid put + highest mid call
                a(i, 15) = a(i, 9) + a(i, 12) 'close straddle: last mid put + last mid call
            End If
            If ChartsMinMax(2, 0) > a(i, 13) Then ChartsMinMax(2, 0) = a(i, 13)
            If ChartsMinMax(2, 1) < a(i, 14) Then ChartsMinMax(2, 1) = a(i, 14)
            
            'rv
            If BarTimeAverage Then
                a(i, 16) = a(i, 13) / a(i, 4) 'bid
                a(i, 17) = a(i, 14) / a(i, 4) 'ask
                a(i, 18) = (a(i, 16) + a(i, 17)) / 2
            Else
                a(i, 16) = a(i, 13) / a(i, 4) 'lowest mid straddle/ last mid undl
                a(i, 17) = a(i, 14) / a(i, 4) 'highest mid straddle / last mid undl
                a(i, 18) = a(i, 15) / a(i, 4) 'close straddle/ last mid undl
            End If
            If ChartsMinMax(0, 0) > a(i, 16) Then ChartsMinMax(0, 0) = a(i, 16)
            If ChartsMinMax(0, 1) < a(i, 17) Then ChartsMinMax(0, 1) = a(i, 17)
            
            i = i + 1
                
        End If
        
    Next

    RvData = a

    rgSymbol.Offset(Row_STDL_STATUS, 0).value = "RV calculated"
    
    Call RunStraddle

End Sub





Public Sub DisplayFrontendData()
    Dim rg As Range, rgSymbol As Range
    Dim d As Range, c As ChartObject, symLen As Integer
    
    On Error Resume Next

    
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
    Set rg = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_FRONTDATA)
    
    rg.Offset(-2, 1).value = SymbolConid(0)
    
    ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(rg, rg.Offset(UBound(RvData, 1) + 1)).Resize(, UBound(RvData, 2) + 1).ClearContents
    
    'rg.Resize(UBound(RvData, 2) + 1, UBound(RvData, 1) + 1).value = Application.Transpose(RvData)
    Set rg = rg.Resize(UBound(RvData, 1) + 1, UBound(RvData, 2) + 1)
    rg.value = RvData
    
    
    
    'set headline in RV chart, with bold symbol
    Call Main.SheetUnprotect(Worksheets(STR_SHEET_STRADDLE))
    symLen = Len(SymbolConid(0))
    Set c = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).ChartObjects("Stdl_Rv")
    With c.Chart.ChartTitle
        If BarTimeAverage Then
            .Text = "Straddle RV " & SymbolConid(0) '& " (time weighted average per bar)"
        Else
            .Text = "Straddle RV " & SymbolConid(0) '& " (closing mid per bar)"
        End If
        .Characters(Start:=13, length:=symLen).Font.FontStyle = "Bold"
    End With
    
    'set correct headlines in datafield
    Set rg = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_FRONTDATA)
    Dim ar() As String
    ReDim ar(0 To 2)
    If BarTimeAverage Then
        ar(0) = "Av. bid"
        ar(1) = "Av. ask"
        ar(2) = "Av. mid"
    Else
        ar(0) = "Min. mid"
        ar(1) = "Max. mid"
        ar(2) = "Last mid"
    End If
    
    rg.Offset(-1, 7).Resize(1, 3) = ar
    rg.Offset(-1, 10).Resize(1, 3) = ar
    rg.Offset(-1, 13).Resize(1, 3) = ar
    rg.Offset(-1, 16).Resize(1, 3) = ar
    
    
    'Adjust min and max x-values for each chart
    Set c = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).ChartObjects("Stdl_Rv")
    With c.Chart.Axes(xlValue)
        .MinimumScale = Util.RoundChartMin(ChartsMinMax(0, 0)) ' * (1 - C_STDL_CHARTSPAD)
        .MaximumScale = ChartsMinMax(0, 1) * (1 + C_STDL_CHARTSPAD)
    End With
    
    Set c = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).ChartObjects("Stdl_Undl")
    With c.Chart.Axes(xlValue)
        .MinimumScale = Util.RoundChartMin(ChartsMinMax(1, 0)) ' * (1 - C_STDL_CHARTSPAD)
        .MaximumScale = ChartsMinMax(1, 1) * (1 + C_STDL_CHARTSPAD)
    End With
    
    Set c = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).ChartObjects("Stdl_Stdl")
    With c.Chart.Axes(xlValue)
        .MinimumScale = Util.RoundChartMin(ChartsMinMax(2, 0)) ' * (1 - C_STDL_CHARTSPAD)
        .MaximumScale = ChartsMinMax(2, 1) * (1 + C_STDL_CHARTSPAD)
    End With
    
    Set c = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).ChartObjects("Stdl_AtmStrike")
    With c.Chart.Axes(xlValue)
        .MinimumScale = Util.RoundChartMin(ChartsMinMax(3, 0)) ' * (1 - C_STDL_CHARTSPAD)
        .MaximumScale = ChartsMinMax(3, 1) * (1 + C_STDL_CHARTSPAD)
    End With
    
    Set c = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).ChartObjects("Stdl_AtmDist")
    With c.Chart.Axes(xlValue)
        .MinimumScale = 0 'ChartsMinMax(4, 0) * (1 - C_STDL_CHARTSPAD)
        .MaximumScale = ChartsMinMax(4, 1) + 0.1 '* (1 + 3 * C_STDL_CHARTSPAD)
    End With
    Call Main.SheetProtect(Worksheets(STR_SHEET_STRADDLE))
    rgSymbol.Offset(Row_STDL_STATUS, 0).value = "Data sent to Frontend"
    
    Call RunStraddle
    
End Sub




Sub CopyStraddleRvToSparkline(ByRef symbolId As Long)

    Dim rg As Range, rgRvIn As Range, rgTsIn As Range
    
    On Error Resume Next
    
    Set rg = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range("Stdl_RvMid")
    
    If rg.Rows.Count > C_WLS_LEN_SPARLINEDATAFIELD Then
        'copy only what fits into sprkline data field from end
        
        'rv data
        Set rgRvIn = rg.Offset(rg.Rows.Count - C_WLS_LEN_SPARLINEDATAFIELD, 0).Resize(C_WLS_LEN_SPARLINEDATAFIELD, 1)
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLS_SPARKLINEDATA).Offset(0, C_WLS_WID_SPARLINEDATAFIELD * symbolId + 1).Resize(rgRvIn.Rows.Count, 1).value = rgRvIn.value
        
        'datetime
        Set rg = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range("Stdl_Ts")
        Set rgTsIn = rg.Offset(rg.Rows.Count - C_WLS_LEN_SPARLINEDATAFIELD, 0).Resize(C_WLS_LEN_SPARLINEDATAFIELD, 1)
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLS_SPARKLINEDATA).Offset(0, C_WLS_WID_SPARLINEDATAFIELD * symbolId).Resize(rgTsIn.Rows.Count, 1).value = rgTsIn.value
    Else
        Set rgRvIn = rg
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLS_SPARKLINEDATA).Offset(0, C_WLS_WID_SPARLINEDATAFIELD * symbolId + 1).Resize(rgRvIn.Rows.Count, 1).value = rgRvIn.value
        
        Set rgTsIn = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range("Cal_Ts")
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLS_SPARKLINEDATA).Offset(0, C_WLS_WID_SPARLINEDATAFIELD * symbolId).Resize(rgTsIn.Rows.Count, 1).value = rgTsIn.value
    
    
    
    
    End If
End Sub

Private Sub PropagateStatus()

    On Error Resume Next


    If IsWatchlistRequest > 0 Then
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_STRADDLE_HISTCALCSTATUS).value = _
            ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL).Offset(Row_STDL_STATUS, 0).value
    End If
End Sub




Attribute VB_Name = "mWlCalendar"
Option Explicit

Private sheetId As Long
Private doDebug As Boolean
Private SymbolConid() As Variant
Private OvExpiriesStrikes() As Variant
Private UndlSnapshots() As Variant
Private OpSnapshots() As Variant
Private RvData() As Variant
Private ChainStrikes() As Variant
Private KeepStrikesAtm As Boolean





Public Sub Initialise()
    sheetId = 2
    doDebug = False
    ReDim SymbolConid(0 To C_CNTROWS_WATCHLISTSTRADDLES, 0 To 1)
    ReDim OvExpiriesStrikes(0 To C_CNTROWS_WATCHLISTSTRADDLES, 0 To 3)
    ReDim UndlSnapshots(0 To C_CNTROWS_WATCHLISTSTRADDLES, -1 To 100)
    ReDim OpSnapshots(0 To C_CNTROWS_WATCHLISTSTRADDLES, 0 To 3)
    ReDim RvData(0 To C_CNTROWS_WATCHLISTSTRADDLES, 0 To 3)
    ReDim ChainStrikes(0 To C_CNTROWS_WATCHLISTSTRADDLES, 0 To 8)
End Sub

 Public Sub SetKeepStrikesAtm(ByRef b As Boolean)
    KeepStrikesAtm = b
 End Sub


'=========================================
' Request contract details for underlying
'=========================================

Public Sub ReqUndlConId(ByRef Cell_str As String, triggerRun As Long)


    Dim ws As Worksheet, rg As Range
    Dim reqId As Long, symbol As String, exchange As String, stype As String, curr As String
    Dim symbolId As Long
    Dim rgUserSymbol As Range
    
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub
    'Call CheckChaf
    
    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(Cell_str)
    If rgUserSymbol.Rows.Count > 1 Then
        Exit Sub
    End If
    
    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).value = "Retrieving symbol info"
    symbolId = rgUserSymbol.Row - Range(RG_WATCHLISTCALENDAR_INPUT).Row
    
    If rgUserSymbol.value = "" Then
        SymbolConid(symbolId, 0) = Empty
        SymbolConid(symbolId, 1) = Empty

        rgUserSymbol.Offset(0, Col_CAL_LONGNAME).ClearContents
        rgUserSymbol.Offset(0, Col_CAL_PRICE).ClearContents
        rgUserSymbol.Offset(0, Col_CAL_PSOURCE).ClearContents
        rgUserSymbol.Offset(0, Col_CAL_UPDATETIME_UNDL).ClearContents
        rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_SHORT).ClearContents
        rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_LONG).ClearContents
        rgUserSymbol.Offset(0, Col_CAL_STRIKETOQUERY).ClearContents
        rgUserSymbol.Offset(0, Col_CAL_RV).ClearContents
        rgUserSymbol.Offset(0, Col_CAL_PSHORT).ClearContents
        rgUserSymbol.Offset(0, Col_CAL_PLONG).ClearContents
        rgUserSymbol.Offset(0, Col_CAL_UPDATETIME).ClearContents
        
        Call watchlist.DeleteSparklineDatafield(1, symbolId)
        'ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLC_SPARKLINEDATA).Offset(0, C_WLC_WID_SPARLINEDATAFIELD * symbolId) _
        '    .Resize(C_WLC_LEN_SPARLINEDATAFIELD, C_WLC_WID_SPARLINEDATAFIELD).ClearContents

        
        'needs to come last w/ calling loop
        rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).ClearContents
        Exit Sub
    End If
    

    ' delete old values
    rgUserSymbol.Offset(0, Col_CAL_LONGNAME).ClearContents
    rgUserSymbol.Offset(0, Col_CAL_PRICE).ClearContents
    rgUserSymbol.Offset(0, Col_CAL_PSOURCE).ClearContents
    rgUserSymbol.Offset(0, Col_CAL_UPDATETIME_UNDL).ClearContents
    rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_SHORT).ClearContents
    rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_LONG).ClearContents
    rgUserSymbol.Offset(0, Col_CAL_STRIKETOQUERY).ClearContents
    rgUserSymbol.Offset(0, Col_CAL_RV).ClearContents
    rgUserSymbol.Offset(0, Col_CAL_PSHORT).ClearContents
    rgUserSymbol.Offset(0, Col_CAL_PLONG).ClearContents
    rgUserSymbol.Offset(0, Col_CAL_UPDATETIME).ClearContents

    ' Copy symbol to sparkline data area
    ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLC_SPARKLINEDATA).Offset(-3, C_WLC_WID_SPARLINEDATAFIELD * symbolId).value = rgUserSymbol.value
     
    'delete collected RV values
    Call watchlist.DeleteSparklineDatafield(1, symbolId)
    'ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLC_SPARKLINEDATA).Offset(0, C_WLC_WID_SPARLINEDATAFIELD * symbolId) _
    '    .Resize(C_WLC_LEN_SPARLINEDATAFIELD, C_WLC_WID_SPARLINEDATAFIELD).ClearContents
    
    
    
    
    reqId = ID_WLC_UNDLCONID + triggerRun * 100000 + symbolId * 1000 + Util.IncrementReqId(sheetId)
    
    'get contract details from sheet
    symbol = rgUserSymbol.Offset(Col_CAL_SYMBOL, 0).value
    exchange = STR_EXCHANGE_SMART
    stype = STR_STYPE_STK
    curr = STR_CURR_USD
    
    ' create contract structure
    Dim lContractInfo As TWSLib.IContract
    Set lContractInfo = Api.Tws.createContract()
    
    With lContractInfo
        .symbol = UCase(symbol)
        .secType = UCase(stype)
        '.lastTradeDateOrContractMonth = contractTable(id, Col_LASTTRADEDATE).value
        '.strike = contractTable(id, Col_STRIKE).value
        '.right = UCase(contractTable(id, Col_RIGHT).value)
        '.multiplier = UCase(contractTable(id, Col_MULTIPLIER).value)
        .exchange = UCase(exchange)
        '.primaryExchange = UCase(contractTable(id, Col_PRIMEXCH).value)
        .currency = UCase(curr)
        '.localSymbol = UCase(contractTable(id, Col_LOCALSYMBOL).value)
        '.conId = contractTable(id, Col_CONID).value
        '.includeExpired = queryTable(id, Col_INCLUDEEXPIRED).value
    End With
    
    Api.Tws.reqContractDetailsEx reqId, lContractInfo
   
End Sub

Public Sub UpdateUndlConId(ByVal reqId As Long, ByVal ContractDetails As TWSLib.IContractDetails)

    Dim ws As Worksheet, rg As Range
    Dim contract As TWSLib.IContract
    Dim rgUserSymbol As Range
    Dim symbolId As Long
    
    On Error Resume Next

    
    symbolId = CLng(Mid(reqId, 4, 2))
    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0)
    Set contract = ContractDetails.contract
    
    ' write to watchlist sheet
    rgUserSymbol.Offset(0, Col_CAL_LONGNAME).value = StrConv(ContractDetails.longName, vbProperCase)
    
    SymbolConid(symbolId, 0) = contract.symbol
    SymbolConid(symbolId, 1) = contract.conid
    
    ' write conId to cachewl sheet
    'Set rg = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolid)
    'rg.Offset(Row_SYMBOL, 1).value = contract.symbol
    'rg.Offset(Row_STYPE, 1).value = contract.secType
    'rg.Offset(Row_EXCHANGE, 1).value = contract.exchange
    'rg.Offset(Row_PRIMEXCHANGE, 1).value = contract.primaryExchange
    'rg.Offset(Row_CURRENCY, 1).value = contract.currency
    'rg.Offset(Row_CONID, 1).value = contract.conid
    
    'rgUserSymbol.Offset(0, -2).value = rgUserSymbol.Offset(0, -2).value + 1
End Sub

Public Sub UpdateUndlConIdEnd(ByVal reqId As Long)

    Dim rgUserSymbol As Range
    Dim symbolId As Long, triggerRun As Long
    
    On Error Resume Next

    symbolId = CLng(Mid(reqId, 4, 2))
    triggerRun = CLng(Mid(reqId, 3, 1))
    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0)
    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).value = "Symbol ok"
    
    If triggerRun = 1 Then
        Call RunCalendarWatchlistMember(symbolId)
    End If
End Sub

Public Sub ErrorUndlConId(ByVal id As Long, ByVal errorCode As Long, ByVal errorMsg As String)

    Dim rgUserSymbol As Range
    Dim symbolId As Long
    
    On Error Resume Next

    symbolId = CLng(Mid(id, 4, 2))
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0)
    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).value = "Symbol invalid"
End Sub














'=================
' Real-Time Update
'=================



Sub RunCalendarWatchlistMember(ByRef symbolId As Long)
    
    'doDebug = True
    'read contract data
    Dim ws As Worksheet, rg As Range
    Dim expiryStrikeDate As Date, expiryStrikeSymbol As String
    Dim reqId As Long, conid As Long, rg_conid As Range, rg_symbol As Range
    Dim symbol As String, dlDateTime As Date, expiryLong As Date, expiryShort As Date, putCall As String ', exchange As String, stype As String, cur As String
    Dim rgUserSymbol As Range
    Dim status As String
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub
    'Call CheckChaf
    
    If Not IsArrayAllocated(SymbolConid) Then
        Initialise
    End If
    
    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0)
    status = rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).value
    
    If status = "Retrieving symbol info" Then
        'ReqUndlConId is working, escape circular calling
        Exit Sub
    End If
    
    'If status = "" Then
    '    Call watchlist.PasteLtd(rgUserSymbol.Address, True)
    '    Call ReqUndlConId(rgUserSymbol.Address, 1)
    '    Exit Sub
    'End If
    
    If IsEmpty(SymbolConid(symbolId, 0)) Then
        Call ReqUndlConId(rgUserSymbol.Address, 1)
        Exit Sub
    End If
    
    
    Select Case status
    
        Case "", "Symbol ok", "RV updated", "Short expiry does not exist", _
            "Long expiry does not exist", "Strike does not exist", _
            "Opt. type invalid (put or call)", "Waiting for prices: 1 contract", "Waiting for prices: 2 contracts"
            'new start: get download date of expiries and strikes
            
                ' symbol changed? Expiries we have are from today?
                expiryStrikeSymbol = OvExpiriesStrikes(symbolId, 0)
                expiryStrikeDate = OvExpiriesStrikes(symbolId, 1)
            
                If Not expiryStrikeSymbol = rgUserSymbol.value Or CDate(Int(expiryStrikeDate)) < Date Then
                    'download expiries
                    OpChainOverview_reqSecDefOP (symbolId)
                Else
                    'use the data we have and continue with next step
                    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).value = "Options chains complete"
                    RunCalendarWatchlistMember (symbolId)
                End If
            
            
        Case "Options chains complete"
            UndlSnapshot_reqSnapshot (symbolId)
            
            
        Case "Underlying complete"
            FindExpiryToQuery (symbolId)
            
            
        Case "Options expiry complete"
            '(symbolId)
            
            'check if we can use the strikes already queried: symbol changed? Strikes we have are from today?
            'Dim symbol As String, dlDate As Date, expiryLong As Date, expiryShort As Date, putCall As String
            expiryShort = ChainStrikes(symbolId, 2)
            expiryLong = ChainStrikes(symbolId, 3)
            'putCall = ChainStrikes(symbolId, 4)
            symbol = ChainStrikes(symbolId, 5)
            dlDateTime = CDate(ChainStrikes(symbolId, 6))
            
            
            
            If UCase(Left(rgUserSymbol.Offset(0, Col_CAL_PUTCALL).value, 1)) = "P" Then
                putCall = 0
            ElseIf UCase(Left(rgUserSymbol.Offset(0, Col_CAL_PUTCALL).value, 1)) = "C" Then
                putCall = 1
            Else
                rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).value = "Opt. type invalid (put or call)"
                Exit Sub
            End If
            
        
            If Not expiryShort = rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_SHORT).value _
                Or Not expiryLong = rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_LONG).value _
                Or Not putCall = ChainStrikes(symbolId, 4) _
                Or Not symbol = rgUserSymbol.value _
                Or CDate(Int(dlDateTime)) < Date _
                Or IsEmpty(ChainStrikes(symbolId, 0)) _
                Or IsEmpty(ChainStrikes(symbolId, 1)) Then
                    ChainStrikes_reqCons (symbolId)
            Else
                'use the data we have and continue with next step
                rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).value = "Options contracts received"
                RunCalendarWatchlistMember (symbolId)
            End If
            
            
        Case "Options contracts received"
            FindStrikeToQuery (symbolId)
                             
                             
        Case "ATM strike complete"
            OpSnapshot_reqSnapshot (symbolId)
            
            
        Case "Options prices received"
            CalcRV (symbolId)
            CopyRvSparkLine (symbolId)
            Exit Sub
            
            
        Case "Retrieving symbol info", "Symbol invalid", "No options available"
            'new start: but Ib does not have that symbol in its db
            Exit Sub

            
        'When one of the procs is running at the moment, just abort here
        Case "Requesting options chains", "Requesting underlying price", "Calculate expiry", _
                "Requesting available strikes", "Awaiting 2 options contracts", "Awaiting 1 options contract", _
                "Calculate strike", "Requesting options prices", _
                "Waiting for prices: 2 contracts", "Waiting for prices: 1 contract", "Calculating RV"
            Exit Sub
            
            
        Case Else
            'MsgBox ("status not handled in RunCalendarWatchlistMember: " & status)
            
    End Select
    

    
    
End Sub
    


'======================================================
' Get options chains expiries and strikes
' (not all strikes might be available for all expiries)
'======================================================


Public Sub OpChainOverview_reqSecDefOP(ByRef symbolId As Long)

    'If Not CheckConnected Then Exit Sub
    
    Dim wsUser As Worksheet, rg As Range, conid As Long, symbol As String, stype As String, reqId As Long
    Dim rgUserSymbol As Range
    'Dim rgCacheSymbol As Range
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub

    'Set wsUser = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST) ': Set wsCache = ThisWorkbook.Worksheets(STR_SHEET_CACHE)
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = wsCache.Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolid)
    
    
    'If IsEmpty(SymbolConid(symbolId, 0)) Then
    '    Call ReqUndlConId(rgUserSymbol.Address, 1)
    '    Exit Sub
    'End If
    
    
    'status
    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).value = "Requesting options chains"
    
    'delete old values
    OvExpiriesStrikes(symbolId, 0) = Empty
    OvExpiriesStrikes(symbolId, 1) = Empty
    OvExpiriesStrikes(symbolId, 2) = Empty
    OvExpiriesStrikes(symbolId, 3) = Empty
    
    
    'SHEETOUTPUT: delete old values for expiries/strikes
    'wsCache.Range(rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 0), rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 0).End(xlDown)).ClearContents 'expiries
    'wsCache.Range(rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 1), rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 1).End(xlDown)).ClearContents 'strikes
    
    reqId = ID_WLC_OPCHAINOV + symbolId * 1000 + Util.IncrementReqId(sheetId)
        
    symbol = SymbolConid(symbolId, 0)
    conid = SymbolConid(symbolId, 1)
    stype = STR_STYPE_STK

    Api.Tws.reqSecDefOptParams reqId, symbol, "", stype, conid

End Sub

Public Sub OpChainOverview_updateSecDefOP(reqId As Long, _
                          exchange As String, _
                          undrlyingConId As Long, _
                          tradingClass As String, _
                          multiplier As String, _
                          expirationsList As String, _
                          strikesList As String)

    On Error Resume Next

    
    If exchange = "SMART" Then

        'Dim rgCacheSymbol As Range
        Dim expiries_str() As String, strikes_str() As String, xp() As Variant, st() As Variant
        Dim symbolId As Long, i As Long
        Dim s As String
        
        
        symbolId = CLng(Mid(CStr(reqId), 4, 2))
        
        'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolid)
        
        expiries_str() = Split(expirationsList, ";")
        strikes_str() = Split(strikesList, ";")
        
        ReDim xp(UBound(expiries_str))
        ReDim st(UBound(strikes_str))
        
        For i = 0 To UBound(expiries_str)
            s = expiries_str(i) '20210115
            xp(i) = DateSerial(Left(s, 4), Mid(s, 5, 2), right(s, 2))
            'SHEETOUTPUT
            'rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES + i, 0).value = xp(i)
        Next
        
        For i = 0 To UBound(strikes_str)
            st(i) = CDbl(strikes_str(i))
            'SHEETOUTPUT
            'rgCacheSymbol.Offset(Row_EXPIRYSTRIKE + i, 0).value = st(i)
        Next


        OvExpiriesStrikes(symbolId, 0) = SymbolConid(symbolId, 0)
        OvExpiriesStrikes(symbolId, 1) = Now()
        OvExpiriesStrikes(symbolId, 2) = xp
        OvExpiriesStrikes(symbolId, 3) = st
        'SHEETOUTPUT
        'rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_DATES, 0).value = Now()
    End If
    
    
    If doDebug Then
        'DEBUG
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_opov").Range("A12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
        With rg
            .Offset(0, 0).value = Now()
            .Offset(0, 1).value = reqId
            .Offset(0, 2).value = exchange
            .Offset(0, 3).value = undrlyingConId
            .Offset(0, 4).value = tradingClass
            .Offset(0, 5).value = multiplier
            .Offset(0, 6).value = expirationsList
            .Offset(0, 7).value = strikesList
        End With
    End If
    
    
End Sub
           
Public Sub OpChainOverview_updateSecDefOPEnd(reqId As Long)

    Dim rgUserSymbol As Range, symbolId As Long
    
    On Error Resume Next

    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))

    'status
    If IsEmpty(OvExpiriesStrikes(symbolId, 2)) Then
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_SYMBOLSTATUS).value = "No options available"
    Else
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_SYMBOLSTATUS).value = "Options chains complete"
    End If
    
    Call RunCalendarWatchlistMember(symbolId)

End Sub






'=====================
' Get Price Underlying
'=====================

Sub UndlSnapshot_reqSnapshot(ByRef symbolId As Long)


    'Dim wsUser As Worksheet, wsCache As Worksheet, rg As Range, conid As Long, stype As String, reqId As Long
    Dim rgUserSymbol As Range ', rgCacheSymbol As Range
    Dim genericTickList As String, Snapshot As Boolean
    Dim reqId As Long, i As Long
    
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub

    
    
    'Set wsUser = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST): Set wsCache = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL)
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolId)
    
    'status
    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).value = "Requesting Underlying Price"
    
    ' delete UndPrice and PSource
    rgUserSymbol.Offset(0, Col_CAL_PRICE).value = ""
    rgUserSymbol.Offset(0, Col_CAL_PSOURCE).value = ""
    rgUserSymbol.Offset(0, Col_CAL_UPDATETIME_UNDL).value = ""
        
        
    'ReDim UndlSnapshots(0 To C_CNTROWS_WATCHLISTSTRADDLES, -1 To 100)
        
    For i = -1 To UBound(UndlSnapshots, 2)
        UndlSnapshots(symbolId, i) = Empty
    Next
        
    'SHEETOUTPUT: delete old values
    'rgCacheSymbol.Offset(Row_UPRICE, 1).value = ""
    'rgCacheSymbol.Offset(Row_UPTYPE, 1).value = ""
    'rgCacheSymbol.Offset(Row_UDATETIME, 1).value = ""
    
    reqId = ID_WLC_UNDLSNAPSHOT + symbolId * 1000 + Util.IncrementReqId(sheetId)


    ' create and fill contract
    Dim lContractInfo As TWSLib.IContract
    Set lContractInfo = Api.Tws.createContract()
    
    With lContractInfo
        .symbol = UCase(SymbolConid(symbolId, 1))
        .secType = STR_STYPE_STK
        .exchange = STR_EXCHANGE_SMART
        .currency = STR_CURR_USD
        .conid = SymbolConid(symbolId, 1)
    End With
    
    
    '100 Option Volume (currently for stocks)
    '101 Option Open Interest (currently for stocks)
    '104 Historical Volatility (currently for stocks)
    '105 Average Option Volume (currently for stocks)
    '106 Option Implied Volatility (currently for stocks)
    
    'genericTickList = "100,101,104,105,106"
    genericTickList = ""
    
    ' mkt data options
    Dim mktDataOptions As TWSLib.ITagValueList
    Set mktDataOptions = Api.Tws.createTagValueList()
    
    Snapshot = True
    
    Api.Tws.reqMktDataEx reqId, lContractInfo, genericTickList, Snapshot, False, mktDataOptions

End Sub



Public Sub UndlSnapshot_updatePrice(reqId As Long, tickType As Long, price As Double, CanAutoExecute As Boolean, PastLimit As Boolean, PreOpen As Boolean)

    Dim rgUserSymbol As Range, rgCacheSymbol As Range, symbolId As Long, p As Double
    
    On Error Resume Next

    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))
    
    'Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolid, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolid)

    UndlSnapshots(symbolId, tickType) = price

    If doDebug Then
        
        ' DEBUG: price events
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_undl").Range("A12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
        With rg
            .Offset(0, 0).value = reqId
            .Offset(0, 1).value = tickType
            .Offset(0, 2).value = price
            .Offset(0, 3).value = CanAutoExecute
            .Offset(0, 4).value = PastLimit
            .Offset(0, 5).value = PreOpen
        End With
    End If
    
    
    UndlSnapshot_displayPrice (symbolId)

End Sub




Public Sub UndlSnapshot_updateSize(reqId As Long, tickType As Long, size As Long)

    Dim symbolId As Long
    
    On Error Resume Next
    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))

    UndlSnapshots(symbolId, tickType) = size

    If doDebug Then
        ' DEBUG: Print events
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_undl").Range("H12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg
            .Offset(0, 0).value = reqId
            .Offset(0, 1).value = tickType
            .Offset(0, 2).value = size
        End With
    End If
    
    UndlSnapshot_displayPrice (symbolId)

End Sub


Public Sub UndlSnapshot_updateString(id As Long, tickType As Long, value As String)

    Dim symbolId As Long
    
    On Error Resume Next
    
    symbolId = CLng(Mid(CStr(id), 4, 2))
    
    UndlSnapshots(symbolId, tickType) = value


    If doDebug Then
        ' DEBUG: Print events
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_undl").Range("L12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg
            .Offset(0, 0).value = id
            .Offset(0, 1).value = tickType
            .Offset(0, 2).value = value
        End With
    End If

    UndlSnapshot_displayPrice (symbolId)

End Sub

Public Sub UndlSnapshot_displayPrice(ByRef symbolId As Long)

    'Check if we have the values we need and display them.
    'DO NOT WAIT FOR tickSnapshotEnd. It is sent only 11 secs after the request (wtf?!?)
    '   this needs to be in own sub because we want to display data coming in from updatePrices and updateString.
    '   we cannot be sure that after update string there will be another updatePrice event (or vice versa)
    
    
    Dim p As Double
    Dim d As Date
    Dim rgUserSymbol As Range ', rgCacheSymbol As Range
    
    
    On Error Resume Next
    'symbolId = CLng(Mid(CStr(reqId), 4, 2))
    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolId)
    
    
    ' if values have not been printed to screen yet
    If IsEmpty(UndlSnapshots(symbolId, -1)) Then
    
        '1) Do we already have Bid and Ask? (we need to wait for them in all cases)
        If Not IsEmpty(UndlSnapshots(symbolId, 1)) And Not IsEmpty(UndlSnapshots(symbolId, 2)) Then
    
            '.... and they are not -1 (i.e., we are in a trading session
            If Not UndlSnapshots(symbolId, 1) = -1 And Not UndlSnapshots(symbolId, 2) = -1 Then
                UndlSnapshots(symbolId, -1) = True
                p = (UndlSnapshots(symbolId, 1) + UndlSnapshots(symbolId, 2)) / 2
                RvData(symbolId, 2) = p
                rgUserSymbol.Offset(0, Col_CAL_PRICE).value = p
                rgUserSymbol.Offset(0, Col_CAL_PSOURCE).value = "Mid"
                rgUserSymbol.Offset(0, Col_CAL_UPDATETIME_UNDL).value = Now()
                'rgCacheSymbol.Offset(Row_UPRICE, 1).value = p
                'rgCacheSymbol.Offset(Row_UPTYPE, 1).value = "Mid"
                'rgCacheSymbol.Offset(Row_UDATETIME, 1).value = Now()
                
                'status
                ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_SYMBOLSTATUS) = "Underlying complete"
                
                Call RunCalendarWatchlistMember(symbolId)
                
            '... try last if no bid ask
            ElseIf Not IsEmpty(UndlSnapshots(symbolId, 4)) And Not IsEmpty(UndlSnapshots(symbolId, 45)) Then
                'if they are -1 -> use last. If we have that not, just wait for more data to come
                UndlSnapshots(symbolId, -1) = True
                
                d = CDate(ConvertLongToDateStr(UndlSnapshots(symbolId, 45)))
                
                RvData(symbolId, 2) = UndlSnapshots(symbolId, 4)
                
                rgUserSymbol.Offset(0, Col_CAL_PRICE).value = UndlSnapshots(symbolId, 4)
                rgUserSymbol.Offset(0, Col_CAL_PSOURCE).value = "Last"
                rgUserSymbol.Offset(0, Col_CAL_UPDATETIME_UNDL).value = d
                
                'rgCacheSymbol.Offset(Row_UPRICE, 1).value = UndlSnapshots(symbolId, 4)
                'rgCacheSymbol.Offset(Row_UPTYPE, 1).value = "Last"
                'rgCacheSymbol.Offset(Row_UDATETIME, 1).value = d
                
                'status
                ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_SYMBOLSTATUS) = "Underlying complete"
                
                Call RunCalendarWatchlistMember(symbolId)
                
            ' finally try yesterday's close (but not if the last is already there just we haven't received its tradeTime)
            ElseIf IsEmpty(UndlSnapshots(symbolId, 4)) And Not IsEmpty(UndlSnapshots(symbolId, 9)) Then
                
                UndlSnapshots(symbolId, -1) = True
                
                RvData(symbolId, 2) = UndlSnapshots(symbolId, 9)
                
                rgUserSymbol.Offset(0, Col_CAL_PRICE).value = UndlSnapshots(symbolId, 9)
                rgUserSymbol.Offset(0, Col_CAL_PSOURCE).value = "PrevClose"
                
                'rgCacheSymbol.Offset(Row_UPRICE, 1).value = UndlSnapshots(symbolId, 9)
                'rgCacheSymbol.Offset(Row_UPTYPE, 1).value = "PrevClose"
                
                'status
                ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_SYMBOLSTATUS) = "Underlying complete"
                
                Call RunCalendarWatchlistMember(symbolId)
                
            End If
        End If
    End If

End Sub


'======================
' Expiry for RV options
'======================


Public Sub FindExpiryToQuery(ByRef symbolId As Long)

    Dim rgUserSymbol As Range, i As Long
    
    On Error Resume Next

    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolId)
        
    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS) = "Calculate expiry"
    'rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY).ClearContents
    

    'DEBUG:
    ' read in underlying last prices and strikes available for underlying manually
    'Dim ws As Worksheet, rg As Range, expiries() As Variant, tmparr() As Variant
    'ReDim expiries(0 To C_CNTROWS_WATCHLISTSTRADDLES)
    'Set ws = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL): Set rg = ws.Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(Row_EXPIRYSTRIKE, C_CNTCOLS_WLOP * symbolId)
    'tmparr = ws.Range(rg, rg.End(xlDown)).value
    'expiries(symbolId) = Application.Transpose(Application.index(tmparr, 0, 1))
    
        'load (user manipulatable) last trade date
    Dim xp() As Variant, ltd As Date, expiryToQueryShort As Variant, expiryToQueryLong As Variant
    
    xp = OvExpiriesStrikes(symbolId, 2)
        
    expiryToQueryShort = rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_SHORT).value
    expiryToQueryLong = rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_LONG).value


    If Not expiryToQueryShort = "" And Not expiryToQueryLong = "" Then
    
        ' does it exist
        For i = 0 To UBound(xp)
            If xp(i) >= expiryToQueryShort Then
                Exit For
            End If
        Next
        
        If i > UBound(xp) Or Not expiryToQueryShort = xp(i) Then
            rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS) = "Short expiry does not exist"
            Exit Sub
        End If
    
        For i = 0 To UBound(xp)
            If xp(i) >= expiryToQueryLong Then
                Exit For
            End If
        Next
        
        If i > UBound(xp) Or Not expiryToQueryLong = xp(i) Then
            rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS) = "Long expiry does not exist"
            Exit Sub
        End If
    
    Else

        ' calculate both expiries
        ltd = rgUserSymbol.Offset(0, Col_CAL_LTD).value
        
    
    
        For i = 0 To UBound(xp) - 1
            If xp(i) > ltd Then
                expiryToQueryShort = xp(i)
                Exit For
            End If
        Next
        
        If expiryToQueryShort = Empty Then
            MsgBox ("Calendars line " & symbolId + 1 & " (" & rgUserSymbol.value & "). Could not locate two expiries after earnings date. Please enter expiries yourself in the blue fields")
            Exit Sub
        End If
        
        expiryToQueryLong = xp(i + 1)
        
        If Not rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_SHORT).value = expiryToQueryShort Then
            rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_SHORT).value = expiryToQueryShort
        End If
        
        If Not rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_LONG).value = expiryToQueryLong Then
            rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_LONG).value = expiryToQueryLong
        End If
        
    End If
    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS) = "Options expiry complete"
    
    Call RunCalendarWatchlistMember(symbolId)
        

    
End Sub

'======================
' Strikes for RV options
'======================

Public Sub ChainStrikes_reqCons(ByRef symbolId As Long)

   'If Not CheckConnected Then Exit Sub


    Dim rgUserSymbol As Range, rg As Range ', rgCacheSymbol As Range
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub

    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolId)

    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).value = "Requesting available strikes"


    Dim right As Variant, oid As Long, reqId As Long, expiryToQueryShort As Date, expiryToQueryLong As Date
    
    expiryToQueryShort = rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_SHORT).value
    expiryToQueryLong = rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_LONG).value


    'delete old values
    ChainStrikes(symbolId, 0) = Empty
    ChainStrikes(symbolId, 1) = Empty
    ChainStrikes(symbolId, 2) = expiryToQueryShort
    ChainStrikes(symbolId, 3) = expiryToQueryLong
    ChainStrikes(symbolId, 4) = Empty
    ChainStrikes(symbolId, 5) = SymbolConid(symbolId, 0)
    ChainStrikes(symbolId, 6) = Empty
    ChainStrikes(symbolId, 7) = Empty
    ChainStrikes(symbolId, 8) = Empty
    'put strikes
    'Set rg = rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 1)
    'ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(rg, rg.End(xlDown)).ClearContents
    
    'call strikes
    'Set rg = rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 2)
    'ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(rg, rg.End(xlDown)).ClearContents
    
    'ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(Row_EXPIRYSTRIKE_DATES, C_CNTCOLS_WLOP * symbolId + 1).value = ""
    
    

    
    'If expiry = "" Then
    '    MsgBox ("Expiry field of that security is empty")
    '    Exit Sub
    'End If



    
    If UCase(Left(rgUserSymbol.Offset(0, Col_CAL_PUTCALL).value, 1)) = "P" Then
        right = "Put"
        ChainStrikes(symbolId, 4) = 0
    ElseIf UCase(Left(rgUserSymbol.Offset(0, Col_CAL_PUTCALL).value, 1)) = "C" Then
        right = "Call"
        ChainStrikes(symbolId, 4) = 1
    Else
        rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS) = "Opt. type invalid (put or call)"
        Exit Sub
    End If


    Dim expiry As Variant, expNbr As Long
    
    expNbr = 0
    For Each expiry In Array(expiryToQueryShort, expiryToQueryLong)
        
        'If right = "Put" Then oid = 1 Else oid = 2
        
        'reqid
        reqId = ID_WLC_CHAINSTRIKES + expNbr * 100000 + symbolId * 1000 + Util.IncrementReqId(sheetId)
        ChainStrikes(symbolId, 7 + expNbr) = reqId
            
        ' create contract structure
        Dim lContractInfo As TWSLib.IContract
        Set lContractInfo = Api.Tws.createContract()
        
        With lContractInfo
            .symbol = SymbolConid(symbolId, 0)
            .secType = STR_STYPE_OPT
            .exchange = STR_EXCHANGE_SMART
            .currency = STR_CURR_USD
            .lastTradeDateOrContractMonth = Format(expiry, "yyyymmdd")
            '.strike = strike
            .right = right
            '.multiplier = UCase(contractTable(id, Col_MULTIPLIER).value)
            '.primaryExchange = UCase(contractTable(id, Col_PRIMEXCH).value)
            '.localSymbol = UCase(contractTable(id, Col_LOCALSYMBOL).value)
            '.conid = contractTable(id, Col_CONID).value
            '.includeExpired = queryTable(id, Col_INCLUDEEXPIRED).value
        End With

        Api.Tws.reqContractDetailsEx reqId, lContractInfo
        
        If expNbr = 0 Then
            Call Util.TakeNap(100)
        End If
        'Exit For
    
        expNbr = expNbr + 1
    Next

    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS) = "Awaiting 2 options contracts"

End Sub


Public Sub ChainStrikes_UpdateConDet(ByVal reqId As Long, ByVal ContractDetails As TWSLib.IContractDetails)
    
    'Dim ws As Worksheet
    Dim contract As TWSLib.IContract
    Dim symbolId As Long
    Dim expNbr As Long
    'Dim dic As Object
    Dim dic As Scripting.Dictionary
    
    On Error Resume Next

    symbolId = CLng(Mid(CStr(reqId), 4, 2))
    expNbr = CLng(Mid(CStr(reqId), 3, 1))
    

    
    
    Set contract = ContractDetails.contract
    
    
    
    If IsEmpty(ChainStrikes(symbolId, expNbr)) Then
        Set dic = New Scripting.Dictionary
    Else
        Set dic = ChainStrikes(symbolId, expNbr)
    End If
    
    'dic.Add contract.strike, contract.conid
    dic.Item(contract.strike) = contract.conid
        
     
    Set ChainStrikes(symbolId, expNbr) = dic
    
    
    
    'SHEETOUTPUT: write strikes to cache sheet
    'Set rg = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(Row_EXPIRYSTRIKE_VALUES, C_CNTCOLS_WLOP * symbolId + 1 + putCall)
    'While rg.value <> ""
    '    Set rg = rg.Offset(1, 0)
    'Wend
    'rg.value = contract.strike


End Sub


Public Sub ChainStrikes_UpdateConDetEnd(ByVal reqId)


    Dim rgStatus As Range, symbolId As Long
    
    On Error Resume Next

    symbolId = CLng(Mid(reqId, 4, 2))
    
    'ChainStrikes(symbolId, 2) = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0) 'Symbol
     'UpdateTime
    
    
    'ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(Row_EXPIRYSTRIKE_DATES, C_CNTCOLS_WLOP * symbolId + 1).value = Now()
    
    ' set status
    Set rgStatus = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_SYMBOLSTATUS)
    
    'If rgStatus.value = "Awaiting 2 options contracts" Then
    '    rgStatus.value = "Awaiting 1 options contract"
    'ElseIf rgStatus.value = "Awaiting 1 options contract" Then
    '    rgStatus.value = "Options contracts received"
    '    ChainStrikes(symbolid, 6) = Now()
    '    Call RunCalendarWatchlistMember(symbolid)
    'End If



    If ChainStrikes(symbolId, 7) = reqId Then
        ChainStrikes(symbolId, 7) = "ok"
    ElseIf ChainStrikes(symbolId, 8) = reqId Then
        ChainStrikes(symbolId, 8) = "ok"
    End If
    'ChainStrikes(symbolId, 5 + putCall) = "ok"
    
    If ChainStrikes(symbolId, 7) = "ok" And ChainStrikes(symbolId, 8) = "ok" Then
        rgStatus.value = "Options contracts received"
        ChainStrikes(symbolId, 6) = Now()
        Call RunCalendarWatchlistMember(symbolId)
    ElseIf ChainStrikes(symbolId, 7) = "ok" Or ChainStrikes(symbolId, 8) = "ok" Then
        rgStatus.value = "Awaiting 1 options contract"
    End If

End Sub



'======================
' Up-to-date options prices
'======================






Public Sub FindStrikeToQuery(ByRef symbolId As Long)

    Dim rgUserSymbol As Range ', rgCacheSymbol As Range
    Dim d As Object, sk As Object, s As Variant, i As Long
    Dim strikes() As Double, PutCallStrikes() As Variant
    Dim UPrice As Double, AtmStrike As Double, strike As Variant
    
    
    On Error Resume Next

    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolId)

    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS) = "Calculate strike"

    PutCallStrikes = Util.CommonStrikesPutCall(ChainStrikes(symbolId, 0), ChainStrikes(symbolId, 1))



     'xp = OvExpiriesStrikes(symbolId, 2)
     'expiry = rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY).value
     strike = rgUserSymbol.Offset(0, Col_CAL_STRIKETOQUERY).value


    If Not strike = "" And Not KeepStrikesAtm Then
        Dim j As Long
        'j = 0
        ' does it exist
        For i = 0 To UBound(PutCallStrikes)
            If PutCallStrikes(i) >= strike Then
                Exit For
            End If
            'j = j + 1
        Next
        
        If i > UBound(PutCallStrikes) Or Not strike = PutCallStrikes(i) Then
            rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS) = "Strike does not exist"
            Exit Sub
        End If
    
    
    Else

        UPrice = rgUserSymbol.Offset(0, Col_CAL_PRICE).value
        
        AtmStrike = Util.FindTheClosestStrike(CDbl(UPrice), PutCallStrikes)
        
        If Not rgUserSymbol.Offset(0, Col_CAL_STRIKETOQUERY).value = AtmStrike Then
            rgUserSymbol.Offset(0, Col_CAL_STRIKETOQUERY).value = AtmStrike
        End If
    End If
    
    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS) = "ATM strike complete"
    
    Call RunCalendarWatchlistMember(symbolId)

End Sub







Public Sub OpSnapshot_reqSnapshot(ByRef symbolId As Long)

    Dim rgUserSymbol As Range, rg As Range, expiryToQueryShort As Date, expiryToQueryLong ', rgCacheSymbol As Range
    Dim reqId As Long, genericTickList As String, Snapshot As Boolean
    Dim lContractInfo As TWSLib.IContract, putCall As Variant, oid As Long
    Dim strike As Double, right As String, reqIdTail As Long
        
    On Error Resume Next
    If Not CheckConnected Then Exit Sub

    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolId)
    
    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).value = "Requesting options prices"
    
    'delete old values
    'OpSnapshots(symbolId, -1) = Empty
    OpSnapshots(symbolId, 0) = Empty
    OpSnapshots(symbolId, 1) = Empty
    OpSnapshots(symbolId, 2) = Empty
    OpSnapshots(symbolId, 3) = Empty
    RvData(symbolId, 0) = Empty
    RvData(symbolId, 1) = Empty
    ' do not delete underlying price!!! Set by UndlSnapshot_displayPrice RvData(symbolId, 2) = Empty
    RvData(symbolId, 3) = Empty
    
    
    expiryToQueryShort = rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_SHORT).value
    expiryToQueryLong = rgUserSymbol.Offset(0, Col_CAL_EXPIRYTOQUERY_LONG).value
    
    strike = rgUserSymbol.Offset(0, Col_CAL_STRIKETOQUERY).value
    genericTickList = ""
    Snapshot = True
    
    If ChainStrikes(symbolId, 4) = 0 Then
        right = "Put"
    ElseIf ChainStrikes(symbolId, 4) = 1 Then
        right = "Call"
    End If
    
    
    ' mkt data options
    Dim mktDataOptions As TWSLib.ITagValueList
    Set mktDataOptions = Api.Tws.createTagValueList()
    
    
    reqIdTail = Util.IncrementReqId(sheetId)
    
    Dim expiry As Variant, expNbr As Long
    
    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).value = "Waiting for prices: 2 contracts"
    
    expNbr = 0
    For Each expiry In Array(expiryToQueryShort, expiryToQueryLong)
        
        'reqid
        reqId = ID_WLC_OPSNAPSHOT + expNbr * 100000 + symbolId * 1000 + reqIdTail
        OpSnapshots(symbolId, 2 + expNbr) = reqId
        
        Set lContractInfo = Api.Tws.createContract()


        With lContractInfo
            .symbol = SymbolConid(symbolId, 0)
            .secType = STR_STYPE_OPT
            .exchange = STR_EXCHANGE_SMART
            .currency = STR_CURR_USD
            .lastTradeDateOrContractMonth = Format(expiry, "yyyymmdd")
            .strike = strike
            .right = right
            '.multiplier = UCase(contractTable(id, Col_MULTIPLIER).value)
            '.primaryExchange = UCase(contractTable(id, Col_PRIMEXCH).value)
            '.localSymbol = UCase(contractTable(id, Col_LOCALSYMBOL).value)
            '.conid = contractTable(id, Col_CONID).value
            '.includeExpired = queryTable(id, Col_INCLUDEEXPIRED).value
        End With
    
        Api.Tws.reqMktDataEx reqId, lContractInfo, genericTickList, Snapshot, False, mktDataOptions
            
            
        If doDebug Then
            ' DEBUG: price events
            Dim rg2 As Range
            Set rg2 = ThisWorkbook.Worksheets("dump_opSp").Range("A12")
            While rg2.value <> ""
                Set rg2 = rg2.Offset(1, 0)
            Wend
        
            With rg2
                .Offset(0, 0).value = Now()
                .Offset(0, 1).value = reqId
                .Offset(0, 2).value = SymbolConid(symbolId, 0)
                .Offset(0, 3).value = expiry
                .Offset(0, 4).value = strike
                .Offset(0, 5).value = expNbr
                .Offset(0, 6).value = "Cal"
            End With
    
        End If
            
            
            
            
        If expNbr = 0 Then
            Call Util.TakeNap(100)
        End If
        
        
        expNbr = expNbr + 1
    Next
    

    
    
    
End Sub




Sub OpSnapshot_updatePrice(reqId As Long, tickType As Long, price As Double, CanAutoExecute As Boolean, PastLimit As Boolean, PreOpen As Boolean)

    Dim ar() As Variant, symbolId As Long, expNbr As Long
    
    On Error Resume Next
    
    If doDebug Then
      ' DEBUG: price events
      Dim rg As Range
      Set rg = ThisWorkbook.Worksheets("dump_opSp").Range("I12")
      While rg.value <> ""
          Set rg = rg.Offset(1, 0)
      Wend
    
      With rg 'sheet.Rows(rowId)
          .Offset(0, 0).value = Now()
          .Offset(0, 1).value = reqId
          .Offset(0, 2).value = tickType
          .Offset(0, 3).value = price
          .Offset(0, 4).value = CanAutoExecute
          .Offset(0, 5).value = PastLimit
          .Offset(0, 6).value = PreOpen
      End With
    
    End If
    
    
    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))
    expNbr = CLng(Mid(CStr(reqId), 3, 1))

    If OpSnapshots(symbolId, 2 + expNbr) = reqId Then
        If IsEmpty(OpSnapshots(symbolId, expNbr)) Then
            ReDim ar(0 To C_ARLEN_OPSNAPSHOT)
        Else
            ar = OpSnapshots(symbolId, expNbr)
        End If
        
        ar(tickType) = price
        OpSnapshots(symbolId, expNbr) = ar
        
        
        Dim rgStatus As Range
        Set rgStatus = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_SYMBOLSTATUS)

        
        Call OpSnapshot_displayPrice(symbolId, expNbr)
    End If

    
  


    
End Sub


Sub OpSnapshot_updateSize(reqId As Long, tickType As Long, size As Long)

    Dim ar() As Variant, symbolId As Long, expNbr As Long
    
    On Error Resume Next

    If doDebug Then
        ' DEBUG: price events
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_opSp").Range("Q12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg 'sheet.Rows(rowId)
            .Offset(0, 0).value = Now()
            .Offset(0, 1).value = reqId
            .Offset(0, 2).value = tickType
            .Offset(0, 3).value = size
        End With
    End If
    
    
    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))
    expNbr = CLng(Mid(CStr(reqId), 3, 1))
    

    If OpSnapshots(symbolId, 2 + expNbr) = reqId Then
        If IsEmpty(OpSnapshots(symbolId, expNbr)) Then
            ReDim ar(0 To C_ARLEN_OPSNAPSHOT)
        Else
            ar = OpSnapshots(symbolId, expNbr)
        End If
        
        ar(tickType) = size
        OpSnapshots(symbolId, expNbr) = ar
        
        Call OpSnapshot_displayPrice(symbolId, expNbr)
    End If


    
    
    
End Sub

Sub OpSnapshot_updateString(reqId As Long, tickType As Long, value As String)

    Dim ar() As Variant, symbolId As Long, expNbr As Long
    
    On Error Resume Next

    
    If doDebug Then
        ' DEBUG: price events
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_opSp").Range("W12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg 'sheet.Rows(rowId)
            .Offset(0, 0).value = Now()
            .Offset(0, 1).value = reqId
            .Offset(0, 2).value = tickType
            .Offset(0, 3).value = value
        End With
    End If
    
    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))
    expNbr = CLng(Mid(CStr(reqId), 3, 1))
    

    If OpSnapshots(symbolId, 2 + expNbr) = reqId Then
        If IsEmpty(OpSnapshots(symbolId, expNbr)) Then
            ReDim ar(0 To C_ARLEN_OPSNAPSHOT)
        Else
            ar = OpSnapshots(symbolId, expNbr)
        End If
        
        ar(tickType) = value
        OpSnapshots(symbolId, expNbr) = ar
        
        Call OpSnapshot_displayPrice(symbolId, expNbr)
    End If


End Sub

Public Sub OpSnapshot_updateOpCalc(reqId As Long, tickType As Long, ByVal impliedVol As Double, ByVal delta As Double, ByVal optPrice As Double, ByVal pvDividend As Double, ByVal gamma As Double, ByVal vega As Double, ByVal theta As Double, ByVal undPrice As Double)

    ' no need to record greeks for this use case
    Dim symbolId As Long, expNbr As Long

    On Error Resume Next

    If doDebug Then
       ' DEBUG: price events
       Dim rg As Range
       Set rg = ThisWorkbook.Worksheets("dump_opSp").Range("AC12")
       While rg.value <> ""
           Set rg = rg.Offset(1, 0)
       Wend
    
       With rg 'sheet.Rows(rowId)
           .Offset(0, 0).value = Now()
           .Offset(0, 1).value = reqId
           .Offset(0, 2).value = tickType
           .Offset(0, 3).value = impliedVol
           .Offset(0, 4).value = delta
           .Offset(0, 5).value = optPrice
           .Offset(0, 6).value = pvDividend
           .Offset(0, 7).value = gamma
           .Offset(0, 8).value = vega
           .Offset(0, 9).value = theta
           .Offset(0, 10).value = undPrice
       End With
    End If
    
    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))
    expNbr = CLng(Mid(CStr(reqId), 3, 1))
    
    If OpSnapshots(symbolId, 2 + expNbr) = reqId Then
        Call OpSnapshot_displayPrice(symbolId, expNbr)
    End If
    
End Sub




Sub OpSnapshot_displayPrice(ByRef symbolId As Long, expNbr As Long)

    Dim ar() As Variant
    Dim d As Date
    Dim rgStatus As Range, doStatus As Boolean ', rgCacheSymbol As Range
    
    
    On Error Resume Next
    
    doStatus = False
    
    Set rgStatus = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_SYMBOLSTATUS)

    If IsEmpty(RvData(symbolId, expNbr)) And Not IsEmpty(OpSnapshots(symbolId, expNbr)) Then
        ar = OpSnapshots(symbolId, expNbr)
        
        ' we need Bid 1, Ask 2, and if they are -1 then we need Last 4, and Time of last trade 45. And if this fails we take prevClose 9
        ' Do we have bid & ask for both options already?
        If Not IsEmpty(ar(1)) And Not IsEmpty(ar(2)) Then
            
            '... and they are not -1, i.e., we are in the middle of a trading session
            If Not ar(1) = -1 And Not ar(2) = -1 Then
                RvData(symbolId, expNbr) = (ar(1) + ar(2)) / 2
                RvData(symbolId, 3) = Now()
                doStatus = True
                    
            '... else check if we have the last already
            ElseIf Not IsEmpty(ar(4)) And Not IsEmpty(ar(45)) Then
                RvData(symbolId, expNbr) = ar(4)
                d = CDate(ConvertLongToDateStr(ar(45)))
                RvData(symbolId, 3) = d
                doStatus = True
                            
            ' finally try yesterday's close (but not if the last is already there just we haven't received its tradeTime)
            ElseIf IsEmpty(ar(4)) And Not IsEmpty(ar(9)) Then
                RvData(symbolId, expNbr) = ar(9)
                RvData(symbolId, 3) = Now()
                doStatus = True
            End If
                
                
            If doStatus Then
                If Not IsEmpty(RvData(symbolId, 0)) And Not IsEmpty(RvData(symbolId, 1)) Then
                    rgStatus.value = "Options prices received"
                    Call RunCalendarWatchlistMember(symbolId)
                ElseIf Not IsEmpty(RvData(symbolId, 0)) Or Not IsEmpty(RvData(symbolId, 1)) Then
                    rgStatus.value = "Waiting for prices: 1 contract"
                End If
                
            End If
        End If
    End If
End Sub


Public Sub CalcRV(ByRef symbolId As Long)

    Dim rgUserSymbol As Range ', rgCacheSymbol As Range
    Dim rv As Double
    
    
    On Error Resume Next

    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolId)

    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).value = "Calculating RV"

    rv = (RvData(symbolId, 1) - RvData(symbolId, 0)) / RvData(symbolId, 2)

    rgUserSymbol.Offset(0, Col_CAL_RV).value = rv
    rgUserSymbol.Offset(0, Col_CAL_PSHORT).value = RvData(symbolId, 0)
    rgUserSymbol.Offset(0, Col_CAL_PLONG).value = RvData(symbolId, 1)
    rgUserSymbol.Offset(0, Col_CAL_UPDATETIME).value = RvData(symbolId, 3)
    rgUserSymbol.Offset(0, Col_CAL_SYMBOLSTATUS).value = "RV updated"
End Sub





Public Sub CopyRvSparkLine(ByRef symbolId As Long)

    Dim rgDest As Range, i As Long
    Dim ws As Worksheet, rg As Range
    
    On Error Resume Next

    Set ws = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST)
    
    Set rgDest = ws.Range(RG_WLC_SPARKLINEDATA).Offset(0, C_WLC_WID_SPARLINEDATAFIELD * symbolId)
    i = 0
    While rgDest.value <> ""
        Set rgDest = rgDest.Offset(1, 0)
        i = i + 1
    Wend
    
    If i >= C_WLC_LEN_SPARLINEDATAFIELD Then
        'reycling space: move all values one cell up, deleting the very first one
        Set rg = ws.Range(RG_WLC_SPARKLINEDATA).Offset(0, C_WLC_WID_SPARLINEDATAFIELD * symbolId)
        
        ws.Range(rg, rg.Offset(C_WLC_LEN_SPARLINEDATAFIELD - 2, 1)).value = ws.Range(rg.Offset(1, 0), rg.Offset(C_WLC_LEN_SPARLINEDATAFIELD - 1, 1)).value
        rg.Offset(C_WLC_LEN_SPARLINEDATAFIELD - 1, 0).value = Now 'ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_UPDATETIME).value
        rg.Offset(C_WLC_LEN_SPARLINEDATAFIELD - 1, 1).value = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_RV).value
    Else
        rgDest.value = Now 'ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_UPDATETIME).value
        rgDest.Offset(0, 1).value = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_RV).value
    End If
    
End Sub






Attribute VB_Name = "mWlStraddle"
Option Explicit

Private sheetId As Long
Private doDebug As Boolean
Private SymbolConid() As Variant
Private OvExpiriesStrikes() As Variant
Private UndlSnapshots() As Variant
Private OpSnapshots() As Variant
Private RvData() As Variant
Private ChainStrikes() As Variant
Private KeepStrikesAtm As Boolean






Public Sub Initialise()
    sheetId = 1
    doDebug = False
    ReDim SymbolConid(0 To C_CNTROWS_WATCHLISTSTRADDLES, 0 To 1)
    ReDim OvExpiriesStrikes(0 To C_CNTROWS_WATCHLISTSTRADDLES, 0 To 3)
    ReDim UndlSnapshots(0 To C_CNTROWS_WATCHLISTSTRADDLES, -1 To 100)
    ReDim OpSnapshots(0 To C_CNTROWS_WATCHLISTSTRADDLES, 0 To 3)
    ReDim RvData(0 To C_CNTROWS_WATCHLISTSTRADDLES, 0 To 3)
    ReDim ChainStrikes(0 To C_CNTROWS_WATCHLISTSTRADDLES, 0 To 6)
    
End Sub

 Public Sub SetKeepStrikesAtm(ByRef b As Boolean)
    KeepStrikesAtm = b
 End Sub







'=========================================
' Request contract details for underlying
'=========================================

Public Sub ReqUndlConId(ByRef Cell_str As String, triggerRun As Long)



    Dim ws As Worksheet, rg As Range
    Dim reqId As Long, symbol As String, exchange As String, stype As String, curr As String
    Dim symbolId As Long
    Dim rgUserSymbol As Range
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub
    'Call CheckChaf
    
    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(Cell_str)
    If rgUserSymbol.Rows.Count > 1 Then
        Exit Sub
    End If

    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS).value = "Retrieving symbol info"
    symbolId = rgUserSymbol.Row - Range(RG_WATCHLISTSTRADDLE_INPUT).Row
    
    
    If rgUserSymbol.value = "" Then
        SymbolConid(symbolId, 0) = Empty
        SymbolConid(symbolId, 1) = Empty
        rgUserSymbol.Offset(0, Col_USR_LONGNAME).ClearContents
        rgUserSymbol.Offset(0, Col_USR_PRICE).ClearContents
        rgUserSymbol.Offset(0, Col_USR_PSOURCE).ClearContents
        rgUserSymbol.Offset(0, Col_USR_UPDATETIME_UNDL).ClearContents
        rgUserSymbol.Offset(0, Col_USR_EXPIRYTOQUERY).ClearContents
        rgUserSymbol.Offset(0, Col_USR_STRIKETOQUERY).ClearContents
        rgUserSymbol.Offset(0, Col_USR_RV).ClearContents
        rgUserSymbol.Offset(0, Col_USR_PPUT).ClearContents
        rgUserSymbol.Offset(0, Col_USR_PCALL).ClearContents
        rgUserSymbol.Offset(0, Col_USR_UPDATETIME).ClearContents

        'delete sparkline field
        Call watchlist.DeleteSparklineDatafield(0, symbolId)
        'ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLS_SPARKLINEDATA).Offset(0, C_WLS_WID_SPARLINEDATAFIELD * symbolId) _
        '    .Resize(C_WLS_LEN_SPARLINEDATAFIELD, C_WLS_WID_SPARLINEDATAFIELD).ClearContents
        
        
        'needs to come last w/ calling loop
        rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS).ClearContents
        Exit Sub
    End If
    
    
    'delete old values
    rgUserSymbol.Offset(0, Col_USR_LONGNAME).ClearContents
    rgUserSymbol.Offset(0, Col_USR_PRICE).ClearContents
    rgUserSymbol.Offset(0, Col_USR_PSOURCE).ClearContents
    rgUserSymbol.Offset(0, Col_USR_UPDATETIME_UNDL).ClearContents
    rgUserSymbol.Offset(0, Col_USR_EXPIRYTOQUERY).ClearContents
    rgUserSymbol.Offset(0, Col_USR_STRIKETOQUERY).ClearContents
    rgUserSymbol.Offset(0, Col_USR_RV).ClearContents
    rgUserSymbol.Offset(0, Col_USR_PPUT).ClearContents
    rgUserSymbol.Offset(0, Col_USR_PCALL).ClearContents
    rgUserSymbol.Offset(0, Col_USR_UPDATETIME).ClearContents




    
    
    
    ' Copy symbol to sparkline data area
    ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLS_SPARKLINEDATA).Offset(-3, C_WLS_WID_SPARLINEDATAFIELD * symbolId).value = rgUserSymbol.value

    'delete collected RV values for sparkline
    'Call watchlist.DeleteSparklineDatafield(0, symbolId)
    'ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLS_SPARKLINEDATA).Offset(0, C_WLS_WID_SPARLINEDATAFIELD * symbolId) _
    '    .Resize(C_WLS_LEN_SPARLINEDATAFIELD, C_WLS_WID_SPARLINEDATAFIELD).ClearContents
    
    
    
    reqId = ID_WLS_UNDLCONID + triggerRun * 100000 + symbolId * 1000 + Util.IncrementReqId(sheetId)
    
    symbol = rgUserSymbol.Offset(Col_USR_SYMBOL, 0).value
    exchange = STR_EXCHANGE_SMART
    stype = STR_STYPE_STK
    curr = STR_CURR_USD
    
    Dim lContractInfo As TWSLib.IContract
    Set lContractInfo = Api.Tws.createContract()
    
    With lContractInfo
        .symbol = UCase(symbol)
        .secType = UCase(stype)
        '.lastTradeDateOrContractMonth = contractTable(id, Col_LASTTRADEDATE).value
        '.strike = contractTable(id, Col_STRIKE).value
        '.right = UCase(contractTable(id, Col_RIGHT).value)
        '.multiplier = UCase(contractTable(id, Col_MULTIPLIER).value)
        .exchange = UCase(exchange)
        '.primaryExchange = UCase(contractTable(id, Col_PRIMEXCH).value)
        .currency = UCase(curr)
        '.localSymbol = UCase(contractTable(id, Col_LOCALSYMBOL).value)
        '.conId = contractTable(id, Col_CONID).value
        '.includeExpired = queryTable(id, Col_INCLUDEEXPIRED).value
    End With
    
    Api.Tws.reqContractDetailsEx reqId, lContractInfo
   
End Sub

Public Sub UpdateUndlConId(ByVal reqId As Long, ByVal ContractDetails As TWSLib.IContractDetails)

    Dim ws As Worksheet, rg As Range
    Dim contract As TWSLib.IContract
    Dim rgUserSymbol As Range
    Dim symbolId As Long
    
    On Error Resume Next

    symbolId = CLng(Mid(reqId, 4, 2))
    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0)
    Set contract = ContractDetails.contract
    
    ' write to watchlist sheet
    rgUserSymbol.Offset(0, Col_USR_LONGNAME).value = StrConv(ContractDetails.longName, vbProperCase)
    
    SymbolConid(symbolId, 0) = contract.symbol
    SymbolConid(symbolId, 1) = contract.conid
    

End Sub

Public Sub UpdateUndlConIdEnd(ByVal reqId As Long)

    Dim rgUserSymbol As Range
    Dim symbolId As Long, triggerRun As Long
    
    On Error Resume Next
    
    symbolId = CLng(Mid(reqId, 4, 2))
    triggerRun = CLng(Mid(reqId, 3, 1))
    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0)
    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS).value = "Symbol ok"
    
    If triggerRun = 1 Then
        Call RunStraddleWatchlistMember(symbolId)
    End If
End Sub

Public Sub ErrorUndlConId(ByVal id As Long, ByVal errorCode As Long, ByVal errorMsg As String)

    Dim rgUserSymbol As Range
    Dim symbolId As Long
    
    On Error Resume Next
    
    symbolId = CLng(Mid(id, 4, 2))
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0)
    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS).value = "Symbol invalid"
End Sub













'=================
' Real-Time Update
'=================



Sub RunStraddleWatchlistMember(ByRef symbolId As Long)

    'read contract data
    Dim ws As Worksheet, rg As Range
    Dim expiryStrikeDate As Date, expiryStrikeSymbol As String
    Dim reqId As Long, conid As Long, rg_conid As Range, rg_symbol As Range
    Dim symbol As String, exchange As String, stype As String, cur As String
    Dim rgUserSymbol As Range
    Dim status As String
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub
    'Call CheckChaf
    
    If Not IsArrayAllocated(SymbolConid) Then
        Initialise
    End If
    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0)
    status = rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS).value
    
    If status = "Retrieving symbol info" Then
        'ReqUndlConId is working, escape circular calling
        Exit Sub
    End If
    
    'If status = "" Then
    '    Call watchlist.PasteLtd(rgUserSymbol.Address, False)
    '    Call ReqUndlConId(rgUserSymbol.Address, 1)
    '    Exit Sub
    'End If
    
    If IsEmpty(SymbolConid(symbolId, 0)) Then
        Call ReqUndlConId(rgUserSymbol.Address, 1)
        Exit Sub
    End If
    
    
    Select Case status
    
        Case "", "Symbol ok", "RV updated", "Expiry does not exist", "Strike does not exist" _
                , "Waiting for prices: 1 contract", "Waiting for prices: 2 contracts"
            'new start: get download date of expiries and strikes
            
                ' symbol changed? Expiries we have are from today?
                expiryStrikeSymbol = OvExpiriesStrikes(symbolId, 0)
                expiryStrikeDate = OvExpiriesStrikes(symbolId, 1)
            
                If Not expiryStrikeSymbol = rgUserSymbol.value Or CDate(Int(expiryStrikeDate)) < Date Then
                    'download expiries
                    OpChainOverview_reqSecDefOP (symbolId)
                Else
                    'use the data we have and continue with next step
                    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS).value = "Options chains complete"
                    RunStraddleWatchlistMember (symbolId)
                End If
            
            
        Case "Options chains complete"
            UndlSnapshot_reqSnapshot (symbolId)
            
            
        Case "Underlying complete"
            FindExpiryToQuery (symbolId)
            
            
        Case "Options expiry complete"
            '(symbolId)
            
            'check if we can use the strikes already queried: symbol changed? Strikes we have are from today?
        
            If Not ChainStrikes(symbolId, 2) = rgUserSymbol.value _
                Or Not ChainStrikes(symbolId, 3) = rgUserSymbol.Offset(0, Col_USR_EXPIRYTOQUERY).value _
                Or CDate(Int(ChainStrikes(symbolId, 4))) < Date _
                Or IsEmpty(ChainStrikes(symbolId, 0)) _
                Or IsEmpty(ChainStrikes(symbolId, 1)) Then
                    ChainStrikes_reqCons (symbolId)
            Else
                'use the data we have and continue with next step
                rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS).value = "Options contracts received"
                RunStraddleWatchlistMember (symbolId)
            End If
            
            
        Case "Options contracts received"
            FindStrikeToQuery (symbolId)
                             
                             
        Case "ATM strike complete"
            OpSnapshot_reqSnapshot (symbolId)
            
            
        Case "Options prices received"
            CalcRV (symbolId)
            CopyRvSparkLine (symbolId)
            Exit Sub
            
            
        Case "Retrieving symbol info", "Symbol invalid", "No options available"
            'new start: but Ib does not have that symbol in its db
            Exit Sub

            
        'When one of the procs is running at the moment, just abort here
        Case "Requesting options chains", "Requesting underlying price", "Calculate expiry", _
                "Requesting available strikes", "Awaiting 2 options contracts", "Awaiting 1 options contract", _
                "Calculate strike", "Requesting options prices", _
                "Waiting for prices: 2 contracts", "Waiting for prices: 1 contract", "Calculating RV"
            Exit Sub
            
            
        Case Else
            'MsgBox ("status not handled in RunStraddleWatchlistMember: " & status)
            
    End Select
    

    
    
End Sub
    


'======================================================
' Get options chains expiries and strikes
' (not all strikes might be available for all expiries)
'======================================================


Public Sub OpChainOverview_reqSecDefOP(ByRef symbolId As Long)

    'If Not CheckConnected Then Exit Sub
    
    Dim wsUser As Worksheet, rg As Range, conid As Long, symbol As String, stype As String, reqId As Long
    Dim rgUserSymbol As Range
    'Dim rgCacheSymbol As Range
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub

    'Set wsUser = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST) ': Set wsCache = ThisWorkbook.Worksheets(STR_SHEET_CACHE)
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = wsCache.Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolid)
    
    
    'If IsEmpty(SymbolConid(symbolId, 0)) Then
    '    Call ReqUndlConId(rgUserSymbol.Address, 1)
    '    Exit Sub
    'End If
    
    
    'status
    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS).value = "Requesting options chains"
    
    'delete old values
    OvExpiriesStrikes(symbolId, 0) = Empty
    OvExpiriesStrikes(symbolId, 1) = Empty
    OvExpiriesStrikes(symbolId, 2) = Empty
    OvExpiriesStrikes(symbolId, 3) = Empty
    
    
    'SHEETOUTPUT: delete old values for expiries/strikes
    'wsCache.Range(rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 0), rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 0).End(xlDown)).ClearContents 'expiries
    'wsCache.Range(rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 1), rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 1).End(xlDown)).ClearContents 'strikes
    
    reqId = ID_WLS_OPCHAINOV + symbolId * 1000 + Util.IncrementReqId(sheetId)
        
    symbol = SymbolConid(symbolId, 0)
    conid = SymbolConid(symbolId, 1)
    stype = STR_STYPE_STK

    Api.Tws.reqSecDefOptParams reqId, symbol, "", stype, conid

End Sub

Public Sub OpChainOverview_updateSecDefOP(reqId As Long, _
                          exchange As String, _
                          undrlyingConId As Long, _
                          tradingClass As String, _
                          multiplier As String, _
                          expirationsList As String, _
                          strikesList As String)


    On Error Resume Next

    If exchange = "SMART" Then

        'Dim rgCacheSymbol As Range
        Dim expiries_str() As String, strikes_str() As String, xp() As Variant, st() As Variant
        Dim symbolId As Long, i As Long
        Dim s As String
        
        
        symbolId = CLng(Mid(CStr(reqId), 4, 2))
        
        'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolid)
        
        expiries_str() = Split(expirationsList, ";")
        strikes_str() = Split(strikesList, ";")
        
        ReDim xp(UBound(expiries_str))
        ReDim st(UBound(strikes_str))
        
        For i = 0 To UBound(expiries_str)
            s = expiries_str(i) '20210115
            xp(i) = DateSerial(Left(s, 4), Mid(s, 5, 2), right(s, 2))
            'SHEETOUTPUT
            'rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES + i, 0).value = xp(i)
        Next
        
        For i = 0 To UBound(strikes_str)
            st(i) = CDbl(strikes_str(i))
            'SHEETOUTPUT
            'rgCacheSymbol.Offset(Row_EXPIRYSTRIKE + i, 0).value = st(i)
        Next


        OvExpiriesStrikes(symbolId, 0) = SymbolConid(symbolId, 0)
        OvExpiriesStrikes(symbolId, 1) = Now()
        OvExpiriesStrikes(symbolId, 2) = xp
        OvExpiriesStrikes(symbolId, 3) = st
        'SHEETOUTPUT
        'rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_DATES, 0).value = Now()
    End If
    
    
    If doDebug Then
        'DEBUG
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_opov").Range("A12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
        With rg
            .Offset(0, 0).value = Now()
            .Offset(0, 1).value = reqId
            .Offset(0, 2).value = exchange
            .Offset(0, 3).value = undrlyingConId
            .Offset(0, 4).value = tradingClass
            .Offset(0, 5).value = multiplier
            .Offset(0, 6).value = expirationsList
            .Offset(0, 7).value = strikesList
        End With
    End If
    
    
End Sub
           
Public Sub OpChainOverview_updateSecDefOPEnd(reqId As Long)

    Dim rgUserSymbol As Range, symbolId As Long
    
    On Error Resume Next
    
    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))

    'status
    If IsEmpty(OvExpiriesStrikes(symbolId, 2)) Then
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, Col_USR_SYMBOLSTATUS).value = "No options available"
    Else
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, Col_USR_SYMBOLSTATUS).value = "Options chains complete"
    End If
    
    Call RunStraddleWatchlistMember(symbolId)

End Sub






'=====================
' Get Price Underlying
'=====================

Sub UndlSnapshot_reqSnapshot(ByRef symbolId As Long)


    'Dim wsUser As Worksheet, wsCache As Worksheet, rg As Range, conid As Long, stype As String, reqId As Long
    Dim rgUserSymbol As Range ', rgCacheSymbol As Range
    Dim genericTickList As String, Snapshot As Boolean
    Dim reqId As Long, i As Long
    
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub

    'Set wsUser = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST): Set wsCache = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL)
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolId)
    
    'status
    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS).value = "Requesting Underlying Price"
    
    ' delete UndPrice and PSource
    rgUserSymbol.Offset(0, Col_USR_PRICE).value = ""
    rgUserSymbol.Offset(0, Col_USR_PSOURCE).value = ""
    rgUserSymbol.Offset(0, Col_USR_UPDATETIME_UNDL).value = ""
        
        
    'ReDim UndlSnapshots(0 To C_CNTROWS_WATCHLISTSTRADDLES, -1 To 100)
        
    For i = -1 To UBound(UndlSnapshots, 2)
        UndlSnapshots(symbolId, i) = Empty
    Next
        
    'SHEETOUTPUT: delete old values
    'rgCacheSymbol.Offset(Row_UPRICE, 1).value = ""
    'rgCacheSymbol.Offset(Row_UPTYPE, 1).value = ""
    'rgCacheSymbol.Offset(Row_UDATETIME, 1).value = ""
    
    reqId = ID_WLS_UNDLSNAPSHOT + symbolId * 1000 + Util.IncrementReqId(sheetId)


    ' create and fill contract
    Dim lContractInfo As TWSLib.IContract
    Set lContractInfo = Api.Tws.createContract()
    
    With lContractInfo
        .symbol = UCase(SymbolConid(symbolId, 1))
        .secType = STR_STYPE_STK
        .exchange = STR_EXCHANGE_SMART
        .currency = STR_CURR_USD
        .conid = SymbolConid(symbolId, 1)
    End With
    
    
    '100 Option Volume (currently for stocks)
    '101 Option Open Interest (currently for stocks)
    '104 Historical Volatility (currently for stocks)
    '105 Average Option Volume (currently for stocks)
    '106 Option Implied Volatility (currently for stocks)
    
    'genericTickList = "100,101,104,105,106"
    genericTickList = ""
    
    ' mkt data options
    Dim mktDataOptions As TWSLib.ITagValueList
    Set mktDataOptions = Api.Tws.createTagValueList()
    
    Snapshot = True
    
    Api.Tws.reqMktDataEx reqId, lContractInfo, genericTickList, Snapshot, False, mktDataOptions

End Sub



Public Sub UndlSnapshot_updatePrice(reqId As Long, tickType As Long, price As Double, CanAutoExecute As Boolean, PastLimit As Boolean, PreOpen As Boolean)

    Dim rgUserSymbol As Range, rgCacheSymbol As Range, symbolId As Long, p As Double
    
    
    On Error Resume Next
    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))
    
    'Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolid, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolid)

    UndlSnapshots(symbolId, tickType) = price

    If doDebug Then
        
        ' DEBUG: price events
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_undl").Range("A12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
        With rg
            .Offset(0, 0).value = reqId
            .Offset(0, 1).value = tickType
            .Offset(0, 2).value = price
            .Offset(0, 3).value = CanAutoExecute
            .Offset(0, 4).value = PastLimit
            .Offset(0, 5).value = PreOpen
        End With
    End If
    
    
    UndlSnapshot_displayPrice (symbolId)

End Sub




Public Sub UndlSnapshot_updateSize(reqId As Long, tickType As Long, size As Long)

    Dim symbolId As Long
    
    On Error Resume Next
    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))

    UndlSnapshots(symbolId, tickType) = size

    If doDebug Then
        ' DEBUG: Print events
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_undl").Range("H12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg
            .Offset(0, 0).value = reqId
            .Offset(0, 1).value = tickType
            .Offset(0, 2).value = size
        End With
    End If
    
    UndlSnapshot_displayPrice (symbolId)

End Sub


Public Sub UndlSnapshot_updateString(id As Long, tickType As Long, value As String)

    Dim symbolId As Long
    
    On Error Resume Next
    
    
    symbolId = CLng(Mid(CStr(id), 4, 2))
    
    UndlSnapshots(symbolId, tickType) = value


    If doDebug Then
        ' DEBUG: Print events
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_undl").Range("L12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg
            .Offset(0, 0).value = id
            .Offset(0, 1).value = tickType
            .Offset(0, 2).value = value
        End With
    End If

    UndlSnapshot_displayPrice (symbolId)

End Sub

Public Sub UndlSnapshot_displayPrice(ByRef symbolId As Long)

    'Check if we have the values we need and display them.
    'DO NOT WAIT FOR tickSnapshotEnd. It is sent only 11 secs after the request (wtf?!?)
    '   this needs to be in own sub because we want to display data coming in from updatePrices and updateString.
    '   we cannot be sure that after update string there will be another updatePrice event (or vice versa)
    
    
    Dim p As Double
    Dim d As Date
    Dim rgUserSymbol As Range ', rgCacheSymbol As Range
    
    
    On Error Resume Next
    
    'symbolId = CLng(Mid(CStr(reqId), 4, 2))
    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolId)
    
    
    ' if values have not been printed to screen yet
    If IsEmpty(UndlSnapshots(symbolId, -1)) Then
    
        '1) Do we already have Bid and Ask? (we need to wait for them in all cases)
        If Not IsEmpty(UndlSnapshots(symbolId, 1)) And Not IsEmpty(UndlSnapshots(symbolId, 2)) Then
    
            '.... and they are not -1 (i.e., we are in a trading session
            If Not UndlSnapshots(symbolId, 1) = -1 And Not UndlSnapshots(symbolId, 2) = -1 Then
                UndlSnapshots(symbolId, -1) = True
                p = (UndlSnapshots(symbolId, 1) + UndlSnapshots(symbolId, 2)) / 2
                RvData(symbolId, 2) = p
                rgUserSymbol.Offset(0, Col_USR_PRICE).value = p
                rgUserSymbol.Offset(0, Col_USR_PSOURCE).value = "Mid"
                rgUserSymbol.Offset(0, Col_USR_UPDATETIME_UNDL).value = Now()
                'rgCacheSymbol.Offset(Row_UPRICE, 1).value = p
                'rgCacheSymbol.Offset(Row_UPTYPE, 1).value = "Mid"
                'rgCacheSymbol.Offset(Row_UDATETIME, 1).value = Now()
                
                'status
                ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, Col_USR_SYMBOLSTATUS) = "Underlying complete"
                
                Call RunStraddleWatchlistMember(symbolId)
                
            '... try last if no bid ask
            ElseIf Not IsEmpty(UndlSnapshots(symbolId, 4)) And Not IsEmpty(UndlSnapshots(symbolId, 45)) Then
                'if they are -1 -> use last. If we have that not, just wait for more data to come
                UndlSnapshots(symbolId, -1) = True
                
                d = CDate(ConvertLongToDateStr(UndlSnapshots(symbolId, 45)))
                
                RvData(symbolId, 2) = UndlSnapshots(symbolId, 4)
                
                rgUserSymbol.Offset(0, Col_USR_PRICE).value = UndlSnapshots(symbolId, 4)
                rgUserSymbol.Offset(0, Col_USR_PSOURCE).value = "Last"
                rgUserSymbol.Offset(0, Col_USR_UPDATETIME_UNDL).value = d
                
                'rgCacheSymbol.Offset(Row_UPRICE, 1).value = UndlSnapshots(symbolId, 4)
                'rgCacheSymbol.Offset(Row_UPTYPE, 1).value = "Last"
                'rgCacheSymbol.Offset(Row_UDATETIME, 1).value = d
                
                'status
                ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, Col_USR_SYMBOLSTATUS) = "Underlying complete"
                
                Call RunStraddleWatchlistMember(symbolId)
                
            ' finally try yesterday's close (but not if the last is already there just we haven't received its tradeTime)
            ElseIf IsEmpty(UndlSnapshots(symbolId, 4)) And Not IsEmpty(UndlSnapshots(symbolId, 9)) Then
                
                UndlSnapshots(symbolId, -1) = True
                
                RvData(symbolId, 2) = UndlSnapshots(symbolId, 9)
                
                rgUserSymbol.Offset(0, Col_USR_PRICE).value = UndlSnapshots(symbolId, 9)
                rgUserSymbol.Offset(0, Col_USR_PSOURCE).value = "PrevClose"
                
                'rgCacheSymbol.Offset(Row_UPRICE, 1).value = UndlSnapshots(symbolId, 9)
                'rgCacheSymbol.Offset(Row_UPTYPE, 1).value = "PrevClose"
                
                'status
                ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, Col_USR_SYMBOLSTATUS) = "Underlying complete"
                
                Call RunStraddleWatchlistMember(symbolId)
                
            End If
        End If
    End If

End Sub


'======================
' Expiry for RV options
'======================


Public Sub FindExpiryToQuery(ByRef symbolId As Long)

    Dim rgUserSymbol As Range, xp() As Variant, i As Long, expiry As Variant
    
    On Error Resume Next
    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolId)
        
    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS) = "Calculate expiry"
    'rgUserSymbol.Offset(0, Col_USR_EXPIRYTOQUERY).ClearContents
    

    'DEBUG:
    ' read in underlying last prices and strikes available for underlying manually
    'Dim ws As Worksheet, rg As Range, expiries() As Variant, tmparr() As Variant
    'ReDim expiries(0 To C_CNTROWS_WATCHLISTSTRADDLES)
    'Set ws = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL): Set rg = ws.Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(Row_EXPIRYSTRIKE, C_CNTCOLS_WLOP * symbolId)
    'tmparr = ws.Range(rg, rg.End(xlDown)).value
    'expiries(symbolId) = Application.Transpose(Application.index(tmparr, 0, 1))
    
    
     xp = OvExpiriesStrikes(symbolId, 2)
     expiry = rgUserSymbol.Offset(0, Col_USR_EXPIRYTOQUERY).value


    If Not expiry = "" Then
    
        ' does it exist
        For i = 0 To UBound(xp)
            If xp(i) >= expiry Then
                Exit For
            End If
        Next
        
        If i > UBound(xp) Or Not expiry = xp(i) Then
            rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS) = "Expiry does not exist"
            Exit Sub
        End If
    
    
    Else

        'load (user manipulatable) last trade date
        Dim ltd As Date, ExpiryToQuery As Date
        ltd = rgUserSymbol.Offset(0, Col_USR_LTD).value
        
            
        For i = 0 To UBound(xp) - 1
            If xp(i) > ltd Then
                ExpiryToQuery = xp(i)
                Exit For
            End If
        Next
        
        If ExpiryToQuery = Empty Then
            MsgBox ("Could not locate an expiry after earnings date. Please chose closer earnings date")
            Exit Sub
        End If
        
        If Not rgUserSymbol.Offset(0, Col_USR_EXPIRYTOQUERY).value = ExpiryToQuery Then
            'supress deletion of sparkline data
            rgUserSymbol.Offset(0, Col_USR_EXPIRYTOQUERY).value = ExpiryToQuery
        End If
    End If
    
    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS) = "Options expiry complete"
    Call RunStraddleWatchlistMember(symbolId)
        

    
End Sub

'======================
' Strikes for RV options
'======================

Public Sub ChainStrikes_reqCons(ByRef symbolId As Long)

   'If Not CheckConnected Then Exit Sub


    Dim rgUserSymbol As Range ', rg As Range ', rgCacheSymbol As Range
    On Error Resume Next
    If Not CheckConnected Then Exit Sub

    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolId)

    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS).value = "Requesting available strikes"
    
    
    Dim expiry As Date, right As Variant, oid As Long, reqId As Long
    
    expiry = rgUserSymbol.Offset(0, Col_USR_EXPIRYTOQUERY).value

    'delete old values
    ChainStrikes(symbolId, 0) = Empty
    ChainStrikes(symbolId, 1) = Empty
    ChainStrikes(symbolId, 2) = SymbolConid(symbolId, 0)
    ChainStrikes(symbolId, 3) = expiry
    ChainStrikes(symbolId, 4) = Empty
    ChainStrikes(symbolId, 5) = Empty
    ChainStrikes(symbolId, 6) = Empty
    
    
    'put strikes
    'Set rg = rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 1)
    'ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(rg, rg.End(xlDown)).ClearContents
    
    'call strikes
    'Set rg = rgCacheSymbol.Offset(Row_EXPIRYSTRIKE_VALUES, 2)
    'ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(rg, rg.End(xlDown)).ClearContents
    
    'ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(Row_EXPIRYSTRIKE_DATES, C_CNTCOLS_WLOP * symbolId + 1).value = ""
    
    

    
    'If expiry = "" Then
    '    MsgBox ("Expiry field of that security is empty")
    '    Exit Sub
    'End If

    For Each right In Array("Put", "Call")
        
        If right = "Put" Then oid = 0 Else oid = 1
        
        'reqid
        reqId = ID_WLS_CHAINSTRIKES + oid * 100000 + symbolId * 1000 + Util.IncrementReqId(sheetId)
        ChainStrikes(symbolId, 5 + oid) = reqId
            
        ' create contract structure
        Dim lContractInfo As TWSLib.IContract
        Set lContractInfo = Api.Tws.createContract()
        
        With lContractInfo
            .symbol = SymbolConid(symbolId, 0)
            .secType = STR_STYPE_OPT
            .exchange = STR_EXCHANGE_SMART
            .currency = STR_CURR_USD
            .lastTradeDateOrContractMonth = Format(expiry, "yyyymmdd")
            '.strike = strike
            .right = right
            '.multiplier = UCase(contractTable(id, Col_MULTIPLIER).value)
            '.primaryExchange = UCase(contractTable(id, Col_PRIMEXCH).value)
            '.localSymbol = UCase(contractTable(id, Col_LOCALSYMBOL).value)
            '.conid = contractTable(id, Col_CONID).value
            '.includeExpired = queryTable(id, Col_INCLUDEEXPIRED).value
        End With

        Api.Tws.reqContractDetailsEx reqId, lContractInfo
        
        If right = "Put" Then
            Call Util.TakeNap(100)
        End If
        'Exit For
        
        If doDebug Then
            ' DEBUG: Print events
            Dim rg As Range
            Set rg = ThisWorkbook.Worksheets("dump_chainStrikes").Range("M12")
            While rg.value <> ""
                Set rg = rg.Offset(1, 0)
            Wend
        
            With rg
                .Offset(0, 0).value = Now()
                .Offset(0, 1).value = reqId
                .Offset(0, 2).value = SymbolConid(symbolId, 0)
                .Offset(0, 3).value = right
            End With
        End If



        
    Next
    'Exit For

    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS) = "Awaiting 2 options contracts"

End Sub


Public Sub ChainStrikes_UpdateConDet(ByVal reqId As Long, ByVal ContractDetails As TWSLib.IContractDetails)
    
    'Dim ws As Worksheet
    Dim contract As TWSLib.IContract
    Dim symbolId As Long
    Dim putCall As Long
    'Dim dic As Object
    Dim dic As Scripting.Dictionary
    
    On Error Resume Next
    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))
    putCall = CLng(Mid(CStr(reqId), 3, 1))
    
    'putCall = putCall - 1
    
    
    Set contract = ContractDetails.contract
    
    
    
    If IsEmpty(ChainStrikes(symbolId, putCall)) Then
        Set dic = New Scripting.Dictionary
    Else
        Set dic = ChainStrikes(symbolId, putCall)
    End If
    
    'dic.Add contract.strike, contract.conid
    dic.Item(contract.strike) = contract.conid
        
     
    Set ChainStrikes(symbolId, putCall) = dic
    
    
    
    'SHEETOUTPUT: write strikes to cache sheet
    'Set rg = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(Row_EXPIRYSTRIKE_VALUES, C_CNTCOLS_WLOP * symbolId + 1 + putCall)
    'While rg.value <> ""
    '    Set rg = rg.Offset(1, 0)
    'Wend
    'rg.value = contract.strike


    If doDebug Then
        ' DEBUG: Print events
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_chainStrikes").Range("A12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg
            .Offset(0, 0).value = Now()
            .Offset(0, 1).value = reqId
            .Offset(0, 2).value = contract.symbol
            .Offset(0, 3).value = contract.conid
            .Offset(0, 4).value = contract.lastTradeDateOrContractMonth
            .Offset(0, 5).value = contract.strike
            .Offset(0, 6).value = contract.right
            .Offset(0, 7).value = contract.exchange
            .Offset(0, 8).value = contract.primaryExchange
            .Offset(0, 9).value = contract.secId
            .Offset(0, 10).value = contract.tradingClass
        End With
    End If





End Sub


Public Sub ChainStrikes_UpdateConDetEnd(ByVal reqId)


    Dim rgStatus As Range, symbolId As Long, putCall As Long
    
    On Error Resume Next
    
    symbolId = CLng(Mid(reqId, 4, 2))
    putCall = CLng(Mid(CStr(reqId), 3, 1))
    
    'ChainStrikes(symbolId, 2) = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0) 'Symbol
    ChainStrikes(symbolId, 4) = Now() 'UpdateTime
    
    
    If doDebug Then
        ' DEBUG: Print events
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_chainStrikes").Range("R12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg
            .Offset(0, 0).value = Now()
            .Offset(0, 1).value = reqId
        End With
    End If
    
    
    
    
    'ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(Row_EXPIRYSTRIKE_DATES, C_CNTCOLS_WLOP * symbolId + 1).value = Now()
    
    ' set status
    Set rgStatus = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, Col_USR_SYMBOLSTATUS)
    
    'If rgStatus.value = "Awaiting 2 options contracts" Then
    '    rgStatus.value = "Awaiting 1 options contract"
    'ElseIf rgStatus.value = "Awaiting 1 options contract" Then
    '    rgStatus.value = "Options contracts received"
    '    Call RunStraddleWatchlistMember(symbolId)
    'End If

    If ChainStrikes(symbolId, 5) = reqId Then
        ChainStrikes(symbolId, 5) = "ok"
    ElseIf ChainStrikes(symbolId, 6) = reqId Then
        ChainStrikes(symbolId, 6) = "ok"
    End If
    'ChainStrikes(symbolId, 5 + putCall) = "ok"
    
    If ChainStrikes(symbolId, 5) = "ok" And ChainStrikes(symbolId, 6) = "ok" Then
        rgStatus.value = "Options contracts received"
        Call RunStraddleWatchlistMember(symbolId)
    ElseIf ChainStrikes(symbolId, 5) = "ok" Or ChainStrikes(symbolId, 6) = "ok" Then
        rgStatus.value = "Awaiting 1 options contract"
    End If

End Sub



'======================
' Up-to-date options prices
'======================






Public Sub FindStrikeToQuery(ByRef symbolId As Long)

    Dim rgUserSymbol As Range ', rgCacheSymbol As Range
    Dim d As Object, sk As Object, s As Variant, i As Long
    Dim strikes() As Double, PutCallStrikes() As Variant
    Dim UPrice As Double, AtmStrike As Double, strike As Variant
    
    On Error Resume Next
    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolId)

    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS) = "Calculate strike"

    PutCallStrikes = Util.CommonStrikesPutCall(ChainStrikes(symbolId, 0), ChainStrikes(symbolId, 1))



     'xp = OvExpiriesStrikes(symbolId, 2)
     'expiry = rgUserSymbol.Offset(0, Col_USR_EXPIRYTOQUERY).value
     strike = rgUserSymbol.Offset(0, Col_USR_STRIKETOQUERY).value


    If Not strike = "" And Not KeepStrikesAtm Then
    
        ' does it exist
        For i = 0 To UBound(PutCallStrikes)
            If PutCallStrikes(i) >= strike Then
                Exit For
            End If
        Next
        
        If i > UBound(PutCallStrikes) Or Not strike = PutCallStrikes(i) Then
            rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS) = "Strike does not exist"
            Exit Sub
        End If
    
    
    Else

        UPrice = rgUserSymbol.Offset(0, Col_USR_PRICE).value
        
        AtmStrike = Util.FindTheClosestStrike(CDbl(UPrice), PutCallStrikes)
        
        If Not rgUserSymbol.Offset(0, Col_USR_STRIKETOQUERY).value = AtmStrike Then
            'surpress deletion of sparkine data!
            rgUserSymbol.Offset(0, Col_USR_STRIKETOQUERY).value = AtmStrike
        End If
    End If
    
    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS) = "ATM strike complete"
    
    Call RunStraddleWatchlistMember(symbolId)

End Sub







Public Sub OpSnapshot_reqSnapshot(ByRef symbolId As Long)

    Dim rgUserSymbol As Range, rg As Range, expiry As Date ', rgCacheSymbol As Range
    Dim reqId As Long, genericTickList As String, Snapshot As Boolean
    Dim lContractInfo As TWSLib.IContract, putCall As Variant, oid As Long
    Dim strike As Double, reqIdTail As Long
    
    On Error Resume Next
    If Not CheckConnected Then Exit Sub

    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolId)
    
    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS).value = "Requesting options prices"
    
    'delete old values
    'OpSnapshots(symbolId, -1) = Empty
    OpSnapshots(symbolId, 0) = Empty
    OpSnapshots(symbolId, 1) = Empty
    RvData(symbolId, 0) = Empty
    RvData(symbolId, 1) = Empty
    ' do not delete underlying price!!! Set by UndlSnapshot_displayPrice RvData(symbolId, 2) = Empty
    RvData(symbolId, 3) = Empty
    
    
    expiry = rgUserSymbol.Offset(0, Col_USR_EXPIRYTOQUERY).value
    strike = rgUserSymbol.Offset(0, Col_USR_STRIKETOQUERY).value
    genericTickList = ""
    Snapshot = True
    
    ' mkt data options
    Dim mktDataOptions As TWSLib.ITagValueList
    Set mktDataOptions = Api.Tws.createTagValueList()
    
    reqIdTail = Util.IncrementReqId(sheetId)
    
    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS).value = "Waiting for prices: 2 contracts"
    
    For Each putCall In Array("Put", "Call")
    
        If putCall = "Put" Then oid = 0 Else oid = 1
        
        reqId = ID_WLS_OPSNAPSHOT + oid * 100000 + symbolId * 1000 + reqIdTail
        OpSnapshots(symbolId, 2 + oid) = reqId
        
        Set lContractInfo = Api.Tws.createContract()

        With lContractInfo
            .symbol = SymbolConid(symbolId, 0)
            .secType = STR_STYPE_OPT
            .exchange = STR_EXCHANGE_SMART
            
            .currency = STR_CURR_USD
            .lastTradeDateOrContractMonth = Format(expiry, "yyyymmdd")
            .strike = strike
            .right = putCall
            '.multiplier = UCase(contractTable(id, Col_MULTIPLIER).value)
            '.primaryExchange = UCase(contractTable(id, Col_PRIMEXCH).value)
            '.localSymbol = UCase(contractTable(id, Col_LOCALSYMBOL).value)
            '.conid = contractTable(id, Col_CONID).value
            '.includeExpired = queryTable(id, Col_INCLUDEEXPIRED).value
        End With
    
        Api.Tws.reqMktDataEx reqId, lContractInfo, genericTickList, Snapshot, False, mktDataOptions
        
        
        If doDebug Then
            ' DEBUG: price events
            Dim rg2 As Range
            Set rg2 = ThisWorkbook.Worksheets("dump_opSp").Range("A12")
            While rg2.value <> ""
                Set rg2 = rg2.Offset(1, 0)
            Wend
        
            With rg2
                .Offset(0, 0).value = Now()
                .Offset(0, 1).value = reqId
                .Offset(0, 2).value = SymbolConid(symbolId, 0)
                .Offset(0, 3).value = expiry
                .Offset(0, 4).value = strike
                .Offset(0, 5).value = putCall
                .Offset(0, 6).value = "Stdl"
            End With
    
        End If
        
        
        If oid = 0 Then
            Call Util.TakeNap(100)
        End If
    Next
    

    
    
End Sub




Sub OpSnapshot_updatePrice(reqId As Long, tickType As Long, price As Double, CanAutoExecute As Boolean, PastLimit As Boolean, PreOpen As Boolean)

    Dim ar() As Variant, symbolId As Long, putCall As Long
    
    On Error Resume Next
    
    If doDebug Then
        ' DEBUG: price events
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_opSp").Range("I12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg
            .Offset(0, 0).value = Now()
            .Offset(0, 1).value = reqId
            .Offset(0, 2).value = tickType
            .Offset(0, 3).value = price
            .Offset(0, 4).value = CanAutoExecute
            .Offset(0, 5).value = PastLimit
            .Offset(0, 6).value = PreOpen
        End With

    End If
    
    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))
    putCall = CLng(Mid(CStr(reqId), 3, 1))

    If OpSnapshots(symbolId, 2 + putCall) = reqId Then
        If IsEmpty(OpSnapshots(symbolId, putCall)) Then
            ReDim ar(0 To C_ARLEN_OPSNAPSHOT)
        Else
            ar = OpSnapshots(symbolId, putCall)
        End If
        
        ar(tickType) = price
        OpSnapshots(symbolId, putCall) = ar
    
        Call OpSnapshot_displayPrice(symbolId, putCall)
    End If

    
End Sub


Sub OpSnapshot_updateSize(reqId As Long, tickType As Long, size As Long)

    Dim ar() As Variant, symbolId As Long, putCall As Long
    
    On Error Resume Next
    
    If doDebug Then
        ' DEBUG: price events
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_opSp").Range("Q12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg
            .Offset(0, 0).value = Now()
            .Offset(0, 1).value = reqId
            .Offset(0, 2).value = tickType
            .Offset(0, 3).value = size
        End With
    End If
    
    
    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))
    putCall = CLng(Mid(CStr(reqId), 3, 1))

    If OpSnapshots(symbolId, 2 + putCall) = reqId Then
        If IsEmpty(OpSnapshots(symbolId, putCall)) Then
            ReDim ar(0 To C_ARLEN_OPSNAPSHOT)
        Else
            ar = OpSnapshots(symbolId, putCall)
        End If
        
        ar(tickType) = size
        OpSnapshots(symbolId, putCall) = ar
        
        Call OpSnapshot_displayPrice(symbolId, putCall)
    End If
    
End Sub

Sub OpSnapshot_updateString(reqId As Long, tickType As Long, value As String)

    Dim ar() As Variant, symbolId As Long, putCall As Long
    
    
    On Error Resume Next
    
    If doDebug Then
        ' DEBUG: price events
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_opSp").Range("W12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg 'sheet.Rows(rowId)
            .Offset(0, 0).value = Now()
            .Offset(0, 1).value = reqId
            .Offset(0, 2).value = tickType
            .Offset(0, 3).value = value
        End With
    End If
    
    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))
    putCall = CLng(Mid(CStr(reqId), 3, 1))

    If OpSnapshots(symbolId, 2 + putCall) = reqId Then
        If IsEmpty(OpSnapshots(symbolId, putCall)) Then
            ReDim ar(0 To C_ARLEN_OPSNAPSHOT)
        Else
            ar = OpSnapshots(symbolId, putCall)
        End If
        
        ar(tickType) = value
        OpSnapshots(symbolId, putCall) = ar
        
        Call OpSnapshot_displayPrice(symbolId, putCall)
    End If

End Sub

Public Sub OpSnapshot_updateOpCalc(reqId As Long, tickType As Long, ByVal impliedVol As Double, ByVal delta As Double, ByVal optPrice As Double, ByVal pvDividend As Double, ByVal gamma As Double, ByVal vega As Double, ByVal theta As Double, ByVal undPrice As Double)

    ' no need to record greeks for this use case
    Dim symbolId As Long, putCall As Long

    On Error Resume Next

    If doDebug Then
        ' DEBUG: price events
        Dim rg As Range
        Set rg = ThisWorkbook.Worksheets("dump_opSp").Range("AC12")
        While rg.value <> ""
            Set rg = rg.Offset(1, 0)
        Wend
    
        With rg 'sheet.Rows(rowId)
            .Offset(0, 0).value = Now()
            .Offset(0, 1).value = reqId
            .Offset(0, 2).value = tickType
            .Offset(0, 3).value = impliedVol
            .Offset(0, 4).value = delta
            .Offset(0, 5).value = optPrice
            .Offset(0, 6).value = pvDividend
            .Offset(0, 7).value = gamma
            .Offset(0, 8).value = vega
            .Offset(0, 9).value = theta
            .Offset(0, 10).value = undPrice
        End With
    End If
    
    
    symbolId = CLng(Mid(CStr(reqId), 4, 2))
    putCall = CLng(Mid(CStr(reqId), 3, 1))
    
    If OpSnapshots(symbolId, 2 + putCall) = reqId Then
        Call OpSnapshot_displayPrice(symbolId, putCall)
    End If
    
End Sub

Sub OpSnapshot_displayPrice(ByRef symbolId As Long, putCall As Long)
    Dim ar() As Variant
    Dim d As Date
    Dim rgStatus As Range, doStatus As Boolean
    
    
    On Error Resume Next
    
    doStatus = False
    
    Set rgStatus = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, Col_USR_SYMBOLSTATUS)
    
    If IsEmpty(RvData(symbolId, putCall)) And Not IsEmpty(OpSnapshots(symbolId, putCall)) Then
        
        ar = OpSnapshots(symbolId, putCall)
    
        ' we need Bid 1, Ask 2, and if they are -1 then we need Last 4, and Time of last trade 45. And if this fails we take prevClose 9
        ' Do we have bid & ask for both options already?
        If Not IsEmpty(ar(1)) And Not IsEmpty(ar(2)) Then
            
            '... and they are not -1, i.e., we are in the middle of a trading session
            If Not ar(1) = -1 And Not ar(2) = -1 Then
                RvData(symbolId, putCall) = (ar(1) + ar(2)) / 2
                RvData(symbolId, 3) = Now()
                doStatus = True
                    
            '... else check if we have the last already
            ElseIf Not IsEmpty(ar(4)) And Not IsEmpty(ar(45)) Then
                RvData(symbolId, putCall) = ar(4)
                d = CDate(ConvertLongToDateStr(ar(45)))
                RvData(symbolId, 3) = d
                doStatus = True
                            
            ' finally try yesterday's close (but not if the last is already there just we haven't received its tradeTime)
            ElseIf IsEmpty(ar(4)) And Not IsEmpty(ar(9)) Then
                RvData(symbolId, putCall) = ar(9)
                RvData(symbolId, 3) = Now()
                doStatus = True
            End If
                
                
            If doStatus Then
                If Not IsEmpty(RvData(symbolId, 0)) And Not IsEmpty(RvData(symbolId, 1)) Then
                    rgStatus.value = "Options prices received"
                    Call RunStraddleWatchlistMember(symbolId)
                ElseIf Not IsEmpty(RvData(symbolId, 0)) Or Not IsEmpty(RvData(symbolId, 1)) Then
                    rgStatus.value = "Waiting for prices: 1 contract"
                End If
            End If
        End If
    End If
End Sub


Public Sub CalcRV(ByRef symbolId As Long)

    Dim rgUserSymbol As Range ', rgCacheSymbol As Range
    Dim rv As Double
    
    
    On Error Resume Next
    
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0)
    'Set rgCacheSymbol = ThisWorkbook.Worksheets(STR_SHEET_CACHEWL).Range(RG_CACHEWL_EXPIRYSTRIKE).Offset(0, C_CNTCOLS_WLOP * symbolId)

    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS).value = "Calculating RV"

    rv = (RvData(symbolId, 0) + RvData(symbolId, 1)) / RvData(symbolId, 2)

    rgUserSymbol.Offset(0, Col_USR_RV).value = rv
    rgUserSymbol.Offset(0, Col_USR_PPUT).value = RvData(symbolId, 0)
    rgUserSymbol.Offset(0, Col_USR_PCALL).value = RvData(symbolId, 1)
    rgUserSymbol.Offset(0, Col_USR_UPDATETIME).value = RvData(symbolId, 3)
    rgUserSymbol.Offset(0, Col_USR_SYMBOLSTATUS).value = "RV updated"
End Sub





Public Sub CopyRvSparkLine(ByRef symbolId As Long)

    Dim rgDest As Range, i As Long
    Dim ws As Worksheet, rg As Range
    
    
    On Error Resume Next
    
    Set ws = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST)
    
    Set rgDest = ws.Range(RG_WLS_SPARKLINEDATA).Offset(0, C_WLS_WID_SPARLINEDATAFIELD * symbolId)
    i = 0
    While rgDest.value <> ""
        Set rgDest = rgDest.Offset(1, 0)
        i = i + 1
    Wend
    
    If i >= C_WLS_LEN_SPARLINEDATAFIELD Then
        'reycling space: move all values one cell up, deleting the very first one
        Set rg = ws.Range(RG_WLS_SPARKLINEDATA).Offset(0, C_WLS_WID_SPARLINEDATAFIELD * symbolId)
        
        ws.Range(rg, rg.Offset(C_WLS_LEN_SPARLINEDATAFIELD - 2, 1)).value = ws.Range(rg.Offset(1, 0), rg.Offset(C_WLS_LEN_SPARLINEDATAFIELD - 1, 1)).value
        rg.Offset(C_WLS_LEN_SPARLINEDATAFIELD - 1, 0).value = Now 'ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, Col_USR_UPDATETIME).value
        rg.Offset(C_WLS_LEN_SPARLINEDATAFIELD - 1, 1).value = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, Col_USR_RV).value
    Else
        rgDest.value = Now 'ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, Col_USR_UPDATETIME).value
        rgDest.Offset(0, 1).value = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, Col_USR_RV).value
    End If
    
End Sub




Attribute VB_Name = "straddle"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBox1, 3, 0, MSForms, ComboBox"



Option Explicit


Public Sub ChkbBarTimeAverage_Click()
    If ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Shapes("Check Box 2").ControlFormat.value = xlOn Then
    'If ChkbBarTimeAverage.value Then
        Call mStraddle.SetBarTimeAverage(1)
    Else
        Call mStraddle.SetBarTimeAverage(0)
    End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    
    Dim KeyCells As Range
        
    If Target.Rows.Count = 1 And Target.Columns.Count = 1 Then
        If Not Target.value = "" Then

            Set KeyCells = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
            
            If Not Application.Intersect(KeyCells, Range(Target.Address)) Is Nothing Then
                If ActiveSheet.Name = ThisWorkbook.Sheets(STR_SHEET_STRADDLE).Name Then
                    'Make sure we do not copy an interrupted request from Watchlist to there
                    Call mStraddle.SetIsWatchlistRequest(0)
                End If
                PasteLtd (Target.Address)
                Call mStraddle.ReqUndlConId(0)
            End If
        End If
    End If
End Sub

Private Sub ComboBox1_Change()
    Call mStraddle.BarDurationDropdownChange
End Sub

Sub PasteLtd(ByRef Cell_str As String)

    Dim FindString As String
    Dim Rng As Range
    Dim rgIn As Range
    Dim rgSymbol As Range
    
    
    'ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(Cell_str).Offset(0, Col_USR_SYMBOLSTATUS).value = "Retrieving symbol info"
    
    If ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(Cell_str).Rows.Count > 1 Then
        Exit Sub
    End If
    
    
    Set rgIn = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(Cell_str)
    Set rgSymbol = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL)
    
    FindString = rgIn.value
    
    If Trim(FindString) <> "" Then
        With Sheets("ltd").Range("A:A")
            Set Rng = .Find(What:=FindString, _
                            After:=.Cells(1), _
                            LookIn:=xlValues, _
                            LookAt:=xlWhole, _
                            SearchOrder:=xlByRows, _
                            SearchDirection:=xlNext, _
                            MatchCase:=False)
            If Not Rng Is Nothing Then
                'Application.Goto Rng, True
                'Paste ltd and confirmed yes/no
                
                
                
                rgSymbol.Offset(Row_STDL_LTD, 0).value = Rng.Offset(0, 1).value
                
                'rgIn.Offset(0, 1).value = Rng.Offset(0, 1).value
                If Rng.Offset(0, 2).value = 1 Then
                    rgSymbol.Offset(Row_STDL_LTDCONF, 0).value = "yes"
                Else
                    rgSymbol.Offset(Row_STDL_LTDCONF, 0).value = "no"
                End If
            Else
                rgSymbol.Offset(Row_STDL_LTD, 0).value = ""
                rgSymbol.Offset(Row_STDL_LTDCONF, 0).value = ""
            End If
        End With
    Else
        rgSymbol.Offset(Row_STDL_LTD, 0).value = ""
        rgSymbol.Offset(Row_STDL_LTDCONF, 0).value = ""
    End If

    'ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(Cell_str).Offset(0, Col_USR_SYMBOLSTATUS).value = "Symbol ok"

End Sub


Public Sub BtnRunStraddle()
    Call mStraddle.RunStraddle
End Sub



Public Sub BtnRunNumber_Click()
    Dim nbr
    nbr = ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range("$L$7")
    
    Select Case nbr
        Case 0
            Call RunStraddle
        Case 1
            Call mStraddle.OpChainOverview_reqSecDefOP
        Case 2
            Call mStraddle.UndlBars_reqBars
        Case 3
            Call mStraddle.FindExpiryToQuery
        Case 4
            Call mStraddle.ChainStrikes_reqCons
        Case 5
            Call mStraddle.FindStrikesToQuery
        Case 6
            Call mStraddle.OpBars_reqBars
        Case 7
            Call mStraddle.CalcRV
        Case 8
            Call mStraddle.DisplayFrontendData
    End Select

End Sub









Attribute VB_Name = "watchlist"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "UpdateInterval, 5, 0, MSForms, ComboBox"
Attribute VB_Control = "ChkbKeepATM, 6, 1, MSForms, CheckBox"
Attribute VB_Control = "ChkbAllowSparklineDelete, 7, 2, MSForms, CheckBox"
Attribute VB_Control = "Row4History, 8, 3, MSForms, ComboBox"
Attribute VB_Control = "DrawRvChart, 9, 4, MSForms, ComboBox"
Option Explicit

Public KeepWatchlistStrikesAtm As Boolean
Private timerActive As Boolean
Private TimerDelayStr() As Variant
Private TimerDelayText() As Variant
Private RunImmediately As Long
Private AllowSparklineDelete As Long
Private Row4HistoryStr() As Variant




Public Sub Initialise()
    ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLIST_ACTIVEMSG).value = "" 'Time state: Active or ""
    TimerDelayText = Array("30 secs", "1 min", "2 mins", "5 mins", "10 mins")
    TimerDelayStr = Array("00:00:30", "00:01:00", "00:02:00", "00:05:00", "00:10:00")
    RunImmediately = 1
    AllowSparklineDelete = 1
    Call InitCombTimerDelay
    Call InitChkbKeepStrikesAtm
    Call InitChkbAllowSparklineDelete
    Call InitCombRow4History_CombDrawChart
End Sub


Sub InitChkbAllowSparklineDelete()
    ChkbAllowSparklineDelete.value = 1
    AllowSparklineDelete = 1
End Sub

Sub InitCombTimerDelay()
    
    Dim idx As Long
    idx = 1
    ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).UpdateInterval.List = TimerDelayText()
    ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).UpdateInterval.ListIndex = idx
    'ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_BARDURATION).value = UndlBarDurationsDisplayText(idx)
End Sub







Sub InitCombRow4History_CombDrawChart()

    Dim symbolInput As Range, rg As Range, i As Integer
    Set symbolInput = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Resize(C_CNTROWS_WATCHLISTSTRADDLES, 1)
    ReDim Row4HistoryStr(0 To C_CNTROWS_WATCHLISTSTRADDLES + C_CNTROWS_WATCHLISTCALENDAR - 1)
    
    i = 0
    For Each rg In symbolInput
        Row4HistoryStr(i) = "Stdl" & CStr(i) & ": " & rg.value
        i = i + 1
    Next

    Set symbolInput = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Resize(C_CNTROWS_WATCHLISTCALENDAR, 1)
    For Each rg In symbolInput
        Row4HistoryStr(i) = "Cal" & CStr(i - C_CNTROWS_WATCHLISTSTRADDLES) & ": " & rg.value
        i = i + 1
    Next
    ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Row4History.List = Row4HistoryStr()
    ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Row4History.ListIndex = 0

    ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).DrawRvChart.List = Row4HistoryStr()
    ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).DrawRvChart.ListIndex = 0
End Sub



Sub UpdateCombRow4History_CombDrawChart(ByRef stdlOrCal As Long, symbolId As Long)
    
    If Not IsArrayAllocated(Row4HistoryStr) Then
        Initialise
    End If

    If stdlOrCal = 0 Then
        Row4HistoryStr(symbolId) = _
            "Stdl" & symbolId & ": " & ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0).value
        Else
        Row4HistoryStr(symbolId + C_CNTROWS_WATCHLISTSTRADDLES) = _
            "Cal" & symbolId & ": " & ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0).value
    End If
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Row4History.List = Row4HistoryStr()
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).DrawRvChart.List = Row4HistoryStr()
End Sub

Sub InitChkbKeepStrikesAtm()
    watchlist.ChkbKeepATM.value = True
    Call mWlStraddle.SetKeepStrikesAtm(True)
    Call mWlCalendar.SetKeepStrikesAtm(True)
End Sub








Private Sub DrawRvChart_Change()
    Dim co As ChartObject, idx As Long, symbolId As Long, symbol As String, s As String
    Dim symLen As Long, T As String, l As Long, nmStr As String
    Dim min As Double, max As Double
    
    
    'On Error Resume Next
    
    Set co = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).ChartObjects("Wl_Rv")
    
    Dim v As Variant
    v = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).DrawRvChart.List
    idx = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).DrawRvChart.ListIndex

    If idx <= C_CNTROWS_WATCHLISTSTRADDLES Then
        symbolId = idx
        symbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0).value
        T = "Straddle RV: "
        nmStr = STR_SHEET_WATCHLIST & "!SparklineStdl" & CStr(symbolId)

    Else
        symbolId = idx - C_CNTROWS_WATCHLISTSTRADDLES
        symbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0).value
        T = "Calendar RV: "
        nmStr = STR_SHEET_WATCHLIST & "!SparklineCal" & CStr(symbolId)
    End If
        
    s = "=SERIES(""RV""," & nmStr & "_ts," & nmStr & ",1)"
        

    Call Main.SheetUnprotect(Worksheets(STR_SHEET_WATCHLIST))
    co.Chart.SeriesCollection(1).Formula = s
    

    'set headline in RV chart, with bold symbol
    If Len(symbol) > 0 Then
        symLen = Len(symbol)
        l = Len(T)
        With co.Chart.ChartTitle
            .Text = T & symbol
            .Characters(Start:=l + 1, length:=symLen).Font.FontStyle = "Bold"
        End With
    End If

    'Adjust min and max x-values
    If Range(nmStr).Rows.Count > 0 Then
        min = Util.RoundChartMin(Application.WorksheetFunction.min(Range(nmStr)))
        max = Application.WorksheetFunction.max(Range(nmStr))
        With co.Chart.Axes(xlValue)
            .MinimumScale = min 'RoundChartMin(ChartsMinMax(0, 0)) ' * (1 - C_STDL_CHARTSPAD)
            .MaximumScale = max 'ChartsMinMax(0, 1) * (1 + C_STDL_CHARTSPAD)
        End With
    End If
    'Range("A1").Select
    Call Main.SheetProtect(Worksheets(STR_SHEET_WATCHLIST))
End Sub





Private Sub Worksheet_Change(ByVal Target As Range)
    
    Dim KeyCells As Range, symbolId As Long
    Dim rg1 As Range, rg2 As Range, rg3 As Range, rg4 As Range
        
    On Error Resume Next
        
    If Target.Rows.Count = 1 And Target.Columns.Count = 1 Then


        'Straddle watchlist
        Set KeyCells = watchlist.Range(RG_WATCHLISTSTRADDLE_INPUT).Resize(C_CNTROWS_WATCHLISTSTRADDLES, 1)
        
        If Not Application.Intersect(KeyCells, Range(Target.Address)) Is Nothing Then
            symbolId = Target.Row - Range(RG_WATCHLISTSTRADDLE_INPUT).Row
            Call UpdateCombRow4History_CombDrawChart(0, symbolId)
            Call PasteLtd(Target.Address, False)
            Call mWlStraddle.ReqUndlConId(Target.Address, RunImmediately)

        End If

        'Calendar watchlist
        Set KeyCells = watchlist.Range(RG_WATCHLISTCALENDAR_INPUT).Resize(C_CNTROWS_WATCHLISTCALENDAR, 1)
        
        If Not Application.Intersect(KeyCells, Range(Target.Address)) Is Nothing Then
            symbolId = Target.Row - Range(RG_WATCHLISTCALENDAR_INPUT).Row
            Call UpdateCombRow4History_CombDrawChart(1, symbolId)
            Call PasteLtd(Target.Address, True)
            Call mWlCalendar.ReqUndlConId(Target.Address, RunImmediately)
        End If




        'Straddle: Inputs to exiry, strike
        Set rg1 = watchlist.Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(0, Col_USR_EXPIRYTOQUERY)
        Set rg2 = watchlist.Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(0, Col_USR_STRIKETOQUERY)
        
        Set KeyCells = Union(rg1, rg2).Resize(C_CNTROWS_WATCHLISTSTRADDLES)

        If Not Application.Intersect(KeyCells, Range(Target.Address)) Is Nothing Then
            If RunImmediately = 1 Then
                symbolId = Target.Row - Range(RG_WATCHLISTSTRADDLE_INPUT).Row
                'delete collected RV values for sparkline
                If AllowSparklineDelete = 1 Then
                    ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLS_SPARKLINEDATA).Offset(0, C_WLS_WID_SPARLINEDATAFIELD * symbolId) _
                        .Resize(C_WLS_LEN_SPARLINEDATAFIELD, C_WLS_WID_SPARLINEDATAFIELD).ClearContents
                End If
                Call mWlStraddle.RunStraddleWatchlistMember(symbolId)
            End If
        End If




        'Calendar: Inputs to putCall, exiries, strike
        Set rg1 = watchlist.Range(RG_WATCHLISTCALENDAR_INPUT).Offset(0, Col_CAL_PUTCALL)
        Set rg2 = watchlist.Range(RG_WATCHLISTCALENDAR_INPUT).Offset(0, Col_CAL_EXPIRYTOQUERY_SHORT)
        Set rg3 = watchlist.Range(RG_WATCHLISTCALENDAR_INPUT).Offset(0, Col_CAL_EXPIRYTOQUERY_LONG)
        Set rg4 = watchlist.Range(RG_WATCHLISTCALENDAR_INPUT).Offset(0, Col_CAL_STRIKETOQUERY)
        
        Set KeyCells = Union(rg1, rg2, rg3, rg4).Resize(C_CNTROWS_WATCHLISTCALENDAR)

        If Not Application.Intersect(KeyCells, Range(Target.Address)) Is Nothing Then
            If RunImmediately = 1 Then
                symbolId = Target.Row - Range(RG_WATCHLISTCALENDAR_INPUT).Row
                'delete collected RV values for sparkline
                If AllowSparklineDelete = 1 Then
                    ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLC_SPARKLINEDATA).Offset(0, C_WLC_WID_SPARLINEDATAFIELD * symbolId) _
                        .Resize(C_WLC_LEN_SPARLINEDATAFIELD, C_WLC_WID_SPARLINEDATAFIELD).ClearContents
                End If
                Call mWlCalendar.RunCalendarWatchlistMember(symbolId)
            End If
        End If
        
    End If
    
End Sub


Public Sub PasteLtd(ByRef Cell_str As String, IsCalendar As Boolean)

    Dim FindString As String
    Dim Rng As Range
    Dim rgIn As Range
    
    'ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(Cell_str).Offset(0, Col_USR_SYMBOLSTATUS).value = "Retrieving symbol info"
    
    If ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(Cell_str).Rows.Count > 1 Then
        Exit Sub
    End If
    
    Set rgIn = watchlist.Range(Cell_str)
    
    If ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(Cell_str).value = "" Then
        rgIn.Offset(0, Col_USR_LTD).value = ""
        rgIn.Offset(0, Col_USR_LTDCONF).value = ""
        rgIn.Offset(0, Col_USR_RVPREV).value = ""
        Exit Sub
    End If
    

    
    FindString = rgIn.value
    
    If Trim(FindString) <> "" Then
        With Sheets("ltd").Range("A:A")
            Set Rng = .Find(What:=FindString, _
                            After:=.Cells(1), _
                            LookIn:=xlValues, _
                            LookAt:=xlWhole, _
                            SearchOrder:=xlByRows, _
                            SearchDirection:=xlNext, _
                            MatchCase:=False)
            If Not Rng Is Nothing Then
                'Application.Goto Rng, True
                'Paste ltd and confirmed yes/no
                rgIn.Offset(0, Col_USR_LTD).value = Rng.Offset(0, 1).value
                If Rng.Offset(0, 2).value = 1 Then
                    rgIn.Offset(0, Col_USR_LTDCONF).value = "yes"
                Else
                    rgIn.Offset(0, Col_USR_LTDCONF).value = "no"
                End If
                If IsCalendar Then
                    rgIn.Offset(0, Col_USR_RVPREV).value = Rng.Offset(0, 4).value
                Else
                    rgIn.Offset(0, Col_USR_RVPREV).value = Rng.Offset(0, 3).value
                End If
            Else
                rgIn.Offset(0, Col_USR_LTD).value = ""
                rgIn.Offset(0, Col_USR_LTDCONF).value = ""
                rgIn.Offset(0, Col_USR_RVPREV).value = ""
            End If
        End With
    Else
        rgIn.Offset(0, Col_USR_LTD).value = ""
        rgIn.Offset(0, Col_USR_LTDCONF).value = ""
    End If

    'ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(Cell_str).Offset(0, Col_USR_SYMBOLSTATUS).value = "Symbol ok"

End Sub

Public Sub DeleteSparklineDatafield(ByRef stdlOrCal As Long, symbolId As Long)

    If AllowSparklineDelete = 1 Then
        If stdlOrCal = 0 Then
            'straddle
            ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLS_SPARKLINEDATA).Offset(0, C_WLS_WID_SPARLINEDATAFIELD * symbolId) _
                .Resize(C_WLS_LEN_SPARLINEDATAFIELD, C_WLS_WID_SPARLINEDATAFIELD).ClearContents
        Else
            'calendar
            ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WLC_SPARKLINEDATA).Offset(0, C_WLC_WID_SPARLINEDATAFIELD * symbolId) _
                .Resize(C_WLC_LEN_SPARLINEDATAFIELD, C_WLC_WID_SPARLINEDATAFIELD).ClearContents
        End If
    End If
End Sub






'*********************
' Buttons / Checkboxes
'*********************

Private Sub Row4History_Change()
    'delete status copied from straddle/calendar history page
    ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_STRADDLE_HISTCALCSTATUS).value = "" 'ClearContents
End Sub

'Private Sub ChkbRunImmediately_Click()
'    If ChkbRunImmediately.value Then
'        RunImmediately = 1
'    Else
'        RunImmediately = 0
'    End If
'End Sub


Private Sub ChkbAllowSparklineDelete_Click()
    If ChkbAllowSparklineDelete.value Then
        AllowSparklineDelete = 1
    Else
        AllowSparklineDelete = 0
    End If
End Sub



Private Sub ChkbKeepATM_Click()
    
    If watchlist.ChkbKeepATM.value Then
        'KeepWatchlistStrikesAtm = True
        Call mWlStraddle.SetKeepStrikesAtm(True)
        Call mWlCalendar.SetKeepStrikesAtm(True)
    Else
        'KeepWatchlistStrikesAtm = False
        Call mWlStraddle.SetKeepStrikesAtm(False)
        Call mWlCalendar.SetKeepStrikesAtm(False)
    
    End If
    
End Sub

Public Sub BtnHideCols_Click()
    Call Main.SheetUnprotect(ThisWorkbook.Sheets(STR_SHEET_WATCHLIST))
    If Columns("D:F").EntireColumn.Hidden Then
        Columns("D:F").EntireColumn.Hidden = False
        Columns("H:I").EntireColumn.Hidden = False
        Columns("N:N").EntireColumn.Hidden = False
    Else
        Columns("D:F").EntireColumn.Hidden = True
        Columns("H:I").EntireColumn.Hidden = True
        Columns("N:N").EntireColumn.Hidden = True
    End If
    Call Main.SheetProtect(ThisWorkbook.Sheets(STR_SHEET_WATCHLIST))
End Sub


Public Sub BtnGetHistory_Click()

    Dim idx As Long, symbolId As Long, symbol As String, expiry As Variant
    On Error Resume Next
    If Not CheckConnected Then Exit Sub
    'Call CheckChaf
    
    
    idx = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Row4History.ListIndex

    If idx <= C_CNTROWS_WATCHLISTSTRADDLES Then
    
        'request for straddle historical data
        symbolId = idx
        mStraddle.SetIsWatchlistRequest (idx)
        symbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, 0).value
        
        If Not symbol = "" Then
            
            ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL).Offset(Row_STDL_EXPIRY, 0).ClearContents
            
            expiry = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Offset(symbolId, Col_USR_EXPIRYTOQUERY).value
            If Not IsEmpty(expiry) Then
                ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL).Offset(Row_STDL_EXPIRY, 0).value = expiry
            End If
            'changing symbol with IsWatchlistRequest>0 will trigger complete straddle run, no separate call necessary
            ThisWorkbook.Worksheets(STR_SHEET_STRADDLE).Range(RG_STRADDLE_SYMBOL).Offset(Row_STDL_SYMBOL, 0) = symbol

        End If
        
    Else
        symbolId = idx - C_CNTROWS_WATCHLISTSTRADDLES
        mCalendar.SetIsWatchlistRequest (symbolId)
        symbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, 0).value
        
        If Not symbol = "" Then
            
            Dim expiryShort As Date, expiryLong As Date, putCall As String
            
            expiryShort = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_EXPIRYTOQUERY_SHORT).value
            If Not IsEmpty(expiryShort) Then
                ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL).Offset(Row_CAL_EXPIRYSHORT, 0).value = expiryShort
            Else
                ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL).Offset(Row_CAL_EXPIRYSHORT, 0).ClearContents
            End If
            
            
            expiryLong = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_EXPIRYTOQUERY_LONG).value
            If Not IsEmpty(expiryLong) Then
                ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL).Offset(Row_CAL_EXPIRYLONG, 0).value = expiryLong
            Else
                ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL).Offset(Row_CAL_EXPIRYLONG, 0).ClearContents
            End If
            
            
            putCall = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT).Offset(symbolId, Col_CAL_PUTCALL).value
            If putCall = "" Then
                MsgBox ("Please add if Put or Call should be used")
            Else
                ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL).Offset(Row_CAL_PUTCALL, 0).value = putCall
            End If
            
            'changing symbol with IsWatchlistRequest>0 will trigger complete straddle run, no separate call necessary
            ThisWorkbook.Worksheets(STR_SHEET_CALENDAR).Range(RG_CALENDAR_SYMBOL).Offset(Row_CAL_SYMBOL, 0) = symbol

        End If

        
        
        
    End If
    
'Set symbolInput = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT).Resize(C_CNTROWS_WATCHLISTSTRADDLES, 1)

 
End Sub

Public Sub BtnUpdateOnce_Click()
    If Not CheckConnected Then Exit Sub
    Call watchlist.UpdateRows
End Sub


Public Sub BtnStartStopUpdate_Click()
    Dim d As String, alertTime As Date

    'On Error Resume Next
    If Not CheckConnected Then Exit Sub
    'Call CheckChaf

    If timerActive Then
        'timer is running -> switch off
        timerActive = False
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLIST_ACTIVEMSG).Interior.ColorIndex = 15
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLIST_ACTIVEMSG).value = ""
    Else
        timerActive = True
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLIST_ACTIVEMSG).Interior.ColorIndex = 51
        ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLIST_ACTIVEMSG).value = "Active"
        Call RunUpdateCycle
    End If

End Sub


Public Sub RunUpdateCycle()

    Dim ds As String, idx As Long
    Dim alertTime As Date
    
    'On Error Resume Next
    If Not CheckConnected Then Exit Sub
    'Call CheckChaf
    
    If Not IsArrayAllocated(TimerDelayStr) Then
        Initialise
    End If
    
    If timerActive Then
        idx = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).UpdateInterval.ListIndex
        ds = TimerDelayStr(idx)
        alertTime = Now + TimeValue(ds)
        Application.OnTime alertTime, "watchlist.RunUpdateCycle"
        Call watchlist.UpdateRows
    End If

End Sub



Sub UpdateRows()
    
    Dim rgUserSymbol As Range
    Dim i As Long
    
    
    'Straddle
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTSTRADDLE_INPUT)
    
    For i = 0 To C_CNTROWS_WATCHLISTSTRADDLES
        If (rgUserSymbol.Offset(i, Col_USR_SYMBOLSTATUS).value = "" _
            Or rgUserSymbol.Offset(i, Col_USR_SYMBOLSTATUS).value = "Symbol ok" _
            Or rgUserSymbol.Offset(i, Col_USR_SYMBOLSTATUS).value = "RV updated" _
            Or rgUserSymbol.Offset(i, Col_USR_SYMBOLSTATUS).value = "Expiry does not exist" _
            Or rgUserSymbol.Offset(i, Col_USR_SYMBOLSTATUS).value = "Strike does not exist" _
            Or rgUserSymbol.Offset(i, Col_CAL_SYMBOLSTATUS).value = "Waiting for prices: 1 contract" _
            Or rgUserSymbol.Offset(i, Col_CAL_SYMBOLSTATUS).value = "Waiting for prices: 2 contracts") _
            And rgUserSymbol.Offset(i, 0).value <> "" Then
                
            mWlStraddle.RunStraddleWatchlistMember (i)
            Call Util.TakeNap(200)
        End If
    Next


    'Calendar
    Set rgUserSymbol = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range(RG_WATCHLISTCALENDAR_INPUT)
    
    For i = 0 To C_CNTROWS_WATCHLISTCALENDAR
        If (rgUserSymbol.Offset(i, Col_CAL_SYMBOLSTATUS).value = "" _
            Or rgUserSymbol.Offset(i, Col_CAL_SYMBOLSTATUS).value = "Symbol ok" _
            Or rgUserSymbol.Offset(i, Col_CAL_SYMBOLSTATUS).value = "RV updated" _
            Or rgUserSymbol.Offset(i, Col_CAL_SYMBOLSTATUS).value = "Short expiry does not exist" _
            Or rgUserSymbol.Offset(i, Col_CAL_SYMBOLSTATUS).value = "Long expiry does not exist" _
            Or rgUserSymbol.Offset(i, Col_CAL_SYMBOLSTATUS).value = "Strike does not exist" _
            Or rgUserSymbol.Offset(i, Col_CAL_SYMBOLSTATUS).value = "Opt. type invalid (put or call)" _
            Or rgUserSymbol.Offset(i, Col_CAL_SYMBOLSTATUS).value = "Waiting for prices: 1 contract" _
            Or rgUserSymbol.Offset(i, Col_CAL_SYMBOLSTATUS).value = "Waiting for prices: 2 contracts") _
            And rgUserSymbol.Offset(i, 0).value <> "" Then
                
            mWlCalendar.RunCalendarWatchlistMember (i)
            Call Util.TakeNap(200)
        End If
    Next


End Sub

Sub asdas()
    mWlCalendar.RunCalendarWatchlistMember (1)
End Sub

Private Sub BtnRunNumber_Click()
    Dim nbr
    nbr = ThisWorkbook.Worksheets(STR_SHEET_WATCHLIST).Range("$L$7")
    
    Select Case nbr
        Case 0
            Call mWlStraddle.RunStraddleWatchlistMember(6)
        Case 1
            Call mWlStraddle.OpChainOverview_reqSecDefOP(6)
        Case 2
            Call mWlStraddle.UndlSnapshot_reqSnapshot(6)
        Case 3
            Call mWlStraddle.FindExpiryToQuery(6)
        Case 4
            Call mWlStraddle.ChainStrikes_reqCons(6)
        Case 5
            Call mWlStraddle.FindStrikeToQuery(6)
        Case 6
            Call mWlStraddle.OpSnapshot_reqSnapshot(6)
        Case 7
            Call mWlStraddle.CalcRV(6)
        Case 8
            Call mWlStraddle.CopyRvSparkLine(6)
    End Select

End Sub









' InQuest injected base64 decoded content
' oZ_w

INQUEST-PP=macro
