Attribute VB_Name = "Module1"
' Copyright |fffd| 2008-2009 Epic Systems Corporation
'*********************************************************************
' TITLE:   EpicRx Alert Statistics Report "AlertStatsMacros"
' PURPOSE: Generates views for the Alert Statistics Report (RXALTUTIL)
' AUTHOR:  Jennifer Behrens
' REVISION HISTORY:
'  *jb 07/21/08 141563 - created
'  *CX 07/12/09 159366 - changed a lot to support new functionality
'*********************************************************************

Option Explicit

'------------------------------------------------------------------
' NAME:         cmdRefreshPivot_Click (PRIVATE)
' DESCRIPTION:  Refreshes the pivot tables when the button is clicked
' CALLED BY:    Clicking the RefreshPivot button
' RETURNS:      None
'------------------------------------------------------------------
Sub cmdRefreshPivot_Click()

  Application.ScreenUpdating = False
  Call DoRefreshPivot
  Sheets("Configuration").Activate
  Application.DisplayAlerts = True
  Application.ScreenUpdating = True
  Call MsgBox("Pivot Tables are refreshed", vbOKOnly, "Refresh Pivot Tables")

End Sub

'------------------------------------------------------------------
' NAME:         DoRefreshPivot (PRIVATE)
' DESCRIPTION:  Refreshes the pivot tables for new data
'               This code is different for the Office 97-2003 version
' CALLED BY:    RefreshPivot_Click
' RETURNS:      None
'------------------------------------------------------------------

Sub DoRefreshPivot()

  'make sure there's data before refreshing pivot tables
  ThisWorkbook.Sheets("Raw Data").Select
  Range("A2").Select
  If ActiveCell.Value = "" Then
    Call MsgBox("Import data to the Raw Data tab before refreshing.", vbOKOnly, "Refresh Pivot Tables")
    Exit Sub
  End If

  Dim SheetList(1 To 6) As String  'sheets that have a pivot table
  Dim SheetIndex As Integer        'index of sheet
  Dim PivotIndex As Integer        'index of pivot table
     
  'don't display alerts while running
  Application.DisplayAlerts = False
  
  'set up a list of the tabs ('sheets') that have pivot tables to refresh
  SheetList(1) = "1. Action by Type - Data"
  SheetList(2) = "2a. Action by Dept - Data"
  SheetList(3) = "2b. Action by Provider - Data"
  SheetList(4) = "2c. Action by Severity - Data"
  SheetList(5) = "3. Action by Desc - Data"
  SheetList(6) = "4. Ovrd Reason by Desc - Data"
   
  'for each pivot table on the sheet, refresh it with the latest data
  For SheetIndex = 1 To 6
    With ThisWorkbook.Sheets(SheetList(SheetIndex))
      For PivotIndex = 1 To .PivotTables.Count
        .PivotTables(PivotIndex).PivotCache.Refresh
      Next PivotIndex
    End With
  Next SheetIndex
   
  'turn alerts back on
  Application.DisplayAlerts = True
  
  '*CX+2 159366 don't jump to the pivot table
  'ThisWorkbook.Sheets("1. Action by Type - Data").Select
  'Range("A1").Select
  '*CX+1 159366 don't show the message
  'Call MsgBox("Pivot Tables have been refreshed", vbOKOnly, "Refresh Pivot Tables")
     
End Sub

'------------------------------------------------------------------
' NAME:         CmdImportData_Click (PRIVATE)
' DESCRIPTION:  Import the data and refresh the pivot tables
' CALLED BY:    Clicking the Import Data button
' RETURNS:      None
' *CX 159366 created
'------------------------------------------------------------------
Sub CmdImportData_Click()
  Application.ScreenUpdating = True
  Application.DisplayAlerts = False
  If Not Import_Data Then
    Exit Sub
  End If
  Call DoRefreshPivot
  Sheets("Configuration").Activate
  Application.DisplayAlerts = True
  Application.ScreenUpdating = True
  Call MsgBox("Data is imported and Pivot Tables are refreshed", vbOKOnly, "Import Data")
End Sub


'------------------------------------------------------------------
' NAME:         Import_Data (PRIVATE)
' DESCRIPTION:  Opens the text file, imports the data
' CALLED BY:    CmdImportData_Click
' RETURNS:      True if data was imported, False if operation was cancelled
' *CX 159366 created
'------------------------------------------------------------------
Function Import_Data() As Boolean
  Dim sFilename As String
  Import_Data = True
  
  ' open a text file to import
  sFilename = Application.GetOpenFilename(fileFilter:="TSF Files (*.txt), *.txt")
  If sFilename = "False" Then
    Import_Data = False
    Exit Function
  End If
  
  ' clear out the existing order data
  Sheets("Raw Data").Select
  Range("Datarange").Select
  Selection.ClearContents
  
  'import the data
  Sheets("Raw Data").Activate
  On Error Resume Next
  With ActiveSheet.QueryTables.Add(Connection:="TEXT;" & sFilename, Destination:=Range("$A$1"))
    .Name = "Raw Data"
    .FieldNames = True
    .RowNumbers = False
    .FillAdjacentFormulas = False
    .PreserveFormatting = True
    .RefreshOnFileOpen = False
    .RefreshStyle = xlOverwriteCells
    .SavePassword = False
    .SaveData = True
    .AdjustColumnWidth = True
    .RefreshPeriod = 0
    .TextFilePromptOnRefresh = False
    .TextFilePlatform = 437
    .TextFileStartRow = 4
    .TextFileParseType = xlDelimited
    .TextFileTextQualifier = xlTextQualifierDoubleQuote
    .TextFileConsecutiveDelimiter = False
    .TextFileTabDelimiter = True
    .TextFileSemicolonDelimiter = False
    .TextFileCommaDelimiter = False
    .TextFileSpaceDelimiter = False
    .TextFileColumnDataTypes = Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
    .TextFileTrailingMinuskkNumbers = True
    .Refresh BackgroundQuery:=False
  End With
  
  ActiveWorkbook.Connections(1).Delete
    
  With Sheets("Raw Data")
    .AutoFilterMode = True
    .Range("A1").AutoFilter field:=1
  End With
  
  With ActiveWindow
    .SplitRow = 1
    .FreezePanes = True
  End With
  
  On Error GoTo 0
    
End Function

'------------------------------------------------------------------
' NAME:         CmdActionByType_Click(PRIVATE)
' DESCRIPTION:  jump to Action by Type - Data pivot table
' CALLED BY:    Action by Type button
'*CX++ 159366 created
Sub CmdActionByType_Click()
  Call ActivateOneSheet("1. Action by Type - Data")
End Sub

'------------------------------------------------------------------
' NAME:         CmdActionByDept_Click(PRIVATE)
' DESCRIPTION:  jump to Action by Dept - Data pivot table
' CALLED BY:    Action by Department button
'*CX++ 159366 created
Sub CmdActionByDept_Click()
  Call ActivateOneSheet("2a. Action by Dept - Data")
End Sub

'------------------------------------------------------------------
' NAME:         CmdActionBySeverity_Click(PRIVATE)
' DESCRIPTION:  jump to Action by Severity - Data pivot table
' CALLED BY:    Action by Severity button
'*CX++ 159366 created
Sub CmdActionBySeverity_Click()
  Call ActivateOneSheet("2c. Action by Severity - Data")
End Sub

'------------------------------------------------------------------
' NAME:         CmdActionByDesc_Click(PRIVATE)
' DESCRIPTION:  jump to Action by Desc - Data pivot table
' CALLED BY:    Action by Description button
'*CX++ 159366 created
Sub CmdActionByDesc_Click()
  Call ActivateOneSheet("3. Action by Desc - Data")
End Sub

'------------------------------------------------------------------
' NAME:         CmdOvrByDesc_Click(PRIVATE)
' DESCRIPTION:  jump to Ovrd Reason by Desc - Data pivot table
' CALLED BY:    Override Reason by Description
'*CX++ 159366 created
Sub CmdOvrByDesc_Click()
  Call ActivateOneSheet("4. Ovrd Reason by Desc - Data")
End Sub

'------------------------------------------------------------------
' NAME:         ActivateOneSheet(PRIVATE)
' DESCRIPTION:  the code to deal with activate one sheet.
' CALLED BY:    all jump buttons
'*CX++ 159366 created
Sub ActivateOneSheet(SheetName As String)
  Sheets(SheetName).Activate
End Sub

'------------------------------------------------------------------
' NAME:         CmdDrugDrug_Click(PRIVATE)
' DESCRIPTION:  filter on drug-drug and hide some columns which are not related with drug-drug
' CALLED BY:    Drug-Drug button
'*CX++ 159366 created
Sub CmdDrugDrug_Click()
  Call ReviewSpecificTypeExist("Drug-Drug")
End Sub

'------------------------------------------------------------------
' NAME:         CmdDrugAllergy_Click(PRIVATE)
' DESCRIPTION:  filter on drug-allergy and hide some columns which are not related with allergy
' CALLED BY:    Allergy button
'*CX++ 159366 created
Sub CmdDrugAllergy_Click()
  Call ReviewSpecificTypeExist("Allergy")
End Sub

'------------------------------------------------------------------
' NAME:         CmdDrugDose_Click(PRIVATE)
' DESCRIPTION:  filter on dose and hide some columns which are not related with dose
' CALLED BY:    Dose button
'*CX++ 159366 created
Sub CmdDrugDose_Click()
  Call ReviewSpecificTypeExist("Dose")
End Sub

'------------------------------------------------------------------
' NAME:         CmdDupTherapy_Click(PRIVATE)
' DESCRIPTION:  filter on duplicate therapy and hide some columns which are not related with dup therapy
' CALLED BY:    Duplicate Therapy button
'*CX++ 159366 created
Sub CmdDupTherapy_Click()
  Call ReviewSpecificTypeExist("Duplicate Therapy")
End Sub

'------------------------------------------------------------------
' NAME:         CmdAll_Click(PRIVATE)
' DESCRIPTION:  show everything in raw data sheet.
' CALLED BY:    All button
'*CX++ 159366 created
Sub CmdAll_Click()
  Call ReviewSpecificTypeExist("")
End Sub

'------------------------------------------------------------------
' NAME:         MapTypes(PRIVATE)
' DESCRIPTION:  hard code to map columns to specific alert type
' CALLED BY:    ReviewSpecificTypeExist
' PARAMETERS:
'   ColumnName(I)-the column name
' RETURN: "," delimited related alert type string for the column
'*CX++ 159366 created
Function MapTypes(ColumnName As String) As String
  Select Case ColumnName
    Case "Drug-Drug Management Code (Medi-Span)", "Drug-Drug Onset (Medi-Span)", "Drug-Drug Clinical Effects (First DataBank)"
      MapTypes = "Drug-Drug"
    Case "Interaction ID"
      MapTypes = "Drug-Drug,Drug-Food,Drug-Alcohol"
    Case "Drug-Allergy Allergen", "Drug-Allergy Reason", "Drug-Allergy Reactions", "Drug-Allergy Reason External IDs", "Drug-Allergy Class Pair for Cross-Sensitivity Warning", "Drug-Allergy Inactive Status?(FDB)", "Drug-Allergy Inactive 100% Reviewed?(FDB)"
      MapTypes = "Allergy"
    Case "Dose Checking Types (Percent Deviation from Dose)", "Dose Checking Percent Allowance for Min Dose", "Dose Checking Percent Allowance for Max Dose"
      MapTypes = "Dose"
    Case "Rule ID"
      MapTypes = "Dose,Duplicate Therapy,Drug-Disease,Pregnancy,Lactation,Age/Gender,Geriatric,Pediatric"
    Case Else
      MapTypes = ""
  End Select
End Function

'------------------------------------------------------------------
' NAME:         MapName(PRIVATE)
' DESCRIPTION:  Map the name on the button or combo box to the title in I ECT 9020
' CALLED BY:    ReviewSpecificTypeExist
' PARAMETERS:
'   TypeName(I)-the corresponding name on the button or combo box
' RETURN: the corresponding title in I ECT 9020
'*CX++ 159366 created
Function MapName(TypeName As String) As String
  Select Case TypeName
    Case "Allergy"
      MapName = "Drug-Allergy (Active and Inactive Ingredients)"
    Case Else
      MapName = TypeName
  End Select
End Function

'------------------------------------------------------------------
' NAME:         ReviewSpecificTypeExist(PRIVATE)
' DESCRIPTION:  put different filter and hide different columns for "Raw Data" sheet.
' CALLED BY:    all buttons for different types
' PARAMETERS:
'   TypeName(I,OPT)-the corresponding alert type name. Empty means we don't want to filter out anything
' RETURN: "," delimited related alert type string for the column
'*CX++ 159366 created
Sub ReviewSpecificTypeExist(TypeName As String)
  Dim wrkCopySheet As Worksheet
  Dim idx As Integer
  Dim colName As String
  Dim chkHide As Boolean
  Dim typeFilter As String
  
  On Error Resume Next
  Application.ScreenUpdating = False
  Set wrkCopySheet = Worksheets("Raw Data")
  wrkCopySheet.AutoFilterMode = False
  If Len(TypeName) > 0 Then
    chkHide = True
    typeFilter = MapName(TypeName)
  End If
  If Len(typeFilter) > 0 Then
    wrkCopySheet.Range("A1").AutoFilter field:=1, Criteria1:=typeFilter
  Else
    wrkCopySheet.Range("A1").AutoFilter field:=1
  End If
  For idx = 0 To 100
    colName = wrkCopySheet.Range("A1").Offset(0, idx).Value
    If Len(colName) = 0 Then
      Exit For
    End If
    colName = MapTypes(colName)
    wrkCopySheet.Columns(idx + 1).Hidden = False
    If Len(colName) > 0 And chkHide Then
      If InStr(colName, TypeName) = 0 Then    'if the name doesn't contain the type name
          wrkCopySheet.Columns(idx + 1).Hidden = True
      End If
    End If
  Next idx
  
  Call wrkCopySheet.Activate
  Call wrkCopySheet.Range("A2").Activate
  Set wrkCopySheet = Nothing
  Application.ScreenUpdating = True
  On Error GoTo 0
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cbMoreTypes, 36, 3, MSForms, ComboBox"
'------------------------------------------------------------------
' NAME:         cbMoreTypes_Change(PRIVATE)
' DESCRIPTION:  select different filter and hide different columns based on the selection
' CALLED BY:    cbMoreTypes combo box
'*CX++ 159366 created
Private Sub cbMoreTypes_Change()
  Dim TypeName As String
  
  TypeName = cbMoreTypes.Value
  Call ReviewSpecificTypeExist(TypeName)
End Sub

'------------------------------------------------------------------
' NAME:         Worksheet_Activate(PRIVATE)
' DESCRIPTION:  populate the combo box
'*CX++ 159366 created
Private Sub Worksheet_Activate()
  cbMoreTypes.List = Array("Drug-Drug", "Allergy", "Drug-Food", "Drug-Alcohol", "Duplicate Therapy", "Dose", "IV Compatibility", "Drug-Disease", _
                           "Duplicate Medication Order", "Pregnancy", "Lactation", "TPN", "Age/Gender", "Geriatric", "Pediatric")
End Sub

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
