Attribute VB_Name = "Module1"
        
        Sub UpdateListboxSheet(lb As MSForms.ListBox, col As Long)
        On Error GoTo ErrorHandler
             Dim index As Integer
10        index = lb.ListIndex + 2
            Dim val As String
20        val = Sheet8.Cells(index, col)
30        If lb.Selected(index - 2) = True And (val = "0" Or val = "") Then
40            Sheet8.Cells(index, col).value = "1"
50        ElseIf lb.Selected(index - 2) = False And (val = "1") Then
60            Sheet8.Cells(index, col).value = "0"
            End If
            Exit Sub
ErrorHandler:
70            Call Module33.LogEvent(Err, "Module1.UpdateListboxSheet", Erl)
80            Call Module33.ErrorHandler
        End Sub
        
        Sub UpdateListbox(lb As MSForms.ListBox, col As Long)
        On Error GoTo ErrorHandler
90         For LbItem = 0 To lb.ListCount - 1
100            If Sheet8.Cells(LbItem + 2, col) = 1 Then
110                lb.Selected(LbItem) = True
120            Else
130                lb.Selected(LbItem) = False
                End If
140        Next LbItem
            Exit Sub
ErrorHandler:
150            Call Module33.LogEvent(Err, "Module1.UpdateListbox", Erl)
160            Call Module33.ErrorHandler
        End Sub
        
        
        Sub HideButtons()
        On Error GoTo ErrorHandler
170        If Sheet8.Cells(1, 18) = "1" Then
180            If ThisWorkbook.sheetExists("Sheet5") Then
190                Sheet5.Shapes("Button 59").Visible = False
                End If
200            If ThisWorkbook.sheetExists("Sheet6") Then
210                Sheet6.Shapes("btn_RateSpread_Filter").Visible = False
                End If
            End If
            Exit Sub
ErrorHandler:
220            Call Module33.LogEvent(Err, "Module1.HideButtons", Erl)
230            Call Module33.ErrorHandler
        End Sub


Attribute VB_Name = "Module10"
Sub dd_Supply_LOS_Change()

        On Error GoTo ErrorHandler
10        Call Module33.OptimizeCode_Begin
            Dim startTime As Date
20        startTime = Now()

            Dim SelectedIndex As Long
            Dim LOSValue As String
30            SelectedIndex = GetIndexFromSelectedDropdown("SupplyLOS")
40            LOSValue = Module8.GetValueFromSelectedIndex("LOS", SelectedIndex)
            
50        If LOSValue <> "" Then
                
            Dim los As Integer
            Dim days As Integer
60        los = LOSValue
70        days = Sheet1.Cells(4, 1)
            
80            If los > 0 And days > 0 Then
            Dim r As Range
            Dim startC As Long
            
90        startC = (days * (SelectedIndex - 1)) + 1
100        Set r = Sheet1.Cells(11, startC)
            
110        Sheet1.Visible = True
120        Sheet1.Activate
130        Sheet1.Select
140        r.Resize(r.Rows.Count + 8, r.Columns.Count + days - 1).Select
          
150        Selection.Copy
160        Sheet1.Visible = False
            
170        Sheet9.Select
180        Sheet9.Range("B8").Select
190        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
                :=False, Transpose:=False
200            Selection.PasteSpecial xlPasteFormats
210            Selection.PasteSpecial xlPasteColumnWidths
220            Selection.PasteSpecial xlPasteComments
                
230        Sheet9.Range("A8").Select
            
240        Application.CutCopyMode = False
            End If
            End If
              
250        Call Module33.LogTime("dd_Supply_LOS_Change", startTime, Now())
260        Call Module33.OptimizeCode_End_ExceptCalculation
        Exit Sub
ErrorHandler:
270            Sheet1.Visible = False
280            Call Module33.LogEvent(Err, "Module10.dd_Supply_LOS_Change", Erl)
290            Call Module33.ErrorHandler
        End Sub



Attribute VB_Name = "Module11"
Sub dd_Overvw_LOS_Change()
        On Error GoTo ErrorHandler
10        Call Module33.OptimizeCode_Begin
            Dim startTime As Date
20        startTime = Now()
        
            Dim los As Integer
            Dim days As Integer
            Dim comps As Integer
             Dim SelectedIndex As Long
            Dim LOSValue As String
            
30        SelectedIndex = GetIndexFromSelectedDropdown("OverviewLOS")
40        LOSValue = Module8.GetValueFromSelectedIndex("LOS", SelectedIndex)
50        days = Sheet8.Cells(50, 1)
60        comps = Sheet8.Cells(53, 1)
            
          If LOSValue = "All" Then
           LOSValue = 1
          End If
          
70        If LOSValue <> "" And days > 0 And comps > 0 Then
            Dim r As Range
            Dim startC As Long
            
80            los = LOSValue
            
90        startC = (days * (SelectedIndex - 1)) + 3
100        Set r = Sheet8.Cells(62, startC)
            
110        Sheet8.Visible = True
120        Sheet8.Activate
130        Sheet8.Select
140        r.Resize(comps * 3, (r.Columns.Count + days - 1)).Select
            
150        Application.CutCopyMode = False
           
160        Selection.Copy
170        Sheet8.Visible = False
            
180        Sheet4.Select
190        Sheet4.Range("C11").Select
200        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
                :=False, Transpose:=False
210            Selection.PasteSpecial xlPasteFormats
220            Selection.PasteSpecial xlPasteColumnWidths
230            Selection.PasteSpecial xlPasteComments
                
240        Sheet4.Range("B9").Select
            
250        Application.CutCopyMode = False
            
260         Call Module23.Overview_CB_Channel_Click
270         Call Module23.Overview_CB_Diff_Click
              
            End If
            
             
280        Call Module33.LogTime("dd_Overvw_LOS_Change", startTime, Now())
290        Call Module33.OptimizeCode_End_ExceptCalculation
        Exit Sub
ErrorHandler:
300            Call Module33.LogEvent(Err, "Module11.dd_Overvw_LOS_Change", Erl)
310            Call Module33.ErrorHandler
        End Sub



Attribute VB_Name = "Module12"
Sub CloseFilters()
On Error GoTo ErrorHandler
10          Call Module33.OptimizeCode_Begin
            Dim startTime As Date
20          startTime = Now()
            
            'Overview
30            If ThisWorkbook.sheetExists("Sheet4") Then
40                Sheet4.Activate
50                Call Module16.Picture4_Click
            End If
            'Rates
60            If ThisWorkbook.sheetExists("Sheet5") Then
70                Sheet5.Activate
80                Call Module18.Picture17_Click
            End If
            'Parity
90            If ThisWorkbook.sheetExists("Sheet12") Then
100                Sheet12.Activate
110                Call Module9.Picture9_Click
            End If
            'Trends
120            If ThisWorkbook.sheetExists("Sheet9") Then
130                Sheet9.Activate
140                Call Module24.Picture6_Click
            End If
            'Rank
150            If ThisWorkbook.sheetExists("Sheet10") Then
160                Sheet10.Activate
170                Call Module3.Picture32_Click
            End If
            'RankUI
180            If ThisWorkbook.sheetExists("Sheet22") Then
190                Sheet22.Activate
                    Range("A1").Select
200                Call Module18.Picture45_Click
            End If
210            Sheet2.Activate
        Exit Sub
ErrorHandler:
220             Call Module33.LogEvent(Err, "Module12.CloseFilters", Erl)
230             Call Module33.ErrorHandler
End Sub

Attribute VB_Name = "Module13"
Sub cb_Rates_Diff_Click()
         
         On Error GoTo ErrorHandler
10     Call Module33.OptimizeCode_Begin
        Dim startTime As Date
20    startTime = Now()
        
30     If ThisWorkbook.sheetExists("Sheet5") Then
            Dim comps As Integer
            Dim channels As Integer
            
40        channels = Sheet15.Cells(7, 1)
50        comps = Sheet15.Cells(6, 1)
60            Sheet5.Activate
70        cbChannel = ActiveSheet.Shapes("cb_Rates_Diff").OLEFormat.Object.value
 
80        For lCol = 0 To comps * channels * 4 Step 4
90            Set rCell = Range("C15").Offset(lCol, 0)
100            If cbChannel <> 1 Then
110                Rows(rCell.row).Hidden = True
120            ElseIf cbChannel = 1 Then
130                Rows(rCell.row).Hidden = False
                End If
140        Next
            End If
        
150    Call Module33.LogTime("cb_Rates_Diff_Click", startTime, Now())
160    Call Module33.OptimizeCode_End_ExceptCalculation
        Exit Sub
ErrorHandler:
170            Call Module33.LogEvent(Err, "Module13.cb_Rates_Diff_Click", Erl)
180            Call Module33.ErrorHandler
        End Sub
        

Sub cb_Rates_Desc_Click()
On Error GoTo ErrorHandler
190        Call Module33.OptimizeCode_Begin
            Dim startTime As Date
200        startTime = Now()
            
210        If ThisWorkbook.sheetExists("Sheet5") Then
            Dim comps As Integer
            Dim channels As Integer
            
220        channels = Sheet15.Cells(7, 1)
230        comps = Sheet15.Cells(6, 1)
        
240        Sheet5.Activate
250        cbChannel = ActiveSheet.Shapes("cb_Rates_Desc").OLEFormat.Object.value
260        For lCol = 0 To comps * channels * 4 Step 4
270            Set rCell = Range("C16").Offset(lCol, 0)
280            If cbChannel <> 1 Then
290                Rows(rCell.row).Hidden = True
300            ElseIf cbChannel = 1 Then
310                Rows(rCell.row).Hidden = False
                End If
320        Next
            End If
            
330        Call Module33.LogTime("chk_Rates_Des_Click", startTime, Now())
340        Call Module33.OptimizeCode_End_ExceptCalculation
            Exit Sub
ErrorHandler:
350            Call Module33.LogEvent(Err, "Module13.cb_Rates_Desc_Click", Erl)
360            Call Module33.ErrorHandler
End Sub


Sub cb_Rates_Age_Click()
On Error GoTo ErrorHandler
370    Call Module33.OptimizeCode_Begin
        Dim startTime As Date
380    startTime = Now()
        
390        If ThisWorkbook.sheetExists("Sheet5") Then
            Dim comps As Integer
            Dim channels As Integer
            
400        channels = Sheet15.Cells(7, 1)
410        comps = Sheet15.Cells(6, 1)
        
420        Sheet5.Activate
430        cbChannel = ActiveSheet.Shapes("cb_Rates_Age").OLEFormat.Object.value
440        For lCol = 0 To comps * channels * 4 Step 4
450            Set rCell = Range("C17").Offset(lCol, 0)
460            If cbChannel <> 1 Then
470                Rows(rCell.row).Hidden = True
480            ElseIf cbChannel = 1 Then
490                Rows(rCell.row).Hidden = False
                End If
500        Next
510        Call CallToFillRateFilters
            
        End If
        
520    Call Module33.LogTime("cb_Rates_Age_Click", startTime, Now())
530    Call Module33.OptimizeCode_End_ExceptCalculation
        Exit Sub
ErrorHandler:
540            Call Module33.LogEvent(Err, "Module13.cb_Rates_Age_Click", Erl)
550            Call Module33.ErrorHandler
End Sub

Sub cb_Rates_High_Click()
On Error GoTo ErrorHandler
560    Call Module33.OptimizeCode_Begin
        Dim startTime As Date
570    startTime = Now()
        
580    If ThisWorkbook.sheetExists("Sheet5") Then
590            Sheet5.Activate
600            cbChannel = ActiveSheet.Shapes("cb_Rates_High").OLEFormat.Object.value
610            If cbChannel <> 1 Then
620                 Sheet5.Cells(8, 15) = "FALSE"
630            ElseIf cbChannel = 1 Then
640                 Sheet5.Cells(8, 15) = "TRUE"
            End If
        End If
650    Call Module33.LogTime("cb_Rates_High_Click", startTime, Now())
660    Call Module33.OptimizeCode_End_ExceptCalculation
ErrorHandler:
670            Call Module33.LogEvent(Err, "Module13.cb_Rates_High_Click", Erl)
680            Call Module33.ErrorHandler
End Sub

Sub cb_Rates_Low_Click()
On Error GoTo ErrorHandler
690    Call Module33.OptimizeCode_Begin
        Dim startTime As Date
700    startTime = Now()
        
710    If ThisWorkbook.sheetExists("Sheet5") Then
720            Sheet5.Activate
730            cbChannel = ActiveSheet.Shapes("cb_Rates_Low").OLEFormat.Object.value
740            If cbChannel <> 1 Then
750                 Sheet5.Cells(7, 15) = "FALSE"
760            ElseIf cbChannel = 1 Then
770                 Sheet5.Cells(7, 15) = "TRUE"
            End If
        End If
780    Call Module33.LogTime("cb_Rates_Low_Click", startTime, Now())
790    Call Module33.OptimizeCode_End_ExceptCalculation
ErrorHandler:
800            Call Module33.LogEvent(Err, "Module13.cb_Rates_Low_Click", Erl)
810            Call Module33.ErrorHandler
End Sub

Attribute VB_Name = "Module14"
Sub cb_RatesUI_Diff_Click()
On Error GoTo ErrorHandler
10     Call Module33.OptimizeCode_Begin
        Dim startTime As Date
20    startTime = Now()
        
30    If ThisWorkbook.sheetExists("Sheet22") Then
40            Call Module5.HideRows(Sheet22, "C", 3, "cb_RatesUI_Diff", "Diff")
        End If
        
50    Call Module33.LogTime("cb_RatesUI_Diff_Click", startTime, Now())
60    Call Module33.OptimizeCode_End_ExceptCalculation
        Exit Sub
ErrorHandler:
70            Call Module33.LogEvent(Err, "Module13.cb_RatesUI_Diff_Click", Erl)
80            Call Module33.ErrorHandler
End Sub

Attribute VB_Name = "Module15"
        Sub Picture1_Click()
        
         On Error GoTo ErrorHandler
10       Call Module33.OptimizeCode_Begin
20      ActiveSheet.Shapes("Picture 1").Visible = False
30      ActiveSheet.Shapes("Picture 4").Visible = True
40      ActiveSheet.Shapes("dd_Overvw_LOS").Visible = True
50      ActiveSheet.Shapes("Picture 2").Visible = True
60      ActiveSheet.Shapes("Textbox 7").Visible = True
        
70      ActiveSheet.Shapes("cb_Overview_Diff").OLEFormat.Object.Visible = True
80      ActiveSheet.Shapes("cb_Overview_Channel").OLEFormat.Object.Visible = True
          ' ActiveSheet.Shapes("Picture 5").Visible = True
          
         
90      Range("A4:A8").EntireRow.Hidden = False
100     Call Module33.OptimizeCode_End_ExceptCalculation
          Exit Sub
ErrorHandler:
110             Call Module33.LogEvent(Err, "Module15.Picture1_Click", Erl)
120             Call Module33.ErrorHandler
        
        End Sub

Attribute VB_Name = "Module16"
        Sub Picture4_Click()
         On Error GoTo ErrorHandler
10       Call Module33.OptimizeCode_Begin
20       ActiveSheet.Shapes("Picture 1").Visible = True
30      ActiveSheet.Shapes("Picture 4").Visible = False
40      ActiveSheet.Shapes("Picture 2").Visible = False
50      ActiveSheet.Shapes("Textbox 7").Visible = False
60      ActiveSheet.Shapes("dd_Overvw_LOS").Visible = False
        
70      ActiveSheet.Shapes("cb_Overview_Diff").OLEFormat.Object.Visible = False
80      ActiveSheet.Shapes("cb_Overview_Channel").OLEFormat.Object.Visible = False
        
          ' ActiveSheet.Shapes("Picture 5").Visible = False
          
         
90      Range("A4:A8").EntireRow.Hidden = True
100     Call Module33.OptimizeCode_End_ExceptCalculation
         Exit Sub
ErrorHandler:
110             Call Module33.LogEvent(Err, "Module16.Picture4_Click", Erl)
120             Call Module33.ErrorHandler
        
        End Sub
        

Attribute VB_Name = "Module17"
        Sub Picture44_Click()
        
          On Error GoTo ErrorHandler
10      Call Module33.OptimizeCode_Begin
20    ActiveSheet.Shapes("Picture 1").Visible = False
30    ActiveSheet.Shapes("Picture 2").Visible = True
        
40        ActiveSheet.Shapes("dd_RatesUI_Product").Visible = True
50        ActiveSheet.Shapes("dd_RatesUI_Qualification").Visible = True
60        ActiveSheet.Shapes("dd_RatesUI_Promotion").Visible = True
70        ActiveSheet.Shapes("dd_RatesUI_LOS").Visible = True
80        ActiveSheet.Shapes("dd_RatesUI_Restriction").Visible = True
        
90        ActiveSheet.Shapes("cb_RatesUI_Desc").OLEFormat.Object.Visible = True
100        ActiveSheet.Shapes("cb_RatesUI_Diff").OLEFormat.Object.Visible = True
110        ActiveSheet.Shapes("cb_RatesUI_Age").OLEFormat.Object.Visible = True
120        ActiveSheet.Shapes("cb_RatesUI_High").OLEFormat.Object.Visible = True
130        ActiveSheet.Shapes("cb_RatesUI_Low").OLEFormat.Object.Visible = True
140        ActiveSheet.Shapes("lb_RatesUI_Inclusion").OLEFormat.Object.Visible = True
150        ActiveSheet.Shapes("pc_Low").Visible = True
160        ActiveSheet.Shapes("pc_High").Visible = True
        
170    Range("A4:A12").EntireRow.Hidden = False
180    Call Module33.OptimizeCode_End_ExceptCalculation
          Exit Sub
ErrorHandler:
190            Call Module33.LogEvent(Err, "Module17.Picture44_Click", Erl)
200            Call Module33.ErrorHandler
            
        
        End Sub
        
        
        
        Sub Picture16_Click()
        
          On Error GoTo ErrorHandler
210      Call Module33.OptimizeCode_Begin
220    ActiveSheet.Shapes("Picture 16").Visible = False
230    ActiveSheet.Shapes("Picture 17").Visible = True
240    ActiveSheet.Shapes("Button 59").Visible = True

250        ActiveSheet.Shapes("dd_Rates_Product").Visible = True
260        ActiveSheet.Shapes("dd_Rates_Qualification").Visible = True
270        ActiveSheet.Shapes("dd_Rates_Promotion").Visible = True
280        ActiveSheet.Shapes("dd_Rates_LOS").Visible = True
290        ActiveSheet.Shapes("dd_Rates_Restriction").Visible = True
        
300        ActiveSheet.Shapes("cb_Rates_Desc").OLEFormat.Object.Visible = True
310        ActiveSheet.Shapes("cb_Rates_Diff").OLEFormat.Object.Visible = True
320        ActiveSheet.Shapes("cb_Rates_Age").OLEFormat.Object.Visible = True
330        ActiveSheet.Shapes("cb_Rates_High").OLEFormat.Object.Visible = True
340        ActiveSheet.Shapes("cb_Rates_Low").OLEFormat.Object.Visible = True
350        ActiveSheet.Shapes("lb_Rates_Inclusion").OLEFormat.Object.Visible = True
360        ActiveSheet.Shapes("pc_Low").Visible = True
370        ActiveSheet.Shapes("pc_High").Visible = True
        
380    Call Module1.HideButtons
        
390    Range("A4:A12").EntireRow.Hidden = False
400    Call Module33.OptimizeCode_End_ExceptCalculation
          Exit Sub
ErrorHandler:
410            Call Module33.LogEvent(Err, "Module17.Picture16_Click", Erl)
420            Call Module33.ErrorHandler
            
        
        End Sub


Attribute VB_Name = "Module18"
        Sub Picture45_Click()
        
          On Error GoTo ErrorHandler
10      Call Module33.OptimizeCode_Begin
20    ActiveSheet.Shapes("Picture 1").Visible = True
30    ActiveSheet.Shapes("Picture 2").Visible = False
40    ActiveSheet.Shapes("dd_RatesUI_Product").Visible = False
50        ActiveSheet.Shapes("dd_RatesUI_Qualification").Visible = False
60        ActiveSheet.Shapes("dd_RatesUI_Promotion").Visible = False
70        ActiveSheet.Shapes("dd_RatesUI_LOS").Visible = False
80        ActiveSheet.Shapes("dd_RatesUI_Restriction").Visible = False
90        ActiveSheet.Shapes("lb_RatesUI_Inclusion").Visible = False
        
100        ActiveSheet.Shapes("cb_RatesUI_Desc").OLEFormat.Object.Visible = False
110        ActiveSheet.Shapes("cb_RatesUI_Diff").OLEFormat.Object.Visible = False
120        ActiveSheet.Shapes("cb_RatesUI_Age").OLEFormat.Object.Visible = False
130        ActiveSheet.Shapes("cb_RatesUI_High").OLEFormat.Object.Visible = False
140        ActiveSheet.Shapes("cb_RatesUI_Low").OLEFormat.Object.Visible = False
150        ActiveSheet.Shapes("pc_Low").Visible = False
160        ActiveSheet.Shapes("pc_High").Visible = False
        
170    Range("A4:A12").EntireRow.Hidden = True
180    Call Module33.OptimizeCode_End_ExceptCalculation
          Exit Sub
ErrorHandler:
190            Call Module33.LogEvent(Err, "Module18.Picture45_Click", Erl)
200            Call Module33.ErrorHandler

End Sub
        
        
        
        Sub Picture17_Click()
        
          On Error GoTo ErrorHandler
210      Call Module33.OptimizeCode_Begin
220    ActiveSheet.Shapes("Picture 16").Visible = True
230    ActiveSheet.Shapes("Picture 17").Visible = False
240    ActiveSheet.Shapes("Button 59").Visible = False
250    ActiveSheet.Shapes("dd_Rates_Product").Visible = False
260        ActiveSheet.Shapes("dd_Rates_Qualification").Visible = False
270        ActiveSheet.Shapes("dd_Rates_Promotion").Visible = False
280        ActiveSheet.Shapes("dd_Rates_LOS").Visible = False
290        ActiveSheet.Shapes("dd_Rates_Restriction").Visible = False
        
300        ActiveSheet.Shapes("cb_Rates_Desc").OLEFormat.Object.Visible = False
310        ActiveSheet.Shapes("cb_Rates_Diff").OLEFormat.Object.Visible = False
320        ActiveSheet.Shapes("cb_Rates_Age").OLEFormat.Object.Visible = False
330        ActiveSheet.Shapes("cb_Rates_High").OLEFormat.Object.Visible = False
340        ActiveSheet.Shapes("cb_Rates_Low").OLEFormat.Object.Visible = False
350        ActiveSheet.Shapes("lb_Rates_Inclusion").OLEFormat.Object.Visible = False
360        ActiveSheet.Shapes("pc_Low").Visible = False
370        ActiveSheet.Shapes("pc_High").Visible = False

380    Range("A4:A12").EntireRow.Hidden = True
390    Call Module33.OptimizeCode_End_ExceptCalculation
          Exit Sub
ErrorHandler:
400            Call Module33.LogEvent(Err, "Module18.Picture17_Click", Erl)
410            Call Module33.ErrorHandler
        End Sub



Attribute VB_Name = "Module19"
        Sub Picture21_Click()
        
          On Error GoTo ErrorHandler
10      Call Module33.OptimizeCode_Begin
20    ActiveSheet.Shapes("Picture 21").Visible = False
30    ActiveSheet.Shapes("Picture 22").Visible = True
40    ActiveSheet.Shapes("btn_RateSpread_Filter").Visible = True
50    ActiveSheet.cb_Ratespread_LOS.Visible = True
        'ActiveSheet.CB_RateSpread_Inclusion.Visible = False
60    ActiveSheet.cb_RateSpread_Product.Visible = True
70    ActiveSheet.cb_RateSpread_Qualification.Visible = True
80    ActiveSheet.cb_RateSpread_Promotion.Visible = True
90    ActiveSheet.cb_RateSpread_Restriction.Visible = True
100    ActiveSheet.LB_RateSpread_Inclusion.Visible = True
110    Sheet6.Shapes("Cb_RateSpread_RR").OLEFormat.Object.Visible = True
120    Call Module1.HideButtons
        
130    Range("A4:A12").EntireRow.Hidden = False
140    Call Module33.OptimizeCode_End_ExceptCalculation
         Exit Sub
ErrorHandler:
150            Call Module33.LogEvent(Err, "Module19.Picture21_Click", Erl)
160            Call Module33.ErrorHandler
        End Sub


Attribute VB_Name = "Module2"
        Sub SetNamedListLOS()
10          Call SetNamedLists("listLOS1", 1)
        End Sub
        
        Sub SetNamedListRestriction()
20          Call SetNamedLists("listRestriction", 3)
        End Sub
        
        Sub SetNamedListQualification()
30          Call SetNamedLists("listQualification", 4)
        End Sub
        
        Sub SetNamedListPromotion()
40          Call SetNamedLists("listPromotion", 5)
        End Sub
        
        Sub SetNamedListProduct()
50          Call SetNamedLists("listProduct", 6)
        End Sub
        
        Sub SetNamedListInclusion()
60          Call SetNamedLists("listInclusion", 7)
        End Sub
        
        Sub SetNamedLists(NamedRange As String, column As Long)
            Dim LOSRows As Long
            Dim endRow As Long
            Dim startRow As Long
            
70          LOSRows = Sheet8.Cells(2, column) - 1
80          startRow = 3
            endRow = 3 + LOSRows
90          With ActiveWorkbook.Names(NamedRange)
100             .Name = NamedRange
110             .RefersToR1C1 = "=Sheet3!R" & startRow & "C" & column & ":R" & endRow & "C" & column
120             .Comment = ""
            End With
        End Sub
        

Attribute VB_Name = "Module20"
        Sub Picture22_Click()
        
            On Error GoTo ErrorHandler
10          Call Module33.OptimizeCode_Begin
20      ActiveSheet.Shapes("Picture 21").Visible = True
30      ActiveSheet.Shapes("Picture 22").Visible = False
40      ActiveSheet.Shapes("btn_RateSpread_Filter").Visible = False
50      ActiveSheet.cb_Ratespread_LOS.Visible = False
        'ActiveSheet.CB_RateSpread_Inclusion.Visible = False
60      ActiveSheet.cb_RateSpread_Product.Visible = False
70      ActiveSheet.cb_RateSpread_Qualification.Visible = False
80      ActiveSheet.cb_RateSpread_Promotion.Visible = False
90      ActiveSheet.cb_RateSpread_Restriction.Visible = False
100     ActiveSheet.LB_RateSpread_Inclusion.Visible = False
110     Sheet6.Shapes("Cb_RateSpread_RR").OLEFormat.Object.Visible = False
        
120     Range("A4:A12").EntireRow.Hidden = True
130     Call Module33.OptimizeCode_End_ExceptCalculation
             Exit Sub
ErrorHandler:
140             Call Module33.LogEvent(Err, "Module20.Picture22_Click", Erl)
150             Call Module33.ErrorHandler
        
        End Sub

Attribute VB_Name = "Module21"
        Sub Picture22_Click()
        
            On Error GoTo ErrorHandler
10          Call Module33.OptimizeCode_Begin
20      ActiveSheet.Shapes("Picture 21").Visible = True
30      ActiveSheet.Shapes("Picture 22").Visible = False
40      ActiveSheet.Shapes("btn_RateSpread_Filter").Visible = False
50      ActiveSheet.cb_Ratespread_LOS.Visible = False
        'ActiveSheet.CB_RateSpread_Inclusion.Visible = False
60      ActiveSheet.cb_RateSpread_Product.Visible = False
70      ActiveSheet.cb_RateSpread_Qualification.Visible = False
80      ActiveSheet.cb_RateSpread_Promotion.Visible = False
90      ActiveSheet.cb_RateSpread_Restriction.Visible = False
100     ActiveSheet.LB_RateSpread_Inclusion.Visible = False
110     Sheet6.Shapes("Cb_RateSpread_RR").OLEFormat.Object.Visible = False
        
120     Range("A4:A12").EntireRow.Hidden = True
130     Call Module33.OptimizeCode_End_ExceptCalculation
             Exit Sub
ErrorHandler:
140             Call Module33.LogEvent(Err, "Module21.Picture22_Click", Erl)
150             Call Module33.ErrorHandler
        
        End Sub

Attribute VB_Name = "Module22"
        Sub Picture22_Click()
        
            On Error GoTo ErrorHandler
10          Call Module33.OptimizeCode_Begin
20      ActiveSheet.Shapes("Picture 21").Visible = True
30      ActiveSheet.Shapes("Picture 22").Visible = False
40      ActiveSheet.Shapes("btn_RateSpread_Filter").Visible = False
50      ActiveSheet.cb_Ratespread_LOS.Visible = False
        'ActiveSheet.CB_RateSpread_Inclusion.Visible = False
60      ActiveSheet.cb_RateSpread_Product.Visible = False
70      ActiveSheet.cb_RateSpread_Qualification.Visible = False
80      ActiveSheet.cb_RateSpread_Promotion.Visible = False
90      ActiveSheet.cb_RateSpread_Restriction.Visible = False
100     ActiveSheet.LB_RateSpread_Inclusion.Visible = False
110     Sheet6.Shapes("Cb_RateSpread_RR").OLEFormat.Object.Visible = False
        
120     Range("A4:A12").EntireRow.Hidden = True
130     Call Module33.OptimizeCode_End_ExceptCalculation
             Exit Sub
ErrorHandler:
140             Call Module33.LogEvent(Err, "Module22.Picture22_Click", Erl)
150             Call Module33.ErrorHandler
        
        End Sub

Attribute VB_Name = "Module23"
        Sub Overview_CB_Channel_Click()
        On Error GoTo ErrorHandler
10      Call Module33.OptimizeCode_Begin
        Dim startTime As Date
20      startTime = Now()
        
30      If ThisWorkbook.sheetExists("Sheet4") Then
            Dim days As Integer
            Dim comps As Integer
            Dim rCell As Range
            Dim cbChannel As Integer
            
40          days = Sheet8.Cells(50, 1)
50          comps = Sheet8.Cells(53, 1)

            Sheet4.Activate
60          cbChannel = ActiveSheet.Shapes("cb_Overview_Channel").OLEFormat.Object.value
70
80          For lCol = 0 To comps * 3 Step 3
90              Set rCell = Range("A13").Offset(lCol, 0)
100             If cbChannel <> 1 Then
110                 Rows(rCell.row).Hidden = True
120             ElseIf cbChannel = 1 Then
130                 Rows(rCell.row).Hidden = False
                End If
140         Next
          End If
        
150     Call Module33.LogTime("Overview_CB_Channel_Click", startTime, Now())
160     Call Module33.OptimizeCode_End_ExceptCalculation
             Exit Sub
ErrorHandler:
170             Call Module33.LogEvent(Err, "Module23.Overview_CB_Channel_Click", Erl)
180             Call Module33.ErrorHandler
        End Sub
        
        Sub Overview_CB_Diff_Click()
        On Error GoTo ErrorHandler
190     Call Module33.OptimizeCode_Begin
        Dim startTime As Date
200     startTime = Now()
        
210     If ThisWorkbook.sheetExists("Sheet4") Then
            Dim days As Integer
            Dim comps As Integer
            Dim rCell As Range
            Dim cbChannel As Integer
            
220         days = Sheet8.Cells(50, 1)
230         comps = Sheet8.Cells(53, 1)
            Sheet4.Activate
240         cbChannel = ActiveSheet.Shapes("cb_Overview_Diff").OLEFormat.Object.value
250
260         For lCol = 0 To comps * 3 Step 3
270             Set rCell = Range("A12").Offset(lCol, 0)
280             If cbChannel <> 1 Then
290                 Rows(rCell.row).Hidden = True
300             ElseIf cbChannel = 1 Then
310                 Rows(rCell.row).Hidden = False
                End If
320         Next
        End If
            
330     Call Module33.LogTime("Overview_CB_Diff_Click", startTime, Now())
340     Call Module33.OptimizeCode_End_ExceptCalculation
        
         Exit Sub
ErrorHandler:
350             Call Module33.LogEvent(Err, "Module23.Overview_CB_Diff_Click", Erl)
360             Call Module33.ErrorHandler
        End Sub
        
        

Attribute VB_Name = "Module24"
        Sub Picture6_Click()
        On Error GoTo ErrorHandler
10      Call Module33.OptimizeCode_Begin
20       ActiveSheet.Shapes("Picture 7").Visible = True
30      ActiveSheet.Shapes("Picture 6").Visible = False
40      ActiveSheet.Shapes("dd_Supply_LOS").Visible = False
        
50      Range("A4:A6").EntireRow.Hidden = True
60      Call Module33.OptimizeCode_End_ExceptCalculation
         Exit Sub
ErrorHandler:
70              Call Module33.LogEvent(Err, "Module24.Picture6_Click", Erl)
80              Call Module33.ErrorHandler
        
        End Sub
        
        Sub Picture7_Click()
        On Error GoTo ErrorHandler
90      Call Module33.OptimizeCode_Begin
100      ActiveSheet.Shapes("Picture 6").Visible = True
110     ActiveSheet.Shapes("Picture 7").Visible = False
120     ActiveSheet.Shapes("dd_Supply_LOS").Visible = True
         
130     Range("A4:A6").EntireRow.Hidden = False
140     Call Module33.OptimizeCode_End_ExceptCalculation
         Exit Sub
ErrorHandler:
150             Call Module33.LogEvent(Err, "Module24.Picture7_Click", Erl)
160             Call Module33.ErrorHandler
        
        End Sub
        

Attribute VB_Name = "Module25"
        Sub Button_Rate_Filter_Click()
        On Error GoTo ErrorHandler
10        If Module28.CheckRateInclusion() Then
              End
            End If
            
20        Call Module33.OptimizeCode_Begin
            Dim startTime As Date
30        startTime = Now()
            
            
            
40        Call Button_Rate_Filter(True)
50        Call Module36.SetRateControls
60        Call Module33.OptimizeCode_End_ExceptCalculation
70        Call Module33.LogTime("Button_Rate_Filter_Click", startTime, Now())
              Exit Sub
ErrorHandler:
80            Call Module33.LogEvent(Err, "Module25.Button_Rate_Filter_Click", Erl)
90            Call Module33.ErrorHandler
        End Sub


Function CheckRateInclusion()
On Error GoTo ErrorHandler
    Dim IsAllSelected As Boolean
    Dim IsAnySelected As Boolean
100    IsAllSelected = False
110    IsAnySelected = False
120    CheckRateInclusion = False
    
130    With Worksheets("Rates Detail").ListBoxes("lb_Rates_inclusion")
140        For i = 1 To .ListCount
150            If .Selected(i) Or .Selected(1) Then
160                Sheets("Sheet3").Cells(i + 2, 8).value = "TRUE"
170                If i = 1 Then
180                    IsAllSelected = True
190                Else
200                    IsAnySelected = True
                End If
210            Else
220                Sheets("Sheet3").Cells(i + 2, 8).value = "FALSE"
            End If
230        Next i
    End With
    
240        If IsAllSelected = True And IsAnySelected = True Then
250            MsgBox ("(All) Inclusion item can't be selected with other items.")
260            CheckRateInclusion = True
270        ElseIf IsAllSelected = False And IsAnySelected = False Then
280            MsgBox ("Please select atleast one Inclusion Item to proceed.")
290            CheckRateInclusion = True
            End If
             Exit Function
ErrorHandler:
300            Call Module33.LogEvent(Err, "Module25.CheckRateInclusion", Erl)
310            Call Module33.ErrorHandler
End Function
        
        Sub Button_Rate_Filter(selectsheet As Boolean)
         On Error GoTo ErrorHandler
320        Call Module33.OptimizeCode_Begin
            
330        If Sheet13.Cells(3, 3).value > "" Then
           ' MsgBox 1
            Dim startTime As Date
340        startTime = Now()
        
            Dim restriction As String
            Dim qualification As String
            Dim promotion As String
            Dim los As String
            Dim product As String
            Dim inclusion As String
            
            ' Get Data from dropdowns
350        restriction = Module8.GetValueFromSelectedDropDown("RDRestriction", "Restriction") 'Sheet5.CB_Rates_Restriction.value
360        qualification = Module8.GetValueFromSelectedDropDown("RDQualification", "Qualification") 'Sheet5.CB_Rates_Qualification.value
370        promotion = Module8.GetValueFromSelectedDropDown("RDPromotion", "Promotion") 'Sheet5.CB_Rates_Promotion.value
380        los = Module8.GetValueFromSelectedDropDown("RDLOS", "LOS") 'Sheet5.CB_Rates_LOS.value
390        product = Module8.GetValueFromSelectedDropDown("RDProduct", "Product") 'Sheet5.CB_Rates_Product.value
            'inclusion = Sheet5.cB_Rates_Inclusion.Value
            ' MsgBox (restriction + qualification + promotion + los + product)
            
400            Call Module28.CheckRateInclusion
410        Call Module28.UpdateInclusionPivot
                    
             Dim pt As PivotTable
420         Set pt = Sheet16.PivotTables("Pivot_Rate")
430         Call Module7.UpdatePivotFilters(pt, Sheet16, restriction, qualification, los, product, promotion, "Yes")
             
        '     Call Module37.FillSlicerCacheFromListbox(ActiveWorkbook.SlicerCaches("Slicer_Inclusion1"), _
        '        Sheet5.lb_Rates_Inclusion)
        
        '
            ' Fill Rate Filters
        '    Call FillRatePivotFilter("Pivot_Rate", "Restriction", restriction)
        '    Call FillRatePivotFilter("Pivot_Rate", "Qualification", qualification)
        '    Call FillRatePivotFilter("Pivot_Rate", "Promotion", promotion)
        '    Call FillRatePivotFilter("Pivot_Rate", "LOS", los)
        '    Call FillRatePivotFilter("Pivot_Rate", "Product", product)
        '    'Call FillRatePivotFilter("Pivot_Rate", "Inclusion", inclusion)
        '    Call FillRatePivotFilter("Pivot_Rate", "IsCurrent", "Yes")
        '
              
                    
            ' Fill Current Rates
440        Call FilterRateData(True)
        
450        Call MoveFilteredDataToNewSheet(Sheet13, Sheet14)
        
        '''''''''''''   Uncomment this to fill RateFilteredDataOld Sheet
            ' Fill Old Rates to Calculate Diff
460        Call Module7.UpdatePivotFilters(pt, Sheet16, restriction, qualification, los, product, promotion, "No")
            Call Module7.UpdatePivotFilterField(pt, "IsCurrent", "No")
        
470        Call FilterRateData(False)
        
480        Call MoveFilteredDataToNewSheet(Sheet13, Sheet17)
        '''''''''''''   End Section - Uncomment this to fill RateFilteredDataOld Sheet
          
490        If selectsheet = True Then
500            Sheet5.Activate
            End If
510            Sheet5.Calculate
            End If
            Call Module39.RateComment
520       Call Module33.LogTime("Button_Rate_Filter", startTime, Now())
           Exit Sub
ErrorHandler:
530            Call Module33.LogEvent(Err, "Module25.Button_Rate_Filter", Erl)
540            Call Module33.ErrorHandler
        End Sub
        
        Sub FillRatePivotFilter(PivotTable As String, PivotField As String, value As String)
        On Error GoTo ErrorHandler
550        Call Module33.OptimizeCode_Begin
            Dim startTime As Date
560        startTime = Now()
            
            ' Sheet16.Select
570        Sheet16.PivotTables(PivotTable).PivotFields(PivotField).ClearAllFilters
580        If bFieldItemExists(PivotTable, PivotField, value, Sheet16) Then
590            Sheet16.PivotTables(PivotTable).PivotFields(PivotField).CurrentPage = value
600        Else
610            Sheet16.PivotTables(PivotTable).PivotFields(PivotField).CurrentPage = "(blank)"
            End If
620        Call Module33.LogTime("FillRatePivotFilter", startTime, Now())
             Exit Sub
ErrorHandler:
630            Call Module33.LogEvent(Err, "Module25.FillRatePivotFilter", Erl)
640            Call Module33.ErrorHandler
        End Sub
        
     Function bFieldItemExists(PivotTable As String, PivotField As String, strName As String, sheet As Worksheet) As Boolean
650       If strName = "(All)" Then
660                bFieldItemExists = True
670        Else
680            For Each pvtItm In sheet.PivotTables(PivotTable).PivotFields(PivotField).PivotItems
690                If pvtItm.Name = strName Then
700                    bFieldItemExists = True
                        Exit For
                    End If
710            Next
            End If
        End Function
        
        Sub FilterRateData(isActive As Boolean)
        On Error GoTo ErrorHandler
720    Call Module33.OptimizeCode_Begin
        Dim startTime As Date
730        startTime = Now()
            
740     Sheet16.Visible = xlSheetVisible
750     Sheet16.Activate
        
        Dim pt As PivotTable
760    Set pt = Sheet16.PivotTables("Pivot_Rate")
        
770    pt.RefreshTable
        
780    Intersect(pt.PivotFields("Channel").DataRange.EntireRow, pt.PivotFields("Min Of Id").DataRange).Select
        
         ' Debug.Print Selection.Cells.Count
        
        Dim arr() As String
790    ReDim arr(1 To Selection.Cells.Count) As String
          
        Dim SingleCell As Excel.Range
        Dim index As Long
800    index = 1
        
810    For Each SingleCell In Selection.Cells
820            If SingleCell.value > "" Then
830                arr(index) = SingleCell.value
840                valueCount = valueCount + 1
                End If
850            index = index + 1
860        Next
870    Sheet16.Visible = xlSheetHidden
        
Dim ind As Long
    ind = 1
 Dim arr2() As String
    ReDim arr2(1 To valueCount + 1) As String
    For Each i In arr
    If i > "" Then
        arr2(ind) = i
        ind = ind + 1
        End If
    Next i
        
880     Sheet13.Range("$A:$X").AutoFilter Field:=2, Criteria1:=arr2, Operator:=xlFilterValues
           'Sheet13.Select
          ' Application.ScreenUpdating = True
           
           ' Writing no of cells that are copied to reduce VLookup Rows
890       valueCount = valueCount + 10
900       If isActive = True Then
910        Sheet8.Cells(1, 16) = "RateFilteredData!$B$2:$AA$" & valueCount
            Sheet8.Cells(2, 16) = "$B$2:$AA$" & valueCount
920       Else
930        Sheet8.Cells(1, 17) = "RateFilteredDataOld!$B$2:$AA$" & valueCount
           End If
           
940        Call Module33.LogTime("FilterRateData", startTime, Now())
            Exit Sub
ErrorHandler:
950            Call Module33.LogEvent(Err, "Module25.FilterRateData", Erl)
960            Call Module33.ErrorHandler
        End Sub
        
        
        
        Sub MoveFilteredDataToNewSheet(sheet As Worksheet, newSheet As Worksheet)
        On Error GoTo ErrorHandler
970    Call Module33.OptimizeCode_Begin
        Dim startTime As Date
980        startTime = Now()
            
        ' Clear sheet
990    With newSheet
1000            .Visible = xlSheetVisible
1010            .Activate
1020            .Cells.Clear
            End With
            
            ' Copy Data
1030    With sheet
1040        .Visible = xlSheetVisible
1050        .Activate
        End With
        
        Dim lastRow As Long
1060        lastRow = Module33.GetLastFilledRow(sheet, "B")
        
1070        sheet.Range("A1:AA" & lastRow).Copy Destination:=newSheet.Range("B1")
1080        Application.CutCopyMode = False
        
1090        newSheet.Visible = xlSheetHidden
1100            sheet.Visible = xlSheetHidden
        
            
1110             Call Module33.LogTime("MoveFilteredDataToNewSheet", startTime, Now())
             Exit Sub
ErrorHandler:
1120                Call Module33.LogEvent(Err, "Module25.MoveFilteredDataToNewSheet", Erl)
1130                Call Module33.ErrorHandler
        End Sub
        
        




Attribute VB_Name = "Module26"
        Sub RefreshPivotTables()
        On Error GoTo ErrorHandler
10      Call Module33.OptimizeCode_Begin
        Dim startTime As Date
20      startTime = Now()
        
            ' Refresh Rate Pivot Table
             Dim val As String
30          val = Sheet13.Cells(3, 3)
40          If (val > "") Then
                Dim pt As PivotTable
50              Set pt = Sheet16.PivotTables("Pivot_Rate")
60              pt.RefreshTable
                
70              Call Module26.FillRateFilters
                
80              Call Module26.FillRateInitialValues
            End If
            
        
90      Call Module33.LogTime("RefreshPivotTables", startTime, Now())
        Exit Sub
ErrorHandler:
100             Call Module33.LogEvent(Err, "Module26.RefreshPivotTables", Erl)
110             Call Module33.ErrorHandler
        End Sub
        
        
Sub FillRateUIFilters()
            If ThisWorkbook.sheetExists("Sheet22") And Range("Sheet3!C3") > "" Then
                Call Module8.FillDropDownFromSheet(Sheet22, Sheet22.Shapes("dd_RatesUI_Restriction"), "listRestriction", ThisWorkbook.Settings("RDRestriction"))
                Call Module8.FillDropDownFromSheet(Sheet22, Sheet22.Shapes("dd_RatesUI_Qualification"), "listQualification", ThisWorkbook.Settings("RDQualification"))
                Call Module8.FillDropDownFromSheet(Sheet22, Sheet22.Shapes("dd_RatesUI_Promotion"), "listPromotion", ThisWorkbook.Settings("RDPromotion"))
                Call Module8.FillDropDownFromSheet(Sheet22, Sheet22.Shapes("dd_RatesUI_LOS"), "listLOS1", ThisWorkbook.Settings("RDLOS"))
                Call Module8.FillDropDownFromSheet(Sheet22, Sheet22.Shapes("dd_RatesUI_Product"), "listProduct", ThisWorkbook.Settings("RDProduct"))
                Call Module8.FillListboxFromSheet(Sheet22, Sheet22.Shapes("lb_RatesUI_Inclusion"), _
"listInclusion", ThisWorkbook.Settings("RDInclusion"), "Rates Detail", "lb_RatesUI_Inclusion")
            End If
End Sub
        
        Sub CallToFillRateFilters()
        On Error GoTo ErrorHandler
120         Call Module33.OptimizeCode_Begin
            Dim startTime As Date
130         startTime = Now()
            
140         Call Module26.FillRateFilters
            Dim val As String
150             val = Sheet13.Cells(3, 3)
160             If (val > "") Then
170                 Call Module26.FillRateInitialValues
                End If
                
            
180         Call Module33.LogTime("CallToFillRateFilters", startTime, Now())
              Exit Sub
ErrorHandler:
190             Call Module33.LogEvent(Err, "Module26.CallToFillRateFilters", Erl)
200             Call Module33.ErrorHandler
        End Sub
        
        Sub RefreshRateSpreadPivotTables()
        On Error GoTo ErrorHandler
210     Call Module33.OptimizeCode_Begin
        Dim startTime As Date
220     startTime = Now()
        
            ' Refresh Rate Pivot Table
             Dim val As String
230         val = Sheet13.Cells(3, 3)
240         If (val > "") Then
                Dim pt As PivotTable
250             Set pt = Sheet3.PivotTables("Pivot_RSpread")
260             pt.RefreshTable
                
            End If
            
        
270     Call Module33.LogTime("RefreshPivotSpreadTables", startTime, Now())
        Exit Sub
ErrorHandler:
280             Call Module33.LogEvent(Err, "Module26.RefreshRateSpreadPivotTables", Erl)
290             Call Module33.ErrorHandler
        End Sub
        
        Sub CallToFillRateSpreadFilters()
         On Error GoTo ErrorHandler
        Dim startTime As Date
300     startTime = Now()
        
310     Call Module26.FillRateSpreadFilters
320     Call Module34.Button_RateSpread_Filter(False)
330     Call Module33.LogTime("CallToFillRateSpreadFilters", startTime, Now())
         Exit Sub
ErrorHandler:
340             Call Module33.LogEvent(Err, "Module26.CallToFillRateSpreadFilters", Erl)
350             Call Module33.ErrorHandler
        End Sub
        
        Sub FillRateFilters()
        On Error GoTo ErrorHandler
360     Call Module33.OptimizeCode_Begin
        Dim startTime As Date
370     startTime = Now()
        
380     If ThisWorkbook.sheetExists("Sheet5") And Range("Sheet3!C3") > "" Then
     
            Call Module8.FillDropDownFromSheet(Sheet5, Sheet5.Shapes("dd_Rates_Restriction"), "listRestriction", ThisWorkbook.Settings("RDRestriction"), Range("Sheet3!K41"))
            Call Module8.FillDropDownFromSheet(Sheet5, Sheet5.Shapes("dd_Rates_Qualification"), "listQualification", ThisWorkbook.Settings("RDQualification"), Range("Sheet3!L41"))
            Call Module8.FillDropDownFromSheet(Sheet5, Sheet5.Shapes("dd_Rates_Promotion"), "listPromotion", ThisWorkbook.Settings("RDPromotion"), Range("Sheet3!M41"))
            Call Module8.FillDropDownFromSheet(Sheet5, Sheet5.Shapes("dd_Rates_LOS"), "listLOS1", ThisWorkbook.Settings("RDLOS"))
            Call Module8.FillDropDownFromSheet(Sheet5, Sheet5.Shapes("dd_Rates_Product"), "listProduct", ThisWorkbook.Settings("RDProduct"))
            Call Module8.FillListboxFromSheet(Sheet5, Sheet5.Shapes("lb_Rates_Inclusion"), _
"listInclusion", ThisWorkbook.Settings("RDInclusion"), "Rates Detail", "lb_Rates_Inclusion")

'390         Call FillComboFromSheet(Sheet5.CB_Rates_Restriction, "listRestriction")
'400         Call FillComboFromSheet(Sheet5.CB_Rates_Qualification, "listQualification")
'410         Call FillComboFromSheet(Sheet5.CB_Rates_Promotion, "listPromotion")
'420         Call FillComboFromSheet(Sheet5.CB_Rates_LOS, "listLOS1")
'430         Call FillComboFromSheet(Sheet5.CB_Rates_Product, "listProduct")
440      ' Call FillListBoxFromSheet(Sheet5.lb_Rates_Inclusion, "listInclusion")
            
        '    Dim lbIncl As MSForms.ListBox
        '    Set lbIncl = Sheet5.lb_Rates_Inclusion
        '    Call FillRateSpreadListBoxFromSheet(5, 4, lbIncl)
             
        End If
        
        
450     Call Module33.LogTime("FillRateFilters", startTime, Now())
        
        Exit Sub
ErrorHandler:
460             Call Module33.LogEvent(Err, "Module26.FillRateFilters", Erl)
470             Call Module33.ErrorHandler
        End Sub
        
        
        
        Sub FillRateSpreadFilters()
        On Error GoTo ErrorHandler
480     Call Module33.OptimizeCode_Begin
        Dim startTime As Date
490     startTime = Now()
        
500     If ThisWorkbook.sheetExists("Sheet6") Then
            
510         Call FillComboFromSheet(Sheet6.cb_RateSpread_Restriction, "listRestriction")
520         Call FillComboFromSheet(Sheet6.cb_RateSpread_Qualification, "listQualification")
530         Call FillComboFromSheet(Sheet6.cb_RateSpread_Promotion, "listPromotion")
540         Call FillComboFromSheet(Sheet6.cb_Ratespread_LOS, "listLOS1")
550         Call FillComboFromSheet(Sheet6.cb_RateSpread_Product, "listProduct")
560         'Call FillListBoxFromSheet(Sheet6.LB_RateSpread_Inclusion, "listInclusion")
            
            'Call FillRateSpreadListBoxFromSheet(5, 4, lbIncl)
        End If
        
        
570     Call Module33.LogTime("FillRateSpreadFilters", startTime, Now())
         Exit Sub
ErrorHandler:
580             Call Module33.LogEvent(Err, "Module26.FillRateSpreadFilters", Erl)
590             Call Module33.ErrorHandler
        End Sub
        
        Sub FillRateSpreadListBoxFromSheet(row As Long, column As Long, lb As MSForms.ListBox)
        On Error GoTo ErrorHandler
600      Call Module33.OptimizeCode_Begin
         Dim startTime As Date
610     startTime = Now()
        
            'Dim lb As MSForms.ListBox
            Dim val As String
620         val = Sheet15.Cells(row, column)
            'Set lb = Sheet6.LB_RateSpread_Inclusion
            'MsgBox (1)
630         If val > "" Then
                'MsgBox lb.Name + ":" + val
                
640             lb.Clear
                
650             lb.list = Split(val, "~")
660             If lb.Text = "" Then
                'MsgBox (3)
670                 lb.Selected(0) = True
                    'lb.Text = lb.List(0)
                End If
                
680            lb.ListIndex = lb.ListIndex
            End If
690         Call Module33.LogTime("FillRateSpreadListBoxFromSheet", startTime, Now())
            Exit Sub
ErrorHandler:
700             Call Module33.LogEvent(Err, "Module26.FillRateSpreadListBoxFromSheet", Erl)
710             Call Module33.ErrorHandler
        End Sub
        
        Sub FillRateFilterFromSheet(CBFilter As Combobox, row As Long, column As Long)
        On Error GoTo ErrorHandler
720     Call Module33.OptimizeCode_Begin
        Dim startTime As Date
730     startTime = Now()
        
            Dim val As String
740         val = Sheet15.Cells(row, column)
            
750         If val > "" Then
760             CBFilter.Clear
                'MsgBox val
770             CBFilter.list = Split(val, "~")
                'MsgBox val
780             If CBFilter.Text = "" Then
790                 CBFilter.Text = CBFilter.list(0)
800                 CBFilter.ListIndex = 0
810                 CBFilter.ListIndex = CBFilter.ListIndex
                End If
            End If
        
        
820     Call Module33.LogTime("FillRateFilterFromSheet", startTime, Now())
         Exit Sub
ErrorHandler:
830             Call Module33.LogEvent(Err, "Module26.FillRateFilterFromSheet", Erl)
840             Call Module33.ErrorHandler
        End Sub
        
        Sub FillComboFromSheet(CBFilter As Combobox, NamedRange As String)
        On Error GoTo ErrorHandler
850     Call Module33.OptimizeCode_Begin
        Dim startTime As Date
860     startTime = Now()
            Dim val As String
870         val = CBFilter.value
880         If val = "" Then
890             CBFilter.ListFillRange = ""
900             CBFilter.ListFillRange = NamedRange
910             CBFilter.Text = CBFilter.list(0)
            End If
920     Call Module33.LogTime("FillComboFromSheet", startTime, Now())
         Exit Sub
ErrorHandler:
930             Call Module33.LogEvent(Err, "Module26.FillComboFromSheet", Erl)
940             Call Module33.ErrorHandler
        End Sub
        
        Sub FillListboxFromSheet(CBFilter As MSForms.ListBox, NamedRange As String)
        On Error GoTo ErrorHandler
950     Call Module33.OptimizeCode_Begin
        Dim startTime As Date
960     startTime = Now()
            Dim val As Integer
970         val = CBFilter.ListCount
980         If val = 0 Then
990             CBFilter.ListFillRange = ""
1000                CBFilter.ListFillRange = NamedRange
1010                CBFilter.Selected(0) = True
            End If
1020        Call Module33.LogTime("FillComboFromSheet", startTime, Now())
         Exit Sub
ErrorHandler:
1030                Call Module33.LogEvent(Err, "Module26.FillListBoxFromSheet", Erl)
1040                Call Module33.ErrorHandler
        End Sub
        
        Private Sub FillRateFilterFromPivot(PivotTable As String, PivotField As String, CBFilter As Combobox)
        On Error GoTo ErrorHandler
        Dim startTime As Date
1060        startTime = Now()
        
1070        If ThisWorkbook.sheetExists("Sheet16") Then
            Dim val As String
1080            val = "(All)"
1090            For Each pvtItm In Sheet16.PivotTables(PivotTable).PivotFields(PivotField).PivotItems
1100                If val > "" And pvtItm.Name <> "(blank)" Then
1110                    val = val + "~" + pvtItm.Name
                End If
1120            Next
            
1130             CBFilter.Clear
1140             CBFilter.list = Split(val, "~")
1150             CBFilter.Text = CBFilter.list(0)
        End If
1160        Call Module33.LogTime("FillRateFilterFromPivot", startTime, Now())
        
        Exit Sub
ErrorHandler:
1170                Call Module33.LogEvent(Err, "Module26.FillRateFilterFromPivot", Erl)
1180                Call Module33.ErrorHandler
        End Sub
        
        Sub FillRateInitialValues()
        On Error GoTo ErrorHandler
1190        Call Module33.OptimizeCode_Begin
        Dim startTime As Date
1200        startTime = Now()
        
1210          If ThisWorkbook.sheetExists("Sheet13") Then
            Dim lastRow As Long
            Dim val As String
            
1220            val = Sheet13.Cells(3, 1)
1230            lastRow = Sheet15.Cells(4, 1)
            ' Fill the values only for the first time
1240            If val = "" And lastRow > 0 Then
            
           ' Sort Data
1250            Sheet13.Visible = xlSheetVisible
1260            Sheet13.Activate
            
1270            Range("C1:AA1").Select
1280            ActiveWorkbook.Worksheets("RateRawData").Sort.SortFields.Clear
1290            ActiveWorkbook.Worksheets("RateRawData").Sort.SortFields.Add key:=Range("C:C") _
                , SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
1300            ActiveWorkbook.Worksheets("RateRawData").Sort.SortFields.Add key:=Range("T:T") _
                , SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
1310            ActiveWorkbook.Worksheets("RateRawData").Sort.SortFields.Add key:=Range("Q:Q") _
                , SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
1320            ActiveWorkbook.Worksheets("RateRawData").Sort.SortFields.Add key:=Range("F:F") _
                , SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            
1330            With ActiveWorkbook.Worksheets("RateRawData").Sort
1340                .SetRange Range("A:AA")
1350                .Header = xlYes
1360                .MatchCase = False
1370                .Orientation = xlTopToBottom
1380                .SortMethod = xlPinYin
1390                .Apply
            End With
1400            ActiveWindow.ScrollColumn = 1
            
            
            
            ' Fill Ids
1410            Range("B2").Select
1420            ActiveCell.FormulaR1C1 = "1"
1430            Range("B3").Select
1440            ActiveCell.FormulaR1C1 = "2"
1450            Range("B2:B3").Select
1460            Selection.AutoFill Destination:=Range("B2:B" & lastRow)
        
            ' Fill Combo
1470            Range("A2").Select
1480            ActiveCell.FormulaR1C1 = "=CONCATENATE(RC[2],RC[3],RC[16])" ' Combo -  Channel CheckInDate PropertyId
1490            Columns("A:A").EntireColumn.AutoFit
1500            Selection.AutoFill Destination:=Range("A2:A" & lastRow)
            
1510            Sheet13.Visible = xlSheetHidden
            
           End If
           
           
           
        End If
1520        Call Module33.LogTime("FillRateInitialValues", startTime, Now())
         Exit Sub
ErrorHandler:
1530                Call Module33.LogEvent(Err, "Module26.FillRateInitialValues", Erl)
1540                Call Module33.ErrorHandler
        End Sub
        
        


Attribute VB_Name = "Module27"
        Sub makelastcell()
        Dim x As Long
        Dim str As String
        Dim xlong As Long, clong As Long, rlong As Long
        On Error GoTo 0
10      str = ActiveCell.Address
20      Range(ActiveCell.row + 1 & ":" & Cells.Rows.Count).Delete
30      xlong = ActiveSheet.UsedRange.Rows.Count
40      xlong = ActiveSheet.UsedRange.Columns.Count
50      Range(Cells(1, ActiveCell.column + 1), Cells(Cells.Rows.Count, Cells.Columns.Count)).Delete
60      Beep
70      xlong = ActiveSheet.UsedRange.Rows.Count + ActiveSheet.UsedRange.Columns.Count
80      rlong = Cells.SpecialCells(xlLastCell).row
90      clong = Cells.SpecialCells(xlLastCell).column
100     If rlong <= ActiveCell.row And clong <= ActiveCell.column Then Exit Sub
110     ActiveWorkbook.Save
120     xlong = ActiveSheet.UsedRange.Rows.Count + ActiveSheet.UsedRange.Columns.Count
130     rlong = Cells.SpecialCells(xlLastCell).row
140     clong = Cells.SpecialCells(xlLastCell).column
150     If rlong <= ActiveCell.row And clong <= ActiveCell.column Then Exit Sub
160     MsgBox "Sorry, Have failed to make " & str & " your last cell"
        End Sub

Attribute VB_Name = "Module28"
Function CheckRateInclusion()
    On Error GoTo ErrorHandler
    Dim IsAllSelected As Boolean
    Dim IsAnySelected As Boolean
10    IsAllSelected = False
20    IsAnySelected = False
30    CheckRateInclusion = False
    
40    With Worksheets("Rates Detail").ListBoxes("lb_Rates_inclusion")
50        For i = 1 To .ListCount
60            If .Selected(i) Or .Selected(1) Then
70                Sheets("Sheet3").Cells(i + 2, 8).value = "TRUE"
80                If i = 1 Then
90                    IsAllSelected = True
100                ElseIf .Selected(i) Then
110                    IsAnySelected = True
                End If
120            Else
130                Sheets("Sheet3").Cells(i + 2, 8).value = "FALSE"
            End If
140        Next i
    End With
    
        ' If Inclusion listbox is not empty, then show error
150        If Worksheets("Rates Detail").ListBoxes("lb_Rates_inclusion").ListCount > 0 Then
160        If IsAllSelected = True And IsAnySelected = True Then
170            MsgBox ("(All) Inclusion item can't be selected with other items.")
180            CheckRateInclusion = True
190        ElseIf IsAllSelected = False And IsAnySelected = False Then
200            MsgBox ("Please select atleast one Inclusion Item to proceed.")
210            CheckRateInclusion = True
            End If
        End If
        
        Dim val As Integer
220        val = Sheets("Sheet3").Cells(2, 7).value
230        If IsAllSelected = True Then
240            Sheets("Sheet3").Cells(val + 3, 8).value = "TRUE"
250        Else
260            Sheets("Sheet3").Cells(val + 3, 8).value = "FALSE"
        End If
        Exit Function
ErrorHandler:
270            Call Module33.LogEvent(Err, "Module28.CheckRateInclusion", Erl)
280            Call Module33.ErrorHandler
End Function



Sub UpdateInclusionPivot()

On Error Resume Next
290 Sheet16.Activate
300    ActiveSheet.PivotTables("Pivot_Rate").PivotFields("Inclusion").CurrentPage = _
        "(All)"
310    For i = 1 To Sheets("Sheet3").Cells(2, 7).value + 1 Step 1
320        With ActiveSheet.PivotTables("Pivot_Rate").PivotFields("Inclusion")
330            .PivotItems(Sheets("Sheet3").Cells(i + 2, 7).value).Visible = Sheets("Sheet3").Cells(i + 2, 8).value
340            .PivotItems("~~").Visible = True
        End With
350    Next
360    ActiveSheet.PivotTables("Pivot_Rate").PivotFields("Inclusion"). _
        EnableMultiplePageItems = True
End Sub



Attribute VB_Name = "Module29"
        Sub RateFormatting()
        On Error GoTo ErrorHandler
        Dim startTime As Date
10      startTime = Now()
        
            Dim LowFormula As String
            Dim HighFormula As String
            
            Dim isFormatted As String
20          isFormatted = Sheet15.Cells(1, 10)
            
30          If isFormatted = "" Then
                Dim prop As Integer
                Dim channels As Integer
                Dim days As Integer
                
40              channels = Sheet15.Cells(7, 1)
50              prop = Sheet15.Cells(6, 1)
60              days = Sheet15.Cells(3, 1)
                
                Dim Cells As String
                Dim ThreshCells As String
                ' Cells = "K15,K19,K23,K31,K27,K35"
70              Sheet5.Activate
                
                Dim startRow As Long
                Dim subsRow As Long
                Dim startCol As Long
80              startRow = 14
90              For lchn = 1 To channels Step 1
100                 Cells = ""
110                 startCol = 4
                    subsRow = startRow
120                 For lprop = 1 To prop Step 1
130                     Cells = Cells & "~" & startRow & ","
140                     startRow = startRow + 4
150                 Next
160                 Cells = left(Cells, Len(Cells) - 1)
170                 ThreshCells = Right(Cells, Len(Cells) - InStr(Cells, ","))
                    Dim PrevColName As String
                    Dim NewColName As String
180                 PrevColName = "~"
190                 For ldates = 1 To days Step 1
200                     LowFormula = "=AND(($O$7=TRUE),(($~$" & subsRow & "-$~" & (subsRow + 4) & " ) > IF(VLOOKUP($B" & (subsRow + 4) & " ,RateFilters!$B$11:$E$100,2,0)=""--"",VLOOKUP($B" & (subsRow + 4) & ",RateFilters!$B$11:$E$100,3,0)*$~$" & (subsRow) & " *0.01,VLOOKUP($B" & (subsRow + 4) & " ,RateFilters!$B$11:$E$100,2,0))))"
210                     HighFormula = "=AND(($O$8=TRUE),(($~" & (subsRow + 4) & "-$~$" & (subsRow) & " ) > IF(VLOOKUP($B" & (subsRow + 4) & " ,RateFilters!$B$11:$E$100,4,0)=""--"",VLOOKUP($B" & (subsRow + 4) & ",RateFilters!$B$11:$E$100,5,0)*$~$" & (subsRow) & " *0.01,VLOOKUP($B" & (subsRow + 4) & " ,RateFilters!$B$11:$E$100,4,0))))"
220                     NewColName = Module30.ColumnNameFromNo(startCol)
230                     Cells = Replace(Cells, PrevColName, NewColName)
240                     ThreshCells = Replace(ThreshCells, PrevColName, NewColName)
250                     LowFormula = Replace(LowFormula, "~", NewColName)
260                     HighFormula = Replace(HighFormula, "~", NewColName)
270                     PrevColName = NewColName
280                     startCol = startCol + 1
                        
290                     Call ApplyHighLowFormatting(Cells)
                        
300                     Call PriceThreshFormatting(ThreshCells, LowFormula, 65535, 3)
310                     Call PriceThreshFormatting(ThreshCells, HighFormula, 16776960, 4)
320                 Next
330                 Sheet15.Cells(1, 10) = 1
340             Next
            End If
350         Range("A14").Select
            
            
360         Call Module33.LogTime("RateFormatting", startTime, Now())
            
            Exit Sub
ErrorHandler:
370             Call Module33.LogEvent(Err, "Module29.RateFormatting", Erl)
380             Call Module33.ErrorHandler
         End Sub
         
         Sub PriceThreshFormatting(Cells As String, Formula As String, ColorLng As Long, CondIndex As Long)
            
            On Error GoTo ErrorHandler
            
            Dim startTime As Date
390         startTime = Now()
        If Cells > "" Then
400         Range(Cells).Select
410         Selection.FormatConditions.Add Type:=xlExpression, Formula1:=Formula
              '  "=AND(($O$7=TRUE),(($D$15-$D19) > IF(VLOOKUP($B19,RateFilters!$A$11:$E$100,2,0)=""--"",VLOOKUP($B19,RateFilters!$A$11:$E$100,3,0)*$D$15*0.01,VLOOKUP($B19,RateFilters!$A$11:$E$100,2,0))))"
            'Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
420         With Selection.FormatConditions(CondIndex).Interior
430             .PatternColorIndex = xlAutomatic
440             .Color = ColorLng
450             .TintAndShade = 0
            End With
460         Selection.FormatConditions(CondIndex).StopIfTrue = False
          End If
            
470         Call Module33.LogTime("PriceThreshFormatting", startTime, Now())
             Exit Sub
ErrorHandler:
480             Call Module33.LogEvent(Err, "Module29.PriceThreshFormatting", Erl)
490             Call Module33.ErrorHandler
        End Sub
         
        Sub ApplyHighLowFormatting(Cells As String)
           On Error GoTo ErrorHandler
            Dim startTime As Date
500         startTime = Now()
        If Cells > "" Then
510         Range(Cells).Select
520          Selection.FormatConditions.AddTop10
            ' Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
            
            ' Green
530         With Selection.FormatConditions(1)
540             .TopBottom = xlTop10Bottom
550             .Rank = 1
560             .Percent = False
            End With
570         With Selection.FormatConditions(1).Font
580             .Color = 5287936 '-11480942
590             .TintAndShade = 0
            End With
             ' Selection.FormatConditions(1).StopIfTrue = False
             
600         Selection.FormatConditions.AddTop10
610         With Selection.FormatConditions(2)
620             .TopBottom = xlTop10Top
630             .Rank = 1
640             .Percent = False
            End With
            ' Red
650         With Selection.FormatConditions(2).Font
660             .Color = -16776961
670             .TintAndShade = 0
            End With
            
680         Selection.FormatConditions(1).StopIfTrue = False
690         Selection.FormatConditions(2).StopIfTrue = False
            
            
            End If
700         Call Module33.LogTime("ApplyHighLowFormatting", startTime, Now())
            Exit Sub
ErrorHandler:
710             Call Module33.LogEvent(Err, "Module29.ApplyHighLowFormatting", Erl)
720             Call Module33.ErrorHandler
        End Sub
        
        Sub RatesUIThreshFormatting()
            On Error GoTo ErrorHandler
            Dim Formula As String
            Dim ColorLng As Long
            Dim CondIndex As Long
            Dim startTime As Date
730         startTime = Now()
            
            Dim LowFormula As String
            Dim HighFormula As String
            
            Dim prop As Integer
            Dim channels As Integer
            Dim days As Integer
            
740          channels = Sheet8.Cells(34, 3)
750         prop = Sheet8.Cells(33, 3)
760         days = Sheet8.Cells(32, 3)
            Dim Cells As String
            Dim isFilled As String
770         isFilled = Sheet23.Cells(1, 2)
           Dim isFormatted As String
780         isFormatted = Sheet23.Cells(1, 1)
            
790         If isFilled = "1" And isFormatted = "" Then
800             Sheet22.Activate
                Dim startRow As Long
                Dim subsRow As Long
                Dim startCol As Long
                Dim ThreshCells As String
810             startRow = 14
820             For lchn = 1 To channels Step 1
830                 Cells = ""
840                 startCol = 4
                    subsRow = startRow
850                 For lprop = 1 To prop + 1 Step 1
860                     Cells = Cells & "~" & startRow & ","
870                     startRow = startRow + 4
880                 Next
890                 Cells = left(Cells, Len(Cells) - 1)
900                 ThreshCells = Right(Cells, Len(Cells) - InStr(Cells, ","))
                    Dim PrevColName As String
                    Dim NewColName As String
910                 PrevColName = "~"
920                 For ldates = 1 To days Step 1
930                 HighFormula = "=AND($O$8=TRUE,RateUIDup!~" & (subsRow + 4) & "=1)"
940                 LowFormula = "=AND($O$7=TRUE,RateUIDup!~" & (subsRow + 4) & "=2)"
        '                LowFormula = "=AND(($O$7=TRUE),(($~$" & subsRow & "-$~" & (subsRow + 4) & " ) > IF(VLOOKUP($B" & (subsRow + 4) & " ,RateFilters!$B$11:$E$100,2,0)=""--"",VLOOKUP($B" & (subsRow + 4) & ",RateFilters!$B$11:$E$100,3,0)*$~$" & (subsRow) & " *0.01,VLOOKUP($B" & (subsRow + 4) & " ,RateFilters!$B$11:$E$100,2,0))))"
        '                HighFormula = "=AND(($O$8=TRUE),(($~" & (subsRow + 4) & "-$~$" & (subsRow) & " ) > IF(VLOOKUP($B" & (subsRow + 4) & " ,RateFilters!$B$11:$E$100,4,0)=""--"",VLOOKUP($B" & (subsRow + 4) & ",RateFilters!$B$11:$E$100,5,0)*$~$" & (subsRow) & " *0.01,VLOOKUP($B" & (subsRow + 4) & " ,RateFilters!$B$11:$E$100,4,0))))"
950                     NewColName = Module30.ColumnNameFromNo(startCol)
960                     Cells = Replace(Cells, PrevColName, NewColName)
970                     ThreshCells = Replace(ThreshCells, PrevColName, NewColName)
980                     LowFormula = Replace(LowFormula, "~", NewColName)
990                     HighFormula = Replace(HighFormula, "~", NewColName)
1000                        PrevColName = NewColName
1010                        startCol = startCol + 1
                        
1020                        Call PriceThreshFormatting(ThreshCells, LowFormula, 65535, 1)
1030                        Call PriceThreshFormatting(ThreshCells, HighFormula, 16776960, 2)
1040                    Next
1050                Next
                
1060                Sheet22.Calculate
                
1070                Sheet23.Cells(1, 1) = 1
1080                Sheet22.Cells(14, 4).Select
           End If
1090            Call Module33.LogTime("PriceThreshFormatting", startTime, Now())
             Exit Sub
ErrorHandler:
1100                Call Module33.LogEvent(Err, "Module29.RatesUIThreshFormatting", Erl)
1110                Call Module33.ErrorHandler
        End Sub
        
        Sub RatesUIThreshFormatting_old()
            On Error GoTo ErrorHandler
            Dim Formula As String
            Dim ColorLng As Long
            Dim CondIndex As Long
            Dim startTime As Date
1120            startTime = Now()
            
            Dim prop As Integer
            Dim channels As Integer
            Dim days As Integer
            
1130            channels = Sheet8.Cells(34, 3)
1140            prop = Sheet8.Cells(33, 3)
1150            days = Sheet8.Cells(32, 3)
                
           Dim isFormatted As String
1160            isFormatted = Sheet23.Cells(1, 1)
            
1170            If isFormatted = "" Then
                Dim r As Range
                Dim startC As Long
                
1180                Sheet22.Activate
                
1190                Set r = Sheet22.Cells(13, 4)
1200                r.Resize(r.Rows.Count + (prop * 4), (r.Columns.Count + days)).Select
            
                ' Low Threshhold
1210                Formula = "=AND($O$8=TRUE,RateUIDup!D13=1)"
1220                ColorLng = 65535
1230                CondIndex = 1
                
1240                Selection.FormatConditions.Add Type:=xlExpression, Formula1:=Formula
1250                With Selection.FormatConditions(CondIndex).Interior
1260                    .PatternColorIndex = xlAutomatic
1270                    .Color = ColorLng
1280                    .TintAndShade = 0
                End With
                
1290                Selection.FormatConditions(CondIndex).StopIfTrue = False
                
                ' High Threshhold
1300                Formula = "=AND($O$7=TRUE,RateUIDup!D13=2)"
1310                ColorLng = 16776960
1320                CondIndex = 2
1330                Selection.FormatConditions.Add Type:=xlExpression, Formula1:=Formula
1340                With Selection.FormatConditions(CondIndex).Interior
1350                    .PatternColorIndex = xlAutomatic
1360                    .Color = ColorLng
1370                    .TintAndShade = 0
                End With
                
1380                Selection.FormatConditions(CondIndex).StopIfTrue = False
                
1390                Sheet22.Calculate
                
1400                Sheet23.Cells(1, 1) = 1
           End If
1410            Call Module33.LogTime("PriceThreshFormatting", startTime, Now())
             Exit Sub
ErrorHandler:
1420                Call Module33.LogEvent(Err, "Module29.RatesUIThreshFormatting_old", Erl)
1430                Call Module33.ErrorHandler
        End Sub
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        'Sub RateFormatting()
        'Application.ScreenUpdating = False
        'Dim Formula As String
        'Formula = "=AND(($O$7=TRUE),(($D$15-$D19) > IF(VLOOKUP($B19,RateFilters!$A$11:$E$100,2,0)=""--"",VLOOKUP($B19,RateFilters!$A$11:$E$100,3,0)*$D$15*0.01,VLOOKUP($B19,RateFilters!$A$11:$E$100,2,0))))"
        '    Dim isFormatted As String
        '    isFormatted = Sheet15.Cells(1, 10)
        '
        '    If isFormatted = "" Then
        '        Dim prop As Integer
        '        Dim channels As Integer
        '        Dim days As Integer
        '
        '        channels = Sheet15.Cells(7, 1)
        '        prop = Sheet15.Cells(6, 1)
        '        days = Sheet15.Cells(3, 1)
        '
        '        Dim Cells As String
        '        ' Cells = "K15,K19,K23,K31,K27,K35"
        '
        '        Dim startRow As Long
        '        Dim startCol As Long
        '        startRow = 15
        '        For lchn = 1 To channels Step 1
        '            Cells = ""
        '            startCol = 4
        '            For lprop = 1 To prop Step 1
        '                Cells = Cells & "~" & startRow & ","
        '                startRow = startRow + 4
        '            Next
        '            Cells = Left(Cells, Len(Cells) - 1)
        '            Dim PrevColName As String
        '            Dim NewColName As String
        '            PrevColName = "~"
        '            For ldates = 1 To days Step 1
        '                NewColName = Module30.ColumnNameFromNo(startCol)
        '                Cells = Replace(Cells, PrevColName, NewColName)
        '                PrevColName = NewColName
        '                startCol = startCol + 1
        '
        '                Call ApplyHighLowFormatting(Cells)
        '                Call LowerPriceThreshFormatting(Cells, Formula)
        '            Next
        '            Sheet15.Cells(1, 10) = 1
        '        Next
        '    End If
        '    Application.ScreenUpdating = True
        ' End Sub
        '
        ' Sub LowerPriceThreshFormatting(Cells As String, Formula As String)
        ' Range("Cells").Select
        '    Selection.FormatConditions.Add Type:=xlExpression, Formula1:=Formula
        '      '  "=AND(($O$7=TRUE),(($D$15-$D19) > IF(VLOOKUP($B19,RateFilters!$A$11:$E$100,2,0)=""--"",VLOOKUP($B19,RateFilters!$A$11:$E$100,3,0)*$D$15*0.01,VLOOKUP($B19,RateFilters!$A$11:$E$100,2,0))))"
        '    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
        '    With Selection.FormatConditions(1).Interior
        '        .PatternColorIndex = xlAutomatic
        '        .Color = 65535
        '        .TintAndShade = 0
        '    End With
        'End Sub
        '
        'Sub ApplyHighLowFormatting(Cells As String)
        '   Application.ScreenUpdating = False
        '    Range(Cells).Select
        '     Selection.FormatConditions.AddTop10
        '    ' Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
        '
        '    ' Green
        '    With Selection.FormatConditions(1)
        '        .TopBottom = xlTop10Bottom
        '        .Rank = 1
        '        .Percent = False
        '    End With
        '    With Selection.FormatConditions(1).Font
        '        .Color = -11480942
        '        .TintAndShade = 0
        '    End With
        '
        '    Selection.FormatConditions.AddTop10
        '    With Selection.FormatConditions(2)
        '        .TopBottom = xlTop10Top
        '        .Rank = 1
        '        .Percent = False
        '    End With
        '    ' Red
        '    With Selection.FormatConditions(2).Font
        '        .Color = -16776961
        '        .TintAndShade = 0
        '    End With
        '
        '    ' Selection.FormatConditions(1).StopIfTrue = False
        '    Application.ScreenUpdating = True
        'End Sub

Attribute VB_Name = "Module3"
        Sub Picture32_Click()
        On Error GoTo ErrorHandler
10      Call Module33.OptimizeCode_Begin
        Sheet10.Activate
20      ActiveSheet.Shapes("Picture33").Visible = True
30      ActiveSheet.Shapes("Picture32").Visible = False
40      ActiveSheet.Shapes("cb_Rank_OTA").OLEFormat.Object.Visible = False
50      Range("A4:A6").EntireRow.Hidden = True
60      Call Module33.OptimizeCode_End_ExceptCalculation
         Exit Sub
ErrorHandler:
70              Call Module33.LogEvent(Err, "Module3.Picture32_Click", Erl)
80              Call Module33.ErrorHandler
        
        End Sub
        
        Sub Picture33_Click()
        On Error GoTo ErrorHandler
90      Call Module33.OptimizeCode_Begin
        Sheet10.Activate
100     ActiveSheet.Shapes("Picture32").Visible = True
110     ActiveSheet.Shapes("Picture33").Visible = False
120     ActiveSheet.Shapes("cb_Rank_OTA").OLEFormat.Object.Visible = True
130     Range("A4:A6").EntireRow.Hidden = False
140     Call Module33.OptimizeCode_End_ExceptCalculation
         Exit Sub
ErrorHandler:
150             Call Module33.LogEvent(Err, "Module3.Picture33_Click", Erl)
160             Call Module33.ErrorHandler
        
        End Sub
        
        
        

Attribute VB_Name = "Module30"
      Function ColumnNameFromNo(ColNo As Long) As String
20           ColumnNameFromNo = Split(Cells(, ColNo).Address, "$")(1)
        End Function
        
      Function ColumnNoFromName(colName As String) As Long
40           ColumnNoFromName = Range(colName & 1).column
        End Function

Attribute VB_Name = "Module31"
        Sub UnhideAllSheets()
        On Error GoTo ErrorHandler
10          For Each ws In ActiveWorkbook.Worksheets
20              ws.Visible = xlSheetVisible
30          Next ws
             Exit Sub
ErrorHandler:
40              Call Module33.LogEvent(Err, "Module31.UnhideAllSheets", Erl)
50              Call Module33.ErrorHandler
        End Sub
        
        Sub HideUnwantedSheets()
        On Error GoTo ErrorHandler
60          For Each ws In ActiveWorkbook.Worksheets
70              If ws.Name = "RateRawData" Then
80                  ws.Visible = xlSheetHidden
                End If
90          Next ws
             Exit Sub
ErrorHandler:
100             Call Module33.LogEvent(Err, "Module31.HideUnwantedSheets", Erl)
110             Call Module33.ErrorHandler
        End Sub

Sub UnFreezePanes()
On Error GoTo ErrorHandler
 #If Mac Then
 
' Application.OperatingSystem Like "*Mac*" Then
200    Dim ASh As Worksheet
210    Dim Sh As Worksheet
220    Set ASh = ActiveSheet
230    Application.ScreenUpdating = False
240    For Each Sh In ActiveWorkbook.Worksheets
245     If Sh.Visible = True Then
250        Sh.Activate
260        ActiveWindow.FreezePanes = False
265     End If
270    Next Sh
280    ASh.Activate
290    Application.ScreenUpdating = True
 #End If
 Exit Sub
ErrorHandler:
300             Call Module33.LogEvent(Err, "Module31.UnfreezePanes", Erl)
310             Call Module33.ErrorHandler
End Sub

Sub UnFreezePane()
On Error GoTo ErrorHandler

 #If Mac Then
' Application.OperatingSystem Like "*Mac*" Then
        ActiveWindow.FreezePanes = False

380
390    'Application.ScreenUpdating = True
 #End If
 Exit Sub
ErrorHandler:
MsgBox "error"
300             Call Module33.LogEvent(Err, "Module31.UnFreezePane", Erl)
310             Call Module33.ErrorHandler
End Sub

Public Sub FreezePane()
On Error GoTo ErrorHandler
320     If Sheet8.Cells(39, 4) = "1" Then
 #If Mac Then
 
 #Else
340     If ThisWorkbook.sheetExists("Sheet4") Then
        ' Rates Overview
350        Sheet4.Activate
            Range("C11").Select
370        ActiveWindow.FreezePanes = True
            Range("A11").Select
  End If
  
380  If ThisWorkbook.sheetExists("Sheet5") Then
        ' Rates Detail
390        Sheet5.Activate
400        Range("D14").Select
410        ActiveWindow.FreezePanes = True
            Range("A14").Select
   End If
  
420  If ThisWorkbook.sheetExists("Sheet12") Then
        ' Parity
430        Sheet12.Activate
440        Range("C1").Select
450        ActiveWindow.FreezePanes = True
            Range("A8").Select
  End If
  
460  If ThisWorkbook.sheetExists("Sheet22") Then
        ' Rates UI
470        Sheet22.Activate
480        Range("D14").Select
490        ActiveWindow.FreezePanes = True
            Range("A14").Select
End If

500  If ThisWorkbook.sheetExists("Sheet9") Then
        ' Trends
510        Sheet9.Activate
520        Range("B9").Select
530        ActiveWindow.FreezePanes = True
            Range("A8").Select
End If
 #End If
540         Sheet8.Cells(39, 4) = "2"
550         Sheet2.Activate
 End If
 Exit Sub
ErrorHandler:
300             Call Module33.LogEvent(Err, "Module31.FreezePane", Erl)
310             Call Module33.ErrorHandler
End Sub


Attribute VB_Name = "Module32"
        Public Sub RunInitialMacros()
        On Error GoTo ErrorHandler
        'MsgBox 1
            ' Application.EnableEvents = False
            'Call Module31.StopErrorRules
            'Call Module26.ClearFilter
10          Call Module33.OptimizeCode_Begin
            Dim startTime As Date
20          startTime = Now()
            
            'Call Module7.PivotManualUpdate(True)
610         Call Module40.GetAgeOfData

            
30          Call Module2.SetNamedListLOS
            
40          If ThisWorkbook.sheetExists("Sheet9") Then
50              Call ThisWorkbook.FillSupplyLOSCB
60              Call Module10.dd_Supply_LOS_Change
            End If
            
70          If ThisWorkbook.sheetExists("Sheet4") Then
80              Call ThisWorkbook.FillOverviewLOSCB
90              Call Module11.dd_Overvw_LOS_Change
            End If
            
100         If ThisWorkbook.sheetExists("Sheet12") Then
110             Call ThisWorkbook.FillParityLOSCB
120             Call Module6.dd_Parity_LOS_Change
            End If
            
            ' Set NamedList in case Rates/RatesUI sheet is present
130         If ThisWorkbook.sheetExists("Sheet5") Or ThisWorkbook.sheetExists("Sheet22") Then
140             Call Module2.SetNamedListRestriction
150             Call Module2.SetNamedListQualification
160             Call Module2.SetNamedListPromotion
170             Call Module2.SetNamedListProduct
180             Call Module2.SetNamedListInclusion
            End If
            
190          If ThisWorkbook.sheetExists("Sheet22") Then
200             Call Module29.RatesUIThreshFormatting
                Call Module26.FillRateUIFilters
             End If
             
220         If ThisWorkbook.sheetExists("Sheet5") Then
230            If Sheet5.Cells(1, 16).value = "" Then
240                  Call Module37.EmptyPivotCache(Sheet16.PivotTables("Pivot_Rate"))
250                  Call Module26.RefreshPivotTables
260                  Call Module29.RateFormatting
                End If
            
270             Call CallToFillRateFilters
                
280             If Sheet13.Cells(3, 1) <> "" And Sheet13.Cells(3, 1) <> "~~~~~~" And Sheet14.Cells(2, 1) = "" Then
                   ' MsgBox Sheet13.Cells(3, 1) + "p" + Sheet14.Cells(2, 1)
290                 Call Module25.Button_Rate_Filter(False)
                End If
300             Call Module36.SetRateControls
            End If
            
310         If ThisWorkbook.sheetExists("Sheet6") Then
320             If Sheet5.Cells(1, 16).value = "" Then
330                 Call Module37.EmptyPivotCache(Sheet3.PivotTables("Pivot_RSpread"))
340                  Call Module26.RefreshRateSpreadPivotTables
                End If
350             Call CallToFillRateSpreadFilters
360             Call Module36.SetRateSpreadControls
            End If
            ' Application.EnableEvents = True
            
            ' Fill Supply No of Guests
            'Dim val As String
            'val = Sheet1.Cells(6, 1)
            'If val > "" Then
            '    Sheet9.Cells(6, 2).Value = val
            'End If
            
            ' Update Checkbox for Overview
370         If ThisWorkbook.sheetExists("Sheet4") Then
380             Call Module23.Overview_CB_Channel_Click
390             Call Module23.Overview_CB_Diff_Click
            End If
            
            ' Update Checkbox for Rate
400         If ThisWorkbook.sheetExists("Sheet5") Then
410              Call Module13.cb_Rates_Diff_Click
420              Call Module13.cb_Rates_Desc_Click
430              Call Module13.cb_Rates_Age_Click
            End If
            
            ' Update Checkbox for RateUI
440         If ThisWorkbook.sheetExists("Sheet22") Then
450             Call Module38.cb_RatesUI_Desc_Click
460             Call Module38.cb_RatesUI_Age_Click
470             Call Module14.cb_RatesUI_Diff_Click
            End If
            
             ' Update Checkbox for RateSpread
480         If ThisWorkbook.sheetExists("Sheet6") Then
490             Call Module35.Chk_Ratespread_Click
            End If
            
            ' Update Checkbox for Parity
500         If ThisWorkbook.sheetExists("Sheet12") Then
510             Call Module7.Parity2_CheckBox1_Click
520             Call Module7.Parity2_Channel_Click
            End If
            
            ' Update Checkbox for Rank
530         If ThisWorkbook.sheetExists("Sheet10") Then
540             Call Module4.cb_Rank_OTA_Click
            End If
            
550         Call Module1.HideButtons
           
560         Call Module33.LogTime("RunInitialMacros", startTime, Now())
570         Call Module33.OptimizeCode_End
            
580         Sheet2.Activate
            Exit Sub
ErrorHandler:
590             Call Module33.LogEvent(Err, "Module32.RunInitialMacros")
600             Call Module33.ErrorHandler
        End Sub

Attribute VB_Name = "Module33"
        Public row As Long
        
        
        Sub OptimizeCode_Begin()
        Dim startTime As Date
10          startTime = Now()
            
20      Application.Calculation = xlCalculationManual
30      Application.ScreenUpdating = False
40      Application.DisplayStatusBar = False
50      Application.EnableEvents = False
        
        
        'ActiveSheet.DisplayPageBreaks = False
        
60      Call Module33.LogTime("OptimizeCode_Begin", startTime, Now())
        End Sub
        
        Sub OptimizeCode_End()
         Dim startTime As Date
70          startTime = Now()
            
80      Application.EnableEvents = True
90      Application.DisplayStatusBar = True
100     Application.ScreenUpdating = True
110     Application.Calculation = xlCalculationAutomatic
        
        
        'ActiveSheet.DisplayPageBreaks = True
120     Call Module33.LogTime("OptimizeCode_End", startTime, Now())
        End Sub
        
        Sub OptimizeCode_End_ExceptCalculation()
         Dim startTime As Date
130         startTime = Now()
            
140     Application.EnableEvents = True
150     Application.DisplayStatusBar = True
160     Application.ScreenUpdating = True
        
        
        'ActiveSheet.DisplayPageBreaks = True
170     Call Module33.LogTime("OptimizeCode_End_ExceptCalculation", startTime, Now())
        End Sub
        
        Sub AreEventsEnabled()
180         MsgBox "Application.EnableEvents " & Application.EnableEvents & "Application.ScreenUpdating " & Application.ScreenUpdating & "Application.Calculation " & Application.Calculation
        End Sub
        
        Sub ErrorHandler()
190         Application.EnableEvents = True
200         Application.DisplayStatusBar = True
210         Application.ScreenUpdating = True
        End Sub
        
        Sub StopLogging()
        ' To stop Logging
220         Sheet8.Cells(39, 1) = "1"
        ' To freeze panes
221         Sheet8.Cells(39, 4) = "1"
        End Sub
        
        Sub LogEvent(Err As Object, functionName As String, Optional Erl As Integer = -1)
230         If Sheet8.Cells(39, 1).value <> "1" Then
                Dim reportId As String
                Dim errorDesc As String
                Dim excelEvent As String
240             reportId = Sheet8.Cells(35, 3).value
250             excelEvent = Sheet8.Cells(39, 3).value
260             errorDesc = Now() & ", ReportId : " & reportId & ", Function : " & functionName & ", Error# : " & Err.Number & ", Description : " & Err.Description & ", Line# : " & Erl
270             Shell "eventcreate /Id 101 /D  """ & errorDesc & """ /T ERROR /L """ & excelEvent & """ "
            End If
        End Sub
        
        
        
        
        
        Sub LogTime(EventName As String, startTime As Date, endTime As Date)
        '    Dim column As Long
        '    row = GetLastFilledRow(Sheet20, "B") + 1
        '    column = 2
        '    Sheet20.Cells(row, column) = EventName
        '    column = column + 1
        '    Sheet20.Cells(row, column) = startTime
        '    column = column + 1
        '    Sheet20.Cells(row, column) = endTime
        '    row = row + 1
        End Sub
        
        
        Function GetLastFilledRow(sheet As Worksheet, col As String) As Long
                Dim lastRow As Long
280             With sheet
290                 lastRow = sheet.Cells(1048576, col).End(xlUp).row
                End With
300             GetLastFilledRow = lastRow
        End Function
        
        
        Sub HideFormulas(ByVal Sh As Object, sheetName As String, Target As Range)
        
        
        Dim rFormulaCheck As Range
        
            
        
            On Error Resume Next
        
310     If ThisWorkbook.sheetExists(sheetName) Then
        
320         Sh.Activate
330         Sh.Unprotect Password:=""
        
340             With Selection
        
350                     .Locked = False
        
360                     .FormulaHidden = False
        
                End With
        
                
        
370         If Target.Cells.Count = 1 Then
        
380             If Target.HasFormula Then
        
390                 With Target
        
400                     .Locked = True
        
410                     .FormulaHidden = True
        
                    End With
        
            
        
420                 Sh.Protect Password:="", UserInterFaceOnly:=True
        
                End If
        
430         ElseIf Target.Cells.Count > 1 Then
        
440             Set rFormulaCheck = Selection.SpecialCells(xlCellTypeFormulas)
        
450                 If Not rFormulaCheck Is Nothing Then
        
460                     With Selection.SpecialCells(xlCellTypeFormulas)
        
470                         .Locked = True
        
480                         .FormulaHidden = True
        
                        End With
        
490                     Sh.Protect Password:="", UserInterFaceOnly:=True
        
                    End If
        
            End If
        End If
            On Error GoTo 0
        
        End Sub
        

Sub SettingsSet()
    Application.Cursor = xlWait
End Sub
Attribute VB_Name = "Module34"
        Sub Button_RateSpread_Filter_Click()
            On Error GoTo ErrorHandler
10        Call Module33.OptimizeCode_Begin
            Dim startTime As Date
20        startTime = Now()
            
30        Call Button_RateSpread_Filter(True)
40        Call Module36.SetRateSpreadControls
            
50        Call Module33.OptimizeCode_End_ExceptCalculation
60        Call Module33.LogTime("Button_RateSpread_Filter_Click", startTime, Now())
              Exit Sub
ErrorHandler:
70            Call Module33.LogEvent(Err, "Module34.Button_RateSpread_Filter_Click", Erl)
80            Call Module33.ErrorHandler
        End Sub
        
        Sub Button_RateSpread_Filter(selectsheet As Boolean)
        On Error GoTo ErrorHandler
90        Call Module33.OptimizeCode_Begin
            Dim startTime As Date
100        startTime = Now()
            
110        If Sheet13.Cells(3, 3).value > "" Then
            
        
            Dim restriction As String
            Dim qualification As String
            Dim promotion As String
            Dim los As String
            Dim product As String
            Dim inclusion As String
            
            ' Get Data from dropdowns
120        restriction = Sheet6.cb_RateSpread_Restriction.value
130        qualification = Sheet6.cb_RateSpread_Qualification.value
140        promotion = Sheet6.cb_RateSpread_Promotion.value
150        los = Sheet6.cb_Ratespread_LOS.value
160        product = Sheet6.cb_RateSpread_Product.value
            'inclusion = Sheet5.CB_RateSpread_Inclusion.Value
            
            ' Refresh Rate Spread Pivot Table
        '    Dim pt As PivotTable
        '    Set pt = Sheet3.PivotTables("Pivot_RSpread")
        '
        '     Call Module7.UpdatePivotFilters(pt, restriction, qualification, los, product, promotion, "Yes")
        '     Call Module7.UpdatePivotFilterField(pt, "Status", "O")
             
170         Call Module7.UpdatePivotSlicer(ActiveWorkbook.SlicerCaches("Slicer_Restriction"), _
             ActiveWorkbook.SlicerCaches("Slicer_Qualification"), _
                ActiveWorkbook.SlicerCaches("Slicer_LOS"), _
                ActiveWorkbook.SlicerCaches("Slicer_Product"), _
                ActiveWorkbook.SlicerCaches("Slicer_Promotion"), _
                ActiveWorkbook.SlicerCaches("Slicer_IsCurrent"), _
        restriction, qualification, los, product, promotion, "Yes")
            
180        Call Module1.UpdateListbox(Sheet6.LB_RateSpread_Inclusion, 9)
190        Call Module37.FillSlicerCacheFromListbox(ActiveWorkbook.SlicerCaches("Slicer_Inclusion"), _
                Sheet6.LB_RateSpread_Inclusion)
        
            ' Fill Rate Spread Filters
        '    Call FillRateSpreadPivotFilter("Pivot_RSpread", "Restriction", restriction)
        '    Call FillRateSpreadPivotFilter("Pivot_RSpread", "Qualification", qualification)
        '    Call FillRateSpreadPivotFilter("Pivot_RSpread", "Promotion", promotion)
        '    Call FillRateSpreadPivotFilter("Pivot_RSpread", "LOS", los)
        '    Call FillRateSpreadPivotFilter("Pivot_RSpread", "Product", product)
        '    'Call FillRateSpreadPivotFilter("Pivot_RSpread", "Inclusion", inclusion)
        '    Call FillRateSpreadPivotFilter("Pivot_RSpread", "IsCurrent", "Yes")
            
            'Call FillPivotFromListbox(Sheet6.LB_RateSpread_Inclusion, _
                    Sheet3.PivotTables("Pivot_RSpread").PivotFields("Inclusion"))
                    
            ' Fill Current Rates
200        Call FilterRateSpreadData(True)
        
210        If selectsheet = True Then
220            Sheet6.Activate
            End If
            End If
230       Call Module33.LogTime("Button_RateSpread_Filter", startTime, Now())
           Exit Sub
ErrorHandler:
240            Call Module33.LogEvent(Err, "Module34.Button_RateSpread_Filter", Erl)
250            Call Module33.ErrorHandler
        End Sub
        
        Sub FillRateSpreadPivotFilter(PivotTable As String, PivotField As String, value As String)
        On Error GoTo ErrorHandler
260        Call Module33.OptimizeCode_Begin
            Dim startTime As Date
270        startTime = Now()
        
            ' Sheet16.Select
280        Sheet3.PivotTables(PivotTable).PivotFields(PivotField).ClearAllFilters
290        If Module25.bFieldItemExists(PivotTable, PivotField, value, Sheet3) Then
300            Sheet3.PivotTables(PivotTable).PivotFields(PivotField).CurrentPage = value
310        Else
320            Sheet3.PivotTables(PivotTable).PivotFields(PivotField).CurrentPage = "(blank)"
            End If
         Exit Sub
ErrorHandler:
330            Call Module33.LogEvent(Err, "Module34.FillRateSpreadPivotFilter", Erl)
340            Call Module33.ErrorHandler
            
        End Sub
        
        
        Sub FilterRateSpreadData(isActive As Boolean)
350    Call Module33.OptimizeCode_Begin
        
        Dim pt As PivotTable
360    Set pt = Sheet3.PivotTables("Pivot_RSpread")
        
370    pt.RefreshTable
         Exit Sub
ErrorHandler:
380            Call Module33.LogEvent(Err, "Module34.FilterRateSpreadData", Erl)
390            Call Module33.ErrorHandler
        End Sub




Attribute VB_Name = "Module35"
        Sub Chk_Ratespread_Click()
        On Error GoTo ErrorHandler
10           Call Module33.OptimizeCode_Begin
            Dim startTime As Date
20          startTime = Now()
        
30       If ThisWorkbook.sheetExists("Sheet6") Then
            Dim comps As Integer
            Dim channels As Integer
            
40          channels = Sheet15.Cells(7, 1)
50          comps = Sheet15.Cells(6, 1)
        
60          cbChannel = Sheet6.Shapes("Cb_RateSpread_RR").OLEFormat.Object.value
            
70          Sheet6.Activate
80          For lCol = 0 To comps * channels * 2 Step 2
90              Set rCell = Range("C15").Offset(lCol, 0)
100             If cbChannel <> 1 Then
110                 Rows(rCell.row).Hidden = True
120             ElseIf cbChannel = 1 Then
130                 Rows(rCell.row).Hidden = False
                End If
140         Next
            End If
        
150     Call Module33.LogTime("Chk_Ratespread_Click", startTime, Now())
160     Call Module33.OptimizeCode_End_ExceptCalculation
        Exit Sub
ErrorHandler:
170             Call Module33.LogEvent(Err, "Module35.Chk_Ratespread_Click", Erl)
180             Call Module33.ErrorHandler
        End Sub

Attribute VB_Name = "Module36"
        Sub SetRateSpreadControls()
        On Error GoTo ErrorHandler
10      If ThisWorkbook.sheetExists("Sheet6") Then
            'Call Module33.OptimizeCode_Begin
            
20          '~~TODO~~ Call UpdateComboboxPosition(Sheet6.cb_RateSpread_Restriction, 61.5, 111, 12.75, 105.75)
30          '~~TODO~~ Call UpdateComboboxPosition(Sheet6.cb_RateSpread_Qualification, 76.5, 111, 12.75, 105.75)
40          '~~TODO~~ Call UpdateComboboxPosition(Sheet6.cb_RateSpread_Promotion, 90.75, 111, 12.75, 105.75)
50          '~~TODO~~ Call UpdateComboboxPosition(Sheet6.cb_Ratespread_LOS, 106.5, 111, 12.75, 105.75)
60          '~~TODO~~ Call UpdateComboboxPosition(Sheet6.cb_RateSpread_Product, 122.25, 111, 12.75, 105.75)
70          '~~TODO~~ Call UpdateListboxPosition(Sheet6.LB_RateSpread_Inclusion, 137.25, 111, 19.5, 105.75)
            End If
              Exit Sub
ErrorHandler:
80              Call Module33.LogEvent(Err, "Module36.SetRateSpreadControls", Erl)
90              Call Module33.ErrorHandler
        End Sub
        
        Sub SetRateControls()
        On Error GoTo ErrorHandler
100         If ThisWorkbook.sheetExists("Sheet5") Then
            'Call Module33.OptimizeCode_Begin
            
            Dim left As Double
            Dim top As Double
            Dim height As Double
            Dim width As Double
110         left = 111.75
120         height = 14
130         width = 116.25
140     '~~ToDo~~    Call UpdateComboboxPosition(Sheet5.CB_Rates_Restriction, 63.75, left, height, width)
150     '~~ToDo~~    Call UpdateComboboxPosition(Sheet5.CB_Rates_Qualification, 81.75, left, height, width)
160     '~~ToDo~~    Call UpdateComboboxPosition(Sheet5.CB_Rates_Promotion, 98.25, left, height, width)
170      '~~ToDo~~   Call UpdateComboboxPosition(Sheet5.CB_Rates_LOS, 117, left, height, width)
180      '~~ToDo~~   Call UpdateComboboxPosition(Sheet5.CB_Rates_Product, 134.25, left, height, width)
190    '~~ToDo~~     Call UpdateListboxPosition(Sheet5.lb_Rates_Inclusion, 152.25, left, 31.5, width)
            End If
            Exit Sub
ErrorHandler:
200             Call Module33.LogEvent(Err, "Module36.SetRateControls", Erl)
210             Call Module33.ErrorHandler
        End Sub
        
        Sub UpdateComboboxPosition(cb As Combobox, top As Double, left As Double, _
            height As Double, width As Double)
            On Error GoTo ErrorHandler
220         With cb
230             .top = top
240             .left = left
250             .height = height
260             .width = width
270             .Font.Size = 8
            End With
            Exit Sub
ErrorHandler:
280             Call Module33.LogEvent(Err, "Module36.UpdateComboboxPosition", Erl)
290             Call Module33.ErrorHandler
        End Sub
        
        Sub UpdateListboxPosition(cb As MSForms.ListBox, top As Double, left As Double, _
            height As Double, width As Double)
            On Error GoTo ErrorHandler
300         With cb
310             .top = top
320             .left = left
                '.height = height
330             .width = width
340             .Font.Size = 8
            End With
             Exit Sub
ErrorHandler:
350             Call Module33.LogEvent(Err, "Module36.UpdateListboxPosition", Erl)
360             Call Module33.ErrorHandler
        End Sub
        


Attribute VB_Name = "Module37"
        Function IsListBoxItemSelected(lb As MSForms.ListBox, item As String) As Boolean
            On Error GoTo ErrorHandler
10          IsListBoxItemSelected = False
20          For LbItem = 1 To lb.ListCount - 1
30              If lb.Selected(LbItem) = True And lb.list(LbItem) = item Then
40                  IsListBoxItemSelected = True
                    Exit For
                End If
50          Next LbItem
            Exit Function
ErrorHandler:
60              Call Module33.LogEvent(Err, "Module37.IsListBoxItemSelected", Erl)
70              Call Module33.ErrorHandler
        End Function
        
        
        Function isAnyListBoxItemSelected(lb As MSForms.ListBox) As Boolean
            On Error GoTo ErrorHandler
80          isAnyListBoxItemSelected = False
90          For LbItem = 0 To lb.ListCount - 1
100             If lb.Selected(LbItem) = True Then
110                 isAnyListBoxItemSelected = True
                    Exit For
                End If
120         Next LbItem
            Exit Function
ErrorHandler:
130             Call Module33.LogEvent(Err, "Module37.isAnyListBoxItemSelected", Erl)
140             Call Module33.ErrorHandler
        End Function
        
        Sub FillPivotFromListbox(lb As MSForms.ListBox, pf As PivotField)
            On Error GoTo ErrorHandler
            Dim index As Integer
150         If lb.Selected(0) = True And lb.list(0) = "(All)" Then
160             Call PivotSelectAll(pf)
170         Else
                Dim IsAnySelected As Boolean
180             For i = 1 To pf.PivotItems.Count
190                 If pf.PivotItems(i).value = "~~" Then
200                     pf.PivotItems(i).Visible = True
                    End If
210                 If IsListBoxItemSelected(lb, pf.PivotItems(i).value) Then
220                     pf.PivotItems(i).Visible = True
230                     IsAnySelected = True
240                 Else
250                     If pf.PivotItems(i).value <> "~~" Then
260                         pf.PivotItems(i).Visible = False
                        End If
                    End If
270             Next
280             If IsAnySelected = False And isAnyListBoxItemSelected(lb) = False Then
290                 Call PivotSelectAll(pf)
                End If
            End If
            Exit Sub
ErrorHandler:
300             Call Module33.LogEvent(Err, "Module37.FillPivotFromListbox", Erl)
310             Call Module33.ErrorHandler
        End Sub
        
        Sub PivotSelectAll(pf As PivotField)
         On Error GoTo ErrorHandler
320             pf.EnableMultiplePageItems = True
330             pf.CurrentPage = "(All)"
340             For i = 1 To pf.PivotItems.Count
350                 pf.PivotItems(i).Visible = True
360             Next
                Exit Sub
ErrorHandler:
370             Call Module33.LogEvent(Err, "Module37.PivotSelectAll", Erl)
380             Call Module33.ErrorHandler
        End Sub
        
        Sub Test()
        
390         With Sheet3.PivotTables("Pivot_RSpread")
400             .PivotCache.MissingItemsLimit = xlMissingItemsNone
410             .PivotCache.Refresh
            End With
420             Call FillPivotFromListbox(Sheet6.LB_RateSpread_Inclusion, _
                    Sheet3.PivotTables("Pivot_RSpread").PivotFields("Inclusion"))
                    
                    
        End Sub
        
        Sub EmptyPivotCache(pt As PivotTable)
        '    With pt
        '        .PivotCache.MissingItemsLimit = xlMissingItemsNone
        '        .PivotCache.Refresh
        '    End With
        End Sub
        
        Sub FillSlicerCacheFromListbox(sc As SlicerCache, lb As MSForms.ListBox)
         On Error GoTo ErrorHandler
430         If lb.Selected(0) = True And (lb.list(LbItem) = "(All)" Or lb.list(LbItem) = "All" _
                Or lb.list(LbItem) = "") Then
440             sc.ClearManualFilter
450         Else
460             sc.VisibleSlicerItemsList = Array("[Range].[Inclusion].&[~~]")
                Dim incl
                Dim x As Long
470             x = 0
480              ReDim incl(50)
490             For LbItem = 1 To lb.ListCount - 1
500                 If lb.Selected(LbItem) = True And IsSlicerItemPresent(sc, lb.list(LbItem)) Then
510                     incl(x) = "[Range].[Inclusion].&[" & lb.list(LbItem) & "]"
520                     x = x + 1
                    End If
530             Next LbItem
540             If x > 0 Then
550                 sc.VisibleSlicerItemsList = incl
                End If
            End If
            Exit Sub
ErrorHandler:
560             Call Module33.LogEvent(Err, "Module37.FillSlicerCacheFromListbox", Erl)
570             Call Module33.ErrorHandler
        End Sub
        
        Function IsSlicerItemPresent(sc As SlicerCache, item As String) As Boolean
             On Error GoTo ErrorHandler
580         IsSlicerItemPresent = False
            Dim SL As SlicerCacheLevel
            Dim sI As SlicerItem
            
590         Set SL = sc.SlicerCacheLevels(1)
            
600         For Each sI In SL.SlicerItems
            
610             If sI.value = item Then
620                 IsSlicerItemPresent = True
                    Exit For
                End If
630         Next
            Exit Function
ErrorHandler:
640             Call Module33.LogEvent(Err, "Module37.IsSlicerItemPresent", Erl)
650             Call Module33.ErrorHandler
        End Function


Attribute VB_Name = "Module38"
Sub cb_RatesUI_Desc_Click()
On Error GoTo ErrorHandler
10        Call Module33.OptimizeCode_Begin
            Dim startTime As Date
20        startTime = Now()
            
30        If ThisWorkbook.sheetExists("Sheet22") Then
40                Call Module5.HideRows(Sheet22, "C", 3, "cb_RatesUI_Desc", "Description")
            End If
            
50        Call Module33.LogTime("chk_RatesUI_Des_Click", startTime, Now())
60        Call Module33.OptimizeCode_End_ExceptCalculation
            Exit Sub
ErrorHandler:
70            Call Module33.LogEvent(Err, "Module38.cb_RatesUI_Desc_Click", Erl)
80            Call Module33.ErrorHandler
End Sub


Sub cb_RatesUI_Age_Click()
On Error GoTo ErrorHandler
90    Call Module33.OptimizeCode_Begin
        Dim startTime As Date
100    startTime = Now()
        
110    If ThisWorkbook.sheetExists("Sheet22") Then
120            Call Module5.HideRows(Sheet22, "C", 3, "cb_RatesUI_Age", "Age")
        End If
        
130    Call Module33.LogTime("cb_RatesUI_Age_Click", startTime, Now())
140    Call Module33.OptimizeCode_End_ExceptCalculation
    Exit Sub
ErrorHandler:
150            Call Module33.LogEvent(Err, "Module38.cb_RatesUI_Age_Click", Erl)
160            Call Module33.ErrorHandler
End Sub

Sub cb_RatesUI_High_Click()
On Error GoTo ErrorHandler
170    Call Module33.OptimizeCode_Begin
        Dim startTime As Date
180    startTime = Now()
        
190    If ThisWorkbook.sheetExists("Sheet22") Then
200            Sheet22.Activate
210            cbChannel = ActiveSheet.Shapes("cb_RatesUI_High").OLEFormat.Object.value
220            If cbChannel <> 1 Then
230                 Sheet22.Cells(8, 15) = "FALSE"
240            ElseIf cbChannel = 1 Then
250                 Sheet22.Cells(8, 15) = "TRUE"
            End If
        End If
260    Call Module33.LogTime("cb_RatesUI_High_Click", startTime, Now())
270    Call Module33.OptimizeCode_End_ExceptCalculation
ErrorHandler:
280            Call Module33.LogEvent(Err, "Module38.cb_RatesUI_High_Click", Erl)
290            Call Module33.ErrorHandler
End Sub


Sub cb_RatesUI_Low_Click()
On Error GoTo ErrorHandler
300    Call Module33.OptimizeCode_Begin
        Dim startTime As Date
310    startTime = Now()
        
320    If ThisWorkbook.sheetExists("Sheet22") Then
330            Sheet22.Activate
340            cbChannel = ActiveSheet.Shapes("cb_RatesUI_Low").OLEFormat.Object.value
350            If cbChannel <> 1 Then
360                 Sheet22.Cells(7, 15) = "FALSE"
370            ElseIf cbChannel = 1 Then
380                 Sheet22.Cells(7, 15) = "TRUE"
            End If
        End If
390    Call Module33.LogTime("cb_RatesUI_Low_Click", startTime, Now())
400    Call Module33.OptimizeCode_End_ExceptCalculation
ErrorHandler:
410            Call Module33.LogEvent(Err, "Module38.cb_RatesUI_Low_Click", Erl)
420            Call Module33.ErrorHandler
End Sub

Attribute VB_Name = "Module39"


Sub AddComment2(o As Range, t As String)
    o.AddComment
    o.Comment.Text Text:=t
End Sub


Sub AddComment(r As String)
On Error GoTo ErrorHandler
    'Dim r As String
    Dim e As String
    'r = "f106"
    Dim o  As Range
    Set o = ActiveWorkbook.Sheets("Rates Detail").Range(r)
    o.ClearComments
    If o = "Closed" Then
        b = Worksheets("RatesDup").Evaluate(r)
        q = Sheet8.Cells(2, 16)
        e = Application.WorksheetFunction.VLookup(b, Sheet14.Range(q), 24, 0)
        'e = "closed1"
        If e <> "" Then
           Call AddComment2(o, e)
        End If
    End If
  Exit Sub
ErrorHandler:
70              Call Module33.LogEvent(Err, "Module39.AddCommente", Erl)
80              'Call Module33.ErrorHandler
End Sub

Sub RateComment()
    Dim isILos As String
    isILos = Sheet8.Cells(36, 3)
    If isILos = "True" Then
        Dim NewColName As String
        Dim startRow As Long
        Dim startCol As Long
        Dim endRow As Long
        Dim endCol As Long
        Dim col As Long
        
        startCol = Sheet8.Cells(3, 16)
        endCol = Sheet8.Cells(3, 17)
        startRow = Sheet8.Cells(4, 16)
        endRow = Sheet8.Cells(4, 17)
        
        For col = startCol To endCol + 1 Step 1
            NewColName = Module30.ColumnNameFromNo(col)
            For row = startRow To endRow + 4 Step 4
                AddComment (NewColName & row)
            Next
        Next
    End If
End Sub


Attribute VB_Name = "Module4"
        Sub cb_Rank_OTA_Click()
        On Error GoTo ErrorHandler
10           Call Module33.OptimizeCode_Begin
            
20          Sheet10.Activate
30          cbChannel = ActiveSheet.Shapes("cb_Rank_OTA").OLEFormat.Object.value

            Dim rCell As Range
            Dim startRow As Long
            Dim lastRow As Long
40          startRow = Sheet8.Cells(1, 21).value
50          lastRow = Sheet8.Cells(2, 21).value
            
60          If startRow > 0 And lastRow > 0 Then
70              Set rCell = Rows(startRow & ":" & lastRow)
80              If cbChannel <> 1 Then
90                  rCell.EntireRow.Hidden = True
100             ElseIf cbChannel = 1 Then
110                 rCell.EntireRow.Hidden = False
                End If
            End If
            Exit Sub
ErrorHandler:
120             Call Module33.LogEvent(Err, "Module4.cb_Rank_OTA_Click", Erl)
130             Call Module33.ErrorHandler
        End Sub

Attribute VB_Name = "Module40"
Sub GetAgeOfData()
Dim todayDatetime As Date
Dim totalrange As Range
Dim sh2 As Worksheet
Dim k As Long
Dim cellValue As String
Dim TimeInSecond As Long
Dim DisplayDateTime As String
Dim DisplayDateTimeFomrated As String
Dim RunningDisplayDateTimeFomrated As Date
Dim OneDaynumber As Long

If WorksheetExists2("Sheet4") Then
Set sh1 = ThisWorkbook.Worksheets("Sheet4")
Set totalrange = sh1.UsedRange
k = totalrange.Rows.Count + totalrange.row - 1
todayDatetime = Now()
For i = 1 To k
    Set myCellSetValue2 = ThisWorkbook.Worksheets("Sheet4").Range("B" + CStr(i))
    RunningDisplayDateTimeFomrated = GetDate(totalrange.Rows(i).Cells(3).value)
    TimeInSecond = CDbl(DateDiff("s", RunningDisplayDateTimeFomrated, todayDatetime))
  
  OneDaynumber = TimeInSecond / 3600
  OneDaynumber = OneDaynumber / 24
    
  If OneDaynumber < 1 Then
   DisplayDateTime = "0 Day(s)"
  Else
    DisplayDateTime = CStr(Round(OneDaynumber)) + " Day(s)"
  End If
  
    myCellSetValue2.Value2 = DisplayDateTime
Next i
End If

End Sub

Function GetDate(Datestring As String)
Dim arrRaw()  As String
Dim arrDate()  As String
Dim arrTime()  As String
Dim NewDate As Date
Dim NewDateTime As Date

arrRaw = Split(Datestring)
arrDate = Split(arrRaw(0), "/")
arrTime = Split(arrRaw(1), ":")

NewDate = DateSerial(CInt(arrDate(2)), CInt(arrDate(0)), CInt(arrDate(1)))
NewDateTime = TimeSerial(CInt(arrTime(0)), CInt(arrTime(1)), CInt(arrTime(2)))
GetDate = FormatDateTime(NewDate, vbShortDate) & " " & FormatDateTime(NewDateTime, vbLongTime)
End Function

Function WorksheetExists2(WorksheetName As String, Optional wb As Workbook) As Boolean
    If wb Is Nothing Then Set wb = ThisWorkbook
    With wb
        On Error Resume Next
        WorksheetExists2 = (.Sheets(WorksheetName).Name = WorksheetName)
        On Error GoTo 0
    End With
End Function


Attribute VB_Name = "Module5"
Sub HideRows(sheet As Worksheet, column As String, columnToCheck As Integer, chk As String, hidestring As String)
        On Error GoTo ErrorHandler
10      Call Module33.OptimizeCode_Begin
          Dim lastRow As Long
          sheet.Activate
20        lastRow = Module33.GetLastFilledRow(sheet, column) + 10
          Dim isHidden As Boolean
          cbChannel = ActiveSheet.Shapes(chk).OLEFormat.Object.value
          If cbChannel <> 1 Then
630                 isHidden = True
640             ElseIf cbChannel = 1 Then
650                 isHidden = False
                End If
          
50          For lCol = 11 To lastRow Step 1
60              If sheet.Cells(lCol, columnToCheck) = hidestring Then
70                  Rows(lCol).Hidden = isHidden
                End If
80          Next
            
90           Call Module33.OptimizeCode_End_ExceptCalculation
           Exit Sub
ErrorHandler:
100             Call Module33.LogEvent(Err, "Module5.HideRows", Erl)
110             Call Module33.ErrorHandler
End Sub
        
        
        Sub HideRows_Old(sheet As Worksheet, column As String, columnToCheck As Integer, chk As MSForms.CheckBox, hidestring As String)
        On Error GoTo ErrorHandler
10      Call Module33.OptimizeCode_Begin
          Dim lastRow As Long
20        lastRow = Module33.GetLastFilledRow(sheet, column)
          Dim isHidden As Boolean
          
30        isHidden = Not chk.value
          
40          sheet.Activate
            
50          For lCol = 11 To lastRow Step 1
60              If sheet.Cells(lCol, columnToCheck) = hidestring Then
70                  Rows(lCol).Hidden = isHidden
                End If
80          Next
            
90           Call Module33.OptimizeCode_End_ExceptCalculation
           Exit Sub
ErrorHandler:
100             Call Module33.LogEvent(Err, "Module5.HideRows_Old", Erl)
110             Call Module33.ErrorHandler
        End Sub
        
        
        Sub FillRatesUIFilters()
120      Sheet22.CB_RatesUI_LOS.Text = Sheet22.CB_RatesUI_LOS.list(0)
130      Sheet22.CB_RatesUI_Product.Text = Sheet22.CB_RatesUI_Product.list(0)
140      Sheet22.CB_RatesUI_Promotion.Text = Sheet22.CB_RatesUI_Promotion.list(0)
150      Sheet22.CB_RatesUI_Qualification.Text = Sheet22.CB_RatesUI_Qualification.list(0)
160      Sheet22.CB_RatesUI_Restriction.Text = Sheet22.CB_RatesUI_Restriction.list(0)
        End Sub

Attribute VB_Name = "Module6"
        Sub dd_Parity_LOS_Change()
        On Error GoTo ErrorHandler
10          Call Module33.OptimizeCode_Begin
            Dim startTime As Date
20          startTime = Now()
                
            Dim SelectedIndex As Long
            Dim LOSValue As String
            
21          SelectedIndex = GetIndexFromSelectedDropdown("ParityLOS")
22          LOSValue = Module8.GetValueFromSelectedIndex("LOS", SelectedIndex)
            
30          If LOSValue <> "" And Sheet19.Cells(14, 1) > "" Then
              
            Dim los As Integer
            Dim days As Integer
            Dim startRow As Long
            Dim totalRows As Long
            Dim totalColumns As Long
            
40          los = LOSValue
50          days = Sheet19.Cells(4, 1)
60          SelectedIndex = SelectedIndex
70          totalColumns = 3 + days
            
            ' Clear already present rows from parity
            
            Dim lastRow As Long
80          lastRow = 8 + Module33.GetLastFilledRow(Sheet12, "A") + 100
            
            Dim cr As Range
90          Sheet12.Select
100         Rows("8:" & lastRow).Select
110         Selection.EntireRow.Hidden = False
120         Selection.Clear
            
            ' copy rows from BRGRawData and paste in Parity sheet
            
130         startRow = Sheet19.Cells(1, SelectedIndex)
140         If SelectedIndex > 1 Then
150             startRow = startRow + 1
            End If
160         totalRows = Sheet19.Cells(1, SelectedIndex + 1) - startRow
            Dim r As Range
            Dim startC As Long
            
170         startC = 1
180         Set r = Sheet19.Cells(startRow, startC)
            
190         Sheet19.Visible = True
200         Sheet19.Activate
210         Sheet19.Select
220         r.Resize(r.Rows.Count + totalRows, r.Columns.Count + totalColumns - 1).Select
            
230         Application.CutCopyMode = False
           
240         Selection.Copy
250         Sheet19.Visible = False
            
260         Sheet12.Select
            
270         Sheet12.Range("A8").Select
280         Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
                :=False, Transpose:=False
290             Selection.PasteSpecial xlPasteFormats
300             Selection.PasteSpecial xlPasteColumnWidths
                
310         Sheet12.Range("A20").Select
            
320         Application.CutCopyMode = False
            
            End If
            
330           Application.CutCopyMode = True
340            Call Module7.Parity2_CheckBox1_Click
350            Call Module7.Parity2_Channel_Click
               
360           Call Module33.LogTime("dd_Parity_LOS_Change", startTime, Now())
370         Call Module33.OptimizeCode_End_ExceptCalculation
            Exit Sub
ErrorHandler:
380             Call Module33.LogEvent(Err, "Module6.dd_Parity_LOS_Change", Erl)
390             Call Module33.ErrorHandler
        End Sub
        
        
        Private Sub CommandButton1_Click()
        On Error GoTo ErrorHandler
400         Call ThisWorkbook.FillParityLOSCB
410      Call cb_Parity_LOS_Change
         Exit Sub
ErrorHandler:
420             Call Module33.LogEvent(Err, "Module6.CommandButton1_Click", Erl)
430             Call Module33.ErrorHandler
        End Sub




Attribute VB_Name = "Module7"
        Sub Parity2_CheckBox1_Click()
10          Call HideParityRows("cb_Parity_Des", "Description")
        End Sub
        
        Sub Parity2_Channel_Click()
20          Call HideParityRows("cb_Parity_Channel", "Meta-Search Channel")
        End Sub
        
        Sub HideParityRows(cbshape As String, hidestring As String)
        On Error GoTo ErrorHandler
30      Call Module33.OptimizeCode_Begin
          Dim lastRow As Long
40        lastRow = Module33.GetLastFilledRow(Sheet12, "A") + 100
          Dim isHidden As Boolean
          Dim cbDiff As Long
          Sheet12.Activate
           
50        cbDiff = ActiveSheet.Shapes(cbshape).OLEFormat.Object.value
           
60          If cbDiff <> 1 Then
70              isHidden = True
80          ElseIf cbDiff = 1 Then
90              isHidden = False
            End If
          
100
            
110         For lCol = 11 To lastRow Step 1
120             If Sheet12.Cells(lCol, 2) = hidestring Then
130                 Rows(lCol).Hidden = isHidden
                    ' set the row height only once
140                 If Sheet8.Cells(1, 60).value <> "1" And isHidden = False Then
150                     Rows(lCol).RowHeight = 96
160                     Sheet8.Cells(1, 60) = 1
                    End If
                End If
170         Next
            
180          Call Module33.OptimizeCode_End_ExceptCalculation
           Exit Sub
ErrorHandler:
190             Call Module33.LogEvent(Err, "Module7.HideParityRows", Erl)
200             Call Module33.ErrorHandler
        End Sub
        
        
        Sub PivotManualUpdate(isManualUpdate As Boolean)
        On Error GoTo ErrorHandler
210     If ThisWorkbook.sheetExists("Sheet3") Then
220         Sheet3.PivotTables("Pivot_RSpread").ManualUpdate = isManualUpdate
            End If
230         If ThisWorkbook.sheetExists("Sheet16") Then
240         Sheet16.PivotTables("Pivot_Rate").ManualUpdate = isManualUpdate
            End If
            Exit Sub
ErrorHandler:
250             Call Module33.LogEvent(Err, "Module7.PivotManualUpdate", Erl)
260             Call Module33.ErrorHandler
        End Sub
        
        Sub UpdateLastPivotSelectedData()
            
        End Sub
        
        Sub UpdatePivotFilters(pt As PivotTable, Sh As Worksheet, _
                restriction As String, qualification As String, _
                los As String, product As String, promotion As String, isCurrent As String)
        On Error GoTo ErrorHandler
        
            ' Copy last selected values to previous row
270         Sh.Cells(1, 6) = Sh.Cells(1, 7).value
280         Sh.Cells(2, 6) = Sh.Cells(2, 7).value
290         Sh.Cells(3, 6) = Sh.Cells(3, 7).value
300         Sh.Cells(4, 6) = Sh.Cells(4, 7).value
310         Sh.Cells(5, 6) = Sh.Cells(5, 7).value
320         Sh.Cells(7, 6) = Sh.Cells(7, 7).value
            
            ' Write new selected values in the sheet
330         Sh.Cells(1, 7) = restriction
340         Sh.Cells(2, 7) = qualification
350         Sh.Cells(3, 7) = promotion
360         Sh.Cells(4, 7) = los
370         Sh.Cells(5, 7) = product
380         Sh.Cells(7, 7) = isCurrent
            
            ' Change only if there is a difference b/w the new and old values
390         Call UpdatePivotSingleFieldIfDiff(Sh, pt.PivotFields("Restriction"), 1)
400         Call UpdatePivotSingleFieldIfDiff(Sh, pt.PivotFields("Qualification"), 2)
410         Call UpdatePivotSingleFieldIfDiff(Sh, pt.PivotFields("Promotion"), 3)
420         Call UpdatePivotSingleFieldIfDiff(Sh, pt.PivotFields("LOS"), 4)
430         Call UpdatePivotSingleFieldIfDiff(Sh, pt.PivotFields("Product"), 5)
440         Call UpdatePivotSingleFieldIfDiff(Sh, pt.PivotFields("IsCurrent"), 7)
            
            Exit Sub
ErrorHandler:
450             Call Module33.LogEvent(Err, "Module7.UpdatePivotFilters", Erl)
460             Call Module33.ErrorHandler
        End Sub
        
     Private Sub UpdatePivotSingleFieldIfDiff(Sh As Worksheet, pf As PivotField, row As Integer)
         On Error GoTo ErrorHandler
480      If Sh.Cells(row, 6).value <> Sh.Cells(row, 7).value Then
490             With pf
500                     .CurrentPage = "~~"
510                     .CurrentPage = Sh.Cells(row, 7).value
                End With
            End If
            Exit Sub
ErrorHandler:
520             Call Module33.LogEvent(Err, "Module7.UpdatePivotSingleFieldIfDiff", Erl)
530             Call Module33.ErrorHandler
        End Sub
        
        Sub UpdatePivotFilterField(pt As PivotTable, key As String, value As String)
        On Error GoTo ErrorHandler
540         With pt
550                 .PivotFields(key).CurrentPage = "~~"
560                 .PivotFields(key).CurrentPage = value
            End With
            Exit Sub
ErrorHandler:
570             Call Module33.LogEvent(Err, "Module7.UpdatePivotFilterField", Erl)
580             Call Module33.ErrorHandler
        End Sub
        
        Sub InitialMacroRunUpdate()
        On Error GoTo ErrorHandler
590         Sheet2.Cells(1, 30) = "1"
600         'Call Sheet2.CommandButton1_Click
610         'Call Module33.OptimizeCode_End
        '    Call Module33.HideFormulas(Sheet5, "Sheet5", Range("D14:L50"))
        '    Call Module33.HideFormulas(Sheet6, "Sheet6", Range("D14:L50"))
            Exit Sub
ErrorHandler:
620             Call Module33.LogEvent(Err, "Module7.InitialMacroRunUpdate", Erl)
630             Call Module33.ErrorHandler
        End Sub
        
        
        Sub UpdatePivotSlicer(screstriction As SlicerCache, scqualification As SlicerCache, _
                sclos As SlicerCache, scproduct As SlicerCache, scpromotion As SlicerCache, scisCurrent As SlicerCache, _
        restriction As String, qualification As String, _
                los As String, product As String, promotion As String, isCurrent As String)
         On Error GoTo ErrorHandler
640           Call UpdateRestrictionPivotSlicer(screstriction, restriction)
650           Call UpdateQualificationPivotSlicer(scqualification, qualification)
660           Call UpdateLOSPivotSlicer(sclos, los)
670           Call UpdateProductPivotSlicer(scproduct, product)
680           Call UpdatePromotionPivotSlicer(scpromotion, promotion)
690           Call UpdateIsCurrentPivotSlicer(scisCurrent, isCurrent)
         Exit Sub
ErrorHandler:
700             Call Module33.LogEvent(Err, "Module7.UpdatePivotSlicer", Erl)
710             Call Module33.ErrorHandler
        End Sub
        
        
        Sub UpdateRestrictionPivotSlicer(sc As SlicerCache, value As String)
            On Error Resume Next
720           If value = "(All)" Or value = "All" Or value = "" Then
730             sc.ClearManualFilter
740           Else
750             sc.VisibleSlicerItemsList = Array("[Range].[Restriction].&[~~]")
760             sc.VisibleSlicerItemsList = Array("[Range].[Restriction].&[" & value & "]")
              End If
        End Sub
        
        Sub UpdateQualificationPivotSlicer(sc As SlicerCache, value As String)
           On Error Resume Next
770           If value = "(All)" Or value = "All" Or value = "" Then
780             sc.ClearManualFilter
790           Else
800             sc.VisibleSlicerItemsList = Array("[Range].[Qualification].&[~~]")
810             sc.VisibleSlicerItemsList = Array("[Range].[Qualification].&[" & value & "]")
              End If
        End Sub
        
        Sub UpdateLOSPivotSlicer(sc As SlicerCache, value As String)
           On Error Resume Next
820           If value = "(All)" Or value = "All" Or value = "" Then
830             sc.ClearManualFilter
840           Else
850             sc.VisibleSlicerItemsList = Array("[Range].[LOS].&[~~]")
860             sc.VisibleSlicerItemsList = Array("[Range].[LOS].&[" & value & "]")
              End If
        End Sub
        
        Sub UpdatePromotionPivotSlicer(sc As SlicerCache, value As String)
          On Error Resume Next
870           If value = "(All)" Or value = "All" Or value = "" Then
880             sc.ClearManualFilter
890           Else
900             sc.VisibleSlicerItemsList = Array("[Range].[Promotion].&[~~]")
910             sc.VisibleSlicerItemsList = Array("[Range].[Promotion].&[" & value & "]")
              End If
        End Sub
        
        Sub UpdateProductPivotSlicer(sc As SlicerCache, value As String)
           On Error Resume Next
920           If value = "(All)" Or value = "All" Or value = "" Then
930             sc.ClearManualFilter
940           Else
950             sc.VisibleSlicerItemsList = Array("[Range].[Product].&[~~]")
960             sc.VisibleSlicerItemsList = Array("[Range].[Product].&[" & value & "]")
              End If
        End Sub
        
        Sub UpdateIsCurrentPivotSlicer(sc As SlicerCache, value As String)
           On Error Resume Next
970           If value = "(All)" Or value = "All" Or value = "" Then
980             sc.ClearManualFilter
990           Else
1000                sc.VisibleSlicerItemsList = Array("[Range].[IsCurrent].&[~~]")
1010                sc.VisibleSlicerItemsList = Array("[Range].[IsCurrent].&[" & value & "]")
              End If
        End Sub


Attribute VB_Name = "Module8"

Public Sub FillListboxFromSheet(sheet As Worksheet, CBFilter As Shape, NamedRange As String, LinkedCell As String, sheetName As String, listboxName As String)
        On Error GoTo ErrorHandler
10    Call Module33.OptimizeCode_Begin
        Dim startTime As Date
20    startTime = Now()
30            Cell = "Sheet3!" & LinkedCell & ThisWorkbook.Settings("FilledCell")
40            LinkCell = "Sheet3!" & LinkedCell & ThisWorkbook.Settings("LinkCell")
            Dim val As String
50        val = Range(Cell)
60        If val = "" Then
70                sheet.Activate
80                CBFilter.Select
90                With Selection
100                .ListFillRange = GetNamedRangeValue(NamedRange)
110                    .LinkedCell = LinkCell
                End With
120                Range(LinkCell) = "1"
130                Range(Cell) = "1"
140                Range("A1").Select
                
150                 With Worksheets(sheetName).ListBoxes(listboxName)
160                    .Selected(1) = True
                 End With
            End If
170    Call Module33.LogTime("FillListboxFromSheet", startTime, Now())
         Exit Sub
ErrorHandler:
180            Call Module33.LogEvent(Err, "Module8.FillListboxFromSheet", Erl)
190            Call Module33.ErrorHandler
        End Sub
        

Public Sub FillDropDownFromSheet(sheet As Worksheet, CBFilter As Shape, NamedRange As String, LinkedCell As String, Optional DefaultCell As String = "1")
        On Error GoTo ErrorHandler
200    Call Module33.OptimizeCode_Begin
        Dim startTime As Date
210    startTime = Now()
220            Cell = "Sheet3!" & LinkedCell & ThisWorkbook.Settings("FilledCell")
230            LinkCell = "Sheet3!" & LinkedCell & ThisWorkbook.Settings("LinkCell")
            Dim val As String
240        val = Range(Cell)
250        If val = "" Then
260                sheet.Activate
270                CBFilter.Select
280                With Selection
290                .ListFillRange = GetNamedRangeValue(NamedRange)
300                    .LinkedCell = LinkCell
                End With
310                Range(LinkCell) = DefaultCell
320                Range(Cell) = DefaultCell
330                Range("A1").Select
            End If
340    Call Module33.LogTime("FillDropDownFromSheet", startTime, Now())
         Exit Sub
ErrorHandler:
350            Call Module33.LogEvent(Err, "Module8.FillDropDownFromSheet", Erl)
360            Call Module33.ErrorHandler
        End Sub


Public Function GetNamedRangeValue(NamedRange As String)
370            GetNamedRangeValue = ActiveWorkbook.Names(NamedRange).RefersTo
End Function

Public Function GetValueFromSelectedDropDown(DropDownKey As String, val As String)
380    GetValueFromSelectedDropDown = GetValueFromSelectedIndex(val, GetIndexFromSelectedDropdown(DropDownKey))
End Function


Public Function GetValueFromSelectedIndex(val As String, index As Long)
    On Error GoTo ErrorHandler
390    Call Module33.OptimizeCode_Begin
    Dim column As String
400    Select Case val
           Case "LOS"
420            column = "A"
430        Case "Guest"
440            column = "B"
450        Case "Restriction"
460            column = "C"
470        Case "Qualification"
480            column = "D"
490        Case "Promotion"
500            column = "E"
510        Case "Product"
520            column = "F"
530        Case "Inclusion"
540            column = "G"
    End Select
550    GetValueFromSelectedIndex = Range("Sheet3!" & column & (index + 2))
         Exit Function
ErrorHandler:
560            Call Module33.LogEvent(Err, "Module8.GetValueFromSelectedIndex", Erl)
570            Call Module33.ErrorHandler
End Function

Public Function GetIndexFromSelectedDropdown(dd As String)
    On Error GoTo ErrorHandler
580    Call Module33.OptimizeCode_Begin
    Dim column As String
590    Select Case dd
            Case "ParityLOS"
610            column = "H"
620        Case "SupplyLOS"
630            column = "I"
640        Case "OverviewLOS"
650            column = "J"
660            Case "RDRestriction"
670            column = "K"
680        Case "RDQualification"
690            column = "L"
700        Case "RDPromotion"
710            column = "M"
720            Case "RDLOS"
730            column = "N"
740        Case "RDProduct"
750            column = "O"
760        Case "RDInclusion"
770            column = "O"
    End Select
780    GetIndexFromSelectedDropdown = Range("Sheet3!" & column & ThisWorkbook.Settings("LinkCell"))
         Exit Function
ErrorHandler:
790            Call Module33.LogEvent(Err, "Module8.GetIndexFromSelectedDropdown", Erl)
800            Call Module33.ErrorHandler
End Function

Attribute VB_Name = "Module9"
        Sub Picture9_Click()
        On Error GoTo ErrorHandler
10      Call Module33.OptimizeCode_Begin
20       ActiveSheet.Shapes("Picture 8").Visible = True
30      ActiveSheet.Shapes("Picture 9").Visible = False
40      ActiveSheet.Shapes("dd_Parity_LOS").Visible = False
        ActiveSheet.Shapes("cb_Parity_Des").Visible = False
        ActiveSheet.Shapes("cb_Parity_Channel").Visible = False
50      Range("A4:A6").EntireRow.Hidden = True
60      Call Module33.OptimizeCode_End_ExceptCalculation
         Exit Sub
ErrorHandler:
70              Call Module33.LogEvent(Err, "Module9.Picture9_Click", Erl)
80              Call Module33.ErrorHandler
        
        End Sub
        
        Sub Picture8_Click()
        On Error GoTo ErrorHandler
90      Call Module33.OptimizeCode_Begin
100      ActiveSheet.Shapes("Picture 9").Visible = True
110     ActiveSheet.Shapes("Picture 8").Visible = False
120     ActiveSheet.Shapes("dd_Parity_LOS").Visible = True
        ActiveSheet.Shapes("cb_Parity_Des").Visible = True
        ActiveSheet.Shapes("cb_Parity_Channel").Visible = True
         
130     Range("A4:A6").EntireRow.Hidden = False
140     Call Module33.OptimizeCode_End_ExceptCalculation
         Exit Sub
ErrorHandler:
150             Call Module33.LogEvent(Err, "Module9.Picture8_Click", Erl)
160             Call Module33.ErrorHandler
        
        End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    'Call Module31.UnFreezePane
End Sub

Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    'Call Module31.UnFreezePane
End Sub
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    'Call Module31.UnFreezePane
End Sub

Sub cb_Parity_LOS_Change()
        On Error GoTo ErrorHandler
10          Call Module33.OptimizeCode_Begin
            Dim startTime As Date
20          startTime = Now()
                
        
30          If Sheet12.cb_Parity_LOS.value <> "" And Sheet19.Cells(14, 1) > "" Then
                
            Dim SelectedIndex As Long
            
            Dim los As Integer
            Dim days As Integer
            Dim startRow As Long
            Dim totalRows As Long
            Dim totalColumns As Long
            
40          los = Sheet12.cb_Parity_LOS.value
50          days = Sheet19.Cells(4, 1)
60          SelectedIndex = Sheet12.cb_Parity_LOS.ListIndex + 1
70          totalColumns = 3 + days
            
            ' Clear already present rows from parity
            
            Dim lastRow As Long
80          lastRow = 8 + Module33.GetLastFilledRow(Sheet12, "A") + 100
            
            Dim cr As Range
90          Sheet12.Select
100         Rows("8:" & lastRow).Select
110         Selection.EntireRow.Hidden = False
120         Selection.Clear
            
            ' copy rows from BRGRawData and paste in Parity sheet
            
130         startRow = Sheet19.Cells(1, SelectedIndex)
140         If SelectedIndex > 1 Then
150             startRow = startRow + 1
            End If
160         totalRows = Sheet19.Cells(1, SelectedIndex + 1) - startRow
            Dim r As Range
            Dim startC As Long
            
170         startC = 1
180         Set r = Sheet19.Cells(startRow, startC)
            
190         Sheet19.Visible = True
200         Sheet19.Activate
210         Sheet19.Select
220         r.Resize(r.Rows.Count + totalRows, r.Columns.Count + totalColumns - 1).Select
            
230         Application.CutCopyMode = False
           
240         Selection.Copy
250         Sheet19.Visible = False
            
260         Sheet12.Select
            
270         Sheet12.Range("A8").Select
280         Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
                :=False, Transpose:=False
290             Selection.PasteSpecial xlPasteFormats
300             Selection.PasteSpecial xlPasteColumnWidths
                
310         Sheet12.Range("A20").Select
            
320         Application.CutCopyMode = False
            
            End If
            
330           Application.CutCopyMode = True
340            Call Module7.Parity2_CheckBox1_Click
350            Call Module7.Parity2_Channel_Click
               
360           Call Module33.LogTime("cb_Parity_LOS_Change", startTime, Now())
370         Call Module33.OptimizeCode_End_ExceptCalculation
            Exit Sub
ErrorHandler:
380             Call Module33.LogEvent(Err, "Sheet12.cb_Parity_LOS_Change", Erl)
390             Call Module33.ErrorHandler
        End Sub
        
        
        Private Sub CommandButton1_Click()
        On Error GoTo ErrorHandler
400         Call ThisWorkbook.FillParityLOSCB
410      Call cb_Parity_LOS_Change
         Exit Sub
ErrorHandler:
420             Call Module33.LogEvent(Err, "Sheet12.CommandButton1_Click", Erl)
430             Call Module33.ErrorHandler
        End Sub


Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub CommandButton1_Click()
10    Call Module26.FillRateFilters
20    Call Module26.FillRateSpreadFilters
End Sub
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    'Call Module31.UnFreezePane
End Sub
        
        Sub cb_Overvw_LOS_Change()
        On Error GoTo ErrorHandler
10          Call Module33.OptimizeCode_Begin
            Dim startTime As Date
20          startTime = Now()
        
30          If Sheet4.cb_Overvw_LOS.value <> "" Then
                
            Dim los As Integer
            Dim days As Integer
            Dim comps As Integer
            Dim SelectedIndex As Long
            
40          SelectedIndex = Sheet4.cb_Overvw_LOS.ListIndex + 1
50          los = Sheet4.cb_Overvw_LOS.value
60          days = Sheet8.Cells(50, 1)
70          comps = Sheet8.Cells(53, 1)
            
80          If los > 0 And days > 0 And comps > 0 Then
            Dim r As Range
            Dim startC As Long
            
90          startC = (days * (SelectedIndex - 1)) + 3
100         Set r = Sheet8.Cells(62, startC)
            
110         Sheet8.Visible = True
120         Sheet8.Activate
130         Sheet8.Select
140         r.Resize(comps * 3, (r.Columns.Count + days - 1)).Select
            
150         Application.CutCopyMode = False
           
160         Selection.Copy
170         Sheet8.Visible = False
            
180         Sheet4.Select
190         Sheet4.Range("C11").Select
200         Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
                :=False, Transpose:=False
210             Selection.PasteSpecial xlPasteFormats
220             Selection.PasteSpecial xlPasteColumnWidths
230             Selection.PasteSpecial xlPasteComments
                
240         Sheet4.Range("B9").Select
            
250         Application.CutCopyMode = False
            
260          Call Module23.Overview_CB_Channel_Click
270          Call Module23.Overview_CB_Diff_Click
              
            End If
            
             End If
280         Call Module33.LogTime("CB_Overvw_LOS_Change", startTime, Now())
290         Call Module33.OptimizeCode_End_ExceptCalculation
        Exit Sub
ErrorHandler:
300             Call Module33.LogEvent(Err, "Sheet4.cb_Overvw_LOS_Change", Erl)
310             Call Module33.ErrorHandler
        End Sub


Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    'Call Module31.UnFreezePane
End Sub
        
        
        
        Private Sub CB_Rates_LOS_Change()
        On Error GoTo ErrorHandler
10          Call Module36.SetRateControls
                Exit Sub
ErrorHandler:
20              Call Module33.LogEvent(Err, "Sheet5.CB_Rates_LOS_Change", Erl)
30              Call Module33.ErrorHandler
        End Sub
        
        Private Sub CB_Rates_Product_Change()
        On Error GoTo ErrorHandler
40          Call Module36.SetRateControls
                Exit Sub
ErrorHandler:
50              Call Module33.LogEvent(Err, "Sheet5.CB_Rates_Product_Change", Erl)
60              Call Module33.ErrorHandler
        End Sub
        
        Private Sub CB_Rates_Promotion_Change()
        On Error GoTo ErrorHandler
70          Call Module36.SetRateControls
                Exit Sub
ErrorHandler:
80              Call Module33.LogEvent(Err, "Sheet5.CB_Rates_Promotion_Change", Erl)
90              Call Module33.ErrorHandler
        End Sub
        
        Private Sub CB_Rates_Qualification_Change()
        On Error GoTo ErrorHandler
100         Call Module36.SetRateControls
                Exit Sub
ErrorHandler:
110             Call Module33.LogEvent(Err, "Sheet5.CB_Rates_Qualification_Change", Erl)
120             Call Module33.ErrorHandler
        End Sub
        
        Private Sub CB_Rates_Restriction_Change()
        On Error GoTo ErrorHandler
130         Call Module36.SetRateControls
                Exit Sub
ErrorHandler:
140             Call Module33.LogEvent(Err, "Sheet5.CB_Rates_Restriction_Change", Erl)
150             Call Module33.ErrorHandler
        End Sub
        
        
        
        Sub chk_Rates_Age_Click()
        On Error GoTo ErrorHandler
160     Call Module33.OptimizeCode_Begin
        Dim startTime As Date
170     startTime = Now()
        
180         If ThisWorkbook.sheetExists("Sheet5") Then
            Dim comps As Integer
            Dim channels As Integer
            
190         channels = Sheet15.Cells(7, 1)
200         comps = Sheet15.Cells(6, 1)
        
210         cbChannel = Sheet5.chk_Rates_Age.value
220         Sheet5.Activate
230         For lCol = 0 To comps * channels * 4 Step 4
240             Set rCell = Range("C17").Offset(lCol, 0)
250             If cbChannel = False Then
260                 Rows(rCell.row).Hidden = True
270             ElseIf cbChannel = True Then
280                 Rows(rCell.row).Hidden = False
                End If
290         Next
300         Call CallToFillRateFilters
            
        End If
        
310     Call Module33.LogTime("chk_Rates_Age_Click", startTime, Now())
320     Call Module33.OptimizeCode_End_ExceptCalculation
            Exit Sub
ErrorHandler:
330             Call Module33.LogEvent(Err, "Sheet5.chk_Rates_Age_Click", Erl)
340             Call Module33.ErrorHandler
        End Sub
        
        Sub chk_Rates_Des_Click()
         On Error GoTo ErrorHandler
350         Call Module33.OptimizeCode_Begin
            Dim startTime As Date
360         startTime = Now()
            
370         If ThisWorkbook.sheetExists("Sheet5") Then
            Dim comps As Integer
            Dim channels As Integer
            
380         channels = Sheet15.Cells(7, 1)
390         comps = Sheet15.Cells(6, 1)
        
400         cbChannel = Sheet5.chk_Rates_Des.value
410         Sheet5.Activate
420         For lCol = 0 To comps * channels * 4 Step 4
430             Set rCell = Range("C16").Offset(lCol, 0)
440             If cbChannel = False Then
450                 Rows(rCell.row).Hidden = True
460             ElseIf cbChannel = True Then
470                 Rows(rCell.row).Hidden = False
                End If
480         Next
            End If
            
490         Call Module33.LogTime("chk_Rates_Des_Click", startTime, Now())
500         Call Module33.OptimizeCode_End_ExceptCalculation
            Exit Sub
ErrorHandler:
510             Call Module33.LogEvent(Err, "Sheet5.chk_Rates_Age_Click", Erl)
520             Call Module33.ErrorHandler
        End Sub
        
        
         Sub Chk_Rates_Diff_Click()
         On Error GoTo ErrorHandler
530      Call Module33.OptimizeCode_Begin
        Dim startTime As Date
540     startTime = Now()
        
550      If ThisWorkbook.sheetExists("Sheet5") Then
            Dim comps As Integer
            Dim channels As Integer
            
560         channels = Sheet15.Cells(7, 1)
570         comps = Sheet15.Cells(6, 1)
        
580         cbChannel = Sheet5.Chk_Rates_Diff.value
590         Sheet5.Activate
600         For lCol = 0 To comps * channels * 4 Step 4
610             Set rCell = Range("C15").Offset(lCol, 0)
620             If cbChannel = False Then
630                 Rows(rCell.row).Hidden = True
640             ElseIf cbChannel = True Then
650                 Rows(rCell.row).Hidden = False
                End If
660         Next
            End If
        
670     Call Module33.LogTime("Chk_Rates_Diff_Click", startTime, Now())
680     Call Module33.OptimizeCode_End_ExceptCalculation
        Exit Sub
ErrorHandler:
690             Call Module33.LogEvent(Err, "Sheet5.Chk_Rates_Diff_Click", Erl)
700             Call Module33.ErrorHandler
        End Sub
        
        Private Sub CommandButton1_Click()
        On Error GoTo ErrorHandler
710         Call Module26.FillRateFilters
720         Call Module26.FillRateSpreadFilters
            Exit Sub
ErrorHandler:
730             Call Module33.LogEvent(Err, "Sheet5.CommandButton1_Click", Erl)
740             Call Module33.ErrorHandler
        End Sub
        
        Private Sub lb_Rates_Inclusion_Change()
750        Call Module1.UpdateListboxSheet(Sheet5.lb_Rates_Inclusion, 8)
        End Sub
        


Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    'Call Module31.UnFreezePane
End Sub
        
        Sub CB_Supply_LOS_Change()
        On Error GoTo ErrorHandler
10          Call Module33.OptimizeCode_Begin
            Dim startTime As Date
20          startTime = Now()
                
        
30          If Sheet9.CB_Supply_LOS.value <> "" Then
                
            Dim los As Integer
            Dim days As Integer
40          los = Sheet9.CB_Supply_LOS.value
50          days = Sheet1.Cells(4, 1)
            
            If los > 0 And days > 0 Then
            Dim r As Range
            Dim startC As Long
            Dim SelectedIndex As Long
            
60          SelectedIndex = Sheet9.CB_Supply_LOS.ListIndex + 1
            
70          startC = (days * (SelectedIndex - 1)) + 1
80          Set r = Sheet1.Cells(11, startC)
            
90          Sheet1.Visible = True
100         Sheet1.Activate
110         Sheet1.Select
120         r.Resize(r.Rows.Count + 9, r.Columns.Count + days - 1).Select
          
130         Selection.Copy
140         Sheet1.Visible = False
            
150         Sheet9.Select
160         Sheet9.Range("B8").Select
170         Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
                :=False, Transpose:=False
180             Selection.PasteSpecial xlPasteFormats
190             Selection.PasteSpecial xlPasteColumnWidths
200             Selection.PasteSpecial xlPasteComments
                
210         Sheet9.Range("A8").Select
            
220         Application.CutCopyMode = False
            End If
            End If
              
230         Call Module33.LogTime("CB_Supply_LOS_Change", startTime, Now())
240         Call Module33.OptimizeCode_End_ExceptCalculation
        Exit Sub
ErrorHandler:
250             Sheet1.Visible = False
260             Call Module33.LogEvent(Err, "Sheet9.CB_Supply_LOS_Change", Erl)
270             Call Module33.ErrorHandler
        End Sub
        
        Private Sub CommandButton1_Click()
        On Error GoTo ErrorHandler
280        Call ThisWorkbook.FillSupplyLOSCB
           Exit Sub
ErrorHandler:
290             Call Module33.LogEvent(Err, "Sheet9.CommandButton1_Click", Erl)
300             Call Module33.ErrorHandler
        End Sub


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' v6.0 - 25072018 - 1621IST

Dim CalculationSetting As Integer
Dim ScreenUpdating As Boolean
Dim DisplayStatusBar  As Boolean
Dim EnableEvents  As Boolean

Private Sub Workbook_BeforeClose(Cancel As Boolean)
        On Error GoTo ErrorHandler
        Application.Calculation = xlCalculationAutomatic
        'Call LogEventTest
        ' Restore Client Settings
10      'Application.Calculation = CalculationSetting
20      'Application.ScreenUpdating = ScreenUpdating
30      'Application.DisplayStatusBar = DisplayStatusBar
40      'Application.EnableEvents = EnableEvents
            Exit Sub
ErrorHandler:
50          Call Module33.LogEvent(Err, "ThisWorkbook.Workbook_BeforeClose", Erl)
60          Call Module33.ErrorHandler
End Sub

Private Sub LogEventTest()
    On Error GoTo ErrorHandler
10    Dim t As Integer
20      t = 7 / 0
ErrorHandler:
50          Call Module33.LogEvent(Err, "ThisWorkbook.TestLog", Erl)
 End Sub
 
Private Sub Workbook_Open()
        On Error GoTo ErrorHandler
        
        ' Store Client Settings
70      CalculationSetting = Application.Calculation
80      ScreenUpdating = Application.ScreenUpdating
90      DisplayStatusBar = Application.DisplayStatusBar
100      EnableEvents = Application.EnableEvents
        
            'Sheet2.CommandButton1_Click
110    Application.Calculation = xlCalculationManual
111         Call Module31.FreezePane
        '    Sheet1.Visible = xlSheetHidden
        '    Sheet8.Visible = xlSheetHidden
120     If Sheet2.Cells(1, 30) = "1" Then
130         Call Module33.OptimizeCode_End_ExceptCalculation
                End
            End If
140     Call Module32.RunInitialMacros
            Exit Sub
ErrorHandler:
150         Call Module33.LogEvent(Err, "ThisWorkbook.Workbook_Open", Erl)
160         Call Module33.ErrorHandler
        End Sub
        
        Sub FillSupplyLOSCB()
            On Error GoTo ErrorHandler
            Dim startTime As Date
170     startTime = Now()

180         If ThisWorkbook.sheetExists("Sheet9") And Range("Sheet3!A3") > "" Then
         'Call FillComboFromSheet(Sheet9.CB_Supply_LOS, "listLOS1")
190          Call Module8.FillDropDownFromSheet(Sheet9, Sheet9.Shapes("dd_Supply_LOS"), "listLOS1", ThisWorkbook.Settings("SupplyLOS"))
        '    Dim val As String
        '    val = Sheet1.Cells(5, 1)
        '    If val > "" Then
        '        Sheet9.CB_Supply_LOS.Clear
        '        Sheet9.CB_Supply_LOS.List = Split(val, ",")
        '        Sheet9.CB_Supply_LOS.Text = Sheet9.CB_Supply_LOS.List(0)
        '    End If
        End If
200      Call Module33.LogTime("FillSupplyLOSCB", startTime, Now())
            Exit Sub
ErrorHandler:
210          Call Module33.LogEvent(Err, "ThisWorkbook.FillSupplyLOSCB", Erl)
220          Call Module33.ErrorHandler
        End Sub
        
        Sub FillOverviewLOSCB()
             On Error GoTo ErrorHandler
            Dim startTime As Date
230      startTime = Now()
240          If ThisWorkbook.sheetExists("Sheet4") And Range("Sheet3!A3") > "" Then
            
250      Call Module8.FillDropDownFromSheet(Sheet4, Sheet4.Shapes("dd_Overvw_LOS"), "listLOS1", ThisWorkbook.Settings("OverviewLOS"))
        'Call FillComboFromSheet(Sheet4.cb_Overvw_LOS, "listLOS1")
            
        '    Dim val As String
        '    val = Sheet4.cb_Overvw_LOS.value
        '    If val = "" Then
        '        Sheet4.cb_Overvw_LOS.ListFillRange = ""
        '        Sheet4.cb_Overvw_LOS.ListFillRange = "ListLOS"
        '        Sheet4.cb_Overvw_LOS.Text = Sheet4.cb_Overvw_LOS.List(0)
        '    End If
            
            Dim val2 As String
260          val2 = Sheet4.Cells(10, 1)
270          If val2 = "" Then
280              Call ThisWorkbook.FillOverviewStaticData
            End If
                
        '    Dim val As String
        '    val = Sheet8.Cells(51, 1)
        '    If val > "" Then
        '        Sheet4.cb_Overvw_LOS.Clear
        '        Sheet4.cb_Overvw_LOS.List = Split(val, ",")
        '        Sheet4.cb_Overvw_LOS.Text = Sheet4.cb_Overvw_LOS.List(0)
        '
        '        Dim val2 As String
        '        val2 = Sheet4.Cells(10, 1)
        '        If val2 = "" Then
        '            Call ThisWorkbook.FillOverviewStaticData
        '        End If
        '    End If
            End If
290      Call Module33.LogTime("FillOverviewLOSCB", startTime, Now())
            Exit Sub
ErrorHandler:
300          Call Module33.LogEvent(Err, "ThisWorkbook.FillOverviewLOSCB", Erl)
310          Call Module33.ErrorHandler
        End Sub
        
        Sub FillParityLOSCB()
            On Error GoTo ErrorHandler
            Dim startTime As Date
320      startTime = Now()
            
330      If ThisWorkbook.sheetExists("Sheet12") And Range("Sheet3!A3") > "" Then
            'Call FillComboFromSheet(Sheet12.cb_Parity_LOS, "listLOS1")
        
340      Call Module8.FillDropDownFromSheet(Sheet12, Sheet12.Shapes("dd_Parity_LOS"), "listLOS1", ThisWorkbook.Settings("ParityLOS"))
                
        '        Dim val As String
        '        val = Sheet19.Cells(5, 1)
        '        If val > "" Then
        '            Sheet12.cb_Parity_LOS.Clear
        '            Sheet12.cb_Parity_LOS.List = Split(val, ",")
        '            Sheet12.cb_Parity_LOS.Text = Sheet12.cb_Parity_LOS.List(0)
        '        End If
            End If
            
350      Call Module33.LogTime("FillParityLOSCB", startTime, Now())
            Exit Sub
ErrorHandler:
360          Call Module33.LogEvent(Err, "ThisWorkbook.FillParityLOSCB", Erl)
370          Call Module33.ErrorHandler
        End Sub
        
        Sub FillOverviewStaticData()
            On Error GoTo ErrorHandler
            Dim startTime As Date
380      startTime = Now()
        
            Dim comps As Integer
            Dim los As Integer
            Dim days As Integer
            
390      comps = IIf(Sheet8.Cells(53, 1) > "", Sheet8.Cells(53, 1), 0)
        'los = IIf(Sheet4.cb_Overvw_LOS.value > "", Sheet4.cb_Overvw_LOS.value, 0)
400      days = IIf(Sheet8.Cells(50, 1) > "", Sheet8.Cells(50, 1), 0)
            
410      If comps > 0 And days > 0 Then
             Dim r As Range
             
             ' Copying Column Headings
420       Set r = Sheet8.Cells(61, 1)
             
430       Sheet8.Visible = True
440       Sheet8.Activate
450       Sheet8.Select
460       r.Resize(, (r.Columns.Count + days + 1)).Select
             
470       Application.CutCopyMode = False
            
480       Selection.Copy
490       Sheet8.Visible = False
             
500       Sheet4.Select
             
510       With Range("A10")
520          .PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
                    :=False, Transpose:=False
530              .PasteSpecial xlPasteFormats
540                      .PasteSpecial xlPasteColumnWidths
550                      .PasteSpecial xlPasteComments
                 End With
                 
560       Sheet4.Range("A8").Select
             
             ' Copying Row Headings
570       Set r = Sheet8.Cells(62, 1)
             
580       Sheet8.Visible = True
590       Sheet8.Activate
600       Sheet8.Select
610       r.Resize(r.Rows.Count + comps * 3, (r.Columns.Count + 1)).Select
             
620       Application.CutCopyMode = False
            
630       Selection.Copy
640       Sheet8.Visible = False
             
650       Sheet4.Select
660       Sheet4.Range("A11").Select
670       Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
                 :=False, Transpose:=False
680           Selection.PasteSpecial xlPasteFormats
690           Selection.PasteSpecial xlPasteColumnWidths
700           Selection.PasteSpecial xlPasteComments
                 
710       Sheet4.Range("A10").Select
             
             
720       Application.CutCopyMode = False
            
            End If
            
730      Call Module33.LogTime("FillOverviewStaticData", startTime, Now())
            Exit Sub
ErrorHandler:
740          Call Module33.LogEvent(Err, "ThisWorkbook.FillOverviewStaticData", Erl)
750          Call Module33.ErrorHandler
        End Sub
        
        Function sheetExists(sheetToFind As String) As Boolean
760      sheetExists = False
770      For Each sheet In Worksheets
780          If sheetToFind = sheet.CodeName Then
790              sheetExists = True
                    Exit Function
                End If
800      Next sheet
        End Function
        
        
        Public Function Settings(key As String)
        On Error GoTo ErrorHandler
810  Select Case key
          Case "ParityLOS": Settings = "H"
830      Case "SupplyLOS": Settings = "I"
840      Case "OverviewLOS": Settings = "J"
850      Case "RDRestriction": Settings = "K"
860      Case "RDQualification": Settings = "L"
870      Case "RDPromotion": Settings = "M"
880      Case "RDLOS": Settings = "N"
890      Case "RDProduct": Settings = "O"
900      Case "RDInclusion": Settings = "P"
910      Case "LinkCell": Settings = 39
920      Case "FilledCell": Settings = 40
    End Select
            Exit Function
ErrorHandler:
930          Call Module33.LogEvent(Err, "ThisWorkbook.Settings", Erl)
940          Call Module33.ErrorHandler
End Function









' InQuest injected base64 decoded content
' .+-E
' )eJX
' V+"nW
' x%xX

INQUEST-PP=macro
