Attribute VB_Name = "ChangeEvent"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Rem **********************************************************
Rem **      Copyright (c) by Hausmann & Wynen DV GmbH       **
Rem **********************************************************

Private m_cellType As AufmassCellType
Private m_oldCell As Range
Private m_newCell As Range
Private m_changeRelations() As ChangeRelation
Private m_hasChangeRelations As Boolean
Private m_blattID As String

Public Sub setChangeEvent(cellType As AufmassCellType, ByVal oldCell As Range, ByVal newCell As Range, blattID As String)
  m_cellType = cellType
  Set m_oldCell = oldCell
  Set m_newCell = newCell
  m_blattID = blattID
End Sub

Public Sub addChangeRelation(ByVal ChangeRelation As ChangeRelation)
  Dim newSize As Integer
  If m_hasChangeRelations = True Then
    newSize = UBound(m_changeRelations) + 1
  Else
    newSize = 1
  End If
  
  ReDim Preserve m_changeRelations(newSize)
  Set m_changeRelations(newSize - 1) = ChangeRelation
  m_hasChangeRelations = True
End Sub

Public Function getCellType() As AufmassCellType
  getCellType = m_cellType
End Function

Public Function getOldCell() As Range
  Set getOldCell = m_oldCell
End Function

Public Function getNewCell() As Range
  Set getNewCell = m_newCell
End Function

Public Function getChangeRelation(index As Integer) As ChangeRelation
  Set getChangeRelation = m_changeRelations(index)
End Function

Public Function nChangeRelations() As Integer
  If m_hasChangeRelations = True Then
    nChangeRelations = UBound(m_changeRelations)
  Else
    nChangeRelations = 0
  End If
End Function

Public Function getBlattID() As Long
  getBlattID = m_blattID
End Function

Private Sub Class_Initialize()
  m_hasChangeRelations = False
End Sub

Private Sub Class_Terminate()
  If m_hasChangeRelations = True Then
    Erase m_changeRelations
    m_hasChangeRelations = False
  End If
End Sub

Attribute VB_Name = "ChangeRelation"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Rem **********************************************************
Rem **      Copyright (c) by Hausmann & Wynen DV GmbH       **
Rem **********************************************************

Private m_cellType1 As AufmassCellType
Private m_cellType2 As AufmassCellType
Private m_cellType3 As AufmassCellType

Private m_cell1 As Range
Private m_cell2 As Range
Private m_cell3 As Range

Public Sub setCell1(cellType As AufmassCellType, ByVal cell As Range)
  m_cellType1 = cellType
  Set m_cell1 = cell
End Sub

Public Sub setCell2(cellType As AufmassCellType, ByVal cell As Range)
  m_cellType2 = cellType
  Set m_cell2 = cell
End Sub

Public Sub setCell3(cellType As AufmassCellType, ByVal cell As Range)
  m_cellType3 = cellType
  Set m_cell3 = cell
End Sub

Public Function getCellType1() As AufmassCellType
  getCellType1 = m_cellType1
End Function

Public Function getCellType2() As AufmassCellType
  getCellType2 = m_cellType2
End Function

Public Function getCellType3() As AufmassCellType
  getCellType3 = m_cellType3
End Function

Public Function getCell1() As Range
  Set getCell1 = m_cell1
End Function

Public Function getCell2() As Range
  Set getCell2 = m_cell2
End Function

Public Function getCell3() As Range
  Set getCell3 = m_cell3
End Function

Public Function getCellForType(AufmassCellType As AufmassCellType) As Range
  If m_cellType1 = AufmassCellType Then
    Set getCellForType = m_cell1
  Else
    If m_cellType2 = AufmassCellType Then
      Set getCellForType = m_cell2
    Else
      If m_cellType3 = AufmassCellType Then
        Set getCellForType = m_cell3
      Else
        Set getCellForType = Nothing
      End If
    End If
  End If
  
End Function

Private Sub Class_Initialize()
  m_cellType1 = AufmassCellType.ACT_None
  m_cellType2 = AufmassCellType.ACT_None
  m_cellType2 = AufmassCellType.ACT_None
  Set m_cell1 = Nothing
  Set m_cell2 = Nothing
  Set m_cell3 = Nothing
End Sub

Attribute VB_Name = "CopyDialog"
Rem **********************************************************
Rem **      Copyright (c) by Hausmann & Wynen DV GmbH       **
Rem **********************************************************

Option Explicit

Public Go4It As Boolean
Public sSourceBlattNr As String
Public sTargetFromBlattNr As String
Public sTargetToBlattNr As String
Public bCopyRaumStromkreis As Boolean
Public bCopyPositionen As Boolean
Public bCopyMengen As Boolean

Public Sub CheckAndCreateCopyDialog()
  Dim bCreate As Boolean
  bCreate = True

  Dim vbComp As VBComponent
  For Each vbComp In ThisWorkbook.VBProject.VBComponents
    If vbComp.Name = "TheMightyCopyDialog" Then
      bCreate = False
      Exit For
    End If
  Next vbComp

  If bCreate = True Then
    Dim frmCopy As Object
    ' -- Dialog erstellen
    Set frmCopy = ThisWorkbook.VBProject.VBComponents.add(vbext_ct_MSForm)
      With frmCopy
      .Properties("Caption") = "Druckbl|fffd|tter kopieren"
      .Properties("Width") = 258
      .Properties("Height") = 228
      .Properties("Name") = "TheMightyCopyDialog"
    End With

    ' -- Label "Was soll kopiert werden?"
    Dim labelWhatToCopy As MSForms.Label
      Set labelWhatToCopy = frmCopy.Designer.Controls.add("forms.Label.1")
      With labelWhatToCopy
      .Caption = "Was soll kopiert werden?"
      .Left = 12
      .Top = 12
      .Height = 12
      .Width = 102
    End With

    ' -- Checkbox "R|fffd|ume / Stromkreise"
    Dim checkRaumStromkreis As MSForms.CheckBox
      Set checkRaumStromkreis = frmCopy.Designer.Controls.add("forms.CheckBox.1")
      With checkRaumStromkreis
      .Caption = "R|fffd|ume / Stromkreise"
      .Left = 18
      .Top = 30
      .Height = 18
      .Width = 96.75
      .Name = "checkRaumStromkreis"
    End With

    ' -- Checkbox "Positionen'
    Dim checkPositionen As MSForms.CheckBox
      Set checkPositionen = frmCopy.Designer.Controls.add("forms.CheckBox.1")
      With checkPositionen
      .Caption = "Positionen"
      .Left = 114
      .Top = 30
      .Height = 18
      .Width = 61.5
      .Name = "checkPositionen"
    End With

    ' -- Checkbox "Mengen"
    Dim checkMengen As MSForms.CheckBox
      Set checkMengen = frmCopy.Designer.Controls.add("forms.CheckBox.1")
      With checkMengen
      .Caption = "Mengen"
      .Left = 180
      .Top = 30
      .Height = 18
      .Width = 55.55
      .Name = "checkMengen"
    End With

    ' -- Label "Von welchem Arbeitsblatt?"
    Dim labelSource As MSForms.Label
      Set labelSource = frmCopy.Designer.Controls.add("forms.Label.1")
      With labelSource
      .Caption = "Von welchem Arbeitsblatt?"
      .Height = 12
      .Left = 12
      .Top = 66
      .Width = 114
    End With

    ' -- Textbox zur Eingabe des Quell-Druckblatts
    Dim tbSource As MSForms.TextBox
      Set tbSource = frmCopy.Designer.Controls.add("forms.TextBox.1")
      With tbSource
      .Height = 15.75
      .Left = 18
      .Top = 84
      .Width = 36
      .TextAlign = fmTextAlignRight
      .Name = "tbSource"
      .Value = CStr(Recalc.GetBlattNo(True))
    End With

    ' -- Label "Auf welches Arbeitsblatt oder Arbeitsbl|fffd|tter?"
    Dim labelTarget As MSForms.Label
      Set labelTarget = frmCopy.Designer.Controls.add("forms.Label.1")
      With labelTarget
      .Caption = "Auf welches Arbeitsblatt oder Arbeitsbl|fffd|tter?"
      .Height = 15.75
      .Left = 18
      .Top = 120
      .Width = 210
    End With

    ' -- Textbox f|fffd|r Ziel-Druckblatt (von)
    Dim tbTargetFrom As MSForms.TextBox
      Set tbTargetFrom = frmCopy.Designer.Controls.add("forms.TextBox.1")
      With tbTargetFrom
      .Height = 15.75
      .Left = 18
      .Top = 138
      .Width = 36
      .TextAlign = fmTextAlignRight
      .Name = "tbTargetFrom"
      .Value = tbSource.Value
    End With

    ' -- Label "bis"
    Dim labelBis As MSForms.Label
      Set labelBis = frmCopy.Designer.Controls.add("forms.Label.1")
      With labelBis
      .Caption = "bis"
      .Height = 12
      .Left = 66
      .Top = 140
      .Width = 12
    End With

    ' -- Textbox f|fffd|r Ziel-Druckblatt (bis)
    Dim tbTargetTo As MSForms.TextBox
      Set tbTargetTo = frmCopy.Designer.Controls.add("forms.TextBox.1")
      With tbTargetTo
      .Height = 15.75
      .Left = 90
      .Top = 138
      .Width = 36
      .TextAlign = fmTextAlignRight
      .Name = "tbTargetTo"
      .Value = CStr(Recalc.GetBlattNo(False))
    End With

    ' -- Kopieren-Knopf
    Dim cbKopieren As MSForms.CommandButton
      Set cbKopieren = frmCopy.Designer.Controls.add("forms.CommandButton.1")
      With cbKopieren
      .Caption = "Kopieren"
      .Height = 24
      .Left = 90
      .Top = 168
      .Width = 72
      .Name = "cbKopieren"
    End With

    ' -- Abbrechen-Knopf
    Dim cbAbbrechen As MSForms.CommandButton
      Set cbAbbrechen = frmCopy.Designer.Controls.add("forms.CommandButton.1")
      With cbAbbrechen
      .Caption = "Abbrechen"
      .Height = 24
      .Left = 168
      .Top = 168
      .Width = 72
      .Name = "cbAbbrechen"
    End With

    Dim iCounter As Integer
    With frmCopy.CodeModule
      iCounter = .CountOfLines
          .InsertLines iCounter + 1, "Option Explicit"
          .InsertLines iCounter + 2, "Sub cbAbbrechen_Click()"
          .InsertLines iCounter + 3, "  CopyDialog.Go4It = false"
          .InsertLines iCounter + 4, "  Hide"
          .InsertLines iCounter + 5, "End Sub"
          .InsertLines iCounter + 6, "Sub cbKopieren_Click()"
          .InsertLines iCounter + 7, "  If CopyDialog.IsValid(checkRaumStromkreis, checkPositionen, _"
          .InsertLines iCounter + 8, "                        checkMengen, tbSource, tbTargetFrom, _"
          .InsertLines iCounter + 9, "                        tbTargetTo) = True Then"
          .InsertLines iCounter + 10, "    CopyDialog.Go4It = true"
          .InsertLines iCounter + 11, "    CopyDialog.sSourceBlattNr = tbSource.Value"
          .InsertLines iCounter + 12, "    CopyDialog.sTargetFromBlattNr = tbTargetFrom.Value"
          .InsertLines iCounter + 13, "    CopyDialog.sTargetToBlattNr = tbTargetTo.Value"
          .InsertLines iCounter + 14, "    CopyDialog.bCopyRaumStromkreis = checkRaumStromkreis.Value"
          .InsertLines iCounter + 15, "    CopyDialog.bCopyPositionen = checkPositionen.Value"
          .InsertLines iCounter + 16, "    CopyDialog.bCopyMengen = checkMengen.Value"
          .InsertLines iCounter + 17, "    Hide"
          .InsertLines iCounter + 18, "  End If"
          .InsertLines iCounter + 19, "End Sub"
    End With

    VBA.UserForms.add ("TheMightyCopyDialog")
  End If
End Sub

Public Sub CopyWithDialog()

  VBAProject.TheMightyCopyDialog.Show

  If CopyDialog.Go4It = True Then
    Recalc.CopyBlatt2Blatt CopyDialog.sSourceBlattNr, CopyDialog.sTargetFromBlattNr, CopyDialog.sTargetToBlattNr, _
                           CopyDialog.bCopyRaumStromkreis, CopyDialog.bCopyPositionen, CopyDialog.bCopyMengen
  End If

End Sub

Function IsValid(checkRaumStromkreis As MSForms.CheckBox, _
                 checkPositionen As MSForms.CheckBox, _
                 checkMengen As MSForms.CheckBox, _
                 tbSource As MSForms.TextBox, _
                 tbTargetFrom As MSForms.TextBox, _
                 tbTargetTo As MSForms.TextBox) As Boolean

  Dim ErrorString As String
  Dim CopyEntityOk As Boolean
  Dim SourceOk As Boolean
  Dim TargetOk As Boolean
  ErrorString = ""

  If checkRaumStromkreis.Value = True Or _
     checkPositionen.Value = True Or _
     checkMengen.Value = True Then
    CopyEntityOk = True
  Else
    ErrorString = "- Sie haben keinen zu kopierenden Bereich ausgew|fffd|hlt." & vbCr
    CopyEntityOk = False
  End If

  If tbSource.Value = "" Then
    ErrorString = ErrorString & "- Sie haben kein Quellblatt angegeben." & vbCr
    SourceOk = False
  Else
    If IsNumeric(tbSource.Value) = False Then
      ErrorString = ErrorString & "- Das Quellblatt ist nicht als Zahl angegeben." & vbCr
      SourceOk = False
    Else
      If CInt(tbSource.Value) < Recalc.GetBlattNo(True) Or _
         CInt(tbSource.Value) > Recalc.GetBlattNo(False) Then
        ErrorString = ErrorString & "- Das Quellblatt ist au|fffd|erhalb der Druckbl|fffd|tter angegeben." & vbCr
        SourceOk = False
      Else
        SourceOk = True
      End If
    End If
  End If

  If tbTargetFrom.Value <> "" Or tbTargetTo.Value <> "" Then
    TargetOk = True

    If tbTargetFrom <> "" Then
      If IsNumeric(tbTargetFrom.Value) = False Then
        ErrorString = ErrorString & "- Das Zielblatt (von) ist nicht als Zahl angegeben." & vbCr
        TargetOk = False
      Else
        If CInt(tbTargetFrom.Value) < Recalc.GetBlattNo(True) Then
          ErrorString = ErrorString & "- Das Zielblatt (von) ist kleiner als das kleinste Druckblatt." & vbCr
          TargetOk = False
        End If
      End If
    End If

    If TargetOk = True And tbTargetTo.Value <> "" Then
      If IsNumeric(tbTargetTo.Value) = False Then
        ErrorString = ErrorString & "- Das Zielbatt (bis) ist nicht als Zahl angegeben." & vbCr
        TargetOk = False
      Else
        If CInt(tbTargetTo.Value) > Recalc.GetBlattNo(False) Then
          ErrorString = ErrorString & "- Das Zielbatt (bis) ist gr|fffd||fffd|er als das gr|fffd||fffd|te Druckblatt." & vbCr
          TargetOk = False
        End If
      End If
    End If

    If TargetOk = True And tbTargetFrom.Value <> "" And tbTargetTo.Value <> "" Then
      If CInt(tbTargetFrom.Value) > CInt(tbTargetTo.Value) Then
        ErrorString = ErrorString & " -Das Zielblatt (von) ist gr|fffd||fffd|er als das Zielbatt (bis)." & vbCr
        TargetOk = False
      End If
    End If

  Else
    ErrorString = ErrorString & "- Sie haben kein Zielblatt / keine Zielbl|fffd|tter eingegeben."
    TargetOk = False
  End If

  IsValid = CopyEntityOk And SourceOk And TargetOk

  If ErrorString <> "" Then
    MsgBox ErrorString, vbCritical
  End If

End Function


Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Rem **********************************************************
Rem **      Copyright (c) by Hausmann & Wynen DV GmbH       **
Rem **********************************************************

Dim AppClass As New HWAufmassApp
Private Sub Workbook_Open()
  Set AppClass.App = Application
  AppClass.AufmassBlattIO.setWorkbook Me
  CopyDialog.CheckAndCreateCopyDialog
End Sub

Attribute VB_Name = "HWAufmassApp"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Rem **********************************************************
Rem **      Copyright (c) by Hausmann & Wynen DV GmbH       **
Rem **********************************************************

Public WithEvents App As Application
Attribute App.VB_VarHelpID = -1
Public AufmassBlattIO As HWAufmassBlattIO
Private Sub App_SheetActivate(ByVal Sh As Object)
  AufmassBlattIO.activateWorksheet Sh
End Sub
Private Sub App_SheetChange(ByVal Sh As Object, ByVal Target As Range)
  AufmassBlattIO.changeValue Target
End Sub
Private Sub App_WorkbookActivate(ByVal wb As Workbook)
  AufmassBlattIO.activateWorksheet wb.ActiveSheet
End Sub
Private Sub Class_Initialize()
  Set AufmassBlattIO = New HWAufmassBlattIO
End Sub

Attribute VB_Name = "HWAufmassBlattIO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Rem **********************************************************
Rem **      Copyright (c) by Hausmann & Wynen DV GmbH       **
Rem **********************************************************

Private m_shadowSheet As Worksheet
Private m_myWorkbook As Workbook
Private m_isActive As Boolean
Private m_aufmassWriter As HWAufmassWriter
Private m_rngPosNr As Range
Private m_rngMenge As Range
Private m_rngRaum As Range
Private m_rngStromkreis As Range
Private m_correctionMode As Boolean

Public Enum AufmassCellType
  ACT_None       'Nicht f|fffd|r uns wichtige Zelle
  ACT_PositionNr 'Zelle enth|fffd|lt eine Positionsnummer
  ACT_Raum       'Zelle enth|fffd|lt einen Raum
  ACT_Stromkreis 'Zelle enth|fffd|lt einen Stromkreis
  ACT_Menge      'Zelle enht|fffd|lt eine Aufmassmenge
End Enum
  'AufmassCellType definiert die unterschiedlichen Zelltypen
  'auf dem Erfassblatt

Public Function findCellTypeName(cellType As AufmassCellType) As String
  findCellTypeName = Switch(cellType = ACT_Menge, "Menge", _
                            cellType = ACT_PositionNr, "PositionNr", _
                            cellType = ACT_Raum, "Raum", _
                            cellType = ACT_Stromkreis, "Stromkreis", _
                            cellType = ACT_None, "Nicht f|fffd|r Aufmass")
End Function

Private Function isInRange(range1 As Range, range2 As Range) As Boolean
  Dim IntersectRange As Range
  Set IntersectRange = Application.Intersect(range1.Worksheet.Range(range1.Address), range1.Worksheet.Range(range2.Address))
  isInRange = Not IntersectRange Is Nothing
  Set IntersectRange = Nothing
End Function

Private Function findCellType(cell As Range) As AufmassCellType
  Dim cellType As Variant
  cellType = Switch(isInRange(cell, m_rngPosNr), ACT_PositionNr, _
                    isInRange(cell, m_rngMenge), ACT_Menge, _
                    isInRange(cell, m_rngRaum), ACT_Raum, _
                    isInRange(cell, m_rngStromkreis), ACT_Stromkreis)
  If IsNull(cellType) Then
    findCellType = ACT_None
  Else
    findCellType = cellType
  End If
End Function

Private Function value2Formula(ByVal newValue As Range) As Boolean
  value2Formula = True
  If newValue.Count = 1 Then
    Dim cellType As AufmassCellType
    cellType = findCellType(newValue)
    If cellType = ACT_Menge And newValue.Value <> Empty Then
      Dim sValue As String
      sValue = CStr(newValue.Value)
      
      If Len(sValue) > 0 Then
        Dim vEvalResult As Variant
        vEvalResult = Application.Evaluate(newValue.Value)
        If TypeName(vEvalResult) = "Error" Then
          sValue = Replace(sValue, ",", ".")
          vEvalResult = Application.Evaluate(sValue)
          If TypeName(vEvalResult) = "Error" Then
            value2Formula = False
          Else
            Application.EnableEvents = False
            newValue.Value = sValue
            Application.EnableEvents = True
          End If
        End If
      End If
      
      If value2Formula Then
        Dim sFormula As String
        sFormula = newValue.Formula
        Dim bHasFormula As Boolean
        bHasFormula = Len(sFormula) > 0 And Left(sFormula, 1) = "="
    
        If Len(sValue) > 0 And Not bHasFormula Then
          If Left(sValue, 1) <> "=" Then
            Application.EnableEvents = False
            If Len(sFormula) = 0 Then
              newValue.Formula = "=" + sValue
            Else
              newValue.Formula = "=" + newValue.Formula
            End If
            Application.EnableEvents = True
          End If
        End If
      End If
    End If
  End If
End Function

Public Sub changeValue(ByVal newValue As Range)
  If m_isActive Then
    Dim newCell As Range
    Dim oldCell As Range
    For Each newCell In newValue
    
      Set oldCell = m_shadowSheet.Range(newCell.Address)
      
      Dim cellType As AufmassCellType
      cellType = findCellType(newCell)
      
      If cellType <> ACT_None And oldCell.Value <> newCell.Value Then
        If value2Formula(newCell) Then
          Dim ChangeEvent As New ChangeEvent
          ChangeEvent.setChangeEvent cellType, oldCell, newCell, CStr(newCell.Worksheet.Range("O2").Value)
          
          If m_correctionMode = True Then
            Application.EnableEvents = False
            oldCell.Value = ""
            Application.EnableEvents = True
          End If
          
          createChangeRelations ChangeEvent
          
          m_aufmassWriter.doOnChanged Me, ChangeEvent
          
          Set ChangeEvent = Nothing
          
          syncCell newCell
        Else
          Application.EnableEvents = False
          newCell.Value = oldCell.Value
          Application.EnableEvents = True
        End If
      End If
    Next
    syncSheet
  End If
End Sub

Private Sub createChangeRelations(chngEvent As ChangeEvent)
  Select Case chngEvent.getCellType
    Case AufmassCellType.ACT_Menge
      createChangeRelationsMenge chngEvent
    Case AufmassCellType.ACT_PositionNr
      createChangeRelationsPositionNr chngEvent
    Case AufmassCellType.ACT_Raum
      createChangeRelationsRaum chngEvent
    Case AufmassCellType.ACT_Stromkreis
      createChangeRelationsStromkreis chngEvent
  End Select
End Sub

Private Sub createChangeRelationsMenge(chngEvent As ChangeEvent)
  Dim ChangeRelation As New ChangeRelation
  ChangeRelation.setCell1 ACT_Raum, chngEvent.getNewCell.Worksheet.Cells(chngEvent.getNewCell.row, 1)
  ChangeRelation.setCell2 ACT_Stromkreis, chngEvent.getNewCell.Worksheet.Cells(chngEvent.getNewCell.row, 2)
  ChangeRelation.setCell3 ACT_PositionNr, chngEvent.getNewCell.Worksheet.Cells(8, chngEvent.getNewCell.column)
  chngEvent.addChangeRelation ChangeRelation
  Set ChangeRelation = Nothing
End Sub

Private Sub createChangeRelationsPositionNr(chngEvent As ChangeEvent)
  Dim column As Long
  column = chngEvent.getNewCell.column
  Dim row As Long
  For row = 11 To 31
    Dim ChangeRelation As New ChangeRelation
    ChangeRelation.setCell1 ACT_Raum, chngEvent.getNewCell.Worksheet.Cells(row, 1)
    ChangeRelation.setCell2 ACT_Stromkreis, chngEvent.getNewCell.Worksheet.Cells(row, 2)
    ChangeRelation.setCell3 ACT_Menge, chngEvent.getNewCell.Worksheet.Cells(row, column)
    chngEvent.addChangeRelation ChangeRelation
    Set ChangeRelation = Nothing
  Next row
End Sub

Private Sub createChangeRelationsRaum(chngEvent As ChangeEvent)
  Dim row As Long
  row = chngEvent.getNewCell.row
  Dim column As Long
  For column = 3 To 15
    Dim ChangeRelation As New ChangeRelation
    ChangeRelation.setCell1 ACT_Stromkreis, m_shadowSheet.Cells(row, 2)
    ChangeRelation.setCell2 ACT_Menge, m_shadowSheet.Cells(row, column)
    ChangeRelation.setCell3 ACT_PositionNr, m_shadowSheet.Cells(8, column)
    chngEvent.addChangeRelation ChangeRelation
    Set ChangeRelation = Nothing
  Next column
End Sub

Private Sub createChangeRelationsStromkreis(chngEvent As ChangeEvent)
  Dim row As Long
  row = chngEvent.getNewCell.row
  Dim column As Long
  For column = 3 To 15
    Dim ChangeRelation As New ChangeRelation
    ChangeRelation.setCell1 ACT_Raum, m_shadowSheet.Cells(row, 1)
    ChangeRelation.setCell2 ACT_Menge, m_shadowSheet.Cells(row, column)
    ChangeRelation.setCell3 ACT_PositionNr, m_shadowSheet.Cells(8, column)
    chngEvent.addChangeRelation ChangeRelation
    Set ChangeRelation = Nothing
  Next column
End Sub

Public Sub activateWorksheet(ByVal sheet As Worksheet)
  If InStr(sheet.Name, "Blatt") = 1 And sheet.Range("O3").Value = "Blatt" Then
    m_isActive = True
    syncSheet
  Else
    m_isActive = False
  End If
End Sub

Public Sub setWorkbook(ByVal wb As Workbook)
  Set m_myWorkbook = wb
  createShadowSheet
End Sub

Public Function getWorkbook() As Workbook
  Set getWorkbook = m_myWorkbook
End Function

Private Sub syncSheet()
  If m_isActive Then
    Application.EnableEvents = False
    m_shadowSheet.UsedRange.Clear
    If Not m_myWorkbook.ActiveSheet Is Nothing Then
      m_myWorkbook.ActiveSheet.UsedRange.Copy m_shadowSheet.Range(m_myWorkbook.ActiveSheet.UsedRange.Address)
    End If
    Application.EnableEvents = True
  End If
End Sub

Private Sub syncCell(cell As Range)
  If m_isActive Then
    Application.EnableEvents = False
    cell.Copy m_shadowSheet.Range(cell.Address)
    Application.EnableEvents = True
  End If
End Sub

Private Sub createShadowSheet()
  Application.EnableEvents = False
  Dim foundShadow As Boolean
  foundShadow = False
  For Each m_shadowSheet In m_myWorkbook.Worksheets
    If m_shadowSheet.Name = "ShadowSheet" Then
      foundShadow = True
      Exit For
    End If
  Next
  If Not foundShadow Then
    Set m_shadowSheet = m_myWorkbook.Worksheets.add
    m_shadowSheet.Visible = xlSheetVeryHidden
    m_shadowSheet.Name = "ShadowSheet"
  End If
  Application.EnableEvents = True
  activateWorksheet m_myWorkbook.ActiveSheet
End Sub

Public Function setCorrectionMode(correctionMode As Boolean)
  m_correctionMode = correctionMode
End Function

Private Sub Class_Initialize()
  Set m_shadowSheet = Nothing
  m_isActive = False
  Set m_rngPosNr = Range("C8:O8")
  Set m_rngMenge = Range("C11:O31")
  Set m_rngRaum = Range("A11:A31")
  Set m_rngStromkreis = Range("B11:B31")
  Set m_aufmassWriter = New HWAufmassWriter
  m_correctionMode = False
End Sub


Attribute VB_Name = "HWAufmassWriter"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Rem **********************************************************
Rem **      Copyright (c) by Hausmann & Wynen DV GmbH       **
Rem **********************************************************

Private m_aufmassSheet As Worksheet
Private m_uebersichtSheet As Worksheet
Private m_isActive As Boolean
Private m_isError As Boolean
Private m_errorString As String
Private m_startColBRS As Long
Private m_startRowPos As Long
Private m_uebersichtRange As String

' doOnChanged
' Einstiegsmethode von HWAufmassWriter
' Schreibt die im ChangeEvent beschriebene |fffd|nderung, die durch den HWAufmassBlattIO erstellt wurde,
' in die Aufma|fffd|daten und die |fffd|bersicht
' Die Strategie ist dabei: Der alte Zustand wird aus den Aufma|fffd|daten/|fffd|bersicht entfernt und der
' neue Zustand hineingeschrieben
' param: blattIO
'        HWAufmassBlattIO-Instanz die uns aufgerufen hat
' param: ChangeEvent
'        Das ChangeEvent mit den Informationen zur durchzuf|fffd|hrenden |fffd|nderung
Public Sub doOnChanged(blattIO As HWAufmassBlattIO, ChangeEvent As ChangeEvent)
  Application.EnableEvents = False
  m_isError = False
  checkActive blattIO
  If m_isActive Then
    performChange ChangeEvent, False
    performChange ChangeEvent, True
  End If
  Application.EnableEvents = True
End Sub

' getCellsForChange
' Aus dem ChangeEvent und einer ChangeRelation werden die Zellen mit den einzelnen Informationen extrahiert
' param: newValue
'        true = Neuer Wert / false = Alter Wert aus dem ChangeEvent
' param: ChangeEvent
'        Das ChangeEvent
' param: ChangeRelation
'        Eine ChangeRelation (eines der vielen aus dem ChangeEvent)
' param: raumCell
'        Zelle die den Raum enth|fffd|lt
' param: stromkreisCell
'        Zelle die den Stromkreis enth|fffd|lt
' param: posNrCell
'        Zelle die die Positionsnummer enth|fffd|lt
' param: mengeCell
'        Zelle die die Menge enth|fffd|lt
Private Sub getCellsForChange(newValue As Boolean, ChangeEvent As ChangeEvent, ChangeRelation As ChangeRelation, _
                              raumCell As Range, stromkreisCell As Range, posNrCell As Range, mengeCell As Range)
 Select Case ChangeEvent.getCellType
   Case ACT_Menge
     Set mengeCell = IIf(newValue, ChangeEvent.getNewCell(), ChangeEvent.getOldCell())
     Set raumCell = ChangeRelation.getCellForType(ACT_Raum)
     Set stromkreisCell = ChangeRelation.getCellForType(ACT_Stromkreis)
     Set posNrCell = ChangeRelation.getCellForType(ACT_PositionNr)
   Case ACT_PositionNr
     Set posNrCell = IIf(newValue, ChangeEvent.getNewCell(), ChangeEvent.getOldCell())
     Set raumCell = ChangeRelation.getCellForType(ACT_Raum)
     Set stromkreisCell = ChangeRelation.getCellForType(ACT_Stromkreis)
     Set mengeCell = ChangeRelation.getCellForType(ACT_Menge)
   Case ACT_Raum
     Set raumCell = IIf(newValue, ChangeEvent.getNewCell(), ChangeEvent.getOldCell())
     Set stromkreisCell = ChangeRelation.getCellForType(ACT_Stromkreis)
     Set posNrCell = ChangeRelation.getCellForType(ACT_PositionNr)
     Set mengeCell = ChangeRelation.getCellForType(ACT_Menge)
   Case ACT_Stromkreis
     Set stromkreisCell = IIf(newValue, ChangeEvent.getNewCell(), ChangeEvent.getOldCell())
     Set raumCell = ChangeRelation.getCellForType(ACT_Raum)
     Set posNrCell = ChangeRelation.getCellForType(ACT_PositionNr)
     Set mengeCell = ChangeRelation.getCellForType(ACT_Menge)
 End Select
End Sub

' performAction
' F|fffd|hrt die in ChangeEvent beschriebene |fffd|nderung an den Aufma|fffd|daten und der |fffd|bersicht durch
' Durchl|fffd|uft alle ChangeRelation des ChangeEvent und f|fffd|hrt die |fffd|nderung durch
' param: ChangeEvent
'        Das ChangeEvent
' param: add
'        true = Neuen Zustand hinzuf|fffd|gen / false = Alten Zustand herausnehmen
Private Sub performChange(ChangeEvent As ChangeEvent, add As Boolean)
  Dim raumCell As Range
  Dim stromkreisCell As Range
  Dim mengeCell As Range
  Dim posNrCell As Range
  
  Dim iChangeRelation As Integer
  Dim ChangeRelation As ChangeRelation
  
  Dim doPerform As Boolean
  Dim blattstring As String
  blattstring = ChangeEvent.getBlattID
  
  For iChangeRelation = 1 To ChangeEvent.nChangeRelations
    Dim raumString As String
    Dim stromkreisString As String
    Dim posNrString As String
  
    Set ChangeRelation = ChangeEvent.getChangeRelation(iChangeRelation - 1)
    getCellsForChange add, ChangeEvent, ChangeRelation, raumCell, stromkreisCell, posNrCell, mengeCell
    
    raumString = CStr(raumCell.Value)
    stromkreisString = CStr(stromkreisCell.Value)
    posNrString = CStr(posNrCell.Value)
    
    doPerform = raumString <> "" Or stromkreisString <> ""
    If doPerform = True Then
      doPerform = posNrString <> ""
    End If
    
    If doPerform Then
      Dim brsColumn As Long
      Dim posRow As Long
      
      brsColumn = locateBRS(blattstring, raumString, stromkreisString)
      If brsColumn = 0 And add And Not mengeCell.Value = Empty Then
        brsColumn = insertBRS(blattstring, raumString, stromkreisString)
      End If
        
      posRow = locatePos(posNrString)
      If posRow > 0 And brsColumn > 0 Then
        If add = True Then
          addMenge mengeCell.Value, brsColumn, posRow
          changeUebersicht mengeCell.Value, posRow, blattstring, True
        Else
          removeMenge mengeCell.Value, brsColumn, posRow
          changeUebersicht mengeCell.Value, posRow, blattstring, False
        End If
      End If
    End If
  Next
End Sub

' removeMenge
' Reduziert eine durch column und row angegebene Mengenzelle um eine Menge
Private Sub removeMenge(menge As Double, column As Long, row As Long)
  Dim cellValue As Variant
  cellValue = m_aufmassSheet.Cells(row, column).Value
  If IsNumeric(cellValue) Then
    cellValue = cellValue - menge
    If cellValue = 0 Then
      cellValue = Empty
    End If
    m_aufmassSheet.Cells(row, column).Value = cellValue
  End If
End Sub

' addMenge
' F|fffd|gt einer durch column und row angegebenen Mengenzelle eine Menge hinzu
Private Sub addMenge(menge As Double, column As Long, row As Long)
  Dim cellValue As Variant
  cellValue = m_aufmassSheet.Cells(row, column).Value
  If IsNumeric(cellValue) Then
    cellValue = cellValue + menge
    If cellValue = 0 Then
      cellValue = Empty
    End If
    m_aufmassSheet.Cells(row, column).Value = cellValue
  End If
End Sub

' changeUebersicht
' |fffd|bersicht
Private Sub changeUebersicht(menge As Double, row As Long, blattstring As String, add As Boolean)
  Dim bauzeit As Double
  Dim lohnVk As Double
  Dim matVk As Double
  Dim preiseinheit As Long
  
  preiseinheit = m_aufmassSheet.Cells(row, 7).Value
  If preiseinheit = 0 Then
    preiseinheit = 1
  End If
  
  bauzeit = (m_aufmassSheet.Cells(row, 4).Value / preiseinheit) * menge
  lohnVk = (m_aufmassSheet.Cells(row, 5).Value / preiseinheit) * menge
  matVk = (m_aufmassSheet.Cells(row, 6).Value / preiseinheit) * menge
  
  Dim uebersichtBlatt As Range
  Set uebersichtBlatt = m_uebersichtSheet.Range(m_uebersichtRange).Find(blattstring)
  
  If Not uebersichtBlatt Is Nothing Then
    Dim bauzeitUebersicht As Range
    Dim lohnUebersicht As Range
    Dim materialUebersicht As Range
    
    Set bauzeitUebersicht = m_uebersichtSheet.Cells(uebersichtBlatt.row, 2)
    Set lohnUebersicht = m_uebersichtSheet.Cells(uebersichtBlatt.row, 3)
    Set materialUebersicht = m_uebersichtSheet.Cells(uebersichtBlatt.row, 4)
    
    If add Then
      bauzeitUebersicht.Value = Round(bauzeitUebersicht.Value + bauzeit, 6)
      lohnUebersicht.Value = Round(lohnUebersicht.Value + lohnVk, 2)
      materialUebersicht.Value = Round(materialUebersicht.Value + matVk, 2)
    Else
      bauzeitUebersicht.Value = Round(bauzeitUebersicht.Value - bauzeit, 6)
      lohnUebersicht.Value = Round(lohnUebersicht.Value - lohnVk, 2)
      materialUebersicht.Value = Round(materialUebersicht.Value - matVk, 2)
    End If
    
  End If
End Sub

' insertBRS
' F|fffd|gt eine neue BRS (Blatt, Raum, Stromkreis) ein und gibt die neue Spalte als Long zur|fffd|ck
Private Function insertBRS(blatt As String, raum As String, stromkreis As String) As Long
  Dim blattCell As Range
  Dim raumCell As Range
  Dim stromkreisCell As Range
  Set blattCell = m_aufmassSheet.Cells(16, getLastBRSColumn() + 1)
  Set raumCell = m_aufmassSheet.Cells(blattCell.row + 1, blattCell.column)
  Set stromkreisCell = m_aufmassSheet.Cells(blattCell.row + 2, blattCell.column)
  blattCell.Value = blatt
  raumCell.Value = raum
  stromkreisCell.Value = stromkreis
  insertBRS = blattCell.column
End Function

' locateBRS
' Liefert die Spalte f|fffd|r das gegebene Blatt, Raum und Stromkreis
' Es wird 0 zur|fffd|ckgegeben, wenn diese Kombination nicht gefunden werden kann
Private Function locateBRS(blatt As String, raum As String, stromkreis As String) As Long
  locateBRS = 0
  If getMaxBRS() > 0 Then
    Dim findCell As Range
    Dim startAddress As String
    Dim brsRangeAddress As String
    brsRangeAddress = getBRSRange()
    Set findCell = m_aufmassSheet.Range(brsRangeAddress).Find(blatt)
    If Not findCell Is Nothing Then
      startAddress = findCell.Address
      Dim raumCell As Range
      Dim stromkreisCell As Range
      Dim stopLoop As Boolean
      stopLoop = False
      Do
        Set raumCell = m_aufmassSheet.Cells(findCell.row + 1, findCell.column)
        Set stromkreisCell = m_aufmassSheet.Cells(findCell.row + 2, findCell.column)
        If CStr(raumCell.Value) = raum And _
           CStr(stromkreisCell.Value) = stromkreis Then
          locateBRS = findCell.column
          Set findCell = Nothing
        Else
          Set findCell = m_aufmassSheet.Range(brsRangeAddress).FindNext(findCell)
        End If
        
        If findCell Is Nothing Then
          stopLoop = True
        Else
          stopLoop = (startAddress = findCell.Address)
        End If
        
      Loop While Not stopLoop
    End If
  End If
End Function

' getLastBRSColumn
' Liefert die letzte BRS-Spaltennummer mit Inhalt
Private Function getLastBRSColumn() As Long
  getLastBRSColumn = m_aufmassSheet.Cells.Find("*", [A16], xlValues, xlPart, xlByColumns, xlPrevious).column
End Function

' getMaxBRS
' Liefert die Anzahl an eingetragenen Blatt/Raum/Stromkreisen
Private Function getMaxBRS() As Long
  getMaxBRS = getLastBRSColumn() - m_startColBRS + 1
End Function

' getBRSRange
' Liefert den Range des BRS-Bereichs z. B. "K16:J16"
Private Function getBRSRange() As String
  If getMaxBRS() > 0 Then
    getBRSRange = m_aufmassSheet.Cells(16, m_startColBRS).Address(False, False) + ":" + _
                  m_aufmassSheet.Cells(16, getLastBRSColumn).Address(False, False)
  End If
End Function

' locatePos
' Findet die Zeile zur angegebenen Position und gibt diese als Long zur|fffd|ck
' 0 als R|fffd|ckgabe bedeutet, dass die Position nicht gefunden werden konnte
Private Function locatePos(position As String) As Long
  Dim findCell As Range
  Set findCell = m_aufmassSheet.Range(getPosRange()).Find(position, , xlValues, xlWhole)
  If Not findCell Is Nothing Then
    locatePos = findCell.row
  End If
End Function

' getPosRange
' Gibt den Range der Positionen zur|fffd|ck z. B. "A19:A205"
Private Function getPosRange() As String
  If getMaxPos() > 0 Then
    getPosRange = "A" + CStr(m_startRowPos) + ":A" + CStr(getLastPosRow())
  End If
End Function

' getLastPosRow
' Liefert die letzte Zeilennummern mit Positionsnnummern
Private Function getLastPosRow() As Long
  getLastPosRow = m_aufmassSheet.Cells.Find("*", [A1], xlValues, xlPart, xlByRows, xlPrevious).row
End Function

' getMaxPos
' Gibt die Anzahl der Positionen zur|fffd|ck
Private Function getMaxPos() As Long
  getMaxPos = getLastPosRow() - m_startRowPos + 1
End Function

' checkActive
' Pr|fffd|ft ob das Arbeitsblatt ein Blatt mit Namen "Aufma|fffd|daten" und ein
' Blatt mit Namen "|fffd|bersicht" enth|fffd|lt. Ist dies der Fall, wird
' m_isActive gesetzt
Private Sub checkActive(blattIO As HWAufmassBlattIO)
  If m_isActive = False Then
    Dim aufmassFound As Boolean
    aufmassFound = False
    Dim uebersichtFound As Boolean
    uebersichtFound = False
    
    For Each m_aufmassSheet In blattIO.getWorkbook().Sheets
      If m_aufmassSheet.Name = "Aufma|fffd|daten" Then
        aufmassFound = True
        Exit For
      End If
    Next
    
    For Each m_uebersichtSheet In blattIO.getWorkbook().Sheets
      If m_uebersichtSheet.Name = "|fffd|bersicht" Then
        uebersichtFound = True
        Exit For
      End If
    Next
    
    If aufmassFound And uebersichtFound Then
      m_isActive = True
      m_uebersichtRange = "A4:A" + CStr(blattIO.getWorkbook().Sheets.Count)
    End If
  End If
End Sub

Private Sub Class_Initialize()
  Set m_aufmassSheet = Nothing
  m_isActive = False
  m_isError = False
  m_startColBRS = 17
  m_startRowPos = 19
End Sub


Attribute VB_Name = "HW_VBA"
Rem **********************************************************
Rem **      Copyright (c) by Hausmann & Wynen DV GmbH       **
Rem **********************************************************

Function HWAufmassSum(Range As Variant)
  Dim appEventState As Boolean
  appEventState = Application.EnableEvents
  If appEventState = True Then
    Application.EnableEvents = False
  End If
  
  Dim Result As Double
  Result = 0
  If TypeName(Range) = "Range" Then
    Dim maxCount As Long
    If Range.Rows.Count > 1 Then
      maxCount = Range.Worksheet.UsedRange.Rows.Count
      maxCount = maxCount - Range.row
    Else
      maxCount = Range.Worksheet.UsedRange.Columns.Count
      maxCount = maxCount - Range.column
    End If

    If maxCount >= 0 Then
      Dim counter As Long
      counter = 0
      Dim cl As Range
      For Each cl In Range.Cells
        If cl.Value <> Empty Then
          Result = Result + Application.Evaluate(cl.Value)
        End If
        If counter = maxCount Then
          Exit For
        End If
        counter = counter + 1
      Next
    End If

    HWAufmassSum = Result

  Else
    HWAufmassSum = "Fehler"
  End If
  
  If appEventState = True Then
    Application.EnableEvents = True
  End If
End Function

Function HWBezFinder(Range As Variant)
  Dim appEventState As Boolean
  appEventState = Application.EnableEvents
  If appEventState = True Then
    Application.EnableEvents = False
  End If
  
  Dim Result As String
  
  If TypeName(Range) = "Range" Then
    If Not IsEmpty(Range.Value) Then
      Dim findCell As Range
      Dim Worksheet As Worksheet
      Set Worksheet = Range.Application.ActiveWorkbook.Worksheets("Aufma|fffd|daten")
      If Not Worksheet Is Nothing Then
        Set findCell = Worksheet.Range("A18:A" + CStr(Worksheet.UsedRange.Rows.Count)).Find(Range, , , xlWhole)
        If Not findCell Is Nothing Then
          HWBezFinder = CStr(Worksheet.Cells(findCell.row, 2).Value)
        Else
          HWBezFinder = "Unbekannt"
        End If
      Else
        HWBezFinder = "Keine Aufma|fffd|daten!"
      End If
    Else
      HWBezFinder = ""
    End If
  Else
    HWBezFinder = "Fehler"
  End If
  
  If appEventState = True Then
    Application.EnableEvents = True
  End If
End Function

Attribute VB_Name = "Recalc"
Rem **********************************************************
Rem **      Copyright (c) by Hausmann & Wynen DV GmbH       **
Rem **********************************************************

Public Sub CopyBlatt2Blatt(sSourceBlattNr As String, _
                           sTargetFromBlattNr As String, _
                           sTargetToBlattNr As String, _
                           bCopyRaumStromkreis As Boolean, _
                           bCopyPositionen As Boolean, _
                           bCopyMengen As Boolean)
  If checkWorkbook() Then
    If AskToContinue(sSourceBlattNr, sTargetFromBlattNr, sTargetToBlattNr, _
                     bCopyRaumStromkreis, bCopyPositionen, bCopyMengen) = True Then

      Dim vCopyAreas(3) As String

      If bCopyRaumStromkreis Then
        vCopyAreas(1) = "A11:B31"
      End If

      If bCopyPositionen Then
        vCopyAreas(2) = "C8:O8"
      End If

      If bCopyMengen Then
        vCopyAreas(3) = "C11:O31"
      End If

      copyArea sSourceBlattNr, sTargetFromBlattNr, sTargetToBlattNr, vCopyAreas

    End If
  Else
    MsgBox "Diese Arbeitsmappe enth|fffd|lt keine Blankette."
  End If
End Sub

Private Sub copyArea(sSourceBlattNr As String, _
                     sTargetFromBlattNr As String, _
                     sTargetToBlattNr As String, _
                     vCopyAreas() As String)

  Dim AppClass As HWAufmassApp
  Set AppClass = New HWAufmassApp

  Dim wb As Workbook
  Set wb = ActiveWorkbook

  Set AppClass.App = Application
  AppClass.AufmassBlattIO.setWorkbook wb

  Dim sheet As Worksheet
  Dim copyFromSheet As Worksheet
  Set copyFromSheet = GetDruckblattByNo(CInt(sSourceBlattNr))

  Dim myActiveSheet As Worksheet
  Set myActiveSheet = ActiveWorkbook.ActiveSheet

  Dim iTargetFromBlattNr As Integer
  Dim iTargetToBlattNr As Integer
  Dim iSourceBlattNr As Integer
  iSourceBlattNr = CInt(sSourceBlattNr)

  If sTargetFromBlattNr <> "" Then
    iTargetFromBlattNr = CInt(sTargetFromBlattNr)
  Else
    iTargetFromBlattNr = GetBlattNo(True)
  End If

  If sTargetToBlattNr <> "" Then
    iTargetToBlattNr = CInt(sTargetToBlattNr)
  Else
    iTargetToBlattNr = GetBlattNo(False)
  End If

  Dim i As Integer
  For i = iTargetFromBlattNr To iTargetToBlattNr
    If i <> iSourceBlattNr Then
      Set sheet = GetDruckblattByNo(i)
      Application.StatusBar = "Bearbeite Blatt " + CStr(sheet.Range("O2").Value) + " ..."

      For Each sCopyArea In vCopyAreas
        If sCopyArea <> "" Then
          Dim fromRange As Range
          Set fromRange = copyFromSheet.Range(sCopyArea)
          Dim toRange As Range
          Set toRange = sheet.Range(sCopyArea)
          sheet.Activate
          AppClass.AufmassBlattIO.activateWorksheet sheet
          If sCopyArea = "C11:O31" Then
            toRange.Formula = fromRange.Formula
          Else
            toRange.Value = fromRange.Value
          End If
        End If
      Next sCopyArea
    End If
  Next i

  Application.StatusBar = ""
  myActiveSheet.Activate
End Sub

Private Function AskToContinue(sSourceBlattNr As String, _
                               sTargetFromBlattNr As String, _
                               sTargetToBlattNr As String, _
                               bCopyRaumStromkreis As Boolean, _
                               bCopyPositionen As Boolean, _
                               bCopyMengen As Boolean) As Boolean
  Dim askMessage As String
  askMessage = "M|fffd|chten Sie von Druckblatt " & sSourceBlattNr & " die folgenden Bereiche " & vbCr & vbCr

  If bCopyRaumStromkreis = True Then
    askMessage = askMessage & "  x R|fffd|ume und Stromkreise" & vbCr
  End If
  If bCopyPositionen = True Then
    askMessage = askMessage & "  x Positionen" & vbCr
  End If
  If bCopyMengen = True Then
    askMessage = askMessage & "  x Mengen" & vbCr
  End If

  askMessage = askMessage & vbCr & "Auf die Druckbl|fffd|tter von"

  If sTargetFromBlattNr <> "" Then
    askMessage = askMessage & " " & sTargetFromBlattNr
  Else
    askMessage = askMessage & " " & CStr(GetBlattNo(True))
  End If

  askMessage = askMessage & " bis Druckblatt"

  If sTargetToBlattNr <> "" Then
    askMessage = askMessage & " " & sTargetToBlattNr
  Else
    askMessage = askMessage & " " & CStr(GetBlattNo(False))
  End If

  askMessage = askMessage & " kopieren?" & vbCr & vbCr
  askMessage = askMessage & "Die sich dort befindliche Angaben werden |fffd|berschrieben!"

  If MsgBox(askMessage, vbYesNo) = vbYes Then
    AskToContinue = True
  Else
    AskToContinue = False
  End If
End Function

Private Function GetDruckblattByNo(DruckBlattNr As Integer) As Worksheet
  Dim sheet As Worksheet
  For Each sheet In ThisWorkbook.Worksheets
    If InStr(sheet.Name, "Blatt") >= 1 And _
       sheet.Range("O3").Value = "Blatt" Then
      If IsNumeric(sheet.Range("O2").Value) = True And _
         CInt(sheet.Range("O2").Value) = DruckBlattNr Then
        Set GetDruckblattByNo = sheet
        Exit For
      End If
    End If
  Next sheet
End Function

Public Function GetBlattNo(First As Boolean) As Integer
  Dim LastNo As Integer
  Dim Result As Integer
  Dim sheet As Worksheet
  LastNo = 0
  Result = 0
  For Each sheet In ThisWorkbook.Worksheets
    If InStr(sheet.Name, "Blatt") >= 1 And _
       sheet.Range("O3").Value = "Blatt" Then
      If IsNumeric(sheet.Range("O2").Value) = True Then
        LastNo = CInt(sheet.Range("O2").Value)
        If LastNo <> 0 Then
          If Result = 0 Then
            Result = LastNo
          Else
            If First = True Then
              If Result > LastNo Then
                Result = LastNo
              End If
            Else
              If Result < LastNo Then
                Result = LastNo
              End If
            End If
          End If
        End If
      End If
    End If
  Next sheet
  GetBlattNo = Result
End Function

Public Sub Recalc()
  If checkWorkbook() Then
    If MsgBox("M|fffd|chten Sie alle auf den Erfassbl|fffd|ttern eingetragenen Werte neu schreiben?" & vbCr & _
              "Dies kann pro Erfassblatt bis zu zwei Minuten dauern!", vbYesNo) = vbYes Then

      Dim AppClass As HWAufmassApp
      Set AppClass = New HWAufmassApp
      Dim wb As Workbook
      Set wb = ActiveWorkbook
      Set AppClass.App = Application
      AppClass.AufmassBlattIO.setWorkbook wb

      cleanAufmassdaten
      cleanUebersicht
      rewriteValues AppClass

      MsgBox "Die Werte wurden neu geschrieben!"
    End If
  Else
    MsgBox "Diese Arbeitsmappe enth|fffd|lt keine Blankette"
  End If
End Sub

Public Sub Blatt2Blatt_Pos()
  If checkWorkbook() Then
    If MsgBox("M|fffd|chten Sie die Positionen des ersten Druckblatts auf alle anderen Druckbl|fffd|tter |fffd|bertragen?" & vbCr & vbCr & _
               "Die bis dato auf den anderen Druckbl|fffd|ttern angegebenen Positionen werden |fffd|berschrieben!", vbYesNo) = vbYes Then
      copyAreaFromFirstBlatt ("C8:O8")
      MsgBox "Positionen wurden |fffd|bertragen!"
    End If
  Else
    MsgBox "Diese Arbeitsmappe enth|fffd|lt keine Blankette"
  End If
End Sub

Public Sub Blatt2Blatt_RaumStromk()
  If checkWorkbook() Then
    If MsgBox("M|fffd|chten Sie die R|fffd|ume und Stromkreise des ersten Druckblatts auf alle anderen Druckbl|fffd|tter |fffd|bertragen?" & vbCr & vbCr & _
               "Die bis dato auf den anderen Druckbl|fffd|ttern angegebenen R|fffd|ume und Stromkreise werden |fffd|berschrieben", vbYesNo) = vbYes Then
      copyAreaFromFirstBlatt ("A11:B31")
      MsgBox "R|fffd|ume und Stromkreise wurden |fffd|bertragen!"
    End If
  Else
    MsgBox "Diese Arbeitsmappe enth|fffd|lt keine Blankette"
  End If
End Sub

Public Sub CreateBlattsummen()
  If checkWorkbook() Then
    If MsgBox("M|fffd|chten Sie das Blattsummen-Arbeitsblatt neu erzeugen?", vbYesNo) = vbYes Then
      ' Neues Blattsummen-Blatt anlegen bzw. bestehendes vorher l|fffd|schen
      Application.EnableEvents = False
      createNewBSSheet
      ' ... und dann f|fffd|llen
      fillBSSheet
      Application.EnableEvents = True
    End If
  Else
    MsgBox "Diese Arbeitsmappe enth|fffd|lt keine Blankette"
  End If
End Sub

Private Sub copyAreaFromFirstBlatt(sCopyArea As String)
  Dim AppClass As HWAufmassApp
  Set AppClass = New HWAufmassApp
  Dim wb As Workbook
  Set wb = ActiveWorkbook
  Set AppClass.App = Application
  AppClass.AufmassBlattIO.setWorkbook wb
  Dim sheet As Worksheet
  Dim copyFromSheet As Worksheet
  Dim hasCopied As Boolean
  Dim myActiveSheet As Worksheet
  Set myActiveSheet = ActiveWorkbook.ActiveSheet
  For Each sheet In ThisWorkbook.Worksheets
  Application.StatusBar = "Bearbeite Blatt " + CStr(sheet.Range("O2").Value) + " ..."
    If InStr(sheet.Name, "Blatt") >= 1 And _
       sheet.Range("O3").Value = "Blatt" Then
      If hasCopied = False Then
        Set copyFromSheet = sheet
        hasCopied = True
      Else
        Dim fromRange As Range
        Set fromRange = copyFromSheet.Range(sCopyArea)
        Dim toRange As Range
        Set toRange = sheet.Range(sCopyArea)
        sheet.Activate
        AppClass.AufmassBlattIO.activateWorksheet sheet
        toRange.Value = fromRange.Value
      End If
    End If
  Next sheet
  Application.StatusBar = ""
  myActiveSheet.Activate
End Sub

Private Sub cleanAufmassdaten()
  Dim aufmassdaten As Worksheet
  Dim maxRows As Long
  Dim maxCols As Long
  Dim bereich As Range
  Set aufmassdaten = getSheetByName("Aufma|fffd|daten")
  maxRows = aufmassdaten.UsedRange.Rows.Count
  maxCols = aufmassdaten.UsedRange.Columns.Count
  Set bereich = aufmassdaten.Range("R16", aufmassdaten.Cells(maxRows, maxCols + 1))
  Application.EnableEvents = False
  bereich.ClearContents
  Application.EnableEvents = True
End Sub

Private Sub cleanUebersicht()
  Dim uebersicht As Worksheet
  Dim maxRows As Long
  Dim maxCols As Long
  Dim bereich As Range
  Set uebersicht = getSheetByName("|fffd|bersicht")
  uebersicht.Activate
  maxRows = uebersicht.UsedRange.Rows.Count
  maxCols = uebersicht.UsedRange.Columns.Count
  Set bereich = uebersicht.Range("B4", uebersicht.Cells(maxRows - 1, maxCols - 1))
  Application.EnableEvents = False
  bereich.ClearContents
  Application.EnableEvents = True
End Sub

Private Sub rewriteValues(ByVal AppClass As HWAufmassApp)
  Dim sheet As Worksheet
  For Each sheet In ThisWorkbook.Worksheets
    If InStr(sheet.Name, "Blatt") >= 1 And _
       sheet.Range("O3").Value = "Blatt" Then
      rewriteValue sheet, AppClass
    End If
  Next sheet
End Sub

Private Sub rewriteValue(ByVal blatt As Worksheet, _
                         ByVal AppClass As HWAufmassApp)
  Dim Bereich_Daten As Range
  Dim Bereich_Positionen As Range
  Dim Zelle As Range

  Set Bereich_Daten = blatt.Range("C11:O31")
  Set Bereich_Positionen = blatt.Range("C8:O8")

  'LV Positionen neu schreiben
  Application.EnableEvents = False
  For Each Zelle In Bereich_Positionen
    aktuelle_Zelle = Zelle.Value
    If aktuelle_Zelle <> "" Then
      Zelle.Value = aktuelle_Zelle
    End If
  Next Zelle
  Application.EnableEvents = True

  'Datenbereich neu schreiben
  AppClass.AufmassBlattIO.activateWorksheet blatt
  AppClass.AufmassBlattIO.setCorrectionMode (True)

  For Each Zelle In Bereich_Daten
    If Zelle.Value <> "" Then
      AppClass.AufmassBlattIO.changeValue Zelle
    End If
  Next Zelle

  AppClass.AufmassBlattIO.setCorrectionMode (False)
End Sub

Private Function getSheetByName(sheetName As String) As Worksheet
  Dim sheet As Worksheet
  For Each sheet In ThisWorkbook.Worksheets
    If sheet.Name = sheetName Then
      Set getSheetByName = sheet
      Exit For
    End If
  Next sheet
End Function

Private Function checkWorkbook() As Boolean
  Dim aufmassblatt As Worksheet
  Dim uebersichtBlatt As Worksheet

  Set aufmassblatt = getSheetByName("Aufma|fffd|daten")
  Set uebersichtBlatt = getSheetByName("|fffd|bersicht")

  If Not (aufmassblatt Is Nothing) And _
     Not (uebersichtBlatt Is Nothing) Then
    checkWorkbook = True
  Else
    checkWorkbook = False
  End If
End Function

Private Sub createNewBSSheet()
  Dim wsBlattsummen As Worksheet
  Set wsBlattsummen = getSheetByName("Blattsummen")

  If Not (wsBlattsummen Is Nothing) Then
    ' Worksheet mit Namen 'Blattsummen' vorhanden?
    ' Dann l|fffd|schen wir das (vorher Schalten wir DisplayAlerts aus damit
    ' uns die doofen Nachfragen erspart bleiben
    Application.DisplayAlerts = False
    wsBlattsummen.Delete
    Application.DisplayAlerts = True
  End If

  ' Neues Worksheet hinter Aufma|fffd|daten anlegen und 'Blattsummen' nennen
  Set wsBlattsummen = ThisWorkbook.Worksheets.add(, getSheetByName("|fffd|bersicht"))
  wsBlattsummen.Name = "Blattsummen"
End Sub

Private Sub fillBSSheet()
  ' Wird ben|fffd|tigen das Aufma|fffd|daten- und das Blattsummen-Worksheet
  Dim wsAD As Worksheet
  Dim wsBS As Worksheet
  Set wsAD = getSheetByName("Aufma|fffd|daten")
  Set wsBS = getSheetByName("Blattsummen")
  ' Blattsummen vorbereiten
  prepareBS wsAD, wsBS
  ' ... und dann die Summen f|fffd|llen
  fillBS wsAD, wsBS
End Sub

Private Sub prepareBS(ByVal wsAD As Worksheet, ByVal wsBS As Worksheet)
  Dim rng As Range
' Button
  Dim btn As Shape
  Set btn = wsBS.Shapes.AddFormControl(xlButtonControl, 300, 5, 140, 25)
  btn.TextFrame.Characters.Text = "Blattsummen erzeugen"
  btn.OnAction = "Recalc.CreateBlattsummen"
  ' |fffd|berschrift
  Set rng = wsBS.Cells(1, 1)
  rng.Value = "Blattsummen pro Position"
  rng.Font.Name = "Arial"
  rng.Font.Size = 22
  rng.Font.Bold = True
  ' Unterschrift
  Set rng = wsBS.Cells(2, 1)
  rng.Value = "'--- Diese Seite wird nicht automatisch aktualisiert ---"
  ' Spaltenbreite der 1. und 2. Spalte von den Aufma|fffd|daten |fffd|bernehmen
  wsBS.Range("A1").ColumnWidth = wsAD.Range("A1").ColumnWidth
  wsBS.Range("B1").ColumnWidth = wsAD.Range("B1").ColumnWidth
  ' Positionsnummern und Bezeichnungen von den Aufma|fffd|daten |fffd|bernehmen
  Set rng = wsAD.Range(wsAD.Cells(16, 1), wsAD.Cells(wsAD.UsedRange.Rows.Count, 2))
  rng.Copy (wsBS.Cells(5, 1))
  ' Spalten|fffd|berschrift f|fffd|r jedes Aufma|fffd|blatt machen
  Dim nextBlattCol As Integer
  nextBlattCol = 3
  Dim sheet As Worksheet
  For Each sheet In ThisWorkbook.Worksheets
    If InStr(sheet.Name, "Blatt") >= 1 And _
       sheet.Range("O3").Value = "Blatt" Then
      wsBS.Cells(4, nextBlattCol).Value = "Blatt"
      wsBS.Cells(5, nextBlattCol).Value = CStr(sheet.Range("O2").Value)
      wsBS.Range("B5").Copy
      Set rng = wsBS.Range(wsBS.Cells(4, nextBlattCol), wsBS.Cells(5, nextBlattCol))
      rng.PasteSpecial (xlPasteFormats)
      rng.HorizontalAlignment = xlCenter
      nextBlattCol = nextBlattCol + 1
    End If
  Next sheet
End Sub

Private Sub fillBS(ByVal wsAD As Worksheet, ByVal wsBS As Worksheet)
  Dim rngADMengen As Range
  Set rngADMengen = wsAD.Range(wsAD.Cells(16, 17), wsAD.Cells(wsAD.UsedRange.Rows.Count, wsAD.UsedRange.Columns.Count))

  For iRow = 4 To rngADMengen.Rows.Count
    For iCol = 1 To rngADMengen.Columns.Count
      addValueToBS wsBS, rngADMengen.Cells(iRow, iCol), CStr(rngADMengen.Cells(1, iCol))
    Next iCol
  Next iRow
End Sub

Private Sub addValueToBS(ByVal wsBS As Worksheet, ByVal cellToAdd As Range, blattNr As String)
  If Not (cellToAdd Is Nothing) Then
    Dim iCol As Integer
    Dim iRow As Integer
    iRow = cellToAdd.row - 11
    'Zeile 19 beginnen die Positionen im Aufma|fffd|blatt / Zeile 8 in den Blattsummen
    For iCol = 3 To wsBS.UsedRange.Columns.Count
      If wsBS.Cells(5, iCol).Value = blattNr Then
        If wsBS.Cells(iRow, iCol) Is Nothing Then
          wsBS.Cells(iRow, iCol).Value = cellToAdd.Value
        Else
          wsBS.Cells(iRow, iCol).Value = wsBS.Cells(iRow, iCol).Value + cellToAdd.Value
        End If

        Exit For
      End If
    Next iCol
  End If
End Sub


Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle100"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle101"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle102"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle103"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle104"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle105"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle106"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle34"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle36"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle37"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle38"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle39"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle40"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle41"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle42"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle43"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle44"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle45"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle46"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle47"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle48"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle49"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle50"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle51"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle52"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle53"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle54"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle55"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle56"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle57"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle58"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle59"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle60"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle61"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle62"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle63"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle64"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle65"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle66"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle67"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle68"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle69"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle70"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle71"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle72"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle73"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle74"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle75"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle76"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle77"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle78"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle79"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle80"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle81"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle82"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle83"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle84"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle85"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle86"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle87"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle88"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle89"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle90"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle91"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle92"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle93"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle94"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle95"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle96"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle97"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle98"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle99"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TheMightyCopyDialog"
Attribute VB_Base = "0{3E70C000-ED36-4CB2-BFEC-1016527B88FC}{9026AEC1-0976-4528-A39F-64F56DD267A7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Sub cbAbbrechen_Click()
  CopyDialog.Go4It = False
  Hide
End Sub
Sub cbKopieren_Click()
  If CopyDialog.IsValid(checkRaumStromkreis, checkPositionen, _
                        checkMengen, tbSource, tbTargetFrom, _
                        tbTargetTo) = True Then
    CopyDialog.Go4It = True
    CopyDialog.sSourceBlattNr = tbSource.Value
    CopyDialog.sTargetFromBlattNr = tbTargetFrom.Value
    CopyDialog.sTargetToBlattNr = tbTargetTo.Value
    CopyDialog.bCopyRaumStromkreis = checkRaumStromkreis.Value
    CopyDialog.bCopyPositionen = checkPositionen.Value
    CopyDialog.bCopyMengen = checkMengen.Value
    Hide
  End If
End Sub


' InQuest injected base64 decoded content
' i+z+

INQUEST-PP=macro
