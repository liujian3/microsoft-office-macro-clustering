Attribute VB_Name = "ReschPDC9d"
Option Explicit
'Last updated 9/26/06
'By Rob Blake (rb) v7
'Last Updated 1/3/07 By Rob Blake (rb) v8a
'Last Updated 4/2/07 By Rob Blake (rb) v9
'Last Updated 4/4/07 By Rob Blake (rb) v9b
'Last Updated 4/4/07 By Rob Blake (rb) v9c
'Last Updated 4/19/07 By Rob Blake (rb) v9d
    'When the user action code is a 5, do not check for overdue date in
    'Promised Dock Date (Supplier) field.

Sub SupplierToCheck()
On Error GoTo SupplierToCheck_Err
Dim Sh As Worksheet
Dim ysnFoundOriginal As Boolean, ysnSheetFound As Boolean, ysnReasonCodeErr As Boolean, _
    ysnSplitMatch As Boolean, ysnSplitMatchErr As Boolean, ysnErrMatch As Boolean, ysnRemarkMatch As Boolean
Dim dblSplitQty As Double, dblTotalSplitQty As Double, dblPartialCancelQty As Double
Dim intSplitRow As Integer, IntSplit As Integer, IntCommentFlag As Integer, _
    IdMatch As Integer, IntDock As Integer, intOutputLineNo As Integer, _
    intOrigLineNo As Integer, intOutputColumnNo As Integer, x As Integer
Dim OutLineID As Integer, OutAction As Integer, _
    OutCurrSta As Integer, OutPONum As Integer, OutRel As Integer, _
    OutItem As Integer, OutDesc As Integer, OutItemRev As Integer, OutCustRev As Integer, OutLT As Integer, _
    OutQtySup As Integer, OutCanBuy As Integer, OutCanSup As Integer, OutUOM As Integer, _
    OutDockCurr As Integer, OutDockBuyer As Integer, OutDockSup As Integer, _
    OutSupNum As Integer, OutSupName As Integer, OutSupSite As Integer, _
    OutUserActCode As Integer, OutSupReasonCode As Integer, OutComments As Integer, _
    OutBuyerComments As Integer, OutPriceCurrency As Integer, OutPriceBuyer As Integer, OutPriceSupplier As Integer, OutBuyerName As Integer, _
    OutLastUpdate As Integer, OutMfr As Integer, OutMfgPart As Integer, _
    OutMacroRemarks As Integer, Dat_Rows As Integer, Ori_Rows As Integer, IntDockMatch As Integer
Dim ErrStrRightText As String, ErrStr As String, ColRefText As String, Sh_Data As String, Sh_Original As String
Dim sOrigLineID As String, sOrigAction As String, _
    sOrigStatus As String, sOrigPO_No As String, sOrigRel As String, sOrigItem As String, _
    sOrigDesc As String, sOrigRev As String, sOrigCustItemRev As String, dblOrigLT As Double, dblOrigOpenQty As Double, _
    dblOrigPartialCancelQtyBuyer As Double, dblOrigPartialCancelQtySupplier As Double, sOrigUOM As String, _
    sOrigCurrentDockDate As String, sOrigRequestedDockDateBuyer As String, _
    sOrigPromisedDockDateSupplier As String, sOrigSupplierNumber As String, _
    sOrigSupplierName As String, sOrigSupplierSite As String, sOrigUserAction As String, _
    sOrigSupplierReasonCode As String, sOrigComments As String, sOrigMfg As String, _
    sOrigPriceBuyer As String, sOrigPriceSupplier As String, sOrigMfgPartNo As String, sOrigPriceCurrency As String, sOrigBuyer As String, _
    sOrigLastUpdateDate As String
Dim sOutputTotalLineID As String, sOutputLineID As String, _
    sOutputAction As String, sOutputStatus As String, sOutputPO_No As String, sOutputRel As String, _
    sOutputItem As String, sOutputDesc As String, sDescAnswer As String, sOutputRev As String, sOutputCustItemRev As String, dblOutputLT As Double, dblOutputOpenQty As Double, _
    dblOutputPartialCancelQtyBuyer As Double, dblOutputPartialCancelQtySupplier As Double, sOutputUOM As String, sOutputUOMAnswer As String, sOutputCurrentDockDate As String, _
    sOutputRequestedDockDateBuyer As String, sOutputPromisedDockDateSupplier As String, _
    sOutputSupplierNumber As String, sOutputSupplierName As String, sOutputSupplierSite As String, _
    sOutputUserAction As String, sOutputSupplierReasonCode As String, sOutputComments As String, _
    sOutputMfg As String, sOutputMfgPartNo As String, sOutputPriceBuyer As String, sOutputPriceSupplier As String, sOutputOutPriceSupplier As String, sOutputPriceCurrency As String, _
    sOutputBuyer As String, sOutputLastUpdateDate As String, strErrMsg As String
Dim aSplitPromDockDate() As Date 'Used to check if the Promised Dock Date (Supplier) is different
                                 'on each split line
'Define Constants to the sheet sent to suppliers
Sh_Data = "Reschedule-Reconfirm"      'Set Data Sheet Name
Sh_Original = "OriginalCopy-DoNotEdit"    'Set Original Sheet Name
dblSplitQty = 0                     'Set Split Quantity
intSplitRow = 0                     'Set the Split Row Number
ysnFoundOriginal = False            'Is the Line ID on the Original Copy
ysnSheetFound = False               'Is the Data sheet found
ysnReasonCodeErr = False            'Reason Code Error
ysnSplitMatch = False               'Did the user add new rows
ysnSplitMatchErr = False            'Did the user split the wrong record
ysnErrMatch = False                 'Set to no error found
ysnRemarkMatch = False              'Set to no remark found
OutLineID = 1           'Line ID                        (A)  1
'v8
'*********************************************************************************************
OutAction = 2           'Action                         (B)  2
OutCurrSta = 3          'Current Status                 (C)  3
OutPONum = 4            'PO Number                      (D)  4
OutRel = 5              'Rel -Line - Sched              (E)  5
OutItem = 6             'Item                           (F)  6
OutDesc = 7             'Description                    (G)  7
OutItemRev = 8          'Item Revision                  (H)  8
OutCustRev = 9          'Cust Item Revision             (I)  9
OutLT = 10              'LT                             (J)  10 New v8
'*********************************************************************************************
OutQtySup = 11          'Open Qty (Supplier)            (K)  11
OutCanBuy = 12          'Partial Cancel Qty (Buyer)     (L)  12
OutCanSup = 13          'Partial Cancel Qty (Supplier)  (M)  13
OutUOM = 14             'UOM                            (N)  14
OutDockCurr = 15        'Current Dock Date              (O)  15
OutDockBuyer = 16       'Requested Dock Date (Buyer)    (P)  16
OutDockSup = 17         'Promised Dock Date (Supplier)  (Q)  17
OutSupNum = 18          'Supplier Number                (R)  18
OutSupName = 19         'Supplier Name                  (S)  19
OutSupSite = 20         'Supplier Site                  (T)  20
OutUserActCode = 21     'User Action                    (U)  21
OutSupReasonCode = 22   'Supplier Reason Code           (V)  22
OutComments = 23        'Supplier Comments              (W)  23
OutBuyerComments = 24   'Buyer Comments                 (X)  24
OutMfr = 25             'Manufacturer                   (Y)  25
OutMfgPart = 26         'Mfr Part Number                (Z)  26
OutPriceBuyer = 27      'Price (Buyer)                  (AA) 27
OutPriceSupplier = 28   'Price (Supplier)               (AB) 28
OutPriceCurrency = 29   'Price Currency                 (AC) 29
OutBuyerName = 30       'Buyer                          (AD) 30
OutLastUpdate = 31      'Last Update Date               (AE) 31
OutMacroRemarks = 32    'Remarks                        (AF) 32

'Check to see if the Data Sheet exists
'-----------------------------------------
For Each Sh In ThisWorkbook.Worksheets
    If Sh.Name = Sh_Data Then
        ysnSheetFound = True
    End If
Next Sh
If Not ysnSheetFound Then
    MsgBox "This macro will not run as sheet named " _
        & Sh_Data & " is missing.", vbCritical, "Missing Sheet"
    GoTo SupplierToCheck_Exit
End If
ThisWorkbook.Worksheets(Sh_Data).Activate
'-----------------------------------------

'Find the last data row of the data (Output) sheet
'-----------------------------------------
intOutputLineNo = 1
Do While ThisWorkbook.Worksheets(Sh_Data).Cells(intOutputLineNo, 1) <> "END FILE"
    intOutputLineNo = intOutputLineNo + 1
    If intOutputLineNo > 65534 Then
        MsgBox "Cannot locate END FILE in column 1 of the " _
            & Sh_Data & " sheet. Unable to proceed", vbCritical, "Missing Information"
        GoTo SupplierToCheck_Exit
    End If
Loop
Dat_Rows = intOutputLineNo - 2 'Number of valid records
'-----------------------------------------

'Format the Output Sheet
'-----------------------------------------
    With ThisWorkbook.Worksheets(Sh_Data)
'Color all headings red, data rose
        .Cells.Interior.Pattern = xlNone
        .Range(Cells(2, OutLineID), Cells(Dat_Rows + 1, OutLastUpdate)).Interior.ColorIndex = 38
        .Range(Cells(1, OutLineID), Cells(1, OutLastUpdate)).Interior.ColorIndex = 3
'v7 (Color Data Light Green)
'v8 (Added LT)
'LT
        .Range(Cells(1, OutLT), Cells(Dat_Rows + 1, OutLT)).Interior.ColorIndex = 35
'Open Qty (Supplier)
        .Range(Cells(1, OutQtySup), Cells(Dat_Rows + 1, OutQtySup)).Interior.ColorIndex = 35
'Partial Cancel Qty (Supplier)
        .Range(Cells(1, OutCanSup), Cells(Dat_Rows + 1, OutCanSup)).Interior.ColorIndex = 35
'Promised Dock Date (Supplier)
        .Range(Cells(1, OutDockSup), Cells(Dat_Rows + 1, OutDockSup)).Interior.ColorIndex = 35
'User Action
        .Range(Cells(1, OutUserActCode), Cells(Dat_Rows + 1, OutUserActCode)).Interior.ColorIndex = 35
'Supplier Reason Code
        .Range(Cells(1, OutSupReasonCode), Cells(Dat_Rows + 1, OutSupReasonCode)).Interior.ColorIndex = 35
'Supplier Comments
        .Range(Cells(1, OutComments), Cells(Dat_Rows + 1, OutComments)).Interior.ColorIndex = 35
'Price Suppliers
        .Range(Cells(1, OutPriceSupplier), Cells(Dat_Rows + 1, OutPriceSupplier)).Interior.ColorIndex = 35

'Color Headings Green
'LT
        .Cells(1, OutLT).Interior.ColorIndex = 43
'Open Qty (Supplier)
        .Cells(1, OutQtySup).Interior.ColorIndex = 43
'Partial Cancel Qty (Supplier)
        .Cells(1, OutCanSup).Interior.ColorIndex = 43
'Promised Dock Date (Supplier)
        .Cells(1, OutDockSup).Interior.ColorIndex = 43
'User Action
        .Cells(1, OutUserActCode).Interior.ColorIndex = 43
'Supplier Reason Code
        .Cells(1, OutSupReasonCode).Interior.ColorIndex = 43
'Supplier Comments
        .Cells(1, OutComments).Interior.ColorIndex = 43
'Price Suppliers
        .Cells(1, OutPriceSupplier).Interior.ColorIndex = 43
'Delete the Errors and Remarks row on Output sheet
        .Columns(OutMacroRemarks).Delete
        .Cells(1, OutMacroRemarks) = "Errors and Remarks"
        .Cells(1, OutMacroRemarks).Interior.ColorIndex = 3
        .Cells(1, OutMacroRemarks).Interior.Pattern = xlSolid
        .Columns(OutMacroRemarks).ColumnWidth = 40
    End With
'-----------------------------------------

'Find the last data row of the original sheet
'-----------------------------------------
intOrigLineNo = 1
Do While ThisWorkbook.Worksheets(Sh_Original).Cells(intOrigLineNo, 1) <> "END FILE"
    intOrigLineNo = intOrigLineNo + 1
    If intOrigLineNo > 65534 Then
        MsgBox "Cannot locate END FILE in column 1 of the " _
        & Sh_Original & " sheet. Unable to proceed", vbCritical, "Missing Information"
        GoTo SupplierToCheck_Exit
    End If
Loop
Ori_Rows = intOrigLineNo - 2
'-----------------------------------------

'Check for column header match on the data and original sheets
'-----------------------------------------
For intOutputColumnNo = OutLineID To OutLastUpdate
    ErrStrRightText = ""
    ErrStr = ""
    If UCase(Worksheets(Sh_Data).Cells(1, intOutputColumnNo)) <> _
    UCase(Worksheets(Sh_Original).Cells(1, intOutputColumnNo)) Then
        ErrStrRightText = Worksheets(Sh_Original).Cells(1, intOutputColumnNo)
        ColRefText = Cells(1, intOutputColumnNo).Address(True, False, xlA1)
        ColRefText = Left(ColRefText, InStr(1, ColRefText, "$") - 1)
        ErrStr = "Column Headers Cannot be changed. Header '" & ErrStrRightText _
            & "' not found in column '" & ColRefText & "'."
        ErrStr = ErrStr & "Copy paste the correct Header Name from OriginalCopy-DoNotEdit sheet and rerun the macro."
        MsgBox (ErrStr), vbCritical, "Headers Do Not Match"
        GoTo SupplierToCheck_Exit
    End If
Next intOutputColumnNo
'-----------------------------------------

'***************************************************************************************
'Start checking data (Output) sheet for errors.
'***************************************************************************************
For intOutputLineNo = 2 To Dat_Rows + 1
    strErrMsg = ""
    ysnReasonCodeErr = False
'Get Matching Values from the Orig sheet for the current Output line.
'Set Data Variables
    sOutputLineID = Worksheets(Sh_Data).Cells(intOutputLineNo, OutLineID)
'*********************************************************************************************
'v8 Remove Contract Type.
'    sOutputContractType = Worksheets(Sh_Data).Cells(intOutputLineNo, OutContType)
'*********************************************************************************************
    sOutputAction = Worksheets(Sh_Data).Cells(intOutputLineNo, OutAction)
    sOutputStatus = Worksheets(Sh_Data).Cells(intOutputLineNo, OutCurrSta)
    If Left(Worksheets(Sh_Data).Cells(intOutputLineNo, OutPONum), 1) <> "'" Then
        sOutputPO_No = "'" & Worksheets(Sh_Data).Cells(intOutputLineNo, OutPONum)
    Else
        sOutputPO_No = Worksheets(Sh_Data).Cells(intOutputLineNo, OutPONum)
    End If
    If Left(Worksheets(Sh_Data).Cells(intOutputLineNo, OutRel), 1) <> "'" Then
        sOutputRel = "'" & Worksheets(Sh_Data).Cells(intOutputLineNo, OutRel)
    Else
        sOutputRel = Worksheets(Sh_Data).Cells(intOutputLineNo, OutRel)
    End If
    If Left(Worksheets(Sh_Data).Cells(intOutputLineNo, OutItem), 1) <> "'" Then
        sOutputItem = "'" & Worksheets(Sh_Data).Cells(intOutputLineNo, OutItem)
    Else
        sOutputItem = Worksheets(Sh_Data).Cells(intOutputLineNo, OutItem)
    End If
'v6 - Description
    sOutputDesc = Worksheets(Sh_Data).Cells(intOutputLineNo, OutDesc)
    
    If Left(Worksheets(Sh_Data).Cells(intOutputLineNo, OutItemRev), 1) <> "'" Then
        sOutputRev = "'" & Worksheets(Sh_Data).Cells(intOutputLineNo, OutItemRev)
    Else
        sOutputRev = Worksheets(Sh_Data).Cells(intOutputLineNo, OutItemRev)
    End If
    If Left(Worksheets(Sh_Data).Cells(intOutputLineNo, OutCustRev), 1) <> "'" Then
        sOutputCustItemRev = "'" & Worksheets(Sh_Data).Cells(intOutputLineNo, OutCustRev)
    Else
        sOutputCustItemRev = Worksheets(Sh_Data).Cells(intOutputLineNo, OutCustRev)
    End If
'v8 - LT
    If Trim(Worksheets(Sh_Data).Cells(intOutputLineNo, OutLT).Value) = "" Then
        dblOutputLT = 0
    Else
        dblOutputLT = CDbl(Worksheets(Sh_Data).Cells(intOutputLineNo, OutLT))
    End If
    If Trim(Worksheets(Sh_Data).Cells(intOutputLineNo, OutQtySup).Value) = "" Then
        dblOutputOpenQty = 0
    Else
        dblOutputOpenQty = Worksheets(Sh_Data).Cells(intOutputLineNo, OutQtySup)
    End If
    If Left(Worksheets(Sh_Data).Cells(intOutputLineNo, OutCanBuy), 1) <> "'" Then
        dblOutputPartialCancelQtyBuyer = CDbl(Worksheets(Sh_Data).Cells(intOutputLineNo, OutCanBuy))
    Else
        dblOutputPartialCancelQtyBuyer = CDbl(Right(Worksheets(Sh_Data).Cells(intOutputLineNo, OutCanBuy), Len(Worksheets(Sh_Data).Cells(intOutputLineNo, OutCanBuy)) - 1))
    End If
    dblOutputPartialCancelQtySupplier = CDbl(Worksheets(Sh_Data).Cells(intOutputLineNo, OutCanSup))
'v6 - UOM
    sOutputUOM = Worksheets(Sh_Data).Cells(intOutputLineNo, OutUOM)
    sOutputCurrentDockDate = Worksheets(Sh_Data).Cells(intOutputLineNo, OutDockCurr)
    sOutputRequestedDockDateBuyer = Worksheets(Sh_Data).Cells(intOutputLineNo, OutDockBuyer)
    sOutputPromisedDockDateSupplier = Worksheets(Sh_Data).Cells(intOutputLineNo, OutDockSup)
    If Left(Worksheets(Sh_Data).Cells(intOutputLineNo, OutSupNum), 1) <> "'" Then
      sOutputSupplierNumber = "'" & Worksheets(Sh_Data).Cells(intOutputLineNo, OutSupNum)
    Else
      sOutputSupplierNumber = Worksheets(Sh_Data).Cells(intOutputLineNo, OutSupNum)
    End If
    sOutputSupplierName = Worksheets(Sh_Data).Cells(intOutputLineNo, OutSupName)
    sOutputSupplierName = Application.WorksheetFunction.Substitute(sOutputSupplierName, ",", "")
    If Left(Worksheets(Sh_Data).Cells(intOutputLineNo, OutSupSite), 1) <> "'" Then
      sOutputSupplierSite = "'" & Worksheets(Sh_Data).Cells(intOutputLineNo, OutSupSite)
    Else
      sOutputSupplierSite = Worksheets(Sh_Data).Cells(intOutputLineNo, OutSupSite)
    End If
    sOutputUserAction = Worksheets(Sh_Data).Cells(intOutputLineNo, OutUserActCode)
    sOutputSupplierReasonCode = Worksheets(Sh_Data).Cells(intOutputLineNo, OutSupReasonCode)
    sOutputComments = Worksheets(Sh_Data).Cells(intOutputLineNo, OutComments)
    sOutputMfg = Worksheets(Sh_Data).Cells(intOutputLineNo, OutMfr)
    'Remove all commas from Mfr Name
    sOutputMfg = Application.WorksheetFunction.Substitute(sOutputMfg, ",", "")
    If Left(Worksheets(Sh_Data).Cells(intOutputLineNo, OutMfgPart), 1) <> "'" Then
      sOutputMfgPartNo = "'" & Worksheets(Sh_Data).Cells(intOutputLineNo, OutMfgPart)
    Else
      sOutputMfgPartNo = Worksheets(Sh_Data).Cells(intOutputLineNo, OutMfgPart)
    End If
    'Remove all commas from Mfr Part Number
    sOutputMfgPartNo = Application.WorksheetFunction.Substitute(sOutputMfgPartNo, ",", "")
'V7 New Columns 9/25/06
'*****************************************************************************************
    sOutputPriceBuyer = Worksheets(Sh_Data).Cells(intOutputLineNo, OutPriceBuyer)
    sOutputPriceSupplier = Worksheets(Sh_Data).Cells(intOutputLineNo, OutPriceSupplier)
'*****************************************************************************************
    sOutputPriceCurrency = Worksheets(Sh_Data).Cells(intOutputLineNo, OutPriceCurrency)
    sOutputBuyer = Worksheets(Sh_Data).Cells(intOutputLineNo, OutBuyerName)
    'Remove all commas from Buyer Name
    sOutputBuyer = Application.WorksheetFunction.Substitute(sOutputBuyer, ",", "")
    sOutputLastUpdateDate = Worksheets(Sh_Data).Cells(intOutputLineNo, OutLastUpdate)

    If sOutputLineID <> "" Then ' Run on an existing line
        ysnSplitMatch = False
'************************************************
'Find the matching line on the Orig sheet
'************************************************
        For intOrigLineNo = 2 To Ori_Rows + 1
            sOrigLineID = Worksheets(Sh_Original).Cells(intOrigLineNo, OutLineID)
            If sOrigLineID = sOutputLineID Then
        'Set Original Variables
'v8 Remove Contract Type
'                sOrigContractType = Worksheets(Sh_Original).Cells(intOrigLineNo, OutContType)
                sOrigAction = Worksheets(Sh_Original).Cells(intOrigLineNo, OutAction)
                sOrigStatus = Worksheets(Sh_Original).Cells(intOrigLineNo, OutCurrSta)
                If Left(Worksheets(Sh_Original).Cells(intOrigLineNo, OutPONum), 1) <> "'" Then
                    sOrigPO_No = "'" & Worksheets(Sh_Original).Cells(intOrigLineNo, OutPONum)
                Else
                    sOrigPO_No = Worksheets(Sh_Original).Cells(intOrigLineNo, OutPONum)
                End If
                If Left(Worksheets(Sh_Original).Cells(intOrigLineNo, OutRel), 1) <> "'" Then
                    sOrigRel = "'" & Worksheets(Sh_Original).Cells(intOrigLineNo, OutRel)
                Else
                    sOrigRel = Worksheets(Sh_Original).Cells(intOrigLineNo, OutRel)
                End If
                If Left(Worksheets(Sh_Original).Cells(intOrigLineNo, OutItem), 1) <> "'" Then
                    sOrigItem = "'" & Worksheets(Sh_Original).Cells(intOrigLineNo, OutItem)
                Else
                    sOrigItem = Worksheets(Sh_Original).Cells(intOrigLineNo, OutItem)
                End If
'v6 - Description
                sOrigDesc = Worksheets(Sh_Original).Cells(intOrigLineNo, OutDesc)
                
                If Left(Worksheets(Sh_Original).Cells(intOrigLineNo, OutItemRev), 1) <> "'" Then
                    sOrigRev = "'" & Worksheets(Sh_Original).Cells(intOrigLineNo, OutItemRev)
                Else
                    sOrigRev = Worksheets(Sh_Original).Cells(intOrigLineNo, OutItemRev)
                End If
                If Left(Worksheets(Sh_Original).Cells(intOrigLineNo, OutCustRev), 1) <> "'" Then
                    sOrigCustItemRev = "'" & Worksheets(Sh_Original).Cells(intOrigLineNo, OutCustRev)
                Else
                    sOrigCustItemRev = Worksheets(Sh_Original).Cells(intOrigLineNo, OutCustRev)
                End If
'v8 - LT
                dblOrigLT = CDbl(Worksheets(Sh_Original).Cells(intOrigLineNo, OutLT))
                
                dblOrigOpenQty = CDbl(Worksheets(Sh_Original).Cells(intOrigLineNo, OutQtySup))
                If Left(Worksheets(Sh_Original).Cells(intOrigLineNo, OutCanBuy), 1) <> "'" Then
                    dblOrigPartialCancelQtyBuyer = CDbl(Worksheets(Sh_Original).Cells(intOrigLineNo, OutCanBuy))
                Else
                    dblOrigPartialCancelQtyBuyer = CDbl(Right(Worksheets(Sh_Original).Cells(intOrigLineNo, OutCanBuy), Len(Worksheets(Sh_Original).Cells(intOrigLineNo, OutCanBuy)) - 1))
                End If
                dblOrigPartialCancelQtySupplier = CDbl(Worksheets(Sh_Original).Cells(intOrigLineNo, OutCanSup))
'v6 - UOM
                sOrigUOM = Worksheets(Sh_Original).Cells(intOutputLineNo, OutUOM)

                sOrigCurrentDockDate = Worksheets(Sh_Original).Cells(intOrigLineNo, OutDockCurr)
                sOrigRequestedDockDateBuyer = Worksheets(Sh_Original).Cells(intOrigLineNo, OutDockBuyer)
                sOrigPromisedDockDateSupplier = Worksheets(Sh_Original).Cells(intOrigLineNo, OutDockSup)
                If Left(Worksheets(Sh_Original).Cells(intOrigLineNo, OutSupNum), 1) <> "'" Then
                    sOrigSupplierNumber = "'" & Worksheets(Sh_Original).Cells(intOrigLineNo, OutSupNum)
                Else
                    sOrigSupplierNumber = Worksheets(Sh_Original).Cells(intOrigLineNo, OutSupNum)
                End If
                sOrigSupplierName = Worksheets(Sh_Original).Cells(intOrigLineNo, OutSupName)
                If Left(Worksheets(Sh_Original).Cells(intOrigLineNo, OutSupSite), 1) <> "'" Then
                    sOrigSupplierSite = "'" & Worksheets(Sh_Original).Cells(intOrigLineNo, OutSupSite)
                Else
                    sOrigSupplierSite = Worksheets(Sh_Original).Cells(intOrigLineNo, OutSupSite)
                End If
                sOrigUserAction = Worksheets(Sh_Original).Cells(intOrigLineNo, OutUserActCode)
                sOrigSupplierReasonCode = Worksheets(Sh_Original).Cells(intOrigLineNo, OutSupReasonCode)
                sOrigComments = Worksheets(Sh_Original).Cells(intOrigLineNo, OutComments)
                sOrigMfg = Worksheets(Sh_Original).Cells(intOrigLineNo, OutMfr)
                If Left(Worksheets(Sh_Original).Cells(intOrigLineNo, OutMfgPart), 1) <> "'" Then
                    sOrigMfgPartNo = "'" & Worksheets(Sh_Original).Cells(intOrigLineNo, OutMfgPart)
                Else
                    sOrigMfgPartNo = Worksheets(Sh_Original).Cells(intOrigLineNo, OutMfgPart)
                End If
'V7 New Columns 9/25/06
'********************************************************************************************************
                sOrigPriceBuyer = Worksheets(Sh_Original).Cells(intOrigLineNo, OutPriceBuyer)
                sOrigPriceSupplier = Worksheets(Sh_Original).Cells(intOrigLineNo, OutPriceSupplier)
'********************************************************************************************************
                sOrigPriceCurrency = Worksheets(Sh_Original).Cells(intOrigLineNo, OutPriceCurrency)
                sOrigBuyer = Worksheets(Sh_Original).Cells(intOrigLineNo, OutBuyerName)
                sOrigLastUpdateDate = Worksheets(Sh_Original).Cells(intOrigLineNo, OutLastUpdate)
                ysnFoundOriginal = True
                ReDim aSplitPromDockDate(intSplitRow)
                Exit For
            Else
                ysnFoundOriginal = False
            End If
        Next intOrigLineNo
'******************************************
'Check Rules for each column
'1 Line ID -- No Changes
        If Not ysnFoundOriginal Then
            strErrMsg = strErrMsg & "Err:Changes to Line ID not allowed, "
            ysnErrMatch = True
            GoTo Write_Err_Msg
        End If
'2 Contract Type
'3 Action -- No Changes
        If sOutputAction <> sOrigAction Then
            strErrMsg = strErrMsg & "Err:Changes To Action Not Allowed, "
            ysnErrMatch = True
        End If

'4 Current Status -- No Changes
        If sOutputStatus <> sOrigStatus Then
            strErrMsg = strErrMsg & "Err:Changes To Current Status Not Allowed, "
            ysnErrMatch = True
        End If
'5 PO Number -- No Changes
        If sOutputPO_No <> sOrigPO_No Then
            strErrMsg = strErrMsg & "Err:Changes To PO Number Not Allowed, "
            ysnErrMatch = True
        End If
'6 Rel-Line-Sched -- No Changes
        If sOutputRel <> sOrigRel Then
            strErrMsg = strErrMsg & "Err:Changes To Rel-Line-Sched Not Allowed, "
            ysnErrMatch = True
        End If
'7 Item -- No Changes
        If sOutputItem <> sOrigItem Then
            strErrMsg = strErrMsg & "Err:Changes To Item Not Allowed, "
            ysnErrMatch = True
        End If
'v6 Desc
'8 Description -- No Commas
        sDescAnswer = ""
        sDescAnswer = sOutputDesc Like "*,*"
        If sDescAnswer = "True" Then
            strErrMsg = strErrMsg & "Err:Commas Are Not Allowed In The Description Field, "
            ysnErrMatch = True
        End If
'9 Item Rev -- No Changes
        If sOutputRev <> sOrigRev Then
            strErrMsg = strErrMsg & "Err:Changes To Item Rev Not Allowed, "
            ysnErrMatch = True
        End If
'10 Customer Item Revision -- No Changes
        If sOutputCustItemRev <> sOrigCustItemRev Then
            strErrMsg = strErrMsg & "Err:Changes To Customer Item Rev Not Allowed, "
            ysnErrMatch = True
        End If
'**************************************************************************************
'v8
'10 LT Validation.
    'a) If the supplier changes the value in this column highlight that cell in blue.
        If dblOutputLT <> dblOrigLT Then
            Worksheets(Sh_Data).Cells(intOutputLineNo, OutLT).Interior.ColorIndex = 8
    'b) If the supplier changes the value in this column make sure the
    '   new value is a positive whole number else generate an error message
    '   "LT Should be a positive whole number".
            If dblOutputLT < 0 Or Int(dblOutputLT) <> dblOutputLT Then
                strErrMsg = strErrMsg & "Err:LT Should be a positive whole number. "
            End If
        End If
    'd) For those cells with no changes make sure the color remains green as original.
    'e) No changes to split rules - that means this column should be blank for split rows.
'**************************************************************************************

'11 Open Qty (Supplier) -- No Blanks
        If Worksheets(Sh_Data).Cells(intOutputLineNo, OutQtySup) = "" Then
            strErrMsg = "Err:Open Quantity (Supplier) cannot be Blank, "
            ysnErrMatch = True
        End If
'11a Open Qty (Supplier) -- No Changes
        If dblOutputOpenQty <> dblOrigOpenQty Then
            strErrMsg = strErrMsg & "Err:Changes to the Open Qty (Supplier) are not allowed, "
            ysnErrMatch = True
        End If
'12 Partial Cancel Qty (Buyer) -- No Changes
        If dblOutputPartialCancelQtyBuyer <> dblOrigPartialCancelQtyBuyer Then
            strErrMsg = strErrMsg & "Err:Changes To Partial Cancel Qty (Buyer) Not Allowed, "
            ysnErrMatch = True
        End If
'13a Partial Cancel Qty (Supplier) -- No Blanks
        If Trim(Worksheets(Sh_Data).Cells(intOutputLineNo, OutCanSup)) = "" Then
            strErrMsg = strErrMsg & "Err:Partial Cancel Qty (Supplier) " _
                & "can not be blank, "
            ysnErrMatch = True
        End If
'Removed on v9
'13b Partial Cancel Qty (Supplier) -- can not be greater than
      'the original Partial Cancel Qty Supplier
'        If dblOutputPartialCancelQtySupplier > dblOutputPartialCancelQtyBuyer Then
'            strErrMsg = strErrMsg & "Err:Partial Cancel Qty (Supplier) " _
                & "cannot exceed Partial Cancel Qty (Buyer), "
'            ysnErrMatch = True
'        End If
'Added on v9
'13c Partial Cancel Qty (Supplier) value must be less than "Open Qty (Supplier)"
    If dblOutputPartialCancelQtySupplier >= dblOutputOpenQty Then
        Worksheets(Sh_Data).Cells(intOutputLineNo, OutCanSup).Interior.ColorIndex = 8
        strErrMsg = strErrMsg & "Partial Cancel Qty (Supplier) value must be " _
        & "less than Open Qty (Supplier), "
        ysnErrMatch = True
    End If
'v6 UOM
'14 UOM -- No Commas
        sOutputUOMAnswer = ""
        sOutputUOMAnswer = sOutputUOM Like "*,*"
        If sOutputUOMAnswer = "True" Then
            strErrMsg = strErrMsg & "Err:Commas Are Not Allowed In The UOM Field, "
            ysnErrMatch = True
        End If
'15 Current Dock Date -- No Changes
        If sOutputCurrentDockDate <> sOrigCurrentDockDate Then
            strErrMsg = strErrMsg & "Err:Changes To Current Dock Date Not Allowed, "
            ysnErrMatch = True
        End If
'16 Requested Dock Date (Buyer) -- No Changes
        If sOutputRequestedDockDateBuyer <> sOrigRequestedDockDateBuyer Then
            strErrMsg = strErrMsg & "Err:Changes To Requested Dock Date (Buyer) Not Allowed, "
            ysnErrMatch = True
        End If
'17d Promised Dock Date (Supplier) -- Check content against Action Value
        If sOutputPromisedDockDateSupplier <> sOrigPromisedDockDateSupplier Then
            Worksheets(Sh_Data).Cells(intOutputLineNo, OutDockSup).Interior.ColorIndex = 8
           If sOutputSupplierReasonCode = "" And Not ysnReasonCodeErr Then
                strErrMsg = strErrMsg & "Err:Enter Reason Code for changing the Promised Dock Date (Supplier), "
                ysnErrMatch = True
                ysnReasonCodeErr = True
            End If
        End If
'**************************************************************************************
'Changes made on v9
'v9 (c) For all actions make sure that the promise dock date (supplier)
'   is either Cancel, Cancel by LT, Cancel by Surplus or if it is a date,
'   it is not past due. Generate an error message if it is past due.
'v9 Don't look at Action, look at Promised Dock Date Supplier
'**************************************************************************************
        Select Case UCase(sOutputPromisedDockDateSupplier)
'17 c Promised Dock Date (Supplier) -- Check content against "Cancel"
            Case "CANCEL", "CANCEL BY SURPLUS", "CANCELED BY LT"
'Added on v9
'13d Partial Cancel Qty (Supplier)Value must be 0 if
'   Promised Dock Date (Supplier) is either Cancel,
'   Cancel by LT, or Cancel by Surplus.
                If dblOutputPartialCancelQtySupplier <> 0 Then
                    Worksheets(Sh_Data).Cells(intOutputLineNo, OutCanSup).Interior.ColorIndex = 8
                    strErrMsg = strErrMsg & "Partial Cancel Qty (Supplier) value must be 0 when promised dock date is a Cancel, "
                    ysnErrMatch = True
                    If sOutputSupplierReasonCode = "" Then
                        strErrMsg = strErrMsg & "Partial Cancel Qty (Supplier) value must be 0, "
                        ysnErrMatch = True
                        ysnReasonCodeErr = True
                    End If
                End If
            Case Else
'9b
'Promised Dock Date (Supplier) needs to be 'CANCEL' or a date
                If IsDate(sOutputPromisedDockDateSupplier) Then
    '17 c Promise Date not past due v8
    'v9d  the user action code is a 5, do not check for overdue date in Promised Dock Date (Supplier) field
                    If CDate(sOutputPromisedDockDateSupplier) < Date And sOutputUserAction <> "5" Then
                        strErrMsg = strErrMsg & "Err: Promised Dock Date (Supplier) is " _
                            & "Past date per your system calendar, "
                        ysnErrMatch = True
                    End If
                Else
                    strErrMsg = strErrMsg & "Err: Promised Dock Date (Supplier) needs " _
                        & "to be 'CANCEL' or a date, "
                    ysnErrMatch = True
                End If
        End Select

'17g Promised Dock Date (Supplier) - Changed or Blank
        If sOutputPromisedDockDateSupplier = "" Then
            strErrMsg = strErrMsg & "Err:Promised Dock Date (Supplier) cannot be Blank, "
            ysnErrMatch = True
        End If
'22a1 Check for blank Reason Code
        If UCase(Left(sOutputAction, 6)) <> "CANCEL" Then
            If sOutputPromisedDockDateSupplier <> sOrigPromisedDockDateSupplier _
                And sOutputSupplierReasonCode = "" And Not ysnReasonCodeErr Then
                    strErrMsg = strErrMsg & "Err: Promised Dock Date (Supplier) has been " _
                        & "changed, please enter a Reason Code, "
                    ysnErrMatch = True
                    ysnReasonCodeErr = True
            End If
        End If

'18 Supplier Number -- No Changes
        If sOutputSupplierNumber <> sOrigSupplierNumber Then
            strErrMsg = strErrMsg & "Err:Changes To Supplier Number Not Allowed, "
            ysnErrMatch = True
        End If
'19 Supplier Name -- No Commas
        If InStr(1, Worksheets(Sh_Data).Cells(intOutputLineNo, OutSupName), ",", vbTextCompare) > 0 Then
            strErrMsg = strErrMsg & "Err:Supplier Name Can Not Contain A Comma, "
            ysnErrMatch = True
        End If
'20 Supplier Site -- No Changes
        If sOutputSupplierSite <> sOrigSupplierSite Then
            strErrMsg = strErrMsg & "Err:Changes To Supplier Site Not Allowed, "
            ysnErrMatch = True
        End If
'21 User Action Code
        If sOutputUserAction = "" Then
            strErrMsg = strErrMsg & "Err:User Action Code cannot be Blank, "
            ysnErrMatch = True
        End If

'v8 change
'*******************************************************************************************
'22a Supplier Reason Code -- Check if blank (i, ii, iii)
'Only run if the user action is 3
        If sOutputUserAction = "3" Then
            If dblOutputPartialCancelQtySupplier = dblOrigPartialCancelQtySupplier _
                And sOutputPromisedDockDateSupplier = sOrigPromisedDockDateSupplier Then
'v8a
'                    If sOutputSupplierReasonCode <> "" And dblOutputLT = dblOrigLT Then
'v8
                    If sOutputSupplierReasonCode <> "" Then
                        If Worksheets(Sh_Data).Cells(intOutputLineNo, OutLineID).Offset(1, 0).Value <> "" _
                        Or Worksheets(Sh_Data).Cells(intOutputLineNo, OutLineID).Offset(1, 0).Value = "END FILE" _
                        And Not ysnReasonCodeErr Then
                                
                                strErrMsg = strErrMsg & "Err:Supplier has Accepted All " _
                                    & "recommendations with No Change - " _
                                    & "Do Not Enter Reason Code, "
                                ysnErrMatch = True
                                ysnReasonCodeErr = True
                        End If
                    End If
            End If
        End If
'*******************************************************************************************
'22b Supplier Reason Code -- Check if blank
'v9
'7.  A reason code should be populated in the original row for splits.

        If UCase(Left(sOutputAction, 6)) <> "CANCEL" Then
            If dblOutputPartialCancelQtySupplier <> dblOrigPartialCancelQtySupplier _
                Or sOutputPromisedDockDateSupplier <> sOrigPromisedDockDateSupplier _
                Or Worksheets(Sh_Data).Cells(intOutputLineNo, OutLineID).Offset(1, 0).Value = "" Then
                    If sOutputSupplierReasonCode = "" And Not ysnReasonCodeErr Then
                        strErrMsg = strErrMsg & "Err: The Partial Cancel Qty (Supplier), " _
                        & "Promised Dock Date (Supplier) has been changed or the line has been split, " _
                        & "please enter a Reason Code, "
                        ysnErrMatch = True
                        ysnReasonCodeErr = True
                    End If
            End If
        End If
'22c Supplier Reason Code -- If User Action Code = 5 then enter a reason.
        If sOutputUserAction = "5" Then
           If sOutputSupplierReasonCode = "" And Not ysnReasonCodeErr Then
                strErrMsg = strErrMsg & "Err:Enter Reason Code for Reject (User Action Code 5), "
                ysnErrMatch = True
                ysnReasonCodeErr = True
            End If
        End If
'23a Comments
        If sOutputComments <> "" Then
            If InStr(1, sOutputComments, ",") > 0 Then
                strErrMsg = strErrMsg & "Err:Comma character not allowed in Comments field. "
                ysnErrMatch = True
            End If
        End If
'23b Supplier Reason Code/Comments - Reason Code = OTHER
        If UCase(sOutputSupplierReasonCode) = "OTHER" Then
            If sOutputComments = "" Then
                strErrMsg = strErrMsg & "Err:Enter Comments in comments field for reason code OTHER, "
                ysnErrMatch = True
            End If
        End If
'24 Buyer Comments - No Comma's
        If InStr(1, Worksheets(Sh_Data).Cells(intOutputLineNo, OutBuyerComments), ",", vbTextCompare) > 0 Then
                strErrMsg = strErrMsg & "Err:Buyer Comments Can Not Contain A Comma, "
                ysnErrMatch = True
        End If
'25 Manufacturer -- No Comma's
        If InStr(1, Worksheets(Sh_Data).Cells(intOutputLineNo, OutMfr), ",", vbTextCompare) > 0 Then
                strErrMsg = strErrMsg & "Err:Manufacturer Can Not Contain A Comma, "
                ysnErrMatch = True
        End If
'26 Mfr Part Number -- No Comma's
        If InStr(1, Worksheets(Sh_Data).Cells(intOutputLineNo, OutMfgPart), ",", vbTextCompare) > 0 Then
                strErrMsg = strErrMsg & "Err:Manufacturer Part Number Can Not Contain A Comma, "
                ysnErrMatch = True
        End If
'V7 New Columns 9/25/06
'********************************************************************************************************
'27 Price Buyer -- No Changes
        If sOutputPriceBuyer <> sOrigPriceBuyer Then
            strErrMsg = strErrMsg & "Err:Changes To Price Buyer Not Allowed, "
            ysnErrMatch = True
        End If
'v8a - If blank treat as 0
        If Trim(sOutputPriceBuyer) = "" Then sOutputPriceBuyer = "0"

'28 Price Supplier Color if Changed.
        If sOutputPriceSupplier <> sOrigPriceSupplier Then
            Worksheets(Sh_Data).Cells(intOutputLineNo, OutPriceSupplier).Interior.ColorIndex = 8
        End If
'28a Price Supplier -- Numbers >= 0 only
'v8a - If blank treat as 0
        If Trim(sOutputPriceSupplier) = "" Then sOutputPriceSupplier = "0"
        If Not IsNumeric(sOutputPriceSupplier) Or sOutputPriceSupplier < 0 Then
            strErrMsg = strErrMsg & "Err:The Price Supplier is not a number or is less than 0, "
            ysnErrMatch = True
        End If
'********************************************************************************************************
'29 Price Currency -- No Changes
        If sOutputPriceCurrency <> sOrigPriceCurrency Then
                strErrMsg = strErrMsg & "Err:Changes To Price Currency Not Allowed, "
                ysnErrMatch = True
        End If
'30 Buyer -- No Comma's
        If InStr(1, Worksheets(Sh_Data).Cells(intOutputLineNo, OutBuyerName), ",", vbTextCompare) > 0 Then
                strErrMsg = strErrMsg & "Err:Buyer Can Not Contain A Comma, "
                ysnErrMatch = True
        End If
'31 Last Update Date -- No Changes
        If sOutputLastUpdateDate <> sOrigLastUpdateDate Then
                strErrMsg = strErrMsg & "Err:Changes To Last Updated Date Not Allowed, "
                ysnErrMatch = True
        End If
'*************************************************************************************************
'SPLIT LINES
'*************************************************************************************************
'Set variables for adding up inserted (split) lines
        If ysnSplitMatch = False And intSplitRow > 0 And ysnSplitMatchErr = False Then
            'The supplier can split the original PO quantity.
            'When the supplier splits make sure the split quantity adds up to the original quantity.
'v9
'6. The qty in the split rows should add up to the original qty.
'   That is the sum of supplier's split quantities + supplier partial cancel qty = Open Qty (Supplier)
            If dblSplitQty + dblPartialCancelQty <> dblTotalSplitQty Then
                Cells(intOutputLineNo, OutMacroRemarks).Offset(-1, 0) = _
                    Trim(Cells(intOutputLineNo, OutMacroRemarks).Offset(-1, 0).Value _
                    & "Err: The Total Split Open Qty does not equal the Original Open Qty,")
                Cells(intOutputLineNo, OutMacroRemarks).Offset(-1, 0).Select
                With Selection.Interior
                    .ColorIndex = 3
                    .Pattern = xlSolid
                End With
                ysnErrMatch = True
            End If
            intSplitRow = 0
        End If
        If ysnSplitMatch = False Then
            sOutputTotalLineID = sOutputLineID
            dblTotalSplitQty = CDbl(dblOutputOpenQty)
            dblPartialCancelQty = CDbl(dblOutputPartialCancelQtySupplier)
            dblSplitQty = 0
            intSplitRow = 0
        End If
'****************************************************************************
' Run if user inserts a new line (Split)
'****************************************************************************
    Else
        ysnSplitMatch = True
        intSplitRow = intSplitRow + 1
        ReDim Preserve aSplitPromDockDate(intSplitRow)
'Check each column for an entry
        For IntSplit = OutAction To OutLastUpdate
            Select Case IntSplit
'v8
'e) No changes to split rules - that means this column should be blank for split rows.
'***************************************************************************************************
'v9
'3.  For split rows all columns except "Open Qty (Supplier)" and "Promise Dock Date (Supplier)" should be blank
                Case OutLT 'LT
                    If ThisWorkbook.Worksheets(Sh_Data).Cells(intOutputLineNo, OutLT) <> "" Then
                        strErrMsg = strErrMsg & "Err:For split records LT must be blank, "
                        ysnErrMatch = True
                    End If
'v9
'4. Open Qty (Supplier)" and "Promise Dock Date (Supplier)" must be populated for split rows
                Case OutQtySup 'Open Qty (Supplier)
                    If ThisWorkbook.Worksheets(Sh_Data).Cells(intOutputLineNo, OutQtySup) = "" Or _
                       ThisWorkbook.Worksheets(Sh_Data).Cells(intOutputLineNo, OutQtySup) = 0 Then
                        strErrMsg = strErrMsg & "Err:For split records Open Qty(Supplier) can not be blank or zero, "
                        ysnErrMatch = True
                    End If
                    dblSplitQty = dblSplitQty + CDbl(dblOutputOpenQty)
                Case OutDockSup 'Promised Dock Date (Supplier)
                    sOutputPromisedDockDateSupplier = Worksheets(Sh_Data).Cells(intOutputLineNo, OutDockSup)
                    If ThisWorkbook.Worksheets(Sh_Data).Cells(intOutputLineNo, OutDockSup) = "" Then
                        strErrMsg = strErrMsg & "Err:For split records Promised Dock Date (Supplier) can not be blank, "
                        ysnErrMatch = True
                    Else
'v9
'5. Dates in the "Promise Dock Date (Supplier)" split rows should all be different.
'   (Do not include the date in the original row for this comparison.)
                    'Check to see if the Promised Dock Date (Supplier) is duplicated
                        aSplitPromDockDate(intSplitRow) = Worksheets(Sh_Data).Cells(intOutputLineNo, OutDockSup)
                        If intSplitRow > 1 Then
                            For x = 1 To intSplitRow - 1
                                If aSplitPromDockDate(x) = aSplitPromDockDate(intSplitRow) Then
                                    strErrMsg = strErrMsg & "Err:For split records Promised Dock Date (Supplier) must be different on each line, "
                                    ysnErrMatch = True
                                End If
                            Next x
                        End If
                    End If
                Case OutAction  'For cancel recommendations, that is 'cancel by LT', 'cancel by surplus'
                                'and 'cancel' do not allow the supplier to split. - rb 22-Apr-05
                    If intSplitRow = 1 Then
'***************************************************************************************************
'v9 Change from Action to Promised Dock Date (Supplier )
'2  If the "Promise Dock Date (Supplier)" is Cancel, Cancel by LT, or Cancel by Surplus, then that
'   row cannot be split.  "Promise Dock Date (Supplier)" must be a date to be split.
'   Err: Cancel responses can not be split
                        If UCase(Left(Worksheets(Sh_Data).Cells(intOutputLineNo - 1, OutDockSup), 6)) = "CANCEL" _
                        Or UCase(Left(Worksheets(Sh_Data).Cells(intOutputLineNo - 1, OutDockSup), 6)) = "CANCEL BY SURPLUS" _
                        Or UCase(Left(Worksheets(Sh_Data).Cells(intOutputLineNo - 1, OutDockSup), 6)) = "CANCELED BY LT" Then
                            strErrMsg = strErrMsg & "Err: Canceled responses can not be split, "
                            ysnErrMatch = True
                            ysnSplitMatchErr = True
                        ElseIf Not IsDate(sOutputPromisedDockDateSupplier) Then
                            strErrMsg = strErrMsg & "Err: Promise Dock Date (Supplier) must be a date to be split, "
                            ysnErrMatch = True
                            ysnSplitMatchErr = True
                        Else
                           ysnSplitMatchErr = False
                        End If
                    End If
                Case Else
                    If ThisWorkbook.Worksheets(Sh_Data).Cells(intOutputLineNo, IntSplit) <> "" Then
                        strErrMsg = strErrMsg & "Err:Changes to Line ID not allowed OR " _
                                & "for split records all fields except Open Quantity (Supplier) " _
                                & "and Promised Dock Date (Supplier) should be blank, "
                        ysnErrMatch = True
                        ysnSplitMatch = False
                        GoTo End_Split
                    End If
            End Select
        Next IntSplit
End_Split:
    End If
'***************************************************************************************
Write_Err_Msg:
    If strErrMsg <> "" Then
        Cells(intOutputLineNo, OutMacroRemarks) = strErrMsg
        Cells(intOutputLineNo, OutMacroRemarks).Select
        With Selection.Interior
            .ColorIndex = 3
            .Pattern = xlSolid
        End With
    End If

Next intOutputLineNo

If ysnErrMatch Then
    MsgBox "Errors found. Check the 'Errors and Remarks' column for details." & Chr(13) & _
     "Correct the errors and rerun the macro to verify.", vbCritical, "Errors Found"
Else
    If ysnRemarkMatch Then
        MsgBox "No Errors found. Review the 'Errors and Remarks' " _
            & "column for other comments!", vbExclamation, "No Errors"
    Else
        MsgBox "No Errors found!", vbExclamation, "No Errors"
        Worksheets(Sh_Data).Cells(1, OutMacroRemarks).Interior.ColorIndex = xlColorIndexNone
        ThisWorkbook.Worksheets(Sh_Data).Columns(OutMacroRemarks).Delete
    End If
End If

SupplierToCheck_Exit:
Exit Sub

SupplierToCheck_Err:
    MsgBox "Error running validation." & Chr(13) & Err.Number & " - " & Err.Description, vbCritical, "Error"
    Resume SupplierToCheck_Exit
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
