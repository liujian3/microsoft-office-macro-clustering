Attribute VB_Name = "Create_TestSheets2"
Sub CreateTestSheet()

'3.3.3 v1.2 Don't add Description to Comment if Description is Blank

Dim nrOfSheets      As Integer
Dim s               As Integer
Dim NrOfRows        As Long
Dim xxNrOfVisibleRows   As Long             'v1.0 A3: New field for filter control
Dim NrOfMP          As Integer
Dim MP              As Integer
Dim NrOfTstRows     As Integer
Dim n               As Long
Dim i               As Long
Dim z               As Long
Dim x               As Long
Dim r               As Long
Dim NrOfScen        As Integer
Dim nrOfSubp        As Integer
Dim NrOfProc        As Integer
Dim nrOfMPArea      As Integer
Dim nrOfSolArea     As Integer
Dim nrOfTopArea     As Integer

Dim ScenRow(50)     As Integer
Dim SubpRow(50)     As Integer
Dim ProcRow(50)     As Integer
Dim MPAreaRow(20)   As Integer
Dim SolAreaRow(20)  As Integer
Dim TopAreaRow(20)  As Integer

Dim ChkNotTst       As Boolean
Dim xxMacroEnable   As Boolean
Dim xxExclAct       As Boolean
Dim xxSelectLang    As String
Dim ScenarioID      As String

Dim xxFiltProcess   As String            'v1.0 A3: New field for filter control
Dim CellType        As String
Dim PrevCellType    As String
Dim nameOfNewSheet  As String
Dim nameOfMP        As String
Dim FiltAreaMP      As String
Dim FiltArr(1 To 5) As String
Dim FiltAreaProcess As String
Dim FiltAreaSol     As String
Dim FileName        As String
Dim MasterFileName  As String
Dim NewFileName     As String
Dim FilePath        As String
Dim ExecPath        As String  'Path to where Excel is executed from. Here it will create a temp xlsx file that later is Saved As to File Path to get Hyperlinks correct.
Dim NewBook         As Workbook
Dim MasterBook      As Workbook
Dim wsStrPg         As Worksheet
Dim wsScn           As Worksheet
Dim wsTst           As Worksheet
Dim wsBasDt         As Worksheet
Dim wsNew           As Worksheet
Dim wsMPL           As Worksheet
'Dim rng             As Range
Dim rngAct          As Range

    Set MasterBook = ThisWorkbook
    Set wsScn = MasterBook.Sheets("Scenario overview")
    Set wsStrPg = MasterBook.Sheets("Start Page")
    
    '1.0 a1: Unhide all hidden tabs
    Worksheets("ScopeInfo").Visible = True
    Worksheets("MPList").Visible = True
    Worksheets("SolutionList").Visible = True
    Worksheets("SolutionMPList").Visible = True
    Worksheets("Scenario overview").Visible = True
    Worksheets("Scenario overview").Visible = True
    Worksheets("TestTemplate").Visible = True
    Worksheets("Test overview").Visible = True
    Worksheets("Basic Data Test Doc").Visible = True
    Worksheets("Bad Records").Visible = True
    wsStrPg.Activate
    
    nrOfSheet = MasterBook.Sheets.Count
    
'    NrOfRows = wsScn.Cells(Rows.Count, "A").End(xlUp).row
    NrOfRows = wsScn.Cells.SpecialCells(xlCellTypeLastCell).row
    Set wsBasDt = MasterBook.Sheets("Basic Data Test Doc")
    Set wsMPL = MasterBook.Sheets("MPList")
    NrOfMP = wsMPL.Cells(Rows.Count, "A").End(xlUp).row - 2
    MasterFileName = MasterBook.FullName
    ExecPath = Mid(MasterFileName, 1, Len(MasterFileName) - Len(MasterBook.Name))
    wsBasDt.Cells(13, "F") = ExecPath

    prtTest.Show
    
    If wsBasDt.Cells(16, "F") = "Cancel" Then GoTo Cancelled Else         'Check Cancel
    
    Application.ScreenUpdating = False
    
    xxMacroEnable = wsBasDt.Cells(15, "F").Value
    xxSelectLang = wsBasDt.Cells(20, "F")                               'Selected Language for Data
    xxExclAct = wsBasDt.Cells(19, "F")
    
    ' Set Filter values for Include/Exclude etx to filtering the list
    For f = 1 To 4
      If wsBasDt.Cells(f + 3, "I") = True Then
        FiltArr(f) = wsBasDt.Cells(f + 3, "J").Value
      End If
    Next

    
    If xxSelectLang <> "" Then                                                              '3.3.22 New test structure
        wsScn.Range("$A$6:$AZ$" & NrOfRows).AutoFilter Field:=18, Criteria1:=xxSelectLang   '3.3.22 New test structure
    End If                                                                                  '3.3.22 New test structure
    
    
'******************* Create HyperLink ********************************************************************
    If wsBasDt.Cells(11, "F") <> 0 Then                                         '3.3.22 Generate new Help text Hyperlinks in Activity List
        If wsBasDt.Cells(9, "F") = "" Then                                      'Check if Help text Folder is not blank
            wsScn.Hyperlinks.Delete                                             'v1.0 A3: Use Scenario Overview instead of ActivityList
            If wsBasDt.Cells(12, "F") = "" Then
                wsBasDt.Cells(12, "F") = "https://scopetool.ifsworld.com/_IFS-Application-Helpfiles-9/"
            End If 'If wsBasDt.Cells(12, "F") = "" Then
            wsBasDt.Cells(9, "F") = wsBasDt.Cells(12, "F")                      'Use Default value if Blank
        End If 'If wsBasDt.Cells(9, "F") <> "" Then
        PreLink = wsBasDt.Cells(9, "F")
        For n = 2 To wsScn.Cells(Rows.Count, "A").End(xlUp).row                 'v1.0 A3: Use Scenario Overview instead of ActivityList
            xLink = ""
            Lnk1 = ""
            If wsScn.Cells(n, "A") = "Activity" Then                            'v1.0 A3: Use Scenario Overview instead of ActivityList
              Col = 20                                                          'v1.0 A3: Use Scenario Overview instead of ActivityList
              While Right(wsScn.Cells(n, Col + 1), 3) <> "htm" And Col < 50     'v1.0 A3: Use Scenario Overview instead of ActivityList
                Col = Col + 3                                                   'v1.0 A3: Use Scenario Overview instead of ActivityList
              Wend                                                              'v1.0 A3: Use Scenario Overview instead of ActivityList
              If Col < 50 Then            ' Link found if Col < 50              'v1.0 A3: Use Scenario Overview instead of ActivityList
                xxPos = InStr(1, wsScn.Cells(n, Col + 1), "}")                  'v1.0 A3: Use Scenario Overview instead of ActivityList
                If xxPos > 0 Then                                               'v1.0 A3: Use Scenario Overview instead of ActivityList
                  Lnk1 = Mid(wsScn.Cells(n, Col + 1), xxPos + 1)                'v1.0 A3: Use Scenario Overview instead of ActivityList
                Else                                                            'v1.0 A3: Use Scenario Overview instead of ActivityList
                  Lnk1 = wsScn.Cells(n, Col + 1)                                'v1.0 A3: Use Scenario Overview instead of ActivityList
                End If                                                          'v1.0 A3: Use Scenario Overview instead of ActivityList
              End If                                                            'v1.0 A3: Use Scenario Overview instead of ActivityList
                
                ActivityName = wsScn.Cells(n, "F")                              'v1.0 A3: Use Scenario Overview instead of ActivityList
                If Lnk1 <> "" And PreLink <> "" Then
                    xLink = PreLink & Lnk1
                    wsScn.Hyperlinks.Add Anchor:=wsScn.Range(wsScn.Cells(n, "F"), wsScn.Cells(n, "F")), Address:=xLink, TextToDisplay:=ActivityName  'v1.0 A3: Use Scenario Overview instead of ActivityList
                End If 'If Link <> "" Then
            End If 'If wsScn.Cells(n, "E") = "ACTIVITY" Then
        Next
    Else
        wsScn.Hyperlinks.Delete                                                 'v1.0 A3: Use Scenario Overview instead of ActivityList
    End If  'wsBasDt.Cells(11, "F") <> 0 Then
    
    
' ******************************* Set Not Tested Yet *************************************************************
    ChkNotTst = wsBasDt.Cells(7, "F")
    
    
' *****************************  Loop for Each Main Process that should be generated  ****************************
    'Check if MPList = "*All"
    If wsBasDt.Cells(6, "F") = True Then
      wsBasDt.Cells(5, "F") = wsMPL.Cells(3, "A")   ' Get first MP Area if all MP should be generated
    Else
      NrOfMP = 1
    End If
    
    For MP = 1 To NrOfMP
    
    If MP > 1 Then
      wsBasDt.Cells(5, "F") = wsMPL.Cells(2 + MP, "A")
    End If
        
    nameOfMP = wsBasDt.Cells(5, "F")
    Application.StatusBar = "Create Test Sheets for Main Process " & nameOfMP
    wsStrPg.Cells(20, "G") = 0
        
' *****************************  Create File name for Test document  *************************************
    FilePath = wsBasDt.Cells(8, "F") & "\"
    If wsBasDt.Cells(5, "F") <> "*All" Or wsBasDt.Cells(6, "F") = True Then
      FileName = wsBasDt.Cells(4, "F").Formula & " " & wsBasDt.Cells(5, "F").Formula
      If wsBasDt.Cells(18, "F") <> "" And wsBasDt.Cells(18, "F") <> "*All" Then
        FileName = FileName & " for " & wsBasDt.Cells(18, "F").Formula
      End If
    Else
      FileName = wsBasDt.Cells(4, "F").Formula & " " & wsBasDt.Cells(14, "F").Formula
    End If
    
    FileName = Replace(FileName, ".", "", 1)
    FileName = Replace(FileName, "/", "", 1)
    NewFileName = FilePath & FileName & ".xlsm"
    
    MasterBook.Save
    Application.DisplayAlerts = True
    NewFileName = GetNextAvailableName(NewFileName)
    wsBasDt.Cells(22, "F") = Mid(NewFileName, Len(FilePath) + 1)
    MasterBook.SaveCopyAs FileName:=NewFileName
    
    Set NewBook = Workbooks.Open(NewFileName)
    
    Application.DisplayAlerts = False
    NewBook.Sheets("VersionLog").Delete
    NewBook.Sheets("Start Page").Delete
    NewBook.Sheets("ScopeInfo").Delete
    NewBook.Sheets("SolutionList").Delete
    NewBook.Sheets("MPList").Delete
    NewBook.Sheets("SolutionMPList").Delete
    NewBook.Sheets("Bad Records").Delete
    Application.DisplayAlerts = True
    
    Set wsScn = NewBook.Sheets("Scenario overview")
        
    nrOfSheets = NewBook.Sheets.Count

'********* Create Test Template and fix language on headers in New Book ***********************************
    'List of value for Status
    With NewBook.Sheets("TestTemplate").Range("E13:E17")
        .Copy
        .PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End With
    
    'Case Headings
    With NewBook.Sheets("TestTemplate").Range("B1:AV2")
        .Copy
        .PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End With
    
    'Case Data Headings
    With NewBook.Sheets("TestTemplate").Range("A3:AV7")
        .Copy
        .PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End With
    
    'Step Heading
    With NewBook.Sheets("TestTemplate").Range("A18:AV18")
        .Copy
        .PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End With
    

'**************Create Test Overview and fix language on headers in New book *********************************
    nrOfSheets = NewBook.Sheets.Count
    Set wsTst = NewBook.Sheets("Test overview")
    
    '1.0 A1: Ranges for translations updated to match new ranges for headings
    
    'List of value Test status
    With wsTst.Range("CY1:CY5")
        .Copy
        .PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End With
    
    'List of value Solution status
    With wsTst.Range("CW1:CW5")
        .Copy
        .PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End With
    
    'List of value Test cycle defintion
    With wsTst.Range("DA1:DJ4")
        .Copy
        .PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End With
    
    'List of value Yes/No
    With wsTst.Range("DL1:DL2")
        .Copy
        .PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End With
    
    'Heading and parameters
    With wsTst.Range("A1:Q5")
        .Copy
        .PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End With
    
    'Solution and test status headings
    With wsTst.Range("S1:AI1")
        .Copy
        .PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End With
    
    'Test status in heading
    With wsTst.Range("AH2:AH5")
        .Copy
        .PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End With
    
    'Row Headings
    With wsTst.Range("A6:AI6")
        .Copy
        .PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End With
    

'**************** Save New Book first time ******************************************************************************
'    If xxMacroEnable = 0 Then
'        NewBook.SaveAs FileName:=FilePath & FileName & ".xlsx", FileFormat:=51
'    Else
        NewBook.Save
'    End If
    wsStrPg.Activate
    
'***************** Set filter for what to be included in this Test Book *************************************************
    'Filter Value for Solution
    FiltAreaSol = "=" & wsBasDt.Cells(14, "F")
    
    'Filter Value for MP Area
    If wsBasDt.Cells(5, "F") <> "*All" Or wsBasDt.Cells(6, "F") = True Then
      FiltAreaMP = "=" & wsBasDt.Cells(5, "F")
    Else
      FiltAreaMP = ""
    End If
    
    'Filter Value for Process
    If wsBasDt.Cells(18, "F") = "*All" Or wsBasDt.Cells(18, "F") = "" Then
      FiltAreaProcess = ""
    Else
      FiltAreaProcess = "=" & wsBasDt.Cells(18, "F")
    End If
    
'********************** Create Test Overview page with Lines and formulas and formats   *********************************
    wsScn.Range("$A$6:$BZ$" & NrOfRows).AutoFilter Field:=1, Criteria1:=Array( _
        "MP Area", "Process", "Requirement", "Scenario", "Solution Area", "Sub process"), Operator:=xlFilterValues    '3.3.3 v1.1 Handle more record types in extended CSV file
    wsScn.Range("$A$6:$AA$" & NrOfRows).AutoFilter Field:=15, Criteria1:=FiltAreaSol    'Filter Solution Area
    wsScn.Range("$A$6:$AA$" & NrOfRows).AutoFilter Field:=12, Criteria1:=FiltArr, Operator:=xlFilterValues     'Filter Included
    If FiltAreaMP <> "" Then
      wsScn.Range("$A$6:$AA$" & NrOfRows).AutoFilter Field:=14, Criteria1:=FiltAreaMP   'Filter MP Area
      If FiltAreaProcess <> "" Then
        wsScn.Range("$A$6:$AA$" & NrOfRows).AutoFilter Field:=13, Criteria1:=FiltAreaProcess
      End If
    Else
      wsScn.Range("$A$6:$AA$" & NrOfRows).AutoFilter Field:=14                           'Filter MP Area is blank
    End If
    NrOfRows = wsScn.Cells(Rows.Count, "A").End(xlUp).row
    wsScn.AutoFilter.Range.Offset(1, 0).Columns("A:R").Copy
    wsTst.Range("A7").PasteSpecial xlPasteValues
        
    NrOfTstRows = wsTst.Cells(Rows.Count, "A").End(xlUp).row
    
    wsTst.Unprotect
    
    wsTst.Range("S7:CG7").Copy                                        '1.0 A1: Additional columns in the overview sheet
    wsTst.Range("S8:CG" & NrOfTstRows).PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, SkipBlanks:=False, Transpose:=False      '1.0 A1: Additional columns in the overview sheet
    
    wsTst.Range("AI7").Copy             '1.0 A1 Additional columns in the overview sheet
    wsTst.Range("AI8:CG" & NrOfTstRows).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False                                'v1.0 A1: Additional columns in the overview sheet
    
    wsTst.Cells(7, "S") = wsTst.Cells(1, "CW")                              'v1.0 A1: New place for list of value for status
    wsTst.Cells(7, "V") = wsTst.Cells(1, "CW")                              'v1.0 A1: New place for list of value
    wsTst.Cells(7, "Y") = wsTst.Cells(1, "CW")                              'v1.0 A1: New status column
    wsTst.Cells(7, "AB") = wsTst.Cells(1, "CW")                             'v1.0 A1: New status column
    wsTst.Range("S7:AH7").Copy                                              'v1.0 A1: Extended range to include new status columns
    wsTst.Range("S8:AH" & NrOfTstRows).PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False                                 'v1.0 A1: Extended range to include new status columns

    
'************ Handle BDR and CSR Customer Specified Requirements *******************************************
   With wsTst
   For r = NrOfTstRows To 7 Step -1                                     '3.3.3 v1.1 Remove BDR Requirements
     If .Cells(r, "A") = "Requirement" Then
        If .Cells(r, "H") = "Customer Specified Requirement (CSR)" Then '3.3.3 v1.1 Remove BDR Requirements
            .Cells(r, "AH") = wsTst.Cells(5, "CY")                      'v1.0 A1: Manual status moved to column AH
            .Cells(r, "E") = ""                                         '3.3.3 v1.1 Set all CSR requirement as "Manually Not Tested yet as default
            If wsTst.Cells(r, "G").Value <> "" Then                     '3.3.3 v1.2 Don't add Description to Comment if Description is Blank
                .Range("F" & r).ClearComments                               '3.3.3 v1.1 Add Comment from Description to Name Cell
                .Range("F" & r).AddComment (wsTst.Cells(r, "G").Value)      '3.3.3 v1.1 Add Comment from Description to Name Cell
                With .Range("F" & r).Comment.Shape                          '3.3.3 v1.1 Adjust size of Comment
                    .TextFrame.AutoSize = True                              '3.3.3 v1.1 Adjust size of Comment
                    lArea = .Width * .Height                                '3.3.3 v1.1 Adjust size of Comment
                    .Width = 400                                            '3.3.3 v1.1 Adjust size of Comment
                    .Height = (lArea / .Width) + 40                         '3.3.3 v1.1 Adjust size of Comment
                    .TextFrame.AutoMargins = False                          '3.3.3 v1.1 Adjust size of Comment
                    .TextFrame.MarginBottom = 0                             '3.3.3 v1.1 Adjust size of Comment
                    .TextFrame.MarginTop = 0                                '3.3.3 v1.1 Adjust size of Comment
                    .TextFrame.MarginLeft = 0                               '3.3.3 v1.1 Adjust size of Comment
                    .TextFrame.MarginRight = 0                              '3.3.3 v1.1 Adjust size of Comment
                End With                                                    '3.3.3 v1.1 Adjust size of Comment
            End If 'If wsTst.Cells(r, "G").Value <> "" Then             '3.3.3 v1.2 Don't add Description to Comment if Description is Blank
            .Cells(r, "S") = ""
            .Range("S" & r).Validation.Delete
            .Range("S" & r).FormatConditions.Delete
            .Range("S" & r).Locked = 1
            .Cells(r, "V") = ""
            .Range("V" & r).Validation.Delete
            .Range("V" & r).FormatConditions.Delete
            .Range("V" & r).Locked = 1
            .Cells(r, "Y") = ""                                         'v1.0 A1: New status column
            .Range("Y" & r).Validation.Delete                           'v1.0 A1: New status column
            .Range("Y" & r).FormatConditions.Delete                     'v1.0 A1: New status column
            .Range("Y" & r).Locked = 1                                  'v1.0 A1: New status column
            .Cells(r, "AB") = ""                                         'v1.0 A1: New status column
            .Range("AB" & r).Validation.Delete                           'v1.0 A1: New status column
            .Range("AB" & r).FormatConditions.Delete                     'v1.0 A1: New status column
            .Range("AB" & r).Locked = 1                                  'v1.0 A1: New status column

        Else
            .Rows(r).Delete                                                 '3.3.3 v1.1 Remove BDR Requirements
        End If 'If wsTst.Cells(r, "H") <> "Customer Specified Requirement (CSR)"
      End If 'If wsTst.Cells(r, "A") = "Requirement" Then                   '3.3.3 v1.1 Remove BDR Requirements
    Next ' For r = NrOfTstRows To 7 Step -1                                 '3.3.3 v1.1 Remove BDR Requirements
    End With ' With wsTst


'**************** Handle Test Rows and its Activities ******************************************************
    Set rngTst = wsTst.Range("A7:CI" & NrOfTstRows)                     '3.3.2 v929 Extend the Array to 50
    rngTst.Sort Key1:=rngTst.Range("B7"), Order1:=xlAscending, Header:=xlNo
    
    With wsTst

    nameOfNewSheet = ""
    
    For i = 7 To NrOfTstRows
        Application.ScreenUpdating = True
        Application.StatusBar = "Create Test Sheets for Main Process " & nameOfMP & " adding scenarios " & i - 6 & " of " & NrOfTstRows - 6
        wsStrPg.Cells(20, "G") = (i - 6) / (NrOfTstRows - 6)
        Application.ScreenUpdating = False

      If .Cells(i, "A") = "Scenario" Then
        If .Cells(i, "B") <> nameOfNewSheet Then
          xxFiltProcess = .Cells(i, "M")
          nameOfNewSheet = .Cells(i, "B")
          xxWebID = .Cells(i, "B")
          z = 1
    
          nrOfSheets = NewBook.Sheets.Count
    
          NewBook.Sheets("TestTemplate").Copy After:=NewBook.Sheets(nrOfSheets)
    
          Set wsNew = NewBook.Sheets(nrOfSheets + 1)
          wsNew.Unprotect
          
          wsNew.Name = nameOfNewSheet
          With wsNew
            .Range("B1").Value = nameOfNewSheet
            
            ScenarioID = Replace(.Range("B1").Value, ".", "_")
            ScenarioID = "Scenario_" & ScenarioID
            .Hyperlinks.Add Anchor:=.Range("A1"), Address:="", SubAddress:=ScenarioID, TextToDisplay:="Test overview"
           
            .Range("C1").Value = wsTst.Cells(i, "F")
            .Range("H" & z + 1).Value = z & " " & wsTst.Cells(i, "M") & " / " & wsTst.Cells(i, "N") & " / " & wsTst.Cells(i, "O") & " / " & wsTst.Cells(i, "M")
    
            With wsScn                                                      'v1.0 A3: Use Scenario Overview instead of ActivityList
              n = .Cells(Rows.Count, "A").End(xlUp).row
              Set rngAct = .Range("A6:BP" & n)                              'v1.0 A3: Use Scenario Overview instead of ActivityList
            End With  'With wsScn
    
            With rngAct                                                     'v1.0 A3: Use Scenario Overview instead of ActivityList
              If FiltAreaMP <> "" Then                                      'v1.0 A3: Use Scenario Overview instead of ActivityList
                .AutoFilter Field:=14, Criteria1:=FiltAreaMP   'Filter MP   'v1.0 A3: Use Scenario Overview instead of ActivityList
                If FiltAreaProcess <> "" Then                               'v1.0 A3: Use Scenario Overview instead of ActivityList
                  .AutoFilter Field:=13, Criteria1:=FiltAreaProcess         'v1.0 A3: Use Scenario Overview instead of ActivityList
                Else                                                        'v1.0 A3: Use Scenario Overview instead of ActivityList
                  .AutoFilter Field:=13, Criteria1:=xxFiltProcess           'v1.0 A3: Use Scenario Overview instead of ActivityList
                End If                                                      'v1.0 A3: Use Scenario Overview instead of ActivityList
              Else                                                          'v1.0 A3: Use Scenario Overview instead of ActivityList
                .AutoFilter Field:=14       'Filter MP Area is blank        'v1.0 A3: Use Scenario Overview instead of ActivityList
              End If                                                        'v1.0 A3: Use Scenario Overview instead of ActivityList

              .AutoFilter Field:=1, Criteria1:=Array("Activity", "Text"), Operator:=xlFilterValues 'v1.0 A3: Use Scenario Overview instead of ActivityList
              .AutoFilter Field:=2, Criteria1:=xxWebID                      'v1.0 A3: Use Scenario Overview instead of ActivityList
              If xxExclAct = 0 Then                                         'v1.0 A3: Use Scenario Overview instead of ActivityList
              .AutoFilter Field:=12, Criteria1:=FiltArr, Operator:=xlFilterValues 'v1.0 A3: Use Scenario Overview instead of ActivityList
              End If                                                        'v1.0 A3: Use Scenario Overview instead of ActivityList
              
              xxNrOfVisibleRows = wsScn.AutoFilter.Range.Columns(5).SpecialCells(xlCellTypeVisible).Cells.Count - 1 'v1.0 A3: Use Scenario Overview instead of ActivityList
              If xxNrOfVisibleRows > 0 Then                                 'v1.0 A3: Use Scenario Overview instead of ActivityList
              
                wsScn.AutoFilter.Range.Offset(1, 0).Columns("F").Copy 'v1.0 A3: Use Scenario Overview instead of ActivityList
                wsNew.Cells(20, 2).PasteSpecial xlPasteAll
              
                wsScn.AutoFilter.Range.Offset(1, 0).Columns("A").Copy 'v1.0 A3: Use Scenario Overview instead of ActivityList
                wsNew.Cells(20, 6).PasteSpecial Paste:=xlValues
              
                wsScn.AutoFilter.Range.Offset(1, 0).Columns("L").Copy 'v1.0 A3: Use Scenario Overview instead of ActivityList
                wsNew.Cells(20, 7).PasteSpecial xlPasteValues
                
              End If 'If wsScn.AutoFilter.Range.Offset(1, 0).Resize(.Rows.Count - 1).SpecialCells(xlCellTypeVisible).Count > 0 Then
              
              If ChkNotTst = True Then
                r = 20
                While r < 70 And wsNew.Cells(r, 2) <> ""
                  If wsNew.Cells(r, 7) = "Excluded" Then
                    wsNew.Cells(r, 9) = wsNew.Cells(17, "E")
                  Else
                    wsNew.Cells(r, 9) = wsNew.Cells(13, "E")
                    wsNew.Cells(r, 7) = ""
                  End If 'If wsNew.Cells(r, 7) = "Excluded"
                  If wsNew.Cells(r, 6) = "TEXT" Then
                    wsNew.Cells(r, 9) = ""
                  End If
                  r = r + 1
                Wend
              End If 'If ChkNotTst = True Then
    
              .AutoFilter
            End With  'With rngAct
   
            If xxMacroEnable = 0 Then
              ' Do stuff for no Macro enable. Like ungroup
            Else
              .Protect UserInterfaceOnly:=True
              .Protect AllowFiltering:=True
            End If 'If xxMacroEnable = 0 Then
    
          End With  'With wsNew

          wsTst.Hyperlinks.Add Anchor:=wsTst.Cells(i, "B"), Address:="", SubAddress:=wsNew.Name & "!B20", ScreenTip:="", TextToDisplay:=nameOfNewSheet
    
        Else
    
          wsTst.Hyperlinks.Add Anchor:=wsTst.Cells(i, "B"), Address:="", SubAddress:=wsNew.Name & "!B20", ScreenTip:="", TextToDisplay:=nameOfNewSheet
    
          z = z + 1
          wsNew.Range("H" & z + 1).Value = z & " " & wsTst.Cells(i, "M") & " / " & wsTst.Cells(i, "N") & " / " & wsTst.Cells(i, "O") & " / " & wsTst.Cells(i, "P")

        End If  'If .Cells(i, "B") <> nameOfNewSheet Then
    
        For x = 1 To 50                                                                                  '3.3.25 v930 Test lines increased to 50
          wsTst.Cells(i, 35 + x) = "=" & nameOfNewSheet & "!E" & 19 + x                     'v1.0 A1: Columns moved to the right due to new status columns
        Next
      
      End If  'If .Cells(i, "A") = Scenario Then
    Next 'For i = 7 To NrOfTstRows
    
    End With  ' With wsTst
    
    Set rngTst = wsTst.Range("A7:CI" & NrOfTstRows)                                                      'v1.0 A1: extende range
    rngTst.Sort Key1:=rngTst.Range("K7"), Order1:=xlAscending, Header:=xlNo
      
    With wsTst
    
    'Update Non Scenario Lines for Documentation, Solution Scope, Project training, and Solution readiness and Test Data Cells can't be sorted
    For i = 7 To NrOfTstRows
      If .Cells(i, "A") = "Main process" Or .Cells(i, "A") = "Process" Or .Cells(i, "A") = "Sub process" Then  '3.3.3 v1.1 Add Requirement in manual results
        .Cells(i, "S") = ""
        .Range("S" & i).Validation.Delete
        .Range("S" & i).FormatConditions.Delete
        .Range("S" & i).Locked = 1
        .Cells(i, "V") = ""
        .Range("V" & i).Validation.Delete
        .Range("V" & i).FormatConditions.Delete
        .Range("V" & i).Locked = 1
        .Cells(i, "Y") = ""
        .Range("Y" & i).Validation.Delete               'v1.0 A1: New column
        .Range("Y" & i).FormatConditions.Delete         'v1.0 A1: New column
        .Range("Y" & i).Locked = 1                      'v1.0 A1: New column
        .Cells(i, "AB") = ""                            'v1.0 A1: New column
        .Range("AB" & i).Validation.Delete              'v1.0 A1: New column
        .Range("AB" & i).FormatConditions.Delete        'v1.0 A1: New column
        .Range("AB" & i).Locked = 1                     'v1.0 A1: New column
        .Cells(i, "AH") = ""                            '3.3.25V8 Only Validate Scenario Lines and Lock the rest
        .Range("AH" & i).Validation.Delete              '3.3.25V8 Only Validate Scenario Lines and Lock the rest
        .Range("AH" & i).FormatConditions.Delete        '3.3.25V8 Only Validate Scenario Lines and Lock the rest
        .Range("AH" & i).Locked = 1                     '3.3.25V8 Only Validate Scenario Lines and Lock the rest
      End If '.Cells(i, "A") <> "Scenario" Then
    Next
    
    CellType = ""
    NewType = 0
    NrOfScen = 0
    nrOfSubp = 0
    NrOfProc = 0
    Erase ScenRow
    Erase SubpRow
    Erase ProcRow
    
    For i = NrOfTstRows To 7 Step -1
    
    CellType = .Cells(i, "A")
    
    Select Case CellType
    
    Case "Scenario"
        NrOfScen = NrOfScen + 1
        ScenRow(NrOfScen) = i  ' Save the Row number in the Array
        ScenarioID = "Scenario_" & Replace(.Cells(i, "B").Value, ".", "_")      '3.3.23 New Test Feature
        NewBook.Names.Add Name:=ScenarioID, RefersTo:=.Cells(i, "B")            '3.3.23 New Test Feature
        
    Case "Sub process"
        nrOfSubp = nrOfSubp + 1
        SubpRow(nrOfSubp) = i
        For x = 1 To NrOfScen
            .Cells(i, 35 + x).Value = "=AI" & ScenRow(NrOfScen - x + 1)     'v1.0 A1: column for status moved to AI
        Next
        NrOfScen = 0
        Erase ScenRow
    
    Case "Process"
        NrOfProc = NrOfProc + 1
        ProcRow(NrOfProc) = i
        For x = 1 To nrOfSubp
            .Cells(i, 35 + x).Value = "=AI" & SubpRow(nrOfSubp - x + 1)     'v1.0 A1: column for status moved to AI
        Next
        nrOfSubp = 0
        Erase SubpRow
        PrevCellType = CellType
    
    Case "MP Area"
        nrOfMPArea = nrOfMPArea + 1
        MPAreaRow(nrOfMPArea) = i
        For x = 1 To NrOfProc
            .Cells(i, 35 + x).Value = "=AI" & ProcRow(NrOfProc - x + 1)     'v1.0 A1: column for status moved to AI
        Next
        NrOfProc = 0
        Erase ProcRow
        PrevCellType = CellType
    
    Case "Solution Area"
        nrOfSolArea = nrOfSolArea + 1
        SolAreaRow(nrOfSolArea) = i
        If PrevCellType = "Process" Then
        For x = 1 To NrOfProc
            .Cells(i, 35 + x).Value = "=AI" & ProcRow(NrOfProc - x + 1)     'v1.0 A1: column for status moved to AI
        Next
        NrOfProc = 0
        Erase ProcRow
        Else
        For x = 1 To nrOfMPArea
            .Cells(i, 29 + x).Value = "=AI" & MPAreaRow(nrOfMPArea - x + 1)     'v1.0 A1: column for status moved to AI
        Next
        nrOfMPArea = 0
        Erase MPAreaRow
        End If
        PrevCellType = CellType
        
    Case "Top Area"
        nrOfTopArea = nrOfTopArea + 1
        TopAreaRow(nrOfTopArea) = i
        If PrevCellType = "Process" Then
        For x = 1 To NrOfProc
'            .Cells(i, 29 + x).Value = "=AC" & ProcRow(NrOfProc - x + 1)
            .Cells(i, 35 + x).Value = "=AI" & ProcRow(NrOfProc - x + 1)     'v1.0 A1: column for status moved to AI
        Next
        NrOfProc = 0
        Erase ProcRow
        Else
        For x = 1 To nrOfMPArea
            .Cells(i, 35 + x).Value = "=AI" & MPAreaRow(nrOfMPArea - x + 1)     'v1.0 A1: column for status moved to AI
        Next
        nrOfMPArea = 0
        Erase MPAreaRow
        End If
        PrevCellType = CellType
                
    Case Else
    
    End Select
    
    Next
    
    .Protect UserInterfaceOnly:=True
    .Protect AllowFiltering:=True
    
    End With
    
    wsTst.Range("A6:AI6").AutoFilter    'v1.0 A1: Extended range
    wsTst.Columns("G:R").Hidden = True
 
    Application.DisplayAlerts = False
    NewBook.Sheets("TestTemplate").Delete
    FilePath = wsBasDt.Cells(8, "F") & "\"
    NewBook.Sheets("Basic Data Test Doc").Delete
    NewBook.Sheets("Scenario overview").Delete
    
    
    wsTst.Activate
    
'    If xxMacroEnable = 0 Then
'        NewBook.SaveAs FilePath & FileName, FileFormat:=51, ConflictResolution:=xlLocalSessionChanges
'    Else
        NewBook.Save
'    End If
    
    NewBook.Close
    
    Application.DisplayAlerts = True

'    wsScn.Range("$A$6:$AA$" & NrOfRows).AutoFilter Field:=14            'Reset Filter Area = MP Area
'    wsScn.Range("$A$6:$AA$" & NrOfRows).AutoFilter Field:=13            'Reset Filter Area = Process
    
    Next   'For MP = 1 To NrOfMP?
    
'    wsScn.Range("$A$6:$AA$" & NrOfRows).AutoFilter Field:=1             'Reset Criteria for field 1, Criteria1:="<>Question"
    Application.ScreenUpdating = True

Cancelled:
    Application.StatusBar = False         ' Release Status Bar to Excel


    'v1.0 A1: Hide all tabs
    MasterBook.Sheets("Start Page").Activate    ' Updated in A3 to cater for errors whenseveral excelbooks are open
    MasterBook.Sheets("ScopeInfo").Visible = False
    MasterBook.Sheets("MPList").Visible = False
    MasterBook.Sheets("SolutionList").Visible = False
    MasterBook.Sheets("SolutionMPList").Visible = False
    MasterBook.Sheets("Scenario overview").Visible = False
    MasterBook.Sheets("TestTemplate").Visible = False
    MasterBook.Sheets("Test overview").Visible = False
    MasterBook.Sheets("Basic Data Test Doc").Visible = False
    MasterBook.Sheets("Bad Records").Visible = False

End Sub

Function GetNextAvailableName(ByVal strPath As String) As String

    With CreateObject("Scripting.FileSystemObject")

        Dim strFolder As String, strBaseName As String, strExt As String, i As Long
        strFolder = .GetParentFolderName(strPath)
        strBaseName = .GetBaseName(strPath)
        strExt = .GetExtensionName(strPath)

        Do While .FileExists(strPath)
            i = i + 1
            strPath = .BuildPath(strFolder, strBaseName & "-Copy(" & i & ")." & strExt)
        Loop

    End With

    GetNextAvailableName = strPath

End Function
Attribute VB_Name = "FilterCrit_1"
Function FilterCritxx(wsName As String, Col As Integer) As String
    Dim Filter      As String
    Dim Operator    As String
    Dim flt         As Filter
    Dim i, x        As Integer
    Dim ws          As Worksheet
    
'    Set ws = Worksheets("Scenario overview")
    Set ws = Worksheets(wsName)
    Filter = ""
    Operator = ""
    Set flt = ws.AutoFilter.Filters(Col)
    With flt
    If .On = True Then
    Select Case .Operator
    Case 1
      Operator = "AND"
    Case 2
      Operator = "OR"
    Case 7
      Operator = "FilterValues"
    Case Else
      Operator = "Operator?"
    End Select
    
      If .Count > 2 Then
        Filter = .Count & Operator & "XXX" & .Criteria1(1)
        For i = 2 To .Count
          Filter = Filter & "###" & .Criteria1(i)
        Next
        Filter = Filter & "###"
      Else
        Filter = .Count & Operator & "XXX" & .Criteria1 & "###"
        If .Count > 1 Then
          Filter = Filter & .Criteria2 & "###"
        End If
      End If
    Else
      Filter = "0*All"
    End If
    End With
    FilterCrit = Filter
End Function
Attribute VB_Name = "Import_2c8_Exportfile"
Option Compare Text
Option Explicit
 
Sub Import_2c8_Exportfile2()
Attribute Import_2c8_Exportfile2.VB_Description = "Imports a CSV file from 2c8."
Attribute Import_2c8_Exportfile2.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim Prompt          As String
    Dim Title           As String
    Dim Path            As String
    Dim wFileName       As String
    Dim wsScn           As Worksheet
    Dim wsBasDt         As Worksheet
    Dim wsMPList        As Worksheet
    Dim wsSolutionList  As Worksheet
    Dim wsSolutMPList   As Worksheet
    Dim wsStartPage     As Worksheet
    Dim wsBadRecs       As Worksheet
    Dim n               As Long
    Dim c               As Long
    Dim i               As Long
    Dim x               As Long
    Dim LngRow          As Long
    Dim xxRows          As Long
    Dim r               As Long
    Dim StrPos          As Integer
    Dim EndPos          As Integer
    Dim nrOfSheets      As Integer
    Dim NrOfRows        As Long
    Dim NrOfBadRows     As Long
    Dim NrOfVisibleRows As Long
    Dim NrOfMPRows      As Long
    Dim NrOfBasRows     As Long
    Dim DescText        As String
    Dim FldrPathLen     As Integer
    Dim FldrPath        As String
    Dim CSVName         As String
    Dim PagesFldr       As String         ' 3.1 Update
    Dim PagesFnd        As Boolean        ' 3.1 Update
    Dim xxTopExist      As Boolean        ' 3.1 Update
    Dim C8FldrPath      As String
    Dim C8Fldr          As String
    Dim C8FldrFnd       As String
    Dim MsgBoxRet       As Integer

    
    Set wsBasDt = Worksheets("Basic Data Test Doc")
    Set wsScn = Worksheets("Scenario overview")
    Set wsMPList = Worksheets("MPList")
    Set wsSolutionList = Worksheets("SolutionList")
    Set wsSolutMPList = Worksheets("SolutionMPList")
    Set wsStartPage = Worksheets("Start Page")           '3.1 Added Scope Info
    Set wsBadRecs = Worksheets("Bad Records")
        
    'Unprotect all Sheets
    wsBasDt.Unprotect
    wsScn.Unprotect
    wsMPList.Unprotect
    wsSolutionList.Unprotect
    wsSolutMPList.Unprotect
    wsStartPage.Unprotect
    wsBadRecs.Unprotect
    
        
    '1.0 A1 Unhide all hidden tabs
    Worksheets("ScopeInfo").Visible = True
    Worksheets("ScopeInfo").Unprotect
    Worksheets("MPList").Visible = True
    Worksheets("SolutionList").Visible = True
    Worksheets("SolutionMPList").Visible = True
    Worksheets("Scenario overview").Visible = True
    Worksheets("TestTemplate").Visible = True
    Worksheets("Test overview").Visible = True
    Worksheets("Basic Data Test Doc").Visible = True
    Worksheets("Bad Records").Visible = True
    wsStartPage.Activate
    
RetryImport:
    
'    Application.Calculation = xlManual 'Turn off automatic calculation temporarily
    
    Prompt = "Select 2c8 Export File!"
    Title = "File Selection"
    MsgBox Prompt, vbInformation, Title
    wFileName = openCSV()

    Application.ScreenUpdating = False
    Application.EnableEvents = False

    If wFileName <> "" Then
    
'    Sheets("Basic Data").Cells(5, "F").Value = wFileName
    CSVName = Dir(wFileName)
    FldrPathLen = InStr(1, wFileName, CSVName) - 1
    FldrPath = Left(wFileName, FldrPathLen)
    
    PagesFnd = False                                                ' 3.1 Update
    
    ' Check if Folders exist. If not create them
    If Len(Dir(FldrPath & "Test Documents", vbDirectory)) = 0 Then
        MkDir FldrPath & "Test Documents"
    End If
    
    ' Update Folder names in Basic Data Sheet
    wsBasDt.Range("F8") = FldrPath & "Test Documents" 'Check if it exist or create it
        
    If wsScn.AutoFilterMode Then                        ' Is AutoFilter mode on
      If wsScn.FilterMode Then                          ' Is sheet filtered
        wsScn.ShowAllData
      End If
    End If
    
    NrOfRows = wsScn.Cells.SpecialCells(xlCellTypeLastCell).row
    If NrOfRows > 6 Then
        wsScn.Range(wsScn.Cells(7, 1), wsScn.Cells(NrOfRows, 1)).EntireRow.Delete
    End If
    
    NrOfBadRows = wsBadRecs.Cells.SpecialCells(xlCellTypeLastCell).row
    If NrOfBadRows > 1 Then
        wsBadRecs.Range(wsBadRecs.Cells(2, 1), wsBadRecs.Cells(NrOfBadRows, 1)).EntireRow.Delete
    End If
    
    ActiveWorkbook.Save
    
    wsMPList.Range("A2:A" & wsMPList.UsedRange.Rows.Count).ClearContents                'Clear all content in MPList
    wsSolutionList.Range("A1:A" & wsSolutionList.UsedRange.Rows.Count).ClearContents    'Clear all content in SolutionList
    wsSolutMPList.Range("A2:C" & wsSolutMPList.UsedRange.Rows.Count).ClearContents      'Clear all content in SolutionMPList
    wsStartPage.Range("D13:D17").ClearContents                                          'Clear all content Scope Info
    
    Application.StatusBar = "Import records from CSV file " & wFileName
    
    With wsScn.QueryTables.Add(Connection:="TEXT;" & wFileName, Destination:=wsScn.Range("$A$7"))
        .FieldNames = True
        .RowNumbers = False
        .FillAdjacentFormulas = False
        .PreserveFormatting = True
        .RefreshOnFileOpen = False
        .RefreshStyle = xlInsertDeleteCells
        .SavePassword = False
        .SaveData = True
        .AdjustColumnWidth = True
        .RefreshPeriod = 0
        .TextFilePromptOnRefresh = False
        .TextFilePlatform = 65001
        .TextFileStartRow = 1
        .TextFileParseType = xlDelimited
        .TextFileTextQualifier = xlTextQualifierDoubleQuote
        .TextFileConsecutiveDelimiter = False
        .TextFileTabDelimiter = True
        .TextFileSemicolonDelimiter = False
        .TextFileCommaDelimiter = False
        .TextFileSpaceDelimiter = False
        .TextFileColumnDataTypes = Array(1, xlTextFormat, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
        .TextFileTrailingMinusNumbers = True
        .Refresh BackgroundQuery:=False
    End With
    
    
    '1.0 A1: Check if it is an extended csv file, if not promt info message to retry or cancel
    wsBasDt.Calculate
    If wsBasDt.Cells(23, "F").Value = 0 Then
        MsgBoxRet = MsgBox("Wrong type of csv file. Please try again with a csv file with Extended format.", vbRetryCancel, "Wrong file")
        If MsgBoxRet = 4 Then
            GoTo RetryImport
        Else
            GoTo CancelImport
        End If
    End If
    
    NrOfRows = wsScn.Cells(Rows.Count, "B").End(xlUp).row
    NrOfRows = wsScn.Cells.SpecialCells(xlCellTypeLastCell).row
    LngRow = 4
    For n = NrOfRows To 7 Step -1
    
    If n Mod 10 = 0 Then
'        DoEvents
        Application.StatusBar = "Fixing Data from CSV file, record " & NrOfRows - n & " of " & NrOfRows
    End If
    
    If n = 7 And wsScn.Cells(n, "N") = "" Then
        If wsScn.Cells(n, "O") = "" Then                'Extra Top Level used
            wsScn.Cells(n, "O") = wsScn.Cells(n, "P")
            wsScn.Cells(n, "N") = wsScn.Cells(n, "P")
            xxTopExist = True
            wsScn.Cells(n, "A") = "Top Area"
        Else
            wsScn.Cells(n, "N") = wsScn.Cells(n, "O")
            xxTopExist = False
            wsScn.Cells(n, "A") = "Solution Area"
        End If
    End If
    
    'Clean up bad records in CSV file
        If wsScn.Cells(n, "A") = "Activity" Or wsScn.Cells(n, "A") = "Business Object" Or wsScn.Cells(n, "A") = "Decision" _
            Or wsScn.Cells(n, "A") = "Info" Or wsScn.Cells(n, "A") = "Language" Or wsScn.Cells(n, "A") = "Location" _
            Or wsScn.Cells(n, "A") = "MP Area" Or wsScn.Cells(n, "A") = "Path" Or wsScn.Cells(n, "A") = "Process" _
            Or wsScn.Cells(n, "A") = "Question" Or wsScn.Cells(n, "A") = "Requirement" Or wsScn.Cells(n, "A") = "Role" _
            Or wsScn.Cells(n, "A") = "Scenario" Or wsScn.Cells(n, "A") = "Solution Area" Or wsScn.Cells(n, "A") = "Sub process" _
            Or wsScn.Cells(n, "A") = "Swimlane" Or wsScn.Cells(n, "A") = "Text" Or wsScn.Cells(n, "A") = "Top Area" Then
            ' All ok
        Else
            ' Some error record, Copy to Bad Records sheet
            xxRows = wsBadRecs.Cells.SpecialCells(xlCellTypeLastCell).row
            wsScn.Cells(n, "A").EntireRow.Copy
            wsBadRecs.Range("A" & wsBadRecs.Cells.SpecialCells(xlCellTypeLastCell).row + 1).PasteSpecial Paste:=xlPasteAll
            wsScn.Cells(n, "A").EntireRow.Delete
        End If
    
    If wsScn.Cells(n, "G") <> "" Then
        DescText = wsScn.Cells(n, "G")
        If Right(DescText, 3) = "###" Then              'Clean up lines with ending ### before Replace
            x = Len(DescText) - 3
            DescText = Left(DescText, x)
        End If
        DescText = Replace(DescText, "###", Chr(10))
        wsScn.Cells(n, "G") = DescText
    End If
    
    For c = 20 To 26                                            ' Fix all question fields
    If wsScn.Cells(n, c) <> "" Then
        DescText = wsScn.Cells(n, c)
        If Right(DescText, 3) = "###" Then                      'Clean up lines with ending ### before Replace
            x = Len(DescText) - 3
            DescText = Left(DescText, x)
        End If
        DescText = Replace(DescText, "###", Chr(10))
        wsScn.Cells(n, c) = DescText
    End If
    Next
    
    If wsScn.Cells(n, "A") = "Solution Area" Then               ' Check if Object name is not same as Model name
      With wsScn.Range("C" & n)
        .ClearComments
        .Interior.ColorIndex = 0
        If wsScn.Cells(n, "C") <> wsScn.Cells(n, "O") Then      ' Check if Object name is not same as Model name
            .AddComment ("Object name (col C) and Model name (col O) is not the same!")
            .Interior.ColorIndex = 6                            ' ColorIndex 6 = Yellow in cell if error
        End If
      End With
    End If
    
    If wsScn.Cells(n, "A") = "MP Area" Then                     ' Check if Object name is not same as Model name
      With wsScn.Range("C" & n)
        .ClearComments
        .Interior.ColorIndex = 0
        If wsScn.Cells(n, "C") <> wsScn.Cells(n, "N") Then      ' Check if Object name is not same as Model name
            .AddComment ("Object name (col C) and Model name (col N) is not the same!")
            .Interior.ColorIndex = 6                            ' ColorIndex 6 = Yellow in cell if error
        End If
      End With
    End If
    
    If wsScn.Cells(n, "A") = "Text" Then                     ' Check if Text is Header Text
        If wsScn.Cells(n - 1, "A") = "Scenario" Then         ' Check if Text is Header Text
            wsScn.Cells(n, "A") = "TextHeader"               ' Save as new Tag
        End If
    End If
    
    If wsScn.Cells(n, "A") = "Info" Then
      wsStartPage.Cells(13, "D") = wsScn.Cells(n, "B")
      wsStartPage.Cells(14, "D") = wsScn.Cells(n, "C")
      wsStartPage.Cells(15, "D") = wsScn.Cells(n, "D")
      wsStartPage.Cells(16, "D") = wsScn.Cells(n, "E")
      wsStartPage.Cells(17, "D") = CSVName
    End If 'If wsScn.Cells(n, "A") = "Info" Then
    
    If wsScn.Cells(n, "A") = "Language" Then
      wsBasDt.Cells(LngRow, "L") = wsScn.Cells(n, "B")
      wsBasDt.Cells(LngRow, "M") = wsScn.Cells(n, "C")
      wsBasDt.Cells(LngRow, "N") = wsScn.Cells(n, "D")
      LngRow = LngRow + 1
    End If 'If wsScn.Cells(n, "A") = "Language" Then
    
    Next
    
    wsScn.Columns("A:A").ColumnWidth = 20
    wsScn.Columns("B:B").ColumnWidth = 10
    With wsScn.Columns("C:E")
    .ColumnWidth = 2.57
    .Font.Bold = True
    .Font.Size = 11
    End With
    
    wsScn.Columns("F:F").ColumnWidth = 55
    wsScn.Columns("G:G").ColumnWidth = 35.71
    
    With wsScn.Range("A7", "BZ" & NrOfRows)
        .WrapText = False
        .Sort Key1:=.Range("K7"), Order1:=xlAscending, Key2:=.Range("B7"), order2:=xlAscending, Header:=xlNo
    End With
    
    wsScn.Range("N7", "N" & NrOfRows).AdvancedFilter Action:=xlFilterCopy, CopyToRange:=ActiveWorkbook.Sheets("MPList").Range("A2"), Unique:=True
    wsScn.Rows("6:6").AutoFilter
    If wsMPList.Cells(3, "A") = "" Then
        wsMPList.Cells(3, "A").Delete Shift:=xlUp
    End If
        
    'FilterCopy all solutions on extra Sheet to be able to select when to print
    wsScn.Range("O6", "O" & NrOfRows).AdvancedFilter Action:=xlFilterCopy, CopyToRange:=wsSolutionList.Range("A1"), Unique:=True
    wsScn.Rows("6:6").AutoFilter
    
    'Copy all solutions and Their MP Areas to extra Sheet to be able to select when to print
    With wsScn.Range("A7:BA" & NrOfRows)
        .AutoFilter Field:=1, Criteria1:="MP Area"
        .AutoFilter Field:=12, Criteria1:="<>Excluded"
        .SpecialCells(xlCellTypeVisible).Copy Destination:=wsSolutMPList.Range("A2")
    End With
    wsScn.Rows("6:6").AutoFilter Field:=1
    wsScn.Rows("6:6").AutoFilter Field:=12
    
    NrOfMPRows = wsSolutMPList.Cells(Rows.Count, "A").End(xlUp).row
    With wsSolutMPList
        .Range("A2:K" & NrOfMPRows).ClearContents                   'Clear content in SolutionMPList
        .Range("P2:P" & NrOfMPRows).ClearContents                   'Clear content in SolutionMPList
        .Range("O2:O" & NrOfMPRows).Cut Destination:=.Range("A2")   'Move content Solution
        .Range("N2:N" & NrOfMPRows).Cut Destination:=.Range("B2")   'Move content MainProcess
        .Range("L2:L" & NrOfMPRows).Cut Destination:=.Range("C2")   'Move content Included
    End With
    
    Application.StatusBar = False                                   ' Release Status Bar to Excel
    
'    Call Create_ActivityList                                       'v1.0 A3: Use Scenario Overview instead of ActivityList
    
'    wsScn.Activate
    With wsScn.Range("A7", "BA" & NrOfRows)
    .WrapText = False
    .Sort Key1:=.Range("K7"), Order1:=xlAscending, Key2:=.Range("B7"), order2:=xlAscending, Header:=xlNo
    End With
    
'    wsScn.Activate
    
    wsScn.Range("$A$6:$AA$" & NrOfRows).AutoFilter Field:=12, Criteria1:="<>Excluded"
    
    End If ' IF wFileName <> "" Then
    
    NrOfBadRows = wsBadRecs.Cells.SpecialCells(xlCellTypeLastCell).row - 1
    wsBasDt.Cells(21, "F") = NrOfBadRows
    
    
CancelImport:    'Juli 2018
    
    '1.0 A1: Hide all tabs
    Worksheets("ScopeInfo").Visible = False
    Worksheets("MPList").Visible = False
    Worksheets("SolutionList").Visible = False
    Worksheets("SolutionMPList").Visible = False
    Worksheets("Scenario overview").Visible = False
    Worksheets("TestTemplate").Visible = False
    Worksheets("Test overview").Visible = False
    Worksheets("Basic Data Test Doc").Visible = False
    Worksheets("Bad Records").Visible = False
    
    wsStartPage.Activate
    Application.Calculation = xlAutomatic 'Turn on automatic calculation again
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.StatusBar = False         ' Release Status Bar to Excel


End Sub
Function openCSV() As String
Dim strFilePath As String
Dim V As Variant
On Error Resume Next

'Allow the user to select the Word document
With Application.FileDialog(msoFileDialogOpen)
.InitialFileName = Application.ActiveWorkbook.Path
.Title = "Select Export File (.csv)"
.AllowMultiSelect = False
.Filters.Clear
.Filters.Add "All Files", "*.*", 1
.Filters.Add "Documents", "*.csv", 1

'Show the dialog and if returned True, use the selected file
If .Show = True Then 'The user clicked "OK"
strFilePath = .SelectedItems(1)
Else
MsgBox "No File Selected. Procedure Canceled!", vbInformation, "File Selection"
End If

End With
openCSV = strFilePath
End Function
Attribute VB_Name = "InsertTranslationFormula_1"
Sub InsertTranslationFormula()
Attribute InsertTranslationFormula.VB_ProcData.VB_Invoke_Func = " \n14"
'
' InsertTranslationFormula Macro
'

'
Dim Text As String
    Text = ActiveCell.Value
    ActiveCell.FormulaR1C1 = _
        "=IFERROR(VLOOKUP(""TEXT"",'Basic Data Test Doc'!R53C5:R202C52,HLOOKUP('Basic Data Test Doc'!R17C6,'Basic Data Test Doc'!R51C5:R52C52,2,FALSE),FALSE),""Term not translated"")"
    ActiveCell.Formula = Replace(ActiveCell.Formula, "TEXT", Text, 1, 1)
End Sub
Attribute VB_Name = "PrtProp"
Attribute VB_Base = "0{B0820D26-4047-4686-A55F-44F6DD99FB18}{5B2A3A26-73B8-47E4-ACD1-AF9BB01BD571}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
 
Private ErrExist        As Boolean
Private InitReady       As Boolean
Function openWord() As String
Dim strFilePath As String
Dim V As Variant
On Error Resume Next

'Allow the user to select the Word document
With Application.FileDialog(msoFileDialogOpen)
    .InitialFileName = Application.ActiveWorkbook.Path
    .Title = "Select Word Document"
    .AllowMultiSelect = 0             'False
    '.Filters.Add "All Files", "*.*", 1
    .Filters.Clear
    .Filters.Add "All Documents", "*.*", 1
    .Filters.Add "Word Documents", "*.docx; *.doc; *.docm; *.dotx; *.dotm", 1
'    .Filters (1) '"Word Documents"

'Show the dialog and if returned True, use the selected file
If .Show = -1 Then 'The user clicked "OK"
strFilePath = .SelectedItems(1)
Else
MsgBox "No file selected. Procedure Canceled!", vbInformation, "File Selection"

End If
End With
openWord = strFilePath
End Function
Private Sub cmdWdTmp_Click()

    MsgBox "Select Word Template.", vbInformation, "Word Selection"
    prtWdTmp = openWord()
    ErrExist = 0             'False

End Sub

Private Sub cmd2C8dir_Click()
    
  With Application.FileDialog(msoFileDialogFolderPicker)
    .InitialFileName = Application.ActiveWorkbook.Path
    .Title = "Select 2c8 Folder"
    .AllowMultiSelect = 0                   'False
    .Filters.Clear

    'Show the dialog and if returned True, use the selected file
    If .Show = -1 Then 'The user clicked "OK"
      prt2C8Fld = .SelectedItems(1)
      ErrExist = 0                          'False
      lbl2C8Fld.Font.Bold = 0               'False
      lbl2C8Fld.ForeColor = "-2147483630"
    Else
      MsgBox "No folder selected. Procedure Canceled!", vbInformation, "Folder Selection"
    End If
  End With



End Sub

Private Sub cmdFldDoc_Click()
    
  With Application.FileDialog(msoFileDialogFolderPicker)
    .InitialFileName = Application.ActiveWorkbook.Path
    .Title = "Select Folder to save MP Document"
    .AllowMultiSelect = 0                   'False
    .Filters.Clear

    'Show the dialog and if returned True, use the selected file
    If .Show = -1 Then 'The user clicked "OK"
      prtDocFld = .SelectedItems(1)
    Else
      MsgBox "No folder selected. Procedure Canceled!", vbInformation, "Folder Selection"
    End If
  End With
    
  ErrExist = 0                              'False

End Sub


Private Sub prt2C8Fld_Change()
Dim wsBasMP         As Worksheet
Set wsBasMP = Worksheets("Basic Data MP")

wsBasMP.Cells(24, "C") = prt2C8Fld
ErrExist = 0                                'False

End Sub

Private Sub prtCheckBoxDivide_Click()                                   '3.3 Document divide if *All selected

Sheets("Basic Data MP").Cells(29, "C") = prtCheckBoxDivide              '3.3 Document divide if *All selected

Call UpdTitleAndFileName                                                '3.3 Document divide if *All selected
        
End Sub                                                                 '3.3 Document divide if *All selected

Private Sub prtCheckBoxDOCX_Click()

Sheets("Basic Data MP").Cells(4, "J") = prtCheckBoxDOCX

End Sub

Private Sub prtCheckBoxPDF_Click()

Sheets("Basic Data MP").Cells(5, "J") = prtCheckBoxPDF

End Sub

Private Sub prtCheckBoxHTM_Click()

Sheets("Basic Data MP").Cells(6, "J") = prtCheckBoxHTM

End Sub

Private Sub prtCheckBoxMHT_Click()

Sheets("Basic Data MP").Cells(7, "J") = prtCheckBoxMHT

End Sub

Private Sub prtCheckBoxExcluded_Click()

Sheets("Basic Data MP").Cells(8, "F") = prtCheckBoxExcluded

If prtComboBoxSolution.Value <> "" Then
Call CreateMPList(0)
End If

End Sub

Private Sub prtCheckBoxIncluded_Click()

Sheets("Basic Data MP").Cells(4, "F") = prtCheckBoxIncluded

If prtComboBoxSolution.Value <> "" Then
Call CreateMPList(0)
End If

End Sub
Private Sub prtCheckBoxOptional_Click()

Sheets("Basic Data MP").Cells(6, "F") = prtCheckBoxOptional

If prtComboBoxSolution.Value <> "" Then
Call CreateMPList(0)
End If

End Sub

Private Sub prtCheckBoxPhase2_Click()

Sheets("Basic Data MP").Cells(7, "F") = prtCheckBoxPhase2

If prtComboBoxSolution.Value <> "" Then
Call CreateMPList(0)
End If

End Sub
Private Sub prtCheckBoxReUsed_Click()

Sheets("Basic Data MP").Cells(5, "F") = prtCheckBoxReUsed

If prtComboBoxSolution.Value <> "" Then
Call CreateMPList(0)
End If

End Sub

Private Sub prtComboBoxDocLayout_Change()

    Sheets("Basic Data MP").Cells(6, "C").Value = prtComboBoxDocLayout.Value
    ErrExist = 0             'False
    LblSumLvl.Font.Bold = 0                 'False
    LblSumLvl.ForeColor = "-2147483630"
    Call UpdTitleAndFileName

End Sub

Private Sub prtComboBoxLanguage_Change()

Dim n, Pos                  As Integer
Dim Str2c8                  As String
Dim wsBasMP                 As Worksheet

Set wsBasMP = Sheets("Basic Data MP")

  wsBasMP.Cells(27, "C") = prtComboBoxLanguage              'Save Language Name
  n = 4
  While wsBasMP.Cells(n, "L") <> ""
    If wsBasMP.Cells(n, "L") = prtComboBoxLanguage Then
        wsBasMP.Cells(28, "C") = wsBasMP.Cells(n, "N")      'Save Language-ID to get right Folder for 2c8 pictures
        Pos = InStr(1, wsBasMP.Cells(24, "C"), "models\") + 6
        Str2c8 = Mid(wsBasMP.Cells(24, "C"), 1, Pos) & wsBasMP.Cells(28, "C")
        wsBasMP.Cells(24, "C") = Str2c8
        prt2C8Fld = Str2c8
        Exit Sub
    End If
    n = n + 1
  Wend
  
End Sub

Private Sub prtComboBoxMPList_Change()
    
    Sheets("Basic Data MP").Cells(5, "C").Value = prtComboBoxMPList.Value
    ErrExist = 0                            'False
    LblMainProcess.Font.Bold = 0            'False
    LblMainProcess.ForeColor = "-2147483630"
    
    If Left(prtComboBoxMPList, 4) = "*All" Then
        prtCheckBoxDivide.Enabled = -1      'True
        prtCheckBoxDivide.Visible = -1      'True
        prtCheckBoxDivide = 0               'False
    Else
        prtCheckBoxDivide.Visible = 0       'False
        prtCheckBoxDivide = 0               'False
    End If
    
    Call UpdTitleAndFileName
    Call CreateMPList(1)                   'True

End Sub
Sub CreateMPList(MPCall As Integer)

Dim sSolution           As String
Dim sMPArea             As String
Dim sMPIncl             As String
Dim FiltArr(1 To 5)     As String
Dim i, j                As Integer
Dim NrOfSolMP           As Integer
Dim NrOfVisibleRows     As Integer
Dim rng, filtrng        As Range
Dim wsSolutMPList       As Worksheet
Dim wsBasMP             As Worksheet

Set wsSolutMPList = Sheets("SolutionMPList")
Set wsBasMP = Sheets("Basic Data MP")
'Clear FiltArr
'Erase FiltArr
j = 1
i = 4
For i = 4 To 8
  If wsBasMP.Cells(i, "F") = "True" Then
    FiltArr(j) = wsBasMP.Cells(i, "E").Value
    j = j + 1
  End If
Next

If prtComboBoxSolution = "*All" Then
  wsSolutMPList.Range("A1:C1").AutoFilter Field:=1
Else
  wsSolutMPList.Range("A1:C1").AutoFilter Field:=1, Criteria1:=prtComboBoxSolution.Value
End If

If prtComboBoxMPList = "" Or Left(prtComboBoxMPList, 4) = "*All" Then
  wsSolutMPList.Range("A1:C1").AutoFilter Field:=2
Else
  wsSolutMPList.Range("A1:C1").AutoFilter Field:=2, Criteria1:=prtComboBoxMPList.Value
End If

wsSolutMPList.Range("A1:C1").AutoFilter Field:=3, Criteria1:=Array(FiltArr), Operator:=xlFilterValues
        
NrOfVisibleRows = wsSolutMPList.AutoFilter.Range.Columns(1).SpecialCells(xlCellTypeVisible).Cells.Count - 1
If NrOfVisibleRows > 0 Then
  If MPCall = 0 Then
    With prtComboBoxMPList
      .Clear
      .AddItem "*All MP (" & prtComboBoxSolution.Value & ")"
      NrOfSolMP = wsSolutMPList.Cells(Rows.Count, "B").End(xlUp).row
      Set rng = wsSolutMPList.Range("A1:A" & NrOfSolMP)
      Set filtrng = rng.Offset(1, 0).SpecialCells(xlCellTypeVisible).EntireRow
      For Each rng In filtrng
        sSolution = rng.Cells(1, "A")
        sMPArea = rng.Cells(1, "B")
        sMPIncl = rng.Cells(1, "C")
        .AddItem sMPArea
      Next
    End With
  End If
Else
  If InitReady = 1 Then                      'Don't show message before Init is done
    MsgBox ("No Main Processes exist for combination of Solution and Filter values")
  End If
End If


End Sub
Private Sub prtComboBoxSolution_Change()

  Sheets("Basic Data MP").Cells(4, "C").Value = prtComboBoxSolution.Value
  ErrExist = 0                              'False
  LblSolution.Font.Bold = 0                 'False
  LblSolution.ForeColor = "-2147483630"

  LblDocTitle.Visible = 1                   'True
  LblDocFileName.Visible = 1                'True

  Call CreateMPList(0)

  Call UpdTitleAndFileName

End Sub
Sub UpdTitleAndFileName()
Dim wsBasMP                 As Worksheet
Dim ReportLayout3           As String
Dim Solution                As String
Dim MPArea                  As String

Set wsBasMP = Sheets("Basic Data MP")

'Get Report Layout number
ReportLayout3 = ""
If prtComboBoxDocLayout.Value <> "" Then
ReportLayout3 = Mid(prtComboBoxDocLayout.Value, 1, 3)
End If

'Get Solution
If prtComboBoxSolution.Value = "*All" Then
    Solution = "<Solution>"
Else
    Solution = prtComboBoxSolution.Value
End If

'Get MP Area
If Left(prtComboBoxMPList.Value, 4) = "*All" Or prtComboBoxMPList = "" Then
    MPArea = "<Main Process>"
Else
    MPArea = prtComboBoxMPList.Value
End If

If Left(prtComboBoxMPList.Value, 4) = "*All" And prtCheckBoxDivide = 0 Then
    'Create Document Title
    LblDocTitle = ReportLayout3 & prtDocTitle.Value & Chr(10) & Solution & Chr(10)
    'Create File Name
    LblDocFileName = ReportLayout3 & prtDocFileName.Value & " " & Solution
Else
    'Create Document Title
    LblDocTitle = ReportLayout3 & prtDocTitle.Value & Chr(10) & Solution & Chr(10) & " with " & Chr(10) & MPArea
    'Create File Name
    LblDocFileName = ReportLayout3 & prtDocFileName.Value & " " & Solution & " with " & MPArea
End If

End Sub

Private Sub prtDocFileName_Change()

Sheets("Basic Data MP").Cells(9, "C") = prtDocFileName.Value

Call UpdTitleAndFileName

End Sub

Private Sub prtDocTitle_Change()

Sheets("Basic Data MP").Cells(7, "C") = prtDocTitle.Value

Call UpdTitleAndFileName

End Sub

Private Sub prtTableCont_Change()

Sheets("Basic Data MP").Cells(13, "C") = prtTableCont.Value
  
End Sub

Private Sub UserForm_Initialize()
Dim n                       As Integer
Dim NrOfFilter, NrOfRows    As Integer
Dim PosA, PosB, Pos1, Pos2  As Integer
Dim Chkd                    As Boolean
Dim ChkVal, FilterString    As String
Dim wsBasMP                 As Worksheet
Dim wsSolutMPList           As Worksheet
Dim wsScn                   As Worksheet

Set wsBasMP = Sheets("Basic Data MP")
Set wsSolutMPList = Sheets("SolutionMPList")
Set wsScn = Sheets("Scenario overview")
NrOfRows = wsScn.UsedRange.Rows.Count
InitReady = 0

LblDocTitle.Visible = 0                     'False
LblDocFileName.Visible = 0                  'False
prtCheckBoxIncluded = 1                     'True

' Init Solution ComboBox
With prtComboBoxSolution
    If Sheets("SolutionList").Cells(Rows.Count, "A").End(xlUp).row > 2 Then  ' Only Add *All if more than one Solution
      .AddItem "*All"
    End If
    n = 2
    While Sheets("SolutionList").Range("A" & n) <> ""
    .AddItem Sheets("SolutionList").Range("A" & n)
    n = n + 1
    Wend

  'Preset the "Common Solution as default as Solution
  prtComboBoxSolution = wsSolutMPList.Cells(2, "A")
  wsBasMP.Cells(4, "C") = prtComboBoxSolution
  wsSolutMPList.Range("A1:C1").AutoFilter Field:=2              'Reset the MP filter

End With

prtCheckBoxDivide.Visible = 0                                   'Don't Show Divide CheckBox initially
prtCheckBoxDivide = 1                                           'Set default value for CheckBox to True

'Init Report layout
With prtComboBoxDocLayout
   .AddItem "1A Process Level"
   .AddItem "1B Process w SubProc Desc"
   .AddItem "2A Process w SubProc Desc & Scenario List"
   .AddItem "2B Process w SubProc & Scenario List"
   .AddItem "3A All in Detail"
End With

'Init Document Title and File name
prtDocTitle = wsBasMP.Cells(7, "C")
prtDocFileName = wsBasMP.Cells(9, "C")
Call UpdTitleAndFileName

'Inint Header structure
With prtComboBoxHead1
   .AddItem "Name"
   .AddItem "ID"
   .AddItem "(ID)"
End With
'Set default to Name
prtComboBoxHead1.Value = "Name"
With prtComboBoxHead2
   .AddItem "*None"
   .AddItem "Name"
   .AddItem "ID"
   .AddItem "(ID)"
End With
'Set Default to (ID)
prtComboBoxHead2.Value = "(ID)"

'Init Table of Content level
If wsBasMP.Cells(13, "C") = "" Then
    wsBasMP.Cells(13, "C") = "3"
End If
prtTableCont = wsBasMP.Cells(13, "C")

'Init Document formats
prtCheckBoxDOCX.Value = 1
wsBasMP.Cells(4, "J") = prtCheckBoxDOCX.Value
prtCheckBoxPDF.Value = 0                    'False
wsBasMP.Cells(5, "J") = prtCheckBoxPDF.Value
prtCheckBoxHTM.Value = 0                    'False
wsBasMP.Cells(6, "J") = prtCheckBoxHTM.Value
prtCheckBoxMHT.Value = 0                    'False
wsBasMP.Cells(7, "J") = prtCheckBoxMHT.Value

'Get Filtervalues on Included, Excluded etc.
FilterString = FilterCrit("Scenario overview", 12)
NrOfFilter = Left(FilterString, 1)

Select Case NrOfFilter
Case 0
  prtCheckBoxIncluded = 1                   'True
  prtCheckBoxReUsed = 1                     'True
  prtCheckBoxOptional = 1                   'True
  prtCheckBoxPhase2 = 1                     'True
  prtCheckBoxExcluded = 1                   'True
Case 1
  Pos1 = InStr(1, FilterString, "XXX")
  If Mid(FilterString, Pos1 + 3, 1) = "=" Then
  prtCheckBoxIncluded = 0                   'False
  prtCheckBoxReUsed = 0                     'False
  prtCheckBoxOptional = 0                   'False
  prtCheckBoxPhase2 = 0                     'False
  prtCheckBoxExcluded = 0                   'False
  Else
  prtCheckBoxIncluded = 1                   'True
  prtCheckBoxReUsed = 1                     'True
  prtCheckBoxOptional = 1                   'True
  prtCheckBoxPhase2 = 1                     'True
  prtCheckBoxExcluded = 1                   'True
  End If
Case 2
  Pos1 = InStr(1, FilterString, "XXX")
  If Mid(FilterString, Pos1 + 3, 1) = "=" Then
  prtCheckBoxIncluded = 0                   'False
  prtCheckBoxReUsed = 0                     'False
  prtCheckBoxOptional = 0                   'False
  prtCheckBoxPhase2 = 0                     'False
  prtCheckBoxExcluded = 0                   'False
  Else
  prtCheckBoxIncluded = 1                   'True
  prtCheckBoxReUsed = 1                     'True
  prtCheckBoxOptional = 1                   'True
  prtCheckBoxPhase2 = 1                     'True
  prtCheckBoxExcluded = 1                   'True
  End If
Case Is > 2
  prtCheckBoxIncluded = 0                   'False
  prtCheckBoxReUsed = 0                     'False
  prtCheckBoxOptional = 0                   'False
  prtCheckBoxPhase2 = 0                     'False
  prtCheckBoxExcluded = 0                   'False
Case Else
  prtCheckBoxIncluded = 0                   'False
  prtCheckBoxReUsed = 0                     'False
  prtCheckBoxOptional = 0                   'False
  prtCheckBoxPhase2 = 0                     'False
  prtCheckBoxExcluded = 0                   'False
End Select

Pos1 = InStr(1, FilterString, "XXX")
For n = 1 To NrOfFilter
  Pos2 = InStr(Pos1 + 1, FilterString, "###")
  If Mid(FilterString, Pos1 + 3, 1) = "<" Then
    PosA = Pos1 + 5
    PosB = Pos2
    Chkd = 0                                'False Filter value is Not Equal
  Else
    PosA = Pos1 + 4
    PosB = Pos2
    Chkd = 1                                'True Filter value is Equal
  End If
  Pos1 = Pos2
  ChkVal = Mid(FilterString, PosA, PosB - PosA)
  If Left(ChkVal, 1) = "*" Then ChkVal = Mid(ChkVal, 2, 100)
  If Right(ChkVal, 1) = "*" Then ChkVal = Mid(ChkVal, 1, Len(ChkVal) - 1)
  Select Case ChkVal
  Case "Excluded"
    prtCheckBoxExcluded = Chkd
  Case "Included"
    prtCheckBoxIncluded = Chkd
  Case "Optional"
    prtCheckBoxOptional = Chkd
  Case "Phase-2"
    prtCheckBoxPhase2 = Chkd
  Case "Re-used"
    prtCheckBoxReUsed = Chkd
  Case Else
  End Select
Next

'Init Filter values
wsBasMP.Cells(4, "F") = prtCheckBoxIncluded
wsBasMP.Cells(5, "F") = prtCheckBoxReUsed
wsBasMP.Cells(6, "F") = prtCheckBoxOptional
wsBasMP.Cells(7, "F") = prtCheckBoxPhase2
wsBasMP.Cells(8, "F") = prtCheckBoxExcluded

'Save Original Filters
wsBasMP.Cells(4, "G") = prtCheckBoxIncluded
wsBasMP.Cells(5, "G") = prtCheckBoxReUsed
wsBasMP.Cells(6, "G") = prtCheckBoxOptional
wsBasMP.Cells(7, "G") = prtCheckBoxPhase2
wsBasMP.Cells(8, "G") = prtCheckBoxExcluded

'Init Language
With prtComboBoxLanguage
    n = 4
    While wsBasMP.Cells(n, "L") <> ""
    .AddItem wsBasMP.Cells(n, "L")
    n = n + 1
    Wend
    
  'Preset the "First Language as default
  prtComboBoxLanguage = wsBasMP.Cells(4, "L")
  wsBasMP.Cells(27, "C") = prtComboBoxLanguage      'Save Language Name
  wsBasMP.Cells(28, "C") = wsBasMP.Cells(4, "N")    'Save Language-ID to get right Folder for 2c8 pictures
  If n < 6 Then                                     'Only one language don't show
    LblLanguage.Visible = 0                 'False
    prtComboBoxLanguage.Visible = 0         'False
  Else
    LblLanguage.Visible = 1                 'True
    prtComboBoxLanguage.Visible = 1         'True
  End If
End With

'Init Word Template and Folder paths
prtWdTmp = wsBasMP.Cells(23, "C")
prt2C8Fld = wsBasMP.Cells(24, "C")
prtDocFld = wsBasMP.Cells(25, "C")

InitReady = 1

End Sub

Private Sub CmdCancel_Click()
    Sheets("Basic Data MP").Cells(26, "C").Value = "Cancel"
Unload Me
End Sub

Private Sub CmdPrt_Click()
Dim wsBasMP         As Worksheet

Set wsBasMP = Worksheets("Basic Data MP")

    wsBasMP.Cells(4, "C").Value = prtComboBoxSolution
    wsBasMP.Cells(5, "C").Value = PrtProp.prtComboBoxMPList
    wsBasMP.Cells(6, "C").Value = PrtProp.prtComboBoxDocLayout
    wsBasMP.Cells(29, "C").Value = PrtProp.prtCheckBoxDivide    '3.3 Divide for separate document
    wsBasMP.Cells(7, "C").Value = PrtProp.prtDocTitle           'Prefix for Document Title
    wsBasMP.Cells(8, "C").Value = PrtProp.LblDocTitle           'Document Title
    wsBasMP.Cells(9, "C").Value = PrtProp.prtDocFileName        'Prefix for Document File Name
    wsBasMP.Cells(10, "C").Value = PrtProp.LblDocFileName       'Document File Name
    wsBasMP.Cells(13, "C").Value = PrtProp.prtTableCont
    wsBasMP.Cells(11, "C").Value = PrtProp.prtComboBoxHead1
    wsBasMP.Cells(12, "C").Value = PrtProp.prtComboBoxHead2
    wsBasMP.Cells(23, "C").Value = PrtProp.prtWdTmp
    wsBasMP.Cells(24, "C").Value = PrtProp.prt2C8Fld
    wsBasMP.Cells(25, "C").Value = PrtProp.prtDocFld
    wsBasMP.Cells(26, "C").Value = ""                           'Remove old Cancel if any

    wsBasMP.Cells(4, "F").Value = PrtProp.prtCheckBoxIncluded   'Save Current Filter values
    wsBasMP.Cells(5, "F").Value = PrtProp.prtCheckBoxReUsed     'Save Current Filter values
    wsBasMP.Cells(6, "F").Value = PrtProp.prtCheckBoxOptional   'Save Current Filter values
    wsBasMP.Cells(7, "F").Value = PrtProp.prtCheckBoxPhase2     'Save Current Filter values
    wsBasMP.Cells(8, "F").Value = PrtProp.prtCheckBoxExcluded   'Save Current Filter values

    wsBasMP.Cells(4, "J").Value = PrtProp.prtCheckBoxDOCX       'Save File Format values
    wsBasMP.Cells(5, "J").Value = PrtProp.prtCheckBoxPDF        'Save File Format values
    wsBasMP.Cells(6, "J").Value = PrtProp.prtCheckBoxHTM        'Save File Format values
    wsBasMP.Cells(7, "J").Value = PrtProp.prtCheckBoxMHT        'Save File Format values
    
'Check if any errors before close Prompt
    'Solution is Blank
    If prtComboBoxSolution.Value = "" Then
        LblSolution.Font.Bold = 1           'True
        LblSolution.ForeColor = RGB(250, 0, 0)
        MsgBox "You need to choose a Solution", vbInformation, "Choose Solution"
        ErrExist = 1                        'True
        Exit Sub                            'Exit Sub if Error to fix problem
    End If
    'Main Process is blank
    If prtComboBoxMPList.Value = "" Then
        LblMainProcess.Font.Bold = 1        'True
        LblMainProcess.ForeColor = RGB(250, 0, 0)
        MsgBox "You need to choose at least one Main Process", vbInformation, "Choose Main Process"
        ErrExist = 1                        'True
        Exit Sub                            'Exit Sub if Error to fix problem
    End If
    'Main Process is blank
    If prtComboBoxDocLayout.Value = "" Then
        LblSumLvl.Font.Bold = 1             'True
        LblSumLvl.ForeColor = RGB(250, 0, 0)
        MsgBox "You need to choose a Document Layout", vbInformation, "Choose Document Layout"
        ErrExist = 1                        'True
        Exit Sub                            'Exit Sub if Error to fix problem
    End If
    '2c8 folder path is not correct
    If Right(prt2C8Fld, 7) = "models\" Or prt2C8Fld = "" Then
        lbl2C8Fld.Font.Bold = 1             'True
        lbl2C8Fld.ForeColor = RGB(250, 0, 0)
        MsgBox "Link to 2c8 pictures is not correct! Please complete link.", vbInformation, "Path to 2c8 picture folder"
        ErrExist = 1                        'True
        prt2C8Fld.SetFocus
        Call cmd2C8dir_Click
        Exit Sub                            'Exit Sub if Error to fix problem
    End If
    
UnloadExit:
    If ErrExist = 0 Then                    'False
        Unload Me
    Else
'        GoTo CheckErrors:
    End If
    
End Sub

Attribute VB_Name = "PrtTestSettings"
Attribute VB_Base = "0{8A6EAC65-D503-4DE4-8718-06F377284DCD}{6ACE95C7-6A52-4681-A25A-D5B553A212B2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub CmdCancel_Click()

    Unload Me

End Sub

Private Sub CmdSave_Click()
Dim wsBasDt As Worksheet
Set wsBasDt = Sheets("Basic Data Test Doc")


    wsBasDt.Cells(4, "F").Value = prtTextBoxFileName
    wsBasDt.Cells(16, "F").Value = ""    'Remove old Cancel if any '3.3.22 update
    wsBasDt.Cells(7, "F").Value = prtChkBoxNotTested
    wsBasDt.Cells(11, "F") = prtChkBoxOnLineHelp
    wsBasDt.Cells(9, "F") = prtTextBoxHelpFolder        '3.3.22 Updated Help folder
    wsBasDt.Cells(15, "F") = prtChkBoxMacroEnable       '3.3.22 Updated Help folder
    wsBasDt.Cells(19, "F") = prtCheckBoxKeepExcl        '3.3.3 v1.1 Update
    
    wsBasDt.Cells(17, "F") = prtComboBoxDocLang         '3.3.3 v1.1 Update
    
    wsBasDt.Cells(4, "I") = ChkIncluded
    wsBasDt.Cells(5, "I") = ChkOptional
    wsBasDt.Cells(6, "I") = ChkPhase2
    wsBasDt.Cells(7, "I") = ChkExcluded
    
    Unload Me

End Sub

Private Sub prtComboBoxDocLang_Change()

End Sub

Private Sub UserForm_Initialize()
Dim n       As Integer
Dim wsBasDt As Worksheet
Set wsBasDt = Sheets("Basic Data Test Doc")

    prtChkBoxNotTested = wsBasDt.Cells(7, "F")
    prtChkBoxOnLineHelp = wsBasDt.Cells(11, "F")
    prtTextBoxHelpFolder = wsBasDt.Cells(9, "F")
    prtChkBoxMacroEnable = wsBasDt.Cells(15, "F")                                  '3.3.22 Test Case structure
    ChkIncluded = wsBasDt.Cells(4, "I")
    ChkOptional = wsBasDt.Cells(5, "I")
    ChkPhase2 = wsBasDt.Cells(6, "I")
    ChkExcluded = wsBasDt.Cells(7, "I")

With prtComboBoxDocLang
'    n = 25
'   While wsBasDt.Range("E" & n) <> ""
'       .AddItem wsBasDt.Range("E" & n)
'       n = n + 1
'   Wend
    n = 5 ' Start column for languages
'   row for languages is hardcoded to row 51
    While wsBasDt.Cells(51, n) <> ""
       .AddItem wsBasDt.Cells(51, n)
       n = n + 1
   Wend
End With
prtComboBoxDocLang = wsBasDt.Cells(17, "F")
If prtComboBoxDocLang = "" Then
    prtComboBoxDocLang = "English"
End If
prtCheckBoxKeepExcl = wsBasDt.Cells(19, "F")

End Sub

Private Sub prtCmdUpdateHelpFldr_Click()
    MsgBox "The Help text folder is created when published the HTML file from 2c8. Change document Root in 2c8 for IFS Application Helpfiles and Re-publish solution", vbInformation, "How to change Help Text Directory"
    
  With Application.FileDialog(msoFileDialogFolderPicker)
    .InitialFileName = Application.ActiveWorkbook.Path & "\"
    .Title = "Select Help files Folder"
    .AllowMultiSelect = False
    '.Filters.Add "All Files", "*.*", 1
    .Filters.Clear

    'Show the dialog and if returned True, use the selected file
    If .Show = True Then 'The user clicked "OK"
      prtCmdUpdateHelpFldr = .SelectedItems(1)
      ErrExist = False
    Else
      MsgBox "No folder selected. Procedure Canceled!", vbInformation, "Folder Selection"
    End If
  End With
End Sub

Attribute VB_Name = "PrtTestTransfer"
Attribute VB_Base = "0{F8C38750-F22B-4E36-A32C-220910030892}{C6B06A14-0A21-4B9C-860B-F6AEC56EE271}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ChkBoxCopyTestCycle_Click()

End Sub

Private Sub CmdCancel_Click()

Dim wsBasDt     As Worksheet
Set wsBasDt = Sheets("Basic Data Test Doc")

    wsBasDt.Cells(4, "R") = ""
    wsBasDt.Cells(5, "R") = ""
    wsBasDt.Cells(6, "R") = ""
    wsBasDt.Cells(7, "R") = "Cancel"
    wsBasDt.Cells(8, "R") = "FALSE"

    Unload Me

End Sub

Private Sub CmdBrowse1_Click()

  With Application.FileDialog(msoFileDialogFilePicker)
    .InitialFileName = Application.ActiveWorkbook.Path & "\"
    .Title = "Select File to transfer data from"
    .AllowMultiSelect = False
    .Filters.Clear
    .Filters.Add "Excel Files", "*.xls*", 1

    'Show the dialog and if returned True, use the selected file
    If .Show = True Then 'The user clicked "OK"
      prtTextBoxFrom = .SelectedItems(1)
      prtTextBoxFrom.SetFocus
    Else
      MsgBox "No File selected. Procedure Canceled!", vbInformation, "File Selection"
    End If
  End With

End Sub

Private Sub CmdBrowse2_Click()

  With Application.FileDialog(msoFileDialogFilePicker)
    .InitialFileName = Application.ActiveWorkbook.Path & "\"
    .Title = "Select File to transfer data to"
    .AllowMultiSelect = False
    .Filters.Clear
    .Filters.Add "Excel Files", "*.xls*", 1

    'Show the dialog and if returned True, use the selected file
    If .Show = True Then 'The user clicked "OK"
      prtTextBoxTo = .SelectedItems(1)
      prtTextBoxTo.SetFocus
    Else
      MsgBox "No File selected. Procedure Canceled!", vbInformation, "File Selection"
    End If
  End With

End Sub

Private Sub CmdTransfer_Click()

Dim wsBasDt     As Worksheet
Set wsBasDt = Sheets("Basic Data Test Doc")

    wsBasDt.Cells(4, "R") = prtTextBoxFrom
    wsBasDt.Cells(5, "R") = prtTextBoxTo
    wsBasDt.Cells(6, "R") = prtComboData
    wsBasDt.Cells(7, "R") = ""
    wsBasDt.Cells(8, "R") = ChkBoxCopyTestCycle

    
  If prtTextBoxFrom = "" Then
    MsgBox "Select Test Tracker to copy from!", vbInformation, "Missing Info"
  Else
    If prtTextBoxTo = "" Then
      MsgBox "Select Test Tracker to copy to!", vbInformation, "Missing Info"
    Else
      If prtComboData = "" Then
        MsgBox "Select Data to Copy!", vbInformation, "Missing Info"
      Else
        Unload Me
      End If '    If prtComboData = "" Then
    End If '    If prtTextBoxTo = "" Then
  End If '    If prtTextBoxFrom = "" Then

End Sub

Private Sub UserForm_Initialize()

  With prtComboData
    .AddItem "Only Test Data"
    .AddItem "Test Data and Results"
  End With
  
  ChkBoxCopyTestCycle = 0
  
  
End Sub
Attribute VB_Name = "PrtWorkShop"
Attribute VB_Base = "0{AFA3B272-7E89-4027-9A22-D2BBBE34069C}{C88145A6-8F9F-4D9F-80A3-D74663ECEB8C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private ErrExist        As Boolean

Private Sub cmd2C8dir_Click()
  
  With Application.FileDialog(msoFileDialogFolderPicker)
    .InitialFileName = Application.ActiveWorkbook.Path
    .Title = "Select 2c8 Folder"
    .AllowMultiSelect = False
    '.Filters.Add "All Files", "*.*", 1
    .Filters.Clear

    'Show the dialog and if returned True, use the selected file
    If .Show = True Then 'The user clicked "OK"
      prt2C8Fld = .SelectedItems(1)
      ErrExist = False
      lbl2C8Fld.Font.Bold = False
      lbl2C8Fld.ForeColor = "-2147483630"
    Else
      MsgBox "No folder selected. Procedure Canceled!", vbInformation, "Folder Selection"
    End If
  End With

End Sub

Private Sub CmdCancel_Click()

Dim wsBasWS         As Worksheet

    Set wsBasWS = Worksheets("Basic Data WS")
    
    wsBasWS.Cells(12, "C").Value = "Cancel"

Unload Me
End Sub
Function openPPT() As String
Dim strFilePath As String
Dim V As Variant
On Error Resume Next

'Allow the user to select the Word document
With Application.FileDialog(msoFileDialogOpen)
    .InitialFileName = Application.ActiveWorkbook.Path
    .Title = "Select PowerPoint Template"
    .AllowMultiSelect = False
    '.Filters.Add "All Files", "*.*", 1
    .Filters.Clear
    .Filters.Add "All Documents", "*.*", 1
    .Filters.Add "Word Documents", "*.pptx; *.ppt; *.pptm; *.potx; *.potm", 1

'Show the dialog and if returned True, use the selected file
If .Show = True Then 'The user clicked "OK"
strFilePath = .SelectedItems(1)
Else
MsgBox "No file selected. Procedure Canceled!", vbInformation, "File Selection"

End If
End With
openPPT = strFilePath
End Function

Private Sub cmdFldDoc_Click()
    
  With Application.FileDialog(msoFileDialogFolderPicker)
    .InitialFileName = Application.ActiveWorkbook.Path
    .Title = "Select Folder to save Workshop Presentation"
    .AllowMultiSelect = False
    '.Filters.Add "All Files", "*.*", 1
    .Filters.Clear

    'Show the dialog and if returned True, use the selected file
    If .Show = True Then 'The user clicked "OK"
      prtPresFld = .SelectedItems(1)
      ErrExist = False
      lblDocFld.Font.Bold = False
      lblDocFld.ForeColor = "-2147483630"
    Else
      MsgBox "No folder selected. Procedure Canceled!", vbInformation, "Folder Selection"
    End If
  End With


End Sub

Private Sub cmdPptTmp_Click()
Dim wsBasWS                 As Worksheet
Set wsBasWS = Worksheets("Basic Data WS")

    prtPptTmp = openPPT
    wsBasWS.Cells(5, "C") = prtPptTmp
    lblPptTmp.Font.Bold = False
    lblPptTmp.ForeColor = "-2147483630"
    ErrExist = False
    
End Sub


Private Sub prt2C8Fld_Change()
Dim wsBasWS             As Worksheet
Set wsBasWS = Worksheets("Basic Data WS")
    
    If prt2C8Fld <> "" Then
      lbl2C8Fld.Font.Bold = False
      lbl2C8Fld.ForeColor = "-2147483630"
      wsBasWS.Cells(6, "C") = prt2C8Fld
    End If

End Sub

Private Sub prtComboSolution_Change()

    If prtComboSolution.Value <> "" Then
        prtComboMP.Visible = True
        LblFiltMainProc.Visible = True
        Call CreateMPList(False)
    End If

End Sub

Private Sub prtPresFld_Change()

  If prtPresFld <> "" Then
    lblDocFld.Font.Bold = False
    lblDocFld.ForeColor = "-2147483630"
    ErrExist = False
  End If

End Sub

Private Sub prtPresName_Change()

Dim wsBasWS             As Worksheet
Set wsBasWS = Worksheets("Basic Data WS")

wsBasWS.Cells(14, "C") = prtPresName.Value
lblFileName = prtPresName & " <Main Process> for <Process>"

End Sub

Private Sub prtPresTitle_Change()
Dim wsBasWS             As Worksheet

Set wsBasWS = Worksheets("Basic Data WS")

wsBasWS.Cells(13, "C") = prtPresTitle.Value
LblTitle = prtPresTitle & " <Main Process> for <Process>"

End Sub

Private Sub UserForm_Initialize()

Dim n                   As Integer
Dim Solution            As String
Dim wsBasWS             As Worksheet
Dim wsSolution          As Worksheet
Dim wsSolutionMP        As Worksheet
Dim wsScn               As Worksheet

Set wsScn = Worksheets("Scenario overview")
Set wsBasWS = Worksheets("Basic Data WS")
Set wsSolution = Worksheets("SolutionList")
Set wsSolutionMP = Worksheets("SolutionMPList")

'Check if Multiple Solutions in Top Area column
If wsScn.Cells(7, "P") = "" Then            'No multiple Solution
    Solution = wsScn.Cells(8, "O")
    LblSolution.Visible = False
    prtComboSolution.Visible = False
    prtComboSolution.Value = Solution
    prtComboMP.Visible = True               'Show MP Process Combo when single Solution
    LblFiltMainProc.Visible = True          'Show MP Process Combo when single Solution
Else
    LblSolution.Visible = True
    With prtComboSolution
      .Visible = True
      n = 3
      While wsSolution.Range("A" & n) <> ""
        .AddItem wsSolution.Range("A" & n)
        n = n + 1
      Wend
    End With
    prtComboMP.Visible = False              'Dont show Process Combo before Solutions is choosed
    LblFiltMainProc.Visible = False         'Dont show Process Combo before Solutions is choosed

End If

    prtComboProc.Visible = False            'Dont show Process Combo before Solutions is choosed
    LblFiltProc.Visible = False             'Dont show Process Combo before Solutions is choosed
    
    prtPresTitle.Value = wsBasWS.Cells(13, "C")
    prtPresName.Value = wsBasWS.Cells(14, "C")
    prtPptTmp = wsBasWS.Cells(5, "C")
    prt2C8Fld = wsBasWS.Cells(6, "C")
    prtPresFld = wsBasWS.Cells(7, "C")
    prtChkBoxCrtScenPics = wsBasWS.Cells(8, "C")
    LblTitle = prtPresTitle & " <Main Process> for <Process>"
    lblFileName = prtPresName & " <Main Process> for <Process>"

End Sub
Private Sub CmdPrt_Click()

Dim wsBasWS             As Worksheet
    
    Set wsBasWS = Worksheets("Basic Data WS")
    
    wsBasWS.Cells(12, "C").Value = ""
    wsBasWS.Cells(3, "C").Value = prtPresTitle
    wsBasWS.Cells(4, "C").Value = prtPresName
    wsBasWS.Cells(5, "C").Value = prtPptTmp
    wsBasWS.Cells(6, "C").Value = prt2C8Fld
    wsBasWS.Cells(7, "C").Value = prtPresFld
    wsBasWS.Cells(8, "C").Value = prtChkBoxCrtScenPics
    wsBasWS.Cells(9, "C").Value = prtComboSolution
    wsBasWS.Cells(10, "C").Value = prtComboMP
    wsBasWS.Cells(11, "C").Value = prtComboProc
    
    'Check if MP is choosed
    If prtComboMP.Value = "" Then
        ErrExist = True
        LblFiltMainProc.Font.Bold = True
        LblFiltMainProc.ForeColor = RGB(250, 0, 0)
        MsgBox "You need to choose at least one Main Process", vbInformation, "Choose Main Process"
        Exit Sub
    End If
    
    'Check if Process is choosed
    If prtComboProc.Value = "" Then
        ErrExist = True
        LblFiltProc.Font.Bold = True
        LblFiltProc.ForeColor = RGB(250, 0, 0)
        MsgBox "You need to choose at least one Process", vbInformation, "Choose Process"
        Exit Sub
    End If
    
    'Check if PPT Template is choosed
    If prtPptTmp.Value = "" Then
        ErrExist = True
        lblPptTmp.Font.Bold = True
        lblPptTmp.ForeColor = RGB(250, 0, 0)
        MsgBox "You need to select a PowerPoint Template", vbInformation, "Choose PowerPoint Template"
        Exit Sub
    End If
    
    'Check if 2c8 Folder is choosed
    If prt2C8Fld.Value = "" Then
        ErrExist = True
        lbl2C8Fld.Font.Bold = True
        lbl2C8Fld.ForeColor = RGB(250, 0, 0)
        MsgBox "You need to select a 2c8 Folder", vbInformation, "Choose 2c8 folder"
        Exit Sub
    End If
    
    'Check if File Save Folder is choosed
    If prtPresFld.Value = "" Then
        ErrExist = True
        lblDocFld.Font.Bold = True
        lblDocFld.ForeColor = RGB(250, 0, 0)
        MsgBox "You need to select a Folder to save presention", vbInformation, "Choose folder to save presentation"
        Exit Sub
    End If
    
    If ErrExist = False Then
        Unload Me
    End If
    
End Sub
Private Sub prtComboMP_Change()

Dim c               As Integer
Dim r               As Integer
Dim wsBasWS         As Worksheet

    Set wsBasWS = Worksheets("Basic Data WS")
    
    wsBasWS.Cells(10, "C").Value = prtComboMP.Value
    If prtComboMP.Value <> "" Then
      LblFiltMainProc.Font.Bold = False
      LblFiltMainProc.ForeColor = "-2147483630"
      prtComboProc.Clear
      prtComboProc.Visible = True
      LblFiltProc.Visible = True
      With prtComboProc
        .AddItem "*All"
        If prtComboMP.Value <> "*All MP" Then
            'Find Area Row in Workshop Planning Sheet
            r = 4
            While Sheets("Workshop Planning").Cells(r, 3).Value <> prtComboMP.Value Or r > 500
            r = r + 15
            Wend
            c = 4    'Column 4
            While Sheets("Workshop Planning").Cells(r, c).Value <> ""
            .AddItem Sheets("Workshop Planning").Cells(r, c).Value
            c = c + 1
            Wend
        End If 'If prtComboMP.Value <> "*All MP" Then
      End With
      LblTitle = prtPresTitle & " " & prtComboMP & " for <Process>"
      lblFileName = prtPresName & " " & prtComboMP & " for <Process>"
    End If 'If prtComboMP.Value <> "" Then

End Sub
Private Sub prtComboProc_Change()

Dim wsBasWS         As Worksheet

    Set wsBasWS = Worksheets("Basic Data WS")
        
    wsBasWS.Cells(11, "C").Value = prtComboProc.Value
    ErrExist = False
    LblFiltProc.Font.Bold = False
    LblFiltProc.ForeColor = "-2147483630"
    
    LblTitle = prtPresTitle & " " & prtComboMP & " for " & prtComboProc
    lblFileName = prtPresName & " " & prtComboMP & " for " & prtComboProc

End Sub
Sub CreateMPList(MPCall As Boolean)

Dim sSolution           As String
Dim sMPArea             As String
Dim sMPIncl             As String
Dim FiltArr(1 To 5)     As String
Dim i, j                As Integer
Dim NrOfSolMP           As Integer
Dim NrOfVisibleRows     As Integer
Dim rng, filtrng        As Range
Dim wsSolutMPList       As Worksheet
Dim wsBasWS             As Worksheet

Set wsSolutMPList = Sheets("SolutionMPList")
Set wsBasWS = Sheets("Basic Data WS")
NrOfSolMP = wsSolutMPList.Cells(Rows.Count, "B").End(xlUp).row

If prtComboSolution = "*All" Then
  wsSolutMPList.Range("A1:C1").AutoFilter Field:=1
Else
  wsSolutMPList.Range("A1:C1").AutoFilter Field:=1, Criteria1:=prtComboSolution.Value
End If

If prtComboMP = "" Or prtComboMP = "*All MP" Then
  wsSolutMPList.Range("A1:C1").AutoFilter Field:=2
Else
  wsSolutMPList.Range("A1:C1").AutoFilter Field:=2, Criteria1:=prtComboMP.Value
End If

wsSolutMPList.Range("A1:C1").AutoFilter Field:=3, Criteria1:="Included"
        
NrOfVisibleRows = wsSolutMPList.AutoFilter.Range.Columns(1).SpecialCells(xlCellTypeVisible).Cells.Count - 1
If NrOfVisibleRows > 0 Then
  If MPCall = False Then
    With prtComboMP
      .Clear
      .AddItem "*All MP"
      Set rng = wsSolutMPList.Range("A1:A" & NrOfSolMP)                             'Include header to have at least 2 rows in the range
      Set filtrng = rng.Offset(1, 0).SpecialCells(xlCellTypeVisible).EntireRow      'Offset one row to exclude header from the range
      For Each rng In filtrng
        sSolution = rng.Cells(1, "A")
        sMPArea = rng.Cells(1, "B")
        sMPIncl = rng.Cells(1, "C")
        .AddItem sMPArea
      Next
    End With
  End If
Else
  MsgBox ("No Main Processes exist for combination of Solution and Filter values")
End If


End Sub
Attribute VB_Name = "Reset_Tool_1"
Sub ResetTool()

Dim wsStrPage       As Worksheet
Dim wsScpInf        As Worksheet
Dim wsScn           As Worksheet
Dim wsBasDt         As Worksheet
Dim wsMPList        As Worksheet
Dim wsSolutionList  As Worksheet
Dim wsSolutMPList   As Worksheet
Dim wsStartPage     As Worksheet
Dim wsBadRecs       As Worksheet

Dim NrOfRows        As Long
Dim NrOfBadRows     As Long

Set wsStartPage = Worksheets("Start Page")
Set wsScpInf = Worksheets("ScopeInfo")
Set wsScn = Worksheets("Scenario overview")
Set wsBasDt = Worksheets("Basic Data Test Doc")
Set wsMPList = Worksheets("MPList")
Set wsSolutionList = Worksheets("SolutionList")
Set wsSolutMPList = Worksheets("SolutionMPList")
Set wsBadRecs = Worksheets("Bad Records")

If wsScn.AutoFilterMode Then                        ' Is AutoFilter mode on
    If wsScn.FilterMode Then                          ' Is sheet filtered
        wsScn.ShowAllData
    End If
End If
    
NrOfRows = wsScn.Cells.SpecialCells(xlCellTypeLastCell).row
If NrOfRows > 6 Then
    wsScn.Range(wsScn.Cells(7, 1), wsScn.Cells(NrOfRows, 1)).EntireRow.Delete
End If
    
NrOfBadRows = wsBadRecs.Cells.SpecialCells(xlCellTypeLastCell).row
If NrOfBadRows > 1 Then
    wsBadRecs.Range(wsBadRecs.Cells(2, 1), wsBadRecs.Cells(NrOfBadRows, 1)).EntireRow.Delete
End If
    
ActiveWorkbook.Save
    
wsMPList.Range("A2:A" & wsMPList.UsedRange.Rows.Count).ClearContents                'Clear all content in MPList
wsSolutionList.Range("A1:A" & wsSolutionList.UsedRange.Rows.Count).ClearContents    'Clear all content in SolutionList
wsSolutMPList.Range("A2:C" & wsSolutMPList.UsedRange.Rows.Count).ClearContents      'Clear all content in SolutionMPList
wsStartPage.Range("D13:D26").ClearContents                                          'Clear all content Scope Info

'Clear Document Info
wsStartPage.Cells(20, "G") = 0

wsBasDt.Cells(4, "F").ClearContents
wsBasDt.Cells(5, "F").ClearContents
wsBasDt.Cells(8, "F").ClearContents
wsBasDt.Cells(14, "F").ClearContents
wsBasDt.Cells(17, "F") = "English"
wsBasDt.Cells(18, "F").ClearContents
wsBasDt.Cells(22, "F").ClearContents

'Clear Transfer Data Info
wsStartPage.Cells(18, "J") = 0
wsStartPage.Cells(19, "J") = 0

wsBasDt.Cells(4, "R").ClearContents
wsBasDt.Cells(5, "R").ClearContents
wsBasDt.Cells(6, "R").ClearContents
wsBasDt.Cells(7, "R").ClearContents
wsBasDt.Cells(8, "R") = False


End Sub
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
Dim ws          As Integer

For ws = 1 To Worksheets.Count
     With Worksheets(ws)
         .EnableOutlining = True
         .Protect UserInterfaceOnly:=True
     End With
Next

End Sub
Attribute VB_Name = "TransferData_1"
Sub TransferData()

Dim wbFr            As Workbook
Dim wbTo            As Workbook

Dim wsStrPg         As Worksheet
Dim wsBasDt         As Worksheet
Dim wsFr            As Worksheet
Dim wsTo            As Worksheet
Dim wsFrOverView    As Worksheet
Dim wsToOverView    As Worksheet

Dim wbFileFr        As String
Dim wbFileTo        As String
Dim ShtNmFr         As String
Dim ShtNmTo         As String
Dim xxCpyDt         As String
Dim xxCancel        As String

Dim NrOfShtFr       As Integer
Dim NrOfShtTo       As Integer
Dim ShtFr           As Integer
Dim ShtTo           As Integer
Dim FrRow           As Integer
Dim ToRow           As Integer
Dim NrOfFR          As Integer
Dim NrOfTO          As Integer

Dim rngFr           As Range
Dim rngTo           As Range

    Set wsStrPg = ThisWorkbook.Sheets("Start Page")
    Set wsBasDt = ThisWorkbook.Sheets("Basic Data Test Doc")
    
    'Reset Progress meters
    wsStrPg.Cells(18, "J") = 0
    wsStrPg.Cells(19, "J") = 0
        
    PrtTestTransfer.Show

    wbFileFr = wsBasDt.Cells(4, "R")
    wbFileTo = wsBasDt.Cells(5, "R")
    xxCpyDt = wsBasDt.Cells(6, "R")
    xxCancel = wsBasDt.Cells(7, "R")
    DoEvents

    If xxCancel = "" Then
    
    Application.ScreenUpdating = False
    Application.DisplayStatusBar = True
        
    Set wbFr = Workbooks.Open(wbFileFr)
    Set wbTo = Workbooks.Open(wbFileTo)
    
    wbTo.Unprotect
    
    NrOfShtFr = wbFr.Sheets.Count
    NrOfShtTo = wbTo.Sheets.Count
    
    For ShtFr = 3 To NrOfShtFr
    
    Set wsFr = wbFr.Sheets(ShtFr)
    ShtNmFr = wsFr.Name
    
    wsStrPg.Activate
    Application.ScreenUpdating = True
    Application.StatusBar = "Transfer Data from " & wbFr.Name & " / " & ShtNmFr ' & ", Nr of scenarios " & ShtFr & " of " & NrOfShtFr
    wsStrPg.Cells(18, "J") = (ShtFr - 2) / (NrOfShtFr - 2)
    Application.ScreenUpdating = False

    ShtTo = 3
    While ShtTo < NrOfShtTo And wbTo.Sheets(ShtTo).Name <> ShtNmFr
      ShtTo = ShtTo + 1
    Wend
    If ShtNmFr = wbTo.Sheets(ShtTo).Name Then
      Set wsTo = wbTo.Sheets(ShtTo)
      wsTo.Unprotect
      Set rngFr = wbFr.Sheets(ShtFr).Range("H4:AV16")
      rngFr.Copy wsTo.Range("H4:AV16")
      If xxCpyDt = "Test Data and Results" Then
        FrRow = 20
        While FrRow < 70 And wsFr.Cells(FrRow, "B") <> ""
          ToRow = 20
          While ToRow < 70 And wsFr.Cells(FrRow, "B") <> wsTo.Cells(ToRow, "B")
            ToRow = ToRow + 1
          Wend
          If wsFr.Cells(FrRow, "B") = wsTo.Cells(ToRow, "B") Then
            wsFr.Range("I" & FrRow & ":AV" & FrRow).Copy wsTo.Range("I" & ToRow & ":AV" & ToRow)
          End If
          FrRow = FrRow + 1
        Wend
      End If 'If xxCpyDt = "Test Data and Results" Then
      
    End If 'If ShtNmFr = wbTo.Sheets(ShtTo).Name Then
    
    Next 'For ShtFr = 3 To NrOfShtFr
    
    
    If wsBasDt.Cells(8, "R") = True Then
        Set wsFr = wbFr.Sheets("Test Overview")
        Set wsTo = wbTo.Sheets("Test Overview")
        NrOfFR = wsFr.Cells(Rows.Count, "A").End(xlUp).row
        NrOfTR = wsTo.Cells(Rows.Count, "A").End(xlUp).row
        For FR = 7 To NrOfFR
            Application.ScreenUpdating = True
            Application.StatusBar = "Transfer Data from Test Overview for row " & FR & " of " & NrOfFR          'v1.0 A1:New
            wsStrPg.Cells(19, "J") = (FR - 6) / (NrOfFR - 6)
            Application.ScreenUpdating = False
'           If wsFr.Cells(FR, "AA") <> "" Then
            If wsFr.Cells(FR, "A") = "Scenario" Then                          'v1.0 A1: Changed to copy values for all scenario rows
                TR = 7
                While wsTo.Cells(TR, "B") <> wsFr.Cells(FR, "B") And TR < NrOfTR
                    TR = TR + 1
                Wend
                If wsTo.Cells(TR, "B") = wsFr.Cells(FR, "B") Then
'                   wsFr.Range("AA" & FR).Copy wsTo.Range("AA" & TR)
                    wsFr.Range("AG" & FR).Copy wsTo.Range("AG" & TR)    'v1.0 A1: verify period moved from AA to AG
                    wsFr.Range("S" & FR).Copy wsTo.Range("S" & TR)      'v1.0 A1: Copy Solution status values.
                    wsFr.Range("T" & FR).Copy wsTo.Range("T" & TR)      'v1.0 A1: Copy Reason for off track.
                    wsFr.Range("V" & FR).Copy wsTo.Range("V" & TR)      'v1.0 A1: Copy Solution status values.
                    wsFr.Range("W" & FR).Copy wsTo.Range("W" & TR)      'v1.0 A1: Copy Reason for off track.
                    wsFr.Range("Y" & FR).Copy wsTo.Range("Y" & TR)      'v1.0 A1: Copy Solution status values.
                    wsFr.Range("Z" & FR).Copy wsTo.Range("Z" & TR)      'v1.0 A1: Copy Reason for off track.
                    wsFr.Range("AB" & FR).Copy wsTo.Range("AB" & TR)    'v1.0 A1: Copy Solution status values.
                    wsFr.Range("AC" & FR).Copy wsTo.Range("AC" & TR)      'v1.0 A1: Copy Reason for off track.
                    wsFr.Range("AD" & FR).Copy wsTo.Range("AD" & TR)      'v1.0 A1: Copy Reason for off track.
                    wsFr.Range("AE" & FR).Copy wsTo.Range("AE" & TR)      'v1.0 A1: Copy Reason for off track.
                    wsFr.Range("AH" & FR).Copy wsTo.Range("AH" & TR)    'v1.0 A1: Copy Solution status values.
                End If
            End If 'If scenario
        Next
    End If 'If wsBasDt.Cells(8, "R") = "TRUE" Then
    
    wbTo.Sheets("Test overview").Activate
    wbTo.Save
    wbTo.Close
    wbFr.Save
    wbFr.Close
    
    Application.ScreenUpdating = True
    Application.StatusBar = False                                   ' Release Status Bar to Excel
    MsgBox "Transfer is now completed", vbInformation, "Information"
    
    End If 'If xxCancel = "" Then
    
    Application.ScreenUpdating = True
    Application.StatusBar = False                                   ' Release Status Bar to Excel

End Sub
Attribute VB_Name = "prtStsReport"
Attribute VB_Base = "0{F4D614F7-44E0-45FC-B717-2C2DB17DC27E}{67C8D9D1-0439-4B57-987A-0A7E740F9E83}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CmdCancel_Click()
    Sheets("Basic Data").Cells(4, "J").Value = "Cancel"

Unload Me

End Sub

Private Sub CmdPrt_Click()
    Sheets("Basic Data").Cells(4, "I").Value = prtStsReport.prtTitle
    Sheets("Basic Data").Cells(5, "I").Value = prtStsReport.prtDocName
    Sheets("Basic Data").Cells(6, "I").Value = prtStsReport.prtChkPrtProc
    Sheets("Basic Data").Cells(7, "I").Value = prtStsReport.prtChkPrtSubp
    Sheets("Basic Data").Cells(8, "I").Value = prtStsReport.prtWdTmp
    Sheets("Basic Data").Cells(9, "I").Value = prtStsReport.prtDocFld
    Sheets("Basic Data").Cells(4, "J").Value = ""    'Remove old Cancel if any
    
Unload Me
    
End Sub
Attribute VB_Name = "prtTest"
Attribute VB_Base = "0{FAAE186D-411F-409E-BAE3-504A8000DFCA}{F05D2D4C-69E7-4AD2-B8AF-9369F7C2E130}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private ErrExist        As Boolean

Private Sub CommandButton1_Click()
    
    PrtTestSettings.Show

End Sub

Private Sub prtCmdSaveFld_Click()
    
  With Application.FileDialog(msoFileDialogFolderPicker)
    .InitialFileName = Application.ActiveWorkbook.Path & "\"
    .Title = "Select Folder to save Test Document"
    .AllowMultiSelect = False
    '.Filters.Add "All Files", "*.*", 1
    .Filters.Clear

    'Show the dialog and if returned True, use the selected file
    If .Show = True Then 'The user clicked "OK"
      prtTextBoxSaveFolder = .SelectedItems(1)
      ErrExist = False
      lblSaveTestBook.Font.Bold = False
      lblSaveTestBook.ForeColor = "-2147483630"
    Else
      MsgBox "No folder selected. Procedure Canceled!", vbInformation, "Folder Selection"
    End If
  End With

End Sub

Private Sub prtComboBoxLang_Change()
Dim wsBasDt             As Worksheet
Set wsBasDt = Worksheets("Basic Data Test Doc")
    
    wsBasDt.Cells(20, "F") = prtComboBoxLang

End Sub

Private Sub prtComboBoxProcess_Change()
    
    
    If prtComboBoxProcess <> "" And prtComboBoxProcess <> "*All" Then
      If prtTextBoxFileName <> "" Then
        lblFileNameOutPut = prtTextBoxFileName & " " & prtComboBoxMP & " for " & prtComboBoxProcess
      Else
        lblFileNameOutPut = prtComboBoxMP & " for " & prtComboBoxProcess
      End If
    Else
      If prtTextBoxFileName <> "" Then
        lblFileNameOutPut = prtTextBoxFileName & " " & prtComboBoxMP
      Else
        lblFileNameOutPut = prtComboBoxMP
      End If
    End If

End Sub

Private Sub prtComboSolution_Change()
Dim wsBasDt             As Worksheet
Set wsBasDt = Worksheets("Basic Data Test Doc")
    
    wsBasDt.Cells(14, "F") = prtComboSolution

End Sub

Private Sub prtTextBoxFileName_Change()

    If prtTextBoxFileName <> "" Then                                                                    '3.3.22 Help text update
        If prtTest.prtComboBoxMP = "*All" Then                                                          '3.3.22 Help text update
            If prtTest.prtChkBoxAllMP = False Then                                                      '3.3.22 Help text update
                prtTest.lblFileNameOutPut = prtTest.prtTextBoxFileName & " " & prtTest.prtComboSolution '3.3.22 Help text update
            Else                                                                                        '3.3.22 Help text update
                prtTest.lblFileNameOutPut = prtTest.prtTextBoxFileName & " <MP Area>"                   '3.3.22 Help text update
            End If 'If prtTest.prtChkBoxAllMP = False Then                                              '3.3.22 Help text update
        Else                                                                                            '3.3.22 Help text update
            If prtComboBoxProcess = "" And prtComboBoxProcess = "*All" Then                                 '3.3.25v9 Add Process Selection
                lblFileNameOutPut = prtTextBoxFileName & " " & prtComboBoxMP                            '3.3.22 Help text update
            Else                                                                                        '3.3.25v9 Add Process Selection
                lblFileNameOutPut = prtTextBoxFileName & " " & prtComboBoxMP & " for " & prtComboBoxProcess '3.3.25v9 Add Process Selection
            End If                                                                                      '3.3.25v9 Add Process Selection
        End If 'If prtTest.prtComboBoxMP = "*All" Then                                                  '3.3.22 Help text update
    Else                                                                                                '3.3.22 Help text update
        If prtTest.prtComboBoxMP = "*All" Then                                                          '3.3.22 Help text update
            If prtTest.prtChkBoxAllMP = False Then                                                      '3.3.22 Help text update
                prtTest.lblFileNameOutPut = prtTest.prtComboSolution                                    '3.3.22 Help text update
            Else                                                                                        '3.3.22 Help text update
                prtTest.lblFileNameOutPut = "<MP Area>"                                                 '3.3.22 Help text update
            End If 'If prtTest.prtChkBoxAllMP = False Then                                              '3.3.22 Help text update
        Else
            If prtComboBoxProcess = "" Or prtComboBoxProcess = "*All" Then                              '3.3.25v9 Add Process Selection
                lblFileNameOutPut = prtComboBoxMP                                                       '3.3.22 Help text update
            Else                                                                                        '3.3.25v9 Add Process Selection
                lblFileNameOutPut = prtComboBoxMP & " for " & prtComboBoxProcess                        '3.3.22 Help text update
            End If                                                                                      '3.3.25v9 Add Process Selection
        End If
    End If                                                                                              '3.3.22 Help text update

End Sub

Private Sub UserForm_Initialize()
Dim n                   As Integer
Dim wsBasDt             As Worksheet
Set wsBasDt = Worksheets("Basic Data Test Doc")


With prtComboSolution
    n = 2
    While Sheets("SolutionList").Range("A" & n) <> ""
    .AddItem Sheets("SolutionList").Range("A" & n)
    n = n + 1
    Wend
    If n = 3 Then               'Only one Solution
      prtComboSolution = Worksheets("SolutionList").Cells(2, "A")
      wsBasDt.Cells(14, "F") = prtComboSolution
    End If
End With
With prtComboBoxMP
    n = 3
    .AddItem "*All"
    While Sheets("MPList").Range("A" & n) <> ""
    .AddItem Sheets("MPList").Range("A" & n)
    n = n + 1
    Wend
End With
    prtTextBoxFileName = wsBasDt.Cells(4, "F")
    prtTextBoxSaveFolder = wsBasDt.Cells(8, "F")
    prtTest.lblFileNameOutPut.Visible = False
    prtTest.prtChkBoxAllMP.Visible = False
    lblSelectProcess.Visible = False
    prtComboBoxProcess.Visible = False

With prtComboBoxLang
    n = 4
    While wsBasDt.Cells(n, "L") <> ""
      .AddItem wsBasDt.Cells(n, "L")
      n = n + 1
    Wend
    prtComboBoxLang = wsBasDt.Cells(20, "F")
End With
    
End Sub
Private Sub prtComboBoxMP_Change()
Dim wsBasDt             As Worksheet
Dim wsScn               As Worksheet
Set wsBasDt = Worksheets("Basic Data Test Doc")
Set wsScn = Worksheets("Scenario overview")

    wsBasDt.Cells(5, "F").Value = prtComboBoxMP.Value
    
    If prtTest.prtComboBoxMP <> "" Then
        lblFileNameOutPut.Visible = True
    Else
        lblFileNameOutPut.Visible = False
    End If
    
    If prtTest.prtComboBoxMP = "*All" Then
        prtTest.prtChkBoxAllMP.Visible = True
        If prtTextBoxFileName <> "" Then
            lblFileNameOutPut = prtTextBoxFileName & " " & prtComboSolution
        Else
            lblFileNameOutPut = prtComboSolution
        End If
    Else
        prtTest.prtChkBoxAllMP.Visible = False
        If prtTextBoxFileName <> "" Then
            lblFileNameOutPut = prtTextBoxFileName & " " & prtComboBoxMP
        Else
            lblFileNameOutPut = prtComboBoxMP
        End If
    End If
    
If prtComboBoxMP <> "" And prtComboBoxMP <> "*All" Then
  lblSelectProcess.Visible = True
  prtComboBoxProcess.Visible = True
  With prtComboBoxProcess
    .Clear
    n = 3
    .AddItem "*All"
    While wsScn.Range("N" & n) <> prtComboBoxMP
    n = n + 1
    Wend
    While wsScn.Range("N" & n) = prtComboBoxMP
    If wsScn.Range("A" & n) = "Process" Then
    .AddItem wsScn.Range("M" & n)
    End If
    n = n + 1
    Wend
  End With
Else
  lblSelectProcess.Visible = False
  prtComboBoxProcess.Visible = False
  prtComboBoxProcess.Clear
End If
    
    If prtComboBoxMP <> "" Or prtChkBoxAllMP <> 0 Then
      ErrExist = 0
    End If
    
End Sub
Private Sub prtChkBoxAllMP_Click()

    If prtTest.prtChkBoxAllMP = False Then
        prtComboBoxMP.Visible = True
        lblSelectMP.Visible = True
        If prtTextBoxFileName <> "" Then                                                            '3.3.22 Help text update
          prtTest.lblFileNameOutPut = prtTest.prtTextBoxFileName & " " & prtTest.prtComboSolution
        Else                                                                                        '3.3.22 Help text update
          prtTest.lblFileNameOutPut = prtTest.prtComboSolution                                      '3.3.22 Help text update
        End If 'If prtTextBoxFileName <> "" Then                                                    '3.3.22 Help text update
        If prtTest.prtComboBoxMP <> "" Then
            prtTest.lblFileNameOutPut.Visible = True
        Else
            prtTest.lblFileNameOutPut.Visible = False
        End If 'If prtTest.prtComboBoxMP <> "" Then
    Else
        prtComboBoxMP.Visible = False
        lblSelectMP.Visible = False
        If prtTextBoxFileName <> "" Then                                                            '3.3.22 Help text update
            prtTest.lblFileNameOutPut = prtTest.prtTextBoxFileName & " <MP Area>"
        Else                                                                                        '3.3.22 Help text update
          prtTest.lblFileNameOutPut = "<MP Area>"                                                   '3.3.22 Help text update
        End If 'If prtTextBoxFileName <> "" Then                                                    '3.3.22 Help text update
        prtTest.lblFileNameOutPut.Visible = True
    End If
    
    If prtComboBoxMP <> "" Or prtChkBoxAllMP <> 0 Then                                          '3.3.22 Help text update
      ErrExist = 0                                                                              '3.3.22 Help text update
    End If                                                                                      '3.3.22 Help text update
        
End Sub
Private Sub CmdCancel_Click()
    Sheets("Basic Data Test Doc").Cells(16, "F").Value = "Cancel"
Unload Me
End Sub

Private Sub CmdOK_Click()
Dim wsBasDt             As Worksheet
Set wsBasDt = Worksheets("Basic Data Test Doc")

    wsBasDt.Cells(4, "F").Value = prtTest.prtTextBoxFileName
    wsBasDt.Cells(16, "F").Value = ""    'Remove old Cancel if any '3.3.22 update
    wsBasDt.Cells(5, "F").Value = prtTest.prtComboBoxMP
    wsBasDt.Cells(6, "F").Value = prtTest.prtChkBoxAllMP
    wsBasDt.Cells(8, "F").Value = prtTest.prtTextBoxSaveFolder
    wsBasDt.Cells(18, "F").Value = prtTest.prtComboBoxProcess     '3.3.25V9 Add Process in selection
    wsBasDt.Cells(20, "F").Value = prtTest.prtComboBoxLang

    If prtTest.prtChkBoxAllMP = False And prtTest.prtComboBoxMP.Value = "" Then
        MsgBox "You need to choose at least one Main Process", vbInformation, "Choose Main Process"
        ErrExist = 1
    End If
    If ErrExist = False Then
        Unload Me
    End If

End Sub

' InQuest injected base64 decoded content
' j{%j

INQUEST-PP=macro
