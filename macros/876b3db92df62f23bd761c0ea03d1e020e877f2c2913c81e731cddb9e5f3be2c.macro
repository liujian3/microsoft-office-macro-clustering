Attribute VB_Name = "Feuil1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Modul1"

'Install/DeInstall-Routine, Excel95-kompatibel

Option Explicit
Option Compare Text
Global XLAName As String
Global XLAHalfName As String
Global InstallErr As Boolean

Public Sub Auto_open()
Attribute Auto_open.VB_ProcData.VB_Invoke_Func = " \n14"
On Error Resume Next
    If XLAisThere(XLAHalfName) Then
        ThisWorkbook.DialogSheets("dlgInst").DrawingObjects("btnInstall").Text = "D|fffd|sinstaller EuroXL"
    Else
        ThisWorkbook.DialogSheets("dlgInst").DrawingObjects("btnInstall").Text = "Installer EuroXL"
    End If
    ThisWorkbook.DialogSheets("dlgInst").Show
End Sub

Public Sub Reg_Install()
Attribute Reg_Install.VB_ProcData.VB_Invoke_Func = " \n14"
On Error GoTo Errotrap
Dim MyAddin As Object
Dim XLAName As String, XLAHalfName As String, File As String
Dim ExcelVersion As Integer
    If InStr(Application.Version, "7") > 0 Then ExcelVersion = 7
    If InStr(Application.Version, "8") > 0 Then ExcelVersion = 8
    If InStr(Application.Version, "9") > 0 Then ExcelVersion = 9
    XLAName = "\EuroXL2000.xla"
    XLAHalfName = "EuroXL"
    Select Case ExcelVersion
        Case 7: XLAName = "\EuroXL95.xla"
        Case 8: XLAName = "\EuroXL97.xla"
        Case 9: XLAName = "\EuroXL2000.xla"
        Case Else
        If vbNo = MsgBox("Probablement EuroXL ne fonctionnera pas avec cette version d'Excel. Voulez vous continuer ?", vbAbortRetryIgnore, "Installation d'EuroXL") Then ThisWorkbook.Close
    End Select
    
    If XLAisThere(XLAHalfName) Then 'deinstall
        If vbYes = MsgBox("D|fffd|sinstallation d'EuroXL !  Continuer ?", 36, "D|fffd|sinstallation d'EuroXL") Then
            AddIns(XLAHalfName).Installed = False
            If InStr(Dir(Application.Path & "\Euroxl.hlp"), "EuroXL") > 0 Then Kill Application.Path & "\Euroxl.hlp"
            'If InStr(Dir(Application.Path & "\EuroXL.gid"), "EuroXL") > 0 Then Kill Application.Path & "\Euroxl.gid"
            If InStr(Dir(Application.Path & "\Euroxl.cnt"), "EuroXL") > 0 Then Kill Application.Path & "\Euroxl.cnt"
            If InStr(Dir(Application.Path & "\Macrolib\Euroxl.ini"), "EuroXL") > 0 Then Kill Application.Path & "\Macrolib\EuroXL.ini"
            If InStr(Dir(Application.Path & "\Macrolib\EuroXL*.*"), "EuroXL") > 0 Then Kill Application.Path & "\Macrolib" & XLAName
            MsgBox "La d|fffd|sinstallation d'EuroXL a r|fffd|ussie. EuroXL sera effac|fffd| de la bibliotheque des macros compl|fffd|mentaires lors du prochain demarrage d'Excel.", 64, "EuroXL D|fffd|sinstallation"
            ThisWorkbook.DialogSheets("dlgInst").DrawingObjects("btnInstall").Text = "Installer EuroXL"
        End If
    Else                'install
        If InStr(Dir(ThisWorkbook.Path & "\EuroXL.hlp"), "EuroXL") > 0 Then FileCopy ThisWorkbook.Path & "\Euroxl.hlp", Application.Path & "\Euroxl.hlp"
        If InStr(Dir(ThisWorkbook.Path & "\EuroXL.cnt"), "EuroXL") > 0 Then FileCopy ThisWorkbook.Path & "\Euroxl.cnt", Application.Path & "\Euroxl.cnt"
        'If InStr(Dir(ThisWorkbook.Path & "\euroxl.GID"), "EuroXL") > 0 Then FileCopy ThisWorkbook.Path & "\euroxl.GID", Application.Path & "\euroxl.GID"
        If InStr(Dir(ThisWorkbook.Path & "\EuroXL.ini"), "EuroXL") > 0 Then FileCopy ThisWorkbook.Path & "\Euroxl.ini", Application.Path & "\Macrolib\Euroxl.ini"
        If InStr(Dir(ThisWorkbook.Path & XLAName), "EuroXL") > 0 Then FileCopy ThisWorkbook.Path & XLAName, Application.Path & "\Macrolib" & XLAName
        'SetAttr Application.Path & "\XLOuvrir\EuroXL.ini", vbHidden
        Set MyAddin = AddIns.Add(filename:=Application.Path & "\Macrolib" & XLAName, copyfile:=False)
        MyAddin.Installed = True
        If XLAisThere(XLAHalfName) Then
            If InstallErr Then
                Call MsgBox("Il y avait des probl|fffd|mes lors de l'installation d'" & MyAddin.Title & "Il se peut qu'" & MyAddin.Title & " ne fonctionne pas correctement. Veuillez, |fffd| pr|fffd|sent, red|fffd|marrer Excel. En cas de non-fonctionnement, vous pouvez effectuer la d|fffd|sinstallation avec cette routine (install.xla).", 32, "Installation d'EuroXL")
            Else
                Call MsgBox("L'installation d'" & MyAddin.Title & " a r|fffd|ussie. Veuillez, |fffd| pr|fffd|sent, red|fffd|marrer Excel.", 32, "Installation d'EuroXL")
            End If
            ThisWorkbook.DialogSheets("dlgInst").DrawingObjects("btnInstall").Text = "D|fffd|sinstaller EuroXL"
        Else
            MsgBox "L'installation a |fffd|chou|fffd|e. Desol|fffd|. Support technique: itradis@free.fr (Veuillez fournir les renseignements suivants: Versions de Windows, Excel et EuroXL", 48, "Installation d'EuroXL"
        End If
    End If
    Exit Sub
Errotrap:
    MsgBox "Erreur lors de l'installation / d|fffd|sinstallation. Erreur report|fffd|e: " & Error$(), , "Installation d'EuroXL"
    InstallErr = True
    Resume Next
End Sub

Public Function XLAisThere(ByRef XLATitle) As Boolean
Attribute XLAisThere.VB_ProcData.VB_Invoke_Func = " \n14"
On Error Resume Next
Dim ad As Object
    XLAisThere = False
    For Each ad In Application.AddIns
        If InStr(ad.Name, "EuroXL") > 0 Then
            XLAisThere = ((InStr(Dir(ad.FullName), "EuroXL") > 0) And (InStr(Dir(ad.FullName), "EuroXL") > 0))
            XLATitle = ad.Title
            Exit Function
        End If
    Next ad
End Function

Sub ShowHelp()
Attribute ShowHelp.VB_ProcData.VB_Invoke_Func = " \n14"
    Call Application.Help("euroXL.hlp", 1)
End Sub

Sub RausHier()
Attribute RausHier.VB_ProcData.VB_Invoke_Func = " \n14"
On Error Resume Next
    DoEvents
    ThisWorkbook.Close savechanges:=False
End Sub

Sub ExcelEnd()
Attribute ExcelEnd.VB_ProcData.VB_Invoke_Func = " \n14"
    Application.Quit
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{523CDBA2-544E-11D5-97F3-525405E3BA32}{523CDB99-544E-11D5-97F3-525405E3BA32}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


INQUEST-PP=macro
