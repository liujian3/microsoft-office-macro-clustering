Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "clsThisApp"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private WithEvents m_oThisApp As Application
Attribute m_oThisApp.VB_VarHelpID = -1

Private Sub Class_Initialize()
  'Syncronize class with application.
  Set m_oThisApp = Word.Application
  pub_LastDocumentClosing = False
  cls_Initialize_Reset
lbl_Exit:
  Exit Sub
End Sub

Private Sub m_oThisApp_DocumentOpen(ByVal Doc As Document)
  cls_Initialize_Reset
lblbl_Exit:
  Exit Sub
End Sub

Private Sub m_oThisApp_DocumentChange()
  cls_Initialize_Reset
lbl_Exit:
  Exit Sub
End Sub

Private Sub m_oThisApp_DocumentBeforeClose(ByVal Doc As Document, Cancel As Boolean)
  If Application.Documents.Count > 1 Then
    pub_LastDocumentClosing = False
  Else
    pub_LastDocumentClosing = True
    p_oRibbon.Invalidate
  End If
lblbl_Exit:
  Exit Sub
End Sub


Private Sub m_oThisApp_NewDocument(ByVal Doc As Document)
  cls_Initialize_Reset
lblbl_Exit:
  Exit Sub
End Sub

Private Sub m_oThisApp_WindowSelectionChange(ByVal Sel As Selection)
  'Not used.
lbl_Exit:
  Exit Sub
End Sub

Private Sub cls_Initialize_Reset()
On Error GoTo lbl_Exit:
  On Error GoTo lbl_Exit
  System.Cursor = wdCursorIBeam
  p_oRibbon.Invalidate
  On Error GoTo 0
lbl_Exit:
  Exit Sub
End Sub




Attribute VB_Name = "frmConfigure"
Attribute VB_Base = "0{6DD4500C-74FB-41E9-A519-F583C46B0C3E}{158BE2F8-E5F9-4A0E-904C-E5354720609F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_lngIndex As Long
Private m_bDisable
Private m_sngCapHBorder As Single, m_sngCapWBorder As Single


'The Built-In Gallery show checkboxes.
'If all are unchecked, the Group 1 visibility checkbox is unchecked and disabled.
Private Sub chk1_Change()
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk2_Change()
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk3_Change()
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk4_Change()
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk5_Change()
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk6_Change()
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk7_Change()
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk8_Change()
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk9_Change()
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk10_Change()
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk11_Change()
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk12_Change()
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk13_Change()
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk14_Change()
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk34_Change()
  'The oddball out of order Bibliography gallery.
  fcnGrp1Visibility
lbl_Exit:
  Exit Sub
End Sub

Function fcnGrp1Visibility()
  m_bDisable = True
  For m_lngIndex = 1 To 14
    If Controls("chk" & m_lngIndex).Value = True Then
      m_bDisable = False
      Exit For
    End If
  Next m_lngIndex
  If chk34.Value = True Then m_bDisable = False
  If m_bDisable Then
    chkG1.Value = False
    chkG1.Enabled = False
  Else
    chkG1.Enabled = True
    chkG1.Value = True
  End If
lbl_Exit:
  Exit Function
End Function

'The Custom Gallery show checkboxes.
'If all are unchecked, the Group 2 visibility checkbox is unchecked and disabled.
Private Sub chk29_Change()
  fcnGrp2Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk30_Change()
  fcnGrp2Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk31_Change()
  fcnGrp2Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk32_Change()
  fcnGrp2Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk33_Change()
  fcnGrp2Visibility
lbl_Exit:
  Exit Sub
End Sub

Function fcnGrp2Visibility()
  m_bDisable = True
  For m_lngIndex = 29 To 33
    If Controls("chk" & m_lngIndex).Value = True Then
      m_bDisable = False
      Exit For
    End If
  Next m_lngIndex
  If m_bDisable Then
    chkG2.Value = False
    chkG2.Enabled = False
  Else
    chkG2.Enabled = True
    chkG2.Value = True
  End If
lbl_Exit:
  Exit Function
End Function

'The Custom Type Gallery show checkboxes.
'If all are unchecked, the Group 2 visibility checkbox is unchecked and disabled.
Private Sub chk15_Change()
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk16_Change()
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk17_Change()
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk18_Change()
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk19_Change()
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk20_Change()
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk21_Change()
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk22_Change()
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk23_Change()
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk24_Change()
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk25_Change()
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk26_Change()
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk27_Change()
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk28_Change()
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Private Sub chk35_Change()
  'The oddball out of order Custom Bibliography gallery.
  fcnGrp3Visibility
lbl_Exit:
  Exit Sub
End Sub

Function fcnGrp3Visibility()
  m_bDisable = True
  For m_lngIndex = 15 To 28
    If Controls("chk" & m_lngIndex).Value = True Then
      m_bDisable = False
      Exit For
    End If
  Next m_lngIndex
  If chk35.Value = True Then m_bDisable = False
  If m_bDisable Then
    chkG3.Value = False
    chkG3.Enabled = False
  Else
    chkG3.Enabled = True
    chkG3.Value = True
  End If
lbl_Exit:
  Exit Function
End Function


Private Sub cmdRestore_Click()
Dim strVar As String
Dim lngIndex As Long
  With ThisDocument
    .Variables("ShowTab") = "True"
    .Variables("TabLabel") = "BuildingBlocks"
    .Variables("Customize BIM").Value = "True"
    .Variables("QuickPick").Value = "False"
    For lngIndex = 1 To 3
      strVar = strVar & "True|"
    Next lngIndex
    strVar = Left(strVar, Len(strVar) - 1)
    .Variables("GrpVisible").Value = strVar
    strVar = "Built-in Type Building Blocks|Custom Type Building Blocks|Custom Building Blocks"
    .Variables("GrpLabels").Value = strVar
    .Variables("GrpDMLabels").Value = modBBGalleriesRibCon.fcnDefaultGrpDMLabels
    strVar = vbNullString
    For lngIndex = 1 To 35
      strVar = strVar & "True|"
    Next lngIndex
    strVar = Left(strVar, Len(strVar) - 1)
    .Variables("GrpDMVisible").Value = strVar
    .Variables("GrpDMSize").Value = modBBGalleriesRibCon.fcnDefaultGrpDMSize
  End With
  'Refresh the form.
  UserForm_Initialize
lbl_Exit:
  Exit Sub
End Sub

Private Sub imgAnchor1_Click()
  If cmdGo.Caption = "SAVE SETTINGS" Then
    With frmDisclaimer
      .Left = 3.6
      .ZOrder (0)
    End With
    With cmdGo
      .Left = 32.4
      .Caption = "OK\CLOSE"
      .ZOrder (0)
      .Width = 430.2
    End With
    mpDUC.Value = 1
  Else
    modAddInUtils.WebPageInfo
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmdGo_Click()
Dim strSettings As String
Dim lngIndex As Long
  
  Select Case cmdGo.Caption
  Case "ACCEPT TERMS"
    ThisDocument.Variables("FirstUse").Value = "False"
    mpDUC.Pages(1).Enabled = True
    mpDUC.Value = 1
    With cmdGo
      .Caption = "OK\CLOSE"
    End With
    ThisDocument.Save
    DoEvents
  Case "OK\CLOSE"
    With cmdGo
      .Left = 201.6
      .Width = 261
      .Caption = "SAVE SETTINGS"
    End With
    frmDisclaimer.Left = 554.4
  Case Else
    For lngIndex = 1 To 3
      If Controls("txtG" & lngIndex).Text = vbNullString Then
        modAddInUtils.ShowMessage 2, , "One or more group label text fields is blank." & vbCr + vbCr _
                                   & "Please ensure all all text fields are filled in and try again.", , , 100
        Unload frmMsg
        GoTo lbl_Exit
      End If
    Next lngIndex
    For lngIndex = 1 To 35
      If Controls("txt" & lngIndex).Text = vbNullString Then
        modAddInUtils.ShowMessage 2, , "One or more gallery menu label text fields is blank." & vbCr + vbCr _
                                   & "Please ensure all all text fields are filled in and try again.", , , 100
        Unload frmMsg
        GoTo lbl_Exit
      End If
    Next lngIndex
    With ThisDocument
      .Variables("ShowTab") = CStr(chkTab.Value)
      'Save the tab label.
      .Variables("TabLabel") = txtTab '***GKM check invalid chars
      'Save the group labels.
      For lngIndex = 1 To 3
        strSettings = strSettings & Controls("txtG" & lngIndex).Text & "|"
      Next lngIndex
      strSettings = Left(strSettings, Len(strSettings) - 1)
      .Variables("GrpLabels").Value = strSettings
      'Save the group visibility settings.
      strSettings = vbNullString
      For lngIndex = 1 To 3
        strSettings = strSettings & CStr(Controls("chkG" & lngIndex).Value) & "|"
      Next lngIndex
      strSettings = Left(strSettings, Len(strSettings) - 1)
      .Variables("GrpVisible").Value = strSettings
      'Save the gallery menu labels.
      strSettings = vbNullString
      For lngIndex = 1 To 35
        strSettings = strSettings & Controls("txt" & lngIndex).Text & "|"
      Next lngIndex
        strSettings = Left(strSettings, Len(strSettings) - 1)
      .Variables("GrpDMLabels").Value = strSettings
      'Save the gallery menu visibility settings.
      strSettings = vbNullString
      For lngIndex = 1 To 35
        strSettings = strSettings & CStr(Controls("chk" & lngIndex).Value) & "|"
      Next lngIndex
      strSettings = Left(strSettings, Len(strSettings) - 1)
      .Variables("GrpDMVisible").Value = strSettings
      'Save the gallery menu size settings.
      strSettings = vbNullString
      For lngIndex = 1 To 35
        strSettings = strSettings & CStr(Controls("opt" & lngIndex & "_L").Value) & "|"
      Next lngIndex
      strSettings = Left(strSettings, Len(strSettings) - 1)
      .Variables("GrpDMSize").Value = strSettings
      .Variables("Customize BIM").Value = chkCustomBIM
      If p_oRibbon Is Nothing Then
        Set p_oRibbon = GetRibbon(.Variables("RibbonPointer").Value)
      End If
      p_oRibbon.Invalidate
      .Save
    End With
    DoEvents
    Hide
  End Select
lbl_Exit:
  Exit Sub
End Sub

Private Sub Img_DonateLink_Click()
  modAddInUtils.RemoveCloseButton frmDonate
  frmDonate.Show
lbl_Exit:
  Exit Sub
End Sub

Private Sub chkQuickPick_Click()
  If chkQuickPick.Value Then
    ThisDocument.Variables("QuickPick").Value = "True"
    modMain.AddCMenuItem
  Else
    ThisDocument.Variables("QuickPick").Value = "False"
    modMain.RemoveCMenuItem
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub chkCustomBIM_Click()
  If chkCustomBIM.Value Then
    ThisDocument.Variables("Customize BIM").Value = "True"
  Else
    ThisDocument.Variables("Customize BIM").Value = "False"
    chkTab.Value = True
  End If
lbl_Exit:
  Exit Sub

End Sub

Private Sub UserForm_Initialize()
Dim arrSettings() As String
Dim lngIndex As Long
Dim oCtr As control
Dim strVar As String


  'Ensure one checkbox in each gallery group is set True in design view to ensure proper configuration of the
  'Group show checkboxes.
  Caption = modAddInUtils.AppID & " - Version " & modAddInUtils.AppVer
   If CLng(Application.Version) > 14 Then
     m_sngCapHBorder = Height - InsideHeight
     m_sngCapWBorder = Width - InsideWidth
   Else
     m_sngCapHBorder = 0
     m_sngCapWBorder = 0
  End If
  Width = 555 + m_sngCapWBorder
  If ThisDocument.Variables("FirstUse") = True Then
    With frmDisclaimer
      .Left = 3.6
      .ZOrder (0)
    End With
    With cmdGo
      .Left = 32.4
      .Caption = "ACCEPT TERMS"
      .ZOrder (0)
      .Width = 430.2
    End With
    mpDUC.Pages(1).Enabled = False
    Err.Clear
  End If
  
  lblDisclaimer.Caption = modAddInUtils.strDisclaimerGKM
  With ThisDocument
    chkTab.Value = CBool(.Variables("ShowTab").Value)
    txtTab.Text = .Variables("TabLabel").Value
    arrSettings = Split(.Variables("GrpDMLabels").Value, "|")
    For lngIndex = 0 To UBound(arrSettings)
      Controls("txt" & lngIndex + 1).Text = arrSettings(lngIndex)
    Next lngIndex
    arrSettings = Split(.Variables("GrpLabels").Value, "|")
    For lngIndex = 0 To UBound(arrSettings)
      Controls("txtG" & lngIndex + 1).Text = arrSettings(lngIndex)
    Next lngIndex
    arrSettings = Split(.Variables("GrpVisible").Value, "|")
    For lngIndex = 0 To UBound(arrSettings)
      Controls("chkG" & lngIndex + 1).Value = arrSettings(lngIndex)
    Next lngIndex
    arrSettings = Split(.Variables("GrpDMSize").Value, "|")
    For lngIndex = 0 To UBound(arrSettings)
      If arrSettings(lngIndex) = "False" Then
        Controls("opt" & lngIndex + 1 & "_N").Value = True
      Else
        Controls("opt" & lngIndex + 1 & "_L").Value = True
      End If
    Next lngIndex
    arrSettings = Split(.Variables("GrpDMVisible").Value, "|")
    For lngIndex = 0 To UBound(arrSettings)
      Controls("chk" & lngIndex + 1).Value = arrSettings(lngIndex)
    Next lngIndex
    chkQuickPick.Value = .Variables("QuickPick").Value
    chkCustomBIM.Value = .Variables("Customize BIM").Value
  End With
lbl_Exit:
  Exit Sub
End Sub


Attribute VB_Name = "frmCreateBBs"
Attribute VB_Base = "0{668E1B0E-37EB-41F2-A5D2-14B8E5991550}{749A1104-F730-477A-B18D-23840EAA6973}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Private m_bSkipChange As Boolean
Private m_strNewCat As String
Private m_oBB As BuildingBlock
Private m_oTmpBB As Template
Private m_sngCapHBorder As Single, m_sngCapWBorder As Single

Private Sub cmd_CR_Click()
Dim oTmp As Template
Dim oBB As BuildingBlock
Dim oScratchPad As Word.Document
Dim oRng As Word.range, oSPRange As Word.range

  Set oTmp = Templates(comboSaveIn.Column(1))
  Select Case Caption
    Case "Create new building block"
      Select Case cmd_CR.Caption
        Case "OK"
          On Error Resume Next
          Set oBB = oTmp.BuildingBlockTypes(CLng(comboGallery.Column(1))).Categories(comboCat.Value).BuildingBlocks(txtName)
          'If an error occured then we know that no other BB exists with the defined properties so continue.
          If Err.Number <> 0 Then
            On Error GoTo 0
            oTmp.BuildingBlockEntries.Add txtName, CLng(comboGallery.Column(1)), comboCat.Value, Selection.range, txtDescription, CLng(comboOptions.Column(1))
            Hide
            modAddInUtils.ShowMessage 4, 4, "You have created a new building block in a the defined template." & vbCr + vbCr _
                                    & "Do you want to save changes to this template now?", , , 100
            If frmMsg.Tag = 1 Then
               Templates(oTmp.FullName).Save
               DoEvents
            End If
            Unload frmMsg
          Else
            'No error, then a building block as defined already exists.  See if the user wants to redefine the existing BB.
            If Caption = "Create new building block" Then
              cmd_CR.Caption = "Redefine"
              lbl_Redefined.Caption = "A building block named " & txtName & " already exists in defined template\gallery\category."
              cmd_CR.Top = 237.6
              cmdCancel.Top = 237.6
              lbl_Redefined.Enabled = True
              lblH.Height = 268.2
              Height = m_sngCapHBorder + lblH.Height
            End If
          End If
        Case "Redefine"
          'Create the redefined BB in the defined Savein template.
          oTmp.BuildingBlockEntries.Add txtName, CLng(comboGallery.Column(1)), comboCat.Value, Selection.range, txtDescription, comboOptions.Column(1)
          Hide
          modAddInUtils.ShowMessage 4, 4, "You have redefined a pre-existing building block in the defined template." & vbCr + vbCr _
                                    & "Do you want to save changes to the template now?", , , 100
          If frmMsg.Tag = 1 Then
            Templates(oTmp.FullName).Save
            DoEvents
          End If
          Unload frmMsg
      End Select
    Case "Modify Building Block"
      Select Case cmd_CR.Caption
        Case "OK"
          On Error Resume Next
          Set oBB = oTmp.BuildingBlockTypes(CLng(comboGallery.Column(1))).Categories(comboCat.Value).BuildingBlocks(txtName)
          'If an error occured then we know that no other BB exists with the defined properties so continue.
          If Err.Number <> 0 Then
            On Error GoTo 0
            'Create a pallette to define blocks to import.
            Set oScratchPad = Documents.Add(Visible:=False)
            Set oSPRange = oScratchPad.range
            Set oRng = m_oBB.Insert(oSPRange)
            'Delete the original BB.
            m_oBB.Delete
            'Create the redefined BB in the defined Savein template.
            oTmp.BuildingBlockEntries.Add txtName, CLng(comboGallery.Column(1)), comboCat.Value, oRng, txtDescription, comboOptions.Column(1)
            oScratchPad.Close wdDoNotSaveChanges
            Set oScratchPad = Nothing
            Hide
            modAddInUtils.ShowMessage 4, 4, "You have redefined a template building block." & vbCr + vbCr _
                                & "Do you want to save changes to the template(s) now?", , , 100
            If frmMsg.Tag = 1 Then
              oTmp.Save
              m_oTmpBB.Save
              DoEvents
            End If
            Unload frmMsg
          Else
            'No error, then the definition already exists.  See if the user wants to redefine the existing BB.
            If Caption = "Create Building Block" Then
              cmd_CR.Caption = "Redefine"
              lbl_Redefined.Caption = "A building block named " & txtName & " already exists in defined template\gallery\category" & vbCr + vbCr _
                                  & "Do you want to redefine or cancel?"
            End If
          End If
        Case "Redefine"
          oBB.Delete
          'Create a pallette to define blocks to import
           Set oScratchPad = Documents.Add(Visible:=False)
           Set oSPRange = oScratchPad.range
           Set oRng = m_oBB.Insert(oSPRange)
           'Delete the original BB.
           m_oBB.Delete
           'Create the redefined BB in the defined Savein template.
           oTmp.BuildingBlockEntries.Add txtName, CLng(comboGallery.Column(1)), comboCat.Value, oRng, txtDescription, comboOptions.Column(1)
           oScratchPad.Close wdDoNotSaveChanges
           Set oScratchPad = Nothing
           Hide
           modAddInUtils.ShowMessage 4, 4, "You have redefined a template building block." & vbCr + vbCr _
                               & "Do you want to save changes to the template(s) now?", , , 100
           If frmMsg.Tag = 1 Then
             oTmp.Save
             m_oTmpBB.Save
             DoEvents
           End If
           Unload frmMsg
      End Select
  End Select
lbl_Exit:
  Set oBB = Nothing
  Exit Sub
End Sub

Private Sub cmdCancel_Click()
  Tag = "CANCEL"
  Hide
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboCat_Enter()
  With comboCat
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboCat_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
  HandleExit comboCat, Cancel
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboCat_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  With comboCat
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboCat_Change()
Dim oFrmNewCat As frmNewCat
  If m_bSkipChange Then Exit Sub
  If Not comboCat.MatchFound Then
    '.Tag is the stored index and the last selected item.
    comboCat.Value = comboCat.Tag
  End If
  If comboCat.Value = "Create New Category ..." Then
    Set oFrmNewCat = New frmNewCat
    With oFrmNewCat
      .Show
      If .Tag <> vbNullString Then
        m_strNewCat = .Tag
        'Trigger a refresh.
        comboSaveIn_Change
      End If
    End With
  Else
    comboCat.Tag = comboCat.Value 'ListIndex
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboGallery_Enter()
  With comboGallery
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboGallery_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
  HandleExit comboGallery, Cancel
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboGallery_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  With comboGallery
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboGallery_Change()
Dim oTmp As Template
Dim oBBCs As Categories
Dim oBBC As Category
Dim lngIndex As Long
  If m_bSkipChange Then GoTo lbl_Exit
  If Not comboGallery.MatchFound Then
    '.Tag is the stored index and the last selected item.
    comboGallery.ListIndex = comboGallery.Tag
  End If
  comboGallery.Tag = comboGallery.ListIndex
  On Error GoTo Err_Handler:
  Set oTmp = Templates(comboSaveIn.Column(1))
  With comboCat
    m_bSkipChange = True
    .Clear
    m_bSkipChange = False
    For lngIndex = 1 To oTmp.BuildingBlockTypes(CLng(comboGallery.List(comboGallery.ListIndex, 1))).Categories.Count
      .AddItem oTmp.BuildingBlockTypes(CLng(comboGallery.Column(1))).Categories(lngIndex).Name
    Next
    modAddInUtils.SortListBox comboCat, 1
    If .ListCount = 0 Then
      .AddItem "General"
    End If
    .AddItem "Create New Category ..."
    For lngIndex = 0 To .ListCount - 1
      If .List(lngIndex) = "General" Then
        .ListIndex = lngIndex
        Exit For
      End If
    Next lngIndex
    .Tag = .ListIndex
  End With
lbl_Exit:
  Exit Sub
Err_Handler:
  Beep
End Sub

Private Sub comboSaveIn_Enter()
  With comboSaveIn
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboSaveIn_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
  HandleExit comboSaveIn, Cancel
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboSaveIn_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  With comboSaveIn
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboSaveIn_Change()
Dim oTmp As Template
Dim oBBCs As Categories
Dim oBBC As Category
Dim lngIndex As Long
Dim arrCats() As String
  
  If m_bSkipChange Then GoTo lbl_Exit
  If Not comboSaveIn.MatchFound Then
    '.Tag is the stored index and the last selected item.
    comboSaveIn.ListIndex = comboSaveIn.Tag
  End If
  comboSaveIn.Tag = comboSaveIn.ListIndex
  Set oTmp = Templates(comboSaveIn.Column(1))
  With comboCat
    m_bSkipChange = True
    .Clear
    m_bSkipChange = False
    For lngIndex = 1 To oTmp.BuildingBlockTypes(CLng(comboGallery.Column(1))).Categories.Count
       ReDim Preserve arrCats(lngIndex - 1)
       arrCats(lngIndex - 1) = oTmp.BuildingBlockTypes(CLng(comboGallery.Column(1))).Categories(lngIndex).Name
    Next
    If m_strNewCat <> vbNullString Then
      ReDim Preserve arrCats(lngIndex - 1)
      arrCats(lngIndex - 1) = m_strNewCat
      On Error Resume Next
      modAddInUtils.QuickSort arrCats
      On Error GoTo 0
      .List = arrCats
      modAddInUtils.SortListBox comboCat, 1
      .AddItem "Create New Category ..."
       For lngIndex = 0 To .ListCount - 1
        If .List(lngIndex) = m_strNewCat Then
          .ListIndex = lngIndex
          Exit For
        End If
      Next lngIndex
    Else
      On Error Resume Next
      .List = arrCats
      If Err.Number <> 0 Then
        .AddItem "General"
      End If
      modAddInUtils.SortListBox comboCat, 1
      On Error GoTo 0
      .AddItem "Create New Category ..."
      For lngIndex = 0 To .ListCount - 1
        If .List(lngIndex) = "General" Then
          .ListIndex = lngIndex
          Exit For
        End If
      Next lngIndex
    End If
    m_strNewCat = vbNullString
    .Tag = .Value
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboOptions_Enter()
  With comboOptions
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboOptions_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
  HandleExit comboOptions, Cancel
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboOptions_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  With comboOptions
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboOptions_Change()
If Not comboOptions.MatchFound Then
    '.Tag is the stored index and the last selected item.
    comboOptions.ListIndex = comboOptions.Tag
  End If
  comboOptions.Tag = comboOptions.ListIndex
End Sub

Private Sub txtName_Change()
  If Len(txtName.Text) = 0 Then
    cmd_CR.Enabled = False
  Else
    cmd_CR.Enabled = True
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub UserForm_Activate()
   'Get the original BB and template passed from BB Organizer.
   On Error Resume Next
   Set m_oBB = Templates(comboSaveIn.List(comboSaveIn.ListIndex, 1)).BuildingBlockTypes(CLng(comboGallery.List(comboGallery.ListIndex, 1))).Categories(comboCat.Value).BuildingBlocks(txtName)
   Set m_oTmpBB = m_oBB.Parent.Parent.Parent.Parent.Parent.Parent
   On Error GoTo 0
lbl_Exit:
  Exit Sub
End Sub

Private Sub UserForm_Initialize()
Dim oTmp As Template
Dim arrGalleryNames() As String
Dim arrTypeDef() As String
Dim lngIndex As Long
Dim oRng As Word.range
Dim arrEval() As String, strName As String

  cmd_CR.Top = 198
  cmdCancel.Top = 198
  lbl_Redefined.Enabled = False
  lblH.Height = 226.8
  m_sngCapHBorder = Height - InsideHeight
  m_sngCapWBorder = Width - InsideWidth
  Width = m_sngCapWBorder + lblW.Width
  Height = m_sngCapHBorder + lblH.Height
  arrGalleryNames = Split(strGalleryNames, "|")
  arrTypeDef = Split(strTypeDef, "|")
  
  cmd_CR.Enabled = False
  With comboOptions
    .AddItem
    .List(.ListCount - 1, 0) = "Insert content only"
    .List(.ListCount - 1, 1) = 0
    .AddItem
    .List(.ListCount - 1, 0) = "Insert content in its own paragraph only"
    .List(.ListCount - 1, 1) = 1
    .AddItem
    .List(.ListCount - 1, 0) = "Insert content in its own page"
    .List(.ListCount - 1, 1) = 0
    .ListIndex = 0
  End With
  'Replicate (as best I can) the built-in pre-defined BB name process used by Word.
  Set oRng = Selection.range
  strName = vbNullString
  If Len(oRng.Text) > 32 Then
    strName = Left(oRng.Text, 32)
  Else
    strName = oRng.Text
  End If
  strName = Replace(strName, "/", "*")
  strName = Replace(strName, Chr(13), "")
  strName = Replace(strName, Chr(11), "*")
  strName = Replace(strName, Chr(10), "")
  strName = Replace(strName, Chr(9), "*")
  strName = Replace(strName, Chr(160), " ")
  arrEval = Split(strName, " ")
  If UBound(arrEval) = 0 Then
    strName = arrEval(0)
  End If
  If UBound(arrEval) > 0 Then
     strName = arrEval(0)
     If Len(strName) < 10 Then
       strName = strName & " " & arrEval(1)
     End If
  End If
  strName = Trim(strName)
  txtName = strName
  If Err.Number <> 0 Then txtName = vbNullString
  On Error GoTo 0
  'Load action templates.
  m_bSkipChange = True
  For Each oTmp In Templates
    With comboSaveIn
      .AddItem
      .List(.ListCount - 1, 0) = oTmp.Name
      .List(.ListCount - 1, 1) = oTmp.FullName
    End With
  Next
  comboSaveIn.ListIndex = 0
  comboSaveIn.Tag = 0
  'Load gallery names.
  With comboGallery
    For lngIndex = 0 To UBound(arrGalleryNames)
      .AddItem
      .List(lngIndex, 0) = arrGalleryNames(lngIndex)
      .List(lngIndex, 1) = arrTypeDef(lngIndex)
    Next
    .ListIndex = 0
    .Tag = .ListIndex
  End With
  m_bSkipChange = False
  comboGallery_Change
  lbl_Redefined.Caption = vbNullString
lbl_Exit:
  Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = 0 Then
    Cancel = True
    cmdCancel_Click
  End If
lbl_Exit:
  Exit Sub
End Sub

Sub HandleExit(cbo As MSForms.ComboBox, Cancel As MSForms.ReturnBoolean)
  With cbo
    If .MatchFound = False Then
      .Value = .Tag
       Cancel = True
      .SelStart = 0
      .SelLength = Len(.Value)
    End If
  End With
End Sub

Attribute VB_Name = "frmDeleteBBs"
Attribute VB_Base = "0{5C086300-2545-435F-954E-76E19E5FBEE8}{E6D61C71-9782-45C4-8135-D9A47162D39E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_sngCapHBorder As Single, m_sngCapWBorder As Single

Private Sub cmd_CR_Click()
Dim oTmp As Template
Dim oBB As BuildingBlock
Dim lngIndex As Long, lngIndexDelete
Dim bDelete As Boolean
  If cmd_CR.ForeColor = wdColorRed Then
    modAddInUtils.ShowMessage 4, 4, "You have selected all building blocks for deletiton. Click ""Yes"" to confirm and continue or click ""No"" to Cancel.", , , 90
    If frmMsg.Tag <> "1" Then GoTo lbl_Exit
  End If
  bDelete = False
  For lngIndex = 0 To listBBs.ListCount - 1
    If listBBs.Selected(lngIndex) = True Then
      bDelete = True 'We have work to do.
      Exit For
    End If
  Next lngIndex
  If bDelete Then
    lngIndexDelete = lngIndex
    Set oTmp = Templates(lbl_Template.Tag)
    For lngIndex = lngIndexDelete To listBBs.ListCount - 1
      If listBBs.Selected(lngIndex) = True Then
        oTmp.BuildingBlockTypes(lbl_Gallery.Tag).Categories(listBBs.List(lngIndex, 0)).BuildingBlocks(listBBs.List(lngIndex, 1)).Delete
      End If
    Next lngIndex
    Hide
    Tag = "Refresh"
  Else
    modAddInUtils.ShowMessage 2, , "Nothing was selected to delete.", , , 80
  End If
lbl_Exit:
  Unload frmMsg
  Exit Sub
End Sub

Private Sub cmdCancel_Click()
  Tag = "CANCEL"
  Hide
lbl_Exit:
  Exit Sub
End Sub

Private Sub optSelect_Click()
Dim lngIndex As Long
  If optSelect.Caption = "Select All" Then
    For lngIndex = 0 To listBBs.ListCount - 1
      listBBs.Selected(lngIndex) = True
    Next lngIndex
    cmd_CR.ForeColor = wdColorRed
    optSelect.Caption = "Unselect All"
    optSelect.Value = False
  Else
    For lngIndex = 0 To listBBs.ListCount - 1
      listBBs.Selected(lngIndex) = False
    Next lngIndex
    optSelect.Caption = "Select All"
    optSelect.Value = False
    cmd_CR.ForeColor = &H80000012
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub UserForm_Activate()
Dim oTmp As Template
Dim lngCatIndex As Long, lngBBIndex As Long
Dim oCat As Category, oBB As BuildingBlock
  
  Set oTmp = Templates(lbl_Template.Tag)
  For lngCatIndex = 1 To oTmp.BuildingBlockTypes(lbl_Gallery.Tag).Categories.Count
    Set oCat = oTmp.BuildingBlockTypes(lbl_Gallery.Tag).Categories(lngCatIndex)
    For lngBBIndex = 1 To oCat.BuildingBlocks.Count
      Set oBB = oCat.BuildingBlocks(lngBBIndex)
      With listBBs
        .AddItem
        .List(.ListCount - 1, 0) = oBB.Category.Name
        .List(.ListCount - 1, 1) = oBB.Name
        .List(.ListCount - 1, 2) = oBB.Description
      End With
    Next lngBBIndex
  Next lngCatIndex
lbl_Exit:
  Set oTmp = Nothing
  Set oCat = Nothing
  Set oBB = Nothing
  Exit Sub

End Sub

Private Sub UserForm_Initialize()
 If CLng(Application.Version) > 14 Then
     m_sngCapHBorder = Height - InsideHeight
     m_sngCapWBorder = Width - InsideWidth
   Else
     m_sngCapHBorder = 0
     m_sngCapWBorder = 0
  End If
  Width = Width '+ m_sngCapWBorder
lbl_Exit:
  Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = 0 Then
    Cancel = True
    cmdCancel_Click
  End If
lbl_Exit:
  Exit Sub
End Sub
Attribute VB_Name = "frmDonate"
Attribute VB_Base = "0{A97955F1-15E1-451A-902D-BE834240B409}{5A72A951-DD30-48FD-90D1-07552F7642FE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub cmd_Close_Click()
  Unload Me
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmd_Sterling_Click()
  modAddInUtils.DonateGB
  Unload Me
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmd_Euro_Click()
  modAddInUtils.DonateEU
  Unload Me
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmd_USD_Click()
  modAddInUtils.DonateUS
  Unload Me
lbl_Exit:
  Exit Sub
End Sub
Attribute VB_Name = "frmEnhancedTools"
Attribute VB_Base = "0{6ACCF924-8F9F-444F-A9AA-2F1720C19101}{99964298-B4F5-4B6A-A2F9-FE1F10A0FFD2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
'Logic routers to prevent full execution or triggering of subordinate change events in the Template/Type/Category comboboxes.
Private m_bTmpChange As Boolean
Private m_bSkipTmpChange As Boolean
Private m_bSkipTypeChange As Boolean
Private m_bSkipCatChange As Boolean
Private m_bCatChanged As Boolean
Private m_bTypeChanged As Boolean
'For listing and sorting galleries in the galley comboboxes
Private m_arrGalleryNames() As String
Private m_arrTypeDef() As String
'Objects
Private m_oSourceTemplate As Template
Private m_oActionTemplate As Template
Private m_oBBT As BuildingBlockType
Private m_oCat As Category
'Logic validators for import process
Private m_bActionPicked As Boolean
Private m_SourceBBPicked As Boolean
Private m_bSourcePicked As Boolean
Private m_sngCapWBorder As Single, m_sngCapHBorder As Single

'***Command button code
Private Sub cmdImport_Click()
'***Shows or hides the Import source frame and configures the form accordingly.
Dim lngIndex As Long
  With cmdImport
    If .Caption = "Import" Then
      'Disable the standard organizer functions.
      listActionTempBBs.Clear
      listSourceTempBBs.Clear
      'comboSourceTmp.Clear
      listActionTempBBs.Enabled = False
      comboActionCat.Enabled = False
      comboActionType.Enabled = False
      cmdInsert.Enabled = False
      cmdEditProps.Enabled = False
      cmdDelete.Enabled = False
      'Load the source templates
      m_bSkipTmpChange = True
      LoadSourceTmps
      m_bSkipTmpChange = False
      comboSourceTmp_Change
      'Reconfigure form.
      .Width = 91
      .Left = .Left - 10
      .Caption = "Close Export Pane"
      cmdClose.Width = 561.6
      Width = 574.2 + m_sngCapWBorder
    Else
      'Enable the standard organizer functions.
      listActionTempBBs.Enabled = True
      comboActionCat.Enabled = True
      comboActionType.Enabled = True
      For lngIndex = 0 To comboActionTmp.ListCount - 1
        If comboActionTmp.List(lngIndex, 0) = comboActionTmp.Value Then
          comboActionTmp.ListIndex = lngIndex
          Exit For
        End If
      Next
      For lngIndex = 0 To comboSourceTmp.ListCount - 1
        If comboSourceTmp.List(lngIndex, 0) = comboSourceTmp.Value Then
          comboSourceTmp.ListIndex = lngIndex
          Exit For
        End If
      Next
      'Reconfigure form.
      .Left = .Left + 10
      .Width = 81
      .Caption = "Import"
      cmdClose.Width = 273.6
      Width = 288.6 + m_sngCapWBorder
    End If
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmdExport_Click()
Dim lngIndex As Long, lngCount As Long
Dim colBBs As New Collection
Dim oScratchPad As Word.Document
Dim oRng As Word.range, oSPRange As Word.range
Dim oBB_S As BuildingBlock, oBB_A As BuildingBlock
Dim oFrmPB As frmProgressBar
Dim bShowProgress As Boolean
  bShowProgress = False
  'Collect the BBs to import.
  With listSourceTempBBs
    For lngIndex = 0 To .ListCount - 1
      If .Selected(lngIndex) Then
        colBBs.Add m_oSourceTemplate.BuildingBlockTypes(listSourceTempBBs.List(lngIndex, 5)).Categories(listSourceTempBBs.List(lngIndex, 2)).BuildingBlocks(listSourceTempBBs.List(lngIndex, 0))
       End If
    Next lngIndex
  End With
  'Create a pallette to define blocks to import
  Set oScratchPad = Documents.Add(Visible:=False)
  lngCount = colBBs.Count
  If lngCount > 10 Then
    bShowProgress = True
    Set oFrmPB = New frmProgressBar
    'Modal and non-modal forms cannot co-exist so hide the modal form and show the progress bar.
    Hide
    With oFrmPB
      .Caption = "Buidling Block Import Utility"
      .Height = 108
      .Show vbModeless
      .Repaint
    End With
    modAddInUtils.RemoveCloseButton oFrmPB
  End If
  For lngIndex = 1 To colBBs.Count
    If bShowProgress Then
      oFrmPB.lblAction.Caption = "Importing " & lngIndex & " of " & lngCount & " building blocks ... Please wait."
      oFrmPB.Label1.Width = oFrmPB.Label1.Width + (318 / lngCount)
      oFrmPB.Repaint
    End If
    Set oSPRange = oScratchPad.range
    'Clear the pallette
    oSPRange.Delete
    Set oBB_S = colBBs(lngIndex)
    'Insert the BB to export on the pallette.
    Set oRng = oBB_S.Insert(oSPRange)
    'Create the imported BB in the action template
    Set oBB_A = m_oActionTemplate.BuildingBlockEntries.Add(oBB_S.Name, oBB_S.Type.Index, oBB_S.Category.Name, oRng, oBB_S.Description, oBB_S.InsertOptions)
  Next lngIndex
  If bShowProgress Then
    Unload oFrmPB
    Set oFrmPB = Nothing
  End If
  'Crumple up the pallette.
  oScratchPad.Close wdDoNotSaveChanges
  'Refresh Dynamic Menus.
  If p_oRibbon Is Nothing Then
    Set p_oRibbon = GetRibbon(ThisDocument.Variables("RibbonPointer").Value)
  End If
  'Close the Import Source frame.
  cmdImport_Click
  comboActionType_Change
  p_oRibbon.Invalidate
  modAddInUtils.ShowMessage 4, 4, "You have imported one or building blocks into the selected template." & vbCr + vbCr _
                                & "Do you want to save changes to this template now?", , , 100
  If frmMsg.Tag = "1" Then
    Templates(m_oActionTemplate.FullName).Save
    DoEvents
  End If
  m_SourceBBPicked = False
  Unload frmMsg
  If bShowProgress Then
    Show
  End If
lbl_Exit:
  Set oScratchPad = Nothing
  Set oBB_S = Nothing
  Set oBB_A = Nothing
  Exit Sub
End Sub

Private Sub cmdInsert_Click()
Dim lngIndex As Long
  For lngIndex = 0 To listActionTempBBs.ListCount - 1
    If listActionTempBBs.Selected(lngIndex) = True Then
      Exit For
    End If
  Next lngIndex
  On Error GoTo 0
  fcnInsertBuildingBlocksByOption m_oActionTemplate, listActionTempBBs.List(lngIndex, 5), listActionTempBBs.List(lngIndex, 2), listActionTempBBs.List(lngIndex, 0)
  Hide
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmdDelete_Click()
Dim lngIndex As Long
Dim oBB As BuildingBlock

  If cmdDelete.ForeColor = wdColorRed Then
    modAddInUtils.ShowMessage 4, 4, "You have selected all building blocks for deletiton. Click ""Yes"" to confirm and continue or click ""No"" to Cancel", , , 100
    If frmMsg.Tag = "0" Then GoTo lbl_Exit
  End If
  With listActionTempBBs
    For lngIndex = 0 To .ListCount - 1
      If .Selected(lngIndex) Then
        m_oActionTemplate.BuildingBlockTypes(.List(lngIndex, 5)).Categories(.List(lngIndex, 2)).BuildingBlocks(.List(lngIndex, 0)).Delete
      End If
    Next
  End With
  'Refresh Dynamic Menus.
  If p_oRibbon Is Nothing Then
    Set p_oRibbon = GetRibbon(ThisDocument.Variables("RibbonPointer").Value)
  End If
  p_oRibbon.Invalidate
    modAddInUtils.ShowMessage 4, 4, "You have deleted one or more building blocks in the selected template." & vbCr + vbCr _
                                & "Do you want to save changes to this template now?", , , 120
  If frmMsg.Tag = "1" Then
    Templates(m_oActionTemplate.FullName).Save
    DoEvents
  End If
  cmdDelete.ForeColor = &H80000012
  cmdDelete.Enabled = False
  cmdInsert.Enabled = False
  cmdEditProps.Enabled = False
  Unload frmMsg
  'Trigger refresh
  'comboActionType_Change
  comboActionTmp_Change
lbl_Exit:
  Unload frmMsg
  Exit Sub
End Sub

Private Sub cmdClose_Click()
  Set m_oSourceTemplate = Nothing
  Set m_oActionTemplate = Nothing
  Hide
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmdOpenClose_Click()
Dim oAddin As AddIn
Dim strAddin As String, strLoad As String
Dim lngIndex As Long

  If cmdOpenClose.Caption = "Load Template" Then
    strLoad = fcnLoadTemplateAsAddIn
    Select Case strLoad
      Case "The template you selected is already loaded"
        modAddInUtils.ShowMessage 2, , strLoad, , , 80
        Unload frmMsg
      Case "**CANCELED**"
        modAddInUtils.ShowMessage 2, , "You did not select a template to load.", , , 80
        Unload frmMsg
      Case Else
        LoadSourceTmps
        cmdOpenClose.Caption = "Close Template"
        For lngIndex = 0 To comboSourceTmp.ListCount - 1
        
        If comboSourceTmp.List(lngIndex, 1) = strLoad Then
          comboSourceTmp.ListIndex = lngIndex
          Exit For
        End If
      Next
    End Select
  Else
    If comboSourceTmp.ListIndex = -1 Then
      modAddInUtils.ShowMessage 2, , "You must select the the template to unload in the the source template listbox.", , 80
      Unload frmMsg
    Else
      For Each oAddin In Application.AddIns
        strAddin = oAddin.Path & "\" & oAddin.Name
        If strAddin = comboSourceTmp.List(comboSourceTmp.ListIndex, 1) Then
          oAddin.Delete
        End If
      Next
      comboSourceTmp.Clear
      LoadSourceTmps
      For lngIndex = 0 To comboSourceTmp.ListCount - 1
        If comboSourceTmp.List(comboSourceTmp.ListIndex, 1) = strAddin Then
          comboSourceTmp.ListIndex = lngIndex
          Exit For
        End If
      Next
      cmdOpenClose.Caption = "Load Template"
    End If
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmdEditProps_Click()
Dim oFrm As frmCreateBBs
Dim lngIndex As Long
  
  Set oFrm = New frmCreateBBs
  With oFrm
    .Caption = "Modify Building Block"
    .cmd_CR.Caption = "OK"
    For lngIndex = 0 To listActionTempBBs.ListCount - 1
      If listActionTempBBs.Selected(lngIndex) = True Then
        Exit For
      End If
    Next lngIndex
    .comboSaveIn.List = comboActionTmp.List
    .comboSaveIn.ListIndex = comboActionTmp.ListIndex
    For lngIndex = 0 To .comboGallery.ListCount - 1
      If .comboGallery.List(lngIndex, 0) = listActionTempBBs.List(listActionTempBBs.ListIndex, 1) Then
        .comboGallery.ListIndex = lngIndex
        Exit For
      End If
    Next
    .comboCat.Value = listActionTempBBs.List(listActionTempBBs.ListIndex, 2)
    .txtName = listActionTempBBs.List(listActionTempBBs.ListIndex, 0)
    .txtDescription = listActionTempBBs.List(listActionTempBBs.ListIndex, 4)
    .comboOptions.ListIndex = listActionTempBBs.List(listActionTempBBs.ListIndex, 3)
    .Show
  End With
  'Refresh Dynamic Menus.
  If p_oRibbon Is Nothing Then
    Set p_oRibbon = GetRibbon(ThisDocument.Variables("RibbonPointer").Value)
  End If
  p_oRibbon.Invalidate
  Unload oFrm
  Set oFrm = Nothing
  cmdEditProps.Enabled = False
  cmdDelete.Enabled = False
  cmdInsert.Enabled = False
  'Refresh the dialog
  comboActionType_Change
lbl_Exit:
  Exit Sub
End Sub

Private Sub imgHelp1_Click()
  modAddInUtils.ShowMessage 2, , "Use the Import Source templage, gallery, category and building block controls to identify and select the building blocks in the source template that you want to export\import into the template selected in the organizer section." & vbCr + vbCr _
                             & "Building blocks selected for export\import are imported with the same name into the same gallery and category in the template selected in the organizer." & vbCr + vbCr _
                             & "When the Import Source frame is enabled the organizer gallery, category, building block and assoicated command controls are disabled." & vbCr + vbCr _
                             & "Close the Import Source frame or complete an import\export process to re-enable the controls.", , , 270
  Unload frmMsg
End Sub

Private Sub UserForm_Initialize()
  If CLng(Application.Version) > 14 Then
    m_sngCapHBorder = Height - InsideHeight
    m_sngCapWBorder = Width - InsideWidth
  Else
    m_sngCapHBorder = 0
    m_sngCapWBorder = 0
  End If
  Caption = "Organizer Enhanced Tools"
  cmdOpenClose.Caption = "Load Template"
  m_SourceBBPicked = False
  m_bSourcePicked = False
  m_bActionPicked = False
  LoadActionTemps
  cmdDelete.Enabled = False
  cmdInsert.Enabled = False
  cmdEditProps.Enabled = False
  cmdExport.Enabled = False
  cmdClose.Width = 273.6
  Width = 288.6 + m_sngCapWBorder
lbl_Exit:
  Exit Sub
End Sub

'***Action Template ComboBox code ***
'All conspires to ensure the user can only select a listed entry and avoids the ugly .MatchRequired system error.
Private Sub comboActionTmp_Enter()
  With comboActionTmp
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionTmp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
  HandleExit comboActionTmp, Cancel
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionTmp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  With comboActionTmp
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionTmp_Change()
Dim lngIndex As Long
  m_bTmpChange = True
  With comboActionTmp
    If Not .MatchFound Then
      '.Tag is the stored index and the last selected item.
      .ListIndex = .Tag
    End If
  End With
  'Store the valid selection.
  comboActionTmp.Tag = comboActionTmp.ListIndex
  'Part of export logic.  A receiver template must be selected.
  If comboActionTmp.ListIndex > -1 Then m_bActionPicked = True
  If m_bSourcePicked And m_bActionPicked And m_SourceBBPicked = True Then
    cmdExport.Enabled = True
  Else
    cmdExport.Enabled = False
  End If
  'Clear lists. Set up a bypass for change events that occur due to clearing and rebuilding list.
  m_bSkipTypeChange = True
  m_bSkipCatChange = True
  listActionTempBBs.Clear
  comboActionCat.Clear
  comboActionType.Clear
  'Create the action template object.
  Set m_oActionTemplate = Templates(comboActionTmp.Column(1))
  'Create the type gallery list.
  m_arrGalleryNames = Split(strGalleryNames, "|")
  m_arrTypeDef = Split(strTypeDef, "|")
  With comboActionType
    For lngIndex = 0 To UBound(m_arrGalleryNames)
      'Load only galleries containing content.
      If ValidateCategories(m_oActionTemplate.BuildingBlockTypes(m_arrTypeDef(lngIndex))) Then
        .AddItem
        .List(.ListCount - 1, 0) = m_arrGalleryNames(lngIndex)
        .List(.ListCount - 1, 1) = m_arrTypeDef(lngIndex)
      End If
    Next lngIndex
    .AddItem "All", 0
    'Restore item last selected if available in list.
    For lngIndex = 0 To .ListCount - 1
      If .List(lngIndex) = .Tag Then
        .ListIndex = lngIndex
        Exit For
      End If
    Next
    m_bSkipTypeChange = False
    If .ListIndex = -1 Then
      .ListIndex = 0
    End If
    .Tag = .List(.ListIndex)
  End With
  m_bTypeChanged = False
  'Trigger a typGallery and category event changes.
  m_bTmpChange = False
  If Not m_bTypeChanged Then comboActionType_Change
lbl_Exit:
  Exit Sub
End Sub

'***Action Template Gallery Type ComboBox code ***
'All conspires to ensure the user can only select a listed entry and avoids the ugly .MatchRequired system error.
Private Sub comboActionType_Enter()
  With comboActionType
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
  HandleExit comboActionType, Cancel
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionType_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  With comboActionType
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionType_Change()
Dim oBBTs As BuildingBlockTypes
Dim lngScope As Long, lngType As Long, lngCats As Long
Dim arrActionCats()
Dim colCats As New Collection

   If m_bSkipTypeChange Then Exit Sub
   With comboActionType
    If Not .MatchFound Then
      '.Tag is the stored index and the last selected item.
      .Value = .Tag
    End If
  End With
  m_bTypeChanged = True
  m_bCatChanged = False
  'Store the valid selection.
  comboActionType.Tag = comboActionType.Value
  'Clear lists. Set up a bypass for change events that occur due to clearing and rebuilding list.
  listActionTempBBs.Clear
  m_bSkipCatChange = True
  comboActionCat.Clear
  'Create the building block type object.
  Set oBBTs = m_oActionTemplate.BuildingBlockTypes
  lngScope = 0
  'List the category names.
  If comboActionType.Value = "All" Then
    For lngType = 1 To 35
      'Process all 35 galleries
      Set m_oBBT = oBBTs(lngType)
      For lngCats = 1 To m_oBBT.Categories.Count
        If m_oBBT.Categories(lngCats).BuildingBlocks.Count > 0 Then
          'Galleries can have liked named categories so ensure similiar categories are only listed once.
          On Error Resume Next
          colCats.Add m_oBBT.Categories(lngCats).Name, m_oBBT.Categories(lngCats).Name
          If Err.Number = 0 Then
            ReDim Preserve arrActionCats(lngScope)
            arrActionCats(lngScope) = m_oBBT.Categories(lngCats).Name
            lngScope = lngScope + 1
          End If
          On Error GoTo 0
        End If
      Next lngCats
    Next lngType
  Else
    Set m_oBBT = oBBTs(CLng(comboActionType.Column(1)))
    If m_oBBT.Categories.Count > 0 Then
     For lngCats = 1 To m_oBBT.Categories.Count
       If m_oBBT.Categories(lngCats).BuildingBlocks.Count > 0 Then
         ReDim Preserve arrActionCats(lngScope)
         arrActionCats(lngScope) = m_oBBT.Categories(lngCats).Name
         lngScope = lngScope + 1
       End If
     Next lngCats
    End If
  End If
On Error GoTo Err_NoBBs
  'Populate the category list
  comboActionCat.List = arrActionCats
  'Sort the list
  modAddInUtils.SortListBox comboActionCat, 1
  comboActionCat.AddItem "All", 0
  For lngCats = 0 To comboActionCat.ListCount - 1
    If comboActionCat.List(lngCats) = comboActionCat.Tag Then
      comboActionCat.ListIndex = lngCats
      Exit For
    End If
  Next lngCats
  If comboActionCat.ListIndex = -1 Then
    comboActionCat.ListIndex = 0
  End If
  comboActionCat.Tag = comboActionCat.List(comboActionCat.ListIndex)
Err_ReEntry:
  If Not m_bTmpChange Then
    m_bSkipCatChange = False
    If Not m_bCatChanged Then comboActionCat_Change
  Else
    If Not m_bCatChanged Then
      comboActionCat_Change
    End If
  End If
  m_bSkipCatChange = False
lbl_Exit:
  Exit Sub
Err_NoBBs:
  comboActionCat.AddItem "None defined"
  comboActionCat.ListIndex = 0
  comboActionCat.Tag = comboActionCat.List(comboActionCat.ListIndex)
  Resume Err_ReEntry
End Sub


'***Action Template Category ComboBox code ***
'All conspires to ensure the user can only select a listed entry and avoids the ugly .MatchRequired system error.
Private Sub comboActionCat_Enter()
  With comboActionCat
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionCat_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
  HandleExit comboActionCat, Cancel
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionCat_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  With comboActionCat
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionCat_Change()
  If m_bSkipTypeChange Or m_bSkipCatChange Then Exit Sub
  With comboActionCat
    If Not .MatchFound Then
      '.Tag is the stored index and the last selected item.
      .Value = .Tag
    Else
      .Tag = .Value
    End If
  End With
  'Clear list.
  listActionTempBBs.Clear
  'Fill the action template building blocks list.
  If Not comboActionCat.Value = "None defined" Then
    If comboActionType.Value = "All" Then
      FillActionTmpBBList 1, 35
    Else
      FillActionTmpBBList comboActionType.Column(1), comboActionType.Column(1)
    End If
  Else
    listActionTempBBs.AddItem "None defined"
  End If
  m_bCatChanged = True
lbl_Exit:
  Exit Sub
End Sub

'***Action Template Building Block list code ***
Sub FillActionTmpBBList(lngStart As Long, lngEnd As Long)
Dim lngScope As Long, lngCat As Long
Dim lngIndex As Long, lngBB As Long
Dim arrActionBBs()
  
  If comboActionType.Value = "All" And comboActionCat.Value = "All" Then
    lngScope = m_oActionTemplate.BuildingBlockEntries.Count
  End If
  For lngIndex = lngStart To lngEnd
    Set m_oBBT = m_oActionTemplate.BuildingBlockTypes(lngIndex)
    If comboActionCat.Value <> "All" Then
      On Error Resume Next
      Set m_oCat = m_oBBT.Categories(comboActionCat.Column(0))
      'All galleries will likely not have a the same category.
      If Err.Number = 0 Then
        For lngBB = 1 To m_oCat.BuildingBlocks.Count
          lngScope = lngScope + 1
        Next
      End If
      On Error GoTo 0
    Else
      If lngScope = 0 Then
        For lngCat = 1 To m_oBBT.Categories.Count
          Set m_oCat = m_oBBT.Categories(lngCat)
          For lngBB = 1 To m_oCat.BuildingBlocks.Count
            lngScope = lngScope + 1
          Next
        Next
      End If
    End If
  Next lngIndex
  ReDim arrActionBBs(0 To lngScope - 1, 1 To 7)
  lngScope = 0
  For lngIndex = lngStart To lngEnd
    Set m_oBBT = m_oActionTemplate.BuildingBlockTypes(lngIndex)
    If comboActionCat.Value = "All" Then
      For lngCat = 1 To m_oBBT.Categories.Count
        Set m_oCat = m_oBBT.Categories(lngCat)
        For lngBB = 1 To m_oCat.BuildingBlocks.Count
          arrActionBBs(lngScope, 1) = m_oCat.BuildingBlocks(lngBB).Name
          arrActionBBs(lngScope, 2) = m_oBBT.Name
          arrActionBBs(lngScope, 3) = m_oCat.Name
          arrActionBBs(lngScope, 4) = m_oCat.BuildingBlocks(lngBB).InsertOptions
          arrActionBBs(lngScope, 5) = m_oCat.BuildingBlocks(lngBB).Description
          arrActionBBs(lngScope, 6) = m_oBBT.Index
          arrActionBBs(lngScope, 7) = m_oActionTemplate.FullName
          lngScope = lngScope + 1
        Next lngBB
      Next lngCat
    Else
      On Error Resume Next
      Set m_oCat = m_oBBT.Categories(comboActionCat.Column(0))
      'All galleries will likely not have a the same category.
      If Err.Number = 0 Then
        For lngBB = 1 To m_oCat.BuildingBlocks.Count
          arrActionBBs(lngScope, 1) = m_oCat.BuildingBlocks(lngBB).Name
          arrActionBBs(lngScope, 2) = m_oBBT.Name
          arrActionBBs(lngScope, 3) = m_oCat.Name
          arrActionBBs(lngScope, 4) = m_oCat.BuildingBlocks(lngBB).InsertOptions
          arrActionBBs(lngScope, 5) = m_oCat.BuildingBlocks(lngBB).Description
          arrActionBBs(lngScope, 6) = m_oBBT.Index
          arrActionBBs(lngScope, 7) = m_oActionTemplate.FullName
          lngScope = lngScope + 1
        Next lngBB
      End If
      On Error GoTo 0
    End If
  Next lngIndex
  With listActionTempBBs
    .ColumnCount = 7
    Select Case True
      Case comboActionType.Value = "All" And comboActionCat.Value = "All"
        'Don't show behaviour columnm or type number columns.
        .ColumnWidths = "150;150;100;0;300;0;0"
      Case comboActionType.Value = "All"
        .ColumnWidths = "150;150;0;0;300;0;0"
      Case comboActionCat.Value = "All"
        .ColumnWidths = "150;0;100;0;300;0;0"
      Case Else
       .ColumnWidths = "150;0;0;0;300;0;0"
    End Select
    .List = arrActionBBs()
    modAddInUtils.SortListBox listActionTempBBs, 1
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub listActionTempBBs_Click()
  If listActionTempBBs.Selected(listActionTempBBs.ListIndex) = True Then
    listActionTempBBs.Selected(listActionTempBBs.ListIndex) = False
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub listActionTempBBs_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
Dim lngIndex As Long
Dim lngSelected As Long
  With listActionTempBBs
    For lngIndex = 0 To .ListCount - 1
      If .Selected(lngIndex) Then
        lngSelected = lngSelected + 1
        If lngSelected > 1 Then Exit For
      End If
    Next lngIndex
  End With
  Select Case lngSelected
    Case 1
      cmdEditProps.Enabled = True
      cmdDelete.Enabled = True
      cmdInsert.Enabled = True
    Case Is > 1
      cmdDelete.Enabled = True
      cmdEditProps.Enabled = False
      cmdInsert.Enabled = False
    Case Else
      cmdEditProps.Enabled = False
      cmdDelete.Enabled = False
      cmdInsert.Enabled = False
  End Select
lbl_Exit:
  Exit Sub
End Sub

'***Source Template ComboBox code ***
'All conspires to ensure the user can only select a listed entry and avoids the ugly .MatchRequired system error.
Private Sub comboSourceTmp_Enter()
  With comboSourceTmp
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboSourceTmp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
  HandleExit comboSourceTmp, Cancel
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboSourceTmp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  With comboSourceTmp
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboSourceTmp_Change()
Dim lngIndex As Long
  If m_bSkipTmpChange Then Exit Sub
  m_bTmpChange = True
  With comboSourceTmp
    If Not .MatchFound Then
      '.Tag is the stored index and the last selected item.
      .ListIndex = .Tag
    End If
  End With
  'Store the valid selection.
  comboSourceTmp.Tag = comboSourceTmp.ListIndex
  'Part of export logic.  A receiver template must be selected.
  If comboSourceTmp.ListIndex > -1 Then m_bSourcePicked = True
  If m_bSourcePicked And m_bActionPicked And m_SourceBBPicked = True Then
    cmdExport.Enabled = True
  Else
    cmdExport.Enabled = False
  End If
  'Clear lists. Set up a bypass for change events that occur due to clearing and rebuilding list.
  m_bSkipTypeChange = True
  m_bSkipCatChange = True
  listSourceTempBBs.Clear
  comboSourceCat.Clear
  comboSourceType.Clear
  'Create the Source template object.
  Set m_oSourceTemplate = Templates(comboSourceTmp.Column(1))
  'Create the type gallery list.
  m_arrGalleryNames = Split(strGalleryNames, "|")
  m_arrTypeDef = Split(strTypeDef, "|")
  With comboSourceType
    For lngIndex = 0 To UBound(m_arrGalleryNames)
      'Load only galleries containing content.
      If ValidateCategories(m_oSourceTemplate.BuildingBlockTypes(m_arrTypeDef(lngIndex))) Then
        .AddItem
        .List(.ListCount - 1, 0) = m_arrGalleryNames(lngIndex)
        .List(.ListCount - 1, 1) = m_arrTypeDef(lngIndex)
      End If
    Next lngIndex
    .AddItem "All", 0
    'Restore item last selected if available in list.
    For lngIndex = 0 To .ListCount - 1
      If .List(lngIndex) = .Tag Then
        .ListIndex = lngIndex
        Exit For
      End If
    Next
    m_bSkipTypeChange = False
    If .ListIndex = -1 Then
      .ListIndex = 0
      .Tag = "All"
    End If
  End With
  m_bTypeChanged = False
  'Trigger a typGallery and category event changes.
  m_bTmpChange = False
  If Not m_bTypeChanged Then comboSourceType_Change
End Sub

'***Source Template Gallery Type ComboBox code ***
'All conspires to ensure the user can only select a listed entry and avoids the ugly .MatchRequired system error.
Private Sub comboSourceType_Enter()
  With comboSourceType
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboSourceType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
  HandleExit comboSourceType, Cancel
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboSourceType_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  With comboSourceType
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboSourceType_Change()
Dim oBBTs As BuildingBlockTypes
Dim lngScope As Long, lngType As Long, lngCats As Long
Dim arrSourceCats()
Dim colCats As New Collection

   If m_bSkipTypeChange Then Exit Sub
   With comboSourceType
    If Not .MatchFound Then
      '.Tag is the stored index and the last selected item.
      .Value = .Tag
    End If
  End With
  m_bTypeChanged = True
  m_bCatChanged = False
  'Store the valid selection.
  comboSourceType.Tag = comboSourceType.Value
  'Clear lists. Set up a bypass for change events that occur due to clearing and rebuilding list.
  listSourceTempBBs.Clear
  m_bSkipCatChange = True
  comboSourceCat.Clear
  'Create the building block type object.
  Set oBBTs = m_oSourceTemplate.BuildingBlockTypes
  lngScope = 0
  'List the category names.
  If comboSourceType.Value = "All" Then
    For lngType = 1 To 35
      'Process all 35 galleries
      Set m_oBBT = oBBTs(lngType)
      For lngCats = 1 To m_oBBT.Categories.Count
        If m_oBBT.Categories(lngCats).BuildingBlocks.Count > 0 Then
          'Galleries can have liked named categories so ensure similiar categories are only listed once.
          On Error Resume Next
          colCats.Add m_oBBT.Categories(lngCats).Name, m_oBBT.Categories(lngCats).Name
          If Err.Number = 0 Then
            ReDim Preserve arrSourceCats(lngScope)
            arrSourceCats(lngScope) = m_oBBT.Categories(lngCats).Name
            lngScope = lngScope + 1
          End If
          On Error GoTo 0
        End If
      Next lngCats
    Next lngType
  Else
    Set m_oBBT = oBBTs(CLng(comboSourceType.Column(1)))
    If m_oBBT.Categories.Count > 0 Then
     For lngCats = 1 To m_oBBT.Categories.Count
       If m_oBBT.Categories(lngCats).BuildingBlocks.Count > 0 Then
         ReDim Preserve arrSourceCats(lngScope)
         arrSourceCats(lngScope) = m_oBBT.Categories(lngCats).Name
         lngScope = lngScope + 1
       End If
     Next lngCats
    End If
  End If
On Error GoTo Err_NoBBs
  'Populate the category list
  comboSourceCat.List = arrSourceCats
  'Sort the list
  modAddInUtils.SortListBox comboSourceCat, 1
  comboSourceCat.AddItem "All", 0
  For lngCats = 0 To comboSourceCat.ListCount - 1
    If comboSourceCat.List(lngCats) = comboSourceCat.Tag Then
      comboSourceCat.ListIndex = lngCats
      Exit For
    End If
  Next lngCats
  If comboSourceCat.ListIndex = -1 Then
    comboSourceCat.ListIndex = 0
  End If
  comboSourceCat.Tag = comboSourceCat.List(comboSourceCat.ListIndex)
Err_ReEntry:
  If Not m_bTmpChange Then
    m_bSkipCatChange = False
    If Not m_bCatChanged Then comboSourceCat_Change
  Else
    If Not m_bCatChanged Then
      comboSourceCat_Change
    End If
  End If
  m_bSkipCatChange = False
lbl_Exit:
  Exit Sub
Err_NoBBs:
  comboSourceCat.AddItem "None defined"
  comboSourceCat.ListIndex = 0
  comboSourceCat.Tag = comboSourceCat.List(comboSourceCat.ListIndex)
  Resume Err_ReEntry
End Sub

'***Action Source Template Category ComboBox code ***
'All conspires to ensure the user can only select a listed entry and avoids the ugly .MatchRequired system error.
Private Sub comboSourceCat_Enter()
  With comboSourceCat
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboSourceCat_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
  HandleExit comboSourceCat, Cancel
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboSourceCat_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  With comboSourceCat
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboSourceCat_Change()
  If m_bSkipTypeChange Or m_bSkipCatChange Then Exit Sub
  With comboSourceCat
    If Not .MatchFound Then
      '.Tag is the stored index and the last selected item.
      .Value = .Tag
    Else
      .Tag = .Value
    End If
  End With
  'Clear list.
  listSourceTempBBs.Clear
  'Fill the action template building blocks list.
  If Not comboSourceCat.Value = "None defined" Then
    If comboSourceType.Value = "All" Then
      FillSourceTmpBBList 1, 35
    Else
      FillSourceTmpBBList comboSourceType.Column(1), comboSourceType.Column(1)
    End If
  Else
    listSourceTempBBs.AddItem "None defined"
  End If
  m_bCatChanged = True

lbl_Exit:
  Exit Sub
End Sub

'***Action Template Building Block list code ***
Sub FillSourceTmpBBList(lngStart As Long, lngEnd As Long)
Dim lngScope As Long, lngCat As Long
Dim lngIndex As Long, lngBB As Long
Dim arrSourceBBs()
  
  If comboSourceType.Value = "All" And comboSourceCat.Value = "All" Then
    lngScope = m_oSourceTemplate.BuildingBlockEntries.Count
  End If
  For lngIndex = lngStart To lngEnd
    Set m_oBBT = m_oSourceTemplate.BuildingBlockTypes(lngIndex)
    If comboSourceCat.Value <> "All" Then
      On Error Resume Next
      Set m_oCat = m_oBBT.Categories(comboSourceCat.Column(0))
      'All galleries will likely not have a the same category.
      If Err.Number = 0 Then
        For lngBB = 1 To m_oCat.BuildingBlocks.Count
          lngScope = lngScope + 1
        Next
      End If
      On Error GoTo 0
    Else
      If lngScope = 0 Then
        For lngCat = 1 To m_oBBT.Categories.Count
          Set m_oCat = m_oBBT.Categories(lngCat)
          For lngBB = 1 To m_oCat.BuildingBlocks.Count
            lngScope = lngScope + 1
          Next
        Next
      End If
    End If
  Next lngIndex
  ReDim arrSourceBBs(0 To lngScope - 1, 1 To 6)
  lngScope = 0
  For lngIndex = lngStart To lngEnd
    Set m_oBBT = m_oSourceTemplate.BuildingBlockTypes(lngIndex)
    If comboSourceCat.Value = "All" Then
      For lngCat = 1 To m_oBBT.Categories.Count
        Set m_oCat = m_oBBT.Categories(lngCat)
        For lngBB = 1 To m_oCat.BuildingBlocks.Count
          arrSourceBBs(lngScope, 1) = m_oCat.BuildingBlocks(lngBB).Name
          arrSourceBBs(lngScope, 2) = m_oBBT.Name
          arrSourceBBs(lngScope, 3) = m_oCat.Name
          arrSourceBBs(lngScope, 4) = m_oCat.BuildingBlocks(lngBB).InsertOptions
          arrSourceBBs(lngScope, 5) = m_oCat.BuildingBlocks(lngBB).Description
          arrSourceBBs(lngScope, 6) = m_oBBT.Index
          lngScope = lngScope + 1
        Next lngBB
      Next lngCat
    Else
      On Error Resume Next
      Set m_oCat = m_oBBT.Categories(comboSourceCat.Column(0))
      'All galleries will likely not have a the same category.
      If Err.Number = 0 Then
        For lngBB = 1 To m_oCat.BuildingBlocks.Count
          arrSourceBBs(lngScope, 1) = m_oCat.BuildingBlocks(lngBB).Name
          arrSourceBBs(lngScope, 2) = m_oBBT.Name
          arrSourceBBs(lngScope, 3) = m_oCat.Name
          arrSourceBBs(lngScope, 4) = m_oCat.BuildingBlocks(lngBB).InsertOptions
          arrSourceBBs(lngScope, 5) = m_oCat.BuildingBlocks(lngBB).Description
          arrSourceBBs(lngScope, 6) = m_oBBT.Index
          lngScope = lngScope + 1
        Next lngBB
      End If
      On Error GoTo 0
    End If
  Next lngIndex
  With listSourceTempBBs
    .ColumnCount = 6
    Select Case True
      Case comboSourceType.Value = "All" And comboSourceCat.Value = "All"
        'Don't show behaviour columnm or type number columns.
        .ColumnWidths = "150;150;100;0;300;0"
      Case comboSourceType.Value = "All"
        .ColumnWidths = "150;150;0;0;300;0"
      Case comboSourceCat.Value = "All"
        .ColumnWidths = "150;0;100;0;300;0"
      Case Else
       .ColumnWidths = "150;0;0;0;300;0"
    End Select
    .List = arrSourceBBs()
    modAddInUtils.SortListBox listSourceTempBBs, 1
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub listSourceTempBBs_Click()
  If listSourceTempBBs.Selected(listSourceTempBBs.ListIndex) = True Then
    listSourceTempBBs.Selected(listSourceTempBBs.ListIndex) = False
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub listSourceTempBBs_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
Dim lngIndex As Long
Dim lngSelected As Long
  With listSourceTempBBs
    For lngIndex = 0 To .ListCount - 1
      If .Selected(lngIndex) Then
        lngSelected = lngSelected + 1
        If lngSelected > 1 Then Exit For
      End If
    Next lngIndex
  End With
  If lngSelected > 0 Then
    m_SourceBBPicked = True
  Else
    m_SourceBBPicked = False
  End If
  If m_bSourcePicked And m_bActionPicked And m_SourceBBPicked = True Then '***GKM
    cmdExport.Enabled = True
  Else
    cmdExport.Enabled = False
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub optSelect_Click()
Dim lngIndex As Long
  If optSelect.Caption = "Select All" Then
    For lngIndex = 0 To listActionTempBBs.ListCount - 1
      listActionTempBBs.Selected(lngIndex) = True
    Next lngIndex
    Select Case lngIndex = 1
      Case 1
        cmdDelete.ForeColor = &H80000012
        cmdEditProps.Enabled = True
        cmdDelete.Enabled = True
        cmdInsert.Enabled = True
      Case Is > 1
        cmdDelete.ForeColor = wdColorRed
        cmdDelete.Enabled = True
        cmdEditProps.Enabled = False
        cmdInsert.Enabled = False
    End Select
    optSelect.Caption = "Unselect All"
    optSelect.Value = False
  Else
    For lngIndex = 0 To listActionTempBBs.ListCount - 1
      listActionTempBBs.Selected(lngIndex) = False
    Next lngIndex
    cmdDelete.ForeColor = &H80000012
    optSelect.Caption = "Select All"
    optSelect.Value = False
    cmdEditProps.Enabled = False
    cmdDelete.Enabled = False
    cmdInsert.Enabled = False
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub optSelectAllSource_Click()
Dim lngIndex As Long
  If optSelectAllSource.Caption = "Select All" Then
    For lngIndex = 0 To listSourceTempBBs.ListCount - 1
      listSourceTempBBs.Selected(lngIndex) = True
    Next lngIndex
    If lngIndex > 0 Then
      cmdExport.Enabled = True
    Else
      cmdExport.Enabled = False
    End If
    optSelectAllSource.Caption = "Unselect All"
    optSelectAllSource.Value = False
  Else
    For lngIndex = 0 To listSourceTempBBs.ListCount - 1
      listSourceTempBBs.Selected(lngIndex) = False
    Next lngIndex
    optSelectAllSource.Caption = "Select All"
    optSelectAllSource.Value = False
    cmdExport.Enabled = False
  End If
lbl_Exit:
  Exit Sub
End Sub

'***Non-standard calls
Sub HandleExit(oComboBox As MSForms.ComboBox, Cancel As MSForms.ReturnBoolean)
  With oComboBox
    If .MatchFound = False Then
      .Value = .Tag
       Cancel = True
      .SelStart = 0
      .SelLength = Len(.Value)
    End If
  End With
End Sub

Sub LoadActionTemps()
Dim arrActionTemplates()
Dim oColTemplates As New Collection
Dim lngIndex As Long
Dim arrParts() As String, strExt As String
 
  comboActionTmp.Clear
  For lngIndex = 1 To Templates.Count
    If ActiveDocument.AttachedTemplate.FullName = Templates(lngIndex).FullName Then
      arrParts() = Split(Templates(lngIndex).FullName, ".")
      strExt = arrParts(UBound(arrParts))
      If UCase(strExt) = "DOTM" Or UCase(strExt) = "DOTX" Then
        'Load the attached template regardless.
        oColTemplates.Add Templates(lngIndex)
      End If
    Else
      If Templates(lngIndex).BuildingBlockEntries.Count > 0 Then
        oColTemplates.Add Templates(lngIndex)
      End If
    End If
  Next lngIndex
  lngIndex = oColTemplates.Count - 1
  ReDim arrActionTemplates(lngIndex, 1)
  For lngIndex = 1 To oColTemplates.Count
    arrActionTemplates(lngIndex - 1, 0) = oColTemplates(lngIndex).Name
    arrActionTemplates(lngIndex - 1, 1) = oColTemplates(lngIndex).FullName
  Next lngIndex
  comboActionTmp.List = arrActionTemplates()
  modAddInUtils.SortListBox comboActionTmp, 1
  For lngIndex = 0 To comboActionTmp.ListCount - 1
    If comboActionTmp.List(lngIndex, 1) = ActiveDocument.AttachedTemplate.FullName Then
      comboActionTmp.ListIndex = lngIndex
      comboActionTmp.Tag = comboActionTmp.ListIndex
      Exit For
    End If
  Next lngIndex
  If comboActionTmp.ListIndex = -1 Then
    comboActionTmp.ListIndex = 0
    comboActionTmp.Tag = comboActionTmp.ListIndex
  End If
lbl_Exit:
  Exit Sub
End Sub

Sub LoadSourceTmps()
Dim arrSourceTemplates()
Dim oColTemplates As New Collection
Dim lngIndex As Long
  
  comboSourceTmp.Clear
  For lngIndex = 1 To Templates.Count
    If Templates(lngIndex).FullName <> ActiveDocument.AttachedTemplate.FullName Then
      If Templates(lngIndex).BuildingBlockEntries.Count > 0 Then
        oColTemplates.Add Templates(lngIndex)
      End If
    End If
  Next lngIndex
  lngIndex = oColTemplates.Count - 1
  ReDim arrSourceTemplates(lngIndex, 1)
  For lngIndex = 1 To oColTemplates.Count
    arrSourceTemplates(lngIndex - 1, 0) = oColTemplates(lngIndex).Name
    arrSourceTemplates(lngIndex - 1, 1) = oColTemplates(lngIndex).FullName
  Next lngIndex
  On Error Resume Next
  comboSourceTmp.List = arrSourceTemplates()
  modAddInUtils.SortListBox comboSourceTmp, 1
  If comboSourceTmp.ListCount > 0 Then
    comboSourceTmp.ListIndex = 0
    comboSourceTmp.Tag = comboSourceTmp.Value
  End If
  cmdExport.Enabled = False
lbl_Exit:
  Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = 0 Then
    Cancel = True
    cmdClose_Click
  End If
lbl_Exit:
  Exit Sub
End Sub
Attribute VB_Name = "frmLoadBBs"
Attribute VB_Base = "0{40A332A9-8842-46FB-B84F-AF80F9FC7DA5}{DFCB0C71-9786-4FCF-8E7E-011B02862E22}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_bTmpChange As Boolean
Private m_bSkipTmpChange As Boolean
Private m_bSkipTypeChange As Boolean
Private m_bSkipCatChange As Boolean
Private m_bCatChanged As Boolean
Private m_bTypeChanged As Boolean
'For listing and sorting galleries in the galley comboboxes
Private m_arrGalleryNames() As String
Private m_arrTypeDef() As String
'Objects
Private m_oActionTemplate As Template
Private m_oBBT As BuildingBlockType
Private m_oCat As Category
Private m_sngCapHBorder As Single, m_sngCapWBorder As Single

Private Sub cmdCancel_Click()
  Tag = "CANCEL"
  Hide
End Sub
Private Sub cmdOK_Click()
  Tag = "Load"
  Hide
lbl_Exit:
  Exit Sub
End Sub
'***Action Template ComboBox code ***
'All conspires to ensure the user can only select a listed entry and avoids the ugly .MatchRequired system error.
Private Sub comboActionTmp_Enter()
  With comboActionTmp
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionTmp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
  HandleExit comboActionTmp, Cancel
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionTmp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  With comboActionTmp
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionTmp_Change()
Dim lngIndex As Long
  m_bTmpChange = True
  With comboActionTmp
    If Not .MatchFound Then
      '.Tag is the stored index and the last selected item.
      .ListIndex = .Tag
    End If
  End With
  'Store the valid selection.
  comboActionTmp.Tag = comboActionTmp.ListIndex
  'Clear lists. Set up a bypass for change events that occur due to clearing and rebuilding list.
  m_bSkipTypeChange = True
  m_bSkipCatChange = True
  comboActionCat.Clear
  comboActionType.Clear
  'Create the action template object.
  Set m_oActionTemplate = Templates(comboActionTmp.Column(1))
  'Create the type gallery list.
  m_arrGalleryNames = Split(strGalleryNames, "|")
  m_arrTypeDef = Split(strTypeDef, "|")
  With comboActionType
    For lngIndex = 0 To UBound(m_arrGalleryNames)
      'Load only galleries containing content.
      If ValidateCategories(m_oActionTemplate.BuildingBlockTypes(m_arrTypeDef(lngIndex))) Then
        .AddItem
        .List(.ListCount - 1, 0) = m_arrGalleryNames(lngIndex)
        .List(.ListCount - 1, 1) = m_arrTypeDef(lngIndex)
      End If
    Next lngIndex
    .AddItem "All", 0
    'Restore item last selected if available in list.
    For lngIndex = 0 To .ListCount - 1
      If .List(lngIndex) = .Tag Then
        .ListIndex = lngIndex
        Exit For
      End If
    Next
    m_bSkipTypeChange = False
    If .ListIndex = -1 Then
      .ListIndex = 0
    End If
    .Tag = .List(.ListIndex)
  End With
  m_bTypeChanged = False
  'Trigger a typGallery and category event changes.
  m_bTmpChange = False
  If Not m_bTypeChanged Then comboActionType_Change
lbl_Exit:
  Exit Sub
End Sub

'***Action Template Gallery Type ComboBox code ***
'All conspires to ensure the user can only select a listed entry and avoids the ugly .MatchRequired system error.
Private Sub comboActionType_Enter()
  With comboActionType
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
  HandleExit comboActionType, Cancel
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionType_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  With comboActionType
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionType_Change()
Dim oBBTs As BuildingBlockTypes
Dim lngScope As Long, lngType As Long, lngCats As Long
Dim arrActionCats()
Dim colCats As New Collection

   If m_bSkipTypeChange Then Exit Sub
   With comboActionType
    If Not .MatchFound Then
      '.Tag is the stored index and the last selected item.
      .Value = .Tag
    End If
  End With
  m_bTypeChanged = True
  m_bCatChanged = False
  'Store the valid selection.
  comboActionType.Tag = comboActionType.Value
  'Clear lists. Set up a bypass for change events that occur due to clearing and rebuilding list.
  m_bSkipCatChange = True
  comboActionCat.Clear
  'Create the building block type object.
  Set oBBTs = m_oActionTemplate.BuildingBlockTypes
  lngScope = 0
  'List the category names.
  If comboActionType.Value = "All" Then
    For lngType = 1 To 35
      'Process all 35 galleries
      Set m_oBBT = oBBTs(lngType)
      For lngCats = 1 To m_oBBT.Categories.Count
        If m_oBBT.Categories(lngCats).BuildingBlocks.Count > 0 Then
          'Galleries can have liked named categories so ensure similiar categories are only listed once.
          On Error Resume Next
          colCats.Add m_oBBT.Categories(lngCats).Name, m_oBBT.Categories(lngCats).Name
          If Err.Number = 0 Then
            ReDim Preserve arrActionCats(lngScope)
            arrActionCats(lngScope) = m_oBBT.Categories(lngCats).Name
            lngScope = lngScope + 1
          End If
          On Error GoTo 0
        End If
      Next lngCats
    Next lngType
  Else
    Set m_oBBT = oBBTs(CLng(comboActionType.Column(1)))
    If m_oBBT.Categories.Count > 0 Then
     For lngCats = 1 To m_oBBT.Categories.Count
       If m_oBBT.Categories(lngCats).BuildingBlocks.Count > 0 Then
         ReDim Preserve arrActionCats(lngScope)
         arrActionCats(lngScope) = m_oBBT.Categories(lngCats).Name
         lngScope = lngScope + 1
       End If
     Next lngCats
    End If
  End If
On Error GoTo Err_NoBBs
  'Populate the category list
  comboActionCat.List = arrActionCats
  'Sort the list
  modAddInUtils.SortListBox comboActionCat, 1
  comboActionCat.AddItem "All", 0
  For lngCats = 0 To comboActionCat.ListCount - 1
    If comboActionCat.List(lngCats) = comboActionCat.Tag Then
      comboActionCat.ListIndex = lngCats
      Exit For
    End If
  Next lngCats
  If comboActionCat.ListIndex = -1 Then
    comboActionCat.ListIndex = 0
  End If
  comboActionCat.Tag = comboActionCat.List(comboActionCat.ListIndex)
Err_ReEntry:
  If Not m_bTmpChange Then
    m_bSkipCatChange = False
    If Not m_bCatChanged Then comboActionCat_Change
  Else
    If Not m_bCatChanged Then
      comboActionCat_Change
    End If
  End If
  m_bSkipCatChange = False
lbl_Exit:
  Exit Sub
Err_NoBBs:
  comboActionCat.AddItem "All"
  comboActionCat.ListIndex = 0
  comboActionCat.Tag = comboActionCat.List(comboActionCat.ListIndex)
  Resume Err_ReEntry
End Sub


'***Action Template Category ComboBox code ***
'All conspires to ensure the user can only select a listed entry and avoids the ugly .MatchRequired system error.
Private Sub comboActionCat_Enter()
  With comboActionCat
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionCat_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
  HandleExit comboActionCat, Cancel
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionCat_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  With comboActionCat
    .SelStart = 0
    .SelLength = Len(.Value)
  End With
lbl_Exit:
  Exit Sub
End Sub

Private Sub comboActionCat_Change()
  If m_bSkipTypeChange Or m_bSkipCatChange Then Exit Sub
  With comboActionCat
    If Not .MatchFound Then
      '.Tag is the stored index and the last selected item.
      .Value = .Tag
    Else
      .Tag = .Value
    End If
  End With
  m_bCatChanged = True
lbl_Exit:
  Exit Sub
End Sub
Sub LoadActionTemps()
Dim arrActionTemplates()
Dim oColTemplates As New Collection
Dim lngIndex As Long
Dim arrParts() As String, strExt As String
 
  comboActionTmp.Clear
  For lngIndex = 1 To Templates.Count
    If ActiveDocument.AttachedTemplate.FullName = Templates(lngIndex).FullName Then
      arrParts() = Split(Templates(lngIndex).FullName, ".")
      strExt = arrParts(UBound(arrParts))
      If UCase(strExt) = "DOTM" Or UCase(strExt) = "DOTX" Then
        'Load the attached template regardless.
        oColTemplates.Add Templates(lngIndex)
      End If
    Else
      If Templates(lngIndex).BuildingBlockEntries.Count > 0 Then
        oColTemplates.Add Templates(lngIndex)
      End If
    End If
  Next lngIndex
  lngIndex = oColTemplates.Count - 1
  ReDim arrActionTemplates(lngIndex, 1)
  For lngIndex = 1 To oColTemplates.Count
    arrActionTemplates(lngIndex - 1, 0) = oColTemplates(lngIndex).Name
    arrActionTemplates(lngIndex - 1, 1) = oColTemplates(lngIndex).FullName
  Next lngIndex
  comboActionTmp.List = arrActionTemplates()
  modAddInUtils.SortListBox comboActionTmp, 1
  For lngIndex = 0 To comboActionTmp.ListCount - 1
    If comboActionTmp.List(lngIndex, 1) = ActiveDocument.AttachedTemplate.FullName Then
      comboActionTmp.ListIndex = lngIndex
      comboActionTmp.Tag = comboActionTmp.ListIndex
      Exit For
    End If
  Next lngIndex
  If comboActionTmp.ListIndex = -1 Then
    comboActionTmp.ListIndex = 0
    comboActionTmp.Tag = comboActionTmp.ListIndex
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub UserForm_Initialize()
 If CLng(Application.Version) > 14 Then
     m_sngCapHBorder = Height - InsideHeight
     m_sngCapWBorder = Width - InsideWidth
   Else
     m_sngCapHBorder = 0
     m_sngCapWBorder = 0
  End If
  Width = Width '- m_sngCapWBorder
  LoadActionTemps
  chkDelete = False
lbl_Exit:
  Exit Sub
End Sub
Sub HandleExit(oComboBox As MSForms.ComboBox, Cancel As MSForms.ReturnBoolean)
  With oComboBox
    If .MatchFound = False Then
      .Value = .Tag
       Cancel = True
      .SelStart = 0
      .SelLength = Len(.Value)
    End If
  End With
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = 0 Then
    Cancel = True
    cmdCancel_Click
  End If
lbl_Exit:
  Exit Sub
End Sub
Attribute VB_Name = "frmMsg"
Attribute VB_Base = "0{A568EC17-8065-4AA6-B4C7-04EE1601CE9B}{3CE496D1-6229-4EE2-A3C9-216C4635D342}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_sngCapHBorder As Single, m_sngCapWBorder As Single

Private Sub cmd_Btn_Primary_Click()
  Tag = "1"
  Hide
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmd_Btn2_Click()
  Tag = "0"
  Hide
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmd_Btn3_Click()
 Tag = "2"
  Hide
lbl_Exit:
  Exit Sub
End Sub

Private Sub UserForm_Initialize()
 If CLng(Application.Version) > 14 Then
     m_sngCapHBorder = Height - InsideHeight
     m_sngCapWBorder = Width - InsideWidth
   Else
     m_sngCapHBorder = 0
     m_sngCapWBorder = 0
  End If
  Width = Width + m_sngCapWBorder
lbl_Exit:
  Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = vbFormControlMenu Then Cancel = True
lbl_Exit:
  Exit Sub
End Sub


Attribute VB_Name = "frmNewCat"
Attribute VB_Base = "0{63D2B4B2-F512-4C8C-A0CC-A1D8541D03EC}{07DAB611-00FC-4EA5-8E79-0494A58F57E8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_sngCapHBorder As Single, m_sngCapWBorder As Single

Private Sub cmd_CR_Click()
  Tag = txtName
  Hide
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmdCancel_Click()
  Tag = vbNullString
  Hide
lbl_Exit:
  Exit Sub
End Sub

Private Sub txtName_Change()
  If Len(txtName.Text) = 0 Then
    cmd_CR.Enabled = False
  Else
    cmd_CR.Enabled = True
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub UserForm_Initialize()
 If CLng(Application.Version) > 14 Then
     m_sngCapHBorder = Height - InsideHeight
     m_sngCapWBorder = Width - InsideWidth
   Else
     m_sngCapHBorder = 0
     m_sngCapWBorder = 0
  End If
  Width = Width + m_sngCapWBorder
  txtName_Change
lbl_Exit:
  Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = 0 Then
    Cancel = True
    cmdCancel_Click
  End If
lbl_Exit:
  Exit Sub
End Sub


Attribute VB_Name = "frmProgressBar"
Attribute VB_Base = "0{669A8332-51FC-417D-8BE7-6F934BC82AC3}{E251C8DC-C9C6-44BA-A52E-6639450F4ECD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Attribute VB_Name = "frmQuickList"
Attribute VB_Base = "0{FBE57012-ACB6-46B6-9A5E-70CFFA9FE580}{B910617A-C5A0-4F48-851D-52E4785276AB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim m_bArray()
Dim m_oRng As Word.range
Dim m_oTmp As Template
Private m_sngCapHBorder As Single, m_sngCapWBorder As Single

Private Sub cbBuildingBlocks_Change()
  BuildList cbBuildingBlocks.Value
lbl_Exit:
  Exit Sub
End Sub

Private Sub cbBuildingBlocks_Click()
  If cbBuildingBlocks.List(0) = "No matching building block entries" Then Exit Sub
  Set m_oTmp = Templates(m_bArray(cbBuildingBlocks.ListIndex, 2))
  m_oTmp.BuildingBlockEntries(m_bArray(cbBuildingBlocks.ListIndex, 4)).Insert m_oRng, True
  Hide
lbl_Exit:
  Exit Sub
End Sub
'Private Sub lbBuildingBlocks_Click()
'If Me.lbBuildingBlocks.List(0) = "No matching building block entries" Then Exit Sub
'Set m_oTmp = Templates(m_bArray(Me.lbBuildingBlocks.ListIndex, 2))
'm_oTmp.BuildingBlockEntries(m_bArray(Me.lbBuildingBlocks.ListIndex, 4)).Insert m_oRng
'Me.Hide
'End Sub
'Private Sub TextBox1_Change()
'BuildList Me.TextBox1.Text
'End Sub
Private Sub UserForm_Activate()
Dim lngLeft As Long, lngTop As Long, lngWidth As Long, lngHeight As Long
  ActiveWindow.GetPoint lngLeft, lngTop, lngWidth, lngHeight, Selection.range
  If lngTop < 680 Then
    Top = lngTop / 1.33 + lngHeight + 5
  Else
    Top = lngTop / 1.33 - 100
  End If
  Left = lngLeft / 1.33 - 75
  Application.ScreenUpdating = True
  Application.ScreenRefresh
lbl_Exit:
  Exit Sub
End Sub
Private Sub UserForm_Initialize()
 If CLng(Application.Version) > 14 Then
     m_sngCapHBorder = Height - InsideHeight
     m_sngCapWBorder = Width - InsideWidth
   Else
     m_sngCapHBorder = 0
     m_sngCapWBorder = 0
  End If
  Width = Width + m_sngCapWBorder
'With lbBuildingBlocks
'  .ColumnCount = 4
'  .ColumnWidths = "50;0;0;0"
'  .Visible = False
'End With
'TextBox1.Visible = False
  Application.ScreenUpdating = False
  With cbBuildingBlocks
    .ColumnCount = 4
    .ColumnWidths = "50;0;0;0"
  End With
  cbBuildingBlocks.SetFocus
  Set m_oRng = Selection.range
  'TextBox1.Text = m_oRng.Text
  BuildList m_oRng.Text
lbl_Exit:
  Exit Sub
End Sub
Sub BuildList(ByRef pStr As String)
Dim lngCount As Long
Dim lngIndex As Long
Dim lngScope As Long
lngCount = 0

  For Each m_oTmp In Templates
    For lngIndex = 1 To m_oTmp.BuildingBlockEntries.Count
      If Left(m_oTmp.BuildingBlockEntries(lngIndex).Name, Len(pStr)) = pStr Then
        lngCount = lngCount + 1
      End If
    Next
  Next
  lbBuildingBlocks.Clear
  If lngCount > 0 Then
    ReDim m_bArray(0 To lngCount - 1, 1 To 4)
  Else
    ReDim m_bArray(0)
    m_bArray(0) = "No matching building block entries"
    'lbBuildingBlocks.List = m_bArray()
    cbBuildingBlocks.List = m_bArray()
    Exit Sub
  End If
  lngScope = 0
  For Each m_oTmp In Templates
    For lngIndex = 1 To m_oTmp.BuildingBlockEntries.Count
      If Left(m_oTmp.BuildingBlockEntries(lngIndex).Name, Len(pStr)) = pStr Then
        m_bArray(lngScope, 1) = m_oTmp.BuildingBlockEntries(lngIndex).Name
        m_bArray(lngScope, 2) = m_oTmp.FullName
        m_bArray(lngScope, 3) = m_oTmp.BuildingBlockEntries(lngIndex).Value
        m_bArray(lngScope, 4) = m_oTmp.BuildingBlockEntries(lngIndex).Index
        lngScope = lngScope + 1
      End If
    Next
  Next
  'lbBuildingBlocks.List = m_bArray()
  BubbleSort m_bArray
  cbBuildingBlocks.List = m_bArray()
lbl_Exit:
  Exit Sub
End Sub
Sub BubbleSort(ToSort As Variant, Optional SortAscending As Boolean = True)
Dim AnyChanges As Boolean
Dim X As Long
Dim SwapFH As Variant
  Do
    AnyChanges = False
    For X = LBound(ToSort) To UBound(ToSort) - 1
      If (ToSort(X, 1) > ToSort(X + 1, 1) And SortAscending) _
        Or (ToSort(X, 1) < ToSort(X + 1, 1) And Not SortAscending) Then
        'These two need to be swapped
        SwapFH = ToSort(X, 1)
        ToSort(X, 1) = ToSort(X + 1, 1)
        ToSort(X + 1, 1) = SwapFH
        AnyChanges = True
      End If
    Next X
  Loop Until Not AnyChanges
lbl_Exit:
  Exit Sub
End Sub

Attribute VB_Name = "frmVarOrg"
Attribute VB_Base = "0{2F2F14AE-7947-496C-AA43-D68F63A94233}{86CD8D2C-CFBD-40DF-BB39-F8249FC05CBC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_oVar As Word.Variable
Private m_oVars As Word.Variables
Private m_lngIndex As Long
Private m_strVarName As String
Private m_bShowVal As Boolean
Private m_sngCapHBorder As Single, m_sngCapWBorder As Single

Private Sub cmdClose_Click()
  Hide
lbl_Exit:
  Exit Sub
End Sub
Private Sub cmdCreateVar_Click()
Dim oRng As Word.range

  Set m_oVars = ActiveDocument.Variables
  Set oRng = Selection.range
  m_strVarName = txtVarName
  If Len(oRng.Text) > 0 Then
    On Error GoTo Err_Handler
    m_oVars.Add Name:=m_strVarName, Value:=Selection.range
Err_ReEntry:
    PopulateListBox
    txtVarName.Value = ""
  Else
    modAddInUtils.ShowMessage 2, , "Nothing selected. You must first select text in the document to store in the variable." & vbCr + vbCr _
                        & "Select text and try again.", , , 100
  End If
  Exit Sub
Err_Handler:
  If Err.Number = 5903 Then
    modAddInUtils.ShowMessage 2, 4, "Duplicate variable name. A variable named " & m_strVarName & " already exists.  Do " _
       & "you want to redefine it with the selected text?", , , 120
    If frmMsg.Tag = 1 Then
      m_oVars(m_strVarName).Value = Selection.range
      Resume Err_ReEntry
    Else
      txtVarName.Value = ""
      Err.Clear
    End If
    Unload frmMsg
  Else
    modAddInUtils.ShowMessage 1, , "Err.Number" & " " & Err.Description
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmdDelete_Click()
  With lbVariables
    For m_lngIndex = 0 To .ListCount - 1
      If .Selected(m_lngIndex) Then
        ActiveDocument.Variables(.List(m_lngIndex)).Delete
      End If
    Next m_lngIndex
  End With
  PopulateListBox
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmdDeleteAll_Click()
  Set m_oVars = ActiveDocument.Variables
  For m_lngIndex = m_oVars.Count To 1 Step -1
    m_oVars(m_lngIndex).Delete
  Next m_lngIndex
  PopulateListBox
  cmdInsertSel.Enabled = False
  cmdDelete.Enabled = False
lbl_Exit:
  Exit Sub
End Sub

Private Sub cmdInsertSel_Click()
Dim oFld As Field
  With lbVariables
    For m_lngIndex = 0 To .ListCount - 1
      If .Selected(m_lngIndex) Then
        m_strVarName = lbVariables.List(m_lngIndex)
        Exit For
      End If
    Next m_lngIndex
  End With
  Set oFld = ActiveDocument.Fields.Add(Selection.range, wdFieldDocVariable, Chr(34) & m_strVarName & Chr(34), False)
  oFld.ShowCodes = False
  PopulateListBox
lbl_Exit:
  Exit Sub
End Sub

Private Sub lbVariables_Change()
Dim cnt As Long
m_bShowVal = False
cnt = 0
  With lbVariables
    For m_lngIndex = 0 To .ListCount - 1
      If .Selected(m_lngIndex) Then
        cnt = cnt + 1
      End If
    Next m_lngIndex
  End With
  If cnt = 1 Then
    cmdInsertSel.Enabled = True
    cmdDelete.Enabled = True
    m_bShowVal = True
  ElseIf cnt = 0 Then
    cmdInsertSel.Enabled = False
    cmdDelete.Enabled = False
    TextBox1.Value = "Select a single variable to display value"
  Else
    cmdInsertSel.Enabled = False
    cmdDelete.Enabled = True
  End If
  If m_bShowVal Then
    With lbVariables
      For m_lngIndex = 0 To .ListCount - 1
        If .Selected(m_lngIndex) Then Exit For
      Next m_lngIndex
    End With
    If cmdDeleteAll.Enabled Then
      TextBox1.Value = ActiveDocument.Variables(lbVariables.List(m_lngIndex)).Value
    End If
  Else
    TextBox1.Value = "Select a single variable to display value"
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub txtVarName_Change()
  If Len(txtVarName.Text) > 0 Then
    cmdCreateVar.Enabled = True
  Else
    cmdCreateVar.Enabled = False
  End If
End Sub

Private Sub UserForm_Initialize()
  If CLng(Application.Version) > 14 Then
     m_sngCapHBorder = Height - InsideHeight
     m_sngCapWBorder = Width - InsideWidth
   Else
     m_sngCapHBorder = 0
     m_sngCapWBorder = 0
  End If
  Width = Width + m_sngCapWBorder
  cmdInsertSel.Enabled = False
  cmdDelete.Enabled = False
  cmdCreateVar.Enabled = False
  PopulateListBox
lbl_Exit:
  Exit Sub
End Sub

Sub PopulateListBox()
  lbVariables.Enabled = True
  lbVariables.Clear
  For m_lngIndex = 1 To ActiveDocument.Variables.Count
    lbVariables.AddItem ActiveDocument.Variables(m_lngIndex).Name
  Next
  If lbVariables.ListCount > 0 Then
    TextBox1.Value = "Select a single variable to display value"
    cmdDeleteAll.Enabled = True
  Else
    TextBox1.Value = ""
    cmdDeleteAll.Enabled = False
    lbVariables.AddItem "No variables in this document"
    lbVariables.Enabled = False
  End If
lbl_Exit:
  Exit Sub
End Sub
Attribute VB_Name = "modAddInUtils"
Option Explicit
'***Required for "RemoveCloseButton" Procedure***
Private Const mcGWL_STYLE = (-16)
Private Const mcWS_SYSMENU = &H80000
#If VBA7 Then
  Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
#Else
  Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
#End If

#If VBA7 Then
  Private Declare PtrSafe Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As LongPtr, ByVal nIndex As LongPtr) As Long
#Else
  Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
#End If

#If VBA7 Then
  Private Declare PtrSafe Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As LongPtr, ByVal nIndex As LongPtr, ByVal dwNewLong As LongPtr) As Long
#Else
  Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
#End If

'***Required for "NewShell" Procedure***
#If VBA7 Then
Public Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, _
               ByVal lpOperation As String, ByVal lpFile As String, _
               ByVal lpParameters As String, ByVal lpDirectory As String, _
               ByVal nShowCmd As Long) As Long
#Else
Public Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, _
               ByVal lpOperation As String, ByVal lpFile As String, _
               ByVal lpParameters As String, ByVal lpDirectory As String, _
               ByVal nShowCmd As Long) As Long
#End If
Private m_strWebAddress As String
'***Required for "QuickSort" Procedure***
Private Const cNoValue = -999

Function ShowMessage(ByRef lngNotification As Long, Optional lngButtons As Long = 1, Optional strText As String, _
           Optional strValue As String, Optional dblVarWidth As Long = 0, Optional dblHeight As Double = 140)
Dim strCaption As String
Dim strMessage As String
Dim lngFontSize As Long
Dim strBtn1 As String, strBtn2 As String, strBtn1Acc As String, strBtn2Acc As String, strBtn3 As String, strBtn3Acc As String
Dim dblWidth As Double
Dim strColor As String
Dim strAlign As String
Dim dblCapBorder As Long
  strCaption = AppID & " - User Information"
  Select Case lngButtons
    Case 1
      strBtn1 = "OK"
      strBtn1Acc = "O"
    Case 2
      strBtn1 = "OK"
      strBtn1Acc = "O"
      strBtn2 = "CANCEL"
      strBtn2Acc = "C"
    Case 3
      strBtn1 = "Yes"
      strBtn1Acc = "Y"
      strBtn2 = "No"
      strBtn2Acc = "N"
      strBtn3 = "CANCEL"
      strBtn3Acc = "C"
    Case 4
      strBtn1 = "YES"
      strBtn1Acc = "Y"
      strBtn2 = "NO"
      strBtn2Acc = "N"
  End Select
  
  dblWidth = 318.6 - 4 'As defined in Word 2010 - the border width
  strColor = &HFF0000
  strAlign = "Center"
  lngFontSize = 10

  Select Case lngNotification
    Case 1
      strMessage = strText
      strAlign = "Left"
      strColor = wdColorRed
    Case 2
      strMessage = strText
      strAlign = "Left"
    Case 3
      strMessage = "Fill in variables is disabled when the Add-In template file is opened as the active document for editing." & vbCr + vbCr _
                 & "This is intentionally.  Otherwise you might inadvertenly populate content controls intended as variable placeholders " _
                 & "in the table building block definitions with data."
      dblHeight = 150
      strAlign = "Left"
    Case 4
      strMessage = strText
      strAlign = "Left"
  End Select
  
  With frmMsg
    dblCapBorder = .Height - .InsideHeight
    .Height = dblHeight + dblCapBorder
    If Not dblVarWidth = 0 Then
      dblCapBorder = .Width - .InsideWidth
      .Width = dblVarWidth + dblCapBorder
    Else
      dblCapBorder = .Width - .InsideWidth
      .Width = dblWidth + dblCapBorder
    End If
    .LBL_Err1.Left = 12
    .LBL_Err1.Width = .InsideWidth - 22
    .Caption = strCaption
    .cmd_Btn_Primary.Caption = strBtn1
    .cmd_Btn_Primary.Accelerator = strBtn1Acc
    .cmd_Btn2.Caption = strBtn2
    .cmd_Btn2.Accelerator = strBtn2Acc
    .cmd_Btn3.Caption = strBtn3
    .cmd_Btn3.Accelerator = strBtn3Acc
    .cmd_Btn_Primary.SetFocus
    If Val(Application.Version) > 14 Then
      .LBL_Err1.Height = .Height - 72
      .cmd_Btn_Primary.Top = .Height - 60
      .cmd_Btn2.Top = .Height - 60
      .cmd_Btn3.Top = .Height - 60
    Else
      .LBL_Err1.Height = .Height - 78
      .cmd_Btn_Primary.Top = .Height - 54
      .cmd_Btn2.Top = .Height - 54
      .cmd_Btn3.Top = .Height - 54
    End If
    Select Case lngButtons
      Case 1
        .cmd_Btn_Primary.Left = .LBL_Err1.Left
        .cmd_Btn_Primary.Width = .LBL_Err1.Width
        .cmd_Btn2.Visible = False
        .cmd_Btn3.Visible = False
      Case 2
        .cmd_Btn3.Visible = False
        If Not UCase(strBtn2) = "CANCEL" Then
          .cmd_Btn2.Left = .LBL_Err1.Left
          .cmd_Btn2.Width = (.LBL_Err1.Width \ 2) - 8
          .cmd_Btn2.Visible = True
          .cmd_Btn_Primary.Left = .cmd_Btn2.Left + .cmd_Btn2.Width + 16
          .cmd_Btn_Primary.Width = .cmd_Btn2.Width
        Else
          .cmd_Btn2.Left = .LBL_Err1.Left
          .cmd_Btn2.Width = (.LBL_Err1.Width \ 3)
          .cmd_Btn2.Visible = True
          .cmd_Btn_Primary.Left = .cmd_Btn2.Left + .cmd_Btn2.Width + 8
          .cmd_Btn_Primary.Width = .LBL_Err1.Width - .cmd_Btn_Primary.Left
        End If
      Case 3
        .cmd_Btn3.Left = .LBL_Err1.Left
        .cmd_Btn3.Width = (.LBL_Err1.Width \ 3) - 8
        .cmd_Btn3.Visible = True
        .cmd_Btn2.Width = .cmd_Btn3.Width
        .cmd_Btn2.Visible = True
        .cmd_Btn2.Left = .cmd_Btn3.Left + .cmd_Btn3.Width + 12
        .cmd_Btn_Primary.Width = .cmd_Btn3.Width
        .cmd_Btn_Primary.Left = .cmd_Btn2.Left + .cmd_Btn2.Width + 12
      Case 4
        .cmd_Btn3.Visible = False
        .cmd_Btn2.Left = .LBL_Err1.Left
        .cmd_Btn2.Width = (.LBL_Err1.Width \ 2) - 8
        .cmd_Btn2.Visible = True
        .cmd_Btn_Primary.Left = .cmd_Btn2.Left + .cmd_Btn2.Width + 16
        .cmd_Btn_Primary.Width = .cmd_Btn2.Width
    End Select
    With .LBL_Err1
      .Caption = strMessage
      .Font.Name = "Tahoma"
      .Font.Size = lngFontSize
      .Font.bold = False
      .ForeColor = strColor
      Select Case LCase(strAlign)
        Case Is = "left"
          .TextAlign = fmTextAlignLeft
        Case Is = "right"
          .TextAlign = fmTextAlignRight
        Case Else
          .TextAlign = fmTextAlignCenter
      End Select
    End With
    Beep
    RemoveCloseButton frmMsg
    .Show
  End With
lbl_Exit:
  Exit Function
End Function

Sub TestNotificationMsg()
  modAddInUtils.ShowMessage 2, , "The gallery template menu is full and can not dispaly additional templates", , , 90
  Unload frmMsg
End Sub

Function AppVer() As String
  AppVer = ThisDocument.Name
  If InStr(AppVer, "Ver.") > 0 Then
    AppVer = Right(AppVer, Len(AppVer) - InStr(AppVer, "Ver. ") - 3)
    AppVer = Left(AppVer, Len(AppVer) - 5)
    AppVer = Trim(AppVer)
  Else
    AppVer = ThisDocument.Name
    AppVer = Right(AppVer, Len(AppVer) - InStr(AppVer, "Ver ") - 3)
    AppVer = Left(AppVer, Len(AppVer) - 5)
  End If
lbl_Exit:
  Exit Function
End Function
Function strDisclaimerGKM() As String
  strDisclaimerGKM = "The processes and features in the " & AppID & " Version " & AppVer & " were developed and provided by Greg Maxey as a courtesy to the Microsoft Word user community." & vbCr & vbCr & _
          "While exhaustive testing has been performed to ensure that each process is performed reliably and without risk to the document structure or data, the developer makes no representations or warranties of any kind, express or implied, about the completeness, accuracy, reliability, suitability or availability with respect to the add-in or any of the processes that it is intended to perform. Any reliance you place on the add-in or individual processes is therefore strictly at your own risk." & vbCr & vbCr & _
          "In no event will the developer be liable for any loss or damage including without limitation, indirect or consequential loss or damage, or any loss or damage whatsoever arising from loss of data or profits arising out of, or in connection with, the use of this add-in." & vbCr & vbCr & _
          "Through the Resting Anhcor Logo link you are directed to support and help information from which you are able to link to other websites which are not under the developers' control. The developer has no control over the nature, content and availability of those sites. The inclusion of any links does not necessarily imply a recommendation or endorsement of the views expressed within them." & vbCr & vbCr & _
          "The developer is committed to reasonable effort to address user comments, suggestions for improvement and technical assistance associated with the add-in.  However, the developer is not bound in any way to address those comments, suggestions for improvement, or provide technical assistance."
lbl_Exit:
  Exit Function
End Function
Function strDisclaimerGSM() As String
  strDisclaimerGSM = "The processes and features in the " & AppID & " Version " & AppVer & " were developed and provided by Graham Mayor as a courtesy to the Microsoft Word user community." & vbCr & vbCr & _
          "While exhaustive testing has been performed to ensure that each process is performed reliably and without risk to the document structure or data, the developer makes no representations or warranties of any kind, express or implied, about the completeness, accuracy, reliability, suitability or availability with respect to the add-in or any of the processes that it is intended to perform. Any reliance you place on the add-in or individual processes is therefore strictly at your own risk." & vbCr & vbCr & _
          "In no event will the developer be liable for any loss or damage including without limitation, indirect or consequential loss or damage, or any loss or damage whatsoever arising from loss of data or profits arising out of, or in connection with, the use of this add-in." & vbCr & vbCr & _
          "Through the GM Logo link you are directed to support and help information from which you are able to link to other websites which are not under the developers' control. The developer has no control over the nature, content and availability of those sites. The inclusion of any links does not necessarily imply a recommendation or endorsement of the views expressed within them." & vbCr & vbCr & _
          "The developer is committed to reasonable effort to address user comments, suggestions for improvement and technical assistance associated with the add-in.  However, the developer is not bound in any way to address those comments, suggestions for improvement, or provide technical assistance."
lbl_Exit:
  Exit Function
End Function

Function strDisclaimerJointProject() As String
  strDisclaimerJointProject = "The processes and features in the " & AppID & " Version " & AppVer & " were developed and provided by Greg Maxey and Graham Mayor as a courtesy to the Microsoft Word user community." & vbCr & vbCr & _
          "While exhaustive testing has been performed to ensure that each process is performed reliably and without risk to the document structure or data, the developers make no representations or warranties of any kind, express or implied, about the completeness, accuracy, reliability, suitability or availability with respect to the add-in or any of the processes that it is intended to perform. Any reliance you place on the add-in or individual processes is therefore strictly at your own risk." & vbCr & vbCr & _
          "In no event will the developers be liable for any loss or damage including without limitation, indirect or consequential loss or damage, or any loss or damage whatsoever arising from loss of data or profits arising out of, or in connection with, the use of this add-in." & vbCr & vbCr & _
          "Through the Developer's Logo link you are directed to support and help information from which you are able to link to other websites which are not under the developers' control. The developers have no control over the nature, content and availability of those sites. The inclusion of any links does not necessarily imply a recommendation or endorsement of the views expressed within them." & vbCr & vbCr & _
          "The developers are committed to reasonable effort to address user comments, suggestions for improvement and technical assistance associated with the add-in.  However, the developers are not bound in any way to address those comments, suggestions for improvement, or provide technical assistance."
lbl_Exit:
  Exit Function
End Function

Function AppID() As String
  AppID = "Building Block Galleries Add-In"
lbl_Exit:
  Exit Function
End Function

Public Sub NewShell(cmdLine As String, lngWindowHndl As Long)
  ShellExecute lngWindowHndl, "open", cmdLine, "", "", 1
lbl_Exit:
  Exit Sub
End Sub

Public Sub WebPageInfo()
  '***GKM update path if I decide to publish.
  m_strWebAddress = "http://gregmaxey.mvps.org/word_tip_pages/process_batch_folder_addin.html"
  Call NewShell(m_strWebAddress, 3)
lbl_Exit:
  Exit Sub
End Sub

'This module displays and processes user donation actions.  the id's are from Google AdSense.
Public Sub ShowDonate()
  frmDonate.Show
lbl_Exit:
  Exit Sub
End Sub
Public Sub DonateGB()
  m_strWebAddress = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=HMGYMYSGL4WD4"   'Maxey
  'm_strWebAddress = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=C22QAMXJVVZQ4"   'Mayor
  Call NewShell(m_strWebAddress, 3)
lbl_Exit:
  Exit Sub
End Sub
Public Sub DonateEU()
 m_strWebAddress = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=776KL2DPCD4JN" 'Maxey
 'm_strWebAddress = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=72JWWJEZX6KXS" 'Mayor
 Call NewShell(m_strWebAddress, 3)
lbl_Exit:
  Exit Sub
End Sub
Public Sub DonateUS()
  m_strWebAddress = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=Z9Y7VQAJ7WNC8"   'Maxey
  'm_strWebAddress = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=HUS7FWLVVNTH4" 'Mayor
  Call NewShell(m_strWebAddress, 3)
lbl_Exit:
  Exit Sub
End Sub

Public Sub RemoveCloseButton(frm As Object)
Dim lngStyle As Long
Dim lngHWnd As Long

  lngHWnd = FindWindow(vbNullString, frm.Caption)
  lngStyle = GetWindowLong(lngHWnd, mcGWL_STYLE)
  If lngStyle And mcWS_SYSMENU > 0 Then
  SetWindowLong lngHWnd, mcGWL_STYLE, (lngStyle And Not mcWS_SYSMENU)
  End If
lbl_Exit:
  Exit Sub
End Sub

Public Sub QuickSort(ByRef arrSort As Variant, Optional lngLB As Long = cNoValue, Optional lngUB As Long = cNoValue)
Dim lngVarA As Long
Dim lngVarB As Long
Dim vTest As Variant
Dim lngMid As Long

  If lngLB = cNoValue Then lngLB = LBound(arrSort)
  If lngUB = cNoValue Then lngUB = UBound(arrSort)
  If lngLB < lngUB Then
    lngMid = (lngLB + lngUB) \ 2
    vTest = UCase(arrSort(lngMid)) '***GKM - Remove UCase to sort CAPS first
    lngVarA = lngLB
    lngVarB = lngUB
    Do
      Do While UCase(arrSort(lngVarA)) < vTest '***GKM - Remove UCase to sort CAPS first
        lngVarA = lngVarA + 1
      Loop
      Do While UCase(arrSort(lngVarB)) > vTest '***GKM - Remove UCase to sort CAPS first
        lngVarB = lngVarB - 1
      Loop
      If lngVarA <= lngVarB Then
        Swap arrSort, lngVarA, lngVarB
        lngVarA = lngVarA + 1
        lngVarB = lngVarB - 1
      End If
    Loop Until lngVarA > lngVarB
    If lngVarB <= lngMid Then
      Call QuickSort(arrSort, lngLB, lngVarB)
      Call QuickSort(arrSort, lngVarA, lngUB)
    Else
      Call QuickSort(arrSort, lngVarA, lngUB)
      Call QuickSort(arrSort, lngLB, lngVarB)
    End If
  End If
lbl_Exit:
  Exit Sub
End Sub

Private Sub Swap(vItems As Variant, iItem1 As Long, iItem2 As Long)
Dim vTemp As Variant
  vTemp = vItems(iItem2)
  vItems(iItem2) = vItems(iItem1)
  vItems(iItem1) = vTemp
lbl_Exit:
  Exit Sub
End Sub

Public Function SortListBox(oListOrComboBox As Object, lngCol As Long, Optional bAlphabet As Boolean = True, Optional bAscending As Boolean = True)
Dim varItems
Dim lngItem As Long, lngItemNext As Long
Dim lngColCount As Long
Dim varTemp

  'Reindex lngCol.  List columns are indexed starting with 0
  lngCol = lngCol - 1
  'Put the items in a variant variable.
  varItems = oListOrComboBox.List
  If bAlphabet Then
    'Sort alphabetically.
    For lngItem = LBound(varItems, 1) To UBound(varItems, 1) - 1
      For lngItemNext = lngItem + 1 To UBound(varItems, 1)
        'Sort Ascending (1)
        If bAscending Then
          If varItems(lngItem, lngCol) > varItems(lngItemNext, lngCol) Then
            For lngColCount = 0 To oListOrComboBox.ColumnCount - 1
              varTemp = varItems(lngItem, lngColCount)
              varItems(lngItem, lngColCount) = varItems(lngItemNext, lngColCount)
              varItems(lngItemNext, lngColCount) = varTemp
            Next lngColCount
          End If
        'Sort Descending (2)
        Else
           If varItems(lngItem, lngCol) < varItems(lngItemNext, lngCol) Then
             For lngColCount = 0 To oListOrComboBox.ColumnCount - 1        'Allows sorting of multi-column ListBoxes
               varTemp = varItems(lngItem, lngColCount)
               varItems(lngItem, lngColCount) = varItems(lngItemNext, lngColCount)
               varItems(lngItemNext, lngColCount) = varTemp
             Next lngColCount
          End If
        End If
      Next lngItemNext
    Next lngItem
  Else
    'Sort the Array Numerically(2)
    '(Substitute CInt with another conversion type (CLng, CDec, etc.) depending on type of numbers in the column)
    For lngItem = LBound(varItems, 1) To UBound(varItems, 1) - 1
      For lngItemNext = lngItem + 1 To UBound(varItems, 1)
        'Sort Ascending (1)
        If bAscending Then
          If CInt(varItems(lngItem, lngCol)) > CInt(varItems(lngItemNext, lngCol)) Then
            For lngColCount = 0 To oListOrComboBox.ColumnCount - 1        'Allows sorting of multi-column ListBoxes
              varTemp = varItems(lngItem, lngColCount)
              varItems(lngItem, lngColCount) = varItems(lngItemNext, lngColCount)
              varItems(lngItemNext, lngColCount) = varTemp
            Next lngColCount
          End If
        'Sort Descending
        Else
          If CInt(varItems(lngItem, lngCol)) < CInt(varItems(lngItemNext, lngCol)) Then
            For lngColCount = 0 To oListOrComboBox.ColumnCount - 1        'Allows sorting of multi-column ListBoxes
              varTemp = varItems(lngItem, lngColCount)
              varItems(lngItem, lngColCount) = varItems(lngItemNext, lngColCount)
              varItems(lngItemNext, lngColCount) = varTemp
            Next lngColCount
          End If
        End If
      Next lngItemNext
    Next lngItem
  End If
  'Set the list to the array
  oListOrComboBox.List = varItems
lbl_Exit:
  Exit Function
End Function

Sub Utility_DeleteVars()
Dim oVar As Variable
  For Each oVar In ThisDocument.Variables
    oVar.Delete
  Next oVar
lbl_Exit:
  Exit Sub
End Sub
Attribute VB_Name = "modBBGalleriesRibCon"
Option Explicit
Public p_ThisApp As clsThisApp
Public p_oRibbon As IRibbonUI
Public pub_LastDocumentClosing As Boolean

Private m_oTmp As Template
Private m_arrBBs() As String
Private m_lngIndex As Long

#If VBA7 Then
  Public Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef destination As Any, ByRef source As Any, ByVal length As Long)
#Else
  Public Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef destination As Any, ByRef source As Any, ByVal length As Long)
#End If
Private Type typGalleryDef
  strType As String
  lngType As Long
  strGalleryMso As String
  strImageMso As String
  strSuperTip As String
End Type
Private bState As Boolean

Sub Onload(ribbon As IRibbonUI)
  pub_LastDocumentClosing = False
  InitiateAppClass
  Set p_oRibbon = ribbon
  'Store pointer to IRibbonUI
  ThisDocument.Variables("RibbonPointer").Value = ObjPtr(ribbon)
  modMain.ValidateConfigurationVariables
  If ThisDocument.Variables("FirstUse").Value = "True" Then
    modMain.ConfigureUI
  End If
  bState = ThisDocument.Variables("ShowTab").Value
lbl_Exit:
  Exit Sub
End Sub

#If VBA7 Then
  Function GetRibbon(ByVal lRibbonPointer As LongPtr) As Object
#Else
  Function GetRibbon(ByVal lRibbonPointer As Long) As Object
#End If
Dim objRibbon As Object
  CopyMemory objRibbon, lRibbonPointer, LenB(lRibbonPointer)
  Set GetRibbon = objRibbon
  Set objRibbon = Nothing
lbl_Exit:
  Exit Function
End Function

Public Sub InitiateAppClass()
  'Initialize the Application Event handler.
  Set p_ThisApp = Nothing
  Set p_ThisApp = New clsThisApp
lbl_Exit:
  Exit Sub
End Sub

Sub GetContent(control As IRibbonControl, ByRef content)
'Declare variables
Dim lngType As Long
Dim typGal As typGalleryDef
Dim strType As String

Dim arrTypeTemplate() As String
Dim strTmpPath As String, strTmpPsuedoPath As String

  Select Case Left(control.Id, 3)
    Case "DM_"
      typGal = fcnGalleryDef(Mid(control.Id, 4, Len(control.Id) - 3))
      'Pass required parameters to content function.
      content = modRibbonFunctions.fcnGenerateDM_Content(control.Id, , , typGal.lngType, typGal.strType, typGal.strGalleryMso, typGal.strImageMso, , True)
    Case Else
      Select Case Left(control.Id, 6)
        Case "wdType"
          'A main Gallery dynamic menu Template\Gallery Type dynamic menu control seeking content.
          'Get the template\type parts from the control tag.
          arrTypeTemplate = Split(control.Tag, "~|~")
          strType = arrTypeTemplate(0)
          If UBound(arrTypeTemplate) = 1 Then
            strTmpPsuedoPath = arrTypeTemplate(1)
          Else
            For m_lngIndex = 1 To UBound(arrTypeTemplate)
              strTmpPsuedoPath = strTmpPsuedoPath & "~|~" & arrTypeTemplate(m_lngIndex)
            Next m_lngIndex
            strTmpPsuedoPath = Mid(strTmpPsuedoPath, 4, Len(strTmpPsuedoPath) - 3)
          End If
          'The ampersand is an invalid character in the XML string. 'I used the rather unique combination "~|~" as a substitute. _
          Now get the real path if ~|~ was substituted.
          strTmpPath = Replace(strTmpPsuedoPath, "~|~", "&")
          typGal = fcnGalleryDef(strType)
          content = modRibbonFunctions.fcnGenerateDM_Content(control.Id, strTmpPath, strTmpPsuedoPath, typGal.lngType, , typGal.strGalleryMso, typGal.strImageMso, typGal.strType)
        Case Else
          'Do nothing
      End Select
  End Select
lbl_Exit:
  Exit Sub

End Sub

Sub GetItemCount(control As IRibbonControl, ByRef Count)
Dim typGal As typGalleryDef
Dim arrTemplateCat() As String
Dim strTmpPath As String, strCat As String
  
  'Control ID passed e.g., wdTypeAutoText_Gallery0, so get the type portion.
  typGal = fcnGalleryDef(Left(control.Id, InStr(control.Id, "_Gallery") - 1))
  arrTemplateCat = Split(control.Tag, "[{|}}")
  strTmpPath = Replace(arrTemplateCat(0), "~|~", "&")
  strCat = arrTemplateCat(1)
  Count = Templates(strTmpPath).BuildingBlockTypes(typGal.lngType).Categories(strCat).BuildingBlocks.Count
lbl_Exit:
  Exit Sub
End Sub

Sub GetItemLabel(ByVal control As IRibbonControl, Index As Integer, ByRef label)
Dim typGal As typGalleryDef
Dim arrTemplateCat() As String
Dim strTmpPath As String, strCat As String
  
  'Control ID passed e.g., wdTypeAutoText_Gallery0, so get the type portion.
  typGal = fcnGalleryDef(Left(control.Id, InStr(control.Id, "_Gallery") - 1))
  arrTemplateCat = Split(control.Tag, "[{|}}")
  strTmpPath = Replace(arrTemplateCat(0), "~|~", "&")
  strCat = arrTemplateCat(1)
  Set m_oTmp = Templates(strTmpPath)
  ReDim m_arrBBs(m_oTmp.BuildingBlockTypes(typGal.lngType).Categories(strCat).BuildingBlocks.Count - 1)
  For m_lngIndex = 0 To m_oTmp.BuildingBlockTypes(typGal.lngType).Categories(strCat).BuildingBlocks.Count - 1
    If Len(m_oTmp.BuildingBlockTypes(typGal.lngType).Categories(strCat).BuildingBlocks(m_lngIndex + 1).Description) > 0 Then
      m_arrBBs(m_lngIndex) = m_oTmp.BuildingBlockTypes(typGal.lngType).Categories(strCat).BuildingBlocks(m_lngIndex + 1).Name & " - " & m_oTmp.BuildingBlockTypes(typGal.lngType).Categories(strCat).BuildingBlocks(m_lngIndex + 1).Description
    Else
      m_arrBBs(m_lngIndex) = m_oTmp.BuildingBlockTypes(typGal.lngType).Categories(strCat).BuildingBlocks(m_lngIndex + 1).Name
    End If
  Next
  On Error Resume Next
  modAddInUtils.QuickSort m_arrBBs
  On Error GoTo 0
  label = m_arrBBs(Index)
lbl_Exit:
  Exit Sub
End Sub

Sub GalleryOnAction(control As IRibbonControl, selectedID As String, selectedIndex As Integer)
Dim typGal As typGalleryDef
Dim arrTemplateCat() As String
Dim strTmpPath As String, strCat As String
Dim strReport As String
  
  'Control ID passed e.g., wdTypeAutoText_Gallery0, so get the type portion.
  typGal = fcnGalleryDef(Left(control.Id, InStr(control.Id, "_Gallery") - 1))
  arrTemplateCat = Split(control.Tag, "[{|}}")
  strTmpPath = Replace(arrTemplateCat(0), "~|~", "&")
  strCat = arrTemplateCat(1)
  Set m_oTmp = Templates(strTmpPath)
  On Error GoTo Err_MenuUpdate
  ReDim m_arrBBs(m_oTmp.BuildingBlockTypes(typGal.lngType).Categories(strCat).BuildingBlocks.Count - 1)
  For m_lngIndex = 0 To m_oTmp.BuildingBlockTypes(typGal.lngType).Categories(strCat).BuildingBlocks.Count - 1
    m_arrBBs(m_lngIndex) = m_oTmp.BuildingBlockTypes(typGal.lngType).Categories(strCat).BuildingBlocks(m_lngIndex + 1).Name
  Next
  On Error Resume Next
  modAddInUtils.QuickSort m_arrBBs
  On Error GoTo Err_MenuUpdate
  strReport = modInsertCreateDeleteBlocks.fcnInsertBuildingBlocksByOption(m_oTmp, typGal.lngType, strCat, m_arrBBs(selectedIndex))
Report:
  If Not strReport = vbNullString Then
    modAddInUtils.ShowMessage 1, , strReport, , , 160
    Unload frmMsg
  End If
lbl_Exit:
  Exit Sub
Err_MenuUpdate:
  Select Case Err.Number
    Case 9, 5941 'Sub script out of range error or object does not exist error.
      strReport = "A gallery menu index error occurred." & vbCr + vbCr _
                & "This is typically due to adding or deleting one or more categories or building blocks in the templates" _
                & " without refreshing the gallery template menu." & vbCr + vbCr _
                & "Please refresh the menu and try again."
      Resume Report:
    Case Else
     'Do nothing
  End Select
End Sub

Sub ButtonOnAction(control As IRibbonControl)
  Select Case control.Id
    Case "btnBE_1", "btnBE_1_1": modBuildBank.EditBBDefTable
    Case "btnBE_2", "btnBE_2_2": modBuildBank.CreateRefreshBB
    Case "btnVarOrg": modMain.VarInfo
    Case "btnTabConfiguration": modMain.ConfigureUI
    Case "btnAddBB": modInsertCreateDeleteBlocks.AddDefineBuildingBlock control.Tag
    Case "btnDeleteBB": modInsertCreateDeleteBlocks.DeleteTemplateGaleryBBs control.Tag
    Case "btnEnhancedTools", "btnEnhancedTools_2": modMain.OrgEnhancedTools
    Case "btnRefreshTab"
      'Refresh Dynamic Menus.
      If p_oRibbon Is Nothing Then
        Set p_oRibbon = GetRibbon(ThisDocument.Variables("RibbonPointer").Value)
      End If
      p_oRibbon.Invalidate
    Case Else
      If Mid(control.Id, 4, 3) = "DM_" Then
        'Refresh Dynamic Menu.
        If p_oRibbon Is Nothing Then
          Set p_oRibbon = GetRibbon(ThisDocument.Variables("RibbonPointer").Value)
        End If
        p_oRibbon.InvalidateControl Mid(control.Id, 4, Len(control.Id) - 3)
      End If
  End Select
lbl_Exit:
  Exit Sub
End Sub

Sub ToggleOnAction(ByVal control As IRibbonControl, pressed As Boolean)
  'pressed is true if the toggle is clicked while in the "not depressed" state.
  Select Case control.Id
    Case "tbShowHide"
      If pressed Then
        bState = True
        ThisDocument.Variables("ShowTab").Value = "True"
      Else
        bState = False
        ThisDocument.Variables("ShowTab").Value = "False"
      End If
      If p_oRibbon Is Nothing Then
        Set p_oRibbon = GetRibbon(ThisDocument.Variables("RibbonPointer").Value)
      End If
      p_oRibbon.InvalidateControl "custBBTab"
      p_oRibbon.InvalidateControl "tbShowHide"
    Case Else
      'Do noting
  End Select
lbl_Exit:
  Exit Sub
End Sub

Sub GetEnabled(control As IRibbonControl, returnedVal)
  Select Case control.Id
    Case "btnBE_2", "btnBE_2_2"
      If ActiveDocument.FullName = ThisDocument.FullName Then
        returnedVal = True
      Else
        returnedVal = False
      End If
  End Select
lbl_Exit:
  Exit Sub
End Sub

Sub GetVisible(control As IRibbonControl, ByRef returnedVal)
Dim typGal As typGalleryDef
Dim arrGrpVisible() As String, arrDMVisible() As String
  
  arrDMVisible = Split(ThisDocument.Variables("GrpDMVisible").Value, "|")
  Select Case control.Id
    Case "custBBTab"
      If pub_LastDocumentClosing Then
        returnedVal = False
      Else
        If ThisDocument.Variables("ShowTab").Value = "True" Then
          returnedVal = True
        Else
          returnedVal = False
        End If
      End If
    Case "grpBuilt-InTypeGalleries"
      arrGrpVisible = Split(ThisDocument.Variables("GrpVisible"), "|")
      returnedVal = arrGrpVisible(0)
    Case "grpCustomGalleries"
      arrGrpVisible = Split(ThisDocument.Variables("GrpVisible"), "|")
      returnedVal = arrGrpVisible(1)
    Case "grpCustomTypeGalleries"
      arrGrpVisible = Split(ThisDocument.Variables("GrpVisible"), "|")
      returnedVal = arrGrpVisible(2)
    Case "custBBMenu1": returnedVal = CBool(ThisDocument.Variables("EnableCE").Value)
    Case "btn_wdTypeCustom1": returnedVal = CBool(arrDMVisible(wdTypeCustom1 - 1))
    Case "btn_wdTypeCustom2": returnedVal = CBool(arrDMVisible(wdTypeCustom2 - 1))
    Case "btn_wdTypeCustom3": returnedVal = CBool(arrDMVisible(wdTypeCustom3 - 1))
    Case "btn_wdTypeCustom4": returnedVal = CBool(arrDMVisible(wdTypeCustom4 - 1))
    Case "btn_wdTypeCustom5": returnedVal = CBool(arrDMVisible(wdTypeCustom5 - 1))
    Case "btn_FillVars": returnedVal = CBool(ThisDocument.Variables("EnableFillVars").Value)
    Case "GroupInsertText", "GroupHeaderFooterInsert": returnedVal = CStr(Not CBool(ThisDocument.Variables("Customize BIM").Value))
    Case "customGrpInsertText", "customGrpInsertTextII": returnedVal = ThisDocument.Variables("Customize BIM").Value
    Case Else
      typGal = fcnGalleryDef(Mid(control.Id, 4, Len(control.Id) - 3))
      returnedVal = CBool(arrDMVisible(typGal.lngType - 1))
  End Select
lbl_Exit:
  Exit Sub
End Sub

Sub GetScreenTip(control As IRibbonControl, ByRef screentip)
  Select Case control.Id
    'Not used
  End Select
lbl_Exit:
  Exit Sub
End Sub

Sub GetSuperTip(control As IRibbonControl, ByRef supertip)
Dim typGal As typGalleryDef
  Select Case control.Id '***GKM
    Case "btnRefreshTab"
      supertip = "Globally refreshes all dynamic menues and other controls in the user interface." & vbCr + vbCr _
               & "To ensure accuracy of the menu content, you should use this control after loading or unloading additional templates or when you modifying buidling blocks using other built-in methods."
    Case "menuBBBulkEditor":
      supertip = "Use the controls in this menu to create\redefine building blocks based on content defined in the Add-In template Buidling Block Definition Table." & vbCr + vbCr _
             & "To use this feature the Building Block Add-In must be opened as the active document.  Use ""Edit Definition Table"" to open the Building Block Add-In and edit the the table if required." & vbCr + vbCr _
             & "Using ""Load-Redefine"" you can quickly create new building blocks or update existing building blocks which may require periodic changes."
    Case "btnTabConfiguration"
      supertip = "Displays teh Add-In configuration utility.  Use the configuration utility to customize the add-in tab and controls to more close suit your particular need."
    Case "btnEnhancedTools"
      supertip = "Provides an enhanced interface quickly identify a particular building block to insert, redefine or delete." & vbCr + vbCr _
               & "Permits deletion of multiple buidling blocks in one step. & vbCr + vbCR" _
               & "Provides a building block copy (import\export) process"
    Case "tbQuickPick"
      supertip = "Adds or deletes the QuickPick control to the mouse right click context menu."
    Case Else
      typGal = fcnGalleryDef(Mid(control.Id, 4, Len(control.Id) - 3))
      supertip = typGal.strSuperTip
  End Select
lbl_Exit:
  Exit Sub
End Sub

Sub GetSize(control As IRibbonControl, ByRef returnedVal)
Dim typGal As typGalleryDef
Dim arrDMSize() As String
  typGal = fcnGalleryDef(Mid(control.Id, 4, Len(control.Id) - 3))
  arrDMSize = Split(ThisDocument.Variables("GrpDMSize").Value, "|")
  returnedVal = CBool(arrDMSize(typGal.lngType - 1)) '***GKM - Requires a boolean type i.e., not True/False (Not "normal/large" as RibbonXML reference)
lbl_Exit:
  Exit Sub
End Sub

Sub GetPressed(control As IRibbonControl, ByRef state)
  If bState Then
    state = True 'Depressed
  Else
    state = False 'Not depressed
  End If
  'You can use the GetPressed callback to perform simple toggle actions e.g.,:
'  If Selection.Font.Size = 12 Then
'    Selection.Font.Size = 6
'  Else
'    Selection.Font.Size = 12
'  End If
lbl_Exit:
 Exit Sub
End Sub

Sub getLabel(control As IRibbonControl, ByRef returnedVal)
Dim typGal As typGalleryDef
Dim arrGrpLabels() As String, arrDMLabels() As String
  arrDMLabels = Split(ThisDocument.Variables("GrpDMLabels").Value, "|")
  Select Case control.Id
    Case "custBBTab"
      If Val(Application.Version) > 14 Then
        returnedVal = UCase(Replace(ThisDocument.Variables("TabLabel").Value, "&", "&&"))
      Else
        returnedVal = Replace(ThisDocument.Variables("TabLabel").Value, "&", "&&")
      End If
    Case "grpBuilt-InTypeGalleries"
      arrGrpLabels = Split(ThisDocument.Variables("GrpLabels"), "|")
      returnedVal = arrGrpLabels(0)
    Case "grpCustomTypeGalleries"
      arrGrpLabels = Split(ThisDocument.Variables("GrpLabels"), "|")
      returnedVal = arrGrpLabels(1)
    Case "grpCustomGalleries"
      arrGrpLabels = Split(ThisDocument.Variables("GrpLabels"), "|")
      returnedVal = arrGrpLabels(2)
    Case "btn_wdTypeCustom1": returnedVal = Replace(arrDMLabels(wdTypeCustom1 - 1), "&", "&&")
    Case "btn_wdTypeCustom2": returnedVal = Replace(arrDMLabels(wdTypeCustom2 - 1), "&", "&&")
    Case "btn_wdTypeCustom3": returnedVal = Replace(arrDMLabels(wdTypeCustom3 - 1), "&", "&&")
    Case "btn_wdTypeCustom4": returnedVal = Replace(arrDMLabels(wdTypeCustom4 - 1), "&", "&&")
    Case "btn_wdTypeCustom5": returnedVal = Replace(arrDMLabels(wdTypeCustom5 - 1), "&", "&&")
    Case "tbShowHide": returnedVal = ThisDocument.Variables("TabLabel").Value & " Ribbon Tab"
    Case Else
      typGal = fcnGalleryDef(Mid(control.Id, 4, Len(control.Id) - 3))
      returnedVal = Replace(arrDMLabels(typGal.lngType - 1), "&", "&&")
  End Select
lbl_Exit:
  Exit Sub
End Sub

Sub GetImage(control As IRibbonControl, ByRef returnedVal)
Dim oImage As Object '***GKM Not used in this Add-in, but if an image (vice imageMso constant) is returned it must be set to general object type first.
Dim typGal As typGalleryDef
  Select Case control.Id
    Case "tbQuickPick"
      returnedVal = "_1"
    Case "tbShowHide"
      If bState Then
        returnedVal = "RecurrenceEdit"
      Else
        returnedVal = "SkipOccurrence"
    End If
    Case Else
      typGal = fcnGalleryDef(Mid(control.Id, 4, Len(control.Id) - 3))
      returnedVal = typGal.strImageMso
  End Select
  'Set oImage = modLoadPictureGDI.LoadPictureGDI("Folder_Icon.png")
  'Set returnedVal = oImage
  'Set oImage = Nothing
lbl_Exit:
  Exit Sub
End Sub

Function fcnGalleryDef(ByRef strType As String) As typGalleryDef
Dim strBITGPPPreviewGallery As String, strBITGFPPreviewGallery As String, strCTGPPPreviewGallery As String
Dim strCTGFPPreviewGallery As String, strCGPPPreviewGallery As String
  strBITGPPPreviewGallery = "This is a Built-In Type gallery control." & vbCr + vbCr & "Click the ""Preview\Insert"" control to see a preview and/or insert any building block in this gallery type store in any loaded template." & vbCr + vbCr & "Click the template name>category>building block name to insert a specific building block"
  strBITGFPPreviewGallery = "This is a Built-In Type gallery control." & vbCr + vbCr & "Click the ""Preview\Insert"" control to see a full page preview and/or insert any building block in this gallery type store in any loaded template." & vbCr + vbCr & "Click the template name>category>building block name to insert a specific building block"
  strCTGPPPreviewGallery = "This is a Custom Type gallery control." & vbCr + vbCr & "Click the ""Preview\Insert"" control to see a preview and/or insert any building block in this gallery type store in any loaded template." & vbCr + vbCr & "Click the template name>category>building block name to insert a specific building block"
  strCTGFPPreviewGallery = "This is a Custom Type gallery control." & vbCr + vbCr & "Click the ""Preview\Insert"" control to see a full page preview and/or insert any building block in this gallery type store in any loaded template." & vbCr + vbCr & "Click the template name>category>building block name to insert a specific building block"
  strCGPPPreviewGallery = "This is a Custom gallery control." & vbCr + vbCr & "Click the ""Preview\Insert"" control to see a preview and/or insert any building block in this gallery type store in any loaded template." & vbCr + vbCr & "Click the template name>category>building block name to insert a specific building block"
  With fcnGalleryDef
    Select Case strType
      Case "wdTypeQuickParts"
        .lngType = wdTypeQuickParts
        .strType = "wdTypeQuickParts"
        .strGalleryMso = "QuickPartsInsertGallery"
        .strImageMso = "QuickPartsInsertGallery"
        .strSuperTip = strBITGPPPreviewGallery
      Case "wdTypeCoverPage"
        .lngType = wdTypeCoverPage
        .strType = "wdTypeCoverPage"
        .strGalleryMso = "CoverPageInsertGallery"
        .strImageMso = "CoverPageInsertGallery"
        .strSuperTip = strBITGFPPreviewGallery
      Case "wdTypeEquations"
        .lngType = wdTypeEquations
        .strType = "wdTypeEquations"
        .strGalleryMso = "EquationInsertGallery"
        .strImageMso = "EquationInsertGallery"
        .strSuperTip = strBITGPPPreviewGallery
      Case "wdTypeFooters"
        .lngType = wdTypeFooters
        .strType = "wdTypeFooters"
        .strGalleryMso = "FooterInsertGallery"
        .strImageMso = "FooterInsertGallery"
        .strSuperTip = strBITGPPPreviewGallery
      Case "wdTypeHeaders"
        .lngType = wdTypeHeaders
        .strType = "wdTypeHeaders"
        .strGalleryMso = "HeaderInsertGallery"
        .strImageMso = "HeaderInsertGallery"
        .strSuperTip = strBITGPPPreviewGallery
      Case "wdTypePageNumber"
        .lngType = wdTypePageNumber
        .strType = "wdTypePageNumber"
        .strGalleryMso = "PageNumberFieldInsertGallery"
        .strImageMso = "PageNumberFieldInsertGallery"
        .strSuperTip = strBITGPPPreviewGallery
      Case "wdTypeTables"
        .lngType = wdTypeTables
        .strType = "wdTypeTables"
        .strGalleryMso = "QuickTablesInsertGallery"
        .strImageMso = "QuickTablesInsertGallery"
        .strSuperTip = strBITGPPPreviewGallery
      Case "wdTypeWatermarks"
        .lngType = wdTypeWatermarks
        .strType = "wdTypeWatermarks"
        .strGalleryMso = "WatermarkGallery"
        .strImageMso = "WatermarkGallery"
        .strSuperTip = strBITGFPPreviewGallery
      Case "wdTypeAutoText"
        .lngType = wdTypeAutoText
        .strType = "wdTypeAutoText"
        .strGalleryMso = "AutoTextGallery"
        .strImageMso = "AutoTextGallery"
        .strSuperTip = strBITGPPPreviewGallery
      Case "wdTypeTextBox"
        .lngType = wdTypeTextBox
        .strType = "wdTypeTextBox"
        .strGalleryMso = "TextBoxInsertGallery"
        .strImageMso = "TextBoxInsertGallery"
        .strSuperTip = strBITGFPPreviewGallery
      Case "wdTypePageNumberTop"
        .lngType = wdTypePageNumberTop
        .strType = "wdTypePageNumberTop"
        .strGalleryMso = "PageNumbersInHeaderInsertGallery"
        .strImageMso = "PageNumbersInHeaderInsertGallery"
        .strSuperTip = strBITGPPPreviewGallery
      Case "wdTypePageNumberBottom"
        .lngType = wdTypePageNumberBottom
        .strType = "wdTypePageNumberBottom"
        .strGalleryMso = "PageNambersInFooterInsertGallery" 'Typo in MS mso library
        .strImageMso = "PageNambersInFooterInsertGallery" 'Typo in MS mso library
        .strSuperTip = strBITGPPPreviewGallery
      Case "wdTypePageNumberPage"
        .lngType = wdTypePageNumberPage
        .strType = "wdTypePageNumberPage"
        .strGalleryMso = "PageNambersInMarginsInsertGallery" 'Typo in MS mso library
        .strImageMso = "PageNambersInMarginsInsertGallery" 'Typo in MS mso library
        .strSuperTip = strBITGPPPreviewGallery
      Case "wdTypeTableOfContents"
        .lngType = wdTypeTableOfContents
        .strType = "wdTypeTableOfContents"
        .strGalleryMso = "TableOfContentsGallery"
        .strImageMso = "TableOfContentsGallery"
        .strSuperTip = strBITGPPPreviewGallery
      Case "wdTypeCustomQuickParts"
        .lngType = wdTypeCustomQuickParts
        .strType = "wdTypeCustomQuickParts"
        .strGalleryMso = "CustomQuickPartsGallery"
        .strImageMso = "CustomQuickPartsGallery"
        .strSuperTip = strCTGPPPreviewGallery
      Case "wdTypeCustomCoverPage"
        .lngType = wdTypeCustomCoverPage
        .strType = "wdTypeCustomCoverPage"
        .strGalleryMso = "CustomCoverPageGallery"
        .strImageMso = "CustomCoverPageGallery"
        .strSuperTip = strCTGFPPreviewGallery
      Case "wdTypeCustomEquations"
        .lngType = wdTypeCustomEquations
        .strType = "wdTypeCustomEquations"
        .strGalleryMso = "CustomEquationsGallery"
        .strImageMso = "CustomEquationsGallery"
        .strSuperTip = strCTGPPPreviewGallery
      Case "wdTypeCustomFooters"
        .lngType = wdTypeCustomFooters
        .strType = "wdTypeCustomFooters"
        .strGalleryMso = "CustomFooterGallery"
        .strImageMso = "CustomFooterGallery"
        .strSuperTip = strCTGPPPreviewGallery
      Case "wdTypeCustomHeaders"
        .lngType = wdTypeCustomHeaders
        .strType = "wdTypeCustomHeaders"
        .strGalleryMso = "CustomHeaderGallery"
        .strImageMso = "CustomHeaderGallery"
        .strSuperTip = strCTGPPPreviewGallery
      Case "wdTypeCustomPageNumber"
        .lngType = wdTypeCustomPageNumber
        .strType = "wdTypeCustomPageNumber"
        .strGalleryMso = "CustomPageNumberGallery"
        .strImageMso = "CustomPageNumberGallery"
        .strSuperTip = strCTGPPPreviewGallery
      Case "wdTypeCustomTables"
        .lngType = wdTypeCustomTables
        .strType = "wdTypeCustomTables"
        .strGalleryMso = "CustomTablesGallery"
        .strImageMso = "CustomTablesGallery"
        .strSuperTip = strCTGPPPreviewGallery
      Case "wdTypeCustomWatermarks"
        .lngType = wdTypeCustomWatermarks
        .strType = "wdTypeCustomWatermarks"
        .strGalleryMso = "CustomWatermarkGallery"
        .strImageMso = "CustomWatermarkGallery"
        .strSuperTip = strCTGFPPreviewGallery
      Case "wdTypeCustomAutoText"
        .lngType = wdTypeCustomAutoText
        .strType = "wdTypeCustomAutoText"
        .strGalleryMso = "CustomAutoTextGallery"
        .strImageMso = "CustomAutoTextGallery"
        .strSuperTip = strCTGPPPreviewGallery
      Case "wdTypeCustomTextBox"
        .lngType = wdTypeCustomTextBox
        .strType = "wdTypeCustomTextBox"
        .strGalleryMso = "CustomTextBoxGallery"
        .strImageMso = "CustomTextBoxGallery"
        .strSuperTip = strCTGFPPreviewGallery
      Case "wdTypeCustomPageNumberTop"
        .lngType = wdTypeCustomPageNumberTop
        .strType = "wdTypeCustomPageNumberTop"
        .strGalleryMso = "CustomPageNumberTopGallery"
        .strImageMso = "CustomPageNumberTopGallery"
        .strSuperTip = strCTGPPPreviewGallery
      Case "wdTypeCustomPageNumberBottom"
        .lngType = wdTypeCustomPageNumberBottom
        .strType = "wdTypeCustomPageNumberBottom"
        .strGalleryMso = "CustomPageNumberBottomGallery"
        .strImageMso = "CustomPageNumberBottomGallery"
        .strSuperTip = strCTGPPPreviewGallery
      Case "wdTypeCustomPageNumberPage"
        .lngType = wdTypeCustomPageNumberPage
        .strType = "wdTypeCustomPageNumberPage"
        .strGalleryMso = "CustomPageMargins"
        .strImageMso = "CustomPageMargins"
        .strSuperTip = strCTGPPPreviewGallery
      Case "wdTypeCustomTableOfContents"
        .lngType = wdTypeCustomTableOfContents
        .strType = "wdTypeCustomTableOfContents"
        .strGalleryMso = "CustomTableOfContentsGallery"
        .strImageMso = "CustomTableOfContentsGallery"
        .strSuperTip = strCTGPPPreviewGallery
      Case "wdTypeCustom1"
        .lngType = wdTypeCustom1
        .strType = "wdTypeCustom1"
        .strGalleryMso = "CustomGallery1"
        .strImageMso = "SignatureLineInsert"
        .strSuperTip = strCGPPPreviewGallery
      Case "wdTypeCustom2"
        .lngType = wdTypeCustom2
        .strType = "wdTypeCustom2"
        .strGalleryMso = "CustomGallery2"
        .strImageMso = "SignatureLineInsert"
        .strSuperTip = strCGPPPreviewGallery
      Case "wdTypeCustom3"
        .lngType = wdTypeCustom3
        .strType = "wdTypeCustom3"
        .strGalleryMso = "CustomGallery3"
        .strImageMso = "SignatureLineInsert"
        .strSuperTip = strCGPPPreviewGallery
      Case "wdTypeCustom4"
        .lngType = wdTypeCustom4
        .strType = "wdTypeCustom4"
        .strGalleryMso = "CustomGallery4"
        .strImageMso = "SignatureLineInsert"
        .strSuperTip = strCGPPPreviewGallery
      Case "wdTypeCustom5"
        .lngType = wdTypeCustom5
        .strType = "wdTypeCustom5"
        .strGalleryMso = "CustomGallery5"
        .strImageMso = "SignatureLineInsert"
        .strSuperTip = strCGPPPreviewGallery
      Case "wdTypeBibliography"
        .lngType = wdTypeBibliography
        .strType = "wdTypeBibliography"
        .strGalleryMso = "BibliographyGallery"
        .strImageMso = "BibliographyGallery"
        .strSuperTip = strBITGPPPreviewGallery
      Case "wdTypeCustomBibliography"
        .lngType = wdTypeCustomBibliography
        .strType = "wdTypeCustomBibliography"
        .strGalleryMso = "CustomBibliographyGallery"
        .strImageMso = "CustomBibliographyGallery"
        .strSuperTip = strCTGPPPreviewGallery
    End Select
  End With
lbl_Exit:
  Exit Function
End Function

Function fcnDefaultGrpDMLabels() As String
  fcnDefaultGrpDMLabels = "QuickParts|Coverpages|Equations|Footers|Headers|Page # Fields|Tables|Watermarks|AutoText|TextBoxes|Page # (Top)|" _
  & "Page # (Bottom)|Page # (Margin)|Tables Of Contents|Cust. QuickParts|Cust. CoverPages|Cust. Equations|" _
  & "Cust. Footers|Cust. Headers|Cust. Page # Fields|Cust. Tables|Cust. Watermarks|Cust. AutoText|Cust. TextBoxes|" _
  & "Cust. Page # (Top)|Cust. Page # (Bottom)|Cust. Page # (Margin)|Cust. TOCs|Tax Blocks|Will Blocks|" _
  & "Custom 3|Custom 4|Custom 5|Bibliographies|Cust. Bibliographies"
lbl_Exit:
  Exit Function
End Function

Function fcnDefaultGrpDMSize() As String
Dim lngIndex As Long
Dim strSize As String
  For lngIndex = 1 To 35
    strSize = strSize & False & "|"
  Next lngIndex
  strSize = Left(strSize, Len(strSize) - 1)
  fcnDefaultGrpDMSize = strSize
lbl_Exit:
  Exit Function
End Function


Attribute VB_Name = "modBuildBank"
Option Explicit
Private m_oDocDefTable As Word.Document
Sub EditBBDefTable()
Dim oTmpDefTable As Template
Dim oDoc As Word.Document
Dim lngView As Long, lngZoom As Long

  lngView = ActiveWindow.View
  lngZoom = ActiveWindow.View.Zoom.PageFit
  For Each oDoc In Documents
    If oDoc.FullName = ThisDocument.FullName Then
      Set m_oDocDefTable = oDoc
      Exit For
    End If
  Next
  Set m_oDocDefTable = Nothing
  If m_oDocDefTable Is Nothing Then
    For Each oTmpDefTable In Templates
      If UCase(oTmpDefTable.FullName) = UCase(ThisDocument.FullName) Then
        Exit For
      End If
    Next oTmpDefTable
    Set m_oDocDefTable = oTmpDefTable.OpenAsDocument
    ActiveWindow.View = lngView
    ActiveWindow.View.Zoom.PageFit = lngZoom
  End If
  m_oDocDefTable.Activate
lbl_Exit:
  Exit Sub
End Sub

Sub CreateRefreshBB()
Dim oFrm As frmLoadBBs
Dim lngIndex As Long, lngCat As Long, lngCount As Long
Dim oTmp As Template
Dim oTbl As Word.Table
Dim oRngBB As Word.range
Dim bErrorProcessing As Boolean, bInvalidTable As Boolean
Dim lngView As Long, lngZoom As Long
  
  bErrorProcessing = False
  bInvalidTable = False
  lngCount = 0
  If m_oDocDefTable Is Nothing Then EditBBDefTable
  If m_oDocDefTable.Tables.Count = 1 Then
    Set oTbl = m_oDocDefTable.Tables(1)
  Else
    bInvalidTable = True
  End If
  For lngIndex = 2 To oTbl.Rows.Count
    If oTbl.Rows(lngIndex).Cells.Count <> 6 Then
      bInvalidTable = True
      Exit For
    End If
  Next lngIndex
  If Not bInvalidTable Then
    Set oFrm = New frmLoadBBs
    oFrm.Show
    If oFrm.Tag = "Load" Then
      Set oTmp = Templates(oFrm.comboActionTmp.Column(1))
      For lngIndex = 3 To oTbl.Rows.Count
        If Len(oTbl.Rows(lngIndex).range.Text) > 14 Then
          Set oRngBB = oTbl.Cell(lngIndex, 5).range
          oRngBB.End = oRngBB.End - 1
          On Error GoTo Err_Process
          Select Case True
            Case oFrm.comboActionType.Value = "All" And oFrm.comboActionCat.Value = "All"
              'Add/rededine/delete using all BB definitions in the BB definition table.
              If oFrm.chkDelete Then DeleteBBs oTmp, , "All", "All"
                lngCount = lngCount + 1
                oTmp.BuildingBlockEntries.Add fcnGetCellText(oTbl.Cell(lngIndex, 3)), CLng(fcnGetCellText(oTbl.Cell(lngIndex, 1))), _
                                          fcnGetCellText(oTbl.Cell(lngIndex, 2)), oRngBB, fcnGetCellText(oTbl.Cell(lngIndex, 4)), _
                                          fcnGetCellText(oTbl.Cell(lngIndex, 6))
            Case oFrm.comboActionType.Value <> "All" And oFrm.comboActionCat.Value = "All"
              'Add/rededine/delete only BB definitions where the BB type definition matches the selected gallery.
              If oFrm.chkDelete Then DeleteBBs oTmp, oFrm.comboActionType.Column(1), , "All"
              If CLng(fcnGetCellText(oTbl.Cell(lngIndex, 1))) = oFrm.comboActionType.Column(1) Then
                lngCount = lngCount + 1
                oTmp.BuildingBlockEntries.Add fcnGetCellText(oTbl.Cell(lngIndex, 3)), CLng(fcnGetCellText(oTbl.Cell(lngIndex, 1))), _
                                           fcnGetCellText(oTbl.Cell(lngIndex, 2)), oRngBB, fcnGetCellText(oTbl.Cell(lngIndex, 4)), _
                                           fcnGetCellText(oTbl.Cell(lngIndex, 6))
              End If
            Case oFrm.comboActionType.Value = "All" And oFrm.comboActionCat.Value <> "All"
              'Add/rededine/delete only BB definitions where the BB category definition matches the selected category.
              If oFrm.chkDelete Then DeleteBBs oTmp, , "All", oFrm.comboActionCat.Value
              If CLng(fcnGetCellText(oTbl.Cell(lngIndex, 2))) = oFrm.comboActionCat.Value Then
                lngCount = lngCount + 1
                oTmp.BuildingBlockEntries.Add fcnGetCellText(oTbl.Cell(lngIndex, 3)), CLng(fcnGetCellText(oTbl.Cell(lngIndex, 1))), _
                                           fcnGetCellText(oTbl.Cell(lngIndex, 2)), oRngBB, fcnGetCellText(oTbl.Cell(lngIndex, 4)), _
                                           fcnGetCellText(oTbl.Cell(lngIndex, 6))
              End If
            Case oFrm.comboActionType.Value <> "All" And oFrm.comboActionCat.Value <> "All"
              lngCount = lngCount + 1
              'Add/rededine/delete only BB definitions where the BB category definition matches the selected category.
              If oFrm.chkDelete Then DeleteBBs oTmp, oFrm.comboActionType.Column(1), , oFrm.comboActionCat.Value
              If CLng(fcnGetCellText(oTbl.Cell(lngIndex, 1))) = oFrm.comboActionType.Column(1) And _
                CLng(fcnGetCellText(oTbl.Cell(lngIndex, 2))) = oFrm.comboActionCat.Value Then
                oTmp.BuildingBlockEntries.Add fcnGetCellText(oTbl.Cell(lngIndex, 3)), CLng(fcnGetCellText(oTbl.Cell(lngIndex, 1))), _
                                           fcnGetCellText(oTbl.Cell(lngIndex, 2)), oRngBB, fcnGetCellText(oTbl.Cell(lngIndex, 4)), _
                                           fcnGetCellText(oTbl.Cell(lngIndex, 6))
              End If
          End Select
        End If
      Next lngIndex
      On Error GoTo 0
      'Refresh Dynamic Menus.
      If p_oRibbon Is Nothing Then
        Set p_oRibbon = GetRibbon(ThisDocument.Variables("RibbonPointer").Value)
      End If
      p_oRibbon.Invalidate
      Select Case True
        Case Not bErrorProcessing And lngCount > 0
          modAddInUtils.ShowMessage 2, 4, "(" & lngCount & ") building blocks have been created or redefined in the selected template." & vbCr + vbCr _
                       & "Do you want to save the affected template now?", , , 100
          If frmMsg.Tag = 1 Then
            oTmp.Save
            Set oTmp = Nothing
          End If
        Case bErrorProcessing And lngCount > 0
          modAddInUtils.ShowMessage 2, 4, "(" & lngCount & ") building blocks have been created or redefined in the selected template." & vbCr + vbCr _
                               & "One or  more building block definition rows were not processed." & vbCr + vbCr _
                       & "Do you want to save the affected template now?"
          If frmMsg.Tag = 1 Then
            oTmp.Save
            Set oTmp = Nothing
          End If
        Case bErrorProcessing And lngCount = 0
          modAddInUtils.ShowMessage 2, , "Nothing was processed." & vbCr + vbCr _
                               & "One or  more building block definition rows were not processed.", , , 100
        Case Not bErrorProcessing And lngCount = 0
          modAddInUtils.ShowMessage 2, , "Nothing was processed.", , , 80
        End Select
    End If
    Unload oFrm
  Else
    modAddInUtils.ShowMessage 1, , "The building block definition table is invalid." & vbCr + vbCr _
                              & "The buidling block definition table must be a single table consisting of single column title row," _
                              & " a six column heading row, and six column rows for each building block definition."
  End If
  Set frmMsg = Nothing
  m_oDocDefTable.Save
  Set m_oDocDefTable = Nothing
  Set oFrm = Nothing
lbl_Exit:
  Exit Sub
Err_Process:
  oTbl.Rows(lngIndex).range.Shading.BackgroundPatternColor = wdColorRose
  bErrorProcessing = True
  lngCount = lngCount - 1
  Resume Next
End Sub

Sub DeleteBBs(oTemplate As Template, Optional lngGallery As Long, Optional strGal As String, Optional strCat As String)
Dim oBBT As BuildingBlockType
Dim lngCat As Long, lngBB As Long
Dim oCat
Dim oBB As BuildingBlock
  
  Select Case True
    Case strGal = "All" And strCat = "All"
      For lngGallery = 1 To 35
        Set oBBT = oTemplate.BuildingBlockTypes(lngGallery)
        For lngCat = oBBT.Categories.Count To 1 Step -1
          For lngBB = oBBT.Categories(lngCat).BuildingBlocks.Count To 1 Step -1
            oBBT.Categories(lngCat).BuildingBlocks(lngBB).Delete
          Next lngBB
        Next lngCat
      Next lngGallery
    Case strGal = "All" And strGal <> "All"
      For lngGallery = 1 To 35
        Set oBBT = oTemplate.BuildingBlockTypes(lngGallery)
        For lngBB = oBBT.Categories(strCat).BuildingBlocks.Count To 1 Step -1
          oBBT.Categories(strCat).BuildingBlocks(lngBB).Delete
        Next lngBB
      Next lngGallery
    Case strGal <> "All" And strCat = "All"
      Set oBBT = oTemplate.BuildingBlockTypes(lngGallery)
      For lngCat = oBBT.Categories.Count To 1 Step -1
        For lngBB = oBBT.Categories(lngCat).BuildingBlocks.Count To 1 Step -1
          oBBT.Categories(lngCat).BuildingBlocks(lngBB).Delete
        Next lngBB
      Next lngCat
    Case strGal <> "All" And strCat <> "All"
      Set oBBT = oTemplate.BuildingBlockTypes(lngGallery)
      For lngBB = oBBT.Categories(strCat).BuildingBlocks.Count To 1 Step -1
        oBBT.Categories(strCat).BuildingBlocks(lngBB).Delete
      Next lngBB
  End Select
lbl_Exit:
  Exit Sub
End Sub

Function fcnGetCellText(oCell As Cell) As String
  fcnGetCellText = Left(oCell.range.Text, Len(oCell.range.Text) - 2)
lbl_Exit:
  Exit Function
End Function
Attribute VB_Name = "modInsertCreateDeleteBlocks"
Option Explicit

Function fcnInsertBuildingBlocksByOption(oTmp As Template, lngType As Long, strCat As String, strBB As String) As String
Dim oRng As Word.range, oRngBB As range, oRngBreakB As range, oRngBreakA As range
Dim oBB As BuildingBlock
  'The is a bug in the BB insert methods. The insert option is ignored if a BB is inserted _
  using AutoComplete suggestion, F# or via the normal VBA insert method.  This code provides a workaround.
  On Error GoTo Err_Insert
  Set oBB = oTmp.BuildingBlockTypes(lngType).Categories(strCat).BuildingBlocks(strBB)
  Select Case oBB.InsertOptions
    Case 0
      oBB.Insert Selection.range, True
    Case 1
      Set oRng = Selection.Paragraphs(1).range
      Select Case True
        Case oRng.Text = Chr(13)
          oBB.Insert Selection.range, True
        Case Len(Selection.range) = Len(Selection.Paragraphs(1).range)
          oBB.Insert Selection.range, True
        Case Len(Selection.range) = Len(Selection.Paragraphs(1).range) - 1
          oBB.Insert Selection.range, True
        Case Else
          'Insert and wrap the BB in its own paragraph.
          Set oRngBB = oBB.Insert(Selection.range, True)
          Set oRngBreakB = oRngBB.Duplicate
          With oRngBreakB
            .Collapse wdCollapseStart
            .InsertBefore vbCr
          End With
          Set oRngBreakA = oRngBB.Duplicate
          With oRngBreakA
            .Collapse wdCollapseEnd
            .InsertAfter vbCr
          End With
      End Select
    Case 2
      'Insert and wrap the BB with page breaks.
      Set oRngBB = oBB.Insert(Selection.range, True)
      Set oRngBreakB = oRngBB.Duplicate
      With oRngBreakB
        .Collapse wdCollapseStart
        .InsertBreak wdPageBreak
        .Move wdCharacter, -3
        .MoveEnd wdCharacter, 1
        .Delete
      End With
      Set oRngBreakA = oRngBB.Duplicate
      With oRngBreakA
        .Collapse wdCollapseEnd
        .InsertBreak wdPageBreak
        .Move wdCharacter, -3
        .MoveEnd wdCharacter, 1
        If .ShapeRange.Count = 0 Then
          .Delete
        End If
      End With
  End Select
  fcnInsertBuildingBlocksByOption = vbNullString
lbl_Exit:
  Exit Function
Err_Insert:
  Select Case Err.Number
    Case 5941
      fcnInsertBuildingBlocksByOption = "The building block " & strBB & " does not exists.  Refresh your gallery/template menu."
    Case -2147467259, 4605
      fcnInsertBuildingBlocksByOption = "Insertion is not allowed because the selection is locked." & vbCr + vbCr _
        & "This situation can occur if you attempt to insert a buidling block when the selection covers a locked content control or if no document window is open."
    Case Else
      fcnInsertBuildingBlocksByOption = Err.Description & vbCr + vbCr _
         & "Please notify the developer of the details related to this condition."
  End Select
  Resume lbl_Exit
End Function

Sub AddDefineBuildingBlock(strType As String)
Dim arrParts() As String
Dim lngType As Long
Dim lngIndex As Long
Dim oFrm As frmCreateBBs
Dim strTemplate As String
  If Selection.Type = wdSelectionIP Then
    modAddInUtils.ShowMessage 2, , "There is nothing selected.  To create a Building Block you must " _
                                & "First select the content (text or object/s) you want to define." & vbCr + vbCr _
                                & "Select the content you want to define and try again.", , , 120
    Unload frmMsg
    GoTo lbl_Exit
  End If
  arrParts = Split(strType, "}[|]{")
  strTemplate = arrParts(0)
  strTemplate = Replace(strTemplate, "~|~", "&")
  Select Case arrParts(1)
    Case "wdTypeQuickParts": lngType = 1
    Case "wdTypeCoverPage": lngType = 2
    Case "wdTypeEquations": lngType = 3
    Case "wdTypeFooters": lngType = 4
    Case "wdTypeHeaders": lngType = 5
    Case "wdTypePageNumber": lngType = 6
    Case "wdTypeTables": lngType = 7
    Case "wdTypeWatermarks": lngType = 8
    Case "wdTypeAutoText": lngType = 9
    Case "wdTypeTextBox": lngType = 10
    Case "wdTypePageNumberTop": lngType = 11
    Case "wdTypePageNumberBottom": lngType = 12
    Case "wdTypePageNumberPage": lngType = 13
    Case "wdTypeTableOfContents": lngType = 14
    Case "wdTypeCustomQuickParts": lngType = 15
    Case "wdTypeCustomCoverPage": lngType = 16
    Case "wdTypeCustomEquations": lngType = 17
    Case "wdTypeCustomFooters": lngType = 18
    Case "wdTypeCustomHeaders": lngType = 19
    Case "wdTypeCustomPageNumber": lngType = 20
    Case "wdTypeCustomTables": lngType = 21
    Case "wdTypeCustomWatermarks": lngType = 22
    Case "wdTypeCustomAutoText": lngType = 23
    Case "wdTypeCustomTextBox": lngType = 24
    Case "wdTypeCustomPageNumberTop": lngType = 25
    Case "wdTypeCustomPageNumberBottom": lngType = 26
    Case "wdTypeCustomPageNumberPage": lngType = 27
    Case "wdTypeCustomTableOfContents": lngType = 28
    Case "wdTypeCustom1": lngType = 29
    Case "wdTypeCustom2": lngType = 30
    Case "wdTypeCustom1": lngType = 31
    Case "wdTypeCustom2": lngType = 32
    Case "wdTypeCustom1": lngType = 33
    Case "wdTypeBibliography": lngType = 34
    Case "wdTypeCustomBibliography": lngType = 35
  End Select
  Set oFrm = New frmCreateBBs
  arrParts = Split(strTemplate, Application.PathSeparator)
  oFrm.Caption = "Create new building block"
  If Not strTemplate = "XXNoBBsInLoadedTemplatesXX" Then
    oFrm.comboSaveIn.Value = arrParts(UBound(arrParts))
    oFrm.comboSaveIn.Tag = arrParts(UBound(arrParts))
    For lngIndex = 0 To oFrm.comboSaveIn.ListCount - 1
      If oFrm.comboSaveIn.List(lngIndex, 1) = oFrm.comboSaveIn.Tag Then
        oFrm.comboSaveIn.ListIndex = lngIndex
        Exit For
      End If
    Next lngIndex
  Else
    For lngIndex = 0 To oFrm.comboSaveIn.ListCount - 1
      If oFrm.comboSaveIn.List(lngIndex, 1) = ActiveDocument.AttachedTemplate.FullName Then
        oFrm.comboSaveIn.ListIndex = lngIndex
        Exit For
      End If
    Next lngIndex
  End If
  If oFrm.comboSaveIn.ListIndex = -1 Then
    oFrm.comboSaveIn.ListIndex = 0
  End If
  oFrm.comboSaveIn.Tag = oFrm.comboSaveIn.ListIndex
  For lngIndex = 0 To 34
    If oFrm.comboGallery.List(lngIndex, 1) = CStr(lngType) Then
      oFrm.comboGallery.ListIndex = lngIndex
      oFrm.comboGallery.Tag = oFrm.comboGallery.ListIndex
      Exit For
    End If
  Next lngIndex
  oFrm.Show
  DoEvents
  'Refresh Dynamic Menus.
  If p_oRibbon Is Nothing Then
    Set p_oRibbon = GetRibbon(ThisDocument.Variables("RibbonPointer").Value)
  End If
  p_oRibbon.Invalidate
  Unload oFrm
  Set oFrm = Nothing
lbl_Exit:
  Exit Sub
End Sub

Sub DeleteTemplateGaleryBBs(strTmp_Type As String)
Dim arrParts() As String
Dim lngType As Long
Dim lngIndex As Long
Dim oFrm As frmDeleteBBs
Dim strTemplate As String
Dim strGalleryName As String
  arrParts = Split(strTmp_Type, "}[|]{")
  strTemplate = arrParts(0)
  strTemplate = Replace(strTemplate, "~|~", "&")
  Select Case arrParts(1)
    Case "wdTypeQuickParts": lngType = 1: strGalleryName = "QuickParts"
    Case "wdTypeCoverPage": lngType = 2
    Case "wdTypeEquations": lngType = 3
    Case "wdTypeFooters": lngType = 4
    Case "wdTypeHeaders": lngType = 5
    Case "wdTypePageNumber": lngType = 6
    Case "wdTypeTables": lngType = 7
    Case "wdTypeWatermarks": lngType = 8
    Case "wdTypeAutoText": lngType = 9: strGalleryName = "AutoText"
    Case "wdTypeTextBox": lngType = 10
    Case "wdTypePageNumberTop": lngType = 11
    Case "wdTypePageNumberBottom": lngType = 12
    Case "wdTypePageNumberPage": lngType = 13
    Case "wdTypeTableOfContents": lngType = 14
    Case "wdTypeCustomQuickParts": lngType = 15
    Case "wdTypeCustomCoverPage": lngType = 16
    Case "wdTypeCustomEquations": lngType = 17
    Case "wdTypeCustomFooters": lngType = 18
    Case "wdTypeCustomHeaders": lngType = 19
    Case "wdTypeCustomPageNumber": lngType = 20
    Case "wdTypeCustomTables": lngType = 21
    Case "wdTypeCustomWatermarks": lngType = 22
    Case "wdTypeCustomAutoText": lngType = 23
    Case "wdTypeCustomTextBox": lngType = 24
    Case "wdTypeCustomPageNumberTop": lngType = 25
    Case "wdTypeCustomPageNumberBottom": lngType = 26
    Case "wdTypeCustomPageNumberPage": lngType = 27
    Case "wdTypeCustomTableOfContents": lngType = 28
    Case "wdTypeCustom1": lngType = 29
    Case "wdTypeCustom2": lngType = 30
    Case "wdTypeCustom1": lngType = 31
    Case "wdTypeCustom2": lngType = 32
    Case "wdTypeCustom1": lngType = 33
    Case "wdTypeBibliography": lngType = 34
    Case "wdTypeCustomBibliography": lngType = 35
  End Select
  Set oFrm = New frmDeleteBBs
  arrParts = Split(strTemplate, Application.PathSeparator)
  With oFrm
    .Caption = "Building Block Delete Utility"
    .lbl_Template.Caption = "Template: " & arrParts(UBound(arrParts))
    .lbl_Template.Tag = strTemplate
    .lbl_Gallery.Caption = "Gallery: " & strGalleryName
    .lbl_Gallery.Tag = lngType
    .Show
     DoEvents
    If .Tag = "Refresh" Then
      'Refresh Dynamic Menus.
      If p_oRibbon Is Nothing Then
        Set p_oRibbon = GetRibbon(ThisDocument.Variables("RibbonPointer").Value)
      End If
      p_oRibbon.Invalidate
      modAddInUtils.ShowMessage 4, 4, "You have deleted one or more building blocks in the selected template." & vbCr + vbCr _
                                  & "Do you want to save changes to this template now?", , , 100
      If frmMsg.Tag = "1" Then
        Templates(strTemplate).Save
        DoEvents
      End If
      Unload frmMsg
    End If
  End With
  Unload oFrm
  Set oFrm = Nothing
lbl_Exit:
  Exit Sub

End Sub



'Sub DeleteBBs()
'Dim lngGalIndex As Long
'Dim oBBT As BuildingBlockType
'Dim lngIndex As Long, i As Long, j As Long
'Dim oCat
'Dim oBB As BuildingBlock
'Dim oTmp As Template
'  Set oTmp = ThisDocument.AttachedTemplate
'  For lngGalIndex = 1 To 35
'    Set oBBT = oTmp.BuildingBlockTypes(lngGalIndex)
'    For i = oBBT.Categories.Count To 1 Step -1
'      For j = oBBT.Categories(i).BuildingBlocks.Count To 1 Step -1
'       oBBT.Categories(i).BuildingBlocks(j).Delete
'      Next
'    Next
'  Next
'  If p_oRibbon Is Nothing Then
'    Set p_oRibbon = GetRibbon(ThisDocument.Variables("RibbonPointer").Value)
'  End If
'  p_oRibbon.Invalidate
'lbl_Exit:
'  Exit Sub
'End Sub
Attribute VB_Name = "modLoadPictureGDI"
Option Explicit
'This module provides a LoadPictureGDI function, which can be used instead of VBA's LoadPicture, _
to load a wide variety of image types from disk - including png. It is not employed in this project.

'The png format is used in Office 2007-2010 to provide images that include an alpha channel for each pixel's transparency

'Author:    Stephen Bullen
'Date:      31 October, 2006
'Email:     stephen@oaltd.co.uk

'Updated :  30 December, 2010
'By :       Rob Bovey
'Reason :   Also working now in the 64 bit version of Office 2010

'Declare a UDT to store a GUID for the IPicture OLE Interface
Private Type GUID
  Data1 As Long
  Data2 As Integer
  Data3 As Integer
  Data4(0 To 7) As Byte
End Type

#If VBA7 Then
  'Declare a UDT to store the bitmap information
  Private Type PICTDESC
    Size As Long
    Type As Long
    hPic As LongPtr
    hPal As LongPtr
  End Type
  'Declare a UDT to store the GDI+ Startup information
  Private Type GdiplusStartupInput
    GdiplusVersion As Long
    DebugEventCallback As LongPtr
    SuppressBackgroundThread As Long
    SuppressExternalCodecs As Long
  End Type
  'Windows API calls into the GDI+ library
  Private Declare PtrSafe Function GdiplusStartup Lib "GDIPlus" (token As LongPtr, inputbuf As GdiplusStartupInput, Optional ByVal outputbuf As LongPtr = 0) As Long
  Private Declare PtrSafe Function GdipCreateBitmapFromFile Lib "GDIPlus" (ByVal filename As LongPtr, bitmap As LongPtr) As Long
  Private Declare PtrSafe Function GdipCreateHBITMAPFromBitmap Lib "GDIPlus" (ByVal bitmap As LongPtr, hbmReturn As LongPtr, ByVal background As LongPtr) As Long
  Private Declare PtrSafe Function GdipDisposeImage Lib "GDIPlus" (ByVal image As LongPtr) As Long
  Private Declare PtrSafe Sub GdiplusShutdown Lib "GDIPlus" (ByVal token As LongPtr)
  Private Declare PtrSafe Function OleCreatePictureIndirect Lib "oleaut32" (PicDesc As PICTDESC, RefIID As GUID, ByVal fPictureOwnsHandle As Long, IPic As IPicture) As Long
#Else
  'Declare a UDT to store the bitmap information
  Private Type PICTDESC
    Size As Long
    Type As Long
    hPic As Long
    hPal As Long
  End Type
  'Declare a UDT to store the GDI+ Startup information
  Private Type GdiplusStartupInput
    GdiplusVersion As Long
    DebugEventCallback As Long
    SuppressBackgroundThread As Long
    SuppressExternalCodecs As Long
  End Type
  'Windows API calls into the GDI+ library
  Private Declare Function GdiplusStartup Lib "GDIPlus" (token As Long, inputbuf As GdiplusStartupInput, Optional ByVal outputbuf As Long = 0) As Long
  Private Declare Function GdipCreateBitmapFromFile Lib "GDIPlus" (ByVal filename As Long, bitmap As Long) As Long
  Private Declare Function GdipCreateHBITMAPFromBitmap Lib "GDIPlus" (ByVal bitmap As Long, hbmReturn As Long, ByVal background As Long) As Long
  Private Declare Function GdipDisposeImage Lib "GDIPlus" (ByVal image As Long) As Long
  Private Declare Sub GdiplusShutdown Lib "GDIPlus" (ByVal token As Long)
  Private Declare Function OleCreatePictureIndirect Lib "oleaut32" (PicDesc As PICTDESC, RefIID As GUID, ByVal fPictureOwnsHandle As Long, IPic As IPicture) As Long
#End If

' Procedure:    LoadPictureGDI
' Purpose:      Loads an image using GDI+
' Returns:      The image as an IPicture Object
Public Function LoadPictureGDI(ByVal sFilename As String) As IPicture
Dim uGdiInput As GdiplusStartupInput
Dim lResult As Long
#If VBA7 Then
  Dim hGdiPlus As LongPtr
  Dim hGdiImage As LongPtr
  Dim hBitmap As LongPtr
#Else
  Dim hGdiPlus As Long
  Dim hGdiImage As Long
  Dim hBitmap As Long
#End If
'Initialize GDI+
uGdiInput.GdiplusVersion = 1
lResult = GdiplusStartup(hGdiPlus, uGdiInput)
If lResult = 0 Then
  'Load the image
  lResult = GdipCreateBitmapFromFile(StrPtr(sFilename), hGdiImage)
  If lResult = 0 Then
    'Create a bitmap handle from the GDI image
    lResult = GdipCreateHBITMAPFromBitmap(hGdiImage, hBitmap, 0)
    'Create the IPicture object from the bitmap handle
    Set LoadPictureGDI = CreateIPicture(hBitmap)
    'Tidy up
    GdipDisposeImage hGdiImage
  End If
  'Shutdown GDI+
  GdiplusShutdown hGdiPlus
End If
End Function
' Procedure:    CreateIPicture
' Purpose:      Converts a image handle into an IPicture object.
' Returns:      The IPicture object
#If VBA7 Then
  Private Function CreateIPicture(ByVal hPic As LongPtr) As IPicture
#Else
  Private Function CreateIPicture(ByVal hPic As Long) As IPicture
#End If
Dim lResult As Long
Dim uPicInfo As PICTDESC
Dim IID_IDispatch As GUID
Dim IPic As IPicture
'OLE Picture types
Const PICTYPE_BITMAP = 1
'Create the Interface GUID (for the IPicture interface)
With IID_IDispatch
  .Data1 = &H7BF80980
  .Data2 = &HBF32
  .Data3 = &H101A
  .Data4(0) = &H8B
  .Data4(1) = &HBB
  .Data4(2) = &H0
  .Data4(3) = &HAA
  .Data4(4) = &H0
  .Data4(5) = &H30
  .Data4(6) = &HC
  .Data4(7) = &HAB
End With
'Fill uPicInfo with necessary parts.
With uPicInfo
  .Size = Len(uPicInfo)
  .Type = PICTYPE_BITMAP
  .hPic = hPic
  .hPal = 0
End With
'Create the Picture object.
lResult = OleCreatePictureIndirect(uPicInfo, IID_IDispatch, True, IPic)
'Return the new Picture object.
Set CreateIPicture = IPic
End Function





Attribute VB_Name = "modMain"
Option Explicit


Public Const strGalleryNames As String = "AutoText|Bibliographies|Cover Pages|Equations|Footers|Headers|Page Numbers|Page Numbers (Top of Page)|Page Numbers (Margins)|" _
                    & "Page Numbers (Bottom of Page)|QuickParts|Tables|Tables of Contents|Text Boxes|Watermarks|Custom AutoText|Custom Bibliographies|" _
                    & "Cusom Cover Pages|Custom Equations|Custom Footers|Custom Headers|Custom Page Numbers|Custom Page Numbers (Top of Page)|" _
                    & "Custom Page Numbers (Margins)|Custom Page Numbers (Bottom of Page)|Custom Quick Parts|Custom Tables|Custom Tables of Contents|" _
                    & "Custom Text Boxes|Custom Watermarks|Custom 1|Custom 2|Custom 3|Custom 4|Custom 5"
'MS design error.  Should be Custom QuickParts
Public Const strTypeDef As String = "9|34|2|3|4|5|6|11|13|" _
                    & "12|1|7|10|14|8|23|35|" _
                    & "16|17|18|19|20|25|" _
                    & "27|26|15|21|28|" _
                    & "24|22|29|30|31|32|33"


Sub ValidateConfigurationVariables()
'Validate/Create configuration variables.
Dim oVar As Variable
Dim strVar As String
Dim lngIndex As Long
  On Error GoTo Err_FirstUse
  Set oVar = ThisDocument.Variables("FirstUse")
  strVar = oVar.Value
  On Error GoTo Err_ShowTab
  Set oVar = ThisDocument.Variables("ShowTab")
  strVar = oVar.Value
  On Error GoTo Err_TabLabel
  Set oVar = ThisDocument.Variables("TabLabel")
  strVar = oVar.Value
  On Error GoTo Err_CustomBIM
  Set oVar = ThisDocument.Variables("Customize BIM")
  strVar = oVar.Value
  On Error GoTo Err_GrpVisible
  Set oVar = ThisDocument.Variables("GrpVisible")
  strVar = oVar.Value
  On Error GoTo Err_GrpLabels:
  Set oVar = ThisDocument.Variables("GrpLabels")
  strVar = oVar.Value
  On Error GoTo Err_GrpDMLabels
  Set oVar = ThisDocument.Variables("GrpDMLabels")
  strVar = oVar.Value
  On Error GoTo Err_GrpDMVisible
  Set oVar = ThisDocument.Variables("GrpDMVisible")
  strVar = oVar.Value
  On Error GoTo Err_GrpDMSize
  Set oVar = ThisDocument.Variables("GrpDMSize")
  strVar = oVar.Value
  On Error GoTo Err_QuickPick
  Set oVar = ThisDocument.Variables("QuickPick")
  strVar = oVar.Value
  On Error GoTo 0
  ThisDocument.Save
  DoEvents
lbl_Exit:
  Exit Sub
Err_FirstUse:
  ThisDocument.Variables("FirstUse").Value = "True"
  Resume Next
Err_ShowTab:
  ThisDocument.Variables("ShowTab").Value = "True"
  Resume Next
Err_TabLabel:
  ThisDocument.Variables("TabLabel").Value = "Building Blocks"
  Resume Next
Err_CustomBIM:
  ThisDocument.Variables("Customize BIM").Value = "True"
  Resume Next
Err_GrpVisible:
  For lngIndex = 1 To 3
    strVar = strVar & "True|"
  Next lngIndex
  strVar = Left(strVar, Len(strVar) - 1)
  ThisDocument.Variables("GrpVisible").Value = strVar
  Resume Next
Err_GrpLabels:
  strVar = "Built-in Type Building Blocks|Custom Type Building Blocks|Custom Building Blocks and Tools"
  ThisDocument.Variables("GrpLabels").Value = strVar
  Resume Next
Err_GrpDMLabels:
  ThisDocument.Variables("GrpDMLabels").Value = fcnDefaultGrpDMLabels
  Resume Next
Err_GrpDMVisible:
  strVar = vbNullString
  For lngIndex = 1 To 35
    strVar = strVar & "True|"
  Next lngIndex
  strVar = Left(strVar, Len(strVar) - 1)
  ThisDocument.Variables("GrpDMVisible").Value = strVar
  Resume Next
Err_GrpDMSize:
  ThisDocument.Variables("GrpDMSize").Value = fcnDefaultGrpDMSize
  Resume Next
Err_QuickPick:
  ThisDocument.Variables("QuickPick").Value = "False"
  Resume Next
End Sub

Sub ConfigureUI()
  Dim oFrm As frmConfigure
  Set oFrm = New frmConfigure
  oFrm.Show
  Unload oFrm
  Set oFrm = Nothing
lbl_Exit:
  Exit Sub
End Sub

Sub QuickPick()
Dim oFrmQP As frmQuickList
  Set oFrmQP = New frmQuickList
  oFrmQP.Show
  Unload oFrmQP
  Set oFrmQP = Nothing
lbl_Exit:
  Exit Sub
End Sub

Sub VarInfo()
Dim oFrmVO As frmVarOrg
  If ActiveDocument.FullName = ThisDocument.FullName Then
    modAddInUtils.ShowMessage 2, , "Document variable viewer is not available when the the add-in document is the active document.", , , 90
    Unload frmMsg
    GoTo lbl_Exit
  End If
  Set oFrmVO = New frmVarOrg
  oFrmVO.Show
  Unload oFrmVO
  Set oFrmVO = Nothing
lbl_Exit:
  Exit Sub
End Sub

Sub AddCMenuItem()
Dim oButton As Office.CommandBarControl
  CustomizationContext = NormalTemplate
  'Add button to right-click menu
  Set oButton = CommandBars.FindControl(Tag:="custBtnQuickPick")
  If Not oButton Is Nothing Then Exit Sub
  Set oButton = Application.CommandBars("Text").Controls.Add(, , , 1)
  'Set properties of button
  With oButton
    .Tag = "custBtnQuickPick"
    .Caption = "Building Block QuickPick"
    .FaceId = 205
    .Style = msoButtonIconAndCaption
    .OnAction = "modMain.QuickPick"
    .BeginGroup = True
  End With
  modAddInUtils.ShowMessage 2, 4, "This action caused a change to your Normal template." & vbCr + vbCr _
    & "Do you want to save these changes now?", , , 100
  If frmMsg.Tag = 1 Then
    NormalTemplate.Save
  End If
  Unload frmMsg
lbl_Exit:
  Set oButton = Nothing
  Exit Sub
End Sub

Sub RemoveCMenuItem()
  On Error Resume Next
  CustomizationContext = NormalTemplate 'Make changes to Normal.dot
  'Delete button on right-click menu
  Application.CommandBars("Text").Controls("Building Block QuickPick").Delete
  modAddInUtils.ShowMessage 2, 4, "This action caused a change to your Normal template." & vbCr + vbCr _
      & "Do you want to save these changes now?", , , 100
  If frmMsg.Tag = 1 Then
    NormalTemplate.Save
  End If
  Unload frmMsg
lbl_Exit:
  Exit Sub
End Sub

Sub OrgEnhancedTools()
Dim oFrmET As frmEnhancedTools
  Set oFrmET = New frmEnhancedTools
  oFrmET.Show
  
  Unload oFrmET
  Set oFrmET = Nothing
lbl_Exit:
  Exit Sub
End Sub

Function fcnLoadTemplateAsAddIn() As String
Dim strAddin As String
Dim oAddin As Word.AddIn
Dim bAddinLoaded As Boolean
  bAddinLoaded = False
  With Dialogs(wdDialogFileOpen)
    If .Display = -1 Then
      strAddin = WordBasic.FileNameInfo$(.Name, 1)
      For Each oAddin In Application.AddIns
        If oAddin.Name = strAddin Then
          bAddinLoaded = True
          fcnLoadTemplateAsAddIn = "The template you selected is already loaded."
          Exit For
        End If
      Next
      If Not bAddinLoaded Then
        AddIns.Add filename:=strAddin, Install:=True
        fcnLoadTemplateAsAddIn = strAddin
      End If
    Else
      fcnLoadTemplateAsAddIn = "**CANCELED**"
    End If
  End With
lbl_Exit:
  Exit Function
End Function

Function ValidateCategories(ByRef BBT As BuildingBlockType) As Boolean
Dim i As Long
For i = 1 To BBT.Categories.Count
  If BBT.Categories(i).BuildingBlocks.Count > 0 Then
    ValidateCategories = True
    Exit Function
  End If
Next
End Function

Sub Test()
        modAddInUtils.ShowMessage 2, , "One or more group label text fields is blank." & vbCr + vbCr _
                                   & "Please ensure all all text fields are filled in and try again.", , , 100
                              

End Sub


Attribute VB_Name = "modRibbonFunctions"
Option Explicit
    
Public Function fcnGenerateDM_Content(ByVal strId As String, Optional strPath, Optional strPsuedoPath, Optional lngType As Long, Optional strDMName As String, _
                                      Optional strGalleryMso As String, Optional strImageMso As String, Optional strType As String, Optional ByRef bRefreshButton As Boolean, _
                                      Optional strText As String) As String
'Declare variables
Dim strXML As String, strSize As String
Dim lngIndex As Long, lngCatIndex As Long
Dim oTmp As Template
Dim bHasBBs As Boolean
Dim oBBC As Category
Dim arrCategories() As String
Dim lngCats As Long
Dim oBBTs As BuildingBlockTypes

  strXML = vbNullString
  lngIndex = 0
  Select Case Left(strId, 3)
    Case "DM_"
      strSize = "normal"
      strType = Mid(strId, 4, Len(strId) - 3)
      If Application.Version > 12 Then
        strXML = "<menu xmlns=""http://schemas.microsoft.com/office/2009/07/customui"" itemSize=""" & strSize & """>" & vbNewLine
      Else
        strXML = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"" itemSize=""" & strSize & """>" & vbNewLine
      End If
      'Check all loaded templates for Building Blocks.
      For Each oTmp In Templates
        If lngIndex > 996 Then
          modAddInUtils.ShowMessage 2, , "The gallery template menu is full and can not dispaly additional templates.", , , 90
          Unload frmMsg
          Exit For
        End If
        bHasBBs = False
        If oTmp.BuildingBlockTypes(lngType).Categories.Count > 0 Then
          For lngCatIndex = 1 To oTmp.BuildingBlockTypes(lngType).Categories.Count
            If oTmp.BuildingBlockTypes(lngType).Categories(lngCatIndex).BuildingBlocks.Count > 0 Then
              bHasBBs = True
            Exit For
          End If
        Next lngCatIndex
        'Add names of templates containing one or more Building Blocks to the dynamic menu.
        If bHasBBs Then
          lngIndex = lngIndex + 1
          If lngIndex = 1 Then
            strXML = strXML & "<gallery idMso=""" & strGalleryMso & """ " & _
                      "label=""Preview/Insert"" " & "imageMso=""" & strImageMso & """/>" & vbCrLf
          strXML = strXML & "<menuSeparator id=""DMMS1""/>" & vbCrLf
          strXML = strXML & XMLBuild(ControlType:="button", _
                 Id:="btnAddBB", _
                 ImageMso:="CreateReportFromWizard", _
                 Tag:="XXNoBBsInLoadedTemplatesXX}[|]{" & strType, _
                 Action:="modBBGalleriesRibCon.ButtonOnAction", _
                 label:="Create Building Block", _
                 supertip:="Opens a custom Create Building Blocks dialog preset to the targeted template and gallery.")
          End If
          strXML = strXML & "<menuSeparator id=""div" & lngIndex & """/> " & vbNewLine & _
              XMLBuild(ControlType:="dynamicMenu", _
              Id:=strDMName & "_" & lngIndex, _
              label:=oTmp.Name, _
              image:="forms32", _
              content:="modBBGalleriesRibCon.GetContent", _
              Tag:=strDMName & "~|~" & Replace(oTmp.FullName, "&", "~|~"))
          End If
        Else
        End If
      Next oTmp
      'If no templates were added to the menu then create a dead "No content" button control and a create BB control.
      If lngIndex = 0 Then
        strXML = strXML & XMLBuild(ControlType:="button", _
                 Id:="btnAddBB", _
                 ImageMso:="CreateReportFromWizard", _
                 Tag:="XXNoBBsInLoadedTemplatesXX}[|]{" & strType, _
                 Action:="modBBGalleriesRibCon.ButtonOnAction", _
                 label:="Create Building Block", _
                 supertip:="Opens a custom Create Building Blocks dialog preset to the targeted template and gallery.")
        strXML = strXML & "<menuSeparator id=""DMMS1""/>" & vbCrLf
        strXML = strXML & XMLBuild(ControlType:="button", _
                 Id:="btnNoMenus" & lngIndex, _
                 label:="No templates containing Building Blocks in this category are loaded", _
                 image:="empty32", _
                 screentip:="", _
                 supertip:="There are no templates loaded containing Building Blocks defined in this category.")
      End If
      If bRefreshButton Then
        strXML = strXML & XMLBuild(ControlType:="button", _
                 Id:="btnDM_" & strDMName, _
                 label:="Refresh Menu", _
                 ImageMso:="RecurrenceEdit", _
                 Action:="modBBGalleriesRibCon.ButtonOnAction", _
                 screentip:="Click to refresh this teamplate/gallery menu.")
      End If
      strXML = strXML & "</menu>"
      'Temporarily mask line breaks in supertip text.
      strXML = Replace(strXML, "&#13", "*()*")
      'Replace ampersands with XML equivelent.  This allows "&" to display in menu labels.
      strXML = Replace(strXML, "&", "&amp;&amp;")
      'Restore line breaks in supertip text.
      strXML = Replace(strXML, "*()*", "&#13")
      fcnGenerateDM_Content = strXML
    Case Else
      Set oTmp = Templates(strPath)
      Set oBBTs = oTmp.BuildingBlockTypes
          lngIndex = 0
          'Get the name of each category in the gallery that contains one or more buildingblock entries.
          'Initialize the array.
          Erase arrCategories
          For lngCats = 1 To oBBTs(lngType).Categories.Count
            Set oBBC = oBBTs(lngType).Categories(lngCats)
            If oBBC.BuildingBlocks.Count > 0 Then
              ReDim Preserve arrCategories(lngIndex)
              arrCategories(lngIndex) = oBBC.Name
              lngIndex = lngIndex + 1
            End If
            On Error Resume Next
            'Categories in the collection are not sorted alphabetically, so sort the array.
            modAddInUtils.QuickSort arrCategories
            On Error GoTo 0
          Next lngCats
          On Error Resume Next
          'Categories in the collection are not sorted alphabetically, so sort the array.
          modAddInUtils.QuickSort arrCategories
          On Error GoTo 0
          'Create the XML string needed to define the dynamicMenu elements.
          strXML = "<menu xmlns=""" & _
                 "http://schemas.microsoft.com/office/2006/01/customui"">" & vbCrLf
          strXML = strXML & XMLBuild(ControlType:="button", _
                              Id:="btnAddBB", _
                              ImageMso:="CreateReportFromWizard", _
                              Tag:=strPsuedoPath & "}[|]{" & strType, _
                              Action:="modBBGalleriesRibCon.ButtonOnAction", _
                              label:="Create Building Block", _
                              supertip:="Opens a custom Create Building Blocks dialog preset to the targeted template and gallery.")
          strXML = strXML & XMLBuild(ControlType:="button", _
                              Id:="btnDeleteBB", _
                              ImageMso:="RecordsDeleteRecord", _
                              Tag:=strPsuedoPath & "}[|]{" & strType, _
                              Action:="modBBGalleriesRibCon.ButtonOnAction", _
                              label:="Delete Building Blocks", _
                              supertip:="Opens a dialog to list, select and delete one or more building blocks from the selected template gallery.")
          For lngIndex = 0 To UBound(arrCategories)
             If lngIndex = 0 Then
               strXML = strXML & "<menuSeparator id=""DMMS1"" " & _
                 "title=""Select/Insert from category list""/>" & vbCrLf
             End If
             strXML = strXML & XMLBuild(ControlType:="gallery", _
                 Id:=strType & "_Gallery" & lngIndex, _
                 Columns:="1", _
                 label:=arrCategories(lngIndex), _
                 ImageMso:=strImageMso, _
                 Tag:=strPsuedoPath & "[{|}}" & arrCategories(lngIndex), _
                 GetItemCount:="modBBGalleriesRibCon.GetItemCount", _
                 GetItemLabel:="modBBGalleriesRibCon.GetItemLabel", _
                 Action:="modBBGalleriesRibCon.GalleryOnAction", _
                 screentip:="Click to refresh this teamplate/gallery menu.")
          Next lngIndex
          fcnGenerateDM_Content = strXML & "</menu>"
  End Select
lbl_Exit:
  Set oTmp = Nothing
  Set oBBTs = Nothing
  Set oBBC = Nothing
  Exit Function
End Function

Public Function XMLBuild(ByVal ControlType As String, ByVal Id As String, _
                         ByVal label As String, Optional ByVal ImageMso As String = "", _
                         Optional ByVal image As String, _
                         Optional ByVal GetImage As String, _
                         Optional ByVal Size As String = "", _
                         Optional ByVal ItemSize As String = "", _
                         Optional ByVal Action As String = "", _
                         Optional ByVal content As String = "", _
                         Optional ByVal Tag As String = "", _
                         Optional ByVal screentip As String = "", _
                         Optional ByVal supertip As String = "", _
                         Optional ByVal Columns As String, _
                         Optional ByVal GetItemCount As String, _
                         Optional ByVal GetItemLabel As String = "", _
                         Optional ByVal bCloseControl = "True") As String
'This function helps eliminate some of the madness and frustration trying to build
'and dynmamic menu XML string.
Dim strXMLBuild As String
  
  strXMLBuild = "<" & ControlType & " " & vbNewLine & _
                "    id=""" & Id & """ " & vbNewLine & _
                "    label=""" & label & """ " & vbNewLine
  If ImageMso <> "" Then strXMLBuild = strXMLBuild & "    imageMso=""" & ImageMso & """ " & vbNewLine
  If image <> "" Then strXMLBuild = strXMLBuild & "    image=""" & image & """ " & vbNewLine
  If GetImage <> "" Then strXMLBuild = strXMLBuild & "    getImage=""" & GetImage & """ " & vbNewLine
  If Size <> "" Then strXMLBuild = strXMLBuild & "    size=""" & Size & """ " & vbNewLine
  If ItemSize <> "" Then strXMLBuild = strXMLBuild & "    itemSize=""" & ItemSize & """ " & vbNewLine
  If Action <> "" Then strXMLBuild = strXMLBuild & "    onAction=""" & Action & """ " & vbNewLine
  If content <> "" Then strXMLBuild = strXMLBuild & "    getContent=""" & content & """ " & vbNewLine
  If Tag <> "" Then strXMLBuild = strXMLBuild & "    tag=""" & Tag & """"
  If Columns <> "" Then strXMLBuild = strXMLBuild & "    columns=""" & Columns & """"
  If GetItemCount <> "" Then strXMLBuild = strXMLBuild & "    getItemCount=""" & GetItemCount & """"
  If GetItemLabel <> "" Then strXMLBuild = strXMLBuild & "    getItemLabel=""" & GetItemLabel & """"
  If screentip <> "" Then strXMLBuild = strXMLBuild & "    screentip=""" & screentip & """"
  If supertip <> "" Then strXMLBuild = strXMLBuild & "    supertip=""" & supertip & """"
  If bCloseControl Then
    XMLBuild = strXMLBuild & "/>" & vbNewLine
  Else
    XMLBuild = strXMLBuild & ">" & vbNewLine
  End If
lbl_Exit:
  Exit Function
End Function


' InQuest injected base64 decoded content
' Szjej
' LaO>
' FjY^
' bzWH
' FjY^
' Szjej

INQUEST-PP=macro
