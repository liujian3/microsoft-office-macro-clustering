Attribute VB_Name = "Module1"
Sub ShowPass()

    UserForm1.Show

End Sub
Attribute VB_Name = "Module2"
Public Sub ProtectUnprotect(pwd As String, ColShowHide As Boolean, Protect As Boolean, Automation As Boolean)

' Turn off application events to prevent problems with the page updating
Application.EnableEvents = False


If Automation = True Then
    Call UncheckAuto
    Else
    Call CheckAuto
End If

If ColShowHide = False And Protect = False Then
    Call Unprotect(pwd)
    Call ColUnhide
    GoTo finish
End If

If ColShowHide = True And Protect = True Then
    Call ColHide(pwd)
    Call ProtectOnly(pwd)
    GoTo finish
End If

If ColShowHide = False And Protect = True Then
    Call ProtectOnly(pwd)
    GoTo finish
End If

If ColShowHide = True And Protect = False Then
    Call ColHide(pwd)
    GoTo finish
End If

finish:

' Turn application events back on
Application.EnableEvents = True

' Give the status bar back to Excel
Application.StatusBar = False

End Sub

Private Sub ColHide(pwd)
Dim col As Long
Dim TabNum As Long
Dim HideArray As Variant

' Size the hide array as appropriate
ReDim HideArray(1 To 28, 1 To 5)

'If the array element is blank then do nothing so only populate the array elements that are needed.
' Column 1 of HideArray is the first column to hide (column A, ser num column)
' Column 2 or HideArray is the second set of columns to hide (I - X)
' Column 3 of HideArray is the third set of columns to hide (AB - AH, lite tab only, automation filter column)
' Column 4 of HideArray is the fourth set of columns to hide (automation filter column)
' Column 5 of HideArray is the cell pointer value
' This sets set up the unique values, the rest are common so they are in a loop after these
HideArray(1, 5) = "A1" ' Copyright
HideArray(2, 5) = "A1" ' Terms of Use
HideArray(3, 5) = "A1" ' Instructions
HideArray(4, 5) = "A1" ' Dashboard
HideArray(5, 1) = "A1" ' Business Info (ser num
HideArray(5, 2) = "E1:G1" ' Business Info (formulas)
HideArray(5, 5) = "D4" ' Bus info landing
HideArray(6, 1) = "A1" ' Documentation (ser num)
HideArray(6, 5) = "C3" ' Documentation landing
HideArray(23, 1) = "A1" ' Cloud tab ser num column
HideArray(23, 2) = "K1:Z1" ' Cloud tab formula columns
HideArray(23, 3) = "AB1" ' Cloud tab extra real estate
HideArray(23, 4) = "AD1" ' Cloud tab Filter column
HideArray(23, 5) = "B1" ' Cloud tab landing
HideArray(24, 5) = "A1" ' Additional Questions landing
HideArray(25, 5) = "A1" ' Glossary landing
HideArray(26, 5) = "A1" ' Version History landing
HideArray(27, 5) = "D6" ' Formula Notes landing
HideArray(28, 1) = "A1:D1" ' Full first columns
HideArray(28, 5) = "E1" ' Full landing
' Fill the array with the coiumns to hide using a loop for Lite --> Q question tabs
For col = 7 To 22 Step 1
    HideArray(col, 1) = "A1" ' ser num colunm to hide
    HideArray(col, 2) = "I1:Z1" ' formula columns
    HideArray(col, 3) = "AB1" ' Filter column
    HideArray(col, 5) = "B1" ' landing
Next col
' These are the hidden columns on the Lite tab, the array values get overritten in the above loop, so we have to update
' the array here with these values
HideArray(7, 3) = "AB1:AH1" ' Lite, extra formulas

' Select each tab in the workbook and apply the values in the HideArray to each tab
For TabNum = 1 To ThisWorkbook.Sheets.Count Step 1 'thisworkbook.Sheets.Count is the number of tabs in the open master SIG
    For col = 1 To 5 Step 1 ' loop through the hide array and hide columns as necessary
        If HideArray(TabNum, col) <> "" Then
            If col < 5 Then
                ThisWorkbook.Worksheets(TabNum).Unprotect Password:=pwd
                ThisWorkbook.Worksheets(TabNum).Select
                ' Now hide only the columns pointed to by HideArray
                ThisWorkbook.Worksheets(TabNum).Range(HideArray(TabNum, col)).EntireColumn.Hidden = True
            Else ' If we are on the fourth column of HideArray move the cell pointer to the cell in HideArray
                ThisWorkbook.Worksheets(TabNum).Unprotect Password:=pwd
                ThisWorkbook.Worksheets(TabNum).Select
                ThisWorkbook.Worksheets(TabNum).Range(HideArray(TabNum, col)).Select
            End If
        Else ' Do nothing
        End If
    Next col
    ' Turn off all of the autofilters
    If ThisWorkbook.Worksheets(TabNum).AutoFilterMode Then ThisWorkbook.Worksheets(TabNum).AutoFilterMode = False
    ' Delete the Master text from the Formula notes tab
    If TabNum = 27 Then ThisWorkbook.Worksheets(TabNum).Cells(6, 4) = ""
Next TabNum

' move to the first worksheet
ThisWorkbook.Worksheets(1).Select

End Sub

Private Sub ColUnhide()
Dim TabNum As Long

For TabNum = 1 To ThisWorkbook.Sheets.Count Step 1 'thisworkbook.Sheets.Count is the number of tabs in the open master SIG
    If ThisWorkbook.Worksheets(TabNum).ProtectContents = False Then
        ThisWorkbook.Worksheets(TabNum).Select
        ThisWorkbook.Worksheets(TabNum).Cells.EntireColumn.Hidden = False
        ThisWorkbook.Worksheets(TabNum).Cells.EntireRow.Hidden = False
    Else
    GoTo pwprot
    End If
Next TabNum

' move to the first worksheet
ThisWorkbook.Worksheets(1).Select

Exit Sub

pwprot:
MsgBox ("This sheet is password protected, remove the password befor unhiding the columns")

End Sub

Private Sub ProtectOnly(pwd As String)
Dim TabNum As Long
Dim WBName As String

For TabNum = 1 To ThisWorkbook.Sheets.Count Step 1 'thisworkbook.Sheets.Count is the number of tabs in the open master SIG
    ThisWorkbook.Worksheets(TabNum).Select
    ' Turn off all of the autofilters
    If ThisWorkbook.Worksheets(TabNum).AutoFilterMode Then ThisWorkbook.Worksheets(TabNum).AutoFilterMode = False
    ThisWorkbook.Worksheets(TabNum).Protect Password:=pwd
Next TabNum

' move to the first worksheet
ThisWorkbook.Worksheets(1).Select

End Sub

Private Sub Unprotect(pwd As String)
Dim TabNum As Long
    
For TabNum = 1 To ThisWorkbook.Sheets.Count Step 1 'thisworkbook.Sheets.Count is the number of tabs in the open master SIG
    ThisWorkbook.Worksheets(TabNum).Select
    ThisWorkbook.Worksheets(TabNum).Unprotect Password:=pwd
Next TabNum

' move to the first worksheet
ThisWorkbook.Worksheets(1).Select

End Sub
Private Sub UncheckAuto()

For TabNum = 7 To 23 Step 1 'thisworkbook.Sheets.Count is the number of tabs in the open master SIG
    ThisWorkbook.Worksheets(TabNum).Select
    If ThisWorkbook.Worksheets(TabNum).CheckBox1.Value = True Then ThisWorkbook.Worksheets(TabNum).CheckBox1.Value = False
Next TabNum

' move to the first worksheet
ThisWorkbook.Worksheets(1).Select

End Sub
Private Sub CheckAuto()

For TabNum = 7 To 23 Step 1 'thisworkbook.Sheets.Count is the number of tabs in the open master SIG
    ThisWorkbook.Worksheets(TabNum).Select
    If ThisWorkbook.Worksheets(TabNum).CheckBox1.Value = False Then ThisWorkbook.Worksheets(TabNum).CheckBox1.Value = True
Next TabNum

' move to the first worksheet
ThisWorkbook.Worksheets(1).Select

End Sub
Public Sub SheetSelected(FormOff As Long)
'--------------------------------------------------------------------
' This sub is called when ever the sheet is selected. As quick as possible, it will gather the responses and
' additional information from the Lite tab and write the responses and additional information to the detail
' tab. It creates two arrays to make sure this routine is as quick as possible.
'--------------------------------------------------------------------
Dim EndCell As String
Dim L1Array As Variant
Dim L1Lastrow As Long
Dim LastRow As Long
Dim LocalArray As Variant
Dim ProtectState As Boolean
Dim QuesVal As Boolean
Dim row As Long
Dim row1 As Long
Dim StartCell As String
Dim WriteArray As Variant

'Turn off screen updating
Application.ScreenUpdating = False

' Autofilters don't work on protected sheets, so unprotect the sheet if it's protected
' Keep the value of the current sheet protection, we don't want to protect it if it's not protected when we finish
ProtectState = ActiveSheet.ProtectContents

' Only unprotect a protected sheet
If ProtectState = True Then ActiveSheet.Unprotect Password:=Worksheets("Formula Notes").Range("B44").Value

' Turn off all of the filters we will apply the filters in a minute if the checkbox is active
ActiveSheet.AutoFilterMode = False

' Check for the worksheet automation checkbox. If it's checked then leave
If ActiveSheet.CheckBox1.Value = True Then GoTo DontFilter

'--------------------------------------------------------------------
' Lookup the L1 values when the workdsheet is slelected and write
' them to their coorosponding detail questions
'--------------------------------------------------------------------
' Get the last row of the current sheet
LastRow = ActiveSheet.UsedRange.Rows.Count
' And the last row of the L1 Sheet
L1Lastrow = Worksheets("Lite").UsedRange.Rows.Count

'--------------------------------------------------------------------
' First get the responses from the Lite tab
'--------------------------------------------------------------------
' Get the starting cell address for the Lite sheet
StartCell = Worksheets("Lite").Cells(6, 1).Address
' Get the ending cell address for the Lite sheet
EndCell = Worksheets("Lite").Cells(L1Lastrow, 5).Address

' Resize the L1 array with the number or rows we will be capturing and 6 columns. We need the serial numbers and the responses
ReDim L1Array(0 To L1Lastrow - 5, 0 To 5) As Variant

' Get the values from the Lite tab into L1 array
L1Array = Worksheets("Lite").Range(StartCell, EndCell)

'--------------------------------------------------------------------
' Then get the local serial numbers and responses
'--------------------------------------------------------------------
' Get the starting cell address for the local sheet
StartCell = ActiveSheet.Cells(5, 1).Address
' Get the ending cell address for the local sheet get all of the info all the way to the HL answer column
EndCell = ActiveSheet.Cells(LastRow, 5).Address

' Make the number of rows in L1 array to the number or rows we will be capturing and 6 columns.
ReDim LocalArray(0 To LastRow - 4, 0 To 5) As Variant

' Get the values from the local tab into local array
LocalArray = ActiveSheet.Range(StartCell, EndCell)

' Start QuesVal false if we have an update from the Lite tab turn it true
QuesVal = False

'--------------------------------------------------------------------
' Compare the two arrays and see if there are any matches, if so
' write the contrnts of the L1 array to the local array
'--------------------------------------------------------------------
'Start looping through the localarray to look for a match
For row = 1 To UBound(LocalArray) Step 1
    'start looping through the L1 array to look for a match
    For row1 = 1 To UBound(L1Array) Step 1
        ' if they match...
        If LocalArray(row, 1) = L1Array(row1, 1) Then
            'check to see if there is any local content first don't want to overwrite that
            If LocalArray(row, 4) = "" Then
                If LocalArray(row, 5) = "" Then
                    LocalArray(row, 4) = L1Array(row1, 4)
                    LocalArray(row, 5) = L1Array(row1, 5)
                    ' Update QuesVal if there was a match
                    QuesVal = True
                    Else
                End If
            End If
        End If
    Next row1
Next row

' Check to see if there are any matching responses in the L1 tab by checking QuesValue
If QuesVal = False Then GoTo FilterOn ' Nothing on the L1 tab then no reason to create or write the arrays just hide the rows

'--------------------------------------------------------------------
' Crate the write array with only the responses and additional
' Information fields
'--------------------------------------------------------------------
ReDim WriteArray(1 To UBound(LocalArray), 1 To 2)

' Populate the write array with the updated local array we only need the response and additional informaton columns
For row = 1 To UBound(LocalArray) Step 1
    WriteArray(row, 1) = LocalArray(row, 4)
    WriteArray(row, 2) = LocalArray(row, 5)
Next row

'--------------------------------------------------------------------
' Write the updated values to the local tab starting at the first Response
' column (column D) and ending at the last Additional Information column (column E).
'--------------------------------------------------------------------
' Where are we starting from
StartCell = ActiveSheet.Cells(5, 4).Address
' Where are we ending
EndCell = ActiveSheet.Cells(LastRow, 5).Address
'Write the contents of the write array to the tab
ActiveSheet.Range(StartCell, EndCell) = WriteArray

FilterOn:
'--------------------------------------------------------------------
' Hide all of the child rows when this workdsheet is slected
'--------------------------------------------------------------------
ActiveSheet.Range(Cells(4, FormOff), Cells(LastRow, FormOff)).AutoFilter
ActiveSheet.Range(Cells(4, FormOff), Cells(LastRow, FormOff)).AutoFilter field:=1, Criteria1:=1, Operator:=xlOr, Criteria2:=2

DontFilter:
'--------------------------------------------------------------------
' Check to see if the tab was password protected when we first started. If it was protected, protected it back
' if it wasn't protected don't protect it.
'--------------------------------------------------------------------
If ProtectState = True Then ActiveSheet.Protect Password:=Worksheets("Formula Notes").Range("B44").Value

' Give control back to the user
Application.ScreenUpdating = True

End Sub
Public Sub SheetDelta(FormOff As Long)
'--------------------------------------------------------------------
' This sub will run anytime a change is made to the tab.
' It will use the autofilter in column AB to filter the tab
' so No or N/A questions are hidden.
'--------------------------------------------------------------------
Dim LastRow As Long
Dim ProtectState As Boolean

' Check for the worksheet automation checkbox. If it's checked then leave
If ActiveSheet.CheckBox1.Value = True Then GoTo DontFilter

'Turn off screen updating
Application.ScreenUpdating = False

' Autofilters don't work on protected sheets, so unprotect the sheet if it's already protected
' Get the value of the current sheet protection, we don't want to protect it if it's not protected now
ProtectState = ActiveSheet.ProtectContents

' Check for for sheet password protection, if it's protected we need to unprotect before we can use filter.
If ProtectState = True Then ActiveSheet.Unprotect Password:=Worksheets("Formula Notes").Range("B44").Value

' Get the last row of the current sheet
LastRow = ActiveSheet.UsedRange.Rows.Count

' Filter the tab on the values in the filter column
ActiveSheet.Range(Cells(4, FormOff), Cells(LastRow, FormOff)).AutoFilter
ActiveSheet.Range(Cells(4, FormOff), Cells(LastRow, FormOff)).AutoFilter field:=1, Criteria1:=1, Operator:=xlOr, Criteria2:=2

' Check to see if the tab was password protected, if it was then re-protect the sheet
If ProtectState = True Then ActiveSheet.Protect Password:=Worksheets("Formula Notes").Range("B44").Value

' Give control back to the user
Application.ScreenUpdating = True

DontFilter:

End Sub
Attribute VB_Name = "Sheet01"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet02"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet03"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet04"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet05"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet06"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet08"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet09"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 28
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CheckBox1_Click()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 30
' For any change to the checkbox make sure to update the sheet
Call SheetSelected(FormOff)

End Sub

Private Sub Worksheet_Activate()
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 30
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

End Sub
Private Sub Worksheet_Change(ByVal target As Range)
Dim FormOff As Long

' Set this to the column where the autofilters will be applied, tabs A - Q = 28, tab V = 30
FormOff = 30
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff)

End Sub
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal target As Range)
Dim TabNum As Long

' Check all automation boxes on all of the tabs when Master is selected
If Range("Master") = "Master" Then
    For TabNum = 7 To 23 Step 1 'thisworkbook.Sheets.Count is the number of tabs in the open master SIG
        ThisWorkbook.Worksheets(TabNum).Select
        If ThisWorkbook.Worksheets(TabNum).CheckBox1.Value = False Then ThisWorkbook.Worksheets(TabNum).CheckBox1.Value = True
    Next TabNum
End If

' move back to the formula notes worksheet
ThisWorkbook.Worksheets(27).Select

End Sub
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{84B2D44F-5632-5249-8760-52957245AEB8}{C3FDC175-068A-BF45-964C-4970AA44F246}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub Automation_Click()

End Sub

Private Sub ColHide_Click()

End Sub

Private Sub CommandButton1_Click()

Call ProtectUnprotect(TextBox1, ColHide, Protect, Automation)

Unload Me

End Sub

Private Sub protect_Click()

End Sub

Private Sub UserForm_Click()

End Sub


INQUEST-PP=macro
