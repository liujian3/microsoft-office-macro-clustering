Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
End Sub
Attribute VB_Name = "Modul1"

Sub CreatePivot()
Attribute CreatePivot.VB_Description = "Makro am 14.03.2002 von Christian Gmeiner aufgezeichnet"
Attribute CreatePivot.VB_ProcData.VB_Invoke_Func = " \n14"
'
' CreatePivot Makro
' Makro am 14.03.2002 von Christian Gmeiner erstellt
'
Dim iLand As Integer

'   Land ermitteln
'   1031 = Deutschland
'   3079 = |fffd|sterreich
'   5127 = Liechtenstein
'   4103 = Luxemburg
'   2055 = Schweiz
    iLand = Application.LanguageSettings.LanguageID(msoLanguageIDInstall)

    On Error GoTo fehlerbehandlung
    
    Application.ScreenUpdating = False
    
    Worksheets("Database").Select
    Rows("1:1").Font.Bold = True
    Rows("2:2").Font.Bold = False
    Cells.Select
    ActiveWorkbook.PivotCaches.Add(SourceType:=xlDatabase, SourceData:= _
        "Database!$A:$N").CreatePivotTable TableDestination:=Range("Pivot!F1"), TableName _
        :="PivotTable1"
    Worksheets("Pivot").Select
    ActiveSheet.PivotTables("PivotTable1").SmallGrid = False
    
'   Sprachabh|fffd|ngige Verarbeitung der Pivottabelle
    If iLand = 1031 Or iLand = 3079 Or iLand = 5127 Or _
       iLand = 4103 Or iLand = 2055 Then                   'deutsch
       
      ActiveSheet.PivotTables("PivotTable1").AddFields RowFields:=Array("Main PG", "PG", "Article", _
        "Description", "Daten"), ColumnFields:="Qty.", _
        PageFields:="Name"
      With ActiveSheet.PivotTables("PivotTable1")
        .ColumnGrand = False
        .RowGrand = False
        .PivotFields("Qty.").PivotItems("(Leer)").Visible = False
        .PivotFields("Main PG").Subtotals = _
          Array(False, False, False, False, False, False, False, False, False, False, False, False)
        .PivotFields("PG").Subtotals = _
          Array(False, False, False, False, False, False, False, False, False, False, False, False)
        .PivotFields("Article").Subtotals = _
          Array(False, False, False, False, False, False, False, False, False, False, False, False)
        .PivotFields("Description").Subtotals = _
          Array(False, False, False, False, False, False, False, False, False, False, False, False)
      End With
      With ActiveSheet.PivotTables("PivotTable1").PivotFields("Price")
        .Orientation = xlDataField
        .Position = 1
        .Function = xlProduct
      End With
      With ActiveSheet.PivotTables("PivotTable1").PivotFields("Produkt - Price")
        .NumberFormat = "#,##0.00"
      End With

    Else              'Englisch, andere Sprachen
    
      ActiveSheet.PivotTables("PivotTable1").AddFields RowFields:=Array("Main PG", "PG", "Article", _
        "Description", "Data"), ColumnFields:="Qty.", _
        PageFields:="Name"
      With ActiveSheet.PivotTables("PivotTable1")
        .ColumnGrand = False
        .RowGrand = False
        .PivotFields("Qty.").PivotItems("(blank)").Visible = False
        .PivotFields("Main PG").Subtotals = _
          Array(False, False, False, False, False, False, False, False, False, False, False, False)
        .PivotFields("PG").Subtotals = _
          Array(False, False, False, False, False, False, False, False, False, False, False, False)
        .PivotFields("Article").Subtotals = _
          Array(False, False, False, False, False, False, False, False, False, False, False, False)
        .PivotFields("Description").Subtotals = _
          Array(False, False, False, False, False, False, False, False, False, False, False, False)
      End With
      With ActiveSheet.PivotTables("PivotTable1").PivotFields("Price")
        .Orientation = xlDataField
        .Position = 1
        .Function = xlProduct
      End With
      With ActiveSheet.PivotTables("PivotTable1").PivotFields("Product of Price")
        .NumberFormat = "#,##0.00"
      End With
      
    End If
    
'   Bef|fffd|llen der Zus|fffd|tzlichen Angaben |fffd|ber sverweis
    spalte = 1
    Range("H4").Select
    Selection.End(xlDown).Select
    ende = ActiveCell.Row
    
    Cells(5, spalte).FormulaR1C1 = "=VLOOKUP(RC[+" & 8 - spalte & "],Database!C3:C11,4,0)"
    spalte = spalte + 1
    Cells(5, spalte).FormulaR1C1 = "=VLOOKUP(RC[+" & 8 - spalte & "],Database!C3:C11,5,0)"
    spalte = spalte + 1
    Cells(5, spalte).FormulaR1C1 = "=VLOOKUP(RC[+" & 8 - spalte & "],Database!C3:C11,6,0)"
    spalte = spalte + 1
    Cells(5, spalte).FormulaR1C1 = "=VLOOKUP(RC[+" & 8 - spalte & "],Database!C3:C11,8,0)"
    spalte = spalte + 1
    Cells(5, spalte).FormulaR1C1 = "=VLOOKUP(RC[+" & 8 - spalte & "],Database!C3:C11,9,0)"
    Range(Cells(5, spalte - 4), Cells(5, spalte)).Select
    Selection.AutoFill Destination:=Range(Cells(5, spalte - 4), Cells(ende, spalte))
    
    Range("A4").Value = Range("Database!F1").Value
    Range("B4").Value = Range("Database!G1").Value
    Range("C4").Value = Range("Database!H1").Value
    Range("D4").Value = Range("Database!J1").Value
    Range("E4").Value = Range("Database!K1").Value
   
    Rows("4:4").Font.Bold = True
   
    Columns("A:E").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Application.CutCopyMode = False
    Range("F5").Select

    GoTo ende
        
fehlerbehandlung:
'  Application.DisplayAlerts = False
'  Worksheets("Pivot").Delete
'  Application.DisplayAlerts = True
  Err.Clear
  GoTo ende:
  
ende:
    Application.DisplayAlerts = False
    Sheets("Text").Delete
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
End Sub

Sub PriceSheetCat()
'
' Arbeitsblatt "Database" in "PriceSheet" horizontal |fffd|bertragen
'
' ab01 20.10.2011 Variantenartikel eingebaut
' ab14 20.06.2013 Feld HERKL mit ausgeben. Ticket#2013060610001961
' ab15 13.06.2014 Zusatzfeld Preislistentyp l|fffd|schen
' ab16 20.02.2015 Bei den Produktgruppen kann Product am Anfang oder am Ende stehen

Const sText1 = "unknown"
Dim iZeileOrg     As Integer
Dim iZeile        As Integer
Dim iSpalte       As Integer
Dim iPos          As Integer   '+ab16
Dim i             As Long
Dim iFindZeile    As Long
Dim sMaterialOrg  As String
Dim sMaterial     As String
Dim bFehler       As Boolean
Dim bAbbruch      As Boolean
Dim sFind         As Object
Dim sFindTxt      As Object
Dim Text          As String
Dim sAusgVersion  As String
Dim sTest         As String
Dim sPHG          As String
Dim sKey          As String
Dim sKeyOrg       As String   'ab01

'   Bildschirmupdate aus
    Application.ScreenUpdating = False

'   |fffd|bergabebereich lesen und dann l|fffd|schen
    sAusgVersion = ActiveSheet.Cells(1, 2).Value
    Rows("1:9").Delete Shift:=xlUp
    Range("A1").Select
    
'   Logik darf nur f|fffd|r AS und PE verwendet werden, Rest EXIT
'   Juliane 15.01.2010
    If sAusgVersion = "" Then
'     Bildschirmupdate ein
      Application.ScreenUpdating = True
      Exit Sub
    End If

'   neues Arbeitsblatt anlegen
    Sheets("Database").Copy After:=Sheets("Database")
    Sheets("Database (2)").Name = "PriceSheet"
    Columns("X:X").Delete  'diese Spalte wird nicht ben|fffd|tigt
    Range("A1").Select
    Cells.Select

'   Daten sortieren
'   Selection.Sort Key1:=Range("I2"), Order1:=xlAscending, Header:=xlYes, _ abo080428
'       OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom        abo080428
'    Selection.Sort Key1:=Range("C2"), Order1:=xlAscending, Key2:=Range("I2") _ ab01
'        , Order1:=xlAscending, Header:=xlYes, _                                ab01
'        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom           ab01
    Selection.Sort Key1:=Range("C2"), Order1:=xlAscending, _
                   Key2:=Range("A2"), Order1:=xlAscending, _
                   Key3:=Range("I2"), Order1:=xlAscending, _
                   Header:=xlYes, OrderCustom:=1, MatchCase:=False, _
                   Orientation:=xlTopToBottom
        
    Selection.Sort Key1:=Range("M2"), Order1:=xlAscending, Key2:=Range("L2") _
        , Order2:=xlAscending, Key3:=Range("D2"), Order3:=xlAscending, Header:= _
        xlYes, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
        
        
'   Spalten vertauschen
'   Diese beiden Zeilen wegen Fehler rausgenommen lt. Meusburger Roman abo080428
'   Columns("T:V").Cut
'   Columns("BA:BC").Insert Shift:=xlToRight

'   Columns("O:Q").Delete    'abo080428
'   Columns("O:U").Delete    'abo080428
    Columns("O:T").Delete    'abo080912
    
'   neue Daten zur Seite kopieren damit nicht   'abo080912
'   das ganze Programm umgestellt werden muss   'abo080912
    Columns("O:AZ").Insert Shift:=xlToRight     'abo080912

    Columns("F:F").Cut
    Columns("A:A").Insert Shift:=xlToRight
    Columns("G:G").Cut
    Columns("B:B").Insert Shift:=xlToRight
    Columns("H:H").Cut
    Columns("C:C").Insert Shift:=xlToRight
    Columns("J:K").Cut
    Columns("D:E").Insert Shift:=xlToRight
    Columns("M:M").Cut
    Columns("F:F").Insert Shift:=xlToRight
    Columns("M:M").Cut
    Columns("G:G").Insert Shift:=xlToRight
    Columns("J:K").Cut
    Columns("H:H").Insert Shift:=xlToRight
    Columns("M:M").Cut
    Columns("J:J").Insert Shift:=xlToRight
    Columns("M:M").Cut
    Columns("K:K").Insert Shift:=xlToRight
    Columns("N:N").Cut
    Columns("F:F").Insert Shift:=xlToRight
    Columns("H:H").Cut
    Columns("O:O").Insert Shift:=xlToRight

'   |fffd|berschrift erstellen
    Cells(1, 10).Value = "Qty.1"
    For iSpalte = 2 To 8
      Cells(1, 11 + 2 * iSpalte).Value = "Qty." & iSpalte
      Cells(1, 12 + 2 * iSpalte).Value = "Price"
    Next
    Cells(1, 29).Value = "Qty."
    Cells(1, 30).Value = "MSP"
    
    iZeileOrg = 2
    iZeile = 3
    iSpalte = 15
    bFehler = False
    sMaterial = Cells(iZeile, 8)
    sKey = Cells(iZeile, 12)   'ab01
'   Staffeln zur Seite kopieren
    Do
      sMaterialOrg = Cells(iZeileOrg, 8)
      sKeyOrg = Cells(iZeileOrg, 12)   'ab01 begin
            
'     Sonderbehandlung von Variantenmaterial
      If sMaterialOrg = 27000000 Then
'       Artikelbezeichnung durch Variantenbez. ersetzen
        Cells(iZeileOrg, 9).Value = Cells(iZeileOrg, 12).Value
        
'       Artikelnummer unsichtbar machen
        Cells(iZeileOrg, 8).NumberFormat = ";;;"
      End If
      
'      If sMaterialOrg = sMaterial Then   'ab01 end
      If sMaterialOrg = sMaterial And sKeyOrg = sKey Then
'       Werte markieren
        Range(Cells(iZeile, 10), Cells(iZeile, 11)).Copy
      
'       Werte in Zielbereich kopieren
        If Cells(iZeile, 10).Value < 1000000 And iSpalte < 29 Then
'           normale Staffeln rausschreiben
            Cells(iZeileOrg, iSpalte).Select
            ActiveSheet.Paste
            iSpalte = iSpalte + 2
        Else
          If Cells(iZeile, 10).Value < 1000000 Then
'           Wenn zu viele Spalten pro Material vorhanden
            Cells(iZeileOrg, 29).Value = "zu viele Spalten"
            bFehler = True
          ElseIf Not bFehler Then
'           MVP rausschreiben
            Cells(iZeileOrg, 29).Select
            ActiveSheet.Paste
          End If
        End If
        Rows(iZeile).Delete Shift:=xlUp
      Else
        If Cells(iZeileOrg, 10).Value >= 1000000 Then
'         nur MVP vorhanden
'         Werte markieren
          Range(Cells(iZeileOrg, 10), Cells(iZeileOrg, 11)).Cut
         
'         MVP rausschreiben
          Cells(iZeileOrg, 29).Select
          ActiveSheet.Paste
        End If
        
        iZeileOrg = iZeileOrg + 1
        iZeile = iZeile + 1
        iSpalte = 15
        bFehler = False
      End If
    
      sMaterial = Cells(iZeile, 8)
      sKey = Cells(iZeile, 12)    'ab01
    Loop Until sMaterial = ""
    
'   letzten Datensatz auf MVP pr|fffd|fen
    If Cells(iZeile - 1, 10).Value >= 1000000 Then
'     nur MVP vorhanden
'     Werte markieren
      Range(Cells(iZeile - 1, 10), Cells(iZeile - 1, 11)).Cut
         
'     MVP rausschreiben
      Cells(iZeile - 1, 29).Select
      ActiveSheet.Paste
    End If
        
'   Spalten einf|fffd|rben und Zahlenformat bestimmen
    Range("K:K,P:P,R:R,T:T,V:V,X:X,Z:Z,AB:AB").Select
'   blau
    With Selection.Interior
        .ColorIndex = 37
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
    End With
    Selection.NumberFormat = "#,##0.00"
    
    Columns("AD:AD").Select
'   orange
    With Selection.Interior
        .ColorIndex = 40
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
    End With
    Selection.NumberFormat = "#,##0.00"
    
    Range("AC:AC,AA:AA,Y:Y,W:W,U:U,S:S,Q:Q,O:O,J:J").Select
'   gelb
    With Selection.Interior
        .ColorIndex = 19
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
    End With
    Selection.NumberFormat = "#,##0.00"
    
'   Spalte D und E ganzzahlig
    Range("D:E").Select
    Selection.NumberFormat = "#,##0"
    
'   Gitternetz zeichnen
    Cells.Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlHairline
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlHairline
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlHairline
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlHairline
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlHairline
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Weight = xlHairline
        .ColorIndex = xlAutomatic
    End With
    
'   Spalten auf optimale Breite und ausblenden und Fett
    Rows("1:1").Select
    Selection.Font.Bold = True
    Cells.EntireColumn.AutoFit
    Range("B:B,L:N").Select
    Selection.EntireColumn.Hidden = True
    
'   verschobene Daten einbauen              'abo080912
    Columns("BA:BC").Cut                    'abo080912
    Columns("A:A").Insert Shift:=xlToRight  'abo080912
    Columns("A:C").AutoFit                  'abo080912
    Columns("BD").Cut                       'ab14
    Columns("M").Insert Shift:=xlToRight    'ab14
    Columns("BE").Delete                    'ab15
    
'   bk01 - Replace EEI (Celma) with Last call date
    Columns("BE").Cut                       'bk01
    Columns("C").Insert Shift:=xlToRight    'bk01
    Columns("C").AutoFit                    'bk01
    Columns("D").Delete                     'bk01

    Range("A1").Select
    Cells.Select
'   zuvor noch umsortieren
    Selection.Sort Key1:=Range("I2"), Order1:=xlAscending, Key2:=Range("J2") _
        , Order2:=xlAscending, Header:= _
        xlYes, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
   
'   Gliederung einf|fffd|gen
'   *********************************************************************
'   zus|fffd|tzliche Spalte f|fffd|r Summenwerte der Teilergebnisfunktion
    iSpalte = Range("IV1").End(xlToLeft).Column + 1
    Cells(1, iSpalte).Select
    ActiveCell.FormulaR1C1 = "neu"

'   Teilergebnis bilden
'   !!!!Wenn eine Produkthauptgruppe nur eine Produktgruppe enth|fffd|lt wird KEINE
'       zweite Gliederungsebene eingef|fffd|gt!!!!
    Application.DisplayAlerts = False   'Popup ignorieren
    Range("H2").Subtotal GroupBy:=9, Function:=xlProduct, TotalList:=Array(iSpalte), _
        Replace:=True, PageBreaks:=False, SummaryBelowData:=False
    Selection.CurrentRegion.Rows.Ungroup
    Rows("2:2").Delete Shift:=xlUp
    Range("H3").Select
    Selection.Subtotal GroupBy:=10, Function:=xlProduct, TotalList:=Array(iSpalte), _
        Replace:=False, PageBreaks:=False, SummaryBelowData:=False
    Application.DisplayAlerts = True   'Popup ignorieren
        
'   Gruppe umbenennen, damit Sprachunabh|fffd|nging
'   EN -> XX
    Columns("I:J").Replace What:="Product", Replacement:="Prrroduct", LookAt:=xlPart _
      , SearchOrder:=xlByRows, MatchCase:=False
'   DE -> XX
    Columns("I:J").Replace What:="Produkt", Replacement:="Prrroduct", LookAt:=xlPart _
      , SearchOrder:=xlByRows, MatchCase:=False
'   IT -> XX
    Columns("I:J").Replace What:="Prodotto", Replacement:="Prrroduct", LookAt:=xlPart _
      , SearchOrder:=xlByRows, MatchCase:=False
'   FR -> XX
    Columns("I:J").Replace What:="Produit", Replacement:="Prrroduct", LookAt:=xlPart _
      , SearchOrder:=xlByRows, MatchCase:=False
'   TR -> XX
    Columns("I:J").Replace What:="|fffd|arp?m", Replacement:="Prrroduct", LookAt:=xlPart _
      , SearchOrder:=xlByRows, MatchCase:=False
        
'   GruppenZeilen tauschen
    Columns("I:I").Select
    Do
      Set sFind = Selection.Find(What:="Prrroduct", After:=ActiveCell, LookIn:=xlFormulas, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False)
'       MatchCase:=False, SearchFormat:=False)
        
      If Not sFind Is Nothing And sFind.Address <> aFindAdresse _
         Or Not bAbbruch Then
        i = sFind.Row
        
        If iFindZeile = 0 Then
          iFindZeile = sFind.Row
          bAbbruch = False
        Else
          bAbbruch = True
        End If
        
        sTest = Cells(i - 1, 10).Value
        If InStr(1, sTest, "Prrroduct", vbTextCompare) > 0 Then
          Cells(i - 1, 10).Cut Destination:=Cells(i, 10)
          Cells(i, 9).Cut Destination:=Cells(i - 1, 9)
          Cells(i, 9).Activate
        
'          If aFindAdresse = "" Then
'            aFindAdresse = sFind.Address
'            bAbbruch = False
'          Else
'            bAbbruch = True
'          End If
        Else
          Cells(i + 1, 9).Activate
        End If
      End If
    Loop Until sFind.Row <= iFindZeile And bAbbruch
                    
'   zus|fffd|tzlich erzeugte Summenspalte l|fffd|schen
    Columns(iSpalte).ClearContents
   
'   |fffd|berschriftentexte aus Arbeitsblatt Text |fffd|bernehmen
    Do
'     nach Prod suchen
      Columns("I:J").Select
      Set sFind = Selection.Find(What:="Prrrod", After:=ActiveCell, LookIn:=xlFormulas, LookAt _
          :=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
          False)
        
      If Not sFind Is Nothing Then
'       |fffd|berschriftentext in Arbeitsblatt Text suchen
        iPos = InStr(1, sFind, "Prrrod", vbTextCompare)                   '+ab16 begin
        
        If iPos = 1 Then
'           Prrroduct am Anfang
            sWert = Mid(sFind, iPos + 10)
        Else
'           Prrroduct am Ende
            sWert = Mid(sFind, 1, iPos - 2)
        End If                                                            '+ab16 end
 
'        sWert = Mid(sFind, 1, InStr(1, sFind, " ", vbTextCompare) - 1)   '-ab16
        
        If sFind.Column = 9 Then
          sPHG = sWert
          sKey = sWert
        Else
          sKey = sPHG & sWert
        End If
        
        Sheets("Text").Select
        Columns(1).Select
        Set sFindTxt = Selection.Find(What:=sKey, After:=ActiveCell, LookIn:=xlFormulas, LookAt:= _
            xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
   
        If Not sFindTxt Is Nothing Then
          Text = Cells(sFindTxt.Row, 4).Value
        Else
          Text = sText1
        End If
    
        Sheets("PriceSheet").Select
        Range(sFind.Address).Value = Text
      End If
    Loop Until sFind Is Nothing
    
'   kontrolle auf falsche Produktgruppen-Texte
    Columns("I:J").Select
    Set sFind = Selection.Find(What:=sText1, After:=ActiveCell, LookIn:=xlFormulas, LookAt _
          :=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
          False)
          
    If Not sFind Is Nothing Then
      Rows("2:2").Insert Shift:=xlDown
      Range("I2").Select
      ActiveCell.FormulaR1C1 = "Unknown product groups!"
      With Selection.Font
        .Name = "Arial"
        .Size = 20
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ColorIndex = 3
      End With
    End If
    
'   nicht ben|fffd|tigte Arbeitsbl|fffd|tter l|fffd|schen
    Application.DisplayAlerts = False
    Sheets("Database").Delete
    Sheets("Text").Delete
    Sheets("Prices").Delete
    Application.DisplayAlerts = True
'    Selection.End(xlToLeft).Select   'ab14
    Range("A1").Select

'   Anzeige der Ausgabeversion anpassen
    If sAusgVersion = "AS" Or sAusgVersion = "PI" Then
        Columns("A:C").Select
        Selection.Cut
        Columns("AI:AK").Select     'ab14
        Selection.Insert Shift:=xlToRight
        Columns("D:E").Select
        Selection.Cut
        Columns("K:L").Select       'ab14
        Selection.Insert Shift:=xlToRight
        Columns("C:C").Select
        Selection.Cut
        Columns("K:K").Select       'ab14
        Selection.Insert Shift:=xlToRight
        Columns("A:A").Select
        Selection.Cut
        Columns("K:K").Select       'ab14
        Selection.Insert Shift:=xlToRight
        Columns("X:AC").Select      'ab14
        Selection.Cut
        Columns("AI:AN").Select     'ab14
        Selection.Insert Shift:=xlToRight
        Range("A1").Select
    End If

'   Bildschirmupdate ein
    Application.ScreenUpdating = True
    
End Sub

'Sub PriceSheet()
''
'' Arbeitsblatt "Database" in "PriceSheet" horizontal |fffd|bertragen
''
'Const sText1 = "unknown"
'Dim iZeileOrg     As Integer
'Dim iZeile        As Integer
'Dim iSpalte       As Integer
'Dim i             As Integer
'Dim sMaterialOrg  As String
'Dim sMaterial     As String
'Dim bFehler       As Boolean
'Dim sFind         As Object
'Dim sFindTxt      As Object
'Dim Text          As String
'Dim sPHG          As String
'Dim sKey          As String
'
''   Bildschirmupdate aus
'    Application.ScreenUpdating = False
'
''   neues Arbeitsblatt anlegen
'    Sheets("Database").Copy After:=Sheets("Database")
'    Sheets("Database (2)").Name = "PriceSheet"
'    Range("A1").Select
'    Cells.Select
'
''   Daten sortieren
'    Selection.Sort Key1:=Range("I2"), Order1:=xlAscending, Header:=xlGuess, _
'        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
'    Selection.Sort Key1:=Range("M2"), Order1:=xlAscending, Key2:=Range("L2") _
'        , Order2:=xlAscending, Key3:=Range("D2"), Order3:=xlAscending, Header:= _
'        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
'
''   Spalten vertauschen
'    Columns("O:Q").Delete
'    Columns("F:F").Cut
'    Columns("A:A").Insert Shift:=xlToRight
'    Columns("G:G").Cut
'    Columns("B:B").Insert Shift:=xlToRight
'    Columns("H:H").Cut
'    Columns("C:C").Insert Shift:=xlToRight
'    Columns("J:K").Cut
'    Columns("D:E").Insert Shift:=xlToRight
'    Columns("M:M").Cut
'    Columns("F:F").Insert Shift:=xlToRight
'    Columns("M:M").Cut
'    Columns("G:G").Insert Shift:=xlToRight
'    Columns("J:K").Cut
'    Columns("H:H").Insert Shift:=xlToRight
'    Columns("M:M").Cut
'    Columns("J:J").Insert Shift:=xlToRight
'    Columns("M:M").Cut
'    Columns("K:K").Insert Shift:=xlToRight
'    Columns("N:N").Cut
'    Columns("F:F").Insert Shift:=xlToRight
'    Columns("H:H").Cut
'    Columns("O:O").Insert Shift:=xlToRight
'
''   |fffd|berschrift erstellen
'    Cells(1, 10).Value = "Qty.1"
'    For iSpalte = 2 To 8
'      Cells(1, 11 + 2 * iSpalte).Value = "Qty." & iSpalte
'      Cells(1, 12 + 2 * iSpalte).Value = "Price"
'    Next
'    Cells(1, 29).Value = "Qty."
'    Cells(1, 30).Value = "MSP"
'
'    iZeileOrg = 2
'    iZeile = 3
'    iSpalte = 15
'    bFehler = False
'    sMaterial = Cells(iZeile, 8)
''   Staffeln zur Seite kopieren
'    Do
'      sMaterialOrg = Cells(iZeileOrg, 8)
'
'      If sMaterialOrg = sMaterial Then
''       Werte markieren
'        Range(Cells(iZeile, 10), Cells(iZeile, 11)).Copy
'
''       Werte in Zielbereich kopieren
'        If Cells(iZeile, 10).Value < 1000000 And iSpalte < 29 Then
''           normale Staffeln rausschreiben
'            Cells(iZeileOrg, iSpalte).Select
'            ActiveSheet.Paste
'            iSpalte = iSpalte + 2
'        Else
'          If Cells(iZeile, 10).Value < 1000000 Then
''           Wenn zu viele Spalten pro Material vorhanden
'            Cells(iZeileOrg, 29).Value = "zu viele Spalten"
'            bFehler = True
'          ElseIf Not bFehler Then
''           MVP rausschreiben
'            Cells(iZeileOrg, 29).Select
'            ActiveSheet.Paste
'          End If
'        End If
'        Rows(iZeile).Delete Shift:=xlUp
'      Else
'        If Cells(iZeileOrg, 10).Value >= 1000000 Then
''         nur MVP vorhanden
''         Werte markieren
'          Range(Cells(iZeileOrg, 10), Cells(iZeileOrg, 11)).Cut
'
''         MVP rausschreiben
'          Cells(iZeileOrg, 29).Select
'          ActiveSheet.Paste
'        End If
'
'        iZeileOrg = iZeileOrg + 1
'        iZeile = iZeile + 1
'        iSpalte = 15
'        bFehler = False
'      End If
'
'      sMaterial = Cells(iZeile, 8)
'    Loop Until sMaterial = ""
'
''   letzten Datensatz auf MVP pr|fffd|fen
'    If Cells(iZeile - 1, 10).Value >= 1000000 Then
''     nur MVP vorhanden
''     Werte markieren
'      Range(Cells(iZeile - 1, 10), Cells(iZeile - 1, 11)).Cut
'
''     MVP rausschreiben
'      Cells(iZeile - 1, 29).Select
'      ActiveSheet.Paste
'    End If
'
''   Spalten einf|fffd|rben und Zahlenformat bestimmen
'    Range("K:K,P:P,R:R,T:T,V:V,X:X,Z:Z,AB:AB").Select
''   blau
'    With Selection.Interior
'        .ColorIndex = 37
'        .Pattern = xlSolid
'        .PatternColorIndex = xlAutomatic
'    End With
'    Selection.NumberFormat = "#,##0.00"
'
'    Columns("AD:AD").Select
''   orange
'    With Selection.Interior
'        .ColorIndex = 40
'        .Pattern = xlSolid
'        .PatternColorIndex = xlAutomatic
'    End With
'    Selection.NumberFormat = "#,##0.00"
'
'    Range("AC:AC,AA:AA,Y:Y,W:W,U:U,S:S,Q:Q,O:O,J:J").Select
''   gelb
'    With Selection.Interior
'        .ColorIndex = 19
'        .Pattern = xlSolid
'        .PatternColorIndex = xlAutomatic
'    End With
'    Selection.NumberFormat = "#,##0.00"
'
''   Spalte D und E ganzzahlig
'    Range("D:E").Select
'    Selection.NumberFormat = "#,##0"
'
''   Gitternetz zeichnen
'    Cells.Select
'    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
'    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
'    With Selection.Borders(xlEdgeLeft)
'        .LineStyle = xlContinuous
'        .Weight = xlHairline
'        .ColorIndex = xlAutomatic
'    End With
'    With Selection.Borders(xlEdgeTop)
'        .LineStyle = xlContinuous
'        .Weight = xlHairline
'        .ColorIndex = xlAutomatic
'    End With
'    With Selection.Borders(xlEdgeBottom)
'        .LineStyle = xlContinuous
'        .Weight = xlHairline
'        .ColorIndex = xlAutomatic
'    End With
'    With Selection.Borders(xlEdgeRight)
'        .LineStyle = xlContinuous
'        .Weight = xlHairline
'        .ColorIndex = xlAutomatic
'    End With
'    With Selection.Borders(xlInsideVertical)
'        .LineStyle = xlContinuous
'        .Weight = xlHairline
'        .ColorIndex = xlAutomatic
'    End With
'    With Selection.Borders(xlInsideHorizontal)
'        .LineStyle = xlContinuous
'        .Weight = xlHairline
'        .ColorIndex = xlAutomatic
'    End With
'
''   Spalten auf optimale Breite und ausblenden und Fett
'    Rows("1:1").Select
'    Selection.Font.Bold = True
'    Cells.EntireColumn.AutoFit
'    Range("B:B,L:N").Select
'    Selection.EntireColumn.Hidden = True
'
''   Gliederung einf|fffd|gen
''   *********************************************************************
''   zus|fffd|tzliche Spalte f|fffd|r Summenwerte der Teilergebnisfunktion
'    iSpalte = Range("IV1").End(xlToLeft).Column + 1
'    Cells(1, iSpalte).Select
'    ActiveCell.FormulaR1C1 = "neu"
'
''   zuvor noch umsortieren
'    Selection.Sort Key1:=Range("F2"), Order1:=xlAscending, Key2:=Range("G2") _
'        , Order2:=xlAscending, Header:= _
'        xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
'
''   Teilergebnis bilden
'    Range("E8").Subtotal GroupBy:=6, Function:=xlProduct, TotalList:=Array(iSpalte), _
'        Replace:=True, PageBreaks:=False, SummaryBelowData:=False
'    Selection.CurrentRegion.Rows.Ungroup
'    Rows("2:2").Delete Shift:=xlUp
'    Range("E8").Select
'    Selection.Subtotal GroupBy:=7, Function:=xlProduct, TotalList:=Array(iSpalte), _
'        Replace:=False, PageBreaks:=False, SummaryBelowData:=False
'
''   in erster Teilergebniszeile die Ergebniszeilen tauschen
'    Range("F3").Cut Destination:=Range("F2")
'    Range("G2").Cut Destination:=Range("G3")
'
''   zus|fffd|tzlich erzeugte Summenspalte l|fffd|schen
'    Columns(iSpalte).ClearContents
'
''   |fffd|berschriftentexte aus Arbeitsblatt Text |fffd|bernehmen
'    Do
''     nach Prod suchen
'      Columns("F:G").Select
'      Set sFind = Selection.Find(What:="Prod", After:=ActiveCell, LookIn:=xlFormulas, LookAt _
'          :=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
'          False)
'
'      If Not sFind Is Nothing Then
''       |fffd|berschriftentext in Arbeitsblatt Text suchen
'        sWert = Mid(sFind, 1, InStr(1, sFind, " ", vbTextCompare) - 1)
'
'        If sFind.Column = 6 Then
'          sPHG = sWert
'          key = sWert
'        Else
'          key = sPHG & sWert
'        End If
'
'        Sheets("Text").Select
'        Columns(1).Select
'        Set sFindTxt = Selection.Find(What:=sWert, After:=ActiveCell, LookIn:=xlFormulas, LookAt:= _
'            xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
'
'        If Not sFindTxt Is Nothing Then
'          Text = Cells(sFindTxt.Row, 4).Value
'        Else
'          Text = sText1
'        End If
'
'        Sheets("PriceSheet").Select
'        Range(sFind.Address).Value = Text
'      End If
'    Loop Until sFind Is Nothing
'
''   kontrolle auf falsche Produktgruppen-Texte
'    Columns("F:G").Select
'    Set sFind = Selection.Find(What:=sText1, After:=ActiveCell, LookIn:=xlFormulas, LookAt _
'          :=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
'          False)
'
'    If Not sFind Is Nothing Then
'      Rows("2:2").Insert Shift:=xlDown
'      Range("F2").Select
'      ActiveCell.FormulaR1C1 = "Unknown product groups!"
'      With Selection.Font
'        .Name = "Arial"
'        .Size = 20
'        .Strikethrough = False
'        .Superscript = False
'        .Subscript = False
'        .OutlineFont = False
'        .Shadow = False
'        .Underline = xlUnderlineStyleNone
'        .ColorIndex = 3
'      End With
'    End If
'
''   nicht ben|fffd|tigte Arbeitsbl|fffd|tter l|fffd|schen
'    Application.DisplayAlerts = False
'    Sheets("Database").Delete
'    Sheets("Text").Delete
'    Sheets("Prices").Delete
'    Application.DisplayAlerts = True
'    Selection.End(xlToLeft).Select
'    Range("A1").Select
'
''   Bildschirmupdate ein
'    Application.ScreenUpdating = True
'
'
'End Sub

Sub Database()
'
' Autor: Artur Bohle
' Erzeugt aus dem PriceSheet wieder die Database
'
Dim iZeile  As Integer
Dim iSpalte As Integer
Dim iZeileE As Integer
Dim sWert   As String

' Bildschirmupdate aus
  Application.ScreenUpdating = False
        
' Gliederung l|fffd|schen
  Cells.Select
  Selection.Rows.Ungroup
  Selection.Rows.Ungroup
' Zeilen + Spalten einblenden
  Selection.EntireColumn.Hidden = False
  Selection.EntireRow.Hidden = False
    
' Summenzeilen der Gliederung l|fffd|schen
  iZeileE = Range("A65536").End(xlUp).Row
  iZeile = 2
  Do
    If Cells(iZeile, 6).Font.Bold = True Or Cells(iZeile, 7).Font.Bold = True Then
      Rows(iZeile).Delete Shift:=xlUp
      iZeileE = iZeileE - 1
    Else
      iZeile = iZeile + 1
    End If
  Loop Until iZeile > iZeileE
        
' Spalten in Databaseformat bringen
  Cells.Select
  Cells.EntireColumn.AutoFit
  Columns("L:M").Cut
  Columns("A:B").Insert Shift:=xlToRight
  Columns("J:K").Cut
  Columns("C:D").Insert Shift:=xlToRight
  Columns("M:M").Cut
  Columns("E:E").Insert Shift:=xlToRight
  Columns("M:M").Cut
  Columns("I:I").Insert Shift:=xlToRight
  Columns("M:M").Cut
  Columns("L:L").Insert Shift:=xlToRight
  
' |fffd|berschrift korrigieren
  Cells(1, 9) = "Qty."

  iSpalte = 15
  iZeile = 2
' Spalten in darunterliegende Zeile kopieren
  Do
    Do
      sWert = Cells(iZeile, iSpalte).Value
      If sWert <> "" Then
        If Cells(iZeile, 9) <> "" Then
          Rows(iZeile).Copy
          iZeile = iZeile + 1
          Rows(iZeile).Insert Shift:=xlDown
        End If
        
        Cells(iZeile, iSpalte).Copy Destination:=Cells(iZeile, 9)
        iSpalte = iSpalte + 1
        Cells(iZeile, iSpalte).Copy Destination:=Cells(iZeile, 5)
      End If
     
      iSpalte = iSpalte + 1
      
    Loop Until iSpalte >= 30
  
    iZeile = iZeile + 1
    iSpalte = 15
  
  Loop Until Cells(iZeile, 3) = ""
  
' Arbeitsblatt umbenennen und alte Daten l|fffd|schen
  Sheets("PriceSheet").Name = "Database"
  Columns("O:AD").Delete Shift:=xlToLeft
  Selection.End(xlToLeft).Select
  Range("A1").Select

' Bildschirmupdate ein
  Application.ScreenUpdating = True
  
End Sub

Sub Create_MSP_Italy()
'
' Create_MSP_Italy Makro
' Makro am 14.01.2005 von Christian Gmeiner erstellt
'
'
'   |fffd|bergabebereich lesen und dann l|fffd|schen
'   sAusgVersion = ActiveSheet.Cells(1, 2).Value
    Rows("1:9").Delete Shift:=xlUp
    Range("A1").Select

    Cells.Select
    Selection.Sort Key1:=Range("L2"), Order1:=xlAscending, Header:=xlYes, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    Columns("A:B").Select
    Selection.Delete Shift:=xlToLeft
    Columns("G:G").Select
    Selection.Delete Shift:=xlToLeft
    Columns("I:I").Select
    Selection.Delete Shift:=xlToLeft
    Columns("K:M").Select
    Selection.Delete Shift:=xlToLeft
    Columns("G:G").Select
    Selection.Insert Shift:=xlToRight
    Selection.Insert Shift:=xlToRight
    Selection.Insert Shift:=xlToRight
    Selection.Insert Shift:=xlToRight
    Selection.Insert Shift:=xlToRight
    Selection.Insert Shift:=xlToRight
    Range("C1").Select
    ActiveCell.FormulaR1C1 = "MSP / PA"
    Range("G1").Select
    ActiveCell.FormulaR1C1 = "PB"
    Range("H1").Select
    ActiveCell.FormulaR1C1 = "PC"
    Range("I1").Select
    ActiveCell.FormulaR1C1 = "PD"
    Range("J1").Select
    ActiveCell.FormulaR1C1 = "PE"
    Range("K1").Select
    ActiveCell.FormulaR1C1 = "PF"
    Range("L1").Select
    ActiveCell.FormulaR1C1 = "PG"
    Range("G2").Select
    ActiveCell.FormulaR1C1 = "=RC[-4]*1.05"
    Range("H2").Select
    ActiveCell.FormulaR1C1 = "=RC[-5]*1.08"
    Range("I2").Select
    ActiveCell.FormulaR1C1 = "=RC[-6]*1.12"
    Range("J2").Select
    ActiveCell.FormulaR1C1 = "=RC[-7]*1.15"
    Range("K2").Select
    ActiveCell.FormulaR1C1 = "=RC[-8]*1.18"
    Range("L2").Select
    ActiveCell.FormulaR1C1 = "=RC[-9]*1.25"
    Range("A2").Select
    Selection.End(xlDown).Select
    zeile = ActiveCell.Row
    Range("G2:L2").Select
    Selection.AutoFill Destination:=Range(Cells(2, 7), Cells(zeile, 12))
    Columns("C:C").Select
    Selection.NumberFormat = "0.00"
    Columns("G:L").Select
    Selection.NumberFormat = "0.00"
    Columns("D:L").ColumnWidth = 6.25
    Columns("B:B").EntireColumn.AutoFit
    Columns("M:N").ColumnWidth = 8.71
    Columns("Q:Q").ColumnWidth = 6.43
    Columns("C:C").ColumnWidth = 8.71
    
'   Teilergebnisse anzeigen
    Columns("O:P").Select
    Selection.Cut
    Columns("A:A").Select
    Selection.Insert Shift:=xlToRight
    Selection.Insert Shift:=xlToRight
        
'   Keyspalte f|fffd|r Sverweis erstellen
    Range("A2").Select
    ActiveCell.FormulaR1C1 = "=RC[2]&RC[1]"
    Selection.AutoFill Destination:=Range(Cells(2, 1), Cells(zeile, 1))
    Range(Cells(2, 1), Cells(zeile, 1)).Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Application.CutCopyMode = False
    
    Columns("C:C").Select
    Selection.Delete Shift:=xlToLeft
                
    Range("A1").CurrentRegion.Select
    Selection.Subtotal GroupBy:=1, Function:=xlCount, TotalList:=Array(2), _
        Replace:=True, PageBreaks:=False, SummaryBelowData:=False

'   Formel f|fffd|r Produktgruppe einf|fffd|gen
    Columns("C:C").Insert Shift:=xlShiftRight
    Range("C3").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(LEN(RC[-2])>6,VLOOKUP(R[1]C[-2],Text!C[-2]:C[1],4,0),RC[1])"
        
    ende = Range("A2").End(xlDown).Row
    Selection.AutoFill Destination:=Range(Cells(3, 3), Cells(ende, 3))

    Columns("A:A").Copy
    Columns("C:C").PasteSpecial Paste:=xlFormats, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Application.CutCopyMode = False
    
'   |fffd|berschrift |fffd|bernehmen
    Cells(1, 3).Value = Cells(1, 4).Value

    Columns("A:B").Hidden = True
    Columns("D:D").Hidden = True

    Range("A1").Select
End Sub

Sub Create_Quotation()

    Dim Antwort As Integer
    
    'Sprache ermitteln
    If Range("D15").Value = "Preis" Then       'Deutsch
      text_quote = "Angebot"
      text_valid = "G|fffd|ltigkeit:"
      text_newpr = "Neuer Preis"
      text_oldpr = "Aktueller Preis"
      text_comme = "Kommentar"
    ElseIf Range("D15").Value = "Prix" Then   'Franz|fffd|sisch
      text_quote = "Offre"
      text_valid = "Validit|fffd|:"
      text_newpr = "Nouveaux Prix"
      text_oldpr = "Prix actuel"
      text_comme = "Commentaire"
    Else                                      'Englisch
      text_quote = "Quotation"
      text_valid = "Validity:"
      text_newpr = "New Price"
      text_oldpr = "Current Price"
      text_comme = "Comment"
    End If
    
    Range("C1").FormulaR1C1 = text_quote
    Range("C1").Font.Size = 22
    Rows("14:14").Select
    Selection.Insert Shift:=xlDown
    Selection.Insert Shift:=xlDown
    Range("C15").FormulaR1C1 = text_valid
    Columns("I:I").Select
    Selection.Insert Shift:=xlToRight
    Range("I17").FormulaR1C1 = text_newpr
    Range("D17").FormulaR1C1 = text_oldpr
    Columns("M:M").Select
    Selection.Insert Shift:=xlToRight
    Range("M17").FormulaR1C1 = text_comme
    
    Columns("I:I").Select
    Selection.NumberFormat = "#,##0.00"

    'Spalte mit Staffelmenge l|fffd|schen falls leer
    If IsEmpty(Range("H18:H65536").Value) Then
      Columns("H:H").Select
      Selection.Delete
    End If
    
'   zu importierende Spalte markieren
    Columns("I:I").Interior.ColorIndex = 6
    Antwort = MsgBox("Marked column for import.", vbInformation, "Import")

'   zu importierende Spalte demarkieren
    Columns("I:I").Interior.ColorIndex = xlNone
    
    Range("A1").Select
End Sub

Sub Prepare_Upload()
'
' Prepare_Upload Makro
' Creates the database for upload Program ZVKONDBI
'
Dim iZeilen As Integer    'abo 15.9.06

    angebot = Not IsEmpty(Range("C3").Value)
    
    kunnr = Range("B3").Value
    If angebot Then
      Rows("1:17").Select
    Else
      Rows("1:15").Select
    End If
    Selection.Delete Shift:=xlUp
    If angebot Then
      Columns("J:Z").Select
    Else
      Columns("H:Z").Select
    End If
    Selection.Delete Shift:=xlToLeft
    ActiveWindow.LargeScroll ToRight:=-1
    Columns("A:A").Select
    Selection.Delete Shift:=xlToLeft
    Cells.Select
    If angebot Then
    Selection.Sort Key1:=Range("H1"), Order1:=xlAscending, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    Else
    Selection.Sort Key1:=Range("A1"), Order1:=xlAscending, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    End If
    
'   Materialtext l|fffd|schen
    Columns("B:B").Select
    Selection.Delete Shift:=xlToLeft
    Columns("A:A").Select
    Selection.Insert Shift:=xlToRight
    Range("A1").Select
    ActiveCell.Value = kunnr
    
'   Bei Angebot die Spalte H auf C kopieren
    If angebot Then
      Columns("H:H").Select
      Selection.Copy
      Columns("C:C").Select
      Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
          False, Transpose:=False
      Columns("H:H").Select
      Application.CutCopyMode = False
      Selection.Delete Shift:=xlToLeft
    End If
    
'   Spalten C und G richtig formatieren
    Columns("C:C").Select
    Selection.NumberFormat = "0.00"
    Columns("G:G").Select
    Selection.NumberFormat = "0"
    
'   Kunde eintragen und |fffd|berfl|fffd|ssige Zeilen l|fffd|schen   abo 15.9.06
    Range("B1").Select
    iZeilen = Selection.End(xlDown).Row
    Range("A1").Select
    Selection.AutoFill Destination:=Range(Cells(1, 1), _
              Cells(iZeilen, 1))
    Cells.Select
    Selection.Sort Key1:=Range("D1"), Order1:=xlAscending, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    Range("D1").Select
    Rows(Selection.End(xlDown).Row + 1).Select
    Range(Selection, Selection.End(xlDown)).Select
    Selection.Delete Shift:=xlUp
    Range("A1").Select
End Sub

Sub PriceS()
'   Im Tabellenblatt Prices die Texte der Produktgruppen aus dem
'   Tabellenblatt Text |fffd|bernehmen.
'   ab01 28.10.2011 Variantenmaterial ausblenden
'   bk01 10.04.2018 Neue Spalte "Last call date" - CTASK0057335

Const sText1 = ""
Dim iZeile        As Long
Dim iZeileEnd     As Long      'ab01
Dim sFind         As Object
Dim sFindTxt      As Object
Dim Text          As String

'   Bildschirmupdate aus
    Application.ScreenUpdating = False
      
'   |fffd|berschriftentexte aus Arbeitsblatt Text |fffd|bernehmen
    Range("A1").Select
    Selection.End(xlDown).Select
    iZeile = ActiveCell.Row
    Do
      sWert = Cells(iZeile, 1).Value & Cells(iZeile, 2).Value
      Sheets("Text").Select
      Columns(1).Select
      Set sFindTxt = Selection.Find(What:=sWert, After:=ActiveCell, LookIn:=xlFormulas, LookAt:= _
          xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
   
      If Not sFindTxt Is Nothing Then
        Text = Cells(sFindTxt.Row, 4).Value
      Else
        Text = sText1
      End If
    
      Sheets("Prices").Select
      Cells(iZeile, 3).Value = Text
      Cells(iZeile, 3).Font.Bold = True
      Selection.End(xlDown).Select
      iZeile = ActiveCell.Row
      Columns("N").ColumnWidth = 18       'bk01
    Loop Until iZeile >= 65536
    
    iZeile = Range("A1").End(xlDown).Row     'ab01 begin
    iZeileEnd = Range("B65536").End(xlUp).Row
    Do
      iZeile = iZeile + 1
      sWert = Cells(iZeile, 2).Value
'     Sonderbehandlung von Variantenmaterial
      If sWert = 27000000 Then
'       Artikelbezeichnung durch Variantenbez. ersetzen
'       Cells(iZeile, 2).Value = Cells(iZeile, 2).Value
        
'       Artikelnummer unsichtbar machen
        Cells(iZeile, 2).NumberFormat = ";;;"
      End If
    Loop Until iZeile = iZeileEnd          'ab01 end
              
'   nicht ben|fffd|tigte Arbeitsbl|fffd|tter l|fffd|schen
    Application.DisplayAlerts = False
    Sheets("Database").Delete
    Sheets("Text").Delete
    Application.DisplayAlerts = True
    Selection.End(xlToLeft).Select
    Range("A1").Select

'   Bildschirmupdate ein
    Application.ScreenUpdating = True
    
End Sub

Sub Prepare_Upload_PE()
'
' Mit diesem Macro wird aus dem MasterPriceList-File Asean
' ein Upload-File erstellt. Struktur wie Prepare_Upload.
'
' Bearbeitet wird das aktive Tabellenblatt.
' - pr|fffd|fen auf doppelte Artikelnummern
' - erstellen eines neuen Tabellenblattes mit der Uploadstruktur
'-----------------------------------------------------------------------
' Artur Bohle 19.11.09
'
' |fffd|nderungen
' ab01 29.09.2011 Spalten im File MasterPriceList pr|fffd|fen
'                 K>M>O>Q>S und J<L<N<P<R falls das nicht zutrifft
'                 in Spalte T Fehler und T1 rot markieren
'                 Preislistentyp CN zugef|fffd|gt
' ab02 11.09.2012 Preislistentyp ME zugef|fffd|gt
' ab03 14.04.2015 Preislistentyp CM und ZA zugef|fffd|gt
' ab04 07.06.2017 Anzahl Staffelpreise dynamisch. CTASK0038940

Dim iZeile, iSpalte As Long         'Quelle
Dim iZZeile, iZSpalte As Long       'Ziel
Dim iAntwort, iEOL As Long
Dim iStaffel As Long                '+ab04
Dim bError As Boolean
Dim sPTyp, sWsOrig, sWsUpload As String

' Zeile 1 und 2 sind Headerzeilen           'ab01 begin
  If IsNumeric(Range("B1")) Or IsNumeric(Range("B2")) Then
    iAntwort = MsgBox("Line 1 and 2 should be headerlines.", vbExclamation, "Error")
    Exit Sub
  End If                                    'ab01 end

' Daten umsortieren und Duplikate suchen
  Range(Rows("2:2"), Cells(2, 2).End(xlDown)).Select
  Selection.Sort Key1:=Range("B3"), Order1:=xlAscending, Header:=xlYes, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal
        
  Range("B1").Select

' Werte |fffd|berpr|fffd|fen                          'ab01 begin
' K>M>O>Q>S und J<L<N<P<R falls das nicht zutrifft
' Pr|fffd|fung auf Spalte U und T eingebaut      '+ab04
  bError = False
  iZeile = 3
  While ActiveSheet.Cells(iZeile, 2).Value <> ""
'   Falsche Werte oder Staffeln
    If ActiveSheet.Range("K" & iZeile).Value < ActiveSheet.Range("M" & iZeile).Value Or _
       ActiveSheet.Range("M" & iZeile).Value < ActiveSheet.Range("O" & iZeile).Value Or _
       ActiveSheet.Range("O" & iZeile).Value < ActiveSheet.Range("Q" & iZeile).Value Or _
       ActiveSheet.Range("Q" & iZeile).Value < ActiveSheet.Range("S" & iZeile).Value Or _
       (ActiveSheet.Range("S" & iZeile).Value < ActiveSheet.Range("U" & iZeile).Value And _
         ActiveSheet.Range("U" & iZeile).Value > "") Or _
       ActiveSheet.Range("J" & iZeile).Value > ActiveSheet.Range("L" & iZeile).Value Or _
       ActiveSheet.Range("L" & iZeile).Value > ActiveSheet.Range("N" & iZeile).Value Or _
       ActiveSheet.Range("N" & iZeile).Value > ActiveSheet.Range("P" & iZeile).Value Or _
       ActiveSheet.Range("P" & iZeile).Value > ActiveSheet.Range("R" & iZeile).Value Or _
       (ActiveSheet.Range("R" & iZeile).Value > ActiveSheet.Range("T" & iZeile).Value And _
         ActiveSheet.Range("T" & iZeile).Value > "") Then
       
'     fehlerhaften Wert rot markieren
      If ActiveSheet.Range("K" & iZeile).Value < ActiveSheet.Range("M" & iZeile).Value Then
        ActiveSheet.Range("K" & iZeile).Interior.ColorIndex = 3
      ElseIf ActiveSheet.Range("M" & iZeile).Value < ActiveSheet.Range("O" & iZeile).Value Then
        ActiveSheet.Range("M" & iZeile).Interior.ColorIndex = 3
      ElseIf ActiveSheet.Range("O" & iZeile).Value < ActiveSheet.Range("Q" & iZeile).Value Then
         ActiveSheet.Range("O" & iZeile).Interior.ColorIndex = 3
      ElseIf ActiveSheet.Range("Q" & iZeile).Value < ActiveSheet.Range("S" & iZeile).Value Then
         ActiveSheet.Range("Q" & iZeile).Interior.ColorIndex = 3
      ElseIf ActiveSheet.Range("S" & iZeile).Value < ActiveSheet.Range("U" & iZeile).Value Then  '+ab04
         ActiveSheet.Range("S" & iZeile).Interior.ColorIndex = 3                                 '+ab04
      ElseIf ActiveSheet.Range("J" & iZeile).Value > ActiveSheet.Range("L" & iZeile).Value Then
         ActiveSheet.Range("L" & iZeile).Interior.ColorIndex = 3
      ElseIf ActiveSheet.Range("L" & iZeile).Value > ActiveSheet.Range("N" & iZeile).Value Then
         ActiveSheet.Range("N" & iZeile).Interior.ColorIndex = 3
      ElseIf ActiveSheet.Range("N" & iZeile).Value > ActiveSheet.Range("P" & iZeile).Value Then
         ActiveSheet.Range("P" & iZeile).Interior.ColorIndex = 3
      ElseIf ActiveSheet.Range("P" & iZeile).Value > ActiveSheet.Range("R" & iZeile).Value Then
         ActiveSheet.Range("R" & iZeile).Interior.ColorIndex = 3
      ElseIf ActiveSheet.Range("R" & iZeile).Value > ActiveSheet.Range("T" & iZeile).Value Then  '+ab04
         ActiveSheet.Range("T" & iZeile).Interior.ColorIndex = 3                                 '+ab04
      End If
       
'      ActiveSheet.Range("T" & iZeile).Value = "X"              '-ab04
'      ActiveSheet.Range("T1").Interior.ColorIndex = 3          '-ab04
      ActiveSheet.Range("X" & iZeile).Value = "X"               '+ab04
      ActiveSheet.Range("X1").Interior.ColorIndex = 3           '+ab04
      
      bError = True
    End If
    
    iZeile = iZeile + 1
  Wend                                      'ab01 end

  iZeile = 4
  While ActiveSheet.Cells(iZeile, 2).Value <> ""
    If ActiveSheet.Cells(iZeile, 2).Value = ActiveSheet.Cells(iZeile - 1, 2).Value Then
'     Doppelte ArtNr. rot markieren
      ActiveSheet.Range(Cells(iZeile - 1, 2), Cells(iZeile, 2)).Font.ColorIndex = 3
      bError = True
    End If
    
    iZeile = iZeile + 1
  Wend

' Wenn Duplikate oder falsche Werte -> Aussteigen
  If bError = True Then
'    iAntwort = MsgBox("Duplicate item numbers are red or wrong values are marked in column 'T'.",    '-ab04
    iAntwort = MsgBox("Duplicate item numbers are red or wrong values are marked in column 'X'.", _
               vbExclamation, "Error")
    Exit Sub
  End If

  Do
'    sPTyp = UCase(InputBox("Type of pricelist. (AS, CN, PE)", "Pricelist type"))   'ab01, ab02 begin
'  Loop Until sPTyp = "AS" Or sPTyp = "CN" Or sPTyp = "PE" Or sPTyp = ""            'ab01
'    sPTyp = UCase(InputBox("Type of pricelist. (AS, CN, ME, PE)", "Pricelist type"))          '-ab03
'  Loop Until sPTyp = "AS" Or sPTyp = "CN" Or sPTyp = "ME" Or sPTyp = "PE" Or _                '-ab03
'             sPTyp = ""                                                             'ab02 end,'-ab03
    sPTyp = UCase(InputBox("Type of pricelist. (AS, CN, CM, ME, PE, ZA)", "Pricelist type")) '+ab03 begin
  Loop Until sPTyp = "AS" Or sPTyp = "CN" Or sPTyp = "CM" Or sPTyp = "ME" Or _
             sPTyp = "PE" Or sPTyp = "ZA" Or sPTyp = ""                                      '+ab03 end

  If sPTyp <> "" Then
'   Ein richtiger Preislistentyp wurde angegeben -> nun aber los

'   Einf|fffd|gen eines neuen Tabellenblattes f|fffd|r die UploadTabelle
    sWsOrig = ActiveSheet.Name
    Application.Sheets.Add
    sWsUpload = ActiveSheet.Name

'   Header erstellen
    Range("A1").Value = "Cust."
    Range("B1").Value = "Material"
    Range("C1").Value = "Price"
    Range("D1").Value = "Curr."
    Range("E1").Value = "per"
    Range("F1").Value = "UoM"
    Range("G1").Value = "Scale Qty."
    ActiveSheet.Rows(1).Font.Bold = True
    
    iZeile = 3  'Zeile im Originalfile
    iEOL = Sheets(sWsOrig).Range("B2").End(xlDown).Row  'EndOfList
    iStaffel = Sheets(sWsOrig).Range("I2").End(xlToRight).Column           '+ab04
    iZZeile = 2
    For iZeile = 3 To iEOL
'      For iSpalte = 10 To 18 Step 2                                       '-ab04
      For iSpalte = 10 To iStaffel - 1 Step 2                              '+ab04
        Cells(iZZeile, 1).Value = sPTyp & Sheets(sWsOrig).Cells(iZeile, 9).Value   'Cust.
        Cells(iZZeile, 2).Value = Sheets(sWsOrig).Cells(iZeile, 2).Value           'Material
        Cells(iZZeile, 3).Value = Sheets(sWsOrig).Cells(iZeile, iSpalte + 1).Value 'Price
        Cells(iZZeile, 4).Value = Sheets(sWsOrig).Cells(iZeile, 9).Value           'Curr.
        Cells(iZZeile, 5).Value = 1                                                'per
        Cells(iZZeile, 6).Value = Sheets(sWsOrig).Cells(iZeile, 4).Value           'UoM
        Cells(iZZeile, 7).Value = Sheets(sWsOrig).Cells(iZeile, iSpalte).Value     'Scale Qty.
        iZZeile = iZZeile + 1
      Next
    Next

'   Spalten C und G richtig formatieren
    Columns("C:C").NumberFormat = "0.00"
    Columns("G:G").NumberFormat = "0"
    
    iAntwort = MsgBox("Upload records created.", vbInformation, "End of program")
  End If
End Sub

Sub Prepare_Upload_PE_Weekly()
'
' Mit diesem Makro wird das neue SD-File auf die Struktur des alten
' gebracht und dann wird dieses File mit dem bereits bestehenden Makro
' Prepare_Upload_PE weiterverarbeitet.
'
' Aufbau des Files 8 Headerzeilen dann Datenzeilen
' Datenzeile: (A) Artikel, (B) Beschreibung, (C) W|fffd|hrung,
'             (D:L) Menge, Preis abwechseln, (M) MSP-Preis
'-----------------------------------------------------------------------
' Artur Bohle 14.04.2015
'
' |fffd|nderungen
'
Dim lEol As Long

'   |fffd|berfl|fffd|ssige Kopfzeilen l|fffd|schen
    ActiveSheet.Rows("2:7").Delete Shift:=xlUp
    
'   Leere Spalten einf|fffd|gen
    ActiveSheet.Columns("A:A").Insert Shift:=xlToRight
    ActiveSheet.Columns("D:H").Insert Shift:=xlToRight
    
'   Mengeneinheit einf|fffd|llen
    iEOL = Range("B1").End(xlDown).Row
    Range("D3").FormulaR1C1 = "ST"
    Range("D3").AutoFill Destination:=Range("D3", Cells(iEOL, 4))
    
    Call Prepare_Upload_PE
End Sub
Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()
  Call Create_Quotation
  CommandButton1.Visible = False
End Sub


INQUEST-PP=macro
