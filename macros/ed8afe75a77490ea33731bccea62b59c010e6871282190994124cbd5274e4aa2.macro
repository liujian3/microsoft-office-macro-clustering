Attribute VB_Name = "Accessibility"
'-------------------------------------------------------------------------------------------------------------------------------
'---- Routines used for Accessibility support in Default Workbook
'---- The Accessibility flag is read from the Registry (GUI setting)
'---- In Accessibiliy mode a new command bar is created, which supports the functions of the embedded Buttons Info and Filter
'-------------------------------------------------------------------------------------------------------------------------------

Private pAccMode As String

'----- Returns whether application runs in Accessibility mode
Public Property Get paccessibility() As Boolean
    If pAccMode = "" Then
       pAccMode = RegistryGet("General", "AccMode")
       If pAccMode <> "on" Then pAccMode = "off"
    End If
    If pAccMode = "on" Then paccessibility = True Else paccessibility = False
End Property


'----- Returns the CommandBar Menu which is used for Accessibility support
Private Property Get pMenu() As Object
   Dim l_control As CommandBarControl
   Set l_control = Application.CommandBars.FindControl(Tag:="DFWFilter")
   If l_control Is Nothing Then
       Set pMenu = Nothing
   Else
       Set pMenu = l_control.Parent
   End If
End Property

'----- Creates the CommandBar Menu
Sub create_menu()
    Dim ctrlpopup As CommandBarPopup
    Dim ctrlbutton As CommandBarButton
    Dim l_cb As CommandBar
    Dim l_name As String
            
    If Application.CommandBars.FindControl(Tag:="DFWFilter") Is Nothing Then
        Set l_cb = Application.CommandBars.Add(temporary:=True, Name:="Default Workbook")
        Set ctrlbutton = l_cb.Controls.Add(Type:=msoControlButton, temporary:=True)
         With ctrlbutton
            .Caption = "&Filter"
            .Style = msoButtonCaption
            .Tag = "DFWFilter"
        End With
        Set ctrlbutton = l_cb.Controls.Add(Type:=msoControlButton, temporary:=True)
        With ctrlbutton
          .Caption = "&Information"
          .Style = msoButtonCaption
          .Tag = "DFWInfo"
        End With
    End If
    reset_menu
    pMenu.Visible = True
End Sub
'----- Delete the CommandBar Menu
Sub delete_menu()
    Dim l_wb As Workbook
    Dim l_wb_exists As Boolean
    
    l_wb_exists = False
    If Not pMenu Is Nothing Then
' Delete only, when no Default Workbook is available anymore
      For Each l_wb In Application.Workbooks
         If l_wb.FullName <> ThisWorkbook.FullName Then
            If Not l_wb.Worksheets("Table") Is Nothing Then
              l_wb_exists = True
            End If
         End If
      Next l_wb
      If Not l_wb_exists Then
         pMenu.Delete
      End If
    End If
End Sub
'----- Show CommandBar Menu
Sub show_menu()
  If Not pMenu Is Nothing Then
     pMenu.Visible = True
   End If
End Sub
'----- Hide the CommandBar Menu
Sub hide_menu()
   If Not pMenu Is Nothing Then
     pMenu.Visible = False
   End If
End Sub
'----- Reset the CommandBar Menu (e.g. switch to another Workbook)
Sub reset_menu()
   If Not pMenu Is Nothing Then
      If Sheet2.Visible = False Or Sheet2.Shapes("Filter").Visible Then
        With pMenu.Controls("Filter")
           .State = msoButtonUp
           .Parameter = True
           .OnAction = "menu_filter_click"
        End With
      Else
        With pMenu.Controls("Filter")
           .State = msoButtonDown
           .Parameter = False
           .OnAction = "menu_filter_click"
        End With
      End If
      If Sheet2.Visible = False Or Sheet2.Shapes("Info").Visible Then
        With pMenu.Controls("Information")
           .State = msoButtonUp
           .Parameter = True
           .OnAction = "menu_info_click"
        End With
      Else
        With pMenu.Controls("Information")
           .State = msoButtonDown
           .Parameter = False
           .OnAction = "menu_info_click"
        End With
      End If
   End If
End Sub
'----- Action when executing Filter Button in CommandBarMenu
Sub menu_filter_click()
  If pMenu.Controls("Filter").Parameter = "True" Then
     Sheet2.filter_click
     With pMenu.Controls("Filter")
       .State = msoButtonDown
       .Parameter = "False"
   End With
  Else
     Sheet2.filterA_click
     With pMenu.Controls("Filter")
       .State = msoButtonUp
       .Parameter = "True"
   End With
  End If
    
End Sub
'----- Action when executing Info Button in CommandBarMenu
Sub menu_info_click()
  If pMenu.Controls("Information").Parameter = "True" Then
     Sheet2.Info_click
     With pMenu.Controls("Information")
       .State = msoButtonDown
       .Parameter = "False"
   End With
  Else
     Sheet2.InfoA_click
     With pMenu.Controls("Information")
       .State = msoButtonUp
       .Parameter = "True"
   End With
  End If
    
End Sub

Attribute VB_Name = "DefaultWorkbook"
Private pFilterVisible As Boolean
Private pFilterVisibleSet As Boolean
Private pInfoVisible As Boolean
Private pInfoVisibleSet As Boolean
Private pTableVisible As Boolean
Private Const cButtonDist As Integer = 15

'----------------------------------------------------------------------------------------
'--- Setter Methods for ButtonStates
'----------------------------------------------------------------------------------------
Public Sub setTableVisibility(iVisible As Boolean)
  pTableVisible = iVisible
End Sub

Public Sub setFilterVisibility(iVisible As Boolean)
  pFilterVisible = iVisible
  pFilterVisibleSet = True
  
  Call adjustButtons
  Call adjustCells
End Sub

Public Sub setInfoVisibility(iVisible As Boolean)
  pInfoVisible = iVisible
  pInfoVisibleSet = True
  
  Call adjustButtons
  Call adjustCells
End Sub


'----------------------------------------------------------------------------------------
'--- Adjust Visibility and Position of Buttons depending on ButtonState
'----------------------------------------------------------------------------------------
Public Sub adjustButtons()
  Dim lSheet As Worksheet
  Dim lShape As Shape
  Dim lDisplayIcons As Boolean

  On Error Resume Next
  
  'Position Table Buttons relevant to Chart Button in Table Sheet
  Sheet3.Shapes("TableA").Left = Sheet2.Shapes("Chart").Left
  
  For Each lSheet In ThisWorkbook.Sheets()
    'Position Buttons relevant to Chart Button in Table Sheet
    Set lShape = lSheet.Shapes("Filter")
    If Not lShape Is Nothing Then
      lSheet.Shapes("Filter").Left = Sheet2.Shapes("Chart").Left + Sheet2.Shapes("Chart").Width + cButtonDist
    End If
    Set lShape = lSheet.Shapes("FilterA")
    If Not lShape Is Nothing Then
      lSheet.Shapes("FilterA").Left = Sheet2.Shapes("Chart").Left + Sheet2.Shapes("Chart").Width + cButtonDist
    End If
    Set lShape = lSheet.Shapes("Info")
    If Not lShape Is Nothing Then
      lSheet.Shapes("Info").Left = lSheet.Shapes("Filter").Left + lSheet.Shapes("Filter").Width + cButtonDist
    End If
    Set lShape = lSheet.Shapes("InfoA")
    If Not lShape Is Nothing Then
      lSheet.Shapes("InfoA").Left = lSheet.Shapes("Filter").Left + lSheet.Shapes("Filter").Width + cButtonDist
    End If
    
    'Set Filter Button Visibility
    Set lShape = lSheet.Shapes("FilterA")
    If Not lShape Is Nothing Then
      If (pFilterVisible Or (Not pFilterVisibleSet And lSheet.Shapes("FilterA").Visible = msoTrue)) Then
        lSheet.Shapes("Filter").Visible = msoFalse
        lSheet.Shapes("FilterA").Visible = msoCTrue
      Else
        lSheet.Shapes("Filter").Visible = msoCTrue
        lSheet.Shapes("FilterA").Visible = msoFalse
      End If
    End If

    'Set Info Button Visibility
    Set lShape = lSheet.Shapes("InfoA")
    If Not lShape Is Nothing Then
      If (pInfoVisible Or (Not pInfoVisibleSet And lSheet.Shapes("InfoA").Visible = msoTrue)) Then
        lSheet.Shapes("Info").Visible = msoFalse
        lSheet.Shapes("InfoA").Visible = msoCTrue
      Else
        lSheet.Shapes("Info").Visible = msoCTrue
        lSheet.Shapes("InfoA").Visible = msoFalse
      End If
    End If
  Next lSheet
End Sub

'----------------------------------------------------------------------------------------
'--- Adjust Visibility of Filter Area (Columns) and Info Area (Rows) depending on State
'----------------------------------------------------------------------------------------
Sub adjustCells()
  Dim lSheet As Worksheet
  Dim lDisplayIcons As Boolean
  Dim lRange As Range
  Dim lShape As Shape
  
  On Error Resume Next
  
  For Each lSheet In ThisWorkbook.Sheets()
    'determine if Icons are being displayed
    For Each lShape In lSheet.Shapes
      If InStr(1, lShape.Name, "BEx") <> 0 And _
         lShape.TopLeftCell.Column = 4 And lShape.TopLeftCell.Row >= 15 Then
        lDisplayIcons = True
        Exit For
      End If
    Next lShape
      
    Set lShape = lSheet.Shapes("FilterA")
    If Not lShape Is Nothing Then
      If pFilterVisible Or (Not pFilterVisibleSet And lSheet.Shapes("FilterA").Visible = msoTrue) Then
        If lDisplayIcons Then
          lSheet.Range("C1:E1").Columns.Hidden = False
        Else
          lSheet.Range("C1:D1").Columns.Hidden = False
        End If
      Else
        If lDisplayIcons Then
          lSheet.Range("C1:E1").Columns.Hidden = True
        Else
          lSheet.Range("C1:D1").Columns.Hidden = True
        End If
      End If
    End If
 
    Set lShape = lSheet.Shapes("InfoA")
    If Not lShape Is Nothing Then
      If pInfoVisible Or (Not pInfoVisibleSet And lSheet.Shapes("InfoA").Visible = msoTrue) Then
        If lDisplayIcons Then
          lSheet.Range("C5:E11").Rows.Hidden = False
        Else
          lSheet.Range("C5:D11").Rows.Hidden = False
        End If
      Else
        If lDisplayIcons Then
          lSheet.Range("C5:E11").Rows.Hidden = True
        Else
          lSheet.Range("C5:D11").Rows.Hidden = True
        End If
      End If
    End If
  Next lSheet
End Sub

'----------------------------------------------------------------------------------------
'--- Adjust Visibility of Sheet (Table / Chart)
'----------------------------------------------------------------------------------------
Sub adjustSheets()
  On Error Resume Next
  
  If pTableVisible Then
    Sheet2.Visible = xlSheetVisible
    Sheet3.Visible = xlSheetHidden
    Sheet2.Activate
  Else
    Sheet3.Visible = xlSheetVisible
    Sheet2.Visible = xlSheetHidden
    Sheet3.Activate
  End If
  
  adjustCells
  adjustButtons
End Sub

'----------------------------------------------------------------------------------------
'--- Reformat the Filter Area with the correct stlyes
'----------------------------------------------------------------------------------------
Sub setFilterStyle()
  Dim i As Integer
  Dim lRange As Range
  Dim lSheet As Worksheet
  Dim lDisplayIcons As Boolean
  Dim lX2 As Integer
  Dim lShape As Shape
 
  On Error Resume Next
  
 'Calculate Filter-Area
  i = 16
  While Sheet2.Cells(i, 3) <> ""
    i = i + 1
  Wend
 
  'Filter Area
  For Each lSheet In ThisWorkbook.Worksheets
    Set lShape = lSheet.Shapes("FilterA")
    If Not lShape Is Nothing Then
      lDisplayIcons = False
      For Each lShape In lSheet.Shapes
        If InStr(1, lShape.Name, "BEx") <> 0 And lShape.Visible = msoTrue And _
           lShape.TopLeftCell.Column = 4 And lShape.TopLeftCell.Row >= 15 Then
          lDisplayIcons = True
          Exit For
        End If
      Next lShape
          
      If lDisplayIcons Then
        lX2 = 5
        lSheet.Range("E1").Columns.Hidden = False
      Else
        lX2 = 4
        lSheet.Range("E1").Columns.Hidden = True
      End If
          
      'Set the Filter Header Style
      Set lRange = Range(lSheet.Cells(14, 3), lSheet.Cells(14, lX2))
      lRange.ClearFormats
      With lRange
        .Cells(1, 1) = "Filter"
        .Font.Size = 10
        .Font.FontStyle = "Bold"
        .Interior.ColorIndex = 51
        .Interior.Pattern = xlSolid
        .Interior.PatternColorIndex = xlAutomatic
      End With
          
      'Set the Filter Content Style
      Set lRange = Range(lSheet.Cells(15, 3), lSheet.Cells(i - 1, lX2))
      lRange.ClearFormats
      lRange.NumberFormat = "@"
      With lRange.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 47
      End With
      With lRange.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 47
      End With
      With lRange.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 47
      End With
      With lRange.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 47
      End With
      With lRange.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 47
      End With
      With lRange.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 47
      End With
      lRange.Interior.ColorIndex = 2
          
      'Remove existing old content from Filter Area
      l_old = i
      While Sheet2.Cells(l_old, 3) = "" And l_old <= 200
        l_old = l_old + 1
      Wend
      Set lRange = Range(lSheet.Cells(i, 3), lSheet.Cells(l_old - 1, lX2))
      lRange.ClearFormats
    End If
  Next lSheet
End Sub

'----------------------------------------------------------------------------------------
'--- Service Function to get the Name Object back
'----------------------------------------------------------------------------------------
Private Function getName(i_name As String) As Name
  Dim lName As Name
  
  For Each lName In ThisWorkbook.Names
    If lName.Name = i_name Then
      Set getName = lName
      Exit Function
    End If
  Next lName
End Function

'----------------------------------------------------------------------------------------
'--- Call-Back Macro: Executed on Refresh for each Table Item
'----------------------------------------------------------------------------------------
Sub CallBack(ParamArray varname())
  'varname(0): BExExcelItem.DataProvider.Name
  'varname(1): BExExcelItem.Range
  'varname(2): BExExcelItem.Name
  
  'Remember current EnableEvents setting and set to False (disable)!
  '  we need to apply the default formats to the items - nothing else
  Dim lEnableEvents As Boolean
  lEnableEvents = Application.EnableEvents
  Application.EnableEvents = False

  Dim lTitle As String
  Dim lName As Name
  Dim lRange As Range
  Dim lColumn As Integer

  Dim lItem As Integer
  Const cItemGrid As Integer = 1
  Const cItemNavPane As Integer = 2
  
  On Error Resume Next
  
  If InStr(1, varname(2), "GRID") Then
    lItem = cItemGrid
  ElseIf InStr(1, varname(2), "NAVPANEL") Then
    lItem = cItemNavPane
  End If
 
  'Get Workbook Name Object
  '  If Name exists then:
  '    - retrieve old Range of Item
  '    - clear contents and formats of old Range Item
  '    - set new Range of Item
  lTitle = "DF_" & varname(2)
  Set lName = getName(lTitle)
  If Not lName Is Nothing Then
    'Get Items old Range
    Set lRange = lName.RefersToRange
    Set lRange = lRange.Offset(-1, 0).Rows(1)
    'Clear Contents and Formats of Items old Range
    If Not lRange Is Nothing Then
      If lRange.Cells(1, 1).Value = "Table" Then
        lRange.Cells(1, 1).ClearContents
        lRange.ClearFormats
      End If
    End If
    'Save new position of Name Object
    lName.Delete
    ThisWorkbook.Names.Add lTitle, "=" & varname(1).Worksheet.Name & "!" & varname(1).Address
  End If
  
  If lItem = cItemGrid Then
    'Set Table Header Style
    With varname(1).Offset(-1, 0).Rows(1)
      .Font.Size = 10
      .Font.FontStyle = "Bold"
      .Interior.ColorIndex = 51
      .Interior.Pattern = xlSolid
      .Interior.PatternColorIndex = xlAutomatic
      .Cells(1, 1) = "Table"
    End With
  End If
  
  'Currently this callback routine is only called for Grid Items
  'For this reason we have to always render the NavigationPane Item
  If lItem = cItemNavPane Then
    'Set NavigationPane Header Style
    With varname(1).Offset(-1, 0).Rows(1)
      .Cells(1, 1) = "Filter"
      .Font.Size = 10
      .Font.FontStyle = "Bold"
      .Interior.ColorIndex = 51
      .Interior.Pattern = xlSolid
      .Interior.PatternColorIndex = xlAutomatic
    End With
    'Set NavigationPane Dimension Interior Color (white)
    With varname(1).Offset().Columns(1)
      .Interior.ColorIndex = 2
      .Interior.Pattern = xlSolid
      .Interior.PatternColorIndex = xlAutomatic
    End With

    'Default NavigationPane
    '  is always located in Range: Cells(15, 3) + Title(14, 3)
    '  if an item is possibly overlapping the Default NavigationPane then reapply Default NavigationPane
    Dim lX1 As Integer
    Dim lX2 As Integer
    lX1 = varname(1).Offset().Column
    lX2 = varname(1).Offset().Column + varname(1).Offset().Columns.Count - 1
    If (varname(1).Offset().Cells(1, 1).Column = 3 And varname(1).Offset().Cells(1, 1).Row = 15) Or _
       (lX1 >= 3 And lX1 <= 5 Or lX2 >= 3 And lX2 <= 5) Then
      Call setFilterStyle
      Call adjustCells
    End If
  Else
    Call setFilterStyle
    Call adjustCells
  End If
 
  If lItem = cItemGrid Then
    'Set Print Area in Table Worksheet (min Columns A - K)
    If (varname(1).Columns.Count + varname(1).Column > 13) Then
      lColumn = varname(1).Columns.Count + varname(1).Column
    Else
      lColumn = 13
    End If
    varname(1).Worksheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(varname(1).Rows.Count + varname(1).Row, lColumn)).Address
    varname(1).Worksheet.DisplayAutomaticPageBreaks = False
  End If
  
  'Add Accessibility Features
  If Accessibility.paccessibility Then
    Accessibility.reset_menu
    Accessibility.show_menu
  End If
  
  'Reset EnableEvents
  Application.EnableEvents = lEnableEvents

End Sub



Attribute VB_Name = "Service"
'----- routines for registry management

Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" ( _
    ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, _
    ByVal samDesired As Long, phkResult As Long) As Long
Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" ( _
    ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, _
    lpType As Long, lpData As Any, lpcbData As Long) As Long
    ' Note that if you declare the lpData parameter as String, you must pass it ByVal
Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long


Public Function RegistryGet(iSubKeyName As String, _
                            Optional iValueName As String, _
                            Optional iHiveLocalMachine As Boolean) As String
    Const KEY_QUERY_VALUE = &H1
    Dim lHive As Long
    Dim lKeyName As String * 60
    Dim lValName As String * 60
    Dim lRegKey As Long
    Dim lItemType As Long
    Dim lItemLength As Long
    Dim lItemBuffer As String * 255
    
    lKeyName = IIf(iHiveLocalMachine, "Software\", "Software\SAP\") & iSubKeyName & vbNullChar
    lHive = IIf(iHiveLocalMachine, &H80000002, &H80000001)   ' HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER ?
    lValName = iValueName & vbNullChar
    If RegOpenKeyEx(lHive, lKeyName, 0, KEY_QUERY_VALUE, lRegKey) = 0 Then
        lItemType = 1
        lItemLength = 255
        Call RegQueryValueEx(lRegKey, lValName, 0, lItemType, ByVal lItemBuffer, lItemLength)
        If lItemLength > 0 Then RegistryGet = Left(lItemBuffer, lItemLength - 1)
        Call RegCloseKey(lRegKey)
    End If

End Function

Sub Adjust()

Sheet2.Shapes("Info").Width = Sheet2.Shapes("InfoA").Width
Sheet2.Shapes("Info").Height = Sheet2.Shapes("InfoA").Height
Sheet2.Shapes("Info").Top = Sheet2.Shapes("InfoA").Top
Sheet2.Shapes("Info").Left = Sheet2.Shapes("InfoA").Left
Sheet2.Shapes("Info").Visible = msoFalse
Sheet2.Shapes("Info").Visible = msoCTrue
Sheet3.Shapes("Info").Width = Sheet3.Shapes("InfoA").Width
Sheet3.Shapes("Info").Height = Sheet3.Shapes("InfoA").Height
Sheet3.Shapes("Info").Top = Sheet3.Shapes("InfoA").Top
Sheet3.Shapes("Info").Left = Sheet3.Shapes("InfoA").Left
Sheet3.Shapes("Info").Visible = msoFalse
Sheet3.Shapes("Info").Visible = msoCTrue
End Sub



Sub save_wb_invisible()
On Error Resume Next
Dim lWIndow As Window
 
For Each lWIndow In ThisWorkbook.Windows
 lWIndow.Caption = ""
lWIndow.Visible = False
Next
ThisWorkbook.Save
End Sub
Sub Test()
Dim lName As Name
For Each lName In ThisWorkbook.Names
If InStr(lName.Name, "BEx") <> 0 Then
Debug.Print lName.Name
lName.Delete
End If
Next
End Sub



Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub filter_click()
  If (ActiveSheet.ProtectContents = True) Then
    MsgBox "Protected Worksheet: This Option is not availabe"
  Else
    Call DefaultWorkbook.setFilterVisibility(True)
  End If
End Sub
Sub filterA_click()
  If (ActiveSheet.ProtectContents = True) Then
    MsgBox "Protected Worksheet: This Option is not availabe"
  Else
    Call DefaultWorkbook.setFilterVisibility(False)
  End If
End Sub


Sub Info_click()
  If (ActiveSheet.ProtectContents = True) Then
    MsgBox "Protected Worksheet: This Option is not availabe"
  Else
    Call DefaultWorkbook.setInfoVisibility(True)
  End If
End Sub
Sub InfoA_click()
  If (ActiveSheet.ProtectContents = True) Then
    MsgBox "Protected Worksheet: This Option is not availabe"
  Else
    Call DefaultWorkbook.setInfoVisibility(False)
  End If
End Sub

Sub Graph_click()
  If ActiveSheet.Name <> "Table" Then
    MsgBox "Not possible with Sheet Drill"
  Else
    If ActiveWorkbook.ProtectStructure = True Then
      MsgBox "Protected Workbook: This Option is not available"
    Else
      If (ActiveSheet.ProtectContents = True) Then
        MsgBox "Protected Worksheet: This Option is not availabe"
      Else
        Call DefaultWorkbook.setTableVisibility(False)
        Call DefaultWorkbook.adjustSheets
      End If
    End If
  End If
End Sub

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub filter_click()
  If (ActiveSheet.ProtectContents = True) Then
    MsgBox "Protected Worksheet: This Option is not availabe"
  Else
    Call DefaultWorkbook.setFilterVisibility(True)
  End If
End Sub
Sub filterA_click()
  If (ActiveSheet.ProtectContents = True) Then
    MsgBox "Protected Worksheet: This Option is not availabe"
  Else
    Call DefaultWorkbook.setFilterVisibility(False)
  End If
End Sub

Sub Info_click()
  If (ActiveSheet.ProtectContents = True) Then
    MsgBox "Protected Worksheet: This Option is not availabe"
  Else
    Call DefaultWorkbook.setInfoVisibility(True)
  End If
End Sub
Sub InfoA_click()
  If (ActiveSheet.ProtectContents = True) Then
    MsgBox "Protected Worksheet: This Option is not availabe"
  Else
    Call DefaultWorkbook.setInfoVisibility(False)
  End If
End Sub

Sub Table_click()
  If ActiveSheet.Name <> "Graph" Then
    MsgBox "Not possible with Sheet Drill"
  Else
    If ActiveWorkbook.ProtectStructure = True Then
      MsgBox "Protected Workbook: This Option is not available"
    Else
      If (ActiveSheet.ProtectContents = True) Then
        MsgBox "Protected Worksheet: This Option is not availabe"
      Else
        Call DefaultWorkbook.setTableVisibility(True)
        Call DefaultWorkbook.adjustSheets
      End If
    End If
  End If
End Sub


Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub filter_click()
  If (ActiveSheet.ProtectContents = True) Then
    MsgBox "Protected Worksheet: This Option is not availabe"
  Else
    Call DefaultWorkbook.setFilterVisibility(True)
  End If
End Sub
Sub filterA_click()
  If (ActiveSheet.ProtectContents = True) Then
    MsgBox "Protected Worksheet: This Option is not availabe"
  Else
    Call DefaultWorkbook.setFilterVisibility(False)
  End If
End Sub


Sub Info_click()
  If (ActiveSheet.ProtectContents = True) Then
    MsgBox "Protected Worksheet: This Option is not availabe"
  Else
    Call DefaultWorkbook.setInfoVisibility(True)
  End If
End Sub
Sub InfoA_click()
  If (ActiveSheet.ProtectContents = True) Then
    MsgBox "Protected Worksheet: This Option is not availabe"
  Else
    Call DefaultWorkbook.setInfoVisibility(False)
  End If
End Sub

Sub Graph_click()
  If ActiveSheet.Name <> "Table" Then
    MsgBox "Not possible with Sheet Drill"
  Else
    If ActiveWorkbook.ProtectStructure = True Then
      MsgBox "Protected Workbook: This Option is not available"
    Else
      If (ActiveSheet.ProtectContents = True) Then
        MsgBox "Protected Worksheet: This Option is not availabe"
      Else
        Call DefaultWorkbook.setTableVisibility(False)
        Call DefaultWorkbook.adjustSheets
      End If
    End If
  End If
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_BeforeClose(Cancel As Boolean)
If Accessibility.paccessibility Then
     Accessibility.delete_menu
  End If
End Sub


Private Sub Workbook_Open()
  If Accessibility.paccessibility Then
     Accessibility.create_menu
     Accessibility.show_menu
  End If
End Sub


Private Sub Workbook_WindowActivate(ByVal Wn As Window)
    If Accessibility.paccessibility Then
         Accessibility.reset_menu
         Accessibility.show_menu
    End If
End Sub

Private Sub Workbook_WindowDeactivate(ByVal Wn As Window)
    If Accessibility.paccessibility Then
         Accessibility.hide_menu
    End If
End Sub



INQUEST-PP=macro
